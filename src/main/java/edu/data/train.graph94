class C{  public ArffReader(Reader reader,int capacity,boolean batch) throws IOException {  m_batchMode=batch;  if (batch) {    m_retainStringValues=true;  }  if (capacity < 0) {    throw new IllegalArgumentException("Capacity has to be positive!");  }  m_Tokenizer=new StreamTokenizer(reader);  initTokenizer();  readHeader(capacity);  initBuffers();}  }
class C{  public SmsMwiMessage(){  this("",SmsAlphabet.LATIN1);}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public boolean isDeleteOnExit(){  return deleteOnExit;}  }
class C{  private boolean discardBridge(Method m){  if (isNotVisibilityBridge(m)) {    if (Log.isLoggingOn()) {      Log.logLine("Will not use: " + m.toString());      Log.logLine("  reason: it's a bridge method");    }    return true;  } else   if (m.getDeclaringClass().isAnonymousClass() && m.getDeclaringClass().getEnclosingClass() != null && m.getDeclaringClass().getEnclosingClass().isEnum()) {    return true;  }  return false;}  }
class C{  @Override protected ConfigurationParameter createConfigurationParameter(String name,String description,Object value,Class type,boolean userModifiable){  return new ConfigurationParameterJmxImpl(name,description,value,type,userModifiable);}  }
class C{  private static void createOrdinaryODPlan(PopulationFactory factory,Person person,String fromId,String toId,Geometry from,Geometry to,String fromTransf,String toTransf){  Plan plan=factory.createPlan();  Coord homeCoord=null;  Coord workCoord=null;  if (fromTransf.equals("GK4")) {    homeCoord=Global.gk4ToUTM32N.transform(PlanCreationUtils.shoot(from));  } else {    homeCoord=Global.ct.transform(PlanCreationUtils.shoot(from));  }  if (toTransf.equals("GK4")) {    workCoord=Global.gk4ToUTM32N.transform(PlanCreationUtils.shoot(to));  } else {    workCoord=Global.ct.transform(PlanCreationUtils.shoot(to));  }  if (!fromId.contains("A")) {    Coord c=Global.UTM32NtoGK4.transform(homeCoord);    Geometry nearestToHome=GAPScenarioBuilder.getBuiltAreaQT().getClosest(c.getX(),c.getY());    homeCoord=Global.gk4ToUTM32N.transform(PlanCreationUtils.shoot(nearestToHome));  }  if (!toId.contains("A")) {    if (toId.startsWith("09180")) {      workCoord=chooseWorkLocation(toId);    } else {      Coord c=Global.UTM32NtoGK4.transform(workCoord);      Geometry nearest=GAPScenarioBuilder.getBuiltAreaQT().getClosest(c.getX(),c.getY());      workCoord=Global.gk4ToUTM32N.transform(PlanCreationUtils.shoot(nearest));    }  }  Activity actHome=factory.createActivityFromCoord(Global.ActType.home.name(),homeCoord);  actHome.setStartTime(0.);  Link fromLink=NetworkUtils.getNearestLink(scenario.getNetwork(),homeCoord);  Link toLink=NetworkUtils.getNearestLink(scenario.getNetwork(),workCoord);  double homeEndTime=0;  double ttime=dijkstra.calcLeastCostPath(fromLink.getToNode(),toLink.getToNode(),0.,person,null).travelTime;  double mean2=0;  do {    homeEndTime=9 * 3600 + PlanCreationUtils.createRandomTimeShift(3);    mean2=17.5 * 3600 + PlanCreationUtils.createRandomTimeShift(2);  } while (homeEndTime <= 0 || (mean2 - homeEndTime - ttime) < 0 || (mean2 + ttime) > 24 * 3600);  actHome.setEndTime(homeEndTime);  ((Activity)actHome).setLinkId(fromLink.getId());  plan.addActivity(actHome);  plan.addLeg(factory.createLeg(TransportMode.car));  Activity actWork=factory.createActivityFromCoord(Global.ActType.work.name(),workCoord);  actWork.setStartTime(actHome.getEndTime() + ttime);  actWork.setEndTime(mean2);  ((Activity)actWork).setLinkId(toLink.getId());  plan.addActivity(actWork);  plan.addLeg(factory.createLeg(TransportMode.car));  actHome=factory.createActivityFromCoord(Global.ActType.home.name(),homeCoord);  actHome.setStartTime(actWork.getEndTime() + ttime);  ((Activity)actHome).setLinkId(fromLink.getId());  plan.addActivity(actHome);  person.addPlan(plan);  person.setSelectedPlan(plan);}  }
class C{  public void expireZkSession(JettySolrRunner jetty){  CoreContainer cores=jetty.getCoreContainer();  if (cores != null) {    SolrZkClient zkClient=cores.getZkController().getZkClient();    zkClient.getSolrZooKeeper().closeCnxn();    long sessionId=zkClient.getSolrZooKeeper().getSessionId();    zkServer.expire(sessionId);    log.info("Expired zookeeper session {} from node {}",sessionId,jetty.getBaseUrl());  }}  }
class C{  public DCCppLight(DCCppTrafficController tc,DCCppLightManager lm,String systemName,String userName){  super(systemName,userName);  this.tc=tc;  this.lm=lm;  initializeLight(systemName);}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String accumHeader=null;  String outputHeader=null;  int row, col, x, y, x2, y2, nx, ny;  int progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double nFlowDir=0;  boolean isOutlet=false;  double maxFlowAccum=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      accumHeader=args[i];    } else     if (i == 3) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (accumHeader == null)|| (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double streamsNoData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster accum=new WhiteboxRaster(accumHeader,"r");    if (accum.getNumberRows() != rows || accum.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    updateProgress("Finding network links:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) != 0 && streams.getValue(row,col) != streamsNoData) {          isOutlet=false;          flowDir=pntr.getValue(row,col);          if (flowDir == 0) {            isOutlet=true;          } else {            c=(int)(Math.log(flowDir) / LnOf2);            if (streams.getValue(row + dY[c],col + dX[c]) == 0 || streams.getValue(row + dY[c],col + dX[c]) == streamsNoData) {              isOutlet=true;            }          }          if (isOutlet) {            x=col;            y=row;            flag=true;            do {              output.setValue(y,x,1.0);              maxFlowAccum=0;              nx=0;              ny=0;              for (c=0; c < 8; c++) {                x2=x + dX[c];                y2=y + dY[c];                nFlowDir=pntr.getValue(y2,x2);                if (streams.getValue(y2,x2) > 0 && nFlowDir == inflowingVals[c]) {                  if (accum.getValue(y2,x2) > maxFlowAccum) {                    nx=x2;                    ny=y2;                    maxFlowAccum=accum.getValue(y2,x2);                  }                }              }              if (maxFlowAccum > 0) {                x=nx;                y=ny;              } else {                flag=false;              }            } while (flag);          }        } else         if (streams.getValue(row,col) == streamsNoData) {          output.setValue(row,col,streamsNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void removeThrow() throws SQLException {  if (last == null) {    throw new IllegalStateException("No last " + dataClass + " object to remove. Must be called after a call to next.");  }  if (classDao == null) {    throw new IllegalStateException("Cannot remove " + dataClass + " object because classDao not initialized");  }  try {    classDao.delete(last);  }  finally {    last=null;  }}  }
class C{  public FilledList(){}  }
class C{  public boolean canBeNegative(){  boolean negative=true;  return negative;}  }
class C{  public void addSslHost(String newSslHost){  String newSslHosts=StringUtils.addToList(newSslHost,getSslHosts(),10);  setSslHosts(newSslHosts);}  }
class C{  private void readAll() throws IOException {  while (!closed) {    read(1000);  }}  }
class C{  public X509CRLEntryImpl(TBSCertList.RevokedCertificate rcert,X500Principal issuer){  this.rcert=rcert;  this.extensions=rcert.getCrlEntryExtensions();  this.issuer=issuer;}  }
class C{  protected static void cleanDirectory(File dir){  if (dir == null || dir.listFiles() == null) {    return;  }  File[] files=dir.listFiles();  for (  File file : files) {    if (file.isDirectory()) {      cleanDirectory(file);    } else {      file.delete();    }  }  dir.delete();}  }
class C{  protected void removeSetterlessGetters(SerializationConfig config,BasicBeanDescription beanDesc,List<BeanPropertyDefinition> properties){  Iterator<BeanPropertyDefinition> it=properties.iterator();  while (it.hasNext()) {    BeanPropertyDefinition property=it.next();    if (!property.couldDeserialize() && !property.isExplicitlyIncluded()) {      it.remove();    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static String toString(LocalDate data){  return data == null ? "" : data.format(formatter("dd/MM/yyyy"));}  }
class C{  public boolean isJsonPrimitive(){  return this instanceof JsonPrimitive;}  }
class C{  public static String fieldName(Class<?> aClass,String regex){  if (isNestedMapping(regex))   return regex;  String result=null;  for (  Class<?> clazz : getAllsuperClasses(aClass))   if (!isNull(result=getFieldName(clazz,regex)))   return result;  return result;}  }
class C{  public SearchDialog(Shell parentShell,DroidsafeInfoOutlineViewPart viewPart){  super(parentShell);  setShellStyle(SWT.MODELESS);  this.viewPart=viewPart;  this.labelProvider=viewPart.getLabelProvider();  this.contentProvider=viewPart.getContentProvider();  this.treeViewer=viewPart.getViewer();}  }
class C{  @Override public Enumeration<String> enumerateRequests(){  Vector<String> newVector=new Vector<String>(0);  if (m_visualizeDataSet != null) {    newVector.addElement("Show summaries");  }  return newVector.elements();}  }
class C{  public static <E>ImmutableList<E> copyOf(E[] elements){switch (elements.length) {case 0:    return ImmutableList.of();case 1:  return new SingletonImmutableList<E>(elements[0]);default :return new RegularImmutableList<E>(checkElementsNotNull(elements.clone()));}}  }
class C{  private void badIndex(int index) throws ArrayIndexOutOfBoundsException {  String msg="Attempt to modify attribute at illegal index: " + index;  throw new ArrayIndexOutOfBoundsException(msg);}  }
class C{  public ByteArrayProtocolOutputStream(int initialCapacity){  buff=new byte[initialCapacity];}  }
class C{  public static boolean isVolumeFullCopy(Volume volume,DbClient dbClient){  boolean isFullCopy=false;  URI fcSourceObjURI=volume.getAssociatedSourceVolume();  if (!NullColumnValueGetter.isNullURI(fcSourceObjURI)) {    BlockObject fcSourceObj=BlockObject.fetch(dbClient,fcSourceObjURI);    if ((fcSourceObj != null) && (!fcSourceObj.getInactive())) {      isFullCopy=true;    }  }  return isFullCopy;}  }
class C{  @Override public boolean doSearch(TestChromosome test,LocalSearchObjective<TestChromosome> objective){  logger.info("Test before local search: " + test.getTestCase().toCode());  final Set<Branch> coveredBranches;  if (suite != null) {    coveredBranches=collectCoveredBranches(suite);  } else {    coveredBranches=getCoveredBranches(test);  }  final Set<Branch> uncoveredBranches=collectUncoveredBranches(coveredBranches);  if (uncoveredBranches.isEmpty()) {    return false;  }  if (!hasUncoveredBranch(test,uncoveredBranches)) {    return false;  }  Set<Integer> targetStatementIndexes=collectStatementIndexesWithSymbolicVariables(test,objective);  final boolean fitnessHasImproved;  if (targetStatementIndexes.isEmpty()) {    fitnessHasImproved=false;  } else {    logger.info("Yes, now applying the search at positions {}!",targetStatementIndexes);    DSETestGenerator dseTestGenerator;    if (suite != null) {      dseTestGenerator=new DSETestGenerator(suite);    } else {      dseTestGenerator=new DSETestGenerator();    }    final TestChromosome newTest=dseTestGenerator.generateNewTest(test,targetStatementIndexes,objective);    if (newTest != null) {      fitnessHasImproved=true;    } else {      fitnessHasImproved=false;    }  }  LocalSearchBudget.getInstance().countLocalSearchOnTest();  return fitnessHasImproved;}  }
class C{  Credentials readCred(int version) throws IOException, RealmException, KrbApErrException, Asn1Exception {  PrincipalName cpname=null;  try {    cpname=readPrincipal(version);  } catch (  Exception e) {  }  if (DEBUG) {    System.out.println(">>>DEBUG <CCacheInputStream>  client principal is " + cpname);  }  PrincipalName spname=null;  try {    spname=readPrincipal(version);  } catch (  Exception e) {  }  if (DEBUG) {    System.out.println(">>>DEBUG <CCacheInputStream> server principal is " + spname);  }  EncryptionKey key=readKey(version);  if (DEBUG) {    System.out.println(">>>DEBUG <CCacheInputStream> key type: " + key.getEType());  }  long times[]=readTimes();  KerberosTime authtime=new KerberosTime(times[0]);  KerberosTime starttime=(times[1] == 0) ? null : new KerberosTime(times[1]);  KerberosTime endtime=new KerberosTime(times[2]);  KerberosTime renewTill=(times[3] == 0) ? null : new KerberosTime(times[3]);  if (DEBUG) {    System.out.println(">>>DEBUG <CCacheInputStream> auth time: " + authtime.toDate().toString());    System.out.println(">>>DEBUG <CCacheInputStream> start time: " + ((starttime == null) ? "null" : starttime.toDate().toString()));    System.out.println(">>>DEBUG <CCacheInputStream> end time: " + endtime.toDate().toString());    System.out.println(">>>DEBUG <CCacheInputStream> renew_till time: " + ((renewTill == null) ? "null" : renewTill.toDate().toString()));  }  boolean skey=readskey();  boolean flags[]=readFlags();  TicketFlags tFlags=new TicketFlags(flags);  HostAddress addr[]=readAddr();  HostAddresses addrs=null;  if (addr != null) {    addrs=new HostAddresses(addr);  }  AuthorizationDataEntry[] auDataEntry=readAuth();  AuthorizationData auData=null;  if (auDataEntry != null) {    auData=new AuthorizationData(auDataEntry);  }  byte[] ticketData=readData();  byte[] ticketData2=readData();  if (cpname == null || spname == null) {    return null;  }  try {    return new Credentials(cpname,spname,key,authtime,starttime,endtime,renewTill,skey,tFlags,addrs,auData,ticketData != null ? new Ticket(ticketData) : null,ticketData2 != null ? new Ticket(ticketData2) : null);  } catch (  Exception e) {    return null;  }}  }
class C{  public DefaultDeployerFactory(ClassLoader classLoader){  super();  AbstractFactoryRegistry.register(classLoader,this);}  }
class C{  protected void verifyAndAttachOutputs(ExecutionContext ec,PackageFunction returnFunc,String outputParams) throws DMLRuntimeException {  ArrayList<String> outputs=getParameters(outputParams);  if (outputs.size() != returnFunc.getNumFunctionOutputs()) {    throw new DMLRuntimeException("Number of function outputs (" + returnFunc.getNumFunctionOutputs() + ") "+ "does not match with declaration ("+ outputs.size()+ ").");  }  for (int i=0; i < outputs.size(); i++) {    StringTokenizer tk=new StringTokenizer(outputs.get(i),":");    ArrayList<String> tokens=new ArrayList<String>();    while (tk.hasMoreTokens()) {      tokens.add(tk.nextToken());    }    if (returnFunc.getFunctionOutput(i).getType() == FunctionParameterType.Matrix) {      Matrix m=(Matrix)returnFunc.getFunctionOutput(i);      if (!(tokens.get(0).equals(getFunctionParameterDataTypeString(FunctionParameterType.Matrix))) || !(tokens.get(2).equals(getMatrixValueTypeString(m.getValueType())))) {        throw new DMLRuntimeException("Function output '" + outputs.get(i) + "' does not match with declaration.");      }      String varName=tokens.get(1);      MatrixObject newVar=createOutputMatrixObject(m);      newVar.setVarName(varName);      ec.setVariable(varName,newVar);      continue;    }    if (returnFunc.getFunctionOutput(i).getType() == FunctionParameterType.Scalar) {      Scalar s=(Scalar)returnFunc.getFunctionOutput(i);      if (!tokens.get(0).equals(getFunctionParameterDataTypeString(FunctionParameterType.Scalar)) || !tokens.get(2).equals(getScalarValueTypeString(s.getScalarType()))) {        throw new DMLRuntimeException("Function output '" + outputs.get(i) + "' does not match with declaration.");      }      ScalarObject scalarObject=null;      ScalarValueType type=s.getScalarType();switch (type) {case Integer:        scalarObject=new IntObject(tokens.get(1),Long.parseLong(s.getValue()));      break;case Double:    scalarObject=new DoubleObject(tokens.get(1),Double.parseDouble(s.getValue()));  break;case Boolean:scalarObject=new BooleanObject(tokens.get(1),Boolean.parseBoolean(s.getValue()));break;case Text:scalarObject=new StringObject(tokens.get(1),s.getValue());break;default :throw new DMLRuntimeException("Unknown scalar value type '" + type + "' of output '"+ outputs.get(i)+ "'.");}ec.setVariable(tokens.get(1),scalarObject);continue;}if (returnFunc.getFunctionOutput(i).getType() == FunctionParameterType.Object) {if (!tokens.get(0).equals(getFunctionParameterDataTypeString(FunctionParameterType.Object))) {throw new DMLRuntimeException("Function output '" + outputs.get(i) + "' does not match with declaration.");}throw new DMLRuntimeException("Object types not yet supported");}throw new DMLRuntimeException("Unknown data type '" + returnFunc.getFunctionOutput(i).getType() + "' "+ "of output '"+ outputs.get(i)+ "'.");}}  }
class C{  public static String reverse(final String input){  final char[] charInput=input.toCharArray();  reverse(charInput,0,charInput.length);  return new String(charInput);}  }
class C{  boolean hasPrevious(){  return prevNodes.size() > 0;}  }
class C{  public static String[] nodeStringArrayValue(Object node){  if (isArray(node)) {    List list=(List)node;    String[] arr=new String[list.size()];    for (int i=0; i < arr.length; i++) {      arr[i]=nodeStringValue(list.get(i),null);    }    return arr;  } else {    return Strings.splitStringByCommaToArray(node.toString());  }}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null) {    zzReader.close();  }}  }
class C{  public void addFooter(@NonNull View view){  if (view == null) {    throw new IllegalArgumentException("You can't have a null footer!");  }  mFooters.add(view);}  }
class C{  public static RowDescriptor empty(final DatatypeCoder datatypeCoder){  return new RowDescriptor(NO_DESCRIPTORS,datatypeCoder);}  }
class C{  public Selection(){  this.elements=java.util.Collections.emptyList();  this.head=null;}  }
class C{  public void call(String name,List<Object> list) throws IOException {  if (generator.isExcludingFieldsNamed(name)) {    return;  }  writeName(name);  writeArray(list);}  }
class C{  public QueryStringQueryBuilder analyzeWildcard(boolean analyzeWildcard){  this.analyzeWildcard=analyzeWildcard;  return this;}  }
class C{  public static void main(String[] args){  int[] deck;  do {    deck=new int[52];    pickFourCards(deck);  } while (sum(deck) != 24);  print(deck);}  }
class C{  private void loadRoutingTable(){  Map<String,List<String>> newRoutingTable=new ConcurrentHashMap<>();  Config config=gondola.getConfig();  for (  String hostId : config.getHostIds()) {    if (hostId.equals(gondola.getHostId())) {      myAppUri=Utils.getAppUri(config,hostId);      continue;    }    String appUri=Utils.getAppUri(config,hostId);    serviceUris.put(hostId,appUri);    for (    String shardId : config.getShardIds(hostId)) {      List<String> addresses=newRoutingTable.get(shardId);      if (addresses == null) {        addresses=new ArrayList<>();        newRoutingTable.put(shardId,addresses);      }      addresses.add(appUri);    }  }  routingTable=newRoutingTable;}  }
class C{  public static String formatDistance(Context context,double distance,boolean metricUnits){  if (Double.isNaN(distance) || Double.isInfinite(distance)) {    return context.getString(R.string.value_unknown);  }  if (metricUnits) {    if (distance > 500.0) {      distance*=UnitConversions.M_TO_KM;      return context.getString(R.string.value_float_kilometer,distance);    } else {      return context.getString(R.string.value_float_meter,distance);    }  } else {    if (distance * UnitConversions.M_TO_MI > 0.5) {      distance*=UnitConversions.M_TO_MI;      return context.getString(R.string.value_float_mile,distance);    } else {      distance*=UnitConversions.M_TO_FT;      return context.getString(R.string.value_float_feet,distance);    }  }}  }
class C{  @DELETE @Path("/{userName}") @RequiresRole(role=Role.ADMINISTRATOR) public void delete(@PathParam("userName") String name){  PrincipalId id=PrincipalUtil.fromName(name);  Validate.isTrue(getSystemDomain().equalsIgnoreCase(id.getDomain()),sm.getString("valid.not.systemdomain",id.getDomain(),tenant));  try {    getIDMClient().deletePrincipal(tenant,id.getName());  } catch (  NoSuchTenantException|InvalidPrincipalException e) {    log.debug("Failed to delete user '{}' from tenant '{}'",name,tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  InvalidArgumentException e) {    log.debug("Failed to delete user '{}' from tenant '{}' due to a client side error",name,tenant,e);    throw new BadRequestException(sm.getString("res.user.delete.failed",name,tenant),e);  }catch (  Exception e) {    log.error("Failed to delete user '{}' from tenant '{}' due to a server side error",name,tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  @SmallTest public void testCreateNull(){  SimpleCursorAdapter ca=new SimpleCursorAdapter(mContext,mLayout,null,mFrom,mTo);  assertEquals(0,ca.getCount());}  }
class C{  public Builder putProperties(String prefix,Properties properties){  for (  Object key1 : properties.keySet()) {    String key=(String)key1;    String value=properties.getProperty(key);    if (key.startsWith(prefix)) {      map.put(key.substring(prefix.length()),value);    }  }  return this;}  }
class C{  public NotificationChain basicSetParameter(TypeInfo newParameter,NotificationChain msgs){  TypeInfo oldParameter=parameter;  parameter=newParameter;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.TYPE_REF__PARAMETER,oldParameter,newParameter);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static boolean hasLegacyWebContent(AccessibilityNodeInfoCompat node){  if (node == null) {    return false;  }  if (!supportsWebActions(node)) {    return false;  }  AccessibilityNodeInfoCompat parent=node.getParent();  if (supportsWebActions(parent)) {    if (parent != null) {      parent.recycle();    }    return false;  }  if (parent != null) {    parent.recycle();  }  return node.getChildCount() == 0;}  }
class C{  static synchronized String findInternedString(String str){  WeakReference<String> ref;  ref=internedStrings.get(str);  if (ref != null) {    String s=ref.get();    if (s != null) {      return s;    }  }  return null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.BOOL_LITERAL__VALUE:    return value != VALUE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:08:17.573 -0500",hash_original_method="8D789129DF04DFDB1E544DD575A02CF8",hash_generated_method="D8F08D7BBA746EEAFA49BA2180473070") public static String newStringIso8859_1(byte[] bytes){  return StringUtils.newString(bytes,CharEncoding.ISO_8859_1);}  }
class C{  @Override public synchronized void close() throws IOException {  buffer=null;  isClosed=true;  notifyAll();}  }
class C{  public void divideEquals(double a){  real/=a;  imag/=a;}  }
class C{  private void checkAndPurgeObsoleteSnapshot(String fileSystemId){  if (!isRetentionRequired()) {    return;  }  List<RetainedReplica> replicas=findObsoleteReplica(fileSystemId);  for (  RetainedReplica replica : replicas) {    for (    String obsoleteCopyId : replica.getAssociatedReplicaIds()) {      info("Delete snapshot %s since it exceeds max number of copies allowed",obsoleteCopyId);      FileStorageUtils.deleteFileSnapshot(uri(obsoleteCopyId));    }    getModelClient().delete(replica);  }}  }
class C{  public void appendTo(StringBuilder buffer){  buffer.append(this.originalString,this.offset,this.offset + this.length);}  }
class C{  public boolean containPhysicalIndexFile(String physicalName){  return findPhysicalIndexFile(physicalName) != null;}  }
class C{  boolean isRunning(){  return !stop;}  }
class C{  public void write(DataOutputStream dos) throws IOException {  dos.writeInt((size() + 1) * 2);  dos.writeInt(LPC_PROPERY_MANAGEMENT_POLICY.length());  dos.writeChars(LPC_PROPERY_MANAGEMENT_POLICY);  if (reuseProperties == Boolean.TRUE) {    dos.writeInt(LPC_REUSE_PROPERTIES.length());    dos.writeChars(LPC_REUSE_PROPERTIES);  } else {    dos.writeInt(LPC_CLEAR_PROPERTIES.length());    dos.writeChars(LPC_CLEAR_PROPERTIES);  }  for (Enumeration e=propertyNames(); e.hasMoreElements(); ) {    String key=(String)e.nextElement();    String value=getProperty(key);    dos.writeInt(key.length());    dos.writeChars(key);    dos.writeInt(value.length());    dos.writeChars(value);  }}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.DOCLET;}  }
class C{  public static String computeCodebase(String name,String jarFile,String port) throws IOException {  return computeCodebase(name,jarFile,Integer.parseInt(port));}  }
class C{  public static String normalizeBoolean(String value){  value=collapseWhiteSpace(value);  if (value.equals("1")) {    return "true";  } else   if (value.equals("0")) {    return "false";  } else   if (value.equals("true") || value.equals("false")) {    return value;  } else {    throw new IllegalArgumentException("Not a legal boolean value: " + value);  }}  }
class C{  protected static void computeSigma(int i,DoubleArray pij_row,double perplexity,double log_perp,double[] pij_i){  double max=pij_row.get((int)Math.ceil(perplexity)) / Math.E;  double beta=1 / max;  double diff=computeH(pij_row,pij_i,-beta) - log_perp;  double betaMin=0.;  double betaMax=Double.POSITIVE_INFINITY;  for (int tries=0; tries < PERPLEXITY_MAXITER && Math.abs(diff) > PERPLEXITY_ERROR; ++tries) {    if (diff > 0) {      betaMin=beta;      beta+=(betaMax == Double.POSITIVE_INFINITY) ? beta : ((betaMax - beta) * .5);    } else {      betaMax=beta;      beta-=(beta - betaMin) * .5;    }    diff=computeH(pij_row,pij_i,-beta) - log_perp;  }}  }
class C{  public void testCorrectBuild(){  Iterator<String> iter=m_Trie.iterator();  HashSet<String> set=new HashSet<String>();  while (iter.hasNext())   set.add(iter.next());  assertEquals("size() does not reflect number of added strings",m_Data.length,m_Trie.size());  assertEquals("Iterator returns different number of strings",m_Data.length,set.size());  for (int i=0; i < m_Data.length; i++) {    if (!set.contains(m_Data[i]))     fail("Cannot find string '" + m_Data[i] + "'");  }}  }
class C{  public static ShardRestoreStatus readShardRestoreStatus(StreamInput in) throws IOException {  ShardRestoreStatus shardSnapshotStatus=new ShardRestoreStatus();  shardSnapshotStatus.readFrom(in);  return shardSnapshotStatus;}  }
class C{  public void breadthFirst(Map<String,Object> options,Closure c){  boolean preorder=Boolean.valueOf(options.get("preorder").toString());  if (preorder)   callClosureForNode(c,this,1);  breadthFirstRest(preorder,2,c);  if (!preorder)   callClosureForNode(c,this,1);}  }
class C{  public static void writeXmlDocument(OutputStream os,Node node,String encoding,boolean includeXmlDeclaration,boolean enablePrettyPrint) throws ClassCastException, ClassNotFoundException, InstantiationException, IllegalAccessException {  DOMImplementationLS impl=getDomLsImplementation();  LSOutput out=createLSOutput(impl,os,encoding);  LSSerializer writer=createLSSerializer(impl,includeXmlDeclaration,enablePrettyPrint);  writer.write(node,out);}  }
class C{  public Object createField(String name){  return name;}  }
class C{  public static void createDir(File target) throws AdeUsageException {  if (!target.exists() && !target.mkdir() && !target.exists()) {    throw new AdeUsageException("Failed creating directory " + target.getPath());  }}  }
class C{  private void validateResponseValue(byte[] fromServer) throws SaslException {  if (fromServer == null) {    throw new SaslException("DIGEST-MD5: Authenication failed. " + "Expecting 'rspauth' authentication success message");  }  try {    byte[] expected=generateResponseValue("",digestUri,negotiatedQop,username,negotiatedRealm,passwd,nonce,cnonce,nonceCount,authzidBytes);    if (!Arrays.equals(expected,fromServer)) {      throw new SaslException("Server's rspauth value does not match what client expects");    }  } catch (  NoSuchAlgorithmException e) {    throw new SaslException("Problem generating response value for verification",e);  }catch (  IOException e) {    throw new SaslException("Problem generating response value for verification",e);  }}  }
class C{  public static boolean hasStepOfClass(final Class stepClass,final Traversal.Admin<?,?> traversal){  for (  final Step<?,?> step : traversal.getSteps()) {    if (step.getClass().equals(stepClass)) {      return true;    }  }  return false;}  }
class C{  public final static boolean equalsOne(char c,char[] match){  for (  char aMatch : match) {    if (c == aMatch) {      return true;    }  }  return false;}  }
class C{  public static boolean isLocalPolicyCrytoStrengthLimited() throws CryptoException {  return unlimitedStrengthTest() == CryptoStrength.LIMITED;}  }
class C{  private void initWith(Integer node,double time){  this.unvisited=new PriorityQueue<Integer>(PQ_INIT_SIZE,new DurationComparator());  this.visited=new HashSet<Integer>();  this.prevHops=new HashMap<Integer,ScheduleEntry>();  this.times=new TimeMap();  this.times.put(node,time);  this.unvisited.add(node);}  }
class C{  public void nextNull() throws IOException {  peek();  if (token != JsonToken.NULL) {    throw new IllegalStateException("Expected null but was " + token);  }  advance();}  }
class C{  public static void attachFragment(BaseActivity baseActivity,Fragment newFragment){  baseActivity.getSupportFragmentManager().beginTransaction().replace(R.id.fragmentContainer,newFragment).commit();}  }
class C{  private static boolean is32BitJvm(){  Integer bits=Integer.getInteger("sun.arch.data.model");  return bits != null && bits == 32;}  }
class C{  public static boolean isEmpty(String text){  return text == null || text.length() == 0 || text.trim().length() == 0 || "null".equalsIgnoreCase(text);}  }
class C{  public void testAnalyzer() throws Exception {  final String analyzer=CJKAnalyzer.class.getName();  final String tokenizerFactory=PatternTokenizerFactory.class.getName();  TokenFilterFactory factory=null;  factory=tokenFilterFactory("Synonym","synonyms","synonyms2.txt","analyzer",analyzer);  assertNotNull(factory);  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Analyzer and TokenizerFactory can't be specified both"));}  }
class C{  @Override public String toString(){  String s="KDE(mean=[";  double[] means=getMean();  for (  double mean : means) {    s+=StringUtils.getShortForm(mean) + ", ";  }  s=s.substring(0,s.length() - 2) + "]),std=";  double avgstd=0.0;  for (  double std : getStandardDeviations()) {    avgstd+=std;  }  s+=StringUtils.getShortForm((avgstd / means.length));  s+=") with " + points.length + " kernels ";  return s;}  }
class C{  public IntegerInterleavedRaster(SampleModel sampleModel,Point origin){  this(sampleModel,sampleModel.createDataBuffer(),new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);}  }
class C{  public long size(){  return (endIP.getValue() - startIP.getValue() + 1L);}  }
class C{  public static String obfuscate(final String s){  if (s.indexOf(0) != -1) {    throw new IllegalArgumentException(new StringScrambler2(new long[]{0x241005931110FC70L,0xDCD925A88EAD9F37L,0x19ADA1C861E2A85DL,0x9A5948E700FCAD8AL,0x2E11C83A72441DE2L}).toString());  }  final byte[] encoded;  try {    encoded=s.getBytes(UTF8);  } catch (  UnsupportedEncodingException ex) {    throw new AssertionError(ex);  }  long seed;  Random prng=new Random();  do {    seed=prng.nextLong();  } while (seed == 0);  prng=new Random(seed);  final StringBuffer code=new StringBuffer(new StringScrambler2(new long[]{0x4E919C38A5FA6161L,0x4B3EB92485C7262L,0xA60D8752CC9A703L,0xAC0E939BAE9E97B2L,0x4492779563BC6E7BL,0x877BC892C33314B5L}).toString());  appendHexLiteral(code,seed);  final int length=encoded.length;  for (int i=0; i < length; i+=8) {    final long key=prng.nextLong();    final long obfuscated=toLong(encoded,i) ^ key;    code.append(", ");    appendHexLiteral(code,obfuscated);  }  code.append(new StringScrambler2(new long[]{0x43314F04EE218EB8L,0xADBCFD6F942C9B1BL,0x2AEF7934B99F9C82L,0x4635E5491665AD73L}).toString());  code.append(s.replaceAll("\\\\",new StringScrambler2(new long[]{0x6D2C680D49523A01L,0xB932F1DBD19E82CEL}).toString()).replaceAll("\"",new StringScrambler2(new long[]{0x85E9D53EF7A9324BL,0xB05BD65C9F19DE07L}).toString()));  code.append(new StringScrambler2(new long[]{0xC54FFF0621E7D107L,0x194EAD468C6FCF93L}).toString());  return code.toString();}  }
class C{  public boolean supportsBigint(){  return serverVersion.isEqualOrAbove(1,5);}  }
class C{  private void addLocationAndTrackPropertyChange(){  for (  Location loc : locationManager.getList()) {    loc.addPropertyChangeListener(this);    for (    Track track : loc.getTrackList()) {      track.addPropertyChangeListener(this);      Schedule schedule=track.getSchedule();      if (schedule != null) {        schedule.addPropertyChangeListener(this);      }    }  }}  }
class C{  public ServiceNotPublishedException(){}  }
class C{  private void updateFailuresTableAndSummary(final PolicyEvaluatorState policyEvaluatorState,final PolicyFailure[] policyFailures){  final PolicyContext context=createPolicyContext();  final PolicyFailureData[] data=new PolicyFailureData[policyFailures.length];  for (int i=0; i < policyFailures.length; i++) {    data[i]=PolicyFailureData.fromPolicyFailure(policyFailures[i],context);  }  policyFailureTable.setPolicyFailures(data);  if (evaluator == null) {    return;  }  if (PolicyEvaluatorState.CANCELLED == policyEvaluatorState) {    statusLabel.setText(Messages.getString("PolicyWarningsCheckinControl.CanceledStatusLabelText"));    statusLabel.setImage(warningImage);    return;  }  if (PolicyEvaluatorState.POLICIES_LOAD_ERROR == policyEvaluatorState) {    statusLabel.setText(Messages.getString("PolicyWarningsCheckinControl.LoadFailedStatusLabelText"));    statusLabel.setImage(warningImage);    return;  }  if (PolicyEvaluatorState.UNEVALUATED == policyEvaluatorState) {    statusLabel.setText(Messages.getString("PolicyWarningsCheckinControl.PoliciesNotYetEvaluatedStatusLabelText"));    statusLabel.setImage(null);    return;  }  if (PolicyEvaluatorState.EVALUATED == policyEvaluatorState) {    if (policyFailures.length > 0) {      statusLabel.setText(Messages.getString("PolicyWarningsCheckinControl.FollowingNotEvulatedStatusLabelText"));      statusLabel.setImage(warningImage);      return;    } else {      statusLabel.setText(Messages.getString("PolicyWarningsCheckinControl.CheckinPolicyStatisfiedStatusLabelText"));      statusLabel.setImage(null);      return;    }  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public Builder addLoadingListItem(boolean addLoadingListItem){  this.addLoadingListItem=addLoadingListItem;  return this;}  }
class C{  @Override public void index(ByteBuffer rowKey,ColumnFamily cf){  if (!runsElassandra)   return;  try {    MappingInfo mappingInfo=this.mappingAtomicReference.get();    if (mappingInfo == null || mappingInfo.indices.size() == 0) {      logger.warn("No Elasticsearch index ready");      return;    }    MappingInfo.DocumentFactory docFactory=mappingInfo.new DocumentFactory(rowKey,cf);    Iterator<Cell> cellIterator=cf.iterator();    if (cellIterator.hasNext()) {      docFactory.index(cellIterator);    } else {      docFactory.prune();    }  } catch (  Throwable e) {    logger.error("error",e);  }}  }
class C{  public void showPropertyDialog(){  if (m_Editor.getValue() != null) {    if (m_PD == null) {      int x=getLocationOnScreen().x;      int y=getLocationOnScreen().y;      if (PropertyDialog.getParentDialog(this) != null)       m_PD=new PropertyDialog(PropertyDialog.getParentDialog(this),m_Editor,x,y); else       m_PD=new PropertyDialog(PropertyDialog.getParentFrame(this),m_Editor,x,y);      m_PD.setVisible(true);    } else {      m_PD.setVisible(true);    }    m_Editor.setValue(m_Editor.getValue());  }}  }
class C{  private NSObject parseDateString(){  String numericalString=parseString();  if (numericalString.length() > 4 && numericalString.charAt(4) == DATE_DATE_FIELD_DELIMITER) {    try {      return new NSDate(numericalString);    } catch (    Exception ex) {    }  }  return new NSString(numericalString);}  }
class C{  protected String __string(int offset){  offset+=bb.getInt(offset);  if (bb.hasArray()) {    return new String(bb.array(),bb.arrayOffset() + offset + SIZEOF_INT,bb.getInt(offset),FlatBufferBuilder.utf8charset);  } else {    ByteBuffer bb=this.bb.duplicate().order(ByteOrder.LITTLE_ENDIAN);    byte[] copy=new byte[bb.getInt(offset)];    bb.position(offset + SIZEOF_INT);    bb.get(copy);    return new String(copy,0,copy.length,FlatBufferBuilder.utf8charset);  }}  }
class C{  protected void _writeIndent() throws IOException {  if (_prettyPrint) {    for (int i=0; i < _indentLevel; i++) {      _write(_indentString);    }  }}  }
class C{  public static Object evaluate(Object context,Object self,String expr,List<String> engineConfigs) throws Draft3ExpressionException {  String trimmedExpr=StringUtils.trim(expr);  if (trimmedExpr.startsWith("$")) {    trimmedExpr=trimmedExpr.substring(1);  }  String function=trimmedExpr;  if (trimmedExpr.startsWith("{")) {    function="(function()%expr)()";    function=function.replace("%expr",trimmedExpr);  }  Context cx=Context.enter();  cx.setOptimizationLevel(OPTIMIZATION_LEVEL);  cx.setMaximumInterpreterStackDepth(MAX_STACK_DEPTH);  cx.setClassShutter(new Draft3ExpressionDenyAllClassShutter());  try {    Scriptable globalScope=cx.initStandardObjects();    if (engineConfigs != null) {      for (int i=0; i < engineConfigs.size(); i++) {        Reader engineConfigReader=new StringReader(engineConfigs.get(i));        cx.evaluateReader(globalScope,engineConfigReader,"engineConfig_" + i + ".js",1,null);      }    }    putToScope(EXPR_CONTEXT_NAME,context,cx,globalScope);    putToScope(EXPR_SELF_NAME,self,cx,globalScope);    Scriptable resultScope=cx.newObject(globalScope);    resultScope.setPrototype(globalScope);    resultScope.setParentScope(globalScope);    Object result=cx.evaluateString(resultScope,function,"script",1,null);    if (result == null || result instanceof Undefined) {      return null;    }    Object wrappedResult=Context.javaToJS(result,globalScope);    putToScope("$result",wrappedResult,cx,globalScope);    ScriptableObject.putProperty(globalScope,"$result",wrappedResult);    String finalFunction="(function() { " + "           var result = $result;" + "           var type = result instanceof Array? \"array\" : typeof result;"+ "           return JSON.stringify({ \"result\" : result, \"type\" : type }); "+ "     })()";    Scriptable wrapScope=cx.newObject(globalScope);    wrapScope.setPrototype(globalScope);    wrapScope.setParentScope(globalScope);    result=cx.evaluateString(wrapScope,finalFunction,"script",1,null);    return castResult(result);  } catch (  Exception e) {    String msg=String.format("Failed evaluating expression %s.",expr);    throw new Draft3ExpressionException(msg,e);  } finally {    Context.exit();  }}  }
class C{  public static OnlyBranchCoverageTestFitness createOnlyBranchCoverageTestFitness(Branch b,boolean branchExpressionValue){  return new OnlyBranchCoverageTestFitness(new BranchCoverageGoal(b,branchExpressionValue,b.getClassName(),b.getMethodName()));}  }
class C{  public void validateS3FileUpload(S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto,List<String> expectedS3Keys){  List<S3ObjectSummary> s3ObjectSummaries=s3Dao.listDirectory(s3FileTransferRequestParamsDto);  assertTrue(s3ObjectSummaries.size() == expectedS3Keys.size());  List<String> actualS3Keys=new ArrayList<>();  for (  S3ObjectSummary s3ObjectSummary : s3ObjectSummaries) {    actualS3Keys.add(s3ObjectSummary.getKey());  }  assertTrue(expectedS3Keys.containsAll(actualS3Keys));  assertTrue(actualS3Keys.containsAll(expectedS3Keys));}  }
class C{  private void simulateStmt(SsaInsn insn){  Insn ropInsn=insn.getOriginalRopInsn();  if (ropInsn.getOpcode().getBranchingness() != Rop.BRANCH_NONE || ropInsn.getOpcode().isCallLike()) {    simulateBranch(insn);  }  int opcode=insn.getOpcode().getOpcode();  RegisterSpec result=insn.getResult();  if (result == null) {    if (opcode == RegOps.DIV || opcode == RegOps.REM) {      SsaBasicBlock succ=insn.getBlock().getPrimarySuccessor();      result=succ.getInsns().get(0).getResult();    } else {      return;    }  }  int resultReg=result.getReg();  int resultValue=VARYING;  Constant resultConstant=null;switch (opcode) {case RegOps.CONST:{      CstInsn cstInsn=(CstInsn)ropInsn;      resultValue=CONSTANT;      resultConstant=cstInsn.getConstant();      break;    }case RegOps.MOVE:{    if (insn.getSources().size() == 1) {      int sourceReg=insn.getSources().get(0).getReg();      resultValue=latticeValues[sourceReg];      resultConstant=latticeConstants[sourceReg];    }    break;  }case RegOps.ADD:case RegOps.SUB:case RegOps.MUL:case RegOps.DIV:case RegOps.AND:case RegOps.OR:case RegOps.XOR:case RegOps.SHL:case RegOps.SHR:case RegOps.USHR:case RegOps.REM:{  resultConstant=simulateMath(insn,result.getBasicType());  if (resultConstant != null) {    resultValue=CONSTANT;  }  break;}case RegOps.MOVE_RESULT_PSEUDO:{if (latticeValues[resultReg] == CONSTANT) {  resultValue=latticeValues[resultReg];  resultConstant=latticeConstants[resultReg];}break;}default :{}}if (setLatticeValueTo(resultReg,resultValue,resultConstant)) {addUsersToWorklist(resultReg,resultValue);}}  }
class C{  public boolean delete() throws IOException {  try {    return file.delete();  }  finally {    close();  }}  }
class C{  public void init(){  AffinityTopologyVersion lockedTopVer=cctx.shared().lockedTopologyVersion(null);  if (lockedTopVer != null) {    canRemap=false;    map(keys,Collections.<ClusterNode,LinkedHashMap<KeyCacheObject,Boolean>>emptyMap(),lockedTopVer);  } else {    AffinityTopologyVersion topVer=this.topVer.topologyVersion() > 0 ? this.topVer : canRemap ? cctx.affinity().affinityTopologyVersion() : cctx.shared().exchange().readyAffinityVersion();    map(keys,Collections.<ClusterNode,LinkedHashMap<KeyCacheObject,Boolean>>emptyMap(),topVer);  }  markInitialized();}  }
class C{  public int maxInStreams(){  return maxInStreams;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) public void readItem(AttributeSet attrs){  TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.MenuItem);  itemId=a.getResourceId(R.styleable.MenuItem_android_id,defaultItemId);  final int category=a.getInt(R.styleable.MenuItem_android_menuCategory,groupCategory);  final int order=a.getInt(R.styleable.MenuItem_android_orderInCategory,groupOrder);  itemCategoryOrder=(category & SupportMenu.CATEGORY_MASK) | (order & SupportMenu.USER_MASK);  itemTitle=a.getText(R.styleable.MenuItem_android_title);  itemTitleCondensed=a.getText(R.styleable.MenuItem_android_titleCondensed);  itemIconResId=a.getResourceId(R.styleable.MenuItem_android_icon,0);  itemAlphabeticShortcut=getShortcut(a.getString(R.styleable.MenuItem_android_alphabeticShortcut));  itemNumericShortcut=getShortcut(a.getString(R.styleable.MenuItem_android_numericShortcut));  if (a.hasValue(R.styleable.MenuItem_android_checkable)) {    itemCheckable=a.getBoolean(R.styleable.MenuItem_android_checkable,false) ? 1 : 0;  } else {    itemCheckable=groupCheckable;  }  itemChecked=a.getBoolean(R.styleable.MenuItem_android_checked,defaultItemChecked);  itemVisible=a.getBoolean(R.styleable.MenuItem_android_visible,groupVisible);  itemEnabled=a.getBoolean(R.styleable.MenuItem_android_enabled,groupEnabled);  itemShowAsAction=a.getInt(R.styleable.MenuItem_showAsAction,-1);  itemListenerMethodName=a.getString(R.styleable.MenuItem_android_onClick);  itemActionViewLayout=a.getResourceId(R.styleable.MenuItem_actionLayout,0);  itemActionViewClassName=a.getString(R.styleable.MenuItem_actionViewClass);  itemActionProviderClassName=a.getString(R.styleable.MenuItem_actionProviderClass);  final boolean hasActionProvider=itemActionProviderClassName != null;  if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {    itemActionProvider=newInstance(itemActionProviderClassName,ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,mActionProviderConstructorArguments);  } else {    if (hasActionProvider) {      Log.w(LOG_TAG,"Ignoring attribute 'actionProviderClass'." + " Action view already specified.");    }    itemActionProvider=null;  }  a.recycle();  itemAdded=false;}  }
class C{  public int length(){  return mLabel.length() + mSuffix.length();}  }
class C{  public boolean hasRel(){  return super.hasAttribute(REL);}  }
class C{  private LogoutRequest createRequest(SloRequestSettings requestSettings){  LogoutRequest request=null;  logger.info("generateRequest for IDP: " + requestSettings.getIDPAlias());  try {    IDPConfiguration idpConfig=getMetadataSettings().getIDPConfiguration(requestSettings.getIDPAlias());    Validate.notNull(idpConfig,"IDPConfiguration not found for " + requestSettings.getIDPAlias());    SPConfiguration spConfig=getMetadataSettings().getSPConfiguration(requestSettings.getSPAlias());    if (spConfig == null) {      throw new IllegalArgumentException("service provider setting unavailable for " + requestSettings.getSPAlias());    }    String issuer=spConfig.getEntityID();    SamlUtils samlUtils=new SamlUtils(null,null,null,null,issuer);    String destination=SamlUtils.getIdpSloLocation(idpConfig,SamlNames.HTTP_REDIRECT);    if (destination == null) {      logger.warn(String.format("SLO end point does not exist for IDP: %s.",idpConfig.getAlias()));      return null;    }    request=samlUtils.createSamlLogoutRequest(null,destination,requestSettings.getNameIDFormat(),requestSettings.getSubject(),requestSettings.getSessionIndex());    Message message=new Message(MessageType.LOGOUT_REQUEST,request.getID(),requestSettings.getRelayState(),request.getIssueInstant(),request.getIssuer().getValue(),destination,null,null,requestSettings.getSessionIndex(),new SubjectData(requestSettings.getNameIDFormat(),requestSettings.getSubject()),null,false);    getMessageStore().add(message);  } catch (  Exception e) {    logger.error("Caught exception while generating request " + e.toString() + ", will ignore the request.");    return null;  }  return request;}  }
class C{  public ChangeLinkType(CnALink link,String linkTypeID,String comment){  this.link=link;  this.linkTypeID=linkTypeID;  this.comment=comment;}  }
class C{  public void clearParserHighlights(Parser parser){  for (Iterator i=parserHighlights.iterator(); i.hasNext(); ) {    HighlightInfo info=(HighlightInfo)i.next();    if (info.notice.getParser() == parser) {      if (info instanceof LayeredHighlightInfo) {        LayeredHighlightInfo lhi=(LayeredHighlightInfo)info;        if (lhi.width > 0 && lhi.height > 0) {          textArea.repaint(lhi.x,lhi.y,lhi.width,lhi.height);        }      } else {        TextUI ui=textArea.getUI();        ui.damageRange(textArea,info.getStartOffset(),info.getEndOffset());      }      i.remove();    }  }}  }
class C{  private void createQuadProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad110.vs",GL_VERTEX_SHADER);  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad110.fs",GL_FRAGMENT_SHADER);  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertex");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.quadProgram=program;}  }
class C{  public T caseExportSpecifier(ExportSpecifier object){  return null;}  }
class C{  @SafeVarargs public final void addAll(T... items){synchronized (mLock) {    if (mOriginalValues != null) {      Collections.addAll(mOriginalValues,items);    } else {      Collections.addAll(mObjects,items);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public InvisibleTypeOrVariableDescription(IEObjectDescription delegate,String accessSuggestion){  super(delegate);  this.accessModifierSuggestion=accessSuggestion;}  }
class C{  private static void TokenOut(int type) throws TokenizerException {  if (parseExpression) {    if ((type == Token.BUILTIN) || (type == Token.NUMBER) || (type == Token.STRING)|| (type == Token.IDENT)) {      if ((type != Token.STRING) && ((IsDelimiter(token) && !((type == Token.IDENT) && (prevToken.equals(".") || prevToken.equals("[") || prevToken.equals(",")))) || (((token.equals(",") && !inQuantifier) || token.equals(")") || token.equals("}")) && (parenDepth == 0)))) {        if (parenDepth != 0) {          TokenizingError("Expression with an unmatched (, [, {, or << " + "followed by");        }        ;        if (inQuantifier) {          TokenizingError("Expression with \\A or \\E" + " but no following `:` followed by");        }        ;        exprEnd=true;        Delimiter=token;        DelimiterCol=col;        DelimiterLine=reader.getLineNumber();        if (nextChar == '\n') {          DelimiterLine=DelimiterLine - 1;        }        ;        if (linev.size() > 0) {          startNewLine();        }      } else {        if (type == Token.BUILTIN) {          Symbol sym=PcalBuiltInSymbols.GetBuiltInSymbol(token);          if (sym.symbolType == Symbol.LEFT_PAREN) {            parenDepth=parenDepth + 1;          }          ;          if (sym.symbolType == Symbol.RIGHT_PAREN) {            parenDepth=parenDepth - 1;            if (parenDepth < 0) {              TokenizingError("Extra (unmatching)");            }            ;          }        }        ;        if (type == Token.STRING) {          prevToken=" ";        } else {          prevToken=token;        }        ;        if ((token.equals("\\A") || token.equals("\\E")) && (parenDepth == 0)) {          inQuantifier=true;        }        ;        if (inQuantifier && token.equals(":") && (parenDepth == 0)) {          inQuantifier=false;        }        ;        if ((!token.equals("")) || (type == Token.STRING)) {          linev.addElement(new TLAToken(token,col,type,reader.getLineNumber() + getLineCorrection));        }        ;        token="";      }    } else {      TokenizingError("Illegal token in an expression");      ;    }  } else {    exprEnd=true;    Delimiter=token;    DelimiterCol=col;    DelimiterLine=reader.getLineNumber();    if (nextChar == '\n') {      DelimiterLine=DelimiterLine - 1;    }    ;    token="";  }}  }
class C{  public void processUserApps(List<LauncherActivityInfoCompat> apps){  initVars();  HashSet<String> packageSet=new HashSet<>();  final boolean userAppsExisted=getUserApps(packageSet);  boolean newPackageAdded=false;  for (  LauncherActivityInfoCompat info : apps) {    String packageName=info.getComponentName().getPackageName();    if (!packageSet.contains(packageName)) {      packageSet.add(packageName);      newPackageAdded=true;      markForAddition(info,info.getFirstInstallTime());    }  }  if (newPackageAdded) {    mPrefs.edit().putStringSet(mPackageSetKey,packageSet).apply();    finalizeAdditions(userAppsExisted);  }}  }
class C{  public static void e(String tag,String msg,Throwable tr){  println(ERROR,tag,msg,tr);}  }
class C{  void draw(Graphics2D g){  for (  final EntityView<IEntity> view : visibleViews) {    try {      view.draw(g);    } catch (    RuntimeException e) {      logger.error(e,e);    }  }}  }
class C{  private void showWifiSettingsMessage(){  try {    if (player != null) {      if (player.isPlayingLocally()) {        hideNetworkError();      } else {        if (!curMessageTypes.contains(VideoNotPlayMessageType.IS_VIDEO_MESSAGE_DISPLAYED) && !player.isInError()) {          unlockOrientation();          hideCCPopUp();          hideSettingsPopUp();          if (!player.isReset()) {            if (!player.isInError()) {              currentPosition=player.getCurrentPosition();            }            player.reset();          }          player.hideController();          clearAllErrors();          View errorView=getView().findViewById(R.id.panel_network_error);          errorView.setVisibility(View.VISIBLE);          TextView errorHeaderTextView=(TextView)errorView.findViewById(R.id.error_header);          errorHeaderTextView.setText(getString(R.string.wifi_off_message));          errorView.findViewById(R.id.error_message).setVisibility(View.GONE);          curMessageTypes.add(VideoNotPlayMessageType.IS_SHOWN_WIFI_SETTINGS_MESSAGE);        }        resetClosedCaptioning();      }    }  } catch (  Exception ex) {    logger.error(ex);  }}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.fab:    Intent returnIntent=new Intent();  returnIntent.putExtra(ProfileActivity.Extra.AVATAR_URL,mAvatarUrl);setResult(RESULT_OK,returnIntent);supportFinishAfterTransition();ViewCompat.animate(v).translationX(v.getMeasuredWidth()).start();break;}}  }
class C{  static void start(){  instance.startMonitoring();}  }
class C{  public boolean hasRolloutCreatePermission(){  return hasUpdateTargetPermission() && hasReadDistributionPermission() && permissionService.hasPermission(SpPermission.ROLLOUT_MANAGEMENT);}  }
class C{  public void createNote(Note note){  SQLiteDatabase db=getWritableDatabase();  String spannableAsHtml=Html.toHtml(note.getSpannable());  String date=dt.format(new Date());  ContentValues values=new ContentValues();  values.put(KEY_SPANNABLE_NOTE,spannableAsHtml);  values.put(KEY_NOTE_TITLE,note.getTitle());  values.put(KEY_IMAGE,BitmapConverter.getBytes(note.getImage()));  values.put(KEY_DATE_UPDATED,date);  db.insert(TABLE_NOTES,null,values);  db.close();}  }
class C{  @SuppressWarnings("unchecked") public Object clone() throws CloneNotSupportedException {  AverageTrueRangeDataset clone=(AverageTrueRangeDataset)super.clone();  clone.data=(List<IndicatorSeries>)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  public boolean isRoot(){  return 1 == this.namespaceIdParts.length;}  }
class C{  public boolean isFree(long pos,int length){  int start=getBlock(pos);  int blocks=getBlockCount(length);  for (int i=start; i < start + blocks; i++) {    if (set.get(i)) {      return false;    }  }  return true;}  }
class C{  public static final String trimPrefix(String str,String... prefix){  if (str == null)   return null;  String result=str;  for (int idx=0; idx < prefix.length; idx++) {    if (prefix[idx] == null || prefix[idx].length() == 0)     continue;    if (result.startsWith(prefix[idx])) {      result=result.substring(prefix[idx].length());      idx=0;    }  }  return result;}  }
class C{  public boolean typeIsReferenceToObject(){  if (Reference.OBJECT_URI.equals(this.getType())) {    return true;  }  return false;}  }
class C{  public GemFireException(Throwable cause){  super(cause);}  }
class C{  public MLot createLot(int M_Product_ID){  StringBuffer name=new StringBuffer();  if (getPrefix() != null)   name.append(getPrefix());  int no=getCurrentNext();  name.append(no);  if (getSuffix() != null)   name.append(getSuffix());  no+=getIncrementNo();  setCurrentNext(no);  save();  MLot retValue=new MLot(this,M_Product_ID,name.toString());  retValue.saveEx();  return retValue;}  }
class C{  public static char[] asCharArray(byte[] bytes){  char[] chars=new char[bytes.length];  for (int i=0; i != chars.length; i++) {    chars[i]=(char)(bytes[i] & 0xff);  }  return chars;}  }
class C{  public void removeObserver(EngineObserver observer){  observer_.remove(observer);}  }
class C{  public String createQueryString(Projection p){  if (queryHeader == null) {    return null;  }  String bbox="undefined";  String height="undefined";  String width="undefined";  String sCoordParamName=WMTConstants.SRS;  if (p != null) {    Point2D ul=p.getUpperLeft();    Point2D lr=p.getLowerRight();    if (wmsVersion.compareTo("1.3.0") == 0) {      bbox=Double.toString(lr.getY()) + "," + Double.toString(ul.getX())+ ","+ Double.toString(ul.getY())+ ","+ Double.toString(lr.getX());      sCoordParamName=WMTConstants.CRS;      errorHandling="INIMAGE";    } else {      bbox=Double.toString(ul.getX()) + "," + Double.toString(lr.getY())+ ","+ Double.toString(lr.getX())+ ","+ Double.toString(ul.getY());    }    height=Integer.toString(p.getHeight());    width=Integer.toString(p.getWidth());  }  StringBuffer buf=new StringBuffer(queryHeader);  buf.append("?").append(WMTConstants.VERSION).append("=").append(wmsVersion).append("&").append(WMTConstants.REQUEST).append("=").append(mapRequestName).append("&").append(sCoordParamName).append("=").append("EPSG:4326").append("&").append(WMTConstants.BBOX).append("=").append(bbox).append("&").append(WMTConstants.HEIGHT).append("=").append(height).append("&").append(WMTConstants.WIDTH).append("=").append(width).append("&").append(WMTConstants.EXCEPTIONS).append("=").append(errorHandling);  if (imageFormat != null) {    buf.append("&").append(WMTConstants.FORMAT).append("=").append(imageFormat);    String baseImageFormat=imageFormat;    if (baseImageFormat.indexOf('/') > 0)     baseImageFormat=baseImageFormat.substring(baseImageFormat.indexOf('/'));    if (baseImageFormat.equals(WMTConstants.IMAGEFORMAT_JPEG)) {      buf.append("&quality=").append(imageQuality);    }  }  if (transparent != null) {    buf.append("&").append(WMTConstants.TRANSPARENT).append("=").append(transparent);  }  if (backgroundColor != null) {    buf.append("&").append(WMTConstants.BGCOLOR).append("=").append(backgroundColor);  }  if (layers != null) {    buf.append("&").append(WMTConstants.LAYERS).append("=").append(layers);  }  String cStyles=styles;  if (cStyles == null) {    cStyles="";  }  buf.append("&").append(WMTConstants.STYLES).append("=").append(cStyles);  if (Debug.debugging("wms")) {    Debug.output("query string: " + buf);  }  if (vendorSpecificNames != null) {    if (vendorSpecificValues != null) {      StringTokenizer nameTokenizer=new StringTokenizer(vendorSpecificNames,",");      StringTokenizer valueTokenizer=new StringTokenizer(vendorSpecificValues,",");      String paramName=null;      String paramValue=null;      while (nameTokenizer.hasMoreTokens()) {        try {          paramName=nameTokenizer.nextToken();          paramValue=valueTokenizer.nextToken();          buf.append("&").append(paramName).append("=").append(paramValue);        } catch (        NoSuchElementException e) {          if (Debug.debugging("wms")) {            Debug.output("WMSPlugIn.getRectangle(): " + "parameter \"" + paramName + "\" has no value");          }        }      }    }  }  return buf.toString();}  }
class C{  public void registerInput(String varName,RDD<String> rdd,String format,boolean hasHeader,String delim,boolean fill,double fillValue) throws DMLRuntimeException {  registerInput(varName,rdd.toJavaRDD(),format,hasHeader,delim,fill,fillValue,-1,-1,-1);}  }
class C{  private List<LatLng> createRectangle(LatLng center,double halfWidth,double halfHeight){  return Arrays.asList(new LatLng(center.latitude - halfHeight,center.longitude - halfWidth),new LatLng(center.latitude - halfHeight,center.longitude + halfWidth),new LatLng(center.latitude + halfHeight,center.longitude + halfWidth),new LatLng(center.latitude + halfHeight,center.longitude - halfWidth),new LatLng(center.latitude - halfHeight,center.longitude - halfWidth));}  }
class C{  private void centerOnOriginAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();synchronized (Simulation.LOCK) {        body.translateToOrigin();      }    }  }}  }
class C{  public boolean rewriteExif(String filename,Collection<ExifTag> tags) throws FileNotFoundException, IOException {  RandomAccessFile file=null;  InputStream is=null;  boolean ret;  try {    File temp=new File(filename);    is=new BufferedInputStream(new FileInputStream(temp));    ExifParser parser=null;    try {      parser=ExifParser.parse(is,this);    } catch (    ExifInvalidFormatException e) {      throw new IOException("Invalid exif format : ",e);    }    long exifSize=parser.getOffsetToExifEndFromSOF();    is.close();    is=null;    file=new RandomAccessFile(temp,"rw");    long fileLength=file.length();    if (fileLength < exifSize) {      throw new IOException("Filesize changed during operation");    }    ByteBuffer buf=file.getChannel().map(MapMode.READ_WRITE,0,exifSize);    ret=rewriteExif(buf,tags);  } catch (  IOException e) {    closeSilently(file);    throw e;  } finally {    closeSilently(is);  }  file.close();  return ret;}  }
class C{  public void flush(Rectangle r){  if (lastCache == null)   return;  Object o=lastCache.get();  if (o == null)   return;  TileCacheRed tcr=(TileCacheRed)o;  r=(Rectangle)r.clone();  r.x-=Math.round((float)usr2dev.getTranslateX());  r.y-=Math.round((float)usr2dev.getTranslateY());  tcr.flushCache(r);}  }
class C{  public static void apply(){  applyOpenSSLFix();  installLinuxPRNGSecureRandom();}  }
class C{  public void init(int nrOfTimeSeriesPerBatch,int startIdx){  this.nrOfTimeSeriesPerBatch=nrOfTimeSeriesPerBatch;  this.startIdx=startIdx;  this.queue=new ArrayDeque<>(nrOfTimeSeriesPerBatch);}  }
class C{  void removeAll(final boolean mark){  if (mark) {    AbstractInsnNode insn=first;    while (insn != null) {      AbstractInsnNode next=insn.next;      insn.index=-1;      insn.prev=null;      insn.next=null;      insn=next;    }  }  size=0;  first=null;  last=null;  cache=null;}  }
class C{  public static Object[] nullToEmpty(Object[] array){  if (array == null || array.length == 0) {    return EMPTY_OBJECT_ARRAY;  }  return array;}  }
class C{  private void logOutAllUsers(){  for (  CredentialedUser user : users.getAllUsers().values()) {    user.getGoogleLoginState().logOut(false);  }  users.removeAllUsers();}  }
class C{  public static Double toDouble(Number self){  if ((self instanceof Double) || (self instanceof Long) || (self instanceof Integer)|| (self instanceof Short)|| (self instanceof Byte)) {    return self.doubleValue();  }  return Double.valueOf(self.toString());}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment documentFragmentNode;  int nodeType;  doc=(Document)load("staff",true);  documentFragmentNode=doc.createDocumentFragment();  nodeType=(int)documentFragmentNode.getNodeType();  assertEquals("nodeDocumentFragmentNodeTypeAssert1",11,nodeType);}  }
class C{  public boolean navigateToStep(@NotNull Function<Step,Boolean> filter){  for (int i=0, myStepsSize=mySteps.size(); i < myStepsSize; i++) {    ModuleWizardStep step=mySteps.get(i);    if (filter.fun(step) != Boolean.TRUE) {      continue;    }    myCurrentStep=i;    updateStep();    return true;  }  return false;}  }
class C{  public <T>List<T> search(Properties properties,String baseDN,String filter,ILdapResultMapper<T> mapper,boolean checkAttribute) throws NamingException {  int searchLimit=getSearchLimit();  return searchByLimit(properties,baseDN,filter,mapper,checkAttribute,searchLimit);}  }
class C{  public static String encode(String s){  StringBuffer sbuf=new StringBuffer();  int len=s.length();  for (int i=0; i < len; i++) {    int ch=s.charAt(i);    append(sbuf,ch);  }  return sbuf.toString();}  }
class C{  public Builder addDefaultLocation(double lat,double lon){  this.defaultLocations.add(XGeoHashUtils.stringEncode(lon,lat));  return this;}  }
class C{  public ObjectFactory(){}  }
class C{  private static double distance(final Location c0,final Location c1,final Location c2){  if (c1.equals(c2)) {    return c2.distanceTo(c0);  }  final double s0lat=c0.getLatitude() * UnitConversions.DEG_TO_RAD;  final double s0lng=c0.getLongitude() * UnitConversions.DEG_TO_RAD;  final double s1lat=c1.getLatitude() * UnitConversions.DEG_TO_RAD;  final double s1lng=c1.getLongitude() * UnitConversions.DEG_TO_RAD;  final double s2lat=c2.getLatitude() * UnitConversions.DEG_TO_RAD;  final double s2lng=c2.getLongitude() * UnitConversions.DEG_TO_RAD;  double s2s1lat=s2lat - s1lat;  double s2s1lng=s2lng - s1lng;  final double u=((s0lat - s1lat) * s2s1lat + (s0lng - s1lng) * s2s1lng) / (s2s1lat * s2s1lat + s2s1lng * s2s1lng);  if (u <= 0) {    return c0.distanceTo(c1);  }  if (u >= 1) {    return c0.distanceTo(c2);  }  Location sa=new Location("");  sa.setLatitude(c0.getLatitude() - c1.getLatitude());  sa.setLongitude(c0.getLongitude() - c1.getLongitude());  Location sb=new Location("");  sb.setLatitude(u * (c2.getLatitude() - c1.getLatitude()));  sb.setLongitude(u * (c2.getLongitude() - c1.getLongitude()));  return sa.distanceTo(sb);}  }
class C{  public boolean show(String initialQuery,boolean selectInitialQuery,ComponentName componentName,Bundle appSearchData){  boolean success=doShow(initialQuery,selectInitialQuery,componentName,appSearchData);  if (success) {    mSearchAutoComplete.showDropDownAfterLayout();  }  return success;}  }
class C{  protected void processProperties(DatabaseMapping mapping){  if (loadedFromXML()) {    for (    PropertyMetadata property : getProperties()) {      processProperty(mapping,property);    }  } else {    MetadataAnnotation properties=getAnnotation(Properties.class);    if (properties != null) {      for (      Object property : properties.getAttributeArray("value")) {        processProperty(mapping,new PropertyMetadata((MetadataAnnotation)property,this));      }    }    MetadataAnnotation property=getAnnotation(Property.class);    if (property != null) {      processProperty(mapping,new PropertyMetadata(property,this));    }  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  MobileDoc doc=MobileDoc.create("WStatus Post Request");  MobileUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public int read() throws java.io.IOException {  return 0;}  }
class C{  @After public void unmockEligibleResponseGetter(){  APIResource.setEligibleResponseGetter(new LiveEligibleResponseGetter());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public MyHashSet(int initialCapacity,float loadFactorThreshold){  if (initialCapacity > MAXIMUM_CAPACITY)   this.capacity=MAXIMUM_CAPACITY; else   this.capacity=trimToPowerOf2(initialCapacity);  this.loadFactorThreshold=loadFactorThreshold;  table=new LinkedList[capacity];}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public StrBuilder insert(int index,String str){  validateIndex(index);  if (str == null) {    str=nullText;  }  int strLen=(str == null ? 0 : str.length());  if (strLen > 0) {    int newSize=size + strLen;    ensureCapacity(newSize);    System.arraycopy(buffer,index,buffer,index + strLen,size - index);    size=newSize;    str.getChars(0,strLen,buffer,index);  }  return this;}  }
class C{  protected static void saveParentGroups(final CConnection connection,final List<INaviViewNode> nodes,final int firstNode,final BiMap<Integer,INaviGroupNode> groupNodeMap) throws SQLException {  int counter=0;  for (  final INaviViewNode node : nodes) {    if (node.getParentGroup() != null) {      final int parentId=firstNode + groupNodeMap.inverse().get(node.getParentGroup());      final int childId=firstNode + counter;      connection.executeUpdate(String.format("UPDATE " + CTableNames.NODES_TABLE + " set parent_id = %d WHERE id = %d",parentId,childId),true);    }    counter++;  }}  }
class C{  public void startHttpServer() throws IOException {  httpServer=com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0),0);  HttpContext ctx=httpServer.createContext("/test/",new MyHandler());  executorService=Executors.newCachedThreadPool();  httpServer.setExecutor(executorService);  httpServer.start();}  }
class C{  void run() throws Exception {  JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();  defaultFileManager=compiler.getStandardFileManager(null,null,null);  for (  Method m : getMethodsExcept(JavaFileManager.class,"close","getJavaFileForInput")) {    test(m);  }  for (  Method m : getMethodsExcept(FileObject.class,"delete")) {    test(m);  }  for (  Method m : getMethods(JavaFileObject.class)) {    test(m);  }  for (  Method m : getMethodsExcept(Processor.class,"getCompletions")) {    test(m);  }  for (  Method m : DiagnosticListener.class.getDeclaredMethods()) {    test(m);  }  for (  Method m : TaskListener.class.getDeclaredMethods()) {    test(m);  }  if (errors > 0)   throw new Exception(errors + " errors occurred");}  }
class C{  static String escape(String s){  return JAVASCRIPT_ESCAPER.escape(s);}  }
class C{  public void clusterDwellEventsIntoRoutes(){  Id likeliestRoute=this.routesSortedByNumberOfTransactions.last();  LinkedList<Id> stopIds=new LinkedList<>();  stopIds.addAll(routeIdToStopIdSequence.get(likeliestRoute));  boolean circleRoute=stopIds.getFirst().equals(stopIds.getLast());  ArrayList<CepasVehicleDwellEvent> dwellEventsList=new ArrayList<>();  dwellEventsList.addAll(orderedDwellEvents.values());  ArrayList<Integer> dwellEventsAsStopIndexList=new ArrayList<>();  for (  CepasVehicleDwellEvent de : dwellEventsList) {    dwellEventsAsStopIndexList.add(stopIds.indexOf(de.stopId));  }  LinkedList<CepasVehicleDwellEventCluster> clusters=new LinkedList<>();  List<CepasVehicleDwellEvent> currentCluster=new ArrayList<>();  currentCluster.add(dwellEventsList.get(0));  boolean success=true;  for (int i=1; i < dwellEventsAsStopIndexList.size(); i++) {    if (dwellEventsAsStopIndexList.get(i) < dwellEventsAsStopIndexList.get(i - 1)) {      if (i < dwellEventsAsStopIndexList.size() - 1) {        if (circleRoute && dwellEventsAsStopIndexList.get(i) == 0) {          if (getInterDwellEventSpeed(dwellEventsList.get(i - 1),dwellEventsList.get(i)) > getInterDwellEventSpeed(dwellEventsList.get(i),dwellEventsList.get(i + 1))) {            dwellEventsAsStopIndexList.set(i,stopIds.size() - 1);            currentCluster.add(dwellEventsList.get(i));          } else {            clusters.add(new CepasVehicleDwellEventCluster(currentCluster));            currentCluster=new ArrayList<>();            currentCluster.add(dwellEventsList.get(i));          }        } else         if (dwellEventsAsStopIndexList.get(i + 1) > dwellEventsAsStopIndexList.get(i - 1)) {          orderedDwellEvents.remove(dwellEventsList.get(i).arrivalTime);          errorTracker.dwellEventsDropped(this.vehicleId,dwellEventsList.get(i));          success=false;          break;        } else {          clusters.add(new CepasVehicleDwellEventCluster(currentCluster));          currentCluster=new ArrayList<>();          currentCluster.add(dwellEventsList.get(i));        }      } else {        if (circleRoute && dwellEventsAsStopIndexList.get(i) == 0) {          currentCluster.add(dwellEventsList.get(i));        }      }    } else     if (Objects.equals(dwellEventsAsStopIndexList.get(i),dwellEventsAsStopIndexList.get(i - 1))) {      dwellEventsList.get(i - 1).departureTime=dwellEventsList.get(i).departureTime;      dwellEventsList.get(i - 1).cepasTransactions.addAll(dwellEventsList.get(i).cepasTransactions);      orderedDwellEvents.remove(dwellEventsList.get(i).arrivalTime);      errorTracker.dwellEventsDropped(vehicleId,dwellEventsList.get(i));      dwellEventsList.get(i - 1).findTrueDwellTime();      success=false;      break;    } else {      currentCluster.add(dwellEventsList.get(i));    }  }  if (success) {    if (currentCluster.size() > 1) {      clusters.add(new CepasVehicleDwellEventCluster(currentCluster));    }    this.dwellEventClusters=clusters;  } else {    clusterDwellEventsIntoRoutes();  }}  }
class C{  public ZkClient(String zkHost) throws IOException, InterruptedException, KeeperException, CollectionNotFoundException {  this.zkHost=zkHost;  zkClusterData=refreshZookeeperData();}  }
class C{  public void deleteVideoSharings() throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteVideoSharings();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public static void generateTestMatrixToFile(String file,int rows,int cols,double min,double max,double sparsity,long seed){  try {    FileSystem fs=FileSystem.get(conf);    Path inFile=new Path(file);    DataOutputStream out=fs.create(inFile);    PrintWriter pw=new PrintWriter(out);    Random random;    if (seed == -1)     random=TestUtils.random; else     random=new Random(seed);    for (int i=1; i <= rows; i++) {      for (int j=1; j <= cols; j++) {        if (random.nextDouble() > sparsity)         continue;        double value=(random.nextDouble() * (max - min) + min);        if (value != 0)         pw.println(i + " " + j+ " "+ value);      }    }    pw.close();    out.close();  } catch (  IOException e) {    fail("unable to write test matrix: " + e.getMessage());  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.USE_STATEMENT___USE_1:    return getUse_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected double trimToContentHeight(double fixedHeight){  double result=this.margin.trimHeight(fixedHeight);  result=this.frame.getInsets().trimHeight(result);  result=this.padding.trimHeight(result);  return Math.max(result,0.0);}  }
class C{  public static OMPoly createAreaOMPoly(List<CoordFloatString> ipts,int totalSize,LatLonPoint ll1,LatLonPoint ll2,double dpplat,double dpplon,boolean doAntarcticaWorkaround){  double[] llpts=new double[totalSize * 2];  if (doAntarcticaWorkaround) {    doAntarcticaWorkaround=(ll2.getLatitude() < -62f);  }  int npts=0;  for (  CoordFloatString cfs : ipts) {    int cfscnt=cfs.tcount;    int cfssz=cfs.tsize;    double cfsvals[]=cfs.vals;    if (cfscnt > 0) {      for (int i=0; i < cfscnt; i++) {        llpts[npts++]=ProjMath.degToRad(cfsvals[i * cfssz + 1]);        llpts[npts++]=ProjMath.degToRad(cfsvals[i * cfssz]);      }    } else {      cfscnt*=-1;      for (int i=cfscnt - 1; i >= 0; i--) {        llpts[npts++]=ProjMath.degToRad(cfsvals[i * cfssz + 1]);        llpts[npts++]=ProjMath.degToRad(cfsvals[i * cfssz]);      }    }  }  if (doAntarcticaWorkaround) {    double[] newllpts=new double[llpts.length];    for (int i=0; i < newllpts.length; i+=2) {      newllpts[i]=llpts[i];      newllpts[i + 1]=llpts[i + 1];      if (newllpts[i] < antarcticaThreshold) {        Debug.message("vpf","AreaTable.generateOMPoly(): Antarctica!");        newllpts[i++]=ProjMath.degToRad(-89.99f);        newllpts[i++]=ProjMath.degToRad(179.99f);        newllpts[i++]=ProjMath.degToRad(-89.99f);        newllpts[i++]=ProjMath.degToRad(90f);        newllpts[i++]=ProjMath.degToRad(-89.99f);        newllpts[i++]=ProjMath.degToRad(0f);        newllpts[i++]=ProjMath.degToRad(-89.99f);        newllpts[i++]=ProjMath.degToRad(-90f);        newllpts[i++]=ProjMath.degToRad(-89.99f);        newllpts[i++]=ProjMath.degToRad(-179.99f);        while (llpts[i + 1] > 0) {          newllpts[i++]=ProjMath.degToRad(-89.99f);          newllpts[i++]=ProjMath.degToRad(-179.99f);        }        i-=2;      }    }    llpts=newllpts;  }  OMPoly py=new OMPoly(llpts,OMGraphic.RADIANS,OMGraphic.LINETYPE_STRAIGHT);  return py;}  }
class C{  private CDatabaseConnection(){}  }
class C{  protected void paintComponent(Graphics g){  if (!originalImagePainted) {    paintOriginalImage();  }  long startTime, endTime, totalTime;  int xLoc, yLoc;  xLoc=5;  yLoc=20;  startTime=System.nanoTime();  drawImage(g,yLoc,false);  endTime=System.nanoTime();  totalTime=(endTime - startTime) / 1000000;  g.drawString("NEAREST ",xLoc,yLoc + (FULL_SIZE / 2));  g.drawString(Long.toString(totalTime) + " ms",xLoc,yLoc + (FULL_SIZE / 2) + 15);  System.out.println("NEAREST: " + (endTime - startTime) / 1000000);  yLoc+=FULL_SIZE + PADDING;  ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);  startTime=System.nanoTime();  drawImage(g,yLoc,false);  endTime=System.nanoTime();  totalTime=(endTime - startTime) / 1000000;  g.drawString("BILINEAR ",xLoc,yLoc + (FULL_SIZE / 2));  g.drawString(Long.toString(totalTime) + " ms",xLoc,yLoc + (FULL_SIZE / 2) + 15);  System.out.println("BILINEAR: " + (endTime - startTime) / 1000000);  yLoc+=FULL_SIZE + PADDING;  ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BICUBIC);  startTime=System.nanoTime();  drawImage(g,yLoc,false);  endTime=System.nanoTime();  totalTime=(endTime - startTime) / 1000000;  g.drawString("BICUBIC ",xLoc,yLoc + (FULL_SIZE / 2));  g.drawString(Long.toString(totalTime) + " ms",xLoc,yLoc + (FULL_SIZE / 2) + 15);  System.out.println("BICUBIC: " + (endTime - startTime) / 1000000);  yLoc+=FULL_SIZE + PADDING;  ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);  startTime=System.nanoTime();  drawImage(g,yLoc,true);  endTime=System.nanoTime();  totalTime=(endTime - startTime) / 1000000;  g.drawString("getScaled ",xLoc,yLoc + (FULL_SIZE / 2));  g.drawString(Long.toString(totalTime) + " ms",xLoc,yLoc + (FULL_SIZE / 2) + 15);  System.out.println("getScaled: " + (endTime - startTime) / 1000000);  yLoc+=FULL_SIZE + PADDING;  startTime=System.nanoTime();  drawBetterImage(g,yLoc);  endTime=System.nanoTime();  totalTime=(endTime - startTime) / 1000000;  g.drawString("Progressive ",xLoc,yLoc + (FULL_SIZE / 2));  g.drawString(Long.toString(totalTime) + " ms",xLoc,yLoc + (FULL_SIZE / 2) + 15);  System.out.println("faster: " + (endTime - startTime) / 1000000);  xLoc=100;  int delta=(int)(SCALE_FACTOR * FULL_SIZE);  for (int scaledSize=FULL_SIZE; scaledSize > 0; scaledSize-=delta) {    g.drawString(scaledSize + " x " + scaledSize,xLoc + Math.max(0,scaledSize / 2 - 20),15);    xLoc+=scaledSize + 20;  }}  }
class C{  public static Timestamp parseTimestamp(String value){  return Helper.timestampFromString(value);}  }
class C{  public void configure(final BulletParser parser){  parser.parseText(true);  parser.parseTags(true);}  }
class C{  private void saveTaskAssignments(Set<ContainerModel> containers,TaskAssignmentManager taskAssignmentManager){  for (  ContainerModel container : containers) {    for (    TaskName taskName : container.getTasks().keySet()) {      taskAssignmentManager.writeTaskContainerMapping(taskName.getTaskName(),container.getContainerId());    }  }}  }
class C{  public Sound(@Nonnull File file) throws MalformedURLException {  this(file.toURI().toURL());}  }
class C{  public final AC shrink(float w,int... indexes){  Float sw=new Float(w);  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setShrink(sw);  }  return this;}  }
class C{  @Override public void write(int oneByte) throws IOException {  mSingleByteArray[0]=(byte)(0xff & oneByte);  write(mSingleByteArray);}  }
class C{  public void addName(String name){  m_names.add(name);}  }
class C{  public Builder cacheConcurrency(int concurrency){  return set("cacheConcurrency",concurrency);}  }
class C{  @ApiMethod(httpMethod="PUT") public final Offer updateOffer(final Offer offer,final User user) throws ServiceException {  EndpointUtil.throwIfNotAdmin(user);  ofy().save().entity(offer).now();  return offer;}  }
class C{  protected void prepareTable(List<MBrowseField> fields,String from,String staticWhere,String orderBy){  browserFields=fields;  StringBuffer sql=new StringBuffer("SELECT DISTINCT ");  sql.append(detail.prepareTable(fields,p_multiSelection));  detail.setMultiSelection(p_multiSelection);  detail.setShowTotals(m_Browse.isShowTotal());  sql.append(" FROM ").append(from);  sql.append(" WHERE ");  m_sqlMain=sql.toString();  m_sqlCount="SELECT COUNT(*) FROM " + from + " WHERE ";  m_sqlOrderBy=getSQLOrderBy();  if (m_keyColumnIndex == -1)   log.log(Level.WARNING,"No KeyColumn - " + sql);}  }
class C{  public BinaryBitmap crop(int left,int top,int width,int height){  LuminanceSource newSource=binarizer.getLuminanceSource().crop(left,top,width,height);  return new BinaryBitmap(binarizer.createBinarizer(newSource));}  }
class C{  @Override protected FlatRStarTreeNode createNewLeafNode(){  return new FlatRStarTreeNode(leafCapacity,true);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="*";  String localName="*";  Document doc;  NodeList newList;  doc=(Document)load("staffNS",false);  newList=doc.getElementsByTagNameNS(namespaceURI,localName);  assertSize("throw_Size",37,newList);}  }
class C{  public void testTestBitPositive2(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=45;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertTrue(aNumber.testBit(number));}  }
class C{  public static void createTable(Database db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"SIMPLE_ENTITY_NOT_NULL\" ("+ "\"_id\" INTEGER PRIMARY KEY NOT NULL ,"+ "\"SIMPLE_BOOLEAN\" INTEGER NOT NULL ,"+ "\"SIMPLE_BYTE\" INTEGER NOT NULL ,"+ "\"SIMPLE_SHORT\" INTEGER NOT NULL ,"+ "\"SIMPLE_INT\" INTEGER NOT NULL ,"+ "\"SIMPLE_LONG\" INTEGER NOT NULL ,"+ "\"SIMPLE_FLOAT\" REAL NOT NULL ,"+ "\"SIMPLE_DOUBLE\" REAL NOT NULL ,"+ "\"SIMPLE_STRING\" TEXT NOT NULL ,"+ "\"SIMPLE_BYTE_ARRAY\" BLOB NOT NULL );");}  }
class C{  public void back() throws JSONException {  if (usePrevious || index <= 0) {    throw new JSONException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  public int size(){  return size;}  }
class C{  public SendCommandToNode(String messagePath,byte[] objArray,Class classToSend,Context ctx){  context=ctx;  clazzToSend=classToSend;  path=messagePath;  if (objArray != null) {    objectArray=objArray;  } else {    objectArray="".getBytes();  }  if ((objectArray.length / 1024) > 100) {    throw new RuntimeException("Object is too big to push it via Google Play Services");  }}  }
class C{  public static int createProgram(String vertexShaderCode,String fragmentShaderCode){  int vertexShader=Util.loadShader(GLES20.GL_VERTEX_SHADER,vertexShaderCode);  int fragmentShader=Util.loadShader(GLES20.GL_FRAGMENT_SHADER,fragmentShaderCode);  int programHandle=GLES20.glCreateProgram();  GLES20.glAttachShader(programHandle,vertexShader);  GLES20.glAttachShader(programHandle,fragmentShader);  GLES20.glLinkProgram(programHandle);  int[] linkStatus=new int[1];  GLES20.glGetProgramiv(programHandle,GLES20.GL_LINK_STATUS,linkStatus,0);  if (linkStatus[0] != GLES20.GL_TRUE) {    String msg=GLES20.glGetProgramInfoLog(programHandle);    GLES20.glDeleteProgram(programHandle);    Log.e(TAG,"glLinkProgram: " + msg);    throw new RuntimeException("glLinkProgram failed");  }  return programHandle;}  }
class C{  public int hashCode(){  return col + row;}  }
class C{  public static void disableLogging(){  CALIFORNIUM_LOGGER.setLevel(Level.OFF);  CONNECTOR_LOGGER.setLevel(Level.OFF);}  }
class C{  public static void main(String[] args){  Adempiere.startup(true);  new MigrateData();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.PROPERTY_SETTER_DECLARATION__ANNOTATION_LIST:    setAnnotationList((PropertyAssignmentAnnotationList)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public PixmapBorder(Sprite template,boolean raised){  if (raised) {    bottomRightImage=makeModifiedImage(template,Color.BLACK);    topLeftImage=makeModifiedImage(template,Color.WHITE);  } else {    bottomRightImage=makeModifiedImage(template,Color.WHITE);    topLeftImage=makeModifiedImage(template,Color.BLACK);  }  imageWidth=template.getWidth();  imageHeight=template.getHeight();}  }
class C{  public Matrix3f swap(Matrix3f other){  MemUtil.INSTANCE.swap(this,other);  return this;}  }
class C{  public void removeElementFromRelations(final OsmElement element){  try {    if (element.hasParentRelations()) {      ArrayList<Relation> relations=new ArrayList<Relation>(element.getParentRelations());      for (      Relation r : relations) {        Log.i("StorageDelegator","removing " + element.getName() + " #"+ element.getOsmId()+ " from relation #"+ r.getOsmId());        dirty=true;        undo.save(r);        r.removeMember(r.getMember(element));        r.updateState(OsmElement.STATE_MODIFIED);        apiStorage.insertElementSafe(r);        undo.save(element);        element.removeParentRelation(r);        Log.i("StorageDelegator","... done");      }      recordImagery();    }  } catch (  StorageException e) {    e.printStackTrace();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.TAG_VALUE__KEY:    return getKey();}return super.eGet(featureID,resolve,coreType);}  }
class C{  synchronized void pinImpl(){  weakImpl.pin();}  }
class C{  public void writeExpression(Expression oldExp){  if (oldExp == null) {    throw new NullPointerException();  }  try {    Object oldValue=expressionValue(oldExp);    if (oldValue == null || get(oldValue) != null) {      return;    }    Expression newExp=(Expression)createNewStatement(oldExp);    try {      oldNewMap.put(oldValue,newExp.getValue());    } catch (    IndexOutOfBoundsException e) {    }    writeObject(oldValue);  } catch (  Exception e) {    listener.exceptionThrown(new Exception("failed to write expression: " + oldExp,e));  }}  }
class C{  public static TextView findTextView(String text){  ArrayList<View> allViews=SOLO.getViews();  if (allViews != null) {    for (    View view : allViews) {      if (view instanceof TextView) {        TextView textView=(TextView)view;        String textString=(String)textView.getText();        if (textView.isShown() && textString.endsWith(text)) {          return textView;        }      }    }  }  return null;}  }
class C{  public IconMenuView(Context context,AttributeSet attrs){  super(context,attrs);  TypedArray a=context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.IconMenuView,0,0);  mRowHeight=a.getDimensionPixelSize(com.android.internal.R.styleable.IconMenuView_rowHeight,64);  mMaxRows=a.getInt(com.android.internal.R.styleable.IconMenuView_maxRows,2);  mMaxItems=a.getInt(com.android.internal.R.styleable.IconMenuView_maxItems,6);  mMaxItemsPerRow=a.getInt(com.android.internal.R.styleable.IconMenuView_maxItemsPerRow,3);  mMoreIcon=a.getDrawable(com.android.internal.R.styleable.IconMenuView_moreIcon);  a.recycle();  a=context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.MenuView,0,0);  mItemBackground=a.getDrawable(com.android.internal.R.styleable.MenuView_itemBackground);  mHorizontalDivider=a.getDrawable(com.android.internal.R.styleable.MenuView_horizontalDivider);  mHorizontalDividerRects=new ArrayList<Rect>();  mVerticalDivider=a.getDrawable(com.android.internal.R.styleable.MenuView_verticalDivider);  mVerticalDividerRects=new ArrayList<Rect>();  mAnimations=a.getResourceId(com.android.internal.R.styleable.MenuView_windowAnimationStyle,0);  a.recycle();  if (mHorizontalDivider != null) {    mHorizontalDividerHeight=mHorizontalDivider.getIntrinsicHeight();    if (mHorizontalDividerHeight == -1)     mHorizontalDividerHeight=1;  }  if (mVerticalDivider != null) {    mVerticalDividerWidth=mVerticalDivider.getIntrinsicWidth();    if (mVerticalDividerWidth == -1)     mVerticalDividerWidth=1;  }  mLayout=new int[mMaxRows];  setWillNotDraw(false);  setFocusableInTouchMode(true);  setDescendantFocusability(FOCUS_AFTER_DESCENDANTS);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static Match maskL4AndUp(Match m){  Match.Builder mb=m.createBuilder();  Iterator<MatchField<?>> itr=m.getMatchFields().iterator();  while (itr.hasNext()) {    MatchField mf=itr.next();    if (mf.equals(MatchField.IN_PORT) || mf.equals(MatchField.ETH_TYPE) || mf.equals(MatchField.ETH_SRC)|| mf.equals(MatchField.ETH_DST)|| mf.equals(MatchField.IPV4_SRC)|| mf.equals(MatchField.IPV4_DST)|| mf.equals(MatchField.IP_PROTO)) {      if (m.isExact(mf)) {        mb.setExact(mf,m.get(mf));      } else       if (m.isPartiallyMasked(mf)) {        mb.setMasked(mf,m.getMasked(mf));      } else {      }    }  }  return mb.build();}  }
class C{  @Override protected void deleteLast(final byte[] key){  final Lock lock=writeLock();  lock.lock();  try {    super.deleteLast(key);  }  finally {    unlock(lock);  }}  }
class C{  public SpecificX10Light(String systemName,SerialTrafficController tc,String userName){  super(systemName,tc,userName);  this.tc=tc;  maxDimStep=22;}  }
class C{  private static int readUnsignedIntToInt(ByteBuffer data){  int result=0xFF & data.get();  for (int i=1; i < 4; i++) {    result<<=8;    result|=0xFF & data.get();  }  if (result < 0) {    throw new IllegalArgumentException("Top bit not zero: " + result);  }  return result;}  }
class C{  public boolean isFDSatisfied(){  return FDUtility.checkFDSatisfaction(i,FDs);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CustomCategoryURLGenerator)) {    return false;  }  CustomCategoryURLGenerator generator=(CustomCategoryURLGenerator)obj;  int listCount=getListCount();  if (listCount != generator.getListCount()) {    return false;  }  for (int series=0; series < listCount; series++) {    int urlCount=getURLCount(series);    if (urlCount != generator.getURLCount(series)) {      return false;    }    for (int item=0; item < urlCount; item++) {      String u1=getURL(series,item);      String u2=generator.getURL(series,item);      if (u1 != null) {        if (!u1.equals(u2)) {          return false;        }      } else {        if (u2 != null) {          return false;        }      }    }  }  return true;}  }
class C{  public ReilRegister(final String register,final OperandSize size,final BigInteger value){  this.register=Preconditions.checkNotNull(register,"Error: Argument register can't be null");  this.size=Preconditions.checkNotNull(size,"Error: Argument size can't be null");  this.value=value;}  }
class C{  public TriangleMesh computeFaceNormals(){  for (  Face f : faces) {    f.computeNormal();  }  return this;}  }
class C{  public EmailAttachment(byte[] data,String name,String contentId){  this(data,name,contentId,Part.INLINE,null);}  }
class C{  public boolean classIsMissing(){  if (classIndex() < 0) {    throw new UnassignedClassException("Class is not set!");  }  return isMissing(classIndex());}  }
class C{  public int numColors(){  return impl.numColors();}  }
class C{  public OMPoly(){  super(RENDERTYPE_UNKNOWN,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);}  }
class C{  private int measureWidth(int measureSpec){  float result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public static synchronized int generateLocalSipPort(RcsSettings rcsSettings){  int defaultLocalSipPortRangeMin=rcsSettings.getSipListeningPort();  int candidatePort=getDefaultNumber(defaultLocalSipPortRangeMin,DEFAULT_LOCAL_SIP_PORT_RANGE_MAX);  while (!isLocalUdpPortFree(candidatePort) && !isLocalTcpPortFree(candidatePort)) {    candidatePort=getDefaultNumber(defaultLocalSipPortRangeMin,DEFAULT_LOCAL_SIP_PORT_RANGE_MAX);  }  return candidatePort;}  }
class C{  public static void e(String message,Throwable cause){  Log.e(LOG_TAG,"[" + message + "]",cause);}  }
class C{  Address(Address a){  side=a.side;  lat=a.lat;  lon=a.lon;  tags=new LinkedHashMap<String,ArrayList<String>>(a.tags);}  }
class C{  public double calculateDUFitness(){  if (isSpecialDefinition(goalDefinition))   return calculateUseFitnessForCompleteTrace();  double defFitness=calculateDefFitnessForCompleteTrace();  if (defFitness != 0)   return 1 + defFitness;  return calculateFitnessForObjects();}  }
class C{  public Integer loadRepAllValues(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  if (_logger.isDebugEnabled())   _logger.debug("loadRepAllValues");  _id=statement.getShortInteger(index++);  _name=statement.getShortText(index++);  _info=FssMdoUtil.decodeRepInfo(statement.getLongText(index++));  _path=_info.m_path;  _server=_info.m_srv;  _port=_info.m_port;  _user=_info.m_usr;  _password=_info.m_pwd;  _os=_info.m_os;  _type=_info.m_type;  _state=statement.getLongInteger(index++);  _remarks=statement.getShortText(index++);  _creatorId=statement.getLongInteger(index++);  _creationDate=statement.getDateTime(index++);  _updaterId=statement.getLongInteger(index++);  _updateDate=statement.getDateTime(index++);  return new Integer(index);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  PolarPlot clone=(PolarPlot)super.clone();  clone.axes=(ObjectList)ObjectUtilities.clone(this.axes);  for (int i=0; i < this.axes.size(); i++) {    ValueAxis axis=(ValueAxis)this.axes.get(i);    if (axis != null) {      ValueAxis clonedAxis=(ValueAxis)axis.clone();      clone.axes.set(i,clonedAxis);      clonedAxis.setPlot(clone);      clonedAxis.addChangeListener(clone);    }  }  clone.datasets=(ObjectList)ObjectUtilities.clone(this.datasets);  for (int i=0; i < clone.datasets.size(); ++i) {    XYDataset d=getDataset(i);    if (d != null) {      d.addChangeListener(clone);    }  }  clone.renderers=(ObjectList)ObjectUtilities.clone(this.renderers);  for (int i=0; i < this.renderers.size(); i++) {    PolarItemRenderer renderer2=(PolarItemRenderer)this.renderers.get(i);    if (renderer2 instanceof PublicCloneable) {      PublicCloneable pc=(PublicCloneable)renderer2;      PolarItemRenderer rc=(PolarItemRenderer)pc.clone();      clone.renderers.set(i,rc);      rc.setPlot(clone);      rc.addChangeListener(clone);    }  }  clone.cornerTextItems=new ArrayList(this.cornerTextItems);  return clone;}  }
class C{  public void clear(int capacity){  _data=new byte[capacity];  _pos=0;}  }
class C{  public void startWatching(){  watching.set(true);  new Thread(this,"Plugin Watcher").start();}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) static <E>AutoSortedCollection<E> createAutoSortedCollection(Supplier<List<SortedListElement<E>>> listSup,Collection<? extends E> values,Comparator<E> comparator){  List list=listSup.get();  if (!list.isEmpty()) {    throw new IllegalArgumentException("List must be empty.");  }  Validate.notNull(comparator,"Comparator can't be null.");  AutoSortedCollection<E> sortedCollection=new AutoListSortedCollection<>(list,comparator);  sortedCollection.addAll(values);  return sortedCollection;}  }
class C{  public synchronized boolean isCheckedinToday(final String userId){  final Calendar calendar=Calendar.getInstance();  final int hour=calendar.get(Calendar.HOUR_OF_DAY);  if (hour < Symphonys.getInt("activityDailyCheckinTimeMin") || hour > Symphonys.getInt("activityDailyCheckinTimeMax")) {    return true;  }  final Date now=new Date();  JSONObject user=userCache.getUser(userId);  try {    if (null == user) {      user=userRepository.get(userId);    }  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Checks checkin failed",e);    return true;  }  final List<JSONObject> records=pointtransferQueryService.getLatestPointtransfers(userId,Pointtransfer.TRANSFER_TYPE_C_ACTIVITY_CHECKIN,1);  if (records.isEmpty()) {    return false;  }  final JSONObject maybeToday=records.get(0);  final long time=maybeToday.optLong(Pointtransfer.TIME);  return DateUtils.isSameDay(now,new Date(time));}  }
class C{  public static <U,I>SimpleFastPreferenceData<U,I> load(Stream<Tuple3<U,I,Double>> tuples,FastUserIndex<U> uIndex,FastItemIndex<I> iIndex){  return load(tuples.map(null),null,null,uIndex,iIndex,(Function<IdxPref,IdPref<I>>)null,(Function<IdxPref,IdPref<U>>)null);}  }
class C{  protected void findKNearestNeighbours(int K,int sampleIndex,int dynCorrExclTime,KdTreeNode node,int level,PriorityQueue<NeighbourNodeData> currentKBest){  int currentDim=level % totalDimensions;  double[][] data=dimensionToArray[currentDim];  int actualDim=dimensionToArrayIndex[currentDim];  double distOnThisDim=data[sampleIndex][actualDim] - data[node.indexOfThisPoint][actualDim];  double absDistOnThisDim;  if (normTypeToUse == EuclideanUtils.NORM_MAX_NORM) {    absDistOnThisDim=(distOnThisDim > 0) ? distOnThisDim : -distOnThisDim;  } else {    absDistOnThisDim=distOnThisDim * distOnThisDim;  }  NeighbourNodeData furthestCached=currentKBest.peek();  if (((node.indexOfThisPoint - sampleIndex > dynCorrExclTime) || (node.indexOfThisPoint - sampleIndex < -dynCorrExclTime)) && ((currentKBest.size() < K) || (absDistOnThisDim < furthestCached.distance))) {    double maxNorm=0;    double[] norms=new double[originalDataSets.length];    for (int v=0; v < originalDataSets.length; v++) {      if (currentKBest.size() < K) {        norms[v]=norm(originalDataSets[v][sampleIndex],originalDataSets[v][node.indexOfThisPoint],normTypeToUse);      } else {        norms[v]=normWithAbort(originalDataSets[v][sampleIndex],originalDataSets[v][node.indexOfThisPoint],furthestCached.distance,normTypeToUse);      }      if (norms[v] > maxNorm) {        maxNorm=norms[v];        if (Double.isInfinite(maxNorm)) {          break;        }      }    }    if ((currentKBest.size() < K) || (maxNorm < furthestCached.distance)) {      if (currentKBest.size() == K) {        currentKBest.poll();      }      currentKBest.add(new NeighbourNodeData(node.indexOfThisPoint,norms,maxNorm));    }  }  KdTreeNode closestSubTree=null;  KdTreeNode furthestSubTree=null;  if (distOnThisDim < 0) {    closestSubTree=node.leftTree;    furthestSubTree=node.rightTree;  } else {    closestSubTree=node.rightTree;    furthestSubTree=node.leftTree;  }  if (closestSubTree != null) {    findKNearestNeighbours(K,sampleIndex,dynCorrExclTime,closestSubTree,level + 1,currentKBest);  }  furthestCached=currentKBest.peek();  if ((currentKBest.size() < K) || (absDistOnThisDim < furthestCached.distance)) {    if (furthestSubTree != null) {      findKNearestNeighbours(K,sampleIndex,dynCorrExclTime,furthestSubTree,level + 1,currentKBest);    }  }}  }
class C{  public JToggleGroup createRadioGroup(){  return createToggleGroup(JToggleGroup.RADIO);}  }
class C{  private TypeConstraint combine(TypeBound boundI,TypeBound boundJ){switch (boundI.variance) {case INV:switch (boundJ.variance) {case INV:      return combineInvInv(boundI,boundJ);case CO:case CONTRA:    return combineInvVar(boundI,boundJ);}break;case CO:switch (boundJ.variance) {case INV:return combineInvVar(boundJ,boundI);case CONTRA:return combineContraCo(boundJ,boundI);case CO:return combineBothCoOrBothContra(boundI,boundJ);}break;case CONTRA:switch (boundJ.variance) {case INV:return combineInvVar(boundJ,boundI);case CO:return combineContraCo(boundI,boundJ);case CONTRA:return combineBothCoOrBothContra(boundI,boundJ);}}throw new IllegalStateException("unreachable");}  }
class C{  public Iterator<Element> iterator(){  return children.iterator();}  }
class C{  static StringBuilder newStringBuilderForCollection(int size){  checkNonnegative(size,"size");  return new StringBuilder((int)Math.min(size * 8L,Ints.MAX_POWER_OF_TWO));}  }
class C{  static public void executeDmlDefaultCon(String sql) throws AdeException {  executeDml(AdeInternal.getDefaultConnection(),sql);}  }
class C{  public static void showException(final Component parent,final Exception exception,final String msg){  CMessageBox.showError(parent,msg + " \n\n" + "Reason"+ ": "+ exception.getLocalizedMessage());}  }
class C{  public boolean isForcePersistence(){  return forcePersistence;}  }
class C{  public static <T>T fromJsonString(String json,Type typeOfT){  try {    return getGson().fromJson(json,typeOfT);  } catch (  JsonSyntaxException var3) {    var3.printStackTrace();    return null;  }}  }
class C{  public List makeListTipoCampo(){  List listaTipoCampo=new ArrayList();  PropertyBean propertyBean=new PropertyBean();  propertyBean.setValue(String.valueOf(TipoCampo.TEXTO_CORTO_VALUE));  propertyBean.setLabel(TipoCampo.TEXTO_CORTO_LABEL);  listaTipoCampo.add(propertyBean);  propertyBean=new PropertyBean();  propertyBean.setValue(String.valueOf(TipoCampo.TEXTO_LARGO_VALUE));  propertyBean.setLabel(TipoCampo.TEXTO_LARGO_LABEL);  listaTipoCampo.add(propertyBean);  propertyBean=new PropertyBean();  propertyBean.setValue(String.valueOf(TipoCampo.FECHA_VALUE));  propertyBean.setLabel(TipoCampo.FECHA_LABEL);  listaTipoCampo.add(propertyBean);  propertyBean=new PropertyBean();  propertyBean.setValue(String.valueOf(TipoCampo.NUMERICO_VALUE));  propertyBean.setLabel(TipoCampo.NUMERICO_LABEL);  listaTipoCampo.add(propertyBean);  propertyBean=new PropertyBean();  propertyBean.setValue(String.valueOf(TipoCampo.REFERENCIA_VALUE));  propertyBean.setLabel(TipoCampo.REFERENCIA_LABEL);  listaTipoCampo.add(propertyBean);  return listaTipoCampo;}  }
class C{  public BufferedImage createBufferedImage(int width,int height,int imageType,ChartRenderingInfo info){  BufferedImage image=new BufferedImage(width,height,imageType);  Graphics2D g2=image.createGraphics();  draw(g2,new Rectangle2D.Double(0,0,width,height),null,info);  g2.dispose();  return image;}  }
class C{  public IEReadingViewParser(Element root){  mRoot=root;}  }
class C{  private CNodeSearcher(){}  }
class C{  private boolean isNamingContainerTag(FacesValidator validator,String ns,String ln){  if (ns.equals(RIConstants.HTML_NAMESPACE)) {    if (ln.equals(validator.getJSF_FORM_LN())) {      return true;    }  }  if (ns.equals(RIConstants.CORE_NAMESPACE)) {    if (ln.equals(validator.getJSF_SUBVIEW_LN())) {      return true;    }  }  return false;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.EXPORTABLE_ELEMENT___IS_EXPORTED:    return isExported();case N4JSPackage.EXPORTABLE_ELEMENT___IS_EXPORTED_AS_DEFAULT:  return isExportedAsDefault();case N4JSPackage.EXPORTABLE_ELEMENT___GET_EXPORTED_NAME:return getExportedName();case N4JSPackage.EXPORTABLE_ELEMENT___IS_TOPLEVEL:return isToplevel();}return super.eInvoke(operationID,arguments);}  }
class C{  public static byte[] toAsciiBytes(byte[] raw){  if (raw == null || raw.length == 0) {    return EMPTY_BYTE_ARRAY;  }  byte[] l_ascii=new byte[raw.length << 3];  for (int ii=0, jj=l_ascii.length - 1; ii < raw.length; ii++, jj-=8) {    for (int bits=0; bits < BITS.length; ++bits) {      if ((raw[ii] & BITS[bits]) == 0) {        l_ascii[jj - bits]='0';      } else {        l_ascii[jj - bits]='1';      }    }  }  return l_ascii;}  }
class C{  public void writeEntity(String entity) throws IOException {  if (state == IN_TAG) {    out.write(">");    state=IN_BODY;  }  out.write(entity);}  }
class C{  static SynthStyle updateStyle(SynthContext context,SynthUI ui){  SynthStyle newStyle=getStyle(context.getComponent(),context.getRegion());  SynthStyle oldStyle=context.getStyle();  if (newStyle != oldStyle) {    if (oldStyle != null) {      oldStyle.uninstallDefaults(context);    }    context.setStyle(newStyle);    newStyle.installDefaults(context,ui);  }  return newStyle;}  }
class C{  public void testPush(){  try {    LinkedBlockingDeque q=new LinkedBlockingDeque(SIZE);    for (int i=0; i < SIZE; ++i) {      Integer I=new Integer(i);      q.push(I);      assertEquals(I,q.peek());    }    assertEquals(0,q.remainingCapacity());    q.push(new Integer(SIZE));    shouldThrow();  } catch (  IllegalStateException success) {  }}  }
class C{  public static void createJar(String... args){  System.out.println("Running: jar " + Arrays.toString(args));  sun.tools.jar.Main jar=new sun.tools.jar.Main(System.out,System.err,"jar");  if (!jar.run(args)) {    throw new RuntimeException("jar failed: args=" + Arrays.toString(args));  }}  }
class C{  @Override public void pause() throws IllegalStateException {  log.i("pause");  trackHandlerGate.close();  Message msg=trackHandler.obtainMessage(MSG_PAUSE_TRACK);  if (log.allowDebug()) {    log.d("Sending pause directtrack handler thread");  }  trackHandler.sendMessage(msg);  trackHandlerGate.block();  if (log.allowDebug()) {    log.d("Pausing Direct Track Done");  }}  }
class C{  @Override public int insert(String elem){  int firstIndex=(int)(elem.charAt(0) - 'a');  int middleIndex=(int)(elem.charAt(-1 + elem.length() / 2) - 'a');  int lastIndex=(int)(elem.charAt(elem.length() - 2) - 'a');  storage[firstIndex * 400 + middleIndex * 20 + lastIndex]=elem;  return 1;}  }
class C{  protected void writeResource(final Writer w,final String resource) throws IOException {  final InputStream is=getClass().getResourceAsStream(resource);  if (is == null)   throw new IOException("Resource not on classpath: " + resource);  try {    final BufferedReader reader=new BufferedReader(new InputStreamReader(is));    try {      String s=null;      boolean first=true;      while ((s=reader.readLine()) != null) {        if (!first) {          w.write("\n");        }        w.write(s);        first=false;      }    }  finally {      reader.close();    }  }  finally {    is.close();  }}  }
class C{  public final boolean isPublic(){  return Modifier.isPublic(getModifiers());}  }
class C{  public static void writeVehicles(Vehicles vehicles,String filePath){  log.info("Writing vehicles to file " + filePath);  new VehicleWriterV1(vehicles).writeFile(filePath);}  }
class C{  public void showFragment(String tag){  Fragment showFg=null;  Fragment hideFg=null;  if (tag.equals(RegisterEmailFragment.TAG)) {    showFg=mEmailFragment;    hideFg=mPhoneFragment;  } else   if (tag.equals(RegisterPhoneFragment.TAG)) {    showFg=mPhoneFragment;    hideFg=mEmailFragment;  }  mFragmentManager.beginTransaction().show(showFg).hide(hideFg).commit();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static Path parsePath(String pathString){  return doPath(pathString);}  }
class C{  public static void main(String[] args) throws FileNotFoundException {  File file=new File("Salary.txt");  if (file.exists()) {    System.out.println("File " + file.getName() + " already exists");    System.exit(0);  }  String rank="";  double salary;  try (PrintWriter output=new PrintWriter(file)){    for (int i=1; i <= 1000; i++) {      output.print("FirstName" + i + " LastName"+ i);      rank=getRank();      salary=getSalary(rank);      output.printf(" " + rank + " %.2f\n",salary);    }  } }  }
class C{  private static final String toXml(BodyFixture fixture){  StringBuilder sb=new StringBuilder();  sb.append("<Fixture Id=\"").append(fixture.getId()).append("\" Name=\"").append(fixture.getUserData()).append("\">").append(XmlGenerator.toXml(fixture.getShape())).append(XmlGenerator.toXml(fixture.getFilter())).append("<Sensor>").append(fixture.isSensor()).append("</Sensor>").append("<Density>").append(fixture.getDensity()).append("</Density>").append("<Friction>").append(fixture.getFriction()).append("</Friction>").append("<Restitution>").append(fixture.getRestitution()).append("</Restitution>").append("</Fixture>");  return sb.toString();}  }
class C{  public static int findFirstEqual(char[] source,int index,char[] match){  for (int i=index; i < source.length; i++) {    if (equalsOne(source[i],match) == true) {      return i;    }  }  return -1;}  }
class C{  public ConversationService(final String versionDate,String username,String password){  this(versionDate);  setUsernameAndPassword(username,password);}  }
class C{  private void growByOne(){  int adding=0;  if (capacityIncrement <= 0) {    if ((adding=elementData.length) == 0) {      adding=1;    }  } else {    adding=capacityIncrement;  }  E[] newData=newElementArray(elementData.length + adding);  System.arraycopy(elementData,0,newData,0,elementCount);  elementData=newData;}  }
class C{  public static Object loadFileHere(String loaddir,String file){  try {    requireLoad();    if (supported()) {      return ScriptLoader.loadHere(loaddir,engine,(file.contains(".") ? file : file + ".js"));    }  } catch (  Exception e) {    Toast.log().error("Could not Load JavaScript script files: " + e);    Toast.log().exception(e);  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.790 -0500",hash_original_method="9D48CC1056269867443B9FC005D01764",hash_generated_method="E11D4D17B078E86A23C0ADE548B9A036") public final boolean hasAction(String action){  return true;}  }
class C{  public synchronized Map<String,Map<String,TungstenProperties>> loadClusterDataSourceMap() throws ConfigurationException {  return loadClusterConfiguration(ResourceType.DATASOURCE);}  }
class C{  public void addObserver(EngineObserver observer){  assert observer != null;  observer_.add(observer);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  protected void increaseJointOccurences(int msg1Id,int msg2Id) throws AdeInternalException {  increaseJointOccurences(msg1Id,msg2Id,m_countFactor);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public synchronized void clear(){  ackTimeoutsCnt=0;  avgClientSockInitTime=0;  avgMsgProcTime=0;  avgMsgQueueTime=0;  avgMsgsAckTimes.clear();  avgMsgsSndTimes.clear();  avgRingMsgTime=0;  avgSrvSockInitTime=0;  clientSockCreatedCnt=0;  crdSinceTs.set(0);  failedNodesCnt=0;  joinedNodesCnt=0;  joinFinishedTs=0;  joinStartedTs=0;  leftNodesCnt=0;  maxClientSockInitTime=0;  maxMsgProcTime=0;  maxMsgQueueTime=0;  maxMsgsAckTimes.clear();  maxMsgsSndTimes.clear();  maxProcTimeMsgCls=null;  maxRingMsgTime=0;  maxRingTimeMsgCls=null;  maxSrvSockInitTime=0;  pendingMsgsDiscarded=0;  pendingMsgsRegistered=0;  procMsgs.clear();  rcvdMsgs.clear();  ringMsgsSent=0;  sentMsgs.clear();  sockReadersCreated=0;  sockReadersRmv=0;  sockTimeoutsCnt=0;}  }
class C{  public static boolean between(final Date date,final Date fromDate,final Date toDate){  return (date.after(fromDate) || date.equals(fromDate)) && date.before(toDate) || date.equals(toDate);}  }
class C{  private static int parseNumber(CharSequence offsetId,int pos,boolean precededByColon){  if (precededByColon && offsetId.charAt(pos - 1) != ':') {    throw new DateTimeException("Zone offset ID '" + offsetId + "' is invalid: Colon not found when expected");  }  char ch1=offsetId.charAt(pos);  char ch2=offsetId.charAt(pos + 1);  if (ch1 < '0' || ch1 > '9' || ch2 < '0' || ch2 > '9') {    throw new DateTimeException("Zone offset ID '" + offsetId + "' is invalid: Non numeric characters found");  }  return (ch1 - 48) * 10 + (ch2 - 48);}  }
class C{  public boolean isActAsSpinnerDialog(){  return actAsSpinnerDialog;}  }
class C{  public static void saveCredentialsFromAuthenticationInfo(AuthenticationInfo authenticationInfo) throws ServerRuntimeException {  String passwordFileLocation=authenticationInfo.getPasswordFileLocation();  try {    String username=authenticationInfo.getUsername();    String password=authenticationInfo.getPassword();    PropertiesConfiguration props=new PropertiesConfiguration(passwordFileLocation);    props.setProperty(username,password);    props.save();  } catch (  org.apache.commons.configuration.ConfigurationException ce) {    logger.error("Error while saving properties for file:" + authenticationInfo.getPasswordFileLocation(),ce);    throw new ServerRuntimeException("Error while saving Credentials: " + ce.getMessage());  }}  }
class C{  private void checkUserPrivileges(VcenterDataCenterUpdate updateParam,VcenterDataCenter dataCenter){  if (!(isSecurityAdmin() || isSystemAdmin())) {    if (updateParam.getTenant() != null && dataCenter.getTenant() != null && !URIUtil.identical(updateParam.getTenant(),dataCenter.getTenant())) {      throw APIException.forbidden.insufficientPermissionsForUser(getUserFromContext().getName());    } else     if (updateParam.getTenant() == null && dataCenter.getTenant() != null) {      throw APIException.forbidden.insufficientPermissionsForUser(getUserFromContext().getName());    } else     if (updateParam.getTenant() != null && dataCenter.getTenant() == null) {      throw APIException.forbidden.insufficientPermissionsForUser(getUserFromContext().getName());    }  }}  }
class C{  static DirectoryReader open(IndexWriter writer,SegmentInfos infos,boolean applyAllDeletes,boolean writeAllDeletes) throws IOException {  final int numSegments=infos.size();  final List<SegmentReader> readers=new ArrayList<>(numSegments);  final Directory dir=writer.getDirectory();  final SegmentInfos segmentInfos=infos.clone();  int infosUpto=0;  boolean success=false;  try {    for (int i=0; i < numSegments; i++) {      final SegmentCommitInfo info=infos.info(i);      assert info.info.dir == dir;      final ReadersAndUpdates rld=writer.readerPool.get(info,true);      try {        final SegmentReader reader=rld.getReadOnlyClone(IOContext.READ);        if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {          readers.add(reader);          infosUpto++;        } else {          reader.decRef();          segmentInfos.remove(infosUpto);        }      }  finally {        writer.readerPool.release(rld);      }    }    writer.incRefDeleter(segmentInfos);    StandardDirectoryReader result=new StandardDirectoryReader(dir,readers.toArray(new SegmentReader[readers.size()]),writer,segmentInfos,applyAllDeletes,writeAllDeletes);    success=true;    return result;  }  finally {    if (!success) {      for (      SegmentReader r : readers) {        try {          r.decRef();        } catch (        Throwable th) {        }      }    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Adjacency(String chr,int pos,boolean isForward){  this(chr,pos,isForward,"","",0,true);}  }
class C{  public static boolean isRedirectingOutput(){  final ProcessLauncherContext context=get();  if (context == null) {    return REDIRECT_OUTPUT_DEFAULT;  }  return context.redirectOutput();}  }
class C{  private void handleConnectResponse(ConnectResponse response,Throwable error,CompletableFuture<Connection> future){  if (open) {    if (error == null) {      LOGGER.debug("Received {}",response);      if (response.status() == Response.Status.OK) {        selector.reset(response.leader(),response.members());        future.complete(connection);      } else {        connect(future);      }    } else {      connect(future);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.833 -0400",hash_original_method="1C4E29D3EA1D72FBB0F5102B7A952561",hash_generated_method="CC1522D8F69FE6D3159800A202639F0C") private void onNetworkDeviceConnected(String address,String iface,int destUuid){  BluetoothDevice device=mAdapter.getRemoteDevice(address);  mBluetoothService.handlePanDeviceStateChange(device,iface,BluetoothPan.STATE_CONNECTED,BluetoothPan.LOCAL_NAP_ROLE);}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  updateRangesFields();}  }
class C{  @SuppressWarnings("rawtypes") protected void assertDocExists(HttpSolrServer solr,String coll,String docId) throws Exception {  QueryRequest qr=new QueryRequest(params("qt","/get","id",docId,"distrib","false"));  NamedList rsp=solr.request(qr);  String match=JSONTestUtil.matchObj("/id",rsp.get("doc"),new Integer(docId));  assertTrue("Doc with id=" + docId + " not found in "+ solr.getBaseURL()+ " due to: "+ match+ "; rsp="+ rsp,match == null);}  }
class C{  public boolean isMaxCalc(){  Object oo=get_Value(COLUMNNAME_IsMaxCalc);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void transfer(InputStream sourceStream,OutputStream targetStream,IProgressMonitor monitor,int length) throws IOException {  monitor.beginTask(null,length < 0 ? 100 : Math.max(1,length / 1024));  String total=length < 0 ? null : String.format("%.1fK",length / 1024.0d);  byte[] buffer=new byte[1024];  int downloaded=0;  int num;  int worked=0, newWorked=0;  while ((num=sourceStream.read(buffer)) > 0) {    targetStream.write(buffer,0,num);    downloaded+=num;    String taskName=(total == null ? String.format("(%.1fK)",(downloaded / 1024.0)) : String.format("(%.1fK/%s)",(downloaded / 1024.0),total));    monitor.subTask(Messages.TransferingData + " " + taskName);    if (length < 0) {      newWorked=Math.min(worked + 1,99);    } else {      newWorked=downloaded / 1024;    }    if (newWorked > worked) {      monitor.worked(newWorked - worked);      worked=newWorked;    }  }}  }
class C{  @PropertyUpdate(properties={"storage.bufferSize","storage.bufferPoolMinCapacity","storage.bufferPoolMaxCapacity","storage.bufferPoolMinDirectMemoryOccupancy","storage.bufferPoolMaxDirectMemoryOccupancy"}) protected void updatePoolProperties(){  long maxDirectMemory=64 * 1024 * 1024;  try {    if (UnderlyingSystemInfo.JVM_PROVIDER.equals(JvmProvider.SUN) || UnderlyingSystemInfo.JVM_PROVIDER.equals(JvmProvider.ORACLE)) {      Class<?> vmClazz=Class.forName("sun.misc.VM");      Method directMemoryMethod=vmClazz.getMethod("maxDirectMemory");      directMemoryMethod.setAccessible(true);      maxDirectMemory=(Long)directMemoryMethod.invoke(null);    }  } catch (  Exception e) {    if (log.isDebugEnabled()) {      log.debug("Exception occurred trying to use the class sun.misc.VM via reflection",e);    }  }  if (poolMinCapacity > (long)(maxDirectMemory * bufferPoolMinDirectMemoryOccupancy)) {    poolMinCapacity=(long)(maxDirectMemory * bufferPoolMinDirectMemoryOccupancy);  }  if (poolMaxCapacity > (long)(maxDirectMemory * bufferPoolMaxDirectMemoryOccupancy)) {    poolMaxCapacity=(long)(maxDirectMemory * bufferPoolMaxDirectMemoryOccupancy);  }  poolFactory.setBufferCapacity(bufferSize);  int maxIdle=(int)(poolMinCapacity / bufferSize);  int maxActive=(int)(poolMaxCapacity / bufferSize);  super.setMaxIdle(maxIdle);  super.setMaxActive(maxActive);}  }
class C{  public void ifNonNull(final Label label){  mv.visitJumpInsn(Opcodes.IFNONNULL,label);}  }
class C{  public EndpointTest(String name){  super(name);}  }
class C{  public void onContextMenuClosed(Menu menu){  if (mParent != null) {    mParent.onContextMenuClosed(menu);  }}  }
class C{  public static void randomBytes(byte[] bytes){  RANDOM.nextBytes(bytes);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.594 -0500",hash_original_method="3D14CCA72C816FE4801BBC05991E4343",hash_generated_method="06F3350CA231C61E6E3D685EA2191004") @DSSafe(DSCat.SAFE_LIST) public void add(HDR sipheader,boolean top){  if (top)   this.addFirst(sipheader); else   this.add(sipheader);}  }
class C{  BlobFromLocator(ResultSetImpl creatorResultSetToSet,int blobColumnIndex,ExceptionInterceptor exceptionInterceptor) throws SQLException {  this.exceptionInterceptor=exceptionInterceptor;  this.creatorResultSet=creatorResultSetToSet;  this.numColsInResultSet=this.creatorResultSet.fields.length;  this.quotedId=this.creatorResultSet.connection.getMetaData().getIdentifierQuoteString();  if (this.numColsInResultSet > 1) {    this.primaryKeyColumns=new ArrayList<String>();    this.primaryKeyValues=new ArrayList<String>();    for (int i=0; i < this.numColsInResultSet; i++) {      if (this.creatorResultSet.fields[i].isPrimaryKey()) {        StringBuilder keyName=new StringBuilder();        keyName.append(this.quotedId);        String originalColumnName=this.creatorResultSet.fields[i].getOriginalName();        if ((originalColumnName != null) && (originalColumnName.length() > 0)) {          keyName.append(originalColumnName);        } else {          keyName.append(this.creatorResultSet.fields[i].getName());        }        keyName.append(this.quotedId);        this.primaryKeyColumns.add(keyName.toString());        this.primaryKeyValues.add(this.creatorResultSet.getString(i + 1));      }    }  } else {    notEnoughInformationInQuery();  }  this.numPrimaryKeys=this.primaryKeyColumns.size();  if (this.numPrimaryKeys == 0) {    notEnoughInformationInQuery();  }  if (this.creatorResultSet.fields[0].getOriginalTableName() != null) {    StringBuilder tableNameBuffer=new StringBuilder();    String databaseName=this.creatorResultSet.fields[0].getDatabaseName();    if ((databaseName != null) && (databaseName.length() > 0)) {      tableNameBuffer.append(this.quotedId);      tableNameBuffer.append(databaseName);      tableNameBuffer.append(this.quotedId);      tableNameBuffer.append('.');    }    tableNameBuffer.append(this.quotedId);    tableNameBuffer.append(this.creatorResultSet.fields[0].getOriginalTableName());    tableNameBuffer.append(this.quotedId);    this.tableName=tableNameBuffer.toString();  } else {    StringBuilder tableNameBuffer=new StringBuilder();    tableNameBuffer.append(this.quotedId);    tableNameBuffer.append(this.creatorResultSet.fields[0].getTableName());    tableNameBuffer.append(this.quotedId);    this.tableName=tableNameBuffer.toString();  }  this.blobColumnName=this.quotedId + this.creatorResultSet.getString(blobColumnIndex) + this.quotedId;}  }
class C{  private void initProjectProperties(){  this.rootFile=PreferenceStoreHelper.readProjectRootFile(project);  this.specObj=null;  this.status=IParseConstants.UNPARSED;  size=ResourceHelper.getSizeOfJavaFileResource(this.project);  if (this.rootFile == null) {    Activator.getDefault().logError("A spec did not load correctly, probably because it was modified outside the Toolbox." + "\n Error occurred in toolbox/spec/Spec.initProjectProperties()",null);  } else {    this.getTpMapping(this.rootFile.getName());  }}  }
class C{  public StopContainerParams withTimeout(long timeout){  withTimeout(timeout,TimeUnit.SECONDS);  return this;}  }
class C{  public void statusMessage(String message){  System.err.println("STATUS: " + message);}  }
class C{  public String findAttribute(String name){  if (attributes == null)   return (null); else   return (attributes.get(name));}  }
class C{  public static MagnetOptions[] parseMagnet(String arg){  Map<Integer,Map<Option,List<String>>> options=new HashMap<Integer,Map<Option,List<String>>>();  if (arg.startsWith("'"))   arg=arg.substring(1);  if (arg.endsWith("'"))   arg=arg.substring(0,arg.length() - 1);  if (!arg.toLowerCase(Locale.US).startsWith(MagnetOptions.MAGNET))   return new MagnetOptions[0];  arg=arg.substring(8);  StringTokenizer st=new StringTokenizer(arg,"&");  String keystr;  String cmdstr;  int start;  int index;  Integer iIndex;  int periodLoc;  while (st.hasMoreTokens()) {    Map<Option,List<String>> curOptions;    keystr=st.nextToken();    keystr=keystr.trim();    start=keystr.indexOf("=") + 1;    if (start == 0)     continue;    cmdstr=keystr.substring(start);    keystr=keystr.substring(0,start - 1);    try {      cmdstr=URLDecoder.decode(cmdstr);    } catch (    IOException e1) {      continue;    }    if ((periodLoc=keystr.indexOf(".")) > 0) {      try {        index=Integer.parseInt(keystr.substring(periodLoc + 1));      } catch (      NumberFormatException e) {        continue;      }    } else {      index=0;    }    iIndex=new Integer(index);    curOptions=options.get(iIndex);    if (curOptions == null) {      curOptions=new HashMap<Option,List<String>>();      options.put(iIndex,curOptions);    }    Option option=Option.valueFor(keystr);    if (option != null)     addAppend(curOptions,option,cmdstr);  }  MagnetOptions[] ret=new MagnetOptions[options.size()];  int i=0;  for (  Map<Option,List<String>> current : options.values())   ret[i++]=new MagnetOptions(current);  return ret;}  }
class C{  public int span(final CharSet s){  return span(s,0);}  }
class C{  @SuppressWarnings("unchecked") void initCache(){  cache=webSesIgnite.cache(cacheName);  binaryCache=webSesIgnite.cache(cacheName);  if (cache == null)   throw new IgniteException("Cache for web sessions is not started (is it configured?): " + cacheName);  CacheConfiguration cacheCfg=cache.getConfiguration(CacheConfiguration.class);  if (cacheCfg.getWriteSynchronizationMode() == FULL_ASYNC)   throw new IgniteException("Cache for web sessions cannot be in FULL_ASYNC mode: " + cacheName);  if (!cacheCfg.isEagerTtl())   throw new IgniteException("Cache for web sessions cannot operate with lazy TTL. " + "Consider setting eagerTtl to true for cache: " + cacheName);  if (cacheCfg.getCacheMode() == LOCAL)   U.quietAndWarn(webSesIgnite.log(),"Using LOCAL cache for web sessions caching " + "(this is only OK in test mode): " + cacheName);  if (cacheCfg.getCacheMode() == PARTITIONED && cacheCfg.getAtomicityMode() != ATOMIC)   U.quietAndWarn(webSesIgnite.log(),"Using " + cacheCfg.getAtomicityMode() + " atomicity for web sessions "+ "caching (switch to ATOMIC mode for better performance)");  txEnabled=cacheCfg.getAtomicityMode() == TRANSACTIONAL;}  }
class C{  protected static void producePDF(String file){  try {    String command="dot -Tpdf \"" + file + ".txt\" -o \""+ file+ ".pdf\"";    Process child=Runtime.getRuntime().exec(command);    child.waitFor();  } catch (  InterruptedException|IOException e) {    e.printStackTrace();    System.exit(1);  }}  }
class C{  private static MimeBodyPart createAttachmentPart(DataSource attachment) throws MessagingException {  MimeBodyPart attachmentPart=new MimeBodyPart();  attachmentPart.setDataHandler(new DataHandler(attachment));  attachmentPart.setDisposition(Part.ATTACHMENT);  attachmentPart.setFileName(attachment.getName());  return attachmentPart;}  }
class C{  public Workflow.Method deleteReplicationGroupMethod(URI storage,URI consistencyGroup,String groupName,Boolean keepRGName,Boolean markInactive,String sourceGroupName){  return new Workflow.Method("deleteReplicationGroup",storage,consistencyGroup,groupName,keepRGName,markInactive,sourceGroupName);}  }
class C{  public void updateFOV(){  BasicCamera cam=fieldCamera.getCamera();  coord.set(cam.getLocation());  Landscape.getInstance().localToWorldCoordinate(coord);  fovLocationText.setValue(coord);  coord.set(cam.getDirection());  fovDirectionText.setValue(coord);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public Id parkVehicle(Id agentId,Id actFacilityId,String actType){  Coord actCoordinate=controller.getScenario().getActivityFacilities().getFacilities().get(actFacilityId).getCoord();  double radius=initialParkingSearchRadiusInMeter;  Collection<Parking> collection=parkings.getDisk(actCoordinate.getX(),actCoordinate.getY(),radius);  removeAllUnusableParking(collection,agentId,actFacilityId,actType);  while (collection.size() == 0) {    radius*=2;    collection=parkings.getDisk(actCoordinate.getX(),actCoordinate.getY(),radius);    removeAllUnusableParking(collection,agentId,actFacilityId,actType);  }  return selectParking(collection,actFacilityId,actFacilityId,actType).getId();}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case CHALLENGE:    return isSetChallenge();case RESPONSE:  return isSetResponse();}throw new IllegalStateException();}  }
class C{  public static String decrypt(final String password,String base64EncodedCipherText) throws GeneralSecurityException {  try {    final SecretKeySpec key=generateKey(password);    byte[] decodedCipherText=Base64.decode(base64EncodedCipherText,Base64.NO_WRAP);    byte[] decryptedBytes=decrypt(key,ivBytes,decodedCipherText);    String message=new String(decryptedBytes,CHARSET);    return message;  } catch (  UnsupportedEncodingException e) {    throw new GeneralSecurityException(e);  }}  }
class C{  public boolean hasPermanentMenuKey(){  if (!sHasPermanentMenuKey) {    return false;  }  ContentResolver res=mContext.getContentResolver();  boolean forceOverflowButton=Settings.System.getInt(res,Settings.System.UI_FORCE_OVERFLOW_BUTTON,0) == 1;  if (forceOverflowButton) {    return false;  }  IWindowManager wm=WindowManagerGlobal.getWindowManagerService();  try {    return wm.hasMenuKeyEnabled();  } catch (  RemoteException ex) {    return sHasPermanentMenuKey;  }}  }
class C{  public void parse(ExtensionProfile extProfile,InputStream inputStream) throws IOException, ParseException {  new XmlParser().parse(inputStream,new Handler(extProfile),atomPubNs.getUri(),"service");}  }
class C{  private int calculateWidth(int requestedWidth,int requestedWidthMode,int height){  if (mShowControls && mShowFastControls) {    return height * 5;  } else   if (!mShowControls && !mShowFastControls) {    if (requestedWidthMode == MeasureSpec.EXACTLY) {      return requestedWidth;    } else     if (requestedWidthMode == MeasureSpec.AT_MOST) {      return requestedWidth;    } else {      return height * 5;    }  } else {    return height * 3;  }}  }
class C{  public static int stackEffectOf(int opcode){  return stackEffectArray[opcode & 0xff];}  }
class C{  private E dequeue(){  Node<E> h=head;  Node<E> first=h.next;  h.next=h;  head=first;  E x=first.item;  first.item=null;  return x;}  }
class C{  @Override protected void register(PackagerFactory packagerFactory){}  }
class C{  private TopSort(){}  }
class C{  @Override public Generator<IPoint> construct(String[] args){  return new UnusualGenerator(Double.valueOf(args[0]));}  }
class C{  private void compactEntry(long index,Segment segment,Segment compactSegment){  compactSegment.skip(1);  LOGGER.debug("Compacted entry {} from segment {}",index,segment.descriptor().id());}  }
class C{  public CRLNumber(byte[] encoding) throws IOException {  super(encoding);  number=new BigInteger((byte[])ASN1.decode(encoding));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:44.161 -0500",hash_original_method="F1314A453C93E830C24484946DC25942",hash_generated_method="08FB4211899015991841F25F84138047") public SIPHeader parse() throws ParseException {  PathList pathList=new PathList();  if (debug)   dbg_enter("PathParser.parse");  try {    this.lexer.match(TokenTypes.PATH);    this.lexer.SPorHT();    this.lexer.match(':');    this.lexer.SPorHT();    while (true) {      Path path=new Path();      super.parse(path);      pathList.add(path);      this.lexer.SPorHT();      char la=lexer.lookAhead(0);      if (la == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       if (la == '\n')       break; else       throw createParseException("unexpected char");    }    return pathList;  }  finally {    if (debug)     dbg_leave("PathParser.parse");  }}  }
class C{  private boolean cmd_delete(){  boolean success=false;  if (m_currentData == null)   log.log(Level.SEVERE,"No data"); else {    success=m_currentData.delete(true);    m_currentData=null;    m_recordAccesss.remove(m_currentRow);    log.fine("Success=" + success);  }  return success;}  }
class C{  public static byte[] decode(byte[] pArray){  return decodeBase64(pArray);}  }
class C{  public static void main(final String[] args){  if (args.length < 1 || args.length > 2) {    System.err.println("USAGE: total-size sequence-size");    return;  }  int seqNum=0;  if ("-random".equals(args[0])) {    while (true) {      System.out.println(">d" + seqNum++);      System.out.println(random(RANDOM.nextInt(0x000FFFFF)));    }  } else {    long size=Long.parseLong(args[0]);    long chunk=1000;    if (args.length > 1) {      chunk=Long.parseLong(args[1]);    }    while (size > 0) {      System.out.println(">d" + seqNum++);      System.out.println(random((int)Math.min(chunk,size)));      size-=chunk;    }  }}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public static MRequisitionLine[] forC_Order_ID(Properties ctx,int C_Order_ID,String trxName){  final String whereClause="EXISTS (SELECT 1 FROM C_OrderLine ol" + " WHERE ol.C_OrderLine_ID=M_RequisitionLine.C_OrderLine_ID" + " AND ol.C_Order_ID=?)";  List<MRequisitionLine> list=new Query(ctx,I_M_RequisitionLine.Table_Name,whereClause,trxName).setParameters(C_Order_ID).list();  return list.toArray(new MRequisitionLine[list.size()]);}  }
class C{  public void testSerializationCompatibility() throws Exception {  TestUtils.initCertPathSSCertChain();  CertPath certPath=TestUtils.buildCertPathSSCertChain();  SerializationTest.verifyGolden(this,certPath);}  }
class C{  public boolean match(final Cookie cookie,final CookieOrigin origin){  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  String host=origin.getHost().toLowerCase(Locale.ENGLISH);  String cookieDomain=cookie.getDomain();  if (!domainMatch(host,cookieDomain)) {    return false;  }  String effectiveHostWithoutDomain=host.substring(0,host.length() - cookieDomain.length());  return effectiveHostWithoutDomain.indexOf('.') == -1;}  }
class C{  public boolean hasNode(final Node node){  return nodes.contains(node);}  }
class C{  public LogicalDataImportTask(T importItem){  super(importItem);  this.flags="";  this.ack="";  this.seq="";  this.src=-1;  this.dst=-1;  this.eth=-1;  this.ttl=-1;  this.proto=-1;  this.dsize=-1;  this.window=-1;  this.size=0;}  }
class C{  public static Charset decode(File f) throws IOException {  SortedMap<String,Charset> charsets=Charset.availableCharsets();  String[] firstCharsets={Charset.defaultCharset().name(),"US-ASCII","UTF-8","UTF-16BE","UTF-16LE"};  Collection<Charset> orderedCharsets=U.newLinkedHashSet(charsets.size());  for (  String c : firstCharsets)   if (charsets.containsKey(c))   orderedCharsets.add(charsets.get(c));  orderedCharsets.addAll(charsets.values());  try (RandomAccessFile raf=new RandomAccessFile(f,"r")){    FileChannel ch=raf.getChannel();    ByteBuffer buf=ByteBuffer.allocate(DFLT_BUFFER_SIZE);    ch.read(buf);    buf.flip();    for (    Charset charset : orderedCharsets) {      CharsetDecoder decoder=charset.newDecoder();      decoder.reset();      try {        decoder.decode(buf);        return charset;      } catch (      CharacterCodingException ignored) {      }    }  }   return Charset.defaultCharset();}  }
class C{  private static void buildJars() throws Throwable {  String[] jars={"Agent","BadAgent","RedefineAgent","Application"};  for (  String jar : jars) {    buildJar(jar);  }}  }
class C{  public Container deploy() throws DeploymentException {  Archive deployment=createDefaultDeployment();  if (deployment == null) {    throw new DeploymentException("Unable to create default deployment");  } else {    return deploy(deployment);  }}  }
class C{  public void onUpdate(){  super.onUpdate();  this.motionY*=0.6000000238418579D;  if (chaosCountdown > 0) {    chaosCountdown--;    return;  }  BlockPos pos=this.getPosition();  BlockPos minPos=buildCommands.getMinPos();  BlockPos maxPos=buildCommands.getMaxPos();  int x=pos.getX();  int y=pos.getY();  int z=pos.getZ();  int minX=minPos.getX();  int minY=minPos.getY();  int minZ=minPos.getZ();  int maxX=maxPos.getX();  int maxY=maxPos.getY();  int maxZ=maxPos.getZ();  if (x < minX || y < minY || z < minZ || x > maxX || y > maxY || z > maxZ) {    this.setLocationAndAngles(Utils.negativeNextInt(minX,maxX),Utils.negativeNextInt(minY,maxY),minZ + 8,0,0);  }  World world=this.worldObj;  if (world.getTileEntity(this.getPosition()) == null) {    return;  }  TileEntity entity=world.getTileEntity(this.getPosition());  if (!(entity instanceof TileEntitySign)) {    return;  }  TileEntitySign sign=(TileEntitySign)entity;  if (!sign.signText[0].getUnformattedText().contains("Name:")) {    return;  }  String name=sign.signText[1].getUnformattedText().concat(sign.signText[2].getUnformattedText().concat(sign.signText[3].getUnformattedText()));  if (listCommands.getWithName(name) == null) {    return;  }  Container container=listCommands.getWithName(name);  lifecycleCommands.removeContainer(container.getId());  if (!world.isRemote) {    sendErrorMessage("Oh no! The Chaos Monkey has destroyed the container \"" + name + "\"!");  }  if (sender instanceof EntityPlayer) {    ((EntityPlayer)sender).inventory.addItemStackToInventory(new ItemStack(Mobycraft.container_essence,new Random().nextInt(3)));  }  chaosCountdown=maxChaosCountdown;  buildCommands.updateContainers(false);}  }
class C{  public static String searchExportProductList(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  String errMsg=null;  List<Map<String,Object>> productExportList=FastList.newInstance();  try {    boolean beganTransaction=TransactionUtil.begin(DEFAULT_TX_TIMEOUT);    try {      EntityListIterator eli=getProductSearchResults(request);      if (eli == null) {        errMsg=UtilProperties.getMessage(resource,"productsearchevents.no_results_found_probably_error_constraints",UtilHttp.getLocale(request));        request.setAttribute("_ERROR_MESSAGE_",errMsg);        return "error";      }      GenericValue searchResultView=null;      while ((searchResultView=eli.next()) != null) {        Map<String,Object> productMap=FastMap.newInstance();        String productId=searchResultView.getString("mainProductId");        productMap.put("productId",productId);        productMap.put("productFeatureCustom",EntityQuery.use(delegator).from("ProductFeatureAndAppl").where("productId",productId,"productFeatureTypeId","HAZMAT").filterByDate().queryFirst());        List<GenericValue> productCategories=EntityQuery.use(delegator).from("ProductCategoryAndMember").where("productId",productId).filterByDate().queryList();        productMap.put("productCategories",productCategories);        List<GenericValue> productFeatures=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where("productId",productId).filterByDate().queryList();        productMap.put("productFeatures",productFeatures);        productExportList.add(productMap);      }      eli.close();    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());      errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));      Debug.logError(e,errMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      TransactionUtil.rollback(beganTransaction,errMsg,e);      return "error";    } finally {      TransactionUtil.commit(beganTransaction);    }  } catch (  GenericTransactionException e) {    Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());    errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));    Debug.logError(e,errMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  request.setAttribute("productExportList",productExportList);  return "success";}  }
class C{  public int count(){  return this.numberOfAddedElements;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.419 -0500",hash_original_method="F7C094FE7E8356B9E6B34E820636D434",hash_generated_method="127D5A8E6D4BFFA2632A9B26A95B3888") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ServerParser.parse");  Server server=new Server();  try {    headerName(TokenTypes.SERVER);    if (this.lexer.lookAhead(0) == '\n')     throw createParseException("empty header");    while (this.lexer.lookAhead(0) != '\n' && this.lexer.lookAhead(0) != '\0') {      if (this.lexer.lookAhead(0) == '(') {        String comment=this.lexer.comment();        server.addProductToken('(' + comment + ')');      } else {        String tok;        int marker=0;        try {          marker=this.lexer.markInputPosition();          tok=this.lexer.getString('/');          if (tok.charAt(tok.length() - 1) == '\n')           tok=tok.trim();          server.addProductToken(tok);        } catch (        ParseException ex) {          this.lexer.rewindInputPosition(marker);          tok=this.lexer.getRest().trim();          server.addProductToken(tok);          break;        }      }    }  }  finally {    if (debug)     dbg_leave("ServerParser.parse");  }  return server;}  }
class C{  boolean contains(double latitude,double longitude){  boolean res=false;  if (latitude <= max) {    if (lat1 > latitude != lat2 > latitude) {      if (longitude < (lon1 - lon2) * (latitude - lat2) / (lat1 - lat2) + lon2) {        res=true;      }    }    if (left != null) {      res^=left.contains(latitude,longitude);    }    if (right != null && latitude >= low) {      res^=right.contains(latitude,longitude);    }  }  return res;}  }
class C{  public void addErrorCallback(OneSheeldErrorCallback errorCallback){  if (errorCallback != null && !errorCallbacks.contains(errorCallback))   errorCallbacks.add(errorCallback);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  @Override public boolean onKeyDown(int keyCode,KeyEvent event){switch (keyCode) {case KeyEvent.KEYCODE_DPAD_LEFT:    playSoundEffect(SoundEffectConstants.NAVIGATION_LEFT);  return true;case KeyEvent.KEYCODE_DPAD_RIGHT:playSoundEffect(SoundEffectConstants.NAVIGATION_RIGHT);return true;case KeyEvent.KEYCODE_DPAD_CENTER:case KeyEvent.KEYCODE_ENTER:mReceivedInvokeKeyDown=true;}return super.onKeyDown(keyCode,event);}  }
class C{  private void createIgnoreCaseComposite(){  FillLayout fillLayout=new FillLayout();  fillLayout.marginHeight=10;  fillLayout.marginWidth=10;  Composite ignoreCaseComposite=new Composite(sShell,SWT.NONE);  ignoreCaseComposite.setLayout(fillLayout);  checkBox=new Button(ignoreCaseComposite,SWT.CHECK);  checkBox.setText(textIgnoreCase);  checkBox.addSelectionListener(defaultSelectionAdapter);  FormData formData=new FormData();  formData.top=new FormAttachment(replaceGroup.group);  formData.left=new FormAttachment(directionGroup);  ignoreCaseComposite.setLayoutData(formData);}  }
class C{  public static java.util.Date toDate(int month,int day,int year,int hour,int minute,int second){  Calendar calendar=Calendar.getInstance();  try {    calendar.set(year,month - 1,day,hour,minute,second);    calendar.set(Calendar.MILLISECOND,0);  } catch (  Exception e) {    return null;  }  return new java.util.Date(calendar.getTime().getTime());}  }
class C{  public Iterator iterateAttributeNames(){  ArrayList result=new ArrayList();  Iterator enm=this.attributes.iterator();  while (enm.hasNext()) {    XMLAttribute attr=(XMLAttribute)enm.next();    result.add(attr.getFullName());  }  return result.iterator();}  }
class C{  public synchronized void store(Document doc,File file) throws IOException {  store(doc,ResourceUtil.toResource(file));}  }
class C{  public void addBanner(String objFileName,String material,ChunkProcessor obj,double x,double y,double z,double scale,double rotation){  OBJInputFile objFile=new OBJInputFile();  File objMeshFile=new File(objFileName);  try {    objFile.loadFile(objMeshFile,material);  } catch (  IOException e) {    Log.error("Cant read Objectfile",e,true);  }  OBJGroup myObjGroup=objFile.getDefaultObject();  objFile.overwriteMaterial(myObjGroup,material);  Transform translate=new Transform();  translate.translate((float)x,(float)y,(float)z);  Transform tScale=new Transform();  tScale.scale((float)scale,(float)scale,(float)scale);  translate=translate.multiply(tScale);  Transform tRotation=new Transform();  tRotation.rotate(0,(float)rotation,0);  translate=translate.multiply(tRotation);  objFile.addObjectToOutput(myObjGroup,translate,obj);}  }
class C{  public Vector4f(){  this.points[0]=0;  this.points[1]=0;  this.points[2]=0;  this.points[3]=0;}  }
class C{  public static DenseDoubleMatrix2D times(DenseDoubleMatrix2D matrix1,DenseDoubleMatrix2D matrix2,long timesInner){  long timesRows=matrix1.getRowCount();  long timesCols=matrix2.getColumnCount();  DenseDoubleMatrix2D response=DenseDoubleMatrix2D.Factory.zeros(timesRows,timesCols);  for (long row=0; row < timesRows; row++) {    for (long col=0; col < timesCols; col++) {      for (long inner=0; inner < timesInner; inner++) {        response.setDouble(matrix1.getAsDouble(row,inner) * matrix2.getDouble(inner,col) + response.getDouble(row,col),row,col);      }    }  }  return response;}  }
class C{  public static List<String> readLines(final InputStream input,final Charset encoding) throws IOException {  InputStreamReader reader=new InputStreamReader(input,Charsets.toCharset(encoding));  return IOUtils.readLines(reader);}  }
class C{  public boolean isBordered(){  return modifiers.contains(SGR.BORDERED);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof Setting)) {    return false;  }  Setting setting=(Setting)obj;  return key.equals(setting.key);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public boolean isExitBlock(BasicBlock block){  return exitBlockSet.get(block.getLabel());}  }
class C{  public void testPBEParameterSpec(){  byte[] salt={1,2,3,4,5};  int iterationCount=10;  try {    new PBEParameterSpec(null,iterationCount);    fail("A NullPointerException should be was thrown " + "in the case of null salt.");  } catch (  NullPointerException e) {  }  PBEParameterSpec pbeps=new PBEParameterSpec(salt,iterationCount);  salt[0]++;  assertFalse("The change of salt specified in the constructor " + "should not cause the change of internal array.",salt[0] == pbeps.getSalt()[0]);}  }
class C{  protected SVGStylableElement(){}  }
class C{  static JavaAnnotation[] parseAnnotations(InputStream is,ConstantPool cp,JavaClassLoader loader) throws IOException {  int n=readShort(is);  JavaAnnotation[] annArray=new JavaAnnotation[n];  for (int i=0; i < n; i++) {    annArray[i]=parseAnnotation(is,cp,loader);  }  return annArray;}  }
class C{  public Builder(String token){  this.token=token;  root=new HashMap<>();  aps=new HashMap<>();  alert=new HashMap<>();}  }
class C{  @Override public boolean validateCurrentStep(int currentStep,int newStep){  if ((currentStep > 0) && (newStep > currentStep) && (fileTextField.getText().trim().length() == 0)) {    JOptionPane.showMessageDialog(this,"Please specify a data file!","No data file specified",JOptionPane.WARNING_MESSAGE);    return false;  } else {    return true;  }}  }
class C{  public void insert(final AbstractInsnNode insn){  ++size;  if (first == null) {    first=insn;    last=insn;  } else {    first.prev=insn;    insn.next=first;  }  first=insn;  cache=null;  insn.index=0;}  }
class C{  @Override public String toString(){  StringBuffer result=new StringBuffer("State[ ");  for (int i=0; i < size(); i++)   result.append(selectors.get(i) + "=" + selIndices.get(i)+ " ");  result.append("]");  return result.toString();}  }
class C{  private String soapMessage2String(SOAPMessage msg){  if (msg == null)   return "";  try (ByteArrayOutputStream streamOut=new ByteArrayOutputStream()){    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    Source sc=msg.getSOAPPart().getContent();    StreamResult result=new StreamResult(streamOut);    transformer.transform(sc,result);    String strMessage=streamOut.toString();    return escapeXmlString(strMessage);  } catch (  Exception e) {    System.out.println("Exception in printing SOAP message: " + e.getMessage());    return "";  }}  }
class C{  public boolean removeFieldValues(Object[] fieldValues){  if (this.hasLimitIterator) {    Iterator fieldItr=this.fieldValuesIterator();    while (fieldItr.hasNext()) {      if (Arrays.equals((Object[])fieldItr.next(),fieldValues)) {        fieldItr.remove();        return true;      }    }    return false;  } else {    return super.remove(fieldValues);  }}  }
class C{  public static Component unwrap(com.haulmont.cuba.gui.components.Component component){  Object comp=component;  while (comp instanceof com.haulmont.cuba.gui.components.Component.Wrapper) {    comp=((com.haulmont.cuba.gui.components.Component.Wrapper)comp).getComponent();  }  return (Component)comp;}  }
class C{  public void store32(int addr,int value){  store8(addr,value >> 24);  store8(addr + 1,value >> 16);  store8(addr + 2,value >> 8);  store8(addr + 3,value);}  }
class C{  public static SyncResults syncWorkspace(final ServerContext context,final String rootPath){  final SyncCommand command=new SyncCommand(context,Collections.singletonList(rootPath),true);  return command.runSynchronously();}  }
class C{  public ServiceDisabled(){  requestFileName="getstate.query";}  }
class C{  void calculateValue(float fraction){  mAnimatedValue=mKeyframeSet.getValue(fraction);}  }
class C{  private CompletableFuture<QueryResponse> queryLinearizable(QueryEntry entry){  ServerSessionContext session=context.getStateMachine().executor().context().sessions().getSession(entry.getSession());  if (session == null) {    return CompletableFuture.completedFuture(logResponse(QueryResponse.builder().withStatus(Response.Status.ERROR).withError(CopycatError.Type.UNKNOWN_SESSION_ERROR).build()));  }  CompletableFuture<QueryResponse> future=new CompletableFuture<>();  appendLinearizableQuery(entry,session,future);  return future;}  }
class C{  @Override public synchronized void reset(){  pos=0;}  }
class C{  public static String tableFileToRegex(String schema,String tableFile) throws IOException {  StringBuilder tables=new StringBuilder();  CSVReader reader=new CSVReader(new FileReader(tableFile));  String[] cols;  boolean first=true;  while ((cols=reader.readNext()) != null) {    if (cols.length == 1 && cols[0].length() == 0) {    } else     if (cols.length > 0 && cols[0].length() > 0 && cols[0].charAt(0) == '#') {    } else {      if (!first)       tables.append(",");      if (schema != null) {        tables.append(schema);        tables.append(".");      }      tables.append(cols[0]);    }    first=false;  }  reader.close();  return tables.toString();}  }
class C{  public void initialize(){  if (!enabled)   return;  elmMsgTimeout=ELM_TIMEOUT_DEFAULT;  setElmTimeoutLrnLow(getElmTimeoutMin());  setElmMsgTimeout(ELM_TIMEOUT_DEFAULT);}  }
class C{  public void doText(final PDFPage cmds,final Object ary[]) throws PDFParseException {  for (int i=0, to=ary.length; i < to; ++i) {    if (ary[i] instanceof String) {      doText(cmds,(String)ary[i]);    } else     if (ary[i] instanceof Double) {      float val=((Double)ary[i]).floatValue() / 1000f;      cur.preTranslate(-val * fsize * th,0);    } else {      throw new PDFParseException("Bad element in TJ array");    }  }}  }
class C{  public HashDocAttributeSet(DocAttribute[] attributes){  super(attributes,DocAttribute.class);}  }
class C{  protected byte[] engineGetIV(){  return core.getIV();}  }
class C{  public EncryptedPrivateKeyInfo(AlgorithmId algid,byte[] encryptedData){  this.algid=algid;  this.encryptedData=encryptedData.clone();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.081 -0500",hash_original_method="2B179D27AA0FC8FCF5481D4095B4030E",hash_generated_method="814C1C407F98A217222553107A0898F8") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("TimeStampParser.parse");  TimeStamp timeStamp=new TimeStamp();  try {    headerName(TokenTypes.TIMESTAMP);    timeStamp.setHeaderName(SIPHeaderNames.TIMESTAMP);    this.lexer.SPorHT();    String firstNumber=this.lexer.number();    try {      if (lexer.lookAhead(0) == '.') {        this.lexer.match('.');        String secondNumber=this.lexer.number();        String s=firstNumber + "." + secondNumber;        float ts=Float.parseFloat(s);        timeStamp.setTimeStamp(ts);      } else {        long ts=Long.parseLong(firstNumber);        timeStamp.setTime(ts);      }    } catch (    NumberFormatException ex) {      throw createParseException(ex.getMessage());    }catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    if (lexer.lookAhead(0) != '\n') {      firstNumber=this.lexer.number();      try {        if (lexer.lookAhead(0) == '.') {          this.lexer.match('.');          String secondNumber=this.lexer.number();          String s=firstNumber + "." + secondNumber;          float ts=Float.parseFloat(s);          timeStamp.setDelay(ts);        } else {          int ts=Integer.parseInt(firstNumber);          timeStamp.setDelay(ts);        }      } catch (      NumberFormatException ex) {        throw createParseException(ex.getMessage());      }catch (      InvalidArgumentException ex) {        throw createParseException(ex.getMessage());      }    }  }  finally {    if (debug)     dbg_leave("TimeStampParser.parse");  }  return timeStamp;}  }
class C{  protected void paintTabBorder(Graphics g,int tabPlacement,int tabIndex,int x,int y,int w,int h,boolean isSelected){  Graphics2D g2d=(Graphics2D)g.create();  g2d.translate(x,y);  boolean isRover=(this.getRolloverTab() == tabIndex);  boolean isEnableAt=this.tabPane.isEnabledAt(tabIndex);switch (tabPlacement) {case LEFT:    g2d.scale(-1.0,1.0);  g2d.rotate(Math.toRadians(90.0));paintTabBorderImpl(g2d,isEnableAt,isSelected,isRover,0,0,h,w);break;case RIGHT:g2d.translate(w,0);g2d.rotate(Math.toRadians(90.0));paintTabBorderImpl(g2d,isEnableAt,isSelected,isRover,0,0,h,w);break;case BOTTOM:g2d.translate(0,h);g2d.scale(-1.0,1.0);g2d.rotate(Math.toRadians(180.0));paintTabBorderImpl(g2d,isEnableAt,isSelected,isRover,0,0,w,h);break;case TOP:default :paintTabBorderImpl(g2d,isEnableAt,isSelected,isRover,0,0,w,h);break;}}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);}  }
class C{  public String name(){  return name;}  }
class C{  public static boolean isWhitespace(String s){  if (isEmpty(s))   return true;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (whitespace.indexOf(c) == -1)     return false;  }  return true;}  }
class C{  protected CordovaWebView makeWebView(){  return new CordovaWebViewImpl(makeWebViewEngine());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:00.767 -0500",hash_original_method="2A66FD73F959B53947CB4E0B8EDD927F",hash_generated_method="76DB0668E693AEB69AB10C966F2F110A") public WordIterator(Locale locale){  mIterator=BreakIterator.getWordInstance(locale);}  }
class C{  public static boolean intToBool(int i){  boolean a=true;  if (i == 0) {    a=false;  }  return a;}  }
class C{  private SSLContext initSslContext(Switchboard sb){  String keyStoreFileName=sb.getConfig("keyStore","").trim();  String keyStorePwd=sb.getConfig("keyStorePassword","").trim();  final String pkcs12ImportFile=sb.getConfig("pkcs12ImportFile","").trim();  if (keyStoreFileName.isEmpty() && keyStorePwd.isEmpty() && pkcs12ImportFile.isEmpty()) {    keyStoreFileName="defaults/freeworldKeystore";    keyStorePwd="freeworld";    sb.setConfig("keyStore",keyStoreFileName);    sb.setConfig("keyStorePassword",keyStorePwd);  }  if (pkcs12ImportFile.length() > 0) {    ConcurrentLog.info("SERVER","Import certificates from import file '" + pkcs12ImportFile + "'.");    try {      final String pkcs12ImportPwd=sb.getConfig("pkcs12ImportPwd","").trim();      final PKCS12Tool pkcsTool=new PKCS12Tool(pkcs12ImportFile,pkcs12ImportPwd);      if (keyStoreFileName.isEmpty()) {        keyStoreFileName="DATA/SETTINGS/myPeerKeystore";        final KeyStore ks=KeyStore.getInstance("JKS");        ks.load(null,keyStorePwd.toCharArray());        final FileOutputStream ksOut=new FileOutputStream(keyStoreFileName);        ks.store(ksOut,keyStorePwd.toCharArray());        ksOut.close();        sb.setConfig("keyStore",keyStoreFileName);      }      pkcsTool.importToJKS(keyStoreFileName,keyStorePwd);      sb.setConfig("pkcs12ImportFile","");      sb.setConfig("keyStorePassword","");    } catch (    final Exception e) {      ConcurrentLog.severe("SERVER","Unable to import certificate from import file '" + pkcs12ImportFile + "'.",e);    }  } else   if (keyStoreFileName.isEmpty())   return null;  try {    ConcurrentLog.info("SERVER","Initializing SSL support ...");    if (ConcurrentLog.isFine("SERVER"))     ConcurrentLog.fine("SERVER","Initializing keystore ...");    final KeyStore ks=KeyStore.getInstance("JKS");    if (ConcurrentLog.isFine("SERVER"))     ConcurrentLog.fine("SERVER","Loading keystore file " + keyStoreFileName);    final FileInputStream stream=new FileInputStream(keyStoreFileName);    ks.load(stream,keyStorePwd.toCharArray());    stream.close();    if (ConcurrentLog.isFine("SERVER"))     ConcurrentLog.fine("SERVER","Initializing key manager factory ...");    final KeyManagerFactory kmf=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());    kmf.init(ks,keyStorePwd.toCharArray());    if (ConcurrentLog.isFine("SERVER"))     ConcurrentLog.fine("SERVER","Initializing SSL context ...");    final SSLContext sslcontext=SSLContext.getInstance("TLS");    sslcontext.init(kmf.getKeyManagers(),null,null);    return sslcontext;  } catch (  final Exception e) {    final String errorMsg="FATAL ERROR: Unable to initialize the SSL Socket factory. " + e.getMessage();    ConcurrentLog.severe("SERVER",errorMsg);    System.out.println(errorMsg);    return null;  }}  }
class C{  public boolean terminate(){  if (log == null)   log=CLogger.getCLogger(getClass());  if (isOpen()) {    m_state=STATE_Terminated;    log.info("terminating ...");    return true;  }  String msg="terminate failed: Not Open (" + getState() + ")";  if (m_throwException)   throw new IllegalStateException(msg);  log.warning(msg);  return false;}  }
class C{  @Override public void perform(IR ir){  if (SSE2_FULL) {    return;  }  PhysicalRegisterSet phys=(PhysicalRegisterSet)ir.regpool.getPhysicalRegisterSet();  for (Enumeration<BasicBlock> b=ir.getBasicBlocks(); b.hasMoreElements(); ) {    BasicBlock bb=b.nextElement();    if (bb instanceof ExceptionHandlerBasicBlock) {      for (int i=0; i < NUM_ALLOCATABLE_FPR; i++) {        Register fpr=phys.getFPR(i);        bb.prependInstruction(MIR_UnaryNoRes.create(DUMMY_USE,IRTools.D(fpr)));        bb.prependInstruction(MIR_Nullary.create(DUMMY_DEF,IRTools.D(fpr)));      }    }    int fpStackOffset=0;    for (Enumeration<Instruction> inst=bb.forwardInstrEnumerator(); inst.hasMoreElements(); ) {      Instruction s=inst.nextElement();      if (s.operator().isFpPop()) {        Register fpr=phys.getFPR(NUM_ALLOCATABLE_FPR - fpStackOffset);        s.insertAfter(MIR_UnaryNoRes.create(DUMMY_USE,IRTools.D(fpr)));        fpStackOffset--;      } else       if (s.operator().isFpPush()) {        fpStackOffset++;        Register fpr=phys.getFPR(NUM_ALLOCATABLE_FPR - fpStackOffset);        s.insertBefore(MIR_Nullary.create(DUMMY_DEF,IRTools.D(fpr)));      }      if (VM.VerifyAssertions)       VM._assert(fpStackOffset >= 0);      if (VM.VerifyAssertions) {        VM._assert(fpStackOffset < NUM_ALLOCATABLE_FPR);      }    }  }}  }
class C{  private void createTree(int numTokens,long[] count,byte[] binary,int[] parentNode) throws InterruptedException {  int min1i;  int min2i;  int pos1=numTokens - 1;  int pos2=numTokens;  for (int a=0; a < numTokens - 1; a++) {    if (pos1 >= 0) {      if (count[pos1] < count[pos2]) {        min1i=pos1;        pos1--;      } else {        min1i=pos2;        pos2++;      }    } else {      min1i=pos2;      pos2++;    }    if (pos1 >= 0) {      if (count[pos1] < count[pos2]) {        min2i=pos1;        pos1--;      } else {        min2i=pos2;        pos2++;      }    } else {      min2i=pos2;      pos2++;    }    int newNodeIdx=numTokens + a;    count[newNodeIdx]=count[min1i] + count[min2i];    parentNode[min1i]=newNodeIdx;    parentNode[min2i]=newNodeIdx;    binary[min2i]=1;    if (a % 1_000 == 0) {      if (Thread.currentThread().isInterrupted())       throw new InterruptedException("Interrupted while encoding huffman tree");      listener.update(Stage.CREATE_HUFFMAN_ENCODING,(0.5 * a) / numTokens);    }  }}  }
class C{  public boolean equals(XMLString anObject){  return m_str.equals(anObject.toString());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.711 -0400",hash_original_method="FD0D5D22615AC7853E0B6C93B9E217EA",hash_generated_method="4E080F4EA3D4D9809C54BD628B1E45C3") private E xfer(E e,boolean haveData,int how,long nanos){  if (haveData && (e == null))   throw new NullPointerException();  Node s=null;  retry:   for (; ; ) {    for (Node h=head, p=h; p != null; ) {      boolean isData=p.isData;      Object item=p.item;      if (item != p && (item != null) == isData) {        if (isData == haveData)         break;        if (p.casItem(item,e)) {          for (Node q=p; q != h; ) {            Node n=q.next;            if (head == h && casHead(h,n == null ? q : n)) {              h.forgetNext();              break;            }            if ((h=head) == null || (q=h.next) == null || !q.isMatched())             break;          }          LockSupport.unpark(p.waiter);          return LinkedTransferQueue.<E>cast(item);        }      }      Node n=p.next;      p=(p != n) ? n : (h=head);    }    if (how != NOW) {      if (s == null)       s=new Node(e,haveData);      Node pred=tryAppend(s,haveData);      if (pred == null)       continue retry;      if (how != ASYNC)       return awaitMatch(s,pred,e,(how == TIMED),nanos);    }    return e;  }}  }
class C{  public static final double labelCardinality(Instances D,int L){  double sum=0.0;  double numInstances=(double)D.numInstances();  for (int i=0; i < D.numInstances(); i++) {    for (int j=0; j < L; j++) {      if (!D.instance(i).isMissing(j)) {        sum+=D.instance(i).value(j);      }    }  }  return (double)sum / numInstances;}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader="";  int row, col;  double rowYCoord, value, z;  int progress=0;  double cellSizeX, cellSizeY;  int rows, topRow, bottomRow;  int cols;  int inputRow, inputCol;  double inputX, inputY;  double east;  double west;  double north;  double south;  BoundingBox box;  double[][] geometry;  int numPoints, numParts, i, part, numEdges;  int stCol, endCol;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime;  boolean foundIntersection;  ArrayList<Integer> edgeList=new ArrayList<>();  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  String[] inputFiles=inputFilesString.split(";");  int numFiles=inputFiles.length;  String clipFile=args[1];  if (inputFilesString.isEmpty() || numFiles < 1) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    long heapSize=Runtime.getRuntime().totalMemory();    int flushSize=(int)(heapSize / 32);    int j, numCellsToWrite;    PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<>(flushSize);    ShapeFile clip=new ShapeFile(clipFile);    BoundingBox clipBox=new BoundingBox();    clipBox.setMaxX(clip.getxMax());    clipBox.setMaxY(clip.getyMax());    clipBox.setMinX(clip.getxMin());    clipBox.setMinY(clip.getyMin());    if (clip.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("The input shapefile must be of a 'polygon' data type.");      return;    }    ArrayList<RecordInfo> myList=new ArrayList<>();    for (    ShapeFileRecord record : clip.records) {      i=record.getRecordNumber();      box=getBoundingBoxFromShapefileRecord(record);      myList.add(new RecordInfo(box.getMaxY(),i));    }    Collections.sort(myList);    for (int k=0; k < numFiles; k++) {      WhiteboxRaster input=new WhiteboxRaster(inputFiles[k],"r");      outputHeader=inputFiles[k].replace(".dep","_erased.dep");      double noData=input.getNoDataValue();      DataType dataType=input.getDataType();      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputFiles[k],dataType,noData);      rows=input.getNumberRows();      cols=input.getNumberColumns();      double[] data;      for (row=0; row < rows; row++) {        data=input.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(row,col,data[col]);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      pq.clear();      RowPriorityGridCell cell;      int numRecords=clip.getNumberOfRecords();      int count=0;      int progressCount=(int)(numRecords / 100.0);      if (progressCount <= 0) {        progressCount=1;      }      ShapeFileRecord record;      for (      RecordInfo ri : myList) {        record=clip.getRecord(ri.recNumber - 1);        geometry=getXYFromShapefileRecord(record);        numPoints=geometry.length;        numParts=partData.length;        for (part=0; part < numParts; part++) {          if (!partHoleData[part]) {            box=new BoundingBox();            startingPointInPart=partData[part];            if (part < numParts - 1) {              endingPointInPart=partData[part + 1];            } else {              endingPointInPart=numPoints;            }            for (i=startingPointInPart; i < endingPointInPart; i++) {              if (geometry[i][1] < box.getMinY()) {                box.setMinY(geometry[i][1]);              }              if (geometry[i][1] > box.getMaxY()) {                box.setMaxY(geometry[i][1]);              }            }            topRow=output.getRowFromYCoordinate(box.getMaxY());            bottomRow=output.getRowFromYCoordinate(box.getMinY());            for (row=topRow; row <= bottomRow; row++) {              edgeList.clear();              foundIntersection=false;              rowYCoord=output.getYCoordinateFromRow(row);              for (i=startingPointInPart; i < endingPointInPart - 1; i++) {                if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  if (y2 != y1) {                    x1=geometry[i][0];                    x2=geometry[i + 1][0];                    xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                    edgeList.add(output.getColumnFromXCoordinate(xPrime));                    foundIntersection=true;                  }                }              }              if (foundIntersection) {                numEdges=edgeList.size();                if (numEdges == 2) {                  stCol=Math.min(edgeList.get(0),edgeList.get(1));                  endCol=Math.max(edgeList.get(0),edgeList.get(1));                  for (col=stCol; col <= endCol; col++) {                    pq.add(new RowPriorityGridCell(row,col,noData));                  }                } else {                  Integer[] edgeArray=new Integer[numEdges];                  edgeList.toArray(edgeArray);                  Arrays.sort(edgeArray);                  boolean fillFlag=true;                  for (i=0; i < numEdges - 1; i++) {                    stCol=edgeArray[i];                    endCol=edgeArray[i + 1];                    if (fillFlag) {                      for (col=stCol; col <= endCol; col++) {                        pq.add(new RowPriorityGridCell(row,col,noData));                      }                    }                    fillFlag=!fillFlag;                  }                }              }            }          }        }        for (part=0; part < numParts; part++) {          if (partHoleData[part]) {            box=new BoundingBox();            startingPointInPart=partData[part];            if (part < numParts - 1) {              endingPointInPart=partData[part + 1];            } else {              endingPointInPart=numPoints;            }            for (i=startingPointInPart; i < endingPointInPart; i++) {              if (geometry[i][1] < box.getMinY()) {                box.setMinY(geometry[i][1]);              }              if (geometry[i][1] > box.getMaxY()) {                box.setMaxY(geometry[i][1]);              }            }            topRow=output.getRowFromYCoordinate(box.getMaxY());            bottomRow=output.getRowFromYCoordinate(box.getMinY());            for (row=topRow; row <= bottomRow; row++) {              edgeList.clear();              foundIntersection=false;              rowYCoord=output.getYCoordinateFromRow(row);              for (i=startingPointInPart; i < endingPointInPart - 1; i++) {                if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  if (y2 != y1) {                    x1=geometry[i][0];                    x2=geometry[i + 1][0];                    xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                    edgeList.add(output.getColumnFromXCoordinate(xPrime));                    foundIntersection=true;                  }                }              }              if (foundIntersection) {                numEdges=edgeList.size();                if (numEdges == 2) {                  stCol=Math.min(edgeList.get(0),edgeList.get(1));                  endCol=Math.max(edgeList.get(0),edgeList.get(1));                  for (col=stCol; col <= endCol; col++) {                    pq.add(new RowPriorityGridCell(row,col,input.getValue(row,col)));                  }                } else {                  Integer[] edgeArray=new Integer[numEdges];                  edgeList.toArray(edgeArray);                  Arrays.sort(edgeArray);                  boolean fillFlag=true;                  for (i=0; i < numEdges - 1; i++) {                    stCol=edgeArray[i];                    endCol=edgeArray[i + 1];                    if (fillFlag) {                      for (col=stCol; col <= endCol; col++) {                        pq.add(new RowPriorityGridCell(row,col,input.getValue(row,col)));                      }                    }                    fillFlag=!fillFlag;                  }                }              }            }          }        }        if (pq.size() >= flushSize) {          j=0;          numCellsToWrite=pq.size();          do {            cell=pq.poll();            output.setValue(cell.row,cell.col,cell.z);            j++;            if (j % 1000 == 0) {              if (cancelOp) {                cancelOperation();                return;              }              updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));            }          } while (pq.size() > 0);        }        if (cancelOp) {          cancelOperation();          return;        }        count++;        if (count % progressCount == 0) {          progress++;          updateProgress(progress);        }      }      j=0;      numCellsToWrite=pq.size();      if (numCellsToWrite > 0) {        do {          cell=pq.poll();          output.setValue(cell.row,cell.col,cell.z);          j++;          if (j % 1000 == 0) {            if (cancelOp) {              cancelOperation();              return;            }            updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));          }        } while (pq.size() > 0);      }      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.flush();      output.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case R.id.action_switch_user:    startActivity(new Intent(getApplicationContext(),UserSelectionActivity.class));  return true;case R.id.action_about:startActivity(new Intent(getApplicationContext(),AboutActivity.class));return true;case R.id.action_settings:startActivity(new Intent(getApplicationContext(),SettingsActivity.class));return true;case 0:Intent i=new Intent(getApplicationContext(),FilePickerActivity.class);startActivityForResult(i,CODE_FILEPICKER);default :return super.onOptionsItemSelected(item);}}  }
class C{  public void addAttribute(String attr){  if (_attributes == null) {    _attributes=new StringSet();  }  _attributes.add(attr);}  }
class C{  static void debug(int level,String line){  if ((selectedDebugLevel & level) != 0) {    System.out.println(DEBUG_HEADER + line);  }}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof CDATANode) {    if (TextHelper.ignorableWhitespace(((CDATANode)child).content)) {      return;    } else {      throw new FXGException(child.getStartLine(),child.getStartColumn(),"InvalidRichTextContent");    }  } else {    super.addChild(child);    contiguous=false;    return;  }}  }
class C{  public void deal(CardCollection that,int n){  for (int i=0; i < n; i++) {    Card card=popCard();    that.addCard(card);  }}  }
class C{  public ForceDirectedLayout(String group,ForceSimulator fsim,boolean enforceBounds){  this(group,fsim,enforceBounds,false);}  }
class C{  private static char CallNonvirtualCharMethodA(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualCharMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Char,true);  return Reflection.unwrapChar(returnObj);}  }
class C{  public void prerender(Renderer renderer,Viewshed viewshed){  cull();  viewshed.doPrerender(renderer);  uncull();}  }
class C{  public void addScanResult(String uri,String method,String flags,boolean skipped){  SpiderScanResult result=new SpiderScanResult(uri,method,flags,!skipped);synchronized (scanResults) {    scanResults.add(result);    try {      fireTableRowsInserted(scanResults.size() - 1,scanResults.size() - 1);    } catch (    IndexOutOfBoundsException e) {    }  }}  }
class C{  protected PersistenceController controller(){  return ctrl;}  }
class C{  public PortUnreachableException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  private void clearComponents(){  guiComponents.clear();  workspace.clearWorkspace();}  }
class C{  public static String format(final double value,final int decimalPlaces){  final DecimalFormat formatter=getDecimalFormat(decimalPlaces);  return formatter.format(value);}  }
class C{  public static String decrypt(final String password,String base64EncodedCipherText) throws GeneralSecurityException {  try {    final SecretKeySpec key=generateKey(password);    byte[] decodedCipherText=Base64.decode(base64EncodedCipherText,Base64.NO_WRAP);    byte[] decryptedBytes=decrypt(key,ivBytes,decodedCipherText);    String message=new String(decryptedBytes,CHARSET);    return message;  } catch (  UnsupportedEncodingException e) {    throw new GeneralSecurityException(e);  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    int oldProgress=-1;    int progress;    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,(double)Math.ceil(z1));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public Joiner join(Class<? extends DataObject> clazz,String alias,String field,Object... value){  Joiner j=new Joiner(getDbClient()).join(clazz,alias);  if (value.length == 1) {    j.match(field,value[0]);  } else {    j.match(field,Arrays.asList(value));  }  return j;}  }
class C{  public void error(SAXParseException e) throws SAXException {  throw e;}  }
class C{  @Override public boolean isHighlighted(){  return this.highlighted;}  }
class C{  public static final MediaFormat createSubtitleFormat(String title,String language){  MediaFormat format=new MediaFormat();  format.setString(KEY_TITLE,title);  format.setString(KEY_LANGUAGE,language);  return format;}  }
class C{  public void visitEdge(IGraphEntity n1,IGraphEntity n2,String label){  String k1=getKey(n1);  String k2=getKey(n2);  EdgePair ep=new EdgePair(k1,k2);  ep.label(label);  edges.append(ep);}  }
class C{  public void clearSelection(){  List<Integer> selection=getSelectedItems();  selectedItems.clear();  for (  Integer i : selection) {    notifyItemChanged(i);  }}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:46.639 -0500",hash_original_method="81B0DFE29130C0DF55A1485815BBFE58",hash_generated_method="2E4A91C77885F6A2D94903B9A8579026") @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    if (pos == count) {      return -1;    }    return buf[pos++];  }}  }
class C{  public SnackbarBuilder actionText(CharSequence actionText){  this.actionText=actionText;  return this;}  }
class C{  private Pair<HashStepType,HashChainType> fetchHashStep(String uri,HashChainType currentChain) throws Exception {  int hashIndex=uri.indexOf('#');  if (hashIndex < 0) {    throw new CodedException(X_MALFORMED_HASH_CHAIN,"Invalid hash step URI: %s",uri);  }  String baseUri=uri.substring(0,hashIndex);  String fragment=uri.substring(hashIndex + 1);  if (fragment.isEmpty()) {    throw new CodedException(X_MALFORMED_HASH_CHAIN,"Invalid hash step URI: %s",uri);  }  HashChainType hashChain;  if (baseUri.isEmpty()) {    hashChain=currentChain;  } else {    hashChain=getHashChain(baseUri);  }  for (  HashStepType step : hashChain.getHashStep()) {    if (fragment.equals(step.getId())) {      return new ImmutablePair<>(step,hashChain);    }  }  throw new CodedException(X_MALFORMED_HASH_CHAIN,"Invalid hash step URI: %s",uri);}  }
class C{  private static void encodeBinary(byte[] bytes,int startpos,int count,int startmode,StringBuilder sb){  if (count == 1 && startmode == TEXT_COMPACTION) {    sb.append((char)SHIFT_TO_BYTE);  }  int idx=startpos;  if (count >= 6) {    sb.append((char)LATCH_TO_BYTE);    char[] chars=new char[5];    while ((startpos + count - idx) >= 6) {      long t=0;      for (int i=0; i < 6; i++) {        t<<=8;        t+=bytes[idx + i] & 0xff;      }      for (int i=0; i < 5; i++) {        chars[i]=(char)(t % 900);        t/=900;      }      for (int i=chars.length - 1; i >= 0; i--) {        sb.append(chars[i]);      }      idx+=6;    }  }  if (idx < startpos + count) {    sb.append((char)LATCH_TO_BYTE_PADDED);  }  for (int i=idx; i < startpos + count; i++) {    int ch=bytes[i] & 0xff;    sb.append((char)ch);  }}  }
class C{  public void addDevice(IEspDevice device){  addDevice(device,UpgradeDevice.UPGRADE_TYPE_AUTO);}  }
class C{  @Override protected Instance process(Instance instance) throws Exception {  return (Instance)instance.copy();}  }
class C{  public TagDispatcherBuilder enableUnavailableNfcUserPrompt(boolean enableUnavailableNfcUserPrompt){  this.enableUnavailableNfcUserPrompt=enableUnavailableNfcUserPrompt;  return this;}  }
class C{  public char next(char c) throws JSONException {  char n=this.next();  if (n != c) {    throw this.syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  public static final void addMenuItem(String s,ActionListener l,JMenu m,boolean enable,int idx){  JMenuItem item=m instanceof SkinMenu ? new SkinMenuItem(s) : new JMenuItem(s);  item.addActionListener(l);  item.setEnabled(enable);  m.add(item,idx);}  }
class C{  private ChangeNotes createFromChangeOnlyWhenNoteDbDisabled(Change change) throws OrmException {  checkState(!args.migration.readChanges(),"do not call" + " createFromChangeWhenNoteDbDisabled when NoteDb is enabled");  return new ChangeNotes(args,change).load();}  }
class C{  public void beforeMessageWrite(AbstractSerialConnection port,ModbusMessage msg){}  }
class C{  public static String applicationVersionName(final Context context){  String versionName="";  try {    versionName=context.getPackageManager().getPackageInfo(context.getPackageName(),0).versionName;  } catch (  PackageManager.NameNotFoundException e) {    Log.d("CHCP","Can't get version name",e);  }  return versionName;}  }
class C{  public void deleteRow() throws SQLException {  throw new NotUpdatable();}  }
class C{  public static String isInputBitFree(int bitNum){  if ((bitNum < 1) || (bitNum > 1000)) {    log.error("illegal bit number in free bit test");    return ("");  }  jmri.Sensor s=null;  String sysName="";  sysName=makeSystemName("S",bitNum);  s=jmri.InstanceManager.sensorManagerInstance().getBySystemName(sysName);  if (s != null) {    return (sysName);  }  return ("");}  }
class C{  private void skip(){  do {    readBlock();  } while ((blockSize > 0) && !err());}  }
class C{  public static File removeParent(File parent,File file){  String absolutePath=file.getAbsolutePath();  String parentAbsolutePath=parent.getAbsolutePath();  String newPath=absolutePath.replace(parentAbsolutePath + "/","");  return new File(newPath);}  }
class C{  private void displayWarningIfEmptyCells(Synapse[][] weights){  String warningMessage="Only fully connected source-target pairs \n" + "are supported.  Some zeros in the matrix \n" + "correspond to non-existent weights and \n"+ "cannot be modified in the viewer.";  for (int i=0; i < weights.length; i++) {    for (int j=0; j < weights[0].length; j++) {      if (weights[i][j] == null) {        JOptionPane.showMessageDialog(null,warningMessage,"Weight Matrix Error",JOptionPane.WARNING_MESSAGE);        return;      }    }  }}  }
class C{  @NotNull public Couple<HgRevisionNumber> parents(@NotNull VirtualFile repo,@Nullable VirtualFile file,@Nullable HgRevisionNumber revision){  return parents(repo,ObjectsConvertor.VIRTUAL_FILEPATH.convert(file),revision);}  }
class C{  public static void updatePriceOptions(PricedParameter pricedParameter,PricedParameter ppWithNewValue){  for (  PricedOption existingPO : pricedParameter.getPricedOptionList()) {    updatePriceOption(ppWithNewValue,existingPO);  }}  }
class C{  public static SpanQuery spanNotQuery(SpanQuery include,SpanQuery exclude){  return spanQuery(new SpanNotQuery(include,exclude));}  }
class C{  public void markdown(final JSONObject article){  String content=article.optString(Article.ARTICLE_CONTENT);  final int articleType=article.optInt(Article.ARTICLE_TYPE);  if (Article.ARTICLE_TYPE_C_THOUGHT != articleType) {    content=Markdowns.toHTML(content);    content=Markdowns.clean(content,Latkes.getServePath() + article.optString(Article.ARTICLE_PERMALINK));  } else {    final Document.OutputSettings outputSettings=new Document.OutputSettings();    outputSettings.prettyPrint(false);    content=Jsoup.clean(content,Latkes.getServePath() + article.optString(Article.ARTICLE_PERMALINK),Whitelist.relaxed().addAttributes(":all","id","target","class").addTags("span","hr").addAttributes("iframe","src","width","height").addAttributes("audio","controls","src"),outputSettings);    content=content.replace("\n","\\n").replace("'","\\'").replace("\"","\\\"");  }  article.put(Article.ARTICLE_CONTENT,content);  if (article.optInt(Article.ARTICLE_REWARD_POINT) > 0) {    String rewardContent=article.optString(Article.ARTICLE_REWARD_CONTENT);    rewardContent=Markdowns.toHTML(rewardContent);    rewardContent=Markdowns.clean(rewardContent,Latkes.getServePath() + article.optString(Article.ARTICLE_PERMALINK));    article.put(Article.ARTICLE_REWARD_CONTENT,rewardContent);  }}  }
class C{  public static void deleteSubDirectories(Path... paths) throws IOException {  for (  Path path : paths) {    try (DirectoryStream<Path> stream=Files.newDirectoryStream(path)){      for (      Path subPath : stream) {        if (Files.isDirectory(subPath)) {          IOUtils.rm(subPath);        }      }    }   }}  }
class C{  protected void sequence_ArrayLiteral(ISerializationContext context,ArrayLiteral semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void appendOrInlineBind(AndORTree tree,StringBuilder sb) throws QueryException {  boolean skipBind=false;  int bindnum=tree.getNextBind();  ValueTypePair bval=tree.getValueArray().get(bindnum);  if (bval.getType() == ValueTypePair.TYPE_BOOLEAN) {    sb.append(bval.getBooleanValue() ? " true" : " false");    skipBind=true;  } else   if (bval.getType() == ValueTypePair.TYPE_NULL) {    sb.append(" null");    skipBind=true;  } else   if (bval.getType() == ValueTypePair.TYPE_STRING) {    String sval=bval.getStringValue();    if (sval != null)     if (sval.equals("true") || sval.equals("false") || sval.equals("null")) {      sb.append(" \"");      sb.append(sval);      sb.append("\"");      skipBind=true;    }  }  if (!skipBind)   appendBind(sb,bindnum); else   tree.removeBind(bindnum);}  }
class C{  public Convert convert(){  return convert;}  }
class C{  public void attrModified(Attr node,String oldv,String newv){  if (!changing) {    valid=false;  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public static String translateURItoJCEID(String algorithmURI){  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"Request for URI " + algorithmURI);  }  Algorithm algorithm=algorithmsMap.get(algorithmURI);  if (algorithm != null) {    return algorithm.jceName;  }  return null;}  }
class C{  public long count(){  return count.get();}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  String namespace=getName().getNamespace();  String handlerClass=sroot.getExtensionHandlerClass();  Object[] args={namespace,sroot};  ExtensionNamespaceSupport extNsSpt=new ExtensionNamespaceSupport(namespace,handlerClass,args);  sroot.getExtensionNamespacesManager().registerExtension(extNsSpt);  if (!(namespace.equals(Constants.S_EXSLT_FUNCTIONS_URL))) {    namespace=Constants.S_EXSLT_FUNCTIONS_URL;    args=new Object[]{namespace,sroot};    extNsSpt=new ExtensionNamespaceSupport(namespace,handlerClass,args);    sroot.getExtensionNamespacesManager().registerExtension(extNsSpt);  }}  }
class C{  public AbstractNaryOperator(final Expr... args){  this(Arrays.asList(args));}  }
class C{  @Override protected void launch(){  GUILauncher.launchFrame(new Experimenter(),"MEKA Experimenter",true);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public SystemLogHandler(PrintStream wrapped){  super(wrapped);  this.wrapped=wrapped;}  }
class C{  private Label resolve(Parameter parameter,LabelMap map) throws Exception {  String name=parameter.getName();  String path=parameter.getPath();  Label label=map.get(path);  if (label == null) {    return map.get(name);  }  return label;}  }
class C{  public final int hashCode(){  return super.hashCode();}  }
class C{  public void attachToMovingGrabPoint(OffsetGrabPoint gp){  gp.addGrabPoint(gpo);}  }
class C{  public TeXFormula(){  parser=new TeXParser("",this,false);}  }
class C{  private static int loadLogoFromManifest(Activity activity){  int logo=0;  try {    final String thisPackage=activity.getClass().getName();    if (DEBUG)     Log.i(TAG,"Parsing AndroidManifest.xml for " + thisPackage);    final String packageName=activity.getApplicationInfo().packageName;    final AssetManager am=activity.createPackageContext(packageName,0).getAssets();    final XmlResourceParser xml=am.openXmlResourceParser("AndroidManifest.xml");    int eventType=xml.getEventType();    while (eventType != XmlPullParser.END_DOCUMENT) {      if (eventType == XmlPullParser.START_TAG) {        String name=xml.getName();        if ("application".equals(name)) {          if (DEBUG)           Log.d(TAG,"Got <application>");          for (int i=xml.getAttributeCount() - 1; i >= 0; i--) {            if (DEBUG)             Log.d(TAG,xml.getAttributeName(i) + ": " + xml.getAttributeValue(i));            if ("logo".equals(xml.getAttributeName(i))) {              logo=xml.getAttributeResourceValue(i,0);              break;            }          }        } else         if ("activity".equals(name)) {          if (DEBUG)           Log.d(TAG,"Got <activity>");          Integer activityLogo=null;          String activityPackage=null;          boolean isOurActivity=false;          for (int i=xml.getAttributeCount() - 1; i >= 0; i--) {            if (DEBUG)             Log.d(TAG,xml.getAttributeName(i) + ": " + xml.getAttributeValue(i));            String attrName=xml.getAttributeName(i);            if ("logo".equals(attrName)) {              activityLogo=xml.getAttributeResourceValue(i,0);            } else             if ("name".equals(attrName)) {              activityPackage=ActionBarSherlockCompat.cleanActivityName(packageName,xml.getAttributeValue(i));              if (!thisPackage.equals(activityPackage)) {                break;              }              isOurActivity=true;            }            if ((activityLogo != null) && (activityPackage != null)) {              logo=activityLogo.intValue();            }          }          if (isOurActivity) {            break;          }        }      }      eventType=xml.nextToken();    }  } catch (  Exception e) {    e.printStackTrace();  }  if (DEBUG)   Log.i(TAG,"Returning " + Integer.toHexString(logo));  return logo;}  }
class C{  public T caseTransitionRoot(TransitionRoot object){  return null;}  }
class C{  public void addThread(Thread thread){synchronized (this) {    this.participatingThreads.add(thread);  }}  }
class C{  private void createComputeStates(AWSComputeEnumerationCreationSubStage next){  AWSComputeStateForCreation awsComputeState=new AWSComputeStateForCreation();  awsComputeState.instancesToBeCreated=this.aws.instancesToBeCreated;  awsComputeState.instancesToBeUpdated=this.aws.instancesToBeUpdated;  awsComputeState.computeStatesToBeUpdated=this.aws.computeStatesToBeUpdated;  awsComputeState.parentComputeLink=this.aws.parentCompute.documentSelfLink;  awsComputeState.resourcePoolLink=this.aws.computeEnumerationRequest.resourcePoolLink;  awsComputeState.parentTaskLink=this.aws.computeEnumerationRequest.taskReference;  awsComputeState.tenantLinks=this.aws.parentCompute.tenantLinks;  awsComputeState.parentAuth=this.aws.parentAuth;  awsComputeState.regionId=this.aws.parentCompute.description.regionId;  awsComputeState.vpcs=this.aws.vpcs;  this.service.sendRequest(Operation.createPatch(this.service,AWSComputeStateCreationAdapterService.SELF_LINK).setBody(awsComputeState).setCompletion(null));}  }
class C{  private void reservePort(int port){  if (mTemporaryConnection == null) {    try {      mTemporaryConnection=NetworkRessourceManager.createDatagramConnection();      mTemporaryConnection.open(port);    } catch (    IOException e) {      mTemporaryConnection=null;    }  }}  }
class C{  public static Column fromOrd(int i){  if ((i < 0) || (i >= Column.values().length)) {    throw new IndexOutOfBoundsException("Invalid ordinal");  }  return Column.values()[i];}  }
class C{  private static String deleteServiceSession(long subKey,String sessionId){  return createServiceProxy().deleteServiceSession(subKey,sessionId);}  }
class C{  private void doAcquireShared(long arg){  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          if (interrupted)           selfInterrupt();          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public VariableConfigResource(String configuration,TextResource baseResource){  this(baseResource);  for (  String configurationLine : configuration.split("\n|\r\n")) {    String[] configSplit=configurationLine.split("=");    addConfig(configSplit[0],configSplit[1]);  }}  }
class C{  public synchronized void addElement(E object){  if (elementCount == elementData.length) {    growByOne();  }  elementData[elementCount++]=object;  modCount++;}  }
class C{  private void dropArchTbls(String entidad) throws Exception {  String tableName;  if (_logger.isDebugEnabled())   _logger.debug("dropArchTbls");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    tableName=DaoUtil.getXNIdTblName(_tblPrefix);    DbTableFns.dropTable(dbConn,tableName);    tableName=DaoUtil.getFdrHdrTblName(_tblPrefix);    DbTableFns.dropTable(dbConn,tableName);    tableName=DaoUtil.getRelFldsTblName(_tblPrefix);    DbTableFns.dropTable(dbConn,tableName);    tableName=DaoUtil.getExtFldTblName(_tblPrefix);    DbTableFns.dropTable(dbConn,tableName);    tableName=DaoUtil.getDividerTblName(_tblPrefix);    DbTableFns.dropTable(dbConn,tableName);    tableName=tableName + "X";    DbTableFns.dropTable(dbConn,tableName);    tableName=DaoUtil.getDocumentTblName(_tblPrefix);    DbTableFns.dropTable(dbConn,tableName);    tableName=tableName + "X";    DbTableFns.dropTable(dbConn,tableName);    tableName=DaoUtil.getPageTblName(_tblPrefix);    DbTableFns.dropTable(dbConn,tableName);    tableName=tableName + "X";    DbTableFns.dropTable(dbConn,tableName);    try {      dropTxtMultTbl(dbConn);      dropIntMultTbl(dbConn);      dropDecMultTbl(dbConn);      dropDateMultTbl(dbConn);    } catch (    Exception e) {    } finally {      dbConn.close();    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public Property property(DateTimeFieldType type){  return new Property(this,indexOfSupported(type));}  }
class C{  private void retireCurrentFile() throws IOException {  Preconditions.checkState(currentFile.isPresent());  File fileToRoll=new File(currentFile.get().getFile().getAbsolutePath());  currentFile.get().getDeserializer().close();  if (fileToRoll.lastModified() == currentFile.get().getLastModified()) {    logger.info("File:{} has not been modified since being read.",fileToRoll.getName());  }  if (fileToRoll.length() == currentFile.get().getLength()) {    logger.info("File:{} has not changed size since being read.",fileToRoll.getName());  }  if (deletePolicy.equalsIgnoreCase(DeletePolicy.NEVER.name())) {    rollCurrentFile(fileToRoll);  } else   if (deletePolicy.equalsIgnoreCase(DeletePolicy.IMMEDIATE.name())) {    deleteCurrentFile(fileToRoll);  } else {    throw new IllegalArgumentException("Unsupported delete policy: " + deletePolicy);  }}  }
class C{  public String[] sentenceFinalPunctuationWords(){  return pennSFPunctWords;}  }
class C{  public void drawTitle(Canvas canvas,int x,int y,int width,Paint paint){  if (mRenderer.isShowLabels()) {    paint.setColor(mRenderer.getLabelsColor());    paint.setTextAlign(Component.CENTER);    paint.setTextSize(mRenderer.getChartTitleTextSize());    drawString(canvas,mRenderer.getChartTitle(),x + width / 2,y + mRenderer.getChartTitleTextSize(),paint);  }}  }
class C{  public String completeIt(){  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!isApproved())   approveIt();  log.info(toString());  MInventoryLine[] lines=getLines(false);  for (  MInventoryLine line : lines) {    if (!line.isActive())     continue;    MProduct product=line.getProduct();    BigDecimal qtyDiff=line.getQtyInternalUse().negate();    if (qtyDiff.signum() == 0) {      qtyDiff=line.getQtyCount().subtract(line.getQtyBook());      if (qtyDiff.signum() == 0)       continue;    }    if (!isReversal())     checkMaterialPolicy(line,qtyDiff);    if (product != null && product.isStocked()) {      log.fine("Material Transaction");      MTransaction mtrx=null;      if (line.getM_AttributeSetInstance_ID() == 0 || qtyDiff.compareTo(Env.ZERO) == 0) {        MInventoryLineMA mas[]=MInventoryLineMA.get(getCtx(),line.getM_InventoryLine_ID(),get_TrxName());        for (int j=0; j < mas.length; j++) {          MInventoryLineMA ma=mas[j];          BigDecimal QtyMA=ma.getMovementQty();          BigDecimal QtyNew=QtyMA.add(qtyDiff);          log.fine("Diff=" + qtyDiff + " - Instance OnHand="+ QtyMA+ "->"+ QtyNew);          if (!MStorage.add(getCtx(),getM_Warehouse_ID(),line.getM_Locator_ID(),line.getM_Product_ID(),ma.getM_AttributeSetInstance_ID(),0,QtyMA.negate(),Env.ZERO,Env.ZERO,get_TrxName())) {            m_processMsg="Cannot correct Inventory (MA)";            return DocAction.STATUS_Invalid;          }          if (line.getQtyInternalUse().compareTo(Env.ZERO) == 0) {            MStorage storage=MStorage.get(getCtx(),line.getM_Locator_ID(),line.getM_Product_ID(),ma.getM_AttributeSetInstance_ID(),get_TrxName());            storage.setDateLastInventory(getMovementDate());            if (!storage.save(get_TrxName())) {              m_processMsg="Storage not updated(2)";              return DocAction.STATUS_Invalid;            }          }          String m_MovementType=null;          if (QtyMA.negate().compareTo(Env.ZERO) > 0)           m_MovementType=MTransaction.MOVEMENTTYPE_InventoryIn; else           m_MovementType=MTransaction.MOVEMENTTYPE_InventoryOut;          mtrx=new MTransaction(getCtx(),line.getAD_Org_ID(),m_MovementType,line.getM_Locator_ID(),line.getM_Product_ID(),ma.getM_AttributeSetInstance_ID(),QtyMA.negate(),getMovementDate(),get_TrxName());          mtrx.setM_InventoryLine_ID(line.getM_InventoryLine_ID());          if (!mtrx.save()) {            m_processMsg="Transaction not inserted(2)";            return DocAction.STATUS_Invalid;          }          qtyDiff=QtyNew;        }      }      if (mtrx == null) {        if (!MStorage.add(getCtx(),getM_Warehouse_ID(),line.getM_Locator_ID(),line.getM_Product_ID(),line.getM_AttributeSetInstance_ID(),0,qtyDiff,Env.ZERO,Env.ZERO,get_TrxName())) {          m_processMsg="Cannot correct Inventory (MA)";          return DocAction.STATUS_Invalid;        }        if (line.getQtyInternalUse().compareTo(Env.ZERO) == 0) {          MStorage storage=MStorage.get(getCtx(),line.getM_Locator_ID(),line.getM_Product_ID(),line.getM_AttributeSetInstance_ID(),get_TrxName());          storage.setDateLastInventory(getMovementDate());          if (!storage.save(get_TrxName())) {            m_processMsg="Storage not updated(2)";            return DocAction.STATUS_Invalid;          }        }        String m_MovementType=null;        if (qtyDiff.compareTo(Env.ZERO) > 0)         m_MovementType=MTransaction.MOVEMENTTYPE_InventoryIn; else         m_MovementType=MTransaction.MOVEMENTTYPE_InventoryOut;        mtrx=new MTransaction(getCtx(),line.getAD_Org_ID(),m_MovementType,line.getM_Locator_ID(),line.getM_Product_ID(),line.getM_AttributeSetInstance_ID(),qtyDiff,getMovementDate(),get_TrxName());        mtrx.setM_InventoryLine_ID(line.getM_InventoryLine_ID());        if (!mtrx.save()) {          m_processMsg="Transaction not inserted(2)";          return DocAction.STATUS_Invalid;        }      }    }  }  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    m_processMsg=valid;    return DocAction.STATUS_Invalid;  }  setDefiniteDocumentNo();  setProcessed(true);  setDocAction(DOCACTION_Close);  return DocAction.STATUS_Completed;}  }
class C{  public static OperatorInfoBubble displayPrecheckMissingMandatoryParameterWarning(final Operator op,final ParameterType param){  return displayPrecheckMissingMandatoryParameterWarning(op,param,true);}  }
class C{  public int onSameSide(Vec4 pa,Vec4 pb){  if (pa == null || pb == null) {    String message=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double da=this.distanceTo(pa);  double db=this.distanceTo(pb);  if (da < 0 && db < 0)   return -1;  if (da > 0 && db > 0)   return 1;  return 0;}  }
class C{  public CSSConditionalSelector(SimpleSelector s,Condition c){  simpleSelector=s;  condition=c;}  }
class C{  public DictItem updateDictItem(long dictItemId,long dictCollectionId,long dictVersionId,String itemCode,Map<Locale,String> itemNameMap,Map<Locale,String> itemDescriptionMap,long parentItemId,ServiceContext serviceContext) throws NoSuchDictItemException, SystemException, NoSuchDictVersionException {  DictItem dictItem=dictItemPersistence.findByPrimaryKey(dictItemId);  Date now=new Date();  String treeIndex=getTreeIndex(dictItemId,parentItemId);  dictItem.setCompanyId(serviceContext.getCompanyId());  dictItem.setCreateDate(now);  dictItem.setDictCollectionId(dictCollectionId);  dictItem.setGroupId(serviceContext.getScopeGroupId());  dictItem.setIssueStatus(dictVersionId > 0 ? PortletConstants.DRAFTING : PortletConstants.INUSE);  dictItem.setItemCode(itemCode);  dictItem.setItemNameMap(itemNameMap);  dictItem.setItemDescriptionMap(itemDescriptionMap);  dictItem.setModifiedDate(now);  dictItem.setParentItemId(parentItemId);  dictItem.setTreeIndex(treeIndex);  dictItem.setUserId(serviceContext.getUserId());  dictItem.setDictVersionId(dictVersionId);  return dictItemPersistence.update(dictItem);}  }
class C{  public static void main(String[] args){  Integer[] intArray={2,3,2,5,6,1,-2,3,14,12};  Double[] doubleArray={3.4,1.3,-22.1,14.8,6.0,2.3,12.2};  Character[] charArray={'a','J','r'};  String[] stringArray={"Tom","Susan","Kim"};  quickSort(intArray);  quickSort(doubleArray);  quickSort(charArray);  quickSort(stringArray);  printList(intArray);  printList(doubleArray);  printList(charArray);  printList(stringArray);  GeometricObject[] list={new Circle(5),new Rectangle(4,5),new Circle(5.5),new Rectangle(2.4,5),new Circle(0.5),new Rectangle(4,65),new Circle(4.5),new Rectangle(4.4,1),new Circle(6.5),new Rectangle(4,5)};  quickSort(list,new GeometricObjectComparator());  printList(list);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:42.299 -0500",hash_original_method="5F5378C3BB7399B364C8BA4B56CD7FC5",hash_generated_method="1CD29E35223987FDA91B4E59C4B6D207") public URL findResource(String name){  for (  Element element : dexElements) {    URL url=element.findResource(name);    if (url != null) {      return url;    }  }  return null;}  }
class C{  public void replaceRange(String str,int start,int end){  if (end < start)   throw new IllegalArgumentException("end before start");  Document doc=getDocument();  if (doc != null) {    try {      undoManager.beginInternalAtomicEdit();      ((AbstractDocument)doc).replace(start,end - start,str,null);    } catch (    BadLocationException e) {      throw new IllegalArgumentException(e.getMessage());    } finally {      undoManager.endInternalAtomicEdit();    }  }}  }
class C{  public JCStatement Call(JCExpression apply){  return apply.type.hasTag(VOID) ? Exec(apply) : Return(apply);}  }
class C{  public void Write(OutputStream output) throws IOException {  BitUtils.WriteString(output,"GIF87a");  ScreenDescriptor sd=new ScreenDescriptor(width_,height_,numColors_);  sd.Write(output);  output.write(colors_,0,colors_.length);  ImageDescriptor id=new ImageDescriptor(width_,height_,',');  id.Write(output);  byte codesize=BitUtils.BitsNeeded(numColors_);  if (codesize == 1)   ++codesize;  output.write(codesize);  LZWCompressor.LZWCompress(output,codesize,pixels_);  output.write(0);  id=new ImageDescriptor((byte)0,(byte)0,';');  id.Write(output);  output.flush();}  }
class C{  public String toStringMatrix(){  StringBuffer result;  String[][] cells;  int i;  int n;  result=new StringBuffer();  cells=toArray();  for (i=0; i < cells.length; i++) {    for (n=0; n < cells[i].length; n++) {      if (n > 0)       result.append(",");      result.append(Utils.quote(cells[i][n]));    }    result.append("\n");  }  return result.toString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return SUCCESS;case 2:  return MSG;default :return null;}}  }
class C{  public String packageName(){  return mPackageName;}  }
class C{  public static void memcopy(Address dst,Address src,Extent cnt){  Address srcEnd=src.plus(cnt);  Address dstEnd=dst.plus(cnt);  boolean overlap=!srcEnd.LE(dst) && !dstEnd.LE(src);  if (overlap) {    SysCall.sysCall.sysMemmove(dst,src,cnt);  } else {    SysCall.sysCall.sysCopy(dst,src,cnt);  }}  }
class C{  static void checkSignedByte(final int value,final String msg){  if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {    throw new IllegalArgumentException(msg + " (must be a signed byte): " + value);  }}  }
class C{  public void cset(Register dst,ConditionFlag condition){  super.csinc(32,dst,zr,zr,condition.negate());}  }
class C{  public Request<User> current(){  final Invocation request=getWebTarget().request().accept(APPLICATION_JSON).buildGet();  return new SimpleRequest<User>(request,DefaultUser.class,getAuthenticationManager());}  }
class C{  public void finalStatistics(final EvolutionState state,final int result){  for (int x=0; x < children.length; x++)   children[x].finalStatistics(state,result);}  }
class C{  protected void removeVertex(ControlPointMarker vertexToRemove){  ExtrudedPolygon polygon=this.getPolygon();  ArrayList<LatLon> locations=new ArrayList<LatLon>(this.controlPoints.size() - 1);  for (  LatLon latLon : polygon.getOuterBoundary()) {    locations.add(latLon);  }  locations.remove(vertexToRemove.getIndex());  polygon.setOuterBoundary(locations);}  }
class C{  public void normal(float nx,float ny,float nz){  g.normal(nx,ny,nz);}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,e));}  }
class C{  public List<String> reset(List<String> replace){  ArrayList<String> copy=new ArrayList<String>(retainedVars.size());  copy.addAll(retainedVars);  retainedVars.clear();  if (replace != null) {    retainedVars.addAll(replace);  }  return copy;}  }
class C{  public NewCSharplikeResourceAction(String title,String description,SVGResource svgIcon,DialogFactory dialogFactory,CoreLocalizationConstant coreLocalizationConstant,EventBus eventBus,AppContext appContext,NotificationManager notificationManager){  super(title,description,svgIcon,dialogFactory,coreLocalizationConstant,eventBus,appContext,notificationManager);  this.appContext=appContext;}  }
class C{  @Deprecated public RegionFactory(String regionAttributesId) throws CacheWriterException, RegionExistsException, TimeoutException {  this((GemFireCacheImpl)new CacheFactory().create(),regionAttributesId);}  }
class C{  public boolean isCached(long time_nanos,long bytes){  return bytes * 1000000000 / (time_nanos + 1) >= threshold;}  }
class C{  public static boolean rectWithinPoly(final double rMinX,final double rMinY,final double rMaxX,final double rMaxY,final double[] shapeX,final double[] shapeY,final double sMinX,final double sMinY,final double sMaxX,final double sMaxY){  return !(rectCrossesPoly(rMinX,rMinY,rMaxX,rMaxY,shapeX,shapeY,sMinX,sMinY,sMaxX,sMaxY) || !pointInPolygon(shapeX,shapeY,rMinY,rMinX) || !pointInPolygon(shapeX,shapeY,rMinY,rMaxX)|| !pointInPolygon(shapeX,shapeY,rMaxY,rMaxX)|| !pointInPolygon(shapeX,shapeY,rMaxY,rMinX));}  }
class C{  public Boolean isIPFilter(){  return ipFilter;}  }
class C{  public void testConstrChar(){  char value[]={'-','1','2','3','8','0','.','4','7','3','8','E','-','4','2','3'};  BigDecimal result=new BigDecimal(value);  String res="-1.23804738E-419";  int resScale=427;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());  try {    new BigDecimal(new char[]{});    fail("NumberFormatException has not been thrown");  } catch (  NumberFormatException e) {  }}  }
class C{  public void connect(String eventSourceUrl) throws IOException {  LOG.entering(CLASS_NAME,"connect",eventSourceUrl);  if (stream != null) {    LOG.warning("Reusing the same event source for a differnt URL, please create a new EventSource object");    throw new IllegalArgumentException("Reusing the same event source for a differnt URL, please create a new EventSource object");  }  stream=new SseEventStream(eventSourceUrl);  stream.setListener(eventStreamListener);  stream.connect();}  }
class C{  protected boolean isLocked(){  return locked;}  }
class C{  public RequestSpec<T_Response> timeout(final int timeout){  this.timeout=timeout;  return this;}  }
class C{  private boolean isSelectionCommented(ISelection selection){  if (!(selection instanceof ITextSelection))   return false;  ITextSelection textSelection=(ITextSelection)selection;  if (textSelection.getStartLine() < 0 || textSelection.getEndLine() < 0)   return false;  IDocument document=getTextEditor().getDocumentProvider().getDocument(getTextEditor().getEditorInput());  try {    IRegion block=getTextBlockFromSelection(textSelection,document);    ITypedRegion[] regions=TextUtilities.computePartitioning(document,fDocumentPartitioning,block.getOffset(),block.getLength(),false);    int[] lines=new int[regions.length * 2];    for (int i=0, j=0; i < regions.length; i++, j+=2) {      lines[j]=getFirstCompleteLineOfRegion(regions[i],document);      int length=regions[i].getLength();      int offset=regions[i].getOffset() + length;      if (length > 0)       offset--;      lines[j + 1]=(lines[j] == -1 ? -1 : document.getLineOfOffset(offset));    }    for (int i=0, j=0; i < regions.length; i++, j+=2) {      String[] prefixes=fPrefixesMap.get(regions[i].getType());      if (prefixes != null && prefixes.length > 0 && lines[j] >= 0 && lines[j + 1] >= 0)       if (!isBlockCommented(lines[j],lines[j + 1],prefixes,document))       return false;    }    return true;  } catch (  BadLocationException x) {    LangCore.logError("Unexpected error.",x);  }  return false;}  }
class C{  @Override public void close() throws IOException {}  }
class C{  private int createGLCategory(String Name,String CategoryType,boolean isDefault){  MGLCategory cat=new MGLCategory(m_ctx,0,m_trx.getTrxName());  cat.setName(Name);  cat.setCategoryType(CategoryType);  cat.setIsDefault(isDefault);  if (!cat.save()) {    log.log(Level.SEVERE,"GL Category NOT created - " + Name);    return 0;  }  return cat.getGL_Category_ID();}  }
class C{  @Override public boolean othersUpdatesAreVisible(int type){  debugCodeCall("othersUpdatesAreVisible",type);  return false;}  }
class C{  public void landscapeChanged(final QuadTree quadTree){  for (int i=0; i < getNumberOfChildren(); ++i) {    final Spatial child=getChild(i);    if (child instanceof Landmark) {      ((Landmark)child).updateElevation(quadTree);    }  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public void onTick(EntityLivingBase player){}  }
class C{  public void encodeHeader(final RTMP rtmp,final Header header,final Header lastHeader,final IoBuffer buf){  final byte headerType=getHeaderType(rtmp,header,lastHeader);  RTMPUtils.encodeHeaderByte(buf,headerType,header.getChannelId());  final int timer;switch (headerType) {case HEADER_NEW:    timer=header.getTimer();  if (timer < 0 || timer >= 0xffffff) {    RTMPUtils.writeMediumInt(buf,0xffffff);  } else {    RTMPUtils.writeMediumInt(buf,timer);  }RTMPUtils.writeMediumInt(buf,header.getSize());buf.put(header.getDataType());RTMPUtils.writeReverseInt(buf,header.getStreamId());if (timer < 0 || timer >= 0xffffff) {buf.putInt(timer);}header.setTimerBase(timer);header.setTimerDelta(0);rtmp.setLastFullTimestampWritten(header.getChannelId(),timer);break;case HEADER_SAME_SOURCE:timer=(int)RTMPUtils.diffTimestamps(header.getTimer(),lastHeader.getTimer());if (timer < 0 || timer >= 0xffffff) {RTMPUtils.writeMediumInt(buf,0xffffff);} else {RTMPUtils.writeMediumInt(buf,timer);}RTMPUtils.writeMediumInt(buf,header.getSize());buf.put(header.getDataType());if (timer < 0 || timer >= 0xffffff) {buf.putInt(timer);}header.setTimerBase(header.getTimer() - timer);header.setTimerDelta(timer);break;case HEADER_TIMER_CHANGE:timer=(int)RTMPUtils.diffTimestamps(header.getTimer(),lastHeader.getTimer());if (timer < 0 || timer >= 0xffffff) {RTMPUtils.writeMediumInt(buf,0xffffff);buf.putInt(timer);} else {RTMPUtils.writeMediumInt(buf,timer);}header.setTimerBase(header.getTimer() - timer);header.setTimerDelta(timer);break;case HEADER_CONTINUE:timer=(int)RTMPUtils.diffTimestamps(header.getTimer(),lastHeader.getTimer());header.setTimerBase(header.getTimer() - timer);header.setTimerDelta(timer);break;default :break;}}  }
class C{  public List<PatternFormatter> patternFormatters(){  return subresources().patternFormatters();}  }
class C{  public void addExtension(String oid,boolean critical,byte[] value){  this.addExtension(new DERObjectIdentifier(oid),critical,value);}  }
class C{  @Override public void onAction(final ActionType at){  if (isReleased()) {    return;  }switch (at) {case INSPECT:    showWindow();  break;case OPEN:if (!entity.isOpen()) {  requestOpen=true;}at.send(at.fillTargetInfo(entity));break;case CLOSE:at.send(at.fillTargetInfo(entity));break;default :super.onAction(at);break;}}  }
class C{  public void add(Long value){  if (value == null) {    addNull();  } else {    _add(numberNode(value.longValue()));  }}  }
class C{  public String write(Byte value){  return value.toString();}  }
class C{  public DeadEvent(Object source,Object event){  this.source=source;  this.event=event;}  }
class C{  private static XmlAttribute toXmlAttribute(String name,Value value,String get,String set,SimplyAttribute[] attributes,Class<?>[] classes){  XmlAttribute xmlAttribute=new XmlAttribute();  xmlAttribute.name=name;  xmlAttribute.get=get;  xmlAttribute.set=set;  if (!isNull(value)) {    String targetName=value.getName();    if (!isNull(targetName) && (!isEmpty(targetName) || DEFAULT_FIELD_VALUE.equals(targetName)))     xmlAttribute.value=new XmlTargetAttribute(getValue(targetName,name));  }  if (!isEmpty(attributes)) {    xmlAttribute.attributes=new ArrayList<XmlTargetAttribute>();    for (    SimplyAttribute attribute : attributes)     xmlAttribute.attributes.add(new XmlTargetAttribute(getValue(attribute.getName(),name),attribute.getGet(),attribute.getSet()));  }  if (!isEmpty(classes)) {    xmlAttribute.classes=new ArrayList<XmlTargetClass>();    for (    Class<?> clazz : classes)     xmlAttribute.classes.add(new XmlTargetClass(clazz.getName()));  }  return xmlAttribute;}  }
class C{  public MarkovChain(IterableFile lines){  createStarterEntries();  addFile(lines);}  }
class C{  public void send(DNSOutgoing out) throws IOException {  if (!out.isEmpty()) {    final InetAddress addr;    final int port;    if (out.getDestination() != null) {      addr=out.getDestination().getAddress();      port=out.getDestination().getPort();    } else {      addr=_group;      port=DNSConstants.MDNS_PORT;    }    byte[] message=out.data();    final DatagramPacket packet=new DatagramPacket(message,message.length,addr,port);    if (logger.isLoggable(Level.FINEST)) {      try {        final DNSIncoming msg=new DNSIncoming(packet);        if (logger.isLoggable(Level.FINEST)) {          logger.finest("send(" + this.getName() + ") JmDNS out:"+ msg.print(true));        }      } catch (      final IOException e) {        logger.throwing(getClass().toString(),"send(" + this.getName() + ") - JmDNS can not parse what it sends!!!",e);      }    }    final MulticastSocket ms=_socket;    if (ms != null && !ms.isClosed()) {      ms.send(packet);    }  }}  }
class C{  protected void error(int line,int column,String msg) throws LexerException {  if (listener != null)   listener.handleError(source,line,column,msg); else   throw new LexerException("Error at " + line + ":"+ column+ ": "+ msg);}  }
class C{  public static void assertNoException(Runnable expression,String errorMessage){  if (verbose) {    log("assertNoException(" + expression + ", "+ errorMessage+ ")");  }  try {    expression.run();  } catch (  RuntimeException failure) {    TestUtils.fail(errorMessage);  }}  }
class C{  public GridClientStripedLock(int concurrencyLevel){  locks=new Lock[concurrencyLevel];  for (int i=0; i < concurrencyLevel; i++)   locks[i]=new ReentrantLock();}  }
class C{  @NamespacePermission(fields="#businessObjectDefinitionKey.namespace",permissions=NamespacePermissionEnum.WRITE) @Override public BusinessObjectDefinition deleteBusinessObjectDefinition(BusinessObjectDefinitionKey businessObjectDefinitionKey){  businessObjectDefinitionHelper.validateBusinessObjectDefinitionKey(businessObjectDefinitionKey);  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=businessObjectDefinitionDaoHelper.getBusinessObjectDefinitionEntity(businessObjectDefinitionKey);  businessObjectDefinitionDao.delete(businessObjectDefinitionEntity);  return createBusinessObjectDefinitionFromEntity(businessObjectDefinitionEntity);}  }
class C{  static public void assertFalse(boolean condition){  assertFalse(null,condition);}  }
class C{  @Override public void refresh(){}  }
class C{  public QuotaNotFoundException(){}  }
class C{  public static void cacheReset(String tableName,int Record_ID){  log.config("TableName=" + tableName + ", Record_ID="+ Record_ID);  CacheMgt.get().reset(tableName,Record_ID);}  }
class C{  protected <T extends SpatialComparable>void strPartition(List<T> objs,int start,int end,int depth,int dims,int maxEntries,SpatialSingleMeanComparator c,List<List<T>> ret){  final int p=(int)Math.ceil((end - start) / (double)maxEntries);  double[] mm=new double[dims * 2];  for (int d=0; d < mm.length; d+=2) {    mm[d]=Double.POSITIVE_INFINITY;    mm[d + 1]=Double.NEGATIVE_INFINITY;  }  for (int i=start; i < end; i++) {    T o=objs.get(i);    for (int d1=0, d2=0; d2 < mm.length; d1++, d2+=2) {      mm[d2]=Math.min(mm[d2],o.getMin(d1));      mm[d2 + 1]=Math.max(mm[d2 + 1],o.getMax(d1));    }  }  double maxex=0.0;  int sdim=-1;  for (int d=0; d < mm.length; d+=2) {    final double extend=mm[d + 1] - mm[d];    if (extend > maxex) {      maxex=extend;      sdim=d >> 1;    }  }  final int s=(int)Math.ceil(Math.pow(p,1.0 / (dims - depth)));  final double len=end - start;  for (int i=0; i < s; i++) {    int s2=start + (int)((i * len) / s);    int e2=start + (int)(((i + 1) * len) / s);    if (e2 < end) {      c.setDimension(sdim);      QuickSelect.quickSelect(objs,c,s2,end,e2);    }    if (depth + 1 == dims) {      ret.add(objs.subList(s2,e2));    } else {      strPartition(objs,s2,e2,depth + 1,dims,maxEntries,c,ret);    }  }}  }
class C{  public boolean isInstanceAttribute(){  Object oo=get_Value(COLUMNNAME_IsInstanceAttribute);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public SQLIntegrityConstraintViolationException(Throwable cause){  super(cause);}  }
class C{  public void addPoint(Vector3 point1,Vector3 controlPoint,Vector3 point2){  mPoint1=point1;  mControlPoint=controlPoint;  mPoint2=point2;}  }
class C{  public boolean terminateCall(BluetoothDevice device,int index){  if (DBG)   log("terminateCall()");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.terminateCall(device,index);    } catch (    RemoteException e) {      Log.e(TAG,Log.getStackTraceString(new Throwable()));    }  }  if (mService == null)   Log.w(TAG,"Proxy not attached to service");  return false;}  }
class C{  protected void notifyClickListenersAboutClick(int item){  for (  OnWheelClickedListener listener : clickingListeners) {    listener.onItemClicked(this,item);  }}  }
class C{  public ItemStack build(){  return this.itemStack.clone();}  }
class C{  private static void onServiceDestroyed(){  assert sInstance != null;  assert sInstance.mService != null;  clear();  sInstance.mNotificationBuilder=null;  sInstance.mService=null;}  }
class C{  public static String save(){  return ESC + "[s";}  }
class C{  public static String decodeURLString(String stringToDecode){  try {    boolean isEncoded=true;    if (!stringToDecode.contains("%")) {      isEncoded=false;    } else {      int percentPosition=stringToDecode.indexOf('%');      if (percentPosition > -1) {        int nextCharacterPosition=percentPosition + 1;        int nextNextCharacterPosition=nextCharacterPosition + 1;        if (nextCharacterPosition >= stringToDecode.length() || nextNextCharacterPosition >= stringToDecode.length()) {          isEncoded=false;        } else {          String nextCharacter=stringToDecode.substring(nextCharacterPosition,nextCharacterPosition + 1).toLowerCase();          String nextNextCharacter=stringToDecode.substring(nextNextCharacterPosition,nextNextCharacterPosition + 1).toLowerCase();          if (!VALID_HEX_CHARACTERS.contains(nextCharacter) || !VALID_HEX_CHARACTERS.contains(nextNextCharacter)) {            isEncoded=false;          }        }      }    }    if (!isEncoded) {      return stringToDecode;    }    stringToDecode=stringToDecode.replace(ENCODED_SPACE_CHARACTER,"+");    return java.net.URLDecoder.decode(stringToDecode,"UTF-8");  } catch (  UnsupportedEncodingException e) {    throw new WalletLoadException("Could not decode string '" + stringToDecode + "'",e);  }}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:21.666 -0500",hash_original_method="C12D207E9524D7914DF3EC77CD8084EB",hash_generated_method="5528C0BA65E2BB16E317EC9B9A132B8D") public final TextImpl minimize(){  if (getLength() == 0) {    parent.removeChild(this);    return null;  }  Node previous=getPreviousSibling();  if (previous == null || previous.getNodeType() != Node.TEXT_NODE) {    return this;  }  TextImpl previousText=(TextImpl)previous;  previousText.buffer.append(buffer);  parent.removeChild(this);  return previousText;}  }
class C{  public void clear(){  length=0;}  }
class C{  public static synchronized boolean isWindows(){  if (m_IsWindows == null)   m_IsWindows=System.getProperty("os.name").toLowerCase().contains("windows");  return m_IsWindows;}  }
class C{  public PI addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void prune(){  Iterator<Neuron> reaper=neuronList.iterator();  while (reaper.hasNext()) {    Neuron n=reaper.next();    if (n.getFanIn().size() == 0 && n.getFanOut().size() == 0) {      reaper.remove();    }  }}  }
class C{  public static <T extends Tree>T enclosingOfClass(final TreePath path,final Class<T> treeClass){  TreePath p=path;  while (p != null) {    Tree leaf=p.getLeaf();    if (treeClass.isInstance(leaf)) {      return treeClass.cast(leaf);    }    p=p.getParentPath();  }  return null;}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public void storeNode(Element parent,CatalogTreeNode node){  if (log.isDebugEnabled()) {    log.debug("storeNode " + node.toString() + ", has "+ node.getLeaves().size()+ " leaves.");  }  Element element=new Element("node");  element.setAttribute("nodeName",node.toString());  List<CatalogTreeLeaf> leaves=node.getLeaves();  for (int i=0; i < leaves.size(); i++) {    Element el=new Element("leaf");    CatalogTreeLeaf leaf=leaves.get(i);    el.setAttribute("name",leaf.getName());    el.setAttribute("path",leaf.getPath());    element.addContent(el);  }  parent.addContent(element);  @SuppressWarnings("unchecked") Enumeration<CatalogTreeNode> e=node.children();  while (e.hasMoreElements()) {    CatalogTreeNode n=e.nextElement();    storeNode(element,n);  }}  }
class C{  public static final String decode(String s,String enc) throws MalformedURLException, UnsupportedEncodingException {  try {    return URLDecoder.decode(s,enc);  } catch (  IllegalArgumentException iae) {    MalformedURLException mue=new MalformedURLException("Invalid URI encoding: " + s);    mue.initCause(iae);    throw mue;  }}  }
class C{  public boolean this_edges(){  return soot.PhaseOptions.getBoolean(options,"this-edges");}  }
class C{  static void deleteFolder(File fileOrDirectory){  File[] children=fileOrDirectory.listFiles();  if (children != null) {    for (    File child : children) {      deleteFolder(child);    }  }  if (!fileOrDirectory.delete()) {    throw new RuntimeException("Unable to delete " + (fileOrDirectory.isDirectory() ? "directory " : "file ") + fileOrDirectory.getAbsolutePath());  }}  }
class C{  public void input(Object inputText,Network network){  if (!isEnabled()) {    return;  }  ChatEvent message=(ChatEvent)inputText;  String text=message.getMessage();  String user=message.getNick();  if (checkSpam(user,text)) {    return;  }  text=trimSpecialChars(text);  TextStream stream=new TextStream(text);  List<String> targetUsers=new ArrayList<String>();  String firstWord=stream.nextWord();  if (firstWord == null) {    return;  }  String firstWordLower=firstWord.toLowerCase();  if (getUsers().contains(firstWord) || getUserNicks().containsKey(firstWordLower)) {    if (getUsers().contains(firstWord)) {      targetUsers.add(firstWord);    } else {      targetUsers.add(getUserNicks().get(firstWordLower));    }    if (!stream.atEnd()) {      stream.next();    }    stream.skipWhitespace();    if (!stream.atEnd()) {      text=stream.upToEnd();    }  }  if (targetUsers.isEmpty() && (text.indexOf(':') != -1)) {    stream.reset();    firstWord=stream.upTo(':');    firstWordLower=firstWord.toLowerCase();    stream.skip();    if (getUsers().contains(firstWord) || getUserNicks().containsKey(firstWordLower)) {      if (getUsers().contains(firstWord)) {        targetUsers.add(firstWord);      } else {        targetUsers.add(getUserNicks().get(firstWordLower));      }      if (!stream.atEnd()) {        stream.next();      }      stream.skipWhitespace();      if (!stream.atEnd()) {        text=stream.upToEnd();      }    }  }  if (targetUsers.isEmpty()) {    for (    String possibleUser : this.lastUsers) {      if ((possibleUser.length() > 2) && text.indexOf(possibleUser) != -1) {        targetUsers.add(possibleUser);        if (text.indexOf(possibleUser) == 0 && (text.length() > (possibleUser.length() + 1))) {          text=text.substring(possibleUser.length() + 1,text.length());        }      }      String trimmedPossibleUser=trimUserName(possibleUser);      if ((trimmedPossibleUser.length() > 2) && text.indexOf(trimmedPossibleUser) != -1) {        targetUsers.add(possibleUser);        if (text.indexOf(trimmedPossibleUser) == 0 && (text.length() > (trimmedPossibleUser.length() + 1))) {          text=text.substring(trimmedPossibleUser.length() + 1,text.length());        }      }    }    if (text.indexOf(getNick()) != -1) {      targetUsers.add(getNick());      if (text.indexOf(getNick()) == 0 && (text.length() > (getNick().length() + 1))) {        text=text.substring(getNick().length() + 1,text.length());      }    }    String trimmedNick=trimUserName(getNick());    if (text.indexOf(trimmedNick) != -1) {      targetUsers.add(getNick());      if (text.indexOf(trimmedNick) == 0 && (text.length() > (trimmedNick.length() + 1))) {        text=text.substring(trimmedNick.length() + 1,text.length());      }    }    if (targetUsers.isEmpty()) {      targetUsers.addAll(this.lastUsers);    }    if (getUsers().size() == 2) {      targetUsers.clear();      targetUsers.add(getNick());    }  }  inputSentence(text.trim(),user,targetUsers,message.isWhisper(),network);  addLastUser(user);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:41.489 -0400",hash_original_method="4212B981A7928D4D7AA2EA1CD67BEA53",hash_generated_method="6A6BAA1E92C2AA4A5401DD35F7F05625") public SupportMenuInflater(Context context){  super(context);  mContext=context;  mRealOwner=context;  mActionViewConstructorArguments=new Object[]{context};  mActionProviderConstructorArguments=mActionViewConstructorArguments;}  }
class C{  public void reset(){  m_state[0]=0x67452301;  m_state[1]=0xefcdab89;  m_state[2]=0x98badcfe;  m_state[3]=0x10325476;  m_state[4]=0xc3d2e1f0;  m_lCount=0;  m_digestBits=new byte[20];  m_nBlockIndex=0;}  }
class C{  public FocusEvent(Component source,int id){  this(source,id,false);}  }
class C{  public static void meterFromString(OFFlowMod.Builder fmb,String inst,Logger log){  if (inst == null || inst.isEmpty()) {    return;  }  if (fmb.getVersion().compareTo(OFVersion.OF_13) < 0) {    log.error("Goto Meter Instruction not supported in OpenFlow 1.0, 1.1, or 1.2");    return;  }  OFInstructionMeter.Builder ib=OFFactories.getFactory(fmb.getVersion()).instructions().buildMeter();  if (inst.startsWith("0x")) {    ib.setMeterId(Long.valueOf(inst.replaceFirst("0x",""),16));  } else {    ib.setMeterId(Long.valueOf(inst));  }  log.debug("Appending (Goto)Meter instruction: {}",ib.build());  appendInstruction(fmb,ib.build());  log.debug("All instructions after append: {}",fmb.getInstructions());}  }
class C{  public boolean isSameNode(Node other){  return this == other;}  }
class C{  @Override public final boolean onCreate(){  database=new DatabaseImpl(getContext());  return true;}  }
class C{  public NPrism(int sides,double radius,double height){  this(sides,0,radius,height);}  }
class C{  @Override public void onUpdateEmptyView(int size){  Log.d(TAG,"onUpdateEmptyView size=" + size);  FastScroller fastScroller=(FastScroller)findViewById(R.id.fast_scroller);  View emptyView=findViewById(R.id.empty_view);  TextView emptyText=(TextView)findViewById(R.id.empty_text);  emptyText.setText(getString(R.string.no_items));  if (size > 0) {    fastScroller.setVisibility(View.VISIBLE);    mRefreshHandler.removeMessages(2);    emptyView.setAlpha(0);  } else {    emptyView.setAlpha(0);    mRefreshHandler.sendEmptyMessage(2);    fastScroller.setVisibility(View.GONE);  }  if (mAdapter != null && mAdapter.hasSearchText()) {    Snackbar.make(findViewById(R.id.main_view),"Filtered " + size + " items",Snackbar.LENGTH_SHORT).show();  }}  }
class C{  public VersionInfo(String version,String extension){  this.version=version;  this.extension=extension;}  }
class C{  protected boolean isKeepAliveChanged(){  return true;}  }
class C{  public static byte[] generateIv() throws GeneralSecurityException {  return randomBytes(IV_LENGTH_BYTES);}  }
class C{  public AddAgentAction(final OdorWorldPanel worldPanel){  super("Add Agent");  this.worldPanel=worldPanel;}  }
class C{  @Override public boolean markSupported(){  return false;}  }
class C{  public void mouseExited(MouseEvent e){}  }
class C{  public static double round(double d,int res){  BigDecimal bd=new BigDecimal(d).setScale(res,BigDecimal.ROUND_HALF_UP);  return bd.doubleValue();}  }
class C{  public void pause(Object target){  assert target != null : "target must be non nil";  tHashSelectorEntry element=hashForSelectors.get(target);  if (element != null)   element.paused=true;  tHashSelectorEntry elementUpdate=hashForUpdates.get(target);  if (elementUpdate != null) {    assert elementUpdate.target != null : "pauseTarget: unknown error";    elementUpdate.setPaused(true);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:41.568 -0500",hash_original_method="F9A1AE339D1E856A34C84852283E0CEC",hash_generated_method="4550DB6B0B89EFEC22ABA39ADEF6F9B3") public void parseNumbers(){  for (int i='0'; i <= '9'; i++) {    tokenTypes[i]|=TOKEN_DIGIT;  }  tokenTypes['.']|=TOKEN_DIGIT;  tokenTypes['-']|=TOKEN_DIGIT;}  }
class C{  private boolean Ambiguous(String id){  int i=0;  boolean found=false;  while (i < symtab.size()) {    SymTabEntry se=(SymTabEntry)symtab.elementAt(i);    if (se.useThis.equals(id)) {      if (!found)       found=true; else       return true;    }    i=i + 1;  }  return false;}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.467 -0500",hash_original_method="210CE6920B09DE82954A1910A2E05BDA",hash_generated_method="4EBA47DCA070071028BBC47A17DF202A") public Intent putExtra(String name,long value){  mExtras.put(name,value);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.803 -0500",hash_original_method="8E628C9261C64BEE296D97D919DD4FB9",hash_generated_method="8E628C9261C64BEE296D97D919DD4FB9") Worker(Runnable firstTask){  this.firstTask=firstTask;  this.thread=getThreadFactory().newThread(this);}  }
class C{  private boolean isBlockFlower(Block block,int meta){  return BeesRegistry.instance().isBlockFlower(block,meta);}  }
class C{  public int size(){  return parameters.size();}  }
class C{  public synchronized boolean cancelRequest(){  if (messageSent) {    return false;  }  try {    Message msg=Message.obtain();    msg.what=PermissiveHandler.CANCEL_REQUEST;    messenger.send(msg);    messageSent=true;    return true;  } catch (  RemoteException e) {    if (DEBUG) {      Log.w(TAG,e);    }    return false;  }}  }
class C{  private static boolean isAssignable(final Type type,final Class<?> toClass){  if (type == null) {    return toClass == null || !toClass.isPrimitive();  }  if (toClass == null) {    return false;  }  if (toClass.equals(type)) {    return true;  }  if (type instanceof Class<?>) {    return ClassUtils.isAssignable((Class<?>)type,toClass);  }  if (type instanceof ParameterizedType) {    return isAssignable(getRawType((ParameterizedType)type),toClass);  }  if (type instanceof TypeVariable<?>) {    for (    final Type bound : ((TypeVariable<?>)type).getBounds()) {      if (isAssignable(bound,toClass)) {        return true;      }    }    return false;  }  if (type instanceof GenericArrayType) {    return toClass.equals(Object.class) || toClass.isArray() && isAssignable(((GenericArrayType)type).getGenericComponentType(),toClass.getComponentType());  }  if (type instanceof WildcardType) {    return false;  }  throw new IllegalStateException("found an unhandled type: " + type);}  }
class C{  public synchronized void createFile(JDBCSequentialFile file) throws SQLException {  try {    connection.setAutoCommit(false);    createFile.setString(1,file.getFileName());    createFile.setString(2,file.getExtension());    createFile.setBytes(3,new byte[0]);    createFile.executeUpdate();    try (ResultSet keys=createFile.getGeneratedKeys()){      keys.next();      file.setId(keys.getInt(1));    }     connection.commit();  } catch (  SQLException e) {    connection.rollback();    throw e;  }}  }
class C{  public static void main(String[] args){  ResultMatrix matrix;  int i;  int n;  matrix=new ResultMatrixHTML(3,3);  matrix.addHeader("header1","value1");  matrix.addHeader("header2","value2");  matrix.addHeader("header2","value3");  for (i=0; i < matrix.getRowCount(); i++) {    for (n=0; n < matrix.getColCount(); n++) {      matrix.setMean(n,i,(i + 1) * n);      matrix.setStdDev(n,i,((double)(i + 1) * n) / 100);      if (i == n) {        if (i % 2 == 1)         matrix.setSignificance(n,i,SIGNIFICANCE_WIN); else         matrix.setSignificance(n,i,SIGNIFICANCE_LOSS);      }    }  }  System.out.println("\n\n--> " + matrix.getDisplayName());  System.out.println("\n1. complete\n");  System.out.println(matrix.toStringHeader() + "\n");  System.out.println(matrix.toStringMatrix() + "\n");  System.out.println(matrix.toStringKey());  System.out.println("\n2. complete with std deviations\n");  matrix.setShowStdDev(true);  System.out.println(matrix.toStringMatrix());  System.out.println("\n3. cols numbered\n");  matrix.setPrintColNames(false);  System.out.println(matrix.toStringMatrix());  System.out.println("\n4. second col missing\n");  matrix.setColHidden(1,true);  System.out.println(matrix.toStringMatrix());  System.out.println("\n5. last row missing, rows numbered too\n");  matrix.setRowHidden(2,true);  matrix.setPrintRowNames(false);  System.out.println(matrix.toStringMatrix());  System.out.println("\n6. mean prec to 3\n");  matrix.setMeanPrec(3);  matrix.setPrintRowNames(false);  System.out.println(matrix.toStringMatrix());}  }
class C{  public boolean isAssignee(){  Account.Id currentAssignee=notes.getChange().getAssignee();  if (currentAssignee != null && getUser().isIdentifiedUser()) {    Account.Id id=getUser().getAccountId();    return id.equals(currentAssignee);  }  return false;}  }
class C{  public void layout(){  Layout layout=getLayout();  if (layout != null) {    layout.layout(this);  }}  }
class C{  @Override protected void complete(DbClient dbClient,Operation.Status status,ServiceCoded coded) throws DeviceControllerException {  for (  VolumeTaskCompleter volumeTaskCompleter : _volumeTaskCompleterMap.values()) {    volumeTaskCompleter.complete(dbClient,status,coded);  }  updateWorkflowStatus(status,coded);}  }
class C{  public int size(){  return data.size();}  }
class C{  @DSComment("movement of Intent is spec") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.350 -0500",hash_original_method="820997F7D9BF8A8B37DA5723F540EC8D",hash_generated_method="4CC0BD1A213F434B44B78EBB77DCCBE2") public boolean hasExtra(String name){  return mExtras != null && mExtras.containsKey(name);}  }
class C{  public static Builder with(Message message){  return withData(message.data).headers(message.headers);}  }
class C{  public JFXDialog(StackPane dialogContainer,Region content,DialogTransition transitionType,boolean overlayClose){  initialize();  setOverlayClose(overlayClose);  setContent(content);  setDialogContainer(dialogContainer);  this.transitionType.set(transitionType);  initChangeListeners();}  }
class C{  private void refreshCallDescription(){  if (null != mCall) {    mCallDescriptionTextView.setVisibility(View.VISIBLE);    Room room=mCall.getRoom();    String description;    if (null != room) {      description=VectorUtils.getCallingRoomDisplayName(getContext(),mCall.getSession(),room);    } else {      description=mCall.getCallId();    }    if (TextUtils.equals(mCall.getCallState(),IMXCall.CALL_STATE_CONNECTED) && !mIsCallStatusHidden) {      description+=" - " + getResources().getString(R.string.active_call);    }    mCallDescriptionTextView.setText(description);  } else {    mCallDescriptionTextView.setVisibility(View.GONE);  }}  }
class C{  public static boolean available(int port){  if (port < MIN_PORT_NUMBER || port > MAX_PORT_NUMBER) {    throw new IllegalArgumentException("Invalid start port: " + port);  }  ServerSocket ss=null;  DatagramSocket ds=null;  try {    ss=new ServerSocket(port);    ss.setReuseAddress(true);    ds=new DatagramSocket(port);    ds.setReuseAddress(true);    return true;  } catch (  IOException e) {  } finally {    if (ds != null) {      ds.close();    }    if (ss != null) {      try {        ss.close();      } catch (      IOException e) {      }    }  }  return false;}  }
class C{  public void run(){  runWorker(this);}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply m){  ((SerialListener)client).reply((SerialReply)m);}  }
class C{  protected void writeJump(String label,int code) throws IOException {  writeCode(code);  out.writeUI16(2);  int here=(int)out.getBytesWritten();  out.writeUI16(0);  if (jumps == null) {    jumps=new ArrayList();  }  jumps.add(new Object[]{label,new Integer(here)});}  }
class C{  public TermVectorsRequest payloads(boolean payloads){  setFlag(Flag.Payloads,payloads);  return this;}  }
class C{  private static int textCompaction(int[] codewords,int codeIndex,StringBuilder result){  int[] textCompactionData=new int[(codewords[0] - codeIndex) * 2];  int[] byteCompactionData=new int[(codewords[0] - codeIndex) * 2];  int index=0;  boolean end=false;  while ((codeIndex < codewords[0]) && !end) {    int code=codewords[codeIndex++];    if (code < TEXT_COMPACTION_MODE_LATCH) {      textCompactionData[index]=code / 30;      textCompactionData[index + 1]=code % 30;      index+=2;    } else {switch (code) {case TEXT_COMPACTION_MODE_LATCH:        textCompactionData[index++]=TEXT_COMPACTION_MODE_LATCH;      break;case BYTE_COMPACTION_MODE_LATCH:case BYTE_COMPACTION_MODE_LATCH_6:case NUMERIC_COMPACTION_MODE_LATCH:case BEGIN_MACRO_PDF417_CONTROL_BLOCK:case BEGIN_MACRO_PDF417_OPTIONAL_FIELD:case MACRO_PDF417_TERMINATOR:    codeIndex--;  end=true;break;case MODE_SHIFT_TO_BYTE_COMPACTION_MODE:textCompactionData[index]=MODE_SHIFT_TO_BYTE_COMPACTION_MODE;code=codewords[codeIndex++];byteCompactionData[index]=code;index++;break;}}}decodeTextCompaction(textCompactionData,byteCompactionData,index,result);return codeIndex;}  }
class C{  public void reset(){  this.hovered=null;  this.hoveredResizeDirection=null;  this.selected=null;  this.dragged=null;  this.resized=null;}  }
class C{  private void initProgram(){  glUseProgram(this.program);  viewProjMatrixUniform=glGetUniformLocation(this.program,"viewProjMatrix");  glUseProgram(0);}  }
class C{  public URL find(String classname){  String cname=classname.replace('.','/') + ".class";  ClassLoader cl=(ClassLoader)clref.get();  if (cl == null)   return null; else   return cl.getResource(cname);}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  temp.putInteger(adType);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  temp=new DerOutputStream();  temp.putOctetString(adData);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  return temp.toByteArray();}  }
class C{  public static Ignite grid(UUID locNodeId) throws IgniteIllegalStateException {  A.notNull(locNodeId,"locNodeId");  IgniteNamedInstance dfltGrid0=dfltGrid;  if (dfltGrid0 != null) {    IgniteKernal g=dfltGrid0.grid();    if (g != null && g.getLocalNodeId().equals(locNodeId))     return g;  }  for (  IgniteNamedInstance grid : grids.values()) {    IgniteKernal g=grid.grid();    if (g != null && g.getLocalNodeId().equals(locNodeId))     return g;  }  throw new IgniteIllegalStateException("Grid instance with given local node ID was not properly " + "started or was stopped: " + locNodeId);}  }
class C{  public int optInt(String key,int defaultValue){  try {    return this.getInt(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public Ray2D transform(TransformMatrix2D matrix){  Point2D startNew=matrix.multiply(start);  Vector2D directionNew=startNew.vec(matrix.multiply(start.add(direction)));  return new Ray2D(startNew,directionNew);}  }
class C{  void quit(){  logger.log("Download dispatcher quit");  quit=true;  interrupt();}  }
class C{  public void add(JavaProject project,int includeMask,HashSet projectsToBeAdded) throws JavaModelException {  add(project,null,includeMask,projectsToBeAdded,new HashSet(2),null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:55.340 -0500",hash_original_method="812B8FA1D533EE1EF3FF794B2C641F6A",hash_generated_method="89C99F37789F7E7DC8FA54962F0D8B6B") public void addComment(String comment){  if (_comments == null) {    _comments=new ArrayList();  }  _comments.add(comment);}  }
class C{  public ReadOnlyValuesRaba(final int fromIndex,final int toIndex,final int capacity,final byte[][] a){  super(fromIndex,toIndex,capacity,a);}  }
class C{  public void reset(){  setIteration(0);}  }
class C{  public DateTick(Date date,String label,TextAnchor textAnchor,TextAnchor rotationAnchor,double angle){  this(TickType.MAJOR,date,label,textAnchor,rotationAnchor,angle);}  }
class C{  public EqualsMethodAsserter method(String name,Class<?> parameterTypes[],Object... values){  if (parameterTypes.length != values.length) {    throw new IllegalArgumentException("Number of parameter types must match number of values.");  }  try {    Method method=clazz.getMethod(name,parameterTypes);    methods.add(method);    methodValues.add(values);  } catch (  Exception e) {    throw new RuntimeException(e);  }  return this;}  }
class C{  public String locatorStatus(File directory){  return ManagerInfo.getLocatorStatusCodeString(directory);}  }
class C{  protected void countDistanceComputation(){  if (distcalc != null) {    distcalc.increment();  }}  }
class C{  public boolean isList_1(){  return list_1;}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_STATUS_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}"+ "/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}"+ "/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}/businessObjectDataVersions/{businessObjectDataVersion}",method=RequestMethod.PUT) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_STATUS_PUT) public BusinessObjectDataStatusUpdateResponse updateBusinessObjectDataStatus(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("subPartition1Value") String subPartition1Value,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@RequestBody BusinessObjectDataStatusUpdateRequest request){  BusinessObjectDataStatusUpdateResponse businessObjectDataStatusUpdateResponse=businessObjectDataStatusService.updateBusinessObjectDataStatus(new BusinessObjectDataKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,Arrays.asList(subPartition1Value),businessObjectDataVersion),request);  notificationEventService.processBusinessObjectDataNotificationEventAsync(NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_STTS_CHG,businessObjectDataStatusUpdateResponse.getBusinessObjectDataKey(),businessObjectDataStatusUpdateResponse.getStatus(),businessObjectDataStatusUpdateResponse.getPreviousStatus());  return businessObjectDataStatusUpdateResponse;}  }
class C{  public CStepOverHotkeyAction(final JFrame parent,final ZyGraph graph,final IFrontEndDebuggerProvider panel){  Preconditions.checkNotNull(panel,"IE01656: Panel argument can not be null");  m_parent=parent;  m_graph=graph;  m_debugPerspectiveModel=panel;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  protected void engineInit(int opmode,Key key,AlgorithmParameterSpec params,SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {  core.init(opmode,key,params,random);}  }
class C{  public ViewExpiredException(){  super();}  }
class C{  public Rest sslPemUTF8(final String pemFileContents){  this.sslPemUTF8=pemFileContents;  return this;}  }
class C{  public static void appendLong(AbstractStringBuilder sb,long l){  convertLong(sb,l);}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  if (!e.isShutdown()) {    r.run();  }}  }
class C{  public static Archive createArchiveFld(){  return (Archive)new ArchiveFldImpl();}  }
class C{  public Task<VirtualDataCenterRestRep> reconnect(URI id){  return postTask(getReconnectUrl(),id);}  }
class C{  public static void executeApiTask(BlockService blockService,ExecutorService executorService,DbClient dbClient,VirtualArray varray,Project project,VirtualPool vpool,VirtualPoolCapabilityValuesWrapper capabilities,TaskList taskList,String task,BlockConsistencyGroup consistencyGroup,ArrayList<String> requestedTypes,VolumeCreate param,BlockServiceApi blockServiceImpl){  CreateVolumeSchedulingThread schedulingThread=new CreateVolumeSchedulingThread(blockService,varray,project,vpool,capabilities,taskList,task,consistencyGroup,requestedTypes,param,blockServiceImpl);  try {    executorService.execute(schedulingThread);  } catch (  Exception e) {    for (    TaskResourceRep taskObj : taskList.getTaskList()) {      String message="Failed to execute volume creation API task for resource " + taskObj.getResource().getId();      _log.error(message);      taskObj.setMessage(message);      Volume volume=dbClient.queryObject(Volume.class,taskObj.getResource().getId());      volume.setInactive(true);      dbClient.updateAndReindexObject(volume);    }  }}  }
class C{  public static void printTablePretty(final String tableName,final Configuration config,final boolean shouldAddCommonIterators,final IteratorSetting... settings) throws AccumuloException, AccumuloSecurityException, TableNotFoundException, IOException {  final Scanner scanner=AccumuloRyaUtils.getScanner(tableName,config,shouldAddCommonIterators);  for (  final IteratorSetting setting : settings) {    scanner.addScanIterator(setting);  }  final String format="| %-64s | %-24s | %-28s | %-20s | %-20s | %-10s |";  final int totalFormatLength=String.format(format,1,2,3,4,5,6).length();  final String instance=config.get(MRUtils.AC_INSTANCE_PROP);  log.info(StringUtils.rightPad("==================",totalFormatLength,"="));  log.info(StringUtils.rightPad("| TABLE: " + tableName + " INSTANCE: "+ instance,totalFormatLength - 1) + "|");  log.info(StringUtils.rightPad("------------------",totalFormatLength,"-"));  log.info(String.format(format,"--Row--","--ColumnVisibility--","--Timestamp--","--ColumnFamily--","--ColumnQualifier--","--Value--"));  log.info(StringUtils.rightPad("|-----------------",totalFormatLength - 1,"-") + "|");  for (  final Entry<Key,Value> entry : scanner) {    final Key k=entry.getKey();    final String rowString=Key.appendPrintableString(k.getRow().getBytes(),0,k.getRow().getLength(),Constants.MAX_DATA_TO_PRINT,new StringBuilder()).toString();    log.info(String.format(format,rowString,k.getColumnVisibility(),new Date(k.getTimestamp()),k.getColumnFamily(),k.getColumnQualifier(),entry.getValue()));  }  log.info(StringUtils.rightPad("==================",totalFormatLength,"="));}  }
class C{  public CygwinTerminal(InputStream terminalInput,OutputStream terminalOutput,Charset terminalCharset) throws IOException {  super(null,terminalInput,terminalOutput,terminalCharset,CtrlCBehaviour.TRAP);}  }
class C{  public void addSeries(final String title,final double[] values){  int cnt=1;  for (  double value : values) {    String category=(cnt > this.categories.length ? Integer.toString(cnt) : this.categories[cnt - 1]);    this.dataset.addValue(value,title,category);    cnt++;  }}  }
class C{  @Deprecated public void sendMessageToSharedNotebookMembers(String notebookGuid,String messageText,List<String> recipients,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"sendMessageToSharedNotebookMembers",mAuthenticationToken,notebookGuid,messageText,recipients);}  }
class C{  public static boolean deleteFiles(Context context,final String path,Handler handler,long mTotalFileNum){  boolean ret=true;  File f=new File(path);  if (!f.isDirectory()) {    ret=f.delete();    sendProgressMessage(handler,mTotalFileNum);    return ret;  }  Stack<File> stack=new Stack<File>();  Stack<File> stackDir=new Stack<File>();  stack.push(f);  stackDir.push(f);  while (!stack.isEmpty() && (null != (f=stack.pop()))) {    for (    File file : f.listFiles()) {      if (file.isDirectory()) {        stack.push(file);        stackDir.push(file);      } else {        ret=file.delete();        sendProgressMessage(handler,mTotalFileNum);      }      if (ret == false)       return false;    }  }  while (!stackDir.isEmpty() && (null != (f=stackDir.pop()))) {    ret=f.delete();    if (ret == false)     return false;  }  return ret;}  }
class C{  private void disconnect(){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  c.changeConnectionStatus(Connection.ConnectionStatus.DISCONNECTED);  String actionTaken=context.getString(R.string.toast_disconnected);  c.addAction(actionTaken);  Log.i(TAG,c.handle() + " disconnected.");  Intent intent=new Intent();  intent.setClassName(context,activityClass);  intent.putExtra("handle",clientHandle);}  }
class C{  public void newInstance(final Type type){  typeInsn(Opcodes.NEW,type);}  }
class C{  public synchronized boolean containsKey(Object key){  Entry[] tab=table;  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index]; e != null; e=e.next) {    if ((e.hash == hash) && e.key.equals(key)) {      return true;    }  }  return false;}  }
class C{  protected Heap createHeap(){  return new Heap();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element badElement;  doc=(Document)load("hc_staff",true);{    boolean success=false;    try {      badElement=doc.createElement("");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  private static Integer computeEglMaxTextureSize(){  EGLDisplay eglDisplay=EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);  int[] majorMinor=new int[2];  EGL14.eglInitialize(eglDisplay,majorMinor,0,majorMinor,1);  int[] configAttr={EGL14.EGL_COLOR_BUFFER_TYPE,EGL14.EGL_RGB_BUFFER,EGL14.EGL_LEVEL,0,EGL14.EGL_RENDERABLE_TYPE,EGL14.EGL_OPENGL_ES2_BIT,EGL14.EGL_SURFACE_TYPE,EGL14.EGL_PBUFFER_BIT,EGL14.EGL_NONE};  EGLConfig[] eglConfigs=new EGLConfig[1];  int[] configCount=new int[1];  EGL14.eglChooseConfig(eglDisplay,configAttr,0,eglConfigs,0,1,configCount,0);  if (configCount[0] == 0) {    Log.w(TAG,"No EGL configurations found!");    return null;  }  EGLConfig eglConfig=eglConfigs[0];  int[] eglSurfaceAttributes={EGL14.EGL_WIDTH,64,EGL14.EGL_HEIGHT,64,EGL14.EGL_NONE};  EGLSurface eglSurface=EGL14.eglCreatePbufferSurface(eglDisplay,eglConfig,eglSurfaceAttributes,0);  int[] eglContextAttributes={EGL14.EGL_CONTEXT_CLIENT_VERSION,2,EGL14.EGL_NONE};  EGLContext eglContext=EGL14.eglCreateContext(eglDisplay,eglConfig,EGL14.EGL_NO_CONTEXT,eglContextAttributes,0);  EGL14.eglMakeCurrent(eglDisplay,eglSurface,eglSurface,eglContext);  int[] maxSize=new int[1];  GLES20.glGetIntegerv(GLES20.GL_MAX_TEXTURE_SIZE,maxSize,0);  int result=maxSize[0];  EGL14.eglMakeCurrent(eglDisplay,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_CONTEXT);  EGL14.eglDestroySurface(eglDisplay,eglSurface);  EGL14.eglDestroyContext(eglDisplay,eglContext);  EGL14.eglTerminate(eglDisplay);  return result;}  }
class C{  static public HashSet<String> scanContentForDomains(HashSet<String> domains,CharSequence content){  HashSet<String> newDomains=new HashSet<String>();  HashSet<String> hosts=scanContentForHosts(content);  for (  String host : hosts) {    final String domain=domainFromHost(host);    if (null != domain) {      if (!domains.contains(domain)) {        newDomains.add(domain);      }    }  }  return newDomains;}  }
class C{  public static double pdf(double val,double rate){  if (val < 0.) {    return 0.;  }  return rate * Math.exp(-rate * val);}  }
class C{  public void startFragment(String fragmentClass,Bundle args){  Intent intent=new Intent(Intent.ACTION_MAIN);  intent.setClass(this,getClass());  intent.putExtra(EXTRA_SHOW_FRAGMENT,fragmentClass);  intent.putExtra(EXTRA_SHOW_FRAGMENT_ARGUMENTS,args);  startActivity(intent);}  }
class C{  public void methodWithWildCardParam(TypeParameters<? super String> a,TypeParameters<? extends StringBuffer> b,TypeParameters c){}  }
class C{  protected void addIfdData(IfdData data){  mIfdDatas[data.getId()]=data;}  }
class C{  @POST @Path("{guid}/traits") @Consumes({Servlets.JSON_MEDIA_TYPE,MediaType.APPLICATION_JSON}) @Produces(Servlets.JSON_MEDIA_TYPE) public Response addTrait(@Context HttpServletRequest request,@PathParam("guid") final String guid){  String traitDefinition=null;  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"EntityResource.addTrait(" + guid + ")");    }    traitDefinition=Servlets.getRequestPayload(request);    LOG.info("Adding trait={} for entity={} ",traitDefinition,guid);    metadataService.addTrait(guid,traitDefinition);    URI locationURI=getLocationURI(new ArrayList<String>(){{        add(guid);      }    });    JSONObject response=new JSONObject();    response.put(AtlasClient.REQUEST_ID,Servlets.getRequestId());    return Response.created(locationURI).entity(response).build();  } catch (  EntityNotFoundException|TypeNotFoundException e) {    LOG.error("An entity with GUID={} does not exist traitDef={} ",guid,traitDefinition,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.NOT_FOUND));  }catch (  AtlasException|IllegalArgumentException e) {    LOG.error("Unable to add trait for entity={} traitDef={}",guid,traitDefinition,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to add trait for entity={} traitDef={}",guid,traitDefinition,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  } finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  private TagLibFactory(String saxParser,TagLib lib,String systemTLD,Identification id) throws TagLibException {  this.id=id;  this.lib=lib == null ? new TagLib() : lib;  InputSource is=new InputSource(this.getClass().getResourceAsStream(systemTLD));  init(saxParser,is);  this.lib.setIsCore(true);}  }
class C{  @Override public void wakeUp() throws RemoteException {  device.wakeUp();}  }
class C{  public static String removeDotFromFileExtension(String fileExt){  String temFileExt=fileExt;  if (fileExt.charAt(0) == '.') {    temFileExt=fileExt.substring(1,fileExt.length());  }  return temFileExt;}  }
class C{  @SuppressWarnings("nls") protected void writeDict(Object... strs){  writeln("<<");  for (int i=0; i < strs.length; i+=2) {    writeln("/",strs[i]," ",strs[i + 1]);  }  writeln(">>");}  }
class C{  private boolean isDigit(char value){  return Character.isDigit(value);}  }
class C{  public static boolean isRequestToExternalTarget(String target){  boolean isInternalRequest=false;  if (target != null) {    isInternalRequest=target.contains("localhost") || target.contains("127.0.0.1");  }  return !isInternalRequest;}  }
class C{  void reportAuthenticated(long seq){  if ((seq & VALID_SEQ_MASK) != seq) {    throw new IllegalArgumentException("'seq' out of range");  }  if (seq <= latestConfirmedSeq) {    long diff=latestConfirmedSeq - seq;    if (diff < WINDOW_SIZE) {      bitmap|=(1L << diff);    }  } else {    long diff=seq - latestConfirmedSeq;    if (diff >= WINDOW_SIZE) {      bitmap=1;    } else {      bitmap<<=(int)diff;      bitmap|=1;    }    latestConfirmedSeq=seq;  }}  }
class C{  public Producer(SystemConfiguration config){  _configuration=config;  _producer=_createProducer();  _executorService=_createExecutorService();  _mapper=new ObjectMapper();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public CandleDataset(){  this.data=new ArrayList<IndicatorSeries>();}  }
class C{  public static String stringFor(int n){switch (n) {case CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK:    return "CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK";case CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES:  return "CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES";case CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES:return "CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES";case CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES:return "CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES";case CU_FUNC_ATTRIBUTE_NUM_REGS:return "CU_FUNC_ATTRIBUTE_NUM_REGS";case CU_FUNC_ATTRIBUTE_PTX_VERSION:return "CU_FUNC_ATTRIBUTE_PTX_VERSION";case CU_FUNC_ATTRIBUTE_BINARY_VERSION:return "CU_FUNC_ATTRIBUTE_BINARY_VERSION";}return "INVALID CUfunction_attribute: " + n;}  }
class C{  public static double logSumExp(double[] vals,double maxValue){  double expSum=0.0;  for (int i=0; i < vals.length; i++)   expSum+=exp(vals[i] - maxValue);  return maxValue + log(expSum);}  }
class C{  private void cleanupStagingDir(){  String yarnJobStagingDirectory=yarnConfig.getYarnJobStagingDirectory();  if (yarnJobStagingDirectory != null) {    JobContext context=new JobContext();    context.setAppStagingDir(new Path(yarnJobStagingDirectory));    FileSystem fs=null;    try {      fs=FileSystem.get(hConfig);    } catch (    IOException e) {      log.error("Unable to clean up file system: {}",e);      return;    }    if (fs != null) {      YarnJobUtil.cleanupStagingDir(context,fs);    }  }}  }
class C{  protected void mergeOntoGlobalState(final long revisionTime){  this.revisionTime=revisionTime;  final List<Callable<Void>> tasks=new LinkedList<Callable<Void>>();{    final Iterator<Map.Entry<String,ILocalBTreeView>> itr=indices.entrySet().iterator();    while (itr.hasNext()) {      final Map.Entry<String,ILocalBTreeView> entry=itr.next();      final String name=entry.getKey();      final IsolatedFusedView isolated=(IsolatedFusedView)entry.getValue();      tasks.add(new CheckpointIndexTask(name,isolated));    }  }  final List<Future<Void>> futures;  try {    futures=resourceManager.getLiveJournal().getExecutorService().invokeAll(tasks);  } catch (  InterruptedException ex) {    throw new RuntimeException(ex);  }  for (  Future<Void> f : futures) {    try {      f.get();    } catch (    InterruptedException e) {      throw new RuntimeException(e);    }catch (    ExecutionException e) {      throw new RuntimeException(e);    }  }}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  private boolean downField(EditorState editorState,MathContainer component){  if (component instanceof MathSequence) {    if (component.getParent() instanceof MathFunction) {      MathFunction function=(MathFunction)component.getParent();      int downIndex=function.getDownIndex(component.getParentIndex());      if (downIndex >= 0) {        editorState.setCurrentField(function.getArgument(downIndex));        editorState.setCurrentOffset(0);        return true;      }    }  }  if (component.getParent() != null) {    return downField(editorState,component.getParent());  }  return false;}  }
class C{  public TrackBuilder(int sizeX,int sizeZ){  this.sizeX=sizeX;  this.sizeZ=sizeZ;  buildList.add(new ArrayList<>());}  }
class C{  @Override public AccessToken refreshAccessToken() throws IOException {  GenericUrl tokenUrl=new GenericUrl(TOKEN_SERVER_ENCODED_URL);  HttpRequest request=transportFactory.create().createRequestFactory().buildGetRequest(tokenUrl);  JsonObjectParser parser=new JsonObjectParser(OAuth2Utils.JSON_FACTORY);  request.setParser(parser);  request.getHeaders().set("Metadata-Flavor","Google");  request.setThrowExceptionOnExecuteError(false);  HttpResponse response;  try {    response=request.execute();  } catch (  UnknownHostException exception) {    throw new IOException("ComputeEngineCredentials cannot find the metadata server. This is" + " likely because code is not running on Google Compute Engine.",exception);  }  int statusCode=response.getStatusCode();  if (statusCode == HttpStatusCodes.STATUS_CODE_NOT_FOUND) {    throw new IOException(String.format("Error code %s trying to get security access token from" + " Compute Engine metadata for the default service account. This may be because" + " the virtual machine instance does not have permission scopes specified.",statusCode));  }  if (statusCode != HttpStatusCodes.STATUS_CODE_OK) {    throw new IOException(String.format("Unexpected Error code %s trying to get security access" + " token from Compute Engine metadata for the default service account: %s",statusCode,response.parseAsString()));  }  InputStream content=response.getContent();  if (content == null) {    throw new IOException("Empty content from metadata token server request.");  }  GenericData responseData=response.parseAs(GenericData.class);  String accessToken=OAuth2Utils.validateString(responseData,"access_token",PARSE_ERROR_PREFIX);  int expiresInSeconds=OAuth2Utils.validateInt32(responseData,"expires_in",PARSE_ERROR_PREFIX);  long expiresAtMilliseconds=clock.currentTimeMillis() + expiresInSeconds * 1000;  return new AccessToken(accessToken,new Date(expiresAtMilliseconds));}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public static CircuitBreakerConfig.Builder custom(){  return new Builder();}  }
class C{  protected TStructMethodImpl(){  super();}  }
class C{  public String validatePut(String request,String content,String... tests) throws Exception {  String res=put(request,content);  return validateXPath(res,tests);}  }
class C{  public static void e(String tag,String s,Object... args){  if (LOG.ERROR >= LOGLEVEL)   Log.e(tag,String.format(s,args));}  }
class C{  public Task<VirtualDataCenterRestRep> update(URI id,VirtualDataCenterModifyParam input){  return putTask(input,getIdUrl(),id);}  }
class C{  private void doSelfValidationQuery() throws Throwable {  TermQuery tq=new TermQuery(new Term(ServiceDocument.FIELD_NAME_SELF_LINK,getSelfLink()));  ServiceDocumentQueryResult rsp=new ServiceDocumentQueryResult();  Operation op=Operation.createGet(getUri());  EnumSet<QueryOption> options=EnumSet.of(QueryOption.INCLUDE_ALL_VERSIONS);  IndexSearcher s=new IndexSearcher(DirectoryReader.open(this.writer,true,true));  queryIndex(op,options,s,tq,null,Integer.MAX_VALUE,0,null,rsp,null);}  }
class C{  public BulkUserImportException(String msg){  super(msg);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void run(int connId,String[] args){  IPlayer p=server.getGame().getPlayer(connId);  if (null == p) {    return;  }  for (  Entity ent : server.getGame().getEntitiesVector()) {    try {      if (ent.getOwnerId() == connId) {        server.sendServerChat(connId,ent.getId() + " - " + ent.getDisplayName());      }    } catch (    NumberFormatException nfe) {    }catch (    NullPointerException npe) {    }catch (    IndexOutOfBoundsException ioobe) {    }  }}  }
class C{  SSLSocketImpl(SSLContextImpl context,InetAddress host,int port,InetAddress localAddr,int localPort) throws IOException {  super();  init(context,false);  bind(new InetSocketAddress(localAddr,localPort));  SocketAddress socketAddress=new InetSocketAddress(host,port);  connect(socketAddress,0);}  }
class C{  @Override public void put(String name,byte value){  emulatedFields.put(name,value);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private boolean doAcquireSharedNanos(int arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return true;        }      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public OrientedResourceFactoryImpl(){  super();}  }
class C{  @Override public boolean containsKey(Object key){  if (key == null) {    key=NULL_OBJECT;  }  int index=findIndex(key,elementData);  return elementData[index] == key;}  }
class C{  private MetricsGroup parseMetricsGroupAttribute(XMLStreamReader reader){  int attrCount2=reader.getAttributeCount();  HashMap<String,String> pairs=new HashMap<String,String>(11);  for (int i=0; i < attrCount2; i++) {    String attrName=reader.getAttributeLocalName(i);    String attrValue=reader.getAttributeValue(i);    pairs.put(attrName,attrValue);  }  String name=pairs.get("name");  if (name == null || name.isEmpty())   return null;  name=name.trim().toUpperCase();  String sql=pairs.get("sql");  String singleRow=pairs.get("multipleMetricsPerRow");  String nameColumn=pairs.get("nameColumn");  String valueColumn=pairs.get("valueColumn");  String storeInCommonTable=pairs.get("storeInCommonTable");  String targetTable=pairs.get("targetTable");  String isAuto=pairs.get("auto");  String keyColumn=pairs.get("keyColumn");  logger.info("Parsing metric group: " + name);  MetricsGroup mg=new MetricsGroup(name);  mg.setMetricNameColumn(nameColumn);  mg.setMetricValueColumn(valueColumn);  mg.setMultipleMetricsPerRow("y".equalsIgnoreCase(singleRow));  mg.setSql(sql);  mg.setStoreInCommonTable("y".equalsIgnoreCase(storeInCommonTable));  mg.setTargetTable(targetTable);  if ("n".equalsIgnoreCase(isAuto))   mg.setAuto(false); else   mg.setAuto(true);  if (keyColumn != null && !keyColumn.isEmpty())   mg.setKeyColumn(keyColumn);  return mg;}  }
class C{  public boolean isRemainedBelowThreshold(){  return remainedBelowThreshold;}  }
class C{  public static ActivityOptionsCompatICS makeCustomAnimation(Context context,int enterResId,int exitResId){  ActivityOptionsCompatICS opts=new ActivityOptionsCompatICS();  opts.mAnimationType=ANIM_CUSTOM;  opts.mCustomEnterResId=enterResId;  opts.mCustomExitResId=exitResId;  return opts;}  }
class C{  private int modInverse(int x){  int inverse=x * x * x;  inverse*=2 - x * inverse;  inverse*=2 - x * inverse;  inverse*=2 - x * inverse;  return inverse;}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public static String format(final String message,final Object... args){  if (message == null) {    return usingCurlyBrackets(DEFAULT_MESSAGE + generateCurlyBracketTokens(args == null ? 0 : args.length),args);  }  return usingCurlyBrackets(message,args);}  }
class C{  public final boolean isDefault(){  return (this.modifiers & (ClassFileConstants.AccPublic | ClassFileConstants.AccProtected | ClassFileConstants.AccPrivate)) == 0;}  }
class C{  public static RIcon co(final String name){  return new RIcon(hu.sllauncher.gui.icon.LIcons.ResUtil.co_(name));}  }
class C{  protected void createEmptyTempFile(final String filePath) throws IOException {  Check.notNull(filePath,"fileName");  new File(filePath).createNewFile();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.547 -0500",hash_original_method="687B3882728A203A122F07AED4E62B4F",hash_generated_method="96C579179609D0A4B722153F85867919") protected final void sendMessageAtFrontOfQueue(int what,Object obj){  mSmHandler.sendMessageAtFrontOfQueue(obtainMessage(what,obj));}  }
class C{  @Override public void audit(String msg){  String hostName="";  try {    hostName=InetAddress.getLocalHost().getHostName();  } catch (  UnknownHostException e) {    hostName="localhost";  }  String username="unknown";  String threadid="unknown";  try {    threadid=Thread.currentThread().getId() + "";    username=UserGroupInformation.getCurrentUser().getShortUserName();  } catch (  IOException e) {    username="unknown";  }  logger.log(AuditLevel.AUDIT,"[" + hostName + "]"+ "["+ username+ "]"+ "[Thread-"+ threadid+ "]"+ msg);}  }
class C{  public static void startDialActivity(Context context,String phone){  Intent intent=new Intent(Intent.ACTION_DIAL);  intent.setData(Uri.parse("tel:" + clearPhoneText(phone)));  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  public static X509Certificate loadX509Certificate(final String certificateFile) throws IOException, CertificateException {  final CertificateFactory cf=CertificateFactory.getInstance("X.509");  final InputStream inputStream=FileUtils.loadFileByName(certificateFile);  final X509Certificate certificate=(X509Certificate)cf.generateCertificate(inputStream);  inputStream.close();  return certificate;}  }
class C{  public static AllocationId newInitializing(){  return new AllocationId(Strings.randomBase64UUID(),null);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public static boolean equals(Iterable<? extends Statement> model1,Iterable<? extends Statement> model2){  Set<Statement> set1=new LinkedHashSet<Statement>();  Iterators.addAll(model1.iterator(),set1);  Set<Statement> set2=new LinkedHashSet<Statement>();  Iterators.addAll(model2.iterator(),set2);  return equals(set1,set2);}  }
class C{  @Override public Vertex readVertex(final InputStream inputStream,final Function<Attachable<Vertex>,Vertex> vertexAttachMethod) throws IOException {  throw Io.Exceptions.readerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  @Override public void updateTick(){  if (isDirty()) {    length=isHorizontal() ? getClientArea().width : getClientArea().height;    if (length > 2 * getMargin())     tickLabels.update(length - 2 * getMargin());    setDirty(false);  }}  }
class C{  static public void arrayCopy(Object src,int srcPosition,Object dst,int dstPosition,int length){  System.arraycopy(src,srcPosition,dst,dstPosition,length);}  }
class C{  public static File expandFile(String file){  return new File(getHome().getAbsolutePath() + File.separator + file);}  }
class C{  public void addUser(PrincipalUser user){  SystemAssert.requireArgument(user != null,"Null user can not be added.");  users.add(user);}  }
class C{  public static void main(String[] args){  final int procs=intArg(args,"procs",Runtime.getRuntime().availableProcessors());  ForkJoinPool g=new ForkJoinPool(procs);  for (  ForkPolicy policy : ForkPolicy.values()) {    System.out.println("Integrating from " + start + " to "+ end+ " forkPolicy = "+ policy);    long lastTime=System.nanoTime();    for (int reps=intArg(args,"reps",10); reps > 0; reps--) {      double a;      if (policy == ForkPolicy.SERIAL)       a=SQuad.computeArea(g,start,end); else       if (policy == ForkPolicy.FORK)       a=FQuad.computeArea(g,start,end); else       a=DQuad.computeArea(g,start,end);      long now=System.nanoTime();      double s=(double)(now - lastTime) / NPS;      lastTime=now;      System.out.printf("Calls/sec: %12d",(long)(calls / s));      System.out.printf(" Time: %7.3f",s);      System.out.printf(" Area: %12.1f",a);      System.out.println();      if (Math.abs(1391570583552.0 - a) > errorTolerance) {        throw new AssertionError("wrong area: " + a);      }    }    System.out.println(g);  }  g.shutdown();}  }
class C{  public synchronized void deleteTypeSubstitution(final INaviOperandTreeNode node) throws CouldntDeleteException {  Preconditions.checkNotNull(node,"IE02787: Operand tree node can not be null.");  final TypeSubstitution substitution=node.getTypeSubstitution();  typesContainer.deleteTypeSubstitution(substitution);  backend.deleteTypeSubstitution(substitution);  node.setTypeSubstitution(null);  notifySubstitutionsDeleted(Collections.singleton(substitution));}  }
class C{  private void push(String input,int pos,int limit,boolean addTrailingSlash,boolean alreadyEncoded){  String segment=canonicalize(input,pos,limit,PATH_SEGMENT_ENCODE_SET,alreadyEncoded,false);  if (isDot(segment)) {    return;  }  if (isDotDot(segment)) {    pop();    return;  }  if (encodedPathSegments.get(encodedPathSegments.size() - 1).isEmpty()) {    encodedPathSegments.set(encodedPathSegments.size() - 1,segment);  } else {    encodedPathSegments.add(segment);  }  if (addTrailingSlash) {    encodedPathSegments.add("");  }}  }
class C{  public void sort(int columnIndex){  sort(columnIndex,true);}  }
class C{  public static void d(String tag,String msg){  if (sIsLogEnabled) {    Log.d(tag,getContent(getCurrentStackTraceElement()) + ">" + msg);  }}  }
class C{  public GroovyPrintStream(OutputStream out,boolean autoFlush,String encoding) throws UnsupportedEncodingException {  super(out,autoFlush,encoding);}  }
class C{  public FinalState createFinalState(){  FinalStateImpl finalState=new FinalStateImpl();  return finalState;}  }
class C{  public BridgeContext(UserAgent userAgent,InterpreterPool interpreterPool,DocumentLoader documentLoader){  this.userAgent=userAgent;  this.viewportMap.put(userAgent,new UserAgentViewport(userAgent));  this.interpreterPool=interpreterPool;  this.documentLoader=documentLoader;}  }
class C{  public void store(short value,Offset offset){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_OPTIONS_1__TRACE_OPTION_1:    getTraceOption_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public static boolean isZoningRequired(DbClient dbClient,URI varrayUri){  if (varrayUri != null) {    VirtualArray nh=dbClient.queryObject(VirtualArray.class,varrayUri);    if (nh != null) {      return isZoningRequired(dbClient,nh);    }  }  return false;}  }
class C{  public DataEditor(EditableResources resources,String name){  this.resources=resources;  this.name=name;  initComponents();  fileSize=resources.getDataSize(name);  sizeLabel.setText("File Size : " + Long.toString(fileSize) + " Bytes");  sizeLabel.setVisible(fileSize >= 0);}  }
class C{  protected File zipYeomanFiles(BuilderConfiguration builderConfiguration) throws BuilderException {  File workingDirectory=builderConfiguration.getWorkDir();  BasicFileAttributes basicFileAttributes;  try {    basicFileAttributes=Files.readAttributes(workingDirectory.toPath(),BasicFileAttributes.class);  } catch (  IOException e) {    throw new BuilderException("Unable to create archive of the current workspace",e);  }  long timeBeforeGeneration=basicFileAttributes.creationTime().toMillis();  File zipFile=new File(workingDirectory.getParentFile(),"yeoman-content.zip");  try {    ZipHelper.zip(zipFile.toPath(),workingDirectory.toPath(),timeBeforeGeneration);  } catch (  IOException e) {    throw new BuilderException("Unable to create archive of the current workspace",e);  }  File returnFile=new File(workingDirectory,zipFile.getName());  try {    Files.move(zipFile.toPath(),returnFile.toPath());  } catch (  IOException e) {    throw new BuilderException("Unable to move archive of the current workspace",e);  }  return returnFile;}  }
class C{  public BehaviorHolderAttachedObjectTargetImpl(){}  }
class C{  private void pushLowDoubleAsInt(FPR reg){  if (VM.VerifyAssertions)   validateStackPush(BYTES_IN_DOUBLE);  asm.emitSTFD(reg,spTopOffset - BYTES_IN_DOUBLE,FP);  spTopOffset-=BYTES_IN_STACKSLOT;}  }
class C{  public static String extractFileSetFromPath(String resource){  String[] splits=resource.split("[/]");  if (splits.length <= 3) {    Stats.incr("invalid-resource");    return null;  }  return splits[splits.length - 3];}  }
class C{  public void write(int c){  buffer.append((char)c);}  }
class C{  protected void configurePipeline(){  setProperty(DATATYPE_VALIDATOR_FACTORY,fDatatypeValidatorFactory);  configureDTDPipeline();  if (fFeatures.get(NAMESPACES) == Boolean.TRUE) {    fProperties.put(NAMESPACE_BINDER,fNamespaceBinder);    fScanner=fNamespaceScanner;    fProperties.put(DOCUMENT_SCANNER,fNamespaceScanner);    if (fDTDValidator != null) {      fProperties.put(DTD_VALIDATOR,fDTDValidator);      fNamespaceScanner.setDTDValidator(fDTDValidator);      fNamespaceScanner.setDocumentHandler(fDTDValidator);      fDTDValidator.setDocumentSource(fNamespaceScanner);      fDTDValidator.setDocumentHandler(fDocumentHandler);      if (fDocumentHandler != null) {        fDocumentHandler.setDocumentSource(fDTDValidator);      }      fLastComponent=fDTDValidator;    } else {      fNamespaceScanner.setDocumentHandler(fDocumentHandler);      fNamespaceScanner.setDTDValidator(null);      if (fDocumentHandler != null) {        fDocumentHandler.setDocumentSource(fNamespaceScanner);      }      fLastComponent=fNamespaceScanner;    }  } else {    fScanner=fNonNSScanner;    fProperties.put(DOCUMENT_SCANNER,fNonNSScanner);    if (fNonNSDTDValidator != null) {      fProperties.put(DTD_VALIDATOR,fNonNSDTDValidator);      fNonNSScanner.setDocumentHandler(fNonNSDTDValidator);      fNonNSDTDValidator.setDocumentSource(fNonNSScanner);      fNonNSDTDValidator.setDocumentHandler(fDocumentHandler);      if (fDocumentHandler != null) {        fDocumentHandler.setDocumentSource(fNonNSDTDValidator);      }      fLastComponent=fNonNSDTDValidator;    } else {      fScanner.setDocumentHandler(fDocumentHandler);      if (fDocumentHandler != null) {        fDocumentHandler.setDocumentSource(fScanner);      }      fLastComponent=fScanner;    }  }  if (fFeatures.get(XMLSCHEMA_VALIDATION) == Boolean.TRUE) {    if (fSchemaValidator == null) {      fSchemaValidator=new XMLSchemaValidator();      fProperties.put(SCHEMA_VALIDATOR,fSchemaValidator);      addComponent(fSchemaValidator);      if (fErrorReporter.getMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN) == null) {        XSMessageFormatter xmft=new XSMessageFormatter();        fErrorReporter.putMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN,xmft);      }    }    fLastComponent.setDocumentHandler(fSchemaValidator);    fSchemaValidator.setDocumentSource(fLastComponent);    fSchemaValidator.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fSchemaValidator);    }    fLastComponent=fSchemaValidator;  }}  }
class C{  public static void matrixMultWDivMM(MatrixBlock mW,MatrixBlock mU,MatrixBlock mV,MatrixBlock mX,MatrixBlock ret,WDivMMType wt,int k) throws DMLRuntimeException {  if (mW.isEmptyBlock(false) || (wt.isLeft() && mU.isEmptyBlock(false)) || (wt.isRight() && mV.isEmptyBlock(false))|| (wt.isBasic() && mW.isEmptyBlock(false))) {    ret.examSparsity();    return;  }  ret.sparse=wt.isBasic() ? mW.sparse : false;  ret.allocateDenseOrSparseBlock();  if (!ret.isThreadSafe()) {    matrixMultWDivMM(mW,mU,mV,mX,ret,wt);    return;  }  try {    ExecutorService pool=Executors.newFixedThreadPool(k);    ArrayList<MatrixMultWDivTask> tasks=new ArrayList<MatrixMultWDivTask>();    if (wt.isLeft()) {      int blklen=(int)(Math.ceil((double)mW.clen / k));      for (int j=0; j < k & j * blklen < mW.clen; j++)       tasks.add(new MatrixMultWDivTask(mW,mU,mV,mX,ret,wt,0,mW.rlen,j * blklen,Math.min((j + 1) * blklen,mW.clen)));    } else {      int blklen=(int)(Math.ceil((double)mW.rlen / k));      for (int i=0; i < k & i * blklen < mW.rlen; i++)       tasks.add(new MatrixMultWDivTask(mW,mU,mV,mX,ret,wt,i * blklen,Math.min((i + 1) * blklen,mW.rlen),0,mW.clen));    }    List<Future<Long>> taskret=pool.invokeAll(tasks);    pool.shutdown();    ret.nonZeros=0;    for (    Future<Long> task : taskret)     ret.nonZeros+=task.get();  } catch (  Exception e) {    throw new DMLRuntimeException(e);  }  ret.examSparsity();}  }
class C{  public SabresQuery<T> whereDoesNotExist(String key){  addWhere(key,Where.is(key,new StringValue("NULL")));  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  String attrValue;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(3);  testEmployee.setAttribute("street","Neither");  attrValue=testEmployee.getAttribute("street");  assertEquals("elementChangeAttributeValueAssert","Neither",attrValue);}  }
class C{  public void onDirectoryInit(Path file){}  }
class C{  public void detach(){  m_iterator=null;  super.detach();}  }
class C{  public synchronized int slowMode(){  return slowMode;}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  protected AbstractSet(){}  }
class C{  @Override public String decode(String input){  return getHelpers().urlDecode(input);}  }
class C{  public JobPersistenceException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public void postProcessDeathDay(boolean root){  if (num_children != 0)   death_day=daughters[0].birthday; else   death_day=maximum_death_day;  for (int z=0; z < num_children; z++)   daughters[z].postProcessDeathDay(false);}  }
class C{  public static StringBuilder appendZeros(StringBuilder buf,int zeros){  for (int i=zeros; i > 0; i-=ZEROPADDING.length) {    buf.append(ZEROPADDING,0,i < ZEROPADDING.length ? i : ZEROPADDING.length);  }  return buf;}  }
class C{  public static void startDeviceActivity(Context context,String path,String name,String city){  Intent intent=new Intent(context,UtilityService.class);  intent.setAction(UtilityService.ACTION_START_DEVICE_ACTIVITY);  String extraInfo;  if (Constants.START_ATTRACTION_PATH.equals(path)) {    extraInfo=name;  } else {    extraInfo=name + ", " + city;  }  intent.putExtra(EXTRA_START_ACTIVITY_INFO,extraInfo);  intent.putExtra(EXTRA_START_PATH,path);  context.startService(intent);}  }
class C{  public static void clearLoggingBehaviors(){synchronized (loggingBehaviors) {    loggingBehaviors.clear();  }}  }
class C{  private void checkReinit(final String backupName,final boolean geoRestoreFromScratch) throws IOException {  String backupType=backupName.split(BackupConstants.BACKUP_NAME_DELIMITER)[1];  if (BackupType.geodbmultivdc.name().equalsIgnoreCase(backupType)) {    log.info("This backup was taken in multi vdc scenario");    boolean needReinit=geoRestoreFromScratch ? false : true;    checkReinitFile(needReinit);  }}  }
class C{  public static ConfigHistory load(File root,DBInstanceInfo db){  File f=new File(root,db.getDbGroupName() + "_" + db.getHostName()+ "_"+ db.getPort()+ ".cnf");  if (!f.exists())   return null;  FileInputStream in=null;  try {    in=new FileInputStream(f);    ConfigHistory ch=new ConfigHistory();    ch.read(in);    return ch;  } catch (  Exception ex) {  } finally {    if (in != null)     try {      in.close();    } catch (    Exception ex) {    }  }  return null;}  }
class C{  public static void screencap(String filePath){  try {    m_currentDevice.executeShell("screencap",filePath);  } catch (  IOException|JadbException e) {    System.out.println("Failed to take screencap");    e.printStackTrace();  }}  }
class C{  public static void highlightNode(final Node node,final boolean state){  final NodeRealizer r=((Graph2D)node.getGraph()).getRealizer(node);  if (r == null) {    return;  }  if (state) {    if (r.getLineType() == LineType.LINE_2) {      r.setLineType(LineType.LINE_5);    }  } else {    if (r.getLineType() == LineType.LINE_5) {      r.setLineType(LineType.LINE_2);    }  }}  }
class C{  @Entrypoint public static void yieldpointFromEpilogue(){  Address fp=Magic.getFramePointer();  RVMThread.yieldpoint(RVMThread.EPILOGUE,fp);}  }
class C{  public boolean canUndo(){  return (m_Undo.size() > 0);}  }
class C{  public void put(String localFile,String remoteTargetDirectory) throws IOException {  put(new String[]{localFile},remoteTargetDirectory,"0600");}  }
class C{  public SnmpInt(Enumerated v) throws IllegalArgumentException {  this(v.intValue());}  }
class C{  public static int rotate90Reverse(int type,int data){switch (type) {case BlockID.TORCH:case BlockID.REDSTONE_TORCH_OFF:case BlockID.REDSTONE_TORCH_ON:switch (data) {case 3:      return 1;case 4:    return 2;case 2:  return 3;case 1:return 4;}break;case BlockID.MINECART_TRACKS:switch (data) {case 7:return 6;case 8:return 7;case 9:return 8;case 6:return 9;}case BlockID.POWERED_RAIL:case BlockID.DETECTOR_RAIL:case BlockID.ACTIVATOR_RAIL:int power=data & ~0x7;switch (data & 0x7) {case 1:return 0 | power;case 0:return 1 | power;case 5:return 2 | power;case 4:return 3 | power;case 2:return 4 | power;case 3:return 5 | power;}break;case 203:case BlockID.RED_SANDSTONE_STAIRS:case BlockID.OAK_WOOD_STAIRS:case BlockID.COBBLESTONE_STAIRS:case BlockID.BRICK_STAIRS:case BlockID.STONE_BRICK_STAIRS:case BlockID.NETHER_BRICK_STAIRS:case BlockID.SANDSTONE_STAIRS:case BlockID.SPRUCE_WOOD_STAIRS:case BlockID.BIRCH_WOOD_STAIRS:case BlockID.JUNGLE_WOOD_STAIRS:case BlockID.QUARTZ_STAIRS:case BlockID.ACACIA_STAIRS:case BlockID.DARK_OAK_STAIRS:switch (data) {case 2:return 0;case 3:return 1;case 1:return 2;case 0:return 3;case 6:return 4;case 7:return 5;case 5:return 6;case 4:return 7;}break;case BlockID.STONE_BUTTON:case BlockID.WOODEN_BUTTON:{int thrown=data & 0x8;switch (data & ~0x8) {case 3:return 1 | thrown;case 4:return 2 | thrown;case 2:return 3 | thrown;case 1:return 4 | thrown;}break;}case BlockID.LEVER:{int thrown=data & 0x8;switch (data & ~0x8) {case 3:return 1 | thrown;case 4:return 2 | thrown;case 2:return 3 | thrown;case 1:return 4 | thrown;case 6:return 5 | thrown;case 5:return 6 | thrown;case 0:return 7 | thrown;case 7:return 0 | thrown;}break;}case BlockID.WOODEN_DOOR:case BlockID.IRON_DOOR:if ((data & 0x8) != 0) {break;}case BlockID.COCOA_PLANT:case BlockID.TRIPWIRE_HOOK:{int extra=data & ~0x3;int withoutFlags=data & 0x3;switch (withoutFlags) {case 1:return 0 | extra;case 2:return 1 | extra;case 3:return 2 | extra;case 0:return 3 | extra;}break;}case BlockID.SIGN_POST:return (data + 12) % 16;case BlockID.LADDER:case BlockID.WALL_SIGN:case BlockID.CHEST:case BlockID.FURNACE:case BlockID.BURNING_FURNACE:case BlockID.ENDER_CHEST:case BlockID.TRAPPED_CHEST:case BlockID.HOPPER:{int extra=data & 0x8;int withoutFlags=data & ~0x8;switch (withoutFlags) {case 5:return 2 | extra;case 4:return 3 | extra;case 2:return 4 | extra;case 3:return 5 | extra;}break;}case 198:case BlockID.DISPENSER:case BlockID.DROPPER:int dispPower=data & 0x8;switch (data & ~0x8) {case 5:return 2 | dispPower;case 4:return 3 | dispPower;case 2:return 4 | dispPower;case 3:return 5 | dispPower;}break;case BlockID.PUMPKIN:case BlockID.JACKOLANTERN:switch (data) {case 1:return 0;case 2:return 1;case 3:return 2;case 0:return 3;}break;case BlockID.HAY_BLOCK:case BlockID.LOG:case BlockID.LOG2:if (data >= 4 && data <= 11) data^=0xc;break;case BlockID.COMPARATOR_OFF:case BlockID.COMPARATOR_ON:case BlockID.REDSTONE_REPEATER_OFF:case BlockID.REDSTONE_REPEATER_ON:int dir=data & 0x03;int delay=data - dir;switch (dir) {case 1:return 0 | delay;case 2:return 1 | delay;case 3:return 2 | delay;case 0:return 3 | delay;}break;case BlockID.TRAP_DOOR:case BlockID.IRON_TRAP_DOOR:int withoutOrientation=data & ~0x3;int orientation=data & 0x3;switch (orientation) {case 3:return 0 | withoutOrientation;case 2:return 1 | withoutOrientation;case 0:return 2 | withoutOrientation;case 1:return 3 | withoutOrientation;}case BlockID.PISTON_BASE:case BlockID.PISTON_STICKY_BASE:case BlockID.PISTON_EXTENSION:final int rest=data & ~0x7;switch (data & 0x7) {case 5:return 2 | rest;case 4:return 3 | rest;case 2:return 4 | rest;case 3:return 5 | rest;}break;case BlockID.BROWN_MUSHROOM_CAP:case BlockID.RED_MUSHROOM_CAP:if (data >= 10) return data;return (data * 7) % 10;case BlockID.VINE:return ((data >> 1) | (data << 3)) & 0xf;case BlockID.FENCE_GATE:return ((data + 3) & 0x3) | (data & ~0x3);case BlockID.ANVIL:int damage=data & ~0x3;switch (data & 0x3) {case 0:return 1 | damage;case 2:return 3 | damage;case 1:return 2 | damage;case 3:return 0 | damage;}break;case BlockID.BED:return data & ~0x3 | (data - 1) & 0x3;case BlockID.HEAD:switch (data) {case 2:return 4;case 3:return 5;case 4:return 3;case 5:return 2;}}return data;}  }
class C{  @Override public Connection createConnection() throws JMSException {  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createConnection()");  }  ActiveMQRASessionFactoryImpl s=new ActiveMQRASessionFactoryImpl(mcf,cm,getResourceAdapter().getTM(),ActiveMQRAConnectionFactory.CONNECTION);  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("Created connection: " + s);  }  return s;}  }
class C{  private double damp(double value){  return Math.sqrt(value);}  }
class C{  public BaseItemCollectionRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  private boolean similarity(Plan plan1,Plan plan2,StageActivityTypes stageActivities,double similarTimeInterval){  boolean similarTimes=checkActivityTimes(plan1,plan2,stageActivities,similarTimeInterval);  if (similarTimes) {    return true;  } else {    return false;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.214 -0400",hash_original_method="E04856DD9186583D33DD1936F18ACA04",hash_generated_method="8F705DE5284F1084798187C785439B60") public final boolean owns(ConditionObject condition){  return condition.isOwnedBy(this);}  }
class C{  public static int codePointCount(CharSequence seq,int beginIndex,int endIndex){  if (seq == null) {    throw new NullPointerException();  }  int len=seq.length();  if (beginIndex < 0 || endIndex > len || beginIndex > endIndex) {    throw new IndexOutOfBoundsException();  }  int result=0;  for (int i=beginIndex; i < endIndex; i++) {    char c=seq.charAt(i);    if (isHighSurrogate(c)) {      if (++i < endIndex) {        c=seq.charAt(i);        if (!isLowSurrogate(c)) {          result++;        }      }    }    result++;  }  return result;}  }
class C{  private final void handleAppDiedLocked(ProcessRecord app,boolean restarting,boolean allowRestart){  cleanUpApplicationRecordLocked(app,restarting,allowRestart,-1);  if (!restarting) {    mLruProcesses.remove(app);  }  if (mProfileProc == app) {    clearProfilerLocked();  }  if (mMainStack.mPausingActivity != null && mMainStack.mPausingActivity.app == app) {    if (DEBUG_PAUSE || DEBUG_CLEANUP)     Slog.v(TAG,"App died while pausing: " + mMainStack.mPausingActivity);    mMainStack.mPausingActivity=null;  }  if (mMainStack.mLastPausedActivity != null && mMainStack.mLastPausedActivity.app == app) {    mMainStack.mLastPausedActivity=null;  }  boolean hasVisibleActivities=mMainStack.removeHistoryRecordsForAppLocked(app);  app.activities.clear();  if (app.instrumentationClass != null) {    Slog.w(TAG,"Crash of app " + app.processName + " running instrumentation "+ app.instrumentationClass);    Bundle info=new Bundle();    info.putString("shortMsg","Process crashed.");    finishInstrumentationLocked(app,Activity.RESULT_CANCELED,info);  }  if (!restarting) {    if (!mMainStack.resumeTopActivityLocked(null)) {      if (hasVisibleActivities) {        mMainStack.ensureActivitiesVisibleLocked(null,0);      }    }  }}  }
class C{  static boolean isInterfaceAllowed(NetworkInterface iface){  if (iface == null)   throw new IllegalArgumentException("iface cannot be null");  String ifName=(System.getProperty("os.name") == null || System.getProperty("os.name").startsWith("Windows")) ? iface.getDisplayName() : iface.getName();  String[] allowedInterfaces=getAllowedInterfaces();  if (allowedInterfaces != null) {    return Arrays.asList(allowedInterfaces).contains(ifName);  } else {    String[] blockedInterfaces=getBlockedInterfaces();    if (blockedInterfaces != null) {      return !Arrays.asList(blockedInterfaces).contains(ifName);    }  }  return true;}  }
class C{  public void test_readResolve(){  MockAttributedCharacterIteratorAttribute mac1=new MockAttributedCharacterIteratorAttribute("test");  try {    mac1.readResolve();    fail("InvalidObjectException has not been thrown");  } catch (  InvalidObjectException e) {  }  ObjectOutputStream out=null;  ObjectInputStream in=null;  try {    ByteArrayOutputStream bytes=new ByteArrayOutputStream();    out=new ObjectOutputStream(bytes);    AttributedCharacterIterator.Attribute attr1, attr2;    attr1=AttributedCharacterIterator.Attribute.LANGUAGE;    out.writeObject(attr1);    in=new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()));    try {      attr2=(AttributedCharacterIterator.Attribute)in.readObject();      assertSame("resolved incorrectly",attr1,attr2);    } catch (    IllegalArgumentException e) {      fail("Unexpected IllegalArgumentException: " + e);    }  } catch (  IOException e) {    fail("unexpected IOException" + e);  }catch (  ClassNotFoundException e) {    fail("unexpected ClassNotFoundException" + e);  } finally {    try {      if (out != null)       out.close();      if (in != null)       in.close();    } catch (    IOException e) {    }  }}  }
class C{  public static <T extends AbstractEntity<ID>,ID extends Serializable>List<T> managedEntities(Collection<T> detachedEntities,GenericDao<T,ID> dao){  if (detachedEntities == null || detachedEntities.isEmpty()) {    return Collections.emptyList();  }  List<T> managed=new ArrayList<T>(detachedEntities.size());  for (  T detachedEntity : detachedEntities) {    T managedTu=dao.findById(detachedEntity.getId());    if (managedTu != null) {      managed.add(managedTu);    }  }  return managed;}  }
class C{  @Override public boolean isBusy(){  return false;}  }
class C{  private static ArrayList<String> parseMomentFictionalProgress(Element momentElement) throws MissionParseException {  ArrayList<String> progress=new ArrayList<>();  NodeList fictionalProgressNodes=momentElement.getElementsByTagName(ELEMENT_FICTIONAL_PROGRESS);  for (int i=0; i < fictionalProgressNodes.getLength(); i++) {    Node node=fictionalProgressNodes.item(i);    Element parent=(Element)node.getParentNode();    if (isElementNode(node) && parent.getTagName().equals(ELEMENT_MOMENT)) {      String progressString=parseFictionalProgressElement((Element)node);      progress.add(progressString);    }  }  return progress;}  }
class C{  public String toString(){  if (val == null)   return "null";  if (val instanceof Long || val instanceof Integer) {    return Long.toString(val.longValue());  }  double d=val.doubleValue();  if (Double.isInfinite(d))   return (d > 0) ? "(1.0 / 0.0)" : "(-1.0 / 0.0)";  if (Double.isNaN(d))   return "(0.0 / 0.0)";  return Double.toString(d);}  }
class C{  public BigDecimal optBigDecimal(String key,BigDecimal defaultValue){  try {    return this.getBigDecimal(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public InputStream post(Map parameters) throws IOException {  postCookies();  setParameters(parameters);  return doPost();}  }
class C{  @Override public void propertyChange(PropertyChangeEvent evt){  Object source=evt.getSource();  if (this.viewer != null) {    this.viewer.update(source,null);  }}  }
class C{  public void appendRemainingComponent(String name){  if (name != null) {    CompositeName rname=new CompositeName();    try {      rname.add(name);    } catch (    InvalidNameException e) {    }    appendRemainingName(rname);  }}  }
class C{  public void stringLengthMB() throws IOException {  print("stringLengthMB",null);}  }
class C{  private Node addConditionWaiter(){  Node t=lastWaiter;  if (t != null && t.waitStatus != Node.CONDITION) {    unlinkCancelledWaiters();    t=lastWaiter;  }  Node node=new Node(Thread.currentThread(),Node.CONDITION);  if (t == null)   firstWaiter=node; else   t.nextWaiter=node;  lastWaiter=node;  return node;}  }
class C{  @Override public void registerOutParameter(int parameterIndex,int sqlType,int scale) throws SQLException {  registerOutParameter(parameterIndex);}  }
class C{  public static long inSeconds(String expression){  if (expression == null || expression.equals("")) {    return 0;  }  if (expression.matches("[0-9]+[smhd]")) {    int multiplier=multiplier(expression.charAt(expression.length() - 1));    if (multiplier == 0) {      throw new IllegalArgumentException("Invalid unit in expression: " + expression);    }    int value=Integer.parseInt(expression.substring(0,expression.length() - 1));    if (value < 0) {      throw new IllegalArgumentException("Invalid value in expression: " + expression);    }    return value * multiplier;  }  throw new IllegalArgumentException("Invalid expression format: " + expression);}  }
class C{  public void checkSameThread(){  mBuilderConfig|=GLDebugHelper.CONFIG_CHECK_THREAD;}  }
class C{  public String sqlObjectDetail_dropColumn(String vendorName,String catalogName,String schemaName,String tableName,String columnName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlObjectDetail_dropColumn(catalogName,schemaName,tableName,columnName);}  }
class C{  public void sendToServer(IMessage message){  netHandler.sendToServer(message);}  }
class C{  public static void d(String tag,String msg,Object... args){  if (sLevel > LEVEL_DEBUG) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.d(tag,msg);}  }
class C{  private long[] convertToArray(Map<String,Long> map,int size,boolean unitOffset){  long[] values=new long[size];  int arrayOffset=unitOffset ? -1 : 0;  for (  Map.Entry<String,Long> cursor : map.entrySet()) {    int offset=Integer.parseInt(cursor.getKey()) + arrayOffset;    values[offset]=cursor.getValue();  }  return values;}  }
class C{  @Override public ItemStack removeStackFromSlot(int index){  if (this.chestContents[index] != null) {    ItemStack itemstack=this.chestContents[index];    this.chestContents[index]=null;    return itemstack;  } else {    return null;  }}  }
class C{  public <T extends EntityCondition>EntityQuery where(List<T> andConditions){  this.whereEntityCondition=EntityCondition.makeCondition(andConditions);  return this;}  }
class C{  public static double trigamma(double x){  if (x > 0 && x <= S_LIMIT) {    return 1 / (x * x);  }  if (x >= C_LIMIT) {    double inv=1 / (x * x);    return 1 / x + inv / 2 + inv / x * (1.0 / 6 - inv * (1.0 / 30 + inv / 42));  }  return trigamma(x + 1) + 1 / (x * x);}  }
class C{  protected RequestHandle sendRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,ResponseHandlerInterface responseHandler,Context context){  if (contentType != null) {    uriRequest.addHeader("Content-Type",contentType);  }  responseHandler.setRequestHeaders(uriRequest.getAllHeaders());  responseHandler.setRequestURI(uriRequest.getURI());  Future<?> request=threadPool.submit(new AsyncHttpRequest(client,httpContext,uriRequest,responseHandler));  if (context != null) {    List<WeakReference<Future<?>>> requestList=requestMap.get(context);    if (requestList == null) {      requestList=new LinkedList<WeakReference<Future<?>>>();      requestMap.put(context,requestList);    }    requestList.add(new WeakReference<Future<?>>(request));  }  return new RequestHandle(request);}  }
class C{  public boolean shouldYieldFocus(JComponent input){  return verify(input);}  }
class C{  public boolean hasEstimate(){  return trafficEstimate != null;}  }
class C{  public InlineQueryResultCachedVoiceBuilder title(String title){  this.title=title;  return this;}  }
class C{  @Bean public DataSource dataSource(){  return new EmbeddedDatabaseBuilder().setType(EmbeddedDatabaseType.H2).addScript("classpath:/sql/quartz/tables_h2.sql").addScript("classpath:/sql/model/schema_h2_clean.sql").addScript("classpath:/sql/model/schema_h2.sql").build();}  }
class C{  private int isEligible(final Rule rule){  if (this.owner.equals(rule.getOwner()) && rule.getArity() >= this.minArity && rule.getArity() <= this.maxArity)   return 1;  return 0;}  }
class C{  protected synchronized void damage(Rectangle r){  if (r != null) {    x=r.x - 4;    y=r.y;    width=18;    height=r.height;    repaint();  }}  }
class C{  public ChartMouseEvent(JFreeChart chart,MouseEvent trigger,ChartEntity entity){  super(chart);  this.chart=chart;  this.trigger=trigger;  this.entity=entity;}  }
class C{  public static boolean isValid(String month,String year){  return INSTANCE.isValidHelper(month,year);}  }
class C{  @Override public final String toString(){  StringBuffer sb=new StringBuffer();  for (  IndexCreationData icd : indexDefinitions) {    sb.append(icd.getIndexName()).append(" ");  }  return sb.toString();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.386 -0500",hash_original_method="2BA0FD4CC00036E4108F83B03D65D405",hash_generated_method="CE0314F1E44DB5E3E727BF1B17AEFE9D") static public void assertEquals(double expected,double actual,double delta){  assertEquals(null,expected,actual,delta);}  }
class C{  @Override public void onDestroyFloatView(View floatView){  ((ImageView)floatView).setImageDrawable(null);  mFloatBitmap.recycle();  mFloatBitmap=null;}  }
class C{  public SnmpLoadedClassData(long lastUpdated,TreeMap<SnmpOid,Object> indexMap){  super(lastUpdated,indexMap,false);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_STRICTNESS_1__STRICTNESS_LEVEL_1:    setStrictnessLevel_1(STRICTNESS_LEVEL_1_EDEFAULT);  return;case UmplePackage.ANONYMOUS_STRICTNESS_1__MESSAGE_1:setMessage_1(MESSAGE_1_EDEFAULT);return;case UmplePackage.ANONYMOUS_STRICTNESS_1__MESSAGE_NUMBER_1:setMessageNumber_1(MESSAGE_NUMBER_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void store(boolean value){}  }
class C{  public static Color makeBrighter(Color color,float factor){  int red=color.getRed();  int green=color.getGreen();  int blue=color.getBlue();  float[] hsb=Color.RGBtoHSB(red,green,blue,null);  if (hsb[2] == 1) {    red+=150;    green+=150;    blue+=150;    if (blue > 255) {      blue=255;    }    if (red > 255) {      red=255;    }    if (green > 255) {      green=255;    }    hsb=Color.RGBtoHSB(red,green,blue,null);  }  return Color.getHSBColor(hsb[0],hsb[1],factor * (1f + hsb[2]));}  }
class C{  public static Color interpolateColor(double amount,Color color1,Color color2){  if (color1 == null || color2 == null) {    String message=Logging.getMessage("nullValue.ColorIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  float t=(amount < 0 ? 0 : (amount > 1 ? 1 : (float)amount));  float r=color1.getRed() + t * (color2.getRed() - color1.getRed());  float g=color1.getGreen() + t * (color2.getGreen() - color1.getGreen());  float b=color1.getBlue() + t * (color2.getBlue() - color1.getBlue());  float a=color1.getAlpha() + t * (color2.getAlpha() - color1.getAlpha());  return new Color(r / 255f,g / 255f,b / 255f,a / 255f);}  }
class C{  public Map<String,String> addZonesStrategy(MDSDialog dialog,List<Zone> zones,Integer vsanId,boolean activateZones) throws NetworkDeviceControllerException {  waitForSession(dialog,vsanId);  Long time=System.currentTimeMillis();  Map<String,String> addedZoneNames=new HashMap<String,String>();  Zoneset activeZoneset=getActiveZoneset(dialog,vsanId);  if (activeZoneset == null) {    _log.info("No active zoneset vsan: " + vsanId);    throw NetworkDeviceControllerException.exceptions.noActiveZonesetForFabric(vsanId.toString());  }  List<Zone> fabricZones=dialog.showFabricZones(vsanId);  try {    dialog.config();    boolean doZonesetClone=false;    for (    Zone zone : zones) {      try {        if (createZone(dialog,zone,vsanId,fabricZones,activeZoneset)) {          addedZoneNames.put(zone.getName(),SUCCESS);          doZonesetClone=true;        } else {          addedZoneNames.put(zone.getName(),NO_CHANGE);        }      } catch (      Exception ex) {        addedZoneNames.put(zone.getName(),ERROR + ": " + ex.getMessage());        handleZonesStrategyException(ex,activateZones);      }    }    if (doZonesetClone) {      zonesetClone(dialog,vsanId,activeZoneset);    }    if (hasResult(addedZoneNames,SUCCESS)) {      dialog.zonesetNameVsan(activeZoneset.getName(),vsanId,false);      for (      String zoneName : addedZoneNames.keySet()) {        if (SUCCESS.equals(addedZoneNames.get(zoneName))) {          dialog.zonesetMember(zoneName,false);        }      }      dialog.exitToConfig();      commitZones(dialog,vsanId,activateZones ? activeZoneset : null);      dialog.copyRunningConfigToStartupFabric();    }    dialog.endConfig();    time=System.currentTimeMillis() - time;    _log.info("Zone add time (msec): " + time.toString());    return addedZoneNames;  } catch (  Exception ex) {    throw NetworkDeviceControllerException.exceptions.addZonesStrategyFailed(ex);  } finally {    safeExitSession(dialog,vsanId);  }}  }
class C{  public EclipseApp(String application){  addArg("application",application);}  }
class C{  protected void pause(){  ThreadUtil.sleep(AbstractUIContext.getAIPauseDuration());}  }
class C{  Rule dotNewExpressionChaining(){  return Sequence(level1ExpressionChaining().label("head"),set(),ZeroOrMore(Sequence(Sequence(Ch('.'),group.basics.optWS(),String("new"),group.basics.testLexBreak(),group.basics.optWS()),group.types.typeArguments().label("constructorTypeArgs"),group.basics.identifier().label("innerClassName"),group.types.typeArguments().label("classTypeArgs"),group.structures.methodArguments().label("methodArguments"),Optional(group.structures.typeBody()).label("classBody"),set(actions.createQualifiedConstructorInvocation(value("constructorTypeArgs"),node("innerClassName"),node("classTypeArgs"),value("methodArguments"),value("classBody"))))),set(actions.createChainOfQualifiedConstructorInvocations(node("head"),nodes("ZeroOrMore/Sequence"))));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String val=getString(stack);  String s=getString(stack);  if (stack.getUIMgr() == null)   Sage.put(s,val); else   stack.getUIMgr().put(s,val);  return null;}  }
class C{  public void add(String dim,String... path){  String indexedField=config.getDimConfig(dim).indexFieldName;  add(dim,new TermQuery(term(indexedField,dim,path)));}  }
class C{  public static void rotateKey(Storage storage,String bucketName,String objectName,String originalBase64Key,String originalBase64KeyHash,String newBase64Key,String newBase64KeyHash) throws Exception {  Storage.Objects.Rewrite rewriteObject=storage.objects().rewrite(bucketName,objectName,bucketName,objectName,null);  final HttpHeaders httpHeaders=new HttpHeaders();  httpHeaders.set("x-goog-copy-source-encryption-algorithm","AES256");  httpHeaders.set("x-goog-copy-source-encryption-key",originalBase64Key);  httpHeaders.set("x-goog-copy-source-encryption-key-sha256",originalBase64KeyHash);  httpHeaders.set("x-goog-encryption-algorithm","AES256");  httpHeaders.set("x-goog-encryption-key",newBase64Key);  httpHeaders.set("x-goog-encryption-key-sha256",newBase64KeyHash);  rewriteObject.setRequestHeaders(httpHeaders);  try {    RewriteResponse rewriteResponse=rewriteObject.execute();    while (!rewriteResponse.getDone()) {      System.out.println("Rewrite did not complete. Resuming...");      rewriteObject.setRewriteToken(rewriteResponse.getRewriteToken());      rewriteResponse=rewriteObject.execute();    }  } catch (  GoogleJsonResponseException e) {    System.out.println("Error rotating key: " + e.getContent());    System.exit(1);  }}  }
class C{  public void writeResults(PrintStream out){  logger.info(String.format("Writing final class assignments in %s format",outputFormat.toString()));  Collections.sort(effectiveVocabulary,new WordClassComparator(wordToClass));  for (  IString word : effectiveVocabulary) {    int assignment=wordToClass.get(word);    if (outputFormat == OutputFormat.TSV) {      out.printf("%s\t%d%n",word.toString(),assignment);    } else     if (outputFormat == OutputFormat.SRILM) {      out.printf("%d 1.0 %s%n",assignment,word.toString());    }  }}  }
class C{  public void addDatasource(String name,FetchData fetchData){  Def def=new Def(name,fetchData);  sources.put(name,def);}  }
class C{  public SetHypergraph(){  vertices=new HashMap<V,Set<H>>();  edges=new HashMap<H,Set<V>>();}  }
class C{  public boolean add(final byte[] a){  int i=d, l=a.length;  long bits[]=this.bits;  boolean alreadySet=true;  while (i-- != 0)   alreadySet&=set(bits,hash(a,l,i));  if (!alreadySet)   size++;  return !alreadySet;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static <T>Predicate<T> filter(Predicate<T> allowed,Predicate<T> disallowed){  return allowed != null ? allowed : (disallowed != null ? disallowed : null);}  }
class C{  public void store(char val,Offset offset){  this.plus(offset).store(val);}  }
class C{  public boolean isStatic(){  return Modifier.isStatic(_field.getModifiers());}  }
class C{  public void report(HashIntIntMap aut,Object user_param){  stream.print(prefix);  Utils.print_labeling(stream,aut);  stream.print(postfix);}  }
class C{  private boolean tryToNotifyReset(){  if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {    if (mPtrUIHandlerHolder.hasHandler()) {      mPtrUIHandlerHolder.onUIReset(this);      if (DEBUG) {        PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIReset");      }    }    mStatus=PTR_STATUS_INIT;    clearFlag();    return true;  }  return false;}  }
class C{  public ColorAtom(Color bg,Color c,ColorAtom old){  elements=new RowAtom(old.elements);  background=(bg == null ? old.background : bg);  color=(c == null ? old.color : c);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  void zApplyAllowEmptyDates(){  if (!hasParent()) {    return;  }  LocalDate selectedDate=zGetParentSelectedDate();  if ((!allowEmptyDates) && (selectedDate == null)) {    LocalDate today=LocalDate.now();    if (InternalUtilities.isDateVetoed(vetoPolicy,today)) {      throw new RuntimeException("Exception in DatePickerSettings.zApplyAllowEmptyDates(), " + "Could not initialize a null date to today, because today is vetoed by " + "the veto policy. To prevent this exception, always call "+ "setAllowEmptyDates() -before- setting a veto policy.");    }    zSetParentSelectedDate(today);  }}  }
class C{  public boolean equalsIgnoreCase(java.lang.String anotherString){  return false;}  }
class C{  @EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockPhysics(BlockPhysicsEvent event){  Match match=Cardinal.getMatch(event.getWorld());  if (match == null) {    return;  }  for (  AppliedRegion reg : get(match,ApplyType.BLOCK_PHYSICS)) {    if (apply(reg,event.getBlock().getLocation(),null,event,event,event.getBlock())) {      break;    }  }}  }
class C{  public Base64OutputStream(OutputStream out,int flags,boolean encode){  super(out);  this.flags=flags;  if (encode) {    coder=new Base64.Encoder(flags,null);  } else {    coder=new Base64.Decoder(flags,null);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void close(){  try {    inputReader.close();  } catch (  java.io.IOException e) {    Debug.ReportError("Error trying to close the TLATeX resource file " + name + ".\n"+ "    You may be having file system problems");  }  ;}  }
class C{  private ListResourceBundle loadResourceBundle(String resourceBundle) throws MissingResourceException {  m_resourceBundleName=resourceBundle;  Locale locale=getLocale();  ListResourceBundle lrb;  try {    ResourceBundle rb=ResourceBundle.getBundle(m_resourceBundleName,locale);    lrb=(ListResourceBundle)rb;  } catch (  MissingResourceException e) {    try {      lrb=(ListResourceBundle)ResourceBundle.getBundle(m_resourceBundleName,new Locale("en","US"));    } catch (    MissingResourceException e2) {      throw new MissingResourceException("Could not load any resource bundles." + m_resourceBundleName,m_resourceBundleName,"");    }  }  m_resourceBundle=lrb;  return lrb;}  }
class C{  public String toString(){  return state.toString();}  }
class C{  public static String componentToImageColName(String component){  if (component.equals(MixnMatchColumns.KEY_HOMESCREEN)) {    return ThemesColumns.HOMESCREEN_URI;  } else   if (component.equals(MixnMatchColumns.KEY_LOCKSCREEN)) {    return ThemesColumns.LOCKSCREEN_URI;  } else   if (component.equals(MixnMatchColumns.KEY_BOOT_ANIM)) {    return ThemesColumns.BOOT_ANIM_URI;  } else   if (component.equals(MixnMatchColumns.KEY_FONT)) {    return ThemesColumns.FONT_URI;  } else   if (component.equals(MixnMatchColumns.KEY_ICONS)) {    return ThemesColumns.ICON_URI;  } else   if (component.equals(MixnMatchColumns.KEY_STATUS_BAR)) {    return ThemesColumns.STATUSBAR_URI;  } else   if (component.equals(MixnMatchColumns.KEY_NOTIFICATIONS)) {    throw new IllegalArgumentException("Notifications mixnmatch component does not have a related column");  } else   if (component.equals(MixnMatchColumns.KEY_RINGTONE)) {    throw new IllegalArgumentException("Ringtone mixnmatch component does not have a related column");  } else   if (component.equals(MixnMatchColumns.KEY_OVERLAYS)) {    return ThemesColumns.OVERLAYS_URI;  } else   if (component.equals(MixnMatchColumns.KEY_ALARM)) {    throw new IllegalArgumentException("Alarm mixnmatch component does not have a related column");  } else   if (component.equals(MixnMatchColumns.KEY_NAVIGATION_BAR)) {    throw new IllegalArgumentException("Navigation bar mixnmatch component does not have a related column");  } else   if (component.equals(MixnMatchColumns.KEY_LIVE_LOCK_SCREEN)) {    throw new IllegalArgumentException("Live lock screen mixnmatch component does not have a related column");  }  return null;}  }
class C{  public void clear(){  map.clear();}  }
class C{  private static void printXmlFields(ClassRef cref){  FieldRef[] fields=cref.getFieldArray();  for (int i=0; i < fields.length; i++) {    FieldRef fref=fields[i];    out.println(IN3 + "<field name=\"" + fref.getName()+ "\" type=\""+ descriptorToDot(fref.getTypeName())+ "\"/>");  }}  }
class C{  public StringNormalizingReader(String s){  string=s;  length=s.length();}  }
class C{  public void removeAt(int index){  System.arraycopy(mKeys,index + 1,mKeys,index,mSize - (index + 1));  System.arraycopy(mValues,index + 1,mValues,index,mSize - (index + 1));  mSize--;}  }
class C{  public Executor(Logger logger,File cmd){  this.logger=logger;  this.cmd=cmd.getAbsolutePath();}  }
class C{  public static StackTraceElement[] approxSourceStackTraceElement(Node node){  ArrayList<StackTraceElement> elements=new ArrayList<>();  Node n=node;  while (n != null) {    if (n instanceof MethodCallTargetNode) {      elements.add(((MethodCallTargetNode)n).targetMethod().asStackTraceElement(-1));      n=((MethodCallTargetNode)n).invoke().asNode();    }    if (n instanceof StateSplit) {      FrameState state=((StateSplit)n).stateAfter();      elements.addAll(Arrays.asList(approxSourceStackTraceElement(state)));      break;    }    n=n.predecessor();  }  return elements.toArray(new StackTraceElement[elements.size()]);}  }
class C{  public void copy(){  if (selectionStart != selectionEnd) {    Clipboard clipboard=getToolkit().getSystemClipboard();    String selection=getSelectedText();    int repeatCount=inputHandler.getRepeatCount();    StringBuffer buf=new StringBuffer();    for (int i=0; i < repeatCount; i++)     buf.append(selection);    clipboard.setContents(new StringSelection(buf.toString()),null);  }}  }
class C{  public DistributedLogClientBuilder periodicOwnershipSyncIntervalMs(long intervalMs){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setPeriodicOwnershipSyncIntervalMs(intervalMs);  return newBuilder;}  }
class C{  @Override public int hashCode(){  int result=23;  result=HashUtilities.hashCode(result,this.radius);  return result;}  }
class C{  public void slashSlashComments(boolean flag){  slashSlashComments=flag;}  }
class C{  public DefaultDOMFactory(){}  }
class C{  public Vector makeCellVector(int colIndex,String value){  if (value.trim().isEmpty()) {    return VectorFactory.createZeroVector(flagConfig.vectortype(),flagConfig.dimension());  }  Vector valueVector=null;  boolean useTabular=true;  if (useTabular) {switch (columnTypes[colIndex].getType()) {case STRING:      valueVector=randomElementalVectors.getVector(value);    break;case DOUBLE:  valueVector=columnTypes[colIndex].getDoubleValueVector(flagConfig,Double.parseDouble(value));break;}} else {switch (flagConfig.elementalmethod()) {case RANDOM:valueVector=randomElementalVectors.getVector(value);break;case CONTENTHASH:case ORTHOGRAPHIC:valueVector=orthographicVectorStore.getVector(value);break;}}if (valueVector == null) {return VectorFactory.createZeroVector(flagConfig.vectortype(),flagConfig.dimension());}Vector boundColVal=columnHeaders[colIndex].getVector().copy();boundColVal.bind(valueVector);return boundColVal;}  }
class C{  public void paintTextAreaBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private String stateToString(long s){  return super.toString() + "[phase = " + phaseOf(s)+ " parties = "+ partiesOf(s)+ " arrived = "+ arrivedOf(s)+ "]";}  }
class C{  public void showContent(){  mSlidingMenu.showContent();}  }
class C{  private void parseSessionDescription(){  sessionDescription.version=getLine(bin);  if (getToken(bin,"o=")) {    sessionDescription.origin=getLine(bin);  }  if (getToken(bin,"s=")) {    sessionDescription.sessionName=getLine(bin);  }  if (getToken(bin,"i=")) {    sessionDescription.sessionInfo=getLine(bin);  }  if (getToken(bin,"u=")) {    sessionDescription.uri=getLine(bin);  }  if (getToken(bin,"e=")) {    sessionDescription.email=getLine(bin);  }  if (getToken(bin,"p=")) {    sessionDescription.phone=getLine(bin);  }  if (getToken(bin,"c=")) {    sessionDescription.connectionInfo=getLine(bin);  }  while (getToken(bin,"b=")) {    sessionDescription.bandwidthInfo=getLine(bin);  }  sessionDescription.timeDescriptions=new Vector<>();  while (getToken(bin,"t=")) {    TimeDescription timeDescription=parseTimeDescription();    this.sessionDescription.timeDescriptions.addElement(timeDescription);  }  if (getToken(bin,"z=")) {    sessionDescription.timezoneAdjustment=getLine(bin);  }  if (getToken(bin,"k=")) {    sessionDescription.encryptionKey=getLine(bin);  }  sessionDescription.sessionAttributes=new Vector<>();  while (getToken(bin,"a=")) {    String sessionAttribute=getLine(bin);    int index=sessionAttribute.indexOf(':');    if (index > 0) {      String name=sessionAttribute.substring(0,index);      String value=sessionAttribute.substring(index + 1);      MediaAttribute attribute=new MediaAttribute(name,value);      sessionDescription.sessionAttributes.addElement(attribute);    }  }}  }
class C{  public static void printError(int errorCode,String parameter){  printError(errorCode,new String[]{parameter});}  }
class C{  public boolean isStpState(){  return isStpState;}  }
class C{  public static String stripFileProtocol(String uriString){  if (uriString.startsWith("file://")) {    uriString=uriString.substring(7);  }  return uriString;}  }
class C{  void createTableIndexIfNeeded(final Connection connection){  DBQueries.createIndexTable(tableName,primaryKeyAttribute.getAttributeType(),getAttribute().getAttributeType(),connection);  DBQueries.createIndexOnTable(tableName,connection);}  }
class C{  public static CCLens3D action(CGPoint pos,float r,ccGridSize gridSize,float d){  return new CCLens3D(pos,r,gridSize,d);}  }
class C{  public CompiledST lookupTemplate(String name){  if (name.charAt(0) != '/')   name="/" + name;  if (verbose)   System.out.println(getName() + ".lookupTemplate(" + name+ ")");  CompiledST code=rawGetTemplate(name);  if (code == NOT_FOUND_ST) {    if (verbose)     System.out.println(name + " previously seen as not found");    return null;  }  if (code == null)   code=load(name);  if (code == null)   code=lookupImportedTemplate(name);  if (code == null) {    if (verbose)     System.out.println(name + " recorded not found");    templates.put(name,NOT_FOUND_ST);  }  if (verbose)   if (code != null)   System.out.println(getName() + ".lookupTemplate(" + name+ ") found");  return code;}  }
class C{  public Session beginTransaction(){  log.trace("beginTransaction({})",sessionFactoryName);  Session session=getSession();  if (!session.getTransaction().isActive()) {    session.beginTransaction();  }  return session;}  }
class C{  DebugInfoDecoder(byte[] encoded,int codesize,int regSize,boolean isStatic,CstMethodRef ref,DexFile file){  if (encoded == null) {    throw new NullPointerException("encoded == null");  }  this.encoded=encoded;  this.isStatic=isStatic;  this.desc=ref.getPrototype();  this.file=file;  this.regSize=regSize;  positions=new ArrayList<PositionEntry>();  locals=new ArrayList<LocalEntry>();  this.codesize=codesize;  lastEntryForReg=new LocalEntry[regSize];  int idx=-1;  try {    idx=file.getStringIds().indexOf(new CstString("this"));  } catch (  IllegalArgumentException ex) {  }  thisStringIdx=idx;}  }
class C{  public void executeQuery(){  issue.removeAll();  executeQuery(issue);}  }
class C{  private Promise<Void> promiseAction(final Action action,final ActionEvent event){  if (action instanceof PromisableAction) {    return ((PromisableAction)action).promise(event);  } else {    action.actionPerformed(event);    return Promises.resolve(null);  }}  }
class C{  String root(){  return root;}  }
class C{  private void createContentContainer(){  this.container=new Composite(this,SWT.NONE);  final GridData tempContainer=new GridData(GridData.FILL,GridData.FILL,true,true,2,1);  tempContainer.widthHint=700;  tempContainer.heightHint=550;  this.container.setLayoutData(tempContainer);}  }
class C{  public boolean isPerfectSquare(int num){  if (num < 4) {    return num == 1;  }  int l=1;  int r=num / 2;  while (l <= r) {    int m=l + (r - l) / 2;    long t=m * m;    if (t == num) {      return true;    } else     if (t > num) {      r=m - 1;    } else {      l=m + 1;    }  }  return false;}  }
class C{  void addAlias(String alias){  if ((aliases == null) || (aliases.size() == 0)) {    aliases=new ArrayList<String>();  }  aliases.add(alias);}  }
class C{  private boolean isLoggedIn(){  return !TextUtils.isEmpty(UserInfo.INSTANCE.getAuthToken());}  }
class C{  public SimpleFragmentIntent<F> replaceExtras(Bundle extras){  this.extras=extras != null ? new Bundle(extras) : null;  return this;}  }
class C{  public static MetaProperty hasProperty(Object self,String name){  return InvokerHelper.getMetaClass(self).hasProperty(self,name);}  }
class C{  public boolean isMarketDataRunning(Contract contract){  if (m_client.isConnected()) {    if (m_marketDataRequests.containsKey(contract.getId())) {      return true;    }  }  return false;}  }
class C{  protected void clearAttacks(){  isStrafing=false;  strafingCoords.clear();  clientgui.bv.clearStrafingCoords();  if (ce() == null) {    return;  }  Enumeration<AbstractEntityAction> i=attacks.elements();  while (i.hasMoreElements()) {    Object o=i.nextElement();    if (o instanceof WeaponAttackAction) {      WeaponAttackAction waa=(WeaponAttackAction)o;      ce().getEquipment(waa.getWeaponId()).setUsedThisRound(false);    }  }  attacks.removeAllElements();  removeTempAttacks();  ce().setSecondaryFacing(ce().getFacing());  ce().setArmsFlipped(false);}  }
class C{  @Override public void endProcessSubTokens(){  addSubToken(tok,vals);  tok="";  vals=null;}  }
class C{  public void createConstituentAnnotationFromTree(TreebankLanguagePack aTreebankLanguagePack,boolean aCreatePos){  createConstituentAnnotationFromTree(aTreebankLanguagePack,tokenTree.getTree(),null,aCreatePos);}  }
class C{  private boolean isPeacefulShutdownEvent(final DebuggerReply message){  return message.success() && ((message instanceof DetachReply) || (message instanceof TerminateReply) || (message instanceof ProcessClosedReply));}  }
class C{  public AccountHeaderBuilder withOnAccountHeaderItemLongClickListener(AccountHeader.OnAccountHeaderItemLongClickListener onAccountHeaderItemLongClickListener){  this.mOnAccountHeaderItemLongClickListener=onAccountHeaderItemLongClickListener;  return this;}  }
class C{  void print(PrintStream ps){  double[] values=getValues();  ps.print("    ");  ps.print(getIndicator());  ps.print(": ");  if (values.length == 0) {    ps.print("null");  } else   if (values.length == 1) {    ps.print(values[0]);  } else {    ps.println();    if (showAggregate) {      ps.print("        Aggregate: ");      ps.println(getAggregateValue());    }    if (statistics.isEmpty()) {      ps.print("        Min: ");      ps.println(getMin());      ps.print("        Median: ");      ps.println(getMedian());      ps.print("        Max: ");      ps.println(getMax());    } else {      for (      UnivariateStatistic statistic : statistics) {        ps.print("        ");        ps.print(statistic.getClass().getSimpleName());        ps.print(": ");        ps.println(getStatistic(statistic));      }    }    ps.print("        Count: ");    ps.print(getCount());    if (showStatisticalSignificance) {      ps.println();      ps.print("        Indifferent: ");      ps.print(getIndifferentAlgorithms());    }    if (showIndividualValues) {      ps.println();      ps.print("        Values: ");      ps.print(Arrays.toString(values));    }  }  ps.println();}  }
class C{  @Override public URLConnection openConnection(URL url,Proxy proxy) throws IOException {  if (url == null) {    throw new IllegalArgumentException("url == null");  }  String host=url.getHost();  if (host == null || host.isEmpty() || host.equalsIgnoreCase("localhost")) {    return new FileURLConnection(url);  }  URL ftpURL=new URL("ftp",host,url.getFile());  return (proxy == null) ? ftpURL.openConnection() : ftpURL.openConnection(proxy);}  }
class C{  public SQLInvalidAuthorizationSpecException(Throwable cause){  super(cause);}  }
class C{  private void navigateProduct(Product p,int segment) throws ODataException {  if (p == null)   throw new NullPointerException("Input product is null.");  NavigationSegment nextSeg=navigationSegments.get(segment);  EdmEntitySet es=nextSeg.getEntitySet();  Node prodNode=p;  if (nextSeg.getKeyPredicates().isEmpty()) {    if (es.getName().equals(V1Model.NODE.getName()))     this.result=prodNode.getNodes(); else     if (es.getName().equals(V1Model.ATTRIBUTE.getName()))     this.result=prodNode.getAttributes(); else     if (es.getName().equals(V1Model.CLASS.getName()))     this.result=prodNode.getItemClass(); else     if (es.getName().equals(V1Model.PRODUCT.getName()))     this.result=p.getProducts();  } else {    KeyPredicate kp=nextSeg.getKeyPredicates().get(0);    if (es.getName().equals(V1Model.NODE.getName())) {      Node n=prodNode.getNodes().get(getKeyValue(kp,String.class));      if (navigationSegments.size() == segment + 1)       this.result=n; else       navigateNode(n,segment + 1);    } else     if (es.getName().equals(V1Model.ATTRIBUTE.getName())) {      this.result=prodNode.getAttributes().get(getKeyValue(kp,String.class));    } else     if (es.getName().equals(V1Model.PRODUCT.getName())) {      Product res=p.getProducts().get(getKeyValue(kp,String.class));      if (navigationSegments.size() == segment + 1)       this.result=res; else       navigateProduct(res,segment + 1);    } else     if (es.getName().equals(V1Model.CLASS.getName())) {      Product res=p.getProducts().get(getKeyValue(kp,String.class));      if (navigationSegments.size() == segment + 1)       this.result=res; else       navigateProduct(res,segment + 1);    }  }}  }
class C{  @Deprecated public void addFileMenuItem(JMenuItem menuItem){  getFile().add(menuItem);}  }
class C{  public boolean add(Object o){  if (!(o instanceof GraphicsNode)) {    throw new IllegalArgumentException(o + " is not a GraphicsNode");  }  GraphicsNode node=(GraphicsNode)o;{    fireGraphicsNodeChangeStarted(node);  }  if (node.getParent() != null) {    node.getParent().getChildren().remove(node);  }  ensureCapacity(count + 1);  children[count++]=node;  ((AbstractGraphicsNode)node).setParent(this);  ((AbstractGraphicsNode)node).setRoot(this.getRoot());  invalidateGeometryCache();  fireGraphicsNodeChangeCompleted();  return true;}  }
class C{  public void generateAtom(XmlWriter w,ExtensionProfile extProfile) throws IOException {  Set<XmlNamespace> nsDecls=new LinkedHashSet<XmlNamespace>(namespaceDeclsAtom);  nsDecls.addAll(extProfile.getNamespaceDecls());  ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>(3);  if (state.kind != null && Service.getVersion().isAfter(Service.Versions.V1)) {    nsDecls.add(Namespaces.gNs);    attrs.add(new XmlWriter.Attribute(Namespaces.gAlias,"kind",state.kind));  }  if (state.etag != null && !Service.getVersion().isCompatible(Service.Versions.V1)) {    nsDecls.add(Namespaces.gNs);    attrs.add(new XmlWriter.Attribute(Namespaces.gAlias,"etag",state.etag));  }  if (state.fields != null && Service.getVersion().isAfter(Service.Versions.V1)) {    nsDecls.add(Namespaces.gNs);    attrs.add(new XmlWriter.Attribute(Namespaces.gAlias,"fields",state.fields));  }  AttributeGenerator generator=new AttributeGenerator();  putAttributes(generator);  generateAttributes(attrs,generator);  generateStartElement(w,Namespaces.atomNs,"entry",attrs,nsDecls);  if (state.id != null) {    w.simpleElement(Namespaces.atomNs,"id",null,state.id);  }  if (state.published != null) {    w.simpleElement(Namespaces.atomNs,"published",null,state.published.toString());  }  if (state.updated != null) {    w.simpleElement(Namespaces.atomNs,"updated",null,state.updated.toString());  }  if (state.edited != null) {    w.simpleElement(getAtomPubNs(),"edited",null,state.edited.toString());  }  if (state.pubControl != null) {    state.pubControl.generateAtom(w,extProfile);  }  w.startRepeatingElement();  for (  Category cat : state.categories) {    cat.generateAtom(w);  }  w.endRepeatingElement();  if (state.title != null) {    state.title.generateAtom(w,"title");  }  if (state.summary != null) {    state.summary.generateAtom(w,"summary");  }  if (state.rights != null) {    state.rights.generateAtom(w,"rights");  }  if (state.content != null) {    state.content.generateAtom(w,extProfile);  }  w.startRepeatingElement();  for (  Link link : state.links) {    link.generateAtom(w,extProfile);  }  w.endRepeatingElement();  w.startRepeatingElement();  for (  Person author : state.authors) {    author.generateAtom(extProfile,w,"author");  }  w.endRepeatingElement();  w.startRepeatingElement();  for (  Person contributor : state.contributors) {    contributor.generateAtom(extProfile,w,"contributor");  }  w.endRepeatingElement();  if (state.source != null) {    state.source.generateAtom(w,extProfile);  }  generateExtensions(w,extProfile);  w.endElement(Namespaces.atomNs,"entry");}  }
class C{  @Override public void close() throws Exception {  replyConsumer.close();  requestProducer.close();  queueSession.deleteQueue(replyQueue);}  }
class C{  public static _ItemNamespaceEnum fromString(final String value) throws SOAPSerializationException {  return (_ItemNamespaceEnum)Enumeration.fromString(value,_ItemNamespaceEnum.VALUES_TO_INSTANCES);}  }
class C{  private void createBasicStats(Iterable<? extends Comparable<?>> data,Map<String,Double> stats){  double n=0.0;  double sum=0.0;  double sum2=0.0;  double sum3=0.0;  double sum4=0.0;  double mean=0.0;  double sumOfDiffSquares=0.0;  double sumOfDiffCubics=0.0;  double sumOfDiffQuads=0.0;  for (  Comparable<?> cell : data) {    if (!(cell instanceof Number)) {      continue;    }    Number numericCell=(Number)cell;    if (!MathUtils.isCalculatable(numericCell)) {      continue;    }    double val=numericCell.doubleValue();    if (!stats.containsKey(MIN) || val < stats.get(MIN)) {      stats.put(MIN,val);    }    if (!stats.containsKey(MAX) || val > stats.get(MAX)) {      stats.put(MAX,val);    }    n++;    double val2=val * val;    sum+=val;    sum2+=val2;    sum3+=val2 * val;    sum4+=val2 * val2;    double delta=val - mean;    double deltaN=delta / n;    double deltaN2=deltaN * deltaN;    double term1=delta * deltaN * (n - 1.0);    mean+=deltaN;    sumOfDiffQuads+=term1 * deltaN2 * (n * n - 3.0 * n + 3.0) + 6.0 * deltaN2 * sumOfDiffSquares - 4.0 * deltaN * sumOfDiffCubics;    sumOfDiffCubics+=term1 * deltaN * (n - 2.0) - 3.0 * deltaN * sumOfDiffSquares;    sumOfDiffSquares+=term1;  }  stats.put(N,n);  stats.put(SUM,sum);  stats.put(SUM2,sum2);  stats.put(SUM3,sum3);  stats.put(SUM4,sum4);  stats.put(MEAN,mean);  stats.put(SUM_OF_DIFF_QUADS,sumOfDiffQuads);  stats.put(SUM_OF_DIFF_CUBICS,sumOfDiffCubics);  stats.put(SUM_OF_DIFF_SQUARES,sumOfDiffSquares);  stats.put(VARIANCE,sumOfDiffSquares / (n - 1.0));  stats.put(POPULATION_VARIANCE,sumOfDiffSquares / n);  stats.put(SKEWNESS,(sumOfDiffCubics / n) / Math.pow(sumOfDiffSquares / n,3.0 / 2.0) - 3.0);  stats.put(KURTOSIS,(n * sumOfDiffQuads) / (sumOfDiffSquares * sumOfDiffSquares) - 3.0);}  }
class C{  public static double pointToAngle(Rectangle r,Point p){  int px=p.x - (r.x + r.width / 2);  int py=p.y - (r.y + r.height / 2);  return atan2(py * r.width,px * r.height);}  }
class C{  public void writeString(String s) throws IOException {  int n=s.length();  int off=0;  while (n > 0) {    int toCopy=Math.min(n,this.buff.length - this.len);    s.getBytes(off,off + toCopy,this.buff,this.len);    this.len+=toCopy;    off+=toCopy;    n-=toCopy;    if (this.buff.length == this.len) {      this.out.write(this.buff,0,this.len);      this.len=0;    }  }}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public Profiler(String name){  this.name=name;}  }
class C{  public static int parseDigitValue(String s) throws NumberFormatException {  int value=-1;  if (s.length() > 0) {    value=Integer.parseInt(s,10);  }  return value;}  }
class C{  public void updateTreeGreyness(){  updateSubTreeGreyness(new TreePath(this.model.getRoot()));}  }
class C{  public void removeMsrpTransactionInfo(String transactionId){  if (mTransactionInfoMap != null && transactionId != null) {synchronized (mTransactionMsgIdMapLock) {      if (mMessageTransactionMap != null) {        MsrpTransactionInfo transactionInfo=getMsrpTransactionInfo(transactionId);        if (transactionInfo != null && transactionInfo.mMsrpMsgId != null) {          mMessageTransactionMap.remove(transactionInfo.mMsrpMsgId);        }      }      mTransactionInfoMap.remove(transactionId);    }  }}  }
class C{  static String processJiraDashboardUrl(String dashboardUrl){  dashboardUrl=dashboardUrl.trim();  Matcher m=Pattern.compile("(?:https?://)?(.*?)(?:/secure(?:/Dashboard.jspa)?.*)?").matcher(dashboardUrl);  if (m.matches()) {    dashboardUrl="http://" + m.group(1);  }  return dashboardUrl;}  }
class C{  public void readXml(java.io.Reader reader) throws SQLException {  wrs=new WebRowSetImpl();  wrs.readXml(reader);  crsInternal=(CachedRowSetImpl)wrs;}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  public SecurityException(){}  }
class C{  private void addPoint(Point p){  Coordinate coord=p.getCoordinate();  insertPoint(argIndex,coord,Location.INTERIOR);}  }
class C{  public static void showBalloon(Project project,String message,MessageType messageType){  final JFrame frame=WindowManager.getInstance().getFrame(project.isDefault() ? null : project);  if (frame == null)   return;  final JComponent component=frame.getRootPane();  if (component == null)   return;  final Rectangle rect=component.getVisibleRect();  final Point p=new Point(rect.x + rect.width - 10,rect.y + 10);  final RelativePoint point=new RelativePoint(component,p);  JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(message,messageType.getDefaultIcon(),messageType.getPopupBackground(),null).setShowCallout(false).setCloseButtonEnabled(true).createBalloon().show(point,Balloon.Position.atLeft);}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  public boolean hasMax(){  return super.hasAttribute(MAX);}  }
class C{  private void addRelatedFiles(LessSource source,Set<File> files){  files.add(new File(source.getAbsolutePath()));  for (  LessSource lessImport : source.getImports().values()) {    addRelatedFiles(lessImport,files);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGraphPackage.SCOPE__DECLARATIONS:    return declarations != null && !declarations.isEmpty();case SGraphPackage.SCOPE__EVENTS:  return !getEvents().isEmpty();case SGraphPackage.SCOPE__VARIABLES:return !getVariables().isEmpty();case SGraphPackage.SCOPE__REACTIONS:return reactions != null && !reactions.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public boolean hasFeed(){  return hasElement(Feed.KEY);}  }
class C{  public void updateBinaryStream(String columnName,java.io.InputStream x,int length) throws SQLException {  updateBinaryStream(findColumn(columnName),x,length);}  }
class C{  private void parseArguments(final String[] args){  if (args.length == 0) {    System.out.println("Too few arguments.");    System.exit(1);  }  Iterator<String> argIter=new ArgumentParser(args).iterator();  String arg=argIter.next();  if (arg.equals("-h") || arg.equals("--help")) {    System.exit(0);  } else {    this.configfile=arg;    if (argIter.hasNext()) {      System.out.println("Too many arguments.");      System.exit(1);    }  }}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof SolarisPrincipal))   return false;  SolarisPrincipal that=(SolarisPrincipal)o;  if (this.getName().equals(that.getName()))   return true;  return false;}  }
class C{  public List<Pair<Subspace,ModifiableDBIDs>> determineClusters(){  List<Pair<Subspace,ModifiableDBIDs>> clusters=new ArrayList<>();  for (  CLIQUEUnit<V> unit : getDenseUnits()) {    if (!unit.isAssigned()) {      ModifiableDBIDs cluster=DBIDUtil.newHashSet();      CLIQUESubspace<V> model=new CLIQUESubspace<>(getDimensions());      clusters.add(new Pair<Subspace,ModifiableDBIDs>(model,cluster));      dfs(unit,cluster,model);    }  }  return clusters;}  }
class C{  private static int IsInstanceOf(JNIEnvironment env,int objJREF,int classJREF){  if (traceJNI)   VM.sysWrite("JNI called: IsInstanceOf  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Class<?> cls=(Class<?>)env.getJNIRef(classJREF);    Object obj=env.getJNIRef(objJREF);    if (obj == null)     return 1;    RVMType RHStype=ObjectModel.getObjectType(obj);    RVMType LHStype=java.lang.JikesRVMSupport.getTypeForClass(cls);    return (LHStype == RHStype || RuntimeEntrypoints.isAssignableWith(LHStype,RHStype)) ? 1 : 0;  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public static void selectSuccessors(final ZyGraph graph,final NaviNode node){  Preconditions.checkNotNull(graph,"IE01483: Graph argument can not be null");  Preconditions.checkNotNull(node,"IE01761: Node argument can not be null");  final SelectableGraph<NaviNode> selectableGraph=SelectableGraph.wrap(graph);  if (graph.getSettings().getProximitySettings().getProximityBrowsingFrozen()) {    GraphHelpers.selectSuccessors(selectableGraph,node);  } else {    graph.selectNodes(GraphConverters.convert(graph,GraphAlgorithms.getSuccessors(node.getRawNode())),true);  }}  }
class C{  public static <T>T castOrFail(Object object,Class<T> clazz){  requireNonNull(clazz);  if (object == null) {    throw new NoSuchElementException("null is not an instance of " + clazz.getName());  }  return Optional.of(object).filter(null).map(null).get();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:33.774 -0500",hash_original_method="A36333A6F745F23182438BFF478F971C",hash_generated_method="3E83C3693072E036EE6283AD07E42258") public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  public QueryBuilder(@NotNull String sql){  append(sql);}  }
class C{  public CannotCompileException(String msg,Throwable e){  this(msg);  initCause(e);}  }
class C{  protected void deleteStorePath(){  FileFactory.FileType fileType=FileFactory.getFileType(this.carbonStorePath);  CarbonFile carbonFile=FileFactory.getCarbonFile(this.carbonStorePath,fileType);  deleteRecursiveSilent(carbonFile);}  }
class C{  public static void checkState(boolean expression,Object errorMessage){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public JenkinsHttpClient(URI uri){  this.context=uri.getPath();  if (!context.endsWith("/")) {    context+="/";  }  this.uri=uri;  this.mapper=getDefaultMapper();  HttpParams httpParameters=new BasicHttpParams();  HttpConnectionParams.setConnectionTimeout(httpParameters,10000);  HttpConnectionParams.setSoTimeout(httpParameters,10000);  this.client=new DefaultHttpClient(new PoolingClientConnectionManager(),httpParameters);}  }
class C{  public boolean isCollapsed(int row){  return !isExpanded(row);}  }
class C{  @VisibleForTesting void addPendingInvalidation(Context context,String account,PendingInvalidation invalidation){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  String oldAccount=prefs.getString(DELAYED_ACCOUNT_NAME,null);  Set<String> invals=prefs.getStringSet(DELAYED_INVALIDATIONS,new HashSet<String>(1));  assert invals.isEmpty() || oldAccount != null;  if (oldAccount != null && !oldAccount.equals(account)) {    invals.clear();  }  SharedPreferences.Editor editor=prefs.edit();  editor.putString(DELAYED_ACCOUNT_NAME,account);  if (invalidation.mObjectSource == 0 || (oldAccount != null && invals.isEmpty())) {    editor.putStringSet(DELAYED_INVALIDATIONS,null);  } else {    invals.add(invalidation.encodeToString());    editor.putStringSet(DELAYED_INVALIDATIONS,invals);  }  editor.apply();}  }
class C{  public void writeGolomb(int divisor,int value){  int q=value / divisor;  for (int i=0; i < q; i++) {    writeBit(1);  }  writeBit(0);  int r=value - q * divisor;  int bit=31 - Integer.numberOfLeadingZeros(divisor - 1);  if (r < ((2 << bit) - divisor)) {    bit--;  } else {    r+=(2 << bit) - divisor;  }  for (; bit >= 0; bit--) {    writeBit((r >>> bit) & 1);  }}  }
class C{  public void paintProgressBarForeground(SynthContext ctx,Graphics g,int x,int y,int w,int h,int orientation){  Component c=ctx.getComponent();  boolean ltr=c.getComponentOrientation().isLeftToRight();  if (orientation == SwingConstants.VERTICAL) {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.rotate(Math.toRadians(-90));    paintForeground(ctx,g,0,0,h,w,transform);  } else   if (orientation == SwingConstants.HORIZONTAL && ltr) {    paintForeground(ctx,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x + w,0);    transform.scale(-1,1);    paintForeground(ctx,g,0,y,w,h,transform);  }}  }
class C{  public void printUsage(){  Debug.output(programName + " Arguments:");  for (int i=0; i < args.size(); i++) {    ArgParser.Arg arg=(ArgParser.Arg)args.elementAt(i);    StringBuffer sb=new StringBuffer();    String filler=arg.name.length() < 6 ? "\t\t" : "\t";    sb.append("  -").append(arg.name).append(filler).append(arg.description);    if (arg.numExpectedValues == TO_END) {      sb.append(" (Variable number of arguments expected)");    } else     if (arg.numExpectedValues == 1) {      sb.append(" (1 argument expected)");    } else {      sb.append(" (").append(arg.numExpectedValues).append(" arguments expected)");    }    Debug.output(sb.toString());  }}  }
class C{  private PDFObject find(PDFObject root,String key) throws IOException {  PDFObject names=root.getDictRef("Names");  if (names != null) {    return findInArray(names.getArray(),key);  }  PDFObject kidsObj=root.getDictRef("Kids");  if (kidsObj != null) {    PDFObject[] kids=kidsObj.getArray();    for (int i=0; i < kids.length; i++) {      PDFObject limitsObj=kids[i].getDictRef("Limits");      if (limitsObj != null) {        String lowerLimit=limitsObj.getAt(0).getStringValue();        String upperLimit=limitsObj.getAt(1).getStringValue();        if ((key.compareTo(lowerLimit) >= 0) && (key.compareTo(upperLimit) <= 0)) {          return find(kids[i],key);        }      }    }  }  return null;}  }
class C{  public void loadToolboxContents(String toolboxXml){  loadToolboxContents(new ByteArrayInputStream(toolboxXml.getBytes()));}  }
class C{  public List<VideoItem> queryAll(Uri uri,long lastId){  return FilmstripContentQueries.forCameraPath(mContentResolver,uri,VideoDataQuery.QUERY_PROJECTION,lastId,QUERY_ORDER,this);}  }
class C{  public void unregister() throws XMPPException {  Registration register=new Registration();  register.setFrom(connection.getUser());  register.setTo(entityJID);  register.setType(IQ.Type.SET);  register.setRemove(true);  PacketCollector resultCollector=connection.createPacketCollector(new PacketIDFilter(register.getPacketID()));  connection.sendPacket(register);  Packet result=resultCollector.nextResult(SmackConfiguration.getPacketReplyTimeout());  resultCollector.cancel();  if (result != null && result instanceof IQ) {    IQ resultIQ=(IQ)result;    if (resultIQ.getError() != null) {      throw new XMPPException(resultIQ.getError());    }    if (resultIQ.getType() == IQ.Type.ERROR) {      throw new XMPPException(resultIQ.getError());    }    RosterEntry gatewayEntry=roster.getEntry(entityJID);    roster.removeEntry(gatewayEntry);  } else {    throw new XMPPException("Packet reply timeout");  }}  }
class C{  public void drawString(AttributedCharacterIterator iterator,int x,int y){  drawString(iterator,(float)x,(float)y);}  }
class C{  protected Graphics2D createPathGraphics(PeekGraphics peekGraphics,PrinterJob printerJob,Printable painter,PageFormat pageFormat,int pageIndex){  PSPathGraphics pathGraphics;  PeekMetrics metrics=peekGraphics.getMetrics();  if (forcePDL == false && (forceRaster == true || metrics.hasNonSolidColors() || metrics.hasCompositing())) {    pathGraphics=null;  } else {    BufferedImage bufferedImage=new BufferedImage(8,8,BufferedImage.TYPE_INT_RGB);    Graphics2D bufferedGraphics=bufferedImage.createGraphics();    boolean canRedraw=peekGraphics.getAWTDrawingOnly() == false;    pathGraphics=new PSPathGraphics(bufferedGraphics,printerJob,painter,pageFormat,pageIndex,canRedraw);  }  return pathGraphics;}  }
class C{  public CarbonFile closeChannle(){  CarbonUtil.closeStreams(this.fileDataOutStream);  CarbonFile carbonFile=FileFactory.getCarbonFile(fileName,FileFactory.getFileType(fileName));  if (!carbonFile.renameTo(fileName.substring(0,this.fileName.lastIndexOf('.')))) {    LOGGER.info("file renaming failed from _0.querymerged to _0");  }  return carbonFile;}  }
class C{  @Override void animateValue(float fraction){  super.animateValue(fraction);  int numValues=mValues.length;  for (int i=0; i < numValues; ++i) {    mValues[i].setAnimatedValue(mTarget);  }}  }
class C{  public synchronized StringBuffer append(char ch){  append0(ch);  return this;}  }
class C{  public AbstractDrawingViewAction(@Nullable DrawingEditor editor){  setEditor(editor);}  }
class C{  public static void w(String tag,String msg){  w(tag,msg,null);}  }
class C{  public final Address pop3(){  return uncheckedDequeue();}  }
class C{  public MRUSet(int maxSize){  Assert.isLegal(maxSize > 0);  fMaxSize=maxSize;}  }
class C{  public void resetKeyframe(int duration){  this.startKeyframe(duration);  this.endKeyframe();}  }
class C{  public PropertyTable unsort(){  sorted=false;  widget.refillData();  return this;}  }
class C{  public void updateArc(float latPoint,float lonPoint,int w,int h,float s,float e,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkArc.write(latPoint,lonPoint,0,0,w,h,s,e,properties,link.dos);}  }
class C{  public TrustListDataType clone(){  TrustListDataType result=new TrustListDataType();  result.SpecifiedLists=SpecifiedLists;  result.TrustedCertificates=TrustedCertificates == null ? null : TrustedCertificates.clone();  result.TrustedCrls=TrustedCrls == null ? null : TrustedCrls.clone();  result.IssuerCertificates=IssuerCertificates == null ? null : IssuerCertificates.clone();  result.IssuerCrls=IssuerCrls == null ? null : IssuerCrls.clone();  return result;}  }
class C{  public final void publishInfoMessage(String asynchMsgId,String... values){  System.out.flush();}  }
class C{  public boolean showNextNotification(){  int i=getSelectedIndex();  if (i != -1 && i < getNotficationCount() - 1) {    model.setSelectedItem(model.getElementAt(i + 1));    return true;  }  return false;}  }
class C{  @Check public void checkExtensionValidators(FDModel model){  CheckMode mode=getCheckMode();  for (  IFDeployExternalValidator validator : ValidatorRegistry.getValidatorMap().get(mode)) {    validator.validateModel(model,getMessageAcceptor());  }}  }
class C{  public void testConstrDoublePosInfinity(){  double a=Double.POSITIVE_INFINITY;  try {    new BigDecimal(a);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.FIELD_ACCESSOR__DECLARED_NAME:    setDeclaredName((LiteralOrComputedPropertyName)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public Range findRangeBounds(XYDataset dataset){  if (dataset == null) {    return null;  }  double min=Double.POSITIVE_INFINITY;  double max=Double.NEGATIVE_INFINITY;  TableXYDataset d=(TableXYDataset)dataset;  int itemCount=d.getItemCount();  for (int i=0; i < itemCount; i++) {    double[] stackValues=getStackValues((TableXYDataset)dataset,d.getSeriesCount(),i);    min=Math.min(min,stackValues[0]);    max=Math.max(max,stackValues[1]);  }  if (min == Double.POSITIVE_INFINITY) {    return null;  }  return new Range(min,max);}  }
class C{  public static <T>List<T> nCopies(final int length,T object){  return new CopiesList<T>(length,object);}  }
class C{  public LayerTree(){  this.initialize(null,null);}  }
class C{  public boolean canCreateFolder(AcsAccessObject acs,ArchiveObject arch,String entidad) throws Exception {  boolean can=false;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    can=FolderMdoFdr.canCreateFolder(dbConn,acs.getAccessToken(),arch.getArchiveToken());  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  private void initDictionaryCacheInfo(List<String> dictionaryKeys,List<DictionaryColumnUniqueIdentifier> dictionaryColumnUniqueIdentifiers,Cache reverseDictionaryCache,String carbonStorePath) throws KettleException {  long lruCacheStartTime=System.currentTimeMillis();  try {    List reverseDictionaries=reverseDictionaryCache.getAll(dictionaryColumnUniqueIdentifiers);    for (int i=0; i < reverseDictionaries.size(); i++) {      Dictionary reverseDictionary=(Dictionary)reverseDictionaries.get(i);      getDictionaryCaches().put(dictionaryKeys.get(i),reverseDictionary);      updateMaxKeyInfo(dictionaryKeys.get(i),reverseDictionary.getDictionaryChunks().getSize());    }    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordLruCacheLoadTime((System.currentTimeMillis() - lruCacheStartTime) / 1000.0);  } catch (  CarbonUtilException e) {    throw new KettleException(e.getMessage());  }}  }
class C{  private void createPreference(String Attribute,String Value,int AD_Window_ID){  int AD_Preference_ID=getNextID(getAD_Client_ID(),"AD_Preference");  StringBuffer sqlCmd=new StringBuffer("INSERT INTO AD_Preference ");  sqlCmd.append("(AD_Preference_ID,").append(m_stdColumns).append(",");  sqlCmd.append("Attribute,Value,AD_Window_ID) VALUES (");  sqlCmd.append(AD_Preference_ID).append(",").append(m_stdValues).append(",");  sqlCmd.append("'").append(Attribute).append("','").append(Value).append("',");  if (AD_Window_ID == 0)   sqlCmd.append("NULL)"); else   sqlCmd.append(AD_Window_ID).append(")");  int no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());  if (no != 1)   log.log(Level.SEVERE,"Preference NOT inserted - " + Attribute);}  }
class C{  public SystemPropertiesLoader withLocal(){  withLocal=true;  return this;}  }
class C{  @After public void tearDown(TestContext context){  vertx.close(context.asyncAssertSuccess());}  }
class C{  public Matrix3f rotateXYZ(Vector3f angles){  return rotateXYZ(angles.x,angles.y,angles.z);}  }
class C{  public Property weekOfWeekyear(){  return new Property(this,getChronology().weekOfWeekyear());}  }
class C{  void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {}  }
class C{  public PolygonRenderer(){  this(Constants.EDGE_TYPE_LINE);}  }
class C{  Object processValue(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  int type=getType();  Object processedValue=null;switch (type) {case T_AVT:    processedValue=processAVT(handler,uri,name,rawName,value,owner);  break;case T_CDATA:processedValue=processCDATA(handler,uri,name,rawName,value,owner);break;case T_CHAR:processedValue=processCHAR(handler,uri,name,rawName,value,owner);break;case T_ENUM:processedValue=processENUM(handler,uri,name,rawName,value,owner);break;case T_EXPR:processedValue=processEXPR(handler,uri,name,rawName,value,owner);break;case T_NMTOKEN:processedValue=processNMTOKEN(handler,uri,name,rawName,value,owner);break;case T_PATTERN:processedValue=processPATTERN(handler,uri,name,rawName,value,owner);break;case T_NUMBER:processedValue=processNUMBER(handler,uri,name,rawName,value,owner);break;case T_QNAME:processedValue=processQNAME(handler,uri,name,rawName,value,owner);break;case T_QNAMES:processedValue=processQNAMES(handler,uri,name,rawName,value);break;case T_QNAMES_RESOLVE_NULL:processedValue=processQNAMESRNU(handler,uri,name,rawName,value);break;case T_SIMPLEPATTERNLIST:processedValue=processSIMPLEPATTERNLIST(handler,uri,name,rawName,value,owner);break;case T_URL:processedValue=processURL(handler,uri,name,rawName,value,owner);break;case T_YESNO:processedValue=processYESNO(handler,uri,name,rawName,value);break;case T_STRINGLIST:processedValue=processSTRINGLIST(handler,uri,name,rawName,value);break;case T_PREFIX_URLLIST:processedValue=processPREFIX_URLLIST(handler,uri,name,rawName,value);break;case T_ENUM_OR_PQNAME:processedValue=processENUM_OR_PQNAME(handler,uri,name,rawName,value,owner);break;case T_NCNAME:processedValue=processNCNAME(handler,uri,name,rawName,value,owner);break;case T_AVT_QNAME:processedValue=processAVT_QNAME(handler,uri,name,rawName,value,owner);break;case T_PREFIXLIST:processedValue=processPREFIX_LIST(handler,uri,name,rawName,value);break;default :}return processedValue;}  }
class C{  private static int determineType(byte[] bytes){  int offset=0;  if (bytes.length >= 3 && (bytes[0] & 0xFF) == 0xEF && (bytes[1] & 0xFF) == 0xBB && (bytes[2] & 0xFF) == 0xBF) {    offset+=3;  }  while (offset < bytes.length && bytes[offset] == ' ' || bytes[offset] == '\t' || bytes[offset] == '\r' || bytes[offset] == '\n' || bytes[offset] == '\f') {    offset++;  }  return determineType(new String(bytes,offset,Math.min(8,bytes.length - offset)));}  }
class C{  BiLinearInterpolator(SpatialGrid sg){  this.sg=sg;}  }
class C{  public ST createSingleton(Token templateToken){  String template;  if (templateToken.getType() == GroupParser.BIGSTRING || templateToken.getType() == GroupParser.BIGSTRING_NO_NL) {    template=Misc.strip(templateToken.getText(),2);  } else {    template=Misc.strip(templateToken.getText(),1);  }  CompiledST impl=compile(getFileName(),null,null,template,templateToken);  ST st=createStringTemplateInternally(impl);  st.groupThatCreatedThisInstance=this;  st.impl.hasFormalArgs=false;  st.impl.name=ST.UNKNOWN_NAME;  st.impl.defineImplicitlyDefinedTemplates(this);  return st;}  }
class C{  @Override public void onServiceConnected(Messenger m){  mRemoteService=DownloaderServiceMarshaller.CreateProxy(m);  mRemoteService.onClientUpdated(mDownloaderClientStub.getMessenger());}  }
class C{  public void emit(final HtmlEscapeStringBuilder out,final Block root){  root.removeSurroundingEmptyLines();switch (root.type) {case NONE:    break;case PARAGRAPH:  this.config.decorator.openParagraph(out);break;case BLOCKQUOTE:this.config.decorator.openBlockquote(out);break;case FENCED_CODE:if (this.config.codeBlockEmitter == null) {this.config.decorator.openCodeBlock(out);}break;case UNORDERED_LIST:this.config.decorator.openUnorderedList(out);break;case ORDERED_LIST:this.config.decorator.openOrderedList(out);break;case LIST_ITEM:this.config.decorator.openListItem(out);out.appendHtml('>');break;}if (root.hasLines()) {this.emitLines(out,root);} else {Block block=root.blocks;while (block != null) {this.emit(out,block);block=block.next;}}switch (root.type) {case NONE:break;case PARAGRAPH:this.config.decorator.closeParagraph(out);break;case BLOCKQUOTE:this.config.decorator.closeBlockquote(out);break;case FENCED_CODE:if (this.config.codeBlockEmitter == null) {this.config.decorator.closeCodeBlock(out);}break;case UNORDERED_LIST:this.config.decorator.closeUnorderedList(out);break;case ORDERED_LIST:this.config.decorator.closeOrderedList(out);break;case LIST_ITEM:this.config.decorator.closeListItem(out);break;}}  }
class C{  public void flushBuffer() throws IOException {  if (pos > 0) {    written+=pos;    flush(buf,0,pos);    pos=0;  }}  }
class C{  public static boolean interfaceOf(Object obj,Object interfaceObject){  Class<?> interfaceClass=interfaceObject.getClass();  return interfaceOf(obj,interfaceClass);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getConstraintToken_();}  }
class C{  public static void close(UrbanSimParameterConfigModuleV3 module){  try {    log.info("Closing UrbanSimPersonCSVWriter ...");    assert (UrbanSimPersonCSVWriter.personWriter != null);    personWriter.flush();    personWriter.close();    log.info("Copying " + module.getMATSim4OpusTemp() + FILE_NAME+ " to "+ module.getMATSim4OpusOutput()+ FILE_NAME);    IOUtils.copyFile(new File(module.getMATSim4OpusTemp() + FILE_NAME),new File(module.getMATSim4OpusOutput() + FILE_NAME));    log.info("... done!");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public IntervalXYDelegate(XYDataset dataset,boolean autoWidth){  ParamChecks.nullNotPermitted(dataset,"dataset");  this.dataset=dataset;  this.autoWidth=autoWidth;  this.intervalPositionFactor=0.5;  this.autoIntervalWidth=Double.POSITIVE_INFINITY;  this.fixedIntervalWidth=1.0;}  }
class C{  public static boolean equals(double[] vec1,double[] vec2){  if (vec1.length != vec2.length) {    return (false);  }  for (int i=0; i < vec1.length; ++i) {    if (vec1[i] != vec2[i]) {      return (false);    }  }  return (true);}  }
class C{  public Duration minusSeconds(long secondsToSubtract){  return (secondsToSubtract == Long.MIN_VALUE ? plusSeconds(Long.MAX_VALUE).plusSeconds(1) : plusSeconds(-secondsToSubtract));}  }
class C{  public synchronized OMGraphicList prepare(){  Projection projection=getProjection();  if (projection == null) {    System.err.println("Terrain Layer needs to be added to the MapBean before it can be used!");    return new OMGraphicList();  }  Debug.message("basic",getName() + "|TerrainLayer.prepare(): doing it");  profileTool.setScreenParameters(projection);  LOSTool.setScreenParameters(projection);  return currentTool.getGraphics();}  }
class C{  public static HawkBuilder init(Context context){  HawkUtils.checkNull("Context",context);  hawkFacade=null;  return new HawkBuilder(context);}  }
class C{  private boolean runEqualsCheck(DataIdentifier dat1,DataIdentifier dat2) throws LanguageException {  LOG.trace("PARFOR: runEqualsCheck.");  if (dat1 instanceof IndexedIdentifier != dat2 instanceof IndexedIdentifier)   return false;  boolean ret=true;  LinearFunction f1=getLinearFunction(dat1);  LinearFunction f2=getLinearFunction(dat2);  forceConsistency(f1,f2);  ret=f1.equals(f2);  LOG.trace("PARFOR: f1: " + f1.toString());  LOG.trace("PARFOR: f2: " + f2.toString());  LOG.trace("PARFOR: (f1==f2): " + ret);  if (!CONSERVATIVE_CHECK && !ret) {    boolean ixid=(dat1 instanceof IndexedIdentifier && dat2 instanceof IndexedIdentifier);    boolean ignoreRow=ixid && isRowIgnorable((IndexedIdentifier)dat1,(IndexedIdentifier)dat2);    boolean ignoreCol=ixid && isColumnIgnorable((IndexedIdentifier)dat1,(IndexedIdentifier)dat2);    LinearFunction f1p=null, f2p=null;    if (ignoreRow) {      f1p=getColLinearFunction(dat1);      f2p=getColLinearFunction(dat2);    }    if (ignoreCol) {      f1p=getRowLinearFunction(dat1);      f2p=getRowLinearFunction(dat2);    }    if (f1p != null && f2p != null) {      forceConsistency(f1p,f2p);      ret=f1p.equals(f2p);      LOG.trace("PARFOR: f1p: " + f1p.toString());      LOG.trace("PARFOR: f2p: " + f2p.toString());      LOG.trace("PARFOR: (f1p==f2p): " + ret);    }  }  return ret;}  }
class C{  private String validatePassword(String password){  if (password.length() < mPasswordMinLength) {    return getString(mIsAlphaMode ? R.string.lockpassword_password_too_short : R.string.lockpassword_pin_too_short,mPasswordMinLength);  }  if (password.length() > mPasswordMaxLength) {    return getString(mIsAlphaMode ? R.string.lockpassword_password_too_long : R.string.lockpassword_pin_too_long,mPasswordMaxLength + 1);  }  int letters=0;  int numbers=0;  int lowercase=0;  int symbols=0;  int uppercase=0;  int nonletter=0;  for (int i=0; i < password.length(); i++) {    char c=password.charAt(i);    if (c < 32 || c > 127) {      return getString(R.string.lockpassword_illegal_character);    }    if (c >= '0' && c <= '9') {      numbers++;      nonletter++;    } else     if (c >= 'A' && c <= 'Z') {      letters++;      uppercase++;    } else     if (c >= 'a' && c <= 'z') {      letters++;      lowercase++;    } else {      symbols++;      nonletter++;    }  }  if (DevicePolicyManager.PASSWORD_QUALITY_NUMERIC == mRequestedQuality && (letters > 0 || symbols > 0)) {    return getString(R.string.lockpassword_pin_contains_non_digits);  } else   if (DevicePolicyManager.PASSWORD_QUALITY_COMPLEX == mRequestedQuality) {    if (letters < mPasswordMinLetters) {      return String.format(getResources().getQuantityString(R.plurals.lockpassword_password_requires_letters,mPasswordMinLetters),mPasswordMinLetters);    } else     if (numbers < mPasswordMinNumeric) {      return String.format(getResources().getQuantityString(R.plurals.lockpassword_password_requires_numeric,mPasswordMinNumeric),mPasswordMinNumeric);    } else     if (lowercase < mPasswordMinLowerCase) {      return String.format(getResources().getQuantityString(R.plurals.lockpassword_password_requires_lowercase,mPasswordMinLowerCase),mPasswordMinLowerCase);    } else     if (uppercase < mPasswordMinUpperCase) {      return String.format(getResources().getQuantityString(R.plurals.lockpassword_password_requires_uppercase,mPasswordMinUpperCase),mPasswordMinUpperCase);    } else     if (symbols < mPasswordMinSymbols) {      return String.format(getResources().getQuantityString(R.plurals.lockpassword_password_requires_symbols,mPasswordMinSymbols),mPasswordMinSymbols);    } else     if (nonletter < mPasswordMinNonLetter) {      return String.format(getResources().getQuantityString(R.plurals.lockpassword_password_requires_nonletter,mPasswordMinNonLetter),mPasswordMinNonLetter);    }  } else {    final boolean alphabetic=DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC == mRequestedQuality;    final boolean alphanumeric=DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC == mRequestedQuality;    if ((alphabetic || alphanumeric) && letters == 0) {      return getString(R.string.lockpassword_password_requires_alpha);    }    if (alphanumeric && numbers == 0) {      return getString(R.string.lockpassword_password_requires_digit);    }  }  if (mLockPatternUtils.checkPasswordHistory(password)) {    return getString(mIsAlphaMode ? R.string.lockpassword_password_recently_used : R.string.lockpassword_pin_recently_used);  }  return null;}  }
class C{  public boolean isMultilineMode(){  return multilineMode;}  }
class C{  public void insertColumn(int at){  insertColumn(at,getDefaultValue());}  }
class C{  @Override public Range findRangeBounds(CategoryDataset dataset){  return findRangeBounds(dataset,true);}  }
class C{  public Builder addToBackStack(boolean addToBackStack){  mAddToBackStack=addToBackStack;  return this;}  }
class C{  public OverScroller(Context context){  this(context,null);}  }
class C{  public void keyTyped(){}  }
class C{  public int readRawLittleEndian32() throws IOException {  final byte b1=readRawByte();  final byte b2=readRawByte();  final byte b3=readRawByte();  final byte b4=readRawByte();  return (((int)b1 & 0xff)) | (((int)b2 & 0xff) << 8) | (((int)b3 & 0xff) << 16)| (((int)b4 & 0xff) << 24);}  }
class C{  public Assignment(String var,boolean val){  this();  map.put(var,ValueFactory.create(val));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static String replaceInvalidCharacters(String source){  source=source.replaceAll(": "," - ");  source=source.replaceAll(":","-");  return source.replaceAll("([\"\\\\:<>|/?*])","");}  }
class C{  public static Collection<UUID> nodeIds(@Nullable Collection<? extends ClusterNode> nodes){  return F.viewReadOnly(nodes,F.node2id());}  }
class C{  private byte[] sendPutForResumingUpload(FileTransferHttpResumeInfo resumeInfo) throws IOException, NetworkException {  int endByte=resumeInfo.getEnd();  long totalSize=mContent.getSize();  if (sLogger.isActivated()) {    sLogger.debug("sendPutForResumingUpload. Already sent from " + resumeInfo.getStart() + " to "+ endByte);  }  URL url=new URL(resumeInfo.getUri().toString());  Map<String,String> properties=new HashMap<>();  properties.put("Connection","Keep-Alive");  properties.put("Content-Type",mContent.getEncoding());  properties.put("Content-Length",String.valueOf(totalSize - (endByte + 1)));  properties.put("Content-Range","bytes " + (endByte + 1) + "-"+ (totalSize - 1)+ "/"+ totalSize);  if (mAuth != null) {    String authValue=mAuth.generateAuthorizationHeaderValue("PUT",url.getPath(),"");    properties.put("Authorization",authValue);  }  DataOutputStream outputStream=null;  HttpURLConnection connection=null;  boolean httpTraceEnabled=isHttpTraceEnabled();  try {    connection=openHttpConnection(url,properties);    connection.setDoInput(true);    connection.setDoOutput(true);    connection.setReadTimeout(HTTP_READ_TIMEOUT);    connection.setRequestMethod("PUT");    String body="";    if (httpTraceEnabled) {      StringBuilder trace=new StringBuilder(">>> Send HTTP request:\nPUT ").append(url);      Map<String,List<String>> headers=connection.getRequestProperties();      for (      Entry<String,List<String>> property : headers.entrySet()) {        trace.append("\n").append(property.getKey()).append(": ").append(property.getValue());      }      trace.append("\n").append(body);      System.out.println(trace);    }    outputStream=new DataOutputStream(connection.getOutputStream());    outputStream.writeBytes(body);    writeRemainingFileData(outputStream,mContent.getUri(),endByte);    if (!isCancelled()) {      int responseCode=connection.getResponseCode();      String message=connection.getResponseMessage();      if (sLogger.isActivated()) {        sLogger.debug("PUT response " + responseCode + " ("+ message+ ")");      }      byte[] result=null;      boolean success=false;      boolean retry=false;switch (responseCode) {case HttpURLConnection.HTTP_OK:        success=true;      InputStream inputStream=connection.getInputStream();    result=convertStreamToString(inputStream);  if (httpTraceEnabled) {    System.out.println("\n" + new String(result));  }break;default :break;}if (success) {return result;} else if (retry) {return sendPutForResumingUpload(resumeInfo);} else {throw new IOException("Received " + responseCode + " from server");}} else if (isPaused()) {if (sLogger.isActivated()) {sLogger.warn("File transfer paused by user");}int responseCode=connection.getResponseCode();if (sLogger.isActivated()) {sLogger.debug("PUT response " + responseCode + " "+ connection.getResponseMessage());}} else {if (sLogger.isActivated()) {sLogger.warn("File transfer cancelled by user");}}return null;} catch (SecurityException e) {sLogger.error("Upload reasume has failed due to that the file is not accessible!",e);getListener().onHttpTransferNotAllowedToSend();return null;} finally {CloseableUtils.tryToClose(outputStream);if (connection != null) {connection.disconnect();}}}  }
class C{  public CSSAndCondition(Condition c1,Condition c2){  super(c1,c2);}  }
class C{  public static String clearAllLastViewed(HttpServletRequest request,HttpServletResponse response){  ProductEvents.clearLastViewedCategories(request,response);  ProductEvents.clearLastViewedProducts(request,response);  ProductSearchSession.clearSearchOptionsHistoryList(request,response);  return "success";}  }
class C{  public HttpWorker(final int actorMaxOperationTimeoutSec,final AsyncHttpClient client,final String requestUrl,final HttpMethod httpMethod,final String postData,final Map<String,String> httpHeaderMap,final ResponseHeaderMeta responseHeaderMeta){  this.actorMaxOperationTimeoutSec=actorMaxOperationTimeoutSec;  this.client=client;  this.requestUrl=requestUrl;  this.httpMethod=httpMethod;  this.postData=postData;  if (httpHeaderMap != null)   this.httpHeaderMap.putAll(httpHeaderMap);  this.responseHeaderMeta=responseHeaderMeta;}  }
class C{  public static final Criterion flagIsUnSet(String flag){  return new CustomFlagCriterion(flag,BooleanOperator.unset());}  }
class C{  public void write(byte b[],int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  int newcount=count + len;  if (newcount > buf.length) {    buf=Utils.copyOf(buf,Math.max(buf.length << 1,newcount));  }  System.arraycopy(b,off,buf,count,len);  count=newcount;}  }
class C{  @DSComment("Utility function") @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.290 -0500",hash_original_method="7552DB2CB2D2F1A34A98DAA2372BF735",hash_generated_method="AF0FA82A7D6CD7394EBC331BCBC5D65F") public static String sqlEscapeString(String value){  StringBuilder escaper=new StringBuilder();  DatabaseUtils.appendEscapedSQLString(escaper,value);  return escaper.toString();}  }
class C{  private void morph(HGPersistentHandle instanceHandle,HGAtomType oldType,HGAtomType newType){  HGPersistentHandle[] layout=store.getLink(instanceHandle);  Object oldInstance=rawMake(layout,oldType,instanceHandle);  TypeUtils.releaseValue(this,oldType,layout[1]);  indexByValue.removeEntry(layout[1],instanceHandle);  layout[1]=TypeUtils.storeValue(this,oldInstance,newType);  indexByValue.addEntry(layout[1],instanceHandle);  store.store(instanceHandle,layout);  Object newInstance=rawMake(layout,newType,instanceHandle);  HGLiveHandle instanceLiveHandle=cache.get(instanceHandle);  if (instanceLiveHandle != null && instanceLiveHandle.getRef() != null)   cache.atomRefresh(instanceLiveHandle,newInstance,true);  if (oldInstance instanceof HGAtomType) {    HGSearchResult<HGPersistentHandle> rs=null;    try {      rs=indexByType.find(instanceHandle);      if (rs.hasNext() && !(newInstance instanceof HGAtomType))       throw new HGException("Cannot replace value of atom " + instanceHandle + " which was a type with something that is not a type");      oldType=(HGAtomType)oldInstance;      newType=(HGAtomType)newInstance;      while (rs.hasNext()) {        morph((HGPersistentHandle)rs.next(),oldType,newType);      }    }  finally {      if (rs != null)       rs.close();    }  }}  }
class C{  public ProtectiveMarking_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_classification=jcas.getRequiredFeatureDE(casType,"classification","uima.cas.String",featOkTst);  casFeatCode_classification=(null == casFeat_classification) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_classification).getCode();  casFeat_caveats=jcas.getRequiredFeatureDE(casType,"caveats","uima.cas.StringArray",featOkTst);  casFeatCode_caveats=(null == casFeat_caveats) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_caveats).getCode();  casFeat_releasability=jcas.getRequiredFeatureDE(casType,"releasability","uima.cas.StringArray",featOkTst);  casFeatCode_releasability=(null == casFeat_releasability) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_releasability).getCode();}  }
class C{  public static PolynomialTerm serializableInstance(){  return new PolynomialTerm(0.0,new int[0]);}  }
class C{  public void close(){}  }
class C{  public CollinsHeadDependencyParser(boolean convertPrepositionsToEdgeLabels){  this(convertPrepositionsToEdgeLabels,new CollinsHeadFinder());}  }
class C{  public int function(int position,float[] genome){  float val=genome[functionSub(position)];  return Util.scale(val,numFunctions);}  }
class C{  protected boolean isCorrectMethod(Method method,Object[] args){  return (proxySignature.equals(method.getName()) && args.length == 1);}  }
class C{  protected void propertyChange(PropertyChangeEvent evt){  super.propertyChange(evt);}  }
class C{  @Override public boolean containsKey(Object key){  return getEntry(key) != null;}  }
class C{  public static void checkAndSetSectorResolutionParam(Element context,AVList params,String paramKey,String paramName,XPath xpath){  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramName == null) {    String message=Logging.getMessage("nullValue.ParameterNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o == null) {    Element[] els=getElements(context,paramName,xpath);    if (els == null || els.length == 0)     return;    LevelSet.SectorResolution[] srs=new LevelSet.SectorResolution[els.length];    for (int i=0; i < els.length; i++) {      LevelSet.SectorResolution sr=getSectorResolutionLimit(els[i],null,xpath);      if (sr != null)       srs[i]=sr;    }    params.setValue(paramKey,srs);  }}  }
class C{  ChildTestIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis);}  }
class C{  public static int compareVersion(String va,String vb){  if (va == null || vb == null) {    throw new IllegalArgumentException(Logging.getMessage("nullValue.StringIsNull"));  }  if (va.equals(vb))   return 0;  String[] vas=va.split("\\.");  String[] vbs=vb.split("\\.");  for (int i=0; i < Math.max(vas.length,vbs.length); i++) {    String sa=vas.length > i ? vas[i] : "0";    String sb=vbs.length > i ? vbs[i] : "0";    if (sa.compareTo(sb) < 0)     return -1;    if (sa.compareTo(sb) > 0)     return 1;  }  return 0;}  }
class C{  public String toURI(){  CharArrayBuffer buffer=new CharArrayBuffer(32);  buffer.append(this.schemeName);  buffer.append("://");  buffer.append(this.hostname);  if (this.port != -1) {    buffer.append(':');    buffer.append(Integer.toString(this.port));  }  return buffer.toString();}  }
class C{  public static byte[] toByteArray(InputStream input,int size) throws IOException {  if (size < 0) {    throw new IllegalArgumentException("Size must be equal or greater than zero: " + size);  }  if (size == 0) {    return new byte[0];  }  byte[] data=new byte[size];  int offset=0;  int readed;  while (offset < size && (readed=input.read(data,offset,size - offset)) != EOF) {    offset+=readed;  }  if (offset != size) {    throw new IOException("Unexpected readed size. current: " + offset + ", excepted: "+ size);  }  return data;}  }
class C{  public Matrix4x3f rotateY(float ang){  return rotateY(ang,this);}  }
class C{  public void delete(Key key){  if (key == null)   throw new NullPointerException("argument to delete() is null");  if (!contains(key))   return;  int i=hash(key);  while (!key.equals(keys[i])) {    i=(i + 1) % m;  }  keys[i]=null;  vals[i]=null;  i=(i + 1) % m;  while (keys[i] != null) {    Key keyToRehash=keys[i];    Value valToRehash=vals[i];    keys[i]=null;    vals[i]=null;    n--;    put(keyToRehash,valToRehash);    i=(i + 1) % m;  }  n--;  if (n > 0 && n <= m / 8)   resize(m / 2);  assert check();}  }
class C{  public static void main(String[] args) throws FileNotFoundException, IOException {  int maxMoves=500;  NondominatedPopulation results=new Executor().withProblemClass(AntProblem.class,openDataFile(),maxMoves).withAlgorithm("NSGAII").withProperty("populationSize",500).withMaxEvaluations(500000).run();  AntProblem problem=new AntProblem(openDataFile(),maxMoves);  problem.evaluate(results.get(0));  problem.displayLastEvaluation();}  }
class C{  public FastBlurFilter(int radius){  if (radius < 1) {    radius=1;  }  this.radius=radius;}  }
class C{  public boolean hasActiveTransaction(){  return transactionManager.hasActiveTransaction();}  }
class C{  public Matrix compute(Matrix loghyper,Matrix X){  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  final double it2=Math.exp(-2 * loghyper.get(0,0));  Matrix A=X.times(X.transpose());  return addValue(A,1).times(it2);}  }
class C{  public static double mahalanobisDistance(final double[][] B,final double[] a,final double[] c){  assert (B.length == a.length && a.length == c.length) : ERR_MATRIX_INNERDIM;  double sum=0.0;  for (int j=0; j < B[0].length; j++) {    double s=0;    for (int k=0; k < a.length; k++) {      s+=(a[k] - c[k]) * B[k][j];    }    sum+=s * (a[j] - c[j]);  }  return sum;}  }
class C{  public static boolean applyFilterExpression(ExprEvaluator filter,EventBean[] eventsPerStream,ExprEvaluatorContext exprEvaluatorContext){  Boolean result=(Boolean)filter.evaluate(eventsPerStream,true,exprEvaluatorContext);  return (result != null) && result;}  }
class C{  public void testGetIssuerNames(){  X509CRLSelector selector=new X509CRLSelector();  byte[] iss1=new byte[]{48,21,49,19,48,17,6,3,85,4,10,19,10,70,105,114,115,116,32,79,114,103,46};  byte[] iss2=new byte[]{48,22,49,20,48,18,6,3,85,4,10,19,11,83,101,99,111,110,100,32,79,114,103,46};  assertNull("The collection should be null.",selector.getIssuerNames());  try {    selector.addIssuerName(iss1);    selector.addIssuerName(iss2);  } catch (  IOException e) {    e.printStackTrace();    fail("Unexpected IOException was thrown.");  }  Collection<Object> result=selector.getIssuerNames();  assertEquals("The collection should contain all of the specified DNs.",2,result.size());}  }
class C{  @SuppressWarnings({"unchecked"}) public static <T extends Serializable>T deserializeJdk(byte[] bytes) throws IOException, ClassNotFoundException {  ObjectInputStream in=null;  try {    in=new ObjectInputStream(new ByteArrayInputStream(bytes));    return (T)in.readObject();  }  finally {    close(in);  }}  }
class C{  public static File ensureBlockCompressed(File f) throws IOException {  File ret=f;  if (!TabixIndexer.isBlockCompressed(f)) {    Diagnostic.info("blockcompressing file: " + f.getPath());    final File outFile=File.createTempFile(f.getName(),"",f.getAbsoluteFile().getParentFile());    try (InputStream is=FileUtils.createInputStream(f,false)){      try (BlockCompressedOutputStream bcos=new BlockCompressedOutputStream(outFile)){        FileUtils.streamToStream(is,bcos,2048);      }     }     final File mvFile;    if (!FileUtils.isGzipFilename(f)) {      mvFile=new File(f.getParentFile(),f.getName() + FileUtils.GZ_SUFFIX);      if (!f.delete()) {        Diagnostic.warning("failed to remove: " + f.getPath());      }      ret=mvFile;    } else {      mvFile=f;    }    if ((!mvFile.exists() || mvFile.delete()) && !outFile.renameTo(mvFile)) {      Diagnostic.warning("failed to rename temporary file: " + outFile.getPath() + " to: "+ mvFile.getPath());    }  }  return ret;}  }
class C{  public void testInvalidAnalyzesToNothingInput() throws Exception {  String testFile="1 => a";  Analyzer analyzer=new MockAnalyzer(random(),MockTokenizer.SIMPLE,false);  SolrSynonymParser parser=new SolrSynonymParser(true,true,analyzer);  expectThrows(ParseException.class,null);  analyzer.close();}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public static String decodeString(String stringToDecode) throws UnsupportedEncodingException {  return new String(Base64.decode(stringToDecode),"UTF-8");}  }
class C{  public void removeUserCapsNode(String user){  jidCaps.remove(user);}  }
class C{  public Data createData(){  return Data.create(database,new byte[pageSize]);}  }
class C{  protected synchronized void log(AbstractExperimenterTab tab,String msg){  m_TextArea.append("[" + m_Formatter.format(new Date()) + "] ");  if (tab != null)   m_TextArea.append(tab.getTitle() + ": " + msg); else   m_TextArea.append(msg);  m_TextArea.append("\n");  m_TextArea.setCaretPosition(m_TextArea.getDocument().getLength());}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public NotificationChain basicSetStep(Step newStep,NotificationChain msgs){  Step oldStep=step;  step=newStep;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.STATE_CASE__STEP,oldStep,newStep);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static boolean isValidName(String name){  if (name == null) {    return false;  }  return name.length() > 3;}  }
class C{  public CLoadAction(final INaviModule module){  super("Load");  putValue(Action.SMALL_ICON,new ImageIcon(CMain.class.getResource("data/folder.png")));  m_module=module;}  }
class C{  public static Schema schema(int length){  return builder(length).build();}  }
class C{  private void writeHttpEndpoint(LocalContainer container,File configOverrides) throws IOException {  File portXML=new File(configOverrides,"cargo-httpendpoint.xml");  PrintStream writer=ServerConfigUtils.open(portXML);  LocalConfiguration config=container.getConfiguration();  String port=config.getPropertyValue(ServletPropertySet.PORT);  String protocol=config.getPropertyValue(GeneralPropertySet.PROTOCOL);  writer.print("  <httpEndpoint id=\"defaultHttpEndpoint\" http");  if ("https".equals(protocol)) {    writer.print('s');  }  writer.print("Port=\"");  writer.print(port);  String host=container.getConfiguration().getPropertyValue(GeneralPropertySet.HOSTNAME);  if (host != null) {    if ("0.0.0.0".equals(host)) {      host="*";    }    writer.print("\" host=\"");    writer.print(host);  }  writer.println("\">");  writer.println("    <tcpOptions waitToAccept=\"true\" acceptThread=\"true\"/>");  writer.println("  </httpEndpoint>");  ServerConfigUtils.close(writer);}  }
class C{  public void test_getServerAliases(){  init(SERVER);  assertNull(manager.getServerAliases(null,null));  assertNull(manager.getServerAliases("",null));  String[] resArray=manager.getServerAliases(TYPE_RSA,null);  assertNotNull(resArray);  assertEquals("Incorrect length",1,resArray.length);  assertEquals("Incorrect aliase","serverkey_00",resArray[0].toLowerCase());}  }
class C{  public void writeHeaderFile(){  String str1=null;  File file=new File(this.headerFile);  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  try {    if (this.displayMaximum == smallValue) {      this.displayMaximum=this.maximumValue;    }    if (this.displayMinimum == largeValue) {      this.displayMinimum=this.minimumValue;    }    fw=new FileWriter(file,false);    bw=new BufferedWriter(fw);    out=new PrintWriter(bw,true);    str1="Min:\t" + Double.toString(this.minimumValue);    out.println(str1);    str1="Max:\t" + Double.toString(this.maximumValue);    out.println(str1);    str1="North:\t" + Double.toString(this.north);    out.println(str1);    str1="South:\t" + Double.toString(this.south);    out.println(str1);    str1="East:\t" + Double.toString(this.east);    out.println(str1);    str1="West:\t" + Double.toString(this.west);    out.println(str1);    str1="Cols:\t" + Integer.toString(this.numberColumns);    out.println(str1);    str1="Rows:\t" + Integer.toString(this.numberRows);    out.println(str1);    str1="Data Type:\t" + this.dataType;    out.println(str1);    str1="Z Units:\t" + this.zUnits;    out.println(str1);    str1="XY Units:\t" + this.xyUnits;    out.println(str1);    str1="Projection:\t" + this.projection;    out.println(str1);    if (this.dataScale == DATA_SCALE_CONTINUOUS) {      str1="Data Scale:\tcontinuous";    } else     if (this.dataScale == DATA_SCALE_CATEGORICAL) {      str1="Data Scale:\tcategorical";    } else     if (this.dataScale == DATA_SCALE_BOOLEAN) {      str1="Data Scale:\tboolean";    } else     if (this.dataScale == DATA_SCALE_RGB) {      str1="Data Scale:\trgb";    }    out.println(str1);    str1="Display Min:\t" + Double.toString(this.displayMinimum);    out.println(str1);    str1="Display Max:\t" + Double.toString(this.displayMaximum);    out.println(str1);    str1="Preferred Palette:\t" + this.preferredPalette.replace(".plt",".pal");    out.println(str1);    str1="NoData:\t" + Double.toString(this.noDataValue);    out.println(str1);    str1="Byte Order:\t" + this.byteOrder;    out.println(str1);    if (metadata.size() > 0) {      for (int i=0; i < metadata.size(); i++) {        str1="Metadata Entry:\t" + metadata.get(i).replaceAll(":",";");        out.println(str1);      }    }  } catch (  java.io.IOException e) {    System.err.println("Error: " + e.getMessage());  }catch (  Exception e) {    System.err.println("Error: " + e.getMessage());  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }  }}  }
class C{  public boolean isRangeZoomable(){  return this.rangeZoomable;}  }
class C{  public void receiveOneToOneChatInvitation(OneToOneChatSession session){  ContactId contact=session.getRemoteContact();  if (sLogger.isActivated()) {    sLogger.info("Chat invitation from " + contact + " (display="+ session.getRemoteDisplayName()+ ")");  }  OneToOneChatImpl oneToOneChat=getOrCreateOneToOneChat(contact);  session.addListener(oneToOneChat);  ChatMessage firstMessage=session.getFirstMessage();  if (firstMessage != null) {    mOneToOneChatEventBroadcaster.broadcastMessageReceived(firstMessage.getMimeType(),firstMessage.getMessageId());  }}  }
class C{  private static boolean backtrackForSwapWithPreviousFast(Featurizable<IString,String> f){  int indexNextForeign=fEnd(f) + 1;  CoverageSet fCoverage=f.derivation.sourceCoverage;  if (!fCoverage.get(indexNextForeign))   return false;  Featurizable<IString,String> tmp_f=f.prior;  int indexRightmostForeign=indexNextForeign;  while (fStart(tmp_f) != indexNextForeign) {    int fEnd=fEnd(tmp_f);    if (fEnd < indexNextForeign) {      return false;    }    if (fEnd > indexRightmostForeign)     indexRightmostForeign=fEnd;    tmp_f=tmp_f.prior;    if (tmp_f == null)     return false;  }  for (int i=indexNextForeign; i <= indexRightmostForeign; ++i) {    if (!fCoverage.get(i))     return false;  }  return true;}  }
class C{  private Overlay parseOverlay(XmlPullParser parser,MediaItem mediaItem){  final String overlayId=parser.getAttributeValue("",ATTR_ID);  final String type=parser.getAttributeValue("",ATTR_TYPE);  final long durationMs=Long.parseLong(parser.getAttributeValue("",ATTR_DURATION));  final long startTimeMs=Long.parseLong(parser.getAttributeValue("",ATTR_BEGIN_TIME));  final Overlay overlay;  if (OverlayFrame.class.getSimpleName().equals(type)) {    final String filename=parser.getAttributeValue("",ATTR_FILENAME);    overlay=new OverlayFrame(mediaItem,overlayId,filename,startTimeMs,durationMs);  } else {    throw new IllegalArgumentException("Invalid overlay type: " + type);  }  final String overlayRgbFileName=parser.getAttributeValue("",ATTR_OVERLAY_RGB_FILENAME);  if (overlayRgbFileName != null) {    ((OverlayFrame)overlay).setFilename(overlayRgbFileName);    final int overlayFrameWidth=Integer.parseInt(parser.getAttributeValue("",ATTR_OVERLAY_FRAME_WIDTH));    final int overlayFrameHeight=Integer.parseInt(parser.getAttributeValue("",ATTR_OVERLAY_FRAME_HEIGHT));    ((OverlayFrame)overlay).setOverlayFrameWidth(overlayFrameWidth);    ((OverlayFrame)overlay).setOverlayFrameHeight(overlayFrameHeight);    final int resizedRGBFrameWidth=Integer.parseInt(parser.getAttributeValue("",ATTR_OVERLAY_RESIZED_RGB_FRAME_WIDTH));    final int resizedRGBFrameHeight=Integer.parseInt(parser.getAttributeValue("",ATTR_OVERLAY_RESIZED_RGB_FRAME_HEIGHT));    ((OverlayFrame)overlay).setResizedRGBSize(resizedRGBFrameWidth,resizedRGBFrameHeight);  }  return overlay;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.COORDINATE___X1:    return getX_1();case UmplePackage.COORDINATE___Y1:  return getY_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static ChannelData decode(byte binMessage[],char offset,char arrayLen) throws StunException {  return decode(binMessage,offset);}  }
class C{  public static double convertMetersToMiles(double meters){  return (meters * METERS_TO_MILES);}  }
class C{  protected boolean enabledGlobally(){  return true;}  }
class C{  public static ArrayList<Instruction> recompileHopsDag(StatementBlock sb,ArrayList<Hop> hops,LocalVariableMap vars,RecompileStatus status,boolean inplace,long tid) throws DMLRuntimeException, HopsException, LopsException, IOException {  ArrayList<Instruction> newInst=null;synchronized (hops) {    LOG.debug("\n**************** Optimizer (Recompile) *************\nMemory Budget = " + OptimizerUtils.toMB(OptimizerUtils.getLocalMemBudget()) + " MB");    if (!inplace) {      hops=deepCopyHopsDag(hops);    } else {      Hop.resetVisitStatus(hops);      for (      Hop hopRoot : hops)       rClearLops(hopRoot);    }    if (!inplace) {      Hop.resetVisitStatus(hops);      for (      Hop hopRoot : hops)       rReplaceLiterals(hopRoot,vars);    }    Hop.resetVisitStatus(hops);    for (    Hop hopRoot : hops)     rUpdateStatistics(hopRoot,vars);    if (!inplace)     _rewriter.get().rewriteHopDAGs(hops,null);    Hop.resetVisitStatus(hops);    MemoTable memo=new MemoTable();    memo.init(hops,status);    Hop.resetVisitStatus(hops);    for (    Hop hopRoot : hops)     hopRoot.refreshMemEstimates(memo);    memo.extract(hops,status);    Dag<Lop> dag=new Dag<Lop>();    for (    Hop hopRoot : hops) {      Lop lops=hopRoot.constructLops();      lops.addToDag(dag);    }    newInst=dag.getJobs(sb,ConfigurationManager.getDMLConfig());  }  if (tid != 0)   newInst=ProgramConverter.createDeepCopyInstructionSet(newInst,tid,-1,null,null,null,false,false);  if (DMLScript.EXPLAIN == ExplainType.RECOMPILE_HOPS) {    LOG.info("EXPLAIN RECOMPILE \nGENERIC (lines " + sb.getBeginLine() + "-"+ sb.getEndLine()+ "):\n"+ Explain.explainHops(hops,1));  }  if (DMLScript.EXPLAIN == ExplainType.RECOMPILE_RUNTIME) {    LOG.info("EXPLAIN RECOMPILE \nGENERIC (lines " + sb.getBeginLine() + "-"+ sb.getEndLine()+ "):\n"+ Explain.explain(newInst,1));  }  return newInst;}  }
class C{  public boolean hasGpsPoints(){  AreaPanel ap=getTopRow();  return ap != null && ap.getTimeTree() != null;}  }
class C{  public boolean reverseAccrualIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  return false;}  }
class C{  @LargeTest public void testNavigationBySibing() throws Exception {  sExecutedTestCount++;  String html="<!DOCTYPE html>" + "<html>" + "<head>"+ "</head>"+ "<body>"+ "<h1>Heading one</h1>"+ "<p>"+ "This is some text"+ "</p>"+ "<div>"+ "<button>Input</button>"+ "</div>"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_RIGHT,META_STATE_ALT_LEFT_ON);  assertSelectionString("3");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_RIGHT,META_STATE_ALT_LEFT_ON);  assertSelectionString("4");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_RIGHT,META_STATE_ALT_LEFT_ON);  assertSelectionString("5");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<h1>Heading one</h1>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_LEFT,META_STATE_ALT_LEFT_ON);  assertSelectionString("4");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<p>This is some text</p>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<div><button>Input</button></div>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<p>This is some text</p>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<h1>Heading one</h1>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<p>This is some text</p>");}  }
