class C{  public void doSave(){  doSaveFile();}  }
class C{  public static TableElement eliminateEmptyStructures(TableElement te){  for (int i=te.nrOfSections() - 1; i >= 0; i--) {    Section s=te.getSection(i);    if (s.getClass() == SectionContainer.class)     eliminateEmptyStructures((SectionContainer)s); else     if (s.getClass() == SectionContent.class)     eliminateEmptyStructures((SectionContent)s);    if (s.empty())     te.removeSection(s);  }  return te;}  }
class C{  public synchronized void quadTo(float x1,float y1,float x2,float y2){  checkMoveTo();  path.quadTo(x1,y1,x2,y2);  makeRoom(4);  types[numSeg++]=PathIterator.SEG_QUADTO;  values[numVals++]=x1;  values[numVals++]=y1;  cx=values[numVals++]=x2;  cy=values[numVals++]=y2;}  }
class C{  public Object storedData(Object o){  Object last=stored;  stored=o;  return last;}  }
class C{  public int size(){  return this.archives.size();}  }
class C{  public static void addChildResult(HierarchicalResult parent,Result child){  parent.getHierarchy().add(parent,child);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE:  return isSetStore();}throw new IllegalStateException();}  }
class C{  private char[] compile(String pattern){  int length=pattern.length();  boolean inQuote=false;  StringBuilder compiledCode=new StringBuilder(length * 2);  StringBuilder tmpBuffer=null;  int count=0, tagcount=0;  int lastTag=-1, prevTag=-1;  for (int i=0; i < length; i++) {    char c=pattern.charAt(i);    if (c == '\'') {      if ((i + 1) < length) {        c=pattern.charAt(i + 1);        if (c == '\'') {          i++;          if (count != 0) {            encode(lastTag,count,compiledCode);            tagcount++;            prevTag=lastTag;            lastTag=-1;            count=0;          }          if (inQuote) {            tmpBuffer.append(c);          } else {            compiledCode.append((char)(TAG_QUOTE_ASCII_CHAR << 8 | c));          }          continue;        }      }      if (!inQuote) {        if (count != 0) {          encode(lastTag,count,compiledCode);          tagcount++;          prevTag=lastTag;          lastTag=-1;          count=0;        }        if (tmpBuffer == null) {          tmpBuffer=new StringBuilder(length);        } else {          tmpBuffer.setLength(0);        }        inQuote=true;      } else {        int len=tmpBuffer.length();        if (len == 1) {          char ch=tmpBuffer.charAt(0);          if (ch < 128) {            compiledCode.append((char)(TAG_QUOTE_ASCII_CHAR << 8 | ch));          } else {            compiledCode.append((char)(TAG_QUOTE_CHARS << 8 | 1));            compiledCode.append(ch);          }        } else {          encode(TAG_QUOTE_CHARS,len,compiledCode);          compiledCode.append(tmpBuffer);        }        inQuote=false;      }      continue;    }    if (inQuote) {      tmpBuffer.append(c);      continue;    }    if (!(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z')) {      if (count != 0) {        encode(lastTag,count,compiledCode);        tagcount++;        prevTag=lastTag;        lastTag=-1;        count=0;      }      if (c < 128) {        compiledCode.append((char)(TAG_QUOTE_ASCII_CHAR << 8 | c));      } else {        int j;        for (j=i + 1; j < length; j++) {          char d=pattern.charAt(j);          if (d == '\'' || (d >= 'a' && d <= 'z' || d >= 'A' && d <= 'Z')) {            break;          }        }        compiledCode.append((char)(TAG_QUOTE_CHARS << 8 | (j - i)));        for (; i < j; i++) {          compiledCode.append(pattern.charAt(i));        }        i--;      }      continue;    }    int tag;    if ((tag=DateFormatSymbols.patternChars.indexOf(c)) == -1) {      throw new IllegalArgumentException("Illegal pattern character " + "'" + c + "'");    }    if (lastTag == -1 || lastTag == tag) {      lastTag=tag;      count++;      continue;    }    encode(lastTag,count,compiledCode);    tagcount++;    prevTag=lastTag;    lastTag=tag;    count=1;  }  if (inQuote) {    throw new IllegalArgumentException("Unterminated quote");  }  if (count != 0) {    encode(lastTag,count,compiledCode);    tagcount++;    prevTag=lastTag;  }  forceStandaloneForm=(tagcount == 1 && prevTag == PATTERN_MONTH);  int len=compiledCode.length();  char[] r=new char[len];  compiledCode.getChars(0,len,r,0);  return r;}  }
class C{  public void disableFiltering(){  mFilterData=false;}  }
class C{  static void SendInfoToEndlessJabber(Context context){  String EndlessJabber_INTENT="com.mariussoft.endlessjabber.action.extendResponse";  SharedPreferences prefs=context.getSharedPreferences("EndlessJabberSDK",Context.MODE_PRIVATE);  Intent i=new Intent();  i.setAction(EndlessJabber_INTENT);  i.putExtra("Action","UpdateInfo");  i.putExtra("PackageName",context.getPackageName());  i.putExtra("Enabled",prefs.contains("InterfaceClass"));  if (prefs.contains("InterfaceClass")) {    i.putExtra("SendSMS",prefs.getBoolean("SendSMS",false));    i.putExtra("SendMMS",prefs.getBoolean("SendMMS",false));  }  context.sendBroadcast(i);}  }
class C{  public void start(){  if (currentlyLoadedSegmentName == null) {    startLoadingNextLevelSegment();  }}  }
class C{  private static void deleteAllServices() throws Exception {  if (spService_SupplierList != null) {    for (    ServiceProvisioningService sps : spService_SupplierList) {      for (      VOMarketplace marketplace : marketplaces) {        List<VOService> servicesToDelete=sps.getServicesForMarketplace(marketplace.getMarketplaceId());        waitForRefresh=false;        for (        VOService serviceToDelete : servicesToDelete) {          deactivateAndDeleteService(serviceToDelete);        }        waitForRefresh=true;      }    }  }  if (spService_TechnologyProvider != null) {    List<VOTechnicalService> technicalServices=spService_TechnologyProvider.getTechnicalServices(OrganizationRoleType.TECHNOLOGY_PROVIDER);    for (    VOTechnicalService voTechnicalService : technicalServices) {      spService_TechnologyProvider.deleteTechnicalService(voTechnicalService);    }  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  void build(){  XSLTAttributeDef hrefAttr=new XSLTAttributeDef(null,"href",XSLTAttributeDef.T_URL,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef elementsAttr=new XSLTAttributeDef(null,"elements",XSLTAttributeDef.T_SIMPLEPATTERNLIST,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef methodAttr=new XSLTAttributeDef(null,"method",XSLTAttributeDef.T_QNAME,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef versionAttr=new XSLTAttributeDef(null,"version",XSLTAttributeDef.T_NMTOKEN,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef encodingAttr=new XSLTAttributeDef(null,"encoding",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef omitXmlDeclarationAttr=new XSLTAttributeDef(null,"omit-xml-declaration",XSLTAttributeDef.T_YESNO,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef standaloneAttr=new XSLTAttributeDef(null,"standalone",XSLTAttributeDef.T_YESNO,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef doctypePublicAttr=new XSLTAttributeDef(null,"doctype-public",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef doctypeSystemAttr=new XSLTAttributeDef(null,"doctype-system",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef cdataSectionElementsAttr=new XSLTAttributeDef(null,"cdata-section-elements",XSLTAttributeDef.T_QNAMES_RESOLVE_NULL,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef indentAttr=new XSLTAttributeDef(null,"indent",XSLTAttributeDef.T_YESNO,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef mediaTypeAttr=new XSLTAttributeDef(null,"media-type",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef nameAttrRequired=new XSLTAttributeDef(null,"name",XSLTAttributeDef.T_QNAME,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef nameAVTRequired=new XSLTAttributeDef(null,"name",XSLTAttributeDef.T_AVT_QNAME,true,true,XSLTAttributeDef.WARNING);  XSLTAttributeDef nameAVT_NCNAMERequired=new XSLTAttributeDef(null,"name",XSLTAttributeDef.T_NCNAME,true,true,XSLTAttributeDef.WARNING);  XSLTAttributeDef nameAttrOpt_ERROR=new XSLTAttributeDef(null,"name",XSLTAttributeDef.T_QNAME,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef useAttr=new XSLTAttributeDef(null,"use",XSLTAttributeDef.T_EXPR,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef namespaceAVTOpt=new XSLTAttributeDef(null,"namespace",XSLTAttributeDef.T_URL,false,true,XSLTAttributeDef.WARNING);  XSLTAttributeDef decimalSeparatorAttr=new XSLTAttributeDef(null,"decimal-separator",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,".");  XSLTAttributeDef infinityAttr=new XSLTAttributeDef(null,"infinity",XSLTAttributeDef.T_CDATA,false,XSLTAttributeDef.ERROR,"Infinity");  XSLTAttributeDef minusSignAttr=new XSLTAttributeDef(null,"minus-sign",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,"-");  XSLTAttributeDef NaNAttr=new XSLTAttributeDef(null,"NaN",XSLTAttributeDef.T_CDATA,false,XSLTAttributeDef.ERROR,"NaN");  XSLTAttributeDef percentAttr=new XSLTAttributeDef(null,"percent",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,"%");  XSLTAttributeDef perMilleAttr=new XSLTAttributeDef(null,"per-mille",XSLTAttributeDef.T_CHAR,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef zeroDigitAttr=new XSLTAttributeDef(null,"zero-digit",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,"0");  XSLTAttributeDef digitAttr=new XSLTAttributeDef(null,"digit",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,"#");  XSLTAttributeDef patternSeparatorAttr=new XSLTAttributeDef(null,"pattern-separator",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,";");  XSLTAttributeDef groupingSeparatorAttr=new XSLTAttributeDef(null,"grouping-separator",XSLTAttributeDef.T_CHAR,false,XSLTAttributeDef.ERROR,",");  XSLTAttributeDef useAttributeSetsAttr=new XSLTAttributeDef(null,"use-attribute-sets",XSLTAttributeDef.T_QNAMES,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef testAttrRequired=new XSLTAttributeDef(null,"test",XSLTAttributeDef.T_EXPR,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef selectAttrRequired=new XSLTAttributeDef(null,"select",XSLTAttributeDef.T_EXPR,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef selectAttrOpt=new XSLTAttributeDef(null,"select",XSLTAttributeDef.T_EXPR,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef selectAttrDefNode=new XSLTAttributeDef(null,"select",XSLTAttributeDef.T_EXPR,false,XSLTAttributeDef.ERROR,"node()");  XSLTAttributeDef selectAttrDefDot=new XSLTAttributeDef(null,"select",XSLTAttributeDef.T_EXPR,false,XSLTAttributeDef.ERROR,".");  XSLTAttributeDef matchAttrRequired=new XSLTAttributeDef(null,"match",XSLTAttributeDef.T_PATTERN,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef matchAttrOpt=new XSLTAttributeDef(null,"match",XSLTAttributeDef.T_PATTERN,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef priorityAttr=new XSLTAttributeDef(null,"priority",XSLTAttributeDef.T_NUMBER,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef modeAttr=new XSLTAttributeDef(null,"mode",XSLTAttributeDef.T_QNAME,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef spaceAttr=new XSLTAttributeDef(Constants.S_XMLNAMESPACEURI,"space",false,false,false,XSLTAttributeDef.WARNING,"default",Constants.ATTRVAL_STRIP,"preserve",Constants.ATTRVAL_PRESERVE);  XSLTAttributeDef spaceAttrLiteral=new XSLTAttributeDef(Constants.S_XMLNAMESPACEURI,"space",XSLTAttributeDef.T_URL,false,true,XSLTAttributeDef.ERROR);  XSLTAttributeDef stylesheetPrefixAttr=new XSLTAttributeDef(null,"stylesheet-prefix",XSLTAttributeDef.T_CDATA,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef resultPrefixAttr=new XSLTAttributeDef(null,"result-prefix",XSLTAttributeDef.T_CDATA,true,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef disableOutputEscapingAttr=new XSLTAttributeDef(null,"disable-output-escaping",XSLTAttributeDef.T_YESNO,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef levelAttr=new XSLTAttributeDef(null,"level",false,false,false,XSLTAttributeDef.ERROR,"single",Constants.NUMBERLEVEL_SINGLE,"multiple",Constants.NUMBERLEVEL_MULTI,"any",Constants.NUMBERLEVEL_ANY);  levelAttr.setDefault("single");  XSLTAttributeDef countAttr=new XSLTAttributeDef(null,"count",XSLTAttributeDef.T_PATTERN,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef fromAttr=new XSLTAttributeDef(null,"from",XSLTAttributeDef.T_PATTERN,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef valueAttr=new XSLTAttributeDef(null,"value",XSLTAttributeDef.T_EXPR,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef formatAttr=new XSLTAttributeDef(null,"format",XSLTAttributeDef.T_CDATA,false,true,XSLTAttributeDef.ERROR);  formatAttr.setDefault("1");  XSLTAttributeDef langAttr=new XSLTAttributeDef(null,"lang",XSLTAttributeDef.T_NMTOKEN,false,true,XSLTAttributeDef.ERROR);  XSLTAttributeDef letterValueAttr=new XSLTAttributeDef(null,"letter-value",false,true,false,XSLTAttributeDef.ERROR,"alphabetic",Constants.NUMBERLETTER_ALPHABETIC,"traditional",Constants.NUMBERLETTER_TRADITIONAL);  XSLTAttributeDef groupingSeparatorAVT=new XSLTAttributeDef(null,"grouping-separator",XSLTAttributeDef.T_CHAR,false,true,XSLTAttributeDef.ERROR);  XSLTAttributeDef groupingSizeAttr=new XSLTAttributeDef(null,"grouping-size",XSLTAttributeDef.T_NUMBER,false,true,XSLTAttributeDef.ERROR);  XSLTAttributeDef dataTypeAttr=new XSLTAttributeDef(null,"data-type",false,true,true,XSLTAttributeDef.ERROR,"text",Constants.SORTDATATYPE_TEXT,"number",Constants.SORTDATATYPE_TEXT);  dataTypeAttr.setDefault("text");  XSLTAttributeDef orderAttr=new XSLTAttributeDef(null,"order",false,true,false,XSLTAttributeDef.ERROR,"ascending",Constants.SORTORDER_ASCENDING,"descending",Constants.SORTORDER_DESCENDING);  orderAttr.setDefault("ascending");  XSLTAttributeDef caseOrderAttr=new XSLTAttributeDef(null,"case-order",false,true,false,XSLTAttributeDef.ERROR,"upper-first",Constants.SORTCASEORDER_UPPERFIRST,"lower-first",Constants.SORTCASEORDER_LOWERFIRST);  XSLTAttributeDef terminateAttr=new XSLTAttributeDef(null,"terminate",XSLTAttributeDef.T_YESNO,false,false,XSLTAttributeDef.ERROR);  terminateAttr.setDefault("no");  XSLTAttributeDef xslExcludeResultPrefixesAttr=new XSLTAttributeDef(Constants.S_XSLNAMESPACEURL,"exclude-result-prefixes",XSLTAttributeDef.T_PREFIXLIST,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef xslExtensionElementPrefixesAttr=new XSLTAttributeDef(Constants.S_XSLNAMESPACEURL,"extension-element-prefixes",XSLTAttributeDef.T_PREFIX_URLLIST,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef xslUseAttributeSetsAttr=new XSLTAttributeDef(Constants.S_XSLNAMESPACEURL,"use-attribute-sets",XSLTAttributeDef.T_QNAMES,false,false,XSLTAttributeDef.ERROR);  XSLTAttributeDef xslVersionAttr=new XSLTAttributeDef(Constants.S_XSLNAMESPACEURL,"version",XSLTAttributeDef.T_NMTOKEN,false,false,XSLTAttributeDef.ERROR);  XSLTElementDef charData=new XSLTElementDef(this,null,"text()",null,null,null,new ProcessorCharacters(),ElemTextLiteral.class);  charData.setType(XSLTElementDef.T_PCDATA);  XSLTElementDef whiteSpaceOnly=new XSLTElementDef(this,null,"text()",null,null,null,null,ElemTextLiteral.class);  charData.setType(XSLTElementDef.T_PCDATA);  XSLTAttributeDef resultAttr=new XSLTAttributeDef(null,"*",XSLTAttributeDef.T_AVT,false,true,XSLTAttributeDef.WARNING);  XSLTAttributeDef xslResultAttr=new XSLTAttributeDef(Constants.S_XSLNAMESPACEURL,"*",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.WARNING);  XSLTElementDef[] templateElements=new XSLTElementDef[23];  XSLTElementDef[] templateElementsAndParams=new XSLTElementDef[24];  XSLTElementDef[] templateElementsAndSort=new XSLTElementDef[24];  XSLTElementDef[] exsltFunctionElements=new XSLTElementDef[24];  XSLTElementDef[] charTemplateElements=new XSLTElementDef[15];  XSLTElementDef resultElement=new XSLTElementDef(this,null,"*",null,templateElements,new XSLTAttributeDef[]{spaceAttrLiteral,xslExcludeResultPrefixesAttr,xslExtensionElementPrefixesAttr,xslUseAttributeSetsAttr,xslVersionAttr,xslResultAttr,resultAttr},new ProcessorLRE(),ElemLiteralResult.class,20,true);  XSLTElementDef unknownElement=new XSLTElementDef(this,"*","unknown",null,templateElementsAndParams,new XSLTAttributeDef[]{xslExcludeResultPrefixesAttr,xslExtensionElementPrefixesAttr,xslUseAttributeSetsAttr,xslVersionAttr,xslResultAttr,resultAttr},new ProcessorUnknown(),ElemUnknown.class,20,true);  XSLTElementDef xslValueOf=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"value-of",null,null,new XSLTAttributeDef[]{selectAttrRequired,disableOutputEscapingAttr},new ProcessorTemplateElem(),ElemValueOf.class,20,true);  XSLTElementDef xslCopyOf=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"copy-of",null,null,new XSLTAttributeDef[]{selectAttrRequired},new ProcessorTemplateElem(),ElemCopyOf.class,20,true);  XSLTElementDef xslNumber=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"number",null,null,new XSLTAttributeDef[]{levelAttr,countAttr,fromAttr,valueAttr,formatAttr,langAttr,letterValueAttr,groupingSeparatorAVT,groupingSizeAttr},new ProcessorTemplateElem(),ElemNumber.class,20,true);  XSLTElementDef xslSort=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"sort",null,null,new XSLTAttributeDef[]{selectAttrDefDot,langAttr,dataTypeAttr,orderAttr,caseOrderAttr},new ProcessorTemplateElem(),ElemSort.class,19,true);  XSLTElementDef xslWithParam=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"with-param",null,templateElements,new XSLTAttributeDef[]{nameAttrRequired,selectAttrOpt},new ProcessorTemplateElem(),ElemWithParam.class,19,true);  XSLTElementDef xslApplyTemplates=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"apply-templates",null,new XSLTElementDef[]{xslSort,xslWithParam},new XSLTAttributeDef[]{selectAttrDefNode,modeAttr},new ProcessorTemplateElem(),ElemApplyTemplates.class,20,true);  XSLTElementDef xslApplyImports=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"apply-imports",null,null,new XSLTAttributeDef[]{},new ProcessorTemplateElem(),ElemApplyImport.class);  XSLTElementDef xslForEach=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"for-each",null,templateElementsAndSort,new XSLTAttributeDef[]{selectAttrRequired,spaceAttr},new ProcessorTemplateElem(),ElemForEach.class,true,false,true,20,true);  XSLTElementDef xslIf=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"if",null,templateElements,new XSLTAttributeDef[]{testAttrRequired,spaceAttr},new ProcessorTemplateElem(),ElemIf.class,20,true);  XSLTElementDef xslWhen=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"when",null,templateElements,new XSLTAttributeDef[]{testAttrRequired,spaceAttr},new ProcessorTemplateElem(),ElemWhen.class,false,true,1,true);  XSLTElementDef xslOtherwise=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"otherwise",null,templateElements,new XSLTAttributeDef[]{spaceAttr},new ProcessorTemplateElem(),ElemOtherwise.class,false,false,2,false);  XSLTElementDef xslChoose=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"choose",null,new XSLTElementDef[]{xslWhen,xslOtherwise},new XSLTAttributeDef[]{spaceAttr},new ProcessorTemplateElem(),ElemChoose.class,true,false,true,20,true);  XSLTElementDef xslAttribute=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"attribute",null,charTemplateElements,new XSLTAttributeDef[]{nameAVTRequired,namespaceAVTOpt,spaceAttr},new ProcessorTemplateElem(),ElemAttribute.class,20,true);  XSLTElementDef xslCallTemplate=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"call-template",null,new XSLTElementDef[]{xslWithParam},new XSLTAttributeDef[]{nameAttrRequired},new ProcessorTemplateElem(),ElemCallTemplate.class,20,true);  XSLTElementDef xslVariable=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"variable",null,templateElements,new XSLTAttributeDef[]{nameAttrRequired,selectAttrOpt},new ProcessorTemplateElem(),ElemVariable.class,20,true);  XSLTElementDef xslParam=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"param",null,templateElements,new XSLTAttributeDef[]{nameAttrRequired,selectAttrOpt},new ProcessorTemplateElem(),ElemParam.class,19,true);  XSLTElementDef xslText=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"text",null,new XSLTElementDef[]{charData},new XSLTAttributeDef[]{disableOutputEscapingAttr},new ProcessorText(),ElemText.class,20,true);  XSLTElementDef xslProcessingInstruction=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"processing-instruction",null,charTemplateElements,new XSLTAttributeDef[]{nameAVT_NCNAMERequired,spaceAttr},new ProcessorTemplateElem(),ElemPI.class,20,true);  XSLTElementDef xslElement=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"element",null,templateElements,new XSLTAttributeDef[]{nameAVTRequired,namespaceAVTOpt,useAttributeSetsAttr,spaceAttr},new ProcessorTemplateElem(),ElemElement.class,20,true);  XSLTElementDef xslComment=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"comment",null,charTemplateElements,new XSLTAttributeDef[]{spaceAttr},new ProcessorTemplateElem(),ElemComment.class,20,true);  XSLTElementDef xslCopy=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"copy",null,templateElements,new XSLTAttributeDef[]{spaceAttr,useAttributeSetsAttr},new ProcessorTemplateElem(),ElemCopy.class,20,true);  XSLTElementDef xslMessage=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"message",null,templateElements,new XSLTAttributeDef[]{terminateAttr},new ProcessorTemplateElem(),ElemMessage.class,20,true);  XSLTElementDef xslFallback=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"fallback",null,templateElements,new XSLTAttributeDef[]{spaceAttr},new ProcessorTemplateElem(),ElemFallback.class,20,true);  XSLTElementDef exsltFunction=new XSLTElementDef(this,Constants.S_EXSLT_FUNCTIONS_URL,"function",null,exsltFunctionElements,new XSLTAttributeDef[]{nameAttrRequired},new ProcessorExsltFunction(),ElemExsltFunction.class);  XSLTElementDef exsltResult=new XSLTElementDef(this,Constants.S_EXSLT_FUNCTIONS_URL,"result",null,templateElements,new XSLTAttributeDef[]{selectAttrOpt},new ProcessorExsltFuncResult(),ElemExsltFuncResult.class);  int i=0;  templateElements[i++]=charData;  templateElements[i++]=xslApplyTemplates;  templateElements[i++]=xslCallTemplate;  templateElements[i++]=xslApplyImports;  templateElements[i++]=xslForEach;  templateElements[i++]=xslValueOf;  templateElements[i++]=xslCopyOf;  templateElements[i++]=xslNumber;  templateElements[i++]=xslChoose;  templateElements[i++]=xslIf;  templateElements[i++]=xslText;  templateElements[i++]=xslCopy;  templateElements[i++]=xslVariable;  templateElements[i++]=xslMessage;  templateElements[i++]=xslFallback;  templateElements[i++]=xslProcessingInstruction;  templateElements[i++]=xslComment;  templateElements[i++]=xslElement;  templateElements[i++]=xslAttribute;  templateElements[i++]=resultElement;  templateElements[i++]=unknownElement;  templateElements[i++]=exsltFunction;  templateElements[i++]=exsltResult;  System.arraycopy(templateElements,0,templateElementsAndParams,0,i);  System.arraycopy(templateElements,0,templateElementsAndSort,0,i);  System.arraycopy(templateElements,0,exsltFunctionElements,0,i);  templateElementsAndParams[i]=xslParam;  templateElementsAndSort[i]=xslSort;  exsltFunctionElements[i]=xslParam;  i=0;  charTemplateElements[i++]=charData;  charTemplateElements[i++]=xslApplyTemplates;  charTemplateElements[i++]=xslCallTemplate;  charTemplateElements[i++]=xslApplyImports;  charTemplateElements[i++]=xslForEach;  charTemplateElements[i++]=xslValueOf;  charTemplateElements[i++]=xslCopyOf;  charTemplateElements[i++]=xslNumber;  charTemplateElements[i++]=xslChoose;  charTemplateElements[i++]=xslIf;  charTemplateElements[i++]=xslText;  charTemplateElements[i++]=xslCopy;  charTemplateElements[i++]=xslVariable;  charTemplateElements[i++]=xslMessage;  charTemplateElements[i++]=xslFallback;  XSLTElementDef importDef=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"import",null,null,new XSLTAttributeDef[]{hrefAttr},new ProcessorImport(),null,1,true);  XSLTElementDef includeDef=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"include",null,null,new XSLTAttributeDef[]{hrefAttr},new ProcessorInclude(),null,20,true);  XSLTAttributeDef[] scriptAttrs=new XSLTAttributeDef[]{new XSLTAttributeDef(null,"lang",XSLTAttributeDef.T_NMTOKEN,true,false,XSLTAttributeDef.WARNING),new XSLTAttributeDef(null,"src",XSLTAttributeDef.T_URL,false,false,XSLTAttributeDef.WARNING)};  XSLTAttributeDef[] componentAttrs=new XSLTAttributeDef[]{new XSLTAttributeDef(null,"prefix",XSLTAttributeDef.T_NMTOKEN,true,false,XSLTAttributeDef.WARNING),new XSLTAttributeDef(null,"elements",XSLTAttributeDef.T_STRINGLIST,false,false,XSLTAttributeDef.WARNING),new XSLTAttributeDef(null,"functions",XSLTAttributeDef.T_STRINGLIST,false,false,XSLTAttributeDef.WARNING)};  XSLTElementDef[] topLevelElements=new XSLTElementDef[]{includeDef,importDef,whiteSpaceOnly,unknownElement,new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"strip-space",null,null,new XSLTAttributeDef[]{elementsAttr},new ProcessorStripSpace(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"preserve-space",null,null,new XSLTAttributeDef[]{elementsAttr},new ProcessorPreserveSpace(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"output",null,null,new XSLTAttributeDef[]{methodAttr,versionAttr,encodingAttr,omitXmlDeclarationAttr,standaloneAttr,doctypePublicAttr,doctypeSystemAttr,cdataSectionElementsAttr,indentAttr,mediaTypeAttr,XSLTAttributeDef.m_foreignAttr},new ProcessorOutputElem(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"key",null,null,new XSLTAttributeDef[]{nameAttrRequired,matchAttrRequired,useAttr},new ProcessorKey(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"decimal-format",null,null,new XSLTAttributeDef[]{nameAttrOpt_ERROR,decimalSeparatorAttr,groupingSeparatorAttr,infinityAttr,minusSignAttr,NaNAttr,percentAttr,perMilleAttr,zeroDigitAttr,digitAttr,patternSeparatorAttr},new ProcessorDecimalFormat(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"attribute-set",null,new XSLTElementDef[]{xslAttribute},new XSLTAttributeDef[]{nameAttrRequired,useAttributeSetsAttr},new ProcessorAttributeSet(),null,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"variable",null,templateElements,new XSLTAttributeDef[]{nameAttrRequired,selectAttrOpt},new ProcessorGlobalVariableDecl(),ElemVariable.class,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"param",null,templateElements,new XSLTAttributeDef[]{nameAttrRequired,selectAttrOpt},new ProcessorGlobalParamDecl(),ElemParam.class,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"template",null,templateElementsAndParams,new XSLTAttributeDef[]{matchAttrOpt,nameAttrOpt_ERROR,priorityAttr,modeAttr,spaceAttr},new ProcessorTemplate(),ElemTemplate.class,true,20,true),new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"namespace-alias",null,null,new XSLTAttributeDef[]{stylesheetPrefixAttr,resultPrefixAttr},new ProcessorNamespaceAlias(),null,20,true),new XSLTElementDef(this,Constants.S_BUILTIN_EXTENSIONS_URL,"component",null,new XSLTElementDef[]{new XSLTElementDef(this,Constants.S_BUILTIN_EXTENSIONS_URL,"script",null,new XSLTElementDef[]{charData},scriptAttrs,new ProcessorLRE(),ElemExtensionScript.class,20,true)},componentAttrs,new ProcessorLRE(),ElemExtensionDecl.class),new XSLTElementDef(this,Constants.S_BUILTIN_OLD_EXTENSIONS_URL,"component",null,new XSLTElementDef[]{new XSLTElementDef(this,Constants.S_BUILTIN_OLD_EXTENSIONS_URL,"script",null,new XSLTElementDef[]{charData},scriptAttrs,new ProcessorLRE(),ElemExtensionScript.class,20,true)},componentAttrs,new ProcessorLRE(),ElemExtensionDecl.class),exsltFunction};  XSLTAttributeDef excludeResultPrefixesAttr=new XSLTAttributeDef(null,"exclude-result-prefixes",XSLTAttributeDef.T_PREFIXLIST,false,false,XSLTAttributeDef.WARNING);  XSLTAttributeDef extensionElementPrefixesAttr=new XSLTAttributeDef(null,"extension-element-prefixes",XSLTAttributeDef.T_PREFIX_URLLIST,false,false,XSLTAttributeDef.WARNING);  XSLTAttributeDef idAttr=new XSLTAttributeDef(null,"id",XSLTAttributeDef.T_CDATA,false,false,XSLTAttributeDef.WARNING);  XSLTAttributeDef versionAttrRequired=new XSLTAttributeDef(null,"version",XSLTAttributeDef.T_NMTOKEN,true,false,XSLTAttributeDef.WARNING);  XSLTElementDef stylesheetElemDef=new XSLTElementDef(this,Constants.S_XSLNAMESPACEURL,"stylesheet","transform",topLevelElements,new XSLTAttributeDef[]{extensionElementPrefixesAttr,excludeResultPrefixesAttr,idAttr,versionAttrRequired,spaceAttr},new ProcessorStylesheetElement(),null,true,-1,false);  importDef.setElements(new XSLTElementDef[]{stylesheetElemDef,resultElement,unknownElement});  includeDef.setElements(new XSLTElementDef[]{stylesheetElemDef,resultElement,unknownElement});  build(null,null,null,new XSLTElementDef[]{stylesheetElemDef,whiteSpaceOnly,resultElement,unknownElement},null,new ProcessorStylesheetDoc(),null);}  }
class C{  static String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  @Override public boolean isAutoIncrement(int columnIndex){  return false;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == SyntaxRelatedTElement.class) {switch (baseOperationID) {default :      return -1;  }}if (baseClass == TAnnotableElement.class) {switch (baseOperationID) {default :    return -1;}}if (baseClass == AccessibleTypeElement.class) {switch (baseOperationID) {case TypesPackage.ACCESSIBLE_TYPE_ELEMENT___IS_PROVIDED_BY_RUNTIME:  return TypesPackage.TVARIABLE___IS_PROVIDED_BY_RUNTIME;case TypesPackage.ACCESSIBLE_TYPE_ELEMENT___GET_TYPE_ACCESS_MODIFIER:return TypesPackage.TVARIABLE___GET_TYPE_ACCESS_MODIFIER;case TypesPackage.ACCESSIBLE_TYPE_ELEMENT___IS_EXPORTED:return TypesPackage.TVARIABLE___IS_EXPORTED;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:      return N4JSPackage.BINDING_PROPERTY___GET_NAME;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == PropertyNameOwner.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_NAME_OWNER___GET_NAME:  return N4JSPackage.BINDING_PROPERTY___GET_NAME;case N4JSPackage.PROPERTY_NAME_OWNER___IS_VALID_NAME:return N4JSPackage.BINDING_PROPERTY___IS_VALID_NAME;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  default B removeTitle(){  this.meta().removeTitle();  return this.getBuilder();}  }
class C{  private void handleServiceActivation(long orgKey,long triggerDefinitionKey) throws Exception {  ResourceHolder holder=getTriggerProcesses(triggerDefinitionKey);  ResultSet processes=holder.getRs();  while (processes.next()) {    long triggerProcessKey=writeOrgKeyIdentifierForProcess(orgKey,processes);    writeServiceKeyIdentifier(triggerProcessKey);  }  holder.close();}  }
class C{  public static double angleSparse(SparseNumberVector v1,SparseNumberVector v2){  double l1=0., l2=0., cross=0.;  int i1=v1.iter(), i2=v2.iter();  while (v1.iterValid(i1) && v2.iterValid(i2)) {    final int d1=v1.iterDim(i1), d2=v2.iterDim(i2);    if (d1 < d2) {      final double val=v1.iterDoubleValue(i1);      l1+=val * val;      i1=v1.iterAdvance(i1);    } else     if (d2 < d1) {      final double val=v2.iterDoubleValue(i2);      l2+=val * val;      i2=v2.iterAdvance(i2);    } else {      final double val1=v1.iterDoubleValue(i1);      final double val2=v2.iterDoubleValue(i2);      l1+=val1 * val1;      l2+=val2 * val2;      cross+=val1 * val2;      i1=v1.iterAdvance(i1);      i2=v2.iterAdvance(i2);    }  }  while (v1.iterValid(i1)) {    final double val=v1.iterDoubleValue(i1);    l1+=val * val;    i1=v1.iterAdvance(i1);  }  while (v2.iterValid(i2)) {    final double val=v2.iterDoubleValue(i2);    l2+=val * val;    i2=v2.iterAdvance(i2);  }  final double a=(cross == 0.) ? 0. : (l1 == 0. || l2 == 0.) ? 1. : Math.sqrt((cross / l1) * (cross / l2));  return (a < 1.) ? a : 1.;}  }
class C{  public void rotate(double angle){  double cos=Math.cos(angle * Math.PI / 180.0);  double sin=Math.sin(angle * Math.PI / 180.0);  FXGMatrix newM=new FXGMatrix(cos,sin,-sin,cos,0,0);  this.concat(newM);}  }
class C{  public boolean isDone(){  return state.isDone();}  }
class C{  final public MutableString delete(final char c){  final int length=length();  final char[] a=array;  int l=0;  for (int i=0; i < length; i++)   if (a[i] != c)   a[l++]=a[i];  if (l != length) {    if (hashLength < 0) {      hashLength=-1;      array=CharArrays.trim(array,l);    } else     hashLength=l;  }  return this;}  }
class C{  public void toEPL(StringWriter writer,EPStatementFormatter formatter){  writer.append("create context ");  writer.append(contextName);  writer.append(" as ");  descriptor.toEPL(writer,formatter);}  }
class C{  public void testRemove(){  SpellCheckedMetadata meta=new SpellCheckedMetadata();  meta.remove("name-one");  assertEquals(0,meta.size());  meta.add("name-one","value-1.1");  meta.add("name-one","value-1.2");  meta.add("name-two","value-2.2");  assertEquals(2,meta.size());  assertNotNull(meta.get("name-one"));  assertNotNull(meta.get("name-two"));  meta.remove("name-one");  assertEquals(1,meta.size());  assertNull(meta.get("name-one"));  assertNotNull(meta.get("name-two"));  meta.remove("name-two");  assertEquals(0,meta.size());  assertNull(meta.get("name-one"));  assertNull(meta.get("name-two"));}  }
class C{  public void displayPrompt(){  if (GlobalValues.displayDirectory == true)   append("\n" + GlobalValues.workingDir + GlobalValues.groovyLabPromptString); else   append("\n" + GlobalValues.groovyLabPromptString);  String currentText=getText();  lineStart=currentText.length();  setCaretPosition(lineStart);}  }
class C{  public void refresh(){  refreshData();}  }
class C{  public boolean GT(Address addr2){  return value.GT(addr2.value);}  }
class C{  @Override public String globalInfo(){  return "A filter that 'cleanses' the numeric data from values that are too " + "small, too big or very close to a certain value (e.g., 0) and sets " + "these values to a pre-defined default.";}  }
class C{  public TransactionServiceImp(String name,StateRecoveryManager recoverymanager,UniqueIdMgr tidmgr,long maxtimeout,int maxActives,boolean single_threaded_2pc,RecoveryLog recoveryLog){  this(name,recoverymanager,tidmgr,maxtimeout,true,maxActives,single_threaded_2pc,recoveryLog);}  }
class C{  public static String normalizeDerivedAdjective(final String word){  if (isDerivedAdjective(word)) {    return word.substring(0,word.length() - 2);  } else {    return null;  }}  }
class C{  public List<Integer> joinedDimensions(LatticeNode other){  if (dimensions.size() != other.dimensions.size())   return null;  List<Integer> newDimensions=new ArrayList<Integer>();  for (int i=0; i < dimensions.size() - 1; i++) {    if (dimensions.get(i) != other.dimensions.get(i))     return null; else     newDimensions.add(dimensions.get(i));  }  int lastDimension1=dimensions.get(dimensions.size() - 1);  int lastDimension2=other.dimensions.get(dimensions.size() - 1);  if (lastDimension1 == lastDimension2) {    return null;  } else   if (lastDimension1 < lastDimension2) {    newDimensions.add(lastDimension1);    newDimensions.add(lastDimension2);  } else {    newDimensions.add(lastDimension2);    newDimensions.add(lastDimension1);  }  return newDimensions;}  }
class C{  public static void removeMarkers(IResource res) throws CoreException {  System.out.println("Removing JSR 308 markers in " + res.getLocation());  res.deleteMarkers(MarkerReporter.NAME,true,IResource.DEPTH_INFINITE);}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public static void checkBaseAddresses(final JFrame parent,final IDebugger debugger,final IViewContainer viewContainer,final List<MemoryModule> memoryModules){  final List<Pair<INaviModule,MemoryModule>> wronglyPlacedModules=collectWronglyPlacedModules(debugger,viewContainer,memoryModules);  if (!wronglyPlacedModules.isEmpty()) {    for (    final Pair<INaviModule,MemoryModule> pair : wronglyPlacedModules) {      final INaviModule module=pair.first();      final MemoryModule memoryModule=pair.second();      final List<INaviAddressSpace> addressSpaces=viewContainer.getAddressSpaces();      if (addressSpaces == null) {        try {          module.getConfiguration().setImageBase(memoryModule.getBaseAddress().getAddress());        } catch (        final CouldntSaveDataException e) {          CUtilityFunctions.logException(e);        }      } else {        for (        final INaviAddressSpace addressSpace : addressSpaces) {          if (addressSpace.getContent().getModules().contains(module)) {            try {              addressSpace.getContent().setImageBase(module,memoryModule.getBaseAddress().getAddress());            } catch (            final CouldntSaveDataException e) {              CUtilityFunctions.logException(e);            }          }        }      }    }  }}  }
class C{  @SuppressWarnings("static-access") public String sqlAD_getSequenceMaxSystem(String vendorName,String catalogName,String schemaName,String tableName,String columnName){  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add(new StringBuffer("max(").append(normalizeColumnName(vendorName,columnName)).append(")").toString());  ArrayList<String> aliasNames=new ArrayList<String>();  aliasNames.add("MAX_SEQ");  ArrayList<String> conditions=new ArrayList<String>();  conditions.add(new StringBuffer().append(normalizeColumnName(vendorName,columnName)).append(" < ").append(s_parameters.MINUSERLEVELID).toString());  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  return sql_select(vendorName,catalogName,schemaName,tableName,null,columnNames,aliasNames,conditions,sortColumns,false);}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public GemFireRethrowable(String message){  super(message);}  }
class C{  public boolean initialized(){  return state == State.INITIALIZED;}  }
class C{  public Vector4f negate(){  x=-x;  y=-y;  z=-z;  w=-w;  return this;}  }
class C{  public void reverse(){  for (int i=0, size=mTransitionControls.size(); i < size; i++) {    mTransitionControls.get(i).reverse();  }}  }
class C{  @Path("/metrics/{appId}") @DELETE @Consumes(MediaType.APPLICATION_JSON) public Response removeMetricTestMode(@PathParam("appId") String appId){  try {    MonitorController.getInstance().removeTestMetrics(appId);    logger.info("Test Mode turned off for application " + appId);    return RestApiResponseHandler.getResponseOk();  } catch (  Exception e) {    logger.error("Internal_Server_Error",e);    return RestApiResponseHandler.getResponse(Status.INTERNAL_SERVER_ERROR);  }}  }
class C{  public ViolationInfo(Parcel in){  this(in,false);}  }
class C{  public SignatureVisitor visitArrayType(){  return this;}  }
class C{  private void addExternalMethodReferences(ClassRef[] sparseRefs){  for (int i=0; i < mMethodIds.length; i++) {    if (!mTypeIds[mMethodIds[i].classIdx].internal) {      MethodIdItem methodId=mMethodIds[i];      MethodRef newMethodRef=new MethodRef(classNameFromTypeIndex(methodId.classIdx),argArrayFromProtoIndex(methodId.protoIdx),returnTypeFromProtoIndex(methodId.protoIdx),mStrings[methodId.nameIdx]);      sparseRefs[mMethodIds[i].classIdx].addMethod(newMethodRef);    }  }}  }
class C{  protected void writeToRowFromAggregateForUpdateBeforeShallowDelete(AbstractRecord record,Object object,Object attributeValue,AbstractSession session,DatabaseTable table) throws DescriptorException {  if (attributeValue == null) {    if (!this.isNullAllowed) {      throw DescriptorException.nullForNonNullAggregate(object,this);    }  } else   if (!session.isClassReadOnly(attributeValue.getClass()) && !isPrimaryKeyMapping()) {    getObjectBuilder(attributeValue,session).buildRowForUpdateBeforeShallowDelete(record,attributeValue,session,table);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private boolean isAlarmActive(Context context){  return DeleteCacheReceiver.makeCheckAlarmPendingIntent(context) != null;}  }
class C{  synchronized public void start(){  token=lastValidToken=Quorum.NO_QUORUM;  executorService=Executors.newCachedThreadPool(new DaemonThreadFactory("executorService"));  dispatchService=Executors.newSingleThreadScheduledExecutor(new DaemonThreadFactory("dispatchService"));  dispatchService.execute(new DispatcherTask());}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public static Sentence eliminate(Sentence sentence){  BiconditionalElimination eliminator=new BiconditionalElimination();  Sentence result=sentence.accept(eliminator,null);  return result;}  }
class C{  public UniformCrossover(double probability){  this.probability=probability;}  }
class C{  public void onResume(){  Session session=Session.getActiveSession();  if (session != null) {    if (callback != null) {      session.addCallback(callback);    }    if (SessionState.CREATED_TOKEN_LOADED.equals(session.getState())) {      session.openForRead(null);    }  }  IntentFilter filter=new IntentFilter();  filter.addAction(Session.ACTION_ACTIVE_SESSION_SET);  filter.addAction(Session.ACTION_ACTIVE_SESSION_UNSET);  broadcastManager.registerReceiver(receiver,filter);}  }
class C{  public int indexOf(int elem,int index){  if (null == m_map)   return -1;  for (int i=index; i < m_firstFree; i++) {    int node=m_map[i];    if (node == elem)     return i;  }  return -1;}  }
class C{  public static PipelineDraweeControllerBuilder newDraweeControllerBuilder(){  return sDraweeControllerBuilderSupplier.get();}  }
class C{  public static <T>T[] requireNonNullElements(T[] array){  requireNonNull(array,"The provided array is null.");  int len=array.length;  for (int i=0; i < len; i++) {    if (array[i] == null) {      throw new NullPointerException("Item " + i + " in the array "+ Arrays.toString(array)+ " is null");    }  }  return array;}  }
class C{  public EncodedImage toEncodedImage(){  ImageIO io=ImageIO.getImageIO();  if (io != null && io.isFormatSupported(ImageIO.FORMAT_PNG)) {    Image img=toImage();    if (img != null) {      return EncodedImage.createFromImage(img,false);    }  }  return null;}  }
class C{  public Pair<Set<Range<Token>>,Set<Range<Token>>> calculateStreamAndFetchRanges(Collection<Range<Token>> current,Collection<Range<Token>> updated){  Set<Range<Token>> toStream=new HashSet<>();  Set<Range<Token>> toFetch=new HashSet<>();  for (  Range<Token> r1 : current) {    boolean intersect=false;    for (    Range<Token> r2 : updated) {      if (r1.intersects(r2)) {        toStream.addAll(r1.subtract(r2));        intersect=true;      }    }    if (!intersect) {      toStream.add(r1);    }  }  for (  Range<Token> r2 : updated) {    boolean intersect=false;    for (    Range<Token> r1 : current) {      if (r2.intersects(r1)) {        toFetch.addAll(r2.subtract(r1));        intersect=true;      }    }    if (!intersect) {      toFetch.add(r2);    }  }  return Pair.create(toStream,toFetch);}  }
class C{  public Packet pollResult(){  return resultQueue.poll();}  }
class C{  public static void checkAndCreateIds(ExampleSet es) throws OperatorException {  if (es.getAttributes().getId() == null) {    try {      IdTagging idTagging=OperatorService.createOperator(IdTagging.class);      idTagging.apply(es);    } catch (    OperatorCreationException e) {      throw new UserError(null,129);    }  }}  }
class C{  public boolean checkForBusyBoxBinary(){  return checkForBinary("busybox");}  }
class C{  public boolean isConnected(IBlockAccess world,BlockPos current,BlockPos connection,EnumFacing dir,IBlockState state){  BlockPos pos2=connection.add(dir.getDirectionVec());  boolean disableObscured=disableObscuredFaceCheck.or(disableObscuredFaceCheckConfig);  IBlockState con=getBlockOrFacade(world,connection,dir);  IBlockState obscuring=disableObscured ? null : getBlockOrFacade(world,pos2,dir);  if (con == null) {    return false;  }  boolean ret=ignoreStates ? con.getBlock() == state.getBlock() : con == state;  if (obscuring == null) {    return ret;  }  ret&=!obscuring.equals(state);  return ret;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    if (requestedCameraId >= 0) {      theCamera=OpenCameraInterface.open(requestedCameraId);    } else {      theCamera=OpenCameraInterface.open();    }    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);  }  Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Element element;  Attr attribute;  Attr newAttr1;  Attr newAttribute;  NodeList elementList;  String attrName;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=(Element)elementList.item(1);  newAttr1=doc.createAttributeNS("http://www.w3.org/DOM/L1","street");  newAttribute=element.setAttributeNodeNS(newAttr1);  attributes=element.getAttributes();  attribute=(Attr)attributes.getNamedItemNS("http://www.w3.org/DOM/L1","street");  attrName=attribute.getNodeName();  assertEquals("namednodemapgetnameditemns04","street",attrName);}  }
class C{  public boolean informedGrantor(){  return this.reply != null && this.reply.isOK();}  }
class C{  public void readEnumerated() throws IOException {  if (tag != ASN1Constants.TAG_ENUM) {    throw expected("enumerated");  }  if (length == 0) {    throw new ASN1Exception("ASN.1 enumerated: wrong length for identifier at [" + tagOffset + "]");  }  readContent();  if (length > 1) {    int bits=buffer[contentOffset] & 0xFF;    if (buffer[contentOffset + 1] < 0) {      bits+=0x100;    }    if (bits == 0 || bits == 0x1FF) {      throw new ASN1Exception("ASN.1 enumerated: wrong content at [" + contentOffset + "]. An integer MUST be encoded in minimum number of octets");    }  }}  }
class C{  public SocketException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  private Caption parseDialogueForASS(String[] line,String[] dialogueFormat,float timer,TimedTextObject tto){  Caption newCaption=new Caption();  String captionText=line[9];  newCaption.content=captionText.replaceAll("\\{.*?\\}","").replace("\n","<br />").replace("\\N","<br />");  for (int i=0; i < dialogueFormat.length; i++) {    if (dialogueFormat[i].trim().equalsIgnoreCase("Style")) {      Style s=tto.styling.get(line[i].trim());      if (s != null)       newCaption.style=s; else       tto.warnings+="undefined style: " + line[i].trim() + "\n\n";    } else     if (dialogueFormat[i].trim().equalsIgnoreCase("Start")) {      newCaption.start=new Time("h:mm:ss.cs",line[i].trim());    } else     if (dialogueFormat[i].trim().equalsIgnoreCase("End")) {      newCaption.end=new Time("h:mm:ss.cs",line[i].trim());    }  }  if (timer != 100) {    newCaption.start.mseconds/=(timer / 100);    newCaption.end.mseconds/=(timer / 100);  }  return newCaption;}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=LrMmt.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="lr";  String vmSelectionPolicy="mmt";  String parameter="1.2";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  private static void CallStaticVoidMethodA(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticVoidMethodA  \n");  JNIGenericHelpers.callMethodJValuePtr(env,0,methodID,argAddress,TypeReference.Void,true);}  }
class C{  public boolean isCreated(){  return this.created;}  }
class C{  public synchronized int capacity(){  return elementData.length;}  }
class C{  public Services(){  this.cancelCriterion=new Stopper();  this.stats=null;  this.config=null;  this.manager=null;  this.joinLeave=null;  this.healthMon=null;  this.messenger=null;  this.auth=null;}  }
class C{  private void replace(QueryModelNode node,Supplier<? extends QueryModelNode> replacement){  if (node != null) {    node.replaceWith(replacement.get());  }}  }
class C{  public PrincipalName(int nameType,String[] nameStrings,Realm nameRealm){  if (nameRealm == null) {    throw new IllegalArgumentException("Null realm not allowed");  }  validateNameStrings(nameStrings);  this.nameType=nameType;  this.nameStrings=nameStrings.clone();  this.nameRealm=nameRealm;  this.realmDeduced=false;}  }
class C{  public boolean success(){  return m_success;}  }
class C{  public SourceUnit(String name,String source,CompilerConfiguration configuration,GroovyClassLoader loader,ErrorCollector er){  this(name,new StringReaderSource(source,configuration),configuration,loader,er);}  }
class C{  public int numValues(){  return m_numValues;}  }
class C{  private double pdf(double x,int j){  int from=Arrays.binarySearch(X,x - h * k.cutOff());  int to=Arrays.binarySearch(X,x + h * k.cutOff());  from=from < 0 ? -from - 1 : from;  to=to < 0 ? -to - 1 : to;  if (weights.length == 0 && k instanceof UniformKF)   return (to - from) * 0.5 / (sumOFWeights * h);  double sum=0;  for (int i=Math.max(0,from); i < Math.min(X.length,to + 1); i++)   if (i != j)   sum+=k.k((x - X[i]) / h) * getWeight(i);  return sum / (sumOFWeights * h);}  }
class C{  public OffHeapQueue(QueueDirectMemoryManager pageCache,int capacity,OffHeapSerializer<V> serializer){  if (serializer != null) {    this.serializer=serializer;  } else {    this.serializer=DefaultSerializerFactory.getInstance().createObjectSerializer();  }  this.capacity=capacity;  this.memoryManager=pageCache;  int initPage=pageCache.malllocFirstPage();  if (initPage == QueueDirectMemoryManager.NULL_PAGE) {    throw new IllegalStateException("Not enough memory");  }  initialized=true;  long address=initPage;  address=(address << 32) | QueueDirectMemoryManager.PAGE_HEADER_LENGTH;  head=end=address;}  }
class C{  @Override public String seedTipText(){  String result=super.seedTipText() + " Use -1 for no randomization.";  return result;}  }
class C{  private synchronized void measureWait(){  System.out.printf("                                measured\n");  System.out.printf("wait time   iterations   total time   per-wait\n");  for (int sleepTime=1; sleepTime <= 20; ++sleepTime) {    int iterations=(sleepTime == 0) ? 10000 : (1000 / sleepTime);    long startTime=System.nanoTime();    for (int i=0; i < iterations; ++i) {      try {        wait(sleepTime);      } catch (      Exception e) {        System.out.println("Exception: " + e);        Thread.dumpStack();      }    }    long endTime=System.nanoTime();    long totalTime=(endTime - startTime) / 1000000;    float calculatedSleepTime=totalTime / (float)iterations;    System.out.printf("  %2d          %5d         %4d       %5.2f\n",sleepTime,iterations,totalTime,calculatedSleepTime);  }}  }
class C{  public void open(){  transitionTo(State.OPEN,onOpen);}  }
class C{  @Override public void fire(Player player,Sentence sentence,EventRaiser npc){  Market market=TradeCenterZoneConfigurator.getShopFromZone(player.getZone());  RPSlot offersSlot=market.getSlot(Market.OFFERS_SLOT_NAME);  List<Offer> offers=getOffers(offersSlot);  if (offers.isEmpty()) {    npc.say("Sorry, there are currently no offers.");  } else {    String text=buildItemListText(buildItemList(offers));    npc.say(text);  }}  }
class C{  public static Authentication login(String username,char[] password) throws AuthenticationException {  Authentication authentication=new Authentication();  authentication.createSession(username,password);  for (  AuthenticationListener authenticationListener : authenticationListeners) {    authenticationListener.authenticate(new AuthenticationEvent(authentication));  }  return authentication;}  }
class C{  static void addAtEnd(IR ir,BasicBlock bb,Instruction c,boolean exp){  if (exp) {    bb.appendInstructionRespectingTerminalBranchOrPEI(c);  } else {    bb.appendInstructionRespectingTerminalBranch(c);  }  RegisterOperand aux=null;  if (VM.VerifyAssertions) {    VM._assert(Move.conforms(c));  }  RegisterOperand lhs=Move.getResult(c);  Instruction i=c.nextInstructionInCodeOrder();  while (!BBend.conforms(i)) {    Enumeration<Operand> os=i.getUses();    while (os.hasMoreElements()) {      Operand op=os.nextElement();      if (lhs.similar(op)) {        if (aux == null) {          aux=ir.regpool.makeTemp(lhs);          c.insertBefore(makeMoveInstruction(ir,aux.getRegister(),lhs.getRegister(),lhs.getType()));        }        op.asRegister().setRegister(aux.getRegister());      }    }    i=i.nextInstructionInCodeOrder();  }}  }
class C{  @Override public void terminateEmrCluster(String clusterId,boolean overrideTerminationProtection,AwsParamsDto awsParams){  emrOperations.terminateEmrCluster(getEmrClient(awsParams),clusterId,overrideTerminationProtection);}  }
class C{  @Override public void onPause(){  super.onPause();  progressBarLayout.setVisibility(View.VISIBLE);  performFaceDetectionStoppedTasks();  stopDetector();}  }
class C{  public T lowestKey(){  if (m_values.isEmpty()) {    return null;  }  int min=Integer.MAX_VALUE;  T rVal=null;  for (  final Entry<T,Integer> entry : m_values.entrySet()) {    if (entry.getValue() < min) {      min=entry.getValue();      rVal=entry.getKey();    }  }  return rVal;}  }
class C{  private static void SetCharArrayRegion(JNIEnvironment env,int arrayJREF,int startIndex,int length,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: SetCharArrayRegion  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    char[] destinationArray=(char[])env.getJNIRef(arrayJREF);    if ((startIndex < 0) || (startIndex + length > destinationArray.length)) {      env.recordException(new ArrayIndexOutOfBoundsException());      return;    }    Memory.memcopy(Magic.objectAsAddress(destinationArray).plus(startIndex << LOG_BYTES_IN_CHAR),bufAddress,length << LOG_BYTES_IN_CHAR);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public String copyResourceToContainer(final Uri packageURI,final String cid,final String key,final String resFileName,final String publicResFileName,boolean isExternal,boolean isForwardLocked){  if (packageURI == null || cid == null) {    return null;  }  return copyResourceInner(packageURI,cid,key,resFileName,publicResFileName,isExternal,isForwardLocked);}  }
class C{  protected AbstractInternalLogger(String name){  if (name == null) {    throw new NullPointerException("name");  }  this.name=name;}  }
class C{  private boolean isSameCurrency(){  MCashBook mcash=new MCashBook(getCtx(),p_C_CashBook_ID,get_TrxName());  MBankAccount mBankFrom=new MBankAccount(getCtx(),p_From_C_BankAccount_ID,get_TrxName());  MBankAccount mBankTo=new MBankAccount(getCtx(),p_To_C_BankAccount_ID,get_TrxName());  if ((mcash.getC_Currency_ID() != mBankFrom.getC_Currency_ID()) || (mcash.getC_Currency_ID() != mBankTo.getC_Currency_ID()))   return false;  m_C_Currency_ID=mcash.getC_Currency_ID();  return true;}  }
class C{  private void checkAndPurgeObsoleteSnapshots(String volumeOrCgId){  if (!isRetentionRequired()) {    return;  }  List<RetainedReplica> replicas=findObsoleteReplica(volumeOrCgId);  for (  RetainedReplica replica : replicas) {    for (    String obsoleteSnapshotId : replica.getAssociatedReplicaIds()) {      info("Deactivating snapshot %s since it exceeds max number of snapshots allowed",obsoleteSnapshotId);      if (ConsistencyUtils.isVolumeStorageType(storageType)) {        if (BlockProvider.SNAPSHOT_SESSION_TYPE_VALUE.equals(type)) {          execute(new DeactivateBlockSnapshotSession(uri(obsoleteSnapshotId)));        } else {          execute(new DeactivateBlockSnapshot(uri(obsoleteSnapshotId),VolumeDeleteTypeEnum.FULL));        }      } else {        if (BlockProvider.CG_SNAPSHOT_SESSION_TYPE_VALUE.equals(type)) {          ConsistencyUtils.removeSnapshotSession(uri(volumeOrCgId),uri(obsoleteSnapshotId));        } else {          ConsistencyUtils.removeSnapshot(uri(volumeOrCgId),uri(obsoleteSnapshotId));        }      }    }    getModelClient().delete(replica);  }}  }
class C{  public void onLongPress(long time,float x,float y){  if (mOverviewAnimationType == OverviewAnimationType.NONE) {    mLongPressSelected=getTabIndexAtPositon(x,y);    if (mLongPressSelected >= 0) {      startAnimation(time,OverviewAnimationType.VIEW_MORE,mLongPressSelected,false);      mEvenOutProgress=0.0f;    }  }}  }
class C{  public void test_stressBlobDeferredFrees(){  doBlobDeferredFrees(10000000);}  }
class C{  @Override public void run(){  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    showFeedback("This tool only operates on vector data.");  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  @Override public void initTransition(){  super.initTransition();  startVals=new XYValueSeries("Start");  copyValues(series,startVals);  endVals=new XYValueSeries("End");  copyValues(cachedSeries,endVals);}  }
class C{  @Override public void addNode(final InstructionGraphNode node){  super.addNode(node);}  }
class C{  public void sendFileInfo(GroupFileTransferImpl fileTransfer,String fileTransferId,String fileInfo,boolean displayedReportEnabled,boolean deliveredReportEnabled) throws NetworkException {  String from=ImsModule.getImsUserProfile().getPublicAddress();  String networkContent;  long timestamp=System.currentTimeMillis();  long timestampSent=timestamp;  mMessagingLog.setFileTransferTimestamps(fileTransferId,timestamp,timestampSent);  if (displayedReportEnabled) {    networkContent=ChatUtils.buildCpimMessageWithImdn(from,ChatUtils.ANONYMOUS_URI,fileTransferId,fileInfo,FileTransferHttpInfoDocument.MIME_TYPE,timestampSent);  } else   if (deliveredReportEnabled) {    networkContent=ChatUtils.buildCpimMessageWithoutDisplayedImdn(from,ChatUtils.ANONYMOUS_URI,fileTransferId,fileInfo,FileTransferHttpInfoDocument.MIME_TYPE,timestampSent);  } else {    networkContent=ChatUtils.buildCpimMessage(from,ChatUtils.ANONYMOUS_URI,fileInfo,FileTransferHttpInfoDocument.MIME_TYPE,timestampSent);  }  sendDataChunks(IdGenerator.generateMessageID(),networkContent,CpimMessage.MIME_TYPE,TypeMsrpChunk.HttpFileSharing);  fileTransfer.onFileInfoDequeued();}  }
class C{  public boolean isActingOnBehalf(Organization customer){  for (  OrganizationReference ref : customer.getSourcesForType(OrganizationReferenceType.ON_BEHALF_ACTING)) {    if (ref.getSource().equals(this)) {      return true;    }  }  return false;}  }
class C{  @Override public int hashCode(){  return lowerBound.hashCode() * 31 + upperBound.hashCode();}  }
class C{  public void addSiteVisibleStorageArrayEntry(String internalSiteName,String serialNumber){  if (this.siteVisibleStorageArrays == null) {    this.siteVisibleStorageArrays=new StringSetMap();  }  this.siteVisibleStorageArrays.put(internalSiteName,serialNumber);}  }
class C{  public PropertyValidateAsserter versions(VCardVersion... versions){  this.versions=versions;  return this;}  }
class C{  public void addSelectionListener(final SelectionListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  this.selectionListeners.add(listener);}  }
class C{  public boolean validate(Class type,String source,boolean strict) throws Exception {  return validate(type,new StringReader(source),strict);}  }
class C{  public double yield(final double cleanPrice,final DayCounter dc,final Compounding comp,final Frequency freq,Date settlementDate,final double accuracy,final int maxEvaluations){  if (settlementDate.isNull()) {    settlementDate=settlementDate();  }  final Brent solver=new Brent();  solver.setMaxEvaluations(maxEvaluations);  final double dirtyPrice=cleanPrice + accruedAmount(settlementDate);  final YieldFinder objective=new YieldFinder(notional(settlementDate),this.cashflows_,dirtyPrice,dc,comp,freq,settlementDate);  return solver.solve(objective,accuracy,0.02,0.0,1.0);}  }
class C{  static int showOptionDialog(JFrame originalFrame,JComponent component,String title,Object[] options,boolean resizable){  JOptionPane p=new JOptionPane(component,JOptionPane.PLAIN_MESSAGE,JOptionPane.OK_CANCEL_OPTION,null,options,options[0]);  JDialog d=p.createDialog(originalFrame,title);  d.pack();  d.setResizable(resizable);  p.selectInitialValue();  d.setVisible(true);  ;  for (int counter=0; counter < options.length; counter++)   if (options[counter].equals(p.getValue()))   return counter;  return -1;}  }
class C{  public HistogramModel(){  this(null,null,DEFAULT_BINS);}  }
class C{  public void warning(SAXParseException e) throws SAXException {}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processPostRequest(request,response);}  }
class C{  public static boolean toBooleanValue(Object o) throws PageException {  if (o instanceof Boolean)   return ((Boolean)o).booleanValue(); else   if (o instanceof Double)   return toBooleanValue(((Double)o).doubleValue()); else   if (o instanceof Number)   return toBooleanValue(((Number)o).doubleValue()); else   if (o instanceof String)   return toBooleanValue((String)o); else   if (o instanceof Castable)   return ((Castable)o).castToBooleanValue(); else   if (o == null)   return toBooleanValue(""); else   if (o instanceof ObjectWrap)   return toBooleanValue(((ObjectWrap)o).getEmbededObject());  throw new CasterException(o,"boolean");}  }
class C{  public void update(Record record,Handler<AsyncResult<Record>> resultHandler){  delegate.update(record,resultHandler);}  }
class C{  public void callVisitors(ExpressionOwner owner,XPathVisitor visitor){  m_mainExp.callVisitors(this,visitor);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:44.751 -0500",hash_original_method="D3779E30F0E2824C817E23A6212C6A73",hash_generated_method="67A585DB033E1032E265A2F415C5FE45") public int read(int bits) throws AccessException {  int index=mPos >>> 3;  int offset=16 - (mPos & 0x07) - bits;  if ((bits < 0) || (bits > 8) || ((mPos + bits) > mEnd)) {    throw new AccessException("illegal read " + "(pos " + mPos + ", end "+ mEnd+ ", bits "+ bits+ ")");  }  int data=(mBuf[index] & 0xFF) << 8;  if (offset < 8)   data|=mBuf[index + 1] & 0xFF;  data>>>=offset;  data&=(-1 >>> (32 - bits));  mPos+=bits;  return data;}  }
class C{  public static void showError(Context context,CharSequence msg,DialogInterface.OnCancelListener listener){  AlertDialog dlg=newDlg(context);  dlg.setIcon(android.R.drawable.ic_dialog_alert);  dlg.setTitle(R.string.afc_title_error);  dlg.setMessage(msg);  dlg.setOnCancelListener(listener);  dlg.show();}  }
class C{  public int hashCode(){  return value;}  }
class C{  public LongOsmElementMap(final int size){  this(size,DEFAULT_FILLFACTOR);}  }
class C{  public synchronized void addNamespace(String prefix,String namespaceURI){  if (prefix == null) {    String message=Logging.getMessage("nullValue.PrefixIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (namespaceURI == null) {    String message=Logging.getMessage("nullValue.NamespaceURIIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.urisByPrefix.put(prefix,namespaceURI);  if (this.prefixesByURI.containsKey(namespaceURI)) {    this.prefixesByURI.get(namespaceURI).add(prefix);  } else {    Set<String> set=new HashSet<String>();    set.add(prefix);    this.prefixesByURI.put(namespaceURI,set);  }}  }
class C{  @OnClick(R.id.home) public void onHomeClicked(View v){  GUI.ActivateWindow action=new GUI.ActivateWindow(GUI.ActivateWindow.HOME);  action.execute(hostManager.getConnection(),defaultActionCallback,callbackHandler);}  }
class C{  public void addImportValidate(String importTableName,ImportValidator listener){  String propertyName=importTableName + "*";  ArrayList<ImportValidator> list=(ArrayList<ImportValidator>)m_impValidateListeners.get(propertyName);  if (list == null) {    list=new ArrayList<ImportValidator>();    list.add(listener);    m_impValidateListeners.put(propertyName,list);  } else {    list.add(listener);  }}  }
class C{  protected void appendContentStart(StringBuffer buffer){  buffer.append(contentStart);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public SongFilter(){  this.songElement=DocumentHelper.createElement("song");}  }
class C{  private void zkInit() throws Exception {  centerPanel.appendChild(centerLayout);  bPrint.addActionListener(this);  bExport.addActionListener(this);  bCancel.addActionListener(this);  bProcess.setEnabled(false);  bProcess.addActionListener(this);  lPaySelect.setText(Msg.translate(Env.getCtx(),"C_PaySelection_ID"));  lBank.setText(Msg.translate(Env.getCtx(),"C_BankAccount_ID"));  lPaymentRule.setText(Msg.translate(Env.getCtx(),"PaymentRule"));  fPaymentRule.addActionListener(this);  lDocumentNo.setText(Msg.translate(Env.getCtx(),"DocumentNo"));  fDocumentNo.getComponent().setIntegral(true);  lNoPayments.setText(Msg.getMsg(Env.getCtx(),"NoOfPayments"));  fNoPayments.setText("0");  lBalance.setText(Msg.translate(Env.getCtx(),"CurrentBalance"));  fBalance.setReadWrite(false);  fBalance.getComponent().setIntegral(false);  lCurrency.setText(Msg.translate(Env.getCtx(),"C_Currency_ID"));  southPanel.addButton(bExport);  southPanel.addButton(bPrint);  southPanel.addButton(bProcess);  Rows rows=centerLayout.newRows();  Row row=rows.newRow();  row.appendChild(lPaySelect.rightAlign());  row.appendChild(paySelectSearch.getComponent());  row=rows.newRow();  row.appendChild(lBank.rightAlign());  row.appendChild(fBank);  row.appendChild(lBalance.rightAlign());  row.appendChild(fBalance.getComponent());  row=rows.newRow();  row.appendChild(lPaymentRule.rightAlign());  row.appendChild(fPaymentRule);  row.appendChild(lCurrency.rightAlign());  row.appendChild(fCurrency);  row=rows.newRow();  row.appendChild(lDocumentNo.rightAlign());  row.appendChild(fDocumentNo.getComponent());  row.appendChild(lNoPayments.rightAlign());  row.appendChild(fNoPayments);  southPanel.getButton(ConfirmPanel.A_OK).setVisible(false);}  }
class C{  void update(long val){  byte[] b=new byte[8];  b[0]=(byte)((val >>> 56) & 0xff);  b[1]=(byte)((val >>> 48) & 0xff);  b[2]=(byte)((val >>> 40) & 0xff);  b[3]=(byte)((val >>> 32) & 0xff);  b[4]=(byte)((val >>> 24) & 0xff);  b[5]=(byte)((val >>> 16) & 0xff);  b[6]=(byte)((val >>> 8) & 0xff);  b[7]=(byte)(val & 0xff);  update(b);}  }
class C{  public static String toString(Reader reader,long timeout) throws IOException {  StringWriter sw=new StringWriter(512);  copy(toBufferedReader(reader),sw,timeout);  sw.close();  return sw.toString();}  }
class C{  public void waitForThreadOwnedOrderedConnectionState(DistributedMember member,Map channelState) throws InterruptedException {  getConTable().waitForThreadOwnedOrderedConnectionState(member,channelState);}  }
class C{  private void attemptLabelFontSelection(){  FontChooserPanel panel=new FontChooserPanel(this.labelFont);  int result=JOptionPane.showConfirmDialog(this,panel,localizationResources.getString("Font_Selection"),JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);  if (result == JOptionPane.OK_OPTION) {    this.labelFont=panel.getSelectedFont();    this.labelFontField.setText(this.labelFont.getFontName() + " " + this.labelFont.getSize());  }}  }
class C{  public void updateView(boolean resetViewer){  if (fParentComposite != null) {    if (fTaintMarker == null) {      showEmptyPage();    } else {      if (resetViewer)       resetViewer();      showPage(PAGE_VIEWER);      setContentDescription("Sources for " + fTaintedData);      fTreeViewer.setInput(fTaintMarker);    }  }}  }
class C{  public static Method findSuperMethod(Object self,String name,String desc){  Class clazz=self.getClass();  return findSuperClassMethod(clazz,name,desc);}  }
class C{  private void addCSSClasses(){  if (!svgp.getCSSClassManager().contains(CSS_BRACKET)) {    final CSSClass cls=new CSSClass(this,CSS_BRACKET);    final StyleLibrary style=context.getStyleLibrary();    cls.setStatement(SVGConstants.CSS_STROKE_PROPERTY,style.getColor(StyleLibrary.PLOT));    cls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,style.getLineWidth(StyleLibrary.PLOT));    svgp.addCSSClassOrLogError(cls);  }}  }
class C{  protected boolean exists(final HttpURLConnection httpURLConnection){  try {    return httpURLConnection.getResponseCode() == HttpURLConnection.HTTP_OK;  } catch (  IOException ioe) {    LOG.debug(UNABLE_TO_CHECK_MESSAGE,httpURLConnection,ioe);    return false;  } finally {    httpURLConnection.disconnect();  }}  }
class C{  public void invert(int genome[][],MersenneTwisterFast srt,int headsize){  try {    int geneToModify=srt.nextInt(genome.length);    int gene[]=genome[geneToModify];    if (headsize > 2) {      int start=srt.nextInt(headsize - 1);      int end=srt.nextInt(headsize - start - 1) + start + 1;      int temp[]=new int[end - start + 1];      for (int i=0; i < temp.length; i++)       temp[i]=gene[i + start];      for (int i=0; i < temp.length; i++)       gene[end - i]=temp[i];    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public boolean isChunkedPost(){  return _isChunkedPost;}  }
class C{  public void testNGramTokenizer() throws Exception {  Reader reader=new StringReader("test");  TokenStream stream=tokenizerFactory("NGram").create();  ((Tokenizer)stream).setReader(reader);  assertTokenStreamContents(stream,new String[]{"t","te","e","es","s","st","t"});}  }
class C{  @Override public void removeInstanceListener(InstanceListener dsl){  m_instanceListeners.remove(dsl);}  }
class C{  @Reference(authors="T. Vincenty",title="Direct and inverse solutions of geodesics on the ellipsoid with application of nested equations",booktitle="Survey review 23 176, 1975",url="http://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf") public static double ellipsoidVincentyFormulaRad(double f,double lat1,double lon1,double lat2,double lon2){  final double dlon=Math.abs(lon2 - lon1);  final double onemf=1 - f;  final double a_b=1. / onemf;  final double ecc2=(a_b + 1) * (a_b - 1);  final double u1=Math.atan(onemf * Math.tan(lat1));  final double u2=Math.atan(onemf * Math.tan(lat2));  final double su1=Math.sin(u1), cu1=MathUtil.sinToCos(u1,su1);  final double su2=Math.sin(u2), cu2=MathUtil.sinToCos(u2,su2);  double lambda=dlon;  for (int i=0; ; i++) {    final double slon=Math.sin(lambda), clon=MathUtil.sinToCos(lambda,slon);    final double term1=cu2 * slon, term2=cu1 * su2 - su1 * cu2 * clon;    final double ssig=Math.sqrt(term1 * term1 + term2 * term2);    final double csig=su1 * su2 + cu1 * cu2 * clon;    final double sigma=Math.atan2(ssig,csig);    if (!(ssig > 0)) {      return 0.;    }    final double salp=cu1 * cu2 * slon / ssig;    final double c2alp=(1. + salp) * (1. - salp);    final double ctwosigm=(Math.abs(c2alp) > 0) ? csig - 2.0 * su1 * su2 / c2alp : 0.;    final double c2twosigm=ctwosigm * ctwosigm;    final double cc=f * .0625 * c2alp* (4.0 + f * (4.0 - 3.0 * c2alp));    final double prevlambda=lambda;    lambda=dlon + (1.0 - cc) * f * salp* (sigma + cc * ssig * (ctwosigm + cc * csig * (-1.0 + 2.0 * c2twosigm)));    if (Math.abs(prevlambda - lambda) < PRECISION || i >= MAX_ITER) {      final double usq=c2alp * ecc2;      final double aa=1.0 + usq / 16384.0 * (4096.0 + usq * (-768.0 + usq * (320.0 - 175.0 * usq)));      final double bb=usq / 1024.0 * (256.0 + usq * (-128.0 + usq * (74.0 - 47.0 * usq)));      final double dsig=bb * ssig * (ctwosigm + .25 * bb * (csig * (-1.0 + 2.0 * c2twosigm) - ONE_SIXTH * bb * ctwosigm* (-3.0 + 4.0 * ssig * ssig)* (-3.0 + 4.0 * c2twosigm)));      return aa * (sigma - dsig);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:55.221 -0500",hash_original_method="66EC02A60547F68FA7875E0B5CB3BCDA",hash_generated_method="FFBEE79BB4001BF36F516D3A3F9118AC") public RC2ParameterSpec(int effectiveKeyBits,byte[] iv){  if (iv == null) {    throw new IllegalArgumentException("iv == null");  }  if (iv.length < 8) {    throw new IllegalArgumentException("iv.length < 8");  }  this.effectiveKeyBits=effectiveKeyBits;  this.iv=new byte[8];  System.arraycopy(iv,0,this.iv,0,8);}  }
class C{  public CCombinedLeftPanel(final CGraphModel model,final CPerspectiveModel perspectiveModel,final CGraphSearchField searchField){  super(new BorderLayout());  m_perspectiveModel=perspectiveModel;  m_leftPanel=new CStandardLeftPanel(model.getGraph(),model.getSelectionHistory(),searchField);  m_debugLeftPanel=new CDebugLeftPanel(model.getParent(),model.getDebuggerProvider(),(CDebugPerspectiveModel)perspectiveModel.getModel(PerspectiveType.DebugPerspective));  add(m_leftPanel);  perspectiveModel.addListener(m_listener);}  }
class C{  public static void emit_warn(String message){  System.err.println("Warning at " + current_line + "("+ current_position+ "): "+ message);  warning_count++;}  }
class C{  public static void addStaticAspectsToItem(ItemStack item,IItemStackMatcher matcher,int tier,int type,float amountMultiplier,float amountVariation,int aspectCount){  AspectItemEntry entry=new AspectItemEntry(item,matcher,tier,type,amountMultiplier,amountVariation);  AspectItem itemEntry=entry.item;  for (  Entry<AspectItem,List<AspectItemEntry>> e : REGISTERED_ITEMS.entrySet()) {    if (e.getKey().equals(itemEntry)) {      itemEntry=e.getKey();      break;    }  }  List<AspectItemEntry> entryList=REGISTERED_ITEMS.get(itemEntry);  if (entryList == null)   REGISTERED_ITEMS.put(entry.item,entryList=new ArrayList<AspectItemEntry>());  for (int i=0; i < aspectCount; i++) {    entryList.add(entry);  }  List<AspectItem> aspectItems=ITEM_TO_ASPECT_ITEMS.get(entry.item.original.getItem());  if (aspectItems == null)   ITEM_TO_ASPECT_ITEMS.put(entry.item.original.getItem(),aspectItems=new ArrayList<AspectItem>());  aspectItems.add(entry.item);}  }
class C{  public void trimToSize(){  delegate.trimToSize();}  }
class C{  public void checkAndHandleLastVisibleCellChange(){  final int currentLastVisibleItem=mCurrentFirstVisibleItem + mCurrentVisibleItemCount;  final int previousLastVisibleItem=mPreviousFirstVisibleItem + mPreviousVisibleItemCount;  if (currentLastVisibleItem != previousLastVisibleItem) {    if (mCellIsMobile && mMobileItemId != INVALID_ID) {      updateNeighborViewsForID(mMobileItemId);      handleCellSwitch();    }  }}  }
class C{  public static void verifyValidity(){  if (!isValid()) {    throw new CodedException(X_OUTDATED_GLOBALCONF,"Global configuration is expired");  }}  }
class C{  public static FileBytes allocate(File file,long size){  return allocate(file,DEFAULT_MODE,size);}  }
class C{  protected void updateLayout(DocumentEvent.ElementChange ec,DocumentEvent e,Shape a){  if (ec != null) {    int index=Math.max(ec.getIndex() - 1,0);    ChildState cs=getChildState(index);    locator.childChanged(cs);  }}  }
class C{  private void heapify(){  Object[] array=queue;  int n=size;  int half=(n >>> 1) - 1;  Comparator<? super E> cmp=comparator;  if (cmp == null) {    for (int i=half; i >= 0; i--)     siftDownComparable(i,(E)array[i],array,n);  } else {    for (int i=half; i >= 0; i--)     siftDownUsingComparator(i,(E)array[i],array,n,cmp);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){  int visibleRow=state.getVisibleSeriesIndex(row);  if (visibleRow < 0) {    return;  }  Number dataValue=dataset.getValue(row,column);  if (dataValue == null) {    return;  }  final double value=dataValue.doubleValue();  PlotOrientation orientation=plot.getOrientation();  double barW0=calculateBarW0(plot,orientation,dataArea,domainAxis,state,visibleRow,column);  double[] barL0L1=calculateBarL0L1(value);  if (barL0L1 == null) {    return;  }  RectangleEdge edge=plot.getRangeAxisEdge();  double transL0=rangeAxis.valueToJava2D(barL0L1[0],dataArea,edge);  double transL1=rangeAxis.valueToJava2D(barL0L1[1],dataArea,edge);  boolean positive=(value >= this.base);  boolean inverted=rangeAxis.isInverted();  double barL0=Math.min(transL0,transL1);  double barLength=Math.abs(transL1 - transL0);  double barLengthAdj=0.0;  if (barLength > 0.0 && barLength < getMinimumBarLength()) {    barLengthAdj=getMinimumBarLength() - barLength;  }  double barL0Adj=0.0;  RectangleEdge barBase;  if (orientation == PlotOrientation.HORIZONTAL) {    if (positive && inverted || !positive && !inverted) {      barL0Adj=barLengthAdj;      barBase=RectangleEdge.RIGHT;    } else {      barBase=RectangleEdge.LEFT;    }  } else {    if (positive && !inverted || !positive && inverted) {      barL0Adj=barLengthAdj;      barBase=RectangleEdge.BOTTOM;    } else {      barBase=RectangleEdge.TOP;    }  }  Rectangle2D bar;  if (orientation == PlotOrientation.HORIZONTAL) {    bar=new Rectangle2D.Double(barL0 - barL0Adj,barW0,barLength + barLengthAdj,state.getBarWidth());  } else {    bar=new Rectangle2D.Double(barW0,barL0 - barL0Adj,state.getBarWidth(),barLength + barLengthAdj);  }  if (state.getElementHinting()) {    KeyedValues2DItemKey key=new KeyedValues2DItemKey(dataset.getRowKey(row),dataset.getColumnKey(column));    beginElementGroup(g2,key);  }  if (getShadowsVisible()) {    this.barPainter.paintBarShadow(g2,this,row,column,bar,barBase,true);  }  this.barPainter.paintBar(g2,this,row,column,bar,barBase);  if (state.getElementHinting()) {    endElementGroup(g2);  }  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);  if (generator != null && isItemLabelVisible(row,column)) {    drawItemLabel(g2,dataset,row,column,plot,generator,bar,(value < 0.0));  }  int datasetIndex=plot.indexOf(dataset);  updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value,datasetIndex,barW0,barL0,orientation);  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    addItemEntity(entities,dataset,row,column,bar);  }}  }
class C{  public ReportOutput generateBill(final BasicProperty basicProperty,final Integer userId){  if (LOGGER.isDebugEnabled())   LOGGER.debug("Entered into generateBill BasicProperty : " + basicProperty);  ReportOutput reportOutput=null;  try {    setBillNo(propertyTaxNumberGenerator.generateManualBillNumber(basicProperty.getPropertyID()));    final int noOfBillGenerated=getNumberOfBills(basicProperty);    if (noOfBillGenerated > 0)     setBillNo(getBillNo() + "/" + STR_BILL_SHORTCUT+ noOfBillGenerated);    DemandNoticeInfo demandNoticeInfo=new DemandNoticeInfo();    demandNoticeInfo.setCityService(cityService);    demandNoticeInfo.setBasicProperty(basicProperty);    demandNoticeInfo.setOldAssessmentNo(basicProperty.getOldMuncipalNum());    demandNoticeInfo.setBillNo(getBillNo());    demandNoticeInfo.setLocality(basicProperty.getPropertyID().getLocality().getName());    demandNoticeInfo.setBillPeriod(propertyTaxCommonUtils.getCurrentInstallment().getDescription());    if (basicProperty.getVacancyRemissions().isEmpty()) {      demandNoticeInfo.setIsVacancyRemissionDone(false);    } else {      demandNoticeInfo.setIsVacancyRemissionDone(true);    }    Map<String,Object> reprortParams=prepareReportParams(basicProperty);    ReportRequest reportRequest=null;    reportRequest=new ReportRequest(REPORT_TEMPLATENAME_BILL_GENERATION,demandNoticeInfo,reprortParams);    reportOutput=getReportService().createReport(reportRequest);    if (reportOutput != null && reportOutput.getReportOutputData() != null)     billPDF=new ByteArrayInputStream(reportOutput.getReportOutputData());    saveEgBill(basicProperty,userId);    basicProperty.setIsBillCreated(STATUS_BILL_CREATED);    basicProperty.setBillCrtError(STRING_EMPTY);    final boolean flag=waterChargesIntegrationService.updateBillNo(basicProperty.getId().toString(),getBillNo());    if (flag) {      if (LOGGER.isDebugEnabled())       LOGGER.debug("Billno updated successfully in water tax");    } else {      if (LOGGER.isDebugEnabled())       LOGGER.debug("Failed to updated billno in water tax");    }    noticeService.saveNotice(basicProperty.getPropertyForBasicProperty().getApplicationNo(),getBillNo(),NOTICE_TYPE_BILL,basicProperty,billPDF);    noticeService.getSession().flush();  } catch (  final Exception e) {    throw new ApplicationRuntimeException("Bill Generation Exception : " + e);  }  if (LOGGER.isDebugEnabled())   LOGGER.debug("Exiting from generateBill");  return reportOutput;}  }
class C{  protected CCSequence(CCFiniteTimeAction one,CCFiniteTimeAction two){  super(one.getDuration() + two.getDuration());  actions=new CCFiniteTimeAction[2];  actions[0]=one;  actions[1]=two;}  }
class C{  @Override public void init(String serverName,AccessControlContext acc,ProtocolVersion protocolVersion,SecureRandom rand) throws IOException {  KerberosTicket ticket=getServiceTicket(serverName,acc);  encodedTicket=ticket.getEncoded();  peerPrincipal=ticket.getServer();  localPrincipal=ticket.getClient();  EncryptionKey sessionKey=new EncryptionKey(ticket.getSessionKeyType(),ticket.getSessionKey().getEncoded());  preMaster=new KerberosPreMasterSecret(protocolVersion,rand,sessionKey);}  }
class C{  public void processConfigMessages(){  List<String> keysToProcess=new LinkedList<>();  keysToProcess.add(YARN_CONTAINER_COUNT_OPT);  keysToProcess.add(SERVER_URL_OPT);  processConfigMessages(keysToProcess);}  }
class C{  private CreatePStops(Network net,PConfigGroup pConfigGroup,TransitSchedule realTransitSchedule){  this.net=net;  this.pConfigGroup=pConfigGroup;  this.factory=new GeometryFactory();  this.linkId2StopFacilityMap=new LinkedHashMap<>();  Set<Id<TransitStopFacility>> stopsWithoutLinkIds=new TreeSet<>();  int warnCounter=10;  if (realTransitSchedule != null) {    for (    TransitStopFacility stopFacility : realTransitSchedule.getFacilities().values()) {      if (stopFacility.getLinkId() != null) {        if (this.linkId2StopFacilityMap.get(stopFacility.getLinkId()) != null) {          if (warnCounter > 0) {            log.warn("There is more than one stop registered on link " + stopFacility.getLinkId() + ". "+ this.linkId2StopFacilityMap.get(stopFacility.getLinkId()).getId()+ " stays registered as paratransit stop. Will ignore stop "+ stopFacility.getId());            warnCounter--;          }          if (warnCounter == 0) {            log.warn("Future occurences of this logging statement are suppressed.");            warnCounter--;          }        } else {          this.linkId2StopFacilityMap.put(stopFacility.getLinkId(),stopFacility);        }      } else {        stopsWithoutLinkIds.add(stopFacility.getId());      }    }  }  this.exclude=this.factory.buildGeometry(new ArrayList<Geometry>());  if (!new File(pConfigGroup.getServiceAreaFile()).exists()) {    log.warn("file " + this.pConfigGroup.getServiceAreaFile() + " not found. Falling back to min/max serviceArea parameters.");    createServiceArea(pConfigGroup.getMinX(),pConfigGroup.getMaxX(),pConfigGroup.getMinY(),pConfigGroup.getMaxY());  } else {    log.warn("using " + this.pConfigGroup.getServiceAreaFile() + " for servicearea. x/y-values defined in the config are not used.");    createServiceArea(pConfigGroup.getServiceAreaFile());  }  if (stopsWithoutLinkIds.size() > 0) {    log.warn("There are " + stopsWithoutLinkIds.size() + " stop facilities without a link id, namely: "+ stopsWithoutLinkIds.toString());  }  this.topoTypesForStops=this.pConfigGroup.getTopoTypesForStops();  if (!(this.topoTypesForStops == null)) {    this.networkCalcTopoType=new NetworkCalcTopoType();    this.networkCalcTopoType.run(net);  }}  }
class C{  @Override public void dropTable(ConnectorSession session,ConnectorTableHandle tableHandle){  HiveTableHandle handle=checkType(tableHandle,HiveTableHandle.class,"tableHandle");  metastore.dropTable(handle.getSchemaName(),handle.getTableName());  metastore.flushCache();}  }
class C{  public EventStoreBuilder useSslConnection(){  settingsBuilder.sslSettings(SslSettings.trustAllCertificates());  return this;}  }
class C{  static void defineObject(final Node that,final Value d,final List<Type> sats,final Tree.SimpleType superType,final Tree.InvocationExpression superCall,final Tree.Body body,final Tree.AnnotationList annots,final GenerateJsVisitor gen,InitDeferrer initDeferrer){  final boolean addToPrototype=gen.opts.isOptimize() && d != null && d.isClassOrInterfaceMember();  final boolean isObjExpr=that instanceof Tree.ObjectExpression;  final TypeDeclaration _td=isObjExpr ? ((Tree.ObjectExpression)that).getAnonymousClass() : d.getTypeDeclaration();  final Class c=(Class)(_td instanceof Constructor ? ((Constructor)_td).getContainer() : _td);  final String className=gen.getNames().name(c);  final String objectName=gen.getNames().name(d);  final String selfName=gen.getNames().self(c);  final Value natd=d == null ? null : (Value)ModelUtil.getNativeDeclaration(d,Backend.JavaScript);  if (that instanceof Tree.Declaration) {    if (NativeUtil.isNativeHeader((Tree.Declaration)that) && natd != null) {      gen.saveNativeHeader((Tree.Declaration)that);      return;    }    if (!(NativeUtil.isForBackend((Tree.Declaration)that,Backend.JavaScript) || NativeUtil.isHeaderWithoutBackend((Tree.Declaration)that,Backend.JavaScript))) {      return;    }  }  final List<Tree.Statement> stmts;  if (d != null && NativeUtil.isForBackend(d,Backend.JavaScript)) {    Tree.Declaration nh=gen.getNativeHeader(d);    if (nh == null && NativeUtil.hasNativeMembers(c) && that instanceof Tree.Declaration) {      nh=(Tree.Declaration)that;    }    stmts=NativeUtil.mergeStatements(body,nh,Backend.JavaScript);  } else {    stmts=body.getStatements();  }  Map<TypeParameter,Type> targs=new HashMap<TypeParameter,Type>();  if (sats != null) {    for (    Type st : sats) {      Map<TypeParameter,Type> stargs=st.getTypeArguments();      if (stargs != null && !stargs.isEmpty()) {        targs.putAll(stargs);      }    }  }  gen.out(GenerateJsVisitor.function,className,targs.isEmpty() ? "()" : "($$targs$$)");  gen.beginBlock();  if (isObjExpr) {    gen.out("var ",selfName,"=new ",className,".$$;");    final ClassOrInterface coi=ModelUtil.getContainingClassOrInterface(c.getContainer());    if (coi != null) {      gen.out(selfName,".outer$=",gen.getNames().self(coi));      gen.endLine(true);    }  } else {    if (c.isMember()) {      gen.initSelf(that);    }    gen.instantiateSelf(c);    gen.referenceOuter(c);  }  final List<Declaration> superDecs=new ArrayList<Declaration>();  if (!gen.opts.isOptimize()) {    final SuperVisitor superv=new SuperVisitor(superDecs);    for (    Tree.Statement st : stmts) {      st.visit(superv);    }  }  if (!targs.isEmpty()) {    gen.out(selfName,".$$targs$$=$$targs$$");    gen.endLine(true);  }  TypeGenerator.callSupertypes(sats,superType,c,that,superDecs,superCall,superType == null ? null : ((Class)c.getExtendedType().getDeclaration()).getParameterList(),gen);  gen.visitStatements(stmts);  gen.out("return ",selfName,";");  gen.endBlock();  gen.out(";",className,".$crtmm$=");  TypeUtils.encodeForRuntime(that,c,gen);  gen.endLine(true);  TypeGenerator.initializeType(that,gen,initDeferrer);  final String objvar=(addToPrototype ? "this." : "") + gen.getNames().createTempVariable();  if (d != null && !addToPrototype) {    gen.out("var ",objvar);    if (AttributeGenerator.defineAsProperty(d)) {      gen.out("=",className,"(");      if (!targs.isEmpty()) {        TypeUtils.printTypeArguments(that,targs,gen,false,null);      }      gen.out(")");    }    gen.endLine(true);  }  if (d != null && AttributeGenerator.defineAsProperty(d)) {    gen.out(gen.getClAlias(),"atr$(");    gen.outerSelf(d);    gen.out(",'",objectName,"',function(){return ");    if (addToPrototype) {      gen.out("this.",gen.getNames().privateName(d));    } else {      gen.out(objvar);    }    gen.out(";},undefined,");    TypeUtils.encodeForRuntime(that,d,annots,gen);    gen.out(")");    gen.endLine(true);  } else   if (d != null) {    final String objectGetterName=gen.getNames().getter(d,false);    gen.out(GenerateJsVisitor.function,objectGetterName,"()");    gen.beginBlock();    final String oname=gen.getNames().objectName(c);    gen.out("if(",objvar,"===",gen.getClAlias(),"INIT$)");    gen.generateThrow(gen.getClAlias() + "InitializationError","Cyclic initialization trying to read the value of '" + d.getName() + "' before it was set",that);    gen.endLine(true);    gen.out("if(",objvar,"===undefined){",objvar,"=",gen.getClAlias(),"INIT$;",objvar,"=$init$",oname);    if (!oname.endsWith("()")) {      gen.out("()");    }    gen.out("(");    if (!targs.isEmpty()) {      TypeUtils.printTypeArguments(that,targs,gen,false,null);    }    gen.out(");",objvar,".$crtmm$=",objectGetterName,".$crtmm$;}");    gen.endLine();    gen.out("return ",objvar,";");    gen.endBlockNewLine();    if (addToPrototype || d.isShared()) {      gen.outerSelf(d);      gen.out(".",objectGetterName,"=",objectGetterName);      gen.endLine(true);    }    if (!d.isToplevel()) {      if (gen.outerSelf(d))       gen.out(".");    }    gen.out(objectGetterName,".$crtmm$=");    TypeUtils.encodeForRuntime(that,d,annots,gen);    gen.endLine(true);    gen.out(gen.getNames().getter(c,true),"=",objectGetterName);    gen.endLine(true);    if (d.isToplevel()) {      final String objectGetterNameMM=gen.getNames().getter(d,true);      gen.out("ex$.",objectGetterNameMM,"=",objectGetterNameMM);      gen.endLine(true);    }  } else   if (isObjExpr) {    gen.out("return ",className,"();");  }}  }
class C{  public CharSequence convert(Object value){  return convert(value,null);}  }
class C{  public StackMap toStackMap(ConstPool cp){  return new StackMap(cp,output.toByteArray());}  }
class C{  public boolean legalVertex(final Vertex vertex){  return null == this.vertexFilter || TraversalUtil.test(vertex,this.vertexFilter);}  }
class C{  public CapabilityFilter(){}  }
class C{  public MediaPlayerComponent(){  mediaPlayer=MediaPlayer.instance();  mediaPlayer.addMediaPlayerListener(this);  GUIMediator.addRefreshListener(this);}  }
class C{  @SuppressWarnings("ConstantConditions") public static NetworkManagerWrapper wrap(NetworkManager manager){  Object protocol=getProtocol(manager);  if (protocol != EnumProtocol.PLAY) {    throw new RuntimeException("Wrong protocol: " + protocol);  }  NetworkManagerWrapper wrapper;  try {    wrapper=(NetworkManagerWrapper)getUnsafe().allocateInstance(NetworkManagerWrapper.class);  } catch (  InstantiationException e) {    throw new RuntimeException(e);  }  wrapper.init(manager);  return wrapper;}  }
class C{  private static void testJcmdPidHelpHelp() throws Exception {  OutputAnalyzer output=JcmdBase.jcmd(VM_ARGS,new String[]{"help","help"});  output.shouldHaveExitValue(0);  verifyOutputAgainstFile(output);}  }
class C{  public void flush() throws IOException {  pw.flush();}  }
class C{  public boolean isIsGranted(){  return isGranted;}  }
class C{  public void hide(Animation anim){  hide(true,anim);}  }
class C{  public static DecomposableMatchBuilder0<Double> caseDouble(double d){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(eq(d));  return new DecomposableMatchBuilder0<>(matchers,new PrimitiveFieldExtractor<>(Double.class));}  }
class C{  public RectValue(Value t,Value r,Value b,Value l){  top=t;  right=r;  bottom=b;  left=l;}  }
class C{  private void showNotification(){  performNotificationImp(false);}  }
class C{  private boolean isMonotonic(){  return getLastCovered() < getPhraseEnd();}  }
class C{  public FunctionType2(){  super(TYPE_2);}  }
class C{  protected void updateIconGroupsMap(String key,HashMap<String,NamedIcon> iconMap){  _iconGroupsMap.put(key,iconMap);}  }
class C{  public int testObject(Object myObject2){  try {    @SuppressWarnings("rawtypes") LinkedHashMap myObject=(LinkedHashMap)myObject2;    log.debug("testObject " + myObject.size());    log.debug("testObject " + myObject.get(1));    log.debug("testObject " + myObject.get("stringObj"));    return myObject.size();  } catch (  Exception e) {    log.error("ex: ",e);  }  return -1;}  }
class C{  public InputStream fetchFileSystemInfoWithSize(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("Creating filesystem info query");  InputStream iStream=null;  try {    Query query=new Query();    FileSystemQueryParams fsQueryParam=new FileSystemQueryParams();    AspectSelection selection=new AspectSelection();    selection.setFileSystems(true);    selection.setFileSystemCapacityInfos(true);    fsQueryParam.setAspectSelection(selection);    query.getQueryRequestChoice().add(fsQueryParam);    iStream=_vnxFileInputRequestBuilder.getQueryParamPacket(fsQueryParam,true);  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while generating input xml for fileSystem info",jaxbException.getCause());  }  return iStream;}  }
class C{  @Override protected void validate(){}  }
class C{  private void addMoveLocations(int points,long startTime,TripStatistics tripStatistics,int timeOffset,int locationOffset){  for (int i=0; i < points; i++) {    Location location=getLocation(i + locationOffset,(i + locationOffset) * .001,MOVING_SPEED,startTime + (timeOffset + i) * TEN_SECONDS);    tripStatisticsUpdater.addLocation(location,PreferencesUtils.RECORDING_DISTANCE_INTERVAL_DEFAULT,true,ActivityType.WALKING,DEFAULT_WEIGHT);    tripStatistics=tripStatisticsUpdater.getTripStatistics();    assertEquals((timeOffset + i) * TEN_SECONDS,tripStatistics.getTotalTime());    assertEquals((locationOffset + i) * TEN_SECONDS,tripStatistics.getMovingTime());    assertEquals(i + locationOffset,tripStatisticsUpdater.getSmoothedElevation(),TripStatisticsUpdater.ELEVATION_SMOOTHING_FACTOR / 2);    if (i + locationOffset >= TripStatisticsUpdater.ELEVATION_SMOOTHING_FACTOR) {      assertEquals(0.0,tripStatistics.getMinElevation());      assertEquals(i + locationOffset,tripStatistics.getMaxElevation(),TripStatisticsUpdater.ELEVATION_SMOOTHING_FACTOR / 2);      assertEquals(i + locationOffset,tripStatistics.getTotalElevationGain(),TripStatisticsUpdater.ELEVATION_SMOOTHING_FACTOR);    }    if (i + locationOffset >= TripStatisticsUpdater.SPEED_SMOOTHING_FACTOR) {      assertEquals(MOVING_SPEED,tripStatistics.getMaxSpeed(),0.1);    }    if (locationOffset == 0 && (i + locationOffset) >= TripStatisticsUpdater.RUN_SMOOTHING_FACTOR + TripStatisticsUpdater.GRADE_SMOOTHING_FACTOR) {      assertEquals(0.0045,tripStatistics.getMinGrade(),0.0001);      assertEquals(0.009,tripStatistics.getMaxGrade(),0.0001);    }    assertEquals((i + locationOffset) * 111.0,tripStatistics.getTotalDistance(),(i + locationOffset) * 111.0 * 0.01);  }}  }
class C{  public Builder filter(MetricFilter filter){  this.filter=filter;  return this;}  }
class C{  protected KernSubtableFormat0(RandomAccessFile raf) throws IOException {  nPairs=raf.readUnsignedShort();  searchRange=raf.readUnsignedShort();  entrySelector=raf.readUnsignedShort();  rangeShift=raf.readUnsignedShort();  kerningPairs=new KerningPair[nPairs];  for (int i=0; i < nPairs; i++) {    kerningPairs[i]=new KerningPair(raf);  }}  }
class C{  public boolean hasChanged(){  return changed.get();}  }
class C{  NeededUriGrants checkGrantUriPermissionFromIntentLocked(int callingUid,String targetPkg,Intent intent,int mode,NeededUriGrants needed){  if (DEBUG_URI_PERMISSION)   Slog.v(TAG,"Checking URI perm to data=" + (intent != null ? intent.getData() : null) + " clip="+ (intent != null ? intent.getClipData() : null)+ " from "+ intent+ "; flags=0x"+ Integer.toHexString(intent != null ? intent.getFlags() : 0));  if (targetPkg == null) {    throw new NullPointerException("targetPkg");  }  if (intent == null) {    return null;  }  Uri data=intent.getData();  ClipData clip=intent.getClipData();  if (data == null && clip == null) {    return null;  }  if (data != null) {    int target=checkGrantUriPermissionLocked(callingUid,targetPkg,data,mode,needed != null ? needed.targetUid : -1);    if (target > 0) {      if (needed == null) {        needed=new NeededUriGrants(targetPkg,target,mode);      }      needed.add(data);    }  }  if (clip != null) {    for (int i=0; i < clip.getItemCount(); i++) {      Uri uri=clip.getItemAt(i).getUri();      if (uri != null) {        int target=-1;        target=checkGrantUriPermissionLocked(callingUid,targetPkg,uri,mode,needed != null ? needed.targetUid : -1);        if (target > 0) {          if (needed == null) {            needed=new NeededUriGrants(targetPkg,target,mode);          }          needed.add(uri);        }      } else {        Intent clipIntent=clip.getItemAt(i).getIntent();        if (clipIntent != null) {          NeededUriGrants newNeeded=checkGrantUriPermissionFromIntentLocked(callingUid,targetPkg,clipIntent,mode,needed);          if (newNeeded != null) {            needed=newNeeded;          }        }      }    }  }  return needed;}  }
class C{  public Service(Provider provider,String type,String algorithm,String className,List<String> aliases,Map<String,String> attributes){  if ((provider == null) || (type == null) || (algorithm == null)|| (className == null)) {    throw new NullPointerException();  }  this.provider=provider;  this.type=getEngineName(type);  this.algorithm=algorithm;  this.className=className;  if (aliases == null) {    this.aliases=Collections.<String>emptyList();  } else {    this.aliases=new ArrayList<String>(aliases);  }  if (attributes == null) {    this.attributes=Collections.<UString,String>emptyMap();  } else {    this.attributes=new HashMap<UString,String>();    for (    Map.Entry<String,String> entry : attributes.entrySet()) {      this.attributes.put(new UString(entry.getKey()),entry.getValue());    }  }}  }
class C{  public boolean isRectangular(){  int size=curves.size();  if (size == 0) {    return true;  }  if (size > 3) {    return false;  }  Curve c1=(Curve)curves.get(1);  Curve c2=(Curve)curves.get(2);  if (c1.getOrder() != 1 || c2.getOrder() != 1) {    return false;  }  if (c1.getXTop() != c1.getXBot() || c2.getXTop() != c2.getXBot()) {    return false;  }  if (c1.getYTop() != c2.getYTop() || c1.getYBot() != c2.getYBot()) {    return false;  }  return true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Period withDays(int days){  int[] values=getValues();  getPeriodType().setIndexedField(this,PeriodType.DAY_INDEX,values,days);  return new Period(values,getPeriodType());}  }
class C{  public static LocPathIterator createUnionIterator(Compiler compiler,int opPos) throws javax.xml.transform.TransformerException {  UnionPathIterator upi=new UnionPathIterator(compiler,opPos);  int nPaths=upi.m_exprs.length;  boolean isAllChildIterators=true;  for (int i=0; i < nPaths; i++) {    LocPathIterator lpi=upi.m_exprs[i];    if (lpi.getAxis() != Axis.CHILD) {      isAllChildIterators=false;      break;    } else {      if (HasPositionalPredChecker.check(lpi)) {        isAllChildIterators=false;        break;      }    }  }  if (isAllChildIterators) {    UnionChildIterator uci=new UnionChildIterator();    for (int i=0; i < nPaths; i++) {      PredicatedNodeTest lpi=upi.m_exprs[i];      uci.addNodeTest(lpi);    }    return uci;  } else   return upi;}  }
class C{  public void commitBinding(){  if (deferedValues != null && deferedValues.size() > 0) {    Enumeration en=deferedValues.keys();    while (en.hasMoreElements()) {      Object k=en.nextElement();      values.put(k,deferedValues.get(k));    }    deferedValues=null;  }}  }
class C{  public void dupX1(){  mv.visitInsn(Opcodes.DUP_X1);}  }
class C{  public void read(CompletionHandler<Integer,? super ByteBuffer> completionHandler){  ByteBuffer input=ByteBuffer.allocate(256);  if (!channel.isOpen()) {    return;  }  channel.read(input,input,completionHandler);}  }
class C{  public static final void copy(Reader reader,Writer writer,boolean closeReader,boolean closeWriter) throws IOException {  try {    copy(reader,writer,0xffff,-1);  }  finally {    if (closeReader)     closeEL(reader);    if (closeWriter)     closeEL(writer);  }}  }
class C{  public void replaceRoad(String oldRoad,String newRoad){  if (newRoad == null) {    return;  }  for (  Schedule sch : getSchedulesByIdList()) {    for (    ScheduleItem si : sch.getItemsBySequenceList()) {      if (si.getRoadName().equals(oldRoad)) {        si.setRoadName(newRoad);      }    }  }}  }
class C{  private YouTubeExtractor(){  this(new OkHttpClient.Builder());}  }
class C{  public Geometry buildGeometry(Collection geomList){  Class geomClass=null;  boolean isHeterogeneous=false;  boolean hasGeometryCollection=false;  for (Iterator i=geomList.iterator(); i.hasNext(); ) {    Geometry geom=(Geometry)i.next();    Class partClass=geom.getClass();    if (geomClass == null) {      geomClass=partClass;    }    if (partClass != geomClass) {      isHeterogeneous=true;    }    if (geom instanceof GeometryCollection)     hasGeometryCollection=true;  }  if (geomClass == null) {    return createGeometryCollection(null);  }  if (isHeterogeneous || hasGeometryCollection) {    return createGeometryCollection(toGeometryArray(geomList));  }  Geometry geom0=(Geometry)geomList.iterator().next();  boolean isCollection=geomList.size() > 1;  if (isCollection) {    if (geom0 instanceof Polygon) {      return createMultiPolygon(toPolygonArray(geomList));    } else     if (geom0 instanceof LineString) {      return createMultiLineString(toLineStringArray(geomList));    } else     if (geom0 instanceof Point) {      return createMultiPoint(toPointArray(geomList));    }    Assert.shouldNeverReachHere("Unhandled class: " + geom0.getClass().getName());  }  return geom0;}  }
class C{  public void collapseAll(){  if (chkExpand.isChecked())   chkExpand.setChecked(false);  TreeUtils.collapseAll(tree);}  }
class C{  public static ComponentUI createUI(JComponent x){  return new BEProgressBarUI();}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public Token nextLine(){  if (!hasNextLine())   throw new IllegalStateException("No more lines found!");  int indexOfNewline=remaining.indexOf('\n');  if (indexOfNewline == -1) {    indexOfNewline=content.length() - currentPosition;  }  Token token=new Token(this,currentPosition,currentPosition + indexOfNewline);  stepForward(indexOfNewline + 1);  return token;}  }
class C{  public GlowServer(ServerConfig config){  materialValueManager=new BuiltinMaterialValueManager();  this.config=config;  opsList=new UuidListFile(config.getFile("ops.json"));  whitelist=new UuidListFile(config.getFile("whitelist.json"));  nameBans=new GlowBanList(this,Type.NAME);  ipBans=new GlowBanList(this,Type.IP);  Bukkit.setServer(this);  loadConfig();}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) final public IVariableOrConstant<IV> o(){  return (IVariableOrConstant)get(2);}  }
class C{  public void clear(){  size=0;  root=null;}  }
class C{  private boolean isOnList(Vector<String> list,String name){  if (list.size() == 0)   return false;  for (int i=0; i < list.size(); i++) {    String listName=(String)list.get(i);    if (name.endsWith(listName)) {      return true;    }  }  return false;}  }
class C{  private static void swap(char[] x,int a,int b){  char t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  public SurfacePolygon(SurfacePolygon source){  super(source);  this.boundaries.addAll(source.boundaries);}  }
class C{  public EmtpyRegionFunctionException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  @Deprecated public static ClassDescriptor fromResourceName(String resourceName){  return DescriptorFactory.createClassDescriptorFromResourceName(resourceName);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.649 -0500",hash_original_method="5F0168F87C9D2A44BA2B8F8ED212E0A4",hash_generated_method="93F0EF4DDF0AF87DDB7A69D318F3F3AC") @DSSafe(DSCat.SAFE_OTHERS) public DotTerminatedMessageReader(Reader reader){  super(reader);  internalBuffer=new char[LS_CHARS.length + 3];  pos=internalBuffer.length;  atBeginning=true;  eof=false;  internalReader=new PushbackReader(reader);}  }
class C{  private void initInetAddressEntry(){  DualInetAddress address=inetAddressLookupMap.getDualInetAddress();  if (!inetAddressLookupMap.isControllerNode()) {    if (!verifyPublishedDualInetAddress(inetAddressLookupMap.getNodeId())) {      setNodeDualInetAddressInfo(inetAddressLookupMap.getNodeId(),address.toString());    }  }  if (inetAddressLookupMap.get(inetAddressLookupMap.getNodeId()) == null || (!inetAddressLookupMap.get(inetAddressLookupMap.getNodeId()).equals(inetAddressLookupMap.getDualInetAddress()))) {    inetAddressLookupMap.put(inetAddressLookupMap.getNodeId(),address);  }}  }
class C{  public BrandServiceImpl(final GenericDAO<Brand,Long> brandDao){  super(brandDao);}  }
class C{  static private String[] combineStringArrays(String[] value1,String[] value2){  String[] output=new String[value1.length + value2.length];  int counter=0;  for (int i=0; i < value1.length; i++) {    output[counter]=value1[i];    ++counter;  }  for (int i=0; i < value2.length; i++) {    output[counter]=value2[i];    ++counter;  }  return output;}  }
class C{  public void printElements(java.io.Writer w,Element... elements){  for (  Element element : elements)   (new PrintingProcessor.PrintingElementVisitor(w,this)).visit(element).flush();}  }
class C{  public static void check(Query q){  checkHashEquals(q);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public SVGFeConvolveMatrixElementBridge(){}  }
class C{  private void componentChanged(JComponent c){  JComponent comp=((JToolTip)c).getComponent();  if (comp != null && !(comp.isEnabled())) {    if (UIManager.getBorder("ToolTip.borderInactive") != null) {      LookAndFeel.installBorder(c,"ToolTip.borderInactive");    } else {      LookAndFeel.installBorder(c,"ToolTip.border");    }    if (UIManager.getColor("ToolTip.backgroundInactive") != null) {      LookAndFeel.installColors(c,"ToolTip.backgroundInactive","ToolTip.foregroundInactive");    } else {      LookAndFeel.installColors(c,"ToolTip.background","ToolTip.foreground");    }  } else {    LookAndFeel.installBorder(c,"ToolTip.border");    LookAndFeel.installColors(c,"ToolTip.background","ToolTip.foreground");  }}  }
class C{  public GZipRequest(int method,String url,Response.Listener<String> listener,Response.ErrorListener errorListener){  super(method,url,listener,errorListener);}  }
class C{  public static void addDefaultAppsStore(Context context){  AptoideDatabase database=new AptoideDatabase(Aptoide.getDb());  if (database.existsStore(Defaults.DEFAULT_STORE_ID)) {    return;  }  final Store store=new Store();  store.setId(Defaults.DEFAULT_STORE_ID);  store.setName(Defaults.DEFAULT_STORE_NAME);  store.setDownloads("");  String sizeString=IconSizeUtils.generateSizeStringAvatar(Aptoide.getContext());  String avatar="http://pool.img.aptoide.com/apps/b62b1c9459964d3a876b04c70036b10a_ravatar.png";  if (avatar != null) {    String[] splittedUrl=avatar.split("\\.(?=[^\\.]+$)");    avatar=splittedUrl[0] + "_" + sizeString+ "."+ splittedUrl[1];  }  store.setAvatar(avatar);  store.setDescription(context.getResources().getString(R.string.aptoide_description));  store.setTheme("default");  store.setView("list");  store.setBaseUrl("apps");  try {    long l=database.insertStore(store);    database.updateStore(store,l);  } catch (  Exception e) {    Logger.printException(e);  }}  }
class C{  public HashMap<String,String> previous(){  updateOffset(offset - limit);  return queryMap;}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  public static Query newExactQuery(String field,InetAddress value){  return newRangeQuery(field,value,value);}  }
class C{  public int concurrencyLevel(){  return locks.length;}  }
class C{  private ViewGraphHelpers(){}  }
class C{  public static boolean isCapitalized(String text){  if (text.isEmpty()) {    return false;  }  boolean isCaps=Character.isUpperCase(text.charAt(0));  if (!isCaps) {    return false;  }  if (text.length() == 1) {    return isCaps;  }  return !isCaps(text);}  }
class C{  private void initServiceConfigurations(MyriadConfiguration cfg,Injector injector){  LOGGER.info("Initializing initServiceConfigurations");  ServiceProfileManager profileManager=injector.getInstance(ServiceProfileManager.class);  Map<String,ServiceConfiguration> servicesConfigs=injector.getInstance(MyriadConfiguration.class).getServiceConfigurations();  for (  Map.Entry<String,ServiceConfiguration> entry : servicesConfigs.entrySet()) {    final String taskPrefix=entry.getKey();    ServiceConfiguration config=entry.getValue();    final Double cpu=config.getCpus();    final Double mem=config.getJvmMaxMemoryMB();    final Map<String,Long> ports=config.getPorts();    profileManager.add(new ServiceResourceProfile(taskPrefix,cpu,mem,ports));  }}  }
class C{  private StackTraceElement createStackTraceElement(Class controller,Method method) throws NotFoundException {  ClassPool pool=Enhancer.newClassPool();  CtClass cls=pool.get(controller.getCanonicalName());  return new StackTraceElement(controller.getCanonicalName(),method.getName(),cls.getClassFile2().getSourceFile(),cls.getDeclaredMethod(method.getName()).getMethodInfo2().getLineNumber(0) - 1);}  }
class C{  public static void removeTagFromSelectedNodes(final JFrame parent,final ZyGraph graph,final CTag tag){  final Collection<NaviNode> nodes=graph.getSelectedNodes();  try {    for (    final NaviNode n : nodes) {      n.getRawNode().removeTag(tag);    }  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00130: " + "Could not remove tag from nodes";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The tag '%s' could not be removed from the selected nodes.",tag.getName()),new String[]{"There was a problem with the database connection."},new String[]{"The tag was removed from some nodes but not from all."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);  }}  }
class C{  public MemberDefinition findMethod(Environment env,Identifier nm,Type t) throws ClassNotFound {  MemberDefinition f;  for (f=getFirstMatch(nm); f != null; f=f.getNextMatch()) {    if (f.getType().equalArguments(t)) {      return f;    }  }  if (nm.equals(idInit)) {    return null;  }  ClassDeclaration sup=getSuperClass();  if (sup == null)   return null;  return sup.getClassDefinition(env).findMethod(env,nm,t);}  }
class C{  public IsilonList<IsilonEvent> listEvents(String resumeToken) throws IsilonException {  return list(_baseUrl.resolve(URI_EVENTS),"events",IsilonEvent.class,resumeToken);}  }
class C{  public static org.topbraid.spin.model.Query parseQuery(String str,Model model){  Query arq=ARQFactory.get().createQuery(model,str);  ARQ2SPIN a2s=new ARQ2SPIN(model);  return a2s.createQuery(arq,null);}  }
class C{  @Override protected void entityInit(){  if (wrapped != null) {    wrapped.events.publish(new Stateful.LoadEvent());    updateCollider();  }}  }
class C{  @SuppressWarnings({"TooBroadScope","ConstantIfStatement"}) private boolean compareCaches(Map<Integer,Integer> expVals) throws Exception {  List<IgniteCache<Integer,Integer>> caches=new ArrayList<>(dataNodes());  List<GridDhtCacheAdapter<Integer,Integer>> dhtCaches=null;  for (int i=0; i < dataNodes(); i++) {    IgniteCache<Integer,Integer> cache=G.ignite(nodeName(i)).cache(CACHE_NAME);    assert cache != null;    caches.add(cache);    GridCacheAdapter<Integer,Integer> cache0=(GridCacheAdapter<Integer,Integer>)((IgniteKernal)cache.unwrap(Ignite.class)).<Integer,Integer>getCache(CACHE_NAME);    if (cache0.isNear()) {      if (dhtCaches == null)       dhtCaches=new ArrayList<>(dataNodes());      dhtCaches.add(((GridNearCacheAdapter<Integer,Integer>)cache0).dht());    }  }  Collection<Integer> cacheKeys=new HashSet<>();  Collection<Integer> dhtCacheKeys=new HashSet<>();  for (int i=0; i < dataNodes(); i++) {    for (    Cache.Entry<Integer,Integer> entry : caches.get(i))     cacheKeys.add(entry.getKey());    if (dhtCaches != null)     dhtCacheKeys.addAll(dhtCaches.get(i).keySet());  }  boolean failed=false;  if (!F.eq(expVals.keySet(),cacheKeys)) {    Collection<Integer> expOnly=new HashSet<>();    Collection<Integer> cacheOnly=new HashSet<>();    expOnly.addAll(expVals.keySet());    expOnly.removeAll(cacheKeys);    cacheOnly.addAll(cacheKeys);    cacheOnly.removeAll(expVals.keySet());    if (!expOnly.isEmpty())     log.error("Cache does not contain expected keys: " + expOnly);    if (!cacheOnly.isEmpty())     log.error("Cache does contain unexpected keys: " + cacheOnly);    failed=true;  }  if (dhtCaches != null && !F.eq(expVals.keySet(),dhtCacheKeys)) {    Collection<Integer> expOnly=new HashSet<>();    Collection<Integer> cacheOnly=new HashSet<>();    expOnly.addAll(expVals.keySet());    expOnly.removeAll(dhtCacheKeys);    cacheOnly.addAll(dhtCacheKeys);    cacheOnly.removeAll(expVals.keySet());    if (!expOnly.isEmpty())     log.error("DHT cache does not contain expected keys: " + expOnly);    if (!cacheOnly.isEmpty())     log.error("DHT cache does contain unexpected keys: " + cacheOnly);    failed=true;  }  Collection<Integer> failedKeys=new HashSet<>();  for (  Map.Entry<Integer,Integer> entry : expVals.entrySet()) {    for (int i=0; i < dataNodes(); i++) {      if (!F.eq(caches.get(i).get(entry.getKey()),entry.getValue()))       failedKeys.add(entry.getKey());    }  }  if (!failedKeys.isEmpty()) {    log.error("Cache content is incorrect for " + failedKeys.size() + " keys:");    for (    Integer key : failedKeys) {      for (int i=0; i < dataNodes(); i++) {        IgniteCache<Integer,Integer> cache=caches.get(i);        UUID nodeId=G.ignite(nodeName(i)).cluster().localNode().id();        if (!F.eq(cache.get(key),expVals.get(key)))         log.error("key=" + key + ", expVal="+ expVals.get(key)+ ", nodeId="+ nodeId);      }    }    failed=true;  }  return !failed;}  }
class C{  private Object _internalGet(final String path) throws IllegalArgumentException {  List v=_internalGetAsArray(path);  if (v == null || v.size() == 0) {    return null;  }  return v.get(0);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.688 -0500",hash_original_method="1D9798A0A4D63301EAA0C709DA651E0D",hash_generated_method="4777531DC6DAFBE5D6CD7B3DF1F501A7") public static String toHexString(double d){  String ret=new String();  ret.addTaint(d);  return ret;}  }
class C{  static long readVarLong(InputStream in) throws IOException {  long x=in.read();  if (x < 0) {    throw new EOFException();  }  x=(byte)x;  if (x >= 0) {    return x;  }  x&=0x7f;  for (int s=7; s < 64; s+=7) {    long b=in.read();    if (b < 0) {      throw new EOFException();    }    b=(byte)b;    x|=(b & 0x7f) << s;    if (b >= 0) {      break;    }  }  return x;}  }
class C{  public void append(char digit){  if (count == digits.length) {    char[] data=new char[count + 100];    System.arraycopy(digits,0,data,0,count);    digits=data;  }  digits[count++]=digit;}  }
class C{  String readLiteral(String source,int ofs,String token){  return source.substring(ofs,ofs + token.length());}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  @Override public void addView(ReactDrawerLayout parent,View child,int index){  if (getChildCount(parent) >= 2) {    throw new JSApplicationIllegalArgumentException("The Drawer cannot have more than two children");  }  if (index != 0 && index != 1) {    throw new JSApplicationIllegalArgumentException("The only valid indices for drawer's child are 0 or 1. Got " + index + " instead.");  }  parent.addView(child,index);  parent.setDrawerProperties();}  }
class C{  public boolean elementAvailable(QName elemName){  return m_availElems.containsKey(elemName);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().setSubtitleDelay(getLong(stack));  return null;}  }
class C{  public final ItemStack addTool(int aID,String aEnglish,String aToolTip,IToolStats aToolStats,Object... aOreDictNamesAndAspects){  if (aToolTip == null)   aToolTip="";  if (aID >= 0 && aID < 32766 && aID % 2 == 0) {    GT_LanguageManager.addStringLocalization(getUnlocalizedName() + "." + aID+ ".name",aEnglish);    GT_LanguageManager.addStringLocalization(getUnlocalizedName() + "." + aID+ ".tooltip",aToolTip);    GT_LanguageManager.addStringLocalization(getUnlocalizedName() + "." + (aID + 1)+ ".name",aEnglish + " (Empty)");    GT_LanguageManager.addStringLocalization(getUnlocalizedName() + "." + (aID + 1)+ ".tooltip","You need to recharge it");    mToolStats.put((short)aID,aToolStats);    mToolStats.put((short)(aID + 1),aToolStats);    aToolStats.onStatsAddedToTool(this,aID);    ItemStack rStack=new ItemStack(this,1,aID);    List<TC_AspectStack> tAspects=new ArrayList<TC_AspectStack>();    for (    Object tOreDictNameOrAspect : aOreDictNamesAndAspects) {      if (tOreDictNameOrAspect instanceof TC_AspectStack)       ((TC_AspectStack)tOreDictNameOrAspect).addToAspectList(tAspects); else       GT_OreDictUnificator.registerOre(tOreDictNameOrAspect,rStack);    }    if (GregTech_API.sThaumcraftCompat != null)     GregTech_API.sThaumcraftCompat.registerThaumcraftAspectsToItem(rStack,tAspects,false);    return rStack;  }  return null;}  }
class C{  public int bytesAvailable(){  return length() - position();}  }
class C{  public DragControl(boolean repaint,boolean fixOnMouseOver){  this.repaint=repaint;  this.fixOnMouseOver=fixOnMouseOver;}  }
class C{  public SparseVector scale(double alpha){  SparseVector c=new SparseVector(d);  for (  int i : this.st.keys())   c.put(i,alpha * this.get(i));  return c;}  }
class C{  public static Memory convertSerV3toSerV2(Memory v3mem){  int serVer=v3mem.getByte(SER_VER_BYTE);  int famId=v3mem.getByte(FAMILY_BYTE);  int flags=v3mem.getByte(FLAGS_BYTE);  if ((serVer != 3) || (famId != 3) || ((flags & 24) != 24))   throw new SketchesArgumentException("Memory must be V3, Compact, Ordered");  int preLongs=v3mem.getByte(PREAMBLE_LONGS_BYTE) & 0X3F;  int entries=(preLongs == 1) ? 0 : v3mem.getInt(RETAINED_ENTRIES_INT);  int v2bytes=(preLongs + entries) << 3;  Memory v2mem=new NativeMemory(new byte[v2bytes]);  NativeMemory.copy(v3mem,0,v2mem,0,v2bytes);  v2mem.putByte(SER_VER_BYTE,(byte)2);  byte v2flags=(byte)(2 | ((preLongs == 1) ? 4 : 0));  v2mem.putByte(FLAGS_BYTE,v2flags);  return v2mem;}  }
class C{  public static <T>ImmutableSortedSet<ImmutableSortedSet<T>> immutablePowerSet(SortedSet<T> set){  return powerSet(set).collect(null,TreeSortedSet.newSet(Comparators.powerSet())).toImmutable();}  }
class C{  void jbInit() throws Exception {  setMode(MODE_VERTICAL);  this.setLayout(mainLayout);  centerPanel.setLayout(centerLayout);  this.add(centerPanel,BorderLayout.CENTER);}  }
class C{  public java.lang.StringBuffer reverse(){  return null;}  }
class C{  public ProblemException(Problem problem,Throwable cause){  super(cause);  this.problem=problem;}  }
class C{  public void add(VCardProperty property,Warning warning){  warnings.put(property,warning);}  }
class C{  public Property property(DateTimeFieldType fieldType){  if (fieldType == null) {    throw new IllegalArgumentException("The DateTimeFieldType must not be null");  }  if (isSupported(fieldType) == false) {    throw new IllegalArgumentException("Field '" + fieldType + "' is not supported");  }  return new Property(this,fieldType.getField(getChronology()));}  }
class C{  public TermsByQueryRequest query(QueryBuilder queryBuilder){  this.querySource=queryBuilder == null ? null : queryBuilder.buildAsBytes();  return this;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.FUNCTION_EXPRESSION;}  }
class C{  public AmtInWords_TH(){  super();}  }
class C{  public DateOrDateTimeProperty(Date value,boolean hasTime){  this(createICalDate(value,hasTime));}  }
class C{  @Override public void failure(RetrofitError error){  utils.logIssue("RetrofitError in DeleteFileCallback.  File: [" + storedExceptionFileName + "]",error);}  }
class C{  @Override public boolean exists(Path f) throws IOException {  LOG.debug("exists {}",f.toString());  return storageClient.exists(hostNameScheme,f);}  }
class C{  @Override public void accumulate(Object value){  this.count+=((Integer)value).intValue();}  }
class C{  void startLocatingPhone(){  Intent intent=new Intent(sContext,LocationService.class);  intent.setAction(LocationService.START_SERVICE);  intent.putExtra("to",this.mAnswerTo);  sContext.startService(intent);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ASSOCIATION_CLASS_DEFINITION___NAME_1:    return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.ASSOCIATION_CLASS_DEFINITION___ASSOCIATION_CLASS_CONTENT_1:  return associationClassContent_1 != null && !associationClassContent_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static Container encloseBottom(Component... cmps){  return Container.encloseIn(new FlowLayout(Component.LEFT,Component.BOTTOM),cmps);}  }
class C{  public final void translateX(double dx){  position.translateX(dx);}  }
class C{  public static void main(String[] args) throws Exception {  new ResultFileEvaluator().start(args);}  }
class C{  @Override public double nextDouble(){  return (((long)next(26) << 27) + next(27)) / (double)(1L << 53);}  }
class C{  private Base64(){}  }
class C{  private static final void copy(InputStream in,OutputStream out,int blockSize) throws IOException {  byte[] buffer=new byte[blockSize];  int len;  while ((len=in.read(buffer)) != -1) {    out.write(buffer,0,len);  }}  }
class C{  @Override public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs){switch (eContainerFeatureID()) {case TypesPackage.PARAMETER__OWNING_OPERATION:    return eInternalContainer().eInverseRemove(this,TypesPackage.OPERATION__PARAMETERS,Operation.class,msgs);}return super.eBasicRemoveFromContainerFeature(msgs);}  }
class C{  public static void copy(File source,File target,FilenameFilter filter) throws IOException {  copy(source,target,filter,false,true);}  }
class C{  public HamerlyKMeans(){  this(new EuclideanDistance(),SeedSelectionMethods.SeedSelection.KPP);}  }
class C{  public ProtocolCodecFilter(ProtocolCodecFactory factory){  if (factory == null) {    throw new IllegalArgumentException("factory");  }  this.factory=factory;}  }
class C{  public DefaultApiClient(String apiUrl,String consumerKey,String consumerSecret){  setupService(apiUrl,null,consumerKey,consumerSecret,null);}  }
class C{  @Deprecated public void sendMessage(byte[] content) throws RcsPermissionDeniedException, RcsGenericException {  try {    mSessionIntf.sendMessage(content);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public TransactionInput addInput(Sha256Hash spendTxHash,long outputIndex,Script script){  return addInput(new TransactionInput(params,this,script.getProgram(),new TransactionOutPoint(params,outputIndex,spendTxHash)));}  }
class C{  @Override public java_cup.runtime.Symbol next_token() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL) {          zzInput=zzBufferL[zzCurrentPosL++];        } else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1) {          break zzForAction;        }        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8) {            break zzForAction;          }        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 11:{        return sf.newSymbol("Or",sym.OR);      }case 34:    break;case 24:{    return sf.newSymbol("Sin",sym.SIN);  }case 35:break;case 23:{return sf.newSymbol("Log",sym.LOG);}case 36:break;case 16:{return sf.newSymbol("Left Bracket",sym.LPAREN);}case 37:break;case 27:{return sf.newSymbol("True",sym.TRUE);}case 38:break;case 1:{System.err.println("Illegal character: " + yytext());}case 39:break;case 29:{return sf.newSymbol("Sqrt",sym.SQRT);}case 40:break;case 30:{return sf.newSymbol("Ceil",sym.CEIL);}case 41:break;case 31:{return sf.newSymbol("False",sym.FALSE);}case 42:break;case 18:{return sf.newSymbol("Less or equal than",sym.LE);}case 43:break;case 17:{return sf.newSymbol("Right Bracket",sym.RPAREN);}case 44:break;case 26:{return sf.newSymbol("Cos",sym.COS);}case 45:break;case 21:{return sf.newSymbol("Exp",sym.EXP);}case 46:break;case 12:{return sf.newSymbol("Number",sym.NUMBER,new Double(yytext()));}case 47:break;case 3:{return sf.newSymbol("Plus",sym.PLUS);}case 48:break;case 13:{return sf.newSymbol("Variable",sym.VARIABLE,new String(yytext()));}case 49:break;case 22:{return sf.newSymbol("Abs",sym.ABS);}case 50:break;case 20:{return sf.newSymbol("Tan",sym.TAN);}case 51:break;case 15:{return sf.newSymbol("Comma",sym.COMMA);}case 52:break;case 33:{return sf.newSymbol("IfElse",sym.IFELSE);}case 53:break;case 28:{return sf.newSymbol("Rint",sym.RINT);}case 54:break;case 8:{return sf.newSymbol("Greater than",sym.GT);}case 55:break;case 19:{return sf.newSymbol("Greater or equal than",sym.GE);}case 56:break;case 5:{return sf.newSymbol("Division",sym.DIVISION);}case 57:break;case 7:{return sf.newSymbol("Equals",sym.EQ);}case 58:break;case 10:{return sf.newSymbol("And",sym.AND);}case 59:break;case 9:{return sf.newSymbol("Not",sym.NOT);}case 60:break;case 4:{return sf.newSymbol("Times",sym.TIMES);}case 61:break;case 32:{return sf.newSymbol("Floor",sym.FLOOR);}case 62:break;case 6:{return sf.newSymbol("Less than",sym.LT);}case 63:break;case 25:{return sf.newSymbol("Pow",sym.POW);}case 64:break;case 14:{}case 65:break;case 2:{return sf.newSymbol("Minus",sym.MINUS);}case 66:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;{return sf.newSymbol("EOF",sym.EOF);}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static double nextGamma(double shape,double scale){  if (TRY_COLT) {    return coltGamma.nextDouble(shape,1.0 / scale);  }  return nextGamma(shape,scale,false);}  }
class C{  public void testUpdate8(){  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field2=NULL";  try {    int num=statement.executeUpdate(updateQuery);    assertEquals("Not all records in the database were updated",numberOfRecords,num);    String selectQuery="SELECT field2 FROM " + DatabaseCreator.TEST_TABLE1;    ResultSet result=statement.executeQuery(selectQuery);    while (result.next()) {      assertNull("value of field2 should be NULL",result.getObject("field2"));    }    result.close();  } catch (  SQLException e) {    fail("Unexpected exception" + e.getMessage());  }}  }
class C{  public void addEvent(String e){  if (TextUtils.isEmpty(e)) {    return;  }  if (event == null) {    event=new WXEvent();  }  if (containsEvent(e)) {    return;  }  event.add(e);}  }
class C{  public AddShareDialog(java.awt.Frame parent){  this(parent,null,null);}  }
class C{  @Override public String toString(){  StringWriter s=new StringWriter();  try {    new DocPretty(s).print(this);  } catch (  IOException e) {    throw new AssertionError(e);  }  return s.toString();}  }
class C{  public static File showOpenFile(final Shell parent,final File workingDir){  final JFileImageChooser chooser=new JFileImageChooser(parent,SWT.OPEN,workingDir);  chooser.setFilter(supportedReaders);  final FileDialog dialog=chooser.getFileDialog();  dialog.setText("Open image file");  final String path=dialog.open();  File file=null;  if (path != null && path.length() >= 1) {    file=new File(path);  }  return file;}  }
class C{  private List<VolumeDescriptor> createVolumeDescriptorsForNativeExpansion(List<URI> volumeURIs){  List<Volume> preparedVolumes=_dbClient.queryObject(Volume.class,volumeURIs);  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();  for (  Volume volume : preparedVolumes) {    if (null == volume.getAssociatedVolumes() || volume.getAssociatedVolumes().isEmpty()) {      s_logger.error("VPLEX volume {} has no backend volumes.",volume.forDisplay());      throw InternalServerErrorException.internalServerErrors.noAssociatedVolumesForVPLEXVolume(volume.forDisplay());    }    for (    String associatedVolumeStr : volume.getAssociatedVolumes()) {      Volume associatedVolume=_dbClient.queryObject(Volume.class,URI.create(associatedVolumeStr));      if (associatedVolume.isSRDFSource()) {        SRDFBlockServiceApiImpl srdfApi=(SRDFBlockServiceApiImpl)BlockService.getBlockServiceImpl("srdf");        List<VolumeDescriptor> srdfDescriptors=srdfApi.getVolumeDescriptorsForExpandVolume(associatedVolume,associatedVolume.getProvisionedCapacity());        descriptors.addAll(srdfDescriptors);        List<VolumeDescriptor> srdfTargetDescriptors=VolumeDescriptor.filterByType(srdfDescriptors,VolumeDescriptor.Type.SRDF_TARGET);        for (        VolumeDescriptor targetDescriptor : srdfTargetDescriptors) {          Volume targetVolume=_dbClient.queryObject(Volume.class,targetDescriptor.getVolumeURI());          Volume vplexTargetVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(_dbClient,targetVolume);          if (vplexTargetVolume != null) {            List<VolumeDescriptor> vplexTargetDescriptors=createVolumeDescriptorsForNativeExpansion(Arrays.asList(vplexTargetVolume.getId()));            descriptors.addAll(vplexTargetDescriptors);          }        }      } else       if (!NullColumnValueGetter.isNullNamedURI(associatedVolume.getSrdfParent())) {        s_logger.info("Ignoring associated volume that is SRDF target: " + associatedVolume.getLabel());      } else {        VolumeDescriptor descriptor=new VolumeDescriptor(VolumeDescriptor.Type.BLOCK_DATA,associatedVolume.getStorageController(),associatedVolume.getId(),associatedVolume.getPool(),null,null,associatedVolume.getCapacity());        descriptors.add(descriptor);      }    }    VolumeDescriptor desc=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,volume.getStorageController(),volume.getId(),volume.getPool(),null,null,volume.getCapacity());    descriptors.add(desc);  }  return descriptors;}  }
class C{  public ComparisonFailure(String message,String expected,String actual){  super(message);  this.fExpected=expected;  this.fActual=actual;}  }
class C{  @Override public Double put(Float key,Double value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  public int countWorkflow(long serviceProcessId) throws PortalException, SystemException {  return processWorkflowPersistence.countByS_P_ID(serviceProcessId);}  }
class C{  @ModelAttribute public void addDataToModel(ModelMap model){  SearchData dataForSearchBar=new SearchData();  dataForSearchBar.setSearchMode("natural");  dataForSearchBar.setCurrentPage(1);  dataForSearchBar.setQueryText(null);  dataForSearchBar.setNumberResultsPerPage(10);  model.put("advancedSearchData",dataForSearchBar);}  }
class C{  public static void parseTemplate(Element modelElement,Element formNode,Element formChild,Map<String,Element> bindings,Map<String,String> problemList,Map<String,String> problemListItems,int level){  level++;  int numOfEntries=formChild.getChildCount();  for (int i=0; i < numOfEntries; i++) {    if (formChild.isText(i))     continue;    Element child=formChild.getElement(i);    if (child.getAttributeValue(null,ATTRIBUTE_OPENMRS_DATATYPE) == null && child.getAttributeValue(null,ATTRIBUTE_OPENMRS_CONCEPT) != null) {      continue;    }    String name=child.getName();    if ((child.getAttributeValue(null,ATTRIBUTE_OPENMRS_CONCEPT) != null && level > 1) || (child.getAttributeValue(null,ATTRIBUTE_OPENMRS_ATTRIBUTE) != null && child.getAttributeValue(null,ATTRIBUTE_OPENMRS_TABLE) != null)) {      if (!name.equalsIgnoreCase(NODE_PROBLEM_LIST)) {        Element bindNode=createBindNode(modelElement,child,bindings,problemList,problemListItems);        if (isMultSelectNode(child)) {          addMultipleSelectXformValueNode(child);        }        if (isTableFieldNode(child)) {          setTableFieldDataType(name,bindNode);          setTableFieldBindingAttributes(name,bindNode);          setTableFieldDefaultValue(name,formNode);          if ("identifier".equalsIgnoreCase(child.getAttributeValue(null,ATTRIBUTE_OPENMRS_ATTRIBUTE)) && "patient_identifier".equalsIgnoreCase(child.getAttributeValue(null,ATTRIBUTE_OPENMRS_TABLE))) {            bindNode.setAttribute(null,ATTRIBUTE_PRELOAD,PRELOAD_PATIENT);            bindNode.setAttribute(null,ATTRIBUTE_PRELOAD_PARAMS,"patientIdentifier");          }        }      }    }    parseTemplate(modelElement,formNode,child,bindings,problemList,problemListItems,level);  }}  }
class C{  protected void updateOptions(){  if (m_Template instanceof OptionHandler) {    m_ClassifierOptions=Utils.joinOptions(((OptionHandler)m_Template).getOptions());  } else {    m_ClassifierOptions="";  }  if (m_Template instanceof Serializable) {    ObjectStreamClass obs=ObjectStreamClass.lookup(m_Template.getClass());    m_ClassifierVersion="" + obs.getSerialVersionUID();  } else {    m_ClassifierVersion="";  }}  }
class C{  public boolean isProxyHttpEnabled(){  return getBoolean(prefApp,R.string.pref_key__http_proxy_enabled,false);}  }
class C{  public TreePath(){}  }
class C{  protected MouseDragGestureRecognizer(DragSource ds,Component c,int act,DragGestureListener dgl){  super(ds,c,act,dgl);}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("EventParser.parse");  try {    headerName(TokenTypes.EVENT);    this.lexer.SPorHT();    Event event=new Event();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    String value=token.getTokenValue();    event.setEventType(value);    super.parse(event);    this.lexer.SPorHT();    this.lexer.match('\n');    return event;  } catch (  ParseException ex) {    throw createParseException(ex.getMessage());  } finally {    if (debug)     dbg_leave("EventParser.parse");  }}  }
class C{  public void enableDetector(DetectorFactory factory,boolean enable){  detectorEnablementMap.put(factory.getShortName(),enable);}  }
class C{  public void whoisDetail(){  bot.sendIRC().whoisDetail(serverUser.getNick());}  }
class C{  public int[] updateResultsMultiple(int waitedSize,boolean hasException){  if (hasException) {    for (int i=affectedRows.size(); i < waitedSize; i++) {      addStatsError();    }  }  return getAffectedRows();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void reset(){  for (  PortPair pair : getManagedPairs()) {    if (pair.getInputPort().isConnected()) {      pair.getOutputPort().deliver(new IOObjectCollection<IOObject>());    } else {      pair.getOutputPort().clear(Port.CLEAR_DATA);    }  }}  }
class C{  public String cropKeepFinalCharacter(String string,char finalChar){  String cropped=crop(string);  if ((null == string) || string.equals(cropped)) {    return string;  }  if (cropped.length() == 0) {    return cropped;  }  return cropped + finalChar;}  }
class C{  public static long pwMaxMask(final int registerSizeInBits){  return PW_MASK[registerSizeInBits];}  }
class C{  public void zeroShift(int shift){  zeroShift(x,shift);}  }
class C{  public static Address maximumObjectRef(Address regionHighAddr){  return regionHighAddr.plus(OBJECT_REF_OFFSET - SCALAR_HEADER_SIZE);}  }
class C{  public static int numPoints(Clustering<? extends MeanModel> clustering){  int n=0;  for (  Cluster<? extends MeanModel> aCluster : clustering.getAllClusters()) {    n+=aCluster.size();  }  return n;}  }
class C{  public final void add(Matrix4f m1){  this.m00+=m1.m00;  this.m01+=m1.m01;  this.m02+=m1.m02;  this.m03+=m1.m03;  this.m10+=m1.m10;  this.m11+=m1.m11;  this.m12+=m1.m12;  this.m13+=m1.m13;  this.m20+=m1.m20;  this.m21+=m1.m21;  this.m22+=m1.m22;  this.m23+=m1.m23;  this.m30+=m1.m30;  this.m31+=m1.m31;  this.m32+=m1.m32;  this.m33+=m1.m33;}  }
class C{  public void testWithCycles1() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter w=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(newTextField("field","here comes here comes",Field.Store.NO));  w.addDocument(doc);  doc=new Document();  doc.add(newTextField("field","comes here",Field.Store.NO));  w.addDocument(doc);  IndexReader r=w.getReader();  IndexSearcher s=newSearcher(r);  TermAutomatonQuery q=new TermAutomatonQuery("field");  int init=q.createState();  int s1=q.createState();  q.addTransition(init,s1,"here");  q.addTransition(s1,init,"comes");  q.setAccept(init,true);  q.finish();  assertEquals(1,s.search(q,1).totalHits);  w.close();  r.close();  dir.close();}  }
class C{  @Override public void validate(){  super.validate();}  }
class C{  public MOrder createPOForVendor(int C_BPartner_ID,MOrder so){  MOrder po=new MOrder(getCtx(),0,get_TrxName());  po.setClientOrg(so.getAD_Client_ID(),so.getAD_Org_ID());  po.setLink_Order_ID(so.getC_Order_ID());  po.setIsSOTrx(false);  po.setC_DocTypeTarget_ID();  po.setDescription(so.getDescription());  po.setPOReference(so.getDocumentNo());  po.setPriorityRule(so.getPriorityRule());  po.setSalesRep_ID(so.getSalesRep_ID());  po.setM_Warehouse_ID(so.getM_Warehouse_ID());  MBPartner vendor=new MBPartner(getCtx(),C_BPartner_ID,get_TrxName());  po.setBPartner(vendor);  if (p_IsDropShip) {    po.setIsDropShip(p_IsDropShip);    if (so.isDropShip() && so.getDropShip_BPartner_ID() != 0) {      po.setDropShip_BPartner_ID(so.getDropShip_BPartner_ID());      po.setDropShip_Location_ID(so.getDropShip_Location_ID());      po.setDropShip_User_ID(so.getDropShip_User_ID());    } else {      po.setDropShip_BPartner_ID(so.getC_BPartner_ID());      po.setDropShip_Location_ID(so.getC_BPartner_Location_ID());      po.setDropShip_User_ID(so.getAD_User_ID());    }    MOrgInfo orginfo=MOrgInfo.get(getCtx(),po.getAD_Org_ID(),get_TrxName());    if (orginfo.getDropShip_Warehouse_ID() != 0)     po.setM_Warehouse_ID(orginfo.getDropShip_Warehouse_ID()); else     log.log(Level.SEVERE,"Must specify drop ship warehouse in org info.");  }  po.setC_Activity_ID(so.getC_Activity_ID());  po.setC_Campaign_ID(so.getC_Campaign_ID());  po.setC_Project_ID(so.getC_Project_ID());  po.setUser1_ID(so.getUser1_ID());  po.setUser2_ID(so.getUser2_ID());  po.saveEx();  return po;}  }
class C{  public List<String> parseDefault(String... args){  return parseDefault(Arrays.asList(args));}  }
class C{  public void addSessionListener(SessionListener l){  getSessionSupport().addSessionListener(l);}  }
class C{  public H264Stream(){  this(CameraInfo.CAMERA_FACING_BACK);}  }
class C{  protected boolean recoverRedundancy(Set excludedServers,boolean recoverInterest){  if (pool.getPoolOrCacheCancelInProgress() != null) {    return true;  }  int additionalBackups;  while (pool.getPoolOrCacheCancelInProgress() == null && ((additionalBackups=redundancyLevel - getCurrentRedundancy()) > 0 || redundancyLevel == -1)) {    if (redundancyLevel != -1 && printRecoveringRedundant) {      logger.info(LocalizedMessage.create(LocalizedStrings.QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_REDUNDANT_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER));      printRecoveringRedundant=false;    }    List servers=findQueueServers(excludedServers,redundancyLevel == -1 ? -1 : additionalBackups,false,(redundancyLevel == -1 ? false : printRedundancyNotSatisfiedError),LocalizedStrings.QueueManagerImpl_COULD_NOT_FIND_SERVER_TO_CREATE_REDUNDANT_CLIENT_QUEUE);    if (servers == null || servers.isEmpty()) {      if (redundancyLevel != -1) {        if (printRedundancyNotSatisfiedError) {          logger.info(LocalizedMessage.create(LocalizedStrings.QueueManagerImpl_REDUNDANCY_LEVEL_0_IS_NOT_SATISFIED_BUT_THERE_ARE_NO_MORE_SERVERS_AVAILABLE_REDUNDANCY_IS_CURRENTLY_1,new Object[]{Integer.valueOf(redundancyLevel),Integer.valueOf(getCurrentRedundancy())}));        }      }      printRedundancyNotSatisfiedError=false;      return false;    }    excludedServers.addAll(servers);    final boolean isDebugEnabled=logger.isDebugEnabled();    for (Iterator itr=servers.iterator(); itr.hasNext(); ) {      ServerLocation server=(ServerLocation)itr.next();      Connection connection=null;      try {        connection=factory.createClientToServerConnection(server,true);      } catch (      GemFireSecurityException e) {        throw e;      }catch (      Exception e) {        if (isDebugEnabled) {          logger.debug("SubscriptionManager - Error connecting to server: ()",server,e);        }      }      if (connection == null) {        continue;      }      QueueConnectionImpl queueConnection=initializeQueueConnection(connection,false,null);      if (queueConnection != null) {        boolean isFirstNewConnection=false;synchronized (lock) {          if (recoverInterest && queueConnections.getPrimary() == null && queueConnections.getBackups().isEmpty()) {            isFirstNewConnection=true;          }        }        boolean promotionFailed=false;        if (isFirstNewConnection) {          if (!promoteBackupCnxToPrimary(queueConnection)) {            promotionFailed=true;          }        }        if (!promotionFailed) {          if (addToConnectionList(queueConnection,isFirstNewConnection)) {            printRedundancyNotSatisfiedError=true;            printRecoveringRedundant=true;            if (logger.isDebugEnabled()) {              logger.debug("SubscriptionManager redundancy satisfier - created a queue on server {}",queueConnection.getEndpoint());            }            if (recoverInterest) {              recoverInterest(queueConnection,isFirstNewConnection);            }          }        }      }    }  }  return true;}  }
class C{  public SVGPath relativeCubicTo(double c1x,double c1y,double c2x,double c2y,double x,double y){  append(PATH_CUBIC_TO_RELATIVE,c1x,c1y,c2x,c2y,x,y);  return this;}  }
class C{  public boolean isPermitNullValues(){  return permitNullValues;}  }
class C{  public Pair<Map<RandomVariable,Object>,Double> weightedSample(BayesianNetwork bn,AssignmentProposition[] e){  double w=1.0;  Map<RandomVariable,Object> x=new LinkedHashMap<RandomVariable,Object>();  for (  AssignmentProposition ap : e) {    x.put(ap.getTermVariable(),ap.getValue());  }  for (  RandomVariable Xi : bn.getVariablesInTopologicalOrder()) {    if (x.containsKey(Xi)) {      w*=bn.getNode(Xi).getCPD().getValue(ProbUtil.getEventValuesForXiGivenParents(bn.getNode(Xi),x));    } else {      x.put(Xi,ProbUtil.randomSample(bn.getNode(Xi),x,randomizer));    }  }  return new Pair<Map<RandomVariable,Object>,Double>(x,w);}  }
class C{  public CF4(){  this(10);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:58.842 -0500",hash_original_method="1842D0C2283B311B2A29E474687D9235",hash_generated_method="1842D0C2283B311B2A29E474687D9235") boolean isInEmergencyCall(){  return mIsInEmergencyCall;}  }
class C{  private void touchPointChanged(PointInfo touchPoint){  mCurrTouchPoint.set(touchPoint);  invalidate();}  }
class C{  public void createBug10476_upgradeSuspendedSubscription2() throws Exception {  setDateFactory("2013-08-02 09:00:00");  String customerAdminId="Bug10476UpgrSus2CustomerAdmin";  VOOrganization customer=orgSetup.registerCustomer("Bug10476UpgrSus2Customer",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,customerAdminId,supplierMarketplace.getMarketplaceId(),basicSetup.getSupplierOrgID());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10476_UPGRSUS2_SERVICE",TestService.EXAMPLE2_ASYNC,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES,technicalServiceAsync,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),3);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(customerAdmin.getKey(),"BUG10476_UPGRSUS2",serviceDetails,customerAdmin,VOServiceFactory.getRole(serviceDetails,"GUEST"));  setDateFactory("2013-08-02 10:00:00");  subDetails=subscrSetup.completeAsyncSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,subDetails);  setDateFactory("2013-08-03 00:00:00");  paymentSetup.deleteCustomerPaymentTypes(basicSetup.getSupplierAdminKey(),customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  setDateFactory("2013-08-04 12:00:00");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOServiceDetails upgradedServiceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"BUG10476_UPGRSUS2_FREE_SERVICE",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,technicalServiceAsync,supplierMarketplace);  serviceSetup.registerCompatibleServices(basicSetup.getSupplierAdminKey(),serviceDetails,upgradedServiceDetails);  setDateFactory("2013-08-04 22:10:00");  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(customerAdmin.getKey(),subDetails,upgradedServiceDetails);  setDateFactory("2013-08-04 23:10:00");  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails);  setDateFactory("2013-08-11 15:00:00");  paymentSetup.reassignCustomerPaymentTypes(basicSetup.getSupplierAdminKey(),customer);  upgradedSubDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),upgradedSubDetails.getSubscriptionId());  setDateFactory("2013-08-15 08:12:00");  subscrSetup.unsubscribeToService(upgradedSubDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10476_UPGRSUS2",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("BUG10476_UPGRSUS2",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("BUG10476_UPGRSUS2",customer);}  }
class C{  @SuppressWarnings("unchecked") public T masterNodeTimeout(TimeValue masterNodeTimeout){  this.masterNodeTimeout=masterNodeTimeout;  return (T)this;}  }
class C{  public int remove(Object key){  if (key == null)   key=NULL_KEY;  int hash=key.hashCode() & _mask;synchronized (this) {    Item prev=null;    for (Item item=_entries[hash]; item != null; item=item._next) {      Object itemKey=item._key;      if (itemKey == key || itemKey.equals(key)) {        int oldValue=item._value;        if (prev != null)         prev._next=item._next; else         _entries[hash]=item._next;        _size--;        return oldValue;      }      prev=item;    }  }  return NULL;}  }
class C{  public boolean isValid(){  return (Math.abs(lo()) <= S2.M_PI && Math.abs(hi()) <= S2.M_PI && !(lo() == -S2.M_PI && hi() != S2.M_PI) && !(hi() == -S2.M_PI && lo() != S2.M_PI));}  }
class C{  public boolean isCompletelyVisible(int position){  int first=getFirstCompletelyVisiblePosition();  int last=getLastCompletelyVisiblePosition();  return first <= position && last >= position;}  }
class C{  public synchronized long size(){  return size;}  }
class C{  DOMStringListImpl(String[] params){  fStrings=new Vector();  if (params != null) {    for (int i=0; i < params.length; i++) {      fStrings.add(params[i]);    }  }}  }
class C{  public FpuStackTableModel(Fpu fpu,JasDocument doc){  this.fpu=fpu;  listener=new ArrayList<>();  this.doc=doc;}  }
class C{  public final int put(Object key,int value,boolean isReplace){  int prime=_prime;  int hash=Math.abs(System.identityHashCode(key) % prime);  Object[] keys=_keys;  while (true) {    Object testKey=keys[hash];    if (testKey == null) {      keys[hash]=key;      _values[hash]=value;      _size++;      if (keys.length <= 4 * _size)       resize(4 * keys.length);      return value;    } else     if (key != testKey) {      hash=(hash + 1) % prime;      continue;    } else     if (isReplace) {      int old=_values[hash];      _values[hash]=value;      return old;    } else {      return _values[hash];    }  }}  }
class C{  private void createAndConnect(){  Intent createConnection;  createConnection=new Intent();  createConnection.setClassName(clientConnections.getApplicationContext(),"org.eclipse.paho.android.service.sample.NewConnection");  clientConnections.startActivityForResult(createConnection,ActivityConstants.connect);}  }
class C{  public static <T>Range<T> valueOf(String s,Class<T> clazz){  char lbm=s.charAt(0);  if (lbm != '[' && lbm != '(')   throw new IllegalArgumentException(s);  char ubm=s.charAt(s.length() - 1);  if (ubm != ']' && ubm != ')')   throw new IllegalArgumentException(s);  BoundType lbt=lbm == '[' ? BoundType.CLOSED : BoundType.OPEN;  BoundType ubt=ubm == ']' ? BoundType.CLOSED : BoundType.OPEN;  s=s.substring(1,s.length() - 1);  String[] parts=s.split("\\.\\.");  String lbs=parts[0];  String ubs=parts[1];  T lowerBound=lbs.equals("*") ? null : boundValue(lbs,clazz);  T upperBound=ubs.equals("*") ? null : boundValue(ubs,clazz);  return range(lowerBound,lbt,upperBound,ubt);}  }
class C{  public static Version fromString(String version){  if (!Strings.hasLength(version)) {    return Version.CURRENT;  }  final boolean snapshot;  if (snapshot=version.endsWith("-SNAPSHOT")) {    version=version.substring(0,version.length() - 9);  }  String[] parts=version.split("\\.|\\-");  if (parts.length < 3 || parts.length > 4) {    throw new IllegalArgumentException("the version needs to contain major, minor and revision, and optionally the build: " + version);  }  try {    final int major=Integer.parseInt(parts[0]) * 1000000;    final int minor=Integer.parseInt(parts[1]) * 10000;    final int revision=Integer.parseInt(parts[2]) * 100;    int build=99;    if (parts.length == 4) {      String buildStr=parts[3];      if (buildStr.startsWith("Beta") || buildStr.startsWith("beta")) {        build=Integer.parseInt(buildStr.substring(4));      }      if (buildStr.startsWith("RC") || buildStr.startsWith("rc")) {        build=Integer.parseInt(buildStr.substring(2)) + 50;      }    }    final Version versionFromId=fromId(major + minor + revision+ build);    if (snapshot != versionFromId.snapshot()) {      return new Version(versionFromId.id,snapshot,versionFromId.luceneVersion);    }    return versionFromId;  } catch (  NumberFormatException e) {    throw new IllegalArgumentException("unable to parse version " + version,e);  }}  }
class C{  @Override public final ClassifierSplitModel selectModel(Instances train,Instances test){  return selectModel(train);}  }
class C{  private Instruction[] copyAndMapInstructions(BasicBlock bb,HashMap<Instruction,Instruction> map){  if (bb == null)   return new Instruction[0];  int count=0;  for (Enumeration<Instruction> e=bb.forwardRealInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    if (s.isBranch())     continue;    count++;  }  Instruction[] result=new Instruction[count];  int i=0;  for (Enumeration<Instruction> e=bb.forwardRealInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    if (s.isBranch())     continue;    Instruction sprime=s.copyWithoutLinks();    result[i++]=sprime;    map.put(s,sprime);  }  return result;}  }
class C{  public SimpleProvider(){  mUriMatcher=new UriMatcher(UriMatcher.NO_MATCH);  mUriMatcher.addURI(AUTHORITY,MainTable.TABLE_NAME,MAIN);  mUriMatcher.addURI(AUTHORITY,MainTable.TABLE_NAME + "/#",MAIN_ID);  mNotesProjectionMap=new HashMap<>();  mNotesProjectionMap.put(MainTable._ID,MainTable._ID);  mNotesProjectionMap.put(MainTable.COLUMN_NAME_DATA,MainTable.COLUMN_NAME_DATA);}  }
class C{  public int execute(String sql,Insert insert,String index) throws SQLException {  if (insert.getQuery().getQueryBody() instanceof Values) {    return this.insertFromValues(sql,insert,index,Utils.getIntProp(props,Utils.PROP_FETCH_SIZE,2500));  } else   if (insert.getQuery().getQueryBody() instanceof QuerySpecification) {    return this.insertFromSelect(sql,insert,index,Utils.getIntProp(props,Utils.PROP_FETCH_SIZE,2500));  } else   throw new SQLException("Unknown set of values to insert (" + insert.getQuery().getQueryBody() + ")");}  }
class C{  public void defineMotionY(int motionType,int startTime,int duration,int start,int end){  motionY=createMotion(motionType,startTime,duration,start,end);}  }
class C{  public boolean isAmbiguousState(int state){  return state >= stateCount;}  }
class C{  public static void startTask(boolean trackCausality){  XTraceBaggageInterface.setTaskID(randomId());  if (trackCausality) {    XTraceBaggageInterface.setParentEventId(0);  }}  }
class C{  SampleThreadIntervalWriter(int id,AtomicCounter counter,AtomicIntervalGuard<?> threadInterval,long maxSeqno){  this.id=id;  this.counter=counter;  this.maxSeqno=maxSeqno;  this.threadInterval=threadInterval;}  }
class C{  public static Intersection intersector(MatchFilter filter,MatchCollector collector){  return new Intersection(filter,collector);}  }
class C{  public static double readDouble(){  return scanner.nextDouble();}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public void flush() throws IOException {  ensureOpen();  if (!inf.finished()) {    try {      while (!inf.finished() && !inf.needsInput()) {        int n;        n=inf.inflate(buf,0,buf.length);        if (n < 1) {          break;        }        out.write(buf,0,n);      }      super.flush();    } catch (    DataFormatException ex) {      String msg=ex.getMessage();      if (msg == null) {        msg="Invalid ZLIB data format";      }      throw new ZipException(msg);    }  }}  }
class C{  public ImageBorderWizardTabbedPane(EditableResources res,String theme){  initComponents();  try {    help.setPage(getClass().getResource("/help/9patchHelp.html"));  } catch (  IOException ex) {    ex.printStackTrace();  }  design=new ImageBorderWizard();  appliesTo=new ImageBorderAppliesToWizard(res,theme);  cutting=new ImageBorderCuttingWizard(res,theme,design,appliesTo);  jPanel1.add(java.awt.BorderLayout.CENTER,design);  jPanel2.add(java.awt.BorderLayout.CENTER,cutting);  jPanel3.add(java.awt.BorderLayout.CENTER,appliesTo);}  }
class C{  @ObjectiveCName("rawRequestCommandWithService:withMethod:WithParams:") public Command<ResponseRawRequest> rawRequestCommand(String service,String method,ApiRawValue params){  return modules.getExternalModule().rawRequestCommand(service,method,params);}  }
class C{  public static int compare(boolean left,String right){  return -compare(right,left);}  }
class C{  boolean inSameSubroutine(final Label block){  if ((status & VISITED) == 0 || (block.status & VISITED) == 0) {    return false;  }  for (int i=0; i < srcAndRefPositions.length; ++i) {    if ((srcAndRefPositions[i] & block.srcAndRefPositions[i]) != 0) {      return true;    }  }  return false;}  }
class C{  private void drawResultPoints(Bitmap barcode,Result rawResult){  ResultPoint[] points=rawResult.getResultPoints();  if (points != null && points.length > 0) {    Canvas canvas=new Canvas(barcode);    Paint paint=new Paint();    paint.setColor(getResources().getColor(fakeR.getId("color","result_points")));    if (points.length == 2) {      paint.setStrokeWidth(4.0f);      drawLine(canvas,paint,points[0],points[1]);    } else     if (points.length == 4 && (rawResult.getBarcodeFormat() == BarcodeFormat.UPC_A || rawResult.getBarcodeFormat() == BarcodeFormat.EAN_13)) {      drawLine(canvas,paint,points[0],points[1]);      drawLine(canvas,paint,points[2],points[3]);    } else {      paint.setStrokeWidth(10.0f);      for (      ResultPoint point : points) {        canvas.drawPoint(point.getX(),point.getY(),paint);      }    }  }}  }
class C{  public RrdGraphDef(){  setTimeSpan(Util.getTimestamps(DEFAULT_START,DEFAULT_END));}  }
class C{  public static boolean isBetween(final double x,final double a,final double b,final double offset){  return (a > b) ? x <= a + offset && x >= b - offset : x <= b + offset && x >= a - offset;}  }
class C{  public AppLauncher appLauncherCallback(AppLauncherCallback callback){  this.appLauncherCallback=callback;  return this;}  }
class C{  private void heapifyUp(int twopos,int cur,Object val){  while (twopos > 0) {    final int parent=(twopos - 1) >>> 1;    int par=twoheap[parent];    if (cur >= par) {      break;    }    twoheap[twopos]=par;    twovals[twopos]=twovals[parent];    twopos=parent;  }  twoheap[twopos]=cur;  twovals[twopos]=val;}  }
class C{  public void visitParameterAnnotation(int p,@DottedClassName String annotationClass,Map<String,ElementValue> map,boolean runtimeVisible){}  }
class C{  private static void checkFile(ZipEntry entry,String disthash,String newhash) throws IOException {  String path=entry.getName();  File dest=new File(path);  if (dest.exists()) {    if (!newhash.equals(disthash)) {      String localhash="";      try {        localhash=Filesystem.getHash(new FileInputStream(dest));      } catch (      NoSuchAlgorithmException e) {        Log.info("ERROR: Cannot calculate local file hash: " + e.getMessage());      }      if (!localhash.equals(disthash)) {        File backup=new File(dest.getAbsolutePath() + ".bak");        Log.info("File " + path + " is modified! I will create a backup to "+ backup.getAbsolutePath()+ " and recreate the new file.");        Filesystem.moveFile(dest,backup);        createFile(dest,path,(int)entry.getSize());      } else {        Log.info("Upgrading file: " + path);        createFile(dest,path,(int)entry.getSize());      }    }  } else {    Log.info("File " + path + " doesn't exist! Recreating...");    createFile(dest,path,(int)entry.getSize());  }}  }
class C{  public void insertBitmap(final BufferedImage bitmap,final int x,final int y,final int xx,final int yy,final FilterMode filter){  insertBitmap(bitmap,x,y,bitmap.getRGB(xx,yy),filter);}  }
class C{  private boolean requestFocusForFirstComponent(){  if (innerPanel.getComponentCount() > 0) {    return innerPanel.getComponent(0).requestFocusInWindow();  }  return false;}  }
class C{  public boolean hasServiceRestrictions(){  Track track;  Enumeration<Track> en=_trackHashTable.elements();  while (en.hasMoreElements()) {    track=en.nextElement();    if (!track.getDropOption().equals(Track.ANY) || !track.getPickupOption().equals(Track.ANY)) {      return true;    }  }  return false;}  }
class C{  public static final int binarySearch(Object[] a,Object key){  int x1=0;  int x2=a.length;  int i=x2 / 2, c;  while (x1 < x2) {    c=((Comparable)a[i]).compareTo(key);    if (c == 0) {      return i;    } else     if (c < 0) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  public ResolveUrls(String urlsFile){  this(urlsFile,100);}  }
class C{  public void updateNString(String columnName,String nString) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.240 -0500",hash_original_method="F09D38B717E770EDAB76B08B81548137",hash_generated_method="F09D38B717E770EDAB76B08B81548137") EmulatedFields emulatedFields(){  return emulatedFields;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void generateCode(BlockScope currentScope){  if ((this.bits & IsReachable) == 0) {    return;  }  if (this.initializations != null) {    for (int i=0, max=this.initializations.length; i < max; i++) {      this.initializations[i].generateCode(this.scope);    }  }  Constant cst=this.condition == null ? null : this.condition.optimizedBooleanConstant();  boolean isConditionOptimizedFalse=cst != null && (cst != Constant.NotAConstant && cst.booleanValue() == false);  if (isConditionOptimizedFalse) {    this.condition.generateCode(this.scope,false);    return;  }  BranchLabel actionLabel=new BranchLabel();  actionLabel.tagBits|=BranchLabel.USED;  BranchLabel conditionLabel=new BranchLabel();  if (this.continueLabel == null) {    if ((this.condition != null) && (this.condition.constant == Constant.NotAConstant)) {      this.condition.generateOptimizedBoolean(this.scope,null,this.breakLabel,true);    }  } else {    if ((this.condition != null) && (this.condition.constant == Constant.NotAConstant) && !((this.action == null || this.action.isEmptyBlock()) && (this.increments == null))) {      conditionLabel.tagBits|=BranchLabel.USED;    }  }  if (this.action != null) {    this.action.generateCode(this.scope);  }  if (this.continueLabel != null) {    if (this.increments != null) {      for (int i=0, max=this.increments.length; i < max; i++) {        this.increments[i].generateCode(this.scope);      }    }  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String prefix;  String namespace;  String methName;  String fullName=m_arg0.execute(xctxt).str();  int indexOfNSSep=fullName.indexOf(':');  if (indexOfNSSep < 0) {    prefix="";    namespace=Constants.S_XSLNAMESPACEURL;    methName=fullName;  } else {    prefix=fullName.substring(0,indexOfNSSep);    namespace=xctxt.getNamespaceContext().getNamespaceForPrefix(prefix);    if (null == namespace)     return XBoolean.S_FALSE;    methName=fullName.substring(indexOfNSSep + 1);  }  if (namespace.equals(Constants.S_XSLNAMESPACEURL)) {    try {      if (null == m_functionTable)       m_functionTable=new FunctionTable();      return m_functionTable.functionAvailable(methName) ? XBoolean.S_TRUE : XBoolean.S_FALSE;    } catch (    Exception e) {      return XBoolean.S_FALSE;    }  } else {    ExtensionsProvider extProvider=(ExtensionsProvider)xctxt.getOwnerObject();    return extProvider.functionAvailable(namespace,methName) ? XBoolean.S_TRUE : XBoolean.S_FALSE;  }}  }
class C{  private void onOrderClicked(){  String coffee;  String message;  String number="";  boolean cream=false;  boolean sugar=false;  if (true) {    coffee="Expresso";  } else   if (optColombian.isChecked()) {    coffee="Colombian";  } else {    coffee="Decaf";  }  if (cream && sugar) {    message=coffee + " with cream and sugar.";  } else   if (cream) {    message=coffee + " with cream.";  } else   if (sugar) {    message=coffee + " with sugar.";  } else {    message=coffee + ".";  }  message="Order no: " + number + ".\n"+ message;  showMessage(message);}  }
class C{  public PublicKey(final byte[] bytes){  this.value=bytes;}  }
class C{  public void createVirtualVolumeFromImportStep(URI vplexURI,URI vplexVolumeURI,URI existingVolumeURI,URI newVolumeURI,URI vplexSystemProject,URI vplexSystemTenant,URI newCosURI,String newLabel,String transferSize,String stepId) throws WorkflowException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    StorageSystem vplex=getDataObject(StorageSystem.class,vplexURI,_dbClient);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);    Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,_dbClient);    Volume existingVolume=null;    Volume newVolume=null;    if (existingVolumeURI != null) {      existingVolume=getDataObject(Volume.class,existingVolumeURI,_dbClient);    }    if (newVolumeURI != null) {      newVolume=getDataObject(Volume.class,newVolumeURI,_dbClient);    }    VPlexVirtualVolumeInfo virtvinfo=null;    VolumeInfo vinfo=null;    if (existingVolume != null) {      StorageSystem array=getDataObject(StorageSystem.class,existingVolume.getStorageController(),_dbClient);      List<String> itls=VPlexControllerUtils.getVolumeITLs(existingVolume);      List<VolumeInfo> vinfos=new ArrayList<VolumeInfo>();      VirtualPool newVirtualPool=getDataObject(VirtualPool.class,newCosURI,_dbClient);      boolean thinEnabled=VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(newVirtualPool.getSupportedProvisioningType());      vinfo=new VolumeInfo(array.getNativeGuid(),array.getSystemType(),existingVolume.getWWN().toUpperCase().replaceAll(":",""),existingVolume.getNativeId(),thinEnabled,itls);      vinfos.add(vinfo);      thinEnabled=thinEnabled && verifyVplexSupportsThinProvisioning(vplex);      virtvinfo=client.createVirtualVolume(vinfos,false,true,true,null,null,true,thinEnabled);      if (virtvinfo == null) {        String opName=ResourceOperationTypeEnum.CREATE_VVOLUME_FROM_IMPORT.getName();        ServiceError serviceError=VPlexApiException.errors.createVirtualVolumeFromImportStepFailed(opName);        WorkflowStepCompleter.stepFailed(stepId,serviceError);        return;      }      _log.info(String.format("Created virtual volume: %s path: %s thinEnabled: %b",virtvinfo.getName(),virtvinfo.getPath(),virtvinfo.isThinEnabled()));      checkThinEnabledResult(virtvinfo,thinEnabled,_workflowService.getWorkflowFromStepId(stepId).getOrchTaskId());      if (newVolume != null) {        vplexVolume.setNativeId(virtvinfo.getPath());        vplexVolume.setNativeGuid(virtvinfo.getPath());        vplexVolume.setDeviceLabel(virtvinfo.getName());        vplexVolume.setThinlyProvisioned(virtvinfo.isThinEnabled());        _dbClient.updateObject(vplexVolume);      }    } else {      virtvinfo=client.findVirtualVolume(vplexVolume.getDeviceLabel(),vplexVolume.getNativeId());    }    if (newVolume != null) {      String clusterId=ConnectivityUtil.getVplexClusterForVarray(vplexVolume.getVirtualArray(),vplexVolume.getStorageController(),_dbClient);      StorageSystem array=getDataObject(StorageSystem.class,newVolume.getStorageController(),_dbClient);      List<String> itls=VPlexControllerUtils.getVolumeITLs(newVolume);      vinfo=new VolumeInfo(array.getNativeGuid(),array.getSystemType(),newVolume.getWWN().toUpperCase().replaceAll(":",""),newVolume.getNativeId(),newVolume.getThinlyProvisioned().booleanValue(),itls);      _workflowService.storeStepData(stepId,vinfo);      virtvinfo=client.upgradeVirtualVolumeToDistributed(virtvinfo,vinfo,true,clusterId,transferSize);      if (virtvinfo == null) {        String opName=ResourceOperationTypeEnum.UPGRADE_VPLEX_LOCAL_TO_DISTRIBUTED.getName();        ServiceError serviceError=VPlexApiException.errors.upgradeLocalToDistributedFailed(opName);        WorkflowStepCompleter.stepFailed(stepId,serviceError);        return;      }    }    vplexVolume.setNativeId(virtvinfo.getPath());    vplexVolume.setNativeGuid(virtvinfo.getPath());    vplexVolume.setDeviceLabel(virtvinfo.getName());    vplexVolume.setThinlyProvisioned(virtvinfo.isThinEnabled());    vplexVolume.setWWN(virtvinfo.getWwn());    Volume srcSideAssocVolume=null;    if (existingVolume != null) {      srcSideAssocVolume=existingVolume;      existingVolume.setProject(new NamedURI(vplexSystemProject,existingVolume.getLabel()));      existingVolume.setTenant(new NamedURI(vplexSystemTenant,existingVolume.getLabel()));      existingVolume.setLabel(newLabel);      existingVolume.setVirtualPool(newCosURI);      existingVolume.addInternalFlags(Flag.INTERNAL_OBJECT);      _dbClient.updateObject(existingVolume);      vplexVolume.setProvisionedCapacity(existingVolume.getProvisionedCapacity());      vplexVolume.setAllocatedCapacity(0L);      URI srcVplexVolumeURI=vplexVolume.getAssociatedSourceVolume();      if (!NullColumnValueGetter.isNullURI(srcVplexVolumeURI)) {        Volume srcVplexVolume=_dbClient.queryObject(Volume.class,srcVplexVolumeURI);        if (null != srcVplexVolume) {          StringSet srcVplexVolumeCopies=srcVplexVolume.getFullCopies();          if (srcVplexVolumeCopies == null) {            srcVplexVolumeCopies=new StringSet();            srcVplexVolume.setFullCopies(srcVplexVolumeCopies);          }          srcVplexVolumeCopies.add(vplexVolumeURI.toString());          _dbClient.updateObject(srcVplexVolume);        }        vplexVolume.setReplicaState(existingVolume.getReplicaState());      }    } else {      for (      String assocVolume : vplexVolume.getAssociatedVolumes()) {        try {          srcSideAssocVolume=_dbClient.queryObject(Volume.class,new URI(assocVolume));          srcSideAssocVolume.setVirtualPool(newCosURI);          _dbClient.updateObject(srcSideAssocVolume);        } catch (        URISyntaxException ex) {          _log.error("Bad assocVolume URI: " + assocVolume,ex);        }      }      vplexVolume.getAssociatedVolumes().add(newVolumeURI.toString());      vplexVolume.setVirtualPool(newCosURI);    }    try {      if ((CustomVolumeNamingUtils.isCustomVolumeNamingEnabled(customConfigHandler,vplex.getSystemType())) && (existingVolume != null)) {        String customConfigName=CustomVolumeNamingUtils.getCustomConfigName(false);        Project project=getDataObject(Project.class,vplexVolume.getProject().getURI(),_dbClient);        TenantOrg tenant=getDataObject(TenantOrg.class,vplexVolume.getTenant().getURI(),_dbClient);        DataSource customNameDataSource=CustomVolumeNamingUtils.getCustomConfigDataSource(project,tenant,vplexVolume.getLabel(),vplexVolume.getWWN(),null,dataSourceFactory,customConfigName,_dbClient);        if (customNameDataSource != null) {          String customVolumeName=CustomVolumeNamingUtils.getCustomName(customConfigHandler,customConfigName,customNameDataSource,vplex.getSystemType());          virtvinfo=CustomVolumeNamingUtils.renameVolumeOnVPlex(virtvinfo,customVolumeName,client);          vplexVolume.setNativeId(virtvinfo.getPath());          vplexVolume.setNativeGuid(virtvinfo.getPath());          vplexVolume.setDeviceLabel(virtvinfo.getName());          vplexVolume.setLabel(virtvinfo.getName());          NamedURI namedURI=vplexVolume.getProject();          namedURI.setName(virtvinfo.getName());          vplexVolume.setProject(namedURI);          namedURI=vplexVolume.getTenant();          namedURI.setName(virtvinfo.getName());          vplexVolume.setTenant(namedURI);        }      }    } catch (    Exception e) {      _log.warn(String.format("Error attempting to rename VPLEX volume %s",vplexVolumeURI),e);    }    _dbClient.updateObject(vplexVolume);    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    if (existingVolumeURI != null) {      _log.error("Exception importing non-VPLEX volume to VPLEX: " + vae.getMessage(),vae);    } else {      _log.error("Exception upgrading a local VPLEX volume to distributed: " + vae.getMessage(),vae);    }    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    ServiceError serviceError;    if (existingVolumeURI != null) {      _log.error("Exception importing non-VPLEX volume to VPLEX: " + ex.getMessage(),ex);      String opName=ResourceOperationTypeEnum.IMPORT_BLOCK_VOLUME.getName();      serviceError=VPlexApiException.errors.importVolumeFailedException(opName,ex);    } else {      _log.error("Exception upgrading a local VPLEX volume to distributed: " + ex.getMessage(),ex);      String opName=ResourceOperationTypeEnum.UPGRADE_VPLEX_LOCAL_TO_DISTRIBUTED.getName();      serviceError=VPlexApiException.errors.upgradeLocalToDistributedFailedException(opName,ex);    }    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  public StorageEntity createStorageEntity(String storageName,List<Attribute> attributes){  return createStorageEntity(storageName,StoragePlatformEntity.S3,attributes);}  }
class C{  private void swim(int k){  while (k > 1 && less(k / 2,k)) {    exch(k / 2,k);    k=k / 2;  }}  }
class C{  public boolean hasEchoBreakpoint(final Module module,final Address address){  Preconditions.checkNotNull(address,"Error: Address argument can not be null");  return breakpointManager.hasBreakpoint(BreakpointType.ECHO,new BreakpointAddress(module == null ? null : module.getNative(),new UnrelocatedAddress(new CAddress(address.toLong()))));}  }
class C{  public void remove(String key){  SharedPreferences.Editor editor=mSharedPreferences.edit();  editor.remove(key);  editor.commit();}  }
class C{  private Optional<String> renderName(Generator gen,Type model,String name){  requireNonNull(gen);  requireNonNull(model);  requireNonNull(name);  return Optional.of(name.replace(DOLLAR,DOT) + gen.onEach(model.getGenerics()).collect(joinIfNotEmpty(COMMA_SPACE,SS,SE)) + (model.getArrayDimension() > 0 ? Collections.nCopies(model.getArrayDimension(),(AS + AE)).stream().collect(Collectors.joining()) : EMPTY));}  }
class C{  public static void createStopsFile(Map<? extends Id,? extends Facility> locationFacilitiesMap,String outputFileStops,String separator){  final CSVFileWriter stopsWriter=new CSVFileWriter(outputFileStops,separator);  stopsWriter.writeField("id");  stopsWriter.writeField("x");  stopsWriter.writeField("y");  stopsWriter.writeNewLine();  for (  Facility fac : locationFacilitiesMap.values()) {    stopsWriter.writeField(fac.getId());    stopsWriter.writeField(fac.getCoord().getX());    stopsWriter.writeField(fac.getCoord().getY());    stopsWriter.writeNewLine();  }  stopsWriter.close();  log.info("Stops file based on schedule written.");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static Rect calculateBottomInsetsOnRoundDevice(Display display,Rect systemInsets){  Point size=new Point();  display.getSize(size);  int width=size.x + systemInsets.left + systemInsets.right;  int height=size.y + systemInsets.top + systemInsets.bottom;  int minInset=(int)(height * Constants.WEAR_ROUND_MIN_INSET_PERCENT);  int bottomInset=systemInsets.bottom > minInset ? systemInsets.bottom : minInset;  double radius=width / 2;  double apothem=radius - bottomInset;  double chord=Math.sqrt(Math.pow(radius,2) - Math.pow(apothem,2)) * 2;  int leftRightInset=(int)((width - chord) / 2);  Log.d(TAG,"calculateBottomInsetsOnRoundDevice: " + bottomInset + ", "+ leftRightInset);  return new Rect(leftRightInset,0,leftRightInset,bottomInset);}  }
class C{  private void reallocate(final int row){  final int size=this.cols[row].length;  final int newSize=(int)Math.ceil(REALLOC_MULTIPLIER * size);  final int[] newCols=new int[newSize];  final double[] newValues=new double[newSize];  System.arraycopy(this.cols[row],0,newCols,0,size);  System.arraycopy(this.values[row],0,newValues,0,size);  this.cols[row]=newCols;  this.values[row]=newValues;}  }
class C{  public SearchSourceBuilder highlight(HighlightBuilder highlightBuilder){  this.highlightBuilder=highlightBuilder;  return this;}  }
class C{  public SignificantTermsBuilder exclude(long[] terms){  if (excludePattern != null) {    throw new IllegalArgumentException("exclude clause must be an array of longs or a regex, not both");  }  this.excludeTerms=longsArrToStringArr(terms);  return this;}  }
class C{  public JSONArray names(){  JSONArray ja=new JSONArray();  Iterator keys=this.keys();  while (keys.hasNext()) {    ja.put(keys.next());  }  return ja.length() == 0 ? null : ja;}  }
class C{  public Bundler putBoolean(String key,boolean value){  bundle.putBoolean(key,value);  return this;}  }
class C{  private final void register(final String name,final ICheckpointProtocol ndx){synchronized (name2Addr) {    assertOpen();    name2Addr.registerIndex(name,ndx);  }}  }
class C{  public final long size(){  return size;}  }
class C{  public static int carrierCapacity(final Collection<Unit> units,final Territory territoryUnitsAreCurrentlyIn){  int sum=0;  for (  final Unit unit : units) {    sum+=carrierCapacity(unit,territoryUnitsAreCurrentlyIn);  }  return sum;}  }
class C{  public Vector removeVector(Object desiredObject){  ObjectVector objectVector=this.objectVectors.get(desiredObject);  if (objectVector != null) {    return objectVectors.remove(desiredObject).getVector();  } else {    return null;  }}  }
class C{  public double entropy(int[] x){  double h=0.0;  int n=x.length;  double ln2=Math.log(2.0);  int n0=0;  for (int i=0; i < n; i++) {    if (x[i] == 0) {      n0++;    }  }  double p;  if (n0 == 0 || n0 == n) {    return h;  } else {    p=(double)n0 / (double)n;    h=-(p * Math.log(p) + (1.0 - p) * Math.log(1.0 - p)) / ln2;  }  return h;}  }
class C{  public void addStateValueAsInteger(String name,int intValue){  addStateValueAsInteger(null,name,intValue);}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public DrmRights(String rightsFilePath,String mimeType,String accountId,String subscriptionId){  this(rightsFilePath,mimeType);  mAccountId=accountId;  mSubscriptionId=subscriptionId;}  }
class C{  public LocalDate withDayOfYear(int dayOfYear){  return withLocalMillis(getChronology().dayOfYear().set(getLocalMillis(),dayOfYear));}  }
class C{  public static boolean hasTokenFile(File tokenFile) throws IOException {  return hasToken(tokenFile.getParentFile(),tokenFile.getName());}  }
class C{  public boolean isBorderOpaque(){  return false;}  }
class C{  public void validateBusinessObjectFormatKey(BusinessObjectFormatKey key,Boolean businessObjectFormatVersionRequired) throws IllegalArgumentException {  Assert.notNull(key,"A business object format key must be specified.");  key.setNamespace(alternateKeyHelper.validateStringParameter("namespace",key.getNamespace()));  key.setBusinessObjectDefinitionName(alternateKeyHelper.validateStringParameter("business object definition name",key.getBusinessObjectDefinitionName()));  key.setBusinessObjectFormatUsage(alternateKeyHelper.validateStringParameter("business object format usage",key.getBusinessObjectFormatUsage()));  key.setBusinessObjectFormatFileType(alternateKeyHelper.validateStringParameter("business object format file type",key.getBusinessObjectFormatFileType()));  if (businessObjectFormatVersionRequired) {    Assert.notNull(key.getBusinessObjectFormatVersion(),"A business object format version must be specified.");  }}  }
class C{  public boolean isAllowLogging(int index){  if (index < 0 || index >= m_columns.length)   return false;  return m_columns[index].IsAllowLogging;}  }
class C{  public void removeAt(int index){  if (mValues[index] != DELETED) {    mValues[index]=DELETED;    mGarbage=true;  }}  }
class C{  public void clear(){  nbBFChecks=0;}  }
class C{  public void addReaderListener(ReaderListener readerListener){  if (readerListener == null) {    return;  }synchronized (listeners) {    if (!listeners.contains(readerListener)) {      listeners.add(readerListener);    }  }}  }
class C{  @PATCH public void patchPermissions(List<APIPatch<String>> patches) throws GuacamoleException {  PermissionSetPatch<ObjectPermission> connectionPermissionPatch=new PermissionSetPatch<ObjectPermission>();  PermissionSetPatch<ObjectPermission> connectionGroupPermissionPatch=new PermissionSetPatch<ObjectPermission>();  PermissionSetPatch<ObjectPermission> sharingProfilePermissionPatch=new PermissionSetPatch<ObjectPermission>();  PermissionSetPatch<ObjectPermission> activeConnectionPermissionPatch=new PermissionSetPatch<ObjectPermission>();  PermissionSetPatch<ObjectPermission> userPermissionPatch=new PermissionSetPatch<ObjectPermission>();  PermissionSetPatch<SystemPermission> systemPermissionPatch=new PermissionSetPatch<SystemPermission>();  for (  APIPatch<String> patch : patches) {    String path=patch.getPath();    if (path.startsWith(CONNECTION_PERMISSION_PATCH_PATH_PREFIX)) {      String identifier=path.substring(CONNECTION_PERMISSION_PATCH_PATH_PREFIX.length());      ObjectPermission.Type type=ObjectPermission.Type.valueOf(patch.getValue());      ObjectPermission permission=new ObjectPermission(type,identifier);      updatePermissionSet(patch.getOp(),connectionPermissionPatch,permission);    } else     if (path.startsWith(CONNECTION_GROUP_PERMISSION_PATCH_PATH_PREFIX)) {      String identifier=path.substring(CONNECTION_GROUP_PERMISSION_PATCH_PATH_PREFIX.length());      ObjectPermission.Type type=ObjectPermission.Type.valueOf(patch.getValue());      ObjectPermission permission=new ObjectPermission(type,identifier);      updatePermissionSet(patch.getOp(),connectionGroupPermissionPatch,permission);    } else     if (path.startsWith(SHARING_PROFILE_PERMISSION_PATCH_PATH_PREFIX)) {      String identifier=path.substring(SHARING_PROFILE_PERMISSION_PATCH_PATH_PREFIX.length());      ObjectPermission.Type type=ObjectPermission.Type.valueOf(patch.getValue());      ObjectPermission permission=new ObjectPermission(type,identifier);      updatePermissionSet(patch.getOp(),sharingProfilePermissionPatch,permission);    } else     if (path.startsWith(ACTIVE_CONNECTION_PERMISSION_PATCH_PATH_PREFIX)) {      String identifier=path.substring(ACTIVE_CONNECTION_PERMISSION_PATCH_PATH_PREFIX.length());      ObjectPermission.Type type=ObjectPermission.Type.valueOf(patch.getValue());      ObjectPermission permission=new ObjectPermission(type,identifier);      updatePermissionSet(patch.getOp(),activeConnectionPermissionPatch,permission);    } else     if (path.startsWith(USER_PERMISSION_PATCH_PATH_PREFIX)) {      String identifier=path.substring(USER_PERMISSION_PATCH_PATH_PREFIX.length());      ObjectPermission.Type type=ObjectPermission.Type.valueOf(patch.getValue());      ObjectPermission permission=new ObjectPermission(type,identifier);      updatePermissionSet(patch.getOp(),userPermissionPatch,permission);    } else     if (path.equals(SYSTEM_PERMISSION_PATCH_PATH)) {      SystemPermission.Type type=SystemPermission.Type.valueOf(patch.getValue());      SystemPermission permission=new SystemPermission(type);      updatePermissionSet(patch.getOp(),systemPermissionPatch,permission);    } else     throw new GuacamoleClientException("Unsupported patch path: \"" + path + "\"");  }  connectionPermissionPatch.apply(user.getConnectionPermissions());  connectionGroupPermissionPatch.apply(user.getConnectionGroupPermissions());  sharingProfilePermissionPatch.apply(user.getSharingProfilePermissions());  activeConnectionPermissionPatch.apply(user.getActiveConnectionPermissions());  userPermissionPatch.apply(user.getUserPermissions());  systemPermissionPatch.apply(user.getSystemPermissions());}  }
class C{  @Override public String execute() throws IOException {  StartupListener.setupContext(getSession().getServletContext());  String referer=getRequest().getHeader("Referer");  HttpServletResponse response=ServletActionContext.getResponse();  if (referer != null) {    log.info("reload complete, reloading user back to: " + referer);    saveMessage(getText("reload.succeeded"));    response.sendRedirect(response.encodeRedirectURL(referer));    return SUCCESS;  } else {    response.setContentType("text/html");    PrintWriter out=response.getWriter();    out.println("<html>");    out.println("<head>");    out.println("<title>Context Reloaded</title>");    out.println("</head>");    out.println("<body bgcolor=\"white\">");    out.println("<script type=\"text/javascript\">");    out.println("alert('Reloading options succeeded! Click OK to continue.');");    out.println("history.back();");    out.println("</script>");    out.println("</body>");    out.println("</html>");  }  return SUCCESS;}  }
class C{  @Override @SuppressWarnings("unchecked") public Key<R> next() throws NoSuchElementException {  return (Key<R>)nextEri().getKey();}  }
class C{  public static int computeHeaderSize(Object[] tib){  return computeHeaderSize(Magic.objectAsType(tib[0]));}  }
class C{  private boolean handle(){  String url="http://" + mInetAddr.getHostAddress() + "/v1/device/rpc/";  String bssid=mDeviceBssid;  int serial=mSerial;  HeaderPair[] headers=null;  int taskTimeout=15000;  if (mIsFirstPackage) {    taskTimeout=15000;    mIsFirstPackage=false;  }  JSONObject requestJson=MeshCommunicationUtils.JsonReadOnly(url,bssid,serial,taskTimeout,headers);  if (requestJson == null) {    log.warn("hancle(): requestJson is null, return false");    return false;  }  log.debug("handle(): receive request from mesh device:" + requestJson);  RequestType requestType=analyzeUpgradeRequest1(requestJson);  String response=null;switch (requestType) {case INVALID:    log.warn("handle(): requestType is INVALID");  return false;case MESH_DEVICE_UPGRADE_LOCAL:log.debug("handle(): requestType is LOCAL");response=executeMeshDeviceUpgradeLocal(requestJson);break;case MESH_DEVICE_UPGRADE_LOCAL_FAIL:log.debug("handle(): requestType is LOCAL FAIL");executeMeshDeviceUpgradeLocalFail();break;case MESH_DEVICE_UPGRADE_LOCAL_SUC:log.debug("handle(): requestType is LOCAL SUC");response=executeMeshDeviceUpgradeLocalSuc();break;}if (response != null) {log.debug("handle(): send response to mesh device:" + response);JSONObject postJSON=null;try {postJSON=new JSONObject(response);} catch (JSONException e) {throw new IllegalArgumentException("response isn't json: " + postJSON);}boolean isWriteSuc=MeshCommunicationUtils.JsonNonResponsePost(url,bssid,serial,postJSON) != null;log.debug("handle(): send response to mesh device isSuc:" + isWriteSuc);return isWriteSuc;}return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public HostMonitorConfig add(final String host,final int port){  Host newHost=new Host(host,port);  if (getHostsMap().keySet().contains(newHost))   return this;  mHostsMap.put(newHost,new Status());  return this;}  }
class C{  private void noteCompletedMigrations(String fromRepository,String toRepository,Db db,boolean inverse){  Ui.Task checkMigrationsTask=ui.pushTask("check_migrations","Checking completed migrations for new equivalence between '%s' and '%s'",fromRepository,toRepository);  RevisionHistory toHistory=context.getRepository(toRepository).revisionHistory();  RepositoryEquivalenceMatcher.Result equivMatch=toHistory.findRevisions(null,new RepositoryEquivalenceMatcher(fromRepository,db),SearchType.BRANCHED);  List<Revision> toRevs=equivMatch.getRevisionsSinceEquivalence().getBreadthFirstHistory();  ui.message("Found %d revisions in %s since equivalence (%s)",toRevs.size(),toRepository,equivMatch.getEquivalences());  logger.fine("Revisions since equivalence: " + Joiner.on(" ").join(toRevs));  int countUnmigrated=0;  int countProcessed=0;  for (  Revision toRev : toRevs) {    String fromRevId=getMigratedRevId(toHistory.getMetadata(toRev));    if (fromRevId != null) {      SubmittedMigration migration=SubmittedMigration.create(Revision.create(fromRevId,fromRepository),toRev);      logger.fine("Processing submitted migration: " + migration);      if (processMigration(migration,db,inverse) != null) {        ui.message("Equivalence found - skipping remaining revisions in this migration.");        countProcessed++;        break;      }    } else {      countUnmigrated++;      logger.finer("Ignoring non-migrated revision " + toRev);    }    countProcessed++;  }  ui.message("Ignored %s commits that were not migrated by MOE",countUnmigrated);  if (countProcessed < toRevs.size()) {    ui.message("Skipped %s commits that preceded a discovered equivalence",toRevs.size() - countProcessed);  }  ui.popTask(checkMigrationsTask,"");}  }
class C{  public void login() throws Exception {  HttpEntity responseEntity=executePost(URL_LOGIN,new String[][]{{"Email",this.getEmail()},{"Passwd",this.password},{"service","androidmarket"},{"accountType",ACCOUNT_TYPE_HOSTED_OR_GOOGLE},{"has_permission","1"},{"source","android"},{"androidId",this.getAndroidID()},{"app","com.android.vending"},{"device_country","us"},{"lang","en"},{"sdk_version","17"}},null);  Map<String,String> response=Utils.parseResponse(new String(Utils.readAll(responseEntity.getContent())));  if (response.containsKey("Auth")) {    setToken(response.get("Auth"));  } else {    throw new GooglePlayException("Authentication failed!");  }}  }
class C{  @Override public V remove(Object key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  public String promptForText(final String question){  if (!isDisposed()) {    InputDialog dialog=new InputDialog(Raptor.getInstance().raptorWindow.getShell(),local.getString("entText"),question);    return dialog.open();  } else {    return null;  }}  }
class C{  public static int asInteger(DBIDRef id){  return id.internalGetIndex();}  }
class C{  private void readParameterAnnotations(final MethodVisitor mv,final Context context,int v,final boolean visible){  int i;  int n=b[v++] & 0xFF;  int synthetics=Type.getArgumentTypes(context.desc).length - n;  AnnotationVisitor av;  for (i=0; i < synthetics; ++i) {    av=mv.visitParameterAnnotation(i,"Ljava/lang/Synthetic;",false);    if (av != null) {      av.visitEnd();    }  }  char[] c=context.buffer;  for (; i < n + synthetics; ++i) {    int j=readUnsignedShort(v);    v+=2;    for (; j > 0; --j) {      av=mv.visitParameterAnnotation(i,readUTF8(v,c),visible);      v=readAnnotationValues(v + 2,c,true,av);    }  }}  }
class C{  protected void nodeAdded(Node n){  setSpecified(true);}  }
class C{  public CTextPane(StyledDocument doc){  this(new JTextPane(doc));}  }
class C{  private void removeDuplicates(String key,List<ITopic> topics){  for (int i=topics.size() - 1; i > 0; i--) {    ITopic topic=topics.get(i);    if (topic.getCardType().equals(key)) {      topics.remove(i);    }  }}  }
class C{  public void testLocale() throws Exception {  Benchmark benchmark=execBenchmark(getLocaleConfig(""));  assertNull(benchmark.getRunData().getLocale());  benchmark=execBenchmark(getLocaleConfig("ROOT"));  assertEquals(new Locale(""),benchmark.getRunData().getLocale());  benchmark=execBenchmark(getLocaleConfig("de"));  assertEquals(new Locale("de"),benchmark.getRunData().getLocale());  benchmark=execBenchmark(getLocaleConfig("en,US"));  assertEquals(new Locale("en","US"),benchmark.getRunData().getLocale());  benchmark=execBenchmark(getLocaleConfig("no,NO,NY"));  assertEquals(new Locale("no","NO","NY"),benchmark.getRunData().getLocale());}  }
class C{  public void processFile(File pmdFile,RuleSets ruleSets,RuleContext ctx,String encoding){  ctx.setSourceCodeFile(pmdFile);  ctx.setReport(report);  if (ruleSets.applies(ctx.getSourceCodeFile())) {    Language language=Language.JAVA;    ctx.setSourceType(SourceType.JAVA_16);    DelphiAST ast=new DelphiAST(pmdFile,encoding);    if (ast.isError()) {      throw new ParseException("grammar error");    }    List<CompilationUnit> nodes=getNodesFromAST(ast);    ruleSets.apply(nodes,ctx,language);  }}  }
class C{  private static int parseType(final String signature,int pos,final SignatureVisitor v){  char c;  int start, end;  boolean visited, inner;  String name;switch (c=signature.charAt(pos++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':case 'V':    v.visitBaseType(c);  return pos;case '[':return parseType(signature,pos,v.visitArrayType());case 'T':end=signature.indexOf(';',pos);v.visitTypeVariable(signature.substring(pos,end));return end + 1;default :start=pos;visited=false;inner=false;for (; ; ) {switch (c=signature.charAt(pos++)) {case '.':case ';':if (!visited) {name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}}if (c == ';') {v.visitEnd();return pos;}start=pos;visited=false;inner=true;break;case '<':name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}visited=true;top: for (; ; ) {switch (c=signature.charAt(pos)) {case '>':break top;case '*':++pos;v.visitTypeArgument();break;case '+':case '-':pos=parseType(signature,pos + 1,v.visitTypeArgument(c));break;default :pos=parseType(signature,pos,v.visitTypeArgument('='));break;}}}}}}  }
class C{  public static String toJSONString(Collection collection){  final StringWriter writer=new StringWriter();  try {    writeJSONString(collection,writer);    return writer.toString();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public String toString(String field){  return ExtendedQueryBase.getOptionsString(this) + "ConstantScore(" + filter.toString()+ (getBoost() == 1.0 ? ")" : "^" + getBoost());}  }
class C{  public Trigger basicGetTrigger(){  return trigger;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (op: ");  result.append(op);  result.append(')');  return result.toString();}  }
class C{  public static void matrixMultChain(MatrixBlock mX,MatrixBlock mV,MatrixBlock mW,MatrixBlock ret,ChainType ct,int k) throws DMLRuntimeException {  if (mX.isEmptyBlock(false) || mV.isEmptyBlock(false) || (mW != null && mW.isEmptyBlock(false))) {    ret.examSparsity();    return;  }  if (8L * mV.rlen * k > MEM_OVERHEAD_THRESHOLD || 4L * mX.rlen * mX.clen < PAR_MINFLOP_THRESHOLD) {    matrixMultChain(mX,mV,mW,ret,ct);    return;  }  ret.sparse=false;  ret.allocateDenseBlock();  try {    ExecutorService pool=Executors.newFixedThreadPool(k);    ArrayList<MatrixMultChainTask> tasks=new ArrayList<MatrixMultChainTask>();    int blklen=(int)(Math.ceil((double)mX.rlen / k));    blklen+=(blklen % 24 != 0) ? 24 - blklen % 24 : 0;    for (int i=0; i < k & i * blklen < mX.rlen; i++)     tasks.add(new MatrixMultChainTask(mX,mV,mW,ct,i * blklen,Math.min((i + 1) * blklen,mX.rlen)));    List<Future<double[]>> taskret=pool.invokeAll(tasks);    pool.shutdown();    for (    Future<double[]> task : taskret)     vectAdd(task.get(),ret.denseBlock,0,0,mX.clen);  } catch (  Exception ex) {    throw new DMLRuntimeException(ex);  }  ret.recomputeNonZeros();  ret.examSparsity();}  }
class C{  public static Map<String,String> checkJenkinsMode(CommitItem commitItem){  Map<String,String> resultMap=new HashMap<>();  Map<String,String> paramMap=commitItemAsParameterMap(commitItem);  if (jenkinsParams.get("jenkinsparam.mode") != null && jenkinsParams.get("jenkinsparam.mode").equals("json")) {    JsonObject json=new JsonObject();    for (    String key : paramMap.keySet()) {      json.addProperty(key,paramMap.get(key));    }    resultMap.put("json",json.toString());  } else {    return paramMap;  }  return resultMap;}  }
class C{  public void flushWithoutMargin(){  if (valueWithMargin != value) {    valueWithMargin=value;    flush(null);  }}  }
class C{  public Instance firstInstance(){  return m_Instances.get(0);}  }
class C{  public static boolean isStaticFinal(final PojoField fieldEntry){  return fieldEntry.isFinal() && fieldEntry.isStatic();}  }
class C{  @DSModeled(DSC.SAFE) public CursorJoiner(Cursor cursorLeft,String[] columnNamesLeft,Cursor cursorRight,String[] columnNamesRight){  mCursorLeft=cursorLeft;  mCursorRight=cursorRight;  addTaint(columnNamesRight[0].getTaint());  addTaint(columnNamesLeft[0].getTaint());  if (columnNamesLeft.length != columnNamesRight.length) {    throw new IllegalArgumentException("you must have the same number of columns on the left and right, " + columnNamesLeft.length + " != "+ columnNamesRight.length);  }}  }
class C{  @Override public AxisSpace reserveSpace(Graphics2D g2,Plot plot,Rectangle2D plotArea,RectangleEdge edge,AxisSpace space){  if (space == null) {    space=new AxisSpace();  }  if (!isVisible()) {    return space;  }  double tickLabelHeight=0.0;  double tickLabelWidth=0.0;  if (isTickLabelsVisible()) {    g2.setFont(getTickLabelFont());    AxisState state=new AxisState();    refreshTicks(g2,state,plotArea,edge);    if (edge == RectangleEdge.TOP) {      tickLabelHeight=state.getMax();    } else     if (edge == RectangleEdge.BOTTOM) {      tickLabelHeight=state.getMax();    } else     if (edge == RectangleEdge.LEFT) {      tickLabelWidth=state.getMax();    } else     if (edge == RectangleEdge.RIGHT) {      tickLabelWidth=state.getMax();    }  }  Rectangle2D labelEnclosure=getLabelEnclosure(g2,edge);  double labelHeight, labelWidth;  if (RectangleEdge.isTopOrBottom(edge)) {    labelHeight=labelEnclosure.getHeight();    space.add(labelHeight + tickLabelHeight + this.categoryLabelPositionOffset,edge);  } else   if (RectangleEdge.isLeftOrRight(edge)) {    labelWidth=labelEnclosure.getWidth();    space.add(labelWidth + tickLabelWidth + this.categoryLabelPositionOffset,edge);  }  return space;}  }
class C{  protected ArgsBaratine(){  commandDefault(COMMAND_DEFAULT);}  }
class C{  private void generateFile(int wordCnt) throws Exception {  Random rnd=new Random(System.currentTimeMillis());  try (OutputStreamWriter writer=new OutputStreamWriter(igfs.create(FILE,true))){    int cnt=0;    while (cnt < wordCnt) {      String word=DICTIONARY[rnd.nextInt(DICTIONARY.length)];      writer.write(word + " ");      cnt++;    }  } }  }
class C{  public static <T>Filter<T> notFilter(Filter<T> filter){  return (new NegatedFilter<T>(filter));}  }
class C{  public Hypothesis(Candidate cand){  super(cand.getLastCovered(),cand.getPhraseEnd(),cand.getRule().getLHS(),cand.getStates(),new HyperEdge(cand.getRule(),cand.computeResult().getViterbiCost(),cand.computeResult().getTransitionCost(),cand.getTailNodes(),null),cand.score());  this.coverage=cand.getCoverage();}  }
class C{  public Installer(@NonNull Context context){  this.context=context;}  }
class C{  public void updateLogo(Logo logo){  if (logo == null) {    updateLogo(getDefaultLogo(),null,true);  } else {    String contentDescription=TextUtils.isEmpty(logo.altText) ? null : getResources().getString(R.string.accessibility_google_doodle,logo.altText);    updateLogo(logo.image,contentDescription,false);  }}  }
class C{  public boolean isTimeoutDanger(){  return timeoutDanger;}  }
class C{  @Override public void updateNClob(int columnIndex,Reader x) throws SQLException {  updateClob(columnIndex,x,-1);}  }
class C{  public static String readProjectResource(String path) throws IOException {  File file=new File(path);  if (!file.exists()) {    List<String> list=Arrays.asList(path.split(File.pathSeparator));    file=new File(Joiner.on(File.pathSeparatorChar).join(list.subList(1,list.size())));  }  return Files.toString(file,StandardCharsets.UTF_8).trim();}  }
class C{  public EngineOutput(){  std=new ArrayList<>();  err=new ArrayList<>();}  }
class C{  public T image(String url,boolean memCache,boolean fileCache,int targetWidth,int fallbackId,Bitmap preset,int animId){  return image(url,memCache,fileCache,targetWidth,fallbackId,preset,animId,0);}  }
class C{  public static String toFormattedList(String[] strings,int startAt,String betweenWords){  return toFormattedList(Arrays.asList(strings),startAt,betweenWords);}  }
class C{  static private double normalizeProb(double[] prob){  double maxp=0, sump=0;  for (int i=0; i < prob.length; ++i)   sump+=prob[i];  for (int i=0; i < prob.length; ++i) {    double p=prob[i] / sump;    if (maxp < p)     maxp=p;    prob[i]=p;  }  return maxp;}  }
class C{  private static boolean isContinuationChar(byte b){  return -128 <= b && b <= -65;}  }
class C{  private static void createObservationPoints(){  zonaId2Coord.put("CE01in",new Coord(296025.0,6271935.0));  zonaId2Coord.put("CE01out",new Coord(296025.0,6271905.0));  zonaId2Coord.put("CE02in",new Coord(292517.0,6271720.0));  zonaId2Coord.put("CE02out",new Coord(292615.0,6271840.0));  zonaId2Coord.put("CE03in",new Coord(327000.0,6297700.0));  zonaId2Coord.put("CE03out",new Coord(327000.0,6297620.0));  zonaId2Coord.put("CE04in",new Coord(338322.0,6252325.0));  zonaId2Coord.put("CE04out",new Coord(338185.0,6253060.0));  zonaId2Coord.put("CE05in",new Coord(336100.0,6321210.0));  zonaId2Coord.put("CE05out",new Coord(336200.0,6321210.0));  zonaId2Coord.put("CE06in",new Coord(343990.0,6266370.0));  zonaId2Coord.put("CE06out",new Coord(343955.0,6266370.0));  zonaId2Coord.put("CE07in",new Coord(346515.0,6327220.0));  zonaId2Coord.put("CE07out",new Coord(346560.0,6327220.0));  zonaId2Coord.put("CE08in",new Coord(358240.0,6281350.0));  zonaId2Coord.put("CE08out",new Coord(358240.0,6281280.0));  zonaId2Coord.put("CE09in",new Coord(360730.0,6307035.0));  zonaId2Coord.put("CE09out",new Coord(360730.0,6306980.0));  zonaId2Coord.put("CE10in",new Coord(323950.0,6316720.0));  zonaId2Coord.put("CE10out",new Coord(324000.0,6316720.0));}  }
class C{  @Override public boolean performOperation(int generation){  return true;}  }
class C{  public void appendToNalUnit(byte[] data,int offset,int limit){  if (!isFilling) {    return;  }  int readLength=limit - offset;  if (nalData.length < nalLength + readLength) {    nalData=Arrays.copyOf(nalData,(nalLength + readLength) * 2);  }  System.arraycopy(data,offset,nalData,nalLength,readLength);  nalLength+=readLength;}  }
class C{  public GmlPos(){  super(Namespaces.GML_NAMESPACE,NAME);}  }
class C{  public static Hashtable copyHashTable(Hashtable paramsMap){  Hashtable newTable=new Hashtable();  Enumeration keys=paramsMap.keys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    newTable.put(key,paramsMap.get(key));  }  return newTable;}  }
class C{  @GetMapping("/users/{id}/fetch-by-id") public U fetchUserById(@PathVariable("id") U user){  log.debug("Fetching user: " + user);  return lemonService.processUser(user);}  }
class C{  public boolean createHTML(Writer writer,boolean onlyTable,Language language,IHTMLExtension extension){  try {    String cssPrefix=extension != null ? extension.getClassPrefix() : null;    if (cssPrefix != null && cssPrefix.trim().length() == 0)     cssPrefix=null;    table table=new table();    if (m_printFormat.getAD_PrintFont_ID() != 0) {      MPrintFont font=(MPrintFont)m_printFormat.getAD_PrintFont();      Font ff=font.getFont();      String generic=ff.getName();      if (generic.equalsIgnoreCase("sansserif"))       generic="sans-serif";      if (generic.equalsIgnoreCase("monospaced"))       generic="monospace";      if (generic.equalsIgnoreCase("dialog"))       generic="cursive";      if (generic.equalsIgnoreCase("dialoginput"))       generic="fantasy";      table.setStyle("font-family:" + generic);    }    if (cssPrefix != null)     table.setClass(cssPrefix + "-table");    for (int row=-1; row < m_printData.getRowCount(); row++) {      tr tr=new tr();      table.addElement(tr);      if (cssPrefix != null && row % 2 == 0)       tr.setClass(cssPrefix + "-odd");      if (row != -1) {        m_printData.setRowIndex(row);        if (extension != null) {          extension.extendRowElement(tr,m_printData);        }      }      for (int col=0; col < m_printFormat.getItemCount(); col++) {        MPrintFormatItem item=m_printFormat.getItem(col);        if (item.isPrinted()) {          if (row == -1) {            th th=new th();            tr.addElement(th);            th.addElement(Util.maskHTML(item.getPrintName(language)));          } else {            td td=new td();            tr.addElement(td);            if (item.isFixedWidth() && item.getMaxWidth() > 0) {              int pxs=(item.getMaxWidth() * 96);              pxs=pxs / 72;              td.setStyle("width:" + pxs + "px");            }            Object obj=m_printData.getNode(new Integer(item.getAD_Column_ID()));            if (obj == null)             td.addElement("&nbsp;"); else             if (obj instanceof PrintDataElement) {              PrintDataElement pde=(PrintDataElement)obj;              String value=pde.getValueDisplay(language);              if (pde.getColumnName().endsWith("_ID") && extension != null) {                a href=new a("javascript:void(0)");                href.setID(pde.getColumnName() + "_" + row+ "_a");                td.addElement(href);                href.addElement(Util.maskHTML(value));                if (cssPrefix != null)                 href.setClass(cssPrefix + "-href");                extension.extendIDColumn(row,td,href,pde);              } else {                td.addElement(Util.maskHTML(value));              }              if (cssPrefix != null) {                if (DisplayType.isNumeric(pde.getDisplayType())) {                  td.setClass(cssPrefix + "-number");                  td.setClass(cssPrefix + "-numberalign");                } else                 if (DisplayType.isDate(pde.getDisplayType()))                 td.setClass(cssPrefix + "-date"); else                 td.setClass(cssPrefix + "-text");              }            } else             if (obj instanceof PrintData) {            } else             log.log(Level.SEVERE,"Element not PrintData(Element) " + obj.getClass());          }        }      }    }    PrintWriter w=new PrintWriter(writer);    if (onlyTable)     table.output(w); else {      XhtmlDocument doc=new XhtmlDocument();      doc.appendBody(table);      if (extension.getStyleURL() != null) {        link l=new link(extension.getStyleURL(),"stylesheet","text/css");        doc.appendHead(l);      }      if (extension.getScriptURL() != null) {        script jslink=new script();        jslink.setLanguage("javascript");        jslink.setSrc(extension.getScriptURL());        doc.appendHead(jslink);      }      doc.output(w);    }    w.flush();    w.close();  } catch (  Exception e) {    log.log(Level.SEVERE,"(w)",e);  }  return false;}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  public void stop(){  executorService.shutdown();  try {    executorService.awaitTermination(1,TimeUnit.DAYS);  } catch (  InterruptedException ex) {    BotLogger.severe(LOGTAG,ex);  }catch (  Exception e) {    BotLogger.severe(LOGTAG,"Bot threw an unexpected exception at TimerExecutor",e);  }}  }
class C{  public Vec4[] computeViewLookAtContainingExtents(Globe globe,double verticalExaggeration,Vec4 eyePoint,Vec4 centerPoint,Vec4 upVector,Angle fieldOfView,Rectangle viewport,double nearClipDistance,double farClipDistance){  if (globe == null) {    String message=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (eyePoint == null) {    String message=Logging.getMessage("nullValue.EyeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (centerPoint == null) {    String message=Logging.getMessage("nullValue.CenterIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (upVector == null) {    String message=Logging.getMessage("nullValue.UpIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (fieldOfView == null) {    String message=Logging.getMessage("nullValue.FOVIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (viewport == null) {    String message=Logging.getMessage("nullValue.ViewportIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  String message=this.validate(eyePoint,centerPoint,upVector,fieldOfView,viewport,nearClipDistance,farClipDistance);  if (message != null) {    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Iterable<? extends Extent> modelExtents=this.getExtents();  Iterable<? extends ScreenExtent> screenExtents=this.getScreenExtents();  Vec4 newCenterPoint=this.computeCenterPoint(globe,verticalExaggeration,modelExtents,screenExtents);  if (newCenterPoint == null)   newCenterPoint=centerPoint;  Position centerPos=globe.computePositionFromPoint(centerPoint);  Position newCenterPos=globe.computePositionFromPoint(newCenterPoint);  Matrix localCoords=globe.computeSurfaceOrientationAtPosition(centerPos);  Matrix newLocalCoords=globe.computeSurfaceOrientationAtPosition(newCenterPos);  Matrix modelview=Matrix.fromViewLookAt(eyePoint,centerPoint,upVector);  Matrix projection=Matrix.fromPerspective(fieldOfView,viewport.getWidth(),viewport.getHeight(),nearClipDistance,farClipDistance);  Matrix m=Matrix.IDENTITY;  m=m.multiply(newLocalCoords);  m=m.multiply(localCoords.getInverse());  m=m.multiply(modelview.getInverse());  Vec4 newEyePoint=Vec4.UNIT_W.transformBy4(m);  Vec4 newUpVector=Vec4.UNIT_Y.transformBy4(m);  Matrix newModelview=Matrix.fromViewLookAt(newEyePoint,newCenterPoint,newUpVector);  if (screenExtents != null)   screenExtents=this.translateScreenExtents(screenExtents,modelview,newModelview,projection,viewport);  Vec4 p=this.computeEyePoint(newEyePoint,newCenterPoint,newUpVector,fieldOfView,viewport,nearClipDistance,farClipDistance,modelExtents,screenExtents);  if (p != null)   newEyePoint=p;  return new Vec4[]{newEyePoint,newCenterPoint,newUpVector};}  }
class C{  public static void updatePointOnCircle(PointF pointToUpdate,float radius,double angleDegrees,PointF center){  if (radius < 0) {    throw new IllegalArgumentException("Radius cannot be < 0.");  }  double angleRadians=Math.toRadians(angleDegrees);  float x=(float)(radius * Math.sin(angleRadians) + center.x);  float y=(float)(radius * -Math.cos(angleRadians) + center.y);  pointToUpdate.set(x,y);}  }
class C{  public static void frame(double x,double y,double z,double x2,double y2,double z2,Color color){  x=x - Minecraft.getMinecraft().getRenderManager().renderPosX;  y=y - Minecraft.getMinecraft().getRenderManager().renderPosY;  z=z - Minecraft.getMinecraft().getRenderManager().renderPosZ;  x2=x2 - Minecraft.getMinecraft().getRenderManager().renderPosX;  y2=y2 - Minecraft.getMinecraft().getRenderManager().renderPosY;  z2=z2 - Minecraft.getMinecraft().getRenderManager().renderPosZ;  GL11.glBlendFunc(770,771);  GL11.glEnable(GL_BLEND);  GL11.glLineWidth(2.0F);  GL11.glDisable(GL11.GL_TEXTURE_2D);  GL11.glDisable(GL_DEPTH_TEST);  GL11.glDepthMask(false);  RenderUtil.setColor(color);  RenderGlobal.drawSelectionBoundingBox(new AxisAlignedBB(x,y,z,x2,y2,z2));  GL11.glEnable(GL11.GL_TEXTURE_2D);  GL11.glEnable(GL_DEPTH_TEST);  GL11.glDepthMask(true);  GL11.glDisable(GL_BLEND);}  }
class C{  public void validate(String site,String filePath) throws Exception {  if (isNullOrEmpty(site))   throw new Exception("Invalid Request Received ... Site is Empty Or Null..");  if (isNullOrEmpty(filePath))   throw new Exception("Invalid Request Received ... file/Directory Path is Empty Or Null..");}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {  writeLines(lines,lineEnding,output,Charset.defaultCharset());}  }
class C{  public int next(){  final int result=_currentNode;  int nodeType=_nodeType;  _currentNode=END;  if (nodeType >= DTM.NTYPES) {    if (getExpandedTypeID(result) == nodeType) {      return returnNode(result);    }  } else {    if (getNodeType(result) == nodeType) {      return returnNode(result);    }  }  return NULL;}  }
class C{  public boolean isDiscountPrinted(){  Object oo=get_Value(COLUMNNAME_IsDiscountPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public PlaceNameLayerBulkDownloader(PlaceNameLayer layer,Sector sector,double resolution,BulkRetrievalListener listener){  super(layer,sector,resolution,layer.getDataFileStore(),listener);  this.layer=layer;}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,float fromY,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,fromY);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  public ToHitData toHit(IGame game){  final Entity ae=getEntity(game);  final Targetable target=getTarget(game);  if (ae == null || target == null) {    throw new IllegalArgumentException("Attacker or target not valid");  }  Entity te=null;  if (target.getTargetType() == Targetable.TYPE_ENTITY) {    te=(Entity)target;  }  if (!game.getOptions().booleanOption("friendly_fire")) {    if (target.getTargetType() == Targetable.TYPE_ENTITY && (((Entity)target).getOwnerId() == ae.getOwnerId() || (((Entity)target).getOwner().getTeam() != IPlayer.TEAM_NONE && ae.getOwner().getTeam() != IPlayer.TEAM_NONE && ae.getOwner().getTeam() == ((Entity)target).getOwner().getTeam())))     return new ToHitData(TargetRoll.IMPOSSIBLE,"A friendly unit can never be the target of a direct attack.");  }  if (!(ae instanceof Mech)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Only mechs can thrash at infantry");  }  if (!ae.isProne()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Only prone mechs can thrash at infantry");  }  if (te == null || !(te instanceof Infantry)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Can only thrash at infantry");  } else   if (Entity.NONE != te.getSwarmTargetId()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Can't thrash at swarming infantry");  }  if (target.getPosition() == null || ae.getPosition().distance(target.getPosition()) > 0) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not in same hex");  }  if (target.getElevation() != ae.getElevation()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Target not at same elevation");  }  IHex hex=game.getBoard().getHex(ae.getPosition());  if (hex.containsTerrain(Terrains.WOODS) || hex.containsTerrain(Terrains.JUNGLE) || hex.containsTerrain(Terrains.ROUGH)|| hex.containsTerrain(Terrains.RUBBLE)|| hex.containsTerrain(Terrains.FUEL_TANK)|| hex.containsTerrain(Terrains.BUILDING)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Not a clear or pavement hex.");  }  if (target.getTargetType() == Targetable.TYPE_BUILDING || target.getTargetType() == Targetable.TYPE_BLDG_IGNITE || target.getTargetType() == Targetable.TYPE_FUEL_TANK || target.getTargetType() == Targetable.TYPE_FUEL_TANK_IGNITE || target.getTargetType() == Targetable.TYPE_HEX_CLEAR || target.getTargetType() == Targetable.TYPE_HEX_IGNITE) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Invalid attack");  }  for (int loop=0; loop < ae.locations(); loop++) {    if (ae.weaponFiredFrom(loop)) {      return new ToHitData(TargetRoll.IMPOSSIBLE,"Weapons fired from " + ae.getLocationName(loop) + " this turn");    }  }  if (ae.isLocationBad(Mech.LOC_RARM) && ae.isLocationBad(Mech.LOC_LARM) && ae.isLocationBad(Mech.LOC_RLEG)&& ae.isLocationBad(Mech.LOC_LLEG)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Mech has no arms or legs to thrash");  }  return new ToHitData(TargetRoll.AUTOMATIC_SUCCESS,"thrash attacks always hit");}  }
class C{  public void addHttpSession(HttpSession session){synchronized (this.sessions) {    this.sessions.add(session);  }  this.model.addHttpSession(session);}  }
class C{  public final boolean equals(Node node){  try {    DTMNodeProxy dtmp=(DTMNodeProxy)node;    return (dtmp.node == this.node) && (dtmp.dtm == this.dtm);  } catch (  ClassCastException cce) {    return false;  }}  }
class C{  VariableElement parameter(){  return parameter;}  }
class C{  protected void initialize(){  rows=cols=(int)Math.sqrt(matrix.length);  map=new int[levels];  for (int i=0; i < levels; i++) {    int v=255 * i / (levels - 1);    map[i]=v;  }  div=new int[256];  mod=new int[256];  int rc=(rows * cols + 1);  for (int i=0; i < 256; i++) {    div[i]=(levels - 1) * i / 256;    mod[i]=i * rc / 256;  }}  }
class C{  private static String contentLengthHeader(final long length){  return String.format("Content-Length: %d",length);}  }
class C{  public static int maxNum(int a,int b,int c,int d){  a=Math.abs(a);  b=Math.abs(b);  c=Math.abs(c);  d=Math.abs(d);  return a > b ? (a > c ? (a > d ? a : d) : (c > d ? c : d)) : (b > c ? (b > d ? b : d) : (c > d ? c : d));}  }
class C{  public static void main(String[] args){  try {    new Requestor().run(args);  } catch (  Exception ex) {    System.err.println("Exception: " + ex.getMessage());    ex.printStackTrace();  } finally {    System.exit(0);  }}  }
class C{  private Converter create(Class type) throws Exception {  return factory.getInstance(type);}  }
class C{  public static void jenkins(final BitVector bv,final long seed,final long[] h){  final long length=bv.length();  long a, b, c, from=0;  if (length == 0) {    h[0]=seed ^ 0x8de6a918d6538324L;    h[1]=seed ^ 0x6bda2aef21654e7dL;    h[2]=seed ^ 0x36071e726d0ba0c5L;    return;  }  a=b=seed;  c=ARBITRARY_BITS;  while (length - from > Long.SIZE * 2) {    a+=bv.getLong(from,from + Long.SIZE);    b+=bv.getLong(from + Long.SIZE,from + 2 * Long.SIZE);    c+=bv.getLong(from + 2 * Long.SIZE,Math.min(from + 3 * Long.SIZE,length));    a-=b;    a-=c;    a^=(c >>> 43);    b-=c;    b-=a;    b^=(a << 9);    c-=a;    c-=b;    c^=(b >>> 8);    a-=b;    a-=c;    a^=(c >>> 38);    b-=c;    b-=a;    b^=(a << 23);    c-=a;    c-=b;    c^=(b >>> 5);    a-=b;    a-=c;    a^=(c >>> 35);    b-=c;    b-=a;    b^=(a << 49);    c-=a;    c-=b;    c^=(b >>> 11);    a-=b;    a-=c;    a^=(c >>> 12);    b-=c;    b-=a;    b^=(a << 18);    c-=a;    c-=b;    c^=(b >>> 22);    from+=3 * Long.SIZE;  }  c+=length;  long residual=length - from;  if (residual > 0) {    if (residual > Long.SIZE) {      a+=bv.getLong(from,from + Long.SIZE);      residual-=Long.SIZE;    }    if (residual != 0)     b+=bv.getLong(length - residual,length);  }  a-=b;  a-=c;  a^=(c >>> 43);  b-=c;  b-=a;  b^=(a << 9);  c-=a;  c-=b;  c^=(b >>> 8);  a-=b;  a-=c;  a^=(c >>> 38);  b-=c;  b-=a;  b^=(a << 23);  c-=a;  c-=b;  c^=(b >>> 5);  a-=b;  a-=c;  a^=(c >>> 35);  b-=c;  b-=a;  b^=(a << 49);  c-=a;  c-=b;  c^=(b >>> 11);  a-=b;  a-=c;  a^=(c >>> 12);  b-=c;  b-=a;  b^=(a << 18);  c-=a;  c-=b;  c^=(b >>> 22);  h[0]=a;  h[1]=b;  h[2]=c;}  }
class C{  @SuppressWarnings({"unchecked"}) protected int compare(E k1,E k2){  if (comparator == null) {    return ((Comparable)k1).compareTo(k2);  }  return comparator.compare(k1,k2);}  }
class C{  public static int EHOSTUNREACH(){  return Errno.EHOSTUNREACH.intValue();}  }
class C{  public PartitionAttributesData listPartitionAttributes(){  return null;}  }
class C{  public DateTimeFormatter withLocale(Locale locale){  if (this.locale.equals(locale)) {    return this;  }  return new DateTimeFormatter(printerParser,locale,decimalStyle,resolverStyle,resolverFields,chrono,zone);}  }
class C{  public static CoordinatorClientInetAddressMap createLocalAddressLookupMap(){  CoordinatorClientInetAddressMap addressMap=new CoordinatorClientInetAddressMap();  addressMap.setNodeId("localhost");  try {    addressMap.setDualInetAddress(DualInetAddress.fromAddress("127.0.0.1"));  } catch (  UnknownHostException e) {  }  Map<String,DualInetAddress> ips=new HashMap<>();  ips.put(addressMap.getNodeId(),addressMap.getDualInetAddress());  addressMap.setControllerNodeIPLookupMap(ips);  return addressMap;}  }
class C{  public void removeServerById(int serverId){  int identityId=this.getIdentityIdByServerId(serverId);  if (identityId != -1) {    deleteAliases(identityId);    this.getWritableDatabase().execSQL("DELETE FROM " + IdentityConstants.TABLE_NAME + " WHERE "+ IdentityConstants._ID+ " = "+ identityId+ ";");  }  this.getWritableDatabase().execSQL("DELETE FROM " + ServerConstants.TABLE_NAME + " WHERE "+ ServerConstants._ID+ " = "+ serverId+ ";");}  }
class C{  public static Address fromEncoded(final String encoded){  if (null == encoded) {    throw new IllegalArgumentException("encoded address cannot be null");  }  return new Address(encoded.toUpperCase());}  }
class C{  @Override public void onSurfaceChanged(GL10 unused,int width,int height){  GLES20.glViewport(0,0,width,height);  Viewport newViewport=new Viewport(0,0,width,height);  this.mainThreadHandler.sendMessage(Message.obtain(this.mainThreadHandler,MSG_ID_SET_VIEWPORT,newViewport));  this.mainThreadHandler.sendEmptyMessage(MSG_ID_REQUEST_REDRAW);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public String serialize(TreeNode root){  String rst="";  if (root == null) {    return rst;  }  Queue<TreeNode> queue=new LinkedList<TreeNode>();  queue.offer(root);  int size=0;  while (!queue.isEmpty()) {    size=queue.size();    for (int i=0; i < size; i++) {      TreeNode node=queue.poll();      if (node.val == Integer.MIN_VALUE) {        rst+="#,";      } else {        rst+=node.val + ",";        TreeNode left=node.left == null ? new TreeNode(Integer.MIN_VALUE) : node.left;        queue.offer(left);        TreeNode right=node.right == null ? new TreeNode(Integer.MIN_VALUE) : node.right;        queue.offer(right);      }    }  }  return rst;}  }
class C{  protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  int width=getResources().getDisplayMetrics().widthPixels;  int height=(int)(width / 6.8 * 4 + DisplayUtils.dpToPx(getContext(),40 + 16));  setMeasuredDimension(width,height);  unitRadius=(float)(width / 6.8);  for (int i=0; i < radius.length; i++) {    radius[i]=unitRadius * (i + 1);  }  cX=(float)(getMeasuredWidth() / 2.0);  cY=getMeasuredHeight();}  }
class C{  public strong addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public final boolean isPublic(){  return Modifier.isPublic(getModifiers());}  }
class C{  public void changeCategory(ManualCategory category,int page){  currentCategory=category;  currentCategory.init(this,false);  currentCategory.setPage(page,this);}  }
class C{  public WriteException(WriteRequest request,String s){  super(s);  this.requests=asRequestList(request);}  }
class C{  public String nextTo(String delimiters) throws JSONException {  char c;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=this.next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public static Date evenSecondDateBefore(Date date){  if (date == null) {    date=new Date();  }  Calendar c=Calendar.getInstance();  c.setTime(date);  c.set(Calendar.MILLISECOND,0);  return c.getTime();}  }
class C{  public void testWickedLongTerm() throws IOException {  RAMDirectory dir=new RAMDirectory();  Analyzer analyzer=new ClassicAnalyzer();  IndexWriter writer=new IndexWriter(dir,new IndexWriterConfig(analyzer));  char[] chars=new char[IndexWriter.MAX_TERM_LENGTH];  Arrays.fill(chars,'x');  Document doc=new Document();  final String bigTerm=new String(chars);  String contents="abc xyz x" + bigTerm + " another term";  doc.add(new TextField("content",contents,Field.Store.NO));  writer.addDocument(doc);  doc=new Document();  doc.add(new TextField("content","abc bbb ccc",Field.Store.NO));  writer.addDocument(doc);  writer.close();  IndexReader reader=DirectoryReader.open(dir);  assertEquals(2,reader.docFreq(new Term("content","abc")));  assertEquals(1,reader.docFreq(new Term("content","bbb")));  assertEquals(1,reader.docFreq(new Term("content","term")));  assertEquals(1,reader.docFreq(new Term("content","another")));  PostingsEnum tps=MultiFields.getTermPositionsEnum(reader,"content",new BytesRef("another"));  assertTrue(tps.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);  assertEquals(1,tps.freq());  assertEquals(3,tps.nextPosition());  assertEquals("document with wicked long term should is not in the index!",2,reader.numDocs());  reader.close();  doc=new Document();  doc.add(new TextField("content",bigTerm,Field.Store.NO));  ClassicAnalyzer sa=new ClassicAnalyzer();  sa.setMaxTokenLength(100000);  writer=new IndexWriter(dir,new IndexWriterConfig(sa));  writer.addDocument(doc);  writer.close();  reader=DirectoryReader.open(dir);  assertEquals(1,reader.docFreq(new Term("content",bigTerm)));  reader.close();  dir.close();  analyzer.close();  sa.close();}  }
class C{  public String globalInfo(){  return "Bayes Network learning using various search algorithms and " + "quality measures.\n" + "Base class for a Bayes Network classifier. Provides "+ "datastructures (network structure, conditional probability "+ "distributions, etc.) and facilities common to Bayes Network "+ "learning algorithms like K2 and B.\n\n"+ "For more information see:\n\n"+ "http://www.cs.waikato.ac.nz/~remco/weka.pdf";}  }
class C{  public void sendPreserialized(ByteBuffer buffer,boolean cacheContentChanges,DistributionMessage msg) throws IOException, ConnectionException {  if (!connected) {    throw new ConnectionException(LocalizedStrings.Connection_NOT_CONNECTED_TO_0.toLocalizedString(this.remoteAddr));  }  if (this.batchFlusher != null) {    batchSend(buffer);    return;  }  final boolean origSocketInUse=this.socketInUse;  byte originalState=-1;synchronized (stateLock) {    originalState=this.connectionState;    ;    this.connectionState=STATE_SENDING;  }  this.socketInUse=true;  try {    if (useNIO()) {      SocketChannel channel=getSocket().getChannel();      nioWriteFully(channel,buffer,false,msg);    } else {      if (buffer.hasArray()) {        this.output.write(buffer.array(),buffer.arrayOffset(),buffer.limit() - buffer.position());      } else {        byte[] bytesToWrite=getBytesToWrite(buffer);synchronized (outLock) {          try {            this.output.write(bytesToWrite);            this.output.flush();          }  finally {          }        }      }    }    if (cacheContentChanges) {      messagesSent++;    }  }  finally {    accessed();    this.socketInUse=origSocketInUse;synchronized (stateLock) {      this.connectionState=originalState;    }  }}  }
class C{  public NumberTickUnitSource(boolean integers,NumberFormat formatter){  this.integers=integers;  this.formatter=formatter;  this.power=0;  this.factor=1;}  }
class C{  protected void fireCaretUpdate(CaretEvent e){  possiblyUpdateCurrentLineHighlightLocation();  if (e != null && e.getDot() != e.getMark()) {    cutAction.setEnabled(true);    copyAction.setEnabled(true);  } else   if (cutAction.isEnabled()) {    cutAction.setEnabled(false);    copyAction.setEnabled(false);  }  super.fireCaretUpdate(e);}  }
class C{  public AnchoredRule(Rule rule,DialogueState state,Assignment filledSlots){  this.rule=rule;  this.id=rule.getRuleId();  if (!filledSlots.isEmpty()) {    this.id+="(" + filledSlots + ")";  }  effects=new HashSet<Effect>();  outputs=new ValueRange();  parameters=new HashSet<String>();  this.filledSlots=filledSlots;  inputs=new ValueRange();  for (  Template t : rule.getInputVariables()) {    if (t.isFilledBy(filledSlots)) {      String t2=t.fillSlots(filledSlots).toString();      if (state.hasChanceNode(t2)) {        inputs.addValues(t2,state.getChanceNode(t2).getValues());      }    }  }  Set<Assignment> conditions=inputs.linearise();  if (rule.getRuleType() == RuleType.PROB) {    cache=new ConcurrentHashMap<Assignment,RuleOutput>();  }  variables=new HashSet<String>(inputs.getVariables());  for (  Assignment input : conditions) {    input.addAssignment(filledSlots);    RuleOutput output=getCachedOutput(input);    relevant=relevant || !output.isVoid();    for (    Map.Entry<Effect,Parameter> o : output.getPairs()) {      Effect effect=o.getKey();      Parameter param=o.getValue();      effects.add(effect);      outputs.addAssign(effect.getAssignment());      param.getVariables().stream().filter(null).forEach(null);    }  }  if (relevant && rule.getRuleType() == RuleType.UTIL) {    variables.addAll(outputs.getVariables());    cache=new ConcurrentHashMap<Assignment,RuleOutput>();  }}  }
class C{  public OutputStream OpenOutputfile(String filePath){  OutputStream fileTarget=null;  try {    fileTarget=new FileOutputStream(filePath);  } catch (  FileNotFoundException e) {    System.out.println("File not found: " + filePath);    return null;  }  return fileTarget;}  }
class C{  public static String replaceEscapedRightAngle(String s){  StringBuilder buf=new StringBuilder();  int i=0;  while (i < s.length()) {    char c=s.charAt(i);    if (c == '<' && s.substring(i).startsWith("<\\\\>")) {      buf.append("<\\\\>");      i+="<\\\\>".length();      continue;    }    if (c == '>' && s.substring(i).startsWith(">\\>")) {      buf.append(">>");      i+=">\\>".length();      continue;    }    if (c == '\\' && s.substring(i).startsWith("\\>>") && !s.substring(i).startsWith("\\>>>")) {      buf.append(">>");      i+="\\>>".length();      continue;    }    buf.append(c);    i++;  }  return buf.toString();}  }
class C{  protected Set<String> friends(){  return Collections.emptySet();}  }
class C{  public PreferencesCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,Context.MODE_PRIVATE);  cookies=new ConcurrentHashMap<String,Cookie>();  String storedCookieNames=cookiePrefs.getString(COOKIE_NAME_STORE,null);  if (storedCookieNames != null) {    String[] cookieNames=TextUtils.split(storedCookieNames,",");    for (    String name : cookieNames) {      String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);      if (encodedCookie != null) {        Cookie decodedCookie=decodeCookie(encodedCookie);        if (decodedCookie != null) {          cookies.put(name,decodedCookie);        }      }    }    clearExpired(new Date());  }}  }
class C{  public void afterTestExecution(final Class<? extends AbstractGremlinTest> testClass){}  }
class C{  private void initializeProcessor(JsonProcessor processor) throws ODataUnmarshallingException {  LOG.info("Trying to initialize processor: {}",processor.getClass().getSimpleName());  processor.initialize();  fields=processor.getValues();  odataValues=processor.getODataValues();  links=processor.getLinks();}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 3 || lexState < 0)   throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrError.INVALID_LEXICAL_STATE); else   curLexState=lexState;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public ConsoleProgressBar withReplacers(final Collection<Replacer> replacers){  Preconditions.checkNotNull(replacers);  this.replacers=ImmutableSet.copyOf(replacers);  return this;}  }
class C{  public final void addVertex(final Vertex<LongWritable,?,DoubleWritable> vertex,final double scoreFactor){  long vertexId=vertex.getId().get();  if (vertices.add(new LongWritable(vertexId))) {    if (size() == 1) {      for (      Edge<LongWritable,DoubleWritable> edge : vertex.getEdges()) {        boundaryScore+=edge.getValue().get();      }      score=0.0;    } else {      for (      Edge<LongWritable,DoubleWritable> edge : vertex.getEdges()) {        if (vertices.contains(edge.getTargetVertexId())) {          innerScore+=edge.getValue().get();          boundaryScore-=edge.getValue().get();        } else {          boundaryScore+=edge.getValue().get();        }      }      score=(innerScore - scoreFactor * boundaryScore) / (size() * (size() - 1) / 2);    }  }}  }
class C{  public void unCollapse(NodeRenderingProperty node,NodeRenderingProperty parent){  if (parent == node || node.collapsedUnder != parent) {    return;  }  node.collapsedUnder=null;  parent.hasCollapsedNodeUnder=false;  DeltaCollapse delta=(DeltaCollapse)node.pluginStore.get(this);  node.targetPositionX=parent.targetPositionX - delta.dxAtCollapse;  node.targetPositionY=parent.targetPositionY - delta.dyAtCollapse;  delta.reachedParent=false;}  }
class C{  public synchronized void updateObject(String columnLabel,Object x,SQLType targetSqlType,int scaleOrLength) throws SQLException {  super.updateObjectInternal(findColumn(columnLabel),JDBC42Helper.convertJavaTimeToJavaSql(x),translateAndCheckSqlType(targetSqlType),scaleOrLength);}  }
class C{  public static boolean checkEntityImmunities(Entity entity){  if (entity.isInWater() || entity.fire > 0) {    return true;  }  if (!(entity instanceof EntityArrow)) {    if (!entity.getPassengers().isEmpty() || entity.ridingEntity != null) {      return true;    }  } else   if (!((IMixinEntityArrow)entity).isInGround()) {    return true;  }  if (entity instanceof EntityLivingBase) {    EntityLivingBase living=(EntityLivingBase)entity;    if (living.hurtTime > 0 || living.getActivePotionEffects().size() > 0) {      return true;    }    if (entity instanceof EntityCreature && ((EntityCreature)entity).getAITarget() != null) {      return true;    }    if (entity instanceof EntityVillager && ((EntityVillager)entity).isMating()) {      return true;    }    if (entity instanceof EntityAnimal) {      EntityAnimal animal=(EntityAnimal)entity;      if (animal.isChild() || animal.isInLove()) {        return true;      }      if (entity instanceof EntitySheep && ((EntitySheep)entity).getSheared()) {        return true;      }    }    if (entity instanceof EntityCreeper && ((EntityCreeper)entity).hasIgnited()) {      return true;    }  }  return false;}  }
class C{  protected int storeReference(Object obj){  int newRefId=refId++;  refMap.put(Integer.valueOf(newRefId),obj);  return newRefId;}  }
class C{  public static void start() throws Exception {  LOG.info("start()");  init();  SignerClient.init(instance.getActorSystem());}  }
class C{  public void testAuthenticationByProperty() throws Exception {  URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/authentication-war/test");  final String expected="Principal name [someone], Is user in \"cargo\" role [true]";  Map<String,String> requestProperties=new HashMap<String,String>();  requestProperties.put("Authorization","Basic " + new String(Base64.encodeBase64("someone:passw0rd".getBytes())));  PingUtils.assertPingTrue("Failed authentication",expected,url,requestProperties,logger);}  }
class C{  public static void initExchange(ServiceContext context){  HtmlSpeedHttpExchange exchange=context.exchange;  boolean isHttps=context.isHttps;  HttpServletRequest request=context.request;  String host=context.host;  String url=context.url;  HashSet<String> dropedHeaders=context.dropedHeaders;  InputStream in=context.in;  boolean isPost=context.isPost;  byte[] postedContent=context.postedContent;  ConfigData configData=context.configData;  final int MD5_LEN=CacheUtils.MD5_LENGTH;  exchange.setMethod(request.getMethod());  setExchangeDestParams(context,isPost,exchange,url,host);  String protocol=request.getProtocol();  exchange.setVersion(protocol);  String connectionHdr=request.getHeader("Connection");  if (connectionHdr != null) {    connectionHdr=connectionHdr.toLowerCase();    if (connectionHdr.indexOf("keep-alive") < 0 && connectionHdr.indexOf("close") < 0)     connectionHdr=null;  }  boolean isGetMethod=request.getMethod().equals("GET");  boolean xForwardedFor=false;  boolean xRealIP=false;  long contentLength=-1;  Enumeration<?> enm=request.getHeaderNames();  while (enm.hasMoreElements()) {    String hdr=(String)enm.nextElement();    String lhdr=hdr.toLowerCase();    if (dropedHeaders.contains(lhdr))     continue;    if (connectionHdr != null && connectionHdr.indexOf(lhdr) >= 0)     continue;    if ("host".equals(lhdr))     continue;    if ("x-forwarded-for".equals(lhdr)) {      xForwardedFor=true;    } else     if ("x-real-ip".equals(lhdr)) {      xRealIP=true;    }    Enumeration<?> vals=request.getHeaders(hdr);    while (vals.hasMoreElements()) {      String val=(String)vals.nextElement();      if (val != null) {        if ("if-none-match".equals(lhdr) && CacheUtils.isHtmlSpeedEtag(val)) {          int len=val.length();          String prevMd5=val.substring(len - MD5_LEN - 2,len - 2);          context.prevMd5=prevMd5;          if (len == MD5_LEN + 3)           continue;          val=val.substring(0,len - MD5_LEN - 3);        }        exchange.addRequestHeader(hdr,val);      }    }  }  if (context.refreshRsrc != null) {    Rsrc rsrc=(Rsrc)context.refreshRsrc.replacer;    if (rsrc.origEtag != null)     exchange.setRequestHeader("If-None-Match",rsrc.origEtag);    if (rsrc.origLastModified != null)     exchange.setRequestHeader("If-Modified-Since",rsrc.origLastModified);  }  if (_addProxyHeaders && !xForwardedFor) {    exchange.addRequestHeader("X-Forwarded-For",request.getRemoteAddr());  }  if (_addProxyHeaders && !xRealIP) {    exchange.addRequestHeader("X-Real-IP",request.getRemoteAddr());  }  if (postedContent != null) {    try {      if (configData.isDebug)       System.out.println("POST content: " + new String(postedContent,"UTF-8"));      exchange.setRequestContent(new ByteArrayBuffer(postedContent));    } catch (    Exception exc) {      exc.printStackTrace();    }  }}  }
class C{  public static boolean isOrderedDatatype(IRI datatype){  return isNumericDatatype(datatype) || isCalendarDatatype(datatype);}  }
class C{  @SuppressWarnings("UnusedDeclaration") public KeyValuePersistenceSettings(String settings){  init(settings);}  }
class C{  public void testDetectLanguageKo(){  LOGGER.debug("detectLanguage ko");  LanguageDetector instance=LanguageDetector.getInstance();  Document doc;  try {    doc=Jsoup.parse(new File(PATH + "ko.wikipedia.org-wiki_20140701.html"),UTF_8);    LOGGER.debug(doc.text());    LOGGER.debug("start detection");    assertEquals("ko",instance.detectLanguage(doc.text()).getDetectedLanguage());    assertEquals("ko",instance.detectLanguage(doc.text().toLowerCase()).getDetectedLanguage());    assertEquals("ko",instance.detectLanguage(doc.text().toUpperCase()).getDetectedLanguage());    LOGGER.debug("detection ended");  } catch (  IOException ex) {    LOGGER.error(ex);  }catch (  NullPointerException npe) {    LOGGER.error("error while fetching page " + npe);  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public Object remove(int index){  return index >= 0 && index < this.length() ? this.myArrayList.remove(index) : null;}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  @Override public void createUntamperedRequest(){  CollisionDJBX31A DJBX31A=new CollisionDJBX31A();  String untampered=UtilHashDoS.generateUntampered(DJBX31A,optionNumberAttributes.getValue(),optionUseNamespaces.isOn());  String soapMessage=this.getOptionTextAreaSoapMessage().getValue();  String soapMessageFinal=this.getOptionTextAreaSoapMessage().replacePlaceholderWithPayload(soapMessage,untampered);  Map<String,String> httpHeaderMap=new HashMap<String,String>();  for (  Map.Entry<String,String> entry : getOriginalRequestHeaderFields().entrySet()) {    httpHeaderMap.put(entry.getKey(),entry.getValue());  }  this.setUntamperedRequestObject(httpHeaderMap,getOriginalRequest().getEndpoint(),soapMessageFinal);}  }
class C{  private void mmChainRelinkHops(Hop h,int i,int j,ArrayList<Hop> mmChain,ArrayList<Hop> mmOperators,int opIndex,int[][] split,int level){  if (i == j) {    logTraceHop(h,level);    return;  }  if (LOG.isTraceEnabled()) {    String offset=Explain.getIdentation(level);    LOG.trace(offset + "(");  }  if (i == split[i][j]) {    h.getInput().add(mmChain.get(i));    mmChain.get(i).getParent().add(h);  } else {    h.getInput().add(mmOperators.get(opIndex));    mmOperators.get(opIndex).getParent().add(h);    opIndex=opIndex + 1;  }  if (split[i][j] + 1 == j) {    h.getInput().add(mmChain.get(j));    mmChain.get(j).getParent().add(h);  } else {    h.getInput().add(mmOperators.get(opIndex));    mmOperators.get(opIndex).getParent().add(h);    opIndex=opIndex + 1;  }  mmChainRelinkHops(h.getInput().get(0),i,split[i][j],mmChain,mmOperators,opIndex,split,level + 1);  mmChainRelinkHops(h.getInput().get(1),split[i][j] + 1,j,mmChain,mmOperators,opIndex,split,level + 1);  h.refreshSizeInformation();  if (LOG.isTraceEnabled()) {    String offset=Explain.getIdentation(level);    LOG.trace(offset + ")");  }}  }
class C{  public static InputSource sourceToInputSource(Source source){  if (source instanceof SAXSource) {    return ((SAXSource)source).getInputSource();  } else   if (source instanceof StreamSource) {    StreamSource ss=(StreamSource)source;    InputSource isource=new InputSource(ss.getSystemId());    isource.setByteStream(ss.getInputStream());    isource.setCharacterStream(ss.getReader());    isource.setPublicId(ss.getPublicId());    return isource;  } else {    return null;  }}  }
class C{  public final void recycle(){  if (TRACK_RECYCLED_LOCATION) {    if (mRecycledLocation != null) {      throw new RuntimeException(toString() + " recycled twice!",mRecycledLocation);    }    mRecycledLocation=new RuntimeException("Last recycled here");  } else {    if (mRecycled) {      throw new RuntimeException(toString() + " recycled twice!");    }    mRecycled=true;  }  mClipData=null;  mClipDescription=null;  mLocalState=null;synchronized (gRecyclerLock) {    if (gRecyclerUsed < MAX_RECYCLED) {      gRecyclerUsed++;      mNext=gRecyclerTop;      gRecyclerTop=this;    }  }}  }
class C{  private void resetForOT(){  if (bottomOT && homeScore == awayScore) {    gameYardLine=75;    gameYardsNeed=10;    gameDown=1;    numOT++;    if ((numOT % 2) == 0)     gamePoss=true; else     gamePoss=false;    gameTime=-1;    bottomOT=false;  } else   if (!bottomOT) {    gamePoss=!gamePoss;    gameYardLine=75;    gameYardsNeed=10;    gameDown=1;    gameTime=-1;    bottomOT=true;  } else {    playingOT=false;  }}  }
class C{  public boolean specifiesRemoteMirroring(){  return (null != remoteCopies && null != remoteCopies.getRemoteCopySettings());}  }
class C{  public static byte[] generateRandomBytes(final int numBytes){  final SecureRandom rand=new SecureRandom();  final byte[] input=new byte[numBytes];  rand.nextBytes(input);  return input;}  }
class C{  public void run(){  try {    if (sLogger.isActivated()) {      sLogger.info("Initiate a new RTP session as originating");    }    String sdp=generateSdp();    getDialogPath().setLocalContent(sdp);    if (sLogger.isActivated()) {      sLogger.info("Send INVITE");    }    SipRequest invite=createInvite();    getAuthenticationAgent().setAuthorizationHeader(invite);    getDialogPath().setInvite(invite);    sendInvite(invite);  } catch (  InvalidArgumentException e) {    sLogger.error(new StringBuilder("Session initiation has failed for CallId=").append(getDialogPath().getCallId()).append(" ContactId=").append(getRemoteContact()).toString(),e);    handleError(new SipSessionError(SipSessionError.SESSION_INITIATION_FAILED,e));  }catch (  ParseException e) {    sLogger.error(new StringBuilder("Session initiation has failed for CallId=").append(getDialogPath().getCallId()).append(" ContactId=").append(getRemoteContact()).toString(),e);    handleError(new SipSessionError(SipSessionError.SESSION_INITIATION_FAILED,e));  }catch (  FileAccessException e) {    sLogger.error(new StringBuilder("Session initiation has failed for CallId=").append(getDialogPath().getCallId()).append(" ContactId=").append(getRemoteContact()).toString(),e);    handleError(new SipSessionError(SipSessionError.SESSION_INITIATION_FAILED,e));  }catch (  PayloadException e) {    sLogger.error(new StringBuilder("Session initiation has failed for CallId=").append(getDialogPath().getCallId()).append(" ContactId=").append(getRemoteContact()).toString(),e);    handleError(new SipSessionError(SipSessionError.SESSION_INITIATION_FAILED,e));  }catch (  NetworkException e) {    handleError(new SipSessionError(SipSessionError.SESSION_INITIATION_FAILED,e));  }catch (  RuntimeException e) {    sLogger.error(new StringBuilder("Session initiation has failed for CallId=").append(getDialogPath().getCallId()).append(" ContactId=").append(getRemoteContact()).toString(),e);    handleError(new SipSessionError(SipSessionError.SESSION_INITIATION_FAILED,e));  }}  }
class C{  private void cleanupMediaButtonReceiverForPackage(String packageName,boolean removeAll){synchronized (mRCStack) {    if (mRCStack.empty()) {      return;    } else {      final PackageManager pm=mContext.getPackageManager();      RemoteControlStackEntry oldTop=mRCStack.peek();      Iterator<RemoteControlStackEntry> stackIterator=mRCStack.iterator();      while (stackIterator.hasNext()) {        RemoteControlStackEntry rcse=(RemoteControlStackEntry)stackIterator.next();        if (removeAll && packageName.equals(rcse.mMediaIntent.getCreatorPackage())) {          stackIterator.remove();          rcse.destroy();        } else         if (rcse.mReceiverComponent != null) {          try {            pm.getReceiverInfo(rcse.mReceiverComponent,0);          } catch (          PackageManager.NameNotFoundException e) {            stackIterator.remove();            rcse.destroy();          }        }      }      if (mRCStack.empty()) {        mAudioHandler.sendMessage(mAudioHandler.obtainMessage(MSG_PERSIST_MEDIABUTTONRECEIVER,0,0,null));      } else       if (oldTop != mRCStack.peek()) {        RemoteControlStackEntry rcse=mRCStack.peek();        if (rcse.mReceiverComponent != null) {          mAudioHandler.sendMessage(mAudioHandler.obtainMessage(MSG_PERSIST_MEDIABUTTONRECEIVER,0,0,rcse.mReceiverComponent));        }      }    }  }}  }
class C{  protected void compareSubscriptionRestriction(Node tpNode,boolean subscriptionRestriction){  assertNotNull(tpNode);  assertEquals(String.valueOf(subscriptionRestriction),tpNode.getAttributes().getNamedItem("onlyOneSubscriptionPerUser").getNodeValue());}  }
class C{  public void testSingleMultiPolygonManyPointsHolesRoundTrip() throws SAXException, IOException, ParserConfigurationException {  PolygonGenerator pgc=new PolygonGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setGenerationAlgorithm(PolygonGenerator.BOX);  pgc.setNumberPoints(1000);  pgc.setNumberHoles(4);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  MultiPolygon pt=(MultiPolygon)pg.create();  checkRoundTrip(pt);}  }
class C{  public void opened(IJavaElement element){  JavaElementDelta delta=new JavaElementDelta(element);  delta.changed(F_OPENED);  insertDeltaTree(element,delta);}  }
class C{  public boolean isEmpty(){  return _n == 0;}  }
class C{  public double[] computeLocalInfoDistanceUsingPreviousObservations(double[][] states){  return computeLocalInfoDistanceUsingPreviousObservations(states,false);}  }
class C{  public boolean apply(T value,final boolean blacklist,boolean flag){  if (rules == null) {    return flag;  }  if (blacklist) {    flag=processExcludes(value,flag);    flag=processIncludes(value,flag);  } else {    flag=processIncludes(value,flag);    flag=processExcludes(value,flag);  }  return flag;}  }
class C{  public Annotation(Object value){  this.value=value;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public boolean hasWarning(){  return fSeverity == FATAL || fSeverity == ERROR || fSeverity == WARNING;}  }
class C{  public static void disableTraceCalls(){  ExecutionTraceImpl.disableTraceCalls();}  }
class C{  public UISelectBooleanTestCase(String name){  super(name);}  }
class C{  @Override public Boolean isCreateXSLDirectory() throws AdeException {  return m_createXSLDirectory;}  }
class C{  public ASN1InputStream(InputStream input,int limit){  this(input,limit,false);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:45.116 -0500",hash_original_method="2EAAE714EE0AE41BF39DBCA3F91B9104",hash_generated_method="2EAAE714EE0AE41BF39DBCA3F91B9104") FormatSpecifierParser(String format){  this.format=format;  this.length=format.length();}  }
class C{  public DateMidnight addToCopy(int value){  return iInstant.withMillis(iField.add(iInstant.getMillis(),value));}  }
class C{  public void run(Throwing.Runnable action){  actions.add(action);}  }
class C{  public static boolean validateToken(MSession session,MUser user,String token){  try {    String hash=getPasswordHash(session,user);    return hash.equals(token);  } catch (  Exception e) {    log.log(Level.WARNING,e.getLocalizedMessage(),e);  }  return false;}  }
class C{  public void addXSLAttribute(String name,final String value,final String uri){  if (m_elemContext.m_startTagOpen) {    final String patchedName=patchName(name);    final String localName=getLocalName(patchedName);    addAttributeAlways(uri,localName,patchedName,"CDATA",value,true);  }}  }
class C{  public GdbInfoLocals infoLocals() throws IOException, InterruptedException, DebuggerException {  GdbOutput gdbOutput=sendCommand("info locals");  return GdbInfoLocals.parse(gdbOutput);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:18.172 -0500",hash_original_method="DB5E1435497B50A83BF83DDB6082161C",hash_generated_method="FDB2FAFA7D11C2731B9585F51D9312E1") public static final CharSequence format(CharSequence inFormat,long inTimeInMillis){  return format(inFormat,new Date(inTimeInMillis));}  }
class C{  public static String implode(Collection<String> items,String delimiter){  Parameters.notNull("items",items);  Parameters.notNull("delimiter",delimiter);  if (items.isEmpty()) {    return "";  }  StringBuilder buffer=new StringBuilder(200);  boolean first=true;  for (  String s : items) {    if (!first) {      buffer.append(delimiter);    }    buffer.append(s);    first=false;  }  return buffer.toString();}  }
class C{  public static boolean isQuotationValid(String value){  return value == null || value.length() < 800 * 50;}  }
class C{  private static void popTransactionStartStamp(Transaction t){  Map<Transaction,Timestamp> map=suspendedTxStartStamps.get();  if (map.size() > 0) {    Timestamp stamp=map.remove(t);    if (stamp != null) {      transactionStartStamp.set(stamp);    } else {      Debug.logError("Error in transaction handling - no saved start stamp found - using NOW.",module);      transactionStartStamp.set(UtilDateTime.nowTimestamp());    }  }}  }
class C{  private byte[] hexToBytes(String input){  if (input == null) {    return null;  }  final int inputLength=input.length();  if ((inputLength % 2) != 0) {    System.err.print("Invalid length; must be multiple of 2");    return null;  }  final int byteLength=inputLength / 2;  final byte[] output=new byte[byteLength];  int inputIndex=0;  int byteIndex=0;  while (inputIndex < inputLength) {    output[byteIndex++]=(byte)Integer.parseInt(input.substring(inputIndex,inputIndex + 2),16);    inputIndex+=2;  }  return output;}  }
class C{  protected void createUnimplementedMethod(ClassWriter cw,String internalClassName,Method method){  String exceptionName=getInternalClassName(UnsupportedOperationException.class.getName());  String sig=Type.getMethodDescriptor(method);  String name=method.getName();  MethodVisitor mv=cw.visitMethod(ACC_PUBLIC,name,sig,null,null);  mv.visitTypeInsn(NEW,exceptionName);  mv.visitInsn(DUP);  mv.visitLdcInsn("Unimplemented method '" + name + "' (not a setter/getter, could not materialize)");  mv.visitMethodInsn(INVOKESPECIAL,exceptionName,"<init>","(Ljava/lang/String;)V",false);  mv.visitInsn(ATHROW);  mv.visitMaxs(0,0);  mv.visitEnd();}  }
class C{  public long ord(){  return ord;}  }
class C{  public Dummy(Atom a){  el=a;}  }
class C{  protected void closeButtonPressed(ActionEvent e){  firePropertyChange(PropertyChangeID.CLOSE_WINDOW,null,null);  dispose();}  }
class C{  private static byte[] ntlmv2Hash(final String domain,final String user,final byte[] ntlmHash) throws AuthenticationException {  try {    final HMACMD5 hmacMD5=new HMACMD5(ntlmHash);    hmacMD5.update(user.toUpperCase(Locale.US).getBytes("UnicodeLittleUnmarked"));    if (domain != null) {      hmacMD5.update(domain.getBytes("UnicodeLittleUnmarked"));    }    return hmacMD5.getOutput();  } catch (  UnsupportedEncodingException e) {    throw new AuthenticationException("Unicode not supported! " + e.getMessage(),e);  }}  }
class C{  @Override public void handlePlan(final CarrierPlan carrierPlan){  if (carrierPlan == null)   throw new IllegalStateException("carrierPlan is null and cannot be handled.");  handle(carrierPlan);}  }
class C{  public static void method(String methodName,String fieldName,Class<?> clazz){  String completeName=clazz.getCanonicalName();  String packageName=clazz.getPackage().getName();  String className=completeName.substring(packageName.length() + 1);  throw new MalformedBeanException(MSG.INSTANCE.message(malformedBeanException3,methodName,fieldName,className));}  }
class C{  public JScrollBar(int orientation,int value,int extent,int min,int max){  checkOrientation(orientation);  this.unitIncrement=1;  this.blockIncrement=(extent == 0) ? 1 : extent;  this.orientation=orientation;  this.model=new DefaultBoundedRangeModel(value,extent,min,max);  this.model.addChangeListener(fwdAdjustmentEvents);  setRequestFocusEnabled(false);  updateUI();}  }
class C{  public static boolean intersectSphereSphere(double aX,double aY,double aZ,double radiusSquaredA,double bX,double bY,double bZ,double radiusSquaredB,Vector4d centerAndRadiusOfIntersectionCircle){  double dX=bX - aX, dY=bY - aY, dZ=bZ - aZ;  double distSquared=dX * dX + dY * dY + dZ * dZ;  double h=0.5 + (radiusSquaredA - radiusSquaredB) / distSquared;  double r_i=radiusSquaredA - h * h * distSquared;  if (r_i >= 0.0) {    centerAndRadiusOfIntersectionCircle.x=aX + h * dX;    centerAndRadiusOfIntersectionCircle.y=aY + h * dY;    centerAndRadiusOfIntersectionCircle.z=aZ + h * dZ;    centerAndRadiusOfIntersectionCircle.w=Math.sqrt(r_i);    return true;  }  return false;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:01.419 -0500",hash_original_method="F3A29FB813CE2FB46A21E47C37FE57A3",hash_generated_method="F42B6025FAEC26BD9B34DF75EE222DD4") ContentLoader(String rawUrl,LoadListener loadListener){  super(loadListener);  int mimeIndex=rawUrl.lastIndexOf('?');  if (mimeIndex != -1) {    mUrl=rawUrl.substring(0,mimeIndex);    mContentType=rawUrl.substring(mimeIndex + 1);  } else {    mUrl=rawUrl;  }}  }
class C{  public Set<PartitionRebalanceInfo> execute(){  long start=System.nanoTime();  InternalResourceManager resourceManager=InternalResourceManager.getInternalResourceManager(leaderRegion.getCache());  MembershipListener listener=new MembershipChangeListener();  if (isRebalance) {    InternalResourceManager.getResourceObserver().rebalancingStarted(targetRegion);  } else {    InternalResourceManager.getResourceObserver().recoveryStarted(targetRegion);  }  RecoveryLock lock=null;  try {    if (!checkAndSetColocatedRegions()) {      return Collections.emptySet();    }    if (!isRebalanceNecessary()) {      return Collections.emptySet();    }    if (!simulate) {      lock=leaderRegion.getRecoveryLock();      lock.lock();    }    if (!isRebalanceNecessary()) {      return Collections.emptySet();    }    leaderRegion.getRegionAdvisor().addMembershipListener(listener);    PartitionedRegionLoadModel model=null;    GemFireCacheImpl cache=(GemFireCacheImpl)leaderRegion.getCache();    Map<PartitionedRegion,InternalPRInfo> detailsMap=fetchDetails(cache);    BucketOperatorWrapper serialOperator=getBucketOperator(detailsMap);    ParallelBucketOperator parallelOperator=new ParallelBucketOperator(MAX_PARALLEL_OPERATIONS,cache.getDistributionManager().getWaitingThreadPool(),serialOperator);    model=buildModel(parallelOperator,detailsMap,resourceManager);    for (    PartitionRebalanceDetailsImpl details : serialOperator.getDetailSet()) {      details.setPartitionMemberDetailsBefore(model.getPartitionedMemberDetails(details.getRegionPath()));    }    director.initialize(model);    for (; ; ) {      if (cancelled.get()) {        return Collections.emptySet();      }      if (membershipChange) {        membershipChange=false;        debug("Rebalancing {} detected membership changes. Refetching details",leaderRegion);        if (this.stats != null) {          this.stats.incRebalanceMembershipChanges(1);        }        model.waitForOperations();        detailsMap=fetchDetails(cache);        model=buildModel(parallelOperator,detailsMap,resourceManager);        director.membershipChanged(model);      }      leaderRegion.checkClosed();      cache.getCancelCriterion().checkCancelInProgress(null);      if (logger.isDebugEnabled()) {        logger.debug("Rebalancing {} Model:{}\n",leaderRegion,model);      }      if (!director.nextStep()) {        break;      }    }    debug("Rebalancing {} complete. Model:{}\n",leaderRegion,model);    long end=System.nanoTime();    for (    PartitionRebalanceDetailsImpl details : serialOperator.getDetailSet()) {      if (!simulate) {        details.setTime(end - start);      }      details.setPartitionMemberDetailsAfter(model.getPartitionedMemberDetails(details.getRegionPath()));    }    return Collections.<PartitionRebalanceInfo>unmodifiableSet(serialOperator.getDetailSet());  }  finally {    if (lock != null) {      try {        lock.unlock();      } catch (      CancelException e) {      }catch (      Exception e) {        logger.error(LocalizedMessage.create(LocalizedStrings.PartitionedRegionRebalanceOp_UNABLE_TO_RELEASE_RECOVERY_LOCK),e);      }    }    try {      if (isRebalance) {        InternalResourceManager.getResourceObserver().rebalancingFinished(targetRegion);      } else {        InternalResourceManager.getResourceObserver().recoveryFinished(targetRegion);      }    } catch (    Exception e) {      logger.error(LocalizedMessage.create(LocalizedStrings.PartitionedRegionRebalanceOp_ERROR_IN_RESOURCE_OBSERVER),e);    }    try {      leaderRegion.getRegionAdvisor().removeMembershipListener(listener);    } catch (    Exception e) {      logger.error(LocalizedMessage.create(LocalizedStrings.PartitionedRegionRebalanceOp_ERROR_IN_RESOURCE_OBSERVER),e);    }  }}  }
class C{  public Bundler putParcelable(String key,Parcelable value){  bundle.putParcelable(key,value);  return this;}  }
class C{  public TimeChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  super(dataset,renderer);}  }
class C{  public void fill(int fromIndex,int toIndex,long val){  if (toIndex > _pos) {    ensureCapacity(toIndex);    _pos=toIndex;  }  Arrays.fill(_data,fromIndex,toIndex,val);}  }
class C{  public void sendMessage(String[] recipients,String subject,Message msg){  impl.sendMessage(recipients,subject,msg);}  }
class C{  public void benchHasChildMatchAll(){  QueryBuilder lookupQuery=matchAllQuery();  QueryBuilder mainQuery=matchAllQuery();  FilterJoinBuilder stringFilter=QueryBuilders.filterJoin("id").indices(CHILD_INDEX).types(CHILD_TYPE).path("pid").query(lookupQuery).termsEncoding(TermsByQueryRequest.TermsEncoding.LONG);  FilterJoinBuilder longFilter=QueryBuilders.filterJoin("num").indices(CHILD_INDEX).types(CHILD_TYPE).path("num").query(lookupQuery).termsEncoding(TermsByQueryRequest.TermsEncoding.LONG);  FilterJoinBuilder intFilter=QueryBuilders.filterJoin("num").indices(CHILD_INDEX).types(CHILD_TYPE).path("num").query(lookupQuery).termsEncoding(TermsByQueryRequest.TermsEncoding.INTEGER);  FilterJoinBuilder bloomNumFilter=QueryBuilders.filterJoin("num").indices(CHILD_INDEX).types(CHILD_TYPE).path("num").query(lookupQuery).termsEncoding(TermsByQueryRequest.TermsEncoding.BLOOM);  FilterJoinBuilder bloomStringFilter=QueryBuilders.filterJoin("id").indices(CHILD_INDEX).types(CHILD_TYPE).path("pid").query(lookupQuery).termsEncoding(TermsByQueryRequest.TermsEncoding.BLOOM);  long tookString=0;  long tookLong=0;  long tookInt=0;  long tookBloomNum=0;  long tookBloomString=0;  long expected=NUM_PARENTS;  warmFieldData("id","pid");  warmFieldData("num","num");  log("==== HAS CHILD MATCH-ALL ====");  for (int i=0; i < NUM_QUERIES; i++) {    tookString+=runQuery("string",i,PARENT_INDEX,expected,filteredQuery(mainQuery,stringFilter));    tookLong+=runQuery("long",i,PARENT_INDEX,expected,filteredQuery(mainQuery,longFilter));    tookInt+=runQuery("int",i,PARENT_INDEX,expected,filteredQuery(mainQuery,intFilter));    tookBloomNum+=runQuery("bloom_num",i,PARENT_INDEX,expected,filteredQuery(mainQuery,bloomNumFilter));    tookBloomString+=runQuery("bloom_string",i,PARENT_INDEX,expected,filteredQuery(mainQuery,bloomStringFilter));  }  log("string: " + (tookString / NUM_QUERIES) + "ms avg");  log("long  : " + (tookLong / NUM_QUERIES) + "ms avg");  log("int   : " + (tookInt / NUM_QUERIES) + "ms avg");  log("bloom_num   : " + (tookBloomNum / NUM_QUERIES) + "ms avg");  log("bloom_string   : " + (tookBloomString / NUM_QUERIES) + "ms avg");  log("");}  }
class C{  public static final String unescapeXml(final String input){  return UNESCAPE_XML.translate(input);}  }
class C{  private boolean initPhrasePositions() throws IOException {  end=Integer.MIN_VALUE;  if (!checkedRpts) {    return initFirstTime();  }  if (!hasRpts) {    initSimple();    return true;  }  return initComplex();}  }
class C{  public Deathplace(double latitude,double longitude){  super(latitude,longitude);}  }
class C{  private void invalidateInMultiplePartitionedRegion(int startIndexForRegion,int endIndexForRegion,int startIndexForInvalidate,int endIndexForInvalidate) throws Throwable {  prPrefix="testMemoryOfPartitionRegion";  int AsyncInvocationArrSize=4;  AsyncInvocation[] async=new AsyncInvocation[AsyncInvocationArrSize];  int delta=(endIndexForInvalidate - startIndexForInvalidate) / 4;  async[0]=vm[0].invokeAsync(invalidatesInMultiplePartitionRegion(prPrefix,startIndexForInvalidate,startIndexForInvalidate + 1 * delta,startIndexForRegion,endIndexForRegion));  async[1]=vm[1].invokeAsync(invalidatesInMultiplePartitionRegion(prPrefix,startIndexForInvalidate + 1 * delta,startIndexForInvalidate + 2 * delta,startIndexForRegion,endIndexForRegion));  async[2]=vm[2].invokeAsync(invalidatesInMultiplePartitionRegion(prPrefix,startIndexForInvalidate + 2 * delta,startIndexForInvalidate + 3 * delta,startIndexForRegion,endIndexForRegion));  async[3]=vm[3].invokeAsync(invalidatesInMultiplePartitionRegion(prPrefix,startIndexForInvalidate + 3 * delta,endIndexForInvalidate,startIndexForRegion,endIndexForRegion));  for (int count=0; count < AsyncInvocationArrSize; count++) {    ThreadUtils.join(async[count],30 * 1000);  }  for (int count=0; count < AsyncInvocationArrSize; count++) {    if (async[count].exceptionOccurred()) {      Assert.fail("Exception during " + count,async[count].getException());    }  }}  }
class C{  public boolean isSmscDelReceiptSuccessAndFailureRequested(){  return isSmscDelReceiptSuccessAndFailureRequested(registeredDelivery);}  }
class C{  @Override protected void generatePseudoKingCastlingMoves(long fromBB,PriorityMoveList moves){  FischerRandomUtils.generatePseudoKingCastlingMoves(this,fromBB,moves,initialKingFile,initialShortRookFile,initialLongRookFile);}  }
class C{  public void listBreakpoints(TreeMap<Integer,BreakPointInstruction> breakpoints){  if (breakpoints == null) {    System.out.println("No breakpoints are set for this program.");    return;  }  int currBreakpoint=1;  int numVisibleBreakpoints=0;  for (  Entry<Integer,BreakPointInstruction> e : breakpoints.entrySet()) {    Integer lineNumber=e.getKey();    BreakPointInstruction inst=e.getValue();    if (inst.getBPInstructionStatus() == BPINSTRUCTION_STATUS.ENABLED) {      System.out.format("Breakpoint %2d, at line %4d (%s)\n",currBreakpoint++,lineNumber,"enabled");      numVisibleBreakpoints++;    } else     if (inst.getBPInstructionStatus() == BPINSTRUCTION_STATUS.DISABLED) {      System.out.format("Breakpoint %2d, at line %4d (%s)\n",currBreakpoint++,lineNumber,"disabled");      numVisibleBreakpoints++;    }  }  if (numVisibleBreakpoints == 0) {    System.out.println("No breakpoints are set for this program.");  }}  }
class C{  public int scanBackward(int start,int bound,StopCondition condition){  if (bound == UNBOUND) {    bound=-1;  }  assert (bound >= -1);  assert (start < _document.getLength());  try {    _pos=start;    while (_pos > bound) {      _char=_document.getChar(_pos);      if (condition.stop(_char,_pos,false)) {        return _pos;      }      _pos--;    }  } catch (  BadLocationException e) {  }  return NOT_FOUND;}  }
class C{  public Status(){}  }
class C{  public char last(){  pos=offset + count;  if (count != 0) {    pos-=1;    return array[pos];  }  return DONE;}  }
class C{  public DtlsException(String message,InetSocketAddress peer,Throwable cause){  super(message,cause);  this.peer=peer;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.PROPERTY_SETTER_DECLARATION__ANNOTATION_LIST:    return annotationList != null;}return super.eIsSet(featureID);}  }
class C{  public static FileEncodedImage create(String fileName,int width,int height){  return new FileEncodedImage(fileName,width,height,true);}  }
class C{  public static String formatAlertOutput(JsonObject alertObj,String wellId,String alertType){  return "Well" + wellId + " alert, "+ alertType+ " value is "+ alertObj.get(alertType).getAsInt();}  }
class C{  public synchronized void dumpXml(String filename) throws IOException {  OutputStream outputStream=null;  try {    outputStream=new FileOutputStream(filename,false);    dumpXml(outputStream);  }  finally {    if (outputStream != null) {      outputStream.close();    }  }}  }
class C{  public void pauseJobs(GroupMatcher<JobKey> matcher) throws SchedulerException {  sched.pauseJobs(matcher);}  }
class C{  public XYLocation locationAt(Direction direction){  if (direction.equals(Direction.North)) {    return north();  }  if (direction.equals(Direction.South)) {    return south();  }  if (direction.equals(Direction.East)) {    return east();  }  if (direction.equals(Direction.West)) {    return west();  } else {    throw new RuntimeException("Unknown direction " + direction);  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  private void init(Context context,AttributeSet attrs,int defStyleAttr){  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.SignatureView,defStyleAttr,R.style.Widget_Backbone_SignatureView);  int signatureColor=a.getColor(R.styleable.SignatureView_signatureColor,Color.BLACK);  sigPrintColor=a.getColor(R.styleable.SignatureView_signaturePrintColor,Color.BLACK);  int defSignatureStroke=(int)(getResources().getDisplayMetrics().density * 1);  int signatureStroke=a.getDimensionPixelSize(R.styleable.SignatureView_signatureStrokeSize,defSignatureStroke);  hintText=a.getString(R.styleable.SignatureView_hintText);  hintTextColor=a.getColor(R.styleable.SignatureView_hintTextColor,Color.LTGRAY);  int defHintTextSize=(int)(getResources().getDisplayMetrics().density * 14);  int hintTextSize=a.getDimensionPixelSize(R.styleable.SignatureView_hintTextSize,defHintTextSize);  guidelineColor=a.getColor(R.styleable.SignatureView_guidelineColor,hintTextColor);  int defGuidelineMargin=(int)(getResources().getDisplayMetrics().density * 12);  guidelineMargin=a.getDimensionPixelSize(R.styleable.SignatureView_guidelineMargin,defGuidelineMargin);  int defGuidelineHeight=(int)(getResources().getDisplayMetrics().density * 1);  guidelineHeight=a.getDimensionPixelSize(R.styleable.SignatureView_guidelineHeight,defGuidelineHeight);  a.recycle();  sigPaint.setAntiAlias(true);  sigPaint.setColor(signatureColor);  sigPaint.setStyle(Paint.Style.STROKE);  sigPaint.setStrokeJoin(Paint.Join.ROUND);  sigPaint.setStrokeCap(Paint.Cap.ROUND);  sigPaint.setPathEffect(new CornerPathEffect(20));  sigPaint.setStrokeWidth(signatureStroke);  hintPaint.setAntiAlias(true);  hintPaint.setColor(hintTextColor);  hintPaint.setStyle(Paint.Style.FILL);  hintPaint.setTextSize(hintTextSize);}  }
class C{  private boolean doAcquireSharedNanos(long arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return true;        }      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void testSchemaTypeDtd(){  assertUnsupported("schema-type","http://www.w3.org/TR/REC-xml");}  }
class C{  public final SecretKey translateKey(SecretKey key) throws InvalidKeyException {  if (serviceIterator == null) {    return spi.engineTranslateKey(key);  }  Exception failure=null;  SecretKeyFactorySpi mySpi=spi;  do {    try {      return mySpi.engineTranslateKey(key);    } catch (    Exception e) {      if (failure == null) {        failure=e;      }      mySpi=nextSpi(mySpi);    }  } while (mySpi != null);  if (failure instanceof InvalidKeyException) {    throw (InvalidKeyException)failure;  }  throw new InvalidKeyException("Could not translate key",failure);}  }
class C{  public Float evaluate(float fraction,Number startValue,Number endValue){  float startFloat=startValue.floatValue();  return startFloat + fraction * (endValue.floatValue() - startFloat);}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(this.opt(key));}  }
class C{  public static void removeNotUsedNodes(Network network){  for (  Node n : new HashSet<>(network.getNodes().values())) {    if (n.getInLinks().size() == 0 && n.getOutLinks().size() == 0) {      network.removeNode(n.getId());    }  }}  }
class C{  public CodelessProjectWizardVisualPanel1(CodelessProjectWizardWizardPanel1 panel){  initComponents();  this.panel=panel;  enableAssetsPath(false);}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus deactivateInstance(String instanceId,ProvisioningSettings settings) throws APPlatformException {  LOGGER.info("deactivateInstance({})",LogAndExceptionConverter.getLogText(instanceId,settings));  try {    PropertyHandler ph=PropertyHandler.withSettings(settings);    ph.setOperation(Operation.EC2_ACTIVATION);    ph.setState(FlowState.DEACTIVATION_REQUESTED);    InstanceStatus result=new InstanceStatus();    result.setChangedParameters(settings.getParameters());    return result;  } catch (  Throwable t) {    throw LogAndExceptionConverter.createAndLogPlatformException(t,Context.DEACTIVATION);  }}  }
class C{  public static byte[] select(String aid){  byte aidLength=(byte)(aid.length() / 2);  String selectApdu=SELECT_HEADER + encodeHex(aidLength) + aid;  return decodeHex(selectApdu);}  }
class C{  void createTodo(YokeRequest request){  request.put("isInserting",true);  request.response().render("todo-form.hbs");}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private static Object toSet(Object value,Class<?> parameterType) throws GfJsonException {  try {    JSONArray array=(JSONArray)value;    Set set=new HashSet();    for (int i=0; i < array.length(); i++) {      Object element=array.get(i);      if (isPrimitiveOrWrapper(element.getClass())) {        set.add(element);      } else       throw new GfJsonException("Only primitive types are supported in set type for input commands");    }    return set;  } catch (  JSONException e) {    throw new GfJsonException(e);  }}  }
class C{  public ZyGraphViewSettings(final GraphSettingsConfigItem type){  Preconditions.checkNotNull(type,"IE01527: Type argument can't be null");  m_layoutSettings=new ZyGraphLayoutSettings(type);  m_proximitySettings=new ZyGraphProximitySettings(type);  m_searchSettings=new ZyGraphSearchSettings(type);  m_edgeSettings=new ZyGraphEdgeSettings(type);  m_displaySettings=new ZyGraphDisplaySettings(type);  m_mouseSettings=new ZyGraphMouseSettings(type);}  }
class C{  public SimpleEdgePortrayal3D(Color fromColor,Color toColor,Color labelColor,Font labelFont){  this.fromColor=fromColor;  this.toColor=toColor;  this.labelColor=labelColor;  if (labelFont == null)   labelFont=new Font("SansSerif",Font.PLAIN,FONT_SIZE);  this.labelFont=labelFont;  showLabels=(labelColor != null);  if (this.labelColor == null)   this.labelColor=Color.white;}  }
class C{  @VisibleForTesting ImmutableList<OperationMetaData> operations(){  return ImmutableList.<OperationMetaData>builder().addAll(coreOperations).addAll(imgprocOperation).build();}  }
class C{  public int size(){  return m_size;}  }
class C{  public PrepareException(final String message,final int errorCode,final String sqlState){  super(message,errorCode,sqlState);}  }
class C{  public void testComputeClasspathForLibrary() throws CoreException, UnsupportedEncodingException {  final IPath projectRelativeJarPath=new Path("lib/test.jar");  final String folderName="folder-library";  addAndCreateJarLibraryEntry(javaProjectA,projectRelativeJarPath);  addAndCreateFolderLibraryEntry(javaProjectA,folderName);  List<File> actualCp=getListOfFiles(GWTCompileRunner.computeClasspath(javaProjectA));  List<File> expectedCp=new ArrayList<File>();  expectedCp.add(getFile(javaProjectA.getProject(),projectRelativeJarPath.toOSString()));  expectedCp.add(getFile(javaProjectA.getProject(),folderName));  assertEquals(expectedCp,actualCp);}  }
class C{  public java.util.Collection<OMGraphic> values(){  return graphicHash.values();}  }
class C{  public void addRenderingHints(Map<?,?> hints){  mGraphics.addRenderingHints(hints);}  }
class C{  public void remove(ByteString namespace,ByteString key){  if (namespace != null && key != null) {    SetMultimap<ByteString,ByteString> namespaceData=contents.get(namespace);    if (namespaceData != null) {      namespaceData.removeAll(key);      if (namespaceData.isEmpty()) {        contents.remove(namespace);      }    }  }}  }
class C{  public center addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public LocalWordCountingSampleService(String docFactoryPath,Function<Operation,String> contentsMapper){  this.docFactoryPath=docFactoryPath;  this.contentsMapper=contentsMapper;}  }
class C{  private JFreeChart createBarChart(){  JFreeChart chart=ChartFactory.createBarChart(null,null,null,createBarDataset(),PlotOrientation.VERTICAL,false,false,false);  AbstractAttributeStatisticsModel.setDefaultChartFonts(chart);  chart.setBackgroundPaint(null);  chart.setBackgroundImageAlpha(0.0f);  CategoryPlot plot=(CategoryPlot)chart.getPlot();  plot.setRangeGridlinesVisible(false);  plot.setDomainGridlinesVisible(false);  plot.setOutlineVisible(false);  plot.setRangeZeroBaselineVisible(false);  plot.setDomainGridlinesVisible(false);  plot.setBackgroundPaint(COLOR_INVISIBLE);  plot.setBackgroundImageAlpha(0.0f);  BarRenderer renderer=(BarRenderer)plot.getRenderer();  renderer.setSeriesPaint(0,AttributeGuiTools.getColorForValueType(Ontology.NOMINAL));  renderer.setBarPainter(new StandardBarPainter());  renderer.setDrawBarOutline(true);  renderer.setShadowVisible(false);  return chart;}  }
class C{  private void unregisterListenerService(ComponentName name,int userid){  checkCallerIsSystem();synchronized (mNotificationList) {    final int N=mListeners.size();    for (int i=N - 1; i >= 0; i--) {      final NotificationListenerInfo info=mListeners.get(i);      if (name.equals(info.component) && info.userid == userid) {        mListeners.remove(i);        if (info.connection != null) {          try {            mContext.unbindService(info.connection);          } catch (          IllegalArgumentException ex) {            Slog.e(TAG,"Listener " + name + " could not be unbound: "+ ex);          }        }      }    }  }}  }
class C{  public static Predicates2<String,String> notEndsWith(){  return NOT_ENDS_WITH;}  }
class C{  public Cursor query(SQLiteDatabase db,String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String sortOrder,String limit,CancellationSignal cancellationSignal){  if (mTables == null) {    return null;  }  if (mStrict && selection != null && selection.length() > 0) {    String sqlForValidation=buildQuery(projectionIn,"(" + selection + ")",groupBy,having,sortOrder,limit);    validateQuerySql(db,sqlForValidation,cancellationSignal);  }  String sql=buildQuery(projectionIn,selection,groupBy,having,sortOrder,limit);  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.d(TAG,"Performing query: " + sql);  }  return db.rawQueryWithFactory(mFactory,sql,selectionArgs,SQLiteDatabase.findEditTable(mTables),cancellationSignal);}  }
class C{  private void shiftSeqData(int start,int len,int shift){  if (shift > 0) {    ensureFreeBytes(shift);  }  System.arraycopy(buf,start,buf,start + shift,len);  offset+=shift;}  }
class C{  public static DataStore constructDataStore(Map<String,String> operatorProperties) throws PlanGenException {  String directoryStr=OperatorBuilderUtils.getRequiredProperty(DATA_DIRECTORY,operatorProperties);  String schemaStr=OperatorBuilderUtils.getRequiredProperty(SCHEMA,operatorProperties);  JSONObject schemaJsonObject=new JSONObject(schemaStr);  String attributeNamesStr=schemaJsonObject.getString(ATTRIBUTE_NAMES);  String attributeTypesStr=schemaJsonObject.getString(ATTRIBUTE_TYPES);  List<String> attributeNames=splitStringByComma(attributeNamesStr);  List<String> attributeTypes=splitStringByComma(attributeTypesStr);  PlanGenUtils.planGenAssert(attributeNames.size() == attributeTypes.size(),"attribute names and attribute types are not coherent");  PlanGenUtils.planGenAssert(attributeTypes.stream().allMatch(null),"attribute type is not valid");  List<Attribute> attributeList=IntStream.range(0,attributeNames.size()).mapToObj(null).collect(Collectors.toList());  Schema schema=new Schema(attributeList.stream().toArray(null));  DataStore dataStore=new DataStore(directoryStr,schema);  return dataStore;}  }
class C{  protected final void showMature(){  mature.show();}  }
class C{  public boolean mouseDragged(MouseEvent e){  if (!active) {    return false;  }  setCurrentMouseEvent(e);  GeometryOfInterest goi=getClickInterest();  if (goi != null) {    setClickInterest(null);  }  return mouseMoved(e) && consumeEvents;}  }
class C{  static void hang(){  try {    Thread.currentThread().sleep(10 * 60 * 1000);  } catch (  InterruptedException exc) {  }}  }
class C{  public JsonArray add(String value){  values.add(valueOf(value));  return this;}  }
class C{  public void close() throws IOException {  if (this.currBit != 0) {    for (int i=this.currBit; i < this.bitSet.length; i++) {      this.bitSet[i]=0;    }    this.currBit=0;    writeCurrentBitSet();    nextPixel();  }  super.close();}  }
class C{  public void registerService(Service serviceImplementation){  addService(true,serviceImplementation);}  }
class C{  public ResponseHeaderMeta(List<String> keys,boolean getAll){  super();  this.keys=keys;  this.getAll=getAll;}  }
class C{  private static void initPref(@Nullable Preference pref){  if (pref != null) {    pref.setOnPreferenceChangeListener(sPrefListener);    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(pref.getContext());    updatePrefSummary(pref,prefs.getAll().get(pref.getKey()));  }}  }
class C{  public MethodParameter(Method method,int parameterIndex,int nestingLevel){  Assert.notNull(method,"Method must not be null");  this.method=method;  this.parameterIndex=parameterIndex;  this.nestingLevel=nestingLevel;  this.constructor=null;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static void shutDown(){  sDraweeControllerBuilderSupplier=null;  SimpleDraweeView.shutDown();  ImagePipelineFactory.shutDown();}  }
class C{  public TLAModelFilesCreationOperation(IProject project,IPath rootModulePath){  this.rootModulePath=rootModulePath;  this.project=project;}  }
class C{  @Benchmark public void javaBean(){  run();}  }
class C{  public KeyChange(String newKeyData,DSAPublicKey changeKey,boolean allowsUnsignedChanges,boolean allowsPublicVisibility,byte[] msg,byte[] sig,long epoch,long counter){  this.newKeyData=newKeyData;  this.newChangeKey=changeKey;  this.allowsUnsignedChanges=allowsUnsignedChanges;  this.allowsPublicVisibility=allowsPublicVisibility;  this.msg=msg == null ? null : Arrays.copyOf(msg,msg.length);  this.sig=sig == null ? null : Arrays.copyOf(sig,sig.length);  this.epoch=epoch;  this.counter=counter;  Logging.log("Made a KC object with sig = " + Arrays.toString(this.sig));}  }
class C{  public static void downloadEpisode(final Context context,int episodeId){  Intent intent=new Intent(context,DownloadService.class);  intent.setAction(ACTION_MANUAL_DOWNLOAD);  intent.putExtra(PARAM_EPISODE_ID,episodeId);  context.startService(intent);}  }
class C{  public Enumeration listOptions(){  Vector newVector=new Vector();  newVector.addElement(new Option("\tSpecify list of columns to use as MEKA class attributes. 'first' and 'last' are valid\n" + "\tindexes. (default: last)","R",1,"-R <index1,index2-index4,...>"));  return newVector.elements();}  }
class C{  private void addLocalVar(VarSymbol v){  int adr=v.adr;  lvar=ArrayUtils.ensureCapacity(lvar,adr + 1);  Assert.checkNull(lvar[adr]);  if (pendingJumps != null) {    resolvePending();  }  lvar[adr]=new LocalVar(v);  state.defined.excl(adr);}  }
class C{  private Object readResolve(){  return ToStringStyle.DEFAULT_STYLE;}  }
class C{  public void atomicWriteOnce(final byte[] additionalData,final int logType,final byte[] content){  if (createEvidence(additionalData,logType)) {    writeEvidence(content);    if (Cfg.DEBUG) {      Check.ensures(getEncData().length % 16 == 0,"wrong len");    }    close();  }}  }
class C{  private static ListCriteria createCategoryCriteria(int offset,int limit,String categoryId,Sorting sorting){  ListCriteria crit=new ListCriteria();  crit.setOffset(offset);  crit.setLimit(limit);  crit.setFilter(null);  crit.setCategoryId(categoryId);  crit.setSorting(sorting);  return crit;}  }
class C{  protected BigDecimalStringType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  protected void sequence_ExpressionAnnotationList(ISerializationContext context,ExpressionAnnotationList semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static Address zero(){  return null;}  }
class C{  public boolean postData(InputStream data,Long length,OutputStream output,String type,URL url){  if (mockMode)   return true;  boolean success=true;  if (type == null)   type=DEFAULT_CONTENT_TYPE;  HttpURLConnection urlc=null;  try {    try {      urlc=(HttpURLConnection)url.openConnection();      try {        urlc.setRequestMethod("POST");      } catch (      ProtocolException e) {        fatal("Shouldn't happen: HttpURLConnection doesn't support POST??" + e);      }      urlc.setDoOutput(true);      urlc.setDoInput(true);      urlc.setUseCaches(false);      urlc.setAllowUserInteraction(false);      urlc.setRequestProperty("Content-type",type);      basicAuth(urlc);      if (null != length) {        urlc.setFixedLengthStreamingMode(length);      } else {        urlc.setChunkedStreamingMode(-1);      }      urlc.connect();    } catch (    IOException e) {      fatal("Connection error (is Solr running at " + solrUrl + " ?): "+ e);      success=false;    }catch (    Exception e) {      fatal("POST failed with error " + e.getMessage());    }    try (final OutputStream out=urlc.getOutputStream()){      pipe(data,out);    } catch (    IOException e) {      fatal("IOException while posting data: " + e);    }    try {      success&=checkResponseCode(urlc);      try (final InputStream in=urlc.getInputStream()){        pipe(in,output);      }     } catch (    IOException e) {      warn("IOException while reading response: " + e);      success=false;    }catch (    GeneralSecurityException e) {      fatal("Looks like Solr is secured and would not let us in. Try with another user in '-u' parameter");    }  }  finally {    if (urlc != null)     urlc.disconnect();  }  return success;}  }
class C{  public Matrix addAssign(final Matrix another){  QL.require(rows() == another.rows() && cols() == another.cols(),MATRIX_IS_INCOMPATIBLE);  if (this.addr.isContiguous() && another.addr.isContiguous()) {    for (int i=0; i < size(); i++) {      this.$[i]+=another.$[i];    }  } else {    int addr=0;    final Address.MatrixAddress.MatrixOffset toff=this.addr.offset();    final Address.MatrixAddress.MatrixOffset aoff=another.addr.offset();    for (int row=0; row < rows(); row++) {      toff.setRow(row);      aoff.setRow(row);      for (int col=0; col < cols(); col++) {        this.$[toff.op()]+=another.$[aoff.op()];        addr++;        toff.nextCol();        aoff.nextCol();      }    }  }  return this;}  }
class C{  private void performPolicyBookKeeping(Set<String> policyNames,URI storageSystemURI) throws IOException {  URIQueryResultList policyList=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceFASTPolicyConstraint(storageSystemURI),policyList);  Iterator<AutoTieringPolicy> policyIterator=_dbClient.queryIterativeObjects(AutoTieringPolicy.class,policyList,true);  while (policyIterator.hasNext()) {    AutoTieringPolicy policyObject=policyIterator.next();    String policyName=policyObject.getPolicyName();    if (Constants.START_HIGH_THEN_AUTO_TIER_POLICY_NAME.equals(policyName) || !Strings.isNullOrEmpty(policyObject.getVmaxSLO())) {      continue;    }    if (!policyNames.contains(policyName) && !policyHasVolume(policyObject)) {      policyObject.setPolicyEnabled(false);      if (policyObject.getPools() != null) {        policyObject.getPools().clear();      } else {        _logger.info("Policy {} does not have pools",policyObject.getId());      }      _logger.info("Marking Policy {}({}) inactive as it is not discovered",policyName,policyObject.getId());      policyObject.setInactive(true);      _dbClient.updateObject(policyObject);    }  }}  }
class C{  public ClientNotReadyException(String msg){  super(msg);}  }
class C{  public boolean isInNative(){  return inNative;}  }
class C{  @Override public void initialize(){  super.initialize();  setRoot();}  }
class C{  private void handleCustomerRegistration(long orgKey,long triggerDefinitionKey) throws Exception {  ResourceHolder holder=getTriggerProcesses(triggerDefinitionKey);  ResultSet processes=holder.getRs();  while (processes.next()) {    long triggerProcessKey=writeOrgKeyIdentifierForProcess(orgKey,processes);    writeRegistrationIdentifiers(triggerProcessKey);  }  holder.close();}  }
class C{  public AWTFontFamily(String familyName){  this(new GVTFontFace(familyName));}  }
class C{  public void add(final byte operand){  this.value+=operand;}  }
class C{  private Element firstElement(Object obj){  if (obj == null) {    return null;  }  if (obj instanceof Element) {    return (Element)obj;  } else {    Collection<Element> elementCollection=castElementCollection(obj);    if (!elementCollection.isEmpty()) {      sublistIterator=elementCollection.iterator();      return sublistIterator.next();    }  }  return null;}  }
class C{  public static byte[] hashToBytes(long[] data,long seed){  if ((data == null) || (data.length == 0)) {    return null;  }  return toByteArray(hash(data,seed));}  }
class C{  private void showContextMenu(final PInputEvent event){  event.setHandled(true);  JPopupMenu contextMenu=networkPanel.getContextMenu();  Point2D canvasPosition=event.getCanvasPosition();  contextMenu.show(networkPanel,(int)canvasPosition.getX(),(int)canvasPosition.getY());  networkPanel.getCanvas().getCamera().localToView(canvasPosition);  networkPanel.setLastClickedPosition(canvasPosition);}  }
class C{  public Prepared prepare(String sql,boolean rightsChecked){  Parser parser=new Parser(this);  parser.setRightsChecked(rightsChecked);  return parser.prepare(sql);}  }
class C{  public void draw(Canvas c,Rect bounds){  mCirclePaint.setColor(mBackgroundColor);  mCirclePaint.setAlpha(mAlpha);  c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mArcPaint.setColor(mColors[mColorIndex]);  mArcPaint.setAlpha(mAlpha);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mArcPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);}  }
class C{  private static long writeRecords(DistributedLogManager dlm,int numLogSegments,int numRecordsPerLogSegment,long startTxId,boolean emptyRecord) throws IOException {  long txid=startTxId;  for (long i=0; i < numLogSegments; i++) {    BKSyncLogWriter writer=(BKSyncLogWriter)dlm.startLogSegmentNonPartitioned();    for (long j=1; j <= numRecordsPerLogSegment; j++) {      if (emptyRecord) {        writer.write(DLMTestUtil.getEmptyLogRecordInstance(txid++));      } else {        writer.write(DLMTestUtil.getLargeLogRecordInstance(txid++));      }    }    writer.closeAndComplete();  }  return txid;}  }
class C{  public static void stopApplication(int port,ProcessThread processThread) throws Throwable {  if (processThread == null) {    System.out.println("RunnerUtil.stopApplication ignored since proc is null");    return;  }  try {    System.out.println("RunnerUtil.stopApplication waiting to for shutdown");    OutputAnalyzer output=ProcessTools.executeTestJvm("-classpath",System.getProperty("test.class.path","."),"Shutdown",Integer.toString(port));    output.shouldHaveExitValue(0);    processThread.joinAndThrow();    processThread.getOutput().shouldHaveExitValue(0);  } catch (  Throwable t) {    System.out.println("RunnerUtil.stopApplication failed. Will kill it hard: " + t);    processThread.stopProcess();    throw t;  }}  }
class C{  @Override protected Object onGetDefaultValue(TypedArray a,int index){  int colorInt;  String mHexDefaultValue=a.getString(index);  if (mHexDefaultValue != null && mHexDefaultValue.startsWith("#")) {    colorInt=convertToColorInt(mHexDefaultValue);    return colorInt;  } else {    return a.getColor(index,Color.BLACK);  }}  }
class C{  public BEFileChooserUIWin(JFileChooser filechooser){  super(filechooser);}  }
class C{  public void closeBoard(){  if (mBoard != null) {    mBoard.close(true);  }}  }
class C{  public static StdTypeList make(Type type0,Type type1){  StdTypeList result=new StdTypeList(2);  result.set(0,type0);  result.set(1,type1);  return result;}  }
class C{  private static void checkIndexForBinarySearch(int length,int start,int end){  if (start > end) {    throw new IllegalArgumentException();  }  if (length < end || 0 > start) {    throw new ArrayIndexOutOfBoundsException();  }}  }
class C{  private static void removeInstrumentationFromOrig(IR ir,HashMap<BasicBlock,BasicBlock> origToDupMap){  for (  BasicBlock origBlock : origToDupMap.keySet()) {    for (Enumeration<Instruction> ie=origBlock.forwardInstrEnumerator(); ie.hasMoreElements(); ) {      Instruction i=ie.nextElement();      if (isInstrumentationInstruction(i) || (isYieldpoint(i) && ir.options.ADAPTIVE_REMOVE_YP_FROM_CHECKING)) {        if (DEBUG)         VM.sysWrite("Removing " + i + "\n");        i.remove();      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:00.814 -0400",hash_original_method="4E6C71D5BCD272CA07436B720BF5B1F8",hash_generated_method="EAB759B5144D2E7BBDE49353860A94CD") public void addResult(AtCommandResult result){  if (result != null) {    appendWithCrlf(mResponse,result.mResponse.toString());    mResultCode=result.mResultCode;  }}  }
class C{  @Override public void close() throws IOException {  out.close();}  }
class C{  protected void createPath(){}  }
class C{  public T firstItem(){  if (mDataList == null || mDataList.size() == 0) {    return null;  }  return mDataList.get(0);}  }
class C{  public void notifyDataSetChanged(){  listAdapterObservable.notifyChanged();}  }
class C{  protected void recordSelected(int key){  if (m_M_Product_ID != key) {    refresh();  }  p_detailTaskPane.setCollapsed(false);  return;}  }
class C{  public NEWord(Word w,NEWord p,String type){  super(w.form,w.partOfSpeech,w.lemma,w.wordSense,p,w.start,w.end);  form=w.form;  originalForm=w.form;  neLabel=type;  neTypeLevel1=null;}  }
class C{  public void paintTabbedPaneContentBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  protected void processFileType(String file){}  }
class C{  public static Set<String> commaDelimitedListToSet(String str){  Set<String> set=new TreeSet<String>();  String[] tokens=commaDelimitedListToStringArray(str);  for (  String token : tokens) {    set.add(token);  }  return set;}  }
class C{  public DnsDiscovery(String[] dnsSeeds,NetworkParameters params){  super(params,buildDiscoveries(params,dnsSeeds));}  }
class C{  public DetectorResult detect() throws NotFoundException, FormatException {  return detect(null);}  }
class C{  public List<TaskHandle> leaseTasks(Duration leaseDuration){  try {    return queue.leaseTasks(leaseDuration.getMillis(),MILLISECONDS,writeBatchSize);  } catch (  TransientFailureException|DeadlineExceededException e) {    logger.severe(e,"Failed leasing tasks too fast");    return ImmutableList.of();  }}  }
class C{  private void createIdArrays(){  final Vocabulary tmVocab=sa.getVocabulary();  int tmSize=tmVocab.size();  tm2Sys=new int[tmSize];  IntStream.range(0,tmSize).parallel().forEach(null);  final int sysSize=Vocabulary.systemSize();  sys2TM=new int[sysSize];  IntStream.range(0,sysSize).parallel().forEach(null);}  }
class C{  private static Options createOptions(){  Options options=new Options();  options.addOption("v","verbose",false,"verbose");  options.addOption("c","configuration-dir",true,"configuration directory");  options.addOption("h","help",false,"help");  return options;}  }
class C{  public void addSphere(float x,float y,float z,float r,int segs,int rings,int textureW,int textureH){  if (segs < 3)   segs=3;  rings++;  PositionTextureVertex[] tempVerts=new PositionTextureVertex[segs * (rings - 1) + 2];  TexturedPolygon[] poly=new TexturedPolygon[segs * rings];  tempVerts[0]=new PositionTextureVertex(x,y - r,z,0,0);  tempVerts[tempVerts.length - 1]=new PositionTextureVertex(x,y + r,z,0,0);  float uOffs=1.0F / (textureWidth * 10.0F);  float vOffs=1.0F / (textureHeight * 10.0F);  float texW=textureW / textureWidth - 2F * uOffs;  float texH=textureH / textureHeight - 2F * vOffs;  float segW=texW / segs;  float segH=texH / rings;  float startU=textureOffsetX / textureWidth;  float startV=textureOffsetY / textureHeight;  int currentFace=0;  for (int j=1; j < rings; j++) {    for (int i=0; i < segs; i++) {      float yWidth=MathHelper.cos(-pi / 2 + (pi / rings) * j);      float yHeight=MathHelper.sin(-pi / 2 + (pi / rings) * j);      float xSize=MathHelper.sin((pi / segs) * i * 2F + pi) * yWidth;      float zSize=-MathHelper.cos((pi / segs) * i * 2F + pi) * yWidth;      int curVert=1 + i + segs * (j - 1);      tempVerts[curVert]=new PositionTextureVertex(x + xSize * r,y + yHeight * r,z + zSize * r,0,0);      if (i > 0) {        PositionTextureVertex[] verts;        if (j == 1) {          verts=new PositionTextureVertex[4];          verts[0]=tempVerts[curVert].setTexturePosition(startU + segW * i,startV + segH * j);          verts[1]=tempVerts[curVert - 1].setTexturePosition(startU + segW * (i - 1),startV + segH * j);          verts[2]=tempVerts[0].setTexturePosition(startU + segW * (i - 1),startV);          verts[3]=tempVerts[0].setTexturePosition(startU + segW + segW * i,startV);        } else {          verts=new PositionTextureVertex[4];          verts[0]=tempVerts[curVert].setTexturePosition(startU + segW * i,startV + segH * j);          verts[1]=tempVerts[curVert - 1].setTexturePosition(startU + segW * (i - 1),startV + segH * j);          verts[2]=tempVerts[curVert - 1 - segs].setTexturePosition(startU + segW * (i - 1),startV + segH * (j - 1));          verts[3]=tempVerts[curVert - segs].setTexturePosition(startU + segW * i,startV + segH * (j - 1));        }        poly[currentFace]=new TexturedPolygon(verts);        currentFace++;      }    }    PositionTextureVertex[] verts;    if (j == 1) {      verts=new PositionTextureVertex[4];      verts[0]=tempVerts[1].setTexturePosition(startU + segW * segs,startV + segH * j);      verts[1]=tempVerts[segs].setTexturePosition(startU + segW * (segs - 1),startV + segH * j);      verts[2]=tempVerts[0].setTexturePosition(startU + segW * (segs - 1),startV);      verts[3]=tempVerts[0].setTexturePosition(startU + segW * segs,startV);    } else {      verts=new PositionTextureVertex[4];      verts[0]=tempVerts[1 + segs * (j - 1)].setTexturePosition(startU + texW,startV + segH * j);      verts[1]=tempVerts[segs * (j - 1) + segs].setTexturePosition(startU + texW - segW,startV + segH * j);      verts[2]=tempVerts[segs * (j - 1)].setTexturePosition(startU + texW - segW,startV + segH * (j - 1));      verts[3]=tempVerts[1 + segs * (j - 1) - segs].setTexturePosition(startU + texW,startV + segH * (j - 1));    }    poly[currentFace]=new TexturedPolygon(verts);    currentFace++;  }  for (int i=0; i < segs; i++) {    PositionTextureVertex[] verts=new PositionTextureVertex[3];    int curVert=tempVerts.length - (segs + 1);    verts[0]=tempVerts[tempVerts.length - 1].setTexturePosition(startU + segW * (i + 0.5F),startV + texH);    verts[1]=tempVerts[curVert + i].setTexturePosition(startU + segW * i,startV + texH - segH);    verts[2]=tempVerts[curVert + ((i + 1) % segs)].setTexturePosition(startU + segW * (i + 1),startV + texH - segH);    poly[currentFace]=new TexturedPolygon(verts);    currentFace++;  }  copyTo(tempVerts,poly);}  }
class C{  public boolean isLabelProperty(Object element,String property){  return false;}  }
class C{  protected String composeFilename(SymbolCode code){  String scheme=code.getScheme();  if (SymbologyConstants.SCHEME_TACTICAL_GRAPHICS.equalsIgnoreCase(scheme))   return this.composeFilenameTacticalGraphic(code,DIR_ICON_TACGRP); else   if (SymbologyConstants.SCHEME_METOC.equalsIgnoreCase(scheme))   return this.composeFilenameMetoc(code); else   if (SymbologyConstants.SCHEME_EMERGENCY_MANAGEMENT.equalsIgnoreCase(scheme))   return this.composeFilenameEms(code);  return null;}  }
class C{  default <T>T unwrap(){  return (T)this;}  }
class C{  protected PathWrapper(PathImpl path){  super(path);  _path=path;}  }
class C{  private void hierarchCard(String card,HeaderCardCountingArrayDataInput dis) throws IOException, TruncatedFileException {  this.key=FitsHeaderCardParser.parseCardKey(card);  extractValueCommentFromString(dis,card);}  }
class C{  public SVGOMFlowLineElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  @Override public QueryRegistry clone(){  try {    QueryRegistry qr=(QueryRegistry)super.clone();    qr.map=new HashMap<String,QueryObject<?>>();    qr.map.putAll(map);    return qr;  } catch (  CloneNotSupportedException x) {    throw new IllegalStateException("Clone must be supported",x);  }}  }
class C{  public void pop() throws IOException {  writeCode(POP);}  }
class C{  public String relationForTableNameTipText(){  return "If set to true, the relation name will be used as name for the database table. Otherwise the user has to provide a table name.";}  }
class C{  @Override public LogMessage parseLine(String line,LogRequest info){  int lineLength=line.length();  if (lineLength <= TIME_LENGTH || line.charAt(4) != '-' || line.charAt(7) != '-' || line.charAt(10) != ' ' || line.charAt(13) != ':' || line.charAt(16) != ':' || line.charAt(19) != ' ' || line.charAt(20) != '[') {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  String yearStr=line.substring(0,4);  int year=toNumber(yearStr);  if (year < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  String monthStr=line.substring(5,7);  int month=toNumber(monthStr);  if (month < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  String dayStr=line.substring(8,10);  int day=toNumber(dayStr);  if (day < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  String hourStr=line.substring(11,13);  int hour=toNumber(hourStr);  if (hour < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  String minStr=line.substring(14,16);  int min=toNumber(minStr);  if (min < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  String secStr=line.substring(17,19);  int sec=toNumber(secStr);  if (sec < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  String timeStr=line.substring(0,TIME_LENGTH - 2);  final int endBracket=line.indexOf("]",TIME_LENGTH);  if (endBracket < 0 || endBracket - TIME_LENGTH > Short.MAX_VALUE) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  final int priorityStartIndex=endBracket + 2;  if (priorityStartIndex > lineLength || priorityStartIndex > Short.MAX_VALUE) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  final int priorityEndIndex=line.indexOf(" ",priorityStartIndex);  if (priorityEndIndex + 1 > lineLength || priorityEndIndex + 1 > Short.MAX_VALUE || priorityEndIndex - priorityStartIndex > Short.MAX_VALUE) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  int inTime=inTimeRange(year,month,day,hour,min,sec,0,info);  if (inTime < 0) {    return LogMessage.REJECTED_LOGMESSAGE;  } else   if (inTime > 0) {    return LogMessage.REJECTED_LAST_LOGMESSAGE;  }  final String priority=line.substring(priorityStartIndex,priorityEndIndex);  final int level=LogSeverity.toLevel(priority);  if (level < 0) {    return LogMessage.CONTINUATION_LOGMESSAGE;  }  int matchLevel=matchLevelFilter(level,info);  if (matchLevel > 0) {    return LogMessage.REJECTED_LOGMESSAGE;  }  LogMessage log=new LogMessage(getTime(year,month,day,hour,min,sec,0),line.getBytes());  log.setLogOffset(priorityEndIndex + 1);  log.setTimeBytes(0,TIME_LENGTH - 2);  log.setThreadName(TIME_LENGTH,endBracket - TIME_LENGTH);  log.setLevel(level);  return log;}  }
class C{  public TempBuffer(TempBufferData data){  _data=data;  _buf=data.buffer();  data.allocate();}  }
class C{  public synchronized void remove(int index){  super.remove(index);  mMaxValues.remove(index);}  }
class C{  public void removeAll(@NonNull Jedis jedis,@NonNull UUID world) throws ProcessingException {  try {    jedis.hgetAll(RedisKeys.PLAYER_REPO.toString()).entrySet().stream().filter(null).forEach(null);  } catch (  Exception ex) {    throw new ProcessingException("There was an error removing server \"" + world + "\"!",ex);  }}  }
class C{  public void testColumnNamesDefaulToFieldNames(){  TableInfo tableInfo=Cache.getTableInfo(MockModel.class);  for (  Field field : tableInfo.getFields()) {    if (field.getName().equals("mId"))     continue;    assertEquals(field.getName(),tableInfo.getColumnName(field));  }}  }
class C{  @Override protected void doUnbind() throws CommunicationException, InterruptedException {  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"doUnbind","Finally close the socket");  }synchronized (this) {    if (socket != null) {      socket.close();      socket=null;    }  }  closeTrapSocketIfNeeded();  closeInformSocketIfNeeded();}  }
class C{  private double toLength(String str) throws IOException {  double scaleFactor=1d;  if (str == null || str.length() == 0) {    return 0d;  }  if (str.endsWith("cm")) {    str=str.substring(0,str.length() - 2);    scaleFactor=35.43307;  } else   if (str.endsWith("mm")) {    str=str.substring(0,str.length() - 2);    scaleFactor=3.543307;  } else   if (str.endsWith("in")) {    str=str.substring(0,str.length() - 2);    scaleFactor=90;  } else   if (str.endsWith("pt")) {    str=str.substring(0,str.length() - 2);    scaleFactor=1.25;  } else   if (str.endsWith("pc")) {    str=str.substring(0,str.length() - 2);    scaleFactor=15;  } else   if (str.endsWith("px")) {    str=str.substring(0,str.length() - 2);  }  return Double.parseDouble(str) * scaleFactor;}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof FilePermission))   return false;  FilePermission fp=(FilePermission)permission;  int desired=fp.getMask();  int effective=0;  int needed=desired;synchronized (this) {    int len=perms.size();    for (int i=0; i < len; i++) {      FilePermission x=(FilePermission)perms.get(i);      if (((needed & x.getMask()) != 0) && x.impliesIgnoreMask(fp)) {        effective|=x.getMask();        if ((effective & desired) == desired)         return true;        needed=(desired ^ effective);      }    }  }  return false;}  }
class C{  private boolean checkPlayServices(){  int resultCode=GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);  if (resultCode != ConnectionResult.SUCCESS) {    if (GooglePlayServicesUtil.isUserRecoverableError(resultCode)) {      GooglePlayServicesUtil.getErrorDialog(resultCode,this,PLAY_SERVICES_RESOLUTION_REQUEST).show();    } else {      Log.i(TAG,"This device is not supported.");      finish();    }    return false;  }  return true;}  }
class C{  public void writeBit(int bit){  current=(current << 1) + bit;  if (current > 0xff) {    try {      out.write(current & 0xff);    } catch (    IOException e) {      throw new IllegalStateException(e);    }    current=1;  }}  }
class C{  protected void restoreSelectedWidgetsLocation(){  for (  Widget widget : context.selectedWidgets) {    SavedWidgetInfo info=savedWidgetInfoMap.get(widget);    if (info.initialDraggableParent instanceof AbsolutePanel) {      ((AbsolutePanel)info.initialDraggableParent).add(widget,info.initialDraggableParentLocation.getLeft(),info.initialDraggableParentLocation.getTop());    } else     if (info.initialDraggableParent instanceof InsertPanel) {      ((InsertPanel)info.initialDraggableParent).insert(widget,info.initialDraggableIndex);    } else     if (info.initialDraggableParent instanceof SimplePanel) {      ((SimplePanel)info.initialDraggableParent).setWidget(widget);    } else {      throw new RuntimeException("Unable to handle initialDraggableParent " + info.initialDraggableParent.getClass().getName());    }  }}  }
class C{  public static byte[] generateIv() throws GeneralSecurityException {  return randomBytes(IV_LENGTH_BYTES);}  }
class C{  public static MessageService messageService(){  return messageService;}  }
class C{  public byte[] generateSignature() throws CryptoException {  createSignatureBlock();  BigInteger t=new BigInteger(1,cipher.processBlock(block,0,block.length));  BigInteger nSubT=kParam.getModulus().subtract(t);  clearBlock(block);  BigInteger v=kParam.getModulus().shiftRight(2);  if (t.compareTo(nSubT) > 0) {    return BigIntegers.asUnsignedByteArray((kParam.getModulus().bitLength() + 7) / 8,nSubT);  } else {    return BigIntegers.asUnsignedByteArray((kParam.getModulus().bitLength() + 7) / 8,t);  }}  }
class C{  public boolean isUnique(){  return unique;}  }
class C{  protected double launchESteps(Instances inst) throws Exception {  int numPerTask=inst.numInstances() / m_executionSlots;  double eStepLogL=0;  double eStepSow=0;  if (m_executionSlots <= 1 || inst.numInstances() < 2 * m_executionSlots) {    return E(inst,true);  }  List<Future<double[]>> results=new ArrayList<Future<double[]>>();  for (int i=0; i < m_executionSlots; i++) {    int start=i * numPerTask;    int end=start + numPerTask;    if (i == m_executionSlots - 1) {      end=inst.numInstances();    }    ETask newTask=new ETask(inst,start,end,true);    Future<double[]> futureE=m_executorPool.submit(newTask);    results.add(futureE);  }  for (int i=0; i < results.size(); i++) {    double[] r=results.get(i).get();    eStepLogL+=r[0];    eStepSow+=r[1];  }  eStepLogL/=eStepSow;  return eStepLogL;}  }
class C{  protected final void registerProblem(@NotNull final PsiElement psiElement,@NotNull final String descriptionTemplate,final ProblemHighlightType highlightType,@Nullable final HintAction hintAction,@Nullable final TextRange rangeInElement,final LocalQuickFix... fixes){  if (myHolder != null && !(psiElement instanceof PsiErrorElement)) {    myHolder.registerProblem(new ProblemDescriptorImpl(psiElement,psiElement,descriptionTemplate,fixes,highlightType,false,rangeInElement,hintAction,myHolder.isOnTheFly()));  }}  }
class C{  public FunctionBlockMappingRule createFunctionBlockMappingRule(){  FunctionBlockMappingRuleImpl functionBlockMappingRule=new FunctionBlockMappingRuleImpl();  return functionBlockMappingRule;}  }
class C{  public CharSetMap(String path) throws IOException {  this();  mappers[MAP_PROG]=loadPath(path);}  }
class C{  private static boolean validateAllowedValues(String propertyValue,String[] acceptableValues){  for (  String value : acceptableValues) {    if (value.equals(propertyValue)) {      return true;    }  }  return false;}  }
class C{  private void notifyDownloadStart(DownloadFileOperation download){  mLastPercent=0;  mNotificationBuilder=NotificationBuilderWithProgressBar.newNotificationBuilderWithProgressBar(this);  mNotificationBuilder.setSmallIcon(R.drawable.notification_icon).setTicker(getString(R.string.downloader_download_in_progress_ticker)).setContentTitle(getString(R.string.downloader_download_in_progress_ticker)).setOngoing(true).setProgress(100,0,download.getSize() < 0).setContentText(String.format(getString(R.string.downloader_download_in_progress_content),0,new File(download.getSavePath()).getName()));  Intent showDetailsIntent=null;  if (PreviewImageFragment.canBePreviewed(download.getFile())) {    showDetailsIntent=new Intent(this,PreviewImageActivity.class);  } else {    showDetailsIntent=new Intent(this,FileDisplayActivity.class);  }  showDetailsIntent.putExtra(FileActivity.EXTRA_FILE,download.getFile());  showDetailsIntent.putExtra(FileActivity.EXTRA_ACCOUNT,download.getAccount());  showDetailsIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  mNotificationBuilder.setContentIntent(PendingIntent.getActivity(this,(int)System.currentTimeMillis(),showDetailsIntent,0));  mNotificationManager.notify(R.string.downloader_download_in_progress_ticker,mNotificationBuilder.build());}  }
class C{  public byte[] unwrap(byte[] in,int inOff,int inLen) throws InvalidCipherTextException {  if (forWrapping) {    throw new IllegalStateException("Not set for unwrapping");  }  if (in == null) {    throw new InvalidCipherTextException("Null pointer as ciphertext");  }  if (inLen % engine.getBlockSize() != 0) {    throw new InvalidCipherTextException("Ciphertext not multiple of " + engine.getBlockSize());  }  ParametersWithIV param2=new ParametersWithIV(this.param,IV2);  this.engine.init(false,param2);  byte TEMP3[]=new byte[inLen];  System.arraycopy(in,inOff,TEMP3,0,inLen);  for (int i=0; i < (TEMP3.length / engine.getBlockSize()); i++) {    int currentBytePos=i * engine.getBlockSize();    engine.processBlock(TEMP3,currentBytePos,TEMP3,currentBytePos);  }  byte[] TEMP2=new byte[TEMP3.length];  for (int i=0; i < TEMP3.length; i++) {    TEMP2[i]=TEMP3[TEMP3.length - (i + 1)];  }  this.iv=new byte[8];  byte[] TEMP1=new byte[TEMP2.length - 8];  System.arraycopy(TEMP2,0,this.iv,0,8);  System.arraycopy(TEMP2,8,TEMP1,0,TEMP2.length - 8);  this.paramPlusIV=new ParametersWithIV(this.param,this.iv);  this.engine.init(false,this.paramPlusIV);  byte[] LCEKPADICV=new byte[TEMP1.length];  System.arraycopy(TEMP1,0,LCEKPADICV,0,TEMP1.length);  for (int i=0; i < (LCEKPADICV.length / engine.getBlockSize()); i++) {    int currentBytePos=i * engine.getBlockSize();    engine.processBlock(LCEKPADICV,currentBytePos,LCEKPADICV,currentBytePos);  }  byte[] result=new byte[LCEKPADICV.length - 8];  byte[] CKStoBeVerified=new byte[8];  System.arraycopy(LCEKPADICV,0,result,0,LCEKPADICV.length - 8);  System.arraycopy(LCEKPADICV,LCEKPADICV.length - 8,CKStoBeVerified,0,8);  if (!checkCMSKeyChecksum(result,CKStoBeVerified)) {    throw new InvalidCipherTextException("Checksum inside ciphertext is corrupted");  }  if ((result.length - ((result[0] & 0xff) + 1)) > 7) {    throw new InvalidCipherTextException("too many pad bytes (" + (result.length - ((result[0] & 0xff) + 1)) + ")");  }  byte[] CEK=new byte[result[0]];  System.arraycopy(result,1,CEK,0,CEK.length);  return CEK;}  }
class C{  private void assertMetadata(Model model,HttpServletResponse response) throws IOException {  controller.metadata(Locale.US,tenant,model,response);  assertEquals(tenant,model.asMap().get("tenant"));  assertNull(model.asMap().get("serverTime"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:41.847 -0500",hash_original_method="E94CD8A455128D534B69DAAECC501B12",hash_generated_method="D50A3974E0B932CCD6F84C89098DAAC2") public int readBytes(byte[] buffer,int srcOffset,int destOffset,int count) throws IOException {  if (isDeactivated()) {    throw new IOException("Can't read from deactivated memory file.");  }  if (destOffset < 0 || destOffset > buffer.length || count < 0 || count > buffer.length - destOffset || srcOffset < 0 || srcOffset > mLength || count > mLength - srcOffset) {    throw new IndexOutOfBoundsException();  }  return native_read(mFD,mAddress,buffer,srcOffset,destOffset,count,mAllowPurging);}  }
class C{  public <T>T query(Connection conn,String sql,Object[] params,int[] paramTypes,ResultSetHandler<T> rsh) throws SQLException {  PreparedStatement stmt=null;  ResultSet rs=null;  T result=null;  try {    stmt=this.prepareStatement(conn,sql);    this.fillStatement(stmt,params,paramTypes);    rs=this.wrap(stmt.executeQuery());    result=rsh.handle(rs);  } catch (  SQLException e) {    this.rethrow(e,sql,params);  } finally {    try {      close(rs);    }  finally {      close(stmt);    }  }  return result;}  }
class C{  public final Vec2 mul(final Vec2 v){  return new Vec2(ex.x * v.x + ey.x * v.y,ex.y * v.x + ey.y * v.y);}  }
class C{  static BigIntPolynomial generateRandomSmall(int N,int numOnes,int numNegOnes){  List coeffs=new ArrayList();  for (int i=0; i < numOnes; i++) {    coeffs.add(Constants.BIGINT_ONE);  }  for (int i=0; i < numNegOnes; i++) {    coeffs.add(BigInteger.valueOf(-1));  }  while (coeffs.size() < N) {    coeffs.add(Constants.BIGINT_ZERO);  }  Collections.shuffle(coeffs,new SecureRandom());  BigIntPolynomial poly=new BigIntPolynomial(N);  for (int i=0; i < coeffs.size(); i++) {    poly.coeffs[i]=(BigInteger)coeffs.get(i);  }  return poly;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (outputDataSet == null) {    throw new NullPointerException();  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  Calendar toCalendar(String value,String pattern,Locale locale){  Calendar calendar=null;  try {    DateFormat format=(locale == null) ? new SimpleDateFormat(pattern) : new SimpleDateFormat(pattern,locale);    format.setLenient(false);    format.parse(value);    calendar=format.getCalendar();  } catch (  Exception e) {    fail("Error creating Calendar value ='" + value + ", pattern='"+ pattern+ "' "+ e.toString());  }  return calendar;}  }
class C{  public void printLines(String[] lines,IntRange range){  for (int lineNumber=range.getMinimumInteger(); lineNumber <= range.getMaximumInteger(); lineNumber++)   System.out.format("line %4d: %s\n",lineNumber,lines[lineNumber - 1]);}  }
class C{  protected int index(int rank){  return zero + rank * stride;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.765 -0500",hash_original_method="9CA1F48AAB7841E0E0CBD16E0BA7D360",hash_generated_method="C24E5F8DB02F00BA8662CCB70872BDB9") public int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  int modulus=length % 3;  int dataLength=(length - modulus);  int a1, a2, a3;  for (int i=off; i < off + dataLength; i+=3) {    a1=data[i] & 0xff;    a2=data[i + 1] & 0xff;    a3=data[i + 2] & 0xff;    out.write(encodingTable[(a1 >>> 2) & 0x3f]);    out.write(encodingTable[((a1 << 4) | (a2 >>> 4)) & 0x3f]);    out.write(encodingTable[((a2 << 2) | (a3 >>> 6)) & 0x3f]);    out.write(encodingTable[a3 & 0x3f]);  }  int b1, b2, b3;  int d1, d2;switch (modulus) {case 0:    break;case 1:  d1=data[off + dataLength] & 0xff;b1=(d1 >>> 2) & 0x3f;b2=(d1 << 4) & 0x3f;out.write(encodingTable[b1]);out.write(encodingTable[b2]);out.write(padding);out.write(padding);break;case 2:d1=data[off + dataLength] & 0xff;d2=data[off + dataLength + 1] & 0xff;b1=(d1 >>> 2) & 0x3f;b2=((d1 << 4) | (d2 >>> 4)) & 0x3f;b3=(d2 << 2) & 0x3f;out.write(encodingTable[b1]);out.write(encodingTable[b2]);out.write(encodingTable[b3]);out.write(padding);break;}return (dataLength / 3) * 4 + ((modulus == 0) ? 0 : 4);}  }
class C{  public static Fuse triggeredFuse(){  return Fuse.create().trigger();}  }
class C{  public void close(){  try {    super.close();  } catch (  Exception e) {    logger.warn(e.getMessage(),e);  }  try {    removeChannelIfDisconnected(channel);  } catch (  Exception e) {    logger.warn(e.getMessage(),e);  }  try {    attributes.clear();  } catch (  Exception e) {    logger.warn(e.getMessage(),e);  }  try {    logger.info("Close netty channel " + channel);    channel.close();  } catch (  Exception e) {    logger.warn(e.getMessage(),e);  }}  }
class C{  public void sendMessage(String text,String replyUser){  if (text.length() > 140) {    int index=text.indexOf("http://");    if (index == -1) {      text=text.substring(0,1000);    } else     if (index > 120) {      text=text.substring(0,1000) + " " + text.substring(index,text.length());    }  }  log("Sending message:",Level.INFO,text,replyUser);  try {    getConnection().sendDirectMessage(replyUser,text);  } catch (  Exception exception) {    this.errors++;    log(exception);  }}  }
class C{  public void updateTransform(){  tmpMatrix.setToIdentity();  if (!visible_) {    Arrays.fill(tmpV,0);    textureAtlas_.putVertex(textureAtlas_.getVertexBuffer(),tmpV,atlasIndex);    dirty_=recursiveDirty_=false;    return;  }  if (parent_ == null || parent_ == spriteSheet_) {    float radians=-ccMacros.CC_DEGREES_TO_RADIANS(rotation_);    float c=(float)Math.cos(radians);    float s=(float)Math.sin(radians);    tmpMatrix.set(c * scaleX_,s * scaleX_,-s * scaleY_,c * scaleY_,position_.x,position_.y);    tmpMatrix.translate(-anchorPointInPixels_.x,-anchorPointInPixels_.y);  } else   if (parent_ != spriteSheet_) {    int prevHonor=CC_HONOR_PARENT_TRANSFORM_ALL;    for (CCNode p=this; p != null && p != spriteSheet_; p=p.getParent()) {      CCSprite sprP=(CCSprite)p;      tmpNewMatrix.setToIdentity();      if ((prevHonor & CC_HONOR_PARENT_TRANSFORM_TRANSLATE) != 0)       tmpNewMatrix.translate(sprP.position_.x,sprP.position_.y);      if ((prevHonor & CC_HONOR_PARENT_TRANSFORM_ROTATE) != 0)       tmpNewMatrix.rotate(-ccMacros.CC_DEGREES_TO_RADIANS(sprP.rotation_));      if ((prevHonor & CC_HONOR_PARENT_TRANSFORM_SCALE) != 0) {        tmpNewMatrix.scale(sprP.scaleX_,sprP.scaleY_);      }      tmpNewMatrix.translate(-sprP.anchorPointInPixels_.x,-sprP.anchorPointInPixels_.y);      tmpMatrix.multiply(tmpNewMatrix);      prevHonor=sprP.honorParentTransform_;    }  }  CGSize size=rect_.size;  float x1=offsetPosition_.x;  float y1=offsetPosition_.y;  float x2=x1 + size.width;  float y2=y1 + size.height;  float x=(float)tmpMatrix.m02;  float y=(float)tmpMatrix.m12;  float cr=(float)tmpMatrix.m00;  float sr=(float)tmpMatrix.m10;  float cr2=(float)tmpMatrix.m11;  float sr2=(float)-tmpMatrix.m01;  float ax=x1 * cr - y1 * sr2 + x;  float ay=x1 * sr + y1 * cr2 + y;  float bx=x2 * cr - y1 * sr2 + x;  float by=x2 * sr + y1 * cr2 + y;  float cx=x2 * cr - y2 * sr2 + x;  float cy=x2 * sr + y2 * cr2 + y;  float dx=x1 * cr - y2 * sr2 + x;  float dy=x1 * sr + y2 * cr2 + y;  tmpV[0]=dx;  tmpV[1]=dy;  tmpV[2]=vertexZ_;  tmpV[3]=ax;  tmpV[4]=ay;  tmpV[5]=vertexZ_;  tmpV[6]=cx;  tmpV[7]=cy;  tmpV[8]=vertexZ_;  tmpV[9]=bx;  tmpV[10]=by;  tmpV[11]=vertexZ_;  textureAtlas_.putVertex(textureAtlas_.getVertexBuffer(),tmpV,atlasIndex);  dirty_=recursiveDirty_=false;}  }
class C{  @Override public void notifyExit(int value){  report(false);}  }
class C{  public Element create(String prefix,Document doc){  return new XBLOMHandlerGroupElement(prefix,(AbstractDocument)doc);}  }
class C{  private void processReversedEdge(mxGraphHierarchyEdge edge,Object realEdge){}  }
class C{  public static byte[] short2byte(short[] sData){  int shortArrsize=sData.length;  byte[] bytes=new byte[shortArrsize * 2];  for (int i=0; i < shortArrsize; i++) {    bytes[i * 2]=(byte)(sData[i] & 0x00FF);    bytes[(i * 2) + 1]=(byte)(sData[i] >> 8);    sData[i]=0;  }  return bytes;}  }
class C{  public void reset(){  lastMtd=null;  map.clear();  putCnt.set(0);  putAllCnt.set(0);  rmvCnt.set(0);  rmvAllCnt.set(0);  ts=System.currentTimeMillis();}  }
class C{  protected void removeDOMListeners(){  SVGOMDocument doc=(SVGOMDocument)document;  doc.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",domAttrModifiedEventListener,true);  doc.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",domNodeInsertedEventListener,true);  doc.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",domNodeRemovedEventListener,true);  doc.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMCharacterDataModified",domCharacterDataModifiedEventListener,true);  doc.removeAnimatedAttributeListener(animatedAttributeListener);  CSSEngine cssEngine=doc.getCSSEngine();  if (cssEngine != null) {    cssEngine.removeCSSEngineListener(cssPropertiesChangedListener);    cssEngine.dispose();    doc.setCSSEngine(null);  }}  }
class C{  @SuppressWarnings("ZeroLengthArrayAllocation") public void testIncludeEmpty() throws Exception {  inclProps=new String[]{};  startGridAndCheck();}  }
class C{  protected ActionForward verNoDisponiblesAutorizadas(){  ActionForward ret=new ActionForward();  ret.setPath(PATH_ACTION_LISTADO_CONSULTAS_NO_DISPONIBLES_AUTORIZADAS);  ret.setRedirect(false);  return ret;}  }
class C{  public void write(ByteSource source){  ByteBuffer bb=source.getBackingByteBuffer();  if (bb != null) {    write(bb);    return;  }  if (this.ignoreWrites)   return;  checkIfWritable();  int remainingSpace=this.buffer.limit() - this.buffer.position();  if (remainingSpace < source.remaining()) {    int oldLimit=source.limit();    source.limit(source.position() + remainingSpace);    source.sendTo(this.buffer);    source.limit(oldLimit);    ensureCapacity(source.remaining());  }  source.sendTo(this.buffer);}  }
class C{  @Override public Object clone(){  TFloatArrayList clone=null;  try {    clone=(TFloatArrayList)super.clone();    clone._data=_data.clone();  } catch (  CloneNotSupportedException e) {  }  return clone;}  }
class C{  public static boolean isDurationDatatype(IRI datatype){  return datatype.equals(XMLSchema.DURATION) || datatype.equals(XMLSchema.DAYTIMEDURATION) || datatype.equals(XMLSchema.YEARMONTHDURATION);}  }
class C{  public static void logNodeTree(AccessibilityNodeInfoCompat node){  if (node == null) {    return;  }  HashSet<AccessibilityNodeInfoCompat> seen=new HashSet<>();  logNodeTree(AccessibilityNodeInfoCompat.obtain(node),"",seen);  for (  AccessibilityNodeInfoCompat n : seen) {    n.recycle();  }}  }
class C{  public String newForm(){  setAmountRule(Boolean.FALSE);  return NEW;}  }
class C{  public void showContent(){  mSlidingMenu.showContent();}  }
class C{  public static void nodesToPath(PathDataNode[] node,Path path){  float[] current=new float[4];  char previousCommand='m';  for (int i=0; i < node.length; i++) {    addCommand(path,current,previousCommand,node[i].mType,node[i].mParams);    previousCommand=node[i].mType;  }}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public Row(int numCols){  origVals=new Object[numCols];  currentVals=new Object[numCols];  colsChanged=new BitSet(numCols);  this.numCols=numCols;}  }
class C{  private void updateHeaderSeparator(){  final String bestDateTimePattern=DateFormatUtils.getBestDateTimePattern(mCurrentLocale,(mIs24HourView) ? "Hm" : "hm");  final String separatorText;  final char[] hourFormats={'H','h','K','k'};  int hIndex=lastIndexOfAny(bestDateTimePattern,hourFormats);  if (hIndex == -1) {    separatorText=":";  } else {    separatorText=Character.toString(bestDateTimePattern.charAt(hIndex + 1));  }  mSeparatorView.setText(separatorText);}  }
class C{  public void bootstrapNetty(){  try {    bossGroup=new NioEventLoopGroup();    workerGroup=new NioEventLoopGroup();    ServerBootstrap bootstrap=new ServerBootstrap().group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).option(ChannelOption.SO_REUSEADDR,true).option(ChannelOption.SO_KEEPALIVE,true).option(ChannelOption.TCP_NODELAY,true).option(ChannelOption.SO_SNDBUF,Controller.SEND_BUFFER_SIZE);    OFChannelInitializer initializer=new OFChannelInitializer(this,this,debugCounterService,floodlightProvider.getTimer(),ofBitmaps,defaultFactory,keyStore,keyStorePassword);    bootstrap.childHandler(initializer);    cg=new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);    Set<InetSocketAddress> addrs=new HashSet<InetSocketAddress>();    if (floodlightProvider.getOFAddresses().isEmpty()) {      cg.add(bootstrap.bind(new InetSocketAddress(InetAddress.getByAddress(IPv4Address.NONE.getBytes()),floodlightProvider.getOFPort().getPort())).channel());    } else {      for (      IPv4Address ip : floodlightProvider.getOFAddresses()) {        addrs.add(new InetSocketAddress(InetAddress.getByAddress(ip.getBytes()),floodlightProvider.getOFPort().getPort()));      }    }    for (    InetSocketAddress sa : addrs) {      cg.add(bootstrap.bind(sa).channel());      log.info("Listening for switch connections on {}",sa);    }  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void tableSwitch(final int[] keys,final TableSwitchGenerator generator,final boolean useTable){  for (int i=1; i < keys.length; ++i) {    if (keys[i] < keys[i - 1]) {      throw new IllegalArgumentException("keys must be sorted ascending");    }  }  Label def=newLabel();  Label end=newLabel();  if (keys.length > 0) {    int len=keys.length;    int min=keys[0];    int max=keys[len - 1];    int range=max - min + 1;    if (useTable) {      Label[] labels=new Label[range];      Arrays.fill(labels,def);      for (int i=0; i < len; ++i) {        labels[keys[i] - min]=newLabel();      }      mv.visitTableSwitchInsn(min,max,def,labels);      for (int i=0; i < range; ++i) {        Label label=labels[i];        if (label != def) {          mark(label);          generator.generateCase(i + min,end);        }      }    } else {      Label[] labels=new Label[len];      for (int i=0; i < len; ++i) {        labels[i]=newLabel();      }      mv.visitLookupSwitchInsn(def,keys,labels);      for (int i=0; i < len; ++i) {        mark(labels[i]);        generator.generateCase(keys[i],end);      }    }  }  mark(def);  generator.generateDefault();  mark(end);}  }
class C{  public static boolean shouldLoad(String id,ChunkLoadBehaviour behav){  if (isCritical(id))   return true;switch (behav) {case LOAD_CHUNK_ALWAYS:    return true;case LOAD_CHUNK_IF_SAFE:  return isSafeToCopy(id);case LOAD_CHUNK_NEVER:return false;case LOAD_CHUNK_MOST_IMPORTANT:return id.equals(PngChunkTRNS.ID);}return false;}  }
class C{  public PrivateKey(final Deserializer deserializer){  this.value=deserializer.readBigInteger("value");}  }
class C{  public static boolean isSubclassOrImplementsInterface(Class extendorOrImplementor,Class extendedOrImplemented){  if (extendorOrImplementor.equals(extendedOrImplemented)) {    return true;  }  if (extendedOrImplemented.isInterface()) {    return recursiveIsImplementsInterface(extendorOrImplementor,extendedOrImplemented) || recursiveSuperclassImplementsInterface(extendorOrImplementor,extendedOrImplemented);  }  return recursiveIsSuperClass(extendorOrImplementor,extendedOrImplemented);}  }
class C{  private long scanItem(InStore is,long address,byte[] readBuffer,byte[] tempBuffer){  startRead();  byte[] headerBuffer=_headerBuffer;  while (address + 2 < _tailAddress) {    readImpl(is,address,readBuffer,headerBuffer,0,2);    address+=2;    int len=BitsUtil.readInt16(headerBuffer,0);    if ((len & 0x8000) != 0) {      if (len == CHECKPOINT_START) {        setSequence(_sequence + 1);      }      startRead();      continue;    }    if (len == 0) {      readImpl(is,address,readBuffer,headerBuffer,0,4);      address+=4;      int crc=BitsUtil.readInt(headerBuffer,0);      int digest=(int)_crc.getValue();      if (crc == digest) {        return address;      } else {        return -1;      }    }    if (_tailAddress < address + len) {      return -1;    }    int readLen=len;    while (readLen > 0) {      int sublen=Math.min(readLen,tempBuffer.length);      readImpl(is,address,readBuffer,tempBuffer,0,sublen);      _crc.update(tempBuffer,0,sublen);      address+=sublen;      readLen-=sublen;    }  }  return -1;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.wallPaint,stream);}  }
class C{  public float intersectRayDistance(Ray3D ray){  ReadonlyVec3D q=sphere.sub(ray);  float distSquared=q.magSquared();  float v=q.dot(ray.dir);  float d=sphere.radius * sphere.radius - (distSquared - v * v);  if (d < 0.0) {    return -1;  }  return v - (float)Math.sqrt(d);}  }
class C{  public boolean hasInitialResponse(){  return false;}  }
class C{  public Long updateOrganisation(Long user_level,long organisation_id,String orgname,long users_id){  try {    Organisation org=this.getOrganisationById(organisation_id);    org.setName(orgname);    org.setUpdatedby(users_id);    org.setUpdatetime(new Date());    em.merge(org);    return org.getOrganisation_id();  } catch (  Exception err) {    log.error("updateOrganisation",err);  }  return null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(DShowTVPlayer.getDscalerOddFieldFirst());}  }
class C{  public Floor(){  super(Number.class,Number.class);}  }
class C{  protected void updateTabButtonAt(int index){  TabButton button=buttonForTab(index);  button.setText(tabPane.getTitleAt(index));  button.setIcon(tabPane.getIconAt(index));  button.setDisabledIcon(tabPane.getDisabledIconAt(index));  Color background=tabPane.getBackgroundAt(index);  if (background == null) {    background=(Color)button.getClientProperty(BUTTON_ORIGINAL_BACKGROUND);  }  button.setBackground(background);  Color foreground=tabPane.getForegroundAt(index);  if (foreground == null) {    foreground=(Color)button.getClientProperty(BUTTON_ORIGINAL_FOREGROUND);  }  button.setForeground(foreground);  button.setToolTipText(tabPane.getToolTipTextAt(index));  button.setDisplayedMnemonicIndex(tabPane.getDisplayedMnemonicIndexAt(index));  button.setMnemonic(tabPane.getMnemonicAt(index));  button.setEnabled(tabPane.isEnabledAt(index));  button.setHorizontalAlignment(((JOutlookBar)tabPane).getAlignmentAt(index));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Permissions.hasPermission(Permissions.PERMISSION_SYSTEMMESSAGE,stack.getUIMgr())) {    sage.msg.MsgManager.getInstance().clearSystemMessages();    sage.plugin.PluginEventManager.postEvent(sage.plugin.PluginEventManager.SYSTEM_ALERT_LEVEL_RESET,(Object[])null);    sage.plugin.PluginEventManager.postEvent(sage.plugin.PluginEventManager.ALL_SYSTEM_MESSAGES_REMOVED,(Object[])null);  }  return null;}  }
class C{  public DefaultText(Element parent,String text){  super(text);  this.parent=parent;}  }
class C{  @Override public void onAction(final Player player,final RPAction action){  ActionData data=new ActionData();  if (!VALIDATION.validateAndInformPlayer(player,action,data)) {    return;  }  Entity entity=data.getEntity();  if (entity != null) {    String name=entity.get(TYPE);    if (entity.has(NAME)) {      name=entity.get(NAME);    }    new GameEvent(player.getName(),LOOK,name).raise();    final String text=entity.describe();    if (entity.has(Actions.ACTION) && entity.get(Actions.ACTION).equals(Actions.READ)) {      player.sendPrivateText(NotificationType.RESPONSE,text);    } else {      player.sendPrivateText(text);    }    player.notifyWorldAboutChanges();  }}  }
class C{  public static Map<String,Object> createCreditCard(DispatchContext ctx,Map<String,Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PAY_INFO","_CREATE","ACCOUNTING","_CREATE");  if (result.size() > 0)   return result;  List<String> messages=FastList.newInstance();  context.put("cardNumber",StringUtil.removeSpaces((String)context.get("cardNumber")));  if (!UtilValidate.isCardMatch((String)context.get("cardType"),(String)context.get("cardNumber"))) {    messages.add(UtilProperties.getMessage(resource,"AccountingCreditCardNumberInvalid",UtilMisc.toMap("cardType",(String)context.get("cardType"),"validCardType",UtilValidate.getCardType((String)context.get("cardNumber"))),locale));  }  if (!UtilValidate.isDateAfterToday((String)context.get("expireDate"))) {    messages.add(UtilProperties.getMessage(resource,"AccountingCreditCardExpireDateBeforeToday",UtilMisc.toMap("expireDate",(String)context.get("expireDate")),locale));  }  if (messages.size() > 0) {    return ServiceUtil.returnError(messages);  }  List<GenericValue> toBeStored=FastList.newInstance();  GenericValue newPm=delegator.makeValue("PaymentMethod");  toBeStored.add(newPm);  GenericValue newCc=delegator.makeValue("CreditCard");  toBeStored.add(newCc);  String newPmId=(String)context.get("paymentMethodId");  if (UtilValidate.isEmpty(newPmId)) {    try {      newPmId=delegator.getNextSeqId("PaymentMethod");    } catch (    IllegalArgumentException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingCreditCardCreateIdGenerationFailure",locale));    }  }  newPm.set("partyId",partyId);  newPm.set("description",context.get("description"));  newPm.set("fromDate",(context.get("fromDate") != null ? context.get("fromDate") : now));  newPm.set("thruDate",context.get("thruDate"));  newCc.set("companyNameOnCard",context.get("companyNameOnCard"));  newCc.set("titleOnCard",context.get("titleOnCard"));  newCc.set("firstNameOnCard",context.get("firstNameOnCard"));  newCc.set("middleNameOnCard",context.get("middleNameOnCard"));  newCc.set("lastNameOnCard",context.get("lastNameOnCard"));  newCc.set("suffixOnCard",context.get("suffixOnCard"));  newCc.set("cardType",context.get("cardType"));  newCc.set("cardNumber",context.get("cardNumber"));  newCc.set("expireDate",context.get("expireDate"));  newPm.set("paymentMethodId",newPmId);  newPm.set("paymentMethodTypeId","CREDIT_CARD");  newCc.set("paymentMethodId",newPmId);  GenericValue newPartyContactMechPurpose=null;  String contactMechId=(String)context.get("contactMechId");  if (UtilValidate.isNotEmpty(contactMechId) && !contactMechId.equals("_NEW_")) {    newCc.set("contactMechId",context.get("contactMechId"));    String contactMechPurposeTypeId="BILLING_LOCATION";    GenericValue tempVal=null;    try {      List<GenericValue> allPCWPs=EntityQuery.use(delegator).from("PartyContactWithPurpose").where("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId).queryList();      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"contactFromDate","contactThruDate",true);      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"purposeFromDate","purposeThruDate",true);      tempVal=EntityUtil.getFirst(allPCWPs);    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      tempVal=null;    }    if (tempVal == null) {      newPartyContactMechPurpose=delegator.makeValue("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId,"fromDate",now));    }  }  if (newPartyContactMechPurpose != null)   toBeStored.add(newPartyContactMechPurpose);  try {    delegator.storeAll(toBeStored);  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingCreditCardCreateWriteFailure",locale) + e.getMessage());  }  result.put("paymentMethodId",newCc.getString("paymentMethodId"));  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.996 -0400",hash_original_method="D7BFC2EA39FCC831C6746FE2E0E9F67F",hash_generated_method="AA4C259171A5ACC7D75CC2D898116CCC") private boolean readEqualsSign(){  skipWhitespace();  if (pos < input.length() && input.charAt(pos) == '=') {    pos++;    return true;  }  return false;}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.175 -0400",hash_original_method="A40ED954B76C615400DB0B23BD975A04",hash_generated_method="9EA37840470799A5B406CEE1D4B2EEA5") public static void cleanDirectory(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDelete(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public SuperUserCommand(String[] commands){  mCommands=commands;  mTimeout=DEFAULT_COMMAND_TIMEOUT;}  }
class C{  public void scroll(int itemsToScroll,int time){  int distance=itemsToScroll * getItemHeight() - scrollingOffset;  scroller.scroll(distance,time);}  }
class C{  private void init(){  addMouseMotionListener(mouseHandler);  addMouseListener(mouseHandler);  addMouseWheelListener(mouseHandler);  addKeyListener(keyHandler);  setLayout(null);  setPreferredSize(new Dimension(1000,440));  setMinimumSize(new Dimension(100,100));  setMaximumSize(new Dimension(2000,2000));}  }
class C{  @SuppressWarnings("unchecked") protected RowChangeData extractRowChangeData() throws SQLException {  OneRowChange orc=null;  ArrayList<ColumnVal> columnValues=null;  ColumnSpec cDef=null;  ColumnVal cVal=null;  RowChangeData rowChangeData=null;  ResultSet extractedRows=null;  rowChangeData=new RowChangeData();  orc=new OneRowChange();  orc.setAction(ActionType.INSERT);  orc.setSchemaName(importTables.getString("TABLE_SCHEM"));  orc.setTableName(importTables.getString("TABLE_NAME"));  orc.setColumnSpec((ArrayList<ColumnSpec>)columnDefinitions.clone());  rowChangeData.appendOneRowChange(orc);  logger.debug("SELECT * FROM " + importTables.getString("TABLE_SCHEM") + "."+ importTables.getString("TABLE_NAME")+ " LIMIT "+ currentTablePosition+ " , "+ getChunkSize());  extractedRows=statement.executeQuery("SELECT * FROM " + importTables.getString("TABLE_SCHEM") + "."+ importTables.getString("TABLE_NAME")+ " LIMIT "+ currentTablePosition+ " , "+ getChunkSize());  while (extractedRows.next()) {    columnValues=new ArrayList<ColumnVal>();    for (int i=0; i < columnDefinitions.size(); i++) {      cDef=columnDefinitions.get(i);      cVal=orc.new ColumnVal();      try {        logger.debug(orc.getSchemaName() + "." + orc.getTableName()+ "."+ cDef.getName()+ " = "+ extractedRows.getString(cDef.getName()));        cVal.setValue(extractRowValue(cDef.getType(),extractedRows,cDef.getName()));        if (cVal.getValue() != null) {          logger.debug("Extracted value is " + cVal.getValue().toString());        }      } catch (      Exception e) {        e.printStackTrace();        cVal.setValue(null);        logger.error("Unable to extract value of " + extractedRows.getString(cDef.getName()) + " for "+ orc.getSchemaName()+ "."+ orc.getTableName()+ "."+ cDef.getName()+ " of Type "+ cDef.getType());      }      columnValues.add(cVal);    }    currentTablePosition++;    orc.getColumnValues().add(columnValues);  }  if (orc.getColumnValues().size() == 0) {    return null;  }  return rowChangeData;}  }
class C{  public void addDefaultLocations(){  add(new GoToButton(i18n.get(this,"world","World"),0,0,Float.MAX_VALUE,Mercator.MercatorName));}  }
class C{  public NinePatchDrawable(Resources res,Bitmap bitmap,byte[] chunk,Rect padding,Rect opticalInsets,String srcName){  this(new NinePatchState(new NinePatch(bitmap,chunk,srcName),padding,opticalInsets),res);  mNinePatchState.mTargetDensity=mTargetDensity;}  }
class C{  public boolean isvalid(){  return isValid;}  }
class C{  public void addBitmapToCache(String data,BitmapDrawable value){  if (data == null || value == null) {    return;  }  if (mMemoryCache != null) {    if (RecyclingBitmapDrawable.class.isInstance(value)) {      ((RecyclingBitmapDrawable)value).setIsCached(true);    }    mMemoryCache.put(data,value);  }synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      final String key=hashKeyForDisk(data);      OutputStream out=null;      try {        DiskLruCache.Snapshot snapshot=mDiskLruCache.get(key);        if (snapshot == null) {          final DiskLruCache.Editor editor=mDiskLruCache.edit(key);          if (editor != null) {            out=editor.newOutputStream(DISK_CACHE_INDEX);            value.getBitmap().compress(mCacheParams.compressFormat,mCacheParams.compressQuality,out);            editor.commit();            out.close();          }        } else {          snapshot.getInputStream(DISK_CACHE_INDEX).close();        }      } catch (      final IOException e) {        Log.e(TAG,"addBitmapToCache - " + e);      }catch (      Exception e) {        Log.e(TAG,"addBitmapToCache - " + e);      } finally {        try {          if (out != null) {            out.close();          }        } catch (        IOException e) {        }      }    }  }}  }
class C{  protected NameValue nameValue() throws ParseException {  if (debug)   dbg_enter("nameValue");  try {    lexer.match(LexerCore.ID);    Token name=lexer.getNextToken();    lexer.SPorHT();    try {      boolean quoted=false;      char la=lexer.lookAhead(0);      if (la == '=') {        lexer.consume(1);        lexer.SPorHT();        String str=null;        if (name.getTokenValue().compareToIgnoreCase(Via.RECEIVED) == 0) {          str=lexer.byteStringNoSemicolon();        } else {          if (lexer.lookAhead(0) == '\"') {            str=lexer.quotedString();            quoted=true;          } else {            lexer.match(LexerCore.ID);            Token value=lexer.getNextToken();            str=value.getTokenValue();          }        }        NameValue nv=new NameValue(name.getTokenValue().toLowerCase(),str);        if (quoted)         nv.setQuotedValue();        return nv;      } else {        return new NameValue(name.getTokenValue().toLowerCase(),null);      }    } catch (    ParseException ex) {      return new NameValue(name.getTokenValue(),null);    }  }  finally {    if (debug)     dbg_leave("nameValue");  }}  }
class C{  @SuppressWarnings("unused") public static double parseDouble(byte[] bytes){  return parseDouble(bytes,0,bytes.length);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:10.275 -0500",hash_original_method="1140CD5E96A0E40D8BD81BCBE0AC1128",hash_generated_method="85B1520249AF45217F458EC4D3DC1BA8") public static final short secondaryOrder(int order){  return (short)CollationElementIteratorICU.secondaryOrder(order);}  }
class C{  private void readObject(){}  }
class C{  public StackMapTable toStackMapTable(ConstPool cp){  return new StackMapTable(cp,toByteArray());}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static void I2OSP(long input,byte[] output,int outOff){  output[outOff++]=(byte)input;  output[outOff++]=(byte)(input >>> 8);  output[outOff++]=(byte)(input >>> 16);  output[outOff++]=(byte)(input >>> 24);  output[outOff++]=(byte)(input >>> 32);  output[outOff++]=(byte)(input >>> 40);  output[outOff++]=(byte)(input >>> 48);  output[outOff]=(byte)(input >>> 56);}  }
class C{  private List<Pair<Integer,Integer>> doGenerateEdgesSimpler(){  final int numberOfNodes=getConfiguration().getNumberOfNodes();  final long numberOfEdges=getConfiguration().getNumberOfEdges();  final Set<Pair<Integer,Integer>> edges=new HashSet<>();  while (edges.size() < numberOfEdges) {    int origin=random.nextInt(numberOfNodes);    int target=random.nextInt(numberOfNodes);    if (target == origin) {      continue;    }    edges.add(Pair.of(origin,target));  }  return new LinkedList<>(edges);}  }
class C{  public static byte[] hexToBytes(String hex){  int byteLen=hex.length() / 2;  byte[] bytes=new byte[byteLen];  for (int i=0; i < hex.length() / 2; i++) {    int i2=2 * i;    if (i2 + 1 > hex.length())     throw new IllegalArgumentException("Hex string has odd length");    int nib1=hexToInt(hex.charAt(i2));    int nib0=hexToInt(hex.charAt(i2 + 1));    byte b=(byte)((nib1 << 4) + (byte)nib0);    bytes[i]=b;  }  return bytes;}  }
class C{  public synchronized void enableObjectName(ObjectName objectName) throws IllegalArgumentException {  if (objectName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(MBeanServerNotificationFilter.class.getName(),"enableObjectName",objectName);  if (deselectedNames != null) {    if (deselectedNames.size() != 0) {      deselectedNames.remove(objectName);    }  }  if (selectedNames != null) {    if (!(selectedNames.contains(objectName))) {      selectedNames.add(objectName);    }  }  RELATION_LOGGER.exiting(MBeanServerNotificationFilter.class.getName(),"enableObjectName");  return;}  }
class C{  public static byte[] marshalArgument(Map<String,Object> args) throws SQLException {  assert args != null;  try {    return MARSHALLER.marshal(args);  } catch (  IgniteCheckedException e) {    throw new SQLException("Failed to unmarshal result.",e);  }}  }
class C{  public ReadRequest(ContentFormat format,String path){  this(format,new LwM2mPath(path));}  }
class C{  public int cardinality(){  if (this.isNoView)   return this.elements.size(); else   return super.cardinality();}  }
class C{  public void dumpDebugFile(){  try {    File f=File.createTempFile("elki-debug",".svg");    f.deleteOnExit();    this.saveAsSVG(f);    LoggingUtil.warning("Saved debug file to: " + f.getAbsolutePath());  } catch (  Throwable err) {  }}  }
class C{  public void testFetchingPopulatedLocationTree_doesNotCauseNewSync(){  when(mMockAppModel.isFullModelAvailable()).thenReturn(true);  mController.init();  mController.attachFragmentUi(mMockFragmentUi);  LocationTree locationTree=FakeAppLocationTreeFactory.build();  mFakeEventBus.post(new AppLocationTreeFetchedEvent(locationTree));  assertTrue(!mFakeSyncManager.isSyncActive());}  }
class C{  public void removeAllTags(){  mTagList=emptyList;}  }
class C{  public OperationFrame(){  if (log.isDebugEnabled()) {    this.opId=UUID.randomUUID().toString();    log.debug(String.format("opId=%s START operation",this.opId));  }}  }
class C{  public static void forEachFileInFolder(final File folder,final Function<File,Void> function){  Validate.notNull(function);  final Collection<File> files=FileUtils.listFiles(folder,TrueFileFilter.TRUE,FalseFileFilter.INSTANCE);  int processedNumber=0;  for (  final File file : files) {    try {      function.apply(file);    } catch (    final Exception e) {      throw new RuntimeException("Problem while applying function on file: " + file,e);    }    processedNumber++;  }  logSuccess(processedNumber);}  }
class C{  void clear(){  reset();  restart();}  }
class C{  protected AbstractJSLibTest(JSLibSingleTestConfig config){  this.config=config;}  }
class C{  private int gapSize(){  return fGapEnd - fGapStart;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.656 -0500",hash_original_method="55AE9D2665222680CD04F733708ADD28",hash_generated_method="9FD604C75922F775EE3B6BFFCC00423B") public final boolean isItalic(){  return 1 == ((getStyle() & ITALIC) + 0);}  }
class C{  public boolean hasNext(){  return nextLine != null;}  }
class C{  public int readFWord(int index){  return this.readShort(index);}  }
class C{  protected RoutedRequest handleResponse(RoutedRequest roureq,HttpResponse response,HttpContext context) throws HttpException, IOException {  HttpRoute route=roureq.getRoute();  HttpHost proxy=route.getProxyHost();  RequestWrapper request=roureq.getRequest();  HttpParams params=request.getParams();  if (HttpClientParams.isRedirecting(params) && this.redirectHandler.isRedirectRequested(response,context)) {    if (redirectCount >= maxRedirects) {      throw new RedirectException("Maximum redirects (" + maxRedirects + ") exceeded");    }    redirectCount++;    URI uri=this.redirectHandler.getLocationURI(response,context);    HttpHost newTarget=new HttpHost(uri.getHost(),uri.getPort(),uri.getScheme());    HttpGet redirect=new HttpGet(uri);    HttpRequest orig=request.getOriginal();    redirect.setHeaders(orig.getAllHeaders());    RequestWrapper wrapper=new RequestWrapper(redirect);    wrapper.setParams(params);    HttpRoute newRoute=determineRoute(newTarget,wrapper,context);    RoutedRequest newRequest=new RoutedRequest(wrapper,newRoute);    if (this.log.isDebugEnabled()) {      this.log.debug("Redirecting to '" + uri + "' via "+ newRoute);    }    return newRequest;  }  CredentialsProvider credsProvider=(CredentialsProvider)context.getAttribute(ClientContext.CREDS_PROVIDER);  if (credsProvider != null && HttpClientParams.isAuthenticating(params)) {    if (this.targetAuthHandler.isAuthenticationRequested(response,context)) {      HttpHost target=(HttpHost)context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);      if (target == null) {        target=route.getTargetHost();      }      this.log.debug("Target requested authentication");      Map<String,Header> challenges=this.targetAuthHandler.getChallenges(response,context);      try {        processChallenges(challenges,this.targetAuthState,this.targetAuthHandler,response,context);      } catch (      AuthenticationException ex) {        if (this.log.isWarnEnabled()) {          this.log.warn("Authentication error: " + ex.getMessage());          return null;        }      }      updateAuthState(this.targetAuthState,target,credsProvider);      if (this.targetAuthState.getCredentials() != null) {        return roureq;      } else {        return null;      }    } else {      this.targetAuthState.setAuthScope(null);    }    if (this.proxyAuthHandler.isAuthenticationRequested(response,context)) {      this.log.debug("Proxy requested authentication");      Map<String,Header> challenges=this.proxyAuthHandler.getChallenges(response,context);      try {        processChallenges(challenges,this.proxyAuthState,this.proxyAuthHandler,response,context);      } catch (      AuthenticationException ex) {        if (this.log.isWarnEnabled()) {          this.log.warn("Authentication error: " + ex.getMessage());          return null;        }      }      updateAuthState(this.proxyAuthState,proxy,credsProvider);      if (this.proxyAuthState.getCredentials() != null) {        return roureq;      } else {        return null;      }    } else {      this.proxyAuthState.setAuthScope(null);    }  }  return null;}  }
class C{  public void flush(){  if (ps != null) {    if (lineBuffer.length() != 0) {      flushLine(false);    }    ps.flush();  }}  }
class C{  public static String[] nullToEmpty(String[] array){  return array == null ? EMPTY_STRING_ARRAY : array;}  }
class C{  public LocalUnitPair(Local local,Unit unit){  this.local=local;  this.unit=unit;}  }
class C{  void update(){  if (indexQuery != null) {    indexQuery.fire(indexQueryData);  }  if (contentQuery != null && (contentQueryData != null)) {    contentQuery.fire(contentQueryData);  }}  }
class C{  private static void correctCodeWordVertices(ResultPoint[] vertices,boolean upsideDown){  float v0x=vertices[0].getX();  float v0y=vertices[0].getY();  float v2x=vertices[2].getX();  float v2y=vertices[2].getY();  float v4x=vertices[4].getX();  float v4y=vertices[4].getY();  float v6x=vertices[6].getX();  float v6y=vertices[6].getY();  float skew=v4y - v6y;  if (upsideDown) {    skew=-skew;  }  if (skew > SKEW_THRESHOLD) {    float deltax=v6x - v0x;    float deltay=v6y - v0y;    float delta2=deltax * deltax + deltay * deltay;    float correction=(v4x - v0x) * deltax / delta2;    vertices[4]=new ResultPoint(v0x + correction * deltax,v0y + correction * deltay);  } else   if (-skew > SKEW_THRESHOLD) {    float deltax=v2x - v4x;    float deltay=v2y - v4y;    float delta2=deltax * deltax + deltay * deltay;    float correction=(v2x - v6x) * deltax / delta2;    vertices[6]=new ResultPoint(v2x - correction * deltax,v2y - correction * deltay);  }  float v1x=vertices[1].getX();  float v1y=vertices[1].getY();  float v3x=vertices[3].getX();  float v3y=vertices[3].getY();  float v5x=vertices[5].getX();  float v5y=vertices[5].getY();  float v7x=vertices[7].getX();  float v7y=vertices[7].getY();  skew=v7y - v5y;  if (upsideDown) {    skew=-skew;  }  if (skew > SKEW_THRESHOLD) {    float deltax=v7x - v1x;    float deltay=v7y - v1y;    float delta2=deltax * deltax + deltay * deltay;    float correction=(v5x - v1x) * deltax / delta2;    vertices[5]=new ResultPoint(v1x + correction * deltax,v1y + correction * deltay);  } else   if (-skew > SKEW_THRESHOLD) {    float deltax=v3x - v5x;    float deltay=v3y - v5y;    float delta2=deltax * deltax + deltay * deltay;    float correction=(v3x - v7x) * deltax / delta2;    vertices[7]=new ResultPoint(v3x - correction * deltax,v3y - correction * deltay);  }}  }
class C{  public DrawerBuilder withActivity(@NonNull Activity activity){  this.mRootView=(ViewGroup)activity.findViewById(android.R.id.content);  this.mActivity=activity;  this.mLayoutManager=new LinearLayoutManager(mActivity);  return this;}  }
class C{  public void addAllUnique(Collection<Artist> ps){synchronized (mArtists) {    boolean didChange=false;    for (    Artist p : ps) {      if (!mArtists.contains(p) && p != null) {        mArtists.add(p);        didChange=true;      }    }    if (didChange) {      sortList();    }  }}  }
class C{  public boolean evaluateIsZero(final Vector v){  return Math.abs(evaluate(v)) < MINIMUM_RESOLUTION;}  }
class C{  public void createAdmin() throws Exception {  MRole role=new MRole(getCtx(),p_AD_Role_ID,get_TrxName());  role.setUserDiscount(BigDecimal.valueOf(0.00));  role.setIsPersonalAccess(true);  role.setIsAccessAllOrgs(false);  role.setUserLevel(MRole.USERLEVEL_Organization);  role.saveEx();  MUser user=new MUser(getCtx(),p_SalesRep_ID,get_TrxName());  user.setIsFullBPAccess(true);  if (p_userPIN != null) {    int id[]=MUser.getAllIDs(MUser.Table_Name," AD_Client_ID=" + Env.getAD_Client_ID(getCtx()) + " and userPin='"+ p_userPIN+ "'",null);    if (id.length > 0)     throw new IllegalArgumentException("User Pin Already exists"); else     user.setUserPIN(p_userPIN);  }  user.saveEx();  String whereClause=" AD_Role_ID=" + role.get_ID();  int roleMenuIds[]=MRoleMenu.getAllIDs(MRoleMenu.Table_Name,whereClause,get_TrxName());  for (int i=0; i < roleMenuIds.length; i++) {    MRoleMenu roleMenu=new MRoleMenu(getCtx(),roleMenuIds[i],get_TrxName());    roleMenu.delete(true);  }  POSMenuFactory posMFactory=POSMenuFactory.getFactoryInstance(getCtx());  Iterator keyIter=posMFactory.getAllKeys(getCtx()).iterator();  while (keyIter.hasNext()) {    String key=(String)keyIter.next();    MWebMenu menu=(MWebMenu)posMFactory.get(getCtx(),key);    MRoleMenu roleMenu=new MRoleMenu(getCtx(),0,get_TrxName());    roleMenu.setAD_Role_ID(role.get_ID());    roleMenu.setU_WebMenu_ID(menu.get_ID());    PoManager.save(roleMenu);  }  return;}  }
class C{  public Executor usingAlgorithmFactory(AlgorithmFactory algorithmFactory){  this.algorithmFactory=algorithmFactory;  return this;}  }
class C{  static DistributionLocatorConfig createConfigFor(String host,int port,InetAddress bindAddress){  TcpClient client=new TcpClient();  String[] info=new String[]{"unknown","unknown"};  try {    client=new TcpClient();    if (bindAddress != null) {      info=client.getInfo(bindAddress,port);    } else {      info=client.getInfo(InetAddressUtil.toInetAddress(host),port);    }    if (info == null) {      return null;    }  } catch (  GemFireConfigException e) {  }  DistributionLocatorConfigImpl config=new DistributionLocatorConfigImpl();  config.setHost(host);  config.setPort(port);  if (bindAddress != null) {    config.setBindAddress(bindAddress.getHostAddress());  }  config.setWorkingDirectory(info[0]);  config.setProductDirectory(info[1]);  return config;}  }
class C{  public UnconfirmedTransactionMetaData(final Hash innerTransactionHash){  this.innerTransactionHash=innerTransactionHash;}  }
class C{  public void testDivisionKnuthOneDigitByOneDigit(){  byte aBytes[]={113,-83,123,-5};  byte bBytes[]={2,-3,-4,-5};  int aSign=1;  int bSign=-1;  byte rBytes[]={-37};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  static private int bytes2u(final byte inp){  return inp & 0xff;}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=-1;    if (fullExpire) {      entry.ttl=-1;    }    put(key,entry);  }}  }
class C{  @Override public int hashCode(){  int hash=is_final ? 1 : 0;  hash^=hash * 31 + this.labels.length;  for (  int c : this.labels)   hash^=hash * 31 + c;  for (  State s : this.states) {    hash^=System.identityHashCode(s);  }  return hash;}  }
class C{  public DeflaterEstimatorHjg(){}  }
class C{  public void clearformatos(){  formatos.clear();}  }
class C{  public List<JCVariableDecl> translateVarDefs(List<JCVariableDecl> trees){  for (List<JCVariableDecl> l=trees; l.nonEmpty(); l=l.tail)   l.head=translate(l.head);  return trees;}  }
class C{  private static void findAnnotations(ClassFile cf,Method m,String name,List<TypeAnnotation> annos){  int index=m.attributes.getIndex(cf.constant_pool,name);  if (index != -1) {    Attribute attr=m.attributes.get(index);    assert attr instanceof RuntimeTypeAnnotations_attribute;    RuntimeTypeAnnotations_attribute tAttr=(RuntimeTypeAnnotations_attribute)attr;    annos.addAll(Arrays.asList(tAttr.annotations));  }  int cindex=m.attributes.getIndex(cf.constant_pool,Attribute.Code);  if (cindex != -1) {    Attribute cattr=m.attributes.get(cindex);    assert cattr instanceof Code_attribute;    Code_attribute cAttr=(Code_attribute)cattr;    index=cAttr.attributes.getIndex(cf.constant_pool,name);    if (index != -1) {      Attribute attr=cAttr.attributes.get(index);      assert attr instanceof RuntimeTypeAnnotations_attribute;      RuntimeTypeAnnotations_attribute tAttr=(RuntimeTypeAnnotations_attribute)attr;      annos.addAll(Arrays.asList(tAttr.annotations));    }  }}  }
class C{  protected void drawCropGrid(@NonNull Canvas canvas){  if (mShowCropGrid) {    if (mGridPoints == null && !mCropViewRect.isEmpty()) {      mGridPoints=new float[(mCropGridRowCount) * 4 + (mCropGridColumnCount) * 4];      int index=0;      for (int i=0; i < mCropGridRowCount; i++) {        mGridPoints[index++]=mCropViewRect.left;        mGridPoints[index++]=(mCropViewRect.height() * (((float)i + 1.0f) / (float)(mCropGridRowCount + 1))) + mCropViewRect.top;        mGridPoints[index++]=mCropViewRect.right;        mGridPoints[index++]=(mCropViewRect.height() * (((float)i + 1.0f) / (float)(mCropGridRowCount + 1))) + mCropViewRect.top;      }      for (int i=0; i < mCropGridColumnCount; i++) {        mGridPoints[index++]=(mCropViewRect.width() * (((float)i + 1.0f) / (float)(mCropGridColumnCount + 1))) + mCropViewRect.left;        mGridPoints[index++]=mCropViewRect.top;        mGridPoints[index++]=(mCropViewRect.width() * (((float)i + 1.0f) / (float)(mCropGridColumnCount + 1))) + mCropViewRect.left;        mGridPoints[index++]=mCropViewRect.bottom;      }    }    if (mGridPoints != null) {      canvas.drawLines(mGridPoints,mCropGridPaint);    }  }  if (mShowCropFrame) {    canvas.drawRect(mCropViewRect,mCropFramePaint);  }  if (mIsFreestyleCropEnabled) {    canvas.save();    mTempRect.set(mCropViewRect);    mTempRect.inset(mCropRectCornerTouchAreaLineLength,-mCropRectCornerTouchAreaLineLength);    canvas.clipRect(mTempRect,Region.Op.DIFFERENCE);    mTempRect.set(mCropViewRect);    mTempRect.inset(-mCropRectCornerTouchAreaLineLength,mCropRectCornerTouchAreaLineLength);    canvas.clipRect(mTempRect,Region.Op.DIFFERENCE);    canvas.drawRect(mCropViewRect,mCropFrameCornersPaint);    canvas.restore();  }}  }
class C{  private boolean generateCarLoadFromStaging(Car car) throws BuildFailedException {  if (car.getTrack() == null || !car.getTrack().getTrackType().equals(Track.STAGING) || (!car.getTrack().isAddCustomLoadsAnySpurEnabled() && !car.getTrack().isAddCustomLoadsEnabled()) || !car.getLoadName().equals(CarLoads.instance().getDefaultEmptyName()) || car.getDestination() != null || car.getFinalDestination() != null) {    log.debug("No load generation for car ({}) isAddLoadsAnySpurEnabled: " + (car.getTrack().isAddCustomLoadsAnySpurEnabled() ? "true" : "false") + ", car load ({}) destination ({}) final destination ({})",car.toString(),car.getLoadName(),car.getDestinationName(),car.getFinalDestinationName());    if (car.getTrack() != null && car.getTrack().getTrackType().equals(Track.STAGING) && car.getTrack().isAddCustomLoadsAnySpurEnabled() && car.getLoadName().equals(CarLoads.instance().getDefaultEmptyName())) {      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildCarNoLoadGenerated"),new Object[]{car.toString(),car.getLoadName(),car.getDestinationName(),car.getFinalDestinationName()}));    }    return false;  }  addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildSearchTrackNewLoad"),new Object[]{car.toString(),car.getTypeName(),car.getLoadName(),car.getLocationName(),car.getTrackName()}));  if (CarLoads.instance().getNames(car.getTypeName()).size() == 2) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCarNoCustomLoad"),new Object[]{car.toString(),car.getTypeName()}));    return false;  }  if (car.getKernel() != null) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCarLeadKernel"),new Object[]{car.toString(),car.getKernelName(),car.getKernel().getSize(),car.getKernel().getTotalLength(),Setup.getLengthUnit().toLowerCase()}));  }  List<Track> tracks=locationManager.getTracksByMoves(Track.SPUR);  log.debug("Found {} spurs",tracks.size());  for (  Track track : tracks) {    ScheduleItem si=getScheduleItem(car,track);    if (si == null) {      continue;    }    if (car.getTrack().isAddCustomLoadsEnabled() && _train.getRoute().getLastLocationByName(track.getLocation().getName()) == null) {      continue;    }    String oldCarLoad=car.getLoadName();    car.setLoadName(si.getReceiveLoadName());    String status=car.testDestination(track.getLocation(),track);    if (!status.equals(Track.OKAY) && !status.startsWith(Track.LENGTH)) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildNoDestTrackNewLoad"),new Object[]{track.getLocation().getName(),track.getName(),car.toString(),si.getReceiveLoadName(),status}));      car.setLoadName(oldCarLoad);      continue;    }    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildTrySpurLoad"),new Object[]{track.getLocation().getName(),track.getName(),car.getLoadName()}));    if (!car.getTrack().acceptsDestination(track.getLocation())) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildDestinationNotServiced"),new Object[]{track.getLocation().getName(),car.getTrackName()}));      car.setLoadName(oldCarLoad);      continue;    }    if (!track.isSpaceAvailable(car)) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildNoDestTrackSpace"),new Object[]{car.toString(),track.getLocation().getName(),track.getName(),track.getNumberOfCarsInRoute(),track.getReservedInRoute(),Setup.getLengthUnit().toLowerCase(),track.getReservationFactor()}));      car.setLoadName(oldCarLoad);      continue;    }    car.setFinalDestination(track.getLocation());    car.setFinalDestinationTrack(track);    if (Router.instance().setDestination(car,_train,_buildReport) && car.getDestination() != null) {      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildCreateNewLoadForCar"),new Object[]{car.toString(),si.getReceiveLoadName(),track.getLocation().getName(),track.getName()}));      car.setLoadGeneratedFromStaging(true);      car.updateKernel();      track.bumpSchedule();      return true;    }    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCanNotRouteCar"),new Object[]{car.toString(),si.getReceiveLoadName(),track.getLocation().getName(),track.getName()}));    car.setDestination(null,null);    car.setLoadName(oldCarLoad);    car.setFinalDestination(null);    car.setFinalDestinationTrack(null);  }  addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildUnableNewLoad"),new Object[]{car.toString()}));  return false;}  }
class C{  public static void openBrowser(String url){  lastUrl=url;}  }
class C{  protected JMenu makeMenu(){  if (_circuitMenu == null) {    _circuitMenu=new JMenu(Bundle.getMessage("CircuitBuilder"));    _circuitMap=new HashMap<OBlock,ArrayList<Positionable>>();    OBlockManager manager=InstanceManager.getDefault(jmri.jmrit.logix.OBlockManager.class);    String[] sysNames=manager.getSystemNameArray();    for (int i=0; i < sysNames.length; i++) {      OBlock block=manager.getBySystemName(sysNames[i]);      _circuitMap.put(block,new ArrayList<Positionable>());    }  }  makeCircuitMenu();  return _circuitMenu;}  }
class C{  public Select<T> sortAsc(String... columns){  for (  String column : columns) {    mSortingOrderList.add(column + " ASC");  }  return this;}  }
class C{  public synchronized void addSeries(TimeSeries series){  if (oneRangePerSeries) {    Paint currPaint=DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE[raIndex % DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE.length];    XYPlot plot=(XYPlot)chart.getPlot();    plot.setDataset(raIndex,new TimeSeriesCollection(series));    NumberAxis axis=new NumberAxis();    axis.setTickLabelFont(legendFont);    axis.setAxisLinePaint(currPaint);    axis.setTickLabelPaint(currPaint);    axis.setTickMarkPaint(currPaint);    plot.setRangeAxis(raIndex,axis);    plot.setRangeAxisLocation(raIndex,raIndex % 2 == 0 ? AxisLocation.TOP_OR_LEFT : AxisLocation.BOTTOM_OR_RIGHT);    plot.mapDatasetToRangeAxis(raIndex,raIndex);    XYItemRenderer renderer=new XYLineAndShapeRenderer(true,false);    renderer.setBaseToolTipGenerator(toolTipGen);    renderer.setSeriesPaint(0,currPaint);    plot.setRenderer(raIndex,renderer);    raIndex++;  }  dataset.addSeries(series);}  }
class C{  public DynamicObject createObject(){  return emptyShape.newInstance();}  }
class C{  public int countNumSpillElements(){  int count=0;  for (  GCIRMapElement elem : this) {    count+=elem.countNumSpillElements();  }  return count;}  }
class C{  public void removeModifyListener(final ModifyListener listener){  this.checkWidget();  this.modifyListeners.remove(listener);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public ColladaTextureOrColor(String ns){  super(ns);}  }
class C{  public void processMessage(SIPMessage sipMessage) throws Exception {  try {    if (sipMessage.getFrom() == null || sipMessage.getTo() == null || sipMessage.getCallId() == null || sipMessage.getCSeq() == null || sipMessage.getViaHeaders() == null) {      String badmsg=sipMessage.encode();      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug(">>> Dropped Bad Msg");        sipStack.getStackLogger().logDebug(badmsg);      }      return;    }    ViaList viaList=sipMessage.getViaHeaders();    if (sipMessage instanceof SIPRequest) {      Via v=(Via)viaList.getFirst();      Hop hop=sipStack.addressResolver.resolveAddress(v.getHop());      this.peerProtocol=v.getTransport();      try {        this.peerAddress=mySock.getInetAddress();        if (v.hasParameter(Via.RPORT) || !hop.getHost().equals(this.peerAddress.getHostAddress())) {          v.setParameter(Via.RECEIVED,this.peerAddress.getHostAddress());        }        v.setParameter(Via.RPORT,Integer.toString(this.peerPort));      } catch (      java.text.ParseException ex) {        InternalErrorHandler.handleException(ex,sipStack.getStackLogger());      }      if (!this.isCached) {        ((TCPMessageProcessor)this.messageProcessor).cacheMessageChannel(this);        this.isCached=true;        int remotePort=((java.net.InetSocketAddress)mySock.getRemoteSocketAddress()).getPort();        String key=IOHandler.makeKey(mySock.getInetAddress(),remotePort);        sipStack.ioHandler.putSocket(key,mySock);      }    }    long receptionTime=System.currentTimeMillis();    if (sipMessage instanceof SIPRequest) {      SIPRequest sipRequest=(SIPRequest)sipMessage;      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("----Processing Message---");      }      if (this.sipStack.getStackLogger().isLoggingEnabled(ServerLogger.TRACE_MESSAGES)) {        sipStack.serverLogger.logMessage(sipMessage,this.getPeerHostPort().toString(),this.getMessageProcessor().getIpAddress().getHostAddress() + ":" + this.getMessageProcessor().getPort(),false,receptionTime);      }      if (sipStack.getMaxMessageSize() > 0 && sipRequest.getSize() + (sipRequest.getContentLength() == null ? 0 : sipRequest.getContentLength().getContentLength()) > sipStack.getMaxMessageSize()) {        SIPResponse sipResponse=sipRequest.createResponse(SIPResponse.MESSAGE_TOO_LARGE);        this.sendMessage(sipResponse,false);        throw new Exception("Message size exceeded");      }      ServerRequestInterface sipServerRequest=sipStack.newSIPServerRequest(sipRequest,this);      if (sipServerRequest != null) {        try {          sipServerRequest.processRequest(sipRequest,this);        }  finally {          if (sipServerRequest instanceof SIPTransaction) {            SIPServerTransaction sipServerTx=(SIPServerTransaction)sipServerRequest;            if (!sipServerTx.passToListener())             ((SIPTransaction)sipServerRequest).releaseSem();          }        }      } else {        if (sipStack.isLoggingEnabled())         this.sipStack.getStackLogger().logWarning("Dropping request -- could not acquire semaphore in 10 sec");      }    } else {      SIPResponse sipResponse=(SIPResponse)sipMessage;      try {        sipResponse.checkHeaders();      } catch (      ParseException ex) {        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logError("Dropping Badly formatted response message >>> " + sipResponse);        return;      }      if (sipStack.getMaxMessageSize() > 0 && sipResponse.getSize() + (sipResponse.getContentLength() == null ? 0 : sipResponse.getContentLength().getContentLength()) > sipStack.getMaxMessageSize()) {        if (sipStack.isLoggingEnabled())         this.sipStack.getStackLogger().logDebug("Message size exceeded");        return;      }      ServerResponseInterface sipServerResponse=sipStack.newSIPServerResponse(sipResponse,this);      if (sipServerResponse != null) {        try {          if (sipServerResponse instanceof SIPClientTransaction && !((SIPClientTransaction)sipServerResponse).checkFromTag(sipResponse)) {            if (sipStack.isLoggingEnabled())             sipStack.getStackLogger().logError("Dropping response message with invalid tag >>> " + sipResponse);            return;          }          sipServerResponse.processResponse(sipResponse,this);        }  finally {          if (sipServerResponse instanceof SIPTransaction && !((SIPTransaction)sipServerResponse).passToListener())           ((SIPTransaction)sipServerResponse).releaseSem();        }      } else {        sipStack.getStackLogger().logWarning("Application is blocked -- could not acquire semaphore -- dropping response");      }    }  }  finally {  }}  }
class C{  public boolean removeEntry(Entry entry){  return removeElement(Entry.KEY,entry);}  }
class C{  public void propertyChange(PropertyChangeEvent pce){  if (pce.getPropertyName() == OMDrawingTool.LoadersProperty) {    Object obj=pce.getNewValue();    if (obj instanceof Vector) {      Vector<EditToolLoader> loaders=(Vector<EditToolLoader>)obj;      setLoaders(loaders.iterator());      resetGUI();    }  }}  }
class C{  private void sendServerInternalErrorResponse(SIPRequest sipRequest,SIPServerTransaction transaction){  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("Sending 500 response for out of sequence message");  SIPResponse sipResponse=sipRequest.createResponse(Response.SERVER_INTERNAL_ERROR);  sipResponse.setReasonPhrase("Request out of order");  if (MessageFactoryImpl.getDefaultServerHeader() != null) {    ServerHeader serverHeader=MessageFactoryImpl.getDefaultServerHeader();    sipResponse.setHeader(serverHeader);  }  try {    RetryAfter retryAfter=new RetryAfter();    retryAfter.setRetryAfter(10);    sipResponse.setHeader(retryAfter);    sipStack.addTransactionPendingAck(transaction);    transaction.sendResponse(sipResponse);    transaction.releaseSem();  } catch (  Exception ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logError("Problem sending response",ex);    transaction.releaseSem();    sipStack.removeTransaction(transaction);  }}  }
class C{  public String makeBinaryTipText(){  return "Make resulting attributes binary.";}  }
class C{  @Override public ModelsType marshal(Map<String,Model> map){  return (map == null || map.isEmpty() ? null : new ModelsType(new HashSet<Model>(map.values())));}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public PropertiesAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,InputEvent.ALT_MASK));  putValue(LONG_DESCRIPTION,res.getString("PropertiesAction.statusbar"));  putValue(NAME,res.getString("PropertiesAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("PropertiesAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("PropertiesAction.image")))));}  }
class C{  protected void onResultAvailable(final T result) throws Exception {}  }
class C{  public static void plotLines(double[] a){  int n=a.length;  StdDraw.setXscale(-1,n);  StdDraw.setPenRadius();  for (int i=1; i < n; i++) {    StdDraw.line(i - 1,a[i - 1],i,a[i]);  }}  }
class C{  public MethodInvocation toMethod(final String methodName){  assert ast != null : "Cannot find ast for method: " + methodName + ". Inner = "+ inner;  final MethodInvocation $=ast.newMethodInvocation();  $.setExpression(inner);  $.setName(ast.newSimpleName(methodName));  return $;}  }
class C{  public int size(){  return nodes.length;}  }
class C{  public Bitmap decodeSampledBitmapFromFile(File inputFile,int reqWidth,int reqHeight){  InputStream is=null;  try {    try {      is=new FileInputStream(inputFile);    } catch (    Exception e) {      return null;    }    final BitmapFactory.Options options=new BitmapFactory.Options();    options.inJustDecodeBounds=true;    BitmapFactory.decodeStream(is,null,options);    options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);    options.inJustDecodeBounds=false;    options.inPurgeable=true;    try {      is=new FileInputStream(inputFile);    } catch (    FileNotFoundException e) {      return null;    }    return BitmapFactory.decodeStream(is,null,options);  }  finally {    try {      if (is != null) {        is.close();      }    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  protected void invalidate(boolean first){  super.invalidate(first);  getParent().invalidate(true);}  }
class C{  public SyncTVShows(final int hostId,Bundle syncExtras){  this.hostId=hostId;  this.tvshowId=-1;  this.syncExtras=syncExtras;}  }
class C{  public static void checkFlagsArgument(final int requestedFlags,final int allowedFlags){  if ((requestedFlags & allowedFlags) != requestedFlags) {    throw new IllegalArgumentException("Requested flags 0x" + Integer.toHexString(requestedFlags) + ", but only 0x"+ Integer.toHexString(allowedFlags)+ " are allowed");  }}  }
class C{  public static void logStderr(String msg,Throwable e){  try {    long now=CurrentTime.currentTime();    _origSystemErr.println(msg);    _origSystemErr.flush();  } catch (  Throwable e1) {  }}  }
class C{  protected void parseTranslate() throws ParseException, IOException {  current=reader.read();  if (current != 'r') {    reportCharacterExpectedError('r',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'a') {    reportCharacterExpectedError('a',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'n') {    reportCharacterExpectedError('n',current);    skipTransform();    return;  }  current=reader.read();  if (current != 's') {    reportCharacterExpectedError('s',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'l') {    reportCharacterExpectedError('l',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'a') {    reportCharacterExpectedError('a',current);    skipTransform();    return;  }  current=reader.read();  if (current != 't') {    reportCharacterExpectedError('t',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'e') {    reportCharacterExpectedError('e',current);    skipTransform();    return;  }  current=reader.read();  skipSpaces();  if (current != '(') {    reportCharacterExpectedError('(',current);    skipTransform();    return;  }  current=reader.read();  skipSpaces();  float tx=parseFloat();  skipSpaces();switch (current) {case ')':    transformListHandler.translate(tx);  return;case ',':current=reader.read();skipSpaces();}float ty=parseFloat();skipSpaces();if (current != ')') {reportCharacterExpectedError(')',current);skipTransform();return;}transformListHandler.translate(tx,ty);}  }
class C{  public void removeEntryPassword(String alias){  Password removedPassword=entryPasswords.remove(alias);  if (removedPassword != null) {    removedPassword.nullPassword();  }}  }
class C{  public PrivateKey(final BigInteger value){  this.value=value;}  }
class C{  public boolean supportsExpressionsInOrderBy() throws SQLException {  return false;}  }
class C{  public static String toCommandLine(Object obj){  return Utils.toCommandLine(obj);}  }
class C{  public Boolean isDelegatable(){  return delegatable;}  }
class C{  public void hide(Animation anim){  hide(true,anim);}  }
class C{  public RunSimulationAction(SessionEditorNode sessionEditorNode){  super("Run Simulation...");  this.sessionEditorNode=sessionEditorNode;}  }
class C{  public int parse(char c,char[] ia,int ip,int il){  assert (ia[ip] == c);  if (Surrogate.isHigh(c)) {    if (il - ip < 2) {      error=CoderResult.UNDERFLOW;      return -1;    }    char d=ia[ip + 1];    if (Surrogate.isLow(d)) {      character=toUCS4(c,d);      isPair=true;      error=null;      return character;    }    error=CoderResult.malformedForLength(1);    return -1;  }  if (Surrogate.isLow(c)) {    error=CoderResult.malformedForLength(1);    return -1;  }  character=c;  isPair=false;  error=null;  return character;}  }
class C{  public RectF execute(PDFRenderer state){  RectF rect=null;  if ((style & FILL) != 0) {    rect=state.fill(gp);    if (gp != null) {      state.setLastShape(gp);    }  }  if ((style & STROKE) != 0) {    RectF strokeRect=state.stroke(gp);    if (rect == null) {      rect=strokeRect;    } else {      rect.union(strokeRect);    }  }  if ((style & CLIP) != 0) {    state.clip(gp);  }  return rect;}  }
class C{  Values(){  initializeTable(INITIAL_SIZE);  this.size=0;  this.tombstones=0;}  }
class C{  public DtoAttributeServiceImpl(final AttributeService attributeService,final EtypeService etypeService,final AttributeGroupService attributeGroupService,final DtoFactory dtoFactory,final AdaptersRepository adapters){  super(dtoFactory,attributeService,adapters);  this.etypeService=etypeService;  this.attributeGroupService=attributeGroupService;}  }
class C{  public static double hypot(double a,double b){  double r;  if (Math.abs(a) > Math.abs(b)) {    r=b / a;    r=Math.abs(a) * Math.sqrt(1 + r * r);  } else   if (b != 0) {    r=a / b;    r=Math.abs(b) * Math.sqrt(1 + r * r);  } else {    r=0.0;  }  return r;}  }
class C{  @Override public void pauseScan(){  lock.lock();  try {    if (State.RUNNING.equals(state)) {      spiderThread.pauseScan();      state=State.PAUSED;    }  }  finally {    lock.unlock();  }}  }
class C{  public DefaultTableModel(){  this(0,0);}  }
class C{  public void close(){  if (mBluetoothGatt == null) {    return;  }  mBluetoothGatt.close();  mBluetoothGatt=null;}  }
class C{  public final double readDouble() throws java.io.IOException {  return 0.0d;}  }
class C{  @Override @Deprecated public void connect(SocketAddress remoteAddr,int timeout) throws IOException, SocketTimeoutException {  if (DBG)   log("connect(remoteAddr, timeout) EX DEPRECATED");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void corruptFile() throws IOException {  FileWriter writer=null;  try {    writer=new FileWriter(file);    writer.append("foo bar!");  }  finally {    if (writer != null) {      writer.close();    }  }}  }
class C{  static void blur(int[] srcPixels,int[] dstPixels,int width,int height,int radius){  final int windowSize=radius * 2 + 1;  final int radiusPlusOne=radius + 1;  int sumAlpha;  int sumRed;  int sumGreen;  int sumBlue;  int srcIndex=0;  int dstIndex;  int pixel;  final int[] sumLookupTable=createSumLookupTable(windowSize);  final int[] indexLookupTable=createIndexLookupTable(width,radius);  for (int y=0; y < height; y++) {    sumAlpha=0;    sumRed=0;    sumGreen=0;    sumBlue=0;    dstIndex=y;    pixel=srcPixels[srcIndex];    sumAlpha+=radiusPlusOne * (pixel >> 24 & 0xFF);    sumRed+=radiusPlusOne * (pixel >> 16 & 0xFF);    sumGreen+=radiusPlusOne * (pixel >> 8 & 0xFF);    sumBlue+=radiusPlusOne * (pixel & 0xFF);    for (int i=1; i <= radius; i++) {      pixel=srcPixels[srcIndex + indexLookupTable[i]];      sumAlpha+=pixel >> 24 & 0xFF;      sumRed+=pixel >> 16 & 0xFF;      sumGreen+=pixel >> 8 & 0xFF;      sumBlue+=pixel & 0xFF;    }    for (int x=0; x < width; x++) {      dstPixels[dstIndex]=sumLookupTable[sumAlpha] << 24 | sumLookupTable[sumRed] << 16 | sumLookupTable[sumGreen] << 8 | sumLookupTable[sumBlue];      dstIndex+=height;      int nextPixelIndex=x + radiusPlusOne;      if (nextPixelIndex >= width) {        nextPixelIndex=width - 1;      }      int previousPixelIndex=x - radius;      if (previousPixelIndex < 0) {        previousPixelIndex=0;      }      final int nextPixel=srcPixels[srcIndex + nextPixelIndex];      final int previousPixel=srcPixels[srcIndex + previousPixelIndex];      sumAlpha+=nextPixel >> 24 & 0xFF;      sumAlpha-=previousPixel >> 24 & 0xFF;      sumRed+=nextPixel >> 16 & 0xFF;      sumRed-=previousPixel >> 16 & 0xFF;      sumGreen+=nextPixel >> 8 & 0xFF;      sumGreen-=previousPixel >> 8 & 0xFF;      sumBlue+=nextPixel & 0xFF;      sumBlue-=previousPixel & 0xFF;    }    srcIndex+=width;  }}  }
class C{  public void removeActivity(Activity activity){  if (activityStack == null) {    activityStack=new Stack<Activity>();  }  activityStack.remove(activity);}  }
class C{  public MaxRowExpression add(String propertyName){  this.getChildren().add(new PropertyValueExpression(propertyName));  return this;}  }
class C{  public boolean isSupported(DurationFieldType type){  return (indexOf(type) >= 0);}  }
class C{  public form(String action,String method,String enctype){  setAction(action);  setMethod(method);  setEncType(enctype);}  }
class C{  public void close(){  Diagnostic.progress("Finished: " + mName);}  }
class C{  AnnotationMirror createRegexAnnotation(int groupCount){  AnnotationBuilder builder=new AnnotationBuilder(processingEnv,Regex.class);  if (groupCount > 0) {    builder.setValue("value",groupCount);  }  return builder.build();}  }
class C{  protected void register(Serializable user,String userId){synchronized (applicationUsers) {    if (!applicationUsers.containsKey(user)) {      applicationUsers.putIfAbsent(user,synchronizedSet(new HashSet<String>(ESTIMATED_SESSIONS_PER_USER)));    }    applicationUsers.get(user).add(userId);  }}  }
class C{  public static String insertBreakingWhitespace(int lineLen,String original){  if (original == null || lineLen <= 0)   throw new IllegalArgumentException();  int length=original.length();  if (length <= lineLen)   return original;  int currPos=0;  StringBuilder retval=new StringBuilder();  while (length - currPos > lineLen) {    retval.append(original.substring(currPos,currPos + lineLen));    currPos+=lineLen;    retval.append(" ");  }  retval.append(original.substring(currPos,length));  return retval.toString();}  }
class C{  public TaskHandle enqueuePollTask(JobReference jobRef,TaskOptions chainedTask,Queue chainedTaskQueue) throws IOException {  ByteArrayOutputStream taskBytes=new ByteArrayOutputStream();  new ObjectOutputStream(taskBytes).writeObject(chainedTask);  return enqueuer.enqueue(getQueue(QUEUE),createCommonPollTask(jobRef).method(Method.POST).header(CHAINED_TASK_QUEUE_HEADER,chainedTaskQueue.getQueueName()).payload(taskBytes.toByteArray()));}  }
class C{  public static String removeSubstring(final String s,final int index,final int length,IntRef... wrappers){  for (  IntRef i : wrappers) {    if (i.get() > index) {      i.dec(length);    }  }  return s.substring(0,index) + s.substring(index + length);}  }
class C{  public DropTarget(Component c,DropTargetListener dtl) throws HeadlessException {  this(c,DnDConstants.ACTION_COPY_OR_MOVE,dtl,true,null);}  }
class C{  public long run(String[] args) throws Exception {  int size=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  Node[] objs=genObjs(size);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,objs,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,objs,nbatches);  return System.currentTimeMillis() - start;}  }
class C{  private int parseLimit(String text,int onError){  try {    return Integer.parseInt(text);  } catch (  NumberFormatException e) {    return onError;  }}  }
class C{  public static <REACTOR extends ReactBuilder>ReactPool<REACTOR> boundedPool(final Collection<REACTOR> reactors){  final ReactPool<REACTOR> r=new ReactPool<>(reactors.size());  reactors.forEach(null);  return r;}  }
class C{  public static int reflectionCompare(final Object lhs,final Object rhs,final String... excludeFields){  return reflectionCompare(lhs,rhs,false,null,excludeFields);}  }
class C{  private static boolean show(View view,CharSequence text){  if (TextUtils.isEmpty(text)) {    return false;  }  final int[] screenPos=new int[2];  final Rect displayFrame=new Rect();  view.getLocationOnScreen(screenPos);  view.getWindowVisibleDisplayFrame(displayFrame);  final Context context=view.getContext();  final int viewWidth=view.getWidth();  final int viewHeight=view.getHeight();  final int viewCenterX=screenPos[0] + viewWidth / 2;  final int screenWidth=context.getResources().getDisplayMetrics().widthPixels;  final int estimatedToastHeight=(int)(ESTIMATED_TOAST_HEIGHT_DIPS * context.getResources().getDisplayMetrics().density);  Toast cheatSheet=Toast.makeText(context,text,Toast.LENGTH_SHORT);  boolean showBelow=screenPos[1] < estimatedToastHeight;  if (showBelow) {    cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,viewCenterX - screenWidth / 2,screenPos[1] - displayFrame.top + viewHeight);  } else {    cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,viewCenterX - screenWidth / 2,screenPos[1] - displayFrame.top - estimatedToastHeight);  }  cheatSheet.show();  return true;}  }
class C{  public Directions origin(LatLon latLon){  request.origin(latLon.toLatLng());  return this;}  }
class C{  @SuppressWarnings("unchecked") private Iterable<Object> allParameters() throws Throwable {  FrameworkMethod parametersMethod=getParametersMethod();  if (parametersMethod != null) {    Object parameters=parametersMethod.invokeExplosively(null);    if (parameters instanceof Iterable) {      return (Iterable<Object>)parameters;    } else {      throw parametersMethodReturnedWrongType(parametersMethod);    }  }  FrameworkMethod parametersProviderMethod=getParametersProviderMethod();  if (parametersProviderMethod != null) {    Object provider=parametersProviderMethod.invokeExplosively(null);    if (provider instanceof Provider<?>) {      IInjectorProvider injectorProvider=InjectorProviders.getOrCreateInjectorProvider(getTestClass());      if (injectorProvider != null) {        Injector injector=injectorProvider.getInjector();        if (injector != null)         injector.injectMembers(provider);      }      Object parameters=((Provider<?>)provider).get();      if (parameters instanceof Iterable) {        return (Iterable<Object>)parameters;      }    }    throw parametersProviderMethodReturnedWrongType(parametersProviderMethod);  }  throw new Exception("No public static parameters method on class " + getTestClass().getName());}  }
class C{  @Ignore @Test public void testLoadPlayer() throws Exception {  DBTransaction transaction=TransactionPool.get().beginWork();  try {    MockStendlRPWorld.get();    final String characterName="modifyme";    final PlayerModifier mod=new PlayerModifier();    Player player=mod.loadPlayer(transaction,"");    assertThat(player,nullValue());    player=mod.loadPlayer(transaction,characterName);    assertThat(player,not(nullValue()));    assertThat(player.getName(),is(characterName));    TransactionPool.get().rollback(transaction);  } catch (  Exception e) {    TransactionPool.get().rollback(transaction);    throw e;  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("DbConnectionConfig[");  buffer.append("cntByDriver = ").append(m_cntByDriver);  buffer.append(", cntParam = ").append(m_cntParam);  buffer.append(", url = ").append(m_url);  buffer.append(", user = ").append(m_user);  buffer.append(", pwd = ").append(m_pwd);  buffer.append("]");  return buffer.toString();}  }
class C{  public static void removeClassFactory(Utils.ClassFactory classFactory){  getUserClassFactories().remove(classFactory);}  }
class C{  public static void restart(){  final Switchboard sb=Switchboard.getSwitchboard();  if (OS.isWindows) {    final File startType=new File(sb.getDataPath(),"DATA/yacy.noconsole".replace("/",File.separator));    String starterFile="startYACY_debug.bat";    if (startType.exists())     starterFile="startYACY.bat";    if (startParameter.startsWith("-gui"))     starterFile+=" " + startParameter;    try {      ConcurrentLog.info("RESTART","INITIATED");      final String script="@echo off" + serverCore.CRLF_STRING + "title YaCy restarter"+ serverCore.CRLF_STRING+ "set loading=YACY RESTARTER"+ serverCore.CRLF_STRING+ "echo %loading%"+ serverCore.CRLF_STRING+ "cd \""+ sb.getDataPath().toString()+ "/DATA/RELEASE/".replace("/",File.separator)+ "\""+ serverCore.CRLF_STRING+ ":WAIT"+ serverCore.CRLF_STRING+ "set loading=%loading%."+ serverCore.CRLF_STRING+ "cls"+ serverCore.CRLF_STRING+ "echo %loading%"+ serverCore.CRLF_STRING+ "ping -n 2 127.0.0.1 >nul"+ serverCore.CRLF_STRING+ "IF exist ..\\yacy.running goto WAIT"+ serverCore.CRLF_STRING+ "cd \""+ sb.getAppPath().toString()+ "\""+ serverCore.CRLF_STRING+ "start /MIN CMD /C "+ starterFile+ serverCore.CRLF_STRING;      final File scriptFile=new File(sb.getDataPath(),"DATA/RELEASE/restart.bat".replace("/",File.separator));      OS.deployScript(scriptFile,script);      ConcurrentLog.info("RESTART","wrote restart-script to " + scriptFile.getAbsolutePath());      OS.execAsynchronous(scriptFile);      ConcurrentLog.info("RESTART","script is running");      sb.terminate(10,"windows restart");    } catch (    final IOException e) {      ConcurrentLog.severe("RESTART","restart failed",e);    }  }  if (yacyBuildProperties.isPkgManager()) {    try {      ConcurrentLog.info("RESTART","INITIATED");      final String script="#!/bin/sh" + serverCore.LF_STRING + yacyBuildProperties.getRestartCmd()+ " >/var/lib/yacy/RELEASE/log"+ serverCore.LF_STRING;      final File scriptFile=new File(sb.getDataPath(),"DATA/RELEASE/restart.sh");      OS.deployScript(scriptFile,script);      ConcurrentLog.info("RESTART","wrote restart-script to " + scriptFile.getAbsolutePath());      OS.execAsynchronous(scriptFile);      ConcurrentLog.info("RESTART","script is running");    } catch (    final IOException e) {      ConcurrentLog.severe("RESTART","restart failed",e);    }  } else   if (OS.canExecUnix) {    try {      ConcurrentLog.info("RESTART","INITIATED");      final String script="#!/bin/sh" + serverCore.LF_STRING + "cd "+ sb.getDataPath()+ "/DATA/RELEASE/"+ serverCore.LF_STRING+ "while [ -f ../yacy.running ]; do"+ serverCore.LF_STRING+ "sleep 1"+ serverCore.LF_STRING+ "done"+ serverCore.LF_STRING+ "cd "+ sb.getAppPath()+ serverCore.LF_STRING+ "nohup ./startYACY.sh "+ (startParameter.startsWith("-gui") ? startParameter : "")+ " > /dev/null"+ serverCore.LF_STRING;      final File scriptFile=new File(sb.getDataPath(),"DATA/RELEASE/restart.sh");      OS.deployScript(scriptFile,script);      ConcurrentLog.info("RESTART","wrote restart-script to " + scriptFile.getAbsolutePath());      OS.execAsynchronous(scriptFile);      ConcurrentLog.info("RESTART","script is running");      sb.terminate(10,"unix restart");    } catch (    final IOException e) {      ConcurrentLog.severe("RESTART","restart failed",e);    }  }}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  @Override public boolean hasFailed(){  return failed;}  }
class C{  static boolean removeAllImpl(Set<?> set,Iterator<?> iterator){  boolean changed=false;  while (iterator.hasNext()) {    changed|=set.remove(iterator.next());  }  return changed;}  }
class C{  public static long toUtcTimeZone(long localTimeMillis){  return convertTimeZone(TimeZone.getDefault(),TimeZone.getTimeZone(TIMEZONE_UTC),localTimeMillis);}  }
class C{  public int normalize(char s[],int len){  for (int i=0; i < len; i++) {switch (s[i]) {case YEH:case DOTLESS_YEH:      s[i]=FARSI_YEH;    break;case KAF:  s[i]=KEHEH;break;case ZWNJ:if (i > 0 && s[i - 1] == HEH) {s[i - 1]=AE;}len=delete(s,i,len);i--;break;case HEH:if (i == len - 1) {s[i]=AE;}break;case TEH_MARBUTA:s[i]=AE;break;case HEH_DOACHASHMEE:s[i]=HEH;break;case REH:if (i == 0) {s[i]=RREH;}break;case RREH_ABOVE:s[i]=RREH;break;case TATWEEL:case KASRATAN:case DAMMATAN:case FATHATAN:case FATHA:case DAMMA:case KASRA:case SHADDA:case SUKUN:len=delete(s,i,len);i--;break;default :if (Character.getType(s[i]) == Character.FORMAT) {len=delete(s,i,len);i--;}}}return len;}  }
class C{  public OutSegment openWriter(){  if (isGcRequired()) {    _table.getGcService().gc(_seqGen.get());    _seqSinceGcCount=0;  }  _seqSinceGcCount++;  long sequence=_seqGen.get();  return openWriterSeq(sequence);}  }
class C{  public void onIdleEnd(){  _idleCount.decrementAndGet();  wake();}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  if (mCameraSource != null) {    mCameraSource.release();  }}  }
class C{  public static boolean registerSoftHammer(ItemStack aTool){  return registerTool(aTool,sSoftHammerList);}  }
class C{  public CachingTemplateResolver(){  this(new ConcurrentHashMap<String,URL>());}  }
class C{  public JSONStringer(){  super(new StringWriter());}  }
class C{  public ChebyshevII(int order,double epsilon,PassbandType type,double f1,double f2,double delta){  super(new AnalogChebyshevII(order,epsilon),type,f1,f2,delta);}  }
class C{  public void addIndex(int idx,IIndex index){  if (index != null) {    indices.add(idx,index);  }}  }
class C{  public void clearVolume(){  if (volume != 0) {    volume=0;    slm.setValue(0);  }}  }
class C{  public IntColumn(int nrows){  this(nrows,nrows,-1);}  }
class C{  static boolean isRegistered(Object value){  Set registry=getRegistry();  return registry != null && registry.contains(new IDKey(value));}  }
class C{  public static int wildCompare(String searchIn,String searchForWildcard){  if ((searchIn == null) || (searchForWildcard == null)) {    return WILD_COMPARE_NO_MATCH;  }  if (searchForWildcard.equals("%")) {    return WILD_COMPARE_MATCH_WITH_WILD;  }  int result=WILD_COMPARE_NO_MATCH;  char wildcardMany='%';  char wildcardOne='_';  char wildcardEscape='\\';  int searchForPos=0;  int searchForEnd=searchForWildcard.length();  int searchInPos=0;  int searchInEnd=searchIn.length();  while (searchForPos != searchForEnd) {    char wildstrChar=searchForWildcard.charAt(searchForPos);    while ((searchForWildcard.charAt(searchForPos) != wildcardMany) && (wildstrChar != wildcardOne)) {      if ((searchForWildcard.charAt(searchForPos) == wildcardEscape) && ((searchForPos + 1) != searchForEnd)) {        searchForPos++;      }      if ((searchInPos == searchInEnd) || (Character.toUpperCase(searchForWildcard.charAt(searchForPos++)) != Character.toUpperCase(searchIn.charAt(searchInPos++)))) {        return WILD_COMPARE_MATCH_WITH_WILD;      }      if (searchForPos == searchForEnd) {        return ((searchInPos != searchInEnd) ? WILD_COMPARE_MATCH_WITH_WILD : WILD_COMPARE_MATCH_NO_WILD);      }      result=WILD_COMPARE_MATCH_WITH_WILD;    }    if (searchForWildcard.charAt(searchForPos) == wildcardOne) {      do {        if (searchInPos == searchInEnd) {          return (result);        }        searchInPos++;      } while ((++searchForPos < searchForEnd) && (searchForWildcard.charAt(searchForPos) == wildcardOne));      if (searchForPos == searchForEnd) {        break;      }    }    if (searchForWildcard.charAt(searchForPos) == wildcardMany) {      char cmp;      searchForPos++;      for (; searchForPos != searchForEnd; searchForPos++) {        if (searchForWildcard.charAt(searchForPos) == wildcardMany) {          continue;        }        if (searchForWildcard.charAt(searchForPos) == wildcardOne) {          if (searchInPos == searchInEnd) {            return (WILD_COMPARE_NO_MATCH);          }          searchInPos++;          continue;        }        break;      }      if (searchForPos == searchForEnd) {        return WILD_COMPARE_MATCH_NO_WILD;      }      if (searchInPos == searchInEnd) {        return WILD_COMPARE_NO_MATCH;      }      if (((cmp=searchForWildcard.charAt(searchForPos)) == wildcardEscape) && ((searchForPos + 1) != searchForEnd)) {        cmp=searchForWildcard.charAt(++searchForPos);      }      searchForPos++;      do {        while ((searchInPos != searchInEnd) && (Character.toUpperCase(searchIn.charAt(searchInPos)) != Character.toUpperCase(cmp))) {          searchInPos++;        }        if (searchInPos++ == searchInEnd) {          return WILD_COMPARE_NO_MATCH;        }{          int tmp=wildCompare(searchIn,searchForWildcard);          if (tmp <= 0) {            return (tmp);          }        }      } while ((searchInPos != searchInEnd) && (searchForWildcard.charAt(0) != wildcardMany));      return WILD_COMPARE_NO_MATCH;    }  }  return ((searchInPos != searchInEnd) ? WILD_COMPARE_MATCH_WITH_WILD : WILD_COMPARE_MATCH_NO_WILD);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  public boolean isApiUnavailable(){  for (  HealthCheck check : mHealthChecks) {    if (check.isApiUnavailable()) {      return true;    }  }  return false;}  }
class C{  public static boolean equals(long[] array1,long[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public static Cache.Entry makeRandomCacheEntry(byte[] data,boolean isExpired,boolean needsRefresh){  Random random=new Random();  Cache.Entry entry=new Cache.Entry();  if (data != null) {    entry.data=data;  } else {    entry.data=new byte[random.nextInt(1024)];  }  entry.etag=String.valueOf(random.nextLong());  entry.serverDate=random.nextLong();  entry.ttl=isExpired ? 0 : Long.MAX_VALUE;  entry.softTtl=needsRefresh ? 0 : Long.MAX_VALUE;  return entry;}  }
class C{  private void ensureData() throws FitsException {  getData();}  }
class C{  @Override public boolean usesLocalFilePerTable(){  debugCodeCall("usesLocalFilePerTable");  return false;}  }
class C{  private void fixMergeOrderAndAssign(double[] mergedDistance,IntList merge_kept,IntList merge_removed,int lowK,final int N,int highK,int[] designations){  IndexTable it=new IndexTable(mergedDistance);  it.apply(merge_kept);  it.apply(merge_removed);  it.apply(mergedDistance);  for (int i=0; i < it.length(); i++) {    merges[merges.length - i * 2 - 1]=merge_removed.get(i);    merges[merges.length - i * 2 - 2]=merge_kept.get(i);  }  OnLineStatistics distChange=new OnLineStatistics();  double maxStndDevs=Double.MIN_VALUE;  int clusterSize=lowK;  for (int i=0; i < mergedDistance.length; i++) {    distChange.add(mergedDistance[i]);    int curK=N - i;    if (curK >= lowK && curK <= highK) {      double stndDevs=(mergedDistance[i] - distChange.getMean()) / distChange.getStandardDeviation();      if (stndDevs > maxStndDevs) {        maxStndDevs=stndDevs;        clusterSize=curK;      }    }  }  PriorityHAC.assignClusterDesignations(designations,clusterSize,merges);}  }
class C{  public void info(String msg,Object arg0,Object arg1){  innerLog(Level.INFO,null,msg,arg0,arg1,UNKNOWN_ARG,null);}  }
class C{  public boolean isInside(DelaunayVertex[] simplex){  int[] result=this.relation(simplex);  for (  int r : result) {    if (r >= 0) {      return false;    }  }  return true;}  }
class C{  @Override public void writeToNBT(NBTTagCompound tag){  try {    super.writeToNBT(tag);  } catch (  RuntimeException e) {  }  NBTTagCompound data=new NBTTagCompound();  data.setDouble("energy",energyStored);  tag.setTag("IC2BasicSink",data);}  }
class C{  public boolean canPersistStatAlertDefs(){  return canPersistStatAlertDefs;}  }
class C{  @AfterMethod public void deleteStorage() throws BusinessException, IOException, SerializationException {  if (null != storageData) {    if (storageManager.getRecordingState() == RecordingState.ON) {      storageManager.stopRecording();    }    if (!storageManager.isStorageClosed(storageData)) {      storageManager.closeStorage(storageData);    }    storageManager.deleteStorage(storageData);    storageData=null;  }  assertThat(storageManager.getExistingStorages(),is(empty()));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public E peek(){  final Node<E> f=first;  return (f == null) ? null : f.item;}  }
class C{  public static boolean isInterfaceLoopback(NetworkInterface iface){  try {    Method method=iface.getClass().getMethod("isLoopback");    return (Boolean)method.invoke(iface);  } catch (  Throwable t) {  }  Enumeration<InetAddress> addresses=iface.getInetAddresses();  return addresses.hasMoreElements() && addresses.nextElement().isLoopbackAddress();}  }
class C{  public static void orthoM(double[] m,int mOffset,double left,double right,double bottom,double top,double near,double far){  if (left == right) {    throw new IllegalArgumentException("left == right");  }  if (bottom == top) {    throw new IllegalArgumentException("bottom == top");  }  if (near == far) {    throw new IllegalArgumentException("near == far");  }  final double r_width=1.0f / (right - left);  final double r_height=1.0f / (top - bottom);  final double r_depth=1.0f / (far - near);  final double x=2.0f * (r_width);  final double y=2.0f * (r_height);  final double z=-2.0f * (r_depth);  final double tx=-(right + left) * r_width;  final double ty=-(top + bottom) * r_height;  final double tz=-(far + near) * r_depth;  m[mOffset + 0]=x;  m[mOffset + 5]=y;  m[mOffset + 10]=z;  m[mOffset + 12]=tx;  m[mOffset + 13]=ty;  m[mOffset + 14]=tz;  m[mOffset + 15]=1.0f;  m[mOffset + 1]=0.0f;  m[mOffset + 2]=0.0f;  m[mOffset + 3]=0.0f;  m[mOffset + 4]=0.0f;  m[mOffset + 6]=0.0f;  m[mOffset + 7]=0.0f;  m[mOffset + 8]=0.0f;  m[mOffset + 9]=0.0f;  m[mOffset + 11]=0.0f;}  }
class C{  private void initTrees(ActivityFacilities facilities,DestinationChoiceConfigGroup config){  log.info("Doing location choice for activities: " + this.flexibleTypes.toString());  for (  String flexibleType : this.flexibleTypes) {    Tuple<QuadTree<ActivityFacilityWithIndex>,ActivityFacilityImpl[]> tuple=this.lcContext.getQuadTreeAndFacilities(flexibleType);    this.quadTreesOfType.put(flexibleType,tuple.getFirst());    this.facilitiesOfType.put(flexibleType,tuple.getSecond());  }}  }
class C{  public void printJavaString(String s) throws IOException {  for (int i=0; i < s.length(); i++) {    char ch=s.charAt(i);switch (ch) {case '\\':      _os.print("\\\\");    break;case '\n':  _os.print("\\n");break;case '\r':_os.print("\\r");break;case '"':_os.print("\\\"");break;default :_os.print(ch);}}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:52.612 -0500",hash_original_method="A77142351A28E594907776BE9B73073E",hash_generated_method="94BAD8C520FA4C9C42F084CD66C39C54") public String encodeBody(){  StringBuffer encoding=new StringBuffer(dispositionType);  if (!this.parameters.isEmpty()) {    encoding.append(SEMICOLON).append(parameters.encode());  }  return encoding.toString();}  }
class C{  public TranslatableComponent(String translate,Object... with){  setTranslate(translate);  List<BaseComponent> temp=new ArrayList<BaseComponent>();  for (  Object w : with) {    if (w instanceof String) {      temp.add(new TextComponent((String)w));    } else {      temp.add((BaseComponent)w);    }  }  setWith(temp);}  }
class C{  @Ignore("TODO: test is disabled") @Test public void testBug40333_InPartitionedRegion_1() throws Exception {  CacheUtils.startCache();  final Cache cache=CacheUtils.getCache();  AttributesFactory attributesFactory=new AttributesFactory();  PartitionAttributesFactory paf=new PartitionAttributesFactory();  paf.setTotalNumBuckets(10);  PartitionAttributes pa=paf.create();  attributesFactory.setPartitionAttributes(pa);  RegionAttributes ra=attributesFactory.create();  final Region region=cache.createRegion("new_pos",ra);  String queryStr=" select distinct r.name, pVal, r.\"type\"  " + " from /new_pos r , r.positions.values pVal where " + "  (r.name='name_11' OR r.name='name_12') AND pVal.mktValue < 1.00";  this.bug40333Simulation(region,queryStr);}  }
class C{  private void createNewToAllocMap(){  newToAllocNodeMap=HashBiMap.create(ptsProvider.consG.keySet().size());  for (  Node node : ptsProvider.consG.keySet()) {    if (node instanceof AllocNode) {      AllocNode an=(AllocNode)node;      newToAllocNodeMap.put(an.getNewExpr(),an);    }  }  for (  IVarAbstraction ivar : ptsProvider.allocations) {    AllocNode obj=(AllocNode)ivar.getWrappedNode();    newToAllocNodeMap.put(obj.getNewExpr(),obj);  }}  }
class C{  @Override public void stop(){  if (m_Executor != null) {    debug("pre: shutdownNow");    m_Executor.shutdownNow();    debug("post: shutdownNow");  }  super.stop();}  }
class C{  protected String paramString(){  String rootPaneString=(rootPane != null ? rootPane.toString() : "");  String rootPaneCheckingEnabledString=(rootPaneCheckingEnabled ? "true" : "false");  String closableString=(closable ? "true" : "false");  String isClosedString=(isClosed ? "true" : "false");  String maximizableString=(maximizable ? "true" : "false");  String isMaximumString=(isMaximum ? "true" : "false");  String iconableString=(iconable ? "true" : "false");  String isIconString=(isIcon ? "true" : "false");  String resizableString=(resizable ? "true" : "false");  String isSelectedString=(isSelected ? "true" : "false");  String frameIconString=(frameIcon != null ? frameIcon.toString() : "");  String titleString=(title != null ? title : "");  String desktopIconString=(desktopIcon != null ? desktopIcon.toString() : "");  String openedString=(opened ? "true" : "false");  String defaultCloseOperationString;  if (defaultCloseOperation == HIDE_ON_CLOSE) {    defaultCloseOperationString="HIDE_ON_CLOSE";  } else   if (defaultCloseOperation == DISPOSE_ON_CLOSE) {    defaultCloseOperationString="DISPOSE_ON_CLOSE";  } else   if (defaultCloseOperation == DO_NOTHING_ON_CLOSE) {    defaultCloseOperationString="DO_NOTHING_ON_CLOSE";  } else   defaultCloseOperationString="";  return super.paramString() + ",closable=" + closableString+ ",defaultCloseOperation="+ defaultCloseOperationString+ ",desktopIcon="+ desktopIconString+ ",frameIcon="+ frameIconString+ ",iconable="+ iconableString+ ",isClosed="+ isClosedString+ ",isIcon="+ isIconString+ ",isMaximum="+ isMaximumString+ ",isSelected="+ isSelectedString+ ",maximizable="+ maximizableString+ ",opened="+ openedString+ ",resizable="+ resizableString+ ",rootPane="+ rootPaneString+ ",rootPaneCheckingEnabled="+ rootPaneCheckingEnabledString+ ",title="+ titleString;}  }
class C{  public void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(camera,settings);    ambientLightManager=new AmbientLightManager(context,this,settings);    ambientLightManager.start();  }}  }
class C{  @Override public void processHeadlessEvents(List<EventObject> headless){  if (!java.awt.GraphicsEnvironment.isHeadless()) {    for (    EventObject e : headless) {      if (e instanceof TextEvent) {        acceptText((TextEvent)e);      }    }  }}  }
class C{  public void dumpStats(){  CommunicationSpi spi=getSpi();  if (spi instanceof TcpCommunicationSpi)   ((TcpCommunicationSpi)spi).dumpStats();}  }
class C{  public static boolean isSupplemental(int c){  return (c >= 0x10000 && c <= 0x10FFFF);}  }
class C{  @Override protected Object execute() throws Exception {  init();  if (!checkifEnabledRemotes()) {    return null;  }  UserWorkspace userWorkspace=getMultiRemoteCodenvy().getUserWorkspace(remote,workspace);  if (userWorkspace == null) {    return null;  }  Path configurationPath=null;  if (configFile != null) {    configurationPath=new File(configFile).toPath();    if (!configurationPath.toFile().exists()) {      Ansi buffer=Ansi.ansi();      buffer.fg(RED);      buffer.a("The configuration file '").a(configFile).a("' does not exists.");      buffer.reset();      System.out.println(buffer.toString());      return null;    }  }  UserProjectReference userProjectReference=getMultiRemoteCodenvy().importProject(userWorkspace,name,param,importer,configurationPath);  if (userProjectReference != null) {    System.out.println(String.format("Project '%s' has been created in workspace '%s' with project ID '%s'",userProjectReference.name(),userProjectReference.getWorkspace().name(),userProjectReference.shortId()));    if (openProject) {      openURL(userProjectReference.getInnerReference().ideUrl());    }  }  return null;}  }
class C{  public SimpleJobService(String name,int maxThreads,int maxRequests,int keepAlive){  BlockingQueue<Runnable> queue=new LinkedBlockingQueue<Runnable>(maxRequests);  ThreadFactory factory=new SimpleThreadFactory(name);  pool=new ThreadPoolExecutor(maxThreads,maxThreads,keepAlive,TimeUnit.SECONDS,queue,factory);}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public void testUnivariateTEforRandomDataFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4randomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={4};  double[] expectedFromTRENTOOL={-0.0096556};  System.out.println("Kraskov Cond MI as TE comparison 2 - univariate random data 1 (col 0->1)");  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{1}),kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{0.0175389};  System.out.println("  (col 1->2):");  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{1}),MatrixUtils.selectColumns(data,new int[]{2}),kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{0.0026367};  System.out.println("  (col 1->0):");  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{1}),MatrixUtils.selectColumns(data,new int[]{0}),kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{-0.00012474};  System.out.println("  (col 0->2):");  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{2}),kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{-5.4437e-03};  System.out.println("  (col 2->0):");  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{2}),MatrixUtils.selectColumns(data,new int[]{0}),kNNs,expectedFromTRENTOOL);}  }
class C{  private void applyBlend(List<Sprite> stack){  ListIterator<Sprite> iter=stack.listIterator();  while (iter.hasNext()) {    Sprite sprite=iter.next();    if (sprite instanceof ImageSprite) {      Graphics g=((ImageSprite)sprite).getGraphics();      if (g instanceof Graphics2D) {        ((Graphics2D)g).setComposite(blend);        adjSprite.draw(g,0,0);        g.dispose();        iter.set(new ImageSprite(sprite));      }    } else     if (sprite instanceof AnimatedSprite) {      AnimatedSprite parent=((AnimatedSprite)sprite);      Sprite[] frames=parent.frames;      Sprite[] newFrames=new Sprite[frames.length];      List<Sprite> tmp=new ArrayList<Sprite>(1);      for (int i=0; i < frames.length; i++) {        tmp.add(frames[i]);        newFrames[i]=new CompositeSprite(tmp,blend,adjSprite,null);        tmp.clear();      }      iter.set(new AnimatedSprite(newFrames,parent.delays,true,null));    } else {      logger.error("Unhandled sprite with a blend: " + sprite);    }  }}  }
class C{  static int writeVarLong(OutputStream out,long x) throws IOException {  int len=0;  while ((x & ~0x7f) != 0) {    out.write((byte)(0x80 | (x & 0x7f)));    x>>>=7;    len++;  }  out.write((byte)x);  return ++len;}  }
class C{  static String classNameFromVisibleName(String visibleName){  ClassData classData=getClassData();  return classData.getNames().get(classData.getVisibleNames(false).indexOf(visibleName));}  }
class C{  public TypeAnnotationsAttribute(ConstPool cp,String attrname,byte[] info){  super(cp,attrname,info);}  }
class C{  public static boolean isIA5String(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }  }  return true;}  }
class C{  public int key(){  return key;}  }
class C{  private int checkSqlType(int sqlType) throws SQLException {  return JDBC42Helper.checkSqlType(sqlType,getExceptionInterceptor());}  }
class C{  public static Ed25519Curve ed25519(){  return ED25519;}  }
class C{  public void open(){  sync.open();}  }
class C{  public static String readPassword(String prompt) throws OpenStegoException {  String password="";  EraserThread et=null;  BufferedReader in=null;  Thread mask=null;  et=new EraserThread(prompt);  mask=new Thread(et);  mask.start();  in=new BufferedReader(new InputStreamReader(System.in));  try {    password=in.readLine();  } catch (  IOException ioEx) {    throw new OpenStegoException(ioEx);  }  et.stopMasking();  System.out.println();  return password;}  }
class C{  public static boolean deleteMaps(Context context,String accountName,String mapTitle){  Account account=getGoogleAccount(context,accountName);  if (account == null) {    return false;  }  MapsClient mapsClient=new MapsClient(GDataClientFactory.getGDataClient(context),new XmlMapsGDataParserFactory(new AndroidXmlParserFactory()));  ArrayList<MapsMapMetadata> mapMetadata=getMaps(context,account,mapsClient);  for (  MapsMapMetadata data : mapMetadata) {    if (data.getDescription().indexOf(MY_TRACKS_PREFIX) > -1 && data.getTitle().equals(mapTitle)) {      try {        mapsClient.deleteEntry(data.getGDataEditUri(),AccountManager.get(context).blockingGetAuthToken(account,MapsConstants.SERVICE_NAME,false));        return true;      } catch (      Exception e) {        Log.e(TAG,"Unable to delete maps.",e);        return false;      }    }  }  return false;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:57.969 -0500",hash_original_method="12DAC0CE56878A53F37AFF65E12010EB",hash_generated_method="68CB0655189E46325916378CAE21EACC") public boolean markSupported(){  return false;}  }
class C{  @Override public void onAction(final ActionType at){  if (isReleased()) {    return;  }switch (at) {case PICK:    at.send(at.fillTargetInfo(entity));  break;default :super.onAction(at);break;}}  }
class C{  public void exportObject(Target target) throws RemoteException {  ep.exportObject(target);}  }
class C{  public static boolean isValidImportString(String s){  if (s.equals("*"))   return true;  boolean valid=true;  String t=s;  int index=t.indexOf('*');  if (index != -1) {    if (index == t.length() - 1) {      if (index - 1 >= 0) {        valid=t.charAt(index - 1) == '.';        t=t.substring(0,t.length() - 2);      }    } else     return false;  }  if (valid) {    String[] javaIds=t.split("\\.",t.length() + 2);    for (    String javaId : javaIds)     valid&=SourceVersion.isIdentifier(javaId);  }  return valid;}  }
class C{  public void execute(ExecutionVisitor visitor,TestCheckGenerator gen){  execute(visitor,gen,true);}  }
class C{  public static short swap(short value){  int b1=value & 0xff;  int b2=(value >> 8) & 0xff;  return (short)(b1 << 8 | b2);}  }
class C{  public void write(Image c,Component i){  if (page == null) {    newpage();  }  int x=x0 + width - (c.getWidth(null) * 2 / 3 + charwidth);  int y=y0 + (linenum * lineheight) + lineascent;  if (page != null && pagenum >= prFirst) {    page.drawImage(c,x,y,c.getWidth(null) * 2 / 3,c.getHeight(null) * 2 / 3,null);  }}  }
class C{  public void registerRead(SelectableChannel channel,ISelectHandler callback) throws ClosedChannelException {  assert channel.keyFor(selector) == null || (channel.keyFor(selector).interestOps() & SelectionKey.OP_CONNECT) == 0;  addInterest(channel,SelectionKey.OP_READ,callback);}  }
class C{  @Field(30) public __VARIANT_NAME_3_union pvarVal(Pointer<VARIANT> pvarVal){  this.io.setPointerField(this,30,pvarVal);  return this;}  }
class C{  public IgniteKernal gridx(){  return grid;}  }
class C{  private String convertGlobToRegEx(String name){  name=name.trim();  int strLen=name.length();  StringBuilder sb=new StringBuilder(strLen);  boolean escaping=false;  int inCurlies=0;  for (  char currentChar : name.toCharArray()) {switch (currentChar) {case '*':      if (escaping) {        sb.append("\\*");      } else {        sb.append(".*");      }    escaping=false;  break;case '?':if (escaping) {  sb.append("\\?");} else {  sb.append('.');}escaping=false;break;case '.':case '(':case ')':case '+':case '|':case '^':case '$':case '@':case '%':sb.append('\\');sb.append(currentChar);escaping=false;break;case '\\':if (escaping) {sb.append("\\\\");escaping=false;} else {escaping=true;}break;case '{':if (escaping) {sb.append("\\{");} else {sb.append('(');inCurlies++;}escaping=false;break;case '}':if (inCurlies > 0 && !escaping) {sb.append(')');inCurlies--;} else if (escaping) {sb.append("\\}");} else {sb.append("}");}escaping=false;break;case ',':if (inCurlies > 0 && !escaping) {sb.append('|');} else if (escaping) {sb.append("\\,");} else {sb.append(",");}break;default :escaping=false;sb.append(currentChar);}}return sb.toString();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y, z;  int i;  int progress=0;  int numPointsToUse=10;  int numPoints=0;  int lineNum=0;  int nlines=0;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String delimiter=" ";  boolean firstLineHeader=false;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<XYPoint>> results;  double noData=-32768;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  firstLineHeader=Boolean.parseBoolean(args[1]);  outputHeader=args[2];  resolution=Double.parseDouble(args[3]);  if ((inputFilesString.length() <= 0) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    updateProgress("Counting the number of points:",0);    numPoints=0;    for (i=0; i < numPointFiles; i++) {      nlines=countLinesInFile(pointFiles[i]);      if (firstLineHeader) {        numPoints+=nlines - 1;      } else {        numPoints+=nlines;      }    }    if (numPoints < numPointsToUse) {      numPointsToUse=numPoints;    }    KdTree<XYPoint> pointsTree=new KdTree.SqrEuclid<XYPoint>(2,numPoints);    nlines=0;    for (i=0; i < numPointFiles; i++) {      DataInputStream in=null;      BufferedReader br=null;      try {        FileInputStream fstream=new FileInputStream(pointFiles[i]);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        String[] str;        lineNum=1;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if ((lineNum > 1 || !firstLineHeader) && (str.length >= 3)) {            x=Double.parseDouble(str[0]);            y=Double.parseDouble(str[1]);            XYPoint pnt=new XYPoint(x,y);            double[] entry={y,x};            pointsTree.addPoint(entry,pnt);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          lineNum++;          nlines++;          progress=(int)(100d * nlines / numPoints);          updateProgress("Reading point data:",progress);        }        in.close();        br.close();      } catch (      java.io.IOException e) {        System.err.println("Error: " + e.getMessage());      } finally {        try {          if (in != null || br != null) {            in.close();            br.close();          }        } catch (        java.io.IOException ex) {        }      }    }    west=minX - 0.5 * resolution;    north=maxY + 0.5 * resolution;    nrows=(int)(Math.ceil((north - minY) / resolution));    ncols=(int)(Math.ceil((maxX - west) / resolution));    south=north - nrows * resolution;    east=west + ncols * resolution;    fw=new FileWriter(outputHeader,false);    bw=new BufferedWriter(fw);    out=new PrintWriter(bw,true);    str1="Min:\t" + Double.toString(Integer.MAX_VALUE);    out.println(str1);    str1="Max:\t" + Double.toString(Integer.MIN_VALUE);    out.println(str1);    str1="North:\t" + Double.toString(north);    out.println(str1);    str1="South:\t" + Double.toString(south);    out.println(str1);    str1="East:\t" + Double.toString(east);    out.println(str1);    str1="West:\t" + Double.toString(west);    out.println(str1);    str1="Cols:\t" + Integer.toString(ncols);    out.println(str1);    str1="Rows:\t" + Integer.toString(nrows);    out.println(str1);    str1="Data Type:\t" + "float";    out.println(str1);    str1="Z Units:\t" + "not specified";    out.println(str1);    str1="XY Units:\t" + "not specified";    out.println(str1);    str1="Projection:\t" + "not specified";    out.println(str1);    str1="Data Scale:\tcontinuous";    out.println(str1);    str1="Preferred Palette:\t" + "spectrum.pal";    out.println(str1);    str1="NoData:\t" + noData;    out.println(str1);    if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {      str1="Byte Order:\t" + "LITTLE_ENDIAN";    } else {      str1="Byte Order:\t" + "BIG_ENDIAN";    }    out.println(str1);    out.close();    WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");    double northing, easting;    double halfResolution=resolution / 2;    double area=0;    for (row=0; row < nrows; row++) {      for (col=0; col < ncols; col++) {        easting=(col * resolution) + (west + halfResolution);        northing=(north - halfResolution) - (row * resolution);        double[] entry={northing,easting};        results=pointsTree.nearestNeighbor(entry,numPointsToUse,true);        minX=Double.POSITIVE_INFINITY;        maxX=Double.NEGATIVE_INFINITY;        minY=Double.POSITIVE_INFINITY;        maxY=Double.NEGATIVE_INFINITY;        for (i=0; i < results.size(); i++) {          x=results.get(i).value.x;          y=results.get(i).value.y;          if (x < minX) {            minX=x;          }          if (x > maxX) {            maxX=x;          }          if (y < minY) {            minY=y;          }          if (y > maxY) {            maxY=y;          }        }        area=(maxX - minX) * (maxY - minY);        if (area > 0) {          image.setValue(row,col,area / numPointsToUse);        } else {          image.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nrows - 1));      updateProgress("Interpolating point data:",progress);    }    image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    image.addMetadataEntry("Created on " + new Date());    image.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void validateClusterData(ClusterParam param,URI tenanUri,Cluster cluster,DbClient dbClient){  if (!NullColumnValueGetter.isNullURI(param.getProject())) {    Project project=queryObject(Project.class,param.getProject(),true);    if (!project.getTenantOrg().getURI().equals(tenanUri)) {      throw APIException.badRequests.resourcedoesNotBelongToClusterTenantOrg("project");    }  }  if (cluster == null || (param.findName() != null && !cluster.getLabel().equals(param.findName()))) {    checkDuplicateChildName(tenanUri,Cluster.class,"label","tenant",param.findName(),dbClient);  }  if (!NullColumnValueGetter.isNullURI(param.getVcenterDataCenter())) {    VcenterDataCenter dataCenter=queryObject(VcenterDataCenter.class,param.getVcenterDataCenter(),true);    if (!dataCenter.getTenant().equals(tenanUri)) {      throw APIException.badRequests.resourcedoesNotBelongToClusterTenantOrg("data center");    }  }  if (cluster != null && !areEqual(cluster.getProject(),param.getProject())) {    if (isClusterInUse(cluster)) {      throw APIException.badRequests.clusterProjectChangeNotAllowed(cluster.getLabel());    }  }}  }
class C{  public Object[] readValue(Connection connection,Object[] keys){  PreparedStatement statement=null;  try {    if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {      log.debug("Executing query '" + readSQL + "' for keys '"+ print(keys)+ "'");    }    statement=connection.prepareStatement(readSQL);    for (int i=0; i < keys.length; i++) {      statement.setObject(i + 1,keys[i]);    }    ResultSet rs=statement.executeQuery();    if (!rs.next()) {      return null;    }    Object[] row=new Object[valueFieldNames.length];    for (int i=0; i < valueFieldNames.length; i++) {      row[i]=DBUtil.getValue(rs,i + 1,valueTypes[i]);    }    return row;  } catch (  SQLException ex) {    String message="Failed to invoke : " + readSQL + " :"+ ex.getMessage();    log.error(message,ex);    storeExceptionHandler.handle(message,ex);    throw new StoreExceptionDBRel(message,ex);  } finally {    try {      if (statement != null)       statement.close();    } catch (    SQLException e) {    }  }}  }
class C{  public UsageException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public DefaultTreeColouring sampleTreeColouring(Tree tree,ColourChangeMatrix colourChangeMatrix,MetaPopulation mp){  DefaultTreeColouring colouring=new DefaultTreeColouring(2,tree);  double[] N=mp.getPopulationSizes(0);  double[] rootPartials=prune(tree,tree.getRoot(),colourChangeMatrix,N);  double normalization=0.0;  for (int i=0; i < rootPartials.length; i++) {    normalization+=colourChangeMatrix.getEquilibrium(i) * rootPartials[i];  }  sampleInternalNodes(tree,tree.getRoot(),colourChangeMatrix);  sampleBranchColourings(colouring,tree,tree.getRoot(),colourChangeMatrix);  double logP=calculateLogProbabilityDensity(colouring,tree,tree.getRoot(),colourChangeMatrix,N) - Math.log(normalization);  colouring.setLogProbabilityDensity(logP);  return colouring;}  }
class C{  public void eleminateRedundentLocals(ElemTemplateElement psuedoVarRecipient){  eleminateRedundent(psuedoVarRecipient,m_paths);}  }
class C{  public static XMLTreeLocation inTheEnd(){  return new XMLTreeLocation(LocationType.END,"");}  }
class C{  @Override public boolean checkIfPropCountExceeds500(List bndryList) throws ApplicationRuntimeException {  boolean chkCntExcds500=false;  int count=0;  try {    if (bndryList != null && !bndryList.isEmpty()) {      String qryStr="select count(*) from BasicPropertyImpl BP where BP.boundary.id in (:bndryList) ";      Query qry=getCurrentSession().createQuery(qryStr);      qry.setParameterList("bndryList",bndryList);      Integer cnt=(Integer)qry.uniqueResult();      count=cnt.intValue();      if (count > 500) {        chkCntExcds500=true;      }      LOGGER.debug("checkIfPropCountExceeds500 chkCntExcds500 : " + chkCntExcds500);    }  } catch (  HibernateException e) {    LOGGER.error("Error occured in PropertyHibernateDao.checkIfPropCountExceeds500" + e.getMessage());    throw new ApplicationRuntimeException("Hibernate Exception in checkIfPropCountExceeds500: " + e.getMessage(),e);  }catch (  Exception e1) {    LOGGER.error("Error occured in PropertyHibernateDao.checkIfPropCountExceeds500" + e1.getMessage());    throw new ApplicationRuntimeException("Exception in checkIfPropCountExceeds500 : " + e1.getMessage(),e1);  }  return chkCntExcds500;}  }
class C{  public static Dcsn cs_lu(Dcs A,Dcss S,double tol){  Dcs L, U;  Dcsn N;  double pivot, Lx[], Ux[], x[], a, t;  int Lp[], Li[], Up[], Ui[], pinv[], xi[], q[], n, ipiv, k, top, p, i, col, lnz, unz;  if (!Dcs_util.CS_CSC(A) || S == null)   return (null);  n=A.n;  q=S.q;  lnz=S.lnz;  unz=S.unz;  x=new double[n];  xi=new int[2 * n];  N=new Dcsn();  N.L=L=Dcs_util.cs_spalloc(n,n,lnz,true,false);  N.U=U=Dcs_util.cs_spalloc(n,n,unz,true,false);  N.pinv=pinv=new int[n];  Lp=L.p;  Up=U.p;  for (i=0; i < n; i++)   x[i]=0;  for (i=0; i < n; i++)   pinv[i]=-1;  for (k=0; k <= n; k++)   Lp[k]=0;  lnz=unz=0;  for (k=0; k < n; k++) {    Lp[k]=lnz;    Up[k]=unz;    if (lnz + n > L.nzmax) {      Dcs_util.cs_sprealloc(L,2 * L.nzmax + n);    }    if (unz + n > U.nzmax) {      Dcs_util.cs_sprealloc(U,2 * U.nzmax + n);    }    Li=L.i;    Lx=L.x;    Ui=U.i;    Ux=U.x;    col=q != null ? (q[k]) : k;    top=Dcs_spsolve.cs_spsolve(L,A,col,xi,x,pinv,true);    ipiv=-1;    a=-1;    for (p=top; p < n; p++) {      i=xi[p];      if (pinv[i] < 0) {        if ((t=Math.abs(x[i])) > a) {          a=t;          ipiv=i;        }      } else {        Ui[unz]=pinv[i];        Ux[unz++]=x[i];      }    }    if (ipiv == -1 || a <= 0)     return (null);    if (pinv[col] < 0 && Math.abs(x[col]) >= a * tol)     ipiv=col;    pivot=x[ipiv];    Ui[unz]=k;    Ux[unz++]=pivot;    pinv[ipiv]=k;    Li[lnz]=ipiv;    Lx[lnz++]=1;    for (p=top; p < n; p++) {      i=xi[p];      if (pinv[i] < 0) {        Li[lnz]=i;        Lx[lnz++]=x[i] / pivot;      }      x[i]=0;    }  }  Lp[n]=lnz;  Up[n]=unz;  Li=L.i;  for (p=0; p < lnz; p++)   Li[p]=pinv[Li[p]];  Dcs_util.cs_sprealloc(L,0);  Dcs_util.cs_sprealloc(U,0);  return N;}  }
class C{  public NewLRUClockHand(Object region,EnableLRU ccHelper,InternalRegionArguments internalRegionArgs){  setBucketRegion(region);  this.lock=new HeadLock();  initHeadAndTail();  if (this.bucketRegion != null) {    this.stats=internalRegionArgs.getPartitionedRegion() != null ? internalRegionArgs.getPartitionedRegion().getEvictionController().stats : null;  } else {    LRUStatistics tmp=null;    if (region instanceof PlaceHolderDiskRegion) {      tmp=((PlaceHolderDiskRegion)region).getPRLRUStats();    } else     if (region instanceof PartitionedRegion) {      tmp=((PartitionedRegion)region).getPRLRUStatsDuringInitialization();      PartitionedRegion pr=(PartitionedRegion)region;      if (tmp != null) {        pr.getEvictionController().stats=tmp;      }    }    if (tmp == null) {      StatisticsFactory sf=GemFireCacheImpl.getExisting("").getDistributedSystem();      tmp=ccHelper.initStats(region,sf);    }    this.stats=tmp;  }}  }
class C{  public static DetachedBaggage stop(){  try {    return DetachedBaggage.wrap(current.get());  }  finally {    current.remove();  }}  }
class C{  public void unregisterReceiver(Context context){  mHandler.removeCallbacks(mServiceRunnable);  if (mIsRegistered.getAndSet(false)) {    context.unregisterReceiver(this);    mNeedToRunActions.set(false);  }}  }
class C{  public boolean sendMessage(String msg){  if (!this.enabled) {    logger.info("Hichat is not enabled, ignore.");    return false;  }  java.io.OutputStream out=null;  java.io.InputStream in=null;  String url=this.hipchatURL + "auth_token=" + this.authToken;  try {    java.net.URL hipchatUrl=new java.net.URL(url);    java.net.HttpURLConnection conn=HttpURLConnection.class.cast(hipchatUrl.openConnection());    conn.setDoOutput(true);    conn.addRequestProperty("Content-Type","application/json");    String jsonMsg=this.constructJsonMessage("Source: " + this.hostname + "\n"+ msg);    byte[] jsonByte=jsonMsg.getBytes();    conn.addRequestProperty("Content-Length",String.valueOf(jsonByte.length));    out=conn.getOutputStream();    out.write(jsonByte);    out.flush();    int code=conn.getResponseCode();    in=conn.getInputStream();    if (code >= 200 && code < 400)     return true;    logger.warning("Failed hipchat integration with URL: " + this.hipchatURL + ", code: "+ code+ ", data: "+ jsonMsg);  } catch (  Throwable th) {    logger.log(Level.WARNING,"Failed to send message: " + msg,th);    return false;  } finally {    if (out != null) {      try {        out.close();      } catch (      Exception ex) {      }    }    if (in != null) {      try {        in.close();      } catch (      Exception ex) {      }    }  }  return false;}  }
class C{  protected double optimalBandwidth(int dim){  double hopt=8 * GammaDistribution.gamma(dim / 2.0 + 1) * (dim + 4)* MathUtil.powi(2,dim);  return hopt * Math.pow(relation.size(),(-1. / (dim + 4)));}  }
class C{  private static int upperBound(int from,final int mid,final int pos,final IntComparator comp){  int len=mid - from;  while (len > 0) {    int half=len / 2;    int middle=from + half;    if (comp.compare(pos,middle) < 0) {      len=half;    } else {      from=middle + 1;      len-=half + 1;    }  }  return from;}  }
class C{  public static <T>int binarySearchFloor(List<? extends Comparable<? super T>> list,T key,boolean inclusive,boolean stayInBounds){  int index=Collections.binarySearch(list,key);  index=index < 0 ? -(index + 2) : (inclusive ? index : (index - 1));  return stayInBounds ? Math.max(0,index) : index;}  }
class C{  public boolean isInBufferActive(Object obj){  return collector().isInBufferActive(getRuleName(),obj);}  }
class C{  int processZoneinfo(Timezone tz){  String zonename=tz.getName();  lastRules.put(zonename,tz.getLastRules());  lastZoneRecs.put(zonename,tz.getLastZoneRec());  int lastKnownOffset=tz.getRawOffset();  Set<String> set=zonesByOffset.get(lastKnownOffset);  if (set == null) {    set=new TreeSet<>();    zonesByOffset.put(lastKnownOffset,set);  }  set.add(zonename);  return 0;}  }
class C{  @Override public void flush() throws IOException {  flushBytes(true);}  }
class C{  @Override public void preTearDown(){  log.info("####PRETEARDOWN " + getTestName());}  }
class C{  private void initializeAttributes(){  pieChartConsumer=new AttributeType(this,"Slice","setValue",double.class,true);  addConsumerType(pieChartConsumer);  pieChartVectorConsumer=new AttributeType(this,"Pie Slices",double[].class,true);  addConsumerType(pieChartVectorConsumer);}  }
class C{  public boolean matchesAllExpectations(Collection<Issue> issues,List<String> messages){  Collection<Issue> issueCopy=new LinkedList<>(issues);  Collection<IssueMatcher> matcherCopy=new LinkedList<>(issueMatchers);  performMatching(issueCopy,matcherCopy,messages);  if (inverted) {    if (matcherCopy.isEmpty()) {      explainExpectations(issueMatchers,messages,inverted);      return false;    }  } else {    if (!matcherCopy.isEmpty()) {      explainExpectations(matcherCopy,messages,inverted);      return false;    }  }  return false;}  }
class C{  public DocSet buildUniqueInOrder(FixedBitSet filter){  if (bitSet != null) {    if (filter != null) {      bitSet.and(filter);    }    return new BitDocSet(bitSet);  } else {    int l=pos;    if (filter != null) {      l=dedup(buffer,pos,filter);    }    return new SortedIntDocSet(buffer,l);  }}  }
class C{  private static double[] computeLabels(final double start,final double end,final int approxNumLabels){  if (Math.abs(start - end) < 0.0000001f) {    return new double[]{start,start,0};  }  double s=start;  double e=end;  boolean switched=false;  if (s > e) {    switched=true;    double tmp=s;    s=e;    e=tmp;  }  double xStep=roundUp(Math.abs(s - e) / approxNumLabels);  double xStart=xStep * Math.ceil(s / xStep);  double xEnd=xStep * Math.floor(e / xStep);  if (switched) {    return new double[]{xEnd,xStart,-1.0 * xStep};  }  return new double[]{xStart,xEnd,xStep};}  }
class C{  private OpenReplicatorManagerMBean createInternalService(String serviceName) throws ReplicatorException {  logger.info("Starting replication service: name=" + serviceName);  try {    OpenReplicatorManager orm=new OpenReplicatorManager(serviceName);    orm.setRmiHost(managerRMIHost);    orm.setRmiPort(managerRMIPort);    orm.setHostTimeZone(hostTimeZone);    orm.setReplicatorTimeZone(replicatorTimeZone);    orm.advertiseInternal();    orm.setSecurityInfo(this.securityInfo);    return (OpenReplicatorManagerMBean)orm;  } catch (  Exception e) {    throw new ReplicatorException(String.format("Unable to instantiate replication service '%s'",serviceName),e);  }}  }
class C{  private static int decodeDigit(int[] counters) throws NotFoundException {  float bestVariance=MAX_AVG_VARIANCE;  int bestMatch=-1;  int max=PATTERNS.length;  for (int i=0; i < max; i++) {    int[] pattern=PATTERNS[i];    float variance=patternMatchVariance(counters,pattern,MAX_INDIVIDUAL_VARIANCE);    if (variance < bestVariance) {      bestVariance=variance;      bestMatch=i;    }  }  if (bestMatch >= 0) {    return bestMatch;  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public static boolean isWifiHotspotSupported(final Context pContext){  if (SystemUtils.isAndroidVersionOrLower(Build.VERSION_CODES.ECLAIR_MR1)) {    return false;  } else {    final WifiManager wifiManager=WifiUtils.getWifiManager(pContext);    try {      final Method WifiManager_isWifiApEnabled=wifiManager.getClass().getMethod("isWifiApEnabled");      return WifiManager_isWifiApEnabled != null;    } catch (    final Throwable t) {      return false;    }  }}  }
class C{  @Override public boolean hasRearArmor(int loc){  return false;}  }
class C{  public GenericPlanStrategy<Plan,Person> chooseStrategy(final Person person,final String subpopulation){  final GenericPlanStrategy<Plan,Person> strategy=delegate.chooseStrategy(subpopulation);  return strategy;}  }
class C{  public CommodityChannelIndexItem(RegularTimePeriod period,BigDecimal cciAverage){  super(period,new CommodityChannelIndex(cciAverage));}  }
class C{  public boolean isQuoteTotalAmtOnly(){  return QUOTETYPE_QuoteTotalOnly.equals(getQuoteType());}  }
class C{  public synchronized void removeDatabaseObject(Session session,DbObject obj){  String objName=obj.getName();  int type=obj.getType();  HashMap<String,DbObject> map=getMap(type);  if (SysProperties.CHECK && !map.containsKey(objName)) {    DbException.throwInternalError("not found: " + objName);  }  Comment comment=findComment(obj);  if (comment != null) {    removeDatabaseObject(session,comment);  }  obj.removeChildrenAndResources(session);  map.remove(objName);}  }
class C{  public static long doubleMantissa(double d){  long l=Double.doubleToRawLongBits(d);  l=l << 12;  l=l >> 12;  return l;}  }
class C{  private void close(){  LOG.info("Edit stage cancelled");  newCoverImage=null;  commonCover=Optional.empty();  editStage.close();}  }
class C{  public ItemStack updateMCItemStack(ItemStack itemStack,Item item){  itemStack.stackSize=item.count();  if (itemStack.stackSize <= 0) {    return null;  }  itemStack.setTagCompound(Game.natives().toNative(item.getFactory().save(item)));  return itemStack;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementreplaceexistingattributegevalue.class,args);}  }
class C{  public void contextInitialized(ServletContextEvent event){  ServletContext servletContext=event.getServletContext();  String applicationName=servletContext.getInitParameter(RecipeUtil.APPLICATION_NAME_PARAMETER);  if (applicationName == null) {    RuntimeException re=new RuntimeException("applicationName context parameter is missing");    servletContext.log(re.getMessage(),re.getCause());    throw re;  }  String baseUrl=servletContext.getInitParameter("baseUrl");  if (baseUrl == null) {    urlFactory=FeedURLFactory.getDefault();  } else {    try {      urlFactory=new FeedURLFactory(baseUrl);    } catch (    MalformedURLException e) {      RuntimeException re=new RuntimeException("Cannot use the baseUrl context parameter",e);      servletContext.log(re.getMessage(),re.getCause());      throw re;    }  }  servletContext.setAttribute(FEED_URL_FACTORY_ATTRIBUTE,urlFactory);  String key=servletContext.getInitParameter(RecipeUtil.DEVELOPER_KEY_PARAMETER);  GoogleBaseService service=new GoogleBaseService(applicationName,key);  mostUsedValues=new MostUsedValues(service,urlFactory,RecipeUtil.RECIPE_ITEMTYPE_QUERY);  initMostUsedValues(mostUsedValues,servletContext);  RecipeUtil.setMostUsedValues(servletContext,mostUsedValues);}  }
class C{  public static int secondaryOrder(int order){  return (order & SECONDARY_ORDER_MASK_) >> SECONDARY_ORDER_SHIFT_;}  }
class C{  public ByteOrder order(){  return ByteOrder.nativeOrder();}  }
class C{  public static void xorString(byte[] from,byte[] to,byte[] scramble,int length){  int pos=0;  int scrambleLength=scramble.length;  while (pos < length) {    to[pos]=(byte)(from[pos] ^ scramble[pos % scrambleLength]);    pos++;  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.EQUALITY_EXPRESSION;}  }
class C{  void send(HandshakeOutStream s) throws IOException {  byte[] suiteBytes=new byte[cipherSuites.size() * 2];  int i=0;  for (  CipherSuite c : cipherSuites) {    suiteBytes[i]=(byte)(c.id >> 8);    suiteBytes[i + 1]=(byte)c.id;    i+=2;  }  s.putBytes16(suiteBytes);}  }
class C{  public static <T extends Object>List<T> iteratorToList(Iterator<T> itr){  List<T> list=new ArrayList<T>();  while (itr.hasNext()) {    list.add(itr.next());  }  return list;}  }
class C{  public static Bitmap decodeSampledBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeResource(res,resId,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeResource(res,resId,options);}  }
class C{  public void back(){  if (this.myIndex > 0) {    this.myIndex-=1;  }}  }
class C{  public boolean updateStoragePoolObjectFromVMAXVolumeViewIndication(){  return retriveAndProcessIndicationAttributeValues(CIMConstants.VOLUME_VIEW_INDICATION_FREE_CAPACITY,null,CIMConstants.VOLUME_VIEW_INDICATION_TOTAL_CAPACITY,null);}  }
class C{  public SgmException(String message){  this(message,null);}  }
class C{  public JCardParseException(JsonToken expected,JsonToken actual){  super(Messages.INSTANCE.getExceptionMessage(35,expected,actual));  this.expected=expected;  this.actual=actual;}  }
class C{  public void init(IWorkbenchWindow window){  UmpleAction.window=window;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
