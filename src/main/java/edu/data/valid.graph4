class C{  private void paintString(Graphics g,int x,int y,int width,int height,int fillStart,int amountFull,Insets b){  if (!(g instanceof Graphics2D)) {    return;  }  Graphics2D g2=(Graphics2D)g;  String progressString=progressBar.getString();  g2.setFont(progressBar.getFont());  Point renderLocation=getStringPlacement(g2,progressString,x,y,width,height);  Rectangle oldClip=g2.getClipBounds();  if (progressBar.getOrientation() == JProgressBar.HORIZONTAL) {    g2.setColor(getSelectionBackground());    SwingUtilities2.drawString(progressBar,g2,progressString,renderLocation.x,renderLocation.y);    g2.setColor(getSelectionForeground());    g2.clipRect(fillStart,y,amountFull,height);    SwingUtilities2.drawString(progressBar,g2,progressString,renderLocation.x,renderLocation.y);  } else {    g2.setColor(getSelectionBackground());    AffineTransform rotate=AffineTransform.getRotateInstance(Math.PI / 2);    g2.setFont(progressBar.getFont().deriveFont(rotate));    renderLocation=getStringPlacement(g2,progressString,x,y,width,height);    SwingUtilities2.drawString(progressBar,g2,progressString,renderLocation.x,renderLocation.y);    g2.setColor(getSelectionForeground());    g2.clipRect(x,fillStart,width,amountFull);    SwingUtilities2.drawString(progressBar,g2,progressString,renderLocation.x,renderLocation.y);  }  g2.setClip(oldClip);}  }
class C{  static SSF decode(String expr,EnumBindRuleType type) throws AciException {  int valueAsInt=0;  try {    valueAsInt=Integer.parseInt(expr);  } catch (  NumberFormatException nfe) {    LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_SSF_FORMAT.get(expr,nfe.getMessage());    throw new AciException(message);  }  if (valueAsInt <= 0 || valueAsInt > MAX_KEY_BITS) {    throw new AciException(WARN_ACI_SYNTAX_INVALID_SSF_RANGE.get(expr));  }  return new SSF(valueAsInt,type);}  }
class C{  public static String replacePart(String self){  return replacePart(self,"");}  }
class C{  protected void loadChildren(ViewFactory f){  setEstimatedMajorSpan(true);  Element elem=getElement();  int index0=elem.getElementIndex(getStartOffset());  int index1=elem.getElementIndex(getEndOffset());  int nChildren=index1 - index0;  View first=f.create(elem.getElement(index0));  first.setParent(this);  float w=first.getPreferredSpan(X_AXIS);  float h=first.getPreferredSpan(Y_AXIS);  if (getMajorAxis() == X_AXIS) {    w*=nChildren;  } else {    h+=nChildren;  }  setSize(w,h);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  protected void flush(final boolean eos) throws IOException {  int chksum;  byte[] header;  header=buildOggPageHeader((eos ? 4 : 0),granulepos,streamSerialNumber,pageCount++,packetCount,headerBuffer);  chksum=OggCrc.checksum(0,header,0,header.length);  chksum=OggCrc.checksum(chksum,dataBuffer,0,dataBufferPtr);  writeInt(header,22,chksum);  this.write(header);  this.write(dataBuffer,0,dataBufferPtr);  dataBufferPtr=0;  headerBufferPtr=0;  packetCount=0;}  }
class C{  public String encodedUsername(){  if (username.isEmpty())   return "";  int usernameStart=scheme.length() + 3;  int usernameEnd=delimiterOffset(url,usernameStart,url.length(),":@");  return url.substring(usernameStart,usernameEnd);}  }
class C{  public void addExecutor(String type) throws MBeanException {  Service service;  try {    service=(Service)getManagedResource();  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }  Executor executor;  try {    executor=(Executor)Class.forName(type).newInstance();  } catch (  InstantiationException e) {    throw new MBeanException(e);  }catch (  IllegalAccessException e) {    throw new MBeanException(e);  }catch (  ClassNotFoundException e) {    throw new MBeanException(e);  }  service.addExecutor(executor);}  }
class C{  @Inject public OpenAMScopeValidator(IdentityManager identityManager,OpenIDTokenIssuer openIDTokenIssuer,OAuth2ProviderSettingsFactory providerSettingsFactory,OpenAMSettings openAMSettings,@Named(OIDC_CLAIMS_NAME) ScriptEvaluator scriptEvaluator,ScriptingServiceFactory scriptingServiceFactory,TokenRestrictionResolver agentValidator,SessionService sessionService){  this.identityManager=identityManager;  this.openIDTokenIssuer=openIDTokenIssuer;  this.providerSettingsFactory=providerSettingsFactory;  this.openAMSettings=openAMSettings;  this.scriptEvaluator=scriptEvaluator;  this.scriptingServiceFactory=scriptingServiceFactory;  this.agentValidator=agentValidator;  this.sessionService=sessionService;}  }
class C{  public StandardServer(){  super();  globalNamingResources=new NamingResourcesImpl();  globalNamingResources.setContainer(this);  if (isUseNaming()) {    namingContextListener=new NamingContextListener();    addLifecycleListener(namingContextListener);  } else {    namingContextListener=null;  }}  }
class C{  final boolean isAlive(){  return thread.isAlive();}  }
class C{  protected JScrollPane createScroller(){  JScrollPane sp=new JScrollPane(list,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);  sp.setHorizontalScrollBar(null);  return sp;}  }
class C{  private void createKeystoreFile() throws IOException {  String location=System.getProperty("user.home") + File.separator;  InputStream in=servletContext.getResourceAsStream("/keystore.jks");  byte[] b=new byte[2007];  in.read(b);  in.close();  FileOutputStream fos=new FileOutputStream(location + "keystore.jks");  fos.write(b);  fos.flush();  fos.close();}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s2_linear_with_both_tags();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public OAuth2ProviderNotFoundException(final String message){  super(message);}  }
class C{  public CalendarWrapper(Map<String,Object> map){  serialized=(String)map.get("serialized");  name=(String)map.get("name");  revision=(String)map.get("_rev");}  }
class C{  private Route nextPostponed(){  return postponedRoutes.remove(0);}  }
class C{  public final void testGetAffineX02(){  assertNull(ECPoint.POINT_INFINITY.getAffineX());}  }
class C{  public byte nextByte() throws DataFormatException {  try {    return bytes.readByte();  } catch (  IndexOutOfBoundsException e) {    throw new DataFormatException(e.getMessage());  }}  }
class C{  public LDIFException(LocalizableMessage message,Number lineNumber,boolean canContinueReading,Throwable cause){  super(message,cause);  this.lineNumber=lineNumber.longValue();  this.canContinueReading=canContinueReading;}  }
class C{  public AddChangeRecordEntry(DN dn,Map<AttributeType,List<Attribute>> attributes){  super(dn);  ifNull(attributes);  this.attributes=new ArrayList<>(attributes.size());  for (  List<Attribute> list : attributes.values()) {    this.attributes.addAll(list);  }}  }
class C{  public int width(){  return mColumns;}  }
class C{  private static String buildCookieHeader(List<String> cookies){  if (cookies.size() == 1)   return cookies.get(0);  StringBuilder sb=new StringBuilder();  for (int i=0, size=cookies.size(); i < size; i++) {    if (i > 0)     sb.append("; ");    sb.append(cookies.get(i));  }  return sb.toString();}  }
class C{  public InReplyToHeader createInReplyToHeader(String callId) throws ParseException {  if (callId == null)   throw new NullPointerException("null callId arg");  InReplyTo inReplyTo=new InReplyTo();  inReplyTo.setCallId(callId);  return inReplyTo;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.DigestMethodElement createDigestMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.DigestMethodElementImpl();}  }
class C{  Item(final int index,final Item i){  this.index=index;  type=i.type;  intVal=i.intVal;  longVal=i.longVal;  strVal1=i.strVal1;  strVal2=i.strVal2;  strVal3=i.strVal3;  hashCode=i.hashCode;}  }
class C{  public PhoneRingingEvent(Intent intent){  super(EVENT_NAME,intent);  Log.d(LOG_TAG,EVENT_NAME);}  }
class C{  private ZonedDateTime resolveLocal(LocalDateTime newDateTime){  return ofLocal(newDateTime,zone,offset);}  }
class C{  public void update_ratsnest(){  if (ratsnest != null) {    ratsnest=new RatsNest(r_board,stat);  }}  }
class C{  String[] processName(String qName,boolean isAttribute){  String name[];  Map<String,String[]> table;  if (isAttribute) {    table=attributeNameTable;  } else {    table=elementNameTable;  }  name=(String[])table.get(qName);  if (name != null) {    return name;  }  name=new String[3];  name[2]=qName.intern();  int index=qName.indexOf(':');  if (index == -1) {    if (isAttribute) {      if (qName == "xmlns" && namespaceDeclUris)       name[0]=NSDECL; else       name[0]="";    } else     if (defaultNS == null) {      name[0]="";    } else {      name[0]=defaultNS;    }    name[1]=name[2];  } else {    String prefix=qName.substring(0,index);    String local=qName.substring(index + 1);    String uri;    if ("".equals(prefix)) {      uri=defaultNS;    } else {      uri=(String)prefixTable.get(prefix);    }    if (uri == null || (!isAttribute && "xmlns".equals(prefix))) {      return null;    }    name[0]=uri;    name[1]=local.intern();  }  table.put(name[2],name);  return name;}  }
class C{  public static boolean isPattern(String pattern){  return pattern.indexOf('*') != -1 || pattern.indexOf('?') != -1;}  }
class C{  public boolean configChangeIsAcceptable(Entry configEntry,LocalizableMessageBuilder unacceptableReason,Entry newConfigEntry){  try {    cachedManagedObject=serverContext.decode(path,configEntry,newConfigEntry);  } catch (  DecodingException e) {    unacceptableReason.append(e.getMessageObject());    return false;  }  try {    cachedManagedObject.ensureIsUsable();  } catch (  ConstraintViolationException e) {    generateUnacceptableReason(e.getMessages(),unacceptableReason);    return false;  }  List<LocalizableMessage> reasons=new LinkedList<>();  if (listener.isConfigurationChangeAcceptable(cachedManagedObject,reasons)) {    return true;  } else {    generateUnacceptableReason(reasons,unacceptableReason);    return false;  }}  }
class C{  public static void println(String key,Object... args){  StringBuilder b=new StringBuilder();  b.append(key);  b.append(": ");  boolean isFirstArgument=true;  for (  Object arg : args) {    if (isFirstArgument) {      isFirstArgument=false;    } else {      b.append(", ");    }    b.append(arg);  }  System.out.println(b.toString());}  }
class C{  public void componentResized(ComponentEvent e){  getHandler().componentResized(e);}  }
class C{  private DecodeException(final LocalizableMessage message,final boolean isFatal,final Throwable cause){  super(message.toString(),cause);  this.message=message;  this.isFatal=isFatal;}  }
class C{  public static void main(String[] args){  Pnt p=new Pnt(1,2,3);  System.out.println("Pnt created: " + p);  Pnt[] matrix1={new Pnt(1,2),new Pnt(3,4)};  Pnt[] matrix2={new Pnt(7,0,5),new Pnt(2,4,6),new Pnt(3,8,1)};  System.out.print("Results should be -2 and -288: ");  System.out.println(determinant(matrix1) + " " + determinant(matrix2));  Pnt p1=new Pnt(1,1);  Pnt p2=new Pnt(-1,1);  System.out.println("Angle between " + p1 + " and "+ p2+ ": "+ p1.angle(p2));  System.out.println(p1 + " subtract " + p2+ ": "+ p1.subtract(p2));  Pnt v0=new Pnt(0,0), v1=new Pnt(1,1), v2=new Pnt(2,2);  Pnt[] vs={v0,new Pnt(0,1),new Pnt(1,0)};  Pnt vp=new Pnt(.1,.1);  System.out.println(vp + " isInside " + toString(vs)+ ": "+ vp.isInside(vs));  System.out.println(v1 + " isInside " + toString(vs)+ ": "+ v1.isInside(vs));  System.out.println(vp + " vsCircumcircle " + toString(vs)+ ": "+ vp.vsCircumcircle(vs));  System.out.println(v1 + " vsCircumcircle " + toString(vs)+ ": "+ v1.vsCircumcircle(vs));  System.out.println(v2 + " vsCircumcircle " + toString(vs)+ ": "+ v2.vsCircumcircle(vs));  System.out.println("Circumcenter of " + toString(vs) + " is "+ circumcenter(vs));}  }
class C{  public Set<String> search(SSOToken token,String startDN,String filter,int numOfEntries,int timeLimit,boolean sortResults,boolean ascendingOrder) throws SSOException, SMSException {  if (debug.messageEnabled()) {    debug.message("SMSEmbeddedLdapObject.search: startDN = " + startDN + ", filter: "+ filter);  }  InternalSearchOperation iso=searchObjects(startDN,filter,SearchScope.WHOLE_SUBTREE,numOfEntries,sortResults,ascendingOrder);  ResultCode resultCode=iso.getResultCode();  if (resultCode == ResultCode.SIZE_LIMIT_EXCEEDED) {    if (debug.messageEnabled()) {      debug.message("SMSEmbeddedLdapObject.search:" + " size limit exceeded. numOfEntries = " + numOfEntries);    }  } else   if (resultCode != ResultCode.SUCCESS) {    if (debug.warningEnabled()) {      debug.warning("SMSEmbeddedLdapObject.search: Unable to " + "search. startDN = " + startDN + ", filter = "+ filter+ ", resultCode = "+ resultCode);    }    throw new SMSException("","sms-error-in-searching");  }  Set<String> answer=new LinkedHashSet<>();  for (  SearchResultEntry entry : iso.getSearchEntries()) {    String dn=entry.getName().toString();    answer.add(dn);  }  if (debug.messageEnabled()) {    debug.message("SMSEmbeddedLdapObject.search: returned " + "successfully: " + filter + "\n\tObjects: "+ answer);  }  return answer;}  }
class C{  @Override protected Object clone() throws CloneNotSupportedException {  throw new CloneNotSupportedException();}  }
class C{  protected Range parseContentRange(HttpServletRequest request,HttpServletResponse response) throws IOException {  String rangeHeader=request.getHeader("Content-Range");  if (rangeHeader == null)   return null;  if (!rangeHeader.startsWith("bytes")) {    response.sendError(HttpServletResponse.SC_BAD_REQUEST);    return null;  }  rangeHeader=rangeHeader.substring(6).trim();  int dashPos=rangeHeader.indexOf('-');  int slashPos=rangeHeader.indexOf('/');  if (dashPos == -1) {    response.sendError(HttpServletResponse.SC_BAD_REQUEST);    return null;  }  if (slashPos == -1) {    response.sendError(HttpServletResponse.SC_BAD_REQUEST);    return null;  }  Range range=new Range();  try {    range.start=Long.parseLong(rangeHeader.substring(0,dashPos));    range.end=Long.parseLong(rangeHeader.substring(dashPos + 1,slashPos));    range.length=Long.parseLong(rangeHeader.substring(slashPos + 1,rangeHeader.length()));  } catch (  NumberFormatException e) {    response.sendError(HttpServletResponse.SC_BAD_REQUEST);    return null;  }  if (!range.validate()) {    response.sendError(HttpServletResponse.SC_BAD_REQUEST);    return null;  }  return range;}  }
class C{  public boolean match(final Cookie cookie,final CookieOrigin origin){  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  String host=origin.getHost().toLowerCase(Locale.ENGLISH);  String cookieDomain=cookie.getDomain();  if (!domainMatch(host,cookieDomain)) {    return false;  }  String effectiveHostWithoutDomain=host.substring(0,host.length() - cookieDomain.length());  return effectiveHostWithoutDomain.indexOf('.') == -1;}  }
class C{  public Node findDatasetsNode(String name){  if (name == null)   return null;  name=findDatasetsName(name);  if (name == null)   return null;  return datasetsSom.getName2Node().get(name);}  }
class C{  public void deleteTag(int tagId,int ifdId){  mData.removeTag(getTrueTagKey(tagId),ifdId);}  }
class C{  private void createLayout(){  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=0;  gbc.weighty=0.0;  gbc.weightx=1.0;  gbc.fill=GridBagConstraints.BOTH;  gbc.gridwidth=2;  addErrorPane(gbc);  gbc.gridwidth=1;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.weightx=0.0;  JLabel l=Utilities.createPrimaryLabel(INFO_CTRL_PANEL_STRUCTURAL_OBJECTCLASS_LABEL.get());  add(l,gbc);  gbc.gridx++;  gbc.insets.left=10;  gbc.anchor=GridBagConstraints.WEST;  DefaultComboBoxModel model=new DefaultComboBoxModel();  structural=Utilities.createComboBox();  structural.setModel(model);  gbc.weightx=1.0;  add(structural,gbc);  gbc.gridy++;  gbc.gridwidth=2;  gbc.gridx=0;  gbc.insets.top=10;  gbc.insets.left=0;  l=Utilities.createPrimaryLabel(INFO_CTRL_PANEL_AUXILIARY_OBJECTCLASS_LABEL.get());  add(l,gbc);  gbc.gridy++;  gbc.weightx=1.0;  gbc.weighty=1.0;  gbc.fill=GridBagConstraints.BOTH;  auxiliary=new AddRemovePanel<>(String.class);  gbc.insets.left=30;  add(auxiliary,gbc);}  }
class C{  public static Bitmap resizeBitmap(final Bitmap input,int destWidth,int destHeight,int rotation) throws OutOfMemoryError {  int dstWidth=destWidth;  int dstHeight=destHeight;  final int srcWidth=input.getWidth();  final int srcHeight=input.getHeight();  if (rotation == 90 || rotation == 270) {    dstWidth=destHeight;    dstHeight=destWidth;  }  boolean needsResize=false;  float p;  if ((srcWidth > dstWidth) || (srcHeight > dstHeight)) {    needsResize=true;    if ((srcWidth > srcHeight) && (srcWidth > dstWidth)) {      p=(float)dstWidth / (float)srcWidth;      dstHeight=(int)(srcHeight * p);    } else {      p=(float)dstHeight / (float)srcHeight;      dstWidth=(int)(srcWidth * p);    }  } else {    dstWidth=srcWidth;    dstHeight=srcHeight;  }  if (needsResize || rotation != 0) {    Bitmap output;    if (rotation == 0) {      output=Bitmap.createScaledBitmap(input,dstWidth,dstHeight,true);    } else {      Matrix matrix=new Matrix();      matrix.postScale((float)dstWidth / srcWidth,(float)dstHeight / srcHeight);      matrix.postRotate(rotation);      output=Bitmap.createBitmap(input,0,0,srcWidth,srcHeight,matrix,true);    }    return output;  } else   return input;}  }
class C{  ChunkedIntArray(int slotsize){  if (this.slotsize < slotsize)   throw new ArrayIndexOutOfBoundsException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CHUNKEDINTARRAY_NOT_SUPPORTED,new Object[]{Integer.toString(slotsize)})); else   if (this.slotsize > slotsize)   System.out.println("*****WARNING: ChunkedIntArray(" + slotsize + ") wasting "+ (this.slotsize - slotsize)+ " words per slot");  chunks.addElement(fastArray);}  }
class C{  public String toString(){  Object[] lList=listenerList;  String s="EventListenerList: ";  s+=lList.length / 2 + " listeners: ";  for (int i=0; i <= lList.length - 2; i+=2) {    s+=" type " + ((Class)lList[i]).getName();    s+=" listener " + lList[i + 1];  }  return s;}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  private static ExtendedResponseProtocolOp readExtendedResponse(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  int resultCode;  try {    resultCode=(int)reader.readInteger();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_RESULT_CODE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  DN matchedDN;  try {    String dnString=reader.readOctetStringAsString();    if (dnString.length() == 0) {      matchedDN=null;    } else {      matchedDN=DN.valueOf(dnString);    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_MATCHED_DN.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  LocalizableMessage errorMessage;  try {    errorMessage=LocalizableMessage.raw(reader.readOctetStringAsString());    if (errorMessage.length() == 0) {      errorMessage=null;    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_ERROR_MESSAGE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ArrayList<String> referralURLs=null;  String oid=null;  ByteString value=null;  try {    if (reader.hasNextElement() && reader.peekType() == TYPE_REFERRAL_SEQUENCE) {      try {        reader.readStartSequence();        referralURLs=new ArrayList<>();        while (reader.hasNextElement()) {          referralURLs.add(reader.readOctetStringAsString());        }        reader.readEndSequence();      } catch (      Exception e) {        logger.traceException(e);        LocalizableMessage message=ERR_LDAP_RESULT_DECODE_REFERRALS.get(e);        throw new LDAPException(PROTOCOL_ERROR,message,e);      }    }    if (reader.hasNextElement() && reader.peekType() == TYPE_EXTENDED_RESPONSE_OID) {      try {        oid=reader.readOctetStringAsString();      } catch (      Exception e) {        logger.traceException(e);        LocalizableMessage message=ERR_LDAP_EXTENDED_RESULT_DECODE_OID.get(e);        throw new LDAPException(PROTOCOL_ERROR,message,e);      }    }    if (reader.hasNextElement() && reader.peekType() == TYPE_EXTENDED_RESPONSE_VALUE) {      try {        value=reader.readOctetString();      } catch (      Exception e) {        logger.traceException(e);        LocalizableMessage message=ERR_LDAP_EXTENDED_RESULT_DECODE_VALUE.get(e);        throw new LDAPException(PROTOCOL_ERROR,message,e);      }    }  } catch (  IOException e) {    logger.traceException(e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new ExtendedResponseProtocolOp(resultCode,errorMessage,matchedDN,referralURLs,oid,value);}  }
class C{  public void handleButton3Request(RequestInvocationEvent event) throws ModelControlException {  backTrail();  ViewBean vb=(AuthPropertiesViewBean)getViewBean(AuthPropertiesViewBean.class);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  @Action(name="status",operationDescription=@Operation(description=RECORD_RESOURCE + "operation.status.description"),response=@Schema(schemaResource="RecordStatus.schema.json")) public Promise<ActionResponse,ResourceException> actionStatus(Context serverContext,ActionRequest actionRequest){  Record currentRecord=debugRecorder.getCurrentRecord();  JsonObject jsonValue=JsonValueBuilder.jsonValue();  if (currentRecord != null) {    jsonValue.put(STATUS_LABEL,true);    jsonValue.put(RECORD_LABEL,currentRecord.exportJson().asMap());  } else {    jsonValue.put(STATUS_LABEL,false);  }  return newResultPromise(newActionResponse(jsonValue.build()));}  }
class C{  public void testClose() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestInputStream tis=new TestInputStream(data);  CipherInputStream cis=new CipherInputStream(tis,new NullCipher());  cis.close();  assertTrue("The close() method should call the close() method " + "of its underlying input stream.",tis.wasClosed());}  }
class C{  @Override public void onPropertyChanged(Observable sender,int propertyId){  if (Participant.class.isInstance(sender)) {switch (propertyId) {case Participant.ROLE_CHANGED_PROPERTY_ID:      setLocalParticipantLeader();    updateView();  break;}}if (ParticipantAudio.class.isInstance(sender)) {ParticipantAudio participantAudio=(ParticipantAudio)sender;switch (propertyId) {case ParticipantAudio.PARTICIPANT_IS_MUTED_PROPERTY_ID:updateParticipantViewOnMute();break;case ParticipantAudio.PARTICIPANT_IS_ON_HOLD_PROPERTY_ID:case ParticipantService.PARTICIPANT_SERVICE_STATE_PROPERTY_ID:updateParticipantViewOnHold(participantAudio.isOnHold());break;}}}  }
class C{  @Override public void put(String name,char value){  emulatedFields.put(name,value);}  }
class C{  public void reset(){  super.reset();  H1=0x6a09e667;  H2=0xbb67ae85;  H3=0x3c6ef372;  H4=0xa54ff53a;  H5=0x510e527f;  H6=0x9b05688c;  H7=0x1f83d9ab;  H8=0x5be0cd19;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public static java.io.PrintStream logStream(){  return info().stream;}  }
class C{  public static boolean match(String pattern,String str,boolean caseSensitive){  return match(pattern,str.toCharArray(),caseSensitive);}  }
class C{  public void delete() throws AMException, SSOException {  delete(false);}  }
class C{  public Object put(Object name,Object value){  return map.put((Attributes.Name)name,(String)value);}  }
class C{  Entry nextEntry(){  if (!hasNext()) {    throw new NoSuchElementException();  }  final Entry entry=nextEntry.toEntry();  nextEntry=null;  return entry;}  }
class C{  public DebugGraphics(Graphics graphics){  this();  this.graphics=graphics;}  }
class C{  public void paintToolTipBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  protected void onRequestHandlerNotFound(RequestContext requestContext,String handlerName) throws ServletException {  ViewBeanManager viewBeanManager=requestContext.getViewBeanManager();  ViewBean targetView=viewBeanManager.getViewBean(AMInvalidURLViewBean.class);  targetView.forwardTo(requestContext);  throw new CompleteRequestException();}  }
class C{  public void testDivideBigDecimalScaleRoundingModeFLOOR(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=100;  String b="74723342238476237823787879183470";  int bScale=15;  int newScale=45;  RoundingMode rm=RoundingMode.FLOOR;  String c="0E-45";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,newScale,rm);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",newScale,result.scale());}  }
class C{  public FrameBodyTLEN(){}  }
class C{  public boolean nonEmpty(){  return count != 0;}  }
class C{  public boolean hasChildNodes(){  return numChildren > 0;}  }
class C{  public void testGetInstance03() throws NoSuchAlgorithmException, IllegalArgumentException, InvalidAlgorithmParameterException {  try {    AlgorithmParameterGenerator.getInstance(null,mProv);    fail("NullPointerException or NoSuchAlgorithmException should be thrown");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(invalidValues[i],mProv);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  AlgorithmParameterGenerator apG;  for (int i=0; i < validValues.length; i++) {    apG=AlgorithmParameterGenerator.getInstance(validValues[i],mProv);    assertEquals("Incorrect algorithm",apG.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",apG.getProvider(),mProv);    checkResult(apG);  }}  }
class C{  @JsonCreator public PostbackAction(@JsonProperty("label") String label,@JsonProperty("data") String data,@JsonProperty("text") String text){  this.label=label;  this.data=data;  this.text=text;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.SingleSignOutNotificationEndpointElement createSingleSignOutNotificationEndpointElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.SingleSignOutNotificationEndpointElementImpl();}  }
class C{  public static java.math.BigDecimal parseDecimal(String lexicalXSDDecimal){  if (theConverter == null)   initConverter();  return theConverter.parseDecimal(lexicalXSDDecimal);}  }
class C{  public QueueTimeoutException(Task task,InterruptedException error){  super(MessageFormat.format("Interrupted whilst waiting on queue.\n" + "Task: {0}",task),error);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public FrameBodyTPRO(){}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {  if (random != null) {    this.random=random;  } else {    this.random=new SecureRandom();  }}  }
class C{  @Override public int hashCode(){  int code=0;  if (uuid != null) {    code+=uuid.hashCode();  }  if (pSubjectName != null) {    code+=pSubjectName.hashCode();  }  if (exclusive) {    code+=Boolean.TRUE.hashCode();  } else {    code+=Boolean.FALSE.hashCode();  }  return code;}  }
class C{  public void testReceive_UnconnectedCloseNull() throws Exception {  assertFalse(this.channel1.isConnected());  this.channel1.close();  assertFalse(this.channel1.isOpen());  try {    this.channel1.receive(null);    fail("Should throw a NPE here.");  } catch (  NullPointerException e) {  }}  }
class C{  private static <T>void siftDownComparable(int k,T x,Object[] array,int n){  if (n > 0) {    Comparable<? super T> key=(Comparable<? super T>)x;    int half=n >>> 1;    while (k < half) {      int child=(k << 1) + 1;      Object c=array[child];      int right=child + 1;      if (right < n && ((Comparable<? super T>)c).compareTo((T)array[right]) > 0)       c=array[child=right];      if (key.compareTo((T)c) <= 0)       break;      array[k]=c;      k=child;    }    array[k]=key;  }}  }
class C{  public UserPrincipalNotFoundException(String name){  super();  this.name=name;}  }
class C{  public synchronized String toString(){  int max=size() - 1;  StringBuilder buf=new StringBuilder();  Iterator it=entrySet().iterator();  buf.append("{");  for (int i=0; i <= max; i++) {    Entry e=(Entry)(it.next());    buf.append(e.key).append("=").append(e.value);    if (i < max)     buf.append(", ");  }  buf.append("}");  return buf.toString();}  }
class C{  @Override synchronized boolean isComparableTypeValid(ObjectName object,String attribute,Comparable<?> value){  final CounterMonitorObservedObject o=(CounterMonitorObservedObject)getObservedObject(object);  if (o == null)   return false;  if (value instanceof Integer) {    o.setType(INTEGER);  } else   if (value instanceof Byte) {    o.setType(BYTE);  } else   if (value instanceof Short) {    o.setType(SHORT);  } else   if (value instanceof Long) {    o.setType(LONG);  } else {    return false;  }  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  DOMImplementation domImpl;  DocumentType nullDocType=null;  NodeList childList;  Node imported;  Node employeeElem;  Attr attrNode;  String attrValue;  String nullNS=null;  doc=(Document)load("staffNS",true);  childList=doc.getElementsByTagNameNS("*","employee");  employeeElem=childList.item(3);  domImpl=getImplementation();  newDoc=domImpl.createDocument(nullNS,"staff",nullDocType);  imported=newDoc.importNode(employeeElem,true);  attrNode=((Element)imported).getAttributeNodeNS(nullNS,"defaultAttr");  assertNull("defaultAttrNotImported",attrNode);  attrValue=((Element)imported).getAttributeNS("http://www.w3.org/2000/xmlns/","emp");  assertEquals("explicitAttrImported","http://www.nist.gov",attrValue);}  }
class C{  public int size(){synchronized (children) {    return children.size();  }}  }
class C{  public PlaPointFloat nearest_segment_point(PlaPointFloat p_from_point){  PlaPointFloat projection=perpendicular_projection(p_from_point);  if (projection.is_contained_in_box(point_a,point_b,0.01)) {    return projection;  }  if (p_from_point.distance_square(point_a) <= p_from_point.distance_square(point_b))   return point_a; else   return point_b;}  }
class C{  public AuthenticationException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public boolean equals(Object o){  if ((o == null) || !(o instanceof SamplePrincipal)) {    return false;  }  if (this == o) {    return true;  }  SamplePrincipal that=(SamplePrincipal)o;  return this.getName().equals(that.getName());}  }
class C{  protected static Collection findIssuerCerts(X509Certificate cert,ExtendedPKIXBuilderParameters pkixParams) throws AnnotatedException {  X509CertStoreSelector certSelect=new X509CertStoreSelector();  Set certs=new HashSet();  try {    certSelect.setSubject(cert.getIssuerX500Principal().getEncoded());  } catch (  IOException ex) {    throw new AnnotatedException("Subject criteria for certificate selector to find issuer certificate could not be set.",ex);  }  Iterator iter;  try {    List matches=new ArrayList();    matches.addAll(CertPathValidatorUtilities.findCertificates(certSelect,pkixParams.getCertStores()));    matches.addAll(CertPathValidatorUtilities.findCertificates(certSelect,pkixParams.getStores()));    matches.addAll(CertPathValidatorUtilities.findCertificates(certSelect,pkixParams.getAdditionalStores()));    iter=matches.iterator();  } catch (  AnnotatedException e) {    throw new AnnotatedException("Issuer certificate cannot be searched.",e);  }  X509Certificate issuer=null;  while (iter.hasNext()) {    issuer=(X509Certificate)iter.next();    certs.add(issuer);  }  return certs;}  }
class C{  public static void checkLocation(int location,String label){  if (location < 0) {    throw new RuntimeException("Unable to locate '" + label + "' in program");  }}  }
class C{  public static int[] toIntArray(String str){  return toIntArray(str,true);}  }
class C{  public void updateValue(String value) throws Exception {  failIfDeleted();  ArrayList childElements=getChildElements();  if (childElements != null && childElements.size() > 0) {    throw new Exception("Invalid operation: update value on: " + this);  }  if (getValueToken() == null) {    getDocument().addValueTokenForElement(this,"");  }  getValueToken().setValue(value);  setValue(value);}  }
class C{  public static net.aimeizi.person.Person.Builder newBuilder(net.aimeizi.person.Person other){  return new net.aimeizi.person.Person.Builder(other);}  }
class C{  public boolean isShutdownInitiated(){  return shutdownInitiated;}  }
class C{  public DeviceCmyk(){  this(0f,0f,0f,1f);}  }
class C{  private void updateGlobalAuthLevelMap(String serviceName){  if (debug.messageEnabled()) {    debug.message("updateGlobalAuthLevelMap for " + serviceName);  }  try {    ServiceSchemaManager ssm=new ServiceSchemaManager(serviceName,AuthD.getAuth().getSSOAuthSession());    ServiceSchema schema=ssm.getOrganizationSchema();    Map attrs=null;    if (schema != null) {      attrs=schema.getAttributeDefaults();    }    String module=moduleServiceMap.get(serviceName);    if ((module != null) && module.length() > 0) {      String attrName=AMAuthConfigUtils.getAuthLevelAttribute(attrs,module);      String authLevel=CollectionHelper.getMapAttr(attrs,attrName);      if ((authLevel != null) && (authLevel.length() > 0)) {        Integer level=Integer.valueOf(authLevel);        globalAuthLevelMap.put(module,level);        debug.message("authLevel is : {}",authLevel);        debug.message("globalAuthLevelMap is : {}",globalAuthLevelMap);      } else {        debug.warning("No auth level for module {}",module);      }    }  } catch (  Exception e) {    if (debug.messageEnabled()) {      debug.message("Error retrieving service schema ",e);    }  }}  }
class C{  public MD5PasswordStorageScheme(){  super();}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  String siteName=(String)getPageSessionAttribute(PG_ATTR_SITE_NAME);  String primaryURL=(String)getDisplayFieldValue(TF_URL);  CCEditableList elist=(CCEditableList)getChild(EDITABLE_FAILOVER_URLS);  elist.restoreStateData();  Set failoverURLs=getValues(elist.getModel().getOptionList());  ServerSiteModel model=(ServerSiteModel)getModel();  try {    model.modifySite(siteName,primaryURL,failoverURLs);    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","siteconfig.updated");  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {  if (bytes == null) {    return null;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b == ESCAPE_CHAR) {      try {        int u=Character.digit((char)bytes[++i],16);        int l=Character.digit((char)bytes[++i],16);        if (u == -1 || l == -1) {          throw new DecoderException("Invalid quoted-printable encoding");        }        buffer.write((char)((u << 4) + l));      } catch (      ArrayIndexOutOfBoundsException e) {        throw new DecoderException("Invalid quoted-printable encoding");      }    } else {      buffer.write(b);    }  }  return buffer.toByteArray();}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SynthMenuBarUI();}  }
class C{  protected void zoomImageToPosition(float scale,float centerX,float centerY,long durationMs){  if (scale > getMaxScale()) {    scale=getMaxScale();  }  final float oldScale=getCurrentScale();  final float deltaScale=scale - oldScale;  post(mZoomImageToPositionRunnable=new ZoomImageToPosition(CropImageView.this,durationMs,oldScale,deltaScale,centerX,centerY));}  }
class C{  public EntryGenerator(final String... templateLines){  Reject.ifNull(templateLines);  this.templateLines=templateLines;}  }
class C{  public String toHexString(){  if (isEmpty()) {    return "";  }  StringBuilder builder=new StringBuilder(length * 2);  builder.append(StaticUtils.byteToHex(buffer[offset]));  for (int i=1; i < length; i++) {    builder.append(StaticUtils.byteToHex(buffer[offset + i]));  }  return builder.toString();}  }
class C{  public void configChanged(ConfigurationActionEvent e){  if (debug.messageEnabled()) {    debug.message("WSFederationMetaServiceListener.configChanged: " + "component=" + e.getComponentName() + ", config="+ e.getConfigurationName());  }  WSFederationMetaCache.clear();  if (e.getRealm() == null) {    SPCache.clear();  } else {    SPCache.clear(e.getRealm());  }}  }
class C{  public Dimension minimumLayoutSize(Container parent){  Dimension rd, mbd;  Insets i=getInsets();  if (contentPane != null) {    rd=contentPane.getMinimumSize();  } else {    rd=parent.getSize();  }  if (menuBar != null && menuBar.isVisible()) {    mbd=menuBar.getMinimumSize();  } else {    mbd=new Dimension(0,0);  }  return new Dimension(Math.max(rd.width,mbd.width) + i.left + i.right,rd.height + mbd.height + i.top+ i.bottom);}  }
class C{  protected final void registerConstraint(Constraint constraint){  constraints.add(constraint);}  }
class C{  protected Request createRiInviteRequest(String contentType,String contentSubType,Object content) throws TckInternalError {  try {    return createRequest(Request.INVITE,riAddressFactory,riHeaderFactory,riMessageFactory,riSipProvider,tiSipProvider,contentType,contentSubType,content);  } catch (  Throwable exc) {    throw new TckInternalError("Failed to create an RI->TI invite request",exc);  }}  }
class C{  private boolean isBeforeEnd(ConcurrentSkipListMap.Node<K,V> n){  if (n == null)   return false;  if (hi == null)   return true;  K k=n.key;  if (k == null)   return true;  int c=m.compare(k,hi);  if (c > 0 || (c == 0 && !hiInclusive))   return false;  return true;}  }
class C{  public AesDecryptor(byte[] key,int off,int len){  this.key=new byte[len];  System.arraycopy(key,off,this.key,0,len);}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo createFoo(long fooId){  return getService().createFoo(fooId);}  }
class C{  protected synchronized void majorRequirementChange(ChildState cs,float delta){  if (estimatedMajorSpan == false) {    majorSpan+=delta;  }  majorChanged=true;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AudienceRestrictionConditionType createAudienceRestrictionConditionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AudienceRestrictionConditionTypeImpl();}  }
class C{  public static boolean isSiteId(String siteID){  if (!platformNamingInitialized) {    initPlatformNaming();  }  return idToSiteTable.containsKey(siteID);}  }
class C{  public static ComponentUI createUI(JComponent b){  return new SynthInternalFrameUI((JInternalFrame)b);}  }
class C{  public int next(){  int node=_currentNode;  if (DTM.NULL != node)   _currentNode=getNextNamespaceNode(_startNode,node,true);  return returnNode(node);}  }
class C{  public Attr removeAttributeNode(Attr oldAttr) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentgetelementsbytagnametotallength.class,args);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (Node<K,V> n=findFirst(); n != null; n=n.next) {    V v=n.getValidValue();    if (v != null) {      s.writeObject(n.key);      s.writeObject(v);    }  }  s.writeObject(null);}  }
class C{  public LDAPListener(final InetSocketAddress address,final ServerConnectionFactory<LDAPClientContext,Integer> factory,final Options options) throws IOException {  Reject.ifNull(address,factory,options);  this.provider=getTransportProvider(options);  this.impl=provider.getLDAPListener(address,factory,options);}  }
class C{  @Override public void write(byte[] b,int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (this) {    int newcount=count + len;    int remaining=len;    int inBufferPos=count - filledBufferSum;    while (remaining > 0) {      int part=Math.min(remaining,currentBuffer.length - inBufferPos);      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);      remaining-=part;      if (remaining > 0) {        needNewBuffer(newcount);        inBufferPos=0;      }    }    count=newcount;  }}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("AllowEventsParser.parse");  AllowEventsList list=new AllowEventsList();  try {    headerName(TokenTypes.ALLOW_EVENTS);    AllowEvents allowEvents=new AllowEvents();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    allowEvents.setEventType(token.getTokenValue());    list.add(allowEvents);    this.lexer.SPorHT();    while (lexer.lookAhead(0) == ',') {      this.lexer.match(',');      this.lexer.SPorHT();      allowEvents=new AllowEvents();      this.lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      allowEvents.setEventType(token.getTokenValue());      list.add(allowEvents);      this.lexer.SPorHT();    }    this.lexer.SPorHT();    this.lexer.match('\n');    return list;  }  finally {    if (debug)     dbg_leave("AllowEventsParser.parse");  }}  }
class C{  private CreationTemplate toCreationTemplate(AttrSet t){  Attr nameAttr=t.getAttribute(TEMPLATE_NAME);  String name=null;  if (nameAttr != null) {    name=nameAttr.getValue();  }  Attr namingAttr=t.getAttribute(TEMPLATE_NAMINGATTRIBUTE);  String namingAttribute=null;  if (namingAttr != null) {    namingAttribute=namingAttr.getValue();  }  Attr classAttr=t.getAttribute(TEMPLATE_JAVACLASS);  String[] classNames=null;  if (classAttr != null) {    classNames=classAttr.getStringValues();  }  AttrSet required=decodeAttr(t.getAttribute(TEMPLATE_REQUIRED),"=");  AttrSet optional=decodeAttr(t.getAttribute(TEMPLATE_OPTIONAL),"=");  AttrSet validated=decodeAttr(t.getAttribute(TEMPLATE_VALIDATED),"=");  CreationTemplate template=new CreationTemplate();  ArrayList classes=new ArrayList();  try {    if (classNames != null) {      for (int i=0; i < classNames.length; i++) {        Class cls=Class.forName(classNames[i]);        classes.add(cls);      }    }    template=new CreationTemplate(name,required,optional,classes);  } catch (  ClassNotFoundException e) {    template=new CreationTemplate(name,required,optional);  }  if (validated != null) {    template.setValidation(validated);  }  if (namingAttribute != null) {    template.setNamingAttribute(namingAttribute);  }  return template;}  }
class C{  public static List replaceString(List list,String orig,String substitution){  List manipulated=new ArrayList(list.size());  for (Iterator iter=list.iterator(); iter.hasNext(); ) {    String str=(String)iter.next();    manipulated.add(replaceString(str,orig,substitution));  }  return manipulated;}  }
class C{  public final boolean isSecure(Socket sock) throws IllegalArgumentException {  if (sock == null) {    throw new IllegalArgumentException("Socket may not be null.");  }  if (sock.getClass() != Socket.class) {    throw new IllegalArgumentException("Socket not created by this factory.");  }  if (sock.isClosed()) {    throw new IllegalArgumentException("Socket is closed.");  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS14.class,args);}  }
class C{  @Override public void incrementErrorCount(){  swValve.incrementErrorCount();}  }
class C{  public ProviderDigest(String provider){  this.provider=provider;}  }
class C{  @Override public void closeJDBCConn(){  if (conn != null) {    try {      System.out.println("StreamingQuoteDAOModeLtp.closeJDBCConn(): Closing JDBC connection for Streaming Quote...");      conn.close();    } catch (    SQLException e) {      System.out.println("StreamingQuoteDAOModeLtp.closeJDBCConn(): SQLException on conn close");      e.printStackTrace();    }  } else {    System.out.println("StreamingQuoteDAOModeLtp.closeJDBCConn(): WARNING: DB connection already null");  }}  }
class C{  public SchemaViolationException(){  super();}  }
class C{  public Entity defineEntity(String name,int type,char data[]){  Entity ent=entityHash.get(name);  if (ent == null) {    ent=new Entity(name,type,data);    entityHash.put(name,ent);    if (((type & GENERAL) != 0) && (data.length == 1)) {switch (type & ~GENERAL) {case CDATA:case SDATA:        entityHash.put(Integer.valueOf(data[0]),ent);      break;  }}}return ent;}  }
class C{  @Override public NamingEnumeration<Binding> listBindings(String name) throws NamingException {  return listBindings(new CompositeName(name));}  }
class C{  private ValueDecoder(){}  }
class C{  public boolean containsAttributes(AttributeSet attributes){  boolean result=true;  Enumeration names=attributes.getAttributeNames();  while (result && names.hasMoreElements()) {    Object name=names.nextElement();    result=attributes.getAttribute(name).equals(getAttribute(name));  }  return result;}  }
class C{  public void checkTokenType(String methodName){  if (ldapConnect) {    String str=methodName + "is an unsupported operation for tokens created" + "by direct ldap connection";    SSOProviderImpl.debug.error(str);    throw new UnsupportedOperationException(str);  }}  }
class C{  public static void cacheResult(List<Foo> foos){  getPersistence().cacheResult(foos);}  }
class C{  AttributeListAdapter(){}  }
class C{  public void addChild(PersistentObject object) throws AccessRightsException, EntryAlreadyExistsException, UMSException {  Principal principal=getPrincipal();  if (principal == null) {    String msg=i18n.getString(IUMSConstants.BAD_PRINCIPAL_HDL);    throw new IllegalArgumentException(msg);  } else   if (object == null) {    String msg=i18n.getString(IUMSConstants.BAD_OBJ_TO_ADD);    throw new IllegalArgumentException(msg);  }  if (object instanceof User) {    String pcId=getPeopleContainer((User)object);    if (pcId != null) {      PeopleContainer pc=new PeopleContainer(getPrincipal(),new Guid(pcId));      pc.addUser((User)object);    } else {      super.addChild(object);    }  } else {    super.addChild(object);  }}  }
class C{  public String decode(String pString) throws DecoderException {  if (pString == null) {    return null;  }  try {    return decode(pString,getDefaultCharset());  } catch (  UnsupportedEncodingException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  public AttributeStatement createAttributeStatement(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ATTRIBUTE_STATEMENT);  if (obj == null) {    return new AttributeStatementImpl();  } else {    return (AttributeStatement)obj;  }}  }
class C{  protected MutableAttributeSet createLargeAttributeSet(AttributeSet a){  return new LargeConversionSet(a);}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setAutoIncrementPatch(true);  unchecked(null);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public ValidationException(String message){  this(message,null,null);}  }
class C{  public LdapConnection connect(final String host,final int port,final Options options) throws LdapException {  final ConnectionFactory factory=getConnectionFactory(host,port,options);  return new LdapConnection(factory.getConnection(),options.get(TRANSACTIONID_OPTION));}  }
class C{  public GSERParser skipMSP() throws DecodeException {  skip(GSER_MSP);  return this;}  }
class C{  public void test_checkClientTrusted_03() throws Exception {  X509TrustManagerImpl xtm=new X509TrustManagerImpl();  X509Certificate[] xcert=setX509Certificate();  xtm.checkClientTrusted(xcert,"SSL");}  }
class C{  public boolean isOtherWritable(){  return is(encodedPermission,OTHER_WRITABLE);}  }
class C{  public static byte[] encodeUri(String uri){  if (uri.length() == 0) {    return new byte[0];  }  ByteBuffer bb=ByteBuffer.allocate(uri.length());  bb.order(ByteOrder.BIG_ENDIAN);  int position=0;  Byte schemeCode=encodeUriScheme(uri);  if (schemeCode == null) {    return null;  }  String scheme=URI_SCHEMES.get(schemeCode);  bb.put(schemeCode);  position+=scheme.length();  if (URLUtil.isNetworkUrl(scheme)) {    return encodeUrl(uri,position,bb);  } else   if ("urn:uuid:".equals(scheme)) {    return encodeUrnUuid(uri,position,bb);  }  return null;}  }
class C{  public static Target decode(EnumTargetOperator operator,String expr,DN aciDN) throws AciException {  return new Target(operator,expr,aciDN);}  }
class C{  private boolean confirmToStopServer() throws ClientException {  return askConfirmation(INFO_CLI_UNINSTALL_CONFIRM_STOP.get(),true,logger);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.TripleDesElement createTripleDesElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.TripleDesElementImpl();}  }
class C{  boolean checkServerUp(String serverId){  if ((serverId == null) || (serverId.isEmpty())) {    return false;  }  if (serverId.equalsIgnoreCase(localServerId)) {    return true;  }  if ((servers == null) || servers.isEmpty()) {    return false;  }  StateInfo info=servers.get(serverId);  info.isUp=checkServerUp(info);  return info.isUp;}  }
class C{  public static ApplicationType fromString(String type){  if (type != null) {    for (    ApplicationType applicationType : ApplicationType.values()) {      if (type.equalsIgnoreCase(applicationType.type)) {        return applicationType;      }    }  }  return null;}  }
class C{  @Override public void contextDestroyed(ServletContextEvent event){  log("contextDestroyed()");  this.context=null;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String theFirstString=m_arg0.execute(xctxt).str();  String theSecondString=m_arg1.execute(xctxt).str();  String theThirdString=m_arg2.execute(xctxt).str();  int theFirstStringLength=theFirstString.length();  int theThirdStringLength=theThirdString.length();  StringBuffer sbuffer=new StringBuffer();  for (int i=0; i < theFirstStringLength; i++) {    char theCurrentChar=theFirstString.charAt(i);    int theIndex=theSecondString.indexOf(theCurrentChar);    if (theIndex < 0) {      sbuffer.append(theCurrentChar);    } else     if (theIndex < theThirdStringLength) {      sbuffer.append(theThirdString.charAt(theIndex));    } else {    }  }  return new XString(sbuffer.toString());}  }
class C{  public static NSObject parse(byte[] bytes) throws IOException, PropertyListFormatException, ParseException, ParserConfigurationException, SAXException {switch (determineType(bytes)) {case TYPE_BINARY:    return BinaryPropertyListParser.parse(bytes);case TYPE_XML:  return XMLPropertyListParser.parse(bytes);case TYPE_ASCII:return ASCIIPropertyListParser.parse(bytes);default :throw new PropertyListFormatException("The given data is not a property list of a supported format.");}}  }
class C{  public String encode(String pString,String charset) throws UnsupportedEncodingException {  if (pString == null) {    return null;  }  return new String(encode(pString.getBytes(charset)),StringEncodings.US_ASCII);}  }
class C{  public void testRadix36Neg(){  String value="-uhguweut98iu4h3478tq3985pq98yeiuth33485yq4aiuhalai485yiaehasdkr8tywi5uhslei8";  int radix=36;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  public Element createElement(String tagName) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.EncodedString createEncodedString() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.EncodedStringImpl();}  }
class C{  public final long determinant(PlaVectorInt p_other){  return (long)v_x * p_other.v_y - (long)v_y * p_other.v_x;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  setPageSessionAttribute(getTrackingTabIDName(),AMAdminConstants.FED_TAB_ID);  setPageSessionAttribute(AMAdminConstants.PREVIOUS_TAB_ID,getTrackingTabIDName());  FederationViewBean vb=(FederationViewBean)getViewBean(FederationViewBean.class);  backTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardToAuthServicesView(event);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatareplacedatamiddle.class,args);}  }
class C{  public static SetOverrideType from_int(int i){switch (i) {case _SET_OVERRIDE:    return SET_OVERRIDE;case _ADD_OVERRIDE:  return ADD_OVERRIDE;default :throw new org.omg.CORBA.BAD_PARAM();}}  }
class C{  @Override public int read(byte[] bts) throws IOException {  int n=super.read(bts);  if (n != -1) {    branch.write(bts,0,n);  }  return n;}  }
class C{  public boolean contains_inside(PlaPointInt p_point){  return p_point.v_x > box_ll.v_x && p_point.v_x < box_ur.v_x && p_point.v_y > box_ll.v_y && p_point.v_y < box_ur.v_y;}  }
class C{  private FileTime(long value,TimeUnit unit,Instant instant){  this.value=value;  this.unit=unit;  this.instant=instant;}  }
class C{  public static boolean isOEMVersion(){  return !isClassAvailable("org.opends.server.backends.jeb.JEBackend");}  }
class C{  public boolean addChild(SMSFlatFileTreeNode child){  boolean added=false;  String childDN=child.id;  String parentDN="," + id;  if (childDN.endsWith(parentDN)) {    String rdn=child.distinguishedName.substring(0,(child.distinguishedName.length() - parentDN.length()));    if (rdn.indexOf(',') == -1) {      children.add(child);      child.parentNode=this;      added=true;    } else {      for (Iterator i=children.iterator(); (i.hasNext()) && !added; ) {        SMSFlatFileTreeNode c=(SMSFlatFileTreeNode)i.next();        added=c.addChild(child);      }    }  }  return added;}  }
class C{  protected void acceptFrom(SocketImpl s,InetSocketAddress saddr) throws IOException {  if (cmdsock == null) {    return;  }  InputStream in=cmdIn;  socksBind(saddr);  in.read();  int i=in.read();  in.read();  SocketException ex=null;  int nport;  byte[] addr;  InetSocketAddress real_end=null;switch (i) {case REQUEST_OK:    i=in.read();switch (i) {case IPV4:    addr=new byte[4];  readSocksReply(in,addr);nport=in.read() << 8;nport+=in.read();real_end=new InetSocketAddress(new Inet4Address("",addr),nport);break;case DOMAIN_NAME:int len=in.read();addr=new byte[len];readSocksReply(in,addr);nport=in.read() << 8;nport+=in.read();real_end=new InetSocketAddress(new String(addr),nport);break;case IPV6:addr=new byte[16];readSocksReply(in,addr);nport=in.read() << 8;nport+=in.read();real_end=new InetSocketAddress(new Inet6Address("",addr),nport);break;}break;case GENERAL_FAILURE:ex=new SocketException("SOCKS server general failure");break;case NOT_ALLOWED:ex=new SocketException("SOCKS: Accept not allowed by ruleset");break;case NET_UNREACHABLE:ex=new SocketException("SOCKS: Network unreachable");break;case HOST_UNREACHABLE:ex=new SocketException("SOCKS: Host unreachable");break;case CONN_REFUSED:ex=new SocketException("SOCKS: Connection refused");break;case TTL_EXPIRED:ex=new SocketException("SOCKS: TTL expired");break;case CMD_NOT_SUPPORTED:ex=new SocketException("SOCKS: Command not supported");break;case ADDR_TYPE_NOT_SUP:ex=new SocketException("SOCKS: address type not supported");break;}if (ex != null) {cmdIn.close();cmdOut.close();cmdsock.close();cmdsock=null;throw ex;}if (s instanceof SocksSocketImpl) {((SocksSocketImpl)s).external_address=real_end;}if (s instanceof PlainSocketImpl) {PlainSocketImpl psi=(PlainSocketImpl)s;psi.setInputStream((SocketInputStream)in);psi.setFileDescriptor(cmdsock.getImpl().getFileDescriptor());psi.setAddress(cmdsock.getImpl().getInetAddress());psi.setPort(cmdsock.getImpl().getPort());psi.setLocalPort(cmdsock.getImpl().getLocalPort());} else {s.fd=cmdsock.getImpl().fd;s.address=cmdsock.getImpl().address;s.port=cmdsock.getImpl().port;s.localport=cmdsock.getImpl().localport;}cmdsock=null;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (XString)getArg0AsString(xctxt);}  }
class C{  private void addMethod(MappedClass clazz,String[] parts){  String newName=parts[1].substring(0,parts[1].indexOf("("));  String original=parts[3];  String desc=fixDesc(parts[0],parts[1].substring(parts[1].indexOf("(")));  MappedMember mm=new MappedMember(clazz,null,-1,desc,original);  mm.setNewName(newName);  clazz.addMethod(mm);}  }
class C{  public void process(String name,Vector elems,Hashtable atts,String pcdata){  for (int i=0; i < elems.size(); i++) {    logInfoMap.put(((LogInfo)elems.elementAt(i)).infoKey,((LogInfo)elems.elementAt(i)).infoValue);  }  this.name=name;}  }
class C{  private static BitMatrix bitMatrixFrombitArray(byte[][] input,int margin){  BitMatrix output=new BitMatrix(input[0].length + 2 * margin,input.length + 2 * margin);  output.clear();  for (int y=0, yOutput=output.getHeight() - margin - 1; y < input.length; y++, yOutput--) {    for (int x=0; x < input[0].length; x++) {      if (input[y][x] == 1) {        output.set(x + margin,yOutput);      }    }  }  return output;}  }
class C{  public void paintTabbedPaneTabAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public int memBytesToPercent(long size){  return (int)(((size / ONE_MEGABYTE) * 100) / reservableMemory);}  }
class C{  public Observable<WeatherData> loadWeatherData(String location){  Map<String,String> params=new HashMap<>();  params.put("location",location);  params.put("language","zh-Hans");  params.put("unit","c");  params.put("start","0");  params.put("days","3");  return mHttpHelper.getService(WeatherApi.class).loadWeatherData(params).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node createdNode;  Node lchild;  String childName;  Node appendedChild;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  createdNode=doc.createElement("newChild");  appendedChild=employeeNode.appendChild(createdNode);  lchild=employeeNode.getLastChild();  childName=lchild.getNodeName();  assertEquals("nodeAppendChildAssert1","newChild",childName);}  }
class C{  public void logFatalError(String message){  logger.fatal(message);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wspolicy.AppliesToElement createAppliesToElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wspolicy.impl.AppliesToElementImpl();}  }
class C{  public static void closeQuietly(final ResultSet rset){  if (rset != null) {    try {      rset.close();    } catch (    final Exception e) {    }  }}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public String encode(){  String encoding=SIPConstants.SIP_VERSION_STRING + SP + statusCode;  if (reasonPhrase != null)   encoding+=SP + reasonPhrase;  encoding+=NEWLINE;  return encoding;}  }
class C{  public String toBASE64EncodedString() throws FSMsgException {  FSUtils.debug.message("FSResponse.toBASE64EncodedString: Called");  if ((responseID == null) || (responseID.length() == 0)) {    responseID=FSUtils.generateID();    if (responseID == null) {      FSUtils.debug.error("FSResponse.toBASE64EncodedString: " + "couldn't generate ResponseID.");      throw new FSMsgException("errorGenerateID",null);    }  }  return Base64.encode(this.toXMLString().getBytes());}  }
class C{  private ChangeRecordEntry parseAddChangeRecordEntry(DN entryDN,List<StringBuilder> lines) throws LDIFException {  Map<ObjectClass,String> objectClasses=new HashMap<>();  Map<AttributeType,List<AttributeBuilder>> attrBuilders=new HashMap<>();  for (  StringBuilder line : lines) {    readAttribute(lines,line,entryDN,objectClasses,attrBuilders,attrBuilders,importConfig.validateSchema());  }  AttributeType ocType=CoreSchema.getObjectClassAttributeType();  AttributeBuilder builder=new AttributeBuilder(ocType);  builder.addAllStrings(objectClasses.values());  Map<AttributeType,List<Attribute>> attributes=toAttributesMap(attrBuilders);  if (attributes.get(ocType) == null) {    attributes.put(ocType,builder.toAttributeList());  }  return new AddChangeRecordEntry(entryDN,attributes);}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj != null && obj instanceof PropertyDescriptor) {    PropertyDescriptor other=(PropertyDescriptor)obj;    Method otherReadMethod=other.getReadMethod();    Method otherWriteMethod=other.getWriteMethod();    if (!compareMethods(getReadMethod(),otherReadMethod)) {      return false;    }    if (!compareMethods(getWriteMethod(),otherWriteMethod)) {      return false;    }    if (getPropertyType() == other.getPropertyType() && getPropertyEditorClass() == other.getPropertyEditorClass() && bound == other.isBound() && constrained == other.isConstrained() && writeMethodName == other.writeMethodName && readMethodName == other.readMethodName) {      return true;    }  }  return false;}  }
class C{  public String convert(String line){  return StringEscapeUtils.escapeXml(line);}  }
class C{  public LinkedList<BrdTracep> split(ShapeTileOctagon p_clip_shape){  LinkedList<BrdTracep> clean_list=new LinkedList<BrdTracep>();  if (!is_nets_normal()) {    clean_list.add(this);    return clean_list;  }  boolean own_trace_split=false;  AwtreeShapeSearch default_tree=r_board.search_tree_manager.get_default_tree();  for (int my_line_index=1; my_line_index < polyline.plaline_len(-1); ++my_line_index) {    if (own_trace_split)     break;    PlaSegmentInt my_segment=polyline.segment_get(my_line_index);    if (p_clip_shape != null) {      if (!p_clip_shape.intersects(my_segment.bounding_box()))       continue;    }    ShapeTile my_segment_shape=get_tree_shape(default_tree,my_line_index - 1);    Collection<AwtreeFindEntry> over_tree_entries=default_tree.find_overlap_tree_entries(my_segment_shape,get_layer());    if (r_board.debug(Mdbg.TRACE_SPLIT,Ldbg.DEBUG))     r_board.userPrintln("split: over_tree_entries " + over_tree_entries.size());    for (    AwtreeFindEntry overlap_tentry : over_tree_entries) {      if (!is_on_the_board())       return clean_list;      if (!(overlap_tentry.object instanceof BrdItem))       continue;      BrdItem overlap_item=(BrdItem)overlap_tentry.object;      if (r_board.debug(Mdbg.TRACE_SPLIT,Ldbg.DEBUG))       r_board.userPrintln("split: overlap_item " + overlap_item);      if (split_avoid_this_item(my_line_index - 1,overlap_tentry,overlap_item))       continue;      if (!overlap_item.shares_net(this))       continue;      if (overlap_item instanceof BrdTracep) {        if (r_board.debug(Mdbg.TRACE_SPLIT,Ldbg.DEBUG)) {          r_board.userPrintln("split: USE split_wtrace_points");          own_trace_split=split_wtrace_points(clean_list,my_line_index,my_segment,overlap_tentry,(BrdTracep)overlap_item);        } else {          own_trace_split=split_wtrace(clean_list,my_line_index,my_segment,overlap_tentry,(BrdTracep)overlap_item);        }        if (own_trace_split)         break;      } else       if (overlap_item instanceof BrdAbit) {        split_abit(my_line_index,(BrdAbit)overlap_item,my_segment);      } else       if (overlap_item instanceof BrdAreaConduction) {        if (split_conduction((BrdAreaConduction)overlap_item))         return clean_list;      }    }  }  if (!own_trace_split)   clean_list.add(this);  for (  BrdItem curr_item : clean_list)   curr_item.art_item_clear();  return clean_list;}  }
class C{  @Override public void close() throws IOException {  if (writer != null) {    writer.close();  } else {    closed=true;  }}  }
class C{  String verifyOrgName(String name) throws InvalidNameException, NameNotFoundException, SSOException {  String orgName=null;  if (name == null) {    throw (new InvalidNameException(ResBundleUtils.rbName,"null_name",null,"null",PolicyException.ORGANIZATION));  }  orgName=DNMapper.orgNameToDN(name);  if (!SMSEntry.checkIfEntryExists(orgName,token)) {    if (debug.warningEnabled()) {      debug.warning("Checking for organization name: " + orgName + " failed since entry does not exist");    }    String[] objs={name};    throw (new NameNotFoundException(ResBundleUtils.rbName,"org_not_found",objs,orgName,PolicyException.ORGANIZATION));  }  return (orgName);}  }
class C{  public GregorianCalendar(int year,int month,int dayOfMonth,int hourOfDay,int minute,int second){  this(year,month,dayOfMonth,hourOfDay,minute,second,0);}  }
class C{  protected void uninstallDefaults(){  if (splitPane.getLayout() == layoutManager) {    splitPane.setLayout(null);  }  if (nonContinuousLayoutDivider != null) {    splitPane.remove(nonContinuousLayoutDivider);  }  LookAndFeel.uninstallBorder(splitPane);  Border b=divider.getBorder();  if (b instanceof UIResource) {    divider.setBorder(null);  }  splitPane.remove(divider);  divider.setBasicSplitPaneUI(null);  layoutManager=null;  divider=null;  nonContinuousLayoutDivider=null;  setNonContinuousLayoutDivider(null);  splitPane.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,null);  splitPane.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,null);}  }
class C{  private static String prefixIfRequired(String authClassRef){  if ((authClassRef != null) && (authClassRef.indexOf(':') == -1)) {    return SAML2Constants.AUTH_CTX_PREFIX + authClassRef;  } else {    return authClassRef;  }}  }
class C{  public void updateUI(){  setUI((MenuItemUI)UIManager.getUI(this));}  }
class C{  public FrameBodyTRDA(){}  }
class C{  public org.w3c.dom.Document encryptAndReplace(org.w3c.dom.Document doc,org.w3c.dom.Element element,java.lang.String secretKeyAlg,int keySize,java.lang.String certAlias,java.lang.String providerID) throws EncryptionException {  return ep.encryptAndReplace(doc,element,secretKeyAlg,keySize,certAlias,0,providerID);}  }
class C{  private void transfer(Entry<K>[] src,Entry<K>[] dest){  for (int j=0; j < src.length; ++j) {    Entry<K> e=src[j];    src[j]=null;    while (e != null) {      Entry<K> next=e.next;      Object key=e.get();      if (key == null) {        e.next=null;        e.value=0;        size--;      } else {        int i=indexFor(e.hash,dest.length);        e.next=dest[i];        dest[i]=e;      }      e=next;    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns11.class,args);}  }
class C{  public SessionDescription createSessionDescription() throws SdpException {  SessionDescriptionImpl sessionDescriptionImpl=new SessionDescriptionImpl();  ProtoVersionField ProtoVersionField=new ProtoVersionField();  ProtoVersionField.setVersion(0);  sessionDescriptionImpl.setVersion(ProtoVersionField);  OriginField originImpl=null;  try {    originImpl=(OriginField)this.createOrigin("user",InetAddress.getLocalHost().getHostAddress());  } catch (  UnknownHostException e) {    e.printStackTrace();  }  sessionDescriptionImpl.setOrigin(originImpl);  SessionNameField sessionNameImpl=new SessionNameField();  sessionNameImpl.setValue("-");  sessionDescriptionImpl.setSessionName(sessionNameImpl);  TimeDescriptionImpl timeDescriptionImpl=new TimeDescriptionImpl();  TimeField timeImpl=new TimeField();  timeImpl.setZero();  timeDescriptionImpl.setTime(timeImpl);  Vector times=new Vector();  times.addElement(timeDescriptionImpl);  sessionDescriptionImpl.setTimeDescriptions(times);  return sessionDescriptionImpl;}  }
class C{  @Override boolean requiresConnectorConfigurationHelper(JsonValue requestContent){  return true;}  }
class C{  public CompareResult compare(CompareRequest request) throws LdapException {  addTransactionIdControl(request);  return connection.compare(request);}  }
class C{  public static <T>java.util.List<T> dynamicQuery(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return getService().dynamicQuery(dynamicQuery);}  }
class C{  private Object lookup(String key,Class type) throws SAXException {  Object value;  if (_handler != null) {    if (_handler.hasVariable(key)) {      return checkCast(_handler.getVariable(key),type);    }  }  value=_mapping.get(key);  if (value == null) {    throw new SAXException("ID " + key + " has not been defined");  }  return checkCast(value,type);}  }
class C{  public WSFederationSingleLogoutHandler(){  debug=SingleLogoutManager.getInstance().debug;}  }
class C{  public static boolean isAbsolutePath(String systemId){  if (systemId == null)   return false;  final File file=new File(systemId);  return file.isAbsolute();}  }
class C{  public static void registerFont(String path,String alias){  fontRegisterProvider.registerFont(path,alias);}  }
class C{  public void rebind(org.omg.CosNaming.NameComponent[] n,org.omg.CORBA.Object obj) throws org.omg.CosNaming.NamingContextPackage.NotFound, org.omg.CosNaming.NamingContextPackage.CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("rebind",true);    org.omg.CosNaming.NameHelper.write($out,n);    org.omg.CORBA.ObjectHelper.write($out,obj);    $in=_invoke($out);    return;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"))     throw org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    rebind(n,obj);  } finally {    _releaseReply($in);  }}  }
class C{  public boolean isDeleteAcceptable(ManagementContext context,ManagedObjectPath<?,?> path,Collection<LocalizableMessage> unacceptableReasons) throws LdapException {  return true;}  }
class C{  public StatusMessageImpl(Element element) throws XACMLException {  processElement(element);  makeImmutable();}  }
class C{  public void nodesWereRemoved(TreeNode node,int[] childIndices,Object[] removedChildren){  if (node != null && childIndices != null) {    fireTreeNodesRemoved(this,getPathToRoot(node),childIndices,removedChildren);  }}  }
class C{  public boolean isVarargs(){  return testAllFlags(VARARGS) && isInvocable();}  }
class C{  public boolean isPartialReturn(){  return partialReturn;}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec09(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,null,opi);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public ModelMBeanNotificationInfo(String[] notifTypes,String name,String description){  this(notifTypes,name,description,null);}  }
class C{  private String modifyAddressCard(String entry,AddressCardElement ace){  StringBuffer sb=new StringBuffer(100);  AddressElement ae=(AddressElement)ace.getAddress();  String address=modifyAddress(entry,ae);  StringTokenizer st=new StringTokenizer(address,"|");  while (st.hasMoreTokens()) {    String token=st.nextToken();    if (token.startsWith("Nick")) {      DSTString nick=ace.getNick();      if (nick != null) {        sb.append("Nick").append("=").append(nick.getValue()).append("|");      } else {        sb.append(token).append("|");      }    } else     if (token.startsWith("LComment")) {      DSTString lComment=ace.getLComment();      if (lComment != null) {        sb.append("LComment").append("=").append(lComment.getValue()).append("|");      } else {        sb.append(token).append("|");      }    } else     if (token.startsWith("id")) {      String id=ace.getId();      if (id != null) {        sb.append("id").append("=").append(id).append("|");      }    } else {      sb.append(token).append("|");    }  }  return sb.toString();}  }
class C{  public CallMethodRule(String methodName){  this(0,methodName,0,(Class[])null);}  }
class C{  private boolean isJavaClassAcceptable(SynchronizationProviderCfg configuration,List<LocalizableMessage> unacceptableReasons){  String className=configuration.getJavaClass();  SynchronizationProviderCfgDefn d=SynchronizationProviderCfgDefn.getInstance();  ClassPropertyDefinition pd=d.getJavaClassPropertyDefinition();  try {    Class<? extends SynchronizationProvider> theClass=pd.loadClass(className,SynchronizationProvider.class);    SynchronizationProvider provider=theClass.newInstance();    return provider.isConfigurationAcceptable(configuration,unacceptableReasons);  } catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_SYNCH_UNABLE_TO_INSTANTIATE_PROVIDER.get(className,configuration.dn(),stackTraceToSingleLineString(e));    unacceptableReasons.add(message);    return false;  }}  }
class C{  public FontFormatException(String reason){  super(reason);}  }
class C{  private void deleteAddAttributesEntry(Entry e,DN oldEntryDN,DN newEntryDN){  LinkedList<Modification> mods=new LinkedList<>();  DN entryDN=e.getName();  for (  AttributeType type : attributeTypes) {    if (e.hasAttribute(type)) {      ByteString value=ByteString.valueOfUtf8(oldEntryDN.toString());      if (e.hasValue(type,value)) {        mods.add(new Modification(ModificationType.DELETE,Attributes.create(type,value)));        if (newEntryDN != null) {          mods.add(new Modification(ModificationType.ADD,Attributes.create(type,newEntryDN.toString())));        }      }    }  }  InternalClientConnection conn=InternalClientConnection.getRootConnection();  ModifyOperation modifyOperation=conn.processModify(entryDN,mods);  if (modifyOperation.getResultCode() != ResultCode.SUCCESS) {    logger.error(ERR_PLUGIN_REFERENT_MODIFY_FAILED,entryDN,modifyOperation.getErrorMessage());  }}  }
class C{  private void appendTimeZone(StringBuffer buffer,int count,boolean generalTimeZone){  if (generalTimeZone) {    TimeZone tz=calendar.getTimeZone();    boolean daylight=(calendar.get(Calendar.DST_OFFSET) != 0);    int style=count < 4 ? TimeZone.SHORT : TimeZone.LONG;    if (!formatData.customZoneStrings) {      buffer.append(tz.getDisplayName(daylight,style,formatData.locale));      return;    }    String custom=TimeZoneNames.getDisplayName(formatData.zoneStrings,tz.getID(),daylight,style);    if (custom != null) {      buffer.append(custom);      return;    }  }  appendNumericTimeZone(buffer,count,generalTimeZone);}  }
class C{  @Override public boolean accept(File file){  return file.isDirectory();}  }
class C{  public synchronized void updateCredentials(Principal principal,String authType,String username,String password){  this.principal=principal;  this.authType=authType;  this.username=username;  this.password=password;  this.canReauthenticate=(HttpServletRequest.BASIC_AUTH.equals(authType) || HttpServletRequest.FORM_AUTH.equals(authType));}  }
class C{  public String simpleQueryForString(){  acquireReference();  try {    return getSession().executeForString(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public void testClear() throws Exception {  assertNull(cache.toVerboseString(),"Expected empty cache.  " + "Cache contents:" + ServerConstants.EOL + cache.toVerboseString());  TestCaseUtils.initializeTestBackend(false);  String b=DirectoryServer.getBackend(DN.valueOf("o=test")).getBackendID();  cache.clear();  cache.putEntry(testEntriesList.get(0),b,1);  cache.clear();  assertNull(cache.getEntry(testEntriesList.get(0).getName()),"Not expected to find " + testEntriesList.get(0).getName() + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  assertNull(cache.getEntry(b,1),"Not expected to find entry id " + -1 + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  cache.clear();}  }
class C{  private static boolean eq(Object o1,Object o2){  return (o1 == null) ? o2 == null : o1.equals(o2);}  }
class C{  protected void handleStartTag(TagElement tag){  Element elem=tag.getElement();  if (elem == dtd.body) {    inbody++;  } else   if (elem == dtd.html) {  } else   if (elem == dtd.head) {    inhead++;  } else   if (elem == dtd.title) {    intitle++;  } else   if (elem == dtd.style) {    instyle++;  } else   if (elem == dtd.script) {    inscript++;  }  if (debugFlag) {    if (tag.fictional()) {      debug("Start Tag: " + tag.getHTMLTag() + " pos: "+ getCurrentPos());    } else {      debug("Start Tag: " + tag.getHTMLTag() + " attributes: "+ getAttributes()+ " pos: "+ getCurrentPos());    }  }  if (tag.fictional()) {    SimpleAttributeSet attrs=new SimpleAttributeSet();    attrs.addAttribute(HTMLEditorKit.ParserCallback.IMPLIED,Boolean.TRUE);    callback.handleStartTag(tag.getHTMLTag(),attrs,getBlockStartPosition());  } else {    callback.handleStartTag(tag.getHTMLTag(),getAttributes(),getBlockStartPosition());    flushAttributes();  }}  }
class C{  public BasicPermission(String name){  super(name);  init(name);}  }
class C{  boolean hasChoiceValues(){  return hasChoiceValues;}  }
class C{  public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){}  }
class C{  public PageRange addSinglePage(int pageNumber){  sequenceStarts.add(pageNumber);  sequenceEnds.add(pageNumber);  return this;}  }
class C{  private static boolean inlineImageStreamBytesAreComplete(byte[] samples,PdfDictionary imageDictionary){  try {    Map<PdfName,IFilterHandler> filters=new HashMap<>(FilterHandlers.getDefaultFilterHandlers());    DoNothingFilter stubfilter=new DoNothingFilter();    filters.put(PdfName.DCTDecode,stubfilter);    filters.put(PdfName.JBIG2Decode,stubfilter);    filters.put(PdfName.JPXDecode,stubfilter);    PdfReader.decodeBytes(samples,imageDictionary,filters);  } catch (  Exception ex) {    return false;  }  return true;}  }
class C{  public UnrecoverableEntryException(){  super();}  }
class C{  private void readInterfaces() throws IOException, ClassFormatException {  final int interfaces_count=dataInputStream.readUnsignedShort();  if (interfaces_count > 0) {    interface_names=new String[interfaces_count];    for (int i=0; i < interfaces_count; i++) {      int index=dataInputStream.readUnsignedShort();      interface_names[i]=Utility.getClassName(constant_pool,index);    }  } else {    interface_names=INTERFACES_EMPTY_ARRAY;  }}  }
class C{  public static boolean isValidJavaEncoding(String javaEncoding){  if (javaEncoding != null) {    int length=javaEncoding.length();    if (length > 0) {      for (int i=1; i < length; i++) {        char c=javaEncoding.charAt(i);        if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {          return false;        }      }      return true;    }  }  return false;}  }
class C{  @Override public synchronized void mark(int readlimit){  markFbIndex=fbIndex;  markedAtStart=firstBytes == null;  in.mark(readlimit);}  }
class C{  public void visitLookupSwitchInsn(Label dflt,int[] keys,Label[] labels){  if (mv != null) {    mv.visitLookupSwitchInsn(dflt,keys,labels);  }}  }
class C{  public void logErrorMessage(String msgIdName,String[] data,SSOToken token){  try {    getLogMessageProvider();  } catch (  IOException e) {    logger.error(e.getMessage(),e);    logger.error("disabling logging");    logStatus=false;  }  if (errorLogger != null && msgProvider != null) {    final LogRecord lr=msgProvider.createLogRecord(msgIdName,data,token);    if (lr != null) {      final SSOToken ssoToken=AccessController.doPrivileged(AdminTokenAction.getInstance());      errorLogger.log(lr,ssoToken);    }  }}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public void initRelationships(List<ObjectMapping> allMappings){  linkType=LinkType.getLinkType(this,allMappings);}  }
class C{  public JsonPropertyMapper defaultJsonValues(final Collection<?> defaultValues){  this.defaultJsonValues=defaultValues != null ? new ArrayList<>(defaultValues) : emptyList();  return this;}  }
class C{  public static void main(String[] args) throws Exception {  File workDir=new File(System.getProperty("user.dir"));  try (GitVersionCalculator jgitver=GitVersionCalculator.location(workDir).setMavenLike(true)){    System.out.println(jgitver.getVersion());  } }  }
class C{  private void calculateChecksumOverPage(ByteBuffer page){  page.putInt(OggPageHeader.FIELD_PAGE_CHECKSUM_POS,0);  byte[] crc=OggCRCFactory.computeCRC(page.array());  for (int i=0; i < crc.length; i++) {    page.put(OggPageHeader.FIELD_PAGE_CHECKSUM_POS + i,crc[i]);  }  page.rewind();}  }
class C{  protected String paramString(){  String editableString=(editable ? "true" : "false");  String caretColorString=(caretColor != null ? caretColor.toString() : "");  String selectionColorString=(selectionColor != null ? selectionColor.toString() : "");  String selectedTextColorString=(selectedTextColor != null ? selectedTextColor.toString() : "");  String disabledTextColorString=(disabledTextColor != null ? disabledTextColor.toString() : "");  String marginString=(margin != null ? margin.toString() : "");  return super.paramString() + ",caretColor=" + caretColorString+ ",disabledTextColor="+ disabledTextColorString+ ",editable="+ editableString+ ",margin="+ marginString+ ",selectedTextColor="+ selectedTextColorString+ ",selectionColor="+ selectionColorString;}  }
class C{  public void deleteEntities(String realmName,Set names) throws AMConsoleException {  if ((names != null) && !names.isEmpty()) {    String idNames=AMFormatUtils.toCommaSeparatedFormat(names);    String[] params={realmName,idNames};    logEvent("ATTEMPT_DELETE_IDENTITY",params);    try {      AMIdentityRepository repo=new AMIdentityRepository(getUserSSOToken(),realmName);      repo.deleteIdentities(getAMIdentity(names));      logEvent("SUCCEED_DELETE_IDENTITY",params);    } catch (    IdRepoException e) {      String[] paramsEx={realmName,idNames,getErrorString(e)};      logEvent("IDM_EXCEPTION_DELETE_IDENTITY",paramsEx);      throw new AMConsoleException(getErrorString(e));    }catch (    SSOException e) {      String[] paramsEx={realmName,idNames,getErrorString(e)};      logEvent("SSO_EXCEPTION_DELETE_IDENTITY",paramsEx);      throw new AMConsoleException(getErrorString(e));    }  }}  }
class C{  private Component scrollable(Component pnl){  JScrollPane scroll=new JScrollPane(pnl);  scroll.setBorder(BorderFactory.createEmptyBorder());  return scroll;}  }
class C{  public void throwException() throws BufferUnderflowException, BufferOverflowException, UnmappableCharacterException, MalformedInputException, CharacterCodingException {switch (this.type) {case TYPE_UNDERFLOW:    throw new BufferUnderflowException();case TYPE_OVERFLOW:  throw new BufferOverflowException();case TYPE_UNMAPPABLE_CHAR:throw new UnmappableCharacterException(this.length);case TYPE_MALFORMED_INPUT:throw new MalformedInputException(this.length);default :throw new CharacterCodingException();}}  }
class C{  public synchronized void paintChildren(Graphics g){  Rectangle clip=g.getClipBounds();  float targetOffset=(axis == X_AXIS) ? clip.x - lastAlloc.x : clip.y - lastAlloc.y;  int index=getViewIndexAtVisualOffset(targetOffset);  int n=getViewCount();  float offs=getChildState(index).getMajorOffset();  for (int i=index; i < n; i++) {    ChildState cs=getChildState(i);    cs.setMajorOffset(offs);    Shape ca=getChildAllocation(i);    if (intersectsClip(ca,clip)) {synchronized (cs) {        View v=cs.getChildView();        v.paint(g,ca);      }    } else {      break;    }    offs+=cs.getMajorSpan();  }}  }
class C{  public void validateObject() throws InvalidObjectException {  try {    for (    JComponent root : roots) {      SwingUtilities.updateComponentTreeUI(root);    }  }  finally {    readObjectCallbacks.remove(inputStream);  }}  }
class C{  public Polyline mirror_horizontal(PlaPointInt p_pole){  int alist_len=plaline_len();  PlaLineIntAlist new_arr=new PlaLineIntAlist(alist_len);  for (int index=0; index < alist_len; ++index) {    new_arr.add(plaline(index).mirror_horizontal(p_pole));  }  return new Polyline(new_arr);}  }
class C{  public LinkedHashSet(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor,true);}  }
class C{  public static int i(String tag,String msg,Throwable tr){  return Log.i(tag,msg,tr);}  }
class C{  public static String sign(String queryString,PrivateKey privateKey) throws SAML2Exception {  String classMethod="QuerySignatureUtil.sign: ";  if (queryString == null || queryString.length() == 0 || privateKey == null) {    SAML2Utils.debug.error(classMethod + "Either input query string or private key is null.");    throw new SAML2Exception(SAML2Utils.bundle.getString("nullInput"));  }  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message(classMethod + "Input query string:\n" + queryString);  }  final String querySigAlg;  final String alg=privateKey.getAlgorithm();switch (alg) {case "RSA":    querySigAlg=SystemPropertiesManager.get(SAML2Constants.QUERY_SIGNATURE_ALGORITHM_RSA,XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA1);  break;case "DSA":querySigAlg=SystemPropertiesManager.get(SAML2Constants.QUERY_SIGNATURE_ALGORITHM_DSA,XMLSignature.ALGO_ID_SIGNATURE_DSA);break;case "EC":querySigAlg=SystemPropertiesManager.get(SAML2Constants.QUERY_SIGNATURE_ALGORITHM_EC,XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA512);break;default :SAML2Utils.debug.error(classMethod + "Private Key algorithm not supported: " + alg);throw new SAML2Exception(SAML2Utils.bundle.getString("algorithmNotSupported"));}Signature sig;try {sig=Signature.getInstance(JCEMapper.translateURItoJCEID(querySigAlg));} catch (NoSuchAlgorithmException nsae) {throw new SAML2Exception(nsae);}if (queryString.charAt(queryString.length() - 1) != '&') {queryString=queryString + "&";}queryString+=SAML2Constants.SIG_ALG + "=" + URLEncDec.encode(querySigAlg);if (SAML2Utils.debug.messageEnabled()) {SAML2Utils.debug.message(classMethod + "Final string to be signed:\n" + queryString);}byte[] sigBytes;try {sig.initSign(privateKey);sig.update(queryString.getBytes());sigBytes=sig.sign();} catch (GeneralSecurityException gse) {throw new SAML2Exception(gse);}if (sigBytes == null || sigBytes.length == 0) {SAML2Utils.debug.error(classMethod + "Generated signature is null");throw new SAML2Exception(SAML2Utils.bundle.getString("nullSigGenerated"));}Base64 encoder=new Base64();String encodedSig=encoder.encode(sigBytes);queryString+="&" + SAML2Constants.SIGNATURE + "="+ URLEncDec.encode(encodedSig);if (SAML2Utils.debug.messageEnabled()) {SAML2Utils.debug.message(classMethod + "Signed query string:\n" + queryString);}return queryString;}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=crossCheckStateCount;  stateCount[0]=0;  stateCount[1]=0;  stateCount[2]=0;  int i=startI;  while (i >= 0 && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i++;  }  if (i == maxI || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[2] <= maxCount) {    stateCount[2]++;    i++;  }  if (stateCount[2] > maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  public final void calcScore(){  m_score=SCORE_OTHER;  if (null == m_targetString)   calcTargetString();}  }
class C{  public static void logDeleteRequest(DeleteOperation deleteOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logDeleteRequest(deleteOperation);  }}  }
class C{  public void stopReplicationServers(Collection<HostPort> serversToDisconnect){  for (  ReplicationServerHandler rsHandler : connectedRSs.values()) {    if (serversToDisconnect.contains(HostPort.valueOf(rsHandler.getServerAddressURL()))) {      stopServer(rsHandler,false);    }  }}  }
class C{  public void update(byte input){  digest.update(input);}  }
class C{  public void fax4Encode(byte[] data,int height){  fax4Encode(data,0,rowbytes * height);}  }
class C{  public Message processRequest(Message request) throws Exception {  List bodies=request.getBodies();  bodies=Utils.convertElementToJAXB(bodies);  if (!(bodies.size() == 1)) {    DiscoUtils.debug.error("DiscoService.processRequest: SOAP message" + " didn't contain one SOAP body.");    throw new Exception(DiscoUtils.bundle.getString("oneBody"));  }  String authnMech=request.getAuthenticationMechanism();  if (DiscoUtils.debug.messageEnabled()) {    DiscoUtils.debug.message("DiscoService.processRequest: " + "authentication mechanism =" + authnMech);  }  Set authnMechs=DiscoServiceManager.getSupportedAuthenticationMechanisms();  if ((authnMechs == null) || (!authnMechs.contains(authnMech))) {    DiscoUtils.debug.error("DiscoService.processRequest: Authentication" + "Mechanism used is not supported by this service:" + authnMech);    throw new Exception(DiscoUtils.bundle.getString("authnMechNotSupported"));  }  Message message=null;  ProviderHeader provH=null;  try {    provH=new ProviderHeader(DiscoServiceManager.getDiscoProviderID());  } catch (  SOAPBindingException sbe) {    throw new DiscoveryException(sbe.getMessage());  }  if (DiscoServiceManager.useResponseAuthentication() || (authnMech.equals(Message.NULL_X509)) || (authnMech.equals(Message.NULL_SAML))|| (authnMech.equals(Message.NULL_BEARER))|| (authnMech.equals(Message.TLS_X509))|| (authnMech.equals(Message.TLS_SAML))|| (authnMech.equals(Message.TLS_BEARER))|| (authnMech.equals(Message.CLIENT_TLS_X509))|| (authnMech.equals(Message.CLIENT_TLS_SAML))|| (authnMech.equals(Message.CLIENT_TLS_BEARER))|| (authnMech.equals(Message.NULL_X509_WSF11))|| (authnMech.equals(Message.NULL_SAML_WSF11))|| (authnMech.equals(Message.NULL_BEARER_WSF11))|| (authnMech.equals(Message.TLS_X509_WSF11))|| (authnMech.equals(Message.TLS_SAML_WSF11))|| (authnMech.equals(Message.TLS_BEARER_WSF11))|| (authnMech.equals(Message.CLIENT_TLS_X509_WSF11))|| (authnMech.equals(Message.CLIENT_TLS_SAML_WSF11))|| (authnMech.equals(Message.CLIENT_TLS_BEARER_WSF11))) {    try {      SecurityTokenManager stm=new SecurityTokenManager(request.getToken());      BinarySecurityToken binaryToken=stm.getX509CertificateToken();      binaryToken.setWSFVersion(request.getWSFVersion());      message=new Message(provH,binaryToken);      message.setWSFVersion(request.getWSFVersion());    } catch (    Exception e) {      DiscoUtils.debug.error("DiscoveryService.processRequest:" + "couldn't generate Message with X509 token: ",e);      throw new DiscoveryException(e.getMessage());    }  } else {    try {      message=new Message(provH);    } catch (    Exception e) {      DiscoUtils.debug.error("DiscoveryService.processRequest:" + "couldn't generate Message: ",e);      throw new DiscoveryException(e.getMessage());    }  }  Object body=bodies.iterator().next();  if (body instanceof QueryType) {    message.setSOAPBody(lookup((QueryType)body,request));  } else   if (body instanceof ModifyType) {    message.setSOAPBody(Utils.convertJAXBToElement(update((ModifyType)body,request)));  } else {    DiscoUtils.debug.error("DiscoService.processRequest: SOAPBody " + "is not a Disco message.");    throw new Exception(DiscoUtils.bundle.getString("bodyNotDisco"));  }  return message;}  }
class C{  @Override public int process(Callback[] callbacks,int state) throws AuthLoginException {  try {    if (userName == null || userName.length() == 0) {      SSOTokenManager mgr=SSOTokenManager.getInstance();      InternalSession isess=getLoginState("OATH").getOldSession();      if (isess == null) {        throw new AuthLoginException("amAuth","noInternalSession",null);      }      SSOToken token=mgr.createSSOToken(isess.getID().toString());      UUID=token.getPrincipal().getName();      userName=token.getProperty("UserToken");      if (debug.messageEnabled()) {        debug.message("OATH.process(): Username from SSOToken : " + userName);      }      if (userName == null || userName.length() == 0) {        throw new AuthLoginException("amAuth","noUserName",null);      }    }switch (state) {case ISAuthConstants.LOGIN_START:      return START_STATE;case START_STATE:    if (callbacks == null || callbacks.length != 2) {      throw new AuthLoginException(amAuthOATH,"authFailed",null);    }  if (passLen < MIN_PASSWORD_LENGTH) {    debug.error("OATH.process(): Password length is less than " + MIN_PASSWORD_LENGTH);    throw new AuthLoginException(amAuthOATH,"authFailed",null);  }String OTP=String.valueOf(((PasswordCallback)callbacks[0]).getPassword());if (StringUtils.isEmpty(OTP)) {debug.error("OATH.process(): invalid OTP code");setFailureID(userName);throw new InvalidPasswordException("amAuth","invalidPasswd",null);}if (minSecretKeyLength <= 0) {debug.error("OATH.process(): Min Secret Key Length is not a valid value");throw new AuthLoginException(amAuthOATH,"authFailed",null);}if (StringUtils.isEmpty(secretKeyAttrName)) {debug.error("OATH.process():  secret key attribute name is empty");throw new AuthLoginException(amAuthOATH,"authFailed",null);}timeInSeconds=currentTimeMillis() / 1000L;if (checkOTP(OTP)) {return ISAuthConstants.LOGIN_SUCCEED;} else {setFailureID(userName);throw new InvalidPasswordException("amAuth","invalidPasswd",null);}}} catch (SSOException e) {debug.error("OATH.process(): SSOException",e);throw new AuthLoginException(amAuthOATH,"authFailed",null);}return ISAuthConstants.LOGIN_IGNORE;}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage("two",null));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataappenddatagetdata.class,args);}  }
class C{  public Object[] toArray(){  Object[] result=new Object[size];  int i=0;  for (Node<E> x=first; x != null; x=x.next)   result[i++]=x.item;  return result;}  }
class C{  public InputMap(){}  }
class C{  private void electWildcard(char searchTerm,TreeNode candidate,List<TreeNode> candidates,SearchContext context){  if (candidate.isWildcard() && candidate.hasInterestIn(searchTerm,context)) {    candidates.add(candidate);  }}  }
class C{  public void mousePressed(MouseEvent e){  getHandler().mousePressed(e);}  }
class C{  public com.sun.identity.saml2.jaxb.entityconfig.ValueElement createValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.entityconfig.impl.ValueElementImpl();}  }
class C{  public void test_getY() throws Exception {  KeyPairGenerator keyGen=null;  KeyPair keys=null;  DSAPrivateKey priv=null;  DSAPublicKey publ=null;  keyGen=KeyPairGenerator.getInstance("DSA");  keyGen.initialize(new DSAParameterSpec(Util.P,Util.Q,Util.G),new SecureRandom(new MySecureRandomSpi(),null){  });  keys=keyGen.generateKeyPair();  priv=(DSAPrivateKey)keys.getPrivate();  publ=(DSAPublicKey)keys.getPublic();  assertNotNull("Invalid Y value",publ.getY());  keyGen=KeyPairGenerator.getInstance("DSA");  keys=keyGen.generateKeyPair();  priv=(DSAPrivateKey)keys.getPrivate();  publ=(DSAPublicKey)keys.getPublic();  assertNotNull("Invalid Y value",publ.getY());}  }
class C{  public static Authenticator withCredentials(final String username,final char[] password,final boolean isDryRun){  return new Authenticator(null,false,isDryRun);}  }
class C{  public void popContext(){  Context2 parentContext=currentContext.getParent();  if (parentContext == null)   throw new EmptyStackException(); else   currentContext=parentContext;}  }
class C{  public CoreRulesDbHelper(Context context){  dbHelper=new DbHelper(context);  database=dbHelper.getWritableDatabase();  applicationDbAdapter=new RegisteredAppDbAdapter(database);  eventDbAdapter=new RegisteredEventDbAdapter(database);  eventAttributeDbAdapter=new RegisteredEventAttributeDbAdapter(database);  ruleDbAdapter=new RuleDbAdapter(database);  filterDbAdapter=new RuleFilterDbAdapter(database);  filterComparisonDbAdapter=new DataFilterDbAdapter(database);  filterDataTypeDbAdapter=new DataTypeDbAdapter(database);}  }
class C{  public FileBasedTrustManagerProvider(){}  }
class C{  public final boolean isEnabled(SmileParser.Feature f){  return (_smileParserFeatures & f.getMask()) != 0;}  }
class C{  public AttributeStatement createAttributeStatement(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ATTRIBUTE_STATEMENT,xml);  if (obj == null) {    return new AttributeStatementImpl(xml);  } else {    return (AttributeStatement)obj;  }}  }
class C{  public ShortHolder(){}  }
class C{  public static String generateID(){  if (random == null) {    return null;  }  byte bytes[]=new byte[IFSConstants.ID_LENGTH];  random.nextBytes(bytes);  String encodedID=FSID_PREFIX + SAMLUtils.byteArrayToHexString(bytes);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSUtils.generateID: generated id is " + encodedID);  }  return encodedID;}  }
class C{  public boolean resourcesStop(){  boolean ok=true;  Lock writeLock=resourcesLock.writeLock();  writeLock.lock();  try {    if (resources != null) {      resources.stop();    }  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log.error(sm.getString("standardContext.resourcesStop"),t);    ok=false;  } finally {    writeLock.unlock();  }  return ok;}  }
class C{  protected void initializeRequestContext(RequestContext requestContext){  super.initializeRequestContext(requestContext);  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);}  }
class C{  static public void multiple_of_45_degree(String p_s,RoutingBoard p_board){  int count=0;  Iterator<BrdItem> it=p_board.get_items().iterator();  while (it.hasNext()) {    BrdItem curr_ob=it.next();    if (curr_ob instanceof BrdTracep) {      BrdTracep curr_trace=(BrdTracep)curr_ob;      if (!curr_trace.polyline().is_multiple_of_45_degree()) {        ++count;      }    }  }  if (count > 1) {    System.out.print(p_s);    System.out.print(count);    System.out.println(" traces not 45 degree");  }}  }
class C{  Item newFieldItem(final String owner,final String name,final String desc){  key3.set(FIELD,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(FIELD,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public boolean isLeftClick(){  return click.isLeftClick();}  }
class C{  public boolean validate(){  if (end >= length)   end=length - 1;  return (start >= 0) && (end >= 0) && (start <= end)&& (length > 0);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("SetPropertiesRule[");  sb.append("]");  return (sb.toString());}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String realm=getStringOptionValue(IArgument.REALM_NAME);  String name=getStringOptionValue(PARAM_NAME);  String[] params={realm,name};  try {    Map<String,Set<String>> mapAppToResources=getApplicationResourcesMap(rc,realm);    Subject userSubject=SubjectUtils.createSubject(getAdminSSOToken());    ApplicationPrivilegeManager apm=ApplicationPrivilegeManager.getInstance(realm,userSubject);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_UPDATE_APPLICATION_PRIVILEGE",params);    ApplicationPrivilege appPrivilege=apm.getPrivilege(name);    Map<String,Set<String>> origAppToResources=getApplicationToResources(appPrivilege);    removeFromMap(origAppToResources,mapAppToResources);    if (origAppToResources.isEmpty()) {      throw new CLIException(getResourceString("remove-application-privilege-resources-emptied-resources"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    appPrivilege.setApplicationResources(origAppToResources);    apm.replacePrivilege(appPrivilege);    Object[] msgParam={name};    getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("update-application-privilege-succeeded"),msgParam));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_UPDATE_APPLICATION_PRIVILEGE",params);  } catch (  EntitlementException ex) {    String[] paramExs={realm,name,ex.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_UPDATE_APPLICATION_PRIVILEGE",paramExs);    throw new CLIException(ex,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public AuthorizationToken authorize(OAuth2Request request) throws ResourceOwnerAuthenticationRequired, ResourceOwnerConsentRequired, InvalidClientException, UnsupportedResponseTypeException, RedirectUriMismatchException, InvalidRequestException, AccessDeniedException, ServerException, LoginRequiredException, BadRequestException, InteractionRequiredException, ResourceOwnerConsentRequiredException, InvalidScopeException, NotFoundException, DuplicateRequestParameterException {  final OAuth2ProviderSettings providerSettings=providerSettingsFactory.get(request);  for (  final AuthorizeRequestValidator requestValidator : requestValidators) {    requestValidator.validateRequest(request);  }  final String clientId=request.getParameter(CLIENT_ID);  final ClientRegistration clientRegistration=clientRegistrationStore.get(clientId,request);  final Set<String> scope=Utils.splitScope(request.<String>getParameter(SCOPE));  final Set<String> validatedScope=providerSettings.validateAuthorizationScope(clientRegistration,scope,request);  final ResourceOwner resourceOwner=resourceOwnerSessionValidator.validate(request);  final boolean requireConsent=!providerSettings.clientsCanSkipConsent() || !clientRegistration.isConsentImplied();  if (requireConsent) {    final boolean consentSaved=providerSettings.isConsentSaved(resourceOwner,clientRegistration.getClientId(),validatedScope);    final boolean haveConsent=consentVerifier.verify(consentSaved,request,clientRegistration);    if (!haveConsent) {      String localeParameter=request.getParameter(LOCALE);      String uiLocaleParameter=request.getParameter(UI_LOCALES);      Locale locale=getLocale(uiLocaleParameter,localeParameter);      if (locale == null) {        locale=request.getLocale();      }      UserInfoClaims userInfo=null;      try {        userInfo=providerSettings.getUserInfo(clientRegistration,request.getToken(AccessToken.class),request);      } catch (      UnauthorizedClientException e) {        logger.debug("Couldn't get user info - continuing to display consent page without claims.",e);      }      String clientName=clientRegistration.getDisplayName(locale);      if (clientName == null) {        clientName=clientRegistration.getClientId();        logger.warn("Client does not have a display name or client name set. using client ID {} for " + "display",clientName);      }      final String displayDescription=clientRegistration.getDisplayDescription(locale);      final String clientDescription=displayDescription == null ? "" : displayDescription;      final Map<String,String> scopeDescriptions=getScopeDescriptions(validatedScope,clientRegistration.getScopeDescriptions(locale));      final Map<String,String> claimDescriptions=getClaimDescriptions(userInfo.getValues(),clientRegistration.getClaimDescriptions(locale));      final boolean saveConsentEnabled=providerSettings.isSaveConsentEnabled();      throw new ResourceOwnerConsentRequired(clientName,clientDescription,scopeDescriptions,claimDescriptions,userInfo,resourceOwner.getName(providerSettings),saveConsentEnabled);    }  }  return tokenIssuer.issueTokens(request,clientRegistration,resourceOwner,scope,providerSettings);}  }
class C{  public ModifyDNOperation processModifyDN(DN entryDN,RDN newRDN,boolean deleteOldRDN,DN newSuperior,List<Control> controls){  ModifyDNOperationBasis modifyDNOperation=new ModifyDNOperationBasis(this,nextOperationID(),nextMessageID(),controls,entryDN,newRDN,deleteOldRDN,newSuperior);  modifyDNOperation.setInternalOperation(true);  modifyDNOperation.run();  return modifyDNOperation;}  }
class C{  public PageAttributes(){  setColor(ColorType.MONOCHROME);  setMediaToDefault();  setOrientationRequestedToDefault();  setOrigin(OriginType.PHYSICAL);  setPrintQualityToDefault();  setPrinterResolutionToDefault();}  }
class C{  public static boolean hasDescriptor(LocalizableMessage msg,LocalizableMessageDescriptor.Arg1<?> desc){  return msg.ordinal() == desc.ordinal() && msg.resourceName().equals(desc.resourceName());}  }
class C{  @Override public Lookup createGlobalContext(){  if (proxyLookup == null) {    logger.config("Creating a proxy for Utilities.actionsGlobalContext()");    projectLookup=new AbstractLookup(content);    proxyLookup=new ProxyLookup(globalContextLookup,projectLookup);  }  return proxyLookup;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.OrganizationNameElement createOrganizationNameElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.OrganizationNameElementImpl();}  }
class C{  private Object invokeObjectMethod(Object proxy,Method method,Object[] args){  String name=method.getName();  if (name.equals("hashCode")) {    return hashCode();  } else   if (name.equals("equals")) {    Object obj=args[0];    InvocationHandler hdlr;    return proxy == obj || (obj != null && Proxy.isProxyClass(obj.getClass()) && (hdlr=Proxy.getInvocationHandler(obj)) instanceof RemoteObjectInvocationHandler && this.equals(hdlr));  } else   if (name.equals("toString")) {    return proxyToString(proxy);  } else {    throw new IllegalArgumentException("unexpected Object method: " + method);  }}  }
class C{  public void addBandwidthField(BandwidthField b){  bandwidthFields.add(b);}  }
class C{  void createPresenter(){  P presenter=delegateCallback.getPresenter();  if (presenter == null) {    presenter=delegateCallback.createPresenter();  }  if (presenter == null) {    throw new NullPointerException("Presenter is null! Do you return null in createPresenter()?");  }  delegateCallback.setPresenter(presenter);}  }
class C{  @Override public final String toString(){  StringBuilder cab=new StringBuilder(50 + getHopCount() * 30);  cab.append("RouteTracker[");  if (this.localAddress != null) {    cab.append(this.localAddress);    cab.append("->");  }  cab.append('{');  if (this.connected)   cab.append('c');  if (this.tunnelled == TunnelType.TUNNELLED)   cab.append('t');  if (this.layered == LayerType.LAYERED)   cab.append('l');  if (this.secure)   cab.append('s');  cab.append("}->");  if (this.proxyChain != null) {    for (int i=0; i < this.proxyChain.length; i++) {      cab.append(this.proxyChain[i]);      cab.append("->");    }  }  cab.append(this.targetHost);  cab.append(']');  return cab.toString();}  }
class C{  private String cleanupPathElement(String path){  return path.endsWith(File.separator) ? path : (path + File.separator);}  }
class C{  public void testDestroyFailedException02(){  DestroyFailedException dfE;  for (int i=0; i < msgs.length; i++) {    dfE=new DestroyFailedException(msgs[i]);    assertEquals("getMessage() must return: ".concat(msgs[i]),dfE.getMessage(),msgs[i]);    assertNull("getCause() must return null",dfE.getCause());  }}  }
class C{  private int abortWait(int phase){  AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;  for (; ; ) {    Thread t;    QNode q=head.get();    int p=(int)(root.state >>> PHASE_SHIFT);    if (q == null || ((t=q.thread) != null && q.phase == p))     return p;    if (head.compareAndSet(q,q.next) && t != null) {      q.thread=null;      LockSupport.unpark(t);    }  }}  }
class C{  public void disableLogging(){  this.needsLogging=false;}  }
class C{  public UpdateToReplay(LDAPUpdateMsg updateMessage,LDAPReplicationDomain replicationDomain){  this.updateMessage=updateMessage;  this.replicationDomain=replicationDomain;}  }
class C{  public final void testEqualsObject06(){  assertFalse(new ECFieldF2m(2000).equals(null));}  }
class C{  static String[] splitOnTokens(String text){  if (text.indexOf('?') == -1 && text.indexOf('*') == -1) {    return new String[]{text};  }  char[] array=text.toCharArray();  ArrayList<String> list=new ArrayList<String>();  StringBuilder buffer=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (array[i] == '?' || array[i] == '*') {      if (buffer.length() != 0) {        list.add(buffer.toString());        buffer.setLength(0);      }      if (array[i] == '?') {        list.add("?");      } else       if (list.isEmpty() || i > 0 && list.get(list.size() - 1).equals("*") == false) {        list.add("*");      }    } else {      buffer.append(array[i]);    }  }  if (buffer.length() != 0) {    list.add(buffer.toString());  }  return list.toArray(new String[list.size()]);}  }
class C{  public void testGetEntryID() throws Exception {  assertNull(cache.toVerboseString(),"Expected empty cache.  " + "Cache contents:" + ServerConstants.EOL + cache.toVerboseString());  TestCaseUtils.initializeTestBackend(false);  String b=DirectoryServer.getBackend(DN.valueOf("o=test")).getBackendID();  assertEquals(cache.getEntryID(testEntriesList.get(0).getName()),-1,"Not expected to find " + testEntriesList.get(0).getName() + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  cache.putEntry(testEntriesList.get(0),b,1);  assertEquals(cache.getEntryID(testEntriesList.get(0).getName()),1,"Expected to find " + testEntriesList.get(0).getName() + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  cache.clear();}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public void removeChild(PersistentObject object) throws AccessRightsException, EntryNotFoundException, UMSException {  if (object != null && getPrincipal() != null) {    super.removeChild(object);  }}  }
class C{  public ClientConnectionWork(HttpsURLConnection connection){  this.connection=connection;  log("Created over connection: " + connection.getClass());}  }
class C{  private void removePropertyStrings(Service s){  String type=s.getType();  String algorithm=s.getAlgorithm();  super.remove(type + "." + algorithm);  for (  String alias : s.getAliases()) {    super.remove(ALIAS_PREFIX + type + "."+ alias);  }  for (  Map.Entry<UString,String> entry : s.attributes.entrySet()) {    String key=type + "." + algorithm+ " "+ entry.getKey();    super.remove(key);  }}  }
class C{  public void testOneOne(){  String numA="1";  String numB="1";  String res="0";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,schemaType,subSchemaName};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SET_SCHEMA_ATTR_DEFAULTS",params);    ss.setAttributeDefaults(attributeValues);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SET_SCHEMA_ATTR_DEFAULTS",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("schema-set-attribute-defaults-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,e.getMessage()};    debugError("SetAttributeDefaults.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SCHEMA_ATTR_DEFAULTS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,e.getMessage()};    debugError("SetAttributeDefaults.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SCHEMA_ATTR_DEFAULTS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public BindOperationBasis(ClientConnection clientConnection,long operationID,int messageID,List<Control> requestControls,String protocolVersion,ByteString rawBindDN,ByteString simplePassword){  super(clientConnection,operationID,messageID,requestControls);  this.protocolVersion=protocolVersion;  setRawBindDN(rawBindDN);  setSimplePassword(simplePassword);  cancelResult=getBindCancelResult();}  }
class C{  public void testCase21byZero(){  byte aBytes[]={1,2,3,4,5,6,7};  byte bBytes[]={0};  int aSign=1;  int bSign=0;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  try {    aNumber.divideAndRemainder(bNumber);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementretrievetagname.class,args);}  }
class C{  public void paintTabbedPaneContentBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public PrinterInfo(String info,Locale locale){  super(info,locale);}  }
class C{  private boolean readHeader() throws IOException {  if (consecutiveLineBreaks > 1) {    consecutiveLineBreaks=0;    return false;  }  readName();  consecutiveLineBreaks=0;  readValue();  return consecutiveLineBreaks > 0;}  }
class C{  public ImmutableList slice(int fromIndex){  return new ImmutableList(subList(fromIndex,size()));}  }
class C{  public LinkedHashMap(Map<? extends K,? extends V> m){  super();  accessOrder=false;  putMapEntries(m,false);}  }
class C{  public void removeUpdate(DocumentEvent e,Shape a,ViewFactory f){  super.removeUpdate(e,a,this);}  }
class C{  public PdfObject readObject() throws IOException {  if (!nextValidToken())   return null;  final PdfTokenizer.TokenType type=tokeniser.getTokenType();switch (type) {case StartDic:{      PdfDictionary dic=readDictionary();      return dic;    }case StartArray:  return readArray();case String:PdfString str=new PdfString(tokeniser.getDecodedStringContent()).setHexWriting(tokeniser.isHexString());return str;case Name:return new PdfName(tokeniser.getByteContent());case Number:return new PdfNumber(tokeniser.getByteContent());default :return new PdfLiteral(tokeniser.getByteContent());}}  }
class C{  public void applyFromResolveInfo(PackageManager pm,ResolveInfo info,WidgetPreviewLoader loader){  mInfo=info;  CharSequence label=info.loadLabel(pm);  mWidgetName.setText(label);  mWidgetDims.setText(String.format(mDimensionsFormatString,1,1));  mWidgetPreviewLoader=loader;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodechildnodesempty.class,args);}  }
class C{  public GitHubClient(){  this(HOST_API);}  }
class C{  public static void main(final String[] args){  final int retCode=new AddRate().run(args);  System.exit(filterExitCode(retCode));}  }
class C{  @Override public void performTask(TokenStorageAdapter adapter) throws DataLayerException {  Reject.ifFalse(tokenFilter.getReturnFields().isEmpty());  handler.processResults(adapter.query(tokenFilter));}  }
class C{  public static boolean isDate(final Class type){  return Date.class.isAssignableFrom(type);}  }
class C{  public void objectRemoved(AMEvent event){  if (event == null) {    debug.error("AMConfiguration.objectChanged, event null");    return;  }  if (debug.messageEnabled()) {    debug.message("objectRemoved, type=" + event.getEventType() + ", sDN="+ event.getSourceDN()+ ", sType="+ event.getSourceType());  }  processSDKNotification();}  }
class C{  public static int mainRestoreDB(String[] args){  return mainRestoreDB(args,true,System.out,System.err);}  }
class C{  public final boolean hasContended(){  return head != null;}  }
class C{  public void createAgent(String realmName,String name,String type,String password,String serverURL,String agentURL) throws AMConsoleException {  String[] params={realmName,name,type};  try {    logEvent("ATTEMPT_CREATE_AGENT",params);    Map map=AgentConfiguration.getDefaultValues(type,false);    Set set=new HashSet(2);    map.put(AgentConfiguration.ATTR_NAME_PWD,set);    set.add(password);    AgentConfiguration.createAgent(getUserSSOToken(),realmName,name,type,map,serverURL,agentURL);    logEvent("SUCCEED_CREATE_AGENT",params);  } catch (  ConfigurationException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT",paramsEx);    debug.warning("AgentsModelImpl.createAgent",e);    throw new AMConsoleException(getErrorString(e));  }catch (  SSOException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT",paramsEx);    debug.warning("AgentsModelImpl.createAgent",e);    throw new AMConsoleException(getErrorString(e));  }catch (  IdRepoException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT",paramsEx);    debug.warning("AgentsModelImpl.createAgent",e);    throw new AMConsoleException(getErrorString(e));  }catch (  SMSException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT",paramsEx);    debug.warning("AgentsModelImpl.createAgent",e);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  protected <T>Handler<AsyncResult<T>> resultHandler(RoutingContext context,Handler<T> handler){  return null;}  }
class C{  public FrameBodyTOFN(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public void stop(int restartableId){  requested.remove((Integer)restartableId);  Subscription subscription=restartableSubscriptions.get(restartableId);  if (subscription != null)   subscription.unsubscribe();}  }
class C{  private final void commit(){  if (expandTable != null) {    for (int i=0; i < expandTable.size(); i++) {      int[] valueList=expandTable.elementAt(i);      for (int j=0; j < valueList.length; j++) {        int order=valueList[j];        if (order < RBCollationTables.EXPANDCHARINDEX && order > CHARINDEX) {          int ch=order - CHARINDEX;          int realValue=getCharOrder(ch);          if (realValue == RBCollationTables.UNMAPPED) {            valueList[j]=IGNORABLEMASK & ch;          } else {            valueList[j]=realValue;          }        }      }    }  }}  }
class C{  public boolean remove(Object targetChild){  return remove(targetChild,true);}  }
class C{  public static long consumePowerFromAllFaces(World world,BlockPos pos,long amount,boolean simulated){  long recievedPower=0L;  for (  final ITeslaProducer producer : getConnectedCapabilities(TeslaCapabilities.CAPABILITY_PRODUCER,world,pos))   recievedPower+=producer.takePower(amount,simulated);  return recievedPower;}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof java.lang.String)) {    throw new EncoderException("Parameter supplied to RefinedSoundex encode is not of type java.lang.String");  }  return soundex((String)pObject);}  }
class C{  protected DirContext open() throws NamingException {  if (context != null)   return context;  try {    context=createDirContext(getDirectoryContextEnvironment());  } catch (  Exception e) {    connectionAttempt=1;    containerLog.info(sm.getString("jndiRealm.exception.retry"),e);    context=createDirContext(getDirectoryContextEnvironment());  } finally {    connectionAttempt=0;  }  return context;}  }
class C{  @Deprecated public static long UTC(int year,int month,int day,int hour,int minute,int second){  GregorianCalendar cal=new GregorianCalendar(false);  cal.setTimeZone(TimeZone.getTimeZone("GMT"));  cal.set(1900 + year,month,day,hour,minute,second);  return cal.getTimeInMillis();}  }
class C{  public StreamResult(File f){  setSystemId(f.toURI().toASCIIString());}  }
class C{  private boolean isSearchable(AttributeType attributeType,SearchFilter filter,int depth){switch (filter.getFilterType()) {case AND:    if (depth >= MAX_NESTED_FILTER_DEPTH) {      return false;    }  for (  SearchFilter f : filter.getFilterComponents()) {    if (isSearchable(attributeType,f,depth + 1)) {      return true;    }  }return false;case OR:if (depth >= MAX_NESTED_FILTER_DEPTH) {return false;}for (SearchFilter f : filter.getFilterComponents()) {if (!isSearchable(attributeType,f,depth + 1)) {return false;}}return true;case EQUALITY:return filter.getAttributeType().equals(attributeType);default :return false;}}  }
class C{  private void saveIndex(boolean modal){  newModifyTask=null;  if (!isModified()) {    return;  }  List<LocalizableMessage> errors=getErrors();  if (errors.isEmpty()) {    ProgressDialog dlg=new ProgressDialog(Utilities.getFrame(this),Utilities.getFrame(this),INFO_CTRL_PANEL_MODIFYING_INDEX_TITLE.get(),getInfo());    dlg.setModal(modal);    newModifyTask=new ModifyIndexTask(getInfo(),dlg);    for (    Task task : getInfo().getTasks()) {      task.canLaunch(newModifyTask,errors);    }    if (errors.isEmpty()) {      String attributeName=index.getName();      String backendName=index.getBackend().getBackendID();      launchOperation(newModifyTask,INFO_CTRL_PANEL_MODIFYING_INDEX_SUMMARY.get(attributeName),INFO_CTRL_PANEL_MODIFYING_INDEX_COMPLETE.get(),INFO_CTRL_PANEL_MODIFYING_INDEX_SUCCESSFUL.get(attributeName,backendName),ERR_CTRL_PANEL_MODIFYING_INDEX_ERROR_SUMMARY.get(),ERR_CTRL_PANEL_MODIFYING_INDEX_ERROR_DETAILS.get(attributeName),null,dlg);      saveChanges.setEnabled(false);      dlg.setVisible(true);    }  }  if (!errors.isEmpty()) {    displayErrorDialog(errors);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechildnewchilddiffdocument.class,args);}  }
class C{  public void validateRelationshipField(Context context,JsonValue oldValue,JsonValue newValue) throws ResourceException {  Set<String> oldReferences=new HashSet<>();  if (oldValue.isNotNull()) {    for (    JsonValue oldItem : oldValue) {      oldReferences.add(oldItem.get(RelationshipUtil.REFERENCE_ID).asString());    }  }  for (  JsonValue newItem : newValue) {    if (!oldReferences.contains(newItem.get(RelationshipUtil.REFERENCE_ID).asString())) {      logger.debug("validating new relationship {} for {}: ",newItem,propertyPtr);      relationshipValidator.validateRelationship(newItem,context);    }  }}  }
class C{  private JComponent createInputComponent(AttributeSet attr,Object model){  JComponent c=null;  String type=(String)attr.getAttribute(HTML.Attribute.TYPE);  if (type.equals("submit") || type.equals("reset")) {    String value=(String)attr.getAttribute(HTML.Attribute.VALUE);    if (value == null) {      if (type.equals("submit")) {        value=UIManager.getString("FormView.submitButtonText");      } else {        value=UIManager.getString("FormView.resetButtonText");      }    }    JButton button=new JButton(value);    if (model != null) {      button.setModel((ButtonModel)model);      button.addActionListener(this);    }    c=button;    maxIsPreferred=3;  } else   if (type.equals("image")) {    String srcAtt=(String)attr.getAttribute(HTML.Attribute.SRC);    JButton button;    try {      URL base=((HTMLDocument)getElement().getDocument()).getBase();      URL srcURL=new URL(base,srcAtt);      Icon icon=new ImageIcon(srcURL);      button=new JButton(icon);    } catch (    MalformedURLException e) {      button=new JButton(srcAtt);    }    if (model != null) {      button.setModel((ButtonModel)model);      button.addMouseListener(new MouseEventListener());    }    c=button;    maxIsPreferred=3;  } else   if (type.equals("checkbox")) {    c=new JCheckBox();    if (model != null) {      ((JCheckBox)c).setModel((JToggleButton.ToggleButtonModel)model);    }    maxIsPreferred=3;  } else   if (type.equals("radio")) {    c=new JRadioButton();    if (model != null) {      ((JRadioButton)c).setModel((JToggleButton.ToggleButtonModel)model);    }    maxIsPreferred=3;  } else   if (type.equals("text")) {    int size=HTML.getIntegerAttributeValue(attr,HTML.Attribute.SIZE,-1);    JTextField field;    if (size > 0) {      field=new JTextField();      field.setColumns(size);    } else {      field=new JTextField();      field.setColumns(20);    }    c=field;    if (model != null) {      field.setDocument((Document)model);    }    field.addActionListener(this);    maxIsPreferred=3;  } else   if (type.equals("password")) {    JPasswordField field=new JPasswordField();    c=field;    if (model != null) {      field.setDocument((Document)model);    }    int size=HTML.getIntegerAttributeValue(attr,HTML.Attribute.SIZE,-1);    field.setColumns((size > 0) ? size : 20);    field.addActionListener(this);    maxIsPreferred=3;  } else   if (type.equals("file")) {    JTextField field=new JTextField();    if (model != null) {      field.setDocument((Document)model);    }    int size=HTML.getIntegerAttributeValue(attr,HTML.Attribute.SIZE,-1);    field.setColumns((size > 0) ? size : 20);    JButton browseButton=new JButton(UIManager.getString("FormView.browseFileButtonText"));    Box box=Box.createHorizontalBox();    box.add(field);    box.add(Box.createHorizontalStrut(5));    box.add(browseButton);    browseButton.addActionListener(new BrowseFileAction(attr,(Document)model));    c=box;    maxIsPreferred=3;  }  return c;}  }
class C{  protected void insertBalanced(String[] k,char[] v,int offset,int n){  int m;  if (n < 1) {    return;  }  m=n >> 1;  insert(k[m + offset],v[m + offset]);  insertBalanced(k,v,offset,m);  insertBalanced(k,v,offset + m + 1,n - m - 1);}  }
class C{  protected void build(ByteBuffer raw){  this.dataBytes=new byte[dataSize];  for (int i=0; i < dataBytes.length; i++) {    this.dataBytes[i]=raw.get();  }}  }
class C{  public void doFilter(ServletRequest request,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {  HttpServletRequest httpRequest=(HttpServletRequest)request;  HttpServletResponse httpResponse=(HttpServletResponse)response;  try {    if (httpRequest.getRequestURI().endsWith(SETUP_URI)) {      passThrough=true;      filterChain.doFilter(httpRequest,httpResponse);    } else     if (passThrough) {      filterChain.doFilter(httpRequest,httpResponse);    } else     if (!isConfigured) {      String url=httpRequest.getScheme() + "://" + httpRequest.getServerName()+ ":"+ httpRequest.getServerPort()+ httpRequest.getContextPath()+ SETUP_URI;      httpResponse.sendRedirect(url);      passThrough=true;    } else {      filterChain.doFilter(httpRequest,httpResponse);    }  } catch (  Exception ex) {    throw new ServletException("ConfiguratorFilter.doFilter",ex);  }}  }
class C{  private FilteredIterator(final Iterator<M> iterator,final Predicate<? super M,P> predicate,final P p){  this.iterator=iterator;  this.predicate=predicate;  this.parameter=p;}  }
class C{  public static Hashtable<String,String[]> parseQueryString(String s){  String valArray[]=null;  if (s == null) {    throw new IllegalArgumentException();  }  Hashtable<String,String[]> ht=new Hashtable<>();  StringBuilder sb=new StringBuilder();  StringTokenizer st=new StringTokenizer(s,"&");  while (st.hasMoreTokens()) {    String pair=st.nextToken();    int pos=pair.indexOf('=');    if (pos == -1) {      throw new IllegalArgumentException();    }    String key=parseName(pair.substring(0,pos),sb);    String val=parseName(pair.substring(pos + 1,pair.length()),sb);    if (ht.containsKey(key)) {      String oldVals[]=ht.get(key);      valArray=new String[oldVals.length + 1];      for (int i=0; i < oldVals.length; i++)       valArray[i]=oldVals[i];      valArray[oldVals.length]=val;    } else {      valArray=new String[1];      valArray[0]=val;    }    ht.put(key,valArray);  }  return ht;}  }
class C{  public Attribute createAttribute(String name,String value){  AttributeField attributeImpl=new AttributeField();  try {    attributeImpl.setName(name);    attributeImpl.setValueAllowNull(value);  } catch (  SdpException s) {    s.printStackTrace();  }  return attributeImpl;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreatecdatasection.class,args);}  }
class C{  public boolean isLeaf(){  TreeModel model=getModel();  return (model != null) ? model.isLeaf(this.getUserObject()) : true;}  }
class C{  public static boolean isNameStart(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME_START) != 0;}  }
class C{  public void vetoableChange(PropertyChangeEvent pce) throws PropertyVetoException {  String propertyName=pce.getPropertyName();  Object source=pce.getSource();synchronized (children) {    if ("beanContext".equals(propertyName) && containsKey(source) && !getBeanContextPeer().equals(pce.getNewValue())) {      if (!validatePendingRemove(source)) {        throw new PropertyVetoException("current BeanContext vetoes setBeanContext()",pce);      } else       ((BCSChild)children.get(source)).setRemovePending(true);    }  }}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public void insert_short(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_short",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_short(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public boolean mustChangePassword(){  return mustChangePassword;}  }
class C{  public void deleteFederation(String realm,String federationId) throws WSFederationMetaException {  if (federationId == null) {    return;  }  if (realm == null) {    realm="/";  }  String[] objs={federationId,realm};  try {    IDPSSOConfigElement idpconfig=getIDPSSOConfig(realm,federationId);    if (idpconfig != null) {      removeFromCircleOfTrust(idpconfig,realm,federationId);    }    SPSSOConfigElement spconfig=getSPSSOConfig(realm,federationId);    if (spconfig != null) {      removeFromCircleOfTrust(spconfig,realm,federationId);    }    configInst.deleteConfiguration(realm,federationId,null);    LogUtil.access(Level.INFO,LogUtil.ENTITY_DESCRIPTOR_DELETED,objs,null);    WSFederationMetaCache.putFederation(realm,federationId,null);  } catch (  ConfigurationException e) {    debug.error("WSFederationMetaManager.deleteFederation:",e);    String[] data={e.getMessage(),federationId,realm};    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_DELETE_ENTITY_DESCRIPTOR,data,null);    throw new WSFederationMetaException(e);  }}  }
class C{  static boolean arrayGettersSafe(Class<?> subclass,Class<?> immutableClass){  if (subclass == immutableClass)   return true;synchronized (arrayGettersSafeMap) {    Boolean safe=arrayGettersSafeMap.get(subclass);    if (safe == null) {      try {        ArrayGettersSafeAction action=new ArrayGettersSafeAction(subclass,immutableClass);        safe=AccessController.doPrivileged(action);      } catch (      Exception e) {        safe=false;      }      arrayGettersSafeMap.put(subclass,safe);    }    return safe;  }}  }
class C{  public synchronized void addInvalidComponent(JComponent invalidComponent){  RepaintManager delegate=getDelegate(invalidComponent);  if (delegate != null) {    delegate.addInvalidComponent(invalidComponent);    return;  }  Component validateRoot=SwingUtilities.getValidateRoot(invalidComponent,true);  if (validateRoot == null) {    return;  }  if (invalidComponents == null) {    invalidComponents=new ArrayList<Component>();  } else {    int n=invalidComponents.size();    for (int i=0; i < n; i++) {      if (validateRoot == invalidComponents.get(i)) {        return;      }    }  }  invalidComponents.add(validateRoot);  scheduleProcessingRunnable(SunToolkit.targetToAppContext(invalidComponent));}  }
class C{  public AlertInfoParser(String alertInfo){  super(alertInfo);}  }
class C{  public int currentSegment(float[] coords){  if (isDone()) {    throw new NoSuchElementException("cubic iterator iterator out of bounds");  }  int type;  if (index == 0) {    coords[0]=(float)cubic.getX1();    coords[1]=(float)cubic.getY1();    type=SEG_MOVETO;  } else {    coords[0]=(float)cubic.getCtrlX1();    coords[1]=(float)cubic.getCtrlY1();    coords[2]=(float)cubic.getCtrlX2();    coords[3]=(float)cubic.getCtrlY2();    coords[4]=(float)cubic.getX2();    coords[5]=(float)cubic.getY2();    type=SEG_CUBICTO;  }  if (affine != null) {    affine.transform(coords,0,coords,0,index == 0 ? 1 : 3);  }  return type;}  }
class C{  private Set<JavaArgumentsDescriptor> filterJavaArguments(Set<JavaArgumentsDescriptor> args){  if (showAll.isSelected()) {    return args;  } else {    Set<JavaArgumentsDescriptor> filteredArgs=new HashSet<>();    for (    String relevantName : getRelevantCommandLineNames()) {      for (      JavaArgumentsDescriptor arg : args) {        if (arg.getCommandName().equals(relevantName)) {          filteredArgs.add(arg);          break;        }      }    }    return filteredArgs;  }}  }
class C{  public void test_getPeerHost() throws NoSuchAlgorithmException {  SSLEngine e=getEngine();  assertNull(e.getPeerHost());  e=getEngine("www.fortify.net",80);  assertEquals("Incorrect host name","www.fortify.net",e.getPeerHost());}  }
class C{  public void checkForLocal(){  isLocal=true;}  }
class C{  public static void putInt(String key,int value){  if (mSharedPreferences == null) {    return;  }  Editor editor=mSharedPreferences.edit();  editor.putInt(key,value);  editor.apply();}  }
class C{  public INV_IDENT(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  @Override public synchronized void close() throws IOException {  buffer=null;  isClosed=true;  notifyAll();}  }
class C{  public static DeleteRequest newDeleteRequest(final String name){  return Requests.newDeleteRequest(name).addControl(TransactionIdControl.newControl(AuditRequestContext.createSubTransactionIdValue()));}  }
class C{  public static RunStats delegateGetBucketForIntegers(int buckets) throws Exception {  Long startTime=System.currentTimeMillis();  PrimaryIndexBucketGeneratorImpl ibg=new PrimaryIndexBucketGeneratorImpl(FieldDataType.INTEGER,buckets);  PrimaryIndexBucketLocatorImpl locator=new PrimaryIndexBucketLocatorImpl(null,null,null,ibg.generateBuckets(),null,null,null,null,null);  logger.debug("test to getBucket for the bucket distribution");  HashMap<Long,List<Object>> hm=new HashMap<>();  SummaryStatistics stats=new SummaryStatistics();  for (int inputInt=-2000000; inputInt < 2000000; inputInt++) {    Long bucketId=locator.getBucket(inputInt,FieldDataType.INTEGER);    calculate(hm,stats,bucketId,inputInt);  }  Long runTime=System.currentTimeMillis() - startTime;  RunStats runStats=new RunStats("BucketForIntegers",FieldDataType.INTEGER,runTime,stats,hm);  logger.debug(runStats.toString());  return runStats;}  }
class C{  public static boolean isLowerCase(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  for (int i=0; i < value.length(); i++) {    if (Character.isUpperCase(value.charAt(i))) {      return false;    }  }  return true;}  }
class C{  public static void main(final String[] args){  System.out.println(getCurrentDateFormatted());}  }
class C{  public String cachePolicy(SSOToken token,CachedPolicy policy){  String randomStr="";  if (policy != null) {    try {      String key=token.getTokenID().toString();synchronized (mapTokenIDs) {        Map map=(Map)mapTokenIDs.get(key);        if (map == null) {          map=new HashMap(10);          token.addSSOTokenListener(this);        }        randomStr=getRandomString();        map.put(randomStr,policy);        mapTokenIDs.put(key,map);      }    } catch (    SSOTokenListenersUnsupportedException ex) {      AMModelBase.debug.message("PolicyCache.cachePolicy: could not add sso listener: {}",ex.getMessage());      randomStr="";    }catch (    SSOException ssoe) {      AMModelBase.debug.warning("PolicyCache.cachePolicy",ssoe);      randomStr="";    }  }  return randomStr;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodenotationnodeattributes.class,args);}  }
class C{  public INVALID_TRANSACTION(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns09.class,args);}  }
class C{  public CopyOnWriteArrayList(){  elements=EmptyArray.OBJECT;}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  @SuppressWarnings("unused") static <K,V>Promise<Map<K,V>> blockingPromiseMap(final Class<K> keyType,final Class<V> valueType){  return new BlockingPromise<>();}  }
class C{  private static void rdf_NodeElementAttrs(XMPMetaImpl xmp,XMPNode xmpParent,Node xmlNode,boolean isTopLevel) throws XMPException {  int exclusiveAttrs=0;  for (int i=0; i < xmlNode.getAttributes().getLength(); i++) {    Node attribute=xmlNode.getAttributes().item(i);    if ("xmlns".equals(attribute.getPrefix()) || (attribute.getPrefix() == null && "xmlns".equals(attribute.getNodeName()))) {      continue;    }    int attrTerm=getRDFTermKind(attribute);switch (attrTerm) {case RDFTERM_ID:case RDFTERM_NODE_ID:case RDFTERM_ABOUT:      if (exclusiveAttrs > 0) {        throw new XMPException("Mutally exclusive about, ID, nodeID attributes",BADRDF);      }    exclusiveAttrs++;  if (isTopLevel && (attrTerm == RDFTERM_ABOUT)) {    if (xmpParent.getName() != null && xmpParent.getName().length() > 0) {      if (!xmpParent.getName().equals(attribute.getNodeValue())) {        throw new XMPException("Mismatched top level rdf:about values",BADXMP);      }    } else {      xmpParent.setName(attribute.getNodeValue());    }  }break;case RDFTERM_OTHER:addChildNode(xmp,xmpParent,attribute,attribute.getNodeValue(),isTopLevel);break;default :throw new XMPException("Invalid nodeElement attribute",BADRDF);}}}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public boolean isOptimizedDrawingEnabled(){  return !glassPane.isVisible();}  }
class C{  public BeanContextMembershipEvent(BeanContext bc,Object[] changes){  super(bc);  if (changes == null)   throw new NullPointerException("BeanContextMembershipEvent:  changes is null.");  children=Arrays.asList(changes);}  }
class C{  public void testMovePointRightPosLess(){  String a="1231212478987482988429808779810457634781384756794987";  String b="123121247898748298842980877981045763478138475679498700";  int aScale=28;  int shift=30;  int resScale=0;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.movePointRight(shift);  assertTrue("incorrect scale",bNumber.scale() == resScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(b));}  }
class C{  public PdfCanvas concatMatrix(PdfArray array){  if (array.size() != 6) {    return this;  }  for (int i=0; i < array.size(); i++) {    if (!array.get(i).isNumber()) {      return this;    }  }  return concatMatrix(array.getAsNumber(0).doubleValue(),array.getAsNumber(1).doubleValue(),array.getAsNumber(2).doubleValue(),array.getAsNumber(3).doubleValue(),array.getAsNumber(4).doubleValue(),array.getAsNumber(5).doubleValue());}  }
class C{  @Override public void onToggleMute(View v){  mBtnMic.toggleState();  if (getBroadcast().getStatus().isRunning()) {    mWZAudioDevice.setAudioPaused(!mBtnMic.isOn());    Toast.makeText(this,"Audio stream " + (mWZAudioDevice.isAudioPaused() ? "muted" : "enabled"),Toast.LENGTH_SHORT).show();  } else {    mAudioLevelMeter.setVisibility(mBtnMic.isOn() ? View.VISIBLE : View.GONE);    if (mBtnMic.isOn())     mWZAudioDevice.startAudioSampler(mSamplerConfig); else     mWZAudioDevice.stopAudioSampler();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr domesticAttr;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(0);  domesticAttr=testEmployee.getAttributeNode("invalidAttribute");  assertNull("elementGetAttributeNodeNullAssert",domesticAttr);}  }
class C{  public void deleteRoles(Set roleDNs) throws AMException, SSOException {  Iterator iter=roleDNs.iterator();  while (iter.hasNext()) {    String roleDN=(String)iter.next();    AMRole role=new AMRoleImpl(super.token,roleDN);    role.delete();  }}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  super.handleButton2Request(event);}  }
class C{  public void requestFocus(){  if (!isFocusTraversable()) {    return;  }  Component comp=getTextComponent();  if (comp instanceof JTextComponent) {    comp.requestFocusInWindow();    try {      if (elementInfo.validateIfNecessary()) {        Element elem=elementInfo.getElement();        ((JTextComponent)comp).setCaretPosition(elem.getStartOffset());        AccessibleContext ac=editor.getAccessibleContext();        PropertyChangeEvent pce=new PropertyChangeEvent(this,AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,AccessibleState.FOCUSED);        ac.firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,pce);      }    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public void sendEmissionsForRule(Tuple tuple,String ruleGroup,Rule rule){  List<AggregationAction> aggregationActions=filterAggregationActions(rule);  if (aggregationActions != null) {    for (    AggregationAction action : aggregationActions) {      if (tickCounter % action.getAggregationWindow() == 0) {        collector.emit(Constants.TICK_STREAM_ID,tuple,new Values(Utils.combineRuleActionId(rule.getRuleId(),action.getActionId()),action.getAggregationWindow(),ruleGroup));      }    }  }}  }
class C{  private ConnectionFinalizerJob(ASN1ByteChannelReader asn1Reader,SocketChannel socketChannel){  this.asn1Reader=asn1Reader;  this.socketChannel=socketChannel;}  }
class C{  public boolean isLogEnabled(){  if (logger == null) {    return false;  } else {    return logger.isLogEnabled();  }}  }
class C{  private AMAuthCallBack instantiateClass(String className){  try {    if (debug.messageEnabled()) {      debug.message("AMAuthCallBackImpl : instantiateClass. " + "Class name is : " + className);    }    return ((AMAuthCallBack)Class.forName(className).newInstance());  } catch (  ClassNotFoundException cnfe) {    debug.error("AuthCallBackImpl.instantiateClass(): Unable to " + "locate class " + className,cnfe);  }catch (  InstantiationException ie) {    debug.error("AuthCallBackImpl.instantiateClass(): Unable to " + "instantiate class " + className,ie);  }catch (  IllegalAccessException iae) {    debug.error("AuthCallBackImpl.instantiateClass(): Problem " + "with the Security Manager for class " + className,iae);  }catch (  Exception e) {    debug.error("AMCallBackImpl.instantiateClass(): Unknown " + "error for class " + className,e);  }  return null;}  }
class C{  public Tailer(File file,TailerListener listener){  this(file,listener,DEFAULT_DELAY_MILLIS);}  }
class C{  public ParserAdapter() throws SAXException {  super();  String driver=ss.getSystemProperty("org.xml.sax.parser");  try {    setup(ParserFactory.makeParser());  } catch (  ClassNotFoundException e1) {    throw new SAXException("Cannot find SAX1 driver class " + driver,e1);  }catch (  IllegalAccessException e2) {    throw new SAXException("SAX1 driver class " + driver + " found but cannot be loaded",e2);  }catch (  InstantiationException e3) {    throw new SAXException("SAX1 driver class " + driver + " loaded but cannot be instantiated",e3);  }catch (  ClassCastException e4) {    throw new SAXException("SAX1 driver class " + driver + " does not implement org.xml.sax.Parser");  }catch (  NullPointerException e5) {    throw new SAXException("System property org.xml.sax.parser not specified");  }}  }
class C{  public Process executeAsync(final CommandLine command,Map<String,String> environment) throws IOException {  if (workingDirectory != null && !workingDirectory.exists()) {    throw new IOException(workingDirectory + " doesn't exist.");  }  return executeInternal(command,environment,workingDirectory,streamHandler,null);}  }
class C{  private int parseHeader(InputStream is){  int index=0;  int nread=0;  log("Parse a header");  nread=readOneLine(is);  if (nread == -1) {    requestMethod=UNKNOWN_METHOD;    return -1;  }  int i=index;  while (buf[i] != (byte)':') {    if ((buf[i] == (byte)'\n') || (buf[i] == (byte)'\r')) {      return UNKNOWN_METHOD;    }    i++;  }  String headerName=new String(buf,0,i);  i++;  while (buf[i] == ' ') {    i++;  }  String headerValue=new String(buf,i,nread - i - 2);  headers.put(headerName,headerValue);  return nread;}  }
class C{  public static LogRecord logSSOTokenInfo(LogRecord lr,SSOToken ssoToken){  String clientDomain=null;  String clientID=null;  String ipAddress=null;  String hostName=null;  String tokenID=ssoToken.getTokenID().toString();  lr.addLogInfo(LogConstants.LOGIN_ID_SID,tokenID);  try {    hostName=ssoToken.getHostName();    lr.addLogInfo(LogConstants.HOST_NAME,hostName);    if (Logger.resolveHostNameEnabled()) {      java.net.InetAddress ipAddr=ssoToken.getIPAddress();      if (ipAddr != null) {        ipAddress=ipAddr.getHostAddress();        if ((hostName == null) || ((ipAddress != null) && (ipAddress.equals(hostName)))) {          hostName=ipAddr.getHostName();        }      }    }    lr.addLogInfo(LogConstants.IP_ADDR,ipAddress);    clientDomain=ssoToken.getProperty("Organization");    lr.addLogInfo(LogConstants.DOMAIN,clientDomain);    clientID=ssoToken.getPrincipal().getName();    lr.addLogInfo(LogConstants.LOGIN_ID,clientID);    String contextId=ssoToken.getProperty(Constants.AM_CTX_ID);    lr.addLogInfo(LogConstants.CONTEXT_ID,contextId);  } catch (  SSOException ssoe) {    Debug.error("LogSSOTokenDetails:logSSOTokenInfo:SSOException: ",ssoe);    return lr;  }  return lr;}  }
class C{  public static ApplicationException createFileSystemException(LocalizableMessage msg,Exception e){  return new ApplicationException(ReturnCode.FILE_SYSTEM_ACCESS_ERROR,msg,e);}  }
class C{  @Override public void execute(Context context,Map<String,Object> contextMap) throws ExecutionException {  String invokerName=(String)contextMap.get(INVOKER_NAME);  String scriptName=(String)contextMap.get(CONFIG_NAME);  JsonValue params=new JsonValue(contextMap).get(CONFIGURED_INVOKE_CONTEXT);  startTaskScanJob(context,invokerName,scriptName,params);}  }
class C{  public synchronized void write(byte[] buf,int off,int len) throws IOException {  super.write(buf,off,len);  crc.update(buf,off,len);}  }
class C{  AccessControlContext(ProtectionDomain caller,DomainCombiner combiner,AccessControlContext parent,AccessControlContext context,Permission[] perms){  ProtectionDomain[] callerPDs=null;  if (caller != null) {    callerPDs=new ProtectionDomain[]{caller};  }  if (context != null) {    if (combiner != null) {      this.context=combiner.combine(callerPDs,context.context);    } else {      this.context=combine(callerPDs,context.context);    }  } else {    if (combiner != null) {      this.context=combiner.combine(callerPDs,null);    } else {      this.context=combine(callerPDs,null);    }  }  this.combiner=combiner;  Permission[] tmp=null;  if (perms != null) {    tmp=new Permission[perms.length];    for (int i=0; i < perms.length; i++) {      if (perms[i] == null) {        throw new NullPointerException("permission can't be null");      }      if (perms[i].getClass() == AllPermission.class) {        parent=null;      }      tmp[i]=perms[i];    }  }  if (parent != null) {    this.limitedContext=combine(parent.context,parent.limitedContext);    this.isLimited=true;    this.isWrapped=true;    this.permissions=tmp;    this.parent=parent;    this.privilegedContext=context;  }  this.isAuthorized=true;}  }
class C{  private boolean isValidGateway(String gateway){  return (gatewayList != null) && ((gatewayList.isEmpty()) || (gatewayList.contains(gateway)));}  }
class C{  public static ChatPage paginate(String unpaginatedString,int pageNumber){  return paginate(unpaginatedString,pageNumber,GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH,CLOSED_CHAT_PAGE_HEIGHT);}  }
class C{  @Inject public EndSession(OAuth2RequestFactory requestFactory,OpenIDConnectEndSession openIDConnectEndSession,ExceptionHandler exceptionHandler,ClientRegistrationStore clientRegistrationStore){  this.requestFactory=requestFactory;  this.openIDConnectEndSession=openIDConnectEndSession;  this.exceptionHandler=exceptionHandler;  this.clientRegistrationStore=clientRegistrationStore;}  }
class C{  public boolean checkboxUI(String opt){  return isUnaryOption(opt) || checkboxUI.contains(opt);}  }
class C{  public org.omg.CORBA.TypeCode _type(){  return ORB.init().get_primitive_tc(TCKind.tk_string);}  }
class C{  public Set<SingleSignOnSessionKey> findSessions(){  return sessionKeys.keySet();}  }
class C{  public int hashCode(){  return executable.hashCode() ^ index;}  }
class C{  public SQLXML readSQLXML() throws SQLException {  return (SQLXML)getNextAttribute();}  }
class C{  private String nextToInternal(String excluded){  int start=pos;  for (; pos < in.length(); pos++) {    char c=in.charAt(pos);    if (c == '\r' || c == '\n' || excluded.indexOf(c) != -1) {      return in.substring(start,pos);    }  }  return in.substring(start);}  }
class C{  @Override public void flush(){  FlushTask task;synchronized (logRecords) {    task=new FlushTask(new ArrayList<String>(logRecords));    logRecords.clear();  }  task.run();}  }
class C{  private void registerAddListener(DN baseDN,ConfigAddListener adaptor) throws ConfigException {  if (configRepository.hasEntry(baseDN)) {    configRepository.registerAddListener(baseDN,adaptor);  } else {    ConfigAddListener delayedListener=new DelayedConfigAddListener(baseDN,adaptor,configRepository);    registerDelayedListener(baseDN,delayedListener);  }}  }
class C{  private StaticGroup(ServerContext serverContext,DN groupEntryDN,AttributeType memberAttributeType,LinkedHashSet<CompactDn> memberDNs){  super();  Reject.ifNull(groupEntryDN,memberAttributeType,memberDNs);  this.serverContext=serverContext;  this.groupEntryDN=groupEntryDN;  this.memberAttributeType=memberAttributeType;  this.memberDNs=memberDNs;}  }
class C{  public void removeInstance() throws InstallException {  getStateAccess().getInstanceData().clear();  getInstallDataStore().removeInstance(getInstanceName());  getInstFinderStore().removeInstance(getInstanceName());}  }
class C{  public void startLogin() throws LoginException {  authDebug.message("AuthContext::startLogin() called");  if (getLoginStatus() != AUTH_NOT_STARTED) {    authDebug.message("AuthContext::startLogin called " + "when the current login state is" + getLoginStatus());    throw (new LoginException(myAuthI18n.getString("authError-invalidMethod" + getLoginStatus())));  }  loginStatus=AUTH_IN_PROGRESS;  authDebug.message("AuthContext::startLogin() " + "starting a new thread to run the login process");  try {    loginThread.start();  } catch (  Exception ex) {    authDebug.message("exception starting thread: " + ex);    throw (new LoginException(ex.getMessage()));  }}  }
class C{  public void stopStreaming(){synchronized (SyncOp) {    videoClient.stopStreaming();    audioClient.stop();    rtmpSender.stop();    LogTools.d("RESClient,stopStreaming()");  }}  }
class C{  public void test_setStartRuleIIIIZ(){  TimeZone.setDefault(TimeZone.getTimeZone("GMT"));  SimpleTimeZone st=new SimpleTimeZone(TimeZone.getTimeZone("EST").getRawOffset(),"EST");  st.setStartRule(Calendar.NOVEMBER,1,Calendar.SUNDAY,1,true);  st.setEndRule(Calendar.NOVEMBER,15,Calendar.SUNDAY,1,false);  assertTrue("StartRule improperly set1",st.useDaylightTime());  assertTrue("StartRule improperly set2",st.inDaylightTime((new GregorianCalendar(1999,Calendar.NOVEMBER,7,12,0).getTime())));  assertTrue("StartRule improperly set3",st.inDaylightTime((new GregorianCalendar(1999,Calendar.NOVEMBER,13,12,0).getTime())));  assertTrue("StartRule improperly set4",!(st.inDaylightTime(new GregorianCalendar(1999,Calendar.NOVEMBER,6,12,0).getTime())));  assertTrue("StartRule improperly set5",!(st.inDaylightTime(new GregorianCalendar(1999,Calendar.NOVEMBER,14,12,0).getTime())));  try {    st.setStartRule(20,15,Calendar.SUNDAY,1,true);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setStartRule(Calendar.NOVEMBER,35,Calendar.SUNDAY,1,true);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setStartRule(Calendar.NOVEMBER,15,12,1,true);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setStartRule(Calendar.NOVEMBER,15,Calendar.SUNDAY,-1,true);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_avts) {    int nAttrs=m_avts.size();    for (int i=(nAttrs - 1); i >= 0; i--) {      AVT avt=(AVT)m_avts.get(i);      avt.fixupVariables(vnames,cstate.getGlobalsSize());    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodenomodificationallowederr.class,args);}  }
class C{  public MBeanNotificationInfo(String[] notifTypes,String name,String description){  this(notifTypes,name,description,null);}  }
class C{  public synchronized int hashCode(){  return startMonth ^ startDay ^ startDayOfWeek^ startTime^ endMonth^ endDay^ endDayOfWeek^ endTime^ rawOffset;}  }
class C{  protected ElemVariable addVarDeclToElem(ElemTemplateElement psuedoVarRecipient,LocPathIterator lpi,ElemVariable psuedoVar) throws org.w3c.dom.DOMException {  ElemTemplateElement ete=psuedoVarRecipient.getFirstChildElem();  lpi.callVisitors(null,m_varNameCollector);  if (m_varNameCollector.getVarCount() > 0) {    ElemTemplateElement baseElem=getElemFromExpression(lpi);    ElemVariable varElem=getPrevVariableElem(baseElem);    while (null != varElem) {      if (m_varNameCollector.doesOccur(varElem.getName())) {        psuedoVarRecipient=varElem.getParentElem();        ete=varElem.getNextSiblingElem();        break;      }      varElem=getPrevVariableElem(varElem);    }  }  if ((null != ete) && (Constants.ELEMNAME_PARAMVARIABLE == ete.getXSLToken())) {    if (isParam(lpi))     return null;    while (null != ete) {      ete=ete.getNextSiblingElem();      if ((null != ete) && Constants.ELEMNAME_PARAMVARIABLE != ete.getXSLToken())       break;    }  }  psuedoVarRecipient.insertBefore(psuedoVar,ete);  m_varNameCollector.reset();  return psuedoVar;}  }
class C{  public String toString(){  return SSOSessionID.toString();}  }
class C{  public Subject createSubject(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SUBJECT,xml);  if (obj == null) {    return new SubjectImpl(xml);  } else {    return (Subject)obj;  }}  }
class C{  public static String printInteger(java.math.BigInteger val){  if (theConverter == null)   initConverter();  return theConverter.printInteger(val);}  }
class C{  public boolean remove(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return q.remove(o);  }  finally {    lock.unlock();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetprevioussiblingnull.class,args);}  }
class C{  @Override public void writeValue(ASN1Writer writer) throws IOException {  writer.writeStartSequence(ASN1.UNIVERSAL_OCTET_STRING_TYPE);{    writer.writeStartSequence();    if (rawAttributes != null) {      for (      String attr : rawAttributes) {        writer.writeOctetString(attr);      }    }    writer.writeEndSequence();  }  writer.writeEndSequence();}  }
class C{  static XMPNode findSchemaNode(XMPNode tree,String namespaceURI,String suggestedPrefix,boolean createNodes) throws XMPException {  assert tree.getParent() == null;  XMPNode schemaNode=tree.findChildByName(namespaceURI);  if (schemaNode == null && createNodes) {    schemaNode=new XMPNode(namespaceURI,new PropertyOptions().setSchemaNode(true));    schemaNode.setImplicit(true);    String prefix=XMPMetaFactory.getSchemaRegistry().getNamespacePrefix(namespaceURI);    if (prefix == null) {      if (suggestedPrefix != null && suggestedPrefix.length() != 0) {        prefix=XMPMetaFactory.getSchemaRegistry().registerNamespace(namespaceURI,suggestedPrefix);      } else {        throw new XMPException("Unregistered schema namespace URI",XMPError.BADSCHEMA);      }    }    schemaNode.setValue(prefix);    tree.addChild(schemaNode);  }  return schemaNode;}  }
class C{  public void testConstructorStringException4(){  String value="98zv765hdsaiy";  int radix=20;  try {    new BigInteger(value,radix);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  @Override public boolean isSuffix(){  return isSuffix;}  }
class C{  protected void initializeRequestContext(RequestContext requestContext){  super.initializeRequestContext(requestContext);  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);}  }
class C{  public LoginServiceAttribute(int service){  super(OctetUtils.toOctets(AttributeType.LOGIN_SERVICE,service));  this.service=service;}  }
class C{  private void stripTrailingNull(){  if (TagOptionSingleton.getInstance().isRemoveTrailingTerminatorOnWrite()) {    String stringValue=(String)value;    if (stringValue.length() > 0) {      if (stringValue.charAt(stringValue.length() - 1) == '\0') {        stringValue=(stringValue).substring(0,stringValue.length() - 1);        value=stringValue;      }    }  }}  }
class C{  public static boolean verifyRequestSignature(HttpServletRequest request,X509Certificate cert){  FSUtils.debug.message("FSSignatureUtil.verifyRequestSignature: Called");  try {    if (cert == null) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSSignatureUtil.verifyRequestSignature: " + "couldn't obtain this site's cert.");      }      return false;    }    String sigAlg=request.getParameter("SigAlg");    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("sigAlg : " + sigAlg);    }    String encSig=request.getParameter("Signature");    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("encSig : " + encSig);    }    if (sigAlg == null || sigAlg.length() == 0 || encSig == null || encSig.length() == 0) {      return false;    }    String algoId=null;    if (sigAlg.equals(IFSConstants.ALGO_ID_SIGNATURE_DSA)) {      algoId=IFSConstants.ALGO_ID_SIGNATURE_DSA_JCA;    } else     if (sigAlg.equals(IFSConstants.ALGO_ID_SIGNATURE_RSA)) {      algoId=IFSConstants.ALGO_ID_SIGNATURE_RSA_JCA;    } else {      FSUtils.debug.error("FSSignatureUtil.signAndReturnQueryString: " + "Invalid signature algorithim");      return false;    }    String queryString=request.getQueryString();    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSignatureUtil.verifyRequestSignature:" + "queryString to be verifed:" + queryString);    }    int sigIndex=queryString.indexOf("&Signature");    String newQueryString=queryString.substring(0,sigIndex);    byte[] signature=null;    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSignatureUtil.verifyRequestSignature: " + "Signature: " + encSig);    }    signature=Base64.decode(encSig);    FSSignatureManager fsmanager=FSSignatureManager.getInstance();    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSignatureUtil.verifyRequestSignature: " + "String to be verified: " + newQueryString);    }    return fsmanager.verifySignature(newQueryString,signature,algoId,cert);  } catch (  Exception e) {    FSUtils.debug.error("FSSignatureUtil.verifyRequestSignature: " + "Exception occured while verifying SP's signature:",e);    return false;  }}  }
class C{  public void replaceReferral(String name,Referral referral) throws NameNotFoundException {  referrals.replaceReferral(name,referral);}  }
class C{  public EmptyResultSetException(String message){  super(message);}  }
class C{  private int makeAvailable() throws IOException {  if (pos != -1) {    return 0;  }  total+=tail - head - pad;  System.arraycopy(buffer,tail - pad,buffer,0,pad);  head=0;  tail=pad;  for (; ; ) {    int bytesRead=input.read(buffer,tail,bufSize - tail);    if (bytesRead == -1) {      final String msg="Stream ended unexpectedly";      throw new MalformedStreamException(msg);    }    if (notifier != null) {      notifier.noteBytesRead(bytesRead);    }    tail+=bytesRead;    findSeparator();    int av=available();    if (av > 0 || pos != -1) {      return av;    }  }}  }
class C{  public static HeaderParser createParser(String line) throws ParseException {  String headerName=Lexer.getHeaderName(line);  String headerValue=Lexer.getHeaderValue(line);  if (headerName == null || headerValue == null)   throw new ParseException("The header name or value is null",0);  Class parserClass=(Class)parserTable.get(SIPHeaderNamesCache.toLowerCase(headerName));  if (parserClass != null) {    try {      Constructor cons=(Constructor)parserConstructorCache.get(parserClass);      if (cons == null) {        cons=parserClass.getConstructor(constructorArgs);        parserConstructorCache.putIfAbsent(parserClass,cons);      }      Object[] args=new Object[1];      args[0]=line;      HeaderParser retval=(HeaderParser)cons.newInstance(args);      return retval;    } catch (    Exception ex) {      InternalErrorHandler.handleException(ex);      return null;    }  } else {    return new HeaderParser(line);  }}  }
class C{  private String readChangeType(LinkedList<StringBuilder> lines) throws LDIFException {  if (lines.isEmpty()) {    return null;  }  StringBuilder line=lines.get(0);  lastEntryHeaderLines.add(line);  int colonPos=line.indexOf(":");  if (colonPos <= 0) {    LocalizableMessage message=ERR_LDIF_NO_ATTR_NAME.get(lastEntryLineNumber,line);    logToRejectWriter(lines,message);    throw new LDIFException(message,lastEntryLineNumber,true);  }  String attrName=toLowerCase(line.substring(0,colonPos));  if (!attrName.equals("changetype")) {    return null;  }  lines.remove();  int length=line.length();  if (colonPos == (length - 1)) {    LocalizableMessage message=ERR_LDIF_INVALID_CHANGETYPE_ATTRIBUTE.get(null,"add, delete, modify, moddn, modrdn");    throw new LDIFException(message,lastEntryLineNumber,false);  }  return readValue(line,colonPos,lines);}  }
class C{  private Retry processResponseHeaders() throws IOException {  Proxy selectedProxy=httpEngine.connection != null ? httpEngine.connection.getRoute().getProxy() : client.getProxy();  final int responseCode=getResponseCode();switch (responseCode) {case HTTP_PROXY_AUTH:    if (selectedProxy.type() != Proxy.Type.HTTP) {      throw new ProtocolException("Received HTTP_PROXY_AUTH (407) code while not using proxy");    }case HTTP_UNAUTHORIZED:  boolean credentialsFound=HttpAuthenticator.processAuthHeader(client.getAuthenticator(),getResponseCode(),httpEngine.getResponseHeaders().getHeaders(),rawRequestHeaders,selectedProxy,url);return credentialsFound ? Retry.SAME_CONNECTION : Retry.NONE;case HTTP_MULT_CHOICE:case HTTP_MOVED_PERM:case HTTP_MOVED_TEMP:case HTTP_SEE_OTHER:case HTTP_TEMP_REDIRECT:if (!getInstanceFollowRedirects()) {return Retry.NONE;}if (++redirectionCount > MAX_REDIRECTS) {throw new ProtocolException("Too many redirects: " + redirectionCount);}if (responseCode == HTTP_TEMP_REDIRECT && !method.equals("GET") && !method.equals("HEAD")) {return Retry.NONE;}String location=getHeaderField("Location");if (location == null) {return Retry.NONE;}URL previousUrl=url;url=new URL(previousUrl,location);if (!url.getProtocol().equals("https") && !url.getProtocol().equals("http")) {return Retry.NONE;}boolean sameProtocol=previousUrl.getProtocol().equals(url.getProtocol());if (!sameProtocol && !client.getFollowProtocolRedirects()) {return Retry.NONE;}boolean sameHost=previousUrl.getHost().equals(url.getHost());boolean samePort=getEffectivePort(previousUrl) == getEffectivePort(url);if (sameHost && samePort && sameProtocol) {return Retry.SAME_CONNECTION;} else {return Retry.DIFFERENT_CONNECTION;}default :return Retry.NONE;}}  }
class C{  public DynamicGroupMemberList(DN groupDN,Set<LDAPURL> memberURLs) throws DirectoryException {  this(groupDN,memberURLs,null,null,null);}  }
class C{  public void initialize(Map configParams){  String delimiterConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER);  if (delimiterConfig != null) {    this.delimiter=delimiterConfig;  }  String caseConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE);  if (caseConfig != null) {    if (caseConfig.equals("true")) {      this.caseSensitive=true;    } else     if (caseConfig.equals("false")) {      this.caseSensitive=false;    } else {      this.caseSensitive=true;    }  }  String wildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD);  if (wildcardConfig != null) {    this.wildcard=wildcardConfig;  }  String oneLevelWildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD);  if (oneLevelWildcardConfig != null) {    this.oneLevelWildcard=oneLevelWildcardConfig;  }  if (debug.messageEnabled()) {    debug.message("PrefixResourceName:initialize():" + " delimiter = " + delimiter + " wildcard = "+ wildcard+ " oneLevelWildcard = "+ oneLevelWildcard+ " case = "+ caseConfig);  }  oneLevelWildcardLength=oneLevelWildcard.length();  wildcardLength=wildcard.length();  if (oneLevelWildcard.indexOf(wildcard) != -1) {    wildcardEmbedded=true;  } else {    wildcardEmbedded=false;  }  if (wildcard.indexOf(oneLevelWildcard) != -1) {    oneLevelWildcardEmbedded=true;  } else {    oneLevelWildcardEmbedded=false;  }  if (debug.messageEnabled()) {    debug.message("wildcardEmbedded,oneLevelWildcardEmbedded" + wildcardEmbedded + ","+ oneLevelWildcardEmbedded);  }  return;}  }
class C{  public NO_PERMISSION(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  private void add(Attribute attr,CSN csn){  AttributeType attrType=attr.getAttributeDescription().getAttributeType();  for (  ByteString val : attr) {    add(val,attrType,csn);  }}  }
class C{  @Override public T compare(String requestResource,String targetResource,boolean wildcardCompare){  if (!wildcardCompare) {    return super.compare(requestResource,targetResource,wildcardCompare);  }  String schemelessTarget=targetResource;  String schemelessRequest=requestResource;  if (schemelessTarget.contains(SCHEME_DELIMITER) && schemelessRequest.contains(SCHEME_DELIMITER)) {    schemelessTarget=removeSchemeEnsureSlash(schemelessTarget);    schemelessRequest=removeSchemeEnsureSlash(schemelessRequest);  } else {    return super.compare(requestResource,targetResource,wildcardCompare);  }  final int firstColon=schemelessTarget.indexOf(COLON);  final int firstSlash=schemelessTarget.indexOf(SLASH);  if (firstColon == -1) {    return super.compare(requestResource,targetResource,wildcardCompare);  } else {    T schemeMatch=compareBeforeBreakpoint(requestResource,targetResource,SCHEME_DELIMITER);    if (!isSuccessfulMatch(schemeMatch)) {      return noMatch;    }    if (firstSlash >= 0 && firstSlash < firstColon) {      return super.compare(schemelessRequest,schemelessTarget,wildcardCompare);    }    if (firstSlash >= 0 && firstSlash > firstColon) {      T hostMatch=compareBeforeBreakpoint(schemelessRequest,schemelessTarget,COLON);      if (!isSuccessfulMatch(hostMatch)) {        return noMatch;      }      final String postColonRequest=schemelessRequest.substring(schemelessRequest.indexOf(COLON));      final String postColonTarget=schemelessTarget.substring(schemelessTarget.indexOf(COLON));      T portMatch=compareBeforeBreakpoint(postColonRequest,postColonTarget,SLASH);      if (!isSuccessfulMatch(portMatch)) {        return noMatch;      }      final String postSlashRequest=postColonRequest.substring(postColonRequest.indexOf(SLASH));      final String postSlashTarget=postColonTarget.substring(postColonTarget.indexOf(SLASH));      final int requestQueryStringIndex=postSlashRequest.indexOf(QUERY_DELIMITER);      final int targetQueryStringIndex=postSlashTarget.indexOf(QUERY_DELIMITER);      if (requestQueryStringIndex != -1) {        if (targetQueryStringIndex == -1) {          final String preQueryStringRequest=postSlashRequest.substring(0,requestQueryStringIndex);          T pathMatch=super.compare(preQueryStringRequest,postSlashTarget,wildcardCompare);          if (noMatch.equals(pathMatch) || subResourceMatch.equals(pathMatch)) {            return noMatch;          }          return superResourceMatch;        }        T pathMatch=compareBeforeBreakpoint(postSlashRequest,postSlashTarget,QUERY_DELIMITER);        if (!isSuccessfulMatch(pathMatch)) {          return noMatch;        }        T queryMatch=super.compare(postSlashRequest.substring(requestQueryStringIndex),postSlashTarget.substring(targetQueryStringIndex),wildcardCompare);        return wildcardResponseCombiner(hostMatch,portMatch,pathMatch,queryMatch);      } else {        T pathMatch=super.compare(postSlashRequest,postSlashTarget,wildcardCompare);        return wildcardResponseCombiner(hostMatch,portMatch,pathMatch);      }    } else {      return compareSplit(schemelessRequest,schemelessTarget,COLON);    }  }}  }
class C{  public void paintTriangle(Graphics g,int x,int y,int size,int direction,boolean isEnabled){  Color oldColor=g.getColor();  int mid, i, j;  j=0;  size=Math.max(size,2);  mid=(size / 2) - 1;  g.translate(x,y);  if (isEnabled)   g.setColor(darkShadow); else   g.setColor(shadow);switch (direction) {case NORTH:    for (i=0; i < size; i++) {      g.drawLine(mid - i,i,mid + i,i);    }  if (!isEnabled) {    g.setColor(highlight);    g.drawLine(mid - i + 2,i,mid + i,i);  }break;case SOUTH:if (!isEnabled) {g.translate(1,1);g.setColor(highlight);for (i=size - 1; i >= 0; i--) {  g.drawLine(mid - i,j,mid + i,j);  j++;}g.translate(-1,-1);g.setColor(shadow);}j=0;for (i=size - 1; i >= 0; i--) {g.drawLine(mid - i,j,mid + i,j);j++;}break;case WEST:for (i=0; i < size; i++) {g.drawLine(i,mid - i,i,mid + i);}if (!isEnabled) {g.setColor(highlight);g.drawLine(i,mid - i + 2,i,mid + i);}break;case EAST:if (!isEnabled) {g.translate(1,1);g.setColor(highlight);for (i=size - 1; i >= 0; i--) {g.drawLine(j,mid - i,j,mid + i);j++;}g.translate(-1,-1);g.setColor(shadow);}j=0;for (i=size - 1; i >= 0; i--) {g.drawLine(j,mid - i,j,mid + i);j++;}break;}g.translate(-x,-y);g.setColor(oldColor);}  }
class C{  public BindRequestProtocolOp(ByteString dn,int protocolVersion,ByteString simplePassword){  this.dn=dn;  this.protocolVersion=protocolVersion;  this.simplePassword=simplePassword;  authenticationType=AuthenticationType.SIMPLE;  saslMechanism=null;  saslCredentials=null;}  }
class C{  public String toXMLString() throws XACMLException {  return toXMLString(true,false);}  }
class C{  @Override public void removeChild(Container child){  if (child == null) {    return;  }  try {    if (child.getState().isAvailable()) {      child.stop();    }  } catch (  LifecycleException e) {    log.error("ContainerBase.removeChild: stop: ",e);  }  try {    if (!LifecycleState.DESTROYING.equals(child.getState())) {      child.destroy();    }  } catch (  LifecycleException e) {    log.error("ContainerBase.removeChild: destroy: ",e);  }synchronized (children) {    if (children.get(child.getName()) == null)     return;    children.remove(child.getName());  }  fireContainerEvent(REMOVE_CHILD_EVENT,child);}  }
class C{  public void validate(final Cookie cookie,final CookieOrigin origin) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  String host=origin.getHost().toLowerCase(Locale.ENGLISH);  if (cookie.getDomain() == null) {    throw new MalformedCookieException("Invalid cookie state: " + "domain not specified");  }  String cookieDomain=cookie.getDomain().toLowerCase(Locale.ENGLISH);  if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.DOMAIN_ATTR)) {    if (!cookieDomain.startsWith(".")) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2109: domain must start with a dot");    }    int dotIndex=cookieDomain.indexOf('.',1);    if (((dotIndex < 0) || (dotIndex == cookieDomain.length() - 1)) && (!cookieDomain.equals(".local"))) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2965: the value contains no embedded dots "+ "and the value is not .local");    }    if (!domainMatch(host,cookieDomain)) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2965: effective host name does not "+ "domain-match domain attribute.");    }    String effectiveHostWithoutDomain=host.substring(0,host.length() - cookieDomain.length());    if (effectiveHostWithoutDomain.indexOf('.') != -1) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2965: "+ "effective host minus domain may not contain any dots");    }  } else {    if (!cookie.getDomain().equals(host)) {      throw new MalformedCookieException("Illegal domain attribute: \"" + cookie.getDomain() + "\"."+ "Domain of origin: \""+ host+ "\"");    }  }}  }
class C{  public static String applyFont(CharSequence html,Font font){  return "<span style=\"" + getFontStyle(font) + "\">"+ html+ "</span>";}  }
class C{  @DataProvider(name="createFormatData") public Object[][] createFormatData(){  return new Object[][]{{1,0,1,0,0,0,0,"00010101000000.000Z"},{9,0,1,0,0,0,0,"00090101000000.000Z"},{10,0,1,0,0,0,0,"00100101000000.000Z"},{99,0,1,0,0,0,0,"00990101000000.000Z"},{100,0,1,0,0,0,0,"01000101000000.000Z"},{999,0,1,0,0,0,0,"09990101000000.000Z"},{1000,0,1,0,0,0,0,"10000101000000.000Z"},{2000,0,1,0,0,0,0,"20000101000000.000Z"},{2099,0,1,0,0,0,0,"20990101000000.000Z"},{2000,8,1,0,0,0,0,"20000901000000.000Z"},{2000,9,1,0,0,0,0,"20001001000000.000Z"},{2000,10,1,0,0,0,0,"20001101000000.000Z"},{2000,11,1,0,0,0,0,"20001201000000.000Z"},{2000,0,9,0,0,0,0,"20000109000000.000Z"},{2000,0,10,0,0,0,0,"20000110000000.000Z"},{2000,0,19,0,0,0,0,"20000119000000.000Z"},{2000,0,20,0,0,0,0,"20000120000000.000Z"},{2000,0,29,0,0,0,0,"20000129000000.000Z"},{2000,0,30,0,0,0,0,"20000130000000.000Z"},{2000,0,31,0,0,0,0,"20000131000000.000Z"},{2000,0,1,9,0,0,0,"20000101090000.000Z"},{2000,0,1,10,0,0,0,"20000101100000.000Z"},{2000,0,1,19,0,0,0,"20000101190000.000Z"},{2000,0,1,20,0,0,0,"20000101200000.000Z"},{2000,0,1,23,0,0,0,"20000101230000.000Z"},{2000,0,1,0,9,0,0,"20000101000900.000Z"},{2000,0,1,0,10,0,0,"20000101001000.000Z"},{2000,0,1,0,59,0,0,"20000101005900.000Z"},{2000,0,1,0,0,9,0,"20000101000009.000Z"},{2000,0,1,0,0,10,0,"20000101000010.000Z"},{2000,0,1,0,0,59,0,"20000101000059.000Z"},{2000,0,1,0,0,0,9,"20000101000000.009Z"},{2000,0,1,0,0,0,10,"20000101000000.010Z"},{2000,0,1,0,0,0,99,"20000101000000.099Z"},{2000,0,1,0,0,0,100,"20000101000000.100Z"},{2000,0,1,0,0,0,999,"20000101000000.999Z"}};}  }
class C{  public void merge() throws IOException {  if (used || validated.size() == 0)   return;  used=true;  PdfDictionary catalog=document.getCatalog().getPdfObject();  PdfObject dss=catalog.get(PdfName.DSS);  if (dss == null)   createDss(); else   updateDss();}  }
class C{  public boolean isNodeDescendant(DefaultMutableTreeNode anotherNode){  if (anotherNode == null)   return false;  return anotherNode.isNodeAncestor(this);}  }
class C{  public Wrapper addServlet(String contextPath,String servletName,String servletClass){  Container ctx=getHost().findChild(contextPath);  return addServlet((Context)ctx,servletName,servletClass);}  }
class C{  public static void hidekeyboard(Activity activity){  try {    ((InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(activity.getCurrentFocus().getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  @Override public void performTask(TokenStorageAdapter adapter) throws DataLayerException {  Token created=adapter.create(token);  handler.processResults(created);}  }
class C{  public static void close(URLConnection conn){  if (conn instanceof HttpURLConnection) {    ((HttpURLConnection)conn).disconnect();  }}  }
class C{  public boolean verifyXMLSignature(Document doc,java.lang.String idAttrName,java.lang.String certAlias) throws XMLSignatureException {  try {    Element nscontext=org.apache.xml.security.utils.XMLUtils.createDSctx(doc,"ds",Constants.SignatureSpecNS);    Element sigElement=(Element)XPathAPI.selectSingleNode(doc,"//ds:Signature[1]",nscontext);    Element refElement;    try {      refElement=(Element)XPathAPI.selectSingleNode(sigElement,"//ds:Reference[1]",nscontext);    } catch (    XPathException te) {      throw new XMLSignatureException(te);    }    String refUri=refElement.getAttribute("URI");    String signedId=((Element)sigElement.getParentNode()).getAttribute(idAttrName);    if (refUri == null || signedId == null || !refUri.substring(1).equals(signedId)) {      SAMLUtilsCommon.debug.error("Signature reference ID does not match with element ID");      throw new XMLSignatureException(SAMLUtilsCommon.bundle.getString("uriNoMatchWithId"));    }    XMLSignature signature=new XMLSignature(sigElement,"");    signature.addResourceResolver(new com.sun.identity.saml.xmlsig.OfflineResolver());    doc.getDocumentElement().setIdAttribute(idAttrName,true);    KeyInfo ki=signature.getKeyInfo();    PublicKey pk=this.getX509PublicKey(doc,ki);    if (pk != null) {      if (signature.checkSignatureValue(pk)) {        return true;      } else {        return false;      }    } else {      if (StringUtils.isEmpty(certAlias)) {        if (SAMLUtilsCommon.debug.warningEnabled()) {          SAMLUtilsCommon.debug.warning("Could not find a KeyInfo and certAlias was not defined");        }        return false;      }      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("Could not find a KeyInfo, " + "try to use certAlias");      }      X509Certificate newcert=keystore.getX509Certificate(certAlias);      if (newcert != null) {        if (signature.checkSignatureValue(newcert)) {          return true;        } else {          return false;        }      } else {        PublicKey key=keystore.getPublicKey(certAlias);        if (key != null) {          if (signature.checkSignatureValue(key)) {            return true;          } else {            return false;          }        } else {          SAMLUtilsCommon.debug.error("Could not find " + "public key based on certAlias to verify" + " signature");          return false;        }      }    }  } catch (  Exception ex) {    SAMLUtilsCommon.debug.error("verifyXMLSignature Exception: ",ex);    throw new XMLSignatureException(ex.getMessage());  }}  }
class C{  public SQLFeatureNotSupportedException(){}  }
class C{  public boolean isTextFile(JecFile file){  return !file.isDirectory() && isMimeText(getMimeType(file.getPath()));}  }
class C{  public Cursor fetchAll(String parameterName,Long actionID,Long dataTypeID){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(DATABASE_TABLE);  qb.appendWhere("1=1");  if (parameterName != null) {    qb.appendWhere(" AND " + KEY_ACTIONPARAMETERNAME + " = ");    qb.appendWhereEscapeString(parameterName);  }  if (actionID != null) {    qb.appendWhere(" AND " + KEY_ACTIONID + " = "+ actionID);  }  if (dataTypeID != null) {    qb.appendWhere(" AND " + KEY_DATATYPEID + " = "+ dataTypeID);  }  return qb.query(database,KEYS,null,null,null,null,null);}  }
class C{  public void test_ConstructorILjava_util_Random(){  try {    new BigInteger(128,(Random)null);    fail();  } catch (  NullPointerException expected) {  }  bi=new BigInteger(70,rand);  bi2=new BigInteger(70,rand);  assertTrue("Random number is negative",bi.compareTo(BigInteger.ZERO) >= 0);  assertTrue("Random number is too big",bi.compareTo(two.pow(70)) < 0);  assertTrue("Two random numbers in a row are the same (might not be a bug but it very likely is)",!bi.equals(bi2));  assertTrue("Not zero",new BigInteger(0,rand).equals(BigInteger.ZERO));  try {    new BigInteger(-1,(Random)null);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  @Override public void destroy(){  for (int i=0; i < spriteBoundsArray.length; i++)   if (spriteBoundsArray[i] != null)   parent.getChildren().remove(spriteBoundsArray[i]);  parent.getChildren().remove(spriteFrame);  parent=null;  spriteFrame=null;  spriteBoundsArray=null;  xPos=yPos=xVel=yVel=frameCounter=0;  frameHeight=fbEffectDelta=zone=0;  mario=null;  playerStates=null;  playerDeathSprites=null;  gameLoop=null;  checkBlockCollision=runDeathSeq=cycleComplete=false;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.AssertionType createAssertionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.AssertionTypeImpl();}  }
class C{  public Value parseValueFromTwoVarOp(TwoVariableOperation tvo,SemanticScope scope) throws SyntaxException {  String op=tvo.operator();  Value left=parseValueFromExpression(tvo.expressions().get(0),null,scope);  Value right=parseValueFromExpression(tvo.expressions().get(1),null,scope);  return parseValueFromTwoVarOp(left,op,right,scope,tvo.line_col());}  }
class C{  private JsonValue execScript(String type,Script script,Map<String,Object> scope,Context context) throws ScriptException {  Object results=script.exec(scope,context);  return json(results);}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof AlphaComposite)) {    return false;  }  AlphaComposite ac=(AlphaComposite)obj;  if (rule != ac.rule) {    return false;  }  if (extraAlpha != ac.extraAlpha) {    return false;  }  return true;}  }
class C{  public synchronized boolean intersectsSet(NSSet otherSet){  for (  NSObject o : set) {    if (otherSet.containsObject(o))     return true;  }  return false;}  }
class C{  public boolean empty(){switch (type) {case '*':case '?':    return true;case '+':case '|':  for (ContentModel m=(ContentModel)content; m != null; m=m.next) {    if (m.empty()) {      return true;    }  }return false;case ',':case '&':for (ContentModel m=(ContentModel)content; m != null; m=m.next) {if (!m.empty()) {  return false;}}return true;default :return false;}}  }
class C{  @Override public final void run(){  setResultCode(ResultCode.UNDEFINED);  setProcessingStartTime();  logAbandonRequest(this);  abandonProcessing: {    if (!processOperationResult(getPluginConfigManager().invokePreParseAbandonPlugins(this))) {      break abandonProcessing;    }    boolean notifyRequestor=DirectoryServer.notifyAbandonedOperations();    LocalizableMessage cancelReason=INFO_CANCELED_BY_ABANDON_REQUEST.get(messageID);    CancelRequest _cancelRequest=new CancelRequest(notifyRequestor,cancelReason);    CancelResult result=clientConnection.cancelOperation(idToAbandon,_cancelRequest);    setResultCode(result.getResultCode());    appendErrorMessage(result.getResponseMessage());    if (!processOperationResult(getPluginConfigManager().invokePostOperationAbandonPlugins(this))) {      break abandonProcessing;    }  }  setProcessingStopTime();  logAbandonResult(this);}  }
class C{  protected ColorSupported(int value){  super(value);}  }
class C{  public BetweenQueryExp(ValueExp v1,ValueExp v2,ValueExp v3){  exp1=v1;  exp2=v2;  exp3=v3;}  }
class C{  public MBeanServerPermission(String name,String actions){  super(getCanonicalName(parseMask(name)),actions);  mask=parseMask(name);  if (actions != null && actions.length() > 0)   throw new IllegalArgumentException("MBeanServerPermission " + "actions must be null: " + actions);}  }
class C{  public Tailer(File file,TailerListener listener,long delayMillis){  this(file,listener,delayMillis,false);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node lchildNode;  String childName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  lchildNode=employeeNode.getLastChild();  childName=lchildNode.getNodeName();  assertEquals("whitespace","#text",childName);}  }
class C{  public void execute(String sql,Object[] bindArgs,int connectionFlags,CancellationSignal cancellationSignal){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags,cancellationSignal)) {    return;  }  acquireConnection(sql,connectionFlags,cancellationSignal);  try {    mConnection.execute(sql,bindArgs,cancellationSignal);  }  finally {    releaseConnection();  }}  }
class C{  private int doCancel(){  int deselected=0;  Set<SelectionKey> cancelledKeys=cancelledKeys();synchronized (cancelledKeys) {    if (cancelledKeys.size() > 0) {      for (      SelectionKey currentKey : cancelledKeys) {        mutableKeys.remove(currentKey);        deregister((AbstractSelectionKey)currentKey);        if (mutableSelectedKeys.remove(currentKey)) {          deselected++;        }      }      cancelledKeys.clear();    }  }  return deselected;}  }
class C{  protected void paintHorizontalLabel(Graphics g,int value,Component label){  int labelCenter=xPositionForValue(value);  int labelLeft=labelCenter - (label.getPreferredSize().width / 2);  g.translate(labelLeft,0);  label.paint(g);  g.translate(-labelLeft,0);}  }
class C{  public ByteArrayBuilder appendInt(int i){  builder.appendInt(i);  return this;}  }
class C{  final boolean acquireQueued(final Node node,long arg){  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return interrupted;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public FileChannelImpl(Object stream,FileDescriptor fd,int mode){  this.fd=fd;  this.stream=stream;  this.mode=mode;}  }
class C{  public ClientAbortException(String message,Throwable throwable){  super(message,throwable);}  }
class C{  private void postToTarget(RequestSecurityTokenResponse rstr,String targetURL) throws IOException, ServletException {  String classMethod="IDPSSOUtil.postToTarget: ";  String wresult=rstr.toString();  if (debug.messageEnabled()) {    debug.message(classMethod + "wresult before encoding: " + wresult);  }  request.setAttribute(WSFederationConstants.POST_ACTION,ESAPI.encoder().encodeForHTML(targetURL));  request.setAttribute(WSFederationConstants.POST_WA,WSFederationConstants.WSIGNIN10);  request.setAttribute(WSFederationConstants.POST_WCTX,ESAPI.encoder().encodeForHTML(wctx));  request.setAttribute(WSFederationConstants.POST_WRESULT,ESAPI.encoder().encodeForHTML(wresult));  request.getRequestDispatcher("/wsfederation/jsp/post.jsp").forward(request,response);}  }
class C{  public String replaceTokensWithOrientToken(String queryString){  Matcher matcher=tokenPattern.matcher(queryString);  StringBuffer buf=new StringBuffer();  while (matcher.find()) {    String origToken=matcher.group(1);    if (origToken != null && origToken.length() > 3) {      String newToken=":" + origToken;      matcher.appendReplacement(buf,"");      buf.append(newToken);    }  }  matcher.appendTail(buf);  return buf.toString();}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme: got an Invite sending Trying");    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      logger.info("null server tx -- getting a new one");      st=sipProvider.getNewServerTransaction(request);    }    logger.info("getNewServerTransaction : " + st);    String txId=((ViaHeader)request.getHeader(ViaHeader.NAME)).getBranch();    this.serverTxTable.put(txId,st);    Response response=protocolObjects.messageFactory.createResponse(Response.TRYING,request);    ListeningPoint lp=sipProvider.getListeningPoint(protocolObjects.transport);    int myPort=lp.getPort();    Address address=protocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    int timeToSleep=(int)(Math.random() * 1000);    Thread.sleep(timeToSleep);    st.sendResponse(response);    Response ringingResponse=protocolObjects.messageFactory.createResponse(Response.RINGING,request);    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)ringingResponse.getHeader(ToHeader.NAME);    String toTag=actAsNonRFC3261UAS ? null : new Integer((int)(Math.random() * 10000)).toString();    if (!actAsNonRFC3261UAS)     toHeader.setTag(toTag);    ringingResponse.addHeader(contactHeader);    st.sendResponse(ringingResponse);    Dialog dialog=st.getDialog();    dialog.setApplicationData(st);    this.inviteSeen=true;    new Timer().schedule(new MyTimerTask(requestEvent,st),1000);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public int upper_y_value(int p_x){  int result=Math.min(oct_uy,p_x - oct_ulx);  return Math.min(result,oct_urx - p_x);}  }
class C{  private void waitWhileSessionIsActive(StandardSession session) throws InterruptedException {  long maxWaitTime=System.currentTimeMillis() + 60000;  AtomicInteger accessCount=session.accessCount;  while (accessCount.get() > 0) {    Assert.assertTrue(System.currentTimeMillis() < maxWaitTime);    Thread.sleep(200);  }}  }
class C{  @Override public void close() throws IOException {  try {    in.close();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public CanvasTag(PdfName role){  this.role=role;}  }
class C{  public NameIdentifier(org.w3c.dom.Element nameIdentifierElement) throws SAMLException {  Element elt=(Element)nameIdentifierElement;  String eltName=elt.getLocalName();  if (eltName == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("NameIdentifier: local name missing");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (!(eltName.equals("NameIdentifier"))) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("NameIdentifier: invalid root element");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("invalidElement"));  }  String read=elt.getAttribute("NameQualifier");  if (read != null) {    _nameQualifier=read;  }  read=elt.getAttribute("Format");  if (read != null) {    _format=read;  }  read=XMLUtils.getElementValue(elt);  if ((read == null) || (read.length() == 0)) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("NameIdentifier: null input " + "specified");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  } else {    _name=read;  }}  }
class C{  public String to_string(){  return name;}  }
class C{  private String completeDefinitionWhenReplacingSchemaElement(String definition,SchemaElement existingElement,Set<String> modifiedSchemaFiles) throws DirectoryException {  String givenSchemaFile=SchemaUtils.parseSchemaFileFromElementDefinition(definition);  String oldSchemaFile=getElementSchemaFile(existingElement);  if (givenSchemaFile == null) {    if (oldSchemaFile == null) {      oldSchemaFile=FILE_USER_SCHEMA_ELEMENTS;    }    modifiedSchemaFiles.add(oldSchemaFile);    return SchemaUtils.addSchemaFileToElementDefinitionIfAbsent(definition,oldSchemaFile);  } else   if (oldSchemaFile == null || oldSchemaFile.equals(givenSchemaFile)) {    modifiedSchemaFiles.add(givenSchemaFile);  } else {    modifiedSchemaFiles.add(givenSchemaFile);    modifiedSchemaFiles.add(oldSchemaFile);  }  return definition;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  String docTypeName;  String nodeValue;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  docTypeName=docType.getName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("doctypeNameSVG","svg",docTypeName);  } else {    assertEquals("doctypeName","staff",docTypeName);  }  nodeValue=docType.getNodeValue();  assertNull("initiallyNull",nodeValue);}  }
class C{  protected void loadChildren(Element e){  for (int counter=0; counter < e.getElementCount(); counter++) {    Element child=e.getElement(counter);    AttributeSet attrs=child.getAttributes();    if (attrs.getAttribute(StyleConstants.NameAttribute) == HTML.Tag.TR) {      addChild(new TableRowElementInfo(child,this,counter));    } else     if (attrs.getAttribute(StyleConstants.NameAttribute) == HTML.Tag.CAPTION) {      caption=createElementInfo(child,this);    }  }}  }
class C{  public int read() throws IOException {  return in.read();}  }
class C{  public void incrementIdxOfCallbackSetInModule(){  ++this.idxOfCallbackSetInModule;}  }
class C{  public void initializePasswordStorageSchemes() throws ConfigException, InitializationException {  RootCfg rootConfiguration=serverContext.getRootConfig();  rootConfiguration.addPasswordStorageSchemeAddListener(this);  rootConfiguration.addPasswordStorageSchemeDeleteListener(this);  for (  String schemeName : rootConfiguration.listPasswordStorageSchemes()) {    PasswordStorageSchemeCfg config=rootConfiguration.getPasswordStorageScheme(schemeName);    config.addChangeListener(this);    if (config.isEnabled()) {      String className=config.getJavaClass();      loadAndInstallPasswordStorageScheme(className,config);    }  }}  }
class C{  public boolean containsValue(NSObject val){  return val != null && dict.containsValue(val);}  }
class C{  private static int numericCompaction(int[] codewords,int codeIndex,StringBuilder result) throws FormatException {  int count=0;  boolean end=false;  int[] numericCodewords=new int[MAX_NUMERIC_CODEWORDS];  while (codeIndex < codewords[0] && !end) {    int code=codewords[codeIndex++];    if (codeIndex == codewords[0]) {      end=true;    }    if (code < TEXT_COMPACTION_MODE_LATCH) {      numericCodewords[count]=code;      count++;    } else {      if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      }    }    if (count % MAX_NUMERIC_CODEWORDS == 0 || code == NUMERIC_COMPACTION_MODE_LATCH || end) {      if (count > 0) {        String s=decodeBase900toBase10(numericCodewords,count);        result.append(s);        count=0;      }    }  }  return codeIndex;}  }
class C{  public LDAPConnectionException(LocalizableMessage message,Throwable cause){  super(message,cause);  resultCode=-1;  matchedDN=null;  errorMessage=null;}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  retrieveCommonProperties();  IDFFModel model=(IDFFModel)getModel();  try {    Map orig=model.getCommonAttributeValues(realm,entityName);    AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTES);    Map values=ps.getAttributeValues(orig,false,model);    model.modifyEntityProfile(realm,entityName,values);    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","idff.entityDescriptor.provider.general.updated");  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public void push(final V value) throws IndexOutOfBoundsException {  if (top + locals >= values.length) {    throw new IndexOutOfBoundsException("Insufficient maximum stack size.");  }  values[top++ + locals]=value;}  }
class C{  public void makeImmutable(){  super.makeImmutable();}  }
class C{  public TexturePaint(BufferedImage txtr,Rectangle2D anchor){  this.bufImg=txtr;  this.tx=anchor.getX();  this.ty=anchor.getY();  this.sx=anchor.getWidth() / bufImg.getWidth();  this.sy=anchor.getHeight() / bufImg.getHeight();}  }
class C{  private void writeVersionContents(ServerDescriptor desc,int maxLabelWidth){  writeLabelValue(INFO_OPENDS_VERSION_LABEL.get(),desc.getOpenDSVersion(),maxLabelWidth);}  }
class C{  private static JKSKeyProvider createKeyProvider(){  JKSKeyProvider jksKp;  if (useSpecificTrustStore()) {    jksKp=new JKSKeyProvider(SOAP_KEYSTORE_FILE_PROP,SOAP_KEYSTORE_PASS_FILE_PROP,SOAP_KEYSTORE_TYPE_PROP,SOAP_PRIVATE_KEY_PASS_FILE_PROP);  } else {    jksKp=new JKSKeyProvider();  }  return jksKp;}  }
class C{  public PdfCanvas newlineShowText(float wordSpacing,float charSpacing,String text){  document.checkShowTextIsoConformance(currentGs,resources);  contentStream.getOutputStream().writeFloat(wordSpacing).writeSpace().writeFloat(charSpacing);  showTextInt(text);  contentStream.getOutputStream().writeByte('"').writeNewLine();  currentGs.setCharSpacing(charSpacing);  currentGs.setWordSpacing(wordSpacing);  return this;}  }
class C{  public void testValueOfDoublePos3(){  double a=12321237576.9878838;  BigDecimal result=BigDecimal.valueOf(a);  String res="12321237576.987885";  int resScale=6;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void testDivideBigDecimalScaleMathContextDOWN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=15;  String b="748766876876723342238476237823787879183470";  int bScale=70;  int precision=21;  RoundingMode rm=RoundingMode.DOWN;  MathContext mc=new MathContext(precision,rm);  String c="4.98978611802562512995E+70";  int resScale=-50;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  private BigInteger squareKaratsuba(){  int half=(mag.length + 1) / 2;  BigInteger xl=getLower(half);  BigInteger xh=getUpper(half);  BigInteger xhs=xh.square();  BigInteger xls=xl.square();  return xhs.shiftLeft(half * 32).add(xl.add(xh).square().subtract(xhs.add(xls))).shiftLeft(half * 32).add(xls);}  }
class C{  private static void addStatusCodeMap(int nKey,String strVal){  mapStatusCodes.put(Integer.valueOf(nKey),strVal);}  }
class C{  public boolean isEnableReplicationSubcommand(){  return isSubcommand(ENABLE_REPLICATION_SUBCMD_NAME);}  }
class C{  public DSInfo toDSInfo(){  return new DSInfo(serverId,serverURL,getReplicationServerId(),generationId,status,assuredFlag,assuredMode,safeDataLevel,groupId,refUrls,eclIncludes,eclIncludesForDeletes,getProtocolVersion());}  }
class C{  public void validateCookie(MultiDomainServerState cookie,Set<DN> ignoredBaseDNs) throws DirectoryException {  final Set<DN> activeDomains=getDNsOfActiveDomainsInServer(ignoredBaseDNs);  final Set<DN> cookieDomains=getDNsOfCookie(cookie);  checkNoUnknownDomainIsProvidedInCookie(cookie,activeDomains,cookieDomains);  checkCookieIsNotOutdated(cookie,activeDomains);}  }
class C{  static TargetAttr decode(EnumTargetOperator operator,String expr) throws AciException {  return new TargetAttr(operator,expr);}  }
class C{  public void flush() throws IOException {  se.flush();}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  if (isSigned && signedXMLString != null) {    return signedXMLString;  }  StringBuffer xml=new StringBuffer();  if ((newID != null) && (newEncryptedID != null)) {    throw new SAML2Exception("wrongInput");  }  if (((newID != null) || (newEncryptedID != null)) && (terminate == true)) {    throw new SAML2Exception("wrongInput");  }  String NS="";  String NSP="";  if (declareNS) {    NS=SAML2Constants.PROTOCOL_DECLARE_STR;  }  if (includeNSPrefix) {    NSP=SAML2Constants.PROTOCOL_PREFIX;  }  xml.append("<").append(NSP).append(elementName);  xml.append(NS).append(" ");  xml.append(getAttributesString());  xml.append(">");  xml.append(getElements(includeNSPrefix,declareNS));  if (nameid != null) {    xml.append(nameid.toXMLString(includeNSPrefix,declareNS));  }  if (encryptedID != null) {    xml.append(encryptedID.toXMLString());  }  if (newID != null) {    xml.append(newID.toXMLString(includeNSPrefix,declareNS));  }  if (newEncryptedID != null) {    xml.append(newEncryptedID.toXMLString());  }  if (terminate == true) {    xml.append("<").append(NSP).append("Terminate/>");  }  xml.append("</").append(NSP).append(elementName).append(">");  return xml.toString();}  }
class C{  public JOptionPane(){  this("JOptionPane message");}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    if (!challengedBye) {      challengedBye=true;      logger.info("Got a BYE! Challenging...");      Response challenge=protocolObjects.messageFactory.createResponse(401,request);      serverTransactionId.sendResponse(challenge);      return;    }    logger.info("shootme:  got a bye sending OK.");    Response response=protocolObjects.messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);      logger.info("Dialog State is " + serverTransactionId.getDialog().getState());    } else {      logger.info("null server tx.");    }  } catch (  Exception ex) {    String s="Unexpected exception";    logger.error(s,ex);    ChallengeTest.fail(s);  }}  }
class C{  private String toLoggableString(){  String string=canceled ? "canceled call" : "call";  HttpUrl redactedUrl=originalRequest.url().resolve("/...");  return string + " to " + redactedUrl;}  }
class C{  public CallMethodRule(String methodName,int paramCount){  this(0,methodName,paramCount);}  }
class C{  private void updateUI(){  LogAdapter logAdapter=new LogAdapter(this);  listView=(ListView)findViewById(R.id.activity_logs_listview);  listView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);  listView.setAdapter(logAdapter);  state=getSharedPreferences(KEY_STATE,Context.MODE_WORLD_READABLE | Context.MODE_WORLD_WRITEABLE);  listView.setItemChecked(state.getInt(KEY_STATE_SELECTED_LOG,-1),true);}  }
class C{  public boolean isCli(){  return cliArg.isPresent();}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  B64InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4 + 1),40)];    int length=0;    int numBytes=0;    bis=new B64InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public TagHandlerPool(){}  }
class C{  public BlockVector(double x,double y,double z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public AMPostCallBackException(SSOToken token,String errorCode){  super(token,errorCode);}  }
class C{  boolean isOne(){  return (intLen == 1) && (value[offset] == 1);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue07.class,args);}  }
class C{  public Mp4DiscNoField(String discValue) throws FieldDataInvalidException {  super(Mp4FieldKey.DISCNUMBER.getFieldName(),discValue);  numbers=new ArrayList<Short>();  numbers.add(new Short("0"));  String values[]=discValue.split("/");switch (values.length) {case 1:    try {      numbers.add(Short.parseShort(values[0]));    } catch (    NumberFormatException nfe) {      throw new FieldDataInvalidException("Value of:" + values[0] + " is invalid for field:"+ id);    }  numbers.add(new Short("0"));break;case 2:try {numbers.add(Short.parseShort(values[0]));} catch (NumberFormatException nfe) {throw new FieldDataInvalidException("Value of:" + values[0] + " is invalid for field:"+ id);}try {numbers.add(Short.parseShort(values[1]));} catch (NumberFormatException nfe) {throw new FieldDataInvalidException("Value of:" + values[1] + " is invalid for field:"+ id);}break;default :throw new FieldDataInvalidException("Value is invalid for field:" + id);}}  }
class C{  public boolean isSubentry(){  return hasObjectClass(OC_SUBENTRY);}  }
class C{  public void makeCurrent(){  mEglCore.makeCurrent(mEGLSurface);}  }
class C{  public FSLogoutStatus processHttpSingleLogoutRequest(HttpServletResponse response,HttpServletRequest request,FSLogoutNotification reqLogout,FSSessionPartner currentSessionProvider,String userID,Object ssoToken,String sourceEntityId,String sessionIndex,boolean isWMLAgent,String relayState,String isSourceIDP){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Entered FSSingleLogoutHandler::" + " processHttpSingleLogoutRequest - HTTP");  }  this.response=response;  this.request=request;  this.requestLogout=reqLogout;  locale=FSServiceUtils.getLocale(request);  setLogoutURL();  if (currentSessionProvider != null) {    isCurrentProviderIDPRole=currentSessionProvider.getIsRoleIDP();    remoteEntityId=currentSessionProvider.getPartner();    setRemoteDescriptor(getRemoteDescriptor(remoteEntityId));  }  this.userID=userID;  this.ssoToken=ssoToken;  this.sessionIndex=sessionIndex;  this.isWMLAgent=isWMLAgent;  if (reqLogout != null) {    FSUtils.debug.message("FSLogoutNotification formed really well");    FSReturnSessionManager localManager=FSReturnSessionManager.getInstance(metaAlias);    if (localManager != null) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Added " + sourceEntityId + " top return list");      }      localManager.setUserProviderInfo(userID,sourceEntityId,isSourceIDP,relayState,reqLogout.getRequestID());    } else {      FSUtils.debug.message("Cannot get FSReturnSessionManager");    }    FSSessionManager sessionManager=FSSessionManager.getInstance(metaAlias);    FSSession session=sessionManager.getSession(sessionManager.getSessionList(userID),sessionIndex);    if (currentSessionProvider == null) {      FSUtils.debug.message("currentSessionProvider is null. destroy and return");      FSLogoutUtil.destroyPrincipalSession(userID,metaAlias,reqLogout.getSessionIndex(),request,response);      returnAfterCompletion();      return new FSLogoutStatus(IFSConstants.SAML_SUCCESS);    } else {      String currentEntityId=currentSessionProvider.getPartner();      isCurrentProviderIDPRole=currentSessionProvider.getIsRoleIDP();      FSUtils.debug.message("FSSLOHandler, in case 3");      FSLogoutUtil.cleanSessionMapPartnerList(userID,currentEntityId,metaAlias,session);      FSLogoutStatus bLogoutStatus=null;      List profiles=remoteDescriptor.getSingleLogoutProtocolProfile();      if (profiles != null && (profiles.contains(IFSConstants.LOGOUT_SP_REDIRECT_PROFILE) || profiles.contains(IFSConstants.LOGOUT_IDP_REDIRECT_PROFILE))) {        FSUtils.debug.message("In redirect profile");        bLogoutStatus=doHttpRedirect(currentEntityId);      } else       if (profiles != null && profiles.contains(IFSConstants.LOGOUT_IDP_GET_PROFILE) && !isCurrentProviderIDPRole) {        FSUtils.debug.message("In GET profile");        bLogoutStatus=doHttpGet(currentEntityId);      } else {        FSUtils.debug.error("Provider " + currentEntityId + "doesn't support HTTP profile.");        returnAfterCompletion();        bLogoutStatus=new FSLogoutStatus(IFSConstants.SAML_RESPONDER);      }      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Logout completed first round" + " with status : " + bLogoutStatus);      }      return bLogoutStatus;    }  } else {    String[] data={userID};    LogUtil.error(Level.INFO,LogUtil.LOGOUT_FAILED_REQUEST_IMPROPER,data,ssoToken);    FSUtils.debug.message("Request not proper. Cannot proceed with single logout");    returnAfterCompletion();    return new FSLogoutStatus(IFSConstants.SAML_REQUESTER);  }}  }
class C{  public boolean isMember(SSOToken token) throws SSOException, PolicyException {  boolean member=false;  if (mstm == null) {    String realmName=stm.getPolicyManager().getOrganizationDN();    mstm=PolicyCache.getInstance().getPolicyManager(realmName).getSubjectTypeManager();  }  Subject subject=mstm.getCachedSubjectByName(subjectName);  if (subject != null) {    member=subject.isMember(token);  } else {    if (debug.warningEnabled()) {      debug.warning("Realm subject: " + subjectName + " not found");    }  }  return member;}  }
class C{  public AuthorizationIdentityResponseControl(boolean isCritical,String authorizationID){  super(OID_AUTHZID_RESPONSE,isCritical);  this.authorizationID=authorizationID;}  }
class C{  public String wrapIfKeywordOrBuiltIn(String name){  if (KEYWORD_BUILT_IN_SET.contains(name)) {    return name + "_";  }  return name;}  }
class C{  public void add(String item,int index){  addItem(item,index);}  }
class C{  public synchronized void drop(DropTargetDropEvent dtde){  isDraggingInside=false;  clearAutoscroll();  if (dtListener != null && active)   dtListener.drop(dtde); else {    dtde.rejectDrop();  }}  }
class C{  @Override public void addEnvironment(ContextEnvironment environment){  if (entries.contains(environment.getName())) {    ContextEnvironment ce=findEnvironment(environment.getName());    ContextResourceLink rl=findResourceLink(environment.getName());    if (ce != null) {      if (ce.getOverride()) {        removeEnvironment(environment.getName());      } else {        return;      }    } else     if (rl != null) {      NamingResourcesImpl global=getServer().getGlobalNamingResources();      if (global.findEnvironment(rl.getGlobal()) != null) {        if (global.findEnvironment(rl.getGlobal()).getOverride()) {          removeResourceLink(environment.getName());        } else {          return;        }      }    } else {      return;    }  }  if (!checkResourceType(environment)) {    throw new IllegalArgumentException(sm.getString("namingResources.resourceTypeFail",environment.getName(),environment.getType()));  }  entries.add(environment.getName());synchronized (envs) {    environment.setNamingResources(this);    envs.put(environment.getName(),environment);  }  support.firePropertyChange("environment",null,environment);  if (resourceRequireExplicitRegistration) {    try {      MBeanUtils.createMBean(environment);    } catch (    Exception e) {      log.warn(sm.getString("namingResources.mbeanCreateFail",environment.getName()),e);    }  }}  }
class C{  public LockableFileWriter(String fileName) throws IOException {  this(fileName,false,null);}  }
class C{  static boolean charEqualsIgnoreCase(char c1,char c2){  return c1 == c2 || Character.toUpperCase(c1) == Character.toUpperCase(c2) || Character.toLowerCase(c1) == Character.toLowerCase(c2);}  }
class C{  public String toBackslashed(){  return Joiner.on("\\").join(pathPieces);}  }
class C{  public boolean activate(String userDN){  return activate(userDN,false);}  }
class C{  public static void retObjErr(ClassNode cn){  String mthdN=Stringer.genKey(10), mthdR="()Ljava/lang/Object;";  String catchType="java/lang/Exception";  for (  MethodNode mn : cn.methods) {    if (mn.name.contains("<") || AccessHelper.isAbstract(mn.access) || mn.instructions.size() < 4) {      continue;    }    AbstractInsnNode last=mn.instructions.getLast();    LabelNode beforeInvoke=new LabelNode();    LabelNode afterInvoke=new LabelNode();    LabelNode beforeAthrow=new LabelNode();    LabelNode afterAthrow=new LabelNode();    LabelNode handler=new LabelNode();    if (mn.localVariables == null) {      mn.localVariables=new ArrayList<LocalVariableNode>(5);    }    int index=mn.localVariables.size();    LocalVariableNode exVarInvoke=new LocalVariableNode("excptnInvoke","L" + catchType + ";",null,beforeInvoke,afterInvoke,index);    LocalVariableNode exVarThrow=new LocalVariableNode("excptnThrow","L" + catchType + ";",null,beforeAthrow,afterAthrow,index + 1);    TryCatchBlockNode tryBlockInvoke=new TryCatchBlockNode(beforeInvoke,afterInvoke,handler,null);    TryCatchBlockNode tryBlockThrow=new TryCatchBlockNode(beforeAthrow,afterAthrow,handler,null);    mn.instructions.insertBefore(last,beforeInvoke);    mn.instructions.insertBefore(last,new MethodInsnNode(Opcodes.INVOKESTATIC,cn.name,mthdN,mthdR,false));    mn.instructions.insertBefore(last,afterInvoke);    mn.instructions.insertBefore(last,new TypeInsnNode(Opcodes.CHECKCAST,"java/lang/NullPointerException"));    mn.instructions.insertBefore(last,beforeAthrow);    mn.instructions.insertBefore(last,new InsnNode(Opcodes.ATHROW));    mn.instructions.insertBefore(last,afterAthrow);    mn.instructions.insertBefore(last,handler);    mn.tryCatchBlocks.add(tryBlockInvoke);    mn.tryCatchBlocks.add(tryBlockThrow);    mn.localVariables.add(exVarInvoke);    mn.localVariables.add(exVarThrow);    if (!mn.exceptions.contains(catchType)) {      mn.exceptions.add(catchType);    }  }  int acc=Opcodes.ACC_PRIVATE | Opcodes.ACC_STATIC | Opcodes.ACC_SYNTHETIC;  MethodNode objMethod=new MethodNode(acc,mthdN,mthdR,null,new String[]{});  objMethod.instructions.add(new TypeInsnNode(Opcodes.NEW,"java/lang/NullPointerException"));  objMethod.instructions.add(new InsnNode(Opcodes.DUP));  objMethod.instructions.add(new MethodInsnNode(Opcodes.INVOKESPECIAL,"java/lang/NullPointerException","<init>","()V",false));  objMethod.instructions.add(new InsnNode(Opcodes.ARETURN));  cn.methods.add(objMethod);}  }
class C{  public MD5PasswordStorageSchemeTestCase(){  super("cn=MD5,cn=Password Storage Schemes,cn=config");}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docImported;  Element element;  Attr attr;  Node importedAttr;  String nodeName;  int nodeType;  String nodeValue;  NodeList addresses;  Node attrsParent;  doc=(Document)load("staffNS",true);  docImported=(Document)load("staff",true);  addresses=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)addresses.item(1);  attr=element.getAttributeNodeNS("http://www.nist.gov","zone");  importedAttr=docImported.importNode(attr,false);  nodeName=importedAttr.getNodeName();  nodeType=(int)importedAttr.getNodeType();  nodeValue=importedAttr.getNodeValue();  attrsParent=importedAttr.getParentNode();  assertNull("documentimportnode02_parentNull",attrsParent);  assertEquals("documentimportnode02_nodeName","emp:zone",nodeName);  assertEquals("documentimportnode02_nodeType",2,nodeType);  assertEquals("documentimportnode02_nodeValue","CANADA",nodeValue);}  }
class C{  public static List<String> readLines(Reader input) throws IOException {  BufferedReader reader=toBufferedReader(input);  List<String> list=new ArrayList<String>();  String line=reader.readLine();  while (line != null) {    list.add(line);    line=reader.readLine();  }  return list;}  }
class C{  public Installation(File rootDirectory,File instanceDirectory){  setRootDirectory(rootDirectory);  setInstanceDirectory(instanceDirectory);}  }
class C{  public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  return (encrypting) ? encryptBlock(in,inOff,out,outOff) : decryptBlock(in,inOff,out,outOff);}  }
class C{  @Override public long skip(long n) throws IOException {  while (n > 0 && readFirstBytes() >= 0) {    n--;  }  return in.skip(n);}  }
class C{  private void displayVerbose(ConsoleApplication app,String categoryName,String typeName,Tag tag,Set<String> propertyNames){  LocalizableMessage c1=buildLine('=',MAX_LINE_WIDTH);  LocalizableMessage c2=buildLine('-',MAX_LINE_WIDTH);  boolean isFirstManagedObject=true;  for (  String category : categoryMap.keySet()) {    if (categoryName != null && !categoryName.equals(category)) {      continue;    }    Map<String,AbstractManagedObjectDefinition<?,?>> subTypes=categoryMap.get(category);    for (    String type : subTypes.keySet()) {      if (typeName != null && !typeName.equals(type)) {        continue;      }      AbstractManagedObjectDefinition<?,?> mod=subTypes.get(type);      if (cannotDisplay(app,mod,tag)) {        continue;      }      boolean isFirstProperty=true;      Set<PropertyDefinition<?>> pds=getPropertyDefinitions(mod);      for (      PropertyDefinition<?> pd : pds) {        if (cannotDisplay(app,pd,propertyNames)) {          continue;        }        if (isFirstProperty) {          if (!isFirstManagedObject) {            app.println();            app.println(c1);            app.println();          } else {            isFirstManagedObject=false;          }          app.println(INFO_DSCFG_HELP_HEADING_COMPONENT.get(mod.getUserFriendlyName()));          app.println();          app.println(mod.getSynopsis());          if (mod.getDescription() != null) {            app.println();            app.println(mod.getDescription());          }        }        app.println();        app.println(c2);        app.println();        displayVerboseSingleProperty(app,mod,pd.getName());        isFirstProperty=false;      }    }  }}  }
class C{  public StreamResult(Writer writer){  setWriter(writer);}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  charactersFlush();  int exName=m_expandedNameTable.getExpandedTypeID(uri,localName,DTM.ELEMENT_NODE);  int prefixIndex=(qName.length() != localName.length()) ? m_valuesOrPrefixes.stringToIndex(qName) : 0;  int elemNode=addNode(DTM.ELEMENT_NODE,exName,m_parents.peek(),m_previous,prefixIndex,true);  if (m_indexing)   indexNode(exName,elemNode);  m_parents.push(elemNode);  int startDecls=m_contextIndexes.peek();  int nDecls=m_prefixMappings.size();  String prefix;  if (!m_pastFirstElement) {    prefix="xml";    String declURL="http://www.w3.org/XML/1998/namespace";    exName=m_expandedNameTable.getExpandedTypeID(null,prefix,DTM.NAMESPACE_NODE);    m_values.addElement(declURL);    int val=m_valueIndex++;    addNode(DTM.NAMESPACE_NODE,exName,elemNode,DTM.NULL,val,false);    m_pastFirstElement=true;  }  for (int i=startDecls; i < nDecls; i+=2) {    prefix=(String)m_prefixMappings.elementAt(i);    if (prefix == null)     continue;    String declURL=(String)m_prefixMappings.elementAt(i + 1);    exName=m_expandedNameTable.getExpandedTypeID(null,prefix,DTM.NAMESPACE_NODE);    m_values.addElement(declURL);    int val=m_valueIndex++;    addNode(DTM.NAMESPACE_NODE,exName,elemNode,DTM.NULL,val,false);  }  int n=attributes.getLength();  for (int i=0; i < n; i++) {    String attrUri=attributes.getURI(i);    String attrQName=attributes.getQName(i);    String valString=attributes.getValue(i);    int nodeType;    String attrLocalName=attributes.getLocalName(i);    if ((null != attrQName) && (attrQName.equals("xmlns") || attrQName.startsWith("xmlns:"))) {      prefix=getPrefix(attrQName,attrUri);      if (declAlreadyDeclared(prefix))       continue;      nodeType=DTM.NAMESPACE_NODE;    } else {      nodeType=DTM.ATTRIBUTE_NODE;      if (m_buildIdIndex && attributes.getType(i).equalsIgnoreCase("ID"))       setIDAttribute(valString,elemNode);    }    if (null == valString)     valString="";    m_values.addElement(valString);    int val=m_valueIndex++;    if (attrLocalName.length() != attrQName.length()) {      prefixIndex=m_valuesOrPrefixes.stringToIndex(attrQName);      int dataIndex=m_data.size();      m_data.addElement(prefixIndex);      m_data.addElement(val);      val=-dataIndex;    }    exName=m_expandedNameTable.getExpandedTypeID(attrUri,attrLocalName,nodeType);    addNode(nodeType,exName,elemNode,DTM.NULL,val,false);  }  if (null != m_wsfilter) {    short wsv=m_wsfilter.getShouldStripSpace(makeNodeHandle(elemNode),this);    boolean shouldStrip=(DTMWSFilter.INHERIT == wsv) ? getShouldStripWhitespace() : (DTMWSFilter.STRIP == wsv);    pushShouldStripWhitespace(shouldStrip);  }  m_previous=DTM.NULL;  m_contextIndexes.push(m_prefixMappings.size());}  }
class C{  public static void onlyForTestsAddlocalReplicationServer(String server){  localPorts.add(HostPort.valueOf(server).getPort());}  }
class C{  public void scan(ClassNode cn){  List<ThreatResult> threats=new ArrayList<ThreatResult>();  for (  ClassHandler classHandler : classHandlers) {    ThreatResult result=classHandler.scanClass(cn);    if (result != null) {      threats.add(result);    }  }  for (  MethodNode mn : cn.methods) {    for (    MethodHandler methodHandler : methodHandlers) {      ThreatResult result=methodHandler.scanMethod(mn);      if (result != null) {        threats.add(result);      }    }  }  if (threats.size() > 0) {    threatsByClass.put(cn.name,threats);  }}  }
class C{  ChangeStatusMsg(byte[] encodedMsg) throws DataFormatException {  try {    if (encodedMsg[0] != ReplicationMsg.MSG_TYPE_CHANGE_STATUS) {      throw new DataFormatException("byte[] is not a valid msg");    }    requestedStatus=ServerStatus.valueOf(encodedMsg[1]);    newStatus=ServerStatus.valueOf(encodedMsg[2]);  } catch (  IllegalArgumentException e) {    throw new DataFormatException(e.getMessage());  }}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  StringBuffer xmlString=new StringBuffer(1000);  if (declareNS) {    xmlString.append(SAML2Constants.PROTOCOL_DECLARE_STR).append(SAML2Constants.NEWLINE);  }  xmlString.append(SAML2Constants.ID).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(responseId).append(SAML2Constants.QUOTE).append(SAML2Constants.SPACE).append(SAML2Constants.VERSION).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(version).append(SAML2Constants.QUOTE).append(SAML2Constants.SPACE).append(SAML2Constants.ISSUE_INSTANT).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(DateUtils.toUTCDateFormat(issueInstant)).append(SAML2Constants.QUOTE);  if ((destination != null) && (destination.length() > 0)) {    xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.DESTINATION).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(destination).append(SAML2Constants.QUOTE);  }  if ((consent != null) && (consent.length() > 0)) {    xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.CONSENT).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(consent).append(SAML2Constants.QUOTE);  }  if ((inResponseTo != null) && (inResponseTo.length() > 0)) {    xmlString.append(SAML2Constants.SPACE).append(SAML2Constants.INRESPONSETO).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(inResponseTo).append(SAML2Constants.QUOTE);  }  xmlString.append(SAML2Constants.END_TAG);  if (issuer != null) {    String issuerString=issuer.toXMLString(includeNSPrefix,declareNS);    xmlString.append(SAML2Constants.NEWLINE).append(issuerString);  }  if ((signatureString != null) && (signatureString.length() > 0)) {    xmlString.append(SAML2Constants.NEWLINE).append(signatureString);  }  if (extensions != null) {    xmlString.append(SAML2Constants.NEWLINE).append(extensions.toXMLString(includeNSPrefix,declareNS));  }  if (status != null) {    xmlString.append(SAML2Constants.NEWLINE).append(status.toXMLString(includeNSPrefix,declareNS));  }  return xmlString.toString();}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs)   m_test.getExpression().callVisitors(m_test,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public static Fragment2 newInstance(int sectionNumber){  Fragment2 fragment=new Fragment2();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public static DragSourceMotionListener remove(DragSourceMotionListener l,DragSourceMotionListener ol){  return (DragSourceMotionListener)removeInternal(l,ol);}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  private ByteBuffer writeHeaderToBuffer(int padding,int size) throws IOException {  compression=false;  ByteBuffer headerBuffer=ByteBuffer.allocate(TAG_HEADER_LENGTH);  headerBuffer.put(TAG_ID);  headerBuffer.put(getMajorVersion());  headerBuffer.put(getRevision());  byte flags=(byte)0;  if (unsynchronization) {    flags|=(byte)MASK_V22_UNSYNCHRONIZATION;  }  if (compression) {    flags|=(byte)MASK_V22_COMPRESSION;  }  headerBuffer.put(flags);  headerBuffer.put(ID3SyncSafeInteger.valueToBuffer(padding + size));  headerBuffer.flip();  return headerBuffer;}  }
class C{  private void selectWord(MouseEvent e){  if (selectedWordEvent != null && selectedWordEvent.getX() == e.getX() && selectedWordEvent.getY() == e.getY()) {    return;  }  Action a=null;  ActionMap map=getComponent().getActionMap();  if (map != null) {    a=map.get(DefaultEditorKit.selectWordAction);  }  if (a == null) {    if (selectWord == null) {      selectWord=new DefaultEditorKit.SelectWordAction();    }    a=selectWord;  }  a.actionPerformed(new ActionEvent(getComponent(),ActionEvent.ACTION_PERFORMED,null,e.getWhen(),e.getModifiers()));  selectedWordEvent=e;}  }
class C{  public void testSecretKeyFactory09() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    SecretKeyFactory secKF=SecretKeyFactory.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect algorithm",secKF.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",secKF.getProvider(),defaultProvider);  }}  }
class C{  public boolean isGroupExecutable(){  return is(encodedPermission,GROUP_EXECUTABLE);}  }
class C{  private void checkOut(){  logger.debug("checkOut()");  final InstanceState state;  try {    logger.debug("Getting instance state for {}",instanceId);    state=getInstanceState(instanceId);  } catch (  ResourceException e) {    logger.info("Error retrieving instance state for {}",instanceId);    return;  }  try {switch (state.getState()) {case InstanceState.STATE_RUNNING:      state.setState(InstanceState.STATE_DOWN);    updateInstanceState(instanceId,state);  logger.debug("Instance {} state updated successfully");break;case InstanceState.STATE_DOWN:break;case InstanceState.STATE_PROCESSING_DOWN:break;}} catch (ResourceException e) {if (e.getCode() != ResourceException.CONFLICT) {logger.warn("Error checking out instance",e);} else {logger.info("Failed to set this instance state to {}",state.getState());}}}  }
class C{  private void sendPacket(Packet packet) throws IOException, RejectException, ChallengeException {  Packet res=null;  RADIUSServer server=null;  while (res == null) {    server=getOnlineServer();    if (debug.messageEnabled()) {      debug.message("Using " + server + " for contact RADIUS");    }    try {      send(packet,server);      res=receive();      if (res instanceof AccessReject) {        throw new RejectException((AccessReject)res);      } else       if (res instanceof AccessChallenge) {        throw new ChallengeException((AccessChallenge)res);      }    } catch (    IOException ioe) {      if (ioe instanceof ConnectException || ioe instanceof SocketTimeoutException) {        if (debug.messageEnabled()) {          debug.message("Moving server to offline state - " + server);        }synchronized (SERVER_STATUS) {          SERVER_STATUS.put(server,Boolean.FALSE);        }synchronized (SERVER_MONITOR_LOCK) {          if (serverMonitor == null || serverMonitor.scheduledExecutionTime() == -1) {            serverMonitor=new RADIUSMonitor();            SystemTimer.getTimer().schedule(serverMonitor,new Date(((currentTimeMillis()) / 1000) * 1000));          }        }      } else {        throw ioe;      }    }  }}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s13_gitflow();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public NoClassDefFoundError(String s){  super(s);}  }
class C{  public boolean isCached(){  return true;}  }
class C{  public static boolean isAMSDKConfigured(String realm){  if (ServiceManager.isCoexistenceMode()) {    return (true);  }  realm=DNUtils.normalizeDN(realm);  Boolean answer=(Boolean)amsdkConfiguredRealms.get(realm);  if (answer == null) {    try {      SSOToken token=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());      OrganizationConfigManagerImpl ocm=OrganizationConfigManagerImpl.getInstance(token,realm);      String orgname=getAmsdkdn(token,ocm);      answer=Boolean.valueOf(orgname != null);    } catch (    SSOException ssoe) {      answer=Boolean.FALSE;    }catch (    SMSException smse) {      answer=Boolean.FALSE;    }    amsdkConfiguredRealms.put(realm,answer);  }  return (answer.booleanValue());}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  boolean state;  Attr attribute;  Attr newAttribute;  doc=(Document)load("staff",false);  element=doc.createElementNS("http://www.w3.org/DOM","address");  attribute=doc.createAttributeNS("http://www.w3.org/DOM","domestic");  newAttribute=element.setAttributeNode(attribute);  state=element.hasAttributeNS("http://www.w3.org/DOM","domestic");  assertTrue("hasDomesticAttr",state);}  }
class C{  public static ItemListener add(ItemListener a,ItemListener b){  return (ItemListener)addInternal(a,b);}  }
class C{  public InvalidNameException(){  super();}  }
class C{  OperationStore(final OperationRateFactory operationRateFactory,final Map<CTSOperation,OperationMonitor> operationRate){  this.operationRateFactory=operationRateFactory;  this.operationRate=Collections.synchronizedMap(operationRate);}  }
class C{  protected List<Modification> decodeMods(byte[] in) throws IOException, LDAPException {  List<Modification> mods=new ArrayList<>();  ASN1Reader reader=ASN1.getReader(in);  while (reader.hasNextElement()) {    mods.add(LDAPModification.decode(reader).toModification());  }  return mods;}  }
class C{  private V doPut(K kkey,V value,boolean onlyIfAbsent){  Comparable<? super K> key=comparable(kkey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n != null) {        Node<K,V> f=n.next;        if (n != b.next)         break;        Object v=n.value;        if (v == null) {          n.helpDelete(b,f);          break;        }        if (v == n || b.value == null)         break;        int c=key.compareTo(n.key);        if (c > 0) {          b=n;          n=f;          continue;        }        if (c == 0) {          if (onlyIfAbsent || n.casValue(v,value))           return (V)v; else           break;        }      }      Node<K,V> z=new Node<K,V>(kkey,value,n);      if (!b.casNext(n,z))       break;      int level=randomLevel();      if (level > 0)       insertIndex(z,level);      return null;    }  }}  }
class C{  private List<Attribute> toAttributesList(List<AttributeBuilder> builders){  List<Attribute> results=new ArrayList<>(builders.size());  for (  AttributeBuilder builder : builders) {    results.add(builder.toAttribute());  }  return results;}  }
class C{  public void onPause(){  broadcastManager.unregisterReceiver(receiver);  if (callback != null) {    Session session=Session.getActiveSession();    if (session != null) {      session.removeCallback(callback);    }  }}  }
class C{  public ServerEditSecurityViewBean(){  super("ServerEditSecurity",DEFAULT_DISPLAY_URL);}  }
class C{  @Issue("JENKINS-29711") @Test public void monomorphicList() throws Exception {  WorkflowJob p=r.jenkins.createProject(WorkflowJob.class,"monList");  p.setDefinition(new CpsFlowDefinition("monomorphListStep([[firstArg:'one', secondArg:'two'], [firstArg:'three', secondArg:'four']])",true));  WorkflowRun b=r.assertBuildStatusSuccess(p.scheduleBuild2(0));  r.assertLogContains("First arg: one, second arg: two",b);  r.assertLogContains("First arg: three, second arg: four",b);}  }
class C{  public Builder withAccessKey(String accessKey){  config.setAccessKey(accessKey);  return this;}  }
class C{  public String toString(){  ensureCache();  return textLine.toString();}  }
class C{  public TypeName(String fullName,String nickname,String parentTypeName){  this.topLevelAlias=TypeAlias.create(fullName,nickname,parentTypeName);  this.pattern=null;  this.innerTypeNames=Arrays.asList();}  }
class C{  private DirectoryServer(DirectoryEnvironmentConfig config){  environmentConfig=config;  isBootstrapped=false;  isRunning=false;  shuttingDown=false;  lockdownMode=false;  serverErrorResultCode=ResultCode.OTHER;  operatingSystem=OperatingSystem.forName(System.getProperty("os.name"));  serverContext=new DirectoryServerContext();  virtualAttributeConfigManager=new VirtualAttributeConfigManager(serverContext);  memoryQuota=new MemoryQuota();  diskSpaceMonitor=new DiskSpaceMonitor();}  }
class C{  static boolean nonZeroDroppedBits(int numberOfBits,int[] digits){  int intCount=numberOfBits >> 5;  int bitCount=numberOfBits & 31;  int i;  for (i=0; (i < intCount) && (digits[i] == 0); i++) {    ;  }  return ((i != intCount) || (digits[i] << (32 - bitCount) != 0));}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo addFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return getService().addFoo(foo);}  }
class C{  public Attributes(){  this(11);}  }
class C{  static int formatFloat(final char[] out,float val,int digits){  boolean negative=false;  if (val == 0) {    out[0]='0';    return 1;  }  if (val < 0) {    negative=true;    val=-val;  }  if (digits >= POW10.length) {    digits=POW10.length - 1;  }  val*=POW10[digits];  long lval=Math.round(val);  int index=out.length - 1;  int charCount=0;  while (lval != 0 || charCount < (digits + 1)) {    int digit=(int)(lval % 10);    lval=lval / 10;    out[index--]=(char)(digit + '0');    charCount++;    if (charCount == digits) {      out[index--]='.';      charCount++;    }  }  if (negative) {    out[index]='-';    charCount++;  }  return charCount;}  }
class C{  @Override public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  StringManager smClient=StringManager.getManager(Constants.Package,request.getLocales());  String command=request.getPathInfo();  response.setContentType("text/html; charset=" + Constants.CHARSET);  String message="";  if (command == null) {  } else   if (command.equals("/list")) {  } else   if (command.equals("/add") || command.equals("/remove") || command.equals("/start")|| command.equals("/stop")|| command.equals("/persist")) {    message=smClient.getString("hostManagerServlet.postCommand",command);  } else {    message=smClient.getString("hostManagerServlet.unknownCommand",command);  }  list(request,response,message,smClient);}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfNull makeIndirect(PdfDocument document){  return (PdfNull)super.makeIndirect(document);}  }
class C{  public static int readSwappedUnsignedShort(byte[] data,int offset){  return (((data[offset + 0] & 0xff) << 0) + ((data[offset + 1] & 0xff) << 8));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetlastchildnull.class,args);}  }
class C{  public AMSearchResults search(SSOToken token,String entryDN,String searchFilter,SearchControl searchControl,String attrNames[]) throws AMException {  try {    SortKey[] keys=searchControl.getSortKeys();    LinkedList sortKeys=new LinkedList();    for (int i=0; (keys != null) && (i < keys.length); i++) {      if (keys[i].reverse) {        sortKeys.add("true:" + keys[i].attributeName);      } else {        sortKeys.add("fals:" + keys[i].attributeName);      }    }    int[] vlvRange=searchControl.getVLVRange();    if (vlvRange == null) {      vlvRange=new int[3];    }    Set attrNamesSet=MiscUtils.stringArrayToSet(attrNames);    String tokenID=token.getTokenID().toString();    Object[] objs={tokenID,entryDN,searchFilter,sortKeys,new Integer(vlvRange[0]),new Integer(vlvRange[1]),new Integer(vlvRange[2]),searchControl.getVLVJumpTo(),new Integer(searchControl.getTimeOut()),new Integer(searchControl.getMaxResults()),new Integer(searchControl.getSearchScope()),Boolean.valueOf(searchControl.isGetAllReturnAttributesEnabled()),attrNamesSet};    Map results=(Map)client.send(client.encodeMessage("search3",objs),sessionCookies.getLBCookie(tokenID),null);    String cString=(String)results.remove(AMSR_COUNT);    Set dns=(Set)results.remove(AMSR_RESULTS);    String eString=(String)results.remove(AMSR_CODE);    int count=0, errorCode=0;    try {      count=Integer.parseInt(cString);      errorCode=Integer.parseInt(eString);    } catch (    NumberFormatException nfe) {      getDebug().error("RemoteServicesImpl.search: caught number " + "format error",nfe);    }    return (new AMSearchResults(count,dns,errorCode,results));  } catch (  AMRemoteException amrex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.search2 : entryDN" + entryDN + ";  AMRemoteException caught exception=",amrex);    }    throw convertException(amrex);  }catch (  RemoteException rex) {    getDebug().error("RemoteServicesImpl.search: caught exception=",rex);    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }catch (  Exception ex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.search2 : entryDN=" + entryDN + ";  caught exception=",ex);    }    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }}  }
class C{  public Object clone(){  try {    OutputProperties cloned=(OutputProperties)super.clone();    cloned.m_properties=(Properties)cloned.m_properties.clone();    return cloned;  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  private Stat(){}  }
class C{  private void append(StringBuffer result,String string,FieldDelegate delegate,FieldPosition[] positions,Format.Field signAttribute){  int start=result.length();  if (string.length() > 0) {    result.append(string);    for (int counter=0, max=positions.length; counter < max; counter++) {      FieldPosition fp=positions[counter];      Format.Field attribute=fp.getFieldAttribute();      if (attribute == Field.SIGN) {        attribute=signAttribute;      }      delegate.formatted(attribute,attribute,start + fp.getBeginIndex(),start + fp.getEndIndex(),result);    }  }}  }
class C{  public ImageRenderer(Image image){  super(image);}  }
class C{  @Override public boolean isShow(HttpServletRequest request) throws PortalException {  return true;}  }
class C{  public void beginMonitoringOf(final InetSocketAddress socketAddress,final int inode){  candidateSockets.beginMonitoringSocketIdentifier(socketAddress,fromInet4SocketAddressAndInode(socketAddress,inode));}  }
class C{  public void removeLayoutComponent(Component c){  componentConstraints.remove(c);}  }
class C{  private void updateDisplayedMnemonicIndex(String text,int mnemonic){  setDisplayedMnemonicIndex(SwingUtilities.findDisplayedMnemonicIndex(text,mnemonic));}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    if (serverTransaction == null) {      System.out.println("null server transaction -- ignoring the ACK!");      return;    }    Dialog dialog=serverTransaction.getDialog();    System.out.println("Dialog Created = " + dialog.getDialogId() + " Dialog State = "+ dialog.getState());    System.out.println("Waiting for INFO");  } catch (  Exception ex) {    ex.printStackTrace();    DialogTimeoutTest.fail("Shootme: Failed on process ACK",ex);  }}  }
class C{  static boolean internalPut(@NonNull String key,@NonNull Object object){  try {    OutputStreamWriter osw=new OutputStreamWriter(mCache.openStream(key));    mGson.toJson(object,osw);    osw.close();    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public void processSAMLRequest(){  FSUtils.debug.message("FSBrowserArtifactConsumerHandler.processSAMLRequest: Called");  String baseURL=FSServiceUtils.getBaseURL(request);  String framedPageURL=FSServiceUtils.getCommonLoginPageURL(hostMetaAlias,relayState,null,request,baseURL);  try {    FSSOAPService soapHelper=FSSOAPService.getInstance();    samlRequest.setID(samlRequest.getRequestID());    SOAPMessage msg=soapHelper.bind(samlRequest.toXMLString(true,true));    if (FSServiceUtils.isSigningOn()) {      Document doc=(Document)FSServiceUtils.createSOAPDOM(msg);      IDFFMetaManager metaManager=FSUtils.getIDFFMetaManager();      if (metaManager == null) {        FSUtils.debug.error("FSBrowserArtifactConsumerHandler." + "processSAMLRequest: could not create meta " + "instance");        FSUtils.forwardRequest(request,response,framedPageURL);        return;      }      String certAlias=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostConfig,IFSConstants.SIGNING_CERT_ALIAS);      if (certAlias == null) {        FSUtils.debug.error("FSBrowserArtifactConsumerHandler." + "processSAMLRequest: couldn't obtain this site's cert" + " alias.");        FSUtils.forwardRequest(request,response,framedPageURL);        return;      }      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSBrowserArtifactConsumerHandler." + "processSAMLRequest: certAlias: " + certAlias);      }      XMLSignatureManager manager=XMLSignatureManager.getInstance();      int minorVersion=samlRequest.getMinorVersion();      if (minorVersion == IFSConstants.FF_11_SAML_PROTOCOL_MINOR_VERSION) {        manager.signXML(doc,certAlias,SystemConfigurationUtil.getProperty(SAMLConstants.XMLSIG_ALGORITHM),IFSConstants.ID,samlRequest.getID(),false);      } else       if (minorVersion == IFSConstants.FF_12_SAML_PROTOCOL_MINOR_VERSION) {        manager.signXML(doc,certAlias,SystemConfigurationUtil.getProperty(SAMLConstants.XMLSIG_ALGORITHM),IFSConstants.REQUEST_ID,samlRequest.getRequestID(),false,IFSConstants.ARTIFACT_XPATH);      } else {        FSUtils.debug.message("invalid minor version.");      }      msg=FSServiceUtils.convertDOMToSOAP(doc);    }    SOAPMessage retMsg=soapHelper.doSyncCall(response,msg,idpDescriptor,false);    if (retMsg == null) {      FSUtils.debug.error("FSBrowserArtifactConsumerHandler." + "processSAMLRequest: " + FSUtils.bundle.getString("invalidSOAPResponse") + " Response SOAPMessage is null");      FSUtils.forwardRequest(request,response,framedPageURL);      return;    }    samlResponseElt=soapHelper.parseSOAPMessage(retMsg);    if ((samlResponseElt != null) && (samlResponseElt.getLocalName().trim()).equals("Fault")) {      FSUtils.debug.error("FSBrowserArtifactConsumerHandler." + "processSAMLRequest: " + FSUtils.bundle.getString("invalidSOAPResponse") + " SOAPFault occured");      String[] data={FSUtils.bundle.getString("invalidSOAPResponse")};      LogUtil.error(Level.INFO,LogUtil.INVALID_SOAP_RESPONSE,data);      FSUtils.forwardRequest(request,response,framedPageURL);      return;    } else     if ((samlResponseElt != null) && (samlResponseElt.getLocalName().trim()).equals("Response")) {      samlResponse=new FSResponse(samlResponseElt);      if (samlResponse == null) {        FSUtils.debug.error("FSBrowserArtifactConsumerHandler." + "processSAMLRequest: " + FSUtils.bundle.getString("invalidSOAPResponse") + " Could not create SAML Response");        String[] data={FSUtils.bundle.getString("invalidSOAPResponse")};        LogUtil.error(Level.INFO,LogUtil.INVALID_SOAP_RESPONSE,data);        FSUtils.forwardRequest(request,response,framedPageURL);        return;      }    } else {      FSUtils.debug.error("FSBrowserArtifactConsumerHandler." + "processSAMLRequest: " + FSUtils.bundle.getString("invalidSOAPResponse") + " SOAP response does not contain samlp:Response");      String[] data={FSUtils.bundle.getString("invalidSOAPResponse")};      LogUtil.error(Level.INFO,LogUtil.INVALID_SOAP_RESPONSE,data);      FSUtils.forwardRequest(request,response,framedPageURL);      return;    }    processSAMLResponse((FSResponse)samlResponse);    return;  } catch (  Exception e) {    StringWriter baos=new StringWriter();    e.printStackTrace(new PrintWriter(baos));    FSUtils.debug.error("FSBrowserArtifactConsumerHandler." + "processSAMLRequest: Exception occured: " + e.getMessage() + "\n"+ baos.getBuffer().toString());    try {      FSUtils.forwardRequest(request,response,framedPageURL);    } catch (    Exception ex) {      FSUtils.debug.error("FSBrowserArtifactConsumerHandler." + "processSAMLRequest: IOException occured: ",e);    }    return;  }}  }
class C{  private int constrainOffset(JTextComponent text,int offset){  Document doc=text.getDocument();  if ((offset != 0) && (offset > doc.getLength())) {    offset=doc.getLength();  }  if (offset < 0) {    offset=0;  }  return offset;}  }
class C{  public void removeParameters(){  authParams=new NameValueList();}  }
class C{  public void addPort(QName portName,String bindingId,String endpointAddress){  delegate.addPort(portName,bindingId,endpointAddress);}  }
class C{  public static void removeLocalTypes(Collection<ClassNode> nodes){  for (  ClassNode cn : nodes) {    for (    MethodNode mn : cn.methods) {      if (mn.localVariables != null) {        for (        LocalVariableNode lvn : mn.localVariables) {          lvn.signature=null;        }      }    }  }}  }
class C{  public void modifyEntityProfile(String realm,String entityName,Map map) throws AMConsoleException {  String[] param={entityName};  logEvent("ATTEMPT_MODIFY_ENTITY_DESCRIPTOR",param);  try {    IDFFMetaManager manager=getIDFFMetaManager();    EntityDescriptorElement desc=manager.getEntityDescriptor(realm,entityName);    desc.setValidUntil((String)AMAdminUtils.getValue((Set)map.get(ATTR_VALID_UNTIL)));    desc.setCacheDuration((String)AMAdminUtils.getValue((Set)map.get(ATTR_CACHE_DURATION)));    manager.setEntityDescriptor(realm,desc);    logEvent("SUCCEED_MODIFY_ENTITY_DESCRIPTOR",param);  } catch (  IDFFMetaException e) {    String[] paramsEx={entityName,getErrorString(e)};    logEvent("FEDERATION_EXCEPTION_MODIFY_ENTITY_DESCRIPTOR",paramsEx);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  public static String deobfuscate(String s){  if (s.startsWith(__OBFUSCATE))   s=s.substring(__OBFUSCATE.length());  byte[] b=new byte[s.length() / 2];  int l=0;  for (int i=0; i < s.length(); i+=4) {    String x=s.substring(i,i + 4);    int i0=Integer.parseInt(x,36);    int i1=(i0 / 256);    int i2=(i0 % 256);    b[l++]=(byte)((i1 + i2 - 254) / 2);  }  return new String(b,0,l);}  }
class C{  public XMLStreamException(String msg){  super(msg);}  }
class C{  public static boolean isValidSetter(Method method){  if (method.getName().startsWith("set") && method.getName().length() > 3 && method.getParameterTypes().length == 1 && method.getReturnType().getName().equals("void")) {    return true;  }  return false;}  }
class C{  private MyFormView(Element elem){  super(elem);}  }
class C{  private boolean ensureBleExists(){  if (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) {    Toast.makeText(this,R.string.no_ble,Toast.LENGTH_LONG).show();    return false;  }  return true;}  }
class C{  public void postSingleFile(Context context,Handler h,String fileParam,String fileName,String fileType,InputStream inputStream){  postSingleFile(context,h,null,fileParam,fileName,fileType,inputStream);}  }
class C{  private void executeSafeReadManyErrorsScenario() throws Exception {  UpdateMsg updateMsg=checkAssuredParametersOnReceivedUpdateMsg();  sleep(NO_TIMEOUT_RS_SLEEP_TIME);  List<Integer> serversInError=Arrays.asList(10,20);  session.publish(new AckMsg(updateMsg.getCSN(),false,false,true,serversInError));  updateMsg=checkAssuredParametersOnReceivedUpdateMsg();  sleep(NO_TIMEOUT_RS_SLEEP_TIME);  serversInError=Arrays.asList(10,20,30);  session.publish(new AckMsg(updateMsg.getCSN(),true,true,true,serversInError));  updateMsg=checkAssuredParametersOnReceivedUpdateMsg();  scenarioExecuted=true;}  }
class C{  private static SearchRequestProtocolOp readSearchRequest(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_SEARCH_REQUEST_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ByteString baseDN;  try {    baseDN=reader.readOctetString();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_SEARCH_REQUEST_DECODE_BASE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  SearchScope scope;  try {    int scopeValue=(int)reader.readInteger();switch (scopeValue) {case SCOPE_BASE_OBJECT:      scope=SearchScope.BASE_OBJECT;    break;case SCOPE_SINGLE_LEVEL:  scope=SearchScope.SINGLE_LEVEL;break;case SCOPE_WHOLE_SUBTREE:scope=SearchScope.WHOLE_SUBTREE;break;case SCOPE_SUBORDINATE_SUBTREE:scope=SearchScope.SUBORDINATES;break;default :LocalizableMessage message=ERR_LDAP_SEARCH_REQUEST_DECODE_INVALID_SCOPE.get(scopeValue);throw new LDAPException(PROTOCOL_ERROR,message);}} catch (LDAPException le) {throw le;}catch (Exception e) {logger.traceException(e);LocalizableMessage message=ERR_LDAP_SEARCH_REQUEST_DECODE_SCOPE.get(e);throw new LDAPException(PROTOCOL_ERROR,message,e);}DereferenceAliasesPolicy dereferencePolicy;try {int derefValue=(int)reader.readInteger();switch (derefValue) {case DEREF_NEVER:case DEREF_IN_SEARCHING:case DEREF_FINDING_BASE:case DEREF_ALWAYS:dereferencePolicy=DereferenceAliasesPolicy.valueOf(derefValue);break;default :LocalizableMessage message=ERR_LDAP_SEARCH_REQUEST_DECODE_INVALID_DEREF.get(derefValue);throw new LDAPException(PROTOCOL_ERROR,message);}} catch (LDAPException le) {throw le;}catch (Exception e) {logger.traceException(e);LocalizableMessage message=ERR_LDAP_SEARCH_REQUEST_DECODE_DEREF.get(e);throw new LDAPException(PROTOCOL_ERROR,message,e);}int sizeLimit;try {sizeLimit=(int)reader.readInteger();} catch (Exception e) {logger.traceException(e);LocalizableMessage message=ERR_LDAP_SEARCH_REQUEST_DECODE_SIZE_LIMIT.get(e);throw new LDAPException(PROTOCOL_ERROR,message,e);}int timeLimit;try {timeLimit=(int)reader.readInteger();} catch (Exception e) {logger.traceException(e);LocalizableMessage message=ERR_LDAP_SEARCH_REQUEST_DECODE_TIME_LIMIT.get(e);throw new LDAPException(PROTOCOL_ERROR,message,e);}boolean typesOnly;try {typesOnly=reader.readBoolean();} catch (Exception e) {logger.traceException(e);LocalizableMessage message=ERR_LDAP_SEARCH_REQUEST_DECODE_TYPES_ONLY.get(e);throw new LDAPException(PROTOCOL_ERROR,message,e);}RawFilter filter;try {filter=RawFilter.decode(reader);} catch (Exception e) {logger.traceException(e);LocalizableMessage message=ERR_LDAP_SEARCH_REQUEST_DECODE_FILTER.get(e);throw new LDAPException(PROTOCOL_ERROR,message,e);}LinkedHashSet<String> attributes;try {reader.readStartSequence();attributes=new LinkedHashSet<>();while (reader.hasNextElement()) {attributes.add(reader.readOctetStringAsString());}reader.readEndSequence();} catch (Exception e) {logger.traceException(e);LocalizableMessage message=ERR_LDAP_SEARCH_REQUEST_DECODE_ATTRIBUTES.get(e);throw new LDAPException(PROTOCOL_ERROR,message,e);}try {reader.readEndSequence();} catch (Exception e) {logger.traceException(e);LocalizableMessage message=ERR_LDAP_SEARCH_REQUEST_DECODE_SEQUENCE.get(e);throw new LDAPException(PROTOCOL_ERROR,message,e);}return new SearchRequestProtocolOp(baseDN,scope,dereferencePolicy,sizeLimit,timeLimit,typesOnly,filter,attributes);}  }
class C{  public static Date parseDate(String dateValue,String[] dateFormats,Date startDate) throws DateParseException {  if (dateValue == null) {    throw new IllegalArgumentException("dateValue is null");  }  if (dateFormats == null) {    dateFormats=DEFAULT_PATTERNS;  }  if (startDate == null) {    startDate=DEFAULT_TWO_DIGIT_YEAR_START;  }  if (dateValue.length() > 1 && dateValue.startsWith("'") && dateValue.endsWith("'")) {    dateValue=dateValue.substring(1,dateValue.length() - 1);  }  for (  String dateFormat : dateFormats) {    SimpleDateFormat dateParser=DateFormatHolder.formatFor(dateFormat);    dateParser.set2DigitYearStart(startDate);    try {      return dateParser.parse(dateValue);    } catch (    ParseException pe) {    }  }  throw new DateParseException("Unable to parse the date " + dateValue);}  }
class C{  public boolean hasEntitlement(String realm,Subject subject,Entitlement e,Map<String,Set<String>> envParameters) throws EntitlementException {  PrivilegeEvaluator evaluator=new PrivilegeEvaluator();  boolean result=evaluator.hasEntitlement(realm,adminSubject,subject,applicationName,e,envParameters);  return result;}  }
class C{  public SessionTimedOutException(String msg){  super(msg);}  }
class C{  public static int disableService(PrintStream out,PrintStream err){  String serverRoot=getServerRoot();  String[] cmd;  if (hasUAC()) {    cmd=new String[]{getLauncherBinaryFullPath(),LAUNCHER_OPTION,getLauncherAdministratorBinaryFullPath(),LAUNCHER_OPTION,getBinaryFullPath(),"remove",serverRoot,DEBUG_OPTION};  } else {    cmd=new String[]{getBinaryFullPath(),"remove",serverRoot,DEBUG_OPTION};  }  try {    int resultCode=Runtime.getRuntime().exec(cmd).waitFor();switch (resultCode) {case 0:      printWrappedText(out,INFO_WINDOWS_SERVICE_SUCCESSULLY_DISABLED.get());    return SERVICE_DISABLE_SUCCESS;case 1:  printWrappedText(out,INFO_WINDOWS_SERVICE_ALREADY_DISABLED.get());return SERVICE_ALREADY_DISABLED;case 2:printWrappedText(out,WARN_WINDOWS_SERVICE_MARKED_FOR_DELETION.get());return SERVICE_MARKED_FOR_DELETION;case 3:printWrappedText(err,ERR_WINDOWS_SERVICE_DISABLE_ERROR.get());return SERVICE_DISABLE_ERROR;default :printWrappedText(err,ERR_WINDOWS_SERVICE_DISABLE_ERROR.get());return SERVICE_DISABLE_ERROR;}} catch (Throwable t) {t.printStackTrace();printWrappedText(err,ERR_WINDOWS_SERVICE_DISABLE_ERROR.get());return SERVICE_DISABLE_ERROR;}}  }
class C{  public static boolean isSurrogatePair(char[] text,int idx){  return !(idx < 0 || idx > text.length - 2) && isSurrogateHigh(text[idx]) && isSurrogateLow(text[idx + 1]);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createElementNS01.class,args);}  }
class C{  public void flush() throws IOException {  writer.flush();}  }
class C{  private RunnableScheduledFuture<?> peekExpired(){  RunnableScheduledFuture<?> first=queue[0];  return (first == null || first.getDelay(NANOSECONDS) > 0) ? null : first;}  }
class C{  private void parseName(){  String name=getName();  if (name == null)   throw new IllegalArgumentException("MBeanPermission name " + "cannot be null");  if (name.equals(""))   throw new IllegalArgumentException("MBeanPermission name " + "cannot be empty");  int openingBracket=name.indexOf("[");  if (openingBracket == -1) {    objectName=ObjectName.WILDCARD;  } else {    if (!name.endsWith("]")) {      throw new IllegalArgumentException("MBeanPermission: " + "The ObjectName in the " + "target name must be "+ "included in square "+ "brackets");    } else {      try {        String on=name.substring(openingBracket + 1,name.length() - 1);        if (on.equals(""))         objectName=ObjectName.WILDCARD; else         if (on.equals("-"))         objectName=null; else         objectName=new ObjectName(on);      } catch (      MalformedObjectNameException e) {        throw new IllegalArgumentException("MBeanPermission: " + "The target name does " + "not specify a valid "+ "ObjectName",e);      }    }    name=name.substring(0,openingBracket);  }  int poundSign=name.indexOf("#");  if (poundSign == -1)   setMember("*"); else {    String memberName=name.substring(poundSign + 1);    setMember(memberName);    name=name.substring(0,poundSign);  }  setClassName(name);}  }
class C{  private static Map<String,ClassNode> readJar(JarFile jar,JarEntry en,Map<String,ClassNode> classes,List<String> ignored){  String name=en.getName();  try (InputStream jis=jar.getInputStream(en)){    if (name.endsWith(".class")) {      if (ignored != null) {        for (        String s : ignored) {          if (name.startsWith(s)) {            return classes;          }        }      }      byte[] bytes=IOUtils.toByteArray(jis);      String cafebabe=String.format("%02X%02X%02X%02X",bytes[0],bytes[1],bytes[2],bytes[3]);      if (cafebabe.toLowerCase().equals("cafebabe")) {        try {          final ClassNode cn=ASMUtils.getNode(bytes);          if (cn != null && (cn.name.equals("java/lang/Object") ? true : cn.superName != null)) {            for (            MethodNode mn : cn.methods) {              mn.owner=cn.name;            }            classes.put(cn.name,cn);          }        } catch (        Exception e) {          e.printStackTrace();        }      }    }  } catch (  Exception e) {    e.printStackTrace();  }  return classes;}  }
class C{  public SessionNotificationParser(Document xmlDoc){  document=xmlDoc;}  }
class C{  public ModifyContext(CSN csn,String entryUUID){  super(csn,entryUUID);}  }
class C{  public static boolean containsAll(final String value,final String[] needles,final boolean caseSensitive){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return Arrays.stream(needles).allMatch(null);}  }
class C{  public boolean isSecure(){  return false;}  }
class C{  public AMActivityAuditEventBuilder realm(String value){  putRealm(jsonValue,value);  return this;}  }
class C{  public boolean equal(org.omg.DynamicAny.DynAny dyn_any){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("equal",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    return $self.equal(dyn_any);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public Session(final Socket socket,final SSLSocket secureSocket) throws IOException {  super("Replication Session from " + socket.getLocalSocketAddress() + " to "+ socket.getRemoteSocketAddress());  if (logger.isTraceEnabled()) {    logger.trace("Creating Session from %s to %s in %s",socket.getLocalSocketAddress(),socket.getRemoteSocketAddress(),stackTraceToSingleLineString(new Exception()));  }  this.plainSocket=socket;  this.secureSocket=secureSocket;  this.plainInput=plainSocket.getInputStream();  this.plainOutput=plainSocket.getOutputStream();  this.input=new BufferedInputStream(secureSocket.getInputStream());  this.output=new BufferedOutputStream(secureSocket.getOutputStream());  this.readableRemoteAddress=plainSocket.getRemoteSocketAddress().toString();  this.remoteAddress=new HostPort(plainSocket.getInetAddress().getHostAddress(),plainSocket.getPort());  this.localUrl=new HostPort(plainSocket.getLocalAddress().getHostName(),plainSocket.getLocalPort());}  }
class C{  public boolean isConnected(){  return (getData() & 0x4) != 0;}  }
class C{  public void insertNode(Node n,int pos){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  insertElementAt(n,pos);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeappendchildinvalidnodetype.class,args);}  }
class C{  @Inject public OpenIDConnectProviderDiscovery(OpenIDConnectProvider openIDConnectProvider){  this.openIDConnectProvider=openIDConnectProvider;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.replaceData(-5,3,"ABC");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public void prepareConfigurationForRequest(final HttpServletRequest request){}  }
class C{  private void genManagedObjectList(TreeMap<String,AbstractManagedObjectDefinition> list){  htmlHeader(DynamicConstants.PRODUCT_NAME + " Configuration Reference - Components View");  tabMenu(MO_LIST_FILE);  viewHelp("This view provides a list of all configuration components, " + "in alphabetical order.");  newline();  StringBuffer moPointers=new StringBuffer();  String lettersPointers="";  String firstChar=".";  for (  AbstractManagedObjectDefinition mo : list.values()) {    if (!mo.getName().startsWith(firstChar)) {      firstChar=mo.getName().substring(0,1);      String letter=firstChar.toUpperCase();      moPointers.append(getAnchor(letter)).append(getHeading2(letter));      lettersPointers+=getLink(letter,"#" + letter) + " ";    }    moPointers.append("<p> ").append(getLink(mo.getUserFriendlyName().toString(),mo.getName() + ".html",MAIN_FRAME)).append("</p>\n");  }  paragraph(lettersPointers);  htmlBuff.append(moPointers);  htmlFooter();  generateFile(MO_LIST_FILE);}  }
class C{  @Parameters({"parent-realm","entity-type","entity-name","entity-required-attributes"}) @Test(groups={"api","ldap"},expectedExceptions={IdRepoException.class}) public void nullifyRequiredAttribute(String parentRealm,String idType,String entityName,String requiredAttributes) throws IdRepoException, SSOException {  Object[] params={parentRealm,idType,entityName,requiredAttributes};  entering("nullifyRequiredAttribute",params);  try {    Set<String> setRequiredAttributes=CollectionUtils.parseStringToSet(requiredAttributes);    if (!setRequiredAttributes.isEmpty()) {      Map<String,Set<String>> emptyValues=CollectionUtils.getEmptyValuesMap(setRequiredAttributes);      AMIdentity amid=getIdentity(parentRealm,IdUtils.getType(idType),entityName);      amid.setAttributes(emptyValues);      amid.store();    }  } catch (  SSOException e) {    log(Level.SEVERE,"nullifyRequiredAttribute",e.getMessage(),params);    e.printStackTrace();    throw e;  }  exiting("nullifyRequiredAttribute");}  }
class C{  public static String normalizeDN(String dn){  return newDN(dn).toString().toLowerCase();}  }
class C{  public Compiler configure(Map config) throws Exception {  if (config != null) {    List<URL> classpathToSet=new ArrayList<>();    Config.Threads threads=new Config.Threads();    Config.Code code=new Config.Code();    ErrorManager.Out out=new ErrorManager.Out();    boolean fastFail=true;    Config.Result result=new Config.Result();    if (config.containsKey("classpath")) {      final String exMsg="config.classpath should be a list of JarFile/File/String";      Object o=config.get("classpath");      if (o instanceof List) {        for (        Object e : (List)o) {          if (e instanceof String) {            addIntoClasspathList(classpathToSet,(String)e);          } else           if (e instanceof File) {            addIntoClasspathList(classpathToSet,(File)e);          } else           if (e instanceof URL) {            addIntoClasspathList(classpathToSet,(URL)e);          } else           throw new IllegalArgumentException(exMsg);        }      } else       throw new IllegalArgumentException(exMsg);    }    if (config.containsKey("threads")) {      Object o=config.get("threads");      if (o instanceof Map) {        Map t=(Map)o;        if (t.containsKey("scanner")) {          Object scanner=t.get("scanner");          if (scanner instanceof Integer && ((int)scanner) >= 1) {            threads.scanner=(int)scanner;          } else           throw new IllegalArgumentException("config.threads.scanner should be Integer and >=1");        }        if (t.containsKey("parser")) {          Object parser=t.get("parser");          if (parser instanceof Integer && ((int)parser) >= 1) {            threads.parser=(int)parser;          } else           throw new IllegalArgumentException("config.threads.parser should be Integer and >= 1");        }        if (t.containsKey("codeGen")) {          Object codeGen=t.get("codeGen");          if (codeGen instanceof Integer && ((int)codeGen) >= 1) {            threads.codeGen=(int)codeGen;          } else           throw new IllegalArgumentException("config.threads.codeGen should be Integer and >=1");        }      } else       throw new IllegalArgumentException("config.threads should be {scanner:?, parser:?, codeGen:?}");    }    if (config.containsKey("code")) {      Object o=config.get("code");      if (o instanceof Map) {        Map c=(Map)o;        if (c.containsKey("autoImport")) {          Object ai=c.get("autoImport");          final String exMsg="config.code.autoImport should be List of strings";          if (ai instanceof List) {            for (            Object autoImport : (List)ai) {              if (autoImport instanceof String) {                code.autoImport.add((String)autoImport);              } else               throw new IllegalArgumentException(exMsg);            }          } else           throw new IllegalArgumentException(exMsg);        }        if (c.containsKey("indentation")) {          Object i=c.get("indentation");          if (i instanceof Integer && ((int)i) >= 1) {            code.indentation=(int)i;          } else           throw new IllegalArgumentException("config.code.indentation should be Integer and >=1");        }        if (c.containsKey("lineBase")) {          Object l=c.get("lineBase");          if (l instanceof Integer) {            code.lineBase=(int)l;          } else           throw new IllegalArgumentException("config.code.lineBase should be Integer");        }        if (c.containsKey("columnBase")) {          Object co=c.get("columnBase");          if (co instanceof Integer) {            code.columnBase=(int)co;          } else           throw new IllegalArgumentException("config.code.columnBase should be Integer");        }      } else       throw new IllegalArgumentException("config.code should be {autoImport:?, indentation:?, lineBase:?, columnBase:?}");    }    if (config.containsKey("out")) {      Object o=config.get("out");      if (o instanceof Map) {        Map ou=(Map)o;        if (ou.containsKey("debug")) {          Object debug=ou.get("debug");          if (debug == null || debug instanceof PrintStream) {            out.debug=(PrintStream)debug;          } else           throw new IllegalArgumentException("config.out.debug should be PrintStream");        }        if (ou.containsKey("info")) {          Object info=ou.get("info");          if (info == null || info instanceof PrintStream) {            out.info=(PrintStream)info;          } else           throw new IllegalArgumentException("config.out.info should be PrintStream");        }        if (ou.containsKey("warn")) {          Object warn=ou.get("warn");          if (warn == null || warn instanceof PrintStream) {            out.warn=(PrintStream)warn;          } else           throw new IllegalArgumentException("config.out.warn should be PrintStream");        }        if (ou.containsKey("err")) {          Object error=ou.get("err");          if (error == null || error instanceof PrintStream) {            out.err=(PrintStream)error;          } else           throw new IllegalArgumentException("config.out.err should be PrintStream");        }      } else       throw new IllegalArgumentException("config.out should be {debug:?, info:?, warn:?, err:?}");    }    if (config.containsKey("fastFail")) {      Object f=config.get("fastFail");      if (f instanceof Boolean) {        fastFail=(boolean)f;      } else       throw new IllegalArgumentException("config.fastFail should be Boolean");    }    if (config.containsKey("result")) {      Object r=config.get("result");      if (r instanceof Map) {        Map re=(Map)r;        if (re.containsKey("outputDir")) {          Object o=re.get("outputDir");          if (o instanceof String) {            File f=new File((String)o);            if (!f.exists())             f.mkdirs();            if (f.isDirectory()) {              result.outputDir=f;            } else             throw new IllegalArgumentException("config.result.outputDir should be a directory");          } else           if (o instanceof File) {            if (((File)o).isDirectory()) {              result.outputDir=(File)o;            } else             throw new IllegalArgumentException("config.result.outputDir should be a directory");          } else           throw new IllegalArgumentException("config.result.outputDir should be File/String");        }        if (re.containsKey("package")) {          Object o=re.get("package");          if (o != null) {            if (o instanceof String) {              result.pkg=(String)o;            } else             throw new IllegalArgumentException("config.result.package should be String");          }        }        if (re.containsKey("main")) {          Object o=re.get("main");          if (o != null) {            if (o instanceof String) {              result.main=(String)o;            } else             throw new IllegalArgumentException("config.result.main should be String");          }        }        if (re.containsKey("with-lib")) {          Object o=re.get("with-lib");          if (o instanceof Boolean) {            result.with_lib=(boolean)o;          } else           throw new IllegalArgumentException("config.result.with-lib should be bool");        }      } else       throw new IllegalArgumentException("config.result should be {outputDir:?, statistic:?}");    }    this.config.classpath=classpathToSet;    this.config.threads=threads;    this.config.code=code;    this.config.out=out;    this.config.fastFail=fastFail;    this.config.result=result;  }  return this;}  }
class C{  public void testRemainderMathContextHALF_DOWN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=-45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=10;  int precision=75;  RoundingMode rm=RoundingMode.HALF_DOWN;  MathContext mc=new MathContext(precision,rm);  String res="1149310942946292909508821656680979993738625937.2065885780";  int resScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.remainder(bNumber,mc);  assertEquals("incorrect quotient value",res,result.toString());  assertEquals("incorrect quotient scale",resScale,result.scale());}  }
class C{  public Set searchGroups(String wildcard,Map avPairs,int level) throws AMException, SSOException {  String filter="(|" + getSearchFilter(AMObject.GROUP) + getSearchFilter(AMObject.DYNAMIC_GROUP)+ getSearchFilter(AMObject.ASSIGNABLE_DYNAMIC_GROUP)+ ")";  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),filter,wildcard,avPairs,level);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("SecurityConstraint[");  for (int i=0; i < collections.length; i++) {    if (i > 0)     sb.append(", ");    sb.append(collections[i].getName());  }  sb.append("]");  return (sb.toString());}  }
class C{  public static WSFederationEntityInfo from(final String realm,final String entityID,final String role){  return new WSFederationEntityInfo(realm,entityID,role);}  }
class C{  public static boolean isPrintingAllowed(int permissions){  return (EncryptionConstants.ALLOW_PRINTING & permissions) == EncryptionConstants.ALLOW_PRINTING;}  }
class C{  public void testInterrupt() throws Exception, SQLException {  ThreadPool threadPool=new ThreadPool(numThreads);  ResultSet userTabs;  userTabs=conn.getMetaData().getTables(null,null,null,null);  while (userTabs.next()) {    String tableName=userTabs.getString("TABLE_NAME");    if (tableName.equals(DatabaseCreator.TEST_TABLE1)) {      statement.execute(DatabaseCreator.DROP_TABLE1);    }  }  db.exec(DatabaseCreator.CREATE_TABLE3,null);  db.exec(DatabaseCreator.CREATE_TABLE1,null);  int id1=numOfRecords - 3;  threadPool.runTask(createTask1(id1,dbFile.getPath(),tracker));  int id2=numOfRecords + 3;  threadPool.runTask(createTask2Interrupt(id2,dbFile.getPath(),tracker));  threadPool.join();  List<String> errors=tracker.getErrors();  System.out.println("Last error: " + db.error_message());  if (errors.size() > 0) {    assertEquals(errors.get(0),db.error_string(Constants.SQLITE_LOCKED));    for (    String s : errors) {      Logger.global.info("INTERRUPT Error: " + s);    }  } else {    fail("Should have one exception: database should be locked.");  }  db.exec("delete from " + DatabaseCreator.TEST_TABLE1 + " where 1",null);  db.exec("delete from " + DatabaseCreator.TEST_TABLE3 + " where 1",null);}  }
class C{  @Override public synchronized void write(int b) throws IOException {  super.write(b);  this.branch.write(b);}  }
class C{  public void onToggleBroadcast(View v){  if (getBroadcast() == null)   return;  if (getBroadcast().getStatus().isIdle()) {    WZStreamingError configError=startBroadcast();    if (configError != null) {      if (mStatusView != null)       mStatusView.setErrorMessage(configError.getErrorDescription());    }  } else {    endBroadcast();  }}  }
class C{  public X509CertImpl(Certificate certificate){  this.certificate=certificate;  this.tbsCert=certificate.getTbsCertificate();  this.extensions=tbsCert.getExtensions();}  }
class C{  public boolean isLocalLogin(){  return isLocalLogin;}  }
class C{  private boolean matchesField(Format.Field attribute){  if (this.attribute != null) {    return this.attribute.equals(attribute);  }  return false;}  }
class C{  private HttpRequestTracingUtils(){}  }
class C{  public boolean add(E e){  return offer(e);}  }
class C{  protected boolean canPathsBeRemoved(TreePath[] paths){  if (rowMapper == null || selection == null || selectionMode == TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION)   return true; else {    BitSet bitSet=new BitSet();    int counter;    int pathCount=paths.length;    int anIndex;    int min=-1;    int validCount=0;    TreePath[] tempPath=new TreePath[1];    int[] rows;    lastPaths.clear();    for (counter=0; counter < pathCount; counter++) {      if (paths[counter] != null) {        lastPaths.put(paths[counter],Boolean.TRUE);      }    }    for (counter=selection.length - 1; counter >= 0; counter--) {      if (lastPaths.get(selection[counter]) == null) {        tempPath[0]=selection[counter];        rows=rowMapper.getRowsForPaths(tempPath);        if (rows != null && rows[0] != -1 && !bitSet.get(rows[0])) {          validCount++;          if (min == -1)           min=rows[0]; else           min=Math.min(min,rows[0]);          bitSet.set(rows[0]);        }      }    }    lastPaths.clear();    if (validCount > 1) {      for (counter=min + validCount - 1; counter >= min; counter--)       if (!bitSet.get(counter))       return false;    }  }  return true;}  }
class C{  public void mousePressed(MouseEvent e){  getHandler().mousePressed(e);}  }
class C{  public void makeImmutable(){  if (isMutable) {    super.makeImmutable();    if ((subject != null) && (subject.isMutable())) {      subject.makeImmutable();    }    if ((nameIDPolicy != null) && (nameIDPolicy.isMutable())) {      nameIDPolicy.makeImmutable();    }    if ((conditions != null) && (conditions.isMutable())) {      conditions.makeImmutable();    }    if ((reqAuthnContext != null) && (reqAuthnContext.isMutable())) {      reqAuthnContext.makeImmutable();    }    if ((scoping != null) && (scoping.isMutable())) {      scoping.makeImmutable();    }    isMutable=false;  }}  }
class C{  public boolean isSplash(){  return splash;}  }
class C{  public void testNegPosSameLength(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=1;  byte rBytes[]={-1,5,79,-73,-9,-76,-3,78,-35,-17,119};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public org.omg.DynamicAny.DynAny create_dyn_any_from_type_code(org.omg.CORBA.TypeCode type) throws org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCode {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("create_dyn_any_from_type_code",_opsClass);  DynAnyFactoryOperations $self=(DynAnyFactoryOperations)$so.servant;  try {    return $self.create_dyn_any_from_type_code(type);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void testFloatValueNegNotRounded(){  byte[] a={-128,1,2,3,4,5,60,23,1,-3,-5};  int aSign=-1;  float result=-1.5474726E26f;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public boolean isContextInsensitive(){  return null != m_simpleString;}  }
class C{  public static String separatorsToSystem(String path){  if (path == null) {    return null;  }  if (isSystemWindows()) {    return separatorsToWindows(path);  } else {    return separatorsToUnix(path);  }}  }
class C{  public DirUserObject(Node node){  Element elm=(Element)node;  name=elm.getAttribute(DSConfigMgr.NAME);  type=elm.getAttribute(DSConfigMgr.AUTH_TYPE);  NodeList children=node.getChildNodes();  for (int i=0; i < children.getLength(); i++) {    Node n=children.item(i);    if (n.getNodeName().equalsIgnoreCase(DSConfigMgr.AUTH_ID)) {      dn=((Text)n.getFirstChild()).getNodeValue();    } else     if (n.getNodeName().equalsIgnoreCase(DSConfigMgr.AUTH_PASSWD)) {      password=((Text)n.getFirstChild()).getNodeValue();    }  }}  }
class C{  public static GetPropSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> path,SingletonRelationDefinition<?,?> r) throws ArgumentException {  return new GetPropSubCommandHandler(parser,path.child(r),r);}  }
class C{  @Override public void startActivityFromFragment(final Fragment fragment,final Intent intent,final int requestCode,@Nullable final Bundle options){  delegate.startActivityFromFragment(fragment,intent,requestCode,options);}  }
class C{  public void deleteField(FieldKey genericKey) throws KeyNotFoundException {  if (genericKey == null) {    throw new KeyNotFoundException();  }  String mp4FieldName=tagFieldToMp4Field.get(genericKey).getFieldName();  if (genericKey == FieldKey.KEY) {    deleteField(Mp4FieldKey.KEY_OLD);    deleteField(mp4FieldName);  } else   if (genericKey == FieldKey.TRACK) {    String trackTotal=this.getFirst(FieldKey.TRACK_TOTAL);    if (trackTotal.length() == 0) {      super.deleteField(mp4FieldName);      return;    } else {      Mp4TrackField field=(Mp4TrackField)this.getFirstField(FieldKey.TRACK_TOTAL);      field.setTrackNo(0);      return;    }  } else   if (genericKey == FieldKey.TRACK_TOTAL) {    String track=this.getFirst(FieldKey.TRACK);    if (track.length() == 0) {      super.deleteField(mp4FieldName);      return;    } else {      Mp4TrackField field=(Mp4TrackField)this.getFirstField(FieldKey.TRACK);      field.setTrackTotal(0);      return;    }  } else   if (genericKey == FieldKey.DISC_NO) {    String discTotal=this.getFirst(FieldKey.DISC_TOTAL);    if (discTotal.length() == 0) {      super.deleteField(mp4FieldName);      return;    } else {      Mp4DiscNoField field=(Mp4DiscNoField)this.getFirstField(FieldKey.DISC_TOTAL);      field.setDiscNo(0);      return;    }  } else   if (genericKey == FieldKey.DISC_TOTAL) {    String discno=this.getFirst(FieldKey.DISC_NO);    if (discno.length() == 0) {      super.deleteField(mp4FieldName);      return;    } else {      Mp4DiscNoField field=(Mp4DiscNoField)this.getFirstField(FieldKey.DISC_NO);      field.setDiscTotal(0);      return;    }  } else   if (genericKey == FieldKey.GENRE) {    super.deleteField(Mp4FieldKey.GENRE.getFieldName());    super.deleteField(Mp4FieldKey.GENRE_CUSTOM.getFieldName());  } else {    super.deleteField(mp4FieldName);  }}  }
class C{  public AMSearchResults searchRoles(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(ROLE),getSearchFilter(AMObject.ROLE),wildcard,avPairs,searchControl);}  }
class C{  protected void shutdown() throws IOException {  shutdownEntry();  if (connection.isOpen())   connection.shutdown();}  }
class C{  @Override public void sendSearchEntry(SearchOperation searchOperation,SearchResultEntry searchEntry){  SearchResultEntryProtocolOp protocolOp=new SearchResultEntryProtocolOp(searchEntry,ldapVersion);  sendLDAPMessage(new LDAPMessage(searchOperation.getMessageID(),protocolOp,searchEntry.getControls()));}  }
class C{  public int viewToModel(GlyphView v,float x,float y,Shape a,Position.Bias[] biasReturn){  Rectangle2D alloc=(a instanceof Rectangle2D) ? (Rectangle2D)a : a.getBounds2D();  TextHitInfo hit=layout.hitTestChar(x - (float)alloc.getX(),0);  int pos=hit.getInsertionIndex();  if (pos == v.getEndOffset()) {    pos--;  }  biasReturn[0]=hit.isLeadingEdge() ? Position.Bias.Forward : Position.Bias.Backward;  return pos + v.getStartOffset();}  }
class C{  protected Exception(String message,Throwable cause,boolean enableSuppression,boolean writableStackTrace){  super(message,cause,enableSuppression,writableStackTrace);}  }
class C{  public void writeUint16(long n){  check(2);  buffer[write_pos++]=(byte)((n & 0x00ff00) >> 8);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public final String toString(){  StringBuffer builder=new StringBuffer(property);  builder.append('=');  builder.append(String.valueOf(value));  return builder.toString();}  }
class C{  @Override public void startActivityForResult(final Intent intent,final int requestCode){  super.startActivityForResult(intent,requestCode);}  }
class C{  public boolean containsAttrValue(String attrName,String attrValue){  if (attrSet != null) {    Set attr=(Set)attrSet.get(attrName);    if (attr != null) {      return (attr.contains(attrValue));    }  }  return (false);}  }
class C{  public void insert_short(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_short",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_short(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static String transformFileName(String from,String to,File file,char wildCard){  if (file.isDirectory()) {    return file.getName();  } else {    String fileName=file.getName();    LinkedList tokensToKeep=new LinkedList();    StringBuilder nameToReturn=new StringBuilder();    String tempFrom=from.trim();    String tempTo=to.trim();    int fileNameOffset=0;    boolean matched=true;    StringBuffer buffer=new StringBuffer();    for (int i=0; i < tempFrom.length(); i++) {      if (tempFrom.charAt(i) != wildCard) {        buffer.append(tempFrom.charAt(i));      }      if ((i == (tempFrom.length() - 1)) || (tempFrom.charAt(i) == wildCard)) {        if (buffer.length() > 0) {          int matchedIndex=fileName.indexOf(buffer.toString(),fileNameOffset);          if (matchedIndex >= fileNameOffset) {            if (matchedIndex != fileNameOffset) {              tokensToKeep.addLast(fileName.substring(fileNameOffset,matchedIndex));            } else {              if ((tempFrom.charAt(i) == wildCard) && (i == tempFrom.length() - 1)) {                if (matchedIndex + buffer.toString().length() < fileName.length()) {                  tokensToKeep.addLast(fileName.substring(matchedIndex + buffer.toString().length(),fileName.length()));                }              }            }            if (i != (tempFrom.length() - 1)) {              fileNameOffset=matchedIndex + buffer.length();            } else {              if (tempFrom.charAt(i) != wildCard) {                if (fileName.substring(matchedIndex).length() != buffer.length()) {                  matched=false;                  break;                }              }            }          } else {            matched=false;            break;          }          buffer=new StringBuffer();        }      }    }    if (matched) {      for (int i=0; i < tempTo.length(); i++) {        if (tempTo.charAt(i) != wildCard) {          nameToReturn.append(tempTo.charAt(i));        } else {          if (tokensToKeep.size() > 0) {            nameToReturn.append(tokensToKeep.removeFirst());          }        }      }      return nameToReturn.toString();    }  }  return null;}  }
class C{  public boolean isDisabled(){  return this.disabled;}  }
class C{  private void move(PlaPointFloat p_new_position){  current_position=p_new_position.round();  if (!current_position.equals(previous_position)) {    PlaVectorInt translate_vector=current_position.difference_by(previous_position);    if (grid_snap_component != null) {      translate_vector=adjust_to_placement_grid(translate_vector);    }    BrdComponents components=r_brd.brd_components;    for (    BrdComponent curr_component : component_list) {      components.move(curr_component.id_no,translate_vector);    }    clearance_violations=new LinkedList<BrdItemViolation>();    for (    BrdItem curr_item : item_list) {      curr_item.translate_by(translate_vector);      clearance_violations.addAll(curr_item.clearance_violations());    }    previous_position=current_position;    for (    IteraNetItems curr_net_items : net_items_list) {      i_brd.update_ratsnest(curr_net_items.net_no,curr_net_items.items);    }    i_brd.repaint();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference newEntRefNode;  String entRefValue;  String entRefName;  int entRefType;  doc=(Document)load("staff",true);  newEntRefNode=doc.createEntityReference("ent1");  assertNotNull("createdEntRefNotNull",newEntRefNode);  entRefValue=newEntRefNode.getNodeValue();  assertNull("value",entRefValue);  entRefName=newEntRefNode.getNodeName();  assertEquals("name","ent1",entRefName);  entRefType=(int)newEntRefNode.getNodeType();  assertEquals("type",5,entRefType);}  }
class C{  @Deprecated public ItemStack(final int type){  this(type,1);}  }
class C{  public NamedStyle(){  attributes=getEmptySet();}  }
class C{  public static UnicodeScript of(int codePoint){  if (!isValidCodePoint(codePoint))   throw new IllegalArgumentException();  int type=getType(codePoint);  if (type == UNASSIGNED)   return UNKNOWN;  int index=Arrays.binarySearch(scriptStarts,codePoint);  if (index < 0)   index=-index - 2;  return scripts[index];}  }
class C{  public char previous(){  if (offset == start) {    return DONE;  }  return string.charAt(--offset);}  }
class C{  public void push(final int value){  if (value >= -1 && value <= 5) {    mv.visitInsn(Opcodes.ICONST_0 + value);  } else   if (value >= Byte.MIN_VALUE && value <= Byte.MAX_VALUE) {    mv.visitIntInsn(Opcodes.BIPUSH,value);  } else   if (value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) {    mv.visitIntInsn(Opcodes.SIPUSH,value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public void test_GetCofactor(){  assertEquals("wrong cofactor was returned",1,ecps.getCofactor());}  }
class C{  public AnnotationMember(String name,Object val){  this.name=name;  value=val == null ? NO_VALUE : val;  if (value instanceof Throwable) {    tag=ERROR;  } else   if (value.getClass().isArray()) {    tag=ARRAY;  } else {    tag=OTHER;  }}  }
class C{  public void emit(byte[] buffer){}  }
class C{  @Override protected void handleFlush(String output){  handleOutput(output);  redirectOutPrintStream.flush();}  }
class C{  public ConnectionEntryReader(final Connection connection,final SearchRequest searchRequest,final BlockingQueue<Response> entries){  Reject.ifNull(connection);  buffer=new BufferHandler(entries);  promise=connection.searchAsync(searchRequest,buffer).thenOnResult(buffer).thenOnException(buffer);}  }
class C{  public static boolean isInternetConnected(Context context){  final ConnectivityManager conMgr=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  final NetworkInfo activeNetwork=conMgr.getActiveNetworkInfo();  if (activeNetwork != null && activeNetwork.isConnected()) {    return true;  } else {    return false;  }}  }
class C{  private <T>String normalizeName(PropertyDefinition<T> pd){  if (pd != null) {    try {      T tvalue=pd.decodeValue(name);      return pd.normalizeValue(tvalue);    } catch (    PropertyException e) {    }  }  String s=name.trim().replaceAll(" +"," ");  return toLowerCase(s);}  }
class C{  boolean isUsageArgument(final Argument a){  return usageArgument != null && usageArgument.getLongIdentifier().equals(a.getLongIdentifier());}  }
class C{  public MalformedStreamException(){  super();}  }
class C{  public SoapSTSServerCryptoStateBuilder decryptionKeyPassword(String decryptionKeyPassword){  this.decryptionKeyPassword=decryptionKeyPassword;  return this;}  }
class C{  private boolean isNextFrameValid(File seekFile,long filePointerCount,ByteBuffer bb,FileChannel fc) throws IOException {  if (MP3AudioHeader.logger.isLoggable(Level.FINEST)) {    MP3AudioHeader.logger.finer("Checking next frame" + seekFile.getName() + ":fpc:"+ filePointerCount+ "skipping to:"+ (filePointerCount + mp3FrameHeader.getFrameLength()));  }  boolean result=false;  int currentPosition=bb.position();  if (mp3FrameHeader.getFrameLength() > (FILE_BUFFER_SIZE - MIN_BUFFER_REMAINING_REQUIRED)) {    MP3AudioHeader.logger.finer("Frame size is too large to be a frame:" + mp3FrameHeader.getFrameLength());    return false;  }  if (bb.remaining() <= MIN_BUFFER_REMAINING_REQUIRED + mp3FrameHeader.getFrameLength()) {    MP3AudioHeader.logger.finer("Buffer too small, need to reload, buffer size:" + bb.remaining());    bb.clear();    fc.position(filePointerCount);    fc.read(bb,fc.position());    bb.flip();    currentPosition=0;    if (bb.limit() <= MIN_BUFFER_REMAINING_REQUIRED) {      MP3AudioHeader.logger.finer("Nearly at end of file, no header found:");      return false;    }    if (bb.limit() <= MIN_BUFFER_REMAINING_REQUIRED + mp3FrameHeader.getFrameLength()) {      MP3AudioHeader.logger.finer("Nearly at end of file, no room for next frame, no header found:");      return false;    }  }  bb.position(bb.position() + mp3FrameHeader.getFrameLength());  if (MPEGFrameHeader.isMPEGFrame(bb)) {    try {      MPEGFrameHeader.parseMPEGHeader(bb);      MP3AudioHeader.logger.finer("Check next frame confirms is an audio header ");      result=true;    } catch (    InvalidAudioFrameException ex) {      MP3AudioHeader.logger.finer("Check next frame has identified this is not an audio header");      result=false;    }  } else {    MP3AudioHeader.logger.finer("isMPEGFrame has identified this is not an audio header");  }  bb.position(currentPosition);  return result;}  }
class C{  public void unconfigureReplication(ConnectionWrapper conn,ConfiguredReplication replConf) throws ApplicationException {  try {    RootCfgClient root=conn.getRootConfiguration();    final String syncProvider="Multimaster Synchronization";    if (replConf.isSynchProviderCreated()) {      try {        root.removeSynchronizationProvider(syncProvider);      } catch (      ManagedObjectNotFoundException monfe) {      }    } else {      try {        ReplicationSynchronizationProviderCfgClient sync=(ReplicationSynchronizationProviderCfgClient)root.getSynchronizationProvider(syncProvider);        if (replConf.isSynchProviderEnabled()) {          sync.setEnabled(Boolean.FALSE);        }        if (replConf.isReplicationServerCreated()) {          sync.removeReplicationServer();        } else         if (sync.hasReplicationServer()) {          ReplicationServerCfgClient replicationServer=sync.getReplicationServer();          Set<String> replServers=replicationServer.getReplicationServer();          if (replServers != null) {            replServers.removeAll(replConf.getNewReplicationServers());            replicationServer.setReplicationServer(replServers);            replicationServer.commit();          }        }        for (        ConfiguredDomain domain : replConf.getDomainsConf()) {          if (domain.isCreated()) {            sync.removeReplicationDomain(domain.getDomainName());          } else {            try {              ReplicationDomainCfgClient d=sync.getReplicationDomain(domain.getDomainName());              Set<String> replServers=d.getReplicationServer();              if (replServers != null) {                replServers.removeAll(domain.getAddedReplicationServers());                d.setReplicationServer(replServers);                d.commit();              }            } catch (            ManagedObjectNotFoundException monfe) {            }          }        }        sync.commit();      } catch (      ManagedObjectNotFoundException monfe) {      }    }    if (replConf.isSecureReplicationEnabled()) {      CryptoManagerCfgClient crypto=root.getCryptoManager();      if (crypto.isSSLEncryption()) {        crypto.setSSLEncryption(false);        crypto.commit();      }    }  } catch (  Throwable t) {    throw new ApplicationException(ReturnCode.CONFIGURATION_ERROR,INFO_ERROR_CONFIGURING_REMOTE_GENERIC.get(conn.getHostPort(),t),t);  }}  }
class C{  public MatchQueryExp(AttributeValueExp a,StringValueExp s){  exp=a;  pattern=s.getValue();}  }
class C{  public void testUserDataHandlerNotifiedOfDeepImports(){  RecordingHandler handler=new RecordingHandler();  name.setUserData("a","apple",handler);  name.setUserData("b","banana",handler);  standard.setUserData("c","cat",handler);  waffles.setUserData("d","dog",handler);  Document newDocument=builder.newDocument();  Element importedName=(Element)newDocument.importNode(name,true);  Attr importedStandard=importedName.getAttributeNode("a:standard");  Text importedWaffles=(Text)importedName.getChildNodes().item(0);  Set<String> expected=new HashSet<String>();  expected.add(notification(NODE_IMPORTED,"a","apple",name,importedName));  expected.add(notification(NODE_IMPORTED,"b","banana",name,importedName));  expected.add(notification(NODE_IMPORTED,"c","cat",standard,importedStandard));  expected.add(notification(NODE_IMPORTED,"d","dog",waffles,importedWaffles));  assertEquals(expected,handler.calls);}  }
class C{  public static List<String> wrapStringToList(String string,int lnLength,boolean wrapLongWords,List<String> list){  final String lines[]=WordUtils.wrap(string,lnLength,null,wrapLongWords).split(SystemUtils.LINE_SEPARATOR);  list.addAll(Arrays.asList(lines));  return list;}  }
class C{  public Executor inheritEnv(boolean b){  this.inheritEnv=b;  return this;}  }
class C{  @Override public String toString(){  return currentParsed().toString();}  }
class C{  public static void handleThrowable(Throwable t){  if (t instanceof ThreadDeath) {    throw (ThreadDeath)t;  }  if (t instanceof StackOverflowError) {    return;  }  if (t instanceof VirtualMachineError) {    throw (VirtualMachineError)t;  }}  }
class C{  protected void paintDropLine(Graphics g){  JTree.DropLocation loc=tree.getDropLocation();  if (!isDropLine(loc)) {    return;  }  Color c=UIManager.getColor("Tree.dropLineColor");  if (c != null) {    g.setColor(c);    Rectangle rect=getDropLineRect(loc);    g.fillRect(rect.x,rect.y,rect.width,rect.height);  }}  }
class C{  public boolean add(E e){  return offer(e);}  }
class C{  public Certificate toASN1Structure(){  return x509Certificate;}  }
class C{  protected void stopAnimationTimer(){  if (animator != null) {    animator.stop();  }}  }
class C{  public String toString(){  return _dn.toString();}  }
class C{  protected static void waitShortForMessage(){  sleep(MESSAGES_ARRIVE_FOR / 2);}  }
class C{  public FrameBodyWCOP(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public String toString(){  return nameSpace + "|" + name;}  }
class C{  private SAXParseException makeException(String message){  if (locator != null) {    return new SAXParseException(message,locator);  } else {    return new SAXParseException(message,null,null,-1,-1);  }}  }
class C{  @Override public String toString(){  final StringBuilder s=new StringBuilder();  if (type == AttributeType.UNKNOWN) {    s.append("UNKNOWN TYPE : ").append(Utils.toHexAndPrintableChars(this.octets)).toString();  } else {    s.append(type.name());  }  final String content=this.toStringImpl();  if (!"".equals(content)) {    s.append(" : ").append(content);  }  return s.toString();}  }
class C{  @Override public final boolean equals(Object obj){  if (obj == null)   return false;  if (this == obj)   return true;  if (!(obj instanceof Scheme))   return false;  Scheme s=(Scheme)obj;  return (name.equals(s.name) && defaultPort == s.defaultPort && layered == s.layered && socketFactory.equals(s.socketFactory));}  }
class C{  public void refresh(){  redisConnection.expire(key,getMaxInactiveInterval());}  }
class C{  public DynamicUtilTreeNode(Object value,Object children){  super(value);  loadedChildren=false;  childValue=children;  if (children != null) {    if (children instanceof Vector)     setAllowsChildren(true); else     if (children instanceof Hashtable)     setAllowsChildren(true); else     if (children instanceof Object[])     setAllowsChildren(true); else     setAllowsChildren(false);  } else   setAllowsChildren(false);}  }
class C{  static String[] checkValidData(final String[] data){  String[] tempData=data;  if (tempData == null || tempData.length == 0) {    tempData=new String[]{EasyDeviceInfo.notFoundVal};  }  return tempData;}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("ModifyRequest(dn=").append(dn);  buffer.append(", mods={");  if (!modifications.isEmpty()) {    Iterator<RawModification> iterator=modifications.iterator();    iterator.next().toString(buffer);    while (iterator.hasNext()) {      buffer.append(", ");      iterator.next().toString(buffer);    }  }  buffer.append("})");}  }
class C{  public void testCase23(){  byte rBytes[]={0};  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=BigInteger.ZERO;  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(0,result.signum());}  }
class C{  public MRU(int limit){  this.limit=limit;}  }
class C{  public final double angle_approx(){  PlaDirection a_dir=new PlaDirection(this);  return a_dir.angle_approx();}  }
class C{  @Override public void error(SAXParseException exception) throws SAXException {  log.error("Parse Error at line " + exception.getLineNumber() + " column "+ exception.getColumnNumber()+ ": "+ exception.getMessage(),exception);  if (errorHandler != null) {    errorHandler.error(exception);  }}  }
class C{  Clause buildBooleanValueClause(String propTable,String operand,String placeholder){  return where(propTable + ".proptype = 'java.lang.Boolean'").and(where(propTable + ".propvalue " + operand+ " ${"+ placeholder+ "}"));}  }
class C{  public static boolean isMarkup(int c){  return c == '<' || c == '&' || c == '%';}  }
class C{  static public void assertSame(String message,Object expected,Object actual){  if (expected == actual)   return;  failNotSame(message,expected,actual);}  }
class C{  LambdaForm endEdit(){  assert (verifyFirstChange());  for (int i=Math.max(firstChange,arity); i < length; i++) {    Name name=names[i];    if (name == null)     continue;    Name newName=name.replaceNames(originalNames,names,firstChange,i);    if (newName != name) {      names[i]=newName;      if (resultName == name) {        resultName=newName;      }    }  }  assert (inTrans());  flags&=~F_TRANS;  clearDuplicatesAndNulls();  originalNames=null;  if (firstChange < arity) {    Name[] exprs=new Name[arity - firstChange];    int argp=firstChange, exprp=0;    for (int i=firstChange; i < arity; i++) {      Name name=names[i];      if (name.isParam()) {        names[argp++]=name;      } else {        exprs[exprp++]=name;      }    }    assert (exprp == (arity - argp));    System.arraycopy(exprs,0,names,argp,exprp);    arity-=exprp;  }  assert (verifyArity());  return lambdaForm();}  }
class C{  public CrlClientOffline(CRL crl){  try {    crls.add(((X509CRL)crl).getEncoded());  } catch (  Exception ex) {    throw new PdfException(ex);  }}  }
class C{  private void createThumb() throws ConnectorException {  this.thumbFile=new File(fullCurrentPath,this.fileName);  try {    if (!thumbFile.exists()) {      File orginFile=new File(configuration.getTypes().get(this.type).getPath() + this.currentFolder,this.fileName);      if (!orginFile.exists()) {        throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_FILE_NOT_FOUND);      }      try {        ImageUtils.createThumb(orginFile,thumbFile,configuration);      } catch (      Exception e) {        thumbFile.delete();        throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ACCESS_DENIED,e);      }    }  } catch (  SecurityException e) {    throw new ConnectorException(Constants.Errors.CKFINDER_CONNECTOR_ERROR_ACCESS_DENIED,e);  }}  }
class C{  void updateMnemonicBinding(AbstractButton b){  int m=b.getMnemonic();  if (m != 0) {    InputMap map=SwingUtilities.getUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW);    if (map == null) {      map=new ComponentInputMapUIResource(b);      SwingUtilities.replaceUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW,map);    }    map.clear();    map.put(KeyStroke.getKeyStroke(m,BasicLookAndFeel.getFocusAcceleratorKeyMask(),false),"pressed");    map.put(KeyStroke.getKeyStroke(m,BasicLookAndFeel.getFocusAcceleratorKeyMask(),true),"released");    map.put(KeyStroke.getKeyStroke(m,0,true),"released");  } else {    InputMap map=SwingUtilities.getUIInputMap(b,JComponent.WHEN_IN_FOCUSED_WINDOW);    if (map != null) {      map.clear();    }  }}  }
class C{  public static boolean mailServerConfigured(){  return directoryServer.mailServerPropertySets != null && !directoryServer.mailServerPropertySets.isEmpty();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node commentNode;  String commentName;  String commentValue;  doc=(Document)load("hc_staff",false);  elementList=doc.getChildNodes();  for (int indexN10040=0; indexN10040 < elementList.getLength(); indexN10040++) {    commentNode=(Node)elementList.item(indexN10040);    commentName=commentNode.getNodeName();    if (equals("#comment",commentName)) {      commentValue=commentNode.getNodeValue();      assertEquals("value"," This is comment number 1.",commentValue);    }  }  commentNode=doc.createComment(" This is a comment");  commentValue=commentNode.getNodeValue();  assertEquals("createdCommentNodeValue"," This is a comment",commentValue);}  }
class C{  private void createInitCodeLines(){  if (children.size() == 0) {    initCodeLine=SimpleInitCodeLine.create(typeRef,identifier,initValueConfig);    return;  }  for (  InitCodeNode childItem : children.values()) {    childItem.createInitCodeLines();  }switch (lineType) {case StructureInitLine:    List<FieldSetting> fieldSettings=new ArrayList<>();  for (  InitCodeNode childItem : children.values()) {    FieldSetting fieldSetting=FieldSetting.create(childItem.typeRef,childItem.identifier,childItem.initCodeLine.getIdentifier(),childItem.initCodeLine.getInitValueConfig());    fieldSettings.add(fieldSetting);  }initCodeLine=StructureInitCodeLine.create(typeRef,identifier,fieldSettings);break;case ListInitLine:List<Name> elementIdentifiers=new ArrayList<>();for (InitCodeNode childItem : children.values()) {elementIdentifiers.add(childItem.initCodeLine.getIdentifier());}initCodeLine=ListInitCodeLine.create(typeRef,identifier,elementIdentifiers);break;case MapInitLine:Map<String,Name> elementIdentifierMap=new LinkedHashMap<>();for (InitCodeNode childItem : children.values()) {elementIdentifierMap.put(childItem.key,childItem.initCodeLine.getIdentifier());}initCodeLine=MapInitCodeLine.create(typeRef.getMapKeyField().getType(),typeRef.getMapValueField().getType(),typeRef,identifier,elementIdentifierMap);break;default :throw new IllegalArgumentException("Unexpected ParsedNodeType: " + lineType);}}  }
class C{  public boolean isBridge(){  return testAllFlags(IS_METHOD | BRIDGE);}  }
class C{  public int hashCode(){  return getRules().hashCode();}  }
class C{  public DelegationException(String message,Throwable nestedException){  super(message,nestedException);}  }
class C{  public static java.util.Calendar parseDate(String lexicalXSDDate){  if (theConverter == null)   initConverter();  return theConverter.parseDate(lexicalXSDDate);}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb11.ExtensionElement createExtensionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb11.impl.ExtensionElementImpl();}  }
class C{  private void populateLabelAndFieldMaps(){  HashMap<FieldName,LabelFieldDescriptor> hm=new HashMap<>();  hm.put(FieldName.GLOBAL_ADMINISTRATOR_UID,new LabelFieldDescriptor(INFO_GLOBAL_ADMINISTRATOR_UID_LABEL.get(),INFO_GLOBAL_ADMINISTRATOR_UID_TOOLTIP.get(),LabelFieldDescriptor.FieldType.TEXTFIELD,LabelFieldDescriptor.LabelType.PRIMARY,UIFactory.UID_FIELD_SIZE));  hm.put(FieldName.GLOBAL_ADMINISTRATOR_PWD,new LabelFieldDescriptor(INFO_GLOBAL_ADMINISTRATOR_PWD_LABEL.get(),INFO_GLOBAL_ADMINISTRATOR_PWD_TOOLTIP.get(),LabelFieldDescriptor.FieldType.PASSWORD,LabelFieldDescriptor.LabelType.PRIMARY,UIFactory.PASSWORD_FIELD_SIZE));  hm.put(FieldName.GLOBAL_ADMINISTRATOR_PWD_CONFIRM,new LabelFieldDescriptor(INFO_GLOBAL_ADMINISTRATOR_PWD_CONFIRM_LABEL.get(),INFO_GLOBAL_ADMINISTRATOR_PWD_CONFIRM_TOOLTIP.get(),LabelFieldDescriptor.FieldType.PASSWORD,LabelFieldDescriptor.LabelType.PRIMARY,UIFactory.PASSWORD_FIELD_SIZE));  for (  FieldName fieldName : hm.keySet()) {    LabelFieldDescriptor desc=hm.get(fieldName);    String defaultValue=getDefaultValue(fieldName);    JTextComponent field=UIFactory.makeJTextComponent(desc,defaultValue);    JLabel label=UIFactory.makeJLabel(desc);    hmFields.put(fieldName,field);    label.setLabelFor(field);    hmLabels.put(fieldName,label);  }}  }
class C{  private void injectResponseAuthenticator(Packet response) throws RadiusProcessingException {  response.setAuthenticator(requestAuthenticator);  final byte[] onTheWireFormat=response.getOctets();  MessageDigest md5=null;  try {    md5=MessageDigest.getInstance("MD5");    md5.update(onTheWireFormat);    md5.update(clientConfig.getSecret().getBytes("UTF-8"));    final byte[] hash=md5.digest();    final ResponseAuthenticator ra=new ResponseAuthenticator(hash);    response.setAuthenticator(ra);  } catch (  final NoSuchAlgorithmException|UnsupportedEncodingException e) {    final IOException ioException=new IOException("Failed to add response authentication to RADIUS response.",e);    throw new RadiusProcessingException(RadiusProcessingExceptionNature.CATASTROPHIC,"Failed to send Radius Response.",ioException);  }}  }
class C{  private boolean hasBorrowWaiters(){  for (  Map.Entry<K,ObjectDeque<T>> entry : poolMap.entrySet()) {    final ObjectDeque<T> deque=entry.getValue();    if (deque != null) {      final LinkedBlockingDeque<PooledObject<T>> pool=deque.getIdleObjects();      if (pool.hasTakeWaiters()) {        return true;      }    }  }  return false;}  }
class C{  private Security(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS02.class,args);}  }
class C{  public synchronized void disableObjectName(ObjectName objectName) throws IllegalArgumentException {  if (objectName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(MBeanServerNotificationFilter.class.getName(),"disableObjectName",objectName);  if (selectedNames != null) {    if (selectedNames.size() != 0) {      selectedNames.remove(objectName);    }  }  if (deselectedNames != null) {    if (!(deselectedNames.contains(objectName))) {      deselectedNames.add(objectName);    }  }  RELATION_LOGGER.exiting(MBeanServerNotificationFilter.class.getName(),"disableObjectName");  return;}  }
class C{  @BeforeTest(groups={"cli-resource-bundle"}) public void suiteSetup() throws CLIException {  Map<String,Object> env=new HashMap<String,Object>();  env.put(CLIConstants.SYS_PROPERTY_COMMAND_NAME,"testclifw");  env.put(CLIConstants.SYS_PROPERTY_DEFINITION_FILES,"com.sun.identity.cli.AccessManager");  env.put(CLIConstants.SYS_PROPERTY_OUTPUT_WRITER,outputWriter);  cmdManager=new CommandManager(env);}  }
class C{  public boolean remove(URI uri,HttpCookie ck){  if (ck == null) {    throw new NullPointerException("cookie is null");  }  boolean modified=false;  lock.lock();  try {    modified=cookieJar.remove(ck);  }  finally {    lock.unlock();  }  return modified;}  }
class C{  private void extractParameters(ResultPoint[] bullsEyeCorners) throws NotFoundException {  if (!isValid(bullsEyeCorners[0]) || !isValid(bullsEyeCorners[1]) || !isValid(bullsEyeCorners[2])|| !isValid(bullsEyeCorners[3])) {    throw NotFoundException.getNotFoundInstance();  }  int length=2 * nbCenterLayers;  int[] sides={sampleLine(bullsEyeCorners[0],bullsEyeCorners[1],length),sampleLine(bullsEyeCorners[1],bullsEyeCorners[2],length),sampleLine(bullsEyeCorners[2],bullsEyeCorners[3],length),sampleLine(bullsEyeCorners[3],bullsEyeCorners[0],length)};  shift=getRotation(sides,length);  long parameterData=0;  for (int i=0; i < 4; i++) {    int side=sides[(shift + i) % 4];    if (compact) {      parameterData<<=7;      parameterData+=(side >> 1) & 0x7F;    } else {      parameterData<<=10;      parameterData+=((side >> 2) & (0x1f << 5)) + ((side >> 1) & 0x1F);    }  }  int correctedData=getCorrectedParameterData(parameterData,compact);  if (compact) {    nbLayers=(correctedData >> 6) + 1;    nbDataBlocks=(correctedData & 0x3F) + 1;  } else {    nbLayers=(correctedData >> 11) + 1;    nbDataBlocks=(correctedData & 0x7FF) + 1;  }}  }
class C{  public boolean append_without_transforming(double p_value){  Float value=(float)p_value;  return append(number_format.format(value));}  }
class C{  public PlaSegmentFloat shrink_segment(double p_offset){  double dx=point_b.v_x - point_a.v_x;  double dy=point_b.v_y - point_a.v_y;  if (dx == 0 && dy == 0)   return this;  double length=Math.sqrt(dx * dx + dy * dy);  double offset=Math.min(p_offset,length / 2);  PlaPointFloat new_a=new PlaPointFloat(point_a.v_x + (dx * offset) / length,point_a.v_y + (dy * offset) / length);  double new_length=length - offset;  PlaPointFloat new_b=new PlaPointFloat(point_a.v_x + (dx * new_length) / length,point_a.v_y + (dy * new_length) / length);  return new PlaSegmentFloat(new_a,new_b);}  }
class C{  public AtomicMoveNotSupportedException(String source,String target,String reason){  super(source,target,reason);}  }
class C{  public void testmodInverseNonInvertible(){  byte aBytes[]={-15,24,123,56,-11,-112,-34,-98,8,10,12,14,25,125,-15,28,-127};  byte mBytes[]={-12,1,0,0,0,23,44,55,66};  int aSign=1;  int mSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger modulus=new BigInteger(mSign,mBytes);  try {    aNumber.modInverse(modulus);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  protected void checkOptionsConsistence() throws XMPException {  if (options.getEncodeUTF16BE() | options.getEncodeUTF16LE()) {    unicodeSize=2;  }  if (options.getExactPacketLength()) {    if (options.getOmitPacketWrapper() | options.getIncludeThumbnailPad()) {      throw new XMPException("Inconsistent options for exact size serialize",XMPError.BADOPTIONS);    }    if ((options.getPadding() & (unicodeSize - 1)) != 0) {      throw new XMPException("Exact size must be a multiple of the Unicode element",XMPError.BADOPTIONS);    }  } else   if (options.getReadOnlyPacket()) {    if (options.getOmitPacketWrapper() | options.getIncludeThumbnailPad()) {      throw new XMPException("Inconsistent options for read-only packet",XMPError.BADOPTIONS);    }    padding=0;  } else   if (options.getOmitPacketWrapper()) {    if (options.getIncludeThumbnailPad()) {      throw new XMPException("Inconsistent options for non-packet serialize",XMPError.BADOPTIONS);    }    padding=0;  } else {    if (padding == 0) {      padding=DEFAULT_PAD * unicodeSize;    }    if (options.getIncludeThumbnailPad()) {      if (!xmp.doesPropertyExist(XMPConst.NS_XMP,"Thumbnails")) {        padding+=10000 * unicodeSize;      }    }  }}  }
class C{  public Value parseValueFromIndex(AST.Index index,SemanticScope scope) throws SyntaxException {  Value v=parseValueFromExpression(index.exp,null,scope);  assert v != null;  List<Value> list=parseArguments(index.args,scope);  assert list != null;  if (v.type() instanceof SArrayTypeDef && !list.isEmpty()) {    try {      Value result=v;      for (int ii=0; ii < list.size(); ++ii) {        Value i=cast(IntTypeDef.get(),list.get(ii),index.args.get(ii).line_col());        result=new Ins.TALoad(result,i,index.line_col(),getTypes());      }      return result;    } catch (    Throwable ignore) {    }  }  List<SMethodDef> methods=new ArrayList<>();  findMethodFromTypeWithArguments(index.line_col(),"get",list,scope.type(),v.type(),FIND_MODE_NON_STATIC,methods,true);  if (methods.isEmpty()) {    list.add(0,new Ins.GetClass(v.type(),(SClassDef)getTypeWithName("java.lang.Class",LineCol.SYNTHETIC)));    list.add(1,v);    list.add(2,NullValue.get());    return new Ins.InvokeDynamic(getInvokeDynamicBootstrapMethod(),"get",list,getTypeWithName("java.lang.Object",index.line_col()),Dynamic.INVOKE_STATIC,index.line_col());  } else {    SMethodDef methodDef=findBestMatch(list,methods,index.line_col());    list=castArgsForMethodInvoke(list,methodDef.getParameters(),LineCol.SYNTHETIC);    if (methodDef.modifiers().contains(SModifier.PRIVATE)) {      Ins.InvokeSpecial invokeSpecial=new Ins.InvokeSpecial(v,methodDef,index.line_col());      invokeSpecial.arguments().addAll(list);      if (invokeSpecial.type().equals(VoidType.get())) {        return new ValueAnotherType(getTypeWithName("lt.lang.Unit",LineCol.SYNTHETIC),invokeSpecial,invokeSpecial.line_col());      }      return invokeSpecial;    } else     if (methodDef.declaringType() instanceof SInterfaceDef) {      Ins.InvokeInterface invokeInterface=new Ins.InvokeInterface(v,methodDef,index.line_col());      invokeInterface.arguments().addAll(list);      if (invokeInterface.type().equals(VoidType.get())) {        return new ValueAnotherType(getTypeWithName("lt.lang.Unit",LineCol.SYNTHETIC),invokeInterface,invokeInterface.line_col());      }      return invokeInterface;    } else {      Ins.InvokeVirtual invokeVirtual=new Ins.InvokeVirtual(v,methodDef,index.line_col());      invokeVirtual.arguments().addAll(list);      if (invokeVirtual.type().equals(VoidType.get())) {        return new ValueAnotherType(getTypeWithName("lt.lang.Unit",LineCol.SYNTHETIC),invokeVirtual,invokeVirtual.line_col());      }      return invokeVirtual;    }  }}  }
class C{  public MemoryBackend(){  this(Schema.getDefaultSchema());}  }
class C{  public void toString(StringBuilder buffer,boolean baseOnly){  urlEncode(scheme,false,buffer);  buffer.append("://");  if (host != null) {    urlEncode(host,false,buffer);    buffer.append(":");    buffer.append(port);  }  buffer.append("/");  urlEncode(rawBaseDN,false,buffer);  if (baseOnly) {    if (!extensions.isEmpty()) {      buffer.append("????");      Iterator<String> iterator=extensions.iterator();      urlEncode(iterator.next(),true,buffer);      while (iterator.hasNext()) {        buffer.append(",");        urlEncode(iterator.next(),true,buffer);      }    }    return;  }  buffer.append("?");  if (!attributes.isEmpty()) {    Iterator<String> iterator=attributes.iterator();    urlEncode(iterator.next(),false,buffer);    while (iterator.hasNext()) {      buffer.append(",");      urlEncode(iterator.next(),false,buffer);    }  }  buffer.append("?");switch (scope.asEnum()) {case BASE_OBJECT:    buffer.append("base");  break;case SINGLE_LEVEL:buffer.append("one");break;case WHOLE_SUBTREE:buffer.append("sub");break;case SUBORDINATES:buffer.append("subordinate");break;}buffer.append("?");urlEncode(rawFilter,false,buffer);if (!extensions.isEmpty()) {buffer.append("?");Iterator<String> iterator=extensions.iterator();urlEncode(iterator.next(),true,buffer);while (iterator.hasNext()) {buffer.append(",");urlEncode(iterator.next(),true,buffer);}}}  }
class C{  @Override public void onLayoutChildren(RecyclerView.Recycler recycler,RecyclerView.State state){  if (state.getItemCount() == 0) {    detachAndScrapAttachedViews(recycler);    return;  }  if (state.isPreLayout()) {    if (getChildCount() == 0)     return;    final int childCount=getChildCount();    for (int i=0; i < childCount; i++) {      View child=getChildAt(i);      RecyclerView.LayoutParams lp=(RecyclerView.LayoutParams)child.getLayoutParams();      if (lp.isItemRemoved()) {        removedTopAndBoundPositionCount++;        if (firstChangedPosition == -1 || firstAttachedItemPosition + i < firstChangedPosition) {          firstChangedPosition=firstAttachedItemPosition + i;        }      }    }    if (removedTopAndBoundPositionCount != 0) {      layoutAttachedAndAppearingViews(recycler,state);    }    isBeforePreLayout=false;    return;  }  if (getChildCount() == 0) {    initializeLayoutParameters();    fillGrid(recycler,state,true);    return;  }  if (isNotifyDataSetChanged) {    detachAndScrapAttachedViews(recycler);    initializeLayoutParameters();    fillGrid(recycler,state,true);    isNotifyDataSetChanged=false;    return;  }  if (firstChangedPosition == -1) {    mCurrentPosition=firstAttachedItemPosition;    lastAttachedItemPosition=firstAttachedItemPosition;    topBorder=getPaddingTop();    bottomBorder=getHeight() - getPaddingBottom();    spanBottom=Arrays.copyOf(spanTop,mSpanCount);    updateSpanBottomParameters();    detachAndScrapAttachedViews(recycler);    fillGrid(recycler,state,true);    isBeforePreLayout=true;    return;  }  for (int i=firstChangedPosition; i < state.getItemCount(); i++) {    if (itemLayoutWidthCache.get(i,0) != 0) {      itemLayoutWidthCache.delete(i);      itemLayoutHeightCache.delete(i);      itemOccupiedStartSpan.delete(i);    }    if (fakeItemLayoutWidthCache.get(i,0) != 0) {      itemLayoutWidthCache.put(i,fakeItemLayoutWidthCache.get(i));      itemLayoutHeightCache.put(i,fakeItemLayoutHeightCache.get(i));      itemOccupiedStartSpan.put(i,fakeItemOccupiedStartSpan.get(i));    }  }  fakeItemLayoutWidthCache.clear();  fakeItemLayoutHeightCache.clear();  fakeItemOccupiedStartSpan.clear();  detachAndScrapAttachedViews(recycler);  if (firstChangedPosition < firstAttachedItemPosition) {    mCurrentPosition=firstAttachedItemPosition;    lastAttachedItemPosition=firstAttachedItemPosition;    topBorder=getPaddingTop();    bottomBorder=getHeight() - getPaddingBottom();    spanBottom=Arrays.copyOf(spanTop,mSpanCount);    updateSpanBottomParameters();    fillGrid(recycler,state,true);    if (spanBottomMax < bottomBorder) {      scrollBy(spanBottomMax - bottomBorder,recycler,state);    }    layoutDisappearingViews(recycler,state);  } else {    mCurrentPosition=firstAttachedItemPosition;    lastAttachedItemPosition=firstAttachedItemPosition;    topBorder=getPaddingTop();    bottomBorder=getHeight() - getPaddingBottom();    spanBottom=Arrays.copyOf(spanTop,mSpanCount);    updateSpanBottomParameters();    fillGrid(recycler,state,true);    if (spanBottomMax - bottomBorder < 0) {      scrollBy(spanBottomMax - bottomBorder,recycler,state);    }  }  isBeforePreLayout=true;  firstChangedPosition=-1;  removedTopAndBoundPositionCount=0;  disappearingViewCache.clear();}  }
class C{  public int indexOf(Object obj){  return this.hlist.indexOf(obj);}  }
class C{  private void returnCipherState(CipherState state){  if (state != null) {    cipherPool.add(state);  }}  }
class C{  public RoutedRequest(final RequestWrapper req,final HttpRoute route){  super();  this.request=req;  this.route=route;}  }
class C{  public AppLauncher launchOnLockedRetries(int launchOnLockedRetries){  this.launchOnLockedRetries=launchOnLockedRetries;  return this;}  }
class C{  private static NSObject parseObject(Node n) throws ParseException, IOException {  String type=n.getNodeName();  if (type.equals("dict")) {    NSDictionary dict=new NSDictionary();    List<Node> children=filterElementNodes(n.getChildNodes());    for (int i=0; i < children.size(); i+=2) {      Node key=children.get(i);      Node val=children.get(i + 1);      String keyString=getNodeTextContents(key);      dict.put(keyString,parseObject(val));    }    return dict;  } else   if (type.equals("array")) {    List<Node> children=filterElementNodes(n.getChildNodes());    NSArray array=new NSArray(children.size());    for (int i=0; i < children.size(); i++) {      array.setValue(i,parseObject(children.get(i)));    }    return array;  } else   if (type.equals("true")) {    return new NSNumber(true);  } else   if (type.equals("false")) {    return new NSNumber(false);  } else   if (type.equals("integer")) {    return new NSNumber(getNodeTextContents(n));  } else   if (type.equals("real")) {    return new NSNumber(getNodeTextContents(n));  } else   if (type.equals("string")) {    return new NSString(getNodeTextContents(n));  } else   if (type.equals("data")) {    return new NSData(getNodeTextContents(n));  } else   if (type.equals("date")) {    return new NSDate(getNodeTextContents(n));  }  return null;}  }
class C{  Item newConstItem(final Object cst){  if (cst instanceof Integer) {    int val=((Integer)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Byte) {    int val=((Byte)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Character) {    int val=((Character)cst).charValue();    return newInteger(val);  } else   if (cst instanceof Short) {    int val=((Short)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Boolean) {    int val=((Boolean)cst).booleanValue() ? 1 : 0;    return newInteger(val);  } else   if (cst instanceof Float) {    float val=((Float)cst).floatValue();    return newFloat(val);  } else   if (cst instanceof Long) {    long val=((Long)cst).longValue();    return newLong(val);  } else   if (cst instanceof Double) {    double val=((Double)cst).doubleValue();    return newDouble(val);  } else   if (cst instanceof String) {    return newString((String)cst);  } else   if (cst instanceof Type) {    Type t=(Type)cst;    int s=t.getSort();    if (s == Type.OBJECT) {      return newClassItem(t.getInternalName());    } else     if (s == Type.METHOD) {      return newMethodTypeItem(t.getDescriptor());    } else {      return newClassItem(t.getDescriptor());    }  } else   if (cst instanceof Handle) {    Handle h=(Handle)cst;    return newHandleItem(h.tag,h.owner,h.name,h.desc,h.itf);  } else {    throw new IllegalArgumentException("value " + cst);  }}  }
class C{  public void testFloatValuePositiveInfinity2(){  String a="2746723894572364578265426346273456972283746872364768676747462342342342342342342342323423423423423423426767456345745293762384756238475634563456845634568934568347586346578648576478568456457634875673845678456786587345873645767456834756745763457863485768475678465783456702897830296720476846578634576384567845678346573465786457863";  float aNumber=new BigInteger(a).floatValue();  assertTrue(aNumber == Float.POSITIVE_INFINITY);}  }
class C{  private void bootstrapServer() throws InitializationException {synchronized (directoryServer) {    if (isRunning) {      LocalizableMessage message=ERR_CANNOT_BOOTSTRAP_WHILE_RUNNING.get();      throw new InitializationException(message);    }    isBootstrapped=false;    shuttingDown=false;  }  shutdownHook=new DirectoryServerShutdownHook();  Runtime.getRuntime().addShutdownHook(shutdownHook);  initializeJMX();  logger.debug(INFO_DIRECTORY_BOOTSTRAPPING);  bootstrapClient();  establishedConnections=new LinkedHashSet<>(1000);  currentConnections=0;  maxConnections=0;  totalConnections=0;  pluginConfigManager=new PluginConfigManager(serverContext);synchronized (directoryServer) {    isBootstrapped=true;  }}  }
class C{  public static void message(String msg,Throwable t){  debugInst.debug(IDebug.MESSAGE,msg,t);}  }
class C{  @Override public Rectangle placeBarcode(PdfCanvas canvas,Color barColor,Color textColor){  String fullCode=code;  float fontX=0;  String bCode=code;  if (extended) {    bCode=getCode39Ex(code);  }  if (font != null) {    if (generateChecksum && checksumText) {      fullCode+=getChecksum(bCode);    }    if (startStopText) {      fullCode="*" + fullCode + "*";    }    fontX=font.getWidth(fullCode=altText != null ? altText : fullCode,size);  }  if (generateChecksum) {    bCode+=getChecksum(bCode);  }  int len=bCode.length() + 2;  float fullWidth=len * (6 * x + 3 * x * n) + (len - 1) * x;  float barStartX=0;  float textStartX=0;switch (textAlignment) {case ALIGN_LEFT:    break;case ALIGN_RIGHT:  if (fontX > fullWidth) {    barStartX=fontX - fullWidth;  } else {    textStartX=fullWidth - fontX;  }break;default :if (fontX > fullWidth) {barStartX=(fontX - fullWidth) / 2;} else {textStartX=(fullWidth - fontX) / 2;}break;}float barStartY=0;float textStartY=0;if (font != null) {if (baseline <= 0) {textStartY=barHeight - baseline;} else {textStartY=-getDescender();barStartY=textStartY + baseline;}}byte[] bars=getBarsCode39(bCode);boolean print=true;if (barColor != null) {canvas.setFillColor(barColor);}for (int k=0; k < bars.length; ++k) {float w=(bars[k] == 0 ? x : x * n);if (print) {canvas.rectangle(barStartX,barStartY,w - inkSpreading,barHeight);}print=!print;barStartX+=w;}canvas.fill();if (font != null) {if (textColor != null) {canvas.setFillColor(textColor);}canvas.beginText().setFontAndSize(font,size).setTextMatrix(textStartX,textStartY).showText(fullCode).endText();}return getBarcodeSize();}  }
class C{  public FramedIPNetmaskAttribute(byte[] octets){  super(octets);  mask[0]=octets[2];  mask[1]=octets[3];  mask[2]=octets[4];  mask[3]=octets[5];}  }
class C{  public CoreTokenException(int errorCode){  this.errorCode=errorCode;  this.message=getLocalizedMessage(Locale.getDefault());}  }
class C{  public static String generateTempFileAtExternalStorage(String folder,String prefix,String ext){  File file=generateFileOnExternalStorage(folder,prefix,ext);  if (file == null)   return null;  return Uri.fromFile(file).getPath();}  }
class C{  private SchemaUtils(){}  }
class C{  public static String toStudlyCase(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  String[] words=collapseWhitespace(value.trim()).split("\\s*(_|-|\\s)\\s*");  return Arrays.stream(words).filter(null).map(null).collect(joining());}  }
class C{  public boolean removeElement(Node s){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  if (null == m_map)   return false;  for (int i=0; i < m_firstFree; i++) {    Node node=m_map[i];    if ((null != node) && node.equals(s)) {      if (i < m_firstFree - 1)       System.arraycopy(m_map,i + 1,m_map,i,m_firstFree - i - 1);      m_firstFree--;      m_map[m_firstFree]=null;      return true;    }  }  return false;}  }
class C{  protected void clearAllPolicies(SSOTokenID tokenID){  boolean removed=false;  String key=tokenID.toString();synchronized (mapTokenIDs) {    removed=(mapTokenIDs.remove(key) != null);  }  if (removed && AMModelBase.debug.messageEnabled()) {    AMModelBase.debug.warning("PolicyCache.clearAllPolicies," + key);  }}  }
class C{  public static void registerExportTaskListener(ExportTaskListener listener){  directoryServer.exportTaskListeners.addIfAbsent(listener);}  }
class C{  public boolean hasParm(String pname){  return parameters.hasNameValue(pname);}  }
class C{  private void fillStackTrace(StringBuffer buffer,StackTraceElement[] elements){  for (int index=0; index < elements.length; index++) {    buffer.append(elements[index]);    buffer.append("\n");  }}  }
class C{  public boolean isMapLoadFinish(){  return isMapLoadFinish;}  }
class C{  public NSObject objectAtIndex(int i){  return array[i];}  }
class C{  public InternalClientConnection(AuthenticationInfo authInfo){  super();  if (authInfo == null) {    this.authenticationInfo=new AuthenticationInfo();    updatePrivileges(null,false);  } else {    this.authenticationInfo=authInfo;    updatePrivileges(authInfo.getAuthorizationEntry(),authInfo.isRoot());  }  super.setSizeLimit(0);  super.setTimeLimit(0);  super.setIdleTimeLimit(0);  super.setLookthroughLimit(0);  connectionID=nextConnectionID.getAndDecrement();}  }
class C{  ArrayList parse(Reader isreader) throws Exception {  ArrayList result=new ArrayList();  StringBuffer buff=new StringBuffer();  int boundCount=0;  boolean inComment=false;  boolean inCompoundToken=false;  boolean inQuotes=false;  int length;  char[] cbuf=new char[1];  BufferedReader in=new BufferedReader(isreader);  while ((length=in.read(cbuf,0,1)) != -1) {    char ch=cbuf[0];    if (ch == '"') {      if ((buff.length() != 0) && buff.toString().endsWith("\\")) {        buff.append(ch);        continue;      } else {        inQuotes=!inQuotes;        buff.append(ch);        continue;      }    }    if (inQuotes) {      buff.append(ch);      continue;    }    if (ch == '<') {      if (inComment) {        buff.append(ch);      } else       if (boundCount == 0) {        if (buff.length() > 0) {          result.add(getXMLTokenFactory().getToken(buff.toString()));          buff.delete(0,buff.length());        }        buff.append(ch);        boundCount++;      } else       if (boundCount > 0) {        buff.append(ch);        boundCount++;      } else {        throw new Exception("Invalid boundCount: " + boundCount);      }    } else     if (ch == '>') {      if (buff.length() >= 1) {        if (!inComment) {          buff.append(ch);          boundCount--;          if (boundCount == 0) {            result.add(getXMLTokenFactory().getToken(buff.toString()));            buff.delete(0,buff.length());          }          continue;        }        if (buff.length() > 1 && buff.substring(buff.length() - 2,buff.length()).equals("--")) {          buff.append(ch);          if (inComment) {            boundCount--;            inComment=false;          }          if (boundCount == 0) {            result.add(getXMLTokenFactory().getToken(buff.toString()));            buff.delete(0,buff.length());          }        } else {          buff.append(ch);        }      } else {        throw new Exception("Char > in begining of token");      }    } else     if (ch == '-') {      if (buff.length() > 2 && buff.toString().startsWith("<!-")) {        if (!inComment) {          inComment=true;        }      }      buff.append(ch);    } else {      buff.append(ch);    }  }  if (inQuotes) {    throw new Exception("unbalanced quote encountered");  }  if (boundCount > 0) {    throw new Exception("unbalanced token encountered: boundCount = " + boundCount);  } else   if (boundCount < 0) {    throw new Exception(" invalid boundCount: " + boundCount);  }  if (buff.length() > 0) {    result.add(getXMLTokenFactory().getToken(buff.toString()));  }  in.close();  return result;}  }
class C{  public JSeparator(int orientation){  checkOrientation(orientation);  this.orientation=orientation;  setFocusable(false);  updateUI();}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  address.encode(retval);  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  return retval;}  }
class C{  public DTMDefaultBaseIterators(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing,int blocksize,boolean usePrevsib,boolean newNameTable){  super(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,blocksize,usePrevsib,newNameTable);}  }
class C{  private static void usage(){  log.info("Usage:  java org.apache.catalina.startup.Tool [<options>] <class> [<arguments>]");}  }
class C{  public static String generateID(){  if (random == null) {    return null;  }  byte bytes[]=new byte[SAML2Constants.ID_LENGTH];  random.nextBytes(bytes);  return (SAML2ID_PREFIX + byteArrayToHexString(bytes));}  }
class C{  static int mulAdd(int[] out,int[] in,int offset,int len,int k){  long kLong=k & LONG_MASK;  long carry=0;  offset=out.length - offset - 1;  for (int j=len - 1; j >= 0; j--) {    long product=(in[j] & LONG_MASK) * kLong + (out[offset] & LONG_MASK) + carry;    out[offset--]=(int)product;    carry=product >>> 32;  }  return (int)carry;}  }
class C{  public static void initiateECPRequest(HttpServletRequest request,HttpServletResponse response) throws SAML2Exception, IOException {  if (!isFromECP(request)) {    SAML2Utils.debug.error("SPSSOFederate.initiateECPRequest: " + "invalid HTTP request from ECP.");    SAMLUtils.sendError(request,response,HttpServletResponse.SC_BAD_REQUEST,"invalidHttpRequestFromECP",SAML2Utils.bundle.getString("invalidHttpRequestFromECP"));    return;  }  String metaAlias=request.getParameter("metaAlias");  Map paramsMap=SAML2Utils.getParamsMap(request);  String spEntityID=sm.getEntityByMetaAlias(metaAlias);  String realm=getRealm(SAML2MetaUtils.getRealmByMetaAlias(metaAlias));  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message("SPSSOFederate.initiateECPRequest: " + "spEntityID is " + spEntityID + ", realm is "+ realm);  }  try {    if (sm == null) {      throw new SAML2Exception(SAML2Utils.bundle.getString("errorMetaManager"));    }    SPSSOConfigElement spEntityCfg=sm.getSPSSOConfig(realm,spEntityID);    Map spConfigAttrsMap=null;    if (spEntityCfg != null) {      spConfigAttrsMap=SAML2MetaUtils.getAttributes(spEntityCfg);    }    SPSSODescriptorElement spsso=sm.getSPSSODescriptor(realm,spEntityID);    if (spsso == null) {      String[] data={spEntityID};      LogUtil.error(Level.INFO,LogUtil.SP_METADATA_ERROR,data,null);      throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));    }    String[] data={spEntityID,realm};    LogUtil.access(Level.INFO,LogUtil.RECEIVED_HTTP_REQUEST_ECP,data,null);    List extensionsList=getExtensionsList(spEntityID,realm);    AuthnRequest authnRequest=createAuthnRequest(realm,spEntityID,paramsMap,spConfigAttrsMap,extensionsList,spsso,null,null,true);    SAML2ServiceProviderAdapter spAdapter=SAML2Utils.getSPAdapterClass(spEntityID,realm);    if (spAdapter != null) {      spAdapter.preSingleSignOnRequest(spEntityID,realm,null,request,response,authnRequest);    }    String alias=SAML2Utils.getSigningCertAlias(realm,spEntityID,SAML2Constants.SP_ROLE);    PrivateKey signingKey=KeyUtil.getKeyProviderInstance().getPrivateKey(alias);    if (signingKey != null) {      authnRequest.sign(signingKey,null);    } else {      SAML2Utils.debug.error("SPSSOFederate.initiateECPRequest: " + "Unable to find signing key.");      throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));    }    ECPFactory ecpFactory=ECPFactory.getInstance();    String relayState=getParameter(paramsMap,SAML2Constants.RELAY_STATE);    String ecpRelayStateXmlStr="";    if (relayState != null && relayState.length() > 0) {      String relayStateID=getRelayStateID(relayState,authnRequest.getID());      ECPRelayState ecpRelayState=ecpFactory.createECPRelayState();      ecpRelayState.setValue(relayStateID);      ecpRelayState.setMustUnderstand(Boolean.TRUE);      ecpRelayState.setActor(SAML2Constants.SOAP_ACTOR_NEXT);      ecpRelayStateXmlStr=ecpRelayState.toXMLString(true,true);    }    ECPRequest ecpRequest=ecpFactory.createECPRequest();    ecpRequest.setIssuer(createIssuer(spEntityID));    ecpRequest.setMustUnderstand(Boolean.TRUE);    ecpRequest.setActor(SAML2Constants.SOAP_ACTOR_NEXT);    ecpRequest.setIsPassive(authnRequest.isPassive());    SAML2IDPFinder ecpIDPFinder=SAML2Utils.getECPIDPFinder(realm,spEntityID);    if (ecpIDPFinder != null) {      List idps=ecpIDPFinder.getPreferredIDP(authnRequest,spEntityID,realm,request,response);      if ((idps != null) && (!idps.isEmpty())) {        SAML2MetaManager saml2MetaManager=SAML2Utils.getSAML2MetaManager();        List idpEntries=null;        for (Iterator iter=idps.iterator(); iter.hasNext(); ) {          String idpEntityID=(String)iter.next();          IDPSSODescriptorElement idpDesc=saml2MetaManager.getIDPSSODescriptor(realm,idpEntityID);          if (idpDesc != null) {            IDPEntry idpEntry=ProtocolFactory.getInstance().createIDPEntry();            idpEntry.setProviderID(idpEntityID);            String description=SAML2Utils.getAttributeValueFromSSOConfig(realm,idpEntityID,SAML2Constants.IDP_ROLE,SAML2Constants.ENTITY_DESCRIPTION);            idpEntry.setName(description);            List<SingleSignOnServiceElement> ssoServiceList=idpDesc.getSingleSignOnService();            SingleSignOnServiceElement endPoint=getSingleSignOnServiceEndpoint(ssoServiceList,SAML2Constants.SOAP);            if (endPoint == null || StringUtils.isEmpty(endPoint.getLocation())) {              throw new SAML2Exception(SAML2Utils.bundle.getString("ssoServiceNotfound"));            }            String ssoURL=endPoint.getLocation();            SAML2Utils.debug.message("SPSSOFederate.initiateECPRequest URL : {}",ssoURL);            idpEntry.setLoc(ssoURL);            if (idpEntries == null) {              idpEntries=new ArrayList();            }            idpEntries.add(idpEntry);          }        }        if (idpEntries != null) {          IDPList idpList=ProtocolFactory.getInstance().createIDPList();          idpList.setIDPEntries(idpEntries);          ecpRequest.setIDPList(idpList);          Map attrs=SAML2MetaUtils.getAttributes(spEntityCfg);          List values=(List)attrs.get(SAML2Constants.ECP_REQUEST_IDP_LIST_GET_COMPLETE);          if ((values != null) && (!values.isEmpty())) {            GetComplete getComplete=ProtocolFactory.getInstance().createGetComplete();            getComplete.setValue((String)values.get(0));            idpList.setGetComplete(getComplete);          }        }      }    }    String paosRequestXmlStr="";    try {      PAOSRequest paosRequest=new PAOSRequest(authnRequest.getAssertionConsumerServiceURL(),SAML2Constants.PAOS_ECP_SERVICE,null,Boolean.TRUE,SAML2Constants.SOAP_ACTOR_NEXT);      paosRequestXmlStr=paosRequest.toXMLString(true,true);    } catch (    PAOSException paosex) {      SAML2Utils.debug.error("SPSSOFederate.initiateECPRequest:",paosex);      throw new SAML2Exception(paosex.getMessage());    }    String header=paosRequestXmlStr + ecpRequest.toXMLString(true,true) + ecpRelayStateXmlStr;    String body=authnRequest.toXMLString(true,true);    try {      SOAPMessage reply=SOAPCommunicator.getInstance().createSOAPMessage(header,body,false);      String[] data2={spEntityID,realm,""};      if (LogUtil.isAccessLoggable(Level.FINE)) {        data2[2]=SOAPCommunicator.getInstance().soapMessageToString(reply);      }      LogUtil.access(Level.INFO,LogUtil.SEND_ECP_PAOS_REQUEST,data2,null);      if (reply.saveRequired()) {        reply.saveChanges();      }      response.setStatus(HttpServletResponse.SC_OK);      SAML2Utils.putHeaders(reply.getMimeHeaders(),response);      response.setContentType(PAOSConstants.PAOS_MIME_TYPE);      OutputStream os=response.getOutputStream();      reply.writeTo(os);      os.flush();    } catch (    SOAPException soapex) {      SAML2Utils.debug.error("SPSSOFederate.initiateECPRequest",soapex);      String[] data3={spEntityID,realm};      LogUtil.error(Level.INFO,LogUtil.SEND_ECP_PAOS_REQUEST_FAILED,data3,null);      SAMLUtils.sendError(request,response,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"soapError",soapex.getMessage());      return;    }    AuthnRequestInfo reqInfo=new AuthnRequestInfo(request,response,realm,spEntityID,null,authnRequest,relayState,paramsMap);synchronized (SPCache.requestHash) {      SPCache.requestHash.put(authnRequest.getID(),reqInfo);    }    if (SAML2FailoverUtils.isSAML2FailoverEnabled()) {      long sessionExpireTime=currentTimeMillis() / 1000 + SPCache.interval;      String key=authnRequest.getID();      try {        SAML2FailoverUtils.saveSAML2TokenWithoutSecondaryKey(key,new AuthnRequestInfoCopy(reqInfo),sessionExpireTime);        if (SAML2Utils.debug.messageEnabled()) {          SAML2Utils.debug.message("SPSSOFederate.initiateECPRequest:" + " SAVE AuthnRequestInfoCopy for requestID " + key);        }      } catch (      SAML2TokenRepositoryException e) {        SAML2Utils.debug.error("SPSSOFederate.initiateECPRequest: There was a problem saving the " + "AuthnRequestInfoCopy in the SAML2 Token Repository for requestID " + key,e);      }    }  } catch (  SAML2MetaException sme) {    SAML2Utils.debug.error("SPSSOFederate:Error retrieving metadata",sme);    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }}  }
class C{  EntryContainer openEntryContainer(DN baseDN,WriteableTransaction txn,AccessMode accessMode) throws StorageRuntimeException, ConfigException {  EntryContainer ec=new EntryContainer(baseDN,backendId,config,storage,this,serverContext);  ec.open(txn,accessMode);  return ec;}  }
class C{  public static String removeReplyURL(String wctx){  String wreply=null;synchronized (wctxMap) {    wreply=(String)wctxMap.remove(wctx);  }  return wreply;}  }
class C{  public void pushContext(){  Context2 parentContext=currentContext;  currentContext=parentContext.getChild();  if (currentContext == null) {    currentContext=new Context2(parentContext);  } else {    currentContext.setParent(parentContext);  }}  }
class C{  protected void dispose(){}  }
class C{  public void testSharedNameSimple() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream();  SmileGenerator gen=smileGenerator(out,false);  gen.writeStartArray();  gen.writeStartObject();  gen.writeNumberField("abc",1);  gen.writeEndObject();  gen.writeStartObject();  gen.writeNumberField("abc",2);  gen.writeEndObject();  gen.writeEndArray();  gen.close();  byte[] result=out.toByteArray();  assertEquals(13,result.length);}  }
class C{  public static BigInteger CRT(List<BigInteger> congs,List<BigInteger> moduli){  BigInteger[] cs=ArrayConverter.convertListToArray(congs);  BigInteger[] ms=ArrayConverter.convertListToArray(moduli);  return CRT(cs,ms);}  }
class C{  public void putNameAndTypeDef(STypeDef type,LineCol lineCol) throws SyntaxException {  if (types.containsKey(type.fullName())) {    err.SyntaxException("duplicate type names " + type.fullName(),lineCol);  } else {    types.put(type.fullName(),type);  }}  }
class C{  boolean replace(ReplaceHolder rh) throws BadLocationException {  int start=-1;  int direction=1;  int literalCount=-1;  if (rh.length > 0 && (rh.text == null || rh.text.length() == 0) && (getFormattedTextField().getSelectionStart() != rh.offset || rh.length > 1)) {    direction=-1;  }  if (!getAllowsInvalid()) {    if ((rh.text == null || rh.text.length() == 0) && rh.length > 0) {      start=getFormattedTextField().getSelectionStart();    } else {      start=rh.offset;    }    literalCount=getLiteralCountTo(start);  }  if (super.replace(rh)) {    if (start != -1) {      int end=((ExtendedReplaceHolder)rh).endOffset;      end+=((ExtendedReplaceHolder)rh).endTextLength;      repositionCursor(literalCount,end,direction);    } else {      start=((ExtendedReplaceHolder)rh).endOffset;      if (direction == 1) {        start+=((ExtendedReplaceHolder)rh).endTextLength;      }      repositionCursor(start,direction);    }    return true;  }  return false;}  }
class C{  public static int[] copyOfRange(int[] original,int from,int to){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  int[] copy=new int[newLength];  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  public SQLWarning(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  @Override public void invalidate(final PooledConnection pc) throws SQLException {  final PooledConnectionAndInfo info=pcMap.get(pc);  if (info == null) {    throw new IllegalStateException(NO_KEY_MESSAGE);  }  final UserPassKey key=info.getUserPassKey();  try {    _pool.invalidateObject(key,info);    _pool.clear(key);  } catch (  final Exception ex) {    throw new SQLException("Error invalidating connection",ex);  }}  }
class C{  public static String encodeBytes(byte[] source){  return encodeBytes(source,0,source.length,NO_OPTIONS);}  }
class C{  public boolean is_stitch_route(){  return is_stitch_route;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject bestScore=null;  int n=m_patterns.length;  for (int i=0; i < n; i++) {    XObject score=m_patterns[i].execute(xctxt);    if (score != NodeTest.SCORE_NONE) {      if (null == bestScore)       bestScore=score; else       if (score.num() > bestScore.num())       bestScore=score;    }  }  if (null == bestScore) {    bestScore=NodeTest.SCORE_NONE;  }  return bestScore;}  }
class C{  public boolean isSchemaEnabled(){  return isSchemaEnabled;}  }
class C{  public static void finalizeOnShutdown(){  AciEffectiveRights.aclRights=null;  AciEffectiveRights.aclRightsInfo=null;  AciEffectiveRights.dnAttributeType=null;}  }
class C{  public BinaryRefAddr(String addrType,byte[] src){  this(addrType,src,0,src.length);}  }
class C{  public void insert(String str,int pos){  Document doc=getDocument();  if (doc != null) {    try {      doc.insertString(pos,str,null);    } catch (    BadLocationException e) {      throw new IllegalArgumentException(e.getMessage());    }  }}  }
class C{  public SQLTimeoutException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  public void layoutContainer(Container parent){  JRootPane root=(JRootPane)parent;  Rectangle b=root.getBounds();  Insets i=root.getInsets();  int nextY=0;  int w=b.width - i.right - i.left;  int h=b.height - i.top - i.bottom;  if (root.getLayeredPane() != null) {    root.getLayeredPane().setBounds(i.left,i.top,w,h);  }  if (root.getGlassPane() != null) {    root.getGlassPane().setBounds(i.left,i.top,w,h);  }  if (root.getWindowDecorationStyle() != JRootPane.NONE && (root.getUI() instanceof MetalRootPaneUI)) {    JComponent titlePane=((MetalRootPaneUI)root.getUI()).getTitlePane();    if (titlePane != null) {      Dimension tpd=titlePane.getPreferredSize();      if (tpd != null) {        int tpHeight=tpd.height;        titlePane.setBounds(0,0,w,tpHeight);        nextY+=tpHeight;      }    }  }  if (root.getMenuBar() != null) {    Dimension mbd=root.getMenuBar().getPreferredSize();    root.getMenuBar().setBounds(0,nextY,w,mbd.height);    nextY+=mbd.height;  }  if (root.getContentPane() != null) {    Dimension cpd=root.getContentPane().getPreferredSize();    root.getContentPane().setBounds(0,nextY,w,h < nextY ? 0 : h - nextY);  }}  }
class C{  public static void putFloat(String key,float value){  if (mSharedPreferences == null) {    return;  }  Editor editor=mSharedPreferences.edit();  editor.putFloat(key,value);  editor.apply();}  }
class C{  public Support_ProviderTrust(){  super(NAME,VERSION,INFO);  registerServices();}  }
class C{  @Override public boolean isLoggable(LogRecord record){  return super.isLoggable(record);}  }
class C{  public static boolean evaluate(Entry e,AciEvalContext evalCtx,AttributeType attributeType,DN suffixDN){  List<Attribute> attrs=e.getAllAttributes(attributeType);  for (  ByteString v : attrs.get(0)) {    try {      DN groupDN=DN.valueOf(v.toString());      if (suffixDN != null && !groupDN.isSubordinateOrEqualTo(suffixDN)) {        continue;      }      Group<?> group=getGroupManager().getGroupInstance(groupDN);      if (group != null && evalCtx.isMemberOf(group)) {        return true;      }    } catch (    LocalizedIllegalArgumentException ignored) {      break;    }  }  return false;}  }
class C{  public static void fill(Object[] array,Object value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public AudioInputStream(InputStream stream,AudioFormat format,long length){  super();  this.format=format;  this.frameLength=length;  this.frameSize=format.getFrameSize();  if (this.frameSize == AudioSystem.NOT_SPECIFIED || frameSize <= 0) {    this.frameSize=1;  }  this.stream=stream;  framePos=0;  markpos=0;}  }
class C{  protected static byte[] valueToBuffer(int size){  byte[] buffer=new byte[4];  buffer[0]=(byte)((size & 0x0FE00000) >> 21);  buffer[1]=(byte)((size & 0x001FC000) >> 14);  buffer[2]=(byte)((size & 0x00003F80) >> 7);  buffer[3]=(byte)(size & 0x0000007F);  return buffer;}  }
class C{  public static PostReadResponseControl newControl(final Entry entry){  return new PostReadResponseControl(false,Entries.unmodifiableEntry(entry));}  }
class C{  public void paintToolBarContentBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static void validateAttribute(Attr attr,String validatorClass,String rule) throws UMSException, DataConstraintException {  if (attr != null) {    String[] values=attr.getStringValues();    for (int i=0; i < values.length; i++) {      String aValue=values[i];      if ((aValue != null) && (!aValue.equalsIgnoreCase("")) && (validatorClass != null)) {        IValidator validator=null;        try {          Class theClass=Class.forName(validatorClass);          validator=(IValidator)theClass.newInstance();        } catch (        Exception e) {          throw new UMSException(i18n.getString(IUMSConstants.INSTANCE_FAILED),e);        }        if (!validator.validate(aValue,rule)) {          String msg=i18n.getString(IUMSConstants.DATA_CONSTRAINT);          throw new DataConstraintException(msg + ": " + "{ type="+ attr.getName()+ ", value="+ aValue+ " }");        }      }    }  }}  }
class C{  @Override public int hashCode(){  int result=zeroDigit;  result=result * 37 + groupingSeparator;  result=result * 37 + decimalSeparator;  return result;}  }
class C{  @RequestMapping(value="/bars/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteBar(@PathVariable Long id){  log.debug("REST request to delete Bar : {}",id);  barRepository.delete(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("bar",id.toString())).build();}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.usa.com";  String localName="domest";  Document doc;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node removedNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(1);  attributes=testAddress.getAttributes();{    boolean success=false;    try {      removedNode=attributes.removeNamedItemNS(namespaceURI,localName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public String toString(){  return ("GSSException: " + getMessage());}  }
class C{  public NodeSetDTM(int blocksize,int dummy,DTMManager dtmManager){  super(blocksize);  m_manager=dtmManager;}  }
class C{  CSN purgeUpTo(final CSN purgeCSN) throws ChangelogException {  if (isEmpty() || purgeCSN == null) {    return null;  }  final Long purgeChangeNumber=log.findBoundaryKeyFromRecord(MAPPER_TO_CSN,purgeCSN);  if (purgeChangeNumber != null) {    final Record<Long,ChangeNumberIndexRecord> record=log.purgeUpTo(purgeChangeNumber);    return record != null ? record.getValue().getCSN() : null;  }  return null;}  }
class C{  private static final <T>boolean insertMap(MapElement<T>[] oldMap,MapElement<T>[] newMap,MapElement<T> newElement){  int pos=find(oldMap,newElement.name);  if ((pos != -1) && (newElement.name.equals(oldMap[pos].name))) {    return false;  }  System.arraycopy(oldMap,0,newMap,0,pos + 1);  newMap[pos + 1]=newElement;  System.arraycopy(oldMap,pos + 1,newMap,pos + 2,oldMap.length - pos - 1);  return true;}  }
class C{  public RenderContext(AffineTransform usr2dev,Shape aoi){  this(usr2dev,aoi,null);}  }
class C{  public void removeAllMembers() throws UMSException {  String filter=getSearchFilter();  if (filter == null) {    return;  }  String[] attributesToGet={"dn"};  SearchResults searchResults=getMemberIDs(attributesToGet);  while (searchResults.hasMoreElements()) {    PersistentObject member=searchResults.next();    member.setPrincipal(getPrincipal());    removeMember(member);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.insertData(40,"ABC");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  public static String encrypt(String clearText){  return encode(clearText);}  }
class C{  public void addEnvironment(ContextEnvironment env){  Object value=null;  String type=env.getType();  try {    if (type.equals("java.lang.String")) {      value=env.getValue();    } else     if (type.equals("java.lang.Byte")) {      if (env.getValue() == null) {        value=Byte.valueOf((byte)0);      } else {        value=Byte.decode(env.getValue());      }    } else     if (type.equals("java.lang.Short")) {      if (env.getValue() == null) {        value=Short.valueOf((short)0);      } else {        value=Short.decode(env.getValue());      }    } else     if (type.equals("java.lang.Integer")) {      if (env.getValue() == null) {        value=Integer.valueOf(0);      } else {        value=Integer.decode(env.getValue());      }    } else     if (type.equals("java.lang.Long")) {      if (env.getValue() == null) {        value=Long.valueOf(0);      } else {        value=Long.decode(env.getValue());      }    } else     if (type.equals("java.lang.Boolean")) {      value=Boolean.valueOf(env.getValue());    } else     if (type.equals("java.lang.Double")) {      if (env.getValue() == null) {        value=Double.valueOf(0);      } else {        value=Double.valueOf(env.getValue());      }    } else     if (type.equals("java.lang.Float")) {      if (env.getValue() == null) {        value=Float.valueOf(0);      } else {        value=Float.valueOf(env.getValue());      }    } else     if (type.equals("java.lang.Character")) {      if (env.getValue() == null) {        value=Character.valueOf((char)0);      } else {        if (env.getValue().length() == 1) {          value=Character.valueOf(env.getValue().charAt(0));        } else {          throw new IllegalArgumentException();        }      }    } else {      value=constructEnvEntry(env.getType(),env.getValue());      if (value == null) {        log.error(sm.getString("naming.invalidEnvEntryType",env.getName()));      }    }  } catch (  NumberFormatException e) {    log.error(sm.getString("naming.invalidEnvEntryValue",env.getName()));  }catch (  IllegalArgumentException e) {    log.error(sm.getString("naming.invalidEnvEntryValue",env.getName()));  }  if (value != null) {    try {      if (log.isDebugEnabled())       log.debug("  Adding environment entry " + env.getName());      createSubcontexts(envCtx,env.getName());      envCtx.bind(env.getName(),value);    } catch (    NamingException e) {      log.error(sm.getString("naming.invalidEnvEntryValue",e));    }  }}  }
class C{  public void create(SSOToken token,String dn,Map attrs) throws SMSException, SSOException {  create(token.getPrincipal(),dn,attrs);  objectChanged(dn,ADD);}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  private void fixDown(int k){  int j;  while ((j=k << 1) <= size && j > 0) {    if (j < size && queue[j].nextExecutionTime > queue[j + 1].nextExecutionTime)     j++;    if (queue[k].nextExecutionTime <= queue[j].nextExecutionTime)     break;    TimerTask tmp=queue[j];    queue[j]=queue[k];    queue[k]=tmp;    k=j;  }}  }
class C{  public boolean isFresh(){  return (m_next == 0);}  }
class C{  public final AlgorithmParameters generateParameters(){  return paramGenSpi.engineGenerateParameters();}  }
class C{  private void loadImageAssets(){  splash=new Image(getClass().getResource("/res/splash.png").toString(),WIDTH,HEIGHT,true,true,true);  pauseSplash=new Image(getClass().getResource("/res/pause.png").toString(),WIDTH,HEIGHT,false,true,true);  gameOverSplash=new Image(getClass().getResource("/res/gameOver_splash.png").toString(),0,HEIGHT,true,false,true);  creditsImg=new Image(getClass().getResource("/res/credits.png").toString(),WIDTH,HEIGHT,true,true,true);  MARIOSCALEY_s=(float)ASPECT_LENGTH - 5;  MARIOSCALEX_s=(float)(12.0 / 16 * MARIOSCALEY_s);  MARIOSCALEY_b=((float)(31.0 * ASPECT_LENGTH / 16.0)) - 10;  MARIO_SCALE_DIFF=MARIOSCALEY_b - MARIOSCALEY_s;  mario0=new Image(getClass().getResource("/res/sprites/mario/0.png").toString(),(int)(12.0 / 16 * MARIOSCALEY_s),MARIOSCALEY_s,true,false,true);  mario1=new Image(getClass().getResource("/res/sprites/mario/1.png").toString(),(int)(12.0 / 15 * ((int)(15.0 * REL_HEIGHT) - 5)),(int)(15.0 * REL_HEIGHT) - 5,true,false,true);  mario2=new Image(getClass().getResource("/res/sprites/mario/2.png").toString(),(int)(15.0 / 16 * MARIOSCALEY_s),MARIOSCALEY_s,true,false,true);  mario3=new Image(getClass().getResource("/res/sprites/mario/3.png").toString(),(int)(15.0 / 16 * MARIOSCALEY_s),MARIOSCALEY_s,true,false,true);  mario4=new Image(getClass().getResource("/res/sprites/mario/4.png").toString(),MARIOSCALEY_s,MARIOSCALEY_s,true,false,true);  mario5=new Image(getClass().getResource("/res/sprites/mario/5.png").toString(),(int)(13.0 / 16 * MARIOSCALEY_s),MARIOSCALEY_s,true,false,true);  mario6=new Image(getClass().getResource("/res/sprites/mario/6.png").toString(),MARIOSCALEY_s,MARIOSCALEY_b,true,false,true);  mario7=new Image(getClass().getResource("/res/sprites/mario/7.png").toString(),MARIOSCALEY_s,MARIOSCALEY_b,true,false,true);  mario8=new Image(getClass().getResource("/res/sprites/mario/8.png").toString(),MARIOSCALEY_s,MARIOSCALEY_b,true,false,true);  mario9=new Image(getClass().getResource("/res/sprites/mario/9.png").toString(),MARIOSCALEY_s,MARIOSCALEY_b,true,false,true);  mario10=new Image(getClass().getResource("/res/sprites/mario/10.png").toString(),MARIOSCALEY_s,MARIOSCALEY_b,true,false,true);  mario11=new Image(getClass().getResource("/res/sprites/mario/11.png").toString(),MARIOSCALEY_s,MARIOSCALEY_b,true,false,true);  mario12=new Image(getClass().getResource("/res/sprites/mario/12.png").toString(),MARIOSCALEY_s,MARIOSCALEY_b,true,false,true);  mario13=new Image(getClass().getResource("/res/sprites/mario/13.png").toString(),MARIOSCALEY_s,MARIOSCALEY_b,true,false,true);  mario14=new Image(getClass().getResource("/res/sprites/mario/14.png").toString(),MARIOSCALEY_s,MARIOSCALEY_b,true,false,true);  mario15=new Image(getClass().getResource("/res/sprites/mario/15.png").toString(),MARIOSCALEY_s,MARIOSCALEY_b,true,false,true);  mario16=new Image(getClass().getResource("/res/sprites/mario/16.png").toString(),MARIOSCALEY_s,MARIOSCALEY_b,true,false,true);  mario17=new Image(getClass().getResource("/res/sprites/mario/17.png").toString(),MARIOSCALEY_s,MARIOSCALEY_b,true,false,true);  mario18=new Image(getClass().getResource("/res/sprites/mario/18.png").toString(),MARIOSCALEY_s,MARIOSCALEY_b,true,false,true);  mario19=new Image(getClass().getResource("/res/sprites/mario/19.png").toString(),MARIOSCALEY_s + (6.0 / 3392.0 * STAGEWIDTH),MARIOSCALEY_b,true,false,true);  mario20=new Image(getClass().getResource("/res/sprites/mario/20.png").toString(),MARIOSCALEY_s + (6.0 / 3392.0 * STAGEWIDTH),MARIOSCALEY_b,true,false,true);  mario21=new Image(getClass().getResource("/res/sprites/mario/21.png").toString(),MARIOSCALEY_s + (6.0 / 3392.0 * STAGEWIDTH),MARIOSCALEY_b,true,false,true);  mario22=new Image(getClass().getResource("/res/sprites/mario/22.png").toString(),MARIOSCALEY_s + (6.0 / 3392.0 * STAGEWIDTH),MARIOSCALEY_b,true,false,true);  mario23=new Image(getClass().getResource("/res/sprites/mario/23.png").toString(),MARIOSCALEY_s + (6.0 / 3392.0 * STAGEWIDTH),MARIOSCALEY_b,true,false,true);  mario24=new Image(getClass().getResource("/res/sprites/mario/24.png").toString(),MARIOSCALEY_s,MARIOSCALEY_b,true,false,true);  playerDeathSprites=new Image[8];  for (int i=0; i < 8; i++) {    playerDeathSprites[i]=new Image(getClass().getResource("/res/sprites/mario/actions/death/" + i + ".png").toString(),0,MARIOSCALEY_b,true,true,true);  }  tile0=new Image(getClass().getResource("/res/sprites/stage/tiles/tile0.png").toString(),ASPECT_LENGTH,ASPECT_LENGTH,false,false,true);  tile1=new Image(getClass().getResource("/res/sprites/stage/tiles/tile1.png").toString(),ASPECT_LENGTH,ASPECT_LENGTH,false,false,true);  tile2=new Image(getClass().getResource("/res/sprites/stage/tiles/tile2.png").toString(),ASPECT_LENGTH,ASPECT_LENGTH,false,false,true);  tile3=new Image(getClass().getResource("/res/sprites/stage/tiles/tile_collide.png").toString(),ASPECT_LENGTH,ASPECT_LENGTH,false,true,true);  tile4=new Image(getClass().getResource("/res/sprites/stage/tiles/tile_aftercollide.png").toString(),ASPECT_LENGTH,ASPECT_LENGTH,false,false,true);  brick0=new Image(getClass().getResource("/res/sprites/stage/brick.png").toString(),ASPECT_LENGTH,ASPECT_LENGTH,false,false,true);  hitCoins=new Image[4];  hitCoins[0]=new Image(getClass().getResource("/res/sprites/stage/hit_coins/0.png").toString(),ASPECT_LENGTH - 3,ASPECT_LENGTH - 3,false,false,false);  hitCoins[1]=new Image(getClass().getResource("/res/sprites/stage/hit_coins/1.png").toString(),ASPECT_LENGTH - 3,ASPECT_LENGTH - 3,false,false,false);  hitCoins[2]=new Image(getClass().getResource("/res/sprites/stage/hit_coins/2.png").toString(),ASPECT_LENGTH - 3,ASPECT_LENGTH - 3,false,false,false);  hitCoins[3]=new Image(getClass().getResource("/res/sprites/stage/hit_coins/3.png").toString(),ASPECT_LENGTH - 3,ASPECT_LENGTH - 3,false,false,false);  floorBase=new Image(getClass().getResource("/res/sprites/stage/stage.png").toString(),0,HEIGHT,true,false,true);  auraSprites=new Image[8];  auraScaleY=(float)(MARIOSCALEY_b + (21 * REL_HEIGHT));  auraScaleX=(float)(MARIOSCALEY_s + (31.1 * REL_HEIGHT));  for (int i=0; i < 8; i++) {    auraSprites[i]=new Image(getClass().getResource("/res/sprites/mario/actions/aura/a" + i + ".png").toString(),0,0,true,true,true);  }  auraWindEffects=new Image[15];  for (int i=0; i < 15; i++) {    auraWindEffects[i]=new Image(getClass().getResource("/res/sprites/mario/actions/aura/envEffect_" + i + ".png").toString(),auraScaleX,0,true,true,true);  }  jumpEffect=new ImageView(new Image(getClass().getResource("/res/sprites/mario/actions/jump_floorEffect.png").toString(),41 * REL_HEIGHT,5.2 * REL_HEIGHT,false,true,true));  jumpEffect.setOpacity(0);  jumpTrail=new ImageView(new Image(getClass().getResource("/res/sprites/mario/actions/jump_trailw.png").toString(),41 * REL_HEIGHT,9.3 * REL_HEIGHT,false,true,true));  jumpTrail.setOpacity(0);  powerupEffect=new Image[3];  powerupEffect[0]=new Image(getClass().getResource("/res/sprites/mario/actions/powerup_take_1.png").toString(),41 * REL_HEIGHT,9.3 * REL_HEIGHT,false,true,true);  powerupEffect[1]=new Image(getClass().getResource("/res/sprites/mario/actions/powerup_take_2.png").toString(),41 * REL_HEIGHT,9.3 * REL_HEIGHT,false,true,true);  powerupEffect[2]=new Image(getClass().getResource("/res/sprites/mario/actions/powerup_take_3.png").toString(),41 * REL_HEIGHT,9.3 * REL_HEIGHT,false,true,true);  powerupEffectView=new ImageView();  yolo=new Image(getClass().getResource("/res/sprites/stage/powerups/yolo.png").toString(),ASPECT_LENGTH,ASPECT_LENGTH * (48.0 / 123),true,true,true);  fireballScaleX=(float)(11.7 * REL_HEIGHT);  fireballScaleY=(float)(11.2 * REL_HEIGHT);  fireBall=new Image(getClass().getResource("/res/sprites/mario/actions/fireball/fireball.png").toString(),0,fireballScaleY,true,true,true);  fireballb=new Image(getClass().getResource("/res/sprites/mario/actions/fireball/fireballb.png").toString(),0,fireballScaleY + 20,true,true,true);  fireballBlast=new Image[12];  for (int i=0; i < 12; i++) {    fireballBlast[i]=new Image(getClass().getResource("/res/sprites/mario/actions/fireball/blast_" + i + ".png").toString(),fireballScaleX,0,true,true,true);  }  flagPoleSprites=new Image[6];  for (int i=0; i < 5; i++) {    flagPoleSprites[i]=new Image(getClass().getResource("/res/sprites/stage/flagPole/" + i + ".png").toString(),0,172 * REL_HEIGHT,true,true,false);  }  invinciStarSprites=new Image[23];  for (int i=0; i < 23; i++) {    invinciStarSprites[i]=new Image(getClass().getResource("/res/sprites/stage/powerups/invinci_star/" + i + ".png").toString(),ASPECT_LENGTH,ASPECT_LENGTH,true,true,false);  }  goomba0=new Image(getClass().getResource("/res/sprites/enemies/goomba/0.png").toString(),ASPECT_LENGTH,ASPECT_LENGTH,true,true,false);  goomba1=new Image(getClass().getResource("/res/sprites/enemies/goomba/1.png").toString(),ASPECT_LENGTH,ASPECT_LENGTH,true,true,false);  goomba2=new Image(getClass().getResource("/res/sprites/enemies/goomba/2.png").toString(),ASPECT_LENGTH,ASPECT_LENGTH,true,true,false);  goomba3=new Image(getClass().getResource("/res/sprites/enemies/goomba/3.png").toString(),ASPECT_LENGTH,ASPECT_LENGTH,true,true,false);  Image elevateEffect=new Image(getClass().getResource("/res/sprites/mario/actions/elevate_effect.png").toString(),MARIOSCALEY_s * 4,0,true,true,false);  elevateEffectView=new ImageView(elevateEffect);  flagDesEffects=new Image[6];  for (int i=0; i < 6; i++) {    flagDesEffects[i]=new Image(getClass().getResource("/res/sprites/mario/actions/flagDestroy_effect/" + i + "s.png").toString(),MARIOSCALEY_s * 4,0,true,true,false);  }  flagDestroyEffectView=new ImageView();  statsCoin=new ImageView(new Image(getClass().getResource("/res/coinsDisplay_icon.gif").toString(),0,6.36 * REL_HEIGHT,true,true,false));}  }
class C{  private NetNosList(){  net_nos_arr=new int[0];}  }
class C{  static XPath rewriteChildToExpression(ElemTemplateElement varElem) throws TransformerException {  ElemTemplateElement t=varElem.getFirstChildElem();  if (null != t && null == t.getNextSiblingElem()) {    int etype=t.getXSLToken();    if (Constants.ELEMNAME_VALUEOF == etype) {      ElemValueOf valueof=(ElemValueOf)t;      if (valueof.getDisableOutputEscaping() == false && valueof.getDOMBackPointer() == null) {        varElem.m_firstChild=null;        return new XPath(new XRTreeFragSelectWrapper(valueof.getSelect().getExpression()));      }    } else     if (Constants.ELEMNAME_TEXTLITERALRESULT == etype) {      ElemTextLiteral lit=(ElemTextLiteral)t;      if (lit.getDisableOutputEscaping() == false && lit.getDOMBackPointer() == null) {        String str=lit.getNodeValue();        XString xstr=new XString(str);        varElem.m_firstChild=null;        return new XPath(new XRTreeFragSelectWrapper(xstr));      }    }  }  return null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodetextnodevalue.class,args);}  }
class C{  public RescaleOp(float scaleFactor,float offset,RenderingHints hints){  length=1;  this.scaleFactors=new float[1];  this.offsets=new float[1];  this.scaleFactors[0]=scaleFactor;  this.offsets[0]=offset;  this.hints=hints;}  }
class C{  protected void fillRaster(int pixels[],int off,int adjust,int x,int y,int w,int h){  if (isSimpleFocus && isNonCyclic && isSimpleLookup) {    simpleNonCyclicFillRaster(pixels,off,adjust,x,y,w,h);  } else {    cyclicCircularGradientFillRaster(pixels,off,adjust,x,y,w,h);  }}  }
class C{  public JKMapTableModel(Map<K,V> map,String keyLabel,String valueLabel){  this.map=map;  addJKTableColumn(keyLabel);  addJKTableColumn(valueLabel);  Set<K> keySet=map.keySet();  int row=0;  for (  K k : keySet) {    addRecord();    setValueAt(k,row,0);    setValueAt(map.get(k),row++,1);  }}  }
class C{  public static PlainSASLBindRequest copyOfPlainSASLBindRequest(final PlainSASLBindRequest request){  return new PlainSASLBindRequestImpl(request);}  }
class C{  public synchronized BukkitTask runTaskTimer(Plugin plugin,long delay,long period) throws IllegalArgumentException, IllegalStateException {  checkState();  return setupId(Bukkit.getScheduler().runTaskTimer(plugin,(Runnable)this,delay,period));}  }
class C{  public String encode(){  return encode(new StringBuilder()).toString();}  }
class C{  public void maintain(){  Key key;  while ((key=(Key)queue.poll()) != null) {    if (key.isDead()) {      continue;    }    key.ackDeath();    map.remove(key);  }}  }
class C{  public void login(AuthContext.IndexType type,String indexName,String locale) throws AuthLoginException {  if (authDebug.messageEnabled()) {    authDebug.message("AuthContextLocal::login() called " + "with IndexType : " + type + " & Indexname : "+ indexName+ " & locale : "+ locale);  }  login(type,indexName,null,null,null,null,locale);}  }
class C{  protected PropertyChangeListener createPropertyChangeListener(){  return getHandler();}  }
class C{  public ChangeEvent(Object source){  super(source);}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    Response response=protocolObjects.messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);      logger.info("Dialog State is " + serverTransactionId.getDialog().getState());    } else {      logger.info("null server tx.");    }  } catch (  Exception ex) {    String s="Unexpected exception";    logger.error(s,ex);    ReInviteTest.fail(s);  }}  }
class C{  public AMSearchResults searchDynamicGroups(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.DYNAMIC_GROUP),wildcard,avPairs,searchControl);}  }
class C{  public String toString(boolean includeNS,boolean declareNS){  return toString(includeNS,declareNS,false);}  }
class C{  public ServerCloneViewBean(){  super("ServerClone");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  createPropertyModel();  registerChildren();}  }
class C{  public void dragExit(DragSourceEvent dse){}  }
class C{  public void assertDurationIsInRange(long expectedMillis){  long minimum=(long)((double)expectedMillis * 0.90);  long maximum=Math.max((long)((double)expectedMillis * 1.10),10);  long waitMillis=Math.max(expectedMillis * 10,10);  long duration=getDurationMillis(waitMillis);  if (duration < minimum) {    Assert.fail("expected duration: " + expectedMillis + " minimum duration: "+ minimum+ " actual duration too short: "+ duration);  } else   if (duration > maximum) {    Assert.fail("expected duration: " + expectedMillis + " maximum duration: "+ maximum+ " actual duration too long: "+ duration);  }}  }
class C{  public IntermediateResponseProtocolOp(String oid,ByteString value){  this.oid=oid;  this.value=value;}  }
class C{  public <T>void register(Class<T> service,T provider,Plugin plugin,ServicePriority priority){  RegisteredServiceProvider<T> registeredProvider=null;synchronized (providers) {    List<RegisteredServiceProvider<?>> registered=providers.get(service);    if (registered == null) {      registered=new ArrayList<RegisteredServiceProvider<?>>();      providers.put(service,registered);    }    registeredProvider=new RegisteredServiceProvider<T>(service,provider,priority,plugin);    int position=Collections.binarySearch(registered,registeredProvider);    if (position < 0) {      registered.add(-(position + 1),registeredProvider);    } else {      registered.add(position,registeredProvider);    }  }  Bukkit.getServer().getPluginManager().callEvent(new ServiceRegisterEvent(registeredProvider));}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return _fooLocalService.deleteFoo(foo);}  }
class C{  public Object clone(){  SIPRequest retval=(SIPRequest)super.clone();  retval.transactionPointer=null;  if (this.requestLine != null)   retval.requestLine=(RequestLine)this.requestLine.clone();  return retval;}  }
class C{  @Inject public ResourceSetResource(ResourceSetService resourceSetService,ContextHelper contextHelper,UmaLabelsStore umaLabelsStore,ResourceSetDescriptionValidator validator,ExtensionFilterManager extensionFilterManager){  this.resourceSetService=resourceSetService;  this.contextHelper=contextHelper;  this.umaLabelsStore=umaLabelsStore;  this.validator=validator;  this.extensionFilterManager=extensionFilterManager;}  }
class C{  public Location(final World world,final double x,final double y,final double z,final float yaw,final float pitch){  this.world=world;  this.x=x;  this.y=y;  this.z=z;  this.pitch=pitch;  this.yaw=yaw;}  }
class C{  public PrivilegedActionException(Exception exception){  super((Throwable)null);  this.exception=exception;}  }
class C{  public final void testNextBytesbyteArray01(){  try {    sr.nextBytes(null);    fail("unexpected: nextBytes(null) :: No NullPointerException");  } catch (  NullPointerException e) {  }}  }
class C{  public void handleNotification(Notification notif,Object handback){  if (notif == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"handleNotification",notif);  if (notif instanceof MBeanServerNotification) {    MBeanServerNotification mbsNtf=(MBeanServerNotification)notif;    String ntfType=notif.getType();    if (ntfType.equals(MBeanServerNotification.UNREGISTRATION_NOTIFICATION)) {      ObjectName mbeanName=((MBeanServerNotification)notif).getMBeanName();      boolean isRefedMBeanFlag=false;synchronized (myRefedMBeanObjName2RelIdsMap) {        if (myRefedMBeanObjName2RelIdsMap.containsKey(mbeanName)) {synchronized (myUnregNtfList) {            myUnregNtfList.add(mbsNtf);          }          isRefedMBeanFlag=true;        }        if (isRefedMBeanFlag && myPurgeFlag) {          try {            purgeRelations();          } catch (          Exception exc) {            throw new RuntimeException(exc.getMessage());          }        }      }      String relId;synchronized (myRelMBeanObjName2RelIdMap) {        relId=myRelMBeanObjName2RelIdMap.get(mbeanName);      }      if (relId != null) {        try {          removeRelation(relId);        } catch (        Exception exc) {          throw new RuntimeException(exc.getMessage());        }      }    }  }  RELATION_LOGGER.exiting(RelationService.class.getName(),"handleNotification");  return;}  }
class C{  private boolean accept(char... acceptableSymbols){  boolean symbolPresent=false;  for (  char c : acceptableSymbols) {    if (data[index] == c)     symbolPresent=true;  }  return symbolPresent;}  }
class C{  public TSAClientBouncyCastle(String url,String username,String password){  this(url,username,password,4096,DEFAULTHASHALGORITHM);}  }
class C{  public void track(String path,Object marker,FileDeleteStrategy deleteStrategy){  if (path == null) {    throw new NullPointerException("The path must not be null");  }  addTracker(path,marker,deleteStrategy);}  }
class C{  public String toString(){  String ret="";  if ((relations != null) && (relations.size() > 0)) {    ret=((AccessibleRelation)(relations.elementAt(0))).toDisplayString();    for (int i=1; i < relations.size(); i++) {      ret=ret + "," + ((AccessibleRelation)(relations.elementAt(i))).toDisplayString();    }  }  return ret;}  }
class C{  public void testScalePos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=10;  int cScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  assertTrue("incorrect scale",aNumber.scale() == cScale);}  }
class C{  public void testSubtractDiffScaleNegPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-15;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="1231212478987482988429808779810457634781310033452057698121208165201.2765435432";  int cScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.subtract(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  private long cacheResponseAge(){  long apparentReceivedAge=servedDate != null ? Math.max(0,receivedResponseMillis - servedDate.getTime()) : 0;  long receivedAge=ageSeconds != -1 ? Math.max(apparentReceivedAge,SECONDS.toMillis(ageSeconds)) : apparentReceivedAge;  long responseDuration=receivedResponseMillis - sentRequestMillis;  long residentDuration=nowMillis - receivedResponseMillis;  return receivedAge + responseDuration + residentDuration;}  }
class C{  public SpeechConfiguration(String audioFormat,boolean isAuthNeeded){  this.audioFormat=audioFormat;  this.isAuthNeeded=isAuthNeeded;}  }
class C{  @Override public String generateName(final IntUnaryOperator randomInRange,final int length){  if (length == 0) {    return "LENGTH_WAS_ZERO";  }  boolean addConsonant=false;  final StringBuilder sb=new StringBuilder();  while (sb.length() < length) {    if (addConsonant) {      final int randomIndex=randomInRange.applyAsInt(consonants.length);      sb.append(consonants[randomIndex]);    } else {      final int randomIndex=randomInRange.applyAsInt(vowels.length);      sb.append(vowels[randomIndex]);    }    addConsonant=!addConsonant;  }  return sb.substring(0,length);}  }
class C{  void clearMarkers(){synchronized (this) {    typeAheadMarkers.clear();  }}  }
class C{  public int countTokens(){  int count=0;  int currpos=currentPosition;  while (currpos < maxPosition) {    currpos=skipDelimiters(currpos);    if (currpos >= maxPosition)     break;    currpos=scanToken(currpos);    count++;  }  return count;}  }
class C{  public ClassNotFoundException(){  super((Throwable)null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforeinvalidnodetype.class,args);}  }
class C{  private static NSObject parseObject(Node n) throws ParseException, IOException {  String type=n.getNodeName();  if (type.equals("dict")) {    NSDictionary dict=new NSDictionary();    List<Node> children=filterElementNodes(n.getChildNodes());    for (int i=0; i < children.size(); i+=2) {      Node key=children.get(i);      Node val=children.get(i + 1);      String keyString=getNodeTextContents(key);      dict.put(keyString,parseObject(val));    }    return dict;  } else   if (type.equals("array")) {    List<Node> children=filterElementNodes(n.getChildNodes());    NSArray array=new NSArray(children.size());    for (int i=0; i < children.size(); i++) {      array.setValue(i,parseObject(children.get(i)));    }    return array;  } else   if (type.equals("true")) {    return new NSNumber(true);  } else   if (type.equals("false")) {    return new NSNumber(false);  } else   if (type.equals("integer")) {    return new NSNumber(getNodeTextContents(n));  } else   if (type.equals("real")) {    return new NSNumber(getNodeTextContents(n));  } else   if (type.equals("string")) {    return new NSString(getNodeTextContents(n));  } else   if (type.equals("data")) {    return new NSData(getNodeTextContents(n));  } else   if (type.equals("date")) {    return new NSDate(getNodeTextContents(n));  }  return null;}  }
class C{  public INV_POLICY(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  BeginLineAction(String nm,boolean select){  super(nm);  this.select=select;}  }
class C{  public int right_x_value(int p_y){  int result=Math.min(oct_rx,oct_urx - p_y);  return Math.min(result,oct_lrx + p_y);}  }
class C{  private float handleRun(int start,int measureLimit,int limit,boolean runIsRtl,Canvas c,float x,int top,int y,int bottom,FontMetricsInt fmi,boolean needWidth){  if (start == measureLimit) {    TextPaint wp=mWorkPaint;    wp.set(mPaint);    if (fmi != null) {      expandMetricsFromPaint(fmi,wp);    }    return 0f;  }  if (mSpanned == null) {    TextPaint wp=mWorkPaint;    wp.set(mPaint);    final int mlimit=measureLimit;    return handleText(wp,start,mlimit,start,limit,runIsRtl,c,x,top,y,bottom,fmi,needWidth || mlimit < measureLimit);  }  mMetricAffectingSpanSpanSet.init(mSpanned,mStart + start,mStart + limit);  mCharacterStyleSpanSet.init(mSpanned,mStart + start,mStart + limit);  final float originalX=x;  for (int i=start, inext; i < measureLimit; i=inext) {    TextPaint wp=mWorkPaint;    wp.set(mPaint);    inext=mMetricAffectingSpanSpanSet.getNextTransition(mStart + i,mStart + limit) - mStart;    int mlimit=Math.min(inext,measureLimit);    ReplacementSpan replacement=null;    for (int j=0; j < mMetricAffectingSpanSpanSet.numberOfSpans; j++) {      if ((mMetricAffectingSpanSpanSet.spanStarts[j] >= mStart + mlimit) || (mMetricAffectingSpanSpanSet.spanEnds[j] <= mStart + i))       continue;      MetricAffectingSpan span=mMetricAffectingSpanSpanSet.spans[j];      if (span instanceof ReplacementSpan) {        replacement=(ReplacementSpan)span;      } else {        span.updateDrawState(wp);      }    }    if (replacement != null) {      x+=handleReplacement(replacement,wp,i,mlimit,runIsRtl,c,x,top,y,bottom,fmi,needWidth || mlimit < measureLimit);      continue;    }    for (int j=i, jnext; j < mlimit; j=jnext) {      jnext=mCharacterStyleSpanSet.getNextTransition(mStart + j,mStart + mlimit) - mStart;      wp.set(mPaint);      for (int k=0; k < mCharacterStyleSpanSet.numberOfSpans; k++) {        if ((mCharacterStyleSpanSet.spanStarts[k] >= mStart + jnext) || (mCharacterStyleSpanSet.spanEnds[k] <= mStart + j))         continue;        CharacterStyle span=mCharacterStyleSpanSet.spans[k];        span.updateDrawState(wp);      }      x+=handleText(wp,j,jnext,i,inext,runIsRtl,c,x,top,y,bottom,fmi,needWidth || jnext < measureLimit);    }  }  return x - originalX;}  }
class C{  @Override protected void thresholdReached() throws IOException {  if (prefix != null) {    outputFile=File.createTempFile(prefix,suffix,directory);  }  FileOutputStream fos=new FileOutputStream(outputFile);  memoryOutputStream.writeTo(fos);  currentOutputStream=fos;  memoryOutputStream=null;}  }
class C{  private void purgeOne(){synchronized (queue) {    WeakKey key=(WeakKey)queue.poll();    if (key != null) {      super.remove(key.getReferenced());    }  }}  }
class C{  public final PlaPointInt insert_trace(PlaPointInt p_from_corner,PlaPointInt p_to_corner,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth,int p_pull_tight_accuracy,boolean p_with_check,TimeLimit p_time_limit){  if (p_from_corner.equals(p_to_corner))   return p_to_corner;  Polyline insert_polyline=new Polyline(p_from_corner,p_to_corner);  PlaPointInt ok_point=insert_trace(insert_polyline,p_half_width,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,p_pull_tight_accuracy,p_with_check,p_time_limit);  PlaPointInt result;  if (ok_point == insert_polyline.corner_first()) {    result=p_from_corner;  } else   if (ok_point == insert_polyline.corner_last()) {    result=p_to_corner;  } else {    result=ok_point;  }  return result;}  }
class C{  public ServerManagedObjectDecodingException(ServerManagedObject<?> partialManagedObject,Collection<PropertyException> causes){  super(createMessage(partialManagedObject,causes));  this.partialManagedObject=partialManagedObject;  this.causes=Collections.unmodifiableList(new LinkedList<PropertyException>(causes));}  }
class C{  public boolean isDatabaseIndex(){  return isDatabaseIndex;}  }
class C{  private void updateGrid(){  int delta=0;  int maxCols=0;  int rows;  for (int counter=0; counter < getChildCount(); counter++) {    TableRowElementInfo row=getRow(counter);    int prev=0;    for (int y=0; y < delta; y++) {      prev=Math.max(prev,getRow(counter - y - 1).getColumnCount(y + 2));    }    delta=Math.max(row.getRowCount(),delta);    delta--;    maxCols=Math.max(maxCols,row.getColumnCount() + prev);  }  rows=getChildCount() + delta;  grid=new TableCellElementInfo[rows][];  for (int counter=0; counter < rows; counter++) {    grid[counter]=new TableCellElementInfo[maxCols];  }  for (int counter=0; counter < rows; counter++) {    getRow(counter).updateGrid(counter);  }}  }
class C{  public ConcurrentHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  private void determineSuperclasses(){  superclasses=new TIntHashSet(2);  Classfile clazz=this;  while (clazz != null) {    ClassInfo superInfo=clazz.getSuperclassInfo();    if (superInfo != null)     superclasses.add(superInfo.getName().getID());    clazz=clazz.getSuperclass();  }  superclasses.trimToSize();}  }
class C{  public boolean isCompatibleRaster(Raster raster){  SampleModel sm=raster.getSampleModel();  if (sm instanceof ComponentSampleModel) {    if (sm.getNumBands() != getNumComponents()) {      return false;    }    for (int i=0; i < nBits.length; i++) {      if (sm.getSampleSize(i) < nBits[i]) {        return false;      }    }    return (raster.getTransferType() == transferType);  } else {    return false;  }}  }
class C{  private LDAPConnection connect(SecureConnectionCliArgs args,PrintStream out,PrintStream err) throws LDAPConnectionException, ArgumentException {  throwIfArgumentsConflict(args.getBindPasswordArg(),args.getBindPasswordFileArg());  throwIfArgumentsConflict(args.getKeyStorePasswordArg(),args.getKeyStorePasswordFileArg());  throwIfArgumentsConflict(args.getTrustStorePasswordArg(),args.getTrustStorePasswordFileArg());  throwIfArgumentsConflict(args.getUseSSLArg(),args.getUseStartTLSArg());  LDAPConnectionOptions connectionOptions=new LDAPConnectionOptions();  connectionOptions.setVersionNumber(3);  if (args.getUseSSLArg().isPresent()) {    connectionOptions.setUseSSL(true);  } else   if (args.getUseStartTLSArg().isPresent()) {    connectionOptions.setStartTLS(true);  }  if (args.getUseSSLArg().isPresent() || args.getUseStartTLSArg().isPresent()) {    try {      String clientAlias;      if (args.getCertNicknameArg().isPresent()) {        clientAlias=args.getCertNicknameArg().getValue();      } else {        clientAlias=null;      }      SSLConnectionFactory sslConnectionFactory=new SSLConnectionFactory();      sslConnectionFactory.init(args.getTrustAllArg().isPresent(),args.getKeyStorePathArg().getValue(),args.getKeyStorePasswordArg().getValue(),clientAlias,args.getTrustStorePathArg().getValue(),args.getTrustStorePasswordArg().getValue());      connectionOptions.setSSLConnectionFactory(sslConnectionFactory);    } catch (    SSLConnectionException sce) {      printWrappedText(err,ERR_LDAP_CONN_CANNOT_INITIALIZE_SSL.get(sce.getMessage()));    }  }  if (args.getSaslOptionArg().isPresent()) {    String mechanism=null;    LinkedList<String> options=new LinkedList<>();    for (    String s : args.getSaslOptionArg().getValues()) {      int equalPos=s.indexOf('=');      if (equalPos <= 0) {        printAndThrowException(err,ERR_LDAP_CONN_CANNOT_PARSE_SASL_OPTION.get(s));      } else {        String name=s.substring(0,equalPos);        if ("mech".equalsIgnoreCase(name)) {          mechanism=s;        } else {          options.add(s);        }      }    }    if (mechanism == null) {      printAndThrowException(err,ERR_LDAP_CONN_NO_SASL_MECHANISM.get());    }    connectionOptions.setSASLMechanism(mechanism);    for (    String option : options) {      connectionOptions.addSASLProperty(option);    }  }  int timeout=args.getConnectTimeoutArg().getIntValue();  final String passwordValue=getPasswordValue(args.getBindPasswordArg(),args.getBindPasswordFileArg(),args.getBindDnArg(),out,err);  return connect(args.getHostNameArg().getValue(),args.getPortArg().getIntValue(),args.getBindDnArg().getValue(),passwordValue,connectionOptions,timeout,out,err);}  }
class C{  private boolean isLoginFailureLockoutStoreInDS(){  return loginFailureLockoutStoreInDS;}  }
class C{  protected void deserializeSessions(byte[] data) throws ClassNotFoundException, IOException {  try (ObjectInputStream ois=getReplicationStream(data)){    Integer count=(Integer)ois.readObject();    int n=count.intValue();    for (int i=0; i < n; i++) {      DeltaSession session=(DeltaSession)createEmptySession();      session.readObjectData(ois);      session.setManager(this);      session.setValid(true);      session.setPrimarySession(false);      session.access();      session.setAccessCount(0);      session.resetDeltaRequest();      if (findSession(session.getIdInternal()) == null) {        sessionCounter++;      } else {        sessionReplaceCounter++;        if (log.isWarnEnabled()) {          log.warn(sm.getString("deltaManager.loading.existing.session",session.getIdInternal()));        }      }      add(session);      if (notifySessionListenersOnReplication) {        session.tellNew();      }    }  } catch (  ClassNotFoundException e) {    log.error(sm.getString("deltaManager.loading.cnfe",e),e);    throw e;  }catch (  IOException e) {    log.error(sm.getString("deltaManager.loading.ioe",e),e);    throw e;  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDERS\"";  db.execSQL(sql);}  }
class C{  private void printEquivalentCommandToDelete(SchemaElement element){  String schemaFile=getSchemaFile(element);  String attrName=getAttributeConfigName(element);  String attrValue=getSchemaFileAttributeValue(element);  String msg;  if (!isServerRunning()) {    msg=getEquivalentCommandOfflineMsg(element,schemaFile) + "<br><b>" + attrName+ ": "+ attrValue+ "</b><br><br>";  } else {    ArrayList<String> args=new ArrayList<>();    args.add("-a");    args.addAll(getObfuscatedCommandLineArguments(getConnectionCommandLineArguments(true,true)));    args.add(getNoPropertiesFileArgument());    String equiv=getEquivalentCommandLine(getCommandLinePath("ldapmodify"),args);    msg=getEquivalentCommandOnlineMsg(element) + "<br><b>" + equiv+ "<br>"+ "dn: cn=schema<br>"+ "changetype: modify<br>"+ "delete: "+ attrName+ "<br>"+ attrName+ ": "+ attrValue+ "</b>"+ "<br><br>";  }  getProgressDialog().appendProgressHtml(Utilities.applyFont(msg,ColorAndFontConstants.progressFont));}  }
class C{  public boolean isChannelIdEnabled(){  return channelIdEnabled;}  }
class C{  public static int sizeOfInt(){  return 4;}  }
class C{  public org.omg.CosNaming.NamingContext new_context(){  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("new_context",true);    $in=_invoke($out);    org.omg.CosNaming.NamingContext $result=org.omg.CosNaming.NamingContextHelper.read($in);    return $result;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    return new_context();  } finally {    _releaseReply($in);  }}  }
class C{  private void updateDialogStatus(){  Log.d(TAG,"updateDialogStatus.mIsNeedShowSearchDlg:" + mIsNeedShowSearchDlg);  boolean isScan=mService.isScanning();  if (isScan && mIsNeedShowSearchDlg) {    Log.d(TAG,"updateDialogStatus: show search dialog. isScan is " + isScan);    mIsNeedShowSearchDlg=false;    showSearchDialog();  }  if (mIsNeedShowRecordDlg) {    Log.d(TAG,"updateDialogStatus.resume recordDlg.mPrevRecorderState:" + mPrevRecorderState);    showSaveRecordingDialog();    mIsNeedShowRecordDlg=false;  }}  }
class C{  public TagException(Throwable ex){  super(ex);}  }
class C{  @Override public boolean isCommitted(){  return this.response.isCommitted();}  }
class C{  public ByteBufferOutputStream append(long i){  return append(Long.toString(i));}  }
class C{  private void verifyEntry(ReadableTransaction txn,EntryID entryID,Entry entry){  if (verifyDN2ID) {    verifyDN2ID(txn,entryID,entry);  }  verifyIndex(txn,entryID,entry);}  }
class C{  @SuppressWarnings("rawtypes") public ExcC14NParameterSpec(List prefixList){  if (prefixList == null) {    throw new NullPointerException("prefixList cannot be null");  }  List<?> copy=new ArrayList<>((List<?>)prefixList);  for (int i=0, size=copy.size(); i < size; i++) {    if (!(copy.get(i) instanceof String)) {      throw new ClassCastException("not a String");    }  }  @SuppressWarnings("unchecked") List<String> temp=(List<String>)copy;  preList=Collections.unmodifiableList(temp);}  }
class C{  public JobService removeJob(long id,Handler<AsyncResult<Void>> handler){  delegate.removeJob(id,handler);  return this;}  }
class C{  private <T,S>String flattenChangeIdentifiers(final List<ChangeSet<T,S>> changeSets){  final StringBuilder builder=new StringBuilder();  for (  ChangeSet<T,S> change : changeSets) {    builder.append(change.getIdentifier().toString()).append(INDENT);  }  return builder.toString();}  }
class C{  public REBIND(String detailMessage){  this(detailMessage,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public AiffTagTextField(String fieldId,String initialContent){  this.id=fieldId;  this.content=initialContent;}  }
class C{  protected String paramString(){  String orientationString=(orientation == HORIZONTAL ? "HORIZONTAL" : "VERTICAL");  return super.paramString() + ",blockIncrement=" + blockIncrement+ ",orientation="+ orientationString+ ",unitIncrement="+ unitIncrement;}  }
class C{  public void paintInternalFrameTitlePaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  ResourceOwner(String id,AMIdentity amIdentity,long authTime){  this.id=id;  this.amIdentity=amIdentity;  this.authTime=TimeUnit.MILLISECONDS.toSeconds(authTime);}  }
class C{  public PropertyException(String name,Object value){  super(Messages.format(Messages.NAME_VALUE,name,value.toString()));}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterMoreInfoManufacturer);}  }
class C{  public void write(final String s) throws IOException {  final int length=s.length();  int lengthx3=3 * length;  if (lengthx3 >= BYTES_MAX - count) {    flushBuffer();    if (lengthx3 > BYTES_MAX) {      final int start=0;      int split=length / CHARS_MAX;      final int chunks;      if (length % CHARS_MAX > 0)       chunks=split + 1; else       chunks=split;      int end_chunk=0;      for (int chunk=1; chunk <= chunks; chunk++) {        int start_chunk=end_chunk;        end_chunk=start + (int)((((long)length) * chunk) / chunks);        s.getChars(start_chunk,end_chunk,m_inputChars,0);        int len_chunk=(end_chunk - start_chunk);        final char c=m_inputChars[len_chunk - 1];        if (c >= 0xD800 && c <= 0xDBFF) {          end_chunk--;          len_chunk--;          if (chunk == chunks) {          }        }        this.write(m_inputChars,0,len_chunk);      }      return;    }  }  s.getChars(0,length,m_inputChars,0);  final char[] chars=m_inputChars;  final int n=length;  final byte[] buf_loc=m_outputBytes;  int count_loc=count;  int i=0;{    char c;    for (; i < n && (c=chars[i]) < 0x80; i++)     buf_loc[count_loc++]=(byte)c;  }  for (; i < n; i++) {    final char c=chars[i];    if (c < 0x80)     buf_loc[count_loc++]=(byte)(c); else     if (c < 0x800) {      buf_loc[count_loc++]=(byte)(0xc0 + (c >> 6));      buf_loc[count_loc++]=(byte)(0x80 + (c & 0x3f));    } else     if (c >= 0xD800 && c <= 0xDBFF) {      char high, low;      high=c;      i++;      low=chars[i];      buf_loc[count_loc++]=(byte)(0xF0 | (((high + 0x40) >> 8) & 0xf0));      buf_loc[count_loc++]=(byte)(0x80 | (((high + 0x40) >> 2) & 0x3f));      buf_loc[count_loc++]=(byte)(0x80 | ((low >> 6) & 0x0f) + ((high << 4) & 0x30));      buf_loc[count_loc++]=(byte)(0x80 | (low & 0x3f));    } else {      buf_loc[count_loc++]=(byte)(0xe0 + (c >> 12));      buf_loc[count_loc++]=(byte)(0x80 + ((c >> 6) & 0x3f));      buf_loc[count_loc++]=(byte)(0x80 + (c & 0x3f));    }  }  count=count_loc;}  }
class C{  public void importSubConfig(String subConfigName,String exportedSubConfigName) throws SMSException, SSOException {}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.ClientPseudonymElement createClientPseudonymElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.ClientPseudonymElementImpl();}  }
class C{  public static void addAttributeToMapAsString(Attribute attribute,Map<String,Set<String>> map){  map.put(attribute.getAttributeDescriptionAsString(),getAttributeValuesAsStringSet(attribute));}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  OpenCamera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.getCamera().setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public QuickSetupCli(CliApplication cliApp,Launcher launcher){  this.cliApp=cliApp;  this.launcher=launcher;}  }
class C{  public Dimension maximumLayoutSize(Container target){  return new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE);}  }
class C{  private PolicyResponse processPolicyRequest(PolicyRequest req,PLLAuditor auditor) throws PolicyEvaluationException {  if (debug.messageEnabled()) {    debug.message("PolicyRequestHandler.processPolicyRequest(): " + " req received:\n" + req.toXMLString());  }  PolicyResponse policyRes=new PolicyResponse();  String requestId=req.getRequestId();  policyRes.setRequestId(requestId);  String appSSOTokenIDStr=req.getAppSSOToken();  SSOToken appToken=null;  Map<String,Set<String>> appAttributes;  try {    appToken=getSSOToken(appSSOTokenIDStr,null);    appAttributes=IdUtils.getIdentity(appToken).getAttributes();  } catch (  IdRepoException|SSOException|PolicyException pe) {    if (debug.warningEnabled()) {      debug.warning("PolicyRequestHandler: Invalid app sso token, " + appSSOTokenIDStr);    }    throw new PolicyEvaluationException(PolicyResponse.APP_SSO_TOKEN_INVALID,requestId);  }  AppTokenHandler.set(appToken);  auditor.setMethod(req.getMethodName());  auditor.setSsoToken(appToken);  auditor.setRealm(getFirstItem(appAttributes.get(EVALUATION_REALM),NO_REALM));  auditor.auditAccessAttempt();  if (req.getMethodID() == PolicyRequest.POLICY_REQUEST_ADD_POLICY_LISTENER) {    PolicyListenerRequest plReq=req.getPolicyListenerRequest();    boolean addListener=addPolicyListener(appToken,plReq,appAttributes);    if (addListener) {      policyRes.setMethodID(PolicyResponse.POLICY_ADD_LISTENER_RESPONSE);      auditor.auditAccessSuccess();    } else {      String[] objs={plReq.getNotificationURL()};      String message=ResBundleUtils.getString("failed.add.policy.listener",objs);      policyRes.setExceptionMsg(message);      policyRes.setMethodID(PolicyResponse.POLICY_EXCEPTION);      auditor.auditAccessFailure(message);    }    return policyRes;  }  if (req.getMethodID() == PolicyRequest.POLICY_REQUEST_REMOVE_POLICY_LISTENER) {    RemoveListenerRequest rmReq=req.getRemoveListenerRequest();    boolean removeListener=removePolicyListener(appToken,rmReq,appAttributes);    if (removeListener) {      policyRes.setMethodID(PolicyResponse.POLICY_REMOVE_LISTENER_RESPONSE);      auditor.auditAccessSuccess();    } else {      String[] objs={rmReq.getNotificationURL()};      String message=ResBundleUtils.getString("failed.remove.policy.listener",objs);      policyRes.setExceptionMsg(message);      policyRes.setMethodID(PolicyResponse.POLICY_EXCEPTION);      auditor.auditAccessFailure(message);    }    return policyRes;  }  if (req.getMethodID() == PolicyRequest.POLICY_REQUEST_ADVICES_HANDLEABLE_BY_AM_REQUEST) {    if (debug.messageEnabled()) {      debug.message("PolicyRequestHandler: request to get  " + " advicesHandleableByAM");    }    try {      Set advices=PolicyConfig.getAdvicesHandleableByAM();      policyRes.setAdvicesHandleableByAMResponse(new AdvicesHandleableByAMResponse(advices));      policyRes.setMethodID(PolicyResponse.POLICY_ADVICES_HANDLEABLE_BY_AM_RESPONSE);      auditor.auditAccessSuccess();    } catch (    PolicyException pe) {      if (debug.warningEnabled()) {        debug.warning("PolicyRequestHandler: could not get " + " advicesHandleableByAM",pe);      }      throw new PolicyEvaluationException(ResBundleUtils.rbName,"could_not_get_advices_handleable_by_am",null,pe,requestId);    }    if (debug.messageEnabled()) {      debug.message("PolicyRequestHandler: returning  " + " advicesHandleableByAM policy response");    }    return policyRes;  }  if (req.getMethodID() == PolicyRequest.POLICY_REQUEST_GET_RESOURCE_RESULTS) {    ResourceResultRequest resourceResultReq=req.getResourceResultRequest();    String userSSOTokenIDStr=resourceResultReq.getUserSSOToken();    SSOToken userToken=null;    if ((userSSOTokenIDStr != null) && !userSSOTokenIDStr.equals(PolicyUtils.EMPTY_STRING) && !userSSOTokenIDStr.equals(PolicyUtils.NULL_STRING)) {      try {        userToken=getSSOToken(userSSOTokenIDStr,appToken);      } catch (      PolicyException pe) {        if (debug.warningEnabled()) {          debug.warning("PolicyRequestHandler: Invalid user sso token, " + userSSOTokenIDStr,pe);        }        throw new PolicyEvaluationException(ResBundleUtils.rbName,"user_sso_token_invalid",null,null,requestId);      }    }    Set resourceResults=new HashSet();    ResourceResults resourceRst=null;    Set responseAttributes=resourceResultReq.getResponseAttributes();    debug.message("PolicyRequestHandler.processPolicyRequest(): respAttrs={}",responseAttributes);    Map<String,Set<String>> responseAttributeValues=null;    if ((responseAttributes != null) && (userToken != null)) {      responseAttributeValues=getResponseAttributeValues(userToken,responseAttributes);    }    String serviceName=resourceResultReq.getServiceName();    String resourceName=resourceResultReq.getResourceName();    String resourceScope=resourceResultReq.getResourceScope();    if ((resourceScope != null) && resourceScope.equals(ResourceResultRequest.RESPONSE_ATTRIBUTES_ONLY)) {      ResourceResult resResult=new ResourceResult(resourceName,new PolicyDecision());      Set results=new HashSet();      results.add(resResult);      resourceRst=new ResourceResults(results);    } else {      Map envParameters=resourceResultReq.getEnvParms();      try {        convertEnvParams(envParameters);      } catch (      PolicyException pe) {        debug.error("PolicyRequestHandler: Invalid env parameters",pe);        throw new PolicyEvaluationException(ResBundleUtils.rbName,"invalid_env_parameters",null,pe,requestId);      }      PolicyEvaluator policyEvaluator=null;      try {        policyEvaluator=getPolicyEvaluator(appToken,serviceName,appAttributes);        resourceRst=new ResourceResults(policyEvaluator.getResourceResults(userToken,resourceName,resourceScope,envParameters));        if (debug.messageEnabled()) {          debug.message("PolicyRequestHandler.processPolicyRequest():" + " resource result:\n" + resourceRst.toXML());        }      } catch (      Exception se) {        debug.error("PolicyRequestHandler: Evaluation error",se);        throw new PolicyEvaluationException(ResBundleUtils.rbName,"evaluation_error",null,se,requestId);      }    }    resourceRst.setResponseDecisions(responseAttributeValues);    resourceResults.addAll(resourceRst.getResourceResults());    policyRes.setResourceResults(resourceResults);    policyRes.setMethodID(PolicyResponse.POLICY_RESPONSE_RESOURCE_RESULT);    auditor.auditAccessSuccess();    return policyRes;  }  debug.error("PolicyRequestHandler: Invalid policy request format");  throw new PolicyEvaluationException(ResBundleUtils.rbName,"invalid_policy_request_format",null,null);}  }
class C{  public Object clone(){  SimpleAttributeSet attr;  try {    attr=(SimpleAttributeSet)super.clone();    attr.table=(LinkedHashMap)table.clone();  } catch (  CloneNotSupportedException cnse) {    attr=null;  }  return attr;}  }
class C{  private boolean verifyRegistrationSignature(HttpServletRequest request,ProviderDescriptorType remoteDescriptor,String remoteEntityId,boolean isIDP) throws SAMLException, FSException {  FSUtils.debug.message("Entered FSRegistrationRequestServlet::verifyRegistrationSignature");  X509Certificate cert=KeyUtil.getVerificationCert(remoteDescriptor,remoteEntityId,isIDP);  if (cert == null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSRegistrationRequestServlet.verifyRegistrationSignature:" + "couldn't obtain this site's cert .");    }    throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT));  }  boolean isValidSign=FSSignatureUtil.verifyRequestSignature(request,cert);  if (!isValidSign) {    FSUtils.debug.error("Registration request is not properly signed");    return false;  } else {    FSUtils.debug.message("Registration request is properly signed");    return true;  }}  }
class C{  public void removeTreeWillExpandListener(TreeWillExpandListener tel){  listenerList.remove(TreeWillExpandListener.class,tel);}  }
class C{  void loadData() throws java.io.IOException {  InputStream input=null;  try {    input=UrlUtil.openStream(url);    ByteArrayOutputStream stream=new ByteArrayOutputStream();    StreamUtil.transferBytes(UrlUtil.openStream(url),stream);    data=stream.toByteArray();  }  finally {    if (input != null) {      input.close();    }  }}  }
class C{  public void testMac12() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, IllegalStateException, InvalidKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] b={(byte)0,(byte)0,(byte)0,(byte)0,(byte)0};  byte[] upd={(byte)5,(byte)4,(byte)3,(byte)2,(byte)1,(byte)0};  SecretKeySpec scs=new SecretKeySpec(b,"SHA1");  for (int i=0; i < macs.length; i++) {    macs[i].init(scs);    byte[] res1=macs[i].doFinal();    byte[] res2=macs[i].doFinal();    assertEquals("Results are not the same",IntegralToString.bytesToHexString(res1,false),IntegralToString.bytesToHexString(res2,false));    res2=macs[i].doFinal(upd);    macs[i].update(upd);    res1=macs[i].doFinal();    assertEquals("Results are not the same",IntegralToString.bytesToHexString(res1,false),IntegralToString.bytesToHexString(res2,false));  }}  }
class C{  public synchronized void replaceItem(String newValue,int index){  remove(index);  add(newValue,index);}  }
class C{  public InetUnixAddress(String path){  this(path.getBytes(StandardCharsets.UTF_8));}  }
class C{  public void printOptions(){  for (ListIterator it=theOptions.listIterator(); it.hasNext(); ) {    Option opt=(Option)it.next();    System.out.print("OPT =" + opt.getArgLetter());    String arg=opt.getArgument();    if (arg != null) {      System.out.print(" " + arg);    }    System.out.println();  }}  }
class C{  public static List<QrSegment> makeSegments(String text){  if (text == null)   throw new NullPointerException();  List<QrSegment> result=new ArrayList<>();  if (text.equals(""))   return result; else   if (NUMERIC_REGEX.matcher(text).matches())   result.add(makeNumeric(text)); else   if (ALPHANUMERIC_REGEX.matcher(text).matches())   result.add(makeAlphanumeric(text)); else   result.add(makeBytes(text.getBytes(StandardCharsets.UTF_8)));  return result;}  }
class C{  public RedirectException(){  super();}  }
class C{  public static void deleteSAML2Token(String primaryKey) throws SAML2TokenRepositoryException {  SAML2TokenRepositoryHolder.getRepo().deleteSAML2Token(primaryKey);}  }
class C{  public static Class<?>[] toTypeArray(String[] s) throws ClassNotFoundException {  if (s == null)   return null;  Class<?>[] c=new Class[s.length];  for (int i=0; i < s.length; i++) {    c[i]=forName(s[i]);  }  return c;}  }
class C{  private static float[] RGBtoCMYK(float[] rgb,float[] cmyk){  if (cmyk == null) {    cmyk=new float[4];  }  float max=ColorModelHSL.max(rgb[0],rgb[1],rgb[2]);  if (max > 0.0f) {    cmyk[0]=1.0f - rgb[0] / max;    cmyk[1]=1.0f - rgb[1] / max;    cmyk[2]=1.0f - rgb[2] / max;  } else {    cmyk[0]=0.0f;    cmyk[1]=0.0f;    cmyk[2]=0.0f;  }  cmyk[3]=1.0f - max;  return cmyk;}  }
class C{  protected static void unconfigureMDC(){  MDC.remove(TRACE_ID_MDC_KEY);  MDC.remove(SPAN_JSON_MDC_KEY);}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public void reset(){  is_occupied=false;  backtrack_door=null;  section_no_of_backtrack_door=0;  room_ripped=false;  adjustment=MazeAdjustment.NONE;}  }
class C{  public EulerAngle(double x,double y,double z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public int next(){  if (text == null) {    return NULLORDER;  }  NormalizerBase.Mode textMode=text.getMode();  NormalizerBase.Mode ownerMode=CollatorUtilities.toNormalizerMode(owner.getDecomposition());  if (textMode != ownerMode) {    text.setMode(ownerMode);  }  if (buffer != null) {    if (expIndex < buffer.length) {      return strengthOrder(buffer[expIndex++]);    } else {      buffer=null;      expIndex=0;    }  } else   if (swapOrder != 0) {    if (Character.isSupplementaryCodePoint(swapOrder)) {      char[] chars=Character.toChars(swapOrder);      swapOrder=chars[1];      return chars[0] << 16;    }    int order=swapOrder << 16;    swapOrder=0;    return order;  }  int ch=text.next();  if (ch == NormalizerBase.DONE) {    return NULLORDER;  }  int value=ordering.getUnicodeOrder(ch);  if (value == RuleBasedCollator.UNMAPPED) {    swapOrder=ch;    return UNMAPPEDCHARVALUE;  } else   if (value >= RuleBasedCollator.CONTRACTCHARINDEX) {    value=nextContractChar(ch);  }  if (value >= RuleBasedCollator.EXPANDCHARINDEX) {    buffer=ordering.getExpandValueList(value);    expIndex=0;    value=buffer[expIndex++];  }  if (ordering.isSEAsianSwapping()) {    int consonant;    if (isThaiPreVowel(ch)) {      consonant=text.next();      if (isThaiBaseConsonant(consonant)) {        buffer=makeReorderedBuffer(consonant,value,buffer,true);        value=buffer[0];        expIndex=1;      } else       if (consonant != NormalizerBase.DONE) {        text.previous();      }    }    if (isLaoPreVowel(ch)) {      consonant=text.next();      if (isLaoBaseConsonant(consonant)) {        buffer=makeReorderedBuffer(consonant,value,buffer,true);        value=buffer[0];        expIndex=1;      } else       if (consonant != NormalizerBase.DONE) {        text.previous();      }    }  }  return strengthOrder(value);}  }
class C{  @Override public void publish(LogRecord logRecord){  if (MonitoringUtil.isRunning() && dbLogHandlerForMonitoring != null) {    dbLogHandlerForMonitoring.incHandlerRequestCount(1);  }  if (!isLoggable(logRecord)) {    return;  }synchronized (this) {    recordBuffer.add(logRecord);    if (recordBuffer.size() >= recCountLimit) {      if (Debug.messageEnabled()) {        Debug.message(tableName + ":DBHandler:.publish(): got " + recordBuffer.size()+ " records, Limit "+ recCountLimit+ " writing all");      }      nonBlockingFlush();    }  }}  }
class C{  public ShapeTile[] calculate_tree_shapes(BrdOutline p_board_outline){  ShapeTile[] result;  if (p_board_outline.keepout_outside_outline_generated()) {    ShapeTile[] convex_shapes=p_board_outline.get_keepout_area().split_to_convex();    if (convex_shapes == null)     return new ShapeTile[0];    Collection<ShapeTile> tree_shape_list=new LinkedList<ShapeTile>();    for (int layer_no=0; layer_no < r_board.layer_structure.size(); ++layer_no) {      for (int index=0; index < convex_shapes.length; ++index) {        ShapeTile curr_convex_shape=convex_shapes[index];        int offset_width=get_clearance_compensation(p_board_outline.clearance_idx(),0);        curr_convex_shape=curr_convex_shape.enlarge(offset_width);        tree_shape_list.add(curr_convex_shape);      }    }    result=new ShapeTile[tree_shape_list.size()];    Iterator<ShapeTile> it=tree_shape_list.iterator();    for (int index=0; index < result.length; ++index) {      result[index]=it.next();    }  } else {    result=new ShapeTile[p_board_outline.line_count() * r_board.layer_structure.size()];    int half_width=BrdOutline.HALF_WIDTH;    PlaLineInt[] curr_line_arr=new PlaLineInt[3];    int curr_no=0;    for (int layer_no=0; layer_no < r_board.layer_structure.size(); ++layer_no) {      for (int shape_no=0; shape_no < p_board_outline.shape_count(); ++shape_no) {        ShapeSegments curr_outline_shape=p_board_outline.get_shape(shape_no);        int border_line_count=curr_outline_shape.border_line_count();        curr_line_arr[0]=curr_outline_shape.border_line(border_line_count - 1);        for (int iindex=0; iindex < border_line_count; ++iindex) {          curr_line_arr[1]=curr_outline_shape.border_line(iindex);          curr_line_arr[2]=curr_outline_shape.border_line((iindex + 1) % border_line_count);          Polyline tmp_polyline=new Polyline(curr_line_arr);          int cmp_value=get_clearance_compensation(p_board_outline.clearance_idx(),0);          result[curr_no]=tmp_polyline.offset_shape(half_width + cmp_value,0);          ++curr_no;          curr_line_arr[0]=curr_line_arr[1];        }      }    }  }  return result;}  }
class C{  public boolean hasXfaForm(){  return xfaForm != null && xfaForm.isXfaPresent();}  }
class C{  public FieldView(Element elem){  super(elem);}  }
class C{  protected void updateDomainStatus(SSOToken token,String orgDN,String status) throws AMException {  try {    String domainName=getCanonicalDomain(token,orgDN);    if ((domainName != null) && (domainName.length() > 0)) {      DomainComponentTree dcTree=new DomainComponentTree(token,new Guid(DCTREE_START_DN));      dcTree.setDomainStatus(domainName,status);    } else {      debug.warning("DCTree.updateDomainStatus(): value for " + IPLANET_DOMAIN_NAME_ATTR + " attribute "+ "null or empty");    }  } catch (  UMSException ue) {    debug.error("DCTree.removeDomain(): ",ue);    throw new AMException(AMSDKBundle.getString("356"),"356");  }}  }
class C{  public boolean correct_connection_to_pin(boolean p_at_start,TraceAngleRestriction p_angle_restriction){  if (check_connection_to_pin(p_at_start))   return false;  Polyline trace_polyline;  Collection<BrdItem> contact_list;  if (p_at_start) {    trace_polyline=polyline();    contact_list=get_start_contacts();  } else {    trace_polyline=polyline().reverse();    contact_list=get_end_contacts();  }  BrdAbitPin contact_pin=null;  for (  BrdItem curr_contact : contact_list) {    if (curr_contact instanceof BrdAbitPin) {      contact_pin=(BrdAbitPin)curr_contact;      break;    }  }  if (contact_pin == null)   return false;  Collection<BrdTraceExitRestriction> trace_exit_restrictions=contact_pin.get_trace_exit_restrictions(get_layer());  if (trace_exit_restrictions.isEmpty())   return false;  PlaShape pin_shape=contact_pin.get_shape(get_layer() - contact_pin.first_layer());  if (!(pin_shape instanceof ShapeTile))   return false;  ShapeTile a_pin_tile=(ShapeTile)pin_shape;  PlaPointInt pin_center=contact_pin.center_get();  final double edge_to_turn_dist=r_board.brd_rules.get_pin_edge_to_turn_dist();  if (edge_to_turn_dist < 0)   return false;  double curr_clearance=r_board.get_clearance(clearance_idx(),contact_pin.clearance_idx(),get_layer());  double add_width=Math.max(edge_to_turn_dist,curr_clearance + 1);  ShapeTile offset_pin_shape=a_pin_tile.offset(get_half_width() + add_width);  if (offset_pin_shape.is_IntBox()) {    offset_pin_shape=offset_pin_shape.bounding_box();  } else   if (p_angle_restriction.is_limit_45()) {    offset_pin_shape=offset_pin_shape.bounding_octagon();  }  ArrayList<PlaToupleInt> entries=offset_pin_shape.entrance_points(trace_polyline);  if (entries.size() == 0)   return false;  PlaToupleInt latest_entry_tuple=entries.get(entries.size() - 1);  PlaPointFloat trace_entry_location_approx=trace_polyline.plaline(latest_entry_tuple.v_a).intersection_approx(offset_pin_shape.border_line(latest_entry_tuple.v_b));  if (trace_entry_location_approx.is_NaN())   return false;  double min_exit_corner_distance=Double.MAX_VALUE;  PlaLineInt nearest_pin_exit_ray=null;  int nearest_border_line_no=-1;  PlaDirection pin_exit_direction=null;  PlaPointFloat nearest_exit_corner=null;  final double TOLERANCE=1;  for (  BrdTraceExitRestriction curr_exit_restriction : trace_exit_restrictions) {    int curr_intersecting_border_line_no=offset_pin_shape.intersecting_border_line_no(pin_center,curr_exit_restriction.direction);    PlaLineInt curr_pin_exit_ray=new PlaLineInt(pin_center,curr_exit_restriction.direction);    PlaPointFloat curr_exit_corner=curr_pin_exit_ray.intersection_approx(offset_pin_shape.border_line(curr_intersecting_border_line_no));    double curr_exit_corner_distance=curr_exit_corner.distance_square(trace_entry_location_approx);    boolean new_nearest_corner_found=false;    if (curr_exit_corner_distance + TOLERANCE < min_exit_corner_distance) {      new_nearest_corner_found=true;    } else     if (curr_exit_corner_distance < min_exit_corner_distance + TOLERANCE) {      for (int index=1; index < trace_polyline.corner_count(); ++index) {        PlaPointFloat curr_trace_corner=trace_polyline.corner_approx(index);        double curr_trace_corner_distance=curr_trace_corner.distance_square(curr_exit_corner);        double old_trace_corner_distance=curr_trace_corner.distance_square(nearest_exit_corner);        if (curr_trace_corner_distance + TOLERANCE < old_trace_corner_distance) {          new_nearest_corner_found=true;          break;        } else         if (curr_trace_corner_distance > old_trace_corner_distance + TOLERANCE) {          break;        }      }    }    if (new_nearest_corner_found) {      min_exit_corner_distance=curr_exit_corner_distance;      nearest_pin_exit_ray=curr_pin_exit_ray;      nearest_border_line_no=curr_intersecting_border_line_no;      pin_exit_direction=curr_exit_restriction.direction;      nearest_exit_corner=curr_exit_corner;    }  }  PlaLineInt[] curr_lines;  int corner_count=offset_pin_shape.border_line_count();  int clock_wise_side_diff=(nearest_border_line_no - latest_entry_tuple.v_b + corner_count) % corner_count;  int counter_clock_wise_side_diff=(latest_entry_tuple.v_b - nearest_border_line_no + corner_count) % corner_count;  int curr_border_line_no=nearest_border_line_no;  if (counter_clock_wise_side_diff <= clock_wise_side_diff) {    curr_lines=new PlaLineInt[counter_clock_wise_side_diff + 3];    for (int index=0; index <= counter_clock_wise_side_diff; ++index) {      curr_lines[index + 1]=offset_pin_shape.border_line(curr_border_line_no);      curr_border_line_no=(curr_border_line_no + 1) % corner_count;    }  } else {    curr_lines=new PlaLineInt[clock_wise_side_diff + 3];    for (int index=0; index <= clock_wise_side_diff; ++index) {      curr_lines[index + 1]=offset_pin_shape.border_line(curr_border_line_no);      curr_border_line_no=(curr_border_line_no - 1 + corner_count) % corner_count;    }  }  curr_lines[0]=nearest_pin_exit_ray;  curr_lines[curr_lines.length - 1]=trace_polyline.plaline(latest_entry_tuple.v_a);  Polyline border_polyline=new Polyline(curr_lines);  if (!r_board.check_trace(border_polyline,get_layer(),get_half_width(),net_nos,clearance_idx())) {    return false;  }  PlaLineInt[] cut_lines=new PlaLineInt[trace_polyline.plaline_len(-latest_entry_tuple.v_a + 1)];  cut_lines[0]=curr_lines[curr_lines.length - 2];  for (int index=1; index < cut_lines.length; ++index) {    cut_lines[index]=trace_polyline.plaline(latest_entry_tuple.v_a + index - 1);  }  Polyline cut_polyline=new Polyline(cut_lines);  Polyline changed_polyline;  if (cut_polyline.corner_first().equals(cut_polyline.corner_last())) {    changed_polyline=border_polyline;  } else {    changed_polyline=border_polyline.combine(cut_polyline);  }  if (!p_at_start) {    changed_polyline=changed_polyline.reverse();  }  change_polyline(changed_polyline);  PlaLineIntAlist s_lines=new PlaLineIntAlist(3);  s_lines.add(new PlaLineInt(pin_center,pin_exit_direction.rotate_45_deg(2)));  s_lines.add(nearest_pin_exit_ray);  s_lines.add(offset_pin_shape.border_line(nearest_border_line_no));  Polyline exit_line_segment=new Polyline(s_lines);  r_board.insert_trace(exit_line_segment,get_layer(),get_half_width(),net_nos,clearance_idx(),ItemFixState.SHOVE_FIXED);  return true;}  }
class C{  public ValidationEventImpl(int _severity,String _message,ValidationEventLocator _locator,Throwable _linkedException){  setSeverity(_severity);  this.message=_message;  this.locator=_locator;  this.linkedException=_linkedException;}  }
class C{  public int polyline_find_line_idx(PlaPointInt p_point){  int idx_max=polyline.plaline_len(-1);  for (int index=1; index < idx_max; index++) {    PlaSegmentInt curr_line_segment=polyline.segment_get(index);    if (curr_line_segment.contains(p_point))     return index;  }  return -1;}  }
class C{  public Request followUpRequest() throws IOException {  if (userResponse == null)   throw new IllegalStateException();  Connection connection=streamAllocation.connection();  Route route=connection != null ? connection.getRoute() : null;  Proxy selectedProxy=route != null ? route.proxy() : client.getProxy();  int responseCode=userResponse.code();  final String method=userRequest.method();switch (responseCode) {case HTTP_PROXY_AUTH:    if (selectedProxy.type() != Proxy.Type.HTTP) {      throw new ProtocolException("Received HTTP_PROXY_AUTH (407) code while not using proxy");    }case HTTP_UNAUTHORIZED:  return OkHeaders.processAuthHeader(client.getAuthenticator(),userResponse,selectedProxy);case HTTP_PERM_REDIRECT:case HTTP_TEMP_REDIRECT:if (!method.equals("GET") && !method.equals("HEAD")) {  return null;}case HTTP_MULT_CHOICE:case HTTP_MOVED_PERM:case HTTP_MOVED_TEMP:case HTTP_SEE_OTHER:if (!client.getFollowRedirects()) return null;String location=userResponse.header("Location");if (location == null) return null;HttpUrl url=userRequest.url().resolve(location);if (url == null) return null;boolean sameScheme=url.scheme().equals(userRequest.url().scheme());if (!sameScheme && !client.getFollowSslRedirects()) return null;Request.Builder requestBuilder=userRequest.newBuilder();if (HttpMethod.permitsRequestBody(method)) {if (HttpMethod.redirectsToGet(method)) {requestBuilder.method("GET",null);} else {requestBuilder.method(method,null);}requestBuilder.removeHeader("Transfer-Encoding");requestBuilder.removeHeader("Content-Length");requestBuilder.removeHeader("Content-Type");}if (!sameConnection(url)) {requestBuilder.removeHeader("Authorization");}return requestBuilder.url(url).build();default :return null;}}  }
class C{  @Override public void flush() throws IOException {  OutputStream output=m_streams.get();  if (null != output) {    output.flush();  }}  }
class C{  private void pop(final String desc){  char c=desc.charAt(0);  if (c == '(') {    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);  } else   if (c == 'J' || c == 'D') {    pop(2);  } else {    pop(1);  }}  }
class C{  public static Throwable unwrapInvocationTargetException(Throwable t){  if (t instanceof InvocationTargetException && t.getCause() != null) {    return t.getCause();  }  return t;}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (obj instanceof ECFieldF2m) {    return ((m == ((ECFieldF2m)obj).m) && (Arrays.equals(ks,((ECFieldF2m)obj).ks)));  }  return false;}  }
class C{  DynamicGroup(AttrSet attrSet) throws UMSException {  this(TemplateManager.getTemplateManager().getCreationTemplate(_class,null),attrSet);}  }
class C{  public SMSDataEntry(String dn,Map attributeValues){  this.dn=dn;  this.attributeValues=new HashMap();  parseAttributeValues(attributeValues);}  }
class C{  public long length() throws java.io.IOException {  return byteSource.length();}  }
class C{  boolean isNormalized(){  for (  AttributeValue attrValue : values) {    if (attrValue.isNormalized()) {      return true;    }  }  return false;}  }
class C{  public synchronized void flush() throws IOException {  if (sink != null) {synchronized (sink) {      sink.notifyAll();    }  }}  }
class C{  private synchronized void deductCurrentThreadCount(){  currentThreadCount--;  busyThreadCount--;  notify();}  }
class C{  public ListView(Element elem){  super(elem,View.Y_AXIS);}  }
class C{  @Modified void modified(ComponentContext compContext) throws Exception {  logger.debug("Handle repository service modified notification");  JsonValue newConfig=null;  try {    newConfig=enhancedConfig.getConfigurationAsJson(compContext);  } catch (  RuntimeException ex) {    logger.warn("Configuration invalid and could not be parsed, can not start OrientDB repository",ex);    throw ex;  }  if (existingConfig != null && !existingConfig.get("embeddedServer").equals(newConfig.get("embeddedServer"))) {    embeddedServer.modified(newConfig);  }  if (existingConfig != null && user.equals(getUser(newConfig)) && password.equals(getPassword(newConfig)) && dbURL.equals(getDBUrl(newConfig)) && poolMinSize == getPoolMinSize(newConfig) && poolMaxSize == getPoolMaxSize(newConfig)) {    logger.info("(Re-)initialize repository with latest configuration.");  } else {    logger.info("Re-initialize repository with latest configuration - including DB pool setting changes.");    DBHelper.closePool(dbURL,pool);  }  init(newConfig);  if (bootRepo != null) {    bootRepo.init(newConfig);  }  existingConfig=newConfig;  logger.debug("Repository service modified");}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  public static void cassandraSetupComplete(){  lock.countDown();}  }
class C{  static <T>void any(Promise<T> parent,Promise<T>[] childPromises){  final AtomicBoolean done=new AtomicBoolean();  final Consumer<Promise<T>> runnable=null;  for (  Promise<T> childPromise : childPromises) {    childPromise.whenComplete(runnable);  }}  }
class C{  private static void montgomery(Montgomery q,Montgomery p,Polynomial25519 qmp,Montgomery qpq,Montgomery qpp){  Montgomery qprime=new Montgomery(q);  qprime.x.sum(q.z);  qprime.z.diff(q.x);  Montgomery pprime=new Montgomery(p);  pprime.x.sum(p.z);  pprime.z.diff(p.x);  pprime.x.mult(qprime.z);  pprime.z.mult(qprime.x);  qprime.x.square();  qprime.z.square();  qpp.x=new Polynomial25519(pprime.x);  qpp.z=new Polynomial25519(pprime.z);  qpp.x.sum(pprime.z);  qpp.z.diff(pprime.x);  qpp.x.square();  qpp.z.square();  qpp.z.mult(qmp);  qpq.x=new Polynomial25519(qprime.x);  qpq.z=new Polynomial25519(qprime.x);  qpq.x.mult(qprime.z);  qpq.z.diff(qprime.z);  Polynomial25519 t=new Polynomial25519(qpq.z);  qpq.z.mult(121665);  qpq.z.sum(qprime.x);  qpq.z.mult(t);}  }
class C{  @ConstructorProperties({"outsideBorder","insideBorder"}) public CompoundBorder(Border outsideBorder,Border insideBorder){  this.outsideBorder=outsideBorder;  this.insideBorder=insideBorder;}  }
class C{  public static SAML11RequestedSecurityToken createSAML11Token(String realm,String idpEntityId,String spEntityId,Object session,String spTokenIssuerName,String authMethod,boolean wantAssertionSigned) throws WSFederationException {  final IDPSSOConfigElement idpConfig=metaManager.getIDPSSOConfig(realm,idpEntityId);  if (idpConfig == null) {    debug.error("Cannot find configuration for IdP " + idpEntityId);    throw new WSFederationException(WSFederationUtils.bundle.getString("unableToFindIDPConfiguration"));  }  String authSSOInstant;  try {    authSSOInstant=WSFederationUtils.sessionProvider.getProperty(session,SessionProvider.AUTH_INSTANT)[0];  } catch (  SessionException se) {    throw new WSFederationException(se);  }  IDPAttributeMapper attrMapper=getIDPAttributeMapper(WSFederationMetaUtils.getAttributes(idpConfig));  IDPAccountMapper accountMapper=getIDPAccountMapper(WSFederationMetaUtils.getAttributes(idpConfig));  List attributes=attrMapper.getAttributes(session,idpEntityId,spEntityId,realm);  final Date authInstant;  if (StringUtils.isEmpty(authSSOInstant)) {    authInstant=newDate();  } else {    try {      authInstant=DateUtils.stringToDate(authSSOInstant);    } catch (    ParseException pe) {      throw new WSFederationException(pe);    }  }  NameIdentifier nameIdentifier=accountMapper.getNameID(session,realm,idpEntityId,spEntityId);  int notBeforeSkew=WSFederationMetaUtils.getIntAttribute(idpConfig,SAML2Constants.ASSERTION_NOTBEFORE_SKEW_ATTRIBUTE,SAML2Constants.NOTBEFORE_ASSERTION_SKEW_DEFAULT);  int effectiveTime=WSFederationMetaUtils.getIntAttribute(idpConfig,SAML2Constants.ASSERTION_EFFECTIVE_TIME_ATTRIBUTE,SAML2Constants.ASSERTION_EFFECTIVE_TIME);  String certAlias=WSFederationMetaUtils.getAttribute(idpConfig,SAML2Constants.SIGNING_CERT_ALIAS);  if (wantAssertionSigned && certAlias == null) {    debug.error("SP wants signed assertion, but no signing cert is configured");    throw new WSFederationException(WSFederationUtils.bundle.getString("noIdPCertAlias"));  }  if (!wantAssertionSigned) {    certAlias=null;  }  return new SAML11RequestedSecurityToken(realm,spTokenIssuerName,idpEntityId,notBeforeSkew,effectiveTime,certAlias,authMethod,authInstant,nameIdentifier,attributes);}  }
class C{  public ErrorInfoParser(String errorInfo){  super(errorInfo);}  }
class C{  static boolean createFile(File f) throws IOException {  if (f != null) {    File parent=f.getParentFile();    if (!parent.exists()) {      parent.mkdirs();    }    return f.createNewFile();  }  return false;}  }
class C{  protected int drawSelectedText(Graphics g,int x,int y,int p0,int p1) throws BadLocationException {  g.setColor(selected);  Document doc=getDocument();  Segment s=SegmentCache.getSharedSegment();  doc.getText(p0,p1 - p0,s);  int ret=Utilities.drawTabbedText(this,s,x,y,g,this,p0);  SegmentCache.releaseSharedSegment(s);  return ret;}  }
class C{  public final void pull_tight_accuracy_set(int p_value){  if (settings_read_only)   return;  trace_pullt_min_move=p_value;  act_log.start_scope(LogfileScope.SET_PULL_TIGHT_ACCURACY,p_value);}  }
class C{  public void test_lastIndexOfSubListLjava_util_ListLjava_util_List(){  String string1="A-B-C-D-E-S-JF-SUB-G-H-I-J-SUBL-K-L-LIST-M-N--S-S-O-SUBLIS-P-Q-R-SUBLIST-S-T-U-V-W-X-Y-Z-END";  List list=new ArrayList();  try {    Collections.lastIndexOfSubList(null,list);    fail("Expected NullPointerException for null list first parameter");  } catch (  NullPointerException e) {  }  try {    Collections.lastIndexOfSubList(list,null);    fail("Expected NullPointerException for null list second parameter");  } catch (  NullPointerException e) {  }  testwithCharList(1,string1,"B",false);  testwithCharList(2,string1,"LIST",false);  testwithCharList(3,string1,"SUBLIST",false);  testwithCharList(4,string1,"END",false);  testwithCharList(5,string1,"NONE",false);  testwithCharList(6,"","",false);  testwithCharList(7,"LIST","",false);  testwithCharList(8,"","SUBLIST",false);}  }
class C{  public boolean addedOrRenamedAfter(CSN csn){  return csn.isOlderThan(entryADDDate) || csn.isOlderThan(entryMODDNDate);}  }
class C{  public synchronized void write() throws IOException {  if (classIDFile.exists())   if (!classIDFile.delete())   throw new IOException("Unable to delete the class IDs file.");  classIDFile.createNewFile();  FileWriter writer=new FileWriter(classIDFile);  try {    for (    ClassID classID : classesByName.values()) {      writer.write(classID.toString());      writer.write("\n");    }    writer.close();  }  finally {    writer.close();  }}  }
class C{  @Override public void endAccess(){  super.endAccess();  if (manager instanceof ClusterManagerBase) {    ((ClusterManagerBase)manager).registerSessionAtReplicationValve(this);  }}  }
class C{  public boolean isEmpty(){  return elements == 0;}  }
class C{  private void recordLogData(){  try {    int size=mRecordingData.size();    if (size == 0) {      return;    }    Vector<String> recordingData=new Vector<>(mRecordingData);    File logDir=Constants.getRecordDir(this);    logDir.mkdirs();    File logFile=new File(logDir,mRecordingFilename);    FileWriter logFileWriter=new FileWriter(logFile,true);    for (int i=0; i < size; i++) {      logFileWriter.append(recordingData.elementAt(i) + "\n");      mRecordingData.removeElementAt(0);    }    recordingData.removeAllElements();    logFileWriter.close();  } catch (  Exception e) {    Log.e(LOG_TAG,"recordLogData:Error writing the log to file. Exception: " + e.toString());  }}  }
class C{  protected void endMarkedContent(){  markedContentStack.pop();}  }
class C{  public JwtSessionManager(final KeyPair keyPair,final String cookieName,final String cookieDomain,final TimeService timeService,final Duration sessionTimeout,final SigningHandler handler){  this.keyPair=keyPair;  this.cookieName=cookieName;  this.cookieDomain=cookieDomain;  this.timeService=timeService;  this.sessionTimeout=sessionTimeout;  this.signingHandler=handler;}  }
class C{  public synchronized void start() throws Exception {  if (isRunning) {    return;  }  sslContext=new SSLContextBuilder().getSSLContext();  listener=new LDAPListener(findFreeSocketAddress(),getInstance(),Options.defaultOptions().set(CONNECT_MAX_BACKLOG,4096));  isRunning=true;}  }
class C{  @SuppressWarnings("unused") public static long parseUnsignedInt(byte[] bytes){  return parseUnsignedInt(bytes,0,bytes.length);}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof HOTPPrincipal)) {    return false;  }  HOTPPrincipal that=(HOTPPrincipal)o;  if (this.getName().equals(that.getName())) {    return true;  }  return false;}  }
class C{  public void invert() throws NoninvertibleTransformException {  double M00, M01, M02;  double M10, M11, M12;  double det;switch (state) {default :    stateError();  return;case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M01=m01;M02=m02;M10=m10;M11=m11;M12=m12;det=M00 * M11 - M01 * M10;if (Math.abs(det) <= Double.MIN_VALUE) {throw new NoninvertibleTransformException("Determinant is " + det);}m00=M11 / det;m10=-M10 / det;m01=-M01 / det;m11=M00 / det;m02=(M01 * M12 - M11 * M02) / det;m12=(M10 * M02 - M00 * M12) / det;break;case (APPLY_SHEAR | APPLY_SCALE):M00=m00;M01=m01;M10=m10;M11=m11;det=M00 * M11 - M01 * M10;if (Math.abs(det) <= Double.MIN_VALUE) {throw new NoninvertibleTransformException("Determinant is " + det);}m00=M11 / det;m10=-M10 / det;m01=-M01 / det;m11=M00 / det;break;case (APPLY_SHEAR | APPLY_TRANSLATE):M01=m01;M02=m02;M10=m10;M12=m12;if (M01 == 0.0 || M10 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}m10=1.0 / M01;m01=1.0 / M10;m02=-M12 / M10;m12=-M02 / M01;break;case (APPLY_SHEAR):M01=m01;M10=m10;if (M01 == 0.0 || M10 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}m10=1.0 / M01;m01=1.0 / M10;break;case (APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M02=m02;M11=m11;M12=m12;if (M00 == 0.0 || M11 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}m00=1.0 / M00;m11=1.0 / M11;m02=-M02 / M00;m12=-M12 / M11;break;case (APPLY_SCALE):M00=m00;M11=m11;if (M00 == 0.0 || M11 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}m00=1.0 / M00;m11=1.0 / M11;break;case (APPLY_TRANSLATE):m02=-m02;m12=-m12;break;case (APPLY_IDENTITY):break;}}  }
class C{  public void outline(Graphics2D g,Instruction inst){  TokenRange range=inst.getFile().getTokenRangeFor(inst);  if (range != null) {    outline(g,range);  }}  }
class C{  public void testAddBoldSpan(){  mRichTextView.formatSpan(0,5,RichTextView.FormatType.BOLD);  Object[] spans=mRichTextView.getSpans();  assertEquals(1,spans.length);  Object firstSpan=spans[0];  assertTrue(firstSpan instanceof StyleSpan);  assertTrue(((StyleSpan)firstSpan).getStyle() == Typeface.BOLD);}  }
class C{  public static void checkHTTPRequestLength(HttpServletRequest request) throws ServletException {  int maxContentLength=SAMLUtils.getMaxContentLength();  if (maxContentLength != 0) {    int length=request.getContentLength();    if (length == -1) {      throw new ServletException(bundle.getString("unknownLength"));    }    if (length > maxContentLength) {      if (debug.messageEnabled()) {        debug.message("FSUtils.checkHTTPRequestLength: " + "content length too large" + length);      }      throw new ServletException(bundle.getString("largeContentLength"));    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode12.class,args);}  }
class C{  public OpusWriter(){}  }
class C{  public void handleBtnSearchRequest(RequestInvocationEvent event){  bSearchForRealm=true;  forwardTo();}  }
class C{  public InternalErrorException(String message){  super(message);}  }
class C{  public void appendCell(byte value){  appendCell(String.valueOf(value));}  }
class C{  public int currentSegment(float[] coords){  if (isDone()) {    throw new NoSuchElementException("rect iterator out of bounds");  }  if (index == 5) {    return SEG_CLOSE;  }  coords[0]=(float)x;  coords[1]=(float)y;  if (index == 1 || index == 2) {    coords[0]+=(float)w;  }  if (index == 2 || index == 3) {    coords[1]+=(float)h;  }  if (affine != null) {    affine.transform(coords,0,coords,0,1);  }  return (index == 0 ? SEG_MOVETO : SEG_LINETO);}  }
class C{  public boolean whetherTheMethodIsOverriddenByMethodsInTheList(SMethodDef method,List<SMethodDef> methodList) throws SyntaxException {  if (methodList == null)   return false;  if (method.modifiers().contains(SModifier.STATIC))   return false;  if (null != findMethodWithSameSignature(method,methodList,true))   return true;  return false;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {  StringBuffer sb=new StringBuffer(2000);  StringBuffer namespaceBuffer=new StringBuffer(100);  String nsDeclaration="";  if (declareNS) {    namespaceBuffer.append(XACMLConstants.CONTEXT_NS_DECLARATION).append(XACMLConstants.SPACE);    namespaceBuffer.append(XACMLConstants.XSI_NS_URI).append(XACMLConstants.SPACE).append(XACMLConstants.CONTEXT_SCHEMA_LOCATION);  }  if (includeNSPrefix) {    nsDeclaration=XACMLConstants.CONTEXT_NS_PREFIX + ":";  }  sb.append("<").append(nsDeclaration).append(XACMLConstants.ENVIRONMENT).append(namespaceBuffer);  sb.append(">");  int length=0;  if (attributes != null) {    sb.append("\n");    length=attributes.size();    for (int i=0; i < length; i++) {      Attribute attr=(Attribute)attributes.get(i);      sb.append(attr.toXMLString(includeNSPrefix,false));    }  }  sb.append("</").append(nsDeclaration).append(XACMLConstants.ENVIRONMENT);  sb.append(">\n");  return sb.toString();}  }
