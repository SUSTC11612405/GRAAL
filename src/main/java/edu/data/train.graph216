class C{  private boolean test_float4_1D(){  CUarray array=new CUarray();  CUDA_ARRAY_DESCRIPTOR ad=new CUDA_ARRAY_DESCRIPTOR();  ad.Format=CU_AD_FORMAT_FLOAT;  ad.Width=sizeX;  ad.Height=1;  ad.NumChannels=4;  cuArrayCreate(array,ad);  Pointer pInput=Pointer.to(input_float4_1D);  cuMemcpyHtoA(array,0,pInput,sizeX * Sizeof.FLOAT * 4);  CUtexref texref=new CUtexref();  cuModuleGetTexRef(texref,module,"texture_float4_1D");  cuTexRefSetFilterMode(texref,CU_TR_FILTER_MODE_LINEAR);  cuTexRefSetAddressMode(texref,0,CU_TR_ADDRESS_MODE_CLAMP);  cuTexRefSetFlags(texref,CU_TRSF_NORMALIZED_COORDINATES);  cuTexRefSetFormat(texref,CU_AD_FORMAT_FLOAT,4);  cuTexRefSetArray(texref,array,CU_TRSA_OVERRIDE_FORMAT);  CUdeviceptr dOutput=new CUdeviceptr();  cuMemAlloc(dOutput,Sizeof.FLOAT * 4);  CUfunction function=new CUfunction();  cuModuleGetFunction(function,module,"test_float4_1D");  Pointer kernelParameters=Pointer.to(Pointer.to(dOutput),Pointer.to(new float[]{posX}));  cuLaunchKernel(function,1,1,1,1,1,1,0,null,kernelParameters,null);  cuCtxSynchronize();  float hOutput[]=new float[4];  cuMemcpyDtoH(Pointer.to(hOutput),dOutput,Sizeof.FLOAT * 4);  log("Result float4 1D " + Arrays.toString(hOutput));  float expected[]=new float[]{0.5f,0.5f,0.5f,0.5f};  boolean passed=Arrays.equals(hOutput,expected);  log("Test   float4 1D " + (passed ? "PASSED" : "FAILED"));  cuArrayDestroy(array);  cuMemFree(dOutput);  return passed;}  }
class C{  public TClass createTClass(){  TClassImpl tClass=new TClassImpl();  return tClass;}  }
class C{  @Override public void encode(Object object,Type bodyType,RequestTemplate template) throws EncodeException {  try {    template.body(mapper.writeValueAsString(object));  } catch (  JsonProcessingException e) {    throw new EncodeException(e.getMessage(),e);  }}  }
class C{  @SuppressWarnings("unchecked") public LongMap(int initialCapacity,float loadFactor){  if (initialCapacity < 0)   throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);  if (initialCapacity > 1 << 30)   throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);  capacity=nextPowerOfTwo(initialCapacity);  if (loadFactor <= 0)   throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);  this.loadFactor=loadFactor;  threshold=(int)(capacity * loadFactor);  mask=capacity - 1;  hashShift=63 - Long.numberOfTrailingZeros(capacity);  stashCapacity=Math.max(3,(int)Math.ceil(Math.log(capacity)) * 2);  pushIterations=Math.max(Math.min(capacity,8),(int)Math.sqrt(capacity) / 8);  keyTable=new long[capacity + stashCapacity];  valueTable=(V[])new Object[keyTable.length];}  }
class C{  public void requestUpdateAd(){  adFetcher.updateFetchedAds();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void rlft3(double[] data,double[] speq,int isign,int nn1,int nn2,int nn3){  com.nr.fft.FFT.rlft3(data,speq,isign,nn1,nn2,nn3);}  }
class C{  private void insertInOrder(Vector list,MqttWireMessage newMsg){  int newMsgId=newMsg.getMessageId();  for (int i=0; i < list.size(); i++) {    MqttWireMessage otherMsg=(MqttWireMessage)list.elementAt(i);    int otherMsgId=otherMsg.getMessageId();    if (otherMsgId > newMsgId) {      list.insertElementAt(newMsg,i);      return;    }  }  list.addElement(newMsg);}  }
class C{  public void createPennTreeAnnotation(int aBegin,int aEnd){  Tree t=tokenTree.getTree();  PennTree pTree=new PennTree(jCas,aBegin,aEnd);  t=t.deepCopy(t.treeFactory(),StringLabel.factory());  pTree.setPennTree(t.pennString());  pTree.addToIndexes();}  }
class C{  public void nextIteration(IterationNotificationEvent e){  log(null,e.getExperiment().getClass().getName() + ": " + e.getDataset().relationName()+ " / "+ OptionUtils.toCommandLine(e.getClassifier()));}  }
class C{  private void sleepPastRefreshInterval() throws Exception {  logger.debug("Sleeping for " + REFRESH_INTERVAL_SECS + " second(s).");  Thread.sleep(REFRESH_INTERVAL_SECS * 1000);}  }
class C{  public static Sector fromDegrees(double minLatitude,double maxLatitude,double minLongitude,double maxLongitude){  return new Sector(Angle.fromDegrees(minLatitude),Angle.fromDegrees(maxLatitude),Angle.fromDegrees(minLongitude),Angle.fromDegrees(maxLongitude));}  }
class C{  private void initUnconfirmedTab(){  if (m_modelUnconfirmed != null)   return;  Vector<String> columnNames=new Vector<String>();  columnNames.add(Msg.translate(Env.getCtx(),m_C_BPartner_ID == 0 ? "C_BPartner_ID" : "M_Product_ID"));  columnNames.add(Msg.translate(Env.getCtx(),"MovementQty"));  columnNames.add(Msg.translate(Env.getCtx(),"MovementDate"));  columnNames.add(Msg.translate(Env.getCtx(),"IsSOTrx"));  columnNames.add(Msg.translate(Env.getCtx(),"DocumentNo"));  columnNames.add(Msg.translate(Env.getCtx(),"M_Warehouse_ID"));  String sql=null;  int parameter=0;  if (m_C_BPartner_ID == 0) {    sql="SELECT bp.Name," + " CASE WHEN io.IsSOTrx='Y' THEN iol.MovementQty*-1 ELSE iol.MovementQty END AS MovementQty," + " io.MovementDate,io.IsSOTrx,"+ " dt.PrintName || ' ' || io.DocumentNo As DocumentNo,"+ " w.Name "+ "FROM M_InOutLine iol"+ " INNER JOIN M_InOut io ON (iol.M_InOut_ID=io.M_InOut_ID)"+ " INNER JOIN C_BPartner bp  ON (io.C_BPartner_ID=bp.C_BPartner_ID)"+ " INNER JOIN C_DocType dt ON (io.C_DocType_ID=dt.C_DocType_ID)"+ " INNER JOIN M_Warehouse w ON (io.M_Warehouse_ID=w.M_Warehouse_ID)"+ " INNER JOIN M_InOutLineConfirm lc ON (iol.M_InOutLine_ID=lc.M_InOutLine_ID) "+ "WHERE iol.M_Product_ID=?"+ " AND lc.Processed='N' "+ "ORDER BY io.MovementDate,io.IsSOTrx";    parameter=m_M_Product_ID;  } else {    sql="SELECT p.Name," + " CASE WHEN io.IsSOTrx='Y' THEN iol.MovementQty*-1 ELSE iol.MovementQty END AS MovementQty," + " io.MovementDate,io.IsSOTrx,"+ " dt.PrintName || ' ' || io.DocumentNo As DocumentNo,"+ " w.Name "+ "FROM M_InOutLine iol"+ " INNER JOIN M_InOut io ON (iol.M_InOut_ID=io.M_InOut_ID)"+ " INNER JOIN M_Product p  ON (iol.M_Product_ID=p.M_Product_ID)"+ " INNER JOIN C_DocType dt ON (io.C_DocType_ID=dt.C_DocType_ID)"+ " INNER JOIN M_Warehouse w ON (io.M_Warehouse_ID=w.M_Warehouse_ID)"+ " INNER JOIN M_InOutLineConfirm lc ON (iol.M_InOutLine_ID=lc.M_InOutLine_ID) "+ "WHERE io.C_BPartner_ID=?"+ " AND lc.Processed='N' "+ "ORDER BY io.MovementDate,io.IsSOTrx";    parameter=m_C_BPartner_ID;  }  Vector<Vector<Object>> data=new Vector<Vector<Object>>();  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,parameter);    rs=pstmt.executeQuery();    while (rs.next()) {      Vector<Object> line=new Vector<Object>(6);      line.add(rs.getString(1));      line.add(new Double(rs.getDouble(2)));      line.add(rs.getTimestamp(3));      line.add(new Boolean("Y".equals(rs.getString(4))));      line.add(rs.getString(5));      line.add(rs.getString(6));      data.add(line);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  log.fine("#" + data.size());  m_modelUnconfirmed=new DefaultTableModel(data,columnNames);  m_tableUnconfirmed.setModel(m_modelUnconfirmed);  MiniTable table=m_tableUnconfirmed;  table.setColumnClass(0,String.class,true);  table.setColumnClass(1,Double.class,true);  table.setColumnClass(2,Timestamp.class,true);  table.setColumnClass(3,Boolean.class,true);  table.setColumnClass(4,String.class,true);  table.setColumnClass(5,String.class,true);  table.autoSize();}  }
class C{  public void redrawLayoutBlockPanels(){  if (panels.size() > 0) {    for (int i=0; i < panels.size(); i++) {      panels.get(i).redrawPanel();    }  }  firePropertyChange("redraw",null,null);}  }
class C{  public static KeyBagManager from(ICloud.MBSKeySet keySet) throws BadDataException {  logger.trace("<< from() < keySet count: {}",keySet.getKeyCount());  logger.debug(marker,"<-- from() < keySet: {}",keySet);  if (keySet.getKeyCount() < 2) {    throw new BadDataException("Bad keybag.");  }  ByteString passCode=keySet.getKey(0).getKeyData();  Map<ByteString,KeyBag> uuidToKeyBag=new HashMap<>();  for (int i=1; i < keySet.getKeyCount(); i++) {    KeyBag keyBag=KeyBagFactory.from(keySet.getKey(i),passCode);    uuidToKeyBag.put(keyBag.uuid(),keyBag);  }  KeyBagManager instance=new KeyBagManager(uuidToKeyBag,FileKeyFactory.create());  logger.debug(marker,"-- from() > {}",uuidToKeyBag);  logger.trace(">> from() > {}",instance);  return instance;}  }
class C{  public void testUsersLoaded_hidesSpinner(){  mController.init();  JsonUser user=new JsonUser("idA","nameA");  mFakeEventBus.post(new KnownUsersLoadedEvent(ImmutableSet.of(user)));  verify(mMockFragmentUi).showSpinner(false);}  }
class C{  @Override public CloseIndexRequest indices(String... indices){  this.indices=indices;  return this;}  }
class C{  public static void readFully(InputStream in,byte[] dst) throws IOException {  readFully(in,dst,0,dst.length);}  }
class C{  private void init(Context context,TypedArray attributes,int pagePosition,OnSlidePageChangeListener pageListener){  if (!isInEditMode()) {    this.mPagePosition=pagePosition;    this.mUserPageListener=pageListener;    LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);    mBinding=DataBindingUtil.inflate(inflater,R.layout.view_barchart_slide,this,true);    mAttributes=attributes;    loadStyledAttributes(attributes);    injectViewsAndAttributes();    setListeners();  }}  }
class C{  @Override public void mousePressed(MouseEvent e){  if (typingTarget != null) {    endEdit();    if (isToolDoneAfterCreation()) {      fireToolDone();    }  } else {    super.mousePressed(e);  }}  }
class C{  public DiscoverInfo discoverInfo(String entityID,String node) throws XMPPException {  Connection connection=ServiceDiscoveryManager.this.connection.get();  if (connection == null)   throw new XMPPException("Connection instance already gc'ed");  DiscoverInfo disco=new DiscoverInfo();  disco.setType(IQ.Type.GET);  disco.setTo(entityID);  disco.setNode(node);  PacketCollector collector=connection.createPacketCollector(new PacketIDFilter(disco.getPacketID()));  connection.sendPacket(disco);  IQ result=(IQ)collector.nextResult(SmackConfiguration.getPacketReplyTimeout());  collector.cancel();  if (result == null) {    throw new XMPPException("No response from the server.");  }  if (result.getType() == IQ.Type.ERROR) {    throw new XMPPException(result.getError());  }  return (DiscoverInfo)result;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_TYPE_1__VERBISTY_1:    setVerbisty_1(VERBISTY_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  void editSendTo(){  if (!selectedOK())   return;  if (selectedAgent.startsWith("Node.")) {    showError("Node cannot be deleted.");    return;  }  try {    Address a=getLivingAddress();    if (a == null)     return;    IRequest req=node.dispatchAgent(selectedAgent,a);    if (req instanceof Thread)     try {      ((Thread)req).join(10000);    } catch (    Exception e) {    }    if (req.getThrowable() != null) {      req.getThrowable().printStackTrace();      throw req.getThrowable();    }    if (req.getStatus() != IRequest.DONE)     (new JOptionPane()).showMessageDialog(this,"Sending was not succesful.\nAgent stays here.",null,JOptionPane.ERROR_MESSAGE);  } catch (  Throwable e) {    showError(e.toString());  }}  }
class C{  public Audit(){  super();}  }
class C{  XSLTAttributeDef(String namespace,String name,int type,boolean supportsAVT,int errorType,String defaultVal){  this.m_namespace=namespace;  this.m_name=name;  this.m_type=type;  this.m_required=false;  this.m_supportsAVT=supportsAVT;  this.m_errorType=errorType;  this.m_default=defaultVal;}  }
class C{  public boolean isInterrupted(){  return abort;}  }
class C{  public DiscretizerComposite(Discretizer first,Discretizer second){  this.first=first;  this.second=second;}  }
class C{  public Locator2Impl(){}  }
class C{  private void deselectQualityButton(ImageButton button){  button.setSelected(false);  getActivity().findViewById(R.id.layout_yuv_qualities).setVisibility(View.INVISIBLE);  getActivity().findViewById(R.id.layout_raw_qualities).setVisibility(View.INVISIBLE);}  }
class C{  private void initializeAll() throws OperationsException {  try {    connectToSystem();    if (adminDSJmx != null) {      SystemMember[] cacheVms=adminDSJmx.getCacheVms();      for (int i=0; i < cacheVms.length; i++) {        try {          initializeCacheRegionsAndStats((SystemMemberJmx)cacheVms[i]);        } catch (        AdminException e) {          logger.info(LocalizedMessage.create(LocalizedStrings.MemberInfoWithStatsMBean_EXCEPTION_WHILE_INTIALIZING_0_CONTINUING,cacheVms[i].getId()),e);        }      }      SystemMember[] appVms=adminDSJmx.getSystemMemberApplications();      for (int i=0; i < appVms.length; i++) {        try {          initializeCacheRegionsAndStats((SystemMemberJmx)appVms[i]);        } catch (        AdminException e) {          logger.info(LocalizedMessage.create(LocalizedStrings.MemberInfoWithStatsMBean_EXCEPTION_WHILE_INTIALIZING_0_CONTINUING,appVms[i].getId()),e);        }      }    }  } catch (  AdminException e) {    logger.warn(LocalizedMessage.create(LocalizedStrings.MemberInfoWithStatsMBean_EXCEPTION_WHILE_INTIALIZING),e);    throw new OperationsException(e.getMessage());  }catch (  Exception e) {    logger.warn(LocalizedMessage.create(LocalizedStrings.MemberInfoWithStatsMBean_EXCEPTION_WHILE_INTIALIZING),e);    throw new OperationsException(e.getMessage());  }  isInitialized=true;}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  trimToFileCount();  journalWriter.close();  journalWriter=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:29.074 -0500",hash_original_method="2B94AAD68C0284CF5F35BA4F8A812DF1",hash_generated_method="9D308F535A65D6BE0D71D35DFF425D99") public View newChildView(boolean isLastChild,ViewGroup parent){  return mInflater.inflate((isLastChild) ? mLastChildLayout : mChildLayout,parent,false);}  }
class C{  public List<SuperMatchBucket> buildBuckets(final List<SimpleSuperMatch> superMatches){  if (superMatches == null) {    return null;  }  List<SuperMatchBucket> superMatchBucketList=new ArrayList<SuperMatchBucket>();  for (  SimpleSuperMatch superMatch : superMatches) {    boolean inList=false;    for (    final SuperMatchBucket bucket : superMatchBucketList) {      inList=bucket.addIfSameHierarchyMergeIfOverlap(superMatch);      if (inList)       break;    }    if (!inList) {      superMatchBucketList.add(new SuperMatchBucket(superMatch));    }  }  return superMatchBucketList;}  }
class C{  @Override public void throttleDispose(){  log.debug("dispose");  cs.releaseSession(_handle);  _handle=-1;  cs=null;  mRefreshTimer.stop();  mRefreshTimer=null;  cs=null;  finishRecord();}  }
class C{  public void output(){  int maxPairs=getFlow();  System.out.println("There are " + maxPairs + " pairs matched.");  pr.output();}  }
class C{  public boolean isHotspotValue(Value v){  return this.hasRun && status != Status.TIMEDOUT_ANALYSIS && nonterminals.containsKey(v);}  }
class C{  @SuppressWarnings("deprecation") @Deprecated public final void stop(){  if (stopHelper()) {    Thread.currentThread().stop();  }}  }
class C{  public static Connection newInstance(JdbcRepository database,SmartDataSource dataSource,String username,String password){  InvocationHandler handler=new SmartConnection(database,dataSource,username,password);  ClassLoader cl=Connection.class.getClassLoader();  return (Connection)Proxy.newProxyInstance(cl,new Class[]{Connection.class},handler);}  }
class C{  public void testDoConfigureSetsDefaultAddress() throws Exception {  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(GeneralPropertySet.HOSTNAME),"//weblogic:listen-address",config);}  }
class C{  public boolean isCreated(){  return this.created;}  }
class C{  public void fatalError(SAXParseException ex){  print("fatal error: " + print(ex));}  }
class C{  public static Date endOfDayUsingOutputTimeZone(Date dateInst) throws AdeException {  if (outputTimeZone == null) {    final TimeZone outputTimezone=Ade.getAde().getConfigProperties().getOutputTimeZone();    outputTimeZone=DateTimeZone.forOffsetMillis(outputTimezone.getRawOffset());  }  if (dateInst == null) {    throw new IllegalArgumentException();  }  DateTime startOFDay=new DateTime(dateInst);  startOFDay=startOFDay.withZone(outputTimeZone);  startOFDay=startOFDay.plusDays(1);  startOFDay=startOFDay.withTimeAtStartOfDay();  return startOFDay.toDate();}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  public static JSONObject unmodifiableObject(JSONObject object){  return new JSONObject(object,true);}  }
class C{  public static final double[][] times(final double[][] m1,final double[][] m2){  final int columndimension=getColumnDimensionality(m1);  final int bcolumndimension=getColumnDimensionality(m2);  assert (m2.length == columndimension) : ERR_MATRIX_INNERDIM;  final double[][] r2=new double[m1.length][bcolumndimension];  final double[] Bcolj=new double[columndimension];  for (int j=0; j < bcolumndimension; j++) {    for (int k=0; k < columndimension; k++) {      Bcolj[k]=m2[k][j];    }    for (int i=0; i < m1.length; i++) {      final double[] Arowi=m1[i];      double s=0;      for (int k=0; k < columndimension; k++) {        s+=Arowi[k] * Bcolj[k];      }      r2[i][j]=s;    }  }  return r2;}  }
class C{  public synchronized void goToRoot(){  m_Current=m_Root;}  }
class C{  public JavaModelStatus(int severity,int code,IJavaElement element,IPath path,String msg){  super(severity,JavaCore.PLUGIN_ID,code,"JavaModelStatus",null);  this.elements=new IJavaElement[]{element};  this.path=path;  this.string=msg;}  }
class C{  public boolean isPrimitive(){  return _class.isPrimitive();}  }
class C{  private static int runProcess(String[] cmd,String[] environment,InputStream in,OutputStream out,OutputStream err) throws IOException {  Process p;  if (environment == null) {    p=Runtime.getRuntime().exec(cmd);  } else {    p=Runtime.getRuntime().exec(cmd,environment);  }  try {    PipeThread inThread=null;    if (in != null) {      inThread=new PipeThread(false,in,p.getOutputStream());      inThread.start();    } else {      p.getOutputStream().close();    }    PipeThread outThread=null;    if (out != null) {      outThread=new PipeThread(true,p.getInputStream(),out);      outThread.start();    } else {      p.getInputStream().close();    }    PipeThread errThread=null;    if (err != null) {      errThread=new PipeThread(true,p.getErrorStream(),err);      errThread.start();    } else {      p.getErrorStream().close();    }    for (; ; ) {      try {        p.waitFor();        if (outThread != null) {          outThread.join();        }        if (inThread != null) {          inThread.join();        }        if (errThread != null) {          errThread.join();        }        break;      } catch (      InterruptedException ignore) {      }    }    return p.exitValue();  }  finally {    p.destroy();  }}  }
class C{  public boolean handleIncompatibleAssignment(final ClassNode lhsType,final ClassNode rhsType,final Expression assignmentExpression){  return false;}  }
class C{  private static void loadCandidates(ProfilerSection section){  section.start("Candidate");  File[] search_dirs=new File[]{new File(ToastBootstrap.toastHome,"modules/")};  File[] lib_dirs=new File[0];  if (!isCorePhase) {    search_dirs=Storage.USB_Module("modules");    lib_dirs=Storage.USB_Module("libs");  }  for (  File dir : lib_dirs) {    dir.mkdirs();    search_libs(dir);  }  for (  File dir : search_dirs) {    dir.mkdirs();    search(dir);  }  section.stop("Candidate");}  }
class C{  public static List<CssMetaData<? extends Styleable,?>> createCssMetaDataList(CssMetaData<? extends Styleable,?>... metaData){  return createCssMetaDataList(new ArrayList<>(),metaData);}  }
class C{  public Envelope(){  init();}  }
class C{  public Clustering<SubspaceModel> run(Database database,Relation<V> relation){  DistanceQuery<V> distFunc=database.getDistanceQuery(relation,SquaredEuclideanDistanceFunction.STATIC);  RangeQuery<V> rangeQuery=database.getRangeQuery(distFunc);  final Random random=rnd.getSingleThreadedRandom();  if (RelationUtil.dimensionality(relation) < l) {    throw new IllegalStateException("Dimensionality of data < parameter l! " + "(" + RelationUtil.dimensionality(relation) + " < "+ l+ ")");  }  if (LOG.isVerbose()) {    LOG.verbose("1. Initialization phase...");  }  int sampleSize=Math.min(relation.size(),k_i * k);  DBIDs sampleSet=DBIDUtil.randomSample(relation.getDBIDs(),sampleSize,random);  int medoidSize=Math.min(relation.size(),m_i * k);  ArrayDBIDs medoids=greedy(distFunc,sampleSet,medoidSize,random);  if (LOG.isDebugging()) {    StringBuilder msg=new StringBuilder();    msg.append('\n');    msg.append("sampleSize ").append(sampleSize).append('\n');    msg.append("sampleSet ").append(sampleSet).append('\n');    msg.append("medoidSize ").append(medoidSize).append('\n');    msg.append("m ").append(medoids).append('\n');    LOG.debugFine(msg.toString());  }  if (LOG.isVerbose()) {    LOG.verbose("2. Iterative phase...");  }  double bestObjective=Double.POSITIVE_INFINITY;  ArrayDBIDs m_best=null;  DBIDs m_bad=null;  ArrayDBIDs m_current=initialSet(medoids,k,random);  if (LOG.isDebugging()) {    StringBuilder msg=new StringBuilder();    msg.append('\n');    msg.append("m_c ").append(m_current).append('\n');    LOG.debugFine(msg.toString());  }  IndefiniteProgress cprogress=LOG.isVerbose() ? new IndefiniteProgress("Current number of clusters:",LOG) : null;  ArrayList<PROCLUSCluster> clusters=null;  int loops=0;  while (loops < 10) {    long[][] dimensions=findDimensions(m_current,relation,distFunc,rangeQuery);    clusters=assignPoints(m_current,dimensions,relation);    double objectiveFunction=evaluateClusters(clusters,dimensions,relation);    if (objectiveFunction < bestObjective) {      loops=0;      bestObjective=objectiveFunction;      m_best=m_current;      m_bad=computeBadMedoids(m_current,clusters,(int)(relation.size() * 0.1 / k));    }    m_current=computeM_current(medoids,m_best,m_bad,random);    loops++;    if (cprogress != null) {      cprogress.setProcessed(clusters.size(),LOG);    }  }  LOG.setCompleted(cprogress);  if (LOG.isVerbose()) {    LOG.verbose("3. Refinement phase...");  }  List<Pair<double[],long[]>> dimensions=findDimensions(clusters,relation);  List<PROCLUSCluster> finalClusters=finalAssignment(dimensions,relation);  int numClusters=1;  Clustering<SubspaceModel> result=new Clustering<>("ProClus clustering","proclus-clustering");  for (  PROCLUSCluster c : finalClusters) {    Cluster<SubspaceModel> cluster=new Cluster<>(c.objectIDs);    cluster.setModel(new SubspaceModel(new Subspace(c.getDimensions()),c.centroid));    cluster.setName("cluster_" + numClusters++);    result.addToplevelCluster(cluster);  }  return result;}  }
class C{  protected void onSeekTo(int milli){}  }
class C{  private boolean addWarnSign(TimerData data,Column column){switch (column) {case EXCLUSIVEAVERAGE:case EXCLUSIVEMAX:case EXCLUSIVEMIN:case EXCLUSIVESUM:    int affPercentage=(int)(data.getInvocationAffiliationPercentage() * 100);  return data.isExclusiveTimeDataAvailable() && (affPercentage < 100);default :return false;}}  }
class C{  private void updateSaveButton(){  m_saveButton.setEnabled(!m_stdEditPanel.getNameString().equals(m_addressSpace.getConfiguration().getName()) || !m_stdEditPanel.getDescription().equals(m_addressSpace.getConfiguration().getDescription()) || (m_debuggerCombo.getSelectedDebugger() != m_addressSpace.getConfiguration().getDebuggerTemplate()));}  }
class C{  private void hideLoadingView(){  if (null != mLoadingView) {    mLoadingView.setVisibility(View.GONE);  }}  }
class C{  public final void fatal(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {    log(SimpleLog.LOG_LEVEL_FATAL,message,t);  }}  }
class C{  public synchronized void stop() throws InterruptedException {  for (  Worker w : workers) {    w.interrupt();  }  for (  Worker w : workers) {    w.join();  }  for (  Worker w : workers) {    if (w.getJob() != null) {      jobsToRun.add(w.getJob());    }  }  workers.clear();}  }
class C{  public static <S extends HasDragStartHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DragStartEvent event=new DragStartEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public static ArrayList<Object> pruneItemSets(ArrayList<Object> toPrune,Hashtable<ItemSet,Integer> kMinusOne){  ArrayList<Object> newVector=new ArrayList<Object>(toPrune.size());  int help, j;  for (int i=0; i < toPrune.size(); i++) {    LabeledItemSet current=(LabeledItemSet)toPrune.get(i);    for (j=0; j < current.m_items.length; j++) {      if (current.m_items[j] != -1) {        help=current.m_items[j];        current.m_items[j]=-1;        if (kMinusOne.get(current) != null && (current.m_classLabel == (kMinusOne.get(current).intValue()))) {          current.m_items[j]=help;        } else {          current.m_items[j]=help;          break;        }      }    }    if (j == current.m_items.length) {      newVector.add(current);    }  }  return newVector;}  }
class C{  public ECPair transform(ECPair cipherText){  if (key == null) {    throw new IllegalStateException("ECNewRandomnessTransform not initialised");  }  ECDomainParameters ec=key.getParameters();  BigInteger n=ec.getN();  ECMultiplier basePointMultiplier=createBasePointMultiplier();  BigInteger k=ECUtil.generateK(n,random);  ECPoint[] gamma_phi=new ECPoint[]{basePointMultiplier.multiply(ec.getG(),k).add(cipherText.getX()),key.getQ().multiply(k).add(cipherText.getY())};  ec.getCurve().normalizeAll(gamma_phi);  lastK=k;  return new ECPair(gamma_phi[0],gamma_phi[1]);}  }
class C{  public void dispose(){  for (  Image image : fRegistry.values()) {    image.dispose();  }  fRegistry.clear();}  }
class C{  public CommandWriter(ProcessBuilder cmd,boolean restart){  super(cmd,restart);}  }
class C{  protected synchronized void superposeBitSetFromRowFloor(FixedBitSet incomingBitSet,int rowfloor){  int max=getMaximumSharedWeight();  if (max > 0) {    decrement(max);  }  tempSet.xor(tempSet);  tempSet.xor(incomingBitSet);  for (int x=rowfloor; x < votingRecord.size() && tempSet.cardinality() > 0; x++) {    tempSet.and(votingRecord.get(x));  }  if (tempSet.cardinality() > 0) {    votingRecord.add(new FixedBitSet(dimension));  }  votingRecord.get(rowfloor).xor(incomingBitSet);  tempSet.xor(tempSet);  tempSet.xor(incomingBitSet);  for (int x=rowfloor + 1; x < votingRecord.size(); x++) {    tempSet.andNot(votingRecord.get(x - 1));    votingRecord.get(x).xor(tempSet);  }}  }
class C{  public static int binarySearchFromTo(int from,int to,IntComparator comp){  final int dummy=0;  while (from <= to) {    int mid=(from + to) / 2;    int comparison=comp.compare(dummy,mid);    if (comparison < 0)     from=mid + 1; else     if (comparison > 0)     to=mid - 1; else     return mid;  }  return -(from + 1);}  }
class C{  public void resetCount(){  progress=0;  setText("0%");  invalidate();}  }
class C{  public boolean hasProperty(String pn){  AbstractStylableDocument doc=(AbstractStylableDocument)ownerDocument;  CSSEngine eng=doc.getCSSEngine();  return eng.getPropertyIndex(pn) != -1 || eng.getShorthandIndex(pn) != -1;}  }
class C{  protected int engineDoFinal(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws IllegalBlockSizeException, ShortBufferException, BadPaddingException {  throw new IllegalStateException("Cipher has not been initialized");}  }
class C{  public Plane transformByMatrix(Matrix4 matrix){  if (matrix == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Plane","transformByMatrix","missingMatrix"));  }  double[] m=matrix.m;  double x=m[0] * this.normal.x + m[1] * this.normal.y + m[2] * this.normal.z + m[3] * this.distance;  double y=m[4] * this.normal.x + m[5] * this.normal.y + m[6] * this.normal.z + m[7] * this.distance;  double z=m[8] * this.normal.x + m[9] * this.normal.y + m[10] * this.normal.z + m[11] * this.distance;  double distance=m[12] * this.normal.x + m[13] * this.normal.y + m[14] * this.normal.z + m[15] * this.distance;  this.normal.x=x;  this.normal.y=y;  this.normal.z=z;  this.distance=distance;  this.normalizeIfNeeded();  return this;}  }
class C{  public void add(String fileName,String jarName){  String packageName;  int pos;  if ((pos=fileName.lastIndexOf("/")) != -1) {    packageName=fileName.substring(0,pos);  } else {    packageName=fileName;  }  addMapping(packageName,jarName);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i;  double zFactor=1;  double z, zN;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double SS;  int N;  double tri;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          z=z * zFactor;          N=0;          SS=0;          for (i=0; i < 8; i++) {            zN=DEM.getValue(row + dY[i],col + dX[i]);            if (zN != noData) {              zN=zN * zFactor;              SS+=(zN - z) * (zN - z);              N++;            }          }          tri=Math.sqrt(SS / N);          output.setValue(row,col,tri);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void reportDateOrTimeChange(DateChangeEvent dateEvent,TimeChangeEvent timeEvent){  DateTimeChangeEvent summaryEvent=new DateTimeChangeEvent(source,source.datePicker,source.timePicker,dateEvent,timeEvent);  for (  DateTimeChangeListener listener : dateTimeChangeListeners) {    listener.dateOrTimeChanged(summaryEvent);  }  firePropertyChange("dateTimePermissive",summaryEvent.getOldDateTimePermissive(),summaryEvent.getNewDateTimePermissive());  firePropertyChange("dateTimeStrict",summaryEvent.getOldDateTimeStrict(),summaryEvent.getNewDateTimeStrict());}  }
class C{  public ObserveNotificationOrderer(){  this.number=new AtomicInteger();}  }
class C{  @Override public void stop(){  if (m_listenee instanceof BeanCommon) {    ((BeanCommon)m_listenee).stop();  }}  }
class C{  public void dragDropEnd(DragSourceDropEvent dsde){  System.out.println("[Source] dragDropEnd");}  }
class C{  public static Rectangle inverseTransformRect(AffineTransform af,Rectangle src){  Rectangle dest=new Rectangle(0,0,0,0);  src=absRect(src);  Point p1=new Point(src.x,src.y);  p1=inverseTransformPoint(af,p1);  dest.x=p1.x;  dest.y=p1.y;  dest.width=(int)(src.width / af.getScaleX());  dest.height=(int)(src.height / af.getScaleY());  return dest;}  }
class C{  public static Timestamp toTimestamp(String data,String modelo){  return Timestamp.valueOf(LocalDateTime.parse(data,formatter(modelo)));}  }
class C{  public static SocketFlow create(){  return new SocketFlow();}  }
class C{  private void onPreviewStarted(){  if (mState == ModuleState.WATCH_FOR_NEXT_FRAME_AFTER_PREVIEW_STARTED) {    mState=ModuleState.UPDATE_TRANSFORM_ON_NEXT_SURFACE_TEXTURE_UPDATE;  }  mAppController.onPreviewStarted();}  }
class C{  public boolean await(Date deadline) throws InterruptedException {  if (this.waiter != null) {    throw new IllegalStateException("A thread is already waiting on this object." + "\ncaller: " + Thread.currentThread() + "\nwaiter: "+ this.waiter);  }  if (aborted)   throw new InterruptedException("Operation interrupted");  this.waiter=Thread.currentThread();  boolean success=false;  try {    if (deadline != null) {      success=this.cond.awaitUntil(deadline);    } else {      this.cond.await();      success=true;    }    if (aborted)     throw new InterruptedException("Operation interrupted");  }  finally {    this.waiter=null;  }  return success;}  }
class C{  static int execSql(SQLiteDatabase db,String label,String finalSql,Object[] argArray) throws SQLException {  try {    db.execSQL(finalSql,argArray);  } catch (  android.database.SQLException e) {    throw SqlExceptionUtil.create("Problems executing " + label + " Android statement: "+ finalSql,e);  }  int result;  SQLiteStatement stmt=null;  try {    stmt=db.compileStatement("SELECT CHANGES()");    result=(int)stmt.simpleQueryForLong();  } catch (  android.database.SQLException e) {    result=1;  } finally {    if (stmt != null) {      stmt.close();    }  }  logger.trace("executing statement {} changed {} rows: {}",label,result,finalSql);  return result;}  }
class C{  public boolean isSalesRegionDim(){  Object oo=get_Value(COLUMNNAME_IsSalesRegionDim);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean addChild(IPRangeNode child){  return addChild(child,true);}  }
class C{  @SmallTest public void testSessionInfoBroadcast() throws Exception {  IntentFilter filter=new IntentFilter(CMAudioManager.ACTION_AUDIO_SESSIONS_CHANGED);  AudioSessionReceiver receiver=new AudioSessionReceiver(2);  mContext.registerReceiver(receiver,filter);  AudioTrack track=createTestTrack();  track.play();  track.release();  receiver.waitForSessions();  mContext.unregisterReceiver(receiver);  assertEquals(1,receiver.getNumAdded());  assertEquals(1,receiver.getNumRemoved());  assertEquals(1,receiver.getSessions().size());  AudioSessionInfo info=receiver.getSessions().get(0);  assertNotNull(info);  assertNotNull(info.toString());  assertEquals(track.getAudioSessionId(),info.getSessionId());  assertEquals(3,info.getChannelMask());  assertEquals(AudioManager.STREAM_MUSIC,info.getStream());}  }
class C{  public static Path leftShift(Path self,Object text) throws IOException {  append(self,text);  return self;}  }
class C{  public String toString(){  return detail.toString();}  }
class C{  public GridInternalException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  @Deprecated public MediaFileInformationFetcherTask(List<MediaFile> mediaFiles,MediaEntity mediaEntity,boolean forceUpdate){  this.mediaFiles=mediaFiles;  this.mediaEntity=mediaEntity;  this.forceUpdate=forceUpdate;}  }
class C{  private static String escapeNewlines(String string){  return string.replace("\n","\\\\n");}  }
class C{  public void addPoint(double[] newPoint){  if (initializeDimensions) {    projectionModel.init(newPoint.length);    initializeConsumers();    initializeDimensions=false;  }  for (int i=0; i < newPoint.length; i++) {    if (i >= dimensionList.size()) {      break;    }    dimensionList.get(i).setValue(newPoint[i]);  }}  }
class C{  protected boolean requestAllocation(ActiveTrain activeTrain,Section section,int direction,int seqNumber,boolean showErrorMessages,JmriJFrame frame){  if (activeTrain == null) {    if (showErrorMessages) {      JOptionPane.showMessageDialog(frame,rb.getString("Error16"),rb.getString("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    }    log.error("Missing ActiveTrain specification");    return false;  }  if (section == null) {    if (showErrorMessages) {      JOptionPane.showMessageDialog(frame,java.text.MessageFormat.format(rb.getString("Error17"),new Object[]{activeTrain.getActiveTrainName()}),rb.getString("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    }    log.error("Missing Section specification in allocation request from " + activeTrain.getActiveTrainName());    return false;  }  if (((seqNumber <= 0) || (seqNumber > (activeTrain.getTransit().getMaxSequence()))) && (seqNumber != -99)) {    if (showErrorMessages) {      JOptionPane.showMessageDialog(frame,java.text.MessageFormat.format(rb.getString("Error19"),new Object[]{"" + seqNumber,activeTrain.getActiveTrainName()}),rb.getString("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    }    log.error("Out-of-range sequence number *" + seqNumber + "* in allocation request");    return false;  }  if ((direction != Section.FORWARD) && (direction != Section.REVERSE)) {    if (showErrorMessages) {      JOptionPane.showMessageDialog(frame,java.text.MessageFormat.format(rb.getString("Error18"),new Object[]{"" + direction,activeTrain.getActiveTrainName()}),rb.getString("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    }    log.error("Invalid direction '" + direction + "' specification in allocation request");    return false;  }  AllocationRequest ar=findAllocationRequestInQueue(section,seqNumber,direction,activeTrain);  if (ar == null) {    ar=new AllocationRequest(section,seqNumber,direction,activeTrain);    allocationRequests.add(ar);    if (_AutoAllocate) {      autoAllocate.scanAllocationRequestList(allocationRequests);    }  }  activeTrainsTableModel.fireTableDataChanged();  allocationRequestTableModel.fireTableDataChanged();  return true;}  }
class C{  protected void addSection(Composite parent,FormToolkit toolkit,String sectionTitle){  Section section=toolkit.createSection(parent,ExpandableComposite.TITLE_BAR);  section.setText(sectionTitle);  section.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));  Composite sectionComposite=toolkit.createComposite(section);  GridLayout gridLayout=new GridLayout(4,false);  gridLayout.marginLeft=5;  gridLayout.marginTop=5;  sectionComposite.setLayout(gridLayout);  section.setClient(sectionComposite);  if (!sections.containsKey(sectionTitle)) {    sections.put(sectionTitle,sectionComposite);  }}  }
class C{  public String generateResourceCitation(@NotNull String version,@NotNull String homepage){  try {    return generateResourceCitation(new BigDecimal(version),new URI(homepage));  } catch (  URISyntaxException e) {    log.error("Failed to generate URI for homepage string: " + homepage,e);  }  return null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrspecifiedvaluechanged.class,args);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.143 -0500",hash_original_method="B65787A0A04535E0065F95FD28B9005F",hash_generated_method="00252D58673EB95CADC3DEEB71408B6E") public static void appendColumns(StringBuilder s,String[] columns){  int n=columns.length;  for (int i=0; i < n; i++) {    String column=columns[i];    if (column != null) {      if (i > 0) {        s.append(", ");      }      s.append(column);    }  }  s.append(' ');}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.487 -0500",hash_original_method="9FFA63EC0EE85D31116151AE382BD19B",hash_generated_method="4ECC9E9262A30223A86CC137CCEBCD99") public static String gsm8BitUnpackedToString(byte[] data,int offset,int length){  return gsm8BitUnpackedToString(data,offset,length,"");}  }
class C{  private void performIncrementalSync(long largestChangeId) throws IOException {  String driveDeletedList=PreferencesUtils.getString(context,R.string.drive_deleted_list_key,PreferencesUtils.DRIVE_DELETED_LIST_DEFAULT);  if (!PreferencesUtils.DRIVE_DELETED_LIST_DEFAULT.equals(driveDeletedList)) {    String deletedIds[]=TextUtils.split(driveDeletedList,";");    for (    String driveId : deletedIds) {      deleteDriveFile(driveId,true);    }    PreferencesUtils.setString(context,R.string.drive_deleted_list_key,PreferencesUtils.DRIVE_DELETED_LIST_DEFAULT);  }  String driveEditedList=PreferencesUtils.getString(context,R.string.drive_edited_list_key,PreferencesUtils.DRIVE_EDITED_LIST_DEFAULT);  if (!PreferencesUtils.DRIVE_EDITED_LIST_DEFAULT.equals(driveEditedList)) {    String editedIds[]=TextUtils.split(driveEditedList,";");    for (    String id : editedIds) {      Track track=myTracksProviderUtils.getTrack(Long.valueOf(id));      if (track == null) {        continue;      }      if (track.isSharedWithMe()) {        continue;      }      String driveId=track.getDriveId();      if (driveId == null || driveId.equals("")) {        continue;      }      File driveFile=drive.files().get(driveId).execute();      if (SyncUtils.isInMyTracksAndValid(driveFile,folderId)) {        merge(track,driveFile);      }    }    PreferencesUtils.setString(context,R.string.drive_edited_list_key,PreferencesUtils.DRIVE_EDITED_LIST_DEFAULT);  }  Map<String,File> changes=new HashMap<String,File>();  long newLargestChangeId=getDriveChangesInfo(largestChangeId,changes);  if (newLargestChangeId != largestChangeId) {    Cursor cursor=null;    try {      cursor=myTracksProviderUtils.getTrackCursor(SyncUtils.DRIVE_ID_TRACKS_QUERY,null,null);      if (cursor != null && cursor.moveToFirst()) {        do {          Track track=myTracksProviderUtils.createTrack(cursor);          String driveId=track.getDriveId();          if (changes.containsKey(driveId)) {            File driveFile=changes.get(driveId);            if (driveFile == null) {              Log.d(TAG,"Delete local track " + track.getName());              myTracksProviderUtils.deleteTrack(context,track.getId());            } else {              if (SyncUtils.isInMyTracksAndValid(driveFile,folderId) || SyncUtils.isInSharedWithMe(driveFile)) {                merge(track,driveFile);              } else {                SyncUtils.updateTrack(myTracksProviderUtils,track,null);              }            }            changes.remove(driveId);          }        } while (cursor.moveToNext());      }      Iterator<String> iterator=changes.keySet().iterator();      while (iterator.hasNext()) {        String driveId=iterator.next();        File file=changes.get(driveId);        if (!SyncUtils.isInMyTracksAndValid(file,folderId) && !SyncUtils.isInSharedWithMeAndValid(file)) {          iterator.remove();        }      }      insertNewTracks(changes.values());      PreferencesUtils.setLong(context,R.string.drive_largest_change_id_key,newLargestChangeId);    }  finally {      if (cursor != null) {        cursor.close();      }    }  }}  }
class C{  public void close() throws java.io.IOException {  if (m_writer != null)   m_writer.close();  flushBuffer();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:07.167 -0500",hash_original_method="0A49DDBACE394A9C82B87775AA7B8808",hash_generated_method="293BD915A2442BE026647A9A084D12D6") public void translateRegionInWindowToScreen(Region transparentRegion){  transparentRegion.scale(applicationScale);}  }
class C{  public static Object curl(Object input,int[] dimens){  if (input == null) {    return null;  }  if (!input.getClass().isArray() || input.getClass().getComponentType().isArray()) {    throw new RuntimeException("Attempt to curl non-1D array");  }  int size=Array.getLength(input);  int test=1;  for (  int dimen : dimens) {    test*=dimen;  }  if (test != size) {    throw new RuntimeException("Curled array does not fit desired dimensions");  }  Object newArray=ArrayFuncs.newInstance(getBaseClass(input),dimens);  MultiArrayCopier.copyInto(input,newArray);  return newArray;}  }
class C{  private void shuffle(){  lblStatus.setText("");  textField.setText("");  cards.clear();  cardNumbers.clear();  paneForCards.getChildren().clear();  for (int i=0; i < 4; i++) {    ImageView card;    int cardNum;    do {      cardNum=(int)(1 + Math.random() * 52);      card=new ImageView(new Image("image/card/" + cardNum + ".png"));    } while (Collections.frequency(cards,card) > 1);    cards.add(card);    cardNumbers.add(String.valueOf((cardNum % 13 == 0 ? 13 : cardNum % 13)));  }  paneForCards.getChildren().addAll(cards);  paneForCards.setAlignment(Pos.CENTER);}  }
class C{  public synchronized void removePvChangeListener(PvChangeListener l){  ensurePvChangeListeners();  PvChangeListeners.remove(l);  allowEvents=!PvChangeListeners.isEmpty();  log.trace("-PvListener:" + toString() + "->"+ String.valueOf(l));}  }
class C{  public MonkeyTest(Shell parentShell){  super(parentShell);}  }
class C{  protected void countProximityPosition(int i){  if (!isReverseAxes())   super.countProximityPosition(i); else   if (i < m_proximityPositions.length)   m_proximityPositions[i]--;}  }
class C{  public static long julianToPersian(long julianDate){  long persianEpochInJulian=julianDate - persianToJulian(475L,0,1);  long cyear=ceil(persianEpochInJulian,1029983D);  long ycycle=cyear != 1029982L ? ((long)Math.floor((2816D * (double)cyear + 1031337D) / 1028522D)) : 2820L;  long year=474L + 2820L * ((long)Math.floor(persianEpochInJulian / 1029983D)) + ycycle;  long aux=(1L + julianDate) - persianToJulian(year,0,1);  int month=(int)(aux > 186L ? Math.ceil((double)(aux - 6L) / 30D) - 1 : Math.ceil((double)aux / 31D) - 1);  int day=(int)(julianDate - (persianToJulian(year,month,1) - 1L));  return (year << 16) | (month << 8) | day;}  }
class C{  public void registerRemoteControlDisplay(IRemoteControlDisplay rcd,int w,int h){  if (DEBUG_RC)   Log.d(TAG,">>> registerRemoteControlDisplay(" + rcd + ")");synchronized (mAudioFocusLock) {synchronized (mRCStack) {      if ((rcd == null) || rcDisplayIsPluggedIn_syncRcStack(rcd)) {        return;      }      DisplayInfoForServer di=new DisplayInfoForServer(rcd,w,h);      if (!di.init()) {        if (DEBUG_RC)         Log.e(TAG," error registering RCD");        return;      }      mRcDisplays.add(di);      Iterator<RemoteControlStackEntry> stackIterator=mRCStack.iterator();      while (stackIterator.hasNext()) {        RemoteControlStackEntry rcse=stackIterator.next();        if (rcse.mRcClient != null) {          try {            rcse.mRcClient.plugRemoteControlDisplay(rcd,w,h);          } catch (          RemoteException e) {            Log.e(TAG,"Error connecting RCD to client: ",e);          }        }      }      checkUpdateRemoteControlDisplay_syncAfRcs(RC_INFO_ALL);    }  }}  }
class C{  public static void fill(char[] array,int start,int end,char value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public XMLString toLowerCase(){  return new XMLStringDefault(m_str.toLowerCase());}  }
class C{  public int add(final E element,final int count){  assert count >= 0;  final Counter c0=mMap.get(element);  final Counter c;  if (c0 == null) {    if (count == 0) {      return 0;    }    c=new Counter();    mMap.put(element,c);  } else {    c=c0;  }  c.increment(count);  mTotalCount+=count;  return c.count();}  }
class C{  public NonSymetricMemberKey(String name,boolean isStatic,MemberType memberType){  this.name=name;  this.isStatic=isStatic;  this.memberType=memberType;}  }
class C{  public boolean isVisible(){  if (this == root)   return true;  TreeStateNode parent=(TreeStateNode)getParent();  return (parent != null && parent.isExpanded() && parent.isVisible());}  }
class C{  public SchedulerContext(){  super(15);}  }
class C{  public RetStmt newRetStmt(Value stmtAddress){  return new JRetStmt(stmtAddress);}  }
class C{  public boolean isForceGroup(){  return forceGroup;}  }
class C{  public Process executeAsync(final CommandLine command,ExecuteResultHandler handler) throws IOException {  return executeAsync(command,null,handler);}  }
class C{  public boolean equals(Object obj){  if (obj instanceof CommandEnvironment) {    CommandEnvironment env=(CommandEnvironment)obj;    return ((command == null ? env.command == null : command.equals(env.command)) && Arrays.equals(options,env.options));  } else {    return false;  }}  }
class C{  public boolean isMultiLingualDocument(){  Object oo=get_Value(COLUMNNAME_IsMultiLingualDocument);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public PolynomialGF2mSmallM mod(PolynomialGF2mSmallM f){  int[] resultCoeff=mod(coefficients,f.coefficients);  return new PolynomialGF2mSmallM(field,resultCoeff);}  }
class C{  public void clean(){  clear();  sort=new ItemSorter();  ritems=new VisualItem[DEFAULT_SIZE];  rscores=new int[DEFAULT_SIZE];  pitems=new VisualItem[DEFAULT_SIZE];  pscores=new int[DEFAULT_SIZE];  items_buf=null;  scores_buf=null;}  }
class C{  void testAnyway(String input,String cmd){  try {    test(input,cmd);  } catch (  Exception e) {    ;  }}  }
class C{  public static void launchURL(final URI uri,final String title){  launchURL(uri,title,title,title,null);}  }
class C{  private static double dot(int g[],double x,double y,double z){  return g[0] * x + g[1] * y + g[2] * z;}  }
class C{  public void testMultiPartitions() throws Exception {  TungstenProperties conf=generateConfig();  PluginContext context=new ReplicatorRuntime(conf,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  ParallelQueueStore pqs=new ParallelQueueStore();  pqs.setPartitions(12);  pqs.setMaxSize(2);  pqs.setSyncEnabled(false);  pqs.configure(context);  pqs.prepare(context);  assertEquals("12 partitions defined",12,pqs.getPartitions());  for (int i=0; i < 24; i++) {    ReplDBMSEvent event=createEvent(i);    pqs.put(i % 12,event);  }  int total=0;  for (int i=0; i < pqs.getPartitions(); i++) {    assertEquals("Each partition has 2 events",2,pqs.size(i));    total+=pqs.size(i);  }  assertEquals("24 total events across partitions",24,total);  for (int i=0; i < 24; i++) {    int partId=i % 12;    ReplDBMSEvent event1=(ReplDBMSEvent)pqs.peek(partId);    assertEquals("First event has same seqno as partition",i,event1.getSeqno());    ReplDBMSEvent event2=(ReplDBMSEvent)pqs.get(partId);    assertEquals("First event has same seqno as partition",i,event2.getSeqno());  }  for (int i=0; i < 12; i++) {    assertEquals("Each partition is empty",0,pqs.size(i));  }  pqs.release(context);}  }
class C{  public Date scheduleJob(JobDetail jobDetail,Trigger trigger) throws SchedulerException {  return sched.scheduleJob(jobDetail,trigger);}  }
class C{  public static <T extends Comparable<T>>Pair<Integer,T> min(Collection<T> list){  T min=null;  int argMin=-1;  if (list.size() > 0) {    min=list.iterator().next();    argMin=0;  }  int id=0;  for (  T d : list) {    if (d.compareTo(min) < 0) {      min=d;      argMin=id;    }    id++;  }  return new Pair<>(argMin,min);}  }
class C{  public MigrationInfo(ResolvedMigration resolvedMigration,AppliedMigration appliedMigration,MigrationInfoContext context){  this.resolvedMigration=resolvedMigration;  this.appliedMigration=appliedMigration;  this.context=context;}  }
class C{  private void doOscSetTextParameters(String bellOrStringTerminator){  int value=-1;  String textParameter="";  for (int mOSCArgTokenizerIndex=0; mOSCArgTokenizerIndex < mOSCOrDeviceControlArgs.length(); mOSCArgTokenizerIndex++) {    char b=mOSCOrDeviceControlArgs.charAt(mOSCArgTokenizerIndex);    if (b == ';') {      textParameter=mOSCOrDeviceControlArgs.substring(mOSCArgTokenizerIndex + 1);      break;    } else     if (b >= '0' && b <= '9') {      value=((value < 0) ? 0 : value * 10) + (b - '0');    } else {      unknownSequence(b);      return;    }  }switch (value) {case 0:case 1:case 2:    setTitle(textParameter);  break;case 4:int colorIndex=-1;int parsingPairStart=-1;for (int i=0; ; i++) {boolean endOfInput=i == textParameter.length();char b=endOfInput ? ';' : textParameter.charAt(i);if (b == ';') {if (parsingPairStart < 0) {  parsingPairStart=i + 1;} else {  if (colorIndex < 0 || colorIndex > 255) {    unknownSequence(b);    return;  } else {    mColors.tryParseColor(colorIndex,textParameter.substring(parsingPairStart,i));    mSession.onColorsChanged();    colorIndex=-1;    parsingPairStart=-1;  }}} else if (parsingPairStart >= 0) {} else if (parsingPairStart < 0 && (b >= '0' && b <= '9')) {colorIndex=((colorIndex < 0) ? 0 : colorIndex * 10) + (b - '0');} else {unknownSequence(b);return;}if (endOfInput) break;}break;case 10:case 11:case 12:int specialIndex=TextStyle.COLOR_INDEX_FOREGROUND + (value - 10);int lastSemiIndex=0;for (int charIndex=0; ; charIndex++) {boolean endOfInput=charIndex == textParameter.length();if (endOfInput || textParameter.charAt(charIndex) == ';') {try {String colorSpec=textParameter.substring(lastSemiIndex,charIndex);if ("?".equals(colorSpec)) {int rgb=mColors.mCurrentColors[specialIndex];int r=(65535 * ((rgb & 0x00FF0000) >> 16)) / 255;int g=(65535 * ((rgb & 0x0000FF00) >> 8)) / 255;int b=(65535 * ((rgb & 0x000000FF))) / 255;mSession.write("\033]" + value + ";rgb:"+ String.format(Locale.US,"%04x",r)+ "/"+ String.format(Locale.US,"%04x",g)+ "/"+ String.format(Locale.US,"%04x",b)+ bellOrStringTerminator);} else {mColors.tryParseColor(specialIndex,colorSpec);mSession.onColorsChanged();}specialIndex++;if (endOfInput || (specialIndex > TextStyle.COLOR_INDEX_CURSOR) || ++charIndex >= textParameter.length()) break;lastSemiIndex=charIndex;} catch (NumberFormatException e) {}}}break;case 52:int startIndex=textParameter.indexOf(";") + 1;try {String clipboardText=new String(Base64.decode(textParameter.substring(startIndex),0),StandardCharsets.UTF_8);mSession.clipboardText(clipboardText);} catch (Exception e) {Log.e(EmulatorDebug.LOG_TAG,"OSC Manipulate selection, invalid string '" + textParameter + "");}break;case 104:if (textParameter.isEmpty()) {mColors.reset();mSession.onColorsChanged();} else {int lastIndex=0;for (int charIndex=0; ; charIndex++) {boolean endOfInput=charIndex == textParameter.length();if (endOfInput || textParameter.charAt(charIndex) == ';') {try {int colorToReset=Integer.parseInt(textParameter.substring(lastIndex,charIndex));mColors.reset(colorToReset);mSession.onColorsChanged();if (endOfInput) break;charIndex++;lastIndex=charIndex;} catch (NumberFormatException e) {}}}}break;case 110:case 111:case 112:mColors.reset(TextStyle.COLOR_INDEX_FOREGROUND + (value - 110));mSession.onColorsChanged();break;case 119:break;default :unknownParameter(value);break;}finishSequence();}  }
class C{  public DatabaseException(Throwable cause){  super(cause);}  }
class C{  public static LocalDateTime toDateTime(Timestamp time){  return time.toLocalDateTime();}  }
class C{  private static void usage(boolean printDebugOptions){  SmaliHelpFormatter formatter=new SmaliHelpFormatter();  int consoleWidth=ConsoleUtil.getConsoleWidth();  if (consoleWidth <= 0) {    consoleWidth=80;  }  formatter.setWidth(consoleWidth);  formatter.printHelp("java -jar smali.jar [options] [--] [<smali-file>|folder]*","assembles a set of smali files into a dex file",basicOptions,printDebugOptions ? debugOptions : null);}  }
class C{  public ExceptionContext create(){  return m_exceptionContext;}  }
class C{  public XMLContent(Reader content){  this(new XMLParser().parse(content));}  }
class C{  public ByteBuffer(int initialSize){  elems=new byte[initialSize];  length=0;}  }
class C{  public void test_subListII(){  SimpleList mList=new SimpleList();  mList.add(new Object());  mList.add(new Object());  List sList=mList.subList(0,2);  sList.add(new Object());  sList.get(0);  sList.add(0,new Object());  sList.get(0);  sList.addAll(Arrays.asList(new String[]{"1","2"}));  sList.get(0);  sList.addAll(0,Arrays.asList(new String[]{"3","4"}));  sList.get(0);  sList.remove(0);  sList.get(0);  ListIterator lit=sList.listIterator();  lit.add(new Object());  lit.next();  lit.remove();  lit.next();  sList.clear();  sList.add(new Object());  List al=new ArrayList();  for (int i=0; i < 10; i++) {    al.add(new Integer(i));  }  assertTrue("Sublist returned should have implemented Random Access interface",al.subList(3,7) instanceof RandomAccess);  List ll=new LinkedList();  for (int i=0; i < 10; i++) {    ll.add(new Integer(i));  }  assertTrue("Sublist returned should not have implemented Random Access interface",!(ll.subList(3,7) instanceof RandomAccess));}  }
class C{  public void terminate(){}  }
class C{  public void endCompoundEdit(){}  }
class C{  @Override protected boolean shouldCount(DelphiPMDNode node){  if (!isCounting && isStartNode(node)) {    isCounting=true;    count=0;    lastLine=node.getLine();    firstNode=node;    startIndex=1;  } else   if (isCounting) {    if (isEndNode(node) && --startIndex == 0) {      isCounting=false;      lastLine=0;    } else     if (isStartNode(node)) {      ++startIndex;    } else     if (accept(node)) {      lastLine=node.getLine();      return true;    }  }  return false;}  }
class C{  public void changeNick(String newNick){  checkArgument(StringUtils.isNotBlank(newNick),"Nick '%s' is blank",newNick);  bot.sendRaw().rawLine("NICK " + newNick);}  }
class C{  public synchronized void start(){  animTime=0;  currFrameIndex=0;}  }
class C{  public boolean containsInstruction(InstructionHandle handle){  return instructionSet.get(handle.getPosition());}  }
class C{  public static CipherTextIvMac encrypt(String plaintext,SecretKeys secretKeys,String encoding) throws UnsupportedEncodingException, GeneralSecurityException {  return encrypt(plaintext.getBytes(encoding),secretKeys);}  }
class C{  protected void processOutStream(int type,BinaryRawWriterEx writer) throws IgniteCheckedException {  throwUnsupported(type);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr newAttribute;  NamedNodeMap attributes;  Attr districtAttr;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(2);  newAttribute=doc.createAttribute("district");  districtAttr=testEmployee.setAttributeNode(newAttribute);  districtAttr=testEmployee.removeAttributeNode(newAttribute);  attributes=testEmployee.getAttributes();  districtAttr=(Attr)attributes.getNamedItem("district");  assertNull("elementRemoveAttributeAfterCreateAssert",districtAttr);}  }
class C{  private void insertIntoTable(Instance inst,double[] instA) throws Exception {  double[] tempClassDist2;  double[] newDist;  DecisionTableHashKey thekey;  if (instA != null) {    thekey=new DecisionTableHashKey(instA);  } else {    thekey=new DecisionTableHashKey(inst,inst.numAttributes(),false);  }  tempClassDist2=m_entries.get(thekey);  if (tempClassDist2 == null) {    if (m_classIsNominal) {      newDist=new double[m_theInstances.classAttribute().numValues()];      for (int i=0; i < m_theInstances.classAttribute().numValues(); i++) {        newDist[i]=1.0;      }      newDist[(int)inst.classValue()]=inst.weight();      m_entries.put(thekey,newDist);    } else {      newDist=new double[2];      newDist[0]=inst.classValue() * inst.weight();      newDist[1]=inst.weight();      m_entries.put(thekey,newDist);    }  } else {    if (m_classIsNominal) {      tempClassDist2[(int)inst.classValue()]+=inst.weight();      m_entries.put(thekey,tempClassDist2);    } else {      tempClassDist2[0]+=(inst.classValue() * inst.weight());      tempClassDist2[1]+=inst.weight();      m_entries.put(thekey,tempClassDist2);    }  }}  }
class C{  private void validateAuth(EnumerationContext ctx,AuthCredentialsServiceState parentAuth){  if (parentAuth.userEmail == null) {    throw new IllegalArgumentException("userEmail is required");  }  if (parentAuth.privateKey == null) {    throw new IllegalArgumentException("privateKey is required");  }  ctx.userEmail=parentAuth.userEmail;  ctx.privateKey=parentAuth.privateKey;}  }
class C{  public static byte[] encrypt(byte[] input,String key,String algorithm,byte[] ivOrSalt,int iterations) throws PageException {  return crypt(input,key,algorithm,ivOrSalt,iterations,false);}  }
class C{  private ClockContract(){}  }
class C{  public static List<ConstraintViolation> check(Model model,Property predicate,ProgressMonitor monitor){  return check(model,predicate,null,monitor);}  }
class C{  public RequestCreator error(Drawable errorDrawable){  if (errorDrawable == null) {    throw new IllegalArgumentException("Error image may not be null.");  }  if (errorResId != 0) {    throw new IllegalStateException("Error image already set.");  }  this.errorDrawable=errorDrawable;  return this;}  }
class C{  public boolean nullsAreSortedAtEnd() throws SQLException {  return gdsHelper.compareToVersion(2,0) < 0;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String inputFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  String str;  int numImages=0;  int progress=0;  double cellsize=0;  double north=0;  double east=0;  double west=0;  double south=0;  double cdedNoData=-32767;  double whiteboxNoData=-32768d;  double z=0;  String delimiter=" ";  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  FileInputStream fis=null;  try {    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      inputFile=imageFiles[i];      if (!((new File(inputFile)).exists())) {        showFeedback("DEM file does not exist.");        return;      }      if (inputFile.lastIndexOf(".") >= 0) {        String extension=inputFile.substring(inputFile.lastIndexOf("."));        whiteboxHeaderFile=inputFile.replace(extension,".dep");      } else {        whiteboxHeaderFile=inputFile + ".dep";      }      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxHeaderFile.replace(".dep",".tas"))).delete();      WhiteboxRaster wbr=null;      fis=new FileInputStream(inputFile);      rows=0;      cols=0;      row=0;      col=0;      long validValueNum=0;      int oldProgress=-1;      byte[] bytes=new byte[1024];      int remaining=bytes.length;      int blockNumber=1;      while (true) {        int read=fis.read(bytes,bytes.length - remaining,remaining);        if (read >= 0) {          remaining-=read;          str=new String(bytes,Charset.forName("US-ASCII"));          if (remaining == 0) {            if (blockNumber == 1) {              String producer=str.substring(40,100).trim();              String southwest=str.substring(109,135);              String processCode=str.substring(135,136).trim();              String originCode=str.substring(140,144).trim();              int demLevelCode=Integer.parseInt(str.substring(144,150).trim());              int elevationPattern=Integer.parseInt(str.substring(150,156).trim());              String str2=str.substring(156,162).trim();              String refSystem="";switch (str2) {case "0":                refSystem="geographic";              break;case "1":            refSystem="UTM";          break;case "2":        refSystem="state plane";      break;default :    refSystem="geographic";}String xyUnits="";str2=str.substring(533,539).trim();switch (str2) {case "0":  xyUnits="radians";break;case "1":xyUnits="feet";break;case "2":xyUnits="meters";break;case "3":xyUnits="arc seconds";break;default :xyUnits="arc seconds";}if (xyUnits.equals("arc seconds")) {xyUnits="degrees";}String zUnits="";str2=str.substring(539,545).trim();switch (str2) {case "1":zUnits="feet";break;case "2":zUnits="meters";break;default :zUnits="meters";}west=Double.parseDouble(str.substring(546,570).trim()) / 3600;south=Double.parseDouble(str.substring(570,594).trim()) / 3600;north=Double.parseDouble(str.substring(618,642).trim()) / 3600;east=Double.parseDouble(str.substring(652,676).trim()) / 3600;cols=Integer.parseInt(str.substring(858,864).trim());;rows=1201;fw=new FileWriter(whiteboxHeaderFile,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(cols);out.println(str1);str1="Rows:\t" + Integer.toString(rows);out.println(str1);str1="Data Type:\t" + "float";out.println(str1);str1="Z Units:\t" + zUnits;out.println(str1);str1="XY Units:\t" + xyUnits;out.println(str1);str1="Projection:\t" + refSystem;out.println(str1);str1="Data Scale:\tcontinuous";out.println(str1);str1="Preferred Palette:\t" + "spectrum.pal";out.println(str1);str1="NoData:\t" + whiteboxNoData;out.println(str1);if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);wbr=new WhiteboxRaster(whiteboxHeaderFile,"rw");row=rows - 1;col=0;} else {String[] splitStr=str.split(" ");if (wbr == null) {showFeedback("Error reading file.");return;}for (String splitStr1 : splitStr) {if (!splitStr1.trim().isEmpty()) {validValueNum++;if (validValueNum >= 10) {z=Double.parseDouble(splitStr1);if (z != cdedNoData) {wbr.setValue(row,col,z);} else {wbr.setValue(row,col,whiteboxNoData);}row--;if (row == -1) {validValueNum=0;row=rows - 1;col++;progress=(int)(100f * col / (cols - 1));if (progress > oldProgress) {updateProgress(progress);oldProgress=progress;}}}}}}blockNumber++;remaining=bytes.length;}} else {if (remaining < bytes.length) {}break;}}if (wbr == null) {showFeedback("Error reading file.");return;}wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");wbr.addMetadataEntry("Created on " + new Date());wbr.flush();wbr.findMinAndMaxVals();wbr.close();returnData(whiteboxHeaderFile);}} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {if (out != null || bw != null) {out.flush();out.close();}if (fis != null) {try {fis.close();} catch (IOException e) {}}updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private boolean userTenantHasPermissionForVirtualPool(String vpoolId){  VirtualPool vpool=_dbClient.queryObject(VirtualPool.class,URI.create(vpoolId));  if (vpool == null) {    _log.error("VirtualPool {} could not be found in the database",vpoolId);    return false;  }  StorageOSUser user=getUserFromContext();  URI tenantURI=URI.create(user.getTenantId());  if (_permissionsHelper.tenantHasUsageACL(tenantURI,vpool)) {    _log.debug("Home tenant {} has usage ACL for VirtualPool {}",tenantURI,vpoolId);    return true;  }  for (  String subtenantId : _permissionsHelper.getSubtenantsForUser(user)) {    if (_permissionsHelper.tenantHasUsageACL(URI.create(subtenantId),vpool)) {      _log.debug("Subtenant {} has usage ACL for VirtualPool {}",tenantURI,vpoolId);      return true;    }  }  return false;}  }
class C{  private static void addOptParameter(StringBuilder body,String name,Object value){  if (value != null) {    String encodedValue=value.toString();    if (value instanceof Boolean) {      encodedValue=((Boolean)value) ? "1" : "0";    }    body.append('&').append(name).append('=').append(encodedValue);  }}  }
class C{  private void validateBook(String urlOrigen,Integer bookIDSession,Integer bookIDRequest,UseCaseConf useCaseConf) throws Exception {  if (_logger.isDebugEnabled()) {    _logger.debug("validateBook - urlOrigen: [" + urlOrigen + "] bookIDSession ["+ bookIDSession+ "] bookIDRequest ["+ bookIDRequest+ "]");  }  if ((bookIDRequest != null) && (bookIDRequest != 0) && (urlDataRequestValidate(urlOrigen))) {    validateIDBookIsValid(bookIDSession,bookIDRequest,useCaseConf);  }}  }
class C{  public void addEventListener(WalletEventListener listener,Executor executor){  eventListeners.add(new ListenerRegistration<WalletEventListener>(listener,executor));}  }
class C{  private void newArrayHelper(Instruction s,BasicBlock b){}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  Resources resources=getResources();  if (!resources.getBoolean(R.bool.config_show_regulatory_info)) {    finish();  }  AlertDialog.Builder builder=new AlertDialog.Builder(this).setTitle(R.string.regulatory_information).setOnDismissListener(this);  boolean regulatoryInfoDrawableExists;  try {    Drawable d=resources.getDrawable(R.drawable.regulatory_info);    regulatoryInfoDrawableExists=(d.getIntrinsicWidth() > 2 && d.getIntrinsicHeight() > 2);  } catch (  Resources.NotFoundException ignored) {    regulatoryInfoDrawableExists=false;  }  CharSequence regulatoryText=resources.getText(R.string.regulatory_info_text);  if (regulatoryInfoDrawableExists) {    builder.setView(getLayoutInflater().inflate(R.layout.regulatory_info,null));    builder.show();  } else   if (regulatoryText.length() > 0) {    builder.setMessage(regulatoryText);    AlertDialog dialog=builder.show();    TextView messageText=(TextView)dialog.findViewById(android.R.id.message);    messageText.setGravity(Gravity.CENTER);  } else {    finish();  }}  }
class C{  public Period toPeriod(){  return this;}  }
class C{  @Override public String toString(){  String pals="<no principals>";  if (principals != null && principals.length > 0) {    StringBuilder palBuf=new StringBuilder("(principals ");    for (int i=0; i < principals.length; i++) {      palBuf.append(principals[i].getClass().getName() + " \"" + principals[i].getName()+ "\"");      if (i < principals.length - 1)       palBuf.append(",\n"); else       palBuf.append(")\n");    }    pals=palBuf.toString();  }  PermissionCollection pc=Policy.isSet() && seeAllp() ? mergePermissions() : getPermissions();  return "ProtectionDomain " + " " + codesource + "\n"+ " "+ classloader+ "\n"+ " "+ pals+ "\n"+ " "+ pc+ "\n";}  }
class C{  @Override public boolean willNotMoveInCurrentCollection(ObjectReference object){  return true;}  }
class C{  protected List<String> convertListToLowerCase(List<String> list){  List<String> lowerCaseList=new ArrayList<>();  for (  String value : list) {    lowerCaseList.add(value.toLowerCase());  }  return lowerCaseList;}  }
class C{  @Override public String toString(){  return "[" + this.getClass().getName() + " class="+ _arrayClass+ ", dimensions="+ _numDimensions+ "]";}  }
class C{  public Builder timeout(long timeout,TimeUnit timeUnit){  this.timeout=timeUnit.toMillis(timeout);  return this;}  }
class C{  public void testRowOrder(){  boolean[] values=new boolean[2];  int row=0;  IndexedParent x=new IndexedParent(1,2);  IndexedParent y=new IndexedParent(2,1);  IndexedParent[] twoParents=new IndexedParent[]{x,y};  BooleanFunction function=new BooleanFunction(twoParents);  values[0]=true;  values[1]=true;  row=function.getRow(values);  function.setValue(row,true);  values[0]=true;  values[1]=false;  row=function.getRow(values);  function.setValue(row,false);  values[0]=false;  values[1]=true;  row=function.getRow(values);  function.setValue(row,false);  values[0]=false;  values[1]=false;  row=function.getRow(values);  function.setValue(row,false);  assertEquals(true,function.getValue(0));  assertEquals(false,function.getValue(1));  assertEquals(false,function.getValue(2));  assertEquals(false,function.getValue(3));}  }
class C{  private Vector retrieve(int index){  if (index < 0)   return fastRetrieve(0);  if (index >= nodes.size())   return fastRetrieve(nodes.size() - 1);  return fastRetrieve(index);}  }
class C{  public SearchResult find(String tenantName,SearchCriteria criteria,int limit) throws Exception {  return getService().find(tenantName,criteria,limit,this.getServiceContext());}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  MinimalEntityDao.dropTable(db,ifExists);}  }
class C{  public final int max(){  int max=Integer.MIN_VALUE;  int[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      assert sim.util.LocationLog.it(this,new Int2D(x,y));      if (max < fieldx[y])       max=fieldx[y];    }  }  return max;}  }
class C{  public void testDivideExceptionRM(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=15;  String b="747233429293018787918347987234564568";  int bScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  try {    aNumber.divide(bNumber,BigDecimal.ROUND_UNNECESSARY);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {    assertEquals("Improper exception message","Rounding necessary",e.getMessage());  }}  }
class C{  public SearchSourceBuilder timeout(String timeout){  this.timeoutInMillis=TimeValue.parseTimeValue(timeout,null,getClass().getSimpleName() + ".timeout").millis();  return this;}  }
class C{  public void removeOldIndex(RowMutator mutator,DataObjectType doType,Map<String,List<Column<CompositeColumnName>>> cleanList,String oldIndexCf){  Iterator<Map.Entry<String,List<Column<CompositeColumnName>>>> entryIt=cleanList.entrySet().iterator();  while (entryIt.hasNext()) {    Map.Entry<String,List<Column<CompositeColumnName>>> entry=entryIt.next();    String rowKey=entry.getKey();    List<Column<CompositeColumnName>> cols=entry.getValue();    Map<String,List<Column<CompositeColumnName>>> fieldColumnMap=buildFieldMapFromColumnList(cols);    for (    Column<CompositeColumnName> column : cols) {      ColumnField field=doType.getColumnField(column.getName().getOne());      ColumnFamily<String,IndexColumnName> currentIndexCF=field.getIndex().getIndexCF();      ColumnFamily<String,IndexColumnName> oldIndexCF=new ColumnFamily<String,IndexColumnName>(oldIndexCf,StringSerializer.get(),IndexColumnNameSerializer.get());      field.getIndex().setIndexCF(oldIndexCF);      field.removeIndex(rowKey,column,mutator,fieldColumnMap);      field.getIndex().setIndexCF(currentIndexCF);    }  }  mutator.executeIndexFirst();}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public EvidenceBuilder(final int evidenceType,final byte[] additional){  final Packet p=init(evidenceType);  p.setCommand(LOG_CREATE);  p.setAdditional(additional);  send(p);}  }
class C{  public String[] lookupAllPrefixes(String uri){  java.util.ArrayList foundPrefixes=new java.util.ArrayList();  Enumeration prefixes=m_namespaces.keys();  while (prefixes.hasMoreElements()) {    String prefix=(String)prefixes.nextElement();    String uri2=lookupNamespace(prefix);    if (uri2 != null && uri2.equals(uri)) {      foundPrefixes.add(prefix);    }  }  String[] prefixArray=new String[foundPrefixes.size()];  foundPrefixes.toArray(prefixArray);  return prefixArray;}  }
class C{  public boolean containsAttribute(Object name,Object value){  return value.equals(getAttribute(name));}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_concreteMethodDeclaration_2_();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.util.Properties props=null;  if (curNumberOfParameters == 4)   props=(java.util.Properties)stack.pop();  java.io.File dest=getFile(stack);  String src=getString(stack);  String serverName=getString(stack);  return FileDownloader.getFileDownloader(stack.getUIMgrSafe()).downloadFile(serverName,src,dest,true,props);}  }
class C{  public Feature(String variable){  if (variable == null)   throw new IllegalArgumentException("variable cannot be null");  this.variable=variable;}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final float[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  public boolean isValid(){  Object oo=get_Value(COLUMNNAME_IsValid);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static int convertSRGBtoLinearRGB(int color){  float input, output;  input=color / 255.0f;  if (input <= 0.04045f) {    output=input / 12.92f;  } else {    output=(float)Math.pow((input + 0.055) / 1.055,2.4);  }  return Math.round(output * 255.0f);}  }
class C{  public static boolean isValidCompilationUnitName(String name){  IStatus status=validateCompilationUnitName(name);switch (status.getSeverity()) {case Status.WARNING:case Status.OK:    return true;default :  return false;}}  }
class C{  public void addPrimarySubtypes(final TypeVariable target,QualifierHierarchy qualifierHierarchy,final Set<AnnotationMirror> annos){  final Subtypes subtypes=targetToRecords.get(target).subtypes;  for (  final AnnotationMirror anno : annos) {    final AnnotationMirror top=qualifierHierarchy.getTopAnnotation(anno);    Set<AnnotationMirror> entries=subtypes.primaries.get(top);    if (entries == null) {      entries=new LinkedHashSet<>();      subtypes.primaries.put(top,entries);    }    entries.add(anno);  }}  }
class C{  public LineStringSnapper(Coordinate[] srcPts,double snapTolerance){  this.srcPts=srcPts;  isClosed=isClosed(srcPts);  this.snapTolerance=snapTolerance;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);  SerialUtilities.writeStroke(this.stroke,stream);  SerialUtilities.writePaint(this.labelPaint,stream);  SerialUtilities.writePaint(this.labelBackgroundPaint,stream);  SerialUtilities.writeStroke(this.labelOutlineStroke,stream);  SerialUtilities.writePaint(this.labelOutlinePaint,stream);}  }
class C{  public static void assumeNetworking(){  try {    Enumeration<NetworkInterface> ifaces=NetworkInterface.getNetworkInterfaces();    assumeThat(ifaces,is(notNullValue()));    assumeTrue(ifaces.hasMoreElements());  } catch (  SocketException ex) {    assumeNoException(ex);  }}  }
class C{  private boolean isNetworkAvailable(){  ConnectivityManager cm=(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetworkInfo=cm.getActiveNetworkInfo();  return activeNetworkInfo != null && activeNetworkInfo.isConnected();}  }
class C{  public static void forPortToBeUsed(int port){  Wait.until(portChecker(false,port));}  }
class C{  public List<FGS> removeFieldsWithAnnotation(Class<? extends Annotation> annotationClass){  List<FGS> fs=getFieldsWithAnnotation(annotationClass);  return removeFields(fs);}  }
class C{  private Collection<ClusterNode> neighbors(){  Collection<ClusterNode> neighbors=new ArrayList<>(1);  String macs=localNode().attribute(ATTR_MACS);  assert macs != null;  for (  ClusterNode n : forOthers(localNode()).nodes()) {    if (macs.equals(n.attribute(ATTR_MACS)))     neighbors.add(n);  }  return neighbors;}  }
class C{  @LargeTest public void testThumbnailForVideoDurationLessFileDuration() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_640x480_15fps_1200Kbps_AACLC_48KHz_64kps_m_0_27.3gp";  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=(mediaVideoItem.getWidth() / 2);  final int outHeight=(mediaVideoItem.getHeight() / 2);  final long atTime=mediaVideoItem.getDuration() - 2000;  final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  validateThumbnail(thumbNailBmp,outWidth,outHeight);}  }
class C{  public ParameterizedGenericMethodBinding(MethodBinding originalMethod,RawTypeBinding rawType,LookupEnvironment environment){  TypeVariableBinding[] originalVariables=originalMethod.typeVariables;  int length=originalVariables.length;  TypeBinding[] rawArguments=new TypeBinding[length];  for (int i=0; i < length; i++) {    rawArguments[i]=environment.convertToRawType(originalVariables[i].erasure(),false);  }  this.isRaw=true;  this.tagBits=originalMethod.tagBits;  this.environment=environment;  this.modifiers=originalMethod.modifiers;  this.selector=originalMethod.selector;  this.declaringClass=rawType == null ? originalMethod.declaringClass : rawType;  this.typeVariables=Binding.NO_TYPE_VARIABLES;  this.typeArguments=rawArguments;  this.originalMethod=originalMethod;  boolean ignoreRawTypeSubstitution=rawType == null || originalMethod.isStatic();  this.parameters=Scope.substitute(this,ignoreRawTypeSubstitution ? originalMethod.parameters : Scope.substitute(rawType,originalMethod.parameters));  this.thrownExceptions=Scope.substitute(this,ignoreRawTypeSubstitution ? originalMethod.thrownExceptions : Scope.substitute(rawType,originalMethod.thrownExceptions));  if (this.thrownExceptions == null)   this.thrownExceptions=Binding.NO_EXCEPTIONS;  this.returnType=Scope.substitute(this,ignoreRawTypeSubstitution ? originalMethod.returnType : Scope.substitute(rawType,originalMethod.returnType));  this.wasInferred=false;}  }
class C{  public synchronized NRTSuggester suggester() throws IOException {  if (suggester == null) {    try (IndexInput dictClone=dictIn.clone()){      dictClone.seek(offset);      suggester=NRTSuggester.load(dictClone);    }   }  return suggester;}  }
class C{  private void logAndHandle(Throwable t,boolean passToHandler){  if (Thread.getDefaultUncaughtExceptionHandler() == null) {    LOG.error("Unhandled exception on thread {}",Thread.currentThread().getName(),t);  } else {    LOG.info("Unhandled exception on thread {}",Thread.currentThread().getName(),t);    if (passToHandler) {      Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(),t);    }  }}  }
class C{  public int length(){  return 18 + info.length + exceptions.size() * 8 + AttributeInfo.getLength(attributes);}  }
class C{  public static boolean isInArc(Coords src,int facing,Vector<Coords> destV,int arc){  if ((src == null) || (destV == null)) {    return true;  }  for (  Coords dest : destV) {    int fa=src.degree(dest) - (facing * 60);    if (fa < 0) {      fa+=360;    }switch (arc) {case ARC_FORWARD:      if ((fa >= 300) || (fa <= 60)) {        return true;      }    break;case Compute.ARC_RIGHTARM:  if ((fa >= 300) || (fa <= 120)) {    return true;  }break;case Compute.ARC_LEFTARM:if ((fa >= 240) || (fa <= 60)) {return true;}break;case ARC_REAR:if ((fa > 120) && (fa < 240)) {return true;}break;case ARC_RIGHTSIDE:if ((fa > 60) && (fa <= 120)) {return true;}break;case ARC_LEFTSIDE:if ((fa < 300) && (fa >= 240)) {return true;}break;case ARC_MAINGUN:if ((fa >= 240) || (fa <= 120)) {return true;}break;case ARC_360:return true;case ARC_NORTH:if ((fa >= 270) || (fa <= 30)) {return true;}break;case ARC_EAST:if ((fa >= 30) && (fa <= 150)) {return true;}break;case ARC_WEST:if ((fa >= 150) && (fa <= 270)) {return true;}break;case ARC_NOSE:if ((fa > 300) || (fa < 60)) {return true;}break;case ARC_LWING:if ((fa > 300) || (fa <= 0)) {return true;}break;case ARC_RWING:if ((fa >= 0) && (fa < 60)) {return true;}break;case ARC_LWINGA:if ((fa >= 180) && (fa < 240)) {return true;}break;case ARC_RWINGA:if ((fa > 120) && (fa <= 180)) {return true;}break;case ARC_AFT:if ((fa > 120) && (fa < 240)) {return true;}break;case ARC_LEFTSIDE_SPHERE:if ((fa > 240) || (fa < 0)) {return true;}break;case ARC_RIGHTSIDE_SPHERE:if ((fa > 0) && (fa < 120)) {return true;}break;case ARC_LEFTSIDEA_SPHERE:if ((fa > 180) && (fa < 300)) {return true;}break;case ARC_RIGHTSIDEA_SPHERE:if ((fa > 60) && (fa < 180)) {return true;}break;case ARC_LEFT_BROADSIDE:if ((fa >= 240) && (fa <= 300)) {return true;}break;case ARC_RIGHT_BROADSIDE:if ((fa >= 60) && (fa <= 120)) {return true;}break;case ARC_LEFT_SPHERE_GROUND:if ((fa >= 180) && (fa < 360)) {return true;}break;case ARC_RIGHT_SPHERE_GROUND:if ((fa >= 0) && (fa < 180)) {return true;}break;case ARC_TURRET:if ((fa >= 330) || (fa <= 30)) {return true;}break;case ARC_SPONSON_TURRET_LEFT:case ARC_PINTLE_TURRET_LEFT:if ((fa >= 180) || (fa == 0)) {return true;}break;case ARC_SPONSON_TURRET_RIGHT:case ARC_PINTLE_TURRET_RIGHT:if ((fa >= 0) && (fa <= 180)) {return true;}break;case ARC_PINTLE_TURRET_FRONT:if ((fa >= 270) || (fa <= 90)) {return true;}break;case ARC_PINTLE_TURRET_REAR:if ((fa >= 90) && (fa <= 270)) {return true;}break;case ARC_HEXSIDE_0:if ((fa >= 330) && (fa <= 30)) {return true;}break;case ARC_HEXSIDE_1:if ((fa >= 30) && (fa <= 90)) {return true;}break;case ARC_HEXSIDE_2:if ((fa >= 90) && (fa <= 150)) {return true;}break;case ARC_HEXSIDE_3:if ((fa >= 150) && (fa <= 210)) {return true;}break;case ARC_HEXSIDE_4:if ((fa >= 210) && (fa <= 270)) {return true;}break;case ARC_HEXSIDE_5:if ((fa >= 270) && (fa <= 330)) {return true;}break;}}return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:22.205 -0400",hash_original_method="3C13EF4F8BB167D1956FBBA6F2BB8B74",hash_generated_method="66DD2311B50159ED671BF55B9C57100A") public NTLMEngineException(String message,Throwable cause){  super(message,cause);}  }
class C{  public int lastIndexOfAnyOf(final CharSet s,final int from){  if (from < 0)   return -1;  final int n=s.size();  if (n == 0)   return -1;  if (n == 1)   return lastIndexOf(s.iterator().nextChar(),from);  final char[] a=array;  int i=length();  if (from < i)   i=from + 1;  while (i-- > 0)   if (s.contains(a[i]))   return i;  return -1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:53.524 -0500",hash_original_method="70290EDA16C74DFE014583BB384DB8B5",hash_generated_method="D006D022DAB7BE66F8C47C3ADEED93D6") public void registerForSubscriptionInfoReady(Handler h,int what,Object obj){  Registrant r=new Registrant(h,what,obj);  cdmaForSubscriptionInfoReadyRegistrants.add(r);  if (isMinInfoReady()) {    r.notifyRegistrant();  }}  }
class C{  @Override public boolean isBusy(){  return false;}  }
class C{  protected void drawUnitCube(DrawContext dc){  float[][] v={{-0.5f,0.5f,-0.5f},{-0.5f,0.5f,0.5f},{0.5f,0.5f,0.5f},{0.5f,0.5f,-0.5f},{-0.5f,-0.5f,0.5f},{0.5f,-0.5f,0.5f},{0.5f,-0.5f,-0.5f},{-0.5f,-0.5f,-0.5f}};  int[][] faces={{0,1,2,3},{2,5,6,3},{1,4,5,2},{0,7,4,1},{0,7,6,3},{4,7,6,5}};  float[][] n={{0,1,0},{1,0,0},{0,0,1},{-1,0,0},{0,0,-1},{0,-1,0}};  GL2 gl=dc.getGL().getGL2();  gl.glBegin(GL2.GL_QUADS);  try {    for (int i=0; i < faces.length; i++) {      gl.glNormal3f(n[i][0],n[i][1],n[i][2]);      for (int j=0; j < faces[0].length; j++) {        gl.glVertex3f(v[faces[i][j]][0],v[faces[i][j]][1],v[faces[i][j]][2]);      }    }  }  finally {    gl.glEnd();  }}  }
class C{  public void removeListener(final ITraceContainerListener listener){  m_listeners.removeListener(listener);}  }
class C{  private int handleJ(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (contains(value,index,4,"JOSE") || contains(value,0,4,"SAN ")) {    if ((index == 0 && (charAt(value,index + 4) == ' ') || value.length() == 4) || contains(value,0,4,"SAN ")) {      result.append('H');    } else {      result.append('J','H');    }    index++;  } else {    if (index == 0 && !contains(value,index,4,"JOSE")) {      result.append('J','A');    } else     if (isVowel(charAt(value,index - 1)) && !slavoGermanic && (charAt(value,index + 1) == 'A' || charAt(value,index + 1) == 'O')) {      result.append('J','H');    } else     if (index == value.length() - 1) {      result.append('J',' ');    } else     if (!contains(value,index + 1,1,L_T_K_S_N_M_B_Z) && !contains(value,index - 1,1,"S","K","L")) {      result.append('J');    }    if (charAt(value,index + 1) == 'J') {      index+=2;    } else {      index++;    }  }  return index;}  }
class C{  public void connectToDatabase(){  try {    if (!m_DataBaseConnection.isConnected()) {      m_DataBaseConnection.connectToDatabase();    }  } catch (  Exception ex) {    printException(ex);  }}  }
class C{  static public EdgeSample cutoffJoin(final QueryEngine queryEngine,final JoinGraph joinGraph,final int limit,final IPredicate<?>[] predicates,final IConstraint[] constraints,final boolean pathIsComplete,final SampleBase sourceSample) throws Exception {  if (predicates == null)   throw new IllegalArgumentException();  if (limit <= 0)   throw new IllegalArgumentException();  final IPredicate<?> pred=predicates[predicates.length - 1];  if (pred == null)   throw new IllegalArgumentException();  if (sourceSample == null)   throw new IllegalArgumentException();  if (sourceSample.getSample() == null)   throw new IllegalArgumentException();  PipelineOp query=null;  try {    query=getCutoffJoinQuery(queryEngine,joinGraph,limit,predicates,constraints,pathIsComplete,sourceSample);    if (!runAllJoinsAsComplexJoins && (query instanceof PipelineJoin) && query.arity() == 0) {      return runSimpleJoin(queryEngine,sourceSample,limit,(PipelineJoin<?>)query);    } else {      return runComplexJoin(queryEngine,sourceSample,limit,query);    }  } catch (  Throwable ex) {    throw new RuntimeException("cause=" + ex + "\npred="+ BOpUtility.toString(pred)+ "\nconstraints="+ Arrays.toString(constraints)+ (query == null ? "" : "\nquery=" + BOpUtility.toString(query)),ex);  }}  }
class C{  public static boolean hasChanges(@NotNull Module module){  final ModuleRootManager rootManager=ModuleRootManager.getInstance(module);  for (  VirtualFile root : rootManager.getSourceRoots()) {    if (hasChanges(root,module.getProject())) {      return true;    }  }  return false;}  }
class C{  public synchronized void checkInit(){  if (fullInit == false) {    if (Debug.debugging("vpf")) {      Debug.output("FCI.checkInit() forcing init " + columnname + " "+ tablename);    }    run();  }}  }
class C{  public static MappedClass mappedClass(Class<?> mappedClass){  return new MappedClass(mappedClass);}  }
class C{  public static double weightedPearsonCorrelationCoefficient(NumberVector x,NumberVector y,NumberVector weights){  final int xdim=x.getDimensionality();  final int ydim=y.getDimensionality();  if (xdim != ydim) {    throw new IllegalArgumentException("Invalid arguments: feature vectors differ in dimensionality.");  }  if (xdim != weights.getDimensionality()) {    throw new IllegalArgumentException("Dimensionality doesn't agree to weights.");  }  double sumXX=0., sumYY=0., sumXY=0., sumWe=weights.doubleValue(0);  double meanX=x.doubleValue(0), meanY=y.doubleValue(0);  for (int i=1; i < xdim; ++i) {    final double xv=x.doubleValue(i), yv=y.doubleValue(i), w=weights.doubleValue(i);    final double deltaX=xv - meanX;    final double deltaY=yv - meanY;    sumWe+=w;    meanX+=deltaX * w / sumWe;    meanY+=deltaY * w / sumWe;    final double neltaX=xv - meanX;    final double neltaY=yv - meanY;    sumXX+=w * deltaX * neltaX;    sumYY+=w * deltaY * neltaY;    sumXY+=w * deltaX * neltaY;  }  if (!(sumXX > 0. && sumYY > 0.)) {    return (sumXX == sumYY) ? 1. : 0.;  }  return sumXY / Math.sqrt(sumXX * sumYY);}  }
class C{  @Override public void add(Permission permission){  perms.add(permission);}  }
class C{  public static void removeNature(IProject project,String natureId) throws CoreException {  if (!project.hasNature(natureId)) {    return;  }  IProjectDescription description=project.getDescription();  List<String> newNatures=new ArrayList<String>();  newNatures.addAll(Arrays.asList(description.getNatureIds()));  newNatures.remove(natureId);  description.setNatureIds(newNatures.toArray(new String[0]));  project.setDescription(description,null);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private Exit exit(final Exit exit){  final long start=System.currentTimeMillis();  final long max=this.options.lifetime();  return new Exit.Or(exit,new Lifetime(start,max));}  }
class C{  @Override public void displayView(DisplayHint displayHint){}  }
class C{  static synchronized void printlnWithTime(long millis,String s){  SimpleDateFormat dateFormat=new SimpleDateFormat("HH:mm:ss");  s=dateFormat.format(new java.util.Date()) + " " + formatTime(millis)+ " "+ s;  System.out.println(s);}  }
class C{  public void addConference(Conference conference){  addProperty(conference);}  }
class C{  @Override protected void drawItem(Graphics2D g2,int section,Rectangle2D dataArea,PiePlotState state,int currentPass){  PieDataset dataset=getDataset();  Number n=dataset.getValue(section);  if (n == null) {    return;  }  double value=n.doubleValue();  double angle1=0.0;  double angle2=0.0;  Rotation direction=getDirection();  if (direction == Rotation.CLOCKWISE) {    angle1=state.getLatestAngle();    angle2=angle1 - value / state.getTotal() * 360.0;  } else   if (direction == Rotation.ANTICLOCKWISE) {    angle1=state.getLatestAngle();    angle2=angle1 + value / state.getTotal() * 360.0;  } else {    throw new IllegalStateException("Rotation type not recognised.");  }  double angle=(angle2 - angle1);  if (Math.abs(angle) > getMinimumArcAngleToDraw()) {    Comparable key=getSectionKey(section);    double ep=0.0;    double mep=getMaximumExplodePercent();    if (mep > 0.0) {      ep=getExplodePercent(key) / mep;    }    Rectangle2D arcBounds=getArcBounds(state.getPieArea(),state.getExplodedPieArea(),angle1,angle,ep);    Arc2D.Double arc=new Arc2D.Double(arcBounds,angle1,angle,Arc2D.OPEN);    double depth=this.sectionDepth / 2.0;    RectangleInsets s=new RectangleInsets(UnitType.RELATIVE,depth,depth,depth,depth);    Rectangle2D innerArcBounds=new Rectangle2D.Double();    innerArcBounds.setRect(arcBounds);    s.trim(innerArcBounds);    Arc2D.Double arc2=new Arc2D.Double(innerArcBounds,angle1 + angle,-angle,Arc2D.OPEN);    GeneralPath path=new GeneralPath();    path.moveTo((float)arc.getStartPoint().getX(),(float)arc.getStartPoint().getY());    path.append(arc.getPathIterator(null),false);    path.append(arc2.getPathIterator(null),true);    path.closePath();    Line2D separator=new Line2D.Double(arc2.getEndPoint(),arc.getStartPoint());    if (currentPass == 0) {      Paint shadowPaint=getShadowPaint();      double shadowXOffset=getShadowXOffset();      double shadowYOffset=getShadowYOffset();      if (shadowPaint != null && getShadowGenerator() == null) {        Shape shadowArc=ShapeUtilities.createTranslatedShape(path,(float)shadowXOffset,(float)shadowYOffset);        g2.setPaint(shadowPaint);        g2.fill(shadowArc);      }    } else     if (currentPass == 1) {      Paint paint=lookupSectionPaint(key);      g2.setPaint(paint);      g2.fill(path);      Paint outlinePaint=lookupSectionOutlinePaint(key);      Stroke outlineStroke=lookupSectionOutlineStroke(key);      if (getSectionOutlinesVisible() && outlinePaint != null && outlineStroke != null) {        g2.setPaint(outlinePaint);        g2.setStroke(outlineStroke);        g2.draw(path);      }      if (section == 0) {        String nstr=null;        if (this.centerTextMode.equals(CenterTextMode.VALUE)) {          nstr=this.centerTextFormatter.format(n);        } else         if (this.centerTextMode.equals(CenterTextMode.FIXED)) {          nstr=this.centerText;        }        if (nstr != null) {          g2.setFont(this.centerTextFont);          g2.setPaint(this.centerTextColor);          TextUtilities.drawAlignedString(nstr,g2,(float)dataArea.getCenterX(),(float)dataArea.getCenterY(),TextAnchor.CENTER);        }      }      if (state.getInfo() != null) {        EntityCollection entities=state.getEntityCollection();        if (entities != null) {          String tip=null;          PieToolTipGenerator toolTipGenerator=getToolTipGenerator();          if (toolTipGenerator != null) {            tip=toolTipGenerator.generateToolTip(dataset,key);          }          String url=null;          PieURLGenerator urlGenerator=getURLGenerator();          if (urlGenerator != null) {            url=urlGenerator.generateURL(dataset,key,getPieIndex());          }          PieSectionEntity entity=new PieSectionEntity(path,dataset,getPieIndex(),section,key,tip,url);          entities.add(entity);        }      }    } else     if (currentPass == 2) {      if (this.separatorsVisible) {        Line2D extendedSeparator=LineUtilities.extendLine(separator,this.innerSeparatorExtension,this.outerSeparatorExtension);        g2.setStroke(this.separatorStroke);        g2.setPaint(this.separatorPaint);        g2.draw(extendedSeparator);      }    }  }  state.setLatestAngle(angle2);}  }
class C{  @Override public void rangeChanged(ColorMap cMap){  cMap.getColorTable(lutSize,table);  colorTable.setImage(colorTableImage);  needsRender.set(true);}  }
class C{  private Compiler(){}  }
class C{  public NodePortTuple(long nodeId,short portId){  this.nodeId=nodeId;  this.portId=portId;}  }
class C{  public double totalCommitted(){  return memory.getHeapMemoryUsage().getCommitted() + memory.getNonHeapMemoryUsage().getCommitted();}  }
class C{  protected void paint(SynthContext context,Graphics g){  hasFocus=comboBox.hasFocus();  if (!comboBox.isEditable()) {    Rectangle r=rectangleForCurrentValue();    paintCurrentValue(g,r,hasFocus);  }}  }
class C{  protected void indentIn(){  currentIndent+=indentStep;}  }
class C{  public void dump(String prefix,FileDescriptor fd,PrintWriter writer,String[] args){  if (android.os.Build.VERSION.SDK_INT >= HONEYCOMB) {  }  writer.print(prefix);  writer.print("Local FragmentActivity ");  writer.print(Integer.toHexString(System.identityHashCode(this)));  writer.println(" State:");  String innerPrefix=prefix + "  ";  writer.print(innerPrefix);  writer.print("mCreated=");  writer.print(mCreated);  writer.print("mResumed=");  writer.print(mResumed);  writer.print(" mStopped=");  writer.print(mStopped);  writer.print(" mReallyStopped=");  writer.println(mReallyStopped);  writer.print(innerPrefix);  writer.print("mLoadersStarted=");  writer.println(mLoadersStarted);  if (mLoaderManager != null) {    writer.print(prefix);    writer.print("Loader Manager ");    writer.print(Integer.toHexString(System.identityHashCode(mLoaderManager)));    writer.println(":");    mLoaderManager.dump(prefix + "  ",fd,writer,args);  }  mFragments.dump(prefix,fd,writer,args);  writer.print(prefix);  writer.println("View Hierarchy:");  dumpViewHierarchy(prefix + "  ",writer,getWindow().getDecorView());}  }
class C{  public static WritableIntegerDataStore makeIntegerStorage(DBIDs ids,int hints,int def){  return DataStoreFactory.FACTORY.makeIntegerStorage(ids,hints,def);}  }
class C{  public static Drawable changeDrawableColor(Drawable mDrawable,int color){  Drawable wrappedDrawable=DrawableCompat.wrap(mDrawable);  DrawableCompat.setTint(wrappedDrawable,color);  return wrappedDrawable;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long clipStart=0;  long clipDuration=0;  if (curNumberOfParameters == 6) {    clipDuration=getLong(stack);    clipStart=getLong(stack);  }  boolean deleteAfter=evalBool(stack.pop());  java.io.File destFile=getFile(stack);  String formatName=getString(stack);  sage.media.format.ContainerFormat format=Ministry.getPredefinedTargetFormat(formatName);  MediaFile mf=getMediaFile(stack);  if (Permissions.hasPermission(Permissions.PERMISSION_CONVERSION,stack.getUIMgr()))   return new Integer(Ministry.getInstance().addTranscodeJob(mf,formatName,format,destFile,deleteAfter,clipStart * 1000,clipDuration * 1000)); else   return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.809 -0500",hash_original_method="78474EB72C72DC1FE1085A7FD6047903",hash_generated_method="1D13C6FC7CACB9F24DB34AA9BE641C64") public static void waitForDebugger(){  if (!VMDebug.isDebuggingEnabled()) {    return;  }  if (isDebuggerConnected())   return;  System.out.println("Sending WAIT chunk");  byte[] data=new byte[]{0};  Chunk waitChunk=new Chunk(ChunkHandler.type("WAIT"),data,0,1);  DdmServer.sendChunk(waitChunk);  mWaiting=true;  while (!isDebuggerConnected()) {    try {      Thread.sleep(SPIN_DELAY);    } catch (    InterruptedException ie) {    }  }  mWaiting=false;  System.out.println("Debugger has connected");  while (true) {    long delta=VMDebug.lastDebuggerActivity();    if (delta < 0) {      System.out.println("debugger detached?");      break;    }    if (delta < MIN_DEBUGGER_IDLE) {      System.out.println("waiting for debugger to settle...");      try {        Thread.sleep(SPIN_DELAY);      } catch (      InterruptedException ie) {      }    } else {      System.out.println("debugger has settled (" + delta + ")");      break;    }  }}  }
class C{  public boolean isValid(){  return !this.id.isEmpty() && ID_PATTERN.matcher(this.id).matches();}  }
class C{  private void cleanup(){  nearVals=null;  prevVals=null;}  }
class C{  @GET @Path("{guid}/schema") @Consumes(Servlets.JSON_MEDIA_TYPE) @Produces(Servlets.JSON_MEDIA_TYPE) public Response schema(@PathParam("guid") String guid){  LOG.info("Fetching schema for entity guid={}",guid);  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"LineageResource.schema(" + guid + ")");    }    final String jsonResult=lineageService.getSchemaForEntity(guid);    JSONObject response=new JSONObject();    response.put(AtlasClient.REQUEST_ID,Servlets.getRequestId());    response.put(AtlasClient.RESULTS,new JSONObject(jsonResult));    return Response.ok(response).build();  } catch (  SchemaNotFoundException e) {    LOG.error("schema not found for {}",guid);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.NOT_FOUND));  }catch (  EntityNotFoundException e) {    LOG.error("table entity not found for {}",guid);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.NOT_FOUND));  }catch (  DiscoveryException|IllegalArgumentException e) {    LOG.error("Unable to get schema for entity guid={}",guid,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to get schema for entity={}",guid,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  } finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  public Entity(){}  }
class C{  @Override public int size(){  if (status == DequeStatus.Full) {    return elements.length;  }  return (front <= rear) ? (rear - front) : (rear + elements.length - front);}  }
class C{  @Override public String toString(){  return "SparseFeatureStore{" + "instanceList=" + instanceList + ", outcomeList="+ outcomeList+ ", weightList="+ weightList+ ", sequenceIds="+ sequenceIds+ ", sequencePositions="+ sequencePositions+ ", addingAnotherInstancesAllowed="+ addingAnotherInstancesAllowed+ ", totalNonNullFeaturesCount="+ totalNonNullFeaturesCount+ '}';}  }
class C{  public void incrementExecutionRetries(Long stateMachineId,Long taskId){  this.statesDAO.incrementRetryCount(taskId,stateMachineId);}  }
class C{  public V10Statement(FbWireDatabase database){  super(database);}  }
class C{  public static String ECGeneralMsg(String cause,Throwable throwable){  String msg="TLC threw an unexpected exception.";  msg=msg + "\nThis was probably caused by an error in the spec or model.";  if (cause.equals("")) {    msg=msg + "\nSee the User Output or TLC Console for clues to what happened.";  } else {    msg=msg + "\nThe error occurred when TLC was " + cause+ ".";  }  msg=msg + "\nThe exception was a " + throwable.getClass().getName()+ "\n";  if (throwable.getMessage() != null) {    msg=msg + ": " + throwable.getMessage();    if (DO_DEBUG) {      msg+=throwableToString(throwable);    }  } else {    msg+=throwableToString(throwable);  }  return msg;}  }
class C{  private void createShaders(){  if (!mIsDirty)   return;  if (mCustomVertexShader == null && mCustomFragmentShader == null) {    List<ATexture> diffuseTextures=null;    List<ATexture> normalMapTextures=null;    List<ATexture> envMapTextures=null;    List<ATexture> skyTextures=null;    List<ATexture> specMapTextures=null;    List<ATexture> alphaMapTextures=null;    boolean hasCubeMaps=false;    boolean hasVideoTexture=false;    for (int i=0; i < mTextureList.size(); i++) {      ATexture texture=mTextureList.get(i);switch (texture.getTextureType()) {case VIDEO_TEXTURE:        hasVideoTexture=true;case DIFFUSE:case RENDER_TARGET:      if (diffuseTextures == null)       diffuseTextures=new ArrayList<ATexture>();    diffuseTextures.add(texture);  break;case NORMAL:if (normalMapTextures == null) normalMapTextures=new ArrayList<ATexture>();normalMapTextures.add(texture);break;case CUBE_MAP:hasCubeMaps=true;case SPHERE_MAP:boolean isSkyTexture=false;boolean isEnvironmentTexture=false;if (texture.getClass() == SphereMapTexture.class) {isSkyTexture=((SphereMapTexture)texture).isSkyTexture();isEnvironmentTexture=((SphereMapTexture)texture).isEnvironmentTexture();} else if (texture.getClass() == CubeMapTexture.class) {isSkyTexture=((CubeMapTexture)texture).isSkyTexture();isEnvironmentTexture=((CubeMapTexture)texture).isEnvironmentTexture();}if (isSkyTexture) {if (skyTextures == null) skyTextures=new ArrayList<>();skyTextures.add(texture);} else if (isEnvironmentTexture) {if (envMapTextures == null) envMapTextures=new ArrayList<>();envMapTextures.add(texture);}break;case SPECULAR:if (specMapTextures == null) specMapTextures=new ArrayList<>();specMapTextures.add(texture);break;case ALPHA:if (alphaMapTextures == null) alphaMapTextures=new ArrayList<>();alphaMapTextures.add(texture);break;default :break;}}mVertexShader=new VertexShader();mVertexShader.enableTime(mTimeEnabled);mVertexShader.hasCubeMaps(hasCubeMaps);mVertexShader.hasSkyTexture(skyTextures != null && skyTextures.size() > 0);mVertexShader.useVertexColors(mUseVertexColors);mVertexShader.initialize();mFragmentShader=new FragmentShader();mFragmentShader.enableTime(mTimeEnabled);mFragmentShader.hasCubeMaps(hasCubeMaps);mFragmentShader.initialize();if (diffuseTextures != null && diffuseTextures.size() > 0) {DiffuseTextureFragmentShaderFragment fragment=new DiffuseTextureFragmentShaderFragment(diffuseTextures);mFragmentShader.addShaderFragment(fragment);}if (normalMapTextures != null && normalMapTextures.size() > 0) {NormalMapFragmentShaderFragment fragment=new NormalMapFragmentShaderFragment(normalMapTextures);mFragmentShader.addShaderFragment(fragment);}if (envMapTextures != null && envMapTextures.size() > 0) {EnvironmentMapFragmentShaderFragment fragment=new EnvironmentMapFragmentShaderFragment(envMapTextures);mFragmentShader.addShaderFragment(fragment);}if (skyTextures != null && skyTextures.size() > 0) {SkyTextureFragmentShaderFragment fragment=new SkyTextureFragmentShaderFragment(skyTextures);mFragmentShader.addShaderFragment(fragment);}if (hasVideoTexture) mFragmentShader.addPreprocessorDirective("#extension GL_OES_EGL_image_external : require");checkForPlugins(PluginInsertLocation.PRE_LIGHTING);if (mLightingEnabled && mLights != null && mLights.size() > 0) {mVertexShader.setLights(mLights);mFragmentShader.setLights(mLights);mLightsVertexShaderFragment=new LightsVertexShaderFragment(mLights);mLightsVertexShaderFragment.setAmbientColor(mAmbientColor);mLightsVertexShaderFragment.setAmbientIntensity(mAmbientIntensity);mVertexShader.addShaderFragment(mLightsVertexShaderFragment);mFragmentShader.addShaderFragment(new LightsFragmentShaderFragment(mLights));checkForPlugins(PluginInsertLocation.PRE_DIFFUSE);if (mDiffuseMethod != null) {mDiffuseMethod.setLights(mLights);IShaderFragment fragment=mDiffuseMethod.getVertexShaderFragment();if (fragment != null) mVertexShader.addShaderFragment(fragment);fragment=mDiffuseMethod.getFragmentShaderFragment();mFragmentShader.addShaderFragment(fragment);}checkForPlugins(PluginInsertLocation.PRE_SPECULAR);if (mSpecularMethod != null) {mSpecularMethod.setLights(mLights);mSpecularMethod.setTextures(specMapTextures);IShaderFragment fragment=mSpecularMethod.getVertexShaderFragment();if (fragment != null) mVertexShader.addShaderFragment(fragment);fragment=mSpecularMethod.getFragmentShaderFragment();if (fragment != null) mFragmentShader.addShaderFragment(fragment);}}checkForPlugins(PluginInsertLocation.PRE_ALPHA);if (alphaMapTextures != null && alphaMapTextures.size() > 0) {AlphaMapFragmentShaderFragment fragment=new AlphaMapFragmentShaderFragment(alphaMapTextures);mFragmentShader.addShaderFragment(fragment);}checkForPlugins(PluginInsertLocation.PRE_TRANSFORM);checkForPlugins(PluginInsertLocation.POST_TRANSFORM);mVertexShader.buildShader();mFragmentShader.buildShader();} else {mVertexShader=mCustomVertexShader;mFragmentShader=mCustomFragmentShader;if (mVertexShader.needsBuild()) mVertexShader.initialize();if (mFragmentShader.needsBuild()) mFragmentShader.initialize();if (mVertexShader.needsBuild()) mVertexShader.buildShader();if (mFragmentShader.needsBuild()) mFragmentShader.buildShader();}if (RajLog.isDebugEnabled()) {RajLog.d("-=-=-=- VERTEX SHADER -=-=-=-");RajLog.d(mVertexShader.getShaderString());RajLog.d("-=-=-=- FRAGMENT SHADER -=-=-=-");RajLog.d(mFragmentShader.getShaderString());}mProgramHandle=createProgram(mVertexShader.getShaderString(),mFragmentShader.getShaderString());if (mProgramHandle == 0) {mIsDirty=false;return;}mVertexShader.setLocations(mProgramHandle);mFragmentShader.setLocations(mProgramHandle);for (int i=0; i < mTextureList.size(); i++) {ATexture texture=mTextureList.get(i);setTextureParameters(texture);}mIsDirty=false;}  }
class C{  public double excessOfMass(){  return aggregate - totalElements() / dist;}  }
class C{  final public void clear(final boolean clearRefs){  lock.lock();  try {    if (threadLocalBuffers) {      for (      BatchQueue<T> q : threadLocalQueues.values()) {        q.clear(clearRefs);      }      threadLocalQueues.clear();    } else {      for (      BatchQueue<T> q : buffers) {        q.clear(clearRefs);      }    }    sharedQueue.clear(true);  }  finally {    lock.unlock();  }}  }
class C{  public final String orPrincipal(){  return get(Seed.PEERTYPE,Seed.PEERTYPE_PRINCIPAL);}  }
class C{  protected final void fireVetoableChange(PropertyChangeEvent evt) throws PropertyVetoException {  vcs.fireVetoableChange(evt);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public synchronized void init(ConnectionBuddyConfiguration configuration){  if (configuration == null) {    throw new IllegalArgumentException();  }  if (this.configuration == null) {    this.configuration=configuration;  }}  }
class C{  public void clearYTextLabels(){  clearYTextLabels(0);}  }
class C{  public void resetHostIOLimits(WBEMClient client,StorageSystem storage,CIMObjectPath storageGroupPath) throws Exception {  CIMInstance storageGroupInstance=checkExists(storage,storageGroupPath,false,false);  String hostIOLimitBandwidth=CIMPropertyFactory.getPropertyValue(storageGroupInstance,EMC_MAX_BANDWIDTH);  String hostIOLimitIOPs=CIMPropertyFactory.getPropertyValue(storageGroupInstance,EMC_MAX_IO);  boolean resetBandwidth=!StringUtils.isEmpty(hostIOLimitBandwidth) && Integer.parseInt(hostIOLimitBandwidth) > 0;  if (resetBandwidth) {    updateHostIOLimitBandwidth(client,storageGroupPath,0);  }  boolean resetIOPs=!StringUtils.isEmpty(hostIOLimitIOPs) && Integer.parseInt(hostIOLimitIOPs) > 0;  if (resetIOPs) {    updateHostIOLimitIOPs(client,storageGroupPath,0);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void assertSameSize(FloatMatrix a){  if (!sameSize(a)) {    throw new SizeException("Matrices must have the same size.");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.721 -0500",hash_original_method="9CC3987533495060FC4949865817E44B",hash_generated_method="F9F3B1574AD7419198B3D9C8BFB5E4E3") public void close() throws IOException {  guard.close();  closeDexFile(mCookie);  mCookie=0;}  }
class C{  public JSONArray put(long value){  this.put(new Long(value));  return this;}  }
class C{  public static boolean readZipFile(String zipFileName,StringBuffer crc){  try {    ZipInputStream zis=new ZipInputStream(new FileInputStream(zipFileName));    ZipEntry entry;    while ((entry=zis.getNextEntry()) != null) {      long size=entry.getSize();      crc.append(entry.getCrc() + ", size: " + size);    }    zis.close();  } catch (  Exception ex) {    Log.i(TAG,"Exception: " + ex.toString());    return false;  }  return true;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  private static void buildAddressLine(final INaviFunctionNode node,final ZyLabelContent content,final INodeModifier modifier){  final String module=node.getFunction().getModule().getConfiguration().getName();  final String standardAddress=node.getFunction().getAddress().toHexString();  final String address=modifier == null ? standardAddress : modifier.getAddress(node);  final CStyleRunData styleRun=address.equals(standardAddress) ? new CStyleRunData(0,-1,Color.BLACK) : new CStyleRunData(0,-1,Color.RED);  final ZyLineContent addressLine=new ZyLineContent(module + "::" + address,BOLD_FONT,Lists.newArrayList(styleRun),null);  content.addLineContent(addressLine);}  }
class C{  public LineTagWithSimpleTextDefinition(String title){  setTitles(title);}  }
class C{  public static void create(Context context,int id,CharSequence title,CharSequence content,CharSequence ticker,int smallIcon,int largeIcon,int number,boolean ongoing,boolean autoCancel,int priority,int visibility,PendingIntent pendingIntent){  Notification.Builder builder=new Notification.Builder(context);  if (pendingIntent != null) {    builder.setContentIntent(pendingIntent);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    builder.setVisibility(visibility);  }  builder.setSmallIcon(smallIcon);  builder.setLargeIcon(BitmapFactory.decodeResource(context.getResources(),largeIcon));  builder.setWhen(System.currentTimeMillis());  builder.setAutoCancel(autoCancel);  builder.setContentTitle(title);  builder.setContentText(content);  builder.setTicker(ticker);  builder.setNumber(number);  builder.setDefaults(Notification.DEFAULT_ALL);  builder.setOngoing(ongoing);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {    builder.setPriority(priority);  }  Notification notification=null;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {    notification=builder.build();  } else {    notification=builder.getNotification();  }  notification.flags=Notification.FLAG_SHOW_LIGHTS;  NotificationManager notificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(id,notification);}  }
class C{  public ClassCache(){  super();  initialize();}  }
class C{  public boolean isInRange(double value,double min,double max){  return DOUBLE_VALIDATOR.isInRange(value,min,max);}  }
class C{  public boolean isSetNodeId(){  return EncodingUtils.testBit(__isset_bitfield,__NODEID_ISSET_ID);}  }
class C{  public VNXeCommandJob deleteQuotaDirectory(String quotaId) throws VNXeException {  FileSystemQuotaRequests req=new FileSystemQuotaRequests(_khClient);  return req.deleteFileSystemQuota(quotaId);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4mfPackage.PROJECT_DESCRIPTION___GET_ALL_TESTED_PROJECTS:    return getAllTestedProjects();case N4mfPackage.PROJECT_DESCRIPTION___GET_ALL_INIT_MODULES:  return getAllInitModules();case N4mfPackage.PROJECT_DESCRIPTION___GET_ALL_IMPLEMENTED_PROJECTS:return getAllImplementedProjects();case N4mfPackage.PROJECT_DESCRIPTION___GET_ALL_PROJECT_DEPENDENCIES:return getAllProjectDependencies();case N4mfPackage.PROJECT_DESCRIPTION___GET_ALL_PROVIDED_RUNTIME_LIBRARIES:return getAllProvidedRuntimeLibraries();case N4mfPackage.PROJECT_DESCRIPTION___GET_ALL_REQUIRED_RUNTIME_LIBRARIES:return getAllRequiredRuntimeLibraries();}return super.eInvoke(operationID,arguments);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (dynamic: ");  result.append(dynamic);  result.append(')');  return result.toString();}  }
class C{  public boolean isConst(){  return const_;}  }
class C{  public void removeFunctionListener(FunctionListener l){  if (listeners.contains(l)) {    listeners.remove(l);  }}  }
class C{  public void add(final int x){  int i=d;  while (i-- != 0)   bits.set(hash(x,i));}  }
class C{  public String toString(){  return "N" + (type != 0 ? "t" + type : "") + "@"+ this.location.toString();}  }
class C{  static void createTests(Path dir) throws IOException {  System.out.println("-- Create Tests  --");  Path file=dir.resolve("foo");  createWithPermissions(file,"---------");  createWithPermissions(file,"r--------");  createWithPermissions(file,"-w-------");  createWithPermissions(file,"--x------");  createWithPermissions(file,"rwx------");  createWithPermissions(file,"---r-----");  createWithPermissions(file,"----w----");  createWithPermissions(file,"-----x---");  createWithPermissions(file,"---rwx---");  createWithPermissions(file,"------r--");  createWithPermissions(file,"-------w-");  createWithPermissions(file,"--------x");  createWithPermissions(file,"------rwx");  createWithPermissions(file,"r--r-----");  createWithPermissions(file,"r--r--r--");  createWithPermissions(file,"rw-rw----");  createWithPermissions(file,"rwxrwx---");  createWithPermissions(file,"rw-rw-r--");  createWithPermissions(file,"r-xr-x---");  createWithPermissions(file,"r-xr-xr-x");  createWithPermissions(file,"rwxrwxrwx");  System.out.println("OKAY");}  }
class C{  private void sendAlerts(){  if (m_model.getAlertOverPriority() > 0) {    String sql="SELECT * " + "FROM AD_WF_Activity a " + "WHERE Processed='N' AND WFState='OS'"+ " AND Priority >= ?"+ " AND (DateLastAlert IS NULL";    if (m_model.getRemindDays() > 0)     sql+=" OR (DateLastAlert+" + m_model.getRemindDays() + ") < SysDate";    sql+=") AND EXISTS (SELECT * FROM AD_Workflow wf " + " INNER JOIN AD_WF_Node wfn ON (wf.AD_Workflow_ID=wfn.AD_Workflow_ID) " + "WHERE a.AD_WF_Node_ID=wfn.AD_WF_Node_ID"+ " AND (wf.AD_WorkflowProcessor_ID IS NULL OR wf.AD_WorkflowProcessor_ID=?))";    int count=0;    int countEMails=0;    PreparedStatement pstmt=null;    try {      pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,m_model.getAlertOverPriority());      pstmt.setInt(2,m_model.getAD_WorkflowProcessor_ID());      ResultSet rs=pstmt.executeQuery();      while (rs.next()) {        MWFActivity activity=new MWFActivity(getCtx(),rs,null);        boolean escalate=activity.getDateLastAlert() != null;        countEMails+=sendEmail(activity,"ActivityOverPriority",escalate,true);        activity.setDateLastAlert(new Timestamp(System.currentTimeMillis()));        activity.saveEx();        count++;      }      rs.close();      pstmt.close();    } catch (    SQLException e) {      log.log(Level.SEVERE,"(Priority) - " + sql,e);    } finally {      DB.close(pstmt);    }    m_summary.append("OverPriority #").append(count);    if (countEMails > 0)     m_summary.append(" (").append(countEMails).append(" EMail)");    m_summary.append(" - ");  }  String sql="SELECT * " + "FROM AD_WF_Activity a " + "WHERE Processed='N' AND WFState='OS'"+ " AND EndWaitTime > SysDate"+ " AND (DateLastAlert IS NULL";  if (m_model.getRemindDays() > 0)   sql+=" OR (DateLastAlert+" + m_model.getRemindDays() + ") < SysDate";  sql+=") AND EXISTS (SELECT * FROM AD_Workflow wf " + " INNER JOIN AD_WF_Node wfn ON (wf.AD_Workflow_ID=wfn.AD_Workflow_ID) " + "WHERE a.AD_WF_Node_ID=wfn.AD_WF_Node_ID"+ " AND wfn.Action<>'Z'"+ " AND (wf.AD_WorkflowProcessor_ID IS NULL OR wf.AD_WorkflowProcessor_ID=?))";  PreparedStatement pstmt=null;  int count=0;  int countEMails=0;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_model.getAD_WorkflowProcessor_ID());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      MWFActivity activity=new MWFActivity(getCtx(),rs,null);      boolean escalate=activity.getDateLastAlert() != null;      countEMails+=sendEmail(activity,"ActivityEndWaitTime",escalate,false);      activity.setDateLastAlert(new Timestamp(System.currentTimeMillis()));      activity.saveEx();      count++;    }    rs.close();  } catch (  Exception e) {    log.log(Level.SEVERE,"(EndWaitTime) - " + sql,e);  } finally {    DB.close(pstmt);  }  m_summary.append("EndWaitTime #").append(count);  if (countEMails > 0)   m_summary.append(" (").append(countEMails).append(" EMail)");  m_summary.append(" - ");  if (m_model.getInactivityAlertDays() > 0) {    sql="SELECT * " + "FROM AD_WF_Activity a " + "WHERE Processed='N' AND WFState='OS'"+ " AND (Updated+" + m_model.getInactivityAlertDays() + ") < SysDate"+ " AND (DateLastAlert IS NULL";    if (m_model.getRemindDays() > 0)     sql+=" OR (DateLastAlert+" + m_model.getRemindDays() + ") < SysDate";    sql+=") AND EXISTS (SELECT * FROM AD_Workflow wf " + " INNER JOIN AD_WF_Node wfn ON (wf.AD_Workflow_ID=wfn.AD_Workflow_ID) " + "WHERE a.AD_WF_Node_ID=wfn.AD_WF_Node_ID"+ " AND (wf.AD_WorkflowProcessor_ID IS NULL OR wf.AD_WorkflowProcessor_ID=?))";    count=0;    countEMails=0;    try {      pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,m_model.getAD_WorkflowProcessor_ID());      ResultSet rs=pstmt.executeQuery();      while (rs.next()) {        MWFActivity activity=new MWFActivity(getCtx(),rs,null);        boolean escalate=activity.getDateLastAlert() != null;        countEMails+=sendEmail(activity,"ActivityInactivity",escalate,false);        activity.setDateLastAlert(new Timestamp(System.currentTimeMillis()));        activity.saveEx();        count++;      }      rs.close();      pstmt.close();    } catch (    SQLException e) {      log.log(Level.SEVERE,"(Inactivity): " + sql,e);    } finally {      DB.close(pstmt);    }    m_summary.append("Inactivity #").append(count);    if (countEMails > 0)     m_summary.append(" (").append(countEMails).append(" EMail)");    m_summary.append(" - ");  }}  }
class C{  public void clear(){  mSize=0;}  }
class C{  public static Object invokePropertyMethod(Object parent,String propertyName,String propertyValue) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {  if (parent == null) {    String message=Logging.getMessage("nullValue.nullValue.ParentIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (propertyName == null) {    String message=Logging.getMessage("nullValue.PropertyNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  String methodName="set" + propertyName;  try {    Method method=parent.getClass().getMethod(methodName,new Class[]{String.class});    return method != null ? method.invoke(parent,propertyValue) : null;  } catch (  NoSuchMethodException e) {  }  try {    Double d=WWUtil.makeDouble(propertyValue);    if (d != null) {      Method method=parent.getClass().getMethod(methodName,new Class[]{double.class});      return method != null ? method.invoke(parent,d) : null;    }  } catch (  NoSuchMethodException e) {  }  try {    Integer i=WWUtil.makeInteger(propertyValue);    if (i != null) {      Method method=parent.getClass().getMethod(methodName,new Class[]{int.class});      return method != null ? method.invoke(parent,i) : null;    }  } catch (  NoSuchMethodException e) {  }  try {    Boolean b=WWUtil.convertStringToBoolean(propertyValue);    if (b != null) {      Method method=parent.getClass().getMethod(methodName,new Class[]{boolean.class});      return method != null ? method.invoke(parent,b) : null;    }  } catch (  NoSuchMethodException e) {  }  try {    Long l=WWUtil.makeLong(propertyValue);    if (l != null) {      Method method=parent.getClass().getMethod(methodName,new Class[]{long.class});      return method != null ? method.invoke(parent,l) : null;    }  } catch (  NoSuchMethodException e) {  }  throw new NoSuchMethodException();}  }
class C{  public NetworkCreated createNetwork(CreateNetworkParams params) throws IOException {  byte[] entityBytesArray=toJson(params.getNetwork()).getBytes(StandardCharsets.UTF_8);  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("POST").path(apiVersionPathPrefix + "/networks/create").header("Content-Type",MediaType.APPLICATION_JSON).header("Content-Length",entityBytesArray.length).entity(entityBytesArray)){    final DockerResponse response=connection.request();    if (response.getStatus() / 100 != 2) {      throw getDockerException(response);    }    return parseResponseStreamAndClose(response.getInputStream(),NetworkCreated.class);  } }  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList testList;  Node piNode;  NamedNodeMap attrList;  doc=(Document)load("staff",false);  testList=doc.getChildNodes();  piNode=testList.item(0);  attrList=piNode.getAttributes();  assertNull("nodeProcessingInstructionNodeAttrAssert1",attrList);}  }
class C{  public void testSearch() throws Exception {  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw,true);  doTestSearch(random(),pw,false);  pw.close();  sw.close();  String multiFileOutput=sw.toString();  sw=new StringWriter();  pw=new PrintWriter(sw,true);  doTestSearch(random(),pw,true);  pw.close();  sw.close();  String singleFileOutput=sw.toString();  assertEquals(multiFileOutput,singleFileOutput);}  }
class C{  public DiscoveryInformation associate(List discoveries){  DiscoveryInformation discovered;  Association assoc;  int attemptsLeft=_maxAssocAttempts;  Iterator itr=discoveries.iterator();  while (itr.hasNext() && attemptsLeft > 0) {    discovered=(DiscoveryInformation)itr.next();    attemptsLeft-=associate(discovered,attemptsLeft);    assoc=_associations.load(discovered.getOPEndpoint().toString());    if (assoc != null && !Association.FAILED_ASSOC_HANDLE.equals(assoc.getHandle()))     return discovered;  }  if (discoveries.size() > 0) {    DiscoveryInformation d0=(DiscoveryInformation)discoveries.get(0);    _log.warn("Association failed; using first entry: " + d0.getOPEndpoint());    return d0;  } else {    _log.error("Association attempt, but no discovery endpoints provided.");    return null;  }}  }
class C{  public AbstractSimpleState(S id,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions,Collection<? extends Action<S,E>> stateActions,PseudoState<S,E> pseudoState,Collection<Region<S,E>> regions,StateMachine<S,E> submachine){  super(id,deferred,entryActions,exitActions,stateActions,pseudoState,regions,submachine);  this.ids=new ArrayList<S>();  this.ids.add(id);}  }
class C{  public static Map<URI,List<URI>> groupVolumeURIsByCG(List<Volume> volumes){  Map<URI,List<URI>> cgToVolUris=new HashMap<URI,List<URI>>();  for (  Volume volume : volumes) {    if (volume.isInCG()) {      URI cg=volume.getConsistencyGroup();      if (!cgToVolUris.containsKey(cg)) {        cgToVolUris.put(cg,new ArrayList<URI>());      }      cgToVolUris.get(cg).add(volume.getId());    }  }  return cgToVolUris;}  }
class C{  public static void replaceScheduleModes(TransitSchedule schedule,String mode){  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      transitRoute.setTransportMode(mode);    }  }}  }
class C{  protected void init() throws IOException {  if (appDataIS != null) {    return;  }  initTransportLayer();  appDataIS=new SSLSocketInputStream(this);  appDataOS=new SSLSocketOutputStream(this);}  }
class C{  private boolean groupIsFieldList(FormIndex index){  IFormElement element=mFormEntryController.getModel().getForm().getChild(index);  if (!(element instanceof GroupDef)) {    return false;  }  GroupDef gd=(GroupDef)element;  return (ODKView.FIELD_LIST.equalsIgnoreCase(gd.getAppearanceAttr()));}  }
class C{  private Operation buildHostQuery(final String dataStore,final boolean isImageDatastore){  QueryTask.Query kindClause=new QueryTask.Query().setTermPropertyName(ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(Utils.buildKind(HostService.State.class));  String fieldName=QueryTask.QuerySpecification.buildCollectionItemName(HostService.State.FIELD_NAME_REPORTED_DATASTORES);  if (isImageDatastore) {    fieldName=QueryTask.QuerySpecification.buildCollectionItemName(HostService.State.FIELD_NAME_REPORTED_IMAGE_DATASTORES);  }  QueryTask.Query datastoreClause=new QueryTask.Query().setTermPropertyName(fieldName).setTermMatchValue(dataStore);  QueryTask.Query stateClause=new QueryTask.Query().setTermPropertyName("state").setTermMatchValue(HostState.READY.toString());  QueryTask.QuerySpecification querySpecification=new QueryTask.QuerySpecification();  querySpecification.query.addBooleanClause(kindClause);  querySpecification.query.addBooleanClause(datastoreClause);  querySpecification.query.addBooleanClause(stateClause);  querySpecification.options=EnumSet.of(QueryTask.QuerySpecification.QueryOption.EXPAND_CONTENT);  return getCloudStoreHelper().createBroadcastPost(ServiceUriPaths.CORE_LOCAL_QUERY_TASKS,ServiceUriPaths.DEFAULT_NODE_SELECTOR).setBody(QueryTask.create(querySpecification).setDirect(true));}  }
class C{  private static void statementTiming(){  try {    long startConnection=System.currentTimeMillis();    Connection conn=null;    if (s_cType == C_MULTIPLE)     conn=DriverManager.getConnection(CONNECTION,UID,PWD);    if (s_cType == C_DATASOURCE)     conn=s_ds.getConnection();    long startStatement=System.currentTimeMillis();    Statement stmt=conn.createStatement();    stmt.setFetchSize(s_fetchSize);    long startQuery=System.currentTimeMillis();    ResultSet rs=stmt.executeQuery(STATEMENT);    int i=0;    long startRetrieve=System.currentTimeMillis();    while (rs.next()) {      rs.getString(1);      i++;    }    long endRetrieve=System.currentTimeMillis();    rs.close();    rs=null;    long endQuery=System.currentTimeMillis();    stmt.close();    stmt=null;    long endStatement=System.currentTimeMillis();    conn.close();    conn=null;    long endConnection=System.currentTimeMillis();    System.out.println(C_INFO[s_cType] + "Fetch=" + s_fetchSize+ " \tConn="+ (startStatement - startConnection)+ " \tStmt="+ (startQuery - startStatement)+ " \tQuery="+ (startRetrieve - startQuery)+ " \tRetrieve="+ (endRetrieve - startRetrieve)+ " \tClRs="+ (endQuery - endRetrieve)+ " \tClStmt="+ (endStatement - endQuery)+ " \tClConn="+ (endConnection - endStatement)+ " \t- Total="+ (endConnection - startConnection)+ " \tStmt="+ (endStatement - startStatement)+ " \tQuery="+ (endQuery - startQuery));  } catch (  SQLException e) {    e.printStackTrace();  }}  }
class C{  public static void reverse(short[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  short tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  @PUT @Path("/disablescheduling") @Produces(MediaType.APPLICATION_JSON) @Description("Disables collection and alert evaluation scheduling.") public Response disableScheduling(@Context HttpServletRequest req){  validatePrivilegedUser(req);  managementService.disableScheduling();  return Response.status(Status.OK).build();}  }
class C{  public static CreateWindowClause create(String windowName,View... views){  return new CreateWindowClause(windowName,views);}  }
class C{  public void push(double value) throws IOException {  print("push",new String[]{"double " + value});}  }
class C{  public static int bytesRequiredWhenCopied(Object fromObj,RVMArray type,int numElements){  int size=type.getInstanceSize(numElements);  if (ADDRESS_BASED_HASHING) {    Word hashState=Magic.getWordAtOffset(fromObj,STATUS_OFFSET).and(HASH_STATE_MASK);    if (hashState.NE(HASH_STATE_UNHASHED)) {      size+=HASHCODE_BYTES;    }  }  return Memory.alignUp(size,BYTES_IN_INT);}  }
class C{  protected final void connect() throws IOException {  if (connection != null) {    return;  }  if (routeSelector == null) {    String uriHost=uri.getHost();    if (uriHost == null) {      throw new UnknownHostException(uri.toString());    }    SSLSocketFactory sslSocketFactory=null;    HostnameVerifier hostnameVerifier=null;    if (uri.getScheme().equalsIgnoreCase("https")) {      sslSocketFactory=client.getSslSocketFactory();      hostnameVerifier=client.getHostnameVerifier();    }    Address address=new Address(uriHost,getEffectivePort(uri),sslSocketFactory,hostnameVerifier,client.getAuthenticator(),client.getProxy(),client.getTransports());    routeSelector=new RouteSelector(address,uri,client.getProxySelector(),client.getConnectionPool(),Dns.DEFAULT,client.getRoutesDatabase());  }  connection=routeSelector.next(method);  if (!connection.isConnected()) {    connection.connect(client.getConnectTimeout(),client.getReadTimeout(),getTunnelConfig());    client.getConnectionPool().maybeShare(connection);    client.getRoutesDatabase().connected(connection.getRoute());  } else   if (!connection.isSpdy()) {    connection.updateReadTimeout(client.getReadTimeout());  }  connected(connection);  if (connection.getRoute().getProxy() != client.getProxy()) {    requestHeaders.getHeaders().setRequestLine(getRequestLine());  }}  }
class C{  public SymbolTableEntryInternal steFor_N4Member(){  return getSymbolTableEntryInternal("N4Member",true);}  }
class C{  public static void write(OMPoint point,Link link,LinkProperties props) throws IOException {  props.setProperty(LinkPoint.LPC_POINT_OVAL,point.isOval() ? "true" : "false");switch (point.getRenderType()) {case OMPoint.RENDERTYPE_LATLON:    LinkPoint.write((float)point.getLat(),(float)point.getLon(),point.getRadius(),props,link.dos);  break;case OMPoint.RENDERTYPE_XY:LinkPoint.write(point.getX(),point.getY(),point.getRadius(),props,link.dos);break;case OMPoint.RENDERTYPE_OFFSET:LinkPoint.write((float)point.getLat(),(float)point.getLon(),point.getX(),point.getY(),point.getRadius(),props,link.dos);break;default :Debug.error("LinkPoint.write: point rendertype unknown.");}}  }
class C{  public MapBinaryHeap(Comparator<T> comp){  initialize(comp);}  }
class C{  @Override public void unwindStackFrame(){  ip=Magic.getReturnAddress(fp,RVMThread.getCurrentThread());  fp=Magic.getCallerFramePointer(fp);}  }
class C{  private Collection readCollection0(@Nullable BinaryCollectionFactory factory) throws BinaryObjectException {switch (checkFlag(COL)) {case NORMAL:    return (Collection)BinaryUtils.doReadCollection(in,ctx,ldr,this,true,factory);case HANDLE:{    int handlePos=BinaryUtils.positionForHandle(in) - in.readInt();    Object obj=getHandle(handlePos);    if (obj == null) {      int retPos=in.position();      streamPosition(handlePos);      obj=readCollection0(factory);      streamPosition(retPos);    }    return (Collection)obj;  }default :return null;}}  }
class C{  public static void deleteTypeSubstitution(final Connection connection,final INaviModule module,final TypeSubstitution typeSubstitution) throws CouldntDeleteException {  try {    final PreparedStatement statement=connection.prepareStatement("DELETE FROM " + CTableNames.EXPRESSION_TYPES_TABLE + " WHERE module_id = ? AND address = ? AND \"position\" = ? AND expression_id = ?");    try {      statement.setInt(1,module.getConfiguration().getId());      statement.setLong(2,typeSubstitution.getAddress().toLong());      statement.setInt(3,typeSubstitution.getPosition());      statement.setInt(4,typeSubstitution.getExpressionId());      statement.executeUpdate();    }  finally {      statement.close();    }  } catch (  final SQLException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  public static Options instance(Context context){  Options instance=context.get(optionsKey);  if (instance == null)   instance=new Options(context);  return instance;}  }
class C{  public MP4(File file){  this.file=file;}  }
class C{  @Override public void writeTo(ChannelBuffer data){  data.writeInt(dataType);}  }
class C{  public InputStreamReader(InputStream in,String charsetName) throws UnsupportedEncodingException {  super(in);  if (charsetName == null)   throw new NullPointerException("charsetName");  sd=StreamDecoder.forInputStreamReader(in,this,charsetName);}  }
class C{  public static ActiveMQDestination toAMQAddress(ServerMessage message,ActiveMQDestination actualDestination){  String address=message.getAddress().toString();  String strippedAddress=address.replace(JMS_QUEUE_ADDRESS_PREFIX,"").replace(JMS_TEMP_QUEUE_ADDRESS_PREFIX,"").replace(JMS_TOPIC_ADDRESS_PREFIX,"").replace(JMS_TEMP_TOPIC_ADDRESS_PREFIX,"");  if (actualDestination.isQueue()) {    return new ActiveMQQueue(strippedAddress);  } else {    return new ActiveMQTopic(strippedAddress);  }}  }
class C{  public void clearStack(){  top=0;}  }
class C{  public static double stDev(final List<Double> list){  return Math.sqrt(variance(list));}  }
class C{  public void startDownload(int token) throws IOException {  Log.d("--------","task state");  Task task=tasksDataSource.getTaskInfo(token);  Log.d("--------","task state 1");  Thread asyncStartDownload=new AsyncStartDownload(tasksDataSource,chunksDataSource,moderator,downloadManagerListener,task);  Log.d("--------","define async download");  asyncStartDownload.start();  Log.d("--------","define async download started");}  }
class C{  private static PendingInstallShortcutInfo convertToLauncherActivityIfPossible(PendingInstallShortcutInfo original){  if (original.isLauncherActivity()) {    return original;  }  if (!Utilities.isLauncherAppTarget(original.launchIntent) || !original.user.equals(UserHandleCompat.myUserHandle())) {    return original;  }  PackageManager pm=original.mContext.getPackageManager();  ResolveInfo info=pm.resolveActivity(original.launchIntent,0);  if (info == null) {    return original;  }  LauncherActivityInfoCompat launcherInfo=LauncherActivityInfoCompat.fromResolveInfo(info,original.mContext);  return new PendingInstallShortcutInfo(launcherInfo,original.mContext);}  }
class C{  protected MultipleCategorySeries buildMultipleCategoryDataset(String title,List<String[]> titles,List<double[]> values){  MultipleCategorySeries series=new MultipleCategorySeries(title);  int k=0;  for (  double[] value : values) {    series.add(2007 + k + "",titles.get(k),value);    k++;  }  return series;}  }
class C{  public void signalStop(){  shouldStop=true;}  }
class C{  private Integer zGetWeekNumberForASevenDayRange(LocalDate firstDateInRange,WeekFields weekFieldRules,boolean requireUnanimousWeekNumber){  ArrayList<Integer> weekNumbersList=new ArrayList<Integer>();  for (int daysIntoTheFuture=0; daysIntoTheFuture <= 6; ++daysIntoTheFuture) {    LocalDate currentDateInRange;    try {      currentDateInRange=firstDateInRange.plusDays(daysIntoTheFuture);      int currentWeekNumber=currentDateInRange.get(weekFieldRules.weekOfWeekBasedYear());      weekNumbersList.add(currentWeekNumber);    } catch (    Exception ex) {      return 1;    }  }  boolean isUnanimous=(InternalUtilities.areObjectsEqual(weekNumbersList.get(0),weekNumbersList.get(6)));  if (isUnanimous) {    return weekNumbersList.get(0);  }  if (requireUnanimousWeekNumber) {    return null;  }  int mostCommonWeekNumber=InternalUtilities.getMostCommonElementInList(weekNumbersList);  return mostCommonWeekNumber;}  }
class C{  @Override public void receive(float inphase,float quadrature){  mAssembler.receive(inphase,quadrature);}  }
class C{  public int add(int amount){  int original=amount();  setAmount(original + amount);  return amount() - original;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case TRIGGER_ID:    return isSetTriggerId();case TRIGGER_NAME:  return isSetTriggerName();case CREATE_TIME:return isSetCreateTime();case OPERATOR_ID:return isSetOperatorId();case TRIGGER_TYPE:return isSetTriggerType();case CRON_EXPRESSION:return isSetCronExpression();default :;}throw new IllegalStateException();}  }
class C{  private void validateConnection() throws IOException {  ensureOpen();  if (mPrivateInput == null) {    startProcessing();  }}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  public org.apache.nutch.storage.ParseStatus.Builder clearArgs(){  args=null;  fieldSetFlags()[2]=false;  return this;}  }
class C{  public <T>T read(T value,File source) throws Exception {  return read(value,source,true);}  }
class C{  public void syncWith(PresentationModel sourcePresentationModel){  for (  A targetAttribute : attributes) {    Attribute sourceAttribute=sourcePresentationModel.getAt(targetAttribute.getPropertyName(),targetAttribute.getTag());    if (sourceAttribute != null)     targetAttribute.syncWith(sourceAttribute);  }}  }
class C{  public void testEmbeddedStringParsing() throws Exception {  String testStrings[]={"INSERT INTO foo VALUES(1) /* _binary'\0' */","INSERT INTO `foo_binary'f'` VALUES(1)","INSERT INTO foo VALUES('_latin1\"f\"')","INSERT INTO foo VALUES('\\'_latin1\"\0\"')","INSERT INTO foo VALUES(\"\\\"_binary'\0'\")"};  MySQLStatementTranslator translator=new MySQLStatementTranslator("UTF-8");  for (  String testString : testStrings) {    byte[] testBytes=testString.getBytes("UTF-8");    String testString2=translator.toJavaString(testBytes,0,testBytes.length);    System.out.println("Output: " + testString2);    assertEquals("Embedded string introducer is ignored",testString,testString2);  }}  }
class C{  public static void main(String[] args) throws IOException {  IoAcceptor acceptor=new NioSocketAcceptor();  acceptor.getFilterChain().addLast("logger",new LoggingFilter());  acceptor.getFilterChain().addLast("codec",new ProtocolCodecFilter(new TextLineCodecFactory(Charset.forName("UTF-8"))));  acceptor.setHandler(new TimeServerHandler());  acceptor.getSessionConfig().setReadBufferSize(2048);  acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE,10);  acceptor.bind(new InetSocketAddress(PORT));}  }
class C{  public static void v(String tag,String s,Throwable e){  if (LOG.VERBOSE >= LOGLEVEL)   Log.v(tag,s,e);}  }
class C{  public void recordEnd(long metric,boolean success){  final String msg="Usage end module=" + mModuleName + " runId="+ mRunId+ " metric="+ metric+ " success="+ success;  mUsageMessages.add(msg);  Diagnostic.developerLog(msg);  mClient.recordEnd(metric,mModuleName,mRunId,success);}  }
class C{  protected void testLeaderInitiatedRecoveryCRUD() throws Exception {  String testCollectionName="c8n_crud_1x2";  String shardId="shard1";  createCollection(testCollectionName,1,2,1);  cloudClient.setDefaultCollection(testCollectionName);  Replica leader=cloudClient.getZkStateReader().getLeaderRetry(testCollectionName,shardId);  JettySolrRunner leaderJetty=getJettyOnPort(getReplicaPort(leader));  CoreContainer cores=((SolrDispatchFilter)leaderJetty.getDispatchFilter().getFilter()).getCores();  ZkController zkController=cores.getZkController();  assertNotNull("ZkController is null",zkController);  Replica notLeader=ensureAllReplicasAreActive(testCollectionName,shardId,1,2,maxWaitSecsToSeeAllActive).get(0);  ZkCoreNodeProps replicaCoreNodeProps=new ZkCoreNodeProps(notLeader);  String replicaUrl=replicaCoreNodeProps.getCoreUrl();  assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));  assertTrue(zkController.ensureReplicaInLeaderInitiatedRecovery(testCollectionName,shardId,replicaUrl,replicaCoreNodeProps,false));  assertTrue(zkController.isReplicaInRecoveryHandling(replicaUrl));  Map<String,Object> lirStateMap=zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName,shardId,notLeader.getName());  assertNotNull(lirStateMap);  assertEquals(ZkStateReader.DOWN,lirStateMap.get("state"));  zkController.removeReplicaFromLeaderInitiatedRecoveryHandling(replicaUrl);  assertTrue(!zkController.isReplicaInRecoveryHandling(replicaUrl));  SolrZkClient zkClient=zkController.getZkClient();  String znodePath=zkController.getLeaderInitiatedRecoveryZnodePath(testCollectionName,shardId,notLeader.getName());  zkClient.setData(znodePath,"down".getBytes(StandardCharsets.UTF_8),true);  lirStateMap=zkController.getLeaderInitiatedRecoveryStateObject(testCollectionName,shardId,notLeader.getName());  assertNotNull(lirStateMap);  assertEquals(ZkStateReader.DOWN,lirStateMap.get("state"));  zkClient.delete(znodePath,-1,false);  try {    CollectionAdminRequest req=new CollectionAdminRequest.Delete();    req.setCollectionName(testCollectionName);    req.process(cloudClient);  } catch (  Exception e) {    log.warn("Could not delete collection {} after test completed",testCollectionName);  }}  }
class C{  private final void drawSprite(Graphics g,Sprite sprite){  Rectangle view=g.getClipBounds();  Rectangle spriteBounds=sprite.getBounds();  if (view.intersects(spriteBounds) && !sprite.isHidden()) {    if (!sprite.isReady()) {      sprite.prepare();    }    sprite.drawOnto(g,spriteBounds.x,spriteBounds.y,this);  }}  }
class C{  protected void addCheckPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_CheckRef_check_feature"),getString("_UI_PropertyDescriptor_description","_UI_CheckRef_check_feature","_UI_CheckRef_type"),SexecPackage.Literals.CHECK_REF__CHECK,true,false,true,null,null,null));}  }
class C{  public void test_reopenReset() throws IOException {  final Properties properties=new Properties(getProperties());  final File tmpfile=File.createTempFile("TestRW",".rw");  properties.setProperty(Options.FILE,tmpfile.getAbsolutePath());  properties.setProperty(Options.CREATE_TEMP_FILE,"false");  Journal store=getStore(properties);  try {    RWStrategy bs=(RWStrategy)store.getBufferStrategy();    final long addr=bs.write(randomData(78));    assertTrue(bs.inWriteCache(addr));    store.commit();    bs.delete(addr);    final long addr2=bs.write(randomData(78));    assertTrue(bs.inWriteCache(addr2));    bs.abort();    assertTrue(bs.inWriteCache(addr));    assertFalse(bs.inWriteCache(addr2));    try {      bs.read(addr2);      fail("Exception expected");    } catch (    IllegalArgumentException e) {    }    store.commit();    assertTrue(bs.isCommitted(addr));    store.close();    store=new Journal(properties);    bs=(RWStrategy)store.getBufferStrategy();    final long addr3=bs.write(randomData(78));    assertTrue(bs.inWriteCache(addr3));    bs.abort();    assertFalse(bs.inWriteCache(addr3));  }  finally {    store.destroy();  }}  }
class C{  private long overflowFree(long delay){  Delayed head=(Delayed)super.getQueue().peek();  if (head != null) {    long headDelay=head.getDelay(NANOSECONDS);    if (headDelay < 0 && (delay - headDelay < 0))     delay=Long.MAX_VALUE + headDelay;  }  return delay;}  }
class C{  public static int dpToPx(@NonNull Resources res,int dp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,res.getDisplayMetrics());}  }
class C{  public void displayNextRow(){  Log.e(this.getClass().getSimpleName(),"last row is visible on screen, load next rows");  view.addRow();}  }
class C{  public void alert(org.apache.geode.internal.admin.Alert alert){  if (AlertLevel.forSeverity(alert.getLevel()).ordinal < alertLevel.ordinal) {    return;  }  Alert alert2=new AlertImpl(alert);  this.latestAlert=alert2;  for (Iterator<AlertListener> iter=this.alertListeners.iterator(); iter.hasNext(); ) {    AlertListener listener=iter.next();    listener.alert(alert2);  }}  }
class C{  public void writeExif(InputStream jpegStream,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpegStream == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    doExifStreamIO(jpegStream,s);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public Hobby(String hobby){  super(hobby);}  }
class C{  static void checkOpcode(final int opcode,final int type){  if (opcode < 0 || opcode > 199 || TYPE[opcode] != type) {    throw new IllegalArgumentException("Invalid opcode: " + opcode);  }}  }
class C{  protected static String urlDecode(String str) throws UnsupportedEncodingException {  return URLDecoder.decode(str.replace("+","%2B"),"UTF-8");}  }
class C{  public void inject(IgniteSpi spi) throws IgniteCheckedException {  injectGeneric(spi);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public static void load(final AbstractSQLProvider provider,final INaviView view,final List<INaviViewNode> nodes) throws SQLException, CouldntLoadDataException {  Preconditions.checkNotNull(provider,"IE02513: provider argument can not be null");  Preconditions.checkNotNull(view,"IE02514: view argument can not be null");  Preconditions.checkNotNull(nodes,"IE02515: nodes argument can not be null");  final Map<Integer,INaviGroupNode> commentIdToGroupNode=new HashMap<Integer,INaviGroupNode>();  final String query="SELECT id, comment_id , collapsed, x, y, width, height, color, selected, visible " + " FROM " + CTableNames.NODES_TABLE + " JOIN "+ CTableNames.GROUP_NODES_TABLE+ " ON id = node_id WHERE view_id = "+ view.getConfiguration().getId();  try (ResultSet resultSet=provider.getConnection().executeQuery(query,true)){    while (resultSet.next()) {      final int nodeId=resultSet.getInt("id");      Integer commentId=resultSet.getInt("comment_id");      if (resultSet.wasNull()) {        commentId=null;      }      final boolean collapsed=resultSet.getBoolean("collapsed");      final double posX=resultSet.getDouble("x");      final double posY=resultSet.getDouble("y");      final double width=resultSet.getDouble("width");      final double height=resultSet.getDouble("height");      final Color color=new Color(resultSet.getInt("color"));      final boolean selected=resultSet.getBoolean("selected");      final boolean visible=resultSet.getBoolean("visible");      final INaviGroupNode groupNode=new CGroupNode(nodeId,posX,posY,width,height,color,selected,visible,new HashSet<CTag>(),null,collapsed,provider);      if (commentId != null) {        commentIdToGroupNode.put(commentId,groupNode);      }      nodes.add(groupNode);    }    if (!commentIdToGroupNode.isEmpty()) {      final HashMap<Integer,ArrayList<IComment>> commentIdsToComments=PostgreSQLCommentFunctions.loadMultipleCommentsById(provider,commentIdToGroupNode.keySet());      for (      final Entry<Integer,ArrayList<IComment>> commentIdToComment : commentIdsToComments.entrySet()) {        commentIdToGroupNode.get(commentIdToComment.getKey()).initializeComment(commentIdToComment.getValue());      }    }  } }  }
class C{  public static boolean isTimezoneInvalid(Throwable e){  if (throwableContainsMessage(e,"ORA-01882")) {    return true;  }  return false;}  }
class C{  public static float toPixelFromDIP(float value){  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,value,DisplayMetricsHolder.getDisplayMetrics());}  }
class C{  protected void updateMenu(){  boolean present;  boolean initializing;  boolean running;  boolean stopping;  boolean active;  if (m_MenuBar == null)   return;  present=(m_Experiment != null);  initializing=present && m_Experiment.isInitializing();  running=present && m_Experiment.isRunning();  stopping=present && m_Experiment.isStopping();  active=initializing || running || stopping;  m_MenuItemFileNew.setEnabled(!active);  m_MenuItemFileOpen.setEnabled(!active);  m_MenuItemFileSave.setEnabled(present && (getCurrentFile() != null));  m_MenuItemFileSaveAs.setEnabled(present);  m_MenuItemFileClose.setEnabled(!active);  m_MenuItemExecutionStart.setEnabled(present && !active);  m_MenuItemExecutionStop.setEnabled(present && running);  for (  AbstractExperimenterMenuItem item : m_AdditionalMenuItems.keySet())   item.update(this,m_AdditionalMenuItems.get(item));}  }
class C{  public static Transport bindAwait(boolean useNetworkEmulator){  return bindAwait(TransportConfig.builder().useNetworkEmulator(useNetworkEmulator).build());}  }
class C{  public boolean requestExtensionUpdate(List<ComponentName> extensions){  try {    if (mService != null) {      mService.requestExtensionUpdate(extensions,mCallback);    }    return true;  } catch (  RemoteException ex) {  }  return false;}  }
class C{  private boolean removeExpiredAttachmentPoints(List<AttachmentPoint> apList){  List<AttachmentPoint> expiredAPs=new ArrayList<AttachmentPoint>();  if (apList == null)   return false;  for (  AttachmentPoint ap : apList) {    if (ap.getLastSeen().getTime() + AttachmentPoint.INACTIVITY_INTERVAL < System.currentTimeMillis()) {      expiredAPs.add(ap);    }  }  if (expiredAPs.size() > 0) {    apList.removeAll(expiredAPs);    return true;  } else   return false;}  }
class C{  private static CalendarEntry updateCalendar(CalendarEntry calendar) throws IOException, ServiceException {  System.out.println("Updating the secondary calendar");  calendar.setTitle(new PlainTextConstruct("New title"));  calendar.setColor(new ColorProperty(GREEN));  calendar.setSelected(SelectedProperty.TRUE);  return calendar.update();}  }
class C{  public XYSeries(String title,int scaleNumber){  mTitle=title;  mScaleNumber=scaleNumber;  initRange();}  }
class C{  private void gatherImmortal(int event){  if (DEBUG) {    Log.write("SSGCspyMutator.gcspyGatherData: gather data for immortal space ");    Log.write(SSGCspy.immortalSpace.getStart());    Log.writeln("-",immortal.getCursor());  }  SSGCspy.immortalDriver.resetData();  immortal.gcspyGatherData(SSGCspy.immortalDriver);  if (DEBUG)   Log.writeln("Finished immortal space.");}  }
class C{  public void onBecomingCoordinator(){  crdSinceTs.compareAndSet(0,U.currentTimeMillis());}  }
class C{  public static synchronized void prepareTrackersAndFbLogger(Shop shop,Context context){  GoogleAnalytics analytics=GoogleAnalytics.getInstance(context);  if (shop == null) {    deleteAppTrackers();  } else {    if (!mTrackers.containsKey(TRACKER_APP) && analytics != null) {      if (shop.getGoogleUa() != null && !shop.getGoogleUa().isEmpty()) {        Timber.d("Set new app tracker with id: %s",shop.getGoogleUa());        Tracker appTracker=analytics.newTracker(shop.getGoogleUa());        appTracker.enableAutoActivityTracking(true);        appTracker.enableExceptionReporting(false);        appTracker.enableAdvertisingIdCollection(true);        mTrackers.put(TRACKER_APP,appTracker);      } else {        Timber.e(new RuntimeException(),"Creating GA app tracker with empty Google UA");      }    } else {      Timber.e("Trackers for this app already exist.");    }  }  if (!mTrackers.containsKey(TRACKER_GLOBAL) && analytics != null) {    Timber.d("Set new global tracker.");    Tracker appTrackerGlobal=analytics.newTracker(R.xml.global_tracker);    appTrackerGlobal.enableAutoActivityTracking(true);    appTrackerGlobal.enableExceptionReporting(true);    appTrackerGlobal.enableAdvertisingIdCollection(true);    mTrackers.put(TRACKER_GLOBAL,appTrackerGlobal);    sendCampaignInfo();  }  facebookLogger=AppEventsLogger.newLogger(MyApplication.getInstance());}  }
class C{  public boolean isPreventLooping(){  return preventLooping;}  }
class C{  public static String fetchClusterName(String clusterCgName){  String clusterName=null;  if (clusterCgName != null && !clusterCgName.isEmpty()) {    String[] tmp=clusterCgName.split(SPLITTER);    clusterName=tmp[0];  }  return clusterName;}  }
class C{  public static boolean matchesNode(String nodeName){  return nodeName.equals(METHOD_NODE);}  }
class C{  public void classLoaderInit(DynamicClassLoader loader){  EnvLoaderListener listener=_listenerRef.get();  if (listener != null)   listener.classLoaderInit(loader);}  }
class C{  protected void createFrameBuffer(GL11ExtensionPack gl11ep){  if (mContextSupportsFrameBufferObject) {    gl11ep.glGenFramebuffersOES(1,mDefaultFramebuffer,0);    if (mDefaultFramebuffer[0] <= 0)     PLLog.error("PLRenderer::createFrameBuffer","Invalid framebuffer id returned!");    gl11ep.glGenRenderbuffersOES(1,mColorRenderbuffer,0);    if (mColorRenderbuffer[0] <= 0)     PLLog.error("PLRenderer::createFrameBuffer","Invalid renderbuffer id returned!");    gl11ep.glBindFramebufferOES(GL11ExtensionPack.GL_FRAMEBUFFER_OES,mDefaultFramebuffer[0]);    gl11ep.glBindRenderbufferOES(GL11ExtensionPack.GL_RENDERBUFFER_OES,mColorRenderbuffer[0]);  }}  }
class C{  private void expect(Token token) throws ParseException {  if (token != this.token) {    throw new ParseException("Unexpected token: " + getTokenString(),this.lexer.getCurrentOffset());  }  nextToken();}  }
class C{  public static boolean isMovableImmediate(long imm){  return NumUtil.isInt(Math.abs(imm)) && NumUtil.isUnsignedNbit(16,(int)Math.abs(imm));}  }
class C{  private final int filterStatusBytes(byte[] src,byte[] dest,int totalBytesRead,int maxPacketSize){  final int packetsCount=totalBytesRead / maxPacketSize + (totalBytesRead % maxPacketSize == 0 ? 0 : 1);  for (int packetIdx=0; packetIdx < packetsCount; ++packetIdx) {    final int count=(packetIdx == (packetsCount - 1)) ? (totalBytesRead % maxPacketSize) - MODEM_STATUS_HEADER_LENGTH : maxPacketSize - MODEM_STATUS_HEADER_LENGTH;    if (count > 0) {      System.arraycopy(src,packetIdx * maxPacketSize + MODEM_STATUS_HEADER_LENGTH,dest,packetIdx * (maxPacketSize - MODEM_STATUS_HEADER_LENGTH),count);    }  }  return totalBytesRead - (packetsCount * 2);}  }
class C{  public void countUp(){  sync.releaseShared(-1);}  }
class C{  public static TimeRangeBound exclusive(Instant instant){  return new TimeRangeBound(instant,false);}  }
class C{  int breakWord(String word,FontMetrics fm){  int width;  int currentPos;  int endPos;  width=0;  currentPos=0;  endPos=word.length() - 1;  if (endPos <= 0) {    return (currentPos);  }  while ((width < maxAllowed) && (currentPos < endPos)) {    currentPos++;    width=fm.stringWidth(labelText.substring(0,currentPos));  }  if (currentPos != endPos) {    currentPos--;  }  return (currentPos);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double numDownslopeNeighbours;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  String pntrType=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  pntrType=args[2].toLowerCase();  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,noData);    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setPreferredPalette("spectrum_black_background.pal");    if ((pntrType.equals("d8") || (pntrType.equals("rho8")))) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (pntr.getValue(row,col) != noData) {            z=0;            for (i=0; i < 8; i++) {              if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {                z++;              }            }            output.setValue(row,col,z);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else     if (pntrType.equals("dinf")) {      double flowDir;      double[] startFD=new double[]{180,225,270,315,0,45,90,135};      double[] endFD=new double[]{270,315,360,45,90,135,180,225};      int c;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          if (flowDir != noData) {            c=0;            for (i=0; i < 8; i++) {              flowDir=pntr.getValue(row + dY[i],col + dX[i]);              if (flowDir != noData) {                if (i != 3) {                  if (flowDir > startFD[i] && flowDir < endFD[i]) {                    c++;                  }                } else {                  if (flowDir > startFD[i] || flowDir < endFD[i]) {                    c++;                  }                }              }            }            output.setValue(row,col,c);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SQLOutputImpl(Vector<?> attributes,Map<String,?> map) throws SQLException {  if ((attributes == null) || (map == null)) {    throw new SQLException("Cannot instantiate a SQLOutputImpl " + "instance with null parameters");  }  this.attribs=attributes;  this.map=map;}  }
class C{  public static void process(ASTQueryContainer qc) throws MalformedQueryException {  NullVisitor visitor=new NullVisitor();  try {    qc.jjtAccept(visitor,null);  } catch (  VisitorException e) {    throw new MalformedQueryException(e.getMessage(),e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.957 -0400",hash_original_method="271A2DD2196E2818F8A34D7CEDB3A1A7",hash_generated_method="1AEBBEF9238E835B53A42A5BB484E020") protected DirectoryFileFilter(){}  }
class C{  protected String doIt() throws Exception {  String sql="SELECT cl.C_CashLine_ID, c.Name FROM C_CashLine cl INNER JOIN C_Cash c ON (c.C_Cash_ID=cl.C_Cash_ID) WHERE cl.CashType='T'";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      Trx trx=Trx.get(Trx.createTrxName(),true);      MCashLine cashline=new MCashLine(Env.getCtx(),rs.getInt(1),trx.getTrxName());      Integer c_cashline_id=cashline.getC_CashLine_ID();      MPayment[] payments=getOfCash(Env.getCtx(),rs.getString(2),cashline.getAmount(),cashline.getC_BankAccount_ID(),cashline.getAD_Client_ID(),trx.getTrxName());      for (      MPayment payment : payments) {        cashline.setC_Payment_ID(payment.getC_Payment_ID());        if (!cashline.save())         throw new IllegalStateException("Cannot assign payment to Cash Line");        break;      }      trx.commit();    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    s_log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  return "@ProcessOK@";}  }
class C{  public static void addAditionalReservedFields(ArchiveFlds fields) throws ISicresAdminEstructuraException {  fields.add(ADDITIONAL_RESERVED_FIELDS_LOWER_LIMIT_FIELD_ID,"LimiteInferiorReserva",2,65535,true,false,false,"");  fields.add(ADDITIONAL_RESERVED_FIELDS_UPPER_LIMIT_FIELD_ID,"LimiteSuperiorReserva",2,65535,true,false,false,"");}  }
class C{  public static String f_(final String name){  return "icon/fugue/" + name + ".png";}  }
class C{  protected LayoutManager createLayoutManager(){  return getHandler();}  }
class C{  private void analyseDatasets(){  for (  DataSet dataset : datasetList) {    dataset.analyseMatrix();  }}  }
class C{  public GoogleHomePage clickSubmitButton() throws Exception {  submitButton.click();  return new GoogleHomePage();}  }
class C{  public synchronized void removeCenterListener(CenterListener listener){  centerDelegate.remove(listener);}  }
class C{  public void reset(){  for (  AsyncTask task : mTasks) {    task.cancel(true);  }  mTasks.clear();}  }
class C{  public void removeClient(ConnectorHandler client){  deadClients.offer(client);}  }
class C{  public void swap(int i,int j){  int pos_i=lookup(i);  int pos_j=lookup(j);  if ((index[pos_i] == i) && (index[pos_j] == j)) {    Object dummy=elements[pos_i];    elements[pos_i]=elements[pos_j];    elements[pos_j]=dummy;    last_used[pos_i]=last_used[pos_j];    last_used[pos_j]=0;  } else {    if (index[pos_i] == i) {      last_used[pos_i]=0;    } else     if (index[pos_j] == j) {      last_used[pos_j]=0;    }    ;  }  ;  double[] my_row;  double dummy_d;  for (pos_i=0; pos_i < cache_size; pos_i++) {    my_row=(double[])(elements[pos_i]);    if (my_row != null) {      dummy_d=my_row[i];      my_row[i]=my_row[j];      my_row[j]=dummy_d;    }    ;  }  ;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS_RANGE__LEFT:    return getLeft();case RegularExpressionPackage.CHARACTER_CLASS_RANGE__RIGHT:  return getRight();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  out.writeInt(id);}  }
class C{  public static <L extends Lock>boolean tryLockAll(L... locks){  Deque<L> stack=new LinkedList<>();  boolean success=false;  try {    for (    L lock : locks) {      success=lock.tryLock();      if (success) {        stack.push(lock);      } else {        break;      }    }  } catch (  RuntimeException e) {    unlockAll(stack);    throw e;  }  if (!success) {    unlockAll(stack);  }  return success;}  }
class C{  void internalError() throws Error {  throw new Error("Internal error!");}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    if (!isClosed()) {      in.close();      buf=null;    }  }}  }
class C{  public String uploadCloudFile(String mimeType,String filename,InputStream data,int dataSize) throws CloudException, IOException {  return uploadCloudFileImpl(mimeType,filename,data,dataSize);}  }
class C{  public Matrix4x3f m22(float m22){  this.m22=m22;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  public mat4 copyInverted(mat4 matA){  this.copy(matA);  mat4_util_inplace_invert(this.m);  return this;}  }
class C{  public GPUImageRGBDilationFilter(int radius){  this(getVertexShader(radius),getFragmentShader(radius));}  }
class C{  private void append(E e){  if (head == null) {    head=last=new DoubleNode<E>(e);  } else {    DoubleNode<E> newNode=new DoubleNode<E>(e);    last.next=newNode;    newNode.prev=last;    last=newNode;  }  size++;}  }
class C{  @After public void tearDown(){  manager.forgetAllPeers();}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public void start(@NonNull Context context,@NonNull Fragment fragment,int requestCode){  fragment.startActivityForResult(getIntent(context),requestCode);}  }
class C{  public static Map<String,String[]> asMultiMap(SolrParams params){  return asMultiMap(params,false);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ARRAY_PADDING;}  }
class C{  private void utf8(){  int charsLength=stringValue.length();  charsOffset=0;  position=0;  escapedArray=new byte[(charsLength * 3)];  while (charsOffset < charsLength) {    char currChar=stringValue.charAt(charsOffset++);    if (currChar < 0x80) {      escapedArray[position++]=(byte)currChar;    } else     getNonAsciiByte(currChar,stringValue,charsLength);  }  binary=true;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getGreaterOp_();}  }
class C{  public CanReply decodeFromHardware(AbstractMRReply m){  log.debug("Decoding from hardware");  MergReply gc=(MergReply)m;  CanReply ret=gc.createReply();  return ret;}  }
class C{  public static byte[] select(String appId,String suffix){  String cardletAid=FIDESMO_AID_PREFIX + appId + suffix;  return select(cardletAid);}  }
class C{  private static Map<String,Set<String>> groupInitiatorsByHost(Set<String> iniStrList,DbClient dbClient){  Map<String,Set<String>> iniByHost=new HashMap<String,Set<String>>();  List<URI> iniList=new ArrayList<URI>(Collections2.transform(iniStrList,CommonTransformerFunctions.FCTN_STRING_TO_URI));  List<Initiator> initiators=dbClient.queryObject(Initiator.class,iniList);  for (  Initiator ini : initiators) {    if (null == ini.getHost()) {      _logger.warn("Initiator {} with Host set to Null",ini.getId());      continue;    }    if (!iniByHost.containsKey(ini.getHost())) {      iniByHost.put(ini.getHost().toString(),new HashSet<String>());    }    iniByHost.get(ini.getHost().toString()).add(ini.getId().toString());  }  return iniByHost;}  }
class C{  ComputingConcurrentHashMap(MapMaker builder,Function<? super K,? extends V> computingFunction){  super(builder);  this.computingFunction=checkNotNull(computingFunction);}  }
class C{  public boolean isAbstract(){  return !containsConcrete();}  }
class C{  public void add(HistoryReference href){synchronized (hrefList) {    hrefList.add(href);    fireTableRowsInserted(hrefList.size() - 1,hrefList.size() - 1);  }}  }
class C{  public Dns dns(){  return dns;}  }
class C{  public void clear(){  cache.clear();}  }
class C{  static boolean startsWithAOneBit(byte[] bytes){  if (bytes == null || bytes.length == 0) {    return false;  }  return (bytes[0] & 0x01) == 0x01;}  }
class C{  public void animateToFullSize(int resId){  if (mDrawCircle && mAnimatedCircleDrawable != null) {    mAnimatedCircleDrawable.animateToFullSize();    mDrawCircle=false;  }  TransitionDrawable transitionDrawable=crossfadeDrawable(mShutterButton.getDrawable(),getResources().getDrawable(resId));  mShutterButton.setImageDrawable(transitionDrawable);  transitionDrawable.startTransition(CIRCLE_ANIM_DURATION_MS);}  }
class C{  private CTracking(){}  }
class C{  public static JSONValue parse(Reader reader) throws IOException {  if (reader == null) {    throw new NullPointerException("reader is null");  }  DefaultHandler handler=new DefaultHandler();  new JSONParser(handler).parse(reader);  return handler.getValue();}  }
class C{  public InsertBreakAction(){  super(insertBreakAction);}  }
class C{  private void trimToSize(int maxSize){  while (true) {    if (memorySize <= maxSize || map.isEmpty()) {      break;    }    if (memorySize < 0 || (map.isEmpty() && memorySize != 0)) {      throw new IllegalStateException(getClassName() + ".getValueSize() is reporting inconsistent results");    }    Map.Entry<K,V> toRemove=map.entrySet().iterator().next();    map.remove(toRemove.getKey());    memorySize-=getValueSize(toRemove.getValue());  }}  }
class C{  @Override public boolean addAll(final Collection<? extends E> values){  return super.addAll(values);}  }
class C{  public RecyclingBitmapDrawable put(final Resources res,final String key,final Bitmap bmp){  RecyclingBitmapDrawable rcb=new RecyclingBitmapDrawable(res,bmp);  put(res,key,rcb,false);  return rcb;}  }
class C{  public static LTPercentage ltPercentage(final float percentage){  return new LTPercentage(percentage);}  }
class C{  private Injector primaryInjector(){  return shells.get(0).getInjector();}  }
class C{  public FlagIconImageFactory(){}  }
class C{  @SuppressWarnings("deprecation") public static String encodeUrl(Bundle parameters){  if (parameters == null) {    return "";  }  StringBuilder sb=new StringBuilder();  boolean first=true;  for (  String key : parameters.keySet()) {    if (first)     first=false; else     sb.append("&");    sb.append(URLEncoder.encode(key)).append("=").append(URLEncoder.encode(parameters.getString(key)));  }  return sb.toString();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    float slope;    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    double Zx, Zy, Zxx, Zyy, Zxy, Zx2, Zy2, p, q;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double gridResTimes2=gridRes * 2;    double eightGridRes=8 * gridRes;    double gridResSquared=gridRes * gridRes;    double fourTimesGridResSquared=gridResSquared * 4;    double curv;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          Zx=(N[1] - N[5]) / gridResTimes2;          Zy=(N[7] - N[3]) / gridResTimes2;          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          Zx2=Zx * Zx;          Zy2=Zy * Zy;          p=Zx2 + Zy2;          q=p + 1;          if (p > 0) {            curv=(Zxx * Zy2 - 2 * Zxy * Zx* Zy + Zyy * Zx2) / (p * Math.pow(q,1.5));            outputFile.setValue(row,col,curv * radToDeg * 100);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void attrModified(Attr node,String oldv,String newv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public boolean isEventStream(){  boolean isEventStream=false;  if (!getResponseHeader().isEmpty()) {    String contentTypeHeader=getResponseHeader().getHeader("content-type");    if (contentTypeHeader != null && contentTypeHeader.equals("text/event-stream")) {      isEventStream=true;    }  } else {    String acceptHeader=getRequestHeader().getHeader("Accept");    if (acceptHeader != null && acceptHeader.equals("text/event-stream")) {      isEventStream=true;    }  }  return isEventStream;}  }
class C{  public void await(){  if (earlier.isCompleted) {    currentThread=Thread.currentThread();    return;  }  if (earlier.getCurrentThread() == Thread.currentThread()) {    currentThread=Thread.currentThread();    return;  }synchronized (this) {    if (!earlier.isCompleted) {      try {        this.wait(factory.getMsecWait());      } catch (      InterruptedException e) {        log.error("Interrupted: " + e.getMessage(),e);      }    }  }  if (!earlier.isCompleted) {    log.info("Wait timeout exceeded for named window '" + "' consumer dispatch with notify");  }}  }
class C{  public static void swapCol(Matrix A,int j,int k,int start,int to){  double t;  for (int i=start; i < to; i++) {    t=A.get(i,j);    A.set(i,j,A.get(i,k));    A.set(i,k,t);  }}  }
class C{  private void openCamera(){  if (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA) && !getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_FRONT)) {    NotifyDialog.startInfo(this,getString(R.string.camera_error_title),getString(R.string.camera_error_no_camera));  } else {    try {      Intent cameraIntent=new Intent(MediaStore.ACTION_VIDEO_CAPTURE);      cameraIntent.putExtra(MediaStore.EXTRA_DURATION_LIMIT,Const.Video.MAX_RECORDING_VIDEO_TIME);      File videoFolder=Environment.getExternalStorageDirectory();      videoFolder.mkdirs();      File video=new File(videoFolder,Const.FilesName.VIDEO_TEMP_FILE_NAME);      Uri uriSavedVideo=Uri.fromFile(video);      filePath=video.getPath();      if (Build.VERSION.SDK_INT > Build.VERSION_CODES.KITKAT_WATCH) {        cameraIntent.putExtra(MediaStore.EXTRA_OUTPUT,uriSavedVideo);      }      startActivityForResult(cameraIntent,Const.RequestCode.CAMERA);    } catch (    Exception ex) {      ex.printStackTrace();      NotifyDialog.startInfo(this,getString(R.string.camera_error_title),getString(R.string.camera_error_camera_init));    }  }}  }
class C{  public ClusterSearchShardsRequest types(String... types){  this.types=types;  return this;}  }
class C{  public Metric(int dim,double deriv){  this.deriv=deriv;  this.dim=dim;}  }
class C{  public static ArrayList<String> readFile(File file){  ArrayList<String> fichier=new ArrayList<>();  try {    InputStream ips=new FileInputStream(file);    InputStreamReader ipsr=new InputStreamReader(ips);    try (BufferedReader br=new BufferedReader(ipsr)){      String ligne=br.readLine();      @SuppressWarnings("unused") int i=0;      while (ligne != null) {        fichier.add(ligne.toString());        ligne=br.readLine();      }    }   } catch (  Exception e) {    System.out.println("Error : " + e.toString() + e);  }  return fichier;}  }
class C{  private void resetToXMLSAXHandler(){  this.m_escapeSetting=true;}  }
class C{  public static final void createBackupFile(Path file,boolean overwrite){  Path backup=Paths.get("backup");  try {    if (!Files.exists(backup)) {      Files.createDirectory(backup);    }    if (!Files.exists(file)) {      return;    }    DateFormat formatter=new SimpleDateFormat("yyyy-MM-dd");    String date=formatter.format(Files.getLastModifiedTime(file).toMillis());    backup=backup.resolve(file.getFileName() + "." + date+ ".zip");    if (!Files.exists(backup) || overwrite == true) {      createZip(backup,file,"/" + file.getFileName().toString());    }  } catch (  IOException e) {    LOGGER.error("Could not backup file " + file + ": "+ e.getMessage());  }}  }
class C{  public void test_query_join_1shard() throws Exception {  final int startId=1;  final int joinId=2;  final int predId=3;  final int sliceId=4;  final StartOp startOp=new StartOp(new BOp[]{},NV.asMap(new NV[]{new NV(Predicate.Annotations.BOP_ID,startId),new NV(SliceOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER)}));  final Predicate<E> predOp=new Predicate<E>(new IVariableOrConstant[]{new Constant<String>("Mary"),Var.var("value")},NV.asMap(new NV[]{new NV(Predicate.Annotations.RELATION_NAME,new String[]{namespace}),new NV(Predicate.Annotations.REMOTE_ACCESS_PATH,false),new NV(Predicate.Annotations.BOP_ID,predId),new NV(Annotations.TIMESTAMP,ITx.READ_COMMITTED)}));  final PipelineJoin<E> joinOp=new PipelineJoin<E>(new BOp[]{startOp},new NV(Predicate.Annotations.BOP_ID,joinId),new NV(PipelineJoin.Annotations.PREDICATE,predOp),new NV(Predicate.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.SHARDED));  final PipelineOp query=new SliceOp(new BOp[]{joinOp},NV.asMap(new NV[]{new NV(Predicate.Annotations.BOP_ID,sliceId),new NV(SliceOp.Annotations.EVALUATION_CONTEXT,BOpEvaluationContext.CONTROLLER),new NV(PipelineOp.Annotations.SHARED_STATE,true),new NV(PipelineOp.Annotations.REORDER_SOLUTIONS,false),new NV(QueryEngine.Annotations.CHUNK_HANDLER,FederationChunkHandler.TEST_INSTANCE)}));  final IBindingSet[] expected=new IBindingSet[]{new ListBindingSet(new IVariable[]{Var.var("value")},new IConstant[]{new Constant<String>("Paul")}),new ListBindingSet(new IVariable[]{Var.var("value")},new IConstant[]{new Constant<String>("John")})};  final UUID queryId=UUID.randomUUID();  final IRunningQuery runningQuery=queryEngine.eval(queryId,query,new ListBindingSet());  AbstractQueryEngineTestCase.assertSameSolutionsAnyOrder(expected,runningQuery);  runningQuery.get();  final Map<Integer,BOpStats> statsMap=runningQuery.getStats();{    assertNotNull(statsMap);    assertEquals(3,statsMap.size());    if (log.isInfoEnabled())     log.info(statsMap.toString());  }{    final BOpStats stats=statsMap.get(startId);    assertNotNull(stats);    if (log.isInfoEnabled())     log.info("start: " + stats.toString());    assertEquals(1L,stats.chunksIn.get());    assertEquals(1L,stats.unitsIn.get());    assertEquals(1L,stats.unitsOut.get());    assertEquals(1L,stats.chunksOut.get());  }{    final BOpStats stats=statsMap.get(joinId);    assertNotNull(stats);    if (log.isInfoEnabled())     log.info("join : " + stats.toString());    assertEquals(1L,stats.chunksIn.get());    assertEquals(1L,stats.unitsIn.get());    assertEquals(2L,stats.unitsOut.get());    assertEquals(1L,stats.chunksOut.get());  }{    final BOpStats stats=statsMap.get(sliceId);    assertNotNull(stats);    if (log.isInfoEnabled())     log.info("slice: " + stats.toString());    assertEquals(1L,stats.chunksIn.get());    assertEquals(2L,stats.unitsIn.get());    assertEquals(2L,stats.unitsOut.get());    assertEquals(1L,stats.chunksOut.get());  }}  }
class C{  public URL fetchImage(String image){  try {    return new URL("http://" + this.credentials.host + this.credentials.app+ "/"+ image);  } catch (  Exception exception) {    this.exception=new SDKException(exception);    throw this.exception;  }}  }
class C{  @SuppressWarnings("unchecked") protected void initialize(){  this.setLayout(new GridBagLayout());  JLabel sessionsLabel=new JLabel(Constant.messages.getString("authentication.method.manual.field.session"));  this.add(sessionsLabel,LayoutHelper.getGBC(0,0,1,0.5D));  this.add(getSessionsComboBox(),LayoutHelper.getGBC(1,0,1,0.5D));  this.getSessionsComboBox().setRenderer(new HttpSessionRenderer());  this.add(new JLabel(Constant.messages.getString("authentication.method.manual.field.description")),LayoutHelper.getGBC(0,1,2,0.0d,0.0d));}  }
class C{  public static void main(String[] args) throws Exception {  Main main=new Main();  main.run();}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(SPECIALIZED).setRequired(true);  builder.addElement(RecurrenceExceptionEntryLink.KEY).setRequired(true);}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,double[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  public void insert(final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  if (first == null) {    first=insns.first;    last=insns.last;  } else {    AbstractInsnNode elem=insns.last;    first.prev=elem;    elem.next=first;    first=insns.first;  }  cache=null;  insns.removeAll(false);}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,T8,R>Function<T8,R> partial8(final T1 t1,final T2 t2,final T3 t3,final T4 t4,final T5 t5,final T6 t6,final T7 t7,final OctFunction<T1,T2,T3,T4,T5,T6,T7,T8,R> octFunc){  return null;}  }
class C{  void logSearchTermResolutionDetails(String searchTerm,@Nullable URL basePageUrl){  if (!isUserUndecided()) {    ContextualSearchUma.logBasePageProtocol(isBasePageHTTP(basePageUrl));    boolean isSingleWord=!CONTAINS_WHITESPACE_PATTERN.matcher(searchTerm.trim()).find();    ContextualSearchUma.logSearchTermResolvedWords(isSingleWord);  }}  }
class C{  public void close(){  if (multicastSocket != null) {    try {      multicastSocket.leaveGroup(multicastGroup,networkInterface);    } catch (    IOException e) {      e.printStackTrace();    }    multicastSocket.close();  }  if (datagramSocket != null) {    datagramSocket.disconnect();    datagramSocket.close();  }}  }
class C{  protected void onFieldLong(final Object obj,final Field field,final Bin annotation,final long value){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.799 -0500",hash_original_method="DDA50D17BBCB2332C76722E4627B13B3",hash_generated_method="1C73B35A968B10680E838B758C2CCD45") public boolean selectArticle(String articleId,ArticlePointer pointer) throws IOException {  if (articleId != null) {    if (!NNTPReply.isPositiveCompletion(stat(articleId)))     return false;  } else {    if (!NNTPReply.isPositiveCompletion(stat()))     return false;  }  if (pointer != null)   __parseArticlePointer(getReplyString(),pointer);  return true;}  }
class C{  public javax2.sip.address.URI createURI(String uri) throws ParseException {  if (uri == null)   throw new NullPointerException("null arg");  try {    URLParser urlParser=new URLParser(uri);    String scheme=urlParser.peekScheme();    if (scheme == null)     throw new ParseException("bad scheme",0);    if (scheme.equalsIgnoreCase("sip")) {      return (javax2.sip.address.URI)urlParser.sipURL(true);    } else     if (scheme.equalsIgnoreCase("sips")) {      return (javax2.sip.address.URI)urlParser.sipURL(true);    } else     if (scheme.equalsIgnoreCase("tel")) {      return (javax2.sip.address.URI)urlParser.telURL(true);    }  } catch (  ParseException ex) {    throw new ParseException(ex.getMessage(),0);  }  return new gov2.nist.javax2.sip.address.GenericURI(uri);}  }
class C{  public void close() throws IOException {  in.close();}  }
class C{  public void onError(final String error){  onError(error,null);}  }
class C{  static void releaseNativeBuffer(NativeBuffer buffer){  NativeBuffer[] buffers=threadLocal.get();  if (buffers == null) {    buffers=new NativeBuffer[TEMP_BUF_POOL_SIZE];    buffers[0]=buffer;    threadLocal.set(buffers);    return;  }  for (int i=0; i < TEMP_BUF_POOL_SIZE; i++) {    if (buffers[i] == null) {      buffers[i]=buffer;      return;    }  }  for (int i=0; i < TEMP_BUF_POOL_SIZE; i++) {    NativeBuffer existing=buffers[i];    if (existing.size() < buffer.size()) {      existing.cleaner().clean();      buffers[i]=buffer;      return;    }  }  buffer.cleaner().clean();}  }
class C{  public Config(SolrResourceLoader loader,String name) throws ParserConfigurationException, IOException, SAXException {  this(loader,name,null,null);}  }
class C{  public void addPickupId(String id){  if (_pickupList.contains(id)) {    return;  }  _pickupList.add(id);  log.debug("track ({}) add pick up id {}",getName(),id);  setDirtyAndFirePropertyChange(PICKUP_CHANGED_PROPERTY,null,id);}  }
class C{  protected boolean isParentMatch(Viewer viewer,Object element){  Object[] children=((ITreeContentProvider)((AbstractTreeViewer)viewer).getContentProvider()).getChildren(element);  if ((children != null) && (children.length > 0)) {    return isAnyVisible(viewer,element,children);  }  return false;}  }
class C{  public void findAndUndo(Object someObj){  if (someObj == getInformationDelegator()) {    if (dtmm != null && dtmm.getInfoDelegator() == (InformationDelegator)someObj) {      dtmm.setInfoDelegator(null);    }    setInformationDelegator(null);  }  if (someObj == getMouseDelegator()) {    setMouseDelegator(null);  }  if (someObj == getCanvas()) {    setCanvas(null);  }  if (someObj instanceof EditToolLoader) {    removeLoader((EditToolLoader)someObj);  }}  }
class C{  public Set<GrantedAuthority> mapRolesToFunctions(Collection<String> roles){  SecurityFunctionDao securityFunctionDao=ApplicationContextHolder.getApplicationContext().getBean(SecurityFunctionDao.class);  Set<GrantedAuthority> authorities=new HashSet<>();  for (  String role : roles) {    if (role.equalsIgnoreCase(TrustedApplicationUserBuilder.TRUSTED_USER_ROLE)) {      for (      String function : securityFunctionDao.getSecurityFunctions()) {        authorities.add(new SimpleGrantedAuthority(function));      }    } else {      for (      String function : securityFunctionDao.getSecurityFunctionsForRole(role)) {        authorities.add(new SimpleGrantedAuthority(function));      }    }  }  return authorities;}  }
class C{  public static boolean withinClass(Tree.Declaration decl){  return container(decl) instanceof com.redhat.ceylon.model.typechecker.model.Class;}  }
class C{  public int length() throws UnsupportedOperationException {  if (this.type == TYPE_MALFORMED_INPUT || this.type == TYPE_UNMAPPABLE_CHAR) {    return this.length;  }  throw new UnsupportedOperationException("length meaningless for " + toString());}  }
class C{  public static String typeName(String clsName){  int packageEnd=clsName.lastIndexOf('.');  if (packageEnd >= 0 && packageEnd < clsName.length() - 1)   clsName=clsName.substring(packageEnd + 1);  if (clsName.endsWith("[]")) {    clsName=clsName.substring(0,clsName.length() - 2) + "_array";  }  int parentEnd=clsName.lastIndexOf('$');  if (parentEnd >= 0)   clsName=clsName.substring(parentEnd + 1);  return clsName;}  }
class C{  public XYAnnotationEntity(Shape hotspot,int rendererIndex,String toolTipText,String urlText){  super(hotspot,toolTipText,urlText);  this.rendererIndex=rendererIndex;}  }
class C{  private void doBulkReverseKNN(RdKNNNode node,DBIDs ids,Map<DBID,ModifiableDoubleDBIDList> result){  if (node.isLeaf()) {    for (int i=0; i < node.getNumEntries(); i++) {      RdKNNLeafEntry entry=(RdKNNLeafEntry)node.getEntry(i);      for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {        DBID id=DBIDUtil.deref(iter);        double distance=distanceQuery.distance(entry.getDBID(),id);        if (distance <= entry.getKnnDistance()) {          result.get(id).add(distance,entry.getDBID());        }      }    }  } else {    for (int i=0; i < node.getNumEntries(); i++) {      RdKNNDirectoryEntry entry=(RdKNNDirectoryEntry)node.getEntry(i);      ModifiableDBIDs candidates=DBIDUtil.newArray();      for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {        DBID id=DBIDUtil.deref(iter);        double minDist=distanceQuery.minDist(entry,id);        if (minDist <= entry.getKnnDistance()) {          candidates.add(id);        }        if (!candidates.isEmpty()) {          doBulkReverseKNN(getNode(entry),candidates,result);        }      }    }  }}  }
class C{  public static org.oscm.internal.vo.VOServiceOperationParameterValues convertToUp(org.oscm.vo.VOServiceOperationParameterValues oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOServiceOperationParameterValues newVO=new org.oscm.internal.vo.VOServiceOperationParameterValues();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setParameterId(oldVO.getParameterId());  newVO.setParameterName(oldVO.getParameterName());  newVO.setParameterValue(oldVO.getParameterValue());  newVO.setMandatory(oldVO.isMandatory());  newVO.setType(EnumConverter.convert(oldVO.getType(),org.oscm.internal.types.enumtypes.OperationParameterType.class));  newVO.setValues(oldVO.getValues());  return newVO;}  }
class C{  public void selectInitialValue(JOptionPane a){  for (int i=0; i < uis.size(); i++) {    ((OptionPaneUI)(uis.elementAt(i))).selectInitialValue(a);  }}  }
class C{  public void testBug4808() throws Exception {  MysqlConnectionPoolDataSource ds=new MysqlConnectionPoolDataSource();  ds.setURL(BaseTestCase.dbUrl);  PooledConnection closeMeTwice=ds.getPooledConnection();  closeMeTwice.close();  closeMeTwice.close();}  }
class C{  public void testCertStore07() throws InvalidAlgorithmParameterException, NoSuchAlgorithmException {  if (!initParams()) {    return;  }  for (int i=0; i < dValid.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        CertStore.getInstance(dValid[i],dParams,invalidValues[j]);        fail("NoSuchProviderException must be thrown");      } catch (      NoSuchProviderException e) {      }    }  }}  }
class C{  public DateHistogramBuilder order(Histogram.Order order){  this.order=order;  return this;}  }
class C{  public BandPassBuilder passAmplitude(double amplitude){  mPassAmplitude=amplitude;  return this;}  }
class C{  public static OperationNotPermittedException convertToApi(org.oscm.internal.types.exception.OperationNotPermittedException oldEx){  return convertExceptionToApi(oldEx,OperationNotPermittedException.class);}  }
class C{  public void put(int key,Object value){  if (key < 0)   Kit.codeBug();  int index=ensureIndex(key,false);  if (values == null) {    values=new Object[1 << power];  }  values[index]=value;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private Header createDigestHeader(final Credentials credentials,final String digest) throws AuthenticationException {  CharArrayBuffer buffer=new CharArrayBuffer(128);  if (isProxy()) {    buffer.append(AUTH.PROXY_AUTH_RESP);  } else {    buffer.append(AUTH.WWW_AUTH_RESP);  }  buffer.append(": Digest ");  String uri=getParameter("uri");  String realm=getParameter("realm");  String nonce=getParameter("nonce");  String opaque=getParameter("opaque");  String response=digest;  String algorithm=getParameter("algorithm");  String uname=credentials.getUserPrincipal().getName();  List<BasicNameValuePair> params=new ArrayList<BasicNameValuePair>(20);  params.add(new BasicNameValuePair("username",uname));  params.add(new BasicNameValuePair("realm",realm));  params.add(new BasicNameValuePair("nonce",nonce));  params.add(new BasicNameValuePair("uri",uri));  params.add(new BasicNameValuePair("response",response));  if (qopVariant != QOP_MISSING) {    params.add(new BasicNameValuePair("qop",getQopVariantString()));    params.add(new BasicNameValuePair("nc",NC));    params.add(new BasicNameValuePair("cnonce",getCnonce()));  }  if (algorithm != null) {    params.add(new BasicNameValuePair("algorithm",algorithm));  }  if (opaque != null) {    params.add(new BasicNameValuePair("opaque",opaque));  }  for (int i=0; i < params.size(); i++) {    BasicNameValuePair param=params.get(i);    if (i > 0) {      buffer.append(", ");    }    boolean noQuotes="nc".equals(param.getName()) || "qop".equals(param.getName());    BasicHeaderValueFormatter.DEFAULT.formatNameValuePair(buffer,param,!noQuotes);  }  return new BufferedHeader(buffer);}  }
class C{  public boolean isMandatory(){  return m_mandatory;}  }
class C{  @Override public int EOF_sym(){  return 0;}  }
class C{  public boolean isSetEnd_in_both(){  return EncodingUtils.testBit(__isset_bitfield,__END_IN_BOTH_ISSET_ID);}  }
class C{  public StringList plus(String... args){  StringList newList=new StringList();  newList.addAll(this);  newList.addAll(Arrays.asList(args));  return newList;}  }
class C{  protected RuleState(IRule rule){  this.rule=rule;  this.plan=null;  this.nvars=null;  this.keyOrder=null;  this.requiredVars=null;}  }
class C{  private RefactoringStatus initializeSimilarElementsRenameProcessors(IProgressMonitor progressMonitor,CheckConditionsContext context) throws CoreException {  Assert.isNotNull(fPreloadedElementToName);  Assert.isNotNull(fPreloadedElementToSelection);  final RefactoringStatus status=new RefactoringStatus();  final Set<IMethod> handledTopLevelMethods=new HashSet<IMethod>();  final Set<Warning> warnings=new HashSet<Warning>();  final List<RefactoringProcessor> processors=new ArrayList<RefactoringProcessor>();  fFinalSimilarElementToName=new HashMap<IJavaElement,String>();  CompilationUnit currentResolvedCU=null;  ICompilationUnit currentCU=null;  int current=0;  final int max=fPreloadedElementToName.size();  progressMonitor.beginTask("",max * 3);  progressMonitor.setTaskName(RefactoringCoreMessages.RenameTypeProcessor_checking_similarly_named_declarations_refactoring_conditions);  for (Iterator<IJavaElement> iter=fPreloadedElementToName.keySet().iterator(); iter.hasNext(); ) {    final IJavaElement element=iter.next();    current++;    progressMonitor.worked(3);    if (!(fPreloadedElementToSelection.get(element)).booleanValue())     continue;    if (fFinalSimilarElementToName.containsKey(element))     continue;    ICompilationUnit newCU=(ICompilationUnit)element.getAncestor(IJavaElement.COMPILATION_UNIT);    if (!newCU.equals(currentCU)) {      checkCUCompleteConditions(status,currentResolvedCU,currentCU,processors);      if (status.hasFatalError())       return status;      currentResolvedCU=null;      currentCU=newCU;      processors.clear();    }    final String newName=fPreloadedElementToName.get(element);    RefactoringProcessor processor=null;    if (element instanceof ILocalVariable) {      final ILocalVariable currentLocal=(ILocalVariable)element;      if (currentResolvedCU == null)       currentResolvedCU=new RefactoringASTParser(ASTProvider.SHARED_AST_LEVEL).parse(currentCU,true);      processor=createLocalRenameProcessor(currentLocal,newName,currentResolvedCU);      if (status.hasFatalError())       return status;      fFinalSimilarElementToName.put(currentLocal,newName);    }    if (element instanceof IField) {      final IField currentField=(IField)element;      processor=createFieldRenameProcessor(currentField,newName);      status.merge(checkForConflictingRename(currentField,newName));      if (status.hasFatalError())       return status;      fFinalSimilarElementToName.put(currentField,newName);    }    if (element instanceof IMethod) {      IMethod currentMethod=(IMethod)element;      if (MethodChecks.isVirtual(currentMethod)) {        final IType declaringType=currentMethod.getDeclaringType();        ITypeHierarchy hierarchy=null;        if (!declaringType.isInterface())         hierarchy=declaringType.newTypeHierarchy(new NullProgressMonitor());        final IMethod topmost=MethodChecks.getTopmostMethod(currentMethod,hierarchy,new NullProgressMonitor());        if (topmost != null)         currentMethod=topmost;        if (handledTopLevelMethods.contains(currentMethod))         continue;        handledTopLevelMethods.add(currentMethod);        final IMethod[] ripples=RippleMethodFinder2.getRelatedMethods(currentMethod,new NullProgressMonitor(),null);        if (checkForWarnings(warnings,newName,ripples))         continue;        status.merge(checkForConflictingRename(ripples,newName));        if (status.hasFatalError())         return status;        processor=createVirtualMethodRenameProcessor(currentMethod,newName,ripples,hierarchy);        fFinalSimilarElementToName.put(currentMethod,newName);        for (int i=0; i < ripples.length; i++) {          fFinalSimilarElementToName.put(ripples[i],newName);        }      } else {        status.merge(checkForConflictingRename(new IMethod[]{currentMethod},newName));        if (status.hasFatalError())         break;        fFinalSimilarElementToName.put(currentMethod,newName);        processor=createNonVirtualMethodRenameProcessor(currentMethod,newName);      }    }    progressMonitor.subTask(Messages.format(RefactoringCoreMessages.RenameTypeProcessor_progress_current_total,new Object[]{String.valueOf(current),String.valueOf(max)}));    status.merge(processor.checkInitialConditions(new NoOverrideProgressMonitor(progressMonitor,1)));    if (status.hasFatalError())     return status;    status.merge(processor.checkFinalConditions(new NoOverrideProgressMonitor(progressMonitor,1),context));    if (status.hasFatalError())     return status;    processors.add(processor);    progressMonitor.worked(1);    if (progressMonitor.isCanceled())     throw new OperationCanceledException();  }  checkCUCompleteConditions(status,currentResolvedCU,currentCU,processors);  status.merge(addWarnings(warnings));  progressMonitor.done();  return status;}  }
class C{  public void write(final String filename){  try (PrintStream stream=new PrintStream(new File(filename))){    write(stream);  } catch (  FileNotFoundException e) {    e.printStackTrace();  }}  }
class C{  @Autowired public Server(final RequestHandler requestHandler){  this.requestHandler=requestHandler;  init();}  }
class C{  public void writeInt(final int b) throws IOException {  write((b >>> 24) & 0xFF);  write((b >>> 16) & 0xFF);  write((b >>> 8) & 0xFF);  write(b & 0xFF);}  }
class C{  private Object writeReplace() throws ObjectStreamException {  return new BigDecimal(value);}  }
class C{  public MemoryTableModel(DataSpace space,JasDocument doc){  this.data=space;  listener=new ArrayList<>();  this.doc=doc;  doHighlight=doc.isHighlightingEnabled();}  }
class C{  public static boolean checkVPoolValidForExportInitiatorProtocols(VirtualPool vpool,UnManagedVolume unManagedVolume,DbClient dbClient){  if (unManagedVolume.getInitiatorUris().isEmpty()) {    _logger.info("unmanaged volume {} has no initiators, so no need to verify vpool protocols",unManagedVolume.getNativeGuid());    return true;  }  _logger.info("checking validity of virtual pool {} protocols for unmanaged volume {}",vpool.getLabel(),unManagedVolume.getNativeGuid());  Set<String> initiatorProtocols=new HashSet<String>();  for (  String initUri : unManagedVolume.getInitiatorUris()) {    Initiator init=dbClient.queryObject(Initiator.class,URI.create(initUri));    if (init != null) {      initiatorProtocols.add(init.getProtocol());    }  }  _logger.info("this unmanaged volume's export's initiators' protocols are {}",Joiner.on(",").join(initiatorProtocols));  _logger.info("the requested virtual pool's protocols are {}",Joiner.on(",").join(vpool.getProtocols()));  boolean atLeastOneProtocolIsSatisfied=false;  for (  String protocol : initiatorProtocols) {    if (vpool.getProtocols().contains(protocol)) {      _logger.info("at least one protocol matches between the volume and virtual pool");      atLeastOneProtocolIsSatisfied=true;      break;    }  }  if (!atLeastOneProtocolIsSatisfied) {    _logger.warn("no protocol overlap found between unmanaged volume and " + "virtual pool. ingestion will be skipped.");  }  return atLeastOneProtocolIsSatisfied;}  }
class C{  public void testBug4880() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug4880");    this.stmt.executeUpdate("CREATE TABLE testBug4880 (field1 VARCHAR(80), field2 TINYBLOB, field3 BLOB, field4 MEDIUMBLOB, field5 LONGBLOB)");    this.rs=this.stmt.executeQuery("SELECT field1, field2, field3, field4, field5 FROM testBug4880");    ResultSetMetaData rsmd=this.rs.getMetaData();    assertEquals(80,rsmd.getPrecision(1));    assertEquals(Types.VARCHAR,rsmd.getColumnType(1));    assertEquals(80,rsmd.getColumnDisplaySize(1));    assertEquals(255,rsmd.getPrecision(2));    assertEquals(Types.VARBINARY,rsmd.getColumnType(2));    assertTrue("TINYBLOB".equalsIgnoreCase(rsmd.getColumnTypeName(2)));    assertEquals(255,rsmd.getColumnDisplaySize(2));    assertEquals(65535,rsmd.getPrecision(3));    assertEquals(Types.LONGVARBINARY,rsmd.getColumnType(3));    assertTrue("BLOB".equalsIgnoreCase(rsmd.getColumnTypeName(3)));    assertEquals(65535,rsmd.getColumnDisplaySize(3));    assertEquals(16777215,rsmd.getPrecision(4));    assertEquals(Types.LONGVARBINARY,rsmd.getColumnType(4));    assertTrue("MEDIUMBLOB".equalsIgnoreCase(rsmd.getColumnTypeName(4)));    assertEquals(16777215,rsmd.getColumnDisplaySize(4));    if (versionMeetsMinimum(4,1)) {      assertEquals(Integer.MAX_VALUE,rsmd.getPrecision(5));      assertEquals(Types.LONGVARBINARY,rsmd.getColumnType(5));      assertTrue("LONGBLOB".equalsIgnoreCase(rsmd.getColumnTypeName(5)));      assertEquals(Integer.MAX_VALUE,rsmd.getColumnDisplaySize(5));    }  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug4880");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.082 -0500",hash_original_method="056144D27ACF2932EFB0C1980B0D6F98",hash_generated_method="74273AD6A7D138355EF1ACE14D1C1CB7") @DSVerified @DSSpec(DSCat.INTERNET) public void loadUrl(String url,Map<String,String> extraHeaders){  mLoadInitFromJava=true;  if (URLUtil.isJavaScriptUrl(url)) {    stringByEvaluatingJavaScriptFromString(url.substring("javascript:".length()));  } else {    nativeLoadUrl(url,extraHeaders);  }  mLoadInitFromJava=false;}  }
class C{  public AccountHeaderBuilder withOnAccountHeaderProfileImageListener(AccountHeader.OnAccountHeaderProfileImageListener onAccountHeaderProfileImageListener){  this.mOnAccountHeaderProfileImageListener=onAccountHeaderProfileImageListener;  return this;}  }
class C{  public static void stop(int exit_code){  System.exit(exit_code);}  }
class C{  private void updateQuickReplyView(String editText){  if (BuildConfig.DEBUG)   Log.v("updateQuickReplyView - '" + editText + "'");  if (qrEditText != null && editText != null) {    qrEditText.setText(editText + signatureText);    qrEditText.setSelection(editText.length());  }  if (quickreplyTextView != null && quickReplySmsMessage != null) {    quickreplyTextView.setText(getString(R.string.quickreply_from_text,quickReplySmsMessage.getContactName()));  }}  }
class C{  public GridConcurrentPhantomHashSet(int initCap){  store=new GridConcurrentHashSet<>(initCap);}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2),entryOf(k3,v3),entryOf(k4,v4),entryOf(k5,v5));}  }
class C{  public Key minKey(){  if (isEmpty())   throw new NoSuchElementException("Priority queue is empty");  return keys[d];}  }
class C{  public static ValueDate convertDate(Date x,Calendar calendar){  if (calendar == null) {    throw DbException.getInvalidValueException("calendar",null);  }  Calendar cal=(Calendar)calendar.clone();  cal.setTimeInMillis(x.getTime());  long dateValue=dateValueFromCalendar(cal);  return ValueDate.fromDateValue(dateValue);}  }
class C{  public void applyDamage(Server s){  for (  DamagePlan damagePlan : damagePlans) {    System.out.println(String.format("Applying damage to %s",damagePlan.entity.getShortName()));    for (int y=0; y < damagePlan.nBlocks; ++y) {      HitData hit=damagePlan.entity.rollHitLocation(ToHitData.HIT_NORMAL,ToHitData.SIDE_FRONT);      System.out.println("[s.damageEntity(dp.entity, hit, 5)]");      s.damageEntity(damagePlan.entity,hit,5);    }    for (    SpecDam specDamage : damagePlan.specificDammage) {      if (damagePlan.entity.locations() <= specDamage.loc) {        System.err.println(String.format("\tInvalid location specified %d",specDamage.loc));      } else {        if (specDamage.internal || ((damagePlan.entity instanceof Infantry) && !(damagePlan.entity instanceof BattleArmor))) {          if (damagePlan.entity.getOInternal(specDamage.loc) > specDamage.setArmorTo) {            damagePlan.entity.setInternal(specDamage.setArmorTo,specDamage.loc);            System.out.println(String.format("\tSet armor value for (internal %s) to %d",damagePlan.entity.getLocationName(specDamage.loc),specDamage.setArmorTo));            if (specDamage.setArmorTo == 0) {              System.out.println(String.format("\tSection destoyed %s",damagePlan.entity.getLocationName(specDamage.loc)));              damagePlan.entity.destroyLocation(specDamage.loc);            }          }        } else {          if (specDamage.rear && damagePlan.entity.hasRearArmor(specDamage.loc)) {            if (damagePlan.entity.getOArmor(specDamage.loc,true) > specDamage.setArmorTo) {              System.out.println(String.format("\tSet armor value for (rear %s) to %d",damagePlan.entity.getLocationName(specDamage.loc),specDamage.setArmorTo));              damagePlan.entity.setArmor(specDamage.setArmorTo,specDamage.loc,true);            }          } else {            if (damagePlan.entity.getOArmor(specDamage.loc,false) > specDamage.setArmorTo) {              System.out.println(String.format("\tSet armor value for (%s) to %d",damagePlan.entity.getLocationName(specDamage.loc),specDamage.setArmorTo));              if (damagePlan.entity instanceof BattleArmor) {                if (specDamage.setArmorTo == 0) {                  damagePlan.entity.setArmor(IArmorState.ARMOR_DOOMED,specDamage.loc,false);                  damagePlan.entity.setInternal(IArmorState.ARMOR_DOOMED,specDamage.loc);                } else {                  damagePlan.entity.setArmor(specDamage.setArmorTo - 1,specDamage.loc);                }              } else {                damagePlan.entity.setArmor(specDamage.setArmorTo,specDamage.loc);              }            }          }        }      }    }  }  for (  CritHitPlan chp : critHitPlans) {    System.out.println(String.format("Applying critical hits to %s",chp.entity.getShortName()));    for (    CritHit critHit : chp.critHits) {      if (chp.entity.locations() <= critHit.loc) {        System.err.println(String.format("\tInvalid location specified %d",critHit.loc));      } else {        if ((chp.entity instanceof Mech) || (chp.entity instanceof Protomech)) {          CriticalSlot cs=null;          if ((chp.entity instanceof Protomech) && (Protomech.LOC_TORSO == critHit.loc) && ((Protomech.SYSTEM_TORSO_WEAPON_A == critHit.slot) || (Protomech.SYSTEM_TORSO_WEAPON_B == critHit.slot))) {            cs=new CriticalSlot(CriticalSlot.TYPE_SYSTEM,critHit.slot);          } else           if ((critHit.slot < 0) || (critHit.slot > chp.entity.getNumberOfCriticals(critHit.loc))) {            System.err.println(String.format("%s - invalid slot specified %d: %d",chp.entity.getShortName(),critHit.loc,(critHit.slot + 1)));          } else {            cs=chp.entity.getCritical(critHit.loc,critHit.slot);          }          if ((null == cs) || !cs.isHittable()) {            System.err.println(String.format("%s - slot not hittable %d: %d",chp.entity.getShortName(),critHit.loc,(critHit.slot + 1)));          } else {            System.out.print("[s.applyCriticalHit(chp.entity, ch.loc, cs, false)]");            s.applyCriticalHit(chp.entity,critHit.loc,cs,false,0,false);          }        } else         if (chp.entity instanceof Tank) {          if ((critHit.slot < 0) || (critHit.slot >= 6)) {            System.err.println(String.format("%s - invalid slot specified %d: %d",chp.entity.getShortName(),critHit.loc,(critHit.slot + 1)));          } else {            CriticalSlot cs=new CriticalSlot(CriticalSlot.TYPE_SYSTEM,critHit.slot + 1);            System.out.print("[s.applyCriticalHit(chp.entity, ch.loc, cs, false)]");            s.applyCriticalHit(chp.entity,Entity.NONE,cs,false,0,false);          }        }      }    }  }  for (  SetAmmoPlan sap : ammoPlans) {    System.out.println(String.format("Applying ammo adjustment to %s",sap.entity.getShortName()));    for (    SetAmmoType sa : sap.ammoSetType) {      if (sap.entity instanceof Mech) {        if (sa.slot < sap.entity.getNumberOfCriticals(sa.loc)) {          CriticalSlot cs=sap.entity.getCritical(sa.loc,sa.slot);          if (null != cs) {            Mounted ammo=sap.entity.getCritical(sa.loc,sa.slot).getMount();            if (null == ammo) {              System.err.println(String.format("%s - invalid slot specified %d: %d",sap.entity.getShortName(),sa.loc,sa.slot + 1));            } else             if (ammo.getType() instanceof AmmoType) {              AmmoType newAmmoType=getValidAmmoType(s.getGame(),ammo,sa.type);              if (null != newAmmoType) {                ammo.changeAmmoType(newAmmoType);              } else {                System.out.println(String.format("Illegal ammo type '%s' for unit %s, slot %s",sa.type,sap.entity.getDisplayName(),ammo.getName()));              }            }          }        }      }    }    for (    SetAmmoTo sa : sap.ammoSetTo) {      if (sap.entity instanceof Mech) {        if (sa.slot < sap.entity.getNumberOfCriticals(sa.loc)) {          CriticalSlot cs=sap.entity.getCritical(sa.loc,sa.slot);          if (null != cs) {            Mounted ammo=sap.entity.getCritical(sa.loc,sa.slot).getMount();            if (null == ammo) {              System.err.println(String.format("%s - invalid slot specified %d: %d",sap.entity.getShortName(),sa.loc,sa.slot + 1));            } else             if (ammo.getType() instanceof AmmoType) {              ammo.setShotsLeft(Math.min(sa.setAmmoTo,ammo.getBaseShotsLeft()));            }          }        }      }    }  }}  }
class C{  private void injectApplicationIntentFilters(){  logger.info("**injectApplicationIntentFilters .... ");  AndroidManifest manifest=Resources.v().getManifest();  logger.info("Application {}, package {} ",manifest.application,Resources.v().package_name);  if (manifest.application == null) {    logger.info("{} is NOT an allication project, skip intentFilterInjection",Resources.v().package_name);    return;  }  manifest.application.setSootClass(manifest.application.name);  SootClass appClass=manifest.application.getSootClass();  StmtBody body=(StmtBody)harnessMain.getActiveBody();  String appInitSig=String.format("<%s: void <init>()>","android.app.Application");  SootMethod appInit=null;  try {    appInit=Scene.v().getMethod(appInitSig);  } catch (  Exception ex) {    logger.warn("Cannot inject intent filter ");  }  SootMethod initMethod=null;  try {    initMethod=Scene.v().getActiveHierarchy().resolveConcreteDispatch(appClass,appInit);  } catch (  Exception ex) {    logger.warn("Cannot resolve App constructor {}",appClass);    return;  }  RefType appType=appClass.getType();  Local appLocal=Jimple.v().newLocal("_$dsApp__",appClass.getType());  body.getLocals().add(appLocal);  Expr newAppExpr=Jimple.v().newNewExpr(appType);  body.getUnits().add(Jimple.v().newAssignStmt(appLocal,newAppExpr));  InvokeStmt initStmt=Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(appLocal,initMethod.makeRef()));  body.getUnits().add(initStmt);  SootMethod droidsafeInit=Scene.v().getMethod(modelApplicationMethod);  SootField appField=new SootField(FIELD_PREFIX + localID++,appClass.getType(),Modifier.PUBLIC | Modifier.STATIC);  harnessClass.addField(appField);  body.getUnits().add(Jimple.v().newAssignStmt(Jimple.v().newStaticFieldRef(appField.makeRef()),appLocal));  globalsMap.put(appClass,appField);  List<Value> list=new LinkedList<Value>();  list.add(appLocal);  body.getUnits().add(Jimple.v().newInvokeStmt(TransformsUtils.makeInvokeExpression(droidsafeInit,null,list)));  SootMethod contextInit;  contextInit=Scene.v().getMethod(componentInitMethod.get(Components.SERVICE_CLASS));  for (  Activity context : manifest.activities) {    logger.info("Activity {} ",context);    injectXMLComponent(context,Components.ACTIVITY_CLASS,context.getSootClass(),context.intent_filters,body);  }  for (  Service context : manifest.services) {    logger.info("Service {} ",context);    injectXMLComponent(context,Components.SERVICE_CLASS,context.getSootClass(),context.intent_filters,body);  }  for (  Provider p : manifest.providers) {    logger.info("Content provider {} ",p);    injectXMLComponent(p,Components.CONTENTPROVIDER_CLASS,p.getSootClass(),p.intent_filters,body);  }  for (  Receiver r : manifest.receivers) {    logger.info("Receiver {} ",r);    injectXMLComponent(r,Components.BROADCASTRECEIVER_CLASS,r.getSootClass(),r.intent_filters,body,appLocal);    if (r.intent_filters.size() > 0) {      logger.warn("has intent filter for {}:{}",r.name,r);    }  }}  }
class C{  public String decodeBase64(String value){  return new String(Base64.decodeBase64(value));}  }
class C{  @HLEFunction(nid=0x94416130,version=150,checkInsideInterrupt=true) public int sceKernelGetThreadmanIdList(int type,TPointer32 readBufPtr,int readBufSize,TPointer32 idCountPtr){  if (type != SCE_KERNEL_TMID_Thread) {    log.warn(String.format("UNIMPLEMENTED:sceKernelGetThreadmanIdList type=%d",type));    idCountPtr.setValue(0);    return 0;  }  int saveCount=0;  int fullCount=0;  for (  SceKernelThreadInfo thread : threadMap.values()) {    if (userThreadCalledKernelCurrentThread(thread)) {      if (saveCount < readBufSize) {        if (log.isDebugEnabled()) {          log.debug(String.format("sceKernelGetThreadmanIdList adding thread %s",thread));        }        readBufPtr.setValue(saveCount << 2,thread.uid);        saveCount++;      } else {        log.warn(String.format("sceKernelGetThreadmanIdList NOT adding thread %s (no more space)",thread));      }      fullCount++;    }  }  idCountPtr.setValue(fullCount);  return 0;}  }
class C{  public long allocateSystem(long size,boolean init) throws GridOffHeapOutOfMemoryException {  return allocate0(size,init,false,sysAllocated);}  }
class C{  public KMLApplicationController(WorldWindow wwd){  if (wwd == null) {    String message=Logging.getMessage("nullValue.WorldWindow");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.wwd=wwd;  this.wwd.addSelectListener(this);  this.wwd.getSceneController().addPropertyChangeListener(this);}  }
class C{  protected void reportError(final Callback callback,String error,Exception e){  if (LogConfiguration.loggingIsEnabled()) {    if (e != null) {      logger.log(Level.SEVERE,error,e);    } else {      logger.log(Level.SEVERE,error);    }  }  if (callback != null) {    callback.onError(error);    callback.setDb(null);  } else   if (db.errorHandler != null) {    db.errorHandler.onError(error);  }}  }
class C{  public void addLdc(String s){  addLdc(constPool.addStringInfo(s));}  }
class C{  public void doAlertDialog(String title,String message){  JTextPane textArea=new JTextPane();  ReportDisplay.setupStylesheet(textArea);  textArea.setEditable(false);  JScrollPane scrollPane=new JScrollPane(textArea,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);  textArea.setText("<pre>" + message + "</pre>");  scrollPane.setPreferredSize(new Dimension((int)(getSize().getWidth() / 1.5),(int)(getSize().getHeight() / 1.5)));  JOptionPane.showMessageDialog(frame,scrollPane,title,JOptionPane.ERROR_MESSAGE);}  }
class C{  public Y in(List<X> values){  if (q.isEmpty() == false) {    q.add(" AND ");  }  q.add(getColumnName()).in(getValues(values));  return criteria;}  }
class C{  @Override public void startOfProcess(){  String previousBaseIndent=baseIndent.substring(INDENT_LENGTH);  builder.append(previousBaseIndent).append("HierarchyWrapper{\n");  processFirstOtherContent=true;}  }
class C{  @Override public void vetoableChange(PropertyChangeEvent e) throws PropertyVetoException {  if (!"Key".equals(e.getPropertyName())) {    return;  }  Series s=(Series)e.getSource();  if (getSeriesIndex(s.getKey()) == -1) {    throw new IllegalStateException("Receiving events from a series " + "that does not belong to this collection.");  }  Comparable key=(Comparable)e.getNewValue();  if (getSeriesIndex(key) >= 0) {    throw new PropertyVetoException("Duplicate key2",e);  }}  }
class C{  public void bootstrapNetty(){  try {    final ServerBootstrap bootstrap=createServerBootStrap();    bootstrap.setOption("reuseAddr",true);    bootstrap.setOption("child.keepAlive",true);    bootstrap.setOption("child.tcpNoDelay",true);    bootstrap.setOption("child.sendBufferSize",Controller.SEND_BUFFER_SIZE);    ChannelPipelineFactory pfact=new OpenflowPipelineFactory(this,floodlightProvider.getTimer(),this,debugCounterService);    bootstrap.setPipelineFactory(pfact);    InetSocketAddress sa=new InetSocketAddress(floodlightProvider.getOFPort());    final ChannelGroup cg=new DefaultChannelGroup();    cg.add(bootstrap.bind(sa));    log.info("Listening for switch connections on {}",sa);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public Fact(Resource s,URI p,Value o){  this.triple=new StatementImpl(s,p,o);}  }
class C{  public void releaseBuffers(){  if (_allocator == null) {    resetWithEmpty();  } else {    if (_currentSegment != null) {      resetWithEmpty();      char[] buf=_currentSegment;      _currentSegment=null;      _allocator.releaseCharBuffer(BufferRecycler.CharBufferType.TEXT_BUFFER,buf);    }  }}  }
class C{  public Builder startFromBeginning(){  return startFrom(StreamPosition.START);}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  if (timeSeries.size() <= 0) {    functionValueMap.add(this,Double.NaN);    return;  }  int size=timeSeries.size();  double min=timeSeries.getValue(0);  for (int i=1; i < size; i++) {    double next=timeSeries.getValue(i);    if (next < min) {      min=next;    }  }  functionValueMap.add(this,min);}  }
class C{  public ConstructLengths parseConstructLengths() throws CLIArgumentParserException {  ConstructLengths constructLengths=new ConstructLengths();  constructLengths.setMaxClassLength(getIntegerArgument(Messages.MAX_CLASS_LENGTH_OPT));  constructLengths.setMaxClosureLength(getIntegerArgument(Messages.MAX_CLOSURE_LENGTH_OPT));  constructLengths.setMaxFileLength(getIntegerArgument(Messages.MAX_FILE_LENGTH_OPT));  constructLengths.setMaxFunctionLength(getIntegerArgument(Messages.MAX_FUNCTION_LENGTH_OPT));  constructLengths.setMaxLineLength(getIntegerArgument(Messages.MAX_LINE_LENGTH_LONG_OPT));  constructLengths.setMaxNameLength(getIntegerArgument(Messages.MAX_NAME_LENGTH_OPT));  constructLengths.setMaxStructLength(getIntegerArgument(Messages.MAX_STRUCT_LENGTH_OPT));  constructLengths.setMinNameLength(getIntegerArgument(Messages.MIN_NAME_LENGTH_OPT));  return constructLengths;}  }
class C{  public boolean isContainsValueForKey(){  return this.opType == OP_TYPE_CONTAINS_VALUE_FOR_KEY;}  }
class C{  public AttributeSet translateHTMLToCSS(AttributeSet htmlAttrSet){  AttributeSet cssAttrSet=css.translateHTMLToCSS(htmlAttrSet);  MutableAttributeSet cssStyleSet=addStyle(null,null);  cssStyleSet.addAttributes(cssAttrSet);  return cssStyleSet;}  }
class C{  public GuacamoleClientTimeoutException(String message){  super(message);}  }
class C{  public void writeLong(long l) throws IOException {  this.writeULong(l);}  }
class C{  public TungstenProperties(){  this(false);}  }
class C{  String runGitCommand(String... args) throws CommandException {  return cmd.runCommand("git",ImmutableList.copyOf(args),getLocalTempDir().getAbsolutePath());}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getConfidentialTypeEntry() == null)   setConfidentialTypeEntry(CONFIDENTIALTYPEENTRY_PublicInformation);  return true;}  }
class C{  public static int indexOfIgnoreCase(String src,String sub,int startIndex,int endIndex){  if (startIndex < 0) {    startIndex=0;  }  int srclen=src.length();  if (endIndex > srclen) {    endIndex=srclen;  }  int sublen=sub.length();  if (sublen == 0) {    return startIndex > srclen ? srclen : startIndex;  }  sub=sub.toLowerCase();  int total=endIndex - sublen + 1;  char c=sub.charAt(0);  mainloop:   for (int i=startIndex; i < total; i++) {    if (Character.toLowerCase(src.charAt(i)) != c) {      continue;    }    int j=1;    int k=i + 1;    while (j < sublen) {      char source=Character.toLowerCase(src.charAt(k));      if (sub.charAt(j) != source) {        continue mainloop;      }      j++;      k++;    }    return i;  }  return -1;}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public final Flux<T> repeat(BooleanSupplier predicate){  return onAssembly(new FluxRepeatPredicate<>(this,predicate));}  }
class C{  public static String join(Object[] elements,String glue){  return (join(Arrays.asList(elements),glue));}  }
class C{  @Override public void validate(Map<String,Object> processVariables,Map<String,String> userParameter) throws AbortException {  final Date dueDate=(Date)processVariables.get(IGenericProcess.VAR_DUEDATE);  final int reminderDays=(Integer)processVariables.get(IIndividualProcess.VAR_REMINDER_DAYS);  final Date reminderDate=getReminderDate(dueDate,reminderDays);  final Calendar now=Calendar.getInstance();  if (reminderDate.after(now.getTime())) {    throw new AbortException("Reminder date is in the future.");  }}  }
class C{  private boolean isJsFile(URI uri){  ResourceType resourceType=ResourceType.getResourceType(uri);  return (resourceType.equals(ResourceType.JS));}  }
class C{  private void initStaticResourcesProductionFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering static resources production Filter");  FilterRegistration.Dynamic staticResourcesProductionFilter=servletContext.addFilter("staticResourcesProductionFilter",new StaticResourcesProductionFilter());  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/");  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/index.html");  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/assets/*");  staticResourcesProductionFilter.addMappingForUrlPatterns(disps,true,"/scripts/*");  staticResourcesProductionFilter.setAsyncSupported(true);}  }
class C{  public MultiUserChat inviteRoom(String number,String contact,int mode) throws Exception {  MultiUserChat muc;  if (!mRooms.containsKey(number)) {    Log.i("No existing chat room with " + contact + ". Creating a new one...");    muc=createRoom(number,contact,mode);    mRooms.put(number,muc);  } else {    muc=mRooms.get(number);    Log.i("Opening existing room for " + contact);    if (muc != null) {      Collection<Occupant> occupants=muc.getParticipants();      for (      Occupant occupant : occupants) {        Log.d(occupant.getJid() + " already in the room");      }      for (      String notifiedAddress : mSettings.getNotifiedAddresses().getAll()) {        boolean found=false;        for (        Occupant occupant : occupants) {          if (occupant.getJid().startsWith(notifiedAddress + "/")) {            found=true;            break;          }        }        if (!found) {          Log.d("Inviting notified address '" + notifiedAddress + "' in the room for "+ contact);          muc.invite(notifiedAddress,"SMS conversation with " + contact);        }      }    }  }  return muc;}  }
class C{  private void displayBriefWatchedBuilds(final TFSTeamProjectCollection connection,final String teamProject){  Check.notNull(connection,"connection");  Check.notNullOrEmpty(teamProject,"teamProject");  final BuildStatusCache cache=BuildStatusCache.load(connection);  final List<Integer> watchedBuildIDs=cache.getBuilds();  if (watchedBuildIDs.size() == 0) {    getDisplay().printLine(Messages.getString("CommandReconcile.NoWatchedCheckins"));    return;  }  final int[] queryIDs=new int[watchedBuildIDs.size()];  for (int i=0; i < watchedBuildIDs.size(); i++) {    queryIDs[i]=watchedBuildIDs.get(i);  }  final IQueuedBuild[] queuedBuilds=connection.getBuildServer().getQueuedBuild(queryIDs,QueryOptions.NONE);  final List<Integer> missingBuildsIDs=new ArrayList<Integer>();  for (int i=0; i < queuedBuilds.length; i++) {    if (queuedBuilds[i] == null || queuedBuilds[i].getID() == 0) {      missingBuildsIDs.add(queryIDs[i]);    }  }  if (missingBuildsIDs.size() > 0) {    for (int i=0; i < missingBuildsIDs.size(); i++) {      cache.removeBuild(missingBuildsIDs.get(i));    }    cache.save(connection);  }  Arrays.sort(queuedBuilds);  if (BuildPrinter.printQueuedBuilds(queuedBuilds,connection.getBuildServer(),defaultFormat,getDisplay()) == 0) {    getDisplay().printLine(Messages.getString("CommandReconcile.NoBuildsForWatchedCheckins"));  }}  }
class C{  public void updateUi(){  CredentialedUser activeUser=Services.getLoginService().getActiveUser();  if (activeUser == null) {    myPresentation.setText(SIGN_IN_MESSAGE);    myPresentation.setDescription(SIGN_IN_MESSAGE);    myPresentation.setIcon(GoogleLoginIcons.DEFAULT_USER_AVATAR);  } else {    myPresentation.setText(activeUser.getEmail());    myPresentation.setDescription(activeUser.getEmail());    Image image=activeUser.getPicture();    if (image == null) {      myPresentation.setIcon(GoogleLoginIcons.DEFAULT_USER_AVATAR);    } else {      Image scaledImage=image.getScaledInstance(16,16,Image.SCALE_SMOOTH);      myPresentation.setIcon(new ImageIcon(scaledImage));    }  }}  }
class C{  public static void writeJUnitTestSuite(TestSuiteWriter writer){  logger.info("Writing {} failing tests",violations.size());  ContractChecker.setActive(false);  TestCaseExecutor.getInstance().newObservers();  for (int i=0; i < violations.size(); i++) {    logger.debug("Writing test {}/{}",i,violations.size());    ContractViolation violation=violations.get(i);    violation.minimizeTest();    TestCase test=violation.getTestCase();    test.addContractViolation(violation);    writer.insertTest(test," Contract violation: " + violation.getContract().toString());  }}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.HEX_LITERAL;}  }
class C{  @Override public final void addAttribute(String name,String value){  if (name.equals("idref")) {    this.idref=value;  } else   if (name.equals("field")) {    this.field=value;  } else   if (name.equals("index")) {    this.index=Integer.valueOf(value);    addArgument(this.index);  } else   if (name.equals("property")) {    this.property=value;  } else   if (name.equals("method")) {    this.method=value;  } else {    super.addAttribute(name,value);  }}  }
class C{  @PostConstruct public void init(){  getFilterTargetsStatusLayout();  restorePreviousState();  eventBus.subscribe(this);}  }
class C{  public OpenInWindowAction(final Window parent,final IViewContainer container,final INaviView[] views,final CGraphWindow graphWindow){  super(createTitle(graphWindow));  parentWindow=Preconditions.checkNotNull(parent,"IE02380: parent argument can not be null");  viewContainer=Preconditions.checkNotNull(container,"IE02381: container argument can not be null");  this.views=Preconditions.checkNotNull(views.clone(),"Error: views.clone() argument can not be null");  this.graphWindow=Preconditions.checkNotNull(graphWindow,"IE02382: graphWindow argument can not be null");}  }
class C{  private static OFAction decode_set_dst_port(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((?:0x)?\\d+)").matcher(actionToDecode);  if (n.matches()) {    if (n.group(1) != null) {      try {        TransportPort portnum=TransportPort.of(get_short(n.group(1)));        OFActionSetTpDst.Builder ab=OFFactories.getFactory(version).actions().buildSetTpDst();        ab.setTpPort(portnum);        log.debug("action {}",ab.build());        return ab.build();      } catch (      NumberFormatException e) {        log.debug("Invalid dst-port in: {} (error ignored)",actionToDecode);        return null;      }    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  private void displayEvent(int resourceId){  textView.append(context.getString(resourceId));  textView.append("\n");}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public IgfsBlockKey(IgniteUuid fileId,@Nullable IgniteUuid affKey,boolean evictExclude,long blockId){  assert fileId != null;  assert blockId >= 0;  this.fileId=fileId;  this.affKey=affKey;  this.evictExclude=evictExclude;  this.blockId=blockId;}  }
class C{  public String sendInvitationHash(String SID,String username,String message,String baseurl,String email,String subject,Long room_id,String conferencedomain,Boolean isPasswordProtected,String invitationpass,Integer valid,String validFromDate,String validFromTime,String validToDate,String validToTime,Long language_id,Boolean sendMail) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      Date dFrom=null;      Date dTo=null;      if (valid == 2) {        Integer validFromHour=Integer.valueOf(validFromTime.substring(0,2)).intValue();        Integer validFromMinute=Integer.valueOf(validFromTime.substring(3,5)).intValue();        Integer validToHour=Integer.valueOf(validToTime.substring(0,2)).intValue();        Integer validToMinute=Integer.valueOf(validToTime.substring(3,5)).intValue();        log.info("validFromHour: " + validFromHour);        log.info("validFromMinute: " + validFromMinute);        Date fromDate=CalendarPatterns.parseDate(validFromDate);        Date toDate=CalendarPatterns.parseDate(validToDate);        Calendar calFrom=Calendar.getInstance();        calFrom.setTime(fromDate);        calFrom.set(calFrom.get(Calendar.YEAR),calFrom.get(Calendar.MONTH),calFrom.get(Calendar.DATE),validFromHour,validFromMinute,0);        Calendar calTo=Calendar.getInstance();        calTo.setTime(toDate);        calTo.set(calTo.get(Calendar.YEAR),calTo.get(Calendar.MONTH),calTo.get(Calendar.DATE),validToHour,validToMinute,0);        dFrom=calFrom.getTime();        dTo=calTo.getTime();        log.info("validFromDate: " + CalendarPatterns.getDateWithTimeByMiliSeconds(dFrom));        log.info("validToDate: " + CalendarPatterns.getDateWithTimeByMiliSeconds(dTo));      }      Invitations invitation=invitationManagement.addInvitationLink(user_level,username,message,baseurl,email,subject,room_id,"",isPasswordProtected,invitationpass,valid,dFrom,dTo,users_id,baseurl,language_id,sendMail,dFrom,dTo,null,username);      if (invitation != null) {        return invitation.getHash();      } else {        return "Sys - Error";      }    } else {      return "Need Admin Privileges to perfom the Action";    }  } catch (  Exception err) {    log.error("[sendInvitationHash] ",err);    throw new AxisFault(err.getMessage());  }}  }
class C{  private void checkWritePermission() throws sernet.gs.service.SecurityException {  boolean isWritePermission=getRightsServerHandler().isEnabled(getAuthService().getUsername(),ActionRightIDs.EDITPROFILE);  if (!isWritePermission) {    throw new SecurityException("User " + getAuthService().getUsername() + " has no permission to write authorization configuration.");  }}  }
class C{  static private String attrib(final String s){  return HTMLUtility.escapeForXHTML(s);}  }
class C{  public void plot(AbstractDrawer draw){  if (!visible)   return;  draw.setColor(color);  draw.setFont(font);  draw.setBaseOffset(base_offset);  draw.setTextOffset(cornerE,cornerN);  draw.setTextAngle(angle);  draw.drawString(label,coord[0],coord[1]);  draw.setBaseOffset(null);}  }
class C{  public void test_putGet(){  final List<IBindingSet[]> in=new LinkedList<IBindingSet[]>();{    final List<IBindingSet> t=new LinkedList<IBindingSet>();    t.add(new ListBindingSet());    in.add(t.toArray(new IBindingSet[0]));  }  final String solutionSet=getName();  try {    solutionSetsManager.getSolutions(solutionSet);    fail("Expecting: " + IllegalStateException.class);  } catch (  IllegalStateException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }  assertFalse(solutionSetsManager.existsSolutions(solutionSet));  solutionSetsManager.putSolutions(solutionSet,new CloseableIteratorWrapper<IBindingSet[]>(in.iterator()));  assertTrue(solutionSetsManager.existsSolutions(solutionSet));  final ICloseableIterator<IBindingSet[]> out=solutionSetsManager.getSolutions(solutionSet);  assertSameSolutionsAnyOrder(flatten(in.iterator()),out);}  }
class C{  public void testGetCodebasePathWithDirectory() throws Exception {  String folder="/foo/bar";  File fileFolder=new File(folder);  File copyLocation=new File("/tmp/copy");  expectDirCopy(fileFolder,copyLocation);  control.replay();  File newPath=creator.getCodebasePath(fileFolder);  control.verify();  assertEquals(newPath,copyLocation);}  }
class C{  public static boolean isNotEmpty(byte[] array){  return (array != null && array.length != 0);}  }
class C{  void reset(){  offset=intLen=0;}  }
class C{  private NumericSummaryTable(String name){  super(name);}  }
class C{  public synchronized boolean tryLock(){  try {    lock=file.tryLock();    return lock != null;  } catch (  Exception e) {    return false;  }}  }
class C{  public VmSchedulerSpaceShared(List<? extends Pe> pelist){  super(pelist);  setPeAllocationMap(new HashMap<String,List<Pe>>());  setFreePes(new ArrayList<Pe>());  getFreePes().addAll(pelist);}  }
class C{  public boolean writeToNode(Short nodeId,SyncMessage bsm) throws InterruptedException {  if (nodeId == null)   return false;  NodeConnection nc=connections.get(nodeId);  if (nc != null && nc.state == NodeConnectionState.CONNECTED) {    waitForMessageWindow(bsm.getType(),nodeId,0);    nc.nodeChannel.write(bsm);    return true;  }  return false;}  }
class C{  public Matrix4d translationRotate(double tx,double ty,double tz,Quaterniondc quat){  return translationRotate(tx,ty,tz,quat.x(),quat.y(),quat.z(),quat.w());}  }
class C{  public static IOException create(IOException exn){  return create(exn.getMessage(),exn);}  }
class C{  public Fields(Collection<String> fields){  this.fields=Sets.newHashSet();  for (  String field : fields) {    Preconditions.checkNotNull(field);    if (!this.fields.add(field)) {      throw new IllegalArgumentException("Duplicate field: " + field);    }  }  fieldsList=Lists.newArrayList();  fieldsList.addAll(fields);}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {  try {    issetBitfield=0;    read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));  } catch (  org.apache.thrift.TException te) {    throw new java.io.IOException(te);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.SDEFINITION__TKEY:    return basicSetTkey(null,msgs);case GamlPackage.SDEFINITION__ARGS:  return basicSetArgs(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @AndroidOnly("The RI doesn't throw the IllegalStateException.") public void test_wrap_05() throws SSLException {  String host="new host";  int port=8080;  ByteBuffer bb=ByteBuffer.allocate(10);  ByteBuffer[] bbA={ByteBuffer.allocate(5),ByteBuffer.allocate(10),ByteBuffer.allocate(5)};  SSLEngine sse=getEngine(host,port);  try {    sse.wrap(bbA,0,bbA.length,bb);    fail("IllegalStateException wasn't thrown");  } catch (  IllegalStateException iobe) {  }}  }
class C{  protected boolean checkDrawerItem(int position,boolean includeOffset){  return getAdapter().getItem(position) != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:29.005 -0500",hash_original_method="F0DB4D0E841E14FF88BA6095928288BF",hash_generated_method="694195C523131C2F5C607CBD71DBBD1C") protected void fireTimeoutTimer(){  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("fireTimeoutTimer " + this);  SIPDialog dialog=(SIPDialog)this.getDialog();  if (TransactionState.CALLING == this.getState() || TransactionState.TRYING == this.getState() || TransactionState.PROCEEDING == this.getState()) {    if (dialog != null && (dialog.getState() == null || dialog.getState() == DialogState.EARLY)) {      if (((SIPTransactionStack)getSIPStack()).isDialogCreated(this.getOriginalRequest().getMethod())) {        dialog.delete();      }    } else     if (dialog != null) {      if (getOriginalRequest().getMethod().equalsIgnoreCase(Request.BYE) && dialog.isTerminatedOnBye()) {        dialog.delete();      }    }  }  if (TransactionState.COMPLETED != this.getState()) {    raiseErrorEvent(SIPTransactionErrorEvent.TIMEOUT_ERROR);    if (this.getOriginalRequest().getMethod().equalsIgnoreCase(Request.CANCEL)) {      SIPClientTransaction inviteTx=(SIPClientTransaction)this.getOriginalRequest().getInviteTransaction();      if (inviteTx != null && ((inviteTx.getState() == TransactionState.CALLING || inviteTx.getState() == TransactionState.PROCEEDING)) && inviteTx.getDialog() != null) {        inviteTx.setState(TransactionState.TERMINATED);      }    }  } else {    this.setState(TransactionState.TERMINATED);  }}  }
class C{  public static CFMetaData newIndexMetadata(CFMetaData parent,ColumnDefinition info,CellNameType indexComparator){  CachingOptions indexCaching=parent.getCaching().keyCache.isEnabled() ? CachingOptions.KEYS_ONLY : CachingOptions.NONE;  return new CFMetaData(parent.ksName,parent.indexColumnFamilyName(info),ColumnFamilyType.Standard,indexComparator,parent.cfId).keyValidator(info.type).readRepairChance(0.0).dcLocalReadRepairChance(0.0).gcGraceSeconds(0).caching(indexCaching).speculativeRetry(parent.speculativeRetry).compactionStrategyClass(parent.compactionStrategyClass).compactionStrategyOptions(parent.compactionStrategyOptions).reloadSecondaryIndexMetadata(parent).rebuild();}  }
class C{  @Override public int indexOf(Object object){  return indexOf(object,0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:04.339 -0500",hash_original_method="ACD81E1C335918B4D3E2AA9EB254701A",hash_generated_method="67ECC52E4669912A58872E8365B7F8B6") public static Sampler WRAP_LINEAR(RenderScript rs){  if (rs.mSampler_WRAP_LINEAR == null) {    Builder b=new Builder(rs);    b.setMinification(Value.LINEAR);    b.setMagnification(Value.LINEAR);    b.setWrapS(Value.WRAP);    b.setWrapT(Value.WRAP);    rs.mSampler_WRAP_LINEAR=b.create();  }  return rs.mSampler_WRAP_LINEAR;}  }
class C{  public final int bytesProduced(){  return bytesProduced;}  }
class C{  public void flush(Collection areas){}  }
class C{  public long priority(){  return Long.parseLong(fields[17]);}  }
class C{  public boolean isShowMatch(){  return showMatch;}  }
class C{  public static String supports(final MultiProtocolURL url,final String mimeType){  try {    final Set<Parser> idioms=parsers(url,mimeType);    return (idioms == null || idioms.isEmpty() || (idioms.size() == 1 && idioms.iterator().next().getName().equals(genericIdiom.getName()))) ? "no parser found" : null;  } catch (  final Parser.Failure e) {    return e.getMessage();  }}  }
class C{  @Inject public MainMenuPresenter(MainMenuView view){  this.view=view;  this.view.setDelegate(this);}  }
class C{  public static Number power(BigDecimal self,Integer exponent){  if (exponent >= 0) {    return self.pow(exponent);  } else {    return power(self,(double)exponent);  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (XString)getArg0AsString(xctxt);}  }
class C{  public DoubleMatrix(IDoubleMatrix matrix){  this(matrix.getRowNum(),matrix.getColNum());  for (int i=0; i < getRowNum(); ++i) {    for (int j=0; j < mNumCols; ++j) {      mValues[i][j]=matrix.get(i,j);    }  }}  }
class C{  public static void registerMediaProvider(IMediaProvider handler){  findCC();  if (computerCraft_registerMediaProvider != null) {    try {      computerCraft_registerMediaProvider.invoke(null,handler);    } catch (    Exception e) {    }  }}  }
class C{  private void parallelStream(){  Optional<Integer> sumOfTrades=trades.stream().parallel().filter(null).peek(null).map(null).peek(null).reduce(null);  System.out.println(sumOfTrades.get());}  }
class C{  public void removeRpcClient(RpcClient rpcClient){  clientNameMap.remove(rpcClient.getChannelName());}  }
class C{  public NumberIterator(PrimitiveIterator<?,?> it){  this.it=it;}  }
class C{  public static void selectionSort(int[] arr){  if (arr.length < 2) {    return;  }  int minIndex=0;  int minVal=0;  for (int j=0; j < (arr.length - 1); j++) {    printArray(arr);    minIndex=j;    minVal=arr[j];    for (int k=j + 1; k < arr.length; k++) {      if (arr[k] < minVal) {        minVal=arr[k];        minIndex=k;      }    }    swap(arr,j,minIndex);  }}  }
class C{  public int position(){  assert position >= 0 : "Unbound label is being referenced";  return position;}  }
class C{  public static boolean usefulAsDigits(CharSequence cons){  int len=cons.length();  for (int i=0; i < len; i++) {    char c=cons.charAt(i);    if ((c >= '0') && (c <= '9')) {      continue;    }    if ((c == ' ') || (c == '-') || (c == '(')|| (c == ')')|| (c == '.')|| (c == '+')|| (c == '#')|| (c == '*')) {      continue;    }    if ((c >= 'A') && (c <= 'Z')) {      continue;    }    if ((c >= 'a') && (c <= 'z')) {      continue;    }    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:21.094 -0400",hash_original_method="032AFDBA296A046117454F423BB945D1",hash_generated_method="7F8B3EEF4781D43E5E6F8D938583981A") public ArrayMap(SimpleArrayMap map){  super(map);}  }
class C{  public ScreenVideo(){  this.reset();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.408 -0400",hash_original_method="3F3AC95312B5654C0814A8467CCF30BD",hash_generated_method="D4FF79C88CCE8D165C3E5C57E5D65683") public static void writeSwappedInteger(byte[] data,int offset,int value){  data[offset + 0]=(byte)((value >> 0) & 0xff);  data[offset + 1]=(byte)((value >> 8) & 0xff);  data[offset + 2]=(byte)((value >> 16) & 0xff);  data[offset + 3]=(byte)((value >> 24) & 0xff);}  }
class C{  public void doCut(){  if (hexEditControl == null)   return;  hexEditControl.cut();}  }
class C{  public static boolean isNestedThrowable(Throwable throwable){  if (throwable == null) {    return false;  }  if (throwable instanceof Nestable) {    return true;  } else   if (throwable instanceof SQLException) {    return true;  } else   if (throwable instanceof InvocationTargetException) {    return true;  } else   if (isThrowableNested()) {    return true;  }  Class cls=throwable.getClass();  for (int i=0, isize=CAUSE_METHOD_NAMES.length; i < isize; i++) {    try {      Method method=cls.getMethod(CAUSE_METHOD_NAMES[i],null);      if (method != null && Throwable.class.isAssignableFrom(method.getReturnType())) {        return true;      }    } catch (    NoSuchMethodException ignored) {    }catch (    SecurityException ignored) {    }  }  try {    Field field=cls.getField("detail");    if (field != null) {      return true;    }  } catch (  NoSuchFieldException ignored) {  }catch (  SecurityException ignored) {  }  return false;}  }
class C{  public String nextUploadIdMarker(){  return nextUploadIdMarker;}  }
class C{  private static void walkInfix(int precedence,ExpressionTree expression,List<ExpressionTree> operands,List<String> operators){  if (expression instanceof BinaryTree) {    BinaryTree binaryTree=(BinaryTree)expression;    if (precedence(binaryTree) == precedence) {      walkInfix(precedence,binaryTree.getLeftOperand(),operands,operators);      operators.add(operatorName(expression));      walkInfix(precedence,binaryTree.getRightOperand(),operands,operators);    } else {      operands.add(expression);    }  } else {    operands.add(expression);  }}  }
class C{  final boolean indexesDeletedNode(){  return node.value == null;}  }
class C{  @Override public int compare(String lKey,String rKey){  int lCat=categoryOf(lKey);  int catDiff=lCat - categoryOf(rKey);  if (catDiff != 0 || lCat != 0) {    return catDiff;  }  return lKey.compareTo(rKey);}  }
class C{  public int remaining(){  return _limit - _readerIndex;}  }
class C{  public boolean loadModule(IModule module){  Class<? extends IModule> clazz=module.getClass();  if (clazz.isAnnotationPresent(Requires.class)) {    Requires annotation=clazz.getAnnotation(Requires.class);    if (!hasDependency(loadedModules,annotation.value())) {      return false;    }  }  boolean enabled=module.enable(client);  if (enabled) {    client.getDispatcher().registerListener(module);    if (!loadedModules.contains(module))     loadedModules.add(module);    client.getDispatcher().dispatch(new ModuleEnabledEvent(module));  }  return true;}  }
class C{  public StandardXYItemLabelGenerator(String formatString,NumberFormat xFormat,NumberFormat yFormat){  super(formatString,xFormat,yFormat);}  }
class C{  protected void dumpService(){synchronized (this.tokens) {    StringBuffer buffer=new StringBuffer();    buffer.append("  ").append(this.tokens.size()).append(" tokens, ");    buffer.append(numLocksHeldInThisVM()).append(" locks held\n");    for (Iterator iter=this.tokens.entrySet().iterator(); iter.hasNext(); ) {      Map.Entry entry=(Map.Entry)iter.next();      buffer.append("    ").append(entry.getKey()).append(": ");      DLockToken token=(DLockToken)entry.getValue();      buffer.append(token.toString()).append("\n");    }    logger.info(LogMarker.DLS,LocalizedMessage.create(LocalizedStrings.ONE_ARG,buffer));  }}  }
class C{  private void updateUi(){  int index=mCurrentPage.getIndex();  int pageCount=mPdfRenderer.getPageCount();  mButtonPrevious.setEnabled(0 != index);  mButtonNext.setEnabled(index + 1 < pageCount);  getActivity().setTitle(getString(R.string.app_name_with_index,index + 1,pageCount));}  }
class C{  private static void listTables() throws IOException {  View.header("Listing My Tables");  Fusiontables.Table.List listTables=fusiontables.table().list();  TableList tablelist=listTables.execute();  if (tablelist.getItems() == null || tablelist.getItems().isEmpty()) {    System.out.println("No tables found!");    return;  }  for (  Table table : tablelist.getItems()) {    View.show(table);    View.separator();  }}  }
class C{  public ByteArrayClassLoader(Map<String,byte[]> classes){  this.classes=classes;}  }
class C{  public void endApplyInterval(){  endMillis=System.currentTimeMillis();  totalApplyMillis+=(endMillis - intervalStartMillis);  state=TaskState.other;}  }
class C{  public String decryptAttributeValue(String encrypted) throws PwmUnrecoverableException, PwmOperationalException {  final PwmBlockAlgorithm pwmBlockAlgorithm=figureBlockAlg();  final PwmSecurityKey pwmSecurityKey=pwmApplication.getConfig().getSecurityKey();  return SecureEngine.decryptStringValue(encrypted,pwmSecurityKey,pwmBlockAlgorithm);}  }
class C{  public AuthenticationClassRefAuthority(final String auth){  this.authority=auth;}  }
class C{  public void deposit(double amount){  balance+=amount;}  }
class C{  @SuppressWarnings("unchecked") @Test public void testGetJobsGivenMultipleHistoricProcessInstanceWithSamKeyJobAssertReturnCompletedJob() throws Exception {  String namespace="namespace";  String jobName="jobName";  JobStatusEnum jobStatus=JobStatusEnum.COMPLETED;  Set<String> authorizedNamespaces=new HashSet<>(Arrays.asList(namespace));  when(namespaceSecurityHelper.getAuthorizedNamespaces(any())).thenReturn(authorizedNamespaces);  NamespaceEntity namespaceEntity=new NamespaceEntity();  namespaceEntity.setCode(namespace);  when(namespaceDao.getNamespaceByCd(any())).thenReturn(namespaceEntity);  List<JobDefinitionEntity> jobDefinitionEntities=new ArrayList<>();  JobDefinitionEntity jobDefinitionEntity1=new JobDefinitionEntity();  jobDefinitionEntity1.setActivitiId(namespace + "." + jobName+ ":1"+ ":1");  jobDefinitionEntities.add(jobDefinitionEntity1);  when(jobDefinitionDao.getJobDefinitionsByFilter(any(Collection.class),any())).thenReturn(jobDefinitionEntities);  ProcessDefinition processDefinition=mock(ProcessDefinition.class);  when(processDefinition.getId()).thenReturn("a.b:1:1");  when(processDefinition.getKey()).thenReturn("a.b");  when(activitiService.getProcessDefinitionsByIds(any())).thenReturn(asList(processDefinition));  when(activitiService.getHistoricProcessInstancesCountByStatusAndProcessDefinitionKeys(any(),any(),any(),any())).thenReturn(1l);  List<HistoricProcessInstance> historicProcessInstances=new ArrayList<>();{    HistoricProcessInstanceEntity historicProcessInstanceEntity1=new HistoricProcessInstanceEntity();    historicProcessInstanceEntity1.setId("historicProcessInstanceEntity1.id");    historicProcessInstanceEntity1.setProcessDefinitionId("a.b:1:1");    historicProcessInstanceEntity1.setStartTime(new Date(1234));    historicProcessInstanceEntity1.setEndTime(new Date(2345));    historicProcessInstances.add(historicProcessInstanceEntity1);  }{    HistoricProcessInstanceEntity historicProcessInstanceEntity1=new HistoricProcessInstanceEntity();    historicProcessInstanceEntity1.setId("historicProcessInstanceEntity2.id");    historicProcessInstanceEntity1.setProcessDefinitionId("a.b:1:2");    historicProcessInstanceEntity1.setStartTime(new Date(1234));    historicProcessInstanceEntity1.setEndTime(new Date(2345));    historicProcessInstances.add(historicProcessInstanceEntity1);  }  when(activitiService.getHistoricProcessInstancesByStatusAndProcessDefinitionKeys(any(),any(),any(),any())).thenReturn(historicProcessInstances);  JobSummaries getJobsResult=jobServiceImpl.getJobs(namespace,jobName,jobStatus,NO_START_TIME,NO_END_TIME);  List<JobSummary> jobSummaries=getJobsResult.getJobSummaries();  assertEquals(1,jobSummaries.size());}  }
class C{  public PlainInsn(Rop opcode,SourcePosition position,RegisterSpec result,RegisterSpec source){  this(opcode,position,result,RegisterSpecList.make(source));}  }
class C{  public Symbol attribIdent(JCTree tree,JCCompilationUnit topLevel){  Env<AttrContext> localEnv=enter.topLevelEnv(topLevel);  localEnv.enclClass=make.ClassDef(make.Modifiers(0),syms.errSymbol.name,null,null,null,null);  localEnv.enclClass.sym=syms.errSymbol;  return tree.accept(identAttributer,localEnv);}  }
class C{  public static String encodeBytes(byte[] source){  return encodeBytes(source,0,source.length);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.876 -0400",hash_original_method="F5C83CF250DCCF28D9ECDE5C9BEDB4A9",hash_generated_method="C3F6099E3ABAC199B76C8718A61CACE3") public static IOFileFilter falseFileFilter(){  return FalseFileFilter.FALSE;}  }
class C{  private static void checkArgReferences(String typeSnippet,int numberOfArgs){  Matcher argRefMatcher=ARG_REF_PATTERN.matcher(typeSnippet);  while (argRefMatcher.find()) {    int index=Integer.parseInt(argRefMatcher.group(1),10) - 1;    Preconditions.checkArgument(index >= 0,"%s not allowed, indices start at 1",argRefMatcher.group(0));    Preconditions.checkArgument(index < numberOfArgs,"%s too large for number of provided type mirrors",argRefMatcher.group(0));  }}  }
class C{  public String toString(){  return "appId:" + this.appId + "\tflowPath:"+ this.flowPath+ "\tflowExecId:"+ this.flowExecId+ "\tjobname:"+ this.jobName;}  }
class C{  public static String toString(InputStream input,Charset encoding) throws IOException {  StringWriter sw=new StringWriter();  copy(input,sw,encoding);  return sw.toString();}  }
class C{  public static void ILOAD_0(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.ILOAD_0();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public static void nullMappedClass(String className){  throw new NullMappedClassException(MSG.INSTANCE.message(nullMappedClassException1,className));}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("MinExpiresParser.parse");  MinExpires minExpires=new MinExpires();  try {    headerName(TokenTypes.MIN_EXPIRES);    minExpires.setHeaderName(SIPHeaderNames.MIN_EXPIRES);    String number=this.lexer.number();    try {      minExpires.setExpires(Integer.parseInt(number));    } catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }catch (    NumberFormatException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    this.lexer.match('\n');    return minExpires;  }  finally {    if (debug)     dbg_leave("MinExpiresParser.parse");  }}  }
class C{  private boolean parametersMatch(TypeReference[] lhs,Class<?>[] rhs){  if (rhs == null)   return lhs.length == 0;  if (lhs.length != rhs.length)   return false;  for (int i=0, n=lhs.length; i < n; ++i) {    if (rhs[i] == null)     return false;    if (lhs[i].resolve() != rhs[i].type) {      return false;    }  }  return true;}  }
class C{  public void remove(String key) throws MqttPersistenceException {  checkIsOpen();  File file=new File(clientDir,key + MESSAGE_FILE_EXTENSION);  if (file.exists()) {    file.delete();  }}  }
class C{  public static void shutdown(){  LogManager mgr=LogManager.getLogManager();  mgr.reset();}  }
class C{  @CanIgnoreReturnValue public Builder<K,V> putAll(RangeMap<K,? extends V> rangeMap){  for (  Entry<Range<K>,? extends V> entry : rangeMap.asMapOfRanges().entrySet()) {    put(entry.getKey(),entry.getValue());  }  return this;}  }
class C{  private void captureFacet(List<TreeNode> tree,int parent,String name,UIComponent c){  if (!c.isTransient() && !c.getAttributes().containsKey(DYNAMIC_COMPONENT)) {    FacetNode n=new FacetNode(parent,name,c);    int pos=tree.size();    tree.add(n);    captureRest(tree,pos,c);  }}  }
class C{  public static void randomNumber(int[] num,int n){  for (int j=0; j < n; j++) {    num[j]=(int)(Math.random() * 10);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (character: ");  result.append(character);  result.append(", sequence: ");  result.append(sequence);  result.append(')');  return result.toString();}  }
class C{  public void normalize(){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);}  }
class C{  private static boolean decodeIpv4Suffix(String input,int pos,int limit,byte[] address,int addressOffset){  int b=addressOffset;  for (int i=pos; i < limit; ) {    if (b == address.length) {      return false;    }    if (b != addressOffset) {      if (input.charAt(i) != '.') {        return false;      }      i++;    }    int value=0;    int groupOffset=i;    for (; i < limit; i++) {      char c=input.charAt(i);      if (c < '0' || c > '9') {        break;      }      if (value == 0 && groupOffset != i) {        return false;      }      value=(value * 10) + c - '0';      if (value > 255) {        return false;      }    }    int groupLength=i - groupOffset;    if (groupLength == 0) {      return false;    }    address[b++]=(byte)value;  }  if (b != addressOffset + 4) {    return false;  }  return true;}  }
class C{  public boolean isEmpty(){  return shapes == null ? true : shapes.isEmpty();}  }
class C{  public static final int mixMagic(int magic1,int magic2){  final long prime=2654435761L;  long result=1;  result=prime * result + magic1;  result=prime * result + magic2;  return (int)result;}  }
class C{  public EntityQuery select(String... fields){  this.fieldsToSelect=UtilMisc.toSetArray(fields);  return this;}  }
class C{  public void trackPageViewFromReferrer(String argPageURL,String argPageTitle,String argHostName,String argReferrerSite,String argReferrerPage){  if (argPageURL == null)   throw new IllegalArgumentException("Page URL cannot be null, Google will not track the data.");  AnalyticsRequestData data=new AnalyticsRequestData();  data.setHostName(argHostName);  data.setPageTitle(argPageTitle);  data.setPageURL(argPageURL);  data.setReferrer(argReferrerSite,argReferrerPage);  makeCustomRequest(data);}  }
class C{  public void endVisit(TypeDeclaration node){}  }
class C{  void showDetails(int index){  mCurCheckPosition=index;  if (mDualPane) {    getListView().setItemChecked(index,true);    DetailsFragment details=(DetailsFragment)getFragmentManager().findFragmentById(R.id.details);    if (details == null || details.getShownIndex() != index) {      details=DetailsFragment.newInstance(index);      FragmentTransaction ft=getFragmentManager().beginTransaction();      if (index == 0) {        ft.replace(R.id.details,details);      } else {        ft.replace(R.id.a_item,details);      }      ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);      ft.commit();    }  } else {    Intent intent=new Intent();    intent.setClass(getActivity(),DetailsActivity.class);    intent.putExtra("index",index);    startActivity(intent);  }}  }
class C{  public boolean hasString(){  return true;}  }
class C{  @Override public boolean supportsVariables(){  return SUPPORTS_VARIABLES;}  }
class C{  protected synchronized void releaseLock(String lockName,boolean fromSynchronization) throws LockException {  lockName=lockName.intern();  if (isLockOwner(null,lockName)) {    if (fromSynchronization == false) {      Transaction t=getTransaction();      if (t != null) {        if (getLog().isDebugEnabled()) {          getLog().debug("Lock '" + lockName + "' is in a JTA transaction.  "+ "Return deferred by: "+ Thread.currentThread().getName());        }        return;      }    }    if (getLog().isDebugEnabled()) {      getLog().debug("Lock '" + lockName + "' returned by: "+ Thread.currentThread().getName());    }    getThreadLocks().remove(lockName);    locks.remove(lockName);    this.notify();  } else   if (getLog().isDebugEnabled()) {    getLog().debug("Lock '" + lockName + "' attempt to return by: "+ Thread.currentThread().getName()+ " -- but not owner!",new Exception("stack-trace of wrongful returner"));  }}  }
class C{  public Collection<String> removeTerminatedNodes(){  if (nodes.isEmpty()) {    return null;  }  Set<String> removedGraph=new HashSet<>();  Iterator<Node> nodeIterator=nodes.values().iterator();  Node node;  Boolean bool1;  boolean remove;  while (nodeIterator.hasNext()) {    node=nodeIterator.next();    if (node.isReference()) {      Node n;      remove=true;      for (      Edge edge : node.connectionsRef) {        n=nodes.get(edge.from);        if (n == null) {          continue;        }        bool1=n.isCancelled();        if (bool1 == null || !bool1) {          remove=false;          break;        }        bool1=n.isTerminated();        if (bool1 == null || !bool1) {          remove=false;          break;        }      }    } else {      bool1=node.isTerminated();      remove=bool1 != null && bool1;      if (!remove) {        bool1=node.isCancelled();        remove=bool1 != null && bool1;      }      if (!remove) {        remove=node.connectionsRef != null && node.connectionsRef.length == 0;      }    }    if (remove) {      nodeIterator.remove();      removedGraph.add("\"" + node.getId() + "\"");    }  }  return removedGraph;}  }
class C{  public boolean isNamespaceNode(Node n){  if (Node.ATTRIBUTE_NODE == n.getNodeType()) {    String attrName=n.getNodeName();    return (attrName.startsWith("xmlns:") || attrName.equals("xmlns"));  }  return false;}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.191 -0400",hash_original_method="63733D16D58DC994FE5AB34EB7F225B6",hash_generated_method="9B1007311635D1B0D1CFC965C4A091B9") public static List<String> readLines(Reader input) throws IOException {  BufferedReader reader=toBufferedReader(input);  List<String> list=new ArrayList<String>();  String line=reader.readLine();  while (line != null) {    list.add(line);    line=reader.readLine();  }  return list;}  }
class C{  @Override public Iterator<E> iterator(){  ArrayList<E> tmp=new ArrayList<E>(elements);  Collections.reverse(tmp);  return tmp.iterator();}  }
class C{  public static boolean isColorDark(int color){  return ((30 * Color.red(color) + 59 * Color.green(color) + 11 * Color.blue(color)) / 100) <= 130;}  }
class C{  public String downloadUrlToStream(String urlString,OutputStream outputStream){  Malevich.Utils.disableConnectionReuseIfNecessary();  HttpURLConnection urlConnection=null;  BufferedOutputStream out=null;  BufferedInputStream in=null;  String error="";  try {    final URL url=new URL(urlString);    urlConnection=(HttpURLConnection)url.openConnection();    in=new BufferedInputStream(urlConnection.getInputStream(),IO_BUFFER_SIZE);    out=new BufferedOutputStream(outputStream,IO_BUFFER_SIZE);    int b;    while ((b=in.read()) != -1) {      out.write(b);    }    return error;  } catch (  final IOException e) {    Log.e(TAG,"Error in downloadBitmap - " + e);    error="Error in downloadBitmap - " + e.toString();  } finally {    if (urlConnection != null) {      urlConnection.disconnect();    }    try {      if (out != null) {        out.close();      }      if (in != null) {        in.close();      }    } catch (    final IOException e) {    }  }  return error;}  }
class C{  public static boolean validateField(EditText editText,boolean hideErrorLayout){  boolean isValid=UiHelper.isValidField(editText);  TextInputLayout textInputLayout=UiHelper.getTextInputLayout(editText);  if (textInputLayout != null) {    if (isValid) {      textInputLayout.setError(null);      textInputLayout.setErrorEnabled(!hideErrorLayout);    } else {      textInputLayout.setErrorEnabled(true);      textInputLayout.setError(UiHelper.isEmailField(editText) ? editText.getResources().getString(R.string.the_email_not_valid) : editText.getResources().getString(R.string.field_required));    }  }  return isValid;}  }
class C{  @Override public double cardinality(){  double cardinality=0;  try {    cardinality=pcj.getPcjMetadata(accCon,tablename).getCardinality();  } catch (  final PcjException e) {    e.printStackTrace();  }  return cardinality;}  }
class C{  public static boolean isLocationEnabled(Context context){  LocationManager locationManager=(LocationManager)context.getSystemService(Context.LOCATION_SERVICE);  return locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);}  }
class C{  public Vector3 lerpAndSet(Vector3 from,Vector3 to,double amount){  x=from.x + (to.x - from.x) * amount;  y=from.y + (to.y - from.y) * amount;  z=from.z + (to.z - from.z) * amount;  return this;}  }
class C{  public Builder zkServers(String zkServers){  this._zkHost=zkServers;  return this;}  }
class C{  public static String decode(String encodedString){  String decodedString="";  if (encodedString.equals("your_encoded_twitter_key") || encodedString.equals("your_encoded_twitter_secret")) {    return decodedString;  }  byte[] data=Base64.decode(encodedString,Base64.DEFAULT);  try {    decodedString=new String(data,"UTF-8");  } catch (  Exception e) {    Log.d(TAG,"DECODING STRING FAILURE");  }  return decodedString;}  }
class C{  public void fillMask(XRSurfaceData dst){  boolean maskRequired=xrMgr.maskRequired();  boolean maskEvaluated=XRUtils.isMaskEvaluated(xrMgr.compRule);  if (maskRequired && maskEvaluated) {    mainTile.calculateDirtyAreas();    DirtyRegion dirtyArea=mainTile.getDirtyArea().cloneRegion();    mainTile.translate(-dirtyArea.x,-dirtyArea.y);    XRColor maskColor=xrMgr.getMaskColor();    if (dirtyArea.getWidth() <= MASK_SIZE && dirtyArea.getHeight() <= MASK_SIZE) {      compositeSingleTile(dst,mainTile,dirtyArea,maskRequired,0,0,maskColor);    } else {      allocTiles(dirtyArea);      tileRects();      for (int i=0; i < yTiles; i++) {        for (int m=0; m < xTiles; m++) {          MaskTile tile=tileList.get(i * xTiles + m);          int tileStartX=m * MASK_SIZE;          int tileStartY=i * MASK_SIZE;          compositeSingleTile(dst,tile,dirtyArea,maskRequired,tileStartX,tileStartY,maskColor);        }      }    }  } else {    if (xrMgr.isSolidPaintActive()) {      xrMgr.XRRenderRectangles(dst,mainTile.getRects());    } else {      xrMgr.XRCompositeRectangles(dst,mainTile.getRects());    }  }  mainTile.reset();}  }
class C{  static String domainOf(String url){  int start=-1;  if (url.startsWith("//")) {    start=2;  } else {    start=url.indexOf("://");    if (start >= 0) {      start+=3;    }  }  if (start < 0) {    return null;  }  for (int i=0; i < start - 3; ++i) {switch (url.charAt(i)) {case '/':case '?':case '#':      return null;default :    break;}}int end=url.length();for (int i=start; i < end; ++i) {switch (url.charAt(i)) {case '/':case '?':case '#':  end=i;break;default :break;}}if (start < end) {return url.substring(start,end);} else {return null;}}  }
class C{  public QueueConnectionFactory lookupQueueConnectionFactory(String name) throws JMSException, NamingException {  return lookupQueueConnectionFactoryFromJNDI(name == null ? Config.parms.getString("cf") : name);}  }
class C{  private JDBCXYDataset(){  this.rows=new ArrayList();}  }
class C{  public RhythmOverlay inflateOverlay(List<String> configStrings,@NonNull Map<String,String> vars){  return inflateOverlayInternal(configStrings,vars,0);}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Video) {    Video other=(Video)obj;    return Objects.equal(name,other.name) && Objects.equal(url,other.url) && duration == other.duration;  } else {    return false;  }}  }
class C{  @Override public void keyReleased(KeyEvent e){  char[] password1=null;  char[] password2=null;  if (newPasswordField != null) {    password1=newPasswordField.getPassword();  }  if (repeatNewPasswordField != null) {    password2=repeatNewPasswordField.getPassword();  }  boolean tickLabelVisible=false;  if (password1 != null && password2 != null) {    if (Arrays.equals(password1,password2)) {      tickLabelVisible=true;    }  }  tickLabel.setVisible(tickLabelVisible);  clearMessages();  for (int i=0; i < password1.length; i++) {    password1[i]=0;  }  for (int i=0; i < password2.length; i++) {    password2[i]=0;  }}  }
class C{  @SuppressWarnings("unchecked") public static <E>Function<E,E> identity(){  return (Function<E,E>)IdentityFunction.INSTANCE;}  }
class C{  public boolean editInlineMessageReplyMarkup(String inlineMessageId,InlineReplyMarkup inlineReplyMarkup){  if (inlineMessageId != null && inlineReplyMarkup != null) {    JSONObject jsonResponse=this.editMessageReplyMarkup(null,null,inlineMessageId,inlineReplyMarkup);    if (jsonResponse != null) {      if (jsonResponse.getBoolean("result"))       return true;    }  }  return false;}  }
class C{  public TIntHash(int initialCapacity,float loadFactor,TIntHashingStrategy strategy){  super(initialCapacity,loadFactor);  _hashingStrategy=strategy;}  }
class C{  public RemoteSageFile(String hostname,String name) throws IOException {  this(hostname,name,null);}  }
class C{  public static int brightnessNTSC(int rgb){  int r=(rgb >> 16) & 0xff;  int g=(rgb >> 8) & 0xff;  int b=rgb & 0xff;  return (int)(r * 0.299f + g * 0.587f + b * 0.114f);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  CaptureDeviceInput conn=getCapDevInput(stack);  return new Integer(conn == null ? 0 : conn.getSharpness());}  }
class C{  protected boolean isVirtualInvoke(MethodBinding method,MessageSend messageSend){  return !method.isStatic() && !method.isPrivate() && !messageSend.isSuperAccess()&& !(method.isDefault() && this.pattern.focus != null && !CharOperation.equals(this.pattern.declaringPackageName,method.declaringClass.qualifiedPackageName()));}  }
class C{  private void drawIndicators(){  mCircleDrawable=new ShapeDrawable(new OvalShape());  mCircleDrawable.getPaint().setStyle(Paint.Style.FILL);  mCircleDrawable.getPaint().setColor(mFillColor);  mCircleDrawable.getPaint().setAntiAlias(true);  mCircleDrawable.setIntrinsicHeight((int)mRadius);  mCircleDrawable.setIntrinsicWidth((int)mRadius);  mStrokeDrawable=new GradientDrawable();  mStrokeDrawable.setColor(Color.TRANSPARENT);  mStrokeDrawable.setShape(GradientDrawable.OVAL);  mStrokeDrawable.setStroke((int)mStrokeSize,mStrokeColor);  mStrokeDrawable.setSize((int)mRadius,(int)mRadius);}  }
class C{  public static void dragViewToBottom(InstrumentationTestCase test,Activity activity,View v){  dragViewToBottom(test,activity,v,4);}  }
class C{  public List<List<Integer>> subsetsA(int[] nums){  List<List<Integer>> res=new ArrayList<>();  subsetsA(nums,0,new ArrayList<>(),res);  return res;}  }
class C{  public String[] validOption2(){  return new String[]{""};}  }
class C{  private void onFieldValueChanged(){  try {    final String url=webPageControlOptions.getLink().getURL(workItem);    if (!url.equalsIgnoreCase(browserHistory.getCurrentURL())) {      navigateToURL(url);    }  } catch (  final MacroTargetNotConfiguredException ex) {    displayMacroTargetNotConfiguredError(ex);  }}  }
class C{  private void createFilterStages(float[] coefficients,int decimationRatio){  int tapSize=(int)Math.ceil((double)coefficients.length / (double)decimationRatio);  float[][] coefficientSets=new float[decimationRatio][tapSize];  int stagePointer=0;  int coefficientPointer=0;  for (int x=0; x < coefficients.length; x++) {    coefficientSets[stagePointer++][coefficientPointer]=coefficients[x];    if (stagePointer >= decimationRatio) {      stagePointer=0;      coefficientPointer++;    }  }  for (int x=0; x < decimationRatio; x++) {    mFilterStages.add(new FilterStage(coefficientSets[x]));  }}  }
class C{  public static ACLRule jsonToRule(String json) throws IOException {  ACLRule rule=new ACLRule();  MappingJsonFactory f=new MappingJsonFactory();  JsonParser jp;  try {    jp=f.createJsonParser(json);  } catch (  JsonParseException e) {    throw new IOException(e);  }  jp.nextToken();  if (jp.getCurrentToken() != JsonToken.START_OBJECT) {    throw new IOException("Expected START_OBJECT");  }  while (jp.nextToken() != JsonToken.END_OBJECT) {    if (jp.getCurrentToken() != JsonToken.FIELD_NAME) {      throw new IOException("Expected FIELD_NAME");    }    String key=jp.getCurrentName();    jp.nextToken();    String value=jp.getText();    if (value.equals(""))     continue;    if ("ruleid".equals(key)) {      try {        rule.setId(Integer.parseInt(value));      } catch (      NumberFormatException e) {        throw new NumberFormatException("ruleid must be specified as a number.");      }    } else     if ("src-ip".equals(key)) {      rule.setNw_src(value);      int[] cidr=IPAddressUtil.parseCIDR(value);      rule.setNw_src_prefix(cidr[0]);      rule.setNw_src_maskbits(cidr[1]);    } else     if ("dst-ip".equals(key)) {      rule.setNw_dst(value);      int[] cidr=IPAddressUtil.parseCIDR(value);      rule.setNw_dst_prefix(cidr[0]);      rule.setNw_dst_maskbits(cidr[1]);    } else     if ("nw-proto".equals(key)) {      if ("TCP".equalsIgnoreCase(value)) {        rule.setNw_proto(6);      } else       if ("UDP".equalsIgnoreCase(value)) {        rule.setNw_proto(11);      } else       if ("ICMP".equalsIgnoreCase(value)) {        rule.setNw_proto(1);      } else {        throw new IllegalArgumentException("nw-proto must be specified as (TCP || UDP || ICMP).");      }    } else     if ("tp-dst".equals(key)) {      if (rule.getNw_proto() == 6 || rule.getNw_proto() == 11) {        try {          rule.setTp_dst(Integer.parseInt(value));        } catch (        NumberFormatException e) {          throw new NumberFormatException("tp-dst must be specified as a number.");        }      }    } else     if (key == "action") {      if ("allow".equalsIgnoreCase(value)) {        rule.setAction(ACLRule.Action.ALLOW);      } else       if ("deny".equalsIgnoreCase(value)) {        rule.setAction(ACLRule.Action.DENY);      } else {        throw new IllegalArgumentException("action must be specidied as (allow || deny).");      }    }  }  return rule;}  }
class C{  public void createWebClip(String code,String data){  String appUrl=null;  String title=null;  try {    JSONObject webClipData=new JSONObject(code);    appUrl=(String)webClipData.get(resources.getString(R.string.intent_extra_identity));    title=(String)webClipData.get(resources.getString(R.string.intent_extra_title));  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON format. " + e);  }  resultBuilder.build(data);  if (appUrl != null && title != null) {    appList.createWebAppBookmark(appUrl,title);  }}  }
class C{  @Override protected JComponent createEditor(){  JComponent editor=spinner.getEditor();  editor.setName("Spinner.editor");  updateEditorAlignment(editor);  return editor;}  }
class C{  @Override public boolean isBusy(){  return m_busy;}  }
class C{  public void hideNavigationBar(View view){  view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);}  }
class C{  public static void start(Context context,String url,boolean showTitle,boolean showProgress){  Intent intent=new Intent(context,WebActivity.class);  intent.putExtra(URL,url);  intent.putExtra(TITLE,showTitle);  intent.putExtra(PROGRESS,showProgress);  context.startActivity(intent);}  }
class C{  public void visitInvokeDynamicInsn(String name,String desc,Handle bsm,Object... bsmArgs){  if (mv != null) {    mv.visitInvokeDynamicInsn(name,desc,bsm,bsmArgs);  }}  }
class C{  public Veterinary(){  super();}  }
class C{  public void severe(String msg){  throw new RuntimeException();}  }
class C{  public boolean addFieldValues(Object[] fieldValues){  return super.add(fieldValues);}  }
class C{  public void updateUI(){  setUI((ProgressBarUI)UIManager.getUI(this));}  }
class C{  public int readByte() throws IOException {  if (_chunkLength > 0) {    _chunkLength--;    if (_chunkLength == 0 && _isLastChunk)     _chunkLength=END_OF_DATA;    return read();  } else   if (_chunkLength == END_OF_DATA) {    _chunkLength=0;    return -1;  }  int tag=read();switch (tag) {case 'N':    return -1;case 'B':case BC_BINARY_CHUNK:{    _isLastChunk=tag == 'B';    _chunkLength=(read() << 8) + read();    int value=parseByte();    if (_chunkLength == 0 && _isLastChunk)     _chunkLength=END_OF_DATA;    return value;  }case 0x20:case 0x21:case 0x22:case 0x23:case 0x24:case 0x25:case 0x26:case 0x27:case 0x28:case 0x29:case 0x2a:case 0x2b:case 0x2c:case 0x2d:case 0x2e:case 0x2f:{  _isLastChunk=true;  _chunkLength=tag - 0x20;  int value=parseByte();  if (_chunkLength == 0)   _chunkLength=END_OF_DATA;  return value;}case 0x34:case 0x35:case 0x36:case 0x37:{_isLastChunk=true;_chunkLength=(tag - 0x34) * 256 + read();int value=parseByte();if (_chunkLength == 0) _chunkLength=END_OF_DATA;return value;}default :throw expect("binary",tag);}}  }
class C{  public void writeRawByte(final byte value) throws IOException {  if (!buffer.hasRemaining()) {    throw new OutOfSpaceException(buffer.position(),buffer.limit());  }  buffer.put(value);}  }
class C{  public final boolean isStatic(){  return Modifier.isStatic(getModifiers());}  }
class C{  public ExternalResources build(){  if (null == defaultResources) {    this.defaultResources=new Resources();  }  if (null == options) {    this.options=Options.createDefault();  }  if (null == converter) {    this.converter=new JsonConverter();  }  return new ExternalResources(context,converter,url,options,cachePolicy,logLevel,defaultResources,listener,useApplicationResources);}  }
class C{  public boolean isSetS(){  return this.s != null;}  }
class C{  private NewCookie createWsCookie(String cookieName,String token,boolean setMaxAge,String userAgent){  String ieExpires="";  int maxAge=setMaxAge ? _tokenManager.getMaxTokenLifeTimeInSecs() : NewCookie.DEFAULT_MAX_AGE;  if (setMaxAge && StringUtils.contains(userAgent,"MSIE")) {    ieExpires=";expires=" + getExpiredTimeGMT(maxAge);    _log.debug("Expires: " + ieExpires);  }  if (token != null && !token.isEmpty()) {    return new NewCookie(cookieName,token + ";HttpOnly" + ieExpires,null,null,null,maxAge,true);  }  return null;}  }
class C{  public static Flag registerBedRestrictionFlag(final CFlags flags){  return flags.registerOptional(CommonFlags.BED_REGIONS_FLAG,File.class,"FILE","if set, only read SAM records that overlap the ranges contained in the specified BED file").setCategory(INPUT_OUTPUT);}  }
class C{  public static Object parse(Reader in){  try {    JSONParser parser=new JSONParser();    return parser.parse(in);  } catch (  Exception e) {    return null;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isCompleted(){  return is(COMPLETED);}  }
class C{  public JobDefinition createJobDefinition(String activitiXmlClasspathResourceName) throws Exception {  namespaceDaoTestHelper.createNamespaceEntity(AbstractServiceTest.TEST_ACTIVITI_NAMESPACE_CD);  JobDefinitionCreateRequest jobDefinitionCreateRequest=createJobDefinitionCreateRequest(activitiXmlClasspathResourceName);  JobDefinition jobDefinition=jobDefinitionService.createJobDefinition(jobDefinitionCreateRequest,false);  assertEquals(new JobDefinition(jobDefinition.getId(),jobDefinitionCreateRequest.getNamespace(),jobDefinitionCreateRequest.getJobName(),jobDefinitionCreateRequest.getDescription(),jobDefinitionCreateRequest.getActivitiJobXml(),jobDefinitionCreateRequest.getParameters(),jobDefinitionCreateRequest.getS3PropertiesLocation(),HerdDaoSecurityHelper.SYSTEM_USER),jobDefinition);  return jobDefinition;}  }
class C{  public static boolean hasSharedRefactoringHistory(final IProject project){  Assert.isNotNull(project);  final IScopeContext[] contexts=new IScopeContext[]{new ProjectScope(project)};  final String preference=Platform.getPreferencesService().getString(RefactoringCorePlugin.getPluginId(),RefactoringPreferenceConstants.PREFERENCE_SHARED_REFACTORING_HISTORY,Boolean.FALSE.toString(),contexts);  if (preference != null)   return Boolean.valueOf(preference).booleanValue();  return false;}  }
class C{  public PostgreSQLAuthenticationProviderModule(PostgreSQLEnvironment environment) throws GuacamoleException {  myBatisProperties.setProperty("mybatis.environment.id","guacamole");  myBatisProperties.setProperty("JDBC.host",environment.getPostgreSQLHostname());  myBatisProperties.setProperty("JDBC.port",String.valueOf(environment.getPostgreSQLPort()));  myBatisProperties.setProperty("JDBC.schema",environment.getPostgreSQLDatabase());  myBatisProperties.setProperty("JDBC.username",environment.getPostgreSQLUsername());  myBatisProperties.setProperty("JDBC.password",environment.getPostgreSQLPassword());  myBatisProperties.setProperty("JDBC.autoCommit","false");  myBatisProperties.setProperty("mybatis.pooled.pingEnabled","true");  myBatisProperties.setProperty("mybatis.pooled.pingQuery","SELECT 1");  driverProperties.setProperty("characterEncoding","UTF-8");}  }
class C{  public boolean isLocalUser(String username){  return _localUsers.keySet().contains(username);}  }
class C{  public Blood(){}  }
class C{  public void cancel(String tag){  List<NotificationEntry> entries=mCenter.getEntries(ID,tag);  if (entries != null && !entries.isEmpty()) {    for (    NotificationEntry entry : entries) {      cancel(entry);    }  }}  }
class C{  public boolean isRedirecting(){  return redirecting;}  }
class C{  public static void dumpObject(Object o){  System.out.println(ReflectionToStringBuilder.toString(o,new RecursiveToStringStyle(5)));}  }
class C{  public Weight(String magnitude){  this.magnitude=new BigDecimal(magnitude);  this.unit=WeightUnit.T.getBaseUnit();}  }
class C{  public void flush() throws IOException {  flushBuffer();  _outputStream.flush();}  }
class C{  protected static ValueManager[] mergeArrays(ValueManager[] a1,ValueManager[] a2){  ValueManager[] result=new ValueManager[a1.length + a2.length];  System.arraycopy(a1,0,result,0,a1.length);  System.arraycopy(a2,0,result,a1.length,a2.length);  return result;}  }
class C{  @Override boolean closeIfIdle(long idleTimeout){  if (closeReason != null)   return true;  long lastMsgTime=Math.max(Math.max(lastMsgSndTime,lastMsgRcvTime),createTs);  if (lastMsgTime + idleTimeout < System.currentTimeMillis() && pendingReqs.isEmpty()) {    close(CONN_IDLE,true);    return true;  }  return false;}  }
class C{  private LinkedList<Diff> diff_bisectSplit(String text1,String text2,int x,int y,long deadline){  String text1a=text1.substring(0,x);  String text2a=text2.substring(0,y);  String text1b=text1.substring(x);  String text2b=text2.substring(y);  LinkedList<Diff> diffs=diff_main(text1a,text2a,false,deadline);  LinkedList<Diff> diffsb=diff_main(text1b,text2b,false,deadline);  diffs.addAll(diffsb);  return diffs;}  }
class C{  @SuppressWarnings("static-access") private void resetOptionOptimizeDatabase(){  m_optionOptimizeDatabase.setSelected(s_parameters.isOptimizeDatabase());}  }
class C{  public boolean safe_forname(){  return soot.PhaseOptions.getBoolean(options,"safe-forname");}  }
class C{  @DSSafe(DSCat.ANDROID_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:20.760 -0500",hash_original_method="D7088D676BF54E193C8B7B9D0CD3713D",hash_generated_method="0B6A4B44261B665077F6F492F3949A3B") @Override public void onRestoreInstanceState(Bundle savedInstanceState){  if (savedInstanceState == null)   return;  ComponentName launchComponent=savedInstanceState.getParcelable(INSTANCE_KEY_COMPONENT);  Bundle appSearchData=savedInstanceState.getBundle(INSTANCE_KEY_APPDATA);  String userQuery=savedInstanceState.getString(INSTANCE_KEY_USER_QUERY);  if (!doShow(userQuery,false,launchComponent,appSearchData)) {    return;  }}  }
class C{  public boolean isA_Processed(){  Object oo=get_Value(COLUMNNAME_A_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void beforeFirst() throws SQLException {  if (autoClose) {    throw DbException.get(ErrorCode.RESULT_SET_NOT_SCROLLABLE);  }  rowId=-1;  if (source != null) {    source.reset();  }}  }
class C{  public static ReedSolomon create(int dataShardCount,int parityShardCount){  return new ReedSolomon(dataShardCount,parityShardCount,new InputOutputByteTableCodingLoop());}  }
class C{  GridClientMarshaller marshaller(GridNioSession ses){  GridClientMarshaller marsh=ses.meta(MARSHALLER.ordinal());  assert marsh != null;  return marsh;}  }
class C{  public void addSpecialButton(String key,Command cmd,int space){  Button b=new Button(cmd);  b.putClientProperty("space",new Integer(space));  specialButtons.put(key,b);}  }
class C{  protected void createShapes(DrawContext dc){  this.paths=new Path[2];  int i=0;  Angle azimuth1=LatLon.greatCircleAzimuth(this.position1,this.position2);  Angle azimuth2=LatLon.greatCircleAzimuth(this.position1,this.position3);  Angle delta=azimuth2.subtract(azimuth1);  int sign=delta.degrees > 0 ? 1 : -1;  delta=Angle.fromDegrees(sign * 5.0);  List<Position> positions=this.computePathPositions(this.position1,this.position2,delta);  this.paths[i++]=this.createPath(positions);  double arrowLength=this.getArrowLength();  Angle arrowAngle=this.getArrowAngle();  positions=this.computeArrowheadPositions(dc,positions.get(2),positions.get(3),arrowLength,arrowAngle);  this.arrowHead1=this.createPolygon(positions);  this.arrowHead1.setLocations(positions);  delta=delta.multiply(-1.0);  positions=this.computePathPositions(this.position1,this.position3,delta);  this.paths[i]=this.createPath(positions);  positions=this.computeArrowheadPositions(dc,positions.get(2),positions.get(3),arrowLength,arrowAngle);  this.arrowHead2=this.createPolygon(positions);  this.arrowHead2.setLocations(positions);}  }
class C{  public ProcessDescription(final int pid,final String name){  Preconditions.checkNotNull(name,"IE00746: Name argument can not be null");  id=pid;  this.name=name;}  }
class C{  public boolean containsHandler(String handlerPath){  return handlers.containsKey(handlerPath);}  }
class C{  public static void writeFile(File file,byte[] data) throws IOException {  file.createNewFile();  file.setWritable(true);  RandomAccessFile raf=new RandomAccessFile(file,"rw");  try {    raf.setLength(data.length);    raf.seek(0);    raf.write(data);  }  finally {    raf.close();  }}  }
class C{  public void notifyListener(TableModelEvent e){  ((DataTableModel)getModel()).notifyListener(e);}  }
class C{  protected boolean confirmPassCode(){  mConfirmingPassCode=false;  boolean result=true;  for (int i=0; i < mPassCodeEditTexts.length && result; i++) {    result=((mPassCodeEditTexts[i].getText().toString()).equals(mPassCodeDigits[i]));  }  return result;}  }
class C{  private Socks4Message socksReadReply() throws IOException {  Socks4Message reply=new Socks4Message();  int bytesRead=0;  while (bytesRead < Socks4Message.REPLY_LENGTH) {    int count=getInputStream().read(reply.getBytes(),bytesRead,Socks4Message.REPLY_LENGTH - bytesRead);    if (count == -1) {      break;    }    bytesRead+=count;  }  if (Socks4Message.REPLY_LENGTH != bytesRead) {    throw new SocketException("Malformed reply from SOCKS server");  }  return reply;}  }
class C{  void waitFor(long millis){  lock.lock();  try {    lockCondition.await(millis,TimeUnit.MILLISECONDS);  } catch (  InterruptedException ex) {    throw new RuntimeException(ex);  } finally {    lock.unlock();  }}  }
class C{  public static boolean isMedia(String mimeType){  boolean isMedia=false;  if (mimeType != null) {    if (mimeType.startsWith("image/") || mimeType.startsWith("video/") || mimeType.startsWith("audio/")) {      isMedia=true;    }  } else {    isMedia=false;  }  return isMedia;}  }
class C{  @Override public final void clear(){  for (  final ARC<K,V> a : this.arc)   a.clear();}  }
class C{  public final void complete(O value){  Objects.requireNonNull(value);  for (; ; ) {    int s=getState();    if (s == SDS_NO_REQUEST_HAS_VALUE || s == SDS_HAS_REQUEST_HAS_VALUE) {      return;    }    if (s == SDS_HAS_REQUEST_NO_VALUE) {      if (outputFused == OUTPUT_NO_VALUE) {        setValue(value);        outputFused=OUTPUT_HAS_VALUE;      }      Subscriber<? super O> a=downstream();      a.onNext(value);      if (getState() != SDS_HAS_REQUEST_HAS_VALUE) {        a.onComplete();      }      return;    }    setValue(value);    if (compareAndSetState(SDS_NO_REQUEST_NO_VALUE,SDS_NO_REQUEST_HAS_VALUE)) {      return;    }  }}  }
class C{  public ScaleFilterLayer(){  setAddToBeanContext(true);}  }
class C{  public void close() throws SQLException {  restoreOriginalAtributes();  conn.close();}  }
class C{  public SimpleObjectPermissionSet(Set<ObjectPermission> permissions){  this.permissions=permissions;}  }
class C{  public static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  public static LazyPQueueX<Integer> range(int start,int end){  return fromStreamS(ReactiveSeq.range(start,end));}  }
class C{  public static Test suite(){  return (new TestSuite(AjaxTagResolveITCase.class));}  }
class C{  @SuppressWarnings("unchecked") public void init(){  _dependencyTracker=new DependencyTracker();  _cfMap=new HashMap<String,ColumnFamily>();  _geocfMap=new HashMap<String,ColumnFamily>();  this.modelClasses=getModelClasses(Cf.class);  scan(Cf.class);  _dependencyTracker.buildDependencyLevels();  _log.info("DependencyTracker - state: {}",_dependencyTracker.toString());}  }
class C{  public final int read(byte[] b,int off,int len) throws IOException {  int result=src.read(b,off,len);  if (result != -1) {    pointer+=result;  }  return result;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset,boolean hyperlink){  super.addToken(array,start,end,tokenType,startOffset,hyperlink);  zzStartRead=zzMarkedPos;}  }
class C{  @Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  String methodName=method.getName();switch (methodName) {case METHOD_IS_EXPLICIT_CLOSED:    return listener.isExplicitClosed();case METHOD_GET_OPTIONS:  return listener.getUrlParser().getOptions();case METHOD_GET_PROXY:return this;case METHOD_IS_CLOSED:return listener.isClosed();case METHOD_EXECUTE_QUERY:try {this.listener.preExecute();} catch (QueryException e) {if (hasToHandleFailover(e)) {return handleFailOver(e,method,args,listener.getCurrentProtocol());}}break;case METHOD_SET_READ_ONLY:this.listener.switchReadOnlyConnection((Boolean)args[0]);return null;case METHOD_IS_READ_ONLY:return this.listener.isReadOnly();case METHOD_CLOSED_EXPLICIT:this.listener.preClose();return null;case METHOD_COM_MULTI_PREPARE_EXECUTES:case METHOD_EXECUTE_PREPARED_QUERY:boolean mustBeOnMaster=(Boolean)args[0];ServerPrepareResult serverPrepareResult=(ServerPrepareResult)args[1];if (serverPrepareResult != null) {if (!mustBeOnMaster && serverPrepareResult.getUnProxiedProtocol().isMasterConnection() && !this.listener.hasHostFail()) {try {logger.trace("re-prepare query \"" + serverPrepareResult.getSql() + "\" on slave (was "+ "temporary on master since failover)");this.listener.rePrepareOnSlave(serverPrepareResult,mustBeOnMaster);} catch (QueryException q) {}}try {return listener.invoke(method,args,serverPrepareResult.getUnProxiedProtocol());} catch (InvocationTargetException e) {if (e.getTargetException() != null) {if (e.getTargetException() instanceof QueryException) {if (hasToHandleFailover((QueryException)e.getTargetException())) {return handleFailOver((QueryException)e.getTargetException(),method,args,serverPrepareResult.getUnProxiedProtocol());}}throw e.getTargetException();}throw e;}}break;case METHOD_PROLOG_PROXY:try {if (args[0] != null) {return listener.invoke(method,args,((ServerPrepareResult)args[0]).getUnProxiedProtocol());}} catch (InvocationTargetException e) {if (e.getTargetException() != null) {if (e.getTargetException() instanceof QueryException) {if (hasToHandleFailover((QueryException)e.getTargetException())) {return handleFailOver((QueryException)e.getTargetException(),method,args,((ServerPrepareResult)args[0]).getUnProxiedProtocol());}}throw e.getTargetException();}throw e;}default :}try {return listener.invoke(method,args);} catch (InvocationTargetException e) {if (e.getTargetException() != null) {if (e.getTargetException() instanceof QueryException) {if (hasToHandleFailover((QueryException)e.getTargetException())) {return handleFailOver((QueryException)e.getTargetException(),method,args,listener.getCurrentProtocol());}}throw e.getTargetException();}throw e;}}  }
class C{  public static long[] readLongArray(final File f) throws IOException {  final byte[] b=new byte[(int)f.length()];  try (InputStream stream=new FileInputStream(f)){    final int length=stream.read(b);    if (length != b.length) {      throw new IOException();    }  }   return ByteArrayIOUtils.convertToLongArray(b);}  }
class C{  public boolean hasLabel(){  return getLabel() != null;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public String globalInfo(){  return "BMAEstimator estimates conditional probability tables of a Bayes " + "network using Bayes Model Averaging (BMA).";}  }
class C{  public void testDecoder5(){  boolean res;  String originalAppIdName=mAppIdName;  int originalContentTypeValue=mContentTypeValue;  Random rd=new Random();  for (int i=0; i < 10; i++) {    mAppIdValue=rd.nextInt(0x0FFFFFFF);    mContentTypeValue=rd.nextInt(0x0FFF);    byte[] pdu=createPDU(5);    WspTypeDecoder pduDecoder=new WspTypeDecoder(pdu);    res=pduDecoder.seekXWapApplicationId(mWspHeaderStart,mWspHeaderStart + mWspHeaderLen - 1);    assertTrue(res);    int index=(int)pduDecoder.getValue32();    res=pduDecoder.decodeXWapApplicationId(index);    assertTrue(res);    Log.d(LOG_TAG,"mAppIdValue: [" + mAppIdName + "], val: ["+ pduDecoder.getValueString()+ "]");    assertTrue(mAppIdName.equals(pduDecoder.getValueString()));  }  mAppIdName=originalAppIdName;  mContentTypeValue=originalContentTypeValue;}  }
class C{  boolean addQCRestriction(OwlClass r){  return qcRestrictions.add(r);}  }
class C{  private static int parseType(final String signature,int pos,final SignatureVisitor v){  char c;  int start, end;  boolean visited, inner;  String name;switch (c=signature.charAt(pos++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':case 'V':    v.visitBaseType(c);  return pos;case '[':return parseType(signature,pos,v.visitArrayType());case 'T':end=signature.indexOf(';',pos);v.visitTypeVariable(signature.substring(pos,end));return end + 1;default :start=pos;visited=false;inner=false;for (; ; ) {switch (c=signature.charAt(pos++)) {case '.':case ';':if (!visited) {name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}}if (c == ';') {v.visitEnd();return pos;}start=pos;visited=false;inner=true;break;case '<':name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}visited=true;top: for (; ; ) {switch (c=signature.charAt(pos)) {case '>':break top;case '*':++pos;v.visitTypeArgument();break;case '+':case '-':pos=parseType(signature,pos + 1,v.visitTypeArgument(c));break;default :pos=parseType(signature,pos,v.visitTypeArgument('='));break;}}}}}}  }
class C{  public static <T>ObjectAnimator ofFloat(T target,Property<T,Float> property,float... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setFloatValues(values);  return anim;}  }
class C{  public void registerDeployer(String containerId,DeployerType deployerType,String deployerClassName){  registerImplementation(new RegistrationKey(new SimpleContainerIdentity(containerId),deployerType.getType()),deployerClassName);}  }
class C{  @Override public void onException(Throwable ex){  setDelegatingRequests(true);  setDelegatingResponses(true);  super.onException(ex);}  }
class C{  Artifact createArtifact(ArtifactFactory artifactFactory){  if (groupId == null || artifactId == null || version == null || type == null) {    throw new NullPointerException("signaturesArtifact is missing some properties. Required are: groupId, artifactId, version, type");  }  return artifactFactory.createArtifactWithClassifier(groupId,artifactId,version,type,classifier);}  }
class C{  private static boolean isAPI10(){  return !FORCE_FALLBACK_IMPLEMENTATION && android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD_MR1;}  }
class C{  protected void configC(Parameterization config){  final DoubleParameter param=new DoubleParameter(C_ID);  if (config.grab(param)) {    c=param.getValue();  }}  }
class C{  public String toString(){  return this.prefaceBO.toString();}  }
class C{  public static boolean isValidToken(int code){  return code >= ERROR && code <= LAST_TOKEN;}  }
class C{  protected void serializeFieldsUsing(Map<?,?> value,JsonGenerator jgen,SerializerProvider provider,JsonSerializer<Object> ser) throws IOException, JsonGenerationException {  final JsonSerializer<Object> keySerializer=_keySerializer;  final HashSet<String> ignored=_ignoredEntries;  final TypeSerializer typeSer=_valueTypeSerializer;  final boolean skipNulls=!provider.isEnabled(SerializationConfig.Feature.WRITE_NULL_MAP_VALUES);  for (  Map.Entry<?,?> entry : value.entrySet()) {    Object valueElem=entry.getValue();    Object keyElem=entry.getKey();    if (keyElem == null) {      provider.getNullKeySerializer().serialize(null,jgen,provider);    } else {      if (skipNulls && valueElem == null)       continue;      if (ignored != null && ignored.contains(keyElem))       continue;      keySerializer.serialize(keyElem,jgen,provider);    }    if (valueElem == null) {      provider.defaultSerializeNull(jgen);    } else {      try {        if (typeSer == null) {          ser.serialize(valueElem,jgen,provider);        } else {          ser.serializeWithType(valueElem,jgen,provider,typeSer);        }      } catch (      Exception e) {        String keyDesc="" + keyElem;        wrapAndThrow(provider,e,value,keyDesc);      }    }  }}  }
class C{  private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  public XYToAnyTransform(double nx,double ny,double nz){  setTargetNormal(nx,ny,nz);}  }
class C{  public void addHandler(Handler handler){  _logHandlerConfig.add(handler);}  }
class C{  @Override public synchronized void close() throws IOException {  buffer=null;  notifyAll();}  }
class C{  private void resetDrawerContent(Context ctx){  if (mDrawer != null) {    mDrawer.resetDrawerContent();  }  mAccountSwitcherArrow.setImageDrawable(new IconicsDrawable(ctx,MaterialDrawerFont.Icon.mdf_arrow_drop_down).sizeRes(R.dimen.material_drawer_account_header_dropdown).paddingRes(R.dimen.material_drawer_account_header_dropdown_padding).color(ColorHolder.color(mTextColor,ctx,R.attr.material_drawer_header_selection_text,R.color.material_drawer_header_selection_text)));}  }
class C{  @Override public void close(){}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.681 -0400",hash_original_method="FA9F888D4C4D27A705AD6E4249FF9A0F",hash_generated_method="C8F649F07984A40C7FEFB1C94172B5AD") @Override public long skip(long ln) throws IOException {  try {    return in.skip(ln);  } catch (  IOException e) {    handleIOException(e);    return 0;  }}  }
class C{  public JSONObject toJSONObject(JSONArray names) throws JSONException {  if (names == null || names.length() == 0 || this.length() == 0) {    return null;  }  JSONObject jo=new JSONObject();  for (int i=0; i < names.length(); i+=1) {    jo.put(names.getString(i),this.opt(i));  }  return jo;}  }
class C{  public static JPopupButton createSelectionColorButton(DrawingEditor editor,AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches,int columnCount,String labelKey,ResourceBundleUtil labels){  return createSelectionColorButton(editor,attributeKey,swatches,columnCount,labelKey,labels,null);}  }
class C{  public ServerCertificateTypeExtension(boolean isClient){  super(ExtensionType.SERVER_CERT_TYPE,isClient);}  }
class C{  public boolean verifyReader(){  return this.verifyReader;}  }
class C{  @Override public void drawRangeGridline(Graphics2D g2,CategoryPlot plot,ValueAxis axis,Rectangle2D dataArea,double value){  Range range=axis.getRange();  if (!range.contains(value)) {    return;  }  Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX(),dataArea.getY() + getYOffset(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());  Line2D line1=null;  Line2D line2=null;  PlotOrientation orientation=plot.getOrientation();  if (orientation == PlotOrientation.HORIZONTAL) {    double x0=axis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());    double x1=x0 + getXOffset();    double y0=dataArea.getMaxY();    double y1=y0 - getYOffset();    double y2=dataArea.getMinY();    line1=new Line2D.Double(x0,y0,x1,y1);    line2=new Line2D.Double(x1,y1,x1,y2);  } else   if (orientation == PlotOrientation.VERTICAL) {    double y0=axis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());    double y1=y0 - getYOffset();    double x0=dataArea.getMinX();    double x1=x0 + getXOffset();    double x2=dataArea.getMaxX();    line1=new Line2D.Double(x0,y0,x1,y1);    line2=new Line2D.Double(x1,y1,x2,y1);  }  g2.setPaint(plot.getRangeGridlinePaint());  g2.setStroke(plot.getRangeGridlineStroke());  g2.draw(line1);  g2.draw(line2);}  }
class C{  public void bindAsTexCoordBuffer(DrawContext dc){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.buffer.bindAsTexCoordBuffer(dc);}  }
class C{  public static <V,V1 extends V,V2 extends V,V3 extends V,V4 extends V,V5 extends V>Map<String,V> toMap(String name1,V1 value1,String name2,V2 value2,String name3,V3 value3,String name4,V4 value4,String name5,V5 value5){  return populateMap(new HashMap<String,V>(),name1,value1,name2,value2,name3,value3,name4,value4,name5,value5);}  }
class C{  @Override public String globalInfo(){  return "A filter for detecting outliers and extreme values based on " + "interquartile ranges. The filter skips the class attribute.\n\n" + "Outliers:\n"+ "  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n"+ "  or\n"+ "  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n"+ "\n"+ "Extreme values:\n"+ "  x > Q3 + EVF*IQR\n"+ "  or\n"+ "  x < Q1 - EVF*IQR\n"+ "\n"+ "Key:\n"+ "  Q1  = 25% quartile\n"+ "  Q3  = 75% quartile\n"+ "  IQR = Interquartile Range, difference between Q1 and Q3\n"+ "  OF  = Outlier Factor\n"+ "  EVF = Extreme Value Factor";}  }
class C{  public ShapeContext(){}  }
class C{  @Override public void insertString(int offset,String str,AttributeSet a) throws BadLocationException {  if (m_AddMatchingEndBlocks && (m_BlockStart.length() > 0) && str.equals(m_BlockStart)) {    str=addMatchingBlockEnd(offset);  } else   if (m_UseBlanks && str.equals("\t")) {    str=m_Indentation;  }  super.insertString(offset,str,a);  processChangedLines(offset,str.length());}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public int remoteHashCode(){  return ref.hashCode();}  }
class C{  public boolean hasMarketValue(){  return hasExtension(MarketValue.class);}  }
class C{  public static CtMethod make(int modifiers,CtClass returnType,String mname,CtClass[] parameters,CtClass[] exceptions,String body,CtClass declaring) throws CannotCompileException {  try {    CtMethod cm=new CtMethod(returnType,mname,parameters,declaring);    cm.setModifiers(modifiers);    cm.setExceptionTypes(exceptions);    cm.setBody(body);    return cm;  } catch (  NotFoundException e) {    throw new CannotCompileException(e);  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void makeSnackBar(View parentView,String str,int length){  final Snackbar snackbar=Snackbar.make(parentView,str,length);  snackbar.show();}  }
class C{  private void fillCustomerData(final CustomerOrder customerOrder,final ShoppingCart shoppingCart,final boolean temp){  final boolean guest=shoppingCart.getLogonState() != ShoppingCart.LOGGED_IN;  final Customer customer=customerService.getCustomerByEmail(guest ? shoppingCart.getGuid() : shoppingCart.getCustomerEmail(),customerOrder.getShop());  if (customer != null) {    long selectedBillingAddressId=shoppingCart.getOrderInfo().getBillingAddressId() != null ? shoppingCart.getOrderInfo().getBillingAddressId() : 0L;    long selectedShippingAddressId=shoppingCart.getOrderInfo().getDeliveryAddressId() != null ? shoppingCart.getOrderInfo().getDeliveryAddressId() : 0L;    boolean billingNotRequired=shoppingCart.getOrderInfo().isBillingAddressNotRequired();    boolean shippingNotRequired=shoppingCart.getOrderInfo().isDeliveryAddressNotRequired();    Address billingAddress=null;    Address shippingAddress=null;    for (    final Address address : customer.getAddress()) {      if (address.getAddressId() == selectedBillingAddressId) {        billingAddress=address;      }      if (address.getAddressId() == selectedShippingAddressId) {        shippingAddress=address;      }      if (billingAddress != null && shippingAddress != null) {        break;      }    }    if (billingAddress == null && !billingNotRequired) {      billingAddress=customer.getDefaultAddress(Address.ADDR_TYPE_BILLING);    }    if (shippingAddress == null && !shippingNotRequired) {      shippingAddress=customer.getDefaultAddress(Address.ADDR_TYPE_SHIPPING);    }    final boolean sameAddress=!shoppingCart.isSeparateBillingAddress() || billingAddress == null;    if (!shippingNotRequired) {      customerOrder.setShippingAddress(formatAddress(shippingAddress,customerOrder.getShop(),customer,customerOrder.getLocale()));    } else {      customerOrder.setShippingAddress("");    }    if (sameAddress) {      billingAddress=shippingAddress;    }    if (!billingNotRequired) {      customerOrder.setBillingAddress(formatAddress(billingAddress,customerOrder.getShop(),customer,customerOrder.getLocale()));    } else {      customerOrder.setBillingAddress("");    }    if (!temp) {      final Address orderShippingAddress=createCopy(shippingAddress);      final Address orderBillingAddress;      if (sameAddress) {        orderBillingAddress=orderShippingAddress;      } else {        orderBillingAddress=createCopy(billingAddress);      }      if (!billingNotRequired) {        customerOrder.setBillingAddressDetails(orderBillingAddress);      }      if (!shippingNotRequired) {        customerOrder.setShippingAddressDetails(orderShippingAddress);      }    }    if (!customer.isGuest()) {      customerOrder.setCustomer(customer);    }    customerOrder.setEmail(customer.getContactEmail());    customerOrder.setSalutation(customer.getSalutation());    customerOrder.setFirstname(customer.getFirstname());    customerOrder.setLastname(customer.getLastname());    customerOrder.setMiddlename(customer.getMiddlename());  }  customerOrder.setOrderMessage(shoppingCart.getOrderMessage());}  }
class C{  protected void initDataBindings(){  BeanProperty<JLabel,String> jLabelBeanProperty=BeanProperty.create("text");  BeanProperty<MovieList,Integer> movieListBeanProperty=BeanProperty.create("movieCount");  AutoBinding<MovieList,Integer,JLabel,String> autoBinding_20=Bindings.createAutoBinding(UpdateStrategy.READ,movieList,movieListBeanProperty,lblMovieCountTotal,jLabelBeanProperty);  autoBinding_20.bind();}  }
class C{  public static void updateHostAndInitiatorClusterReferences(DbClient dbClient,URI clusterURI,URI hostURI){  Host host=dbClient.queryObject(Host.class,hostURI);  host.setCluster(clusterURI);  dbClient.updateObject(host);  updateInitiatorClusterName(dbClient,clusterURI,hostURI);}  }
class C{  public Builder cacheOnDisk(boolean cacheOnDisk){  this.cacheOnDisk=cacheOnDisk;  return this;}  }
class C{  public static Test suite(){  return (new TestSuite(VerifyBuildBeforeRestoreITCase.class));}  }
class C{  public static Blob blob(Blob value){  return value;}  }
class C{  void openDropDownMenu(){  fExpandBlock.showMenu();}  }
class C{  protected float unwrapKey(Object key){  return ((Float)key).floatValue();}  }
class C{  public TokenizerStateMachine(){}  }
class C{  public void closeContacts(final EvolutionState state,final int result){  return;}  }
class C{  public SimpleIoProcessorPool(Class<? extends IoProcessor<S>> processorType){  this(processorType,null,DEFAULT_SIZE,null);}  }
class C{  public boolean removeTriangle(Triangle triangle){  return getTriangles().remove(triangle);}  }
class C{  public IndexPattern(@NotNull String patternString,final boolean caseSensitive){  myPatternString=patternString;  myCaseSensitive=caseSensitive;  compilePattern();}  }
class C{  public int size(){  return size;}  }
class C{  public Builder count(Integer count){  this.count=count;  return this;}  }
class C{  @Override protected JoinResult doTask() throws Exception {  final Event e=new Event(resourceManager.getFederation(),new EventResource(vmd[0].indexMetadata),OverflowActionEnum.Join).start();  e.addDetail("summary",OverflowActionEnum.Join + "(" + Arrays.toString(getResource())+ ")");  try {    final long checkpointAddr;    final JoinResult result;    final String summary;    try {      if (resourceManager.isOverflowAllowed())       throw new IllegalStateException();      final String[] resources=getResource();      final IndexMetadata newMetadata=getIndex(resources[0]).getIndexMetadata().clone();      if (newMetadata.getPartitionMetadata() == null) {        throw new RuntimeException("Not an index partition: " + resources[0]);      }      if (newMetadata.getPartitionMetadata().getSourcePartitionId() != -1) {        throw new IllegalStateException("Join not allowed during move: sourcePartitionId=" + newMetadata.getPartitionMetadata().getSourcePartitionId());      }      byte[] leftSeparator=newMetadata.getPartitionMetadata().getLeftSeparatorKey();      newMetadata.setPartitionMetadata(null);      final BTree btree=BTree.create(resourceManager.getLiveJournal(),newMetadata);      final LocalPartitionMetadata[] oldpmd=new LocalPartitionMetadata[resources.length];      for (int i=0; i < resources.length; i++) {        final String name=resources[i];        final IIndex src=getIndex(name);        final IndexMetadata sourceIndexMetadata=src.getIndexMetadata();        if (!newMetadata.getIndexUUID().equals(sourceIndexMetadata.getIndexUUID())) {          throw new RuntimeException("Partition for the wrong index? : names=" + Arrays.toString(resources));        }        final LocalPartitionMetadata pmd=sourceIndexMetadata.getPartitionMetadata();        if (pmd == null) {          throw new RuntimeException("Not an index partition: " + resources[i]);        }        if (!BytesUtil.bytesEqual(leftSeparator,pmd.getLeftSeparatorKey())) {          throw new RuntimeException("Partitions out of order: names=" + Arrays.toString(resources) + ", have="+ Arrays.toString(oldpmd)+ ", found="+ pmd);        }        oldpmd[i]=pmd;        final long ncopied=btree.rangeCopy(src,null,null,true);        if (INFO)         log.info("Copied " + ncopied + " index entries from "+ name);        leftSeparator=pmd.getRightSeparatorKey();      }      final String scaleOutIndexName=newMetadata.getName();      final int partitionId=resourceManager.getFederation().getMetadataService().nextPartitionId(scaleOutIndexName);      summary=OverflowActionEnum.Join + "(" + Arrays.toString(resources)+ "->"+ partitionId+ ")";      newMetadata.setPartitionMetadata(new LocalPartitionMetadata(partitionId,-1,oldpmd[0].getLeftSeparatorKey(),oldpmd[resources.length - 1].getRightSeparatorKey(),new IResourceMetadata[]{getJournal().getResourceMetadata()},IndexPartitionCause.join(resourceManager)));      btree.setIndexMetadata(newMetadata.clone());      checkpointAddr=btree.writeCheckpoint();      result=new JoinResult(DataService.getIndexPartitionName(scaleOutIndexName,partitionId),newMetadata,checkpointAddr,resources);    }  finally {      clearRefs();    }{      final String[] names2=new String[result.oldnames.length + 1];      names2[0]=result.name;      System.arraycopy(result.oldnames,0,names2,1,result.oldnames.length);      final AbstractTask<Void> task=new AtomicUpdateJoinIndexPartition(resourceManager,names2,result,e.newSubEvent(OverflowSubtaskEnum.AtomicUpdate));      concurrencyManager.submit(task).get();    }    return result;  }  finally {    e.end();  }}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  public static double convertSecondsToMillis(double seconds){  return (seconds * SECOND_TO_MILLIS);}  }
class C{  public void afterRegionCreate(SystemMemberRegionEvent event){  adminDS.handleRegionCreateEvent(event);}  }
class C{  public Period(Date startDate,Date endDate){  this((startDate == null) ? null : new ICalDate(startDate),(endDate == null) ? null : new ICalDate(endDate));}  }
class C{  private boolean isCloseEnough(final double x,final double y){  final int px=(int)x;  final int py=(int)y;  final Rectangle2D orig=parent.getArea();  orig.setRect(orig.getX() - MAX_DISTANCE,orig.getY() - MAX_DISTANCE,orig.getWidth() + MAX_DISTANCE * 2,orig.getHeight() + MAX_DISTANCE * 2);  return orig.contains(px,py);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.658 -0400",hash_original_method="F10F7743D97AD6B571D16076EE2F8E5C",hash_generated_method="0C33154D1312DBECC87EC7963D675B50") public int compare(File file1,File file2){  return delegate.compare(file2,file1);}  }
class C{  public void login(String authSubToken){  service.setAuthSubToken(authSubToken);}  }
class C{  public Matrix[] compute(Matrix loghyper,Matrix X,Matrix Xstar){  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  final double ell=Math.exp(loghyper.get(0,0));  final double em2=1 / (ell * ell);  final double oneplusem2=1 + em2;  final double sf2=Math.exp(2 * loghyper.get(1,0));  final double s2=Math.exp(2 * loghyper.get(2,0));  final int m=X.getRowDimension();  final int n=X.getColumnDimension();  double[][] x=X.getArray();  final int mstar=Xstar.getRowDimension();  final int nstar=Xstar.getColumnDimension();  double[][] xstar=Xstar.getArray();  double[] sumxstardotTimesxstar=new double[mstar];  for (int i=0; i < mstar; i++) {    double t=0;    for (int j=0; j < nstar; j++) {      final double tt=xstar[i][j];      t+=tt * tt * em2;    }    sumxstardotTimesxstar[i]=t;  }  Matrix A=new Matrix(mstar,1);  double[][] a=A.getArray();  for (int i=0; i < mstar; i++) {    a[i][0]=sf2 * Math.asin((em2 + sumxstardotTimesxstar[i]) / (oneplusem2 + sumxstardotTimesxstar[i])) + s2;  }  double[] sumxdotTimesx=new double[m];  for (int i=0; i < m; i++) {    double t=0;    for (int j=0; j < n; j++) {      final double tt=x[i][j];      t+=tt * tt * em2;    }    sumxdotTimesx[i]=t + oneplusem2;  }  Matrix B=new Matrix(m,mstar);  double[][] b=B.getArray();  for (int i=0; i < m; i++) {    final double[] xi=x[i];    for (int j=0; j < mstar; j++) {      double t=0;      final double[] xstarj=xstar[j];      for (int k=0; k < n; k++) {        t+=xi[k] * xstarj[k] * em2;      }      b[i][j]=t + em2;    }  }  for (int i=0; i < m; i++) {    for (int j=0; j < mstar; j++) {      b[i][j]=sf2 * Math.asin(b[i][j] / Math.sqrt((sumxstardotTimesxstar[j] + oneplusem2) * sumxdotTimesx[i]));    }  }  return new Matrix[]{A,B};}  }
class C{  private void tick(){  long newNow=clock.now();  Preconditions.checkState(!isTicking);  isTicking=true;  try {    tickRemaining=newNow - now;    now=newNow;    do {      tickRemaining=deltaQueue.tick(tickRemaining);      runUntilIdle();    } while (deltaQueue.isNotEmpty() && tickRemaining > 0);    Preconditions.checkState(isTicking);  }  finally {    isTicking=false;    tickRemaining=0;  }}  }
class C{  public void finish(){  Collections.sort(this,HGNode.inverseLogPComparator);}  }
class C{  private Population findPersonPairsList(Population population){  Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  Population processedPopulation=scenario.getPopulation();  int personPairsFound=0;  LinkedList<Person> sortedPersons=new LinkedList<Person>(population.getPersons().values());  Collections.sort(sortedPersons,new DepartureTimeComarator());  Person person=sortedPersons.pollFirst();  while (person != null) {    for (Iterator<Person> iterator=sortedPersons.iterator(); iterator.hasNext(); ) {      Person candidatePerson=iterator.next();      if (departureTimeDifferenceLargeEnough(person,candidatePerson)) {        if (activitiesNearEnough(person,candidatePerson)) {          personPairsFound++;          person=mergePersons(person,candidatePerson);          iterator.remove();          break;        }      }    }    processedPopulation.addPerson(person);    person=sortedPersons.pollFirst();  }  log.info("Found " + personPairsFound + " pairs.");  log.info("The paired population contains " + processedPopulation.getPersons().size() + " agents");  return processedPopulation;}  }
class C{  public ByteArrayOutputStream encodePObject(Object value,ServerType type,boolean binary) throws IOException {  if (value == null)   return null;  reset();  appendPObject(value,type,binary);  return getByteStream();}  }
class C{  public RemoteElementImpl(){}  }
class C{  private void execute(String queryFile,String expectedResultFile,boolean checkOrder) throws Exception {  RepositoryConnection conn=localRepository.getConnection();  String queryString=readQueryString(queryFile);  try {    Query query=conn.prepareQuery(QueryLanguage.SPARQL,queryString);    if (query instanceof TupleQuery) {      TupleQueryResult queryResult=((TupleQuery)query).evaluate();      TupleQueryResult expectedResult=readExpectedTupleQueryResult(expectedResultFile);      compareTupleQueryResults(queryResult,expectedResult,checkOrder);    } else     if (query instanceof GraphQuery) {      GraphQueryResult gqr=((GraphQuery)query).evaluate();      Set<Statement> queryResult=Iterations.asSet(gqr);      Set<Statement> expectedResult=readExpectedGraphQueryResult(expectedResultFile);      compareGraphs(queryResult,expectedResult);    } else     if (query instanceof BooleanQuery) {      throw new RuntimeException("Not yet supported " + query.getClass());    } else {      throw new RuntimeException("Unexpected query type: " + query.getClass());    }  }  finally {    conn.close();  }}  }
class C{  private static double subRemainderTwoPi(double x0,double x1,double x2,int e0,int nx){  int ih;  double z, fw;  double f0, f1, f2, f3, f4, f5, f6=0.0, f7;  double q0, q1, q2, q3, q4, q5;  int iq0, iq1, iq2, iq3, iq4;  final int jx=nx - 1;  final int jv=(e0 - 3) / 24;  int q=e0 - ((jv << 4) + (jv << 3)) - 24;  final int j=jv + 4;  if (jx == 1) {    f5=(j >= 0) ? ONE_OVER_TWOPI_TAB[j] : 0.0;    f4=(j >= 1) ? ONE_OVER_TWOPI_TAB[j - 1] : 0.0;    f3=(j >= 2) ? ONE_OVER_TWOPI_TAB[j - 2] : 0.0;    f2=(j >= 3) ? ONE_OVER_TWOPI_TAB[j - 3] : 0.0;    f1=(j >= 4) ? ONE_OVER_TWOPI_TAB[j - 4] : 0.0;    f0=(j >= 5) ? ONE_OVER_TWOPI_TAB[j - 5] : 0.0;    q0=x0 * f1 + x1 * f0;    q1=x0 * f2 + x1 * f1;    q2=x0 * f3 + x1 * f2;    q3=x0 * f4 + x1 * f3;    q4=x0 * f5 + x1 * f4;  } else {    f6=(j >= 0) ? ONE_OVER_TWOPI_TAB[j] : 0.0;    f5=(j >= 1) ? ONE_OVER_TWOPI_TAB[j - 1] : 0.0;    f4=(j >= 2) ? ONE_OVER_TWOPI_TAB[j - 2] : 0.0;    f3=(j >= 3) ? ONE_OVER_TWOPI_TAB[j - 3] : 0.0;    f2=(j >= 4) ? ONE_OVER_TWOPI_TAB[j - 4] : 0.0;    f1=(j >= 5) ? ONE_OVER_TWOPI_TAB[j - 5] : 0.0;    f0=(j >= 6) ? ONE_OVER_TWOPI_TAB[j - 6] : 0.0;    q0=x0 * f2 + x1 * f1 + x2 * f0;    q1=x0 * f3 + x1 * f2 + x2 * f1;    q2=x0 * f4 + x1 * f3 + x2 * f2;    q3=x0 * f5 + x1 * f4 + x2 * f3;    q4=x0 * f6 + x1 * f5 + x2 * f4;  }  z=q4;  fw=(double)((int)(TWO_POW_N24 * z));  iq0=(int)(z - TWO_POW_24 * fw);  z=q3 + fw;  fw=(double)((int)(TWO_POW_N24 * z));  iq1=(int)(z - TWO_POW_24 * fw);  z=q2 + fw;  fw=(double)((int)(TWO_POW_N24 * z));  iq2=(int)(z - TWO_POW_24 * fw);  z=q1 + fw;  fw=(double)((int)(TWO_POW_N24 * z));  iq3=(int)(z - TWO_POW_24 * fw);  z=q0 + fw;  double twoPowQ=twoPowTab[q - MIN_DOUBLE_EXPONENT];  z=(z * twoPowQ) % 8.0;  z-=(double)((int)z);  if (q > 0) {    iq3&=0xFFFFFF >> q;    ih=iq3 >> (23 - q);  } else   if (q == 0) {    ih=iq3 >> 23;  } else   if (z >= 0.5) {    ih=2;  } else {    ih=0;  }  if (ih > 0) {    int carry;    if (iq0 != 0) {      carry=1;      iq0=0x1000000 - iq0;      iq1=0x0FFFFFF - iq1;      iq2=0x0FFFFFF - iq2;      iq3=0x0FFFFFF - iq3;    } else {      if (iq1 != 0) {        carry=1;        iq1=0x1000000 - iq1;        iq2=0x0FFFFFF - iq2;        iq3=0x0FFFFFF - iq3;      } else {        if (iq2 != 0) {          carry=1;          iq2=0x1000000 - iq2;          iq3=0x0FFFFFF - iq3;        } else {          if (iq3 != 0) {            carry=1;            iq3=0x1000000 - iq3;          } else {            carry=0;          }        }      }    }    if (q > 0) {switch (q) {case 1:        iq3&=0x7FFFFF;      break;case 2:    iq3&=0x3FFFFF;  break;}}if (ih == 2) {z=1.0 - z;if (carry != 0) {z-=twoPowQ;}}}if (z == 0.0) {if (jx == 1) {f6=ONE_OVER_TWOPI_TAB[jv + 5];q5=x0 * f6 + x1 * f5;} else {f7=ONE_OVER_TWOPI_TAB[jv + 5];q5=x0 * f7 + x1 * f6 + x2 * f5;}z=q5;fw=(double)((int)(TWO_POW_N24 * z));iq0=(int)(z - TWO_POW_24 * fw);z=q4 + fw;fw=(double)((int)(TWO_POW_N24 * z));iq1=(int)(z - TWO_POW_24 * fw);z=q3 + fw;fw=(double)((int)(TWO_POW_N24 * z));iq2=(int)(z - TWO_POW_24 * fw);z=q2 + fw;fw=(double)((int)(TWO_POW_N24 * z));iq3=(int)(z - TWO_POW_24 * fw);z=q1 + fw;fw=(double)((int)(TWO_POW_N24 * z));iq4=(int)(z - TWO_POW_24 * fw);z=q0 + fw;z=(z * twoPowQ) % 8.0;z-=(double)((int)z);if (q > 0) {iq4&=(0xFFFFFF >> q);ih=(iq4 >> (23 - q));} else if (q == 0) {ih=iq4 >> 23;} else if (z >= 0.5) {ih=2;} else {ih=0;}if (ih > 0) {if (iq0 != 0) {iq0=0x1000000 - iq0;iq1=0x0FFFFFF - iq1;iq2=0x0FFFFFF - iq2;iq3=0x0FFFFFF - iq3;iq4=0x0FFFFFF - iq4;} else {if (iq1 != 0) {  iq1=0x1000000 - iq1;  iq2=0x0FFFFFF - iq2;  iq3=0x0FFFFFF - iq3;  iq4=0x0FFFFFF - iq4;} else {  if (iq2 != 0) {    iq2=0x1000000 - iq2;    iq3=0x0FFFFFF - iq3;    iq4=0x0FFFFFF - iq4;  } else {    if (iq3 != 0) {      iq3=0x1000000 - iq3;      iq4=0x0FFFFFF - iq4;    } else {      if (iq4 != 0) {        iq4=0x1000000 - iq4;      }    }  }}}if (q > 0) {switch (q) {case 1:  iq4&=0x7FFFFF;break;case 2:iq4&=0x3FFFFF;break;}}}fw=twoPowQ * TWO_POW_N24;} else {iq4=(int)(z / twoPowQ);fw=twoPowQ;}q4=fw * (double)iq4;fw*=TWO_POW_N24;q3=fw * (double)iq3;fw*=TWO_POW_N24;q2=fw * (double)iq2;fw*=TWO_POW_N24;q1=fw * (double)iq1;fw*=TWO_POW_N24;q0=fw * (double)iq0;fw*=TWO_POW_N24;fw=TWOPI_TAB0 * q4;fw+=TWOPI_TAB0 * q3 + TWOPI_TAB1 * q4;fw+=TWOPI_TAB0 * q2 + TWOPI_TAB1 * q3 + TWOPI_TAB2 * q4;fw+=TWOPI_TAB0 * q1 + TWOPI_TAB1 * q2 + TWOPI_TAB2 * q3 + TWOPI_TAB3 * q4;fw+=TWOPI_TAB0 * q0 + TWOPI_TAB1 * q1 + TWOPI_TAB2 * q2 + TWOPI_TAB3 * q3 + TWOPI_TAB4 * q4;return (ih == 0) ? fw : -fw;}  }
class C{  final public boolean isLeaf(){  return true;}  }
class C{  public void drawBackground(Graphics g){  g.fillRect(0,0,getWidth(),getHeight());}  }
class C{  public AddAction(String typeId,String title,GenericElementView groupView){  this.objectTypeId=typeId;  String title_0=title;  if (title_0 == null) {    title_0=AddGroup.TITLE_FOR_TYPE.get(typeId);  }  setText(title_0);  setImageDescriptor(ImageDescriptor.createFromImage(ImageCache.getInstance().getISO27kTypeImage(objectTypeId)));  this.groupView=groupView;}  }
class C{  RSSChannelHandler(String baseURL,RSSCatalogItem.State result){  myCatalog=result.Loader.Tree.Item;  myBaseURL=baseURL;  myData=result;  mySkipUntilId=myData.LastLoadedId;  myFoundNewIds=mySkipUntilId != null;  if (!(result.Link instanceof RSSNetworkLink)) {    throw new IllegalArgumentException("Parameter `result` has invalid `Link` field value: result.Link must be an instance of OPDSNetworkLink class.");  }}  }
class C{  public SPVBlockStore(NetworkParameters params,File file) throws BlockStoreException {  checkNotNull(file);  this.params=checkNotNull(params);  try {    this.numHeaders=DEFAULT_NUM_HEADERS;    boolean exists=file.exists();    randomAccessFile=new RandomAccessFile(file,"rw");    long fileSize=getFileSize();    if (!exists) {      log.info("Creating new SPV block chain file " + file);      randomAccessFile.setLength(fileSize);    } else     if (randomAccessFile.length() != fileSize) {      throw new BlockStoreException("File size on disk does not match expected size: " + randomAccessFile.length() + " vs "+ fileSize);    }    FileChannel channel=randomAccessFile.getChannel();    fileLock=channel.tryLock();    if (fileLock == null)     throw new BlockStoreException("Store file is already locked by another process");    buffer=channel.map(FileChannel.MapMode.READ_WRITE,0,fileSize);    byte[] header;    if (exists) {      header=new byte[4];      buffer.get(header);      if (!new String(header,"US-ASCII").equals(HEADER_MAGIC))       throw new BlockStoreException("Header bytes do not equal " + HEADER_MAGIC);    } else {      initNewStore(params);    }  } catch (  Exception e) {    try {      if (randomAccessFile != null)       randomAccessFile.close();    } catch (    IOException e2) {      throw new BlockStoreException(e2);    }    throw new BlockStoreException(e);  }}  }
class C{  public static String trimWhitespace(String str){  if (!hasLength(str)) {    return str;  }  StringBuilder sb=new StringBuilder(str);  while (sb.length() > 0 && Character.isWhitespace(sb.charAt(0))) {    sb.deleteCharAt(0);  }  while (sb.length() > 0 && Character.isWhitespace(sb.charAt(sb.length() - 1))) {    sb.deleteCharAt(sb.length() - 1);  }  return sb.toString();}  }
class C{  protected void computeNorms(){  int N=continuousDataX.length;  xNorms=new double[N][N];  zNorms=new double[N][N];  xzNorms=new double[N][N];  for (int t=0; t < N; t++) {    for (int t2=0; t2 < N; t2++) {      if (t2 == t) {        xNorms[t][t2]=Double.POSITIVE_INFINITY;        zNorms[t][t2]=Double.POSITIVE_INFINITY;        xzNorms[t][t2]=Double.POSITIVE_INFINITY;        continue;      }      xNorms[t][t2]=normCalculator.norm(continuousDataX[t],continuousDataX[t2]);      zNorms[t][t2]=normCalculator.norm(conditionedDataZ[t],conditionedDataZ[t2]);      xzNorms[t][t2]=Math.max(xNorms[t][t2],zNorms[t][t2]);    }  }}  }
class C{  @Deprecated public void stopSharingNote(String guid,OnClientCallback<Void> callback){  AsyncReflector.execute(mClient,callback,"stopSharingNote",mAuthenticationToken,guid);}  }
class C{  private void load() throws FileNotFoundException, XmlPullParserException, IOException {  final File file=new File(mProjectPath,PROJECT_FILENAME);  final FileInputStream fis=new FileInputStream(file);  try {    final List<String> ignoredMediaItems=new ArrayList<String>();    final XmlPullParser parser=Xml.newPullParser();    parser.setInput(fis,"UTF-8");    int eventType=parser.getEventType();    String name;    MediaItem currentMediaItem=null;    Overlay currentOverlay=null;    boolean regenerateProjectThumbnail=false;    while (eventType != XmlPullParser.END_DOCUMENT) {switch (eventType) {case XmlPullParser.START_TAG:{          name=parser.getName();          if (TAG_PROJECT.equals(name)) {            mAspectRatio=Integer.parseInt(parser.getAttributeValue("",ATTR_ASPECT_RATIO));            final boolean mRegenPCM=Boolean.parseBoolean(parser.getAttributeValue("",ATTR_REGENERATE_PCM));            mMANativeHelper.setAudioflag(mRegenPCM);          } else           if (TAG_MEDIA_ITEM.equals(name)) {            final String mediaItemId=parser.getAttributeValue("",ATTR_ID);            try {              currentMediaItem=parseMediaItem(parser);              mMediaItems.add(currentMediaItem);            } catch (            Exception ex) {              Log.w(TAG,"Cannot load media item: " + mediaItemId,ex);              currentMediaItem=null;              if (mMediaItems.size() == 0) {                regenerateProjectThumbnail=true;              }              ignoredMediaItems.add(mediaItemId);            }          } else           if (TAG_TRANSITION.equals(name)) {            try {              final Transition transition=parseTransition(parser,ignoredMediaItems);              if (transition != null) {                mTransitions.add(transition);              }            } catch (            Exception ex) {              Log.w(TAG,"Cannot load transition",ex);            }          } else           if (TAG_OVERLAY.equals(name)) {            if (currentMediaItem != null) {              try {                currentOverlay=parseOverlay(parser,currentMediaItem);                currentMediaItem.addOverlay(currentOverlay);              } catch (              Exception ex) {                Log.w(TAG,"Cannot load overlay",ex);              }            }          } else           if (TAG_OVERLAY_USER_ATTRIBUTES.equals(name)) {            if (currentOverlay != null) {              final int attributesCount=parser.getAttributeCount();              for (int i=0; i < attributesCount; i++) {                currentOverlay.setUserAttribute(parser.getAttributeName(i),parser.getAttributeValue(i));              }            }          } else           if (TAG_EFFECT.equals(name)) {            if (currentMediaItem != null) {              try {                final Effect effect=parseEffect(parser,currentMediaItem);                currentMediaItem.addEffect(effect);                if (effect instanceof EffectKenBurns) {                  final boolean isImageClipGenerated=Boolean.parseBoolean(parser.getAttributeValue("",ATTR_IS_IMAGE_CLIP_GENERATED));                  if (isImageClipGenerated) {                    final String filename=parser.getAttributeValue("",ATTR_GENERATED_IMAGE_CLIP);                    if (new File(filename).exists() == true) {                      ((MediaImageItem)currentMediaItem).setGeneratedImageClip(filename);                      ((MediaImageItem)currentMediaItem).setRegenerateClip(false);                    } else {                      ((MediaImageItem)currentMediaItem).setGeneratedImageClip(null);                      ((MediaImageItem)currentMediaItem).setRegenerateClip(true);                    }                  } else {                    ((MediaImageItem)currentMediaItem).setGeneratedImageClip(null);                    ((MediaImageItem)currentMediaItem).setRegenerateClip(true);                  }                }              } catch (              Exception ex) {                Log.w(TAG,"Cannot load effect",ex);              }            }          } else           if (TAG_AUDIO_TRACK.equals(name)) {            try {              final AudioTrack audioTrack=parseAudioTrack(parser);              addAudioTrack(audioTrack);            } catch (            Exception ex) {              Log.w(TAG,"Cannot load audio track",ex);            }          }          break;        }case XmlPullParser.END_TAG:{        name=parser.getName();        if (TAG_MEDIA_ITEM.equals(name)) {          currentMediaItem=null;        } else         if (TAG_OVERLAY.equals(name)) {          currentOverlay=null;        }        break;      }default :{      break;    }}eventType=parser.next();}computeTimelineDuration();if (regenerateProjectThumbnail) {generateProjectThumbnail();regenerateProjectThumbnail=false;}}  finally {if (fis != null) {fis.close();}}}  }
class C{  protected void drawChartValuesText(Canvas canvas,XYSeries series,XYSeriesRenderer renderer,Paint paint,List<Float> points,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  int length=points.size();  float halfDiffX=getHalfDiffX(points,length,seriesNr);  for (int i=0; i < length; i+=2) {    int index=startIndex + i / 2;    double value=series.getY(index);    if (!isNullValue(value)) {      float x=points.get(i);      if (mType == Type.DEFAULT) {        x+=seriesIndex * 2 * halfDiffX - (seriesNr - 1.5f) * halfDiffX;      }      if (value >= 0) {        drawText(canvas,getLabel(renderer.getChartValuesFormat(),value),x,points.get(i + 1) - renderer.getChartValuesSpacing(),paint,0);      } else {        drawText(canvas,getLabel(renderer.getChartValuesFormat(),value),x,points.get(i + 1) + renderer.getChartValuesTextSize() + renderer.getChartValuesSpacing() - 3,paint,0);      }    }  }}  }
class C{  public boolean parse(){  BStack=new BracketStack();  BStack.newClass();  BStack.registerInCurrentClass(AND);  BStack.newClass();  BStack.registerInCurrentClass(OR);  BStack.newClass();  BStack.registerInCurrentClass(PROOF);  BStack.newClass();  BStack.registerInCurrentClass(LBR);  BStack.newClass();  BStack.registerInCurrentClass(ASSUME);  try {    ParseTree=CompilationUnit();  } catch (  ParseException e) {    PErrors.push(new ParseError(msgStackToString(e)));  }catch (  TokenMgrError tme) {    String msg=tme.getMessage();    int bl=jj_input_stream.getBeginLine() + 1;    int el=jj_input_stream.getEndLine() + 1;    if ((msg.indexOf("EOF") != -1) && (bl != el)) {      PErrors.push(new ParseError("Lexical {error: EOF reached, " + "possibly open comment starting around line " + (bl - 1)));    } else     PErrors.push(new ParseError(msg));  }  if (PErrors.empty())   Assert.assertion(heirsIndex == 0); else {    tla2sany.st.ParseError list[]=PErrors.errors();    for (int i=0; i < list.length; i++) {      ToolIO.out.println(list[i].reportedError());    }  }  return PErrors.empty();}  }
class C{  public static void keepZoomValid(final Graph2DView view){  decreaseToMaxZoom(view);  increaseToMinZoom(view);}  }
class C{  public static final int makeIntFromByte2(byte[] b,int offset){  return (b[offset] & 0xff) << 8 | (b[offset + 1] & 0xff);}  }
class C{  public Date freshdate(){  Date x=(Date)this.getFieldValue(CollectionSchema.fresh_date_dt.getSolrFieldName());  if (x == null)   return new Date(0);  return x;}  }
class C{  @Override protected byte[] encrypt(byte type,byte[] fragment,int offset,int len){  try {    int content_mac_length=len + hash_size;    int padding_length=(block_size == 0) ? 0 : getPaddingSize(++content_mac_length);    byte[] res=new byte[content_mac_length + padding_length];    System.arraycopy(fragment,offset,res,0,len);    mac_material_part[0]=type;    mac_material_part[1]=(byte)((0x00FF00 & len) >> 8);    mac_material_part[2]=(byte)(0x0000FF & len);    messageDigest.update(mac_write_secret);    messageDigest.update(pad_1);    messageDigest.update(write_seq_num);    messageDigest.update(mac_material_part);    messageDigest.update(fragment,offset,len);    byte[] digest=messageDigest.digest();    messageDigest.update(mac_write_secret);    messageDigest.update(pad_2);    messageDigest.update(digest);    digest=messageDigest.digest();    System.arraycopy(digest,0,res,len,hash_size);    if (block_size != 0) {      Arrays.fill(res,content_mac_length - 1,res.length,(byte)(padding_length));    }    if (logger != null) {      logger.println("SSLRecordProtocol.encrypt: " + (block_size != 0 ? "GenericBlockCipher with padding[" + padding_length + "]:" : "GenericStreamCipher:"));      logger.print(res);    }    byte[] rez=new byte[encCipher.getOutputSize(res.length)];    encCipher.update(res,0,res.length,rez);    incSequenceNumber(write_seq_num);    return rez;  } catch (  GeneralSecurityException e) {    e.printStackTrace();    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during the encryption"));  }}  }
class C{  public BufferedOutput clear(){  buffer.clear();  return this;}  }
class C{  void save(){  if (chatCacheFile == null) {    return;  }  try {    new File(chatCacheFile).getParentFile().mkdirs();    final PrintStream ps=new PrintStream(chatCacheFile,"UTF-8");    while (lines.size() > 200) {      lines.removeFirst();    }    final ListIterator<String> iterator=lines.listIterator();    while (iterator.hasNext()) {      ps.println(iterator.next());    }    ps.close();  } catch (  final IOException ex) {    logger.error(ex,ex);  }}  }
class C{  @Override public boolean hasKnownClassAnnotations(){  return _classInfo.hasAnnotations();}  }
class C{  private void loadParentId(String entidad) throws Exception {  String qual;  ArchivesTable table=new ArchivesTable();  if (_logger.isDebugEnabled())   _logger.debug("loadParentId");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    qual=table.getLoadNodeArchIdQual(_id);    _parentId=DbSelectFns.selectLongInteger(dbConn,DaoDATNodeTbl.getTblName(),DaoDATNodeTbl.getParentIdColName(true),qual);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public Matrix4f mulComponentWise(Matrix4fc other){  return mulComponentWise(other,this);}  }
class C{  public static String chomp(String s){  if (s.endsWith("\r\n"))   return s.substring(0,s.length() - 2);  if (s.endsWith("\r") || s.endsWith("\n"))   return s.substring(0,s.length() - 1);  return s;}  }
class C{  public Analyzer saveAnalysis(File file) throws IOException {  PrintStream ps=null;  try {    ps=new PrintStream(new BufferedOutputStream(new FileOutputStream(file)));    printAnalysis(ps);  }  finally {    if (ps != null) {      ps.close();    }  }  return this;}  }
class C{  public PresetIconManager(Context context,String basePath,String externalAssetPackage){  this.context=context;  this.basePath=basePath;  this.externalAssetPackage=externalAssetPackage;  AssetManager tmpExternalDefaultAssets=null;  try {    Context extCtx=context.createPackageContext(EXTERNAL_DEFAULT_ASSETS_PACKAGE,0);    tmpExternalDefaultAssets=extCtx.getAssets();  } catch (  NameNotFoundException e) {    Log.i("PresetIconManager","External default asset package not installed");  }catch (  Exception e) {    Log.e("PresetIconManager","Exception while loading external default assets",e);  }  externalDefaultAssets=tmpExternalDefaultAssets;  AssetManager tmpExternalDataAssets=null;  if (externalAssetPackage != null) {    try {      Context extCtx=context.createPackageContext(externalAssetPackage,0);      tmpExternalDataAssets=extCtx.getAssets();    } catch (    NameNotFoundException e) {      Log.e("PresetIconManager","External data asset package not found" + externalAssetPackage);    }catch (    Exception e) {      Log.e("PresetIconManager","Exception while loading external asset package " + externalAssetPackage,e);    }  }  externalAssets=tmpExternalDataAssets;  internalAssets=context.getAssets();}  }
class C{  @SafeVarargs public final FastItemAdapter<Item> add(int position,Item... items){  mItemAdapter.add(position,items);  return this;}  }
class C{  ModuleMarshal marshalArg(Class<?> argType){  return getArg().marshal(argType);}  }
class C{  public synchronized boolean unregisterFrame(JFrame frame){  frameList.removeElement(frame);  return true;}  }
class C{  public void addUpdateFlags(int bits){  updatemask|=bits;}  }
class C{  public DateValue toDate(){  normalize();  return new DateValueImpl(year,month,day);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public boolean contains(Point2D.Double p){  return getHitShape().contains(p);}  }
class C{  private static final int monthLength(int year,int month){  return MONTH_LENGTH[month + (isLeapYear(year) ? 12 : 0)];}  }
class C{  public boolean hasResults(){  return recipes != null && !recipes.isEmpty();}  }
class C{  public ActionUpdater(final AbstractAction action){  m_action=action;}  }
class C{  private void init(){  FileDownloader.registerDownloadFileChangeListener(this);  mDownloadFileInfo=FileDownloader.getDownloadFile(mUrl);}  }
class C{  @Override public void handleMousePressed(ChartCanvas canvas,MouseEvent e){  Plot plot=canvas.getChart().getPlot();  if (!(plot instanceof Pannable)) {    canvas.clearLiveHandler();    return;  }  Pannable pannable=(Pannable)plot;  if (pannable.isDomainPannable() || pannable.isRangePannable()) {    Point2D point=new Point2D.Double(e.getX(),e.getY());    Rectangle2D dataArea=canvas.findDataArea(point);    if (dataArea != null && dataArea.contains(point)) {      this.panW=dataArea.getWidth();      this.panH=dataArea.getHeight();      this.panLast=point;      canvas.setCursor(javafx.scene.Cursor.MOVE);    }  }}  }
class C{  @DSComment("data structure class") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.409 -0500",hash_original_method="46309CD6AABC048E549ED8D367B97222",hash_generated_method="3AC3EEB729C4601EC06C6443D14BA600") public void put(String key,Byte value){  mValues.put(key,value);}  }
class C{  public void addAssign(Assignment assignment){  for (  String var : assignment.getVariables()) {    addValue(var,assignment.getValue(var));  }}  }
class C{  public static ArrayList<Page> AspectItemPages(AspectManager.AspectItem item,Item manualType){  ArrayList<Page> newPages=new ArrayList<>();  int height=0;  ItemStack itemStack=item.getOriginal();  ArrayList<ManualWidgetBase> widgets=new ArrayList<>();  widgets.add(new ItemWidget(18,12,itemStack,1f));  widgets.add((new TextWidget(38,16,itemStack.getDisplayName(),true)).setWidth(70));  height+=28;  widgets.add(new TextWidget(18,12 + height,"manual." + itemStack.getUnlocalizedName() + ".description"));  TextContainer textContainer=parseTextContainer(new TextContainer(116,144,TranslationHelper.translateToLocal("manual." + itemStack.getUnlocalizedName() + ".description"),Minecraft.getMinecraft().fontRendererObj));  height+=18 + textContainer.getPages().get(0).getSegments().get(textContainer.getPages().get(0).getSegments().size() - 1).y;  widgets.add(new TextWidget(18,12 + height,"manual.has.aspects"));  height+=18;  widgets.add(new AspectSlideShowWidget(18,12 + height,itemStack));  return newPages;}  }
class C{  public java.lang.StringBuffer append(java.lang.String str){  internal.append(str);  return this;}  }
class C{  public FreeStandingTransactionOutput(NetworkParameters params,UTXO output,int chainHeight){  super(params,null,output.getValue(),output.getScript().getProgram());  this.output=output;  this.chainHeight=chainHeight;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  try {    updateInternalMask();  } catch (  ParseException pe) {  }}  }
class C{  public void readExif(byte[] jpeg) throws IOException {  readExif(new ByteArrayInputStream(jpeg));}  }
class C{  protected ActionErrors validarSoporteForm(HttpServletRequest request,SoporteForm soporteForm){  ActionErrors errors=new ActionErrors();  if (StringUtils.isBlank(soporteForm.getNumeroDocumentos()) || !StringUtils.isNumeric(soporteForm.getNumeroDocumentos())) {    errors.add(Constants.ERROR_INT,new ActionError(Constants.ERROR_INT,Messages.getString(Constants.ETIQUETA_VOLUMEN,request.getLocale())));  } else {    String numeroDocumentos=soporteForm.getNumeroDocumentos();    Pattern mask=Pattern.compile(Constants.FORMATO_NUMERO_INT_MAYOR_CERO);    Matcher matcher=mask.matcher(numeroDocumentos);    if (!matcher.matches()) {      errors.add(Constants.ERROR_INT_MAYOR_CERO,new ActionError(Constants.ERROR_INT_MAYOR_CERO,Messages.getString(Constants.ETIQUETA_VOLUMEN,request.getLocale())));    }  }  return errors;}  }
class C{  public int hashCode(){  return index;}  }
class C{  @NoInline public final void pushOOL(Address addr){  push(addr);}  }
class C{  public static ExportGroup initializeExportGroup(Project project,String type,URI vArray,String label,DbClient dbClient,ResourceAndUUIDNameGenerator nameGenerator,TenantOrg tenantOrg){  ExportGroup exportGroup=new ExportGroup();  exportGroup.setLabel(label);  exportGroup.setType(type);  exportGroup.setId(URIUtil.createId(ExportGroup.class));  exportGroup.setProject(new NamedURI(project.getId(),exportGroup.getLabel()));  exportGroup.setVirtualArray(vArray);  exportGroup.setTenant(new NamedURI(project.getTenantOrg().getURI(),exportGroup.getLabel()));  String generatedName=nameGenerator.generate(tenantOrg.getLabel(),exportGroup.getLabel(),exportGroup.getId().toString(),'_',56);  exportGroup.setGeneratedName(generatedName);  return exportGroup;}  }
class C{  public void addBackReferenceProperty(String referenceName,SettableBeanProperty prop){  if (_backRefProperties == null) {    _backRefProperties=new HashMap<String,SettableBeanProperty>(4);  }  _backRefProperties.put(referenceName,prop);  if (_properties != null) {    _properties.remove(prop.getName());  }}  }
class C{  public CCWaves(int wav,float amp,boolean h,boolean v,ccGridSize gSize,float d){  super(gSize,d);  waves=wav;  amplitude=amp;  amplitudeRate=1.0f;  horizontal=h;  vertical=v;}  }
class C{  public int[] readTurnOverflowRelative() throws IOException {  int[] absolute=readTurnOverflowAbsolute();  if (absolute != null) {    return calculateRelative(absolute);  }  return null;}  }
class C{  public boolean containsRange(final Range<T> otherRange){  if (otherRange == null) {    return false;  }  return contains(otherRange.minimum) && contains(otherRange.maximum);}  }
class C{  @Override public void publishHost(String hostName){  InternetDomainName host=InternetDomainName.from(hostName);  Optional<InternetDomainName> tld=Registries.findTldForName(host);  if (!tld.isPresent()) {    logger.severefmt("publishHost called for invalid host %s",hostName);    return;  }  ImmutableList<String> hostParts=host.parts();  ImmutableList<String> tldParts=tld.get().parts();  ImmutableList<String> domainParts=hostParts.subList(hostParts.size() - tldParts.size() - 1,hostParts.size());  String domain=Joiner.on(".").join(domainParts);  publishDomain(domain);}  }
class C{  public boolean match(ACLRule r){  if ((this.tp_dst == r.tp_dst || r.tp_dst == 0) && (this.nw_proto == r.nw_proto || r.nw_proto == 0) && (isSubnet(this.getNw_src(),r.getNw_src()) == true)&& (isSubnet(this.getNw_dst(),r.getNw_dst()) == true)) {    return true;  }  return false;}  }
class C{  public static void write(float latPoint,float lonPoint,float radius,int units,LinkProperties properties,DataOutputStream dos) throws IOException {  LinkCircle.write(latPoint,lonPoint,radius,units,-1,properties,dos);}  }
class C{  public void store(ObjectReference value){}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  m_handler.endPrefixMapping(prefix);}  }
class C{  public JBoss7xRuntimeConfiguration(){  setProperty(GeneralPropertySet.HOSTNAME,"localhost");  setProperty(JBossPropertySet.JBOSS_MANAGEMENT_NATIVE_PORT,"9999");  getProperties().remove(GeneralPropertySet.RMI_PORT);}  }
class C{  @ResponseBody @RequestMapping(value="/images/imageName/{imageName}/enable",method=RequestMethod.POST) public Image enableImage(@PathVariable String imageName) throws ServiceException {  return this.imageService.enableImage(imageName);}  }
class C{  @Override public String toString(){  return this.id + " Status: " + this.status+ " Dialed: "+ this.dialed+ " Received: "+ this.received+ " Type: "+ this.type;}  }
class C{  public SortString(String sortString){  super(sortString);}  }
class C{  public void testPrivateMode() throws Exception {  depMode=DeploymentMode.PRIVATE;  processTest(true,true);}  }
class C{  void error(String key,String arg,Locator locator) throws SAXException {  hadError=true;  if (eh == null)   return;  eh.error(new SAXParseException(localizer.message(key,arg),locator));}  }
class C{  public TField basicGetDefinedField(){  return definedField;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private COperandTypeConverter(){}  }
class C{  public URISyntaxException(String input,String reason,int index){  super(reason);  if ((input == null) || (reason == null))   throw new NullPointerException();  if (index < -1)   throw new IllegalArgumentException();  this.input=input;  this.index=index;}  }
class C{  public RandomScoreFunction(int seed,int salt,IndexFieldData<?> uidFieldData){  super(CombineFunction.MULT);  this.originalSeed=seed;  this.saltedSeed=seed ^ salt;  this.uidFieldData=uidFieldData;  if (uidFieldData == null)   throw new NullPointerException("uid missing");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isAbsolutePath(String systemId){  if (systemId == null)   return false;  final File file=new File(systemId);  return file.isAbsolute();}  }
class C{  public <A extends Annotation>Expressions buildAnyFieldExpressions(final PersistentResource resource,final Class<A> annotationClass,final ChangeSpec changeSpec){  Class<?> resourceClass=resource.getResourceClass();  if (!entityDictionary.entityHasChecksForPermission(resourceClass,annotationClass)) {    return SUCCESSFUL_EXPRESSIONS;  }  final Function<Check,Expression> deferredCheckFn=getDeferredExpressionFor(resource,changeSpec);  final Function<Check,Expression> immediateCheckFn=getImmediateExpressionFor(resource,changeSpec);  final Function<Function<Check,Expression>,Expression> expressionFunction=null;  return new Expressions(expressionFunction.apply(deferredCheckFn),expressionFunction.apply(immediateCheckFn));}  }
class C{  public void checkRaceResults(DriverThread dt){  if (verbose)   System.out.println(dt.getName() + ": checkRaceResults() called");}  }
class C{  protected Properties loadFromTemplatePath(String propertiesFile){  Properties properties=new Properties();  String templatePath=Generator.getInstance().getTemplatePath();  StringTokenizer st=new StringTokenizer(templatePath,",");  while (st.hasMoreTokens()) {    String templateDir=st.nextToken();    try {      String fullPath=propertiesFile;      if (!fullPath.startsWith(templateDir)) {        fullPath=templateDir + "/" + propertiesFile;      }      properties.load(new FileInputStream(fullPath));      break;    } catch (    Exception e) {    }  }  return properties;}  }
class C{  public boolean registerUser(String username,String password,String uri) throws DataAccessException {  if (checkUsernameExists(username)) {    return false;  }  storeUser(username,password,uri);  return true;}  }
class C{  public final Iterator<KnowledgeEdge> explicitlyForbiddenEdgesIterator(){  return Collections.unmodifiableSet(this.explicitlyForbiddenEdges).iterator();}  }
class C{  public void appendNodes(NodeVector nodes){  int nNodes=nodes.size();  if (null == m_map) {    m_mapSize=nNodes + m_blocksize;    m_map=new int[m_mapSize];  } else   if ((m_firstFree + nNodes) >= m_mapSize) {    m_mapSize+=(nNodes + m_blocksize);    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + nNodes);    m_map=newMap;  }  System.arraycopy(nodes.m_map,0,m_map,m_firstFree,nNodes);  m_firstFree+=nNodes;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:13.476 -0500",hash_original_method="D68BBF88E63BC402EDEA5DC6DCE17035",hash_generated_method="71F426AAD031F00583CE184548FEF9CC") public RotateDrawable(){  this(null,null);}  }
class C{  public ColorRange(FloatRange hue,FloatRange sat,FloatRange bri,FloatRange alpha,String name){  this(hue,sat,bri,alpha,null,null,name);}  }
class C{  public boolean handshake() throws IgniteCheckedException, SSLException {  if (log.isDebugEnabled())   log.debug("Entered handshake. Handshake status: " + handshakeStatus + '.');  sslEngine.beginHandshake();  handshakeStatus=sslEngine.getHandshakeStatus();  boolean loop=true;  while (loop) {switch (handshakeStatus) {case NOT_HANDSHAKING:case FINISHED:{        handshakeFinished=true;        loop=false;        break;      }case NEED_TASK:{      handshakeStatus=runTasks();      break;    }case NEED_UNWRAP:{    Status status=unwrapHandshake();    handshakeStatus=sslEngine.getHandshakeStatus();    if (status == BUFFER_UNDERFLOW && sslEngine.isInboundDone())     loop=false;    break;  }case NEED_WRAP:{  if (outNetBuf.hasRemaining())   U.warn(log,"Output net buffer has unsent bytes during handshake (will clear). ");  outNetBuf.clear();  SSLEngineResult res=sslEngine.wrap(handshakeBuf,outNetBuf);  outNetBuf.flip();  handshakeStatus=res.getHandshakeStatus();  if (log.isDebugEnabled())   log.debug("Wrapped handshake data [status=" + res.getStatus() + ", handshakeStatus="+ handshakeStatus+ ']');  writeNetBuffer();  break;}default :{throw new IllegalStateException("Invalid handshake status in handshake method [handshakeStatus=" + handshakeStatus + ']');}}}if (log.isDebugEnabled()) log.debug("Leaved handshake. Handshake status:" + handshakeStatus + '.');return handshakeFinished;}  }
class C{  private static boolean isRequestSecure(ContainerRequestContext context){  String scheme=context.getUriInfo().getRequestUri().getScheme();  String header=context.getHeaderString(Config.X_SSL_SECURE_HEADER);  if (header != null && header.equals("true")) {    return true;  }  if (scheme != null) {    return scheme.equalsIgnoreCase("https");  }  return false;}  }
class C{  public boolean isBlockAbove(IBlockState checkBlock,int checkDistance,World world,int x,int y,int z,boolean materialCheck){  Material checkBlockMaterial=checkBlock.getMaterial();  IBlockState blockAbove;  Material m;  for (int i=1; i <= checkDistance; i++) {    blockAbove=world.getBlockState(new BlockPos(x,y + checkDistance,z));    if (materialCheck) {      m=blockAbove.getMaterial();      if (m != checkBlockMaterial) {        return false;      }    } else     if (blockAbove != checkBlock) {      return false;    }  }  return true;}  }
class C{  public ConflictException(String message,Response response){  super(HttpStatus.CONFLICT,message,response);}  }
class C{  @Override public void close() throws IOException {  Socket s=_s;  _s=null;  OutputStream os=_os;  _os=null;  InputStream is=_is;  _is=null;  try {    if (os != null)     os.close();    if (is != null)     is.close();  }  finally {    if (s != null)     s.close();  }}  }
class C{  private void paintLowerThumb(Graphics g){  Rectangle knobBounds=thumbRect;  int w=knobBounds.width;  int h=knobBounds.height;  Graphics2D g2d=(Graphics2D)g.create();  Shape thumbShape=createThumbShape(w - 1,h - 1,false);  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g2d.translate(knobBounds.x,knobBounds.y);  g2d.setColor(Color.LIGHT_GRAY);  g2d.fill(thumbShape);  g2d.setColor(Color.GRAY);  g2d.draw(thumbShape);  g2d.dispose();}  }
class C{  public IgfsPath lastExistingPath(){  IgfsPath path=IgfsPath.ROOT;  for (int i=1; i <= lastExistingIdx; i++)   path=new IgfsPath(path,parts[i]);  return path;}  }
class C{  public String subsequenceLengthTipText(){  return "The subsequence length.";}  }
class C{  public void deleteReplicationPolicy(String id) throws IsilonException {  delete(_baseUrl.resolve(URI_REPLICATION_POLICIES),id,"policies");}  }
class C{  public DateMidnight addToCopy(long value){  return iInstant.withMillis(iField.add(iInstant.getMillis(),value));}  }
class C{  @Override public void addSlice(CarbonMeasure measure,List<CarbonMeasureFilter> filters){  axises[SLICE].add(measure,null,filters,null);}  }
class C{  public void testConnectionPropertiesTransform() throws Exception {  String transformClassName=SimpleTransformer.class.getName();  Properties props=new Properties();  props.setProperty(NonRegisteringDriver.PROPERTIES_TRANSFORM_KEY,transformClassName);  NonRegisteringDriver driver=new NonRegisteringDriver();  Properties transformedProps=driver.parseURL(BaseTestCase.dbUrl,props);  assertTrue("albequerque".equals(transformedProps.getProperty(NonRegisteringDriver.HOST_PROPERTY_KEY)));}  }
class C{  public FilerException(String s){  super(s);}  }
class C{  public ToHitData toHit(IGame game,MovePath md){  final Entity ae=game.getEntity(getEntityId());  final Targetable target=getTarget(game);  Coords chargeSrc=ae.getPosition();  int chargeEl=ae.getElevation();  MoveStep chargeStep=null;  if (!md.contains(MoveStepType.CHARGE)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Charge action not found in movement path");  }  if (md.contains(MoveStepType.START_JUMP)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"No jumping allowed while charging");  }  if (md.contains(MoveStepType.BACKWARDS) || md.contains(MoveStepType.LATERAL_LEFT_BACKWARDS) || md.contains(MoveStepType.LATERAL_RIGHT_BACKWARDS)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"No backwards movement allowed while charging");  }  if (md.contains(MoveStepType.EVADE)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"No evading while charging");  }  md.compile(game,ae);  for (final Enumeration<MoveStep> i=md.getSteps(); i.hasMoreElements(); ) {    final MoveStep step=i.nextElement();    if (step.getMovementType(md.isEndStep(step)) == EntityMovementType.MOVE_ILLEGAL) {      break;    }    if (step.getType() == MoveStepType.CHARGE) {      chargeStep=step;    } else {      chargeSrc=step.getPosition();      chargeEl=step.getElevation();    }  }  boolean isReachable=false;  if ((chargeStep != null)) {    isReachable=target.getPosition().equals(chargeStep.getPosition());    if (!isReachable && (target instanceof Entity) && (null != ((Entity)target).getSecondaryPositions())) {      for (      int i : ((Entity)target).getSecondaryPositions().keySet()) {        if (null != ((Entity)target).getSecondaryPositions().get(i)) {          isReachable=((Entity)target).getSecondaryPositions().get(i).equals(chargeStep.getPosition());          if (isReachable) {            break;          }        }      }    }  }  if (!isReachable) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Could not reach target with movement");  }  if (!md.getSecondLastStep().isLegalEndPos()) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Violation of stacking limit in second last step");  }  return toHit(game,target,chargeSrc,chargeEl,chargeStep.getMovementType(true),false,md.contains(MoveStepType.GET_UP) || md.contains(MoveStepType.CAREFUL_STAND));}  }
class C{  public List<T> findByProject(ProjectRestRep project){  return findByProject(ResourceUtils.id(project),null);}  }
class C{  public void render(Writer w) throws IOException {{    final String summary="Showing samples: period=" + t.units;    w.write("<table border=\"1\" summary=\"" + attrib(summary) + "\"\n>");  }{    w.write(" <tr\n>");    w.write("  <th></th\n>");    w.write("  <th>" + "From: " + cdata(formatter.date(t.firstTimestamp)) + "</th\n>");    w.write("  <th colspan=\"*\">" + "To: " + cdata(formatter.date(t.lastTimestamp)) + "</th\n>");    w.write(" </tr\n>");    w.write(" <tr\n>");    w.write("  <th></th\n>");    for (    ICounter counter : t.a) {      w.write("  <th colspan=\"*\">");      formatter.writeFullPath(w,counter.getPath());      w.write("  </th\n>");    }    w.write(" </tr\n>");    w.write(" <tr\n>");    w.write("  <th>Timestamp</th>\n");    for (    ICounter counter : t.a) {      final String[] groups=QueryUtil.getCapturedGroups(pattern,counter);      final String label;      if (groups != null) {        final StringBuilder sb=new StringBuilder();        for (int i=0; i < groups.length; i++) {          final String s=groups[i];          if (i > 0)           sb.append(":");          sb.append(s);        }        label=sb.toString();      } else {        label=counter.getName();      }      w.write("  <th>" + cdata(label) + "</th\n>");    }    w.write(" </tr\n>");  }  for (int row=0; row < t.nrows; row++) {    final String[] valStr=new String[t.a.length];    for (int col=0; col < t.ncols; col++) {      final ICounter c=t.a[col];      final IHistoryEntry e=t.data[row][col];      valStr[col]=formatter.value(c,e == null ? "" : e.getValue());    }    final long timestamp=t.getTimestamp(row);    w.write(" <tr\n>");    w.write("  <td>" + cdata(formatter.date(timestamp)) + "</td\n>");    for (    String s : valStr) {      w.write("  <td>" + s + "</td\n>");    }    w.write(" </tr\n>");  }  w.write("</table\n>");}  }
class C{  private Set<NodePair> nonadjacencies(Graph graph){  Set<NodePair> nonadjacencies=new HashSet<>();  for (  Graph inputPag : input) {    for (    NodePair pair : allNodePairs(inputPag.getNodes())) {      if (!inputPag.isAdjacentTo(pair.getFirst(),pair.getSecond())) {        nonadjacencies.add(new NodePair(graph.getNode(pair.getFirst().getName()),graph.getNode(pair.getSecond().getName())));      }    }  }  return nonadjacencies;}  }
class C{  public static Features empty(){  return new Features(ImmutableSet.of());}  }
class C{  public static void sort(byte[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public BatchOperation(){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.225 -0500",hash_original_method="9587E0C001AA5E4FBDAD3ADB8121DB12",hash_generated_method="7294A5044E5D4CF77099393F4198FD4D") public StringBuilder deleteCharAt(int index){  deleteCharAt0(index);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.555 -0400",hash_original_method="261B8A78A48F018A582463F22AA23698",hash_generated_method="FB8C1CFC9EE357B44C33287CD64731D0") public OrFileFilter(){  this.fileFilters=new ArrayList<IOFileFilter>();}  }
class C{  public static SynapsePropertiesPanel createSynapsePropertiesPanel(final Collection<Synapse> synapseList,final Window parent,final boolean showSpecificRuleParams){  SynapsePropertiesPanel cnip=new SynapsePropertiesPanel(synapseList,parent,showSpecificRuleParams);  cnip.synapseInfoPanel=SynapsePropertiesSimple.createBasicSynapseInfoPanel(synapseList,parent);  cnip.initializeLayout();  return cnip;}  }
class C{  private View fillSpecific(int position,int top){  boolean tempIsSelected=false;  View temp=makeAndAddView(position,top,true,tempIsSelected);  mFirstPosition=position;  View above;  View below;  int nextBottom=getNextChildUpsBottom(position - 1);  int nextTop=getNextChildDownsTop(position + 1);  above=fillUp(position - 1,nextBottom);  adjustViewsUpOrDown();  below=fillDown(position + 1,nextTop);  int childCount=getChildCount();  if (childCount > 0) {    correctTooHigh(childCount);  }  if (tempIsSelected) {    return temp;  } else   if (above != null) {    return above;  } else {    return below;  }}  }
class C{  public JobDetailImpl(String name,Class<? extends Job> jobClass){  this(name,null,jobClass);}  }
class C{  public static void main(String[] args) throws Exception {  HeartMonitorSensor monitor=new HeartMonitorSensor();  DirectProvider dp=new DevelopmentProvider();  System.out.println(dp.getServices().getService(HttpServer.class).getConsoleUrl());  Topology top=dp.newTopology("heartMonitor");  TStream<Map<String,Integer>> readings=top.poll(monitor,1,TimeUnit.MILLISECONDS).filter(null).filter(null);  List<TStream<Map<String,Integer>>> categories=readings.split(6,null);  TStream<Map<String,Integer>> normal=categories.get(0).tag("normal");  TStream<Map<String,Integer>> prehypertension=categories.get(1).tag("prehypertension");  TStream<Map<String,Integer>> hypertension_stage1=categories.get(2).tag("hypertension_stage1");  TStream<Map<String,Integer>> hypertension_stage2=categories.get(3).tag("hypertension_stage2");  TStream<Map<String,Integer>> hypertensive=categories.get(4).tag("hypertensive");  TStream<String> normalAlerts=normal.filter(null).tag("normal").map(null).tag("normal");  TStream<String> prehypertensionAlerts=prehypertension.map(null).tag("prehypertension");  TStream<String> hypertension_stage1Alerts=hypertension_stage1.map(null).tag("hypertension_stage1").modify(null).tag("hypertension_stage1");  TStream<String> hypertension_stage2Alerts=hypertension_stage2.filter(null).tag("hypertension_stage2").peek(null).map(null).tag("hypertension_stage2").modify(null).tag("hypertension_stage2");  TStream<String> hypertensiveAlerts=hypertensive.filter(null).tag("hypertensive").peek(null).map(null).tag("hypertensive").modify(null).tag("hypertensive").modify(null).tag("hypertensive");  TStream<String> normalAndPrehypertensionAlerts=normalAlerts.union(prehypertensionAlerts);  Set<TStream<String>> otherAlerts=new HashSet<>();  otherAlerts.add(hypertension_stage1Alerts);  otherAlerts.add(hypertension_stage2Alerts);  otherAlerts.add(hypertensiveAlerts);  TStream<String> allAlerts=normalAndPrehypertensionAlerts.union(otherAlerts);  allAlerts.sink(null);  dp.submit(top);}  }
class C{  public boolean isActive(){  return _systemManager.isActive();}  }
class C{  public void logDebug(Object message){  logInternal(DEBUG,message,null);}  }
class C{  public static MmContent createIconContent(Uri uri){  final FileDescription desc=FileFactory.getFactory().getFileDescription(uri);  String mime=FileUtils.getMimeTypeFromExtension(uri.getPath());  return ContentManager.createMmContent(uri,mime,desc.getSize(),desc.getName());}  }
class C{  public static HonorRoll zero(UUID accountId,Zone zone,YearMonth yearMonth,String username){  return new HonorRoll(accountId,zone,yearMonth.atDay(1).toString(),username,0,0,0);}  }
class C{  public TwoDPoint(IPoint pt){  this.x=pt.getX();  this.y=pt.getY();}  }
class C{  protected String resolveAttributeName(Node node,Attribute attribute){switch (attributeCase) {case DEFAULT:    return attribute.getName();case RAW:  return attribute.getRawName();case LOWERCASE:return attribute.getRawName().toLowerCase();case UPPERCASE:return attribute.getRawName().toUpperCase();}return null;}  }
class C{  public Promise<BitbucketPullRequest> openPullRequest(@NotNull final String owner,@NotNull final String repositorySlug,@NotNull final BitbucketPullRequest pullRequest) throws IllegalArgumentException {  checkArgument(!isNullOrEmpty(owner),"owner");  checkArgument(!isNullOrEmpty(repositorySlug),"repositorySlug");  checkArgument(pullRequest != null,"pullRequest");  final String requestUrl=getBaseUrl() + REPOSITORIES + "/"+ owner+ "/"+ repositorySlug+ "/pullrequests";  return asyncRequestFactory.createPostRequest(requestUrl,pullRequest).loader(loaderFactory.newLoader()).send(dtoUnmarshallerFactory.newUnmarshaller(BitbucketPullRequest.class));}  }
class C{  public boolean usesContent(){  return usesContent;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case SESSION_IDS:    return isSetSessionIDs();case PACKET:  return isSetPacket();}throw new IllegalStateException();}  }
class C{  public static void equals(Object expectedValue,Object actualValue){  equals(expectedValue,actualValue,null);}  }
class C{  public RequestHandle head(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,new HttpHead(getUrlWithQueryString(isUrlEncodingEnabled,url,params)),null,responseHandler,context);}  }
class C{  private boolean scrollToChildRect(Rect rect,boolean immediate){  final int deltaX=computeScrollDeltaToGetChildRectOnScreenX(rect);  final int deltaY=computeScrollDeltaToGetChildRectOnScreenY(rect);  final boolean scroll=deltaX != 0 || deltaY != 0;  if (scroll) {    if (immediate) {      scrollBy(deltaX,deltaY);    } else {      smoothScrollBy(deltaX,deltaY);    }  }  return scroll;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.456 -0500",hash_original_method="6AC129F323D8E39FC544B245C2D3A08C",hash_generated_method="7C3043EDFD4D4BCCA7DB4EB0E5ABAEF5") public void addEventListener(SIPDialogEventListener newListener){  eventListeners.add(newListener);}  }
class C{  public static void main(String[] args) throws Exception {  Scanner input=new Scanner(System.in);  System.out.print("Enter a file of scores: ");  File file=new File(input.nextLine());  if (!file.exists()) {    System.out.println("File " + file + " does not exist");    System.exit(1);  }  int count=0;  double total=0;  try (Scanner inputFile=new Scanner(file)){    while (inputFile.hasNext()) {      total+=inputFile.nextInt();      count++;    }  }   System.out.println("File " + file.getName());  System.out.println("Total scores: " + total);  System.out.println("Average scores: " + (total / count));}  }
class C{  public void acceptInitializer(IInitializer initializer){}  }
class C{  public static Resource decodeContext(String encodedValue,ValueFactory valueFactory){  if (encodedValue == null) {    return null;  } else   if (NULL_PARAM_VALUE.equals(encodedValue)) {    return null;  } else {    return decodeResource(encodedValue,valueFactory);  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.N4_CLASS_DEFINITION;}  }
class C{  @LargeTest public void testThumbnailH264VGAExceedingFileDuration() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_640x480_30fps_256kbps_1_17.mp4";  boolean flagForException=false;  int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  try {    final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);    final int outWidth=mediaVideoItem.getWidth() / 2;    final int outHeight=mediaVideoItem.getHeight() / 2;    final long atTime=mediaVideoItem.getDuration() + 2000;    mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Exception in Extracting thumbanil with Invalid Time",flagForException);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.254 -0400",hash_original_method="37CE581611F46DA12123359EFF80059E",hash_generated_method="DE6BE77CB4B024DF69719EA7CFFDFE7E") @Override protected void onStart(){  super.onStart();  mStopped=false;  mReallyStopped=false;  mHandler.removeMessages(MSG_REALLY_STOPPED);  if (!mCreated) {    mCreated=true;    mFragments.dispatchActivityCreated();  }  mFragments.noteStateNotSaved();  mFragments.execPendingActions();  if (!mLoadersStarted) {    mLoadersStarted=true;    if (mLoaderManager != null) {      mLoaderManager.doStart();    } else     if (!mCheckedForLoaderManager) {      mLoaderManager=getLoaderManager("(root)",mLoadersStarted,false);      if ((mLoaderManager != null) && (!mLoaderManager.mStarted)) {        mLoaderManager.doStart();      }    }    mCheckedForLoaderManager=true;  }  mFragments.dispatchStart();  if (mAllLoaderManagers != null) {    final int N=mAllLoaderManagers.size();    LoaderManagerImpl loaders[]=new LoaderManagerImpl[N];    for (int i=N - 1; i >= 0; i--) {      loaders[i]=mAllLoaderManagers.get(i);    }    for (int i=0; i < N; i++) {      LoaderManagerImpl lm=loaders[i];      lm.finishRetain();      lm.doReportStart();    }  }}  }
class C{  private static void loadTraceEvents(final CConnection connection,final TraceList traceList,final List<? extends INaviModule> modules) throws SQLException {  final List<List<TraceRegister>> values=loadTraceEventValues(connection,traceList);  final String query="select tid, module_id, address, type from " + CTableNames.TRACE_EVENT_TABLE + " where trace_id = "+ traceList.getId()+ " order by position asc";  final ResultSet resultSet=connection.executeQuery(query,true);  int counter=0;  try {    while (resultSet.next()) {      final long tid=resultSet.getLong("tid");      final int moduleId=resultSet.getInt("module_id");      final INaviModule module=resultSet.wasNull() ? null : findModule(modules,moduleId);      final BreakpointAddress address=new BreakpointAddress(module,new UnrelocatedAddress(PostgreSQLHelpers.loadAddress(resultSet,"address")));      final int event=resultSet.getInt("type");      traceList.addEvent(new TraceEvent(tid,address,TraceEventType.parseInt(event),values.isEmpty() ? new ArrayList<TraceRegister>() : values.get(counter)));      counter++;    }  }  finally {    resultSet.close();  }}  }
class C{  public Object nextElement(){  return nextToken();}  }
class C{  void writeToFile() throws IOException {  final Counter counter=this.clone();  counter.rootCurrentContextsByThreadId.clear();  estimatedMemorySize=new CounterStorage(counter).writeToFile();}  }
class C{  public SelectionMarquee(final float x,final float y){  super();  append(new Rectangle2D.Float(x,y,0.0f,0.0f),false);  setPaint(DEFAULT_PAINT);  setStroke(DEFAULT_STROKE);  setStrokePaint(marqueeColor);  setTransparency(DEFAULT_TRANSPARENCY);}  }
class C{  public boolean RM2StudyMode(String mac){  JsonObject out=broadlinkExecuteCommand(BroadlinkConstants.CMD_RM2_STUDY_ID,BroadlinkConstants.CMD_RM2_STUDY,mac);  int code=out.get(BroadlinkConstants.CODE).getAsInt();  return code == 0;}  }
class C{  public CoapEndpoint(){  this(0);}  }
class C{  @Override public IAgent anyValue(final IScope scope){  if (populationSets.size() == 0) {    return null;  }  final RandomUtils r=scope.getRandom();  final int i=r.between(0,populationSets.size() - 1);  return populationSets.get(i).anyValue(scope);}  }
class C{  public void info(String s){  if (isEnabled(TraceSystem.INFO)) {    traceWriter.write(TraceSystem.INFO,module,s,null);  }}  }
class C{  public boolean isSOPriceList(){  Object oo=get_Value(COLUMNNAME_IsSOPriceList);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void writeEndComponent() throws IOException {  if (stack.isEmpty()) {    throw new IllegalStateException(Messages.INSTANCE.getExceptionMessage(2));  }  Info cur=stack.removeLast();  if (!cur.wroteEndPropertiesArray) {    generator.writeEndArray();  }  if (!cur.wroteStartSubComponentsArray) {    generator.writeStartArray();  }  generator.writeEndArray();  generator.writeEndArray();  componentEnded=true;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  @Override public String toString(){  final StringBuilder b=new StringBuilder();  if (matcher != null) {    b.append(matcher.toString());    b.append(ExpressionMatcher.PM_SEPARATOR);  }  if (normalized.length() > 0) {    b.append(normalized);  } else {    b.append(original);  }  return b.toString();}  }
class C{  public void copy(EditSession editSession,Region region){  for (int x=0; x < size.getBlockX(); ++x) {    for (int y=0; y < size.getBlockY(); ++y) {      for (int z=0; z < size.getBlockZ(); ++z) {        final Vector pt=new Vector(x,y,z).add(getOrigin());        if (region.contains(pt)) {          setBlock(x,y,z,editSession.getBlock(pt));        } else {          setBlock(x,y,z,null);        }      }    }  }}  }
class C{  public void resetTurnIndex(){  turnIndex=-1;}  }
class C{  public ADNode(){}  }
class C{  public IndicNormalizationFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public ServerHello(SecureRandom sr,byte[] server_version,byte[] session_id,CipherSuite cipher_suite,byte compression_method){  long gmt_unix_time=new java.util.Date().getTime() / 1000;  sr.nextBytes(random);  random[0]=(byte)((gmt_unix_time & 0xFF000000) >>> 24);  random[1]=(byte)((gmt_unix_time & 0xFF0000) >>> 16);  random[2]=(byte)((gmt_unix_time & 0xFF00) >>> 8);  random[3]=(byte)(gmt_unix_time & 0xFF);  this.session_id=session_id;  this.cipher_suite=cipher_suite;  this.compression_method=compression_method;  this.server_version=server_version;  length=38 + session_id.length;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Node psNode;  String psName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(1);  psNode=nameNode.getPreviousSibling();  psName=psNode.getNodeName();  assertEquals("whitespace","#text",psName);}  }
class C{  public double computeInvokeRelevance(Invoke invoke){  double invokeProbability=nodeProbabilities.applyAsDouble(invoke.asNode());  assert !Double.isNaN(invokeProbability);  double relevance=(invokeProbability / getFastPathMinProbability()) * Math.min(1.0,getScopeRelevanceWithinParent());  assert !Double.isNaN(relevance) : invoke + ": " + relevance+ " / "+ invokeProbability+ " / "+ getFastPathMinProbability()+ " / "+ getScopeRelevanceWithinParent();  return relevance;}  }
class C{  public void verify(UUID verifierNodeId){  this.verifierNodeId=verifierNodeId;}  }
class C{  public boolean isPartOfCqResult(Object key){  if (this.cqResultKeys == null) {    logger.warn(LocalizedMessage.create(LocalizedStrings.CqQueryImpl_Null_CQ_Result_Key_Cache_0));    return false;  }synchronized (this.cqResultKeys) {    if (this.destroysWhileCqResultsInProgress != null) {      for (      Object k : this.destroysWhileCqResultsInProgress) {        this.cqResultKeys.remove(k);      }      this.destroysWhileCqResultsInProgress=null;    }    return this.cqResultKeys.containsKey(key);  }}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public OMRaster(double lt,double ln,int w,int h,byte[] bytes,Color[] colorTable,int trans){  super(RENDERTYPE_LATLON,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  setColorModel(COLORMODEL_INDEXED);  lat=lt;  lon=ln;  width=w;  height=h;  bits=bytes;  transparent=trans;  if (colorTable != null) {    setColors(colorTable);  }  if (bits != null && bits.length != 0) {    if (colorTable != null && colors.length != 0) {      pixels=computePixels(bits);    }  } else {    bits=new byte[height * width];  }}  }
class C{  public void removeZone(final StendhalRPZone zone){  zonesToRemove.add(zone);}  }
class C{  private void processElementPoint(List<double[]> points,Node cur){  double[] point=null;  String vstr=((Element)cur).getAttribute(ATTR_VECTOR);  if (vstr != null && vstr.length() > 0) {    point=parseVector(vstr);  }  if (point == null) {    throw new AbortException("No translation vector given.");  }  points.add(point);  XMLNodeIterator iter=new XMLNodeIterator(cur.getFirstChild());  while (iter.hasNext()) {    Node child=iter.next();    if (child.getNodeType() == Node.ELEMENT_NODE) {      LOG.warning("Unknown element in XML specification file: " + child.getNodeName());    }  }}  }
class C{  public static void registerCommands(){  getCommands().forEach(null);}  }
class C{  public void addOrder(Order order){  try {    dataManager.putData(getOrderPath(uniqueId,order),order.getId());    if (log.isDebugEnabled()) {      log.debug("Tracking order: " + order.getId());    }  } catch (  Exception e) {    log.error("Error adding order " + order.getId() + " to EngineState",e);  }}  }
class C{  public TransformGroup createModel(){  TransformGroup globalTG=new TransformGroup();  globalTG.setCapability(TransformGroup.ALLOW_CHILDREN_READ);  globalTG.setCapability(TransformGroup.ALLOW_CHILDREN_WRITE);  globalTG.setCapability(TransformGroup.ALLOW_CHILDREN_EXTEND);  if (field == null)   return globalTG;  QuadPortrayal quadPortrayal=(QuadPortrayal)getPortrayalForObject(tmpGCI);  Grid2D field=(Grid2D)(this.field);  GeometryArray ga;  if (!useTriangles)   ga=new QuadArray(4 * field.getWidth() * field.getHeight(),QuadArray.COORDINATES | QuadArray.COLOR_3 | (image != null ? QuadArray.TEXTURE_COORDINATE_2 : 0)); else {    int[] lengths=new int[field.getWidth() * field.getHeight()];    for (int i=0; i < lengths.length; i++)     lengths[i]=4;    ga=new TriangleFanArray(4 * lengths.length,TriangleFanArray.COORDINATES | TriangleFanArray.COLOR_3 | (image != null ? QuadArray.TEXTURE_COORDINATE_2 : 0),lengths);  }  ga.setCapability(QuadArray.ALLOW_COLOR_WRITE);  ga.setCapability(QuadArray.ALLOW_COORDINATE_WRITE);  SimplePortrayal3D.setPickableFlags(ga);  tmpVect.z=0;  int quadIndex=0;  final int width=field.getWidth();  final int height=field.getHeight();  for (int i=0; i < width; i++) {    tmpGCI.x=i;    tmpVect.x=i;    for (int j=0; j < height; j++) {      tmpGCI.y=j;      tmpVect.y=j;      quadPortrayal.setData(tmpGCI,coords,colors,quadIndex,width,height);      quadIndex++;    }  }  ga.setCoordinates(0,coords);  ga.setColors(0,colors);  Shape3D shape=new Shape3D(ga);  shape.setCapability(Shape3D.ALLOW_GEOMETRY_READ);  Appearance appearance;  if (image != null) {    appearance=SimplePortrayal3D.appearanceForImage(image,true);    TexCoordGeneration tex=new TexCoordGeneration();    Vector4f s=new Vector4f(1f / width,0,0,0);    tex.setPlaneS(s);    Vector4f t=new Vector4f(0,1f / height,0,0);    tex.setPlaneT(t);    appearance.setTexCoordGeneration(tex);  } else {    appearance=new Appearance();    if (transparency < 1.0f) {      appearance.setTransparencyAttributes(new TransparencyAttributes(TransparencyAttributes.BLENDED,1.0f - (float)transparency));    }  }  appearance.setCapability(Appearance.ALLOW_POLYGON_ATTRIBUTES_WRITE);  appearance.setPolygonAttributes(mPolyAttributes);  appearance.setColoringAttributes(new ColoringAttributes(1.0f,1.0f,1.0f,ColoringAttributes.SHADE_GOURAUD));  shape.setAppearance(appearance);  LocationWrapper pi=new LocationWrapper(null,null,this);  shape.setUserData(pi);  BranchGroup bg=new BranchGroup();  bg.setCapability(BranchGroup.ALLOW_CHILDREN_READ);  bg.setCapability(BranchGroup.ALLOW_DETACH);  bg.addChild(shape);  globalTG.addChild(bg);  return globalTG;}  }
class C{  public ObjectFactory(){}  }
class C{  private void correctTooLow(int childCount){  if (mFirstPosition == 0 && childCount > 0) {    final int firstTop=getHighestChildTop();    final int start=getListPaddingTop();    final int end=(getTop() - getBottom()) - getListPaddingBottom();    int topOffset=firstTop - start;    final int lastBottom=getLowestChildBottom();    int lastPosition=mFirstPosition + childCount - 1;    if (topOffset > 0) {      if (lastPosition < mItemCount - 1 || lastBottom > end) {        if (lastPosition == mItemCount - 1) {          topOffset=Math.min(topOffset,lastBottom - end);        }        offsetChildrenTopAndBottom(-topOffset);        if (lastPosition < mItemCount - 1) {          int nextPosition=lastPosition + 1;          fillDown(nextPosition,getNextChildDownsTop(nextPosition));          adjustViewsUpOrDown();        }      } else       if (lastPosition == mItemCount - 1) {        adjustViewsUpOrDown();      }    }  }}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,final Intent data){  if (!mComposeView.onActivityResult(requestCode,resultCode,data)) {  }}  }
class C{  public short acceptNode(int n){  XPathContext xctxt=getXPathContext();  try {    xctxt.pushCurrentNode(n);    for (int i=0; i < m_nodeTests.length; i++) {      PredicatedNodeTest pnt=m_nodeTests[i];      XObject score=pnt.execute(xctxt,n);      if (score != NodeTest.SCORE_NONE) {        if (pnt.getPredicateCount() > 0) {          if (pnt.executePredicates(n,xctxt))           return DTMIterator.FILTER_ACCEPT;        } else         return DTMIterator.FILTER_ACCEPT;      }    }  } catch (  javax.xml.transform.TransformerException se) {    throw new RuntimeException(se.getMessage());  } finally {    xctxt.popCurrentNode();  }  return DTMIterator.FILTER_SKIP;}  }
class C{  private void testProbability(double probability){  Swap swap=new Swap(probability);  int count=0;  for (int i=0; i < TestThresholds.SAMPLES; i++) {    Solution original=new Solution(1,0);    original.setVariable(0,new Permutation(100));    Solution mutated=swap.evolve(new Solution[]{original})[0];    if (testSwap((Permutation)original.getVariable(0),(Permutation)mutated.getVariable(0))) {      count++;    }  }  Assert.assertEquals((double)count / TestThresholds.SAMPLES,probability,TestThresholds.VARIATION_EPS);}  }
class C{  private static boolean isDeepStorageNeeded(){  if (!checkedInterface) {    try {      deepStoragePresent=(Class.forName("powercrystals.minefactoryreloaded.api.IDeepStorageUnit") != null);    } catch (    ClassNotFoundException e) {      deepStoragePresent=false;    }    checkedInterface=true;    Botania.LOGGER.info("Corporea support for Deep Storage: %b",deepStoragePresent);  }  return deepStoragePresent;}  }
class C{  public DebuggerException(final String exceptionName,final long exceptionCode,final DebuggerExceptionHandlingAction exceptionAction){  Preconditions.checkArgument(!exceptionName.isEmpty(),"IE00181: Exception name can not be empty");  this.name=Preconditions.checkNotNull(exceptionName,"IE00047: exceptionName argument can not be null");  this.exceptionCode=exceptionCode;  this.exceptionAction=Preconditions.checkNotNull(exceptionAction,"IE02119: exceptionAction argument can not be null");}  }
class C{  @SuppressWarnings("unused") public GoogleCredentials createScoped(Collection<String> scopes){  return this;}  }
class C{  public static void clearThreadLocalMap(){  try {    CLEAR_THREAD_LOCAL_MAP.invoke(null);  } catch (  final IllegalAccessException e) {    throw new AssertionError(e);  }catch (  final InvocationTargetException e) {    throw new AssertionError(e);  }}  }
class C{  public Font[] loadFonts(byte[] b) throws IOException {  WritableFontData rfd=WritableFontData.createWritableFontData(b);  if (isCollection(rfd)) {    return loadCollection(rfd);  }  return new Font[]{loadSingleOTF(rfd)};}  }
class C{  boolean addTableToDocument() throws DocumentException {  return addToDocument(table);}  }
class C{  public static boolean cs_cholsol(int order,Scs A,float[] b){  float x[];  Scss S;  Scsn N;  int n;  boolean ok;  if (!Scs_util.CS_CSC(A) || b == null)   return (false);  n=A.n;  S=Scs_schol.cs_schol(order,A);  N=Scs_chol.cs_chol(A,S);  x=new float[n];  ok=(S != null && N != null);  if (ok) {    Scs_ipvec.cs_ipvec(S.pinv,b,x,n);    Scs_lsolve.cs_lsolve(N.L,x);    Scs_ltsolve.cs_ltsolve(N.L,x);    Scs_pvec.cs_pvec(S.pinv,x,b,n);  }  return (ok);}  }
class C{  public OutOfSequenceNotification(){  super(null);}  }
class C{  public static double loss(double pred,double y){  return Math.abs(y - pred);}  }
class C{  public long backoff(int attempt){  long duration=base * (long)Math.pow(factor,attempt);  if (jitter != 0) {    double random=Math.random();    int deviation=(int)Math.floor(random * jitter * duration);    if ((((int)Math.floor(random * 10)) & 1) == 0) {      duration=duration - deviation;    } else {      duration=duration + deviation;    }  }  if (duration < 0) {    duration=Long.MAX_VALUE;  }  return Math.min(Math.max(duration,base),cap);}  }
class C{  @Ignore("This is performance test for manual checks only") @Test public void testSerializationPerformance() throws Exception {  serializationPerformanceRoutine(new ShoppingCartStateSerializerSdkImpl(),10000,100,5,5);}  }
class C{  public void prepareClassOptions(TaskMonitor monitor,ObjectRepository repository){  this.classOptionNamesToPreparedObjects=null;  Option[] optionArray=getOptions().getOptionArray();  for (  Option option : optionArray) {    if (option instanceof ClassOption) {      ClassOption classOption=(ClassOption)option;      monitor.setCurrentActivity("Materializing option " + classOption.getName() + "...",-1.0);      Object optionObj=classOption.materializeObject(monitor,repository);      if (monitor.taskShouldAbort()) {        return;      }      if (optionObj instanceof OptionHandler) {        monitor.setCurrentActivity("Preparing option " + classOption.getName() + "...",-1.0);        ((OptionHandler)optionObj).prepareForUse(monitor,repository);        if (monitor.taskShouldAbort()) {          return;        }      }      if (this.classOptionNamesToPreparedObjects == null) {        this.classOptionNamesToPreparedObjects=new HashMap<String,Object>();      }      this.classOptionNamesToPreparedObjects.put(option.getName(),optionObj);    }  }}  }
class C{  public CtClass makeClass(ClassFile classfile) throws RuntimeException {  return makeClass(classfile,true);}  }
class C{  private void updateStepStatus(String stepId,StepState state,ServiceCode code,String message,boolean automaticRollback) throws WorkflowException {  String workflowPath=getZKStep2WorkflowPath(stepId);  Workflow workflow=null;  boolean workflowDeleted=false;  InterProcessLock lock=null;  try {    workflowPath=(String)_dataManager.getData(workflowPath,false);    if (workflowPath == null) {      return;    }    workflow=(Workflow)_dataManager.getData(workflowPath,false);    if (workflow == null) {      WorkflowException ex=WorkflowException.exceptions.workflowNotFound(workflowPath);      _log.info("Workflow not found: " + workflowPath,ex);      throw ex;    }    lock=lockWorkflow(workflow);    workflow=loadWorkflow(workflow);    if (workflow == null) {      WorkflowException ex=WorkflowException.exceptions.workflowNotFound(workflowPath);      _log.info("Workflow not found: " + workflowPath,ex);      throw ex;    }synchronized (workflow) {      StepStatus status=workflow.getStepStatus(stepId);      if (status.isTerminalState() && !(status.state == StepState.SUSPENDED_NO_ERROR)) {        WorkflowException ex=WorkflowException.exceptions.workflowStepInTerminalState(stepId,status.state.name(),state.name());        _log.error(String.format("Step %s is already in terminal state %s, trying to change to %s which will be ignored",stepId,status.state.toString(),state.toString()),ex);        return;      }      Step step=workflow.getStepMap().get(stepId);      if (StepState.ERROR == state && workflow.isSuspendOnError() && !workflow.isRollbackState()) {        state=StepState.SUSPENDED_ERROR;        step.suspendStep=false;      }      if (step.isRollbackStep()) {        if (step.foundingStepId != null) {          if (workflow.getStepMap().get(step.foundingStepId) != null) {            Step foundingStep=workflow.getStepMap().get(step.foundingStepId);            StepStatus foundingStatus=workflow.getStepStatus(step.foundingStepId);            if (StepState.SUSPENDED_ERROR.equals(foundingStatus.state)) {              foundingStatus.updateState(StepState.ERROR,code,message);              persistWorkflowStep(workflow,foundingStep);            }          }        }      }      _log.info(String.format("Updating workflow step: %s state %s : %s",stepId,state,message));      status.updateState(state,code,message);      persistWorkflowStep(workflow,step);      if (status.isTerminalState()) {        boolean releasedLocks=_ownerLocker.releaseLocks(stepId);        if (!releasedLocks) {          _log.info("Unable to release StepLocks for step: " + stepId);        }        checkBlockedSteps(workflow,stepId);      }      if (workflow.allStatesTerminal()) {        workflowDeleted=doWorkflowEndProcessing(workflow,automaticRollback,lock);        if (workflowDeleted) {          lock=null;        }      }    }  } catch (  Exception ex) {    String exMsg="Exception processing updateStepStatus stepId: " + stepId + ": "+ ex.getMessage();    _log.error(exMsg,ex);    throw new WorkflowException(exMsg,ex);  } finally {    unlockWorkflow(workflow,lock);    if (workflowDeleted) {      deleteWorkflowLock(workflow);    }  }}  }
class C{  public static Request<byte[]> createByteArrayRequest(String url,RequestMethod method){  return new ByteArrayRequest(url,method);}  }
class C{  private void generateRecursive(List<double[]> weights,double[] weight,int numberOfObjectives,int left,int total,int index){  if (index == (numberOfObjectives - 1)) {    weight[index]=(double)left / total;    weights.add(weight.clone());  } else {    for (int i=0; i <= left; i+=1) {      weight[index]=(double)i / total;      generateRecursive(weights,weight,numberOfObjectives,left - i,total,index + 1);    }  }}  }
class C{  String generateUnionQuery(List<String> historyLogMembers,String[] selectionArgs,String selection){  if (selectionArgs == null) {    return generateParamlessUnionQuery(historyLogMembers,selection);  }  return generateUnionQuery(historyLogMembers);}  }
class C{  protected String fixParameterName(String paramNameIn) throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    if (((paramNameIn == null) || (paramNameIn.length() == 0)) && (!hasParametersView())) {      throw SQLError.createSQLException(((Messages.getString("CallableStatement.0") + paramNameIn) == null) ? Messages.getString("CallableStatement.15") : Messages.getString("CallableStatement.16"),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,getExceptionInterceptor());    }    if ((paramNameIn == null) && (hasParametersView())) {      paramNameIn="nullpn";    }    if (this.connection.getNoAccessToProcedureBodies()) {      throw SQLError.createSQLException("No access to parameters by name when connection has been configured not to access procedure bodies",SQLError.SQL_STATE_ILLEGAL_ARGUMENT,getExceptionInterceptor());    }    return mangleParameterName(paramNameIn);  }}  }
class C{  public static boolean containsString(String urlString,String word){  ArrayList<String> list=new ArrayList<>();  try {    java.net.URL url=new java.net.URL(urlString);    Scanner input=new Scanner(url.openStream());    while (input.hasNext()) {      String line=input.nextLine();      if (line.contains(word))       return true;    }  } catch (  java.net.MalformedURLException ex) {    System.out.println("Invalid URL");  }catch (  java.io.IOException ex) {    System.out.println("I/O Errors: no such file");  }  return false;}  }
class C{  private void resetSpinners(){  physicalLocation.setValue(new PhysicalLocation());}  }
class C{  public static VasaProviderInfo parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  VasaProviderInfo object=new VasaProviderInfo();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"VasaProviderInfo".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (VasaProviderInfo)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list5=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","defaultNamespace").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setDefaultNamespace(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","defaultSessionTimeoutInSeconds").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setDefaultSessionTimeoutInSeconds(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(content));      reader.next();    } else {      object.setDefaultSessionTimeoutInSeconds(java.lang.Long.MIN_VALUE);    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","name").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","sessionId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setSessionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","supportedVendorModel").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list5.add(null);        reader.next();      } else {        list5.add(VendorModel.Factory.parse(reader));      }      boolean loopDone5=false;      while (!loopDone5) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone5=true;        } else {          if (new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","supportedVendorModel").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list5.add(null);              reader.next();            } else {              list5.add(VendorModel.Factory.parse(reader));            }          } else {            loopDone5=true;          }        }      }      object.setSupportedVendorModel((VendorModel[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(VendorModel.class,list5));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","vasaApiVersion").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setVasaApiVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","vasaProviderVersion").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setVasaProviderVersion(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static List<String> readLines(InputStream input,Charset encoding) throws IOException {  InputStreamReader reader=new InputStreamReader(input,Charsets.toCharset(encoding));  return readLines(reader);}  }
class C{  public int nextStep(RouteInfo plan,RouteInfo fact){  if (plan == null) {    throw new IllegalArgumentException("Planned route may not be null.");  }  int step=UNREACHABLE;  if ((fact == null) || (fact.getHopCount() < 1))   step=firstStep(plan); else   if (plan.getHopCount() > 1)   step=proxiedStep(plan,fact); else   step=directStep(plan,fact);  return step;}  }
class C{  @Override public boolean isChildSelectable(int i,int i2){  return false;}  }
class C{  public <T>T evaluate(String expressionString,Class<T> desiredResultType,Map<String,Object> variables){  return evaluate(parseExpression(expressionString),desiredResultType,variables);}  }
class C{  <T>void finishRequest(SmashRequest<T> request){synchronized (mCurrentRequests) {    mCurrentRequests.remove(request);  }}  }
class C{  public void notifyChanged(){  getData().notifyMapDataChanged();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (kind: ");  result.append(kind);  result.append(')');  return result.toString();}  }
class C{  protected void verify(String subId,Date periods[][],BigDecimal expectedPrice,BigDecimal discounAmount,int paramTestMonth) throws Exception {  verify(subId,periods,expectedPrice,discounAmount,paramTestMonth,null,null);}  }
class C{  public void testloadAuthenticationInformation_and_setSystemProperties_4_Connector(){  resetSecuritySystemProperties();  AuthenticationInfo authInfo=null;  try {    authInfo=SecurityHelper.loadAuthenticationInformation("sample.security.properties",false,TUNGSTEN_APPLICATION_NAME.CONNECTOR);  } catch (  ConfigurationException e) {    assertFalse("Could not load authentication and securiy information",true);  }  assertNotNull(authInfo);  String systemProperty=null;  systemProperty=System.getProperty("javax.net.ssl.keyStore",null);  assertNotNull(systemProperty);  assertTrue(systemProperty.contains("connector"));  systemProperty=System.getProperty("javax.net.ssl.keyStorePassword",null);  assertNotNull(systemProperty);  assertTrue(systemProperty.contains("connector"));  systemProperty=System.getProperty("javax.net.ssl.trustStore",null);  assertNotNull(systemProperty);  assertTrue(systemProperty.contains("connector"));  systemProperty=System.getProperty("javax.net.ssl.trustStorePassword",null);  assertNotNull(systemProperty);  assertTrue(systemProperty.contains("connector"));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.692 -0400",hash_original_method="FBD9644058871D6B70CEE26395B2811C",hash_generated_method="6CE490EC4D592776EFA25C8337BE8F7F") public void destroy(){  if (mGrammar != 0) {    SR_GrammarDestroy(mGrammar);    mGrammar=0;  }}  }
class C{  private void cmd_button(){  log.config("Activity=" + m_activity);  if (m_activity == null)   return;  MWFNode node=m_activity.getNode();  if (MWFNode.ACTION_UserWindow.equals(node.getAction())) {    int AD_Window_ID=node.getAD_Window_ID();    String ColumnName=m_activity.getPO().get_TableName() + "_ID";    int Record_ID=m_activity.getRecord_ID();    MQuery query=MQuery.getEqualQuery(ColumnName,Record_ID);    boolean IsSOTrx=m_activity.isSOTrx();    log.info("Zoom to AD_Window_ID=" + AD_Window_ID + " - "+ query+ " (IsSOTrx="+ IsSOTrx+ ")");    AEnv.zoom(AD_Window_ID,query);  } else   if (MWFNode.ACTION_UserForm.equals(node.getAction())) {    int AD_Form_ID=node.getAD_Form_ID();    Window form=ADForm.openForm(AD_Form_ID);    AEnv.showWindow(form);  } else   if (MWFNode.ACTION_SmartBrowse.equals(node.getAction())) {    int AD_Browse_ID=node.getAD_Browse_ID();    Window browse=WBrowser.openBrowse(AD_Browse_ID);    AEnv.showWindow(browse);  } else   log.log(Level.SEVERE,"No User Action:" + node.getAction());}  }
class C{  public void compileSingleFiles(List<File> projectRoots,List<File> modelFiles,IssueAcceptor issueAcceptor) throws N4JSCompileException {  compileProjects(projectRoots,Collections.emptyList(),modelFiles,issueAcceptor);}  }
class C{  public boolean close(){  for (  final INaviFunction function : m_functions) {    if (function.isLoaded() && function.close()) {      return false;    }  }  return true;}  }
class C{  public static Domain extractEmptyDomain(String topDomainFile){  return extractDomain(topDomainFile,false);}  }
class C{  protected static void emit_package(PrintStream out){  if (package_name != null)   out.println("package " + package_name + ";\n");}  }
class C{  public void clear(){  if (size() == 0)   return;  buffer=new char[buffer.length];  root.next=null;  pos=0;  length=0;  curr=root;}  }
class C{  void calculateLongestLine(){  Component c=getContainer();  font=c.getFont();  metrics=c.getFontMetrics(font);  tabSize=getTabSize() * metrics.charWidth(' ');  Element lines=getElement();  int n=lines.getElementCount();  for (int i=0; i < n; i++) {    Element line=lines.getElement(i);    float w=getLineWidth(i);    if (w > longLineWidth) {      longLineWidth=w;      longLine=line;    }  }}  }
class C{  public static String pad(String str,int totalChars){  if (str == null)   str="null";  int slen=str.length();  StringBuffer sb=new StringBuffer(str);  for (int i=0; i < totalChars - slen; i++) {    sb.append(" ");  }  return sb.toString();}  }
class C{  @Override public int clusterInstance(Instance instance) throws Exception {  m_ReplaceMissingFilter.input(instance);  m_ReplaceMissingFilter.batchFinished();  Instance inst=m_ReplaceMissingFilter.output();  return clusterProcessedInstance(inst);}  }
class C{  public void removeAllHintIcons(){  this.mHintIconArray.clear();  this.mHintIcons.removeAllViews();}  }
class C{  public boolean insert(E elem){  Boolean b=table.get(elem);  if (b == null || b == false) {    return false;  }  return true;}  }
class C{  private int typeToBitMask(int type){  assert type >= MIN_TYPE && type <= MAX_TYPE : "Invalid node type " + type;  return 1 << type;}  }
class C{  public void accept(final DownloadFileDescription download,final Consumer<Integer> progressUpdateListener,final Runnable completionListener,final JProgressBar progressBar){synchronized (this) {    if (downloadSet.contains(download)) {      return;    } else {      downloadSet.add(download);    }  }  DownloadFile downloadFile=new DownloadFile(download,progressUpdateListener,completionListener);  Runnable progressBarStarter=null;  downloadMap.put(downloadFile,progressBarStarter);}  }
class C{  private void closeClient(){  try {    if (this.mutator != null) {      this.mutator.close();      this.mutator=null;    }    if (this.hconnection != null) {      this.hconnection.close();      this.hconnection=null;    }  } catch (  IOException e) {    LOG.warn("Failed to close HBase connection. " + e.getMessage());  }}  }
class C{  public TourGuide with(Technique technique){  mTechnique=technique;  return this;}  }
class C{  public Object readFont(Element node) throws Exception {  Object result;  Vector<Element> children;  Element child;  int i;  int style;  int size;  String name;  String fontname;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  result=null;  children=XMLDocument.getChildTags(node);  fontname="";  style=0;  size=0;  for (i=0; i < children.size(); i++) {    child=children.get(i);    name=child.getAttribute(ATT_NAME);    if (name.equals(VAL_NAME)) {      name=(String)invokeReadFromXML(child);    } else     if (name.equals(VAL_STYLE)) {      style=readIntFromXML(child);    } else     if (name.equals(VAL_SIZE)) {      size=readIntFromXML(child);    } else {      System.out.println("WARNING: '" + name + "' is not a recognized name for "+ node.getAttribute(ATT_NAME)+ "!");    }  }  result=new Font(fontname,style,size);  return result;}  }
class C{  public static byte[] digest(final DigestAlgorithm digestAlgorithm,final DSSDocument document) throws DSSException {  final MessageDigest messageDigest=getMessageDigest(digestAlgorithm);  byte[] buffer=new byte[1024];  int count=-1;  InputStream stream=document.openStream();  try {    while ((count=stream.read(buffer)) > 0) {      messageDigest.update(buffer,0,count);    }  } catch (  IOException e) {    throw new DSSException(e);  }  final byte[] digestValue=messageDigest.digest();  return digestValue;}  }
class C{  public void stop(){  timer.stop();}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public void tickPrice(int reqId,int field,double value,int canAutoExecute){  try {    BigDecimal price=(new BigDecimal(value)).setScale(SCALE,BigDecimal.ROUND_HALF_EVEN);synchronized (price) {      if (!m_marketDataRequests.containsKey(new Integer(reqId)))       return;      Contract contract=m_marketDataRequests.get(reqId);      for (      Tradestrategy tradestrategy : contract.getTradestrategies()) {        Contract seriesContract=tradestrategy.getStrategyData().getBaseCandleSeries().getContract();switch (field) {case TickType.ASK:{            seriesContract.setLastAskPrice(price);            break;          }case TickType.BID:{          seriesContract.setLastBidPrice(price);          break;        }case TickType.LAST:{        seriesContract.setLastPrice(price);        break;      }default :{      break;    }}}}} catch (Exception ex) {error(reqId,3210,ex.getMessage());}}  }
class C{  private void initializeLiveAttributes(){  type=createLiveAnimatedEnumeration(null,SVG_TYPE_ATTRIBUTE,TYPE_VALUES,(short)1);  tableValues=createLiveAnimatedNumberList(null,SVG_TABLE_VALUES_ATTRIBUTE,SVG_COMPONENT_TRANSFER_FUNCTION_TABLE_VALUES_DEFAULT_VALUE,false);  slope=createLiveAnimatedNumber(null,SVG_SLOPE_ATTRIBUTE,1f);  intercept=createLiveAnimatedNumber(null,SVG_INTERCEPT_ATTRIBUTE,0f);  amplitude=createLiveAnimatedNumber(null,SVG_AMPLITUDE_ATTRIBUTE,1f);  exponent=createLiveAnimatedNumber(null,SVG_EXPONENT_ATTRIBUTE,1f);  offset=createLiveAnimatedNumber(null,SVG_EXPONENT_ATTRIBUTE,0f);}  }
class C{  public Duration withDurationAdded(ReadableDuration durationToAdd,int scalar){  if (durationToAdd == null || scalar == 0) {    return this;  }  return withDurationAdded(durationToAdd.getMillis(),scalar);}  }
class C{  @SuppressWarnings("unchecked") private <V>TypeLiteral<V> newGenericType(Class<?> base){  final ParameterizedType newType=Types.newParameterizedType(base,type.getType());  return (TypeLiteral<V>)TypeLiteral.get(newType);}  }
class C{  public void ready(JobRecord job,String contextId) throws EventHandlerException {  job.setState(JobState.READY);  DAGNode node=dagNodeDB.get(InternalSchemaHelper.normalizeId(job.getId()),contextId);  StringBuilder readyJobLogging=new StringBuilder(" --- JobRecord ").append(job.getId()).append(" is ready.").append(" Job isBlocking=").append(job.isBlocking()).append("\n");  for (  PortCounter portCounter : job.getInputCounters()) {    readyJobLogging.append(" --- Input port ").append(portCounter.getPort()).append(", isScatter=").append(portCounter.isScatter()).append(", isBlocking ").append(job.isInputPortBlocking(node,portCounter.getPort())).append("\n");  }  readyJobLogging.append(" --- All scatter ports ").append(job.getScatterPorts()).append("\n");  logger.debug(readyJobLogging.toString());  if (job.isContainer()) {    job.setState(JobState.RUNNING);    DAGContainer containerNode;    if (job.isScattered()) {      containerNode=(DAGContainer)node;    } else {      containerNode=(DAGContainer)node;    }    rollOutContainer(job,containerNode,contextId);    List<LinkRecord> containerLinks=linkRecordService.findBySourceAndSourceType(job.getId(),LinkPortType.INPUT,contextId);    if (containerLinks.isEmpty()) {      Set<String> immediateReadyNodeIds=findImmediateReadyNodes(containerNode);      for (      String readyNodeId : immediateReadyNodeIds) {        JobRecord childJobRecord=jobRecordService.find(readyNodeId,contextId);        if (childJobRecord.isContainer() || childJobRecord.isScatterWrapper()) {          ready(childJobRecord,contextId);        } else {          JobStatusEvent jobStatusEvent=new JobStatusEvent(childJobRecord.getId(),contextId,JobState.READY,null);          eventProcessor.send(jobStatusEvent);        }      }    } else {      for (      LinkRecord link : containerLinks) {        VariableRecord sourceVariable=variableRecordService.find(link.getSourceJobId(),link.getSourceJobPort(),LinkPortType.INPUT,contextId);        VariableRecord destinationVariable=variableRecordService.find(link.getDestinationJobId(),link.getDestinationJobPort(),LinkPortType.INPUT,contextId);        if (destinationVariable == null) {          VariableRecord stepVariable=new VariableRecord(contextId,link.getDestinationJobId(),sourceVariable.getPortId(),LinkPortType.INPUT,sourceVariable.getValue(),null);          variableRecordService.create(stepVariable);        }        Event updateEvent=new InputUpdateEvent(contextId,link.getDestinationJobId(),link.getDestinationJobPort(),sourceVariable.getValue(),link.getPosition());        eventProcessor.send(updateEvent);      }    }  } else   if (!job.isScattered() && job.getScatterPorts().size() > 0) {    job.setState(JobState.RUNNING);    for (    String port : job.getScatterPorts()) {      VariableRecord variable=variableRecordService.find(job.getId(),port,LinkPortType.INPUT,contextId);      scatterHelper.scatterPort(job,port,variable.getValue(),1,null,false,false);    }  }}  }
class C{  public boolean isGreaterThan(Days other){  if (other == null) {    return getValue() > 0;  }  return getValue() > other.getValue();}  }
class C{  public void testBug6966() throws Exception {  Properties props=new Driver().parseURL(BaseTestCase.dbUrl,null);  props.setProperty("autoReconnect","true");  props.setProperty("socketFactory","testsuite.UnreliableSocketFactory");  Properties urlProps=new NonRegisteringDriver().parseURL(dbUrl,null);  String host=urlProps.getProperty(NonRegisteringDriver.HOST_PROPERTY_KEY);  String port=urlProps.getProperty(NonRegisteringDriver.PORT_PROPERTY_KEY);  props.remove(NonRegisteringDriver.HOST_PROPERTY_KEY);  props.remove(NonRegisteringDriver.NUM_HOSTS_PROPERTY_KEY);  props.remove(NonRegisteringDriver.HOST_PROPERTY_KEY + ".1");  props.remove(NonRegisteringDriver.PORT_PROPERTY_KEY + ".1");  props.setProperty("queriesBeforeRetryMaster","50");  props.setProperty("maxReconnects","1");  UnreliableSocketFactory.mapHost("master",host);  UnreliableSocketFactory.mapHost("slave",host);  UnreliableSocketFactory.downHost("master");  Connection failoverConnection=null;  try {    failoverConnection=getConnectionWithProps("jdbc:mysql://master:" + port + ",slave:"+ port+ "/",props);    failoverConnection.setAutoCommit(false);    String originalConnectionId=getSingleIndexedValueWithQuery(failoverConnection,1,"SELECT CONNECTION_ID()").toString();    for (int i=0; i < 50; i++) {      this.rs=failoverConnection.createStatement().executeQuery("SELECT 1");    }    UnreliableSocketFactory.dontDownHost("master");    failoverConnection.setAutoCommit(true);    String newConnectionId=getSingleIndexedValueWithQuery(failoverConnection,1,"SELECT CONNECTION_ID()").toString();    assertEquals("/master",UnreliableSocketFactory.getHostFromLastConnection());    assertFalse(newConnectionId.equals(originalConnectionId));    this.rs=failoverConnection.createStatement().executeQuery("SELECT 1");  }  finally {    UnreliableSocketFactory.flushAllStaticData();    if (failoverConnection != null) {      failoverConnection.close();    }  }}  }
class C{  public void removeKeyword(String keyword){  if (m_CaseSensitive) {    m_Keywords.remove(keyword);  } else {    m_Keywords.remove(keyword.toLowerCase());  }}  }
class C{  @Override public void count(String aspect,long delta,double sampleRate){  send(messageFor(aspect,Long.toString(delta),"c",sampleRate));}  }
class C{  @Override public double nextPathAvailable(){  if (nextPath == null) {    return Double.MAX_VALUE;  } else {    return 0;  }}  }
class C{  public void actionPerformed(ActionEvent e){  String Action=e.getActionCommand();  if ("OPEN".equals(Action)) {    openFile(chooseFile(0));    doPrepare();  } else   if ("ExpArcs".equals(Action)) {    exportArcs1();  } else   if ("ExpPoints".equals(Action)) {    exportPoints();  } else   if ("VALEUR".equals(Action)) {    filtreValeur=getVal(e);    filtre();  } else   if ("TYPE".equals(Action)) {    filtreType=getVal(e);    filtre();  } else   if ("ARCS".equals(Action)) {    JCheckBox cb=(JCheckBox)e.getSource();    ArcVisible=cb.isSelected();    if (arcs != null)     arcs.setVisible(ArcVisible);    repaint();  } else   if ("LABS".equals(Action)) {    JCheckBox cb=(JCheckBox)e.getSource();    LabVisible=cb.isSelected();    if (labs != null)     labs.setVisible(LabVisible);    repaint();  } else   if ("TX7".equals(Action)) {    JCheckBox cb=(JCheckBox)e.getSource();    Tx7Visible=cb.isSelected();    if (tx7 != null)     tx7.setVisible(Tx7Visible);    repaint();  }}  }
class C{  public boolean existeUso(String idDocVit,String idExp,String idSist){  String qual=new StringBuffer().append("WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID_DOC_VIT,idDocVit)).append(" AND ").append(DBUtils.generateEQTokenField(CAMPO_ID_EXP,idExp)).append(" AND ").append(DBUtils.generateEQTokenField(CAMPO_ID_SIST,idSist)).toString();  return (getVOCount(qual,TABLE_NAME) > 0);}  }
class C{  public SimpleAttributeSet(AttributeSet source){  addAttributes(source);}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new PortugueseAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  public void removeVertex(ValueGraphVertex v){  if (vertices.remove(v)) {    if (v.representsParameter()) {      nParameter--;    }    if (representativeV == v) {      representativeV=vertices.iterator().next();    }  }}  }
class C{  protected void register(ResourceSet resourceSet,ExecutionEnvironmentDescriptor descriptor){  BuiltInTypeScope typeScope=new BuiltInTypeScope(descriptor);  BuiltInTypeScopeAccess.registerBuiltInTypeScope(typeScope,resourceSet);}  }
class C{  public static Sentence parse(final String text){  return parse(text,new ConversationContext());}  }
class C{  private StringBuilder appendIfNotNull(StringBuilder source,String addStr,String delimiter){  if (addStr != null) {    if (addStr.length() == 0) {      delimiter="";    }    return source.append(addStr).append(delimiter);  }  return source;}  }
class C{  public boolean isStandardCosting(){  String cm=getCostingMethod();  return cm != null && cm.equals(COSTINGMETHOD_StandardCosting);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private GridAnnotationsCache(){}  }
class C{  public SignificantTermsBuilder exclude(String[] terms){  if (excludePattern != null) {    throw new IllegalArgumentException("exclude clause must be an array of strings or a regex, not both");  }  this.excludeTerms=terms;  return this;}  }
class C{  private void GetheadersFromFile(String CSVFileName) throws IOException {  File f=new File(CSVFileName);  if (f.exists()) {    products=new CsvReader(new InputStreamReader(new FileInputStream(CSVFileName),"UTF-8"));    products.setDelimiter(((String)jComboSeparator.getSelectedItem()).charAt(0));    products.readHeaders();    if (products.getHeaderCount() < 5) {      JOptionPane.showMessageDialog(null,"Insufficient headers found in file","Invalid Header Count.",JOptionPane.WARNING_MESSAGE);      products.close();      return;    }    rowCount=0.0;    int i=0;    Headers.clear();    Headers.add("");    jComboName.addItem("");    jComboReference.addItem("");    jComboBarcode.addItem("");    jComboBuy.addItem("");    jComboSell.addItem("");    jComboCategory.addItem("");    jComboMaximum.addItem("");    jComboSecurity.addItem("");    jComboBoxButtonText.addItem("");    jComboBoxRemotePrint.addItem("");    jComboBoxService.addItem("");    jComboBoxVarPrice.addItem("");    jComboBoxWarranty.addItem("");    jComboBoxTextTip.addItem("");    jComboBoxProp.addItem("");    jComboBoxAux.addItem("");    jComboBoxShortName.addItem("");    jComboBoxIspack.addItem("");    jComboBoxPackSize.addItem("");    jComboBoxPackOf.addItem("");    while (i < products.getHeaderCount()) {      jComboName.addItem(products.getHeader(i));      jComboReference.addItem(products.getHeader(i));      jComboBarcode.addItem(products.getHeader(i));      jComboBuy.addItem(products.getHeader(i));      jComboSell.addItem(products.getHeader(i));      jComboCategory.addItem(products.getHeader(i));      jComboSecurity.addItem(products.getHeader(i));      jComboMaximum.addItem(products.getHeader(i));      Headers.add(products.getHeader(i));      jComboBoxButtonText.addItem(products.getHeader(i));      jComboBoxRemotePrint.addItem(products.getHeader(i));      jComboBoxService.addItem(products.getHeader(i));      jComboBoxVarPrice.addItem(products.getHeader(i));      jComboBoxWarranty.addItem(products.getHeader(i));      jComboBoxTextTip.addItem(products.getHeader(i));      jComboBoxProp.addItem(products.getHeader(i));      jComboBoxAux.addItem(products.getHeader(i));      jComboBoxShortName.addItem(products.getHeader(i));      jComboBoxIspack.addItem(products.getHeader(i));      jComboBoxPackSize.addItem(products.getHeader(i));      jComboBoxPackOf.addItem(products.getHeader(i));      ++i;    }    enableCheckBoxes();    while (products.readRecord()) {      ++rowCount;    }    jTextRecords.setText(Integer.toString((int)rowCount));    products.close();  } else {    JOptionPane.showMessageDialog(null,"Unable to locate " + CSVFileName,"File not found",JOptionPane.WARNING_MESSAGE);  }}  }
class C{  private void init(){  setTitle("New SOM Group");  somPanel=new SOMPropertiesPanel(networkPanel,SOMPropsPanelType.CREATE_GROUP);  tabLogic.add(somPanel);  layoutPanel=new MainLayoutPanel(false,this);  layoutPanel.setCurrentLayout(SOMGroup.DEFAULT_LAYOUT);  tabLayout.add(layoutPanel);  tabbedPane.addTab("Logic",tabLogic);  tabbedPane.addTab("Layout",layoutPanel);  setContentPane(tabbedPane);  Action helpAction=new ShowHelpAction(somPanel.getHelpPath());  addButton(new JButton(helpAction));}  }
