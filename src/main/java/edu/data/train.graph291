class C{  public void init(CipherParameters key) throws IllegalArgumentException {  if (!(key instanceof ECKeyParameters)) {    throw new IllegalArgumentException("EC key required");  } else {    this.key=(ECKeyParameters)key;  }}  }
class C{  final public boolean evict(){  final T ref=poll();  if (ref == null) {    return false;  }  if (listener != null) {    listener.evicted(this,ref);  }  return true;}  }
class C{  private static String compressDnsName(String dnsName){  StringBuffer sb=new StringBuffer();  while (true) {    String data=sVmPacket.get(dnsName);    if (data != null) {      sb.append(data);      break;    }    int i=dnsName.indexOf('.');    if (i == -1) {      if (dnsName.length() > 0) {        sb.append(String.format("%02x",dnsName.length()));        sb.append(WifiP2pServiceInfo.bin2HexStr(dnsName.getBytes()));      }      sb.append("00");      break;    }    String name=dnsName.substring(0,i);    dnsName=dnsName.substring(i + 1);    sb.append(String.format("%02x",name.length()));    sb.append(WifiP2pServiceInfo.bin2HexStr(name.getBytes()));  }  return sb.toString();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("AdempiereService[");  sb.append(getStateInfo()).append(" - ").append(m_server);  sb.append("]");  return sb.toString();}  }
class C{  public void updateUI(){  super.updateUI();  setForeground(null);  setBackground(null);}  }
class C{  protected int onProcess(QueuedInputEvent q){  return FORWARD;}  }
class C{  public void clear(){  time=0.0;}  }
class C{  public int textMark(){  textMarkPos=textPos - 1;  return textMarkPos;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int degrees=getInt(stack);  MediaFile mf=getMediaFile(stack);  if (mf != null && mf.isPicture() && sage.media.format.MediaFormat.JPEG.equals(mf.getContainerFormat()) && Permissions.hasPermission(Permissions.PERMISSION_PICTUREROTATION,stack.getUIMgr())) {    degrees=degrees % 360;    if (degrees < 0)     degrees+=360;    if (degrees == 0)     return Boolean.TRUE;    return (performPictureOp(mf,"-rotate",Integer.toString(degrees)) ? Boolean.TRUE : Boolean.FALSE);  }  return Boolean.FALSE;}  }
class C{  public void preparePidPvs(int obdService,PvList pvList){  resetFixedPid();  HashMap<String,EcuDataPv> newList=new HashMap<String,EcuDataPv>();  for (  Integer currPid : pidSupported) {    Vector<EcuDataItem> items=dataItems.getPidDataItems(obdService,currPid);    if (items == null) {      log.warn(String.format("unknown PID %02X",currPid));      Conversion[] dummyCnvs={EcuConversions.dfltCnv,EcuConversions.dfltCnv};      EcuDataItem newItem=new EcuDataItem(currPid,0,0,0,32,0xFFFFFFFF,dummyCnvs,"%#08x",null,null,String.format("PID %02X",currPid));      dataItems.appendItemToService(obdService,newItem);      items=dataItems.getPidDataItems(obdService,currPid);    }    for (    EcuDataItem pidPv : items) {      if (pidPv != null) {        newList.put(pidPv.toString(),pidPv.pv);      }    }  }  pvList.putAll(newList,PvChangeEvent.PV_ADDED,false);}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.329 -0500",hash_original_method="A62229E028B48C960393B7A95C0B3743",hash_generated_method="2240EB94EB9D0F7EECFEA2AD7D8B2D5A") @DSVerified @DSSpec(DSCat.IO) public int read(byte buffer[],int offset,int length) throws IOException {  addTaint(length);  buffer.addTaint(getTaint());  return buffer.getTaintInt();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Show s=getShow(stack);  return (s == null) ? "" : s.getBonusesString();}  }
class C{  private void updateButtonsState(){  StructuredSelection structuredSelection=(StructuredSelection)tableViewer.getSelection();  if (structuredSelection.isEmpty()) {    removeButton.setEnabled(false);    editButton.setEnabled(false);  } else {    removeButton.setEnabled(true);    editButton.setEnabled(structuredSelection.size() == 1);  }}  }
class C{  public SignatureVisitor visitParameterType(){  return this;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'FLASHCARDS' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'WORD' TEXT NOT NULL ,"+ "'DEFINITION' TEXT NOT NULL ,"+ "'STATUS' INTEGER NOT NULL ,"+ "'LESSON_ID' INTEGER);");}  }
class C{  public static short toShortValue(boolean b){  return (short)(b ? 1 : 0);}  }
class C{  private String lines(int startLine,String s){  String lines[]=s.split("\\r?\\n");  return linesToString(startLine,lines);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.SCRIPT__ANNOTATIONS:    return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd,msgs);case N4JSPackage.SCRIPT__SCRIPT_ELEMENTS:  return ((InternalEList<?>)getScriptElements()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private static float[] deriveTextBoundsAnchorOffsets(Graphics2D g2,String text,TextAnchor anchor){  float[] result=new float[2];  FontRenderContext frc=g2.getFontRenderContext();  Font f=g2.getFont();  FontMetrics fm=g2.getFontMetrics(f);  Rectangle2D bounds=getTextBounds(text,fm);  LineMetrics metrics=f.getLineMetrics(text,frc);  float ascent=metrics.getAscent();  float halfAscent=ascent / 2.0f;  float descent=metrics.getDescent();  float leading=metrics.getLeading();  float xAdj=0.0f;  float yAdj=0.0f;  if (anchor.isHorizontalCenter()) {    xAdj=(float)-bounds.getWidth() / 2.0f;  } else   if (anchor.isRight()) {    xAdj=(float)-bounds.getWidth();  }  if (anchor.isTop()) {    yAdj=-descent - leading + (float)bounds.getHeight();  } else   if (anchor.isHalfAscent()) {    yAdj=halfAscent;  } else   if (anchor.isVerticalCenter()) {    yAdj=-descent - leading + (float)(bounds.getHeight() / 2.0);  } else   if (anchor.isBaseline()) {    yAdj=0.0f;  } else   if (anchor.isBottom()) {    yAdj=-metrics.getDescent() - metrics.getLeading();  }  result[0]=xAdj;  result[1]=yAdj;  return result;}  }
class C{  public TeXFormula addStrut(int type) throws InvalidUnitException {  return add(new SpaceAtom(type));}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="lrr";  String vmSelectionPolicy="mmt";  String parameter="1.2";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  @Override public boolean equals(Object object){  if (object == this) {    return true;  }  if (!(object instanceof Task)) {    return false;  }  Task that=(Task)object;  if (!ObjectUtilities.equal(this.description,that.description)) {    return false;  }  if (!ObjectUtilities.equal(this.duration,that.duration)) {    return false;  }  if (!ObjectUtilities.equal(this.percentComplete,that.percentComplete)) {    return false;  }  if (!ObjectUtilities.equal(this.subtasks,that.subtasks)) {    return false;  }  return true;}  }
class C{  public void updateData(boolean vpSelected){  if (!vpSelected && (currentVPS != null))   list.clearSelection();  ViewpointNode viewpointNode=controller.getViewpointNode();  viewpointNode.getViewpoint(tempVPS);  coord.set(tempVPS.location);  locationField.setLocalValue(coord);  directionField.setValue(tempVPS.direction);  distanceField.setValue(tempVPS.distance);  azEl[0]=Math.toDegrees(tempVPS.azimuth);  azEl[1]=Math.toDegrees(tempVPS.elevation);  azElField.setValue(azEl);  magnificationField.setValue(BasicCamera.magFactor[tempVPS.magIndex]);  double alt=viewpointNode.getAltitude();  if (Double.isNaN(alt)) {    altitudeField.setText("N/A");  } else {    altitudeField.setValue(alt);  }  hike.setSelected(tempVPS.hikeMode);}  }
class C{  public static WProcessCtl process(Object parent,int WindowNo,ProcessInfo pi,Trx trx,HttpServletRequest request){  log.fine("WindowNo=" + WindowNo + " - "+ pi);  MobileSessionCtx wsc=MobileSessionCtx.get(request);  MPInstance instance=new MPInstance(wsc.ctx,pi.getAD_Process_ID(),pi.getRecord_ID());  if (!instance.save()) {    pi.setSummary(Msg.getMsg(wsc.ctx,"ProcessNoInstance"));    pi.setError(true);    return null;  }  pi.setAD_PInstance_ID(instance.getAD_PInstance_ID());  WProcessCtl worker=new WProcessCtl(parent,pi,trx,wsc.ctx);  worker.start();  return worker;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_ImpFormat_ID"))     from_AD_ImpFormat_ID=((BigDecimal)para[i].getParameter()).intValue(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }  to_AD_ImpFormat_ID=getRecord_ID();}  }
class C{  void addChild(EnvironmentLogger child){  _children.add(new WeakReference<EnvironmentLogger>(child));  updateChildren();}  }
class C{  protected void handleJoined(InternalDistributedMember id){  if (!isListening()) {    return;  }  this.currentJoin=id;  try {    GemFireVM member=null;switch (id.getVmKind()) {case DistributionManager.NORMAL_DM_TYPE:      member=addMember(id);    break;case DistributionManager.LOCATOR_DM_TYPE:  break;case DistributionManager.ADMIN_ONLY_DM_TYPE:break;case DistributionManager.LONER_DM_TYPE:break;default :throw new IllegalArgumentException(LocalizedStrings.RemoteGfManagerAgent_UNKNOWN_VM_KIND_0.toLocalizedString(Integer.valueOf(id.getVmKind())));}if (this.abortCurrentJoin) {return;}if (member != null) {if (this.abortCurrentJoin) {return;}for (Iterator it=this.listeners.iterator(); it.hasNext(); ) {if (this.abortCurrentJoin) {return;}JoinLeaveListener l=(JoinLeaveListener)it.next();try {l.nodeJoined(RemoteGfManagerAgent.this,member);} catch (VirtualMachineError e) {SystemFailure.initiateFailure(e);throw e;}catch (Throwable e) {SystemFailure.checkFailure();logger.warn(LocalizedMessage.create(LocalizedStrings.RemoteGfManagerAgent_LISTENER_THREW_AN_EXCEPTION),e);}}}}  finally {removePendingJoins(id);if (this.abortCurrentJoin) {logger.info(LocalizedMessage.create(LocalizedStrings.RemoteGfManagerAgent_ABORTED__0,id));}this.currentJoin=null;this.abortCurrentJoin=false;}}  }
class C{  public final int computeIterations(int valueCount,int ramBudget){  final int iterations=ramBudget / (byteBlockCount() + 8 * byteValueCount());  if (iterations == 0) {    return 1;  } else   if ((iterations - 1) * byteValueCount() >= valueCount) {    return (int)Math.ceil((double)valueCount / byteValueCount());  } else {    return iterations;  }}  }
class C{  public String toString(){  return ("JMXPrincipal:  " + name);}  }
class C{  public final IMemberValuePairBinding resolveMemberValuePairBinding(){  return this.ast.getBindingResolver().resolveMemberValuePair(this);}  }
class C{  public PacketOutputStream writeFieldLength(long length){  if (length < 251) {    buffer.put((byte)length);  } else   if (length < 65536) {    assureBufferCapacity(3);    buffer.put((byte)0xfc);    buffer.putShort((short)length);  } else   if (length < 16777216) {    assureBufferCapacity(4);    buffer.put((byte)0xfd);    buffer.put((byte)(length & 0xff));    buffer.put((byte)(length >>> 8));    buffer.put((byte)(length >>> 16));  } else {    assureBufferCapacity(9);    buffer.put((byte)0xfe);    buffer.putLong(length);  }  return this;}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);  linearLayout.removeAllViews();  linearLayout.invalidate();}  }
class C{  public Object clone() throws CloneNotSupportedException {  NamespaceMappings clone=new NamespaceMappings();  clone.m_nodeStack=(NamespaceMappings.Stack)m_nodeStack.clone();  clone.count=this.count;  clone.m_namespaces=(Hashtable)m_namespaces.clone();  clone.count=count;  return clone;}  }
class C{  public String toFormattedString(){  return "Parameters for cudaMemcopy3D:\n    " + createString("\n    ");}  }
class C{  public boolean isGreaterThenOrEqualTo(Quantity quantity){  assertDefined();  Integer thisValue=notNull(this);  Integer parameter=notNull(quantity);  return (thisValue.compareTo(parameter) >= 0);}  }
class C{  public static Object[] unwrapParcelableArray(Parcelable[] wrapped){  final Object[] unwrapped=new Object[wrapped.length];  for (int i=0; i < wrapped.length; i++) {    unwrapped[i]=unwrapParcelable(wrapped[i]);  }  return unwrapped;}  }
class C{  double computeFactor(PricingPeriod pricingPeriod,BillingInput billingInput,long usagePeriodStart,long usagePeriodEnd,boolean adjustsPeriodStart,boolean adjustsPeriodEnd){  if (usagePeriodEnd < usagePeriodStart) {    throw new IllegalArgumentException("Usage period end (" + new Date(usagePeriodEnd) + ") before usage period start ("+ new Date(usagePeriodStart)+ ")");  }  Calendar adjustedBillingPeriodStart=PricingPeriodDateConverter.getStartTime(billingInput.getCutOffDate(),pricingPeriod);  Calendar adjustedBillingPeriodEnd=PricingPeriodDateConverter.getStartTime(billingInput.getBillingPeriodEnd(),pricingPeriod);  if (usagePeriodOutsideOfAdjustedBillingPeriod(usagePeriodStart,usagePeriodEnd,adjustedBillingPeriodStart.getTimeInMillis(),adjustedBillingPeriodEnd.getTimeInMillis())) {    return 0D;  } else {    Calendar startTimeForFactorCalculation=determineStartTimeForFactorCalculation(pricingPeriod,adjustedBillingPeriodStart,usagePeriodStart,adjustsPeriodStart);    Calendar endTimeForFactorCalculation=determineEndTimeForFactorCalculation(pricingPeriod,adjustedBillingPeriodEnd,usagePeriodEnd,adjustsPeriodEnd);    return computeFractionalFactor(startTimeForFactorCalculation.getTimeInMillis(),endTimeForFactorCalculation.getTimeInMillis(),pricingPeriod);  }}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  @SuppressWarnings("unchecked") void registerExit(Instruction s,BasicBlock b){  Iterator<HeapVariable<Object>> vars=heapVariables.values().iterator();  HeapOperand<Object>[] all=new HeapOperand[heapVariables.size()];  for (int i=0; i < all.length; i++) {    all[i]=new HeapOperand<Object>(vars.next());    all[i].setInstruction(s);    all[i].getHeapVariable().registerDef(b);  }  uses.put(s,all);  exits.add(s);}  }
class C{  public void reset(){  localStores=new HashMap<String,ListenerStorageEngine>();}  }
class C{  @CloudUnitSecurable @ResponseBody @RequestMapping(value="/start",method=RequestMethod.POST) public JsonResponse startApplication(@RequestBody JsonInput input) throws ServiceException, CheckException, InterruptedException {  input.validateStartApp();  String applicationName=input.getApplicationName();  User user=authentificationUtils.getAuthentificatedUser();  Application application=applicationService.findByNameAndUser(user,applicationName);  if (application != null && application.getStatus().equals(Status.START)) {    return new HttpErrorServer("application already started");  }  authentificationUtils.canStartNewAction(user,application,Locale.ENGLISH);  applicationEventPublisher.publishEvent(new ApplicationPendingEvent(application));  applicationService.start(application);  applicationEventPublisher.publishEvent(new ApplicationStartEvent(application));  return new HttpOk();}  }
class C{  public Object childrenAccept(PartitionParserVisitor visitor,Object data){  if (children != null) {    for (int i=0; i < children.length; ++i) {      children[i].jjtAccept(visitor,data);    }  }  return data;}  }
class C{  public static void scaleFrequencies(int[] freq,int total){  int len=freq.length, sum=0;  for (  int x : freq) {    sum+=x;  }  int[] errors=new int[len];  int totalError=-total;  for (int i=0; i < len; i++) {    int old=freq[i];    if (old == 0) {      continue;    }    int ideal=(int)(old * total * 256L / sum);    int x=1 + ideal / 256;    freq[i]=x;    totalError+=x;    errors[i]=((x * 256 - ideal) << 8) + i;  }  Arrays.sort(errors);  if (totalError < 0) {    throw new IllegalArgumentException();  }  while (totalError > 0) {    for (int i=0; totalError > 0 && i < len; i++) {      int index=errors[i] & 0xff;      if (freq[index] > 1) {        freq[index]--;        totalError--;      }    }  }}  }
class C{  public boolean isValue(){  return value;}  }
class C{  private boolean findNextItem() throws IOException {  if (eof) {    return false;  }  if (currentItem != null) {    currentItem.close();    currentItem=null;  }  for (; ; ) {    boolean nextPart;    if (skipPreamble) {      nextPart=multi.skipPreamble();    } else {      nextPart=multi.readBoundary();    }    if (!nextPart) {      if (currentFieldName == null) {        eof=true;        return false;      }      multi.setBoundary(boundary);      currentFieldName=null;      continue;    }    FileItemHeaders headers=getParsedHeaders(multi.readHeaders());    if (currentFieldName == null) {      String fieldName=getFieldName(headers);      if (fieldName != null) {        String subContentType=headers.getHeader(CONTENT_TYPE);        if (subContentType != null && subContentType.toLowerCase(Locale.ENGLISH).startsWith(MULTIPART_MIXED)) {          currentFieldName=fieldName;          byte[] subBoundary=getBoundary(subContentType);          multi.setBoundary(subBoundary);          skipPreamble=true;          continue;        }        String fileName=getFileName(headers);        currentItem=new FileItemStreamImpl(headers,fileName,fieldName,fileName == null,getContentLength(headers));        itemValid=true;        return true;      }    } else {      String fileName=getFileName(headers);      if (fileName != null) {        currentItem=new FileItemStreamImpl(headers,fileName,currentFieldName,false,getContentLength(headers));        itemValid=true;        return true;      }    }    multi.discardBodyData();  }}  }
class C{  public void rollback() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public void testGetName(AbstractDosPlugin instance){  String result=instance.getName();  assertTrue(result.length() > 0);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public RegistrationException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Description(summary="Build a snapshot H2 jar and upload to local Maven 2 repo.") public void mavenInstallLocal(){  jarMVStore();  String pom=new String(readFile(new File("src/installer/pom-mvstore-template.xml")));  pom=replaceAll(pom,"@version@","1.0-SNAPSHOT");  writeFile(new File("bin/pom.xml"),pom.getBytes());  execScript("mvn",args("install:install-file","-Dversion=1.0-SNAPSHOT","-Dfile=bin/h2-mvstore" + getJarSuffix(),"-Dpackaging=jar","-DpomFile=bin/pom.xml","-DartifactId=h2-mvstore","-DgroupId=com.h2database"));  jar();  pom=new String(readFile(new File("src/installer/pom-template.xml")));  pom=replaceAll(pom,"@version@","1.0-SNAPSHOT");  writeFile(new File("bin/pom.xml"),pom.getBytes());  execScript("mvn",args("install:install-file","-Dversion=1.0-SNAPSHOT","-Dfile=bin/h2" + getJarSuffix(),"-Dpackaging=jar","-DpomFile=bin/pom.xml","-DartifactId=h2","-DgroupId=com.h2database"));}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,EntrySnapshot value,DM dm,ReplyException re){  Assert.assertTrue(recipient != null,"FetchEntryReplyMessage NULL recipient");  FetchEntryReplyMessage m=new FetchEntryReplyMessage(processorId,value,re);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  public static GameEntityBuilder builder(){  return new GameEntityBuilder();}  }
class C{  public void endGatewayBatchSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(gatewayBatchSendInProgressId,-1);  int endGatewayBatchSendId;  if (failed) {    endGatewayBatchSendId=gatewayBatchSendFailedId;  } else {    endGatewayBatchSendId=gatewayBatchSendId;  }  this.sendStats.incInt(endGatewayBatchSendId,1);  this.stats.incLong(gatewayBatchSendDurationId,duration);}  }
class C{  public boolean isDocOrdered(){  return false;}  }
class C{  public int keylength(){  return this.blob.keylength();}  }
class C{  public KeySelect(Table table,Key key){  this.table=table;  this.key=key;  this.values=new Object[key.size()];}  }
class C{  public Comparator<? super E> comparator(){  return comparator;}  }
class C{  public LinkedHashMap(int initialCapacity){  super(initialCapacity);  accessOrder=false;}  }
class C{  public int indexOf(byte b,int start){  for (int i=start; i < m_length; ++i) {    if (m_bytes[m_offset + i] == b)     return i;  }  return -1;}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof CenterListener) {    removeCenterListener((CenterListener)someObj);  }}  }
class C{  public static FloatingActionButton createFAB(char icon){  return new FloatingActionButton(icon,null,3.8f);}  }
class C{  public WebEmbed(Element e,String t,String embedId,Map<String,String> params){  embedNodes=new ArrayList<>();  id=embedId;  embedNodes.add(e);  setType(t);  if (params == null) {    altParams=new HashMap<>();  } else {    altParams=params;  }}  }
class C{  public void testDatasource() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/datasource-war/test");  final String expected="Got connection!";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public void releaseTiles(List<JulesTile> tileList){  if (tileList.size() > 0) {synchronized (idleBuffers) {      idleBuffers.addAll(tileList);    }    tileList.clear();  }}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0] == State.main_region_B;default :return false;}}  }
class C{  protected static ActionResultInfo performAction(GenericValue productPromoAction,ShoppingCart cart,Delegator delegator,LocalDispatcher dispatcher,Timestamp nowTimestamp) throws GenericEntityException, CartItemModifyException {  ActionResultInfo actionResultInfo=new ActionResultInfo();  performAction(actionResultInfo,productPromoAction,cart,delegator,dispatcher,nowTimestamp);  return actionResultInfo;}  }
class C{  public LogFlushTask(long flushIntervalMillis){  this.flushIntervalMillis=flushIntervalMillis;}  }
class C{  public static void subscribeToImmediateReports(ImmediateReportCallback callback){  PubSub.subscribe(PubSubReporter.getImmediateReportTopic(ResourceReportingSettings.CONFIG),callback);}  }
class C{  public CharArrayList(final String s){  this(s.toCharArray());}  }
class C{  public FlipTransition(int bgColor){  this.bgColor=bgColor;}  }
class C{  protected TreeLayout createTreeLayout(Offset offset){  if (offset == null)   offset=DEFAULT_OFFSET;  BasicTreeLayout layout=new BasicTreeLayout(this,offset);  layout.getFrame().setFrameTitle(DEFAULT_FRAME_TITLE);  layout.getFrame().setIconImageSource(DEFAULT_FRAME_IMAGE);  BasicTreeAttributes attributes=new BasicTreeAttributes();  attributes.setRootVisible(false);  layout.setAttributes(attributes);  BasicFrameAttributes frameAttributes=new BasicFrameAttributes();  frameAttributes.setBackgroundOpacity(0.7);  layout.getFrame().setAttributes(frameAttributes);  BasicTreeAttributes highlightAttributes=new BasicTreeAttributes(attributes);  layout.setHighlightAttributes(highlightAttributes);  BasicFrameAttributes highlightFrameAttributes=new BasicFrameAttributes(frameAttributes);  highlightFrameAttributes.setForegroundOpacity(1.0);  highlightFrameAttributes.setBackgroundOpacity(1.0);  layout.getFrame().setHighlightAttributes(highlightFrameAttributes);  return layout;}  }
class C{  protected boolean isUsingSolidBackgroundColors(){  return getPreferences().getBoolean(BOARD_IS_USING_SOLID_BACKGROUND_COLORS);}  }
class C{  public boolean isReportingAvailable(){  return (applicationBean.isReportingAvailable() && (isLoggedInAndAdmin() || isLoggedInAndUnitAdmin()) && !applicationBean.isUIElementHidden(HiddenUIConstants.MARKETPLACE_MENU_ITEM_ACCOUNT_REPORTS));}  }
class C{  private CreateFactoryParams(){}  }
class C{  public HllSketch asCompact(){  return new HllSketch(fields.toCompact());}  }
class C{  @Deprecated public static <N>ImmutableGraph<N> copyOf(ImmutableGraph<N> graph){  return checkNotNull(graph);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:22.958 -0400",hash_original_method="8CAF5836E3577FA0F0E1DD21F178AC12",hash_generated_method="6154750B300ABF4D69C475EC86090BA4") public Phaser(int parties){  this(null,parties);}  }
class C{  public static FloatTag parseFloat(String mojangson) throws MojangsonParseException {  Character lastChar=mojangson.charAt(mojangson.length() - 1);  if (lastChar.toString().toLowerCase().charAt(0) == MojangsonToken.FLOAT_SUFFIX.getSymbol()) {    mojangson=mojangson.substring(0,mojangson.length() - 1);  }  try {    return new FloatTag(Float.valueOf(mojangson));  } catch (  NumberFormatException nfe) {    throw new MojangsonParseException("\'" + mojangson + "\'",MojangsonParseException.ParseExceptionReason.INVALID_FORMAT_NUM);  }}  }
class C{  public EndianDataInputStream(java.io.InputStream in){  inputStream=new DataInputStream(new BufferedInputStream(in));}  }
class C{  public UF12(){  this(30,5);}  }
class C{  @After public void tearDown() throws Exception {  removeExceptions();  this.cache.close();  this.system.disconnect();}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x1D686870,version=271) public int sceUsbCamSetEvLevel(int evLevel){  this.evLevel=evLevel;  return 0;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean areOnlyShortBuffersSupported(){  return mOnlyShortBufferSupported;}  }
class C{  public void invokeStatic(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKESTATIC,owner,method,false);}  }
class C{  private int pollModifierFlags(){  return modifierFlags(isKeyDown(GLFW_KEY_LEFT_ALT) || isKeyDown(GLFW_KEY_LEFT_ALT),isKeyDown(GLFW_KEY_LEFT_CONTROL) || isKeyDown(GLFW_KEY_RIGHT_CONTROL),isKeyDown(GLFW_KEY_LEFT_SUPER) || isKeyDown(GLFW_KEY_RIGHT_SUPER),isKeyDown(GLFW_KEY_LEFT_SHIFT) || isKeyDown(GLFW_KEY_RIGHT_SHIFT));}  }
class C{  public static <T extends Identifyable>ArrayList<T> checkIds(@NonNull ArrayList<T> items){  for (  T item : items) {    checkId(item);  }  return items;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.416 -0500",hash_original_method="5E7B6C878951D7CA458070D073F03065",hash_generated_method="AA1896D162B72EAE3EDE1B373974C833") public ArrayDeque(Collection<? extends E> c){  allocateElements(c.size());  addAll(c);}  }
class C{  public boolean hasAccessToken(){  if (TextUtils.isEmpty(token)) {    token=prefs.getString(DeviceState.ACCESS_TOKEN,"");    if (TextUtils.isEmpty(token)) {      return false;    }  }  return true;}  }
class C{  private void readFlags(int flagCount,ByteArrayInputStream bais){  try {    for (int index=0; index < flagCount; index++) {      flags[index]=(byte)bais.read();      if ((flags[index] & repeat) != 0) {        int repeats=bais.read();        for (int i=1; i <= repeats; i++) {          flags[index + i]=flags[index];        }        index+=repeats;      }    }  } catch (  ArrayIndexOutOfBoundsException e) {    System.out.println("error: array index out of bounds");  }}  }
class C{  public DataOutputStream prepareAppendValue(int length) throws IOException {  if (state != State.END_KEY) {    throw new IllegalStateException("Incorrect state to start a new value: " + state.name());  }  DataOutputStream ret;  if (length < 0) {    if (valueBuffer == null) {      valueBuffer=new byte[getChunkBufferSize(conf)];    }    ret=new ValueRegister(new ChunkEncoder(blkAppender,valueBuffer));  } else {    ret=new ValueRegister(new Chunk.SingleChunkEncoder(blkAppender,length));  }  state=State.IN_VALUE;  return ret;}  }
class C{  @Override public int compareTo(IVCount arg0){  if (count < arg0.count)   return 1;  if (count > arg0.count)   return -1;  return 0;}  }
class C{  public void addNative(Path path){  _nativePath.add(path);}  }
class C{  public p(Element value){  addElement(value);}  }
class C{  @DSComment("Scroller") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:11.195 -0500",hash_original_method="2E2DDE91830A97E8B4307DB61F63C9CC",hash_generated_method="120744DD3BD019BAAB244E786A2D5C27") public int timePassed(){  return (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);}  }
class C{  public <T>T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {  try {    return iface.cast(this);  } catch (  ClassCastException cce) {    throw SQLError.createSQLException("Unable to unwrap to " + iface.toString(),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,getExceptionInterceptor());  }}  }
class C{  private void $$$setupUI$$$(){  createUIComponents();  contentPanel=new JPanel();  contentPanel.setLayout(new GridLayoutManager(10,3,new Insets(0,0,0,0),-1,-1));  contentPanel.setName("");  final JLabel label1=new JLabel();  this.$$$loadLabelText$$$(label1,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("VsoCheckoutForm.SelectRepository"));  contentPanel.add(label1,new GridConstraints(1,0,1,3,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  repositoryFilter=new JTextField();  repositoryFilter.setName("");  contentPanel.add(repositoryFilter,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(150,-1),null,0,false));  final JLabel label2=new JLabel();  this.$$$loadLabelText$$$(label2,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("VsoCheckoutForm.ParentDirectory"));  contentPanel.add(label2,new GridConstraints(5,0,1,3,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final JLabel label3=new JLabel();  this.$$$loadLabelText$$$(label3,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("VsoCheckoutForm.DirectoryName"));  contentPanel.add(label3,new GridConstraints(7,0,1,3,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  directoryName=new JTextField();  directoryName.setName("");  contentPanel.add(directoryName,new GridConstraints(8,0,1,3,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(150,-1),null,0,false));  contentPanel.add(userAccountPanel,new GridConstraints(0,0,1,3,GridConstraints.ANCHOR_EAST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  repositoryTableScrollPane=new JScrollPane();  contentPanel.add(repositoryTableScrollPane,new GridConstraints(3,0,1,3,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));  repositoryTable=new JTable();  repositoryTable.setFillsViewportHeight(true);  repositoryTable.setName("");  repositoryTable.setShowHorizontalLines(false);  repositoryTable.setShowVerticalLines(false);  repositoryTableScrollPane.setViewportView(repositoryTable);  parentDirectory=new TextFieldWithBrowseButton();  contentPanel.add(parentDirectory,new GridConstraints(6,0,1,3,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  refreshButton=new JButton();  refreshButton.setIcon(new ImageIcon(getClass().getResource("/actions/refresh.png")));  refreshButton.setText("");  refreshButton.setToolTipText(ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("CheckoutDialog.RefreshButton.ToolTip"));  contentPanel.add(refreshButton,new GridConstraints(2,2,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  busySpinner=new BusySpinnerPanel();  contentPanel.add(busySpinner,new GridConstraints(2,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  helpPanel=new HelpPanel();  helpPanel.setHelpText(ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("VsoLookupHelp.helpText"));  helpPanel.setPopupText(ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("VsoLookupHelp.Instructions"));  contentPanel.add(helpPanel,new GridConstraints(4,0,1,3,GridConstraints.ANCHOR_EAST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,null,null,null,0,false));  advancedCheckBox=new JCheckBox();  advancedCheckBox.setText("example text");  contentPanel.add(advancedCheckBox,new GridConstraints(9,0,1,3,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));}  }
class C{  public void remove(Video video){  videoList.remove(video);  notifyDataSetChanged();}  }
class C{  public InlineQueryResultVenue.InlineQueryResultVenueBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,float[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  public static void i(String tag,String s,Object... args){  if (LOG.INFO >= LOGLEVEL)   Log.i(tag,String.format(s,args));}  }
class C{  public static int testLoop9Snippet(int a,int b){  container.a=b;  for (int i=0; i < a; i++) {    container.a=i;  }  GraalDirectives.controlFlowAnchor();  return container.a;}  }
class C{  private void flushBuffer() throws IOException {  if (bpos > 0) {    internalWrite(buffer,0,bpos,false);    bpos=0;  }}  }
class C{  private boolean requestExpired(SamzaResourceRequest request){  long currTime=System.currentTimeMillis();  boolean requestExpired=currTime - request.getRequestTimestampMs() > requestTimeout;  if (requestExpired) {    log.info("Request {} with currTime {} has expired",request,currTime);  }  return requestExpired;}  }
class C{  private static void s_uamxx(SparseBlock a,double[] c,int m,int n,double init,Builtin builtin,int rl,int ru){  double ret=init;  if (a.isContiguous()) {    int alen=(int)a.size(rl,ru);    double val=builtin(a.values(rl),a.pos(rl),init,alen,builtin);    ret=builtin.execute2(ret,val);    ret=(alen < (ru - rl) * n) ? builtin.execute2(ret,0) : ret;  } else {    for (int i=rl; i < ru; i++) {      if (!a.isEmpty(i)) {        double lval=builtin(a.values(i),a.pos(i),init,a.size(i),builtin);        ret=builtin.execute2(ret,lval);      }      if (a.size(i) < n)       ret=builtin.execute2(ret,0);    }  }  c[0]=ret;}  }
class C{  public static List<Map<String,Object>> createDcosSeedProvider(String url){  return ImmutableList.<Map<String,Object>>of(ImmutableMap.<String,Object>of("class_name","com.mesosphere.dcos.cassandra.DcosSeedProvider","parameters",ImmutableList.of(ImmutableMap.of("seeds_url",url))));}  }
class C{  public Matrix4f shadow(Vector4f light,float a,float b,float c,float d){  return shadow(light.x,light.y,light.z,light.w,a,b,c,d,this);}  }
class C{  public boolean isTranslated(){  return this.isTranslated;}  }
class C{  public boolean isSmeManualAcknowledgment(){  return isSmeManualAcknowledgment(esmClass);}  }
class C{  public void testSSLConnect() throws Exception {  MqttAndroidClient mqttClient=null;  try {    mqttClient=new MqttAndroidClient(mContext,mqttSSLServerURI,"testSSLConnect");    MqttConnectOptions options=new MqttConnectOptions();    options.setSocketFactory(mqttClient.getSSLSocketFactory(this.getContext().getAssets().open("test.bks"),keyStorePwd));    IMqttToken connectToken=null;    IMqttToken disconnectToken=null;    connectToken=mqttClient.connect(options,this.getContext(),new ActionListener(notifier));    connectToken.waitForCompletion(waitForCompletionTime);    disconnectToken=mqttClient.disconnect(null,new ActionListener(notifier));    disconnectToken.waitForCompletion(waitForCompletionTime);    connectToken=mqttClient.connect(options,this.getContext(),new ActionListener(notifier));    connectToken.waitForCompletion(waitForCompletionTime);    disconnectToken=mqttClient.disconnect(null,new ActionListener(notifier));    disconnectToken.waitForCompletion(waitForCompletionTime);  } catch (  Exception exception) {    Assert.fail("Failed:" + "testSSLConnect" + " exception="+ exception);  } finally {    if (mqttClient != null) {      mqttClient.close();    }  }}  }
class C{  private SectionContainer buildSectionStructure(List<SectionContent> scl){  SectionContainer result=new SectionContainer(0);  for (  SectionContent sContent : scl) {    int contentLevel=sContent.getLevel();    SectionContainer sContainer=result;    for (int containerLevel=result.getLevel() + 1; containerLevel < contentLevel; containerLevel++) {      int containerSubSections=sContainer.nrOfSubSections();      if (containerSubSections != 0) {        Section temp=sContainer.getSubSection(containerSubSections - 1);        if (temp.getClass() == SectionContainer.class) {          sContainer=(SectionContainer)temp;        } else {          SectionContainer sct=new SectionContainer(temp.getTitleElement(),containerLevel);          sct.addSection(temp);          if (calculateSrcSpans) {            sct.setSrcSpan(temp.getSrcSpan());          }          temp.setTitleElement(null);          temp.setLevel(containerLevel + 1);          sContainer.removeSection(temp);          sContainer.addSection(sct);          sContainer=sct;        }      } else {        sContainer=new SectionContainer(null,containerLevel);      }    }    sContainer.addSection(sContent);  }  if (calculateSrcSpans) {    result.setSrcSpan(new SrcSpan(0,-1));  }  return result;}  }
class C{  public static boolean isMIUI(){  String miuiVer=PropertyUtils.getQuickly("ro.miui.ui.version.name",null);  return miuiVer != null && miuiVer.contains("V");}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int i;  int progress;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    double[] data;    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] == noData) {          output.setValue(row,col,0);        } else {          output.setValue(row,col,data[col]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (numRows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static <T>T copy(Object from,T to){  MetaClass fm=getMetaClass(from);  MetaClass ft=getMetaClass(to);  for (  FGS fgs : fm.getFields()) {    FGS x=ft.getField(fgs.getFieldName());    if (x != null) {      Object value=fgs.getObject(from);      x.setObject(to,value);    }  }  return to;}  }
class C{  public boolean hasAccessMode(FlowContext context,IVariableBinding local,int mode){  boolean unusedMode=(mode & UNUSED) != 0;  if (fAccessModes == null && unusedMode)   return true;  int index=context.getIndexFromLocal(local);  if (index == -1)   return unusedMode;  return (fAccessModes[index] & mode) != 0;}  }
class C{  public Deathdate(String text){  super(text);}  }
class C{  public static Map<String,Object> createUserPrefMap(GenericValue rec) throws GeneralException {  return addPrefToMap(rec,new LinkedHashMap<String,Object>());}  }
class C{  public void ensureIndex(String idxName,QueryIndexType idxType){  QueryIndex idx=idxs.get(idxName);  if (idx == null) {    idx=new QueryIndex();    idx.setName(idxName);    idx.setIndexType(idxType);    idxs.put(idxName,idx);  } else   throw new IllegalArgumentException("An index with the same name and of a different type already exists " + "[idxName=" + idxName + ", existingIdxType="+ idx.getIndexType()+ ", newIdxType="+ idxType+ ']');}  }
class C{  private void addRoles(StorageOSUser user){  TenantOrg rootTenant=_permissionsHelper.getRootTenant();  if (user.isLocal()) {    updateLocalUser(user);  } else   if (rootTenant.getId().equals(URI.create(user.getTenantId()))) {    _permissionsHelper.populateZoneRoles(user,VdcUtil.getLocalVdc());  }}  }
class C{  private void decode(byte[] data,int width,int height){  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  long start=System.currentTimeMillis();  Result rawResult=null;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  Log.i(TAG,"BinaryBitmap+" + bitmap.toString());  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  Log.i(TAG,"raw result" + rawResult);  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  public String next(){  return next(ANY_PATTERN);}  }
class C{  public CExecuteCachedCriterium(final ZyGraph graph,final CCachedExpressionTree tree){  super(tree.getFormulaString());  m_graph=graph;  m_tree=tree;}  }
class C{  @SuppressWarnings({"varargs","unchecked"}) public static <T>MutableSeq<T> newMutableSeq(T... values){  return new SeqImpl<>(Arrays.asList(values));}  }
class C{  static void yield(){  RVMThread.yieldNoHandshake();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String referenceHistoFile=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  referenceHistoFile=args[1];  outputHeader=args[2];  if ((inputHeader == null) || (outputHeader == null) || (referenceHistoFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    float progress=0;    int numCells=0;    int i=0;    WhiteboxRasterInfo inputFile=new WhiteboxRasterInfo(inputHeader);    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    int numBins=50000;    double minValue=inputFile.getMinimumValue();    double maxValue=inputFile.getMaximumValue();    double binSize=(maxValue - minValue) / numBins;    long[] histogram=new long[numBins];    int binNum;    int numBinsLessOne=numBins - 1;    double[] data;    updateProgress("Loop 1 of 3: ",0);    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numCells++;          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          histogram[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3: ",(int)progress);    }    updateProgress("Loop 2 of 3: ",0);    double[] cdf=new double[numBins];    cdf[0]=histogram[0];    for (i=1; i < numBins; i++) {      cdf[i]=cdf[i - 1] + histogram[i];    }    histogram=null;    for (i=0; i < numBins; i++) {      cdf[i]=cdf[i] / numCells;    }    String line;    String[] str;    String[] delimiters={"\t"," ",",",":",";"};    int delimiterNum=0;    File file=new File(referenceHistoFile);    RandomAccessFile raf=null;    raf=new RandomAccessFile(file,"r");    int numLines=0;    while ((line=raf.readLine()) != null) {      if (!line.trim().equals("")) {        numLines++;      }    }    double[][] referenceCDF=new double[numLines][2];    raf.seek(0);    i=0;    while ((line=raf.readLine()) != null) {      str=line.split(delimiters[delimiterNum]);      while (str.length < 2) {        delimiterNum++;        if (delimiterNum == delimiters.length) {          showFeedback("the histogram file does not appear to be properly formated.\n" + "It must be delimited using a tab, space, comma, colon, or semicolon.");          return;        }        str=line.split(delimiters[delimiterNum]);      }      referenceCDF[i][0]=Double.parseDouble(str[0]);      referenceCDF[i][1]=Double.parseDouble(str[1]);      i++;    }    raf.close();    for (i=1; i < numLines; i++) {      referenceCDF[i][1]+=referenceCDF[i - 1][1];    }    double totalFrequency=referenceCDF[numLines - 1][1];    for (i=0; i < numLines; i++) {      referenceCDF[i][1]=referenceCDF[i][1] / totalFrequency;    }    int[] startingVals=new int[11];    double pVal=0;    for (i=0; i < numLines; i++) {      pVal=referenceCDF[i][1];      if (pVal < 0.1) {        startingVals[1]=i;      }      if (pVal < 0.2) {        startingVals[2]=i;      }      if (pVal < 0.3) {        startingVals[3]=i;      }      if (pVal < 0.4) {        startingVals[4]=i;      }      if (pVal < 0.5) {        startingVals[5]=i;      }      if (pVal < 0.6) {        startingVals[6]=i;      }      if (pVal < 0.7) {        startingVals[7]=i;      }      if (pVal < 0.8) {        startingVals[8]=i;      }      if (pVal < 0.9) {        startingVals[9]=i;      }      if (pVal <= 1) {        startingVals[10]=i;      }    }    updateProgress("Loop 3 of 3: ",0);    int j=0;    double xVal=0;    double x1, x2, p1, p2;    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          pVal=cdf[binNum];          j=(int)(Math.floor(pVal * 10));          for (i=startingVals[j]; i < numLines; i++) {            if (referenceCDF[i][1] > pVal) {              if (i > 0) {                x1=referenceCDF[i - 1][0];                x2=referenceCDF[i][0];                p1=referenceCDF[i - 1][1];                p2=referenceCDF[i][1];                if (p1 != p2) {                  xVal=x1 + ((x2 - x1) * ((pVal - p1) / (p2 - p1)));                } else {                  xVal=x1;                }              } else {                xVal=referenceCDF[i][0];              }              break;            }          }          outputFile.setValue(row,col,xVal);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3: ",(int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static int ENXIO(){  return Errno.ENXIO.intValue();}  }
class C{  public void onTaskPrepare(HadoopTaskInfo info,long ts){  evts.add(new T2<>(eventName(info,"prepare"),ts));}  }
class C{  public static String u4(int v){  char[] result=new char[8];  for (int i=0; i < 8; i++) {    result[7 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  @SuppressWarnings("unchecked") public CViewFilterCreator(final IViewContainer module){  super(Lists.newArrayList(new CInstructionGenerator(module),new CBlockGenerator(),new CEdgeGenerator(),new CNameDescriptionGenerator<CViewWrapper>(module)));  m_component=new CViewFilterComponent(module);}  }
class C{  private static int med3(Object x[],int a,int b,int c,Comparator comp){  int ab=comp.compare(x[a],x[b]);  int ac=comp.compare(x[a],x[c]);  int bc=comp.compare(x[b],x[c]);  return (ab < 0 ? (bc < 0 ? b : ac < 0 ? c : a) : (bc > 0 ? b : ac > 0 ? c : a));}  }
class C{  public boolean dismissPopupMenus(){  boolean result=hideOverflowMenu();  result|=hideSubMenus();  return result;}  }
class C{  public JFrame show(int width,int height){  JFrame frame=new JFrame();  frame.getContentPane().setLayout(new BorderLayout());  frame.getContentPane().add(getChartPanel(),BorderLayout.CENTER);  frame.setPreferredSize(new Dimension(width,height));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  frame.setTitle("MOEA Framework Plot");  frame.setVisible(true);  return frame;}  }
class C{  public final void characters(char chars[],int start,int length) throws org.xml.sax.SAXException {  if (m_elemContext.m_isRaw) {    try {      if (m_elemContext.m_startTagOpen) {        closeStartTag();        m_elemContext.m_startTagOpen=false;      }      m_ispreserve=true;      writeNormalizedChars(chars,start,length,false,m_lineSepUse);      if (m_tracer != null)       super.fireCharEvent(chars,start,length);      return;    } catch (    IOException ioe) {      throw new org.xml.sax.SAXException(Utils.messages.createMessage(MsgKey.ER_OIERROR,null),ioe);    }  } else {    super.characters(chars,start,length);  }}  }
class C{  public java.nio.ByteBuffer compressImage(java.awt.image.BufferedImage image,DXTCompressionAttributes attributes){  if (image == null) {    String message=Logging.getMessage("nullValue.ImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (!WWMath.isPowerOfTwo(image.getWidth()) || !WWMath.isPowerOfTwo(image.getHeight())) {    String message=Logging.getMessage("generic.InvalidImageSize",image.getWidth(),image.getHeight());    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (attributes == null) {    String message=Logging.getMessage("nullValue.AttributesIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  DXTCompressor compressor=this.getDXTCompressor(image,attributes);  return this.doCompressImage(compressor,image,attributes);}  }
class C{  @POST @Path("/{consistencyGroup_id}/delete") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response deleteConsistencyGroup(@PathParam("tenant_id") String openstackTenantId,@PathParam("consistencyGroup_id") String consistencyGroupId,ConsistencyGroupDeleteRequest param,@HeaderParam("X-Cinder-V1-Call") String isV1Call,@Context HttpHeaders header){  boolean isForced=param.consistencygroup.force;  final BlockConsistencyGroup consistencyGroup=findConsistencyGroup(consistencyGroupId,openstackTenantId);  if (consistencyGroup == null) {    _log.error("Not Found : No Such Consistency Group Found {}",consistencyGroupId);    return CinderApiUtils.createErrorResponse(404,"Not Found : No Such Consistency Group Found");  } else   if (!consistencyGroupId.equals(CinderApiUtils.splitString(consistencyGroup.getId().toString(),":",3))) {    _log.error("Bad Request : There is no consistency group with id {} , please retry with correct consistency group id",consistencyGroupId);    return CinderApiUtils.createErrorResponse(400,"Bad Request : There is no consistency group exist, please retry with correct consistency group id");  }  String task=UUID.randomUUID().toString();  TaskResourceRep taskRep=null;  if (getCinderHelper().verifyConsistencyGroupHasSnapshot(consistencyGroup)) {    _log.error("Bad Request : Consistency Group {} has Snapshot",consistencyGroupId);    return CinderApiUtils.createErrorResponse(400,"Bad Request : Consistency Group has Snapshot ");  }  if (isForced) {    final URIQueryResultList cgVolumesResults=new URIQueryResultList();    _dbClient.queryByConstraint(getVolumesByConsistencyGroup(consistencyGroup.getId()),cgVolumesResults);    while (cgVolumesResults.iterator().hasNext()) {      Volume volume=_dbClient.queryObject(Volume.class,cgVolumesResults.iterator().next());      if (!volume.getInactive()) {        BlockServiceApi api=BlockService.getBlockServiceImpl(volume,_dbClient);        URI systemUri=volume.getStorageController();        List<URI> volumeURIs=new ArrayList<URI>();        volumeURIs.add(volume.getId());        api.deleteVolumes(systemUri,volumeURIs,"FULL",null);        if (volume.getExtensions() == null) {          volume.setExtensions(new StringMap());        }        volume.getExtensions().put("status",CinderConstants.ComponentStatus.DELETING.getStatus().toLowerCase());        volume.setInactive(true);        _dbClient.updateObject(volume);      }    }  }  try {    ArgValidator.checkReference(BlockConsistencyGroup.class,consistencyGroup.getId(),checkForDelete(consistencyGroup));  } catch (  APIException e) {    _log.error("Bad Request : Consistency Group Contains active references of type : {}",e.getMessage());    return CinderApiUtils.createErrorResponse(400,"Bad Request : Consistency Group Contains active references");  }  if (!consistencyGroup.getTypes().contains(Types.VPLEX.toString()) || canDeleteConsistencyGroup(consistencyGroup)) {    final URIQueryResultList cgVolumesResults=new URIQueryResultList();    _dbClient.queryByConstraint(getVolumesByConsistencyGroup(consistencyGroup.getId()),cgVolumesResults);    while (cgVolumesResults.iterator().hasNext()) {      Volume volume=_dbClient.queryObject(Volume.class,cgVolumesResults.iterator().next());      if (!volume.getInactive()) {        return CinderApiUtils.createErrorResponse(400,"Bad Request : Try to delete consistency group with --force");      }    }    consistencyGroup.setStorageController(null);    consistencyGroup.setInactive(true);    _dbClient.updateObject(consistencyGroup);    taskRep=finishDeactivateTask(consistencyGroup,task);    if (taskRep.getState().equals("ready") || taskRep.getState().equals("pending")) {      return Response.status(202).build();    }  }  final StorageSystem storageSystem=consistencyGroup.created() ? _permissionsHelper.getObjectById(consistencyGroup.getStorageController(),StorageSystem.class) : null;  BlockServiceApi blockServiceApi=BlockService.getBlockServiceImpl("group");  if (storageSystem != null) {    String systemType=storageSystem.getSystemType();    if (DiscoveredDataObject.Type.vplex.name().equals(systemType)) {      blockServiceApi=BlockService.getBlockServiceImpl(systemType);    }    _log.info(String.format("BlockConsistencyGroup %s is associated to StorageSystem %s. Going to delete it on that array.",consistencyGroup.getLabel(),storageSystem.getNativeGuid()));    taskRep=blockServiceApi.deleteConsistencyGroup(storageSystem,consistencyGroup,task);    if (taskRep.getState().equals("ready") || taskRep.getState().equals("pending")) {      return Response.status(202).build();    }  }  if (taskRep == null) {    _log.info(String.format("BlockConsistencyGroup %s was not associated with any storage. Deleting it from ViPR only.",consistencyGroup.getLabel()));    TaskResourceRep resp=finishDeactivateTask(consistencyGroup,task);    if (resp.getState().equals("ready") || resp.getState().equals("pending")) {      return Response.status(202).build();    }  }  return CinderApiUtils.createErrorResponse(400,"Bad Request");}  }
class C{  public void open(){  camera=OpenCameraInterface.open(settings.getRequestedCameraId());  if (camera == null) {    throw new RuntimeException("Failed to open camera");  }  int cameraId=OpenCameraInterface.getCameraId(settings.getRequestedCameraId());  cameraInfo=new Camera.CameraInfo();  Camera.getCameraInfo(cameraId,cameraInfo);}  }
class C{  public boolean hasCycle(){  return cycleDay != CYCLE_NONE;}  }
class C{  public String betToString(){  final StringBuilder sb=new StringBuilder();  sb.append(amount);  sb.append(" ");  sb.append(itemName);  sb.append(" on ");  sb.append(target);  return sb.toString();}  }
class C{  public short green(){  return self.green;}  }
class C{  public int resetSignalStrength(){  final ContentValues values=new ContentValues();  values.put(BeaconContract.Beacon.SIGNAL_STRENGTH,0);  return mDatabase.update(Tables.REGIONS,values,null,null);}  }
class C{  public void unMute(){  if (!isConnected()) {    onError(OneSheeldError.DEVICE_NOT_CONNECTED);    return;  } else   if (isUpdatingFirmware()) {    onError(OneSheeldError.FIRMWARE_UPDATE_IN_PROGRESS);    return;  }  sendUnMuteFrame();  Log.i("Device " + this.name + ": Communications unmuted.");  isMuted=false;}  }
class C{  public static OptionBuilder withLongOpt(String newLongopt){  OptionBuilder.longopt=newLongopt;  return instance;}  }
class C{  public UseCaseCall onError(OnErrorCallback errorCallback){  if (errorCallback == null) {    throw new IllegalArgumentException("The onErrorCallback used is null, you can't use a null instance as onError callback.");  }  this.onErrorCallback=errorCallback;  return this;}  }
class C{  public void zoomReset(){  if (mFitZoom != null) {    mFitZoom.apply();    mZoomIn.notifyZoomResetListeners();    repaint();  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public void testArguments(){  ArgumentParser parser=new ArgumentParser(new String[]{"a","bc","def=g","hjk=lmn opq"});  Iterator<String> iter=parser.iterator();  assertEquals("a",iter.next());  assertEquals("bc",iter.next());  assertEquals("def=g",iter.next());  assertEquals("hjk=lmn opq",iter.next());  assertIteratorAtEnd(iter);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.IDENTIFIER_REF___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:    return isValidSimpleAssignmentTarget();}return super.eInvoke(operationID,arguments);}  }
class C{  void handleLockRequest(DLockRequestMessage request) throws InterruptedException {  Assert.assertTrue(request.getRemoteThread() != null);  if (request.getObjectName() instanceof DLockBatch) {    handleLockBatch(request);    return;  }  waitWhileInitializing();  final boolean isDebugEnabled_DLS=logger.isTraceEnabled(LogMarker.DLS);  if (isDebugEnabled_DLS) {    logger.trace(LogMarker.DLS,"[DLockGrantor.handleLockRequest] {}",request);  }  if (!acquireDestroyReadLock(0)) {    if (isLocalRequest(request) && this.dlock.isDestroyed()) {      if (isDebugEnabled_DLS) {        logger.trace(LogMarker.DLS,"[DLockGrantor.handleLockRequest] about to throwIfDestroyed");      }      throwIfDestroyed(true);    } else {      if (isDebugEnabled_DLS) {        logger.trace(LogMarker.DLS,"[DLockGrantor.handleLockRequest] about to waitUntilDestroyed");      }      waitUntilDestroyed();      checkDestroyed();    }  }  try {    checkDestroyed();    if (acquireLockPermission(request)) {      handlePermittedLockRequest(request);    } else {    }  }  finally {    releaseDestroyReadLock();  }}  }
class C{  public void ifNull(final Label label){  mv.visitJumpInsn(Opcodes.IFNULL,label);}  }
class C{  public void add_return(VasaAssociationObject param){  if (local_return == null) {    local_return=new VasaAssociationObject[]{};  }  local_returnTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);  list.add(param);  this.local_return=(VasaAssociationObject[])list.toArray(new VasaAssociationObject[list.size()]);}  }
class C{  @Override protected void buildSingleAverage(Averagable averagable){  RankCorrelation other=(RankCorrelation)averagable;  this.counter+=other.counter;  this.value+=other.value;}  }
class C{  public UnifyElement(String uuid,String title){  super();  this.uuid=uuid;  this.title=title;}  }
class C{  public static int countUppercase(String str){  int count=0;  int index=str.length() - 1;  return countUppercase(str,index,count);}  }
class C{  public void testXmlReplacements() throws Exception {  String lookFor="test-xmlreplacement-attribute=\"test-xmlreplacement-value\"";  File serverXml=new File("target/catalina-base/conf/server.xml");  assertTrue(serverXml + " is not a file",serverXml.isFile());  BufferedReader serverXmlReader=new BufferedReader(new FileReader(serverXml));  for (String read=""; read != null; read=serverXmlReader.readLine()) {    if (read.contains(lookFor)) {      return;    }  }  fail("File " + serverXml + " does not contain: "+ lookFor);}  }
class C{  public boolean inWriteCache(final long addr){  return m_store.inWriteCache(decodeAddr(addr));}  }
class C{  public boolean isStale() throws IOException {  if (hasBufferedData()) {    return false;  }  int oldTimeout=this.socket.getSoTimeout();  try {    this.socket.setSoTimeout(1);    return fillBuffer() == -1;  } catch (  SocketTimeoutException e) {    return false;  }catch (  IOException e) {    return true;  } finally {    this.socket.setSoTimeout(oldTimeout);  }}  }
class C{  final Node predecessor() throws NullPointerException {  Node p=prev;  if (p == null)   throw new NullPointerException(); else   return p;}  }
class C{  public static void main(String[] args){  TestRunner.run(suite());}  }
class C{  private void flushBuffer() throws IOException {  if (bpos > 0) {    internalWrite(buffer,0,bpos,false);    bpos=0;  }}  }
class C{  @DSComment("Data structure only") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:56.944 -0500",hash_original_method="8C8D8A006008D0E9588030A46EE6B5B9",hash_generated_method="8A3393F2730E42F7A1FEBCB27514EF12") public Address(Locale locale){  mLocale=locale;}  }
class C{  public void rm(Object fileOrDir){  cmdLine.rm(getProject().file(fileOrDir));}  }
class C{  public static DistributedLogClientBuilder newBuilder(){  return new DistributedLogClientBuilder();}  }
class C{  protected void notifyChangingListeners(int oldValue,int newValue){  for (  OnWheelChangedListener listener : changingListeners) {    listener.onChanged(this,oldValue,newValue);  }}  }
class C{  public static void debug(boolean debug){  NotificationCenter.DBG=NotificationEffect.DBG=NotificationBuilder.DBG=NotificationEntry.DBG=NotificationHandler.DBG=NotificationRemote.DBG=NotificationRemoteCallback.DBG=NotificationLocal.DBG=NotificationGlobal.DBG=NotificationView.DBG=NotificationViewCallback.DBG=NotificationRootView.DBG=NotificationBoard.DBG=NotificationBoardCallback.DBG=ViewWrapper.DBG=ViewSwitcherWrapper.DBG=ChildViewManager.DBG=DBG=debug;}  }
class C{  protected void processTuple(Object tuple){  GenericRecord record=null;  try {    record=getGenericRecord(tuple);  } catch (  Exception e) {    LOG.error("Exception in parsing record");    errorCount++;  }  if (record != null) {    output.emit(record);    recordCount++;  } else   if (errorPort.isConnected()) {    errorPort.emit(tuple);    errorCount++;  }}  }
class C{  public final synchronized String readString(){  String s="";  try {    s=in.readLine();  } catch (  IOException e) {  }  if (s == null) {    s="";  }  return s;}  }
class C{  @Nullable public static Object compactObject(Object obj){  if (obj == null)   return null;  if (obj instanceof Enum)   return obj.toString();  if (obj instanceof String || obj instanceof Boolean || obj instanceof Number)   return obj;  if (obj instanceof Collection) {    Collection col=(Collection)obj;    Object[] res=new Object[col.size()];    int i=0;    for (    Object elm : col)     res[i++]=compactObject(elm);    return res;  }  if (obj.getClass().isArray()) {    Class<?> arrType=obj.getClass().getComponentType();    if (arrType.isPrimitive()) {      if (obj instanceof boolean[])       return Arrays.toString((boolean[])obj);      if (obj instanceof byte[])       return Arrays.toString((byte[])obj);      if (obj instanceof short[])       return Arrays.toString((short[])obj);      if (obj instanceof int[])       return Arrays.toString((int[])obj);      if (obj instanceof long[])       return Arrays.toString((long[])obj);      if (obj instanceof float[])       return Arrays.toString((float[])obj);      if (obj instanceof double[])       return Arrays.toString((double[])obj);    }    Object[] arr=(Object[])obj;    int iMax=arr.length - 1;    StringBuilder sb=new StringBuilder("[");    for (int i=0; i <= iMax; i++) {      sb.append(compactObject(arr[i]));      if (i != iMax)       sb.append(", ");    }    sb.append("]");    return sb.toString();  }  return U.compact(obj.getClass().getName());}  }
class C{  public static boolean isFileOlder(File file,long timeMillis){  if (file == null) {    throw new IllegalArgumentException("No specified file");  }  if (!file.exists()) {    return false;  }  return file.lastModified() < timeMillis;}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  out.writeDouble(knnDistance);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.021 -0500",hash_original_method="872EACB97AA4D13F74BE9616D4416942",hash_generated_method="F2C0CE0A613EB32C96FB34719DA1F31D") public void removePostDial(){  parameters.delete(POSTDIAL);}  }
class C{  public boolean isValidSimpleAssignmentTarget(){  Expression _expression=this.getExpression();  boolean _tripleNotEquals=(_expression != null);  if (_tripleNotEquals) {    Expression _expression_1=this.getExpression();    return _expression_1.isValidSimpleAssignmentTarget();  }  return true;}  }
class C{  public void reportInetCondition(int networkType,int percentage){  try {    mService.reportInetCondition(networkType,percentage);  } catch (  RemoteException e) {  }}  }
class C{  protected InvocableEndpointImpl(){  super();}  }
class C{  public void close(){  server.close();}  }
class C{  public static double[] centroid(SpatialComparable obj){  final int dim=obj.getDimensionality();  double[] centroid=new double[dim];  for (int d=0; d < dim; d++) {    centroid[d]=(obj.getMax(d) + obj.getMin(d)) * .5;  }  return centroid;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int idx=getInt(stack);  MediaNode node=getMediaNode(stack);  if (node != null) {    DataObjectFilter[] filts=node.getFilters();    if (filts != null && idx >= 0 && idx < filts.length)     return Boolean.valueOf(filts[idx].isMatchingFilter());  }  return Boolean.FALSE;}  }
class C{  public static void main(String[] args){  SpringApplication.run(Application.class,args);}  }
class C{  protected void createLink(Element e) throws BadLocationException, IOException {  int caretPos=getCaretPosition();  int startOffset=e.getStartOffset();  int length=e.getEndOffset() - e.getStartOffset();  boolean endOfDoc=e.getEndOffset() == getLength() + 1;  if (endOfDoc)   length--;  String text=getText(startOffset,length);  Matcher matcher=Pattern.compile("(?i)(\\b(http://|https://|www.|ftp://|file:/|mailto:)\\S+)(\\s+)").matcher(text);  if (matcher.find()) {    String url=matcher.group(1);    String endingSpaces=matcher.group(3);    int validPos=startOffset + matcher.start(3) + 1;    if (validPos > caretPos)     return;    Matcher dotEndMatcher=Pattern.compile("([\\W&&[^/]]+)$").matcher(url);    String endingDots="";    if (dotEndMatcher.find()) {      endingDots=dotEndMatcher.group(1);      url=dotEndMatcher.replaceFirst("");    }    text=matcher.replaceFirst("<a href='" + url + "'>"+ url+ "</a>"+ endingDots+ endingSpaces);    setOuterHTML(e,text);    Matcher spaceMatcher=Pattern.compile("^(\\s+)").matcher(text);    if (spaceMatcher.find()) {      String initialSpaces=spaceMatcher.group(1);      insertString(startOffset,initialSpaces,null);    }    spaceMatcher=Pattern.compile("(\\s+)$").matcher(text);    if (spaceMatcher.find()) {      String extraSpaces=spaceMatcher.group(1);      int endoffset=e.getEndOffset();      if (extraSpaces.charAt(extraSpaces.length() - 1) == '\n') {        extraSpaces=extraSpaces.substring(0,extraSpaces.length() - 1);        endoffset--;      }      insertString(Math.min(getLength(),endoffset),extraSpaces,null);    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createAttributeNS03.class,args);}  }
class C{  public void freeBefore(int pos){  assert pos >= 0;  assert pos <= nextPos;  final int newCount=nextPos - pos;  assert newCount <= count : "newCount=" + newCount + " count="+ count;  assert newCount <= buffer.length : "newCount=" + newCount + " buf.length="+ buffer.length;  count=newCount;}  }
class C{  public final boolean h1Castle(){  return (castleMask & (1 << H1_CASTLE)) != 0;}  }
class C{  public UDAnimator pause(){  AnimatorUtil.pause(getAnimator());  if (mTarget != null) {    mTarget.pauseAnimation();  }  return this;}  }
class C{  public boolean hasReceiversFor(DistributedMember mbr){  return this.conduit.hasReceiversFor(mbr);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  void syncSummaryView(View view){  TextView summaryView=(TextView)view.findViewById(com.android.internal.R.id.summary);  if (summaryView != null) {    boolean useDefaultSummary=true;    if (mChecked && mSummaryOn != null) {      summaryView.setText(mSummaryOn);      useDefaultSummary=false;    } else     if (!mChecked && mSummaryOff != null) {      summaryView.setText(mSummaryOff);      useDefaultSummary=false;    }    if (useDefaultSummary) {      final CharSequence summary=getSummary();      if (summary != null) {        summaryView.setText(summary);        useDefaultSummary=false;      }    }    int newVisibility=View.GONE;    if (!useDefaultSummary) {      newVisibility=View.VISIBLE;    }    if (newVisibility != summaryView.getVisibility()) {      summaryView.setVisibility(newVisibility);    }  }}  }
class C{  public static <T>HashSet<T> hashSet(int initialCapacity){  return new HashSet<T>(initialCapacity);}  }
class C{  @Deprecated public String asV1Beta1Path(){  if (type == Type.NORMAL) {    return "/topics/" + project + "/"+ topic;  } else {    return topic;  }}  }
class C{  public static void checkFloat(Double expected,IonValue actual){  checkType(IonType.FLOAT,actual);  IonFloat i=(IonFloat)actual;  if (expected == null) {    assertTrue("expected null value",actual.isNullValue());  } else {    assertEquals("decimal content",expected.doubleValue(),i.doubleValue(),0d);  }}  }
class C{  public SwingGui(Dim dim,String title){  super(title);  this.dim=dim;  init();  dim.setGuiCallback(this);}  }
class C{  void withData(Node node,Consumer<Entities> cb){  Object obj;  if (node.canGet(DATA,Entities.class) && (obj=node.get(DATA)) != null) {    cb.accept((Entities)obj);  } else {    System.err.println("Cannot locate item.");    LogEmitter.factory.get().emit(node,Core.ALERT.WARNING,"Cannot locate item.");  }}  }
class C{  protected String childToDisplayLabel(Object child){  return child.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.162 -0500",hash_original_method="4B990F83EF66D5D2EAA453ED852E8DC7",hash_generated_method="A8C6BC8103293C709C8E18829559112E") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("AcceptParser.parse");  AcceptList list=new AcceptList();  try {    headerName(TokenTypes.ACCEPT);    Accept accept=new Accept();    accept.setHeaderName(SIPHeaderNames.ACCEPT);    this.lexer.SPorHT();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    accept.setContentType(token.getTokenValue());    this.lexer.match('/');    this.lexer.match(TokenTypes.ID);    token=lexer.getNextToken();    accept.setContentSubType(token.getTokenValue());    this.lexer.SPorHT();    super.parse(accept);    list.add(accept);    while (lexer.lookAhead(0) == ',') {      this.lexer.match(',');      this.lexer.SPorHT();      accept=new Accept();      this.lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      accept.setContentType(token.getTokenValue());      this.lexer.match('/');      this.lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      accept.setContentSubType(token.getTokenValue());      this.lexer.SPorHT();      super.parse(accept);      list.add(accept);    }    return list;  }  finally {    if (debug)     dbg_leave("AcceptParser.parse");  }}  }
class C{  public void test_ticket_753_getStatements() throws Exception {  populate();  final GraphQueryResult resultIncludeInferred=m_repo.getStatements(s,p,o,true,c);  try {    int count=0;    while (resultIncludeInferred.hasNext()) {      resultIncludeInferred.next();      count++;    }    assertEquals(1,count);  }  finally {    resultIncludeInferred.close();  }}  }
class C{  public Builder addInCollectionItemClause(String collectionFieldName,Collection<String> itemNames,Occurance occurance){  String collectionItemFieldName=QuerySpecification.buildCollectionItemName(collectionFieldName);  return addInClause(collectionItemFieldName,itemNames,occurance);}  }
class C{  public boolean equals(Object object){  if (object == null || !(object instanceof AttributeSet)) {    return false;  }  AttributeSet aset=(AttributeSet)object;  if (aset.size() != size()) {    return false;  }  Attribute[] attrs=toArray();  for (int i=0; i < attrs.length; i++) {    if (!aset.containsValue(attrs[i])) {      return false;    }  }  return true;}  }
class C{  public OneField(OneField other){  if (other.isSetField()) {    this.field=new EmptyStruct(other.field);  }}  }
class C{  public SequenceInputStream(InputStream s1,InputStream s2){  Vector<InputStream> v=new Vector<>(2);  v.addElement(s1);  v.addElement(s2);  e=v.elements();  try {    nextStream();  } catch (  IOException ex) {    throw new Error("panic");  }}  }
class C{  public MqttAndroidClient createClient(Context context,String serverURI,String clientId){  MqttAndroidClient client=new MqttAndroidClient(context,serverURI,clientId);  return client;}  }
class C{  private void updateScreenElements(Integer adsOrMoticons,Boolean res){switch (adsOrMoticons) {case 1:    if (res) {      remove_ads_moticoins.setOnClickListener(null);      remove_ads_label_moticoins.setText(getResources().getString(R.string.unlocked));      remove_ads_label_moticoins.setCompoundDrawablesWithIntrinsicBounds(0,0,0,0);      remove_ads_inapp.setOnClickListener(null);      remove_ads_label_inapp.setText(getResources().getString(R.string.unlocked));      remove_ads_label_inapp.setCompoundDrawablesWithIntrinsicBounds(0,0,0,0);    } else {      remove_ads_label_moticoins.setText(MOTICOINS_REMOVE_ADS.toString());      remove_ads_label_moticoins.setCompoundDrawablesWithIntrinsicBounds(0,0,R.drawable.ic_stars_white,0);      remove_ads_label_moticoins.setCompoundDrawablePadding(4);      remove_ads_label_inapp.setText(INAPP_REMOVE_ADS);      remove_ads_label_inapp.setCompoundDrawablesWithIntrinsicBounds(0,0,R.drawable.ic_shop_white,0);      remove_ads_label_inapp.setCompoundDrawablePadding(4);    }  break;case 2:if (res) {  unlock_moticons_moticoins.setOnClickListener(null);  unlock_moticons_label_moticoins.setText(getResources().getString(R.string.unlocked));  unlock_moticons_label_moticoins.setCompoundDrawablesWithIntrinsicBounds(0,0,0,0);  unlock_moticons_inapp.setOnClickListener(null);  unlock_moticons_label_inapp.setText(getResources().getString(R.string.unlocked));  unlock_moticons_label_inapp.setCompoundDrawablesWithIntrinsicBounds(0,0,0,0);} else {  unlock_moticons_label_moticoins.setText(MOTICOINS_UNLOCK_MOTICONS.toString());  unlock_moticons_label_moticoins.setCompoundDrawablesWithIntrinsicBounds(0,0,R.drawable.ic_stars_white,0);  unlock_moticons_label_moticoins.setCompoundDrawablePadding(4);  unlock_moticons_label_inapp.setText(INAPP_UNLOCK_MOTICONS);  unlock_moticons_label_inapp.setCompoundDrawablesWithIntrinsicBounds(0,0,R.drawable.ic_shop_white,0);  unlock_moticons_label_inapp.setCompoundDrawablePadding(4);}break;}}  }
class C{  private boolean isOnStackIgnoreList(StackTraceElement[] stackTrace){  if (getStackIgnoreEnabled() == false)   return false;  if (stackIgnoreList.isEmpty())   return false;  for (int i=0; i < stackTrace.length; i++) {    if (isOnList(stackIgnoreList,stackTrace[i].getClassName()))     return true;  }  return false;}  }
class C{  public void addItemEventListener(ItemEventListener listener){  PacketListener conListener=new ItemEventTranslator(listener);  itemEventToListenerMap.put(listener,conListener);  con.addPacketListener(conListener,new EventContentFilter(EventElementType.items.toString(),"item"));}  }
class C{  private void remapIndexes(int start,int end){  for (int i=start; i < end; i++) {    String sha1=getHash(i);    if (sha1 != null)     _indexes.put(sha1,new Integer(i));  }}  }
class C{  public boolean isFormBottomPaddingEditingMode(){  return bottomPaddingMode;}  }
class C{  private static void dualPivotQuicksort(long[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  long ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    long t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    long t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    long t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    long t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    long t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    long t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    long t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    long t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    long t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  long pivot1=ae2;  a[e2]=a[left];  long pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      long ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      long ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      long ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public static void runInBackground(Runnable runnable){  backgroundExecutor.submit(runnable);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.153 -0500",hash_original_method="D1BB65E44FB06EB911D3CDAFED8D37CD",hash_generated_method="0BCE982FF5852BF7039A7416E6F1C03A") @DSVerified @DSSafe(DSCat.XML) public void endElement(String uri,String localName,String qName) throws SAXException {}  }
class C{  public Set<ClientConsumerInternal> cloneConsumers(){synchronized (consumers) {    return new HashSet<>(consumers.values());  }}  }
class C{  private byte[] validateClientResponse(byte[][] responseVal) throws SaslException, UnsupportedEncodingException {  if (responseVal[CHARSET] != null) {    if (!useUTF8 || !"utf-8".equals(new String(responseVal[CHARSET],encoding))) {      throw new SaslException("DIGEST-MD5: digest response format " + "violation. Incompatible charset value: " + new String(responseVal[CHARSET]));    }  }  int clntMaxBufSize=(responseVal[MAXBUF] == null) ? DEFAULT_MAXBUF : Integer.parseInt(new String(responseVal[MAXBUF],encoding));  sendMaxBufSize=((sendMaxBufSize == 0) ? clntMaxBufSize : Math.min(sendMaxBufSize,clntMaxBufSize));  String username;  if (responseVal[USERNAME] != null) {    username=new String(responseVal[USERNAME],encoding);    logger.log(Level.FINE,"DIGEST82:Username: {0}",username);  } else {    throw new SaslException("DIGEST-MD5: digest response format " + "violation. Missing username.");  }  negotiatedRealm=((responseVal[REALM] != null) ? new String(responseVal[REALM],encoding) : "");  logger.log(Level.FINE,"DIGEST83:Client negotiated realm: {0}",negotiatedRealm);  if (!serverRealms.contains(negotiatedRealm)) {    throw new SaslException("DIGEST-MD5: digest response format " + "violation. Nonexistent realm: " + negotiatedRealm);  }  if (responseVal[NONCE] == null) {    throw new SaslException("DIGEST-MD5: digest response format " + "violation. Missing nonce.");  }  byte[] nonceFromClient=responseVal[NONCE];  if (!Arrays.equals(nonceFromClient,nonce)) {    throw new SaslException("DIGEST-MD5: digest response format " + "violation. Mismatched nonce.");  }  if (responseVal[CNONCE] == null) {    throw new SaslException("DIGEST-MD5: digest response format " + "violation. Missing cnonce.");  }  byte[] cnonce=responseVal[CNONCE];  if (responseVal[NONCE_COUNT] != null && NONCE_COUNT_VALUE != Integer.parseInt(new String(responseVal[NONCE_COUNT],encoding),16)) {    throw new SaslException("DIGEST-MD5: digest response format " + "violation. Nonce count does not match: " + new String(responseVal[NONCE_COUNT]));  }  negotiatedQop=((responseVal[QOP] != null) ? new String(responseVal[QOP],encoding) : "auth");  logger.log(Level.FINE,"DIGEST84:Client negotiated qop: {0}",negotiatedQop);  byte cQop;switch (negotiatedQop) {case "auth":    cQop=NO_PROTECTION;  break;case "auth-int":cQop=INTEGRITY_ONLY_PROTECTION;integrity=true;rawSendSize=sendMaxBufSize - 16;break;case "auth-conf":cQop=PRIVACY_PROTECTION;integrity=privacy=true;rawSendSize=sendMaxBufSize - 26;break;default :throw new SaslException("DIGEST-MD5: digest response format " + "violation. Invalid QOP: " + negotiatedQop);}if ((cQop & allQop) == 0) {throw new SaslException("DIGEST-MD5: server does not support " + " qop: " + negotiatedQop);}if (privacy) {negotiatedCipher=((responseVal[CIPHER] != null) ? new String(responseVal[CIPHER],encoding) : null);if (negotiatedCipher == null) {throw new SaslException("DIGEST-MD5: digest response format " + "violation. No cipher specified.");}int foundCipher=-1;logger.log(Level.FINE,"DIGEST85:Client negotiated cipher: {0}",negotiatedCipher);for (int j=0; j < CIPHER_TOKENS.length; j++) {if (negotiatedCipher.equals(CIPHER_TOKENS[j]) && myCiphers[j] != 0) {foundCipher=j;break;}}if (foundCipher == -1) {throw new SaslException("DIGEST-MD5: server does not " + "support cipher: " + negotiatedCipher);}if ((CIPHER_MASKS[foundCipher] & HIGH_STRENGTH) != 0) {negotiatedStrength="high";} else if ((CIPHER_MASKS[foundCipher] & MEDIUM_STRENGTH) != 0) {negotiatedStrength="medium";} else {negotiatedStrength="low";}logger.log(Level.FINE,"DIGEST86:Negotiated strength: {0}",negotiatedStrength);}String digestUriFromResponse=((responseVal[DIGEST_URI]) != null ? new String(responseVal[DIGEST_URI],encoding) : null);if (digestUriFromResponse != null) {logger.log(Level.FINE,"DIGEST87:digest URI: {0}",digestUriFromResponse);}if (uriMatches(digestUri,digestUriFromResponse)) {digestUri=digestUriFromResponse;} else {throw new SaslException("DIGEST-MD5: digest response format " + "violation. Mismatched URI: " + digestUriFromResponse + "; expecting: "+ digestUri);}byte[] responseFromClient=responseVal[RESPONSE];if (responseFromClient == null) {throw new SaslException("DIGEST-MD5: digest response format " + " violation. Missing response.");}byte[] authzidBytes;String authzidFromClient=((authzidBytes=responseVal[AUTHZID]) != null ? new String(authzidBytes,encoding) : username);if (authzidBytes != null) {logger.log(Level.FINE,"DIGEST88:Authzid: {0}",new String(authzidBytes));}char[] passwd;try {RealmCallback rcb=new RealmCallback("DIGEST-MD5 realm: ",negotiatedRealm);NameCallback ncb=new NameCallback("DIGEST-MD5 authentication ID: ",username);PasswordCallback pcb=new PasswordCallback("DIGEST-MD5 password: ",false);cbh.handle(new Callback[]{rcb,ncb,pcb});passwd=pcb.getPassword();pcb.clearPassword();} catch (UnsupportedCallbackException e) {throw new SaslException("DIGEST-MD5: Cannot perform callback to acquire password",e);}catch (IOException e) {throw new SaslException("DIGEST-MD5: IO error acquiring password",e);}if (passwd == null) {throw new SaslException("DIGEST-MD5: cannot acquire password for " + username + " in realm : "+ negotiatedRealm);}try {byte[] expectedResponse;try {expectedResponse=generateResponseValue("AUTHENTICATE",digestUri,negotiatedQop,username,negotiatedRealm,passwd,nonce,cnonce,NONCE_COUNT_VALUE,authzidBytes);} catch (NoSuchAlgorithmException e) {throw new SaslException("DIGEST-MD5: problem duplicating client response",e);}catch (IOException e) {throw new SaslException("DIGEST-MD5: problem duplicating client response",e);}if (!Arrays.equals(responseFromClient,expectedResponse)) {throw new SaslException("DIGEST-MD5: digest response format " + "violation. Mismatched response.");}try {AuthorizeCallback acb=new AuthorizeCallback(username,authzidFromClient);cbh.handle(new Callback[]{acb});if (acb.isAuthorized()) {authzid=acb.getAuthorizedID();} else {throw new SaslException("DIGEST-MD5: " + username + " is not authorized to act as "+ authzidFromClient);}} catch (SaslException e) {throw e;}catch (UnsupportedCallbackException e) {throw new SaslException("DIGEST-MD5: Cannot perform callback to check authzid",e);}catch (IOException e) {throw new SaslException("DIGEST-MD5: IO error checking authzid",e);}return generateResponseAuth(username,passwd,cnonce,NONCE_COUNT_VALUE,authzidBytes);}  finally {for (int i=0; i < passwd.length; i++) {passwd[i]=0;}}}  }
class C{  public LoanTransaction handleChargeAppliedTransaction(final LoanCharge loanCharge,final LocalDate suppliedTransactionDate,final AppUser currentUser){  final Money chargeAmount=loanCharge.getAmount(getCurrency());  Money feeCharges=chargeAmount;  Money penaltyCharges=Money.zero(loanCurrency());  if (loanCharge.isPenaltyCharge()) {    penaltyCharges=chargeAmount;    feeCharges=Money.zero(loanCurrency());  }  LocalDate transactionDate=null;  if (suppliedTransactionDate != null) {    transactionDate=suppliedTransactionDate;  } else {    transactionDate=loanCharge.getDueLocalDate();    final LocalDate currentDate=DateUtils.getLocalDateOfTenant();    if (transactionDate == null || currentDate.isBefore(transactionDate)) {      transactionDate=currentDate;    }  }  final LoanTransaction applyLoanChargeTransaction=LoanTransaction.accrueLoanCharge(this,getOffice(),chargeAmount,transactionDate,feeCharges,penaltyCharges,DateUtils.getLocalDateTimeOfTenant(),currentUser);  Integer installmentNumber=null;  final LoanChargePaidBy loanChargePaidBy=new LoanChargePaidBy(applyLoanChargeTransaction,loanCharge,loanCharge.getAmount(getCurrency()).getAmount(),installmentNumber);  applyLoanChargeTransaction.getLoanChargesPaid().add(loanChargePaidBy);  addLoanTransaction(applyLoanChargeTransaction);  return applyLoanChargeTransaction;}  }
class C{  protected String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  @Override public boolean isThreadSafe(){  return m_IncrementalDisabled;}  }
class C{  public TFloatObjectHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  _hashingStrategy=this;}  }
class C{  public Set<JsonUser> loadKnownUsers() throws InterruptedException, ExecutionException, RemoteException, OperationApplicationException {  Set<JsonUser> users=getUsersFromDb();  if (users.isEmpty()) {    LOG.i("Database contains no user; fetching from server");    users=syncKnownUsers();  }  LOG.i(String.format("Found %d users in db",users.size()));  return users;}  }
class C{  public HoldingLine(String sidc){  super(sidc);}  }
class C{  private static boolean isMultSelectNode(Element child){  return (child.getAttributeValue(null,ATTRIBUTE_MULTIPLE) != null && child.getAttributeValue(null,ATTRIBUTE_MULTIPLE).equals("1"));}  }
class C{  @Override public void generateAtom(XmlWriter w,ExtensionProfile extProfile) throws IOException {  generateFeedStart(extProfile,w,null);  generateEntries(w,extProfile);  generateFeedEnd(w);}  }
class C{  static public void assertNotSame(String message,Object expected,Object actual){  if (expected == actual)   failSame(message);}  }
class C{  public static boolean exists(Model model){  return model != null && exists(model.getGraph());}  }
class C{  public <T>List<T> initPlugins(List<PluginInfo> pluginInfos,Class<T> type,String defClassName){  if (pluginInfos.isEmpty())   return Collections.emptyList();  List<T> result=new ArrayList<>();  for (  PluginInfo info : pluginInfos)   result.add(createInitInstance(info,type,type.getSimpleName(),defClassName));  return result;}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  void destruct(){  lock.writeLock().lock();  try {    if (tblAddr == 0)     return;    for (long binAddr=tblAddr, tblEnd=(tblAddr + memCap); binAddr < tblEnd; binAddr+=8) {      long entryAddr=Bin.first(binAddr,mem);      if (entryAddr == 0)       continue;      while (true) {        long next=Entry.nextAddress(entryAddr,mem);        mem.release(entryAddr,Entry.size(entryAddr,mem));        if (next == 0)         break; else         entryAddr=next;      }    }    mem.releaseSystem(tblAddr,memCap);  }  finally {    tblAddr=0;    lock.writeLock().unlock();  }}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.recyclerView=this.findView(R.id.data_base_rv);  this.recyclerView.addItemDecoration(new EasyDividerItemDecoration(this,EasyDividerItemDecoration.VERTICAL_LIST));}  }
class C{  @Override public void close(){synchronized (this) {    if (mIsClosed) {      return;    }    mIsClosed=true;  }  mSharedReference.deleteReference();}  }
class C{  private ChainedUserNameMapper create(UserNameMapper... mappers){  ChainedUserNameMapper mapper=new ChainedUserNameMapper();  mapper.setMappers(mappers);  mapper.start();  return mapper;}  }
class C{  public static void mergeHierarchyFiles(List<File> filesToMerge,File destFile,int keySizeInBytes) throws IOException {  List<ByteArrayHolder> holder=new ArrayList<ByteArrayHolder>(CarbonCommonConstants.CONSTANT_SIZE_TEN);  for (  File hierFiles : filesToMerge) {    readHierarchyFile(hierFiles,keySizeInBytes,holder);  }  Collections.sort(holder);  FileOutputStream fos=null;  FileChannel outPutFileChannel=null;  try {    boolean isFileCreated=false;    if (!destFile.exists()) {      isFileCreated=destFile.createNewFile();      if (!isFileCreated) {        throw new IOException("unable to create file" + destFile.getAbsolutePath());      }    }    fos=new FileOutputStream(destFile);    outPutFileChannel=fos.getChannel();    for (    ByteArrayHolder arrayHolder : holder) {      try {        writeIntoHierarchyFile(arrayHolder.getMdKey(),arrayHolder.getPrimaryKey(),outPutFileChannel);      } catch (      SliceMergerException e) {        LOGGER.error("Unable to write hierarchy file");        throw new IOException(e);      }    }  }  finally {    CarbonUtil.closeStreams(outPutFileChannel,fos);  }}  }
class C{  static void printSyntax(){  System.out.println("\n" + "=====================================================\n" + "=== tinyMediaManager (c) 2012-2016 Manuel Laggner ===\n"+ "=====================================================\n"+ "\n"+ "SYNTAX:    Windows:   tinyMediaManagerCMD.exe <parameters>\n"+ "           Linux:   ./tinyMediaManagerCMD.sh  <parameters>\n"+ "\n"+ "\n"+ "PARAMETERS:\n"+ "\n"+ "    UPDATE: Will scan your folders, and adds all found items to database\n"+ "            Keeps an internal list of 'new' items (for this run only!)\n"+ "\n"+ "    -updateMovies        update all movie datasources\n"+ "    -updateMoviesX       replace X with 1-9 - just updates a single movie datasource; ordering like GUI\n"+ "    -updateTv            update all TvShow\n"+ "    -updateTvX           replace X with 1-9 - just updates a single TvShow datasource; ordering like GUI\n"+ "    -update              update all (short for '-updateMovies -updateTv')\n"+ "\n"+ "    SCRAPE: auto-scrapes (force best match) your specified items:\n"+ "    -scrapeNew           only NEW FOUND movies/TvShows/episodes from former update\n"+ "    -scrapeUnscraped     all movies/TvShows/episodes, which have not yet been scraped\n"+ "    -scrapeAll           ALL movies/TvShows/episodes, whether they have already been scraped or not\n"+ "\n"+ "    -rename              rename & cleanup all the movies/TvShows/episodes from former scrape command\n"+ "\n"+ "    -checkFiles          does a physical check, if all files in DB are existent on filesystem (might take long!)\n"+ "\n"+ "\n"+ "EXAMPLES:\n"+ "\n"+ "    tinyMediaManagerCMD.exe -updateMovies -updateTv3 -scrapeNew -rename\n"+ "    tinyMediaManagerCMD.exe -scrapeUnscraped -rename\n"+ "\n");}  }
class C{  public h2(Element element){  addElement(element);}  }
class C{  public static void generateMarkersForSecuritySpecification(SecuritySpecModel spec,IProject project){  removeAllDroidsafeMarkers(project);  List<MethodModel> methods=new ArrayList<MethodModel>(spec.getEntryPoints());  Collections.sort(methods);  Map<MethodModel,List<MethodModel>> inputEventBlocks=spec.getInputEventBlocks();  if (inputEventBlocks != null) {    for (    MethodModel inputMethod : inputEventBlocks.keySet()) {      SourceLocationTag line=inputMethod.getDeclSourceLocation();      if (line != null) {        String clz=line.getClz();        String classPath=DroidsafePluginUtilities.classNamePath(clz);        IFile file=project.getFile(classPath);        int lineNbr=line.getLine() - 1;        if (file.exists()) {          try {            addMarkerForMethod(inputMethod,file,inputMethod.getShortSignature(),lineNbr);            addMarkerForMethod(inputMethod,file,inputMethod.getSignature(),lineNbr);            if (inputMethod.getReceiverValue() != null) {              addMarkerForMethod(inputMethod,file,inputMethod.getReceiverValue(),lineNbr);            }            if (inputMethod.getPermissions() != null) {              for (              String permission : inputMethod.getPermissions()) {                String message="Permission: " + permission;                addMarkerForMethod(inputMethod,file,message,lineNbr);              }            }          } catch (          CoreException ex) {            ex.printStackTrace();          }        }      }      for (      MethodModel outputMethod : inputEventBlocks.get(inputMethod)) {        List<CodeLocationModel> locations=outputMethod.getLines();        if (locations != null) {          for (          CodeLocationModel location : locations) {            String clz=location.getClz();            String classPath=DroidsafePluginUtilities.classNamePath(clz);            IFile file=project.getFile(classPath);            int lineNbr=location.getLine();            if (file.exists()) {              try {                addMarkerForMethod(outputMethod,file,outputMethod.getShortSignature(),lineNbr);                addMarkerForMethod(outputMethod,file,outputMethod.getSignature(),lineNbr);                if (outputMethod.getPermissions() != null) {                  for (                  String permission : outputMethod.getPermissions()) {                    String message="Permission: " + permission;                    addMarkerForMethod(outputMethod,file,message,lineNbr);                  }                }                if (outputMethod.getReceiverValue() != null) {                  addMarkerForMethod(outputMethod,file,outputMethod.getReceiverValue(),lineNbr);                }                List<HotspotModel> hotspots=location.getHotspots();                for (                HotspotModel hotspot : hotspots) {                  addMarkerForMethod(outputMethod,file,hotspot.toString(),lineNbr);                }              } catch (              CoreException ex) {                ex.printStackTrace();              }            }          }        }      }    }  }}  }
class C{  @Override protected void onOp(String target,String sourceNick,String sourceLogin,String sourceHostname,String recipient){  Message message=new Message(service.getString(R.string.message_op,sourceNick,recipient));  message.setColor(Message.COLOR_BLUE);  message.setIcon(R.drawable.op);  server.getConversation(target).addMessage(message);  Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target);  service.sendBroadcast(intent);}  }
class C{  public String readString() throws SQLException {  return (String)getNextAttribute();}  }
class C{  public static boolean isXML11NameHighSurrogate(int c){  return (0xD800 <= c && c <= 0xDB7F);}  }
class C{  public void checkSimpleArray(boolean registered) throws Exception {  startUp(registered);  cache1.put(1,new EnumType[]{EnumType.ONE,EnumType.TWO});  validateSimpleArray(registered);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public byte map(byte src){  char c=map((char)src);  if (c < Byte.MIN_VALUE || c > Byte.MAX_VALUE) {    return 0;  }  return (byte)c;}  }
class C{  public void testSendFunctionGroup4(){  AbstractThrottle instance=new AbstractThrottleImpl();  instance.sendFunctionGroup4();  jmri.util.JUnitAppender.assertErrorMessage("Can't send F13-F20 since no command station defined");}  }
class C{  public static boolean isNullOrEmpty(String s){  return s == null || s.length() == 0;}  }
class C{  public CertificateExpiredException(){  super();}  }
class C{  public void removeAllNodes(){  nodePositions.clear();  getChildren().clear();}  }
class C{  public static boolean isPresent(){  return m_Present;}  }
class C{  public JSONArray put(long value){  this.put(new Long(value));  return this;}  }
class C{  private void assertDetectedFaces(DetectedFaces detectedFaces,VisualRecognitionOptions options){  assertNotNull(detectedFaces);  assertNotNull(detectedFaces.getImages());  assertTrue(detectedFaces.getImages().size() > 0);  assertNull(detectedFaces.getImages().get(0).getError());  assertNotNull(detectedFaces.getImages().get(0).getFaces());  if (options.url() != null) {    assertEquals(IMAGE_FACE_URL,detectedFaces.getImages().get(0).getResolvedUrl());    assertEquals(IMAGE_FACE_URL,detectedFaces.getImages().get(0).getSourceUrl());  } else {    assertNotNull(detectedFaces.getImages().get(0).getImage());  }}  }
class C{  public static void closeSilently(Statement stmt){  if (stmt != null) {    try {      stmt.close();    } catch (    SQLException e) {    }  }}  }
class C{  public void hide(){  if (mAnchor == null)   return;  if (mShowing) {    try {      mHandler.removeMessages(SHOW_PROGRESS);      mWindowManager.removeView(mDecor);    } catch (    IllegalArgumentException ex) {      Log.w("MediaController","already removed");    }    mShowing=false;  }}  }
class C{  public long convertTransverseMercatorToGeodetic(double Easting,double Northing){  double c;  double de;  double dlam;  double eta;  double eta2;  double eta3;  double eta4;  double ftphi;  int i;  double sn;  double sr;  double t;  double tan2;  double tan4;  double t10;  double t11;  double t12;  double t13;  double t14;  double t15;  double t16;  double t17;  double tmd;  double tmdo;  long Error_Code=TRANMERC_NO_ERROR;  if ((Easting < (TranMerc_False_Easting - TranMerc_Delta_Easting)) || (Easting > (TranMerc_False_Easting + TranMerc_Delta_Easting))) {    Error_Code|=TRANMERC_EASTING_ERROR;  }  if ((Northing < (TranMerc_False_Northing - TranMerc_Delta_Northing)) || (Northing > (TranMerc_False_Northing + TranMerc_Delta_Northing))) {    Error_Code|=TRANMERC_NORTHING_ERROR;  }  if (Error_Code == TRANMERC_NO_ERROR) {    tmdo=TranMerc_ap * TranMerc_Origin_Lat - TranMerc_bp * Math.sin(2.0 * TranMerc_Origin_Lat) + TranMerc_cp * Math.sin(4.0 * TranMerc_Origin_Lat) - TranMerc_dp * Math.sin(6.0 * TranMerc_Origin_Lat) + TranMerc_ep * Math.sin(8.0 * TranMerc_Origin_Lat);    tmd=tmdo + (Northing - TranMerc_False_Northing) / TranMerc_Scale_Factor;    sr=TranMerc_a * (1.e0 - TranMerc_es) / Math.pow(Math.sqrt(1.e0 - TranMerc_es * Math.pow(Math.sin(0.e0),2)),3);    ftphi=tmd / sr;    for (i=0; i < 5; i++) {      t10=TranMerc_ap * ftphi - TranMerc_bp * Math.sin(2.0 * ftphi) + TranMerc_cp * Math.sin(4.0 * ftphi) - TranMerc_dp * Math.sin(6.0 * ftphi) + TranMerc_ep * Math.sin(8.0 * ftphi);      sr=TranMerc_a * (1.e0 - TranMerc_es) / Math.pow(Math.sqrt(1.e0 - TranMerc_es * Math.pow(Math.sin(ftphi),2)),3);      ftphi=ftphi + (tmd - t10) / sr;    }    sr=TranMerc_a * (1.e0 - TranMerc_es) / Math.pow(Math.sqrt(1.e0 - TranMerc_es * Math.pow(Math.sin(ftphi),2)),3);    sn=TranMerc_a / Math.sqrt(1.e0 - TranMerc_es * Math.pow(Math.sin(ftphi),2));    c=Math.cos(ftphi);    t=Math.tan(ftphi);    tan2=t * t;    tan4=tan2 * tan2;    eta=TranMerc_ebs * Math.pow(c,2);    eta2=eta * eta;    eta3=eta2 * eta;    eta4=eta3 * eta;    de=Easting - TranMerc_False_Easting;    if (Math.abs(de) < 0.0001)     de=0.0;    t10=t / (2.e0 * sr * sn* Math.pow(TranMerc_Scale_Factor,2));    t11=t * (5.e0 + 3.e0 * tan2 + eta - 4.e0 * Math.pow(eta,2) - 9.e0 * tan2 * eta) / (24.e0 * sr * Math.pow(sn,3)* Math.pow(TranMerc_Scale_Factor,4));    t12=t * (61.e0 + 90.e0 * tan2 + 46.e0 * eta + 45.E0 * tan4 - 252.e0 * tan2 * eta - 3.e0 * eta2 + 100.e0 * eta3 - 66.e0 * tan2 * eta2 - 90.e0 * tan4 * eta + 88.e0 * eta4 + 225.e0 * tan4 * eta2 + 84.e0 * tan2 * eta3 - 192.e0 * tan2 * eta4) / (720.e0 * sr * Math.pow(sn,5)* Math.pow(TranMerc_Scale_Factor,6));    t13=t * (1385.e0 + 3633.e0 * tan2 + 4095.e0 * tan4 + 1575.e0 * Math.pow(t,6)) / (40320.e0 * sr * Math.pow(sn,7)* Math.pow(TranMerc_Scale_Factor,8));    Latitude=ftphi - Math.pow(de,2) * t10 + Math.pow(de,4) * t11 - Math.pow(de,6) * t12 + Math.pow(de,8) * t13;    t14=1.e0 / (sn * c * TranMerc_Scale_Factor);    t15=(1.e0 + 2.e0 * tan2 + eta) / (6.e0 * Math.pow(sn,3) * c* Math.pow(TranMerc_Scale_Factor,3));    t16=(5.e0 + 6.e0 * eta + 28.e0 * tan2 - 3.e0 * eta2 + 8.e0 * tan2 * eta + 24.e0 * tan4 - 4.e0 * eta3 + 4.e0 * tan2 * eta2 + 24.e0 * tan2 * eta3) / (120.e0 * Math.pow(sn,5) * c* Math.pow(TranMerc_Scale_Factor,5));    t17=(61.e0 + 662.e0 * tan2 + 1320.e0 * tan4 + 720.e0 * Math.pow(t,6)) / (5040.e0 * Math.pow(sn,7) * c* Math.pow(TranMerc_Scale_Factor,7));    dlam=de * t14 - Math.pow(de,3) * t15 + Math.pow(de,5) * t16 - Math.pow(de,7) * t17;    Longitude=TranMerc_Origin_Long + dlam;    if (Math.abs(Latitude) > (90.0 * PI / 180.0))     Error_Code|=TRANMERC_NORTHING_ERROR;    if ((Longitude) > (PI)) {      Longitude-=(2 * PI);      if (Math.abs(Longitude) > PI)       Error_Code|=TRANMERC_EASTING_ERROR;    }    if (Math.abs(dlam) > (9.0 * PI / 180) * Math.cos(Latitude)) {      Error_Code|=TRANMERC_LON_WARNING;    }    if (Latitude > 1.0e10)     Error_Code|=TRANMERC_LON_WARNING;  }  return (Error_Code);}  }
class C{  public void renderAccountOnFile(AccountOnFile accountOnFile,String productId,ViewGroup parent){  renderer.renderAccountOnFile(accountOnFile,productId,parent);}  }
class C{  public LocalMonitoredVm(VmIdentifier vmid,int interval) throws MonitorException {  super(vmid,interval);  this.pdb=new PerfDataBuffer(vmid);  listeners=new ArrayList<VmListener>();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.131 -0500",hash_original_method="1E17DC2ECF868A450BC9B6F62927FD6A",hash_generated_method="2EE874E2E6C2748C0F4D4D80A9216851") public int saveLayerAlpha(float left,float top,float right,float bottom,int alpha,int saveFlags){  return native_saveLayerAlpha(mNativeCanvas,left,top,right,bottom,alpha,saveFlags);}  }
class C{  private void lockedQueryPrivate(Object key,int operator,Collection results,CompiledValue iterOps,RuntimeIterator runtimeItr,ExecutionContext context,Set keysToRemove,List projAttrib,SelectResults intermediateResults,boolean isIntersection) throws TypeMismatchException, FunctionDomainException, NameResolutionException, QueryInvocationTargetException {  if (keysToRemove == null) {    keysToRemove=new HashSet(0);  }  int limit=-1;  Boolean applyLimit=(Boolean)context.cacheGet(CompiledValue.CAN_APPLY_LIMIT_AT_INDEX);  if (applyLimit != null && applyLimit.booleanValue()) {    limit=((Integer)context.cacheGet(CompiledValue.RESULT_LIMIT)).intValue();  }  Boolean orderByClause=(Boolean)context.cacheGet(CompiledValue.CAN_APPLY_ORDER_BY_AT_INDEX);  boolean applyOrderBy=false;  boolean asc=true;  List orderByAttrs=null;  boolean multiColOrderBy=false;  if (orderByClause != null && orderByClause.booleanValue()) {    orderByAttrs=(List)context.cacheGet(CompiledValue.ORDERBY_ATTRIB);    CompiledSortCriterion csc=(CompiledSortCriterion)orderByAttrs.get(0);    asc=!csc.getCriterion();    applyOrderBy=true;    multiColOrderBy=orderByAttrs.size() > 1;  }  if (isEmpty()) {    return;  }  key=getPdxStringForIndexedPdxKeys(key);  evaluate(key,operator,results,iterOps,runtimeItr,context,keysToRemove,projAttrib,intermediateResults,isIntersection,limit,applyOrderBy,orderByAttrs);}  }
class C{  public static String buildScenario(List<String> urlList){  if (urlList == null || urlList.isEmpty()) {    return null;  }  StringBuilder strb=new StringBuilder();  strb.append(buildHeader());  Iterator<String> iter=urlList.iterator();  while (iter.hasNext()) {    strb.append(buildGetStep((iter.next())));    if (iter.hasNext()) {      strb.append(COMMA);    }  }  strb.append(buildFooter());  return strb.toString();}  }
class C{  protected TLCError createError(TLCRegion tlcRegion,String message){  TLCError topError=new TLCError();  if (tlcRegion instanceof TLCRegionContainer) {    TLCRegionContainer container=(TLCRegionContainer)tlcRegion;    ITypedRegion[] regions=container.getSubRegions();    Assert.isTrue(regions.length < 3,"Unexpected error region structure, this is a bug.");    for (int i=0; i < regions.length; i++) {      if (regions[i] instanceof TLCRegion) {        TLCError cause=createError((TLCRegion)regions[i],message);        topError.setCause(cause);      } else {        topError.setMessage(message);        topError.setErrorCode(tlcRegion.getMessageCode());      }    }  }  return topError;}  }
class C{  protected Rectangle paintCloseButton(Graphics g,SynthContext tabContext,int tabIndex){  Rectangle tabRect=new Rectangle(rects[tabIndex]);  Rectangle bounds=getCloseButtonBounds(tabIndex);  int offset=bounds.width + textIconGap;  boolean onLeft=isCloseButtonOnLeft();  if (onLeft) {    tabRect.x+=offset;    tabRect.width-=offset;  } else {    tabRect.width-=offset;  }  SeaGlassContext subcontext=getContext(tabPane,SeaGlassRegion.TABBED_PANE_TAB_CLOSE_BUTTON,getCloseButtonState(tabPane,tabIndex,(tabContext.getComponentState() & MOUSE_OVER) != 0));  SeaGlassLookAndFeel.updateSubregion(subcontext,g,bounds);  SeaGlassSynthPainterImpl painter=(SeaGlassSynthPainterImpl)subcontext.getPainter();  painter.paintSearchButtonForeground(subcontext,g,bounds.x,bounds.y,bounds.width,bounds.height);  subcontext.dispose();  return tabRect;}  }
class C{  private UnManagedVolume createUnManagedVolumeForSnap(UnManagedVolume unManagedVolume,String unManagedVolumeNativeGuid,VNXeLun lun,StorageSystem system,DbClient dbClient,Map<String,List<UnManagedVolume>> hostVolumeMap,Snap snap){  boolean created=false;  if (null == unManagedVolume) {    unManagedVolume=new UnManagedVolume();    unManagedVolume.setId(URIUtil.createId(UnManagedVolume.class));    unManagedVolume.setNativeGuid(unManagedVolumeNativeGuid);    unManagedVolume.setStorageSystemUri(system.getId());    created=true;  }  unManagedVolume.setLabel(snap.getName());  Map<String,StringSet> unManagedVolumeInformation=new HashMap<String,StringSet>();  Map<String,String> unManagedVolumeCharacteristics=new HashMap<String,String>();  Boolean isSnapExported=false;  if (lun.getHostAccess() != null && !lun.getHostAccess().isEmpty()) {    unManagedVolume.getUnmanagedExportMasks().clear();    unManagedVolume.getInitiatorNetworkIds().clear();    unManagedVolume.getInitiatorUris().clear();    for (    BlockHostAccess access : lun.getHostAccess()) {      int accessMask=access.getAccessMask();      if (accessMask == BlockHostAccess.HostLUNAccessEnum.BOTH.getValue() || accessMask == BlockHostAccess.HostLUNAccessEnum.SNAPSHOT.getValue()) {        isSnapExported=true;        String hostId=access.getHost().getId();        List<UnManagedVolume> exportedSnaps=hostVolumeMap.get(hostId);        if (exportedSnaps == null) {          exportedSnaps=new ArrayList<UnManagedVolume>();          hostVolumeMap.put(hostId,exportedSnaps);        }        exportedSnaps.add(unManagedVolume);      }    }  }  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_VOLUME_EXPORTED.toString(),isSnapExported.toString());  StringSet deviceLabel=new StringSet();  deviceLabel.add(snap.getName());  unManagedVolumeInformation.put(SupportedVolumeInformation.DEVICE_LABEL.toString(),deviceLabel);  String snapWWN=snap.getAttachedWWN();  if (snapWWN != null && !snapWWN.isEmpty()) {    String volumeWWN=snapWWN.replaceAll(":","");    unManagedVolume.setWwn(volumeWWN);  }  StringSet systemTypes=new StringSet();  systemTypes.add(system.getSystemType());  StringSet provCapacity=new StringSet();  provCapacity.add(String.valueOf(snap.getSize()));  unManagedVolumeInformation.put(SupportedVolumeInformation.PROVISIONED_CAPACITY.toString(),provCapacity);  StringSet allocatedCapacity=new StringSet();  allocatedCapacity.add(String.valueOf(snap.getSize()));  unManagedVolumeInformation.put(SupportedVolumeInformation.ALLOCATED_CAPACITY.toString(),allocatedCapacity);  unManagedVolumeInformation.put(SupportedVolumeInformation.SYSTEM_TYPE.toString(),systemTypes);  StringSet nativeId=new StringSet();  nativeId.add(snap.getId());  unManagedVolumeInformation.put(SupportedVolumeInformation.NATIVE_ID.toString(),nativeId);  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_INGESTABLE.toString(),Boolean.TRUE.toString());  unManagedVolumeCharacteristics.put(SupportedVolumeCharacterstics.IS_THINLY_PROVISIONED.toString(),lun.getIsThinEnabled().toString());  unManagedVolume.addVolumeInformation(unManagedVolumeInformation);  if (unManagedVolume.getVolumeCharacterstics() == null) {    unManagedVolume.setVolumeCharacterstics(new StringMap());  }  unManagedVolume.getVolumeCharacterstics().replace(unManagedVolumeCharacteristics);  if (created) {    unManagedVolumesInsert.add(unManagedVolume);  } else {    unManagedVolumesUpdate.add(unManagedVolume);  }  return unManagedVolume;}  }
class C{  public synchronized boolean isReadyToPlay(){  return playerState == PlayerStates.READY_TO_PLAY;}  }
class C{  OperandStack deepCopy(){  OperandStack newss=new OperandStack(stack.length);  newss.top=top;  for (int i=0; i < top; i++) {    newss.stack[i]=stack[i].copy();  }  return newss;}  }
class C{  public static ComponentUI createUI(JComponent c){  BETextFieldUI.addOtherListener(c);  return new BETextAreaUI();}  }
class C{  @SuppressWarnings("rawtypes") public static boolean isConsistent(final Collection toCheck,final Class<?> theClass,final String methodName){  Method theMethod=null;  try {    theMethod=theClass.getMethod(methodName,(Class[])null);  } catch (  SecurityException e1) {    e1.printStackTrace();  }catch (  NoSuchMethodException e1) {    e1.printStackTrace();  }  if (toCheck.size() == 0) {    throw new IllegalArgumentException("List to check is empty.");  }  Object o1=toCheck.iterator().next();  Object result1=null;  try {    result1=theMethod.invoke(o1,(Object[])null);  } catch (  Exception e) {    e.printStackTrace();  }  Iterator<Object> j=toCheck.iterator();  j.next();  while (j.hasNext()) {    Object o2=j.next();    Object result2=null;    try {      result2=theMethod.invoke(o2,(Object[])null);    } catch (    Exception e) {      e.printStackTrace();    }    if (!result1.equals(result2)) {      return false;    }  }  return true;}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  } else   if (obj instanceof UnsupportedDurationField) {    UnsupportedDurationField other=(UnsupportedDurationField)obj;    if (other.getName() == null) {      return (getName() == null);    }    return (other.getName().equals(getName()));  }  return false;}  }
class C{  protected boolean isTouchInView(List<UITouch> touches){  for (int i=0, touchesLength=touches.size(); i < touchesLength; i++)   if (touches.get(i).getView() != mGLSurfaceView)   return false;  return true;}  }
class C{  public TransferEntropyCalculatorDiscrete(int base,int destHistoryEmbedLength,int sourceHistoryEmbeddingLength){  this(base,destHistoryEmbedLength,1,sourceHistoryEmbeddingLength,1,1);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Quaternionf rotationZYX(float angleZ,float angleY,float angleX){  float sx=(float)Math.sin(angleX * 0.5);  float cx=(float)Math.cos(angleX * 0.5);  float sy=(float)Math.sin(angleY * 0.5);  float cy=(float)Math.cos(angleY * 0.5);  float sz=(float)Math.sin(angleZ * 0.5);  float cz=(float)Math.cos(angleZ * 0.5);  float cycz=cy * cz;  float sysz=sy * sz;  float sycz=sy * cz;  float cysz=cy * sz;  w=cx * cycz + sx * sysz;  x=sx * cycz - cx * sysz;  y=cx * sycz + sx * cysz;  z=cx * cysz - sx * sycz;  return this;}  }
class C{  private void handlePermittedLockRequest(final DLockRequestMessage request){  if (logger.isTraceEnabled(LogMarker.DLS)) {    logger.trace(LogMarker.DLS,"[DLockGrantor.handlePermittedLockRequest] {}",request);  }  Assert.assertTrue(request.getRemoteThread() != null);  DLockGrantToken grant=getOrCreateGrant(request.getObjectName());  try {    if (grant.grantLockToRequest(request)) {    } else     if (request.responded()) {    } else     if (request.isTryLock()) {      cleanupSuspendState(request);      request.respondWithTryLockFailed(request.getObjectName());    } else     if (request.checkForTimeout()) {      cleanupSuspendState(request);    } else {      grant.schedule(request);      this.thread.checkTimeToWait(calcWaitMillisFromNow(request),false);    }  }  finally {    grant.decAccess();  }}  }
class C{  private static byte[] crtCrypt(byte[] msg,RSAPrivateCrtKey key,boolean verify) throws BadPaddingException {  BigInteger n=key.getModulus();  BigInteger c0=parseMsg(msg,n);  BigInteger c=c0;  BigInteger p=key.getPrimeP();  BigInteger q=key.getPrimeQ();  BigInteger dP=key.getPrimeExponentP();  BigInteger dQ=key.getPrimeExponentQ();  BigInteger qInv=key.getCrtCoefficient();  BigInteger e=key.getPublicExponent();  BigInteger d=key.getPrivateExponent();  BlindingRandomPair brp;  if (ENABLE_BLINDING) {    brp=getBlindingRandomPair(e,d,n);    c=c.multiply(brp.u).mod(n);  }  BigInteger m1=c.modPow(dP,p);  BigInteger m2=c.modPow(dQ,q);  BigInteger mtmp=m1.subtract(m2);  if (mtmp.signum() < 0) {    mtmp=mtmp.add(p);  }  BigInteger h=mtmp.multiply(qInv).mod(p);  BigInteger m=h.multiply(q).add(m2);  if (ENABLE_BLINDING) {    m=m.multiply(brp.v).mod(n);  }  if (verify && !c0.equals(m.modPow(e,n))) {    throw new BadPaddingException("RSA private key operation failed");  }  return toByteArray(m,getByteLength(n));}  }
class C{  public ChangedFileNode(String pathName,Status status,NodesResources nodesResources,ActionDelegate actionDelegate,boolean viewPath){  this.pathName=pathName;  this.status=status;  this.nodesResources=nodesResources;  this.actionDelegate=actionDelegate;  this.viewPath=viewPath;}  }
class C{  public List<OUTCOME_TYPE> viterbi(List<List<Feature>> featureLists) throws CleartkProcessingException {  if (featureLists == null || featureLists.size() == 0) {    return Collections.emptyList();  }  Collection<Path> paths=null;  for (  List<Feature> features : featureLists) {    if (paths == null) {      paths=Lists.newArrayList();      Map<OUTCOME_TYPE,Double> scoredOutcomes=this.getScoredOutcomes(features,null);      for (      OUTCOME_TYPE outcome : this.getTopOutcomes(scoredOutcomes)) {        paths.add(new Path(outcome,scoredOutcomes.get(outcome),null));      }    } else {      Map<OUTCOME_TYPE,Path> maxPaths=Maps.newHashMap();      for (      Path path : paths) {        Map<OUTCOME_TYPE,Double> scoredOutcomes=this.getScoredOutcomes(features,path);        for (        OUTCOME_TYPE outcome : this.getTopOutcomes(scoredOutcomes)) {          double outcomeScore=scoredOutcomes.get(outcome);          double score=this.addScores ? path.score + outcomeScore : path.score * outcomeScore;          Path maxPath=maxPaths.get(outcome);          if (maxPath == null || score > maxPath.score) {            maxPaths.put(outcome,new Path(outcome,score,path));          }        }      }      paths=maxPaths.values();    }  }  return Collections.max(paths).outcomes;}  }
class C{  public <T extends JCTree>void printExprs(List<T> trees,boolean multiline) throws IOException {  if (multiline && trees.length() > 1) {    indent();    indent();    println();    align();    printExprs(trees,",\n");    undent();    undent();  } else {    printExprs(trees,", ");  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeArgument.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_ARGUMENT___GET_TYPE_REF_AS_STRING:      return TypeRefsPackage.INTERSECTION_TYPE_EXPRESSION___GET_TYPE_REF_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_REF___GET_TYPE_REF_AS_STRING:  return TypeRefsPackage.INTERSECTION_TYPE_EXPRESSION___GET_TYPE_REF_AS_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ComposedTypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.COMPOSED_TYPE_REF___GET_TYPE_REF_AS_STRING:return TypeRefsPackage.INTERSECTION_TYPE_EXPRESSION___GET_TYPE_REF_AS_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  private void updateSynapseNodes(){  for (  SynapseNode node : this.getSynapseNodes()) {    if (node.getVisible()) {      node.updateColor();      node.updateDiameter();    }  }  timeLabel.update();  updateComplete.decrementAndGet();}  }
class C{  private void createJournalEntriesForRepayments(final LoanDTO loanDTO,final LoanTransactionDTO loanTransactionDTO,final Office office){  final Long loanProductId=loanDTO.getLoanProductId();  final Long loanId=loanDTO.getLoanId();  final String currencyCode=loanDTO.getCurrencyCode();  final String transactionId=loanTransactionDTO.getTransactionId();  final Date transactionDate=loanTransactionDTO.getTransactionDate();  final BigDecimal principalAmount=loanTransactionDTO.getPrincipal();  final BigDecimal interestAmount=loanTransactionDTO.getInterest();  final BigDecimal feesAmount=loanTransactionDTO.getFees();  final BigDecimal penaltiesAmount=loanTransactionDTO.getPenalties();  final BigDecimal overPaymentAmount=loanTransactionDTO.getOverPayment();  final boolean isReversal=loanTransactionDTO.isReversed();  final Long paymentTypeId=loanTransactionDTO.getPaymentTypeId();  BigDecimal totalDebitAmount=new BigDecimal(0);  if (principalAmount != null && !(principalAmount.compareTo(BigDecimal.ZERO) == 0)) {    totalDebitAmount=totalDebitAmount.add(principalAmount);    this.helper.createCreditJournalEntryOrReversalForLoan(office,currencyCode,CASH_ACCOUNTS_FOR_LOAN.LOAN_PORTFOLIO,loanProductId,paymentTypeId,loanId,transactionId,transactionDate,principalAmount,isReversal);  }  if (interestAmount != null && !(interestAmount.compareTo(BigDecimal.ZERO) == 0)) {    totalDebitAmount=totalDebitAmount.add(interestAmount);    this.helper.createCreditJournalEntryOrReversalForLoan(office,currencyCode,CASH_ACCOUNTS_FOR_LOAN.INTEREST_ON_LOANS,loanProductId,paymentTypeId,loanId,transactionId,transactionDate,interestAmount,isReversal);  }  if (feesAmount != null && !(feesAmount.compareTo(BigDecimal.ZERO) == 0)) {    totalDebitAmount=totalDebitAmount.add(feesAmount);    this.helper.createCreditJournalEntryOrReversalForLoanCharges(office,currencyCode,CASH_ACCOUNTS_FOR_LOAN.INCOME_FROM_FEES.getValue(),loanProductId,loanId,transactionId,transactionDate,feesAmount,isReversal,loanTransactionDTO.getFeePayments());  }  if (penaltiesAmount != null && !(penaltiesAmount.compareTo(BigDecimal.ZERO) == 0)) {    totalDebitAmount=totalDebitAmount.add(penaltiesAmount);    this.helper.createCreditJournalEntryOrReversalForLoanCharges(office,currencyCode,CASH_ACCOUNTS_FOR_LOAN.INCOME_FROM_PENALTIES.getValue(),loanProductId,loanId,transactionId,transactionDate,penaltiesAmount,isReversal,loanTransactionDTO.getPenaltyPayments());  }  if (overPaymentAmount != null && !(overPaymentAmount.compareTo(BigDecimal.ZERO) == 0)) {    totalDebitAmount=totalDebitAmount.add(overPaymentAmount);    this.helper.createCreditJournalEntryOrReversalForLoan(office,currencyCode,CASH_ACCOUNTS_FOR_LOAN.OVERPAYMENT,loanProductId,paymentTypeId,loanId,transactionId,transactionDate,overPaymentAmount,isReversal);  }  if (loanTransactionDTO.isLoanToLoanTransfer()) {    this.helper.createDebitJournalEntryOrReversalForLoan(office,currencyCode,FINANCIAL_ACTIVITY.ASSET_TRANSFER.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,totalDebitAmount,isReversal);  } else   if (loanTransactionDTO.isAccountTransfer()) {    this.helper.createDebitJournalEntryOrReversalForLoan(office,currencyCode,FINANCIAL_ACTIVITY.LIABILITY_TRANSFER.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,totalDebitAmount,isReversal);  } else {    this.helper.createDebitJournalEntryOrReversalForLoan(office,currencyCode,CASH_ACCOUNTS_FOR_LOAN.FUND_SOURCE.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,totalDebitAmount,isReversal);  }}  }
class C{  public IntVector copy(){  return (IntVector)clone();}  }
class C{  public static final Vec2D randomVector(Random rnd){  Vec2D v=new Vec2D(rnd.nextFloat() * 2 - 1,rnd.nextFloat() * 2 - 1);  return v.normalize();}  }
class C{  public APIConnectionRecordSortPredicate(String value) throws APIException {  if (value.startsWith(DESCENDING_PREFIX)) {    descending=true;    value=value.substring(DESCENDING_PREFIX.length());  }  try {    this.property=SortableProperty.valueOf(value).recordProperty;  } catch (  IllegalArgumentException e) {    throw new APIException(APIError.Type.BAD_REQUEST,String.format("Invalid sort property: \"%s\"",value));  }}  }
class C{  public CSVStrategy(char delimiter,char encapsulator,char commentStart,char escape,boolean ignoreLeadingWhitespaces,boolean ignoreTrailingWhitespaces,boolean interpretUnicodeEscapes,boolean ignoreEmptyLines,String printerNewline){  this.delimiter=delimiter;  this.encapsulator=encapsulator;  this.commentStart=commentStart;  this.escape=escape;  this.ignoreLeadingWhitespaces=ignoreLeadingWhitespaces;  this.ignoreTrailingWhitespaces=ignoreTrailingWhitespaces;  this.interpretUnicodeEscapes=interpretUnicodeEscapes;  this.ignoreEmptyLines=ignoreEmptyLines;  this.printerNewline=printerNewline;}  }
class C{  @Timed @ExceptionMetered @PUT @Path("{name}/groups") @Produces(APPLICATION_JSON) public Iterable<String> modifyClientGroups(@Auth AutomationClient automationClient,@PathParam("name") String name,@Valid ModifyGroupsRequestV2 request){  Client client=clientDAO.getClient(name).orElseThrow(null);  String user=automationClient.getName();  long clientId=client.getId();  Set<String> oldGroups=aclDAO.getGroupsFor(client).stream().map(null).collect(toSet());  Set<String> groupsToAdd=Sets.difference(request.addGroups(),oldGroups);  Set<String> groupsToRemove=Sets.intersection(request.removeGroups(),oldGroups);  groupsToGroupIds(groupsToAdd).forEach(null);  groupsToGroupIds(groupsToRemove).forEach(null);  return aclDAO.getGroupsFor(client).stream().map(null).collect(toSet());}  }
class C{  protected boolean scrollLineStart(TextView widget,Spannable buffer){  final int minScrollX=getScrollBoundsLeft(widget);  int scrollX=widget.getScrollX();  if (scrollX > minScrollX) {    widget.scrollTo(minScrollX,widget.getScrollY());    return true;  }  return false;}  }
class C{  public void deleteTag(int tagId){  int ifdId=getDefinedTagDefaultIfd(tagId);  deleteTag(tagId,ifdId);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private void procAppear(int x,int y,int oldx,int oldy){  String direction=y - oldy > 0 ? "up" : "down";  if (mOrientation == Constants.Orientation.HORIZONTAL) {    direction=x - oldx > 0 ? "right" : "left";  }  for (  Entry<String,AppearanceHelper> item : mAppearanceComponents.entrySet()) {    AppearanceHelper helper=item.getValue();    if (!helper.isWatch()) {      continue;    }    boolean visible=helper.isViewVisible();    int result=helper.setAppearStatus(visible);    if (result != AppearanceHelper.RESULT_NO_CHANGE) {      helper.getAwareChild().notifyAppearStateChange(result == AppearanceHelper.RESULT_APPEAR ? Constants.Event.APPEAR : Constants.Event.DISAPPEAR,direction);    }  }}  }
class C{  public boolean isLocalAndExists(){  return loc.isLocalAndExists();}  }
class C{  public boolean intersectsBoundingBox(ValueGeometry r){  return getGeometryNoCopy().getEnvelopeInternal().intersects(r.getGeometryNoCopy().getEnvelopeInternal());}  }
class C{  public static String stripLabel(String s){  int labelEnd=labelEnd(s);  if (labelEnd == -1) {    return s.trim();  } else {    return s.substring(labelEnd + 1).trim();  }}  }
class C{  protected Map<Character,Integer> match_alphabet(String pattern){  Map<Character,Integer> s=new HashMap<Character,Integer>();  char[] char_pattern=pattern.toCharArray();  for (  char c : char_pattern) {    s.put(c,0);  }  int i=0;  for (  char c : char_pattern) {    s.put(c,s.get(c) | (1 << (pattern.length() - i - 1)));    i++;  }  return s;}  }
class C{  public boolean isGlobal(){  return noteId == null;}  }
class C{  public static String nameOf(int opcode) throws IllegalArgumentException {  String name=nameArray[opcode & 0xff];  if (name == null) {    return "<illegal opcode: " + opcode + ">";  }  return name;}  }
class C{  public MarketplaceRemovedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  protected boolean isInfoEnabled(){  return trace.isInfoEnabled();}  }
class C{  public static String stringFor(int n){switch (n) {case CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK:    return "CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK";case CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X:  return "CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X";case CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y:return "CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y";case CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z:return "CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z";case CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X:return "CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X";case CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y:return "CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y";case CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z:return "CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z";case CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK:return "CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK";case CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY:return "CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY";case CU_DEVICE_ATTRIBUTE_WARP_SIZE:return "CU_DEVICE_ATTRIBUTE_WARP_SIZE";case CU_DEVICE_ATTRIBUTE_MAX_PITCH:return "CU_DEVICE_ATTRIBUTE_MAX_PITCH";case CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK:return "CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK";case CU_DEVICE_ATTRIBUTE_CLOCK_RATE:return "CU_DEVICE_ATTRIBUTE_CLOCK_RATE";case CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT:return "CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT";case CU_DEVICE_ATTRIBUTE_GPU_OVERLAP:return "CU_DEVICE_ATTRIBUTE_GPU_OVERLAP";case CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT:return "CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT";case CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT:return "CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT";case CU_DEVICE_ATTRIBUTE_INTEGRATED:return "CU_DEVICE_ATTRIBUTE_INTEGRATED";case CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY:return "CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY";case CU_DEVICE_ATTRIBUTE_COMPUTE_MODE:return "CU_DEVICE_ATTRIBUTE_COMPUTE_MODE";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS";case CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT:return "CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT";case CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS:return "CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS";case CU_DEVICE_ATTRIBUTE_ECC_ENABLED:return "CU_DEVICE_ATTRIBUTE_ECC_ENABLED";case CU_DEVICE_ATTRIBUTE_PCI_BUS_ID:return "CU_DEVICE_ATTRIBUTE_PCI_BUS_ID";case CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID:return "CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID";case CU_DEVICE_ATTRIBUTE_TCC_DRIVER:return "CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID";case CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE:return "CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE";case CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH:return "CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH";case CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE:return "CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE";case CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR:return "CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR";case CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT:return "CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT";case CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING:return "CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS";case CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER:return "CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE";case CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID:return "CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID";case CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT:return "CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT";case CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR:return "CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR";case CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR:return "CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR";case CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH:return "CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH";case CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED:return "CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED";}return "INVALID CUdevice_attribute: " + n;}  }
class C{  public void showWebPage(String url,boolean openExternal,boolean clearHistory,HashMap<String,Object> params){  LOG.d(TAG,"showWebPage(%s, %b, %b, HashMap",url,openExternal,clearHistory);  if (clearHistory) {    this.clearHistory();  }  if (!openExternal) {    if (url.startsWith("file://") || internalWhitelist.isUrlWhiteListed(url)) {      this.loadUrl(url);      return;    }    LOG.w(TAG,"showWebPage: Cannot load URL into webview since it is not in white list.  Loading into browser instead. (URL=" + url + ")");  }  try {    Intent intent=new Intent(Intent.ACTION_VIEW);    Uri uri=Uri.parse(url);    if ("file".equals(uri.getScheme())) {      intent.setDataAndType(uri,resourceApi.getMimeType(uri));    } else {      intent.setData(uri);    }    cordova.getActivity().startActivity(intent);  } catch (  android.content.ActivityNotFoundException e) {    LOG.e(TAG,"Error loading url " + url,e);  }}  }
class C{  public void followUser(InstagramAPIResponseCallback<IGRelationship> callback,String userId){  updateRelationShip(callback,InstagramKitConstants.kRelationshipActionFollow,userId);}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public boolean allowMassStorage(){  return mAllowMassStorage;}  }
class C{  private WhiteListSkeleton loadSkeleton(JSONObject whitelistJson) throws IOException, ParseException {  JSONArray inherits=optionalJSONArray(whitelistJson.get("inherits"),"inherits");  JSONArray allows=optionalJSONArray(whitelistJson.get("allowed"),"allowed");  JSONArray denies=optionalJSONArray(whitelistJson.get("denied"),"denied");  JSONArray types=optionalJSONArray(whitelistJson.get("types"),"types");  for (  Object key : whitelistJson.keySet()) {    if (!("inherits".equals(key) || "allowed".equals(key) || "denied".equals(key)|| "types".equals(key)|| "description".equals(key))) {      mq.addMessage(ConfigMessageType.UNRECOGNIZED_KEY,src,MessagePart.Factory.valueOf((String)key));    }  }  List<WhiteListSkeleton> inherited=new ArrayList<WhiteListSkeleton>();  if (inherits != null) {    for (    Object obj : inherits) {      String srcStr=obj instanceof String ? (String)obj : expectString(expectJSONObject(obj,"inherits").get("src"),"inherits src");      try {        URI uri=src.source().getUri().resolve(new URI(srcStr));        Pair<Reader,FilePosition> loaded=resolver.resolve(uri,src.source().getUri(),src);        try {          inherited.add(new JSONWhiteListLoader(loaded.b,resolver,mq).loadSkeleton(loaded.a));        }  finally {          loaded.a.close();        }      } catch (      URISyntaxException ex) {        mq.addMessage(ConfigMessageType.BAD_URL,src,MessagePart.Factory.valueOf(srcStr));      }    }  }  Set<String> allowedItemSet=new HashSet<String>();  if (allows != null) {    for (    Object obj : allows) {      String key=obj instanceof String ? (String)obj : expectString(expectJSONObject(obj,"allowed").get("key"),"allowed key");      allowedItemSet.add(key);    }  }  Set<String> deniedItemSet=new HashSet<String>();  if (denies != null) {    for (    Object obj : denies) {      String key=obj instanceof String ? (String)obj : expectString(expectJSONObject(obj,"denied").get("key"),"denied key");      deniedItemSet.add(key);    }  }  List<JSONObject> typeDefinitions=new ArrayList<JSONObject>();  if (types != null) {    for (    Object obj : types) {      JSONObject def=expectJSONObject(obj,"type");      expectString(def.get("key"),"type key");      typeDefinitions.add(def);    }  }  return makeSkeleton(inherited,allowedItemSet,deniedItemSet,typeDefinitions);}  }
class C{  public void delete(){  mBaseName.delete();  mBackupName.delete();}  }
class C{  @Override public String toString(){  String ret="";  ret+="VERSION: \t\t" + getVersion() + "\n";  ret+="TYPE FLAGS VIDEO: \t" + getFlagVideo() + "\n";  ret+="TYPE FLAGS AUDIO: \t" + getFlagAudio() + "\n";  ret+="DATA OFFSET: \t\t" + getDataOffset() + "\n";  return ret;}  }
class C{  public void testDelete7() throws SQLException {  DatabaseCreator.fillTestTable5(conn);  PreparedStatement stat=conn.prepareStatement("DELETE FROM " + DatabaseCreator.TEST_TABLE5 + " WHERE testID = ?");  stat.setInt(1,1);  stat.execute();  stat.setInt(1,2);  stat.execute();  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.TEST_TABLE5 + " WHERE testID < 3 ");  r.next();  assertEquals(0,r.getInt(1));  r.close();  stat.close();}  }
class C{  private Identity fetch(final String token) throws IOException {  final String uri=this.apihref.with("oauth2_access_token",token).with("format","json").toString();  return PsLinkedin.parse(new JdkRequest(uri).header("accept","application/json").fetch().as(RestResponse.class).assertStatus(HttpURLConnection.HTTP_OK).as(JsonResponse.class).json().readObject());}  }
class C{  public void sort(){  Arrays.sort(_data,0,_pos);}  }
class C{  public synchronized void flush() throws IOException {  if (sink != null) {synchronized (sink) {      sink.notifyAll();    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  String internal;  doc=(Document)load("staff2",false);  docType=doc.getDoctype();  internal=docType.getInternalSubset();  assertNull("internalSubsetNull",internal);}  }
class C{  public void rollbackLinkBlockSnapshotSessionTarget(URI systemURI,URI snapSessionURI,URI snapshotURI,String stepId){  BlockSnapshotSession snapSession=_dbClient.queryObject(BlockSnapshotSession.class,snapSessionURI);  StringSet linkedTargets=snapSession.getLinkedTargets();  if ((linkedTargets == null) || (!linkedTargets.contains(snapshotURI.toString()))) {    unlinkBlockSnapshotSessionTarget(systemURI,snapSessionURI,snapshotURI,Boolean.TRUE,stepId);  } else {    WorkflowStepCompleter.stepSucceded(stepId);  }}  }
class C{  @Override public BiosCommandResult doShare(StorageSystem storage,FileDeviceInputOutput args,SMBFileShare smbFileShare) throws ControllerException {  String forceGroup=null;  BiosCommandResult result=new BiosCommandResult();  try {    _log.info("NetAppFileStorageDevice doShare - start");    SMBShareMap smbShareMap=args.getFileObjShares();    SMBFileShare existingShare=(smbShareMap == null) ? null : smbShareMap.get(smbFileShare.getName());    Boolean modOrCreateShareSuccess;    if (existingShare != null) {      modOrCreateShareSuccess=modifyNtpShare(storage,args,smbFileShare,forceGroup,existingShare);    } else {      modOrCreateShareSuccess=createNtpShare(storage,args,smbFileShare,forceGroup);    }    if (modOrCreateShareSuccess.booleanValue() == true) {      _log.info("NetAppFileStorageDevice doShare {} - complete",smbFileShare.getName());      if (args.getFileObjShares() == null) {        args.initFileObjShares();      }      smbFileShare.setMountPoint(smbFileShare.getNetBIOSName(),smbFileShare.getStoragePortNetworkId(),smbFileShare.getStoragePortName(),smbFileShare.getName());      args.getFileObjShares().put(smbFileShare.getName(),smbFileShare);      result=BiosCommandResult.createSuccessfulResult();    } else {      _log.error("NetAppFileStorageDevice doShare {} - failed",smbFileShare.getName());      ServiceError serviceError=DeviceControllerErrors.netapp.unableToCreateFileShare();      result=BiosCommandResult.createErrorResult(serviceError);    }  } catch (  NetAppException e) {    _log.error("NetAppFileStorageDevice::doShare failed with a NetAppException",e);    ServiceError serviceError=DeviceControllerErrors.netapp.unableToCreateFileShare();    serviceError.setMessage(e.getLocalizedMessage());    result=BiosCommandResult.createErrorResult(serviceError);  }catch (  Exception e) {    _log.error("NetAppFileStorageDevice::doShare failed with an Exception",e);    ServiceError serviceError=DeviceControllerErrors.netapp.unableToCreateFileShare();    serviceError.setMessage(e.getLocalizedMessage());    result=BiosCommandResult.createErrorResult(serviceError);  }  return result;}  }
class C{  @Override public void registerListener(GCMListener mGcmListener){  this.mGcmListener=mGcmListener;}  }
class C{  public static Date fromISODateString(String isoDateString) throws Exception {  DateFormat f=new SimpleDateFormat(FORMAT_DATE_ISO);  return f.parse(isoDateString);}  }
class C{  protected void Pattern() throws javax.xml.transform.TransformerException {  while (true) {    LocationPathPattern();    if (tokenIs('|')) {      nextToken();    } else {      break;    }  }}  }
class C{  protected Iterator createKeySetIterator(){  return new ReferenceKeySetIterator(this);}  }
class C{  public double nextEventsTime(){  return this.nextEventsTime;}  }
class C{  public AbstractSimulatedDevice add(final AbstractSimulatedDevice simulatedDevice){  devices.put(new DeviceKey(simulatedDevice.getTenant().toLowerCase(),simulatedDevice.getId()),simulatedDevice);  return simulatedDevice;}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  Instance newInstance=(Instance)instance.copy();  if ((int)newInstance.value(m_AttIndex.getIndex()) == m_SecondIndex.getIndex()) {    newInstance.setValue(m_AttIndex.getIndex(),m_FirstIndex.getIndex());  } else   if ((int)newInstance.value(m_AttIndex.getIndex()) > m_SecondIndex.getIndex()) {    newInstance.setValue(m_AttIndex.getIndex(),newInstance.value(m_AttIndex.getIndex()) - 1);  }  push(newInstance);  return true;}  }
class C{  public static String toString(URL url,String encoding) throws IOException {  return toString(url,Charsets.toCharset(encoding));}  }
class C{  public static <K>IndirectDoublePriorityQueue<K> synchronize(final IndirectDoublePriorityQueue<K> q){  return new SynchronizedIndirectDoublePriorityQueue<K>(q);}  }
class C{  public KeyStroke(Character character,boolean ctrlDown,boolean altDown,boolean shiftDown){  this(KeyType.Character,character,ctrlDown,altDown,shiftDown);}  }
class C{  public CrowdJob(JsonNode template){  this.template=template;  createArgumentMaps();}  }
class C{  @Override public int size(){  if (firstValue == null) {    return 0;  } else   if (secondValue == null) {    return 1;  } else {    return 2;  }}  }
class C{  public static void validateParticipantIdsDiffer(String participantId1,String participantId2) throws CryptoException {  if (participantId1.equals(participantId2)) {    throw new CryptoException("Both participants are using the same participantId (" + participantId1 + "). This is not allowed. "+ "Each participant must use a unique participantId.");  }}  }
class C{  public static FileEncodedImage create(String fileName,InputStream i,int width,int height) throws IOException {  EncodedImage e=EncodedImage.create(i);  FileEncodedImage f=new FileEncodedImage(fileName,width,height,true);  f.data=e.getImageData();  OutputStream o=FileSystemStorage.getInstance().openOutputStream(fileName);  o.write(f.data);  o.close();  return f;}  }
class C{  private static LiveExprNode parseLiveness(Tool tool){  Action[] fairs=tool.getTemporals();  LNConj lnc=new LNConj(fairs.length);  for (int i=0; i < fairs.length; i++) {    LiveExprNode ln=astToLive(tool,(ExprNode)fairs[i].pred,fairs[i].con);    lnc.addConj(ln);  }  Action[] checks=tool.getImpliedTemporals();  if (checks.length == 0) {    if (fairs.length == 0) {      return null;    }  } else   if (checks.length == 1) {    LiveExprNode ln=astToLive(tool,(ExprNode)checks[0].pred,checks[0].con);    if (lnc.getCount() == 0) {      return new LNNeg(ln);    }    lnc.addConj(new LNNeg(ln));  } else {    LNDisj lnd=new LNDisj(checks.length);    for (int i=0; i < checks.length; i++) {      LiveExprNode ln=astToLive(tool,(ExprNode)checks[i].pred,checks[i].con);      lnd.addDisj(new LNNeg(ln));    }    if (lnc.getCount() == 0) {      return lnd;    }    lnc.addConj(lnd);  }  return lnc;}  }
class C{  public String toFriendlyString(){  return FRIENDLY_FORMAT.code(0,currencyCode).format(this).toString();}  }
class C{  @Override public void updateTime(String columnLabel,Time x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateTime(" + quote(columnLabel) + ", x);");    }    update(columnLabel,x == null ? (Value)ValueNull.INSTANCE : ValueTime.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  MinimalEntityDao.createTable(db,ifNotExists);}  }
class C{  public static boolean nonemptyQueryResult(String sqlQuery){  boolean nonEmpty=false;  ResultSet R=null;  try {    R=executeQuery(sqlQuery);    nonEmpty=nonemptyQueryResult(R);  } catch (  Throwable t) {    logger.error("Error encountered executing the query.",t);  } finally {    cleanup(R);  }  return nonEmpty;}  }
class C{  public void unlockWrite(long stamp){  WNode h;  if (state != stamp || (stamp & WBIT) == 0L)   throw new IllegalMonitorStateException();  state=(stamp+=WBIT) == 0L ? ORIGIN : stamp;  if ((h=whead) != null && h.status != 0)   release(h);}  }
class C{  public TombstoneMessage(){}  }
class C{  public void cleanContainerElement(Integer ID){  cleanContainerElement("" + ID);}  }
class C{  public void untaint(final String register){  Preconditions.checkNotNull(register,"Error: Register argument can not be null");  if (isTainted(register)) {    m_untaintedRegs.add(register);    m_taintedRegs.remove(register);  }}  }
class C{  private Path toSecondary(Path path){  assert factory != null;  assert secondaryUri != null;  return convertPath(path,secondaryUri);}  }
class C{  public void remove(){  Pin.interconnect(pin1.getConnectedPin(),pin2.getConnectedPin());}  }
class C{  public boolean hasLoggingVolume(){  boolean hasLoggingVolume=false;  for (  VPlexSystemVolumeInfo systemVolumeInfo : systemVolumeInfoList) {    if (VPlexApiConstants.LOGGING_VOLUME_TYPE.equals(systemVolumeInfo.getType())) {      hasLoggingVolume=true;      break;    }  }  return hasLoggingVolume;}  }
class C{  private SegmentMeta findSegmentMeta(int size){  for (  SegmentMeta segmentMeta : this._segmentMeta) {    if (segmentMeta.size() == size) {      return segmentMeta;    }  }  throw new IllegalStateException(L.l("{0} is an invalid segment size",size));}  }
class C{  public synchronized void remove(ProjectionStackTrigger pt){  if (triggers == null) {    return;  }  triggers.remove(pt);}  }
class C{  public DataSink(String filename) throws Exception {  m_Stream=null;  if (DataSource.isArff(filename)) {    m_Saver=new ArffSaver();  } else {    m_Saver=getSaverForFile(filename);  }  ((AbstractFileSaver)m_Saver).setFile(new File(filename));}  }
class C{  public void elementDecl(String name,String model) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#elementDecl: " + name + ", "+ model);  if (null != m_declHandler) {    m_declHandler.elementDecl(name,model);  }}  }
class C{  @Override public float estimate(Triangle node,Triangle endNode){  float dst2;  float minDst2=Float.POSITIVE_INFINITY;  A_AB.set(node.a).add(node.b).scl(0.5f);  A_BC.set(node.b).add(node.c).scl(0.5f);  A_CA.set(node.c).add(node.a).scl(0.5f);  B_AB.set(endNode.a).add(endNode.b).scl(0.5f);  B_BC.set(endNode.b).add(endNode.c).scl(0.5f);  B_CA.set(endNode.c).add(endNode.a).scl(0.5f);  if ((dst2=A_AB.dst2(B_AB)) < minDst2)   minDst2=dst2;  if ((dst2=A_AB.dst2(B_BC)) < minDst2)   minDst2=dst2;  if ((dst2=A_AB.dst2(B_CA)) < minDst2)   minDst2=dst2;  if ((dst2=A_BC.dst2(B_AB)) < minDst2)   minDst2=dst2;  if ((dst2=A_BC.dst2(B_BC)) < minDst2)   minDst2=dst2;  if ((dst2=A_BC.dst2(B_CA)) < minDst2)   minDst2=dst2;  if ((dst2=A_CA.dst2(B_AB)) < minDst2)   minDst2=dst2;  if ((dst2=A_CA.dst2(B_BC)) < minDst2)   minDst2=dst2;  if ((dst2=A_CA.dst2(B_CA)) < minDst2)   minDst2=dst2;  return (float)Math.sqrt(minDst2);}  }
class C{  public static boolean isSafeMemoryManagementModeEnabled(){  return MySafeDelegator.isSafeMemoryManagementModeEnabled();}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.245 -0400",hash_original_method="1256300F7D5F2E3F918226B727F42637",hash_generated_method="051CDF96773B7FF35F11CE6F2403199C") @Override public void write(char[] chr,int st,int end){}  }
class C{  public UndeclaredThrowableStrategy(Class wrapper){  this.wrapper=wrapper;}  }
class C{  public static ScriptContext createScriptContext(Map<String,Object> context){  Assert.notNull("context",context);  Map<String,Object> localContext=new HashMap<String,Object>(context);  localContext.put(WIDGET_CONTEXT_KEY,context);  localContext.put("context",context);  ScriptContext scriptContext=new SimpleScriptContext();  ScriptHelper helper=createScriptHelper(scriptContext);  if (helper != null) {    localContext.put(SCRIPT_HELPER_KEY,helper);  }  Bindings bindings=new SimpleBindings(localContext);  scriptContext.setBindings(bindings,ScriptContext.ENGINE_SCOPE);  return scriptContext;}  }
class C{  public TransactionService(){  super(TransactionServiceState.class);  super.toggleOption(ServiceOption.REPLICATION,true);  super.toggleOption(ServiceOption.PERSISTENCE,true);  super.toggleOption(ServiceOption.OWNER_SELECTION,true);}  }
class C{  public static void selectFile(final Values commonValues,final GUISearchWindow searchFrame,final GUIFactory currentGUI,final PdfDecoderInt decode_pdf,final PropertiesFile properties,final GUIThumbnailPanel thumbnails){  if (searchFrame != null) {    searchFrame.removeSearchWindow(false);  }  final FileChooser chooser=new FileChooser();  chooser.setTitle("Open PDF file");  if (file != null) {    final File existDirectory=file.getParentFile();    if (existDirectory.exists()) {      chooser.setInitialDirectory(existDirectory);    }  }  final FileChooser.ExtensionFilter extFilter=new FileChooser.ExtensionFilter("PDF files (*.pdf)","*.pdf");  chooser.getExtensionFilters().add(extFilter);  file=chooser.showOpenDialog((Window)currentGUI.getFrame());  if (file != null) {    final String ext=file.getName().toLowerCase();    final boolean isValid=((ext.endsWith(".pdf")) || (ext.endsWith(".fdf")) || (ext.endsWith(".tif"))|| (ext.endsWith(".tiff"))|| (ext.endsWith(".png"))|| (ext.endsWith(".jpg"))|| (ext.endsWith(".jpeg")));    if (isValid) {      try {        commonValues.setInputDir(file.getCanonicalPath());        open(file.getAbsolutePath(),commonValues,searchFrame,currentGUI,decode_pdf,properties,thumbnails);      } catch (      final IOException e1) {        e1.printStackTrace();      }    } else {      currentGUI.showMessageDialog(Messages.getMessage("PdfViewer.NotValidPdfWarning"));    }  } else {    currentGUI.showMessageDialog(Messages.getMessage("PdfViewerMessage.NoSelection"));  }}  }
class C{  @Override public void trigger(DialogueState state,Collection<String> updatedVars){  if (frame != null && frame.isVisible()) {    chatTab.trigger(state,updatedVars);    stateMonitorTab.refresh(state,updatedVars);  }  refresh();}  }
class C{  public String extractFor(Integer id){  LOG.debug("Extracting method with ID: {}",id);  return requests.remove(id);}  }
class C{  private String endOfQuery(boolean onlyTableName){  String table;  int beginIndex, endIndex;  beginIndex=m_query.indexOf("FROM ") + 5;  while (m_query.charAt(beginIndex) == ' ') {    beginIndex++;  }  endIndex=m_query.indexOf(" ",beginIndex);  if (endIndex != -1 && onlyTableName) {    table=m_query.substring(beginIndex,endIndex);  } else {    table=m_query.substring(beginIndex);  }  if (m_DataBaseConnection.getUpperCase()) {    table=table.toUpperCase();  }  return table;}  }
class C{  public RangeBarChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,Type type){  super(dataset,renderer,type);}  }
class C{  private long verifyLongInString(String propertyString,String property){  long returnValue;  try {    returnValue=Long.valueOf(propertyString).longValue();  } catch (  NumberFormatException e) {    throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesImpl_0_HAS_TO_BE_A_VALID_NUMBER_AND_NOT_1.toLocalizedString(new Object[]{property,propertyString}));  }  if (returnValue < 0) {    throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesImpl_0_HAS_TO_BE_POSITIVE_NUMBER_AND_THE_VALUE_GIVEN_1_IS_NOT_ACCEPTABLE.toLocalizedString(new Object[]{property,Long.valueOf(returnValue)}));  }  return returnValue;}  }
class C{  public final void popPair(){  m_firstFree-=2;  m_map[m_firstFree]=null;  m_map[m_firstFree + 1]=null;}  }
class C{  @Override protected void onRestoreInstanceState(Bundle savedInstanceState){  super.onRestoreInstanceState(savedInstanceState);  if (savedInstanceState != null) {    mLogTextView.setText(Html.fromHtml(savedInstanceState.getString(LOG_TEXT_KEY)));  }}  }
class C{  public OnlineAMM(){  this(DEFAULT_REGULARIZER);}  }
class C{  public final void createAll() throws AdeException {  createTables(ALL_TABLES);  createIndices();  initTables();}  }
class C{  @Override public void logout(HttpServletRequest request,HttpServletResponse response,Authentication authentication){  String rememberMeCookie=extractRememberMeCookie(request);  if (rememberMeCookie != null && rememberMeCookie.length() != 0) {    try {      String[] cookieTokens=decodeCookie(rememberMeCookie);      if (cookieTokens.length != 2) {        throw new InvalidCookieException("Cookie token did not contain " + 2 + " tokens, but contained '"+ Arrays.asList(cookieTokens)+ "'");      }      persistentTokenRepository.deleteById(cookieTokens[0]);    } catch (    InvalidCookieException ice) {      log.info("Invalid cookie, no persistent token could be deleted");    }catch (    RememberMeAuthenticationException rmae) {      log.debug("No persistent token found, so no token could be deleted");    }  }  super.logout(request,response,authentication);}  }
class C{  public boolean shouldStopMusic(){  EntityPlayer player=TheBetweenlands.proxy.getClientPlayer();  if (player != null) {    for (    AmbienceSound sound : this.playingAmbiences) {      if (sound.type.stopsMusic())       return true;    }  }  return false;}  }
class C{  public static boolean matches(final CertificateID certId,final SingleResp singleResp){  final CertificateID singleRespCertID=singleResp.getCertID();  final ASN1ObjectIdentifier singleRespCertIDHashAlgOID=singleRespCertID.getHashAlgOID();  final byte[] singleRespCertIDIssuerKeyHash=singleRespCertID.getIssuerKeyHash();  final byte[] singleRespCertIDIssuerNameHash=singleRespCertID.getIssuerNameHash();  final BigInteger singleRespCertIDSerialNumber=singleRespCertID.getSerialNumber();  final ASN1ObjectIdentifier certIdHashAlgOID=certId.getHashAlgOID();  final byte[] certIdIssuerKeyHash=certId.getIssuerKeyHash();  final byte[] certIdIssuerNameHash=certId.getIssuerNameHash();  final BigInteger certIdSerialNumber=certId.getSerialNumber();  return singleRespCertIDHashAlgOID.equals(certIdHashAlgOID) && Arrays.areEqual(singleRespCertIDIssuerKeyHash,certIdIssuerKeyHash) && Arrays.areEqual(singleRespCertIDIssuerNameHash,certIdIssuerNameHash)&& singleRespCertIDSerialNumber.equals(certIdSerialNumber);}  }
class C{  public static IsNullValue nonReportingNotNullValue(){  return instanceByFlagsList[0][NN_UNKNOWN];}  }
class C{  private void doSignalAll(Node first){  lastWaiter=firstWaiter=null;  do {    Node next=first.nextWaiter;    first.nextWaiter=null;    transferForSignal(first);    first=next;  } while (first != null);}  }
class C{  public DoubleMatrix1D make(int size,double initialValue){  return make(size).assign(initialValue);}  }
class C{  public static void d(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg,throwable);}  }
class C{  private boolean defaultsOK(){  log.info("");  KeyNamePair org=(KeyNamePair)orgCombo.getSelectedItem();  if (org == null)   return false;  Ini.setProperty(Ini.P_CONNECTION,CConnection.get().toStringLong());  Ini.setProperty(Ini.P_LANGUAGE,(String)languageCombo.getSelectedItem());  String error=m_login.validateLogin(org);  if (error != null && error.length() > 0) {    ADialog.info(m_WindowNo,this,error);    appExit();    return false;  }  statusBar.setStatusLine("Loading Preferences");  String msg=m_login.loadPreferences(org,(KeyNamePair)warehouseCombo.getSelectedItem(),dateField.getTimestamp(),printerField.getDisplay());  if (msg.length() > 0)   ADialog.info(m_WindowNo,this,msg);  checkVersion();  if (m_connectionOK)   this.dispose();  return m_connectionOK;}  }
class C{  private static TranslationResult processInOperandArithmetic(List<TranslationResult> partialResults,ITranslationEnvironment environment,long baseOffset,IOperandTreeNode expression) throws InternalTranslationException {  final String value=expression.getValue();  final OperandSize archSize=environment.getArchitectureSize();  final OperandSize nextSize=TranslationHelpers.getNextSize(archSize);  TranslationResult finalResult=new TranslationResult("NEEDS_REPLACEMENT",archSize,TranslationResultType.REGISTER,"",new ArrayList<ReilInstruction>(),baseOffset);  if (value.equals("+") || (value.equals("*"))) {    ArrayList<ReilInstruction> allInstructions=new ArrayList<>();    for (    TranslationResult result : partialResults) {      allInstructions.addAll(result.getInstructions());    }    finalResult.updateBaseAndReil(baseOffset,allInstructions);    String source1=partialResults.get(0).getRegister();    String source2=partialResults.get(1).getRegister();    String currentTemporary=environment.getNextVariableString();    for (int index=2; index <= partialResults.size(); index++) {      addPlusOrTimesInOperandArithmetic(environment,value,source1,source2,currentTemporary,finalResult);      if (index < partialResults.size()) {        source1=partialResults.get(index).getRegister();        source2=currentTemporary;      }    }    final String truncationMask=String.valueOf(TranslationHelpers.getAllBitsMask(archSize));    finalResult.addInstruction(ReilHelpers.createAnd(0,nextSize,currentTemporary,nextSize,truncationMask,archSize,currentTemporary));    finalResult.updateResult(currentTemporary,archSize,"",TranslationResultType.REGISTER);  } else   if (value.equals(":")) {    throw new InternalTranslationException("Error: Don't know how to deal with 1234:ABCD1234 (segment:address) operands.");  }  return finalResult;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.513 -0500",hash_original_method="5665BE3F4ECC43E3239D3F1D8B9B76A3",hash_generated_method="426004DD56479AB68361A155302D98E9") public SIPHeader parse() throws ParseException {  WarningList warningList=new WarningList();  if (debug)   dbg_enter("WarningParser.parse");  try {    headerName(TokenTypes.WARNING);    while (lexer.lookAhead(0) != '\n') {      Warning warning=new Warning();      warning.setHeaderName(SIPHeaderNames.WARNING);      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      try {        int code=Integer.parseInt(token.getTokenValue());        warning.setCode(code);      } catch (      NumberFormatException ex) {        throw createParseException(ex.getMessage());      }catch (      InvalidArgumentException ex) {        throw createParseException(ex.getMessage());      }      this.lexer.SPorHT();      this.lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      if (lexer.lookAhead(0) == ':') {        this.lexer.match(':');        this.lexer.match(TokenTypes.ID);        Token token2=lexer.getNextToken();        warning.setAgent(token.getTokenValue() + ":" + token2.getTokenValue());      } else {        warning.setAgent(token.getTokenValue());      }      this.lexer.SPorHT();      String text=this.lexer.quotedString();      warning.setText(text);      this.lexer.SPorHT();      warningList.add(warning);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        warning=new Warning();        this.lexer.match(TokenTypes.ID);        Token tok=lexer.getNextToken();        try {          int code=Integer.parseInt(tok.getTokenValue());          warning.setCode(code);        } catch (        NumberFormatException ex) {          throw createParseException(ex.getMessage());        }catch (        InvalidArgumentException ex) {          throw createParseException(ex.getMessage());        }        this.lexer.SPorHT();        this.lexer.match(TokenTypes.ID);        tok=lexer.getNextToken();        if (lexer.lookAhead(0) == ':') {          this.lexer.match(':');          this.lexer.match(TokenTypes.ID);          Token token2=lexer.getNextToken();          warning.setAgent(tok.getTokenValue() + ":" + token2.getTokenValue());        } else {          warning.setAgent(tok.getTokenValue());        }        this.lexer.SPorHT();        text=this.lexer.quotedString();        warning.setText(text);        this.lexer.SPorHT();        warningList.add(warning);      }    }  }  finally {    if (debug)     dbg_leave("WarningParser.parse");  }  return warningList;}  }
class C{  public int addSeries(Color color){  int i=this.series.size();  this.series.add(new Series(color));  return i;}  }
class C{  public void put(String key,InputStream stream,String name){  put(key,stream,name,null);}  }
class C{  public Builder deleteName(){  deleteFields.add("name");  return this;}  }
class C{  public GF2nPolynomialElement(GF2nPolynomialField f,GF2Polynomial bs){  mField=f;  mDegree=mField.getDegree();  polynomial=new GF2Polynomial(bs);  polynomial.expandN(mDegree);}  }
class C{  public void configure(){  from("ftp://rider@localhost:21000/order?password=secret&delete=true").to("log:camelinaction.order.ftp").to("jms:incomingOrders");  from("cxf:bean:orderEndpoint").convertBodyTo(String.class).to("log:camelinaction.order.ws").inOnly("jms:incomingOrders").transform(constant("OK"));  from("jms:incomingOrders").to("log:camelinaction.order.jms");}  }
class C{  protected void sequence_ParenExpression(ISerializationContext context,ParenExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.PAREN_EXPRESSION__EXPRESSION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.PAREN_EXPRESSION__EXPRESSION));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getParenExpressionAccess().getExpressionExpressionParserRuleCall_1_0(),semanticObject.getExpression());  feeder.finish();}  }
class C{  public synchronized boolean contains(K key){  return mMap.containsKey(key);}  }
class C{  public void removeSession(UserSession session){  sessions.remove(session);}  }
class C{  public boolean commit() throws LoginException {  if (isAuthSucceeded()) {    if (iExternalUid == null || iExternalUid.trim().length() == 0)     throw new LoginException("External UID not found");    getSubject().getPrincipals().add(new AuthenticatedUser(getUser(),iExternalUid));    setCommitSucceeded(true);    return true;  } else {    reset();    return false;  }}  }
class C{  private void checkHolesNotNested(Polygon p,GeometryGraph graph){  IndexedNestedRingTester nestedTester=new IndexedNestedRingTester(graph);  for (int i=0; i < p.getNumInteriorRing(); i++) {    LinearRing innerHole=(LinearRing)p.getInteriorRingN(i);    nestedTester.add(innerHole);  }  boolean isNonNested=nestedTester.isNonNested();  if (!isNonNested) {    validErr=new TopologyValidationError(TopologyValidationError.NESTED_HOLES,nestedTester.getNestedPoint());  }}  }
class C{  public void updateExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  if (validate(mapping,form,request,response) == false) {    setReturnActionFordward(request,mapping.findForward("update-failed"));    return;  }  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  CamposDatoForm camposDatoForm=(CamposDatoForm)form;  CampoDatoVO campoDatoVO=camposDatoForm.populate(new CampoDatoVO());  ActionErrors errors=comprobarDuplicados(descripcionService,request,null,campoDatoVO,null);  if (errors != null && !errors.isEmpty()) {    ErrorsTag.saveErrors(request,errors);    setReturnActionFordward(request,mapping.findForward("update-failed"));    return;  } else {    campoDatoVO=descripcionService.updateCampoDato(campoDatoVO);  }  goReturnPointExecuteLogic(mapping,form,request,response);}  }
class C{  public T caseExit(Exit object){  return null;}  }
class C{  public String text(){  final StringBuilder sb=new StringBuilder();  for (  Object child : this.children) {    if (child instanceof Node) {      sb.append(((Node)child).text());    } else {      sb.append(child);    }  }  return sb.toString();}  }
class C{  public static LinkedHashMap<Integer,String> nomix(final String[] tags){  LinkedHashMap<Integer,String> r=new LinkedHashMap<>();  if (tags != null)   for (  String t : tags)   r.put(normalize(t).hashCode(),t);  return r;}  }
class C{  private int evictToRecoverBytes(int bytesToRecover){  int entriesToEvict=0;  if (bytesToRecover > 0) {    for (int j=dynamicTable.length - 1; j >= nextHeaderIndex && bytesToRecover > 0; j--) {      bytesToRecover-=dynamicTable[j].hpackSize;      dynamicTableByteCount-=dynamicTable[j].hpackSize;      headerCount--;      entriesToEvict++;    }    System.arraycopy(dynamicTable,nextHeaderIndex + 1,dynamicTable,nextHeaderIndex + 1 + entriesToEvict,headerCount);    nextHeaderIndex+=entriesToEvict;  }  return entriesToEvict;}  }
class C{  private void closeUnderlying() throws IOException {  if (in == null) {    return;  }  if (!error && state == STATE_DONE) {    hc.finished();  } else {    if (!hurry()) {      hc.closeServer();    }  }  in=null;}  }
class C{  private TypeOperand makeTypeOperand(RVMType type){  if (VM.VerifyAssertions)   opt_assert(type != null);  return new TypeOperand(type);}  }
class C{  public static void runInSWTThread(Runnable runnable){  if (Display.getCurrent() == null) {    Display.getDefault().asyncExec(runnable);  } else {    runnable.run();  }}  }
class C{  public static void addFont(String fontKey,Font font){  if (fontKey != null) {    fontKey=fontKey.toLowerCase();  } else {    if (font.getCharset() != null) {      throw new IllegalArgumentException("Font key must be non-null for bitmap fonts");    }  }  fonts.put(fontKey,new HTMLFont(fontKey,font));}  }
class C{  public IntArrayList values(){  return values;}  }
class C{  public void testFloatValuePosInfinity(){  String a="123809648373567356745735.6356789787678287E+200";  BigDecimal aNumber=new BigDecimal(a);  float result=Float.POSITIVE_INFINITY;  assertTrue("incorrect value",aNumber.floatValue() == result);}  }
class C{  public boolean isFacebookSDKSupported(){  return false;}  }
class C{  public static <A>Set<A> of(A a){  return Set.<A>empty().plus(a);}  }
class C{  private AbLevelChartFactory(){}  }
class C{  public void success(){  sendPluginResult(new PluginResult(PluginResult.Status.OK));}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final Entry<K,V> pollLastEntry(){  throw new UnsupportedOperationException();}  }
class C{  private void moveCursor(int targetLine,int targetColumn){}  }
class C{  public String numFoldsTipText(){  return "The number of folds to split the dataset into.";}  }
class C{  public Key delMin(){  if (isEmpty())   throw new NoSuchElementException("Priority queue underflow");  exch(1,n);  Key min=pq[n--];  sink(1);  pq[n + 1]=null;  if ((n > 0) && (n == (pq.length - 1) / 4))   resize(pq.length / 2);  assert isMinHeap();  return min;}  }
class C{  public void scheduleForDelivery(final IScope scope,final FIPAMessage m){  for (  final IAgent a : m.getReceivers().iterable(scope)) {    scheduleForDelivery(m.copy(scope),a);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.659 -0400",hash_original_method="8078F2328D3229D696432FB6A19BC05E",hash_generated_method="F22BE4BE251A7639CB4383BBA9ADFD13") protected byte[] engineSign() throws SignatureException {  BigInteger r=null;  BigInteger s=null;  BigInteger k=null;  BigInteger p, q, g, x;  BigInteger digestBI;  byte[] randomBytes;  byte[] rBytes;  byte[] sBytes;  byte[] signature;  int n, n1, n2;  DSAParams params;  if (appRandom == null) {    appRandom=new SecureRandom();  }  params=dsaKey.getParams();  p=params.getP();  q=params.getQ();  g=params.getG();  x=((DSAPrivateKey)dsaKey).getX();  digestBI=new BigInteger(1,msgDigest.digest());  randomBytes=new byte[20];  for (; ; ) {    appRandom.nextBytes(randomBytes);    k=new BigInteger(1,randomBytes);    if (k.compareTo(q) != -1) {      continue;    }    r=g.modPow(k,p).mod(q);    if (r.signum() == 0) {      continue;    }    s=k.modInverse(q).multiply(digestBI.add(x.multiply(r)).mod(q)).mod(q);    if (s.signum() != 0) {      break;    }  }  rBytes=r.toByteArray();  n1=rBytes.length;  if ((rBytes[0] & 0x80) != 0) {    n1++;  }  sBytes=s.toByteArray();  n2=sBytes.length;  if ((sBytes[0] & 0x80) != 0) {    n2++;  }  signature=new byte[6 + n1 + n2];  signature[0]=(byte)0x30;  signature[1]=(byte)(4 + n1 + n2);  signature[2]=(byte)0x02;  signature[3]=(byte)n1;  signature[4 + n1]=(byte)0x02;  signature[5 + n1]=(byte)n2;  if (n1 == rBytes.length) {    n=4;  } else {    n=5;  }  System.arraycopy(rBytes,0,signature,n,rBytes.length);  if (n2 == sBytes.length) {    n=6 + n1;  } else {    n=7 + n1;  }  System.arraycopy(sBytes,0,signature,n,sBytes.length);  return signature;}  }
class C{  public boolean isOpened(){  return (fileChannel != null) && fileChannel.isOpen();}  }
class C{  public boolean isSlave(){  return !master;}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public GregorianCalendar read(String date) throws Exception {  return read(transform.read(date));}  }
class C{  public void applyResultMapping(SortedMap<String,String> mapping) throws AdeUsageException {  checkValidity(mapping);  m_doubleStats=applyResultMapping(m_doubleStats,mapping);  m_stringStats=applyResultMapping(m_stringStats,mapping);}  }
class C{  public void putBucketImage(PutBucketImageRequest putBucketImageRequest){  assertParameterNotNull(putBucketImageRequest,"putBucketImageRequest");  String bucketName=putBucketImageRequest.GetBucketName();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  Map<String,String> params=new HashMap<String,String>();  params.put(SUBRESOURCE_IMG,null);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.PUT).setBucket(bucketName).setParameters(params).setOriginalRequest(putBucketImageRequest).setInputStreamWithLength(putBucketImageRequestMarshaller.marshall(putBucketImageRequest)).build();  doOperation(request,emptyResponseParser,bucketName,null);}  }
class C{  @Interruptible public static void layoutInstanceFields(RVMClass klass){  layout.layoutInstanceFields(klass);}  }
class C{  public DoubleMatrix2D like(int rows,int columns){  return content.like(rows,columns);}  }
class C{  public GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex){  this.indexedShapeIndex=indexedShapeIndex;  return this;}  }
class C{  public void subtract(final Number operand){  this.value-=operand.floatValue();}  }
class C{  public static final short BuildShortLE(byte bytevec[],boolean MSBFirst){  return BuildShortLE(bytevec,0);}  }
class C{  public int removeViewpoints(int[] indices){  for (int i=indices.length - 1; i >= 0; --i)   viewpointList.remove(indices[i]);  viewpointIndex=indices[0] - 1;  if (viewpointList.size() == 0) {    viewpointIndex=-1;  } else   if (viewpointIndex < 0) {    viewpointIndex=viewpointList.size() - 1;  }  return (viewpointIndex);}  }
class C{  public ZkClusterData fetchAllConfigs() throws KeeperException, InterruptedException {  List<String> configs=getZookeeperHandle().getChildren("/configs",null,null);  logger.info("Found the following configs in zookeeper...");  for (  String config : configs) {    logger.info(config);  }  getZkClusterData().setConfigs(configs);  return getZkClusterData();}  }
class C{  public Suit equip(Player player,UltraCosmetics ultraCosmetics,ArmorSlot armorSlot){  Suit effect=null;  try {    effect=getClazz().getDeclaredConstructor(UUID.class,ArmorSlot.class,UltraCosmetics.class).newInstance(player == null ? null : player.getUniqueId(),armorSlot,ultraCosmetics);  } catch (  InstantiationException|IllegalAccessException|NoSuchMethodException|InvocationTargetException e) {    e.printStackTrace();  }  return effect;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.ARRAY_ELEMENT__SPREAD:    setSpread((Boolean)newValue);  return;case N4JSPackage.ARRAY_ELEMENT__EXPRESSION:setExpression((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean saveBehaviorSettings(boolean includeTargets){  final String METHOD_NAME="saveBehaviorSettings(boolean)";  init(false);  try {    File behaviorFile=new File(PRINCESS_BEHAVIOR_PATH);    if (!behaviorFile.exists()) {      if (!behaviorFile.createNewFile()) {        logger.log(BehaviorSettingsFactory.class,METHOD_NAME,LogLevel.ERROR,"Could not create " + PRINCESS_BEHAVIOR_PATH);        return false;      }    }    if (!behaviorFile.canWrite()) {      logger.log(BehaviorSettingsFactory.class,METHOD_NAME,LogLevel.ERROR,"Could not write to " + PRINCESS_BEHAVIOR_PATH);      return false;    }    Document behaviorDoc=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();    Node rootNode=behaviorDoc.createElement("princessBehaviors");synchronized (behaviorMap) {      for (      String key : behaviorMap.keySet()) {        BehaviorSettings settings=behaviorMap.get(key);        rootNode.appendChild(settings.toXml(behaviorDoc,includeTargets));      }    }    behaviorDoc.appendChild(rootNode);    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    DOMSource source=new DOMSource(behaviorDoc);    try (Writer writer=new FileWriter(behaviorFile)){      StreamResult result=new StreamResult(writer);      transformer.transform(source,result);      return true;    }   } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  public String node(){  return this.node;}  }
class C{  public AbstractSiteMap parseSiteMap(String contentType,byte[] content,URL url) throws UnknownFormatException, IOException {  MediaType mediaType=MediaType.parse(contentType);  while (mediaType != null && !mediaType.equals(MediaType.OCTET_STREAM)) {    if (XML_MEDIA_TYPES.contains(mediaType)) {      return processXml(url,content);    } else     if (TEXT_MEDIA_TYPES.contains(mediaType)) {      return processText(url.toString(),content);    } else     if (GZ_MEDIA_TYPES.contains(mediaType)) {      return processGzip(url,content);    } else {      mediaType=MEDIA_TYPE_REGISTRY.getSupertype(mediaType);      return parseSiteMap(mediaType.toString(),content,url);    }  }  throw new UnknownFormatException("Can't parse a sitemap with the MediaType of: " + contentType + " (at: "+ url+ ")");}  }
class C{  public float[] toArray(){  int pos=0;  float[] array=new float[size];  if (currentBufferIndex == -1) {    return array;  }  for (int i=0; i < currentBufferIndex; i++) {    int len=buffers[i].length;    System.arraycopy(buffers[i],0,array,pos,len);    pos+=len;  }  System.arraycopy(buffers[currentBufferIndex],0,array,pos,offset);  return array;}  }
class C{  public void run(){  Log.d(LOG,"run() started....");  int cap=capacity;  int total=0;  while (!stopped) {    Buffer buffer=buffers[indexMine];    total=0;    if (cap != buffer.data.length) {      Log.d(LOG,"run() capacity changed: " + buffer.data.length + " -> "+ cap);      buffers[indexMine]=buffer=null;      buffers[indexMine]=buffer=new Buffer(cap);    }    while (!stopped && total < cap) {      try {        int n=is.read(buffer.data,total,cap - total);        if (n == -1)         stopped=true; else         total+=n;      } catch (      IOException e) {        Log.e(LOG,"Exception when reading: " + e);        stopped=true;      }    }    buffer.size=total;synchronized (this) {      notify();      int indexNew=(indexMine + 1) % buffers.length;      while (!stopped && indexNew == indexBlocked) {        try {          wait();        } catch (        InterruptedException e) {        }      }      indexMine=indexNew;      cap=capacity;    }  }  Log.d(LOG,"run() stopped.");}  }
class C{  public static DistributionConfigImpl produce(Properties props,boolean isConnected){  if (props != null) {    Object o=props.get(DS_CONFIG_NAME);    if (o instanceof DistributionConfigImpl) {      return (DistributionConfigImpl)o;    }  }  return new DistributionConfigImpl(props,false,isConnected);}  }
class C{  @Override public void begin(int type){  GLU.gluTessBeginContour(this.tess);}  }
class C{  public final boolean peekOrFalse(){  return (m_index > -1) ? m_values[m_index] : false;}  }
class C{  public ECEFPoint(ECEFPoint pt){  x_=pt.x_;  y_=pt.y_;  z_=pt.z_;}  }
class C{  private void outputOrgs(Properties ctx,PrintWriter out,int clientID,int orgID,boolean includeAny){  MClient client=MClient.get(ctx,clientID);  out.println("<orgs clientID='" + clientID + "'>");  if (includeAny) {    out.println("<org id='-1'");    if (clientID == 0)     out.println(" selected='selected'");    out.println(">ANY</org>");  }  if (client != null) {    for (    MOrg org : MOrg.getOfClient(client)) {      out.print("<org id='" + org.getAD_Org_ID() + "'");      if (orgID == org.getAD_Org_ID())       out.print(" selected='selected'");      out.println(">" + Util.maskHTML(org.getName()) + "</org>");    }  }  out.println("</orgs>");}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  String fMsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{"Programmer's assertion:  the method FunctionMultiArgs.reportWrongNumberArgs() should never be called."});  throw new RuntimeException(fMsg);}  }
class C{  public static void printError(Class<?> c,String msg){  String preamble;  if (c != null)   preamble="[" + c.getSimpleName() + "]"; else   preamble="";synchronized (System.err) {    System.err.println(preamble + " " + msg);  }}  }
class C{  MethodsStringConverter(Class<T> cls,Method toString,Method fromString){  super(cls,toString);  if (fromString.getParameterTypes().length != 1) {    throw new IllegalStateException("FromString method must have one parameter");  }  Class<?> param=fromString.getParameterTypes()[0];  if (param != String.class && param != CharSequence.class) {    throw new IllegalStateException("FromString method must take a String or CharSequence");  }  if (fromString.getReturnType().isAssignableFrom(cls) == false) {    throw new IllegalStateException("FromString method must return specified class or a superclass");  }  this.fromString=fromString;}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public static Function<Integer> jsonArrayLength(Object json){  return new JSONArgumentFunction<>("json_array_length",json);}  }
class C{  private boolean handleContextItem(int itemId,long[] markerIds){  Intent intent;switch (itemId) {case R.id.list_context_menu_show_on_map:    if (markerIds.length == 1) {      intent=IntentUtils.newIntent(this,TrackDetailActivity.class).putExtra(TrackDetailActivity.EXTRA_MARKER_ID,markerIds[0]);      startActivity(intent);    }  return true;case R.id.list_context_menu_edit:if (markerIds.length == 1) {  intent=IntentUtils.newIntent(this,MarkerEditActivity.class).putExtra(MarkerEditActivity.EXTRA_MARKER_ID,markerIds[0]);  startActivity(intent);}return true;case R.id.list_context_menu_delete:if (markerIds.length > 1 && markerIds.length == listView.getCount()) {markerIds=new long[]{-1L};}DeleteMarkerDialogFragment.newInstance(markerIds).show(getSupportFragmentManager(),DeleteMarkerDialogFragment.DELETE_MARKER_DIALOG_TAG);return true;case R.id.list_context_menu_select_all:int size=listView.getCount();for (int i=0; i < size; i++) {listView.setItemChecked(i,true);}return false;default :return false;}}  }
class C{  public static <T>PersistentResource<T> createObject(Class<T> entityClass,RequestScope requestScope,String uuid){  return createObject(null,entityClass,requestScope,uuid);}  }
class C{  private void crop(){  if (count != data.length) {    data=PApplet.subset(data,0,count);  }}  }
class C{  public void addContext(CharSequence context,float boost,boolean exact){  if (boost < 0f) {    throw new IllegalArgumentException("'boost' must be >= 0");  }  for (int i=0; i < context.length(); i++) {    if (ContextSuggestField.CONTEXT_SEPARATOR == context.charAt(i)) {      throw new IllegalArgumentException("Illegal value [" + context + "] UTF-16 codepoint [0x"+ Integer.toHexString((int)context.charAt(i))+ "] at position "+ i+ " is a reserved character");    }  }  contexts.put(IntsRef.deepCopyOf(Util.toIntsRef(new BytesRef(context),scratch)),new ContextMetaData(boost,exact));}  }
class C{  public void trimToSize(){  elements=cern.colt.Arrays.trimToCapacity(elements,size());}  }
class C{  public static <T extends Key<T>>GroupMatcher<T> groupContains(String compareTo){  return new GroupMatcher<T>(compareTo,StringOperatorName.CONTAINS);}  }
class C{  private void writeNgrams(OutputStream os,Bag<String> counter){  Stream<String> stream=counter.uniqueSet().stream().filter(null);  if (sortByAlphabet) {    stream=stream.sorted(null);  } else   if (sortByCount) {    stream=stream.sorted(null);  }  stream.forEach(null);}  }
class C{  private void simpleLine(){  PdfPCell tableCell=new PdfPCell(new Phrase(""));  tableCell.setBorder(0);  table.addCell(tableCell);  tableCell=new PdfPCell(new Phrase(""));  tableCell.setBorder(0);  table.addCell(tableCell);  for (int i=0; i < (cols - 2); i++) {    tableCell=new PdfPCell(new Phrase(""));    tableCell.setBorderWidthLeft(0);    tableCell.setBorderWidthRight(0);    tableCell.setBorderWidthTop(0);    tableCell.setBorderColorBottom(Color.BLACK);    table.addCell(tableCell);  }}  }
class C{  @Override @Inline public void collectionPhase(short phaseId,boolean primary){  if (phaseId == Simple.PREPARE_STACKS) {    if (!Plan.stacksPrepared()) {      VM.collection.prepareMutator(this);    }    flushRememberedSets();    return;  }  if (phaseId == Simple.PREPARE) {    los.prepare(true);    lgcode.prepare(true);    smcode.prepare();    nonmove.prepare();    VM.memory.collectorPrepareVMSpace();    return;  }  if (phaseId == Simple.RELEASE) {    los.release(true);    lgcode.release(true);    smcode.release();    nonmove.release();    VM.memory.collectorReleaseVMSpace();    return;  }  Log.write("Per-mutator phase \"");  Phase.getPhase(phaseId).logPhase();  Log.writeln("\" not handled.");  VM.assertions.fail("Per-mutator phase not handled!");}  }
class C{  public void scrollMapTo(Location location){  if (config == null) {    Log.w(TAG,"Jump to skipped. Map is not initialized properly.");    return;  }  if (!config.getGpsConfig().isMapCalibrated()) {    throw new IllegalStateException("Map is not calibrated.");  }  Point point=new Point();  getGpsConfig().getCalibration().translate(location,point);  scrollMapTo(point.x,point.y);}  }
class C{  private static TkhdData parseTkhd(ParsableByteArray tkhd){  tkhd.setPosition(Atom.HEADER_SIZE);  int fullAtom=tkhd.readInt();  int version=Atom.parseFullAtomVersion(fullAtom);  tkhd.skipBytes(version == 0 ? 8 : 16);  int trackId=tkhd.readInt();  tkhd.skipBytes(4);  boolean durationUnknown=true;  int durationPosition=tkhd.getPosition();  int durationByteCount=version == 0 ? 4 : 8;  for (int i=0; i < durationByteCount; i++) {    if (tkhd.data[durationPosition + i] != -1) {      durationUnknown=false;      break;    }  }  long duration;  if (durationUnknown) {    tkhd.skipBytes(durationByteCount);    duration=-1;  } else {    duration=version == 0 ? tkhd.readUnsignedInt() : tkhd.readUnsignedLongToLong();  }  tkhd.skipBytes(16);  int a00=tkhd.readInt();  int a01=tkhd.readInt();  tkhd.skipBytes(4);  int a10=tkhd.readInt();  int a11=tkhd.readInt();  int rotationDegrees;  int fixedOne=65536;  if (a00 == 0 && a01 == fixedOne && a10 == -fixedOne && a11 == 0) {    rotationDegrees=90;  } else   if (a00 == 0 && a01 == -fixedOne && a10 == fixedOne && a11 == 0) {    rotationDegrees=270;  } else   if (a00 == -fixedOne && a01 == 0 && a10 == 0 && a11 == -fixedOne) {    rotationDegrees=180;  } else {    rotationDegrees=0;  }  return new TkhdData(trackId,duration,rotationDegrees);}  }
class C{  public Configuration configure(URL url) throws EPException {  if (log.isDebugEnabled()) {    log.debug("configuring from url: " + url.toString());  }  try {    ConfigurationParser.doConfigure(this,url.openStream(),url.toString());    return this;  } catch (  IOException ioe) {    throw new EPException("could not configure from URL: " + url,ioe);  }}  }
class C{  public ContextedException(){  super();  exceptionContext=new DefaultExceptionContext();}  }
class C{  public int run(String[] argv) throws Exception {  Args args=new Args();  CmdLineParser parser=new CmdLineParser(args,ParserProperties.defaults().withUsageWidth(100));  try {    parser.parseArgument(argv);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    parser.printUsage(System.err);    return -1;  }  Configuration conf=getConf();  conf.addResource(new Path(args.config));  Configuration hbaseConfig=HBaseConfiguration.create(conf);  HConnection hbaseConnection=HConnectionManager.createConnection(hbaseConfig);  HTableInterface table=hbaseConnection.getTable(args.table);  Get get=new Get(Bytes.toBytes(args.term));  Result result=table.get(get);  int count=Bytes.toInt(result.getValue(HBaseWordCount.CF,HBaseWordCount.COUNT));  LOG.info("term: " + args.term + ", count: "+ count);  return 0;}  }
class C{  public int strId2Idx(Map fmap){  Integer idxInt=(Integer)fmap.get(strId);  if (idxInt != null) {    this.idx=idxInt.intValue();  }  return this.idx;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.151 -0500",hash_original_method="0D7553B7A8DFDAC7C355CECFA0DBF574",hash_generated_method="0438DB130048B3FDCFEB9CC8F2209EF6") final boolean acquireQueued(final Node node,int arg){  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return interrupted;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  @Override public ExampleSet apply(ExampleSet eSet) throws OperatorException {  int k=this.getParameterAsInt(PARAMETER_NUMBER_OF_NEIGHBORS);  int n=this.getParameterAsInt(PARAMETER_NUMBER_OF_Class_OUTLIERS);  DistanceMeasure measure=DistanceMeasures.createMeasure(this);  measure.init(eSet);  if (eSet.getAttributes().getLabel() == null) {    throw new UserError(this,105);  }  if (!eSet.getAttributes().getLabel().isNominal()) {    throw new UserError(this,101,eSet.getName(),eSet.getAttributes().getLabel().getName());  }  String outlierAttributeName=Attributes.OUTLIER_NAME;  if (getCompatibilityLevel().isAtMost(VERSION_LOWERCASE_ATTRIBUTE_NAME)) {    outlierAttributeName="Outlier";  }  Attribute outlierAttribute=AttributeFactory.createAttribute(outlierAttributeName,Ontology.BINOMINAL);  outlierAttribute.getMapping().mapString("false");  outlierAttribute.getMapping().mapString("true");  eSet.getExampleTable().addAttribute(outlierAttribute);  Attribute COFoutlierAttribute=AttributeFactory.createAttribute(COF_FACTOR_NAME,Ontology.REAL);  eSet.getExampleTable().addAttribute(COFoutlierAttribute);  eSet.getAttributes().setOutlier(outlierAttribute);  eSet.getAttributes().setSpecialAttribute(COFoutlierAttribute,COF_FACTOR_NAME);  Iterator<Example> reader=eSet.iterator();  while (reader.hasNext()) {    Example example=reader.next();    example.setValue(outlierAttribute,outlierAttribute.getMapping().mapString("false"));    example.setValue(COFoutlierAttribute,Double.POSITIVE_INFINITY);  }  ArrayList<String> sampleAttributeNames;  Attributes attributes=eSet.getAttributes();  sampleAttributeNames=new ArrayList<String>(attributes.size());  for (  Attribute attribute : attributes) {    sampleAttributeNames.add(attribute.getName());  }  ArrayList<Attribute> sampleAttributes=new ArrayList<Attribute>(sampleAttributeNames.size());  for (  String attributeName : sampleAttributeNames) {    sampleAttributes.add(attributes.get(attributeName));  }  ArrayList<COFObject> cofobjectList=new ArrayList<COFObject>();  int counter=0;  for (  Example example : eSet) {    double[] values=new double[sampleAttributes.size()];    int i=0;    for (    Attribute attribute : sampleAttributes) {      values[i]=example.getValue(attribute);      i++;    }    double label=example.getLabel();    cofobjectList.add(new COFObject(values,label,Double.POSITIVE_INFINITY,counter++));  }  double maxDev, minDev;  double maxkDist, minkDist;  maxkDist=Double.NEGATIVE_INFINITY;  minkDist=Double.POSITIVE_INFINITY;  maxDev=Double.NEGATIVE_INFINITY;  minDev=Double.POSITIVE_INFINITY;  for (  COFObject cofobject : cofobjectList) {    cofobject.computeCOF(cofobjectList,k,measure);    double tempKdist=cofobject.getKDist();    if (tempKdist > maxkDist) {      maxkDist=tempKdist;    }    if (tempKdist < minkDist) {      minkDist=tempKdist;    }    double tempDev=cofobject.getDeviation();    if (tempDev > maxDev) {      maxDev=tempDev;    }    if (tempDev < minDev) {      minDev=tempDev;    }  }  PriorityQueue<COFObject> topCOFList=new PriorityQueue<COFObject>();  for (  COFObject cofobject : cofobjectList) {    double cof=cofobject.getCOF();    if (topCOFList.size() < n) {      topCOFList.offer(cofobject);    } else     if (cof < topCOFList.peek().getCOF()) {      topCOFList.remove();      topCOFList.offer(cofobject);    }  }  for (  COFObject cofobject : topCOFList) {    cofobject.recomputeCOF(minDev,maxDev,minkDist,maxkDist);  }  for (  COFObject cofobject : topCOFList) {    Example example=eSet.getExample(cofobject.getId());    example.setValue(outlierAttribute,outlierAttribute.getMapping().mapString("true"));    example.setValue(COFoutlierAttribute,cofobject.getCOF());  }  return eSet;}  }
class C{  public static double symmetricalUncertainty(double matrix[][]){  double columnSum=0.0d;  double columnEntropy=0.0d;  double totalSum=0;  for (int i=0; i < matrix[0].length; i++) {    columnSum=0;    for (int j=0; j < matrix.length; j++) {      columnSum+=matrix[j][i];    }    columnEntropy+=entropy(columnSum);    totalSum+=columnSum;  }  columnEntropy-=entropy(totalSum);  double rowSum=0.0d;  double rowEntropy=0.0d;  double entropyForRows=0.0d;  for (int i=0; i < matrix.length; i++) {    rowSum=0;    for (int j=0; j < matrix[0].length; j++) {      rowSum+=matrix[i][j];      entropyForRows+=entropy(matrix[i][j]);    }    rowEntropy+=entropy(rowSum);  }  entropyForRows-=rowEntropy;  rowEntropy-=entropy(totalSum);  double informationGain=columnEntropy - entropyForRows;  if (Tools.isEqual(columnEntropy,0) || Tools.isEqual(rowEntropy,0)) {    return 0;  }  return 2.0d * (informationGain / (columnEntropy + rowEntropy));}  }
class C{  @Override public void addAttribute(String name,boolean value){  ((Element)current).setAttribute(name,Boolean.toString(value));}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.config.mvcc=true;  test.test();}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public boolean payoffAtExpiry(){  return this.payoffAtExpiry;}  }
class C{  public NumericNode numberNode(byte v){  return IntNode.valueOf(v);}  }
class C{  synchronized void orderlyCloseChannel(SocketChannel ch) throws IOException {  ch.socket().shutdownOutput();}  }
class C{  public button addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override public void process() throws MigrationCallbackException {  DbClient dbClient=getDbClient();  try {    List<URI> virtualPoolUris=dbClient.queryByType(VirtualPool.class,true);    Iterator<VirtualPool> virtualPools=dbClient.queryIterativeObjects(VirtualPool.class,virtualPoolUris,true);    while (virtualPools.hasNext()) {      VirtualPool virtualPool=virtualPools.next();      String autoTierPolicyName=virtualPool.getAutoTierPolicyName();      if (null != autoTierPolicyName && !autoTierPolicyName.isEmpty() && autoTierPolicyName.contains(CLARIION_KEY)) {        String[] autoTierPolicyArray=autoTierPolicyName.split(PLUS_OPERATOR);        virtualPool.setAutoTierPolicyName(autoTierPolicyArray[3]);        dbClient.persistObject(virtualPool);        log.info("Updating VirtualPool (id={}) with  right VNX FAST Policy {}",virtualPool.getId().toString(),virtualPool.getAutoTierPolicyName());      }    }  } catch (  Exception e) {    log.error("Exception occured while updating VirtualPool VNX AutoTieringPolicy");    log.error(e.getMessage(),e);  }}  }
class C{  public static void removeCommonFrames(final List<String> causeFrames,final List<String> wrapperFrames){  if (causeFrames == null || wrapperFrames == null) {    throw new IllegalArgumentException("The List must not be null");  }  int causeFrameIndex=causeFrames.size() - 1;  int wrapperFrameIndex=wrapperFrames.size() - 1;  while (causeFrameIndex >= 0 && wrapperFrameIndex >= 0) {    final String causeFrame=causeFrames.get(causeFrameIndex);    final String wrapperFrame=wrapperFrames.get(wrapperFrameIndex);    if (causeFrame.equals(wrapperFrame)) {      causeFrames.remove(causeFrameIndex);    }    causeFrameIndex--;    wrapperFrameIndex--;  }}  }
class C{  private void createNewToAllocMap(){  newToAllocNodeMap=HashBiMap.create();  Iterator iter=PaddleNumberers.v().allocNodeNumberer().iterator();  while (iter.hasNext()) {    AllocNode node=(AllocNode)iter.next();    newToAllocNodeMap.put(node.getNewExpr(),node);  }}  }
class C{  public StoppableNonReentrantLock(boolean fair,CancelCriterion stopper){  super(fair,stopper);}  }
class C{  public static void resume(Context context,String clientId){  Intent intent=new Intent(context,PlaybackService.class);  intent.setAction(ACTION_RESUME_PLAYER);  intent.putExtra(BUNDLE_KEY_SOUND_CLOUD_CLIENT_ID,clientId);  context.startService(intent);}  }
class C{  public Location newLocation(String name){  Location location=getLocationByName(name);  if (location == null) {    _id++;    location=new Location(Integer.toString(_id),name);    Integer oldSize=Integer.valueOf(_locationHashTable.size());    _locationHashTable.put(location.getId(),location);    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_locationHashTable.size()));  }  return location;}  }
class C{  public static byte parseByte(String text) throws DataParseException {  try {    return Byte.parseByte(text);  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  public static String encodePath(String path){  StringBuffer sb=new StringBuffer();  int n=path.length();  for (int i=0; i < n; i++) {    char c=path.charAt(i);    if (c == File.separatorChar)     sb.append('/'); else {      if (c <= 0x007F) {        if (encodedInPath.get(c))         escape(sb,c); else         sb.append(c);      } else       if (c > 0x07FF) {        escape(sb,(char)(0xE0 | ((c >> 12) & 0x0F)));        escape(sb,(char)(0x80 | ((c >> 6) & 0x3F)));        escape(sb,(char)(0x80 | ((c >> 0) & 0x3F)));      } else {        escape(sb,(char)(0xC0 | ((c >> 6) & 0x1F)));        escape(sb,(char)(0x80 | ((c >> 0) & 0x3F)));      }    }  }  return sb.toString();}  }
class C{  public void error(Throwable ex,boolean submitCrashReport){  LogUtil.error(this.tag,"",ex);  if (submitCrashReport) {    EventBus.getDefault().post(new CrashReportEvent(ex));  }}  }
class C{  private void createBody(Entity e){  BoundingBoxComponent bbox=Entities.getBBox(e);  PhysicsComponent physics=Entities.getPhysics(e);  double w=bbox.getWidth();  double h=bbox.getHeight();  if (physics.bodyDef.getPosition().x == 0 && physics.bodyDef.getPosition().y == 0) {    physics.bodyDef.getPosition().set(toMeters(bbox.getMinXWorld() + w / 2),toMeters(appHeight - (bbox.getMinYWorld() + h / 2)));  }  if (physics.bodyDef.getAngle() == 0) {    physics.bodyDef.setAngle((float)-Math.toRadians(Entities.getRotation(e).getValue()));  }  physics.body=jboxWorld.createBody(physics.bodyDef);  createFixtures(e);  physics.body.setUserData(e);  physics.onInitPhysics();  e.addControl(new PhysicsControl(appHeight));}  }
class C{  @Override default CompletableFuture<OptionalDouble> maxDouble(final ToDoubleFunction<? super T> fn){  return CompletableFuture.supplyAsync(null,getExec());}  }
class C{  public static void add(Runnable finisher){  sPendingWorkFinishers.add(finisher);}  }
class C{  public void handleEvent(Event evt){  evt=EventSupport.getUltimateOriginalEvent(evt);  MutationEvent mevt=(MutationEvent)evt;  listener.attrModified((Element)evt.getTarget(),(Attr)mevt.getRelatedNode(),mevt.getAttrChange(),mevt.getPrevValue(),mevt.getNewValue());}  }
class C{  void loadStrings() throws IOException {  int count=mHeaderItem.stringIdsSize;  int stringOffsets[]=new int[count];  seek(mHeaderItem.stringIdsOff);  for (int i=0; i < count; i++) {    stringOffsets[i]=readInt();  }  mStrings=new String[count];  seek(stringOffsets[0]);  for (int i=0; i < count; i++) {    seek(stringOffsets[i]);    mStrings[i]=readString();  }}  }
class C{  private void hashInputs() throws Exception {  for (int i=0; i < inputs.size() - 1; i+=2) {    int itemIdx=nodes.length + i;    LOG.trace("Inputs: Combining {} and {}",i,i + 1);    byte[] stepDigest=digestHashStep(hashAlgorithm,inputs.get(i),inputs.get(i + 1));    LOG.trace("Storing at {}",parentIdx(itemIdx));    nodes[parentIdx(itemIdx)]=stepDigest;  }}  }
class C{  private static BinlogEventV4 formDWDataEvent(long tableId,int eventType,List<MySqlValue> valueList){  BinlogEventV4HeaderImpl eventV4Header=new BinlogEventV4HeaderImpl();  eventV4Header.setTimestamp(System.currentTimeMillis());  eventV4Header.setEventType(eventType);  eventV4Header.setServerId(1);  if (eventType == MySQLConstants.WRITE_ROWS_EVENT_V2) {    WriteRowsEventV2 writeRowsEventV2=new WriteRowsEventV2(eventV4Header);    writeRowsEventV2.setTableId(tableId);    writeRowsEventV2.setRows(getRows(valueList));    return writeRowsEventV2;  } else   if (eventType == MySQLConstants.WRITE_ROWS_EVENT) {    WriteRowsEvent writeRowsEvent=new WriteRowsEvent(eventV4Header);    writeRowsEvent.setTableId(tableId);    writeRowsEvent.setRows(getRows(valueList));    return writeRowsEvent;  } else   if (eventType == MySQLConstants.DELETE_ROWS_EVENT_V2) {    DeleteRowsEventV2 deleteRowsEventV2=new DeleteRowsEventV2(eventV4Header);    deleteRowsEventV2.setTableId(tableId);    deleteRowsEventV2.setRows(getRows(valueList));    return deleteRowsEventV2;  } else   if (eventType == MySQLConstants.DELETE_ROWS_EVENT) {    DeleteRowsEvent deleteRowsEvent=new DeleteRowsEvent(eventV4Header);    deleteRowsEvent.setTableId(tableId);    deleteRowsEvent.setRows(getRows(valueList));    return deleteRowsEvent;  }  return null;}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public Object removeLast(){  Object last=header.previous.element;  remove(header.previous);  return last;}  }
class C{  protected void moveCar(){  if (x <= getWidth()) {    x+=1;  } else   x=0;  drawCar();}  }
class C{  public void testFailoverCombinations() throws Exception {  Properties props=new Properties();  props.setProperty("retriesAllDown","2");  for (int run=1; run <= 3; run++) {    Connection testConn=getUnreliableFailoverConnection(new String[]{HOST_1,HOST_2,HOST_3},props);    Statement testStmt1=null, testStmt2=null;    testConn.setAutoCommit(false);    try {      assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());      testStmt1=testConn.createStatement();      testStmt2=testConn.createStatement();      assertSingleValueQuery(testStmt1,"SELECT 1",1L);      assertSingleValueQuery(testStmt2,"SELECT 2",2L);      UnreliableSocketFactory.downHost(HOST_1);      assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());      if (run == 1) {        assertSQLException(testStmt1,"SELECT 1",COMM_LINK_ERR_PATTERN);      } else       if (run == 2) {        assertSQLException(testConn,"commit",COMM_LINK_ERR_PATTERN);      } else {        assertSQLException(testConn,"rollback",COMM_LINK_ERR_PATTERN);      }      assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertSQLException(testStmt1,"SELECT 1",STMT_CLOSED_ERR_PATTERN);      assertSQLException(testStmt2,"SELECT 2",STMT_CLOSED_ERR_PATTERN);      testStmt1=testConn.createStatement();      testStmt2=testConn.createStatement();      assertSingleValueQuery(testStmt1,"SELECT 1",1L);      assertSingleValueQuery(testStmt2,"SELECT 2",2L);      UnreliableSocketFactory.downHost(HOST_2);      assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());      if (run == 1) {        assertSQLException(testConn,"commit",COMM_LINK_ERR_PATTERN);      } else       if (run == 2) {        assertSQLException(testStmt1,"SELECT 1",COMM_LINK_ERR_PATTERN);      } else {        assertSQLException(testConn,"rollback",COMM_LINK_ERR_PATTERN);      }      assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertSQLException(testStmt1,"SELECT 1",STMT_CLOSED_ERR_PATTERN);      assertSQLException(testStmt2,"SELECT 2",STMT_CLOSED_ERR_PATTERN);      UnreliableSocketFactory.dontDownHost(HOST_1);      UnreliableSocketFactory.dontDownHost(HOST_2);      testStmt1=testConn.createStatement();      testStmt2=testConn.createStatement();      assertSingleValueQuery(testStmt1,"SELECT 1",1L);      assertSingleValueQuery(testStmt2,"SELECT 2",2L);      UnreliableSocketFactory.downHost(HOST_3);      assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());      if (run == 1) {        assertSQLException(testConn,"rollback",COMM_LINK_ERR_PATTERN);      } else       if (run == 2) {        assertSQLException(testConn,"commit",COMM_LINK_ERR_PATTERN);      } else {        assertSQLException(testStmt2,"SELECT 2",COMM_LINK_ERR_PATTERN);      }      assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertSQLException(testStmt1,"SELECT 1",STMT_CLOSED_ERR_PATTERN);      assertSQLException(testStmt2,"SELECT 2",STMT_CLOSED_ERR_PATTERN);      testStmt1=testConn.createStatement();      testStmt2=testConn.createStatement();      assertSingleValueQuery(testStmt1,"SELECT 1",1L);      assertSingleValueQuery(testStmt2,"SELECT 2",2L);      UnreliableSocketFactory.downHost(HOST_2);      assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());      if (run == 1) {        assertSQLException(testStmt1,"SELECT 1",COMM_LINK_ERR_PATTERN);      } else       if (run == 2) {        assertSQLException(testConn,"rollback",COMM_LINK_ERR_PATTERN);      } else {        assertSQLException(testConn,"commit",COMM_LINK_ERR_PATTERN);      }      assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertSQLException(testStmt1,"SELECT 1",STMT_CLOSED_ERR_PATTERN);      assertSQLException(testStmt2,"SELECT 2",STMT_CLOSED_ERR_PATTERN);      testStmt1=testConn.createStatement();      testStmt2=testConn.createStatement();      assertSingleValueQuery(testStmt1,"SELECT 1",1L);      assertSingleValueQuery(testStmt2,"SELECT 2",2L);      assertConnectionsHistory(HOST_1_OK,HOST_2_OK,HOST_3_OK,HOST_2_OK,HOST_3_FAIL,HOST_2_FAIL,HOST_3_FAIL,HOST_1_OK);    }  finally {      if (testStmt1 != null) {        testStmt1.close();      }      if (testStmt2 != null) {        testStmt2.close();      }      testConn.close();    }  }}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {}  }
class C{  public boolean isOneDotFive(){  return jdkVersion == JDK1_5;}  }
class C{  private void assertRelyingParty(RelyingPartyDTO relyingParty){  assertEquals(RELYING_PARTY_NAME,relyingParty.getName());  assertEquals(RELYING_PARTY_URI,relyingParty.getUrl());  assertNotNull(relyingParty.getCertificate());  assertFalse(relyingParty.isAuthnRequestsSigned());  assertEquals(RelyingPartyDataGenerator.ASSERTION_CS_NAME,relyingParty.getDefaultAssertionConsumerService());  assertEquals(RelyingPartyDataGenerator.ATTRIBUTE_CS_NAME,relyingParty.getDefaultAttributeConsumerService());  assertEquals(1,relyingParty.getAssertionConsumerServices().size());  assertEquals(1,relyingParty.getAttributeConsumerServices().size());  assertEquals(1,relyingParty.getSingleLogoutServices().size());  assertLogoutServiceEndPoint(relyingParty.getSingleLogoutServices().iterator().next());  assertAttributeConsumerService(relyingParty.getAttributeConsumerServices().iterator().next());  assertAssertionConsumerService(relyingParty.getAssertionConsumerServices().iterator().next());}  }
class C{  public void pointerHoverReleased(int[] x,int[] y){}  }
class C{  protected void engineInitSign(PrivateKey privateKey) throws InvalidKeyException {  DSAParams params;  BigInteger p, q, x;  int n;  if (privateKey == null || !(privateKey instanceof DSAPrivateKey)) {    throw new InvalidKeyException();  }  params=((DSAPrivateKey)privateKey).getParams();  p=params.getP();  q=params.getQ();  x=((DSAPrivateKey)privateKey).getX();  n=p.bitLength();  if (p.compareTo(BigInteger.valueOf(1)) != 1 || n < 512 || n > 1024 || (n & 077) != 0) {    throw new InvalidKeyException("bad p");  }  if (q.signum() != 1 && q.bitLength() != 160) {    throw new InvalidKeyException("bad q");  }  if (x.signum() != 1 || x.compareTo(q) != -1) {    throw new InvalidKeyException("x <= 0 || x >= q");  }  dsaKey=(DSAKey)privateKey;  msgDigest.reset();}  }
class C{  private float[] parserSensorJson(String data,String sensor){  float[] values=new float[3];  if (!"".equals(data)) {    JSONObject jo=JSONObject.parse(data);    JSONArray ja=jo.getJSONArray(SensorType.ANDROID_SENSOR);    for (int i=0; i < ja.size(); i++) {      if (!ja.getJSONObject(i).isNull(sensor)) {        JSONObject jo1=ja.getJSONObject(i).getJSONObject(sensor);        values[0]=jo1.getFloat("value0");        values[1]=jo1.getFloat("value1");        values[2]=jo1.getFloat("value2");      }    }  }  return values;}  }
class C{  public PluginEntry(String service,CordovaPlugin plugin){  this(service,plugin.getClass().getName(),true,plugin);}  }
class C{  public SyncOfferMessage(SyncOfferMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStore()) {    this.store=new Store(other.store);  }  if (other.isSetVersions()) {    List<KeyedVersions> __this__versions=new ArrayList<KeyedVersions>();    for (    KeyedVersions other_element : other.versions) {      __this__versions.add(new KeyedVersions(other_element));    }    this.versions=__this__versions;  }}  }
class C{  public void add(Comparable x){  items.add(null);  size+=1;  int hole=size;  items.set(0,x);  for (; x.compareTo(items.get(hole / 2)) < 0; hole/=2) {    items.set(hole,items.get(hole / 2));  }  items.set(hole,x);}  }
class C{  protected void clearEditInfo(){  int i, j;  int flag, count;  count=m_vals.size();  j=0;  for (i=0; i < count; i++) {    flag=m_editFlags.get(j);    if ((flag == FolderEditFlag.UPDATE) || (flag == FolderEditFlag.NEW)) {      flag=FolderEditFlag.NONE;      m_editFlags.set(j,flag);      j=j + 1;    } else     if (flag == FolderEditFlag.REMOVE) {      m_editFlags.remove(j);      m_vals.remove(j);    } else     j=j + 1;  }}  }
class C{  public final char readChar() throws java.io.IOException {  return ' ';}  }
class C{  @RequestMapping(value=EXPECTED_PARTITION_VALUES_URI_PREFIX,method=RequestMethod.DELETE,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_EXPECTED_PARTITION_VALUES_DELETE) public ExpectedPartitionValuesInformation deleteExpectedPartitionValues(@RequestBody ExpectedPartitionValuesDeleteRequest request){  return expectedPartitionValueService.deleteExpectedPartitionValues(request);}  }
class C{  public void add(final AbstractInsnNode insn){  ++size;  if (last == null) {    first=insn;    last=insn;  } else {    last.next=insn;    insn.prev=last;  }  last=insn;  cache=null;  insn.index=0;}  }
class C{  public final Mono<T> ignoreElement(){  return ignoreElements(this);}  }
class C{  public static Builder builder(AppendResponse response){  return new Builder(response);}  }
class C{  public void deleteBuffer(){  if (this.depthBufferFBO != null)   this.depthBufferFBO.deleteFramebuffer();}  }
class C{  public DoubleMatrix[] jblas_fullSVD(){  return org.jblas.Singular.fullSVD(new DoubleMatrix(this.getArray()));}  }
class C{  public int N(){  return N;}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Utils.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Utils.US_ASCII));}  }
class C{  public ConfusionMatrix makeWeighted(CostMatrix costs) throws Exception {  if (costs.size() != size()) {    throw new Exception("Cost and confusion matrices must be the same size");  }  ConfusionMatrix weighted=new ConfusionMatrix(m_ClassNames);  for (int row=0; row < size(); row++) {    for (int col=0; col < size(); col++) {      weighted.set(row,col,get(row,col) * costs.getElement(row,col));    }  }  return weighted;}  }
class C{  public boolean isLastRowVisible(){  if (que.size() == 0 || view == null) {    return false;  }  Rect scrollBounds=new Rect();  view.cardsLayout.getHitRect(scrollBounds);  View lastRow=view.cardsLayout.getChildAt(view.cardsLayout.getChildCount() - 1);  return lastRow == null || lastRow.getLocalVisibleRect(scrollBounds);}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 6:{        return MacroTokenType.RPAREN;      }case 9:    break;case 4:{    return MacroTokenType.STRING_LITERAL;  }case 10:break;case 2:{return MacroTokenType.IDENTIFIER;}case 11:break;case 1:{return TokenType.BAD_CHARACTER;}case 12:break;case 5:{return MacroTokenType.LPAREN;}case 13:break;case 8:{return MacroTokenType.EQ;}case 14:break;case 7:{return MacroTokenType.COMMA;}case 15:break;case 3:{return MacroTokenType.WHITE_SPACE;}case 16:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public final DoubleGrid2D multiply(final double byThisMuch){  if (byThisMuch == 1.0)   return this;  double[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++)     fieldx[y]*=byThisMuch;  }  return this;}  }
class C{  private void stop(Context context){  LocalBroadcastManager.getInstance(context).unregisterReceiver(this);  mListening=false;}  }
class C{  public static void removeHDFSFiles(String[] files){  try {    FileSystem fs=FileSystem.get(conf);    for (    String directory : files) {      Path dir=new Path(directory);      if (fs.exists(dir) && !fs.getFileStatus(dir).isDirectory()) {        fs.delete(dir,false);      }    }  } catch (  IOException e) {  }}  }
class C{  public void add(Collection geometries){  mergedLineStrings=null;  for (Iterator i=geometries.iterator(); i.hasNext(); ) {    Geometry geometry=(Geometry)i.next();    add(geometry);  }}  }
class C{  public static void main(String[] args){  System.out.println(Arrays.toString(args));  int max=Integer.MIN_VALUE;  for (  String arg : args) {    int value=Integer.parseInt(arg);    if (value > max) {      max=value;    }  }  System.out.println("The max is " + max);}  }
class C{  public OtherContent(){  super(KEY);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.472 -0500",hash_original_method="45E0951257A8FCCA68182E75CB3B0E3E",hash_generated_method="FAC3555792150861C9423F9EE58DE81D") public void doDeferredDelete(){  if (sipStack.getTimer() == null)   this.setState(TERMINATED_STATE); else {    this.dialogDeleteTask=new DialogDeleteTask();    sipStack.getTimer().schedule(this.dialogDeleteTask,SIPTransaction.TIMER_H * SIPTransactionStack.BASE_TIMER_INTERVAL);  }}  }
class C{  private static void loadDefaultKitsIfNecessary(){  if (SwingUtilities.appContextGet(kitTypeRegistryKey) == null) {synchronized (defaultEditorKitMap) {      if (defaultEditorKitMap.size() == 0) {        defaultEditorKitMap.put("text/plain","javax.swing.JEditorPane$PlainEditorKit");        defaultEditorKitMap.put("text/html","javax.swing.text.html.HTMLEditorKit");        defaultEditorKitMap.put("text/rtf","javax.swing.text.rtf.RTFEditorKit");        defaultEditorKitMap.put("application/rtf","javax.swing.text.rtf.RTFEditorKit");      }    }    Hashtable ht=new Hashtable();    SwingUtilities.appContextPut(kitTypeRegistryKey,ht);    ht=new Hashtable();    SwingUtilities.appContextPut(kitLoaderRegistryKey,ht);    for (    String key : defaultEditorKitMap.keySet()) {      registerEditorKitForContentType(key,defaultEditorKitMap.get(key));    }  }}  }
class C{  public void removeAll(){  handlers.clear();  genericHandlers.clear();}  }
class C{  public RequestHandle delete(String url,ResponseHandlerInterface responseHandler){  return delete(null,url,responseHandler);}  }
class C{  protected void onQueryComplete(int token,Object cookie,Cursor cursor){}  }
class C{  public static boolean[] clone(final boolean[] array){  if (array == null) {    return null;  }  return array.clone();}  }
class C{  public static void createParentDirs(File file) throws IOException {  checkNotNull(file);  File parent=file.getCanonicalFile().getParentFile();  if (parent == null) {    return;  }  parent.mkdirs();  if (!parent.isDirectory()) {    throw new IOException("Unable to create parent directories of " + file);  }}  }
class C{  public boolean isBackupRestoreSupported(){  return backupRestoreSupported;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void checkRequest(long n) throws IllegalArgumentException {  if (n <= 0L) {    throw Exceptions.nullOrNegativeRequestException(n);  }}  }
class C{  public boolean isArrayMode(){  return arrayMode;}  }
class C{  public static double[] times(double[] v1,double v){  double[] array=new double[v1.length];  for (int i=0; i < v1.length; i++)   array[i]=v1[i] * v;  return array;}  }
class C{  protected T newInstance(final Class<? extends T> cls,final IIndexManager indexManager,final NT nt,final Properties properties){  if (cls == null)   throw new IllegalArgumentException();  if (indexManager == null)   throw new IllegalArgumentException();  if (nt == null)   throw new IllegalArgumentException();  if (properties == null)   throw new IllegalArgumentException();  final Constructor<? extends T> ctor;  try {    ctor=cls.getConstructor(new Class[]{IIndexManager.class,String.class,Long.class,Properties.class});  } catch (  Exception e) {    throw new RuntimeException("No appropriate ctor?: cls=" + cls.getName() + " : "+ e,e);  }  final T r;  try {    r=ctor.newInstance(new Object[]{indexManager,nt.getName(),nt.getTimestamp(),properties});    r.init();    if (INFO) {      log.info("new instance: " + r);    }    return r;  } catch (  Exception ex) {    throw new RuntimeException("Could not instantiate relation: " + ex,ex);  }}  }
class C{  public jMatrix copy(){  jMatrix X=new jMatrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j];    }  }  return X;}  }
class C{  public static void finishStartingService(Service service,int startId){synchronized (sStartingServiceSync) {    if (sStartingService != null) {      if (DEBUG)       Log.d(TAG,"stopSelf id = " + startId);      if (service.stopSelfResult(startId)) {        Log.d(TAG,"finishStartingService: stopping service");        sStartingService.release();      }    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_parameterList_1_();}  }
class C{  @CanIgnoreReturnValue public static long copy(InputStream from,OutputStream to) throws IOException {  checkNotNull(from);  checkNotNull(to);  byte[] buf=createBuffer();  long total=0;  while (true) {    int r=from.read(buf);    if (r == -1) {      break;    }    to.write(buf,0,r);    total+=r;  }  return total;}  }
class C{  public static Array toArray(Argument arg){  ArrayImpl trg=new ArrayImpl();  int[] keys=arg.intKeys();  for (int i=0; i < keys.length; i++) {    trg.setEL(keys[i],arg.get(keys[i],null));  }  return trg;}  }
class C{  private Copier(){  instanceNotAllowed(getClass());}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append("(");  sb.append("timestamp: " + timestamp);  List<? extends Certificate> certs=signerCertPath.getCertificates();  if (!certs.isEmpty()) {    sb.append("TSA: " + certs.get(0));  } else {    sb.append("TSA: <empty>");  }  sb.append(")");  return sb.toString();}  }
class C{  public static String normalizeClassName(Class type){  if (!type.isArray())   return type.getName();  StringBuffer className=new StringBuffer();  try {    className.append(getArrayBaseType(type).getName() + " ");    for (int i=0; i < getArrayDimensions(type); i++)     className.append("[]");  } catch (  ReflectError e) {  }  return className.toString();}  }
class C{  public boolean isSharedSketchSupported(){  return readBoolean(RcsSettingsData.CAPABILITY_SHARED_SKETCH);}  }
class C{  public void writeLogToScreen(XMLWriter writer,ClockModelGenerator clockModelGenerator,SubstitutionModelGenerator substitutionModelGenerator){  writer.writeComment("write log to screen");  writer.writeOpenTag(LoggerParser.LOG,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,"screenLog"),new Attribute.Default<String>(LoggerParser.LOG_EVERY,options.echoEvery + "")});  if (options.hasData()) {    writer.writeOpenTag(ColumnsParser.COLUMN,new Attribute[]{new Attribute.Default<String>(ColumnsParser.LABEL,"Posterior"),new Attribute.Default<String>(ColumnsParser.DECIMAL_PLACES,"4"),new Attribute.Default<String>(ColumnsParser.WIDTH,"12")});    writer.writeIDref(CompoundLikelihoodParser.POSTERIOR,"posterior");    writer.writeCloseTag(ColumnsParser.COLUMN);  }  writer.writeOpenTag(ColumnsParser.COLUMN,new Attribute[]{new Attribute.Default<String>(ColumnsParser.LABEL,"Prior"),new Attribute.Default<String>(ColumnsParser.DECIMAL_PLACES,"4"),new Attribute.Default<String>(ColumnsParser.WIDTH,"12")});  writer.writeIDref(CompoundLikelihoodParser.PRIOR,"prior");  writer.writeCloseTag(ColumnsParser.COLUMN);  if (options.hasData()) {    writer.writeOpenTag(ColumnsParser.COLUMN,new Attribute[]{new Attribute.Default<String>(ColumnsParser.LABEL,"Likelihood"),new Attribute.Default<String>(ColumnsParser.DECIMAL_PLACES,"4"),new Attribute.Default<String>(ColumnsParser.WIDTH,"12")});    writer.writeIDref(CompoundLikelihoodParser.LIKELIHOOD,"likelihood");    writer.writeCloseTag(ColumnsParser.COLUMN);  }  if (options.useStarBEAST) {    writer.writeOpenTag(ColumnsParser.COLUMN,new Attribute[]{new Attribute.Default<String>(ColumnsParser.LABEL,"PopMean"),new Attribute.Default<String>(ColumnsParser.DECIMAL_PLACES,"4"),new Attribute.Default<String>(ColumnsParser.WIDTH,"12")});    writer.writeIDref(ParameterParser.PARAMETER,TraitData.TRAIT_SPECIES + "." + options.starBEASTOptions.POP_MEAN);    writer.writeCloseTag(ColumnsParser.COLUMN);  }  for (  PartitionTreeModel model : options.getPartitionTreeModels()) {    writer.writeOpenTag(ColumnsParser.COLUMN,new Attribute[]{new Attribute.Default<String>(ColumnsParser.LABEL,model.getPrefix() + TreeModelParser.ROOT_HEIGHT),new Attribute.Default<String>(ColumnsParser.SIGNIFICANT_FIGURES,"6"),new Attribute.Default<String>(ColumnsParser.WIDTH,"12")});    writer.writeIDref(ParameterParser.PARAMETER,model.getPrefix() + TreeModel.TREE_MODEL + "."+ TreeModelParser.ROOT_HEIGHT);    writer.writeCloseTag(ColumnsParser.COLUMN);  }  for (  PartitionClockModel model : options.getPartitionClockModels()) {    if (!model.getClockRateParameter().isFixed()) {      writer.writeOpenTag(ColumnsParser.COLUMN,new Attribute[]{new Attribute.Default<String>(ColumnsParser.LABEL,clockModelGenerator.getClockRateString(model)),new Attribute.Default<String>(ColumnsParser.SIGNIFICANT_FIGURES,"6"),new Attribute.Default<String>(ColumnsParser.WIDTH,"12")});      clockModelGenerator.writeAllClockRateRefs(model,writer);      writer.writeCloseTag(ColumnsParser.COLUMN);    }  }  for (  PartitionSubstitutionModel model : options.getPartitionSubstitutionModels()) {    if (model.getDataType().getType() == DataType.MICRO_SAT)     substitutionModelGenerator.writeMicrosatSubstModelParameterRef(model,writer);  }  generateInsertionPoint(ComponentGenerator.InsertionPoint.IN_SCREEN_LOG,writer);  writer.writeCloseTag(LoggerParser.LOG);  generateInsertionPoint(ComponentGenerator.InsertionPoint.AFTER_SCREEN_LOG,writer);}  }
class C{  public static SemaphoreMeter createSemaphoreMeter(String name){  return create().createSemaphoreMeterImpl(name,true);}  }
class C{  public UserExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public LZ4(){  super(30,2,21,24,1);}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2),entryOf(k3,v3));}  }
class C{  @Inline @Entrypoint public static void doubleArrayWrite(double[] ref,int index,double value){  if (NEEDS_DOUBLE_GC_WRITE_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index << LOG_BYTES_IN_DOUBLE);    Selected.Mutator.get().doubleWrite(array,array.toAddress().plus(offset),value,offset.toWord(),Word.zero(),ARRAY_ELEMENT);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public Frame<V>[] analyze(final String owner,final MethodNode m) throws AnalyzerException {  if ((m.access & (ACC_ABSTRACT | ACC_NATIVE)) != 0) {    frames=(Frame<V>[])new Frame<?>[0];    return frames;  }  n=m.instructions.size();  insns=m.instructions;  handlers=(List<TryCatchBlockNode>[])new List<?>[n];  frames=(Frame<V>[])new Frame<?>[n];  subroutines=new Subroutine[n];  queued=new boolean[n];  queue=new int[n];  top=0;  for (int i=0; i < m.tryCatchBlocks.size(); ++i) {    TryCatchBlockNode tcb=m.tryCatchBlocks.get(i);    int begin=insns.indexOf(tcb.start);    int end=insns.indexOf(tcb.end);    for (int j=begin; j < end; ++j) {      List<TryCatchBlockNode> insnHandlers=handlers[j];      if (insnHandlers == null) {        insnHandlers=new ArrayList<TryCatchBlockNode>();        handlers[j]=insnHandlers;      }      insnHandlers.add(tcb);    }  }  Subroutine main=new Subroutine(null,m.maxLocals,null);  List<AbstractInsnNode> subroutineCalls=new ArrayList<AbstractInsnNode>();  Map<LabelNode,Subroutine> subroutineHeads=new HashMap<LabelNode,Subroutine>();  findSubroutine(0,main,subroutineCalls);  while (!subroutineCalls.isEmpty()) {    JumpInsnNode jsr=(JumpInsnNode)subroutineCalls.remove(0);    Subroutine sub=subroutineHeads.get(jsr.label);    if (sub == null) {      sub=new Subroutine(jsr.label,m.maxLocals,jsr);      subroutineHeads.put(jsr.label,sub);      findSubroutine(insns.indexOf(jsr.label),sub,subroutineCalls);    } else {      sub.callers.add(jsr);    }  }  for (int i=0; i < n; ++i) {    if (subroutines[i] != null && subroutines[i].start == null) {      subroutines[i]=null;    }  }  Frame<V> current=newFrame(m.maxLocals,m.maxStack);  Frame<V> handler=newFrame(m.maxLocals,m.maxStack);  current.setReturn(interpreter.newValue(Type.getReturnType(m.desc)));  Type[] args=Type.getArgumentTypes(m.desc);  int local=0;  if ((m.access & ACC_STATIC) == 0) {    Type ctype=Type.getObjectType(owner);    current.setLocal(local++,interpreter.newValue(ctype));  }  for (int i=0; i < args.length; ++i) {    current.setLocal(local++,interpreter.newValue(args[i]));    if (args[i].getSize() == 2) {      current.setLocal(local++,interpreter.newValue(null));    }  }  while (local < m.maxLocals) {    current.setLocal(local++,interpreter.newValue(null));  }  merge(0,current,null);  init(owner,m);  while (top > 0) {    int insn=queue[--top];    Frame<V> f=frames[insn];    Subroutine subroutine=subroutines[insn];    queued[insn]=false;    AbstractInsnNode insnNode=null;    try {      insnNode=m.instructions.get(insn);      int insnOpcode=insnNode.getOpcode();      int insnType=insnNode.getType();      if (insnType == AbstractInsnNode.LABEL || insnType == AbstractInsnNode.LINE || insnType == AbstractInsnNode.FRAME) {        merge(insn + 1,f,subroutine);        newControlFlowEdge(insn,insn + 1);      } else {        current.init(f).execute(insnNode,interpreter);        subroutine=subroutine == null ? null : subroutine.copy();        if (insnNode instanceof JumpInsnNode) {          JumpInsnNode j=(JumpInsnNode)insnNode;          if (insnOpcode != GOTO && insnOpcode != JSR) {            merge(insn + 1,current,subroutine);            newControlFlowEdge(insn,insn + 1);          }          int jump=insns.indexOf(j.label);          if (insnOpcode == JSR) {            merge(jump,current,new Subroutine(j.label,m.maxLocals,j));          } else {            merge(jump,current,subroutine);          }          newControlFlowEdge(insn,jump);        } else         if (insnNode instanceof LookupSwitchInsnNode) {          LookupSwitchInsnNode lsi=(LookupSwitchInsnNode)insnNode;          int jump=insns.indexOf(lsi.dflt);          merge(jump,current,subroutine);          newControlFlowEdge(insn,jump);          for (int j=0; j < lsi.labels.size(); ++j) {            LabelNode label=lsi.labels.get(j);            jump=insns.indexOf(label);            merge(jump,current,subroutine);            newControlFlowEdge(insn,jump);          }        } else         if (insnNode instanceof TableSwitchInsnNode) {          TableSwitchInsnNode tsi=(TableSwitchInsnNode)insnNode;          int jump=insns.indexOf(tsi.dflt);          merge(jump,current,subroutine);          newControlFlowEdge(insn,jump);          for (int j=0; j < tsi.labels.size(); ++j) {            LabelNode label=tsi.labels.get(j);            jump=insns.indexOf(label);            merge(jump,current,subroutine);            newControlFlowEdge(insn,jump);          }        } else         if (insnOpcode == RET) {          if (subroutine == null) {            throw new AnalyzerException(insnNode,"RET instruction outside of a sub routine");          }          for (int i=0; i < subroutine.callers.size(); ++i) {            JumpInsnNode caller=subroutine.callers.get(i);            int call=insns.indexOf(caller);            if (frames[call] != null) {              merge(call + 1,frames[call],current,subroutines[call],subroutine.access);              newControlFlowEdge(insn,call + 1);            }          }        } else         if (insnOpcode != ATHROW && (insnOpcode < IRETURN || insnOpcode > RETURN)) {          if (subroutine != null) {            if (insnNode instanceof VarInsnNode) {              int var=((VarInsnNode)insnNode).var;              subroutine.access[var]=true;              if (insnOpcode == LLOAD || insnOpcode == DLOAD || insnOpcode == LSTORE || insnOpcode == DSTORE) {                subroutine.access[var + 1]=true;              }            } else             if (insnNode instanceof IincInsnNode) {              int var=((IincInsnNode)insnNode).var;              subroutine.access[var]=true;            }          }          merge(insn + 1,current,subroutine);          newControlFlowEdge(insn,insn + 1);        }      }      List<TryCatchBlockNode> insnHandlers=handlers[insn];      if (insnHandlers != null) {        for (int i=0; i < insnHandlers.size(); ++i) {          TryCatchBlockNode tcb=insnHandlers.get(i);          Type type;          if (tcb.type == null) {            type=Type.getObjectType("java/lang/Throwable");          } else {            type=Type.getObjectType(tcb.type);          }          int jump=insns.indexOf(tcb.handler);          if (newControlFlowExceptionEdge(insn,tcb)) {            handler.init(f);            handler.clearStack();            handler.push(interpreter.newValue(type));            merge(jump,handler,subroutine);          }        }      }    } catch (    AnalyzerException e) {      throw new AnalyzerException(e.node,"Error at instruction " + insn + ": "+ e.getMessage(),e);    }catch (    Exception e) {      throw new AnalyzerException(insnNode,"Error at instruction " + insn + ": "+ e.getMessage(),e);    }  }  return frames;}  }
class C{  public ClassPath appendSystemPath(){  return source.appendSystemPath();}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/stop") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList stopContinuousCopies(@PathParam("id") URI id,FileReplicationParam param) throws ControllerException {  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  return performFileProtectionAction(param,id,ProtectionOp.STOP.getRestOp());}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public static void main(String[] arg) throws Exception {  SimpleCommandLineParser parser=new SimpleCommandLineParser(arg);  String username=parser.getValue("username");  String password=parser.getValue("password");  String domain=parser.getValue("domain");  String destinationUser=parser.getValue("destination_user");  String emailFileName=parser.getValue("data_file");  boolean help=parser.containsKey("help");  if (help || (username == null) || (password == null)|| (domain == null)) {    usage();    System.exit(1);  }  if (emailFileName != null) {    LOGGER.log(Level.INFO,"Reading email data from file");    rfcTxt=readFile(emailFileName);    LOGGER.log(Level.INFO,"Finished reading email data");  }  new AppsForYourDomainMigrationClient(username,password,domain,destinationUser);}  }
class C{  public static final HashMap readMapXml(InputStream in) throws XmlPullParserException, IOException {  XmlPullParser parser=Xml.newPullParser();  parser.setInput(in,null);  return (HashMap)readValueXml(parser,new String[1]);}  }
class C{  public ArrayIndexOutOfBoundsException(int sourceLength,int offset,int count){  super("length=" + sourceLength + "; regionStart="+ offset+ "; regionLength="+ count);}  }
class C{  public ComputeImageServerRestRep update(URI id,ComputeImageServerUpdate input){  return client.put(ComputeImageServerRestRep.class,input,getIdUrl(),id);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'NOTE' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'TEXT' TEXT NOT NULL ,"+ "'COMMENT' TEXT,"+ "'DATE' INTEGER);");}  }
class C{  public boolean isDone(){  return mDone;}  }
class C{  public void removeAllLineHighlights(){  if (lineHighlightManager != null) {    lineHighlightManager.removeAllLineHighlights();  }}  }
class C{  public static <T>T min(Iterator<T> self){  return min((Iterable<T>)toList(self));}  }
class C{  public FlateOutputStream(OutputStream out){  super(out);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case FunctionblockPackage.RETURN_TYPE__MULTIPLICITY:    return multiplicity != MULTIPLICITY_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  private void readBeyondMaxInt(byte[] data,IonType valueType){  final long bvmLength=4;  final long valueLength=data.length - bvmLength;  final long repeat=(((long)Integer.MAX_VALUE) * 2) / data.length;  in=system().newReader(new RepeatInputStream(data,repeat));  initFacets();  long iterLimit=repeat;  for (long i=0; i <= iterLimit; i++) {    assertSame(valueType,in.next());    long expectedStart=bvmLength + i * (valueLength + bvmLength);    checkCurrentSpan(expectedStart,expectedStart + valueLength);  }}  }
class C{  public static double cdf(double x,double M,double S){  if (x < 0)   return 0;  return NormalDistribution.cdf(Math.log(x),M,S,false);}  }
class C{  public Statement(String text){  this(text,Values.EmptyMap);}  }
class C{  private static void deleteGroupNode(final INaviGroupNode groupNode){  final List<INaviViewNode> elements=groupNode.getElements();  groupNode.setCollapsed(false);  for (  final INaviViewNode node : elements) {    groupNode.removeElement(node);    if (groupNode.getParentGroup() != null) {      groupNode.getParentGroup().addElement(node);    }  }}  }
class C{  @Override public final void insertAll(DBIDs ids){  if (ids.isEmpty() || (ids.size() == 1)) {    return;  }  if (canBulkLoad()) {    List<SpatialEntry> leafs=new ArrayList<>(ids.size());    for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {      leafs.add(createNewLeafEntry(DBIDUtil.deref(iter)));    }    bulkLoad(leafs);  } else {    for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {      insert(iter);    }  }  doExtraIntegrityChecks();}  }
class C{  public MoreLikeThisQueryBuilder like(String... likeTexts){  this.likeTexts=new ArrayList<>();  return addLikeText(likeTexts);}  }
class C{  public void execute(){  IKnowledge knowledge=(IKnowledge)getParams().get("knowledge",new Knowledge2());  Parameters searchParams=getParams();  Parameters params=searchParams;  Graph graph;  IndependenceTest independenceTest=getIndependenceTest();  Score score=new ScoredIndTest(independenceTest);  if (independenceTest instanceof IndTestDSep) {    final DagToPag dagToPag=new DagToPag(((IndTestDSep)independenceTest).getGraph());    dagToPag.setCompleteRuleSetUsed(params.getBoolean("completeRuleSetUsed",false));    graph=dagToPag.convert();  } else {    GFci fci=new GFci(independenceTest,score);    fci.setKnowledge(knowledge);    fci.setCompleteRuleSetUsed(params.getBoolean("completeRuleSetUsed",false));    fci.setMaxPathLength(params.getInt("maxReachablePathLength",-1));    fci.setMaxIndegree(params.getInt("maxIndegree"));    fci.setCompleteRuleSetUsed(false);    fci.setFaithfulnessAssumed(params.getBoolean("faithfulnessAssumed",true));    graph=fci.search();  }  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else   if (knowledge.isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(graph,knowledge);  } else {    GraphUtils.circleLayout(graph,200,200,150);  }  setResultGraph(graph);}  }
class C{  private void onColumnSync(){  int syncPosition=Math.min(mSyncPosition,getCount() - 1);  SparseArray<Double> positionHeightRatios=new SparseArray<Double>(syncPosition);  for (int pos=0; pos < syncPosition; pos++) {    final GridItemRecord rec=mPositionData.get(pos);    if (rec == null)     break;    Log.d(TAG,"onColumnSync:" + pos + " ratio:"+ rec.heightRatio);    positionHeightRatios.append(pos,rec.heightRatio);  }  mPositionData.clear();  if (DBG)   Log.d(TAG,"onColumnSync column width:" + mColumnWidth);  for (int pos=0; pos < syncPosition; pos++) {    final GridItemRecord rec=getOrCreateRecord(pos);    final double heightRatio=positionHeightRatios.get(pos);    final int height=(int)(mColumnWidth * heightRatio);    rec.heightRatio=heightRatio;    int top;    int bottom;    if (isHeaderOrFooter(pos)) {      top=getLowestPositionedBottom();      bottom=top + height;      for (int i=0; i < mColumnCount; i++) {        mColumnTops[i]=top;        mColumnBottoms[i]=bottom;      }    } else {      final int column=getHighestPositionedBottomColumn();      top=mColumnBottoms[column];      bottom=top + height + getChildTopMargin(pos)+ getChildBottomMargin();      mColumnTops[column]=top;      mColumnBottoms[column]=bottom;      rec.column=column;    }    if (DBG)     Log.d(TAG,"onColumnSync position:" + pos + " top:"+ top+ " bottom:"+ bottom+ " height:"+ height+ " heightRatio:"+ heightRatio);  }  final int syncColumn=getHighestPositionedBottomColumn();  setPositionColumn(syncPosition,syncColumn);  int syncToBottom=mColumnBottoms[syncColumn];  int offset=-syncToBottom + mSpecificTop;  offsetAllColumnsTopAndBottom(offset);  mDistanceToTop=-syncToBottom;  System.arraycopy(mColumnBottoms,0,mColumnTops,0,mColumnCount);}  }
class C{  private synchronized boolean canThreadDecoding(Thread t){  ThreadStatus status=mThreadStatus.get(t);  return status == null || (status.mState != State.CANCEL);}  }
class C{  public TournamentSelection(){  this(2);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void encode(InputStream inputStream,OutputStream outputStream,int wrapAt) throws IOException {  Base64OutputStream aux=new Base64OutputStream(outputStream,wrapAt);  copy(inputStream,aux);  aux.commit();}  }
class C{  private boolean assertKeys(){  for (int i=0; i < keys.length; i++) {    for (int j=0; j < keys.length; j++) {      if (i == j) {        continue;      }      assert !keys[i].equals(keys[j]);    }  }  return true;}  }
class C{  public static boolean equals(Object[] array1,Object[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    Object e1=array1[i], e2=array2[i];    if (!(e1 == null ? e2 == null : e1.equals(e2))) {      return false;    }  }  return true;}  }
class C{  public void assign(Capabilities c){  if (doNotCheckCapabilities()) {    return;  }  for (  Capability cap : Capability.values()) {    if (c.handles(cap)) {      enable(cap);    } else {      disable(cap);    }    if (c.hasDependency(cap)) {      enableDependency(cap);    } else {      disableDependency(cap);    }  }  setMinimumNumberInstances(c.getMinimumNumberInstances());}  }
class C{  @POST @Path("/{id}/detach-storage") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) public TaskResourceRep detachStorage(@PathParam("id") URI id) throws DatabaseException {  Cluster cluster=queryObject(Cluster.class,id,true);  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(Cluster.class,id,taskId,ResourceOperationTypeEnum.DETACH_VCENTER_DATACENTER_STORAGE);  ComputeSystemController controller=getController(ComputeSystemController.class,null);  controller.detachClusterStorage(cluster.getId(),false,false,taskId);  return toTask(cluster,taskId,op);}  }
class C{  @Override public void doWork() throws OperatorException {  ExampleSet eSet=exampleSetInput.getData(ExampleSet.class);  eSet.recalculateAllAttributeStatistics();  DataStatistics statistics=new DataStatistics();  Iterator<Attribute> i=eSet.getAttributes().allAttributes();  while (i.hasNext()) {    statistics.addInfo(eSet,i.next());  }  exampleSetOutput.deliver(eSet);  statisticsOutput.deliver(statistics);}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof SoftwareAttribute))   return false;  if (obj == this)   return true;  SoftwareAttribute att=(SoftwareAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || !Arrays.equals(att.software,software))   return false;  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean dirExists(Configuration conf,Path path) throws IOException {  FileSystem fs=FileSystem.get(path.toUri(),conf);  return fs.exists(path) && fs.isDirectory(path);}  }
class C{  public static float noise2(float x,float y){  int bx0, bx1, by0, by1, b00, b10, b01, b11;  float rx0, rx1, ry0, ry1, q[], sx, sy, a, b, t, u, v;  int i, j;  if (start) {    start=false;    init();  }  t=x + N;  bx0=((int)t) & BM;  bx1=(bx0 + 1) & BM;  rx0=t - (int)t;  rx1=rx0 - 1.0f;  t=y + N;  by0=((int)t) & BM;  by1=(by0 + 1) & BM;  ry0=t - (int)t;  ry1=ry0 - 1.0f;  i=p[bx0];  j=p[bx1];  b00=p[i + by0];  b10=p[j + by0];  b01=p[i + by1];  b11=p[j + by1];  sx=sCurve(rx0);  sy=sCurve(ry0);  q=g2[b00];  u=rx0 * q[0] + ry0 * q[1];  q=g2[b10];  v=rx1 * q[0] + ry0 * q[1];  a=lerp(sx,u,v);  q=g2[b01];  u=rx0 * q[0] + ry1 * q[1];  q=g2[b11];  v=rx1 * q[0] + ry1 * q[1];  b=lerp(sx,u,v);  return 1.5f * lerp(sy,a,b);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/deactivate") public TaskList deleteVolumes(BulkDeleteParam volumeURIs,@DefaultValue("false") @QueryParam("force") boolean force,@DefaultValue("FULL") @QueryParam("type") String type) throws InternalException {  BlockService.checkVolumesParameter(volumeURIs);  StorageOSUser user=getUserFromContext();  Iterator<Volume> dbVolumeIter=_dbClient.queryIterativeObjects(getResourceClass(),volumeURIs.getIds());  Set<URI> tenantSet=new HashSet<>();  List<Volume> volumes=new ArrayList<Volume>();  while (dbVolumeIter.hasNext()) {    Volume vol=dbVolumeIter.next();    BlockServiceUtils.validateNotAnInternalBlockObject(vol,force);    if (!_permissionsHelper.userHasGivenRole(user,vol.getTenant().getURI(),Role.TENANT_ADMIN) && !_permissionsHelper.userHasGivenACL(user,vol.getProject().getURI(),ACL.OWN,ACL.ALL)) {      throw APIException.forbidden.insufficientPermissionsForUser(user.getName());    }    tenantSet.add(vol.getTenant().getURI());    volumes.add(vol);  }  if (!force) {    checkForPendingTasks(tenantSet,volumes);  }  String task=UUID.randomUUID().toString();  Map<URI,List<URI>> systemVolumesMap=new HashMap<URI,List<URI>>();  Map<URI,List<TaskResourceRep>> systemTaskResourceRepsMap=new HashMap<URI,List<TaskResourceRep>>();  TaskList taskList=new TaskList();  for (  Volume volume : volumes) {    URI volumeURI=volume.getId();    ArgValidator.checkEntity(volume,volumeURI,isIdEmbeddedInURL(volumeURI));    BlockServiceApi blockServiceApi=getBlockServiceImpl(volume);    if (!volume.isInCG() || !BlockServiceUtils.checkCGVolumeCanBeAddedOrRemoved(null,volume,_dbClient)) {      List<Class<? extends DataObject>> excludeTypes=null;      if (VolumeDeleteTypeEnum.VIPR_ONLY.name().equals(type)) {        excludeTypes=new ArrayList<>();        excludeTypes.add(ExportGroup.class);        excludeTypes.add(ExportMask.class);      }      ArgValidator.checkReference(Volume.class,volumeURI,blockServiceApi.checkForDelete(volume,excludeTypes));    }    if ((!VolumeDeleteTypeEnum.VIPR_ONLY.name().equals(type)) && (!getFullCopyManager().volumeCanBeDeleted(volume))) {      throw APIException.badRequests.cantDeleteFullCopyNotDetached(volume.getLabel());    }  }  for (  Volume volume : volumes) {    URI volumeURI=volume.getId();    boolean forceDeactivate=checkIfVplexVolumeHasActiveAssociatedVolumes(volume);    if (forceDeactivate || (!Strings.isNullOrEmpty(volume.getNativeId()) && !volume.getInactive())) {      URI systemURI=null;      if (!isNullURI(volume.getProtectionController())) {        systemURI=volume.getProtectionController();      } else {        systemURI=volume.getStorageController();      }      Operation op=_dbClient.createTaskOpStatus(Volume.class,volume.getId(),task,ResourceOperationTypeEnum.DELETE_BLOCK_VOLUME);      TaskResourceRep volumeTaskResourceRep=toTask(volume,task,op);      List<URI> systemVolumeURIs=systemVolumesMap.get(systemURI);      if (systemVolumeURIs == null) {        systemVolumeURIs=new ArrayList<URI>();        systemVolumeURIs.add(volumeURI);        systemVolumesMap.put(systemURI,systemVolumeURIs);        List<TaskResourceRep> systemTaskResourceReps=new ArrayList<TaskResourceRep>();        systemTaskResourceReps.add(volumeTaskResourceRep);        systemTaskResourceRepsMap.put(systemURI,systemTaskResourceReps);      } else       if (!systemVolumeURIs.contains(volumeURI)) {        systemVolumeURIs.add(volumeURI);        List<TaskResourceRep> systemTaskResourceReps=systemTaskResourceRepsMap.get(systemURI);        systemTaskResourceReps.add(volumeTaskResourceRep);      }      taskList.getTaskList().add(volumeTaskResourceRep);    } else     if (!volume.getInactive()) {      volume.setInactive(true);      _dbClient.persistObject(volume);    }  }  Iterator<URI> systemsURIIter=systemVolumesMap.keySet().iterator();  while (systemsURIIter.hasNext()) {    URI systemURI=systemsURIIter.next();    try {      List<URI> systemVolumes=systemVolumesMap.get(systemURI);      BlockServiceApi blockServiceApi=getBlockServiceImpl(queryVolumeResource(systemVolumes.get(0)));      blockServiceApi.deleteVolumes(systemURI,systemVolumes,type,task);    } catch (    APIException|InternalException e) {      if (_log.isErrorEnabled()) {        _log.error("Delete error",e);      }      List<TaskResourceRep> systemTaskResourceReps=systemTaskResourceRepsMap.get(systemURI);      for (      TaskResourceRep volumeTask : systemTaskResourceReps) {        volumeTask.setState(Operation.Status.error.name());        volumeTask.setMessage(e.getMessage());        _dbClient.updateTaskOpStatus(Volume.class,volumeTask.getResource().getId(),task,new Operation(Operation.Status.error.name(),e.getMessage()));      }    }  }  auditOp(OperationTypeEnum.DELETE_BLOCK_VOLUME,true,AuditLogManager.AUDITOP_MULTI_BEGIN);  return taskList;}  }
class C{  private URI canonicalize(String uriString) throws URISyntaxException {  if ((uriString == null) || (uriString.compareTo("localhost") == 0)) {    uriString="//localhost";    return new URI(uriString);  }  URI u=new URI(uriString);  if (u.isAbsolute()) {    if (u.isOpaque()) {      String scheme=u.getScheme();      String ssp=u.getSchemeSpecificPart();      String frag=u.getFragment();      URI u2=null;      int c1index=uriString.indexOf(":");      int c2index=uriString.lastIndexOf(":");      if (c2index != c1index) {        if (frag == null) {          u2=new URI(scheme + "://" + ssp);        } else {          u2=new URI(scheme + "://" + ssp+ "#"+ frag);        }        return u2;      }      u2=new URI("//" + uriString);      return u2;    } else {      return u;    }  } else {    String ssp=u.getSchemeSpecificPart();    if (ssp.startsWith("//")) {      return u;    } else {      return new URI("//" + uriString);    }  }}  }
class C{  public final boolean postDelayed(Runnable r,long delayMillis){  return mExec.postDelayed(wrapRunnable(r),delayMillis);}  }
class C{  public boolean isMinYSet(int scale){  return mMinY[scale] != MathHelper.NULL_VALUE;}  }
class C{  public void endDocument() throws SAXException {}  }
class C{  public RC5ParameterSpec(int version,int rounds,int wordSize,byte[] iv,int offset){  if (iv == null) {    throw new IllegalArgumentException("iv == null");  }  if (offset < 0) {    throw new ArrayIndexOutOfBoundsException("offset < 0: " + offset);  }  if (iv.length - offset < 2 * (wordSize / 8)) {    throw new IllegalArgumentException("iv.length - offset < 2 * (wordSize / 8)");  }  this.version=version;  this.rounds=rounds;  this.wordSize=wordSize;  this.iv=new byte[offset + 2 * (wordSize / 8)];  System.arraycopy(iv,offset,this.iv,0,2 * (wordSize / 8));}  }
class C{  public static double[] ecfToENU(double x,double y,double z,final double centerLon,final double centerLat,final double centerAlt,double[] enu){  if (enu == null) {    enu=new double[3];  }  final double[][] phi=createPhiTransform(centerLon,centerLat,null);  final double[] originECF=llaToECF(centerLon,centerLat,centerAlt,null);  final double[] originENU=new double[3];  originENU[0]=((phi[0][0] * originECF[0]) + (phi[0][1] * originECF[1]) + (phi[0][2] * originECF[2]));  originENU[1]=((phi[1][0] * originECF[0]) + (phi[1][1] * originECF[1]) + (phi[1][2] * originECF[2]));  originENU[2]=((phi[2][0] * originECF[0]) + (phi[2][1] * originECF[1]) + (phi[2][2] * originECF[2]));  enu[0]=((phi[0][0] * x) + (phi[0][1] * y) + (phi[0][2] * z)) - originENU[0];  enu[1]=((phi[1][0] * x) + (phi[1][1] * y) + (phi[1][2] * z)) - originENU[1];  enu[2]=((phi[2][0] * x) + (phi[2][1] * y) + (phi[2][2] * z)) - originENU[2];  return enu;}  }
class C{  public static boolean putLong(ContentResolver cr,String name,long value){  return putLongForUser(cr,name,value,UserHandle.myUserId());}  }
class C{  public static boolean isOssBuild(){  return PlatformUtils.isOssBuild();}  }
class C{  public MyArrayList(E[] objects){  for (int i=0; i < objects.length; i++)   add(objects[i]);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttributeNS03.class,args);}  }
class C{  private Object readResolve(){  return this;}  }
class C{  @Transient public boolean isDirty(){  for (  PortfolioAccount item : this.getPortfolioAccounts()) {    if (item.isDirty())     return true;  }  return super.isDirty();}  }
class C{  void deactivate(){  for (  EventCursor cursor : mCursors) {    deactivate(cursor);  }}  }
class C{  public static MessagingMode valueOf(int value){  MessagingMode entry=mValueToEnum.get(value);  if (entry != null) {    return entry;  }  throw new IllegalArgumentException("No enum const class " + MessagingMode.class.getName() + ""+ value);}  }
class C{  public JSONObject put(String key,Object value) throws JSONException {  if (key == null) {    throw new NullPointerException("Null key.");  }  if (value != null) {    testValidity(value);    this.map.put(key,value);  } else {    this.remove(key);  }  return this;}  }
class C{  public void writeComment(String comment) throws Exception {  String text=indenter.top();  if (last == Tag.START) {    append('>');  }  if (text != null) {    append(text);    append(OPEN);    append(comment);    append(CLOSE);  }  last=Tag.COMMENT;}  }
class C{  protected void checkTags(String[] expected,List<String> result){  assertEquals(expected.length,result.size());  for (int i=0; i < expected.length; i++) {    if (!result.contains(expected[i])) {      fail(String.format("No tag with value '%s' found!",expected[i]));    }  }}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  private void keepAnnotated(Path path) throws FileNotFoundException {  for (  ClassPathElement element : path.getElements()) {    forClazz:     for (    String name : element.list()) {      if (name.endsWith(CLASS_EXTENSION)) {        DirectClassFile clazz=path.getClass(name);        if (hasRuntimeVisibleAnnotation(clazz)) {          filesToKeep.add(name);        } else {          MethodList methods=clazz.getMethods();          for (int i=0; i < methods.size(); i++) {            if (hasRuntimeVisibleAnnotation(methods.get(i))) {              filesToKeep.add(name);              continue forClazz;            }          }          FieldList fields=clazz.getFields();          for (int i=0; i < fields.size(); i++) {            if (hasRuntimeVisibleAnnotation(fields.get(i))) {              filesToKeep.add(name);              continue forClazz;            }          }        }      }    }  }}  }
class C{  public ICUTokenizer(ICUTokenizerConfig config){  this(DEFAULT_TOKEN_ATTRIBUTE_FACTORY,config);}  }
class C{  public Map<String,HierachyDBEntry> parse(Resource resource) throws IOException {  if (resource == null) {    throw new NullPointerException("Resource is null");  }  if (!resource.exists()) {    throw new IllegalStateException(resource.getFilename() + " does not exist");  }  if (!resource.isReadable()) {    throw new IllegalStateException(resource.getFilename() + " is not readable");  }  final Map<String,HierachyDBEntry> printsIdToDBEntry=new HashMap<String,HierachyDBEntry>(){  };  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(resource.getInputStream()));    String line;    while ((line=reader.readLine()) != null) {      if (line.contains(COMMENT_CHARACTER)) {        line=line.substring(0,line.indexOf(COMMENT_CHARACTER));      }      final String[] lineElements=line.split("\\|");      if (lineElements.length > 3) {        final String modelId=lineElements[INDEX_MODEL_ID].trim();        final String modelAccession=lineElements[INDEX_MODEL_ACCESSION].trim();        final double evalueCutoff=Double.parseDouble(lineElements[INDEX_EVALUE_CUTTOFF].trim());        final int minimumMotifCount=Integer.parseInt(lineElements[INDEX_MINIMUM_MOTIF_COUNT].trim());        boolean domain=false;        List<String> hierarchy=Collections.emptyList();        if (lineElements.length > 4) {          String siblingListString=lineElements[INDEX_SIBLING_LIST].trim();          if (FINGERPRINT_IS_DOMAIN.equals(siblingListString)) {            domain=true;          } else           if (siblingListString.length() > 0) {            String[] siblingIds=siblingListString.split("\\,");            hierarchy=Arrays.asList(siblingIds);          }        }        printsIdToDBEntry.put(modelAccession,new HierachyDBEntry(modelId,modelAccession,evalueCutoff,minimumMotifCount,hierarchy,domain));      }    }  }  finally {    if (reader != null)     reader.close();  }  return printsIdToDBEntry;}  }
class C{  public Vector4f fma(Vector4fc a,Vector4fc b){  x+=a.x() * b.x();  y+=a.y() * b.y();  z+=a.z() * b.z();  w+=a.w() * b.w();  return this;}  }
class C{  public JoinHeader createJoinHeader(String callId,String toTag,String fromTag) throws ParseException {  Join join=new Join();  join.setCallId(callId);  join.setFromTag(fromTag);  join.setToTag(toTag);  return join;}  }
class C{  private void doInstanceDeletes(EndpointRemovalTaskState currentState,SubStage next){  EndpointState endpoint=currentState.endpoint;  Operation crdOp=Operation.createDelete(this,endpoint.authCredentialsLink);  Operation cdsOp=Operation.createDelete(this,endpoint.computeDescriptionLink);  Operation csOp=Operation.createDelete(this,endpoint.computeLink);  Operation poolOp=Operation.createDelete(this,endpoint.resourcePoolLink);  Operation epOp=Operation.createDelete(this,endpoint.documentSelfLink);  OperationJoin.create(crdOp,cdsOp,csOp,poolOp,epOp).setCompletion(null).sendWith(this);}  }
class C{  public static long parseLong(CharSequence csq,int radix){  Cursor cursor=new Cursor();  long result=parseLong(csq,radix,cursor);  if (!cursor.atEnd(csq))   throw new IllegalArgumentException("Extraneous characters \"" + cursor.tail(csq) + "\"");  return result;}  }
class C{  public FilterRegex(){}  }
class C{  public static PropertyValuesHolder ofObject(String propertyName,TypeEvaluator evaluator,Object... values){  PropertyValuesHolder pvh=new PropertyValuesHolder(propertyName);  pvh.setObjectValues(values);  pvh.setEvaluator(evaluator);  return pvh;}  }
class C{  public static float[] rshift(float[] field,int offset,int size,int shiftCount,boolean expandIfNeeded){  if (field == null) {    throw new IllegalArgumentException("the field argument must not be null");  }  if (offset < 0 || offset >= field.length) {    throw new IllegalArgumentException("the offset argument must be in range 0 >= offset < field.length");  }  size=Math.min(field.length - offset,size);  int to=offset + size + shiftCount;  int from=offset + size;  if (to > field.length) {    if (expandIfNeeded) {      field=expand(field,to,true);    } else {      to=field.length;      from=field.length - shiftCount;    }  }  while (from > offset) {    field[--to]=field[--from];  }  return field;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("DaoStatRow[");  buffer.append("FrId = ").append(m_fdrId);  buffer.append(", ArchId = ").append(m_archId);  buffer.append(", Stat = ").append(m_stat);  buffer.append(", UserId = ").append(m_userId);  buffer.append(", TimeStamp = ").append(m_ts);  buffer.append(", Flags = ").append(m_flags);  buffer.append("]");  return buffer.toString();}  }
class C{  public IStatus invoke(ToolingApiCommand command,IProgressMonitor progressMonitor){  try {    command.run();    return handleSuccess();  } catch (  Throwable t) {    return handleFailure(t);  } finally {    progressMonitor.done();  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public boolean hasBearing(){  return mHasBearing;}  }
class C{  public void shouldThrow(){  fail("Should throw exception");}  }
class C{  public void close() throws java.io.IOException {  flushBuffer();  m_os.close();}  }
class C{  public BerInputStream(byte[] encoded) throws IOException {  this(encoded,0,encoded.length);}  }
class C{  public void selfSub(SquareMatrix s){  if ((rows != s.rows) || (columns != s.columns)) {    throw new IllegalArgumentException("cannot substract a " + s.rows + 'x'+ s.columns+ " matrix from a "+ rows+ 'x'+ columns+ " matrix");  }  for (int index=0; index < rows * columns; ++index) {    data[index]-=s.data[index];  }}  }
class C{  public String concat(String... values){  return StringUtils.join(values);}  }
class C{  public ScopedClassPool create(ClassPool src,ScopedClassPoolRepository repository){  return new ScopedClassPool(null,src,repository,true);}  }
class C{  public Bundler putBooleanArray(String key,boolean[] value){  bundle.putBooleanArray(key,value);  return this;}  }
class C{  public SWFText tagDefineText(int id,Rect bounds,Matrix matrix) throws IOException {  lastBounds=curBounds;  curBounds=bounds;  return new TextDumper();}  }
class C{  public static void orthogonalizeVectors(List<Vector> list){switch (list.get(0).getVectorType()) {case REAL:    RealVectorUtils.orthogonalizeVectors(list);  break;case COMPLEX:ComplexVectorUtils.orthogonalizeVectors(list);break;case BINARY:BinaryVectorUtils.orthogonalizeVectors(list);break;default :throw new IncompatibleVectorsException("Type not recognized: " + list.get(0).getVectorType());}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.255 -0500",hash_original_method="D87C47C2DE06FF746589C19C83F3FD66",hash_generated_method="1D09630F5A69F5EAC7A2799581773E6C") public SIPHeader parse() throws ParseException {  String name=lexer.getNextToken(':');  lexer.consume(1);  String body=lexer.getLine().trim();  ExtensionHeaderImpl retval=new ExtensionHeaderImpl(name);  retval.setValue(body);  return retval;}  }
class C{  public static <S extends HasHoverHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    HoverEvent event=new HoverEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public void testValueOfLongPositive1(){  long longVal=268209772258930018L;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={3,-72,-33,93,-24,-56,45,98};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  protected void exportBoundaryAsLinearRing(XMLStreamWriter xmlWriter,Iterable<? extends LatLon> boundary) throws XMLStreamException {  xmlWriter.writeStartElement("LinearRing");  xmlWriter.writeStartElement("coordinates");  for (  LatLon location : boundary) {    if (location instanceof Position) {      xmlWriter.writeCharacters(String.format(Locale.US,"%f,%f,%f ",location.getLongitude().getDegrees(),location.getLatitude().getDegrees(),((Position)location).getAltitude()));    } else {      xmlWriter.writeCharacters(String.format(Locale.US,"%f,%f ",location.getLongitude().getDegrees(),location.getLatitude().getDegrees()));    }  }  xmlWriter.writeEndElement();  xmlWriter.writeEndElement();}  }
class C{  private static byte[] or(byte[] ip1,byte[] ip2){  byte[] temp=new byte[ip1.length];  for (int i=0; i < ip1.length; i++) {    temp[i]=(byte)(ip1[i] | ip2[i]);  }  return temp;}  }
class C{  public static final Geo isSegmentNearPoly(GeoSegment segment,GeoArray r,double near){  Geo[] s=segment.getSeg();  if (s != null && s.length == 2) {    return isSegmentNearPoly(s[0],s[1],r,near);  }  return null;}  }
class C{  @Override public String generateLabel(XYDataset dataset,int series,int item){  return generateLabelString(dataset,series,item);}  }
class C{  public ReadStreamOld openRead() throws IOException {  if (_isDone)   return null; else   if (_readStream == null)   _readStream=new ReadStreamOld(this); else   if (!_isPartDone) {    int len;    while ((len=read(_dummyBuffer,0,_dummyBuffer.length)) >= 0) {    }    if (_isDone)     return null;  }  _readStream.init(this);  _isPartDone=false;  if (scanHeaders()) {    String contentType=(String)getAttribute("content-type");    String charset=getAttributePart(contentType,"charset");    if (charset != null)     _readStream.setEncoding(charset); else     if (_defaultEncoding != null)     _readStream.setEncoding(_defaultEncoding);    return _readStream;  } else {    _isDone=true;    _readStream.close();    return null;  }}  }
class C{  default boolean handleStoreIndexed(GraphBuilderContext b,ValueNode array,ValueNode index,JavaKind elementKind,ValueNode value){  return false;}  }
class C{  protected TEnumLiteralImpl(){  super();}  }
class C{  public DataTableCellRenderer(Color missingColor,Color missingColorSelected){  this(missingColor,missingColorSelected,Color.RED,Color.RED.darker());}  }
class C{  public static double mean(double... values){  MeanAccumulator accumulator=new MeanAccumulator();  for (  double value : values) {    accumulator.add(value);  }  return accumulator.mean();}  }
class C{  private static int skipWhiteSpace(BitArray row) throws NotFoundException {  int width=row.getSize();  int endStart=row.getNextSet(0);  if (endStart == width) {    throw NotFoundException.getNotFoundInstance();  }  return endStart;}  }
class C{  @Override protected double nov(I i){  return -Math.log(itemCount.getDouble(i) / freeNorm) / ln2;}  }
class C{  private void recycleChildren(RecyclerView.Recycler recycler,int startIndex,int endIndex){  if (startIndex == endIndex) {    return;  }  if (DEBUG) {    Log.d(TAG,"Recycling " + Math.abs(startIndex - endIndex) + " items");  }  if (endIndex > startIndex) {    for (int i=endIndex - 1; i >= startIndex; i--) {      removeAndRecycleViewAt(i,recycler);    }  } else {    for (int i=startIndex; i > endIndex; i--) {      removeAndRecycleViewAt(i,recycler);    }  }}  }
class C{  public void bufferItem(Item catalogItem){  String numberString=catalogItem.getNumberString();  if (!Pattern.matches(Item.NUMBER_REGEX_PATTERN,numberString)) {    getLog().error("Incorrect number: " + numberString);    throw new IllegalArgumentException("Incorrect number: " + numberString);  }  getAllItemMap().put(numberString,catalogItem);}  }
class C{  public static byte[] splitUint8To2bytes(char uint8){  if (uint8 < 0 || uint8 > 0xff) {    throw new RuntimeException("Out of Boundary");  }  String hexString=Integer.toHexString(uint8);  byte low;  byte high;  if (hexString.length() > 1) {    high=(byte)Integer.parseInt(hexString.substring(0,1),16);    low=(byte)Integer.parseInt(hexString.substring(1,2),16);  } else {    high=0;    low=(byte)Integer.parseInt(hexString.substring(0,1),16);  }  byte[] result=new byte[]{high,low};  return result;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.860 -0500",hash_original_method="D2192429514F02BB97F8B55205CB5D4D",hash_generated_method="46098DD1AA981646C8749E2B1102D5BC") public BatteryInfo(){}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append(this.getClass().getSimpleName()).append(":");  sb.append(" XID=").append(XID);  sb.append(" committed=").append(committed);  sb.append(" empty=").append(empty);  sb.append(" startSCN=").append(startSCN);  sb.append(" commitSCN=").append(commitSCN);  sb.append(" startPlogId=").append(startPlogId);  return sb.toString();}  }
class C{  public static void putDouble(long addr,double val){  if (UNALIGNED)   UNSAFE.putDouble(addr,val); else   putLongByByte(addr,Double.doubleToLongBits(val),BIG_ENDIAN);}  }
class C{  public boolean isNativeCommands(){  return getCommandBehavior() == COMMAND_BEHAVIOR_NATIVE;}  }
class C{  public static void main(String[] args){  runFilter(new MergeInfrequentNominalValues(),args);}  }
class C{  public static ExpectedVersion of(int eventNumber){  return new ExpectedVersion(eventNumber);}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TFUNCTION;}  }
class C{  public SPARQLUpdateDataBlockParser(ValueFactory valueFactory){  super(valueFactory);}  }
class C{  public JSONArray put(int index,Collection value) throws JSONException {  put(index,new JSONArray(value));  return this;}  }
class C{  public DragSortController(DragSortListView dslv,int dragHandleId,int dragInitMode,int removeMode,int clickRemoveId,int flingHandleId){  super(dslv);  mDslv=dslv;  mDetector=new GestureDetector(dslv.getContext(),this);  mFlingRemoveDetector=new GestureDetector(dslv.getContext(),mFlingRemoveListener);  mFlingRemoveDetector.setIsLongpressEnabled(false);  mTouchSlop=ViewConfiguration.get(dslv.getContext()).getScaledTouchSlop();  mDragHandleId=dragHandleId;  mClickRemoveId=clickRemoveId;  mFlingHandleId=flingHandleId;  setRemoveMode(removeMode);  setDragInitMode(dragInitMode);}  }
class C{  private void detachVerticalOffScreenChildren(boolean toTop){  int numChildren=getChildCount();  int firstPosition=mFirstPosition;  int start=0;  int count=0;  if (toTop) {    final int galleryTop=getPaddingTop();    for (int i=0; i < numChildren; i++) {      int n=i;      final View child=getChildAt(n);      if (child.getBottom() >= galleryTop) {        break;      } else {        count++;        mRecycler.put(firstPosition + n,child);      }    }  } else {    final int galleryBottom=getHeight() - getPaddingBottom();    for (int i=numChildren - 1; i >= 0; i--) {      int n=i;      final View child=getChildAt(n);      if (child.getTop() <= galleryBottom) {        break;      } else {        start=n;        count++;        mRecycler.put(firstPosition + n,child);      }    }  }  detachViewsFromParent(start,count);  if (toTop) {    mFirstPosition+=count;    if (isScrollCycle()) {      mFirstPosition%=mItemCount;    }  }}  }
class C{  public AppVersion(int major,int minor,int patch,String modifier){  this(major,minor,patch,-1,modifier);}  }
class C{  @Override public int compareTo(Ideas_2011_03_27 that){  if (this.x < that.x)   return Integer.MIN_VALUE;  if (this.x > that.x)   return Integer.MAX_VALUE;  return 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:40.089 -0500",hash_original_method="F5A7ECCEC7D24AC04E83E34652847C55",hash_generated_method="699F071C1CBEEB2E6FEA6030D9D2E614") public boolean supportsSpeed(){  return mSupportsSpeed;}  }
class C{  protected void saveClassifier(String name,Classifier classifier,Instances trainHeader){  File sFile=null;  boolean saveOK=true;  m_FileChooser.removeChoosableFileFilter(m_PMMLModelFilter);  m_FileChooser.setFileFilter(m_ModelFilter);  int returnVal=m_FileChooser.showSaveDialog(this);  if (returnVal == JFileChooser.APPROVE_OPTION) {    sFile=m_FileChooser.getSelectedFile();    if (!sFile.getName().toLowerCase().endsWith(MODEL_FILE_EXTENSION)) {      sFile=new File(sFile.getParent(),sFile.getName() + MODEL_FILE_EXTENSION);    }    m_Log.statusMessage("Saving model to file...");    try {      OutputStream os=new FileOutputStream(sFile);      if (sFile.getName().endsWith(".gz")) {        os=new GZIPOutputStream(os);      }      ObjectOutputStream objectOutputStream=new ObjectOutputStream(os);      objectOutputStream.writeObject(classifier);      trainHeader=trainHeader.stringFreeStructure();      if (trainHeader != null) {        objectOutputStream.writeObject(trainHeader);      }      objectOutputStream.flush();      objectOutputStream.close();    } catch (    Exception e) {      JOptionPane.showMessageDialog(null,e,"Save Failed",JOptionPane.ERROR_MESSAGE);      saveOK=false;    }    if (saveOK) {      m_Log.logMessage("Saved model (" + name + ") to file '"+ sFile.getName()+ "'");    }    m_Log.statusMessage("OK");  }}  }
class C{  protected LanguageFileType(@NotNull final Language language){  myLanguage=language;}  }
class C{  public static boolean isDefaultJmxManagementEnabled(){  return DEFAULT_JMX_MANAGEMENT_ENABLED;}  }
class C{  public Value evaluate(IsURI node,BindingSet bindings) throws ValueExprEvaluationException, QueryEvaluationException {  Value argValue=evaluate(node.getArg(),bindings);  return BooleanLiteral.valueOf(argValue instanceof IRI);}  }
class C{  protected File locateTestFile(){  File testDataStorage=getContext().getFolder(TEST_TASK_INPUT_KEY_TEST_DATA,StorageService.AccessMode.READONLY);  String fileName=new SVMHMMAdapter().getFrameworkFilename(TCMachineLearningAdapter.AdapterNameEntries.featureVectorsFile);  return new File(testDataStorage,fileName);}  }
class C{  private static void checkStoragePoolValidForUnManagedFileSystemUri(StringSetMap unManagedFileSystemInformation,DbClient dbClient,URI unManagedFileSystemUri) throws DatabaseException {  String pool=PropertySetterUtil.extractValueFromStringSet(FileSystemObjectProperties.STORAGE_POOL.toString(),unManagedFileSystemInformation);  if (null == pool) {    throw APIException.internalServerErrors.storagePoolError("","FileSystem",unManagedFileSystemUri);  }  StoragePool poolObj=dbClient.queryObject(StoragePool.class,URI.create(pool));  if (null == poolObj) {    throw APIException.internalServerErrors.noStoragePool(pool,"FileSystem",unManagedFileSystemUri);  }}  }
class C{  @Override public float scorePayload(int doc,int start,int end,BytesRef payload){  return 1;}  }
class C{  @Override public void preExecute(final OperationChain<?> opChain,final User user){  LOGGER.info("Running " + opChain.toString() + " as "+ user.getUserId());}  }
class C{  public boolean isEmpty(){  return end <= start;}  }
class C{  public NamedMapConverter(final Mapper mapper,final String entryName,final String keyName,final Class<?> keyType,final String valueName,final Class<?> valueType){  this(mapper,entryName,keyName,keyType,valueName,valueType,false,false,null);}  }
class C{  public FluentBiFunction<T2,T3,R> partiallyApply(final T1 param){  return new FluentBiFunction<>(PartialApplicator.partial3(param,fn));}  }
class C{  @Override public void validateRestoreSnapshot(BlockSnapshot snapshot,Volume parent){  if (snapshot.getEmName() == null) {    super.validateRestoreSnapshot(snapshot,parent);  }}  }
class C{  @Override public void managerStarted(UpdateManagerEvent e){  makeRunnerIfNeeded();}  }
class C{  public IdentityHashMap(int maxSize){  if (maxSize < 0) {    throw new IllegalArgumentException("maxSize < 0: " + maxSize);  }  size=0;  threshold=getThreshold(maxSize);  elementData=newElementArray(computeElementArraySize());}  }
class C{  private static boolean isJarLinkCorrect(File link,File correctTarget){  if (!Files.isSymbolicLink(link.toPath()))   return false;  Path target=null;  try {    target=Files.readSymbolicLink(link.toPath());  } catch (  IOException e) {    exit("Failed to read symbolic link: " + link.getAbsolutePath(),e);  }  return Files.exists(target) && target.toFile().equals(correctTarget);}  }
class C{  final void refillMetadata() throws IOException {  final int offset=metaBlockOrd * numSkipInfo;  final int metaLongsFP=(int)skipInfo[offset + 1];  final int metaBytesFP=(int)skipInfo[offset + 2];  metaLongsReader.setPosition(metaLongsFP);  for (int j=0; j < longsSize; j++) {    longs[0][j]=skipInfo[offset + 3 + j] + metaLongsReader.readVLong();  }  bytesStart[0]=metaBytesFP;  bytesLength[0]=(int)metaLongsReader.readVLong();  for (int i=1; i < INTERVAL && !metaLongsReader.eof(); i++) {    for (int j=0; j < longsSize; j++) {      longs[i][j]=longs[i - 1][j] + metaLongsReader.readVLong();    }    bytesStart[i]=bytesStart[i - 1] + bytesLength[i - 1];    bytesLength[i]=(int)metaLongsReader.readVLong();  }}  }
class C{  public static RecipePureDaisy registerPureDaisyRecipe(Object input,IBlockState outputState){  return registerPureDaisyRecipe(input,outputState,RecipePureDaisy.DEFAULT_TIME);}  }
class C{  void visitSubroutine(final Label JSR,final long id,final int nbSubroutines){  Label stack=this;  while (stack != null) {    Label l=stack;    stack=l.next;    l.next=null;    if (JSR != null) {      if ((l.status & VISITED2) != 0) {        continue;      }      l.status|=VISITED2;      if ((l.status & RET) != 0) {        if (!l.inSameSubroutine(JSR)) {          Edge e=new Edge();          e.info=l.inputStackTop;          e.successor=JSR.successors.successor;          e.next=l.successors;          l.successors=e;        }      }    } else {      if (l.inSubroutine(id)) {        continue;      }      l.addToSubroutine(id,nbSubroutines);    }    Edge e=l.successors;    while (e != null) {      if ((l.status & Label.JSR) == 0 || e != l.successors.next) {        if (e.successor.next == null) {          e.successor.next=stack;          stack=e.successor;        }      }      e=e.next;    }  }}  }
class C{  private static boolean endsWith(final CharSequence str,final CharSequence suffix,final boolean ignoreCase){  if (str == null || suffix == null) {    return str == null && suffix == null;  }  if (suffix.length() > str.length()) {    return false;  }  final int strOffset=str.length() - suffix.length();  return CharSequenceUtils.regionMatches(str,ignoreCase,strOffset,suffix,0,suffix.length());}  }
class C{  public void removeDistributionLocatorConfig(DistributionLocatorConfig config){  checkReadOnly();  this.locatorConfigs.remove(config);  configChanged();}  }
class C{  static void exceptionTests(NetworkInterface nif) throws IOException {  System.out.println("Exception Tests");  DatagramChannel dc=DatagramChannel.open(StandardProtocolFamily.INET).setOption(StandardSocketOptions.SO_REUSEADDR,true).bind(new InetSocketAddress(0));  InetAddress group=InetAddress.getByName("225.4.5.6");  InetAddress notGroup=InetAddress.getByName("1.2.3.4");  InetAddress thisHost=InetAddress.getLocalHost();  MembershipKey key;  key=dc.join(group,nif);  try {    dc.join(group,nif,thisHost);    throw new RuntimeException("IllegalStateException not thrown");  } catch (  IllegalStateException x) {  }catch (  UnsupportedOperationException x) {  }  key.drop();  try {    key=dc.join(group,nif,thisHost);    try {      dc.join(group,nif);      throw new RuntimeException("IllegalStateException not thrown");    } catch (    IllegalStateException x) {    }    key.drop();  } catch (  UnsupportedOperationException x) {  }  try {    dc.join(notGroup,nif);    throw new RuntimeException("IllegalArgumentException not thrown");  } catch (  IllegalArgumentException x) {  }  try {    dc.join(notGroup,nif,thisHost);    throw new RuntimeException("IllegalArgumentException not thrown");  } catch (  IllegalArgumentException x) {  }catch (  UnsupportedOperationException x) {  }  try {    dc.join(null,nif);    throw new RuntimeException("NullPointerException not thrown");  } catch (  NullPointerException x) {  }  try {    dc.join(group,null);    throw new RuntimeException("NullPointerException not thrown");  } catch (  NullPointerException x) {  }  try {    dc.join(group,nif,null);    throw new RuntimeException("NullPointerException not thrown");  } catch (  NullPointerException x) {  }catch (  UnsupportedOperationException x) {  }  dc.close();  try {    dc.join(group,nif);    throw new RuntimeException("ClosedChannelException not thrown");  } catch (  ClosedChannelException x) {  }  try {    dc.join(group,nif,thisHost);    throw new RuntimeException("ClosedChannelException not thrown");  } catch (  ClosedChannelException x) {  }catch (  UnsupportedOperationException x) {  }}  }
class C{  public static CstLong make(long value){  return new CstLong(value);}  }
class C{  private Paint createTitleBarGradient(Shape s,int titleHeight,FourColors defColors){  Rectangle2D bounds=s.getBounds2D();  float midX=(float)bounds.getCenterX();  float y=(float)bounds.getY();  float h=(float)bounds.getHeight();  return createGradient(midX,y,midX,y + h,new float[]{0.0f,1.0f},new Color[]{defColors.top,defColors.upperMid});}  }
class C{  public LibraryLocation(IPath libraryPath,IPath sourcePath,IPath packageRoot,URL javadocLocation,URL indexLocation){  if (libraryPath == null) {    throw new IllegalArgumentException("library cannot be null");  }  fSystemLibrary=libraryPath;  fSystemLibrarySource=sourcePath;  fPackageRootPath=packageRoot;  fJavadocLocation=javadocLocation;  fIndexLocation=indexLocation;}  }
class C{  public DrawerBuilder withOnDrawerNavigationListener(@NonNull Drawer.OnDrawerNavigationListener onDrawerNavigationListener){  this.mOnDrawerNavigationListener=onDrawerNavigationListener;  return this;}  }
class C{  private boolean dispatchLongPress(View view,int position,long id){  boolean handled=false;  if (mOnItemLongClickListener != null) {    handled=mOnItemLongClickListener.onItemLongClick(this,mDownTouchView,mDownTouchPosition,id);  }  if (!handled) {    mContextMenuInfo=new AdapterContextMenuInfo(view,position,id);    handled=super.showContextMenuForChild(this);  }  if (handled) {    performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);  }  return handled;}  }
class C{  public Character(char value){}  }
class C{  public void addOpScore(final Class<? extends Operation> opClass,final Integer score){  operationScores.put(opClass,score);}  }
class C{  @Field(32) public __VARIANT_NAME_3_union cVal(byte cVal){  this.io.setByteField(this,32,cVal);  return this;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tTurn on debugging output.","D",0,"-D"));  newVector.addElement(new Option("\tSilent mode - prints nothing to stdout.","S",0,"-S"));  newVector.addElement(new Option("\tThe number of instances in the datasets (default 100).","N",1,"-N <num>"));  newVector.addElement(new Option("\tFull name of the estimator analysed.\n" + "\teg: weka.estimators.NormalEstimator","W",1,"-W"));  if ((m_Estimator != null) && (m_Estimator instanceof OptionHandler)) {    newVector.addElement(new Option("","",0,"\nOptions specific to estimator " + m_Estimator.getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)m_Estimator).listOptions()));  }  return newVector.elements();}  }
class C{  public int numDataNodes(){  return numDataNodes(rootNode);}  }
class C{  public void mousePressed(MouseEvent e){  getHandler().mousePressed(e);}  }
class C{  public Intersection(LatLonPoint loc,RoadLayer layer){  this(loc,getLatLonPointName(loc),layer);}  }
class C{  public boolean handleToken(JsonParser jp,DeserializationContext ctxt,String propName,Object bean) throws IOException, JsonProcessingException {  Integer I=_nameToPropertyIndex.get(propName);  if (I == null) {    return false;  }  int index=I.intValue();  ExtTypedProperty prop=_properties[index];  boolean canDeserialize;  if (prop.hasTypePropertyName(propName)) {    _typeIds[index]=jp.getText();    jp.skipChildren();    canDeserialize=(bean != null) && (_tokens[index] != null);  } else {    TokenBuffer tokens=new TokenBuffer(jp.getCodec());    tokens.copyCurrentStructure(jp);    _tokens[index]=tokens;    canDeserialize=(bean != null) && (_typeIds[index] != null);  }  if (canDeserialize) {    _deserialize(jp,ctxt,bean,index);    _typeIds[index]=null;    _tokens[index]=null;  }  return true;}  }
class C{  public void startDozing(){  forcePoke();  mHasTriggered=false;}  }
class C{  public static LinkedHashMap<String,Revisions> select(String host,Integer depth,final Order order,int maxcount,State state){  LinkedHashMap<String,Revisions> result=new LinkedHashMap<>();  if (state == State.INVENTORY || state == State.ANY)   result.putAll(inventory.select(host,depth,order,maxcount));  if (state == State.ARCHIVE || state == State.ANY)   result.putAll(archive.select(host,depth,order,maxcount));  return result;}  }
class C{  public AttributedString toAttributedString(){switch (count) {case 0:    return null;case 1:  return new AttributedString((String)strings.get(0),(Map)attributes.get(0));}StringBuffer sb=new StringBuffer(strings.size() * 5);Iterator it=strings.iterator();while (it.hasNext()) {sb.append((String)it.next());}AttributedString result=new AttributedString(sb.toString());Iterator sit=strings.iterator();Iterator ait=attributes.iterator();int idx=0;while (sit.hasNext()) {String s=(String)sit.next();int nidx=idx + s.length();Map m=(Map)ait.next();Iterator kit=m.keySet().iterator();Iterator vit=m.values().iterator();while (kit.hasNext()) {  Attribute attr=(Attribute)kit.next();  Object val=vit.next();  result.addAttribute(attr,val,idx,nidx);}idx=nidx;}return result;}  }
class C{  private String buildQuerySelectionClause(){switch (mFragmentId) {case Common.ARTISTS_FLIPPED_FRAGMENT:    mQuerySelection=" AND " + DBAccessHelper.SONG_ARTIST + "=";  break;case Common.ALBUM_ARTISTS_FLIPPED_FRAGMENT:mQuerySelection=" AND " + DBAccessHelper.SONG_ALBUM_ARTIST + "=";break;case Common.ALBUMS_FLIPPED_FRAGMENT:mQuerySelection=" AND " + DBAccessHelper.SONG_ALBUM + "=";case Common.GENRES_FLIPPED_FRAGMENT:mQuerySelection=" AND " + DBAccessHelper.SONG_GENRE + "=";break;}mQuerySelection+="'" + mHeaderText.replace("'","''") + "'";return mQuerySelection;}  }
class C{  public static String toCommonName(String className,Category category){switch (category) {case BEHAVIOR:case COMPONENT:case CONTROLLER:case FIXTURE:case HELPER:case SHELL:case TABLE:case TASK:case TEST_CASE:case VIEW:case VIEW_CELL:    String regex=category.getSuffix().concat("$");  return className.replaceAll(regex,"");default :return className;}}  }
class C{  public Object options(){  return options;}  }
class C{  public static int round2(double d){  return (int)(d * 100 + 0.5);}  }
class C{  private void addClient(Client client){  clientMap.put(client.registrationToken,client);}  }
class C{  private void dynInit(boolean createNew){  fillResourceType();  fillResource();  fieldResourceType.addActionListener(this);  fieldResource.addActionListener(this);  fieldDate.setValue(m_dateFrom);  fieldDate.addActionListener(this);  bPrevious.addActionListener(this);  bNext.addActionListener(this);  daySchedule.setCreateNew(createNew);  weekSchedule.setCreateNew(createNew);  monthSchedule.setCreateNew(createNew);  confirmPanel.addActionListener(this);  displayCalendar();}  }
class C{  public void reload(String name){  name=checkDefault(name);  SolrCore core=solrCores.getCoreFromAnyList(name,false);  if (core == null)   throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"No such core: " + name);  CoreDescriptor cd=core.getCoreDescriptor();  try {    solrCores.waitAddPendingCoreOps(name);    ConfigSet coreConfig=coreConfigService.getConfig(cd);    log.info("Reloading SolrCore '{}' using configuration from {}",cd.getName(),coreConfig.getName());    SolrCore newCore=core.reload(coreConfig);    registerCore(name,newCore,false);  } catch (  Exception e) {    coreInitFailures.put(cd.getName(),new CoreLoadFailure(cd,e));    throw new SolrException(ErrorCode.SERVER_ERROR,"Unable to reload core [" + cd.getName() + "]",e);  } finally {    solrCores.removeFromPendingOps(name);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:10.438 -0400",hash_original_method="39930FDA5342EF3BF594134D02427635",hash_generated_method="BC4F21C4DD9B4A4F9A2DE81FDF98CDBB") static void exportPrefs(Preferences prefs,OutputStream stream,boolean withSubTree) throws IOException, BackingStoreException {  indent=-1;  BufferedWriter out=new BufferedWriter(new OutputStreamWriter(stream,"UTF-8"));  out.write(HEADER);  out.newLine();  out.newLine();  out.write(DOCTYPE);  out.write(" '");  out.write(PREFS_DTD_NAME);  out.write("'>");  out.newLine();  out.newLine();  flushStartTag("preferences",new String[]{"EXTERNAL_XML_VERSION"},new String[]{String.valueOf(XML_VERSION)},out);  flushStartTag("root",new String[]{"type"},new String[]{prefs.isUserNode() ? "user" : "system"},out);  flushEmptyElement("map",out);  StringTokenizer ancestors=new StringTokenizer(prefs.absolutePath(),"/");  exportNode(ancestors,prefs,withSubTree,out);  flushEndTag("root",out);  flushEndTag("preferences",out);  out.flush();  out=null;}  }
class C{  public static boolean addCraftingRecipe(ItemStack aResult,Object[] aRecipe){  return addCraftingRecipe(aResult,0,aRecipe);}  }
class C{  protected final void threeValueFPCmp(Instruction s){  RegisterOperand one=(RegisterOperand)Binary.getClearVal1(s);  RegisterOperand two=(RegisterOperand)Binary.getClearVal2(s);  RegisterOperand res=Binary.getClearResult(s);  RegisterOperand temp=burs.ir.regpool.makeTempInt();  Register FP0=burs.ir.regpool.getPhysicalRegisterSet().getFPR(0);  if ((s.operator() == DOUBLE_CMPL) || (s.operator() == FLOAT_CMPL)) {    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,temp,IC(0))));    EMIT(CPOS(s,MIR_Move.create(IA32_FMOV,new RegisterOperand(FP0,TypeReference.Int),one)));    EMIT(CPOS(s,MIR_Compare.create(IA32_FCOMI,new RegisterOperand(FP0,TypeReference.Int),two)));    EMIT(CPOS(s,MIR_Set.create(IA32_SET__B,res,IA32ConditionOperand.LGT())));    EMIT(MIR_Unary.mutate(s,IA32_MOVZX__B,res.copyRO(),res.copyRO()));    EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SBB,temp.copyRO(),temp.copyRO())));  } else {    RegisterOperand temp2=burs.ir.regpool.makeTempInt();    EMIT(CPOS(s,MIR_Move.create(IA32_FMOV,new RegisterOperand(FP0,TypeReference.Int),one)));    EMIT(CPOS(s,MIR_Compare.create(IA32_FCOMI,new RegisterOperand(FP0,TypeReference.Int),two)));    EMIT(CPOS(s,MIR_Set.create(IA32_SET__B,temp,IA32ConditionOperand.PO())));    EMIT(CPOS(s,MIR_Set.create(IA32_SET__B,res,IA32ConditionOperand.LGT())));    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,temp2,temp.copyRO())));    EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SBB,temp.copyRO(),IC(0))));    EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_OR,res.copyRO(),temp2.copyRO())));  }  EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_OR,res.copyRO(),temp.copyRO())));  EMIT(MIR_Unary.mutate(s,IA32_MOVSX__B,res.copyRO(),res.copyRO()));}  }
class C{  private long overflowFree(long delay){  Delayed head=(Delayed)super.getQueue().peek();  if (head != null) {    long headDelay=head.getDelay(NANOSECONDS);    if (headDelay < 0 && (delay - headDelay < 0))     delay=Long.MAX_VALUE + headDelay;  }  return delay;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (multilineComment_1: ");  result.append(multilineComment_1);  result.append(')');  return result.toString();}  }
class C{  private void appendUploadedEntryToLog(String id) throws IOException {  FileWriter writer=new FileWriter(mLogfile,true);  StringBuilder sb=new StringBuilder();  sb.append(System.currentTimeMillis() / 1000);  sb.append(",");  sb.append(id);  sb.append('\n');  try {    writer.write(sb.toString());  }  finally {    writer.close();  }}  }
class C{  private void processLDU(LDUMessage ldu){  broadcast(new DecoderStateEvent(this,Event.CONTINUATION,State.CALL));  if (mCurrentCallEvent == null) {    mCurrentCallEvent=new P25CallEvent.Builder(CallEventType.CALL).aliasList(getAliasList()).channel(mCurrentChannel).frequency(mCurrentChannelFrequency).build();    broadcast(mCurrentCallEvent);  }  if (ldu instanceof LDU1Message) {switch (((LDU1Message)ldu).getOpcode()) {case ADJACENT_SITE_STATUS_BROADCAST:      if (ldu instanceof module.decode.p25.message.ldu.lc.AdjacentSiteStatusBroadcast) {        IAdjacentSite ias=(IAdjacentSite)ldu;        mNeighborMap.put(ias.getUniqueID(),ias);        updateSystem(ias.getSystemID());      } else {        logAlternateVendorMessage(ldu);      }    break;case ADJACENT_SITE_STATUS_BROADCAST_EXPLICIT:  if (ldu instanceof module.decode.p25.message.ldu.lc.AdjacentSiteStatusBroadcastExplicit) {    IAdjacentSite ias=(IAdjacentSite)ldu;    mNeighborMap.put(ias.getUniqueID(),ias);    updateSystem(ias.getSystemID());  } else {    logAlternateVendorMessage(ldu);  }break;case CALL_ALERT:if (ldu instanceof module.decode.p25.message.ldu.lc.CallAlert) {module.decode.p25.message.ldu.lc.CallAlert ca=(module.decode.p25.message.ldu.lc.CallAlert)ldu;broadcast(new P25CallEvent.Builder(CallEventType.PAGE).aliasList(getAliasList()).from(ca.getSourceAddress()).to(ca.getTargetAddress()).details("CALL ALERT").build());} else {logAlternateVendorMessage(ldu);}break;case CALL_TERMINATION_OR_CANCELLATION:broadcast(new DecoderStateEvent(this,Event.END,State.FADE));mCurrentCallEvent=null;if (!(ldu instanceof CallTermination)) {logAlternateVendorMessage(ldu);}break;case CHANNEL_IDENTIFIER_UPDATE:break;case CHANNEL_IDENTIFIER_UPDATE_EXPLICIT:break;case EXTENDED_FUNCTION_COMMAND:if (ldu instanceof module.decode.p25.message.ldu.lc.ExtendedFunctionCommand) {module.decode.p25.message.ldu.lc.ExtendedFunctionCommand efc=(module.decode.p25.message.ldu.lc.ExtendedFunctionCommand)ldu;broadcast(new P25CallEvent.Builder(CallEventType.COMMAND).aliasList(getAliasList()).to(efc.getTargetAddress()).details("FUNCTION:" + efc.getExtendedFunction().getLabel() + " ARG:"+ efc.getArgument()).build());} else {logAlternateVendorMessage(ldu);}break;case GROUP_AFFILIATION_QUERY:if (mChannelType == ChannelType.STANDARD && ldu instanceof module.decode.p25.message.ldu.lc.GroupAffiliationQuery) {module.decode.p25.message.ldu.lc.GroupAffiliationQuery gaq=(module.decode.p25.message.ldu.lc.GroupAffiliationQuery)ldu;broadcast(new P25CallEvent.Builder(CallEventType.QUERY).aliasList(getAliasList()).details("GROUP AFFILIATION QUERY").from(gaq.getSourceAddress()).to(gaq.getTargetAddress()).build());} else {logAlternateVendorMessage(ldu);}break;case GROUP_VOICE_CHANNEL_UPDATE:if (ldu instanceof module.decode.p25.message.ldu.lc.GroupVoiceChannelUpdate) {module.decode.p25.message.ldu.lc.GroupVoiceChannelUpdate gvcu=(module.decode.p25.message.ldu.lc.GroupVoiceChannelUpdate)ldu;String userA=gvcu.getGroupAddressA();String userB=gvcu.getGroupAddressB();if (mChannelType == ChannelType.STANDARD) {if (!mCallDetectTalkgroups.contains(userA)) {broadcast(new P25CallEvent.Builder(CallEventType.CALL_DETECT).aliasList(getAliasList()).channel(gvcu.getChannelA()).details((gvcu.isEncrypted() ? "ENCRYPTED" : "")).frequency(gvcu.getDownlinkFrequencyA()).to(userA).build());mCallDetectTalkgroups.add(userA);}if (userB != null && !userB.contentEquals("0000") && !mCallDetectTalkgroups.contains(userB)) {broadcast(new P25CallEvent.Builder(CallEventType.CALL_DETECT).aliasList(getAliasList()).channel(gvcu.getChannelB()).details((gvcu.isEncrypted() ? "ENCRYPTED" : "")).frequency(gvcu.getDownlinkFrequencyB()).to(userB).build());mCallDetectTalkgroups.add(userB);}}} else {logAlternateVendorMessage(ldu);}break;case GROUP_VOICE_CHANNEL_UPDATE_EXPLICIT:if (ldu instanceof module.decode.p25.message.ldu.lc.GroupVoiceChannelUpdateExplicit) {module.decode.p25.message.ldu.lc.GroupVoiceChannelUpdateExplicit gvcue=(module.decode.p25.message.ldu.lc.GroupVoiceChannelUpdateExplicit)ldu;String group=gvcue.getGroupAddress();if (mChannelType == ChannelType.STANDARD) {if (!mCallDetectTalkgroups.contains(group)) {broadcast(new P25CallEvent.Builder(CallEventType.CALL_DETECT).aliasList(getAliasList()).channel(gvcue.getTransmitChannel()).details((gvcue.isEncrypted() ? "ENCRYPTED" : "")).frequency(gvcue.getDownlinkFrequency()).to(group).build());mCallDetectTalkgroups.add(group);}}} else {logAlternateVendorMessage(ldu);}break;case GROUP_VOICE_CHANNEL_USER:if (ldu instanceof module.decode.p25.message.ldu.lc.GroupVoiceChannelUser) {module.decode.p25.message.ldu.lc.GroupVoiceChannelUser gvcuser=(module.decode.p25.message.ldu.lc.GroupVoiceChannelUser)ldu;updateFrom(gvcuser.getSourceAddress());updateTo(gvcuser.getGroupAddress());if (mChannelType == ChannelType.STANDARD) {if (mCurrentCallEvent.getCallEventType() != CallEventType.GROUP_CALL) {mCurrentCallEvent.setCallEventType(CallEventType.GROUP_CALL);broadcast(mCurrentCallEvent);}if (mCurrentCallEvent.getDetails() == null) {mCurrentCallEvent.setDetails((gvcuser.isEncrypted() ? "ENCRYPTED " : "") + (gvcuser.isEmergency() ? "EMERGENCY " : ""));broadcast(mCurrentCallEvent);}}} else {logAlternateVendorMessage(ldu);}break;case MESSAGE_UPDATE:if (ldu instanceof module.decode.p25.message.ldu.lc.MessageUpdate) {module.decode.p25.message.ldu.lc.MessageUpdate mu=(module.decode.p25.message.ldu.lc.MessageUpdate)ldu;broadcast(new P25CallEvent.Builder(CallEventType.SDM).aliasList(getAliasList()).from(mu.getSourceAddress()).to(mu.getTargetAddress()).details("MSG: " + mu.getShortDataMessage()).build());} else {logAlternateVendorMessage(ldu);}break;case NETWORK_STATUS_BROADCAST:if (ldu instanceof module.decode.p25.message.ldu.lc.NetworkStatusBroadcast) {updateSystem(((module.decode.p25.message.ldu.lc.NetworkStatusBroadcast)ldu).getSystem());} else {logAlternateVendorMessage(ldu);}break;case NETWORK_STATUS_BROADCAST_EXPLICIT:if (ldu instanceof module.decode.p25.message.ldu.lc.NetworkStatusBroadcastExplicit) {updateSystem(((module.decode.p25.message.ldu.lc.NetworkStatusBroadcastExplicit)ldu).getSystem());} else {logAlternateVendorMessage(ldu);}break;case PROTECTION_PARAMETER_BROADCAST:if (ldu instanceof module.decode.p25.message.ldu.lc.ProtectionParameterBroadcast) {module.decode.p25.message.ldu.lc.ProtectionParameterBroadcast ppb=(module.decode.p25.message.ldu.lc.ProtectionParameterBroadcast)ldu;broadcast(new P25CallEvent.Builder(CallEventType.COMMAND).aliasList(getAliasList()).to(ppb.getTargetAddress()).details("ENCRYPTION: " + ppb.getEncryption().name() + " KEY:"+ ppb.getEncryptionKey()).build());} else {logAlternateVendorMessage(ldu);}break;case RFSS_STATUS_BROADCAST:if (ldu instanceof module.decode.p25.message.ldu.lc.RFSSStatusBroadcast) {module.decode.p25.message.ldu.lc.RFSSStatusBroadcast rfsssb=(module.decode.p25.message.ldu.lc.RFSSStatusBroadcast)ldu;updateSystem(rfsssb.getSystem());String site=rfsssb.getRFSubsystemID() + "-" + rfsssb.getSiteID();updateSite(site);} else {logAlternateVendorMessage(ldu);}break;case RFSS_STATUS_BROADCAST_EXPLICIT:if (ldu instanceof module.decode.p25.message.ldu.lc.RFSSStatusBroadcastExplicit) {module.decode.p25.message.ldu.lc.RFSSStatusBroadcastExplicit rfsssbe=(module.decode.p25.message.ldu.lc.RFSSStatusBroadcastExplicit)ldu;String site=rfsssbe.getRFSubsystemID() + "-" + rfsssbe.getSiteID();updateSite(site);} else {logAlternateVendorMessage(ldu);}break;case SECONDARY_CONTROL_CHANNEL_BROADCAST:if (ldu instanceof module.decode.p25.message.ldu.lc.SecondaryControlChannelBroadcast) {module.decode.p25.message.ldu.lc.SecondaryControlChannelBroadcast sccb=(module.decode.p25.message.ldu.lc.SecondaryControlChannelBroadcast)ldu;String site=sccb.getRFSubsystemID() + "-" + sccb.getSiteID();updateSite(site);} else {logAlternateVendorMessage(ldu);}break;case SECONDARY_CONTROL_CHANNEL_BROADCAST_EXPLICIT:if (ldu instanceof module.decode.p25.message.ldu.lc.SecondaryControlChannelBroadcastExplicit) {module.decode.p25.message.ldu.lc.SecondaryControlChannelBroadcastExplicit sccb=(module.decode.p25.message.ldu.lc.SecondaryControlChannelBroadcastExplicit)ldu;String site=sccb.getRFSubsystemID() + "-" + sccb.getSiteID();updateSite(site);} else {logAlternateVendorMessage(ldu);}break;case STATUS_QUERY:if (ldu instanceof module.decode.p25.message.ldu.lc.StatusQuery) {module.decode.p25.message.ldu.lc.StatusQuery sq=(module.decode.p25.message.ldu.lc.StatusQuery)ldu;broadcast(new P25CallEvent.Builder(CallEventType.QUERY).aliasList(getAliasList()).details("STATUS QUERY").from(sq.getSourceAddress()).to(sq.getTargetAddress()).build());} else {logAlternateVendorMessage(ldu);}break;case STATUS_UPDATE:if (ldu instanceof module.decode.p25.message.ldu.lc.StatusUpdate) {module.decode.p25.message.ldu.lc.StatusUpdate su=(module.decode.p25.message.ldu.lc.StatusUpdate)ldu;broadcast(new P25CallEvent.Builder(CallEventType.STATUS).aliasList(getAliasList()).details("STATUS UNIT:" + su.getUnitStatus() + " USER:"+ su.getUserStatus()).from(su.getSourceAddress()).to(su.getTargetAddress()).build());} else {logAlternateVendorMessage(ldu);}break;case SYSTEM_SERVICE_BROADCAST:break;case TELEPHONE_INTERCONNECT_ANSWER_REQUEST:if (ldu instanceof module.decode.p25.message.ldu.lc.TelephoneInterconnectAnswerRequest) {module.decode.p25.message.ldu.lc.TelephoneInterconnectAnswerRequest tiar=(module.decode.p25.message.ldu.lc.TelephoneInterconnectAnswerRequest)ldu;broadcast(new P25CallEvent.Builder(CallEventType.PAGE).aliasList(getAliasList()).from(tiar.getTelephoneNumber()).to(tiar.getTargetAddress()).details("TELEPHONE CALL ALERT").build());} else {logAlternateVendorMessage(ldu);}break;case TELEPHONE_INTERCONNECT_VOICE_CHANNEL_USER:if (mChannelType == ChannelType.STANDARD && ldu instanceof TelephoneInterconnectVoiceChannelUser) {TelephoneInterconnectVoiceChannelUser tivcu=(TelephoneInterconnectVoiceChannelUser)ldu;updateTo(tivcu.getAddress());if (mCurrentCallEvent.getCallEventType() != CallEventType.TELEPHONE_INTERCONNECT) {mCurrentCallEvent.setCallEventType(CallEventType.TELEPHONE_INTERCONNECT);broadcast(mCurrentCallEvent);}if (mCurrentCallEvent.getDetails() == null) {mCurrentCallEvent.setDetails((tivcu.isEncrypted() ? "ENCRYPTED " : "") + (tivcu.isEmergency() ? "EMERGENCY " : ""));broadcast(mCurrentCallEvent);}} else {logAlternateVendorMessage(ldu);}break;case UNIT_AUTHENTICATION_COMMAND:if (ldu instanceof module.decode.p25.message.ldu.lc.UnitAuthenticationCommand) {module.decode.p25.message.ldu.lc.UnitAuthenticationCommand uac=(module.decode.p25.message.ldu.lc.UnitAuthenticationCommand)ldu;broadcast(new P25CallEvent.Builder(CallEventType.COMMAND).aliasList(getAliasList()).to(uac.getCompleteTargetAddress()).details("AUTHENTICATE").build());} else {logAlternateVendorMessage(ldu);}break;case UNIT_REGISTRATION_COMMAND:if (ldu instanceof module.decode.p25.message.ldu.lc.UnitRegistrationCommand) {module.decode.p25.message.ldu.lc.UnitRegistrationCommand urc=(module.decode.p25.message.ldu.lc.UnitRegistrationCommand)ldu;broadcast(new P25CallEvent.Builder(CallEventType.COMMAND).aliasList(getAliasList()).to(urc.getCompleteTargetAddress()).details("REGISTER").build());} else {logAlternateVendorMessage(ldu);}break;case UNIT_TO_UNIT_ANSWER_REQUEST:if (ldu instanceof module.decode.p25.message.ldu.lc.UnitToUnitAnswerRequest) {module.decode.p25.message.ldu.lc.UnitToUnitAnswerRequest uuar=(module.decode.p25.message.ldu.lc.UnitToUnitAnswerRequest)ldu;broadcast(new P25CallEvent.Builder(CallEventType.PAGE).aliasList(getAliasList()).from(uuar.getSourceAddress()).to(uuar.getTargetAddress()).details("UNIT TO UNIT CALL ALERT").build());} else {logAlternateVendorMessage(ldu);}break;case UNIT_TO_UNIT_VOICE_CHANNEL_USER:if (mChannelType == ChannelType.STANDARD && ldu instanceof UnitToUnitVoiceChannelUser) {UnitToUnitVoiceChannelUser uuvcu=(UnitToUnitVoiceChannelUser)ldu;updateFrom(uuvcu.getSourceAddress());updateTo(uuvcu.getTargetAddress());if (mCurrentCallEvent.getCallEventType() != CallEventType.UNIT_TO_UNIT_CALL) {mCurrentCallEvent.setCallEventType(CallEventType.UNIT_TO_UNIT_CALL);broadcast(mCurrentCallEvent);}if (mCurrentCallEvent.getDetails() == null) {mCurrentCallEvent.setDetails((uuvcu.isEncrypted() ? "ENCRYPTED " : "") + (uuvcu.isEmergency() ? "EMERGENCY " : ""));broadcast(mCurrentCallEvent);}} else {logAlternateVendorMessage(ldu);}break;default :break;}}}  }
class C{  public T caseS_Loop(S_Loop object){  return null;}  }
class C{  private void createClientServerConfiguration(){  int PORT1=((Integer)server1.invoke(null)).intValue();  client1.invoke(null);}  }
class C{  public void clear(){  for (int i=0; i < this.getSeriesCount(); i++) {    this.getSeries(i).clear();  }}  }
class C{  public static LuaTable bind(Class<? extends LibFunction> factory,String[] methods){  LuaTable env=new LuaTable();  try {    if (methods != null) {      for (int i=0; i < methods.length; i++) {        LibFunction f=factory.newInstance();        f.opcode=i;        f.method=null;        f.name=methods[i];        env.set(f.name,f);      }    }  } catch (  Exception e) {    throw new LuaError("[Bind Failed] " + e);  } finally {    return env;  }}  }
class C{  public void onStop(){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onStop();    }  }}  }
class C{  @Override public final void addSourceAndAnalysisGroup(String sourceId,int analysisGroup) throws AdeException {  if (!hasSource(sourceId)) {    getOrAddSource(sourceId);    setAnalysisGroup(sourceId,analysisGroup);  }}  }
class C{  public static double sizeOfArea(final Area area){  final Dimension d=area.getBounds().getSize();  return d.getHeight() * d.getWidth();}  }
class C{  public Vector2 nor(){  float len=len();  if (len != 0) {    x/=len;    y/=len;  }  return this;}  }
class C{  public boolean containsOrRemoved(String message){  return getMessage(message,true) != null;}  }
class C{  public void printCharacters(char[] ca) throws IOException {  for (int i=0; i < ca.length; i++) {    printCharacter(ca[i]);  }}  }
class C{  void doRatioCurve(java.awt.event.ActionEvent e){  double first=_cvMap.get(cvList[0]).getValue();  if (first < 1.) {    first=1.;  }  double last=_cvMap.get(cvList[nValues - 1]).getValue();  if (last < first + 1) {    last=first + 1.;  }  double step=Math.log(last / first) / (nValues - 1);  log.debug("log ratio step is " + step);  _cvMap.get(cvList[0]).setValue((int)Math.round(last));  for (int i=0; i < nValues; i++) {    int value=(int)(Math.floor(first * Math.exp(step * i)));    _cvMap.get(cvList[i]).setValue(value);  }}  }
class C{  @Override public void close() throws IOException {  if (closed.compareAndSet(false,true)) {    if (Files.exists(path)) {      MoreFiles.deleteRecursive(path);    }  }}  }
class C{  public AlipayBuilder email(String email){  alipay.email=email;  return this;}  }
class C{  private void recruitPlayerCSV(String line,boolean isRedshirt){  String[] playerInfo=line.split(",");  int durability;  if (playerInfo.length >= 11)   durability=Integer.parseInt(playerInfo[10]); else   durability=(int)(50 + 50 * Math.random());  if (playerInfo[0].equals("QB")) {    if (playerInfo.length >= 22)     teamQBs.add(new PlayerQB(playerInfo[1],this,Integer.parseInt(playerInfo[2]),Integer.parseInt(playerInfo[3]),Integer.parseInt(playerInfo[4]),Integer.parseInt(playerInfo[5]),Integer.parseInt(playerInfo[6]),Integer.parseInt(playerInfo[7]),isRedshirt,durability,Integer.parseInt(playerInfo[11]),Integer.parseInt(playerInfo[12]),Integer.parseInt(playerInfo[13]),Integer.parseInt(playerInfo[14]),Integer.parseInt(playerInfo[15]),Integer.parseInt(playerInfo[16]),Integer.parseInt(playerInfo[17]),Integer.parseInt(playerInfo[18]),Integer.parseInt(playerInfo[19]),Integer.parseInt(playerInfo[20]),Integer.parseInt(playerInfo[21]))); else     teamQBs.add(new PlayerQB(playerInfo[1],this,Integer.parseInt(playerInfo[2]),Integer.parseInt(playerInfo[3]),Integer.parseInt(playerInfo[4]),Integer.parseInt(playerInfo[5]),Integer.parseInt(playerInfo[6]),Integer.parseInt(playerInfo[7]),isRedshirt,durability));  } else   if (playerInfo[0].equals("RB")) {    if (playerInfo.length >= 20)     teamRBs.add(new PlayerRB(playerInfo[1],this,Integer.parseInt(playerInfo[2]),Integer.parseInt(playerInfo[3]),Integer.parseInt(playerInfo[4]),Integer.parseInt(playerInfo[5]),Integer.parseInt(playerInfo[6]),Integer.parseInt(playerInfo[7]),isRedshirt,durability,Integer.parseInt(playerInfo[11]),Integer.parseInt(playerInfo[12]),Integer.parseInt(playerInfo[13]),Integer.parseInt(playerInfo[14]),Integer.parseInt(playerInfo[15]),Integer.parseInt(playerInfo[16]),Integer.parseInt(playerInfo[17]),Integer.parseInt(playerInfo[18]),Integer.parseInt(playerInfo[19]))); else     teamRBs.add(new PlayerRB(playerInfo[1],this,Integer.parseInt(playerInfo[2]),Integer.parseInt(playerInfo[3]),Integer.parseInt(playerInfo[4]),Integer.parseInt(playerInfo[5]),Integer.parseInt(playerInfo[6]),Integer.parseInt(playerInfo[7]),isRedshirt,durability));  } else   if (playerInfo[0].equals("WR")) {    if (playerInfo.length >= 22)     teamWRs.add(new PlayerWR(playerInfo[1],this,Integer.parseInt(playerInfo[2]),Integer.parseInt(playerInfo[3]),Integer.parseInt(playerInfo[4]),Integer.parseInt(playerInfo[5]),Integer.parseInt(playerInfo[6]),Integer.parseInt(playerInfo[7]),isRedshirt,durability,Integer.parseInt(playerInfo[11]),Integer.parseInt(playerInfo[12]),Integer.parseInt(playerInfo[13]),Integer.parseInt(playerInfo[14]),Integer.parseInt(playerInfo[15]),Integer.parseInt(playerInfo[16]),Integer.parseInt(playerInfo[17]),Integer.parseInt(playerInfo[18]),Integer.parseInt(playerInfo[19]),Integer.parseInt(playerInfo[20]),Integer.parseInt(playerInfo[21]))); else     teamWRs.add(new PlayerWR(playerInfo[1],this,Integer.parseInt(playerInfo[2]),Integer.parseInt(playerInfo[3]),Integer.parseInt(playerInfo[4]),Integer.parseInt(playerInfo[5]),Integer.parseInt(playerInfo[6]),Integer.parseInt(playerInfo[7]),isRedshirt,durability));  } else   if (playerInfo[0].equals("OL")) {    if (playerInfo.length >= 16)     teamOLs.add(new PlayerOL(playerInfo[1],this,Integer.parseInt(playerInfo[2]),Integer.parseInt(playerInfo[3]),Integer.parseInt(playerInfo[4]),Integer.parseInt(playerInfo[5]),Integer.parseInt(playerInfo[6]),Integer.parseInt(playerInfo[7]),isRedshirt,durability,Integer.parseInt(playerInfo[11]),Integer.parseInt(playerInfo[12]),Integer.parseInt(playerInfo[13]),Integer.parseInt(playerInfo[14]),Integer.parseInt(playerInfo[15]))); else     teamOLs.add(new PlayerOL(playerInfo[1],this,Integer.parseInt(playerInfo[2]),Integer.parseInt(playerInfo[3]),Integer.parseInt(playerInfo[4]),Integer.parseInt(playerInfo[5]),Integer.parseInt(playerInfo[6]),Integer.parseInt(playerInfo[7]),isRedshirt,durability));  } else   if (playerInfo[0].equals("K")) {    if (playerInfo.length >= 20)     teamKs.add(new PlayerK(playerInfo[1],this,Integer.parseInt(playerInfo[2]),Integer.parseInt(playerInfo[3]),Integer.parseInt(playerInfo[4]),Integer.parseInt(playerInfo[5]),Integer.parseInt(playerInfo[6]),Integer.parseInt(playerInfo[7]),isRedshirt,durability,Integer.parseInt(playerInfo[11]),Integer.parseInt(playerInfo[12]),Integer.parseInt(playerInfo[13]),Integer.parseInt(playerInfo[14]),Integer.parseInt(playerInfo[15]),Integer.parseInt(playerInfo[16]),Integer.parseInt(playerInfo[17]),Integer.parseInt(playerInfo[18]),Integer.parseInt(playerInfo[19]))); else     teamKs.add(new PlayerK(playerInfo[1],this,Integer.parseInt(playerInfo[2]),Integer.parseInt(playerInfo[3]),Integer.parseInt(playerInfo[4]),Integer.parseInt(playerInfo[5]),Integer.parseInt(playerInfo[6]),Integer.parseInt(playerInfo[7]),isRedshirt,durability));  } else   if (playerInfo[0].equals("S")) {    if (playerInfo.length >= 16)     teamSs.add(new PlayerS(playerInfo[1],this,Integer.parseInt(playerInfo[2]),Integer.parseInt(playerInfo[3]),Integer.parseInt(playerInfo[4]),Integer.parseInt(playerInfo[5]),Integer.parseInt(playerInfo[6]),Integer.parseInt(playerInfo[7]),isRedshirt,durability,Integer.parseInt(playerInfo[11]),Integer.parseInt(playerInfo[12]),Integer.parseInt(playerInfo[13]),Integer.parseInt(playerInfo[14]),Integer.parseInt(playerInfo[15]))); else     teamSs.add(new PlayerS(playerInfo[1],this,Integer.parseInt(playerInfo[2]),Integer.parseInt(playerInfo[3]),Integer.parseInt(playerInfo[4]),Integer.parseInt(playerInfo[5]),Integer.parseInt(playerInfo[6]),Integer.parseInt(playerInfo[7]),isRedshirt,durability));  } else   if (playerInfo[0].equals("CB")) {    if (playerInfo.length >= 16)     teamCBs.add(new PlayerCB(playerInfo[1],this,Integer.parseInt(playerInfo[2]),Integer.parseInt(playerInfo[3]),Integer.parseInt(playerInfo[4]),Integer.parseInt(playerInfo[5]),Integer.parseInt(playerInfo[6]),Integer.parseInt(playerInfo[7]),isRedshirt,durability,Integer.parseInt(playerInfo[11]),Integer.parseInt(playerInfo[12]),Integer.parseInt(playerInfo[13]),Integer.parseInt(playerInfo[14]),Integer.parseInt(playerInfo[15]))); else     teamCBs.add(new PlayerCB(playerInfo[1],this,Integer.parseInt(playerInfo[2]),Integer.parseInt(playerInfo[3]),Integer.parseInt(playerInfo[4]),Integer.parseInt(playerInfo[5]),Integer.parseInt(playerInfo[6]),Integer.parseInt(playerInfo[7]),isRedshirt,durability));  } else   if (playerInfo[0].equals("F7")) {    if (playerInfo.length >= 16)     teamF7s.add(new PlayerF7(playerInfo[1],this,Integer.parseInt(playerInfo[2]),Integer.parseInt(playerInfo[3]),Integer.parseInt(playerInfo[4]),Integer.parseInt(playerInfo[5]),Integer.parseInt(playerInfo[6]),Integer.parseInt(playerInfo[7]),isRedshirt,durability,Integer.parseInt(playerInfo[11]),Integer.parseInt(playerInfo[12]),Integer.parseInt(playerInfo[13]),Integer.parseInt(playerInfo[14]),Integer.parseInt(playerInfo[15]))); else     teamF7s.add(new PlayerF7(playerInfo[1],this,Integer.parseInt(playerInfo[2]),Integer.parseInt(playerInfo[3]),Integer.parseInt(playerInfo[4]),Integer.parseInt(playerInfo[5]),Integer.parseInt(playerInfo[6]),Integer.parseInt(playerInfo[7]),isRedshirt,durability));  }}  }
class C{  public int scanChar() throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int c=fCurrentEntity.ch[fCurrentEntity.position++];  boolean external=false;  if (c == '\n' || (c == '\r' && (external=fCurrentEntity.isExternal()))) {    fCurrentEntity.lineNumber++;    fCurrentEntity.columnNumber=1;    if (fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=(char)c;      load(1,false);    }    if (c == '\r' && external) {      if (fCurrentEntity.ch[fCurrentEntity.position++] != '\n') {        fCurrentEntity.position--;      }      c='\n';    }  }  fCurrentEntity.columnNumber++;  return c;}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(REASON)) {    reasonCode=0;  } else {    throw new IOException("Name not supported by CRLReasonCodeExtension");  }  encodeThis();}  }
class C{  private ThreadPoolObjectName findPool(String name){  if (name != null && isInitialized()) {    for (    ThreadPoolObjectName threadPoolObjectName : poolNames) {      if (name.equals(threadPoolObjectName.getThreadPoolName().getKeyProperty("name"))) {        return threadPoolObjectName;      }    }  }  return null;}  }
class C{  public static KnowledgeGraph serializableInstance(){  return new KnowledgeGraph(Knowledge.serializableInstance());}  }
class C{  protected void prepareBuffer(int size) throws IOException {  if (bufferPosition > 0 && bufferPosition >= BUFFER_SIZE - size) {    writeBuffer();  }}  }
class C{  private synchronized void notifyPanListeners(){  for (  PanListener listener : mPanListeners) {    listener.panApplied();  }}  }
class C{  public boolean isPreDestroyCalled(){  return this.preDestroyCalled;}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  private void updateParamsForAuth(String[] authNames,List<Pair> queryParams,Map<String,String> headerParams){  for (  String authName : authNames) {    Authentication auth=authentications.get(authName);    if (auth == null)     throw new RuntimeException("Authentication undefined: " + authName);    auth.applyToParams(queryParams,headerParams);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.ACTIVE_STATE_REFERENCE_EXPRESSION__VALUE:    return value != null;}return super.eIsSet(featureID);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  private static StringList parse(PageContext pc,ParserString ps,boolean doLowerCase){  String id=readIdentifier(ps,doLowerCase);  if (id == null)   return null;  StringList list=new StringList(id);  CFMLExpressionInterpreter interpreter=null;  while (true) {    if (ps.forwardIfCurrent('.')) {      id=readIdentifier(ps,doLowerCase);      if (id == null)       return null;      list.add(id);    } else     if (ps.forwardIfCurrent('[')) {      if (interpreter == null)       interpreter=new CFMLExpressionInterpreter(false);      try {        list.add(Caster.toString(interpreter.interpretPart(pc,ps)));      } catch (      PageException e) {        return null;      }      if (!ps.forwardIfCurrent(']'))       return null;      ps.removeSpace();    } else     break;  }  if (ps.isValidIndex())   return null;  list.reset();  return list;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof MatrixSeries)) {    return false;  }  MatrixSeries that=(MatrixSeries)obj;  if (!(getRowCount() == that.getRowCount())) {    return false;  }  if (!(getColumnsCount() == that.getColumnsCount())) {    return false;  }  for (int r=0; r < getRowCount(); r++) {    for (int c=0; c < getColumnsCount(); c++) {      if (get(r,c) != that.get(r,c)) {        return false;      }    }  }  return super.equals(obj);}  }
class C{  public static void boot(){  appCL=null;}  }
class C{  public boolean isSupportsWakeOnLan(){  return supportsWakeOnLan;}  }
class C{  public long readLong(String key){  Long value=(Long)mCache.get(key);  if (value == null) {    value=Long.parseLong(readParameter(key));    mCache.put(key,value);  }  return value;}  }
class C{  public void addTag(String tag){  if (this.tags == null) {    this.tags=new Array<String>(2);  }  this.tags.add(tag);}  }
class C{  public TextCharacter withForegroundColor(TextColor foregroundColor){  if (this.foregroundColor == foregroundColor || this.foregroundColor.equals(foregroundColor)) {    return this;  }  return new TextCharacter(character,foregroundColor,backgroundColor,modifiers);}  }
class C{  private void checkInstance(Location location,ValueNumberFrame vnaFrame,UnconditionalValueDerefSet fact) throws DataflowAnalysisException {  if (!location.isFirstInstructionInBasicBlock()) {    return;  }  if (invDataflow == null) {    return;  }  BasicBlock fallThroughPredecessor=cfg.getPredecessorWithEdgeType(location.getBasicBlock(),EdgeTypes.FALL_THROUGH_EDGE);  if (fallThroughPredecessor == null || !fallThroughPredecessor.isNullCheck()) {    return;  }  ValueNumber vn=vnaFrame.getInstance(location.getHandle().getInstruction(),methodGen.getConstantPool());  if (!methodGen.isStatic()) {    ValueNumber v=vnaFrame.getValue(0);    if (v.equals(vn)) {      return;    }  }  if (vn.hasFlag(ValueNumber.CONSTANT_CLASS_OBJECT)) {    return;  }  IsNullValueFrame startFact=null;  startFact=invDataflow.getStartFact(fallThroughPredecessor);  if (!startFact.isValid()) {    return;  }  int slot=startFact.getInstanceSlot(location.getHandle().getInstruction(),methodGen.getConstantPool());  if (!reportDereference(startFact,slot)) {    return;  }  if (DEBUG) {    System.out.println("FOUND GUARANTEED DEREFERENCE");    System.out.println("Load: " + vnaFrame.getLoad(vn));    System.out.println("Pred: " + fallThroughPredecessor);    System.out.println("startFact: " + startFact);    System.out.println("Location: " + location);    System.out.println("Value number frame: " + vnaFrame);    System.out.println("Dereferenced valueNumber: " + vn);    System.out.println("invDataflow: " + startFact);    System.out.println("IGNORE_DEREF_OF_NCP: " + IGNORE_DEREF_OF_NCP);  }  fact.addDeref(vn,location);}  }
class C{  public PcPatternRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  public static PsiElement createElement(ASTNode node){  IElementType elem=node.getElementType();  if (elem instanceof GroovyElementType.PsiCreator) {    return ((GroovyElementType.PsiCreator)elem).createPsi(node);  }  if (elem instanceof IGroovyDocElementType) {    return GroovyDocPsiCreator.createElement(node);  }  if (elem == GroovyElementTypes.LITERAL)   return new GrLiteralImpl(node);  if (elem == GroovyElementTypes.LIST_OR_MAP)   return new GrListOrMapImpl(node);  if (elem == GroovyElementTypes.MODIFIERS)   return new GrModifierListImpl(node);  if (elem == GroovyElementTypes.ANNOTATION)   return new GrAnnotationImpl(node);  if (elem == GroovyElementTypes.ANNOTATION_ARGUMENTS)   return new GrAnnotationArgumentListImpl(node);  if (elem == GroovyElementTypes.ANNOTATION_ARRAY_INITIALIZER)   return new GrAnnotationArrayInitializerImpl(node);  if (elem == GroovyElementTypes.ANNOTATION_MEMBER_VALUE_PAIR)   return new GrAnnotationNameValuePairImpl(node);  if (elem == GroovyElementTypes.THROW_CLAUSE)   return new GrThrowsClauseImpl(node);  if (elem == GroovyElementTypes.IMPORT_STATEMENT)   return new GrImportStatementImpl(node);  if (elem == GroovyElementTypes.PACKAGE_DEFINITION)   return new GrPackageDefinitionImpl(node);  if (elem == GroovyElementTypes.LABELED_STATEMENT)   return new GrLabeledStatementImpl(node);  if (elem == GroovyElementTypes.IF_STATEMENT)   return new GrIfStatementImpl(node);  if (elem == GroovyElementTypes.FOR_STATEMENT)   return new GrForStatementImpl(node);  if (elem == GroovyElementTypes.FOR_IN_CLAUSE)   return new GrForInClauseImpl(node);  if (elem == GroovyElementTypes.FOR_TRADITIONAL_CLAUSE)   return new GrTraditionalForClauseImpl(node);  if (elem == GroovyElementTypes.WHILE_STATEMENT)   return new GrWhileStatementImpl(node);  if (elem == GroovyElementTypes.TRY_BLOCK_STATEMENT)   return new GrTryCatchStatementImpl(node);  if (elem == GroovyElementTypes.CATCH_CLAUSE)   return new GrCatchClauseImpl(node);  if (elem == GroovyElementTypes.FINALLY_CLAUSE)   return new GrFinallyClauseImpl(node);  if (elem == GroovyElementTypes.SYNCHRONIZED_STATEMENT)   return new GrSynchronizedStatementImpl(node);  if (elem == GroovyElementTypes.SWITCH_STATEMENT)   return new GrSwitchStatementImpl(node);  if (elem == GroovyElementTypes.CASE_LABEL)   return new GrCaseLabelImpl(node);  if (elem == GroovyElementTypes.CASE_SECTION)   return new GrCaseSectionImpl(node);  if (elem == GroovyElementTypes.VARIABLE_DEFINITION || elem == GroovyElementTypes.VARIABLE_DEFINITION_ERROR)   return new GrVariableDeclarationImpl(node);  if (elem == GroovyElementTypes.TUPLE_EXPRESSION)   return new GrTupleExpressionImpl(node);  if (elem == GroovyElementTypes.VARIABLE)   return new GrVariableImpl(node);  if (elem == GroovyElementTypes.FIELD)   return new GrFieldImpl(node);  if (elem == GroovyElementTypes.CLASS_INITIALIZER)   return new GrClassInitializerImpl(node);  if (elem == GroovyElementTypes.CLASS_DEFINITION)   return new GrClassDefinitionImpl(node);  if (elem == GroovyElementTypes.INTERFACE_DEFINITION)   return new GrInterfaceDefinitionImpl(node);  if (elem == GroovyElementTypes.ENUM_DEFINITION)   return new GrEnumTypeDefinitionImpl(node);  if (elem == GroovyElementTypes.ANNOTATION_DEFINITION)   return new GrAnnotationTypeDefinitionImpl(node);  if (elem == GroovyElementTypes.TRAIT_DEFINITION)   return new GrTraitTypeDefinitionImpl(node);  if (elem == GroovyElementTypes.ANNOTATION_METHOD)   return new GrAnnotationMethodImpl(node);  if (elem == GroovyElementTypes.REFERENCE_ELEMENT)   return new GrCodeReferenceElementImpl(node);  if (elem == GroovyElementTypes.CLASS_TYPE_ELEMENT)   return new GrClassTypeElementImpl(node);  if (elem == GroovyElementTypes.IMPLEMENTS_CLAUSE)   return new GrImplementsClauseImpl(node);  if (elem == GroovyElementTypes.EXTENDS_CLAUSE)   return new GrExtendsClauseImpl(node);  if (elem == GroovyElementTypes.CLASS_BODY)   return new GrTypeDefinitionBodyBase.GrClassBody(node);  if (elem == GroovyElementTypes.ENUM_BODY)   return new GrTypeDefinitionBodyBase.GrEnumBody(node);  if (elem == GroovyElementTypes.BLOCK_STATEMENT)   return new GrBlockStatementImpl(node);  if (elem == GroovyElementTypes.EXPLICIT_CONSTRUCTOR)   return new GrConstructorInvocationImpl(node);  if (elem == GroovyElementTypes.ENUM_CONSTANTS)   return new GrEnumConstantListImpl(node);  if (elem == GroovyElementTypes.ENUM_CONSTANT)   return new GrEnumConstantImpl(node);  if (elem == GroovyElementTypes.CONSTRUCTOR_DEFINITION)   return new GrConstructorImpl(node);  if (elem == GroovyElementTypes.METHOD_DEFINITION)   return new GrMethodImpl(node);  if (elem == GroovyElementTypes.PARAMETERS_LIST)   return new GrParameterListImpl(node);  if (elem == GroovyElementTypes.PARAMETER)   return new GrParameterImpl(node);  if (elem == GroovyElementTypes.TYPE_ARGUMENT)   return new GrWildcardTypeArgumentImpl(node);  if (elem == GroovyElementTypes.TYPE_ARGUMENTS)   return new GrTypeArgumentListImpl(node);  if (elem == GroovyElementTypes.TYPE_PARAMETER_LIST)   return new GrTypeParameterListImpl(node);  if (elem == GroovyElementTypes.TYPE_PARAMETER)   return new GrTypeParameterImpl(node);  if (elem == GroovyElementTypes.TYPE_PARAMETER_EXTENDS_BOUND_LIST)   return new GrTypeParameterParameterExtendsListImpl(node);  if (elem == GroovyElementTypes.RETURN_STATEMENT)   return new GrReturnStatementImpl(node);  if (elem == GroovyElementTypes.THROW_STATEMENT)   return new GrThrowStatementImpl(node);  if (elem == GroovyElementTypes.ASSERT_STATEMENT)   return new GrAssertStatementImpl(node);  if (elem == GroovyElementTypes.BREAK_STATEMENT)   return new GrBreakStatementImpl(node);  if (elem == GroovyElementTypes.CONTINUE_STATEMENT)   return new GrContinueStatementImpl(node);  if (elem == GroovyElementTypes.CALL_EXPRESSION)   return new GrApplicationStatementImpl(node);  if (elem == GroovyElementTypes.COMMAND_ARGUMENTS)   return new GrCommandArgumentListImpl(node);  if (elem == GroovyElementTypes.CONDITIONAL_EXPRESSION)   return new GrConditionalExprImpl(node);  if (elem == GroovyElementTypes.ELVIS_EXPRESSION)   return new GrElvisExprImpl(node);  if (elem == GroovyElementTypes.ASSIGNMENT_EXPRESSION)   return new GrAssignmentExpressionImpl(node);  if (elem == GroovyElementTypes.LOGICAL_OR_EXPRESSION)   return new GrLogicalExpressionImpl(node);  if (elem == GroovyElementTypes.LOGICAL_AND_EXPRESSION)   return new GrLogicalExpressionImpl(node);  if (elem == GroovyElementTypes.EXCLUSIVE_OR_EXPRESSION)   return new GrBitwiseExpressionImpl(node);  if (elem == GroovyElementTypes.INCLUSIVE_OR_EXPRESSION)   return new GrBitwiseExpressionImpl(node);  if (elem == GroovyElementTypes.AND_EXPRESSION)   return new GrBitwiseExpressionImpl(node);  if (elem == GroovyElementTypes.REGEX_MATCH_EXPRESSION)   return new GrLogicalExpressionImpl(node);  if (elem == GroovyElementTypes.REGEX_FIND_EXPRESSION)   return new GrRegexFindExpressionImpl(node);  if (elem == GroovyElementTypes.EQUALITY_EXPRESSION)   return new GrRelationalExpressionImpl(node);  if (elem == GroovyElementTypes.RELATIONAL_EXPRESSION)   return new GrRelationalExpressionImpl(node);  if (elem == GroovyElementTypes.SHIFT_EXPRESSION)   return new GrShiftExpressionImpl(node);  if (elem == GroovyElementTypes.RANGE_EXPRESSION)   return new GrRangeExpressionImpl(node);  if (TokenSets.SHIFT_SIGNS.contains(elem))   return new GrOperationSignImpl(node);  if (elem == GroovyElementTypes.ADDITIVE_EXPRESSION)   return new GrAdditiveExpressionImpl(node);  if (elem == GroovyElementTypes.MULTIPLICATIVE_EXPRESSION)   return new GrMultiplicativeExpressionImpl(node);  if (elem == GroovyElementTypes.POWER_EXPRESSION)   return new GrPowerExpressionImpl(node);  if (elem == GroovyElementTypes.POWER_EXPRESSION_SIMPLE)   return new GrPowerExpressionImpl(node);  if (elem == GroovyElementTypes.UNARY_EXPRESSION)   return new GrUnaryExpressionImpl(node);  if (elem == GroovyElementTypes.CAST_EXPRESSION)   return new GrTypeCastExpressionImpl(node);  if (elem == GroovyElementTypes.SAFE_CAST_EXPRESSION)   return new GrSafeCastExpressionImpl(node);  if (elem == GroovyElementTypes.INSTANCEOF_EXPRESSION)   return new GrInstanceofExpressionImpl(node);  if (elem == GroovyElementTypes.BUILT_IN_TYPE_EXPRESSION)   return new GrBuiltinTypeClassExpressionImpl(node);  if (elem == GroovyElementTypes.ARRAY_TYPE)   return new GrArrayTypeElementImpl(node);  if (elem == GroovyElementTypes.BUILT_IN_TYPE)   return new GrBuiltInTypeElementImpl(node);  if (elem == GroovyElementTypes.DISJUNCTION_TYPE_ELEMENT)   return new GrDisjunctionTypeElementImpl(node);  if (elem == GroovyElementTypes.GSTRING)   return new GrStringImpl(node);  if (elem == GroovyElementTypes.REGEX)   return new GrRegexImpl(node);  if (elem == GroovyElementTypes.GSTRING_INJECTION)   return new GrStringInjectionImpl(node);  if (elem == GroovyElementTypes.GSTRING_CONTENT)   return new GrStringContentImpl(node);  if (elem == GroovyElementTypes.REFERENCE_EXPRESSION)   return new GrReferenceExpressionImpl(node);  if (elem == GroovyElementTypes.PARENTHESIZED_EXPRESSION)   return new GrParenthesizedExpressionImpl(node);  if (elem == GroovyElementTypes.NEW_EXPRESSION)   return new GrNewExpressionImpl(node);  if (elem == GroovyElementTypes.ANONYMOUS_CLASS_DEFINITION)   return new GrAnonymousClassDefinitionImpl(node);  if (elem == GroovyElementTypes.ENUM_CONSTANT_INITIALIZER)   return new GrEnumConstantInitializerImpl(node);  if (elem == GroovyElementTypes.ARRAY_DECLARATOR)   return new GrArrayDeclarationImpl(node);  if (elem == GroovyElementTypes.PATH_PROPERTY_REFERENCE)   return new GrPropertySelectionImpl(node);  if (elem == GroovyElementTypes.PATH_METHOD_CALL)   return new GrMethodCallExpressionImpl(node);  if (elem == GroovyElementTypes.PATH_INDEX_PROPERTY)   return new GrIndexPropertyImpl(node);  if (elem == GroovyElementTypes.ARGUMENTS)   return new GrArgumentListImpl(node);  if (elem == GroovyElementTypes.NAMED_ARGUMENT)   return new GrNamedArgumentImpl(node);  if (elem == GroovyElementTypes.SPREAD_ARGUMENT)   return new GrSpreadArgumentImpl(node);  if (elem == GroovyElementTypes.ARGUMENT_LABEL)   return new GrArgumentLabelImpl(node);  if (elem == GroovyElementTypes.BALANCED_BRACKETS)   return new GroovyASTPsiElementImpl(node);  if (elem == GroovyTokenTypes.mREGEX_LITERAL || elem == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL)   return new GroovyASTPsiElementImpl(node);  return new ASTWrapperPsiElement(node);}  }
class C{  public Solution search(INode initial,INode goal){  if (initial.equals(goal)) {    if (debug != null) {      debug.markGoal(initial);      if (legendOn) {        debug.visitNode(new Legend("DepthFirst Search with depth-limit:" + depthBound + " Processed:"+ 0+ " , open:"+ 0));      }    }    return new Solution(initial,goal,debug);  }  INodeSet open=StateStorageFactory.create(StateStorageFactory.STACK);  INode copy=initial.copy();  open.insert(copy);  if (debug != null) {    debug.visitNode(copy);    debug.markStart(copy);  }  INodeSet closed=StateStorageFactory.create(closedStorage);  while (!open.isEmpty()) {    INode n=open.remove();    closed.insert(n);    DepthTransition trans=(DepthTransition)n.storedData();    DoubleLinkedList<IMove> moves=n.validMoves();    for (Iterator<IMove> it=moves.iterator(); it.hasNext(); ) {      IMove move=it.next();      INode successor=n.copy();      move.execute(successor);      numMoves++;      if (closed.contains(successor) != null) {        continue;      }      int depth=1;      if (trans != null) {        depth=trans.depth + 1;      }      successor.storedData(new DepthTransition(move,n,depth));      if (debug != null) {        debug.visitNode(successor);        debug.visitEdge(n,successor);      }      if (successor.equals(goal)) {        if (debug != null) {          debug.markGoal(successor);          for (Iterator<INode> it2=open.iterator(); it2.hasNext(); ) {            debug.markUnexplored(it2.next());          }          if (legendOn) {            debug.visitNode(new Legend("DepthFirst Search with depth-limit:" + depthBound + " Processed:"+ closed.size()+ " , open:"+ open.size()));          }        }        numOpen=open.size();        numClosed=closed.size();        return new Solution(initial,successor,debug);      }      if (depth < depthBound) {        open.insert(successor);      }    }  }  numOpen=open.size();  numClosed=closed.size();  return new Solution(initial,goal,debug,false);}  }
class C{  public DError(JDialog parent,Throwable error){  super(parent,res.getString("DError.Title"),ModalityType.DOCUMENT_MODAL);  this.error=error;  initComponents();}  }
class C{  @Override public void close(){  forceGC();  super.close();  m_nvmasvc.close(m_nid);}  }
class C{  public ProductCategoryServiceImpl(final GenericDAO<ProductCategory,Long> productCategoryDao){  super(productCategoryDao);}  }
class C{  public Minute(int minute,Hour hour){  ParamChecks.nullNotPermitted(hour,"hour");  this.minute=(byte)minute;  this.hour=(byte)hour.getHour();  this.day=hour.getDay();  peg(Calendar.getInstance());}  }
class C{  @Override public void shutdownNow(){  if (!isOpen())   return;  open=false;  if (log.isInfoEnabled())   log.info("begin");  final long begin=System.currentTimeMillis();  txWriteService.shutdownNow();  readService.shutdownNow();  writeService.shutdownNow();  if (sampleService != null)   sampleService.shutdownNow();  final long elapsed=System.currentTimeMillis() - begin;  if (log.isInfoEnabled())   log.info("Done: elapsed=" + elapsed + "ms");}  }
class C{  public static void logShopChange(Shop actualNonNullShop,Shop newShopSelected){  if (actualNonNullShop != null && newShopSelected != null) {    String description="From (id=" + actualNonNullShop.getId() + ",name="+ actualNonNullShop.getName()+ ") to (id="+ newShopSelected.getId()+ ",name="+ newShopSelected.getId()+ ")";    Bundle parameters=new Bundle();    parameters.putString(AppEventsConstants.EVENT_PARAM_DESCRIPTION,description);    logFbEvent(AppEventsConstants.EVENT_NAME_UNLOCKED_ACHIEVEMENT,null,parameters);    Map<String,String> event=new HitBuilders.EventBuilder().setCategory("CHANGE_SHOP").setAction("CHANGE_SHOP").setLabel(description).build();    sendEventToAppTrackers(event);  } else {    Timber.e(new RuntimeException(),"Try log shop change with null parameters");  }}  }
class C{  public IGameMove bestMove(IGameState state,IPlayer player,IPlayer opponent){  this.original=player;  this.state=state;  MinMaxNode myHome=null;  if (debug != null) {    IGameState debugCopy=state.copy();    debug.visitNode(new Legend("MinMax (ply:" + ply + ", player:"+ player+ ")"));    debug.visitNode(debugCopy);    debug.markStart(debugCopy);    myHome=new MinMaxNode(IComparator.MAX);    debug.visitNode(myHome);    debug.visitEdge(debugCopy,myHome);  }  IGameMove response=null;  int best=IComparator.MAX.initialValue();  for (Iterator<IGameMove> it=player.validMoves(state).iterator(); it.hasNext(); ) {    IGameMove move=it.next();    if (debug != null) {      debugHome.push(myHome);    }    move.execute(state);    state.incrementCounter();    if (debug != null) {      IGameState nextCopy=state.copy();      debug.visitNode(nextCopy);      debug.visitEdge(debugHome.peek(),nextCopy);    }    int score=minimax(ply - 1,IComparator.MIN,opponent,player);    move.undo(state);    if (IComparator.MAX.compare(best,score) < 0) {      response=move;      best=score;    }  }  if (debug != null) {    MinMaxNode mmn=debugHome.pop();    mmn.value(best);  }  return response;}  }
class C{  private static void putValue1(){  try {    Region r1=cache.getRegion("/HARegionQueueDUnitTest_region");    r1.put("key-1","value-1");  } catch (  Exception ex) {    fail("failed while region.put()",ex);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.EXTENDED_RUNTIME_ENVIRONMENT__EXTENDED_RUNTIME_ENVIRONMENT:    return getExtendedRuntimeEnvironment();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void validateComplete(MetricFileReader reader){  Assert.assertTrue(reader.hasNext());  Assert.assertArrayEquals(new double[]{0.0,0.1,-0.1,1.0,-1.0,1E-5},reader.next(),Settings.EPS);  Assert.assertTrue(reader.hasNext());  Assert.assertArrayEquals(new double[]{0,10,100,1000,-10,-100},reader.next(),Settings.EPS);  Assert.assertFalse(reader.hasNext());  Assert.assertFalse(reader.hasNext());}  }
class C{  private Job waitForJob(Job job){  verify(job.getStatus() != null);  while (!job.getStatus().getState().equals("DONE")) {    sleeper.sleepUninterruptibly(pollInterval);    JobReference ref=job.getJobReference();    try {      job=bigquery.jobs().get(ref.getProjectId(),ref.getJobId()).execute();    } catch (    IOException e) {      throw BigqueryJobFailureException.create(e);    }  }  return job;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.ENUM_ATTRIBUTE_SOURCE__ATTRIBUTE:    setAttribute(ATTRIBUTE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public static void w(String tag,String msg,Object... args){  if (sLevel > LEVEL_WARNING) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.w(tag,msg);}  }
class C{  public static boolean testPointInTriangle(double pX,double pY,double pZ,double v0X,double v0Y,double v0Z,double v1X,double v1Y,double v1Z,double v2X,double v2Y,double v2Z){  double e10X=v1X - v0X;  double e10Y=v1Y - v0Y;  double e10Z=v1Z - v0Z;  double e20X=v2X - v0X;  double e20Y=v2Y - v0Y;  double e20Z=v2Z - v0Z;  double a=e10X * e10X + e10Y * e10Y + e10Z * e10Z;  double b=e10X * e20X + e10Y * e20Y + e10Z * e20Z;  double c=e20X * e20X + e20Y * e20Y + e20Z * e20Z;  double ac_bb=a * c - b * b;  double vpX=pX - v0X;  double vpY=pY - v0Y;  double vpZ=pZ - v0Z;  double d=vpX * e10X + vpY * e10Y + vpZ * e10Z;  double e=vpX * e20X + vpY * e20Y + vpZ * e20Z;  double x=d * c - e * b;  double y=e * a - d * b;  double z=x + y - ac_bb;  return ((Double.doubleToRawLongBits(z) & ~(Double.doubleToRawLongBits(x) | Double.doubleToRawLongBits(y))) & 0x8000000000000000L) != 0L;}  }
class C{  private void initializeState(State current){  InitializationUtils.initialize(current);  if (current.documentExpirationTimeMicros <= 0) {    current.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }}  }
class C{  public void putValue(int i,Value v){  values[i]=v;}  }
class C{  public MemStore(final DirectBufferPool pool,final int bufferCapacity){  if (pool == null)   throw new IllegalArgumentException();  if (bufferCapacity <= 0)   throw new IllegalArgumentException();  m_strategy=new MemStrategy(new MemoryManager(pool,bufferCapacity));  m_uuid=UUID.randomUUID();}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) final private void cacheTerm(final IV iv,final Map<IV<?,?>,BigdataValue> terms){  if (iv instanceof SidIV) {    cacheTerms((SidIV<?>)iv,terms);  } else {    iv.setValue(terms.get(iv));  }}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public void delete(String targetId) throws IOException {  startChangesIfNecessary();  ResponseWriter writer=getWrapped();  writer.startElement("delete",null);  writer.writeAttribute("id",targetId,null);  writer.endElement("delete");}  }
class C{  public int size(){  return productions.size();}  }
class C{  public NumberTextField(double initialValue,boolean doubleEachTime){  this(null,initialValue,doubleEachTime);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:30.717 -0500",hash_original_method="197418179C71EABCF647B3FA4C9F9D3C",hash_generated_method="5C11BDA1B3A23466E1E33DCD2701C4C8") boolean isStale() throws IOException {  if (!isEligibleForRecycling()) {    return true;  }  InputStream in=getInputStream();  if (in.available() > 0) {    return false;  }  Socket socket=getSocket();  int soTimeout=socket.getSoTimeout();  try {    socket.setSoTimeout(1);    in.mark(1);    int byteRead=in.read();    if (byteRead != -1) {      in.reset();      return false;    }    return true;  } catch (  SocketTimeoutException e) {    return false;  }catch (  IOException e) {    return true;  } finally {    socket.setSoTimeout(soTimeout);  }}  }
class C{  protected boolean addEdge(Edge e){  if (e.u < 0 || e.u > getSize() - 1)   throw new IllegalArgumentException("No such index: " + e.u);  if (e.u < 0 || e.v > getSize() - 1)   throw new IllegalArgumentException("No such index: " + e.u);  if (!neighbors.get(e.u).contains(e)) {    neighbors.get(e.u).add(e);    return true;  } else {    return false;  }}  }
class C{  public static boolean gitLocalConfig(final String startingDirectory,final AtomicReference<String> path) throws IOException {  final String GitOdbFolderName=".git";  final String LocalConfigFileName="config";  path.set(null);  if (!StringHelper.isNullOrWhiteSpace(startingDirectory)) {    File dir=new File(startingDirectory);    if (dir.exists()) {      File result=null;      while (dir != null && dir.exists() && dir.getParentFile() != null && dir.getParentFile().exists()) {        result=new File(dir,GitOdbFolderName);        if (result.exists())         break;        dir=dir.getParentFile();      }      if (result != null && result.exists()) {        if (result.isDirectory()) {          final String localPath=Path.combine(result.getAbsolutePath(),LocalConfigFileName);          if (Path.fileExists(localPath)) {            path.set(localPath);          }        } else {          String content=null;          content=IOHelper.readFileToString(result);          final Matcher match;          if ((match=gitdirPattern.matcher(content)).matches() && match.groupCount() > 1) {            content=match.group(1);            String localPath=null;            if (Path.isAbsolute(content)) {              localPath=content;            } else {              localPath=Path.getDirectoryName(result.getAbsolutePath());              localPath=Path.combine(localPath,content);            }            if (Path.directoryExists(localPath)) {              localPath=Path.combine(localPath,LocalConfigFileName);              if (Path.fileExists(localPath)) {                path.set(localPath);              }            }          }        }      }    }  }  return path.get() != null;}  }
class C{  protected void parseTagContent(Element element,Reader is) throws IOException {  StringBuilder text=null;  boolean leadingSpace=false;  int val=read(is);  char c=(char)val;  StringBuilder charEntity=null;  while (val != -1) {    if (c == '<') {      if ((includeWhitespacesBetweenTags) && (leadingSpace) && (text == null)&& (element != null)&& (element.getNumChildren() > 0)) {        leadingSpace=false;        text=new StringBuilder().append(' ');      }      if (text != null) {        if (charEntity != null) {          text.append('&').append(charEntity.toString());          charEntity=null;        }        if (leadingSpace) {          text.insert(0,' ');        }        if (element != null) {          Element textElement=createNewTextElement(text.toString());          element.addChild(textElement);        } else {          textElement(text.toString());        }        text=null;        leadingSpace=false;      }      Element childElement=parseTag(is);      if (childElement == END_TAG) {        StringBuilder closingTag=new StringBuilder();        int i=read(is);        if (i == -1) {          childElement=END_TAG;        } else {          c=(char)i;          while ((c != '>')) {            closingTag.append(c);            i=read(is);            c=(char)i;            if (i == -1) {              childElement=END_TAG;              break;            }          }        }        String ct=closingTag.toString();        if (eventParser) {          endTag(ct);          if (!isEmptyTag(ct)) {            return;          }        }        if (element != null) {          if (ct.equalsIgnoreCase(element.getTagName())) {            return;          } else           if (isEmptyTag(ct)) {          } else {            notifyError(ParserCallback.ERROR_NO_CLOSE_TAG,element.getTagName(),null,null,"Malformed XML - no appropriate closing tag for " + element.getTagName());          }        }      } else {        if (element != null && !childElement.isComment) {          element.addChild(childElement);        }      }    } else     if (text != null) {      if (charEntity != null) {        if (c == ';') {          text.append(convertCharEntity(charEntity.toString()));          charEntity=null;        } else         if (isLegalCharEntityCharacter(c)) {          charEntity.append(c);        } else {          text.append('&').append(charEntity).append(c);          charEntity=null;        }      } else       if (c == '&') {        charEntity=new StringBuilder();      } else {        text.append(c);      }    } else     if (!isWhiteSpace(c)) {      if (c == '&') {        charEntity=new StringBuilder();        text=new StringBuilder();      } else {        text=new StringBuilder().append(c);      }    } else {      leadingSpace=true;    }    val=read(is);    c=(char)val;  }}  }
class C{  public ExtraProvider overrideText(String text){  this.overriddenText=text;  return this;}  }
class C{  public void play(int itemType,int index,String folderPath){  String querySelection=MediaStore.Audio.Media.DATA + " LIKE " + "'"+ folderPath.replace("'","''")+ "/%'";  if (itemType == AUDIO_FILE) {    for (int i=0; i < fileFolderPathList.size(); i++) {      if (fileFolderTypeList.get(i) == FOLDER)       querySelection+=" AND " + MediaStore.Audio.Media.DATA + " NOT LIKE "+ "'"+ fileFolderPathList.get(i).replace("'","''")+ "/%'";    }    mApp.getPlaybackKickstarter().initPlayback(mContext,querySelection,Common.PLAY_ALL_IN_FOLDER,index,true,false);  } else   if (itemType == FOLDER) {    mApp.getPlaybackKickstarter().initPlayback(mContext,querySelection,Common.PLAY_ALL_IN_FOLDER,index,true,false);  } else {    Toast.makeText(mContext,R.string.cant_play_this_file,Toast.LENGTH_SHORT).show();  }}  }
class C{  public FieldValueFactorFunctionBuilder missing(double missing){  this.missing=missing;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:50.998 -0500",hash_original_method="A8EF5648BDA276CD13AE7067E9EC61AB",hash_generated_method="90B84465273DB897B22795818393AFD9") public static BearerData decode(byte[] smsData){  try {    BitwiseInputStream inStream=new BitwiseInputStream(smsData);    BearerData bData=new BearerData();    int foundSubparamMask=0;    while (inStream.available() > 0) {      boolean decodeSuccess=false;      int subparamId=inStream.read(8);      int subparamIdBit=1 << subparamId;      if ((foundSubparamMask & subparamIdBit) != 0) {        throw new CodingException("illegal duplicate subparameter (" + subparamId + ")");      }switch (subparamId) {case SUBPARAM_MESSAGE_IDENTIFIER:        decodeSuccess=decodeMessageId(bData,inStream);      break;case SUBPARAM_USER_DATA:    decodeSuccess=decodeUserData(bData,inStream);  break;case SUBPARAM_USER_RESPONSE_CODE:decodeSuccess=decodeUserResponseCode(bData,inStream);break;case SUBPARAM_REPLY_OPTION:decodeSuccess=decodeReplyOption(bData,inStream);break;case SUBPARAM_NUMBER_OF_MESSAGES:decodeSuccess=decodeMsgCount(bData,inStream);break;case SUBPARAM_CALLBACK_NUMBER:decodeSuccess=decodeCallbackNumber(bData,inStream);break;case SUBPARAM_MESSAGE_STATUS:decodeSuccess=decodeMsgStatus(bData,inStream);break;case SUBPARAM_MESSAGE_CENTER_TIME_STAMP:decodeSuccess=decodeMsgCenterTimeStamp(bData,inStream);break;case SUBPARAM_VALIDITY_PERIOD_ABSOLUTE:decodeSuccess=decodeValidityAbs(bData,inStream);break;case SUBPARAM_VALIDITY_PERIOD_RELATIVE:decodeSuccess=decodeValidityRel(bData,inStream);break;case SUBPARAM_DEFERRED_DELIVERY_TIME_ABSOLUTE:decodeSuccess=decodeDeferredDeliveryAbs(bData,inStream);break;case SUBPARAM_DEFERRED_DELIVERY_TIME_RELATIVE:decodeSuccess=decodeDeferredDeliveryRel(bData,inStream);break;case SUBPARAM_PRIVACY_INDICATOR:decodeSuccess=decodePrivacyIndicator(bData,inStream);break;case SUBPARAM_LANGUAGE_INDICATOR:decodeSuccess=decodeLanguageIndicator(bData,inStream);break;case SUBPARAM_MESSAGE_DISPLAY_MODE:decodeSuccess=decodeDisplayMode(bData,inStream);break;case SUBPARAM_PRIORITY_INDICATOR:decodeSuccess=decodePriorityIndicator(bData,inStream);break;case SUBPARAM_ALERT_ON_MESSAGE_DELIVERY:decodeSuccess=decodeMsgDeliveryAlert(bData,inStream);break;case SUBPARAM_MESSAGE_DEPOSIT_INDEX:decodeSuccess=decodeDepositIndex(bData,inStream);break;default :throw new CodingException("unsupported bearer data subparameter (" + subparamId + ")");}if (decodeSuccess) foundSubparamMask|=subparamIdBit;}if ((foundSubparamMask & (1 << SUBPARAM_MESSAGE_IDENTIFIER)) == 0) {throw new CodingException("missing MESSAGE_IDENTIFIER subparam");}if (bData.userData != null) {if (bData.userData.msgEncoding == UserData.ENCODING_IS91_EXTENDED_PROTOCOL) {if ((foundSubparamMask ^ (1 << SUBPARAM_MESSAGE_IDENTIFIER) ^ (1 << SUBPARAM_USER_DATA)) != 0) {Log.e(LOG_TAG,"IS-91 must occur without extra subparams (" + foundSubparamMask + ")");}decodeIs91(bData);} else {decodeUserDataPayload(bData.userData,bData.hasUserDataHeader);}}return bData;} catch (BitwiseInputStream.AccessException ex) {Log.e(LOG_TAG,"BearerData decode failed: " + ex);}catch (CodingException ex) {Log.e(LOG_TAG,"BearerData decode failed: " + ex);}return null;}  }
class C{  private static DeleteVirtualNetworkWorkflowDocument buildPatch(TaskState.TaskStage stage,DeleteVirtualNetworkWorkflowDocument.TaskState.SubStage subStage){  DeleteVirtualNetworkWorkflowDocument state=new DeleteVirtualNetworkWorkflowDocument();  state.taskState=new DeleteVirtualNetworkWorkflowDocument.TaskState();  state.taskState.stage=stage;  state.taskState.subStage=subStage;  return state;}  }
class C{  public void endDocument() throws org.xml.sax.SAXException {}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static byte[] reverse(byte[] data){  for (int i=0, j=data.length - 1; i < data.length / 2; i++, j--) {    data[i]^=data[j];    data[j]^=data[i];    data[i]^=data[j];  }  return data;}  }
class C{  protected void sequence_ThisTypeRefNominal(ISerializationContext context,ThisTypeRefNominal semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean confirm(Json msg){  System.out.println("ProposalConversation: confirm");  if (compareAndSetState(State.Accepted,State.Confirmed)) {    msg.set(Messages.PERFORMATIVE,Performative.Confirm);    say(msg);    return true;  }  return false;}  }
class C{  private void restoreDatabase(){  SharedPreferences prefs=getPreferences(MODE_PRIVATE);  boolean initialized=prefs.getBoolean(DB_INITIALIZED,false);  if (!initialized) {    mBillingService.restoreTransactions();    Toast.makeText(this,R.string.restoring_transactions,Toast.LENGTH_LONG).show();  }}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    IOUtils.closeQuietly(journalWriter);  }  Writer writer=null;  try {    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),HTTP.US_ASCII));    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(UPDATE + " " + entry.diskKey+ '\n');      } else {        writer.write(CLEAN + " " + entry.diskKey+ " "+ EXPIRY_PREFIX+ entry.expiryTimestamp+ entry.getLengths()+ '\n');      }    }  }  finally {    IOUtils.closeQuietly(writer);  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),HTTP.US_ASCII));}  }
class C{  public Builder transformResult(final Function<Object,Object> transformResult){  this.transformResult=transformResult;  return this;}  }
class C{  private void init(){  setTitle("New Competitive Network");  competitivePanel=CompetitivePropertiesPanel.createCompetitivePropertiesPanel(networkPanel,CompetitivePropsPanelType.CREATE_NETWORK);  tabLogic.add(competitivePanel);  layoutPanel=new MainLayoutPanel(false,this);  layoutPanel.setCurrentLayout(new LineLayout());  tabLayout.add(layoutPanel);  tabbedPane.addTab("Logic",tabLogic);  tabbedPane.addTab("Layout",layoutPanel);  setContentPane(tabbedPane);  Action helpAction=new ShowHelpAction(competitivePanel.getHelpPath());  addButton(new JButton(helpAction));}  }
class C{  public void removeLine(final Line line){  if (line.previous == null) {    this.lines=line.next;  } else {    line.previous.next=line.next;  }  if (line.next == null) {    this.lineTail=line.previous;  } else {    line.next.previous=line.previous;  }  line.previous=line.next=null;}  }
class C{  public static void cursorIntToContentValues(Cursor cursor,String field,ContentValues values){  cursorIntToContentValues(cursor,field,values,field);}  }
class C{  public HGPersistentHandle store(HGPersistentHandle handle,HGPersistentHandle[] link){  if (overlayGraph.get() != null)   return overlayGraph.get().store(handle,link); else   return impl.store(handle,link);}  }
class C{  public synchronized static boolean isAndroid(){  if (m_IsAndroid == null) {    m_IsAndroid=System.getProperty("java.vm.vendor").toLowerCase().contains("android") || System.getProperty("java.vendor").toLowerCase().contains("android") || System.getProperty("java.vendor.url").toLowerCase().contains("android");  }  return m_IsAndroid;}  }
class C{  public static void validateConfiguration(final String sourceAnchor) throws Exception {  ProcessBuilder pb=new ProcessBuilder(ConfProxyProperties.getDownloadScriptPath(),sourceAnchor);  pb.redirectErrorStream(true);  pb.redirectOutput(ProcessBuilder.Redirect.INHERIT);  log.info("Running '{} {}' ...",ConfProxyProperties.getDownloadScriptPath(),sourceAnchor);  runConfClient(pb);}  }
class C{  public boolean intersects(final Rectangle2D area){  final Rectangle2D zone=new Rectangle(x,y,getWidth(),getHeight());  return zone.intersects(area);}  }
class C{  protected void updateStage(Stage stage){  final Stage previousStage=mUiStage;  mUiStage=stage;  if (stage == Stage.ChoiceTooShort) {    mHeaderText.setText(getResources().getString(stage.headerMessage,LockPatternUtils.MIN_LOCK_PATTERN_SIZE));  } else {    mHeaderText.setText(stage.headerMessage);  }  if (stage.footerMessage == ID_EMPTY_MESSAGE) {    mFooterText.setText("");  } else {    mFooterText.setText(stage.footerMessage);  }  if (stage.leftMode == LeftButtonMode.Gone) {    mFooterLeftButton.setVisibility(View.GONE);  } else {    mFooterLeftButton.setVisibility(View.VISIBLE);    mFooterLeftButton.setText(stage.leftMode.text);    mFooterLeftButton.setEnabled(stage.leftMode.enabled);  }  mFooterRightButton.setText(stage.rightMode.text);  mFooterRightButton.setEnabled(stage.rightMode.enabled);  if (stage.patternEnabled) {    mLockPatternView.enableInput();  } else {    mLockPatternView.disableInput();  }  mLockPatternView.setDisplayMode(DisplayMode.Correct);switch (mUiStage) {case Introduction:    mLockPatternView.clearPattern();  break;case HelpScreen:mLockPatternView.setPattern(DisplayMode.Animate,mAnimatePattern);break;case ChoiceTooShort:mLockPatternView.setDisplayMode(DisplayMode.Wrong);postClearPatternRunnable();break;case FirstChoiceValid:break;case NeedToConfirm:mLockPatternView.clearPattern();break;case ConfirmWrong:mLockPatternView.setDisplayMode(DisplayMode.Wrong);postClearPatternRunnable();break;case ChoiceConfirmed:break;}if (previousStage != stage) {mHeaderText.announceForAccessibility(mHeaderText.getText());}}  }
class C{  public void addKeyChainEventListener(KeyChainEventListener listener){  keyChainGroup.addEventListener(listener,Threading.USER_THREAD);}  }
class C{  @Override public byte[] apply(Object o){  return toBytes(o);}  }
class C{  public ZkClusterData translatePrivateIpToPublicHostNames(){  AWSCredentials credentials=new BasicAWSCredentials(AwsConfigReader.fetchAccessKey(),AwsConfigReader.fetchSecretyKey());  AmazonEC2 ec2=new AmazonEC2Client(credentials);  Set<String> publicDnsNameHosts=new HashSet<String>();  Map<String,String> privateIptoPublicHostNames=new HashMap<String,String>();  if (allSolrNodes.isEmpty()) {    logger.info("No valid solr hosts are found. Cannot do any mapping");    return zkClusterData;  }  DescribeInstancesRequest request=new DescribeInstancesRequest().withFilters(new Filter("private-ip-address").withValues(allSolrNodes));  DescribeInstancesResult describeInstancesResult=ec2.describeInstances(request);  List<Reservation> reservations=describeInstancesResult.getReservations();  logger.info("Fetching Public HostNames....");  for (  Reservation reservation : reservations) {    List<Instance> instances=reservation.getInstances();    for (    Instance instance : instances) {      logger.info("Private to Public Name of the Host is " + instance.getPrivateIpAddress() + " => "+ instance.getPublicDnsName());      publicDnsNameHosts.add(instance.getPublicDnsName());      privateIptoPublicHostNames.put(instance.getPrivateIpAddress(),instance.getPublicDnsName());    }  }  zkClusterData.updateSolrNodes(publicDnsNameHosts);  zkClusterData.setPrivateIpToPublicHostNameMap(privateIptoPublicHostNames);  return zkClusterData;}  }
class C{  protected final boolean match(char[] target,int ndx){  if (ndx + target.length >= total) {    return false;  }  int j=ndx;  for (int i=0; i < target.length; i++, j++) {    if (input[j] != target[i]) {      return false;    }  }  return true;}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  @Override protected void paintComponent(final Graphics g){  super.paintComponent(g);  g.setFont(m_font);  m_charWidth=(int)g.getFontMetrics().getStringBounds("0",g).getWidth();  if (m_registerModel != null) {    drawHighlightedRegister(g);    drawRegisters(g);    if (m_caret.isVisible()) {      drawCaret(g);    }  }}  }
class C{  protected CompilationUnit createCompilationUnit(CompilerConfiguration config,CodeSource source){  return new CompilationUnit(config,source,this);}  }
class C{  public boolean equals(final Object o){  if (o instanceof Interval)   return ((Interval)o).left == left && ((Interval)o).right == right; else   if (o instanceof IntSortedSet) {    IntSortedSet s=(IntSortedSet)o;    if (s.size() != length())     return false;    int n=length();    IntIterator i=iterator(), j=s.iterator();    while (n-- != 0)     if (i.nextInt() != j.nextInt())     return false;    return true;  } else   if (o instanceof IntSet) {    IntSet s=(IntSet)o;    if (s.size() != length())     return false;    int n=length();    IntIterator i=iterator();    while (n-- != 0)     if (!s.contains(i.nextInt()))     return false;    return true;  } else   return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.114 -0400",hash_original_method="7CD459CA02BA6EDA3790E870E9AD0778",hash_generated_method="3DCFDCB9434A1917090C8C7983061600") private void contextualShape(char[] text,int start,int count,int contextIndex){  char maxDigit=(char)0x0039;  char minDigit=(char)0x0030;  int currIndex;  if (((1 << contextIndex) & fRanges) == 0) {    currIndex=INDEX_EUROPEAN;  } else {    currIndex=contextIndex;  }  for (int ind=start; ind < start + count; ind++) {    if (minDigit <= text[ind] && text[ind] <= maxDigit) {      if (currIndex != INDEX_ETHIOPIC || text[ind] != '0') {        text[ind]=(char)(digitsLowRanges[currIndex] + text[ind]);      }    } else {      if (isCharStrong(text[ind])) {        int index=getCharIndex(text[ind]);        if (currIndex != index) {          if (((1 << index) & fRanges) != 0) {            currIndex=index;          } else {            currIndex=INDEX_EUROPEAN;          }        }      }    }  }}  }
class C{  private void rebuildIndex(){  this.indexMap.clear();  for (int i=0; i < this.keys.size(); i++) {    final Object key=this.keys.get(i);    this.indexMap.put(key,new Integer(i));  }}  }
class C{  public static String toString(ToXContent toXContent){  return toString(toXContent,EMPTY_PARAMS);}  }
class C{  @Override protected void initListeners(){}  }
class C{  public void irvineHash(final int in){  mHash=Long.rotateLeft(mHash,1) ^ HASH_BLOCKS[(in + mCount++) & 0xFF];}  }
class C{  private static void writeCopyState(CopyState state,DataOutput out) throws IOException {  out.writeVInt(state.infosBytes.length);  out.writeBytes(state.infosBytes,0,state.infosBytes.length);  out.writeVLong(state.gen);  out.writeVLong(state.version);  SimpleServer.writeFilesMetaData(out,state.files);  out.writeVInt(state.completedMergeFiles.size());  for (  String fileName : state.completedMergeFiles) {    out.writeString(fileName);  }  out.writeVLong(state.primaryGen);}  }
class C{  public SparseIntArray(){  this(10);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  @Override public Object draw(Graphics2D g2,Rectangle2D area,Object params){  Rectangle2D target=(Rectangle2D)area.clone();  Rectangle2D hotspot=(Rectangle2D)area.clone();  StandardEntityCollection sec=null;  if (params instanceof EntityBlockParams && ((EntityBlockParams)params).getGenerateEntities()) {    sec=new StandardEntityCollection();    sec.add(new TitleEntity(hotspot,this));  }  target=trimMargin(target);  if (this.backgroundPaint != null) {    g2.setPaint(this.backgroundPaint);    g2.fill(target);  }  BlockFrame border=getFrame();  border.draw(g2,target);  border.getInsets().trim(target);  BlockContainer container=this.wrapper;  if (container == null) {    container=this.items;  }  target=trimPadding(target);  Object val=container.draw(g2,target,params);  if (val instanceof BlockResult) {    EntityCollection ec=((BlockResult)val).getEntityCollection();    if (ec != null && sec != null) {      sec.addAll(ec);      ((BlockResult)val).setEntityCollection(sec);    }  }  return val;}  }
class C{  public boolean isAuthoritativeAnswer(){  return (_flags & DNSConstants.FLAGS_AA) != 0;}  }
class C{  public static int reflectionHashCode(int initialNonZeroOddNumber,int multiplierNonZeroOddNumber,Object object){  return reflectionHashCode(initialNonZeroOddNumber,multiplierNonZeroOddNumber,object,false,null,null);}  }
class C{  private boolean isDisplayChainPortDragged(){  return draggedPort != null && draggedPort.getPorts().getOwner().getOperator() == model.getDisplayedChain();}  }
class C{  public static MathTransform findTransform(Geometry source,Geometry target){  CoordinateReferenceSystem sourceCRS=getCRS(source.getSRID());  CoordinateReferenceSystem targetCRS=getCRS(target.getSRID());  try {    return CRS.findMathTransform(sourceCRS,targetCRS);  } catch (  FactoryException e) {    e.printStackTrace();    return null;  }}  }
class C{  public boolean isHotLoaded(){  boolean isHotLoaded=false;  if (getType() instanceof WeaponType) {    Mounted link=getLinked();    if ((link == null) || !(link.getType() instanceof AmmoType)) {      return false;    }    isHotLoaded=link.hotloaded;    if (((AmmoType)link.getType()).getMunitionType() == AmmoType.M_DEAD_FIRE) {      return true;    }    if (!isHotLoaded && link.getType().hasModes() && link.curMode().equals("HotLoad")) {      isHotLoaded=true;    }    return isHotLoaded;  }  if (getType() instanceof AmmoType) {    isHotLoaded=hotloaded;    if (((AmmoType)getType()).getMunitionType() == AmmoType.M_DEAD_FIRE) {      return true;    }    if (!isHotLoaded && getType().hasModes() && curMode().equals("HotLoad")) {      isHotLoaded=true;    }    return isHotLoaded;  }  return false;}  }
class C{  private SSLEngineResult unwrap() throws SSLException {  if (appBuffer == null) {    appBuffer=IoBuffer.allocate(inNetBuffer.remaining());  } else {    appBuffer.expand(inNetBuffer.remaining());  }  SSLEngineResult res;  Status status=null;  HandshakeStatus handshakeStatus=null;  do {    res=sslEngine.unwrap(inNetBuffer.buf(),appBuffer.buf());    status=res.getStatus();    handshakeStatus=res.getHandshakeStatus();    if (status == Status.BUFFER_OVERFLOW) {      appBuffer.capacity(appBuffer.capacity() << 1);      appBuffer.limit(appBuffer.capacity());      continue;    }  } while (((status == Status.OK) || (status == Status.BUFFER_OVERFLOW)) && ((handshakeStatus == HandshakeStatus.NOT_HANDSHAKING) || (handshakeStatus == HandshakeStatus.NEED_UNWRAP)));  return res;}  }
class C{  public boolean isBackupNull(){  Object oo=get_Value(COLUMNNAME_IsBackupNull);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void focusLost(FocusEvent e){  AWTEventMonitor.componentWithFocus_private=null;  if (AWTEventMonitor.focusListener_private != null) {    AWTEventMonitor.focusListener_private.focusLost(e);  }}  }
class C{  protected ConfigException(Throwable e){  super(message(e),e);}  }
class C{  public DomainConfig connect(DomainConfig config){  this.domain=fetch(config);  return this.domain;}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=crossCheckStateCount;  stateCount[0]=0;  stateCount[1]=0;  stateCount[2]=0;  int i=startI;  while (i >= 0 && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i++;  }  if (i == maxI || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[2] <= maxCount) {    stateCount[2]++;    i++;  }  if (stateCount[2] > maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  @Override public void addPageFailureMessage(final String value){  pageSuccessful=false;  pageErrorMessages=pageErrorMessages + value + '\n';}  }
class C{  @RequestMapping(value="/SAML2/IDPSSO") public void ssoDefaultTenantError(Locale locale,HttpServletResponse response) throws IOException {  logger.info("IDP SSO error! The client locale is " + locale.toString() + ", DEFAULT tenant");  ValidationResult vr=new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,"BadRequest","Binding");  String message=vr.getMessage(messageSource,locale);  response.sendError(vr.getResponseCode(),message);  logger.info("Responded with ERROR " + vr.getResponseCode() + ", message "+ message);}  }
class C{  public static void filledRectangle(double x,double y,double halfWidth,double halfHeight){  if (!(halfWidth >= 0))   throw new IllegalArgumentException("half width must be nonnegative");  if (!(halfHeight >= 0))   throw new IllegalArgumentException("half height must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * halfWidth);  double hs=factorY(2 * halfHeight);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public NumericItem(Attribute att,double splitPoint,Comparison comp) throws Exception {  super(att);  if (!att.isNumeric()) {    throw new Exception("NumericItem must be constructed using a numeric attribute");  }  m_comparison=comp;  m_splitPoint=splitPoint;}  }
class C{  public static void captureImage(Context mContext,@SuppressWarnings("SameParameterValue") int CAMERA_CAPTURE_IMAGE_REQUEST_CODE,@SuppressWarnings("SameParameterValue") String camera){  Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);  fileUri=getOutputMediaFileUri(MEDIA_TYPE_IMAGE);  intent.putExtra(MediaStore.EXTRA_OUTPUT,fileUri);  if (camera.equalsIgnoreCase("Front")) {    intent.putExtra("android.intent.extras.CAMERA_FACING",Camera.CameraInfo.CAMERA_FACING_FRONT);  } else   if (camera.equalsIgnoreCase("Back")) {    intent.putExtra("android.intent.extras.CAMERA_FACING",Camera.CameraInfo.CAMERA_FACING_BACK);  }  ((Activity)mContext).startActivityForResult(intent,CAMERA_CAPTURE_IMAGE_REQUEST_CODE);}  }
class C{  public static LogFlattener createLogFlattener(){  return new DefaultLogFlattener();}  }
class C{  public PdfRendererBuilder useFont(FSSupplier<InputStream> supplier,String fontFamily,Integer fontWeight,FontStyle fontStyle,boolean subset){  this._fonts.add(new AddedFont(supplier,fontWeight,fontFamily,subset,fontStyle));  return this;}  }
class C{  void name(String name){  this.name=name;}  }
class C{  public int lastIndexOf(char c,int fromIndex){  if (_data != null) {    for (int i=MathLib.min(fromIndex,_count - 1); i >= 0; i--) {      if (_data[i] == c)       return i;    }    return -1;  } else {    final int cesure=_head._count;    if (fromIndex >= cesure) {      final int tailIndex=_tail.lastIndexOf(c,fromIndex - cesure);      if (tailIndex >= 0)       return tailIndex + cesure;    }    return _head.lastIndexOf(c,fromIndex);  }}  }
class C{  public void emitNOP(){  int mi=24 << 26;  appendInstruction(mi);}  }
class C{  private static int prepareCodeForToken(final JBBPToken token,final JBBPCustomFieldTypeProcessor customTypeFieldProcessor){  int result=-1;switch (token.getType()) {case ATOM:{      final JBBPFieldTypeParameterContainer descriptor=token.getFieldTypeParameters();      result=descriptor.getByteOrder() == JBBPByteOrder.LITTLE_ENDIAN ? FLAG_LITTLE_ENDIAN : 0;      final boolean hasExpressionAsExtraNumber=descriptor.hasExpressionAsExtraData();      result|=token.getArraySizeAsString() == null ? 0 : (token.isVarArrayLength() ? FLAG_ARRAY | FLAG_WIDE | (EXT_FLAG_EXPRESSION_OR_WHOLESTREAM << 8) : FLAG_ARRAY);      result|=hasExpressionAsExtraNumber ? FLAG_WIDE | (EXT_FLAG_EXTRA_AS_EXPRESSION << 8) : 0;      result|=token.getFieldName() == null ? 0 : FLAG_NAMED;      final String name=descriptor.getTypeName().toLowerCase(Locale.ENGLISH);      if ("skip".equals(name)) {        result|=CODE_SKIP;      } else       if ("align".equals(name)) {        result|=CODE_ALIGN;      } else       if ("bit".equals(name)) {        result|=CODE_BIT;      } else       if ("var".equals(name)) {        result|=CODE_VAR;      } else       if ("bool".equals(name)) {        result|=CODE_BOOL;      } else       if ("ubyte".equals(name)) {        result|=CODE_UBYTE;      } else       if ("byte".equals(name)) {        result|=CODE_BYTE;      } else       if ("ushort".equals(name)) {        result|=CODE_USHORT;      } else       if ("short".equals(name)) {        result|=CODE_SHORT;      } else       if ("int".equals(name)) {        result|=CODE_INT;      } else       if ("long".equals(name)) {        result|=CODE_LONG;      } else       if ("reset$$".equals(name)) {        result|=CODE_RESET_COUNTER;      } else {        boolean unsupportedType=true;        if (customTypeFieldProcessor != null) {          for (          final String s : customTypeFieldProcessor.getCustomFieldTypes()) {            if (name.equals(s)) {              result|=CODE_CUSTOMTYPE;              unsupportedType=false;              break;            }          }        }        if (unsupportedType) {          throw new JBBPCompilationException("Unsupported type [" + descriptor.getTypeName() + ']',token);        }      }    }  break;case COMMENT:{}break;case STRUCT_START:{result=token.getArraySizeAsString() == null ? 0 : (token.isVarArrayLength() ? FLAG_ARRAY | FLAG_WIDE | (EXT_FLAG_EXPRESSION_OR_WHOLESTREAM << 8) : FLAG_ARRAY);result|=token.getFieldName() == null ? 0 : FLAG_NAMED;result|=CODE_STRUCT_START;}break;case STRUCT_END:{result=CODE_STRUCT_END;}break;default :throw new Error("Unsupported type detected, contact developer! [" + token.getType() + ']');}return result;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.TAG__TITLE:    return basicSetTitle(null,msgs);case DomPackage.TAG__VALUES:  return ((InternalEList<?>)getValues()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void stopWorkspace(String workspaceId) throws ServerException, NotFoundException, ConflictException {  stopWorkspace(workspaceId,null);}  }
class C{  public void bind(ServerSocketBar ss) throws IOException {  Objects.requireNonNull(ss);  _isBind.set(true);  if (_protocol == null)   throw new IllegalStateException(L.l("'{0}' must have a configured protocol before starting.",this));  if (_throttle == null)   _throttle=new ThrottleSocket();  _serverSocket=ss;  String scheme=_protocol.name();  if (_address != null)   log.info(scheme + " listening to " + _address+ ":"+ _port); else   log.info(scheme + " listening to *:" + _port);  if (_sslFactory != null) {    try {      _serverSocket=_sslFactory.bind(_serverSocket);    } catch (    RuntimeException e) {      throw e;    }catch (    IOException e) {      throw e;    }catch (    Exception e) {      throw new IOException(e);    }  }}  }
class C{  @Nonnull public BugInstance addField(String className,String fieldName,String fieldSig,boolean isStatic){  addField(new FieldAnnotation(className,fieldName,fieldSig,isStatic));  return this;}  }
class C{  public void insert(NodeDescriptor parent,int index,Node child){  int initialCount=parent.getChildren().size();  parent.addChild(index,wrap(child));  if (parent.getChildren().size() != initialCount) {    int addedIndex=-1;    if (isSorted()) {      List<NodeDescriptor> childrenModels=parent.getChildren();      for (int i=0; i < childrenModels.size(); i++) {        if (childrenModels.get(i).getNode().equals(child)) {          addedIndex=i;          break;        }      }    } else {      addedIndex=index;    }    fireEvent(new StoreAddEvent(addedIndex,child));  }}  }
class C{  @Override public void header(String key,String value){  _is.header(key,value);}  }
class C{  public static boolean isBitmapFontEnabled(){  return enableBitmapFont;}  }
class C{  @Override public Collection<OFMessage> write(final Iterable<OFMessage> msgList){  if (!isConnected()) {    if (logger.isDebugEnabled())     logger.debug(this.toString() + " : not connected - dropping {} element msglist {} ",Iterables.size(msgList),String.valueOf(msgList).substring(0,80));    return IterableUtils.toCollection(msgList);  }  for (  OFMessage m : msgList) {    if (logger.isTraceEnabled()) {      logger.trace("{}: send {}",this,m);      counters.updateWriteStats(m);    }  }  this.channel.eventLoop().execute(new WriteMessageTask(msgList));  return Collections.emptyList();}  }
class C{  public MarkovChain(){  createStarterEntries();}  }
class C{  public void testIntValue(){  LongAdder ai=new LongAdder();  assertEquals(0,ai.intValue());  ai.increment();  assertEquals(1,ai.intValue());}  }
class C{  public SnowballAnalyzer(String name){  this.name=name;}  }
class C{  protected int writeObject(STWriter out,InstanceScope scope,Object o,String[] options){  int n=0;  if (o == null) {    if (options != null && options[Option.NULL.ordinal()] != null) {      o=options[Option.NULL.ordinal()];    } else     return 0;  }  if (o instanceof ST) {    scope=new InstanceScope(scope,(ST)o);    if (options != null && options[Option.WRAP.ordinal()] != null) {      try {        out.writeWrap(options[Option.WRAP.ordinal()]);      } catch (      IOException ioe) {        errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe);      }    }    n=exec(out,scope);  } else {    o=convertAnythingIteratableToIterator(scope,o);    try {      if (o instanceof Iterator)       n=writeIterator(out,scope,o,options); else       n=writePOJO(out,scope,o,options);    } catch (    IOException ioe) {      errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe,o);    }  }  return n;}  }
class C{  public static Response createRefreshErrorResponse(char errorCode,String reasonPhrase){  Response refreshErrorResponse=new Response();  try {    refreshErrorResponse.setMessageType(Message.REFRESH_ERROR_RESPONSE);    ErrorCodeAttribute errorCodeAttribute=AttributeFactory.createErrorCodeAttribute(errorCode,reasonPhrase);    refreshErrorResponse.putAttribute(errorCodeAttribute);  } catch (  IllegalArgumentException ex) {    logger.log(Level.FINE,"Failed to set message type.",ex);  }  return refreshErrorResponse;}  }
class C{  public Object createMask(){  int[] rgb=getRGBCached();  int rlen=rgb.length;  byte[] mask=new byte[rlen];  for (int iter=0; iter < rlen; iter++) {    mask[iter]=(byte)(rgb[iter] & 0xff);  }  return new IndexedImage(getWidth(),getHeight(),null,mask);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:23.944 -0500",hash_original_method="FB7AFAD158F104C5EE0D062F7452B9D0",hash_generated_method="F0F6FE2D7660908EBD9C2CBA85446EC1") public E push(E object){  addElement(object);  return object;}  }
class C{  public boolean isAwake(){  return (m_flags & e_awakeFlag) == e_awakeFlag;}  }
class C{  public boolean hasToHandleFailover(QueryException exception){  return exception.getSqlState() != null && exception.getSqlState().startsWith("08");}  }
class C{  public RemoteAtRequest(int frameId,XBeeAddress64 remoteAddress64,XBeeAddress16 remoteAddress16,boolean applyChanges,String command){  this(frameId,remoteAddress64,remoteAddress16,applyChanges,command,null);}  }
class C{  public static long start(final int segment){  return (long)segment << SEGMENT_SHIFT;}  }
class C{  private void updateColor(){  double activation=neuron.getActivation();  if ((activation > -.1) && (activation < .1)) {    mainShape.setPaint(Color.white);  } else   if (activation > 0) {    float saturation=checkSaturationValid((float)Math.abs(activation / neuron.getUpdateRule().getGraphicalUpperBound()));    mainShape.setPaint(Color.getHSBColor(hotColor,saturation,1));  } else   if (activation < 0) {    float saturation=checkSaturationValid((float)Math.abs(activation / neuron.getUpdateRule().getGraphicalLowerBound()));    mainShape.setPaint(Color.getHSBColor(coolColor,saturation,1));  }  if (neuron.isSpike()) {    mainShape.setStrokePaint(spikingColor);    mainShape.setPaint(spikingColor);  } else {    mainShape.setStrokePaint(SynapseNode.getLineColor());  }}  }
class C{  public final String lineSource(){  return lineSource;}  }
class C{  @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.822 -0500",hash_original_method="59F041575984EC96DFD0048B067EB3F8",hash_generated_method="67DB68E6109BDF76F718C4F5354A00B6") @DSVerified @DSSpec(DSCat.IO) public static final long copyStream(InputStream source,OutputStream dest,int bufferSize,long streamSize,CopyStreamListener listener) throws CopyStreamException {  return copyStream(source,dest,bufferSize,streamSize,listener,true);}  }
class C{  public static void verifyVolumeIsFullCopy(Volume fullCopyVolume){  if (NullColumnValueGetter.isNullURI(fullCopyVolume.getAssociatedSourceVolume())) {    throw APIException.badRequests.protectionOnlyFullCopyVolumesCanBeActivated();  }}  }
class C{  public static void playPlaylist(Context context,Playlist playlist){  Intent intent=new Intent(context,PodcastPlayerService.class);  intent.setAction(PodcastPlayerService.ACTION_PLAY_PLAYLIST);  intent.putExtra(PARAM_PLAYLIST,Parcels.wrap(playlist));  context.startService(intent);}  }
class C{  @Override public boolean supportsCatalogsInDataManipulation(){  debugCodeCall("supportsCatalogsInDataManipulation");  return true;}  }
class C{  public void put(String key,String customFileName,File file) throws FileNotFoundException {  put(key,file,null,customFileName);}  }
class C{  public void testBug68400() throws Exception {  Field f=com.mysql.jdbc.NonRegisteringDriver.class.getDeclaredField("connectionPhantomRefs");  f.setAccessible(true);  Map<?,?> connectionTrackingMap=(Map<?,?>)f.get(com.mysql.jdbc.NonRegisteringDriver.class);  Field referentField=java.lang.ref.Reference.class.getDeclaredField("referent");  referentField.setAccessible(true);  createTable("testBug68400","(x VARCHAR(255) NOT NULL DEFAULT '')");  String s1="a very very very very very very very very very very very very very very very very very very very very very very very very large string to ensure compression enabled";  this.stmt.executeUpdate("insert into testBug68400 values ('" + s1 + "')");  Properties props=new Properties();  props.setProperty("useCompression","true");  props.setProperty("connectionAttributes","testBug68400:true");  testMemLeakBatch(props,connectionTrackingMap,referentField,0,0,s1,"testBug68400:true");  testMemLeakBatch(props,connectionTrackingMap,referentField,0,1,s1,"testBug68400:true");  testMemLeakBatch(props,connectionTrackingMap,referentField,0,2,s1,"testBug68400:true");  System.out.println("Done.");}  }
class C{  public FciDsepLegalPairs(Graph graph){  if (graph == null) {    throw new NullPointerException();  }  this.graph=graph;}  }
class C{  public DrawerBuilder withTranslucentStatusBarShadow(Boolean translucentStatusBarShadow){  this.mTranslucentStatusBarShadow=translucentStatusBarShadow;  return this;}  }
class C{  private static float computeModuleWidth(ResultPoint[] vertices){  float pixels1=ResultPoint.distance(vertices[0],vertices[4]);  float pixels2=ResultPoint.distance(vertices[1],vertices[5]);  float moduleWidth1=(pixels1 + pixels2) / (17 * 2.0f);  float pixels3=ResultPoint.distance(vertices[6],vertices[2]);  float pixels4=ResultPoint.distance(vertices[7],vertices[3]);  float moduleWidth2=(pixels3 + pixels4) / (18 * 2.0f);  return (moduleWidth1 + moduleWidth2) / 2.0f;}  }
class C{  public LineReader(InputStream in){  this.reader=new BufferedReader(new InputStreamReader(in,StandardCharsets.UTF_8));  display_progress=false;}  }
class C{  public boolean releasePersistentLock(String lockId) throws Exception {  DistributedPersistentLock lock=_coordinator.getSiteLocalPersistentLock(lockId);  if (lock != null) {    String lockOwner=lock.getLockOwner();    if (lockOwner == null) {      _log.info("Upgrade lock is not held by any node");      return true;    }    boolean result=lock.releaseLock(lockOwner);    if (result) {      _log.info("Upgrade lock {} released successfully",lockId);      return true;    } else {      _log.info("Upgrade lock {} released failed",lockId);    }  }  return false;}  }
class C{  protected StepPattern stepPattern(int opPos,int stepCount,StepPattern ancestorPattern) throws TransformerException {  int startOpPos=opPos;  int stepType=getOp(opPos);  if (OpCodes.ENDOP == stepType) {    return null;  }  boolean addMagicSelf=true;  int endStep=getNextOpPos(opPos);  StepPattern pattern;  int argLen;switch (stepType) {case OpCodes.OP_FUNCTION:    if (DEBUG)     System.out.println("MATCH_FUNCTION: " + m_currentPattern);  addMagicSelf=false;argLen=getOp(opPos + OpMap.MAPINDEX_LENGTH);pattern=new FunctionPattern(compileFunction(opPos),Axis.PARENT,Axis.CHILD);break;case OpCodes.FROM_ROOT:if (DEBUG) System.out.println("FROM_ROOT, " + m_currentPattern);addMagicSelf=false;argLen=getArgLengthOfStep(opPos);opPos=getFirstChildPosOfStep(opPos);pattern=new StepPattern(DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT,Axis.PARENT,Axis.CHILD);break;case OpCodes.MATCH_ATTRIBUTE:if (DEBUG) System.out.println("MATCH_ATTRIBUTE: " + getStepLocalName(startOpPos) + ", "+ m_currentPattern);argLen=getArgLengthOfStep(opPos);opPos=getFirstChildPosOfStep(opPos);pattern=new StepPattern(DTMFilter.SHOW_ATTRIBUTE,getStepNS(startOpPos),getStepLocalName(startOpPos),Axis.PARENT,Axis.ATTRIBUTE);break;case OpCodes.MATCH_ANY_ANCESTOR:if (DEBUG) System.out.println("MATCH_ANY_ANCESTOR: " + getStepLocalName(startOpPos) + ", "+ m_currentPattern);argLen=getArgLengthOfStep(opPos);opPos=getFirstChildPosOfStep(opPos);int what=getWhatToShow(startOpPos);if (0x00000500 == what) addMagicSelf=false;pattern=new StepPattern(getWhatToShow(startOpPos),getStepNS(startOpPos),getStepLocalName(startOpPos),Axis.ANCESTOR,Axis.CHILD);break;case OpCodes.MATCH_IMMEDIATE_ANCESTOR:if (DEBUG) System.out.println("MATCH_IMMEDIATE_ANCESTOR: " + getStepLocalName(startOpPos) + ", "+ m_currentPattern);argLen=getArgLengthOfStep(opPos);opPos=getFirstChildPosOfStep(opPos);pattern=new StepPattern(getWhatToShow(startOpPos),getStepNS(startOpPos),getStepLocalName(startOpPos),Axis.PARENT,Axis.CHILD);break;default :error(XPATHErrorResources.ER_UNKNOWN_MATCH_OPERATION,null);return null;}pattern.setPredicates(getCompiledPredicates(opPos + argLen));if (null == ancestorPattern) {} else {pattern.setRelativePathPattern(ancestorPattern);}StepPattern relativePathPattern=stepPattern(endStep,stepCount + 1,pattern);return (null != relativePathPattern) ? relativePathPattern : pattern;}  }
class C{  private void createValue(){  KeyNamePair pp=(KeyNamePair)fWarehouse.getSelectedItem();  if (pp == null)   return;  getWarehouseInfo(pp.getKey());  StringBuffer buf=new StringBuffer(m_M_WarehouseValue);  buf.append(m_Separator).append(fX.getText());  buf.append(m_Separator).append(fY.getText());  buf.append(m_Separator).append(fZ.getText());  fValue.setText(buf.toString());}  }
class C{  public static String toString(URL url,String encoding) throws IOException {  return toString(url,Charsets.toCharset(encoding));}  }
class C{  ErrorCodeAttribute(){  super(ERROR_CODE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.198 -0500",hash_original_method="2A70F6675BC0E5B7285963B33CF05633",hash_generated_method="CEA6E8CB86D8633F992546500EB30A04") public String query(boolean longOutput,String username) throws IOException {  int read;  StringBuffer result=new StringBuffer(__buffer.length);  BufferedReader input;  input=new BufferedReader(new InputStreamReader(getInputStream(longOutput,username)));  while (true) {    read=input.read(__buffer,0,__buffer.length);    if (read <= 0)     break;    result.append(__buffer,0,read);  }  input.close();  return result.toString();}  }
class C{  public byte[] unpad(byte[] padded) throws BadPaddingException {  if (padded.length != paddedSize) {    throw new BadPaddingException("Decryption error");  }switch (type) {case PAD_NONE:    return padded;case PAD_BLOCKTYPE_1:case PAD_BLOCKTYPE_2:  return unpadV15(padded);case PAD_OAEP_MGF1:return unpadOAEP(padded);default :throw new AssertionError();}}  }
class C{  @Override public boolean isBusy(){  return false;}  }
class C{  public void removeNode(Node node){  nodePositions.remove(node.getId());  getChildren().remove(node);}  }
class C{  public SolrQuery addFacetField(String... fields){  add(FacetParams.FACET_FIELD,fields);  this.set(FacetParams.FACET,true);  return this;}  }
class C{  public static <E,C extends Collection<E>>C addAll(Iterator<? extends E> iter,C collection){  while (iter.hasNext()) {    collection.add(iter.next());  }  return collection;}  }
class C{  private static Map<String,Object> buildSource(ResultSet rs) throws SQLException {  Heading heading=headingFromResultSet(rs.getMetaData());  HashMap<String,Object> source=new HashMap<String,Object>();  while (rs.next()) {    for (    Column col : heading.columns()) {      String label=col.getLabel();      Object value=rs.getObject(label);      if (value == null)       continue;      if (value instanceof ResultSet) {        value=buildSource((ResultSet)value);      } else       if (value instanceof Array) {        Object[] arrayVal=(Object[])((Array)value).getArray();        if (arrayVal.length > 0 && arrayVal[0] instanceof ResultSet) {          for (int i=0; i < arrayVal.length; i++) {            arrayVal[i]=buildSource((ResultSet)arrayVal[i]);          }        }      }      source.put(label,value);    }  }  if (source.size() == 0)   return null;  return source;}  }
class C{  public Target(Remote impl,Dispatcher disp,Remote stub,ObjID id,boolean permanent){  this.weakImpl=new WeakRef(impl,ObjectTable.reapQueue);  this.disp=disp;  this.stub=stub;  this.id=id;  this.acc=AccessController.getContext();  ClassLoader threadContextLoader=Thread.currentThread().getContextClassLoader();  ClassLoader serverLoader=impl.getClass().getClassLoader();  if (checkLoaderAncestry(threadContextLoader,serverLoader)) {    this.ccl=threadContextLoader;  } else {    this.ccl=serverLoader;  }  this.permanent=permanent;  if (permanent) {    pinImpl();  }}  }
class C{  public q addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void removeColumn(DefaultTableColumn column){  columnModel.removeColumn(column);}  }
class C{  protected final boolean contains(int n){  return (regAllocState.getDFN(begin) <= n && regAllocState.getDFN(end) > n);}  }
class C{  private X509Certificate[] cleanupCertChainAndFindTrustAnchors(X509Certificate[] chain,Set<TrustAnchor> trustAnchors){  X509Certificate[] original=chain;  int currIndex;  for (currIndex=0; currIndex < chain.length; currIndex++) {    boolean foundNext=false;    for (int nextIndex=currIndex + 1; nextIndex < chain.length; nextIndex++) {      if (chain[currIndex].getIssuerDN().equals(chain[nextIndex].getSubjectDN())) {        foundNext=true;        if (nextIndex != currIndex + 1) {          if (chain == original) {            chain=original.clone();          }          X509Certificate tempCertificate=chain[nextIndex];          chain[nextIndex]=chain[currIndex + 1];          chain[currIndex + 1]=tempCertificate;        }        break;      }    }    if (!foundNext) {      break;    }  }  int anchorIndex;  for (anchorIndex=0; anchorIndex <= currIndex; anchorIndex++) {    TrustAnchor trustAnchor=findTrustAnchorBySubjectAndPublicKey(chain[anchorIndex]);    if (trustAnchor != null) {      trustAnchors.add(trustAnchor);      break;    }  }  int chainLength=anchorIndex;  X509Certificate[] newChain=((chainLength == chain.length) ? chain : Arrays.copyOf(chain,chainLength));  if (trustAnchors.isEmpty()) {    TrustAnchor trustAnchor=findTrustAnchorByIssuerAndSignature(newChain[anchorIndex - 1]);    if (trustAnchor != null) {      trustAnchors.add(trustAnchor);    }  }  return newChain;}  }
class C{  private IoBuffer encodeProxyRequestPacket(final SocksProxyRequest request) throws UnsupportedEncodingException {  int len=6;  InetSocketAddress adr=request.getEndpointAddress();  byte addressType=0;  byte[] host=null;  if (adr != null && !adr.isUnresolved()) {    if (adr.getAddress() instanceof Inet6Address) {      len+=16;      addressType=SocksProxyConstants.IPV6_ADDRESS_TYPE;    } else     if (adr.getAddress() instanceof Inet4Address) {      len+=4;      addressType=SocksProxyConstants.IPV4_ADDRESS_TYPE;    }  } else {    host=request.getHost() != null ? request.getHost().getBytes("ASCII") : null;    if (host != null) {      len+=1 + host.length;      addressType=SocksProxyConstants.DOMAIN_NAME_ADDRESS_TYPE;    } else {      throw new IllegalArgumentException("SocksProxyRequest object " + "has no suitable endpoint information");    }  }  IoBuffer buf=IoBuffer.allocate(len);  buf.put(request.getProtocolVersion());  buf.put(request.getCommandCode());  buf.put((byte)0x00);  buf.put(addressType);  if (host == null) {    buf.put(request.getIpAddress());  } else {    buf.put((byte)host.length);    buf.put(host);  }  buf.put(request.getPort());  return buf;}  }
class C{  public static boolean isConnectedWifi(Context context){  NetworkInfo info=NetworkUtil.getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_WIFI);}  }
class C{  private static long parseLockTimeStr(String lockTimeStr) throws ParseException {  if (lockTimeStr.indexOf("/") != -1) {    SimpleDateFormat format=new SimpleDateFormat("yyyy/MM/dd",Locale.US);    Date date=format.parse(lockTimeStr);    return date.getTime() / 1000;  }  return Long.parseLong(lockTimeStr);}  }
class C{  public static String capitalize(@NonNull String input){  if (input.length() == 0) {    return input;  }  return input.substring(0,1).toUpperCase(Locale.getDefault()) + input.substring(1);}  }
class C{  public java.util.Date shortDate(){  return new ShortDate();}  }
class C{  public void beforeFirst() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    if (this.onInsertRow) {      this.onInsertRow=false;    }    if (this.doingUpdates) {      this.doingUpdates=false;    }    if (this.rowData.size() == 0) {      return;    }    if (this.thisRow != null) {      this.thisRow.closeOpenStreams();    }    this.rowData.beforeFirst();    this.thisRow=null;    setRowPositionValidity();  }}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  public static long parseLong(java.lang.String s,int radix) throws java.lang.NumberFormatException {  return 0l;}  }
class C{  private synchronized void refreshResolvedRules(String selectorName,String[] selector,Style newStyle,int specificity){  if (resolvedStyles.size() > 0) {    Enumeration<ResolvedStyle> values=resolvedStyles.elements();    while (values.hasMoreElements()) {      ResolvedStyle style=values.nextElement();      if (style.matches(selectorName)) {        style.insertStyle(newStyle,specificity);      }    }  }}  }
class C{  private void ensureOutputDirectory(Path dir){  if (!Files.exists(dir)) {    try {      Files.createDirectories(dir);    } catch (    IOException e) {      throw ShowMessageException.error("Error created output directory " + dir,null);    }  } else   if (!Files.isDirectory(dir))   throw ShowMessageException.error("Output directory " + dir + " is not a directory",null);}  }
class C{  public void union(IntArray newArray){  for (int i=0; i < newArray._size; i++) {    if (!contains(newArray._data[i]))     add(newArray._data[i]);  }}  }
class C{  public void testConstrLong(){  long a=4576578677732546982L;  String res="4576578677732546982";  int resScale=0;  BigDecimal result=new BigDecimal(a);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public ParcelFileDescriptor openAccessory(UsbAccessory accessory){  try {    return mService.openAccessory(accessory);  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException in openAccessory",e);    return null;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_ENUM_1__STATE_NAME_1:    setStateName_1(STATE_NAME_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr createdAttr;  doc=(Document)load("hc_staff",true);{    boolean success=false;    try {      createdAttr=doc.createAttribute("invalid^Name");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {  if (null != m_resultDTDHandler)   m_resultDTDHandler.notationDecl(name,publicId,systemId);}  }
class C{  public NorwegianLightStemmer(int flags){  if (flags <= 0 || flags > BOKMAAL + NYNORSK) {    throw new IllegalArgumentException("invalid flags");  }  useBokmaal=(flags & BOKMAAL) != 0;  useNynorsk=(flags & NYNORSK) != 0;}  }
class C{  protected void sendMomentaryFunctionGroup3(){  if (tc.getCommandStation().getCommandStationType() == 0x10) {    if (log.isDebugEnabled()) {      log.debug("Command station does not support Momentary functions");    }    return;  }  XNetMessage msg=XNetMessage.getFunctionGroup3SetMomMsg(this.getDccAddress(),f9Momentary,f10Momentary,f11Momentary,f12Momentary);  queueMessage(msg,THROTTLEFUNCSENT);}  }
class C{  public static boolean isInterface(int flags){  return (flags & AccInterface) != 0;}  }
class C{  public boolean isDrawGraticule(String key){  if (key == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return getRenderingParams(key).isDrawLines();}  }
class C{  public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if (len < 0) {    throw new IllegalArgumentException("Can't have a negative input length!");  }  int blockSize=getBlockSize();  int length=getUpdateOutputSize(len);  if (length > 0) {    if ((outOff + length) > out.length) {      throw new DataLengthException("output buffer too short");    }  }  int resultLen=0;  int gapLen=buf.length - bufOff;  if (len > gapLen) {    System.arraycopy(in,inOff,buf,bufOff,gapLen);    resultLen+=cipher.processBlock(buf,0,out,outOff);    bufOff=0;    len-=gapLen;    inOff+=gapLen;    while (len > buf.length) {      resultLen+=cipher.processBlock(in,inOff,out,outOff + resultLen);      len-=blockSize;      inOff+=blockSize;    }  }  System.arraycopy(in,inOff,buf,bufOff,len);  bufOff+=len;  return resultLen;}  }
class C{  public boolean interiorContains(final S1Interval y){  if (isInverted()) {    if (!y.isInverted()) {      return y.lo() > lo() || y.hi() < hi();    }    return (y.lo() > lo() && y.hi() < hi()) || y.isEmpty();  } else {    if (y.isInverted()) {      return isFull() || y.isEmpty();    }    return (y.lo() > lo() && y.hi() < hi()) || isFull();  }}  }
class C{  public DelphiRuleViolation(DelphiRule rule,RuleContext ctx,DelphiPMDNode node){  this(rule,ctx,node,rule.getMessage());}  }
class C{  private void validateModification(){  Collection entries=((LocalRegion)region).entries.regionEntries();  if (entries.size() != 1) {    fail("expected size to be 1 but is not so");  }  RegionEntry entry=(RegionEntry)entries.iterator().next();  DiskId id=((DiskEntry)entry).getDiskId();  Object obj=((LocalRegion)region).getDiskRegion().get(id);  if (!(obj.equals(new Integer(2)))) {    fail("incorrect modification");  }}  }
class C{  static String encodeURLString(String stringToEncode){  try {    return java.net.URLEncoder.encode(stringToEncode,"UTF-8").replace("+",ENCODED_SPACE_CHARACTER);  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  private static byte[] adjustKey(String key,int length) throws UnsupportedEncodingException {  byte keyBytes[]=new byte[length];  Arrays.fill(keyBytes,(byte)0);  byte realKey[]=key.getBytes();  int n=0;  for (  byte b : realKey)   keyBytes[n++ % length]^=b;  return keyBytes;}  }
class C{  @Override protected void hitOrDraw(Graphics2D graphics,DrawInfo2D info,Bag putInHere){  if (field == null) {    return;  }  if (graphics != null && immutableField && !info.precise) {    GeomVectorField geomField=(GeomVectorField)field;    double x=info.clip.x;    double y=info.clip.y;    boolean dirty=false;    if (buffer == null || buffer.getWidth() != info.clip.width || buffer.getHeight() != info.clip.height || hints == null || !hints.equals(graphics.getRenderingHints())) {      hints=graphics.getRenderingHints();      buffer=new BufferedImage((int)info.clip.width,(int)info.clip.height,BufferedImage.TYPE_INT_ARGB);      dirty=true;    }    if (geomField.drawX != x || geomField.drawY != y) {      dirty=true;    }    geomField.drawX=x;    geomField.drawY=y;    if (dirty) {      clearBufferedImage(buffer);      Graphics2D newGraphics=(Graphics2D)buffer.getGraphics();      newGraphics.setRenderingHints(hints);      hitOrDraw2(newGraphics,new DrawInfo2D(info,-x,-y),putInHere);      newGraphics.dispose();    }    graphics.drawImage(buffer,(int)x,(int)y,null);  } else   if (graphics == null) {    hitOrDraw2(graphics,info,putInHere);  } else {    buffer=null;    hitOrDraw2(graphics,info,putInHere);  }}  }
class C{  public final boolean hasResponseBody(){  int responseCode=responseHeaders.getHeaders().getResponseCode();  if (method.equals("HEAD")) {    return false;  }  if ((responseCode < HTTP_CONTINUE || responseCode >= 200) && responseCode != HttpURLConnectionImpl.HTTP_NO_CONTENT && responseCode != HttpURLConnectionImpl.HTTP_NOT_MODIFIED) {    return true;  }  if (responseHeaders.getContentLength() != -1 || responseHeaders.isChunked()) {    return true;  }  return false;}  }
class C{  protected void cargarListaUsuariosSolicitantes(HttpServletRequest request,ConsultaForm consultaForm){  AppUser appUser=getAppUser(request);  if (consultaForm.isTipoEntidadInvestigador()) {    if (appUser.hasPermissionGestionSolicitudesConsultas()) {      List listaUsuarios=new ArrayList();      if (consultaForm.isCheckedConsultaEnSala()) {        listaUsuarios=getGestionSalasBI(request).getUsuariosConPermisoConsultaSala(consultaForm.getIdarchivo(),consultaForm.getFiltroUsuario());        if (ListUtils.isNotEmpty(listaUsuarios)) {          UsuarioSalasConsultaVO usuarioNulo=new UsuarioSalasConsultaVO();          listaUsuarios.add(0,usuarioNulo);        }      } else {        listaUsuarios=(List)getUsuarioInvestigadores(getGestionControlUsuarios(request),consultaForm.getFiltroUsuario());        if (ListUtils.isNotEmpty(listaUsuarios)) {          UsuarioVO usuarioNulo=new UsuarioVO();          listaUsuarios.add(0,usuarioNulo);        }      }      setInTemporalSession(request,ConsultasConstants.LISTA_USUARIOS_CONSULTAS_KEY,listaUsuarios);    }  }}  }
class C{  public void addLocalPartitionMap(int cacheId,GridDhtPartitionMap2 locMap){  if (parts == null)   parts=new HashMap<>();  parts.put(cacheId,locMap);}  }
class C{  public CUgraphicsResource(){}  }
class C{  private void validateInput(){  final String alertId=alertIDText.getText().trim();  alert=StringUtils.isEmpty(alertId) ? null : availableAlerts.get(alertId);  if (null == alert) {    okButton.setEnabled(false);    if (StringUtils.isEmpty(alertId)) {      AlertSelectionDialog.this.setMessage("No alert id specified!",IMessageProvider.ERROR);    } else {      AlertSelectionDialog.this.setMessage("There is no alert with id '" + alertId + "'!",IMessageProvider.ERROR);    }  } else {    okButton.setEnabled(true);    AlertSelectionDialog.this.setMessage("Selected alert:\n" + TextFormatter.getAlertDescription(alert),IMessageProvider.INFORMATION);  }}  }
class C{  public static Query removeBooleanClause(Query inputQuery,Query inputClause){  if (inputQuery.booleanClauses == null || inputClause == null) {    return inputQuery;  }  for (  Query clause : inputQuery.booleanClauses) {    if (Objects.equals(clause.term,inputClause.term) && Objects.equals(clause.occurance,inputClause.occurance)) {      inputQuery.booleanClauses.remove(clause);      break;    }  }  return inputQuery;}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  private JButton createAndAddButtonToToolbar(final AbstractAction action,final String defaultIconPath,final String rolloverIconPath,final String pressedIconPath){  final JButton button=add(CActionProxy.proxy(action));  button.setBorder(new EmptyBorder(0,0,0,0));  button.setIcon(new ImageIcon(CMain.class.getResource(defaultIconPath)));  button.setRolloverIcon(new ImageIcon(CMain.class.getResource(rolloverIconPath)));  button.setPressedIcon(new ImageIcon(CMain.class.getResource(pressedIconPath)));  return button;}  }
class C{  HttpServer startHttpServer() throws IOException {  if (debug) {    Logger logger=Logger.getLogger("com.sun.net.httpserver");    Handler outHandler=new StreamHandler(System.out,new SimpleFormatter());    outHandler.setLevel(Level.FINEST);    logger.setLevel(Level.FINEST);    logger.addHandler(outHandler);  }  HttpServer httpServer=HttpServer.create(new InetSocketAddress(0),0);  httpServer.createContext("/flis/",new MyHandler(POST_SIZE));  httpServer.start();  return httpServer;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:55.680 -0500",hash_original_method="DEA7A97D3D4EC63922E017A45C0AA963",hash_generated_method="F0DCFEFD15110B1D5758A76020B55CFF") private boolean processPostDialChar(char c){  if (PhoneNumberUtils.is12Key(c)) {    owner.cm.sendDtmf(c,h.obtainMessage(EVENT_DTMF_DONE));  } else   if (c == PhoneNumberUtils.PAUSE) {    setPostDialState(PostDialState.PAUSE);    h.sendMessageDelayed(h.obtainMessage(EVENT_PAUSE_DONE),PAUSE_DELAY_MILLIS);  } else   if (c == PhoneNumberUtils.WAIT) {    setPostDialState(PostDialState.WAIT);  } else   if (c == PhoneNumberUtils.WILD) {    setPostDialState(PostDialState.WILD);  } else {    return false;  }  return true;}  }
class C{  public T casePair(Pair object){  return null;}  }
class C{  public static void fillBackgroundColor(Graphics2D g2d,Color color){  Shape r=new Rectangle2D.Float(g2d.getClip().getBounds().x,g2d.getClip().getBounds().y,g2d.getClip().getBounds().width,g2d.getClip().getBounds().height);  g2d.setPaint(color);  g2d.fill(r);}  }
class C{  public void updateAmountCost(){  if (movementQuantity.signum() > 0) {    costDetail.setCostAmt(costDetail.getAmt().subtract(costDetail.getCostAdjustment()));    costDetail.setCostAmtLL(costDetail.getAmtLL().subtract(costDetail.getCostAdjustmentLL()));  } else   if (movementQuantity.signum() < 0) {    costDetail.setCostAmt(costDetail.getAmt().add(adjustCost));    costDetail.setCostAmtLL(costDetail.getAmtLL().add(adjustCostLowerLevel));  }  costDetail.setCumulatedQty(getNewAccumulatedQuantity(lastCostDetail));  costDetail.setCumulatedAmt(getNewAccumulatedAmount(lastCostDetail));  costDetail.setCurrentCostPrice(currentCostPrice);  costDetail.setCurrentCostPriceLL(currentCostPriceLowerLevel);  final String idColumnName=CostEngine.getIDColumnName(model);  costDetail.set_ValueOfColumn(idColumnName,CostEngine.getIDColumn(model));  if (model instanceof MInOutLine) {    MInOutLine ioLine=(MInOutLine)model;    costDetail.setC_OrderLine_ID(ioLine.getC_OrderLine_ID());    costDetail.setC_InvoiceLine_ID(0);  }  if (model instanceof MMatchInv && costDetail.getM_InOutLine_ID() == 0) {    MMatchInv iMatch=(MMatchInv)model;    costDetail.setM_InOutLine_ID(iMatch.getM_InOutLine_ID());  }  if (model instanceof MMatchPO && costDetail.getM_InOutLine_ID() == 0) {    MMatchPO poMatch=(MMatchPO)model;    costDetail.setM_InOutLine_ID(poMatch.getM_InOutLine_ID());  }  if (model instanceof MLandedCostAllocation) {    MLandedCostAllocation allocation=(MLandedCostAllocation)model;    costDetail.setM_InOutLine_ID(allocation.getM_InOutLine_ID());    costDetail.setC_InvoiceLine_ID(allocation.getC_InvoiceLine_ID());    costDetail.setProcessed(false);  }  costDetail.saveEx();}  }
class C{  public AuthRequest authenticate(DiscoveryInformation discovered,String returnToUrl) throws MessageException, ConsumerException {  return authenticate(discovered,returnToUrl,returnToUrl);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.631 -0500",hash_original_method="EEC212663EADADCD78540A87E501357F",hash_generated_method="A36D94FB65933FB8D9C8978CB370655C") public static int gluProject(float objX,float objY,float objZ,float[] model,int modelOffset,float[] project,int projectOffset,int[] view,int viewOffset,float[] win,int winOffset){  float[] scratch=sScratch;synchronized (scratch) {    final int M_OFFSET=0;    final int V_OFFSET=16;    final int V2_OFFSET=20;    Matrix.multiplyMM(scratch,M_OFFSET,project,projectOffset,model,modelOffset);    scratch[V_OFFSET + 0]=objX;    scratch[V_OFFSET + 1]=objY;    scratch[V_OFFSET + 2]=objZ;    scratch[V_OFFSET + 3]=1.0f;    Matrix.multiplyMV(scratch,V2_OFFSET,scratch,M_OFFSET,scratch,V_OFFSET);    float w=scratch[V2_OFFSET + 3];    if (w == 0.0f) {      return GL10.GL_FALSE;    }    float rw=1.0f / w;    win[winOffset]=view[viewOffset] + view[viewOffset + 2] * (scratch[V2_OFFSET + 0] * rw + 1.0f) * 0.5f;    win[winOffset + 1]=view[viewOffset + 1] + view[viewOffset + 3] * (scratch[V2_OFFSET + 1] * rw + 1.0f) * 0.5f;    win[winOffset + 2]=(scratch[V2_OFFSET + 2] * rw + 1.0f) * 0.5f;  }  return GL10.GL_TRUE;}  }
class C{  public void listAllEntries() throws IOException, ServiceException {  RecordFeed feed=service.getFeed(recordsFeedUrl,RecordFeed.class);  for (  RecordEntry entry : feed.getEntries()) {    printAndCacheEntry(entry);  }  if (feed.getEntries().size() == 0) {    out.println("No entries yet!");  }}  }
class C{  public void put(String key,float value){  if (value == Float.POSITIVE_INFINITY) {    put(key,"INF");  } else   if (value == Float.NEGATIVE_INFINITY) {    put(key,"-INF");  } else {    put(key,Float.toString(value));  }}  }
class C{  public void syncParseStyleButtons(){  if (world.getTheParseStyle() == ParseStyle.CHARACTER) {    charButton.setSelected(true);  } else   if (world.getTheParseStyle() == ParseStyle.WORD) {    wordButton.setSelected(true);  }}  }
class C{  public static String convertBytesToGBInStr(Long size){  if (size == null) {    return String.format("0");  }  return String.format("%.2f",(size / (double)GB));}  }
class C{  private void mouseEvent(final Point point,final boolean ctrlDown,final boolean rightMouse){  final Polygon p=findPolygon(point.x,point.y);  if (p == null) {    return;  }  if (rightMouse && m_current != null) {    doneCurrentGroup();  } else   if (pointInCurrentPolygon(point)) {    System.out.println("rejecting");    return;  } else   if (ctrlDown) {    if (m_current == null) {      m_current=new ArrayList<>();    }    m_current.add(p);  } else {    m_current=new ArrayList<>();    m_current.add(p);  }  repaint();}  }
class C{  public void add(double... point){  if (this.ok) {    this.points=new LinkedList<>(this.points);    this.ok=false;  }  this.points.add(point);  minmaxX.put(point[0]);  minmaxY.put(point[1]);}  }
class C{  public DataNotFoundException(String message){  super(message);}  }
class C{  private void reportInterruptAfterWait(int interruptMode) throws InterruptedException {  if (interruptMode == THROW_IE)   throw new InterruptedException(); else   if (interruptMode == REINTERRUPT)   selfInterrupt();}  }
class C{  public Object invoke() throws IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException {  return constructor.newInstance(args);}  }
class C{  public String globalInfo(){  return "Writes to a destination that is in JSON format.\n" + "The data can be compressed with gzip, in order to save space.\n\n" + "For more information, see JSON homepage:\n"+ "http://www.json.org/";}  }
class C{  public boolean hasValue(){  return mValue != null;}  }
class C{  public DateColumn(Class type,int nrows,int capacity,long defaultValue){  super(type,TimeLib.getDate(type,defaultValue));  if (!Date.class.isAssignableFrom(type)) {    throw new IllegalArgumentException("Column type must be an " + "instance or subclass of java.util.Date.");  }  if (capacity < nrows) {    throw new IllegalArgumentException("Capacity value can not be less than the row count.");  }  m_values=new long[capacity];  Arrays.fill(m_values,defaultValue);  m_size=nrows;}  }
class C{  public static boolean isUrlValid(String value){  return value == null || value.length() < 1024 * 2;}  }
class C{  void loadStrings() throws IOException {  int count=mHeaderItem.stringIdsSize;  int stringOffsets[]=new int[count];  seek(mHeaderItem.stringIdsOff);  for (int i=0; i < count; i++) {    stringOffsets[i]=readInt();  }  mStrings=new String[count];  seek(stringOffsets[0]);  for (int i=0; i < count; i++) {    seek(stringOffsets[i]);    mStrings[i]=readString();  }}  }
class C{  private static void checkInitialized(){  if (Fabric.getKit(TweetUi.class) == null) {    throw new IllegalStateException(NOT_STARTED_ERROR);  }}  }
class C{  public ListEntryModel(){}  }
class C{  @SuppressWarnings("unchecked") private void showAdvanced(boolean show){  List<String> idsToShow=new ArrayList<>();  Iterator<IPreferenceNode> nodes=getPreferenceManager().getElements(PreferenceManager.PRE_ORDER).iterator();  while (nodes.hasNext()) {    IPreferenceNode node=nodes.next();    IPreferencePage page=node.getPage();    if (page instanceof PropertyPreferencePage) {      PropertyPreferencePage preferencePage=(PropertyPreferencePage)page;      preferencePage.showAdvanced(show);      if (show || showIfNoAdvanced(node)) {        idsToShow.add(node.getId());      }    }  }  if (null != preferenceNodeFilter) {    filteredTree.getViewer().removeFilter(preferenceNodeFilter);  }  preferenceNodeFilter=new PreferenceNodeFilter(idsToShow.toArray(new String[idsToShow.size()]));  filteredTree.getViewer().addFilter(preferenceNodeFilter);  Collections.sort(idsToShow);  PropertyPreferencePage currentPage=(PropertyPreferencePage)getCurrentPage();  if (null != currentPage) {    if (!show && currentPage.isAllAdvancedProperties()) {      setCurrentPageId(idsToShow.get(0));    }  }}  }
class C{  public boolean nextIsSep(){  if (Character.isLetterOrDigit(str.charAt(currentPosition)))   return false; else   return true;}  }
class C{  public static void main(String[] yarhg){  int[][] blarg=new int[10000][9999];  long time=System.nanoTime();  for (int i=0; i < 10000; i++) {    blarg[i]=randPermuteWithExclusion(0,10000,i);  }  System.out.println(roundDouble((System.nanoTime() - time) / Math.pow(10,9),4) + " secs.");}  }
class C{  public TreeNode(int v,TreeNode l,TreeNode r){  value=v;  left=l;  right=r;}  }
class C{  public CtClass makeAnnotation(String name) throws RuntimeException {  try {    CtClass cc=makeInterface(name,get("java.lang.annotation.Annotation"));    cc.setModifiers(cc.getModifiers() | Modifier.ANNOTATION);    return cc;  } catch (  NotFoundException e) {    throw new RuntimeException(e.getMessage(),e);  }}  }
class C{  public String toString(){  String a, result=null;  for (int i=0; null != (a=this.getKey(i)); i++) {    String av="{" + a;    String val=this.getValueAsString(i);    if (val != null)     av+="=" + val + "}"; else     av+="}";    if (result == null)     result=av; else     result=result + ", " + av;  }  return result != null ? result : "";}  }
class C{  public boolean hasElev(){  return super.hasAttribute(ELEV);}  }
class C{  public static void hideKeyboard(Activity activity,IBinder windowToken){  InputMethodManager mgr=(InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE);  mgr.hideSoftInputFromWindow(windowToken,0);}  }
class C{  public void removeUpdate(DocumentEvent changes,Shape a,ViewFactory f){  updateDamage(changes,a,f);}  }
class C{  public void clear(){  unparcel();  mMap.clear();  mHasFds=false;  mFdsKnown=true;}  }
class C{  PageRecord removePageRecord(Integer pageNumber){  SoftReference ref=pages.remove(pageNumber);  if (ref != null) {    return (PageRecord)ref.get();  }  return null;}  }
class C{  public boolean isEnum(){  return clazz.isEnum();}  }
class C{  public DTMConfigurationException(){  super("Configuration Error");}  }
class C{  public static Map<String,String> parseArgs(String[] args){  Map<String,String> result=new HashMap<>();  String key=null;  for (  String arg : args) {    if (arg.startsWith("-")) {      key=arg.substring(1);      result.put(key,"");    } else     if (key != null) {      String newValue=(result.get(key) + " " + arg).trim();      result.put(key,newValue);    }  }  return result;}  }
class C{  private FulltextSearchHit[] constructFulltextSearchList(JSONObject solrResultsJSON,FulltextSearchQuery query) throws JSONException {  String searchColumn=query.getSearchField();  String snippetColumn=query.getSnippetField();  String scoreColumn=query.getScoreField();  JSONObject resp=solrResultsJSON.getJSONObject("response");  JSONArray docs=resp.getJSONArray("docs");  List<FulltextSearchHit> searchHits=new ArrayList<FulltextSearchHit>(docs.length());  for (int i=0; i < docs.length(); i++) {    JSONObject result=docs.getJSONObject(i);    String search=null;    if (searchColumn != null && !searchColumn.isEmpty() && result.has(searchColumn)) {      search=flattenJsonResult(result.get(searchColumn));    } else {      throw new FulltextSearchException("Search field undefined, empty, or does not exist.");    }    String snippet=null;    if (snippetColumn != null && !snippetColumn.isEmpty()) {      snippet=result.has(snippetColumn) ? flattenJsonResult(result.get(snippetColumn)) : null;    }    String score=null;    if (scoreColumn != null && !scoreColumn.isEmpty()) {      score=result.has(scoreColumn) ? flattenJsonResult(result.get(scoreColumn)) : null;    }    Double scoreAsDouble=null;    if (score != null) {      try {        scoreAsDouble=Double.valueOf(score);      } catch (      NumberFormatException e) {        if (log.isInfoEnabled()) {          log.info("Could not cast score to double: " + score);        }      }    }    if (search != null && !search.isEmpty()) {      FulltextSearchHit currentHit=new FulltextSearchHit(search,scoreAsDouble,snippet,query.getIncomingBindings(),query.getSearchResultType());      searchHits.add(currentHit);    }  }  return searchHits.toArray(new FulltextSearchHit[searchHits.size()]);}  }
class C{  protected void assertFragmentationStat(int fragmentation,ASSERT_OP op){  ManagementService service=ManagementService.getExistingManagementService(getCache());  assertNotNull(service);  assertTrue(service.isManager());  MemberMXBean memberBean=service.getMemberMXBean();  assertNotNull(memberBean);switch (op) {case EQUAL:    assertEquals(fragmentation,memberBean.getOffHeapFragmentation());  break;case GREATER_THAN:assertTrue(fragmentation < memberBean.getOffHeapFragmentation());break;case LESS_THAN:assertTrue(fragmentation > memberBean.getOffHeapFragmentation());break;}}  }
class C{  private Result removeView(ViewGroup parent,View view){  try {    parent.removeView(view);    return SUCCESS.createResult();  } catch (  UnsupportedOperationException e) {    return ERROR_VIEWGROUP_NO_CHILDREN.createResult();  }}  }
class C{  public void test_equalsLjava_lang_Object(){  try {    DateFormat format=DateFormat.getInstance();    DateFormat clone=(DateFormat)format.clone();    assertTrue("Clone and parent are not equaled",format.equals(clone));    assertTrue("Clone is equal to other object",!clone.equals(DateFormat.getTimeInstance()));    format.setCalendar(Calendar.getInstance());    assertTrue("Clone and parent are not equaled",format.equals(clone));  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public GdbRun run() throws IOException, InterruptedException, DebuggerException {  GdbOutput gdbOutput=sendCommand("run");  return GdbRun.parse(gdbOutput);}  }
class C{  private void handleCrawlDelay(ParseState state,RobotToken token){  if (state.isSkipAgents()) {    return;  }  state.setFinishedAgentFields(true);  if (!state.isAddingRules()) {    return;  }  String delayString=token.getData();  if (delayString.length() > 0) {    try {      if (delayString.indexOf('.') != -1) {        double delayValue=Double.parseDouble(delayString) * 1000.0;        state.setCrawlDelay(Math.round(delayValue));      } else {        long delayValue=Integer.parseInt(delayString) * 1000L;        state.setCrawlDelay(delayValue);      }    } catch (    Exception e) {      reportWarning("Error parsing robots rules - can't decode crawl delay: " + delayString,state.getUrl());    }  }}  }
class C{  public ProjectTodoStatusExample(ProjectTodoStatusObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getStatus() != null) {    criteria.andStatusEqualTo(sample.getStatus());  }}  }
class C{  @Override public boolean supportsMultipleResultSets(){  debugCodeCall("supportsMultipleResultSets");  return false;}  }
class C{  public UpdateRequest retryOnConflict(int retryOnConflict){  this.retryOnConflict=retryOnConflict;  return this;}  }
class C{  public void storeAll(Set<NucleotideSequence> parsedNucleotideSequences,Map<String,SignatureLibraryRelease> analysisJobMa){  for (  NucleotideSequence nucleotideSequence : parsedNucleotideSequences) {    sequencesAwaitingInsertion.add(nucleotideSequence);    if (sequencesAwaitingInsertion.size() > sequenceInsertBatchSize) {      persistBatch();    }  }}  }
class C{  public ViewerDialog(Frame parent){  super(parent,ModalityType.DOCUMENT_MODAL);  createDialog();}  }
class C{  public static String abbreviate(String s,int maxWidth){  return abbreviate(s,0,maxWidth);}  }
class C{  public SOMGroup(final Network root,final int numNeurons){  super(root);  for (int i=0; i < numNeurons; i++) {    addNeuron(new Neuron(getParentNetwork(),new LinearRule()));  }  setLabel("SOM");}  }
class C{  public SourceMapAwareAppendable(Appendable out,CharSequence indent,boolean collectSourceMapData){  this.out=new LineColTrackingAppendable(out,indent);  this.collectSourceMapData=collectSourceMapData;  this.mappings=collectSourceMapData ? new ArrayList<>() : null;}  }
class C{  public static ByteList Namespaces(ByteList bytes,IntList namespaces){  for (int i=0; i < namespaces.size(); i++) {    bytes=Int(bytes,namespaces.get(i));  }  return bytes;}  }
class C{  public static void updateExtensionsAndEnsurePeriodicRefresh(final Context context){  LOGD(TAG,"updateExtensionsAndEnsurePeriodicRefresh");  AlarmManager am=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);  context.startService(getUpdateAllExtensionsIntent(context,DashClockExtension.UPDATE_REASON_MANUAL));  PendingIntent pi=PendingIntent.getBroadcast(context,0,new Intent(context,PeriodicExtensionRefreshReceiver.class).setAction(ACTION_PERIODIC_ALARM),PendingIntent.FLAG_UPDATE_CURRENT);  am.cancel(pi);  am.setInexactRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP,SystemClock.elapsedRealtime() + 15 * MINUTES_MILLIS,AlarmManager.INTERVAL_HALF_HOUR,pi);}  }
class C{  public RDFHandlerException(Throwable cause){  super(cause);}  }
class C{  private ClassReference processClassReference(String key,String value){  ClassReference classReference=null;  int lineNumber=(lines.get(key)).intValue();  String parameter=value.substring(CLASS_REFERENCE.length(),value.length() - 1).trim();  if ((parameter.charAt(0) == '"') && (parameter.indexOf('"',1) == parameter.length() - 1)) {    parameter=parameter.substring(1,parameter.length() - 1);    classReference=new ClassReference(parameter,lineNumber);    imports.add(parameter);  } else   if (parameter.equals("null")) {    classReference=new ClassReference(null,lineNumber);  } else {    InvalidClassReference invalidClassReference=new InvalidClassReference();    invalidClassReference.path=getPropertyFileName();    invalidClassReference.line=lineNumber;    ThreadLocalToolkit.log(invalidClassReference);  }  return classReference;}  }
class C{  public void processServerResponse(int response,com.google.android.vending.licensing.ResponseData rawData){  if (response != Policy.RETRY) {    setRetryCount(0);  } else {    setRetryCount(mRetryCount + 1);  }  if (response == Policy.LICENSED) {    Map<String,String> extras=decodeExtras(rawData.extra);    mLastResponse=response;    setValidityTimestamp(Long.toString(System.currentTimeMillis() + MILLIS_PER_MINUTE));    Set<String> keys=extras.keySet();    for (    String key : keys) {      if (key.equals("VT")) {        setValidityTimestamp(extras.get(key));      } else       if (key.equals("GT")) {        setRetryUntil(extras.get(key));      } else       if (key.equals("GR")) {        setMaxRetries(extras.get(key));      } else       if (key.startsWith("FILE_URL")) {        int index=Integer.parseInt(key.substring("FILE_URL".length())) - 1;        setExpansionURL(index,extras.get(key));      } else       if (key.startsWith("FILE_NAME")) {        int index=Integer.parseInt(key.substring("FILE_NAME".length())) - 1;        setExpansionFileName(index,extras.get(key));      } else       if (key.startsWith("FILE_SIZE")) {        int index=Integer.parseInt(key.substring("FILE_SIZE".length())) - 1;        setExpansionFileSize(index,Long.parseLong(extras.get(key)));      }    }  } else   if (response == Policy.NOT_LICENSED) {    setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);    setRetryUntil(DEFAULT_RETRY_UNTIL);    setMaxRetries(DEFAULT_MAX_RETRIES);  }  setLastResponse(response);  mPreferences.commit();}  }
class C{  public StringBody(final String text,final String mimeType,Charset charset) throws UnsupportedEncodingException {  super(mimeType);  if (text == null) {    throw new IllegalArgumentException("Text may not be null");  }  if (charset == null) {    charset=Charset.forName(HTTP.UTF_8);  }  this.content=text.getBytes(charset.name());  this.charset=charset;}  }
class C{  public ColladaInstanceNode(String ns){  super(ns);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.318 -0500",hash_original_method="530406D8340E661E297BE9C5D23D16FA",hash_generated_method="B0C7199C831C093C330F98DF15541C87") public static boolean isTitleCase(int codePoint){  return isTitleCaseImpl(codePoint);}  }
class C{  boolean isChanged(){  return srcFile.lastModified() != lastModified;}  }
class C{  public Future<Void> into(@NonNull OutputStream outputStream,boolean closeWhenDone){  final Bitmap croppedBitmap=cropView.crop();  return Utils.flushToStream(croppedBitmap,format,quality,outputStream,closeWhenDone);}  }
class C{  protected void filterRedundantNonnullAssertions(TestCase test){  Set<Assertion> redundantAssertions=new HashSet<Assertion>();  for (  Statement statement : test) {    if (statement instanceof ConstructorStatement) {      ConstructorStatement cs=(ConstructorStatement)statement;      for (      Assertion a : cs.getAssertions()) {        if (a instanceof NullAssertion) {          if (cs.getAssertions().size() > 0) {            for (            Assertion a2 : cs.getAssertions()) {              if (a2.getSource() == cs.getReturnValue())               redundantAssertions.add(a);            }          } else           if (isUsedAsCallee(test,cs.getReturnValue())) {            redundantAssertions.add(a);          }        }      }    }  }  for (  Assertion a : redundantAssertions) {    test.removeAssertion(a);  }}  }
class C{  public Option(int number,byte[] opaque){  this.number=number;  setValue(opaque);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public void removeIsdnSubaddress(){  deleteParm(ISUB);}  }
class C{  public static synchronized BiolinguaDigraph BiolinguaAlgorithm(SymMatrixF correlMatrix,BiolinguaDigraph initGraph){  float ka=(float)0.1;  float ke=(float)3.0;  float kl=(float)4.0;  float kp=(float)3.0;  return doBiolinguaAlgorithm(correlMatrix,null,initGraph,ka,ke,kl,kp);}  }
class C{  @JsonIgnore public boolean isNoError(){  return noError;}  }
class C{  protected void end(){  stream.println("</graphDocument>");  flush();}  }
class C{  public static <T>SortedSet<T> eachWithIndex(SortedSet<T> self,@ClosureParams(value=FromString.class,options="T,java.lang.Integer") Closure closure){  return (SortedSet<T>)eachWithIndex((Iterable<T>)self,closure);}  }
class C{  private static boolean eq(double v1,double v2){  return v1 == v2;}  }
class C{  public void findAndInit(Iterator<Object> it){  while (it.hasNext()) {    findAndInit(it.next());  }}  }
class C{  public void destroy(){  log.fine("destroy");}  }
class C{  public static void scaleRectAboutCenter(Rect r,float scale){  if (scale != 1.0f) {    int cx=r.centerX();    int cy=r.centerY();    r.offset(-cx,-cy);    r.left=(int)(r.left * scale + 0.5f);    r.top=(int)(r.top * scale + 0.5f);    r.right=(int)(r.right * scale + 0.5f);    r.bottom=(int)(r.bottom * scale + 0.5f);    r.offset(cx,cy);  }}  }
class C{  public int match(String s){  String rep=new String(_dataChars,0,_nDataChars);  return rep.indexOf(s);}  }
class C{  public final void handleAdeException(AdeException e){  debugAssist(e);  final int return_value=messageConvertReturnValue(e.getMessage(),101);  systemExitAssist(return_value);}  }
class C{  private DocWorkflowManager(){  super();  if (s_mgr == null)   s_mgr=this;}  }
class C{  public boolean isStandaloneServer(){  return true;}  }
class C{  public boolean startDiscovery(){  if (mScanning) {    Log.e(TAG,"Already discovering");    return true;  }  if (mListener == null) {    throw new NullPointerException("Listener cannot be null");  }  return scan();}  }
class C{  final public void enable_tracing(){}  }
class C{  public static Address toNativeAddress(final Address address){  return new Address(com.google.security.zynamics.reil.ReilHelpers.toNativeAddress(new CAddress(address.toLong())).toBigInteger());}  }
class C{  public Builder toUri(Context ctxt,Uri output,boolean updateMediaStore,boolean skipOrientationNormalization){  JPEGWriter jpeg=(JPEGWriter)result.findProcessorByTag(JPEGWriter.class.getCanonicalName());  if (jpeg == null) {    jpeg=new JPEGWriter(ctxt);    append(jpeg);  }  result.getProperties().putParcelable(JPEGWriter.PROP_OUTPUT,output);  result.getProperties().putBoolean(JPEGWriter.PROP_UPDATE_MEDIA_STORE,updateMediaStore);  result.getProperties().putBoolean(JPEGWriter.PROP_SKIP_ORIENTATION_NORMALIZATION,skipOrientationNormalization);  return (this);}  }
class C{  protected boolean beforeSave(boolean newRecord){  log.info("New=" + newRecord + " ***");  return true;}  }
class C{  public HeaderCardBuilder value(long newValue) throws HeaderCardException {  if (this.card == null) {    this.card=new HeaderCard(this.key.key(),newValue,null);    this.header.addLine(this.card);  } else {    this.card.setValue(newValue);  }  return this;}  }
class C{  public SystemConnectException(String message){  super(message);}  }
class C{  public ObjectIntProcedureFJTask(ObjectIntProcedureFJTaskRunner<T,BT> newFJTaskRunner,ObjectIntProcedureFactory<BT> newProcedureFactory,List<T> list,int index,int sectionSize,boolean isLast){  this.taskRunner=newFJTaskRunner;  this.procedureFactory=newProcedureFactory;  this.list=list;  this.start=index * sectionSize;  this.end=isLast ? this.list.size() : this.start + sectionSize;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MClient[").append(get_ID()).append("-").append(getValue()).append("]");  return sb.toString();}  }
class C{  public BulkRequest refresh(boolean refresh){  this.refresh=refresh;  return this;}  }
class C{  public EnvironmentModule(Environment environment){  this.environment=environment;}  }
class C{  public void onSuccess(byte[] binaryData){}  }
class C{  @Override public E next(){  if (current == null) {    throw new RuntimeException("For an IteratorChain, hasNext() MUST be called before calling next()");  }  return current.next();}  }
class C{  @Override public boolean moveFile(String source,String dest){  try {    mDBApi.move(source,dest);    return true;  } catch (  DropboxException e) {    e.printStackTrace();    return false;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(noderemovechildoldchildnonexistent.class,args);}  }
class C{  @VisibleForTesting boolean isMetricUnits(){  return metricUnits;}  }
class C{  public void assignX(){  int i;  for (i=1; i < blocks; i++) {    value[i]=0x00;  }  value[0]=0x02;}  }
class C{  private static Properties loadProperties(File propsFile){  Properties result;  Properties defaultProps=null;  try {    defaultProps=Utils.readProperties(PROPERTY_FILE);  } catch (  Exception ex) {    System.err.println("Warning, unable to read default properties file(s).");    ex.printStackTrace();  }  if (propsFile == null) {    return defaultProps;  }  if (!propsFile.exists() || propsFile.isDirectory()) {    return defaultProps;  }  try {    result=new Properties(defaultProps);    result.load(new FileInputStream(propsFile));  } catch (  Exception e) {    result=null;    System.err.println("Failed to load properties file (DatabaseUtils.java) '" + propsFile + "':");    e.printStackTrace();  }  return result;}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  TypesPackage theTypesPackage=(TypesPackage)EPackage.Registry.INSTANCE.getEPackage(TypesPackage.eNS_URI);  EcorePackage theEcorePackage=(EcorePackage)EPackage.Registry.INSTANCE.getEPackage(EcorePackage.eNS_URI);  typeRefEClass.getESuperTypes().add(this.getTypeArgument());  staticBaseTypeRefEClass.getESuperTypes().add(this.getTypeRef());  baseTypeRefEClass.getESuperTypes().add(this.getStaticBaseTypeRef());  composedTypeRefEClass.getESuperTypes().add(this.getStaticBaseTypeRef());  unionTypeExpressionEClass.getESuperTypes().add(this.getComposedTypeRef());  intersectionTypeExpressionEClass.getESuperTypes().add(this.getComposedTypeRef());  thisTypeRefEClass.getESuperTypes().add(this.getBaseTypeRef());  thisTypeRefNominalEClass.getESuperTypes().add(this.getThisTypeRef());  thisTypeRefStructuralEClass.getESuperTypes().add(this.getThisTypeRef());  thisTypeRefStructuralEClass.getESuperTypes().add(this.getStructuralTypeRef());  boundThisTypeRefEClass.getESuperTypes().add(this.getThisTypeRef());  boundThisTypeRefEClass.getESuperTypes().add(this.getStructuralTypeRef());  parameterizedTypeRefEClass.getESuperTypes().add(this.getBaseTypeRef());  parameterizedTypeRefStructuralEClass.getESuperTypes().add(this.getParameterizedTypeRef());  parameterizedTypeRefStructuralEClass.getESuperTypes().add(this.getStructuralTypeRef());  existentialTypeRefEClass.getESuperTypes().add(this.getTypeRef());  unknownTypeRefEClass.getESuperTypes().add(this.getTypeRef());  typeTypeRefEClass.getESuperTypes().add(this.getBaseTypeRef());  wildcardEClass.getESuperTypes().add(this.getTypeArgument());  functionTypeExprOrRefEClass.getESuperTypes().add(this.getStaticBaseTypeRef());  functionTypeRefEClass.getESuperTypes().add(this.getParameterizedTypeRef());  functionTypeRefEClass.getESuperTypes().add(this.getFunctionTypeExprOrRef());  functionTypeExpressionEClass.getESuperTypes().add(this.getFunctionTypeExprOrRef());  deferredTypeRefEClass.getESuperTypes().add(this.getTypeRef());  initEClass(typeRefEClass,TypeRef.class,"TypeRef",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTypeRef_NullModifier(),theTypesPackage.getNullModifier(),"nullModifier",null,0,1,TypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTypeRef_UndefModifier(),theTypesPackage.getUndefModifier(),"undefModifier",null,0,1,TypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTypeRef__GetModifiersAsString(),theEcorePackage.getEString(),"getModifiersAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__IsFinalByType(),theEcorePackage.getEBoolean(),"isFinalByType",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__IsDynamic(),theEcorePackage.getEBoolean(),"isDynamic",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__IsExistential(),theEcorePackage.getEBoolean(),"isExistential",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__IsGeneric(),theEcorePackage.getEBoolean(),"isGeneric",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__IsParameterized(),theEcorePackage.getEBoolean(),"isParameterized",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__IsRaw(),theEcorePackage.getEBoolean(),"isRaw",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__GetDeclaredUpperBound(),this.getParameterizedTypeRef(),"getDeclaredUpperBound",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__GetDeclaredLowerBound(),this.getParameterizedTypeRef(),"getDeclaredLowerBound",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__GetTypeArgs(),this.getTypeArgument(),"getTypeArgs",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__UndefinedOrNull(),theEcorePackage.getEBoolean(),"undefinedOrNull",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__GetTypeRefAsString(),theEcorePackage.getEString(),"getTypeRefAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__ToString(),theEcorePackage.getEString(),"toString",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__GetDeclaredType(),theTypesPackage.getType(),"getDeclaredType",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__IsTopType(),theEcorePackage.getEBoolean(),"isTopType",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__IsBottomType(),theEcorePackage.getEBoolean(),"isBottomType",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__GetTypingStrategy(),theTypesPackage.getTypingStrategy(),"getTypingStrategy",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__GetStructuralMembers(),theTypesPackage.getTStructMember(),"getStructuralMembers",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__IsUseSiteStructuralTyping(),theEcorePackage.getEBoolean(),"isUseSiteStructuralTyping",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeRef__IsDefSiteStructuralTyping(),theEcorePackage.getEBoolean(),"isDefSiteStructuralTyping",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(staticBaseTypeRefEClass,StaticBaseTypeRef.class,"StaticBaseTypeRef",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(baseTypeRefEClass,BaseTypeRef.class,"BaseTypeRef",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getBaseTypeRef_Dynamic(),theEcorePackage.getEBoolean(),"dynamic","false",0,1,BaseTypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getBaseTypeRef__GetModifiersAsString(),theEcorePackage.getEString(),"getModifiersAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(composedTypeRefEClass,ComposedTypeRef.class,"ComposedTypeRef",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getComposedTypeRef_CachedComposedMembers(),theTypesPackage.getTMember(),null,"cachedComposedMembers",null,0,-1,ComposedTypeRef.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getComposedTypeRef_OriginalComposedTypeRef(),this.getComposedTypeRef(),null,"originalComposedTypeRef",null,0,1,ComposedTypeRef.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getComposedTypeRef_TypeRefs(),this.getTypeRef(),null,"typeRefs",null,0,-1,ComposedTypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getComposedTypeRef__IsDynamic(),theEcorePackage.getEBoolean(),"isDynamic",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getComposedTypeRef__GetTypeRefAsString(),theEcorePackage.getEString(),"getTypeRefAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(unionTypeExpressionEClass,UnionTypeExpression.class,"UnionTypeExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getUnionTypeExpression__GetTypeRefAsString(),theEcorePackage.getEString(),"getTypeRefAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(intersectionTypeExpressionEClass,IntersectionTypeExpression.class,"IntersectionTypeExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getIntersectionTypeExpression__GetTypeRefAsString(),theEcorePackage.getEString(),"getTypeRefAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(thisTypeRefEClass,ThisTypeRef.class,"ThisTypeRef",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getThisTypeRef__GetTypeRefAsString(),theEcorePackage.getEString(),"getTypeRefAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getThisTypeRef__GetTypingStrategy(),theTypesPackage.getTypingStrategy(),"getTypingStrategy",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getThisTypeRef__GetStructuralMembers(),theTypesPackage.getTStructMember(),"getStructuralMembers",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getThisTypeRef__IsUseSiteStructuralTyping(),theEcorePackage.getEBoolean(),"isUseSiteStructuralTyping",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(thisTypeRefNominalEClass,ThisTypeRefNominal.class,"ThisTypeRefNominal",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(thisTypeRefStructuralEClass,ThisTypeRefStructural.class,"ThisTypeRefStructural",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getThisTypeRefStructural_DefinedTypingStrategy(),theTypesPackage.getTypingStrategy(),"definedTypingStrategy",null,0,1,ThisTypeRefStructural.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getThisTypeRefStructural__GetTypingStrategy(),theTypesPackage.getTypingStrategy(),"getTypingStrategy",0,1,!IS_UNIQUE,IS_ORDERED);  EOperation op=initEOperation(getThisTypeRefStructural__SetTypingStrategy__TypingStrategy(),null,"setTypingStrategy",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theTypesPackage.getTypingStrategy(),"typingStrategy",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getThisTypeRefStructural__IsUseSiteStructuralTyping(),theEcorePackage.getEBoolean(),"isUseSiteStructuralTyping",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getThisTypeRefStructural__GetStructuralMembers(),theTypesPackage.getTStructMember(),"getStructuralMembers",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getThisTypeRefStructural__GetTypeRefAsString(),theEcorePackage.getEString(),"getTypeRefAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(boundThisTypeRefEClass,BoundThisTypeRef.class,"BoundThisTypeRef",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getBoundThisTypeRef_ActualThisTypeRef(),this.getParameterizedTypeRef(),null,"actualThisTypeRef",null,0,1,BoundThisTypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getBoundThisTypeRef_DefinedTypingStrategy(),theTypesPackage.getTypingStrategy(),"definedTypingStrategy",null,0,1,BoundThisTypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getBoundThisTypeRef__GetTypingStrategy(),theTypesPackage.getTypingStrategy(),"getTypingStrategy",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getBoundThisTypeRef__SetTypingStrategy__TypingStrategy(),null,"setTypingStrategy",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theTypesPackage.getTypingStrategy(),"typingStrategy",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getBoundThisTypeRef__GetTypeRefAsString(),theEcorePackage.getEString(),"getTypeRefAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getBoundThisTypeRef__GetDeclaredUpperBound(),this.getParameterizedTypeRef(),"getDeclaredUpperBound",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getBoundThisTypeRef__IsDefSiteStructuralTyping(),theEcorePackage.getEBoolean(),"isDefSiteStructuralTyping",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getBoundThisTypeRef__IsUseSiteStructuralTyping(),theEcorePackage.getEBoolean(),"isUseSiteStructuralTyping",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getBoundThisTypeRef__GetStructuralMembers(),theTypesPackage.getTStructMember(),"getStructuralMembers",0,-1,!IS_UNIQUE,IS_ORDERED);  initEClass(parameterizedTypeRefEClass,ParameterizedTypeRef.class,"ParameterizedTypeRef",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getParameterizedTypeRef_DeclaredType(),theTypesPackage.getType(),null,"declaredType",null,0,1,ParameterizedTypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getParameterizedTypeRef_TypeArgs(),this.getTypeArgument(),null,"typeArgs",null,0,-1,ParameterizedTypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getParameterizedTypeRef_ArrayTypeLiteral(),theEcorePackage.getEBoolean(),"arrayTypeLiteral","false",0,1,ParameterizedTypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getParameterizedTypeRef_DefinedTypingStrategy(),theTypesPackage.getTypingStrategy(),"definedTypingStrategy",null,0,1,ParameterizedTypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getParameterizedTypeRef__GetTypingStrategy(),theTypesPackage.getTypingStrategy(),"getTypingStrategy",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getParameterizedTypeRef__ContainsWildcards(),theEcorePackage.getEBoolean(),"containsWildcards",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getParameterizedTypeRef__GetTypeRefAsString(),theEcorePackage.getEString(),"getTypeRefAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getParameterizedTypeRef__IsParameterized(),theEcorePackage.getEBoolean(),"isParameterized",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getParameterizedTypeRef__IsGeneric(),theEcorePackage.getEBoolean(),"isGeneric",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getParameterizedTypeRef__IsRaw(),theEcorePackage.getEBoolean(),"isRaw",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getParameterizedTypeRef__ContainsUnboundTypeVariables(),theEcorePackage.getEBoolean(),"containsUnboundTypeVariables",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getParameterizedTypeRef__IsUseSiteStructuralTyping(),theEcorePackage.getEBoolean(),"isUseSiteStructuralTyping",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getParameterizedTypeRef__IsDefSiteStructuralTyping(),theEcorePackage.getEBoolean(),"isDefSiteStructuralTyping",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(structuralTypeRefEClass,StructuralTypeRef.class,"StructuralTypeRef",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getStructuralTypeRef_AstStructuralMembers(),theTypesPackage.getTStructMember(),null,"astStructuralMembers",null,0,-1,StructuralTypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getStructuralTypeRef_StructuralType(),theTypesPackage.getTStructuralType(),null,"structuralType",null,0,1,StructuralTypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getStructuralTypeRef_GenStructuralMembers(),theTypesPackage.getTStructMember(),null,"genStructuralMembers",null,0,-1,StructuralTypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getStructuralTypeRef_PostponedSubstitutions(),this.getTypeVariableMapping(),null,"postponedSubstitutions",null,0,-1,StructuralTypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getStructuralTypeRef__GetTypingStrategy(),theTypesPackage.getTypingStrategy(),"getTypingStrategy",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getStructuralTypeRef__SetTypingStrategy__TypingStrategy(),null,"setTypingStrategy",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theTypesPackage.getTypingStrategy(),"typingStrategy",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getStructuralTypeRef__GetStructuralMembers(),theTypesPackage.getTStructMember(),"getStructuralMembers",0,-1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getStructuralTypeRef__HasPostponedSubstitutionFor__TypeVariable(),theEcorePackage.getEBoolean(),"hasPostponedSubstitutionFor",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theTypesPackage.getTypeVariable(),"typeVar",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(parameterizedTypeRefStructuralEClass,ParameterizedTypeRefStructural.class,"ParameterizedTypeRefStructural",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getParameterizedTypeRefStructural__GetTypingStrategy(),theTypesPackage.getTypingStrategy(),"getTypingStrategy",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getParameterizedTypeRefStructural__SetTypingStrategy__TypingStrategy(),null,"setTypingStrategy",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theTypesPackage.getTypingStrategy(),"typingStrategy",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getParameterizedTypeRefStructural__GetStructuralMembers(),theTypesPackage.getTStructMember(),"getStructuralMembers",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getParameterizedTypeRefStructural__GetTypeRefAsString(),theEcorePackage.getEString(),"getTypeRefAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(existentialTypeRefEClass,ExistentialTypeRef.class,"ExistentialTypeRef",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getExistentialTypeRef_Wildcard(),this.getWildcard(),null,"wildcard",null,0,1,ExistentialTypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExistentialTypeRef_BoundTypeVariable(),theTypesPackage.getTypeVariable(),null,"boundTypeVariable",null,0,1,ExistentialTypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getExistentialTypeRef__IsExistential(),theEcorePackage.getEBoolean(),"isExistential",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getExistentialTypeRef__IsGeneric(),theEcorePackage.getEBoolean(),"isGeneric",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getExistentialTypeRef__IsParameterized(),theEcorePackage.getEBoolean(),"isParameterized",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getExistentialTypeRef__GetTypeRefAsString(),theEcorePackage.getEString(),"getTypeRefAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(unknownTypeRefEClass,UnknownTypeRef.class,"UnknownTypeRef",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getUnknownTypeRef__GetTypeRefAsString(),theEcorePackage.getEString(),"getTypeRefAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(typeTypeRefEClass,TypeTypeRef.class,"TypeTypeRef",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTypeTypeRef_TypeArg(),this.getTypeArgument(),null,"typeArg",null,0,1,TypeTypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTypeTypeRef_ConstructorRef(),theEcorePackage.getEBoolean(),"constructorRef",null,0,1,TypeTypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTypeTypeRef__GetTypeRefAsString(),theEcorePackage.getEString(),"getTypeRefAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(typeArgumentEClass,TypeArgument.class,"TypeArgument",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getTypeArgument__GetTypeRefAsString(),theEcorePackage.getEString(),"getTypeRefAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeArgument__ContainsWildcards(),theEcorePackage.getEBoolean(),"containsWildcards",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeArgument__ContainsUnboundTypeVariables(),theEcorePackage.getEBoolean(),"containsUnboundTypeVariables",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(wildcardEClass,Wildcard.class,"Wildcard",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getWildcard_DeclaredUpperBound(),this.getTypeRef(),null,"declaredUpperBound",null,0,1,Wildcard.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getWildcard_DeclaredLowerBound(),this.getTypeRef(),null,"declaredLowerBound",null,0,1,Wildcard.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getWildcard_UsingInOutNotation(),theEcorePackage.getEBoolean(),"usingInOutNotation",null,0,1,Wildcard.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getWildcard__GetDeclaredOrImplicitUpperBound(),this.getTypeRef(),"getDeclaredOrImplicitUpperBound",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getWildcard__IsImplicitUpperBoundInEffect(),theEcorePackage.getEBoolean(),"isImplicitUpperBoundInEffect",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getWildcard__GetTypeRefAsString(),theEcorePackage.getEString(),"getTypeRefAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(functionTypeExprOrRefEClass,FunctionTypeExprOrRef.class,"FunctionTypeExprOrRef",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getFunctionTypeExprOrRef__GetDeclaredThisType(),this.getTypeRef(),"getDeclaredThisType",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFunctionTypeExprOrRef__GetFunctionType(),theTypesPackage.getTFunction(),"getFunctionType",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFunctionTypeExprOrRef__GetTypeVars(),theTypesPackage.getTypeVariable(),"getTypeVars",0,-1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getFunctionTypeExprOrRef__GetTypeVarUpperBound__TypeVariable(),this.getTypeRef(),"getTypeVarUpperBound",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theTypesPackage.getTypeVariable(),"typeVar",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFunctionTypeExprOrRef__GetFpars(),theTypesPackage.getTFormalParameter(),"getFpars",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFunctionTypeExprOrRef__GetReturnTypeRef(),this.getTypeRef(),"getReturnTypeRef",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFunctionTypeExprOrRef__IsGeneric(),theEcorePackage.getEBoolean(),"isGeneric",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFunctionTypeExprOrRef__IsRaw(),theEcorePackage.getEBoolean(),"isRaw",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getFunctionTypeExprOrRef__GetFparForArgIdx__int(),theTypesPackage.getTFormalParameter(),"getFparForArgIdx",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEInt(),"argIndex",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFunctionTypeExprOrRef__GetTypeRefAsString(),theEcorePackage.getEString(),"getTypeRefAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(functionTypeRefEClass,FunctionTypeRef.class,"FunctionTypeRef",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getFunctionTypeRef__GetDeclaredThisType(),this.getTypeRef(),"getDeclaredThisType",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFunctionTypeRef__GetTypeVars(),theTypesPackage.getTypeVariable(),"getTypeVars",0,-1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getFunctionTypeRef__GetTypeVarUpperBound__TypeVariable(),this.getTypeRef(),"getTypeVarUpperBound",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theTypesPackage.getTypeVariable(),"typeVar",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFunctionTypeRef__GetFpars(),theTypesPackage.getTFormalParameter(),"getFpars",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFunctionTypeRef__GetReturnTypeRef(),this.getTypeRef(),"getReturnTypeRef",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(functionTypeExpressionEClass,FunctionTypeExpression.class,"FunctionTypeExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getFunctionTypeExpression_Binding(),theEcorePackage.getEBoolean(),"binding",null,0,1,FunctionTypeExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunctionTypeExpression_DeclaredType(),theTypesPackage.getTFunction(),null,"declaredType",null,0,1,FunctionTypeExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunctionTypeExpression_DeclaredThisType(),this.getTypeRef(),null,"declaredThisType",null,0,1,FunctionTypeExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunctionTypeExpression_OwnedTypeVars(),theTypesPackage.getTypeVariable(),null,"ownedTypeVars",null,0,-1,FunctionTypeExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunctionTypeExpression_UnboundTypeVars(),theTypesPackage.getTypeVariable(),null,"unboundTypeVars",null,0,-1,FunctionTypeExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunctionTypeExpression_UnboundTypeVarsUpperBounds(),this.getTypeRef(),null,"unboundTypeVarsUpperBounds",null,0,-1,FunctionTypeExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunctionTypeExpression_Fpars(),theTypesPackage.getTFormalParameter(),null,"fpars",null,0,-1,FunctionTypeExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunctionTypeExpression_ReturnTypeRef(),this.getTypeRef(),null,"returnTypeRef",null,0,1,FunctionTypeExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getFunctionTypeExpression__GetTypeVars(),theTypesPackage.getTypeVariable(),"getTypeVars",0,-1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getFunctionTypeExpression__GetTypeVarUpperBound__TypeVariable(),this.getTypeRef(),"getTypeVarUpperBound",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theTypesPackage.getTypeVariable(),"typeVar",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(deferredTypeRefEClass,DeferredTypeRef.class,"DeferredTypeRef",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getDeferredTypeRef__GetTypeRefAsString(),theEcorePackage.getEString(),"getTypeRefAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(typeVariableMappingEClass,TypeVariableMapping.class,"TypeVariableMapping",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTypeVariableMapping_TypeVar(),theTypesPackage.getTypeVariable(),null,"typeVar",null,0,1,TypeVariableMapping.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTypeVariableMapping_TypeArg(),this.getTypeArgument(),null,"typeArg",null,0,1,TypeVariableMapping.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEDataType(parameterizedTypeRefIterableEDataType,Iterable.class,"ParameterizedTypeRefIterable",IS_SERIALIZABLE,!IS_GENERATED_INSTANCE_CLASS,"java.lang.Iterable<eu.numberfour.n4js.ts.typeRefs.ParameterizedTypeRef>");  createResource(eNS_URI);}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  private void processChunk(StringBuilder chunk,int expectedLength) throws JSONException {  if (expectedLength > 0 && chunk.length() > 0) {    JSONObject json=new JSONObject(chunk.toString());    chunk=new StringBuilder();    Map<String,String> tuple=new HashMap<String,String>();    Iterator<?> it=json.keys();    while (it.hasNext()) {      String key=(String)it.next();      Object val=json.get(key);      if (val != null) {        String vstr=val.toString();        tuple.put(key,vstr);      }    }    if (!tuple.isEmpty()) {      LOG.debug("Got: " + tuple);      outputPort.emit(tuple);      chunk.setLength(0);    }  }  if (rawOutput.isConnected()) {    rawOutput.emit(chunk.toString());  }}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return false;  return true;}  }
class C{  public List(T... items){  this(new DefaultListModel(items));}  }
class C{  public void writeExif(Bitmap bmap,OutputStream exifOutStream) throws IOException {  if (bmap == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  bmap.compress(Bitmap.CompressFormat.JPEG,90,s);  s.flush();}  }
class C{  public static void start(){  current.remove();}  }
class C{  public boolean ready() throws IOException {  if (_input == null)   throw new IOException("Reader closed");  if (_index == _input.length())   return false;  return true;}  }
class C{  public void createStatsFile(){  File file=new File(statsFile);  if (file.exists()) {    file.delete();  }  mean=0;  mode=0;  long n=0;  double[] data;  double imageTotalDeviation=0;  double min=Double.MAX_VALUE;  double max=-Double.MAX_VALUE;  double z;  double[] rowMedians=new double[numberRows];  binWidth=0;  int binNum=0;  int numberOfBins=0;  if (dataScale != DATA_SCALE_RGB) {    for (int row=0; row < numberRows; row++) {      data=getRowValues(row);      for (int col=0; col < numberColumns; col++) {        z=data[col];        if (z != noDataValue) {          mean+=z;          n++;          if (z < min) {            min=z;          }          if (z > max) {            max=z;          }        }      }    }    maximumValue=max;    minimumValue=min;    mean=mean / n;    numValidCells=n;    if (dataType.equals("integer")) {      numberOfBins=(int)(max - min + 1);      binWidth=1;    } else     if (dataType.equals("float") || dataType.equals("double")) {      if ((max - min) < 1024) {        numberOfBins=1024;      } else       if ((max - min) < 2048) {        numberOfBins=2048;      } else       if ((max - min) < 4096) {        numberOfBins=4096;      } else {        numberOfBins=8196;      }      binWidth=(max - min) / (numberOfBins - 1);    }    histo=new long[numberOfBins];    for (int row=0; row < numberRows; row++) {      data=getRowValues(row);      for (int col=0; col < numberColumns; col++) {        z=data[col];        if (z != noDataValue) {          imageTotalDeviation+=(z - mean) * (z - mean);          binNum=(int)(Math.floor((z - min) / binWidth));          histo[binNum]++;        }      }    }    stdDeviation=Math.sqrt(imageTotalDeviation / (n - 1));    long highestVal=0;    int highestBin=0;    for (int i=0; i < histo.length; i++) {      if (histo[i] > highestVal) {        highestVal=histo[i];        highestBin=i;      }    }    mode=highestBin * binWidth;    median=getPercentileValue(50.0d);    String str=null;    FileWriter fw=null;    BufferedWriter bw=null;    PrintWriter out=null;    try {      fw=new FileWriter(file,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str="START_STATS:";      out.println(str);      str="MIN: \t" + Double.toString(this.minimumValue);      out.println(str);      str="MAX: \t" + Double.toString(this.maximumValue);      out.println(str);      str="MEAN: \t" + Double.toString(mean);      out.println(str);      str="MEDIAN: \t" + Double.toString(median);      out.println(str);      str="MODE: \t" + Double.toString(mode);      out.println(str);      str="STD_DEV: \t" + Double.toString(stdDeviation);      out.println(str);      str="NUM_VALID_CELLS: \t" + Long.toString(n);      out.println(str);      str="END_STATS";      out.println(str);      str="START_HISTO";      out.println(str);      str="BIN_WIDTH: \t" + binWidth;      out.println(str);      str="NUM_BINS: \t" + numberOfBins;      out.println(str);      for (int i=0; i < histo.length; i++) {        str=String.valueOf(histo[i]);        out.println(str);      }      str="END_HISTO";      out.println(str);    } catch (    java.io.IOException e) {      System.err.println("Error: " + e.getMessage());    }catch (    Exception e) {      System.err.println("Error: " + e.getMessage());    } finally {      if (out != null || bw != null) {        out.flush();        out.close();      }    }  } else {    numberOfBins=256;  }}  }
class C{  public static void registerCustomComponent(String name,Class cmp){  getComponentRegistry().put(name,cmp);}  }
class C{  public static boolean isLinux(){  return _isLinux;}  }
class C{  public void processDisconnection(GameService service){  for (  Game game : service.getAllActiveGames()) {    game.setHeader(PgnHeader.ResultDescription,"Interrupted by disconnection");    game.setHeader(PgnHeader.Result,Result.UNDETERMINED.getDescription());    game.clearState(Game.ACTIVE_STATE | Game.IS_CLOCK_TICKING_STATE);    game.addState(Game.INACTIVE_STATE);    service.fireGameInactive(game.getId());    service.removeGame(game);    takebackParser.clearTakebackMessages(game.getId());    if (LOG.isDebugEnabled()) {      LOG.debug("Processed removing game: " + game.getId());    }  }}  }
class C{  public void removeNearestMarker(int x,int y){  List<MapNode> markers=map.getMarkers();  float lat=getTransformer().lat(y);  float lon=getTransformer().lon(x);  MapNode marker=new Position(lat,lon).selectNearest(markers,null);  if (marker != null)   markers.remove(marker);  map.fireMapDataEvent(new MapEvent(map,MapEvent.Type.MAP_MODIFIED));}  }
class C{  @Override public boolean inRange(SubRange range){  return range.getBegin() >= begin && range.getEnd() <= end;}  }
class C{  public void sortColors(int[] nums){  int redEnd=-1;  int whiteEnd=-1;  for (int i=0; i < nums.length; i++) {    int v=nums[i];    nums[i]=BLUE;    if (v == RED) {      nums[++whiteEnd]=WHITE;      nums[++redEnd]=RED;    } else     if (v == WHITE) {      nums[++whiteEnd]=WHITE;    }  }}  }
class C{  @Override public boolean storesMixedCaseIdentifiers(){  debugCodeCall("storesMixedCaseIdentifiers");  return false;}  }
class C{  public static String toCommaSeparatedList(Object[] o){  return toCommaSeparatedList(o,true,false);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildoldNPC(zone);  buildladyNPC(zone);}  }
