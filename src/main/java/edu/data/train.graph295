class C{  public static ClassVertex createMissingClassVertex(ClassDescriptor classDescriptor,boolean isInterface){  return new ClassVertex(classDescriptor,isInterface);}  }
class C{  private void rMoveTo(float dx,float dy){  dx+=mLastX;  dy+=mLastY;  mPath.moveTo(mLastX=dx,mLastY=dy);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:56.808 -0500",hash_original_method="DD9AA0788424353442B0CFE218D97412",hash_generated_method="D16B9D80B8A3FF76F7E29D31CF350BD3") public String encodeBody(){  StringBuffer retval=new StringBuffer();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  retval.append(address.encode());  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty())   retval.append(SEMICOLON + this.parameters.encode());  return retval.toString();}  }
class C{  public synchronized List<Peer> select(final boolean requireNode,final boolean requireSolr){  List<Peer> l=new ArrayList<Peer>();  for (  Peer p : this.values()) {    if (requireNode && !p.get(Peer.Schema.nodestate).equals("1"))     continue;    if (requireSolr && !p.supportsSolr())     continue;    l.add(p);  }  return l;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double zFactor=0;  double slopeThreshold=0;  double profCurvThreshold=0;  double planCurvThreshold=0;  double radToDeg=180 / Math.PI;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      zFactor=Double.parseDouble(args[i]);    } else     if (i == 3) {      slopeThreshold=Double.parseDouble(args[i]);    } else     if (i == 4) {      profCurvThreshold=Double.parseDouble(args[i]);    } else     if (i == 5) {      planCurvThreshold=Double.parseDouble(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    double gridResX=DEM.getCellSizeX();    double gridResY=DEM.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double Zx, Zy, Zxx, Zyy, Zxy, p, Zx2, q, Zy2;    double fx, fy;    double gridResTimes2=gridResX * 2;    double gridResSquared=gridResX * gridResX;    double fourTimesGridResSquared=gridResSquared * 4;    double planCurv, profCurv, slope;    double eightGridRes=8 * gridResX;    double[] N=new double[8];    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette("landclass.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          z=z * zFactor;          for (c=0; c < 8; c++) {            N[c]=DEM.getValue(row + dY[c],col + dX[c]);            if (N[c] != noData) {              N[c]=N[c] * zFactor;            } else {              N[c]=z;            }          }          Zx=(N[1] - N[5]) / gridResTimes2;          Zy=(N[7] - N[3]) / gridResTimes2;          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          Zx2=Zx * Zx;          Zy2=Zy * Zy;          p=Zx2 + Zy2;          q=p + 1;          if (p > 0) {            fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;            fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;            slope=Math.atan(Math.sqrt(fx * fx + fy * fy));            slope=slope * radToDeg;            planCurv=-1 * (Zxx * Zy2 - 2 * Zxy * Zx* Zy + Zyy * Zx2) / Math.pow(p,1.5);            planCurv=(planCurv * radToDeg);            profCurv=-1 * (Zxx * Zx2 + 2 * Zxy * Zx* Zy + Zyy * Zy2) / Math.pow(p * q,1.5);            profCurv=(profCurv * radToDeg);            if (profCurv < -profCurvThreshold && planCurv <= -planCurvThreshold & slope > slopeThreshold) {              output.setValue(row,col,1);            } else             if (profCurv < -profCurvThreshold && planCurv > planCurvThreshold && slope > slopeThreshold) {              output.setValue(row,col,2);            } else             if (profCurv > profCurvThreshold && planCurv <= planCurvThreshold && slope > slopeThreshold) {              output.setValue(row,col,3);            } else             if (profCurv > profCurvThreshold && planCurv > planCurvThreshold && slope > slopeThreshold) {              output.setValue(row,col,4);            } else             if (profCurv >= -profCurvThreshold && profCurv < profCurvThreshold && slope > slopeThreshold && planCurv <= -planCurvThreshold) {              output.setValue(row,col,5);            } else             if (profCurv >= -profCurvThreshold && profCurv < profCurvThreshold && slope > slopeThreshold && planCurv > planCurvThreshold) {              output.setValue(row,col,6);            } else             if (slope <= slopeThreshold) {              output.setValue(row,col,7);            } else {              output.setValue(row,col,noData);            }          } else {            output.setValue(row,col,noData);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);    String retstr="LANDFORM CLASSIFICATION KEY\n";    retstr+="\nValue:\tClass";    retstr+="\n1\tConvergent Footslope";    retstr+="\n2\tDivergent Footslope";    retstr+="\n3\tConvergent Shoulder";    retstr+="\n4\tDivergent Shoulder";    retstr+="\n5\tConvergent Backslope";    retstr+="\n6\tDivergent Backslope";    retstr+="\n7\tLevel";    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static ChooseConfig undefinedConfig(){  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void handleMessage(final Message message){  try {    if (InterceptorState.SERVER_IN.isActive(message)) {      HttpServletRequest req=(HttpServletRequest)message.getExchange().getInMessage().get(AbstractHTTPDestination.HTTP_REQUEST);      if (req.getLocalPort() == Common.DEFAULT_PUBLIC_SECURE_PORT) {        HttpHeaders headers=new HttpHeadersImpl(message.getExchange().getInMessage());        String subutaiHeader=headers.getHeaderString(Common.SUBUTAI_HTTP_HEADER);        String path=req.getRequestURI();        if (path.startsWith("/rest/v1/peer")) {          handlePeerMessage(subutaiHeader,message);        } else {          final String prefix="/rest/v1/env";          if (path.startsWith(prefix)) {            String s=path.substring(prefix.length() + 1);            String environmentId=s.substring(0,s.indexOf("/"));            handleEnvironmentMessage(subutaiHeader,environmentId,message);          }        }      }    }  } catch (  Exception e) {    throw new Fault(e);  }}  }
class C{  protected FEBASymbol(String symbolCode){  super();  this.symbolCode=symbolCode;  this.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  String iconRetrieverPath=Configuration.getStringValue(AVKey.MIL_STD_2525_ICON_RETRIEVER_PATH,MilStd2525Constants.DEFAULT_ICON_RETRIEVER_PATH);  this.setIconRetriever(new MilStd2525PointGraphicRetriever(iconRetrieverPath));}  }
class C{  public BottomRecyclerView(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);}  }
class C{  public synchronized void realtimeBar(int reqId,long time,double open,double high,double low,double close,long volume,double vwap,int tradeCount){}  }
class C{  public Linear4SystemSolver(final int numVariables,final int numEquations){  this.numVariables=numVariables;  this.numEdges=numEquations;  peeled=new boolean[numEquations];  edge=new int[numVariables];  edge2Vertex=new int[4][numEquations];  stack=new int[numEquations];  d=new int[numVariables];  visitStack=new IntArrayList(INITIAL_QUEUE_SIZE);  neverUsed=true;}  }
class C{  static InputStream openExceptionMessages(Locale locale){  if (LocaleHandler.isStandardLanguage(locale)) {    InputStream in=openResource(exceptionMessagesPath(locale));    if (in != null) {      return in;    }  }  return openResource(exceptionMessagesPath(FALLBACK_LOCALE));}  }
class C{  public BPTTNode(final NetworkPanel networkPanel,final BPTTNetwork group){  super(networkPanel,group);  setContextMenu();}  }
class C{  public Coordinate dest(){  return sym.orig;}  }
class C{  public boolean equivTo(Object o){  if (o == null)   return false;  if (o instanceof JimpleLocal) {    if (getName() != null && getType() != null)     return getName().equals(((Local)o).getName()) && getType().equals(((Local)o).getType()); else     if (getName() != null)     return getName().equals(((Local)o).getName()) && ((Local)o).getType() == null; else     if (getType() != null)     return ((Local)o).getName() == null && getType().equals(((Local)o).getType()); else     return ((Local)o).getName() == null && ((Local)o).getType() == null;  }  return false;}  }
class C{  public void sign(Key signingKey) throws XMLSignatureException {  if (signingKey instanceof PublicKey) {    throw new IllegalArgumentException(I18n.translate("algorithms.operationOnlyVerification"));  }  try {    SignedInfo si=this.getSignedInfo();    SignatureAlgorithm sa=si.getSignatureAlgorithm();    OutputStream so=null;    try {      sa.initSign(signingKey);      si.generateDigestValues();      so=new UnsyncBufferedOutputStream(new SignerOutputStream(sa));      si.signInOctetStream(so);    } catch (    XMLSecurityException ex) {      throw ex;    } finally {      if (so != null) {        try {          so.close();        } catch (        IOException ex) {          if (log.isLoggable(java.util.logging.Level.FINE)) {            log.log(java.util.logging.Level.FINE,ex.getMessage(),ex);          }        }      }    }    this.setSignatureValueElement(sa.sign());  } catch (  XMLSignatureException ex) {    throw ex;  }catch (  CanonicalizationException ex) {    throw new XMLSignatureException("empty",ex);  }catch (  InvalidCanonicalizerException ex) {    throw new XMLSignatureException("empty",ex);  }catch (  XMLSecurityException ex) {    throw new XMLSignatureException("empty",ex);  }}  }
class C{  private boolean clobberCurrentDocument(String url,boolean hasUserGesture){  boolean shouldOpenNewTab=IntentUtils.safeGetBooleanExtra(getIntent(),Browser.EXTRA_CREATE_NEW_TAB,false);  String applicationId=IntentUtils.safeGetStringExtra(getIntent(),Browser.EXTRA_APPLICATION_ID);  if (shouldOpenNewTab || !getPackageName().equals(applicationId))   return false;  int tabId=ChromeApplication.getDocumentTabModelSelector().getCurrentTabId();  if (tabId == Tab.INVALID_TAB_ID)   return false;  LoadUrlParams params=new LoadUrlParams(url,PageTransition.LINK | PageTransition.FROM_API);  params.setHasUserGesture(hasUserGesture);  AsyncTabCreationParams data=new AsyncTabCreationParams(params,new Intent(getIntent()));  AsyncTabCreationParamsManager.add(tabId,data);  if (!relaunchTask(tabId)) {    AsyncTabCreationParamsManager.remove(tabId);    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.615 -0400",hash_original_method="2A0FCF54F736DE946C3E9250E9959E88",hash_generated_method="E811732D32C39FBA7AE60F19F5BA0D3F") public void disable(BluetoothAdapter adapter){  int mask=(BluetoothReceiver.STATE_TURNING_OFF_FLAG | BluetoothReceiver.STATE_OFF_FLAG | BluetoothReceiver.SCAN_MODE_NONE_FLAG);  long start=-1;  BluetoothReceiver receiver=getBluetoothReceiver(mask);  int state=adapter.getState();switch (state) {case BluetoothAdapter.STATE_OFF:    assertFalse(adapter.isEnabled());  removeReceiver(receiver);return;case BluetoothAdapter.STATE_TURNING_ON:assertFalse(adapter.isEnabled());start=System.currentTimeMillis();break;case BluetoothAdapter.STATE_ON:assertTrue(adapter.isEnabled());start=System.currentTimeMillis();assertTrue(adapter.disable());break;case BluetoothAdapter.STATE_TURNING_OFF:assertFalse(adapter.isEnabled());mask=0;break;default :removeReceiver(receiver);fail(String.format("disable() invalid state: state=%d",state));}long s=System.currentTimeMillis();while (System.currentTimeMillis() - s < ENABLE_DISABLE_TIMEOUT) {state=adapter.getState();if (state == BluetoothAdapter.STATE_OFF && (receiver.getFiredFlags() & mask) == mask) {assertFalse(adapter.isEnabled());long finish=receiver.getCompletedTime();if (start != -1 && finish != -1) {writeOutput(String.format("disable() completed in %d ms",(finish - start)));} else {writeOutput("disable() completed");}removeReceiver(receiver);return;}sleep(POLL_TIME);}int firedFlags=receiver.getFiredFlags();removeReceiver(receiver);fail(String.format("disable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)",state,BluetoothAdapter.STATE_OFF,firedFlags,mask));}  }
class C{  private void meekR2(Node a,Graph graph,IKnowledge knowledge){  List<Node> adjacentNodes=graph.getAdjacentNodes(a);  visitedNodes.add(a);  if (adjacentNodes.size() < 2) {    return;  }  ChoiceGenerator cg=new ChoiceGenerator(adjacentNodes.size(),2);  int[] combination;  while ((combination=cg.next()) != null) {    Node b=adjacentNodes.get(combination[0]);    Node c=adjacentNodes.get(combination[1]);    if (graph.isDirectedFromTo(b,a) && graph.isDirectedFromTo(a,c) && graph.isUndirectedFromTo(b,c)) {      if (isArrowpointAllowed(b,c,knowledge,graph) && !createsCycle(b,c,graph)) {        Edge after=direct(b,c,graph);        Node x=after.getNode1();        Node y=after.getNode2();        rule1Queue.add(y);        rule2Queue.add(y);        rule3Queue.add(x);        if (useRule4) {          rule4Queue.add(x);        }        TetradLogger.getInstance().log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Meek R2",graph.getEdge(b,c)));      }    } else     if (graph.isDirectedFromTo(c,a) && graph.isDirectedFromTo(a,b) && graph.isUndirectedFromTo(c,b)) {      if (isArrowpointAllowed(c,b,knowledge,graph) && !createsCycle(c,b,graph)) {        Edge after=direct(c,b,graph);        Node x=after.getNode1();        Node y=after.getNode2();        rule1Queue.add(y);        rule2Queue.add(y);        rule3Queue.add(x);        if (useRule4) {          rule4Queue.add(x);        }        TetradLogger.getInstance().log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Meek R2",graph.getEdge(c,b)));      }    }  }}  }
class C{  public static String trim(String str){  return (str == null ? null : str.trim());}  }
class C{  public final void releaseRedirect() throws IOException {  final String location=(String)this.request.getAttribute(ATTR_KEY);  if (location != null) {    super.sendRedirect(location);  }}  }
class C{  public void allowDetachToRelease(boolean allowRelease){}  }
class C{  private void addEntryRtfToExport(Entry entry,StringBuilder result,SourcesHashList sources,boolean includeQuotations,boolean includeReferencesSection,boolean skipThisLevel) throws IOException {  if (!skipThisLevel) {    final Entry source=dbLogic.getEntryById(entry.getSourceId());    int sourceId=0;    if (source != null) {      sourceId=sources.add(source);    }    if (includeQuotations && entry.hasQuotation()) {      appendRtfString(result,entry.getQuotation(""));      result.append("\\par\n");      if (includeReferencesSection) {        if (sourceId != 0) {          result.append("[Reference " + sourceId + "]\\par\n");        }      }      result.append("\\par\n");    }    if (entry.hasNote()) {      appendRtfString(result,entry.getNote(""));      result.append("\\par\n\\par\n");    }  }  List<?> childrenFromDb=dbLogic.getEntriesByParentId(entry.getId());  if (!childrenFromDb.isEmpty()) {    final Hashtable<String,Entry> children=new Hashtable<String,Entry>();    Entry first=null;    for (    final Object childObject : childrenFromDb) {      final Entry child=(Entry)childObject;      children.put(child.getId(),child);      if (!child.hasPreviousSiblingId()) {        first=child;      }    }    if (first != null) {      Entry child=first;      for (int i=0; i < children.size(); ++i) {        if (child == null) {          break;        }        addEntryRtfToExport(child,result,sources,includeQuotations,includeReferencesSection,false);        if (!child.hasNextSiblingId()) {          break;        }        final String nextId=child.getNextSiblingId();        child=children.get(nextId);      }    } else {      final Iterator<Map.Entry<String,Entry>> iterator=children.entrySet().iterator();      while (iterator.hasNext()) {        final Map.Entry<String,Entry> mapEntry=iterator.next();        final Entry child=mapEntry.getValue();        addEntryRtfToExport(child,result,sources,includeQuotations,includeReferencesSection,false);      }    }  }}  }
class C{  public final void addWeights(Instance instance,double[] weights) throws Exception {  int classIndex;  int i;  classIndex=(int)instance.classValue();  for (i=0; i < m_perBag.length; i++) {    double weight=instance.weight() * weights[i];    m_perClassPerBag[i][classIndex]=m_perClassPerBag[i][classIndex] + weight;    m_perBag[i]=m_perBag[i] + weight;    m_perClass[classIndex]=m_perClass[classIndex] + weight;    totaL=totaL + weight;  }}  }
class C{  public void respond(ResponseCode code,byte[] payload){  Response response=new Response(code);  response.setPayload(payload);  respond(response);}  }
class C{  @Pure @Inline(value=Inline.When.AllArgumentsAreConstant) public static boolean isAssignableWith(RVMType lhs,RVMType rhs){  if (!lhs.isResolved()) {    lhs.resolve();  }  if (!rhs.isResolved()) {    rhs.resolve();  }  return DynamicTypeCheck.instanceOfResolved(lhs,rhs);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override public String toString(){  ArrayList<ArrayList<Map.Entry<String,Object>>> list=new ArrayList<>();  for (int i=0; i < _rowList.size(); i++) {    ArrayList<Map.Entry<String,Object>> row=new ArrayList<>();    JdbcRow rowSet=_rowList.get(i);    for (int j=1; j <= rowSet.getColumnCount(); j++) {      String name=_columnNames[j - 1];      Object value=rowSet.getObject(j);      row.add(new SimpleEntry<String,Object>(name,value));    }    list.add(row);  }  if (list.size() > 0) {    return list.toString();  } else {    return String.valueOf(_updateCount);  }}  }
class C{  private static boolean isCertificateEntry(String alias) throws KeyStoreException {  return sKeyStore.isCertificateEntry(alias);}  }
class C{  public int count(){  return m_nodes.size();}  }
class C{  public Base64OutputStream(OutputStream out,int flags,boolean encode){  super(out);  this.flags=flags;  if (encode) {    coder=new Base64.Encoder(flags,null);  } else {    coder=new Base64.Decoder(flags,null);  }}  }
class C{  public void testMpsTimeStamps(){  int msgIndx=1;  Message m1=new Message(h1,h2,"" + msgIndx++,1);  h1.createNewMessage(m1);  Message m2=new Message(h1,h1,"" + msgIndx++,1);  h1.createNewMessage(m2);  Message m3=new Message(h1,h3,"" + msgIndx++,1);  h1.createNewMessage(m3);  Message m4=new Message(h3,h2,"" + msgIndx++,1);  h3.createNewMessage(m4);  Message m5=new Message(h3,h3,"" + msgIndx++,1);  h3.createNewMessage(m5);  Message m6=new Message(h4,h3,"" + msgIndx++,1);  h4.createNewMessage(m6);  Message m7=new Message(h4,h4,"" + msgIndx++,1);  h4.createNewMessage(m7);  Message m8=new Message(h2,h2,"" + msgIndx++,1);  h2.createNewMessage(m8);  Message m9=new Message(h2,h4,"" + msgIndx++,1);  h2.createNewMessage(m9);  h1.connect(h2);  disconnect(h1);  assertEquals(0.0,r1.getCost(h1,h2));  assertEquals(0.0,r1.getCost(h2,h1));  clock.advance(1.0);  h1.connect(h3);  disconnect(h1);  assertEquals(0.5,r1.getCost(h1,h2));  assertEquals(0.5,r3.getCost(h1,h2));  assertEquals(0.5,r3.getCost(h1,h3));  clock.advance(1.0);  h1.connect(h4);  disconnect(h1);  assertEquals(0.75,r4.getCost(h1,h3));  assertEquals(0.5,r4.getCost(h1,h4));  clock.advance(1.0);  h2.connect(h3);  disconnect(h2);  assertEquals(0.5,r2.getCost(h1,h2));  assertEquals(0.5,r3.getCost(h1,h2));  clock.advance(1.0);  h1.connect(h2);  disconnect(h1);  assertEquals((1 - 0.75) + (1 - 0.25),r2.getCost(h2,h4));}  }
class C{  @Override protected void installViewListeners(View p){  super.installViewListeners(p);  Action undoActionInView=p.getActionMap().get(ID);  if (undoActionInView != null && undoActionInView != this) {    undoActionInView.addPropertyChangeListener(redoActionPropertyListener);  }}  }
class C{  @Override public int hashCode(){  return Arrays.hashCode(ipaddress);}  }
class C{  public void print(PrintStream ps){  for (int i=0; i <= order; i++) {    if (i >= 0 && i < 10)     ps.println(i + "    " + a[i]); else     if (i >= 10 && i <= 100)     ps.println(i + "   " + a[i]);  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public static void logContract(com.ib.client.Contract contract){  _log.debug("Symbol: " + contract.m_symbol + " Sec Type: "+ contract.m_secType+ " Exchange: "+ contract.m_exchange+ " Con Id: "+ contract.m_conId+ " Currency: "+ contract.m_currency+ " SecIdType: "+ contract.m_secIdType+ " Primary Exch: "+ contract.m_primaryExch+ " Local Symbol: "+ contract.m_localSymbol+ " SecId: "+ contract.m_secId+ " Multiplier: "+ contract.m_multiplier+ " Expiry: "+ contract.m_expiry);}  }
class C{  private static Element addElement(Document doc,Node parent,String tagName){  return addElement(doc,parent,tagName,null,null,null,null);}  }
class C{  synchronized public final boolean isResourceAbsent(String resourceID){  AbsentResourceEntry entry=(AbsentResourceEntry)this.possiblyAbsent.get(resourceID);  if (entry == null)   return false;  long timeSinceLastMark=System.currentTimeMillis() - entry.timeOfLastMark;  if (timeSinceLastMark > this.tryAgainInterval) {    this.possiblyAbsent.remove(resourceID);    return false;  }  return timeSinceLastMark < this.minCheckInterval || entry.numTries > this.maxTries;}  }
class C{  public static boolean isRefCountTracking(){  return getInstance().isRefCountTracking();}  }
class C{  public void saveConnectionInfo(String systemId,String host,int port,String user,String password){  LOG.info("Saving connection information for {} - {}:{}",systemId,host,port);  List<String> listHost=new ArrayList<>();  List<String> listPort=new ArrayList<>();  List<String> listUser=new ArrayList<>();  List<String> listPass=new ArrayList<>();  listHost.add(host);  listPort.add(Integer.toString(port));  listUser.add(user);  listPass.add(password);  Map<String,List<String>> attributes=new HashMap<>();  attributes.put(HOST_KEY,listHost);  attributes.put(PORT_KEY,listPort);  attributes.put(USER_KEY,listUser);  attributes.put(PASS_KEY,listPass);  this.driverRegistry.clearDriverAttributesForKey(DRIVER_NAME,systemId);  this.driverRegistry.setDriverAttributesForKey(DRIVER_NAME,systemId,attributes);}  }
class C{  public List<NamedRelatedResourceRep> listByNetwork(URI networkId){  return getList(PathConstants.STORAGE_PORT_BY_NETWORK_URL,networkId);}  }
class C{  public static void main(String[] args){  In in=new In(args[0]);  int[] a=in.readAllInts();  int count=count(a);  StdOut.println(count);}  }
class C{  public boolean isIrc(){  return isProtocol(IRC);}  }
class C{  public void moveViewToY(float yValue,AxisDependency axis){  float valsInView=getDeltaY(axis) / mViewPortHandler.getScaleY();  Runnable job=new MoveViewJob(mViewPortHandler,0f,yValue + valsInView / 2f,getTransformer(axis),this);  if (mViewPortHandler.hasChartDimens()) {    post(job);  } else {    mJobs.add(job);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private boolean isOn(long flag){  return (options & flag) > 0;}  }
class C{  private void crc32Manifest(ZipEntry e,Manifest m) throws IOException {  CRC32OutputStream os=new CRC32OutputStream();  m.write(os);  os.updateEntry(e);}  }
class C{  public Boolean isAfterPowerOn(){  return afterPowerOn;}  }
class C{  public boolean definitelyDifferent(MethodReference that){  if (this == that)   return false;  if (name != that.name || descriptor != that.descriptor)   return true;  RVMMethod mine=peekResolvedMethod();  RVMMethod theirs=that.peekResolvedMethod();  if (mine == null || theirs == null)   return false;  return mine != theirs;}  }
class C{  public final void testGetCollection02(){  Vector certificates=new Vector();  CollectionCertStoreParameters cp=new CollectionCertStoreParameters(certificates);  assertNotNull(cp.getCollection());}  }
class C{  public boolean isActive(SignalMast dest){  if (!destList.containsKey(dest)) {    return false;  }  return destList.get(dest).isActive();}  }
class C{  public int find(int key){  assert key != emptyVal;  int h=hash(key);  int s=h & (keys.length - 1);  if (keys[s] == key)   return s;  if (keys[s] == emptyVal)   return -s - 1;  int increment=(h >> 7) | 1;  for (; ; ) {    s=(s + increment) & (keys.length - 1);    if (keys[s] == key)     return s;    if (keys[s] == emptyVal)     return -s - 1;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:41.104 -0500",hash_original_method="045AE53A798F87A9B3BAB257E6D245EE",hash_generated_method="65ED9F602CD521832742D941DC0C4D2D") static void closeStream(Closeable stream){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(LOG_TAG,"Could not close stream",e);    }  }}  }
class C{  public void delete(String idToDelete) throws IOException, ServiceException {  ListEntry entry=entriesCached.get(idToDelete);  if (entry != null) {    entry.delete();    out.println("Deleted!");  } else {    out.println("I don't know that ID.");    out.println("In GData, you must get an entry before deleting it,");    out.println("so that you have the version ID.");    out.println("You might have to 'list' first.");  }}  }
class C{  public CharBuffer append(char[] buffer){  return append(buffer,0,buffer.length);}  }
class C{  public static void printFieldValue(final FieldDescriptor field,final Object value,final Appendable output) throws IOException {  DEFAULT_PRINTER.printFieldValue(field,value,new TextGenerator(output));}  }
class C{  @SuppressWarnings("unchecked") private String applyFieldNamingPolicy(FieldNamingPolicy fieldNamingPolicy,String fieldName) throws ProcessingException {  Constructor<Field> fieldConstructor=(Constructor<Field>)Field.class.getDeclaredConstructors()[0];  fieldConstructor.setAccessible(true);  Field fakeField;  try {    fakeField=fieldConstructor.newInstance(null,fieldName,null,-1,-1,null,null);  } catch (  InstantiationException|IllegalAccessException|InvocationTargetException e) {    throw new ProcessingException("Error while creating 'fake' field for naming policy.");  }  return fieldNamingPolicy.translateName(fakeField);}  }
class C{  public static void toggleStars(final JFrame parent,final INaviModule[] modules){  for (  final INaviModule module : modules) {    try {      module.getConfiguration().setStared(!module.getConfiguration().isStared());    } catch (    final CouldntSaveDataException e) {      CUtilityFunctions.logException(e);      final String innerMessage="E000063: " + "Module star could not be toggled";      final String innerDescription=CUtilityFunctions.createDescription(String.format("The star state of module '%s' could not be toggled.",module.getConfiguration().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The module star was not updated."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,e);    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isEmpty(){  return indexToEntry.isEmpty();}  }
class C{  public void run(){  long start_time=System.currentTimeMillis();  long sim_timestep=0;  boolean robots_done=false;  while (keep_running) {    while (pause || (description_file_loaded == false)) {      if (graphics_on)       this.repaint();      try {        Thread.sleep(200);      } catch (      InterruptedException e) {      }    }    current_time=System.currentTimeMillis();    sim_timestep=timestep;    robots_done=true;    for (int i=0; i < control_systems.length; i++) {      int stat=control_systems[i].takeStep();      if (stat != ControlSystemS.CSSTAT_DONE)       robots_done=false;    }    for (int i=0; i < simulated_objects.length; i++)     simulated_objects[i].takeStep(sim_timestep,simulated_objects);    to_draw=true;    if (graphics_on)     this.repaint();    if (to_draw && graphics_on) {      try {        Thread.sleep(10);      } catch (      InterruptedException e) {      }    }    frames++;    if (((timeout > 0) && (sim_time >= timeout)) || robots_done) {      if (trials <= 1) {        for (int i=0; i < control_systems.length; i++) {          control_systems[i].trialEnd();          control_systems[i].quit();        }        keep_running=false;        if (graphics_on == false)         showRuntimeStats();        return;      } else {        for (int i=0; i < control_systems.length; i++) {          control_systems[i].trialEnd();        }        trials--;        sim_time=0;        reset();        start();      }    }    sim_time+=sim_timestep;  }}  }
class C{  final public void put(final byte[] b,final int off,final int len){  put(this.pos,b,off,len);  this.pos+=len;  this.limit=this.pos;}  }
class C{  public void endRun() throws Exception {}  }
class C{  private static String dotsToRegex(String dotsName){  String tmp=dotsName.replace("$","\\$");  return tmp.replace(".",SEP);}  }
class C{  public static Boolean isAppHidden(AppInfo appInfo,Set<String> appHidden){  Boolean res=false;  if (appHidden.contains(appInfo.toString())) {    res=true;  }  return res;}  }
class C{  public boolean hasEntryLink(){  return super.hasElement(EntryLink.KEY);}  }
class C{  @Override public boolean supportsBatchUpdates(){  debugCodeCall("supportsBatchUpdates");  return true;}  }
class C{  @Override public Iterator<Map.Entry<byte[],Map<String,byte[]>>> iterator(){  final File location=this.table.location();  final int keylen=this.table.keylength();  try {    this.table.flushBuffer();    return new EntryIter(location,keylen);  } catch (  final IOException e1) {    final ByteOrder order=this.table.ordering();    final int buffermax=this.table.getBuffermax();    this.table.close();    try {      final Iterator<Map.Entry<byte[],Map<String,byte[]>>> iter=new EntryIter(location,keylen);      this.table=new Heap(location,keylen,order,buffermax);      return iter;    } catch (    final IOException e) {      ConcurrentLog.severe("PropertiesTable",e.getMessage(),e);      return null;    }  }}  }
class C{  public static String toLowerCase(String s,Locale locale){  if (s == null) {    return null;  }  StringBuilder sb=null;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c > 127) {      if (locale == null) {        locale=Locale.getDefault();      }      return s.toLowerCase(locale);    }    if ((c >= 'A') && (c <= 'Z')) {      if (sb == null) {        sb=new StringBuilder(s);      }      sb.setCharAt(i,(char)(c + 32));    }  }  if (sb == null) {    return s;  }  return sb.toString();}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  assert digester.peek() instanceof FacesConfigBean : "Assertion Error: Expected FacesConfigBean to be at the top of the stack";  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[ReferencedBeanRule]{" + digester.getMatch() + "} Push "+ CLASS_NAME);  }  Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);  ReferencedBeanBean rbb=(ReferencedBeanBean)clazz.newInstance();  digester.push(rbb);}  }
class C{  public boolean add(K key,V item){  Set<V> values=map.get(key);  if (values == null) {    values=(sorted ? new TreeSet<V>() : new HashSet<V>());    map.put(key,values);  }  if (item == null)   return false;  return values.add(item);}  }
class C{  public void onScannerClosedWithResult(final Beacon beacon){  mServiceConnection.stopRangingBeaconsInRegion(mScannerFragment);  mScannerFragment=null;  final Cursor cursor=mDatabaseHelper.findRegionByBeacon(beacon);  try {    long id;    if (cursor.moveToNext()) {      id=cursor.getLong(0);    } else {      id=mDatabaseHelper.addRegion(beacon,getString(R.string.default_beacon_name),BeaconContract.EVENT_GET_NEAR,BeaconContract.ACTION_MONA_LISA,null);    }    onEditRegion(id);  }  finally {    cursor.close();  }}  }
class C{  private int monthLength(int month){  assert jdate.isNormalized();  return jdate.isLeapYear() ? GregorianCalendar.LEAP_MONTH_LENGTH[month] : GregorianCalendar.MONTH_LENGTH[month];}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private double radicalInverse(long i){  double digit=1.0 / (double)base;  double radical=digit;  double inverse=0.0;  while (i > 0) {    inverse+=digit * (double)(i % base);    digit*=radical;    i/=base;  }  return inverse;}  }
class C{  protected CommentCollectingScannerFactory(Context context){  super(context);}  }
class C{  public static void unpremultiply(int[] p,int offset,int length){  length+=offset;  for (int i=offset; i < length; i++) {    int rgb=p[i];    int a=(rgb >> 24) & 0xff;    int r=(rgb >> 16) & 0xff;    int g=(rgb >> 8) & 0xff;    int b=rgb & 0xff;    if (a != 0 && a != 255) {      float f=255.0f / a;      r*=f;      g*=f;      b*=f;      if (r > 255)       r=255;      if (g > 255)       g=255;      if (b > 255)       b=255;      p[i]=(a << 24) | (r << 16) | (g << 8)| b;    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:03.061 -0500",hash_original_method="FA23D3FC8F275B4F859DA176A5851F12",hash_generated_method="F764592FAC79A9F63D039B536E6828F9") public DigitsKeyListener(boolean sign,boolean decimal){  mSign=sign;  mDecimal=decimal;  int kind=(sign ? SIGN : 0) | (decimal ? DECIMAL : 0);  mAccepted=CHARACTERS[kind];}  }
class C{  @Override public String convertToString(EDataType eDataType,Object instanceValue){switch (eDataType.getClassifierID()) {case TypesPackage.NULL_MODIFIER:    return convertNullModifierToString(eDataType,instanceValue);case TypesPackage.UNDEF_MODIFIER:  return convertUndefModifierToString(eDataType,instanceValue);case TypesPackage.TYPING_STRATEGY:return convertTypingStrategyToString(eDataType,instanceValue);case TypesPackage.TYPE_ACCESS_MODIFIER:return convertTypeAccessModifierToString(eDataType,instanceValue);case TypesPackage.MEMBER_ACCESS_MODIFIER:return convertMemberAccessModifierToString(eDataType,instanceValue);case TypesPackage.MEMBER_TYPE:return convertMemberTypeToString(eDataType,instanceValue);case TypesPackage.ITERABLE_OF_TCLASSIFIER:return convertIterableOfTClassifierToString(eDataType,instanceValue);case TypesPackage.VARIANCE:return convertVarianceToString(eDataType,instanceValue);case TypesPackage.NAME_AND_ACCESS:return convertNameAndAccessToString(eDataType,instanceValue);case TypesPackage.MEMBER_LIST:return convertMemberListToString(eDataType,instanceValue);case TypesPackage.TCLASSIFIER_ITERABLE:return convertTClassifierIterableToString(eDataType,instanceValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public CharBuffer replace(int start,int end,char[] buffer,int offset,int len){  int length=length();  if (start < 0 || end < start || length < start)   throw new StringIndexOutOfBoundsException();  ensureCapacity(len + length - (end - start));  char[] thisBuffer=buffer();  if (len < end - start) {    int tail=length - end;    for (int i=0; i < tail; i++)     thisBuffer[start + len + i]=thisBuffer[end + i];  } else {    int tail=length - end;    for (int i=tail - 1; i >= 0; i--)     thisBuffer[end + i]=thisBuffer[start + len + i];  }  System.arraycopy(buffer,offset,thisBuffer,start,len);  length(length + len - (end - start));  return this;}  }
class C{  public EmptySpace(TerminalSize size){  this(null,size);}  }
class C{  public static LdapUser createLdapUser(){  return new LdapUserImpl();}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public static EnvironmentClassLoader create(ClassLoader parent,String id){  if (parent == null)   parent=Thread.currentThread().getContextClassLoader();  ClassLoader systemClassLoader=getSystemClassLoaderSafe();  if (parent == null || isParent(parent,systemClassLoader))   parent=systemClassLoader;  String className=System.getProperty("caucho.environment.class.loader");  if (className != null) {    try {      Class<?> cl=Thread.currentThread().getContextClassLoader().loadClass(className);      Constructor<?> ctor=cl.getConstructor(new Class[]{ClassLoader.class,String.class});      Object instance=ctor.newInstance(parent,id);      return (EnvironmentClassLoader)instance;    } catch (    Exception e) {      e.printStackTrace();    }  }  return new EnvironmentClassLoader(parent,id);}  }
class C{  @Override public String toString(){  return mString;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.299 -0500",hash_original_method="5304D5C5F98F936C59A15960318DA98F",hash_generated_method="C6E6BF2DAFEBC6FB6A6DE5127AC7C2D1") private void reportInterruptAfterWait(int interruptMode) throws InterruptedException {  if (interruptMode == THROW_IE)   throw new InterruptedException(); else   if (interruptMode == REINTERRUPT)   selfInterrupt();}  }
class C{  public static void describeObject(ObjectReference addr){  Object obj=addr.toObject();  RVMType type=Magic.getObjectType(obj);  VM.sysWrite(type.getDescriptor());}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response createSnapshot(@PathParam("tenant_id") String openstack_tenant_id,SnapshotCreateRequestGen param,@Context HttpHeaders header,@HeaderParam("X-Cinder-V1-Call") String isV1Call) throws InternalException {  String snapshotName=null;  String snapshotDescription=null;  if (isV1Call != null) {    snapshotName=param.snapshot.display_name;    snapshotDescription=param.snapshot.display_description;  } else {    snapshotName=param.snapshot.name;    snapshotDescription=param.snapshot.description;  }  if (snapshotName == null) {    snapshotName="snapshot-" + RandomStringUtils.random(10);  }  if (snapshotName == null || (snapshotName.length() <= 2)) {    throw APIException.badRequests.parameterIsNotValid(param.snapshot.name);  }  URI volumeUri=null;  Volume volume=null;  volumeUri=URI.create(param.snapshot.volume_id);  volume=queryVolumeResource(volumeUri,openstack_tenant_id);  if (volume == null) {    _log.error("Invalid source volume id to create snapshot ={} ",param.snapshot.volume_id);    return CinderApiUtils.createErrorResponse(404,"Not Found : Invalid source volume id " + param.snapshot.volume_id);  }  VirtualPool pool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());  if (pool == null) {    _log.info("Virtual Pool corresponding to the volume does not exist.");    throw APIException.badRequests.parameterIsNotValid(volume.getVirtualPool().toString());  }  if (!validateSnapshotCreate(openstack_tenant_id,pool,volume.getProvisionedCapacity())) {    _log.info("The volume can not be created because of insufficient quota for virtual pool.");    throw APIException.badRequests.insufficientQuotaForVirtualPool(pool.getLabel(),"virtual pool");  }  if (!validateSnapshotCreate(openstack_tenant_id,null,volume.getProvisionedCapacity())) {    _log.info("The volume can not be created because of insufficient quota for Project.");    throw APIException.badRequests.insufficientQuotaForProject(pool.getLabel(),"project");  }  BlockFullCopyManager fcManager=new BlockFullCopyManager(_dbClient,_permissionsHelper,_auditMgr,_coordinator,_placementManager,sc,uriInfo,_request,_tenantsService);  VolumeIngestionUtil.checkOperationSupportedOnIngestedVolume(volume,ResourceOperationTypeEnum.CREATE_VOLUME_SNAPSHOT,_dbClient);  BlockServiceUtils.validateNotAnInternalBlockObject(volume,false);  validateSourceVolumeHasExported(volume);  String snapshotType=TechnologyType.NATIVE.toString();  Boolean createInactive=Boolean.FALSE;  BlockServiceApi api=getBlockServiceImpl(pool,_dbClient);  List<Volume> volumesToSnap=new ArrayList<Volume>();  volumesToSnap.addAll(api.getVolumesToSnap(volume,snapshotType));  api.validateCreateSnapshot(volume,volumesToSnap,snapshotType,snapshotName,fcManager);  String taskId=UUID.randomUUID().toString();  List<URI> snapshotURIs=new ArrayList<URI>();  List<BlockSnapshot> snapshots=api.prepareSnapshots(volumesToSnap,snapshotType,snapshotName,snapshotURIs,taskId);  TaskList response=new TaskList();  for (  BlockSnapshot snapshot : snapshots) {    response.getTaskList().add(toTask(snapshot,taskId));  }  _dbClient.createTaskOpStatus(Volume.class,volume.getId(),taskId,ResourceOperationTypeEnum.CREATE_VOLUME_SNAPSHOT);  Boolean readOnly=false;  api.createSnapshot(volume,snapshotURIs,snapshotType,createInactive,readOnly,taskId);  SnapshotCreateResponse snapCreateResp=new SnapshotCreateResponse();  for (  TaskResourceRep rep : response.getTaskList()) {    URI snapshotUri=rep.getResource().getId();    BlockSnapshot snap=_dbClient.queryObject(BlockSnapshot.class,snapshotUri);    if (snap != null) {      StringMap extensions=snap.getExtensions();      if (extensions == null)       extensions=new StringMap();      extensions.put("display_description",(snapshotDescription == null) ? "" : snapshotDescription);      extensions.put("taskid",rep.getId().toString());      _log.debug("Create snapshot : stored description");      snap.setExtensions(extensions);      ScopedLabelSet tagSet=new ScopedLabelSet();      snap.setTag(tagSet);      String[] splits=snapshotUri.toString().split(":");      String tagName=splits[3];      if (tagName == null || tagName.isEmpty() || tagName.length() < 2) {        throw APIException.badRequests.parameterTooShortOrEmpty("Tag",2);      }      Volume parentVol=_permissionsHelper.getObjectById(snap.getParent(),Volume.class);      URI tenantOwner=parentVol.getTenant().getURI();      ScopedLabel tagLabel=new ScopedLabel(tenantOwner.toString(),tagName);      tagSet.add(tagLabel);      _dbClient.updateObject(snap);      if (isV1Call != null) {        _log.debug("Inside V1 call");        return CinderApiUtils.getCinderResponse(getSnapshotDetail(snap,isV1Call,openstack_tenant_id),header,true,CinderConstants.STATUS_OK);      } else {        return CinderApiUtils.getCinderResponse(getSnapshotDetail(snap,isV1Call,openstack_tenant_id),header,true,CinderConstants.STATUS_ACCEPT);      }    }  }  return CinderApiUtils.getCinderResponse(new CinderSnapshot(),header,true,CinderConstants.STATUS_ACCEPT);}  }
class C{  public TechnicalProductHistory(TechnicalProduct c){  super(c);  if (c.getOrganization() != null) {    setOrganizationObjKey(c.getOrganization().getKey());  }}  }
class C{  public void init(IStructuredSelection selection){  if (selection instanceof StructuredSelection) {    Object obj=((StructuredSelection)selection).getFirstElement();    if (obj instanceof IContainer) {      initialSelection=(IContainer)obj;    } else {      initialSelection=(IContainer)FrancaWizardUtil.tryInvoke(obj,"getResource");    }    selectedProject=initialSelection.getProject();    if (containerContentProvider != null) {      containerContentProvider.setInitialSeletion(initialSelection);    }  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("LoginForm[");  buffer.append("m_user = ").append(m_user);  buffer.append(", m_pwd = *****");  buffer.append(", m_language = ").append(m_language);  buffer.append("]");  return buffer.toString();}  }
class C{  public void testLoaderWithStream(){  System.out.println("testLoaderWithStream is ignored!");}  }
class C{  public Collective(String name,Observer o,Contributor c){  this(name,o,c,null);}  }
class C{  public void testParseTaskSequenceRepetition() throws Exception {  String taskStr="AddDoc";  String parsedTasks="{ " + taskStr + " } : 1000";  Benchmark benchmark=new Benchmark(new StringReader(propPart + parsedTasks));  Algorithm alg=benchmark.getAlgorithm();  ArrayList<PerfTask> algTasks=alg.extractTasks();  boolean foundAdd=false;  for (  final PerfTask task : algTasks) {    if (task.toString().indexOf(taskStr) >= 0) {      foundAdd=true;    }    if (task instanceof TaskSequence) {      assertEquals("repetions should be 1000 for " + parsedTasks,1000,((TaskSequence)task).getRepetitions());      assertFalse("sequence for " + parsedTasks + " should be sequential!",((TaskSequence)task).isParallel());    }    assertTrue("Task " + taskStr + " was not found in "+ alg.toString(),foundAdd);  }}  }
class C{  private void initSuffixMargin(){  int defSuffixLRMargin=Utils.dp2px(mContext,DEFAULT_SUFFIX_LR_MARGIN);  boolean isSuffixLRMarginNull=true;  if (mSuffixLRMargin >= 0) {    isSuffixLRMarginNull=false;  }  if (isShowDay && mSuffixDayTextWidth > 0) {    if (mSuffixDayLeftMargin < 0) {      if (!isSuffixLRMarginNull) {        mSuffixDayLeftMargin=mSuffixLRMargin;      } else {        mSuffixDayLeftMargin=defSuffixLRMargin;      }    }    if (mSuffixDayRightMargin < 0) {      if (!isSuffixLRMarginNull) {        mSuffixDayRightMargin=mSuffixLRMargin;      } else {        mSuffixDayRightMargin=defSuffixLRMargin;      }    }  } else {    mSuffixDayLeftMargin=0;    mSuffixDayRightMargin=0;  }  if (isShowHour && mSuffixHourTextWidth > 0) {    if (mSuffixHourLeftMargin < 0) {      if (!isSuffixLRMarginNull) {        mSuffixHourLeftMargin=mSuffixLRMargin;      } else {        mSuffixHourLeftMargin=defSuffixLRMargin;      }    }    if (mSuffixHourRightMargin < 0) {      if (!isSuffixLRMarginNull) {        mSuffixHourRightMargin=mSuffixLRMargin;      } else {        mSuffixHourRightMargin=defSuffixLRMargin;      }    }  } else {    mSuffixHourLeftMargin=0;    mSuffixHourRightMargin=0;  }  if (isShowMinute && mSuffixMinuteTextWidth > 0) {    if (mSuffixMinuteLeftMargin < 0) {      if (!isSuffixLRMarginNull) {        mSuffixMinuteLeftMargin=mSuffixLRMargin;      } else {        mSuffixMinuteLeftMargin=defSuffixLRMargin;      }    }    if (isShowSecond) {      if (mSuffixMinuteRightMargin < 0) {        if (!isSuffixLRMarginNull) {          mSuffixMinuteRightMargin=mSuffixLRMargin;        } else {          mSuffixMinuteRightMargin=defSuffixLRMargin;        }      }    } else {      mSuffixMinuteRightMargin=0;    }  } else {    mSuffixMinuteLeftMargin=0;    mSuffixMinuteRightMargin=0;  }  if (isShowSecond) {    if (mSuffixSecondTextWidth > 0) {      if (mSuffixSecondLeftMargin < 0) {        if (!isSuffixLRMarginNull) {          mSuffixSecondLeftMargin=mSuffixLRMargin;        } else {          mSuffixSecondLeftMargin=defSuffixLRMargin;        }      }      if (isShowMillisecond) {        if (mSuffixSecondRightMargin < 0) {          if (!isSuffixLRMarginNull) {            mSuffixSecondRightMargin=mSuffixLRMargin;          } else {            mSuffixSecondRightMargin=defSuffixLRMargin;          }        }      } else {        mSuffixSecondRightMargin=0;      }    } else {      mSuffixSecondLeftMargin=0;      mSuffixSecondRightMargin=0;    }    if (isShowMillisecond && mSuffixMillisecondTextWidth > 0) {      if (mSuffixMillisecondLeftMargin < 0) {        if (!isSuffixLRMarginNull) {          mSuffixMillisecondLeftMargin=mSuffixLRMargin;        } else {          mSuffixMillisecondLeftMargin=defSuffixLRMargin;        }      }    } else {      mSuffixMillisecondLeftMargin=0;    }  } else {    mSuffixSecondLeftMargin=0;    mSuffixSecondRightMargin=0;    mSuffixMillisecondLeftMargin=0;  }}  }
class C{  public boolean isInOrbit(){  if (!worldObj.isRemote) {    return isInOrbit;  }  return this.dataWatcher.getWatchableObjectByte(18) == 1;}  }
class C{  public void assertSameState(TxDag dag){  assertSameEdges(edges,dag.getEdges(false));  assertSamePathCounts(M,dag.getPathCountMatrix());  assertSameValues(inbound,dag.inbound);  assertSameValues(outbound,dag.outbound);  assertEquals("#transactions",transactions.length,dag.transactions.length);  for (int i=0; i < transactions.length; i++) {    assertEquals("transactions[" + i + "]",transactions[i],dag.transactions[i]);  }}  }
class C{  private String text(Node root,String xpathExpr){  try {    return (String)xpath().evaluate(xpathExpr,root,XPathConstants.STRING);  } catch (  XPathExpressionException e) {    throw new RuntimeException(e);  }}  }
class C{  private boolean processRowToNextStep() throws KettleException {  if (null == this.sortDataRows) {    LOGGER.info("Record Processed For table: " + meta.getTabelName());    LOGGER.info("Number of Records was Zero");    String logMessage="Summary: Carbon Sort Key Step: Read: " + 0 + ": Write: "+ 0;    LOGGER.info(logMessage);    putRow(data.getOutputRowMeta(),new Object[0]);    setOutputDone();    return false;  }  try {    this.sortDataRows.startSorting();    LOGGER.info("Record Processed For table: " + meta.getTabelName());    String logMessage="Summary: Carbon Sort Key Step: Read: " + readCounter + ": Write: "+ writeCounter;    LOGGER.info(logMessage);    putRow(data.getOutputRowMeta(),new Object[0]);    setOutputDone();    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordSortRowsStepTotalTime(meta.getPartitionID(),System.currentTimeMillis());    CarbonTimeStatisticsFactory.getLoadStatisticsInstance().recordDictionaryValuesTotalTime(meta.getPartitionID(),System.currentTimeMillis());    return false;  } catch (  CarbonSortKeyAndGroupByException e) {    throw new KettleException(e);  }}  }
class C{  static void matricesAdd(FloatMatrix[] destMatrices,FloatMatrix[] sourceMatrices){  for (int i=0; i < destMatrices.length; ++i) {    destMatrices[i]=destMatrices[i].add(sourceMatrices[i]);  }}  }
class C{  public static void removeBeanInstances(JComponent container,Integer tab){  if (tab >= 0 && tab < TABBED_COMPONENTS.size()) {    System.out.println("Removing vector of beans at index: " + tab);    removeAllBeansFromContainer(container,tab);    TABBED_COMPONENTS.remove(tab.intValue());  }}  }
class C{  public static boolean moveToMarker(InputStream is,int markerToFind) throws IOException {  Preconditions.checkNotNull(is);  while (StreamProcessor.readPackedInt(is,1,false) == MARKER_FIRST_BYTE) {    int marker=MARKER_FIRST_BYTE;    while (marker == MARKER_FIRST_BYTE) {      marker=StreamProcessor.readPackedInt(is,1,false);    }    if (markerToFind == MARKER_SOFn && isSOFn(marker)) {      return true;    }    if (marker == markerToFind) {      return true;    }    if (marker == MARKER_SOI || marker == MARKER_TEM) {      continue;    }    if (marker == MARKER_EOI || marker == MARKER_SOS) {      return false;    }    int length=StreamProcessor.readPackedInt(is,2,false) - 2;    is.skip(length);  }  return false;}  }
class C{  protected String doIt() throws java.lang.Exception {  initContext();  OutputStream packageDocStream=null;  OutputStream packOutDocStream=null;  log.info("doIt - AD_PACKAGE_EXP_ID=" + p_PackOut_ID);  if (p_PackOut_ID == 0)   throw new IllegalArgumentException("No Record");  String sql1="SELECT * FROM AD_Package_Exp WHERE AD_Package_Exp_ID = " + p_PackOut_ID;  PreparedStatement pstmt1=null;  pstmt1=DB.prepareStatement(sql1,get_TrxName());  try {    ResultSet rs1=pstmt1.executeQuery();    while (rs1.next()) {      packagedir=rs1.getString(X_AD_Package_Exp.COLUMNNAME_File_Directory).trim();      if (!packagedir.endsWith("/") && !packagedir.endsWith("\\"))       packagedir+=File.separator;      packagename=packagedir + rs1.getString(X_AD_Package_Exp.COLUMNNAME_Name);      includesdir=rs1.getString(X_AD_Package_Exp.COLUMNNAME_Name) + File.separator + "**";      boolean success=(new File(packagename + File.separator + "doc"+ File.separator)).mkdirs();      String file_document=packagename + File.separator + "doc"+ File.separator+ rs1.getString(X_AD_Package_Exp.COLUMNNAME_Name)+ "Doc.xml";      packageDocStream=new FileOutputStream(file_document,false);      StreamResult streamResult_document=new StreamResult(new OutputStreamWriter(packageDocStream,"ISO-8859-1"));      SAXTransformerFactory tf_document=(SAXTransformerFactory)SAXTransformerFactory.newInstance();      tf_document.setAttribute("indent-number",new Integer(4));      TransformerHandler packageDocument=tf_document.newTransformerHandler();      Transformer serializer_document=packageDocument.getTransformer();      serializer_document.setOutputProperty(OutputKeys.ENCODING,"ISO-8859-1");      serializer_document.setOutputProperty(OutputKeys.INDENT,"yes");      packageDocument.setResult(streamResult_document);      packageDocument.startDocument();      AttributesImpl atts=new AttributesImpl();      atts.clear();      packageDocument.processingInstruction("xml-stylesheet","type=\"text/css\" href=\"adempiereDocument.css\"");      packageDocument.startElement("","","adempiereDocument",atts);      packageDocument.startElement("","","header",atts);      packageDocument.characters((rs1.getString(X_AD_Package_Exp.COLUMNNAME_Name) + " Package Description").toCharArray(),0,(rs1.getString(X_AD_Package_Exp.COLUMNNAME_Name) + " Package Description").length());      packageDocument.endElement("","","header");      packageDocument.startElement("","","H1",atts);      packageDocument.characters(("Package Name:").toCharArray(),0,("Package Name:").length());      packageDocument.endElement("","","H1");      packageDocument.startElement("","","packagename",atts);      packageDocument.characters(rs1.getString(X_AD_Package_Exp.COLUMNNAME_Name).toCharArray(),0,rs1.getString(X_AD_Package_Exp.COLUMNNAME_Name).length());      packageDocument.endElement("","","packagename");      packageDocument.startElement("","","H1",atts);      packageDocument.characters(("Creator:").toCharArray(),0,("Creator:").length());      packageDocument.endElement("","","H1");      packageDocument.startElement("","","creator",atts);      packageDocument.characters(rs1.getString(X_AD_Package_Exp.COLUMNNAME_UserName).toCharArray(),0,rs1.getString(X_AD_Package_Exp.COLUMNNAME_UserName).length());      packageDocument.endElement("","","creator");      packageDocument.startElement("","","H1",atts);      packageDocument.characters(("Email Address:").toCharArray(),0,("Email Address:").length());      packageDocument.endElement("","","H1");      packageDocument.startElement("","","creatorcontact",atts);      packageDocument.characters(rs1.getString(X_AD_Package_Exp.COLUMNNAME_EMail).toCharArray(),0,rs1.getString(X_AD_Package_Exp.COLUMNNAME_EMail).length());      packageDocument.endElement("","","creatorcontact");      packageDocument.startElement("","","H1",atts);      packageDocument.characters(("Created:").toCharArray(),0,("Created:").length());      packageDocument.endElement("","","H1");      packageDocument.startElement("","","createddate",atts);      packageDocument.characters(rs1.getString("Created").toString().toCharArray(),0,rs1.getString("Created").toString().length());      packageDocument.endElement("","","createddate");      packageDocument.startElement("","","H1",atts);      packageDocument.characters(("Updated:").toCharArray(),0,("Updated:").length());      packageDocument.endElement("","","H1");      packageDocument.startElement("","","updateddate",atts);      packageDocument.characters(rs1.getString("Updated").toString().toCharArray(),0,rs1.getString("Updated".toString()).length());      packageDocument.endElement("","","updateddate");      packageDocument.startElement("","","H1",atts);      packageDocument.characters(("Description:").toCharArray(),0,("Description:").length());      packageDocument.endElement("","","H1");      packageDocument.startElement("","","description",atts);      packageDocument.characters(rs1.getString(X_AD_Package_Exp.COLUMNNAME_Description).toCharArray(),0,rs1.getString(X_AD_Package_Exp.COLUMNNAME_Description).length());      packageDocument.endElement("","","description");      packageDocument.startElement("","","H1",atts);      packageDocument.characters(("Instructions:").toCharArray(),0,("Instructions:").length());      packageDocument.endElement("","","H1");      packageDocument.startElement("","","instructions",atts);      packageDocument.characters(rs1.getString(X_AD_Package_Exp.COLUMNNAME_Instructions).toCharArray(),0,rs1.getString(X_AD_Package_Exp.COLUMNNAME_Instructions).length());      packageDocument.endElement("","","instructions");      packageDocument.startElement("","","H1",atts);      packageDocument.characters(("Files in Package:").toCharArray(),0,("Files in Package:").length());      packageDocument.endElement("","","H1");      packageDocument.startElement("","","file",atts);      packageDocument.characters(("File: PackOut.xml").toCharArray(),0,("File: PackOut.xml").length());      packageDocument.endElement("","","file");      packageDocument.startElement("","","filedirectory",atts);      packageDocument.characters("Directory: \\dict\\".toCharArray(),0,("Directory: \\dict\\").length());      packageDocument.endElement("","","filedirectory");      packageDocument.startElement("","","filenotes",atts);      packageDocument.characters("Notes: Contains all application/object settings for package".toCharArray(),0,"Notes: Contains all application/object settings for package".length());      packageDocument.endElement("","","filenotes");      success=(new File(packagename + File.separator + "dict"+ File.separator)).mkdirs();      String file_menu=packagename + File.separator + "dict"+ File.separator+ "PackOut.xml";      packOutDocStream=new FileOutputStream(file_menu,false);      StreamResult streamResult_menu=new StreamResult(new OutputStreamWriter(packOutDocStream,"ISO-8859-1"));      SAXTransformerFactory tf_menu=(SAXTransformerFactory)SAXTransformerFactory.newInstance();      tf_menu.setAttribute("indent-number",new Integer(4));      TransformerHandler packOutDocument=tf_menu.newTransformerHandler();      Transformer serializer_menu=packOutDocument.getTransformer();      serializer_menu.setOutputProperty(OutputKeys.ENCODING,"ISO-8859-1");      serializer_menu.setOutputProperty(OutputKeys.INDENT,"yes");      packOutDocument.setResult(streamResult_menu);      packOutDocument.startDocument();      atts.clear();      atts.addAttribute("","","Name","CDATA",rs1.getString(X_AD_Package_Exp.COLUMNNAME_Name));      atts.addAttribute("","","Version","CDATA",rs1.getString(X_AD_Package_Exp.COLUMNNAME_PK_Version));      atts.addAttribute("","","CompVer","CDATA",rs1.getString(X_AD_Package_Exp.COLUMNNAME_ReleaseNo));      atts.addAttribute("","","DataBase","CDATA",rs1.getString(X_AD_Package_Exp.COLUMNNAME_Version));      atts.addAttribute("","","Description","CDATA",rs1.getString(X_AD_Package_Exp.COLUMNNAME_Description));      atts.addAttribute("","","creator","CDATA",rs1.getString(X_AD_Package_Exp.COLUMNNAME_UserName));      atts.addAttribute("","","creatorcontact","CDATA",rs1.getString(X_AD_Package_Exp.COLUMNNAME_EMail));      atts.addAttribute("","","createddate","CDATA",rs1.getString("Created"));      atts.addAttribute("","","updateddate","CDATA",rs1.getString("Updated"));      atts.addAttribute("","","PackOutVer","CDATA",PackOutVer);      packOutDocument.startElement("","","adempiereAD",atts);      atts.clear();      final String sql="SELECT * FROM AD_Package_Exp_Detail WHERE AD_Package_Exp_ID = " + p_PackOut_ID + " AND IsActive='Y' ORDER BY Line ASC";      PreparedStatement pstmt=null;      ResultSet rs=null;      try {        pstmt=DB.prepareStatement(sql,get_TrxName());        rs=pstmt.executeQuery();        while (rs.next()) {          final String Type=rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_Type);          final int AD_EntityType_ID=rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_EntityType_ID);          Env.setContext(getCtx(),X_AD_Package_Exp_Detail.COLUMNNAME_AD_EntityType_ID,AD_EntityType_ID);          log.info(rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_Line));          if (Type.compareTo("M") == 0) {            createMenu(rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_Menu_ID),packOutDocument);          } else           if (Type.compareTo("P") == 0)           createProcess(rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_Process_ID),packOutDocument); else           if (Type.compareTo("R") == 0)           createReportview(rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_ReportView_ID),packOutDocument); else           if (Type.compareTo("D") == 0)           createData(rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_Table_ID),rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_SQLStatement),packOutDocument); else           if (Type.compareTo("T") == 0)           createTable(rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_Table_ID),packOutDocument); else           if (Type.compareTo("X") == 0)           createForm(rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_Form_ID),packOutDocument); else           if (Type.compareTo("W") == 0)           createWindow(rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_Window_ID),packOutDocument); else           if (Type.compareTo("SV") == 0)           createView(rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_View_ID),packOutDocument); else           if (Type.compareTo("SB") == 0)           createBrowse(rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_Browse_ID),packOutDocument); else           if (Type.compareTo("S") == 0)           createRoles(rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_Role_ID),packOutDocument); else           if (Type.compareTo("SQL") == 0)           createSQL(rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_SQLStatement),rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_DBType),packOutDocument); else           if (Type.compareTo("IMP") == 0)           createImpFormat(rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_ImpFormat_ID),packOutDocument); else           if (Type.compareTo("REF") == 0)           createReference(rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_Reference_ID),packOutDocument); else           if (Type.compareTo("SNI") == 0)           createSnipit(rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_Destination_Directory),rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_Destination_FileName),rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_AD_Package_Code_Old),rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_AD_Package_Code_New),rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_ReleaseNo),packOutDocument); else           if (Type.compareTo("F") == 0)           createWorkflow(rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_Workflow_ID),packOutDocument); else           if (Type.compareTo("V") == 0)           createDynamicRuleValidation(rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_Val_Rule_ID),packOutDocument); else           if (Type.compareTo("MSG") == 0)           createMessage(rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_Message_ID),packOutDocument); else           if (Type.compareTo("PFT") == 0)           createPrintFormat(rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_PrintFormat_ID),packOutDocument); else           if (Type.compareTo(X_AD_Package_Exp_Detail.TYPE_ModelValidator) == 0)           createModelValidator(rs.getInt(X_AD_Package_Exp_Detail.COLUMNNAME_AD_ModelValidator_ID),packOutDocument); else           if (Type.compareTo(X_AD_Package_Exp_Detail.TYPE_EntityType) == 0)           createEntityType(AD_EntityType_ID,packOutDocument); else           if (Type.compareTo("C") == 0) {            log.log(Level.INFO,"In PackOut.java handling Code or Other 2pack module creation");            String fullDirectory=rs1.getString(X_AD_Package_Exp.COLUMNNAME_File_Directory) + rs1.getString(X_AD_Package_Exp.COLUMNNAME_Name) + rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_Target_Directory);            log.log(Level.INFO,"fullDirectory" + fullDirectory);            String targetDirectoryModified=null;            char fileseperator1='/';            char fileseperator2='\\';            if (File.separator.equals("/")) {              targetDirectoryModified=fullDirectory.replace(fileseperator2,fileseperator1);            } else             targetDirectoryModified=fullDirectory.replace(fileseperator1,fileseperator2);            String target_File=(targetDirectoryModified);            success=(new File(target_File).mkdirs());            fullDirectory=rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_File_Directory);            targetDirectoryModified=null;            if (File.separator.equals("/")) {              targetDirectoryModified=fullDirectory.replace(fileseperator2,fileseperator1);            } else             targetDirectoryModified=fullDirectory.replace(fileseperator2,fileseperator1);            copyCode(targetDirectoryModified + rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_FileName),target_File + rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_FileName));            atts.clear();            if (rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_Destination_Directory) != null) {              fullDirectory=rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_Destination_Directory);              String destinationDirectoryModified=null;              if (File.separator.equals("/")) {                destinationDirectoryModified=fullDirectory.replace(fileseperator2,fileseperator1);              } else               destinationDirectoryModified=fullDirectory.replace(fileseperator2,fileseperator1);              createDistributeFile(rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_FileName),rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_Target_Directory),rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_ReleaseNo),destinationDirectoryModified,packOutDocument);            }            if (rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_FileName) != null) {              packageDocument.startElement("","","file",atts);              packageDocument.characters(("File: " + rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_FileName)).toCharArray(),0,("File: " + rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_FileName)).length());              packageDocument.endElement("","","file");            }            packageDocument.startElement("","","filedirectory",atts);            packageDocument.characters(("Directory: " + rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_Target_Directory)).toCharArray(),0,("Directory: " + rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_Target_Directory)).length());            packageDocument.endElement("","","filedirectory");            packageDocument.startElement("","","filenotes",atts);            packageDocument.characters(("Notes: " + rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_Description)).toCharArray(),0,(("Notes: " + rs.getString(X_AD_Package_Exp_Detail.COLUMNNAME_Description)).length()));            packageDocument.endElement("","","filenotes");          }        }        getCtx().remove(X_AD_Package_Exp_Detail.COLUMNNAME_AD_EntityType_ID);      }  finally {        DB.close(rs,pstmt);        rs=null;        pstmt=null;      }      atts.clear();      packOutDocument.endElement("","","adempiereAD");      packOutDocument.endDocument();      packageDocument.endElement("","","adempiereDocument");      packageDocument.endDocument();    }    rs1.close();    pstmt1.close();    pstmt1=null;  } catch (  Exception e) {    log.log(Level.SEVERE,e.getLocalizedMessage(),e);    throw e;  } finally {    try {      if (pstmt1 != null)       pstmt1.close();    } catch (    Exception e) {    }    pstmt1=null;    if (packageDocStream != null)     try {      packageDocStream.close();    } catch (    Exception e) {    }    if (packOutDocStream != null)     try {      packOutDocStream.close();    } catch (    Exception e) {    }  }  File srcFolder=new File(packagedir);  File destZipFile=new File(packagename + ".zip");  File destTarFile=new File(packagename + ".tar");  File destGZipFile=new File(packagename + ".tar.gz");  boolean success=destZipFile.delete();  success=destTarFile.delete();  success=destGZipFile.delete();  CreateZipFile.zipFolder(srcFolder,destZipFile,includesdir);  CreateZipFile.tarFolder(srcFolder,destTarFile,includesdir);  CreateZipFile.gzipFile(destTarFile,destGZipFile);  success=destTarFile.delete();  return "Finish Process";}  }
class C{  public static void prepareKeysFromSurrogates(DimColumnFilterInfo filterValues,KeyGenerator blockKeyGenerator,CarbonDimension dimension,DimColumnExecuterFilterInfo dimColumnExecuterInfo){  byte[][] keysBasedOnFilter=getKeyArray(filterValues,dimension,blockKeyGenerator);  dimColumnExecuterInfo.setFilterKeys(keysBasedOnFilter);}  }
class C{  public void onSuccess(R result,ExecutionContext context){}  }
class C{  public ActorSystem(boolean addDefaultDispatcher){  if (addDefaultDispatcher) {    addDispatcher(DEFAULT_DISPATCHER);  }}  }
class C{  public void valueChanged(TreeSelectionEvent event){  getHandler().valueChanged(event);}  }
class C{  public void clear(){  mOverlayViewGroup.clear();}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public ConditionDependencyAnalyzer(ConditionDependencyAnalyzer a1,ConditionDependencyAnalyzer a2){  upstreamTables=new HashSet<>(a1.upstreamTables);  upstreamTables.addAll(a2.upstreamTables);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.providerRV=this.findView(R.id.provider_rv);}  }
class C{  public static Date calculateGregorianDate(double jd){  int l=(int)jd + 68569;  int n=(4 * l) / 146097;  l=l - (146097 * n + 3) / 4;  int i=(4000 * (l + 1)) / 1461001;  l=l - (1461 * i) / 4 + 31;  int j=(80 * l) / 2447;  int d=l - (2447 * j) / 80;  l=j / 11;  int m=j + 2 - 12 * l;  int y=100 * (n - 49) + i + l;  double fraction=jd - Math.floor(jd);  double dHours=fraction * 24.0;  int hours=(int)dHours;  double dMinutes=(dHours - hours) * 60.0;  int minutes=(int)dMinutes;  int seconds=(int)((dMinutes - minutes) * 60.0);  Calendar cal=Calendar.getInstance(TimeZone.getTimeZone("UT"));  cal.set(y,m - 1,d,hours + 12,minutes,seconds);  return cal.getTime();}  }
class C{  public boolean isDebug(){  return debug;}  }
class C{  public String programName(){  return "Baratine";}  }
class C{  public static ContentValues values(Sync<? extends Synced> sync){  ContentValues vals=new ContentValues(6);  vals.put(GLOBAL_ID,sync.globalId);  vals.put(TYPE_ID,type(sync).id);  vals.put(OBJECT_ID,sync.object.localId);  vals.put(ACTION_ID,sync.action.id);  vals.put(ACTION_ON,sync.actionOn);  if (!Prefs.getStringSet(context(),SHOW_NOTIFICATIONS).contains(context().getString(R.string.friend_notifications_value))) {    vals.put(STATUS_ID,INACTIVE.id);  }  return vals;}  }
class C{  public static StaticBody fromString(final String rawXML) throws BOSHException {  BodyParserResults results=PARSER.parse(rawXML);  return new StaticBody(results.getAttributes(),rawXML);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isPostingType(){  Object oo=get_Value(COLUMNNAME_PostingType);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private CopyOnWriteHashMap map5(){  CopyOnWriteHashMap map=newMap();  assertTrue(map.isEmpty());  map.put(one,"A");  map.put(two,"B");  map.put(three,"C");  map.put(four,"D");  map.put(five,"E");  assertFalse(map.isEmpty());  assertEquals(5,map.size());  return map;}  }
class C{  public Link(){  super(KEY);}  }
class C{  public static double mean(int[] a){  if (a.length == 0)   return Double.NaN;  int sum=sum(a);  return 1.0 * sum / a.length;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.462 -0400",hash_original_method="533E04489FE3E23B14310C8FB92F78C5",hash_generated_method="6184B4AE3AB81180E1C693397BAC6510") private int handleT(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index,4,"TION")) {    result.append('X');    index+=3;  } else   if (contains(value,index,3,"TIA","TCH")) {    result.append('X');    index+=3;  } else   if (contains(value,index,2,"TH") || contains(value,index,3,"TTH")) {    if (contains(value,index + 2,2,"OM","AM") || contains(value,0,4,"VAN ","VON ") || contains(value,0,3,"SCH")) {      result.append('T');    } else {      result.append('0','T');    }    index+=2;  } else {    result.append('T');    index=contains(value,index + 1,1,"T","D") ? index + 2 : index + 1;  }  return index;}  }
class C{  public WorkflowOutput updateWorkflowOutput(long workflowOutputId,long dossierPartId,long processWorkflowId,boolean required,boolean esign,boolean postback) throws PortalException, SystemException {  WorkflowOutput output=null;  output=workflowOutputPersistence.fetchByPrimaryKey(workflowOutputId);  if (Validator.isNotNull(output)) {    output.setDossierPartId(dossierPartId);    output.setProcessWorkflowId(processWorkflowId);    output.setEsign(esign);    output.setPostback(postback);    output.setRequired(required);    workflowOutputPersistence.update(output);  }  return output;}  }
class C{  private static <K,V>void putAllNew(Map<K,V> m,Map<K,V> m2){  for (  Map.Entry<K,V> e2 : m2.entrySet()) {    putNew(m,e2.getKey(),e2.getValue());  }}  }
class C{  public void useVertexColors(boolean value){  if (value != mUseVertexColors) {    mIsDirty=true;    mUseVertexColors=value;  }}  }
class C{  @SuppressWarnings({"static-access"}) public int run(String[] args) throws Exception {  Options options=new Options();  options.addOption(OptionBuilder.withArgName("path").hasArg().withDescription("input path").create(INPUT));  options.addOption(OptionBuilder.withArgName("path").hasArg().withDescription("output path").create(OUTPUT));  CommandLine cmdline;  CommandLineParser parser=new GnuParser();  try {    cmdline=parser.parse(options,args);  } catch (  ParseException exp) {    System.err.println("Error parsing command line: " + exp.getMessage());    return -1;  }  if (!cmdline.hasOption(INPUT) || !cmdline.hasOption(OUTPUT)) {    System.out.println("args: " + Arrays.toString(args));    HelpFormatter formatter=new HelpFormatter();    formatter.setWidth(120);    formatter.printHelp(this.getClass().getName(),options);    ToolRunner.printGenericCommandUsage(System.out);    return -1;  }  String inputPath=cmdline.getOptionValue(INPUT);  String outputPath=cmdline.getOptionValue(OUTPUT);  LOG.info("Tool name: " + DumpPageRankRecordsToPlainText.class.getSimpleName());  LOG.info(" - input: " + inputPath);  LOG.info(" - output: " + outputPath);  Configuration conf=new Configuration();  conf.setInt("mapred.min.split.size",1024 * 1024 * 1024);  Job job=Job.getInstance(conf);  job.setJobName(DumpPageRankRecordsToPlainText.class.getSimpleName());  job.setJarByClass(DumpPageRankRecordsToPlainText.class);  job.setNumReduceTasks(0);  FileInputFormat.addInputPath(job,new Path(inputPath));  FileOutputFormat.setOutputPath(job,new Path(outputPath));  job.setInputFormatClass(SequenceFileInputFormat.class);  job.setOutputFormatClass(TextOutputFormat.class);  job.setMapOutputKeyClass(IntWritable.class);  job.setMapOutputValueClass(PageRankNode.class);  FileSystem.get(conf).delete(new Path(outputPath),true);  job.waitForCompletion(true);  return 0;}  }
class C{  public CacheException(Throwable cause){  super(cause);}  }
class C{  public <T>T time(Callable<T> event) throws Exception {  final long startTime=clock.tick();  try {    return event.call();  }  finally {    update(clock.tick() - startTime);  }}  }
class C{  private void snoopDHCPClientName(Ethernet eth,Device srcDevice){  if (!(eth.getPayload() instanceof IPv4))   return;  IPv4 ipv4=(IPv4)eth.getPayload();  if (!(ipv4.getPayload() instanceof UDP))   return;  UDP udp=(UDP)ipv4.getPayload();  if (!(udp.getPayload() instanceof DHCP))   return;  DHCP dhcp=(DHCP)udp.getPayload();  byte opcode=dhcp.getOpCode();  if (opcode == DHCP.OPCODE_REQUEST) {    DHCPOption dhcpOption=dhcp.getOption(DHCPOptionCode.OptionCode_Hostname);    if (dhcpOption != null) {      cntDhcpClientNameSnooped.increment();      srcDevice.dhcpClientName=new String(dhcpOption.getData());    }  }}  }
class C{  public static boolean isVPlexImport(Volume volume,VirtualPool vpool1,VirtualPool vpool2,StringBuffer notImportReasonBuff){  s_logger.info(String.format("Checking isVPlexImport from [%s] to [%s]...",vpool1.getLabel(),vpool2.getLabel()));  if (null != volume.getMirrors() && !volume.getMirrors().isEmpty()) {    notImportReasonBuff.append(String.format("Volume [%s] has continuous copies attached. " + "Change vpool for a volume which has continuous copies is not allowed.",volume.getLabel()));    return false;  }  String[] excluded=new String[]{ACLS,ASSIGNED_STORAGE_POOLS,DESCRIPTION,HA_VARRAY_VPOOL_MAP,LABEL,MATCHED_POOLS,INVALID_MATCHED_POOLS,NUM_PATHS,STATUS,TAGS,CREATION_TIME,THIN_VOLUME_PRE_ALLOCATION_PERCENTAGE,NON_DISRUPTIVE_EXPANSION,AUTO_CROSS_CONNECT_EXPORT,MIRROR_VPOOL,REMOTECOPY_VARRAY_SETTINGS};  Map<String,Change> changes=analyzeChanges(vpool1,vpool2,null,excluded,null);  if ((changes.size() == 1) && changes.get(HIGH_AVAILABILITY) != null) {    return true;  }  int changeCount=changes.size();  if ((changeCount == 0) || (changes.get(HIGH_AVAILABILITY) == null)) {    notImportReasonBuff.append("The target virtual pool does not specify a value for high " + "availability");  } else   if (changeCount > 1) {    StringBuffer changesOutput=new StringBuffer();    for (    Change change : changes.values()) {      if (!change._key.equals(HIGH_AVAILABILITY)) {        if (change._key.equals(RP_RPO_VALUE) && (change._left == null)) {          if (change._right != null && (Long.valueOf(change._right.toString()) == 0)) {            s_logger.info("rpRpoValue diff is okay");            changeCount--;            continue;          }        }        changesOutput.append(change.toString() + " ");      }    }    if (changeCount == 1) {      s_logger.info("there were some differences, but changes that don't " + "matter were filtered out, so this vpool is okay for VPLEX");      return true;    }    notImportReasonBuff.append("The target virtual pool contains differences in properties " + "other than high availability.");    s_logger.info("The target virtual pool contains differences in properties " + "other than high availability.: " + changesOutput.toString().trim());  }  return false;}  }
class C{  public void edit(ScriptFilter filter){}  }
class C{  public Bitmap makeIcon(){  int measureSpec=View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED);  mContainer.measure(measureSpec,measureSpec);  int measuredWidth=mContainer.getMeasuredWidth();  int measuredHeight=mContainer.getMeasuredHeight();  mContainer.layout(0,0,measuredWidth,measuredHeight);  if (mRotation == 1 || mRotation == 3) {    measuredHeight=mContainer.getMeasuredWidth();    measuredWidth=mContainer.getMeasuredHeight();  }  Bitmap r=Bitmap.createBitmap(measuredWidth,measuredHeight,Bitmap.Config.ARGB_8888);  r.eraseColor(Color.TRANSPARENT);  Canvas canvas=new Canvas(r);  if (mRotation != 0) {    if (mRotation == 1) {      canvas.translate(measuredWidth,0);      canvas.rotate(90);    } else     if (mRotation == 2) {      canvas.rotate(180,measuredWidth / 2,measuredHeight / 2);    } else {      canvas.translate(0,measuredHeight);      canvas.rotate(270);    }  }  mContainer.draw(canvas);  return r;}  }
class C{  @OnClick(R.id.login_button) public void loginButtonPressed(){  imm.hideSoftInputFromWindow(passwordInput.getWindowToken(),0);  mainView.setVisibility(View.GONE);  altView.setVisibility(View.VISIBLE);  if (usernameInput.getText().toString().equals(USERNAME) && passwordInput.getText().toString().equals(PASSWORD)) {    altButton.setText(ALT_BUTTON_SUCCESS_TITLE);    altText.setText(SUCCESS_MESSAGE);    return;  }  altButton.setText(ALT_BUTTON_FAIL_TITLE);  altText.setText(FAIL_MESSAGE);}  }
class C{  public static JCalValue single(Object value){  return new JCalValue(new JsonValue(value));}  }
class C{  public final byte[] generateSecret() throws IllegalStateException {  chooseFirstProvider();  return spi.engineGenerateSecret();}  }
class C{  @Override public void streamsMenuItemClicked(ActionEvent e,Collection<String> streams){  String cmd=e.getActionCommand();  streamStuff(cmd,streams);}  }
class C{  public final <T extends DomElement>void registerImplementation(Class<T> domElementClass,Class<? extends T> implementationClass){  myImplementations.put(domElementClass,implementationClass);}  }
class C{  public void addArc(float latPoint,float lonPoint,float radius,int units,int nverts,float s,float e,LinkProperties properties) throws IOException {  LinkArc.write(latPoint,lonPoint,radius,units,nverts,s,e,properties,link.dos);}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.243 -0400",hash_original_method="FE294A17C0469E68DE350D9B87B2A84C",hash_generated_method="C337B5C193C54642D937100F617F21D7") @Override public Writer append(CharSequence csq){  return this;}  }
class C{  public void processInput(){  mythread.start();}  }
class C{  public void prune(){  jjtSetParent(null);}  }
class C{  protected boolean isGtidModeEnabled(){  AtomicReference<String> mode=new AtomicReference<String>("off");  try {    taskContext.jdbc().query("SHOW GLOBAL VARIABLES LIKE 'GTID_MODE'",null);  } catch (  SQLException e) {    throw new ConnectException("Unexpected error while connecting to MySQL and looking at GTID mode: ",e);  }  return !"OFF".equalsIgnoreCase(mode.get());}  }
class C{  public static ChcpError downloadUpdate(final UpdateDownloadRequest request){  if (isExecuting) {    return ChcpError.DOWNLOAD_ALREADY_IN_PROGRESS;  }  if (UpdatesInstaller.isInstalling()) {    return ChcpError.CANT_DOWNLOAD_UPDATE_WHILE_INSTALLATION_IN_PROGRESS;  }  isExecuting=true;  final UpdateLoaderWorker task=new UpdateLoaderWorker(request);  executeTask(task);  return ChcpError.NONE;}  }
class C{  public static double calibrateThreshold(ArrayList<double[]> Y,double LC_train){  if (Y.size() <= 0)   return 0.5;  int N=Y.size();  ArrayList<Double> big=new ArrayList<Double>();  for (  double y[] : Y) {    for (    double y_ : y) {      big.add(y_);    }  }  Collections.sort(big);  int i=big.size() - (int)Math.round(LC_train * (double)N);  if (N == big.size()) {    if (i + 1 == N)     return (big.get(N - 2) + big.get(N - 1) / 2.0);    if (i + 1 >= N)     return 1.0; else     return Math.max(((double)(big.get(i) + big.get(i + 1)) / 2.0),0.00001);  }  return Math.max(((double)(big.get(i) + big.get(Math.max(i + 1,N - 1)))) / 2.0,0.00001);}  }
class C{  public void advance(){  if (frameCount > 0) {    framePointer=(framePointer + 1) % frameCount;  }}  }
class C{  public void testGetMaxSize(){  assertEquals(12,Em18RfidProtocol.getMaxSize());}  }
class C{  @Override public int hashCode(){  int result=17;  final int mult=37;  result=mult * result + this.ordinal;  return result;}  }
class C{  public String toString(){  return this.text;}  }
class C{  public void processAndCompare(final String requestUri,final String expectedResourceUri) throws Exception {  final HttpServletRequest request=Mockito.mock(HttpServletRequest.class);  final HttpServletResponse response=Context.get().getResponse();  final ByteArrayOutputStream out=new ByteArrayOutputStream();  Mockito.when(response.getOutputStream()).thenReturn(new DelegatingServletOutputStream(out));  Mockito.when(request.getRequestURI()).thenReturn(requestUri);  final WroConfiguration config=new WroConfiguration();  config.setIgnoreFailingProcessor(true);  Context.unset();  Context.set(Context.webContext(request,response,Mockito.mock(FilterConfig.class)),config);  onBeforeProcess();  managerFactory.create().process();  final InputStream expectedInputStream=new UnclosableBufferedInputStream(WroTestUtils.getInputStream(expectedResourceUri));  final InputStream actualInputStream=new BufferedInputStream(new ByteArrayInputStream(out.toByteArray()));  expectedInputStream.reset();  WroTestUtils.compare(expectedInputStream,actualInputStream);  expectedInputStream.close();  actualInputStream.close();}  }
class C{  public TFloatDoubleHashMap(int initialCapacity,TFloatHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  @Override public void onAction(){  onAction(ActionType.LOOK);}  }
class C{  public final CC growPrio(int... widthHeight){switch (widthHeight.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + widthHeight.length);case 2:  growPrioY(widthHeight[1]);case 1:growPrioX(widthHeight[0]);}return this;}  }
class C{  private JSONArray readArray() throws JSONException {  JSONArray result=new JSONArray();  boolean hasTrailingSeparator=false;  while (true) {switch (nextCleanInternal()) {case -1:      throw syntaxError("Unterminated array");case ']':    if (hasTrailingSeparator) {      result.put(null);    }  return result;case ',':case ';':result.put(null);hasTrailingSeparator=true;continue;default :pos--;}result.put(nextValue());switch (nextCleanInternal()) {case ']':return result;case ',':case ';':hasTrailingSeparator=true;continue;default :throw syntaxError("Unterminated array");}}}  }
class C{  ServiceDocumentDescription buildDocumentDescription(Service s){  Class<? extends ServiceDocument> serviceStateClass=s.getStateType();  if (serviceStateClass == null) {    return null;  }  String serviceTypeName=s.getClass().getCanonicalName();synchronized (this.descriptionCache) {    ServiceDocumentDescription desc=this.descriptionCache.get(serviceTypeName);    if (desc != null) {      return desc;    }    desc=this.descriptionBuilder.buildDescription(serviceStateClass,s.getOptions(),RequestRouter.findRequestRouter(s.getOperationProcessingChain()));    if (s.getOptions().contains(ServiceOption.IMMUTABLE)) {      if (desc.versionRetentionLimit > ServiceDocumentDescription.DEFAULT_VERSION_RETENTION_LIMIT) {        log(Level.WARNING,"Service %s has option %s, forcing retention limit",s.getSelfLink(),ServiceOption.IMMUTABLE);      }      desc.versionRetentionLimit=ServiceDocumentDescription.FIELD_VALUE_DISABLED_VERSION_RETENTION;    }    this.descriptionCache.put(serviceTypeName,desc);    ServiceDocumentDescription augmentedDesc=s.getDocumentTemplate().documentDescription;    if (augmentedDesc != null) {      desc=augmentedDesc;    }    this.descriptionCache.put(serviceTypeName,desc);    return desc;  }}  }
class C{  public synchronized boolean contains(Integer i){  return value.contains(i);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment newDocFragment;  NodeList children;  int length;  String newDocFragmentName;  int newDocFragmentType;  String newDocFragmentValue;  doc=(Document)load("hc_staff",true);  newDocFragment=doc.createDocumentFragment();  children=newDocFragment.getChildNodes();  length=(int)children.getLength();  assertEquals("length",0,length);  newDocFragmentName=newDocFragment.getNodeName();  assertEquals("strong","#document-fragment",newDocFragmentName);  newDocFragmentType=(int)newDocFragment.getNodeType();  assertEquals("type",11,newDocFragmentType);  newDocFragmentValue=newDocFragment.getNodeValue();  assertNull("value",newDocFragmentValue);}  }
class C{  public DuplicateUserException(){}  }
class C{  public static void analyzeYarnCluster(YarnClient yarnClient,YarnConfiguration conf,boolean verbose){  try {    List<NodeReport> nodesReport=yarnClient.getNodeReports();    if (verbose)     System.out.println("There are " + nodesReport.size() + " nodes in the cluster");    if (nodesReport.isEmpty())     throw new YarnException("There are zero available nodes in the yarn cluster");    nodesMaxPhySorted=new ArrayList<Long>(nodesReport.size());    clusterTotalMem=0;    clusterTotalCores=0;    clusterTotalNodes=0;    minimumMRContainerPhyMB=-1;    for (    NodeReport node : nodesReport) {      Resource resource=node.getCapability();      Resource used=node.getUsed();      if (used == null)       used=Resource.newInstance(0,0);      int mb=resource.getMemory();      int cores=resource.getVirtualCores();      if (mb <= 0)       throw new YarnException("A node has non-positive memory " + mb);      int myMinMRPhyMB=mb / cores / CPU_HYPER_FACTOR;      if (minimumMRContainerPhyMB < myMinMRPhyMB)       minimumMRContainerPhyMB=myMinMRPhyMB;      clusterTotalMem+=(long)mb * 1024 * 1024;      nodesMaxPhySorted.add((long)mb * 1024 * 1024);      clusterTotalCores+=cores;      clusterTotalNodes++;      if (verbose)       System.out.println("\t" + node.getNodeId() + " has "+ mb+ " MB ("+ used.getMemory()+ " MB used) memory and "+ resource.getVirtualCores()+ " ("+ used.getVirtualCores()+ " used) cores");    }    Collections.sort(nodesMaxPhySorted,Collections.reverseOrder());    nodesMaxBudgetSorted=new ArrayList<Double>(nodesMaxPhySorted.size());    for (int i=0; i < nodesMaxPhySorted.size(); i++)     nodesMaxBudgetSorted.add(ResourceOptimizer.phyToBudget(nodesMaxPhySorted.get(i)));    _remotePar=nodesReport.size();    if (_remotePar == 0)     throw new YarnException("There are no available nodes in the yarn cluster");    _remoteMRSortMem=(1024 * 1024) * conf.getLong(MRConfigurationNames.MR_TASK_IO_SORT_MB,100);    String javaOpts1=conf.get(MRConfigurationNames.MR_CHILD_JAVA_OPTS);    String javaOpts2=conf.get(MRConfigurationNames.MR_MAP_JAVA_OPTS,null);    String javaOpts3=conf.get(MRConfigurationNames.MR_REDUCE_JAVA_OPTS,null);    if (javaOpts2 != null)     _remoteJVMMaxMemMap=extractMaxMemoryOpt(javaOpts2); else     _remoteJVMMaxMemMap=extractMaxMemoryOpt(javaOpts1);    if (javaOpts3 != null)     _remoteJVMMaxMemReduce=extractMaxMemoryOpt(javaOpts3); else     _remoteJVMMaxMemReduce=extractMaxMemoryOpt(javaOpts1);    String blocksize=conf.get(MRConfigurationNames.DFS_BLOCKSIZE,"134217728");    _blocksize=Long.parseLong(blocksize);    minimalPhyAllocate=(long)1024 * 1024 * conf.getInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);    maximumPhyAllocate=(long)1024 * 1024 * conf.getInt(YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);    mrAMPhy=(long)conf.getInt(MRConfigurationNames.YARN_APP_MR_AM_RESOURCE_MB,1536) * 1024 * 1024;  } catch (  Exception e) {    throw new RuntimeException("Unable to analyze yarn cluster ",e);  }}  }
class C{  public TestEntity(int index,String text,String value){  this(index,text,value,0.0);}  }
class C{  @Override public double value(int attIndex){  int index=locateIndex(attIndex);  if ((index >= 0) && (m_Indices[index] == attIndex)) {    return m_AttValues[index];  } else {    return 0.0;  }}  }
class C{  private String buildTask1TokenJSON(StringBuilder textBuilder,NamedEntity namedEntity,Map<Integer,Integer> charOffsetStartMapping,Map<Integer,Integer> charOffsetEndMapping) throws CrowdException {  if (!charOffsetStartMapping.containsKey(namedEntity.getBegin()) || !charOffsetEndMapping.containsKey(namedEntity.getEnd())) {    throw new CrowdException("Data generation error: char offset to token mapping is inconsistent. Contact developpers!");  }  int start=charOffsetStartMapping.get(namedEntity.getBegin());  int end=charOffsetEndMapping.get(namedEntity.getEnd());  textBuilder.setLength(0);  textBuilder.append("{\"s\":");  textBuilder.append(start);  textBuilder.append(",\"e\":");  textBuilder.append(end);  textBuilder.append("}");  return new String(textBuilder);}  }
class C{  @Override public void saveResults(){  helper.writeScenesToJaif();}  }
class C{  public static boolean isNotNullValue(String s){  return ((s != null) && !s.isEmpty() && !s.equals(NullColumnValueGetter.getNullStr()));}  }
class C{  public static NameMatcher<TriggerKey> triggerNameStartsWith(String compareTo){  return NameMatcher.nameStartsWith(compareTo);}  }
class C{  void postCloneNodeEvent(ASTNode node,ASTNode clone){}  }
class C{  String report(){  StringBuilder sb=new StringBuilder();  for (int i=0; i < Stat.values().length; i++) {    if (i > 0) {      sb.append(",");    }    sb.append(Stat.values()[i].name);  }  for (  JobResult result : jobResults) {    result.computeMetrics();    sb.append("\n").append(result);  }  if (jobTypeResults.containsKey("ForwardChain")) {    jobTypeResults.get("ForwardChain").computeMetrics();    sb.append("\n").append(jobTypeResults.get("ForwardChain"));  }  if (jobTypeResults.containsKey("DuplicateElimination")) {    jobTypeResults.get("DuplicateElimination").computeMetrics();    sb.append("\n").append(jobTypeResults.get("DuplicateElimination"));  }  totals.computeMetrics();  sb.append("\n").append(totals);  return sb.toString();}  }
class C{  public final void skew(Vec2 out){  out.x=-y;  out.y=x;}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  public void testBug74711() throws Exception {  this.rs=this.stmt.executeQuery("SELECT @@global.query_cache_type, @@global.query_cache_size");  this.rs.next();  if (!"ON".equalsIgnoreCase(this.rs.getString(1)) || "0".equals(this.rs.getString(2))) {    System.err.println("Warning! testBug77411() requires a server started with the options '--query_cache_type=1' and '--query_cache_size=N', (N > 0).");    return;  }  boolean useLocTransSt=false;  boolean useElideSetAC=false;  do {    final String testCase=String.format("Case: [LocTransSt: %s, ElideAC: %s ]",useLocTransSt ? "Y" : "N",useElideSetAC ? "Y" : "N");    final Properties props=new Properties();    props.setProperty("useLocalTransactionState",Boolean.toString(useLocTransSt));    props.setProperty("elideSetAutoCommits",Boolean.toString(useElideSetAC));    Connection testConn=getConnectionWithProps(props);    assertEquals(testCase,useLocTransSt,((ConnectionProperties)testConn).getUseLocalTransactionState());    assertEquals(testCase,useElideSetAC,((ConnectionProperties)testConn).getElideSetAutoCommits());    testConn.close();  } while ((useLocTransSt=!useLocTransSt) || (useElideSetAC=!useElideSetAC));}  }
class C{  public final LC minWidth(String width){  setWidth(LayoutUtil.derive(getWidth(),ConstraintParser.parseUnitValue(width,true),null,null));  return this;}  }
class C{  public void show(boolean animate){  show(animate,fadeIn);}  }
class C{  protected void sequence_ArrayPadding(ISerializationContext context,ArrayPadding semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  protected void sequence_ThisLiteral(ISerializationContext context,ThisLiteral semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void testToString2(){  assertNotNull(new IdentityStub("testToString2").toString());}  }
class C{  public Command command(){  return command;}  }
class C{  public col addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public static int runCommand(String[] cmd){  String strCmd="running command : ";  for (  String str : cmd)   strCmd=strCmd + str + " ";  Logger.appendLog(strCmd);  Runtime rt=Runtime.getRuntime();  Process proc=null;  try {    proc=rt.exec(cmd);  } catch (  IOException e) {    e.printStackTrace();    return 2;  }  StreamReader stdInputReader=new StreamReader("stdIn",proc.getInputStream());  StreamReader stdErrorReader=new StreamReader("stdError",proc.getErrorStream());  stdInputReader.start();  stdErrorReader.start();  int exitValue=1000;  try {    exitValue=proc.waitFor();  } catch (  InterruptedException e) {    e.printStackTrace();  } finally {    if (proc != null)     proc.destroy();  }  Logger.appendLog("It's exit value was : " + exitValue);  proc.destroy();  return exitValue;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Object get(java.lang.Object,int)")) {    java_lang_reflect_Array_get(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("void set(java.lang.Object,int,java.lang.Object)")) {    java_lang_reflect_Array_set(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object newArray(java.lang.Class,int)")) {    java_lang_reflect_Array_newArray(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object multiNewArray(java.lang.Class,int[])")) {    java_lang_reflect_Array_multiNewArray(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public UserIdentityToken clone(){  UserIdentityToken result=new UserIdentityToken();  result.PolicyId=PolicyId;  return result;}  }
class C{  @Override public double[] sample(){  double sampled=sampler.nextFloat();  double sum=0.0;  for (  double[] point : points.keySet()) {    sum+=points.get(point);    if (sampled < sum) {      return point;    }  }  log.warning("discrete density function could not be sampled");  return new double[0];}  }
class C{  protected void scanObjectFactory(final Object objectFactory,final boolean customFactory){  final FastSet<Method> objectFactoryMethods=getDeclaredMethods(objectFactory.getClass());  for (  final Method method : objectFactoryMethods) {    final Class<?> objectClass=method.getReturnType();    _classObjectFactoryCache.put(objectClass,objectFactory);    if (customFactory) {      try {        if (method.getName().contains("create")) {          final Object customObject=method.invoke(objectFactory,(Object[])null);          final Class<?> customClass=customObject.getClass();          if (!_registeredClassesCache.contains(customClass)) {            final FastSet<Field> fields=getDeclaredFields(customClass);            scanClass(customClass,fields,true);          }        }      } catch (      final Exception e) {        LogContext.error(String.format("Error Scanning Custom Object Factory <%s>!",objectFactory.getClass()),e);      }    }    _objectFactoryCache.put(objectClass,method);  }}  }
class C{  public static void circularShift(double[] y,int shift){  int N=y.length;  int s=shift % N;  if (s > 0 && N - s < s)   s-=N; else   if (s < 0 && N + s < -s)   s+=N;  double[] tmp=new double[Math.abs(s)];  if (s > 0) {    for (int i=0; i < s; i++)     tmp[i]=y[N - s + i];    for (int i=N - 1 - s; i >= 0; i--)     y[i + s]=y[i];    for (int i=0; i < s; i++)     y[i]=tmp[i];  }  if (s < 0) {    for (int i=0; i < -s; i++)     tmp[i]=y[i];    for (int i=-s; i < N; i++)     y[i + s]=y[i];    for (int i=0; i < -s; i++)     y[N + s + i]=tmp[i];  }}  }
class C{  public void installUserModules(){  installUserModules(false);}  }
class C{  public ModuleNamespaceVirtualType createModuleNamespaceVirtualType(){  ModuleNamespaceVirtualTypeImpl moduleNamespaceVirtualType=new ModuleNamespaceVirtualTypeImpl();  return moduleNamespaceVirtualType;}  }
class C{  public int enumerate(ThreadGroup[] groups,boolean recurse){  return enumerateGeneric(groups,recurse,0,false);}  }
class C{  public static void showOperationErrors(final Project project,final Collection<VcsException> exs,@NonNls @NotNull final String operation){  if (exs.size() == 1) {    showOperationError(project,operation,exs.iterator().next().getMessage());  } else   if (exs.size() > 1) {    StringBuilder b=new StringBuilder();    for (    VcsException ex : exs) {      b.append(GitBundle.message("errors.message.item",ex.getMessage()));    }    showOperationError(project,operation,GitBundle.message("errors.message",b.toString()));  }}  }
class C{  public static org.oscm.vo.VOPriceModel convertToApi(org.oscm.internal.vo.VOPriceModel oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOPriceModel newVO=new org.oscm.vo.VOPriceModel();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setDescription(oldVO.getDescription());  newVO.setConsideredEvents(convertToApiVOPricedEvent(oldVO.getConsideredEvents()));  newVO.setSelectedParameters(convertToApiVOPricedParameter(oldVO.getSelectedParameters()));  newVO.setPeriod(EnumConverter.convert(oldVO.getPeriod(),org.oscm.types.enumtypes.PricingPeriod.class));  newVO.setPricePerPeriod(oldVO.getPricePerPeriod());  newVO.setPricePerUserAssignment(oldVO.getPricePerUserAssignment());  newVO.setCurrencyISOCode(oldVO.getCurrencyISOCode());  newVO.setOneTimeFee(oldVO.getOneTimeFee());  newVO.setRoleSpecificUserPrices(convertToApiVOPricedRole(oldVO.getRoleSpecificUserPrices()));  newVO.setSteppedPrices(convertToApiVOSteppedPrice(oldVO.getSteppedPrices()));  newVO.setLicense(oldVO.getLicense());  newVO.setFreePeriod(oldVO.getFreePeriod());  newVO.setType(EnumConverter.convert(oldVO.getType(),org.oscm.types.enumtypes.PriceModelType.class));  newVO.setExternal(oldVO.isExternal());  return newVO;}  }
class C{  public static byte exp(byte a,int n){  if (n == 0) {    return 1;  } else   if (a == 0) {    return 0;  } else {    int logA=LOG_TABLE[a & 0xFF];    int logResult=logA * n;    while (255 <= logResult) {      logResult-=255;    }    return EXP_TABLE[logResult];  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.tanh(z * multiplier));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String encodeBytes(byte[] source,int off,int len,int options) throws java.io.IOException {  byte[] encoded=encodeBytesToBytes(source,off,len,options);  try {    return new String(encoded,PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uue) {    return new String(encoded);  }}  }
class C{  private Node addConditionWaiter(){  Node t=lastWaiter;  if (t != null && t.waitStatus != Node.CONDITION) {    unlinkCancelledWaiters();    t=lastWaiter;  }  Node node=new Node(Thread.currentThread(),Node.CONDITION);  if (t == null)   firstWaiter=node; else   t.nextWaiter=node;  lastWaiter=node;  return node;}  }
class C{  private void processElementRotate(GeneratorSingleCluster cluster,Node cur){  int axis1=0;  int axis2=0;  double angle=0.0;  String a1str=((Element)cur).getAttribute(ATTR_AXIS1);  if (a1str != null && a1str.length() > 0) {    axis1=Integer.parseInt(a1str);  }  String a2str=((Element)cur).getAttribute(ATTR_AXIS2);  if (a2str != null && a2str.length() > 0) {    axis2=Integer.parseInt(a2str);  }  String anstr=((Element)cur).getAttribute(ATTR_ANGLE);  if (anstr != null && anstr.length() > 0) {    angle=ParseUtil.parseDouble(anstr);  }  if (axis1 <= 0 || axis1 > cluster.getDim()) {    throw new AbortException("Invalid axis1 number given in specification file.");  }  if (axis2 <= 0 || axis2 > cluster.getDim()) {    throw new AbortException("Invalid axis2 number given in specification file.");  }  if (axis1 == axis2) {    throw new AbortException("Invalid axis numbers given in specification file.");  }  cluster.addRotation(axis1 - 1,axis2 - 1,Math.toRadians(angle));  XMLNodeIterator iter=new XMLNodeIterator(cur.getFirstChild());  while (iter.hasNext()) {    Node child=iter.next();    if (child.getNodeType() == Node.ELEMENT_NODE) {      LOG.warning("Unknown element in XML specification file: " + child.getNodeName());    }  }}  }
class C{  public static String addBean(String path,Object bean){  String rpath=getResourcePath(path,bean);  String[] pc=rpath.split(PATH_SEPARATOR);  Object object=getPath(pc,1);  if (!(object instanceof BeanFolder))   throw new IllegalArgumentException("bean already exists at " + rpath);  ((BeanFolder)object).put(pc[pc.length - 1],bean);  notifyListeners(bean,rpath,ManagementListener.BeanAddedEvent.class);  return rpath;}  }
class C{  static void checkRecordVersion(ProtocolVersion version,boolean allowSSL20Hello) throws SSLException {  if ((version.v < ProtocolVersion.MIN.v) || ((version.major & 0xFF) > (ProtocolVersion.MAX.major & 0xFF))) {    if (!allowSSL20Hello || (version.v != ProtocolVersion.SSL20Hello.v)) {      throw new SSLException("Unsupported record version " + version);    }  }}  }
class C{  private UCrop basisConfig(@NonNull UCrop uCrop){switch (mRadioGroupAspectRatio.getCheckedRadioButtonId()) {case R.id.radio_origin:    uCrop=uCrop.useSourceImageAspectRatio();  break;case R.id.radio_square:uCrop=uCrop.withAspectRatio(1,1);break;case R.id.radio_dynamic:break;default :try {float ratioX=Float.valueOf(mEditTextRatioX.getText().toString().trim());float ratioY=Float.valueOf(mEditTextRatioY.getText().toString().trim());if (ratioX > 0 && ratioY > 0) {uCrop=uCrop.withAspectRatio(ratioX,ratioY);}} catch (NumberFormatException e) {Log.e(TAG,"Number please",e);}break;}if (mCheckBoxMaxSize.isChecked()) {try {int maxWidth=Integer.valueOf(mEditTextMaxWidth.getText().toString().trim());int maxHeight=Integer.valueOf(mEditTextMaxHeight.getText().toString().trim());if (maxWidth > 0 && maxHeight > 0) {uCrop=uCrop.withMaxResultSize(maxWidth,maxHeight);}} catch (NumberFormatException e) {Log.e(TAG,"Number please",e);}}return uCrop;}  }
class C{  public boolean isError(){  Object oo=get_Value(COLUMNNAME_IsError);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public byte[] readByteArray(final int items) throws IOException {  return _readArray(items,null);}  }
class C{  private void testValueGeometryScript() throws SQLException {  ValueGeometry valueGeometry=ValueGeometry.get("POINT(1 1 5)");  try (Connection conn=getConnection(URL)){    ResultSet rs=conn.createStatement().executeQuery("SELECT " + valueGeometry.getSQL());    assertTrue(rs.next());    Object obj=rs.getObject(1);    ValueGeometry g=ValueGeometry.getFromGeometry(obj);    assertTrue("got: " + g + " exp: "+ valueGeometry,valueGeometry.equals(g));  } }  }
class C{  public InitialLdapContext() throws NamingException {  super(null);}  }
class C{  public final void addAction(String action){  if (!mActions.contains(action)) {    mActions.add(action.intern());  }}  }
class C{  public long length() throws IOException {  long fileLength=file.length();  if (fileLength < dataEnd) {    return dataEnd;  } else {    return fileLength;  }}  }
class C{  public void addNamespace(String prefix,String uri){  prefixUriMap.put(prefix,uri);}  }
class C{  public void init(boolean forEncryption,KeyParameter params){  WorkingKey=generateWorkingKey(params.getKey(),forEncryption);  this.forEncryption=forEncryption;}  }
class C{  public NotificationChain basicSetDeclaredTypeRef(TypeRef newDeclaredTypeRef,NotificationChain msgs){  TypeRef oldDeclaredTypeRef=declaredTypeRef;  declaredTypeRef=newDeclaredTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF,oldDeclaredTypeRef,newDeclaredTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private double distanceToClosedPoint(double[] point,double[][] front){  double minDistance=this.euclideanDistance(point,front[0]);  for (int i=1; i < front.length; i++) {    double aux=this.euclideanDistance(point,front[i]);    if (aux < minDistance)     minDistance=aux;  }  return minDistance;}  }
class C{  synchronized void endTransaction(Transaction t){  if (t.getStatus() == Transaction.STATUS_PREPARED) {    preparedTransactions.remove(t.getId());  }  t.setStatus(Transaction.STATUS_CLOSED);  openTransactions.clear(t.transactionId);  if (store.getAutoCommitDelay() == 0) {    store.commit();    return;  }  if (undoLog.isEmpty()) {    int unsaved=store.getUnsavedMemory();    int max=store.getAutoCommitMemory();    if (unsaved * 4 > max * 3) {      store.commit();    }  }}  }
class C{  public void createFilterExpressionFromTokens(Vector<AdvancedSearchDialog.FilterTokens> toks) throws FilterParsingException {  equipmentCriteria=new ExpressionTree();  if (toks.size() != 0) {    equipmentCriteria.root=createFTFromTokensRecursively(toks.iterator(),null);    checkEquipment=true;  } else {    checkEquipment=false;  }}  }
class C{  public void test_DivideBigDecimalRoundingModeFLOOR(){  String a="3736186567876876578956958765675671119238118911893939591735";  String b="74723342238476237823787879183470";  RoundingMode rm=RoundingMode.FLOOR;  String c="50000260373164286401361913";  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  BigDecimal bNumber=new BigDecimal(new BigInteger(b));  BigDecimal result=aNumber.divide(bNumber,rm);  assertEquals("incorrect value",c,result.toString());}  }
class C{  public Instant withDurationAdded(ReadableDuration durationToAdd,int scalar){  if (durationToAdd == null || scalar == 0) {    return this;  }  return withDurationAdded(durationToAdd.getMillis(),scalar);}  }
class C{  public synchronized void changeEndpoints(Endpoints endpoints){  this.endpoints=endpoints;  this.apiBroker.send(new ApiBroker.ChangeEndpoints(endpoints));}  }
class C{  public static boolean[] copyOf(boolean[] original,int newLength){  boolean[] copy=new boolean[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public void receiveErrorqueryStorageCapabilities(java.lang.Exception e){}  }
class C{  public InetSocketAddress address(){  return addr;}  }
class C{  public Version(String s) throws VersionFormatException {  v=s;  int[] nums=parse(s);  major=nums[0];  minor=nums[1];  service=nums[2];  revision=nums[3];}  }
class C{  @Override public boolean canModify(final Object element,final String property){  return true;}  }
class C{  public boolean isFileTransferMsrpSupported(){  return mFileTransferMsrp;}  }
class C{  public String[] array(String[] array){  if (array == null || array.length != count) {    array=new String[count];  }  System.arraycopy(data,0,array,0,count);  return array;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  protected void AndExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  EqualityExpr(-1);  if ((null != m_token) && tokenIs("and")) {    nextToken();    insertOp(opPos,2,OpCodes.OP_AND);    AndExpr();    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);  }}  }
class C{  public Ed25519EncodedGroupElement(final byte[] values){  if (32 != values.length) {    throw new IllegalArgumentException("Invalid encoded group element.");  }  this.values=values;}  }
class C{  public static <T>T eachLine(Reader self,int firstLine,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  BufferedReader br;  int count=firstLine;  T result=null;  if (self instanceof BufferedReader)   br=(BufferedReader)self; else   br=new BufferedReader(self);  try {    while (true) {      String line=br.readLine();      if (line == null) {        break;      } else {        result=callClosureForLine(closure,line,count);        count++;      }    }    Reader temp=self;    self=null;    temp.close();    return result;  }  finally {    closeWithWarning(self);    closeWithWarning(br);  }}  }
class C{  public BERSet(ASN1Encodable[] a){  super(a,false);}  }
class C{  public void writeStartDocument() throws XMLStreamException {  writeStartDocument(_encoding,XMLStreamWriter.DEFAULT_XML_VERSION);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @Override public void removeChangedAttributeListener(){  mChangedAttributeListener=null;}  }
class C{  protected SVGException createSVGException(short type,String key,Object[] args){  return ((SVGOMElement)element).createSVGException(type,key,args);}  }
class C{  private void unSSAGuardsInit(IR ir){  guardPhis=null;  Enumeration<Instruction> e=ir.forwardInstrEnumerator();  inst2guardPhi=new HashMap<Instruction,Instruction>();  while (e.hasMoreElements()) {    Instruction inst=e.nextElement();    if (!Phi.conforms(inst))     continue;    Operand res=Phi.getResult(inst);    if (!(res instanceof RegisterOperand))     continue;    Register r=res.asRegister().getRegister();    if (!r.isValidation())     continue;    inst2guardPhi.put(inst,guardPhis);    guardPhis=inst;    int values=Phi.getNumberOfValues(inst);    for (int i=0; i < values; ++i) {      Operand op=Phi.getValue(inst,i);      if (!(op instanceof RegisterOperand)) {        if (op instanceof TrueGuardOperand) {          BasicBlock bb=Phi.getPred(inst,i).block;          Instruction move=Move.create(GUARD_MOVE,res.asRegister().copyD2D(),new TrueGuardOperand());          move.setSourcePosition(SSA_SYNTH_BCI,ir.getGc().getInlineSequence());          bb.appendInstructionRespectingTerminalBranchOrPEI(move);        } else         if (op instanceof UnreachableOperand) {        } else {          if (VM.VerifyAssertions)           VM._assert(VM.NOT_REACHED);        }      }    }  }  guardRegUnion=new HashMap<Register,Integer>();  associatedRegisters=new HashMap<Register,Register>();  for (Register r=ir.regpool.getFirstSymbolicRegister(); r != null; r=r.getNext()) {    if (!r.isValidation())     continue;    guardRegUnion.put(r,Integer.valueOf(1));    associatedRegisters.put(r,r);  }}  }
class C{  public boolean isValid(MinecraftDirectory dir) throws IOException, NoSuchAlgorithmException {  return ChecksumUtils.verify(dir.getAsset(this),getHash(),"SHA-1",size);}  }
class C{  public boolean forEachKey(TObjectProcedure<K> procedure){  return forEach(procedure);}  }
class C{  public URI(String p_uriSpec) throws MalformedURIException {  this((URI)null,p_uriSpec);}  }
class C{  private static Set<String> removeRedundantPrivileges(Session session,String[] privileges,String[] actions) throws RepositoryException {  final CqActions cqActions=new CqActions(session);  final Set<String> cleanedPrivileges=new HashSet<String>();  if (privileges == null) {    return cleanedPrivileges;  }  cleanedPrivileges.addAll(Arrays.asList(privileges));  if (actions == null) {    return cleanedPrivileges;  }  for (  final String action : actions) {    @SuppressWarnings("deprecation") final Set<Privilege> coveredPrivileges=cqActions.getPrivileges(action);    for (    final Privilege coveredPrivilege : coveredPrivileges) {      cleanedPrivileges.remove(coveredPrivilege.getName());    }  }  return cleanedPrivileges;}  }
class C{  public String flushDB(){  checkIsInMulti();  client.flushDB();  return client.getStatusCodeReply();}  }
class C{  private void addMissingZeros(){  for (int i=0; i < points.size(); i++)   while (points.get(i).alpha.size() < this.points.get(0).vecs.size())   points.get(i).alpha.add(0.0);}  }
class C{  private WebResourceStatistics computeNumberOfFailedOccurrences(WebResourceStatistics wrStatistics){  int nbOfFailedOccurences=webResourceStatisticsDataService.getNumberOfOccurrencesByWebResourceAndResultType(webResource.getId(),TestSolution.FAILED,false).intValue();  wrStatistics.setNbOfFailedOccurences(nbOfFailedOccurences);  return wrStatistics;}  }
class C{  public void close(){  clref=null;}  }
class C{  protected final void parse(final String patternString){  final Stack stack=new Stack();  final int size=patternString.length();  final char pattern[]=new char[size];  int index=0;  patternString.getChars(0,size,pattern,0);  while (index < size) {    if (pattern[index] == '%' && !(index != size - 1 && pattern[index + 1] == '%')) {      index+=addPatternRun(stack,pattern,index);    } else {      index+=addTextRun(stack,pattern,index);    }  }  final int elementCount=stack.size();  m_formatSpecification=new PatternRun[elementCount];  for (int i=0; i < elementCount; i++) {    m_formatSpecification[i]=(PatternRun)stack.elementAt(i);  }}  }
class C{  public String GetImage(){  if (bufpos >= tokenBegin)   return new String(buffer,tokenBegin,bufpos - tokenBegin + 1); else   return new String(buffer,tokenBegin,bufsize - tokenBegin) + new String(buffer,0,bufpos + 1);}  }
class C{  private void handleWidgetSelection(Event e,boolean selection){  Widget item=e.widget;  if (item != null) {    int style=item.getStyle();    if ((style & (SWT.TOGGLE | SWT.CHECK)) != 0) {      if (action.getStyle() == IAction.AS_CHECK_BOX) {        action.setChecked(selection);      }    } else     if ((style & SWT.RADIO) != 0) {      if (action.getStyle() == IAction.AS_RADIO_BUTTON) {        action.setChecked(selection);      }    } else     if ((style & SWT.DROP_DOWN) != 0) {      if (e.detail == 4) {        if (action.getStyle() == IAction.AS_DROP_DOWN_MENU) {        }      }    }    if (action.isEnabled()) {      boolean trace=Policy.TRACE_ACTIONS;      long ms=System.currentTimeMillis();      if (trace) {        System.out.println("Running action: " + action.getText());      }      action.runWithEvent(e);      if (trace) {        System.out.println((System.currentTimeMillis() - ms) + " ms to run action: " + action.getText());      }    }  }}  }
class C{  public void updateLightIcon(){  Lighting lighting=World.getInstance().getLighting();  if (lighting.isLampMode()) {    lightAction.setIcon(Icons.getImageIcon("luxo.png"));    lightAction.setToolTipText("set position of artificial light");  } else {    lightAction.setIcon(Icons.getImageIcon("sun.png"));    lightAction.setToolTipText("set position of sun");  }  State state=currentConfig.lightPosState;  if (state != null) {    LightPositionView view=(LightPositionView)state.getViewData().getView();    if (view != null) {      view.setMode();    }  }}  }
class C{  @Override public void write(byte[] b,int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }synchronized (this) {    int newcount=count + len;    int remaining=len;    int inBufferPos=count - filledBufferSum;    while (remaining > 0) {      int part=Math.min(remaining,currentBuffer.length - inBufferPos);      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);      remaining-=part;      if (remaining > 0) {        needNewBuffer(newcount);        inBufferPos=0;      }    }    count=newcount;  }}  }
class C{  private void waitForNoResults(int maxTimeLimitSeconds,SolrParams params) throws SolrServerException, InterruptedException {  final long giveUpAfter=System.currentTimeMillis() + (1000L * maxTimeLimitSeconds);  long numFound=cloudClient.query(params).getResults().getNumFound();  while (0L < numFound && System.currentTimeMillis() < giveUpAfter) {    Thread.sleep(Math.min(5000,giveUpAfter - System.currentTimeMillis()));    numFound=cloudClient.query(params).getResults().getNumFound();  }  assertEquals("Give up waiting for no results: " + params,0L,numFound);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.ARROW_FUNCTION__HAS_BRACES_AROUND_BODY:    setHasBracesAroundBody(HAS_BRACES_AROUND_BODY_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public void clear(){  methods.clear();  argLists.clear();}  }
class C{  public static int crossLine(double x1,double y1,double x2,double y2,double x,double y){  if ((x < x1 && x < x2) || (x > x1 && x > x2) || (y > y1 && y > y2)|| (x1 == x2)) {    return 0;  }  if (y < y1 && y < y2) {  } else {    if ((y2 - y1) * (x - x1) / (x2 - x1) <= y - y1) {      return 0;    }  }  if (x == x1) {    return x1 < x2 ? 0 : -1;  }  if (x == x2) {    return x1 < x2 ? 1 : 0;  }  return x1 < x2 ? 1 : -1;}  }
class C{  public Element removeBeginEndModifier(){  setBeginEndModifierDefined(false);  return (this);}  }
class C{  public Set<String> keySet(){  return this.map.keySet();}  }
class C{  public static Occurred compare(VectorClock v1,VectorClock v2){  if (v1 == null || v2 == null)   throw new IllegalArgumentException("Can't compare null vector clocks!");  boolean v1Bigger=false;  boolean v2Bigger=false;  int p1=0;  int p2=0;  while (p1 < v1.versions.size() && p2 < v2.versions.size()) {    ClockEntry ver1=v1.versions.get(p1);    ClockEntry ver2=v2.versions.get(p2);    if (ver1.getNodeId() == ver2.getNodeId()) {      if (ver1.getVersion() > ver2.getVersion())       v1Bigger=true; else       if (ver2.getVersion() > ver1.getVersion())       v2Bigger=true;      p1++;      p2++;    } else     if (ver1.getNodeId() > ver2.getNodeId()) {      v2Bigger=true;      p2++;    } else {      v1Bigger=true;      p1++;    }  }  if (p1 < v1.versions.size())   v1Bigger=true; else   if (p2 < v2.versions.size())   v2Bigger=true;  if (!v1Bigger && !v2Bigger)   return Occurred.BEFORE; else   if (v1Bigger && !v2Bigger)   return Occurred.AFTER; else   if (!v1Bigger && v2Bigger)   return Occurred.BEFORE; else   return Occurred.CONCURRENTLY;}  }
class C{  public void columnAdded(TableColumnModelEvent e){  populatePopup();}  }
class C{  public static int indexOf(char[] array,char value){  for (int i=0; i < array.length; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeByteArray(mData);}  }
class C{  public static List<POSupportedLanguage> toPOLanguages(List<SupportedLanguage> languages,Locale currentUserLocale){  if (languages == null || languages.isEmpty()) {    return null;  }  List<POSupportedLanguage> result=new ArrayList<POSupportedLanguage>();  for (  SupportedLanguage supportedLanguage : languages) {    result.add(toPOLanguage(supportedLanguage,currentUserLocale));  }  return result;}  }
class C{  private int checkScale(long val){  int asInt=(int)val;  if (asInt != val) {    asInt=val > Integer.MAX_VALUE ? Integer.MAX_VALUE : Integer.MIN_VALUE;    BigInteger b;    if (intCompact != 0 && ((b=intVal) == null || b.signum() != 0))     throw new ArithmeticException(asInt > 0 ? "Underflow" : "Overflow");  }  return asInt;}  }
class C{  public void upsert(final String key,final Long value){  final Long currentValue=get(key);  if (null == currentValue) {    put(key,value);  } else {    put(key,currentValue + value);  }}  }
class C{  public void calculateDimensions(Paint labelpaint){  if (mPosition == LegendPosition.RIGHT_OF_CHART || mPosition == LegendPosition.RIGHT_OF_CHART_CENTER || mPosition == LegendPosition.LEFT_OF_CHART || mPosition == LegendPosition.LEFT_OF_CHART_CENTER || mPosition == LegendPosition.PIECHART_CENTER) {    mNeededWidth=getMaximumEntryWidth(labelpaint);    mNeededHeight=getFullHeight(labelpaint);    mTextWidthMax=mNeededWidth;    mTextHeightMax=getMaximumEntryHeight(labelpaint);  } else {    mNeededWidth=getFullWidth(labelpaint);    mNeededHeight=getMaximumEntryHeight(labelpaint);    mTextWidthMax=getMaximumEntryWidth(labelpaint);    mTextHeightMax=mNeededHeight;  }}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>();  if (m_Template instanceof AdditionalMeasureProducer) {    Enumeration<String> en=((AdditionalMeasureProducer)m_Template).enumerateMeasures();    while (en.hasMoreElements()) {      String mname=en.nextElement();      newVector.add(mname);    }  }  return newVector.elements();}  }
class C{  public void forEach(final Consumer<? super T> action){  while (iterator.hasNext()) {    action.accept(iterator.next());  }}  }
class C{  java.sql.Date toSqlDate(Calendar calendar){  return new java.sql.Date(getTimeInMillis(calendar));}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.022 -0400",hash_original_method="8B0B5349E68519FC453F35485E73C8A6",hash_generated_method="B57003303872FB846AEA14219A2AA955") @Override public synchronized void write(int b){  int inBufferPos=count - filledBufferSum;  if (inBufferPos == currentBuffer.length) {    needNewBuffer(count + 1);    inBufferPos=0;  }  currentBuffer[inBufferPos]=(byte)b;  count++;}  }
class C{  public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONArray errorResponse){  Log.w(LOG_TAG,"onFailure(int, Header[], Throwable, JSONArray) was not overriden, but callback was received",throwable);}  }
class C{  public DFS(IVisitor visitor){  if (visitor != null) {    this.visitor=visitor;  }}  }
class C{  public void insertAllTests(List<TestCase> tests){  testCases.addAll(tests);}  }
class C{  public boolean isAdministrator(){  if (m_isAdministrator == null) {    m_isAdministrator=Boolean.FALSE;    MRole[] roles=getRoles(0);    for (int i=0; i < roles.length; i++) {      if (roles[i].getAD_Role_ID() == 0) {        m_isAdministrator=Boolean.TRUE;        break;      }    }  }  return m_isAdministrator.booleanValue();}  }
class C{  public boolean isEmpty(){  return head == null;}  }
class C{  private void loadLoginFragment(){  loadFragment(R.id.frame_content,(AbstractYeloFragment)Fragment.instantiate(this,LoginFragment.class.getName(),getIntent().getExtras()),AppConstants.FragmentTags.LOGIN,false,null);}  }
class C{  public boolean exist(){  return productionRun != null;}  }
class C{  public static long toLong(byte b0,byte b1,byte b2,byte b3,byte b4,byte b5,byte b6,byte b7){  return ((long)b0 << 56) | (((long)b1 & 0xff) << 48) | (((long)b2 & 0xff) << 40)| (((long)b3 & 0xff) << 32)| (((long)b4 & 0xff) << 24)| (((long)b5 & 0xff) << 16)| (((long)b6 & 0xff) << 8)| ((long)b7 & 0xff);}  }
class C{  public String globalInfo(){  return "This method constructs a decision tree based classifier that " + "maintains highest accuracy on training data and improves on " + "generalization accuracy as it grows in complexity. The classifier "+ "consists of multiple trees constructed systematically by "+ "pseudorandomly selecting subsets of components of the feature vector, "+ "that is, trees constructed in randomly chosen subspaces.\n\n"+ "For more information, see\n\n"+ getTechnicalInformation().toString();}  }
class C{  public void addAttribute(Attribute attribute,Object value){  if (attribute == null) {    throw new NullPointerException();  }  int len=length();  if (len == 0) {    throw new IllegalArgumentException("Can't add attribute to 0-length text");  }  addAttributeImpl(attribute,value,0,len);}  }
class C{  protected void disableMenus(){  _drawMenu.setEnabled(false);  _warrantMenu.setEnabled(false);  _iconMenu.setEnabled(false);  _zoomMenu.setEnabled(false);  _optionMenu.setEnabled(false);  _editMenu.setEnabled(false);  _fileMenu.setEnabled(false);  _disablePortalSelection=false;}  }
class C{  public static DatagramConnection createDatagramConnection(){  return new AndroidDatagramConnection();}  }
class C{  public void addSubNode(final NavNode subNode){  subNodes.add(subNode);  subNode.setParent(this);  Collections.sort(subNodes,NODE_COMPARATOR);}  }
class C{  public ByteVector putUTF8(final String s){  int charLength=s.length();  if (charLength > 65535) {    throw new IllegalArgumentException();  }  int len=length;  if (len + 2 + charLength > data.length) {    enlarge(2 + charLength);  }  byte[] data=this.data;  data[len++]=(byte)(charLength >>> 8);  data[len++]=(byte)charLength;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else {      length=len;      return encodeUTF8(s,i,65535);    }  }  length=len;  return this;}  }
class C{  public DeleteIndexTemplateRequest name(String name){  this.name=name;  return this;}  }
class C{  public ViewResolver<Object> viewResolver(){  return _viewResolver;}  }
class C{  public final synchronized int size(){  return size;}  }
class C{  public BoolStack(int size){  m_allocatedSize=size;  m_values=new boolean[size];  m_index=-1;}  }
class C{  public R paramsToMultipartEntity(boolean isrepeatable){  try {    mHttpEntity=createMultipartEntity(isrepeatable);  } catch (  IOException e) {    e.printStackTrace();  }  return (R)this;}  }
class C{  public void testNumericInstances(){  runTestOnData(generateData(0,5,5));}  }
class C{  public static EPStatementSyntaxException convertStatement(RecognitionException e,String expression,boolean addPleaseCheck,EsperEPL2GrammarParser parser){  UniformPair<String> pair=convert(e,expression,addPleaseCheck,parser);  return new EPStatementSyntaxException(pair.getFirst(),pair.getSecond());}  }
class C{  public void invert(){  int last=numVertices() - 1;  for (int i=(last - 1) / 2; i >= 0; --i) {    S2Point t=vertices[i];    vertices[i]=vertices[last - i];    vertices[last - i]=t;  }  vertexToIndex=null;  index=null;  originInside^=true;  if (bound.lat().lo() > -S2.M_PI_2 && bound.lat().hi() < S2.M_PI_2) {    bound=S2LatLngRect.full();  } else {    initBound();  }  initFirstLogicalVertex();}  }
class C{  public static synchronized void addToDisabledList(String classname){  DISABLED.add(classname);}  }
class C{  @Override public void visitModifiers(JCModifiers tree){  tree.annotations=com.sun.tools.javac.util.List.nil();  result=tree;}  }
class C{  public void nodeClicked(final NaviNode node,final MouseEvent event,final double x,final double y,final List<ICodeNodeExtension> extensions){  if (event.getButton() == MouseEvent.BUTTON3) {    handleRightClick(node,event,x,y,extensions);  } else   if ((event.getButton() == MouseEvent.BUTTON1) && (event.getClickCount() == 2) && event.isControlDown()) {    final INaviViewNode rawNode=node.getRawNode();    if (rawNode instanceof INaviFunctionNode) {      final INaviFunction function=((INaviFunctionNode)rawNode).getFunction();      CGraphOpener.showFunction(m_model.getParent(),m_model.getViewContainer(),function);    } else     if (rawNode instanceof INaviCodeNode) {      final INaviCodeNode cnode=(INaviCodeNode)rawNode;      final int row=node.positionToRow(y - node.getY());      final INaviInstruction instruction=CCodeNodeHelpers.lineToInstruction(cnode,row);      if (instruction == null) {        return;      }      final Set<IAddress> references=new HashSet<IAddress>();      for (      final INaviOperandTree operand : instruction.getOperands()) {        collectReferences(operand.getRootNode(),references);      }      final List<INaviFunction> functions=m_model.getViewContainer().getFunctions();      for (      final INaviFunction function : functions) {        for (        final IAddress address : references) {          if (function.getAddress().equals(address)) {            CGraphOpener.showFunction(m_model.getParent(),m_model.getViewContainer(),function);          }        }      }    }  } else   if (!m_model.getGraph().getEditMode().getLabelEventHandler().isActive() && (event.getButton() == MouseEvent.BUTTON1) && (event.getClickCount() == 2)) {    if ((node.getRawNode() instanceof INaviGroupNode) && event.isShiftDown()) {      final INaviGroupNode gnode=(INaviGroupNode)node.getRawNode();      gnode.setCollapsed(!gnode.isCollapsed());    } else {      CGraphZoomer.zoomNode(m_model.getGraph(),node);    }  }}  }
class C{  public static void registerMediaProvider(IMediaProvider handler){  findCC();  if (computerCraft_registerMediaProvider != null) {    try {      computerCraft_registerMediaProvider.invoke(null,handler);    } catch (    Exception e) {    }  }}  }
class C{  public void addNameSpace(NameSpace nameSpace){  namespaces.add(nameSpace);}  }
class C{  private void initDirectoryService(File workDir) throws Exception {  service=new DefaultDirectoryService();  service.setWorkingDirectory(workDir);  initSchemaPartition();  JdbmPartition systemPartition=new JdbmPartition();  systemPartition.setId("system");  systemPartition.setPartitionDir(new File(service.getWorkingDirectory(),systemPartition.getId()));  systemPartition.setSuffix(ServerDNConstants.SYSTEM_DN);  systemPartition.setSchemaManager(service.getSchemaManager());  service.setSystemPartition(systemPartition);  service.getChangeLog().setEnabled(false);  service.setDenormalizeOpAttrsEnabled(true);  service.startup();}  }
class C{  public void addSynapse(Synapse s){  for (int x=0; x < synapses.size(); x++) {    Synapse test=(Synapse)(synapses.get(x));    if (s.from == test.from && s.to == test.to && s.type == test.type && s.type == Synapse.type_chemical) {      return;    } else     if ((s.from == test.from && s.to == test.to && s.type == Synapse.type_gap) || (s.from == test.to && s.to == test.from && s.type == Synapse.type_gap)) {      return;    }  }  synapses.add(s);}  }
class C{  public LazyArray(final ObjectProvider<? extends Type> provider,final Type[] array){  super(array);  this.provider=provider;}  }
class C{  private boolean isSilentStart(String value){  boolean result=false;  for (int i=0; i < SILENT_START.length; i++) {    if (value.startsWith(SILENT_START[i])) {      result=true;      break;    }  }  return result;}  }
class C{  public boolean contains(IP ip){  return ip.compareTo(startIP) >= 0 && ip.compareTo(endIP) <= 0;}  }
class C{  public Header(byte[] b) throws IOException {  this(new DNSInput(b));}  }
class C{  protected void drawVerticalCrosshair(Graphics2D g2,Rectangle2D dataArea,double x,Crosshair crosshair){  if (x >= dataArea.getMinX() && x <= dataArea.getMaxX()) {    Line2D line=new Line2D.Double(x,dataArea.getMinY(),x,dataArea.getMaxY());    Paint savedPaint=g2.getPaint();    Stroke savedStroke=g2.getStroke();    g2.setPaint(crosshair.getPaint());    g2.setStroke(crosshair.getStroke());    g2.draw(line);    if (crosshair.isLabelVisible()) {      String label=crosshair.getLabelGenerator().generateLabel(crosshair);      RectangleAnchor anchor=crosshair.getLabelAnchor();      Point2D pt=calculateLabelPoint(line,anchor,5,5);      float xx=(float)pt.getX();      float yy=(float)pt.getY();      TextAnchor alignPt=textAlignPtForLabelAnchorV(anchor);      Shape hotspot=TextUtilities.calculateRotatedStringBounds(label,g2,xx,yy,alignPt,0.0,TextAnchor.CENTER);      if (!dataArea.contains(hotspot.getBounds2D())) {        anchor=flipAnchorH(anchor);        pt=calculateLabelPoint(line,anchor,5,5);        xx=(float)pt.getX();        yy=(float)pt.getY();        alignPt=textAlignPtForLabelAnchorV(anchor);        hotspot=TextUtilities.calculateRotatedStringBounds(label,g2,xx,yy,alignPt,0.0,TextAnchor.CENTER);      }      g2.setPaint(crosshair.getLabelBackgroundPaint());      g2.fill(hotspot);      g2.setPaint(crosshair.getLabelOutlinePaint());      g2.setStroke(crosshair.getLabelOutlineStroke());      g2.draw(hotspot);      TextUtilities.drawAlignedString(label,g2,xx,yy,alignPt);    }    g2.setPaint(savedPaint);    g2.setStroke(savedStroke);  }}  }
class C{  void b1a1__b1a1b1(){  mv.visitInsn(SWAP);  mv.visitInsn(DUP_X1);}  }
class C{  public void deselectAll(){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static MutableTableRequirement mutableTable(TableDefinition tableDefinition){  return MutableTableRequirement.builder(tableDefinition).build();}  }
class C{  public void infoOCSPSourceIsNull(){  addInfo("The OCSP source is null !");}  }
class C{  public boolean writeBlockComment(String theComment){  rawData.add(BuildingBlock.comment + theComment);  return true;}  }
class C{  @RequestMapping(value="/templates/{id}",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Transactional @JsonView(Template.WithText.class) public ResponseEntity<Template> update(@RequestBody Template template,@PathVariable Long id) throws URISyntaxException, JsonProcessingException {  log.debug("REST request to update Template : {}",template);  template.setId(id);  Operation operation=new Operation();  operation.setOperationType("PUT");  operation.setOperationUrl("/api/templates/" + id.toString());  operation.setOperationBody(mapper.writerWithView(Template.WithText.class).writeValueAsString(template));  Optional.ofNullable(templateRepository.findOne(id)).map(null).orElseThrow(null);  template=templateRepository.save(template);  return new ResponseEntity<>(template,HttpStatus.OK);}  }
class C{  private void handleDoRegisterTrackingDown(final NaviNode node,final double y,final double x,final COperandTreeNode operand){  handleRegisterTracking(node,y,operand,AnalysisDirection.DOWN);}  }
class C{  @Override public Object draw(Graphics2D g2,Rectangle2D area,Object params){  super.draw(g2,area,null);  EntityBlockParams ebp;  BlockResult r=new BlockResult();  if (params instanceof EntityBlockParams) {    ebp=(EntityBlockParams)params;    if (ebp.getGenerateEntities()) {      EntityCollection ec=new StandardEntityCollection();      LegendItemEntity entity=new LegendItemEntity((Shape)area.clone());      entity.setSeriesIndex(this.series);      entity.setSeriesKey(this.seriesKey);      entity.setDataset(this.dataset);      entity.setToolTipText(getToolTipText());      entity.setURLText(getURLText());      ec.add(entity);      r.setEntityCollection(ec);    }  }  return r;}  }
class C{  public void addSource(IFile resource,IPath containerPath,SourceElementParser parser){  SearchParticipant participant=SearchEngine.getDefaultSearchParticipant();  SearchDocument document=participant.getDocument(resource.getFullPath().toString());  document.setParser(parser);  IndexLocation indexLocation=computeIndexLocation(containerPath);  scheduleDocumentIndexing(document,containerPath,indexLocation,participant);}  }
class C{  private List<PROCLUSCluster> finalAssignment(List<Pair<double[],long[]>> dimensions,Relation<V> database){  Map<Integer,ModifiableDBIDs> clusterIDs=new HashMap<>();  for (int i=0; i < dimensions.size(); i++) {    clusterIDs.put(i,DBIDUtil.newHashSet());  }  for (DBIDIter it=database.iterDBIDs(); it.valid(); it.advance()) {    V p=database.get(it);    double minDist=Double.POSITIVE_INFINITY;    int best=-1;    for (int i=0; i < dimensions.size(); i++) {      Pair<double[],long[]> pair_i=dimensions.get(i);      double currentDist=manhattanSegmentalDistance(p,pair_i.first,pair_i.second);      if (best < 0 || currentDist < minDist) {        minDist=currentDist;        best=i;      }    }    assert minDist >= 0.;    ModifiableDBIDs ids=clusterIDs.get(best);    ids.add(it);  }  List<PROCLUSCluster> clusters=new ArrayList<>();  for (int i=0; i < dimensions.size(); i++) {    ModifiableDBIDs objectIDs=clusterIDs.get(i);    if (!objectIDs.isEmpty()) {      long[] clusterDimensions=dimensions.get(i).second;      double[] centroid=Centroid.make(database,objectIDs).getArrayRef();      clusters.add(new PROCLUSCluster(objectIDs,clusterDimensions,centroid));    }  }  if (LOG.isDebugging()) {    StringBuilder msg=new StringBuilder();    msg.append('\n');    msg.append("clusters ").append(clusters).append('\n');    LOG.debugFine(msg.toString());  }  return clusters;}  }
class C{  public void addArg(String key,String value){  args.put(key,FileMisc.quote(value));}  }
class C{  public static boolean checkThickPoolCandidacy(StoragePool pool,long requiredCapacityInKB,CoordinatorClient coordinator){  return (100 - getThickPoolFreeCapacityPercentage(pool,requiredCapacityInKB)) <= getMaxPoolUtilizationPercentage(pool,coordinator);}  }
class C{  private boolean isJobSuccessful(String objectName){  LOG.trace("Checking if job completed successfull for {}",objectName);  if (cachedSparkJobsStatus.containsKey(objectName)) {    return cachedSparkJobsStatus.get(objectName).booleanValue();  }  String obj=objectName;  Account account=mJossAccount.getAccount();  LOG.trace("HEAD {}",obj + "/" + HADOOP_SUCCESS);  StoredObject so=account.getContainer(container).getObject(obj + "/" + HADOOP_SUCCESS);  Boolean isJobOK=Boolean.FALSE;  if (so.exists()) {    LOG.debug("{} exists",obj + "/" + HADOOP_SUCCESS);    isJobOK=Boolean.TRUE;  }  cachedSparkJobsStatus.put(objectName,isJobOK);  return isJobOK.booleanValue();}  }
class C{  private void fireModelChanged(){  for (  AttackListener l : listeners) {    l.valueChanged(this);  }}  }
class C{  public boolean isOverlapping(Collection<XDistribution> distributions,XSection other){  if (isAllowOverlap() || other.isAllowOverlap())   return false;  if (getTime() == null || other.getTime() == null)   return false;  if (isToIgnoreStudentConflictsWith(distributions,other.getSectionId()))   return false;  return getTime().hasIntersection(other.getTime());}  }
class C{  @Destroy(priority=AutumnActionPriority.MIN_PRIORITY) public void savePreferences(){  final ObjectSet<Preferences> preferencesToFlush=GdxSets.newSet();  for (  final Entry<String,Preference<?>> preference : preferences) {    final Preferences preferencesFile=namesToFiles.get(preference.key);    preferencesToFlush.add(preferencesFile);    preference.value.save(preference.key,preferencesFile);  }  for (  final Preferences preferencesFile : preferencesToFlush) {    preferencesFile.flush();  }}  }
class C{  public RosterEntry(){}  }
class C{  public final JIPCons reverse(){  return new JIPCons(((ConsCell)getTerm()).reverse());}  }
class C{  public static TitledBorder createTitledBorder(Border border,String title,int titleJustification,int titlePosition,Font titleFont,Color titleColor){  return new TitledBorder(border,title,titleJustification,titlePosition,titleFont,titleColor);}  }
class C{  public CCodeBookmark(final INaviModule module,final IAddress address,final String description){  m_module=Preconditions.checkNotNull(module,"IE00324: Module argument can not be null");  m_address=Preconditions.checkNotNull(address,"IE00325: Address argument can not be null");  m_description=Preconditions.checkNotNull(description,"IE00326: Description argument can not be null");}  }
class C{  public void close() throws IOException {  if (!this.closed) {    this.closed=true;    finish();    this.out.flush();  }}  }
class C{  public void datasource(String name,Plottable plottable){  sources.add(new PDef(name,plottable));}  }
class C{  @Override protected void onDrawChart(Canvas canvas,ArrayList<ChartSet> data){}  }
class C{  protected void removeArrow(Arrow arrow,boolean isForced){  if (decorators == null) {    return;  }  for (  SquareArrowDecorator decorator : decorators) {    decorator.remove(arrow,isForced);    decorator.square.setDirty(true);  }  board.redrawPiecesAndArtifacts(false);}  }
class C{  public void testSPNoParams() throws Exception {  if (versionMeetsMinimum(5,0)) {    CallableStatement storedProc=null;    createProcedure("testSPNoParams","()\nBEGIN\nSELECT 1;\nend\n");    storedProc=this.conn.prepareCall("{call testSPNoParams()}");    storedProc.execute();  }}  }
class C{  public boolean addBound(TypeBound bound){  if (bound.isTrivial()) {    return false;  }  final boolean wasAdded=internal_addBound(bound);  if (DEBUG) {    final String suffix=wasAdded ? "  (ADDED)" : "  (not added; already present)";    log(">>> ADD bound: " + bound + suffix);  }  return wasAdded;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static String uriQuote(final Object uri){  return quote(uri.toString(),"<",">");}  }
class C{  public void testCleanupOffheapAfterCacheDestroyOnheapTiered() throws Exception {  memoryMode=ONHEAP_TIERED;  FifoEvictionPolicy evictionPlc0=new FifoEvictionPolicy();  evictionPlc0.setMaxSize(1);  evictionPlc=evictionPlc0;  checkCleanupOffheapAfterCacheDestroy();}  }
class C{  private static boolean isPartitionTag(String[] partitions,String tagName){  if (partitions != null) {    for (    String partition : partitions) {      if (partition.equals(tagName)) {        return true;      }    }  }  return false;}  }
class C{  public void writeText(Object text,String componentPropertyName) throws IOException {  if (text == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"text"));  }  closeStartIfNecessary();  if (dontEscape) {    writer.write(text.toString());  } else {    ensureTextBufferCapacity(text.toString());    HtmlUtils.writeText(writer,true,true,buffer,text.toString(),textBuffer);  }}  }
class C{  public void testProxyAuthConnectionFailed() throws Throwable {  setUpStoreProperties();  ServerSocket ss=new ServerSocket(0);  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://requested.host:55555/requested.data");  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection(new Proxy(Proxy.Type.HTTP,new InetSocketAddress("localhost",ss.getLocalPort())));  connection.setSSLSocketFactory(getContext().getSocketFactory());  try {    doInteraction(connection,ss,AUTHENTICATION_REQUIRED_CODE,true);  } catch (  IOException e) {    if (DO_LOG) {      System.out.println("Got expected IOException: " + e.getMessage());    }  }}  }
class C{  protected String loadDocumentDetails(){  setC_Currency_ID(NO_CURRENCY);  MInventory inventory=(MInventory)getPO();  setDateDoc(inventory.getMovementDate());  setDateAcct(inventory.getMovementDate());  m_Reversal_ID=inventory.getReversal_ID();  m_DocStatus=inventory.getDocStatus();  p_lines=loadLines(inventory);  log.fine("Lines=" + p_lines.length);  return null;}  }
class C{  public void initialize(InputStream inputStream,DumpTableEnum table) throws IOException {  unbufferedResult=new PipedInputStream();  decodedStream=new PipedOutputStream(unbufferedResult);  result=new BufferedInputStream(unbufferedResult,BUFFERSIZE);  xmlInputThread=new XMLDumpTableInputStreamThread(inputStream,decodedStream,table);  xmlInputThread.start();}  }
class C{  public ComplexAttribute_ createComplexAttribute_(){  ComplexAttribute_Impl complexAttribute_=new ComplexAttribute_Impl();  return complexAttribute_;}  }
class C{  public static double ld(double value){  return Math.log(value) / log2;}  }
class C{  private String createStepForNativeCopy(Workflow workflow,BlockObject srcObject,List<VolumeDescriptor> copyVolumeDescriptors,String waitFor){  List<URI> copyVolumeURIs=VolumeDescriptor.getVolumeURIs(copyVolumeDescriptors);  StorageSystem srcVolumeSystem=getDataObject(StorageSystem.class,srcObject.getStorageController(),_dbClient);  URI srcVolumeSystemURI=srcVolumeSystem.getId();  _log.info("Source volume storage system is {}",srcVolumeSystemURI);  String stepId=workflow.createStepId();  Workflow.Method executeMethod=new Workflow.Method(FULL_COPY_METHOD_NAME,srcVolumeSystemURI,copyVolumeURIs,Boolean.FALSE);  Workflow.Method rollbackMethod=new Workflow.Method(ROLLBACK_FULL_COPY_METHOD,srcVolumeSystemURI,copyVolumeURIs);  workflow.createStep(COPY_VOLUME_STEP,String.format("Create full copy volumes %s on system %s",copyVolumeURIs,srcVolumeSystemURI),waitFor,srcVolumeSystemURI,srcVolumeSystem.getSystemType(),BlockDeviceController.class,executeMethod,rollbackMethod,stepId);  for (  URI copyVolumeURI : copyVolumeURIs) {    Operation op=new Operation();    op.setResourceType(ResourceOperationTypeEnum.CREATE_VOLUME_FULL_COPY);    _dbClient.createTaskOpStatus(Volume.class,copyVolumeURI,stepId,op);  }  _log.info("Created workflow step to create native full copies");  return stepId;}  }
class C{  private static String formatAddress(Address address){  if (address != null) {    StringBuilder sb=new StringBuilder();    if (!TextUtils.isEmpty(address.street())) {      sb.append(address.street()).append('\n');    }    if (!TextUtils.isEmpty(address.zipCode())) {      sb.append(address.zipCode()).append(' ');    }    if (!TextUtils.isEmpty(address.city())) {      sb.append(address.city()).append('\n');    }    if (!TextUtils.isEmpty(address.country())) {      sb.append(address.country());    }    return sb.toString();  } else {    return "-";  }}  }
class C{  public static float atan(float fValue){  return (float)Math.atan(fValue);}  }
class C{  public void store(double val,Offset offset){  this.plus(offset).store(val);}  }
class C{  public <U extends T,A>OngoingMatchingC1<T,U,A> when(DecomposableMatchBuilder1<U,A> decomposableMatchBuilder){  return new OngoingMatchingC1<>(this,decomposableMatchBuilder.build());}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      Loger.debug(String.format("Unable to create cache dir %s",mRootDirectory.getAbsolutePath()));    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      file.delete();    } finally {      FileUtils.closeIO(fis);    }  }}  }
class C{  public String toStringBrief(){  return String.valueOf(cols) + "x" + rows+ (bitDepth != 8 ? ("d" + bitDepth) : "")+ (alpha ? "a" : "")+ (indexed ? "p" : "")+ (greyscale ? "g" : "");}  }
class C{  @Override public String toString(){  return rule.toString();}  }
class C{  public String short_sig(Method m){  String out=extract_classname(m.getCname()) + " " + m.getName().replace("<init>","_init_")+ " (";  String delim="";  for (  ArgumentValue arg : m.getArgs()) {    out+=delim;    if (arg.isType()) {      out+=extract_classname(arg.toString());    } else {      out+=arg.toString();    }    delim=", ";  }  return out + ")";}  }
class C{  public void addXPathProperty(String name,String xpath,QName type){  XPathPropertyDesc desc=new XPathPropertyDesc(name,xpath,type);  xPathProperties.put(name,desc);}  }
class C{  private static String removeDotSegments(StringBuilder uri,int offset,int limit){  if (offset >= limit) {    return uri.toString();  }  if (uri.charAt(offset) == '/') {    offset++;  }  int segmentStart=offset;  int i=offset;  while (i <= limit) {    int nextSegmentStart=-1;    if (i == limit) {      nextSegmentStart=i;    } else     if (uri.charAt(i) == '/') {      nextSegmentStart=i + 1;    } else {      i++;      continue;    }    if (i == segmentStart + 1 && uri.charAt(segmentStart) == '.') {      uri.delete(segmentStart,nextSegmentStart);      limit-=nextSegmentStart - segmentStart;      i=segmentStart;    } else     if (i == segmentStart + 2 && uri.charAt(segmentStart) == '.' && uri.charAt(segmentStart + 1) == '.') {      int prevSegmentStart=uri.lastIndexOf("/",segmentStart - 2) + 1;      int removeFrom=prevSegmentStart > offset ? prevSegmentStart : offset;      uri.delete(removeFrom,nextSegmentStart);      limit-=nextSegmentStart - removeFrom;      segmentStart=prevSegmentStart;      i=prevSegmentStart;    } else {      i++;      segmentStart=i;    }  }  return uri.toString();}  }
class C{  void calculateBarsWidth(int nSets,float x0,float x1){  barWidth=((x1 - x0) - style.barSpacing / 2 - style.setSpacing * (nSets - 1)) / nSets;}  }
class C{  public AccountHeader build(){  if (mAccountHeaderContainer == null) {    withAccountHeader(-1);  }  mAccountHeader=mAccountHeaderContainer.findViewById(R.id.material_drawer_account_header);  int defaultHeaderMinHeight=mActivity.getResources().getDimensionPixelSize(R.dimen.material_drawer_account_header_height);  int statusBarHeight=UIUtils.getStatusBarHeight(mActivity,true);  int height;  if (mHeight != null) {    height=mHeight.asPixel(mActivity);  } else {    if (mCompactStyle) {      height=mActivity.getResources().getDimensionPixelSize(R.dimen.material_drawer_account_header_height_compact);    } else {      height=(int)(DrawerUIUtils.getOptimalDrawerWidth(mActivity) * AccountHeader.NAVIGATION_DRAWER_ACCOUNT_ASPECT_RATIO);      if (Build.VERSION.SDK_INT < 19) {        int tempHeight=height - statusBarHeight;        if (tempHeight > defaultHeaderMinHeight - UIUtils.convertDpToPixel(8,mActivity)) {          height=tempHeight;        }      }    }  }  if (mTranslucentStatusBar && Build.VERSION.SDK_INT >= 21) {    mAccountHeader.setPadding(mAccountHeader.getPaddingLeft(),mAccountHeader.getPaddingTop() + statusBarHeight,mAccountHeader.getPaddingRight(),mAccountHeader.getPaddingBottom());    if (mCompactStyle) {      height=height + statusBarHeight;    } else     if ((height - statusBarHeight) <= defaultHeaderMinHeight) {      height=defaultHeaderMinHeight + statusBarHeight;    }  }  setHeaderHeight(height);  mAccountHeaderBackground=(ImageView)mAccountHeaderContainer.findViewById(R.id.material_drawer_account_header_background);  ImageHolder.applyTo(mHeaderBackground,mAccountHeaderBackground,DrawerImageLoader.Tags.ACCOUNT_HEADER.name());  if (mHeaderBackgroundScaleType != null) {    mAccountHeaderBackground.setScaleType(mHeaderBackgroundScaleType);  }  int textColor=ColorHolder.color(mTextColor,mActivity,R.attr.material_drawer_header_selection_text,R.color.material_drawer_header_selection_text);  if (mCompactStyle) {    mAccountHeaderTextSection=mAccountHeader;  } else {    mAccountHeaderTextSection=mAccountHeaderContainer.findViewById(R.id.material_drawer_account_header_text_section);  }  mAccountHeaderTextSectionBackgroundResource=UIUtils.getSelectableBackgroundRes(mActivity);  handleSelectionView(mCurrentProfile,true);  mAccountSwitcherArrow=(ImageView)mAccountHeaderContainer.findViewById(R.id.material_drawer_account_header_text_switcher);  mAccountSwitcherArrow.setImageDrawable(new IconicsDrawable(mActivity,MaterialDrawerFont.Icon.mdf_arrow_drop_down).sizeRes(R.dimen.material_drawer_account_header_dropdown).paddingRes(R.dimen.material_drawer_account_header_dropdown_padding).color(textColor));  mCurrentProfileView=(BezelImageView)mAccountHeader.findViewById(R.id.material_drawer_account_header_current);  mCurrentProfileName=(TextView)mAccountHeader.findViewById(R.id.material_drawer_account_header_name);  mCurrentProfileEmail=(TextView)mAccountHeader.findViewById(R.id.material_drawer_account_header_email);  if (mNameTypeface != null) {    mCurrentProfileName.setTypeface(mNameTypeface);  } else   if (mTypeface != null) {    mCurrentProfileName.setTypeface(mTypeface);  }  if (mEmailTypeface != null) {    mCurrentProfileEmail.setTypeface(mEmailTypeface);  } else   if (mTypeface != null) {    mCurrentProfileEmail.setTypeface(mTypeface);  }  mCurrentProfileName.setTextColor(textColor);  mCurrentProfileEmail.setTextColor(textColor);  mProfileFirstView=(BezelImageView)mAccountHeader.findViewById(R.id.material_drawer_account_header_small_first);  mProfileSecondView=(BezelImageView)mAccountHeader.findViewById(R.id.material_drawer_account_header_small_second);  mProfileThirdView=(BezelImageView)mAccountHeader.findViewById(R.id.material_drawer_account_header_small_third);  calculateProfiles();  buildProfiles();  if (mSavedInstance != null) {    int selection=mSavedInstance.getInt(AccountHeader.BUNDLE_SELECTION_HEADER,-1);    if (selection != -1) {      if (mProfiles != null && (selection) > -1 && selection < mProfiles.size()) {        switchProfiles(mProfiles.get(selection));      }    }  }  if (mDrawer != null) {    mDrawer.setHeader(mAccountHeaderContainer,mPaddingBelowHeader,mDividerBelowHeader);  }  mActivity=null;  return new AccountHeader(this);}  }
class C{  private int mergeVectors() throws IOException {  try (TermVectorsWriter termVectorsWriter=codec.termVectorsFormat().vectorsWriter(directory,mergeState.segmentInfo,context)){    return termVectorsWriter.merge(mergeState);  } }  }
class C{  public ReadRequest(ContentFormat format,int objectId,int objectInstanceId,int resourceId){  this(format,new LwM2mPath(objectId,objectInstanceId,resourceId));}  }
class C{  public SignatureVisitor visitReturnType(){  return this;}  }
class C{  public static String toIsoString(byte[] bytes){  try {    return new String(bytes,CharacterSets.MIMENAME_ISO_8859_1);  } catch (  UnsupportedEncodingException e) {    Log.e(TAG,"ISO_8859_1 must be supported!",e);    return "";  }}  }
class C{  public void testFullCopy(){  Instances data;  data=new Instances(m_Instances);  assertEquals("# of attributes differ",m_Instances.numAttributes(),data.numAttributes());  assertEquals("class index differs",m_Instances.classIndex(),data.classIndex());  assertEquals("# of instances differ",m_Instances.numInstances(),data.numInstances());  m_Instances.setClassIndex(m_Instances.numAttributes() - 1);  data=new Instances(m_Instances);  assertEquals("class index differs",m_Instances.classIndex(),data.classIndex());}  }
class C{  public void addAttribute(Object name,Object value){  StyleContext context=StyleContext.this;  attributes=context.addAttribute(attributes,name,value);  fireStateChanged();}  }
class C{  public static void resetMetaState(Spannable text){  text.removeSpan(CAP);  text.removeSpan(ALT);  text.removeSpan(SYM);  text.removeSpan(SELECTING);}  }
class C{  private static int checkFormalTypeParameter(final String signature,int pos){  pos=checkIdentifier(signature,pos);  pos=checkChar(':',signature,pos);  if ("L[T".indexOf(getChar(signature,pos)) != -1) {    pos=checkFieldTypeSignature(signature,pos);  }  while (getChar(signature,pos) == ':') {    pos=checkFieldTypeSignature(signature,pos + 1);  }  return pos;}  }
class C{  @Override public Element store(Object o){  Element e=new Element("gui");  GuiLafConfigPane g=(GuiLafConfigPane)o;  String lafClassName=g.getClassName();  e.setAttribute("LAFclass",lafClassName);  e.setAttribute("class",this.getClass().getName());  Locale l=g.getLocale();  e.setAttribute("LocaleLanguage",l.getLanguage());  e.setAttribute("LocaleCountry",l.getCountry());  e.setAttribute("LocaleVariant",l.getVariant());  GuiLafPreferencesManager manager=InstanceManager.getDefault(GuiLafPreferencesManager.class);  if (manager.getFontSize() != manager.getDefaultFontSize()) {    e.setAttribute("fontsize",Integer.toString(manager.getFontSize()));  }  e.setAttribute("nonStandardMouseEvent",(g.mouseEvent.isSelected() ? "yes" : "no"));  return e;}  }
class C{  public Blade addInterceptor(Class<? extends Interceptor> interceptor){  routeBuilder.addInterceptor(interceptor);  return this;}  }
class C{  public Page goBack(){  return goBack(true);}  }
class C{  public static int convertSQLTypeToValueType(int sqlType,String sqlTypeName){switch (sqlType) {case Types.OTHER:case Types.JAVA_OBJECT:    if (sqlTypeName.equalsIgnoreCase("geometry")) {      return Value.GEOMETRY;    }}return convertSQLTypeToValueType(sqlType);}  }
class C{  public static UpdateConstraintException convertToApi(org.oscm.internal.types.exception.UpdateConstraintException oldEx){  org.oscm.internal.types.exception.beans.DomainObjectExceptionBean bean=(org.oscm.internal.types.exception.beans.DomainObjectExceptionBean)getFaultInfo(oldEx);  DomainObjectExceptionBean v13Bean=convertBeanToApi(bean,DomainObjectExceptionBean.class);  if (bean != null) {    DomainObjectException.ClassEnum v13ClassEnum=EnumConverter.convert(bean.getClassEnum(),DomainObjectException.ClassEnum.class);    v13Bean.setClassEnum(v13ClassEnum);  }  return newApiException(UpdateConstraintException.class,getExceptionMessage(oldEx),v13Bean,oldEx.getStackTrace());}  }
class C{  public void register(Track track){  Integer old=Integer.valueOf(_trackHashTable.size());  _trackHashTable.put(track.getId(),track);  setLength(getLength() + track.getLength());  String[] getId=track.getId().split("s");  int id=Integer.parseInt(getId[1]);  if (id > _IdNumber) {    _IdNumber=id;  }  setDirtyAndFirePropertyChange(TRACK_LISTLENGTH_CHANGED_PROPERTY,old,Integer.valueOf(_trackHashTable.size()));  track.addPropertyChangeListener(this);}  }
class C{  private boolean onlyDetectedBySensors(){  boolean sensors=bv.game.getOptions().booleanOption("tacops_sensors");  boolean sensorsDetectAll=bv.game.getOptions().booleanOption("sensors_detect_all");  boolean doubleBlind=bv.game.getOptions().booleanOption("double_blind");  boolean hasVisual=entity.hasSeenEntity(bv.getLocalPlayer());  boolean hasDetected=entity.hasDetectedEntity(bv.getLocalPlayer());  if (sensors && doubleBlind && !sensorsDetectAll&& !trackThisEntitiesVisibilityInfo(entity)&& hasDetected&& !hasVisual) {    return true;  } else {    return false;  }}  }
class C{  @Override public int length(final IScope scope){  return 2;}  }
class C{  public List<TrustedCertificate> updateTrustedCertificate(TrustedCertificateChanges trustedCertificateChanges){  TrustedCertificates response=client.put(TrustedCertificates.class,trustedCertificateChanges,TRUSTSTORE_URL);  return defaultList(response.getTrustedCertificates());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.085 -0400",hash_original_method="960F01091B9D60D59438D2EEA4925E47",hash_generated_method="A11948B18265F3DEB1BC236C9135B7B5") private void breakBarrier(){  generation.broken=true;  count=parties;  trip.signalAll();}  }
class C{  public static ResourceChangeHandler create(final WroManagerFactory managerFactory,final Log log){  notNull(managerFactory,"WroManagerFactory was not set");  notNull(log,"Log was not set");  return new ResourceChangeHandler().setManagerFactory(managerFactory).setLog(log);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x47347B50,version=150) public int sceHttpCreateRequest(int connectionId,int method,PspString path,long contentLength){  HttpConnection httpConnection=getHttpConnection(connectionId);  HttpRequest httpRequest=new HttpRequest();  httpRequest.setMethod(method);  httpRequest.setPath(path.getString());  httpRequest.setContentLength(contentLength);  httpConnection.addHttpRequest(httpRequest);  return httpRequest.getId();}  }
class C{  public boolean containsKey(Object key){  return m_keys.contains(key);}  }
class C{  public static String loadProperties(String dirName,String fileName,ConfigData configData) throws ServletException {  String filePath=dirName + fileName;  _propertiesFileName=fileName;  _propertiesFilePath=filePath;  _properties.clear();  _propertiesText="";  _propertiesLastModified=0;  configData.setProperties(_properties);  File file=new File(filePath);  if (!file.exists()) {    _propertiesText="File " + filePath + " doesn't exist<br/>";    handleDomainConfigProperties(configData);    if (configData == _configData)     _servlet.handleServerConfigProperties(configData);    return _propertiesText;  }  if (!file.canRead()) {    _propertiesText="File " + filePath + " is not readable<br/>";    handleDomainConfigProperties(configData);    if (configData == _configData)     _servlet.handleServerConfigProperties(configData);    return _propertiesText;  }  FileInputStream is=null;  try {    is=new FileInputStream(filePath);    _properties.load(is);    is.close();    Scanner scan=null;    try {      scan=new Scanner(file);    } catch (    FileNotFoundException exc) {    }    StringBuilder sb=new StringBuilder(512);    sb.append("Current properties loaded from file: ").append(filePath).append(":<br/>");    while (scan.hasNextLine()) {      String line=scan.nextLine();      sb.append(line).append("<br/>");    }    scan.close();    _propertiesText=sb.toString();    _propertiesLastModified=new File(filePath).lastModified();  } catch (  IOException exc) {    _properties.clear();    _propertiesText=exc.getMessage();    try {      if (is != null)       is.close();    } catch (    IOException e) {    }  }  handleDomainConfigProperties(configData);  if (configData == _configData)   _servlet.handleServerConfigProperties(configData);  return _propertiesText;}  }
class C{  public OrderedScheduler build(){  if (corePoolSize <= 0) {    corePoolSize=Runtime.getRuntime().availableProcessors();  }  if (null == threadFactory) {    threadFactory=Executors.defaultThreadFactory();  }  return new OrderedScheduler(name,corePoolSize,threadFactory,traceTaskExecution,traceTaskExecutionWarnTimeUs,statsLogger,perExecutorStatsLogger);}  }
class C{  protected void printAttributeSummary(int attrType,int classType){  String str="";switch (attrType) {case Attribute.NUMERIC:    str=" numeric" + str;  break;case Attribute.NOMINAL:str=" nominal" + str;break;case Attribute.STRING:str=" string" + str;break;case Attribute.DATE:str=" date" + str;break;case Attribute.RELATIONAL:str=" relational" + str;break;}str+=" attribute(s))";switch (classType) {case Attribute.NUMERIC:str=" (numeric class," + str;break;case Attribute.NOMINAL:str=" (nominal class," + str;break;case Attribute.STRING:str=" (string class," + str;break;case Attribute.DATE:str=" (date class," + str;break;case Attribute.RELATIONAL:str=" (relational class," + str;break;}print(str);}  }
class C{  private void init(@Nullable AttributeSet attrs,int defStyleAttr,int defStyleRes){  final TypedArray a=getContext().obtainStyledAttributes(attrs,R.styleable.ProgressProfileView,defStyleAttr,defStyleRes);  setMax(a.getFloat(R.styleable.ProgressProfileView_max,mMax));  setProgress(a.getFloat(R.styleable.ProgressProfileView_progress,mProgress));  if (!a.hasValue(R.styleable.ProgressProfileView_backgroundRingSize)) {    if (a.hasValue(R.styleable.ProgressProfileView_progressRingSize)) {      setProgressRingSize(a.getDimension(R.styleable.ProgressProfileView_progressRingSize,mProgressRingSize));      setBackgroundRingSize(mProgressRingSize);    }  } else {    setBackgroundRingSize(a.getDimension(R.styleable.ProgressProfileView_backgroundRingSize,mBackgroundRingSize));    setProgressRingSize(a.getDimension(R.styleable.ProgressProfileView_progressRingSize,mProgressRingSize));  }  setProgressRingOutline(a.getBoolean(R.styleable.ProgressProfileView_progressRingOutline,false));  setBackgroundRingColor(a.getColor(R.styleable.ProgressProfileView_backgroundRingColor,mBackgroundRingColor));  setProgressRingColor(a.getColor(R.styleable.ProgressProfileView_progressRingColor,DEFAULT_RING_COLOR));  try {    if (a.hasValue(R.styleable.ProgressProfileView_progressGradient)) {      int[] gradient;      int i=-1;      try {        int resourceId=a.getResourceId(R.styleable.ProgressProfileView_progressGradient,0);        if (isInEditMode()) {          String[] gradientRes=getResources().getStringArray(resourceId);          gradient=new int[gradientRes.length];          i=0;          for (          String color : gradientRes) {            gradient[i]=Color.parseColor(color);            i++;          }        } else {          if (!a.getResources().getResourceTypeName(resourceId).equals("array")) {            throw new IllegalArgumentException("Resource is not an array");          }          TypedArray ta=a.getResources().obtainTypedArray(resourceId);          int len=ta.length();          gradient=new int[len];          i=0;          for (int c=0; c < len; c++) {            String colorString=ta.getString(c);            if (colorString != null) {              gradient[i]=Color.parseColor(colorString);              i++;            } else {              throw new IllegalArgumentException();            }          }          ta.recycle();        }      } catch (      IllegalArgumentException e) {        if (i == -1) {          throw e;        }        throw new IllegalArgumentException("Unknown Color at position " + i);      }      setProgressGradient(gradient);      setJoinGradient(a.getBoolean(R.styleable.ProgressProfileView_joinGradient,false));      setGradientFactor(a.getFloat(R.styleable.ProgressProfileView_gradientFactor,1f));    }  } catch (  Exception e) {    if (!isInEditMode()) {      throw e;    }  }  setProgressRingCorner(a.getInt(R.styleable.ProgressProfileView_progressRingCorner,Paint.Cap.BUTT.ordinal()));  a.recycle();  setupAnimator();}  }
class C{  public static void validateCertType(CertificateType fieldValue,String fieldName){  if (fieldValue != CertificateType.LDAP_TRUSTED_CERT && fieldValue != CertificateType.STS_TRUST_CERT) {    logAndThrow(String.format("'%s' value is invalid certificate type",fieldName));  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.INFO_MODEL_PROPERTY_SOURCE__PROPERTY:    if (resolve)     return getProperty();  return basicGetProperty();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataappenddata.class,args);}  }
class C{  protected RegularExpressionLiteralImpl(){  super();}  }
class C{  public static String createItemsAsString(final String... items){  final StringBuffer sb=new StringBuffer();  for (int i=0; i < items.length; i++) {    sb.append(items[i]);    if (i < items.length - 1) {      sb.append(TOKEN_DELIMITER);    }  }  return sb.toString();}  }
class C{  public GraphParamsEditor(){}  }
class C{  public StringBuffer(){}  }
class C{  public void afterLast() throws GenericEntityException {  try {    resultSet.afterLast();  } catch (  SQLException e) {    if (!closed) {      this.close();      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GenericEntityException("Error setting the cursor to afterLast",e);  }}  }
class C{  @Nullable public String cacheName(){  return cacheName;}  }
class C{  public static Symbol symbol(JCTree tree){  tree=skipParens(tree);switch (tree.getTag()) {case IDENT:    return ((JCIdent)tree).sym;case SELECT:  return ((JCFieldAccess)tree).sym;case TYPEAPPLY:return symbol(((JCTypeApply)tree).clazz);case ANNOTATED_TYPE:return symbol(((JCAnnotatedType)tree).underlyingType);case REFERENCE:return ((JCMemberReference)tree).sym;default :return null;}}  }
class C{  public String varianceCoveredTipText(){  return "Retain enough PC attributes to account for this proportion of " + "variance.";}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  int incrementFailureCount(){  return ++failures;}  }
class C{  public synchronized void remove(int index){  super.remove(index);  double removedValue=mValue.remove(index);  if (removedValue == mMinValue || removedValue == mMaxValue) {    initRange();  }}  }
class C{  public static int longestPrefix(final int rightOffset,final String... strings){  if (strings.length <= 1) {    return strings.length == 0 ? 0 : strings[0].length();  }  final String a=strings[0];  int clip=-1;  while (true) {    clip++;    for (int k=1; k < strings.length; k++) {      if (strings[k] != null && !equalsLeft(a,strings[k],clip,rightOffset)) {        return clip;      }    }  }}  }
class C{  public ZyGraphCircularSettings(final ZyGraphCircularSettings settings){  m_type=null;  m_layout=settings.getStyle();  m_minimumNodeDistance=settings.getMinimumNodeDistance();}  }
class C{  public final DenseDoubleMatrix2D inverse(boolean omit){  final double[][] inverse=new double[n][m];  if (rank() > 0) {    final double[] reciprocalS=new double[s.length];    if (omit) {      double tol=Math.max(m,n) * s[0] * EPSILON;      for (int i=s.length - 1; i >= 0; i--)       reciprocalS[i]=Math.abs(s[i]) < tol ? 0.0 : 1.0 / s[i];    } else     for (int i=s.length - 1; i >= 0; i--)     reciprocalS[i]=s[i] == 0.0 ? 0.0 : 1.0 / s[i];    int min=Math.min(n,ncu);    for (int i=n - 1; i >= 0; i--)     for (int j=m - 1; j >= 0; j--)     for (int k=min - 1; k >= 0; k--)     inverse[i][j]+=V[i][k] * reciprocalS[k] * U[j][k];  }  return Matrix.Factory.linkToArray(inverse);}  }
class C{  private boolean someAlreadyOpen(Set<String> tags){  for (  TagPos curr : list) {    if (tags.contains(curr.name)) {      return true;    }  }  return false;}  }
class C{  private void determineUnManagedExportMasksForExportInfo(com.emc.storageos.db.client.model.StorageSystem storageSystem,Map<String,List<HostExportInfo>> hostToVolumeExportInfoMap,Set<String> invalidExportHosts,DbClient dbClient,Map<URI,HostExportInfo> masksToUpdateForVolumes,List<HostExportInfo> masksToCreateForVolumes){  for (  Map.Entry<String,List<HostExportInfo>> entry : hostToVolumeExportInfoMap.entrySet()) {    String hostName=entry.getKey();    log.info("Processing export info for host {} .",hostName);    if (invalidExportHosts.contains(hostName)) {      log.info("Found host {} in invalid hosts list. We will not process this host export data.",hostName);      continue;    }    List<HostExportInfo> volumeToHostExportInfoList=entry.getValue();    log.info("Processing export info list {} .",volumeToHostExportInfoList);    String maskName=getUnManagedMaskName(hostName,storageSystem.getNativeGuid());    HostExportInfo hostExportInfo=verifyHostExports(volumeToHostExportInfoList);    if (hostExportInfo == null) {      invalidExportHosts.add(hostName);      log.info("Found export info for host {} invalid. We will not process this host export data.",hostName);      UnManagedExportMask unManagedMask=getUnManagedExportMask(maskName,dbClient,storageSystem.getId());      if (unManagedMask != null) {        log.info("Found existing unmanaged export mask for host {} and array {} --- {} . We will deactivate this mask.",hostName,storageSystem.getNativeId(),unManagedMask);        removeInvalidMaskDataFromVolumes(unManagedMask,dbClient);        unManagedMask.setInactive(true);        dbClient.updateObject(unManagedMask);      }      continue;    }    log.info("The result export info for host {} and array {} : {} .",hostName,storageSystem.getNativeId(),hostExportInfo);    UnManagedExportMask unManagedMask=getUnManagedExportMask(maskName,dbClient,storageSystem.getId());    boolean isValid=true;    if (unManagedMask != null) {      log.info("Found existing unmanaged export mask for host {} and array {} --- {} .",hostName,storageSystem.getNativeId(),unManagedMask);      StringSet storagePortsUris=unManagedMask.getKnownStoragePortUris();      Set<String> storagePortsNativeIds=new HashSet<>();      Set<String> initiatorsNativeIds=new HashSet<>();      for (      String portUriString : storagePortsUris) {        URI portUri=URI.create(portUriString);        com.emc.storageos.db.client.model.StoragePort port=dbClient.queryObject(com.emc.storageos.db.client.model.StoragePort.class,portUri);        storagePortsNativeIds.add(port.getNativeId());      }      storagePortsNativeIds.addAll(unManagedMask.getUnmanagedStoragePortNetworkIds());      initiatorsNativeIds.addAll(unManagedMask.getKnownInitiatorNetworkIds());      initiatorsNativeIds.addAll(unManagedMask.getUnmanagedInitiatorNetworkIds());      isValid=verifyHostExports(initiatorsNativeIds,storagePortsNativeIds,hostExportInfo);      if (!isValid) {        log.info("The result export info for host {} and storage array {} does not comply with existing mask.",hostName,storageSystem.getNativeId());        removeInvalidMaskDataFromVolumes(unManagedMask,dbClient);        unManagedMask.setInactive(true);        dbClient.updateObject(unManagedMask);      }    } else {      log.info("There is no existing unmanaged export mask for host {} and array {} .",hostName,storageSystem.getNativeId());      List<String> initiatorPorts=new ArrayList<>();      for (      Initiator initiator : hostExportInfo.getInitiators()) {        initiatorPorts.add(initiator.getPort());      }      Map<URI,ExportMask> uriToExportMask=ExportMaskUtils.getExportMasksWithInitiatorPorts(dbClient,initiatorPorts);      for (      ExportMask mask : uriToExportMask.values()) {        if (URIUtil.identical(mask.getStorageDevice(),storageSystem.getId())) {          isValid=false;          log.info("Found managed export mask for host {} and array {} --- {}." + " We will not process this host export data.",hostName,storageSystem.getNativeId(),mask.getId());          break;        }      }    }    if (!isValid) {      log.info("Found export info for host {} invalid. Export info: {}." + " We will not process this host export data.",hostName,hostExportInfo);      invalidExportHosts.add(hostName);      continue;    }    if (unManagedMask != null) {      URI maskId=unManagedMask.getId();      masksToUpdateForVolumes.put(maskId,hostExportInfo);    } else {      masksToCreateForVolumes.add(hostExportInfo);    }  }}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public static Value SubSeq(Value s,Value m,Value n){  boolean isString=false;  String str=null;  TupleValue seq=null;  if (s instanceof StringValue) {    str=((StringValue)s).val.toString();    isString=true;  }  if (!isString) {    seq=TupleValue.convert(s);    if (seq == null) {      throw new EvalException(EC.TLC_MODULE_ARGUMENT_ERROR,new String[]{"first","SubSeq","sequence",Value.ppr(s.toString())});    }  }  if (!(m instanceof IntValue)) {    throw new EvalException(EC.TLC_MODULE_ARGUMENT_ERROR,new String[]{"second","SubSeq","natural number",Value.ppr(m.toString())});  }  if (!(n instanceof IntValue)) {    throw new EvalException(EC.TLC_MODULE_ARGUMENT_ERROR,new String[]{"third","SubSeq","natural number",Value.ppr(n.toString())});  }  int beg=((IntValue)m).val;  int end=((IntValue)n).val;  if (beg > end) {    if (isString) {      return new StringValue("");    } else {      return EmptyTuple;    }  }  int len=isString ? str.length() : seq.size();  int sublen=end - beg + 1;  if (beg < 1 || beg > len) {    throw new EvalException(EC.TLC_MODULE_ARGUMENT_NOT_IN_DOMAIN,new String[]{"second","SubSeq",Value.ppr(s.toString()),Value.ppr(m.toString())});  }  if (end < 1 || end > len) {    throw new EvalException(EC.TLC_MODULE_ARGUMENT_NOT_IN_DOMAIN,new String[]{"third","SubSeq",Value.ppr(s.toString()),Value.ppr(n.toString())});  }  if (isString) {    return new StringValue(str.substring(beg - 1,end));  }  Value[] elems=new Value[sublen];  for (int i=0; i < sublen; i++) {    elems[i]=seq.elems[beg + i - 1];  }  return new TupleValue(elems);}  }
class C{  public boolean isEmpty(){  return elements == 0;}  }
class C{  public WFPanel(AMenu menu){  this(menu,WORKFLOW_WhereClause,-1);}  }
class C{  public ParameterDatabase(String pathNameRelativeToClassFile,Class cls,String[] args) throws FileNotFoundException, IOException {  this();  label="" + cls + " : "+ pathNameRelativeToClassFile;  ParameterDatabase files=new ParameterDatabase(pathNameRelativeToClassFile,cls);  ParameterDatabase a=new ParameterDatabase();  a.relativeClass=cls;  a.relativePath=files.relativePath;  a.parents.addElement(files);  boolean hasArgs=false;  for (int x=0; x < args.length - 1; x++) {    if (args[x].equals("-p")) {      String s=args[x + 1].trim();      if (s.length() == 0)       continue;      int eq=s.indexOf('=');      if (eq <= 0)       continue;      put(s.substring(0,eq),s.substring(eq + 1));      if (!hasArgs) {        label=label + "    Args:  ";        hasArgs=true;      }      label=label + s + "  ";    }  }  relativeClass=cls;  relativePath=files.relativePath;  parents.addElement(a);}  }
class C{  protected void drawDimmedLayer(@NonNull Canvas canvas){  canvas.save();  if (mOvalDimmedLayer) {    canvas.clipPath(mCircularPath,Region.Op.DIFFERENCE);  } else {    canvas.clipRect(mCropViewRect,Region.Op.DIFFERENCE);  }  canvas.drawColor(mDimmedColor);  canvas.restore();}  }
class C{  private CacheConfiguration cacheConfiguration(){  CacheConfiguration cacheCfg=defaultCacheConfiguration();  cacheCfg.setCacheMode(PARTITIONED);  cacheCfg.setBackups(1);  cacheCfg.setWriteSynchronizationMode(FULL_SYNC);  cacheCfg.setName(CACHE_NAME);  return cacheCfg;}  }
class C{  public static EntryProcessor<String,WebSession,Void> newAttributeProcessor(final Collection<T2<String,Object>> updates){  return new AttributesProcessor(updates);}  }
class C{  public void key(String key,String domain,long expires){  if (key == null)   return;  daemon.session().remove(this.key);  this.key=key;  daemon.session().put(key,this);  this.domain=domain;  this.expires=expires;  set=false;}  }
class C{  public void uninstallApplication(String packageName,String schedule){  if (packageName != null && !packageName.contains(resources.getString(R.string.application_package_prefix))) {    packageName=resources.getString(R.string.application_package_prefix) + packageName;  }  if (schedule != null && !schedule.trim().isEmpty() && !schedule.equals("undefined")) {    try {      AlarmUtils.setOneTimeAlarm(context,schedule,Constants.Operation.UNINSTALL_APPLICATION,null,null,packageName);    } catch (    ParseException e) {      Log.e(TAG,"One time alarm time string parsing failed." + e);    }    return;  }  if (Constants.SYSTEM_APP_ENABLED) {    CommonUtils.callSystemApp(context,Constants.Operation.SILENT_UNINSTALL_APPLICATION,"",packageName);  } else {    Uri packageURI=Uri.parse(packageName);    Intent uninstallIntent=new Intent(Intent.ACTION_DELETE,packageURI);    uninstallIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    context.startActivity(uninstallIntent);  }}  }
class C{  public static boolean contains(byte[] array,byte valueToFind){  return indexOf(array,valueToFind) != INDEX_NOT_FOUND;}  }
class C{  public static QueryBuilder<ParsedGraphQuery> describe(Resource... theValues){  return describe(null,theValues);}  }
class C{  public void addDate(Date date){  getDates().add(date);}  }
class C{  public X509CertImpl(Certificate certificate){  this.certificate=certificate;  this.tbsCert=certificate.getTbsCertificate();  this.extensions=tbsCert.getExtensions();}  }
class C{  public String modify(String sql){  int len=getLog(10);  for (int i=0; i < len; i++) {    int pos=getInt(sql.length());    if (getBoolean(50)) {      String badChars="abcABCDEF\u00ef\u00f6\u00fcC1230=<>+\"\\*%&/()=?$_-.:,;{}[]";      char bad=badChars.charAt(getInt(badChars.length()));      sql=sql.substring(0,pos) + bad + sql.substring(pos);    } else {      if (pos >= sql.length()) {        sql=sql.substring(0,pos);      } else {        sql=sql.substring(0,pos) + sql.substring(pos + 1);      }    }  }  return sql;}  }
class C{  private void focusSpinnerIfNecessary(){  final Component fo=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();  if (!spinner.isRequestFocusEnabled() || (fo != null && (SwingUtilities.isDescendingFrom(fo,spinner))))   return;  Container root=spinner;  if (!root.isFocusCycleRoot()) {    root=root.getFocusCycleRootAncestor();  }  if (root == null)   return;  final FocusTraversalPolicy ftp=root.getFocusTraversalPolicy();  final Component child=ftp.getComponentAfter(root,spinner);  if (child != null && SwingUtilities.isDescendingFrom(child,spinner)) {    child.requestFocus();  }}  }
class C{  public Annotation(int start,String text){  this(start,Integer.MAX_VALUE,text);}  }
class C{  public boolean visit(MoveSourceEdit edit){  return visitNode(edit);}  }
class C{  public GraphicsNode createGraphicsNode(BridgeContext ctx,Element e){  CompositeGraphicsNode gn=(CompositeGraphicsNode)super.createGraphicsNode(ctx,e);  if (gn == null)   return null;  associateSVGContext(ctx,e,gn);  RenderingHints hints=null;  hints=CSSUtilities.convertColorRendering(e,hints);  if (hints != null)   gn.setRenderingHints(hints);  Rectangle2D r=CSSUtilities.convertEnableBackground(e);  if (r != null)   gn.setBackgroundEnable(r);  return gn;}  }
class C{  protected JComponent createContent(){  JLabel lb=new JLabel("");  lb.setForeground(new Color(230,230,230));  return lb;}  }
class C{  public void testDefinitionsParsing() throws Exception {  DropOnValueFilter dovf=new DropOnValueFilter();  dovf.setTungstenSchema("tungsten_foo");  dovf.setDefinitionsFile(definitionsFile);  createDefinitionsFile();  filterHelper.setContext(replicatorContext);  filterHelper.setFilter(dovf);  assertEquals("Incorrect count of value entries from parsed JSON",5,dovf.getDefinedValueEntries());  filterHelper.done();  assertEquals("Incorrect count of value entries after releasing filter",0,dovf.getDefinedValueEntries());  filterHelper.setContext(replicatorContext);  filterHelper.setFilter(dovf);  assertEquals("Incorrect count of value entries after 2nd prepare",5,dovf.getDefinedValueEntries());  filterHelper.done();}  }
class C{  public void testAbnormalInvokeAll1(){  testAbnormalInvokeAll1(mainPool());}  }
class C{  public StringTag(String value){  super(TagType.STRING);  this.value=value;}  }
class C{  private boolean endsWithSeparator(String path){  return path.endsWith("/") || path.endsWith("\\");}  }
class C{  public static int compareVersions(String version1,String version2,boolean compareMajorVersion){  double v1=0, v2=0;  try {    v1=Double.parseDouble(version1);  } catch (  NumberFormatException ex) {    if (Trace.error) {      ex.printStackTrace();    }  }  try {    v2=Double.parseDouble(version2);  } catch (  NumberFormatException ex) {    if (Trace.error) {      ex.printStackTrace();    }  }  if (compareMajorVersion) {    v1=Math.floor(v1);    v2=Math.floor(v2);  }  if (v1 == v2) {    return 0;  } else   if (v1 < v2) {    return -1;  }  return 1;}  }
class C{  public ScrollFrame(){  super(null);  this.initializeUIControls();}  }
class C{  private JPanel decorateParameterPanel(final JPanel parameterEditor){  JPanel parentPanel=new JPanel(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=0;  gbc.weightx=1.0;  gbc.weighty=1.0;  gbc.fill=GridBagConstraints.BOTH;  parentPanel.add(parameterEditor,gbc);  JLabel warningLabel=new JLabel(I18N.getGUIMessage("gui.bubble." + decorateI18N + ".label"));  boolean isError=getStyle() == BubbleStyle.ERROR;  warningLabel.setIcon(isError ? ERROR_ICON : WARNING_ICON);  warningLabel.setBackground(isError ? BubbleStyle.ERROR.getColor() : BubbleStyle.WARNING.getColor());  warningLabel.setOpaque(true);  warningLabel.setBorder(new EmptyBorder(1,1,1,0));  gbc.gridy+=1;  gbc.weighty=0.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  gbc.insets=new Insets(2,0,0,0);  parentPanel.add(warningLabel,gbc);  return parentPanel;}  }
class C{  private void checkListArch(String entidad) throws Exception {  int count;  VolumesTable table=new VolumesTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    count=DbSelectFns.selectCount(dbConn,table.getArchListTableName(),table.getCountArchListQual(_id));    if (count > 0) {      ISicresAdminBasicException.throwException(ISicresAdminVolumeListKeys.EC_LISTVOL_ASSOC_ARCH);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public JsonObject matchSearchNowPattern(String wdsResponseText){  JsonObject result=new JsonObject();  int idx=wdsResponseText.toLowerCase().indexOf("{search_now:");  if (idx != -1) {    String json=wdsResponseText.substring(idx).trim();    wdsResponseText=wdsResponseText.substring(0,idx - 1).trim();    if (json.startsWith("\"")) {      json=json.substring(0);    }    if (json.endsWith("\"")) {      json=json.substring(0,json.length() - 1);    }    JsonElement element=new JsonParser().parse(json);    result.add("Params",element.getAsJsonObject());  }  result.addProperty("WDSMessage",wdsResponseText);  return result;}  }
class C{  protected void handleOverflow(E e){}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  mCharts[seriesIndex].drawLegendShape(canvas,renderer,x,y,0,paint);}  }
class C{  public CharacterSetAccessory(){  if (UIManager.getLookAndFeel().getID().toLowerCase().equals("aqua")) {    initComponents();  } else {    initComponentsWin();  }  String selectedItem=prefs.get("characterSet","UTF-8");  charSetCombo.setModel(new DefaultComboBoxModel(new String[]{selectedItem}));  charSetCombo.setSelectedItem(selectedItem);  charSetCombo.setEnabled(false);  fetchAvailableCharSets();  String lineSeparator=prefs.get("lineSeparator","\n");  if (lineSeparator.equals("\r")) {    lineSepCombo.setSelectedIndex(0);  } else   if (lineSeparator.equals("\n")) {    lineSepCombo.setSelectedIndex(1);  } else   if (lineSeparator.equals("\r\n")) {    lineSepCombo.setSelectedIndex(2);  }}  }
class C{  public boolean isXMLParserValidating(){  return false;}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public RequestMemoryCommand(final int packetId,final IAddress address,final IAddress length){  super(DebugCommandType.CMD_READ_MEMORY,packetId);  Preconditions.checkNotNull(address,"IE01015: Address argument can not be null");  Preconditions.checkNotNull(length,"IE01021: Length argument can not be null");  addArgument(new DebugMessageAddressArgument(address));  addArgument(new DebugMessageAddressArgument(length));}  }
class C{  private StubUtility2(){}  }
class C{  public FolderTokenDivider findByName(String name) throws Exception {  int idx;  FolderTokenDivider div=null;  idx=super.findIndexByName(name);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  div=get(idx);  return div;}  }
class C{  public double doOperation() throws OperatorFailedException {  double logP=colouringModel.getTreeColouringWithProbability().getLogProbabilityDensity();  colouringModel.resample();  double logQ=colouringModel.getTreeColouringWithProbability().getLogProbabilityDensity();  return logP - logQ;}  }
class C{  private void restoreScreen(Key key,byte[] buffer,int dataSize) throws IOException {  if (VERBOSE)   Log.v(TAG,"unpacking screen " + key.id);  if (DEBUG)   Log.d(TAG,"read (" + buffer.length + "): "+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));  ContentResolver cr=mContext.getContentResolver();  ContentValues values=unpackScreen(buffer,dataSize);  cr.insert(WorkspaceScreens.CONTENT_URI,values);}  }
class C{  public static void release(){  if (FileDownloadManager.getFileDownloadConfiguration() != null && isInit()) {    getFileDownloadManager().release();  }}  }
class C{  protected void addY(int yOffset){  if (yOffset == 0f)   return;  if (isYspaceFor(yOffset)) {    m_position[m_area].y+=yOffset;    log.finest("Page=" + m_pageNo + " ["+ m_area+ "] "+ m_position[m_area].x+ "/"+ m_position[m_area].y);  } else   if (m_area == AREA_CONTENT) {    log.finest("Not enough Y space " + m_lastHeight[m_area] + " - remaining "+ getYspace()+ " - Area="+ m_area);    newPage(true,true);    log.finest("Page=" + m_pageNo + " ["+ m_area+ "] "+ m_position[m_area].x+ "/"+ m_position[m_area].y);  } else {    m_position[m_area].y+=yOffset;    log.log(Level.SEVERE,"Outside of Area: " + m_position);  }}  }
class C{  public ExampleSet read(DataResultSet dataResultSet,DataResultSetTranslationConfiguration configuration,boolean previewOnly,ProgressListener listener) throws OperatorException {  int maxRows=previewOnly ? ImportWizardUtils.getPreviewLength() : -1;  cancelLoadingRequested=false;  boolean isFaultTolerant=configuration.isFaultTolerant();  isReading=true;  int[] attributeColumns=configuration.getSelectedIndices();  int numberOfAttributes=attributeColumns.length;  Attribute[] attributes=new Attribute[numberOfAttributes];  for (int i=0; i < attributes.length; i++) {    int attributeValueType=configuration.getColumnMetaData(attributeColumns[i]).getAttributeValueType();    if (attributeValueType == Ontology.ATTRIBUTE_VALUE) {      attributeValueType=Ontology.POLYNOMINAL;    }    attributes[i]=AttributeFactory.createAttribute(configuration.getColumnMetaData(attributeColumns[i]).getOriginalAttributeName(),attributeValueType);  }  int numberOfAvailableColumns=dataResultSet.getNumberOfColumns();  for (  int attributeColumn : attributeColumns) {    if (attributeColumn >= numberOfAvailableColumns) {      throw new UserError(null,"data_import.specified_more_columns_than_exist",configuration.getColumnMetaData(attributeColumn).getUserDefinedAttributeName(),attributeColumn);    }  }  MemoryExampleTable exampleTable=new MemoryExampleTable(attributes);  attributes=exampleTable.getAttributes();  int currentRow=0;  int exampleIndex=0;  dataResultSet.reset(listener);  DataRowFactory factory=new DataRowFactory(configuration.getDataManagementType(),'.');  int maxAnnotatedRow=configuration.getLastAnnotatedRowIndex();  boolean isRunningInProcess=false;  if (operator != null) {    Process process;    process=operator.getProcess();    if (process != null && process.getProcessState() == Process.PROCESS_STATE_RUNNING) {      isRunningInProcess=true;    }  }  while (dataResultSet.hasNext() && !shouldStop && (currentRow < maxRows || maxRows < 0)) {    if (isRunningInProcess) {      operator.checkForStop();    }    if (cancelLoadingRequested) {      break;    }    dataResultSet.next(listener);    String currentAnnotation;    if (currentRow <= maxAnnotatedRow) {      currentAnnotation=configuration.getAnnotation(currentRow);    } else {      currentAnnotation=null;    }    if (currentAnnotation != null) {      int attributeIndex=0;      List<String> attributeNames=new ArrayList<>();      for (      Attribute attribute : attributes) {        if (AbstractDataResultSetReader.ANNOTATION_NAME.equals(currentAnnotation)) {          String newAttributeName=getString(dataResultSet,exampleIndex,attributeColumns[attributeIndex],isFaultTolerant);          if (newAttributeName != null && !newAttributeName.isEmpty()) {            String uniqueAttributeName=newAttributeName;            int uniqueNameNumber=1;            while (attributeNames.contains(uniqueAttributeName)) {              uniqueAttributeName=newAttributeName + "(" + uniqueNameNumber+ ")";              uniqueNameNumber++;            }            attribute.setName(uniqueAttributeName);            attribute.setConstruction(uniqueAttributeName);            ColumnMetaData cmd=configuration.getColumnMetaData(attributeColumns[attributeIndex]);            if (cmd != null) {              if (!cmd.isAttributeNameSpecified()) {                cmd.setUserDefinedAttributeName(uniqueAttributeName);              }            }          }        } else {          String annotationValue=getString(dataResultSet,exampleIndex,attributeColumns[attributeIndex],isFaultTolerant);          if (annotationValue != null && !annotationValue.isEmpty()) {            attribute.getAnnotations().put(currentAnnotation,annotationValue);          }        }        attributeNames.add(attribute.getName());        attributeIndex++;      }    } else {      DataRow row=factory.create(attributes.length);      exampleTable.addDataRow(row);      int attributeIndex=0;      for (      Attribute attribute : attributes) {        if (dataResultSet.isMissing(attributeColumns[attributeIndex])) {          row.set(attribute,Double.NaN);        } else {switch (attribute.getValueType()) {case Ontology.INTEGER:            row.set(attribute,getOrParseNumber(configuration,dataResultSet,exampleIndex,attributeColumns[attributeIndex],isFaultTolerant));          break;case Ontology.NUMERICAL:case Ontology.REAL:        row.set(attribute,getOrParseNumber(configuration,dataResultSet,exampleIndex,attributeColumns[attributeIndex],isFaultTolerant));      break;case Ontology.DATE_TIME:case Ontology.TIME:case Ontology.DATE:    row.set(attribute,getOrParseDate(configuration,dataResultSet,exampleIndex,attributeColumns[attributeIndex],isFaultTolerant));  break;default :row.set(attribute,getStringIndex(attribute,dataResultSet,exampleIndex,attributeColumns[attributeIndex],isFaultTolerant));}}attributeIndex++;}exampleIndex++;}currentRow++;}ExampleSet exampleSet=exampleTable.createExampleSet();List<Attribute> allAttributes=new LinkedList<>();for (Attribute att : exampleSet.getAttributes()) {allAttributes.add(att);}int attributeIndex=0;List<String> attributeNames=new ArrayList<>();for (Attribute attribute : allAttributes) {final ColumnMetaData cmd=configuration.getColumnMetaData(attributeColumns[attributeIndex]);if (!cmd.isSelected()) {attributeIndex++;continue;}String userDefinedName=cmd.getUserDefinedAttributeName();String uniqueUserDefinedName=userDefinedName;int uniqueNameNumber=1;while (attributeNames.contains(uniqueUserDefinedName)) {uniqueUserDefinedName=userDefinedName + "(" + uniqueNameNumber+ ")";uniqueNameNumber++;}if (uniqueUserDefinedName != null && !uniqueUserDefinedName.isEmpty()) {attribute.setName(uniqueUserDefinedName);}attribute.setConstruction(uniqueUserDefinedName);String roleId=cmd.getRole();if (!Attributes.ATTRIBUTE_NAME.equals(roleId)) {exampleSet.getAttributes().setSpecialAttribute(attribute,roleId);}attributeIndex++;attributeNames.add(attribute.getName());}isReading=false;if (listener != null) {listener.complete();}return exampleSet;}  }
class C{  public void testShiftLeft1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=0;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftLeft(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  NodeTextRep instantiateInNodeText(OpDeclNode[] formalParams,String[] arguments,ExprOrOpArgNode sn,NodeTextRep nodeTextRep){  NodeTextRep result=nodeTextRep.clone();  int numOfLines=result.nodeText.length;  Vector<Insertion>[] inserts=new Vector[numOfLines];  for (int i=0; i < numOfLines; i++) {    inserts[i]=new Vector();  }  int beginLine=sn.stn.getLocation().beginLine();  for (int i=0; i < arguments.length; i++) {    SemanticNode[] uses=ResourceHelper.getUsesOfSymbol(formalParams[i],sn);    String replacementText=arguments[i];    int sourceTextLength=formalParams[i].getName().toString().length();    boolean mayNeedParens=false;    if (primingNeedsParens(formalParams[i]) && ((replacementText.charAt(replacementText.length() - 1) != '\'') || replacementText.startsWith("\\/") || replacementText.startsWith("/\\"))) {      mayNeedParens=true;    }    for (int j=0; j < uses.length; j++) {      if (!(uses[j] instanceof OpApplNode)) {        MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","An error that should not happen has occurred in " + "line 2842 of NewDecomposeProofHandler.");        return result;      }      Location useLocation=uses[j].stn.getLocation();      int useIdx=useLocation.beginLine() - beginLine;      int offset=colToLoc(useLocation.beginColumn(),result.mapping[useIdx]);      String thisReplaceText=replacementText;      if (mayNeedParens) {        String[] precedingSafe=new String[]{"(","[","{",",","<<","->",":"};        String[] followingSafe=new String[]{")","]","}",",",">>","->","~>"};        String testString=result.nodeText[useIdx].substring(0,offset).trim();        int line=useIdx;        while (testString.equals("") && line > 0) {          line--;          testString=result.nodeText[line];        }        boolean terminated=testString.equals("");        int k=0;        while (!terminated && k < precedingSafe.length) {          terminated=testString.endsWith(precedingSafe[k]);          k++;        }        if (terminated) {          testString=result.nodeText[useIdx].substring(offset + sourceTextLength).trim();          line=useIdx;          while (testString.equals("") && line < result.nodeText.length - 1) {            line++;            testString=result.nodeText[line];          }          terminated=testString.equals("");          k=0;          while (!terminated && k < precedingSafe.length) {            terminated=testString.startsWith(followingSafe[k]);            k++;          }        }        if (!terminated) {          thisReplaceText="(" + replacementText + ")";        }      }      result.nodeText[useIdx]=result.nodeText[useIdx].substring(0,offset) + thisReplaceText + result.nodeText[useIdx].substring(offset + sourceTextLength);      adjustMappingPairVector(useLocation.beginColumn() + 1,thisReplaceText.length() - sourceTextLength,result.mapping[useIdx]);      inserts[useIdx].add(new Insertion(offset,sourceTextLength,thisReplaceText.length()));    }  }  adjustIndentation(nodeTextRep,result,inserts);  return result;}  }
class C{  public void picture(double x,double y,String s,double degrees){  BufferedImage image=getImage(s);  double xs=scaleX(x);  double ys=scaleY(y);  int ws=image.getWidth();  int hs=image.getHeight();  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + s + " is corrupt");  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),null);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);  draw();}  }
class C{  private Button createPushButton(Composite owner,String label){  return createButton(owner,label,SWT.PUSH);}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  ElemTemplateElement elem=handler.getElemTemplateElement();  if (elem instanceof ElemLiteralResult) {    if (((ElemLiteralResult)elem).getIsLiteralResultAsStylesheet()) {      handler.popStylesheet();    }  }  super.endElement(handler,uri,localName,rawName);}  }
class C{  @Override public void update(){  int i=this.pos.getX();  int j=this.pos.getY();  int k=this.pos.getZ();  ++this.ticksSinceSync;  float f;  if (!this.worldObj.isRemote && this.numPlayersUsing != 0 && (this.ticksSinceSync + i + j+ k) % 200 == 0) {    this.numPlayersUsing=0;    f=5.0F;    List list=this.worldObj.getEntitiesWithinAABB(EntityPlayer.class,new AxisAlignedBB(i - f,j - f,k - f,i + 1 + f,j + 1 + f,k + 1 + f));    Iterator iterator=list.iterator();    while (iterator.hasNext()) {      EntityPlayer entityplayer=(EntityPlayer)iterator.next();      if (entityplayer.openContainer instanceof ContainerChest) {        IInventory iinventory=((ContainerChest)entityplayer.openContainer).getLowerChestInventory();        if (iinventory == this || iinventory instanceof InventoryLargeChest && ((InventoryLargeChest)iinventory).isPartOfLargeChest(this)) {          ++this.numPlayersUsing;        }      }    }  }  this.prevLidAngle=this.lidAngle;  f=0.1F;  double d2;  if (this.numPlayersUsing > 0 && this.lidAngle == 0.0F) {    double d1=i + 0.5D;    d2=k + 0.5D;    this.worldObj.playSound(null,new BlockPos(d1,j + 0.5D,d2),SoundEvents.BLOCK_CHEST_OPEN,SoundCategory.BLOCKS,0.5F,this.worldObj.rand.nextFloat() * 0.1F + 0.9F);  }  if (this.numPlayersUsing == 0 && this.lidAngle > 0.0F || this.numPlayersUsing > 0 && this.lidAngle < 1.0F) {    float f1=this.lidAngle;    if (this.numPlayersUsing > 0) {      this.lidAngle+=f;    } else {      this.lidAngle-=f;    }    if (this.lidAngle > 1.0F) {      this.lidAngle=1.0F;    }    float f2=0.5F;    if (this.lidAngle < f2 && f1 >= f2) {      d2=i + 0.5D;      double d0=k + 0.5D;      this.worldObj.playSound(null,new BlockPos(d2,j + 0.5D,d0),SoundEvents.BLOCK_CHEST_CLOSE,SoundCategory.BLOCKS,0.5F,this.worldObj.rand.nextFloat() * 0.1F + 0.9F);    }    if (this.lidAngle < 0.0F) {      this.lidAngle=0.0F;    }  }}  }
class C{  public DynamicLayout(CharSequence base,CharSequence display,TextPaint paint,int width,Alignment align,float spacingmult,float spacingadd,boolean includepad,TextUtils.TruncateAt ellipsize,int ellipsizedWidth){  this(base,display,paint,width,align,TextDirectionHeuristics.FIRSTSTRONG_LTR,spacingmult,spacingadd,includepad,ellipsize,ellipsizedWidth);}  }
class C{  public void trainOnInstanceImpl(Instance inst){  accumulatedError=Math.abs(this.prediction(inst) - inst.classValue()) + fadingFactor * accumulatedError;  nError=1 + fadingFactor * nError;  if (this.initialisePerceptron) {    this.classifierRandom.setSeed(randomSeed);    this.initialisePerceptron=false;    this.weightAttribute=new double[inst.numAttributes()];    for (int j=0; j < inst.numAttributes(); j++) {      weightAttribute[j]=2 * this.classifierRandom.nextDouble() - 1;    }    learningRatio=originalLearningRatio;  }  this.perceptronInstancesSeen++;  this.perceptronYSeen++;  for (int j=0; j < inst.numAttributes() - 1; j++) {    perceptronattributeStatistics.addToValue(j,inst.value(j));    squaredperceptronattributeStatistics.addToValue(j,inst.value(j) * inst.value(j));  }  this.perceptronsumY+=inst.classValue();  this.squaredperceptronsumY+=inst.classValue() * inst.classValue();  if (!constantLearningRatioDecay) {    learningRatio=originalLearningRatio / (1 + perceptronInstancesSeen * learningRateDecay);  }  this.updateWeights(inst,learningRatio);}  }
class C{  public void registerElementNodes(String URI,Map<String,Class<? extends FXGNode>> elementNodes){  init();  if (elementNodesByURI == null) {    elementNodesByURI=new HashMap<String,Map<String,Class<? extends FXGNode>>>(1);    elementNodesByURI.put(URI,elementNodes);  } else {    if (elementNodesByURI.containsKey(URI)) {      Map<String,Class<? extends FXGNode>> value=elementNodesByURI.get(URI);      value.putAll(elementNodes);      elementNodesByURI.put(URI,value);    } else {      elementNodesByURI.put(URI,elementNodes);    }  }}  }
class C{  public static String quote(String s){  return String.format("\"%s\"",s != null ? s : "");}  }
class C{  public SimpleServerEndpointFactory(ConnectorFactory secureConnectorFactory){  this.secureConnectorFactory=secureConnectorFactory;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:00.371 -0500",hash_original_method="13724385C240165AD29E108B78F9E99D",hash_generated_method="22170C5214775821A6A8546F2BF34525") public boolean fullScroll(int direction){  boolean right=direction == View.FOCUS_RIGHT;  int width=getWidth();  mTempRect.addTaint(direction + width + getChildCount());  mTempRect.left=0;  mTempRect.right=width;  if (right) {    int count=getChildCount();    if (count > 0) {      View view=getChildAt(0);      mTempRect.addTaint(view.getRight());    }  }  return scrollAndFocus(direction,mTempRect.left,mTempRect.right);}  }
class C{  boolean bindElement(String ns,String wildcard,ActionSet actions){  NamespaceSpecification nss=new NamespaceSpecification(ns,wildcard);  if (nssElementMap.get(nss) != null)   return false;  for (Enumeration e=nssElementMap.keys(); e.hasMoreElements(); ) {    NamespaceSpecification nssI=(NamespaceSpecification)e.nextElement();    if (nss.compete(nssI)) {      return false;    }  }  nssElementMap.put(nss,actions);  return true;}  }
class C{  public Message(String type,double value){  if (!VALID_TYPES.contains(type)) {    throw new IllegalArgumentException(type + " is not a valid message type.\n" + "Valid message types are \"FAST\", \"MEDIUM\", and \"SLOW\".");  }  this.type=type;  this.value=value;}  }
class C{  public int stackSize(){  return stackSize;}  }
class C{  public void beforeSendingToServer(EventID eventId){}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();}  }
class C{  public Annotation(String typeName,ConstPool cp){  this(cp.addUtf8Info(Descriptor.of(typeName)),cp);}  }
class C{  protected boolean shouldUpgradeDist(){  return true;}  }
class C{  public static ScriptContext createScriptContext(Map<String,Object> context,Set<String> protectedKeys){  Assert.notNull("context",context,"protectedKeys",protectedKeys);  Map<String,Object> localContext=new HashMap<String,Object>(context);  localContext.put(WIDGET_CONTEXT_KEY,context);  localContext.put("context",context);  ScriptContext scriptContext=new SimpleScriptContext();  Bindings bindings=new ProtectedBindings(localContext,Collections.unmodifiableSet(protectedKeys));  scriptContext.setBindings(bindings,ScriptContext.ENGINE_SCOPE);  ScriptHelper helper=createScriptHelper(scriptContext);  if (helper != null) {    localContext.put(SCRIPT_HELPER_KEY,helper);  }  return scriptContext;}  }
class C{  public static void renderIconIn3D(Tessellator tess,float p_78439_1_,float p_78439_2_,float p_78439_3_,float p_78439_4_,int width,int height,float thickness){  VertexBuffer wr=tess.getBuffer();  wr.begin(GL11.GL_QUADS,DefaultVertexFormats.POSITION_TEX_NORMAL);  wr.pos(0.0D,0.0D,0.0D).tex(p_78439_1_,p_78439_4_).normal(0,0,1).endVertex();  wr.pos(1.0D,0.0D,0.0D).tex(p_78439_3_,p_78439_4_).normal(0,0,1).endVertex();  wr.pos(1.0D,1.0D,0.0D).tex(p_78439_3_,p_78439_2_).normal(0,0,1).endVertex();  wr.pos(0.0D,1.0D,0.0D).tex(p_78439_1_,p_78439_2_).normal(0,0,1).endVertex();  tess.draw();  wr.begin(GL11.GL_QUADS,DefaultVertexFormats.POSITION_TEX_NORMAL);  wr.pos(0.0D,1.0D,(0.0F - thickness)).tex(p_78439_1_,p_78439_2_).normal(0,0,-1).endVertex();  wr.pos(1.0D,1.0D,(0.0F - thickness)).tex(p_78439_3_,p_78439_2_).normal(0,0,-1).endVertex();  wr.pos(1.0D,0.0D,(0.0F - thickness)).tex(p_78439_3_,p_78439_4_).normal(0,0,-1).endVertex();  wr.pos(0.0D,0.0D,(0.0F - thickness)).tex(p_78439_1_,p_78439_4_).normal(0,0,-1).endVertex();  tess.draw();  float f5=0.5F * (p_78439_1_ - p_78439_3_) / (float)width;  float f6=0.5F * (p_78439_4_ - p_78439_2_) / (float)height;  wr.begin(GL11.GL_QUADS,DefaultVertexFormats.POSITION_TEX_NORMAL);  int k;  float f7;  float f8;  for (k=0; k < width; ++k) {    f7=(float)k / (float)width;    f8=p_78439_1_ + (p_78439_3_ - p_78439_1_) * f7 - f5;    wr.pos(f7,0.0D,(0.0F - thickness)).tex(f8,p_78439_4_).normal(-1,0,0).endVertex();    wr.pos(f7,0.0D,0.0D).tex(f8,p_78439_4_).normal(-1,0,0).endVertex();    wr.pos(f7,1.0D,0.0D).tex(f8,p_78439_2_).normal(-1,0,0).endVertex();    wr.pos(f7,1.0D,(0.0F - thickness)).tex(f8,p_78439_2_).normal(-1,0,0).endVertex();  }  tess.draw();  wr.begin(GL11.GL_QUADS,DefaultVertexFormats.POSITION_TEX_NORMAL);  float f9;  for (k=0; k < width; ++k) {    f7=(float)k / (float)width;    f8=p_78439_1_ + (p_78439_3_ - p_78439_1_) * f7 - f5;    f9=f7 + 1.0F / (float)width;    wr.pos(f9,1.0D,(0.0F - thickness)).tex(f8,p_78439_2_).normal(1,0,0).endVertex();    wr.pos(f9,1.0D,0.0D).tex(f8,p_78439_2_).normal(1,0,0).endVertex();    wr.pos(f9,0.0D,0.0D).tex(f8,p_78439_4_).normal(1,0,0).endVertex();    wr.pos(f9,0.0D,(0.0F - thickness)).tex(f8,p_78439_4_).normal(1,0,0).endVertex();  }  tess.draw();  wr.begin(GL11.GL_QUADS,DefaultVertexFormats.POSITION_TEX_NORMAL);  for (k=0; k < height; ++k) {    f7=(float)k / (float)height;    f8=p_78439_4_ + (p_78439_2_ - p_78439_4_) * f7 - f6;    f9=f7 + 1.0F / (float)height;    wr.pos(0.0D,f9,0.0D).tex(p_78439_1_,f8).normal(0,1,0).endVertex();    wr.pos(1.0D,f9,0.0D).tex(p_78439_3_,f8).normal(0,1,0).endVertex();    wr.pos(1.0D,f9,(0.0F - thickness)).tex(p_78439_3_,f8).normal(0,1,0).endVertex();    wr.pos(0.0D,f9,(0.0F - thickness)).tex(p_78439_1_,f8).normal(0,1,0).endVertex();  }  tess.draw();  wr.begin(GL11.GL_QUADS,DefaultVertexFormats.POSITION_TEX_NORMAL);  for (k=0; k < height; ++k) {    f7=(float)k / (float)height;    f8=p_78439_4_ + (p_78439_2_ - p_78439_4_) * f7 - f6;    wr.pos(1.0D,f7,0.0D).tex(p_78439_3_,f8).normal(0,-1,0).endVertex();    wr.pos(0.0D,f7,0.0D).tex(p_78439_1_,f8).normal(0,-1,0).endVertex();    wr.pos(0.0D,f7,(0.0F - thickness)).tex(p_78439_1_,f8).normal(0,-1,0).endVertex();    wr.pos(1.0D,f7,(0.0F - thickness)).tex(p_78439_3_,f8).normal(0,-1,0).endVertex();  }  tess.draw();}  }
class C{  public BevelBorder(int bevelType){  this.bevelType=bevelType;}  }
class C{  public static Iterator createShape3D(OMGrid grid,double baselineHeight,Projection projection){  TriangleStripArray gridStrip;  if (grid.getRenderType() != OMGraphic.RENDERTYPE_LATLON) {    Debug.error("OMGraphicUtil.createShape3D:  can't handle non-LATLON grids yet");    return NULL_ITERATOR;  }  boolean DEBUG=false;  if (Debug.debugging("3dgrid")) {    DEBUG=true;  }  Color fColor=grid.getFillColor();  Color lColor=grid.getLineColor();  boolean polyline=(fColor == OMColor.clear);  if (DEBUG) {    Debug.output("Polyline = " + polyline);  }  Color3f fillcolor=new Color3f(fColor);  Color3f linecolor=new Color3f(lColor);  int numRows=grid.getRows();  int numCols=grid.getColumns();  int stripCount=numRows - 1;  int numberVerticesPerStrip=numCols * 2;  int[] stripCounts=new int[stripCount];  for (int i=0; i < stripCount; i++) {    stripCounts[i]=numberVerticesPerStrip;  }  LatLonPoint anchorLL=new LatLonPoint.Double(grid.getLatitude(),grid.getLongitude());  double vRes=grid.getVerticalResolution();  double hRes=grid.getHorizontalResolution();  gridStrip=new TriangleStripArray(stripCount * numberVerticesPerStrip,TriangleStripArray.COORDINATES | TriangleStripArray.COLOR_3 | TriangleStripArray.NORMALS,stripCounts);  Point p=new Point();  int pointer=0;  GridData gridData=grid.getData();  if (!(gridData instanceof GridData.Int)) {    Debug.error("OMGrid.interpValueAt only works for integer data.");  }  int[][] data=((GridData.Int)gridData).getData();  boolean major=gridData.getMajor();  int dataPoint;  Color3f color;  SimpleColorGenerator generator=null;  OMGridGenerator tempGen=grid.getGenerator();  if (tempGen instanceof SimpleColorGenerator) {    generator=(SimpleColorGenerator)tempGen;  }  for (int j=0; j < numRows - 1; j++) {    if (DEBUG) {      Debug.output("Creating strip " + j);    }    double lat1=anchorLL.getY() + (j * vRes);    double lat2=anchorLL.getY() + ((j + 1.0) * vRes);    for (int k=0; k < numCols; k++) {      if (DEBUG) {        Debug.output("   working row " + k);      }      double lon=anchorLL.getX() + (k * hRes);      projection.forward(lat1,lon,p);      if (major) {        dataPoint=data[k][j];      } else {        dataPoint=data[j][k];      }      gridStrip.setCoordinate(pointer,new Point3d((float)p.getX(),(float)dataPoint,(float)p.getY()));      if (DEBUG) {        Debug.output("       1st coord " + p.getX() + ", "+ dataPoint+ ", "+ p.getY());      }      projection.forward(lat2,lon,p);      if (major) {        dataPoint=data[k][j + 1];      } else {        dataPoint=data[j + 1][k];      }      gridStrip.setCoordinate(pointer + 1,new Point3d((float)p.getX(),(float)dataPoint,(float)p.getY()));      if (DEBUG) {        Debug.output("       2nd coord " + p.getX() + ", "+ dataPoint+ ", "+ p.getY());      }      if (generator == null) {        if (polyline) {          color=linecolor;        } else {          color=fillcolor;        }      } else {        color=new Color3f(new Color(generator.calibratePointValue(dataPoint)));      }      gridStrip.setColor(pointer++,color);      gridStrip.setColor(pointer++,color);    }  }  Shape3D shape=new Shape3D(gridStrip);  Appearance appear=new Appearance();  PolygonAttributes polyAttrib=new PolygonAttributes();  if (polyline) {    polyAttrib.setPolygonMode(PolygonAttributes.POLYGON_LINE);  }  polyAttrib.setCullFace(PolygonAttributes.CULL_NONE);  appear.setPolygonAttributes(polyAttrib);  shape.setAppearance(appear);  HashSet set=new HashSet();  set.add(shape);  return set.iterator();}  }
class C{  public void paint(Graphics g){  setBorder(null);  super.paint(g);}  }
class C{  public ExplodeAnimation(View view){  this.view=view;  setExplodeMatrix(MATRIX_3X3);  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  @Override public final String toString(){  if (stringRep == null) {    StringBuilder buffer=new StringBuilder();    buffer.append(this.name);    buffer.append(':');    buffer.append(Integer.toString(this.defaultPort));    stringRep=buffer.toString();  }  return stringRep;}  }
class C{  private void init(){  GridLayout gridLayout=new GridLayout(2,false);  gridLayout.marginHeight=0;  gridLayout.marginWidth=0;  setLayout(gridLayout);  Composite breadcrumbComposite=new Composite(this,SWT.NONE);  breadcrumbComposite.setLayout(new GridLayout(7,false));  breadcrumbComposite.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false));  repositoryLabel=new CLabel(breadcrumbComposite,SWT.NONE);  repositoryLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false));  new Label(breadcrumbComposite,SWT.NONE).setImage(arrow);  agentLabel=new CLabel(breadcrumbComposite,SWT.NONE);  agentLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false));  new Label(breadcrumbComposite,SWT.NONE).setImage(arrow);  groupLabel=new CLabel(breadcrumbComposite,SWT.NONE);  groupLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false));  new Label(breadcrumbComposite,SWT.NONE).setImage(arrow);  viewLabel=new CLabel(breadcrumbComposite,SWT.NONE);  viewLabel.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));  ToolBar toolbar=new ToolBar(this,SWT.FLAT);  toolbar.setLayoutData(new GridData(SWT.END,SWT.CENTER,false,false));  toolBarManager=new ToolBarManager(toolbar);}  }
class C{  public TextReader(Text text){  this.text=text;  this.length=text.length();}  }
class C{  public static boolean isValidModifier(int keyCode){  return keyCode == SWT.ALT || keyCode == SWT.CONTROL || keyCode == SWT.COMMAND;}  }
class C{  public static void saveChartAsJPEG(File file,float quality,JFreeChart chart,int width,int height) throws IOException {  saveChartAsJPEG(file,quality,chart,width,height,null);}  }
class C{  public VdcNodeCheckResponse sendVdcNodeCheckRequest(VirtualDataCenter sendToVdc,Collection<VirtualDataCenter> vdcsToCheck){  List<VdcConfig> virtualDataCenters=new ArrayList<VdcConfig>();  for (  VirtualDataCenter vdc : vdcsToCheck) {    VdcConfig vdcConfig=new VdcConfig();    vdcConfig.setId(vdc.getId());    vdcConfig.setShortId(vdc.getShortId());    Site activeSite=drUtil.getActiveSite(vdc.getShortId());    if (activeSite.getHostIPv4AddressMap() != null && !activeSite.getHostIPv4AddressMap().isEmpty() && activeSite.isUsingIpv4()) {      HashMap<String,String> addressMap=new HashMap<String,String>(activeSite.getHostIPv4AddressMap());      vdcConfig.setHostIPv4AddressesMap(addressMap);    } else     if (activeSite.getHostIPv6AddressMap() != null && !activeSite.getHostIPv6AddressMap().isEmpty()) {      HashMap<String,String> addressMap=new HashMap<String,String>(activeSite.getHostIPv6AddressMap());      vdcConfig.setHostIPv6AddressesMap(addressMap);    } else {      throw new IllegalStateException("Cannot perform node reachable check on vdc " + vdc.getShortId() + " no nodes were found on VirtualDataCenter object");    }    virtualDataCenters.add(vdcConfig);  }  return sendVdcNodeCheckRequest(sendToVdc,virtualDataCenters);}  }
class C{  private void resumeVideo(){  if (mMediaPlayer != null) {    mMediaPlayer.start();  }}  }
class C{  public int binarySearchFromTo(Object key,int from,int to){  int low=from;  int high=to;  while (low <= high) {    int mid=(low + high) / 2;    Object midVal=elements[mid];    int cmp=((Comparable)midVal).compareTo(key);    if (cmp < 0)     low=mid + 1; else     if (cmp > 0)     high=mid - 1; else     return mid;  }  return -(low + 1);}  }
class C{  public void createPictScenario13_1() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-03 00:00:00"));  String supplierAdminId="Pict13_1Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict13_1SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="Pict13_1Customer";  VOOrganization customer=orgSetup.registerCustomer("Pict13_1CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.createMarketingPermission(supplierAdmin.getKey(),supplier.getOrganizationId(),example2TechService);  VOServiceDetails unitServTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT13_1_UNIT_DAY_SERVICE",TestService.EXAMPLE2,TestPriceModel.FREE,example2TechService,supplierMarketplace);  VOServiceDetails serviceUnitDetails=serviceSetup.savePriceModelForCustomer(unitServTemplate,TestPriceModel.EXAMPLE_PICT13_UNIT_DAY,customer);  VOServiceDetails freeTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT13_1_FREE",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PICT13_UNIT_HOUR,example2TechService,supplierMarketplace);  VOServiceDetails serviceFreeDetails=serviceSetup.savePriceModelForCustomer(freeTemplate,TestPriceModel.FREE,customer);  unitServTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),unitServTemplate,freeTemplate);  serviceUnitDetails=serviceSetup.activateMarketableService(serviceUnitDetails);  serviceFreeDetails=serviceSetup.activateMarketableService(serviceFreeDetails);  VORoleDefinition role=VOServiceFactory.getRole(serviceUnitDetails,"ADMIN");  serviceUnitDetails=serviceSetup.getServiceDetails(supplierAdmin.getKey(),serviceUnitDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_13_1",serviceUnitDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-03 00:00:00"));  role=VOServiceFactory.getRole(serviceUnitDetails,"USER");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.addUser(basicSetup.getSecondCustomerUser1(),role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-04 10:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(1),VOServiceFactory.getRole(serviceUnitDetails,"ADMIN"),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-10-04 10:00:00"),"MAX_FOLDER_NUMBER","5");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-04 11:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(1),VOServiceFactory.getRole(serviceUnitDetails,"USER"),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-06 00:00:00"));  subDetails=subscrSetup.revokeUser(basicSetup.getSecondCustomerUser1(),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-07 02:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-07 05:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-07 10:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  role=VOServiceFactory.getRole(serviceUnitDetails,"USER");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-08 00:00:00"));  subDetails=subscrSetup.addUser(basicSetup.getSecondCustomerUser1(),role,subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-12 00:00:00"));  VOPriceModel newSubPriceModel=VOPriceModelFactory.modifyPriceModelPeriodFee(subDetails.getPriceModel(),new BigDecimal("1.00"));  subscrSetup.savePriceModelForSubscription(supplierAdmin.getKey(),subDetails,newSubPriceModel,customer);  serviceFreeDetails=serviceSetup.getServiceDetails(supplierAdmin.getKey(),serviceFreeDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-30 00:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceFreeDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-15 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceUnitDetails);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_13_1",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_13_1",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_13_1",customer);}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public byte[] engineCanonicalizeXPathNodeSet(Set<Node> xpathNodeSet,String inclusiveNamespaces) throws CanonicalizationException {  throw new CanonicalizationException("c14n.Canonicalizer.UnsupportedOperation");}  }
class C{  protected void createMediaPlayerIfNeeded(){  if (mPlayer == null) {    mPlayer=new MediaPlayer();    mPlayer.setWakeMode(getApplicationContext(),PowerManager.PARTIAL_WAKE_LOCK);    mPlayer.setOnPreparedListener(this);    mPlayer.setOnCompletionListener(this);    mPlayer.setOnErrorListener(this);  } else {    mPlayer.reset();  }}  }
class C{  public Vector3f cross(float x,float y,float z){  return set(this.y * z - this.z * y,this.z * x - this.x * z,this.x * y - this.y * x);}  }
class C{  private void statInit(){  labelValue.setText(Msg.getMsg(Env.getCtx(),"Value"));  fieldValue.setBackground(AdempierePLAF.getInfoBackground());  fieldValue.addActionListener(this);  labelName.setText(Msg.getMsg(Env.getCtx(),"Name"));  fieldName.setBackground(AdempierePLAF.getInfoBackground());  fieldName.addActionListener(this);  labelUPC.setText(Msg.translate(Env.getCtx(),"UPC"));  fieldUPC.setBackground(AdempierePLAF.getInfoBackground());  fieldUPC.addActionListener(this);  labelSKU.setText(Msg.translate(Env.getCtx(),"SKU"));  fieldSKU.setBackground(AdempierePLAF.getInfoBackground());  fieldSKU.addActionListener(this);  labelWarehouse.setText(Msg.getMsg(Env.getCtx(),"Warehouse"));  fWarehouse_ID=new VLookup("M_Warehouse_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MWarehouse.Table_Name,MWarehouse.COLUMNNAME_M_Warehouse_ID),DisplayType.TableDir));  fWarehouse_ID.setBackground(AdempierePLAF.getInfoBackground());  fWarehouse_ID.addActionListener(this);  checkOnlyStock.setText(Msg.getMsg(Env.getCtx(),"OnlyStock"));  checkOnlyStock.setName("OnlyStock");  checkOnlyStock.setToolTipText(Msg.getMsg(Env.getCtx(),"OnlyStockTip"));  checkOnlyStock.setSelected(false);  checkOnlyStock.addActionListener(this);  checkShowDetail.setText(Msg.getMsg(Env.getCtx(),"ShowDetail"));  checkShowDetail.setName("ShowDetail");  checkShowDetail.setToolTipText(Msg.getMsg(Env.getCtx(),"ShowAttributeDetails"));  checkShowDetail.setSelected(false);  checkShowDetail.setEnabled(false);  checkShowDetail.addActionListener(this);  checkAND.setText(Msg.getMsg(Env.getCtx(),"SearchAND"));  checkAND.setName("SearchAND");  checkAND.setToolTipText(Msg.getMsg(Env.getCtx(),"SearchANDInfo"));  checkAND.setSelected(true);  checkAND.addActionListener(this);  labelPriceList.setText(Msg.getMsg(Env.getCtx(),"PriceListVersion"));  fPriceList_ID=new VLookup("M_PriceList_Version_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MPriceListVersion.Table_Name,MPriceListVersion.COLUMNNAME_M_PriceList_Version_ID),DisplayType.TableDir));  fPriceList_ID.setBackground(AdempierePLAF.getInfoBackground());  fPriceList_ID.addActionListener(this);  labelProductCategory.setText(Msg.translate(Env.getCtx(),"M_Product_Category_ID"));  fProductCategory_ID=new VLookup("M_Product_Category_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MProductCategory.Table_Name,MProductCategory.COLUMNNAME_M_Product_Category_ID),DisplayType.TableDir));  fProductCategory_ID.setBackground(AdempierePLAF.getInfoBackground());  fProductCategory_ID.addActionListener(this);  labelAS.setText(Msg.translate(Env.getCtx(),"M_AttributeSet_ID"));  fAS_ID=new VLookup("M_AttributeSet_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MAttributeSet.Table_Name,MAttributeSet.COLUMNNAME_M_AttributeSet_ID),DisplayType.TableDir));  fAS_ID.setBackground(AdempierePLAF.getInfoBackground());  fAS_ID.addActionListener(this);  labelASI.setText(Msg.translate(Env.getCtx(),"M_AttributeSetInstance_ID"));  MPAttributeLookup mpaLookup=new MPAttributeLookup(Env.getCtx(),p_WindowNo);  fASI_ID=new VPAttribute((GridTab)null,false,false,true,p_WindowNo,mpaLookup,true);  fASI_ID.setBackground(AdempierePLAF.getInfoBackground());  fASI_ID.addActionListener(this);  labelVendor.setText(Msg.translate(Env.getCtx(),"Vendor"));  fVendor_ID=new VLookup("C_BPartner_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MProductPO.Table_Name,MProductPO.COLUMNNAME_C_BPartner_ID),DisplayType.Search));  fVendor_ID.setBackground(AdempierePLAF.getInfoBackground());  fVendor_ID.addActionListener(this);  fVendor_ID.setIsSOTrx(true,false);  p_criteriaGrid.add(labelValue,new ALayoutConstraint(0,0));  p_criteriaGrid.add(fieldValue,null);  p_criteriaGrid.add(labelWarehouse,null);  p_criteriaGrid.add(fWarehouse_ID,null);  p_criteriaGrid.add(checkOnlyStock,new ALayoutConstraint(0,5));  p_criteriaGrid.add(labelName,new ALayoutConstraint(1,0));  p_criteriaGrid.add(fieldName,null);  p_criteriaGrid.add(labelPriceList,null);  p_criteriaGrid.add(fPriceList_ID,null);  p_criteriaGrid.add(labelAS,null);  p_criteriaGrid.add(fAS_ID,null);  p_criteriaGrid.add(labelUPC,new ALayoutConstraint(2,0));  p_criteriaGrid.add(fieldUPC,null);  p_criteriaGrid.add(labelProductCategory,null);  p_criteriaGrid.add(fProductCategory_ID,null);  p_criteriaGrid.add(labelASI,null);  p_criteriaGrid.add(fASI_ID,null);  p_criteriaGrid.add(labelSKU,new ALayoutConstraint(3,0));  p_criteriaGrid.add(fieldSKU,null);  p_criteriaGrid.add(labelVendor,null);  p_criteriaGrid.add(fVendor_ID,null);  p_criteriaGrid.add(checkAND,new ALayoutConstraint(3,5));  m_PAttributeButton=ConfirmPanel.createPAttributeButton(true);  confirmPanel.addButton(m_PAttributeButton);  m_PAttributeButton.addActionListener(this);  m_PAttributeButton.setEnabled(false);  fieldDescription.setBackground(AdempierePLAF.getInfoBackground());  fieldDescription.setEditable(false);  fieldDescription.setPreferredSize(new Dimension(INFO_WIDTH - 100,100));  fieldPAttributes.setBackground(AdempierePLAF.getInfoBackground());  fieldPAttributes.setEditable(false);  fieldPAttributes.setPreferredSize(new Dimension(INFO_WIDTH - 100,100));  ColumnInfo[] s_layoutWarehouse=new ColumnInfo[]{new ColumnInfo(" ","M_Warehouse_ID",IDColumn.class),new ColumnInfo(Msg.translate(Env.getCtx(),"WarehouseName"),"WarehouseName",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"QtyAvailable"),"sum(QtyAvailable)",Double.class,true,true,null),new ColumnInfo(Msg.translate(Env.getCtx(),"QtyOnHand"),"sum(QtyOnHand)",Double.class),new ColumnInfo(Msg.translate(Env.getCtx(),"QtyReserved"),"sum(QtyReserved)",Double.class),new ColumnInfo(Msg.translate(Env.getCtx(),"QtyOrdered"),"sum(QtyOrdered)",Double.class)};  String s_sqlFrom=" M_PRODUCT_STOCK_V ";  String s_sqlWhere="(QtyOnHand <> 0 OR QtyAvailable <> 0 OR QtyReserved <> 0 OR QtyOrdered <> 0) AND M_Product_ID = ?";  m_sqlWarehouse=warehouseTbl.prepareTable(s_layoutWarehouse,s_sqlFrom,s_sqlWhere,false,"M_PRODUCT_STOCK_V");  m_sqlWarehouse+=" Group By M_Warehouse_ID, WarehouseName ";  m_sqlWarehouse+=" Order By sum(QtyOnHand) DESC, WarehouseName ";  warehouseTbl.setRowSelectionAllowed(true);  warehouseTbl.setMultiSelection(false);  warehouseTbl.addMouseListener(this);  warehouseTbl.setShowTotals(true);  warehouseTbl.autoSize();  ColumnInfo[] s_layoutSubstitute=new ColumnInfo[]{new ColumnInfo(Msg.translate(Env.getCtx(),"Warehouse"),"orgname",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Description"),"description",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Value"),"value",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Name"),"Name",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"QtyAvailable"),"QtyAvailable",Double.class,true,true,null),new ColumnInfo(Msg.translate(Env.getCtx(),"QtyOnHand"),"QtyOnHand",Double.class),new ColumnInfo(Msg.translate(Env.getCtx(),"QtyReserved"),"QtyReserved",Double.class),new ColumnInfo(Msg.translate(Env.getCtx(),"PriceStd"),"PriceStd",Double.class)};  s_sqlFrom="M_PRODUCT_SUBSTITUTERELATED_V";  s_sqlWhere="M_Product_ID = ? AND M_PriceList_Version_ID = ? and RowType = 'S'";  m_sqlSubstitute=substituteTbl.prepareTable(s_layoutSubstitute,s_sqlFrom,s_sqlWhere,false,"M_PRODUCT_SUBSTITUTERELATED_V");  substituteTbl.setRowSelectionAllowed(false);  substituteTbl.setMultiSelection(false);  substituteTbl.addMouseListener(this);  substituteTbl.setShowTotals(false);  substituteTbl.autoSize();  ColumnInfo[] s_layoutRelated=new ColumnInfo[]{new ColumnInfo(Msg.translate(Env.getCtx(),"Warehouse"),"orgname",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Description"),"description",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Value"),"value",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Name"),"Name",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"QtyAvailable"),"QtyAvailable",Double.class,true,true,null),new ColumnInfo(Msg.translate(Env.getCtx(),"QtyOnHand"),"QtyOnHand",Double.class),new ColumnInfo(Msg.translate(Env.getCtx(),"QtyReserved"),"QtyReserved",Double.class),new ColumnInfo(Msg.translate(Env.getCtx(),"PriceStd"),"PriceStd",Double.class)};  s_sqlFrom="M_PRODUCT_SUBSTITUTERELATED_V";  s_sqlWhere="M_Product_ID = ? AND M_PriceList_Version_ID = ? and RowType = 'R'";  m_sqlRelated=relatedTbl.prepareTable(s_layoutRelated,s_sqlFrom,s_sqlWhere,false,"M_PRODUCT_SUBSTITUTERELATED_V");  relatedTbl.setRowSelectionAllowed(false);  relatedTbl.setMultiSelection(false);  relatedTbl.addMouseListener(this);  relatedTbl.setShowTotals(false);  relatedTbl.autoSize();  initAtpTab();  m_tableAtp.setRowSelectionAllowed(false);  m_tableAtp.setMultiSelection(false);  ColumnInfo[] s_layoutVendor=new ColumnInfo[]{new ColumnInfo(Msg.translate(Env.getCtx(),"Vendor"),"(SELECT bp.Name FROM C_BPartner bp WHERE bp.C_BPartner_ID = M_PRODUCT_PO.C_BPartner_ID)",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"IsCurrentVendor"),"IsCurrentVendor",Boolean.class),new ColumnInfo(Msg.translate(Env.getCtx(),"C_UOM_ID"),"(SELECT Name FROM C_UOM WHERE C_UOM_ID = M_PRODUCT_PO.C_UOM_ID)",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"C_Currency_ID"),"(SELECT iso_code FROM C_Currency WHERE C_Currency_ID = M_PRODUCT_PO.C_Currency_ID)",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"PriceList"),"PriceList",Double.class),new ColumnInfo(Msg.translate(Env.getCtx(),"PricePO"),"PricePO",Double.class),new ColumnInfo(Msg.translate(Env.getCtx(),"VendorProductNo"),"VendorProductNo",String.class),new ColumnInfo(Msg.translate(Env.getCtx(),"Order_Min"),"Order_Min",Double.class),new ColumnInfo(Msg.translate(Env.getCtx(),"DeliveryTime_Promised"),"DeliveryTime_Promised",Double.class),new ColumnInfo(Msg.translate(Env.getCtx(),"DeliveryTime_Actual"),"DeliveryTime_Actual",Double.class)};  s_sqlFrom="M_PRODUCT_PO";  s_sqlWhere="M_Product_ID = ?";  m_sqlVendor=vendorTbl.prepareTable(s_layoutVendor,s_sqlFrom,s_sqlWhere,false,"M_PRODUCT_PO");  vendorTbl.setRowSelectionAllowed(false);  vendorTbl.setMultiSelection(false);  vendorTbl.addMouseListener(this);  vendorTbl.setShowTotals(false);  vendorTbl.autoSize();  jTab.addTab(Msg.translate(Env.getCtx(),"Warehouse"),new JScrollPane(warehouseTbl));  jTab.setPreferredSize(new Dimension(INFO_WIDTH,SCREEN_HEIGHT > 600 ? 250 : 105));  jTab.addTab(Msg.translate(Env.getCtx(),"Description"),new JScrollPane(fieldDescription));  jTab.addTab(Msg.translate(Env.getCtx(),"ProductAttribute"),new JScrollPane(fieldPAttributes));  jTab.addTab(Msg.translate(Env.getCtx(),"Substitute_ID"),new JScrollPane(substituteTbl));  jTab.addTab(Msg.translate(Env.getCtx(),"RelatedProduct_ID"),new JScrollPane(relatedTbl));  jTab.addTab(Msg.getMsg(Env.getCtx(),"ATP"),new JScrollPane(m_tableAtp));  jTab.addTab(Msg.translate(Env.getCtx(),"Vendor"),new JScrollPane(vendorTbl));  jTab.addChangeListener(this);  tablePanel.setPreferredSize(new Dimension(INFO_WIDTH,SCREEN_HEIGHT > 600 ? 255 : 110));  tablePanel.setLayout(new BorderLayout());  tablePanel.add(jTab,BorderLayout.CENTER);  p_detailTaskPane.setTitle(Msg.translate(Env.getCtx(),"WarehouseStock"));  p_detailTaskPane.add(checkShowDetail,BorderLayout.NORTH);  p_detailTaskPane.add(tablePanel,BorderLayout.CENTER);  p_detailTaskPane.setVisible(true);}  }
class C{  @Override public Set<Map.Entry<K,List<V>>> entrySet(){  return new EntrySet<>(this);}  }
class C{  public boolean isOrderLine(int C_OrderLine_ID){  if (m_lines == null)   getLines();  for (int i=0; i < m_lines.length; i++)   if (m_lines[i].getC_OrderLine_ID() == C_OrderLine_ID)   return true;  return false;}  }
class C{  public boolean isHasMonths(){  return hasMonths;}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof OptionalAttribute))   return false;  return (obj == this || Arrays.equals(((OptionalAttribute)obj).attributeValue,attributeValue));}  }
class C{  public void testSeedConstructor(){  for (long seed=2; seed < MAX_LONG_BOUND; seed+=15485863) {    SplittableRandom sr1=new SplittableRandom(seed);    SplittableRandom sr2=new SplittableRandom(seed);    for (int i=0; i < REPS; ++i)     assertEquals(sr1.nextLong(),sr2.nextLong());  }}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public static String stringDefaultValue(String bytes){  return new String(bytes.getBytes(ISO_8859_1),InternalNano.UTF_8);}  }
class C{  public void addAll(AccessibleState[] states){  if (states.length != 0) {    if (this.states == null) {      this.states=new Vector(states.length);    }    for (int i=0; i < states.length; i++) {      if (!this.states.contains(states[i])) {        this.states.addElement(states[i]);      }    }  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public void recordCompileTime(CompiledMethod cm,double expectedCompilationTime){  if (log != null && Controller.options.LOGGING_LEVEL >= 2) {    double compTime=cm.getCompilationTime();    printlnToLogWithTimePrefix("Compiled " + cm.getMethod() + " with "+ cm.getCompilerName()+ " in "+ compTime+ " ms"+ ", model estimated: "+ expectedCompilationTime+ " ms"+ ", rate: "+ (((NormalMethod)cm.getMethod()).getBytecodeLength() / compTime));  }}  }
class C{  public void updateSensors(){  if (sensorsEnabled) {    for (    Sensor sensor : sensors) {      sensor.update();    }  }}  }
class C{  public GeneralizedSemPm(Graph graph){  this(new SemGraph(graph));}  }
class C{  public static final Geo[] approximateArc(Geo pc,Geo p0,Geo p1,double err){  double theta=angle(p0,pc,p1);  if (Double.isNaN(theta)) {    return new Geo[]{p0,p1};  }  int n=(int)(2.0 + Math.abs(theta / err));  Geo[] result=new Geo[n];  result[0]=p0;  double dtheta=theta / (n - 1);  double rho=0.0;  for (int i=1; i < n - 1; i++) {    rho+=dtheta;    result[i]=Rotation.rotate(pc,2.0 * Math.PI - rho,p0,new Geo());  }  result[n - 1]=p1;  return result;}  }
class C{  public static void makeMatrixFile(double matrix[],String outputFileName) throws IOException {  int rowSize=matrix.length;  createDirectories(outputFileName);  BufferedWriter out=new BufferedWriter(new FileWriter(outputFileName));  for (int i=0; i < rowSize; i++) {    out.write(String.valueOf(matrix[i]) + "\n");  }  out.close();}  }
class C{  public void updateFloatingActionButton(View dependency){  if (dependency != null && dependency instanceof FloatingActionButton) {    floatingActionButton=(FloatingActionButton)dependency;    if (!fabBottomMarginInitialized && dependency.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {      fabBottomMarginInitialized=true;      ViewGroup.MarginLayoutParams p=(ViewGroup.MarginLayoutParams)dependency.getLayoutParams();      fabDefaultBottomMargin=p.bottomMargin;    }  }}  }
class C{  public void stopPlotting(){  m_boundaryPanel.stopPlotting();}  }
class C{  public String toString(){  return image;}  }
class C{  public static TFSContentStore findOrCreate(final String localPath,final int revision,final String actualPath,final ServerContext serverContext) throws IOException {  TFSContentStore store=TFSContentStoreFactory.find(localPath,revision);  if (store == null) {    store=TFSContentStoreFactory.create(localPath,revision);    final Command<String> command=new DownloadCommand(serverContext,actualPath,revision,store.getTmpFile().getPath());    command.runSynchronously();  }  return store;}  }
class C{  public static final void drawPolygon(GL2 gl,Polygon p,boolean points){  RenderUtilities.drawPolygon(gl,p.getVertices(),points);}  }
class C{  public java.lang.String toString(){  return null;}  }
class C{  public static String encode(final double d){  return "d" + Long.toString(Double.doubleToLongBits(d)) + "|"+ String.valueOf(d)+ "|";}  }
class C{  public ExtendedProperty(){  super(KEY);}  }
class C{  public void testLocalsAverageCorrectly(PredictiveInfoCalculator piCalc,int k,int timeSteps) throws Exception {  piCalc.initialise(k);  RandomGenerator rg=new RandomGenerator();  double[] data=rg.generateNormalData(timeSteps,0,1);  piCalc.setObservations(data);  double pi=piCalc.computeAverageLocalOfObservations();  lastResult=pi;  double[] piLocal=piCalc.computeLocalOfPreviousObservations();  System.out.printf("Average was %.5f\n",pi);  assertEquals(pi,MatrixUtils.mean(piLocal),0.00001);}  }
class C{  public static void register(Context mContext){  GCMRegistrar.checkDevice(mContext);  GCMRegistrar.checkManifest(mContext);  GCMRegistrar.register(mContext,PROJECT_ID);}  }
class C{  public static boolean isReadable(){  return isExternalStorageReadable();}  }
class C{  public static ScriptStepContainerBuilder builder(){  return new ScriptStepContainerBuilder();}  }
class C{  public ArrayStoreException(){  super();}  }
class C{  public void testFactoryReflectionCaverphone2() throws IOException {  Map<String,String> args=new HashMap<>();  args.put(PhoneticFilterFactory.ENCODER,"Caverphone2");  PhoneticFilterFactory factory=new PhoneticFilterFactory(args);  factory.inform(new ClasspathResourceLoader(factory.getClass()));  assertTrue(factory.getEncoder() instanceof Caverphone2);  assertTrue(factory.inject);}  }
class C{  protected static String removeSpecialSpaces(String urlPart){  StringBuilder stringBuilder=new StringBuilder(urlPart);  for (int i=0; i < stringBuilder.length(); i++) {    char curr=stringBuilder.charAt(i);    if (CharUtils.isWhiteSpace(curr)) {      stringBuilder.deleteCharAt(i);    }  }  return stringBuilder.toString();}  }
class C{  void execute(final int opcode,final int arg,final ClassWriter cw,final Item item){  int t1, t2, t3, t4;switch (opcode) {case Opcodes.NOP:case Opcodes.INEG:case Opcodes.LNEG:case Opcodes.FNEG:case Opcodes.DNEG:case Opcodes.I2B:case Opcodes.I2C:case Opcodes.I2S:case Opcodes.GOTO:case Opcodes.RETURN:    break;case Opcodes.ACONST_NULL:  push(NULL);break;case Opcodes.ICONST_M1:case Opcodes.ICONST_0:case Opcodes.ICONST_1:case Opcodes.ICONST_2:case Opcodes.ICONST_3:case Opcodes.ICONST_4:case Opcodes.ICONST_5:case Opcodes.BIPUSH:case Opcodes.SIPUSH:case Opcodes.ILOAD:push(INTEGER);break;case Opcodes.LCONST_0:case Opcodes.LCONST_1:case Opcodes.LLOAD:push(LONG);push(TOP);break;case Opcodes.FCONST_0:case Opcodes.FCONST_1:case Opcodes.FCONST_2:case Opcodes.FLOAD:push(FLOAT);break;case Opcodes.DCONST_0:case Opcodes.DCONST_1:case Opcodes.DLOAD:push(DOUBLE);push(TOP);break;case Opcodes.LDC:switch (item.type) {case ClassWriter.INT:push(INTEGER);break;case ClassWriter.LONG:push(LONG);push(TOP);break;case ClassWriter.FLOAT:push(FLOAT);break;case ClassWriter.DOUBLE:push(DOUBLE);push(TOP);break;case ClassWriter.CLASS:push(OBJECT | cw.addType("java/lang/Class"));break;case ClassWriter.STR:push(OBJECT | cw.addType("java/lang/String"));break;case ClassWriter.MTYPE:push(OBJECT | cw.addType("java/lang/invoke/MethodType"));break;default :push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"));}break;case Opcodes.ALOAD:push(get(arg));break;case Opcodes.IALOAD:case Opcodes.BALOAD:case Opcodes.CALOAD:case Opcodes.SALOAD:pop(2);push(INTEGER);break;case Opcodes.LALOAD:case Opcodes.D2L:pop(2);push(LONG);push(TOP);break;case Opcodes.FALOAD:pop(2);push(FLOAT);break;case Opcodes.DALOAD:case Opcodes.L2D:pop(2);push(DOUBLE);push(TOP);break;case Opcodes.AALOAD:pop(1);t1=pop();push(ELEMENT_OF + t1);break;case Opcodes.ISTORE:case Opcodes.FSTORE:case Opcodes.ASTORE:t1=pop();set(arg,t1);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.LSTORE:case Opcodes.DSTORE:pop(1);t1=pop();set(arg,t1);set(arg + 1,TOP);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.IASTORE:case Opcodes.BASTORE:case Opcodes.CASTORE:case Opcodes.SASTORE:case Opcodes.FASTORE:case Opcodes.AASTORE:pop(3);break;case Opcodes.LASTORE:case Opcodes.DASTORE:pop(4);break;case Opcodes.POP:case Opcodes.IFEQ:case Opcodes.IFNE:case Opcodes.IFLT:case Opcodes.IFGE:case Opcodes.IFGT:case Opcodes.IFLE:case Opcodes.IRETURN:case Opcodes.FRETURN:case Opcodes.ARETURN:case Opcodes.TABLESWITCH:case Opcodes.LOOKUPSWITCH:case Opcodes.ATHROW:case Opcodes.MONITORENTER:case Opcodes.MONITOREXIT:case Opcodes.IFNULL:case Opcodes.IFNONNULL:pop(1);break;case Opcodes.POP2:case Opcodes.IF_ICMPEQ:case Opcodes.IF_ICMPNE:case Opcodes.IF_ICMPLT:case Opcodes.IF_ICMPGE:case Opcodes.IF_ICMPGT:case Opcodes.IF_ICMPLE:case Opcodes.IF_ACMPEQ:case Opcodes.IF_ACMPNE:case Opcodes.LRETURN:case Opcodes.DRETURN:pop(2);break;case Opcodes.DUP:t1=pop();push(t1);push(t1);break;case Opcodes.DUP_X1:t1=pop();t2=pop();push(t1);push(t2);push(t1);break;case Opcodes.DUP_X2:t1=pop();t2=pop();t3=pop();push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2:t1=pop();t2=pop();push(t2);push(t1);push(t2);push(t1);break;case Opcodes.DUP2_X1:t1=pop();t2=pop();t3=pop();push(t2);push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2_X2:t1=pop();t2=pop();t3=pop();t4=pop();push(t2);push(t1);push(t4);push(t3);push(t2);push(t1);break;case Opcodes.SWAP:t1=pop();t2=pop();push(t1);push(t2);break;case Opcodes.IADD:case Opcodes.ISUB:case Opcodes.IMUL:case Opcodes.IDIV:case Opcodes.IREM:case Opcodes.IAND:case Opcodes.IOR:case Opcodes.IXOR:case Opcodes.ISHL:case Opcodes.ISHR:case Opcodes.IUSHR:case Opcodes.L2I:case Opcodes.D2I:case Opcodes.FCMPL:case Opcodes.FCMPG:pop(2);push(INTEGER);break;case Opcodes.LADD:case Opcodes.LSUB:case Opcodes.LMUL:case Opcodes.LDIV:case Opcodes.LREM:case Opcodes.LAND:case Opcodes.LOR:case Opcodes.LXOR:pop(4);push(LONG);push(TOP);break;case Opcodes.FADD:case Opcodes.FSUB:case Opcodes.FMUL:case Opcodes.FDIV:case Opcodes.FREM:case Opcodes.L2F:case Opcodes.D2F:pop(2);push(FLOAT);break;case Opcodes.DADD:case Opcodes.DSUB:case Opcodes.DMUL:case Opcodes.DDIV:case Opcodes.DREM:pop(4);push(DOUBLE);push(TOP);break;case Opcodes.LSHL:case Opcodes.LSHR:case Opcodes.LUSHR:pop(3);push(LONG);push(TOP);break;case Opcodes.IINC:set(arg,INTEGER);break;case Opcodes.I2L:case Opcodes.F2L:pop(1);push(LONG);push(TOP);break;case Opcodes.I2F:pop(1);push(FLOAT);break;case Opcodes.I2D:case Opcodes.F2D:pop(1);push(DOUBLE);push(TOP);break;case Opcodes.F2I:case Opcodes.ARRAYLENGTH:case Opcodes.INSTANCEOF:pop(1);push(INTEGER);break;case Opcodes.LCMP:case Opcodes.DCMPL:case Opcodes.DCMPG:pop(4);push(INTEGER);break;case Opcodes.JSR:case Opcodes.RET:throw new RuntimeException("JSR/RET are not supported with computeFrames option");case Opcodes.GETSTATIC:push(cw,item.strVal3);break;case Opcodes.PUTSTATIC:pop(item.strVal3);break;case Opcodes.GETFIELD:pop(1);push(cw,item.strVal3);break;case Opcodes.PUTFIELD:pop(item.strVal3);pop();break;case Opcodes.INVOKEVIRTUAL:case Opcodes.INVOKESPECIAL:case Opcodes.INVOKESTATIC:case Opcodes.INVOKEINTERFACE:pop(item.strVal3);if (opcode != Opcodes.INVOKESTATIC) {t1=pop();if (opcode == Opcodes.INVOKESPECIAL && item.strVal2.charAt(0) == '<') {init(t1);}}push(cw,item.strVal3);break;case Opcodes.INVOKEDYNAMIC:pop(item.strVal2);push(cw,item.strVal2);break;case Opcodes.NEW:push(UNINITIALIZED | cw.addUninitializedType(item.strVal1,arg));break;case Opcodes.NEWARRAY:pop();switch (arg) {case Opcodes.T_BOOLEAN:push(ARRAY_OF | BOOLEAN);break;case Opcodes.T_CHAR:push(ARRAY_OF | CHAR);break;case Opcodes.T_BYTE:push(ARRAY_OF | BYTE);break;case Opcodes.T_SHORT:push(ARRAY_OF | SHORT);break;case Opcodes.T_INT:push(ARRAY_OF | INTEGER);break;case Opcodes.T_FLOAT:push(ARRAY_OF | FLOAT);break;case Opcodes.T_DOUBLE:push(ARRAY_OF | DOUBLE);break;default :push(ARRAY_OF | LONG);break;}break;case Opcodes.ANEWARRAY:String s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,'[' + s);} else {push(ARRAY_OF | OBJECT | cw.addType(s));}break;case Opcodes.CHECKCAST:s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,s);} else {push(OBJECT | cw.addType(s));}break;default :pop(arg);push(cw,item.strVal1);break;}}  }
class C{  public Americanize(int flags){  if ((flags & DONT_CAPITALIZE_TIMEX) != 0) {    capitalizeTimex=false;  }}  }
class C{  public TDoubleArrayList(){  this(DEFAULT_CAPACITY);}  }
class C{  private void xShift(int n){  Edge e;  Node r=m_groups[n].m_p;  double h=m_groups[n].m_size / 2;  double c=m_groups[n].m_p.getCenter();  double m=c - h;  m_groups[n].m_left=m;  m_groups[n].m_right=c + h;  for (int noa=0; (e=r.getChild(noa)) != null; noa++) {    if (e.getTarget().getParent(0) == e) {      e.getTarget().adjustCenter(m);    }  }}  }
class C{  @Override public void onReceive(Context context,Intent intent){  setPendingUnreadMessagesDisplay();}  }
class C{  public void dispose(){  if (packageItemProvider != null)   packageItemProvider.dispose();  if (typeItemProvider != null)   typeItemProvider.dispose();  if (operationItemProvider != null)   operationItemProvider.dispose();  if (propertyItemProvider != null)   propertyItemProvider.dispose();  if (parameterItemProvider != null)   parameterItemProvider.dispose();  if (typeSpecifierItemProvider != null)   typeSpecifierItemProvider.dispose();  if (eventItemProvider != null)   eventItemProvider.dispose();  if (enumerationTypeItemProvider != null)   enumerationTypeItemProvider.dispose();  if (primitiveTypeItemProvider != null)   primitiveTypeItemProvider.dispose();  if (complexTypeItemProvider != null)   complexTypeItemProvider.dispose();  if (enumeratorItemProvider != null)   enumeratorItemProvider.dispose();  if (typeConstraintItemProvider != null)   typeConstraintItemProvider.dispose();  if (typeParameterItemProvider != null)   typeParameterItemProvider.dispose();  if (parameterizedTypeItemProvider != null)   parameterizedTypeItemProvider.dispose();  if (packageMemberItemProvider != null)   packageMemberItemProvider.dispose();  if (rangeConstraintItemProvider != null)   rangeConstraintItemProvider.dispose();  if (domainItemProvider != null)   domainItemProvider.dispose();  if (typeAliasItemProvider != null)   typeAliasItemProvider.dispose();  if (annotationItemProvider != null)   annotationItemProvider.dispose();  if (annotatableElementItemProvider != null)   annotatableElementItemProvider.dispose();  if (arrayTypeSpecifierItemProvider != null)   arrayTypeSpecifierItemProvider.dispose();}  }
class C{  private boolean hasExtension(final File theFile,final String extension){  return extension.equals(getExtension(theFile));}  }
class C{  public int numTrees(int n){  if (n == 0 || n == 1 || n == 2)   return n;  int res=2;  for (int i=3; i <= n; i++)   res=res * 2 * (2 * i - 1) / (i + 1);  return res;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  @Override @TargetApi(21) public void onReceivedClientCertRequest(WebView view,ClientCertRequest request){  PluginManager pluginManager=this.appView.pluginManager;  if (pluginManager != null && pluginManager.onReceivedClientCertRequest(this.appView,new CordovaClientCertRequest(request))) {    this.appView.loadUrlTimeout++;    return;  }  super.onReceivedClientCertRequest(view,request);}  }
class C{  public BackgroundImagePanel(URL imageUrl){  setBackgroundImage(imageUrl);}  }
class C{  public void processingInstruction(String arg0,String arg1) throws SAXException {  if (m_tracer != null)   super.fireEscapingEvent(arg0,arg1);}  }
class C{  @Override public int appNotResponding(String processName,int pid,String processStats) throws RemoteException {  Log.i(TAG,String.format("Application %s (pid %s) is not responding: %s",processName,pid,processStats));  return 1;}  }
class C{  public boolean drag(MotionEvent downEvent,MotionEvent moveEvent,float distanceX,float distanceY){  if (this.isDraggingArmed && this.selectedObject != null) {    if (this.selectedObject instanceof Placemark) {      this.isDragging=true;      Position position=((Placemark)this.selectedObject).getPosition();      double altitude=position.altitude;      if (getWorldWindow().geographicToScreenPoint(position.latitude,position.longitude,0,this.dragRefPt)) {        if (screenPointToGroundPosition(this.dragRefPt.x - distanceX,this.dragRefPt.y - distanceY,position)) {          position.altitude=altitude;          getWorldWindow().requestRedraw();          return true;        }      }      this.isDraggingArmed=false;      return true;    }  }  return false;}  }
class C{  @Override public void pause(boolean toPause){  paused=toPause;}  }
class C{  public User(){  if (instance == null) {    speedPredictor=new SpeedPredictor();  } else {    speedPredictor=new SpeedPredictor(instance.speedPredictor);  }  instance=this;}  }
class C{  private void dump(XSAttributeDecl decl,String additionalAtts){  XSSimpleType type=decl.getType();  String str=MessageFormat.format("Attribute \"{0}\"{1}{2}{3}{4}",new Object[]{decl.getName(),additionalAtts,type.isLocal() ? "" : MessageFormat.format(" type=\"'{'{0}'}'{1}\"",new Object[]{type.getTargetNamespace(),type.getName()}),decl.getFixedValue() == null ? "" : " fixed=\"" + decl.getFixedValue() + "\"",decl.getDefaultValue() == null ? "" : " default=\"" + decl.getDefaultValue() + "\""});  SchemaTreeNode newNode=new SchemaTreeNode(str,decl.getLocator());  this.currNode.add(newNode);  this.currNode=newNode;  if (type.isLocal()) {    simpleType(type);  }  this.currNode=(SchemaTreeNode)this.currNode.getParent();}  }
class C{  public synchronized void markTaskEnd(TaskStats stats,int count){  int numParallelTasks=nextTaskRunNum - 1 - stats.getTaskRunNum();  stats.markEnd(numParallelTasks,count);}  }
class C{  private void reachablePathFind(Node a,Node b,Node c,LinkedList<Node> reachable){  Map<Node,Node> next=new HashMap<>();  next.put(a,b);  next.put(b,c);  Set<Node> cParents=new HashSet<>(graph.getParents(c));  Set<Node> visited=new HashSet<>();  visited.add(b);  visited.add(c);  while (reachable.size() > 0) {    Node x=reachable.removeFirst();    visited.add(x);    List<Node> pathExtensions=graph.getNodesInTo(x,Endpoint.ARROW);    pathExtensions.removeAll(visited);    for (    Node d : pathExtensions) {      if (!graph.isAdjacentTo(d,c)) {        if (RFCI_Used) {          next.put(d,x);          doDdpOrientation_RFCI(d,a,b,c,next);        } else {          doDdpOrientation(d,a,b,c);        }        return;      } else       if (cParents.contains(d)) {        if (graph.getEndpoint(x,d) == Endpoint.ARROW) {          reachable.add(d);          if (next.get(d) == null) {            next.put(d,x);          }        }      }    }  }}  }
class C{  private void sortMatsimRoutesbyNumberOfStops(){  try {    possibleMatsimRoutes=scenario.getTransitSchedule().getTransitLines().get(transitLineId).getRoutes();  } catch (  NullPointerException ne) {    System.out.println("line " + transitLineId.toString() + " does not exist in transit schedule.");    return;  }  HashMap<Id,Integer> unsortedRouteSizes=new HashMap<>();  for (  Id transitRouteId : possibleMatsimRoutes.keySet()) {    unsortedRouteSizes.put(transitRouteId,possibleMatsimRoutes.get(transitRouteId).getStops().size());  }  this.possibleMatsimRoutesSortedBynumberOfStops=new TreeSet<>(new ValueComparator(unsortedRouteSizes));  this.possibleMatsimRoutesSortedBynumberOfStops.addAll(unsortedRouteSizes.keySet());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String toString(){  int mag=magnitude(hi);  if (mag >= -3 && mag <= 20)   return toStandardNotation();  return toSciNotation();}  }
class C{  public boolean hasUserDefinedFields(){  return hasRepeatingExtension(UserDefinedField.class);}  }
class C{  public void prepareJvmLauncher(JvmLauncher java){  java.addClasspathEntries(new File(getHome(),"lib").listFiles());  java.addJvmArguments("-javaagent:" + new File(getHome(),"lib/agent/transformer.jar").getAbsolutePath());  File javaLib=new File(getJavaHome(),"lib");  java.setSystemProperty("org.apache.geronimo.home.dir",getHome());  java.setSystemProperty("org.apache.geronimo.server.dir",getConfiguration().getHome());  java.setSystemProperty("karaf.home",getHome());  java.setSystemProperty("karaf.base",getConfiguration().getHome());  java.setSystemProperty("java.endorsed.dirs",new File(getHome(),"lib/endorsed").getAbsolutePath().replace(File.separatorChar,'/') + File.pathSeparatorChar + new File(javaLib,"endorsed").getAbsolutePath().replace(File.separatorChar,'/'));  java.setSystemProperty("java.io.tmpdir",new File(getConfiguration().getHome(),"/var/temp").getAbsolutePath().replace(File.separatorChar,'/'));  java.setSystemProperty("java.util.logging.config.file",new File(getConfiguration().getHome(),"etc/java.util.logging.properties").getAbsolutePath().replace(File.separatorChar,'/'));  java.setSystemProperty("org.apache.xbean.osgi.bundle.util.BundleResourceHelper.searchWiredBundles","false");  java.setSystemProperty("karaf.startLocalConsole","false");  java.setSystemProperty("karaf.startRemoteShell","false");}  }
class C{  public static byte[] generateSalt() throws GeneralSecurityException {  return randomBytes(PBE_SALT_LENGTH_BITS);}  }
class C{  public <AnnotationType extends Annotation>void register(FieldBinder<AnnotationType> fieldBinder){  Set<AnnotatedField<AnnotationType>> annotatedFields=AnnotatedFields.get(fieldBinder.getAnnotationClass(),annotatedType);  if (!annotatedFields.isEmpty()) {    objectBinders.add(new AnnotatedFieldBinder<>(fieldBinder,annotatedFields));  }}  }
class C{  public static Border createDoubleBorder(int thickness){  return createCSSBorder(TYPE_DOUBLE,thickness);}  }
class C{  @Override public void run(){  try {    if (algorithm == null) {      algorithm=(SortAlgorithm)Class.forName(algName).newInstance();      algorithm.setParent(this);    }    algorithm.init();    algorithm.sort(arr);  } catch (  Exception e) {  }}  }
class C{  protected <T extends DataObject>String checkForDelete(T object){  return checkForDelete(object,null);}  }
class C{  public void addBack(Object theEvent){  DualWorkQueue queue=threadQueue.get();  queue.getBackQueue().addLast(theEvent);}  }
class C{  protected void contributeTokenRequestParameters(final QueryString bodyParameters){}  }
class C{  private void recordThreadInfo(Stack stack,ThreadDetails info){  CPUStats tally=usageStatistics.get(stack);  if (tally == null) {    tally=new CPUStats();    usageStatistics.put(stack,tally);  }  tally.add(info);}  }
class C{  public EncryptedKeyElement(Element encKeyElement){  List<Element> refKeyList=null;  List<Element> dataReflist;  this.m_EncryptedElement=encKeyElement;  this.m_ReferenceElementList=new ArrayList();  initEncryptionElement(encKeyElement);  refKeyList=DomUtilities.findChildren(encKeyElement,"ReferenceList",URI_NS_ENC);  if (1 == refKeyList.size()) {    dataReflist=DomUtilities.findChildren(refKeyList.get(0),"DataReference",URI_NS_ENC);    for (int i=0; dataReflist.size() > i; i++) {      m_ReferenceElementList.add(new DataReferenceElement(dataReflist.get(i),i));    }    dataReflist=DomUtilities.findChildren(refKeyList.get(0),"KeyReference",URI_NS_ENC);    for (    Element dataRefEle : dataReflist) {      m_ReferenceElementList.add(new KeyReferenceElement(dataRefEle));    }  }}  }
class C{  @Override public Iterator<E> iterator(){  return this;}  }
class C{  public Header(String[] newCards){  for (  String newCard : newCards) {    this.cards.add(HeaderCard.create(newCard));  }}  }
class C{  public static String identifyLineDelimiter(String fileContent){  if (fileContent.matches("(?s).*(\\r\\n).*")) {    return "\r\n";  } else   if (fileContent.matches("(?s).*(\\n).*")) {    return "\n";  } else   if (fileContent.matches("(?s).*(\\r).*")) {    return "\r";  } else {    return "\n";  }}  }
class C{  private void completeNode(){  if (nodeBuilder == null) {    return;  }  nodeBuilder.setOperation(getOperationName());  nodeBuilder.setTimestamp(TimeUtil.toMicros(getStart()));  nodeBuilder.setDuration(TimeUnit.NANOSECONDS.toMicros(getDuration().toNanos()));  traceContext.getNodeProcessors().forEach(null);  traceContext.endProcessingNode();  nodeBuilder=null;}  }
class C{  public PolyphaseFIRDecimatingFilter_RB(float[] coefficients,int decimationRatio,float gain){  mDecimationRatio=decimationRatio;  mGain=gain;  createFilterStages(coefficients,mDecimationRatio);  mFilterStagePointer=mFilterStages.size() - 1;}  }
class C{  public GreaterEqualConstraint(int constraintValue){  super(Integer.valueOf(constraintValue));}  }
class C{  private static void convert(AScene scene,InputStream in,OutputStream out) throws IOException, DefException, ParseException {  IndexUnit iu=JavaParser.parse(in);  extractScene(iu,scene);  try (Writer w=new BufferedWriter(new OutputStreamWriter(out))){    IndexFileWriter.write(scene,w);  } }  }
class C{  public AccountHeaderBuilder withHeightRes(@DimenRes int heightRes){  this.mHeight=DimenHolder.fromResource(heightRes);  return this;}  }
class C{  public Properties save(){  try {    try (OutputStream out=FileUtils.newOutputStream(fileName,false)){      properties.store(out,MAGIC);    }     lastWrite=FileUtils.lastModified(fileName);    if (trace.isDebugEnabled()) {      trace.debug("save " + properties);    }    return properties;  } catch (  IOException e) {    throw getExceptionFatal("Could not save properties " + fileName,e);  }}  }
class C{  private void buildSectionTitle(String title,MarkupDocBuilder docBuilder){  if (config.getPathsGroupedBy() == GroupBy.AS_IS) {    docBuilder.sectionTitleLevel3(title);  } else {    docBuilder.sectionTitleLevel4(title);  }}  }
class C{  public boolean removeWifiConfigurationBySsid(String ssid){  List<WifiConfiguration> configuredNetworks=wifiManager.getConfiguredNetworks();  boolean isRemoved=false;  for (  WifiConfiguration configuration : configuredNetworks) {    if (configuration.SSID.equals(ssid)) {      wifiManager.removeNetwork(configuration.networkId);      wifiManager.saveConfiguration();      isRemoved=true;      break;    }  }  return isRemoved;}  }
class C{  public void asciiToChar() throws IOException {  writeCode(ASCII_TO_CHAR);}  }
class C{  public BERoundBorder(Color color,int thickness){  super(color,thickness);}  }
class C{  @Override @SuppressWarnings({"unchecked","rawtypes"}) public synchronized void addStateListener(StateListener<StateType> listener){  if (listener == null)   throw new IllegalArgumentException("null arg");  if (listenerList == null)   listenerList=new SnapshotArray(StateListener.class);  listenerList.add(listener);  return;}  }
class C{  public static <E>String serialize(List<E> list,Class<E> jsonObjectClass) throws IOException {  return mapperFor(jsonObjectClass).serialize(list);}  }
class C{  public static AnimatedDrawableOptionsBuilder newBuilder(){  return new AnimatedDrawableOptionsBuilder();}  }
class C{  public Type unbox(Type t){  Type u=types.unboxedType(t);  if (t == null) {    throw new AssertionError("Cannot unbox reference type: " + t);  } else {    return u;  }}  }
class C{  public Property hourOfDay(){  return new Property(this,getChronology().hourOfDay());}  }
class C{  static private String concat(String[] values,Variables variables){  String generatedStr="";  for (int str=3; str < values.length; str++) {    String strToAdd=values[str];    if (strToAdd != null) {      if (ValidationUtil.isVariable(strToAdd)) {        strToAdd=variables.getVariable(strToAdd);      }      generatedStr=generatedStr.concat(strToAdd);    }  }  return generatedStr;}  }
class C{  public int timeout(){  return this.timeout;}  }
class C{  private int parseType(final byte[] b,final int off) throws ParseException {  typeVal_=PrimitivesParser.parseByte(b,off);  if (CiphertextType.deserialize(typeVal_) == null) {    throw new BadCiphertextException("Invalid ciphertext type.");  }  return 1;}  }
class C{  public JSONObject(JSONObject jo,String[] names){  this();  for (int i=0; i < names.length; i+=1) {    try {      this.putOnce(names[i],jo.opt(names[i]));    } catch (    Exception ignore) {    }  }}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  double[][] a=new double[2][2];  double[] b=new double[2];  System.out.println("Enter a00, a01, a10, a11, b0, and b1:");  for (int i=0; i < a.length; i++) {    for (int j=0; j < a[i].length; j++) {      a[i][j]=input.nextDouble();    }  }  for (int i=0; i < b.length; i++) {    b[i]=input.nextDouble();  }  double[] result=linearEquation(a,b);  if (result == null)   System.out.println("The equation has no solution."); else {    System.out.println("x is " + result[0] + " and y is "+ result[1]);  }}  }
class C{  public static String processAliases(String in){  if (in == null)   return null;  for (  Map.Entry<String,String> e : ALIASES.entrySet()) {    if (in.equals(e.getKey()))     return e.getValue();  }  return in;}  }
class C{  public SelectResults filterEvaluate(ExecutionContext context,SelectResults iterationLimit,boolean completeExpansionNeeded,CompiledValue iterOperands,RuntimeIterator[] indpndntItrs,boolean isIntersection,boolean conditioningNeeded,boolean evalProj) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  Support.assertionFailed("This method should not have invoked as CompieldComparison & CompiledUndefined are the only classes on which this invocation should have occured ");  return null;}  }
class C{  private String join(String[] s,String delimiter){  StringBuffer buffer=new StringBuffer();  for (int i=0; i < s.length; i++) {    buffer.append("'");    buffer.append(s[i]);    buffer.append("'");    if (i < s.length - 1) {      buffer.append(delimiter);    }  }  return buffer.toString();}  }
class C{  public GzipAsynchOutputStream(OutputStream stream,int pipeSize,int gzipSize,boolean terminated) throws IOException {  super(BGZIP ? new BlockCompressedOutputStream(stream,null,DEFAULT_GZIP_LEVEL,terminated) : new AdjustableGZIPOutputStream(stream),pipeSize);}  }
class C{  public SRVRecord(Name name,int dclass,long ttl,int priority,int weight,int port,Name target){  super(name,Type.SRV,dclass,ttl);  this.priority=checkU16("priority",priority);  this.weight=checkU16("weight",weight);  this.port=checkU16("port",port);  this.target=checkName("target",target);}  }
class C{  public static boolean isShowSelf(){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(App.sContext);  return prefs.getBoolean(App.sContext.getString(R.string.switch_preference_key_show_self),false);}  }
class C{  public int containsOrCrosses(S2Loop b){  if (!bound.intersects(b.getRectBound())) {    return 0;  }  int result=checkEdgeCrossings(b,new S2EdgeUtil.WedgeContainsOrCrosses());  if (result <= 0) {    return result;  }  if (!bound.contains(b.getRectBound())) {    return 0;  }  if (!contains(b.vertex(0)) && findVertex(b.vertex(0)) < 0) {    return 0;  }  return 1;}  }
class C{  public CallResponse Call(RequestHeader RequestHeader,CallMethodRequest... MethodsToCall) throws ServiceFaultException, ServiceResultException {  CallRequest req=new CallRequest(RequestHeader,MethodsToCall);  return (CallResponse)channel.serviceRequest(req);}  }
class C{  public void endDocument() throws IOException {  writer.flush();}  }
class C{  public static XMLTreeLocation afterAnyOf(String... names){  if (names.length == 0) {    throw new IllegalArgumentException("Required not empty elements names");  }  return disjunctionChain(LocationType.AFTER,names);}  }
class C{  private void displayValues(){  log("cup2 task - attribute settings: \n ========================",Project.MSG_INFO);  log("spec..........: " + this.spec);  log("- source......: " + getSpecAbsolutePath());  log("- serialized..: " + getSerializedSpecAbsolutePath());  log("specdir.......: " + this.specdir);  log("cup2srcdir....: " + this.cup2srcdir);  log("classpath.....: " + this.classpath);  log("algorithm.....: " + this.algorithm);  log("verbose.......: " + this.verbose);  log("parsetable....: " + this.parsetable);  log(" ========================");}  }
class C{  public GF2Polynomial(int length,String value){  int l=length;  if (l < 1) {    l=1;  }  blocks=((l - 1) >> 5) + 1;  this.value=new int[blocks];  len=l;  if (value.equalsIgnoreCase("ZERO")) {    assignZero();  } else   if (value.equalsIgnoreCase("ONE")) {    assignOne();  } else   if (value.equalsIgnoreCase("RANDOM")) {    randomize();  } else   if (value.equalsIgnoreCase("X")) {    assignX();  } else   if (value.equalsIgnoreCase("ALL")) {    assignAll();  } else {    throw new IllegalArgumentException("Error: GF2Polynomial was called using " + value + " as value!");  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String[] videoFilters=DShowMediaPlayer.getVideoDecoderFilters();  java.util.ArrayList rv=new java.util.ArrayList();  rv.add(Sage.rez("Default"));  rv.addAll(java.util.Arrays.asList(videoFilters));  return rv.toArray(Pooler.EMPTY_STRING_ARRAY);}  }
class C{  public static boolean isExternal(long memPtr){  return isExternal(flags(memPtr));}  }
class C{  public static void createTimeoutPage(HttpServletRequest request,HttpServletResponse response,HttpServlet servlet,String message) throws ServletException, IOException {  log.info(message);  MobileSessionCtx wsc=MobileSessionCtx.get(request);  String windowTitle="Timeout";  if (wsc != null)   windowTitle=Msg.getMsg(wsc.ctx,"Timeout");  MobileDoc doc=MobileDoc.create(windowTitle);  body body=doc.getBody();  if (message != null && message.length() > 0)   body.addElement(new p(message,AlignType.CENTER));  body.addElement(getLoginButton(wsc == null ? null : wsc.ctx));  body.addElement(new hr());  body.addElement(new small(servlet.getClass().getName()));  createResponse(request,response,servlet,null,doc,false);}  }
class C{  private static String jsonValue(double value){  return String.valueOf(value);}  }
class C{  public void saveCSV(File file) throws IOException {  FileWriter writer=null;  try {    writer=new FileWriter(file);    writer.write(toCSV());  }  finally {    if (writer != null) {      writer.close();    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:17.902 -0500",hash_original_method="5D0675654F8D9644AC21F8916F1DF9DD",hash_generated_method="6DB83B372C9D247F9FDD886D033FB4E8") public ArrayIndexOutOfBoundsException(int sourceLength,int offset,int count){  super("length=" + sourceLength + "; regionStart="+ offset+ "; regionLength="+ count);}  }
class C{  public void uiSelectingTab(long time,int id){  onTabSelecting(time,id);}  }
class C{  @CanIgnoreReturnValue public Stopwatch stop(){  long tick=ticker.read();  checkState(isRunning,"This stopwatch is already stopped.");  isRunning=false;  elapsedNanos+=tick - startTick;  return this;}  }
class C{  private ImportWizard createDefaultWizard(){  final MutableProjectConfig dataObject=new MutableProjectConfig();  final ImportWizard importWizard=importWizardFactory.newWizard(dataObject);  importWizard.setUpdateDelegate(this);  importWizard.addPage(mainPage);  return importWizard;}  }
class C{  private EppException(String message){  super(message);  Code code=getClass().getAnnotation(EppResultCode.class).value();  Preconditions.checkState(!code.isSuccess());  this.result=Result.create(code,message);}  }
class C{  public int requireUnsetFlags(){  return mRequireUnsetFlags;}  }
class C{  public void testSyncFailedDialogAppearsWhenSyncFails(){  expectVisible(viewWithText(R.string.user_sync_failed_dialog_message));  App.getInstance().getUserManager().setAutoCancelEnabled(false);  expectVisible(viewWithText(R.string.sync_failed_settings));  expectVisible(viewWithText(R.string.sync_failed_retry));}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  public EvalWindow(String name,SwingGui debugGui){  super(name,true,false,true,true);  evalTextArea=new EvalTextArea(debugGui);  evalTextArea.setRows(24);  evalTextArea.setColumns(80);  JScrollPane scroller=new JScrollPane(evalTextArea);  setContentPane(scroller);  pack();  setVisible(true);}  }
class C{  protected void calculateHeaderIndices(){  List<HeaderItem> items=headerCore.getHeaderItems();  LongSparseArray<Integer> counts=headerCore.getHeaderChildCountMap();  items.clear();  counts.clear();  HeaderItem currentItem=null;  for (int i=0; i < headerApi.getChildCount(); i++) {    long id=headerApi.getHeaderId(i);    if (id == RecyclerView.NO_ID) {      continue;    }    Integer childCount=counts.get(id);    childCount=(childCount == null) ? 1 : childCount + 1;    counts.put(id,childCount);    if (currentItem == null || currentItem.getId() != id) {      int position=i + (headerCore.showHeaderAsChild ? 0 : items.size());      currentItem=new HeaderItem(id,position);      items.add(currentItem);    }  }}  }
class C{  private ScalingHistory buildScalingHistory(String appId,int status,long startTime,long endTime,String thresholdType,int currentInstances,int newCount,AutoScalerPolicyTrigger trigger,int triggerType,String errorCode,String scheduleType,String timeZone,Long scheduleStartTime,Integer dayOfWeek){  int threshold=0;  int adjustment=newCount - currentInstances;  String metricName=null;  int breachDuration=0;  if (trigger != null) {    metricName=trigger.getMetricType();    if (thresholdType.equals(AutoScalerPolicyTrigger.TriggerId_LowerThreshold)) {      threshold=trigger.getLowerThreshold();    } else {      threshold=trigger.getUpperThreshold();    }    breachDuration=trigger.getBreachDuration();  }  ScalingHistory history=new ScalingHistory(appId,status,adjustment,newCount,startTime,endTime,metricName,threshold,thresholdType,breachDuration,triggerType,errorCode,scheduleType,timeZone,scheduleStartTime,dayOfWeek);  return history;}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  assert digester.peek() instanceof NavigationRuleBean : "Assertion Error: Expected NavigationRuleBean to be at the top of the stack";  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[NavigationCaseRule]{" + digester.getMatch() + "} Push "+ CLASS_NAME);  }  Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);  NavigationCaseBean ncb=(NavigationCaseBean)clazz.newInstance();  digester.push(ncb);}  }
class C{  public void clear(){  this.rectPacker.clear();  this.entryMap.clear();  BufferedImage backingImage=(BufferedImage)this.rectPacker.getBackingStore();  this.markDirty(0,0,backingImage.getWidth(),backingImage.getHeight());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected MemoryMappedFile(final String loc,long len) throws Exception {  this.loc=loc;  this.size=roundTo4096(len);  mapAndSetOffset();}  }
class C{  @SuppressWarnings("deprecation") public boolean cancelOnTargetHosts(List<String> targetHosts){  boolean success=false;  try {switch (state) {case IN_PROGRESS:      if (executionManager != null && !executionManager.isTerminated()) {        executionManager.tell(new CancelTaskOnHostRequest(targetHosts),executionManager);        logger.info("asked task to stop from running on target hosts with count {}...",targetHosts.size());      } else {        logger.info("manager already killed or not exist.. NO OP");      }    success=true;  break;case COMPLETED_WITHOUT_ERROR:case COMPLETED_WITH_ERROR:case WAITING:logger.info("will NO OP for cancelOnTargetHost as it is not in IN_PROGRESS state");success=true;break;default :break;}} catch (Exception e) {logger.error("cancel task {} on hosts with count {} error with exception details ",this.getTaskId(),targetHosts.size(),e);}return success;}  }
class C{  @After public void tearDown(){  comparator=null;}  }
class C{  public static Element svgCircle(Document document,double cx,double cy,double r){  Element circ=SVGUtil.svgElement(document,SVGConstants.SVG_CIRCLE_TAG);  SVGUtil.setAtt(circ,SVGConstants.SVG_CX_ATTRIBUTE,cx);  SVGUtil.setAtt(circ,SVGConstants.SVG_CY_ATTRIBUTE,cy);  SVGUtil.setAtt(circ,SVGConstants.SVG_R_ATTRIBUTE,r);  return circ;}  }
class C{  @SuppressWarnings("unchecked") private static Boolean hasSwitched(FacesContext context,String channel,boolean connected){  Map<String,Object> viewScope=context.getViewRoot().getViewMap();  Map<String,Boolean> channels=(Map<String,Boolean>)viewScope.get(WebsocketFacesListener.class.getName());  if (channels == null) {    channels=new HashMap<>();    viewScope.put(WebsocketFacesListener.class.getName(),channels);  }  Boolean previouslyConnected=channels.put(channel,connected);  return (previouslyConnected == null) ? null : (previouslyConnected != connected);}  }
class C{  protected Node newNode(){  return new SVGOMGlyphElement();}  }
class C{  public Span(Span span,List<BinaryAnnotation> binaryAnnotations,List<Annotation> annotations){  this(binaryAnnotations,annotations);  this.id=span.getId();  this.traceId=span.getTraceId();  this.parentId=span.getParentId();  this.timestamp=span.getTimestamp();  this.duration=span.getDuration();  this.debug=span.getDebug();  this.name=span.getName();}  }
class C{  public boolean isCompatible(RcsService service) throws RcsGenericException {  String serviceName=service.getClass().getSimpleName();  if (sAccurateLog) {    Log.d(LOG_TAG,"isCompatible: Request(" + serviceName + ")");  }  Bundle result=queryRcsStackByIntent(generateIsCompatibeIntent(serviceName));  boolean compatible=result.getBoolean(Intents.Service.EXTRA_GET_COMPATIBILITY_RESPONSE,false);  if (sAccurateLog) {    Log.d(LOG_TAG,"isCompatible: Response(" + serviceName + ") -> "+ compatible+ " (in "+ result.getLong(TIME_SPENT,-1)+ "ms)");  }  return compatible;}  }
class C{  public final CC gapBottom(String boundsSize){  ver.setGapAfter(ConstraintParser.parseBoundSize(boundsSize,true,false));  return this;}  }
class C{  @Override public boolean equals(final Object obj){  if (!(obj instanceof AffineTransform3D)) {    return false;  }  final AffineTransform3D t=(AffineTransform3D)obj;  final double accuracy=1e-14;  if (FastMath.abs(t.m00 - m00) > accuracy) {    return false;  }  if (FastMath.abs(t.m01 - m01) > accuracy) {    return false;  }  if (FastMath.abs(t.m02 - m02) > accuracy) {    return false;  }  if (FastMath.abs(t.m03 - m03) > accuracy) {    return false;  }  if (FastMath.abs(t.m10 - m10) > accuracy) {    return false;  }  if (FastMath.abs(t.m11 - m11) > accuracy) {    return false;  }  if (FastMath.abs(t.m12 - m12) > accuracy) {    return false;  }  if (FastMath.abs(t.m13 - m13) > accuracy) {    return false;  }  if (FastMath.abs(t.m20 - m20) > accuracy) {    return false;  }  if (FastMath.abs(t.m21 - m21) > accuracy) {    return false;  }  if (FastMath.abs(t.m22 - m22) > accuracy) {    return false;  }  if (FastMath.abs(t.m23 - m23) > accuracy) {    return false;  }  return true;}  }
class C{  public Hashtable(int initialCapacity){  this(initialCapacity,0.75f);}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public List<String> mergeFunctionNames(final String tag,final List<String> supernames,final String[] names){  List<String> result=AppCache.getCache(CACHE_METHODS).get(tag);  if (result == null) {    result=mergeFunctionNames(supernames,names);    AppCache.getCache(CACHE_METHODS).put(tag,result);  }  return result;}  }
class C{  public void add(Item item){  if (n == a.length)   resize(2 * a.length);  a[n++]=item;}  }
class C{  public TextClientFramework(String h,String u,String p,String c,String P,boolean showWorld,boolean createAccount) throws SocketException {  super(h,u,p,c,P,createAccount);  this.showWorld=showWorld;  ClientSingletonRepository.setClientFramework(this);}  }
class C{  protected void onException(final WroRuntimeException e){  throw e;}  }
class C{  private void addBlockListeners(Tracker tracker){  List<OBlock> range=tracker.getRange();  if (log.isDebugEnabled()) {    log.debug("addBlockListeners for tracker= \"" + tracker.getTrainName() + "\" has range of "+ range.size()+ " blocks.");  }  Iterator<OBlock> iter=range.iterator();  while (iter.hasNext()) {    addBlockListener(iter.next(),tracker);  }}  }
class C{  public static X509Certificate[] establishTrust(X509Certificate cert,KeyStore keyStores[]) throws CryptoException {  ArrayList<X509Certificate> ksCerts=new ArrayList<X509Certificate>();  for (int i=0; i < keyStores.length; i++) {    ksCerts.addAll(extractCertificates(keyStores[i]));  }  return establishTrust(cert,ksCerts);}  }
class C{  private void toStringHelper(TrieNode<?> start,StringBuilder buf,int indent){  if (start.getValue() != null) {    buf.append(" -> ");    buf.append(start.getValue().toString());  }  buf.append("\n");  for (Iterator<?> iter=start.labelsForward(); iter.hasNext(); ) {    for (int i=0; i < indent; i++)     buf.append(" ");    String label=(String)iter.next();    buf.append(label);    TrieNode<?> child=start.get(label.charAt(0)).getChild();    toStringHelper(child,buf,indent + 1);  }}  }
class C{  public MapOptions rotateControl(boolean rotateControl){  this.rotateControl=rotateControl;  return this;}  }
class C{  public void add(final ConversationStates[] states,final Collection<String> triggerStrings,final ChatCondition condition,final ConversationStates nextState,final String reply,final ChatAction action){  for (  final ConversationStates state : states) {    add(state,triggerStrings,condition,nextState,reply,action);  }}  }
class C{  public String toString(){  return uri;}  }
class C{  private void fetchDocumentIndicator(boolean isDocumentStart){  unwindIndent(-1);  removePossibleSimpleKey();  this.allowSimpleKey=false;  Mark startMark=reader.getMark();  reader.forward(3);  Mark endMark=reader.getMark();  Token token;  if (isDocumentStart) {    token=new DocumentStartToken(startMark,endMark);  } else {    token=new DocumentEndToken(startMark,endMark);  }  this.tokens.add(token);}  }
class C{  public boolean isNewShowing(){  return newShowing;}  }
class C{  private static void runTests(int pid) throws Throwable {  final String sep=File.separator;  String classpath=System.getProperty("test.class.path","") + File.pathSeparator + System.getProperty("test.jdk",".")+ sep+ "lib"+ sep+ "tools.jar";  String testClassDir=System.getProperty("test.classes","") + sep;  String[] args={"-classpath",classpath,"BasicTests$TestMain",Integer.toString(pid),testClassDir + "Agent.jar",testClassDir + "BadAgent.jar",testClassDir + "RedefineAgent.jar"};  OutputAnalyzer output=ProcessTools.executeTestJvm(args);  output.shouldHaveExitValue(0);}  }
class C{  @PUT @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) @Path("/{alertId}/triggers/{triggerId}") @Description("Updates a trigger having the given ID if it is associated with the given alert ID.") public TriggerDto updateTriggerById(@Context HttpServletRequest req,@PathParam("alertId") BigInteger alertId,@PathParam("triggerId") BigInteger triggerId,TriggerDto triggerdDto){  if (alertId == null || alertId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Alert Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (triggerId == null || triggerId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Trigger Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (triggerdDto == null) {    throw new WebApplicationException("Null object cannot be updated.",Status.BAD_REQUEST);  }  PrincipalUser owner=validateAndGetOwner(req,getRemoteUser(req).getUserName());  Alert oldAlert=alertService.findAlertByPrimaryKey(alertId);  if (oldAlert == null) {    throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);  }  validateResourceAuthorization(req,oldAlert.getOwner(),owner);  for (  Trigger trigger : oldAlert.getTriggers()) {    if (triggerId.equals(trigger.getId())) {      copyProperties(trigger,triggerdDto);      oldAlert.setModifiedBy(getRemoteUser(req));      Alert alert=alertService.updateAlert(oldAlert);      int index=alert.getTriggers().indexOf(trigger);      return TriggerDto.transformToDto(alert.getTriggers().get(index));    }  }  throw new WebApplicationException("The trigger does not exist.",Response.Status.NOT_FOUND);}  }
class C{  public void markClosed(){  state=StorageState.CLOSED;}  }
class C{  private void growListByBlocks(int blocks,int newMax){  if (VM.VERIFY_ASSERTIONS) {    if ((newMax > grain) && ((newMax / grain) * grain != newMax)) {      Log.write("growListByBlocks: newMax=");      Log.write(newMax);      Log.write(", grain=");      Log.write(grain);      Log.write(", (newMax / grain) * grain=");      Log.writeln((newMax / grain) * grain);    }    VM.assertions._assert((newMax <= grain) || (((newMax / grain) * grain) == newMax));  }  if (VERBOSE) {    dbgPrintSummary();    Log.write("Growing free list by ");    Log.write(blocks);    Log.write(" blocks to ");    Log.write(newMax);    Log.writeln(" units.");  }  if (blocks > 0) {    raiseHighWater(blocks);  }  int oldMax=currentUnits;  if (newMax > currentCapacity()) {    Log.write("newMax = ");    Log.write(newMax);    Log.write(", currentCapacity() = ");    Log.writeln(currentCapacity());    VM.assertions.fail("blocks and new max are inconsistent: need more blocks for the requested capacity");  }  if (newMax > maxUnits) {    VM.assertions.fail("Requested list to grow larger than the configured maximum");  }  currentUnits=newMax;  if (oldMax == 0) {    for (int i=1; i <= heads; i++) {      setSentinel(-i);    }  } else {    setSize(oldMax,1);  }  if (newMax == 0) {    return;  }  setSentinel(newMax);  int cursor=newMax;  int grain=min(this.grain,newMax - oldMax);  cursor-=grain;  while (cursor >= oldMax) {    if (VERBOSE) {      Log.write("Adding free block ");      Log.write(cursor);      Log.write("(");      Log.write(grain);      Log.writeln(")");    }    setSize(cursor,grain);    addToFree(cursor);    cursor-=grain;  }  if (VERBOSE)   dbgPrintSummary();  if (DEBUG)   dbgPrintFree();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.TRANSITION_ROOT__DEF:    return getDef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static boolean testRaySphere(Vector3fc origin,Vector3fc dir,Vector3fc center,float radiusSquared){  return testRaySphere(origin.x(),origin.y(),origin.z(),dir.x(),dir.y(),dir.z(),center.x(),center.y(),center.z(),radiusSquared);}  }
class C{  public void makeCurrent(EGLSurface eglSurface){  if (mEGLDisplay == EGL14.EGL_NO_DISPLAY) {    Log.d(TAG,"NOTE: makeCurrent w/o display");  }  if (!EGL14.eglMakeCurrent(mEGLDisplay,eglSurface,eglSurface,mEGLContext)) {    throw new RuntimeException("eglMakeCurrent failed");  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public synchronized void stopListening(){  if (mListening) {    mContext.unregisterReceiver(mReceiver);    mContext=null;    mNetworkInfo=null;    mOtherNetworkInfo=null;    mIsFailover=false;    mReason=null;    mListening=false;  }}  }
class C{  @Override public boolean handles(ResultHistoryList history,int index){  return (getClassifier(history,index) != null) && (((ClassifyTab)getOwner()).getTestData() != null);}  }
class C{  public InlineQueryResultArticle.InlineQueryResultArticleBuilder id(String id){  this.id=id;  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:08.754 -0500",hash_original_method="3B8D30E77CB845E3C376AA2B983070C1",hash_generated_method="55D57A7E9E195C304A2DD55867C5D9F9") public static ScheduledExecutorService newSingleThreadScheduledExecutor(){  return new DelegatedScheduledExecutorService(new ScheduledThreadPoolExecutor(1));}  }
class C{  private JsonParseException createParseError(String message){  throw new JsonParseException(message + " at line " + getLineNumber()+ " column "+ getColumnNumber());}  }
class C{  public Expression copyInline(Context ctx){  InlineNewInstanceExpression e=(InlineNewInstanceExpression)clone();  e.body=body.copyInline(ctx,true);  return e;}  }
class C{  ByteVector put12(final int b,final int s){  int length=this.length;  if (length + 3 > data.length) {    enlarge(3);  }  byte[] data=this.data;  data[length++]=(byte)b;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public void writingRequestHeaders(){  if (sentRequestMillis != -1)   throw new IllegalStateException();  sentRequestMillis=System.currentTimeMillis();}  }
class C{  public final byte[] generateSecret() throws IllegalStateException {  return spiImpl.engineGenerateSecret();}  }
class C{  void dndDone(){  cancelDropTimer();  dropTimer=null;}  }
class C{  public ReilOperand(final com.google.security.zynamics.reil.ReilOperand operand){  m_operand=operand;}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public boolean isPaused(){  return mPaused;}  }
class C{  public Repair(final ExecutorDriver driver,final CassandraDaemonProcess daemon,final RepairTask task){  this.driver=driver;  this.daemon=daemon;  this.task=task;}  }
class C{  private void checkNetworkProperties(){  if (!this.scenario.getNetwork().getLinks().containsKey(Id.createLinkId("3_4")))   this.middleLinkExists=false;  Link currentLink;  currentLink=scenario.getNetwork().getLinks().get(Id.createLinkId("3_4"));  linkTTMid=(int)Math.ceil(currentLink.getLength() / currentLink.getFreespeed());  if (scenario.getNetwork().getLinks().containsKey(Id.createLinkId("2_3"))) {    currentLink=scenario.getNetwork().getLinks().get(Id.createLinkId("2_3"));    linkTTSmall=(int)Math.ceil(currentLink.getLength() / currentLink.getFreespeed());  } else {    currentLink=scenario.getNetwork().getLinks().get(Id.createLinkId("2_23"));    linkTTSmall=(int)Math.ceil(currentLink.getLength() / currentLink.getFreespeed());    currentLink=scenario.getNetwork().getLinks().get(Id.createLinkId("23_3"));    linkTTSmall+=(int)Math.ceil(currentLink.getLength() / currentLink.getFreespeed());  }  currentLink=scenario.getNetwork().getLinks().get(Id.createLinkId("3_5"));  linkTTBig=(int)Math.ceil(currentLink.getLength() / currentLink.getFreespeed());}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  protected void pluginInitialize(){}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void testParams() throws Exception {  Similarity sim=getSimilarity("text_overlap");  assertEquals(DefaultSimilarity.class,sim.getClass());  assertEquals(false,((DefaultSimilarity)sim).getDiscountOverlaps());}  }
class C{  public Uri addVideoSharing(ContactId contact,Direction direction,VideoContent content,State state,ReasonCode reasonCode,long timestamp){  mContact=contact;  mDirection=direction;  mTimestamp=timestamp;  return mRichCallLog.addVideoSharing(mSharingId,contact,direction,content,state,reasonCode,timestamp);}  }
class C{  public boolean isStepInRollbackState(String stepId){  Workflow workflow=_instance.getWorkflowFromStepId(stepId);  return workflow.isRollbackState();}  }
class C{  private void addBestTestSuite(File newlyGeneratedTestSuite){  String testName=extractClassName(tmpTests,newlyGeneratedTestSuite);  String path=testName.replace(".",File.separator) + ".java";  File file=new File(getBestTestFolder() + File.separator + path);  file.delete();  try {    FileUtils.copyFile(newlyGeneratedTestSuite,file);  } catch (  IOException e) {    logger.error("Failed to copy new generated test suite into the current best set: " + e.getMessage(),e);  }}  }
class C{  public void onSuiteStarted(@NotNull final SMTestProxy newSuite){  _addTestOrSuite(newSuite);}  }
class C{  @Override public CloseableIteration<RyaStatement,RyaDAOException> join(C conf,RyaURI... preds) throws RyaDAOException {  Preconditions.checkNotNull(preds);  Preconditions.checkArgument(preds.length > 1,"Must join 2 or more");  CloseableIteration<RyaStatement,RyaDAOException> iter=null;  for (  RyaURI pred : preds) {    if (iter == null) {      iter=ryaQueryEngine.query(new RyaStatement(null,pred,null),null);    } else {      iter=join(iter,pred);    }  }  return iter;}  }
class C{  @Override protected boolean isPrepared(final Player player){  if (player.isEquipped(NEEDED_EQUIPMENT)) {    return true;  }  player.sendPrivateText("You need a pick to extract the coal.");  return false;}  }
class C{  public SmsException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public Image scaledWidth(int width){  float ratio=((float)width) / ((float)getWidth());  return scaled(width,Math.max(1,(int)(getHeight() * ratio)));}  }
class C{  public static <T>boolean isDescendantOfOrEqualTo(TreeDef.Parented<T> treeDef,T child,T parent){  if (child.equals(parent)) {    return true;  } else {    return isDescendantOf(treeDef,child,parent);  }}  }
class C{  private void updateHistory(Path path){  if (this.historyPointer == this.pathLists.size()) {    this.pathLists.add(path);    this.paintLists.add(this.createPaint());    this.historyPointer++;  } else {    this.pathLists.set(this.historyPointer,path);    this.paintLists.set(this.historyPointer,this.createPaint());    this.historyPointer++;    for (int i=this.historyPointer, size=this.paintLists.size(); i < size; i++) {      this.pathLists.remove(this.historyPointer);      this.paintLists.remove(this.historyPointer);    }  }}  }
class C{  public String toString(CSSEngine eng){  StringBuffer sb=new StringBuffer(count * 8);  for (int i=0; i < count; i++) {    sb.append(eng.getPropertyName(indexes[i]));    sb.append(": ");    sb.append(values[i]);    sb.append(";\n");  }  return sb.toString();}  }
class C{  private static void checkKey(ECKey key) throws InvalidKeyException {  if (key instanceof ECPublicKey) {    if (key instanceof ECPublicKeyImpl) {      return;    }  } else   if (key instanceof ECPrivateKey) {    if (key instanceof ECPrivateKeyImpl) {      return;    }  } else {    throw new InvalidKeyException("Neither a public nor a private key");  }  String keyAlg=((Key)key).getAlgorithm();  if (keyAlg.equals("EC") == false) {    throw new InvalidKeyException("Not an EC key: " + keyAlg);  }}  }
class C{  public void enableStencilBuffer(boolean stencilBuffer){  mStencilBuffer=stencilBuffer;}  }
class C{  public static boolean arabicCharTransparent(char c){  int charVal=c;  if ((charVal < 0x064B) || (charVal > 0x06ED))   return false;  if ((charVal <= 0x0655) || (charVal == 0x0670) || (charVal >= 0x06D6 && charVal <= 0x06E4)|| (charVal >= 0x06E7 && charVal <= 0x06E8)|| (charVal >= 0x06EA)) {    return true;  }  return false;}  }
class C{  public static void main(String[] args){  runAssociator(new FilteredAssociator(),args);}  }
class C{  public void sendDcc4PcMessage(Dcc4PcMessage m,Dcc4PcListener reply){  sendMessage(m,reply);}  }
class C{  SensorAnalyticsApplication(String propsPath) throws Exception {  super(propsPath);}  }
class C{  public ConcurrentSkipListSet(SortedSet<E> s){  m=new ConcurrentSkipListMap<E,Object>(s.comparator());  addAll(s);}  }
class C{  public ThriftServiceMetadata(Class<?> serviceType){  requireNonNull(serviceType,"serviceType");  interfaces=init(null,Collections.singleton(serviceType));}  }
class C{  public static void destroyRegion(){  cache.getRegion(REGION_NAME).localDestroyRegion(null);}  }
class C{  public TestTree sort(){  Collections.sort(suites);  suites.forEach(null);  return this;}  }
class C{  public Bean62(){}  }
class C{  private Plane3D findBestFitPlane(Polygon poly){  CoordinateSequence seq=poly.getExteriorRing().getCoordinateSequence();  Coordinate basePt=averagePoint(seq);  Vector3D normal=averageNormal(seq);  return new Plane3D(normal,basePt);}  }
class C{  public DefaultAllocator(int individualAllocationSize){  this(individualAllocationSize,0);}  }
class C{  private View fillDown(int pos,int nextTop){  int end=getBottom() - getTop() - mListPadding.bottom;  while (nextTop < end && pos < mItemCount) {    makeAndAddView(pos,getItemTop(pos),true,false);    pos++;    nextTop=getFillChildBottom() + mDividerHeight;  }  return null;}  }
class C{  private void initListeners(){  addMouseListener(TAB_SELECTION_MOUSE_HANDLER);  addMouseWheelListener(MOUSE_WHEEL_SCROLLER);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public static void eachFile(final Path self,final FileType fileType,@ClosureParams(value=SimpleType.class,options="java.nio.file.Path") final Closure closure) throws IOException {  checkDir(self);  try (DirectoryStream<Path> stream=Files.newDirectoryStream(self)){    for (    Path path : stream) {      if (fileType == FileType.ANY || (fileType != FileType.FILES && Files.isDirectory(path)) || (fileType != FileType.DIRECTORIES && Files.isRegularFile(path))) {        closure.call(path);      }    }  } }  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:33.731 -0500",hash_original_method="DF867D53E770A9464F52B7BCD42362AA",hash_generated_method="DF867D53E770A9464F52B7BCD42362AA") void onUp(){  if (mFlingRunnable.mScroller.isFinished()) {    scrollIntoSlots();  }  dispatchUnpress();}  }
class C{  public BooleanQueryResultHandlerException(Throwable cause){  super(cause);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  Element element;  Node aNode;  boolean hasChild;  String name;  Node child;  String value;  NodeList addresses;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  addresses=aNewDoc.getElementsByTagName("emp:address");  element=(Element)addresses.item(0);  assertNotNull("empAddressNotNull",element);  aNode=doc.importNode(element,true);  hasChild=aNode.hasChildNodes();  assertTrue("throw_True",hasChild);  name=aNode.getNodeName();  assertEquals("nodeName","emp:address",name);  child=aNode.getFirstChild();  value=child.getNodeValue();  assertEquals("nodeValue","27 South Road. Dallas, texas 98556",value);}  }
class C{  public BusyPeerException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("ConfirmType"))     p_ConfirmType=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }  p_M_InOut_ID=getRecord_ID();}  }
class C{  public static JCTree skipParens(JCTree tree){  if (tree.hasTag(PARENS))   return skipParens((JCParens)tree); else   return tree;}  }
class C{  public void addBuildLink(){  comment.append(String.format(" %s for more details.",buildURL));}  }
class C{  private void showPlot(final SVGPlot plot){  if (svgCanvas.getPlot() instanceof DetailView) {    ((DetailView)svgCanvas.getPlot()).destroy();  }  svgCanvas.setPlot(plot);  menubar.enableOverview(plot != overview.getPlot());  menubar.enableExport(plot != null);  updateVisualizerMenus();}  }
class C{  public AttachmentEntry uploadAttachment(File file,BasePageEntry<?> parentPage) throws IOException, ServiceException {  return uploadAttachment(file,parentPage.getSelfLink().getHref(),file.getName(),"");}  }
class C{  public ZipEntry(String name){  Objects.requireNonNull(name,"name");  if (name.length() > 0xFFFF) {    throw new IllegalArgumentException("entry name too long");  }  this.name=name;}  }
class C{  @Override public int hashCode(){  return transition.hashCode() ^ offsetBefore.hashCode() ^ Integer.rotateLeft(offsetAfter.hashCode(),16);}  }
class C{  public KeymapChangeEvent(final String keymapKey){  this.keymapKey=keymapKey;}  }
class C{  private static String readString(File f) throws FileNotFoundException {  Scanner scanner=new Scanner(f,"UTF-8");  String text=scanner.useDelimiter("\\A").next();  scanner.close();  return text;}  }
class C{  public void updateArticles(int feedId,boolean displayOnlyUnread,boolean isCat,boolean overrideOffline,boolean overrideDelay){  Long time=articlesChanged.get(feedId);  if (isCat)   time=feedsChanged.get(feedId);  if (time == null)   time=0L;  if (articlesCached > time && !(feedId == VCAT_PUB || feedId == VCAT_STAR))   time=articlesCached;  if (!overrideDelay && time > System.currentTimeMillis() - Utils.UPDATE_TIME) {    return;  } else   if (!Utils.isConnected(cm) && !(overrideOffline && Utils.checkConnected(cm))) {    return;  }  boolean isVcat=(feedId == VCAT_PUB || feedId == VCAT_STAR);  int sinceId=0;  long timeStart=System.currentTimeMillis();  IArticleOmitter filter;  if (isVcat) {    displayOnlyUnread=false;    filter=new IdUpdatedArticleOmitter("(isPublished>0 OR isStarred>0)");  } else {    sinceId=Controller.getInstance().getSinceId();    filter=new IdUpdatedArticleOmitter(sinceId);  }  int limit=calculateLimit(feedId,isCat);  if (Controller.getInstance().isLowMemory())   limit=limit / 2;  Log.d(TAG,"UPDATE limit: " + limit);  Set<Article> articles=new HashSet<>();  if (!displayOnlyUnread) {    Controller.getInstance().getConnector().getHeadlines(articles,feedId,limit,VIEW_UNREAD,isCat,0,null,null);  }  String viewMode=(displayOnlyUnread ? VIEW_UNREAD : VIEW_ALL);  Controller.getInstance().getConnector().getHeadlines(articles,feedId,limit,viewMode,isCat,sinceId,null,filter);  if (isVcat)   handlePurgeMarked(articles,feedId);  handleInsertArticles(articles,false);  long currentTime=System.currentTimeMillis();  articlesChanged.put(feedId,currentTime);  notifyListeners();  if (isCat) {    for (    Feed f : DBHelper.getInstance().getFeeds(feedId)) {      articlesChanged.put(f.id,currentTime);    }  }  Log.d(TAG,"updateArticles() Took: " + (System.currentTimeMillis() - timeStart) + "ms");}  }
class C{  private synchronized void writeToOutputStream(int oneByte){  if (mClosed) {    return;  }  try {    mOutputStream.write(oneByte);    reportDecodedSizeIfApplicable();  } catch (  IOException e) {    handleIOExceptionWritingToStream(e);  }}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  this.put(index,new Integer(value));  return this;}  }
class C{  protected static void lubPrimaries(Map<AnnotationMirror,AnnotationMirror> lubOfPrimaries,Map<AnnotationMirror,Set<AnnotationMirror>> subtypeAnnos,Set<? extends AnnotationMirror> tops,QualifierHierarchy qualifierHierarchy){  lubOfPrimaries.clear();  for (  final AnnotationMirror top : tops) {    final Set<AnnotationMirror> annosInHierarchy=subtypeAnnos.get(top);    if (annosInHierarchy != null && !annosInHierarchy.isEmpty()) {      lubOfPrimaries.put(top,leastUpperBound(annosInHierarchy,qualifierHierarchy));    }  }}  }
class C{  private static byte[] generateTimestampToken(Timestamper tsa,String tSAPolicyID,String tSADigestAlg,byte[] toBeTimestamped) throws IOException, CertificateException {  MessageDigest messageDigest=null;  TSRequest tsQuery=null;  try {    messageDigest=MessageDigest.getInstance(tSADigestAlg);    tsQuery=new TSRequest(tSAPolicyID,toBeTimestamped,messageDigest);  } catch (  NoSuchAlgorithmException e) {    throw new IllegalArgumentException(e);  }  BigInteger nonce=null;  if (SecureRandomHolder.RANDOM != null) {    nonce=new BigInteger(64,SecureRandomHolder.RANDOM);    tsQuery.setNonce(nonce);  }  tsQuery.requestCertificate(true);  TSResponse tsReply=tsa.generateTimestamp(tsQuery);  int status=tsReply.getStatusCode();  if (status != 0 && status != 1) {    throw new IOException("Error generating timestamp: " + tsReply.getStatusCodeAsText() + " "+ tsReply.getFailureCodeAsText());  }  if (tSAPolicyID != null && !tSAPolicyID.equals(tsReply.getTimestampToken().getPolicyID())) {    throw new IOException("TSAPolicyID changed in " + "timestamp token");  }  PKCS7 tsToken=tsReply.getToken();  TimestampToken tst=tsReply.getTimestampToken();  try {    if (!tst.getHashAlgorithm().equals(AlgorithmId.get(tSADigestAlg))) {      throw new IOException("Digest algorithm not " + tSADigestAlg + " in "+ "timestamp token");    }  } catch (  NoSuchAlgorithmException nase) {    throw new IllegalArgumentException();  }  if (!MessageDigest.isEqual(tst.getHashedMessage(),tsQuery.getHashedMessage())) {    throw new IOException("Digest octets changed in timestamp token");  }  BigInteger replyNonce=tst.getNonce();  if (replyNonce == null && nonce != null) {    throw new IOException("Nonce missing in timestamp token");  }  if (replyNonce != null && !replyNonce.equals(nonce)) {    throw new IOException("Nonce changed in timestamp token");  }  for (  SignerInfo si : tsToken.getSignerInfos()) {    X509Certificate cert=si.getCertificate(tsToken);    if (cert == null) {      throw new CertificateException("Certificate not included in timestamp token");    } else {      if (!cert.getCriticalExtensionOIDs().contains(EXTENDED_KEY_USAGE_OID)) {        throw new CertificateException("Certificate is not valid for timestamping");      }      List<String> keyPurposes=cert.getExtendedKeyUsage();      if (keyPurposes == null || !keyPurposes.contains(KP_TIMESTAMPING_OID)) {        throw new CertificateException("Certificate is not valid for timestamping");      }    }  }  return tsReply.getEncodedToken();}  }
class C{  @Override public void stop(){  super.stop();  _pendingWorkers.clear();}  }
class C{  public static Class boxType(Class primitiveType){  Class c=(Class)wrapperMap.get(primitiveType);  if (c != null)   return c;  throw new InterpreterError("Not a primitive type: " + primitiveType);}  }
class C{  public static <T>int binarySearchCeil(List<? extends Comparable<? super T>> list,T key,boolean inclusive,boolean stayInBounds){  int index=Collections.binarySearch(list,key);  index=index < 0 ? ~index : (inclusive ? index : (index + 1));  return stayInBounds ? Math.min(list.size() - 1,index) : index;}  }
class C{  public int recordVariable(CtClass type,String varName,SymbolTable tbl) throws CompileError {  if (varName == null)   return -1; else {    int varNo=getMaxLocals();    int locals=varNo + recordVar(type,varName,varNo,tbl);    setMaxLocals(locals);    return varNo;  }}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  public boolean createVolumeSnapshot(String volumeName,String snapshotName){  if (log.isDebugEnabled()) {    log.debug("Creating snapshot on volume with params[volName,snapshotName]: " + volumeName + ","+ snapshotName);  }  log.info("Creating snapshot on volume with params[volName,snapshotName]: " + volumeName + ","+ snapshotName);  FlexVolume vol=new FlexVolume(server.getNaServer(),volumeName);  boolean result=vol.createSnapshot(snapshotName,false);  return result;}  }
class C{  public static void validate(String xml) throws Exception {  validate(new StreamSource(new StringReader(xml)));}  }
class C{  private ChatCondition createFinishedCondition(){  return new QuestCompletedCondition(QUEST_SLOT);}  }
class C{  public void recordState(DialogueState state,String name){  states.put(name,state);  if (!listModel.contains(name)) {    int position=name.contains(CURRENT) ? 0 : Math.min(2,listModel.size());    listModel.add(position,name);  }}  }
class C{  public static void deleteFiles(final Collection<File> files,final boolean recurse) throws IOException {  for (  final File file : files) {    FileUtils.deleteFile(file,recurse);  }}  }
class C{  public static boolean isPrimitive(Type type){  return PRIMITIVE_TO_WRAPPER_TYPE.containsKey(type);}  }
class C{  static protected long countResults(final TupleQueryResult result) throws Exception {  try {    long count=0;    while (result.hasNext()) {      result.next();      count++;    }    return count;  }  finally {    result.close();  }}  }
class C{  private MessageType checkMessageInitialized(MessageType message) throws InvalidProtocolBufferException {  if (message != null && !message.isInitialized()) {    throw newUninitializedMessageException(message).asInvalidProtocolBufferException().setUnfinishedMessage(message);  }  return message;}  }
class C{  public boolean equals(MemberName that){  if (this == that)   return true;  if (that == null)   return false;  return this.clazz == that.clazz && this.getReferenceKind() == that.getReferenceKind() && Objects.equals(this.name,that.name) && Objects.equals(this.getType(),that.getType());}  }
class C{  public PluginItem(final com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T> plugin){  super(plugin);}  }
class C{  public static void rollback() throws GenericTransactionException {  rollback(null);}  }
class C{  public void finishUpdateProcessWithError(final SimulatedUpdate update,final List<String> updateResultMessages){  sendErrorgMessage(update,updateResultMessages);  LOGGER.debug("Update process finished with error \"{}\" reported by thing {}",updateResultMessages,update.getThingId());}  }
class C{  public void testStartWithBundleDeployed() throws Exception {  BufferedReader reader;  File bundleOutput;  if (getContainer().getId().startsWith("glassfish")) {    LocalConfiguration configuration=getLocalContainer().getConfiguration();    bundleOutput=new File(configuration.getHome() + "/" + configuration.getPropertyValue(GlassFishPropertySet.DOMAIN_NAME)+ "/config","bundle-output.txt");  } else {    bundleOutput=new File(getLocalContainer().getConfiguration().getHome(),"bundle-output.txt");  }  assertFalse(bundleOutput + " already exists!",bundleOutput.isFile());  Deployable bundle=new DefaultDeployableFactory().createDeployable(getContainer().getId(),getTestData().getTestDataFileFor("simple-bundle"),DeployableType.BUNDLE);  getLocalContainer().getConfiguration().addDeployable(bundle);  getLocalContainer().start();  assertEquals(State.STARTED,getContainer().getState());  final long timeout=System.currentTimeMillis() + 30 * 1000;  while (!bundleOutput.isFile() && System.currentTimeMillis() < timeout) {    Thread.sleep(1000);  }  assertTrue(bundleOutput + " does not exist!",bundleOutput.isFile());  reader=new BufferedReader(new FileReader(bundleOutput));  assertEquals("Hello, World",reader.readLine());  reader.close();  reader=null;  System.gc();  if (getContainer().getId().startsWith("geronimo")) {    Deployer deployer=createDeployer(getContainer());    deployer.undeploy(bundle);  }  getLocalContainer().stop();  assertEquals(State.STOPPED,getContainer().getState());  reader=new BufferedReader(new FileReader(bundleOutput));  assertEquals("Goodbye, World",reader.readLine());  reader.close();  reader=null;  System.gc();}  }
class C{  @Override public void process(final DM dm,ReplyProcessor21 processor){  final boolean isDebugEnabled=logger.isTraceEnabled(LogMarker.DM);  final long startTime=getTimestamp();  if (isDebugEnabled) {    logger.trace(LogMarker.DM,"GetReplyMessage process invoking reply processor with processorId:{}",this.processorId);  }  if (processor == null) {    if (isDebugEnabled) {      logger.trace(LogMarker.DM,"GetReplyMessage processor not found");    }    return;  }  processor.process(this);  if (isDebugEnabled) {    logger.trace(LogMarker.DM,"{} Processed {}",processor,this);  }  dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  public ExternalEvent nextEvent(){  if (queue.size() == 0) {    return new ExternalEvent(Double.MAX_VALUE);  }  ExternalEvent ee=queue.get(nextEventIndex);  nextEventIndex++;  if (nextEventIndex >= queue.size()) {    queue=readEvents(nrofPreload);    nextEventIndex=0;  }  return ee;}  }
class C{  public Boolean isAutoConfigurationEnabled(){  return autoConfigurationEnabled;}  }
class C{  public HeaderConfigFunction(@NotNull HeaderClassDeclaration classDeclaration,@NotNull String containingDirectoryPath,@Nullable String fileNameNoExt,@NotNull String tagName,@NotNull HeaderClassDeclaration classWithTag,@Nullable String functionFileExtension){  this.classDeclaration=classDeclaration;  this.filePath=containingDirectoryPath;  this.tagName=tagName;  this.classWithTag=classWithTag;  if (functionFileExtension == null) {    this.functionFileExtension=".sqf";  } else {    this.functionFileExtension=functionFileExtension;  }  this.appendFn_=fileNameNoExt == null;  if (fileNameNoExt == null) {    this.fileNameNoExt=getFunctionFileName(this.getFunctionClassName(),"");  } else {    this.fileNameNoExt=fileNameNoExt;  }}  }
class C{  public void displayState(){  PrintWriter xout=context.get(Log.outKey);  xout.println("File Object History : " + fileObjectHistory);  xout.println("Open Type Names     : " + openTypeNames);  xout.println("Gen. Src Names      : " + generatedSourceNames);  xout.println("Gen. Cls Names      : " + generatedClasses.keySet());  xout.println("Agg. Gen. Src Names : " + aggregateGeneratedSourceNames);  xout.println("Agg. Gen. Cls Names : " + aggregateGeneratedClassNames);}  }
class C{  protected void before(ActionInvocation invocation,BaseAction action) throws Exception {  Map<String,?> session=invocation.getInvocationContext().getSession();  @SuppressWarnings("unchecked") Collection<String> actionErrors=(Collection<String>)session.remove(ACTION_ERRORS_KEY);  if (actionErrors != null && !actionErrors.isEmpty()) {    for (    String error : actionErrors) {      action.addActionError(error);    }  }  @SuppressWarnings("unchecked") Collection<String> actionWarnings=(Collection<String>)session.remove(ACTION_WARNINGS_KEY);  if (actionWarnings != null && !actionWarnings.isEmpty()) {    for (    String error : actionWarnings) {      action.addActionWarning(error);    }  }  @SuppressWarnings("unchecked") Collection<String> actionMessages=(Collection<String>)session.remove(ACTION_MESSAGES_KEY);  if (actionMessages != null && !actionMessages.isEmpty()) {    for (    String message : actionMessages) {      action.addActionMessage(message);    }  }  @SuppressWarnings("unchecked") Map<String,List<String>> fieldErrors=(Map<String,List<String>>)session.remove(FIELD_ERRORS_KEY);  if (fieldErrors != null && !fieldErrors.isEmpty()) {    for (    Map.Entry<String,List<String>> fieldError : fieldErrors.entrySet()) {      for (      String message : fieldError.getValue()) {        action.addFieldError(fieldError.getKey(),message);      }    }  }}  }
class C{  public double dist(KernelPoint x){  if (this == x)   return 0;  double d=this.getSqrdNorm() + x.getSqrdNorm() - 2 * dot(x);  return Math.sqrt(Math.max(0,d));}  }
class C{  public Iterator sourceMethods(){  return new ArrayList(srcMap.keySet()).iterator();}  }
class C{  public static String encode(final String input) throws PunycodeException {  int n=INITIAL_N;  int delta=0;  int bias=INITIAL_BIAS;  final StringBuilder output=new StringBuilder(input.length() + 1);  int b=0;  for (int i=0; i < input.length(); i++) {    final char c=input.charAt(i);    if (isBasic(c)) {      output.append(c);      b++;    }  }  if (b > 0) {    output.append(DELIMITER);  }  int h=b;  while (h < input.length()) {    int m=Integer.MAX_VALUE;    for (int i=0; i < input.length(); i++) {      final int c=input.charAt(i);      if (c >= n && c < m) {        m=c;      }    }    if (m - n > (Integer.MAX_VALUE - delta) / (h + 1)) {      throw new PunycodeException(PunycodeException.OVERFLOW);    }    delta=delta + (m - n) * (h + 1);    n=m;    for (int j=0; j < input.length(); j++) {      final int c=input.charAt(j);      if (c < n) {        delta++;        if (0 == delta) {          throw new PunycodeException(PunycodeException.OVERFLOW);        }      }      if (c == n) {        int q=delta;        for (int k=BASE; ; k+=BASE) {          int t;          if (k <= bias) {            t=TMIN;          } else           if (k >= bias + TMAX) {            t=TMAX;          } else {            t=k - bias;          }          if (q < t) {            break;          }          output.append((char)digit2codepoint(t + (q - t) % (BASE - t)));          q=(q - t) / (BASE - t);        }        output.append((char)digit2codepoint(q));        bias=adapt(delta,h + 1,h == b);        delta=0;        h++;      }    }    delta++;    n++;  }  return output.toString();}  }
class C{  public FacebookGraphObjectException(String message){  super(message);}  }
class C{  public boolean isAbsolute(){  return absolute;}  }
class C{  public ArrayIntBig(){  pages=new ArrayList<int[]>();  length=0;}  }
class C{  public ForceConfigAction(JFrame frame,ForceSimulator fsim){  dialog=new JDialog(frame,false);  dialog.setTitle("Configure Force Simulator");  JPanel forcePanel=new JForcePanel(fsim);  dialog.getContentPane().add(forcePanel);  dialog.pack();}  }
class C{  private void process(final int value){  final short hi=(short)((value & 0xFF00) >>> 8);  final short lo=(short)(value & 0xFF);  if (hi == 0xFF) {    if (lo < 0 || lo >= input.length) {      return;    }    if (lo != channel) {      channel=lo;      cancelWrite();      sendData();    }  } else {    setRedstoneOutput(hi,lo);  }}  }
class C{  public static Object readProperty(Object bean,PropertyDescriptor descriptor){  try {    Method readMethod=descriptor.getReadMethod();    if (readMethod == null) {      throw new IllegalArgumentException(String.format("%s property does not have a read method.",descriptor.getName()));    }    if (!readMethod.isAccessible()) {      readMethod.setAccessible(true);    }    return readMethod.invoke(bean);  } catch (  InvocationTargetException e) {    throw new RuntimeException(e.getCause());  }catch (  Exception e) {  }  return null;}  }
class C{  void addAttributeSelection(String exp){  int index=exp.indexOf('=');  String value=null;  int constraint=AttString.EQUALS;  if (index != -1) {    if (index == 0) {      setTagId(TAG_CSS_ILLEGAL_SELECTOR);      return;    }    int opIndex=index;    char c=exp.charAt(index - 1);    if (c == '~') {      constraint=AttString.CONTAINS_WORD;      opIndex--;    } else     if (c == '|') {      constraint=AttString.BEGINS_WITH;      opIndex--;    }    value=exp.substring(index + 1);    if (((value.startsWith("\"")) && (value.endsWith("\""))) || ((value.startsWith("'")) && (value.endsWith("'")))) {      value=value.substring(1,value.length() - 1);    }    exp=exp.substring(0,opIndex);  }  if (attributeSelections == null) {    attributeSelections=new Vector();  }  attributeSelections.addElement(new AttString(exp,constraint,value));}  }
class C{  public void deleteTopic(String name) throws Exception {}  }
class C{  public Assignment(Assignment ass,String var,double val){  this();  addAssignment(ass);  addPair(var,val);}  }
class C{  public AdaptiveTimeContinuation(EvolutionaryAlgorithm algorithm,int windowSize,int maxWindowSize,double populationRatio,int minimumPopulationSize,int maximumPopulationSize,Selection selection,Variation variation){  super(algorithm,windowSize,FrequencyType.STEPS);  this.maxWindowSize=maxWindowSize;  this.populationRatio=populationRatio;  this.minimumPopulationSize=minimumPopulationSize;  this.maximumPopulationSize=maximumPopulationSize;  this.selection=selection;  this.variation=variation;  listeners=EventListenerSupport.create(RestartListener.class);}  }
class C{  private void createInitialTab(){  String url=HomepageManager.getHomepageUri(getApplicationContext());  if (TextUtils.isEmpty(url))   url=UrlConstants.NTP_URL;  getTabCreator(false).launchUrl(url,TabLaunchType.FROM_MENU_OR_OVERVIEW);}  }
class C{  public void startElement(String arg0,String arg1,String arg2,Attributes arg3) throws SAXException {  if (m_state != null) {    m_state.resetState(getTransformer());  }  if (m_tracer != null)   super.fireStartElem(arg2);}  }
class C{  public Task<ExportGroupRestRep> create(ExportCreateParam input){  return postTask(input,baseUrl);}  }
class C{  private void removeFirstLines(Document doc,int amount){  if (amount < 1) {    amount=1;  }  Element firstToRemove=doc.getDefaultRootElement().getElement(0);  Element lastToRemove=doc.getDefaultRootElement().getElement(amount - 1);  int startOffset=firstToRemove.getStartOffset();  int endOffset=lastToRemove.getEndOffset();  try {    doc.remove(startOffset,endOffset);  } catch (  BadLocationException ex) {    ex.printStackTrace();  }}  }
class C{  void displayPage(){  removeAll();  addComponent(mainContainer);  setScrollY(0);  revalidate();  repaint();  if (getComponentForm() != null) {    getComponentForm().revalidate();    if (firstFocusable != null) {      if (autoFocus) {        if (firstFocusable.getY() < getHeight()) {          getComponentForm().setFocused(firstFocusable);        } else {          getComponentForm().setFocused(mainContainer);        }      }    } else {      mainContainer.setFocusable(true);      getComponentForm().setFocused(mainContainer);    }    if (marqueeComponents.size() > 0) {      getComponentForm().registerAnimated(HTMLComponent.this);      int dir=getUIManager().getLookAndFeel().isRTL() ? 1 : -1;      marqueeMotion=Motion.createLinearMotion(0,dir * HTMLComponent.this.getWidth(),MARQUEE_DELAY / 2);      marqueeMotion.start();    }  }  setPageStatus(HTMLCallback.STATUS_DISPLAYED);  if (getComponentForm() != null) {    getComponentForm().revalidate();  }}  }
class C{  public void testExecuteWhenUsingInvalidRefId(){  Project antProject=new Project();  antProject.init();  this.task.setProject(antProject);  this.task.setRefId(new Reference("someInexistentReference"));  try {    this.task.execute();    fail("Should have thrown an exception for a non-inexistent reference here");  } catch (  BuildException expected) {    assertEquals("The [someInexistentReference] reference does not exist. You must first " + "define a Cargo container reference.",expected.getMessage());  }}  }
class C{  @Override public void onStart(){  super.onStart();  loadDueCounts();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 14:42:09.113 -0500",hash_original_method="A6044E4311D15BDAC205EAB611B1078B",hash_generated_method="8416BACE806C6F858F66806C75501E66") @DSVerified @DSSafe(DSCat.SAFE_LIST) public IdentityHashMap(Map<? extends K,? extends V> map){  this(map.size() < 6 ? 11 : map.size() * 2);  super.putAll(map);}  }
class C{  protected void filterOutEmptyStrings(){  String[] newSplit;  LinkedList<String> clean=new LinkedList<String>();  for (int i=0; i < m_SplitString.length; i++) {    if (!m_SplitString[i].equals("")) {      clean.add(m_SplitString[i]);    }  }  newSplit=new String[clean.size()];  for (int i=0; i < clean.size(); i++) {    newSplit[i]=clean.get(i);  }  m_SplitString=newSplit;}  }
class C{  public SparseVector plus(SparseVector that){  if (this.d != that.d)   throw new IllegalArgumentException("Vector lengths disagree");  SparseVector c=new SparseVector(d);  for (  int i : this.st.keys())   c.put(i,this.get(i));  for (  int i : that.st.keys())   c.put(i,that.get(i) + c.get(i));  return c;}  }
class C{  private boolean sendToGoogle(String exportDestination){  EndToEndTestUtils.findMenuItem(activityMyTracks.getString(R.string.menu_export),true);  EndToEndTestUtils.SOLO.waitForText(activityMyTracks.getString(R.string.export_title));  instrumentation.waitForIdleSync();  EndToEndTestUtils.SOLO.clickOnText(exportDestination);  instrumentation.waitForIdleSync();  EndToEndTestUtils.getButtonOnScreen(activityMyTracks.getString(R.string.menu_export),true,true);  instrumentation.waitForIdleSync();  if (!GoogleUtils.isAccountAvailable()) {    return false;  }  assertTrue(EndToEndTestUtils.SOLO.waitForText(activityMyTracks.getString(R.string.generic_progress_title)) || EndToEndTestUtils.SOLO.waitForText(activityMyTracks.getString(R.string.generic_success_title)));  while (EndToEndTestUtils.SOLO.waitForText(activityMyTracks.getString(R.string.generic_progress_title),1,EndToEndTestUtils.SHORT_WAIT_TIME) || EndToEndTestUtils.SOLO.waitForText(activityMyTracks.getString(R.string.generic_progress_title),1,EndToEndTestUtils.SHORT_WAIT_TIME)) {  }  if (exportDestination.endsWith(activityMyTracks.getString(R.string.export_google_maps))) {    assertTrue(EndToEndTestUtils.SOLO.waitForText(activityMyTracks.getString(R.string.share_track_share_url)));  } else {    assertTrue(EndToEndTestUtils.SOLO.waitForText(activityMyTracks.getString(R.string.generic_success_title)));  }  EndToEndTestUtils.getButtonOnScreen(activityMyTracks.getString(R.string.generic_ok),true,true);  return true;}  }
class C{  synchronized public List<AlertEntry> checkAndRaiseUserAlerts(MyPerfContext context,String dbgroup,String host){  if (this.currSnapshot == null || this.currSnapshot.getTimestamp() < 0L)   return null;  if (this.currSnapshot.getMetricsMap() == null || this.currSnapshot.getMetricsMap().size() == 0)   return null;  List<AlertEntry> alerts=new ArrayList<AlertEntry>();  for (  Map.Entry<String,Float> entry : this.currSnapshot.getMetricsMap().entrySet()) {    String alertName=entry.getKey();    Float metricValue=entry.getValue();    AlertDefinition def=context.getMetricsDef().getUdmManager().getAlertByName(alertName);    if (def == null)     continue;    AlertSubscribers.Subscription subscript=context.getMetricsDef().getUdmManager().getAlertSubscriptions().getSubscription(dbgroup,host,alertName);    if (subscript == null)     continue;    Float threshold=subscript.threshold;    if (threshold == null)     threshold=def.getDefaultThreshold();    if (threshold == null)     continue;    if (AlertDefinition.METRICS_VALUE_TYPE_VALUE.equals(def.getMetricValueType())) {      if (AlertDefinition.METRICS_COMPARISION_GREATER_THAN.equalsIgnoreCase(def.getMetricComparison())) {        if (metricValue.floatValue() > threshold.floatValue()) {          alerts.add(new AlertEntry(this.currSnapshot.getTimestamp(),alertName,metricValue.toString(),dbgroup,host));        }      } else       if (AlertDefinition.METRICS_COMPARISION_LESS_THAN.equalsIgnoreCase(def.getMetricComparison())) {        if (metricValue.floatValue() < threshold.floatValue()) {          alerts.add(new AlertEntry(this.currSnapshot.getTimestamp(),alertName,metricValue.toString(),dbgroup,host));        }      }    } else {      if (this.prevSnapshot == null || this.prevSnapshot.getTimestamp() < 0L)       continue;      if (this.prevSnapshot.getMetricsMap() == null || this.prevSnapshot.getMetricsMap().size() == 0 || !this.prevSnapshot.getMetricsMap().containsKey(alertName))       continue;      long interval=this.currSnapshot.getTimestamp() - this.prevSnapshot.getTimestamp();      if (interval <= 0L)       continue;      float avg=metricValue.floatValue() - this.prevSnapshot.getMetricsMap().get(alertName).floatValue();      if (AlertDefinition.METRICS_VALUE_TYPE_DIFF_AVG.equals(def.getMetricValueType()))       avg=(float)(((metricValue.floatValue() - this.prevSnapshot.getMetricsMap().get(alertName).floatValue()) * 1000.0) / (float)interval);      if (AlertDefinition.METRICS_COMPARISION_GREATER_THAN.equalsIgnoreCase(def.getMetricComparison())) {        if (avg > threshold.floatValue()) {          alerts.add(new AlertEntry(this.currSnapshot.getTimestamp(),alertName,String.valueOf(avg),dbgroup,host));        }      } else       if (AlertDefinition.METRICS_COMPARISION_LESS_THAN.equalsIgnoreCase(def.getMetricComparison())) {        if (avg < threshold.floatValue()) {          alerts.add(new AlertEntry(this.currSnapshot.getTimestamp(),alertName,String.valueOf(avg),dbgroup,host));        }      }    }  }  return alerts;}  }
class C{  private State applyPatch(State startState,State patchState){  if (patchState.taskState.stage != startState.taskState.stage) {    ServiceUtils.logInfo(this,"Moving to stage %s",patchState.taskState.stage);    startState.taskState=patchState.taskState;  }  return startState;}  }
class C{  public Cylinder(Position centerPosition,double northSouthRadius,double verticalRadius,double eastWestRadius){  if (centerPosition == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (northSouthRadius <= 0 || eastWestRadius <= 0 || verticalRadius <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","radius <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centerPosition=centerPosition;  this.northSouthRadius=northSouthRadius;  this.verticalRadius=verticalRadius;  this.eastWestRadius=eastWestRadius;  this.setUpGeometryCache();}  }
class C{  public static void initialize(){  checkTeaSpoonInstance();  executeEngine=new ExecuteEngine();}  }
class C{  private void scrollToPositionWithOffset(int position,int offset){  if (layoutManager instanceof LinearLayoutManager) {    ((LinearLayoutManager)layoutManager).scrollToPositionWithOffset(position,offset);  } else   if (layoutManager instanceof StaggeredGridLayoutManager) {    ((StaggeredGridLayoutManager)layoutManager).scrollToPositionWithOffset(position,offset);  }}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public Reaction basicGetReaction(){  return reaction;}  }
class C{  @HLEFunction(nid=0xB5D96C2A,version=150) public int sceNetAdhocMatchingGetHelloOpt(@CheckArgument("checkMatchingId") int matchingId,TPointer32 optLenAddr,@CanBeNull TPointer optData){  MatchingObject matchingObject=matchingObjects.get(matchingId);  int helloOptLen=matchingObject.getHelloOptLen();  int bufSize=optLenAddr.getValue();  optLenAddr.setValue(helloOptLen);  if (helloOptLen > 0 && optData.getAddress() != 0 && bufSize > 0) {    int length=Math.min(bufSize,helloOptLen);    writeBytes(optData.getAddress(),length,matchingObject.getHelloOptData(),0);  }  return 0;}  }
class C{  public static void activateEntities(World world){  for (  EntityPlayer player : world.playerEntities) {    int maxRange=0;    for (    Integer range : maxActivationRanges.values()) {      if (range > maxRange) {        maxRange=range;      }    }    maxRange=Math.min((SpongeImpl.getServer().getPlayerList().getViewDistance() << 4) - 8,maxRange);    ((IModData_Activation)player).setActivatedTick(world.getWorldInfo().getWorldTotalTime());    growBb(maxBB,player.getEntityBoundingBox(),maxRange,256,maxRange);    int i=MathHelper.floor_double(maxBB.minX / 16.0D);    int j=MathHelper.floor_double(maxBB.maxX / 16.0D);    int k=MathHelper.floor_double(maxBB.minZ / 16.0D);    int l=MathHelper.floor_double(maxBB.maxZ / 16.0D);    for (int i1=i; i1 <= j; ++i1) {      for (int j1=k; j1 <= l; ++j1) {        WorldServer worldserver=(WorldServer)world;        Chunk chunk=((IMixinChunkProviderServer)worldserver.getChunkProvider()).getLoadedChunkWithoutMarkingActive(i1,j1);        if (chunk != null) {          activateChunkEntities(player,chunk);        }      }    }  }}  }
class C{  public void deleteScriptFilterGroup(int id){  dao.delete(id);}  }
class C{  public boolean mightBeNull(){  return isDefinitelyNull() || isNullOnSomePath();}  }
class C{  public boolean closeIt(){  log.info("closeIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_CLOSE);  if (m_processMsg != null)   return false;  MRequisitionLine[] lines=getLines();  BigDecimal totalLines=Env.ZERO;  for (int i=0; i < lines.length; i++) {    MRequisitionLine line=lines[i];    BigDecimal finalQty=line.getQty();    if (line.getC_OrderLine_ID() == 0)     finalQty=Env.ZERO; else {      MOrderLine ol=new MOrderLine(getCtx(),line.getC_OrderLine_ID(),get_TrxName());      finalQty=ol.getQtyOrdered();    }    if (finalQty.compareTo(line.getQty()) != 0) {      String description=line.getDescription();      if (description == null)       description="";      description+=" [" + line.getQty() + "]";      line.setDescription(description);      line.setQty(finalQty);      line.setLineNetAmt();      line.saveEx();    }    totalLines=totalLines.add(line.getLineNetAmt());  }  if (totalLines.compareTo(getTotalLines()) != 0) {    setTotalLines(totalLines);    saveEx();  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_CLOSE);  if (m_processMsg != null)   return false;  return true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isMeanVisible(){  return this.meanVisible;}  }
class C{  @SuppressWarnings("fallthrough") public void mergeHeader(InputStream is) throws java.io.IOException {  if (is == null)   return;  char s[]=new char[10];  int firstc=is.read();  while (firstc != '\n' && firstc != '\r' && firstc >= 0) {    int len=0;    int keyend=-1;    int c;    boolean inKey=firstc > ' ';    s[len++]=(char)firstc;    parseloop: {      while ((c=is.read()) >= 0) {switch (c) {case ':':          if (inKey && len > 0)           keyend=len;        inKey=false;      break;case '\t':    c=' ';case ' ':  inKey=false;break;case '\r':case '\n':firstc=is.read();if (c == '\r' && firstc == '\n') {firstc=is.read();if (firstc == '\r') firstc=is.read();}if (firstc == '\n' || firstc == '\r' || firstc > ' ') break parseloop;c=' ';break;}if (len >= s.length) {char ns[]=new char[s.length * 2];System.arraycopy(s,0,ns,0,len);s=ns;}s[len++]=(char)c;}firstc=-1;}while (len > 0 && s[len - 1] <= ' ') len--;String k;if (keyend <= 0) {k=null;keyend=0;} else {k=String.copyValueOf(s,0,keyend);if (keyend < len && s[keyend] == ':') keyend++;while (keyend < len && s[keyend] <= ' ') keyend++;}String v;if (keyend >= len) v=new String(); else v=String.copyValueOf(s,keyend,len - keyend);add(k,v);}}  }
class C{  @Override protected boolean doControlLogic() throws AdeException {  JSONGroupParser jsonParser=parseJSON();  Map<Integer,List<Group>> parsedGroupsByType=jsonParser.getParsedGroupsByType();  List<Rule> parsedRules=jsonParser.getParsedRules();  updateDB(parsedGroupsByType,parsedRules);  return true;}  }
class C{  private static boolean millerRabin(TBigInteger n,int t){  TBigInteger x;  TBigInteger y;  TBigInteger n_minus_1=n.subtract(TBigInteger.ONE);  int bitLength=n_minus_1.bitLength();  int k=n_minus_1.getLowestSetBit();  TBigInteger q=n_minus_1.shiftRight(k);  Random rnd=new Random();  for (int i=0; i < t; i++) {    if (i < primes.length) {      x=BIprimes[i];    } else {      do {        x=new TBigInteger(bitLength,rnd);      } while ((x.compareTo(n) >= TBigInteger.EQUALS) || (x.sign == 0) || x.isOne());    }    y=x.modPow(q,n);    if (y.isOne() || y.equals(n_minus_1)) {      continue;    }    for (int j=1; j < k; j++) {      if (y.equals(n_minus_1)) {        continue;      }      y=y.multiply(y).mod(n);      if (y.isOne()) {        return false;      }    }    if (!y.equals(n_minus_1)) {      return false;    }  }  return true;}  }
class C{  public static <S extends HasRowMouseDownHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    RowMouseDownEvent event=new RowMouseDownEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapremovenameditem.class,args);}  }
class C{  private static String readTemplateFile(String path,String defaultTemplate){  String errorTemplate=defaultTemplate;  try {    String resourcePath="/webui/errortemplate_message.html";    InputStream is=APIServlet.class.getResourceAsStream(resourcePath);    InputStreamReader isr=new InputStreamReader(is);    StringBuilder sb=new StringBuilder();    BufferedReader br=new BufferedReader(isr);    String line=br.readLine();    while (line != null) {      sb.append(line);      line=br.readLine();    }    errorTemplate=sb.toString();  } catch (  IOException ioe) {    LOGGER.warn("Unable to read template error message file",ioe);  }  return errorTemplate;}  }
class C{  private void warmCache(IgniteCache<Integer,Integer> cache,int keysCnt) throws Exception {  for (int i=0; i < keysCnt; i++)   cache.get(i);}  }
class C{  public static ShortIndex createIndex(final long length){  if (length < 0) {    throw new NegativeArraySizeException("Negative length=" + length);  }  if (length <= ShortIndex.MAX_LENGTH) {    return new ShortArray(length);  } else {    return new ShortChunks(length);  }}  }
class C{  public IdentityArrayList(final ObjectCollection<? extends K> c){  this(c.size());  size=ObjectIterators.unwrap(c.iterator(),a);}  }
class C{  public static byte[] encodeArray(final byte[] a){  return encodeArray(a,a.length);}  }
class C{  public boolean authenticate(String username,String password,boolean isServiceAuth) throws AuthenticatorException {  Debug.logInfo(this.getClass().getName() + " Authenticator authenticate() -- returning false",module);  return false;}  }
class C{  protected void initSystemColorDefaults(UIDefaults table){  String[] defaultSystemColors={"desktop","#005C5C","activeCaption","#000080","activeCaptionText","#FFFFFF","activeCaptionBorder","#B24D7A","inactiveCaption","#AEB2C3","inactiveCaptionText","#000000","inactiveCaptionBorder","#AEB2C3","window","#AEB2C3","windowBorder","#AEB2C3","windowText","#000000","menu","#AEB2C3","menuText","#000000","text","#FFF7E9","textText","#000000","textHighlight","#000000","textHighlightText","#FFF7E9","textInactiveText","#808080","control","#AEB2C3","controlText","#000000","controlHighlight","#DCDEE5","controlLtHighlight","#DCDEE5","controlShadow","#63656F","controlLightShadow","#9397A5","controlDkShadow","#000000","scrollbar","#AEB2C3","info","#FFF7E9","infoText","#000000"};  loadSystemColors(table,defaultSystemColors,false);}  }
class C{  public Street(){  super();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testDefaults() throws Exception {  Similarity sim=getSimilarity("sim3text");  assertEquals(BM25Similarity.class,sim.getClass());  ;}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0].ordinal() >= State.main_region_B.ordinal() && stateVector[0].ordinal() <= State.main_region_B_r2_D2.ordinal();case main_region_B_r1_C1:return stateVector[0] == State.main_region_B_r1_C1;case main_region_B_r1_C2:return stateVector[0] == State.main_region_B_r1_C2;case main_region_B_r2_D1:return stateVector[1] == State.main_region_B_r2_D1;case main_region_B_r2_D2:return stateVector[1] == State.main_region_B_r2_D2;default :return false;}}  }
class C{  @Override public AnchoredRule copy(){  return this;}  }
class C{  protected Transition_Impl(){  super();}  }
class C{  public void startAnimationToWorkspace(final Launcher.State fromState,final Workspace.State fromWorkspaceState,final Workspace.State toWorkspaceState,final int toWorkspacePage,final boolean animated,final Runnable onCompleteRunnable){  if (toWorkspaceState != Workspace.State.NORMAL && toWorkspaceState != Workspace.State.SPRING_LOADED && toWorkspaceState != Workspace.State.OVERVIEW) {    Log.e(TAG,"Unexpected call to startAnimationToWorkspace");  }  if (fromState == Launcher.State.APPS || fromState == Launcher.State.APPS_SPRING_LOADED) {    startAnimationToWorkspaceFromAllApps(fromWorkspaceState,toWorkspaceState,toWorkspacePage,animated,onCompleteRunnable);  } else {    startAnimationToWorkspaceFromWidgets(fromWorkspaceState,toWorkspaceState,toWorkspacePage,animated,onCompleteRunnable);  }}  }
class C{  public DateTimeFormatterBuilder appendTimeZoneId(){  return append0(TimeZoneId.INSTANCE,TimeZoneId.INSTANCE);}  }
class C{  private int decodeTonalComponents(TonalComponent[] components,int numBands){  int bandFlags[]=new int[4];  int mantissa[]=new int[8];  int componentCount=0;  int nbComponents=br.read(5);  if (nbComponents == 0) {    return 0;  }  int codingModeSelector=br.read(2);  if (codingModeSelector == 2) {    return AT3_ERROR;  }  int codingMode=codingModeSelector & 1;  for (int i=0; i < nbComponents; i++) {    for (int b=0; b <= numBands; b++) {      bandFlags[b]=br.read1();    }    int codedValuesPerComponent=br.read(3);    int quantStepIndex=br.read(3);    if (quantStepIndex <= 1) {      return AT3_ERROR;    }    if (codingModeSelector == 3) {      codingMode=br.read1();    }    for (int b=0; b < (numBands + 1) * 4; b++) {      if (bandFlags[b >> 2] == 0) {        continue;      }      int codedComponents=br.read(3);      for (int c=0; c < codedComponents; c++) {        if (componentCount >= 64) {          return AT3_ERROR;        }        TonalComponent cmp=components[componentCount];        int sfIndex=br.read(6);        cmp.pos=b * 64 + br.read(6);        int maxCodedValues=SAMPLES_PER_FRAME - cmp.pos;        int codedValues=codedValuesPerComponent + 1;        codedValues=min(maxCodedValues,codedValues);        float scaleFactor=ff_atrac_sf_table[sfIndex] * inv_max_quant[quantStepIndex];        readQuantSpectralCoeffs(quantStepIndex,codingMode,mantissa,codedValues);        cmp.numCoefs=codedValues;        for (int m=0; m < codedValues; m++) {          cmp.coef[m]=mantissa[m] * scaleFactor;        }        componentCount++;      }    }  }  return componentCount;}  }
class C{  void validateNotExistingResalePermissions(Product template) throws ServiceOperationException {  Query query=dm.createNamedQuery("Product.getPartnerCopiesForTemplateNotInState");  query.setParameter("template",template);  query.setParameter("statusToIgnore",ServiceStatus.DELETED);  @SuppressWarnings("unchecked") List<Product> result=query.getResultList();  if (result.size() > 0) {    ServiceOperationException sof=new ServiceOperationException(Reason.DELETION_FAILED_EXISTING_RESALE_PERMISSION);    logger.logError(Log4jLogger.SYSTEM_LOG,sof,LogMessageIdentifier.ERROR_SERVICE_DELETION_FAILED_EXISTING_RESALE_PERMISSION,Long.toString(template.getKey()));    throw sof;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:44.583 -0500",hash_original_method="2B0DBB93241DF37011E39BE4D10F6879",hash_generated_method="26C57ED0CDB609D607D36CA3242D043F") @Override public String toString(){  return path;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.466 -0400",hash_original_method="CC627F0F353C80BB97E82A837A36768C",hash_generated_method="C510F9BA0D51F7A1D6FB275AB3D13B3F") static String clean(String str){  if (str == null || str.length() == 0) {    return str;  }  int len=str.length();  char[] chars=new char[len];  int count=0;  for (int i=0; i < len; i++) {    if (Character.isLetter(str.charAt(i))) {      chars[count++]=str.charAt(i);    }  }  if (count == len) {    return str.toUpperCase();  }  return new String(chars,0,count).toUpperCase();}  }
class C{  public HttpJsonRequest createRequest(Machine machine) throws ServerException {  Map<String,? extends Server> servers=machine.getRuntime().getServers();  Server wsAgentServer=servers.get(Constants.WS_AGENT_PORT);  if (wsAgentServer == null) {    LOG.error("{} WorkspaceId: {}, DevMachine Id: {}, found servers: {}",WS_AGENT_SERVER_NOT_FOUND_ERROR,machine.getWorkspaceId(),machine.getId(),servers);    throw new ServerException(WS_AGENT_SERVER_NOT_FOUND_ERROR);  }  String wsAgentPingUrl=wsAgentServer.getProperties().getInternalUrl();  if (isNullOrEmpty(wsAgentPingUrl)) {    LOG.error(WS_AGENT_URL_IS_NULL_OR_EMPTY_ERROR);    throw new ServerException(WS_AGENT_URL_IS_NULL_OR_EMPTY_ERROR);  }  if (!wsAgentPingUrl.endsWith("/")) {    wsAgentPingUrl=wsAgentPingUrl.concat("/");  }  return httpJsonRequestFactory.fromUrl(wsAgentPingUrl).setMethod(HttpMethod.GET).setTimeout(wsAgentPingConnectionTimeoutMs);}  }
class C{  public UrbansimCellBasedAccessibilityCSVWriterV2(String matsimOutputDirectory){  log.info("Initializing  ...");  try {    accessibilityDataWriter=IOUtils.getBufferedWriter(matsimOutputDirectory + "/" + ACCESSIBILITY_INDICATORS);  } catch (  Exception ee) {    ee.printStackTrace();    throw new RuntimeException("writer could not be instantiated");  }  if (accessibilityDataWriter == null) {    throw new RuntimeException("writer is null");  }  try {    accessibilityDataWriter.write(Labels.ZONE_ID + "," + Labels.X_COORDINATE+ ","+ Labels.Y_COORDINATE+ ","+ Labels.ACCESSIBILITY_BY_FREESPEED+ ","+ Labels.ACCESSIBILITY_BY_CAR+ ","+ Labels.ACCESSIBILITY_BY_BIKE+ ","+ Labels.ACCESSIBILITY_BY_WALK+ ","+ Labels.ACCESSIBILITY_BY_PT);    accessibilityDataWriter.newLine();  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("io did not work");  }  log.info("... done!");}  }
class C{  public void testMkdrisParentPathMissing() throws Exception {  Map<String,String> props=properties(null,null,"0555");  create(igfsSecondary,paths(DIR,SUBDIR),null);  create(igfs,null,null);  igfs.mkdirs(SUBSUBDIR,props);  checkExist(igfs,DIR);  checkExist(igfs,SUBDIR);  checkExist(igfs,igfsSecondary,SUBSUBDIR);  if (permissionsSupported()) {    assertEquals(props.get(IgfsUtils.PROP_PERMISSION),igfsSecondary.permissions(SUBSUBDIR.toString()));    assertEquals(props.get(IgfsUtils.PROP_PERMISSION),igfs.info(SUBSUBDIR).properties().get(IgfsUtils.PROP_PERMISSION));  }}  }
class C{  public EventStoreException(String message){  super(message);}  }
class C{  private void enableBle(){  final Intent enableIntent=new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);  startActivityForResult(enableIntent,REQUEST_ENABLE_BT);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.571 -0500",hash_original_method="19DDCF7A36CDD152C7A6B2FBD995EBB5",hash_generated_method="9FD32910B0D0512DCF2D5BDEF96DEF28") public static final ArrayList readListXml(InputStream in) throws XmlPullParserException, java.io.IOException {  XmlPullParser parser=Xml.newPullParser();  parser.setInput(in,null);  return (ArrayList)readValueXml(parser,new String[1]);}  }
class C{  String writeConfigFile(Config config) throws UncheckedIOException {  try {    String destination=this.dummyPath + "/test_external_config.xml";    (new ConfigWriter(config)).write(destination);    return destination;  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  public static void main(String[] args){  if (args.length < 1) {    System.out.println("s-expression expected");    return;  }  VariableRegistry registry=new VariableRegistry();  Expr expr=Expression.parse(args[0],registry);  System.out.println("=" + expr.toString());  if (registry.isEmpty()) {    System.out.println("=" + expr.evaluate());  }  System.out.println("tree");  System.out.println(Expression.prettyTree(expr));}  }
class C{  private static void check(jMatrix X,jMatrix Y){  double eps=Math.pow(2.0,-52.0);  if (X.norm1() == 0. & Y.norm1() < 10 * eps)   return;  if (Y.norm1() == 0. & X.norm1() < 10 * eps)   return;  if (X.minus(Y).norm1() > 1000 * eps * Math.max(X.norm1(),Y.norm1())) {    throw new RuntimeException("The norm of (X-Y) is too large: " + Double.toString(X.minus(Y).norm1()));  }}  }
class C{  public void onSignalStrengthsChanged(SignalStrength signalStrength){}  }
class C{  public boolean isUnityClient(){  return _khClient.isUnity();}  }
class C{  public Schema findSchema(String schemaName){  Schema schema=schemas.get(schemaName);  return schema;}  }
class C{  public void combos(){  Combo.popular(cbEmprestimo,ControleDAO.getBanco().getEmprestimoDAO().comboDevolucao());}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== ContentStorage ======================\n");  sb.append(this.header.toString());  sb.append(String.format("instance_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.instance_uid[0],this.instance_uid[1],this.instance_uid[2],this.instance_uid[3],this.instance_uid[4],this.instance_uid[5],this.instance_uid[6],this.instance_uid[7],this.instance_uid[8],this.instance_uid[9],this.instance_uid[10],this.instance_uid[11],this.instance_uid[12],this.instance_uid[13],this.instance_uid[14],this.instance_uid[15]));  sb.append(this.packages.toString());  sb.append(this.essencecontainer_data.toString());  return sb.toString();}  }
class C{  void compileClass(Source javaSource,Source javaClass,String sourcePath,boolean isMake) throws ClassNotFoundException {  try {    JavaCompilerUtil compiler=JavaCompilerUtil.create(getClassLoader());    compiler.setClassDir(_classDir);    compiler.setSourceDir(_sourceDir);    if (_encoding != null)     compiler.setEncoding(_encoding);    compiler.setArgs(_args);    compiler.setCompileParent(!isMake);    compiler.setSourceExtension(_sourceExt);    if (_compiler != null)     compiler.setCompiler(_compiler);    String prefix=_sourceDir.getPath();    String full=javaSource.getPath();    String source;    if (full.startsWith(prefix)) {      source=full.substring(prefix.length());      if (source.startsWith("/"))       source=source.substring(1);    } else     source=javaSource.getPath();    compiler.compileIfModified(source,null);  } catch (  Exception e) {    log.log(Level.FINEST,e.toString(),e);    throw new CompileClassNotFound(e);  }}  }
class C{  private static boolean hasFlag(byte flags,byte flag){  return (flags & flag) == flag;}  }
class C{  public void testCloningOfSameObject(){  final Object o1=new Object();  final Object o2=new Object();class OO {    Object o1, o2, o3, o4;  }  final OO oo=new OO();  oo.o1=o1;  oo.o2=o2;  oo.o3=o1;  oo.o4=o2;  OO clone=cloner.deepClone(oo);  assertTrue(clone.o1 == clone.o3);  assertTrue(clone.o2 == clone.o4);  final HashSet<Object> h1=new HashSet<Object>();  final HashSet<Object> h2=new HashSet<Object>();  oo.o1=h1;  oo.o2=h2;  oo.o3=h1;  oo.o4=h2;  clone=cloner.deepClone(oo);  assertTrue(clone.o1 == clone.o3);  assertTrue(clone.o2 == clone.o4);  assertTrue(clone.o1 != clone.o2);  assertTrue(clone.o2 != clone.o3);}  }
class C{  public void push(int id,int off){  if (idx == data.length) {    int[] data0=new int[data.length + GROW_STEP];    System.arraycopy(data,0,data0,0,data.length);    data=data0;  }  data[idx]=id;  data[idx + 1]=off;  idx+=2;}  }
class C{  public JettySolrRunner startJettySolrRunner(String name,String hostContext,SortedMap<ServletHolder,String> extraServlets,SortedMap<Class<? extends Filter>,String> extraRequestFilters) throws Exception {  return startJettySolrRunner(name,hostContext,extraServlets,extraRequestFilters,null);}  }
class C{  public boolean hasFields(){  return hasRepeatingExtension(Field.class);}  }
class C{  public void overhead(){  light.setAzEl(0f,Math.PI / 2);  light.setPositionFromAzEl();}  }
class C{  private void handleRawAggregatedColumnVisibility(boolean rawMode){  for (  Column column : Column.values()) {    if (rawMode) {      if (column.showInRawMode && !column.showInAggregatedMode && !ShowHideColumnsHandler.isColumnHidden(this.getClass(),column.name)) {        Integer width=ShowHideColumnsHandler.getRememberedColumnWidth(this.getClass(),column.name);        getMappedTableViewerColumn(column).getColumn().setWidth((null != width) ? width.intValue() : column.width);      } else       if (!column.showInRawMode && column.showInAggregatedMode) {        getMappedTableViewerColumn(column).getColumn().setWidth(0);      }    } else {      if (!column.showInRawMode && column.showInAggregatedMode && !ShowHideColumnsHandler.isColumnHidden(this.getClass(),column.name)) {        Integer width=ShowHideColumnsHandler.getRememberedColumnWidth(this.getClass(),column.name);        getMappedTableViewerColumn(column).getColumn().setWidth((null != width) ? width.intValue() : column.width);      } else       if (column.showInRawMode && !column.showInAggregatedMode) {        getMappedTableViewerColumn(column).getColumn().setWidth(0);      }    }  }}  }
class C{  public static Charset toCharset(Charset charset){  return charset == null ? Charset.defaultCharset() : charset;}  }
class C{  private void processEntryDnGuid(final LdapEntryVO entry,final LdapContextConfig ldapContextConfig){  LdapEntryAttributeVO ldapEntryAttr=entry.getAttribute(ldapContextConfig.getLdapDnAttribute());  if (ldapEntryAttr != null) {    String fullDn=(String)ldapEntryAttr.getValue();    String baseDn=ldapContextConfig.getLdapBase();    entry.setFullDn(fullDn);    entry.setRelativeDn(calculateRelativeDn(fullDn,baseDn));  }  ldapEntryAttr=entry.getAttribute(ldapContextConfig.getLdapGuidAttribute());  if (ldapEntryAttr != null) {    if (LdapEngineConstants.ENGINE_ACTIVE_DIRECTORY.equals(ldapContextConfig.getLdapEngine())) {      String ldapguid=LdapFormatUtils.formatGuid(ldapContextConfig.getLdapEngine(),ldapEntryAttr.getValue());      ldapEntryAttr.setValue(ldapguid);      entry.setLdapGuid(ldapguid);    } else {      entry.setLdapGuid((String)ldapEntryAttr.getValue());    }  }}  }
class C{  public void show(){  show(false,null);}  }
class C{  @Override public void visitClassContext(ClassContext classContext){  int majorVersion=classContext.getJavaClass().getMajor();  if (majorVersion >= MAJOR_1_5 && hasInterestingMethod(classContext.getJavaClass().getConstantPool(),methods)) {    super.visitClassContext(classContext);  }}  }
class C{  private static boolean isOracleMacRetinaDevice(GraphicsDevice device){  if (SystemInfo.isAppleJvm)   return false;  Boolean isRetina=devicesToRetinaSupportCacheMap.get(device);  if (isRetina != null) {    return isRetina;  }  Method getScaleFactorMethod=null;  try {    getScaleFactorMethod=Class.forName("sun.awt.CGraphicsDevice").getMethod("getScaleFactor");  } catch (  ClassNotFoundException e) {    LOG.debug("CGraphicsDevice.getScaleFactor(): not an Oracle Mac JDK or API has been changed");  }catch (  NoSuchMethodException e) {    LOG.debug("CGraphicsDevice.getScaleFactor(): not an Oracle Mac JDK or API has been changed");  }  try {    isRetina=getScaleFactorMethod == null || (Integer)getScaleFactorMethod.invoke(device) != 1;  } catch (  IllegalAccessException e) {    LOG.debug("CGraphicsDevice.getScaleFactor(): Access issue");    isRetina=false;  }catch (  InvocationTargetException e) {    LOG.debug("CGraphicsDevice.getScaleFactor(): Invocation issue");    isRetina=false;  }catch (  IllegalArgumentException e) {    LOG.debug("object is not an instance of declaring class: " + device.getClass().getName());    isRetina=false;  }  devicesToRetinaSupportCacheMap.put(device,isRetina);  return isRetina;}  }
class C{  static protected <T>void distributMissing(List<List<DataPointPair<T>>> splits,List<DataPointPair<T>> hadMissing){  double[] fracs=new double[splits.size()];  for (int i=0; i < splits.size(); i++)   for (  DataPointPair<T> dpp : splits.get(i))   fracs[i]+=dpp.getDataPoint().getWeight();  double sum=0;  for (  double d : fracs)   sum+=d;  for (int i=0; i < fracs.length; i++)   fracs[i]/=sum;  distributMissing(splits,fracs,hadMissing);}  }
class C{  @Override public ServerSocketBar bind(ServerSocketBar ss) throws ConfigException, IOException, GeneralSecurityException {  throw new ConfigException(L.l("jsse is not allowed here"));}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public TStruct readStructBegin() throws TException {  lastField_.push(lastFieldId_);  lastFieldId_=0;  return ANONYMOUS_STRUCT;}  }
class C{  @SuppressWarnings("unused") public BatchViewAsIterable(DataflowRunner runner,View.AsIterable<T> transform){  this.runner=runner;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private VirtualNAS createVirtualNas(StorageSystem system,VNXVdm vdm) throws VNXFileCollectionException {  VirtualNAS vNas=new VirtualNAS();  vNas.setNasName(vdm.getVdmName());  vNas.setStorageDeviceURI(system.getId());  vNas.setNativeId(vdm.getVdmId());  vNas.setNasState(vdm.getState());  vNas.setId(URIUtil.createId(VirtualNAS.class));  String nasNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,vdm.getVdmId(),NativeGUIDGenerator.VIRTUAL_NAS);  vNas.setNativeGuid(nasNativeGuid);  PhysicalNAS parentNas=findPhysicalNasByNativeId(system,vdm.getMoverId());  if (parentNas != null) {    vNas.setParentNasUri(parentNas.getId());    StringMap dbMetrics=vNas.getMetrics();    _logger.info("new Virtual NAS created with guid {} ",vNas.getNativeGuid());    Long MaxObjects=2048L;    Long MaxCapacity=200L * TBsINKB;    String modelStr=system.getModel();    if (modelStr.startsWith("VNX")) {      if (Long.parseLong(modelStr.substring(3)) > 5300) {        MaxCapacity=256L * TBsINKB;      }    }    dbMetrics.put(MetricsKeys.maxStorageCapacity.name(),String.valueOf(MaxCapacity));    dbMetrics.put(MetricsKeys.maxStorageObjects.name(),String.valueOf(MaxObjects));    vNas.setMetrics(dbMetrics);  }  return vNas;}  }
class C{  public TagIdName(final String name,final Long id){  this.name=name;  this.id=id;}  }
class C{  private void handleEndOfStream(State state,InnerState innerState) throws StopRequest {  mInfo.mCurrentBytes=innerState.mBytesSoFar;  mDB.updateDownload(mInfo);  boolean lengthMismatched=(innerState.mHeaderContentLength != null) && (innerState.mBytesSoFar != Integer.parseInt(innerState.mHeaderContentLength));  if (lengthMismatched) {    if (cannotResume(innerState)) {      throw new StopRequest(DownloaderService.STATUS_CANNOT_RESUME,"mismatched content length");    } else {      throw new StopRequest(getFinalStatusForHttpError(state),"closed socket before end of file");    }  }}  }
class C{  @DSComment("View state info") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.379 -0500",hash_original_method="37F85E23627B3CF97E9C182F8136E0AB",hash_generated_method="77DAFE88B40246CEB31DA46F7F2DDFCB") public static AccessibilityNodeInfo obtain(AccessibilityNodeInfo info){  AccessibilityNodeInfo infoClone=AccessibilityNodeInfo.obtain();  infoClone.init(info);  return infoClone;}  }
class C{  public Entity(final CharSequence name,final char character){  this.name=new MutableString(name);  this.character=character;}  }
class C{  public SubscriptionAttributes(InterestPolicy interestPolicy){  this.interestPolicy=interestPolicy;}  }
class C{  public RequestHandle post(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return post(context,url,paramsToEntity(params,responseHandler),null,responseHandler);}  }
class C{  public void clearSelection(){  checkWidget();  text.clearSelection();  table.deselectAll();}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"cwd");  final long baseOffset=instruction.getAddress().toLong() * 0x100;  final String isolatedMsb=environment.getNextVariableString();  final String shiftedMsb=environment.getNextVariableString();  final String mask=environment.getNextVariableString();  final String truncatedMask=environment.getNextVariableString();  final String maskedEdx=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(baseOffset,OperandSize.DWORD,"eax",OperandSize.DWORD,"32768",OperandSize.DWORD,isolatedMsb));  instructions.add(ReilHelpers.createBsh(baseOffset + 1,OperandSize.DWORD,isolatedMsb,OperandSize.DWORD,"-15",OperandSize.DWORD,shiftedMsb));  instructions.add(ReilHelpers.createSub(baseOffset + 2,OperandSize.DWORD,"0",OperandSize.DWORD,shiftedMsb,OperandSize.DWORD,mask));  instructions.add(ReilHelpers.createAnd(baseOffset + 3,OperandSize.DWORD,mask,OperandSize.DWORD,"65535",OperandSize.WORD,truncatedMask));  instructions.add(ReilHelpers.createAnd(baseOffset + 4,OperandSize.DWORD,"edx",OperandSize.DWORD,"4294901760",OperandSize.DWORD,maskedEdx));  instructions.add(ReilHelpers.createOr(baseOffset + 5,OperandSize.WORD,truncatedMask,OperandSize.DWORD,maskedEdx,OperandSize.DWORD,"edx"));}  }
class C{  public static void logStatus(final Logger logger,final long time,final int articleConsumer,final int diffConsumer,final int sqlConsumer,final boolean archiveState,final boolean articleState,final boolean diffState){  logger.logMessage(Level.INFO,"\r\nDiffTool-Status-Report [" + Time.toClock(time) + "]"+ "\r\nConsumerProducer \t["+ articleConsumer+ " | "+ diffConsumer+ " | "+ sqlConsumer+ "]"+ "\r\nArchiveProducer\t"+ archiveState+ "\r\nArticleProducer\t"+ articleState+ "\r\nDiffProducer   \t"+ diffState+ "\r\n");}  }
class C{  public void run(){  final boolean logActivated=sLogger.isActivated();  try {    if (logActivated) {      sLogger.info("Initiate a new 1-1 chat session as terminating");    }    ContactId remote=getRemoteContact();    SipDialogPath dialogPath=getDialogPath();    if (mImdnManager.isDeliveryDeliveredReportsEnabled()) {      String msgId=ChatUtils.getMessageId(dialogPath.getInvite());      if (msgId != null) {        mImdnManager.sendMessageDeliveryStatusImmediately(remote.toString(),remote,msgId,ImdnDocument.DeliveryStatus.DELIVERED,SipUtils.getRemoteInstanceId(dialogPath.getInvite()),getTimestamp());      }    }    Collection<ImsSessionListener> listeners=getListeners();    if (isSessionAccepted()) {      if (logActivated) {        sLogger.debug("Received one-to-one chat invitation marked for auto-accept");      }      for (      ImsSessionListener listener : listeners) {        ((OneToOneChatSessionListener)listener).onSessionAutoAccepted(remote);      }    } else {      if (logActivated) {        sLogger.debug("Received one-to-one chat invitation marked for manual accept");      }      for (      ImsSessionListener listener : listeners) {        ((OneToOneChatSessionListener)listener).onSessionInvited(remote);      }      send180Ringing(dialogPath.getInvite(),dialogPath.getLocalTag());      InvitationStatus answer=waitInvitationAnswer();switch (answer) {case INVITATION_REJECTED_DECLINE:case INVITATION_REJECTED_BUSY_HERE:        if (logActivated) {          sLogger.debug("Session has been rejected by user");        }      sendErrorResponse(dialogPath.getInvite(),dialogPath.getLocalTag(),answer);    removeSession();  for (  ImsSessionListener listener : listeners) {    listener.onSessionRejected(remote,TerminationReason.TERMINATION_BY_USER);  }return;case INVITATION_TIMEOUT:if (logActivated) {sLogger.debug("Session has been rejected on timeout");}send486Busy(dialogPath.getInvite(),dialogPath.getLocalTag());removeSession();for (ImsSessionListener listener : listeners) {listener.onSessionRejected(remote,TerminationReason.TERMINATION_BY_TIMEOUT);}return;case INVITATION_REJECTED_BY_SYSTEM:if (logActivated) {sLogger.debug("Session has been aborted by system");}removeSession();return;case INVITATION_CANCELED:if (logActivated) {sLogger.debug("Session has been rejected by remote");}removeSession();for (ImsSessionListener listener : listeners) {listener.onSessionRejected(remote,TerminationReason.TERMINATION_BY_REMOTE);}return;case INVITATION_ACCEPTED:setSessionAccepted();for (ImsSessionListener listener : listeners) {listener.onSessionAccepting(remote);}break;case INVITATION_DELETED:if (sLogger.isActivated()) {sLogger.debug("Session has been deleted");}removeSession();return;default :if (logActivated) {sLogger.debug("Unknown invitation answer in run; answer=".concat(String.valueOf(answer)));}break;}}final SipRequest invite=dialogPath.getInvite();String remoteSdp=invite.getSdpContent();SipUtils.assertContentIsNotNull(remoteSdp,invite);SdpParser parser=new SdpParser(remoteSdp.getBytes(UTF8));Vector<MediaDescription> media=parser.getMediaDescriptions();MediaDescription mediaDesc=media.elementAt(0);MediaAttribute attr1=mediaDesc.getMediaAttribute("path");String remotePath=attr1.getValue();String remoteHost=SdpUtils.extractRemoteHost(parser.sessionDescription,mediaDesc);int remotePort=mediaDesc.mPort;String fingerprint=SdpUtils.extractFingerprint(parser,mediaDesc);String remoteSetup="passive";MediaAttribute attr2=mediaDesc.getMediaAttribute("setup");if (attr2 != null) {remoteSetup=attr2.getValue();}if (logActivated) {sLogger.debug("Remote setup attribute is ".concat(remoteSetup));}String localSetup=createSetupAnswer(remoteSetup);if (logActivated) {sLogger.debug("Local setup attribute is ".concat(localSetup));}int localMsrpPort;if (localSetup.equals("active")) {localMsrpPort=9;} else {localMsrpPort=getMsrpMgr().getLocalMsrpPort();}String ipAddress=dialogPath.getSipStack().getLocalIpAddress();String sdp=SdpUtils.buildChatSDP(ipAddress,localMsrpPort,getMsrpMgr().getLocalSocketProtocol(),getAcceptTypes(),getWrappedTypes(),localSetup,getMsrpMgr().getLocalMsrpPath(),getSdpDirection());dialogPath.setLocalContent(sdp);if (isInterrupted()) {if (logActivated) {sLogger.debug("Session has been interrupted: end of processing");}return;}if (logActivated) {sLogger.info("Send 200 OK");}SipResponse resp=SipMessageFactory.create200OkInviteResponse(dialogPath,getFeatureTags(),sdp);dialogPath.setSigEstablished();SipTransactionContext ctx=getImsService().getImsModule().getSipManager().sendSipMessage(resp);if (localSetup.equals("passive")) {MsrpSession session=getMsrpMgr().createMsrpServerSession(remotePath,this);session.setFailureReportOption(false);session.setSuccessReportOption(false);getMsrpMgr().openMsrpSession();sendEmptyDataChunk();}getImsService().getImsModule().getSipManager().waitResponse(ctx);if (isInterrupted()) {if (logActivated) {sLogger.debug("Session has been interrupted: end of processing");}return;}if (ctx.isSipAck()) {if (logActivated) {sLogger.info("ACK request received");}dialogPath.setSessionEstablished();if (localSetup.equals("active")) {MsrpSession session=getMsrpMgr().createMsrpClientSession(remoteHost,remotePort,remotePath,this,fingerprint);session.setFailureReportOption(false);session.setSuccessReportOption(false);getMsrpMgr().openMsrpSession();sendEmptyDataChunk();}for (ImsSessionListener listener : listeners) {listener.onSessionStarted(remote);}SessionTimerManager sessionTimerManager=getSessionTimerManager();if (sessionTimerManager.isSessionTimerActivated(resp)) {sessionTimerManager.start(SessionTimerManager.UAS_ROLE,dialogPath.getSessionExpireTime());}getActivityManager().start();} else {if (logActivated) {sLogger.debug("No ACK received for INVITE");}handleError(new ChatError(ChatError.SEND_RESPONSE_FAILED));}} catch (PayloadException e) {sLogger.error("Unable to send 200OK response!",e);handleError(new ChatError(ChatError.SEND_RESPONSE_FAILED,e));}catch (NetworkException e) {handleError(new ChatError(ChatError.SEND_RESPONSE_FAILED,e));}catch (RuntimeException e) {sLogger.error("Failed to initiate chat session as terminating!",e);handleError(new ChatError(ChatError.SEND_RESPONSE_FAILED,e));}}  }
class C{  public T caseDeclaration(Declaration object){  return null;}  }
class C{  public Builder byMonth(Collection<Integer> months){  byMonth.addAll(months);  return this;}  }
class C{  public SchemeRoot(PathImpl root){  _root=root;}  }
class C{  @Override public Boolean visitDeclared_Declared(final AnnotatedDeclaredType type1,final AnnotatedDeclaredType type2,final VisitHistory visited){  if (visited.contains(type1,type2)) {    return true;  }  if (!arePrimeAnnosEqual(type1,type2)) {    return false;  }  visited.add(type1,type2);  return visitTypeArgs(type1,type2,visited);}  }
class C{  public Anwendung(CnATreeElement parent){  super(parent);  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());  setTitel(getTypeFactory().getMessage(TYPE_ID));}  }
class C{  public Intent putExtra(String name,long[] value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putLongArray(name,value);  return this;}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D plotArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  WindDataset windData=(WindDataset)dataset;  Paint seriesPaint=getItemPaint(series,item);  Stroke seriesStroke=getItemStroke(series,item);  g2.setPaint(seriesPaint);  g2.setStroke(seriesStroke);  Number x=windData.getX(series,item);  Number windDir=windData.getWindDirection(series,item);  Number wforce=windData.getWindForce(series,item);  double windForce=wforce.doubleValue();  double wdirt=Math.toRadians(windDir.doubleValue() * (-30.0) - 90.0);  double ax1, ax2, ay1, ay2, rax2, ray2;  RectangleEdge domainAxisLocation=plot.getDomainAxisEdge();  RectangleEdge rangeAxisLocation=plot.getRangeAxisEdge();  ax1=domainAxis.valueToJava2D(x.doubleValue(),plotArea,domainAxisLocation);  ay1=rangeAxis.valueToJava2D(0.0,plotArea,rangeAxisLocation);  rax2=x.doubleValue() + (windForce * Math.cos(wdirt) * 8000000.0);  ray2=windForce * Math.sin(wdirt);  ax2=domainAxis.valueToJava2D(rax2,plotArea,domainAxisLocation);  ay2=rangeAxis.valueToJava2D(ray2,plotArea,rangeAxisLocation);  int diri=windDir.intValue();  int forcei=wforce.intValue();  String dirforce=diri + "-" + forcei;  Line2D line=new Line2D.Double(ax1,ay1,ax2,ay2);  g2.draw(line);  g2.setPaint(Color.blue);  g2.setFont(new Font("Dialog",1,9));  g2.drawString(dirforce,(float)ax1,(float)ay1);  g2.setPaint(seriesPaint);  g2.setStroke(seriesStroke);  double alx2, aly2, arx2, ary2;  double ralx2, raly2, rarx2, rary2;  double aldir=Math.toRadians(windDir.doubleValue() * (-30.0) - 90.0 - 5.0);  ralx2=wforce.doubleValue() * Math.cos(aldir) * 8000000* 0.8 + x.doubleValue();  raly2=wforce.doubleValue() * Math.sin(aldir) * 0.8;  alx2=domainAxis.valueToJava2D(ralx2,plotArea,domainAxisLocation);  aly2=rangeAxis.valueToJava2D(raly2,plotArea,rangeAxisLocation);  line=new Line2D.Double(alx2,aly2,ax2,ay2);  g2.draw(line);  double ardir=Math.toRadians(windDir.doubleValue() * (-30.0) - 90.0 + 5.0);  rarx2=wforce.doubleValue() * Math.cos(ardir) * 8000000* 0.8 + x.doubleValue();  rary2=wforce.doubleValue() * Math.sin(ardir) * 0.8;  arx2=domainAxis.valueToJava2D(rarx2,plotArea,domainAxisLocation);  ary2=rangeAxis.valueToJava2D(rary2,plotArea,rangeAxisLocation);  line=new Line2D.Double(arx2,ary2,ax2,ay2);  g2.draw(line);}  }
class C{  public ParseResult filter(Content content,ParseResult parseResult,HTMLMetaTags metaTags,DocumentFragment doc){  Parse parse=parseResult.get(content.getUrl());  Parser parser=new Parser(doc);  Set tags=parser.getRelTags();  Iterator iter=tags.iterator();  Metadata metadata=parse.getData().getParseMeta();  while (iter.hasNext()) {    metadata.add(REL_TAG,(String)iter.next());  }  return parseResult;}  }
class C{  public HttpCache(){  this(HttpCache.DEFAULT_CACHE_SIZE,HttpCache.DEFAULT_EXPIRY_TIME);}  }
class C{  public List list(String id,Map params){  ReadonlyTranSession session=transactionManager.openDelayReadTran();  try {    return session.list(id,params);  }  finally {    session.close();  }}  }
class C{  public String toString(String prefix,String separator,String suffix){  return toString0(prefix,separator,suffix,false);}  }
class C{  public boolean isDestroyed(){  return destroyed;}  }
class C{  public TransportAddress(String hostname,int port,Transport transport){  super(hostname,port);  this.transport=transport;}  }
class C{  public boolean isSignatureValid(ContentVerifierProvider verifierProvider) throws CertException {  AttributeCertificateInfo acinfo=attrCert.getAcinfo();  if (!CertUtils.isAlgIdEqual(acinfo.getSignature(),attrCert.getSignatureAlgorithm())) {    throw new CertException("signature invalid - algorithm identifier mismatch");  }  ContentVerifier verifier;  try {    verifier=verifierProvider.get((acinfo.getSignature()));    OutputStream sOut=verifier.getOutputStream();    DEROutputStream dOut=new DEROutputStream(sOut);    dOut.writeObject(acinfo);    sOut.close();  } catch (  Exception e) {    throw new CertException("unable to process signature: " + e.getMessage(),e);  }  return verifier.verify(attrCert.getSignatureValue().getBytes());}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  protected void initAgents(MessageLogger logger){  List<MapNode> markers=map.getOsmMap().getMarkers();  if (markers.size() < 2) {    logger.log("Error: Please set two markers with mouse-left.");    return;  }  String[] locs=new String[markers.size()];  for (int i=0; i < markers.size(); i++) {    MapNode node=markers.get(i);    Point2D pt=new Point2D(node.getLon(),node.getLat());    locs[i]=map.getNearestLocation(pt);  }  heuristic.adaptToGoal(locs[1],map);  Agent agent=null;  MapAgentFrame.SelectionState state=frame.getSelection();switch (state.getIndex(MapAgentFrame.AGENT_SEL)) {case 0:    agent=new MapAgent(map,env,search,new String[]{locs[1]});  break;case 1:Problem p=new BidirectionalMapProblem(map,null,locs[1]);OnlineSearchProblem osp=new OnlineSearchProblem(p.getActionsFunction(),p.getGoalTest(),p.getStepCostFunction());agent=new LRTAStarAgent(osp,MapFunctionFactory.getPerceptToStateFunction(),heuristic);break;}env.addAgent(agent,locs[0]);}  }
class C{  public static <T>T bootImageIntern(T object){  if (VM.VerifyAssertions && VM.runningVM) {    VM._assert(VM.NOT_REACHED);  }  if (objectAddressRemapper == null) {    return object;  }  return objectAddressRemapper.intern(object);}  }
class C{  protected void initBPartner(boolean forInvoice) throws Exception {  int AD_Column_ID=3499;  MLookup lookup=MLookupFactory.get(Env.getCtx(),p_WindowNo,0,AD_Column_ID,DisplayType.Search);  bPartnerField=new WSearchEditor("C_BPartner_ID",true,false,true,lookup);  int C_BPartner_ID=Env.getContextAsInt(Env.getCtx(),p_WindowNo,"C_BPartner_ID");  bPartnerField.setValue(new Integer(C_BPartner_ID));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private CIMObjectPath createFilter(CimManagedFilterInfo filterInfo) throws WBEMException {  StringBuilder filterNameBuilder=new StringBuilder();  filterNameBuilder.append(_subscriptionsIdentifier);  filterNameBuilder.append(CimConstants.PATH_NAME_DELIMITER);  filterNameBuilder.append(filterInfo.getName());  String filterName=filterNameBuilder.toString();  String implNS=_connection.getImplNamespace();  CIMProperty<?> nameProperty=new CIMProperty<String>(CimConstants.NAME_KEY,CIMDataType.STRING_T,filterName);  CIMProperty<?> srcNamespaceProp=new CIMProperty<String>(CimConstants.FILTER_PROP_SRC_NAMESPACE,CIMDataType.STRING_T,implNS);  CIMProperty<?> srcNamespacesProp=new CIMProperty<String[]>(CimConstants.FILTER_PROP_SRC_NAMESPACES,CIMDataType.STRING_ARRAY_T,new String[]{implNS});  CIMProperty<?> queryLangProp=new CIMProperty<String>(CimConstants.FILTER_PROP_QUERY_LANGUAGE,CIMDataType.STRING_T,filterInfo.getQueryLanguage());  CIMProperty<?> queryProp=new CIMProperty<String>(CimConstants.FILTER_PROP_QUERY,CIMDataType.STRING_T,filterInfo.getQuery());  CIMProperty<?>[] filterProperties=new CIMProperty[]{nameProperty,srcNamespaceProp,srcNamespacesProp,queryLangProp,queryProp};  CIMObjectPath filterPath=createInstance(CimConstants.CIM_FILTER_NAME,filterName,filterProperties);  _filterPaths.add(filterPath);  return filterPath;}  }
class C{  protected boolean isOnSameScreenAsChildren(){  return true;}  }
class C{  public ParsableBitArray(){}  }
class C{  public HttpsURL(final String host,final int port,final String path,final String query) throws URIException {  this(null,host,port,path,query,null);}  }
class C{  static void errorInvalidAttributeValue(String systemID,int lineNr,String elementName,String attributeName,String attributeValue) throws XMLValidationException {  throw new XMLValidationException(XMLValidationException.ATTRIBUTE_WITH_INVALID_VALUE,systemID,lineNr,elementName,attributeName,attributeValue,"Invalid value for attribute " + attributeName);}  }
class C{  public static <K,V>UUID subjectId(IgniteInternalTx tx,GridCacheSharedContext<K,V> ctx){  if (tx == null)   return ctx.localNodeId();  UUID subjId=tx.subjectId();  return subjId != null ? subjId : tx.originatingNodeId();}  }
class C{  @SuppressWarnings("fallthrough") static void murmurhash3_x64_128(byte[] key,int offset,int len,int seed,LongPair out){  long h1=seed & 0x00000000FFFFFFFFL;  long h2=seed & 0x00000000FFFFFFFFL;  final long c1=0x87c37b91114253d5L;  final long c2=0x4cf5ad432745937fL;  int roundedEnd=offset + (len & 0xFFFFFFF0);  for (int i=offset; i < roundedEnd; i+=16) {    long k1=getLongLittleEndian(key,i);    long k2=getLongLittleEndian(key,i + 8);    k1*=c1;    k1=Long.rotateLeft(k1,31);    k1*=c2;    h1^=k1;    h1=Long.rotateLeft(h1,27);    h1+=h2;    h1=h1 * 5 + 0x52dce729;    k2*=c2;    k2=Long.rotateLeft(k2,33);    k2*=c1;    h2^=k2;    h2=Long.rotateLeft(h2,31);    h2+=h1;    h2=h2 * 5 + 0x38495ab5;  }  long k1=0;  long k2=0;switch (len & 15) {case 15:    k2=(key[roundedEnd + 14] & 0xffL) << 48;case 14:  k2|=(key[roundedEnd + 13] & 0xffL) << 40;case 13:k2|=(key[roundedEnd + 12] & 0xffL) << 32;case 12:k2|=(key[roundedEnd + 11] & 0xffL) << 24;case 11:k2|=(key[roundedEnd + 10] & 0xffL) << 16;case 10:k2|=(key[roundedEnd + 9] & 0xffL) << 8;case 9:k2|=(key[roundedEnd + 8] & 0xffL);k2*=c2;k2=Long.rotateLeft(k2,33);k2*=c1;h2^=k2;case 8:k1=((long)key[roundedEnd + 7]) << 56;case 7:k1|=(key[roundedEnd + 6] & 0xffL) << 48;case 6:k1|=(key[roundedEnd + 5] & 0xffL) << 40;case 5:k1|=(key[roundedEnd + 4] & 0xffL) << 32;case 4:k1|=(key[roundedEnd + 3] & 0xffL) << 24;case 3:k1|=(key[roundedEnd + 2] & 0xffL) << 16;case 2:k1|=(key[roundedEnd + 1] & 0xffL) << 8;case 1:k1|=(key[roundedEnd] & 0xffL);k1*=c1;k1=Long.rotateLeft(k1,31);k1*=c2;h1^=k1;}h1^=len;h2^=len;h1+=h2;h2+=h1;h1=fmix64(h1);h2=fmix64(h2);h1+=h2;h2+=h1;out.val1=h1;out.val2=h2;}  }
class C{  protected void detailExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de detailExecuteLogic");  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionValoracionBI service=services.lookupGestionValoracionBI();  String idValoracion=request.getParameter(Constants.ID);  if (idValoracion != null && idValoracion.trim().length() > 0) {    ValoracionSerieVO valoracion=service.abrirValoracion(idValoracion);    ValoracionSeriePO valoracionPO=(ValoracionSeriePO)ValoracionToPO.getInstance(services).transform(valoracion);    setInTemporalSession(request,ValoracionConstants.VALORACION_KEY,valoracionPO);  }  saveCurrentInvocation(KeysClientsInvocations.VALORACION_DETALLEVALORACION,request);  setReturnActionFordward(request,mapping.findForward("detalle_valoracion"));}  }
class C{  public final boolean isServing(){  return mIsServing;}  }
class C{  @Override protected void closeDialogOk(){  boolean success=neuronGroupPanel.commitChanges();  if (!success) {    return;  }  networkPanel.getNetwork().addGroup(neuronGroupPanel.getGroup());  networkPanel.repaint();  super.closeDialogOk();}  }
class C{  public ConfigureDataTableModel(DataSource dataSource,DataSetMetaData metaData,ProgressListener l) throws DataSetException {  this.metaData=metaData;  this.originalDataSourceMetaData=dataSource.getMetadata();  this.dataSet=dataSource.getPreview(ImportWizardUtils.getPreviewLength());  read(dataSet,l);}  }
class C{  public LinkSocket(LinkSocketNotifier notifier){  if (DBG)   log("LinkSocket(notifier) EX");}  }
class C{  @Timed @ExceptionMetered @GET public Response findSecrets(@Auth User user,@DefaultValue("") @QueryParam("name") String name,@DefaultValue("") @QueryParam("nameOnly") String nameOnly,@QueryParam("idx") Integer idx,@QueryParam("num") Integer num,@DefaultValue("true") @QueryParam("newestFirst") Boolean newestFirst){  if (!name.isEmpty() && idx != null && num != null) {    throw new BadRequestException("Name and idx/num cannot both be specified");  }  validateArguments(name,nameOnly,idx,num);  if (name.isEmpty()) {    if (nameOnly.isEmpty()) {      if (idx == null || num == null) {        return Response.ok().entity(listSecrets(user)).build();      } else {        return Response.ok().entity(listSecretsBatched(user,idx,num,newestFirst)).build();      }    } else {      return Response.ok().entity(listSecretsNameOnly(user)).build();    }  }  return Response.ok().entity(retrieveSecret(user,name)).build();}  }
class C{  private void writeInterfaceHash(IndentingWriter p) throws IOException {  p.pln("private static final long interfaceHash = " + remoteClass.getInterfaceHash() + "L;");}  }
class C{  public static boolean canMoveOnPavement(IGame game,Coords src,Coords dest,MoveStep moveStep){  final IHex srcHex=game.getBoard().getHex(src);  final IHex destHex=game.getBoard().getHex(dest);  final int src2destDir=src.direction(dest);  final int dest2srcDir=(src2destDir + 3) % 6;  boolean result=false;  if (src.equals(dest) && (srcHex.containsTerrain(Terrains.PAVEMENT) || srcHex.containsTerrain(Terrains.ROAD) || srcHex.containsTerrain(Terrains.BRIDGE))) {    result=true;  } else   if (srcHex.containsTerrain(Terrains.PAVEMENT) && (destHex.containsTerrain(Terrains.PAVEMENT) || destHex.containsTerrainExit(Terrains.ROAD,dest2srcDir) || (destHex.containsTerrainExit(Terrains.BRIDGE,dest2srcDir) && moveStep.climbMode()))) {    result=true;  } else   if ((srcHex.containsTerrainExit(Terrains.ROAD,src2destDir) || (srcHex.containsTerrainExit(Terrains.BRIDGE,src2destDir) && (moveStep.getElevation() == srcHex.terrainLevel(Terrains.BRIDGE_ELEV)))) && (destHex.containsTerrainExit(Terrains.ROAD,dest2srcDir) || (destHex.containsTerrainExit(Terrains.BRIDGE,dest2srcDir) && moveStep.climbMode()) || destHex.containsTerrain(Terrains.PAVEMENT))) {    result=true;  }  return result;}  }
class C{  @Override protected StatisticResource createStatisticResource(StatResource stat) throws org.apache.geode.admin.AdminException {  StatisticResourceJmxImpl managedStatisticResource=null;synchronized (this.managedStatisticsResourcesMap) {    StatisticResourceJmxImpl statisticResourceJmxImpl=managedStatisticsResourcesMap.get(stat);    if (statisticResourceJmxImpl != null) {      managedStatisticResource=statisticResourceJmxImpl;    } else {      managedStatisticResource=new StatisticResourceJmxImpl(stat,this);      managedStatisticResource.getStatistics();      managedStatisticsResourcesMap.put(stat,managedStatisticResource);    }  }  return managedStatisticResource;}  }
class C{  public static Map<String,Object> createUserLogin(DispatchContext ctx,Map<String,?> context){  Map<String,Object> result=new LinkedHashMap<String,Object>();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue loggedInUserLogin=(GenericValue)context.get("userLogin");  List<String> errorMessageList=new LinkedList<String>();  Locale locale=(Locale)context.get("locale");  boolean useEncryption="true".equals(EntityUtilProperties.getPropertyValue("security.properties","password.encrypt",delegator));  String userLoginId=(String)context.get("userLoginId");  String partyId=(String)context.get("partyId");  String currentPassword=(String)context.get("currentPassword");  String currentPasswordVerify=(String)context.get("currentPasswordVerify");  String enabled=(String)context.get("enabled");  String passwordHint=(String)context.get("passwordHint");  String requirePasswordChange=(String)context.get("requirePasswordChange");  String externalAuthId=(String)context.get("externalAuthId");  String errMsg=null;  if (UtilValidate.isNotEmpty(partyId)) {    GenericValue party=null;    try {      party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();    } catch (    GenericEntityException e) {      Debug.logWarning(e,"",module);    }    if (party != null) {      if (loggedInUserLogin != null) {        if (!partyId.equals(loggedInUserLogin.getString("partyId"))) {          if (!security.hasEntityPermission("PARTYMGR","_CREATE",loggedInUserLogin)) {            errMsg=UtilProperties.getMessage(resource,"loginservices.party_with_specified_party_ID_exists_not_have_permission",locale);            errorMessageList.add(errMsg);          }        }      } else {        errMsg=UtilProperties.getMessage(resource,"loginservices.must_be_logged_in_and_permission_create_login_party_ID_exists",locale);        errorMessageList.add(errMsg);      }    }  }  GenericValue userLoginToCreate=delegator.makeValue("UserLogin",UtilMisc.toMap("userLoginId",userLoginId));  checkNewPassword(userLoginToCreate,null,currentPassword,currentPasswordVerify,passwordHint,errorMessageList,true,locale);  userLoginToCreate.set("externalAuthId",externalAuthId);  userLoginToCreate.set("passwordHint",passwordHint);  userLoginToCreate.set("enabled",enabled);  userLoginToCreate.set("requirePasswordChange",requirePasswordChange);  userLoginToCreate.set("currentPassword",useEncryption ? HashCrypt.cryptUTF8(getHashType(),null,currentPassword) : currentPassword);  try {    userLoginToCreate.set("partyId",partyId);  } catch (  Exception e) {    Debug.logInfo(e,"Exception thrown while setting UserLogin partyId field: ",module);  }  try {    EntityCondition condition=EntityCondition.makeCondition(EntityFunction.UPPER_FIELD("userLoginId"),EntityOperator.EQUALS,EntityFunction.UPPER(userLoginId));    if (UtilValidate.isNotEmpty(EntityQuery.use(delegator).from("UserLogin").where(condition).queryList())) {      Map<String,String> messageMap=UtilMisc.toMap("userLoginId",userLoginId);      errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_with_ID_exists",messageMap,locale);      errorMessageList.add(errMsg);    }  } catch (  GenericEntityException e) {    Debug.logWarning(e,"",module);    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_read_failure",messageMap,locale);    errorMessageList.add(errMsg);  }  if (errorMessageList.size() > 0) {    return ServiceUtil.returnError(errorMessageList);  }  try {    userLoginToCreate.create();    createUserLoginPasswordHistory(delegator,userLoginId,currentPassword);  } catch (  GenericEntityException e) {    Debug.logWarning(e,"",module);    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_create_login_user_write_failure",messageMap,locale);    return ServiceUtil.returnError(errMsg);  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public boolean isRotating(){  return isRotating;}  }
class C{  private static int stringToInt(final String s,final int start,final int end){  int t=0;  for (int k=start; k < end; k++) {    t*=10;    t+=s.charAt(k) - '0';  }  return t;}  }
class C{  private Proposition(VariableSource variableSource){  if (variableSource == null) {    throw new NullPointerException();  }  this.variableSource=variableSource;  List<Node> variables=this.variableSource.getVariables();  for (  Node variable : variables) {    if (!(variable instanceof DiscreteVariable)) {      throw new IllegalArgumentException("Variables for Propositions " + "must be DiscreteVariables.");    }  }  allowedCategories=new boolean[variables.size()][];  for (int i=0; i < variables.size(); i++) {    DiscreteVariable discreteVariable=(DiscreteVariable)variables.get(i);    int numCategories=discreteVariable.getNumCategories();    allowedCategories[i]=new boolean[numCategories];  }  setToTautology();}  }
class C{  protected int consumeRecords(int numberOfRecords,Consumer<SourceRecord> recordConsumer) throws InterruptedException {  int recordsConsumed=0;  while (recordsConsumed < numberOfRecords) {    SourceRecord record=consumedLines.poll(pollTimeoutInMs,TimeUnit.MILLISECONDS);    if (record != null) {      ++recordsConsumed;      if (recordConsumer != null) {        recordConsumer.accept(record);      }      if (Testing.Debug.isEnabled()) {        Testing.debug("Consumed record " + recordsConsumed + " / "+ numberOfRecords+ " ("+ (numberOfRecords - recordsConsumed)+ " more)");        debug(record);      } else       if (Testing.Print.isEnabled()) {        Testing.print("Consumed record " + recordsConsumed + " / "+ numberOfRecords+ " ("+ (numberOfRecords - recordsConsumed)+ " more)");        print(record);      }    } else {      return recordsConsumed;    }  }  return recordsConsumed;}  }
class C{  ServerSessionManager registerConnection(UUID client,Connection connection){  ServerSessionContext session=clients.get(client);  if (session != null) {    session.setConnection(connection);  }  connections.put(client,connection);  return this;}  }
class C{  public void insertChar(final int offs,final String str){  if (offs < 0) {    return;  }  try {    super.insertString(offs,str,normal);  } catch (  final Exception ex) {    ex.printStackTrace();  }}  }
class C{  @Override public JToolTip createToolTip(){  final JToolTip tt=super.createToolTip();  tt.setFont(getFont().deriveFont((float)LEnv.LAUNCHER_SETTINGS.get(LSettings.PAGE_LIST_FONT_SIZE)));  return tt;}  }
class C{  public String pullRequestUrl(String account,String collection,String projectName,String repositoryName,String pullRequestId){  Objects.requireNonNull(projectName,"Project name required");  Objects.requireNonNull(repositoryName,"Repository name required");  Objects.requireNonNull(pullRequestId,"Pull request id required");  return getTeamBaseUrl(account,collection) + format(PROJECT_REPO_PULL_REQUEST,projectName,repositoryName,pullRequestId) + getApiVersion();}  }
class C{  private static PCalLocation GetLastLocationStart(){  return new PCalLocation(lastTokLine - 1,lastTokCol - 1);}  }
class C{  public void detach(){}  }
class C{  private void encode(byte[] data){  mNalRepeat++;  if (mNalRepeat > NALREPEATMAX) {    mNalInit=false;    mNalRepeat=0;  }  if (!mNalInit) {    mRtpInput.addFrame(mSps,mTimeStamp);    mTimeStamp+=mTimestampInc;    mRtpInput.addFrame(mPps,mTimeStamp);    mTimeStamp+=mTimestampInc;    mNalInit=true;  }  byte[] encoded;  if (mFrameBuffer.dataSrcWidth != 0 && mFrameBuffer.dataSrcHeight != 0) {    encoded=NativeH264Encoder.ResizeAndEncodeFrame(data,mTimeStamp,mMirroring,mFrameBuffer.dataSrcWidth,mFrameBuffer.dataSrcHeight);  } else {    encoded=NativeH264Encoder.EncodeFrame(data,mTimeStamp,mMirroring,mFrameBuffer.dataScaleFactor);  }  int encodeResult=NativeH264Encoder.getLastEncodeStatus();  if ((encodeResult == 0) && (encoded.length > 0)) {    VideoOrientation videoOrientation=null;    if (mOrientationHeaderId > 0) {      videoOrientation=new VideoOrientation(mOrientationHeaderId,CameraOptions.convert(mCameraId),mOrientation);    }    mRtpInput.addFrame(encoded,mTimeStamp,videoOrientation);    mTimeStamp+=mTimestampInc;  }}  }
class C{  private void startTask(){synchronized (lock) {    if (shutdown) {      throw new RejectedExecutionException("Executor already shutdown");    }    runningTasks++;  }}  }
class C{  private String c(String str){  return str + count;}  }
class C{  public TileDirectory(){  tilename="";  this.tileID=-1;  westlon=eastlon=northlat=southlat=Float.NaN;}  }
class C{  public ObjectFactory(){}  }
class C{  protected String buildLabel(Cursor c,LinkedHashMap<String,String> selectColumnMap,List<String> columnsToExcludeFromLabels){  StringBuilder sb=new StringBuilder();  for (int columnIndex=1; columnIndex < c.getColumnCount(); columnIndex++) {    String columnName=c.getColumnName(columnIndex);    if (columnsToExcludeFromLabels.contains(columnName)) {      continue;    }    String value=c.getString(columnIndex);    if (columnIndex == 1) {      sb.append(value);      continue;    }    if (c.getColumnCount() - columnsToExcludeFromLabels.size() == 2) {      break;    }    if (columnIndex > 1) {      sb.append(" ");    }    sb.append("(");    sb.append(selectColumnMap.get(columnName));    sb.append(": ");    sb.append(value);    sb.append(")");  }  return sb.toString();}  }
class C{  private String generateTempInputFile(JCas jcas) throws IOException {  File tempfile=File.createTempFile("MSTinput","txt");  BufferedWriter out=new BufferedWriter(new FileWriter(tempfile,true));  for (  Sentence sentence : select(jcas,Sentence.class)) {    int tokencount=0;    List<Token> tokens=selectCovered(jcas,Token.class,sentence);    for (    Token token : tokens) {      out.write(token.getCoveredText() + "\t");      tokencount++;    }    out.write("\n");    for (    Token token : tokens) {      out.write(token.getPos().getPosValue() + "\t");    }    out.write("\n");    for (int k=0; k < tokencount; k++) {      out.write("Dummy\t");    }    out.write("\n");    for (int i=0; i < tokencount; i++) {      out.write("0\t");    }    out.write("\n\n");  }  IOUtils.closeQuietly(out);  tempfile.deleteOnExit();  return tempfile.getPath();}  }
class C{  protected DOMException createDOMException(short type,String key,Object[] args){  return element.createDOMException(type,key,args);}  }
class C{  public int width(){  return mColumns;}  }
class C{  static Bitmap createIconBitmap(Drawable icon,Context context){synchronized (sCanvas) {    if (sIconWidth == -1) {      initStatics(context);    }    int width=sIconWidth;    int height=sIconHeight;    if (icon instanceof PaintDrawable) {      PaintDrawable painter=(PaintDrawable)icon;      painter.setIntrinsicWidth(width);      painter.setIntrinsicHeight(height);    } else     if (icon instanceof BitmapDrawable) {      BitmapDrawable bitmapDrawable=(BitmapDrawable)icon;      Bitmap bitmap=bitmapDrawable.getBitmap();      if (bitmap.getDensity() == Bitmap.DENSITY_NONE) {        bitmapDrawable.setTargetDensity(context.getResources().getDisplayMetrics());      }    }    int sourceWidth=icon.getIntrinsicWidth();    int sourceHeight=icon.getIntrinsicHeight();    if (sourceWidth > 0 && sourceHeight > 0) {      final float ratio=(float)sourceWidth / sourceHeight;      if (sourceWidth > sourceHeight) {        height=(int)(width / ratio);      } else       if (sourceHeight > sourceWidth) {        width=(int)(height * ratio);      }    }    int textureWidth=sIconTextureWidth;    int textureHeight=sIconTextureHeight;    final Bitmap bitmap=Bitmap.createBitmap(textureWidth,textureHeight,Bitmap.Config.ARGB_8888);    final Canvas canvas=sCanvas;    canvas.setBitmap(bitmap);    final int left=(textureWidth - width) / 2;    final int top=(textureHeight - height) / 2;    @SuppressWarnings("all") final boolean debug=false;    if (debug) {      canvas.drawColor(sColors[sColorIndex]);      if (++sColorIndex >= sColors.length)       sColorIndex=0;      Paint debugPaint=new Paint();      debugPaint.setColor(0xffcccc00);      canvas.drawRect(left,top,left + width,top + height,debugPaint);    }    sOldBounds.set(icon.getBounds());    icon.setBounds(left,top,left + width,top + height);    icon.draw(canvas);    icon.setBounds(sOldBounds);    canvas.setBitmap(null);    return bitmap;  }}  }
class C{  public void mergeWith(UnconditionalValueDerefSet fact,@CheckForNull ValueNumber skipMe,ValueNumberFactory valueNumberFactory){  if (UnconditionalValueDerefAnalysis.DEBUG) {    System.out.println("merge update of # " + System.identityHashCode(this) + " from "+ System.identityHashCode(fact));    System.out.println("update " + this);    System.out.println("with " + fact);  }  boolean resultForSkippedValue=false;  if (skipMe != null) {    resultForSkippedValue=valueNumbersUnconditionallyDereferenced.get(skipMe.getNumber());  }  valueNumbersUnconditionallyDereferenced.and(fact.valueNumbersUnconditionallyDereferenced);  if (skipMe != null) {    valueNumbersUnconditionallyDereferenced.set(skipMe.getNumber(),resultForSkippedValue);  }  for (int i=0; i < numValueNumbersInMethod; i++) {    ValueNumber vn=valueNumberFactory.forNumber(i);    if (vn.equals(skipMe)) {      continue;    }    Set<Location> factDerefLocationSet=fact.derefLocationSetMap.get(vn);    if (valueNumbersUnconditionallyDereferenced.get(i)) {      if (factDerefLocationSet != null && !factDerefLocationSet.isEmpty()) {        Set<Location> derefLocationSet=derefLocationSetMap.get(vn);        if (derefLocationSet == null) {          derefLocationSet=new HashSet<Location>();          derefLocationSetMap.put(vn,derefLocationSet);        }        derefLocationSet.addAll(fact.derefLocationSetMap.get(vn));      }    } else {      Set<Location> removed=derefLocationSetMap.remove(vn);      if (removed != null) {        if (UnconditionalValueDerefAnalysis.DEBUG) {          System.out.println("Goodbye: " + removed);        }      }    }  }}  }
class C{  @DataBoundConstructor public DockerOnceRetentionStrategy(int idleMinutes){  super(idleMinutes);  this.idleMinutes=idleMinutes;}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < this.length()) {    this.myArrayList.set(index,value);  } else {    while (index != this.length()) {      this.put(JSONObject.NULL);    }    this.put(value);  }  return this;}  }
class C{  public Wikipedia(DatabaseConfiguration dbConfig) throws WikiInitializationException {  logger.info("Creating Wikipedia object.");  this.language=dbConfig.getLanguage();  this.dbConfig=dbConfig;  this.idMapPages=new HashMap<Integer,Long>();  this.idMapCategories=new HashMap<Integer,Long>();  this.metaData=new MetaData(this);}  }
class C{  public void clearAll(){  if (items != null) {    items.clear();  }  if (emptyItems != null) {    emptyItems.clear();  }}  }
class C{  public void calculate_scores(){  score=0;  if (contents.length == 0) {    API api=API.v();    Set<InfoKind> source=api.getSourceInfoKinds(method);    Set<InfoKind> sink=api.getSinkInfoKinds(method);    if (is_system(method)) {      if (api.isSafeMethod(method))       score=0; else       if (api.isSpecMethod(method))       score=5; else       if (api.isBannedMethod(method))       score=6;      if (!source.isEmpty())       score+=1; else       if (!sink.isEmpty())       score+=2;    }    return;  }  for (  SourceCallChainInfo cci : contents) {    cci.calculate_scores();    calls+=cci.calls;    syscalls+=cci.syscalls;    if (cci.score > score)     score=cci.score;  }}  }
class C{  @Override protected ConfigurationParameter createConfigurationParameter(String name,String description,Object value,Class type,boolean userModifiable){  return new ConfigurationParameterJmxImpl(name,description,value,type,userModifiable);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof WaveAudioEssenceDescriptorBO)) {    return false;  }  WaveAudioEssenceDescriptorBO otherObject=(WaveAudioEssenceDescriptorBO)other;  if ((this.audio_sampling_rate == null) || (!this.audio_sampling_rate.equals(otherObject.audio_sampling_rate))) {    return false;  }  if ((this.channelcount == null) || (!this.channelcount.equals(otherObject.channelcount))) {    return false;  }  if ((this.quantization_bits == null) || (!this.quantization_bits.equals(otherObject.quantization_bits))) {    return false;  }  return !((this.block_align == null) || (!this.block_align.equals(otherObject.block_align)));}  }
class C{  public void testClone() throws Exception {  RelayLogPosition rlp=new RelayLogPosition();  File f=new File("/var/lib/mysql/mysql-bin.000077");  rlp.setPosition(f,2333308);  RelayLogPosition rlp2=rlp.clone();  assertEquals("File matches",f,rlp2.getFile());  assertEquals("offset matches",2333308,rlp2.getOffset());  assertTrue("File and offset match",rlp2.hasReached("mysql-bin.000077",2333308));}  }
class C{  public Rectangle(Double x,Double y,Double width,Double height){  this((int)Math.round(x),(int)Math.round(y),(int)Math.round(width),(int)Math.round(height));}  }
class C{  public static void destroyGracefullyAndWait(SystemProcess process,long timeout,TimeUnit unit) throws IOException, InterruptedException, TimeoutException {  Stopwatch sw=Stopwatch.createStarted();  process.destroyGracefully();  waitFor(process,sw,timeout,unit,"Destroyed {} gracefully","Could not destroy %s gracefully");}  }
class C{  public void updateNClob(String columnName,NClob nClob) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.opnotysupp").toString());}  }
class C{  public void close() throws IOException {  br.close();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.AWAIT_EXPRESSION__EXPRESSION:    setExpression((Expression)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.DERIVED_ATTRIBUTE___MODIFIER_1:    setModifier_1((String)newValue);  return;case UmplePackage.DERIVED_ATTRIBUTE___ANONYMOUS_DERIVED_ATTRIBUTE_11:getAnonymous_derivedAttribute_1_1().clear();getAnonymous_derivedAttribute_1_1().addAll((Collection<? extends Anonymous_derivedAttribute_1_>)newValue);return;case UmplePackage.DERIVED_ATTRIBUTE___ANONYMOUS_DERIVED_ATTRIBUTE_21:getAnonymous_derivedAttribute_2_1().clear();getAnonymous_derivedAttribute_2_1().addAll((Collection<? extends Anonymous_derivedAttribute_2_>)newValue);return;case UmplePackage.DERIVED_ATTRIBUTE___CODE_1:setCode_1((String)newValue);return;case UmplePackage.DERIVED_ATTRIBUTE___ANONYMOUS_DERIVED_ATTRIBUTE_31:getAnonymous_derivedAttribute_3_1().clear();getAnonymous_derivedAttribute_3_1().addAll((Collection<? extends Anonymous_derivedAttribute_3_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Instantiation findOwner(final int i){  if (!subroutine.get(i)) {    return null;  }  if (!dualCitizens.get(i)) {    return this;  }  Instantiation own=this;  for (Instantiation p=previous; p != null; p=p.previous) {    if (p.subroutine.get(i)) {      own=p;    }  }  return own;}  }
class C{  private PlotConfigurationHistory(){}  }
class C{  public Matrix uminus(){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=-A[i][j];    }  }  return X;}  }
class C{  private void generateLocators() throws SAXException {  DistributionLocator[] locators=this.system.getDistributionLocators();  for (int i=0; i < locators.length; i++) {    generateLocator(locators[i].getConfig());  }}  }
class C{  public static CIMObjectPath translateToStorageVolumePath(CIMObjectPath volumeViewPath){  String creationClassName=volumeViewPath.getKey(SVCREATIONCLASSNAME).getValue().toString();  String systemCreationClassName=volumeViewPath.getKey(SVSYSTEMCREATIONCLASSNAME).getValue().toString();  ;  String systemName=volumeViewPath.getKey(SVSYSTEMNAME).getValue().toString();  String id=volumeViewPath.getKey(SVDEVICEID).getValue().toString();  String host=volumeViewPath.getHost();  String namespace=volumeViewPath.getNamespace();  String objectTypeName=creationClassName;  CIMProperty[] volumeKeys={new CIMProperty<String>(SmisConstants.CP_CREATION_CLASS_NAME,CIMDataType.STRING_T,creationClassName,true,false,null),new CIMProperty<String>(SmisConstants.CP_DEVICE_ID,CIMDataType.STRING_T,id,true,false,null),new CIMProperty<String>(SmisConstants.CP_SYSTEM_CREATION_CLASS_NAME,CIMDataType.STRING_T,systemCreationClassName,true,false,null),new CIMProperty<String>(SmisConstants.CP_SYSTEM_NAME,CIMDataType.STRING_T,systemName,true,false,null)};  return new CIMObjectPath(null,host,null,namespace,objectTypeName,volumeKeys);}  }
class C{  public static <T>List<T> list(final HGSearchResult<T> result){  final List<T> outputList=new ArrayList<T>();  while (result.hasNext()) {    final T currentValue=result.next();    outputList.add(currentValue);  }  return outputList;}  }
class C{  public void delete(){  root=null;}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,ReplySender dm,boolean result,VersionedObjectList versions,ReplyException ex){  Assert.assertTrue(recipient != null,"PutAllReplyMessage NULL reply message");  PutAllReplyMessage m=new PutAllReplyMessage(processorId,result,versions,ex);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  public static void traceLock(String lockAction,ReentrantLock lock){  if (!ENABLED_TRACE) {    return;  }  write(lockAction + " " + getLockInfo(lock));}  }
class C{  public void reset(){  position=0;  limit=0;}  }
class C{  private void discoverAutoTieringPoliciesForStoragePool(StorageSystem driverStorageSystem,StoragePool storagePool,com.emc.storageos.db.client.model.StoragePool pool,Map<String,List<com.emc.storageos.db.client.model.StoragePool>> autoTieringPolicyPoolMap,Map<String,Map<String,List<String>>> autoTieringPolicyPropertiesMap){  List<CapabilityInstance> capabilities=storagePool.getCapabilities();  if (capabilities == null) {    return;  }  for (  CapabilityInstance capability : capabilities) {    String capabilityDefinitionUid=capability.getCapabilityDefinitionUid();    if ((capabilityDefinitionUid == null) || (capabilityDefinitionUid.isEmpty())) {      _log.error(String.format("Skipping capability %s with no capability definition UID for storage pool %s on system %s",capability.getName(),storagePool.getNativeId(),driverStorageSystem.getNativeId()));      continue;    }    CapabilityDefinition capabilityDefinition=capabilityDefinitions.get(capabilityDefinitionUid);    if (capabilityDefinition == null) {      _log.info(String.format("Skipping unsupported capability of type %s for storage pool %s on system %s",capabilityDefinitionUid,storagePool.getNativeId(),driverStorageSystem.getNativeId()));      continue;    }    if (AutoTieringPolicyCapabilityDefinition.CAPABILITY_UID.equals(capabilityDefinitionUid)) {      String policyId=capability.getPropertyValue(AutoTieringPolicyCapabilityDefinition.PROPERTY_NAME.POLICY_ID.name());      if (policyId == null) {        _log.error(String.format("Skipping auto tiering policy capability %s with no policy id for storage pool %s on system %s",capability.getName(),storagePool.getNativeId(),driverStorageSystem.getNativeId()));        continue;      }      if (autoTieringPolicyPoolMap.containsKey(policyId)) {        List<com.emc.storageos.db.client.model.StoragePool> autoTieringPolicyPools=autoTieringPolicyPoolMap.get(policyId);        autoTieringPolicyPools.add(pool);      } else {        List<com.emc.storageos.db.client.model.StoragePool> autoTieringPolicyPools=new ArrayList<>();        autoTieringPolicyPools.add(pool);        autoTieringPolicyPoolMap.put(policyId,autoTieringPolicyPools);      }      if (!autoTieringPolicyPropertiesMap.containsKey(policyId)) {        autoTieringPolicyPropertiesMap.put(policyId,capability.getProperties());      }    }  }}  }
class C{  CollectorThread(RawThreadModel model,CollectorContext context){  this(model,context,true);}  }
class C{  @Override public NClob createNClob() throws SQLException {  try {    int id=getNextId(TraceObject.CLOB);    debugCodeAssign("NClob",TraceObject.CLOB,id,"createNClob()");    checkClosedForWrite();    try {      Value v=session.getDataHandler().getLobStorage().createClob(new InputStreamReader(new ByteArrayInputStream(Utils.EMPTY_BYTES)),0);      session.addTemporaryLob(v);      return new JdbcClob(this,v,id);    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.073 -0500",hash_original_method="5DFAF4737CD1323AC5BCD66ECC931C62",hash_generated_method="A5059275FC8F144B7A8A5FD136ABE33B") public AttributesImpl atts(){  return theAtts;}  }
class C{  public JSONObject(){  this.map=new HashMap<String,Object>();}  }
class C{  public boolean isSetSyncOffer(){  return this.syncOffer != null;}  }
class C{  private void addEndpoints(){  for (  InetAddress addr : EndpointManager.getEndpointManager().getNetworkInterfaces()) {    if (addr instanceof Inet4Address || addr.isLoopbackAddress()) {      InetSocketAddress bindToAddress=new InetSocketAddress(addr,COAP_PORT);      addEndpoint(new CoapEndpoint(bindToAddress));    }  }}  }
class C{  public EncodingWriter create(){  return _writer;}  }
class C{  public Push timeout(final ITimeoutCallback callback){  if (this.timeoutHook.hasCallback()) {    throw new IllegalStateException("Only a single after hook can be applied to a Push");  }  this.timeoutHook.setCallback(callback);  return this;}  }
class C{  @Override public void onDrawChart(Canvas canvas,ArrayList<ChartSet> data){  final int nSets=data.size();  final int nEntries=data.get(0).size();  final int yZeroCoord=(int)this.getZeroPosition();  float offset;  BarSet barSet;  Bar bar;  for (int i=0; i < nEntries; i++) {    offset=data.get(0).getEntry(i).getX() - drawingOffset;    for (int j=0; j < nSets; j++) {      barSet=(BarSet)data.get(j);      bar=(Bar)barSet.getEntry(i);      if (!barSet.isVisible() || bar.getValue() == 0)       continue;      style.barPaint.setColor(bar.getColor());      style.applyAlpha(style.barPaint,barSet.getAlpha());      if (style.hasBarBackground)       drawBarBackground(canvas,offset,this.getInnerChartTop(),offset + barWidth,this.getInnerChartBottom());      if (bar.getValue() > 0)       drawBar(canvas,offset,bar.getY(),offset + barWidth,yZeroCoord); else       drawBar(canvas,offset,yZeroCoord,offset + barWidth,bar.getY());      offset+=barWidth;      if (j != nSets - 1)       offset+=style.setSpacing;    }  }}  }
class C{  @Override public Object clone(){  try {    Locale that=(Locale)super.clone();    return that;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  protected ExifTag addTag(ExifTag tag,int ifdId){  if (tag != null && ExifTag.isValidIfd(ifdId)) {    IfdData ifdData=getOrCreateIfdData(ifdId);    return ifdData.setTag(tag);  }  return null;}  }
class C{  public PertPanel(){  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  initComponents();  undoManager=new UndoRedoManager();  editor=new DefaultDrawingEditor();  editor.add(view);  addCreationButtonsTo(creationToolbar,editor);  ButtonFactory.addAttributesButtonsTo(attributesToolbar,editor);  JPopupButton pb=new JPopupButton();  pb.setItemFont(UIManager.getFont("MenuItem.font"));  labels.configureToolBarButton(pb,"actions");  pb.add(new DuplicateAction());  pb.addSeparator();  pb.add(new GroupAction(editor));  pb.add(new UngroupAction(editor));  pb.addSeparator();  pb.add(new BringToFrontAction(editor));  pb.add(new SendToBackAction(editor));  pb.addSeparator();  pb.add(new CutAction());  pb.add(new CopyAction());  pb.add(new PasteAction());  pb.add(new SelectAllAction());  pb.add(new SelectSameAction(editor));  pb.addSeparator();  pb.add(undoManager.getUndoAction());  pb.add(undoManager.getRedoAction());  JMenu m=new JMenu(labels.getString("view.zoomFactor.text"));  JRadioButtonMenuItem rbmi;  ButtonGroup group=new ButtonGroup();  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,0.1,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,0.25,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,0.5,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,0.75,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,1.0,null)));  rbmi.setSelected(true);  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,1.25,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,1.5,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,2,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,3,null)));  group.add(rbmi);  m.add(rbmi=new JRadioButtonMenuItem(new ZoomAction(editor,4,null)));  group.add(rbmi);  pb.add(m);  pb.setFocusable(false);  creationToolbar.addSeparator();  creationToolbar.add(pb);  DefaultDrawing drawing=new DefaultDrawing();  view.setDrawing(drawing);  drawing.addUndoableEditListener(undoManager);}  }
class C{  private Neuron calculateWinner(){  Neuron winner=null;  for (int i=0; i < getNeuronList().size(); i++) {    Neuron n=getNeuronList().get(i);    distance=findDistance(n);    if (distance < winDistance) {      winDistance=distance;      winner=n;    }  }  return winner;}  }
class C{  public boolean isTraceEnabled(){  return (getLogger().isLoggable(Level.FINEST));}  }
class C{  private void heapifyUp(int twopos,double cur,long val){  while (twopos > 0) {    final int parent=(twopos - 1) >>> 1;    double par=twoheap[parent];    if (cur >= par) {      break;    }    twoheap[twopos]=par;    twovals[twopos]=twovals[parent];    twopos=parent;  }  twoheap[twopos]=cur;  twovals[twopos]=val;}  }
class C{  public final void addAllHelperTextIds(@NonNull final Collection<Integer> resourceIds){  ensureNotNull(resourceIds,"The collection may not be null");  for (  int resourceId : resourceIds) {    addHelperTextId(resourceId);  }}  }
class C{  @SuppressWarnings("deprecation") public static String asciiBytesToString(byte[] val,int start,int length){  return new String(val,0,start,length);}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  private BigdataValue doDefaultJavaSerializationTest(final BigdataValue expected){  final byte[] data=SerializerUtil.serialize(expected);  final BigdataValue actual=(BigdataValue)SerializerUtil.deserialize(data);  assertTrue(expected.equals(actual));  return actual;}  }
class C{  @Override public void flush() throws IOException {}  }
class C{  public Point2D(double x,double y){  if (Double.isInfinite(x) || Double.isInfinite(y))   throw new IllegalArgumentException("Coordinates must be finite");  if (Double.isNaN(x) || Double.isNaN(y))   throw new IllegalArgumentException("Coordinates cannot be NaN");  if (x == 0.0)   this.x=0.0; else   this.x=x;  if (y == 0.0)   this.y=0.0; else   this.y=y;}  }
class C{  @SuppressWarnings("TypeMayBeWeakened") private static void populateCache(IgniteCache<Integer,Organization> orgCache,IgniteCache<EmployeeKey,Employee> employeeCache){  orgCache.put(1,new Organization("GridGain",new Address("1065 East Hillsdale Blvd, Foster City, CA",94404),OrganizationType.PRIVATE,new Timestamp(System.currentTimeMillis())));  orgCache.put(2,new Organization("Microsoft",new Address("1096 Eddy Street, San Francisco, CA",94109),OrganizationType.PRIVATE,new Timestamp(System.currentTimeMillis())));  employeeCache.put(new EmployeeKey(1,1),new Employee("James Wilson",12500,new Address("1096 Eddy Street, San Francisco, CA",94109),Arrays.asList("Human Resources","Customer Service")));  employeeCache.put(new EmployeeKey(2,1),new Employee("Daniel Adams",11000,new Address("184 Fidler Drive, San Antonio, TX",78130),Arrays.asList("Development","QA")));  employeeCache.put(new EmployeeKey(3,1),new Employee("Cristian Moss",12500,new Address("667 Jerry Dove Drive, Florence, SC",29501),Arrays.asList("Logistics")));  employeeCache.put(new EmployeeKey(4,2),new Employee("Allison Mathis",25300,new Address("2702 Freedom Lane, San Francisco, CA",94109),Arrays.asList("Development")));  employeeCache.put(new EmployeeKey(5,2),new Employee("Breana Robbin",6500,new Address("3960 Sundown Lane, Austin, TX",78130),Arrays.asList("Sales")));  employeeCache.put(new EmployeeKey(6,2),new Employee("Philip Horsley",19800,new Address("2803 Elsie Drive, Sioux Falls, SD",57104),Arrays.asList("Sales")));  employeeCache.put(new EmployeeKey(7,2),new Employee("Brian Peters",10600,new Address("1407 Pearlman Avenue, Boston, MA",12110),Arrays.asList("Development","QA")));}  }
class C{  public static boolean testAarCircle(Vector2fc min,Vector2fc max,Vector2fc center,float radiusSquared){  return testAarCircle(min.x(),min.y(),max.x(),max.y(),center.x(),center.y(),radiusSquared);}  }
class C{  public Serializer serializer(){  return serializer;}  }
class C{  public void testFictionalProgressChoiceMomentParsing(){  String xml="";  xml+=createStartMissionXml("start","Name");  xml+=createStartChoiceMomentWithFictionalProgressXML("start",1.0,"Choice Description","choice_2","Fictional progress.");  xml+=createChoiceWithFictionalProgressXML("fire","Example Choice Description 1",null,true,false,"Description 1","test_icon");  xml+=createChoiceXml("choice_2","Choice 2 description",null,false,false,"test_icon");  xml+=createEndMomentXml();  xml+=createEndMissionXml();  InputStream momentInputStream=new ByteArrayInputStream(xml.getBytes());  mMission=new Mission(mMissionData);  try {    mMission.readMoments(momentInputStream);  } catch (  MissionParseException e) {    e.printStackTrace();  }  ChoiceMoment choiceMoment=((ChoiceMoment)mMissionData.getMomentFromId("start"));  Choice fireChoice=choiceMoment.getMomentData().getChoiceById("fire");  Assert.assertEquals(1,fireChoice.getFictionalProgress().size());  Assert.assertEquals("Description 1",fireChoice.getFictionalProgress().get(0));  Choice choice2=choiceMoment.getMomentData().getChoiceById("choice_2");  Assert.assertEquals(0,choice2.getFictionalProgress().size());  Assert.assertEquals(1,mMissionData.getMomentFromId("start").getFictionalProgress().size());  Assert.assertEquals("Fictional progress.",mMissionData.getMomentFromId("start").getFictionalProgress().get(0));}  }
class C{  @Override public double adaptTicsMax(double max,double ticSize){  return max;}  }
class C{  public HttpsURL(final String user,final String password,final String host,final int port,final String path,final String query) throws URIException {  this(user,password,host,port,path,query,null);}  }
class C{  public int compareTo(final HttpVersion anotherVer){  if (anotherVer == null) {    throw new IllegalArgumentException("Version parameter may not be null");  }  int delta=getMajor() - anotherVer.getMajor();  if (delta == 0) {    delta=getMinor() - anotherVer.getMinor();  }  return delta;}  }
class C{  public void run(CarrierPlan plan){  if (plan == null)   throw new IllegalStateException("plan is missing.");  for (  ScheduledTour tour : plan.getScheduledTours()) {    new TimeAndSpaceTourRouter(router,network,travelTime).route(tour);  }}  }
class C{  public ASTree head(){  return left;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isPrimitive(){  return type.isPrimitive();}  }
class C{  public <T>Builder cellHeader(T content){  return cellHeader().text(content).end();}  }
class C{  public FastItemAdapter<Item> add(Item item){  mItemAdapter.add(item);  return this;}  }
class C{  public String relationFindTipText(){  return "The regular expression to use for removing parts of the relation " + "name, ignored if empty.";}  }
class C{  public static byte[] oneBytePacket(int address,boolean longAddr,byte arg1){  if (!addressCheck(address,longAddr)) {    return null;  }  byte[] retVal;  if (longAddr) {    retVal=new byte[4];    retVal[0]=(byte)(192 + ((address / 256) & 0x3F));    retVal[1]=(byte)(address & 0xFF);    retVal[2]=arg1;    retVal[3]=(byte)(retVal[0] ^ retVal[1] ^ retVal[2]);  } else {    retVal=new byte[3];    retVal[0]=(byte)(address & 0xFF);    retVal[1]=arg1;    retVal[2]=(byte)(retVal[0] ^ retVal[1]);  }  return retVal;}  }
class C{  public VariableReference addFieldFor(TestCase test,VariableReference callee,GenericField field,int position) throws ConstructionFailedException {  logger.debug("Adding field " + field + " for variable "+ callee);  if (position <= callee.getStPosition())   throw new ConstructionFailedException("Cannot insert call on object before the object is defined");  currentRecursion.clear();  FieldReference fieldVar=new FieldReference(test,field,callee);  int length=test.size();  VariableReference value=createOrReuseVariable(test,fieldVar.getType(),position,0,callee,true,false,false);  int newLength=test.size();  position+=(newLength - length);  Statement st=new AssignmentStatement(test,fieldVar,value);  VariableReference ret=test.addStatement(st,position);  ret.setDistance(callee.getDistance() + 1);  assert (test.isValid());  return ret;}  }
class C{  public ContainerGenerator(IPath containerPath){  super();  this.containerFullPath=containerPath;}  }
class C{  public Matrix4(Matrix4 matrix){  if (matrix == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix4","constructor","missingMatrix"));  }  System.arraycopy(matrix.m,0,this.m,0,16);}  }
class C{  public NoTalkbackSlimException(final Throwable t,final ErrorType type,final String... args){  super(false,t,type,args);}  }
class C{  private void unsetBoundsAction(){  NullBounds bounds=new NullBounds();synchronized (Simulation.LOCK) {    this.simulation.getWorld().setBounds(bounds);  }  this.bounds.setUserObject(bounds);  this.model.reload(this.bounds);}  }
class C{  static int computeRetainedItems(int k,long n){  int bbCnt=computeBaseBufferItems(k,n);  long bitPattern=computeBitPattern(k,n);  int validLevels=Long.bitCount(bitPattern);  return bbCnt + validLevels * k;}  }
class C{  private GVCongruenceClass createCongruenceClass(Object label){  int index=B.size();  GVCongruenceClass result=new GVCongruenceClass(index,label);  B.add(result);  return result;}  }
class C{  public IBlockState withRotation(IBlockState state,Rotation rot){  return state.withProperty(FACING,rot.rotate((EnumFacing)state.getValue(FACING)));}  }
class C{  public CasualtyList(final List<Unit> killed,final List<Unit> damaged){  if (killed == null) {    throw new IllegalArgumentException("null killed");  }  if (damaged == null) {    throw new IllegalArgumentException("null damaged");  }  m_killed=new ArrayList<>(killed);  m_damaged=new ArrayList<>(damaged);}  }
class C{  public boolean isUserAdded(){  return fId == null;}  }
class C{  public SendEventScheduler(){  ScheduledExecutorService service=Executors.newScheduledThreadPool(1);  service.scheduleAtFixedRate(this,CallHomeConstants.SERVICE_START_LAG,CallHomeConstants.LAG_BETWEEN_RUNS,TimeUnit.SECONDS);}  }
class C{  public void quit(){  super.quit();  for (  JFrame frame : displayFrames) {    if (frame != null) {      frame.dispose();    }    frame=null;  }  for (  Display2D display : displays) {    display=null;  }}  }
class C{  public PublishAssetPackVisualPanel2(){  initComponents();}  }
class C{  protected int read(byte[] buffer) throws IOException {  return mTiffStream.read(buffer);}  }
class C{  public DisjunctionMaxQuery(Collection<Query> disjuncts,float tieBreakerMultiplier){  Objects.requireNonNull(disjuncts,"Collection of Querys must not be null");  this.tieBreakerMultiplier=tieBreakerMultiplier;  this.disjuncts=disjuncts.toArray(new Query[disjuncts.size()]);}  }
class C{  @Override public ServiceCall<?> create(final ServiceCallCreateParams params){  throw new UnsupportedOperationException("deprecated");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public boolean isModifiable(){  return this.modifiable;}  }
class C{  private void correctTooWide(int childCount){  int lastPosition=mFirstPosition + childCount - 1;  if (lastPosition == mItemCount - 1 && childCount > 0) {    final View lastChild=getChildAt(childCount - 1);    final int lastRight=lastChild.getRight();    final int end=(getRight() - getLeft()) - mListPadding.right;    int rightOffset=end - lastRight;    View firstChild=getChildAt(0);    final int firstLeft=firstChild.getLeft();    if (rightOffset > 0 && (mFirstPosition > 0 || firstLeft < mListPadding.top)) {      if (mFirstPosition == 0) {        rightOffset=Math.min(rightOffset,mListPadding.top - firstLeft);      }      offsetChildrenLeftAndRight(rightOffset);      if (mFirstPosition > 0) {        fillLeft(mFirstPosition - 1,firstChild.getLeft() - mDividerWidth);        adjustViewsLeftOrRight();      }    }  }}  }
class C{  public void validate(Set<String> tableColNames,JetFormat format){  DatabaseImpl.validateIdentifierName(getName(),format.MAX_INDEX_NAME_LENGTH,"index");  if (getColumns().isEmpty()) {    throw new IllegalArgumentException(withErrorContext("index has no columns"));  }  if (getColumns().size() > IndexData.MAX_COLUMNS) {    throw new IllegalArgumentException(withErrorContext("index has too many columns, max " + IndexData.MAX_COLUMNS));  }  Set<String> idxColNames=new HashSet<String>();  for (  Column col : getColumns()) {    String idxColName=col.getName().toUpperCase();    if (!idxColNames.add(idxColName)) {      throw new IllegalArgumentException(withErrorContext("duplicate column name " + col.getName() + " in index"));    }    if (!tableColNames.contains(idxColName)) {      throw new IllegalArgumentException(withErrorContext("column named " + col.getName() + " not found in table"));    }  }}  }
class C{  @Override @SuppressWarnings("rawtypes") public void init(NamedList args){  if (args != null) {    Object o;    o=args.get("defaults");    if (o != null && o instanceof NamedList) {      defaults=SolrParams.toSolrParams((NamedList)o);    } else {      defaults=SolrParams.toSolrParams(args);    }    o=args.get("appends");    if (o != null && o instanceof NamedList) {      appends=SolrParams.toSolrParams((NamedList)o);    }    o=args.get("invariants");    if (o != null && o instanceof NamedList) {      invariants=SolrParams.toSolrParams((NamedList)o);    }  }}  }
class C{  public void unregister(VCardPropertyScribe<? extends VCardProperty> scribe){  extendedByName.remove(scribe.getPropertyName().toUpperCase());  extendedByClass.remove(scribe.getPropertyClass());  extendedByQName.remove(scribe.getQName());}  }
class C{  public static double exp(double lambda){  if (!(lambda > 0.0))   throw new IllegalArgumentException("Rate lambda must be positive");  return -Math.log(1 - uniform()) / lambda;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long x=getLong(stack);  createLocalPat();  return (x == 0) ? "" : longdf.format(new java.util.Date(x));}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(DESCRIPTIONS)) {    accessDescriptions=Collections.<AccessDescription>emptyList();  } else {    throw new IOException("Attribute name [" + name + "] not recognized by "+ "CertAttrSet:SubjectInfoAccessExtension.");  }  encodeThis();}  }
class C{  public void waitForDecodingToFinish(){  while (isDecoding) {    try {      Thread.sleep(100);    } catch (    final InterruptedException e) {      LogWriter.writeLog("Exception: " + e.getMessage());      isDecoding=false;    }  }}  }
class C{  private void paintBackgroundCap(Graphics2D g,int width,int height){  Shape s=shapeGenerator.createScrollCap(0,0,width,height);  dropShadow.fill(g,s);  fillScrollBarButtonInteriorColors(g,s,isIncrease,buttonsTogether);}  }
class C{  public void generateIdPrefix(StringBuilder cb){  cb.append(getServerSessionId());}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void advertisePresence(String presence){  if (!latestAdvertisedPresence.equals(presence)) {    latestAdvertisedPresence=presence;    Log.d(LOG_TAG,"Advertising presence " + presence);    myUser.updatePresence(presence,null,null);  }}  }
class C{  public void trimToSize(){  modCount++;  int oldCapacity=elementData.length;  if (size < oldCapacity) {    Object[] oldData=elementData;    elementData=new Object[size];    System.arraycopy(oldData,0,elementData,0,size);  }}  }
class C{  private static void stepInCodeNode(final INaviCodeNode node,final UnrelocatedAddress address,final Set<BreakpointAddress> instructions){  final int instructionIndex=CCodeNodeHelpers.getInstruction(node,address.getAddress());  if (instructionIndex != -1) {    if (instructionIndex < node.instructionCount() - 1) {      final INaviInstruction instruction=Iterables.get(node.getInstructions(),instructionIndex + 1);      instructions.add(new BreakpointAddress(instruction.getModule(),new UnrelocatedAddress(instruction.getAddress())));    } else {      instructions.addAll(CSteppingHelper.getSuccessors(node));    }  }}  }
class C{  final void initDocument(int documentNumber){  m_docHandle=documentNumber << DOCHANDLE_SHIFT;  nodes.writeSlot(0,DOCUMENT_NODE,-1,-1,0);  done=false;}  }
class C{  @Override public void close() throws IOException {  PersistentConnection local=connection;  if (local != null) {    local.inner.close();  }  if (factory instanceof ServerRpcConnectionFactory) {    ((ServerRpcConnectionFactory)factory).close();  }}  }
class C{  public static <T1,T2,T3,R>Promise<R> join(Promise<T1> p1,Promise<T2> p2,Promise<T3> p3,final Func3<T1,T2,T3,R> joinFunction){  return new Promise<R>(Observable.zip(p1.observable,p2.observable,p3.observable,joinFunction));}  }
class C{  protected final void flushWriter() throws org.xml.sax.SAXException {  final java.io.Writer writer=m_writer;  if (null != writer) {    try {      if (writer instanceof WriterToUTF8Buffered) {        if (m_shouldFlush)         ((WriterToUTF8Buffered)writer).flush(); else         ((WriterToUTF8Buffered)writer).flushBuffer();      }      if (writer instanceof WriterToASCI) {        if (m_shouldFlush)         writer.flush();      } else {        writer.flush();      }    } catch (    IOException ioe) {      throw new org.xml.sax.SAXException(ioe);    }  }}  }
class C{  public boolean isForce(){  return force;}  }
class C{  public void trainCount(TextEntry text,List<String> output,int start,int end){  text.input("say " + start);  waitForOutput(output);  for (int index=start + 1; index < end; index++) {    text.input(String.valueOf(index));    String response=waitForOutput(output);    if (!response.equals(String.valueOf(index + 1))) {      text.input(new TextInput(String.valueOf(index + 1),true,false));      response=waitForOutput(output);      Utils.sleep(1000);    }    index++;  }  text.input("say " + end);  waitForOutput(output);  for (int index=end - 1; index >= start; index--) {    text.input(String.valueOf(index));    String response=waitForOutput(output);    if (!response.equals(String.valueOf(index - 1))) {      text.input(new TextInput(String.valueOf(index - 1),true,false));      response=waitForOutput(output);      Utils.sleep(1000);    }    index--;  }}  }
class C{  @Override public RES next(REQ req){  writeTraceLog(req,middlewareName);  if (predicate.test(req)) {    RES res=middleware.handle(req,next);    writeTraceLog(res,middlewareName);    return res;  } else   if (next != null) {    RES res=(RES)next.next(req);    writeTraceLog(res,middlewareName);    return res;  } else {    return null;  }}  }
class C{  public void endDocument() throws ODataRenderException {  try {    xmlWriter.writeEndDocument();    xmlWriter.flush();  } catch (  XMLStreamException e) {    LOG.error("Not possible to end stream XML");    throw new ODataRenderException("Not possible to end stream XML: ",e);  }}  }
class C{  public void testResign() throws ChessParseError {  Game game=new Game(null,new TimeControlData());  assertEquals(Game.GameState.ALIVE,game.getGameState());  game.processString("f3");  assertEquals(Game.GameState.ALIVE,game.getGameState());  game.processString("resign");  assertEquals(Game.GameState.RESIGN_BLACK,game.getGameState());  game.undoMove();  assertEquals(Game.GameState.ALIVE,game.getGameState());  game.processString("f3");  game.processString("e5");  game.processString("resign");  assertEquals(Game.GameState.RESIGN_WHITE,game.getGameState());  game.undoMove();  game.processString("e5");  game.processString("g4");  game.processString("Qh4");  assertEquals(Game.GameState.BLACK_MATE,game.getGameState());  game.processString("resign");  assertEquals(Game.GameState.BLACK_MATE,game.getGameState());  String fen="8/1p6/2rp2p1/8/p3Qqk1/6R1/PP4PK/8 b - - 3 42";  game.setPos(TextIO.readFEN(fen));  game.processString("resign");  assertEquals(Game.GameState.RESIGN_BLACK,game.getGameState());}  }
class C{  public CoapClient useCONs(){  this.type=Type.CON;  return this;}  }
class C{  protected Instances metaFormat(Instances instances) throws Exception {  ArrayList<Attribute> attributes=new ArrayList<Attribute>();  Instances metaFormat;  for (int k=0; k < m_Classifiers.length; k++) {    Classifier classifier=(Classifier)getClassifier(k);    String name=classifier.getClass().getName() + "-" + (k + 1);    if (m_BaseFormat.classAttribute().isNumeric()) {      attributes.add(new Attribute(name));    } else {      for (int j=0; j < m_BaseFormat.classAttribute().numValues(); j++) {        attributes.add(new Attribute(name + ":" + m_BaseFormat.classAttribute().value(j)));      }    }  }  attributes.add((Attribute)m_BaseFormat.classAttribute().copy());  metaFormat=new Instances("Meta format",attributes,0);  metaFormat.setClassIndex(metaFormat.numAttributes() - 1);  return metaFormat;}  }
class C{  public synchronized void resetContactList(){  contactList=null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  DefineCommand(Session session){  super(session);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.THROW_STATEMENT__EXPRESSION:    setExpression((Expression)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public CommonGramsQueryFilterFactory(Map<String,String> args){  super(args);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ImPackage.DELEGATING_MEMBER__DELEGATION_BASE_TYPE:    setDelegationBaseType((SymbolTableEntryOriginal)newValue);  return;case ImPackage.DELEGATING_MEMBER__DELEGATION_SUPER_CLASS_STEPS:setDelegationSuperClassSteps((Integer)newValue);return;case ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET:setDelegationTarget((SymbolTableEntryOriginal)newValue);return;case ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET_IS_ABSTRACT:setDelegationTargetIsAbstract((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void unwindStackFrame(){  ip=invalidIP;  getGPRs().set(FRAME_POINTER.value(),Magic.getCallerFramePointer(getInnermostFramePointer()).toWord());}  }
class C{  @Bean public AnyContainerConfigurationViewFactory anyContainerConfigurationViewFactory(){  return new AnyContainerConfigurationViewFactory().withContainerConfigurationViewFactory(new WinePrefixContainerConfigurationViewFactory());}  }
class C{  public static String formatSize(long bytes,boolean si){  int unit=si ? 1000 : 1024;  if (bytes < unit) {    return bytes + " B";  }  int exp=(int)(Math.log(bytes) / Math.log(unit));  String pre=(si ? "kMGTPE" : "KMGTPE").charAt(exp - 1) + (si ? "" : "i");  return String.format("%.1f %sB",bytes / Math.pow(unit,exp),pre);}  }
class C{  private static File createReserveDiskCacheDir(Context context){  File cacheDir=StorageUtils.getCacheDirectory(context,false);  File individualDir=new File(cacheDir,"uil-images");  if (individualDir.exists() || individualDir.mkdir()) {    cacheDir=individualDir;  }  return cacheDir;}  }
class C{  public synchronized int loadData(final Uri uri){  int numBytesLoaded=0;  String msg;  InputStream inStr;  try {    inStr=context.getContentResolver().openInputStream(uri);    numBytesLoaded=inStr.available();    msg=String.format("%d Bytes",numBytesLoaded);    ObjectInputStream oIn=new ObjectInputStream(inStr);    int currService=oIn.readInt();    if (currService != 0)     elm.setService(currService,false);    ObdProt.PidPvs=(PvList)oIn.readObject();    ObdProt.VidPvs=(PvList)oIn.readObject();    ObdProt.tCodes=(PvList)oIn.readObject();    oIn.close();    Log.i(context.getString(R.string.load),context.getString(R.string.loaded).concat(" ").concat(msg));    Toast.makeText(context,context.getString(R.string.loaded).concat(" ").concat(msg),Toast.LENGTH_SHORT).show();  } catch (  Exception ex) {    Toast.makeText(context,ex.getLocalizedMessage(),Toast.LENGTH_SHORT).show();    Log.e(context.getString(R.string.load),ex.getMessage());  }  return numBytesLoaded;}  }
class C{  public boolean actionClosingForm(Component c) throws BasicException {  if (m_Dirty.isDirty()) {    int res=JOptionPane.showConfirmDialog(c,LocalRes.getIntString("message.wannasave"),LocalRes.getIntString("title.editor"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);    if (res == JOptionPane.YES_OPTION) {      saveData();      return true;    } else     if (res == JOptionPane.NO_OPTION) {      refreshCurrent();      return true;    } else {      return false;    }  } else {    return true;  }}  }
class C{  protected void addCheckedStandardDefaults(QualifierDefaults defs){  if (this.everUseFlow) {    Set<? extends AnnotationMirror> tops=this.qualHierarchy.getTopAnnotations();    Set<? extends AnnotationMirror> bottoms=this.qualHierarchy.getBottomAnnotations();    defs.addClimbStandardDefaults(tops,bottoms);  }}  }
class C{  public static OutputStream leftShift(Process self,byte[] value) throws IOException {  return IOGroovyMethods.leftShift(self.getOutputStream(),value);}  }
class C{  public static Short[] toObject(final short[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;  }  final Short[] result=new Short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=new Short(array[i]);  }  return result;}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public synchronized void finer(String sourceClass,String sourceMethod,String msg){  LogRecord record=new LogRecord(Level.FINER,msg);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  log(record);}  }
class C{  public void generatePotentialMenuTimes(ArrayList<LocalTime> desiredTimes){  potentialMenuTimes=new ArrayList<LocalTime>();  if (desiredTimes == null || desiredTimes.isEmpty()) {    return;  }  TreeSet<LocalTime> timeSet=new TreeSet<LocalTime>();  for (  LocalTime desiredTime : desiredTimes) {    if (desiredTime != null) {      timeSet.add(desiredTime);    }  }  for (  LocalTime timeSetEntry : timeSet) {    potentialMenuTimes.add(timeSetEntry);  }}  }
class C{  public static byte[] encodeBase64URLSafe(final byte[] binaryData){  return encodeBase64(binaryData,false,true);}  }
class C{  public SQLFeatureNotSupportedException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public static void isId(String member,String value,boolean flag) throws ValidationException {  isId(member,value,flag,ADMValidator.LENGTH_ID);}  }
class C{  public Role(String name,String description){  super(name,description);  Assert.hasText(name,"Not allowed to create a Role with an empty name");}  }
