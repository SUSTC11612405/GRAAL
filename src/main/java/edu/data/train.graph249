class C{  public ThriftCall(int seqId,Class<?> serviceType,String method,Iterable<?> args){  this(seqId,serviceType,method,ImmutableList.copyOf(args));}  }
class C{  public void release(){  Enumeration<PerThreadData> enumeration=perThreadDataVector.elements();  while (enumeration.hasMoreElements()) {    PerThreadData ptd=enumeration.nextElement();    if (ptd.handlers != null) {      for (int i=ptd.current; i >= 0; i--) {        if (ptd.handlers[i] != null) {          ptd.handlers[i].release();        }      }    }  }}  }
class C{  public void startAssign(Environment env,Context ctx,Assembler asm){  if (!setter.isStatic()) {    throw new CompilerError("startAssign isStatic");  }  if (!field.isStatic()) {    base.codeValue(env,ctx,asm);    depth=1;  } else {    if (base != null) {      base.code(env,ctx,asm);    }    depth=0;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object obj=stack.pop();  SeriesInfo si=getSeriesInfo(stack);  if (si == null || obj == null)   return "";  if (obj instanceof Person)   return si.getCharacterForActor((Person)obj); else   return si.guessCharacterForActor(obj.toString());}  }
class C{  private void evaluatePopup(final MouseEvent e){  if (e.isPopupTrigger()) {    if (getSelectedOperator() != null) {      createOperatorPopupMenu().show(operatorGroupTree,e.getX(),e.getY());    }  }}  }
class C{  private boolean addViewItem(int index,boolean first){  View view=getItemView(index);  if (view != null) {    if (first) {      itemsLayout.addView(view,0);    } else {      itemsLayout.addView(view);    }    return true;  }  return false;}  }
class C{  public void mouseDrag(MouseEvent e){}  }
class C{  public boolean isZoomButtonsVisible(){  return mZoomButtonsVisible;}  }
class C{  public LocalSocket accept() throws IOException {  LocalSocketImpl acceptedImpl=new LocalSocketImpl();  impl.accept(acceptedImpl);  return new LocalSocket(acceptedImpl);}  }
class C{  public void initializeDefinition(String tableName,String columnName){  m_table=tableName;  m_column=columnName;  s_logger.log(Level.FINEST,toString());}  }
class C{  private void cacheGenerators(GenericClass clazz) throws ConstructionFailedException {  if (generatorCache.containsKey(clazz)) {    return;  }  logger.debug("1. Caching generators for {}",clazz);  Set<GenericAccessibleObject<?>> targetGenerators=new LinkedHashSet<>();  if (clazz.isObject()) {    logger.debug("2. Target class is object: {}",clazz);    for (    GenericClass generatorClazz : generators.keySet()) {      if (generatorClazz.isObject()) {        targetGenerators.addAll(generators.get(generatorClazz));      }    }  } else {    logger.debug("2. Target class is not object: {}",clazz);    for (    GenericClass generatorClazz : generators.keySet()) {      if (generatorClazz.canBeInstantiatedTo(clazz)) {        GenericClass instantiatedGeneratorClazz=generatorClazz.getWithParametersFromSuperclass(clazz);        logger.debug("Instantiated type: {} for {} and superclass {}",instantiatedGeneratorClazz,generatorClazz,clazz);        for (        GenericAccessibleObject<?> generator : generators.get(generatorClazz)) {          logger.debug("5. current instantiated generator: {}",generator);          try {            GenericAccessibleObject<?> newGenerator=generator.copyWithOwnerFromReturnType(instantiatedGeneratorClazz);            boolean hadTypeParameters=false;            if (newGenerator.getOwnerClass().hasWildcardOrTypeVariables()) {              logger.debug("Instantiating type parameters of owner type: {}",newGenerator.getOwnerClass());              GenericClass concreteClass=newGenerator.getOwnerClass().getGenericInstantiation(clazz.getTypeVariableMap());              newGenerator=newGenerator.copyWithNewOwner(concreteClass);              hadTypeParameters=true;            }            if (newGenerator.hasTypeParameters()) {              logger.debug("Instantiating type parameters");              newGenerator=newGenerator.getGenericInstantiationFromReturnValue(clazz);              hadTypeParameters=true;            }            logger.debug("Current generator: {}",newGenerator);            if ((!hadTypeParameters && generatorClazz.equals(clazz)) || clazz.isAssignableFrom(newGenerator.getGeneratedType())) {              logger.debug("Got new generator: {} which generated: {}",newGenerator,newGenerator.getGeneratedClass());              targetGenerators.add(newGenerator);            } else             if (logger.isDebugEnabled()) {              logger.debug("New generator not assignable: {}",newGenerator);              logger.debug("Had type parameters: {}",hadTypeParameters);              logger.debug("generatorClazz.equals(clazz): {}",generatorClazz.equals(clazz));              try {                logger.debug("clazz.isAssignableFrom({}): ",newGenerator.getGeneratedType());                logger.debug("                        {}",clazz.isAssignableFrom(newGenerator.getGeneratedType()));              } catch (              Throwable t) {                logger.debug("Error",t);              }            }          } catch (          ConstructionFailedException e) {            logger.debug("5. ERROR",e);          }        }      } else {        logger.debug("4. generator {} CANNOT be instantiated to {}",generatorClazz,clazz);        for (        GenericClass boundClass : generatorClazz.getGenericBounds()) {          CastClassManager.getInstance().addCastClass(boundClass,0);        }      }    }    logger.debug("Found generators for {}: {}",clazz,targetGenerators.size());  }  logger.debug("]");  generatorCache.put(clazz,targetGenerators);}  }
class C{  public void destroy(){  if (mWeakActivity == null) {    throw new OverTheTopLayerException("Could not create the layer as not activity reference was provided.");  }  Activity activity=mWeakActivity.get();  if (activity != null) {    ViewGroup attachingView=null;    if (mWeakRootView != null && mWeakRootView.get() != null) {      attachingView=mWeakRootView.get();    } else {      attachingView=(ViewGroup)activity.findViewById(android.R.id.content);    }    if (mCreatedOttLayer != null) {      attachingView.removeView(mCreatedOttLayer);      mCreatedOttLayer=null;    }  } else {    Log.e(OverTheTopLayer.class.getSimpleName(),"Could not destroy the layer as the layer was never created.");  }}  }
class C{  public CacheRuntimeException(Throwable cause){  super(cause);}  }
class C{  public boolean removeMonitor(StatisticsMonitor monitor){synchronized (this) {    boolean removed=false;    List<StatisticsMonitor> oldMonitors=this.monitors;    if (oldMonitors.contains(monitor)) {      List<StatisticsMonitor> newMonitors=new ArrayList<StatisticsMonitor>(oldMonitors);      removed=newMonitors.remove(monitor);      this.monitors=Collections.unmodifiableList(newMonitors);    }    if (enableMonitorThread && this.monitors.isEmpty() && this.notifier != null) {      this.notifier.stop();      this.notifier=null;    }    return removed;  }}  }
class C{  private void unregisterCertificate(X509Certificate x509Cert) throws InvalidCertificate, StorageFault, InvalidSession {  final String methodName="unregisterCertificate(): ";  log.trace(methodName + "Entry with input x509Cert[" + (x509Cert != null ? "***" : null)+ "]");  try {    if (_sslUtil.certificateIsTrusted(x509Cert)) {      log.debug(methodName + "certificate removed from trusted");      _sslUtil.removeCertificateFromTrustStore((Certificate)x509Cert);      _sslUtil.refreshTrustStore();      if (_sslUtil.certificateIsTrusted(x509Cert)) {        throw FaultUtil.StorageFault("Certificate could not be removed from the trustStore.");      }      invalidateSession();    } else {      throw FaultUtil.InvalidCertificate("Certificate not registered.");    }  } catch (  InvalidCertificate ic) {    log.error(methodName + "Invalid certificate exception",ic);    throw ic;  }catch (  InvalidSession is) {    log.error(methodName + "Invalid session exception",is);    throw is;  }catch (  Exception e) {    log.error(methodName + "unknown exception occured",e);    throw FaultUtil.StorageFault("runtime ",e);  }  log.trace(methodName + "Exit");}  }
class C{  private ElementsOrAttributes toElementsOrAttributes(String value,ElementsOrAttributes defaultValue){  if (value == null)   return defaultValue;  ElementsOrAttributes eoa=ElementsOrAttributes.NEITHER;  if (value.indexOf("elements") >= 0)   eoa=eoa.addElements();  if (value.indexOf("attributes") >= 0)   eoa=eoa.addAttributes();  return eoa;}  }
class C{  public Object clone() throws java.lang.CloneNotSupportedException {  return (super.clone());}  }
class C{  public StringLiteralConcatenation extendsWith(StringLiteral lit){  return new StringLiteralConcatenation(this,lit);}  }
class C{  protected void processRTTmeasurement(long measuredRTT,Exchange exchange,int retransmissionCount){  return;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:20.468 -0500",hash_original_method="A7ED1EB61B0FBCD2BEBD15D1C1303F9C",hash_generated_method="A7ED1EB61B0FBCD2BEBD15D1C1303F9C") void applyTransformForChildAtIndex(View child,int relativeIndex){}  }
class C{  private void addSelectionColumn(GridField mField){  log.config(mField.getHeader());  int displayLength=mField.getDisplayLength();  if (displayLength > FIELDLENGTH)   mField.setDisplayLength(FIELDLENGTH); else   displayLength=0;  VEditor editor=null;  CLabel label=null;  if (mField.isLookup()) {    VLookup vl=new VLookup(mField.getColumnName(),false,false,true,mField.getLookup());    vl.setField(mField);    vl.setName(mField.getColumnName());    editor=vl;    if (displayLength > 0)     mField.setDisplayLength(displayLength);    label=VEditorFactory.getLabel(mField);    m_sLine++;    scontentPanel.add(label,new GridBagConstraints(1,m_sLine,1,1,0.0,0.0,GridBagConstraints.NORTHEAST,GridBagConstraints.NONE,new Insets(7,5,5,5),0,0));    scontentPanel.add((Component)editor,new GridBagConstraints(2,m_sLine,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,5,5),0,0));  } else {    if (mField.isRange()) {      new Box(BoxLayout.X_AXIS);      Box box=Box.createHorizontalBox();      editor=VEditorFactory.getEditor(mField,false);      label=VEditorFactory.getLabel(mField);      editor.setMandatory(false);      editor.setReadWrite(true);      box.add((Component)editor);      VEditor editor2=VEditorFactory.getEditor(mField,false);      editor2.setMandatory(false);      editor2.setReadWrite(true);      m_sEditors2.add(editor2);      if (editor2 instanceof CTextField) {        ((CTextField)editor2).addActionListener(this);      }      CLabel separator=new CLabel(" - ");      box.add(separator);      box.add((Component)editor2);      m_sLine++;      scontentPanel.add(label,new GridBagConstraints(1,m_sLine,1,1,0.0,0.0,GridBagConstraints.NORTHEAST,GridBagConstraints.NONE,new Insets(7,5,5,5),0,0));      scontentPanel.add((Component)box,new GridBagConstraints(2,m_sLine,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,5,5),0,0));      if (displayLength > 0)       mField.setDisplayLength(displayLength);    } else {      editor=VEditorFactory.getEditor(mField,false);      editor.setMandatory(false);      editor.setReadWrite(true);      label=VEditorFactory.getLabel(mField);      if (displayLength > 0)       mField.setDisplayLength(displayLength);      label=VEditorFactory.getLabel(mField);      m_sLine++;      scontentPanel.add(label,new GridBagConstraints(1,m_sLine,1,1,0.0,0.0,GridBagConstraints.NORTHEAST,GridBagConstraints.NONE,new Insets(7,5,5,5),0,0));      scontentPanel.add((Component)editor,new GridBagConstraints(2,m_sLine,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,5,5),0,0));      m_sEditors2.add(null);    }  }  if (editor instanceof CTextField) {    ((CTextField)editor).addActionListener(this);  }  m_sEditors.add(editor);}  }
class C{  public void copy(Hashtable props){  super.copy(props);  init(props);}  }
class C{  private void decrementWorkerCount(){  do {  } while (!compareAndDecrementWorkerCount(ctl.get()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:10.707 -0500",hash_original_method="7078CFBD339BE392BC3DC074EBD75CC7",hash_generated_method="6D5CE8F064820FA605D14D95AEFC54DD") public void addNewsgroup(String newsgroup){  if (__newsgroupCount++ > 0)   __newsgroups.append(',');  __newsgroups.append(newsgroup);}  }
class C{  void updateRunningButton(){  boolean running=clock.getRun();  if (running) {    clockStatus.setText(Bundle.getMessage("ClockRunning"));    startButton.setVisible(false);    stopButton.setVisible(true);  } else {    clockStatus.setText(Bundle.getMessage("ClockStopped"));    startButton.setVisible(true);    stopButton.setVisible(false);  }  clockStatus.setVisible(true);}  }
class C{  public static Matcher<AnnotatedElement> annotatedWith(final Annotation annotation){  return new AnnotatedWith(annotation);}  }
class C{  public String TO_DATE(Timestamp time,boolean dayOnly){  if (time == null) {    if (dayOnly)     return "current_date()";    return "now()";  }  StringBuffer dateString=new StringBuffer("TO_DATE('");  String myDate=time.toString();  if (dayOnly) {    dateString.append(myDate.substring(0,10));    dateString.append("','YYYY-MM-DD')");  } else {    dateString.append(myDate.substring(0,myDate.indexOf('.')));    dateString.append("','YYYY-MM-DD HH24:MI:SS')");  }  return dateString.toString();}  }
class C{  public StrTokenizer(String input,StrMatcher delim){  this(input);  setDelimiterMatcher(delim);}  }
class C{  public static void branchWithCommit(Collection<GitRepository> repositories,String name){  GitScenarios.branchWithCommit(repositories,name,"branch_file.txt","branch content");}  }
class C{  @Override protected void register(PackagerFactory packagerFactory){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void populateDAO(Object value,int row,int column){  TradeOrder element=null;  int i=0;  for (  final TradeOrder tradeOrder : getData().getTradeOrders()) {    if (i == row) {      element=tradeOrder;      break;    }    i++;  }switch (column) {case 0:{      element.getTradestrategy().getContract().setSymbol((String)value);      break;    }case 1:{    element.setOrderKey(((Quantity)value).getIntegerValue());    break;  }case 2:{  element.setAction(((Action)value).getCode());  break;}case 3:{element.setOrderType(((OrderType)value).getCode());break;}case 4:{element.setQuantity(((Quantity)value).getIntegerValue());break;}case 5:{element.setLimitPrice(((Money)value).getBigDecimalValue());break;}case 6:{element.setAuxPrice(((Money)value).getBigDecimalValue());break;}case 7:{element.setTransmit(new Boolean(((YesNo)value).getCode()));break;}case 8:{element.setStatus(((OrderStatus)value).getCode());break;}case 9:{element.setOcaGroupName((String)value);break;}case 10:{element.setAverageFilledPrice(((Decimal)value).getBigDecimalValue());break;}case 11:{element.setFilledDate(((Date)value).getZonedDateTime());break;}case 12:{element.setFilledQuantity(((Quantity)value).getIntegerValue());break;}case 13:{element.setStopPrice(((Money)value).getBigDecimalValue());break;}case 14:{if (value instanceof TradeOrder) {element.setFAProfile(((TradeOrder)value).getFAProfile());element.setFAGroup(((TradeOrder)value).getFAGroup());element.setFAMethod(((TradeOrder)value).getFAMethod());element.setFAPercent(((TradeOrder)value).getFAPercent());} else {element.setFAProfile(null);element.setFAGroup(null);element.setFAMethod(null);element.setFAPercent(null);}break;}default :{}}}  }
class C{  public GeoJsonWriter(int decimals){  this.scale=Math.pow(10,decimals);}  }
class C{  public ObjectMatrix3D make(Object[][][] values){  if (this == sparse)   return new SparseObjectMatrix3D(values);  return new DenseObjectMatrix3D(values);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof MyXYBlockRenderer)) {    return false;  }  MyXYBlockRenderer that=(MyXYBlockRenderer)obj;  if (this.blockHeight != that.blockHeight) {    return false;  }  if (this.blockWidth != that.blockWidth) {    return false;  }  if (!this.blockAnchor.equals(that.blockAnchor)) {    return false;  }  if (!this.paintScale.equals(that.paintScale)) {    return false;  }  return super.equals(obj);}  }
class C{  public MekaDialog(Frame owner,String title,boolean modal){  super(owner,title,modal);  initialize();  initGUI();  finishInit();}  }
class C{  public static String bind(String message,Object binding){  return bind(message,new Object[]{binding});}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.289 -0500",hash_original_method="ECC7081A6DE8800C166F28F2C3CCF64F",hash_generated_method="E94C817CC8C9F29453DBE88B124726A3") private void sprint(String s){  if (s == null) {    stringRep+=getIndentation();    stringRep+="<null>\n";    return;  }  if (s.compareTo("}") == 0 || s.compareTo("]") == 0) {    indentation--;  }  stringRep+=getIndentation();  stringRep+=s;  stringRep+="\n";  if (s.compareTo("{") == 0 || s.compareTo("[") == 0) {    indentation++;  }}  }
class C{  public Ellipsoid(int numberOfVariables){  super(numberOfVariables);}  }
class C{  @Override public boolean equals(Object other){  return (other instanceof BoolValue && value == ((BoolValue)other).value);}  }
class C{  private void _writeLongString(String text) throws IOException, JsonGenerationException {  _flushBuffer();  final int textLen=text.length();  int offset=0;  do {    int max=_outputEnd;    int segmentLen=((offset + max) > textLen) ? (textLen - offset) : max;    text.getChars(offset,offset + segmentLen,_outputBuffer,0);    _writeSegment(segmentLen);    offset+=segmentLen;  } while (offset < textLen);}  }
class C{  public void paintOptionPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public SecurityException(String s){  super(s);}  }
class C{  public CommandImpl(String name,String commandLine,String type){  this(name,commandLine,type,Collections.<String,String>emptyMap());}  }
class C{  public boolean hasValue(){  return value != null;}  }
class C{  public Builder writeRoles(List<String> writeRoles){  this.writeRoles=writeRoles;  return this;}  }
class C{  public String toString(){  return _yadisUrl.toString();}  }
class C{  public AddMarketingPermissionException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public String toString(){  String name=mFlag.getName();  if (name == null) {    name=mFlag.getParameterDescription();  }  return name + "=" + mValue;}  }
class C{  public void initConnectionProxy() throws CqException, RegionNotFoundException {  cqBaseRegion=(LocalRegion)cqService.getCache().getRegion(regionName);  if (cqBaseRegion == null) {    throw new RegionNotFoundException(LocalizedStrings.CqQueryImpl_REGION_ON_WHICH_QUERY_IS_SPECIFIED_NOT_FOUND_LOCALLY_REGIONNAME_0.toLocalizedString(regionName));  }  ServerRegionProxy srp=cqBaseRegion.getServerProxy();  if (srp != null) {    if (logger.isTraceEnabled()) {      logger.trace("Found server region proxy on region. RegionName: {}",regionName);    }    this.cqProxy=new ServerCQProxyImpl(srp);    if (!srp.getPool().getSubscriptionEnabled()) {      throw new CqException("The 'queueEnabled' flag on Pool installed on Region " + regionName + " is set to false.");    }  } else {    throw new CqException("Unable to get the connection pool. The Region does not have a pool configured.");  }}  }
class C{  protected void mutate(int i){  if (mutation != null) {    particles[i]=mutation.evolve(new Solution[]{particles[i]})[0];  }}  }
class C{  @Override public Socket createSocket(final String host,final int port,final InetAddress localAddress,final int localPort,final HttpConnectionParams params) throws IOException, UnknownHostException, ConnectTimeoutException {  if (params == null) {    throw new IllegalArgumentException("Parameters may not be null");  }  int timeout=params.getConnectionTimeout();  if (timeout == 0) {    InetAddress hostAddress=getCachedMisconfiguredHost(host,port);    if (hostAddress != null) {      return clientSSLSockFactory.createSocket(hostAddress,port,localAddress,localPort);    }    try {      SSLSocket sslSocket=(SSLSocket)clientSSLSockFactory.createSocket(host,port,localAddress,localPort);      sslSocket.startHandshake();      return sslSocket;    } catch (    SSLException e) {      if (!e.getMessage().contains(CONTENTS_UNRECOGNIZED_NAME_EXCEPTION)) {        throw e;      }      hostAddress=InetAddress.getByName(host);      cacheMisconfiguredHost(host,port,hostAddress);      return clientSSLSockFactory.createSocket(hostAddress,port,localAddress,localPort);    }  }  Socket socket=clientSSLSockFactory.createSocket();  SocketAddress localAddr=new InetSocketAddress(localAddress,localPort);  socket.bind(localAddr);  SocketAddress remoteAddr=new InetSocketAddress(host,port);  socket.connect(remoteAddr,timeout);  return socket;}  }
class C{  public final TestSubscriber assertValues(List<Tuple<String,String>> values){  String prefix="";  boolean passed=true;  if (done.getCount() != 0) {    prefix="Subscriber still running! ";  }  int s=this.values.size();  if (s != values.size()) {    fail(prefix,"Value count differs; Expected: " + values.size() + " "+ values+ ", Actual: "+ s+ " "+ this.values,errors);    passed=false;    fail("length incorrect");  }  for (int i=0; i < s; i++) {    Tuple<String,String> v=this.values.get(i);    Tuple<String,String> u=values.get(i);    if (!Objects.equals(u,v)) {      fail(prefix,"Values at position " + i + " differ; Expected: "+ valueAndClass(u)+ ", Actual: "+ valueAndClass(v),errors);      passed=false;      fail("value does not match");    }  }  pass("all values match",passed);  return this;}  }
class C{  public static boolean isPrimitiveType(String typeSignature){  return SIG_PRIMITIVE_TYPES.contains(typeSignature);}  }
class C{  private String parseScheme(String header){  if (header != null) {    int i=header.indexOf(' ');    if (i >= 0) {      String scheme=header.substring(0,i).trim();      if (scheme.equalsIgnoreCase(DIGEST_TOKEN)) {        mScheme=DIGEST;        mAlgorithm="md5";      } else {        if (scheme.equalsIgnoreCase(BASIC_TOKEN)) {          mScheme=BASIC;        }      }      return header.substring(i + 1);    }  }  return null;}  }
class C{  public static ImageSource uri(Uri uri){  if (uri == null) {    throw new NullPointerException("Uri must not be null");  }  return new ImageSource(uri);}  }
class C{  @Override public void removeDataSourceListener(DataSourceListener dsl){  m_dataListeners.remove(dsl);}  }
class C{  public void testCreateInstalledLocalContainerWithHome() throws Exception {  org.codehaus.cargo.maven2.configuration.Container containerElement=setUpContainerElement(new InstalledLocalContainerStub());  final String containerHome="container/home";  containerElement.setHome(containerHome);  org.codehaus.cargo.container.InstalledLocalContainer container=(InstalledLocalContainer)containerElement.createContainer(new StandaloneLocalConfigurationStub("configuration/home"),new NullLogger(),createTestCargoProject("whatever"));  assertEquals("Specified home not used",containerHome,container.getHome());}  }
class C{  public static void assertVector3dEquals(Vector3d expected,Vector3d actual,double delta){  Assert.assertEquals(expected.x,actual.x,delta);  Assert.assertEquals(expected.y,actual.y,delta);  Assert.assertEquals(expected.z,actual.z,delta);}  }
class C{  public void removeVolumesFromCG(URI vplexURI,URI cgURI,List<URI> vplexVolumeURIs,String stepId) throws WorkflowException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    log.info("Updated workflow step state to execute for remove volumes from consistency group.");    ServiceCoded codedError=removeVolumesFromCGInternal(vplexURI,cgURI,vplexVolumeURIs);    if (codedError != null) {      WorkflowStepCompleter.stepFailed(stepId,codedError);    } else {      WorkflowStepCompleter.stepSucceded(stepId);    }  } catch (  Exception ex) {    log.error("Exception removing volumes from consistency group: " + ex.getMessage(),ex);    String opName=ResourceOperationTypeEnum.DELETE_CG_VOLUME.getName();    ServiceError serviceError=VPlexApiException.errors.removeVolumesFromCGFailed(opName,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  public TableSchemaBuilder(ValueConverterProvider valueConverterProvider,Function<String,String> schemaNameValidator){  this.schemaNameValidator=schemaNameValidator;  this.valueConverterProvider=valueConverterProvider;}  }
class C{  public DTMException(String message,SourceLocator locator,Throwable e){  super(message);  this.containedException=e;  this.locator=locator;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof PiePlot)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  PiePlot that=(PiePlot)obj;  if (this.pieIndex != that.pieIndex) {    return false;  }  if (this.interiorGap != that.interiorGap) {    return false;  }  if (this.circular != that.circular) {    return false;  }  if (this.startAngle != that.startAngle) {    return false;  }  if (this.direction != that.direction) {    return false;  }  if (this.ignoreZeroValues != that.ignoreZeroValues) {    return false;  }  if (this.ignoreNullValues != that.ignoreNullValues) {    return false;  }  if (!PaintUtilities.equal(this.sectionPaint,that.sectionPaint)) {    return false;  }  if (!ObjectUtilities.equal(this.sectionPaintMap,that.sectionPaintMap)) {    return false;  }  if (!PaintUtilities.equal(this.baseSectionPaint,that.baseSectionPaint)) {    return false;  }  if (this.sectionOutlinesVisible != that.sectionOutlinesVisible) {    return false;  }  if (!PaintUtilities.equal(this.sectionOutlinePaint,that.sectionOutlinePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.sectionOutlinePaintMap,that.sectionOutlinePaintMap)) {    return false;  }  if (!PaintUtilities.equal(this.baseSectionOutlinePaint,that.baseSectionOutlinePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.sectionOutlineStroke,that.sectionOutlineStroke)) {    return false;  }  if (!ObjectUtilities.equal(this.sectionOutlineStrokeMap,that.sectionOutlineStrokeMap)) {    return false;  }  if (!ObjectUtilities.equal(this.baseSectionOutlineStroke,that.baseSectionOutlineStroke)) {    return false;  }  if (!PaintUtilities.equal(this.shadowPaint,that.shadowPaint)) {    return false;  }  if (!(this.shadowXOffset == that.shadowXOffset)) {    return false;  }  if (!(this.shadowYOffset == that.shadowYOffset)) {    return false;  }  if (!ObjectUtilities.equal(this.explodePercentages,that.explodePercentages)) {    return false;  }  if (!ObjectUtilities.equal(this.labelGenerator,that.labelGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.labelFont,that.labelFont)) {    return false;  }  if (!PaintUtilities.equal(this.labelPaint,that.labelPaint)) {    return false;  }  if (!PaintUtilities.equal(this.labelBackgroundPaint,that.labelBackgroundPaint)) {    return false;  }  if (!PaintUtilities.equal(this.labelOutlinePaint,that.labelOutlinePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.labelOutlineStroke,that.labelOutlineStroke)) {    return false;  }  if (!PaintUtilities.equal(this.labelShadowPaint,that.labelShadowPaint)) {    return false;  }  if (this.simpleLabels != that.simpleLabels) {    return false;  }  if (!this.simpleLabelOffset.equals(that.simpleLabelOffset)) {    return false;  }  if (!this.labelPadding.equals(that.labelPadding)) {    return false;  }  if (!(this.maximumLabelWidth == that.maximumLabelWidth)) {    return false;  }  if (!(this.labelGap == that.labelGap)) {    return false;  }  if (!(this.labelLinkMargin == that.labelLinkMargin)) {    return false;  }  if (this.labelLinksVisible != that.labelLinksVisible) {    return false;  }  if (!this.labelLinkStyle.equals(that.labelLinkStyle)) {    return false;  }  if (!PaintUtilities.equal(this.labelLinkPaint,that.labelLinkPaint)) {    return false;  }  if (!ObjectUtilities.equal(this.labelLinkStroke,that.labelLinkStroke)) {    return false;  }  if (!ObjectUtilities.equal(this.toolTipGenerator,that.toolTipGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.urlGenerator,that.urlGenerator)) {    return false;  }  if (!(this.minimumArcAngleToDraw == that.minimumArcAngleToDraw)) {    return false;  }  if (!ShapeUtilities.equal(this.legendItemShape,that.legendItemShape)) {    return false;  }  if (!ObjectUtilities.equal(this.legendLabelGenerator,that.legendLabelGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.legendLabelToolTipGenerator,that.legendLabelToolTipGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.legendLabelURLGenerator,that.legendLabelURLGenerator)) {    return false;  }  if (this.autoPopulateSectionPaint != that.autoPopulateSectionPaint) {    return false;  }  if (this.autoPopulateSectionOutlinePaint != that.autoPopulateSectionOutlinePaint) {    return false;  }  if (this.autoPopulateSectionOutlineStroke != that.autoPopulateSectionOutlineStroke) {    return false;  }  if (!ObjectUtilities.equal(this.shadowGenerator,that.shadowGenerator)) {    return false;  }  return true;}  }
class C{  public static void fill(short[] a,int fromIndex,int toIndex,short val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  protected byte[] engineWrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {  return core.wrap(key);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public void testSpecialization() throws Exception {  ArrayListBean bean=new ObjectMapper().readValue("{\"list\":[\"a\",\"b\",\"c\"]}",ArrayListBean.class);  assertNotNull(bean.list);  assertEquals(3,bean.list.size());  assertEquals(ArrayList.class,bean.list.getClass());  assertEquals("a",bean.list.get(0));  assertEquals("b",bean.list.get(1));  assertEquals("c",bean.list.get(2));}  }
class C{  @Override public ContentValues toContentValues(Match match,ElifutDataStore service){  Persistable.Converter<MatchResult> converter=service.converterForType(AutoValueClasses.MATCH_RESULT);  ContentValuesBuilder contentValuesBuilder=ContentValuesBuilder.create().put("home_id",match.home().id()).put("away_id",match.away().id());  if (match.result() != null) {    contentValuesBuilder.put(converter.toContentValues(match.result(),service));  }  return contentValuesBuilder.build();}  }
class C{  void unsubscribe(final String[] topic,String invocationContext,String activityToken){  service.traceDebug(TAG,"unsubscribe({" + topic + "},{"+ invocationContext+ "}, {"+ activityToken+ "})");  final Bundle resultBundle=new Bundle();  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.UNSUBSCRIBE_ACTION);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);  resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);  if ((myClient != null) && (myClient.isConnected())) {    IMqttActionListener listener=new MqttConnectionListener(resultBundle);    try {      myClient.unsubscribe(topic,invocationContext,listener);    } catch (    Exception e) {      handleException(resultBundle,e);    }  } else {    resultBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,NOT_CONNECTED);    service.traceError("subscribe",NOT_CONNECTED);    service.callbackToActivity(clientHandle,Status.ERROR,resultBundle);  }}  }
class C{  public String buildUri(String representationId,int segmentNumber,int bandwidth,long time){  StringBuilder builder=new StringBuilder();  for (int i=0; i < identifierCount; i++) {    builder.append(urlPieces[i]);    if (identifiers[i] == REPRESENTATION_ID) {      builder.append(representationId);    } else     if (identifiers[i] == NUMBER_ID) {      builder.append(String.format(Locale.US,identifierFormatTags[i],segmentNumber));    } else     if (identifiers[i] == BANDWIDTH_ID) {      builder.append(String.format(Locale.US,identifierFormatTags[i],bandwidth));    } else     if (identifiers[i] == TIME_ID) {      builder.append(String.format(Locale.US,identifierFormatTags[i],time));    }  }  builder.append(urlPieces[identifierCount]);  return builder.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:04.610 -0500",hash_original_method="48EC2BD0914D5724BE75C18442D4A6A2",hash_generated_method="7FE30A244080FE3DFA9FBCE6A1C0F05D") synchronized public void destroy(){  if (mDestroyed) {    throw new RSInvalidStateException("Object already destroyed.");  }  mDestroyed=true;  mRS.nObjDestroy(mID);}  }
class C{  public int listMaxChannel(Database conn) throws SQLException {  ResultSet rs=null;  Statement statement=null;  int maxChannel=-1;  try {    statement=conn.createStatement();    rs=statement.executeQuery(selectMax);    while (rs.next()) {      maxChannel=rs.getInt(1);    }  }  finally {    close(rs);    close(statement);  }  return maxChannel;}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public static <T extends GenericEntity>List<T> filterByDate(List<T> datedValues,java.sql.Timestamp moment){  return filterByDate(datedValues,moment,null,null,true);}  }
class C{  public static void openAppListing(Context context){  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(context.getString(R.string.app_list_url)));  sendIntent(context,intent);}  }
class C{  public long update(HybridTimestamp ts){  return update(ts.getLogicalTime(),ts.getLogicalCounter());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String hexDumpBuffer(char[] buffer){  hexFmt="";  asciiFmt="";  for (int i=0; i < buffer.length; i++) {    hexFmt+=String.format("%02X ",(byte)buffer[i]);    asciiFmt+=String.format("%1s",buffer[i] < 32 || buffer[i] > 127 ? '.' : buffer[i]);  }  return (hexFmt + " : " + asciiFmt);}  }
class C{  public void startFtpFixedDownload(final String hostname,final String uri,final int maxDuration,final int reportInterval){  initReportTask(reportInterval,true);  mTask.setReportInterval(true);  startFtpFixedDownload(hostname,uri,maxDuration);}  }
class C{  public void addDatatransferProgressListener(OnDatatransferProgressListener listener,Account account,OCFile file){  if (account == null || file == null || listener == null)   return;  String targetKey=buildRemoteName(account,file);  mBoundListeners.put(targetKey,listener);}  }
class C{  private void emitMarkedLines(final SpannableStringBuilder out,final Line lines){  final SpannableStringBuilder in=new SpannableStringBuilder();  Line line=lines;  while (line != null) {    if (!line.isEmpty) {      in.append(line.value.substring(line.leading,line.value.length() - line.trailing));      if (line.trailing >= 2) {        in.append("\n");      }    }    line=line.next;  }  this.recursiveEmitLine(out,in.toString(),0,MarkToken.NONE);}  }
class C{  public static ActiveMQConnectionFactory createConnectionFactoryWithoutHA(final DiscoveryGroupConfiguration groupConfiguration,JMSFactoryType jmsFactoryType){  ActiveMQConnectionFactory factory=null;  if (jmsFactoryType.equals(JMSFactoryType.CF)) {    factory=new ActiveMQJMSConnectionFactory(false,groupConfiguration);  } else   if (jmsFactoryType.equals(JMSFactoryType.QUEUE_CF)) {    factory=new ActiveMQQueueConnectionFactory(false,groupConfiguration);  } else   if (jmsFactoryType.equals(JMSFactoryType.TOPIC_CF)) {    factory=new ActiveMQTopicConnectionFactory(false,groupConfiguration);  } else   if (jmsFactoryType.equals(JMSFactoryType.XA_CF)) {    factory=new ActiveMQXAConnectionFactory(false,groupConfiguration);  } else   if (jmsFactoryType.equals(JMSFactoryType.QUEUE_XA_CF)) {    factory=new ActiveMQXAQueueConnectionFactory(false,groupConfiguration);  } else   if (jmsFactoryType.equals(JMSFactoryType.TOPIC_XA_CF)) {    factory=new ActiveMQXATopicConnectionFactory(false,groupConfiguration);  }  return factory;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testTimedInvokeAny3() throws Throwable {  CountDownLatch latch=new CountDownLatch(1);  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    List<Callable<String>> l=new ArrayList<Callable<String>>();    l.add(latchAwaitingStringTask(latch));    l.add(null);    try {      e.invokeAny(l,MEDIUM_DELAY_MS,MILLISECONDS);      shouldThrow();    } catch (    NullPointerException success) {    }    latch.countDown();  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public void notifyStickyAttributeChanged(){  notifyHierarchyChanged();}  }
class C{  public EigenvalueDecomposition eig(){  return new EigenvalueDecomposition(this);}  }
class C{  public TargetInformation(Targets targets){  this.targets=new DERSequence(targets);}  }
class C{  private static String buildJavaSourceHyperlink(String javaSourceAddress,String text){  if (javaSourceAddress == null) {    return convertToHtmlContent(text);  }  StringBuffer buf=new StringBuffer();  buf.append("<a href=\"");  buf.append(JAVA_SOURCE_URL_PREFIX);  try {    buf.append(URLEncoder.encode(javaSourceAddress,"UTF-8"));  } catch (  UnsupportedEncodingException e) {    buf.append(javaSourceAddress);  }  buf.append("\">");  buf.append(convertToHtmlContent(text));  buf.append("</a>");  return buf.toString();}  }
class C{  public boolean contains(int value){  int index=value % this.numBuckets;  Bucket bucket=this.buckets[index];  if (bucket == null)   return false;  for (int i=0; i < bucket.length; i++) {    if (bucket.values[i] == value)     return true;  }  return false;}  }
class C{  public static void main(String[] argv){  Debug.init();  boolean toUpper=true;  ArgParser ap=new ArgParser("ChangeCase");  ap.add("source","The directory to search for source svg files.",ArgParser.TO_END);  ap.add("target","The target directory to place gathered and modified files.",1);  ap.add("verbose","Talk alot.");  if (argv.length == 0) {    ap.bail("",true);  }  ap.parse(argv);  String[] sourceDirs;  sourceDirs=ap.getArgValues("source");  if (sourceDirs == null) {    ap.bail("Need source directories",true);  }  String[] targetDirs;  targetDirs=ap.getArgValues("target");  if (targetDirs == null || targetDirs.length > 1) {    ap.bail("Need target directory",true);  }  boolean verbose=false;  String[] verboseTest=ap.getArgValues("verbose");  if (verboseTest != null) {    verbose=true;  }  if (targetDirs != null && sourceDirs != null) {    SVGSourceFileReorganizer cc=new SVGSourceFileReorganizer(new File(targetDirs[0]));    cc.setVerbose(verbose);    for (int i=0; i < sourceDirs.length; i++) {      cc.handleEntry(new File(sourceDirs[i]));    }  }}  }
class C{  protected ArrayList<GCParser> sort_gc_parsers(ArrayList<GCParser> parsers){  final int n=parsers.size();  for (int i=1; i < n; ++i) {    GCParser parser_i=parsers.get(i);    long value=parser_i.match_count();    int j=i - 1;    while (j >= 0 && parsers.get(j).match_count() < value) {      parsers.set(j + 1,parsers.get(j));      --j;    }    parsers.set(j + 1,parser_i);  }  return parsers;}  }
class C{  public void disconnect(){  this.keepAlive=false;  if (this.keepAliveThread != null) {    this.keepAliveThread.interrupt();  }  if (this.socket != null) {    this.socket.disconnect();  }}  }
class C{  public void message(LocoNetMessage l){switch (l.getOpCode()) {case LnConstants.OPC_INPUT_REP:{      int sw1=l.getElement(1);      int sw2=l.getElement(2);      if (a.matchAddress(sw1,sw2)) {        boolean state=((sw2 & 0x10) != 0) ^ _inverted;        if (log.isDebugEnabled()) {          log.debug("INPUT_REP received with valid address, old state " + getRawState() + " new packet "+ state);        }        if (state && getRawState() != Sensor.ACTIVE) {          if (log.isDebugEnabled()) {            log.debug("Set ACTIVE");          }          setOwnState(Sensor.ACTIVE);        } else         if ((!state) && getRawState() != Sensor.INACTIVE) {          if (log.isDebugEnabled()) {            log.debug("Set INACTIVE");          }          setOwnState(Sensor.INACTIVE);        }      }      return;    }default :  return;}}  }
class C{  public SimpleConstant(String name,Date dateValue,String annotation,boolean invisible){  this(name,dateValue,annotation);  this.invisible=invisible;}  }
class C{  public void testSecretKeyFactory09() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    SecretKeyFactory secKF=SecretKeyFactory.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect algorithm",secKF.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",secKF.getProvider(),defaultProvider);  }}  }
class C{  public DrawerBuilder withPositionBasedStateManagement(boolean positionBasedStateManagement){  this.mPositionBasedStateManagement=positionBasedStateManagement;  return this;}  }
class C{  private void inverseLT(){  int x2=rotateRight(X2,22) ^ X3 ^ (X1 << 7);  int x0=rotateRight(X0,5) ^ X1 ^ X3;  int x3=rotateRight(X3,7);  int x1=rotateRight(X1,1);  X3=x3 ^ x2 ^ x0 << 3;  X1=x1 ^ x0 ^ x2;  X2=rotateRight(x2,3);  X0=rotateRight(x0,13);}  }
class C{  public static boolean contentEqualsIgnoreEOL(File file1,File file2,String charsetName) throws IOException {  boolean file1Exists=file1.exists();  if (file1Exists != file2.exists()) {    return false;  }  if (!file1Exists) {    return true;  }  if (file1.isDirectory() || file2.isDirectory()) {    throw new IOException("Can't compare directories, only files");  }  if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {    return true;  }  Reader input1=null;  Reader input2=null;  try {    if (charsetName == null) {      input1=new InputStreamReader(new FileInputStream(file1));      input2=new InputStreamReader(new FileInputStream(file2));    } else {      input1=new InputStreamReader(new FileInputStream(file1),charsetName);      input2=new InputStreamReader(new FileInputStream(file2),charsetName);    }    return IOUtils.contentEqualsIgnoreEOL(input1,input2);  }  finally {    IOUtils.closeQuietly(input1);    IOUtils.closeQuietly(input2);  }}  }
class C{  public boolean equals(final IdentityArrayList<K> l){  if (l == this)   return true;  int s=size();  if (s != l.size())   return false;  final K[] a1=a;  final K[] a2=l.a;  while (s-- != 0)   if (!valEquals(a1[s],a2[s]))   return false;  return true;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public <U>SimpleReactStream<U> fromStream(final Stream<CompletableFuture<U>> stream){  final Stream s=stream;  return construct(s);}  }
class C{  public final double angleBetween(GVector v){  return (Math.acos(this.dot(v) / (this.magnitude() * v.magnitude())));}  }
class C{  public TodolistExample(TodolistObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getName() != null) {    criteria.andNameEqualTo(sample.getName());  }  if (sample.getDescription() != null) {    criteria.andDescriptionEqualTo(sample.getDescription());  }  if (sample.getPosition() != null) {    criteria.andPositionEqualTo(sample.getPosition());  }  if (sample.getCreatorId() != null) {    criteria.andCreatorIdEqualTo(sample.getCreatorId());  }  if (sample.getCreatorName() != null) {    criteria.andCreatorNameEqualTo(sample.getCreatorName());  }  if (sample.getDeleted() != null) {    criteria.andDeletedEqualTo(sample.getDeleted());  }  if (sample.getCreated() != null) {    criteria.andCreatedEqualTo(sample.getCreated());  }  if (sample.getUpdated() != null) {    criteria.andUpdatedEqualTo(sample.getUpdated());  }  if (sample.getBcId() != null) {    criteria.andBcIdEqualTo(sample.getBcId());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getArchived() != null) {    criteria.andArchivedEqualTo(sample.getArchived());  }  if (sample.getCreatorAvatar() != null) {    criteria.andCreatorAvatarEqualTo(sample.getCreatorAvatar());  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:06.267 -0500",hash_original_method="DCEE7ED44A87D406D3E35C60D8DCDFD7",hash_generated_method="60BA64B4428E8556A9DF1AB1BE34DB7D") public LayoutParams(int w,int h){  super(w,h);  column=-1;  span=1;}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CandleDataset)) {    return false;  }  CandleDataset that=(CandleDataset)obj;  if (!this.xPosition.equals(that.xPosition)) {    return false;  }  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  @Override public boolean useAdminMembersForDefault(){  return true;}  }
class C{  public EulerianCycle(Graph G){  if (G.E() == 0)   return;  for (int v=0; v < G.V(); v++)   if (G.degree(v) % 2 != 0)   return;  Queue<Edge>[] adj=(Queue<Edge>[])new Queue[G.V()];  for (int v=0; v < G.V(); v++)   adj[v]=new Queue<Edge>();  for (int v=0; v < G.V(); v++) {    int selfLoops=0;    for (    int w : G.adj(v)) {      if (v == w) {        if (selfLoops % 2 == 0) {          Edge e=new Edge(v,w);          adj[v].enqueue(e);          adj[w].enqueue(e);        }        selfLoops++;      } else       if (v < w) {        Edge e=new Edge(v,w);        adj[v].enqueue(e);        adj[w].enqueue(e);      }    }  }  int s=nonIsolatedVertex(G);  Stack<Integer> stack=new Stack<Integer>();  stack.push(s);  cycle=new Stack<Integer>();  while (!stack.isEmpty()) {    int v=stack.pop();    while (!adj[v].isEmpty()) {      Edge edge=adj[v].dequeue();      if (edge.isUsed)       continue;      edge.isUsed=true;      stack.push(v);      v=edge.other(v);    }    cycle.push(v);  }  if (cycle.size() != G.E() + 1)   cycle=null;  assert certifySolution(G);}  }
class C{  public static Set<String> splitValuePairDelimitedString(String string,String delimiter,List<String> identifiers){  String identifierSegment="";  for (  String identifier : identifiers) {    if (identifierSegment.length() != 0) {      identifierSegment+="|";    }    identifierSegment+=identifier;  }  String regex=delimiter + "(?=(" + identifierSegment+ ")=)";  return new HashSet<>(Arrays.asList(string.split(regex)));}  }
class C{  public boolean startProcess(String[] command){  if (!Properties.IS_RUNNING_A_SYSTEM_TEST) {    logger.debug("Going to start process with command: " + Arrays.toString(command).replace(","," "));  }  List<String> formatted=new LinkedList<>();  for (  String s : command) {    String token=s.trim();    if (!token.isEmpty()) {      formatted.add(token);    }  }  hsErrFile="hs_err_EvoSuite_client_p" + getServerPort() + "_t"+ System.currentTimeMillis();  String option="-XX:ErrorFile=" + hsErrFile;  formatted.add(1,option);  return startProcess(formatted.toArray(new String[0]),null);}  }
class C{  private void retryConnect(boolean force) throws IOException {  if (force || tcpSocket == null) {    if (tcpSocket != null) {      tcpSocket.close();      tcpSocket=null;    }    tcpSocket=new Socket(hostname,port);    tcpSocket.setSoTimeout(socketTimeout);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public RegexValidator(String[] regexs){  this(regexs,true);}  }
class C{  public void downloadImageToFileSystem(String file,final SuccessCallback<Image> onSuccess,FailureCallback<Image> onFail,boolean useCache){  setDestinationFile(file);  downloadImage(onSuccess,onFail,useCache);}  }
class C{  public static boolean find(JTextArea textArea,String text,boolean forward,boolean matchCase,boolean wholeWord,boolean regex) throws PatternSyntaxException {  Caret c=textArea.getCaret();  int start=forward ? Math.max(c.getDot(),c.getMark()) : Math.min(c.getDot(),c.getMark());  String findIn=getFindInText(textArea,start,forward);  if (findIn == null || findIn.length() == 0)   return false;  if (regex == false) {    int pos=getNextMatchPos(text,findIn,forward,matchCase,wholeWord);    findIn=null;    if (pos != -1) {      c.setSelectionVisible(true);      pos=forward ? start + pos : pos;      selectAndPossiblyCenter(textArea,pos,pos + text.length());      return true;    }  } else {    Point regExPos=getNextMatchPosRegEx(text,findIn,forward,matchCase,wholeWord);    findIn=null;    if (regExPos != null) {      c.setSelectionVisible(true);      if (forward) {        regExPos.translate(start,start);      }      selectAndPossiblyCenter(textArea,regExPos.x,regExPos.y);      return true;    }  }  return false;}  }
class C{  public static AddressType find(String value){  return enums.find(value);}  }
class C{  public IntraClusterSumEvaluation(IntraClusterEvaluation ice){  this.ice=ice;}  }
class C{  public void reset(){  mRotationAngle=0;  mIsScheduled=false;  unscheduleSelf(this);  invalidateSelf();}  }
class C{  private static boolean isNetworkProblem(Object error){  return (error instanceof NetworkError) || (error instanceof NoConnectionError);}  }
class C{  public void hide(Animation anim){  hide(true,anim);}  }
class C{  @NotNull public ActionCallback requestFocus(@NotNull Component c,boolean forced){  return IdeFocusManager.getInstance(myProject).requestFocus(c,forced);}  }
class C{  @Override protected void initView(){  super.initView();  if (!mInitialized) {    Resources resources=getContext().getResources();    mShowDetailsInMonth=Utils.getConfigBool(getContext(),R.bool.show_details_in_month);    mShowTimeInMonth=Utils.getConfigBool(getContext(),R.bool.show_time_in_month);    TEXT_SIZE_EVENT_TITLE=resources.getInteger(R.integer.text_size_event_title);    TEXT_SIZE_MONTH_NUMBER=resources.getInteger(R.integer.text_size_month_number);    SIDE_PADDING_MONTH_NUMBER=resources.getInteger(R.integer.month_day_number_margin);    CONFLICT_COLOR=resources.getColor(R.color.month_dna_conflict_time_color);    EVENT_TEXT_COLOR=resources.getColor(R.color.calendar_event_text_color);    if (mScale != 1) {      TOP_PADDING_MONTH_NUMBER*=mScale;      TOP_PADDING_WEEK_NUMBER*=mScale;      SIDE_PADDING_MONTH_NUMBER*=mScale;      SIDE_PADDING_WEEK_NUMBER*=mScale;      SPACING_WEEK_NUMBER*=mScale;      TEXT_SIZE_MONTH_NUMBER*=mScale;      TEXT_SIZE_EVENT*=mScale;      TEXT_SIZE_EVENT_TITLE*=mScale;      TEXT_SIZE_MORE_EVENTS*=mScale;      TEXT_SIZE_MONTH_NAME*=mScale;      TEXT_SIZE_WEEK_NUM*=mScale;      DAY_SEPARATOR_OUTER_WIDTH*=mScale;      DAY_SEPARATOR_INNER_WIDTH*=mScale;      DAY_SEPARATOR_VERTICAL_LENGTH*=mScale;      DAY_SEPARATOR_VERTICAL_LENGHT_PORTRAIT*=mScale;      EVENT_X_OFFSET_LANDSCAPE*=mScale;      EVENT_Y_OFFSET_LANDSCAPE*=mScale;      EVENT_Y_OFFSET_PORTRAIT*=mScale;      EVENT_SQUARE_WIDTH*=mScale;      EVENT_SQUARE_HEIGHT*=mScale;      EVENT_SQUARE_BORDER*=mScale;      EVENT_LINE_PADDING*=mScale;      EVENT_BOTTOM_PADDING*=mScale;      EVENT_RIGHT_PADDING*=mScale;      DNA_MARGIN*=mScale;      DNA_WIDTH*=mScale;      DNA_ALL_DAY_HEIGHT*=mScale;      DNA_MIN_SEGMENT_HEIGHT*=mScale;      DNA_SIDE_PADDING*=mScale;      DEFAULT_EDGE_SPACING*=mScale;      DNA_ALL_DAY_WIDTH*=mScale;      TODAY_HIGHLIGHT_WIDTH*=mScale;    }    if (!mShowDetailsInMonth) {      TOP_PADDING_MONTH_NUMBER+=DNA_ALL_DAY_HEIGHT + DNA_MARGIN;    }    mInitialized=true;  }  mPadding=DEFAULT_EDGE_SPACING;  loadColors(getContext());  mMonthNumPaint=new Paint();  mMonthNumPaint.setFakeBoldText(false);  mMonthNumPaint.setAntiAlias(true);  mMonthNumPaint.setTextSize(TEXT_SIZE_MONTH_NUMBER);  mMonthNumPaint.setColor(mMonthNumColor);  mMonthNumPaint.setStyle(Style.FILL);  mMonthNumPaint.setTextAlign(Align.RIGHT);  mMonthNumPaint.setTypeface(Typeface.DEFAULT);  mMonthNumAscentHeight=(int)(-mMonthNumPaint.ascent() + 0.5f);  mMonthNumHeight=(int)(mMonthNumPaint.descent() - mMonthNumPaint.ascent() + 0.5f);  mEventPaint=new TextPaint();  mEventPaint.setFakeBoldText(true);  mEventPaint.setAntiAlias(true);  mEventPaint.setTextSize(TEXT_SIZE_EVENT_TITLE);  mEventPaint.setColor(mMonthEventColor);  mSolidBackgroundEventPaint=new TextPaint(mEventPaint);  mSolidBackgroundEventPaint.setColor(EVENT_TEXT_COLOR);  mFramedEventPaint=new TextPaint(mSolidBackgroundEventPaint);  mDeclinedEventPaint=new TextPaint();  mDeclinedEventPaint.setFakeBoldText(true);  mDeclinedEventPaint.setAntiAlias(true);  mDeclinedEventPaint.setTextSize(TEXT_SIZE_EVENT_TITLE);  mDeclinedEventPaint.setColor(mMonthDeclinedEventColor);  mEventAscentHeight=(int)(-mEventPaint.ascent() + 0.5f);  mEventHeight=(int)(mEventPaint.descent() - mEventPaint.ascent() + 0.5f);  mEventExtrasPaint=new TextPaint();  mEventExtrasPaint.setFakeBoldText(false);  mEventExtrasPaint.setAntiAlias(true);  mEventExtrasPaint.setStrokeWidth(EVENT_SQUARE_BORDER);  mEventExtrasPaint.setTextSize(TEXT_SIZE_EVENT);  mEventExtrasPaint.setColor(mMonthEventExtraColor);  mEventExtrasPaint.setStyle(Style.FILL);  mEventExtrasPaint.setTextAlign(Align.LEFT);  mExtrasHeight=(int)(mEventExtrasPaint.descent() - mEventExtrasPaint.ascent() + 0.5f);  mExtrasAscentHeight=(int)(-mEventExtrasPaint.ascent() + 0.5f);  mExtrasDescent=(int)(mEventExtrasPaint.descent() + 0.5f);  mEventDeclinedExtrasPaint=new TextPaint();  mEventDeclinedExtrasPaint.setFakeBoldText(false);  mEventDeclinedExtrasPaint.setAntiAlias(true);  mEventDeclinedExtrasPaint.setStrokeWidth(EVENT_SQUARE_BORDER);  mEventDeclinedExtrasPaint.setTextSize(TEXT_SIZE_EVENT);  mEventDeclinedExtrasPaint.setColor(mMonthDeclinedExtrasColor);  mEventDeclinedExtrasPaint.setStyle(Style.FILL);  mEventDeclinedExtrasPaint.setTextAlign(Align.LEFT);  mWeekNumPaint=new Paint();  mWeekNumPaint.setFakeBoldText(false);  mWeekNumPaint.setAntiAlias(true);  mWeekNumPaint.setTextSize(TEXT_SIZE_WEEK_NUM);  mWeekNumPaint.setColor(mWeekNumColor);  mWeekNumPaint.setStyle(Style.FILL);  mWeekNumPaint.setTextAlign(Align.RIGHT);  mWeekNumAscentHeight=(int)(-mWeekNumPaint.ascent() + 0.5f);  mDNAAllDayPaint=new Paint();  mDNATimePaint=new Paint();  mDNATimePaint.setColor(mMonthBusyBitsBusyTimeColor);  mDNATimePaint.setStyle(Style.FILL_AND_STROKE);  mDNATimePaint.setStrokeWidth(DNA_WIDTH);  mDNATimePaint.setAntiAlias(false);  mDNAAllDayPaint.setColor(mMonthBusyBitsConflictTimeColor);  mDNAAllDayPaint.setStyle(Style.FILL_AND_STROKE);  mDNAAllDayPaint.setStrokeWidth(DNA_ALL_DAY_WIDTH);  mDNAAllDayPaint.setAntiAlias(false);  mEventSquarePaint=new Paint();  mEventSquarePaint.setStrokeWidth(EVENT_SQUARE_BORDER);  mEventSquarePaint.setAntiAlias(false);  if (DEBUG_LAYOUT) {    Log.d("EXTRA","mScale=" + mScale);    Log.d("EXTRA","mMonthNumPaint ascent=" + mMonthNumPaint.ascent() + " descent="+ mMonthNumPaint.descent()+ " int height="+ mMonthNumHeight);    Log.d("EXTRA","mEventPaint ascent=" + mEventPaint.ascent() + " descent="+ mEventPaint.descent()+ " int height="+ mEventHeight+ " int ascent="+ mEventAscentHeight);    Log.d("EXTRA","mEventExtrasPaint ascent=" + mEventExtrasPaint.ascent() + " descent="+ mEventExtrasPaint.descent()+ " int height="+ mExtrasHeight);    Log.d("EXTRA","mWeekNumPaint ascent=" + mWeekNumPaint.ascent() + " descent="+ mWeekNumPaint.descent());  }}  }
class C{  public void testReportTerminalSize() throws Exception {  withTerminalSized(5,5);  assertEnteringStringGivesResponse("\033[18t","\033[8;5;5t");  for (int width=3; width < 12; width++) {    for (int height=3; height < 12; height++) {      mTerminal.resize(width,height);      assertEnteringStringGivesResponse("\033[18t","\033[8;" + height + ";"+ width+ "t");    }  }}  }
class C{  @Override public void test() throws ParameterException {  if (first.isDefined() && second.isDefined()) {    if (first.getValue().doubleValue() > second.getValue().doubleValue()) {      throw new WrongParameterValueException("Global Parameter Constraint Error: \n" + "The value of parameter \"" + first.getName() + "\" has to be less equal than the value of parameter \""+ second.getName()+ " \"."+ "(Current values: "+ first.getName()+ ": "+ first.getValue().doubleValue()+ ", "+ second.getName()+ ": "+ second.getValue().doubleValue()+ ")\n");    }  }}  }
class C{  public void loadData(Table t,String query,Object lock){  loadData(t,query,null,lock,null);}  }
class C{  protected final Class<?> findSystemClass(String className) throws ClassNotFoundException {  return Class.forName(className,false,getSystemClassLoader());}  }
class C{  private String calcSaveAsName(){  if (null != baseName && !baseName.isEmpty()) {    return baseName;  }  String graphName=viewInfo.getGraphModelLocation().getName();  String label=NewEditorHelper.newEditorLabel(graphName);  baseName=label;  return label;}  }
class C{  public static IJavaProject createProject(String projectName,IClasspathEntry[] rawClasspaths) throws CoreException {  IProject project=ProjectTestUtilities.createProject(projectName);  NullProgressMonitor monitor=new NullProgressMonitor();  BuildPathsBlock.addJavaNature(project,monitor);  IJavaProject javaProject=JavaCore.create(project);  javaProject.setRawClasspath(rawClasspaths,monitor);  javaProject.open(monitor);  return javaProject;}  }
class C{  public void test_updateSmallValueWithLargeValue(){  final IRawStore store=new SimpleMemoryRawStore();  final IndexMetadata metadata=new IndexMetadata(UUID.randomUUID());  metadata.setRawRecords(true);  metadata.setMaxRecLen(64);  final BTree btree=BTree.create(store,metadata);  assertEquals(64,btree.getMaxRecLen());  assertTrue(((ILeafData)btree.getRoot()).hasRawRecords());  final byte[] key=new byte[]{1};  final byte[] val=new byte[btree.getMaxRecLen() - 1];  r.nextBytes(val);  assertNull(btree.insert(key,val));  final Leaf root=(Leaf)btree.getRoot();  assertEquals(IRawStore.NULL,root.getRawRecord(0));  final byte[] newval=new byte[btree.getMaxRecLen() + 1];  r.nextBytes(newval);  final byte[] oldval=btree.insert(key,newval);  assertEquals(val,oldval);  final long addr=root.getRawRecord(0);  assertTrue(addr != IRawStore.NULL);  final ByteBuffer actual=btree.readRawRecord(addr);  TestCase3.assertEquals(newval,actual);}  }
class C{  public static void moniterTest(Context context,int interval,int testTime){  long startTime=System.currentTimeMillis();  while ((System.currentTimeMillis() - startTime) < testTime) {    String memoryUsageString=getMyTracksPssMemoryInfo(context);    String batteryUsageString=getBatteryUsageInfo(context);    String oneInfo=String.format("{%s: memory use %s, battery left %s. \r\n",String.format("{%1$tm/%1$td/%1$tY %1$tH:%1$tM:%1$tS",new Date()),memoryUsageString,batteryUsageString);    writeToFile(oneInfo,true);    Log.d(TAG,oneInfo);    EndToEndTestUtils.sleep(interval);  }}  }
class C{  @Override public int doFinal(final byte[] out,final int outOff) throws BadCiphertextException {  complete_=true;  return writeEncryptedBlock(bytesToEncryptStream_.toByteArray(),0,bytesToEncryptStream_.size(),out,outOff);}  }
class C{  public AmbienceLayer(ResourceLocation name,int maxTracks){  this.name=name;  this.maxTracks=maxTracks;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:21.198 -0500",hash_original_method="ACE50F43918FAC0899CFC1784787037A",hash_generated_method="8C0AFF252F65474A11A5C25366700AE9") public LocalSocketAddress(String name,Namespace namespace){  this.name=name;  this.namespace=namespace;}  }
class C{  public boolean canRedo(){  return undoManager.canRedo();}  }
class C{  public boolean isAtMost(VersionNumber other){  return this.compareTo(other) <= 0;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getStateEntity_();}  }
class C{  private CalendarMetaData(){}  }
class C{  @Override public void onDirectorySelectionChanged(String selectedAbsolutePath,int queryTypeId){  if (this.mHasEmbeddedDirPicker) {    navigateTo(selectedAbsolutePath,queryTypeId);  }}  }
class C{  ClusterState commit(){  context.transition(member.type());  if (!configuration.members().contains(member) && leaveFuture != null) {    leaveFuture.complete(null);  }  if (context.getMetaStore().loadConfiguration().index() < configuration.index()) {    context.getMetaStore().storeConfiguration(configuration);  }  return this;}  }
class C{  public boolean testIsRecoveredAndClear(RegionEntry re){  DiskEntry de=(DiskEntry)re;  return testIsRecoveredAndClear(de.getDiskId());}  }
class C{  public static String[] retrieveDisplayNames(String id,Locale locale){  Objects.requireNonNull(id);  Objects.requireNonNull(locale);  return retrieveDisplayNamesImpl(id,locale);}  }
class C{  public boolean hasNext(){  if (bufferOffset < bufferFillSize) {    return true;  } else {    return this.fillBuffer();  }}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public GenericComment(){}  }
class C{  public T caseTraceNodeExecuted(TraceNodeExecuted object){  return null;}  }
class C{  public final boolean canGetBoolean(String field){  return m_table.canGetBoolean(field);}  }
class C{  public double dot(Vector other){  return x * other.x + y * other.y + z * other.z;}  }
class C{  public void send(Object message) throws RemotingException {  initClient();  client.send(message);}  }
class C{  public PriorityAttribute(){  super(PRIORITY);}  }
class C{  public SidIV(final ISPO spo){  super(VTE.STATEMENT,DTE.XSDBoolean);  this.spo=spo;}  }
class C{  public final double pctIncorrect(){  return m_delegate.pctIncorrect();}  }
class C{  public UnicodeBOMInputStream(final InputStream inputStream) throws NullPointerException, IOException {  if (inputStream == null)   throw new NullPointerException("invalid input stream: null is not allowed");  in=new PushbackInputStream(inputStream,4);  final byte bom[]=new byte[4];  final int read=in.read(bom);switch (read) {case 4:    if ((bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE) && (bom[2] == (byte)0x00)&& (bom[3] == (byte)0x00)) {      this.bom=BOM.UTF_32_LE;      break;    } else     if ((bom[0] == (byte)0x00) && (bom[1] == (byte)0x00) && (bom[2] == (byte)0xFE)&& (bom[3] == (byte)0xFF)) {      this.bom=BOM.UTF_32_BE;      break;    }case 3:  if ((bom[0] == (byte)0xEF) && (bom[1] == (byte)0xBB) && (bom[2] == (byte)0xBF)) {    this.bom=BOM.UTF_8;    break;  }case 2:if ((bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE)) {  this.bom=BOM.UTF_16_LE;  break;} else if ((bom[0] == (byte)0xFE) && (bom[1] == (byte)0xFF)) {  this.bom=BOM.UTF_16_BE;  break;}default :this.bom=BOM.NONE;break;}if (read > 0) in.unread(bom,0,read);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.335 -0400",hash_original_method="2820A155EE0C032E379B42463D0F7CBC",hash_generated_method="DFE485655B8BE3A5F7EA901213D7FC8C") private K highestKey(){  ConcurrentSkipListMap.Node<K,V> n=hiNode();  if (n != null) {    K last=n.key;    if (inBounds(last))     return last;  }  throw new NoSuchElementException();}  }
class C{  private static int lower_bound(int first,int last,int x,IntComparator comp){  int len=last - first;  while (len > 0) {    int half=len / 2;    int middle=first + half;    if (comp.compare(middle,x) < 0) {      first=middle + 1;      len-=half + 1;    } else {      len=half;    }  }  return first;}  }
class C{  public Binding(String name,String className,Object obj,boolean isRelative){  super(name,className,isRelative);  this.boundObj=obj;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static void assignIPAddress(ComputeState computeState,GCPInstance instance){  if (instance.networkInterfaces != null && !instance.networkInterfaces.isEmpty()) {    computeState.address=instance.networkInterfaces.get(0).networkIP;  }}  }
class C{  public boolean isWiFiActive(){  if (checkPermissions("android.permission.ACCESS_WIFI_STATE")) {    ConnectivityManager connectivity=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);    if (connectivity != null) {      NetworkInfo[] info=connectivity.getAllNetworkInfo();      if (info != null) {        for (int i=0; i < info.length; i++) {          if (info[i].getTypeName().equals("WIFI") && info[i].isConnected()) {            return true;          }        }      }    }    return false;  } else {    Ln.e("lost permission","lost--->android.permission.ACCESS_WIFI_STATE");    return false;  }}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  dataListeners=new HashSet<DataListener>();}  }
class C{  public static void i(String tag,String msg){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg);}  }
class C{  private void internalIntersection(CharSet that){  chars=doIntersection(that.chars);}  }
class C{  public Population postBreedingExchangePopulation(final EvolutionState state){  return state.population;}  }
class C{  void invalidate(){  if (mAudioWaveformFilename != null) {    new File(mAudioWaveformFilename).delete();    mAudioWaveformFilename=null;    mWaveformData=null;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void elementAttributesProcessed(String name,String nsPrefix,String nsURI){}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.TRACE_REACTION_WILL_FIRE__REACTION:    setReaction((Reaction)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean equals(IBinding[] b1,IBinding[] b2){  Assert.isNotNull(b1);  if (b1 == b2)   return true;  if (b2 == null)   return false;  if (b1.length != b2.length)   return false;  for (int i=0; i < b1.length; i++) {    if (!Bindings.equals(b1[i],b2[i]))     return false;  }  return true;}  }
class C{  public void validateExpectedPartitionValueKey(ExpectedPartitionValueKey key) throws IllegalArgumentException {  Assert.notNull(key,"An expected partition value key must be specified.");  key.setPartitionKeyGroupName(alternateKeyHelper.validateStringParameter("partition key group name",key.getPartitionKeyGroupName()));  Assert.hasText(key.getExpectedPartitionValue(),"An expected partition value must be specified.");  key.setExpectedPartitionValue(key.getExpectedPartitionValue().trim());}  }
class C{  public boolean checkIff(String flag1,String flag2){  if (isSet(flag1) != isSet(flag2)) {    setParseMessage("Flags " + LONG_FLAG_PREFIX + flag1+ " and "+ LONG_FLAG_PREFIX+ flag2+ " must be set together");    return false;  }  return true;}  }
class C{  public synchronized void addHeader(String name,String value){  String nameLower=name.toLowerCase(Locale.ENGLISH);  List<String> headerValueList=headerNameToValueListMap.get(nameLower);  if (null == headerValueList) {    headerValueList=new ArrayList<String>();    headerNameToValueListMap.put(nameLower,headerValueList);  }  headerValueList.add(value);}  }
class C{  public static Vector2 rand(){  return new Vector2(Math.random(),Math.random());}  }
class C{  public static <T>T testCoder(Coder<T> coder,boolean isWholeStream,T value) throws IOException {  Coder.Context context=isWholeStream ? Coder.Context.OUTER : Coder.Context.NESTED;  byte[] encoded=CoderUtils.encodeToByteArray(coder,value,context);  return CoderUtils.decodeFromByteArray(coder,encoded,context);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.SAVE_HISTORY__REGION:    if (resolve)     return getRegion();  return basicGetRegion();case SexecPackage.SAVE_HISTORY__DEEP:return isDeep();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static Manifest generateEmptyManifest(){  Manifest manifest=new Manifest();  manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION,"1.0");  return manifest;}  }
class C{  public static LatLon interpolateRhumb(double amount,LatLon value1,LatLon value2){  if (value1 == null || value2 == null) {    throw new IllegalArgumentException("Lat Lon Is Null");  }  if (LatLon.equals(value1,value2))   return value1;  double t=WWMath.clamp(amount,0d,1d);  Angle azimuth=LatLon.rhumbAzimuth(value1,value2);  Angle distance=LatLon.rhumbDistance(value1,value2);  Angle pathLength=Angle.fromDegrees(t * distance.degrees);  return LatLon.rhumbEndPosition(value1,azimuth,pathLength);}  }
class C{  public SerialLight(String systemName,SerialTrafficController tc){  super(systemName);  this.tc=tc;  initializeLight();}  }
class C{  public static <K,V>Map<K,V> asMap(K key,V val){  A.notNull(val,"val");  return F.asMap(key,val);}  }
class C{  @Override public void onDragEnd(){  showActionBar();}  }
class C{  FlexibleNode readExternalNode(HashMap<String,Taxon> translationList) throws ImportException, IOException {  FlexibleNode node=new FlexibleNode();  String label=readToken(":(),;");  Taxon taxon;  if (translationList.size() > 0) {    taxon=translationList.get(label);    if (taxon == null) {      throw new UnknownTaxonException("Taxon in tree, '" + label + "' is unknown");    }  } else {    taxon=new Taxon(label);  }  if (getLastMetaComment() != null) {    try {      parseMetaCommentPairs(getLastMetaComment(),node);    } catch (    BadFormatException bfe) {    }    clearLastMetaComment();  }  node.setTaxon(taxon);  return node;}  }
class C{  @Nullable @Provides @Config("rdapWhoisServer") public static String provideRdapWhoisServer(){  return null;}  }
class C{  public static HostScsiTopologyLun findLun(HostScsiTopologyTarget target,int hlu){  if ((target != null) && (target.getLun() != null)) {    for (    HostScsiTopologyLun lun : target.getLun()) {      if (lun.getLun() == hlu) {        return lun;      }    }  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.527 -0500",hash_original_method="26A045F795A631008C79D159817C5762",hash_generated_method="258CC6A1F3B447429293C07E7A4C1F65") public Mesh create(){  mRS.validate();  int[] vtx=new int[mVertexTypeCount];  int[] idx=new int[mIndexTypes.size()];  int[] prim=new int[mIndexTypes.size()];  Allocation[] indexBuffers=new Allocation[mIndexTypes.size()];  Primitive[] primitives=new Primitive[mIndexTypes.size()];  Allocation[] vertexBuffers=new Allocation[mVertexTypeCount];  for (int ct=0; ct < mVertexTypeCount; ct++) {    Entry entry=mVertexTypes[ct];    vertexBuffers[ct]=entry.a;    vtx[ct]=entry.a.getID();  }  for (int ct=0; ct < mIndexTypes.size(); ct++) {    Entry entry=(Entry)mIndexTypes.elementAt(ct);    int allocID=(entry.a == null) ? 0 : entry.a.getID();    indexBuffers[ct]=entry.a;    primitives[ct]=entry.prim;    idx[ct]=allocID;    prim[ct]=entry.prim.mID;  }  int id=mRS.nMeshCreate(vtx,idx,prim);  Mesh newMesh=new Mesh(id,mRS);  newMesh.mVertexBuffers=vertexBuffers;  newMesh.mIndexBuffers=indexBuffers;  newMesh.mPrimitives=primitives;  return newMesh;}  }
class C{  public void blockRequest(){  trace("[{}] Block all requests",gondola.getHostId());  globalLock=new CountDownLatch(1);}  }
class C{  public final void addChildNode(QueryPlanNode childNode){  childNodes.add(childNode);}  }
class C{  public void updateClassifier(Instance instance) throws Exception {  instance=normalizeInstance(instance);  m_BayesNetEstimator.updateClassifier(this,instance);}  }
class C{  static boolean handleIconKeyEvent(View v,int keyCode,KeyEvent e){  boolean consume=FocusLogic.shouldConsume(keyCode);  if (e.getAction() == KeyEvent.ACTION_UP || !consume) {    return consume;  }  Launcher launcher=(Launcher)v.getContext();  DeviceProfile profile=launcher.getDeviceProfile();  if (DEBUG) {    Log.v(TAG,String.format("Handle WORKSPACE ICONS keyevent=[%s] isVerticalBar=%s",KeyEvent.keyCodeToString(keyCode),profile.isVerticalBarLayout()));  }  ShortcutAndWidgetContainer parent=(ShortcutAndWidgetContainer)v.getParent();  CellLayout iconLayout=(CellLayout)parent.getParent();  final Workspace workspace=(Workspace)iconLayout.getParent();  final ViewGroup dragLayer=(ViewGroup)workspace.getParent();  final ViewGroup tabs=(ViewGroup)dragLayer.findViewById(R.id.search_drop_target_bar);  final Hotseat hotseat=(Hotseat)dragLayer.findViewById(R.id.hotseat);  final ItemInfo itemInfo=(ItemInfo)v.getTag();  final int iconIndex=parent.indexOfChild(v);  final int pageIndex=workspace.indexOfChild(iconLayout);  final int pageCount=workspace.getChildCount();  CellLayout hotseatLayout=(CellLayout)hotseat.getChildAt(0);  ShortcutAndWidgetContainer hotseatParent=hotseatLayout.getShortcutsAndWidgets();  int[][] matrix;  if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN && !profile.isVerticalBarLayout()) {    matrix=FocusLogic.createSparseMatrixWithHotseat(iconLayout,hotseatLayout,true,profile.inv.hotseatAllAppsRank);  } else   if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT && profile.isVerticalBarLayout()) {    matrix=FocusLogic.createSparseMatrixWithHotseat(iconLayout,hotseatLayout,false,profile.inv.hotseatAllAppsRank);  } else   if (isUninstallKeyChord(e)) {    matrix=FocusLogic.createSparseMatrix(iconLayout);    if (UninstallDropTarget.supportsDrop(launcher,itemInfo)) {      UninstallDropTarget.startUninstallActivity(launcher,itemInfo);    }  } else   if (isDeleteKeyChord(e)) {    matrix=FocusLogic.createSparseMatrix(iconLayout);    launcher.removeItem(v,itemInfo,true);  } else {    matrix=FocusLogic.createSparseMatrix(iconLayout);  }  int newIconIndex=FocusLogic.handleKeyEvent(keyCode,matrix,iconIndex,pageIndex,pageCount,Utilities.isRtl(v.getResources()));  boolean isRtl=Utilities.isRtl(v.getResources());  View newIcon=null;  CellLayout workspaceLayout=(CellLayout)workspace.getChildAt(pageIndex);switch (newIconIndex) {case FocusLogic.NOOP:    if (keyCode == KeyEvent.KEYCODE_DPAD_UP) {      newIcon=tabs;    }  break;case FocusLogic.PREVIOUS_PAGE_RIGHT_COLUMN:case FocusLogic.NEXT_PAGE_RIGHT_COLUMN:int newPageIndex=pageIndex - 1;if (newIconIndex == FocusLogic.NEXT_PAGE_RIGHT_COLUMN) {newPageIndex=pageIndex + 1;}int row=((CellLayout.LayoutParams)v.getLayoutParams()).cellY;parent=getCellLayoutChildrenForIndex(workspace,newPageIndex);if (parent != null) {iconLayout=(CellLayout)parent.getParent();matrix=FocusLogic.createSparseMatrixWithPivotColumn(iconLayout,iconLayout.getCountX(),row);newIconIndex=FocusLogic.handleKeyEvent(keyCode,matrix,FocusLogic.PIVOT,newPageIndex,pageCount,Utilities.isRtl(v.getResources()));if (newIconIndex == FocusLogic.NEXT_PAGE_FIRST_ITEM) {newIcon=handleNextPageFirstItem(workspace,hotseatLayout,pageIndex,isRtl);} else if (newIconIndex == FocusLogic.PREVIOUS_PAGE_LAST_ITEM) {newIcon=handlePreviousPageLastItem(workspace,hotseatLayout,pageIndex,isRtl);} else {newIcon=parent.getChildAt(newIconIndex);}}break;case FocusLogic.PREVIOUS_PAGE_FIRST_ITEM:workspaceLayout=(CellLayout)workspace.getChildAt(pageIndex - 1);newIcon=getFirstFocusableIconInReadingOrder(workspaceLayout,isRtl);if (newIcon == null) {newIcon=getFirstFocusableIconInReadingOrder(hotseatLayout,isRtl);workspace.snapToPage(pageIndex - 1);}break;case FocusLogic.PREVIOUS_PAGE_LAST_ITEM:newIcon=handlePreviousPageLastItem(workspace,hotseatLayout,pageIndex,isRtl);break;case FocusLogic.NEXT_PAGE_FIRST_ITEM:newIcon=handleNextPageFirstItem(workspace,hotseatLayout,pageIndex,isRtl);break;case FocusLogic.NEXT_PAGE_LEFT_COLUMN:case FocusLogic.PREVIOUS_PAGE_LEFT_COLUMN:newPageIndex=pageIndex + 1;if (newIconIndex == FocusLogic.PREVIOUS_PAGE_LEFT_COLUMN) {newPageIndex=pageIndex - 1;}row=((CellLayout.LayoutParams)v.getLayoutParams()).cellY;parent=getCellLayoutChildrenForIndex(workspace,newPageIndex);if (parent != null) {iconLayout=(CellLayout)parent.getParent();matrix=FocusLogic.createSparseMatrixWithPivotColumn(iconLayout,-1,row);newIconIndex=FocusLogic.handleKeyEvent(keyCode,matrix,FocusLogic.PIVOT,newPageIndex,pageCount,Utilities.isRtl(v.getResources()));if (newIconIndex == FocusLogic.NEXT_PAGE_FIRST_ITEM) {newIcon=handleNextPageFirstItem(workspace,hotseatLayout,pageIndex,isRtl);} else if (newIconIndex == FocusLogic.PREVIOUS_PAGE_LAST_ITEM) {newIcon=handlePreviousPageLastItem(workspace,hotseatLayout,pageIndex,isRtl);} else {newIcon=parent.getChildAt(newIconIndex);}}break;case FocusLogic.CURRENT_PAGE_FIRST_ITEM:newIcon=getFirstFocusableIconInReadingOrder(workspaceLayout,isRtl);if (newIcon == null) {newIcon=getFirstFocusableIconInReadingOrder(hotseatLayout,isRtl);}break;case FocusLogic.CURRENT_PAGE_LAST_ITEM:newIcon=getFirstFocusableIconInReverseReadingOrder(workspaceLayout,isRtl);if (newIcon == null) {newIcon=getFirstFocusableIconInReverseReadingOrder(hotseatLayout,isRtl);}break;default :if (0 <= newIconIndex && newIconIndex < parent.getChildCount()) {newIcon=parent.getChildAt(newIconIndex);} else if (parent.getChildCount() <= newIconIndex && newIconIndex < parent.getChildCount() + hotseatParent.getChildCount()) {newIcon=hotseatParent.getChildAt(newIconIndex - parent.getChildCount());}break;}if (newIcon != null) {newIcon.requestFocus();playSoundEffect(keyCode,v);}return consume;}  }
class C{  private static final String export(SandboxRay ray,String tabs){  StringBuilder sb=new StringBuilder();  sb.append(tabs).append("List<RaycastResult> results = new ArrayList<RaycastResult>();").append(NEW_LINE);  sb.append(tabs).append("Ray ray = new Ray(").append(export(ray.getStart())).append(", ").append("Math.toRadians(").append(Math.toDegrees(ray.getDirection())).append(")").append(");").append(NEW_LINE);  sb.append(tabs).append("world.raycast(ray, ").append(ray.getLength()).append(", ").append("null, ").append(ray.isIgnoreSensors()).append(", ").append("true, ").append(ray.isAll()).append(", ").append("results);").append(NEW_LINE);  return sb.toString();}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_Start:    return stateVector[0] == State.main_region_Start;case main_region_B:  return stateVector[0] == State.main_region_B;case main_region_A:return stateVector[0] == State.main_region_A;default :return false;}}  }
class C{  public BreakpointConditionSetParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_SET_BREAKPOINT_CONDITION_SUCC);}  }
class C{  public void addRenderingHints(Map<?,?> hints){  mGraphics.addRenderingHints(hints);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.EXTERNAL_DEFINITION___INTERFACE_1:    setInterface_1(INTERFACE_1_EDEFAULT);  return;case UmplePackage.EXTERNAL_DEFINITION___NAME_1:setName_1(NAME_1_EDEFAULT);return;case UmplePackage.EXTERNAL_DEFINITION___CLASS_CONTENT_1:getClassContent_1().clear();return;}super.eUnset(featureID);}  }
class C{  public static Object trackActivity(Object instance){  return new InstanceTracker(instance);}  }
class C{  private void createEditor(){  m_editor=VEditorFactory.getEditor(m_mField,true);  m_editor.addVetoableChangeListener(this);  m_editor.addActionListener(this);}  }
class C{  @Override public int add(LibraryFilesTableDataLine dl,int row){  File init=dl.getInitializeObject();  if (!contains(init)) {    return forceAdd(dl,row);  } else {    dl.cleanup();  }  return -1;}  }
class C{  public String expandString(String original){  return FlexibleStringExpander.expandString(original,getBindings());}  }
class C{  public void onCancelAllRealtimeData(){  if (m_client.isConnected()) {    for (    Tradestrategy tradestrategy : m_historyDataRequests.values()) {      this.onCancelBrokerData(tradestrategy);    }    for (    Contract contract : m_realTimeBarsRequests.values()) {      this.onCancelRealtimeBars(contract);    }    for (    Contract contract : m_marketDataRequests.values()) {      this.onCancelMarketData(contract);    }    for (    Contract contract : m_contractRequests.values()) {      this.onCancelContractDetails(contract);    }  }  m_contractRequests.clear();  m_historyDataRequests.clear();  m_realTimeBarsRequests.clear();  m_marketDataRequests.clear();}  }
class C{  @SuppressWarnings("unchecked") protected void receiveAttack(Packet c){  List<EntityAction> vector=(List<EntityAction>)c.getObject(0);  int charge=c.getIntValue(1);  boolean addAction=true;  for (  EntityAction ea : vector) {    int entityId=ea.getEntityId();    if ((ea instanceof TorsoTwistAction) && game.hasEntity(entityId)) {      TorsoTwistAction tta=(TorsoTwistAction)ea;      Entity entity=game.getEntity(entityId);      entity.setSecondaryFacing(tta.getFacing());    } else     if ((ea instanceof FlipArmsAction) && game.hasEntity(entityId)) {      FlipArmsAction faa=(FlipArmsAction)ea;      Entity entity=game.getEntity(entityId);      entity.setArmsFlipped(faa.getIsFlipped());    } else     if ((ea instanceof DodgeAction) && game.hasEntity(entityId)) {      Entity entity=game.getEntity(entityId);      entity.dodging=true;      addAction=false;    } else     if (ea instanceof AttackAction) {      if (ea instanceof ClubAttackAction) {        ClubAttackAction caa=(ClubAttackAction)ea;        Mounted club=caa.getClub();        club.restore();      }    }    if (addAction) {      if (charge == 0) {        game.addAction(ea);      } else       if (charge == 1) {        game.addCharge((AttackAction)ea);      }    }  }}  }
class C{  public LocalTime withMaximumValue(){  return setCopy(getMaximumValue());}  }
class C{  private int interpolateColor(double lerp,int val1,int val2){  return (int)(lerp * (double)val1 + (1.0D - lerp) * (double)val2);}  }
class C{  @Override synchronized public int estimateOutputSize(final int inLen){  int outSize=bytesToDecrypt_.length + unparsedBytes_.length;  if (inLen > 0) {    outSize+=inLen;  }  return outSize;}  }
class C{  public static Plane fromPoints(Vec4 pa,Vec4 pb,Vec4 pc){  if (pa == null || pb == null || pc == null) {    String message=Logging.getMessage("nullValue.Vec4IsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Vec4 vab=pb.subtract3(pa);  Vec4 vac=pc.subtract3(pa);  Vec4 n=vab.cross3(vac);  double d=-n.dot3(pa);  return new Plane(n.x,n.y,n.z,d);}  }
class C{  public static boolean deleteDir(File dir){  if (dir != null && dir.isDirectory()) {    String[] children=dir.list();    for (int i=0; i < children.length; i++) {      boolean success=deleteDir(new File(dir,children[i]));      if (!success) {        return false;      }    }  }  return dir.delete();}  }
class C{  public void removeListener(final IDatabaseSettingsPanelListener listener){  listeners.removeListener(listener);}  }
class C{  private void fetchBlockScalar(char style){  this.allowSimpleKey=true;  removePossibleSimpleKey();  Token tok=scanBlockScalar(style);  this.tokens.add(tok);}  }
class C{  public boolean isPostIfClearingEqual(){  Object oo=get_Value(COLUMNNAME_IsPostIfClearingEqual);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void endWindow(){  if (flag) {    min.emit(low);  }  flag=false;  low=null;}  }
class C{  public SamplePartitionScanner(){  IToken tkString=new Token(LANG_STRING);  IToken tkRawString=new Token(LANG_RAW_STRING);  IToken tkCharacter=new Token(LANG_CHARACTER);  IToken tkSingleComment=new Token(LANG_SINGLE_COMMENT);  IToken tkMultiComment=new Token(LANG_MULTI_COMMENT);  List<IPredicateRule> rules=new ArrayList<IPredicateRule>();  rules.add(new MultiLineRule("`","`",tkRawString,NO_ESCAPE,true));  rules.add(new MultiLineRule("\"","\"",tkString,'\\',true));  rules.add(new SingleLineRule("'","'",tkCharacter,'\\',true));  rules.add(new EndOfLineRule("//",tkSingleComment,NO_ESCAPE));  rules.add(new MultiLineRule("/*","*/",tkMultiComment,NO_ESCAPE,true));  setPredicateRules(rules.toArray(new IPredicateRule[rules.size()]));}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public LogicalPosition withoutVisualPositionInfo(){  return new LogicalPosition(line,column,leansForward);}  }
class C{  public void onScreenChange(int currentScreen,int lastScreen){  ImageView[] points=platformGridView.points;  for (int i=0; i < points.length; i++) {    points[i].setImageBitmap(platformGridView.grayPoint);  }  points[currentScreen].setImageBitmap(platformGridView.bluePoint);}  }
class C{  public void onCancelRealtimeBars(Tradestrategy tradestrategy){  if (m_realTimeBarsRequests.containsKey(tradestrategy.getContract().getId())) {    Contract contract=m_realTimeBarsRequests.get(tradestrategy.getContract().getId());    for (    Tradestrategy item : contract.getTradestrategies()) {      if (item.equals(tradestrategy)) {        contract.removeTradestrategy(tradestrategy);        break;      }    }    if (contract.getTradestrategies().isEmpty())     onCancelRealtimeBars(contract);  }}  }
class C{  public static Pair<TaskEstimate,HiveObjectSpec> deseralizeJobResult(String result){  String[] fields=result.split("\t");  TaskEstimate estimate=new TaskEstimate(TaskEstimate.TaskType.valueOf(fields[0]),Boolean.valueOf(fields[1]),Boolean.valueOf(fields[2]),fields[3].equals("NULL") ? Optional.empty() : Optional.of(new Path(fields[3])),fields[4].equals("NULL") ? Optional.empty() : Optional.of(new Path(fields[4])));  HiveObjectSpec spec=null;  if (fields[7].equals("NULL")) {    spec=new HiveObjectSpec(fields[5],fields[6]);  } else {    spec=new HiveObjectSpec(fields[5],fields[6],fields[7]);  }  return Pair.of(estimate,spec);}  }
class C{  private void restoreSettings(final ConfigManager configFile){  if (configFile.getGeneralSettings().isMaximizeWindow()) {    final Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();    setSize(screenSize.width,screenSize.height);    setExtendedState(MAXIMIZED_BOTH);  } else {    final GeneralSettingsConfigItem.LastOpenWindowConfigItem window=configFile.getGeneralSettings().getLastOpenWindow();    final int top=window.getTop();    final int left=window.getLeft();    final int height=window.getHeight();    final int width=window.getWidth();    setLocation(left,top);    setSize(width,height);  }}  }
class C{  public void writeRawLittleEndian32(final int value) throws IOException {  writeRawByte((value) & 0xFF);  writeRawByte((value >> 8) & 0xFF);  writeRawByte((value >> 16) & 0xFF);  writeRawByte((value >> 24) & 0xFF);}  }
class C{  private BitLevel(){}  }
class C{  public Document doc(int docID) throws IOException {  return reader.document(docID);}  }
class C{  public static String makeDescriptor(String params,Class retType){  StringBuffer sbuf=new StringBuffer(params);  makeDesc(sbuf,retType);  return sbuf.toString();}  }
class C{  public final Flux<T> firstEmittingWith(Publisher<? extends T> other){  if (this instanceof FluxFirstEmitting) {    FluxFirstEmitting<T> publisherAmb=(FluxFirstEmitting<T>)this;    FluxFirstEmitting<T> result=publisherAmb.ambAdditionalSource(other);    if (result != null) {      return result;    }  }  return firstEmitting(this,other);}  }
class C{  public String rawSource(){  return source;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE_CASE_DEACTIVATION___TRACECASE_DEACT_NAME_1:    setTracecase_deact_name_1((String)newValue);  return;case UmplePackage.TRACE_CASE_DEACTIVATION___DE_ACTIVATE_FOR_1:getDeActivateFor_1().clear();getDeActivateFor_1().addAll((Collection<? extends DeActivateFor_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static ReportMailingJob newInstance(JsonCommand jsonCommand,final Report stretchyReport,final AppUser runAsUser){  final String name=jsonCommand.stringValueOfParameterNamed(ReportMailingJobConstants.NAME_PARAM_NAME);  final String description=jsonCommand.stringValueOfParameterNamed(ReportMailingJobConstants.DESCRIPTION_PARAM_NAME);  final String recurrence=jsonCommand.stringValueOfParameterNamed(ReportMailingJobConstants.RECURRENCE_PARAM_NAME);  final boolean isActive=jsonCommand.booleanPrimitiveValueOfParameterNamed(ReportMailingJobConstants.IS_ACTIVE_PARAM_NAME);  final String emailRecipients=jsonCommand.stringValueOfParameterNamed(ReportMailingJobConstants.EMAIL_RECIPIENTS_PARAM_NAME);  final String emailSubject=jsonCommand.stringValueOfParameterNamed(ReportMailingJobConstants.EMAIL_SUBJECT_PARAM_NAME);  final String emailMessage=jsonCommand.stringValueOfParameterNamed(ReportMailingJobConstants.EMAIL_MESSAGE_PARAM_NAME);  final String stretchyReportParamMap=jsonCommand.stringValueOfParameterNamed(ReportMailingJobConstants.STRETCHY_REPORT_PARAM_MAP_PARAM_NAME);  final Integer emailAttachmentFileFormatId=jsonCommand.integerValueOfParameterNamed(ReportMailingJobConstants.EMAIL_ATTACHMENT_FILE_FORMAT_ID_PARAM_NAME);  final ReportMailingJobEmailAttachmentFileFormat emailAttachmentFileFormat=ReportMailingJobEmailAttachmentFileFormat.newInstance(emailAttachmentFileFormatId);  LocalDateTime startDateTime=new LocalDateTime();  if (jsonCommand.hasParameter(ReportMailingJobConstants.START_DATE_TIME_PARAM_NAME)) {    final String startDateTimeString=jsonCommand.stringValueOfParameterNamed(ReportMailingJobConstants.START_DATE_TIME_PARAM_NAME);    if (startDateTimeString != null) {      final DateTimeFormatter dateTimeFormatter=DateTimeFormat.forPattern(jsonCommand.dateFormat()).withLocale(jsonCommand.extractLocale());      startDateTime=LocalDateTime.parse(startDateTimeString,dateTimeFormatter);    }  }  return new ReportMailingJob(name,description,startDateTime,recurrence,emailRecipients,emailSubject,emailMessage,emailAttachmentFileFormat,stretchyReport,stretchyReportParamMap,null,startDateTime,null,null,null,isActive,false,runAsUser);}  }
class C{  public List<String> implementInterface(Classifier inter){  ArrayList<String> incompatible=new ArrayList<String>();  for (  Artifact iMember : inter) {    Member localMember=(Member)artifact(iMember.name());    if (localMember != null && !localMember.matches(iMember,false)) {      incompatible.add(iMember.name());    }  }  if (incompatible.size() == 0) {    boolean makePublic=inter.module != module;    for (    Artifact iMember : inter) {      Member localMember=(Member)artifact(iMember.name());      if (localMember != null) {        if (makePublic) {          localMember.setPublic(true);        }      } else {        if (iMember instanceof Property) {          Property iProperty=(Property)iMember;          Property localProperty=new Property(this,iProperty.name(),iProperty.type(),null);          if (makePublic) {            localProperty.setPublic(true);          }          addProperty(localProperty);        } else         if (iMember instanceof Operation) {          VirtualOperation iOperation=(VirtualOperation)iMember;          CustomOperation operation=new CustomOperation(this,iMember.name(),true);          int col=1;          for (          Parameter p : iOperation.inputParameter) {            operation.addPort(1,col,true,false,p.type,p.name);            col+=3;          }          col=1;          for (          Parameter p : iOperation.outputParameter) {            operation.addPort(5,col,false,true,p.type,p.name);            col+=3;          }          if (makePublic) {            operation.setPublic(true);          }          addOperation(operation);        }      }    }  }  return incompatible;}  }
class C{  public void writeBits(long value,int bitOffset,int bitSize){  if ((bitOffset + bitSize - 1) >> 3 >= this.size())   throw new IllegalArgumentException("Attempt to write outside the Struct");  int offset=bitOffset >> 3;  int bitStart=(byteOrder() == ByteOrder.BIG_ENDIAN) ? bitOffset - (offset << 3) : 64 - bitSize - (bitOffset - (offset << 3));  long mask=-1L;  mask<<=bitStart;  mask>>>=(64 - bitSize);  mask<<=64 - bitSize - bitStart;  value<<=(64 - bitSize - bitStart);  value&=mask;  int index=getByteBufferPosition() + offset;  long oldValue=readByteBufferLong(index);  long resetValue=oldValue & (~mask);  long newValue=resetValue | value;  writeByteBufferLong(index,newValue);}  }
class C{  public int size(){  return properties.size();}  }
class C{  public T caseAfterEveryEvent_(AfterEveryEvent_ object){  return null;}  }
class C{  private void addSourcesLookupProjectsFromMavenIfExist(ILaunchConfiguration configuration){  try {    IJavaProject curProject=JavaRuntime.getJavaProject(configuration);    boolean isMaven=ProjectUtil.isMavenProject(curProject.getProject());    if (!isMaven) {      return;    }    List<IProject> projs=RunJettyRunSourceLookupUtil.findMavenRelatedProjects(configuration);    if (projs.size() == 0) {      return;    }    ISourceLookupDirector sourceDir=new JavaSourceLookupDirector();    ILaunchConfigurationWorkingCopy workCopy=configuration.getWorkingCopy();    String initMemento=workCopy.getAttribute(ILaunchConfiguration.ATTR_SOURCE_LOCATOR_MEMENTO,"");    if (initMemento != null && !initMemento.trim().equals("")) {      sourceDir.initializeFromMemento(initMemento);    }    ISourceContainer[] existContainers=sourceDir.getSourceContainers();    List<ISourceContainer> realContainers=new ArrayList<ISourceContainer>();    for (    ISourceContainer container : existContainers) {      realContainers.add(container);    }    ISourceContainer defaultContainer=new DefaultSourceContainer();    if (!contains(existContainers,defaultContainer)) {      realContainers.add(defaultContainer);    }    for (    IProject dependency : projs) {      ISourceContainer newContainer=new JavaProjectSourceContainer(JavaCore.create((IProject)dependency));      if (!contains(existContainers,newContainer)) {        realContainers.add(newContainer);      }    }    sourceDir.setSourceContainers(realContainers.toArray(new ISourceContainer[realContainers.size()]));    workCopy.setAttribute(ILaunchConfiguration.ATTR_SOURCE_LOCATOR_MEMENTO,sourceDir.getMemento());    workCopy.doSave();  } catch (  Exception e) {  }}  }
class C{  public Object executeScript(Map<String,Object> context) throws Exception {  return ScriptUtil.evaluate(language,script,null,context);}  }
class C{  protected DoubleBuffer[] buffersToCollapse(){  DoubleBuffer[] fullBuffers=bufferSet._getFullOrPartialBuffers();  sortAscendingByLevel(fullBuffers);  int minLevel=fullBuffers[1].level();  if (fullBuffers[0].level() < minLevel) {    fullBuffers[0].level(minLevel);  }  return bufferSet._getFullOrPartialBuffersWithLevel(minLevel);}  }
class C{  @LargeTest public void testCameraPairwiseScenario18() throws Exception {  genericPairwiseTestCase(Flash.ON,Exposure.NONE,WhiteBalance.AUTO,SceneMode.PARTY,PictureSize.LARGE,Geotagging.OFF);}  }
class C{  public T caseSource(Source object){  return null;}  }
class C{  public static int[] toPrimitive(List<Integer> list){  int[] a=new int[list.size()];  Iterator<Integer> iter=list.iterator();  for (int i=0; iter.hasNext(); i++) {    a[i]=iter.next();  }  return a;}  }
class C{  public CDebuggerWrapper(final IDebugger debugger){  super(debugger);  Preconditions.checkNotNull(debugger,"IE01368: Debugger can not be null");}  }
class C{  private void notifyBusyChange(boolean oldBusy,boolean newBusy){  if (log.isDebugEnabled()) {    log.debug("notifyBusy from " + oldBusy + " to "+ newBusy+ " current state "+ _state);  }  if (oldBusy != newBusy) {    prop.firePropertyChange("Busy",oldBusy ? Boolean.TRUE : Boolean.FALSE,newBusy ? Boolean.TRUE : Boolean.FALSE);  }}  }
class C{  private void unlinkCancelledWaiters(){  Node t=firstWaiter;  Node trail=null;  while (t != null) {    Node next=t.nextWaiter;    if (t.waitStatus != Node.CONDITION) {      t.nextWaiter=null;      if (trail == null)       firstWaiter=next; else       trail.nextWaiter=next;      if (next == null)       lastWaiter=trail;    } else     trail=t;    t=next;  }}  }
class C{  public static boolean isPrime(MyInteger myInteger){  return myInteger.isPrime();}  }
class C{  public static void deleteEdge(final INaviView view,final INaviEdge edge){  Preconditions.checkNotNull(view,"IE01727: View argument can not be null");  Preconditions.checkNotNull(edge,"IE01728: Edge argument can not be null");  view.getContent().deleteEdge(edge);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public String toString(){  return String.format("TraceLogger [%s : %s]",debugger.toString(),project == null ? module.getName() : project.getName());}  }
class C{  public void testSetCharacterStream() throws Exception {  try {    ((com.mysql.jdbc.Connection)this.conn).setTraceProtocol(true);    this.stmt.executeUpdate("DROP TABLE IF EXISTS charStreamRegressTest");    this.stmt.executeUpdate("CREATE TABLE charStreamRegressTest(field1 text)");    this.pstmt=this.conn.prepareStatement("INSERT INTO charStreamRegressTest VALUES (?)");    char[] charBuf=new char[32];    for (int i=0; i < charBuf.length; i++) {      charBuf[i]='A';    }    CharArrayReader reader=new CharArrayReader(charBuf);    this.pstmt.setCharacterStream(1,reader,charBuf.length);    this.pstmt.executeUpdate();    this.rs=this.stmt.executeQuery("SELECT LENGTH(field1) FROM charStreamRegressTest");    this.rs.next();    System.out.println("Character stream length: " + this.rs.getString(1));    this.rs=this.stmt.executeQuery("SELECT field1 FROM charStreamRegressTest");    this.rs.next();    String result=this.rs.getString(1);    assertTrue(result.length() == charBuf.length);    this.stmt.execute("TRUNCATE TABLE charStreamRegressTest");    reader=new CharArrayReader(charBuf);    this.pstmt.clearParameters();    this.pstmt.setCharacterStream(1,reader,charBuf.length);    this.pstmt.executeUpdate();    this.rs=this.stmt.executeQuery("SELECT LENGTH(field1) FROM charStreamRegressTest");    this.rs.next();    System.out.println("Character stream length: " + this.rs.getString(1));    this.rs=this.stmt.executeQuery("SELECT field1 FROM charStreamRegressTest");    this.rs.next();    result=this.rs.getString(1);    assertTrue("Retrieved value of length " + result.length() + " != length of inserted value "+ charBuf.length,result.length() == charBuf.length);    this.stmt.executeUpdate("DROP TABLE IF EXISTS `charStream'RegressTest`");    this.stmt.executeUpdate("CREATE TABLE `charStream'RegressTest`(field1 text)");    this.pstmt=this.conn.prepareStatement("INSERT INTO `charStream'RegressTest` VALUES (?)");    reader=new CharArrayReader(charBuf);    this.pstmt.setCharacterStream(1,reader,(charBuf.length * 2));    this.pstmt.executeUpdate();    this.rs=this.stmt.executeQuery("SELECT field1 FROM `charStream'RegressTest`");    this.rs.next();    result=this.rs.getString(1);    assertTrue("Retrieved value of length " + result.length() + " != length of inserted value "+ charBuf.length,result.length() == charBuf.length);  }  finally {    ((com.mysql.jdbc.Connection)this.conn).setTraceProtocol(false);    if (this.rs != null) {      try {        this.rs.close();      } catch (      Exception ex) {      }      this.rs=null;    }    this.stmt.executeUpdate("DROP TABLE IF EXISTS `charStream'RegressTest`");    this.stmt.executeUpdate("DROP TABLE IF EXISTS charStreamRegressTest");  }}  }
class C{  @Override @Inline public void scanObject(TransitiveClosure trace,ObjectReference object){  if (HandInlinedScanning.ENABLED) {    int tibCode=AlignmentEncoding.getTibCode(object);    HandInlinedScanning.scanObject(tibCode,object.toObject(),trace);  } else {    SpecializedScanMethod.fallback(object.toObject(),trace);  }}  }
class C{  public void render(Camera camera,final Matrix4 vpMatrix,final Matrix4 projMatrix,final Matrix4 vMatrix,Material sceneMaterial){  render(camera,vpMatrix,projMatrix,vMatrix,null,sceneMaterial);}  }
class C{  private static void updateMenus(Set<Report> toolResults,Set<String> catSet){  StringBuffer sb=new StringBuffer();  for (  Report toolReport : toolResults) {    if (!(showAveOnlyMode && toolReport.isCommercial())) {      sb.append("<li><a href=\"");      sb.append(toolReport.getFilename());      sb.append(".html\">");      sb.append(toolReport.getToolNameAndVersion());      sb.append("</a></li>");      sb.append(System.lineSeparator());    }  }  if (commercialAveScorecardFilename != null) {    sb.append("<li><a href=\"");    sb.append(commercialAveScorecardFilename);    sb.append(".html\">");    sb.append("Commercial Average");    sb.append("</a></li>");    sb.append(System.lineSeparator());  }  String toolmenu=sb.toString();  sb=new StringBuffer();  for (  String cat : catSet) {    String filename="Benchmark_v" + benchmarkVersion + "_Scorecard_for_"+ cat.replace(' ','_');    sb.append("            <li><a href=\"");    sb.append(filename);    sb.append(".html\">");    sb.append(cat);    sb.append("</a></li>");    sb.append(System.lineSeparator());  }  String vulnmenu=sb.toString();  updateMenuTemplates(toolmenu,vulnmenu);}  }
class C{  public static void main(String[] args){  CommandLineArgs params=new CommandLineArgs();  JCommander cmd=new JCommander(params);  try {    cmd.parse(args);  } catch (  ParameterException e) {    LOGGER.error(e);    JCommander.getConsole().println(e.getMessage());    cmd.usage();    System.exit(1);  }  if (params.getHelp()) {    cmd.usage();    return;  }  final String sourceEndpoint=params.getSourceEndpoint();  final String destinationEndpoint=params.getDestinationEndpoint();  final String destinationTable=params.getDestinationTable();  final String sourceTable=params.getSourceTable();  final double readThroughputRatio=params.getReadThroughputRatio();  final double writeThroughputRatio=params.getWriteThroughputRatio();  final int maxWriteThreads=params.getMaxWriteThreads();  final boolean consistentScan=params.getConsistentScan();  final ClientConfiguration sourceConfig=new ClientConfiguration().withMaxConnections(BootstrapConstants.MAX_CONN_SIZE);  final ClientConfiguration destinationConfig=new ClientConfiguration().withMaxConnections(BootstrapConstants.MAX_CONN_SIZE);  final AmazonDynamoDBClient sourceClient=new AmazonDynamoDBClient(new DefaultAWSCredentialsProviderChain(),sourceConfig);  final AmazonDynamoDBClient destinationClient=new AmazonDynamoDBClient(new DefaultAWSCredentialsProviderChain(),destinationConfig);  sourceClient.setEndpoint(sourceEndpoint);  destinationClient.setEndpoint(destinationEndpoint);  TableDescription readTableDescription=sourceClient.describeTable(sourceTable).getTable();  TableDescription writeTableDescription=destinationClient.describeTable(destinationTable).getTable();  int numSegments=10;  try {    numSegments=DynamoDBBootstrapWorker.getNumberOfSegments(readTableDescription);  } catch (  NullReadCapacityException e) {    LOGGER.warn("Number of segments not specified - defaulting to " + numSegments,e);  }  final double readThroughput=calculateThroughput(readTableDescription,readThroughputRatio,true);  final double writeThroughput=calculateThroughput(writeTableDescription,writeThroughputRatio,false);  try {    ExecutorService sourceExec=getSourceThreadPool(numSegments);    ExecutorService destinationExec=getDestinationThreadPool(maxWriteThreads);    DynamoDBConsumer consumer=new DynamoDBConsumer(destinationClient,destinationTable,writeThroughput,destinationExec);    final DynamoDBBootstrapWorker worker=new DynamoDBBootstrapWorker(sourceClient,readThroughput,sourceTable,sourceExec,params.getSection(),params.getTotalSections(),numSegments,consistentScan);    LOGGER.info("Starting transfer...");    worker.pipe(consumer);    LOGGER.info("Finished Copying Table.");  } catch (  ExecutionException e) {    LOGGER.error("Encountered exception when executing transfer.",e);  }catch (  InterruptedException e) {    LOGGER.error("Interrupted when executing transfer.",e);    System.exit(1);  }catch (  SectionOutOfRangeException e) {    LOGGER.error("Invalid section parameter",e);  }}  }
class C{  private void runEnumeration() throws Throwable {  ResourceEnumerationTaskState enumTask=createResourceEnumerationTask(this.outPool.documentSelfLink,this.computeHost.documentSelfLink,GCPEnumerationAdapterService.SELF_LINK,this.isMock,this.computeHost.tenantLinks);  ResourceEnumerationTaskState enumTaskState=performResourceEnumeration(this.host,null,enumTask);  this.host.waitForFinishedTask(ResourceEnumerationTaskState.class,enumTaskState.documentSelfLink);}  }
class C{  public static void main(String[] args){  String outputFolderRunA="h:/data/experiments/parkingSearchOct2013/runs/run403/output/";  String outputFolderRunB="h:/data/experiments/parkingSearchOct2013/runs/run404/output/";  int iteration=499;  boolean ignoreCasesWithBothPPUse=true;  System.out.println("x\ty\tscoreDiff");  Matrix eventsMatrixA=GeneralLib.readStringMatrix(getEventsFileName(outputFolderRunA,iteration));  Matrix eventsMatrixB=GeneralLib.readStringMatrix(getEventsFileName(outputFolderRunB,iteration));  printScoreDifferenceAndCoordinates(eventsMatrixA,eventsMatrixB,ignoreCasesWithBothPPUse);}  }
class C{  default B addCanDestoryMaterial(final ToolMeta src){  final Set<BlockMaterialData> data=src.getCanDestoryMaterials();  if ((data == null) || data.isEmpty()) {    return this.getBuilder();  }  final M meta=this.meta();  data.forEach(null);  return this.getBuilder();}  }
class C{  public boolean isAutoFit(){  return autoFit;}  }
class C{  public static <T>LazyQueueX<T> fromPublisher(Publisher<? extends T> publisher){  return fromStreamS(ReactiveSeq.fromPublisher((Publisher<T>)publisher));}  }
class C{  public final AC shrinkPrio(int p,int... indexes){  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setShrinkPriority(p);  }  return this;}  }
class C{  public synchronized boolean containsAll(Collection<?> c){  return super.containsAll(c);}  }
class C{  public Team findTeamAbbr(String abbr){  for (int i=0; i < teamList.size(); i++) {    if (teamList.get(i).abbr.equals(abbr)) {      return teamList.get(i);    }  }  return teamList.get(0);}  }
class C{  public int invalidateTable(String schema,String tableName){  String key=generateKey(schema,tableName);  return cache.invalidate(key);}  }
class C{  public DTEDAdmin(){}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public void addResourceBundleAndOverwrite(ResourceBundle bundle){  bundles.add(0,bundle);}  }
class C{  public CachedRowSet toCachedRowSet() throws SQLException {  return crsInternal;}  }
class C{  protected Attribute(final String type){  this.type=type;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.763 -0400",hash_original_method="0F22F1E3EA36EA07744483A876CD465E",hash_generated_method="308E2A99589706B1259CF191D413D0EA") public PrefixFileFilter(String prefix){  this(prefix,IOCase.SENSITIVE);}  }
class C{  void triggerWildcardExpander(final Collection<File> allFiles,final WildcardContext wildcardContext) throws IOException {  LOG.debug("wildcard resources: {}",allFiles);  if (allFiles.isEmpty()) {    final String message=String.format("No resource found for wildcard: %s",wildcardContext.getWildcard());    LOG.warn(message);    throw new IOException(message);  }  if (wildcardExpanderHandler != null) {    try {      wildcardExpanderHandler.apply(allFiles);    } catch (    final IOException e) {      throw e;    }catch (    final Exception e) {      LOG.debug("wildcard expanding error. Reporting original exception",e);      throw new IOException("Exception during expanding wildcard: " + e.getMessage());    }  }}  }
class C{  public synchronized UDAudio release(){  final MediaPlayer player=getMediaPlayer();  if (player != null) {    try {      player.release();    } catch (    Exception e) {      e.printStackTrace();    }  }  return this;}  }
class C{  synchronized boolean lockExclusive(){  if (sharedLockCount > 0 || isLockedExclusive) {    return false;  }  isLockedExclusive=true;  return true;}  }
class C{  public IOException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public RealmSampleUserItem withSetSelected(boolean selected){  this.mSelected=selected;  return this;}  }
class C{  public boolean handleError(DOMError error){  boolean fail=true;  String severity=null;  if (error.getSeverity() == DOMError.SEVERITY_WARNING) {    fail=false;    severity="[Warning]";  } else   if (error.getSeverity() == DOMError.SEVERITY_ERROR) {    severity="[Error]";  } else   if (error.getSeverity() == DOMError.SEVERITY_FATAL_ERROR) {    severity="[Fatal Error]";  }  System.err.println(severity + ": " + error.getMessage()+ "\t");  System.err.println("Type : " + error.getType() + "\t"+ "Related Data: "+ error.getRelatedData()+ "\t"+ "Related Exception: "+ error.getRelatedException());  return fail;}  }
class C{  public DSystemInformation(JDialog parent,String title,Dialog.ModalityType modality){  super(parent,title,modality);  initComponents();}  }
class C{  private void applyIncludes(Node source,final Properties variablesContext){  if (source.getNodeName().equals("include")) {    Properties fullContext;    String refid=getStringAttribute(source,"refid");    refid=PropertyParser.parse(refid,variablesContext);    Node toInclude=findSqlFragment(refid);    Properties newVariablesContext=getVariablesContext(source,variablesContext);    if (!newVariablesContext.isEmpty()) {      fullContext=new Properties();      fullContext.putAll(variablesContext);      fullContext.putAll(newVariablesContext);    } else {      fullContext=variablesContext;    }    applyIncludes(toInclude,fullContext);    if (toInclude.getOwnerDocument() != source.getOwnerDocument()) {      toInclude=source.getOwnerDocument().importNode(toInclude,true);    }    source.getParentNode().replaceChild(toInclude,source);    while (toInclude.hasChildNodes()) {      toInclude.getParentNode().insertBefore(toInclude.getFirstChild(),toInclude);    }    toInclude.getParentNode().removeChild(toInclude);  } else   if (source.getNodeType() == Node.ELEMENT_NODE) {    NodeList children=source.getChildNodes();    for (int i=0; i < children.getLength(); i++) {      applyIncludes(children.item(i),variablesContext);    }  } else   if (source.getNodeType() == Node.ATTRIBUTE_NODE && !variablesContext.isEmpty()) {    source.setNodeValue(PropertyParser.parse(source.getNodeValue(),variablesContext));  } else   if (source.getNodeType() == Node.TEXT_NODE && !variablesContext.isEmpty()) {    source.setNodeValue(PropertyParser.parse(source.getNodeValue(),variablesContext));  }}  }
class C{  @Override public void initForArch(IR ir){  PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet().asPPC();  phys.getJTOC().reserveRegister();  phys.getFirstConditionRegister().reserveRegister();}  }
class C{  public Junction add(String propertyName){  this.getChildren().add(new PropertyValueExpression(propertyName));  return this;}  }
class C{  public Boolean isMounted(){  return mounted;}  }
class C{  public MorfologikFilter(final TokenStream in){  this(in,new PolishStemmer().getDictionary());}  }
class C{  public double eval(double params[]){  return (Math.acos(params[0]));}  }
class C{  public DoubleBuffer3D(DoubleBuffer3DConsumer target,int capacity){  this.target=target;  this.capacity=capacity;  this.xElements=new double[capacity];  this.yElements=new double[capacity];  this.zElements=new double[capacity];  this.xList=new DoubleArrayList(xElements);  this.yList=new DoubleArrayList(yElements);  this.zList=new DoubleArrayList(zElements);  this.size=0;}  }
class C{  NameserverWhoisResponse(ImmutableList<HostResource> hosts,DateTime timestamp){  super(timestamp);  this.hosts=checkNotNull(hosts,"hosts");}  }
class C{  public CodeType findById(Integer idCodeType){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CodeType instance=entityManager.find(CodeType.class,idCodeType);    entityManager.getTransaction().commit();    return instance;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public static String lrs(String text){  int n=text.length();  SuffixArray sa=new SuffixArray(text);  String lrs="";  for (int i=1; i < n; i++) {    int length=sa.lcp(i);    if (length > lrs.length()) {      lrs=text.substring(sa.index(i),sa.index(i) + length);    }  }  return lrs;}  }
class C{  public void deallocatePage(int pageNumber) throws IOException {  assertWriting();  validatePageNumber(pageNumber);  _invalidPageBytes.rewind();  _channel.write(_invalidPageBytes,getPageOffset(pageNumber));  _globalUsageMap.addPageNumber(pageNumber);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return sage.plugin.CorePluginManager.getInstance().getMyPlugins();}  }
class C{  public boolean isSetStore(){  return this.store != null;}  }
class C{  public Executor clearProperties(){  properties.clear();  return this;}  }
class C{  protected void fireActionPerformed(ActionEvent event){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ActionListener.class) {      ((ActionListener)listeners[i + 1]).actionPerformed(event);    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  EPG.getInstance().clearPhysicalOverride(EPG.getInstance().getProviderIDForEPGDSName(s),getChannel(stack).getStationID());  return null;}  }
class C{  public Map<String,List<GroupInfo>> groupInfo(){  return groupInfo;}  }
class C{  @Override public void updateBinaryStream(int columnIndex,InputStream x,int length) throws SQLException {  updateBinaryStream(columnIndex,x,(long)length);}  }
class C{  public static long[] transformLongArray(Long[] source){  long[] destin=new long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public XML deleteAttributes(Class<?> aClass,String[] attributes){  checksAttributesExistence(aClass,attributes);  if (isEmpty(findXmlClass(aClass).attributes) || findXmlClass(aClass).attributes.size() <= 1)   Error.xmlWrongMethod(aClass);  for (  String attributeName : attributes) {    XmlAttribute attribute=null;    for (    XmlAttribute xmlAttribute : findXmlClass(aClass).attributes)     if (xmlAttribute.name.equals(attributeName))     attribute=xmlAttribute;    if (attribute == null)     Error.xmlAttributeInexistent(this.xmlPath,attributeName,aClass);    findXmlClass(aClass).attributes.remove(attribute);  }  return this;}  }
class C{  public boolean isMaterialBanned(Material mat){  return materialBanList.contains(mat);}  }
class C{  public void removeLinks(){  srcState.links.clear();}  }
class C{  public CompoundBorder(){  this.outsideBorder=null;  this.insideBorder=null;}  }
class C{  public static boolean restore(){  File restoreConfig=new File(RESTORATION_PROPERTIES);  if (restoreConfig.exists() && restoreConfig.isFile()) {    logger.info("Performing restoration DHuS system...");    try (FileInputStream stream=new FileInputStream(restoreConfig)){      Properties properties=new Properties();      properties.load(stream);      restoreDatabase(properties);      restoreSolrIndex(properties);    } catch (    UnsupportedOperationException e) {      logger.error("Incomplete DHuS restoration file.",e);      System.setProperty("Archive.check","true");    }catch (    Exception e) {      logger.fatal("Restoration failure.",e);      return false;    } finally {      restoreConfig.delete();    }  }  return true;}  }
class C{  public void updateSlider(final double p,final boolean n){  checkWidget();  double percentage=p;  if (step != null) {    percentage=Math.round(percentage / step) * step;  }  this.notify=n;  if (percentage < 0) {    percentage=0;  } else   if (percentage > 1) {    percentage=1;  }  final int usefulWidth=getClientArea().width - thumbWidth;  final int width=(int)Math.round(usefulWidth * percentage);  moveThumbHorizontally(width);  previousPosition=percentage;  this.notify=true;}  }
class C{  public void subscribe(EventSubscriber<?> subscriber){  final Class<?> eventType=getEventType(subscriber);  doSubscribe(subscriber,eventType);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  protected TStructMemberImpl(){  super();}  }
class C{  private void completeScroll(boolean postEvents){  boolean needPopulate=scrollState == SCROLL_STATE_SETTLING;  if (needPopulate) {    scroller.abortAnimation();    int oldX=getScrollX();    int oldY=getScrollY();    int x=scroller.getCurrX();    int y=scroller.getCurrY();    if (oldX != x || oldY != y) {      scrollTo(x,y);      if (x != oldX) {        pageScrolled(x);      }    }  }  populatePending=false;  for (int i=0; i < items.size(); i++) {    ItemInfo ii=items.get(i);    if (ii.scrolling) {      needPopulate=true;      ii.scrolling=false;    }  }  if (needPopulate) {    if (postEvents) {      ViewCompat.postOnAnimation(this,endScrollRunnable);    } else {      endScrollRunnable.run();    }  }}  }
class C{  @Override public String toString(){synchronized (lock) {    return buf.toString();  }}  }
class C{  public void ensureCollection(StructuredType entityType) throws ODataException {  List<String> missingCollectionPropertyName=new ArrayList<>();  entityType.getStructuralProperties().stream().filter(null).forEach(null);  if (missingCollectionPropertyName.size() != 0) {    StringJoiner joiner=new StringJoiner(",");    missingCollectionPropertyName.forEach(null);    throw new ODataUnmarshallingException("The request does not specify the non-nullable collections: '" + joiner.toString() + ".");  }}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.write(getMessage());}  }
class C{  public void download(){  try {    if (this.proxy != null) {      this.proxy.configure();    }    doDownload();  } catch (  Exception e) {    if (this.proxy != null) {      try {        this.proxy.clear();        doDownload();      } catch (      Exception ee) {        throw new ContainerException("Failed to download [" + this.remoteLocation + "]",ee);      }    } else {      throw new ContainerException("Failed to download [" + this.remoteLocation + "]",e);    }  }}  }
class C{  @SuppressWarnings("unchecked") protected void registerDefaultComponentAnnotations(final ContextInitializer initializer){  initializer.scanFor(ViewActionContainer.class,ViewDialog.class,View.class,StageViewport.class,Property.class);}  }
class C{  public EntryStream<K,V> filterKeys(Predicate<? super K> keyPredicate){  return filter(null);}  }
class C{  public X509IdentityToken clone(){  X509IdentityToken result=new X509IdentityToken();  result.PolicyId=PolicyId;  result.CertificateData=CertificateData;  return result;}  }
class C{  private boolean openAttachment(){  int index=cbContent.getSelectedIndex();  byte[] data=m_attachment.getEntryData(index);  if (data == null)   return false;  try {    String fileName=System.getProperty("java.io.tmpdir") + System.getProperty("file.separator") + m_attachment.getEntryName(index);    File tempFile=new File(fileName);    m_attachment.getEntryFile(index,tempFile);    if (Env.isWindows()) {      Process p=Runtime.getRuntime().exec("rundll32 SHELL32.DLL,ShellExec_RunDLL \"" + tempFile + "\"");      return true;    } else     if (Env.isMac()) {      String[] cmdArray=new String[]{"open",tempFile.getAbsolutePath()};      Process p=Runtime.getRuntime().exec(cmdArray);      return true;    } else {      try {        Desktop desktop=null;        if (Desktop.isDesktopSupported()) {          desktop=Desktop.getDesktop();          File file=new File(tempFile.getAbsolutePath());          desktop.open(file);          return true;        }      } catch (      IOException e) {        e.printStackTrace();      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  return false;}  }
class C{  void executeNSDecls(TransformerImpl transformer) throws TransformerException {  executeNSDecls(transformer,null);}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void modifyStorageViewInitiators(VPlexStorageViewInfo storageViewInfo,List<VPlexInitiatorInfo> initiatorInfoList,URI requestURI) throws VPlexApiException {  ClientResponse response=null;  try {    StringBuilder initiatorPathBuilder=new StringBuilder();    for (    VPlexInitiatorInfo initiatorInfo : initiatorInfoList) {      if (initiatorPathBuilder.length() != 0) {        initiatorPathBuilder.append(",");      }      initiatorPathBuilder.append(initiatorInfo.getPath());    }    s_logger.info("Modify storage view initiators request URI is {}",requestURI.toString());    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_I,initiatorPathBuilder.toString());    argsMap.put(VPlexApiConstants.ARG_DASH_V,storageViewInfo.getPath());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,false);    s_logger.info("Storage view add initiator POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Storage view initiator response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Storage view initiator changes completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.modifyViewInitiatorsFailureStatus(storageViewInfo.getName(),String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully updated initiators for storage view {}",storageViewInfo.getName());  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedModifyViewInitiators(storageViewInfo.getName(),e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  public static boolean hasSingleCharacterArg(Closure c){  if (c.getMaximumNumberOfParameters() != 1)   return false;  String typeName=c.getParameterTypes()[0].getName();  return typeName.equals("char") || typeName.equals("java.lang.Character");}  }
class C{  private void writeSubscriptions(File mailboxFolder,Set<String> subscriptions) throws IOException {  List<String> sortedSubscriptions=new ArrayList<String>(subscriptions);  Collections.sort(sortedSubscriptions);  if (!mailboxFolder.exists())   if (!mailboxFolder.mkdirs())   throw new IOException("Could not create folder " + mailboxFolder);  File subscriptionFile=new File(mailboxFolder,FILE_SUBSCRIPTION);  if (!subscriptionFile.exists())   if (!subscriptionFile.createNewFile())   throw new IOException("Could not create file " + subscriptionFile);  FileWriter fileWriter=new FileWriter(subscriptionFile);  PrintWriter writer=new PrintWriter(fileWriter);  for (  String subscription : sortedSubscriptions)   writer.println(subscription);  writer.close();  fileWriter.close();}  }
class C{  public InlineQueryResponse.InlineQueryResponseBuilder switchPMText(String switchPmText){  this.switch_pm_text=switchPmText;  return this;}  }
class C{  public static EditorKit createEditorKitForContentType(String type){  Hashtable<String,EditorKit> kitRegistry=getKitRegisty();  EditorKit k=kitRegistry.get(type);  if (k == null) {    String classname=getKitTypeRegistry().get(type);    ClassLoader loader=getKitLoaderRegistry().get(type);    try {      Class c;      if (loader != null) {        c=loader.loadClass(classname);      } else {        c=Class.forName(classname,true,Thread.currentThread().getContextClassLoader());      }      k=(EditorKit)c.newInstance();      kitRegistry.put(type,k);    } catch (    Throwable e) {      k=null;    }  }  if (k != null) {    return (EditorKit)k.clone();  }  return null;}  }
class C{  public synchronized int search(Object o){  int i=lastIndexOf(o);  if (i >= 0) {    return size() - i;  }  return -1;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DatatypePackage.ENTITY__SUPER_TYPE:    return superType != null;case DatatypePackage.ENTITY__PROPERTIES:  return properties != null && !properties.isEmpty();}return super.eIsSet(featureID);}  }
class C{  boolean expired(long time){  return expiration <= time;}  }
class C{  private void endList(){  List list=(List)getLast(List.class);  if (list != null) {    if (mResult.length() == 0 || mResult.charAt(mResult.length() - 1) != '\n') {      mResult.append('\n');    }    int start=mResult.getSpanStart(list);    int end=mResult.length();    int nrOfIndents=list.mNrOfIndents;    if (!list.mIsIndentation) {      nrOfIndents--;      int margin=Helper.getLeadingMarging();      Object span=list instanceof UL ? new BulletSpan(margin,start == end,false,false) : new NumberSpan(1,margin,start == end,false,false);      mResult.setSpan(span,start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);    }    if (nrOfIndents > 0) {      int margin=nrOfIndents * Helper.getLeadingMarging();      IndentationSpan span=new IndentationSpan(margin,start == end,false,false);      mResult.setSpan(span,start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);    }    mResult.removeSpan(list);  }}  }
class C{  @Override public String toString(){  return canonicalForm;}  }
class C{  public CommentObject(int id){  this.id=id;}  }
class C{  public void dumpLinks(Path webGraphDb) throws IOException {  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  long start=System.currentTimeMillis();  LOG.info("NodeDumper: starting at " + sdf.format(start));  Configuration conf=getConf();  FileSystem fs=FileSystem.get(conf);  Path linkdump=new Path(webGraphDb,DUMP_DIR);  Path nodeDb=new Path(webGraphDb,WebGraph.NODE_DIR);  Path loopSetDb=new Path(webGraphDb,Loops.LOOPS_DIR);  boolean loopsExists=fs.exists(loopSetDb);  Path outlinkDb=new Path(webGraphDb,WebGraph.OUTLINK_DIR);  Path tempInverted=new Path(webGraphDb,"inverted-" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE)));  JobConf inverter=new NutchJob(conf);  inverter.setJobName("LinkDumper: inverter");  FileInputFormat.addInputPath(inverter,nodeDb);  if (loopsExists) {    FileInputFormat.addInputPath(inverter,loopSetDb);  }  FileInputFormat.addInputPath(inverter,outlinkDb);  inverter.setInputFormat(SequenceFileInputFormat.class);  inverter.setMapperClass(Inverter.class);  inverter.setReducerClass(Inverter.class);  inverter.setMapOutputKeyClass(Text.class);  inverter.setMapOutputValueClass(ObjectWritable.class);  inverter.setOutputKeyClass(Text.class);  inverter.setOutputValueClass(LinkNode.class);  FileOutputFormat.setOutputPath(inverter,tempInverted);  inverter.setOutputFormat(SequenceFileOutputFormat.class);  try {    LOG.info("LinkDumper: running inverter");    JobClient.runJob(inverter);    LOG.info("LinkDumper: finished inverter");  } catch (  IOException e) {    LOG.error(StringUtils.stringifyException(e));    throw e;  }  JobConf merger=new NutchJob(conf);  merger.setJobName("LinkDumper: merger");  FileInputFormat.addInputPath(merger,tempInverted);  merger.setInputFormat(SequenceFileInputFormat.class);  merger.setReducerClass(Merger.class);  merger.setMapOutputKeyClass(Text.class);  merger.setMapOutputValueClass(LinkNode.class);  merger.setOutputKeyClass(Text.class);  merger.setOutputValueClass(LinkNodes.class);  FileOutputFormat.setOutputPath(merger,linkdump);  merger.setOutputFormat(MapFileOutputFormat.class);  try {    LOG.info("LinkDumper: running merger");    JobClient.runJob(merger);    LOG.info("LinkDumper: finished merger");  } catch (  IOException e) {    LOG.error(StringUtils.stringifyException(e));    throw e;  }  fs.delete(tempInverted,true);  long end=System.currentTimeMillis();  LOG.info("LinkDumper: finished at " + sdf.format(end) + ", elapsed: "+ TimingUtil.elapsedTime(start,end));}  }
class C{  public boolean logModified(Logger log){  return false;}  }
class C{  public static void calculateAlignedPositions(int allocated,SizeRequirements total,SizeRequirements[] children,int[] offsets,int[] spans){  calculateAlignedPositions(allocated,total,children,offsets,spans,true);}  }
class C{  protected void failAtomicPut(int k){  try {    jcache(0).put(new TestKey(String.valueOf(k)),"");    assert false : "p2p marshalling failed, but error response was not sent";  } catch (  CacheException e) {    assert X.hasCause(e,IOException.class);  }  assert readCnt.get() == 0;}  }
class C{  public void deleteInstances(){  int[] indices;  if (m_TableData.getSelectedRow() == -1) {    return;  }  indices=m_TableData.getSelectedRows();  ((DataSortedTableModel)m_TableData.getModel()).deleteInstances(indices);}  }
class C{  private void writeNSDecls() throws SAXException {  Enumeration prefixes=nsSupport.getDeclaredPrefixes();  while (prefixes.hasMoreElements()) {    String prefix=(String)prefixes.nextElement();    String uri=nsSupport.getURI(prefix);    if (uri == null) {      uri="";    }    char ch[]=uri.toCharArray();    write(' ');    if ("".equals(prefix)) {      write("xmlns=\"");    } else {      write("xmlns:");      write(prefix);      write("=\"");    }    writeEsc(ch,0,ch.length,true);    write('\"');  }}  }
class C{  public StatisticsNotificationEvent(Experiment source,List<EvaluationStatistics> stats){  super(source);  m_Statistics=stats;}  }
class C{  public static String createAlignmentValue(boolean forceSplit,int wrapStyle,int indentStyle){  int alignmentValue=0;switch (wrapStyle) {case WRAP_COMPACT:    alignmentValue|=Alignment.M_COMPACT_SPLIT;  break;case WRAP_COMPACT_FIRST_BREAK:alignmentValue|=Alignment.M_COMPACT_FIRST_BREAK_SPLIT;break;case WRAP_NEXT_PER_LINE:alignmentValue|=Alignment.M_NEXT_PER_LINE_SPLIT;break;case WRAP_NEXT_SHIFTED:alignmentValue|=Alignment.M_NEXT_SHIFTED_SPLIT;break;case WRAP_ONE_PER_LINE:alignmentValue|=Alignment.M_ONE_PER_LINE_SPLIT;break;}if (forceSplit) {alignmentValue|=Alignment.M_FORCE;}switch (indentStyle) {case INDENT_BY_ONE:alignmentValue|=Alignment.M_INDENT_BY_ONE;break;case INDENT_ON_COLUMN:alignmentValue|=Alignment.M_INDENT_ON_COLUMN;}return String.valueOf(alignmentValue);}  }
class C{  public static List<String> splitSmart(String s,char separator){  ArrayList<String> lst=new ArrayList<>(4);  int pos=0, start=0, end=s.length();  char inString=0;  char ch=0;  while (pos < end) {    char prevChar=ch;    ch=s.charAt(pos++);    if (ch == '\\') {      pos++;    } else     if (inString != 0 && ch == inString) {      inString=0;    } else     if (ch == '\'' || ch == '"') {      if (!Character.isLetterOrDigit(prevChar)) {        inString=ch;      }    } else     if (ch == separator && inString == 0) {      lst.add(s.substring(start,pos - 1));      start=pos;    }  }  if (start < end) {    lst.add(s.substring(start,end));  }  return lst;}  }
class C{  private void finishReading(final byte value){  set(value);  state=State.ADDRESS;  cancelWrite();  sendData();}  }
class C{  public boolean isAdjustCOGS(){  Object oo=get_Value(COLUMNNAME_IsAdjustCOGS);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void showDetails(int index){  mCurCheckPosition=index;  if (mDualPane) {    getListView().setItemChecked(index,true);    DetailsFragment details=(DetailsFragment)getFragmentManager().findFragmentById(R.id.details);    if (details == null || details.getShownIndex() != index) {      details=DetailsFragment.newInstance(index);      FragmentTransaction ft=getFragmentManager().beginTransaction();      if (index == 0) {        ft.replace(R.id.details,details);      } else {        ft.replace(R.id.a_item,details);      }      ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);      ft.commit();    }  } else {    Intent intent=new Intent();    intent.setClass(getActivity(),DetailsActivity.class);    intent.putExtra("index",index);    startActivity(intent);  }}  }
class C{  private void bbendHelper(Instruction s,BasicBlock b){  Enumeration<BasicBlock> e=b.getOut();  boolean newHandler=!e.hasMoreElements();  while (!newHandler && e.hasMoreElements()) {    if (!(e.nextElement().isExceptionHandlerEquivalent(b)))     newHandler=true;  }  if (newHandler)   registerUse(s,exceptionState);}  }
class C{  public void startScanFeaturesAt(List seq,int pos){  startScanSFeaturesAt(seq,pos);  startScanEFeatures();}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String encryptionOID,String digestOID,CMSAttributeTableGenerator signedAttrGen,CMSAttributeTableGenerator unsignedAttrGen) throws IllegalArgumentException {  doAddSigner(key,cert,encryptionOID,digestOID,signedAttrGen,unsignedAttrGen,null);}  }
class C{  public void invDctNxM(double[][] dcts,int[][] pixels){  int x=0;  int y=0;  int i=0;  int j=0;  double t=0.0;  double cx0=Math.sqrt(1.0 / this.N);  double cy0=Math.sqrt(1.0 / this.M);  for (x=0; x < this.N; x++) {    for (y=0; y < this.M; y++) {      t=cx0 * cy0 * dcts[0][0];      for (i=1; i < this.N; i++) {        t+=cy0 * dcts[i][0] * this.nxmCosTableX[x][i];      }      for (j=1; j < this.M; j++) {        t+=cx0 * dcts[0][j] * this.nxmCosTableY[y][j];      }      for (i=1; i < this.N; i++) {        for (j=1; j < this.M; j++) {          t+=dcts[i][j] * this.nxmCosTableX[x][i] * this.nxmCosTableY[y][j];        }      }      pixels[x][y]=ImageUtil.pixelRange((int)(t + 128.5));    }  }}  }
class C{  private StringBuffer createColumns(int AD_Table_ID,StringBuffer mandatory){  StringBuffer sb=new StringBuffer();  String sql="SELECT c.ColumnName, c.IsUpdateable, c.IsMandatory," + " c.AD_Reference_ID, c.AD_Reference_Value_ID, DefaultValue, SeqNo, " + " c.FieldLength, c.ValueMin, c.ValueMax, c.VFormat, c.Callout, "+ " c.Name, c.Description, c.ColumnSQL, c.IsEncrypted, c.IsKey, c.IsIdentifier "+ "FROM AD_Column c "+ "WHERE c.AD_Table_ID=?"+ " AND c.ColumnName NOT IN ('AD_Client_ID', 'AD_Org_ID', 'IsActive', 'Created', 'CreatedBy', 'Updated', 'UpdatedBy')"+ " AND c.IsActive='Y'"+ " ORDER BY c.ColumnName";  boolean isKeyNamePairCreated=false;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Table_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      String columnName=rs.getString(1);      boolean isUpdateable="Y".equals(rs.getString(2));      boolean isMandatory="Y".equals(rs.getString(3));      int displayType=rs.getInt(4);      int AD_Reference_Value_ID=rs.getInt(5);      String defaultValue=rs.getString(6);      int seqNo=rs.getInt(7);      int fieldLength=rs.getInt(8);      String ValueMin=rs.getString(9);      String ValueMax=rs.getString(10);      String VFormat=rs.getString(11);      String Callout=rs.getString(12);      String Name=rs.getString(13);      String Description=rs.getString(14);      String ColumnSQL=rs.getString(15);      boolean virtualColumn=ColumnSQL != null && ColumnSQL.length() > 0;      boolean IsEncrypted="Y".equals(rs.getString(16));      boolean IsKey="Y".equals(rs.getString(17));      boolean IsIdentifier="Y".equals(rs.getString(18));      sb.append(createColumnMethods(mandatory,columnName,isUpdateable,isMandatory,displayType,AD_Reference_Value_ID,fieldLength,defaultValue,ValueMin,ValueMax,VFormat,Callout,Name,Description,virtualColumn,IsEncrypted,IsKey,AD_Table_ID));      if (seqNo == 1 && IsIdentifier) {        if (!isKeyNamePairCreated) {          sb.append(createKeyNamePair(columnName,displayType));          isKeyNamePairCreated=true;        } else {          throw new RuntimeException("More than one primary identifier found " + " (AD_Table_ID=" + AD_Table_ID + ", ColumnName="+ columnName+ ")");        }      }    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return sb;}  }
class C{  private void checkNoMoreAtts(Atts atts) throws RDFParseException {  if (atts.size() > 0) {    Iterator<Att> iter=atts.iterator();    while (iter.hasNext()) {      Att att=iter.next();      reportError("unexpected attribute '" + att.getQName() + "'",XMLParserSettings.FAIL_ON_NON_STANDARD_ATTRIBUTES);      iter.remove();    }  }}  }
class C{  private void boundsChanged(){  if (runLaterPending)   return;  runLaterPending=true;  Platform.runLater(null);}  }
class C{  public static String realFormat(final Double x){  return x == null ? "null" : realFormat(x,decimalPlaces(x));}  }
class C{  public boolean nextIdn(){  return nextElement(RDE_IDN_URI,"idnTableRef");}  }
class C{  public Logo(){  width=DEFAULT_WIDTH;  height=DEFAULT_HEIGHT;}  }
class C{  public boolean isValidInet4Address(String ipv4){  return INET_ADDRESS_VALIDATOR.isValidInet4Address(ipv4);}  }
class C{  public CreateStatement put(CharSequence column,Object value){  if (++columnCount > 1) {    columns.append(", ");    values.append(", ");  }  columns.append(column);  append(values,value);  return this;}  }
class C{  public static void toString(Iterator<?> iter,String separator,StringBuilder sb){  while (iter.hasNext()) {    sb.append(iter.next());    if (iter.hasNext()) {      sb.append(separator);    }  }}  }
class C{  public CtClass[] mayThrow(){  return super.mayThrow();}  }
class C{  public static Object castTo(PageContext pc,short type,Object o) throws PageException {  if (type == CFTypes.TYPE_ANY)   return o; else   if (type == CFTypes.TYPE_ARRAY)   return toArray(o); else   if (type == CFTypes.TYPE_BOOLEAN)   return toBoolean(o); else   if (type == CFTypes.TYPE_BINARY)   return toBinary(o); else   if (type == CFTypes.TYPE_DATETIME)   return DateCaster.toDateAdvanced(o,pc.getTimeZone()); else   if (type == CFTypes.TYPE_NUMERIC)   return toDouble(o); else   if (type == CFTypes.TYPE_QUERY)   return toQuery(o); else   if (type == CFTypes.TYPE_QUERY_COLUMN)   return toQueryColumn(o); else   if (type == CFTypes.TYPE_STRING)   return toString(o); else   if (type == CFTypes.TYPE_STRUCT)   return toStruct(o); else   if (type == CFTypes.TYPE_TIMESPAN)   return toTimespan(o); else   if (type == CFTypes.TYPE_UUID)   return toGUId(o); else   if (type == CFTypes.TYPE_UUID)   return toUUId(o); else   if (type == CFTypes.TYPE_VARIABLE_NAME)   return toVariableName(o); else   if (type == CFTypes.TYPE_VOID)   return toVoid(o); else   if (type == CFTypes.TYPE_FUNCTION)   return toFunction(o); else   if (type == CFTypes.TYPE_XML)   return toXML(o); else   if (type == CFTypes.TYPE_IMAGE)   return Image.toImage(pc,o);  if (type == CFTypes.TYPE_UNDEFINED)   throw new ExpressionException("type isn't defined (TYPE_UNDEFINED)");  throw new ExpressionException("invalid type [" + type + "]");}  }
class C{  public CSearchResultsDialog(final Window parent,final CGraphSearchField searchField){  super(parent,"Search Results");  m_searchField=searchField;  setResults(m_searchField.getGraphSearcher().getResults());  setLayout(new BorderLayout());  m_searchField.addListener(m_searchListener);  m_table.setDefaultRenderer(Object.class,new CMonospaceRenderer());  m_table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  add(new JScrollPane(m_table));  final JPanel panel=new JPanel();  panel.add(m_resultsLabel);  add(panel,BorderLayout.SOUTH);  setSize(400,400);}  }
class C{  protected void print(String text,int level){  if (!initialized) {    initialized=true;    try {      InputStream is=Display.getInstance().getResourceAsStream(getClass(),"/cn1-version-numbers");      if (is != null) {        print("Codename One revisions: " + Util.readToString(is),INFO);      }    } catch (    IOException err) {      err.printStackTrace();    }  }  if (this.level > level) {    return;  }  logDirty=true;  text=getThreadAndTimeStamp() + " - " + text;  Util.getImplementation().systemOut(text);  try {synchronized (this) {      Writer w=getWriter();      w.write(text + "\n");      w.flush();    }  } catch (  Throwable err) {    err.printStackTrace();  }}  }
class C{  public synchronized Iterator<Operation> operationsIterator(){  return operations.iterator();}  }
class C{  public static String readFile(File file,String charsetName){  StringBuilder fileContent=new StringBuilder("");  if (file == null || !file.isFile()) {    return fileContent.toString();  }  BufferedReader reader=null;  try {    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);    reader=new BufferedReader(is);    String line=null;    while ((line=reader.readLine()) != null) {      if (!fileContent.toString().equals("")) {        fileContent.append("\r\n");      }      fileContent.append(line);    }    reader.close();  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }  return fileContent.toString();}  }
class C{  @Override public void updateCharacterStream(int columnIndex,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateCharacterStream(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static long encodeDataAsAddress(byte[] v,boolean isSerialized,boolean isCompressed){  if (v.length < MAX_LENGTH_FOR_DATA_AS_ADDRESS) {    long result=0L;    for (int i=0; i < v.length; i++) {      result|=v[i] & 0x00ff;      result<<=8;    }    result|=(v.length << SIZE_SHIFT) | ENCODED_BIT;    if (isSerialized) {      result|=SERIALIZED_BIT;    }    if (isCompressed) {      result|=COMPRESSED_BIT;    }    return result;  } else   if (isSerialized && !isCompressed) {    if (v[0] == DSCODE.LONG) {      if ((v[1] == 0 && (v[2] & 0x80) == 0) || (v[1] == -1 && (v[2] & 0x80) != 0)) {        long result=0L;        for (int i=2; i < v.length; i++) {          result|=v[i] & 0x00ff;          result<<=8;        }        result|=(7 << SIZE_SHIFT) | LONG_BIT | SERIALIZED_BIT| ENCODED_BIT;        return result;      }    }  }  return 0L;}  }
class C{  @Deprecated public Detector create(BugReporter bugReporter){  if (FindBugs.isNoAnalysis()) {    throw new IllegalStateException("No analysis specified");  }  return detectorCreator.createDetector(bugReporter);}  }
class C{  private void createDistributedRegion(List vmList,int startIndexForRegion,int endIndexForRegion,Scope scope,boolean firstCreationFlag,boolean multipleVMFlag){  Iterator nodeIterator=vmList.iterator();  while (nodeIterator.hasNext()) {    VM vm=(VM)nodeIterator.next();    vm.invoke(createMultipleDistributedlRegion(prPrefix,startIndexForRegion,endIndexForRegion,scope,firstCreationFlag,multipleVMFlag));  }}  }
class C{  public boolean isUseCarParameterFromMATSim(){  return useCarParameterFromMATSim;}  }
class C{  public static String toString(Accountable a){  StringBuilder sb=new StringBuilder();  toString(sb,a,0);  return sb.toString();}  }
class C{  public static void awaitQuiet(CyclicBarrier barrier){  boolean interrupted=false;  while (true) {    try {      barrier.await();      break;    } catch (    InterruptedException ignored) {      interrupted=true;    }catch (    BrokenBarrierException ignored) {      break;    }  }  if (interrupted)   Thread.currentThread().interrupt();}  }
class C{  private File locateConfigFile(String resource){  String location=config.getResourceLoader().resourceLocation(resource);  if (location.equals(resource) || location.startsWith("classpath:"))   return null;  return new File(location);}  }
class C{  private void loadComboBox(){  restoreButton.setEnabled(false);  comboBox.removeAllItems();  BackupSet[] sets=backup.getBackupSets();  ComboBoxModel<BackupSet> model=new DefaultComboBoxModel<BackupSet>(sets);  model.setSelectedItem(null);  comboBox.setModel(model);  if (model.getSize() > 0) {    comboBox.setSelectedIndex(model.getSize() - 1);  }}  }
class C{  public static int findNextConsistencyId(Database conn,Table ct) throws Exception {  int id=1;  try {    Statement st;    st=conn.createStatement();    ResultSet rs=st.executeQuery("SELECT MAX(" + ConsistencyTable.idColumnName + ") FROM "+ ct.getSchema()+ "."+ ct.getName());    if (rs.next()) {      id=rs.getInt(1) + 1;    }    rs.close();    st.close();  } catch (  Exception e) {    logger.error("Failed to query last consistency check ID: " + e.getMessage());    throw e;  }  return id;}  }
class C{  public static Bitmap scaleImage(Bitmap org,float scaleWidth,float scaleHeight){  if (org == null) {    return null;  }  Matrix matrix=new Matrix();  matrix.postScale(scaleWidth,scaleHeight);  return Bitmap.createBitmap(org,0,0,org.getWidth(),org.getHeight(),matrix,true);}  }
class C{  public static GWTProjectsRuntime syntheziseContributorRuntime(){  return (GWTProjectsRuntime)GwtSdk.getFactory().newInstance("temp contributor SDK",ResourcesPlugin.getWorkspace().getRoot().getLocation());}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  @Override public String parseOutput(final String stdout,final String stderr){  throwIfError(stderr);  return StringUtils.EMPTY;}  }
class C{  public boolean containOnlyDigitalGoods(int shipGroupIdx){  CartShipInfo shipInfo=getShipInfo(shipGroupIdx);  for (  ShoppingCartItem cartItem : shipInfo.getShipItems()) {    GenericValue product=cartItem.getProduct();    try {      GenericValue productType=product.getRelatedOne("ProductType",true);      if (productType == null || !"N".equals(productType.getString("isPhysical"))) {        return false;      }    } catch (    GenericEntityException e) {      Debug.logError(e,"Error looking up ProductType: " + e.toString(),module);      return false;    }  }  return true;}  }
class C{  @Override public synchronized void handle(HttpExchange client) throws IOException {  HashMap<String,String> params=queryToMap(client.getRequestURI().getQuery());  String query=params.get("q");  String meta=params.get("meta");  BufferedReader reader=new BufferedReader(new StringReader(query));  TranslationRequestStream request=new TranslationRequestStream(reader,joshuaConfiguration);  TranslationResponseStream translationResponseStream=decoder.decodeAll(request);  JSONMessage message=new JSONMessage();  if (meta != null && !meta.isEmpty())   handleMetadata(meta,message);  for (  Translation translation : translationResponseStream) {    LOG.info("TRANSLATION: '{}' with {} k-best items",translation,translation.getStructuredTranslations().size());    message.addTranslation(translation);  }  OutputStream out=new HttpWriter(client);  out.write(message.toString().getBytes());  if (LOG.isDebugEnabled())   LOG.debug(message.toString());  out.close();  reader.close();}  }
class C{  public String encodeForRedirectBinding(final String input) throws UnsupportedEncodingException {  byte[] deflatedInput=deflate(input);  String base64String=new String(Base64.encodeBase64(deflatedInput,false),"UTF-8");  String encodedString=URLEncoder.encode(base64String,"UTF-8");  return encodedString;}  }
class C{  public void showAllFnButtons(){  for (int i=0; i < NUM_FUNCTION_BUTTONS; i++) {    functionButton[i].setDisplay(true);    if (i < 3) {      functionButton[i].setVisible(true);    }  }  alt1Button.setVisible(true);  alt2Button.setVisible(true);  buttonActionCmdPerformed();}  }
class C{  public Crossfader withStructure(View first,int firstWidth,View second,int secondWidth){  withFirst(first,firstWidth);  withSecond(second,secondWidth);  return this;}  }
class C{  public PropertyDialog(Frame owner,PropertyEditor pe,int x,int y){  super(owner,pe.getClass().getName(),ModalityType.DOCUMENT_MODAL);  initialize(pe,x,y);}  }
class C{  private void initialize(){  if (!cacheDir.exists()) {    cacheDir.mkdirs();  }  File[] files=cacheDir.listFiles();  if (files == null) {    return;  }  for (int i=0; i < files.length; i++) {    File file=files[i];    if (file.length() == 0) {      file.delete();    } else {      file=CacheSpan.upgradeIfNeeded(file);      CacheSpan span=CacheSpan.createCacheEntry(file);      if (span == null) {        file.delete();      } else {        addSpan(span);      }    }  }  evictor.onCacheInitialized();}  }
class C{  public long numBits(){  return values.size64() * 2 + edgeOffsetAndSeed.length * (long)Long.SIZE;}  }
class C{  protected AbstractHashedMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getInlineAssociation_();}  }
class C{  protected void resetLayoutManager(){  if (orientation == JSplitPane.HORIZONTAL_SPLIT) {    layoutManager=new BasicHorizontalLayoutManager(0);  } else {    layoutManager=new BasicHorizontalLayoutManager(1);  }  splitPane.setLayout(layoutManager);  layoutManager.updateComponents();  splitPane.revalidate();  splitPane.repaint();}  }
class C{  private void checkSupers(Environment env) throws ClassNotFound {  supersCheckStarted=true;  if (tracing)   env.dtEnter("SourceClass.checkSupers: " + this);  if (isInterface()) {    if (isFinal()) {      Identifier nm=getClassDeclaration().getName();      env.error(getWhere(),"final.intf",nm);    }  } else {    if (getSuperClass(env) != null) {      long where=getWhere();      where=IdentifierToken.getWhere(superClassId,where);      try {        ClassDefinition def=getSuperClass().getClassDefinition(env);        def.resolveTypeStructure(env);        if (!extendsCanAccess(env,getSuperClass())) {          env.error(where,"cant.access.class",getSuperClass());          superClass=null;        } else         if (def.isFinal()) {          env.error(where,"super.is.final",getSuperClass());          superClass=null;        } else         if (def.isInterface()) {          env.error(where,"super.is.intf",getSuperClass());          superClass=null;        } else         if (superClassOf(env,getSuperClass())) {          env.error(where,"cyclic.super");          superClass=null;        } else {          def.noteUsedBy(this,where,env);        }        if (superClass == null) {          def=null;        } else {          ClassDefinition sup=def;          for (; ; ) {            if (enclosingClassOf(sup)) {              env.error(where,"super.is.inner");              superClass=null;              break;            }            ClassDeclaration s=sup.getSuperClass(env);            if (s == null) {              break;            }            sup=s.getClassDefinition(env);          }        }      } catch (      ClassNotFound e) {        reportError: {          try {            env.resolve(e.name);          } catch (          AmbiguousClass ee) {            env.error(where,"ambig.class",ee.name1,ee.name2);            superClass=null;            break reportError;          }catch (          ClassNotFound ee) {          }          env.error(where,"super.not.found",e.name,this);          superClass=null;        }      }    } else {      if (isAnonymous()) {        throw new CompilerError("anonymous super");      } else       if (!getName().equals(idJavaLangObject)) {        throw new CompilerError("unresolved super");      }    }  }  supersChecked=true;  for (int i=0; i < interfaces.length; i++) {    ClassDeclaration intf=interfaces[i];    long where=getWhere();    if (interfaceIds != null && interfaceIds.length == interfaces.length) {      where=IdentifierToken.getWhere(interfaceIds[i],where);    }    try {      ClassDefinition def=intf.getClassDefinition(env);      def.resolveTypeStructure(env);      if (!extendsCanAccess(env,intf)) {        env.error(where,"cant.access.class",intf);      } else       if (!intf.getClassDefinition(env).isInterface()) {        env.error(where,"not.intf",intf);      } else       if (isInterface() && implementedBy(env,intf)) {        env.error(where,"cyclic.intf",intf);      } else {        def.noteUsedBy(this,where,env);        continue;      }    } catch (    ClassNotFound e) {      reportError2: {        try {          env.resolve(e.name);        } catch (        AmbiguousClass ee) {          env.error(where,"ambig.class",ee.name1,ee.name2);          superClass=null;          break reportError2;        }catch (        ClassNotFound ee) {        }        env.error(where,"intf.not.found",e.name,this);        superClass=null;      }    }    ClassDeclaration newInterfaces[]=new ClassDeclaration[interfaces.length - 1];    System.arraycopy(interfaces,0,newInterfaces,0,i);    System.arraycopy(interfaces,i + 1,newInterfaces,i,newInterfaces.length - i);    interfaces=newInterfaces;    --i;  }  if (tracing)   env.dtExit("SourceClass.checkSupers: " + this);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void stateCheck(){  if (toolPanel != null) {    setEnabled(toolPanel.areComponentsVisible());    setText(toolPanel.isVisible() ? hideLabel : displayLabel);  }}  }
class C{  @Override public int splitAttr(){  return splitAttr;}  }
class C{  public static <T>T makeNotificationEmitter(T proxy,Class<T> mbeanInterface){  if (proxy instanceof NotificationEmitter)   return proxy;  if (proxy == null)   return null;  if (!(proxy instanceof Proxy))   throw new IllegalArgumentException("not a " + Proxy.class.getName());  final Proxy p=(Proxy)proxy;  final InvocationHandler handler=Proxy.getInvocationHandler(proxy);  if (!(handler instanceof MBeanServerInvocationHandler))   throw new IllegalArgumentException("not a JMX Proxy");  final MBeanServerInvocationHandler h=(MBeanServerInvocationHandler)handler;  final ObjectName name=h.getObjectName();  final MBeanServerConnection mbs=h.getMBeanServerConnection();  final boolean isMXBean=h.isMXBean();  final T newProxy;  if (isMXBean)   newProxy=JMX.newMXBeanProxy(mbs,name,mbeanInterface,true); else   newProxy=JMX.newMBeanProxy(mbs,name,mbeanInterface,true);  return newProxy;}  }
class C{  private boolean hasTenantUsageAclOnQos(QosSpecification qos){  StorageOSUser user=getUserFromContext();  URI tenantId=URI.create(user.getTenantId());  VirtualPool virtualPool=_dbClient.queryObject(VirtualPool.class,qos.getVirtualPoolId());  return _permissionsHelper.tenantHasUsageACL(tenantId,virtualPool);}  }
class C{  @Override public void clear(){  super.clear();  long[] keys=_set;  float[] vals=_values;  byte[] states=_states;  for (int i=keys.length; i-- > 0; ) {    keys[i]=0;    vals[i]=0;    states[i]=FREE;  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static JobReturn mrDataTransform(MRJobInstruction jobinst,MatrixObject[] inputs,String shuffleInst,String otherInst,byte[] resultIndices,MatrixObject[] outputs,int numReducers,int replication) throws Exception {  String[] insts=shuffleInst.split(Instruction.INSTRUCTION_DELIM);  TransformOperands oprnds=new TransformOperands(insts[0],inputs[0]);  JobConf job=new JobConf(ConfigurationManager.getCachedJobConf());  FileSystem fs=FileSystem.get(job);  String smallestFile=CSVReblockMR.findSmallestFile(job,oprnds.inputPath);  String headerLine=readHeaderLine(fs,oprnds.inputCSVProperties,smallestFile);  HashMap<String,Integer> colNamesToIds=processColumnNames(fs,oprnds.inputCSVProperties,headerLine,smallestFile);  String outHeader=getOutputHeader(fs,headerLine,oprnds);  int numColumns=colNamesToIds.size();  int numColumnsTf=0;  long numRowsTf=0;  ArrayList<Integer> csvoutputs=new ArrayList<Integer>();  ArrayList<Integer> bboutputs=new ArrayList<Integer>();  for (int i=0; i < outputs.length; i++) {    if (outputs[i].getFileFormatProperties() != null && outputs[i].getFileFormatProperties().getFileFormat() == FileFormatProperties.FileFormat.CSV)     csvoutputs.add(i); else     bboutputs.add(i);  }  boolean isCSV=(csvoutputs.size() > 0);  boolean isBB=(bboutputs.size() > 0);  String tmpPath=MRJobConfiguration.constructTempOutputFilename();  checkIfOutputOverlapsWithTxMtd(outputs,oprnds,isCSV,isBB,csvoutputs,bboutputs,fs);  JobReturn retCSV=null, retBB=null;  if (!oprnds.isApply) {    String specWithIDs=processSpecFile(fs,oprnds.inputPath,smallestFile,colNamesToIds,oprnds.inputCSVProperties,oprnds.spec);    colNamesToIds=null;    String partOffsetsFile=MRJobConfiguration.constructTempOutputFilename();    numRowsTf=GenTfMtdMR.runJob(oprnds.inputPath,oprnds.txMtdPath,specWithIDs,smallestFile,partOffsetsFile,oprnds.inputCSVProperties,numColumns,replication,outHeader);    if (numRowsTf == 0)     throw new DMLRuntimeException(ERROR_MSG_ZERO_ROWS);    MapReduceTool.writeStringToHDFS(specWithIDs,oprnds.txMtdPath + "/" + "spec.json");    numColumnsTf=getNumColumnsTf(fs,outHeader,oprnds.inputCSVProperties.getDelim(),oprnds.txMtdPath);    if (isCSV)     retCSV=ApplyTfCSVMR.runJob(oprnds.inputPath,specWithIDs,oprnds.txMtdPath,tmpPath,outputs[csvoutputs.get(0)].getFileName(),partOffsetsFile,oprnds.inputCSVProperties,numColumns,replication,outHeader);    if (isBB) {      DMLConfig conf=ConfigurationManager.getDMLConfig();      int blockSize=conf.getIntValue(DMLConfig.DEFAULT_BLOCK_SIZE);      CSVReblockInstruction rblk=prepDummyReblockInstruction(oprnds.inputCSVProperties,blockSize);      AssignRowIDMRReturn ret1=CSVReblockMR.runAssignRowIDMRJob(new String[]{oprnds.inputPath},new InputInfo[]{InputInfo.CSVInputInfo},new int[]{blockSize},new int[]{blockSize},rblk.toString(),replication,new String[]{smallestFile},true,oprnds.inputCSVProperties.getNAStrings(),specWithIDs);      if (ret1.rlens[0] == 0)       throw new DMLRuntimeException(ERROR_MSG_ZERO_ROWS);      retBB=ApplyTfBBMR.runJob(oprnds.inputPath,insts[1],otherInst,specWithIDs,oprnds.txMtdPath,tmpPath,outputs[bboutputs.get(0)].getFileName(),ret1.counterFile.toString(),oprnds.inputCSVProperties,numRowsTf,numColumns,numColumnsTf,replication,outHeader);    }    MapReduceTool.deleteFileIfExistOnHDFS(new Path(partOffsetsFile),job);  } else {    colNamesToIds=null;    MapReduceTool.deleteFileIfExistOnHDFS(new Path(oprnds.txMtdPath),job);    MapReduceTool.copyFileOnHDFS(oprnds.applyTxPath,oprnds.txMtdPath);    String specWithIDs=(oprnds.spec != null) ? oprnds.spec : MapReduceTool.readStringFromHDFSFile(oprnds.txMtdPath + "/" + "spec.json");    numColumnsTf=getNumColumnsTf(fs,outHeader,oprnds.inputCSVProperties.getDelim(),oprnds.txMtdPath);    if (isCSV) {      DMLConfig conf=ConfigurationManager.getDMLConfig();      int blockSize=conf.getIntValue(DMLConfig.DEFAULT_BLOCK_SIZE);      CSVReblockInstruction rblk=prepDummyReblockInstruction(oprnds.inputCSVProperties,blockSize);      AssignRowIDMRReturn ret1=CSVReblockMR.runAssignRowIDMRJob(new String[]{oprnds.inputPath},new InputInfo[]{InputInfo.CSVInputInfo},new int[]{blockSize},new int[]{blockSize},rblk.toString(),replication,new String[]{smallestFile},true,oprnds.inputCSVProperties.getNAStrings(),specWithIDs);      numRowsTf=ret1.rlens[0];      if (ret1.rlens[0] == 0)       throw new DMLRuntimeException(ERROR_MSG_ZERO_ROWS);      retCSV=ApplyTfCSVMR.runJob(oprnds.inputPath,specWithIDs,oprnds.applyTxPath,tmpPath,outputs[csvoutputs.get(0)].getFileName(),ret1.counterFile.toString(),oprnds.inputCSVProperties,numColumns,replication,outHeader);    }    if (isBB) {      CSVReblockInstruction rblk=(CSVReblockInstruction)InstructionParser.parseSingleInstruction(insts[1]);      CSVReblockInstruction newrblk=(CSVReblockInstruction)rblk.clone((byte)0);      AssignRowIDMRReturn ret1=CSVReblockMR.runAssignRowIDMRJob(new String[]{oprnds.inputPath},new InputInfo[]{InputInfo.CSVInputInfo},new int[]{newrblk.brlen},new int[]{newrblk.bclen},newrblk.toString(),replication,new String[]{smallestFile},true,oprnds.inputCSVProperties.getNAStrings(),specWithIDs);      numRowsTf=ret1.rlens[0];      if (ret1.rlens[0] == 0)       throw new DMLRuntimeException(ERROR_MSG_ZERO_ROWS);      retBB=ApplyTfBBMR.runJob(oprnds.inputPath,insts[1],otherInst,specWithIDs,oprnds.txMtdPath,tmpPath,outputs[bboutputs.get(0)].getFileName(),ret1.counterFile.toString(),oprnds.inputCSVProperties,ret1.rlens[0],ret1.clens[0],numColumnsTf,replication,outHeader);    }  }  moveFilesFromTmp(fs,tmpPath,oprnds.txMtdPath);  if (retCSV != null) {    retCSV.getMatrixCharacteristics(0).setDimension(numRowsTf,numColumnsTf);    CSVFileFormatProperties prop=new CSVFileFormatProperties(false,oprnds.inputCSVProperties.getDelim(),false,Double.NaN,null);    MapReduceTool.writeMetaDataFile(outputs[csvoutputs.get(0)].getFileName() + ".mtd",ValueType.DOUBLE,retCSV.getMatrixCharacteristics(0),OutputInfo.CSVOutputInfo,prop);    return retCSV;  }  if (retBB != null) {    retBB.getMatrixCharacteristics(0).setDimension(numRowsTf,numColumnsTf);    MapReduceTool.writeMetaDataFile(outputs[bboutputs.get(0)].getFileName() + ".mtd",ValueType.DOUBLE,retBB.getMatrixCharacteristics(0),OutputInfo.BinaryBlockOutputInfo);    return retBB;  }  return null;}  }
class C{  public static TelUri parse(String uri){  String scheme="tel:";  if (uri.length() < scheme.length() || !uri.substring(0,scheme.length()).equalsIgnoreCase(scheme)) {    throw Messages.INSTANCE.getIllegalArgumentException(18,scheme);  }  Builder builder=new Builder();  ClearableStringBuilder buffer=new ClearableStringBuilder();  String paramName=null;  for (int i=scheme.length(); i < uri.length(); i++) {    char c=uri.charAt(i);    if (c == '=' && builder.number != null && paramName == null) {      paramName=buffer.getAndClear();      continue;    }    if (c == ';') {      handleEndOfParameter(buffer,paramName,builder);      paramName=null;      continue;    }    buffer.append(c);  }  handleEndOfParameter(buffer,paramName,builder);  return builder.build();}  }
class C{  public StateMachineHandler(Class<?> beanClass,Object target,String methodName,T metaAnnotation,Annotation annotation){  this(beanClass,metaAnnotation,annotation,new MethodInvokingStateMachineRuntimeProcessor<T,S,E>(target,methodName));}  }
class C{  public static ReleaseDetails byId(final String id){  if (DETAILS.containsKey(id)) {    return DETAILS.get(id);  }  return defaultInstance();}  }
class C{  public ServiceStateException(String message){  super(message);}  }
class C{  public void init(boolean forEncryption,CipherParameters param){  core.init(forEncryption,param);  if (param instanceof ParametersWithRandom) {    ParametersWithRandom rParam=(ParametersWithRandom)param;    key=(RSAKeyParameters)rParam.getParameters();    random=rParam.getRandom();  } else {    key=(RSAKeyParameters)param;    random=new SecureRandom();  }}  }
class C{  protected void postorder(TreeNode<E> root){  if (root == null)   return;  postorder(root.left);  postorder(root.right);  System.out.print(root.element + " ");}  }
class C{  public static int numberOfTrailingZeros(long[] v){  for (int p=0; ; p++) {    if (p == v.length) {      return p * Long.SIZE;    }    if (v[p] != 0) {      return Long.numberOfTrailingZeros(v[p]) + p * Long.SIZE;    }  }}  }
class C{  private void stopHarvestTiming(Collection<LocalCandidate> harvest){  harvester.getHarvestStatistics().stopHarvestTiming(harvest);}  }
class C{  protected void fireValueChanged(boolean isAdjusting){  fireValueChanged(getMinSelectionIndex(),getMaxSelectionIndex(),isAdjusting);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @SuppressWarnings("unchecked") public Frame<V>[] analyze(final String owner,final MethodNode m) throws AnalyzerException {  if ((m.access & (ACC_ABSTRACT | ACC_NATIVE)) != 0) {    frames=(Frame<V>[])new Frame<?>[0];    return frames;  }  n=m.instructions.size();  insns=m.instructions;  handlers=(List<TryCatchBlockNode>[])new List<?>[n];  frames=(Frame<V>[])new Frame<?>[n];  subroutines=new Subroutine[n];  queued=new boolean[n];  queue=new int[n];  top=0;  for (int i=0; i < m.tryCatchBlocks.size(); ++i) {    TryCatchBlockNode tcb=m.tryCatchBlocks.get(i);    int begin=insns.indexOf(tcb.start);    int end=insns.indexOf(tcb.end);    for (int j=begin; j < end; ++j) {      List<TryCatchBlockNode> insnHandlers=handlers[j];      if (insnHandlers == null) {        insnHandlers=new ArrayList<TryCatchBlockNode>();        handlers[j]=insnHandlers;      }      insnHandlers.add(tcb);    }  }  Subroutine main=new Subroutine(null,m.maxLocals,null);  List<AbstractInsnNode> subroutineCalls=new ArrayList<AbstractInsnNode>();  Map<LabelNode,Subroutine> subroutineHeads=new HashMap<LabelNode,Subroutine>();  findSubroutine(0,main,subroutineCalls);  while (!subroutineCalls.isEmpty()) {    JumpInsnNode jsr=(JumpInsnNode)subroutineCalls.remove(0);    Subroutine sub=subroutineHeads.get(jsr.label);    if (sub == null) {      sub=new Subroutine(jsr.label,m.maxLocals,jsr);      subroutineHeads.put(jsr.label,sub);      findSubroutine(insns.indexOf(jsr.label),sub,subroutineCalls);    } else {      sub.callers.add(jsr);    }  }  for (int i=0; i < n; ++i) {    if (subroutines[i] != null && subroutines[i].start == null) {      subroutines[i]=null;    }  }  Frame<V> current=newFrame(m.maxLocals,m.maxStack);  Frame<V> handler=newFrame(m.maxLocals,m.maxStack);  current.setReturn(interpreter.newValue(Type.getReturnType(m.desc)));  Type[] args=Type.getArgumentTypes(m.desc);  int local=0;  if ((m.access & ACC_STATIC) == 0) {    Type ctype=Type.getObjectType(owner);    current.setLocal(local++,interpreter.newValue(ctype));  }  for (int i=0; i < args.length; ++i) {    current.setLocal(local++,interpreter.newValue(args[i]));    if (args[i].getSize() == 2) {      current.setLocal(local++,interpreter.newValue(null));    }  }  while (local < m.maxLocals) {    current.setLocal(local++,interpreter.newValue(null));  }  merge(0,current,null);  init(owner,m);  while (top > 0) {    int insn=queue[--top];    Frame<V> f=frames[insn];    Subroutine subroutine=subroutines[insn];    queued[insn]=false;    AbstractInsnNode insnNode=null;    try {      insnNode=m.instructions.get(insn);      int insnOpcode=insnNode.getOpcode();      int insnType=insnNode.getType();      if (insnType == AbstractInsnNode.LABEL || insnType == AbstractInsnNode.LINE || insnType == AbstractInsnNode.FRAME) {        merge(insn + 1,f,subroutine);        newControlFlowEdge(insn,insn + 1);      } else {        current.init(f).execute(insnNode,interpreter);        subroutine=subroutine == null ? null : subroutine.copy();        if (insnNode instanceof JumpInsnNode) {          JumpInsnNode j=(JumpInsnNode)insnNode;          if (insnOpcode != GOTO && insnOpcode != JSR) {            merge(insn + 1,current,subroutine);            newControlFlowEdge(insn,insn + 1);          }          int jump=insns.indexOf(j.label);          if (insnOpcode == JSR) {            merge(jump,current,new Subroutine(j.label,m.maxLocals,j));          } else {            merge(jump,current,subroutine);          }          newControlFlowEdge(insn,jump);        } else         if (insnNode instanceof LookupSwitchInsnNode) {          LookupSwitchInsnNode lsi=(LookupSwitchInsnNode)insnNode;          int jump=insns.indexOf(lsi.dflt);          merge(jump,current,subroutine);          newControlFlowEdge(insn,jump);          for (int j=0; j < lsi.labels.size(); ++j) {            LabelNode label=lsi.labels.get(j);            jump=insns.indexOf(label);            merge(jump,current,subroutine);            newControlFlowEdge(insn,jump);          }        } else         if (insnNode instanceof TableSwitchInsnNode) {          TableSwitchInsnNode tsi=(TableSwitchInsnNode)insnNode;          int jump=insns.indexOf(tsi.dflt);          merge(jump,current,subroutine);          newControlFlowEdge(insn,jump);          for (int j=0; j < tsi.labels.size(); ++j) {            LabelNode label=tsi.labels.get(j);            jump=insns.indexOf(label);            merge(jump,current,subroutine);            newControlFlowEdge(insn,jump);          }        } else         if (insnOpcode == RET) {          if (subroutine == null) {            throw new AnalyzerException(insnNode,"RET instruction outside of a sub routine");          }          for (int i=0; i < subroutine.callers.size(); ++i) {            JumpInsnNode caller=subroutine.callers.get(i);            int call=insns.indexOf(caller);            if (frames[call] != null) {              merge(call + 1,frames[call],current,subroutines[call],subroutine.access);              newControlFlowEdge(insn,call + 1);            }          }        } else         if (insnOpcode != ATHROW && (insnOpcode < IRETURN || insnOpcode > RETURN)) {          if (subroutine != null) {            if (insnNode instanceof VarInsnNode) {              int var=((VarInsnNode)insnNode).var;              subroutine.access[var]=true;              if (insnOpcode == LLOAD || insnOpcode == DLOAD || insnOpcode == LSTORE || insnOpcode == DSTORE) {                subroutine.access[var + 1]=true;              }            } else             if (insnNode instanceof IincInsnNode) {              int var=((IincInsnNode)insnNode).var;              subroutine.access[var]=true;            }          }          merge(insn + 1,current,subroutine);          newControlFlowEdge(insn,insn + 1);        }      }      List<TryCatchBlockNode> insnHandlers=handlers[insn];      if (insnHandlers != null) {        for (int i=0; i < insnHandlers.size(); ++i) {          TryCatchBlockNode tcb=insnHandlers.get(i);          Type type;          if (tcb.type == null) {            type=Type.getObjectType("java/lang/Throwable");          } else {            type=Type.getObjectType(tcb.type);          }          int jump=insns.indexOf(tcb.handler);          if (newControlFlowExceptionEdge(insn,tcb)) {            handler.init(f);            handler.clearStack();            handler.push(interpreter.newValue(type));            merge(jump,handler,subroutine);          }        }      }    } catch (    AnalyzerException e) {      throw new AnalyzerException(e.node,"Error at instruction " + insn + ": "+ e.getMessage(),e);    }catch (    Exception e) {      throw new AnalyzerException(insnNode,"Error at instruction " + insn + ": "+ e.getMessage(),e);    }  }  return frames;}  }
class C{  public String lookupPrefix(String namespaceURI){  if (namespaceURI == null) {    return null;  }  short type=this.getNodeType();switch (type) {case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:    return null;case Node.ATTRIBUTE_NODE:{    if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {      return getOwnerElement().lookupPrefix(namespaceURI);    }    return null;  }default :{  return null;}}}  }
class C{  public String buildRevision(final String previousRevision){  HashMap<String,String> bufferMap=new HashMap<String,String>();  StringBuilder output=new StringBuilder();  if (previousRevision != null) {    output.append(previousRevision);  }  int size=parts.size();  DiffPart part;  for (int i=0; i < size; i++) {    part=parts.get(i);switch (part.getAction()) {case FULL_REVISION_UNCOMPRESSED:      output=new StringBuilder();    output.insert(0,part.getText());  break;case INSERT:output.insert(part.getStart(),part.getText());break;case DELETE:output.delete(part.getStart(),part.getEnd());break;case REPLACE:output.replace(part.getStart(),part.getEnd(),part.getText());break;case CUT:bufferMap.put(part.getText(),output.substring(part.getStart(),part.getEnd()));output.delete(part.getStart(),part.getEnd());break;case PASTE:output.insert(part.getStart(),bufferMap.remove(part.getText()));break;default :throw new RuntimeException("UNKNOWN PART ACTION");}}return output.toString();}  }
class C{  private static int compare(int fromIndex,CharSequence left,CharSequence right){  if (left == null)   return -1;  if (right == null)   return 1;  for (int i=fromIndex, n=MathLib.min(left.length(),right.length()); i < n; i++) {    char c1=left.charAt(i);    char c2=right.charAt(i);    if (c1 != c2)     return c1 - c2;  }  return left.length() - right.length();}  }
class C{  public CacheHandler(String[] thisURLs,CLogger tLog){  log=tLog;  cacheURLs=thisURLs;}  }
class C{  public OutgoingMessageEnvelope(SystemStream systemStream,Object partitionKey,Object key,Object message){  this(systemStream,null,null,partitionKey,key,message);}  }
class C{  public boolean isPrefixed(){  return name.indexOf(':') >= 0;}  }
class C{  private static double logBKM(double arg){  double ae[]={1.0000000000000000000000000000000000000000000000000000000000000000000000000000,0.5849625007211561814537389439478165087598144076924810604557526545410982276485,0.3219280948873623478703194294893901758648313930245806120547563958159347765589,0.1699250014423123629074778878956330175196288153849621209115053090821964552970,0.0874628412503394082540660108104043540112672823448206881266090643866965081686,0.0443941193584534376531019906736094674630459333742491317685543002674288465967,0.0223678130284545082671320837460849094932677948156179815932199216587899627785,0.0112272554232541203378805844158839407281095943600297940811823651462712311786,0.0056245491938781069198591026740666017211096815383520359072957784732489771013,0.0028150156070540381547362547502839489729507927389771959487826944878598909400,0.0014081943928083889066101665016890524233311715793462235597709051792834906001,0.0007042690112466432585379340422201964456668872087249334581924550139514213168,0.0003521774803010272377989609925281744988670304302127133979341729842842377649,0.0001760994864425060348637509459678580940163670081839283659942864068257522373,0.0000880524301221769086378699983597183301490534085738474534831071719854721939,0.0000440268868273167176441087067175806394819146645511899503059774914593663365,0.0000220136113603404964890728830697555571275493801909791504158295359319433723,0.0000110068476674814423006223021573490183469930819844945565597452748333526464,0.0000055034343306486037230640321058826431606183125807276574241540303833251704,0.0000027517197895612831123023958331509538486493412831626219340570294203116559,0.0000013758605508411382010566802834037147561973553922354232704569052932922954,0.0000006879304394358496786728937442939160483304056131990916985043387874690617,0.0000003439652607217645360118314743718005315334062644619363447395987584138324,0.0000001719826406118446361936972479533123619972434705828085978955697643547921,0.0000000859913228686632156462565208266682841603921494181830811515318381744650,0.0000000429956620750168703982940244684787907148132725669106053076409624949917,0.0000000214978311976797556164155504126645192380395989504741781512309853438587,0.0000000107489156388827085092095702361647949603617203979413516082280717515504,0.0000000053744578294520620044408178949217773318785601260677517784797554422804,0.0000000026872289172287079490026152352638891824761667284401180026908031182361,0.0000000013436144592400232123622589569799954658536700992739887706412976115422,0.0000000006718072297764289157920422846078078155859484240808550018085324187007,0.0000000003359036149273187853169587152657145221968468364663464125722491530858,0.0000000001679518074734354745159899223037458278711244127245990591908996412262,0.0000000000839759037391617577226571237484864917411614198675604731728132152582,0.0000000000419879518701918839775296677020135040214077417929807824842667285938,0.0000000000209939759352486932678195559552767641474249812845414125580747434389,0.0000000000104969879676625344536740142096218372850561859495065136990936290929,0.0000000000052484939838408141817781356260462777942148580518406975851213868092,0.0000000000026242469919227938296243586262369156865545638305682553644113887909,0.0000000000013121234959619935994960031017850191710121890821178731821983105443,0.0000000000006560617479811459709189576337295395590603644549624717910616347038,0.0000000000003280308739906102782522178545328259781415615142931952662153623493,0.0000000000001640154369953144623242936888032768768777422997704541618141646683,0.0000000000000820077184976595619616930350508356401599552034612281802599177300,0.0000000000000410038592488303636807330652208397742314215159774270270147020117,0.0000000000000205019296244153275153381695384157073687186580546938331088730952,0.0000000000000102509648122077001764119940017243502120046885379813510430378661,0.0000000000000051254824061038591928917243090559919209628584150482483994782302,0.0000000000000025627412030519318726172939815845367496027046030028595094737777,0.0000000000000012813706015259665053515049475574143952543145124550608158430592,0.0000000000000006406853007629833949364669629701200556369782295210193569318434,0.0000000000000003203426503814917330334121037829290364330169106716787999052925,0.0000000000000001601713251907458754080007074659337446341494733882570243497196,0.0000000000000000800856625953729399268240176265844257044861248416330071223615,0.0000000000000000400428312976864705191179247866966320469710511619971334577509,0.0000000000000000200214156488432353984854413866994246781519154793320684126179,0.0000000000000000100107078244216177339743404416874899847406043033792202127070,0.0000000000000000050053539122108088756700751579281894640362199287591340285355,0.0000000000000000025026769561054044400057638132352058574658089256646014899499,0.0000000000000000012513384780527022205455634651853807110362316427807660551208,0.0000000000000000006256692390263511104084521222346348012116229213309001913762,0.0000000000000000003128346195131755552381436585278035120438976487697544916191,0.0000000000000000001564173097565877776275512286165232838833090480508502328437,0.0000000000000000000782086548782938888158954641464170239072244145219054734086,0.0000000000000000000391043274391469444084776945327473574450334092075712154016,0.0000000000000000000195521637195734722043713378812583900953755962557525252782,0.0000000000000000000097760818597867361022187915943503728909029699365320287407,0.0000000000000000000048880409298933680511176764606054809062553340323879609794,0.0000000000000000000024440204649466840255609083961603140683286362962192177597,0.0000000000000000000012220102324733420127809717395445504379645613448652614939,0.0000000000000000000006110051162366710063906152551383735699323415812152114058,0.0000000000000000000003055025581183355031953399739107113727036860315024588989,0.0000000000000000000001527512790591677515976780735407368332862218276873443537,0.0000000000000000000000763756395295838757988410584167137033767056170417508383,0.0000000000000000000000381878197647919378994210346199431733717514843471513618,0.0000000000000000000000190939098823959689497106436628681671067254111334889005,0.0000000000000000000000095469549411979844748553534196582286585751228071408728,0.0000000000000000000000047734774705989922374276846068851506055906657137209047,0.0000000000000000000000023867387352994961187138442777065843718711089344045782,0.0000000000000000000000011933693676497480593569226324192944532044984865894525,0.0000000000000000000000005966846838248740296784614396011477934194852481410926,0.0000000000000000000000002983423419124370148392307506484490384140516252814304,0.0000000000000000000000001491711709562185074196153830361933046331030629430117,0.0000000000000000000000000745855854781092537098076934460888486730708440475045,0.0000000000000000000000000372927927390546268549038472050424734256652501673274,0.0000000000000000000000000186463963695273134274519237230207489851150821191330,0.0000000000000000000000000093231981847636567137259618916352525606281553180093,0.0000000000000000000000000046615990923818283568629809533488457973317312233323,0.0000000000000000000000000023307995461909141784314904785572277779202790023236,0.0000000000000000000000000011653997730954570892157452397493151087737428485431,0.0000000000000000000000000005826998865477285446078726199923328593402722606924,0.0000000000000000000000000002913499432738642723039363100255852559084863397344,0.0000000000000000000000000001456749716369321361519681550201473345138307215067,0.0000000000000000000000000000728374858184660680759840775119123438968122488047,0.0000000000000000000000000000364187429092330340379920387564158411083803465567,0.0000000000000000000000000000182093714546165170189960193783228378441837282509,0.0000000000000000000000000000091046857273082585094980096891901482445902524441,0.0000000000000000000000000000045523428636541292547490048446022564529197237262,0.0000000000000000000000000000022761714318270646273745024223029238091160103901};  int n=53;  double x=1;  double y=0;  double z;  double s=1;  int k;  for (k=0; k < n; k++) {    z=x + x * s;    if (z <= arg) {      x=z;      y+=ae[k];    }    s*=0.5;  }  return y;}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public static byte[] fastFingerprintRaw(final File file,final boolean includeDate) throws IOException {  final int mb=16 * 1024;  final long fl=file.length();  if (fl <= 2 * mb)   return encodeMD5Raw(file);  MessageDigest digest;  try {    digest=MessageDigest.getInstance("MD5");  } catch (  final NoSuchAlgorithmException e) {    Log.getLog().warn(e);    return null;  }  final RandomAccessFile raf=new RandomAccessFile(file,"r");  final byte[] a=new byte[mb];  try {    raf.seek(0);    raf.readFully(a,0,mb);    digest.update(a,0,mb);    raf.seek(fl - mb);    raf.readFully(a,0,mb);    digest.update(a,0,mb);    digest.update(longToBytes(fl),0,8);    if (includeDate)     digest.update(longToBytes(file.lastModified()),0,8);  }  finally {    raf.close();    try {      raf.getChannel().close();    } catch (    final IOException e) {    }  }  return digest.digest();}  }
class C{  public ImageLoader attachToCubeFragment(CubeFragment fragment){  if (fragment != null) {    if (LifeCycleComponentManager.tryAddComponentToContainer(this,fragment,true)) {      mHasBeenAddedToComponentManager=true;    }  }  return this;}  }
class C{  public Builder stereoReset(boolean stereoReset){  if (stereoReset) {    mFlags|=FLAG_STEREO_RESET;  } else {    mFlags&=~FLAG_STEREO_RESET;  }  return this;}  }
class C{  public void updateAppWidgetOptions(Bundle options){  AppWidgetManager.getInstance(mContext).updateAppWidgetOptions(mAppWidgetId,options);}  }
class C{  public Timestamp(Date timestamp,CertPath signerCertPath){  if (timestamp == null || signerCertPath == null) {    throw new NullPointerException();  }  this.timestamp=new Date(timestamp.getTime());  this.signerCertPath=signerCertPath;}  }
class C{  private String createLengthMinutesXml(double lengthMinutes){  return "<length_minutes>" + Double.toString(lengthMinutes) + "</length_minutes>";}  }
class C{  private boolean isAnyParentNodeSelected(final Node n){  final Graph2D graph=(Graph2D)n.getGraph();  final HierarchyManager hierarchy=graph.getHierarchyManager();  if (hierarchy == null) {    return false;  }  boolean result=false;  Node parent=hierarchy.getParentNode(n);  while (parent != null) {    if (graph.isSelected(parent)) {      result=true;      break;    }    parent=hierarchy.getParentNode(parent);  }  return result;}  }
class C{  public void testCompletion1char(){  assertTrue(sh.isDefaultSuggestion("peopl","people"));  assertTrue(sh.isDefaultSuggestion("abou","about"));  assertTrue(sh.isDefaultSuggestion("thei","their"));}  }
class C{  public void addFront(Object theEvent){  DualWorkQueue queue=threadQueue.get();  queue.getFrontQueue().addLast(theEvent);}  }
class C{  IPackageBinding resolvePackage(PackageDeclaration pkg){  return null;}  }
class C{  public void deleteNode(Node node){  add("delete fixed node",null);}  }
class C{  public String explain(){  if (isBranch()) {    if (BranchPool.getInstance(classLoader).isKnownAsBranch(this)) {      Branch b=BranchPool.getInstance(classLoader).getBranchForInstruction(this);      if (b == null)       throw new IllegalStateException("expect BranchPool to be able to return Branches for instructions fullfilling BranchPool.isKnownAsBranch()");      return "Branch " + b.getActualBranchId() + " - "+ getInstructionType();    }    return "UNKNOWN Branch I" + instructionId + " "+ getInstructionType()+ ", jump to "+ ((JumpInsnNode)asmNode).label.getLabel();  }  return getASMNodeString();}  }
class C{  @Override public void stateUpdated(){  inner.stateUpdated();}  }
class C{  public void readMapEnd() throws IOException {  expectTag(TAG_MAP_END);}  }
class C{  protected void paintTopTabBorder(int tabIndex,Graphics g,int x,int y,int w,int h,int btm,int rght,boolean isSelected){  int currentRun=getRunForTab(tabPane.getTabCount(),tabIndex);  int lastIndex=lastTabInRun(tabPane.getTabCount(),currentRun);  int firstIndex=tabRuns[currentRun];  boolean leftToRight=CompiereUtils.isLeftToRight(tabPane);  int bottom=h - 1;  int right=w - 1;  if (shouldFillGap(currentRun,tabIndex,x,y)) {    g.translate(x,y);    if (leftToRight) {      g.setColor(getColorForGap(currentRun,x,y + 1));      g.fillRect(1,0,5,3);      g.fillRect(1,3,2,2);    } else {      g.setColor(getColorForGap(currentRun,x + w - 1,y + 1));      g.fillRect(right - 5,0,5,3);      g.fillRect(right - 2,3,2,2);    }    g.translate(-x,-y);  }  g.translate(x,y);  g.setColor(darkShadow);  if (leftToRight) {    g.drawLine(1,5,6,0);    g.drawLine(6,0,right,0);    if (tabIndex == lastIndex)     g.drawLine(right,1,right,bottom);    if (tabIndex != tabRuns[runCount - 1])     g.drawLine(0,0,0,bottom); else     g.drawLine(0,6,0,bottom);  } else {    g.drawLine(right - 1,5,right - 6,0);    g.drawLine(right - 6,0,0,0);    if (tabIndex != tabRuns[runCount - 1])     g.drawLine(right,0,right,bottom); else     g.drawLine(right,6,right,bottom);    if (tabIndex == lastIndex)     g.drawLine(0,1,0,bottom);  }  if (!isSelected)   g.drawLine(0,bottom,right,bottom);  g.setColor(isSelected ? selectHighlight : highlight);  if (leftToRight) {    g.drawLine(1,6,6,1);    if (tabIndex == lastIndex)     g.drawLine(6,1,right - 1,1); else     g.drawLine(6,1,right,1);    g.drawLine(1,6,1,bottom);    if (tabIndex == firstIndex && tabIndex != tabRuns[runCount - 1]) {      if (tabPane.getSelectedIndex() == tabRuns[currentRun + 1]) {        g.setColor(selectHighlight);      } else {        g.setColor(highlight);      }      g.drawLine(1,0,1,4);    }  } else {    g.drawLine(right - 1,6,right - 6,1);    g.drawLine(right - 6,1,1,1);    if (tabIndex == lastIndex)     g.drawLine(1,1,1,bottom); else     g.drawLine(0,1,0,bottom);  }  g.translate(-x,-y);}  }
class C{  public void add(LogLevelHourStatistics statistics){  Integer hour=statistics.getHour();  add(Level.TRACE.name(),hour,statistics.getLevel_TRACE());  add(Level.DEBUG.name(),hour,statistics.getLevel_DEBUG());  add(Level.INFO.name(),hour,statistics.getLevel_INFO());  add(Level.WARN.name(),hour,statistics.getLevel_WARN());  add(Level.ERROR.name(),hour,statistics.getLevel_ERROR());  add(Level.FATAL.name(),hour,statistics.getLevel_FATAL());}  }
class C{  public static CarbonMessage createTextResponse(int status,String msg){  DefaultCarbonMessage response=new DefaultCarbonMessage();  response.setProperty(Constants.HTTP_STATUS_CODE,status);  if (msg != null) {    response.setHeader(HttpHeaders.CONTENT_LENGTH,String.valueOf(msg.length()));    response.setStringMessageBody(msg);  } else {    response.setHeader(HttpHeaders.CONTENT_LENGTH,"0");  }  return response;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_OWNED_MEMBERS:    return getOwnedMembers();case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_OWNED_CTOR:  return getOwnedCtor();case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_OWNED_CALLABLE_CTOR:return getOwnedCallableCtor();case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_OWNED_METHODS:return getOwnedMethods();case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_OWNED_FIELDS:return getOwnedFields();case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_OWNED_GETTERS:return getOwnedGetters();case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_OWNED_SETTERS:return getOwnedSetters();case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_SUPER_CLASSIFIER_REFS:return getSuperClassifierRefs();case N4JSPackage.N4_CLASSIFIER_DEFINITION___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS:return getImplementedOrExtendedInterfaceRefs();}return super.eInvoke(operationID,arguments);}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  return new DeprecatedAttribute(newCp);}  }
class C{  @Override public Object execute(ExecutionEvent event) throws ExecutionException {  if (!HandlerUtil.matchesRadioState(event)) {    IWorkbenchPart part=HandlerUtil.getActivePart(event);    if (part instanceof SecuritySpecOutlineViewPart) {      SecuritySpecOutlineViewPart droidsafeView=(SecuritySpecOutlineViewPart)part;      String currentState=event.getParameter(RadioState.PARAMETER_ID);      droidsafeView.setLabelTypeForMethodName(currentState);      HandlerUtil.updateRadioState(event.getCommand(),currentState);    }  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:37.784 -0500",hash_original_method="7E5B8A1FC3A005C68D4CF79F1DDB3E59",hash_generated_method="046A9E375E57315795A579CE2B0A01B3") public static final int monthLength(int year,int month){  return MONTH_LENGTH[month + (isLeapYear(year) ? 12 : 0)];}  }
class C{  protected void addParameterPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_FeatureParameterValue_parameter_feature"),getString("_UI_PropertyDescriptor_description","_UI_FeatureParameterValue_parameter_feature","_UI_FeatureParameterValue_type"),SGenPackage.Literals.FEATURE_PARAMETER_VALUE__PARAMETER,true,false,true,null,null,null));}  }
class C{  public void refreshBitmapShader(){  shader=new BitmapShader(Bitmap.createScaledBitmap(image,canvasSize,canvasSize,false),Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);}  }
class C{  public void add(RRset rrset){  for (Iterator it=rrset.rrs(); it.hasNext(); )   add((Record)it.next());}  }
class C{  public synchronized String convert(final Throwable throwable){  throwable.printStackTrace(this.writer);  this.writer.flush();  String stackTrace=this.ostream.toString();  this.ostream.reset();  return stackTrace;}  }
class C{  public long prepareLong(Offset offset){  return loadLong(offset);}  }
class C{  public void inject(Object object){  objectGraph.inject(object);}  }
class C{  public Label(){}  }
class C{  protected void positiveClose(){  freeContent();}  }
class C{  public static Fixture parseFrom(String fileName,Parser parser){  if (fileName == null) {    throw new NullPointerException("File name should not be null");  }  String path="fixtures/" + fileName + ".yaml";  InputStream inputStream=openPathAsStream(path);  Fixture result=parser.parse(inputStream);  if (result.body != null && !result.body.startsWith("{")) {    String bodyPath="fixtures/" + result.body;    try {      result.body=readPathIntoString(bodyPath);    } catch (    IOException e) {      throw new IllegalStateException("Error reading body: " + bodyPath,e);    }  }  return result;}  }
class C{  private void dispatchUnpress(){  for (int i=getChildCount() - 1; i >= 0; i--) {    getChildAt(i).setPressed(false);  }  setPressed(false);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public static void assertNoException(Runnable expression){  if (verbose) {    log("assertNoException(" + expression + ")");  }  try {    expression.run();  } catch (  RuntimeException failure) {    TestUtils.fail();  }}  }
class C{  public void appendFrame(int offsetDelta,int[] tags,int[] data){  numOfEntries++;  int k=tags.length;  output.write(k + 251);  write16(offsetDelta);  for (int i=0; i < k; i++)   writeTypeInfo(tags[i],data[i]);}  }
class C{  public void finishBackup(BackupManager backupManager) throws IOException {  if (diskStoreBackup == null) {    return;  }  try {    waitForDelayedWrites();    for (    Oplog oplog : this.diskStoreBackup.getPendingBackup()) {      if (backupManager.isCancelled()) {        break;      }      int index=oplog.getDirectoryHolder().getArrayIndex();      File backupDir=getBackupDir(this.diskStoreBackup.getTargetDir(),index);      oplog.copyTo(backupDir);      this.diskStoreBackup.backupFinished(oplog);    }  }  finally {    clearBackup();  }}  }
class C{  public KMLStyleMap(String namespaceURI){  super(namespaceURI);}  }
class C{  public PlayerHasStorableEntityCondition(final StorableEntityList<?> storeableEntityList){  this.storeableEntityList=storeableEntityList;}  }
class C{  private boolean skipNextTRY(){  Assert.isTrue(fToken == Symbols.TokenCATCH || fToken == Symbols.TokenFINALLY);  while (true) {    nextToken();switch (fToken) {case Symbols.TokenRPAREN:case Symbols.TokenRBRACKET:case Symbols.TokenRBRACE:case Symbols.TokenGREATERTHAN:      skipScope();    break;case Symbols.TokenTRY:  return true;case Symbols.TokenLPAREN:case Symbols.TokenLBRACE:case Symbols.TokenLBRACKET:case Symbols.TokenEOF:return false;}}}  }
class C{  public static String vocabString(){  StringWriter sw=new StringWriter(Vocabulary.systemSize() * 10);  try {    systemIndex.saveToWriter(sw);    return sw.toString();  } catch (  IOException e) {    logger.error("Unable to write system vocabulary.");  }  return "";}  }
class C{  public void add(SARAnnotation annotation){  if (annotation != null) {    annotationLayer.addAnnotation(annotation);    if (annotation.getOwner() != null)     annotation.getOwner().markDirty();  }}  }
class C{  void stopTimer(){  timer.stop();}  }
class C{  public ScoreKeeperUserDataItem loadItem(final ScoreKeeperUserDataItem tableItem){  DynamoDBMapper mapper=createDynamoDBMapper();  ScoreKeeperUserDataItem item=mapper.load(tableItem);  return item;}  }
class C{  public void testSyncProgress_ignoredWhenDataModelAvailable(){  mController.init();  LocationTree locationTree=FakeAppLocationTreeFactory.build();  mFakeEventBus.post(new AppLocationTreeFetchedEvent(locationTree));  mFakeEventBus.post(new SyncProgressEvent(10,"Foo synced"));  verify(mMockFragmentUi,times(0)).showIncrementalSyncProgress(10,"Foo synced");}  }
class C{  public boolean isIsomorphic(String s,String t){  if (s == null || t == null)   return false;  int[] m=new int[512];  int len=s.length();  for (int i=0; i < len; i++) {    if (m[s.charAt(i)] != m[t.charAt(i) + 256])     return false;    m[s.charAt(i)]=m[t.charAt(i) + 256]=i + 1;  }  return true;}  }
class C{  public FrameworkException(String message){  super(message);}  }
class C{  public void enqueueNormal(String methodName,int count){  Deque<InvocationHandler> handlers=getHandlers(methodName);  for (int i=0; i < count; i++) {    handlers.add(delegateHandler);  }}  }
class C{  public CipherOutputStream(OutputStream os,BufferedBlockCipher cipher){  super(os);  this.bufferedBlockCipher=cipher;  this.buf=new byte[cipher.getBlockSize()];}  }
class C{  public synchronized boolean hasMoreChoicePoints(final int nQueryHandle){  if (!m_prologTable.containsKey(new Integer(nQueryHandle)))   return false;  final AsyncWAMManager container=(AsyncWAMManager)m_prologTable.get(new Integer(nQueryHandle));  if (container.isRunning())   throw new JIPIsRunningException();  return container.hasMoreChoicePoints();}  }
class C{  private void showInfo(String text){  mHandler.removeMessages(FADE_OUT_INFO);  mInfo.setVisibility(View.VISIBLE);  mInfo.setText(text);  hideInfo();}  }
class C{  private static List<PlatformDotNetLifecycleBean> beans(IgniteConfiguration cfg){  List<PlatformDotNetLifecycleBean> res=new ArrayList<>();  if (cfg.getLifecycleBeans() != null) {    for (    LifecycleBean bean : cfg.getLifecycleBeans()) {      if (bean instanceof PlatformDotNetLifecycleBean)       res.add((PlatformDotNetLifecycleBean)bean);    }  }  return res;}  }
class C{  public int generateId(){  return _uniqueId++;}  }
class C{  public OutOfMemoryError(java.lang.String s){}  }
class C{  public void removePropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){  beanContextChildSupport.removePropertyChangeListener(propertyName,in_pcl);}  }
class C{  public Graph(){}  }
class C{  public boolean isVariableLength(){  return isVariableLength;}  }
class C{  public void addFirst(Character c){  addFirst(c.toString());}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (code: ");  result.append(code);  result.append(')');  return result.toString();}  }
class C{  public MandatoryUdaMissingException(String message){  super(message);}  }
class C{  static MediaType createTextType(String subtype){  return create(TEXT_TYPE,subtype);}  }
class C{  public boolean isInRange(short value,short min,short max){  return SHORT_VALIDATOR.isInRange(value,min,max);}  }
class C{  protected void appendEncodedString(EncodedStringValue enStr){  assert (enStr != null);  int charset=enStr.getCharacterSet();  byte[] textString=enStr.getTextString();  if (null == textString) {    return;  }  mStack.newbuf();  PositionMarker start=mStack.mark();  appendShortInteger(charset);  appendTextString(textString);  int len=start.getLength();  mStack.pop();  appendValueLength(len);  mStack.copy();}  }
class C{  public LineUnavailableException(String message){  super(message);}  }
class C{  public static ECKey fromPrivate(byte[] privKeyBytes,boolean compressed){  return fromPrivate(new BigInteger(1,privKeyBytes),compressed);}  }
class C{  public static void print(CtClass clazz,PrintStream stream){  (new FramePrinter(stream)).print(clazz);}  }
class C{  public T caseInterfaceDefinition_(InterfaceDefinition_ object){  return null;}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  private void buildBitmap(int width,int height){  Bitmap tmpBackgroundBitmap=BitmapFactory.decodeResource(getResources(),R.drawable.bg);  backgroundBitmap=scaleCenterCrop(tmpBackgroundBitmap,width,height);  tmpBackgroundBitmap.recycle();}  }
class C{  private static List<FilterPredClause> parsePredClauses(JsonArray clauseArr,Set<String> filterFields) throws FilterParseException {  List<FilterPredClause> result=new ArrayList<FilterPredClause>();  for (int i=0; i < clauseArr.size(); i++) {    FilterPredClause clause=FilterPredClause.parse(clauseArr.get(i),filterFields);    result.add(clause);  }  return result;}  }
class C{  public boolean equals(String productId,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,BigDecimal selectedAmount,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,boolean isPromo){  return equals(productId,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,additionalProductFeatureAndAppls,attributes,null,prodCatalogId,selectedAmount,configWrapper,itemType,itemGroup,isPromo);}  }
class C{  public final synchronized void close(){  closed=true;  notify();}  }
class C{  public void addBridgeIdleDebugListener(NotThreadSafeBridgeIdleDebugListener listener){  mBridgeIdleListeners.add(listener);}  }
class C{  Key unwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {  byte[] encodedKey;  try {    encodedKey=doFinal(wrappedKey,0,wrappedKey.length);  } catch (  BadPaddingException ePadding) {    throw new InvalidKeyException("The wrapped key is not padded " + "correctly");  }catch (  IllegalBlockSizeException eBlockSize) {    throw new InvalidKeyException("The wrapped key does not have " + "the correct length");  }  return ConstructKeys.constructKey(encodedKey,wrappedKeyAlgorithm,wrappedKeyType);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:11.452 -0500",hash_original_method="1AAF86792C53F220850630A2C399A377",hash_generated_method="F23EB0EE2ABF189E0964015CD69CAB2F") public RSeq(){  super(NAME);}  }
class C{  public void putAllEnv(Map<String,? extends Object> values){  for (  Map.Entry<String,? extends Object> entry : values.entrySet()) {    this.putEnv(entry.getKey(),entry.getValue());  }}  }
class C{  public static char[] utf2chars(byte[] src,int sindex,int len){  char[] dst=new char[len];  int len1=utf2chars(src,sindex,dst,0,len);  char[] result=new char[len1];  System.arraycopy(dst,0,result,0,len1);  return result;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.142 -0500",hash_original_method="16C65FF0357F4E9D1D50699F331D8839",hash_generated_method="D95D8F45336F14A82A0DA6D9E33416D0") public static void sort(float[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public Enumeration<K> keys(){  return new KeyIterator();}  }
class C{  public static void syncQueryComputeStatesWithPowerState(VerificationHost host,ResourcePoolState resourcePool,ComputeState parentCompute,PowerState powerState,Set<String> instanceNames) throws Throwable {  host.waitFor("Waiting for changes of power statuses",null);}  }
class C{  public boolean isDocControlled(){  Object oo=get_Value(COLUMNNAME_IsDocControlled);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isRecoverable(){  return recoverable;}  }
class C{  public Seq<Character> eachChar(){  char[] chars=str.toCharArray();  Character[] characters=new Character[str.length()];  for (int i=0; i < characters.length; i++) {    characters[i]=chars[i];  }  return Seqs.newSeq(characters);}  }
class C{  public static GLFontMetrics fromFontMetrics(Font font,FontRenderContext ctx,int fontImageWidth,int fontImageHeight,int charsPerRow,char minChar,char maxChar){  if (font == null)   throw new IllegalArgumentException("font may not be null");  if (ctx == null)   throw new IllegalArgumentException("ctx may not be null");  int off=0;  GLFontMetrics metric=new GLFontMetrics(fontImageWidth,fontImageHeight);  for (char k=minChar; k <= maxChar; k++, off++) {    TextLayout layout=new TextLayout(String.valueOf(k),font,ctx);    Rectangle2D rect=layout.getBounds();    int x=(off % charsPerRow) * (fontImageWidth / charsPerRow);    int y=(off / charsPerRow) * (fontImageWidth / charsPerRow);    float cy=(float)rect.getHeight();    Rectangle rect0=layout.getPixelBounds(null,100,100);    float cx=-(rect0.x - 100);    int u=(int)Math.ceil(rect.getWidth() + cx);    int v=(int)Math.ceil(layout.getAscent() + layout.getDescent());    metric.glyphs.put((int)k,new GLGlyphMetric(u,v,(int)layout.getAscent(),(int)(x - cx),(int)(y - cy)));  }  return metric;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static void createImageToFileSystem(String url,Component targetList,int targetOffset,String targetKey,String destFile,Dimension toScale,byte priority){  createImageToFileSystem(url,targetList,null,targetOffset,targetKey,destFile,toScale,priority,null,defaultMaintainAspectRatio);}  }
class C{  public DestroyOperation(EntryEventImpl event){  super(event);}  }
class C{  public GlowMetaItem(GlowMetaItem meta){  if (meta == null) {    return;  }  displayName=meta.displayName;  if (meta.hasLore()) {    lore=new ArrayList<>(meta.lore);  }  if (meta.hasEnchants()) {    enchants=new HashMap<>(meta.enchants);  }  hideFlag=meta.hideFlag;}  }
class C{  private void assertPivotCountsAreCorrect(SolrParams baseParams,SolrParams pivotParams) throws SolrServerException {  SolrParams initParams=SolrParams.wrapAppended(pivotParams,baseParams);  log.info("Doing full run: {}",initParams);  countNumFoundChecks=0;  NamedList<List<PivotField>> pivots=null;  try {    QueryResponse initResponse=cloudClient.query(initParams);    pivots=initResponse.getFacetPivot();    assertNotNull(initParams + " has null pivots?",pivots);    assertEquals(initParams + " num pivots",initParams.getParams("facet.pivot").length,pivots.size());  } catch (  Exception e) {    throw new RuntimeException("init query failed: " + initParams + ": "+ e.getMessage(),e);  }  try {    for (    Map.Entry<String,List<PivotField>> pivot : pivots) {      final String pivotKey=pivot.getKey();      final int maxDepth=1 + pivotKey.length() - pivotKey.replace(",","").length();      assertTraceOk(pivotKey,baseParams,pivot.getValue());      for (      PivotField constraint : pivot.getValue()) {        int depth=assertPivotCountsAreCorrect(pivotKey,baseParams,constraint);        assertTrue("went too deep: " + depth + ": "+ pivotKey+ " ==> "+ pivot,depth <= maxDepth);      }    }  } catch (  AssertionError e) {    throw new AssertionError(initParams + " ==> " + e.getMessage(),e);  } finally {    log.info("Ending full run (countNumFoundChecks={}): {}",countNumFoundChecks,initParams);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  String[] split(final String stringToSplit){  if (StringUtils.isNotBlank(stringToSplit)) {    int strLenght=stringToSplit.length();    int splitNum=strLenght / chunkSize;    if (strLenght % chunkSize > 0) {      splitNum+=1;    }    String[] result=new String[splitNum];    for (int i=0; i < splitNum; i++) {      int startPos=i * chunkSize;      int endPos=startPos + chunkSize;      if (endPos > strLenght) {        endPos=strLenght;      }      result[i]=stringToSplit.substring(startPos,endPos);    }    return result;  }  return null;}  }
class C{  public static Document parse(final InputStream in) throws SAXException, IOException {  return parse(new InputSource(in));}  }
class C{  public static IStatus validateIdentifier(String id){  return validateIdentifier(id,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  public synchronized void fireCenter(double latitude,double longitude){  if (size() == 0)   return;  CenterEvent evt=new CenterEvent(source,latitude,longitude);  for (  CenterListener listener : this) {    listener.center(evt);  }}  }
class C{  public void testHdfsSplitsAffinity() throws Exception {  IgfsMock igfs=LocationsBuilder.create().add(0,NODE_1).add(50,NODE_2).add(100,NODE_3).buildIgfs();  final List<HadoopInputSplit> splits=new ArrayList<>();  splits.add(new HadoopFileBlock(new String[]{HOST_1},URI.create("hfds://" + HOST_1 + "/x"),0,50));  splits.add(new HadoopFileBlock(new String[]{HOST_2},URI.create("hfds://" + HOST_2 + "/x"),50,100));  splits.add(new HadoopFileBlock(new String[]{HOST_3},URI.create("hfds://" + HOST_3 + "/x"),100,37));  splits.add(new HadoopFileBlock(new String[]{HOST_4},URI.create("hfds://" + HOST_4 + "/x"),138,2));  splits.add(new HadoopFileBlock(new String[]{HOST_5},URI.create("hfds://" + HOST_5 + "/x"),140,3));  final int expReducers=7;  HadoopPlannerMockJob job=new HadoopPlannerMockJob(splits,expReducers);  IgniteHadoopWeightedMapReducePlanner planner=createPlanner(igfs);  final HadoopMapReducePlan plan=planner.preparePlan(job,NODES,null);  checkPlanMappers(plan,splits,NODES,true);  checkPlanReducers(plan,NODES,expReducers,true);}  }
class C{  private void applyFilterOnStageResults(GraphQueryTask currentState){  for (int i=currentState.stages.size() - 1; i >= 1; i--) {    QueryTask currentStage=currentState.stages.get(i);    QueryTask previousStage=currentState.stages.get(i - 1);    if (currentStage.results == null) {      break;    }    if (previousStage.results == null) {      break;    }    Set<String> unusedLinks=new HashSet<>();    Set<String> unusedDocumentLinks=new HashSet<>();    previousStage.results.selectedLinksPerDocument.entrySet().forEach(null);    if (previousStage.results.documents != null) {      unusedDocumentLinks.forEach(null);    }    previousStage.results.documentLinks.removeAll(unusedDocumentLinks);    previousStage.results.selectedLinks.removeAll(unusedLinks);    unusedDocumentLinks.forEach(null);    previousStage.results.documentCount=(long)previousStage.results.documentLinks.size();  }}  }
class C{  public int size(){  return stack.size();}  }
class C{  @SuppressWarnings("unchecked") public void awake(){  List<Property> properties=this.entityManager.createQuery("Select p from Property p where p.startup = true").getResultList();  for (  Property property : properties) {    setProperty(property.getProperty(),property.getValue());  }}  }
class C{  protected InputStream _optimizedStreamFromURL(URL url) throws IOException {  if ("file".equals(url.getProtocol())) {    String host=url.getHost();    if (host == null || host.length() == 0) {      return new FileInputStream(url.getPath());    }  }  return url.openStream();}  }
class C{  public static boolean assertFalse(final boolean check){  if (check) {    throw new ExamException();  }  return true;}  }
class C{  public static org.hamcrest.Matcher<java.lang.Object> anything(){  return org.hamcrest.core.IsAnything.anything();}  }
class C{  public static Word[] prepareStringToken(String str){  if (str == null) {    return new Word[0];  }  final ArrayList<Word> strWithDelim=new ArrayList<Word>();  splitWordBySpace(str,strWithDelim);  final Word[] toRet=new Word[Math.min(strWithDelim.size(),MAX_NUM_WORDS)];  for (int i=0; i < Math.min(strWithDelim.size(),MAX_NUM_WORDS); i++) {    toRet[i]=strWithDelim.get(i);  }  return toRet;}  }
class C{  public InvokeDynamicConstant addInvokeDynamicRef(BootstrapMethodAttribute attr,String methodName,String methodType,String bootClass,String bootMethod,String bootType,ConstantPoolEntry[] cpEntries){  NameAndTypeConstant methodEntry=addNameAndType(methodName,methodType);  MethodRefConstant bootMethodRef=addMethodRef(bootClass,bootMethod,bootType);  MethodHandleConstant bootMethodHandle=addMethodHandle(MethodHandleType.INVOKE_STATIC,bootMethodRef);  int bootIndex=attr.addMethod(bootMethodHandle.getIndex(),cpEntries);  InvokeDynamicConstant invokedynamicRef=new InvokeDynamicConstant(this,_entries.size(),attr,bootIndex,methodEntry.getIndex());  addConstant(invokedynamicRef);  return invokedynamicRef;}  }
class C{  private DataSet simulateDataHelper(DataSet dataSet,boolean latentDataSaved,int[] tiers){  if (dataSet.getNumColumns() != nodes.length) {    throw new IllegalArgumentException("When rewriting the old data set, " + "number of variables in data set must equal number of variables " + "in Bayes net.");  }  int sampleSize=dataSet.getNumRows();  int numVars=0;  int[] map=new int[nodes.length];  List<Node> variables=new LinkedList<>();  for (int j=0; j < nodes.length; j++) {    int numCategories=bayesPm.getNumCategories(nodes[j]);    List<String> categories=new LinkedList<>();    for (int k=0; k < numCategories; k++) {      categories.add(bayesPm.getCategory(nodes[j],k));    }    DiscreteVariable var=new DiscreteVariable(nodes[j].getName(),categories);    var.setNodeType(nodes[j].getNodeType());    variables.add(var);    int index=++numVars - 1;    map[index]=j;  }  for (int i=0; i < variables.size(); i++) {    Node node=dataSet.getVariable(i);    Node _node=variables.get(i);    dataSet.changeVariable(node,_node);  }  constructSample(sampleSize,dataSet,map,tiers);  if (latentDataSaved) {    return dataSet;  } else {    return DataUtils.restrictToMeasured(dataSet);  }}  }
class C{  protected void add(DirectedEdge dirEdge){  dirEdges.add(dirEdge);}  }
class C{  public void addAndConstraint(int combined,int left,int right){  int[] vars1={combined,left};  int[] vars2={combined,right};  double[] weights={1.0,-1.0};  addLessThanConstraint(vars1,weights,0);  addLessThanConstraint(vars2,weights,0);}  }
class C{  public static void previewRoom(final Activity fromActivity,final MXSession session,final String roomId,final String roomAlias,final ApiCallback<Void> callback){  previewRoom(fromActivity,session,roomId,new RoomPreviewData(session,roomId,null,roomAlias,null),callback);}  }
class C{  public void addRowSet(RowSet rowset,String columnName) throws SQLException {  ((CachedRowSetImpl)rowset).setMatchColumn(columnName);  addRowSet((Joinable)rowset);}  }
class C{  public void removeAll(){  Object[] listenerList=this.listeners.getListenerList();  for (int i=listenerList.length - 2; i >= 0; i-=2) {    if (listenerList[i] == MessageListener.class) {      remove(((MessageListener)listenerList[i + 1]));    }  }}  }
class C{  public Color(String color){  super(color);}  }
class C{  public AnnotationTypeFilter(Class<? extends Annotation> annotationType,boolean considerMetaAnnotations){  this(annotationType,considerMetaAnnotations,false);}  }
class C{  public void register0(String name,InvocationPlugin plugin){  plugins.register(plugin,false,allowOverwrite,declaringType,name);}  }
class C{  public MessageFeed(){  super(KEY);  addCategory(CATEGORY);}  }
class C{  @NoInline @Interruptible public static Object newRuntimeTable(int size,RVMType type){  if (VM.VerifyAssertions)   VM._assert(VM.runningVM);  TIB realTib=type.getTypeInformationBlock();  RVMArray fakeType=RVMType.WordArrayType;  TIB fakeTib=fakeType.getTypeInformationBlock();  int headerSize=ObjectModel.computeArrayHeaderSize(fakeType);  int align=ObjectModel.getAlignment(fakeType);  int offset=ObjectModel.getOffsetForAlignment(fakeType,false);  int width=fakeType.getLogElementSize();  Object array=allocateArray(size,width,headerSize,fakeTib,type.getMMAllocator(),align,offset,Plan.DEFAULT_SITE);  ObjectModel.setTIB(array,realTib);  return array;}  }
class C{  public List<NamedRelatedResourceRep> listByVirtualArray(URI virtualArrayId){  return getList(PathConstants.VIRTUAL_NAS_SERVER_BY_VARRAY_URL,virtualArrayId);}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiPanelUI();  return MultiLookAndFeel.createUIs(mui,((MultiPanelUI)mui).uis,a);}  }
class C{  public static OnSubscribeEvent<NetworkServiceDiscoveryInfo> from(@NonNull Context context,@NonNull String serviceName,@NonNull String serviceLayer,int servicePort,@Nullable Map<String,String> attributes){  if (canUseNativeJB(attributes) || canUseNativeLP(attributes)) {    return buildNativeOnSubscribeEventFrom(context,serviceName,serviceLayer,servicePort,attributes);  } else {    return new CompatAdvertiseOnSubscribeEvent(serviceName,serviceLayer,servicePort,attributes);  }}  }
class C{  private void handleRedirect(State state,HttpResponse response,int statusCode) throws StopRequest, RetryDownload {  if (Constants.LOGVV) {    Log.v(Constants.TAG,"got HTTP redirect " + statusCode);  }  if (state.mRedirectCount >= Constants.MAX_REDIRECTS) {    throw new StopRequest(DownloaderService.STATUS_TOO_MANY_REDIRECTS,"too many redirects");  }  Header header=response.getFirstHeader("Location");  if (header == null) {    return;  }  if (Constants.LOGVV) {    Log.v(Constants.TAG,"Location :" + header.getValue());  }  String newUri;  try {    newUri=new URI(mInfo.mUri).resolve(new URI(header.getValue())).toString();  } catch (  URISyntaxException ex) {    if (Constants.LOGV) {      Log.d(Constants.TAG,"Couldn't resolve redirect URI " + header.getValue() + " for "+ mInfo.mUri);    }    throw new StopRequest(DownloaderService.STATUS_HTTP_DATA_ERROR,"Couldn't resolve redirect URI");  }  ++state.mRedirectCount;  state.mRequestUri=newUri;  if (statusCode == 301 || statusCode == 303) {    state.mNewUri=newUri;  }  throw new RetryDownload();}  }
class C{  public ImageFactory(){  this(-1,-1);}  }
class C{  public final boolean peek(){  return m_values[m_index];}  }
class C{  public static boolean isSorted(byte[] array){  if (array == null || array.length < 2) {    return true;  }  byte previous=array[0];  final int n=array.length;  for (int i=1; i < n; i++) {    final byte current=array[i];    if (new Byte(previous).compareTo(current) > 0) {      return false;    }    previous=current;  }  return true;}  }
class C{  public static String convertText(final ConversionMethod method,final byte[] text){switch (method) {case HEX_ENCODE:{      return new String(Hex.encodeHex(text));    }case HEX_DECODE:{    return ConversionUtils.hexToStringNoException(ConversionUtils.arrayToString(text));  }case BASE_64_ENCODE:{  return Base64.encodeBase64String(text);}case BASE_64_DECODE:{return new String(Base64.decodeBase64(text));}default :return ConversionUtils.arrayToString(text);}}  }
class C{  public void stop(){  if (ActiveMQActivation.trace) {    ActiveMQRALogger.LOGGER.trace("stop()");  }  deliveryActive.set(false);  teardown();}  }
class C{  public static boolean isComplexType(byte type){  return type >= CORE_ARRAY || type <= CORE_OBJECT;}  }
class C{  private void $$$setupUI$$$(){  createUIComponents();  mainPanel=new JPanel();  mainPanel.setLayout(new GridLayoutManager(3,2,new Insets(0,0,0,0),-1,-1));  pathLabel=new JLabel();  pathLabel.setText("Path to elm-make:");  mainPanel.add(pathLabel,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  final Spacer spacer1=new Spacer();  mainPanel.add(spacer1,new GridConstraints(2,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_VERTICAL,1,GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));  mainPanel.add(pathField,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(150,-1),null,0,false));  enableErrorCheckingCheckBox.setText("Enable error checking");  mainPanel.add(enableErrorCheckingCheckBox,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));}  }
class C{  public static void makeShellScript(String content,String name){  try {    File script=new File(name);    Injector.INSTANCE.fileSystem().write("#!/bin/sh -e\n" + content,script);    Injector.INSTANCE.fileSystem().setExecutable(script);  } catch (  IOException e) {    throw new MoeProblem("Could not generate shell script: " + e);  }}  }
class C{  public JSONObject append(String key,Object value) throws JSONException {  testValidity(value);  Object o=opt(key);  if (o == null) {    put(key,new JSONArray().put(value));  } else   if (o instanceof JSONArray) {    put(key,((JSONArray)o).put(value));  } else {    throw new JSONException("JSONObject[" + key + "] is not a JSONArray.");  }  return this;}  }
class C{  public InetUnixAddress(String path){  this(path.getBytes(StandardCharsets.UTF_8));}  }
class C{  public static boolean confirmAction(String i18nKey,String propertyKey,Object... arguments){  String propValue=ParameterService.getParameterValue(propertyKey);  if (propValue != null) {    if (propValue.equals(VALUE_TRUE)) {      return true;    } else     if (propValue.equals(VALUE_FALSE)) {      return false;    }  }  DecisionRememberingConfirmDialog d=new DecisionRememberingConfirmDialog(i18nKey,propertyKey,DialogType.CONFIRM,arguments);  d.setVisible(true);  return d.confirmed;}  }
class C{  public static int overload1or2WithConn(int one,int two){  return one + two;}  }
class C{  public DefaultRequest currencyCode(String value){  setString(CURRENCY_CODE,value);  return this;}  }
class C{  public Image gaussianBlurImage(Image image,float radius){  return impl.gaussianBlurImage(image,radius);}  }
class C{  private boolean writePolyAttributes(IXMLElement elem,SVGFigure f,Shape shape){  AffineTransform t=TRANSFORM.getClone(f);  if (t == null) {    t=drawingTransform;  } else {    t.preConcatenate(drawingTransform);  }  StringBuilder buf=new StringBuilder();  float[] coords=new float[6];  Path2D.Double path=new Path2D.Double();  for (PathIterator i=shape.getPathIterator(t,1.5f); !i.isDone(); i.next()) {switch (i.currentSegment(coords)) {case PathIterator.SEG_MOVETO:      if (buf.length() != 0) {        throw new IllegalArgumentException("Illegal shape " + shape);      }    if (buf.length() != 0) {      buf.append(',');    }  buf.append((int)coords[0]);buf.append(',');buf.append((int)coords[1]);path.moveTo(coords[0],coords[1]);break;case PathIterator.SEG_LINETO:if (buf.length() != 0) {buf.append(',');}buf.append((int)coords[0]);buf.append(',');buf.append((int)coords[1]);path.lineTo(coords[0],coords[1]);break;case PathIterator.SEG_CLOSE:path.closePath();break;default :throw new InternalError("Illegal segment type " + i.currentSegment(coords));}}elem.setAttribute("shape","poly");elem.setAttribute("coords",buf.toString());writeHrefAttribute(elem,f);return path.intersects(new Rectangle2D.Float(bounds.x,bounds.y,bounds.width,bounds.height));}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.460 -0500",hash_original_method="62ADB5DE3DAA611F01F5B25EB82A32E9",hash_generated_method="BAB46B9CC4BEDB8071B56701A0B54C17") public ServerResponseInterface newSIPServerResponse(SIPResponse responseReceived,MessageChannel responseMessageChannel){  Iterator<SIPClientTransaction> transactionIterator;  SIPClientTransaction nextTransaction;  SIPClientTransaction currentTransaction;  String key=responseReceived.getTransactionId();  currentTransaction=(SIPClientTransaction)clientTransactionTable.get(key);  if (currentTransaction == null || (!currentTransaction.isMessagePartOfTransaction(responseReceived) && !key.startsWith(SIPConstants.BRANCH_MAGIC_COOKIE_LOWER_CASE))) {    transactionIterator=clientTransactionTable.values().iterator();    currentTransaction=null;    while (transactionIterator.hasNext() && currentTransaction == null) {      nextTransaction=(SIPClientTransaction)transactionIterator.next();      if (nextTransaction.isMessagePartOfTransaction(responseReceived)) {        currentTransaction=nextTransaction;      }    }    if (currentTransaction == null) {      if (this.stackLogger.isLoggingEnabled(StackLogger.TRACE_INFO)) {        responseMessageChannel.logResponse(responseReceived,System.currentTimeMillis(),"before processing");      }      return sipMessageFactory.newSIPServerResponse(responseReceived,responseMessageChannel);    }  }  boolean acquired=currentTransaction.acquireSem();  if (this.stackLogger.isLoggingEnabled(StackLogger.TRACE_INFO)) {    currentTransaction.logResponse(responseReceived,System.currentTimeMillis(),"before processing");  }  if (acquired) {    ServerResponseInterface sri=sipMessageFactory.newSIPServerResponse(responseReceived,currentTransaction);    if (sri != null) {      currentTransaction.setResponseInterface(sri);    } else {      if (this.stackLogger.isLoggingEnabled()) {        this.stackLogger.logDebug("returning null - serverResponseInterface is null!");      }      currentTransaction.releaseSem();      return null;    }  } else {    if (stackLogger.isLoggingEnabled())     this.stackLogger.logDebug("Could not aquire semaphore !!");  }  if (acquired)   return currentTransaction; else   return null;}  }
class C{  public CallableStatement monitor(CallableStatement statement){  return (CallableStatement)monitorJDBC(statement);}  }
class C{  @Override protected void forwardCommandChangeToLayout(int s){  if (s == CLOSED) {    log.debug("Setting turnout {} to CLOSED",getSystemName());    if (!getInverted())     pin.high(); else     pin.low();  } else   if (s == THROWN) {    log.debug("Setting turnout {} to THROWN",getSystemName());    if (!getInverted())     pin.low(); else     pin.high();  }}  }
class C{  public static int toInt(byte[] bytes){  return toInt(bytes[0],bytes[1],bytes[2],bytes[3]);}  }
class C{  public static String classNameOnly(String cname){  String s="[null object ref]";  if (cname != null) {    s=cname.substring(cname.lastIndexOf('.') + 1);  }  return s;}  }
class C{  private static <T>FibNode<T> delink(FibNode<T> a){  if (a.left == a)   return null;  FibNode<T> a_left_orig=a.left;  a.left.right=a.right;  a.right.left=a_left_orig;  a.left=a.right=a;  return a_left_orig;}  }
class C{  public CreateSnapshotRequest source(XContentBuilder source){  return source(source.bytes());}  }
class C{  public static String convertMethodSignature(String className,String methodName,String methodSig){  return convertMethodSignature(className,methodName,methodSig,"");}  }
class C{  public void test_qname_escape_02() throws MalformedQueryException {  final String query="PREFIX og: <http://ogp.me/ns#>\n" + "SELECT * WHERE { ?page og:audio%3Atitle ?title }";  parseOperation(query);}  }
class C{  public Engine.Index preIndex(Engine.Index index){  return index;}  }
class C{  public Builder addContentItem(ContentItem contentItem){  if (contentItems == null) {    contentItems=new ArrayList<ContentItem>();    contentType=HttpMediaType.APPLICATION_JSON;  }  contentItems.add(contentItem);  return this;}  }
class C{  public void endStatement(){  workerHolder.closeWorkers();  closeTemporaryResults();}  }
class C{  public int hasChargedCapacitor(){  if ((getCrossLinkedBy() != null) && (getCrossLinkedBy().getType() instanceof MiscType) && !getCrossLinkedBy().isDestroyed()) {    MiscType cap=(MiscType)getCrossLinkedBy().getType();    if (cap.hasFlag(MiscType.F_PPC_CAPACITOR) && getCrossLinkedBy().curMode().equals("Charge")) {      return 2;    }  }  if ((getLinkedBy() != null) && (getLinkedBy().getType() instanceof MiscType) && !getLinkedBy().isDestroyed()) {    MiscType cap=(MiscType)getLinkedBy().getType();    if (cap.hasFlag(MiscType.F_PPC_CAPACITOR) && getLinkedBy().curMode().equals("Charge")) {      return 1;    }  }  return 0;}  }
class C{  public void union(Clip c){  if (status == INVALID)   return;  if (status == EMPTY) {    setClip(c);    status=INUSE;    return;  }  clip[0]=Math.min(clip[0],c.clip[0]);  clip[1]=Math.min(clip[1],c.clip[1]);  clip[6]=Math.max(clip[6],c.clip[6]);  clip[7]=Math.max(clip[7],c.clip[7]);}  }
class C{  protected MyAbstractList(){}  }
class C{  public OrdinalsBuilder addDoc(int doc){  totalNumOrds++;  final int numValues=ordinals.addOrdinal(doc,currentOrd);  if (numValues == 1) {    ++numDocsWithValue;  } else   if (numValues == 2) {    ++numMultiValuedDocs;  }  return this;}  }
class C{  protected static void printProperties(String key,String value,PrintStream ps,Properties createdProperties){  if (ps != null) {    ps.println(key + "=" + value);  }  if (createdProperties != null) {    createdProperties.put(key,value);  }}  }
class C{  public synchronized void synchronizeWith(UpdateSynchronizer newsync){  if (synchronizer == newsync) {    LoggingUtil.warning("Double-synced to the same plot!",new Throwable());    return;  }  if (synchronizer != null) {    LoggingUtil.warning("Attempting to synchronize to more than one synchronizer.");    return;  }  synchronizer=newsync;  newsync.addUpdateRunner(this);}  }
class C{  public V pop() throws IndexOutOfBoundsException {  if (top == 0) {    throw new IndexOutOfBoundsException("Cannot pop operand off an empty stack.");  }  return values[--top + locals];}  }
class C{  private Location createLocation(double latitudeValue,double longitudeValue,Double altitudeValue,long timeValue){  Location location=new Location(LocationManager.GPS_PROVIDER);  location.setLatitude(latitudeValue);  location.setLongitude(longitudeValue);  if (altitudeValue != null) {    location.setAltitude(altitudeValue);  } else {    location.removeAltitude();  }  location.setTime(timeValue);  location.removeAccuracy();  location.removeBearing();  location.removeSpeed();  return location;}  }
class C{  public void init(KeyGenerationParameters param){  this.random=param.getRandom();  this.strength=(param.getStrength() + 7) / 8;}  }
class C{  @Override @Transactional public void logout(HttpServletRequest request,HttpServletResponse response,Authentication authentication){  String rememberMeCookie=extractRememberMeCookie(request);  if (rememberMeCookie != null && rememberMeCookie.length() != 0) {    try {      String[] cookieTokens=decodeCookie(rememberMeCookie);      PersistentToken token=getPersistentToken(cookieTokens);      persistentTokenRepository.delete(token);    } catch (    InvalidCookieException ice) {      log.info("Invalid cookie, no persistent token could be deleted");    }catch (    RememberMeAuthenticationException rmae) {      log.debug("No persistent token found, so no token could be deleted");    }  }  super.logout(request,response,authentication);}  }
class C{  private static void invokeAllMethods(Class c,Object cpdsObj,List props) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {  String key=null;  String value=null;  String type=null;  String methodName=null;  Method m=null;  for (Iterator it=props.iterator(); it.hasNext(); ) {    ConfigProperty cp=(ConfigProperty)it.next();    key=cp.getName();    value=cp.getValue();    type=cp.getType();    if (key.indexOf("password") != -1) {      value=PasswordUtil.decrypt(String.valueOf(value));    }    methodName=new StringBuffer("set").append(Character.toUpperCase(key.charAt(0))).append(key.length() > 1 ? key.substring(1) : "").toString();    try {      Class cl=null;      Class realClass=null;      if ("int".equals(type)) {        cl=int.class;        realClass=java.lang.Integer.class;      } else {        cl=ClassPathLoader.getLatest().forName(type);        realClass=cl;      }      Constructor cr=realClass.getConstructor(new Class[]{java.lang.String.class});      Object ob=cr.newInstance(new Object[]{value});      m=c.getMethod(methodName,new Class[]{cl});      m.invoke(cpdsObj,new Object[]{ob});    } catch (    ClassNotFoundException ex) {      String exception=LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_INVOKEALLMETHODS_EXCEPTION_IN_CREATING_CLASS_WITH_THE_GIVEN_CONFIGPROPERTYTYPE_CLASSNAME_EXCEPTION_STRING_0.toLocalizedString(ex.toString());      if (logger.isDebugEnabled()) {        logger.debug(exception,ex);      }    }catch (    NoSuchMethodException ex) {      String exception=LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_INVOKEALLMETHODS_EXCEPTION_IN_CREATING_METHOD_USING_CONFIGPROPERTYNAME_PROPERTY_EXCEPTION_STRING_0.toLocalizedString(ex.toString());      if (logger.isDebugEnabled()) {        logger.debug(exception,ex);      }    }catch (    InstantiationException ex) {      String exception=LocalizedStrings.DataSourceFactory_DATASOURCEFACTORY_INVOKEALLMETHODS_EXCEPTION_IN_CREATING_INSTANCE_OF_THE_CLASS_USING_THE_CONSTRUCTOR_WITH_A_STRING_PARAMETER_EXCEPTION_STRING_0.toLocalizedString(ex.toString());      if (logger.isDebugEnabled()) {        logger.debug(exception,ex);      }    }  }}  }
class C{  @PostConstruct private void checkRegistryIsAvailable() throws IOException {  if (snapshotUseRegistry && !isNullOrEmpty(machineDockerRegistry)) {    String registryUrl="http://" + machineDockerRegistry;    LOG.info("Probing registry '{}'",registryUrl);    final HttpURLConnection conn=(HttpURLConnection)new URL(registryUrl).openConnection();    conn.setConnectTimeout(30 * 1000);    try {      final int responseCode=conn.getResponseCode();      LOG.info("Probe of registry '{}' succeed with HTTP response code '{}'",registryUrl,responseCode);    } catch (    IOException ioEx) {      LOG.warn("Docker registry {} is not available, " + "which means that you won't be able to save snapshots of your workspaces." + "\nHow to configure registry?"+ "\n\tLocal registry  -> https://docs.docker.com/registry/"+ "\n\tRemote registry -> set up 'docker.registry.auth.*' properties",registryUrl);    } finally {      conn.disconnect();    }  }}  }
class C{  public int tableLength(){  return info.length / 2 - 1;}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }  }}  }
class C{  public SimpleString(char[] chars){  this.chars=new char[chars.length];  for (int i=0; i < chars.length; i++) {    this.chars[i]=chars[i];  }}  }
class C{  @VisibleForTesting DateTime readNewCommitLogsAndFindThreshold(ImmutableMap<Integer,DateTime> bucketTimes){  DateTime timeBeforeAllNewCommits=END_OF_TIME;  for (  Entry<Integer,DateTime> entry : bucketTimes.entrySet()) {    Key<CommitLogBucket> bucketKey=getBucketKey(entry.getKey());    DateTime bucketTime=entry.getValue();    Key<CommitLogManifest> keyForFilter=Key.create(CommitLogManifest.create(bucketKey,bucketTime.plusMillis(1),null));    List<Key<CommitLogManifest>> manifestKeys=ofy.load().type(CommitLogManifest.class).ancestor(bucketKey).filterKey(">=",keyForFilter).limit(1).keys().list();    if (!manifestKeys.isEmpty()) {      timeBeforeAllNewCommits=earliestOf(timeBeforeAllNewCommits,CommitLogManifest.extractCommitTime(getOnlyElement(manifestKeys)).minusMillis(1));    }  }  return timeBeforeAllNewCommits;}  }
class C{  public boolean addAllUnique(Collection<Playlist> ps){  boolean didChange=false;  for (  Playlist p : ps) {    if (p != null && !mPlaylists.contains(p)) {      mPlaylists.add(p);      didChange=true;    }  }  return didChange;}  }
class C{  @Override public int compare(final Cookie c1,final Cookie c2){  LOG.trace("enter Cookie.compare(Object, Object)");  if (c1.getPath() == null && c2.getPath() == null) {    return 0;  } else   if (c1.getPath() == null) {    if (c2.getPath().equals(CookieSpec.PATH_DELIM)) {      return 0;    } else {      return -1;    }  } else   if (c2.getPath() == null) {    if (c1.getPath().equals(CookieSpec.PATH_DELIM)) {      return 0;    } else {      return 1;    }  } else {    return c1.getPath().compareTo(c2.getPath());  }}  }
class C{  public ExportListCommand(Server server){  super(server,"exportlist","Exports a unit list.  Usage: /exportlist <filename>");}  }
class C{  public void updateSubscribeTopicList(String topicName){  subPanelContr.updateTopicList(topicName);}  }
class C{  private static void saveTenantACLs(String vpoolId,List<String> tenants,Boolean enableTenants){  Set<String> tenantIds=Sets.newHashSet();  if (isTrue(enableTenants) && tenants != null) {    tenantIds.addAll(tenants);  }  ACLUpdateBuilder builder=new ACLUpdateBuilder(ComputeVirtualPoolUtils.getComputeACLs(vpoolId));  builder.setTenants(tenantIds);  try {    ComputeVirtualPoolUtils.updateComputeACLs(vpoolId,builder.getACLUpdate());  } catch (  ViPRException e) {    Logger.error(e,"Failed to update Compute Virtual Pool ACLs");    String errorDesc=e.getMessage();    if (e instanceof ServiceErrorException) {      errorDesc=((ServiceErrorException)e).getDetailedMessage();    }    flash.error(MessagesUtils.get("computeVirtualPool.updateComputeVirtualPoolACLs.failed",errorDesc));  }}  }
class C{  public boolean equals(GLUquadric value){  return !(normals != value.normals || textureCoords != value.textureCoords || orientation != value.orientation || drawStyle != value.drawStyle);}  }
class C{  private Row nextCursorFirstRow(){  if (currentCursor == null) {    currentCursor=leftInput;    currentInputRowType=inputRowType(0);    if (currentCursor.isClosed()) {      currentCursor.open();    }  } else   if (currentCursor == leftInput) {    currentCursor=rightInput;    currentInputRowType=inputRowType(1);    if (currentCursor.isClosed()) {      currentCursor.open();    }  } else   if (currentCursor == rightInput) {    return null;  }  Row nextRow=currentCursor.next();  if (nextRow == null) {    return nextCursorFirstRow();  }  return nextRow;}  }
class C{  protected void logDeprecatedSetting(String settingName,String alternativeName){  if (!Strings.isNullOrEmpty(settings.get(settingName))) {    deprecationLogger.deprecated("Setting [{}] is deprecated, use [{}] instead",settingName,alternativeName);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.987 -0500",hash_original_method="14AFCFFFD18B711043FB34122FCD5951",hash_generated_method="3253F34376B5F4E1DAE5391E2C045908") public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  public static int majorityElement(int[] num){  int maj=num[0];  for (int count=0, i=0; i < num.length && count <= num.length / 2; i++) {    if (count == 0) {      maj=num[i];      count++;    } else     count=num[i] == maj ? count + 1 : count - 1;  }  return maj;}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public static void addCertificateToTruststore(String certificateAlias,String certificateLocation){}  }
class C{  public void run(){  ActivationLibrary.deactivate(this,getID());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void removePermission(Path path,PosixFilePermission permission) throws IOException {  Set<PosixFilePermission> perms=Files.getPosixFilePermissions(path);  if (perms.remove(permission)) {    Files.setPosixFilePermissions(path,perms);  }}  }
class C{  public static ImmutableMap<String,RedisPools> buildShardMap(InputStream redisConfigStream,PropertiesConfiguration configuration){  RedisConfigSchema redisConfig;  try {    redisConfig=RedisConfigSchema.read(Preconditions.checkNotNull(redisConfigStream));  } catch (  IOException e) {    LOG.error("Failed to load redis configuration",e);    throw new RuntimeException(e);  }  ImmutableMap.Builder<String,RedisPools> shardMapBuilder=new ImmutableMap.Builder<String,RedisPools>();  for (  RedisConfigSchema.Shard shard : redisConfig.shards) {    shardMapBuilder.put(shard.name,new RedisPools(configuration,shard.shardConfig.master.host,shard.shardConfig.master.port,shard.shardConfig.dequeueOnly));  }  return shardMapBuilder.build();}  }
class C{  public void init(int FloatingActionButtonColor){  setWillNotDraw(false);  setLayerType(View.LAYER_TYPE_SOFTWARE,null);  mButtonPaint=new Paint(Paint.ANTI_ALIAS_FLAG);  mButtonPaint.setColor(FloatingActionButtonColor);  mButtonPaint.setStyle(Paint.Style.FILL);  mButtonPaint.setShadowLayer(10.0f,0.0f,3.5f,Color.argb(100,0,0,0));  mDrawablePaint=new Paint(Paint.ANTI_ALIAS_FLAG);  invalidate();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.NUMERICAL_UNARY_EXPRESSION__OPERATOR:    setOperator((UnaryOperator)newValue);  return;case ExpressionsPackage.NUMERICAL_UNARY_EXPRESSION__OPERAND:setOperand((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void post(String path) throws IOException, HttpResponseException {  post(path,null,null);}  }
class C{  public Builder addMatch2Method(Match2MethodSpec match2MethodSpec){  match2Methods.addAll(new Match2MethodPermutationBuilder(matchType,match2MethodSpec,MAX_ARITY).build());  return this;}  }
class C{  public static String asDetailedString(Field field){  return new RecordWriter().detailed(true).append(field).toString();}  }
class C{  @Override public InputStream locateStream(final String uri,final File folder) throws IOException {  notNull(folder);  final File jarPath=getJarFile(folder);  if (isSupported(jarPath)) {    return locateStreamFromJar(uri,jarPath);  }  return super.locateStream(uri,folder);}  }
class C{  public void checkLoadExternalResource(ParsedURL resourceURL,ParsedURL docURL) throws SecurityException {  userAgent.checkLoadExternalResource(resourceURL,docURL);}  }
class C{  protected void deployArchive(HttpServletRequest request,HttpServletResponse response,String contextPath) throws IOException {  Log.debug("Remotely deploying a remote web archive with context " + contextPath);  if (contextPath == null) {    sendError(response,"The path variable is not set");  } else   if (!contextPath.startsWith("/")) {    sendError(response,"The path variable must start with /");  } else   if (getContextHandler(contextPath) != null) {    sendError(response,"The webapp context path is already in use");  } else {    Log.debug("trying to get the remote web archive");    File webappFile=new File(this.webAppDirectory,(contextPath.equals("/") ? "ROOT" : contextPath.substring(1)) + ".war");    InputStream inputStream=new BufferedInputStream(request.getInputStream());    OutputStream outputStream=new BufferedOutputStream(new FileOutputStream(webappFile),8096);    int i=inputStream.read();    while (i != -1) {      outputStream.write(i);      i=inputStream.read();    }    inputStream.close();    outputStream.flush();    outputStream.close();    WebAppContext webappcontext=new WebAppContext();    webappcontext.setContextPath(contextPath);    webappcontext.setWar(webappFile.getAbsolutePath());    webappcontext.setDefaultsDescriptor(configHome + "/etc/webdefault.xml");    chc.addHandler(webappcontext);    try {      webappcontext.start();    } catch (    Exception e) {      sendError(response,"Unexpected error when trying to start the webapp");      Log.warn(e);      return;    }  }  sendMessage(response,"Webapp deployed at context " + contextPath);}  }
class C{  public void testCreateAttributeNS1() throws Throwable {  Document doc;  Attr attribute;  String namespaceURI=null;  String qualifiedName="test";  String nodeName;  doc=(Document)load("staffNS",builder);  attribute=doc.createAttributeNS(namespaceURI,qualifiedName);  nodeName=attribute.getNodeName();  assertEquals("documentcreateattributeNS01","test",nodeName);}  }
class C{  public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory){  return new ThreadPoolExecutor(0,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),threadFactory);}  }
class C{  public InlineQueryResultCachedAudioBuilder audioFileId(String audioFileId){  this.audio_file_id=audioFileId;  return this;}  }
class C{  @Override public void ANEWARRAY(int conc_array_length,String componentTypeName){  IntegerValue symb_array_length=env.topFrame().operandStack.popBv32();  if (negativeArrayLengthViolation(conc_array_length,symb_array_length))   return;  Type componentType=Type.getType(componentTypeName.replace('/','.'));  Class<?> componentClass=classLoader.getClassForType(componentType);  int[] lenghts=new int[]{0};  Class<?> array_class=Array.newInstance(componentClass,lenghts).getClass();  Type arrayType=Type.getType(array_class);  ReferenceConstant symb_array_ref=env.heap.buildNewReferenceConstant(arrayType);  env.heap.putField("",ARRAY_LENGTH,null,symb_array_ref,symb_array_length);  env.topFrame().operandStack.pushRef(symb_array_ref);}  }
class C{  public Iterator<Item> iterator(){  return new ListIterator();}  }
class C{  public Container createContainer(Configuration configuration){  return createContainer(getTestData().containerType,configuration);}  }
class C{  public LogicalDataImportTask(LogicalDataImportTask<T> parent){  this(parent.importItem);  this.size=parent.size;  this.setMappingData(parent.src_ip,parent.dst_ip,parent.src_mac,parent.dst_mac,parent.src,parent.dst);}  }
class C{  private boolean isValidType(Token t){  return textArea.getMarkOccurrencesOfTokenType(t.type);}  }
class C{  protected void validateHttpHeaderApplicationUser(String expectedUserId,String expectedFirstName,String expectedLastName,String expectedEmail,String expectedRole,String expectedSessionInitTime,String[] expectedFunctions,Set<NamespaceAuthorization> expectedNamespaceAuthorizations) throws Exception {  Set<String> roles=new HashSet<>();  if (expectedRole != null) {    roles.add(expectedRole);  }  validateHttpHeaderApplicationUser(expectedUserId,expectedFirstName,expectedLastName,expectedEmail,roles,expectedSessionInitTime,expectedFunctions,expectedNamespaceAuthorizations);}  }
class C{  public T caseConstraint(Constraint object){  return null;}  }
class C{  public String missingValueTipText(){  return "The placeholder for missing values, default is '?'.";}  }
class C{  private static BlockNode traverseMonitorExitsCross(BlockNode block,Set<BlockNode> exits,Set<BlockNode> visited){  visited.add(block);  for (  BlockNode node : block.getCleanSuccessors()) {    boolean cross=true;    for (    BlockNode exitBlock : exits) {      boolean p=isPathExists(exitBlock,node);      if (!p) {        cross=false;        break;      }    }    if (cross) {      return node;    }    if (!visited.contains(node)) {      BlockNode res=traverseMonitorExitsCross(node,exits,visited);      if (res != null) {        return res;      }    }  }  return null;}  }
class C{  public Expression[] makeExpressions(StatsCollector[] statsCollectors){  Expression[] expressions=new Expression[expressionStrings.length];  for (int count=0; count < expressionStrings.length; count++) {    expressions[count]=ExpressionFactory.create(expressionStrings[count],statsCollectors);  }  return expressions;}  }
class C{  @Deprecated public String sendInvitation(String SID,String username,String message,String domain,String room,String roomtype,String baseurl,String email,String subject,Long room_id){  Long users_id=sessionManagement.checkSession(SID);  Long user_level=userManagement.getUserLevelByID(users_id);  return invitationManagement.sendInvitionLink(user_level,username,message,domain,room,roomtype,baseurl,email,usersDao.getUser(users_id).getAdresses().getEmail(),subject,room_id,null,null);}  }
class C{  public static void logShutdown(final Logger logger,final long endTime){  logger.logMessage(Level.INFO,"Consumer initiates SHUTDOWN\t" + Time.toClock(endTime));}  }
class C{  public void overwrite(Game game,boolean ignoreHashes){  ClassicGame gameToOverwrite=(ClassicGame)game;  gameToOverwrite.id=id;  gameToOverwrite.state=state;  gameToOverwrite.pgnHeaderMap=new HashMap<PgnHeader,String>(pgnHeaderMap);  gameToOverwrite.moves=moves.deepCopy();  gameToOverwrite.halfMoveCount=halfMoveCount;  System.arraycopy(colorBB,0,gameToOverwrite.colorBB,0,gameToOverwrite.colorBB.length);  for (int i=0; i < pieceBB.length; i++) {    System.arraycopy(pieceBB[i],0,gameToOverwrite.pieceBB[i],0,pieceBB[i].length);  }  System.arraycopy(board,0,gameToOverwrite.board,0,board.length);  gameToOverwrite.occupiedBB=occupiedBB;  gameToOverwrite.emptyBB=emptyBB;  System.arraycopy(castling,0,gameToOverwrite.castling,0,castling.length);  gameToOverwrite.initialEpSquare=initialEpSquare;  gameToOverwrite.epSquare=epSquare;  gameToOverwrite.colorToMove=colorToMove;  gameToOverwrite.fiftyMoveCount=fiftyMoveCount;  for (int i=0; i < pieceCounts.length; i++) {    System.arraycopy(pieceCounts[i],0,gameToOverwrite.pieceCounts[i],0,pieceCounts[i].length);  }  for (int i=0; i < dropCounts.length; i++) {    System.arraycopy(dropCounts[i],0,gameToOverwrite.dropCounts[i],0,dropCounts[i].length);  }  gameToOverwrite.zobristPositionHash=zobristPositionHash;  gameToOverwrite.zobristGameHash=zobristGameHash;  if (!ignoreHashes) {    System.arraycopy(moveRepHash,0,gameToOverwrite.moveRepHash,0,moveRepHash.length);  }}  }
class C{  public void requestFirstTunerDisplay(){  if (mTuners.size() > 0) {    broadcast(new TunerEvent(mTuners.get(0),Event.REQUEST_MAIN_SPECTRAL_DISPLAY));  }}  }
class C{  public JUnitTestCarvedChromosomeFactory(ChromosomeFactory<TestChromosome> defaultFactory) throws IllegalStateException {  this.defaultFactory=defaultFactory;  readTestCases();}  }
class C{  protected boolean isDisplayShowTitleEnabled(){  return true;}  }
class C{  public static void main(String[] args) throws Exception {  ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext("org/apache/ignite/loadtests/capacity/spring-capacity-cache.xml");  IgniteConfiguration cfg=(IgniteConfiguration)ctx.getBean("grid.cfg");  try (Ignite g=G.start(cfg)){    IgniteCache<Integer,Integer> c=g.cache(null);    long init=mem.getHeapMemoryUsage().getUsed();    printHeap(init);    int cnt=0;    for (; cnt < 3000000; cnt++) {      c.put(cnt,cnt);      if (cnt % 10000 == 0) {        X.println("Stored count: " + cnt);        printHeap(init);        if (cnt > 2100000 && cnt % 100000 == 0)         System.gc();      }    }    System.gc();    Thread.sleep(1000);    printHeap(init);    MemoryUsage heap=mem.getHeapMemoryUsage();    long used=heap.getUsed() - init;    long entrySize=cnt > 0 ? used / cnt : 0;    X.println("Average entry size: " + entrySize);  } }  }
class C{  @Override public boolean isDateAllowed(LocalDate date){  if ((date.getDayOfMonth() >= 7) && (date.getDayOfMonth() <= 11)) {    return false;  }  if ((date.getDayOfWeek() == DayOfWeek.SATURDAY) && ((date.getDayOfMonth() % 2) == 1)) {    return false;  }  return true;}  }
class C{  private void callSetter(Object target,PropertyDescriptor prop,Object value) throws SQLException {  Method setter=prop.getWriteMethod();  if (setter == null) {    return;  }  Class[] params=setter.getParameterTypes();  try {    if (value != null) {      if (value instanceof java.util.Date) {        if (params[0].getName().equals("java.sql.Date")) {          value=new java.sql.Date(((java.util.Date)value).getTime());        } else         if (params[0].getName().equals("java.sql.Time")) {          value=new java.sql.Time(((java.util.Date)value).getTime());        } else         if (params[0].getName().equals("java.sql.Timestamp")) {          value=new java.sql.Timestamp(((java.util.Date)value).getTime());        }      }    }    if (this.isCompatibleType(value,params[0])) {      setter.invoke(target,new Object[]{value});    } else {      throw new SQLException("Cannot set " + prop.getName() + ": incompatible types.");    }  } catch (  IllegalArgumentException|IllegalAccessException|InvocationTargetException e) {    throw new SQLException("Cannot set " + prop.getName() + ": "+ e.getMessage());  }}  }
class C{  public byte[] createPDFData(){  try {    if (m_layout == null)     layout();    return Document.getPDFAsArray(m_layout.getPageable(false));  } catch (  Exception e) {    log.log(Level.SEVERE,"PDF",e);  }  return null;}  }
class C{  public synchronized void incrementSemaphoreTry(){  boolean acquired=mutex.tryAcquire();  if (!acquired) {    System.out.println("tryAcquire failed");    try {      mutex.acquire();      this.total++;    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    } finally {      mutex.release();    }  } else {    this.total++;    mutex.release();  }}  }
class C{  public static String osJdkString(){  return osJdkStr;}  }
class C{  public double readDouble(){  return scanner.nextDouble();}  }
class C{  @Override protected void run(final TestCase test){  startTest(test);  endTest(test);}  }
class C{  public BinaryIn(URL url){  try {    URLConnection site=url.openConnection();    InputStream is=site.getInputStream();    in=new BufferedInputStream(is);    fillBuffer();  } catch (  IOException ioe) {    System.err.println("Could not open " + url);  }}  }
class C{  public void add(SPKIData spkidata){  this.constructionElement.appendChild(spkidata.getElement());  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  private void closeAttachedEvent(long ov){  long hEvent=UNSAFE.getAddress(ov + OFFSETOF_HEVENT);  if (hEvent != 0 && hEvent != INVALID_HANDLE_VALUE)   CloseHandle(hEvent);}  }
class C{  static void resetPeakUsage(){  throw new UnimplementedError();}  }
class C{  private void deleteAckedMessages(){  for (  String id : this.ackedMessageIds) {    if (this.hasMessage(id) && !isSending(id)) {      this.deleteMessage(id,false);    }  }}  }
class C{  @Override protected AsyncHttpRequest newAsyncHttpRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,ResponseHandlerInterface responseHandler,Context context){  return new AutoHttpRequest(client,httpContext,uriRequest,responseHandler,getHttpConfig());}  }
class C{  private Map<String,PluginDescriptor> filter(Pattern excludes,Pattern includes,Map<String,PluginDescriptor> plugins){  Map<String,PluginDescriptor> map=new HashMap<String,PluginDescriptor>();  if (plugins == null) {    return map;  }  for (  PluginDescriptor plugin : plugins.values()) {    if (plugin == null) {      continue;    }    String id=plugin.getPluginId();    if (id == null) {      continue;    }    if (!includes.matcher(id).matches()) {      LOG.debug("not including: " + id);      continue;    }    if (excludes.matcher(id).matches()) {      LOG.debug("excluding: " + id);      continue;    }    map.put(plugin.getPluginId(),plugin);  }  return map;}  }
class C{  public Object fromXML(Document document) throws Exception {  if (!document.getDocumentElement().getNodeName().equals(ROOT_NODE)) {    throw new Exception("Expected '" + ROOT_NODE + "' as root element, but found '"+ document.getDocumentElement().getNodeName()+ "'!");  }  m_Document.setDocument(readPreProcess(document));  checkVersion();  return readPostProcess(invokeReadFromXML(m_Document.getDocument().getDocumentElement()));}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){  int id=item.getItemId();  if (id == R.id.action_settings) {    startActivity(new Intent(this,SettingsActivity.class));    return true;  }  return super.onOptionsItemSelected(item);}  }
class C{  public static ToolboxCategory fromXml(XmlPullParser parser,BlockFactory factory) throws IOException, XmlPullParserException {  ToolboxCategory result=new ToolboxCategory();  result.mCategoryName=parser.getAttributeValue("","name");  result.mCustomType=parser.getAttributeValue("","custom");  result.mIsVariableCategory=result.mCustomType != null && TextUtils.equals("VARIABLE",result.mCustomType.toUpperCase());  result.mIsFunctionCategory=result.mCustomType != null && TextUtils.equals("FUNCTION",result.mCustomType.toUpperCase());  String colourAttr=parser.getAttributeValue("","colour");  if (!TextUtils.isEmpty(colourAttr)) {    try {      result.mColor=ColorUtils.parseColor(colourAttr,TEMP_IO_THREAD_FLOAT_ARRAY);    } catch (    ParseException e) {      Log.w(TAG,"Invalid toolbox category colour \"" + colourAttr + "\"");    }  }  int eventType=parser.next();  while (eventType != XmlPullParser.END_DOCUMENT) {    String tagname=parser.getName();switch (eventType) {case XmlPullParser.START_TAG:      if (parser.getName().equalsIgnoreCase("category")) {        result.addSubcategory(ToolboxCategory.fromXml(parser,factory));      } else       if (parser.getName().equalsIgnoreCase("block")) {        result.addBlock(factory.fromXml(parser));      } else       if (parser.getName().equalsIgnoreCase("shadow")) {        throw new IllegalArgumentException("Shadow blocks may not be top level toolbox blocks.");      }    break;case XmlPullParser.END_TAG:  if (tagname.equalsIgnoreCase("category")) {    return result;  }break;default :break;}eventType=parser.next();}return result;}  }
class C{  private void heapifyUp(int twopos,Comparable<Object> cur){  while (twopos > 0) {    final int parent=(twopos - 1) >>> 1;    Comparable<Object> par=twoheap[parent];    if (cur.compareTo(par) <= 0) {      break;    }    twoheap[twopos]=par;    twopos=parent;  }  twoheap[twopos]=cur;}  }
class C{  public static CompactSketch aNotB(CompactSketch skA,CompactSketch skB){  final short seedHash=checkOrderedAndSeedHash(skA,skB);  long thetaLong=Math.min(skA.getThetaLong(),skB.getThetaLong());  int indexA=0;  int indexB=0;  int outCount=0;  long[] cacheA=skA.getCache();  long[] cacheB=skB.getCache();  long[] outCache=new long[cacheA.length];  while (indexA < cacheA.length) {    long hashA=cacheA[indexA];    long hashB=(indexB >= cacheB.length) ? thetaLong : cacheB[indexB];    if (hashA >= thetaLong) {      break;    }    if (hashA == hashB) {      ++indexA;      ++indexB;    } else     if (hashA < hashB) {      outCache[outCount++]=hashA;      ++indexA;    } else {      ++indexB;    }  }  boolean empty=skA.isEmpty();  return new HeapCompactOrderedSketch(Arrays.copyOf(outCache,outCount),empty,seedHash,outCount,thetaLong);}  }
class C{  public void addDimensionToName(int dim,String name){  if (dim != -1 && dim != 1)   dimToName.put(dim,name); else   FMLLog.log("RitualRegistry",Level.ERROR,"You're not allowed to register that Dimension ID: %d",dim);}  }
class C{  public static float ccpLengthSQ(final CGPoint v){  return ccpDot(v,v);}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public static RegExpExpression notRegexp(Expression left,Expression right){  return new RegExpExpression(left,right,true);}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  return inputReader.read(b,off,len);}  }
class C{  void clearBridgeSecret(){  expectedBridgeSecret=-1;}  }
class C{  public double coefficientOfDetermination(){  return 1.0 - (ssr / sst);}  }
class C{  private boolean canPressBackButton(){  return getFragmentManager().getBackStackEntryCount() > 1;}  }
class C{  public String format(String zkUrl){  List<ZKAddress> addressList=parser.validateZkUrl(zkUrl);  StringBuilder builder=new StringBuilder();  addressList.forEach(null);  builder.deleteCharAt(0);  String lastPath=addressList.get(addressList.size() - 1).getZkNode();  if (null == lastPath || lastPath.equals("") || lastPath.equals("/")) {    lastPath=DEFAULT_MESOS_PATH;  }  builder.append(lastPath);  builder.insert(0,ZKAddress.ZK_PREFIX);  return builder.toString();}  }
class C{  @Override public void updateNCharacterStream(String columnLabel,Reader x) throws SQLException {  updateNCharacterStream(columnLabel,x,-1);}  }
class C{  public boolean isSetList_field(){  return this.list_field != null;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:25.734 -0500",hash_original_method="F067C038C49D9731F81C40BA311D56BE",hash_generated_method="CE5DDA8376A87F35429A12ECB9E39420") private void flushBuffer() throws IOException {  if (bpos > 0) {    internalWrite(buffer,0,bpos,false);    bpos=0;  }}  }
class C{  public static HashMap<String,String> parseMap(String s){  HashMap<String,String> map=New.hashMap();  for (int i=0, size=s.length(); i < size; ) {    int startKey=i;    i=s.indexOf(':',i);    if (i < 0) {      throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"Not a map: {0}",s);    }    String key=s.substring(startKey,i++);    StringBuilder buff=new StringBuilder();    while (i < size) {      char c=s.charAt(i++);      if (c == ',') {        break;      } else       if (c == '\"') {        while (i < size) {          c=s.charAt(i++);          if (c == '\\') {            if (i == size) {              throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"Not a map: {0}",s);            }            c=s.charAt(i++);          } else           if (c == '\"') {            break;          }          buff.append(c);        }      } else {        buff.append(c);      }    }    map.put(key,buff.toString());  }  return map;}  }
class C{  public static void json(String json){  printer.json(json);}  }
class C{  public void distribute(int start,short remainder,int blockSize,short value){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(remainder <= blockSize);  if (value <= remainder) {    data[start]+=value;  } else {    data[start]+=remainder;    value-=remainder;    start++;    while (value >= blockSize) {      data[start]+=blockSize;      value-=blockSize;      start++;    }    data[start]+=value;  }}  }
class C{  protected Fun(){  throw new RuntimeException("Non instantiable");}  }
class C{  public void testClasspathWar() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/classpath-war/test");  final String expected="Got class!";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public Sphere(Vector3 center,float radius){  this.center=new Vector3(center);  this.radius=radius;}  }
class C{  @RequestMapping(value="/SAML2/Metadata",method=RequestMethod.GET) public void metadataDefaultTenant(Locale locale,Model model,HttpServletResponse response) throws IOException {  logger.info("Welcome to Metadata handler! The client locale is {}, DEFAULT tenant",locale.toString());  metadata(locale,Shared.getDefaultTenant(),model,response);}  }
class C{  public GetURLObjectWrapper(RhinoInterpreter ri,ScriptableObject obj,WindowWrapper ww){  interpreter=ri;  object=obj;  windowWrapper=ww;}  }
class C{  public TweetTimelineListAdapter(Context context,Timeline<Tweet> timeline){  this(context,timeline,R.style.tw__TweetLightStyle,null);}  }
class C{  public void makeVisible(){  TreeStateNode parent=(TreeStateNode)getParent();  if (parent != null)   parent.expandParentAndReceiver();}  }
class C{  public final static byte[] toByteArray(final String value){  if (value == null) {    return new byte[0];  }  try {    return Base64.decodeBase64(value.getBytes("US-ASCII"));  } catch (  final UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  public Map<String,Integer> statisticsEnd(){  HashMap<String,Integer> map=New.hashMap();  FileStore fs=store.getFileStore();  int reads=fs == null ? 0 : (int)(fs.getReadCount() - statisticsStart);  map.put("reads",reads);  return map;}  }
class C{  public static int EADV(){  return 68;}  }
class C{  @Override public PdfObject duplicate(){  final MKObject copy=new MKObject();  final int sourceTP=this.getInt(PdfDictionary.TP);  if (sourceTP != -1) {    copy.setIntNumber(PdfDictionary.TP,sourceTP);  }  final int sourceR=this.getInt(PdfDictionary.R);  copy.setIntNumber(PdfDictionary.R,sourceR);  final int[] textStreams={PdfDictionary.AC,PdfDictionary.CA,PdfDictionary.RC};  for (  final int textStream : textStreams) {    final byte[] bytes=this.getTextStreamValueAsByte(textStream);    if (bytes != null) {      copy.setTextStreamValue(textStream,bytes);    }  }  final int[] floatStreams={PdfDictionary.BC,PdfDictionary.BG};  for (  final int floatStream : floatStreams) {    final float[] floats=this.getFloatArray(floatStream);    if (floats != null) {      copy.setFloatArray(floatStream,floats);    }  }  if (this.I != null) {    copy.I=I.duplicate();  }  return copy;}  }
class C{  public static void sendDebugLog(Context context){  if (BuildConfig.DEBUG) {    StringBuilder log=new StringBuilder();    PackageManager pm=context.getPackageManager();    String packageName=context.getPackageName();    String versionName;    try {      PackageInfo info=pm.getPackageInfo(packageName,0);      versionName=info.versionName;    } catch (    PackageManager.NameNotFoundException e) {      versionName="??";    }    log.append("App version:\n").append(versionName).append("\n\n");    log.append("Device fingerprint:\n").append(Build.FINGERPRINT).append("\n\n");    try {      String[] logcatCmd=new String[]{"logcat","-v","threadtime","-d"};      Process process=Runtime.getRuntime().exec(logcatCmd);      BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(process.getInputStream()));      String line;      while ((line=bufferedReader.readLine()) != null) {        log.append(line);        log.append("\n");      }      File logsDir=context.getCacheDir();      if (logsDir == null) {        throw new IOException("Cache directory inaccessible");      }      logsDir=new File(logsDir,"logs");      deleteRecursive(logsDir);      logsDir.mkdirs();      SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMdd_HHmm");      sdf.setTimeZone(TimeZone.getTimeZone("UTC"));      String fileName="DashClock_log_" + sdf.format(new Date()) + ".txt";      File logFile=new File(logsDir,fileName);      BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(logFile)));      writer.write(log.toString());      writer.close();      Intent sendIntent=new Intent(Intent.ACTION_SENDTO).setData(Uri.parse("mailto:dashclock+support@gmail.com")).putExtra(Intent.EXTRA_SUBJECT,"DashClock debug log").putExtra(Intent.EXTRA_STREAM,Uri.parse("content://" + LogAttachmentProvider.AUTHORITY + "/"+ fileName));      context.startActivity(Intent.createChooser(sendIntent,context.getString(R.string.send_logs_chooser_title)));    } catch (    IOException e) {      LOGE(TAG,"Error accessing or sending app's logs.",e);      Toast.makeText(context,"Error accessing or sending app's logs.",Toast.LENGTH_SHORT).show();    }  }}  }
class C{  public String outputString(DocType doctype){  StringWriter out=new StringWriter();  try {    output(doctype,out);  } catch (  IOException e) {  }  return out.toString();}  }
class C{  public void addShapePainter(ShapePainter shapePainter){  if (shapePainter == null) {    return;  }  if (shape != shapePainter.getShape()) {    shapePainter.setShape(shape);  }  if (painters == null) {    painters=new ShapePainter[2];  }  if (count == painters.length) {    ShapePainter[] newPainters=new ShapePainter[count + count / 2 + 1];    System.arraycopy(painters,0,newPainters,0,count);    painters=newPainters;  }  painters[count++]=shapePainter;}  }
class C{  public void updateTrackPoint(Point p){  int newLocX=Math.min(p.x,this.anchor.x);  int newLocY=Math.min(p.y,this.anchor.y);  int deltaX=Math.abs(p.x - this.anchor.x);  int deltaY=Math.abs(p.y - this.anchor.y);  setLocation(newLocX,newLocY);  setSize(deltaX,deltaY);}  }
class C{  public T image(String url,boolean memCache,boolean fileCache,int targetWidth,int resId,BitmapAjaxCallback callback){  callback.targetWidth(targetWidth).fallback(resId).url(url).memCache(memCache).fileCache(fileCache);  return image(callback);}  }
class C{  public vec3 cross(vec3 a,vec3 b){  float ax=a.m[0];  float ay=a.m[1];  float az=a.m[2];  float bx=b.m[0];  float by=b.m[1];  float bz=b.m[2];  this.m[0]=ay * bz - az * by;  this.m[1]=az * bx - ax * bz;  this.m[2]=ax * by - ay * bx;  return this;}  }
class C{  private void paintBackgroundSolid(Graphics2D g,JComponent c,int x,int y,int width,int height){  Color color=c.getBackground();  if (type == CommonControlState.DISABLED) {    color=new Color(color.getRed(),color.getGreen(),color.getBlue(),0x80);  }  Shape s=shapeGenerator.createRoundRectangle(x - 2,y - 2,width + 4,height + 4,CornerSize.BORDER);  g.setPaint(color);  g.fill(s);  if (isPaintLineSeperators(c)) {    paintLineSeparator(g,c,width,height);  }}  }
class C{  public Hours toStandardHours(){  return Hours.hours(getValue() / DateTimeConstants.SECONDS_PER_HOUR);}  }
class C{  public void waitAtLeast(int delay){  long start=System.currentTimeMillis();  while (System.currentTimeMillis() < start + delay) {    awtSleep(20);  }}  }
class C{  void updateDayCounter(final long newMessages){  GregorianCalendar cal=new GregorianCalendar();  int currentIndex=cal.get(Calendar.HOUR_OF_DAY);  boolean bUpdate=false;  for (int i=0; i <= currentIndex; i++) {    if (counters[i] > -1) {      bUpdate=true;    }    if (bUpdate == true) {      if (counters[i] == -1) {        counters[i]=0;      }    }  }  counters[currentIndex]+=newMessages;}  }
class C{  public AdHocCommandNote(Type type,String value){  this.type=type;  this.value=value;}  }
class C{  public static double simpleEMD(double[] d1,double[] d2){  assert (d1.length == d2.length);  double sum=0d;  double m1=0, m2=0;  for (int i=0; i < d1.length; i++) {    m1+=d1[i];    m2+=d2[i];    sum+=Math.abs(m1 - m2);  }  return sum;}  }
class C{  public InfoTool(){  this(CursorTool.ANY_BUTTON);}  }
class C{  @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application){  return application.sources(CustomerApp.class);}  }
class C{  private static long _genetatorTransactionId(PaymentFile paymentFile){  if (Validator.isNotNull(paymentFile)) {    return paymentFile.getDossierId();  } else {    return 0l;  }}  }
class C{  private void addHandler(PacketHandler handler){  handlers.put(handler.getType(),handler);}  }
class C{  public OnUpdateClause addAssignment(Expression expression){  assignments.add(new Assignment(expression));  return this;}  }
class C{  public void startAutoScroll(int delayTimeInMills){  isAutoScroll=true;  sendScrollMessage(delayTimeInMills);}  }
class C{  public IntLiteral createIntLiteral(){  IntLiteralImpl intLiteral=new IntLiteralImpl();  return intLiteral;}  }
class C{  @Override public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals("progress")) {    int progress=(Integer)evt.getNewValue();    progressBar.setValue(progress);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__REWIRED_TARGET:    return basicSetRewiredTarget(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void writeMessageNoTag(final MessageNano value) throws IOException {  writeRawVarint32(value.getCachedSize());  value.writeTo(this);}  }
class C{  public final void normalize(){  double mag=magnitude();  if (mag > MathUtils.EPS) {    double invMag=1.0 / mag;    for (int i=0; i < length; i++) {      values[i]=values[i] * invMag;    }  }}  }
class C{  private void enableStrongerDefaults(Socket socket){  if (isSecure(socket)) {    SSLSocket sslSocket=(SSLSocket)socket;    readSSLParameters(sslSocket);    if (mEnableStongerDefaultProtocalVersion && mProtocols != null) {      sslSocket.setEnabledProtocols(mProtocols);    }    if (mEnableStongerDefaultSSLCipherSuite && mCipherSuites != null) {      sslSocket.setEnabledCipherSuites(mCipherSuites);    }  }}  }
class C{  public void removeFromAllPerspectives(final Dockable dockable){  context.unregisterDockable(dockable);  removeFromInvisiblePerspectives(dockable);}  }
class C{  public EipEditPlugin(){  super(new ResourceLocator[]{});}  }
class C{  @Override public boolean isShown(){  return isShown;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void addAttribute(String name,String value){}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  protected FieldID createFieldID(int slot,Element e){  FieldID f=mFIDs.get(slot);  if (f != null) {    return f;  }  int id=mRS.nScriptFieldIDCreate(getID(mRS),slot);  if (id == 0) {    throw new RSDriverException("Failed to create FieldID");  }  f=new FieldID(id,mRS,this,slot);  mFIDs.put(slot,f);  return f;}  }
class C{  public String toString(){  return m_strErr;}  }
class C{  public void compileStmnt(String src) throws CompileError {  Parser p=new Parser(new Lex(src));  SymbolTable stb=new SymbolTable(stable);  while (p.hasMore()) {    Stmnt s=p.parseStatement(stb);    if (s != null)     s.accept(gen);  }}  }
class C{  public synchronized void start() throws IOException, InterruptedException {  log.info("Starting Zookeeper on port {}",port);  dataDir=Files.createTempDirectory(LocalZKServer.class.getSimpleName());  dataDir.toFile().deleteOnExit();  Properties properties=new Properties();  properties.setProperty("dataDir",dataDir.toAbsolutePath().toString());  properties.setProperty("clientPort",Integer.toString(port));  log.info("ZK config: {}",properties);  QuorumPeerConfig quorumConfig=new QuorumPeerConfig();  try {    quorumConfig.parseProperties(properties);  } catch (  QuorumPeerConfig.ConfigException e) {    throw new IllegalArgumentException(e);  }  purgeManager=new DatadirCleanupManager(quorumConfig.getDataDir(),quorumConfig.getDataLogDir(),quorumConfig.getSnapRetainCount(),quorumConfig.getPurgeInterval());  purgeManager.start();  ServerConfig serverConfig=new ServerConfig();  serverConfig.readFrom(quorumConfig);  zkServer=new ZooKeeperServer();  zkServer.setTickTime(serverConfig.getTickTime());  zkServer.setMinSessionTimeout(serverConfig.getMinSessionTimeout());  zkServer.setMaxSessionTimeout(serverConfig.getMaxSessionTimeout());  transactionLog=new FileTxnSnapLog(new File(serverConfig.getDataLogDir().toString()),new File(serverConfig.getDataDir().toString()));  zkServer.setTxnLogFactory(transactionLog);  connectionFactory=ServerCnxnFactory.createFactory();  connectionFactory.configure(serverConfig.getClientPortAddress(),serverConfig.getMaxClientCnxns());  connectionFactory.startup(zkServer);}  }
class C{  @Override public String toString(){  return "nrounds=" + getNRounds() + ", fontierSize="+ getFrontierSize()+ ", ms="+ TimeUnit.NANOSECONDS.toMillis(getElapsedNanos())+ ", edges="+ getNEdges()+ ", teps="+ GASUtil.getTEPS(getNEdges(),getElapsedNanos());}  }
class C{  public int indexOfAnyBut(final char[] c,final int from){  final int n=c.length;  return indexOfAnyBut(c,n,from < 0 ? 0 : from,buildFilter(c,n));}  }
class C{  public boolean isSelected(){  Object oo=get_Value(COLUMNNAME_IsSelected);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static File boardsDir(){  lock.readLock().lock();  try {    return (boards_dir != null) ? boards_dir : new File(dataDir(),DEFAULT_DIR_NAME_BOARDS);  }  finally {    lock.readLock().unlock();  }}  }
class C{  public RemoteSageFile(String hostname,String name,String transcodeMode) throws IOException {  this.hostname=hostname;  remoteFilename=name;  this.transcodeMode=transcodeMode;  this.readonly=true;  this.forceActive=false;  this.uploadId=-1;  connect();}  }
class C{  public UCrop withMaxResultSize(@IntRange(from=100) int width,@IntRange(from=100) int height){  mCropOptionsBundle.putBoolean(EXTRA_MAX_SIZE_SET,true);  mCropOptionsBundle.putInt(EXTRA_MAX_SIZE_X,width);  mCropOptionsBundle.putInt(EXTRA_MAX_SIZE_Y,height);  return this;}  }
class C{  public boolean isReadableEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  return node.isReadable(var);}  }
class C{  public synchronized boolean wasReleased(){  return this.released;}  }
class C{  private JDlgChangePassword(java.awt.Frame parent,boolean modal){  super(parent,modal);}  }
class C{  public final AlertDialog shareText(CharSequence text,CharSequence type){  Intent intent=new Intent();  intent.addCategory(Intent.CATEGORY_DEFAULT);  intent.setAction(BS_PACKAGE + ".ENCODE");  intent.putExtra("ENCODE_TYPE",type);  intent.putExtra("ENCODE_DATA",text);  String targetAppPackage=findTargetAppPackage(intent);  if (targetAppPackage == null) {    return showDownloadDialog();  }  intent.setPackage(targetAppPackage);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  attachMoreExtras(intent);  if (fragment == null) {    activity.startActivity(intent);  } else {    fragment.startActivity(intent);  }  return null;}  }
class C{  public void resize(int width,int height){  this.width=width;  this.height=height;  axes.resize(width,height);  setData();  pickX[0]=(int)((valueX - axes.xMin) * axes.getXScale()) + axes.leftMargin;  pickX[1]=pickX[0];}  }
class C{  public boolean isSetNodeStore(){  return this.nodeStore != null;}  }
class C{  public List<String> extractURLs(final String text){  if (text == null || text.length() == 0)   return Collections.emptyList();  final ArrayList<String> urls=new ArrayList<String>();  for (  final Entity entity : extractURLsWithIndices(text)) {    urls.add(entity.value);  }  return urls;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 14:42:09.077 -0500",hash_original_method="CF4E04D9BE7BBED84D489834E5A66249",hash_generated_method="EEBC4270709A81BAEA5E9378F3C6027B") @DSVerified @DSSafe(DSCat.SAFE_LIST) public IdentityHashMap(){  this(DEFAULT_MAX_SIZE);}  }
class C{  private void cleanKerberosCred() throws LoginException {  try {    if (kerbTicket != null)     kerbTicket.destroy();    if (kerbKeys != null) {      for (int i=0; i < kerbKeys.length; i++) {        kerbKeys[i].destroy();      }    }  } catch (  DestroyFailedException e) {    throw new LoginException("Destroy Failed on Kerberos Private Credentials");  }  kerbTicket=null;  kerbKeys=null;  kerbClientPrinc=null;}  }
class C{  public void writeFile(final String filename) throws UncheckedIOException {  writeFileV1(filename);}  }
class C{  public HttpConnectionAdapter(final HttpConnection connection){  super(connection.getHost(),connection.getPort(),connection.getProtocol());  wrappedConnection=connection;}  }
class C{  public final void addModelListener(final VisionWorldModelListener listener){  listenerList.add(VisionWorldModelListener.class,listener);}  }
class C{  public final void testRead01() throws IOException {  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      for (int i=0; i < MY_MESSAGE_LEN; i++) {        assertTrue("retval",((byte)dis.read() == myMessage[i]));      }      assertTrue("update",Arrays.equals(dis.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[ii])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public boolean isImageInitializationFailed(){  return this.imageInitializationFailed;}  }
class C{  public void openFileConnection(File file){  closeConnection();  try {    nmeaReader=NmeaReaderFactory.instance().createFileReader(file);    if (nmeaReader != null) {      nmeaReader.addListener(this);      nmeaReader.openStream();    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static void point(double x,double y){  double xs=scaleX(x);  double ys=scaleY(y);  double r=penRadius;  float scaledPenRadius=(float)(r * DEFAULT_SIZE);  if (scaledPenRadius <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - scaledPenRadius / 2,ys - scaledPenRadius / 2,scaledPenRadius,scaledPenRadius));  draw();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case FunctionblockPackage.FUNCTIONBLOCK_MODEL__NAME:    setName((String)newValue);  return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__NAMESPACE:setNamespace((String)newValue);return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__VERSION:setVersion((String)newValue);return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__REFERENCES:getReferences().clear();getReferences().addAll((Collection<? extends ModelReference>)newValue);return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__DESCRIPTION:setDescription((String)newValue);return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__DISPLAYNAME:setDisplayname((String)newValue);return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__CATEGORY:setCategory((String)newValue);return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__FUNCTIONBLOCK:setFunctionblock((FunctionBlock)newValue);return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__ENTITIES:getEntities().clear();getEntities().addAll((Collection<? extends Entity>)newValue);return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__ENUMS:getEnums().clear();getEnums().addAll((Collection<? extends org.eclipse.vorto.core.api.model.datatype.Enum>)newValue);return;case FunctionblockPackage.FUNCTIONBLOCK_MODEL__SUPER_TYPE:setSuperType((FunctionblockModel)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  void execute(NodeTaskContext context,NodeTaskReporter taskReporter){  if (!taskQueue.isEmpty()) {    NodeTask task=taskQueue.poll();    task.execute(context,taskReporter);  } else {    listener.onSuccess();  }}  }
class C{  private void resumeContinuousAFAfterDelay(int millis){  mCameraHandler.removeCallbacks(mReturnToContinuousAFRunnable);  mCameraHandler.postDelayed(mReturnToContinuousAFRunnable,millis);}  }
class C{  private static Image createImage(final String mapName){  final Image image=Toolkit.getDefaultToolkit().createImage(mapName);  Util.ensureImageLoaded(image);  return image;}  }
class C{  public void testDecodeAttributeBody() throws StunException {  byte[] attributeValue=new byte[]{};  char offset=0;  char length=0;  xorOnly.decodeAttributeBody(attributeValue,offset,length);}  }
class C{  public static void showMessageDialog(Component parent,String msg,String title,int flags){  if (msg.length() > 60) {    StringBuffer buf=new StringBuffer();    int len=msg.length();    int j=0;    int i;    for (i=0; i < len; i++, j++) {      char c=msg.charAt(i);      buf.append(c);      if (Character.isWhitespace(c)) {        int k;        for (k=i + 1; k < len; k++) {          if (Character.isWhitespace(msg.charAt(k))) {            break;          }        }        if (k < len) {          int nextWordLen=k - i;          if (j + nextWordLen > 60) {            buf.append('\n');            j=0;          }        }      }    }    msg=buf.toString();  }  JOptionPane.showMessageDialog(parent,msg,title,flags);}  }
class C{  public CalendarIntervalTriggerImpl(String name,IntervalUnit intervalUnit,int repeatInterval){  this(name,null,intervalUnit,repeatInterval);}  }
class C{  public void initialize(Language language,String treeTaggerHome,Boolean annotateTokens,Boolean annotateSentences,Boolean annotatePartOfSpeech,Boolean improveGermanSentences){  this.initialize(language,treeTaggerHome,annotateTokens,annotateSentences,annotatePartOfSpeech,improveGermanSentences,null);}  }
class C{  public long avgRate(){  long sum=0L;  for (  Sample s : samples) {    sum+=s.rate();  }  return (long)(sum / (long)samples.size());}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public E poll(){  if (isEmpty()) {    return null;  }  E result=elements[0];  removeAt(0);  return result;}  }
class C{  @Override protected RemoteOperationResult run(OwnCloudClient client){  GetRemoteStatusOperation getStatus=new GetRemoteStatusOperation(mContext);  RemoteOperationResult result=getStatus.execute(client);  if (result.isSuccess()) {    mResultData.mVersion=(OwnCloudVersion)(result.getData().get(0));    mResultData.mIsSslConn=(result.getCode() == ResultCode.OK_SSL);    mResultData.mBaseUrl=normalizeProtocolPrefix(mUrl,mResultData.mIsSslConn);    RemoteOperationResult detectAuthResult=detectAuthorizationMethod(client);    if (detectAuthResult.isSuccess()) {      mResultData.mAuthMethod=(AuthenticationMethod)detectAuthResult.getData().get(0);      ArrayList<Object> data=new ArrayList<>();      data.add(mResultData);      result.setData(data);    } else {      result=detectAuthResult;    }  }  return result;}  }
class C{  @RequestMapping(value="/businessObjectDefinitions/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DEFINITIONS_PUT) public BusinessObjectDefinition updateBusinessObjectDefinition(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@RequestBody BusinessObjectDefinitionUpdateRequest request){  BusinessObjectDefinitionKey businessObjectDefinitionKey=new BusinessObjectDefinitionKey(namespace,businessObjectDefinitionName);  return businessObjectDefinitionService.updateBusinessObjectDefinition(businessObjectDefinitionKey,request);}  }
class C{  private final synchronized Enumeration<PolicyEntry> elements(){  return policyEntries.elements();}  }
class C{  public void displayCoords(DirectPosition2D mapPos){  if (mapPos != null) {    applicationWindow.setStatus(String.format("  %.2f %.2f",mapPos.x,mapPos.y));  }}  }
class C{  public void parse(Map<Element,AnnotatedTypeMirror> atypes,Map<String,Set<AnnotationMirror>> declAnnos){  parse(this.index,atypes,declAnnos);}  }
class C{  public boolean continueExecuting(){  return !this.petPathfinder.noPath() && this.thePet.getDistanceSqToEntity(this.theOwner) > (double)(this.maxDist * this.maxDist);}  }
class C{  public void sendExpirationEvent(LicenseInfoExt licenseInfo,MediaType mediaType) throws CoordinatorClientException, Exception {  if (licenseInfo.isTrialLicense()) {    _log.info("CallHomeEventsFacade will not send expiration event for trial license of type {}",licenseInfo.getLicenseType().toString());    return;  }  licenseInfo.setLastLicenseExpirationDateEventDate(formatCurrentDate());  _log.info("CallHomeEventsFacade::sendExpirationEvent updating coordinator with {} license expiration data",licenseInfo.getLicenseType().toString());  _licenseManager.updateCoordinatorWithLicenseInfo(licenseInfo);  _log.info("CallHomeEventsFacade::sendExpirationEvent sending {} license expiration to SYR",licenseInfo.getLicenseType());  SendExpirationEvent sendExpirationEvent=new SendExpirationEvent(serviceInfo,logSvcPropertiesLoader,mediaType,licenseInfo,coordinator);  sendExpirationEvent.callEMCHome();  auditMgr.recordAuditLog(null,null,"callHome",OperationTypeEnum.SEND_LICENSE_EXPIRED,System.currentTimeMillis(),AuditLogManager.AUDITLOG_SUCCESS,null,licenseInfo.getLicenseType().toString(),licenseInfo.getProductId(),licenseInfo.getModelId(),licenseInfo.getExpirationDate());}  }
class C{  public static double binomial(long n,long k){  if (k < 0)   return 0;  if (k == 0 || k == n)   return 1;  if (k == 1 || k == n - 1)   return n;  if (n > k) {    int max=longFactorials.length + doubleFactorials.length;    if (n < max) {      double n_fac=factorial((int)n);      double k_fac=factorial((int)k);      double n_minus_k_fac=factorial((int)(n - k));      double nk=n_minus_k_fac * k_fac;      if (nk != Double.POSITIVE_INFINITY) {        return n_fac / nk;      }    }    if (k > n / 2)     k=n - k;  }  long a=n - k + 1;  long b=1;  double binomial=1;  for (long i=k; i-- > 0; ) {    binomial*=((double)(a++)) / (b++);  }  return binomial;}  }
class C{  public static DynamicClassLoader create(PathImpl path){  ClassLoader parent=Thread.currentThread().getContextClassLoader();  return create(parent,path);}  }
class C{  @Override public Response put(Entity<?> entity){  clientRequestContext.setMethod(HttpMethod.PUT);  return sendRequest(clientRequestContext);}  }
class C{  public Operation basicGetOperation(){  return operation;}  }
class C{  public void test2() throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00");  setDateFactory("2013-07-10 20:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  CustomerData customerData1=registerCustomer(supplierData);  CustomerData customerData2=registerCustomer(supplierData);  VOServiceDetails srv1=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"srv1");  VOServiceDetails srv2=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"srv2");  updateOperatorRevenueShare(10.0D,srv1.getKey());  updateOperatorRevenueShare(20.0D,srv2.getKey());  subscribe(customerData1.getAdminUser(),"srv1_subscr1",srv1,"2013-08-01 12:00:00","ADMIN");  subscribe(customerData2.getAdminUser(),"srv1_subscr2",srv1,"2013-08-02 12:00:00","ADMIN");  VOSubscriptionDetails subscr3=subscribe(customerData1.getAdminUser(),"srv2_subscr1",srv2,"2013-08-06 16:00:00","ADMIN");  VOServiceDetails upgrService=createAndRegisterCompatibleService(supplierData,TestPriceModel.EXAMPLE_PRORATA_MONTH_ROLES,srv2,"srv2" + "_upgr");  updateOperatorRevenueShare(15.0D,upgrService.getKey());  upgrade(customerData1.getAdminUser(),subscr3,upgrService,"2013-08-08 15:00:00");  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("test2",new TestData(supplierData));}  }
class C{  public static final boolean isForwardMode(byte esmClass){  return isMessagingMode(esmClass,SMPPConstant.ESMCLS_FORWARD_MODE);}  }
class C{  public boolean endsWith(String suffix){  return m_str.endsWith(suffix);}  }
class C{  public boolean isOwn(final String userId,final String dataId,final int dataType){  try {    if (Vote.DATA_TYPE_C_ARTICLE == dataType) {      final JSONObject article=articleRepository.get(dataId);      if (null == article) {        LOGGER.log(Level.ERROR,"Not found article [id={0}] to vote up",dataId);        return false;      }      return article.optString(Article.ARTICLE_AUTHOR_ID).equals(userId);    }    return false;  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,e.getMessage());    return false;  }}  }
class C{  public List build(int opCode){  extractNonCoveredResultNodes(opCode);  return resultPointList;}  }
class C{  public GT_BaseCrop(int aID,String aCropName,String aDiscoveredBy,ItemStack aBaseSeed,int aTier,int aMaxSize,int aGrowthSpeed,int aAfterHarvestSize,int aHarvestSize,int aStatChemical,int aStatFood,int aStatDefensive,int aStatColor,int aStatWeed,String[] aAttributes,Materials aBlock,ItemStack aDrop,ItemStack[] aSpecialDrops){  mName=aCropName;  aID=GT_Config.addIDConfig(ConfigCategories.IDs.crops,mName.replaceAll(" ","_"),aID);  if (aDiscoveredBy != null && !aDiscoveredBy.equals(E))   mDiscoveredBy=aDiscoveredBy;  if (aDrop != null && aID > 0 && aID < 256) {    mDrop=GT_Utility.copy(aDrop);    mSpecialDrops=aSpecialDrops;    mTier=Math.max(1,aTier);    mMaxSize=Math.max(3,aMaxSize);    mHarvestSize=Math.min(Math.max(aHarvestSize,2),mMaxSize);    mAfterHarvestSize=Math.min(Math.max(aAfterHarvestSize,1),mMaxSize - 1);    mStats[0]=aStatChemical;    mStats[1]=aStatFood;    mStats[2]=aStatDefensive;    mStats[3]=aStatColor;    mStats[4]=aStatWeed;    mAttributes=aAttributes;    mBlock=aBlock;    if (GregTech_API.sRecipeFile.get(ConfigCategories.Recipes.crops,aCropName,true)) {      if (!Crops.instance.registerCrop(this,aID))       throw new GT_ItsNotMyFaultException("Make sure the Crop ID is valid!");      if (aBaseSeed != null)       Crops.instance.registerBaseSeed(aBaseSeed,this,1,1,1,1);      sCropList.add(this);    }  }  if (bIc2NeiLoaded) {    try {      Class.forName("speiger.src.crops.api.CropPluginAPI").getMethod("registerCropInfo",Class.forName("speiger.src.crops.api.ICropCardInfo")).invoke(Class.forName("speiger.src.crops.api.CropPluginAPI").getField("instance"),this);    } catch (    IllegalAccessException ex) {      bIc2NeiLoaded=false;    }catch (    IllegalArgumentException ex) {      bIc2NeiLoaded=false;    }catch (    java.lang.reflect.InvocationTargetException ex) {      bIc2NeiLoaded=false;    }catch (    NoSuchFieldException ex) {      bIc2NeiLoaded=false;    }catch (    NoSuchMethodException ex) {      bIc2NeiLoaded=false;    }catch (    SecurityException ex) {      bIc2NeiLoaded=false;    }catch (    ClassNotFoundException ex) {      bIc2NeiLoaded=false;    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  JarDepend(Depend depend,long digest){  _depend=depend;  _isDigestModified=_depend.getDigest() != digest;}  }
class C{  public void addAccessibleSelection(int i){  TreeModel model=JTree.this.getModel();  if (model != null) {    if (i == 0) {      Object[] objPath={model.getRoot()};      if (objPath[0] == null)       return;      TreePath path=new TreePath(objPath);      JTree.this.addSelectionPath(path);    }  }}  }
class C{  public ImageTask createImageTask(String url,int requestWidth,int requestHeight,ImageReuseInfo imageReuseInfo){  ImageTask imageTask=ImageTask.obtain();  if (imageTask == null) {    imageTask=new ImageTask();  }  imageTask.renew().setOriginUrl(url).setRequestSize(requestWidth,requestHeight).setReuseInfo(imageReuseInfo);  return imageTask;}  }
class C{  public static void putPropertyNameModifier(String name,String... fallbackChain){  propertyNameModifiers.put(name,fallbackChain);}  }
class C{  public void addFooterView(View v){  addFooterView(v,null,true);}  }
class C{  private RenameJavaElementDescriptor createRenameDescriptor(IJavaElement javaElement,String newName) throws JavaModelException {  String contributionId;  int elementType=javaElement.getElementType();switch (elementType) {case IJavaElement.JAVA_PROJECT:    contributionId=IJavaRefactorings.RENAME_JAVA_PROJECT;  break;case IJavaElement.PACKAGE_FRAGMENT_ROOT:contributionId=IJavaRefactorings.RENAME_SOURCE_FOLDER;break;case IJavaElement.PACKAGE_FRAGMENT:contributionId=IJavaRefactorings.RENAME_PACKAGE;break;case IJavaElement.COMPILATION_UNIT:contributionId=IJavaRefactorings.RENAME_COMPILATION_UNIT;break;case IJavaElement.TYPE:contributionId=IJavaRefactorings.RENAME_TYPE;break;case IJavaElement.METHOD:final IMethod method=(IMethod)javaElement;if (method.isConstructor()) return createRenameDescriptor(method.getDeclaringType(),newName); else contributionId=IJavaRefactorings.RENAME_METHOD;break;case IJavaElement.FIELD:IField field=(IField)javaElement;if (field.isEnumConstant()) contributionId=IJavaRefactorings.RENAME_ENUM_CONSTANT; else contributionId=IJavaRefactorings.RENAME_FIELD;break;case IJavaElement.TYPE_PARAMETER:contributionId=IJavaRefactorings.RENAME_TYPE_PARAMETER;break;case IJavaElement.LOCAL_VARIABLE:contributionId=IJavaRefactorings.RENAME_LOCAL_VARIABLE;break;default :return null;}RenameJavaElementDescriptor descriptor=(RenameJavaElementDescriptor)RefactoringCore.getRefactoringContribution(contributionId).createDescriptor();descriptor.setJavaElement(javaElement);descriptor.setNewName(newName);if (elementType != IJavaElement.PACKAGE_FRAGMENT_ROOT) descriptor.setUpdateReferences(true);switch (elementType) {case IJavaElement.METHOD:case IJavaElement.FIELD:descriptor.setDeprecateDelegate(false);descriptor.setKeepOriginal(false);}switch (elementType) {case IJavaElement.TYPE:descriptor.setUpdateSimilarDeclarations(false);int strategy;try {strategy=1;} catch (NumberFormatException e) {strategy=RenamingNameSuggestor.STRATEGY_EXACT;}descriptor.setMatchStrategy(strategy);}switch (elementType) {case IJavaElement.PACKAGE_FRAGMENT:descriptor.setUpdateHierarchy(true);}switch (elementType) {case IJavaElement.PACKAGE_FRAGMENT:case IJavaElement.TYPE:String fileNamePatterns="*";if (fileNamePatterns != null && fileNamePatterns.length() != 0) {descriptor.setFileNamePatterns(fileNamePatterns);boolean updateQualifiedNames=false;descriptor.setUpdateQualifiedNames(updateQualifiedNames);}}switch (elementType) {case IJavaElement.PACKAGE_FRAGMENT:case IJavaElement.TYPE:case IJavaElement.FIELD:boolean updateTextualOccurrences=false;descriptor.setUpdateTextualOccurrences(updateTextualOccurrences);}switch (elementType) {case IJavaElement.FIELD:descriptor.setRenameGetters(false);descriptor.setRenameSetters(false);}return descriptor;}  }
class C{  protected J3DGeo create(double superX,double superY,double superZ){  return new J3DGeo(superX,superZ,-superY);}  }
class C{  public JPopupMenu createPopupMenu(){  return createPopupMenu(getAllSelectedLines());}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  private static void ensureDbTablesAreCreated(final Connection conn){synchronized (s_dbSetupLock) {    try {      if (s_areDBTablesCreated) {        return;      }      final ResultSet rs=conn.getMetaData().getTables(null,null,null,null);      final List<String> existing=new ArrayList<>();      while (rs.next()) {        existing.add(rs.getString("TABLE_NAME").toUpperCase());      }      rs.close();      if (!existing.contains("TA_USERS")) {        final Statement s=conn.createStatement();        s.execute("create table ta_users" + "(" + "userName varchar(40) NOT NULL PRIMARY KEY, "+ "password varchar(40) NOT NULL, "+ "email varchar(40) NOT NULL, "+ "joined timestamp NOT NULL, "+ "lastLogin timestamp NOT NULL, "+ "admin integer NOT NULL "+ ")");        s.close();      }      if (!existing.contains("BANNED_USERNAMES")) {        final Statement s=conn.createStatement();        s.execute("create table banned_usernames" + "(" + "username varchar(40) NOT NULL PRIMARY KEY, "+ "ban_till timestamp  "+ ")");        s.close();      }      if (!existing.contains("BANNED_IPS")) {        final Statement s=conn.createStatement();        s.execute("create table banned_ips" + "(" + "ip varchar(40) NOT NULL PRIMARY KEY, "+ "ban_till timestamp  "+ ")");        s.close();      }      if (!existing.contains("BANNED_MACS")) {        final Statement s=conn.createStatement();        s.execute("create table banned_macs" + "(" + "mac varchar(40) NOT NULL PRIMARY KEY, "+ "ban_till timestamp  "+ ")");        s.close();      }      if (!existing.contains("MUTED_USERNAMES")) {        final Statement s=conn.createStatement();        s.execute("create table muted_usernames" + "(" + "username varchar(40) NOT NULL PRIMARY KEY, "+ "mute_till timestamp  "+ ")");        s.close();      }      if (!existing.contains("MUTED_IPS")) {        final Statement s=conn.createStatement();        s.execute("create table muted_ips" + "(" + "ip varchar(40) NOT NULL PRIMARY KEY, "+ "mute_till timestamp  "+ ")");        s.close();      }      if (!existing.contains("MUTED_MACS")) {        final Statement s=conn.createStatement();        s.execute("create table muted_macs" + "(" + "mac varchar(40) NOT NULL PRIMARY KEY, "+ "mute_till timestamp  "+ ")");        s.close();      }      if (!existing.contains("BAD_WORDS")) {        final Statement s=conn.createStatement();        s.execute("create table bad_words" + "(" + "word varchar(40) NOT NULL PRIMARY KEY "+ ")");        s.close();      }      s_areDBTablesCreated=true;    } catch (    final SQLException sqle) {      try {        conn.close();      } catch (      final SQLException e) {      }      s_logger.log(Level.SEVERE,sqle.getMessage(),sqle);      throw new IllegalStateException("Could not create tables");    }  }}  }
class C{  public String globalInfo(){  return "BayesNetEstimator is the base class for estimating the " + "conditional probability tables of a Bayes network once the " + "structure has been learned.";}  }
class C{  private void checkUnconditionalDerefDatabase(Location location,ValueNumberFrame vnaFrame,UnconditionalValueDerefSet fact) throws DataflowAnalysisException {  ConstantPoolGen constantPool=methodGen.getConstantPool();  for (  ValueNumber vn : checkUnconditionalDerefDatabase(location,vnaFrame,constantPool,invDataflow.getFactAtLocation(location),typeDataflow)) {    fact.addDeref(vn,location);  }}  }
class C{  public Rational divide(Rational secondRational){  long n=r[0] * secondRational.getDenominator();  long d=r[1] * secondRational.getNumerator();  return new Rational(n,d);}  }
class C{  public SatelliteBase removeSatellite(long satalliteId){  SatelliteBase satallite=satallites.remove(satalliteId);  tickingSatallites.remove(satalliteId);  return satallite;}  }
class C{  public Iterable<Integer> path(){  return path;}  }
class C{  void parseInvalidTag() throws IOException {  while (true) {    skipSpace();switch (ch) {case '>':case -1:      ch=readCh();    return;case '<':  return;default :ch=readCh();}}}  }
class C{  public Element svgCircle(double cx,double cy,double r){  return SVGUtil.svgCircle(document,cx,cy,r);}  }
class C{  public static boolean orthogonalizeVectors(List<Vector> list){  long dimension=list.get(0).getDimension();  for (int k=0; k < list.size(); ++k) {    Vector kthVector=list.get(k);    if (kthVector.getDimension() != dimension) {      System.err.println("In orthogonalizeVector: not all vectors have required dimension.");      return false;    }    for (int j=0; j < k; ++j) {      Vector jthVector=list.get(j);      sampleSubtract(((BinaryVector)kthVector).bitSet,((BinaryVector)jthVector).bitSet);    }  }  return true;}  }
class C{  public void syncEndTagFile(){  copyTagToPageScope(VariableInfo.AT_BEGIN);  copyTagToPageScope(VariableInfo.AT_END);  restoreNestedVariables();}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  public IPreparedSparqlUpdate prepareUpdate(final String updateStr) throws Exception {  return prepareUpdate(updateStr,UUID.randomUUID());}  }
class C{  public boolean hasMandatoryTags(){  if (tags != null) {    for (    PoiTypeTag poiTypeTag : tags) {      if (poiTypeTag.getMandatory()) {        return true;      }    }  }  return false;}  }
class C{  private void serveLanguageResources(Map<String,Resource> resources){  for (  Map.Entry<String,Resource> translationResource : resources.entrySet()) {    String path=translationResource.getKey();    Resource resource=translationResource.getValue();    String languageKey=languageResourceService.getLanguageKey(path);    if (languageKey == null) {      logger.warn("Invalid language file name: \"{}\"",path);      continue;    }    languageResourceService.addLanguageResource(languageKey,resource);  }}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  private static void validateStorageSizeField(CatalogServiceRestRep catalogService,ServiceFieldRestRep field,String fieldName,String value){  validateNumber(fieldName,value);  boolean hasMinSize=field.getMin() != null;  boolean hasMaxSize=(catalogService.getMaxSize() != null) && (catalogService.getMaxSize() >= 1);  Integer min=hasMinSize ? field.getMin() : 0;  Integer max=hasMaxSize ? catalogService.getMaxSize() : null;  validateRange(fieldName,value,min,max);}  }
class C{  public CLIOutputResponseList resolve(final ResolveRequest request) throws IOException, SubversionException {  final File projectPath=new File(request.getProjectPath());  Map<String,String> resolutions=request.getConflictResolutions();  List<CLIOutputResponse> results=new ArrayList<>();  for (  String path : resolutions.keySet()) {    final List<String> uArgs=defaultArgs();    addDepth(uArgs,request.getDepth());    addOption(uArgs,"--accept",resolutions.get(path));    uArgs.add("resolve");    final CommandLineResult result=runCommand(null,uArgs,projectPath,Arrays.asList(path));    CLIOutputResponse outputResponse=DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());    results.add(outputResponse);  }  return DtoFactory.getInstance().createDto(CLIOutputResponseList.class).withCLIOutputResponses(results);}  }
class C{  public void testCallCrawlerService(){  System.out.println("callCrawlerService");  mockInitialisationCalls(false,AuditStatus.CRAWLING);  EasyMock.expect(mockCrawlerService.crawlSite(mockAudit,siteUrl)).andReturn(EasyMock.createMock(WebResource.class)).once();  setReplayMode();  SiteAuditCommandImpl siteAuditCommand=getInstance();  siteAuditCommand.callCrawlerService();  setVerifyMode();}  }
class C{  @Override public String toString(){  return toString(0);}  }
class C{  public MySqlSpoutConfig(MySqlConfig mysqlConfig,ZkBinLogStateConfig zkBinLogStateConfig){  this(mysqlConfig,zkBinLogStateConfig,new FailureConfig(SpoutConstants.DEFAULT_NUMMAXRETRIES,SpoutConstants.DEFAULT_NUMMAXTOTFAILALLOWED),SpoutConstants.DEFAULT_TIMEBUCKETSIZEINSECS,SpoutConstants.DEFAULT_BUFFER_CAPACITY);}  }
class C{  public boolean isMinValueSet(){  return mMinValue != MathHelper.NULL_VALUE;}  }
class C{  public void removeSynapse(final Synapse toDelete){  if (toDelete.getSource() != null) {    toDelete.getSource().removeEfferent(toDelete);  }  if (toDelete.getTarget() != null) {    toDelete.getTarget().removeAfferent(toDelete);  }  if (toDelete.getParentGroup() != null) {    SynapseGroup parentGroup=toDelete.getParentGroup();    parentGroup.removeSynapse(toDelete);    if (parentGroup.isDisplaySynapses()) {      fireSynapseRemoved(toDelete);    }    if (parentGroup.isEmpty()) {      removeGroup(toDelete.getParentGroup());    }  } else {    synapseList.remove(toDelete);    fireSynapseRemoved(toDelete);  }}  }
class C{  public static int brighter(int c){  int r=red(c), g=green(c), b=blue(c);  int i=(int)(1.0 / (1.0 - scale));  if (r == 0 && g == 0 && b == 0) {    return rgba(i,i,i,alpha(c));  }  if (r > 0 && r < i)   r=i;  if (g > 0 && g < i)   g=i;  if (b > 0 && b < i)   b=i;  return rgba(Math.min(255,(int)(r / scale)),Math.min(255,(int)(g / scale)),Math.min(255,(int)(b / scale)),alpha(c));}  }
class C{  public StandardHash(int tableSize){  this.tableSize=tableSize;}  }
class C{  protected final void assertNotAborted() throws InterruptedIOException {  if (aborted) {    throw new InterruptedIOException("Connection has been shut down.");  }}  }
class C{  public static void validateNull(Object fieldValue,String fieldName){  if (fieldValue != null) {    logAndThrow(String.format("'%s' value should be NULL",fieldName));  }}  }
class C{  public VNXeCommandJob deleteCifsShareForSnapshot(String shareId) throws VNXeException {  CifsShareRequests req=new CifsShareRequests(_khClient);  return req.deleteShareForSnapshot(shareId);}  }
class C{  public int pgrp(){  return Integer.parseInt(fields[4]);}  }
class C{  public void render(Graphics g){  super.render(g);  if (!paintOnlyPoly) {    renderPoints(g);    renderLabels(g);  }}  }
class C{  public boolean test(String name,String password) throws UsersRepositoryException {  final User user=getUserByName(name);  final boolean result;  result=user != null && user.verifyPassword(password);  return result;}  }
class C{  public byte[] block(int index){  if (index >= blockCount()) {    throw new ArrayIndexOutOfBoundsException("Invalid block index " + index);  }  byte[] theBlock=new byte[FW_BLOCK_SIZE + 2];  byte[] rawIndex=intToTwoBytes(index,Constants.CC2540_BYTE_ORDER);  System.arraycopy(rawIndex,0,theBlock,0,2);  int blockStart=index * FW_BLOCK_SIZE;  int length=FW_BLOCK_SIZE;  while (blockStart + length > data().length) {    length--;  }  System.arraycopy(data(),blockStart,theBlock,2,length);  return theBlock;}  }
class C{  public XPathException(String message,ExpressionNode ex){  super(message);  this.setLocator(ex);  setStylesheetNode(getStylesheetNode(ex));}  }
class C{  public Vector3f divide(Vector3f scalar){  return new Vector3f(x / scalar.x,y / scalar.y,z / scalar.z);}  }
class C{  public void reset(){  parser.reset();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String cmd=getString(stack);  String remoteName=getString(stack);  int portNum=getInt(stack);  SFIRTuner tun=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tun != null) {synchronized (tun) {      tun.getRemoteInfo(remoteName);      tun.setPrefixKey(cmd);      tun.saveChanges();    }  }  return null;}  }
class C{  private Engine(){}  }
class C{  public SaaSApplicationException(String message,Throwable cause,Object[] params){  super(message,cause);  init(params);}  }
class C{  public void removeLogListener(LogListener l){  super.removeLogListener(l);  for (  EvaluationStatisticsExporter exporter : m_Exporters)   exporter.removeLogListener(l);}  }
class C{  protected Expression div(int opPos) throws TransformerException {  return compileOperation(new Div(),opPos);}  }
class C{  public void notifyThrottleFound(DccThrottle t){  log.info("Asked for " + currentAddress.getNumber() + " got "+ t.getLocoAddress());  if (consistAddress != null && ((DccLocoAddress)t.getLocoAddress()).getNumber() == consistAddress.getNumber()) {    notifyConsistThrottleFound(t);    return;  }  if (((DccLocoAddress)t.getLocoAddress()).getNumber() != currentAddress.getNumber()) {    log.warn("Not correct address, asked for " + currentAddress.getNumber() + " got "+ t.getLocoAddress()+ ", requesting again...");    boolean requestOK=InstanceManager.throttleManagerInstance().requestThrottle(currentAddress.getNumber(),currentAddress.isLongAddress(),this);    if (!requestOK) {      JOptionPane.showMessageDialog(mainPanel,Bundle.getMessage("AddressInUse"));    }    return;  }  throttle=t;  releaseButton.setEnabled(true);  currentAddress=(DccLocoAddress)t.getLocoAddress();  addrSelector.setAddress(currentAddress);  throttle.addPropertyChangeListener(this);  if ((rosterEntry == null) && (jmri.jmrit.throttle.ThrottleFrameManager.instance().getThrottlesPreferences().isUsingExThrottle()) && (jmri.jmrit.throttle.ThrottleFrameManager.instance().getThrottlesPreferences().isEnablingRosterSearch())&& addrSelector.getAddress() != null) {    List<RosterEntry> l=Roster.getDefault().matchingList(null,null,"" + addrSelector.getAddress().getNumber(),null,null,null,null);    if (l.size() > 0) {      rosterEntry=l.get(0);    }  }  setButton.setEnabled(false);  addrSelector.setEnabled(false);  getRosterEntrySelector().setEnabled(false);  conRosterBox.setEnabled(false);  if (InstanceManager.throttleManagerInstance().hasDispatchFunction()) {    dispatchButton.setEnabled(true);  }  if ((rosterEntry != null) && (ProgDefault.getDefaultProgFile() != null) && (InstanceManager.getNullableDefault(jmri.ProgrammerManager.class) != null)&& (InstanceManager.getDefault(jmri.ProgrammerManager.class).isAddressedModePossible())) {    progButton.setEnabled(true);  }  for (int i=0; i < listeners.size(); i++) {    AddressListener l=listeners.get(i);    if (log.isDebugEnabled()) {      log.debug("Notify address listener of throttle acquired " + l.getClass());    }    if (currentAddress != null) {      l.notifyAddressThrottleFound(throttle);    }  }}  }
class C{  public char[][] findParameterNames(){  return null;}  }
class C{  public E singleResult() throws QueryEvaluationException {  try {    E next=next();    if (next == null) {      throw new NoResultException("No result");    }    if (next() != null) {      throw new MultipleResultException("More than one result");    }    return next;  }  finally {    close();  }}  }
class C{  public double potential(int index,double expFPOverErr,double[] rulesetStat,double[] ruleStat,boolean checkErr){  double pcov=rulesetStat[0] - ruleStat[0];  double puncov=rulesetStat[1] + ruleStat[0];  double pfp=rulesetStat[4] - ruleStat[4];  double pfn=rulesetStat[5] + ruleStat[2];  double dataDLWith=dataDL(expFPOverErr,rulesetStat[0],rulesetStat[1],rulesetStat[4],rulesetStat[5]);  double theoryDLWith=theoryDL(index);  double dataDLWithout=dataDL(expFPOverErr,pcov,puncov,pfp,pfn);  double potential=dataDLWith + theoryDLWith - dataDLWithout;  double err=ruleStat[4] / ruleStat[0];  boolean overErr=Utils.grOrEq(err,0.5);  if (!checkErr) {    overErr=false;  }  if (Utils.grOrEq(potential,0.0) || overErr) {    rulesetStat[0]=pcov;    rulesetStat[1]=puncov;    rulesetStat[4]=pfp;    rulesetStat[5]=pfn;    return potential;  } else {    return Double.NaN;  }}  }
class C{  protected LogSeverity validateLogSeverity(int severity){  if ((severity >= 0) && (severity < LogSeverity.values().length)) {    return LogSeverity.values()[severity];  } else {    throw APIException.badRequests.parameterIsNotValid("severity");  }}  }
class C{  private static List<String[]> readSentence(BufferedReader aReader) throws IOException {  List<String[]> words=new ArrayList<String[]>();  String line;  while ((line=aReader.readLine()) != null) {    if (StringUtils.isBlank(line)) {      break;    }    if (line.startsWith("#")) {      continue;    }    String[] fields=line.split("\t");    if (fields.length != 10) {      throw new IOException("Invalid file format. Line needs to have 10 tab-separated fields, but it has " + fields.length + ": ["+ line+ "]");    }    words.add(fields);  }  if (line == null && words.isEmpty()) {    return null;  } else {    return words;  }}  }
class C{  public AttributeTypeAndValue(ObjectIdentifier oid,AttributeValue value) throws IOException {  this.oid=oid;  this.value=value;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:42.274 -0500",hash_original_method="391CC1D8031EEADD5869B9B2E6DEDA56",hash_generated_method="F7E4F276F41A7F6B3EEEF03B4838AE0E") public DexPathList(ClassLoader definingContext,String dexPath,String libraryPath,File optimizedDirectory){  if (definingContext == null) {    throw new NullPointerException("definingContext == null");  }  if (dexPath == null) {    throw new NullPointerException("dexPath == null");  }  if (optimizedDirectory != null) {    if (!optimizedDirectory.exists()) {      throw new IllegalArgumentException("optimizedDirectory doesn't exist: " + optimizedDirectory);    }    if (!(optimizedDirectory.canRead() && optimizedDirectory.canWrite())) {      throw new IllegalArgumentException("optimizedDirectory not readable/writable: " + optimizedDirectory);    }  }  this.definingContext=definingContext;  this.dexElements=makeDexElements(splitDexPath(dexPath),optimizedDirectory);  this.nativeLibraryDirectories=splitLibraryPath(libraryPath);}  }
class C{  public static Matrix pinv(Matrix x){  if (x.rank() < 1) {    return null;  }  if (x.getColumnDimension() > x.getRowDimension()) {    return pinv(x.transpose()).transpose();  }  SingularValueDecomposition svdX=new SingularValueDecomposition(x);  double[] singularValues=svdX.getSingularValues();  double tol=Math.max(x.getColumnDimension(),x.getRowDimension()) * singularValues[0] * MACHEPS;  double[] singularValueReciprocals=new double[singularValues.length];  for (int i=0; i < singularValues.length; i++) {    singularValueReciprocals[i]=Math.abs(singularValues[i]) < tol ? 0 : (1.0 / singularValues[i]);  }  double[][] u=svdX.getU().getArray();  double[][] v=svdX.getV().getArray();  int min=Math.min(x.getColumnDimension(),u[0].length);  double[][] inverse=new double[x.getColumnDimension()][x.getRowDimension()];  for (int i=0; i < x.getColumnDimension(); i++) {    for (int j=0; j < u.length; j++) {      for (int k=0; k < min; k++) {        inverse[i][j]+=v[i][k] * singularValueReciprocals[k] * u[j][k];      }    }  }  return new Matrix(inverse);}  }
class C{  public static int executeCommand(String command){  return executeCommand(command,Logger.getLogger(ProcessUtils.class));}  }
class C{  public void testNullCallBack() throws Exception {  socketRpcServer.registerService(new FakeServiceImpl(REQUEST).withResponse(null));  FakeSocket socket=new FakeSocket(false).withRequest(RPC_REQUEST);  runHandler(socket);  assertTrue(socket.getResponse().getCallback());  assertFalse(socket.getResponse().hasResponseProto());}  }
class C{  private void updateUserPasswordProperty(String username,String value,boolean bReset) throws CoordinatorClientException, LocalRepositoryException {  String encpasswordProperty=String.format(SYSTEM_ENCPASSWORD_FORMAT,username);  PropertyInfoUpdate props=new PropertyInfoUpdate();  props.addProperty(encpasswordProperty,value);  Calendar newExpireTime=getExpireTimeFromNow();  if (username.equals("root") || username.equals("svcuser")) {    String configExpireDays=getPasswordUtils().getConfigProperty(Constants.PASSWORD_EXPIRE_DAYS);    int intConfigExpireDays=NumberUtils.toInt(configExpireDays);    int daysAfterEpoch=0;    if (intConfigExpireDays != 0) {      daysAfterEpoch=PasswordUtils.getDaysAfterEpoch(newExpireTime);    }    String expirydaysProperty=String.format(Constants.SYSTEM_PASSWORD_EXPIRY_FORMAT,username);    _log.info("updating " + expirydaysProperty + " to "+ daysAfterEpoch);    props.addProperty(expirydaysProperty,String.valueOf(daysAfterEpoch));  }  try {    _cfg.setProperties(props);    if (username.equals("proxyuser")) {      value=_passwordUtils.getEncryptedString(value);    }    _passwordUtils.updatePasswordHistory(username,value,newExpireTime,bReset);  } catch (  Exception e) {    throw APIException.internalServerErrors.updateObjectError("properties",e);  }}  }
class C{  public OperandTreeNode(final int operandId,final int type,final String value,final Integer parentId,final INaviReplacement replacement,final List<CReference> references,final RawTypeSubstitution substitution,final Integer instanceId,final int operandPosition,final IAddress address){  m_value=Preconditions.checkNotNull(value,"IE01298: Value argument can not be null");  m_id=operandId;  m_type=type;  m_parentId=parentId;  m_replacement=replacement;  m_reference=references;  this.substitution=substitution;  this.typeInstanceId=instanceId;  this.position=operandPosition;  this.address=address;}  }
class C{  private static long[] precomputePows(){  long[] pows=new long[BITS_PER_UNIT + 1];  long value=~0L;  for (int i=BITS_PER_UNIT + 1; --i >= 1; ) {    pows[i]=value >>> (BITS_PER_UNIT - i);  }  pows[0]=0L;  return pows;}  }
class C{  @Override public boolean isConnectionBased(){  return false;}  }
class C{  public final WroManager create(){  return managerInitializer.get();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return new Integer(mf == null ? 0 : mf.getNumSegments());}  }
class C{  public static void assertQueryDocIds(SolrClient client,boolean shouldExist,String... ids) throws Exception {  for (  String id : ids) {    assertEquals(client.toString() + " should " + (shouldExist ? "" : "not ")+ "find id: "+ id,(shouldExist ? 1 : 0),CLOUD_CLIENT.query(params("q","{!term f=id}" + id)).getResults().getNumFound());  }  if (!CLOUD_CLIENT.equals(client)) {    assertQueryDocIds(CLOUD_CLIENT,shouldExist,ids);  }}  }
class C{  public TestGrouping addPackagesRecursive(String... packageNames){  for (  String packageName : packageNames) {    List<Class<? extends TestCase>> addedClasses=testCaseClassesInPackage(packageName);    if (addedClasses.isEmpty()) {      Log.w(LOG_TAG,"Invalid Package: '" + packageName + "' could not be found or has no tests");    }    testCaseClasses.addAll(addedClasses);    if (firstIncludedPackage == null) {      firstIncludedPackage=packageName;    }  }  return this;}  }
class C{  @Override public boolean canExecute(){  boolean returnVal=true;  ERDEntity primaryKeyEntity=relationship.getPrimaryKeyEntity();  if (primaryKeyEntity.equals(sourceForeignKey)) {    returnVal=false;  } else {    List<?> relationships=sourceForeignKey.getForeignKeyRelationships();    for (int i=0; i < relationships.size(); i++) {      ERDAssociation relationship=((ERDAssociation)(relationships.get(i)));      if (relationship.getPrimaryKeyEntity().equals(targetPrimaryKey) && relationship.getForeignKeyEntity().equals(sourceForeignKey)) {        returnVal=false;        break;      }    }  }  return returnVal;}  }
class C{  public JpaRepositoryState(String machineId,String state,boolean initial){  this(machineId,null,state,initial);}  }
class C{  private OkHttpClient copyWithDefaults(){  OkHttpClient result=new OkHttpClient(this);  result.proxy=proxy;  result.proxySelector=proxySelector != null ? proxySelector : ProxySelector.getDefault();  result.cookieHandler=cookieHandler != null ? cookieHandler : CookieHandler.getDefault();  result.responseCache=responseCache != null ? responseCache : ResponseCache.getDefault();  result.sslSocketFactory=sslSocketFactory != null ? sslSocketFactory : HttpsURLConnection.getDefaultSSLSocketFactory();  result.hostnameVerifier=hostnameVerifier != null ? hostnameVerifier : OkHostnameVerifier.INSTANCE;  result.authenticator=authenticator != null ? authenticator : HttpAuthenticator.SYSTEM_DEFAULT;  result.connectionPool=connectionPool != null ? connectionPool : ConnectionPool.getDefault();  result.followProtocolRedirects=followProtocolRedirects;  result.transports=transports != null ? transports : DEFAULT_TRANSPORTS;  result.connectTimeout=connectTimeout;  result.readTimeout=readTimeout;  return result;}  }
class C{  public int size(){  return size;}  }
class C{  public static void main(String[] args){  ArrayList<String> gameArray=new ArrayList<String>();  if (args != null)   for (int i=0; i < args.length - 1; i+=2)   allPlayers.put(args[i],args[i + 1]);  if (args[args.length - 1].endsWith("debug"))   debugOutput=true;  for (  GameType g : GameType.values())   gameArray.add(Strings.getGameTypeName(g));  numGameTypes=gameArray.size();  Collections.sort(gameArray);  gameArray.addAll(allPlayers.keySet());  gameStrings=gameArray.toArray(new String[0]);  me=new VDomServer();  me.start();}  }
class C{  public void addLineJoin(int joinstyle){  PDFChangeStrokeCmd sc=new PDFChangeStrokeCmd();  Join join=Paint.Join.MITER;switch (joinstyle) {case 0:    join=Paint.Join.MITER;  break;case 1:join=Paint.Join.ROUND;break;case 2:join=Paint.Join.BEVEL;break;}sc.setLineJoin(join);addCommand(sc);}  }
class C{  @Override synchronized void invalidateConnection(MySQLConnection conn) throws SQLException {  super.invalidateConnection(conn);  if (this.isGlobalBlacklistEnabled()) {    addToGlobalBlacklist(this.connectionsToHostsMap.get(conn));  }  this.liveConnections.remove(this.connectionsToHostsMap.get(conn));  Object mappedHost=this.connectionsToHostsMap.remove(conn);  if (mappedHost != null && this.hostsToListIndexMap.containsKey(mappedHost)) {    int hostIndex=this.hostsToListIndexMap.get(mappedHost);synchronized (this.responseTimes) {      this.responseTimes[hostIndex]=0;    }  }}  }
class C{  public void endCDATA() throws SAXException {  if (null != m_resultLexicalHandler)   m_resultLexicalHandler.endCDATA();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Money unpayPenaltyChargesComponent(final LocalDate transactionDate,final Money transactionAmountRemaining){  final MonetaryCurrency currency=transactionAmountRemaining.getCurrency();  Money penaltyPortionOfTransactionDeducted=Money.zero(currency);  final Money penaltyChargesCompleted=getPenaltyChargesPaid(currency);  if (transactionAmountRemaining.isGreaterThanOrEqualTo(penaltyChargesCompleted)) {    this.penaltyChargesPaid=Money.zero(currency).getAmount();    penaltyPortionOfTransactionDeducted=penaltyChargesCompleted;  } else {    this.penaltyChargesPaid=penaltyChargesCompleted.minus(transactionAmountRemaining).getAmount();    penaltyPortionOfTransactionDeducted=transactionAmountRemaining;  }  checkIfRepaymentPeriodObligationsAreMet(transactionDate,currency);  return penaltyPortionOfTransactionDeducted;}  }
class C{  public Factory(int k,DistanceFunction<? super O> distanceFunction,File filename){  super(k,distanceFunction);  this.filename=filename;}  }
class C{  public static int scopeString2Int(boolean ignoreScope,String type){  type=StringUtil.toLowerCase(type);  char c=type.charAt(0);  if (ignoreScope) {    if ('a' == c) {      if ("arguments".equals(type))       return Scope.SCOPE_ARGUMENTS;    } else     if ('l' == c) {      if ("local".equals(type))       return Scope.SCOPE_LOCAL;    } else     if ('r' == c) {      if ("request".equals(type))       return Scope.SCOPE_REQUEST;    } else     if ('v' == c) {      if ("variables".equals(type))       return Scope.SCOPE_VARIABLES;    } else     if ('s' == c) {      if ("server".equals(type))       return Scope.SCOPE_SERVER;    }    return Scope.SCOPE_UNDEFINED;  }  if ('a' == c) {    if ("application".equals(type))     return Scope.SCOPE_APPLICATION; else     if ("arguments".equals(type))     return Scope.SCOPE_ARGUMENTS;  } else   if ('c' == c) {    if ("cgi".equals(type))     return Scope.SCOPE_CGI;    if ("cookie".equals(type))     return Scope.SCOPE_COOKIE;    if ("client".equals(type))     return Scope.SCOPE_CLIENT;    if ("cluster".equals(type))     return Scope.SCOPE_CLUSTER;  } else   if ('f' == c) {    if ("form".equals(type))     return Scope.SCOPE_FORM;  } else   if ('l' == c) {    if ("local".equals(type))     return Scope.SCOPE_LOCAL;  } else   if ('r' == c) {    if ("request".equals(type))     return Scope.SCOPE_REQUEST;  } else   if ('s' == c) {    if ("session".equals(type))     return Scope.SCOPE_SESSION;    if ("server".equals(type))     return Scope.SCOPE_SERVER;  } else   if ('u' == c) {    if ("url".equals(type))     return Scope.SCOPE_URL;  } else   if ('v' == c) {    if ("variables".equals(type))     return Scope.SCOPE_VARIABLES;  }  return Scope.SCOPE_UNDEFINED;}  }
class C{  public static TetradMatrix incompleteCholeskyGramMatrix(List<Kernel> kernels,DataSet dataset,List<Node> nodes,double precision){  if (precision <= 0) {    throw new IllegalArgumentException("Precision must be > 0");  }  int m=dataset.getNumRows();  TetradMatrix G=new TetradMatrix(m,m);  double[] Dadv=new double[m];  int[] p=new int[m];  for (int i=0; i < m; i++) {    Dadv[i]=evaluate(kernels,dataset,nodes,i,i);    p[i]=i;  }  int cols=m;  for (int k=0; k < m; k++) {    double best=Dadv[k];    int bestInd=k;    for (int j=(k + 1); j < m; j++) {      if (Dadv[j] > best / .99) {        best=Dadv[j];        bestInd=j;      }    }    if (best < precision) {      cols=k - 1;      break;    }    int pk=p[k];    p[k]=p[bestInd];    p[bestInd]=pk;    double dk=Dadv[k];    Dadv[k]=Dadv[bestInd];    Dadv[bestInd]=dk;    for (int j=0; j < k; j++) {      double gk=G.get(k,j);      G.set(k,j,G.get(bestInd,j));      G.set(bestInd,j,gk);    }    double diag=Math.sqrt(Dadv[k]);    G.set(k,k,diag);    for (int j=(k + 1); j < m; j++) {      double s=0.0;      for (int i=0; i < k; i++) {        s+=G.get(j,i) * G.get(k,i);      }      G.set(j,k,(evaluate(kernels,dataset,nodes,p[j],p[k]) - s) / diag);    }    for (int j=(k + 1); j < m; j++) {      Dadv[j]-=Math.pow(G.get(j,k),2);    }    Dadv[k]=0;  }  TetradMatrix Gm=new TetradMatrix(m,cols);  for (int i=0; i < m; i++) {    for (int j=0; j < cols; j++) {      Gm.set(i,j,G.get(i,j));    }  }  return Gm;}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.340 -0400",hash_original_method="9EABECFB34552C6029ED722DF84F07FF",hash_generated_method="A1E714C7101539F653873C5BAA608E48") @Override public int read(char[] array,int offset,int length){  if (idx >= charSequence.length()) {    return -1;  }  if (array == null) {    throw new NullPointerException("Character array is missing");  }  if (length < 0 || offset < 0 || offset + length > array.length) {    throw new IndexOutOfBoundsException("Array Size=" + array.length + ", offset="+ offset+ ", length="+ length);  }  int count=0;  for (int i=0; i < length; i++) {    int c=read();    if (c == -1) {      return count;    }    array[offset + i]=(char)c;    count++;  }  return count;}  }
class C{  public void initializeComment(final ArrayList<IComment> comment){  m_instruction.initializeGlobalComment(comment);  for (  final IInstructionListener listener : m_listeners) {    listener.initializedComment(this,comment);  }}  }
class C{  public static MemberValue createMemberValue(ConstPool cp,CtClass type) throws NotFoundException {  if (type == CtClass.booleanType)   return new BooleanMemberValue(cp); else   if (type == CtClass.byteType)   return new ByteMemberValue(cp); else   if (type == CtClass.charType)   return new CharMemberValue(cp); else   if (type == CtClass.shortType)   return new ShortMemberValue(cp); else   if (type == CtClass.intType)   return new IntegerMemberValue(cp); else   if (type == CtClass.longType)   return new LongMemberValue(cp); else   if (type == CtClass.floatType)   return new FloatMemberValue(cp); else   if (type == CtClass.doubleType)   return new DoubleMemberValue(cp); else   if (type.getName().equals("java.lang.Class"))   return new ClassMemberValue(cp); else   if (type.getName().equals("java.lang.String"))   return new StringMemberValue(cp); else   if (type.isArray()) {    CtClass arrayType=type.getComponentType();    MemberValue member=createMemberValue(cp,arrayType);    return new ArrayMemberValue(member,cp);  } else   if (type.isInterface()) {    Annotation info=new Annotation(cp,type);    return new AnnotationMemberValue(info,cp);  } else {    EnumMemberValue emv=new EnumMemberValue(cp);    emv.setType(type.getName());    return emv;  }}  }
class C{  protected Object newInstance(String className){  Object instance=null;  if ("".equals(className) || className == null)   return instance;  try {    if (className.length() == 3) {      className=classAliases.get(className);    }    if (className.startsWith("flex.")) {      className="org.red5.compatibility." + className;    }    Class<?> clazz=Thread.currentThread().getContextClassLoader().loadClass(className);    instance=clazz.newInstance();  } catch (  Exception ex) {    log.error("Error loading class: {}",className);    log.debug("Exception was: {}",ex);  }  return instance;}  }
class C{  private void initData(){  File target=getDatabasePath(DatabaseHelper.DATABASE_NAME);  if (!target.exists()) {    RestoreManager manager=new RestoreManager(mContext);    InputStream is=getContext().getResources().openRawResource(R.raw.wo2b_tujie);    manager.restore(is,target);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void resetQueues(){  before=new Steppable[11];  before2=new Steppable[11];  beforeSize=0;  after=new Steppable[11];  after2=new Steppable[11];  afterSize=0;  start=new Steppable[11];  start2=new Steppable[11];  startSize=0;  finish=new Steppable[11];  finish2=new Steppable[11];  finishSize=0;}  }
class C{  public int addStringValue(Attribute src,int index){  if (!isString()) {    return -1;  }  Object store=((NominalAttributeInfo)src.m_AttributeInfo).m_Values.get(index);  Integer oldIndex=((NominalAttributeInfo)m_AttributeInfo).m_Hashtable.get(store);  if (oldIndex != null) {    return oldIndex.intValue();  } else {    int intIndex=((NominalAttributeInfo)m_AttributeInfo).m_Values.size();    ((NominalAttributeInfo)m_AttributeInfo).m_Values.add(store);    ((NominalAttributeInfo)m_AttributeInfo).m_Hashtable.put(store,new Integer(intIndex));    return intIndex;  }}  }
class C{  public boolean isEmpty(){  return this.putAllData.length == 0;}  }
class C{  public void increaseTimer(){  if (this.timer < this.duration) {    this.timer++;    this.timerChange=1;  }}  }
class C{  public static void singleValue(String name,double value,String units){  openMinorTag("stat");  attribute("name",name);  attribute("value",value);  if (units != null)   attribute("units",units);  closeMinorTag();}  }
class C{  public static boolean isEmpty(Object s){  return s == null || (s instanceof String && ((String)s).length() == 0);}  }
class C{  protected KeyFactory(KeyFactorySpi keyFacSpi,Provider provider,String algorithm){  this.spi=keyFacSpi;  this.provider=provider;  this.algorithm=algorithm;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"and");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a and instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree targetOperand=operands.get(0);  final IOperandTree sourceOperand=operands.get(1);  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  final OperandSize size=targetResult.getSize();  final String sourceRegister=sourceResult.getRegister();  final String targetRegister=targetResult.getRegister();  final String andResult=Helpers.generateAnd(environment,offset,size,sourceRegister,targetRegister,instructions);  offset=baseOffset + instructions.size();  Helpers.writeBack(environment,offset,targetOperand,andResult,size,targetResult.getAddress(),targetResult.getType(),instructions);  Helpers.writeParityFlag(environment,baseOffset + instructions.size(),size,andResult,instructions);}  }
class C{  public ElkanKMeans(DistanceMetric dm,Random rand){  this(dm,rand,DEFAULT_SEED_SELECTION);}  }
class C{  public static CstInteger make(int value){  int idx=(value & 0x7fffffff) % cache.length;  CstInteger obj=cache[idx];  if ((obj != null) && (obj.getValue() == value)) {    return obj;  }  obj=new CstInteger(value);  cache[idx]=obj;  return obj;}  }
class C{  public NATURAL_LEFT_JOIN NATURAL_LEFT_JOIN(String tableToJoin){  return new NATURAL_LEFT_JOIN(this,tableToJoin);}  }
class C{  public boolean isFree(){  int state=getState();  return ((state & ALLOCATED) == 0 && (state & OCCUPIED) == 0);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) public void readGroup(AttributeSet attrs){  TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.MenuGroup);  groupId=a.getResourceId(R.styleable.MenuGroup_android_id,defaultGroupId);  groupCategory=a.getInt(R.styleable.MenuGroup_android_menuCategory,defaultItemCategory);  groupOrder=a.getInt(R.styleable.MenuGroup_android_orderInCategory,defaultItemOrder);  groupCheckable=a.getInt(R.styleable.MenuGroup_android_checkableBehavior,defaultItemCheckable);  groupVisible=a.getBoolean(R.styleable.MenuGroup_android_visible,defaultItemVisible);  groupEnabled=a.getBoolean(R.styleable.MenuGroup_android_enabled,defaultItemEnabled);  a.recycle();}  }
class C{  static void testIntFloorDivMod(){  testIntFloorDivMod(4,0,new ArithmeticException(),new ArithmeticException());  testIntFloorDivMod(4,3,1,1);  testIntFloorDivMod(3,3,1,0);  testIntFloorDivMod(2,3,0,2);  testIntFloorDivMod(1,3,0,1);  testIntFloorDivMod(0,3,0,0);  testIntFloorDivMod(4,-3,-2,-2);  testIntFloorDivMod(3,-3,-1,0);  testIntFloorDivMod(2,-3,-1,-1);  testIntFloorDivMod(1,-3,-1,-2);  testIntFloorDivMod(0,-3,0,0);  testIntFloorDivMod(-1,3,-1,2);  testIntFloorDivMod(-2,3,-1,1);  testIntFloorDivMod(-3,3,-1,0);  testIntFloorDivMod(-4,3,-2,2);  testIntFloorDivMod(-1,-3,0,-1);  testIntFloorDivMod(-2,-3,0,-2);  testIntFloorDivMod(-3,-3,1,0);  testIntFloorDivMod(-4,-3,1,-1);  testIntFloorDivMod(Integer.MAX_VALUE,1,Integer.MAX_VALUE,0);  testIntFloorDivMod(Integer.MAX_VALUE,-1,-Integer.MAX_VALUE,0);  testIntFloorDivMod(Integer.MAX_VALUE,3,715827882,1);  testIntFloorDivMod(Integer.MAX_VALUE - 1,3,715827882,0);  testIntFloorDivMod(Integer.MIN_VALUE,3,-715827883,1);  testIntFloorDivMod(Integer.MIN_VALUE + 1,3,-715827883,2);  testIntFloorDivMod(Integer.MIN_VALUE + 1,-1,Integer.MAX_VALUE,0);  testIntFloorDivMod(Integer.MIN_VALUE,-1,Integer.MIN_VALUE,0);}  }
class C{  public List<GenericValue> makeAllOrderItemPriceInfos(){  List<GenericValue> allInfos=new LinkedList<GenericValue>();  for (  ShoppingCartItem item : cartLines) {    Collection<GenericValue> infos=item.getOrderItemPriceInfos();    if (infos != null) {      for (      GenericValue orderItemPriceInfo : infos) {        orderItemPriceInfo.set("orderItemSeqId",item.getOrderItemSeqId());        allInfos.add(orderItemPriceInfo);      }    }  }  return allInfos;}  }
class C{  public File createPDF(File file){  return null;}  }
class C{  public static double distanceKM(Geo v1,Geo v2){  return v1.distanceKM(v2);}  }
class C{  public ReadResponse Read(RequestHeader RequestHeader,Double MaxAge,TimestampsToReturn TimestampsToReturn,ReadValueId... NodesToRead) throws ServiceFaultException, ServiceResultException {  ReadRequest req=new ReadRequest(RequestHeader,MaxAge,TimestampsToReturn,NodesToRead);  return (ReadResponse)channel.serviceRequest(req);}  }
class C{  public boolean inCircle(double[] opp){  final double dx=opp[0] - m[0], dy=opp[1] - m[1];  return (dx * dx + dy * dy) < r2;}  }
class C{  public void fireRequestMessage(String message){  fireRequestMessage(new InfoDisplayEvent(this,message));}  }
class C{  public static double log2(double a){  return Math.log(a) / log2;}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element elementNode;  String elementValue;  doc=(Document)load("hc_staff",false);  elementNode=doc.getDocumentElement();  elementValue=elementNode.getNodeValue();  assertNull("elementNodeValue",elementValue);}  }
class C{  private void purgeCache(){  long time=System.currentTimeMillis();  folderSize=DBHelper.getInstance().getCachedFilesSize();  if (folderSize > cacheSizeMax) {    Collection<RemoteFile> rfs=DBHelper.getInstance().getUncacheFiles(folderSize - cacheSizeMax);    Log.d(TAG,String.format("Found %s cached files for deletion",rfs.size()));    ArrayList<Integer> rfIds=new ArrayList<>(rfs.size());    for (    RemoteFile rf : rfs) {      File file=imageCache.getCacheFile(rf.url);      if (file.exists() && !file.delete())       Log.w(TAG,"File " + file.getAbsolutePath() + " was not "+ "deleted!");      rfIds.add(rf.id);    }    DBHelper.getInstance().markRemoteFilesNonCached(rfIds);  }  Log.i(TAG,String.format("Purging cache took %s ms",(System.currentTimeMillis() - time)));}  }
class C{  private void addClearFocusNodeToBranch(List<OptionScanNode> branchNodes,ClearFocusNode clearFocusNode){  if (branchNodes.size() < mDegree) {    branchNodes.add(clearFocusNode);  } else {    OptionScanNode nodeWithClearFocus=branchNodes.get(branchNodes.size() - 1);    branchNodes.remove(nodeWithClearFocus);    nodeWithClearFocus=new OptionScanSelectionNode(nodeWithClearFocus,clearFocusNode);    branchNodes.add(nodeWithClearFocus);  }}  }
class C{  public boolean isClosed(){  return atomicLong.removed();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public AudioTableAction(String actionName){  super(actionName);  if (!InstanceManager.getOptionalDefault(AudioManager.class).isPresent()) {    setEnabled(false);  }}  }
class C{  public static NotificationWrapper makeDigestNotification(Context context,ArrayList<AlertService.NotificationInfo> notificationInfos,String digestTitle,boolean expandable){  if (notificationInfos == null || notificationInfos.size() < 1) {    return null;  }  Resources res=context.getResources();  int numEvents=notificationInfos.size();  long[] eventIds=new long[notificationInfos.size()];  long[] startMillis=new long[notificationInfos.size()];  for (int i=0; i < notificationInfos.size(); i++) {    eventIds[i]=notificationInfos.get(i).eventId;    startMillis[i]=notificationInfos.get(i).startMillis;  }  PendingIntent pendingClickIntent=createAlertActivityIntent(context);  Intent deleteIntent=new Intent();  deleteIntent.setClass(context,DismissAlarmsService.class);  deleteIntent.setAction(DELETE_ALL_ACTION);  deleteIntent.putExtra(AlertUtils.EVENT_IDS_KEY,eventIds);  deleteIntent.putExtra(AlertUtils.EVENT_STARTS_KEY,startMillis);  PendingIntent pendingDeleteIntent=PendingIntent.getService(context,0,deleteIntent,PendingIntent.FLAG_UPDATE_CURRENT);  if (digestTitle == null || digestTitle.length() == 0) {    digestTitle=res.getString(R.string.no_title_label);  }  Notification.Builder notificationBuilder=new Notification.Builder(context);  notificationBuilder.setContentText(digestTitle);  notificationBuilder.setSmallIcon(R.drawable.stat_notify_calendar_multiple);  notificationBuilder.setContentIntent(pendingClickIntent);  notificationBuilder.setDeleteIntent(pendingDeleteIntent);  String nEventsStr=res.getQuantityString(R.plurals.Nevents,numEvents,numEvents);  notificationBuilder.setContentTitle(nEventsStr);  Notification n;  if (Utils.isJellybeanOrLater()) {    notificationBuilder.setPriority(Notification.PRIORITY_MIN);    if (expandable) {      Notification.InboxStyle expandedBuilder=new Notification.InboxStyle(notificationBuilder);      int i=0;      for (      AlertService.NotificationInfo info : notificationInfos) {        if (i < NOTIFICATION_DIGEST_MAX_LENGTH) {          String name=info.eventName;          if (TextUtils.isEmpty(name)) {            name=context.getResources().getString(R.string.no_title_label);          }          String timeLocation=AlertUtils.formatTimeLocation(context,info.startMillis,info.allDay,info.location);          TextAppearanceSpan primaryTextSpan=new TextAppearanceSpan(context,R.style.NotificationPrimaryText);          TextAppearanceSpan secondaryTextSpan=new TextAppearanceSpan(context,R.style.NotificationSecondaryText);          SpannableStringBuilder stringBuilder=new SpannableStringBuilder();          stringBuilder.append(name);          stringBuilder.setSpan(primaryTextSpan,0,stringBuilder.length(),0);          stringBuilder.append("  ");          int secondaryIndex=stringBuilder.length();          stringBuilder.append(timeLocation);          stringBuilder.setSpan(secondaryTextSpan,secondaryIndex,stringBuilder.length(),0);          expandedBuilder.addLine(stringBuilder);          i++;        } else {          break;        }      }      int remaining=numEvents - i;      if (remaining > 0) {        String nMoreEventsStr=res.getQuantityString(R.plurals.N_remaining_events,remaining,remaining);        expandedBuilder.setSummaryText(nMoreEventsStr);      }      expandedBuilder.setBigContentTitle("");      n=expandedBuilder.build();    } else {      n=notificationBuilder.build();    }  } else {    n=notificationBuilder.getNotification();    RemoteViews contentView=new RemoteViews(context.getPackageName(),R.layout.notification);    contentView.setImageViewResource(R.id.image,R.drawable.stat_notify_calendar_multiple);    contentView.setTextViewText(R.id.title,nEventsStr);    contentView.setTextViewText(R.id.text,digestTitle);    contentView.setViewVisibility(R.id.time,View.VISIBLE);    contentView.setViewVisibility(R.id.map_button,View.GONE);    contentView.setViewVisibility(R.id.call_button,View.GONE);    contentView.setViewVisibility(R.id.email_button,View.GONE);    contentView.setViewVisibility(R.id.snooze_button,View.GONE);    contentView.setViewVisibility(R.id.end_padding,View.VISIBLE);    n.contentView=contentView;    n.when=1;  }  NotificationWrapper nw=new NotificationWrapper(n);  if (AlertService.DEBUG) {    for (    AlertService.NotificationInfo info : notificationInfos) {      nw.add(new NotificationWrapper(null,0,info.eventId,info.startMillis,info.endMillis,false));    }  }  return nw;}  }
class C{  public Tsls(SemPm spm,DataSet dataSet,String nm){  initialization(spm,dataSet,nm);}  }
class C{  public void addAttributeMatchesListCondition(String namespaceURI,String name,String value){  _specificityC++;  addCondition(Condition.createAttributeMatchesListCondition(namespaceURI,name,value));}  }
class C{  public static boolean isPublic(int flags){  return (flags & AccPublic) != 0;}  }
class C{  public List<A> append(A x){  return of(x).prependList(this);}  }
class C{  public static void main(String[] args){  int count=0;  BigInteger n=new BigInteger("10000000000000000000000000000000000000000000000000");  BigInteger z=new BigInteger("0");  while (count < 10) {    if (z.compareTo(n.remainder(new BigInteger("2"))) == 0 || z.compareTo(n.remainder(new BigInteger("3"))) == 0) {      System.out.println(n);      count++;    }    n=n.add(new BigInteger("1"));  }}  }
class C{  public static void fill(float[] array,int start,int end,float value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  protected InfomodelSourceImpl(){  super();}  }
class C{  public Output(boolean storeAnnouncementsInMemory,int _verbosity){  this(storeAnnouncementsInMemory);}  }
class C{  public void test_GET_accessPath_delete_p() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long result=countResults(doGetWithAccessPath(null,new URIImpl("http://www.w3.org/2000/01/rdf-schema#label"),null));  assertEquals(2,result);}  }
class C{  protected final String format(double totalMillis,String event){  return String.format("[%7sms]%s %-6s %s",String.format("%.3f",totalMillis),MainThread.isMainThread() ? "[ui]" : "",event + ":",mName);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr streetAttr;  Attr removedAttr;  String removedValue;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(2);  streetAttr=testEmployee.getAttributeNode("class");  removedAttr=testEmployee.removeAttributeNode(streetAttr);  assertNotNull("removedAttrNotNull",removedAttr);  removedValue=removedAttr.getValue();  assertEquals("elementRemoveAttributeNodeAssert","No",removedValue);}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public static int toInt(short[] shorts){  return toInt(shorts[0],shorts[1]);}  }
class C{  @Override public void acceptTrainingSet(TrainingSetEvent e){  processTrainingOrDataSourceEvents(e);}  }
class C{  public CircuitBreakerBuilder counterSlidingWindow(Duration counterSlidingWindow){  requireNonNull(counterSlidingWindow,"counterSlidingWindow");  if (counterSlidingWindow.isNegative() || counterSlidingWindow.isZero()) {    throw new IllegalArgumentException("counterSlidingWindow: " + counterSlidingWindow + " (expected: > 0)");  }  this.counterSlidingWindow=counterSlidingWindow;  return this;}  }
class C{  public int compareTo(UUID uuid){  if (uuid == this) {    return 0;  }  if (this.mostSigBits != uuid.mostSigBits) {    return this.mostSigBits < uuid.mostSigBits ? -1 : 1;  }  if (this.leastSigBits != uuid.leastSigBits) {    return this.leastSigBits < uuid.leastSigBits ? -1 : 1;  }  return 0;}  }
class C{  public MyRaster(Polygon polygon,double resolution,Double radius,int KdeType,Color color){  this.resolution=resolution;  envelope=polygon.getEnvelope();  originX=Double.POSITIVE_INFINITY;  originY=Double.NEGATIVE_INFINITY;  for (  Coordinate c : envelope.getCoordinates()) {    originX=Math.min(originX,c.x);    originY=Math.max(originY,c.y);  }  this.radius=radius;  this.KdeType=KdeType;  this.color=color;  Coordinate[] c=polygon.getEnvelope().getCoordinates();  if ((c[2].x - c[0].x) / this.resolution < 1 || (c[2].y - c[0].y) / this.resolution < 1) {    log.warn("Adjust stride! The envelope of the area fits within a single pixel.");  } else {    int numberOfPixelsX=(int)Math.ceil((c[2].x - c[0].x) / this.resolution);    int numberOfPixelsY=(int)Math.ceil((c[2].y - c[0].y) / this.resolution);    bufferedImage=new BufferedImage(numberOfPixelsX,numberOfPixelsY,BufferedImage.TYPE_INT_ARGB);    setInitialColor(this.color);    imageMatrix=new SparseDoubleMatrix2D(numberOfPixelsX,numberOfPixelsY);  }}  }
class C{  public final void removeFromTiers(String spec){  for (  Set<MyNode> tier : tierSpecs) {    tier.remove(getVar(spec));  }}  }
class C{  public static boolean matchUserAgent(Element elt,UserAgent ua){  test:   if (elt.hasAttributeNS(null,SVG_SYSTEM_LANGUAGE_ATTRIBUTE)) {    String sl=elt.getAttributeNS(null,SVG_SYSTEM_LANGUAGE_ATTRIBUTE);    if (sl.length() == 0)     return false;    StringTokenizer st=new StringTokenizer(sl,", ");    while (st.hasMoreTokens()) {      String s=st.nextToken();      if (matchUserLanguage(s,ua.getLanguages())) {        break test;      }    }    return false;  }  if (elt.hasAttributeNS(null,SVG_REQUIRED_FEATURES_ATTRIBUTE)) {    String rf=elt.getAttributeNS(null,SVG_REQUIRED_FEATURES_ATTRIBUTE);    if (rf.length() == 0)     return false;    StringTokenizer st=new StringTokenizer(rf," ");    while (st.hasMoreTokens()) {      String s=st.nextToken();      if (!ua.hasFeature(s)) {        return false;      }    }  }  if (elt.hasAttributeNS(null,SVG_REQUIRED_EXTENSIONS_ATTRIBUTE)) {    String re=elt.getAttributeNS(null,SVG_REQUIRED_EXTENSIONS_ATTRIBUTE);    if (re.length() == 0)     return false;    StringTokenizer st=new StringTokenizer(re," ");    while (st.hasMoreTokens()) {      String s=st.nextToken();      if (!ua.supportExtension(s)) {        return false;      }    }  }  return true;}  }
class C{  public void countThreads(int numThreads){  if (threadGroupToMonitor != null && Thread.currentThread().getThreadGroup().getName().equals(threadGroupToMonitor)) {    maxThreads=Math.max(maxThreads,numThreads);  }}  }
class C{  public Analyzer clear(){  data.clear();  return this;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    if (requestedCameraId >= 0) {      theCamera=OpenCameraInterface.open(requestedCameraId);    } else {      theCamera=OpenCameraInterface.open();    }    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);  }  Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  private List<Task> fetchFromServer(String pattern,boolean everywhere,ProgressIndicator cancelled){  int offset, limit;  if (!myOldPattern.equals(pattern)) {    myCurrentOffset=offset=0;    limit=GotoTaskAction.PAGE_SIZE;  } else   if (myOldEverywhere != everywhere) {    offset=0;    myCurrentOffset=limit=myCurrentOffset + GotoTaskAction.PAGE_SIZE;  } else {    offset=myCurrentOffset;    limit=GotoTaskAction.PAGE_SIZE;    myCurrentOffset+=GotoTaskAction.PAGE_SIZE;  }  List<Task> tasks=TaskSearchSupport.getRepositoriesTasks(TaskManager.getManager(myProject),pattern,offset,limit,true,everywhere,cancelled);  myOldEverywhere=everywhere;  myOldPattern=pattern;  return tasks;}  }
class C{  public boolean attempt(int old,int val,Offset offset){  return this.plus(offset).attempt(old,val);}  }
class C{  private void showCustomToast(String message,int duration){  LayoutInflater inflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);  View view=inflater.inflate(R.layout.toast_view,null);  TextView tv=(TextView)view.findViewById(R.id.message);  tv.setText(message);  Toast t=new Toast(this);  t.setView(view);  t.setDuration(duration);  t.setGravity(Gravity.CENTER,0,0);  t.show();}  }
class C{  public void initialize(RuntimeServices rs) throws Exception {  rsvc=rs;  rsvc.info("Default ResourceManager initializing. (" + this.getClass() + ")");  ResourceLoader resourceLoader;  assembleResourceLoaderInitializers();  for (int i=0; i < sourceInitializerList.size(); i++) {    ExtendedProperties configuration=(ExtendedProperties)sourceInitializerList.get(i);    String loaderClass=configuration.getString("class");    if (loaderClass == null) {      rsvc.error("Unable to find '" + configuration.getString(RESOURCE_LOADER_IDENTIFIER) + ".resource.loader.class' specification in configuation."+ " This is a critical value.  Please adjust configuration.");      continue;    }    resourceLoader=ResourceLoaderFactory.getLoader(rsvc,loaderClass);    resourceLoader.commonInit(rsvc,configuration);    resourceLoader.init(configuration);    resourceLoaders.add(resourceLoader);  }  logWhenFound=rsvc.getBoolean(RuntimeConstants.RESOURCE_MANAGER_LOGWHENFOUND,true);  String claz=rsvc.getString(RuntimeConstants.RESOURCE_MANAGER_CACHE_CLASS);  Object o=null;  if (claz != null && claz.length() > 0) {    try {      o=Class.forName(claz).newInstance();    } catch (    ClassNotFoundException cnfe) {      String err="The specified class for ResourceCache (" + claz + ") does not exist (or is not accessible to the current classlaoder).";      rsvc.error(err);      o=null;    }    if (!(o instanceof ResourceCache)) {      String err="The specified class for ResourceCache (" + claz + ") does not implement org.apache.runtime.resource.ResourceCache."+ " ResourceManager. Using default ResourceCache implementation.";      rsvc.error(err);      o=null;    }  }  if (o == null)   o=new ResourceCacheImpl();  globalCache=(ResourceCache)o;  globalCache.initialize(rsvc);  rsvc.info("Default ResourceManager initialization complete.");}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public boolean containsIssuerSerial(){  return this.lengthIssuerSerial() > 0;}  }
class C{  public byte byteAt(int index){  bb.position(index);  return bb.get();}  }
class C{  boolean isLiteral(int index){  if (isValidMask() && index < string.length()) {    return literalMask.get(index);  }  return false;}  }
class C{  public void start(){  animating=true;}  }
class C{  public IProxy(int type){  this.type=type;}  }
class C{  protected void clearOutEvents(){}  }
class C{  public ByteList ConstantQualifiedName(ByteList bytes,int name_index,int namespace_index,boolean isAttribute){  if (show_bytecode) {    cpool_out.write("\n      ConstantQualifiedName " + (isAttribute ? "@" : "") + name_index+ " "+ namespace_index);  }  bytes=Byte(bytes,isAttribute ? CONSTANT_QnameA : CONSTANT_Qname);  bytes=Int(bytes,namespace_index);  bytes=Int(bytes,name_index);  return bytes;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public List() throws HeadlessException {  this(0,false);}  }
class C{  public void registerBlob(IBlobHandler handler,int x,int y,int z){  AreaBlob blob=blobs.get(handler);  if (blob == null) {    blob=new AtmosphereBlob(handler);    blobs.put(handler,blob);    blob.setData(AtmosphereType.AIR);  }}  }
class C{  public boolean applyOptions() throws IOException {  URLHandlerSettings.BROWSER.setValue(BROWSER.getText());  return false;}  }
class C{  public SamWriterWrapper(File baseOutput,SdfReaderWrapper reader,boolean gzip) throws IOException {  this(baseOutput,reader,gzip,EXTS);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_ACTIVITY_2__MORE_CODE_1:    return moreCode_1 != null && !moreCode_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private void addEventFromProperty(String evt,HadoopJobInfo info,String propName){  String val=info.property(propName);  if (!F.isEmpty(val)) {    try {      evts.add(new T2<>(evt + " " + nodeId,Long.parseLong(val)));    } catch (    NumberFormatException e) {      throw new IllegalStateException("Invalid value '" + val + "' of property '"+ propName+ "'",e);    }  }}  }
class C{  public static String compareResultSets(SelectResults sr1,SelectResults sr2){  ObjectType type1, type2;  String failureString=null;  type1=sr1.getCollectionType().getElementType();  Assert.assertNotNull("PartitionedRegionTestHelper#compareResultSets: Type 1 is NULL " + type1,type1);  type2=sr2.getCollectionType().getElementType();  Assert.assertNotNull("PartitionedRegionTestHelper#compareResultSets: Type 2 is NULL " + type2,type2);  if ((type1.getClass().getName()).equals(type2.getClass().getName())) {    getLogger().info("PartitionedRegionTestHelper#compareResultSets: Both Search Results are of the same Type i.e.--> " + type1);  } else {    getLogger().error("PartitionedRegionTestHelper#compareTwoQueryResults: Classes are : " + type1.getClass().getName() + " "+ type2.getClass().getName());    failureString="PartitionedRegionTestHelper#compareResultSets: FAILED:Search result Type is different in both the cases" + type1.getClass().getName() + " "+ type2.getClass().getName();    Assert.fail("PartitionedRegionTestHelper#compareResultSets: FAILED:Search result Type is different in both the cases");    return failureString;  }  if ((sr1.size()) == (sr2.size())) {    getLogger().info("PartitionedRegionTestHelper#compareResultSets: Both Search Results are non-zero and are of Same Size i.e.  Size= " + sr1.size());  } else {    getLogger().error("PartitionedRegionTestHelper#compareResultSets: FAILED:Search resultSet size are different in both the cases");    failureString="PartitionedRegionTestHelper#compareResultSets: FAILED:Search resultSet size are different in both the cases" + sr1.size() + " "+ sr2.size();    Assert.fail("PartitionedRegionTestHelper#compareResultSets: FAILED:Search resultSet size are different in both the cases");  }  return failureString;}  }
class C{  public static String substituteArguments(String parameterized,Object[] arguments){  if ((parameterized == null) || (arguments == null))   return parameterized;  return MessageFormat.format(parameterized,arguments).trim();}  }
class C{  public static void clearBitmap(Bitmap bitmap,int color){  bitmap.eraseColor(color);}  }
class C{  public Birthplace(double latitude,double longitude){  super(latitude,longitude);}  }
class C{  public void send(OutputStream os) throws IOException {  PacketOutputStream writer=(PacketOutputStream)os;  writer.startPacket(packSeq);  writer.write(password.getBytes());  writer.write(0);  writer.finishPacketWithoutRelease(false);  writer.releaseBuffer();}  }
class C{  public static void compress(){  Alphabet DNA=Alphabet.DNA;  String s=BinaryStdIn.readString();  int n=s.length();  BinaryStdOut.write(n);  for (int i=0; i < n; i++) {    int d=DNA.toIndex(s.charAt(i));    BinaryStdOut.write(d,2);  }  BinaryStdOut.close();}  }
class C{  private void mergeHi(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  T[] a=this.a;  T[] tmp=ensureCapacity(len2);  System.arraycopy(a,base2,tmp,0,len2);  int cursor1=base1 + len1 - 1;  int cursor2=len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      if (c.compare(tmp[cursor2],a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 0 && len2 > 1;      count1=len1 - gallopRight(tmp[cursor2],a,base1,len1,len1 - 1,c);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft(a[cursor1],tmp,0,len2,len2 - 1,c);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    if (DEBUG)     assert len1 > 0;    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len1 == 0;    if (DEBUG)     assert len2 > 0;    System.arraycopy(tmp,0,a,dest - (len2 - 1),len2);  }}  }
class C{  public static IMultiPoint[] randomPoints(int n,int scale){  CircleGenerator circle=new CircleGenerator(1);  IPoint[] pts=circle.generate(n);  IMultiPoint points[]=new IMultiPoint[pts.length];  for (int i=0; i < points.length; i++) {    points[i]=new TwoDPoint(pts[i].getX(),pts[i].getY());  }  return points;}  }
class C{  @Override public void run(){  amIActive=true;  try {    String inputFilesString="";    String sagaHeaderFile="";    String sagaDataFile="";    int i=0;    int row, col, rows=0, cols=0;    double north=0, south=0, east=0, west=0, cellSize=0;    long dataFileOffset=0;    double zFactor=1.0;    String description="";    String xyUnit="not specified";    String dataFormat="";    boolean topToBottom=false;    int rowStart=0;    int rowIncrement=1;    java.nio.ByteOrder byteorder=java.nio.ByteOrder.BIG_ENDIAN;    String[] imageFiles;    int numImages=0;    double noData=-32768;    String returnHeaderFile="";    DataInputStream in=null;    BufferedReader br=null;    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      String inputFile=imageFiles[i];      File file=new File(inputFile);      if (!file.exists()) {        showFeedback("Image file does not exist.");        break;      }      String fileExtension=whitebox.utilities.FileUtilities.getFileExtension(inputFile).toLowerCase();      if (fileExtension.equals("sgrd")) {        sagaHeaderFile=inputFile;        sagaDataFile=inputFile.replace(fileExtension,"sdat");        if (!new File(sagaDataFile).exists()) {          showFeedback("Image file does not exist.");          break;        }      } else {        sagaDataFile=inputFile;        sagaHeaderFile=inputFile.replace(fileExtension,"sgrd");        if (!new File(sagaHeaderFile).exists()) {          showFeedback("Image file does not exist.");          break;        }      }      FileInputStream fstream=new FileInputStream(sagaHeaderFile);      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      String delimiter="\t";      String line;      String[] str;      while ((line=br.readLine()) != null) {        str=line.split(delimiter);        if (str.length <= 1) {          delimiter=" ";          str=line.split(delimiter);          if (str.length <= 1) {            delimiter=",";            str=line.split(delimiter);          }        }        if (str[0].toLowerCase().contains("description")) {          description=str[str.length - 1].replace("=","").trim();        } else         if (str[0].toLowerCase().contains("unit")) {          if (!str[str.length - 1].replace("=","").trim().isEmpty()) {            xyUnit=str[str.length - 1].replace("=","").trim();          }        } else         if (str[0].toLowerCase().contains("datafile_offset")) {          dataFileOffset=Long.parseLong(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("dataformat")) {          dataFormat=str[str.length - 1].replace("=","").trim().toLowerCase();        } else         if (str[0].toLowerCase().contains("byteorder_big")) {          if (str[str.length - 1].toLowerCase().contains("f")) {            byteorder=java.nio.ByteOrder.LITTLE_ENDIAN;          } else {            byteorder=java.nio.ByteOrder.BIG_ENDIAN;          }        } else         if (str[0].toLowerCase().contains("position_xmin")) {          west=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("position_ymin")) {          south=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("cellcount_x")) {          cols=Integer.parseInt(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("cellcount_y")) {          rows=Integer.parseInt(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("cellsize")) {          cellSize=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("z_factor")) {          zFactor=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("nodata_value")) {          noData=Double.parseDouble(str[str.length - 1].replace("=","").trim());        } else         if (str[0].toLowerCase().contains("toptobottom")) {          topToBottom=!str[str.length - 1].toLowerCase().contains("f");        }      }      north=south + cellSize * rows;      east=west + cellSize * cols;      if (!topToBottom) {        rowStart=rows - 1;        rowIncrement=-1;      }      in.close();      br.close();      WhiteboxRasterBase.DataType outputDataType;switch (dataFormat) {case "bit":case "byte_unsigned":case "byte":case "shortint_unsigned":case "shortint":        outputDataType=WhiteboxRasterBase.DataType.INTEGER;      break;case "float":    outputDataType=WhiteboxRasterBase.DataType.FLOAT;  break;default :outputDataType=WhiteboxRasterBase.DataType.DOUBLE;break;}if (zFactor < 1.0 && outputDataType == WhiteboxRasterBase.DataType.INTEGER) {outputDataType=WhiteboxRasterBase.DataType.FLOAT;}String whiteboxHeaderFile=imageFiles[i].replace(fileExtension,"dep");if (i == 0) {returnHeaderFile=whiteboxHeaderFile;}WhiteboxRaster output=new WhiteboxRaster(whiteboxHeaderFile,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,outputDataType,noData,noData);file=new File(sagaDataFile);int fileLength=(int)file.length();RandomAccessFile rIn=null;FileChannel inChannel=null;ByteBuffer buf=ByteBuffer.allocate(fileLength);rIn=new RandomAccessFile(sagaDataFile,"r");inChannel=rIn.getChannel();inChannel.position(0);inChannel.read(buf);buf.order(byteorder);buf.rewind();byte[] ba=new byte[(int)fileLength];buf.get(ba);double z;row=0;col=0;int pos=(int)dataFileOffset;int oldProgress=-1;boolean flag=true;row=rowStart;switch (dataFormat) {case "bit":byte b;while (flag) {b=buf.get(pos);for (int bit=0; bit < 8; bit++) {if (BitOps.checkBit(b,bit)) {output.setValue(row,col,1.0);} else {output.setValue(row,col,0.0);}col++;if (col >= cols) {row+=rowIncrement;progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {  updateProgress("Importing SAGA file...",progress);  oldProgress=progress;}}if (row >= rows || row < 0) {flag=false;}}pos+=1;if (pos >= fileLength) {flag=false;}}case "byte_unsigned":while (flag) {for (col=0; col < cols; col++) {z=(double)(Unsigned.getUnsignedByte(buf,pos)) * zFactor;output.setValue(row,col,z);pos+=1;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "byte":while (flag) {for (col=0; col < cols; col++) {z=(double)buf.get(pos) * zFactor;output.setValue(row,col,z);pos+=1;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "shortint_unsigned":while (flag) {for (col=0; col < cols; col++) {z=(double)(Unsigned.getUnsignedShort(buf,pos)) * zFactor;output.setValue(row,col,z);pos+=2;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "shortint":while (flag) {for (col=0; col < cols; col++) {z=(double)buf.getShort(pos) * zFactor;output.setValue(row,col,z);pos+=2;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "integer":while (flag) {for (col=0; col < cols; col++) {z=(double)buf.getInt(pos) * zFactor;output.setValue(row,col,z);pos+=4;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}break;case "integer_unsigned":while (flag) {for (col=0; col < cols; col++) {z=(double)(Unsigned.getUnsignedInt(buf,pos)) * zFactor;output.setValue(row,col,z);pos+=4;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}case "float":while (flag) {for (col=0; col < cols; col++) {z=(double)buf.getFloat(pos) * zFactor;output.setValue(row,col,z);pos+=4;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}break;default :while (flag) {for (col=0; col < cols; col++) {z=buf.getDouble(pos) * zFactor;output.setValue(row,col,z);pos+=8;}progress=(int)(100f * (row - rowStart) / (rows - 1));if (progress != oldProgress) {updateProgress("Importing SAGA file...",progress);oldProgress=progress;}row+=rowIncrement;if (row >= rows || row < 0) {flag=false;}}break;}inChannel.close();output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());output.flush();output.findMinAndMaxVals();output.writeHeaderFile();output.close();}returnData(returnHeaderFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static boolean intersectCircleCircle(Vector2dc centerA,double radiusSquaredA,Vector2dc centerB,double radiusSquaredB,Vector3d intersectionCenterAndHL){  return intersectCircleCircle(centerA.x(),centerA.y(),radiusSquaredA,centerB.x(),centerB.y(),radiusSquaredB,intersectionCenterAndHL);}  }
class C{  void prepareSim(){  if (events == null) {    throw new RuntimeException("No valid Events Object (events == null)");  }  createAgents();  this.initSimTimer();  this.infoTime=Math.floor(this.simTimer.getSimStartTime() / INFO_PERIOD) * INFO_PERIOD;  for (  MobsimEngine mobsimEngine : mobsimEngines) {    mobsimEngine.onPrepareSim();  }}  }
class C{  public static boolean isPassableBlock(World worldObj,int ix,int iy,int iz){  return !worldObj.getBlockState(new BlockPos(ix,iy,iz)).getBlock().getMaterial().isSolid();}  }
class C{  private ScriptExecutor createScriptExecutor(String script) throws ReplicatorException, InterruptedException {  ScriptExecutor exec;  if (script.toLowerCase().endsWith(".js"))   exec=new JavascriptExecutor(); else {    throw new ReplicatorException("Unrecognized batch script suffix; only .js is supported: " + script);  }  exec.setScript(script);  exec.setDefaultDataSourceName(this.dataSource);  return exec;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:38.060 -0500",hash_original_method="BC9161978762C6E74741C357EC2A66B7",hash_generated_method="02CF73D626607FB8E47E0621DEB845B1") public long timestamp(){  if (version != 1) {    throw new UnsupportedOperationException();  }  return timestamp;}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  @Redirect(method=CHUNK_CACHE_GET_BLOCK_STATE,at=@At(value="INVOKE",target=BLOCK_POS_GETY),require=1) private int blockPosGetYRedirect(BlockPos pos){  return MixinUtils.getReplacementY(worldObj,pos);}  }
class C{  public static TestSuiteLocalSearch selectTestSuiteLocalSearch(){  return new TestSuiteLocalSearch();}  }
class C{  public boolean optBoolean(int index){  return optBoolean(index,false);}  }
class C{  public static DateTimeFormatter weekyearWeek(){  return Constants.ww;}  }
class C{  private void nextGeneration(){  trip.signalAll();  count=parties;  generation=new Generation();}  }
class C{  public void makeDirty(){  updateMatrix=true;}  }
class C{  private Spatial findAssetLinkNode(final Spatial spat){  Spatial s=spat;  Spatial linked=null;  while (s != null) {    if (s instanceof AssetLinkNode) {      linked=s;    }    s=s.getParent();  }  if (linked != null) {    return linked;  }  return spat;}  }
class C{  public static void clearCommandArgs(){  sCommandArgs=null;  sCommandLine=null;}  }
class C{  public CholeskyDecomposition(Matrix Arg){  double[][] A=Arg.getArray();  n=Arg.getRowDimension();  L=new double[n][n];  isspd=(Arg.getColumnDimension() == n);  for (int j=0; j < n; j++) {    double[] Lrowj=L[j];    double d=0.0;    for (int k=0; k < j; k++) {      double[] Lrowk=L[k];      double s=0.0;      for (int i=0; i < k; i++) {        s+=Lrowk[i] * Lrowj[i];      }      Lrowj[k]=s=(A[j][k] - s) / L[k][k];      d=d + s * s;      isspd=isspd & (A[k][j] == A[j][k]);    }    d=A[j][j] - d;    isspd=isspd & (d > 0.0);    L[j][j]=Math.sqrt(Math.max(d,0.0));    for (int k=j + 1; k < n; k++) {      L[j][k]=0.0;    }  }}  }
class C{  public CModuleNodeComponent(final JTree projectTree,final IDatabase database,final INaviAddressSpace addressSpace,final INaviModule module,final IViewContainer container){  super(new BorderLayout());  Preconditions.checkNotNull(database,"IE01977: Database argument can't be null");  this.module=Preconditions.checkNotNull(module,"IE01978: Module argument can't be null");  tabbedPane.addTab("Overview",OVERVIEW_ICON,overviewPanel=new CModuleOverviewPanel(projectTree,database,addressSpace,module,container));  tabbedPane.addTab("Functions" + String.format(" (%d)",module.getFunctionCount()),FUNCTIONS_ICON,functionsPanel=new CNativeFunctionViewsNodeComponent(projectTree,database,module,container));  tabbedPane.addTab("Views" + String.format(" (%d)",module.getCustomViewCount()),VIEWS_ICON,viewsPanel=new CModuleViewsContainerComponent(projectTree,container));  tabbedPane.addTab("Debug Traces",TRACES_ICON,tracesPanel=new CTracesNodeComponent(projectTree,container));  tabbedPane.addTab("Sections and Types",DATA_ICON,dataPanel=new CDataNodeComponent(module,container));  tabbedPane.setEnabledAt(1,module.isLoaded());  tabbedPane.setEnabledAt(2,module.isLoaded());  tabbedPane.setEnabledAt(3,module.isLoaded());  tabbedPane.setEnabledAt(4,module.isLoaded());  module.addListener(internalModuleListener);  add(tabbedPane);  lookup.put(module,this);}  }
class C{  public int i(){  return i;}  }
class C{  public int readShort() throws IOException {  return ((this.read() << 8 | this.read()) << 16) >> 16;}  }
class C{  public boolean match(SwitchStatement node,Object other){  if (!(other instanceof SwitchStatement)) {    return false;  }  SwitchStatement o=(SwitchStatement)other;  return (safeSubtreeMatch(node.getExpression(),o.getExpression()) && safeSubtreeListMatch(node.statements(),o.statements()));}  }
class C{  void moveFromPrimary(){  ensureNotFrozen();  version++;  if (!primary) {    throw new IllegalShardRoutingStateException(this,"Not primary, can't move to replica");  }  primary=false;}  }
class C{  public final MathVector intcoord(MathVector vp){  MathVector xp=new MathVector();  double xsc=(vp.value(0) - rmin.value(0)) / rsize;  if (0.0 <= xsc && xsc < 1.0) {    xp.value(0,Math.floor(Node.IMAX * xsc));  } else {    return null;  }  xsc=(vp.value(1) - rmin.value(1)) / rsize;  if (0.0 <= xsc && xsc < 1.0) {    xp.value(1,Math.floor(Node.IMAX * xsc));  } else {    return null;  }  xsc=(vp.value(2) - rmin.value(2)) / rsize;  if (0.0 <= xsc && xsc < 1.0) {    xp.value(2,Math.floor(Node.IMAX * xsc));  } else {    return null;  }  return xp;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean countWithEarlyTermination(IndexSearcher searcher,Filter filter,Query query,EarlyTerminatingCollector collector) throws IOException {  try {    if (filter == null) {      searcher.search(query,collector);    } else {      searcher.search(query,filter,collector);    }  } catch (  EarlyTerminationException e) {    return true;  }  return false;}  }
class C{  private static int uarimaxLe(double value,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ixMax=bv.length;  if (value <= bv[0] || value > bv[bv.length - 1])   return ixMax;  int ix=Arrays.binarySearch(bv,value);  if (ix < 0)   ix=Math.abs(ix) - 1;  ixMax=bvi[ix] + 1;  return ixMax;}  }
class C{  @Override public int hashCode(){  int result;  long temp;  temp=Double.doubleToLongBits(this.lower);  result=(int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.upper);  result=29 * result + (int)(temp ^ (temp >>> 32));  return result;}  }
class C{  public Vector3d mulPosition(Matrix4x3dc mat){  return mulPosition(mat,this);}  }
class C{  private ResourceChangeValidator(){  super();}  }
class C{  protected DecompoundedWord compoundToSplit(Compound aCompound){  String s="";  String left=aCompound.getLeftAtom();  if (left != null) {    Affix bounding=aCompound.getBoundingSuffix();    left=left.substring(0,left.length() - bounding.getDel().length());    if (bounding.getAdd().length() > 0) {      left+="(" + bounding.getAdd() + ")";    }    s+=left + "+";  }  Affix suffix=aCompound.getInflectionSuffix();  String right=aCompound.getRightAtom();  right=right.substring(0,right.length() - suffix.getDel().length());  if (suffix.getAdd().length() > 0) {    right+="(" + suffix.getAdd() + ")";  }  s+=right;  return DecompoundedWord.createFromString(s);}  }
class C{  XScrollbarPeer(Scrollbar target){  super(target);  this.target=target;  xSetVisible(true);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected ConsoleParametersProcessor createParametersProcessor(String programName){  ConsoleParameter parameter;  ConsoleParametersProcessor parametersProcessor=new ConsoleParametersProcessor(programName);  parameter=new ConsoleParameter("projectDir","The crux project folder .",true,true);  parameter.addParameterOption(new ConsoleParameterOption("dirName","Folder name"));  parametersProcessor.addSupportedParameter(parameter);  parametersProcessor.addSupportedParameter(new ConsoleParameter("-override","Override any existing mapping.",false,true));  parametersProcessor.addSupportedParameter(new ConsoleParameter("-help","Display the usage screen.",false,true));  parametersProcessor.addSupportedParameter(new ConsoleParameter("-h","Display the usage screen.",false,true));  return parametersProcessor;}  }
class C{  private void replaceAppEvent(Context context,AptoideDatabase db,String replaceEvent){  db.confirmRollBackAction(replaceEvent,RollBackItem.Action.UPDATING.toString(),RollBackItem.Action.UPDATED.toString());  Logger.d("InstalledBroadcastReceiver","Updated rollback action");  try {    PackageManager mPm=context.getPackageManager();    PackageInfo pkg=mPm.getPackageInfo(replaceEvent,PackageManager.GET_SIGNATURES);    UpdatesApi.Package aPackage=new UpdatesApi.Package();    aPackage.signature=AptoideUtils.Algorithms.computeSHA1sumFromBytes(pkg.signatures[0].toByteArray()).toUpperCase(Locale.ENGLISH);    aPackage.vercode=pkg.versionCode;    aPackage.packageName=pkg.packageName;    db.insertInstalled(aPackage);    Logger.d("AptoideUpdates","Inserting " + aPackage.packageName);    Analytics.ApplicationInstall.replaced(pkg.packageName);  } catch (  Exception e) {    Logger.printException(e);  }}  }
class C{  public void deleteTag(int tagId){  int ifdId=getDefinedTagDefaultIfd(tagId);  deleteTag(tagId,ifdId);}  }
class C{  public void addFileset(final FileSet set){  filesets.add(set);}  }
class C{  public void reintializeQuota(String volume){  QuotaCommands commands=new QuotaCommands(server.getNaServer());  commands.turnQuotaOff(volume);  commands.turnQuotaOn(volume);}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  mContext=context;  mAccount=account;  mAuthTokenType=authTokenType;  mNotifyAuthFailure=notifyAuthFailure;}  }
class C{  protected void closeFile(){  closeFile(true);}  }
class C{  private static void WriteNetworkChangeEvents(List<LinkChangeEvent> linkChangeEvents,String filepath){  final BufferedWriter out=IOUtils.getBufferedWriter(filepath);  try {    out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");    out.newLine();    out.write("<networkChangeEvents xmlns=\"http://www.matsim.org/files/dtd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.matsim.org/files/dtd http://www.matsim.org/files/dtd/networkChangeEvents.xsd\">");    out.newLine();    out.newLine();    for (    LinkChangeEvent event : linkChangeEvents) {      out.write("\t<networkChangeEvent startTime=\"" + event.getStarttime() + "\">");      out.newLine();      out.write("\t\t<link refId=\"" + event.getLinkId() + "\"/>");      out.newLine();      out.write("\t\t<link refId=\"" + event.getLinkId() + "\"/>");      out.newLine();      out.write("\t\t<flowCapacity type=\"absolute\" value=\"0\"/>");      out.newLine();      out.write("\t</networkChangeEvent>");      out.newLine();      out.write("\t<networkChangeEvent startTime=\"" + event.getStoptime() + "\">");      out.newLine();      out.write("\t\t<link refId=\"" + event.getLinkId() + "\"/>");      out.newLine();      out.write("\t\t<link refId=\"" + event.getLinkId() + "\"/>");      out.newLine();      out.write("\t\t<flowCapacity type=\"absolute\" value=\"" + event.getCapacity() + "\"/>");      out.newLine();      out.write("\t</networkChangeEvent>");      out.newLine();      out.newLine();    }    out.write("</networkChangeEvents>");    out.newLine();    out.close();    log.info("networkChangeEvents file written!");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void reset(){  pos=0;}  }
class C{  public HttpRequest buildRequest(String requestMethod,GenericUrl url,HttpContent content) throws IOException {  HttpRequest request=transport.buildRequest();  if (initializer != null) {    initializer.initialize(request);  }  request.setRequestMethod(requestMethod);  if (url != null) {    request.setUrl(url);  }  if (content != null) {    request.setContent(content);  }  return request;}  }
class C{  public void dismiss(){  mWindow.dismiss();  isShowing=false;}  }
class C{  public ShapeRenderer(int size){  setBaseSize(size);}  }
class C{  private Vector3[] toVector3SplineInterpolation(final int steps){  getPointList();  final int start=1;  final int end=pointList.size() - 2;  final int count=(end - start) * steps;  final Vector3[] vectors=new Vector3[count];  int index=start;  for (int i=0; i < count; i++) {    final int is=i % steps;    if (0 == is && i >= steps) {      index++;    }    final double t=is / (double)steps;    final int p0=index - 1;    final int p1=index;    final int p2=index + 1;    final int p3=index + 2;    vectors[i]=spline.interpolate(pointList.get(p0),pointList.get(p1),pointList.get(p2),pointList.get(p3),t);  }  return vectors;}  }
class C{  public NTRUSigningPrivateKeyParameters(byte[] b,NTRUSigningKeyGenerationParameters params) throws IOException {  this(new ByteArrayInputStream(b),params);}  }
class C{  @SuppressWarnings("unchecked") public UniformGenerator(Vector<String> values){  _values=(Vector<String>)values.clone();  _laststring=null;  _gen=new UniformIntegerGenerator(0,values.size() - 1);}  }
class C{  public static boolean isWindowsOS(){  String osName=System.getProperty("os.name");  return osName != null && osName.toLowerCase().contains("windows");}  }
class C{  public void nextBytes(byte[] bytes){  org.evosuite.runtime.Random.nextBytes(bytes);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof SystemMemberRegionJmxImpl)) {    return false;  }  SystemMemberRegionJmxImpl other=(SystemMemberRegionJmxImpl)obj;  return this.getMBeanName().equals(other.getMBeanName());}  }
class C{  public double stz(final double z){  if (z >= 0) {    if (z < length)     return z;    return z - length;  }  return z + length;}  }
class C{  protected int index(int slice,int row,int column){  return sliceZero + slice * sliceStride + rowZero + row * rowStride + columnZero + column * columnStride;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public PKIBody(int type,ASN1Encodable content){  tagNo=type;  body=getBodyForType(type,content);}  }
class C{  private boolean checkIdentifierType(IdentifierType identifierType,ExpressionObject<?> object) throws ScopeException {  if (identifierType == IdentifierType.DEFAULT) {    return true;  } else {    if (object instanceof Metric && identifierType == METRIC) {      return true;    } else     if (object instanceof Dimension && identifierType == DIMENSION) {      return true;    } else {      return false;    }  }}  }
class C{  public static RE mkUnion(RE x,RE y) throws InterruptedException {  if (Thread.interrupted())   throw new InterruptedException();  if (x.op.equals(ReOp.EMPTY)) {    return y;  }  if (y.op.equals(ReOp.EMPTY)) {    return x;  }  RE res=new RE(ReOp.UNION);  res.alts=new HashSet<RE>();  if (x.meta != null) {    res.alts.add(x);  } else {    res.alts.addAll(x.getAlts());  }  if (y.meta != null) {    res.alts.add(y);  } else {    res.alts.addAll(y.getAlts());  }  if (res.alts.size() == 0) {    return empty;  } else   if (res.alts.size() == 1) {    for (    RE e : res.alts) {      return e;    }  }  return res;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.768 -0500",hash_original_method="385DC57C25B266614A0F3F767A2E43B1",hash_generated_method="5C9BCD0CE231318AE3A038989B9BE07D") public boolean isWatchingCursor(View view){  return false;}  }
class C{  public void endNested() throws IOException {  String currentBoundary=parts.pop();  if (currentBoundary != null) {    out.write(CRLF);    out.write(DASHDASH);    writeString(currentBoundary);    out.write(DASHDASH);    out.write(CRLF);  }}  }
class C{  static private void printAnnotationArray(String prefix,Annotation[] arr){  TreeMap<String,Annotation> sorted=new TreeMap<String,Annotation>();  for (  Annotation a : arr) {    sorted.put(a.annotationType().getName(),a);  }  for (  Annotation a : sorted.values()) {    System.out.println(prefix + "  " + annotationToString(a));    System.out.println(prefix + "    " + a.annotationType());  }}  }
class C{  public Graphics modifyGraphicsForPainting(Graphics graphics){  return graphics;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset,boolean hyperlink){  if (firstToken == null) {    firstToken=tokenFactory.createToken(array,start,end,startOffset,tokenType);    currentToken=firstToken;  } else {    currentToken.setNextToken(tokenFactory.createToken(array,start,end,startOffset,tokenType));    previousToken=currentToken;    currentToken=currentToken.getNextToken();  }  currentToken.setHyperlink(hyperlink);}  }
class C{  static String parse(final BluetoothGattCharacteristic characteristic,final int offset){  final int year=characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT16,offset);  final int month=characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8,offset + 2);  final int day=characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8,offset + 3);  final int hours=characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8,offset + 4);  final int minutes=characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8,offset + 5);  final int seconds=characteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT8,offset + 6);  final Calendar calendar=Calendar.getInstance();  calendar.set(year,month - 1,day,hours,minutes,seconds);  return String.format(Locale.US,"%1$te %1$tb %1$tY, %1$tH:%1$tM:%1$tS",calendar);}  }
class C{  public AccountHeaderBuilder withOnlySmallProfileImagesVisible(boolean onlySmallProfileImagesVisible){  this.mOnlySmallProfileImagesVisible=onlySmallProfileImagesVisible;  return this;}  }
class C{  public void load(){}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public RangeInfo subListBorders(int size){  if (inclusive == null) {    throw new IllegalStateException("Should not call subListBorders on a non-inclusive aware IntRange");  }  int tempFrom=from;  if (tempFrom < 0) {    tempFrom+=size;  }  int tempTo=to;  if (tempTo < 0) {    tempTo+=size;  }  if (tempFrom > tempTo) {    return new RangeInfo(inclusive ? tempTo : tempTo + 1,tempFrom + 1,true);  }  return new RangeInfo(tempFrom,inclusive ? tempTo + 1 : tempTo,false);}  }
class C{  public static void main(String args[]) throws Exception {  Instances D=Evaluation.loadDataset(args);  MLUtils.prepareData(D);  int L=D.classIndex();  double CD[][]=null;  if (args[2].equals("L")) {    String I="I";    if (args.length >= 3)     I=args[3];    CD=StatUtils.LEAD(D,new SMO(),new Random(),I);  } else {    CD=StatUtils.margDepMatrix(D,args[2]);  }  System.out.println(MatrixUtils.toString(CD,"M" + args[2]));}  }
class C{  @Override public void close() throws IOException {  if (!closed) {    finish();    inf.end();    out.close();    closed=true;  }}  }
class C{  public void pop(){  mv.visitInsn(Opcodes.POP);}  }
class C{  protected void createInfoLabel(Composite parent,FormToolkit toolkit,String text){  Label label=toolkit.createLabel(parent,"");  label.setToolTipText(text);  label.setImage(InspectIT.getDefault().getImage(InspectITImages.IMG_INFORMATION));}  }
class C{  private void mergeBig(int from,int second,int to){  int len1=second - from, len2=to - second + 1;  int firstCut, secondCut, newSecond;  if (len1 > len2) {    firstCut=from + len1 / 2;    secondCut=findLower(data[firstCut],second,to);    int len=secondCut - second;    newSecond=firstCut + len;  } else {    int len=len2 / 2;    secondCut=second + len;    firstCut=findUpper(data[secondCut],from,second - 1);    newSecond=firstCut + len;  }  swapBlocks(firstCut,second,secondCut - 1);  merge(from,firstCut,newSecond - 1);  merge(newSecond,secondCut,to);}  }
class C{  @Override public void seekStart(long offset) throws IOException {  getDelegate().seekStart(offset);}  }
class C{  private void readObject(){}  }
class C{  private static SignalGroupsData convertSignalGroupsData(SignalGroupsData signalGroupsData,SignalControlData signalControl){  for (  SignalSystemControllerData controllerData : signalControl.getSignalSystemControllerDataBySystemId().values()) {    if (controllerData.getSignalPlanData().size() > 1) {      log.warn("More than one plan, check if this tool is doing the correct work!");    }    for (    SignalPlanData signalPlan : controllerData.getSignalPlanData().values()) {      Map<Integer,List<SignalGroupSettingsData>> onsetGroupSettingsMap=new HashMap<Integer,List<SignalGroupSettingsData>>();      for (      SignalGroupSettingsData signalGroupSettings : signalPlan.getSignalGroupSettingsDataByGroupId().values()) {        if (!onsetGroupSettingsMap.containsKey(signalGroupSettings.getOnset())) {          onsetGroupSettingsMap.put(signalGroupSettings.getOnset(),new ArrayList<SignalGroupSettingsData>());        }        onsetGroupSettingsMap.get(signalGroupSettings.getOnset()).add(signalGroupSettings);      }    }  }  return null;}  }
class C{  public E addEdge(G graph,V v_i,V v_j,E2 delegate){  E edge=factory.createEdge(delegate);  if (insertEdge(graph,v_i,v_j,edge)) {    graph.setMapping(delegate,edge);    return edge;  } else   return null;}  }
class C{  public void doNextOp(DhcpStateMachine machine){  machine.onNakReceived();}  }
class C{  protected GPNode growNode(final EvolutionState state,final int current,final int max,final GPType type,final int thread,final GPNodeParent parent,final int argposition,final GPFunctionSet set){  boolean triedTerminals=false;  int t=type.type;  GPNode[] terminals=set.terminals[t];  GPNode[] nodes=set.nodes[t];  if (nodes.length == 0)   errorAboutNoNodeWithType(type,state);  if ((current + 1 >= max) && (triedTerminals=true) && terminals.length != 0) {    GPNode n=(GPNode)(terminals[state.random[thread].nextInt(terminals.length)].lightClone());    n.resetNode(state,thread);    n.argposition=(byte)argposition;    n.parent=parent;    return n;  } else {    if (triedTerminals)     warnAboutNoTerminalWithType(type,false,state);    GPNode n=(GPNode)(nodes[state.random[thread].nextInt(nodes.length)].lightClone());    n.resetNode(state,thread);    n.argposition=(byte)argposition;    n.parent=parent;    GPType[] childtypes=n.constraints(((GPInitializer)state.initializer)).childtypes;    for (int x=0; x < childtypes.length; x++)     n.children[x]=growNode(state,current + 1,max,childtypes[x],thread,n,x,set);    return n;  }}  }
class C{  public List<NamedRelatedResourceRep> refreshMatchingStoragePools(URI id){  StoragePoolList response=client.get(StoragePoolList.class,getIdUrl() + "/refresh-matched-pools",id);  return defaultList(response.getPools());}  }
class C{  protected PostTable(DirectoryEntry de,RandomAccessFile raf) throws IOException {  raf.seek(de.getOffset());  version=raf.readInt();  italicAngle=raf.readInt();  underlinePosition=raf.readShort();  underlineThickness=raf.readShort();  isFixedPitch=raf.readInt();  minMemType42=raf.readInt();  maxMemType42=raf.readInt();  minMemType1=raf.readInt();  maxMemType1=raf.readInt();  if (version == 0x00020000) {    numGlyphs=raf.readUnsignedShort();    glyphNameIndex=new int[numGlyphs];    for (int i=0; i < numGlyphs; i++) {      glyphNameIndex[i]=raf.readUnsignedShort();    }    int h=highestGlyphNameIndex();    if (h > 257) {      h-=257;      psGlyphName=new String[h];      for (int i=0; i < h; i++) {        int len=raf.readUnsignedByte();        byte[] buf=new byte[len];        raf.readFully(buf);        psGlyphName[i]=new String(buf);      }    }  } else   if (version == 0x00020005) {  }}  }
class C{  public void loadStimulusVectors(double[][] stimulusVecs){  Iterator<OdorWorldEntity> entityIterator=getObjectList().iterator();  for (int i=0; i < stimulusVecs.length; i++) {    if (entityIterator.hasNext()) {      OdorWorldEntity entity=entityIterator.next();      if (entity.getSmellSource() != null) {        entity.getSmellSource().setStimulusVector(stimulusVecs[i]);      }    }  }}  }
class C{  @Override protected void rollbackCastlingMove(Move move){  FischerRandomUtils.rollbackCastlingMove(this,move,initialKingFile,initialShortRookFile,initialLongRookFile);}  }
class C{  public void selfAdd(UpperTriangularMatrix u){  if ((rows != u.rows) || (columns != u.columns)) {    throw new IllegalArgumentException("cannot add a " + u.rows + 'x'+ u.columns+ " matrix to a "+ rows+ 'x'+ columns+ " matrix");  }  for (int i=0; i < rows; ++i) {    for (int index=i * (columns + 1); index < (i + 1) * columns; ++index) {      data[index]+=u.data[index];    }  }}  }
class C{  public ClientMessage createMessage(String body){  getInternalClient();  ClientMessage message=internalClient.createMessage(isUseDurableMessage());  if (body != null) {    message.writeBodyBufferString(body);  }  return message;}  }
class C{  public void printTag(String name,HashMap<String,String> parameters,boolean close) throws IOException {  printTag(name,parameters,true,true,close);}  }
class C{  public boolean isAcronym(){  return !StringUtils.containsWhitespace(getText()) && org.apache.commons.lang3.StringUtils.isAllUpperCase(getText());}  }
class C{  protected void addGeneratorIdPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_GeneratorModel_generatorId_feature"),getString("_UI_PropertyDescriptor_description","_UI_GeneratorModel_generatorId_feature","_UI_GeneratorModel_type"),SGenPackage.Literals.GENERATOR_MODEL__GENERATOR_ID,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public static Frustum fromPerspective(double width,double height,double near,double far){  double farMinusNear=far - near;  if (farMinusNear <= 0.0 || width <= 0.0 || height <= 0.0) {    throw new IllegalArgumentException("Clipping Distance Out Of Range");  }  double width_over_2=width / 2.0;  double height_over_2=height / 2.0;  Plane leftPlane=new Plane(1.0,0.0,0.0,width_over_2);  Plane rightPlane=new Plane(-1.0,0.0,0.0,width_over_2);  Plane bottomPlane=new Plane(0.0,1.0,0.0,height_over_2);  Plane topPlane=new Plane(0.0,-1.0,0.0,height_over_2);  Plane nearPlane=new Plane(0.0,0.0,-1.0,(near < 0.0) ? near : -near);  Plane farPlane=new Plane(0.0,0.0,1.0,(far < 0.0) ? -far : far);  return new Frustum(leftPlane,rightPlane,bottomPlane,topPlane,nearPlane,farPlane);}  }
class C{  public boolean isHasProforma(){  Object oo=get_Value(COLUMNNAME_HasProforma);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void throwDOMException(short code,String msg){  String themsg=XSLMessages.createMessage(msg,null);  throw new DOMException(code,themsg);}  }
class C{  public void createPictScenario13() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-03 00:00:00"));  String supplierAdminId="Pict13Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict13SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="Pict13Customer";  VOOrganization customer=orgSetup.registerCustomer("Pict13CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.createMarketingPermission(supplierAdmin.getKey(),supplier.getOrganizationId(),example2TechService);  VOServiceDetails unitServTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT13_UNIT_HOUR_SERVICE",TestService.EXAMPLE2,TestPriceModel.FREE,example2TechService,supplierMarketplace);  VOServiceDetails serviceUnitDetails=serviceSetup.savePriceModelForCustomer(unitServTemplate,TestPriceModel.EXAMPLE_PICT13_UNIT_HOUR,customer);  VOServiceDetails freeTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT13_FREE",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PICT13_UNIT_HOUR,example2TechService,supplierMarketplace);  VOServiceDetails serviceFreeDetails=serviceSetup.savePriceModelForCustomer(freeTemplate,TestPriceModel.FREE,customer);  unitServTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),unitServTemplate,freeTemplate);  serviceUnitDetails=serviceSetup.activateMarketableService(serviceUnitDetails);  serviceFreeDetails=serviceSetup.activateMarketableService(serviceFreeDetails);  VORoleDefinition role=VOServiceFactory.getRole(serviceUnitDetails,"ADMIN");  serviceUnitDetails=serviceSetup.getServiceDetails(supplierAdmin.getKey(),serviceUnitDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_13",serviceUnitDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-03 00:00:00"));  role=VOServiceFactory.getRole(serviceUnitDetails,"USER");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.addUser(basicSetup.getSecondCustomerUser1(),role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-04 10:20:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(1),VOServiceFactory.getRole(serviceUnitDetails,"ADMIN"),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-10-04 10:20:00"),"MAX_FOLDER_NUMBER","5");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-04 10:30:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(1),VOServiceFactory.getRole(serviceUnitDetails,"USER"),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-06 00:00:00"));  subDetails=subscrSetup.revokeUser(basicSetup.getSecondCustomerUser1(),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-07 02:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-07 02:10:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-07 02:20:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  role=VOServiceFactory.getRole(serviceUnitDetails,"USER");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-08 00:00:00"));  subDetails=subscrSetup.addUser(basicSetup.getSecondCustomerUser1(),role,subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-12 00:00:00"));  VOPriceModel newSubPriceModel=VOPriceModelFactory.modifyPriceModelPeriodFee(subDetails.getPriceModel(),new BigDecimal("1.00"));  subscrSetup.savePriceModelForSubscription(supplierAdmin.getKey(),subDetails,newSubPriceModel,customer);  serviceFreeDetails=serviceSetup.getServiceDetails(supplierAdmin.getKey(),serviceFreeDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-30 00:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceFreeDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-10-15 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceUnitDetails);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_13",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_13",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_13",customer);}  }
class C{  public String toString(){  return name;}  }
class C{  private int guessTransactionsLength(){  if (transactionBytesValid)   return payload.length - HEADER_SIZE;  if (transactions == null)   return 0;  int len=VarInt.sizeOf(transactions.size());  for (  Transaction tx : transactions) {    len+=tx.length == UNKNOWN_LENGTH ? 255 : tx.length;  }  return len;}  }
class C{  private boolean isUrlCorrect(@NotNull String url){  if (!END_URL.test(url)) {    view.showUrlError(locale.importProjectMessageUrlInvalid());    return false;  }  if (WHITESPACE.test(url)) {    view.showUrlError(locale.importProjectMessageStartWithWhiteSpace());    return false;  }  if (!URL_REGEX.test(url)) {    view.showUrlError(locale.importProjectMessageUrlInvalid());    return false;  }  view.hideUrlError();  return true;}  }
class C{  public byte[] asn1Encode() throws IOException {  DerOutputStream out=new DerOutputStream();  out.putUnalignedBitString(bits);  return out.toByteArray();}  }
class C{  private static String[] testEntry(String ISOCode,Map<String,String> entriesEn,Map<String,String> entriesLoc,Locale locale,String notFoundMessage,String notLocalizedMessage){  String nameEn=null;  String nameLoc=null;  for (  String key : entriesEn.keySet()) {    if (ISOCode.equalsIgnoreCase(key)) {      nameEn=entriesEn.get(key);      break;    }  }  for (  String key : entriesLoc.keySet()) {    if (ISOCode.equalsIgnoreCase(key)) {      nameLoc=entriesLoc.get(key);      break;    }  }  if (nameEn == null) {    return new String[]{"",MessageFormat.format(notFoundMessage,new String[]{"English",ISOCode})};  }  if (nameLoc == null) {    return new String[]{"",MessageFormat.format(notFoundMessage,new String[]{locale.getDisplayName(),ISOCode})};  }  if (nameEn.equals(nameLoc)) {    return new String[]{MessageFormat.format(notLocalizedMessage,new String[]{locale.getDisplayName(),ISOCode}),""};  }  return new String[]{"",""};}  }
class C{  @Override public double java2DToValue(double java2DValue,Rectangle2D area,RectangleEdge edge){  DateRange range=(DateRange)getRange();  double axisMin=this.timeline.toTimelineValue(range.getLowerMillis());  double axisMax=this.timeline.toTimelineValue(range.getUpperMillis());  double min=0.0;  double max=0.0;  if (RectangleEdge.isTopOrBottom(edge)) {    min=area.getX();    max=area.getMaxX();  } else   if (RectangleEdge.isLeftOrRight(edge)) {    min=area.getMaxY();    max=area.getY();  }  double result;  if (isInverted()) {    result=axisMax - ((java2DValue - min) / (max - min) * (axisMax - axisMin));  } else {    result=axisMin + ((java2DValue - min) / (max - min) * (axisMax - axisMin));  }  return this.timeline.toMillisecond((long)result);}  }
class C{  private void own(final Player player,final DomesticAnimal animal){  if (animal instanceof Sheep) {    if (player.getSheep() != null) {      player.sendPrivateText("You already own a sheep.");    } else {      player.setSheep((Sheep)animal);    }  } else   if (animal instanceof Pet) {    if (player.getPet() != null) {      player.sendPrivateText("You already own a pet.");    } else {      player.setPet((Pet)animal);    }  }  new GameEvent(player.getName(),"own",animal.getRPClass().getName(),animal.getTitle()).raise();}  }
class C{  public String putTag(String tagKey,String tagValue){  if (tagKey == null) {    throw new IllegalArgumentException("Putting tag with key 'null'.");  } else   if (tagValue == null) {    throw new IllegalArgumentException("Putting tag with value 'null'.");  } else   if (tagKey.isEmpty()) {    throw new IllegalArgumentException("Putting tag with empty key.");  } else   if (tagValue.isEmpty()) {    throw new IllegalArgumentException("Putting tag with empty value.");  } else {    return tags.put(tagKey,tagValue);  }}  }
class C{  public static synchronized void clearCache(){  cache.clear();}  }
