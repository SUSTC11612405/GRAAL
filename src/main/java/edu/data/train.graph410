class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:59.599 -0500",hash_original_method="8119C72F0478CFCCBAF29A53C28985A0",hash_generated_method="CAE9266E5A14EABAAFFFFF8B47C20EF4") public boolean hasToTag(){  return hasParameter(ParameterNames.TO_TAG);}  }
class C{  public String loadImplementation(String uuid){  ServerInitializer.inheritVeriniceContextState();  String implementation="0";  try {    LoadElementByUuid<SamtTopic> command=new LoadElementByUuid(SamtTopic.TYPE_ID,uuid,RetrieveInfo.getPropertyInstance());    command=getCommandService().executeCommand(command);    SamtTopic topic=command.getElement();    if (topic != null) {      implementation=Integer.valueOf(topic.getMaturity()).toString();    }  } catch (  Exception t) {    log.error("Error while loading implementation.",t);  }  if (log.isDebugEnabled()) {    log.debug("uuid SamtTopic: " + uuid + ", implementation: "+ implementation);  }  return implementation;}  }
class C{  public static void sortDesc(long[] keys,int[] values){  hybridsortDesc(keys,values,null,null,0,keys.length - 1);}  }
class C{  public Job configure(boolean isSecured,String metaStoreUris,String principal,String redisHost,int redisPort,String password,int redisDb,String inputDatabase,String inputTable,String inputFilter,String keyName,String valueName,String keyPrefix,int numReducer,boolean replace,boolean pipeline,boolean flush,int commitSize,String[] anonFields,String exportSalt) throws Exception {  this.isSecured=isSecured;  this.metaStoreUris=metaStoreUris;  this.principal=principal;  this.redisHost=redisHost;  this.redisPort=redisPort;  this.password=password;  this.redisDb=redisDb;  this.inputDatabase=inputDatabase;  this.inputTable=inputTable;  this.inputFilter=inputFilter;  this.keyName=keyName;  this.keyPrefix=keyPrefix;  this.valueName=valueName;  this.numReducer=numReducer;  this.replace=replace;  this.pipeline=pipeline;  this.flush=flush;  this.commitSize=commitSize;  this.anonFields=anonFields.clone();  this.exportSalt=exportSalt;  return configure();}  }
class C{  public void encounter(Person other){  Integer count=encounterCounts.get(other);  if (count == null) {    encounterCounts.put(other,1);  } else {    count++;    encounterCounts.put(other,count);  }  other.putMessages(messageQueue,this);}  }
class C{  private void queueOutgoingData(byte[] data,String identifier){synchronized (outBuffers) {    if (!outBuffers.containsKey(identifier)) {      outBuffers.put(identifier,new ArrayDeque<byte[]>());    }    int mtu=getMtuForIdentifier(identifier);    int readIdx=0;    while (readIdx < data.length) {      if (data.length - readIdx > mtu) {        ByteArrayOutputStream bos=new ByteArrayOutputStream(mtu);        bos.write(data,readIdx,mtu);        outBuffers.get(identifier).add(bos.toByteArray());        readIdx+=mtu;      } else {        outBuffers.get(identifier).add(data);        break;      }    }    if (VERBOSE)     Timber.d("Queued %d outgoing bytes for %s",data.length,identifier);    outBuffers.notify();  }}  }
class C{  protected void renderAttribute(Node node,Attribute attribute,Appendable appendable) throws IOException {  String name=resolveAttributeName(node,attribute);  String value=attribute.getValue();  appendable.append(name);  if (value != null) {    appendable.append('=');    appendable.append('\"');    appendable.append(HtmlEncoder.attributeDoubleQuoted(value));    appendable.append('\"');  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void initSecurity(){  Security.setProperty("jdk.certpath.disabledAlgorithms","MD5");  Security.addProvider(new BouncyCastleProvider());  org.apache.xml.security.Init.init();}  }
class C{  public void scale(VisualizationServer<?,?> vv,float amount,Point2D at){  MutableTransformer layoutTransformer=vv.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.LAYOUT);  MutableTransformer viewTransformer=vv.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.VIEW);  double modelScale=layoutTransformer.getScale();  double viewScale=viewTransformer.getScale();  double inverseModelScale=Math.sqrt(crossover) / modelScale;  double inverseViewScale=Math.sqrt(crossover) / viewScale;  Point2D transformedAt=vv.getRenderContext().getMultiLayerTransformer().inverseTransform(Layer.VIEW,at);  layoutTransformer.scale(inverseModelScale,inverseModelScale,transformedAt);  viewTransformer.scale(inverseViewScale,inverseViewScale,at);  super.scale(vv,amount,at);}  }
class C{  public ByteBuffer compact(ArrayDeque<SwapValue> vals,final int bufSize) throws IOException, InterruptedException {  assert vals.isEmpty();  Compact c=new Compact(vals,bufSize);  c.doCompact();  return c.result();}  }
class C{  public void cancelTrade(){  if (tradeState == TradeState.NO_ACTIVE_TRADE) {    return;  }  player.sendPrivateText("You canceled the trade");  Player partner=SingletonRepository.getRuleProcessor().getPlayer(partnerName);  if (partner != null) {    partner.sendPrivateText(player.getName() + " canceled the trade with you.");    partner.cancelTradeInternally(player.getName());  }  cancelTradeInternally(partnerName);}  }
class C{  public void deleteStaleDomainHashes(final Set<String> hosthashes,Date freshdate){  Date now=new Date();  deleteDomainWithConstraint(this.getDefaultConnector(),CollectionSchema.host_id_s.getSolrFieldName(),hosthashes,(freshdate == null || freshdate.after(now)) ? null : (CollectionSchema.load_date_dt.getSolrFieldName() + ":[* TO " + ISO8601Formatter.FORMATTER.format(freshdate)+ "]"));  if (this.writeWebgraph)   deleteDomainWithConstraint(this.getWebgraphConnector(),WebgraphSchema.source_host_id_s.getSolrFieldName(),hosthashes,(freshdate == null || freshdate.after(now)) ? null : (WebgraphSchema.load_date_dt.getSolrFieldName() + ":[* TO " + ISO8601Formatter.FORMATTER.format(freshdate)+ "]"));}  }
class C{  public String toString(){  return (this.message + " at " + this.level);}  }
class C{  public static boolean isWhiteSpace(char ch){  return (ch == 0x20) || (ch == 0x09) || (ch == 0xD)|| (ch == 0xA);}  }
class C{  public String toString(){  if (m_ZeroR != null) {    StringBuffer buf=new StringBuffer();    buf.append(this.getClass().getName().replaceAll(".*\\.","") + "\n");    buf.append(this.getClass().getName().replaceAll(".*\\.","").replaceAll(".","=") + "\n\n");    buf.append("Warning: No model could be built, hence ZeroR model is used:\n\n");    buf.append(m_ZeroR.toString());    return buf.toString();  }  if (m_Instances == null) {    return "Decision Stump: No model built yet.";  }  try {    StringBuffer text=new StringBuffer();    text.append("Decision Stump\n\n");    text.append("Classifications\n\n");    Attribute att=m_Instances.attribute(m_AttIndex);    if (att.isNominal()) {      text.append(att.name() + " = " + att.value((int)m_SplitPoint)+ " : ");      text.append(printClass(m_Distribution[0]));      text.append(att.name() + " != " + att.value((int)m_SplitPoint)+ " : ");      text.append(printClass(m_Distribution[1]));    } else {      text.append(att.name() + " <= " + m_SplitPoint+ " : ");      text.append(printClass(m_Distribution[0]));      text.append(att.name() + " > " + m_SplitPoint+ " : ");      text.append(printClass(m_Distribution[1]));    }    text.append(att.name() + " is missing : ");    text.append(printClass(m_Distribution[2]));    if (m_Instances.classAttribute().isNominal()) {      text.append("\nClass distributions\n\n");      if (att.isNominal()) {        text.append(att.name() + " = " + att.value((int)m_SplitPoint)+ "\n");        text.append(printDist(m_Distribution[0]));        text.append(att.name() + " != " + att.value((int)m_SplitPoint)+ "\n");        text.append(printDist(m_Distribution[1]));      } else {        text.append(att.name() + " <= " + m_SplitPoint+ "\n");        text.append(printDist(m_Distribution[0]));        text.append(att.name() + " > " + m_SplitPoint+ "\n");        text.append(printDist(m_Distribution[1]));      }      text.append(att.name() + " is missing\n");      text.append(printDist(m_Distribution[2]));    }    return text.toString();  } catch (  Exception e) {    return "Can't print decision stump classifier!";  }}  }
class C{  public static <T,V>void show(BackgroundTask<T,V> task,@Nullable String title,@Nullable String message,boolean cancelAllowed){  if (task.getOwnerFrame() == null) {    throw new IllegalArgumentException("Task without owner cannot be run");  }  Map<String,Object> params=new HashMap<>();  params.put("task",task);  params.put("title",title);  params.put("message",message);  params.put("cancelAllowed",cancelAllowed);  task.getOwnerFrame().openWindow("backgroundWorkWindow",WindowManager.OpenType.DIALOG,params);}  }
class C{  public T remove(double lat,double lon,T obj){  return remove(new QuadTreeLeaf<T>(lat,lon,obj));}  }
class C{  public TomcatManagerException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,image.getTransparency());}  }
class C{  public void clear(){  hour=0;  minute=0;  second=0;  text.setText(getTime());}  }
class C{  public StatementBuilder(String string){  builder.append(string);}  }
class C{  @GwtIncompatible <K,V>MapMakerInternalMap<K,V> makeCustomMap(){  return new MapMakerInternalMap<K,V>(this);}  }
class C{  @NotNull @ObjectiveCName("kickMemberCommandWithGid:withUid:") public Command<Void> kickMember(int gid,int uid){  return null;}  }
class C{  public synchronized void unregister(String name){  StreamScope<?> streamScope=byNameMap.remove(name);  if (streamScope == null)   return;  List<String> names=byStreamScopeMap.get(streamScope);  names.remove(name);  if (names.isEmpty())   byStreamScopeMap.remove(streamScope);}  }
class C{  public void updateLine(String key,HeaderCard card) throws HeaderCardException {  addHeaderCard(key,card);}  }
class C{  public mxCoordinateAssignment(mxHierarchicalLayout layout,double intraCellSpacing,double interRankCellSpacing,int orientation,double initialX,double parallelEdgeSpacing){  this.layout=layout;  this.intraCellSpacing=intraCellSpacing;  this.interRankCellSpacing=interRankCellSpacing;  this.orientation=orientation;  this.initialX=initialX;  this.parallelEdgeSpacing=parallelEdgeSpacing;  setLoggerLevel(Level.OFF);}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  public static void picture(double x,double y,String s,double w,double h){  Image image=getImage(s);  double xs=scaleX(x);  double ys=scaleY(y);  if (w < 0)   throw new IllegalArgumentException("width is negative: " + w);  if (h < 0)   throw new IllegalArgumentException("height is negative: " + h);  double ws=factorX(w);  double hs=factorY(h);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + s + " is corrupt");  if (ws <= 1 && hs <= 1)   pixel(x,y); else {    offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),(int)Math.round(ws),(int)Math.round(hs),null);  }  draw();}  }
class C{  public byte[] toByteArray(){  byte[] bytes=new byte[this.byteLength];  int offset=0;  for (  byte[] chunk : arrays) {    System.arraycopy(chunk,0,bytes,offset,chunk.length);    offset+=chunk.length;  }  return bytes;}  }
class C{  @Override public void onAudioFocusChange(int focusChange){  Timber.d("AudioFocusChange, result code: %d",focusChange);  boolean pauseOnNotification=UserPrefHelper.get(this).getBoolean(R.string.pref_key_pause_playback_during_notification);switch (focusChange) {case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:    if (pauseOnNotification) {      mPlayingBeforeFocusChange=getPlaybackState() == MediaPlayerState.STATE_PLAYING;      pause();    } else {      mStreamVolume=mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);      mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC,(int)(mStreamVolume * AUDIO_DUCK),0);    }  break;case AudioManager.AUDIOFOCUS_LOSS:case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:mPlayingBeforeFocusChange=mMediaPlayerState == MediaPlayerState.STATE_PLAYING;pause();break;case AudioManager.AUDIOFOCUS_GAIN:if (mStreamVolume > -1) {mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC,mStreamVolume,0);mStreamVolume=-1;}if (mPlayingBeforeFocusChange && pauseOnNotification) {mPlayingBeforeFocusChange=false;play(null,true);}break;}}  }
class C{  @Override public int indexOf(Comparable seriesKey){  return this.seriesKeys.indexOf(seriesKey);}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @SuppressWarnings("rawtypes") public static DiscoveryContainer<?> empty(){  return new DiscoveryContainer();}  }
class C{  public static double loss(double pred,double y){  return Math.max(0,1 - y * pred);}  }
class C{  protected int makePressColor(){  int r=(this.backgroundColor >> 16) & 0xFF;  int g=(this.backgroundColor >> 8) & 0xFF;  int b=(this.backgroundColor >> 0) & 0xFF;  r=(r - 30 < 0) ? 0 : r - 30;  g=(g - 30 < 0) ? 0 : g - 30;  b=(b - 30 < 0) ? 0 : b - 30;  return Color.rgb(r,g,b);}  }
class C{  private EmrClusterDefinitionCreateRequest createEmrClusterDefinitionCreateRequest(String namespace,String emrClusterDefinitionName,EmrClusterDefinition emrClusterDefinitionConfiguration){  EmrClusterDefinitionCreateRequest request=new EmrClusterDefinitionCreateRequest();  request.setEmrClusterDefinitionKey(new EmrClusterDefinitionKey(namespace,emrClusterDefinitionName));  request.setEmrClusterDefinition(emrClusterDefinitionConfiguration);  return request;}  }
class C{  @Override public void renderAxisLabels(Canvas c){  if (!mYAxis.isEnabled() || !mYAxis.isDrawLabelsEnabled())   return;  float[] positions=new float[mYAxis.mEntryCount * 2];  for (int i=0; i < positions.length; i+=2) {    positions[i]=mYAxis.mEntries[i / 2];  }  mTrans.pointValuesToPixel(positions);  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());  mAxisLabelPaint.setColor(mYAxis.getTextColor());  mAxisLabelPaint.setTextAlign(Align.CENTER);  float yoffset=Utils.calcTextHeight(mAxisLabelPaint,"A") + mYAxis.getYOffset();  AxisDependency dependency=mYAxis.getAxisDependency();  YAxisLabelPosition labelPosition=mYAxis.getLabelPosition();  float yPos=0f;  if (dependency == AxisDependency.LEFT) {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      yoffset=Utils.convertDpToPixel(3f);      yPos=mViewPortHandler.contentTop();    } else {      yoffset=yoffset * -1f;      yPos=mViewPortHandler.contentTop();    }  } else {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      yoffset=yoffset * -1f;      yPos=mViewPortHandler.contentBottom();    } else {      yoffset=Utils.convertDpToPixel(4f);      yPos=mViewPortHandler.contentBottom();    }  }  drawYLabels(c,yPos,positions,yoffset);}  }
class C{  public Lock tryReadLock(){  if (isWriterActive()) {    return null;  }synchronized (this) {    if (isWriterActive()) {      return null;    }    return createReadLock();  }}  }
class C{  @SuppressWarnings("fallthrough") public int read(char cbuf[],int off,int len) throws IOException {synchronized (lock) {    int n=super.read(cbuf,off,len);    for (int i=off; i < off + n; i++) {      int c=cbuf[i];      if (skipLF) {        skipLF=false;        if (c == '\n')         continue;      }switch (c) {case '\r':        skipLF=true;case '\n':      lineNumber++;    break;}}return n;}}  }
class C{  public void subdivide(Cubic c0,Cubic c1){  if ((c0 == null) && (c1 == null))   return;  double npX=(p1.x + 3 * (p2.x + p3.x) + p4.x) * 0.125;  double npY=(p1.y + 3 * (p2.y + p3.y) + p4.y) * 0.125;  double npdx=((p2.x - p1.x) + 2 * (p3.x - p2.x) + (p4.x - p3.x)) * 0.125;  double npdy=((p2.y - p1.y) + 2 * (p3.y - p2.y) + (p4.y - p3.y)) * 0.125;  if (c0 != null) {    c0.p1.x=p1.x;    c0.p1.y=p1.y;    c0.p2.x=(p2.x + p1.x) * 0.5;    c0.p2.y=(p2.y + p1.y) * 0.5;    c0.p3.x=npX - npdx;    c0.p3.y=npY - npdy;    c0.p4.x=npX;    c0.p4.y=npY;  }  if (c1 != null) {    c1.p1.x=npX;    c1.p1.y=npY;    c1.p2.x=npX + npdx;    c1.p2.y=npY + npdy;    c1.p3.x=(p4.x + p3.x) * 0.5;    c1.p3.y=(p4.y + p3.y) * 0.5;    c1.p4.x=p4.x;    c1.p4.y=p4.y;  }}  }
class C{  protected void createMRPNote(String code,int AD_Org_ID,int PP_MRP_ID,MProduct product,String documentNo,BigDecimal qty,String comment,String trxName) throws SQLException {  int M_Warehouse_ID=MPPMRP.getM_Warehouse_ID(PP_MRP_ID,trxName);  documentNo=documentNo != null ? documentNo : "";  comment=comment != null ? comment : "";  qty=qty != null ? qty : Env.ZERO;  MMessage msg=MMessage.get(getCtx(),code);  if (msg == null) {    msg=MMessage.get(getCtx(),"MRP-999");  }  String message=msg.getValue() + " " + Msg.getMsg(getCtx(),msg.getValue());  int user_id=0;  if (m_product_planning != null) {    user_id=m_product_planning.getPlanner_ID();  }  if (M_Warehouse_ID > 0) {    String warehouseName=DB.getSQLValueString(trxName,"SELECT Name FROM M_Warehouse  WHERE M_Warehouse_ID=? ",MPPMRP.getM_Warehouse_ID(PP_MRP_ID,trxName));    message+="\n" + Msg.translate(getCtx(),MPPMRP.COLUMNNAME_M_Warehouse_ID) + " : "+ warehouseName;  }  if (product != null) {    message+="\n" + Msg.translate(getCtx(),MPPMRP.COLUMNNAME_M_Product_ID) + " : "+ product.getValue()+ " "+ product.getName();  }  if (!Util.isEmpty(documentNo,true)) {    message+="\n" + Msg.getElement(getCtx(),MPPOrder.COLUMNNAME_DocumentNo) + " : "+ documentNo;  }  if (qty != null) {    message+="\n" + Msg.translate(getCtx(),"QtyPlan") + " : "+ qty;  }  if (!Util.isEmpty(comment,true)) {    message+="\n" + comment;  }  String reference="";  if (PP_MRP_ID > 0) {    reference="M_Warehouse_ID" + "->" + M_Warehouse_ID + " | ";  }  reference=(reference != "" ? reference : reference) + "M_Product_ID" + "->"+ product.get_ID();  MNote note=new MNote(getCtx(),msg.getAD_Message_ID(),user_id,MPPMRP.Table_ID,PP_MRP_ID,reference,message,trxName);  note.setAD_Org_ID(AD_Org_ID);  note.saveEx();  log.info(code + ": " + note.getTextMsg());  count_Msg+=1;}  }
class C{  public static int smear(int hashCode){  return C2 * Integer.rotateLeft(hashCode * C1,15);}  }
class C{  private static void flipScanEdgeEvent(DTSweepContext tcx,TriangulationPoint ep,TriangulationPoint eq,DelaunayTriangle flipTriangle,DelaunayTriangle t,TriangulationPoint p){  DelaunayTriangle ot;  TriangulationPoint op, newP;  boolean inScanArea;  ot=t.neighborAcross(p);  op=ot.oppositePoint(t,p);  if (ot == null) {    throw new RuntimeException("[BUG:FIXME] FLIP failed due to missing triangle");  }  if (tcx.isDebugEnabled()) {    System.out.println("[FLIP:SCAN] - scan next point");    tcx.getDebugContext().setPrimaryTriangle(t);    tcx.getDebugContext().setSecondaryTriangle(ot);  }  inScanArea=inScanArea(eq,flipTriangle.pointCCW(eq),flipTriangle.pointCW(eq),op);  if (inScanArea) {    flipEdgeEvent(tcx,eq,op,ot,op);  } else {    newP=nextFlipPoint(ep,eq,ot,op);    flipScanEdgeEvent(tcx,ep,eq,flipTriangle,ot,newP);  }}  }
class C{  public <T extends B>MinMaxPriorityQueue<T> create(){  return create(Collections.<T>emptySet());}  }
class C{  public boolean isPostConstructCalled(){  return this.postConstructCalled;}  }
class C{  public static void processCommandLineArg(String arg){  if (!options.processAsOption("-X:aos",arg)) {    VM.sysWrite("vm: illegal adaptive configuration directive \"" + arg + "\" specified as -X:aos:"+ arg+ "\n");    VM.sysExit(EXIT_STATUS_BOGUS_COMMAND_LINE_ARG);  }}  }
class C{  public boolean hasPrimaryKeyFields(){  return m_descriptor.getPrimaryKeyFields().size() > 0;}  }
class C{  @Override public void release(){  this.value=null;  this.target=null;}  }
class C{  public void logrb(Level level,String sourceClass,String sourceMethod,String bundleName,String msg,Object params[]){  throw new RuntimeException();}  }
class C{  private static boolean unorderedCompare(List<Query> fqList1,List<Query> fqList2,int start){  assert null != fqList1;  assert null != fqList2;  final int sz=fqList1.size();  assert fqList2.size() == sz;  final ArrayList<Query> set2=new ArrayList<>(fqList2.subList(start,sz));  for (int i=start; i < sz; i++) {    Query q1=fqList1.get(i);    if (!set2.remove(q1)) {      return false;    }  }  return set2.isEmpty();}  }
class C{  @SuppressWarnings("rawtypes") public static String toJSONString(Map map){  if (map == null)   return "null";  StringBuffer sb=new StringBuffer();  boolean first=true;  Iterator iter=map.entrySet().iterator();  sb.append('{');  while (iter.hasNext()) {    if (first)     first=false; else     sb.append(',');    Map.Entry entry=(Map.Entry)iter.next();    toJSONString(String.valueOf(entry.getKey()),entry.getValue(),sb);  }  sb.append('}');  return sb.toString();}  }
class C{  public void add(Vector3f summand){  this.points[0]+=summand.points[0];  this.points[1]+=summand.points[1];  this.points[2]+=summand.points[2];}  }
class C{  @Override public void endpointDeactivation(final MessageEndpointFactory endpointFactory,final ActivationSpec spec){  if (ActiveMQResourceAdapter.trace) {    ActiveMQRALogger.LOGGER.trace("endpointDeactivation(" + endpointFactory + ", "+ spec+ ")");  }  ActiveMQActivation activation=activations.remove(spec);  if (activation != null) {    activation.stop();  }}  }
class C{  public void write(String s) throws IOException {  if (writer != null) {    writer.write(s);  } else {    write(s,0,s.length());  }}  }
class C{  public MqttUnacceptableProtocolVersionException(){}  }
class C{  public void addLoader(Loader loader){  if (_loaders == null) {    throw new IllegalStateException(toString());  }  int p=_loaders.indexOf(loader);  if (p >= 0) {    Loader oldLoader=_loaders.get(p);    if (oldLoader != loader) {      addLoader(loader,p);    }  } else {    addLoader(loader,_loaders.size());  }  _hasNewLoader=true;}  }
class C{  public void writeExternal(ObjectOutput out) throws IOException {  Assert.assertTrue(vmKind > 0);  byte[] address=getInetAddress().getAddress();  out.writeInt(address.length);  out.write(address);  out.writeInt(getPort());  DataSerializer.writeString(this.hostName,out);  int flags=0;  if (netMbr.isNetworkPartitionDetectionEnabled())   flags|=NPD_ENABLED_BIT;  if (netMbr.preferredForCoordinator())   flags|=COORD_ENABLED_BIT;  if (this.isPartial)   flags|=PARTIAL_ID_BIT;  flags|=VERSION_BIT;  out.writeByte((byte)(flags & 0xff));  out.writeInt(dcPort);  out.writeInt(vmPid);  out.writeInt(vmKind);  out.writeInt(vmViewId);  DataSerializer.writeStringArray(this.groups,out);  DataSerializer.writeString(this.name,out);  DataSerializer.writeString(this.uniqueTag,out);  DataSerializer.writeString(this.durableClientAttributes == null ? "" : this.durableClientAttributes.getId(),out);  DataSerializer.writeInteger(Integer.valueOf(this.durableClientAttributes == null ? 300 : this.durableClientAttributes.getTimeout()),out);  Version.writeOrdinal(out,this.version,true);  netMbr.writeAdditionalData(out);}  }
class C{  public Drawer buildForFragment(){  if (mUsed) {    throw new RuntimeException("you must not reuse a DrawerBuilder builder");  }  if (mActivity == null) {    throw new RuntimeException("please pass an activity");  }  if (mRootView == null) {    throw new RuntimeException("please pass the view which should host the DrawerLayout");  }  mUsed=true;  if (mDrawerLayout == null) {    withDrawerLayout(-1);  }  View originalContentView=mRootView.getChildAt(0);  boolean alreadyInflated=originalContentView.getId() == R.id.materialize_root;  if (!alreadyInflated) {    mRootView.removeView(originalContentView);  } else {    mRootView.removeAllViews();  }  FrameLayout.LayoutParams layoutParamsContentView=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);  mRootView.addView(mDrawerLayout,layoutParamsContentView);  mDrawerLayout.setId(R.id.materialize_root);  handleDrawerNavigation(mActivity,false);  Drawer result=buildView();  mDrawerLayout.addView(originalContentView,0);  mSliderLayout.setId(R.id.material_drawer_slider_layout);  mDrawerLayout.addView(mSliderLayout,1);  return result;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @SuppressWarnings("rawtypes") public void onUpdate(){  super.onUpdate();  if (this.getTimeSinceHit() > 0) {    this.setTimeSinceHit(this.getTimeSinceHit() - 1);  }  if (this.getDamageTaken() > 0.0F) {    this.setDamageTaken(this.getDamageTaken() - 1.0F);  }  this.prevPosX=this.posX;  this.prevPosY=this.posY;  this.prevPosZ=this.posZ;  final byte b0=5;  double d0=0.0D;  for (int i=0; i < b0; ++i) {    final double d1=this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(i + 0) / (double)b0 - 0.125D;    final double d3=this.boundingBox.minY + (this.boundingBox.maxY - this.boundingBox.minY) * (double)(i + 1) / (double)b0 - 0.125D;    final AxisAlignedBB axisalignedbb=AxisAlignedBB.getBoundingBox(this.boundingBox.minX,d1,this.boundingBox.minZ,this.boundingBox.maxX,d3,this.boundingBox.maxZ);    if (this.worldObj.isAABBInMaterial(axisalignedbb,Material.water)) {      d0+=1.0D / (double)b0;    }  }  final double d10=Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);  double d2;  double d4;  int j;  if (d10 > 0.26249999999999996D) {    d2=Math.cos((double)this.rotationYaw * Math.PI / 180.0D);    d4=Math.sin((double)this.rotationYaw * Math.PI / 180.0D);    for (j=0; (double)j < 1.0D + d10 * 60.0D; ++j) {      final double d5=(double)(this.rand.nextFloat() * 2.0F - 1.0F);      final double d6=(double)(this.rand.nextInt(2) * 2 - 1) * 0.7D;      double d8;      double d9;      if (this.rand.nextBoolean()) {        d8=this.posX - d2 * d5 * 0.8D + d4 * d6;        d9=this.posZ - d4 * d5 * 0.8D - d2 * d6;        this.worldObj.spawnParticle("splash",d8,this.posY - 0.125D,d9,this.motionX,this.motionY,this.motionZ);      } else {        d8=this.posX + d2 + d4 * d5 * 0.7D;        d9=this.posZ + d4 - d2 * d5 * 0.7D;        this.worldObj.spawnParticle("splash",d8,this.posY - 0.125D,d9,this.motionX,this.motionY,this.motionZ);      }    }  }  double d11;  double d12;  if (this.worldObj.isRemote && this.isBoatEmpty) {    if (this.boatPosRotationIncrements > 0) {      d2=this.posX + (this.boatX - this.posX) / (double)this.boatPosRotationIncrements;      d4=this.posY + (this.boatY - this.posY) / (double)this.boatPosRotationIncrements;      d11=this.posZ + (this.boatZ - this.posZ) / (double)this.boatPosRotationIncrements;      d12=MathHelper.wrapAngleTo180_double(this.boatYaw - (double)this.rotationYaw);      this.rotationYaw=(float)((double)this.rotationYaw + d12 / (double)this.boatPosRotationIncrements);      this.rotationPitch=(float)((double)this.rotationPitch + (this.boatPitch - (double)this.rotationPitch) / (double)this.boatPosRotationIncrements);      --this.boatPosRotationIncrements;      this.setPosition(d2,d4,d11);      this.setRotation(this.rotationYaw,this.rotationPitch);    } else {      d2=this.posX + this.motionX;      d4=this.posY + this.motionY;      d11=this.posZ + this.motionZ;      this.setPosition(d2,d4,d11);      if (this.onGround) {        this.motionX*=0.5D;        this.motionY*=0.5D;        this.motionZ*=0.5D;      }      this.motionX*=0.9900000095367432D;      this.motionY*=0.949999988079071D;      this.motionZ*=0.9900000095367432D;    }  } else {    if (d0 < 1.0D) {      d2=d0 * 2.0D - 1.0D;      this.motionY+=0.03999999910593033D * d2;    } else {      if (this.motionY < 0.0D) {        this.motionY/=2.0D;      }      this.motionY+=0.007000000216066837D;    }    if (this.riddenByEntity != null && this.riddenByEntity instanceof EntityLivingBase) {      final EntityLivingBase entitylivingbase=(EntityLivingBase)this.riddenByEntity;      final float f=this.riddenByEntity.rotationYaw + -entitylivingbase.moveStrafing * 90.0F;      this.motionX+=-Math.sin((double)(f * (float)Math.PI / 180.0F)) * this.speedMultiplier * (double)entitylivingbase.moveForward* 0.05000000074505806D;      this.motionZ+=Math.cos((double)(f * (float)Math.PI / 180.0F)) * this.speedMultiplier * (double)entitylivingbase.moveForward* 0.05000000074505806D;    }    d2=Math.sqrt(this.motionX * this.motionX + this.motionZ * this.motionZ);    if (d2 > 0.35D) {      d4=0.35D / d2;      this.motionX*=d4;      this.motionZ*=d4;      d2=0.35D;    }    if (d2 > d10 && this.speedMultiplier < 0.35D) {      this.speedMultiplier+=(0.35D - this.speedMultiplier) / 35.0D;      if (this.speedMultiplier > 0.35D) {        this.speedMultiplier=0.35D;      }    } else {      this.speedMultiplier-=(this.speedMultiplier - 0.07D) / 35.0D;      if (this.speedMultiplier < 0.07D) {        this.speedMultiplier=0.07D;      }    }    int l;    for (l=0; l < 4; ++l) {      final int i1=MathHelper.floor_double(this.posX + ((double)(l % 2) - 0.5D) * 0.8D);      j=MathHelper.floor_double(this.posZ + ((double)(l / 2) - 0.5D) * 0.8D);      for (int j1=0; j1 < 2; ++j1) {        final int k=MathHelper.floor_double(this.posY) + j1;        final Block block=this.worldObj.getBlock(i1,k,j);        if (block == Blocks.snow_layer) {          this.worldObj.setBlockToAir(i1,k,j);          this.isCollidedHorizontally=false;        } else         if (block == Blocks.waterlily) {          this.worldObj.func_147480_a(i1,k,j,true);          this.isCollidedHorizontally=false;        }      }    }    if (this.onGround) {      this.motionX*=0.5D;      this.motionY*=0.5D;      this.motionZ*=0.5D;    }    this.moveEntity(this.motionX,this.motionY,this.motionZ);    if (this.isCollidedHorizontally && d10 > 0.2D) {      if (!this.worldObj.isRemote && !this.isDead) {        this.setDead();        for (l=0; l < 3; ++l) {          this.func_145778_a(GrowthCraftBamboo.blocks.bambooBlock.getItem(),1,0.0F);        }        for (l=0; l < 2; ++l) {          this.func_145778_a(GrowthCraftBamboo.items.bamboo.getItem(),1,0.0F);        }      }    } else {      this.motionX*=0.9900000095367432D;      this.motionY*=0.949999988079071D;      this.motionZ*=0.9900000095367432D;    }    this.rotationPitch=0.0F;    d4=(double)this.rotationYaw;    d11=this.prevPosX - this.posX;    d12=this.prevPosZ - this.posZ;    if (d11 * d11 + d12 * d12 > 0.001D) {      d4=(double)((float)(Math.atan2(d12,d11) * 180.0D / Math.PI));    }    double d7=MathHelper.wrapAngleTo180_double(d4 - (double)this.rotationYaw);    if (d7 > 20.0D) {      d7=20.0D;    }    if (d7 < -20.0D) {      d7=-20.0D;    }    this.rotationYaw=(float)((double)this.rotationYaw + d7);    this.setRotation(this.rotationYaw,this.rotationPitch);    if (!this.worldObj.isRemote) {      final List list=this.worldObj.getEntitiesWithinAABBExcludingEntity(this,this.boundingBox.expand(0.20000000298023224D,0.0D,0.20000000298023224D));      if (list != null && !list.isEmpty()) {        for (int k1=0; k1 < list.size(); ++k1) {          final Entity entity=(Entity)list.get(k1);          if (entity != this.riddenByEntity && entity.canBePushed() && entity instanceof EntityBoat) {            entity.applyEntityCollision(this);          }        }      }      if (this.riddenByEntity != null && this.riddenByEntity.isDead) {        this.riddenByEntity=null;      }    }  }}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ThisTarget.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == TypeDefiningElement.class) {switch (baseFeatureID) {case N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE:    return N4JSPackage.OBJECT_LITERAL__DEFINED_TYPE;default :  return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public ConcurrentModificationException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void unloadMethodStateToBefore(MethodState methodState){  nextUnloadPointer=methodState.getPrevious();}  }
class C{  private void removeEntryFromParent(Entry entry,Entry parent,boolean doNotUpdateSiblings){  final String entryId=entry.getId();  final String nextSiblingId=entry.getNextSiblingId();  final String previousSiblingId=entry.getPreviousSiblingId();  entry.setParentId(null);  final String parentsFirstId=parent.getFirstChildId();  if (parentsFirstId.equals(entryId)) {    parent.setFirstChildId(nextSiblingId);  }  final String parentsLastId=parent.getLastChildId();  if (parentsLastId.equals(entryId)) {    parent.setLastChildId(previousSiblingId);  }  final Entry previousSibling=getEntryById(previousSiblingId);  final Entry nextSibling=getEntryById(nextSiblingId);  if (!doNotUpdateSiblings) {    if (nextSibling != null) {      nextSibling.setPreviousSiblingId(previousSiblingId);    }    if (previousSibling != null) {      previousSibling.setNextSiblingId(nextSiblingId);    }  }  entry.setNextSiblingId(null);  entry.setPreviousSiblingId(null);}  }
class C{  public static int EL3HLT(){  return 46;}  }
class C{  public void attributeReplaced(HttpSessionBindingEvent event){  HttpSession session=event.getSession();  String attrName=event.getName();  Object newValue=session.getAttribute(attrName);  if (event.getValue() != newValue) {    handleAttributeEvent(attrName,event.getValue(),ELUtils.Scope.SESSION);  }}  }
class C{  protected HttpResponse executeGET(String request,String... params) throws IOException {  ensureOpen();  HttpGet m=new HttpGet(queryString(request,params));  HttpResponse response=httpc.execute(m);  verifyStatus(response);  return response;}  }
class C{  public void paintSliderBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintSliderBackground(context,g,x,y,w,h);}  }
class C{  public static boolean isBaseLanguage(Language language,String tableName){  return language.isBaseLanguage();}  }
class C{  public static List<PngChunk> filterList(List<PngChunk> target,ChunkPredicate predicateKeep){  List<PngChunk> result=new ArrayList<PngChunk>();  for (  PngChunk element : target) {    if (predicateKeep.match(element)) {      result.add(element);    }  }  return result;}  }
class C{  public void mouseEnter(MouseEvent e){}  }
class C{  public ZIncrByParams xx(){  addParam(XX);  return this;}  }
class C{  public static Timestamp convertTimestamp(Value value,Calendar calendar){  if (value == ValueNull.INSTANCE) {    return null;  }  ValueTimestamp ts=(ValueTimestamp)value.convertTo(Value.TIMESTAMP);  Calendar cal=(Calendar)calendar.clone();  cal.clear();  cal.setLenient(true);  long dateValue=ts.getDateValue();  long nanos=ts.getTimeNanos();  long millis=nanos / 1000000;  nanos-=millis * 1000000;  long s=millis / 1000;  millis-=s * 1000;  long m=s / 60;  s-=m * 60;  long h=m / 60;  m-=h * 60;  setCalendarFields(cal,yearFromDateValue(dateValue),monthFromDateValue(dateValue),dayFromDateValue(dateValue),(int)h,(int)m,(int)s,(int)millis);  long ms=cal.getTimeInMillis();  Timestamp x=new Timestamp(ms);  x.setNanos((int)(nanos + millis * 1000000));  return x;}  }
class C{  public double lngRadians(){  return lngRadians;}  }
class C{  public static void write(Zone<Id> startZone,Coord coordFromZone,Node node,double freeSpeedAccessibility,double carAccessibility,double bikeAccessibility,double walkAccessibility){  try {    assert (AnalysisCellBasedAccessibilityCSVWriterV2.accessibilityDataWriter != null);    accessibilityDataWriter.write(((Id)startZone.getAttribute()) + "," + coordFromZone.getX()+ ","+ coordFromZone.getY()+ ","+ node.getId()+ ","+ node.getCoord().getX()+ ","+ node.getCoord().getY()+ ","+ freeSpeedAccessibility+ ","+ carAccessibility+ ","+ bikeAccessibility+ ","+ walkAccessibility);    accessibilityDataWriter.newLine();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private ImageToImageDatastoreMappingService.State buildImageToImageDatastoreMappingServiceState(String imageId,String imageDatastoreId){  ImageToImageDatastoreMappingService.State imageToImageDatastoreMappingService=new ImageToImageDatastoreMappingService.State();  imageToImageDatastoreMappingService.imageId=imageId;  imageToImageDatastoreMappingService.imageDatastoreId=imageDatastoreId;  imageToImageDatastoreMappingService.documentSelfLink=imageId + "_" + imageDatastoreId;  return imageToImageDatastoreMappingService;}  }
class C{  public void initializeHardwareClock(double rate,Date now,boolean getTime){  return;}  }
class C{  public void attachIINLookup(PaymentItem paymentItem,Boolean renderIinLogo){  for (  PaymentProductField field : paymentItem.getPaymentProductFields()) {    if (field.getId().endsWith(CARDNUMBER_POSTFIX)) {      iinEditText=(EditText)renderInputFieldsLayout.findViewWithTag(field.getId());      iinEditText.addTextChangedListener(new IinLookupTextWatcher(PaymentInputActivity.this,session,this,paymentContext));      if (renderIinLogo) {        iinEditText.requestFocus();        showDrawableInEditText(paymentItem.getId());      }    }  }}  }
class C{  static double readZDouble(DataInput in) throws IOException {  int b=in.readByte() & 0xFF;  if (b == 0xFF) {    return Double.longBitsToDouble(in.readLong());  } else   if (b == 0xFE) {    return Float.intBitsToFloat(in.readInt());  } else   if ((b & 0x80) != 0) {    return (b & 0x7f) - 1;  } else {    long bits=((long)b) << 56 | ((in.readInt() & 0xFFFFFFFFL) << 24) | ((in.readShort() & 0xFFFFL) << 8) | (in.readByte() & 0xFFL);    return Double.longBitsToDouble(bits);  }}  }
class C{  public void addPositionChoice(CodePosition cp){  if (choices == null) {    choices=new LinkedList();  }  choices.add(cp);}  }
class C{  public static void assertSize(String arrayName,int expectedSize,Object[] actualArray){  try {    Assert.assertNotNull(arrayName + " should not be null",actualArray);    int actualSize=actualArray.length;    if (actualSize != expectedSize) {      Assert.fail("Incorrect size for " + arrayName + "; expected:<"+ expectedSize+ "> but was:<"+ actualSize+ '>');    }  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public static Variable createVariable(Model model,String varName){  Variable variable=model.createResource().as(Variable.class);  variable.addProperty(SP.varName,model.createTypedLiteral(varName));  return variable;}  }
class C{  public void visit(Automaton a){  init();  this.fStartState=a.getStartState();  Set<Edge> he=(Set<Edge>)a.getEdges();  for (  Edge e : he) {    e.visited(this);  }  System.out.println("visiting automaton structure done.");  System.out.println("#states: " + a.getStates().size() + " #edges: "+ a.getEdges().size());}  }
class C{  public boolean isSetPingFrequency(){  return EncodingUtils.testBit(__isset_bitfield,__PINGFREQUENCY_ISSET_ID);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y, z;  int i;  int progress=0;  double weight=1;  int numPointsToUse=8;  int numPoints=0;  int lineNum=0;  int nlines=0;  double maxDist=Double.POSITIVE_INFINITY;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String delimiter=" ";  boolean firstLineHeader=false;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double sumWeights;  double noData=-32768;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  String attributeName=args[1];  firstLineHeader=Boolean.parseBoolean(args[2]);  outputHeader=args[3];  resolution=Double.parseDouble(args[4]);  weight=Double.parseDouble(args[5]);  if (!args[6].equalsIgnoreCase("not specified")) {    maxDist=Double.parseDouble(args[6]);  }  if (maxDist == Double.POSITIVE_INFINITY) {    showFeedback("Unspecified maximum distance.");    return;  }  if ((inputFilesString.length() <= 0) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    if (maxDist < Double.POSITIVE_INFINITY) {      maxDist=maxDist * maxDist;    }    updateProgress("Counting the number of points:",0);    numPoints=0;    for (i=0; i < numPointFiles; i++) {      if (pointFiles[i].endsWith(".shp")) {        ShapeFile inputShape=new ShapeFile(pointFiles[i]);        for (int r=0; r < inputShape.getNumberOfRecords(); r++) {          double[][] points=inputShape.getRecord(r).getGeometry().getPoints();          numPoints+=points.length;        }      } else {        nlines=countLinesInFile(pointFiles[i]);        if (firstLineHeader) {          numPoints+=nlines - 1;        } else {          numPoints+=nlines;        }      }    }    if (numPoints < numPointsToUse) {      numPointsToUse=numPoints;    }    KdTree<Double> pointsTree=new KdTree.SqrEuclid<>(2,new Integer(numPoints));    nlines=0;    for (i=0; i < numPointFiles; i++) {      if (pointFiles[i].endsWith(".shp")) {        double[][] vertices;        ShapeFile inputShape=new ShapeFile(pointFiles[i]);        ShapeType shapeType=inputShape.getShapeType();        String[] attributeFieldNames=inputShape.getAttributeTableFields();        int fieldNum=-1;        for (int q=0; q < attributeFieldNames.length; q++) {          String str=attributeFieldNames[q];          if (str.toLowerCase().trim().equals(attributeName.toLowerCase().trim())) {            fieldNum=q;            break;          }        }        boolean useZ=false;        boolean useM=false;        if (fieldNum < 0) {          if (attributeName.toLowerCase().trim().equals("z") && shapeType.getDimension() == ShapeTypeDimension.Z) {            useZ=true;          } else           if (attributeName.toLowerCase().trim().equals("m") && shapeType.getDimension() == ShapeTypeDimension.M) {            useM=true;          }        }        for (        ShapeFileRecord record : inputShape.records) {          int recNumber=record.getRecordNumber();          double[] zArray=null;          double[] mArray=null;switch (shapeType) {case POINT:            whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());          vertices=recPoint.getPoints();        break;case POINTZ:      PointZ recPointZ=(PointZ)record.getGeometry();    vertices=recPointZ.getPoints();  zArray=new double[]{recPointZ.getZ()};break;case POINTM:PointM recPointM=(PointM)record.getGeometry();vertices=recPointM.getPoints();mArray=new double[]{recPointM.getM()};break;case MULTIPOINT:MultiPoint recMultiPoint=(MultiPoint)record.getGeometry();vertices=recMultiPoint.getPoints();break;case MULTIPOINTZ:MultiPointZ recMultiPointZ=(MultiPointZ)record.getGeometry();vertices=recMultiPointZ.getPoints();zArray=recMultiPointZ.getzArray();break;case MULTIPOINTM:MultiPointM recMultiPointM=(MultiPointM)record.getGeometry();vertices=recMultiPointM.getPoints();mArray=recMultiPointM.getmArray();break;default :showFeedback("Invalid shape type for interpolation.");return;}if (!useZ && !useM) {Object[] rowData=inputShape.getAttributeTable().getRecord(recNumber - 1);z=(double)rowData[fieldNum];for (int p=0; p < vertices.length; p++) {x=vertices[p][0];y=vertices[p][1];double[] entry={y,x};pointsTree.addPoint(entry,z);if (x < minX) {minX=x;}if (x > maxX) {maxX=x;}if (y < minY) {minY=y;}if (y > maxY) {maxY=y;}}} else if (useZ && zArray != null) {for (int p=0; p < vertices.length; p++) {x=vertices[p][0];y=vertices[p][1];double[] entry={y,x};pointsTree.addPoint(entry,zArray[p]);if (x < minX) {minX=x;}if (x > maxX) {maxX=x;}if (y < minY) {minY=y;}if (y > maxY) {maxY=y;}}} else if (useM && mArray != null) {for (int p=0; p < vertices.length; p++) {x=vertices[p][0];y=vertices[p][1];double[] entry={y,x};pointsTree.addPoint(entry,mArray[p]);if (x < minX) {minX=x;}if (x > maxX) {maxX=x;}if (y < minY) {minY=y;}if (y > maxY) {maxY=y;}}}}} else {DataInputStream in=null;BufferedReader br=null;try {FileInputStream fstream=new FileInputStream(pointFiles[i]);in=new DataInputStream(fstream);br=new BufferedReader(new InputStreamReader(in));String line;String[] str;lineNum=1;while ((line=br.readLine()) != null) {str=line.split(delimiter);if (str.length <= 1) {delimiter="\t";str=line.split(delimiter);if (str.length <= 1) {delimiter=" ";str=line.split(delimiter);if (str.length <= 1) {delimiter=",";str=line.split(delimiter);}}}if ((lineNum > 1 || !firstLineHeader) && (str.length >= 3)) {x=Double.parseDouble(str[0]);y=Double.parseDouble(str[1]);z=Double.parseDouble(str[2]);double[] entry={y,x};pointsTree.addPoint(entry,z);if (x < minX) {minX=x;}if (x > maxX) {maxX=x;}if (y < minY) {minY=y;}if (y > maxY) {maxY=y;}}lineNum++;nlines++;progress=(int)(100d * nlines / numPoints);updateProgress("Reading point data:",progress);}in.close();br.close();} catch (java.io.IOException e) {System.err.println("Error: " + e.getMessage());} finally {try {if (in != null || br != null) {in.close();br.close();}} catch (java.io.IOException ex) {}}}}west=minX - 0.5 * resolution;north=maxY + 0.5 * resolution;nrows=(int)(Math.ceil((north - minY) / resolution));ncols=(int)(Math.ceil((maxX - west) / resolution));south=north - nrows * resolution;east=west + ncols * resolution;fw=new FileWriter(outputHeader,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(ncols);out.println(str1);str1="Rows:\t" + Integer.toString(nrows);out.println(str1);str1="Data Type:\t" + "float";out.println(str1);str1="Z Units:\t" + "not specified";out.println(str1);str1="XY Units:\t" + "not specified";out.println(str1);str1="Projection:\t" + "not specified";out.println(str1);str1="Data Scale:\tcontinuous";out.println(str1);str1="Preferred Palette:\t" + "spectrum.pal";out.println(str1);str1="NoData:\t" + noData;out.println(str1);if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);out.close();WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");double northing, easting;double halfResolution=resolution / 2;double dist=0;for (row=0; row < nrows; row++) {for (col=0; col < ncols; col++) {easting=(col * resolution) + (west + halfResolution);northing=(north - halfResolution) - (row * resolution);double[] entry={northing,easting};results=pointsTree.neighborsWithinRange(entry,maxDist);sumWeights=0;for (i=0; i < results.size(); i++) {if ((results.get(i).distance > 0) && (results.get(i).distance < maxDist)) {dist=Math.pow(Math.sqrt(results.get(i).distance),weight);sumWeights+=1 / dist;} else if (results.get(i).distance == 0) {break;}}if (sumWeights > 0) {z=0;for (i=0; i < results.size(); i++) {if ((results.get(i).distance > 0) && (results.get(i).distance < maxDist)) {dist=1 / Math.pow(Math.sqrt(results.get(i).distance),weight);z+=(dist * results.get(i).value) / sumWeights;} else if (results.get(i).distance == 0) {z=results.get(i).value;break;}}image.setValue(row,col,z);} else {image.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (nrows - 1));updateProgress("Interpolating point data:",progress);}image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");image.addMetadataEntry("Created on " + new Date());image.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private Formatting(){  instanceNotAllowed(getClass());}  }
class C{  private void testIsoYearJanuary1thWednesday() throws Exception {  assertEquals(2002,getIsoYear(parse("2002-12-28")));  assertEquals(2002,getIsoYear(parse("2002-12-29")));  assertEquals(2003,getIsoYear(parse("2002-12-30")));  assertEquals(2003,getIsoYear(parse("2002-12-31")));  assertEquals(2003,getIsoYear(parse("2003-01-01")));  assertEquals(2003,getIsoYear(parse("2003-01-02")));  assertEquals(2003,getIsoYear(parse("2003-12-02")));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:52.653 -0500",hash_original_method="DE029E7F723B320891C027CB0C38824B",hash_generated_method="42D40A1613DAF9C65DEE120112EF352F") public static Uri add(ContentResolver cr,Intent intent,String title,String folder,char shortcut,int ordering){  if (shortcut != 0) {    cr.delete(CONTENT_URI,sShortcutSelection,new String[]{String.valueOf((int)shortcut)});  }  ContentValues values=new ContentValues();  if (title != null)   values.put(TITLE,title);  if (folder != null)   values.put(FOLDER,folder);  values.put(INTENT,intent.toUri(0));  if (shortcut != 0)   values.put(SHORTCUT,(int)shortcut);  values.put(ORDERING,ordering);  return cr.insert(CONTENT_URI,values);}  }
class C{  public XMLScanner(Reader r) throws XMLException {  context=DOCUMENT_START_CONTEXT;  try {    reader=new StreamNormalizingReader(r);    current=nextChar();  } catch (  IOException e) {    throw new XMLException(e);  }}  }
class C{  private RefactoringStatus checkSelection(IProgressMonitor pm) throws JavaModelException {  try {    pm.beginTask(RefactoringCoreMessages.IntroduceFactory_examiningSelection,2);    fSelectedNode=getTargetNode(fCUHandle,fSelectionStart,fSelectionLength);    if (fSelectedNode == null)     return RefactoringStatus.createFatalErrorStatus(RefactoringCoreMessages.IntroduceFactory_notAConstructorInvocation);    if (fSelectedNode instanceof ClassInstanceCreation) {      ClassInstanceCreation classInstanceCreation=(ClassInstanceCreation)fSelectedNode;      fCtorBinding=classInstanceCreation.resolveConstructorBinding();    } else     if (fSelectedNode instanceof MethodDeclaration) {      MethodDeclaration methodDeclaration=(MethodDeclaration)fSelectedNode;      fCtorBinding=methodDeclaration.resolveBinding();    }    if (fCtorBinding == null)     return RefactoringStatus.createFatalErrorStatus(RefactoringCoreMessages.IntroduceFactory_unableToResolveConstructorBinding);    fCtorBinding=fCtorBinding.getMethodDeclaration();    pm.worked(1);    if (fCtorBinding.getDeclaringClass().isNested())     return RefactoringStatus.createFatalErrorStatus(RefactoringCoreMessages.IntroduceFactory_unsupportedNestedTypes);    ITypeBinding ctorType=fCtorBinding.getDeclaringClass();    IType ctorOwningType=(IType)ctorType.getJavaElement();    if (ctorOwningType.isBinary())     return RefactoringStatus.createFatalErrorStatus(RefactoringCoreMessages.IntroduceFactory_constructorInBinaryClass);    if (ctorOwningType.isEnum())     return RefactoringStatus.createFatalErrorStatus(RefactoringCoreMessages.IntroduceFactory_constructorInEnum);    fFactoryUnitHandle=ctorOwningType.getCompilationUnit();    fFactoryCU=getASTFor(fFactoryUnitHandle);    Name ctorOwnerName=(Name)NodeFinder.perform(fFactoryCU,ctorOwningType.getNameRange());    fCtorOwningClass=(AbstractTypeDeclaration)ASTNodes.getParent(ctorOwnerName,AbstractTypeDeclaration.class);    fFactoryOwningClass=fCtorOwningClass;    pm.worked(1);    if (fNewMethodName == null)     return setNewMethodName("create" + fCtorBinding.getName()); else     return new RefactoringStatus();  }  finally {    pm.done();  }}  }
class C{  public JSONArray put(double value) throws JSONException {  Double d=new Double(value);  JSONObject.testValidity(d);  this.put(d);  return this;}  }
class C{  public void position(long pos){  setCurrentPosition(pos);}  }
class C{  public JPasswordDialog(java.awt.Frame parent,boolean modal){  super(parent,modal);  init();}  }
class C{  public static FrozenObjectError newFor(Object obj){  return new FrozenObjectError("Cannot modify frozen object! " + obj);}  }
class C{  public RenderTarget(String name,int width,int height){  this(name,width,height,0,0,false,false,GLES20.GL_TEXTURE_2D,Config.ARGB_8888,FilterType.LINEAR,WrapType.CLAMP);}  }
class C{  public FDSpecificationExtender(FDSpecification spec){  this.spec=spec;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  void addException(Throwable t){  if (config.getExceptionListener() != null)   config.getExceptionListener().on(t);  if (!(t instanceof SQLTransientException) || t instanceof SQLTransientConnectionException)   exceptions.add(t);}  }
class C{  public static int computeRawVarint64Size(final long value){  if ((value & (0xffffffffffffffffL << 7)) == 0)   return 1;  if ((value & (0xffffffffffffffffL << 14)) == 0)   return 2;  if ((value & (0xffffffffffffffffL << 21)) == 0)   return 3;  if ((value & (0xffffffffffffffffL << 28)) == 0)   return 4;  if ((value & (0xffffffffffffffffL << 35)) == 0)   return 5;  if ((value & (0xffffffffffffffffL << 42)) == 0)   return 6;  if ((value & (0xffffffffffffffffL << 49)) == 0)   return 7;  if ((value & (0xffffffffffffffffL << 56)) == 0)   return 8;  if ((value & (0xffffffffffffffffL << 63)) == 0)   return 9;  return 10;}  }
class C{  public Road(){  super();}  }
class C{  public Builder<T> gt(T value){  start=value;  excludeLower=true;  return this;}  }
class C{  public boolean isFijo(){  return fijo;}  }
class C{  private Class<T> generate(){  generateProxy(_type);  return getProxyClass();}  }
class C{  public boolean isStrikeThrough(){  sync();  return strike;}  }
class C{  protected void executeWithoutLogging(List<Class<?>> loggingClasses,Command command) throws Exception {  loggingHelper.executeWithoutLogging(loggingClasses,command);}  }
class C{  public static List<RecommendationInfo> generateTweetRecs(TopSecondDegreeByCountRequest request,List<NodeInfo> nodeInfoList){  int maxNumResults=request.getMaxNumResultsByType().containsKey(RecommendationType.TWEET) ? Math.min(request.getMaxNumResultsByType().get(RecommendationType.TWEET),RecommendationRequest.MAX_RECOMMENDATION_RESULTS) : RecommendationRequest.DEFAULT_RECOMMENDATION_RESULTS;  PriorityQueue<NodeInfo> topResults=new PriorityQueue<NodeInfo>(maxNumResults);  int minUserSocialProofSize=request.getMinUserSocialProofSizes().containsKey(RecommendationType.TWEET) ? request.getMinUserSocialProofSizes().get(RecommendationType.TWEET) : MIN_USER_SOCIAL_PROOF_SIZE;  for (  NodeInfo nodeInfo : nodeInfoList) {    if (isTweetSocialProofOnly(nodeInfo.getSocialProofs(),4)) {      continue;    }    if (isLessThanMinUserSocialProofSize(nodeInfo.getSocialProofs(),minUserSocialProofSize) && isLessThanMinUserSocialProofSizeCombined(nodeInfo.getSocialProofs(),minUserSocialProofSize,request.getSocialProofTypeUnions())) {      continue;    }    addResultToPriorityQueue(topResults,nodeInfo,maxNumResults);  }  byte[] validSocialProofs=request.getSocialProofTypes();  int maxSocialProofSize=request.getMaxUserSocialProofSize();  List<RecommendationInfo> outputResults=Lists.newArrayListWithCapacity(topResults.size());  while (!topResults.isEmpty()) {    NodeInfo nodeInfo=topResults.poll();    outputResults.add(new TweetRecommendationInfo(TweetIDMask.restore(nodeInfo.getValue()),nodeInfo.getWeight(),pickTopSocialProofs(nodeInfo.getSocialProofs(),validSocialProofs,maxSocialProofSize)));  }  Collections.reverse(outputResults);  return outputResults;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGraphPackage.TRANSITION__TRIGGER:    setTrigger((Trigger)null);  return;case SGraphPackage.TRANSITION__EFFECT:setEffect((Effect)null);return;case SGraphPackage.TRANSITION__PROPERTIES:getProperties().clear();return;case SGraphPackage.TRANSITION__DOCUMENTATION:setDocumentation(DOCUMENTATION_EDEFAULT);return;case SGraphPackage.TRANSITION__TARGET:setTarget((Vertex)null);return;case SGraphPackage.TRANSITION__SOURCE:setSource((Vertex)null);return;}super.eUnset(featureID);}  }
class C{  void matrixTranslate(float x,float y,float z){  mDx+=x;  mDy+=y;  if ((mDx < -300) || (mDx > 300))   mDx-=x;  if ((mDy < -250) || (mDy > 250))   mDy-=y;  mViewMatrix[14]+=z;}  }
class C{  public boolean isWatched(){  return watched;}  }
class C{  public static Map<String,Object> exampleMapForProperties(Map<String,Property> properties,Map<String,Model> definitions,MarkupDocBuilder markupDocBuilder,Map<String,Integer> refStack){  Map<String,Object> exampleMap=new LinkedHashMap<>();  if (properties != null) {    for (    Map.Entry<String,Property> property : properties.entrySet()) {      Object exampleObject=property.getValue().getExample();      if (exampleObject == null) {        if (property.getValue() instanceof RefProperty) {          exampleObject=generateExampleForRefModel(true,((RefProperty)property.getValue()).getSimpleRef(),definitions,markupDocBuilder,refStack);        } else         if (property.getValue() instanceof ArrayProperty) {          exampleObject=generateExampleForArrayProperty((ArrayProperty)property.getValue(),definitions,markupDocBuilder,refStack);        } else         if (property.getValue() instanceof MapProperty) {          exampleObject=generateExampleForMapProperty((MapProperty)property.getValue(),markupDocBuilder);        }        if (exampleObject == null) {          Property valueProperty=property.getValue();          exampleObject=PropertyUtils.generateExample(valueProperty,markupDocBuilder);        }      }      exampleMap.put(property.getKey(),exampleObject);    }  }  return exampleMap;}  }
class C{  public void clearAuthenticationTokens(){  this.authenticationTokens.clear();}  }
class C{  @Override public void test() throws ParameterException {  if (flagConstraint == flag.getValue().booleanValue()) {    if (cons != null) {      for (      ParameterConstraint<? super S> c : cons) {        c.test(param.getValue());      }    } else {      if (!param.isDefined()) {        throw new UnusedParameterException("Value of parameter " + param.getName() + " is not optional.");      }    }  }}  }
class C{  public void mouseDragged(MouseEvent e){  int thumbMiddle;  if (!slider.isEnabled()) {    return;  }  currentMouseX=e.getX();  currentMouseY=e.getY();  if (!isDragging) {    return;  }  slider.setValueIsAdjusting(true);switch (slider.getOrientation()) {case JSlider.VERTICAL:    int halfThumbHeight=thumbRect.height / 2;  int thumbTop=e.getY() - offset;int trackTop=trackRect.y;int trackBottom=trackRect.y + (trackRect.height - 1);int vMax=yPositionForValue(slider.getMaximum() - slider.getExtent());if (drawInverted()) {trackBottom=vMax;} else {trackTop=vMax;}thumbTop=Math.max(thumbTop,trackTop - halfThumbHeight);thumbTop=Math.min(thumbTop,trackBottom - halfThumbHeight);setThumbLocation(thumbRect.x,thumbTop);thumbMiddle=thumbTop + halfThumbHeight;slider.setValue(valueForYPosition(thumbMiddle));break;case JSlider.HORIZONTAL:int halfThumbWidth=thumbRect.width / 2;int thumbLeft=e.getX() - offset;int trackLeft=trackRect.x;int trackRight=trackRect.x + (trackRect.width - 1);int hMax=xPositionForValue(slider.getMaximum() - slider.getExtent());if (drawInverted()) {trackLeft=hMax;} else {trackRight=hMax;}thumbLeft=Math.max(thumbLeft,trackLeft - halfThumbWidth);thumbLeft=Math.min(thumbLeft,trackRight - halfThumbWidth);setThumbLocation(thumbLeft,thumbRect.y);thumbMiddle=thumbLeft + halfThumbWidth;slider.setValue(valueForXPosition(thumbMiddle));break;}}  }
class C{  public static int footerStartRelative(BinaryPositionReadable in,int start){  short flags=in.readShortPositioned(start + GridBinaryMarshaller.FLAGS_POS);  if (hasSchema(flags))   return in.readIntPositioned(start + GridBinaryMarshaller.SCHEMA_OR_RAW_OFF_POS); else   return length(in,start);}  }
class C{  @Override protected void draw(final Graphics2D g2d,final int x,final int y,final int width,final int height){  boolean newIgnoreStatus=User.isIgnoring(entity.getName());  if (newIgnoreStatus != ignored) {    visibilityChanged=true;    ignored=newIgnoreStatus;    markChanged();  }  super.draw(g2d,x,y,width,height);}  }
class C{  public Job submit() throws InterruptedException, ExecutionException {  Future<Job> f=submitter.submit(topology);  return f.get();}  }
class C{  public void restartAutoScroll(){  mHandler.post(ScrollRunnable);}  }
class C{  public static String quantityplnounCreature(final int quantity,final String noun){  if (noun.equals("chicken")) {    final String end=plnounCreature(quantity,noun);    return Integer.toString(quantity) + " " + end;  }  return quantityplnoun(quantity,noun);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void findSpecializedMethods(){  for (  SootMethod method : API.v().getAllSystemMethods()) {    for (    Tag tag : method.getTags()) {      if (tag instanceof VisibilityAnnotationTag) {        VisibilityAnnotationTag vat=(VisibilityAnnotationTag)tag;        for (        AnnotationTag at : vat.getAnnotations()) {          if (at.getType().equals("Ldroidsafe/annotations/DSSpecialize;")) {            logger.info("Found api specialized method: {}\n",method);            if (!method.hasActiveBody() || at.getElems().size() != 1 || !(at.getElems().iterator().next() instanceof AnnotationArrayElem)) {              logger.error("Modeled api method has no active body or other problem: {}",method);              droidsafe.main.Main.exit(1);            }            AnnotationArrayElem templateArray=(AnnotationArrayElem)at.getElems().iterator().next();            for (int i=0; i < templateArray.getNumValues(); i++) {              AnnotationTag template=((AnnotationAnnotationElem)templateArray.getValueAt(i)).getValue();              Object[] elems=template.getElems().toArray();              int arg=((AnnotationIntElem)elems[0]).getValue();              String value=((AnnotationStringElem)elems[1]).getValue();              String meth=((AnnotationStringElem)elems[2]).getValue();              SootMethod specializedMeth=method.getDeclaringClass().getMethodByName(meth);              soot.Type argType=method.getParameterType(arg);              CallSpecialization<?> cs;              if (argType instanceof IntType) {                cs=new CallSpecialization<Integer>(specializedMeth,arg,Integer.decode(value));              } else               if (SootUtils.isStringType(argType)) {                cs=new CallSpecialization<String>(specializedMeth,arg,value);              } else {                logger.error("Unsupported argument type for specialization {} in method {}.",argType,method);                droidsafe.main.Main.exit(1);              }              cs=new CallSpecialization<String>(specializedMeth,arg,value);              specializations.put(method,cs);            }          }        }      }    }  }}  }
class C{  public static TimeZone toTimeZone(int gmtOffset){  if (gmtOffset > 12 || gmtOffset < -14) {    throw new IllegalArgumentException("Invalid GMT offset");  }  String tzId=gmtOffset > 0 ? "Etc/GMT+" : "Etc/GMT";  return TimeZone.getTimeZone(tzId + gmtOffset);}  }
class C{  protected ST(){  if (STGroup.trackCreationEvents) {    if (debugState == null)     debugState=new ST.DebugState();    debugState.newSTEvent=new ConstructionEvent();  }}  }
class C{  public static Map<String,Object> initUser(){  Map<String,Object> user=new HashMap<String,Object>();  Map<String,Object> tone=new HashMap<String,Object>();  Map<String,Object> emotionTone=new HashMap<String,Object>();  emotionTone.put("current",null);  Map<String,Object> socialTone=new HashMap<String,Object>();  socialTone.put("current",null);  Map<String,Object> languageTone=new HashMap<String,Object>();  languageTone.put("current",null);  tone.put("emotion",emotionTone);  tone.put("social",socialTone);  tone.put("language",languageTone);  user.put("tone",tone);  return user;}  }
class C{  public static String safeToString(GeneralName generalName,boolean addLinkForURI){  if (generalName == null) {    return "";  }switch (generalName.getTagNo()) {case GeneralName.directoryName:{      X500Name directoryName=(X500Name)generalName.getName();      return MessageFormat.format(res.getString("GeneralNameUtil.DirectoryGeneralName"),directoryName.toString());    }case GeneralName.dNSName:{    DERIA5String dnsName=(DERIA5String)generalName.getName();    return MessageFormat.format(res.getString("GeneralNameUtil.DnsGeneralName"),dnsName.getString());  }case GeneralName.iPAddress:{  byte[] ipAddressBytes=((ASN1OctetString)generalName.getName()).getOctets();  String ipAddressString="";  try {    ipAddressString=InetAddress.getByAddress(ipAddressBytes).getHostAddress();  } catch (  UnknownHostException e) {  }  return MessageFormat.format(res.getString("GeneralNameUtil.IpAddressGeneralName"),ipAddressString);}case GeneralName.registeredID:{ASN1ObjectIdentifier registeredId=(ASN1ObjectIdentifier)generalName.getName();return MessageFormat.format(res.getString("GeneralNameUtil.RegisteredIdGeneralName"),ObjectIdUtil.toString(registeredId));}case GeneralName.rfc822Name:{DERIA5String rfc822Name=(DERIA5String)generalName.getName();return MessageFormat.format(res.getString("GeneralNameUtil.Rfc822GeneralName"),rfc822Name.getString());}case GeneralName.uniformResourceIdentifier:{DERIA5String uri=(DERIA5String)generalName.getName();String link=addLinkForURI ? "<html><a href=\"" + uri.getString() + "\">"+ uri.getString()+ "</a></html>" : uri.getString();return MessageFormat.format(res.getString("GeneralNameUtil.UriGeneralName"),link);}case GeneralName.otherName:{String upn=parseUPN(generalName);return MessageFormat.format(res.getString("GeneralNameUtil.OtherGeneralName"),"UPN",upn);}default :{return "";}}}  }
class C{  public boolean isAtRest(){  return Math.abs(mCurrentState.velocity) <= mRestSpeedThreshold && getDisplacementDistanceForState(mCurrentState) <= mDisplacementFromRestThreshold;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  Node newChild;  Node child;  String childName;  Node insertedNode;  java.util.List actual=new java.util.ArrayList();  java.util.List expected=new java.util.ArrayList();  expected.add("em");  expected.add("strong");  expected.add("code");  expected.add("br");  expected.add("sup");  expected.add("var");  expected.add("acronym");  int nodeType;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("sup");  refChild=elementList.item(2);  employeeNode=refChild.getParentNode();  childList=employeeNode.getChildNodes();  newChild=doc.createElement("br");  insertedNode=employeeNode.insertBefore(newChild,refChild);  for (int indexN10091=0; indexN10091 < childList.getLength(); indexN10091++) {    child=(Node)childList.item(indexN10091);    nodeType=(int)child.getNodeType();    if (equals(1,nodeType)) {      childName=child.getNodeName();      actual.add(childName);    }  }  assertEqualsAutoCase("element","nodeNames",expected,actual);}  }
class C{  static boolean analyzePredicate(Compiler compiler,int opPos,int stepType) throws javax.xml.transform.TransformerException {  int argLen;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:    argLen=compiler.getArgLength(opPos);  break;default :argLen=compiler.getArgLengthOfStep(opPos);}int pos=compiler.getFirstPredicateOpPos(opPos);int nPredicates=compiler.countPredicates(pos);return (nPredicates > 0) ? true : false;}  }
class C{  protected boolean isIPBroadcast(IPv4Address ip){  IPv4Address inv_subnet_mask=subnet_mask.not();  return ip.and(inv_subnet_mask).equals(inv_subnet_mask);}  }
class C{  private void paintDiscrete(Graphics2D g,JComponent c,int width,int height){  boolean useToolBarColors=isInToolBar(c);  Shape s;  if (isFocused) {    s=shapeGenerator.createSliderThumbDiscrete(0,0,width,height,CornerSize.SLIDER_OUTER_FOCUS);    g.setPaint(getFocusPaint(s,FocusType.OUTER_FOCUS,useToolBarColors));    g.fill(s);    s=shapeGenerator.createSliderThumbDiscrete(1,1,width - 2,height - 2,CornerSize.SLIDER_INNER_FOCUS);    g.setPaint(getFocusPaint(s,FocusType.INNER_FOCUS,useToolBarColors));    g.fill(s);  }  s=shapeGenerator.createSliderThumbDiscrete(2,2,width - 4,height - 4,CornerSize.SLIDER_BORDER);  if (!isFocused) {    dropShadow.fill(g,s);  }  g.setPaint(getCommonBorderPaint(s,type));  g.fill(s);  s=shapeGenerator.createSliderThumbDiscrete(3,3,width - 6,height - 6,CornerSize.SLIDER_INTERIOR);  g.setPaint(getCommonInteriorPaint(s,type));  g.fill(s);}  }
class C{  public static boolean isMatchingEtag(final List<String> headerList,final String etag){  for (  String header : headerList) {    final String[] headerEtags=header.split(",");    for (    String s : headerEtags) {      s=s.trim();      if (s.equals(etag) || "*".equals(s)) {        return true;      }    }  }  return false;}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 1 || lexState < 0)   throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrError.INVALID_LEXICAL_STATE); else   curLexState=lexState;}  }
class C{  public T campaignKeyword(String value){  setString(CAMPAIGN_KEYWORD,value);  return (T)this;}  }
class C{  public void clearResults(){  view.cardsLayout.removeAllViews();  que.clear();}  }
class C{  public OutputStream createEncryptedStream(byte[] digest,OutputStream outputStream) throws IOException {  byte[] finalKeyDigest=Encryption.getFinalKeyDigest(digest,getMasterSeed(),getTransformSeed(),getTransformRounds());  return Encryption.getEncryptedOutputStream(outputStream,finalKeyDigest,getEncryptionIv());}  }
class C{  private static PeriodFormatterAndValue selectFormatter(Period daysPeriod){  int days=daysPeriod.getDays();  if (days > 0) {    return pav(DAY_FORMATTER,days);  }  int hours=daysPeriod.getHours();  if (hours > 0) {    return pav(HOUR_FORMATTER,hours);  }  int minutes=daysPeriod.getMinutes();  if (minutes > 0) {    return pav(MINUTE_FORMATTER,minutes);  }  int seconds=daysPeriod.getSeconds();  if (seconds > 0) {    return pav(SECOND_FORMATTER,seconds);  }  return null;}  }
class C{  public void visitAttribute(Attribute attr){  if (mv != null) {    mv.visitAttribute(attr);  }}  }
class C{  public List<URIMetadataNode> query(String querystr){  final QueryGoal qg=new QueryGoal(querystr);  final Switchboard sb=Switchboard.getSwitchboard();  Bitfield filter=new Bitfield();  final QueryParams query=new QueryParams(qg,new QueryModifier(0),Integer.MAX_VALUE,"",Classification.ContentDomain.ALL,"",0,null,CacheStrategy.IFFRESH,100,0,".*",null,null,QueryParams.Searchdom.LOCAL,filter,false,null,MultiProtocolURL.TLD_any_zone_filter,"",false,sb.index,sb.getRanking(),"",0.0d,0.0d,0.0d,new String[0]);  return query(query);}  }
class C{  public boolean containsValue(int value){  Entry[] tab=table;  for (int i=0; i < tab.length; i++)   for (Entry e=tab[i]; e != null; e=e.next)   if (value == e.value)   return true;  return false;}  }
class C{  @SuppressWarnings("deprecation") private FileStatus toPrimary(FileStatus status){  return status != null ? new FileStatus(status.getLen(),status.isDir(),status.getReplication(),status.getBlockSize(),status.getModificationTime(),status.getAccessTime(),status.getPermission(),status.getOwner(),status.getGroup(),toPrimary(status.getPath())) : null;}  }
class C{  public static boolean isNCNameStart(int c){  return c < 0x10000 && (CHARS[c] & MASK_NCNAME_START) != 0;}  }
class C{  @Deprecated public FrameworkEvent(int type,Object source){  super(source);  this.type=type;  this.bundle=null;  this.throwable=null;}  }
class C{  public int processByte(byte in,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  int resultLen=0;  if (bufOff == buf.length) {    resultLen=cipher.processBlock(buf,0,out,outOff);    System.arraycopy(buf,blockSize,buf,0,blockSize);    bufOff=blockSize;  }  buf[bufOff++]=in;  return resultLen;}  }
class C{  public VariableGridLayout(int rows,int cols,int hgap,int vgap){  super(rows,cols,hgap,vgap);  this.rows=rows;  this.cols=cols;  this.hgap=hgap;  this.vgap=vgap;  if (rows != 0) {    rowsSet=new BitSet(rows);    stdRowFractions(rows);  }  if (cols != 0) {    colsSet=new BitSet(cols);    stdColFractions(cols);  }}  }
class C{  public boolean isTrue(){  return true_;}  }
class C{  public static boolean launchOneTimeFile(final File file){  return launchFile(file,true,false);}  }
class C{  @RequestMapping(value="/internal/jobs/{jobType}",method=POST) public void startJob(final @PathVariable String jobType,final HttpServletRequest request,final HttpServletResponse response) throws IOException {  final Optional<String> jobId=jobService.startAsyncJob(jobType);  if (jobId.isPresent()) {    response.setHeader("Location",baseUriOf(request) + "/internal/jobs/" + jobId.get());    response.setStatus(SC_NO_CONTENT);  } else {    response.sendError(SC_CONFLICT);  }}  }
class C{  @Override protected String doIt() throws Exception {  if (posKeyLayoutId == 0)   throw new FillMandatoryException("C_POSKeyLayout_ID");  int count=0;  String where="";  Object[] params=new Object[]{};  if (productCategoryId > 0) {    where="M_Product_Category_ID = ? ";    params=new Object[]{productCategoryId};  }  Query query=new Query(getCtx(),MProduct.Table_Name,where,get_TrxName()).setParameters(params).setOnlyActiveRecords(true).setOrderBy("Value");  List<MProduct> products=query.list();  for (  MProduct product : products) {    MPOSKey key=new MPOSKey(getCtx(),0,get_TrxName());    key.setName(product.getName());    key.setM_Product_ID(product.getM_Product_ID());    key.setC_POSKeyLayout_ID(posKeyLayoutId);    key.setSeqNo(count * 10);    key.setQty(Env.ONE);    key.saveEx();    count++;  }  return "@Created@ " + count;}  }
class C{  public boolean isGramType(){  return GRAM_TYPE.equals(typeAttribute.type());}  }
class C{  public void testDispatch_ThrottleListener(){  ThrottleListener l=null;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.dispatch(l);}  }
class C{  public String toString(){  String str="ISOChronology";  DateTimeZone zone=getZone();  if (zone != null) {    str=str + '[' + zone.getID()+ ']';  }  return str;}  }
class C{  public void addCheckcast(CtClass c){  addOpcode(CHECKCAST);  addIndex(constPool.addClassInfo(c));}  }
class C{  public Boolean isIpfixSupported(){  return ipfixSupported;}  }
class C{  @Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {  if (qName.equals(ITEM_TAG)) {    KeyHandler subhandler=new KeyHandler(this.root,this);    this.root.pushSubHandler(subhandler);  } else   if (qName.equals(VALUE_TAG)) {    ValueHandler subhandler=new ValueHandler(this.root,this);    this.root.pushSubHandler(subhandler);  } else {    throw new SAXException("Expected <Item> or <Value>...found " + qName);  }}  }
class C{  public boolean ping(){  return ping(this.timeout);}  }
class C{  public boolean putOutFire(){  int roll=Compute.d6(2);switch (weatherConditions) {case (WE_LIGHT_HAIL):case (WE_LIGHT_RAIN):case (WE_LIGHT_SNOW):    roll=roll + 1;  break;case (WE_HEAVY_HAIL):case (WE_MOD_RAIN):case (WE_MOD_SNOW):roll=roll + 2;break;case (WE_HEAVY_RAIN):case (WE_HEAVY_SNOW):roll=roll + 3;break;case (WE_DOWNPOUR):roll=roll + 4;break;default :roll=-1;}if (roll > 10) {return true;}return false;}  }
class C{  static String clean(String str){  if (str == null || str.isEmpty()) {    return str;  }  int len=str.length();  char[] chars=new char[len];  int count=0;  for (int i=0; i < len; i++) {    if (Character.isLetter(str.charAt(i))) {      chars[count++]=str.charAt(i);    }  }  if (count == len) {    return str.toUpperCase(java.util.Locale.ENGLISH);  }  return new String(chars,0,count).toUpperCase(java.util.Locale.ENGLISH);}  }
class C{  public void removeProtoTypeFiles(String classFileName){  Iterator<Compiler> iter=tempVector.iterator();  while (iter.hasNext()) {    Compiler c=iter.next();    if (classFileName == null) {      c.removeGeneratedClassFiles();    } else     if (classFileName.equals(c.getCompilationContext().getClassFileName())) {      c.removeGeneratedClassFiles();      tempVector.remove(c);      return;    }  }}  }
class C{  public boolean GT(Word w2){  return false;}  }
class C{  @Override public void deployApp(String marathonJson){  String marathonEndpoint=getServiceUrl().toString();  HttpRequestWithBody httpRequest=Unirest.post(marathonEndpoint + END_POINT_EXT);  deployOrUpdateApp(marathonJson,httpRequest,HttpStatus.SC_CREATED);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  CaptureDevice capDev=getCapDev(stack);  if (capDev != null)   return capDev.getAuxCaptureDevice(); else   return "";}  }
class C{  public boolean isOrientationAligned(){  if (deviceOrientation == Configuration.ORIENTATION_LANDSCAPE) {    return isLandscape();  } else   if (deviceOrientation == Configuration.ORIENTATION_PORTRAIT) {    return isPortrait();  }  return true;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private static void addVars(List<JCStatement> stats,Scope switchScope){  for (; stats.nonEmpty(); stats=stats.tail) {    JCTree stat=stats.head;    if (stat.hasTag(VARDEF))     switchScope.enter(((JCVariableDecl)stat).sym);  }}  }
class C{  public boolean isCallableConstructor(){  return false;}  }
class C{  protected MetaData modifyExampleSetMetaData(ExampleSetMetaData unmodifiedMetaData){  return unmodifiedMetaData;}  }
class C{  public static boolean hasEmbeddedIPv4ClientAddress(Inet6Address ip){  return isCompatIPv4Address(ip) || is6to4Address(ip) || isTeredoAddress(ip);}  }
class C{  public DistributedLogClientBuilder checksum(boolean enabled){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setChecksumEnabled(enabled);  return newBuilder;}  }
class C{  private CSizeSettingsNormalizer(){}  }
class C{  public Dijkstra(AdjacencyMatrix<?> y){  super(y);}  }
class C{  public Spanned[] history(){  int i=0;  Spanned[] array=new Spanned[history.size()];  for (  String s : history) {    if (s != null) {      array[i]=Html.fromHtml(s);      i++;    }  }  return array;}  }
class C{  public URI recentChanges(Date startTime,int batchSize){  URIBuilder builder=apiBuilder();  builder.addParameter("action","query");  builder.addParameter("list","recentchanges");  builder.addParameter("rcdir","newer");  builder.addParameter("rcprop","title|ids|timestamp");  builder.addParameter("rcnamespace",getEntityNamespacesString("|"));  builder.addParameter("rclimit",Integer.toString(batchSize));  builder.addParameter("continue","");  builder.addParameter("rcstart",outputDateFormat().format(startTime));  return build(builder);}  }
class C{  private void initMeetings(){  this.meetings=new HashMap<DTNHost,Double>();  this.encounters=new HashMap<DTNHost,Integer>();  this.meanIET=0;  this.nrofSamplesIET=0;  this.meanENC=0;  this.nrofSamplesENC=0;  this.nrofTotENC=0;}  }
class C{  public void testXmsMemoryArgumentOverride() throws Exception {  AbstractInstalledLocalContainerStub container=new AbstractInstalledLocalContainerStub(configuration);  container.getConfiguration().setProperty(GeneralPropertySet.JVMARGS,"-Xms256m");  container.startInternal();  JvmLauncher java=container.getJava();  String commandLine=java.getCommandLine();  checkString(commandLine,"-Xms256m");  checkString(commandLine,"-Xmx512m");}  }
class C{  public DownloadTask(String url,Path toFile,MediaEntity addToMe,MediaFileType expectedFiletype){  super(BUNDLE.getString("task.download") + " " + toFile,100,TaskType.BACKGROUND_TASK);  this.url=url;  this.file=toFile;  this.media=addToMe;  this.fileType=expectedFiletype;  setTaskDescription(file.getFileName().toString());}  }
class C{  @Override public ArrayList<Cloudlet> generateWorkload(){  if (jobs == null) {    jobs=new ArrayList<Cloudlet>();    fieldArray=new String[MAX_FIELD];    try {      if (file.getName().endsWith(".gz")) {        readGZIPFile(file);      } else       if (file.getName().endsWith(".zip")) {        readZipFile(file);      } else {        readFile(file);      }    } catch (    final FileNotFoundException e) {    }catch (    final IOException e) {    }  }  return jobs;}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  @DELETE @Path("/{resourceServerName}") @RequiresRole(role=Role.ADMINISTRATOR) public void delete(@PathParam("resourceServerName") String resourceServerName){  try {    getIDMClient().deleteResourceServer(this.tenant,resourceServerName);  } catch (  NoSuchTenantException|NoSuchResourceServerException e) {    logger.debug("Failed to delete resource server '{}' on tenant '{}' due to missing tenant or resource server",resourceServerName,this.tenant,e);    throw new NotFoundException(this.sm.getString("ec.404"),e);  }catch (  DTOMapperException|InvalidArgumentException|InvalidPrincipalException e) {    logger.debug("Failed to delete resource server '{}' from tenant '{}' due to a client side error",resourceServerName,this.tenant,e);    throw new BadRequestException(this.sm.getString("res.resourceserver.delete.failed",resourceServerName,this.tenant),e);  }catch (  Exception e) {    logger.error("Failed to delete resource server '{}' from tenant '{}' due to a server side error",resourceServerName,this.tenant,e);    throw new InternalServerErrorException(this.sm.getString("ec.500"),e);  }}  }
class C{  protected void buildShape(BridgeContext ctx,Element e,ShapeNode shapeNode){  try {    SVGOMRectElement re=(SVGOMRectElement)e;    AbstractSVGAnimatedLength _x=(AbstractSVGAnimatedLength)re.getX();    float x=_x.getCheckedValue();    AbstractSVGAnimatedLength _y=(AbstractSVGAnimatedLength)re.getY();    float y=_y.getCheckedValue();    AbstractSVGAnimatedLength _width=(AbstractSVGAnimatedLength)re.getWidth();    float w=_width.getCheckedValue();    AbstractSVGAnimatedLength _height=(AbstractSVGAnimatedLength)re.getHeight();    float h=_height.getCheckedValue();    AbstractSVGAnimatedLength _rx=(AbstractSVGAnimatedLength)re.getRx();    float rx=_rx.getCheckedValue();    if (rx > w / 2) {      rx=w / 2;    }    AbstractSVGAnimatedLength _ry=(AbstractSVGAnimatedLength)re.getRy();    float ry=_ry.getCheckedValue();    if (ry > h / 2) {      ry=h / 2;    }    Shape shape;    if (rx == 0 || ry == 0) {      shape=new Rectangle2D.Float(x,y,w,h);    } else {      shape=new RoundRectangle2D.Float(x,y,w,h,rx * 2,ry * 2);    }    shapeNode.setShape(shape);  } catch (  LiveAttributeException ex) {    throw new BridgeException(ctx,ex);  }}  }
class C{  public static String toBitsSep(final int x){  final StringBuilder sb=new StringBuilder();  int t=x;  for (int i=0; i < Integer.SIZE; i++) {    if ((i & 7) == 0 && i > 0) {      sb.append(":");    }    sb.append(t < 0 ? "1" : "0");    t=t << 1;  }  assert t == 0;  return sb.toString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static <T extends Comparable<T>>void sort(T[] table){  if (table.length > 1) {    int halfSize=table.length / 2;    T[] leftTable=(T[])new Comparable[halfSize];    T[] rightTable=(T[])new Comparable[table.length - halfSize];    System.arraycopy(table,0,leftTable,0,halfSize);    System.arraycopy(table,halfSize,rightTable,0,table.length - halfSize);    sort(leftTable);    sort(rightTable);    merge(table,leftTable,rightTable);  }}  }
class C{  protected AbstractTacticalSymbol(){  this.setGlyphAtlas(DEFAULT_GLYPH_ATLAS);}  }
class C{  public boolean isPanEnabled(){  return mPanEnabled;}  }
class C{  public void schedule(TimerTask task,Date firstTime,long period){  if (period <= 0)   throw new IllegalArgumentException("Non-positive period.");  sched(task,firstTime.getTime(),-period);}  }
class C{  public byte[] toBinary(int q){  return ArrayEncoder.encodeModQ(coeffs,q);}  }
class C{  public void test_getInstanceLjava_lang_String02(){  try {    TrustManagerFactory.getInstance(null);    fail();  } catch (  NoSuchAlgorithmException expected) {  }catch (  NullPointerException expected) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      TrustManagerFactory.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException was not thrown as expected for algorithm: ".concat(invalidValues[i]));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  private synchronized void putPreferredInputMethod(InputMethodLocator locator){  InputMethodDescriptor descriptor=locator.getDescriptor();  Locale preferredLocale=locator.getLocale();  if (preferredLocale == null) {    try {      Locale[] availableLocales=descriptor.getAvailableLocales();      if (availableLocales.length == 1) {        preferredLocale=availableLocales[0];      } else {        return;      }    } catch (    AWTException ae) {      return;    }  }  if (preferredLocale.equals(Locale.JAPAN)) {    preferredLocale=Locale.JAPANESE;  }  if (preferredLocale.equals(Locale.KOREA)) {    preferredLocale=Locale.KOREAN;  }  if (preferredLocale.equals(new Locale("th","TH"))) {    preferredLocale=new Locale("th");  }  String path=preferredIMNode + "/" + createLocalePath(preferredLocale);  writePreferredInputMethod(path,descriptor.getClass().getName());  preferredLocatorCache.put(preferredLocale.toString().intern(),locator.deriveLocator(preferredLocale));  return;}  }
class C{  protected ZipEntry createZipEntry(String name){  return new ZipEntry(name);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.935 -0500",hash_original_method="1B461CFEDE108391BF18561515EECEBE",hash_generated_method="3B8450A4C591D8C488E7034E2A5D10D7") void _processSuboption(int suboption[],int suboptionLength) throws IOException {  if (debug) {    System.err.println("PROCESS SUBOPTION.");  }  if (suboptionLength > 0) {    if (optionHandlers[suboption[0]] != null) {      int responseSuboption[]=optionHandlers[suboption[0]].answerSubnegotiation(suboption,suboptionLength);      _sendSubnegotiation(responseSuboption);    } else {      if (suboptionLength > 1) {        if (debug) {          for (int ii=0; ii < suboptionLength; ii++) {            System.err.println("SUB[" + ii + "]: "+ suboption[ii]);          }        }        if ((suboption[0] == TERMINAL_TYPE) && (suboption[1] == TERMINAL_TYPE_SEND)) {          _sendTerminalType();        }      }    }  }}  }
class C{  public String list(){  overheadList=overheadService.findAllBy(" from Overhead o order by name asc");  return INDEX;}  }
class C{  public int readInt(){  byte[] buff=data;  int x=(buff[pos] << 24) + ((buff[pos + 1] & 0xff) << 16) + ((buff[pos + 2] & 0xff) << 8)+ (buff[pos + 3] & 0xff);  pos+=4;  return x;}  }
class C{  public Turnout createNewTurnout(String systemName,String userName){  Turnout trn=null;  int nAddress=-1;  nAddress=AcelaAddress.getNodeAddressFromSystemName(systemName,_memo);  if (nAddress == -1) {    return (null);  }  int bitNum=AcelaAddress.getBitFromSystemName(systemName);  if (bitNum == -1) {    return (null);  }  if (AcelaAddress.validSystemNameFormat(systemName,'T',getSystemPrefix())) {    trn=new AcelaTurnout(systemName,userName,_memo);    if (!AcelaAddress.validSystemNameConfig(systemName,'T',_memo)) {      log.warn("Turnout system Name does not refer to configured hardware: " + systemName);    }  } else {    log.error("Invalid Turnout system Name format: " + systemName);  }  return trn;}  }
class C{  public boolean isEnableBluetooth(){  return mBluetoothAdapter.isEnabled();}  }
class C{  private float sizeOfBlackWhiteBlackRun(int fromX,int fromY,int toX,int toY){  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx / 2;  int xstep=fromX < toX ? 1 : -1;  int ystep=fromY < toY ? 1 : -1;  int state=0;  int xLimit=toX + xstep;  for (int x=fromX, y=fromY; x != xLimit; x+=xstep) {    int realX=steep ? y : x;    int realY=steep ? x : y;    if ((state == 1) == image.get(realX,realY)) {      if (state == 2) {        return MathUtils.distance(x,y,fromX,fromY);      }      state++;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  if (state == 2) {    return MathUtils.distance(toX + xstep,toY,fromX,fromY);  }  return Float.NaN;}  }
class C{  public void endGiiQueueing(){  this.giiLock.writeLock().lock();  final boolean isDebugEnabled=logger.isDebugEnabled();  try {    this.giiCount--;    if (isDebugEnabled) {      logger.debug("{}: endGiiQueueing count is now {}",this.region.getName(),this.giiCount);    }    if (this.giiCount < 0) {      if (isDebugEnabled) {        logger.debug("{} found giiCount to be {}",this.region.getName(),this.giiCount);      }      this.giiCount=0;    }    if (this.giiCount == 0) {      if (isDebugEnabled) {        logger.debug("all GII requests completed - draining {} messages",this.giiQueue.size());      }      boolean interrupted=false;      int expectedCount=this.giiQueue.size();      int actualCount=0;      while (true) {        Object value;        try {          value=this.giiQueue.remove();        } catch (        NoSuchElementException e) {          break;        }        actualCount++;        try {          if (isDebugEnabled) {            logger.debug("draining #{}: {}",(actualCount + 1),value);          }          if (value instanceof HAEventWrapper) {            if (((HAEventWrapper)value).getClientUpdateMessage() == null) {              value=haContainer.get(value);              if (value == null) {                if (isDebugEnabled) {                  logger.debug("ATTENTION: found gii queued event with null event message.  Please see bug #44852: {}",value);                }                continue;              }            }          }          basicPut(value);          if (value instanceof HAEventWrapper) {            decAndRemoveFromHAContainer((HAEventWrapper)value);          }        } catch (        NoSuchElementException e) {          break;        }catch (        InterruptedException e) {          interrupted=true;        }      }      if (interrupted) {        this.region.getCache().getCancelCriterion().checkCancelInProgress(new InterruptedException());        Thread.currentThread().interrupt();      }    }  } catch (  RuntimeException t) {    logger.fatal("endGiiQueueing terminating due to uncaught runtime exception",t);    throw t;  }catch (  Error t) {    logger.fatal("endGiiQueueing terminating due to uncaught error",t);    throw t;  } finally {    if (logger.isTraceEnabled()) {      logger.trace("endGiiQueueing completed");    }    this.giiLock.writeLock().unlock();  }}  }
class C{  private StreetRouter findParkRidePath(ProfileRequest request,StreetRouter streetRouter){  streetRouter.streetMode=StreetMode.CAR;  streetRouter.timeLimitSeconds=request.maxCarTime * 60;  streetRouter.flagSearch=VertexStore.VertexFlag.PARK_AND_RIDE;  streetRouter.dominanceVariable=StreetRouter.State.RoutingVariable.DURATION_SECONDS;  if (streetRouter.setOrigin(request.fromLat,request.fromLon)) {    streetRouter.route();    TIntObjectMap<StreetRouter.State> carParks=streetRouter.getReachedVertices(VertexStore.VertexFlag.PARK_AND_RIDE);    LOG.info("CAR PARK: Found {} car parks",carParks.size());    StreetRouter walking=new StreetRouter(transportNetwork.streetLayer);    walking.streetMode=StreetMode.WALK;    walking.profileRequest=request;    walking.timeLimitSeconds=request.maxCarTime * 60;    walking.transitStopSearch=true;    walking.setOrigin(carParks,CAR_PARK_DROPOFF_TIME_S,CAR_PARK_DROPOFF_COST,LegMode.CAR_PARK);    walking.dominanceVariable=StreetRouter.State.RoutingVariable.DURATION_SECONDS;    walking.route();    walking.previousRouter=streetRouter;    return walking;  } else {    return null;  }}  }
class C{  public static Point maxSize(final Control[] controls,final int wHint,final int hHint){  Check.notNull(controls,"controls");  if (controls.length == 0) {    throw new IllegalArgumentException("the controls array must have at least one control");  }  if (controls[0] == null) {    throw new IllegalArgumentException("controls[0] is null");  }  Point size=controls[0].computeSize(wHint,hHint);  for (int i=1; i < controls.length; i++) {    if (controls[i] == null) {      throw new IllegalArgumentException("controls[" + i + "] is null");    }    size=Geometry.max(size,controls[i].computeSize(wHint,hHint));  }  return size;}  }
class C{  public void testSpans2(){  final JPanel panel=new JPanel(new GridBagLayout());  final JButton button=new JButton();  button.setPreferredSize(new Dimension(50,10));  final JTextField field1=new JTextField();  field1.setPreferredSize(new Dimension(50,10));  final JTextField field2=new JTextField();  GridBagConverter converter=new GridBagConverter();  converter.addComponent(button,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(field1,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  converter.addComponent(field2,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  applyConversionResults(panel,converter);  final Dimension preferredSize=panel.getPreferredSize();  assertEquals(100,preferredSize.width);  panel.setSize(new Dimension(500,100));  panel.doLayout();  assertEquals(500,field2.getWidth());  assertEquals(250,button.getWidth());  assertEquals(250,field1.getWidth());}  }
class C{  public boolean declaresMethod(NumberedString subsignature){  checkLevel(SIGNATURES);  SootMethod ret=(SootMethod)subSigToMethods.get(subsignature);  return ret != null;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public JsonFactory putUnique(JSONObject obj) throws IOException {  JsonFactory json=indexDump.write(obj,'I');  for (  Map.Entry<String,Boolean> column : this.columns.entrySet()) {    String searchKey=column.getKey();    boolean case_insensitive=column.getValue();    Object value=obj.get(searchKey);    if (value != null && value instanceof String) {      JsonFactoryIndex index=this.index.get(searchKey);      String valueString=case_insensitive ? ((String)value).toLowerCase() : (String)value;      index.put(valueString,json);    }  }  return json;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:11.973 -0500",hash_original_method="F4AB8400AD0DFE9B5884DACBEFD7642E",hash_generated_method="63E41CADB6CCBE345B7915745BC2D9E4") public static float parseFloat(String s){  s=s.trim();  int length=s.length();  if (length == 0) {    throw invalidReal(s,false);  }  char last=s.charAt(length - 1);  if (last == 'y' || last == 'N') {    return parseName(s,false);  }  if (s.indexOf("0x") != -1 || s.indexOf("0X") != -1) {    return HexStringParser.parseFloat(s);  }  StringExponentPair info=initialParse(s,length,false);  if (info.infinity || info.zero) {    return info.specialValue();  }  float result=parseFltImpl(info.s,(int)info.e);  if (Float.floatToRawIntBits(result) == 0xffffffff) {    throw invalidReal(s,false);  }  return info.negative ? -result : result;}  }
class C{  String readCountryName(Element el) throws IOException {  NodeList list=el.getElementsByTagName("country");  if (list == null || list.getLength() == 0)   throw new IOException("Country name should be given");  return list.item(0).getNodeValue();}  }
class C{  public ObdCodeList(){  super("com.fr3ts0n.ecu.prot.obd.res.codes");}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-19 13:30:38.152 -0400",hash_original_method="D9F80F56BE7AEC83902DD1E82500AB90",hash_generated_method="D00C2CF8DC2D9DAFE18E478CD85DD206") public boolean showPopup(){  if (isShowingPopup() || !mIsAttachedToWindow) {    return false;  }  mIsSelectingDefaultActivity=false;  showPopupUnchecked(mInitialActivityCount);  return true;}  }
class C{  public IntentBuilder skipConfirm(){  result.putExtra(EXTRA_CONFIRM,false);  return (this);}  }
class C{  public void remove(final CreatureRespawnPoint point){  respawnPoints.remove(point);}  }
class C{  public void onPlayerError(){  if (LogUtils.isActive) {    Log.d(LOGTAG,"onPlayerError");  }}  }
class C{  private Set<String> buildItemList(List<Offer> offers){  Set<String> items=new TreeSet<String>();  for (  Offer offer : offers) {    items.add(offer.getItemName());  }  return items;}  }
class C{  @Override public void collectQueryParameters(Set<DatabaseField> record){  for (  DatabaseMapping mapping : getReferenceDescriptor().getMappings()) {    if ((mapping.isForeignReferenceMapping() && !mapping.isCacheable()) || (mapping.isAggregateObjectMapping() && mapping.getReferenceDescriptor().hasNoncacheableMappings())) {      ((ForeignReferenceMapping)mapping).collectQueryParameters(record);    }  }}  }
class C{  public static long lowestOneBit(long v){  return v & -v;}  }
class C{  private void performFCOperation(Map<String,List<String>> initiatorTargetMap){  logger.info("Start FC Ports create/modify operations," + " for storage system:{} ",storageSystem.getId());  Set<String> mergedWwnSet=new HashSet<String>();  Set<String> keys=initiatorTargetMap.keySet();  for (  String key : keys) {    List<String> wwnList=initiatorTargetMap.get(key);    for (    String wwn : wwnList) {      String formattedWwn=addColon(wwn);      mergedWwnSet.add(formattedWwn);    }  }  List<StoragePort> fcPorts=getFCPorts();  for (  StoragePort fcPort : fcPorts) {    String portNetworkId=fcPort.getPortNetworkId();    if (mergedWwnSet.contains(portNetworkId)) {      mergedWwnSet.remove(portNetworkId);    }  }  for (  String targetStoragePortWWN : mergedWwnSet) {    create(targetStoragePortWWN,StorageProtocol.Transport.FC.name());  }  logger.info("End FC Ports create/modify operations," + " for storage system : {}",storageSystem.getId());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:04.334 -0500",hash_original_method="1C5F08F4E69D3052E8B04C996B666B5E",hash_generated_method="C1C798952A0B97CFA2CC1D52833092D6") public static Sampler CLAMP_LINEAR_MIP_LINEAR(RenderScript rs){  if (rs.mSampler_CLAMP_LINEAR_MIP_LINEAR == null) {    Builder b=new Builder(rs);    b.setMinification(Value.LINEAR_MIP_LINEAR);    b.setMagnification(Value.LINEAR);    b.setWrapS(Value.CLAMP);    b.setWrapT(Value.CLAMP);    rs.mSampler_CLAMP_LINEAR_MIP_LINEAR=b.create();  }  return rs.mSampler_CLAMP_LINEAR_MIP_LINEAR;}  }
class C{  public Vector2i add(int x,int y){  this.x+=x;  this.y+=y;  return this;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildMagicSchoolCellarArea(zone);}  }
class C{  protected <M extends Member>M[][][] array(M[][][] arrayMember){  boolean resetIndexSaved=_resetIndex;  if (_resetIndex) {    _index=0;    _resetIndex=false;  }  for (int i=0; i < arrayMember.length; i++) {    array(arrayMember[i]);  }  _resetIndex=resetIndexSaved;  return (M[][][])arrayMember;}  }
class C{  public boolean bool(){  return true;}  }
class C{  public static int loadLogoFromManifest(Activity activity){  int logo=0;  try {    final String thisPackage=activity.getClass().getName();    if (ActionBarSherlock.DEBUG)     Log.i(TAG,"Parsing AndroidManifest.xml for " + thisPackage);    final String packageName=activity.getApplicationInfo().packageName;    final AssetManager am=activity.createPackageContext(packageName,0).getAssets();    final XmlResourceParser xml=am.openXmlResourceParser("AndroidManifest.xml");    int eventType=xml.getEventType();    while (eventType != XmlPullParser.END_DOCUMENT) {      if (eventType == XmlPullParser.START_TAG) {        String name=xml.getName();        if ("application".equals(name)) {          if (ActionBarSherlock.DEBUG)           Log.d(TAG,"Got <application>");          for (int i=xml.getAttributeCount() - 1; i >= 0; i--) {            if (ActionBarSherlock.DEBUG)             Log.d(TAG,xml.getAttributeName(i) + ": " + xml.getAttributeValue(i));            if ("logo".equals(xml.getAttributeName(i))) {              logo=xml.getAttributeResourceValue(i,0);              break;            }          }        } else         if ("activity".equals(name)) {          if (ActionBarSherlock.DEBUG)           Log.d(TAG,"Got <activity>");          Integer activityLogo=null;          String activityPackage=null;          boolean isOurActivity=false;          for (int i=xml.getAttributeCount() - 1; i >= 0; i--) {            if (ActionBarSherlock.DEBUG)             Log.d(TAG,xml.getAttributeName(i) + ": " + xml.getAttributeValue(i));            String attrName=xml.getAttributeName(i);            if ("logo".equals(attrName)) {              activityLogo=xml.getAttributeResourceValue(i,0);            } else             if ("name".equals(attrName)) {              activityPackage=ActionBarSherlockCompat.cleanActivityName(packageName,xml.getAttributeValue(i));              if (!thisPackage.equals(activityPackage)) {                break;              }              isOurActivity=true;            }            if ((activityLogo != null) && (activityPackage != null)) {              logo=activityLogo.intValue();            }          }          if (isOurActivity) {            break;          }        }      }      eventType=xml.nextToken();    }  } catch (  Exception e) {    e.printStackTrace();  }  if (ActionBarSherlock.DEBUG)   Log.i(TAG,"Returning " + Integer.toHexString(logo));  return logo;}  }
class C{  @Override public boolean addAll(Collection<? extends Line1D> c){  boolean changed=false;  for (  Line1D l : c) {    changed=add(l) || changed;  }  return changed;}  }
class C{  public QPSKPolarSlicer(){}  }
class C{  private void allocateElements(int numElements){  int initialCapacity=MIN_INITIAL_CAPACITY;  if (numElements >= initialCapacity) {    initialCapacity=numElements;    initialCapacity|=(initialCapacity >>> 1);    initialCapacity|=(initialCapacity >>> 2);    initialCapacity|=(initialCapacity >>> 4);    initialCapacity|=(initialCapacity >>> 8);    initialCapacity|=(initialCapacity >>> 16);    initialCapacity++;    if (initialCapacity < 0)     initialCapacity>>>=1;  }  elements=new Object[initialCapacity];}  }
class C{  public DefaultComment(Element parent,String text){  super(text);  this.parent=parent;}  }
class C{  public static void updateTypeSubstitution(final Connection connection,final TypeSubstitution substitution,final BaseType baseType,final List<Integer> memberPath,final int position,final int offset,final INaviModule module) throws CouldntSaveDataException {  try {    final PreparedStatement statement=connection.prepareStatement("UPDATE " + CTableNames.EXPRESSION_TYPES_TABLE + " SET base_type_id = ?, \"position\" = ?, \"offset\" = ?, path = ? "+ "WHERE module_id = ? AND expression_id = ? AND address = ?");    try {      statement.setInt(1,baseType.getId());      statement.setInt(2,position);      statement.setInt(3,offset);      statement.setArray(4,connection.createArrayOf("int4",memberPath.toArray()));      statement.setInt(5,module.getConfiguration().getId());      statement.setInt(6,substitution.getExpressionId());      statement.setLong(7,substitution.getAddress().toLong());      statement.executeUpdate();    }  finally {      statement.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  public String testJava(){  int index=p_panel != null ? p_panel.fJavaType.getSelectedIndex() : setJavaType((String)p_properties.get(JAVA_TYPE));  if (index < 0 || index >= JAVATYPE.length)   return "JavaType Index invalid: " + index; else   if (m_javaConfig[index] == null)   return "JavaType Config class missing: " + index;  return m_javaConfig[index].test();}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SEQUATIONS;}  }
class C{  public void testStartAndTrigger(){  scheduleService.setTime(0);  guard.startGuard();  assertEquals(0,quitable.getAndResetQuitCounter());  scheduleService.setTime(1000);  SupportSchedulingServiceImpl.evaluateSchedule(scheduleService);  assertEquals(1,quitable.getAndResetQuitCounter());}  }
class C{  public int hashCode(){  int hc=port;  if (protocol != null)   hc^=protocol.hashCode();  if (host != null)   hc^=host.hashCode();  if (path != null) {    int len=path.length();    if (len > 20)     hc^=path.substring(len - 20).hashCode(); else     hc^=path.hashCode();  }  if (ref != null) {    int len=ref.length();    if (len > 20)     hc^=ref.substring(len - 20).hashCode(); else     hc^=ref.hashCode();  }  return hc;}  }
class C{  public RotateFilter(){  this(ImageMath.PI);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public int engineSize(){  return entries.size();}  }
class C{  public static void main(String[] args){  try {    UdpEchoServer server=new UdpEchoServer(false);    server.serve();  } catch (  Exception e) {    System.err.println("Couldn't start server:\n" + e);  }}  }
class C{  private void testExport(TrackFileFormat trackFileFormat){  deleteExternalStorageFiles(trackFileFormat);  EndToEndTestUtils.deleteAllTracks();  EndToEndTestUtils.createTrackIfEmpty(1,true);  assertEquals(1,EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0).getCount());  exportTracks(trackFileFormat,1);  assertEquals(1,getExternalStorageFiles(trackFileFormat).length);}  }
class C{  protected void sequence_AsyncNoTrailingLineBreak_BogusTypeRefFragment_MethodParamsReturnAndBody_N4MethodDeclaration_StrictFormalParameters_TypeVariables(ISerializationContext context,N4MethodDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void deleteContacts(){  mCommands[ContactsCommandType.DELETE_COMMAND.ordinal()].execute(mModifyContacts.iterator());}  }
class C{  @Override void write(ByteCodeWriter out) throws IOException {  out.write(ConstantPool.CP_METHODHANDLE);  out.write(_type.getCode());  out.writeShort(_entry.getIndex());}  }
class C{  private void readObject(){}  }
class C{  protected void doRenderGraphic(DrawContext dc){  this.quad.render(dc);}  }
class C{  public TIntHash(int initialCapacity){  super(initialCapacity);  _hashingStrategy=this;}  }
class C{  public static ServiceManagementRecord findServiceManagementRecord(EntityManager em,Service service){  requireArgument(em != null,"Entity manager can not be null.");  requireArgument(service != null,"Service cannot be null.");  TypedQuery<ServiceManagementRecord> query=em.createNamedQuery("ServiceManagementRecord.findByService",ServiceManagementRecord.class);  try {    query.setParameter("service",service);    return query.getSingleResult();  } catch (  NoResultException ex) {    return null;  }}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  @Override public void mouseReleased(MouseEvent e){  setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  if (selecting_area && !shaping_selection) {    selection_end_x=(int)Math.floor((e.getX() / zoom_level - shift_x) / 4);    selection_end_z=(int)Math.floor((e.getY() / zoom_level - shift_y) / 4);    int t;    if (selection_end_x < selection_start_x) {      t=selection_end_x;      selection_end_x=selection_start_x;      selection_start_x=t;    }    if (selection_end_z < selection_start_z) {      t=selection_end_z;      selection_end_z=selection_start_z;      selection_start_z=t;    }  }  if (selectchunks) {    if (selection_start_x % 16 != 0) {      selection_start_x=Math.round(selection_start_x / 16) * 16;    }    if (selection_start_z % 16 != 0) {      selection_start_z=Math.round(selection_start_z / 16) * 16;    }    if (selection_end_x % 16 != 0) {      selection_end_x=Math.round(selection_end_x / 16) * 16;    }    if (selection_end_z % 16 != 0) {      selection_end_z=Math.round(selection_end_z / 16) * 16;    }  }  MainPanel.modelPos1X.setValue(selection_start_x);  MainPanel.modelPos1Z.setValue(selection_start_z);  MainPanel.modelPos2X.setValue(selection_end_x);  MainPanel.modelPos2Z.setValue(selection_end_z);  selecting_area=false;  moving_map=false;  shaping_selection=false;  if (!fastrendermode)   redraw(false); else   redraw(true);  repaint();}  }
class C{  public boolean isActive(){synchronized (statemachine) {    return statemachine.isActive();  }}  }
class C{  public void updateUI(){  setUI((MenuItemUI)UIManager.getUI(this));  if (popupMenu != null) {    popupMenu.setUI((PopupMenuUI)UIManager.getUI(popupMenu));  }}  }
class C{  protected void fixModelAndSaveInRepository(Artifact artifact,Model pomFile) throws Exception {  for (  Object dependency : pomFile.getDependencies()) {    Dependency art=(Dependency)dependency;    if (art.getType().equals("war")) {      art.setGroupId(art.getGroupId() + ".cargodeps");      art.setType("pom");    }  }  pomFile.setPackaging("pom");  String version=pomFile.getVersion();  if (version == null) {    version=pomFile.getParent().getVersion();  }  File outFile=File.createTempFile("pom",".xml");  MavenXpp3Writer pomWriter=new MavenXpp3Writer();  pomWriter.write(new FileWriter(outFile),pomFile);  Artifact art2=artifactFactory.createArtifactWithClassifier(artifact.getGroupId() + ".cargodeps",artifact.getArtifactId(),artifact.getVersion(),"pom",null);  installer.install(outFile,art2,localRepository);  outFile.delete();}  }
class C{  public StringBuffer(){  internal=new StringBuilder();}  }
class C{  public WordToken_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_partOfSpeech=jcas.getRequiredFeatureDE(casType,"partOfSpeech","uima.cas.String",featOkTst);  casFeatCode_partOfSpeech=(null == casFeat_partOfSpeech) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_partOfSpeech).getCode();  casFeat_sentenceOrder=jcas.getRequiredFeatureDE(casType,"sentenceOrder","uima.cas.Integer",featOkTst);  casFeatCode_sentenceOrder=(null == casFeat_sentenceOrder) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_sentenceOrder).getCode();  casFeat_lemmas=jcas.getRequiredFeatureDE(casType,"lemmas","uima.cas.FSArray",featOkTst);  casFeatCode_lemmas=(null == casFeat_lemmas) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_lemmas).getCode();}  }
class C{  void onReadingThreadFinished(WebSocketFrame closeFrame){synchronized (mThreadsLock) {    mReadingThreadFinished=true;    mServerCloseFrame=closeFrame;    if (mWritingThreadFinished == false) {      return;    }  }  onThreadsFinished();}  }
class C{  public static StringList listToStringListRemoveEmpty(String list,char delimiter){  int len=list.length();  StringList rtn=new StringList();  if (len == 0)   return rtn.reset();  int last=0;  for (int i=0; i < len; i++) {    if (list.charAt(i) == delimiter) {      if (last < i)       rtn.add(list.substring(last,i));      last=i + 1;    }  }  if (last < len)   rtn.add(list.substring(last));  return rtn.reset();}  }
class C{  public ProducerBehaviour(final String questSlot,final String productionActivity,final String productName,final Map<String,Integer> requiredResourcesPerItem,final int productionTimePerItem){  this(questSlot,productionActivity,productName,requiredResourcesPerItem,productionTimePerItem,false);}  }
class C{  public void warning(String msg,Object... params){  log(Level.WARNING,msg,params);}  }
class C{  protected void readLSD(){  width=readShort();  height=readShort();  int packed=read();  gctFlag=(packed & 0x80) != 0;  gctSize=2 << (packed & 7);  bgIndex=read();  pixelAspect=read();}  }
class C{  public RoundedTransformationBuilder cornerRadiusTopRight(float radiusPx){  mCornerRadius[1]=radiusPx;  return this;}  }
class C{  public Vector3f zero(){  x=0.0f;  y=0.0f;  z=0.0f;  return this;}  }
class C{  public static byte[] createByteArray(int size,String data){  byte[] byteArray=new byte[size];  for (int i=0; i < size; i++) {    byteArray[i]=Byte.parseByte(data,2);  }  return byteArray;}  }
class C{  public TripStatisticsUpdater(long startTime){  tripStatistics=init(startTime);  currentSegment=init(startTime);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static <T>T unsupportedOperation(){  throw new UnsupportedOperationException("Not supported by BaseContext.");}  }
class C{  public boolean soportaBusquedaExtendida(){  return true;}  }
class C{  public PropertiesFileCallbackHandler(String pwFile,String namesFile,String proxyFile) throws IOException {  String dir=System.getProperty("test.src");  if (dir == null) {    dir=".";  }  dir=dir + "/";  if (pwFile != null) {    pwDb=new Properties();    pwDb.load(new FileInputStream(dir + pwFile));  }  if (namesFile != null) {    namesDb=new Properties();    namesDb.load(new FileInputStream(dir + namesFile));  }  if (proxyFile != null) {    proxyDb=new Properties();    proxyDb.load(new FileInputStream(dir + proxyFile));  }}  }
class C{  @SuppressWarnings("unchecked") private static int countRunAndMakeAscending(Object[] a,int lo,int hi){  if (DEBUG)   assert lo < hi;  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (((Comparable)a[runHi++]).compareTo(a[lo]) < 0) {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  public String popAndCalve(){  if (order.isEmpty())   throw new NoSuchElementException("Cannot back out past first " + "entry");  String result=(String)order.peek();  Map curr=(Map)id2map.get(result);  order.pop();  Set keysForCurr=curr.keySet();  for (Iterator i=orderIterator(); i.hasNext(); ) {    Map other=(Map)id2map.get(i.next());    for (Iterator j=curr.keySet().iterator(); j.hasNext(); ) {      Object key=j.next();      if (other.containsKey(key))       other.put(key,curr.get(key));    }  }  return result;}  }
class C{  private static Pair<String,String> parseStrategy(String desc){  String[] arg=desc.split("\\(|\\)");  Pair<String,String> rval=new Pair<String,String>(arg[0],"");  if (arg.length > 1) {    rval.setSecond(arg[1]);  }  return rval;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatasetdatanomodificationallowederrEE.class,args);}  }
class C{  @Override public void process(Number tuple){  values.add(tuple.doubleValue());}  }
class C{  private void doToggleFullscreen(){  mPlayer.toggleFullScreen();}  }
class C{  public boolean isCellEditable(int row,int col){  return col == LibraryFilesTableDataLine.ACTIONS_IDX || col == LibraryFilesTableDataLine.PAYMENT_OPTIONS_IDX;}  }
class C{  @SuppressWarnings("unchecked") public static List<Long> toList(long[] array){  return DefaultTypeTransformation.primitiveArrayToList(array);}  }
class C{  @LargeTest public void testPropertiesH264VGA() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_640x480_15fps_1200Kbps_AACLC_48KHz_64kps_m_0_27.3gp";  final int aspectRatio=MediaProperties.ASPECT_RATIO_4_3;  final int fileType=MediaProperties.FILE_3GP;  final int videoCodecType=MediaProperties.VCODEC_H264;  final int duration=77600;  final int videoBitrate=745000;  final int audioBitrate=64000;  final int fps=15;  final int audioCodecType=MediaProperties.ACODEC_AAC_LC;  final int audioSamplingFrequency=48000;  final int audioChannel=2;  final int videoProfile=MediaProperties.H264Profile.H264ProfileBaseline;  final int videoLevel=MediaProperties.H264Level.H264Level13;  final int width=640;  final int height=MediaProperties.HEIGHT_480;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mvi=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  validateVideoProperties(aspectRatio,fileType,videoCodecType,duration,videoBitrate,fps,videoProfile,videoLevel,width,height,audioCodecType,audioSamplingFrequency,audioChannel,audioBitrate,mvi);}  }
class C{  private static boolean isSingleBlockLookup(MatrixCharacteristics mcIn,IndexRange ixrange){  return UtilFunctions.computeBlockIndex(ixrange.rowStart,mcIn.getRowsPerBlock()) == UtilFunctions.computeBlockIndex(ixrange.rowEnd,mcIn.getRowsPerBlock()) && UtilFunctions.computeBlockIndex(ixrange.colStart,mcIn.getColsPerBlock()) == UtilFunctions.computeBlockIndex(ixrange.colEnd,mcIn.getColsPerBlock());}  }
class C{  public void addTracks(SoundCloudTrack track){  mTracks.add(track);}  }
class C{  public void close(){  try {    boolean added=queue.offer(new LogItem(null,null),MAX_WAIT,TimeUnit.MILLISECONDS);    if (added) {      writerThread.join(MAX_WAIT);    } else {      LOGGER.warning("Log: Could not close Log (Queue full)");    }  } catch (  InterruptedException ex) {    LOGGER.warning("Log: Interrupted when waiting for Log to finish..");    Thread.currentThread().interrupt();  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private void unregisterWithKeyboardManager(){  Hashtable<KeyStroke,KeyStroke> registered=(Hashtable<KeyStroke,KeyStroke>)getClientProperty(WHEN_IN_FOCUSED_WINDOW_BINDINGS);  if (registered != null && registered.size() > 0) {    Enumeration<KeyStroke> keys=registered.keys();    while (keys.hasMoreElements()) {      KeyStroke ks=keys.nextElement();      unregisterWithKeyboardManager(ks);    }  }  putClientProperty(WHEN_IN_FOCUSED_WINDOW_BINDINGS,null);}  }
class C{  public boolean isColNorm(){  return colNorm;}  }
class C{  public void append(String value,int off,int len){  text.append(value,off,len);}  }
class C{  public MBeanInfo(String className,String description,MBeanAttributeInfo[] attributes,MBeanConstructorInfo[] constructors,MBeanOperationInfo[] operations,MBeanNotificationInfo[] notifications) throws IllegalArgumentException {  this(className,description,attributes,constructors,operations,notifications,null);}  }
class C{  public static boolean isSorted(final float[] array){  if (array == null || array.length < 2) {    return true;  }  float previous=array[0];  final int n=array.length;  for (int i=1; i < n; i++) {    final float current=array[i];    if (Float.compare(previous,current) > 0) {      return false;    }    previous=current;  }  return true;}  }
class C{  private void cleanupService(){  if (mService != null) {    try {      mContext.unbindService(this);    } catch (    IllegalArgumentException e) {      Log.e(TAG,"Unable to unbind from licensing service (already unbound)");    }    mService=null;  }}  }
class C{  public void visitMultiANewArrayInsn(String desc,int dims){  if (mv != null) {    mv.visitMultiANewArrayInsn(desc,dims);  }}  }
class C{  public FastCharArrayWriter(int initialSize){  if (initialSize < 0) {    throw new IllegalArgumentException("Negative initial size: " + initialSize);  }  buf=new char[initialSize];}  }
class C{  private String convertUserInputIntoAFullyQualifiedPath(final String userInput){  if (FileUtils.denotesAbsolutePath(userInput)) {    return userInput;  }  if (userInput.startsWith(HOME_DIRECTORY_SYMBOL)) {    Assert.notNull(home,"Home directory could not be determined from system properties");    if (userInput.length() > 1) {      return home + userInput.substring(1);    }  }  String fullPath=getWorkingDirectoryAsString() + userInput;  return fullPath;}  }
class C{  public static String formatCurrency(BigDecimal value,Currency currency){  NumberFormat f=getCurrencyFormatter();  f.setCurrency(currency);  return postFormatCurrency(f.format(value));}  }
class C{  private boolean iAmInChargeOfPeriodicDeletes(){  ZkController zk=core.getCoreDescriptor().getCoreContainer().getZkController();  if (null == zk)   return true;  CloudDescriptor desc=core.getCoreDescriptor().getCloudDescriptor();  String col=desc.getCollectionName();  List<Slice> slices=new ArrayList<Slice>(zk.getClusterState().getActiveSlices(col));  Collections.sort(slices,COMPARE_SLICES_BY_NAME);  if (slices.isEmpty()) {    log.error("Collection {} has no active Slices?",col);    return false;  }  Replica firstSliceLeader=slices.get(0).getLeader();  if (null == firstSliceLeader) {    log.warn("Slice in charge of periodic deletes for {} does not currently have a leader",col);    return false;  }  String leaderInCharge=firstSliceLeader.getName();  String myCoreNodeName=desc.getCoreNodeName();  boolean inChargeOfDeletesRightNow=leaderInCharge.equals(myCoreNodeName);  if (previouslyInChargeOfDeletes && !inChargeOfDeletesRightNow) {    log.info("Not currently in charge of periodic deletes for this collection, " + "will not trigger delete or log again until this changes");  }  previouslyInChargeOfDeletes=inChargeOfDeletesRightNow;  return inChargeOfDeletesRightNow;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"stosb");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a stosb instruction (invalid number of operand)");  }  new StosGenerator().generate(environment,ReilHelpers.toReilAddress(instruction.getAddress()).toLong(),OperandSize.BYTE,instructions);}  }
class C{  private static void adjustMappingPairVector(int col,int incr,Vector<MappingPair> vec){  int i;  for (i=0; (i < vec.size()) && (vec.elementAt(i).col < col); i++) {  }  if (i == vec.size()) {    vec.add(new MappingPair(col,incr));  } else   if (vec.elementAt(i).col == col) {    vec.elementAt(i).inc=vec.elementAt(i).inc + incr;  } else {    vec.insertElementAt(new MappingPair(col,incr),i);  }}  }
class C{  public boolean add(WorkSource other){synchronized (sTmpWorkSource) {    return updateLocked(other,false,false);  }}  }
class C{  public static BaggageMessage parse(ByteString bytes){  if (bytes != null) {    try {      return BaggageMessage.parseFrom(bytes);    } catch (    InvalidProtocolBufferException e) {    }  }  return null;}  }
class C{  public synchronized long instanceCount(){  return instanceCache.size();}  }
class C{  public Utf8Writer(File file) throws FileNotFoundException {  this(file,false);}  }
class C{  public CViewPopupMenu(final Window parent,final JTable table,final IViewContainer container,final INaviView[] views,final int x,final int y){  Preconditions.checkNotNull(container,"IE02029: Container can't be null");  Preconditions.checkNotNull(views,"IE02030: View argument can't be null");  final List<CGraphWindow> windows=CWindowManager.instance().getOpenWindows();  if (!windows.isEmpty()) {    add(CActionProxy.proxy(new COpenInLastWindowAction(parent,container,views)));  }  add(CActionProxy.proxy(new OpenInNewWindowAction(parent,container,views)));  if (!windows.isEmpty()) {    final JMenu openInItem=new JMenu("Open in window ...");    for (    final CGraphWindow graphContainer : windows) {      openInItem.add(CActionProxy.proxy(new OpenInWindowAction(parent,container,views,graphContainer)));    }    add(openInItem);  }  addSeparator();  if (CStaredItemFunctions.allStared(views)) {    add(CActionProxy.proxy(new CUnstarViewAction(parent,views)));  } else   if (CStaredItemFunctions.allNotStared(views)) {    add(CActionProxy.proxy(new CStarViewsAction(parent,views)));  } else {    add(CActionProxy.proxy(new CToggleStarViewsAction(parent,views)));  }  if (canDelete(views)) {    addSeparator();    add(CActionProxy.proxy(new DeleteViewAction(parent,container,views)));  }  final boolean singleSelection=views.length == 1;  if (singleSelection) {    final INaviView view=views[0];    final INaviFunction function=container.getFunction(view);    if ((function != null) && CFunctionHelpers.isForwardableFunction(function)) {      addSeparator();      if (function.getForwardedFunctionAddress() == null) {        add(CActionProxy.proxy(new CConnectFunctionAction(parent,container.getDatabase(),function)));      } else {        add(CActionProxy.proxy(new CRemoveConnectedFunctionAction(parent,function)));      }    }    if ((function != null) && !function.getName().equals(function.getOriginalName())) {      addSeparator();      add(CActionProxy.proxy(new CRenameBackAction(parent,view,function.getOriginalName())));    }  }  addSeparator();  final List<INaviFunction> functions=new ArrayList<INaviFunction>();  boolean anyNull=false;  for (  final INaviView view : views) {    final INaviFunction func=container.getFunction(view);    anyNull=func == null;    if (anyNull) {      break;    }    functions.add(func);  }  if (!anyNull) {    final List<IDebugger> debuggers=new ArrayList<IDebugger>();    anyNull=false;    for (    final INaviFunction func : functions) {      final IDebugger dbg=container.getDebuggerProvider().getDebugger(func.getModule());      anyNull=dbg == null;      if (anyNull) {        break;      }      debuggers.add(dbg);    }    if (!anyNull) {      final IFilledList<Pair<IDebugger,INaviFunction>> pairs=new FilledList<Pair<IDebugger,INaviFunction>>();      for (int i=0; i < debuggers.size(); i++) {        pairs.add(new Pair<IDebugger,INaviFunction>(debuggers.get(i),functions.get(i)));      }      if (singleSelection) {        if (pairs.get(0).second().getType() != FunctionType.IMPORT) {          if (CGraphDebugger.hasBreakpoint(pairs.get(0).first().getBreakpointManager(),pairs.get(0).second().getModule(),new UnrelocatedAddress(pairs.get(0).second().getAddress()))) {            add(CActionProxy.proxy(new CRemoveFunctionBreakpointsAction(pairs)));          } else {            add(CActionProxy.proxy(new CSetFunctionBreakpointsAction(pairs)));          }          addSeparator();        }      } else {        add(CActionProxy.proxy(new CSetFunctionBreakpointsAction(pairs)));        add(CActionProxy.proxy(new CRemoveFunctionBreakpointsAction(pairs)));        addSeparator();      }    }  }  add(CActionProxy.proxy(new CopySelectionAction(table)));  add(CActionProxy.proxy(new CopyCellAction(table,x,y)));  add(new JSeparator());  add(new JMenuItem(CActionProxy.proxy(new CSearchTableAction(parent,table))));}  }
class C{  public WeakValueMap(int initialCapacity){  hash=new HashMap<K,WeakEntry>(initialCapacity);}  }
class C{  public Transform(double scaleX,double scaleY,double translateX,double translateY){  super(scaleX,scaleY,0.0,0.0,translateX,translateY);}  }
class C{  public UserIdNotFoundException(String message,ReasonEnum reason,Throwable cause){  super(message,cause);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public void testSpanOrDoubleVersusTerm() throws Exception {  Term t1=randomTerm();  SpanQuery term=spanQuery(new SpanTermQuery(t1));  assertSameSet(spanQuery(new SpanOrQuery(term,term)),term);}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public String save() throws Exception {  Boolean encrypt=(Boolean)getConfiguration().get(Constants.ENCRYPT_PASSWORD);  if (encrypt != null && encrypt) {    String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);    if (algorithm == null) {      if (log.isDebugEnabled()) {        log.debug("assuming testcase, setting algorithm to 'SHA'");      }      algorithm="SHA";    }    user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));  }  user.setEnabled(true);  user.addRole(roleManager.getRole(Constants.USER_ROLE));  try {    user=userManager.saveUser(user);  } catch (  AccessDeniedException ade) {    log.warn(ade.getMessage());    getResponse().sendError(HttpServletResponse.SC_FORBIDDEN);    return null;  }catch (  UserExistsException e) {    log.warn(e.getMessage());    List<String> args=new ArrayList<String>();    args.add(user.getUsername());    args.add(user.getEmail());    addActionError(getText("errors.existing.user",args.toArray(new String[]{})));    user.setPassword(user.getConfirmPassword());    return INPUT;  }  saveMessage(getText("user.registered"));  getSession().setAttribute(Constants.REGISTERED,Boolean.TRUE);  UsernamePasswordAuthenticationToken auth=new UsernamePasswordAuthenticationToken(user.getUsername(),user.getConfirmPassword(),user.getAuthorities());  auth.setDetails(user);  SecurityContextHolder.getContext().setAuthentication(auth);  mailMessage.setSubject(getText("signup.email.subject"));  sendUserMessage(user,getText("signup.email.message"),RequestUtil.getAppURL(getRequest()));  return SUCCESS;}  }
class C{  public int totalMemory(){  return memSize;}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public ParticleString2D(VerletPhysics2D physics,Vec2D pos,Vec2D step,int num,float mass,float strength){  this.physics=physics;  particles=new ArrayList<VerletParticle2D>(num);  links=new ArrayList<VerletSpring2D>(num - 1);  float len=step.magnitude();  VerletParticle2D prev=null;  pos=pos.copy();  for (int i=0; i < num; i++) {    VerletParticle2D p=new VerletParticle2D(pos.copy(),mass);    particles.add(p);    physics.particles.add(p);    if (prev != null) {      VerletSpring2D s=createSpring(prev,p,len,strength);      links.add(s);      physics.addSpring(s);    }    prev=p;    pos.addSelf(step);  }}  }
class C{  private IBindingSet[] join(List<List<IBindingSet>> staticBindings){  if (queryInput == null || queryInput.length == 0) {    return queryInput;  }  List<IBindingSet> leftBindingSets=Arrays.asList(queryInput);  for (  List<IBindingSet> staticBinding : staticBindings) {    final List<IBindingSet> tmp=new LinkedList<IBindingSet>();    for (    IBindingSet left : leftBindingSets) {      final Iterator<IBindingSet> rightItr=staticBinding.iterator();      while (rightItr.hasNext()) {        final IBindingSet right=rightItr.next();        final IBindingSet join=BOpContext.bind(left,right,null,null);        if (join != null) {          tmp.add(join);        }      }    }    leftBindingSets=tmp;  }  return leftBindingSets.toArray(new IBindingSet[leftBindingSets.size()]);}  }
class C{  public static WorkspaceImpl createWorkspace(String owner,String devMachineRam,String... machineRams) throws Exception {  Map<String,ExtendedMachineImpl> machines=new HashMap<>();  machines.put("dev-machine",new ExtendedMachineImpl(singletonList("org.eclipse.che.ws-agent"),emptyMap(),singletonMap("memoryLimitBytes",Long.toString(Size.parseSize(devMachineRam)))));  HashMap<String,ComposeServiceImpl> services=new HashMap<>(1 + machineRams.length);  services.put("dev-machine",createService());  for (int i=0; i < machineRams.length; i++) {    services.put("machine" + i,createService());    if (machineRams[i] != null) {      machines.put("machine" + i,new ExtendedMachineImpl(null,null,singletonMap("memoryLimitBytes",Long.toString(Size.parseSize(machineRams[i])))));    }  }  ComposeEnvironmentImpl composeEnvironment=new ComposeEnvironmentImpl();  composeEnvironment.setServices(services);  String yaml=YAML_PARSER.writeValueAsString(composeEnvironment);  EnvironmentRecipeImpl recipe=new EnvironmentRecipeImpl("compose","application/x-yaml",yaml,null);  return WorkspaceImpl.builder().generateId().setConfig(WorkspaceConfigImpl.builder().setName(NameGenerator.generate("workspace",2)).setEnvironments(singletonMap("dev-env",new EnvironmentImpl(recipe,machines))).setDefaultEnv("dev-env").build()).setAccount(new AccountImpl("accountId",owner,"test")).setTemporary(false).setStatus(WorkspaceStatus.STOPPED).build();}  }
class C{  public SingleNodeFilter(){  this(null);}  }
class C{  @Override public void onTurnReached(int currentTurn){  StoreMessageCommand checkcommand=DBCommandQueue.get().getOneResult(StoreMessageCommand.class,handle);  if (checkcommand == null) {    TurnNotifier.get().notifyInTurns(0,new TurnListenerDecorator(this));    return;  }  boolean characterExists=checkcommand.targetCharacterExists();  String source=checkcommand.getSource();  String target=checkcommand.getTarget();  final Player sourceplayer=SingletonRepository.getRuleProcessor().getPlayer(source);  if (sourceplayer == null) {    return;  }  if (!characterExists) {    sourceplayer.sendPrivateText(NotificationType.ERROR,"postman tells you: Sorry, " + target + " could not be found, so your message cannot be stored.");    return;  }  if (checkcommand.isIgnored()) {    sourceplayer.sendPrivateText("postman tells you: I cannot reach " + target + " on your behalf.");    return;  }  sourceplayer.sendPrivateText("postman tells you: Message accepted for delivery");  return;}  }
class C{  public FiltersWizard(){  setWindowTitle("Filters");}  }
class C{  public void paintTableBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void testInvalidVariableMethods(){  ParseException expected=expectThrows(ParseException.class,null);  assertEquals("Invalid expression 'method()': Unrecognized function call (method).",expected.getMessage());  assertEquals(0,expected.getErrorOffset());  expected=expectThrows(ParseException.class,null);  assertEquals("Invalid expression 'method.method(1)': Unrecognized function call (method.method).",expected.getMessage());  assertEquals(0,expected.getErrorOffset());  expected=expectThrows(ParseException.class,null);  assertEquals("Invalid expression '1 + method()': Unrecognized function call (method).",expected.getMessage());  assertEquals(4,expected.getErrorOffset());}  }
class C{  public boolean isWritable(){  return writable;}  }
class C{  public static void sendEmail(Context context,String recipient){  sendEmail(context,new String[]{recipient},null,null,null);}  }
class C{  private void handleResponseEventMessage(byte[] message){  byte channel=message[AntMesg.MESG_DATA_OFFSET];  if ((message[AntMesg.MESG_DATA_OFFSET + 1] == AntMesg.MESG_EVENT_ID) && (message[AntMesg.MESG_DATA_OFFSET + 2] == AntDefine.EVENT_RX_SEARCH_TIMEOUT)) {    channelConfig[channel].setInitializing(false);    channelConfig[channel].setDeinitializing(false);    channelConfig[channel].setChannelState(ChannelStates.OFFLINE);    try {      antInterface.ANTUnassignChannel(channel);    } catch (    AntInterfaceException e) {      handleAntError();    }    setSensorState(SensorState.DISCONNECTED);  }  if (channelConfig[channel].isInitializing()) {    if (message[AntMesg.MESG_DATA_OFFSET + 2] != 0) {      Log.e(TAG,String.format(Locale.US,"Error code(%#02x) on message ID(%#02x) on channel %d",message[AntMesg.MESG_DATA_OFFSET + 2],message[AntMesg.MESG_DATA_OFFSET + 1],channel));    } else {switch (message[AntMesg.MESG_DATA_OFFSET + 1]) {case AntMesg.MESG_ASSIGN_CHANNEL_ID:        try {          antInterface.ANTSetChannelId(channel,channelConfig[channel].getDeviceNumber(),channelConfig[channel].getDeviceType(),ChannelConfiguration.TRANSMISSION_TYPE);        } catch (        AntInterfaceException e) {          handleAntError();        }      break;case AntMesg.MESG_CHANNEL_ID_ID:    try {      antInterface.ANTSetChannelPeriod(channel,channelConfig[channel].getMessagPeriod());    } catch (    AntInterfaceException e) {      handleAntError();    }  break;case AntMesg.MESG_CHANNEL_MESG_PERIOD_ID:try {  antInterface.ANTSetChannelRFFreq(channel,ChannelConfiguration.FREQUENCY);} catch (AntInterfaceException e) {  handleAntError();}break;case AntMesg.MESG_CHANNEL_RADIO_FREQ_ID:try {antInterface.ANTSetChannelSearchTimeout(channel,(byte)0);} catch (AntInterfaceException e) {handleAntError();}break;case AntMesg.MESG_CHANNEL_SEARCH_TIMEOUT_ID:try {antInterface.ANTSetLowPriorityChannelSearchTimeout(channel,(byte)12);} catch (AntInterfaceException e) {handleAntError();}break;case AntMesg.MESG_SET_LP_SEARCH_TIMEOUT_ID:if (channelConfig[channel].getDeviceNumber() == WILDCARD) {try {antInterface.ANTSetProximitySearch(channel,ChannelConfiguration.PROXIMITY_SEARCH);} catch (AntInterfaceException e) {handleAntError();}} else {try {antInterface.ANTOpenChannel(channel);} catch (AntInterfaceException e) {handleAntError();}}break;case AntMesg.MESG_PROX_SEARCH_CONFIG_ID:try {antInterface.ANTOpenChannel(channel);} catch (AntInterfaceException e) {handleAntError();}break;case AntMesg.MESG_OPEN_CHANNEL_ID:channelConfig[channel].setInitializing(false);channelConfig[channel].setChannelState(ChannelStates.SEARCHING);break;default :break;}}} else if (channelConfig[channel].isDeinitializing()) {if ((message[AntMesg.MESG_DATA_OFFSET + 1] == AntMesg.MESG_EVENT_ID) && (message[AntMesg.MESG_DATA_OFFSET + 2] == AntDefine.EVENT_CHANNEL_CLOSED)) {try {antInterface.ANTUnassignChannel(channel);} catch (AntInterfaceException e) {handleAntError();}} else if ((message[AntMesg.MESG_DATA_OFFSET + 1] == AntMesg.MESG_UNASSIGN_CHANNEL_ID) && (message[AntMesg.MESG_DATA_OFFSET + 2] == AntDefine.RESPONSE_NO_ERROR)) {channelConfig[channel].setDeinitializing(false);}}}  }
class C{  @Override protected void determineLabelPositions(DrawContext dc){  if (WWUtil.isEmpty(this.labels))   return;  Iterator<? extends Position> positions=this.positions.iterator();  Position pos1=positions.next();  Position pos2=positions.next();  LatLon mid=LatLon.interpolate(0.25,pos2,pos1);  this.labels.get(0).setPosition(new Position(mid,0));  this.labels.get(0).setOrientationPosition(pos1);}  }
class C{  public static boolean computeInstancesStartedStateWithAcceptedErrorRate(AmazonEC2AsyncClient client,VerificationHost host,List<String> instanceIds,int errorRate) throws Throwable {  if (instanceIds.size() == 0) {    return false;  }  ArrayList<Boolean> provisioningFlags=new ArrayList<Boolean>(instanceIds.size());  for (int i=0; i < instanceIds.size(); i++) {    provisioningFlags.add(i,Boolean.FALSE);  }  checkInstancesStarted(host,client,instanceIds,provisioningFlags);  int totalCount=instanceIds.size();  int passCount=(int)Math.ceil((((100 - errorRate) / HUNDERED) * totalCount));  int poweredOnCount=0;  for (  boolean startedFlag : provisioningFlags) {    if (startedFlag) {      poweredOnCount++;    }  }  return (poweredOnCount >= passCount);}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  String name;  JSONObject jo=new JSONObject();  Object value;  JSONTokener x=new JSONTokener(string);  jo.put("name",x.nextTo('='));  x.next('=');  jo.put("value",x.nextTo(';'));  x.next();  while (x.more()) {    name=unescape(x.nextTo("=;"));    if (x.next() != '=') {      if (name.equals("secure")) {        value=Boolean.TRUE;      } else {        throw x.syntaxError("Missing '=' in cookie parameter.");      }    } else {      value=unescape(x.nextTo(';'));      x.next();    }    jo.put(name,value);  }  return jo;}  }
class C{  public void revalidate(){}  }
class C{  public static double[][] times(double[][] v1,double v){  double[][] array=new double[v1.length][v1[0].length];  for (int i=0; i < v1.length; i++)   for (int j=0; j < v1[i].length; j++)   array[i][j]=v1[i][j] * v;  return array;}  }
class C{  public static Dcs cs_multiply(Dcs A,Dcs B){  int p, j, nz=0, anz, Cp[], Ci[], Bp[], m, n, bnz, w[], Bi[];  double x[], Bx[], Cx[];  boolean values;  Dcs C;  if (!Dcs_util.CS_CSC(A) || !Dcs_util.CS_CSC(B))   return (null);  if (A.n != B.m)   return (null);  m=A.m;  anz=A.p[A.n];  n=B.n;  Bp=B.p;  Bi=B.i;  Bx=B.x;  bnz=Bp[n];  w=new int[m];  values=(A.x != null) && (Bx != null);  x=values ? new double[m] : null;  C=Dcs_util.cs_spalloc(m,n,anz + bnz,values,false);  Cp=C.p;  for (j=0; j < n; j++) {    if (nz + m > C.nzmax) {      Dcs_util.cs_sprealloc(C,2 * (C.nzmax) + m);    }    Ci=C.i;    Cx=C.x;    Cp[j]=nz;    for (p=Bp[j]; p < Bp[j + 1]; p++) {      nz=Dcs_scatter.cs_scatter(A,Bi[p],(Bx != null) ? Bx[p] : 1,w,x,j + 1,C,nz);    }    if (values)     for (p=Cp[j]; p < nz; p++)     Cx[p]=x[Ci[p]];  }  Cp[n]=nz;  Dcs_util.cs_sprealloc(C,0);  return C;}  }
class C{  public int dotProduct(IntVector v){  return x * v.x + y * v.y + z * v.z;}  }
class C{  public void addValues(List<String> newValues){synchronized (values) {    values.addAll(newValues);  }}  }
class C{  @Override synchronized public void run(){  if (mLogVerbose)   Log.v(TAG,"Running graph.");  setException(null);  if (isRunning()) {    throw new RuntimeException("Graph is already running!");  }  if (mRunner == null) {    throw new RuntimeException("Cannot run before a graph is set!");  }  mRunTask=this.new AsyncRunnerTask();  setRunning(true);  mRunTask.execute(mRunner);}  }
class C{  public CustomEditor(){  m_FormatText=new JTextField(20);  m_DefaultButton=new JButton("Default");  m_ApplyButton=new JButton("Apply");  m_DefaultButton.setMnemonic('D');  m_ApplyButton.setMnemonic('A');  m_FormatText.getDocument().addDocumentListener(this);  m_DefaultButton.addActionListener(this);  m_ApplyButton.addActionListener(this);  setLayout(new FlowLayout());  add(new JLabel("ISO 8601 Date format"));  add(m_FormatText);  add(m_DefaultButton);  add(m_ApplyButton);}  }
class C{  public VcpcRunner(GraphWrapper graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public static void resetAll(){  Log.context=null;  setLevel(DEFAULT_LOG_LEVEL);  Log.usingSystemOut=false;  Log.usingSystemErr=false;  Log.usingSlf4j=false;}  }
class C{  public void changedUpdate(DocumentEvent e,Shape a,ViewFactory f){  super.changedUpdate(e,a,f);  StyleSheet sheet=getStyleSheet();  attr=sheet.getViewAttributes(this);  preferenceChanged(null,true,true);}  }
class C{  @Override public PLPosition clone(){  return new PLPosition(x,y,z);}  }
class C{  public MultiPartFormOutputStream(OutputStream os,String boundary){  if (os == null) {    throw new IllegalArgumentException("Output stream is required.");  }  if (boundary == null || boundary.length() == 0) {    throw new IllegalArgumentException("Boundary stream is required.");  }  this.out=new DataOutputStream(os);  this.boundary=boundary;}  }
class C{  public KStepMarkov(DirectedGraph<V,E> graph,Set<V> priors,int k,Map<E,Number> edgeWeights){  super.initialize(graph,true,false);  mNumSteps=k;  setPriors(priors);  initializeRankings();  if (edgeWeights == null) {    assignDefaultEdgeTransitionWeights();  } else {    setEdgeWeights(edgeWeights);  }  normalizeEdgeTransitionWeights();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void resetChildrenPaths(TreePath parentPath){  removeMapping(this);  if (parentPath == null)   path=new TreePath(getUserObject()); else   path=parentPath.pathByAddingChild(getUserObject());  addMapping(this);  for (int counter=getChildCount() - 1; counter >= 0; counter--)   ((FHTreeStateNode)getChildAt(counter)).resetChildrenPaths(path);}  }
class C{  protected void addTag(WbXmlTagDef tag){  this.tagsByName.put(tag.getNameWithPrefix(),tag);  this.tagsByToken.put(tag.getToken(),tag);}  }
class C{  public static <E>ConstantSet<E> of(Order<? super E> order,Collection<? extends E> elements){  SparseSet<E> sparse=new SparseSet<E>(order);  for (  E e : elements)   sparse.add(e);  return new ConstantSet<E>(sparse);}  }
class C{  public LinkedIdentityHashMap(Map<? extends K,? extends V> m){  super(m);  accessOrder=false;}  }
class C{  public boolean contains(final String key){  return this.database.containsKey(UTF8.getBytes(key));}  }
class C{  public boolean isBooleanAssignment(AbstractInsnNode position,MethodNode mn){  AbstractInsnNode node=position.getNext();  logger.info("Checking for ISTORE after boolean");  boolean done=false;  while (!done) {    if (node.getOpcode() == Opcodes.PUTFIELD || node.getOpcode() == Opcodes.PUTSTATIC) {      logger.info("Checking field assignment");      FieldInsnNode fn=(FieldInsnNode)node;      if (Type.getType(DescriptorMapping.getInstance().getFieldDesc(fn.owner,fn.name,fn.desc)) == Type.BOOLEAN_TYPE) {        return true;      } else {        return false;      }    } else     if (node.getOpcode() == Opcodes.ISTORE) {      logger.info("Found ISTORE after boolean");      VarInsnNode vn=(VarInsnNode)node;      if (isBooleanVariable(vn.var,mn)) {        logger.info("Assigning boolean to variable ");        return true;      } else {        logger.info("Variable is not a bool");        return false;      }    } else     if (node.getOpcode() == Opcodes.IRETURN) {      logger.info("Checking return value of method " + cn.name + "."+ mn.name);      if (DescriptorMapping.getInstance().isTransformedOrBooleanMethod(cn.name,mn.name,mn.desc)) {        logger.info("Method returns a bool");        return true;      } else {        logger.info("Method does not return a bool");        return false;      }    } else     if (node.getOpcode() == Opcodes.BASTORE) {      AbstractInsnNode start=position.getNext();      boolean reassignment=false;      while (start != node) {        if (node instanceof InsnNode) {          reassignment=true;        }        start=start.getNext();      }      logger.info("Possible assignment to array?");      if (reassignment)       return false; else       return true;    } else     if (node instanceof MethodInsnNode) {      MethodInsnNode methodNode=(MethodInsnNode)node;      String desc=DescriptorMapping.getInstance().getMethodDesc(methodNode.owner,methodNode.name,methodNode.desc);      Type[] types=Type.getArgumentTypes(desc);      if (types.length > 0 && types[types.length - 1] == Type.BOOLEAN_TYPE) {        return true;      } else {        return false;      }    } else     if (node.getOpcode() == Opcodes.GOTO || node.getOpcode() == Opcodes.ICONST_0 || node.getOpcode() == Opcodes.ICONST_1 || node.getOpcode() == -1) {      logger.info("Continuing search");    } else     if (!(node instanceof LineNumberNode || node instanceof FrameNode)) {      logger.info("Search ended with opcode " + node.getOpcode());      return false;    }    if (node != mn.instructions.getLast())     node=node.getNext(); else     done=true;  }  return false;}  }
class C{  public static boolean initDebug(){  return StaticHelper.initOpenCV(false);}  }
class C{  @Override public Builder<K,V> putAll(K key,Iterable<? extends V> values){  Collection<V> collection=builderMultimap.get(checkNotNull(key));  for (  V value : values) {    collection.add(checkNotNull(value));  }  return this;}  }
class C{  public NodeSequence(Object nodeVector){  super(nodeVector);  if (nodeVector instanceof NodeVector) {    SetVector((NodeVector)nodeVector);  }  if (null != nodeVector) {    assertion(nodeVector instanceof NodeVector,"Must have a NodeVector as the object for NodeSequence!");    if (nodeVector instanceof DTMIterator) {      setIter((DTMIterator)nodeVector);      m_last=((DTMIterator)nodeVector).getLength();    }  }}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  @SuppressWarnings("unchecked") @Override protected Object applyUpdatesToManagedData(Object updates){  boolean madeChanges=false;  List<String> words=(List<String>)updates;  log.info("Applying updates: " + words);  boolean ignoreCase=getIgnoreCase();  for (  String word : words) {    if (ignoreCase)     word=word.toLowerCase(Locale.ROOT);    if (managedWords.add(word)) {      madeChanges=true;      log.info("Added word: {}",word);    }  }  return madeChanges ? managedWords : null;}  }
class C{  private void interpretOr(final ReilInstruction instruction){  final Pair<Boolean,BigInteger> firstValue=loadLongValue(instruction.getFirstOperand());  final Pair<Boolean,BigInteger> secondValue=loadLongValue(instruction.getSecondOperand());  if (firstValue.first() && secondValue.first()) {    final BigInteger result=firstValue.second().or(secondValue.second());    final String targetRegister=instruction.getThirdOperand().getValue();    final OperandSize targetSize=instruction.getThirdOperand().getSize();    setRegister(targetRegister,result,targetSize,ReilRegisterStatus.DEFINED);  } else {    assert false;  }}  }
class C{  public static void init(){  server=SocketManager.register("TOAST_command");  String pass=ToastConfiguration.Property.COMMANDS_DELEGATE_PASSWORD.asString();  String algorithm=ToastConfiguration.Property.COMMANDS_DELEGATE_ALGORITHM.asString();  if (pass != null && !pass.equals("")) {    if (algorithm != null && Security.HashType.match(algorithm) != null)     server.setPassword(pass,Security.HashType.match(algorithm)); else     server.setPassword(pass);  }  CommandDelegate instance=new CommandDelegate();  server.callback(instance);}  }
class C{  public TransitStopFacility drawRandomStopFromList(List<TransitStopFacility> choiceSet){  if (this.stops2Weight == null) {    updateWeights();  }  double totalWeightOfChoiceSet=0.0;  for (  TransitStopFacility stop : choiceSet) {    if (this.stops2Weight.get(stop) != null) {      totalWeightOfChoiceSet+=this.stops2Weight.get(stop);    }  }  if (totalWeightOfChoiceSet == 0.0) {    int i=0;    double rndTreshold=MatsimRandom.getRandom().nextDouble() * choiceSet.size();    for (    TransitStopFacility stop : choiceSet) {      i++;      if (rndTreshold <= i) {        return stop;      }    }    return null;  }  double accumulatedWeightOfChoiceSet=0.0;  double rndTreshold=MatsimRandom.getRandom().nextDouble() * totalWeightOfChoiceSet;  for (  TransitStopFacility stop : choiceSet) {    if (this.stops2Weight.get(stop) != null) {      accumulatedWeightOfChoiceSet+=this.stops2Weight.get(stop);    }    if (rndTreshold <= accumulatedWeightOfChoiceSet) {      return stop;    }  }  log.warn("Could not draw a random stop from the given choice set " + choiceSet);  return null;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  protected boolean stopOnError(){  errCount+=errorVisitor.getErrorCount();  return stopOnErrors && errCount > 0;}  }
class C{  public static final String fillInExceptionMessage(NestingException nestingException,String stackTrace,String errorMesg){  if (stackTrace != null) {    int index=stackTrace.indexOf(':');    String s1=stackTrace.substring(0,index + 1);    index=stackTrace.indexOf("\tat");    String s2;    if (index >= 0) {      s2=stackTrace.substring(index);    } else {      s2="";    }    StringBuffer buf=new StringBuffer();    buf.append(s1);    buf.append(' ');    buf.append(errorMesg);    buf.append('\n');    Enumeration<?> enumeration=nestingException.getAllExceptionMessages();    while (enumeration.hasMoreElements()) {      ExceptionMessage exceptionMessage;      exceptionMessage=(ExceptionMessage)enumeration.nextElement();      buf.append('\t');      buf.append(exceptionMessage.getExceptionCode());      buf.append(": ");      buf.append(exceptionMessage.getMessage());      buf.append('\n');    }    buf.append(s2);    stackTrace=buf.toString();  } else {    stackTrace="";  }  return stackTrace;}  }
class C{  public void addSrcClass(SootClass clz){  srcClasses.add(clz.getName());}  }
class C{  @Override public int write(ByteBuffer src,long position) throws IOException {  throw new NonWritableChannelException();}  }
class C{  protected void processMouseWheelEvent(GraphicsNodeMouseWheelEvent evt){  if (glisteners != null) {    GraphicsNodeMouseWheelListener[] listeners=(GraphicsNodeMouseWheelListener[])getListeners(GraphicsNodeMouseWheelListener.class);    for (int i=0; i < listeners.length; i++) {      listeners[i].mouseWheelMoved(evt);    }  }}  }
class C{  private void displayPersistentNotification(){  PendingIntent mainIntent=PendingIntent.getActivity(this,0,new Intent(this,MainActivity.class),0);  PendingIntent stopIntent=PendingIntent.getService(this,0,new Intent(this,CaptureService.class).setAction(ACTION_STOP_CAPTURE),0);  Notification notification=new NotificationCompat.Builder(this).addAction(R.drawable.ic_action_stop,"Stop",stopIntent).setCategory(NotificationCompat.CATEGORY_SERVICE).setColor(getResources().getColor(R.color.material_primary)).setContentIntent(mainIntent).setContentText(getText(R.string.notification_status_progress)).setContentTitle(getText(R.string.notification_title)).setSmallIcon(R.drawable.ic_stat_notify).build();  startForeground(1,notification);}  }
class C{  public String toString(String pattern,Locale locale) throws IllegalArgumentException {  if (pattern == null) {    return toString();  }  return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);}  }
class C{  public void visitTableSwitchInsn(int min,int max,Label dflt,Label... labels){  if (mv != null) {    mv.visitTableSwitchInsn(min,max,dflt,labels);  }}  }
class C{  public DispatchingCachedEventSource<T> preload(String... aggregateIds){  return preload(Arrays.asList(aggregateIds));}  }
class C{  public static PrivateKey generatePrivateKey(final String filename){  try {    File f=new File(filename);    FileInputStream fis=new FileInputStream(f);    DataInputStream dis=new DataInputStream(fis);    byte[] keyBytes=new byte[(int)f.length()];    dis.readFully(keyBytes);    dis.close();    PKCS8EncodedKeySpec spec=new PKCS8EncodedKeySpec(keyBytes);    KeyFactory kf=KeyFactory.getInstance(ALGORITHM_RSA);    return kf.generatePrivate(spec);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public LongArrayList copy(){  return (LongArrayList)clone();}  }
class C{  public static String toEscape(Date date){  if (date == null)   return null;  DateFormat df=null;  try {    df=new SimpleDateFormat(ESCAPE_DATE_PATTERN);  } catch (  Throwable t) {    return null;  }  df.setLenient(false);  return df.format(date);}  }
class C{  void copyLeadingComment(Statement source){  setLeadingComment(source.getLeadingComment());}  }
class C{  private void drawCursorVertical(int p_146188_1_,int p_146188_2_,int p_146188_3_,int p_146188_4_){  int var5;  if (p_146188_1_ < p_146188_3_) {    var5=p_146188_1_;    p_146188_1_=p_146188_3_;    p_146188_3_=var5;  }  if (p_146188_2_ < p_146188_4_) {    var5=p_146188_2_;    p_146188_2_=p_146188_4_;    p_146188_4_=var5;  }  if (p_146188_3_ > xPosition + width)   p_146188_3_=xPosition + width;  if (p_146188_1_ > xPosition + width)   p_146188_1_=xPosition + width;  Tessellator var7=Tessellator.getInstance();  WorldRenderer var6=var7.getWorldRenderer();  GlStateManager.color(0.0F,0.0F,255.0F,255.0F);  GlStateManager.func_179090_x();  GlStateManager.enableColorLogic();  GlStateManager.colorLogicOp(5387);  var6.startDrawingQuads();  var6.addVertex(p_146188_1_,p_146188_4_,0.0D);  var6.addVertex(p_146188_3_,p_146188_4_,0.0D);  var6.addVertex(p_146188_3_,p_146188_2_,0.0D);  var6.addVertex(p_146188_1_,p_146188_2_,0.0D);  var7.draw();  GlStateManager.disableColorLogic();  GlStateManager.func_179098_w();}  }
class C{  public SendableDocumentMessage.SendableDocumentMessageBuilder replyMarkup(ReplyMarkup replyMarkup){  this.replyMarkup=replyMarkup;  return this;}  }
class C{  public BERSequence(){}  }
class C{  protected static int doReset() throws ReplicatorException, InterruptedException {  boolean cleared=admin.reset(datasource);  if (cleared) {    String msg="Service \"" + service + "\" datasource \""+ datasource+ "\" catalog information cleared";    logger.info(msg);    println(msg);    return 0;  } else {    printlnerr("FAILED to clear datasource \"" + datasource + "\" information for service \""+ service+ "\"");    return 5;  }}  }
class C{  public String toString(){  return root.toString();}  }
class C{  private static boolean spanWillOverlap(Spannable spanText,URLSpan[] spanList,int start,int end){  if (start == end) {    return false;  }  for (  URLSpan span : spanList) {    int existingStart=spanText.getSpanStart(span);    int existingEnd=spanText.getSpanEnd(span);    if ((start >= existingStart && start < existingEnd) || end > existingStart && end <= existingEnd) {      if (Log.isLoggable(TAG,Log.VERBOSE)) {        CharSequence seq=spanText.subSequence(start,end);        Log.v(TAG,"Not linkifying " + seq + " as phone number due to overlap");      }      return true;    }  }  return false;}  }
class C{  @Override public boolean check(ProcessBranch operator,String value) throws OperatorException {  Class<? extends IOObject> clazz=operator.getSelectedClass();  if (clazz != null) {    IOObject object=operator.getConditionInputOrNull(clazz);    return (object != null);  }  return false;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  private void checkSize(final int i){  if (i >= max_size) {    final int old_size=max_size;    max_size+=increment_size;    if (max_size <= i) {      max_size=i + increment_size + 2;    }    final GeneralPath[] temp=items;    items=new GeneralPath[max_size];    System.arraycopy(temp,0,items,0,old_size);    increment_size=incrementSize(increment_size);  }}  }
class C{  public void addGenericAttr(GenericAttr g){  generic.addElement(g);  g.resolve(this);}  }
class C{  private void clearRemoteNotificationsInternal(){  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(Wearable.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  if (connectionResult.isSuccess() && googleApiClient.isConnected()) {    Iterator<String> itr=Utils.getNodes(googleApiClient).iterator();    while (itr.hasNext()) {      Wearable.MessageApi.sendMessage(googleApiClient,itr.next(),Constants.CLEAR_NOTIFICATIONS_PATH,null);    }  }  googleApiClient.disconnect();}  }
class C{  static Object removeAll(final Object array,final int... indices){  final int length=getLength(array);  int diff=0;  if (isNotEmpty(indices)) {    Arrays.sort(indices);    int i=indices.length;    int prevIndex=length;    while (--i >= 0) {      final int index=indices[i];      if (index < 0 || index >= length) {        throw new IndexOutOfBoundsException("Index: " + index + ", Length: "+ length);      }      if (index >= prevIndex) {        continue;      }      diff++;      prevIndex=index;    }  }  final Object result=Array.newInstance(array.getClass().getComponentType(),length - diff);  if (diff < length) {    int end=length;    int dest=length - diff;    for (int i=indices.length - 1; i >= 0; i--) {      final int index=indices[i];      if (end - index > 1) {        final int cp=end - index - 1;        dest-=cp;        System.arraycopy(array,index + 1,result,dest,cp);      }      end=index;    }    if (end > 0) {      System.arraycopy(array,0,result,0,end);    }  }  return result;}  }
class C{  private void enableFeature(boolean enable,String feature){  if (TextUtils.isEmpty(feature)) {    return;  }  SharedPreferences prefs=getPreferenceScreen().getSharedPreferences();  prefs.edit().putBoolean(feature,enable).apply();  SwitchPreference pref=(SwitchPreference)findPreference(feature);  pref.setChecked(enable);  if (!enable) {    this.presentPermissionExplanationToastForFeature(feature);  }}  }
class C{  private static boolean isEnabled(){  if (SystemUtils.IS_OS_WINDOWS) {    return false;  }  try {    List<String> lines=CommandUtil.executeCommandAndGetLines(Collections.singletonList("sestatus"));    for (    String line : lines) {      if (line.contains("SELinux status")) {        if (line.contains("enabled")) {          Logger.info("SELinux is enabled on this system");          return true;        }        return false;      }    }  } catch (  Exception ex) {  }  return false;}  }
class C{  public void invertSelection(boolean notifyDataSetChanged){  for (int i=0; i < getCount(); i++) {    IFileDataModel item=getItem(i);    item.setSelected(!item.isSelected());  }  if (notifyDataSetChanged)   notifyDataSetChanged();}  }
class C{  public static void closeQuiet(@Nullable AutoCloseable rsrc){  if (rsrc != null)   try {    rsrc.close();  } catch (  Exception ignored) {  }}  }
class C{  @Deprecated public MailBuilder content(net.sargue.mailgun.content.MailContent content){  return text(content.text()).html(content.html());}  }
class C{  private GF2nPolynomial(int deg){  size=deg;  coeff=new GF2nElement[size];}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:54.317 -0400",hash_original_method="662784F49B60498DA0511864D5DD2D9D",hash_generated_method="7BE4589A7C66A92924873A2671D863FA") public int hashCode(){  return mFileSuffixList.hashCode() + mMimeTypeList.hashCode() + mDescription.hashCode();}  }
class C{  public void addAttributeMapping(IdentityStoreAttributeMapping attributeMapping){  ValidateUtil.validateNotNull(attributeMapping,"attributeMapping");  this._storeAttributes.put(attributeMapping.getAttributeId(),attributeMapping);}  }
class C{  public boolean isHandshakeComplete(){  return this.state == ForgeClientHandshakeState.DONE;}  }
class C{  public boolean forEachKey(IntProcedure procedure){  for (int i=table.length; i-- > 0; ) {    if (state[i] == FULL)     if (!procedure.apply(table[i]))     return false;  }  return true;}  }
class C{  private static void validateOutputFormatList(String[] outputFormats,Mode mode){  if (outputFormats != null && outputFormats.length > 0) {    for (    String outputFormat : outputFormats) {      if (!FileOutputFormat.isExtensionValid(outputFormat)) {        System.out.println("\n\n" + "The specified output file format " + outputFormat + " was not recognised."+ "\n\n");        System.exit(1);      } else       if (!mode.equals(Mode.CONVERT) && outputFormat.equalsIgnoreCase("raw")) {        System.out.println("\n\n" + "The specified output file format " + outputFormat + " is only supported in "+ Mode.CONVERT.name()+ " mode."+ "\n\n");        System.exit(1);      }    }  }}  }
class C{  private int parseKeyProviderIdLen(final byte[] b,final int off) throws ParseException {  keyProviderIdLen_=PrimitivesParser.parseShort(b,off);  return Short.SIZE / Byte.SIZE;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:42.916 -0500",hash_original_method="BD7E958A7E0243B3E429B860CDBE19D2",hash_generated_method="7EF5AD263C5F29EDB075634DFF2FFF6F") public static boolean isValidWithNetMask(String address){  return isValidIPv4WithNetmask(address) || isValidIPv6WithNetmask(address);}  }
class C{  protected void writeDeclaration() throws IOException {  String encoding=format.getEncoding();  if (!format.isSuppressDeclaration()) {    if (encoding.equals("UTF8")) {      writer.write("<?xml version=\"1.0\"");      if (!format.isOmitEncoding()) {        writer.write(" encoding=\"UTF-8\"");      }      writer.write("?>");    } else {      writer.write("<?xml version=\"1.0\"");      if (!format.isOmitEncoding()) {        writer.write(" encoding=\"" + encoding + "\"");      }      writer.write("?>");    }    if (format.isNewLineAfterDeclaration()) {      println();    }  }}  }
class C{  public static boolean isRootElementInSequence(InvocationSequenceData data){  return !hasParentElementInSequence(data);}  }
class C{  private void copyTables(){  if (prefixTable != null) {    prefixTable=(Hashtable)prefixTable.clone();  } else {    prefixTable=new Hashtable();  }  if (uriTable != null) {    uriTable=(Hashtable)uriTable.clone();  } else {    uriTable=new Hashtable();  }  elementNameTable=new Hashtable();  attributeNameTable=new Hashtable();  declSeen=true;}  }
class C{  public void testCallMBeanInfo() throws Exception {  List<Class> classes=new ArrayList<>();  classes.addAll(getClassesForPackage(StandardRequestHandler.class.getPackage().getName()));  classes.addAll(getClassesForPackage(SearchHandler.class.getPackage().getName()));  classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));  classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));  classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));  classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));  int checked=0;  for (  Class clazz : classes) {    if (SolrInfoMBean.class.isAssignableFrom(clazz)) {      try {        SolrInfoMBean info=(SolrInfoMBean)clazz.newInstance();        assertNotNull(info.getName());        assertNotNull(info.getDescription());        assertNotNull(info.getCategory());        if (info instanceof LRUCache) {          continue;        }        assertNotNull(info.toString());        assertNotNull(info.getDocs() + "");        assertNotNull(info.getStatistics() + "");        checked++;      } catch (      InstantiationException ex) {      }    }  }  assertTrue("there are at least 10 SolrInfoMBean that should be found in the classpath, found " + checked,checked > 10);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE_DURING___TRACE_DURATION_1:    return TRACE_DURATION_1_EDEFAULT == null ? trace_duration_1 != null : !TRACE_DURATION_1_EDEFAULT.equals(trace_duration_1);}return super.eIsSet(featureID);}  }
class C{  private Workflow.Method deleteVolumesMethod(URI systemURI,List<URI> volumeURIs){  return new Workflow.Method("deleteVolumes",systemURI,volumeURIs);}  }
class C{  public SoundFieldGroupLabelSubDescriptorBO(KLVPacket.Header header,ByteProvider byteProvider,Map<Integer,MXFUID> localTagToUIDMap,IMFErrorLogger imfErrorLogger) throws IOException {  super(header);  long numBytesToRead=this.header.getVSize();  StructuralMetadata.populate(this,byteProvider,numBytesToRead,localTagToUIDMap);  if (this.instance_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,SoundFieldGroupLabelSubDescriptor.ERROR_DESCRIPTION_PREFIX + "instance_uid is null");  }  if (this.mca_label_dictionary_id == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,SoundFieldGroupLabelSubDescriptor.ERROR_DESCRIPTION_PREFIX + "mca_label_dictionary_id is null");  }  if (this.mca_link_id == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,SoundFieldGroupLabelSubDescriptor.ERROR_DESCRIPTION_PREFIX + "mca_link_id is null");  }  if (this.mca_tag_symbol == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,SoundFieldGroupLabelSubDescriptor.ERROR_DESCRIPTION_PREFIX + "mca_tag_symbol is null");  }}  }
class C{  private void resize(int capacity){  Item[] a=(Item[])new Object[capacity];  System.arraycopy(items,0,a,0,size);  items=a;}  }
class C{  protected static double[] rotateVector(double x,double y,double angle){  double angleInRadians=Math.toRadians(angle);  double cosA=Math.cos(angleInRadians);  double sinA=Math.sin(angleInRadians);  double out[]=new double[2];  out[0]=x * cosA - y * sinA;  out[1]=x * sinA + y * cosA;  return out;}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  @Override public int hashCode(){  if (this.getNetwork() == null) {    return 0;  }  return this.getNetwork().hashCode();}  }
class C{  public MissingListenerException(String s,String className,String key){  super(s);  this.className=className;  this.key=key;}  }
class C{  public Variance createVarianceFromString(EDataType eDataType,String initialValue){  return (Variance)super.createFromString(eDataType,initialValue);}  }
class C{  public final boolean unlinkAllChunks(){  boolean changed=false;  boolean allUnlinked=true;  Iterator<ChunkPos> it=this.linkedChunks.iterator();  ChunkPos pos=null;  while (it.hasNext()) {    pos=it.next();    Chunk chunk=this.worldStorage.getWorld().getChunkFromChunkCoords(pos.chunkXPos,pos.chunkZPos);    ChunkDataBase chunkData=ChunkDataBase.forChunk(this.worldStorage,chunk);    if (chunkData == null || !chunkData.unlinkSharedStorage(this)) {      allUnlinked=false;    } else     if (chunkData != null) {      it.remove();      changed=true;    }  }  if (changed) {    this.setDirty(true);  }  return allUnlinked;}  }
class C{  public static AttributeMetaData createPredictionMetaData(AttributeMetaData labelMetaData){  AttributeMetaData result=labelMetaData.clone();  result.setName("prediction(" + result.getName() + ")");  result.setRole(Attributes.PREDICTION_NAME);  return result;}  }
class C{  protected final IntConstantOperand SRI(int i,int amount){  return IC(i >>> amount);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.SIMPLE_ATTRIBUTE___NAME_1:    return getName_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void run(final Person person){  for (  Plan plan : person.getPlans()) {    processPlan(plan);  }}  }
class C{  public boolean isBlacklist(){  return blacklist;}  }
class C{  static WebServer start(String... args){  return builder().start(args);}  }
class C{  public String format(String... args){  return String.format(this.content,(Object[])args);}  }
class C{  public static List<String> convertAuthStringToList(final String authString){  final List<String> authList=new ArrayList<>();  if (authString != null) {    final String[] authSplit=authString.split(",");    authList.addAll(Arrays.asList(authSplit));  }  return authList;}  }
class C{  public void visitTypeInsn(int opcode,String type){  if (mv != null) {    mv.visitTypeInsn(opcode,type);  }}  }
class C{  protected static String h2c(String hyphenated,boolean studly){  StringBuilder b=new StringBuilder(hyphenated.length());  boolean capNext=studly;  for (int i=0; i < hyphenated.length(); ++i) {    char c=hyphenated.charAt(i);    if (c == '-')     capNext=true; else {      b.append(capNext ? Character.toUpperCase(c) : c);      capNext=false;    }  }  return b.toString();}  }
class C{  public int size(){  return n;}  }
class C{  public Tax(String country,Collection<String> regions,float rate,Boolean taxShip){  this.country=country;  if (regions != null) {    this.regions=ImmutableList.copyOf(regions);  } else {    this.regions=Collections.<String>emptySet();  }  this.rate=rate;  this.taxShip=taxShip;}  }
class C{  public String[] readLine() throws IOException {  String str=reader.readLine();  if (str == null) {    return (null);  }  String[] token=str.split(delimiter);  for (int i=0; i < token.length; ++i) {    token[i]=token[i].trim();  }  return (token);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:26.977 -0500",hash_original_method="F9F3FD902406E9F982D2A30CB15B8CC4",hash_generated_method="D19C91221B1080DB646063B49CD92AD8") public void play(){  if (mAudio == null) {    try {      openMediaPlayer();    } catch (    Exception ex) {      Log.e(TAG,"play() caught ",ex);      mAudio=null;    }  }  if (mAudio != null) {    if (mAudioManager.getStreamVolume(mStreamType) != 0) {      mAudio.start();    }  }}  }
class C{  private double innerProduct(Instance i1,Instance i2) throws Exception {  double result=0;  int n1=i1.numValues();  int n2=i2.numValues();  int classIndex=m_Train.classIndex();  for (int p1=0, p2=0; p1 < n1 && p2 < n2; ) {    int ind1=i1.index(p1);    int ind2=i2.index(p2);    if (ind1 == ind2) {      if (ind1 != classIndex) {        result+=i1.valueSparse(p1) * i2.valueSparse(p2);      }      p1++;      p2++;    } else     if (ind1 > ind2) {      p2++;    } else {      p1++;    }  }  result+=1.0;  if (m_Exponent != 1) {    return Math.pow(result,m_Exponent);  } else {    return result;  }}  }
class C{  @Override public PriorityQueue<E> clone(){  PriorityQueue<E> clonePQ=new PriorityQueue<E>();  clonePQ.size=size;  clonePQ.capacity=capacity;  clonePQ.elements=new ArrayList<E>(capacity);  clonePQ.priorities=new double[capacity];  if (size() > 0) {    clonePQ.elements.addAll(elements);    System.arraycopy(priorities,0,clonePQ.priorities,0,size());  }  return clonePQ;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  protected ByteVector write(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals){  ByteVector v=new ByteVector();  v.data=value;  v.length=value.length;  return v;}  }
class C{  protected static Collection findIssuerCerts(X509Certificate cert,ExtendedPKIXBuilderParameters pkixParams) throws AnnotatedException {  X509CertStoreSelector certSelect=new X509CertStoreSelector();  Set certs=new HashSet();  try {    certSelect.setSubject(cert.getIssuerX500Principal().getEncoded());  } catch (  IOException ex) {    throw new AnnotatedException("Subject criteria for certificate selector to find issuer certificate could not be set.",ex);  }  Iterator iter;  try {    List matches=new ArrayList();    matches.addAll(CertPathValidatorUtilities.findCertificates(certSelect,pkixParams.getCertStores()));    matches.addAll(CertPathValidatorUtilities.findCertificates(certSelect,pkixParams.getStores()));    matches.addAll(CertPathValidatorUtilities.findCertificates(certSelect,pkixParams.getAdditionalStores()));    iter=matches.iterator();  } catch (  AnnotatedException e) {    throw new AnnotatedException("Issuer certificate cannot be searched.",e);  }  X509Certificate issuer=null;  while (iter.hasNext()) {    issuer=(X509Certificate)iter.next();    certs.add(issuer);  }  return certs;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  KeyedObjects2D clone=(KeyedObjects2D)super.clone();  clone.columnKeys=new java.util.ArrayList(this.columnKeys);  clone.rowKeys=new java.util.ArrayList(this.rowKeys);  clone.rows=new java.util.ArrayList(this.rows.size());  Iterator iterator=this.rows.iterator();  while (iterator.hasNext()) {    KeyedObjects row=(KeyedObjects)iterator.next();    clone.rows.add(row.clone());  }  return clone;}  }
class C{  protected double calculateMoveIndex(Entity entity,StringBuilder msg){  msg.append("\n\tCalculating move index for ").append(entity.getDisplayName());  StringBuilder modifiers=new StringBuilder();  NumberFormat numberFormat=DecimalFormat.getInstance();  double total=0;  try {    int fastestMove=entity.getRunMP(true,false,false);    if (entity.getJumpMP(true) > fastestMove) {      fastestMove=entity.getJumpMP(true);    }    msg.append("\n\t\tFastest Move = ").append(fastestMove);    double distance=getPathRanker().distanceToClosestEnemy(entity,entity.getPosition(),game);    msg.append("\n\t\tDistance to Nearest Enemy: ").append(numberFormat.format(distance));    if (fastestMove == 0) {      total=distance * 2;    } else {      total=distance / fastestMove;    }    msg.append("\n\t\tDistance to Move Ratio (dist / move): ").append(numberFormat.format(total));    if (entity.isProne()) {      total*=1.1;      modifiers.append("\tx1.1 (Is Prone)");    }    if (entity instanceof BattleArmor) {      total*=2;      modifiers.append("\tx2.0 (is BA)");    } else     if (entity instanceof Infantry) {      total*=3;      modifiers.append("\tx3.0 (is Inf)");    } else     if (entity instanceof Tank) {      total*=1.5;      modifiers.append("\tx1.5 (is Tank)");    }    if (isFallingBack(entity)) {      total*=2;      modifiers.append("\tx2.0 (is Fleeing)");    }    if (entity.isCommander()) {      total/=2;      modifiers.append("\tx0.5 (is Commander)");    }    if (!entity.isMilitary()) {      total*=5;      modifiers.append("\tx5.0 (is Civilian)");    }    if (entity.isStealthActive() || entity.isStealthOn() || entity.isVoidSigActive()|| entity.isVoidSigOn()) {      total/=3;      modifiers.append("\tx1/3 (is Stealthed)");    }    return total;  }  finally {    msg.append("\n\t\tModifiers:").append(modifiers);    msg.append("\n\t\tTotal = ").append(numberFormat.format(total));  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private boolean timeAuthorisedList(Player player){  if (player.hasPermission("achievement.*") || listTime == 0)   return true;  long currentTime=System.currentTimeMillis();  long lastListTime=0;  if (players.containsKey(player))   lastListTime=players.get(player);  if (currentTime - lastListTime < listTime)   return false;  players.put(player,currentTime);  return true;}  }
class C{  public void addRight(int right){  this.rightMask|=right;}  }
class C{  private void startHelpSection(RequestAndResponse requestAndResponse,String name) throws IOException {  requestAndResponse.println("<div class=\"helpListSection\"><div class=\"helpListHeader\">" + name + "</div>");}  }
class C{  public void testRetrieveInformation() throws ConfigurationException {  AuthenticationInfo authInfo=SecurityHelper.loadAuthenticationInformation("sample.security.properties");  assertNotNull(authInfo);  TungstenProperties securityProp=authInfo.getAsTungstenProperties();  assertNotNull(securityProp);  Boolean useJmxAuthentication=securityProp.getBoolean(SecurityConf.SECURITY_JMX_USE_AUTHENTICATION);  assertNotNull(useJmxAuthentication);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.287 -0500",hash_original_method="C5A42222BD6D7B11B03E8E8DC75486E5",hash_generated_method="5784B78D0998794D552EC7C822640647") public void onReceivedClientCertRequest(WebView view,ClientCertRequestHandler handler,String host_and_port){  handler.cancel();}  }
class C{  public static ComponentUI createUI(JComponent b){  return new SynthToggleButtonUI();}  }
class C{  public static void statementExecuted(){  ExecutionTracer tracer=getExecutionTracer();  if (tracer.disabled)   return;  if (isThreadNeqCurrentThread())   return;  checkTimeout();  tracer.num_statements++;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static String BreakLine(String str){  int lineLen=0;  int nextChar=0;  String newStr="";  char ch='0';  while (nextChar < str.length()) {    ch=str.charAt(nextChar);    if (ch == '\t') {      if (lineLen > MAXLEN) {        newStr=newStr + "\n       ";        lineLen=7;      }    } else {      newStr=newStr + ch;      lineLen=lineLen + 1;    }    ;    nextChar=nextChar + 1;  }  ;  return newStr;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.PATTERN__QUANTIFIER:    setQuantifier((Quantifier)null);  return;}super.eUnset(featureID);}  }
class C{  void pushImportURL(String hrefUrl){  m_importStack.push(hrefUrl);}  }
class C{  public void qtest(Query q,int[] expDocNrs) throws Exception {  if (random().nextBoolean()) {    BooleanQuery.Builder bq=new BooleanQuery.Builder();    bq.add(q,BooleanClause.Occur.SHOULD);    bq.add(new TermQuery(new Term("NEVER","MATCH")),BooleanClause.Occur.SHOULD);    q=bq.build();  }  CheckHits.checkHitCollector(random(),q,FIELD,searcher,expDocNrs);}  }
class C{  public String validate(){  String validMsg=Msg.parseTranslation(getCtx(),"@OK@");  getSchedule(true);  if (m_schedule.length == 0) {    if (!isValid())     setIsValid(true);    return validMsg;  }  if (m_schedule.length == 1) {    if (isValid())     setIsValid(false);    if (m_schedule[0].isValid()) {      m_schedule[0].setIsValid(false);      m_schedule[0].saveEx();    }    return "@Invalid@ @Count@ # = 1 (@C_PaySchedule_ID@)";  }  BigDecimal total=Env.ZERO;  for (int i=0; i < m_schedule.length; i++) {    BigDecimal percent=m_schedule[i].getPercentage();    if (percent != null)     total=total.add(percent);  }  boolean valid=total.compareTo(HUNDRED) == 0;  if (isValid() != valid)   setIsValid(valid);  for (int i=0; i < m_schedule.length; i++) {    if (m_schedule[i].isValid() != valid) {      m_schedule[i].setIsValid(valid);      m_schedule[i].saveEx();    }  }  if (valid)   return validMsg;  String msg="@Total@ = " + total + " - @Difference@ = "+ HUNDRED.subtract(total);  return Msg.parseTranslation(getCtx(),msg);}  }
class C{  public int currentSegment(double[] coords){  if (isDone()) {    throw new NoSuchElementException("flattening iterator out of bounds");  }  int type=holdType;  if (type != SEG_CLOSE) {    coords[0]=hold[holdIndex + 0];    coords[1]=hold[holdIndex + 1];    if (type != SEG_MOVETO) {      type=SEG_LINETO;    }  }  return type;}  }
class C{  protected boolean shouldIndent(){  return m_doIndent && (!m_ispreserve && !m_isprevtext) && m_elemContext.m_currentElemDepth > 0;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testGenerateCRL() throws Exception {  try {    CertificateFactory.getInstance("X.509").generateCRL((InputStream)null);    fail("CRLException was not thrown");  } catch (  CRLException e) {  }}  }
class C{  public static void addExtensionHeader(String headerName,String className){  nameMap.put(headerName.toLowerCase(),className);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private Connection connect() throws SQLException {  final String jdbcDrvJarPath=jdbcDrvJarTf.getText().trim();  final String jdbcDrvCls=jdbcDrvClsTf.getText();  final String jdbcUrl=jdbcUrlTf.getText();  String user=userTf.getText().trim();  String pwd=pwdTf.getText().trim();  final Properties jdbcInfo=new Properties();  if (!user.isEmpty())   jdbcInfo.put("user",user);  if (!pwd.isEmpty())   jdbcInfo.put("password",pwd);  return DbMetadataReader.getInstance().connect(jdbcDrvJarPath,jdbcDrvCls,jdbcUrl,jdbcInfo);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:01.525 -0400",hash_original_method="98E54B1AC20FAE9C9CBD9991BB145BD9",hash_generated_method="5F6B7801C5DA05C07AE3DD68FD690B91") static private String clean(String input){  StringBuilder out=new StringBuilder(input.length());  for (int i=0; i < input.length(); i++) {    char c=input.charAt(i);    if (c == '"') {      int j=input.indexOf('"',i + 1);      if (j == -1) {        out.append(input.substring(i,input.length()));        out.append('"');        break;      }      out.append(input.substring(i,j + 1));      i=j;    } else     if (c != ' ') {      out.append(Character.toUpperCase(c));    }  }  return out.toString();}  }
class C{  private void upload() throws Exception {  final String zookeeperUrl=topologyProperties.getProperty(KafkaWithZKComponent.ZOOKEEPER_PROPERTY);  try (CuratorFramework client=getClient(zookeeperUrl)){    client.start();    uploadGlobalConfig(client);    uploadProfilerConfig(client);  } }  }
class C{  public boolean canSerialize(Class<?> type){  return _serializerProvider.hasSerializerFor(copySerializationConfig(),type,_serializerFactory);}  }
class C{  public void clearSelection(){  partition.clearSelection();}  }
class C{  public int toUnsortedModelIndex(int index) throws IndexOutOfBoundsException {  int modelIndex=-1;  SortedListEntry entry=sortedModel.get(index);  modelIndex=entry.getIndex();  return modelIndex;}  }
class C{  public static KeyBag from(ICloud.MBSKey key,ByteString passcode) throws BadDataException {  logger.trace("<< from()");  KeyBagFactory factory=new KeyBagFactory(key,passcode).unlock();  logger.trace(">> from()");  return new KeyBag(factory.classKeys(),factory.attributes(),factory.uuid(),factory.type());}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private TextAttributeSet(Map<TextAttribute,Object> initialContents){  attributes=new HashMap<TextAttribute,Object>(initialContents);}  }
class C{  public static Iterator<Class<?>> nonindexedClasses(){  if (MASTER_CACHE == null) {    initialize();  }  if (MASTER_CACHE.isEmpty()) {    return Collections.emptyIterator();  }  return MASTER_CACHE.iterator();}  }
class C{  YearMonthDay(YearMonthDay partial,int[] values){  super(partial,values);}  }
class C{  public static void createTopic(Pubsub client,String fullTopicName) throws IOException {  try {    client.projects().topics().get(fullTopicName).execute();  } catch (  GoogleJsonResponseException e) {    if (e.getStatusCode() == HttpStatusCodes.STATUS_CODE_NOT_FOUND) {      Topic topic=client.projects().topics().create(fullTopicName,new Topic()).execute();      System.out.printf("Topic %s was created.\n",topic.getName());    }  }}  }
class C{  public static YesNo newInstance(String code){  final YesNo returnInstance=new YesNo();  returnInstance.setValue(code);  return returnInstance;}  }
class C{  public static void main(String[] args){  if (args == null || args.length != 1) {    System.out.println(("You need to specify the database configuration file. \n" + "It should contain the access credentials to you revision database in the following format: \n" + "  host=dbhost \n"+ "  db=revisiondb \n"+ "  user=username \n"+ "  password=pwd \n"+ "  language=english \n"+ "  output=outputFile \n"+ "  charset=UTF8 (optional)\n"+ "  pagebuffer=5000 (optional)\n"+ "  maxAllowedPackets=16760832 (optional)"));    throw new IllegalArgumentException();  } else {    Properties props=load(args[0]);    DatabaseConfiguration config=new DatabaseConfiguration();    config.setHost(props.getProperty("host"));    config.setDatabase(props.getProperty("db"));    config.setUser(props.getProperty("user"));    config.setPassword(props.getProperty("password"));    config.setLanguage(Language.valueOf(props.getProperty("language")));    String charset=props.getProperty("charset");    String pagebufferString=props.getProperty("pagebuffer");    int pageBuffer;    String maxAllowedPacketsString=props.getProperty("maxAllowedPackets");    long maxAllowedPackets;    try {      if (charset == null) {        charset="UTF-8";      }      if (pagebufferString != null) {        pageBuffer=Integer.parseInt(pagebufferString);      } else {        pageBuffer=5000;      }      if (maxAllowedPacketsString != null) {        maxAllowedPackets=Long.parseLong(maxAllowedPacketsString);      } else {        maxAllowedPackets=(16 * 1024 * 1023);      }      String output=props.getProperty("output");      File outfile=new File(output);      if (outfile.isDirectory()) {        try {          output=outfile.getCanonicalPath() + File.separatorChar + "templateInfo.sql";        } catch (        IOException e) {          output=outfile.getPath() + File.separatorChar + "templateInfo.sql";        }      }      String active_for_pages=props.getProperty(FILTERING_ACTIVE_FOR_PAGES);      String active_for_revisions=props.getProperty(FILTERING_ACTIVE_FOR_REVISIONS);      String useRevisionIterator=props.getProperty(USE_REVISION_ITERATOR);      GeneratorMode mode=new GeneratorMode();      if (active_for_pages.equals("true")) {        mode.active_for_pages=true;      }      if (active_for_revisions.equals("true")) {        mode.active_for_revisions=true;      }      if (useRevisionIterator.equals("true") || useRevisionIterator == null || useRevisionIterator.equals("")) {        mode.useRevisionIterator=true;      }      TemplateFilter pageFilter=new TemplateFilter(createSetFromProperty(props.getProperty(PAGES_WHITE_LIST)),createSetFromProperty(props.getProperty(PAGES_WHITE_PREFIX_LIST)),createSetFromProperty(props.getProperty(PAGES_BLACK_LIST)),createSetFromProperty(props.getProperty(PAGES_BLACK_PREFIX_LIST)));      TemplateFilter revisionFilter=new TemplateFilter(createSetFromProperty(props.getProperty(REVISIONS_WHITE_LIST)),createSetFromProperty(props.getProperty(REVISIONS_WHITE_PREFIX_LIST)),createSetFromProperty(props.getProperty(REVISIONS_BLACK_LIST)),createSetFromProperty(props.getProperty(REVISIONS_BLACK_PREFIX_LIST)));      WikipediaTemplateInfoGenerator generator=new WikipediaTemplateInfoGenerator(config,pageBuffer,charset,output,maxAllowedPackets,pageFilter,revisionFilter,mode);      generator.process();    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  @Subscribe(threadMode=ThreadMode.MAIN) public void onCustomObject(CustomObject customObject){  Toast.makeText(this,"Object: " + customObject.getName(),Toast.LENGTH_SHORT).show();}  }
class C{  public int newLocal(final Type type){  Object t;switch (type.getSort()) {case Type.BOOLEAN:case Type.CHAR:case Type.BYTE:case Type.SHORT:case Type.INT:    t=Opcodes.INTEGER;  break;case Type.FLOAT:t=Opcodes.FLOAT;break;case Type.LONG:t=Opcodes.LONG;break;case Type.DOUBLE:t=Opcodes.DOUBLE;break;case Type.ARRAY:t=type.getDescriptor();break;default :t=type.getInternalName();break;}int local=newLocalMapping(type);setLocalType(local,type);setFrameLocal(local,t);changed=true;return local;}  }
class C{  public synchronized void dispatchSVGLoadEvent() throws InterruptedException {  dispatchSVGLoadEvent(bridgeContext,scriptingEnvironment);  for (int i=0; i < secondaryScriptingEnvironments.length; i++) {    BridgeContext ctx=secondaryBridgeContexts[i];    if (!((SVGOMDocument)ctx.getDocument()).isSVG12()) {      continue;    }    ScriptingEnvironment se=secondaryScriptingEnvironments[i];    dispatchSVGLoadEvent(ctx,se);  }  secondaryBridgeContexts=null;  secondaryScriptingEnvironments=null;}  }
class C{  public void mouseReleased(MouseEvent e){  if (Debug.debugging("mousemode")) {    System.out.println(getID() + "|DefaultOverviewMouseMode.mouseReleased()");  }  Object obj=e.getSource();  if (!mouseSupport.fireMapMouseReleased(e)) {    if (!(obj == theMap) || !autoZoom || point1 == null) {      return;    }    Projection projection=theMap.getProjection();synchronized (this) {      point2=getRatioPoint(theMap,point1,e.getPoint());      int dx=Math.abs(point2.x - point1.x);      int dy=Math.abs(point2.y - point1.y);      if ((dx < 5) || (dy < 5)) {        if ((dx < 5) && (dy < 5)) {          Point2D llp=projection.inverse(e.getPoint());          overviewMapHandler.getControlledMapListeners().setCenter(llp);        }        theMap.repaint();        return;      }      Point2D ll1=projection.inverse(point1);      Point2D ll2=projection.inverse(point2);      float deltaDegrees;      int deltaPix;      dx=Math.abs(point2.x - point1.x);      dy=Math.abs(point2.y - point1.y);      if (dx < dy) {        float dlat=(float)Math.abs(ll1.getY() - ll2.getY());        deltaDegrees=dlat * 2;        deltaPix=overviewMapHandler.getSourceMap().getProjection().getHeight();      } else {        float dlon;        float lat1, lon1, lon2;        if (point1.x > point2.x) {          lat1=(float)ll1.getY();          lon1=(float)ll1.getX();          ll1.setLocation(ll2);          ll2.setLocation(lon1,lat1);        }        lon1=(float)ll1.getX();        lon2=(float)ll2.getX();        if (lon1 > lon2) {          dlon=(180 - lon1) + (180 + lon2);        } else {          dlon=lon2 - lon1;        }        deltaDegrees=dlon * 2;        deltaPix=overviewMapHandler.getSourceMap().getProjection().getWidth();      }      if (projection instanceof GeoProj) {        double pixPerDegree=((GeoProj)projection).getPlanetPixelCircumference() / 360;        double newScale=pixPerDegree / (deltaPix / deltaDegrees);        overviewMapHandler.getControlledMapListeners().setScale((float)newScale);      }      Point2D center=projection.inverse(point1.x,point1.y);      overviewMapHandler.getControlledMapListeners().setCenter(center);    }    cleanUp();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeclonetruecopytext.class,args);}  }
class C{  public boolean isShowGridY(){  return mShowGridY;}  }
class C{  public void testGetDigestAlgorithm(){  String mdName="SHA-1";  String mgfName="MGF1";  AlgorithmParameterSpec mgfSpec=MGF1ParameterSpec.SHA1;  PSource pSrc=PSource.PSpecified.DEFAULT;  OAEPParameterSpec ps=new OAEPParameterSpec(mdName,mgfName,mgfSpec,pSrc);  assertTrue("The returned value does not equal to the " + "value specified in the constructor.",ps.getDigestAlgorithm().equals(mdName));}  }
class C{  public final void readChar() throws IOException {  currInt=reader.read();  ch=(char)currInt;  if (ch == '\n') {    line++;  }}  }
class C{  private synchronized boolean removeMapping(Object key,Object value){  int hash=Collections.secondaryHash(key);  HashtableEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashtableEntry<K,V> e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if (e.hash == hash && e.key.equals(key)) {      if (!e.value.equals(value)) {        return false;      }      if (prev == null) {        tab[index]=e.next;      } else {        prev.next=e.next;      }      modCount++;      size--;      return true;    }  }  return false;}  }
class C{  public final GVector scale(double s){  double[] tmp=new double[length];  for (int i=0; i < length; i++) {    tmp[i]=values[i] * s;  }  return new GVector(tmp);}  }
class C{  public int[] f2eAll(){  return sentencePair.f2e(srcStartInclusive,srcEndExclusive);}  }
class C{  protected void addSeed(URI uri,String method){  String visitedURI;  try {    visitedURI=URLCanonicalizer.buildCleanedParametersURIRepresentation(uri,spider.getSpiderParam().getHandleParameters(),spider.getSpiderParam().isHandleODataParametersVisited());  } catch (  URIException e) {    return;  }synchronized (visitedGet) {    if (visitedGet.contains(visitedURI)) {      log.debug("URI already visited: " + visitedURI);      return;    } else {      visitedGet.add(visitedURI);    }  }  SpiderTask task=new SpiderTask(spider,null,uri,0,method);  spider.submitTask(task);  spider.notifyListenersFoundURI(uri.toString(),method,FetchStatus.SEED);}  }
class C{  public GuacamoleSecurityException(String message){  super(message);}  }
class C{  protected void addToPortMap(IOFSwitch sw,long mac,short vlan,short portVal){  Map<MacVlanPair,Short> swMap=macVlanToSwitchPortMap.get(sw);  if (vlan == (short)0xffff) {    vlan=0;  }  if (swMap == null) {    swMap=Collections.synchronizedMap(new LRULinkedHashMap<MacVlanPair,Short>(MAX_MACS_PER_SWITCH));    macVlanToSwitchPortMap.put(sw,swMap);  }  swMap.put(new MacVlanPair(mac,vlan),portVal);}  }
class C{  private static String pad(char c,int len){  char[] buf=new char[len];  Arrays.fill(buf,c);  return new String(buf);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (arrayTypeLiteral: ");  result.append(arrayTypeLiteral);  result.append(", definedTypingStrategy: ");  result.append(definedTypingStrategy);  result.append(')');  return result.toString();}  }
class C{  protected void selectLoco(int dccAddress){  idloco.setSelected(false);  List<RosterEntry> l=Roster.getDefault().matchingList(null,null,Integer.toString(dccAddress),null,null,null,null);  if (log.isDebugEnabled()) {    log.debug("selectLoco found " + l.size() + " matches");  }  if (l.size() > 0) {    RosterEntry r=l.get(0);    if (log.isDebugEnabled()) {      log.debug("Loco id is " + r.getId());    }    locoBox.setSelectedItem(r);  } else {    log.warn("Read address " + dccAddress + ", but no such loco in roster");    _statusLabel.setText(Bundle.getMessage("READ ADDRESS ") + dccAddress + Bundle.getMessage(", BUT NO SUCH LOCO IN ROSTER"));  }}  }
class C{  @SuppressWarnings("unchecked") public IdentityHashSet(){  delegate=new IdentityHashMap();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static JavaCompiler instance(Context context){  JavaCompiler instance=context.get(compilerKey);  if (instance == null)   instance=new JavaCompiler(context);  return instance;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:03.549 -0500",hash_original_method="7B8B743B7FBFF92D2151AB95EB2CD90A",hash_generated_method="7307204335977C474DD967607DEE4EA3") public ProgramStore create(){  mRS.validate();  int id=mRS.nProgramStoreCreate(mColorMaskR,mColorMaskG,mColorMaskB,mColorMaskA,mDepthMask,mDither,mBlendSrc.mID,mBlendDst.mID,mDepthFunc.mID);  ProgramStore programStore=new ProgramStore(id,mRS);  programStore.mDepthFunc=mDepthFunc;  programStore.mDepthMask=mDepthMask;  programStore.mColorMaskR=mColorMaskR;  programStore.mColorMaskG=mColorMaskG;  programStore.mColorMaskB=mColorMaskB;  programStore.mColorMaskA=mColorMaskA;  programStore.mBlendSrc=mBlendSrc;  programStore.mBlendDst=mBlendDst;  programStore.mDither=mDither;  return programStore;}  }
class C{  public void engineDeleteEntry(String alias) throws KeyStoreException {synchronized (entries) {    entries.remove(alias.toLowerCase(Locale.ENGLISH));  }}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public static OfbizUrlBuilder from(WebappInfo webAppInfo,Delegator delegator) throws WebAppConfigurationException, IOException, SAXException, GenericEntityException {  WebSiteProperties webSiteProps=null;  ControllerConfig config=null;  String servletPath=null;  if (webAppInfo != null) {    Assert.notNull("delegator",delegator);    String webSiteId=WebAppUtil.getWebSiteId(webAppInfo);    if (webSiteId != null) {      GenericValue webSiteValue=EntityQuery.use(delegator).from("WebSite").where("webSiteId",webSiteId).cache().queryOne();      if (webSiteValue != null) {        webSiteProps=WebSiteProperties.from(webSiteValue);      }    }    config=ConfigXMLReader.getControllerConfig(webAppInfo);    servletPath=WebAppUtil.getControlServletPath(webAppInfo);  }  if (webSiteProps == null) {    webSiteProps=WebSiteProperties.defaults();  }  return new OfbizUrlBuilder(config,webSiteProps,servletPath);}  }
class C{  public void damage(double value){  setValue(Math.max(0,getValue() - value));}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGraphPackage.TRANSITION__TARGET:    if (target != null)     msgs=((InternalEObject)target).eInverseRemove(this,SGraphPackage.VERTEX__INCOMING_TRANSITIONS,Vertex.class,msgs);  return basicSetTarget((Vertex)otherEnd,msgs);case SGraphPackage.TRANSITION__SOURCE:if (eInternalContainer() != null) msgs=eBasicRemoveFromContainer(msgs);return basicSetSource((Vertex)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  @Override protected void doBind() throws CommunicationException, InterruptedException {  try {synchronized (this) {      socket=new DatagramSocket(port,address);    }    dbgTag=makeDebugTag();  } catch (  SocketException e) {    if (e.getMessage().equals(InterruptSysCallMsg))     throw new InterruptedException(e.toString()); else {      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"doBind","cannot bind on port " + port);      }      throw new CommunicationException(e);    }  }}  }
class C{  public final boolean equals(Object other){  return this == other;}  }
class C{  public void paintScrollBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @MediumTest public void testSimpleCreate(){  createApplication();}  }
class C{  private static void registerDefaultCanonicalizers(){  registerCanonicalizer(Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS);  registerCanonicalizer(Canonicalizer.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);  registerCanonicalizer(Canonicalizer.ALGO_ID_C14N11_OMIT_COMMENTS);  registerCanonicalizer(Canonicalizer.ALGO_ID_C14N_PHYSICAL);  registerCanonicalizer(Canonicalizer.ALGO_ID_C14N_WITH_COMMENTS);  registerCanonicalizer(Canonicalizer.ALGO_ID_C14N_EXCL_WITH_COMMENTS);  registerCanonicalizer(Canonicalizer.ALGO_ID_C14N11_WITH_COMMENTS);}  }
class C{  public ActorRef sender(){  return actorScope.getSender();}  }
class C{  public static List<String> readLines(File file) throws IOException {  return readLines(file,Charset.defaultCharset());}  }
class C{  public Matrix4x3d translationRotateScaleMul(double tx,double ty,double tz,double qx,double qy,double qz,double qw,double sx,double sy,double sz,Matrix4x3dc m){  double dqx=qx + qx;  double dqy=qy + qy;  double dqz=qz + qz;  double q00=dqx * qx;  double q11=dqy * qy;  double q22=dqz * qz;  double q01=dqx * qy;  double q02=dqx * qz;  double q03=dqx * qw;  double q12=dqy * qz;  double q13=dqy * qw;  double q23=dqz * qw;  double nm00=sx - (q11 + q22) * sx;  double nm01=(q01 + q23) * sx;  double nm02=(q02 - q13) * sx;  double nm10=(q01 - q23) * sy;  double nm11=sy - (q22 + q00) * sy;  double nm12=(q12 + q03) * sy;  double nm20=(q02 + q13) * sz;  double nm21=(q12 - q03) * sz;  double nm22=sz - (q11 + q00) * sz;  double m00=nm00 * m.m00() + nm10 * m.m01() + nm20 * m.m02();  double m01=nm01 * m.m00() + nm11 * m.m01() + nm21 * m.m02();  m02=nm02 * m.m00() + nm12 * m.m01() + nm22 * m.m02();  this.m00=m00;  this.m01=m01;  double m10=nm00 * m.m10() + nm10 * m.m11() + nm20 * m.m12();  double m11=nm01 * m.m10() + nm11 * m.m11() + nm21 * m.m12();  m12=nm02 * m.m10() + nm12 * m.m11() + nm22 * m.m12();  this.m10=m10;  this.m11=m11;  double m20=nm00 * m.m20() + nm10 * m.m21() + nm20 * m.m22();  double m21=nm01 * m.m20() + nm11 * m.m21() + nm21 * m.m22();  m22=nm02 * m.m20() + nm12 * m.m21() + nm22 * m.m22();  this.m20=m20;  this.m21=m21;  double m30=nm00 * m.m30() + nm10 * m.m31() + nm20 * m.m32() + tx;  double m31=nm01 * m.m30() + nm11 * m.m31() + nm21 * m.m32() + ty;  m32=nm02 * m.m30() + nm12 * m.m31() + nm22 * m.m32() + tz;  this.m30=m30;  this.m31=m31;  properties=0;  return this;}  }
class C{  public static boolean isMediaRenderDevice(Device device){  if (device != null && MEDIARENDER.equalsIgnoreCase(device.getDeviceType())) {    return true;  }  return false;}  }
class C{  private void clearPropertyChangeListeners(){  for (  TreeElement<?,?> element : this.treeElementList) {    element.removePropertyChangeListener(this);    Object data=element.getData();    if (data instanceof IModelChangeSupport) {      IModelChangeSupport modelObject=(IModelChangeSupport)data;      modelObject.removePropertyChangeListener(element);    }  }  this.treeElementList.clear();  this.treeElementMap.clear();}  }
class C{  public Builder disableShortfallEvaluation(){  disableShortfallEvaluation=true;  return this;}  }
class C{  public int[] ts2Index(double[] series,Alphabet alphabet,int alphabetSize) throws Exception {  double[] cuts=alphabet.getCuts(alphabetSize);  int[] res=new int[series.length];  for (int i=0; i < series.length; i++) {    res[i]=num2index(series[i],cuts);  }  return res;}  }
class C{  public static boolean validSystemNameFormat(String systemName,char type){  Matcher matcher=getAllPattern().matcher(systemName);  if (!matcher.matches()) {    return false;  }  if (matcher.group(2).charAt(0) != type) {    log.error("type in " + systemName + " does not match "+ type);    return false;  }  Pattern p;  if (type == 'L') {    p=getLightPattern();  } else   if (type == 'T') {    p=getTurnoutPattern();  } else   if (type == 'H') {    p=getHeadPattern();  } else   if (type == 'S') {    p=getSensorPattern();  } else {    log.error("cannot match type in " + systemName + ", which is unexpected");    return false;  }  Matcher m2=p.matcher(systemName);  if (!m2.matches()) {    log.error("illegal system name format: " + systemName + " for type "+ type);    return (false);  }  int node=-1;  int bit=-1;  if (matcher.group(7) != null) {    int num=Integer.valueOf(matcher.group(7)).intValue();    if (num > 0) {      node=num / 1000;      bit=num % 1000;    } else {      log.error("invalid value in system name: " + systemName);      return false;    }  } else {    node=Integer.valueOf(matcher.group(4)).intValue();    bit=Integer.valueOf(matcher.group(6)).intValue();  }  if ((node < 1) || (node > 127)) {    log.error("invalid node number " + node + " in "+ systemName);    return false;  }  if ((type == 'T') || (type == 'H') || (type == 'L')) {    if (!((bit >= 101 && bit <= 124) || (bit >= 201 && bit <= 224) || (bit >= 301 && bit <= 324)|| (bit >= 401 && bit <= 424))) {      log.error("invalid bit number " + bit + " in "+ systemName);      return false;    }  } else {    assert type == 'S';    String subtype=matcher.group(5);    if (subtype == null) {      if ((bit < 1) || (bit > 224)) {        log.error("invalid bit number " + bit + " in "+ systemName);        return false;      } else {        return true;      }    }    subtype=subtype.toUpperCase();    if (subtype.equals("A")) {      if ((bit < 1) || (bit > 24)) {        log.error("invalid bit number " + bit + " in "+ systemName);        return false;      }    } else     if (subtype.equals("M")) {      if ((bit < 1) || (bit > 24)) {        log.error("invalid bit number " + bit + " in "+ systemName);        return false;      }    } else     if (subtype.equals("S")) {      if ((bit < 1) || (bit > 24)) {        log.error("invalid bit number " + bit + " in "+ systemName);        return false;      }    } else     if (subtype.equals("P")) {      if ((bit < 1) || (bit > 96)) {        log.error("invalid bit number " + bit + " in "+ systemName);        return false;      }    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.660 -0400",hash_original_method="C87C6DB5D39F6DF13239553E585618AB",hash_generated_method="2FA30129C9F981C834AD25D11A91AD17") protected void engineUpdate(byte[] b,int off,int len) throws SignatureException {  msgDigest.update(b,off,len);}  }
class C{  public static void checkLoggedIn(ServletContext servletContext) throws WebApplicationException {  Identity identity=new ServletInjector<Identity>().getManagedBean(servletContext,Identity.class);  if (identity == null || !identity.isLoggedIn()) {    throw new WebApplicationException(buildForbiddenResponse("Login Required"));  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ImPackage.IDENTIFIER_REF_IM__REWIRED_TARGET:    return basicSetRewiredTarget(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected boolean[] weightedInstancesHandler(){  boolean[] result=new boolean[2];  print("weighted instances scheme...");  if (getTestObject() instanceof WeightedInstancesHandler) {    println("yes");    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  private void replaceTop(int topOfStack){  stack[stackSize - 1]=topOfStack;}  }
class C{  private void createComputeProgram() throws IOException {  int program=glCreateProgram();  int cshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/hybridSsboUbo.glsl",GL_COMPUTE_SHADER);  int random=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/random.glsl",GL_COMPUTE_SHADER);  int randomCommon=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/randomCommon.glsl",GL_COMPUTE_SHADER,"330");  glAttachShader(program,cshader);  glAttachShader(program,random);  glAttachShader(program,randomCommon);  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.computeProgram=program;}  }
class C{  @DELETE @Path("downloads/{id}") @ApiOperation(value="Interrupts downloading") @ApiResponses(value={@ApiResponse(code=204,message="OK"),@ApiResponse(code=404,message="Downloading not found"),@ApiResponse(code=409,message="Downloading not in progress"),@ApiResponse(code=500,message="Server error")}) public Response stopDownload(@PathParam("id") @ApiParam(value="Download Id") String downloadId){  try {    facade.stopDownload();    return Response.status(Response.Status.NO_CONTENT).build();  } catch (  DownloadNotStartedException e) {    return handleException(e,Response.Status.CONFLICT);  }catch (  Exception e) {    return handleException(e);  }}  }
class C{  public static boolean isRememberWorkspace(){  return getNode().getBoolean(keyRememberWorkspace,false);}  }
class C{  public IndexShard shardSafe(int shardId){  IndexShard indexShard=shard(0);  if (indexShard == null) {    throw new ShardNotFoundException(new ShardId(index,0));  }  return indexShard;}  }
class C{  public static byte[] fromHex(String hex){  return Hex.decode(hex);}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  public static boolean verifyAsymm(X509Certificate certificate,SecurityAlgorithm algorithm,byte[] data,byte[] signature) throws ServiceResultException {  return getCryptoProvider().verifyAsymm(certificate.getPublicKey(),algorithm,data,signature);}  }
class C{  @Override public ImmutableSortedMap<K,V> build(){switch (size) {case 0:    return emptyMap(comparator);case 1:  return of(comparator,entries[0].getKey(),entries[0].getValue());default :return fromEntries(comparator,false,entries,size);}}  }
class C{  public Box(Position centerPosition,double northSouthRadius,double verticalRadius,double eastWestRadius,Angle heading,Angle tilt,Angle roll){  if (centerPosition == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (northSouthRadius <= 0 || eastWestRadius <= 0 || verticalRadius <= 0) {    String message=Logging.getMessage("generic.ArgumentOutOfRange","radius <= 0");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.centerPosition=centerPosition;  this.northSouthRadius=northSouthRadius;  this.verticalRadius=verticalRadius;  this.eastWestRadius=eastWestRadius;  this.heading=heading;  this.tilt=tilt;  this.roll=roll;  this.setUpGeometryCache();}  }
class C{  private static Pair<String,String> generateSignMask(final ITranslationEnvironment environment,final long offset,final String value,final OperandSize size,final List<ReilInstruction> instructions){  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(size));  final String shiftValue=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(size));  final String maskedMsb=environment.getNextVariableString();  final String msbInLsb=environment.getNextVariableString();  final String signMask=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(offset,size,value,size,msbMask,size,maskedMsb));  instructions.add(ReilHelpers.createBsh(offset + 1,size,maskedMsb,size,shiftValue,size,msbInLsb));  instructions.add(ReilHelpers.createSub(offset + 2,size,"0",size,msbInLsb,size,signMask));  return new Pair<String,String>(msbInLsb,signMask);}  }
class C{  public static boolean isNoteValid(String value){  return value == null || value.length() < 800 * 50;}  }
class C{  private boolean areTenantsIdentical(KeystoneTenant osTenant,TenantOrg coprhdTenant){  String osTenantName=OPENSTACK + " " + osTenant.getName();  if (!osTenantName.equals(coprhdTenant.getLabel())) {    return false;  }  if (!osTenant.getDescription().equals(coprhdTenant.getDescription())) {    return false;  }  return true;}  }
class C{  public static Time changeTimezone(MySQLConnection conn,Calendar sessionCalendar,Calendar targetCalendar,Time t,TimeZone fromTz,TimeZone toTz,boolean rollForward){  if ((conn != null)) {    if (conn.getUseTimezone() && !conn.getNoTimezoneConversionForTimeType()) {      Calendar fromCal=Calendar.getInstance(fromTz);      fromCal.setTime(t);      int fromOffset=fromCal.get(Calendar.ZONE_OFFSET) + fromCal.get(Calendar.DST_OFFSET);      Calendar toCal=Calendar.getInstance(toTz);      toCal.setTime(t);      int toOffset=toCal.get(Calendar.ZONE_OFFSET) + toCal.get(Calendar.DST_OFFSET);      int offsetDiff=fromOffset - toOffset;      long toTime=toCal.getTime().getTime();      if (rollForward) {        toTime+=offsetDiff;      } else {        toTime-=offsetDiff;      }      Time changedTime=new Time(toTime);      return changedTime;    } else     if (conn.getUseJDBCCompliantTimezoneShift()) {      if (targetCalendar != null) {        Time adjustedTime=new Time(jdbcCompliantZoneShift(sessionCalendar,targetCalendar,t));        return adjustedTime;      }    }  }  return t;}  }
class C{  public void start() throws JMSException {  if (destination == null && destinationName == null)   throw new JMSException("MessageDrivenContainer: destination not specified");  if (connectionFactoryBean == null)   throw new JMSException("MessageDrivenContainer: factory not set");  if (messageListener == null)   throw new JMSException("MessageDrivenContainer: messageListener not set");  for (int i=0; i < poolSize; i++) {    MessageConsumerSession s=createSession();    s.setMessageListener(messageListener);    s.setPassword(password);    s.setUser(user);    s.setDestination(destination);    s.setDestinationName(destinationName);    s.setAtomikosConnectionFactoryBean(connectionFactoryBean);    s.setDaemonThreads(daemonThreads);    s.setNotifyListenerOnClose(notifyListenerOnClose);    s.setMessageSelector(getMessageSelector());    s.setExceptionListener(exceptionListener);    s.setNoLocal(noLocal);    s.setSubscriberName(subscriberName);    if (getSubscriberName() != null)     s.setSubscriberName(getSubscriberName() + "-" + i);    s.setNoLocal(getNoLocal());    s.setClientID(clientID);    try {      s.startListening();    } catch (    Exception e) {      LOGGER.logFatal("Error starting pool",e);    }    sessions.add(s);  }  setMessageListener(messageListener);}  }
class C{  public boolean exists(){  return null != getTXState();}  }
class C{  private boolean isValid(){  if (!_parameters.hasParameter("mode") || (!"store_response_success".equals(_parameters.getParameterValue("mode")) && !"store_response_failure".equals(_parameters.getParameterValue("mode")))) {    _log.warn("Invalid mode value in store response: " + _parameters.getParameterValue("mode"));    return false;  }  Iterator it=_parameters.getParameters().iterator();  while (it.hasNext()) {    Parameter param=(Parameter)it.next();    String paramName=param.getKey();    if (!paramName.equals("mode") && !paramName.equals("error")) {      _log.warn("Invalid parameter name in store response: " + paramName);      return false;    }  }  return true;}  }
class C{  private List<T> applyPreferenceCriterion(List<T> solutionSet,Set<FitnessFunction<T>> uncovered_goals){  Set<T> isBest=new HashSet<T>();  for (  FitnessFunction<T> entry : uncovered_goals) {    double best_size=Double.MAX_VALUE;    double minimumValues=Double.MAX_VALUE;    T best=null;    for (    T solution : solutionSet) {      double value=solution.getFitness(entry);      double size=solution.size();      if (value < minimumValues || (value == minimumValues && size < best_size)) {        minimumValues=value;        best_size=size;        best=solution;      }    }    if (minimumValues == 0.0)     this.newCoveredGoals.put(entry,best);    isBest.add(best);  }  List<T> first_set=new ArrayList<T>();  for (  T solution : isBest) {    solution.setRank(0);    first_set.add(solution);  }  return first_set;}  }
class C{  private Set<String> findStorageViewNamesForInitiator(String clusterName,String initiatorName){  Set<String> viewNames=new HashSet<String>();  ClientResponse response=null;  URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_FIND_STORAGE_VIEW);  s_logger.info("Find storage view URI is {}",requestURI.toString());  Map<String,String> argsMap=new HashMap<String,String>();  argsMap.put(VPlexApiConstants.ARG_DASH_C,clusterName);  argsMap.put(VPlexApiConstants.ARG_DASH_I,initiatorName);  JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,false);  s_logger.info("Find storage view POST data is {}",postDataObject.toString());  response=_vplexApiClient.post(requestURI,postDataObject.toString());  String responseStr=response.getEntity(String.class);  s_logger.info("Find storage view response is {}",responseStr);  int status=response.getStatus();  response.close();  if (status != VPlexApiConstants.SUCCESS_STATUS) {    if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {      s_logger.info("Get storage views for initaitor is completing asynchronously");      responseStr=_vplexApiClient.waitForCompletion(response);      s_logger.info("Task Response is {}",responseStr);    } else {      throw VPlexApiException.exceptions.getStorageViewsFailed(String.format("Failed getting storage views: %s",status));    }  }  try {    String customData=VPlexApiUtils.getCustomDataFromResponse(responseStr);    s_logger.info("Custom data from find storage view is {}",customData);    String[] lines=customData.split("\n");    for (int i=1; i < lines.length; i++) {      String line=lines[i].replaceAll("^View ","").replaceAll("\\.$","");      viewNames.add(line);    }  } catch (  Exception e) {    throw VPlexApiException.exceptions.getStorageViewsFailed(String.format("Error processing storage views: %s",e.getMessage()));  }  return viewNames;}  }
class C{  @Override public void onCreate(Bundle icicle){  super.onCreate(icicle);  setContentView(R.layout.ocr_capture);  mPreview=(CameraSourcePreview)findViewById(R.id.preview);  mGraphicOverlay=(GraphicOverlay<OcrGraphic>)findViewById(R.id.graphicOverlay);  boolean autoFocus=getIntent().getBooleanExtra(AutoFocus,false);  boolean useFlash=getIntent().getBooleanExtra(UseFlash,false);  int rc=ActivityCompat.checkSelfPermission(this,Manifest.permission.CAMERA);  if (rc == PackageManager.PERMISSION_GRANTED) {    createCameraSource(autoFocus,useFlash);  } else {    requestCameraPermission();  }  gestureDetector=new GestureDetector(this,new CaptureGestureListener());  scaleGestureDetector=new ScaleGestureDetector(this,new ScaleListener());  Snackbar.make(mGraphicOverlay,"Tap to capture. Pinch/Stretch to zoom",Snackbar.LENGTH_LONG).show();}  }
class C{  public Paillier(int bitLengthVal,int certainty){  generateKey(bitLengthVal,certainty);}  }
class C{  public void chainShouldOptimize(boolean opt){  current.shouldOptimize=shouldOptimize() || opt;}  }
class C{  @SuppressWarnings("unchecked") public synchronized Object put(Object key,Object value,int action){  Object oldvalue=null;  if (value instanceof ProcessVar) {    oldvalue=get(key);    if (oldvalue != null && oldvalue instanceof ProcessVar) {      ((HashMap)oldvalue).putAll((Map)value);    } else {      oldvalue=super.put(key,value);    }  } else {    oldvalue=super.put(key,value);  }  if (oldvalue == null) {    if (value != null) {      action|=PvChangeEvent.PV_ADDED;      if (value instanceof ProcessVar) {        ((ProcessVar)value).addPvChangeListener(this);      }    }  } else {    if (!oldvalue.equals(value)) {      action|=PvChangeEvent.PV_MODIFIED;    } else {      PvChangeEvent lstChange=(PvChangeEvent)changes.get(key);      if (lstChange != null && (lstChange.getType() & PvChangeEvent.PV_MANUAL_MOD) != 0) {        action|=PvChangeEvent.PV_CONFIRMED;      }    }  }  firePvChanged(new PvChangeEvent(this,key,value,action));  return (oldvalue);}  }
class C{  public boolean hasStyleFields(){  return this.hasField("text") || this.hasField("bgColor") || this.hasField("textColor")|| this.hasField("color")|| this.hasField("displayMode");}  }
class C{  public void modifyEnvironmentBeforeSubmission(Environment environment){}  }
class C{  public boolean isChildOf(Node node1,Node node2){  for (  Object o : getEdges(node2)) {    Edge edge=(Edge)(o);    Node sub=Edges.traverseDirected(node2,edge);    if (sub == node1) {      return true;    }  }  return false;}  }
class C{  public static void search(final Window parent,final ComboBoxEditor editor,final ZyGraph graph,final GraphSearcher searcher,final String searchString,final boolean cycleBackwards,final boolean zoomToResult){  if (searcher.hasChanged() || !searchString.equals(searcher.getLastSearchString())) {    CSearchExecuter.startNewSearch(parent,editor,graph,searcher,searchString,zoomToResult);  } else   if (!searcher.getResults().isEmpty()) {    CSearchExecuter.cycleExistingSearch(parent,graph,searcher,cycleBackwards,zoomToResult);  }}  }
class C{  public boolean forEach(ByteProcedure procedure){  byte[] theElements=elements;  int theSize=size;  for (int i=0; i < theSize; )   if (!procedure.apply(theElements[i++]))   return false;  return true;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFontFaceSrcElement(prefix,(AbstractDocument)doc);}  }
class C{  private static byte[] encode(float[] min,float[] max){  checkArgs(min,max);  byte[] b=new byte[BYTES * 2 * min.length];  verifyAndEncode(min,max,b);  return b;}  }
class C{  public void addField(JDiffField field){  jDiffFields.add(field);}  }
class C{  @Override public OutputDistribution copy(){  OutputDistribution copy=new OutputDistribution(baseVar + primes);  for (  AnchoredRule rule : inputRules) {    copy.addAnchoredRule(rule);  }  return copy;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  initView();}  }
class C{  public Candidate extendPhrase(){  if (ranks[1] < phrases.size() - 1) {    return new Candidate(featureFunctions,sentence,hypotheses,phrases,future_delta,new int[]{ranks[0],ranks[1] + 1});  }  return null;}  }
class C{  protected void rehash(int newCapacity){  int oldCapacity=table.length;  long oldTable[]=table;  Object oldValues[]=values;  byte oldState[]=state;  long newTable[]=new long[newCapacity];  Object newValues[]=new Object[newCapacity];  byte newState[]=new byte[newCapacity];  this.lowWaterMark=chooseLowWaterMark(newCapacity,this.minLoadFactor);  this.highWaterMark=chooseHighWaterMark(newCapacity,this.maxLoadFactor);  this.table=newTable;  this.values=newValues;  this.state=newState;  this.freeEntries=newCapacity - this.distinct;  for (int i=oldCapacity; i-- > 0; ) {    if (oldState[i] == FULL) {      long element=oldTable[i];      int index=indexOfInsertion(element);      newTable[index]=element;      newValues[index]=oldValues[i];      newState[index]=FULL;    }  }}  }
class C{  public boolean isUnspecified(){  return UNSPECIFIED.equals(this);}  }
class C{  public Task<MigrationRestRep> resume(URI id){  return postTask(getIdUrl() + "/resume",id);}  }
class C{  public void disconnect(){  mContext.unbindService(mServiceConnection);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object obj=stack.pop();  Show s=getShowObj(obj);  if (s != null)   return s.getSubCategory();  SeriesInfo si=getSeriesInfoObj(obj);  return (si == null) ? "" : si.getSubCategory();}  }
class C{  public static Color fromBGR(final int bgr) throws IllegalArgumentException {  Validate.isTrue((bgr >> 24) == 0,"Extrenuous data in: ",bgr);  return fromBGR((bgr >> 16) & BIT_MASK,(bgr >> 8) & BIT_MASK,(bgr) & BIT_MASK);}  }
class C{  public void visit(XSSchemaSet s){  for (  XSSchema schema : s.getSchemas()) {    schema(schema);  }}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.getCamera().stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public void testWithoutValueField(){  converterLookup.registerConverter(new ToAttributedValueConverter(Software.class,mapper,reflectionProvider,converterLookup,null),0);  final Software software=new Software("Codehaus","XStream");  final StringWriter writer=new StringWriter();  final CompactWriter compactWriter=new CompactWriter(writer);  new TreeMarshaller(compactWriter,converterLookup,mapper).start(software,null);  compactWriter.flush();  assertEquals("<software vendor=\"Codehaus\" name=\"XStream\"/>",writer.toString());  final HierarchicalStreamReader reader=driver.createReader(new StringReader(writer.toString()));  assertEquals(software,new TreeUnmarshaller(null,reader,converterLookup,mapper).start(null));}  }
class C{  final public static boolean assertOffsetBits(final int offsetBits){  if (offsetBits < MIN_OFFSET_BITS || offsetBits > MAX_OFFSET_BITS) {    throw new IllegalArgumentException("offsetBits must be in [" + MIN_OFFSET_BITS + ":"+ MAX_OFFSET_BITS+ "], not: "+ offsetBits);  }  return true;}  }
class C{  public void close() throws IOException {  if (in != null) {    try {      if (usesDefaultDeflater) {        def.end();      }      in.close();    }  finally {      in=null;    }  }}  }
class C{  public static final Rect fromCenterExtent(ReadonlyVec2D center,Vec2D extent){  return new Rect(center.sub(extent),center.add(extent));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void addField(VEditor editor,GridField mField){  int AD_Tab_ID=mField.getIncluded_Tab_ID();  if (AD_Tab_ID != 0) {    CollapsiblePanel m_tab=new CollapsiblePanel("");    m_tabincludelist.put(AD_Tab_ID,m_tab);    m_main.add(m_tab,"newline, spanx, growx");    m_tab.setName("IncludedTab#" + AD_Tab_ID);    if (includedTabList.containsKey(AD_Tab_ID)) {      includeTab(includedTabList.get(AD_Tab_ID));    }    return;  }  CLabel label=VEditorFactory.getLabel(mField);  if (label == null && editor == null)   return;  boolean sameLine=mField.isSameLine();  String fieldGroup=mField.getFieldGroup();  String fieldGroupType=mField.getFieldGroupType();  if (Util.isEmpty(fieldGroup)) {    fieldGroup=m_oldFieldGroup;    fieldGroupType=m_oldFieldGroupType;  }  if (addGroup(fieldGroup,fieldGroupType)) {    if (X_AD_FieldGroup.FIELDGROUPTYPE_Collapse.equals(fieldGroupType)) {      CollapsiblePanel panel=(CollapsiblePanel)m_tablist.get(fieldGroup);      panel.getCollapsiblePane().setCollapsed(mField.getIsCollapsedByDefault());    }    sameLine=false;  } else {    fieldGroup=m_oldFieldGroup;    fieldGroupType=m_oldFieldGroupType;  }  String constraints="align trailing";  if (!sameLine) {    constraints+=", newline";  }  if (label == null) {    label=new CLabel("");    label.setName(mField.getColumnName());  }  if (mField.isCreateMnemonic())   setMnemonic(label,mField.getMnemonic());  if (fieldGroupType.equals(X_AD_FieldGroup.FIELDGROUPTYPE_Tab)) {    CPanel m_tab=(CPanel)m_tablist.get(fieldGroup);    m_tab.add(label,constraints);  } else   if (fieldGroupType.equals(X_AD_FieldGroup.FIELDGROUPTYPE_Collapse)) {    CollapsiblePanel m_tab=(CollapsiblePanel)m_tablist.get(fieldGroup);    m_tab.getCollapsiblePane().getContentPane().add(label,constraints);  } else {    m_main.add(label,constraints);  }  int currentWidth=label.getPreferredSize().width;  labelMinWidth=currentWidth > labelMinWidth ? currentWidth : labelMinWidth;  if (editor != null) {    Component field=(Component)editor;    constraints="growx, pushx";    if (mField.isLongField()) {      constraints+=mField.isLongField() ? ",spanx" : "";    }    if (wrap) {      constraints+=", wrap 0";    }    if (fieldGroupType.equals(X_AD_FieldGroup.FIELDGROUPTYPE_Tab)) {      CPanel m_tab=(CPanel)m_tablist.get(fieldGroup);      m_tab.add(field,constraints);    } else     if (fieldGroupType.equals(X_AD_FieldGroup.FIELDGROUPTYPE_Collapse)) {      CollapsiblePanel m_tab=(CollapsiblePanel)m_tablist.get(fieldGroup);      Component comp=(Component)editor;      comp.setMinimumSize(comp.getPreferredSize());      if (mField.getDisplayType() == DisplayType.Text || mField.getDisplayType() == DisplayType.Memo || mField.getDisplayType() == DisplayType.TextLong) {        Component component=(Component)editor;        component.setMinimumSize(component.getPreferredSize());      }      if (!mField.isLongField())       fieldMinWidth=field.getPreferredSize().width > fieldMinWidth ? field.getPreferredSize().width : fieldMinWidth;      m_tab.getCollapsiblePane().getContentPane().add(field,constraints);    } else {      m_main.add(field,constraints);      if (!mField.isLongField())       fieldMinWidth=field.getPreferredSize().width > fieldMinWidth ? field.getPreferredSize().width : fieldMinWidth;    }    if (label != null)     label.setLabelFor(field); else     if (mField.isCreateMnemonic())     setMnemonic(editor,mField.getMnemonic());  }}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.ACTION_DEFINITION;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docTypeNull=null;  Document docImp;  DOMImplementation domImpl;  DocumentType docType;  NamedNodeMap nodeMap;  Notation notation1;  Notation notation2;  Notation notationImp1;  Notation notationImp2;  Notation notationImpNew1;  Notation notationImpNew2;  String publicId1;  String publicId1Imp;  String publicId1NewImp;  String publicId2Imp;  String publicId2NewImp;  String systemId1Imp;  String systemId1NewImp;  String systemId2;  String systemId2Imp;  String systemId2NewImp;  doc=(Document)load("staffNS",true);  domImpl=doc.getImplementation();  docType=doc.getDoctype();  docImp=domImpl.createDocument("http://www.w3.org/DOM/Test","a:b",docTypeNull);  nodeMap=docType.getNotations();  assertNotNull("notationsNotNull",nodeMap);  notation1=(Notation)nodeMap.getNamedItem("notation1");  notation2=(Notation)nodeMap.getNamedItem("notation2");  notationImp1=(Notation)doc.importNode(notation1,true);  notationImp2=(Notation)doc.importNode(notation2,false);  notationImpNew1=(Notation)docImp.importNode(notation1,false);  notationImpNew2=(Notation)docImp.importNode(notation2,true);  publicId1=notation1.getPublicId();  publicId1Imp=notation1.getPublicId();  publicId1NewImp=notation1.getPublicId();  systemId1Imp=notation1.getSystemId();  systemId1NewImp=notation1.getSystemId();  publicId2Imp=notation2.getPublicId();  publicId2NewImp=notation2.getPublicId();  systemId2=notation2.getSystemId();  systemId2Imp=notation2.getSystemId();  systemId2NewImp=notation2.getSystemId();  assertEquals("documentimportnode22_N1PID",publicId1,publicId1Imp);  assertEquals("documentimportnode22_N1NPID",publicId1,publicId1NewImp);  assertNull("documentimportnode22_N1SID",systemId1Imp);  assertNull("documentimportnode22_N1NSID",systemId1NewImp);  assertEquals("documentimportnode22_N2SID",systemId2,systemId2Imp);  assertEquals("documentimportnode22_N2NSID",systemId2,systemId2NewImp);  assertNull("documentimportnode22_N2PID",publicId2Imp);  assertNull("documentimportnode22_N2NPID",publicId2Imp);}  }
class C{  public void buildGraphicsNode(BridgeContext ctx,Element e,GraphicsNode node){  initializeDynamicSupport(ctx,e,node);}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area){  draw(g2,area,null);}  }
class C{  public void insert(T value){  if (value == null) {    throw new IllegalArgumentException("BinaryTree cannot store 'null' values.");  }  BinaryNode<T> newNode=construct(value);  if (root == null) {    setRoot(newNode);    return;  }  BinaryNode<T> node=root;  BinaryNode<T> n;  while (true) {    int c=value.compareTo(node.value);    if (c < 0) {      if ((n=node.getLeftSon()) == null) {        node.left=newNode;        return;      } else {        node=n;      }    } else     if (c >= 0) {      if ((n=node.getRightSon()) == null) {        node.right=newNode;        return;      } else {        node=n;      }    }  }}  }
class C{  public static String generateSoundJSON(AbstractResourcePack pack){  JsonObject fakeSoundJSON=new JsonObject();  for (  String domain : (Set<String>)pack.getResourceDomains()) {    if (pack instanceof FileResourcePack) {      try {        ZipFile zipFile=new ZipFile(pack.resourcePackFile);        if (zipFile.getEntry("assets/" + domain + "/sounds/") != null) {          Enumeration zipEntries=zipFile.entries();          while (zipEntries.hasMoreElements()) {            String zipPath=((ZipEntry)zipEntries.nextElement()).getName();            String prefix="assets/" + domain + "/sounds/";            if (zipPath.startsWith(prefix) && !zipPath.equals(prefix)) {              String soundName=zipPath.replaceFirst(prefix,"").replaceFirst("[.][^.]+$","");              ZipEntry entry=zipFile.getEntry(zipPath);              if (!soundName.contains("/")) {                JsonObject sound=new JsonObject();                sound.addProperty("category","ambient");                JsonArray sounds=new JsonArray();                if (entry.isDirectory()) {                  Enumeration zipEntries2=zipFile.entries();                  while (zipEntries2.hasMoreElements()) {                    String zipPath2=((ZipEntry)zipEntries2.nextElement()).getName();                    if (zipPath2.startsWith(prefix + soundName + "/") && !zipFile.getEntry(zipPath2).isDirectory()) {                      String randomSoundName=zipPath2.replaceFirst(prefix + soundName + "/","");                      sounds.add(new JsonPrimitive(soundName + "/" + randomSoundName.replaceFirst("[.][^.]+$","")));                    }                  }                } else {                  sounds.add(new JsonPrimitive(soundName));                }                sound.add("sounds",sounds);                fakeSoundJSON.add(soundName,sound);              }            }          }        }      } catch (      Exception e) {        e.printStackTrace();        throw new ExceptionInInitializerError("Error generating fake sound JSON file.");      }    } else {      File folder=new File(pack.resourcePackFile,"assets/" + domain + "/sounds/");      if (folder.exists()) {        File[] listOfFiles=folder.listFiles();        for (int i=0; i < listOfFiles.length; i++) {          File listedFile=listOfFiles[i];          JsonObject sound=new JsonObject();          sound.addProperty("category","ambient");          JsonArray sounds=new JsonArray();          String listedName=listedFile.getName().replaceFirst("[.][^.]+$","");          if (listedFile.isFile()) {            sounds.add(new JsonPrimitive(listedName));          } else           if (listedFile.isDirectory()) {            for (            File soundItemFile : listedFile.listFiles())             sounds.add(new JsonPrimitive(listedName + "/" + soundItemFile.getName().replaceFirst("[.][^.]+$","")));          }          sound.add("sounds",sounds);          fakeSoundJSON.add(listedName,sound);        }      }    }  }  return fakeSoundJSON.toString();}  }
class C{  public void testGetWebModuleContextRootSingleWebModule() throws Exception {  String xml="<application>" + "  <module>" + "    <web>"+ "      <web-uri>webmodule.jar</web-uri>"+ "      <context-root>/webmodule</context-root>"+ "    </web>"+ "  </module>"+ "</application>";  ApplicationXml applicationXml=ApplicationXmlIo.parseApplicationXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),null);  assertEquals("/webmodule",applicationXml.getWebModuleContextRoot("webmodule.jar"));}  }
class C{  private void assertBounded(SortedSet<String> deserialized,boolean bounded){  if (bounded) {    try {      deserialized.add("e");      fail();    } catch (    IllegalArgumentException expected) {    }  } else {    assertTrue(deserialized.add("e"));    assertTrue(deserialized.remove("e"));  }}  }
class C{  private boolean startLocationUpdateIfEnabled(){  final LocationManager lm=mLocationManager;  final boolean attachLocation=mPreferences.getBoolean(KEY_ATTACH_LOCATION,false);  if (!attachLocation) {    lm.removeUpdates(this);    return false;  }  final Criteria criteria=new Criteria();  criteria.setAccuracy(Criteria.ACCURACY_FINE);  final String provider=lm.getBestProvider(criteria,true);  if (provider != null) {    mLocationText.setText(R.string.getting_location);    lm.requestLocationUpdates(provider,0,0,this);    final Location location;    if (lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {      location=lm.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);    } else {      location=lm.getLastKnownLocation(provider);    }    if (location != null) {      onLocationChanged(location);    }  } else {    Toast.makeText(this,R.string.cannot_get_location,Toast.LENGTH_SHORT).show();  }  return provider != null;}  }
class C{  public void testSomeSequences(){  assertTrue(asBytes("").isValidUtf8());  assertTrue(asBytes("\u0000abc\u007f").isValidUtf8());  assertTrue(asBytes("\u00a2\u00a2").isValidUtf8());  assertTrue(asBytes("\u020ac\u020ac").isValidUtf8());  assertTrue(asBytes("\u024B62\u024B62").isValidUtf8());  assertTrue(asBytes("a\u020ac\u00a2b\\u024B62u020acc\u00a2de\u024B62").isValidUtf8());  assertInvalidUtf8(-1,0,-1,0);}  }
class C{  public BruteForceNearestNeighbor(IMultiPoint[] points){  if (points == null || points.length == 0) {    throw new IllegalArgumentException("BruteForce requires at least one point.");  }  this.points=new ArrayList<double[]>();  for (int i=0; i < points.length; i++) {    this.points.add(points[i].raw());  }  this.results=points;}  }
class C{  public static void matchvPoolWithStoragePools(VirtualPool vpool,List<StoragePool> pools,DbClient dbClient,CoordinatorClient coordinator,String matcherGroupName,StringBuffer errorMessage){  List<StoragePool> filterPools=getMatchedPoolWithStoragePools(vpool,pools,VirtualPool.getProtectionSettings(vpool,dbClient),VirtualPool.getRemoteProtectionSettings(vpool,dbClient),VirtualPool.getFileRemoteProtectionSettings(vpool,dbClient),dbClient,coordinator,matcherGroupName,errorMessage);  updateInvalidAndMatchedPoolsForVpool(vpool,filterPools,pools,dbClient);}  }
class C{  public final AC grow(float w){  return grow(w,curIx);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean exists(){  return Files.exists(getFileAsPath());}  }
class C{  public AppsAction(String action,KeyStroke accelerator,String text){  this(action,accelerator,text,false);}  }
class C{  public SystemPermission retrievePermission(ModeledAuthenticatedUser user,ModeledUser targetUser,SystemPermission.Type type) throws GuacamoleException {  if (canReadPermissions(user,targetUser)) {    SystemPermissionModel model=getPermissionMapper().selectOne(targetUser.getModel(),type);    if (model == null)     return null;    return getPermissionInstance(model);  }  throw new GuacamoleSecurityException("Permission denied.");}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  private boolean isEnabled(final ChangeListManager changeListManager,final Project project,final VirtualFile vFile){  if (vFile.isDirectory()) {    return true;  }  final GitVcs vcs=GitVcs.getInstance(project);  if (!ProjectLevelVcsManager.getInstance(project).checkAllFilesAreUnder(vcs,new VirtualFile[]{vFile})) {    return false;  }  if (changeListManager.isUnversioned(vFile)) {    return false;  }  final Change change=changeListManager.getChange(vFile);  if (change != null && change.getType() == Change.Type.NEW) {    return false;  }  return true;}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  protected void themeSystemBars(String subreddit){  themeSystemBars(Palette.getSubredditStatusBarColor(subreddit));}  }
class C{  @Nullable public List<String> requestContainingBranches(@NotNull VirtualFile root,@NotNull Hash hash){  LOG.assertTrue(EventQueue.isDispatchThread());  List<String> refs=myCache.get(hash);  if (refs == null) {    myTaskExecutor.queue(new Task(root,hash,myCache,myGraph,myRefs));  }  return refs;}  }
class C{  public static RenderBuffer allocate(int numBytes){  return new RenderBuffer(numBytes);}  }
class C{  public void paintSliderTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void clear(FacesContext facesContext,Map<String,Object> viewMap){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"Clearing @ViewScoped beans from view map: {0}",viewMap);  }  if (contextManager != null) {    contextManager.clear(facesContext,viewMap);  }  destroyBeans(facesContext,viewMap);}  }
class C{  @Override public void sub(int size,Register dst,Register src1,Register src2,ShiftType shiftType,int shiftAmt){  int shift=clampShiftAmt(size,shiftAmt);  super.sub(size,dst,src1,src2,shiftType,shift);}  }
class C{  public void paintTextFieldBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static String insert(String src,String insert,int offset){  if (offset < 0) {    offset=0;  }  if (offset > src.length()) {    offset=src.length();  }  StringBuilder sb=new StringBuilder(src);  sb.insert(offset,insert);  return sb.toString();}  }
class C{  public static UncompressedBitmap extractBitmap(int[] colIndices,MatrixBlock rawblock){  if (colIndices.length == 1) {    return extractBitmap(colIndices[0],rawblock,!CompressedMatrixBlock.MATERIALIZE_ZEROS);  } else {    ReaderColumnSelection reader=null;    if (rawblock.isInSparseFormat() && CompressedMatrixBlock.TRANSPOSE_INPUT)     reader=new ReaderColumnSelectionSparse(rawblock,colIndices,!CompressedMatrixBlock.MATERIALIZE_ZEROS); else     reader=new ReaderColumnSelectionDense(rawblock,colIndices,!CompressedMatrixBlock.MATERIALIZE_ZEROS);    return extractBitmap(colIndices,rawblock,reader);  }}  }
class C{  public static void saveClose(InputStream in){  SafeClose.close(in);}  }
class C{  public void encryptBlock(byte[] data,int offset,byte[] dest,int destOffset){  Kuz128 x=new Kuz128();  x.setQ(0,ByteStrings.bytesToLong(data,offset));  x.setQ(1,ByteStrings.bytesToLong(data,offset + 8));  for (int i=0; i < 9; i++) {    x.setQ(0,x.getQ(0) ^ key.getK()[i].getQ(0));    x.setQ(1,x.getQ(1) ^ key.getK()[i].getQ(1));    for (int j=0; j < 16; j++) {      x.getB()[j]=KuznechikTables.kuz_pi[(x.getB()[j] & 0xFF)];    }    KuznechikMath.kuz_l(x);  }  ByteStrings.write(dest,destOffset,ByteStrings.longToBytes(x.getQ(0) ^ key.getK()[9].getQ(0)),0,8);  ByteStrings.write(dest,destOffset + 8,ByteStrings.longToBytes(x.getQ(1) ^ key.getK()[9].getQ(1)),0,8);}  }
class C{  public void reset(){  mColorBack=Color.WHITE;  mColorFront=Color.WHITE;  recycle();}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  public static Object[] toComponentString(PointLatLonTime point){  final Object[] components={point.getSpatialPoint().getLat(),point.getSpatialPoint().getLon(),point.getTimestamp()};  return components;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateattribute.class,args);}  }
class C{  private void addEntryHtmlToTreeSimple(Entry entry,StringBuilder result,List<EntryInfo> entryInfoList,int levelsOfChildrenToInclude,boolean showCheckboxes) throws IOException {  addEntryHtmlToTree(entry,result,entryInfoList,levelsOfChildrenToInclude,false,null,true,showCheckboxes);}  }
class C{  public boolean addUiAllocToInitLayout_ID(String strId){  Integer intId=mNumberToIDMap.inverse().get(strId);  UISootObject uiObj=mUiObjectTable.get(intId);  if (uiObj == null)   return false;  if (uiObj.childOf == UiType.FRAGMENT)   return addFragmentAllocToInitLayout_ID(strId);  if (uiObj.childOf == UiType.VIEW)   return addViewAllocToInitLayout_ID(strId);  return false;}  }
class C{  private String expandAffix(String pattern,StringBuffer buffer){  buffer.setLength(0);  for (int i=0; i < pattern.length(); ) {    char c=pattern.charAt(i++);    if (c == QUOTE) {      c=pattern.charAt(i++);switch (c) {case CURRENCY_SIGN:        if (i < pattern.length() && pattern.charAt(i) == CURRENCY_SIGN) {          ++i;          buffer.append(symbols.getInternationalCurrencySymbol());        } else {          buffer.append(symbols.getCurrencySymbol());        }      continue;case PATTERN_PERCENT:    c=symbols.getPercent();  break;case PATTERN_PER_MILLE:c=symbols.getPerMill();break;case PATTERN_MINUS:c=symbols.getMinusSign();break;}}buffer.append(c);}return buffer.toString();}  }
class C{  public void update(){  registerGlobalErrorCallback();}  }
class C{  public static int write(Sequence in,int fileType,OutputStream out) throws IOException {  List providers=getMidiFileWriters();  int bytesWritten=-2;  for (int i=0; i < providers.size(); i++) {    MidiFileWriter writer=(MidiFileWriter)providers.get(i);    if (writer.isFileTypeSupported(fileType,in)) {      bytesWritten=writer.write(in,fileType,out);      break;    }  }  if (bytesWritten == -2) {    throw new IllegalArgumentException("MIDI file type is not supported");  }  return bytesWritten;}  }
class C{  public FunctionTreeBlockNode(final BasicBlock basicBlock){  m_basicBlock=basicBlock;  setIcon(ICON);}  }
class C{  public static void resetDesc(AuditLog auditlog,ResourceBundle resb){  String origdesc=auditlog.getDescription();  try {    String[] parameters=origdesc.split("\\|");    if (parameters[0].equals(AuditLogManager.AUDITLOG_VERSION)) {      String formatDesc=resb.getString(parameters[1]);      int paramCount=parameters.length - 2;      int formatSpecCount=StringUtils.countMatches(formatDesc,"%s");      if (formatSpecCount != paramCount) {        log.warn("Unexpected number of parameters for audit log {}. Expect {}, {} given." + " Filling the gap will nulls.",new Object[]{parameters[1],formatSpecCount,paramCount});      }      String[] formatParams=Arrays.copyOfRange(parameters,2,formatSpecCount + 2);      String newdesc=String.format(formatDesc,formatParams);      auditlog.setDescription(newdesc);    }  } catch (  Exception e) {    log.error("can not reset description for {}",origdesc,e);  }}  }
class C{  public static void checkAllowedAccessToTld(Set<String> allowedTlds,String tld) throws EppException {  if (!allowedTlds.contains(tld)) {    throw new DomainFlowUtils.NotAuthorizedForTldException(tld);  }}  }
class C{  public boolean startsWith(String prefix){  if (TextUtils.isEmpty(prefix)) {    return false;  }  for (  String email : mEmails) {    if (email.startsWith(prefix)) {      return true;    }    if ((null != mMXIDsByElement) && mMXIDsByElement.containsKey(email)) {      MXID mxid=mMXIDsByElement.get(email);      if ((null != mxid.mMatrixId) && mxid.mMatrixId.startsWith("@" + prefix)) {        return true;      }    }  }  return false;}  }
class C{  public ObjectFactory(){}  }
class C{  public void close() throws IOException {  writer.close();}  }
class C{  public void execute() throws CFGBuilderException {  JavaClass jclass=classContext.getJavaClass();  Method[] methods=jclass.getMethods();  if (DEBUG) {    System.out.println("Class has " + methods.length + " methods");  }  for (  Method method : methods) {    callGraph.addNode(method);  }  if (DEBUG) {    System.out.println("Added " + callGraph.getNumVertices() + " nodes to graph");  }  for (  Method method : methods) {    MethodGen mg=classContext.getMethodGen(method);    if (mg == null) {      continue;    }    scan(callGraph.getNodeForMethod(method));  }  if (DEBUG) {    System.out.println("Found " + callGraph.getNumEdges() + " self calls");  }}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == SyntaxRelatedTElement.class) {switch (baseFeatureID) {case TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT:      return TypesPackage.TFUNCTION__AST_ELEMENT;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public InputOutput<T> seekFloor(IntsRef target) throws IOException {  this.target=target;  targetLength=target.length;  super.doSeekFloor();  return setResult();}  }
class C{  public void keyTyped(KeyEvent event){}  }
class C{  public static String readStringFromStream(InputStream stream) throws IOException {  ByteArrayOutputStream byteString=new ByteArrayOutputStream();  int c;  int i=0;  while ((c=stream.read()) != -1) {    byteString.write(c);    byte[] b=new byte[i + i];    int readBytes=stream.read(b,i,i);    for (int k=0; k < readBytes; k++) {      byteString.write(b[k + i]);    }    if (readBytes != i) {      i=i / 2;    } else {      i=i + 1;    }  }  return byteString.toString();}  }
class C{  private void lockUI(StackPane layer,Node... controls){  for (  Node control : controls)   control.setDisable(true);  layer.getChildren().add(pi);}  }
class C{  private Map<String,Configuration> readSharedConfigurationFromDisk() throws SAXException, ParserConfigurationException, TransformerFactoryConfigurationError, TransformerException {  String[] subdirectoryNames=getSubdirectories(configDirPath);  Map<String,Configuration> sharedConfiguration=new HashMap<String,Configuration>();  if (subdirectoryNames != null) {    for (    String subdirectoryName : subdirectoryNames) {      String fullpath=FilenameUtils.concat(configDirPath,subdirectoryName);      Configuration configuration=readConfiguration(subdirectoryName,fullpath);      sharedConfiguration.put(subdirectoryName,configuration);    }  }  return sharedConfiguration;}  }
class C{  public SmallMap(int maxElements){  this.maxElements=maxElements;}  }
class C{  public void shouldNotCancelCompletedExecution() throws Throwable {  Waiter waiter=new Waiter();  FailsafeFuture<String> future=Failsafe.with(new RetryPolicy()).with(executor).onComplete(null).get(null);  waiter.await(1000);  assertFalse(future.cancel(true));  assertFalse(future.isCancelled());  assertTrue(future.isDone());  assertEquals(future.get(),"test");}  }
class C{  private static int prevIndex(int i,int len){  return ((i - 1 >= 0) ? i - 1 : len - 1);}  }
class C{  public double mean(){  int size=values.size();  double vsum=0;  double wsum=0;  for (int i=0; i < size; i++) {    vsum+=values.get(i) * weights.get(i);    wsum+=weights.get(i);  }  return vsum / wsum;}  }
class C{  public Channel(ResultSet result) throws SQLException {  this.setId(result.getInt("id"));  this.setNodeId(result.getBytes("node_id"));  this.setKeyClient(ECKey.fromPublicOnly(result.getBytes("key_client")));  this.setKeyServer(ECKey.fromPrivate(result.getBytes("key_server")));  this.setKeyClientA(ECKey.fromPublicOnly(result.getBytes("key_client_a")));  this.setKeyServerA(ECKey.fromPrivate(result.getBytes("key_server_a")));  this.setMasterPrivateKeyClient(result.getBytes("master_priv_key_client"));  this.setClientChainDepth(result.getInt("client_chain_depth"));  this.setMasterPrivateKeyServer(result.getBytes("master_priv_key_server"));  this.setServerChainDepth(result.getInt("server_chain_depth"));  this.setServerChainChild(result.getInt("server_chain_child"));  this.setChannelTxVersion(result.getInt("channel_tx_version"));  this.setInitialAmountServer(result.getLong("initial_amount_server"));  this.setInitialAmountClient(result.getLong("initial_amount_client"));  this.setAmountServer(result.getLong("amount_server"));  this.setAmountClient(result.getLong("amount_client"));  this.setTimestampOpen(result.getInt("timestamp_open"));  this.setTimestampForceClose(result.getInt("timestamp_force_close"));  this.setAnchorTxHashClient(Sha256Hash.wrap(result.getBytes("anchor_tx_hash_client")));  this.setAnchorTxHashClient(Sha256Hash.wrap(result.getBytes("anchor_tx_hash_server")));  this.setAnchorSecretClient(result.getBytes("anchor_secret_client"));  this.setAnchorSecretServer(result.getBytes("anchor_secret_server"));  this.setAnchorSecretHashClient(result.getBytes("anchor_secret_hash_client"));  this.setAnchorSecretHashServer(result.getBytes("anchor_secret_hash_server"));  this.setAnchorRevocationClient(result.getBytes("anchor_revocation_client"));  this.setAnchorRevocationServer(result.getBytes("anchor_revocation_server"));  this.setAnchorRevocationHashClient(result.getBytes("anchor_revocation_hash_client"));  this.setAnchorRevocationHashServer(result.getBytes("anchor_revocation_hash_server"));  this.setEscapeTxClient(new Transaction(Constants.getNetwork(),result.getBytes("escape_tx_client")));  this.setEscapeTxServer(new Transaction(Constants.getNetwork(),result.getBytes("escape_tx_server")));  this.setFastEscapeTxClient(new Transaction(Constants.getNetwork(),result.getBytes("escape_fast_tx_client")));  this.setFastEscapeTxServer(new Transaction(Constants.getNetwork(),result.getBytes("escape_fast_tx_server")));  this.setEscapeTxSig(TransactionSignature.decodeFromBitcoin(result.getBytes("escape_tx_sig"),true));  this.setFastEscapeTxSig(TransactionSignature.decodeFromBitcoin(result.getBytes("escape_fast_tx_sig"),true));  this.setChannelTxSig(TransactionSignature.decodeFromBitcoin(result.getBytes("escape_fast_tx_sig"),true));  this.setChannelTxTempSig(TransactionSignature.decodeFromBitcoin(result.getBytes("escape_fast_tx_sig"),true));  this.setPhase(Phase.valueOf(result.getString("phase")));  this.setReady(Tools.intToBool(result.getInt("is_ready")));}  }
class C{  private static String standarizeType(TypeMirror type){switch (type.getKind()) {case ARRAY:    return standarizeType(((ArrayType)type).getComponentType()) + "[]";case TYPEVAR:  return ((TypeVariable)type).asElement().getSimpleName().toString();case DECLARED:{  return ((DeclaredType)type).asElement().getSimpleName().toString();}default :if (type.getKind().isPrimitive()) {return type.toString();}}ErrorReporter.errorAbort("StubUtil: unhandled type: " + type);return null;}  }
class C{  public <T extends DataObject>String checkDependencies(Class<T> clazz,URI id,boolean activeOnly){  WebResource rRoot=createRequest(DEPENDENCIES_URI + clazz.getName() + "/"+ id).queryParam("active_only",Boolean.toString(activeOnly));  rRoot.accept(MediaType.APPLICATION_XML);  try {    return addSignature(rRoot).get(String.class);  } catch (  UnauthorizedException e) {    throw GeoException.fatals.remoteVdcAuthorizationFailed(endPoint,e);  }catch (  GeoException e) {    throw e;  }catch (  Exception e) {    throw GeoException.fatals.unableConnect(endPoint,e);  }}  }
class C{  public static boolean isRedirection(int statusCode){  if (statusCode >= 300 && statusCode < 400) {    return true;  }  return false;}  }
class C{  static boolean isAccessible(Member m){  return m != null && Modifier.isPublic(m.getModifiers()) && !isSynthetic(m);}  }
class C{  public static GeoTimeSerie fillvalue(GeoTimeSerie gts,long location,long elevation,Object value){  GeoTimeSerie filled=gts.clone();  if (!isBucketized(filled) || null == value) {    return filled;  }  filled.setSizeHint(filled.bucketcount);  sort(filled);  int bucket=filled.bucketcount - 1;  int idx=0;  int nticks=filled.values;  while (bucket >= 0) {    long bucketts=filled.lastbucket - bucket * filled.bucketspan;    while ((idx < nticks && filled.ticks[idx] > bucketts) || (idx >= nticks && bucket >= 0)) {      setValue(filled,bucketts,location,elevation,value,false);      bucket--;      bucketts=filled.lastbucket - bucket * filled.bucketspan;    }    idx++;    bucket--;  }  return filled;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.790 -0400",hash_original_method="3F48DFDC97FCA92CC1A23D89E8613BB5",hash_generated_method="12F5183865AA505F07C9EA83B6C2B185") private void onPanDevicePropertyChanged(String deviceObjectPath,String[] propValues){  String name=propValues[0];  String address=mBluetoothService.getAddressFromObjectPath(deviceObjectPath);  if (address == null) {    Log.e(TAG,"onPanDevicePropertyChanged: Address of the remote device in null");    return;  }  if (DBG) {    log("Pan Device property changed: " + address + "  property: "+ name+ " value: "+ propValues[1]);  }  BluetoothDevice device=mAdapter.getRemoteDevice(address);  if (name.equals("Connected")) {    if (propValues[1].equals("false")) {      mBluetoothService.handlePanDeviceStateChange(device,BluetoothPan.STATE_DISCONNECTED,BluetoothPan.LOCAL_PANU_ROLE);    }  } else   if (name.equals("Interface")) {    String iface=propValues[1];    if (!iface.equals("")) {      mBluetoothService.handlePanDeviceStateChange(device,iface,BluetoothPan.STATE_CONNECTED,BluetoothPan.LOCAL_PANU_ROLE);    }  }}  }
class C{  public static String toString(Object value){  if (value == null) {    return null;  }  return value.toString();}  }
class C{  private int parseSlot(Element slotTag,Entity entity,int loc,int locAmmoCount){  String index=slotTag.getAttribute(INDEX);  String type=slotTag.getAttribute(TYPE);  String shots=slotTag.getAttribute(SHOTS);  String hit=slotTag.getAttribute(IS_HIT);  String destroyed=slotTag.getAttribute(IS_DESTROYED);  String repairable=(slotTag.getAttribute(IS_REPAIRABLE).equals("") ? "true" : slotTag.getAttribute(IS_REPAIRABLE));  String munition=slotTag.getAttribute(MUNITION);  String quirks=slotTag.getAttribute(QUIRKS);  String trooperMiss=slotTag.getAttribute(TROOPER_MISS);  String rfmg=slotTag.getAttribute(RFMG);  if ((index == null) || (index.length() == 0)) {    warning.append("Could not find index for slot.\n");    return locAmmoCount;  } else   if ((type == null) || (type.length() == 0)) {    warning.append("Could not find type for slot.\n");    return locAmmoCount;  } else {    int indexVal=-1;    try {      indexVal=Integer.parseInt(index);      indexVal-=1;    } catch (    NumberFormatException excep) {    }    if (index.equals(NA)) {      indexVal=IArmorState.ARMOR_NA;      if (entity instanceof Protomech) {        EquipmentType newLoad=EquipmentType.get(type);        if (newLoad instanceof AmmoType) {          int counter=-1;          Iterator<Mounted> ammo=entity.getAmmo().iterator();          while (ammo.hasNext() && (counter < locAmmoCount)) {            Mounted mounted=ammo.next();            if (mounted.getLocation() == loc) {              counter++;              if (counter == locAmmoCount) {                locAmmoCount++;                mounted.restore();                int shotsVal=-1;                try {                  shotsVal=Integer.parseInt(shots);                } catch (                NumberFormatException excep) {                }                if (shots.equals(NA)) {                  shotsVal=IArmorState.ARMOR_NA;                  warning.append("Expected to find number of " + "shots for ").append(type).append(", but found ").append(shots).append(" instead.\n");                } else                 if ((shotsVal < 0) || (shotsVal > 200)) {                  warning.append("Found invalid shots value " + "for slot: ").append(shots).append(".\n");                } else {                  mounted.changeAmmoType((AmmoType)newLoad);                  mounted.setShotsLeft(shotsVal);                }                break;              }            }          }        } else {          warning.append("XML file lists ").append(type).append(" equipment at location ").append(loc).append(".  XML parser expected ammo.\n");        }      }      return locAmmoCount;    } else     if ((indexVal < 0)) {      warning.append("Found invalid index value for slot: ").append(index).append(".\n");      return locAmmoCount;    }    if (indexVal > entity.getNumberOfCriticals(loc)) {      warning.append("The entity, ").append(entity.getShortName()).append(" does not have ").append(index).append(" slots in location ").append(loc).append(".\n");      return locAmmoCount;    }    boolean hitFlag=Boolean.parseBoolean(hit);    boolean destFlag=Boolean.parseBoolean(destroyed);    boolean repairFlag=Boolean.parseBoolean(repairable);    CriticalSlot slot=entity.getCritical(loc,indexVal);    if (slot == null) {      if (!type.equals(EMPTY)) {        warning.append("Could not find the ").append(type).append(" equipment that was expected at index ").append(indexVal).append(" of location ").append(loc).append(".\n");      }      return locAmmoCount;    }    if (slot.getType() == CriticalSlot.TYPE_SYSTEM) {      if (!type.equals(SYSTEM)) {        warning.append("XML file expects to find ").append(type).append(" equipment at index ").append(indexVal).append(" of location ").append(loc).append(", but Entity has a system.\n");      }    } else {      Mounted mounted=slot.getMount();      mounted.restore();      if ((null != quirks) && (quirks.trim().length() > 0)) {        StringTokenizer st=new StringTokenizer(quirks,"::");        while (st.hasMoreTokens()) {          String quirk=st.nextToken();          String quirkName=Crew.parseAdvantageName(quirk);          Object value=Crew.parseAdvantageValue(quirk);          try {            mounted.getQuirks().getOption(quirkName).setValue(value);          } catch (          Exception e) {            warning.append("Error restoring quirk: ").append(quirk).append(".\n");          }        }      }      if ((null != trooperMiss) && (trooperMiss.trim().length() > 0)) {        StringTokenizer st=new StringTokenizer(trooperMiss,"::");        int i=BattleArmor.LOC_TROOPER_1;        while (st.hasMoreTokens() && i <= BattleArmor.LOC_TROOPER_6) {          String tmiss=st.nextToken();          mounted.setMissingForTrooper(i,Boolean.parseBoolean(tmiss));          i++;        }      }      mounted.setDestroyed(hitFlag || destFlag);      mounted.setRepairable(repairFlag);      mounted.setRapidfire(Boolean.parseBoolean(rfmg));      if (mounted.getType() instanceof AmmoType) {        EquipmentType newLoad=EquipmentType.get(type);        if (newLoad instanceof AmmoType) {          int shotsVal=-1;          try {            shotsVal=Integer.parseInt(shots);          } catch (          NumberFormatException excep) {          }          if (shots.equals(NA)) {            shotsVal=IArmorState.ARMOR_NA;            warning.append("Expected to find number of shots for ").append(type).append(", but found ").append(shots).append(" instead.\n");          } else           if ((shotsVal < 0) || (shotsVal > 200)) {            warning.append("Found invalid shots value for slot: ").append(shots).append(".\n");          } else {            mounted.changeAmmoType((AmmoType)newLoad);            mounted.setShotsLeft(shotsVal);          }        } else {          warning.append("XML file expects ").append(type).append(" equipment at index ").append(indexVal).append(" of location ").append(loc).append(", but Entity has ").append(mounted.getType().getInternalName()).append("there .\n");        }      } else       if (!mounted.getType().getInternalName().equals(type)) {        warning.append("XML file expects ").append(type).append(" equipment at index ").append(indexVal).append(" of location ").append(loc).append(", but Entity has ").append(mounted.getType().getInternalName()).append("there .\n");      }      if (munition.length() > 0) {        EquipmentType munType=EquipmentType.get(munition);        if (munType instanceof AmmoType) {          mounted.getLinked().changeAmmoType((AmmoType)munType);        } else {          warning.append("XML file expects").append(" ammo for munition argument of").append(" slot tag.\n");        }      }    }    slot.setHit(hitFlag);    slot.setDestroyed(destFlag);    slot.setRepairable(repairFlag);  }  return locAmmoCount;}  }
class C{  public static boolean isEvenParityByCountingSetBits(long n){  int setBitsCount=0;  while (n > 0) {    if ((n & 1) == 1)     setBitsCount++;    n>>=1;  }  return setBitsCount % 2 == 0;}  }
class C{  public boolean match(StringLiteral node,Object other){  if (!(other instanceof StringLiteral)) {    return false;  }  StringLiteral o=(StringLiteral)other;  return safeEquals(node.getEscapedValue(),o.getEscapedValue());}  }
class C{  @Override public void addASIMessage(){  if (!hasCurrentError()) {    SyntaxErrorMessage message=new SyntaxErrorMessage("Automatically inserted semicolon",SEMICOLON_INSERTED);    setCurrentError(message);  }}  }
class C{  public static XTIFFDirectory create(SeekableStream stream,int directory) throws IOException {  return factory.createDirectory(stream,directory);}  }
class C{  public JSONArray put(Map<String,Object> value){  this.put(new JSONObject(value));  return this;}  }
class C{  public UnicodeEscaper(){  this(0,Integer.MAX_VALUE,true);}  }
class C{  void finishPacket(ByteBuffer buffer){  addTlv(buffer,DHCP_MESSAGE_TYPE,DHCP_MESSAGE_TYPE_ACK);  addTlv(buffer,DHCP_SERVER_IDENTIFIER,mServerIdentifier);  addTlv(buffer,DHCP_LEASE_TIME,mLeaseTime);  if (mLeaseTime != null) {    addTlv(buffer,DHCP_RENEWAL_TIME,Integer.valueOf(mLeaseTime.intValue() / 2));  }  addTlv(buffer,DHCP_SUBNET_MASK,mSubnetMask);  addTlv(buffer,DHCP_ROUTER,mGateway);  addTlv(buffer,DHCP_DOMAIN_NAME,mDomainName);  addTlv(buffer,DHCP_BROADCAST_ADDRESS,mBroadcastAddress);  addTlv(buffer,DHCP_DNS_SERVER,mDnsServers);  addTlvEnd(buffer);}  }
class C{  public void storeOffset(final int ref,final int startObjPtr,final int endObjPtr){  startRefs.put(ref,startObjPtr);  endRefs.put(ref,endObjPtr);}  }
class C{  protected float[] calcColBC(final int lindex,final int levels[][]){  float colBC[]=new float[levels[lindex + 1].length];  GraphNode n;  for (int i=0; i < levels[lindex + 1].length; i++) {    int sum=0;    n=m_nodes.get(levels[lindex + 1][i]);    for (    int[] edge : n.edges) {      if (edge[1] < 1) {        sum++;        try {          colBC[i]=colBC[i] + indexOfElementInLevel(edge[0],levels[lindex]) + 1;        } catch (        Exception ex) {          return null;        }      }    }    if (colBC[i] != 0) {      colBC[i]=colBC[i] / sum;    }  }  return colBC;}  }
class C{  protected IStructureComparator createChild(final File child){  return new NonWorkspaceFileNode(child);}  }
class C{  public static final double[][] plusEquals(final double[][] m1,final double[][] m2){  final int columndimension=getColumnDimensionality(m1);  assert (getRowDimensionality(m1) == getRowDimensionality(m2) && columndimension == getColumnDimensionality(m2)) : ERR_MATRIX_DIMENSIONS;  for (int i=0; i < m1.length; i++) {    for (int j=0; j < columndimension; j++) {      m1[i][j]+=m2[i][j];    }  }  return m1;}  }
class C{  public void resume(){  if (!isPause) {    return;  }  isPause=false;  final ArrayList<MessageHolder> cloneList=list.clone();  list.clearButHoldMessage();  for (  MessageHolder messageHolder : cloneList) {    messageHolder.resume();    handler.sendMessageDelayed(messageHolder.msg,messageHolder.delay);  }  logD("resume %d",cloneList.size());}  }
class C{  public void run(int numEpochs,int batchSize,SentenceLevelMetric<IString,String> scoreMetric,String corpusLevelMetricStr,int weightWriteOutInterval){  final int numThreads=decoder.getNumThreads();  Counter<String> currentWts=new ClassicCounter<>(wtsAccumulator);  wtsAccumulator.clear();  final int tuneSetSize=tuneSource.size();  final int[] indices=ArrayMath.range(0,tuneSetSize);  final int numBatches=(int)Math.ceil((double)indices.length / (double)batchSize);  final OnlineUpdateRule<String> updater=optimizer.newUpdater();  final UpdaterState initialState=OnlineTuner.loadUpdaterState(initialWtsFileName);  if (initialState != null && !discardInitialWeightState) {    updater.setState(initialState);    logger.info("Warm restart: loaded updater state for weights file: {}",initialWtsFileName);  }  final Runtime runtime=Runtime.getRuntime();  final MulticoreWrapper<ProcessorInput,ProcessorOutput> wrapper=new MulticoreWrapper<ProcessorInput,ProcessorOutput>(numThreads,new GradientProcessor(optimizer,scoreMetric,0),enforceStrictlySequential);  logger.info("Start of online tuning");  logger.info("Number of epochs: {}",numEpochs);  logger.info("Number of threads: {}",numThreads);  logger.info("Number of references: {}",numReferences);  int updateId=0;  double maxObjectiveValue=Double.NEGATIVE_INFINITY;  int maxObjectiveEpoch=-1;  for (int epoch=0; epoch < numEpochs; ++epoch) {    final long startTime=TimingUtils.startTime();    logger.info("Start of epoch: {}",epoch);    Map<Integer,Sequence<IString>> nbestLists=new HashMap<>(tuneSetSize);    if (createPseudoReferences)     updatePseudoReferences(epoch);    List<Sequence<IString>> prefixDecodingOutputs=outputPrefixDecoding ? new ArrayList<>(2 * tuneSetSize) : null;    if (randomPrefixes)     newRandomPrefixes(epoch == 0);    if (shuffleDev)     ArrayMath.shuffle(indices);    logger.info("Number of batches for epoch {}: {}",epoch,numBatches);    ParallelCorpus corpus=localTMTraining ? new ParallelCorpus() : null;    for (int t=0; t < numBatches; ++t) {      logger.info("Epoch {} batch {} memory free: {}  max: {}",epoch,t,runtime.freeMemory(),runtime.maxMemory());      int[] batch=makeBatch(indices,t,batchSize);      int inputId=(epoch * numBatches) + t;      TranslationModel<IString,String> localTM=localTMTraining && t > 0 ? getLocalTM(corpus,(DynamicTranslationModel<String>)decoder.getTranslationModel()) : null;      ProcessorInput input=makeInput(batch,inputId,currentWts,localTM);      wrapper.put(input);      logger.info("Threadpool.status: {}",wrapper);      if (enforceStrictlySequential)       wrapper.join(false);      updateId=update(currentWts,updateId,wrapper,updater,nbestLists,false,corpus,prefixDecodingOutputs);      if ((t + 1) % weightWriteOutInterval == 0) {        String filename=String.format("%s.%d.%d%s",outputWeightPrefix,epoch,t,IOTools.WEIGHTS_FILE_EXTENSION);        IOTools.writeWeights(filename,currentWts);      }    }    boolean isLastEpoch=epoch + 1 == numEpochs;    wrapper.join(isLastEpoch);    updateId=update(currentWts,updateId,wrapper,updater,nbestLists,true,corpus,prefixDecodingOutputs);    if (doParameterAveraging) {      currentWts=new ClassicCounter<String>(wtsAccumulator);      Counters.divideInPlace(currentWts,(epoch + 1) * numBatches);    }    String epochFilePrefix=String.format("%s.%d",outputWeightPrefix,epoch);    IOTools.writeWeights(epochFilePrefix + IOTools.WEIGHTS_FILE_EXTENSION,currentWts);    IOTools.serialize(epochFilePrefix + STATE_FILE_EXTENSION,updater.getState(),SerializationMode.BIN_GZ);    if (outputSingleBest) {      PrintStream ps=IOTools.getWriterFromFile(epochFilePrefix + ".trans");      IOTools.writeSingleBest(nbestLists,ps);      ps.close();    }    if (outputPrefixDecoding) {      PrintStream ps=IOTools.getWriterFromFile(epochFilePrefix + ".prefixTrans");      for (int i=0; i < prefixDecodingOutputs.size(); ++i)       ps.println(prefixDecodingOutputs.get(i).toString());      ps.flush();      ps.close();    }    double elapsedTime=TimingUtils.elapsedSeconds(startTime);    logger.info("Epoch {} elapsed time: {} seconds",epoch,elapsedTime);    double approxObjectiveValue=approximateObjective(nbestLists,epoch,corpusLevelMetricStr);    if (approxObjectiveValue > maxObjectiveValue)     maxObjectiveEpoch=epoch;    if (localTMTraining && localTMoutFile != "") {      DynamicTranslationModel<String> localTM=(DynamicTranslationModel<String>)getLocalTM(corpus,(DynamicTranslationModel<String>)decoder.getTranslationModel());      IOTools.serialize(localTMoutFile,localTM);    }  }  saveFinalWeights(currentWts,maxObjectiveEpoch,numEpochs);}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public static String toXml(Node node) throws Exception {  Source source=new DOMSource(node);  StringWriter writer=new StringWriter();  Result result=new StreamResult(writer);  Transformer t=TransformerFactory.newInstance().newTransformer();  t.transform(source,result);  return writer.toString();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:02.585 -0500",hash_original_method="4FB19D2B9D9DA541468809C3D1BCD49A",hash_generated_method="1CCC7F83B16C24862DDDC8F2F73E2FD5") public final void init(KeyStore ks,char[] password) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException {  spiImpl.engineInit(ks,password);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  int i;  for (i=0; i < ncolumns; i++) {    sb.append(column[i] == null ? "NULL" : column[i]);    sb.append('|');  }  sb.append('\n');  for (i=0; i < nrows; i++) {    int k;    String row[]=(String[])rows.elementAt(i);    for (k=0; k < ncolumns; k++) {      sb.append(row[k] == null ? "NULL" : row[k]);      sb.append('|');    }    sb.append('\n');  }  return sb.toString();}  }
class C{  public StoragePoolRestRep register(URI poolId,URI storageSystemId){  String registerUrl=PathConstants.STORAGE_POOL_BY_STORAGE_SYSTEM_URL + "/{poolId}/register";  return client.post(StoragePoolRestRep.class,registerUrl,storageSystemId,poolId);}  }
class C{  public final int[] toArray(){  int[] elements=new int[length];  int bite;  int copied=0;  while (copied < length) {    bite=Math.min(length - copied,0x400);    System.arraycopy(pages.get(copied >> 10),0,elements,copied,bite);    copied+=bite;  }  return elements;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (breakpoints == null) {    throw new NullPointerException();  }  if (splitNames == null) {    throw new NullPointerException();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.194 -0400",hash_original_method="C551D5FD0C0A2C72DAD755E48C68905F",hash_generated_method="413A64F040422761DF3E0A13371BE941") private final boolean parkAndCheckInterrupt(){  LockSupport.park(this);  return Thread.interrupted();}  }
class C{  public final Object generateDeviceGroupInElementsCIMWrapper(final Argument arg,final Map<String,Object> keyMap,int index){  @SuppressWarnings("unchecked") List<CIMObjectPath> deviceGroupPaths=(List<CIMObjectPath>)keyMap.get(arg.getValue());  CIMObjectPath deviceGroupPath=deviceGroupPaths.get(index);  CIMObjectPath[] pathArray=new CIMObjectPath[]{deviceGroupPath};  return new CIMArgument<Object>(arg.getName(),CIMDataType.getDataType(pathArray),pathArray);}  }
class C{  public void clearPrivateKey(){  priv=BigInteger.ZERO;  if (encryptedPrivateKey != null) {    encryptedPrivateKey.clear();  }}  }
class C{  public RemoteStateServiceImpl(final GenericDTOService<StateDTO> stateDTOGenericDTOService){  super(stateDTOGenericDTOService);}  }
class C{  public MapContent(Map content){  this.root=content;}  }
class C{  static String byteArrayToBase64(byte[] a){  return byteArrayToBase64(a,false);}  }
class C{  public boolean hasMoreArguments() throws SyntaxError {  int ch=sp.peek();  return (!(ch == 0 || ch == ')'));}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0].ordinal() >= State.main_region_B.ordinal() && stateVector[0].ordinal() <= State.main_region_B_subregion1_B1.ordinal();case main_region_B_subregion1_B1:return stateVector[0] == State.main_region_B_subregion1_B1;default :return false;}}  }
class C{  protected TupleQueryResult query(String query){  try {    ASTContainer astContainer=new Bigdata2ASTSPARQLParser().parseQuery2(query,null);    return ASTEvalHelper.evaluateTupleQuery(store(),astContainer,new QueryBindingSet(),null);  } catch (  MalformedQueryException|QueryEvaluationException e) {    throw new RuntimeException(e);  }}  }
class C{  static final byte[] doExpansion(Mac hmac,byte[] data,int length){  int iterations=(int)Math.ceil(length / (double)hmac.getMacLength());  byte[] expansion=new byte[0];  byte[] A=data;  for (int i=0; i < iterations; i++) {    A=hmac.doFinal(A);    expansion=ByteArrayUtils.concatenate(expansion,hmac.doFinal(ByteArrayUtils.concatenate(A,data)));  }  return ByteArrayUtils.truncate(expansion,length);}  }
class C{  public CompiledST compile(String srcName,String name,List<FormalArgument> args,String template,Token templateToken){  Compiler c=new Compiler(this);  return c.compile(srcName,name,args,template,templateToken);}  }
class C{  private FastBlurHelper(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:47.524 -0500",hash_original_method="F74095F651F3A7ACE8110967D615306B",hash_generated_method="D262C61D273102DA93E08958EA36A1F1") public static SignalStrength newFromBundle(Bundle m){  SignalStrength ret;  ret=new SignalStrength();  ret.setFromNotifierBundle(m);  return ret;}  }
class C{  public void layoutContainer(Container parent){  JRootPane root=(JRootPane)parent;  Rectangle b=root.getBounds();  Insets i=root.getInsets();  int nextY=0;  int w=b.width - i.right - i.left;  int h=b.height - i.top - i.bottom;  if (root.getLayeredPane() != null) {    root.getLayeredPane().setBounds(i.left,i.top,w,h);  }  if (root.getGlassPane() != null) {    root.getGlassPane().setBounds(i.left,i.top,w,h);  }  if (root.getWindowDecorationStyle() != JRootPane.NONE && (root.getUI() instanceof SeaGlassRootPaneUI)) {    JComponent titlePane=((SeaGlassRootPaneUI)root.getUI()).getTitlePane();    if (titlePane != null) {      Dimension tpd=titlePane.getPreferredSize();      if (tpd != null) {        int tpHeight=tpd.height;        titlePane.setBounds(0,0,w,tpHeight);        nextY+=tpHeight;      }    }  }  if (root.getJMenuBar() != null) {    boolean menuInTitle=(root.getClientProperty("JRootPane.MenuInTitle") == Boolean.TRUE);    Dimension mbd=root.getJMenuBar().getPreferredSize();    int x=menuInTitle ? 20 : 0;    root.getJMenuBar().setBounds(x,menuInTitle ? 0 : nextY,w,mbd.height);    root.getJMenuBar().setOpaque(false);    root.getJMenuBar().setBackground(transparentColor);    if (!menuInTitle) {      nextY+=mbd.height;    }  }  if (root.getContentPane() != null) {    root.getContentPane().getPreferredSize();    root.getContentPane().setBounds(0,nextY,w,h < nextY ? 0 : h - nextY);  }}  }
class C{  private static void SetByteArrayRegion(JNIEnvironment env,int arrayJREF,int startIndex,int length,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: SetByteArrayRegion  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    byte[] destinationArray=(byte[])env.getJNIRef(arrayJREF);    if ((startIndex < 0) || (startIndex + length > destinationArray.length)) {      env.recordException(new ArrayIndexOutOfBoundsException());      return;    }    Memory.memcopy(Magic.objectAsAddress(destinationArray).plus(startIndex),bufAddress,length);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public static void checkOnAutorizarDetalle(ConsultaVO consulta,ServiceClient user) throws ConsultaActionNotAllowedException {  if (consulta.getEstado() != ConsultasConstants.ESTADO_CONSULTA_SOLICITADA)   throw new ConsultaActionNotAllowedException(ArchivoErrorCodes.ERROR_AUTORIZACION_ESTADO_NO_VALIDO,Messages.getString(ConsultaActionNotAllowedException.XESTADO,user.getLocale()));}  }
class C{  public static boolean canMove(DownloadFileInfo downloadFileInfo){  if (!DownloadFileUtil.isLegal(downloadFileInfo)) {    return false;  }  if (isDownloadingStatus(downloadFileInfo)) {    return false;  }  return true;}  }
class C{  public AllocationCommands add(AllocationCommand... commands){  if (commands != null) {    this.commands.addAll(Arrays.asList(commands));  }  return this;}  }
class C{  public void tabsAllClosingEffect(long time){  boolean needAnimation=false;  if (mStackTabs != null) {    for (int i=0; i < mStackTabs.length; ++i) {      needAnimation|=!mStackTabs[i].isDying();      mStackTabs[i].setDying(true);    }  } else {    needAnimation=true;  }  if (needAnimation) {    mScrollOffsetForDyingTabs=mScrollOffset;    mSpacing=computeSpacing(0);    if (mStackTabs != null) {      boolean isRtl=!((mCurrentMode == Orientation.PORTRAIT) ^ LocalizationUtils.isLayoutRtl());      for (int i=0; i < mStackTabs.length; i++) {        StackTab tab=mStackTabs[i];        tab.setDiscardOriginY(0.f);        tab.setDiscardOriginX(isRtl ? 0.f : tab.getLayoutTab().getOriginalContentWidth());        tab.setDiscardFromClick(true);      }    }    startAnimation(time,OverviewAnimationType.DISCARD_ALL);  }  mIsDying=true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:29.506 -0500",hash_original_method="AE0E913F9E3F8804DBC653BF8673EC2F",hash_generated_method="4BD76B76AD1D7ED6C7D4EA6886F19CF2") public void onCalling(SipSession session){}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  public void onKill(Player player){  getAndCheckAchievementsInCategory(player,Category.FIGHTING);}  }
class C{  public CToolbarSearchPanel(final ZyGraph graph){  super(new BorderLayout());  m_searchPanel=new CGraphSearchPanel(graph);  m_settings=graph.getSettings();  m_settings.getSearchSettings().addListener(m_internalSearchListener);  add(m_searchPanel);}  }
class C{  public T caseTarget(Target object){  return null;}  }
class C{  public Plus(){  super("basic.addition",FunctionDescription.UNFIXED_NUMBER_OF_ARGUMENTS,Ontology.ATTRIBUTE_VALUE);}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  protected static EventListener removeInternal(EventListener l,EventListener oldl){  if (l == oldl || l == null) {    return null;  } else   if (l instanceof DnDEventMulticaster) {    return ((DnDEventMulticaster)l).remove(oldl);  } else {    return l;  }}  }
class C{  public static Calendar toCalendar(final String iso8601string) throws ParseException {  Calendar calendar=GregorianCalendar.getInstance();  String s=iso8601string.replace("Z","+00:00");  try {    s=s.substring(0,22) + s.substring(23);  } catch (  IndexOutOfBoundsException e) {    throw new org.apache.http.ParseException();  }  Date date=null;  try {    date=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").parse(s);  } catch (  java.text.ParseException e) {    e.printStackTrace();  }  calendar.setTime(date);  return calendar;}  }
class C{  public void load(InputStream inStream) throws IOException {  Properties properties=new Properties();  properties.load(inStream);  for (  Map.Entry<Object,Object> property : properties.entrySet()) {    String handleId=(String)property.getKey();    String value=(String)property.getValue();    PropertyTable handleProperties=new PropertyTable();    JSONObject jsonObject=(JSONObject)JSONValue.parse(value);    if (jsonObject != null) {      handleProperties.putAll(jsonObject);    }    Handle handle=new Handle();    handle.setId(handleId);    handle.setProperties(handleProperties);    handles.put(handleId,handle);  }}  }
class C{  public void addAndroidEventListener(AndroidEventListener listener){synchronized (androidEventListeners) {    androidEventListeners.add(listener);  }}  }
class C{  public static AxSf initInOrOutFolder(User user,AxSf axsfQ){  AxSf newAxSF=null;  if (axsfQ instanceof AxSfIn) {    newAxSF=new AxSfIn();    newAxSF.setLiteralBookType(RBUtil.getInstance(user.getLocale()).getProperty(Keys.I18N_BOOKUSECASE_NODE_INBOOK_NAME));  } else {    newAxSF=new AxSfOut();    newAxSF.setLiteralBookType(RBUtil.getInstance(user.getLocale()).getProperty(Keys.I18N_BOOKUSECASE_NODE_OUTBOOK_NAME));  }  return newAxSF;}  }
class C{  @Override public int hashCode(){  return value ? Boolean.TRUE.hashCode() : Boolean.FALSE.hashCode();}  }
class C{  private void outputPattern(final JCas jCas,final PatternExtract pattern){  final Pattern a=new Pattern(jCas);  a.setBegin(pattern.getStart());  a.setEnd(pattern.getEnd());  a.setSource(pattern.getFrom());  a.setTarget(pattern.getTo());  final List<WordToken> tokens=pattern.getWordTokens();  final FSArray array=new FSArray(jCas,tokens.size());  int i=0;  for (  final WordToken w : tokens) {    array.set(i,w);    i++;  }  a.setWords(array);  addToJCasIndex(a);}  }
class C{  @Around("execution(* org.yes.cart.service.domain.impl.ManagerServiceImpl.resetPassword(..))") public Object doResetPassword(final ProceedingJoinPoint pjp) throws Throwable {  final Manager manager=(Manager)pjp.getArgs()[0];  setNewPassword(manager);  return pjp.proceed();}  }
class C{  private boolean isFirstElemHTML(){  boolean isHTML;  isHTML=getLocalNameUnknown(m_firstElementName).equalsIgnoreCase("html");  if (isHTML && m_firstElementURI != null && !EMPTYSTRING.equals(m_firstElementURI)) {    isHTML=false;  }  if (isHTML && m_namespacePrefix != null) {    final int max=m_namespacePrefix.size();    for (int i=0; i < max; i++) {      final String prefix=(String)m_namespacePrefix.elementAt(i);      final String uri=(String)m_namespaceURI.elementAt(i);      if (m_firstElementPrefix != null && m_firstElementPrefix.equals(prefix) && !EMPTYSTRING.equals(uri)) {        isHTML=false;        break;      }    }  }  return isHTML;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"xor");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a xor instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree targetOperand=operands.get(0);  final IOperandTree sourceOperand=operands.get(1);  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  final OperandSize size=targetResult.getSize();  final String sourceRegister=sourceResult.getRegister();  final String targetRegister=targetResult.getRegister();  final String xorResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createXor(offset,size,sourceRegister,size,targetRegister,size,xorResult));  Helpers.generateBinaryOperationFlags(environment,offset + 1,xorResult,size,instructions);  offset=baseOffset + instructions.size();  Helpers.writeBack(environment,offset,targetOperand,xorResult,size,targetResult.getAddress(),targetResult.getType(),instructions);}  }
class C{  public void deregister(EcosLocoAddress s){  s.removePropertyChangeListener(this);  String ecosObject=s.getEcosObject();  int oldsize=_tecos.size();  _tecos.remove(ecosObject);  firePropertyChange("length",Integer.valueOf(oldsize),Integer.valueOf(_tecos.size()));  int dccAddress=s.getNumber();  oldsize=_tdcc.size();  _tdcc.remove(dccAddress);  firePropertyChange("length",Integer.valueOf(oldsize),Integer.valueOf(_tdcc.size()));  EcosMessage m=new EcosMessage("release(" + ecosObject + ", view)");  tc.sendEcosMessage(m,this);}  }
class C{  public static void checkFieldSignature(final String signature){  int pos=checkFieldTypeSignature(signature,0);  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  public T caseCharacterClassRange(CharacterClassRange object){  return null;}  }
class C{  public static void dequeueAndStopAll(){synchronized (lock) {    if (daemons != null) {      for (      HadoopDaemon daemon : daemons)       daemon.interrupt();      daemons=null;    }  }}  }
class C{  private void initRoutingRules(){  JsonObject rules=new JsonObject();  rules=TestUtils.addRoutingRuleMainStorage(rules);  rules=TestUtils.addRoutingRuleHooks(rules);  TestUtils.putRoutingRules(rules);}  }
class C{  @SuppressWarnings("MethodMayBeStatic") @NotNull public Pair<JavadocParameterInfo,List<JavadocParameterInfo>> parse(@NotNull PsiFile psiFile,@NotNull Editor editor,int offset){  List<JavadocParameterInfo> result=new ArrayList<JavadocParameterInfo>();  final PsiElement elementAtCaret=psiFile.findElementAt(offset);  if (elementAtCaret == null) {    return EMPTY;  }  PsiDocTag tag=PsiTreeUtil.getParentOfType(elementAtCaret,PsiDocTag.class);  if (tag == null) {    if (elementAtCaret instanceof PsiWhiteSpace) {      for (PsiElement e=elementAtCaret.getPrevSibling(); e != null && tag == null; e=e.getPrevSibling()) {        tag=PsiTreeUtil.getParentOfType(e,PsiDocTag.class,false);        if (e instanceof PsiWhiteSpace || (e instanceof PsiDocToken && ((PsiDocToken)e).getTokenType() == JavaDocTokenType.DOC_COMMENT_LEADING_ASTERISKS)) {          continue;        }        break;      }    }  }  if (tag == null) {    return EMPTY;  }  JavadocParameterInfo anchorInfo=parse(tag,editor);  if (anchorInfo == null) {    return EMPTY;  }  for (PsiElement e=tag.getPrevSibling(); e != null; e=e.getPrevSibling()) {    JavadocParameterInfo info=parse(e,editor);    if (info == null) {      break;    }    result.add(0,info);  }  result.add(anchorInfo);  for (PsiElement e=tag.getNextSibling(); e != null; e=e.getNextSibling()) {    JavadocParameterInfo info=parse(e,editor);    if (info == null) {      break;    }    result.add(info);  }  return Pair.create(anchorInfo,result);}  }
class C{  public Task<?> deactivateAsync(){  return Task.done();}  }
class C{  public LinkedBlockingQueue initializeBuffer(int capacity){  return new LinkedBlockingQueue<TransactionEvent>(capacity);}  }
class C{  public ASTFunNode(Parser p,int id){  super(p,id);}  }
class C{  public Boolean isTLS12(){  return tls12;}  }
class C{  public void updateFromResource(){  for (  String resource : resources) {    InputStream is=ClassLoader.getSystemResourceAsStream(resource);    LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> parseResult=parse(is);    for (    EntryType type : myMap.keySet()) {      LinkedHashMap<String,ConfigEntry> dataMappings=myMap.get(type);      LinkedHashMap<String,ConfigEntry> resourceMappings=parseResult.get(type);      LinkedHashMap<String,ConfigEntry> tempMappings=new LinkedHashMap<String,ConfigEntry>();      LinkedHashSet<String> keys=new LinkedHashSet<String>();      keys.addAll(dataMappings.keySet());      keys.addAll(resourceMappings.keySet());      for (      String key : keys) {        if (resourceMappings.containsKey(key)) {          tempMappings.put(key,resourceMappings.get(key));        } else {          tempMappings.put(key,dataMappings.get(key));        }      }      myMap.put(type,tempMappings);    }  }}  }
class C{  public form(Element element){  addElement(element);}  }
class C{  public static int findNextCharacterInclusive(String text,int column){  MatchResult result=RegExpUtils.findMatchAfterIndex(UnicodeUtils.regexpNotMarkOrOtherExcludingTabAndNewline,text,column - 1);  return result == null ? column : result.getIndex();}  }
class C{  public T longClicked(OnLongClickListener listener){  if (view != null) {    view.setOnLongClickListener(listener);  }  return self();}  }
class C{  protected BranchGroup wrapModelForNewEdge(Edge edge){  LocationWrapper newwrapper=new LocationWrapper(edge.info,edge,this);  Portrayal p=getPortrayalForObject(newwrapper);  if (!(p instanceof SimpleEdgePortrayal3D))   throw new RuntimeException("Unexpected Portrayal " + p + " for object "+ edge+ " -- expected a SimpleEdgePortrayal3D");  SimpleEdgePortrayal3D portrayal=(SimpleEdgePortrayal3D)p;  portrayal.setCurrentFieldPortrayal(this);  TransformGroup localTG=portrayal.getModel(newwrapper,null);  localTG.setCapability(Group.ALLOW_CHILDREN_READ);  localTG.setUserData(newwrapper);  BranchGroup localBG=new BranchGroup();  localBG.setCapability(BranchGroup.ALLOW_CHILDREN_READ);  localBG.setCapability(BranchGroup.ALLOW_DETACH);  localBG.addChild(localTG);  localBG.setUserData(newwrapper);  return localBG;}  }
class C{  public int indexTableSize(){  return this.internalReadData().readULongAsInt(Offset.bitmapSizeTable_indexTableSize.offset);}  }
class C{  boolean isUpdate(){  return update;}  }
class C{  private static void pushTransactionStartStamp(Transaction t){  Map<Transaction,Timestamp> map=suspendedTxStartStamps.get();  Timestamp stamp=transactionStartStamp.get();  if (stamp != null) {    map.put(t,stamp);  } else {    Debug.logError("Error in transaction handling - no start stamp to push.",module);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private String lookupLocalAddress(){  long timeout=120 * 1000L;  long expireTime=CurrentTime.currentTime() + timeout;  String address;  while ((address=allocateLocalAddress()) == null && CurrentTime.currentTime() < expireTime) {    try {      Thread.sleep(1000);    } catch (    Exception e) {    }  }  if (address == null) {    throw new ConfigException(L.l("Cannot find an internal local IP address for server {0}, external IP {1} within 120s." + " 'external-address=true' is used for cloud networks where the internal address is allocated dynamically." + " Check that the persistent address has been assigned in the cloud configuration or DNS.",_serverBartender.getId(),_serverBartender.getAddress()));  }  return address;}  }
class C{  public static float invSqrt(float fValue){  return (float)(1.0f / Math.sqrt(fValue));}  }
class C{  public Spider scheduler(Scheduler scheduler){  return setScheduler(scheduler);}  }
class C{  @Override public void cleanAll(){  clean(-1);}  }
class C{  public static TimingSpecifier[] parseTimingSpecifierList(TimedElement owner,boolean isBegin,String spec,boolean useSVG11AccessKeys,boolean useSVG12AccessKeys){  TimingSpecifierListParser p=new TimingSpecifierListParser(useSVG11AccessKeys,useSVG12AccessKeys);  TimingSpecifierListProducer pp=new TimingSpecifierListProducer(owner,isBegin);  p.setTimingSpecifierListHandler(pp);  p.parse(spec);  TimingSpecifier[] specs=pp.getTimingSpecifiers();  return specs;}  }
class C{  public void paint(Graphics2D g2D,int pageNo,Point2D pageStart,Properties ctx,boolean isView){  if (m_image == null)   return;  Point2D.Double location=getAbsoluteLocation(pageStart);  int x=(int)location.x;  if (MPrintFormatItem.FIELDALIGNMENTTYPE_TrailingRight.equals(p_FieldAlignmentType))   x+=p_maxWidth - p_width; else   if (MPrintFormatItem.FIELDALIGNMENTTYPE_Center.equals(p_FieldAlignmentType))   x+=(p_maxWidth - p_width) / 2;  int y=(int)location.y;  AffineTransform transform=new AffineTransform();  transform.translate(x,y);  transform.scale(m_scaleFactor,m_scaleFactor);  g2D.drawImage(m_image,transform,this);}  }
class C{  public boolean isNegative(){  return negative;}  }
class C{  public void close() throws IOException {  if (finished)   throw new DccException(DccException.Reason.ChatNotConnected,user,"Chat has already finished");  finished=true;  socket.close();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public double cleanPrice(final double yield,final DayCounter dc,final Compounding comp,final Frequency freq,Date settlementDate){  if (settlementDate.isNull()) {    settlementDate=settlementDate();  }  return dirtyPrice(yield,dc,comp,freq,settlementDate) - accruedAmount(settlementDate);}  }
class C{  public void teardown(){  if (ActiveMQMessageHandler.trace) {    ActiveMQRALogger.LOGGER.trace("teardown()");  }  try {    if (endpoint != null) {      endpoint.release();      endpoint=null;    }  } catch (  Throwable t) {    ActiveMQRALogger.LOGGER.debug("Error releasing endpoint " + endpoint,t);  }  if (connected) {    try {      consumer.close();      if (activation.getTopicTemporaryQueue() != null) {        SimpleString tmpQueue=activation.getTopicTemporaryQueue();        QueueQuery subResponse=session.queueQuery(tmpQueue);        if (subResponse.getConsumerCount() == 0) {          session.deleteQueue(tmpQueue);        }      }    } catch (    Throwable t) {      ActiveMQRALogger.LOGGER.debug("Error closing core-queue consumer",t);    }    try {      if (session != null) {        session.close();      }    } catch (    Throwable t) {      ActiveMQRALogger.LOGGER.debug("Error releasing session " + session,t);    }    try {      if (cf != null) {        cf.close();      }    } catch (    Throwable t) {      ActiveMQRALogger.LOGGER.debug("Error releasing session factory " + session,t);    }  } else {    try {      if (cf != null) {        cf.cleanup();      }    } catch (    Throwable t) {      ActiveMQRALogger.LOGGER.debug("Error releasing session factory " + session,t);    }  }}  }
class C{  public boolean isExact(int slot){  return exactTypeSet.get(slot);}  }
class C{  public void writeTo(ChannelBuffer data){  data.writeShort(this.portNumber);  data.writeBytes(hardwareAddress);  try {    byte[] name=this.name.getBytes("ASCII");    if (name.length < 16) {      data.writeBytes(name);      for (int i=name.length; i < 16; ++i) {        data.writeByte((byte)0);      }    } else {      data.writeBytes(name,0,15);      data.writeByte((byte)0);    }  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }  data.writeInt(this.config);  data.writeInt(this.state);  data.writeInt(this.currentFeatures);  data.writeInt(this.advertisedFeatures);  data.writeInt(this.supportedFeatures);  data.writeInt(this.peerFeatures);}  }
class C{  public boolean isAccessible(){  return accessible;}  }
class C{  public final void testIsEmpty(){  CharSequence[] entries=new CharSequence[]{"entry1","entry2"};  ProxySpinnerAdapter adapter1=createAdapter(new CharSequence[0]);  ProxySpinnerAdapter adapter2=createAdapter(entries);  assertTrue(adapter1.isEmpty());  assertFalse(adapter2.isEmpty());}  }
class C{  public synchronized boolean removeElement(Object object){  int index;  if ((index=indexOf(object,0)) == -1) {    return false;  }  removeElementAt(index);  return true;}  }
class C{  public boolean canWrite(){  return false;}  }
class C{  public void onDataConnectionStateChanged(int state){}  }
class C{  private void shuffleDev(boolean b){  this.shuffleDev=b;}  }
class C{  public void removePredicateStatement(MemStatement st){  predicateStatements.remove(st);  if (predicateStatements.isEmpty()) {    predicateStatements=null;  }}  }
class C{  private Set<ContainerDto> convertContainersToContainerJson(Set<EnvironmentContainerHost> containerHosts){  Set<ContainerDto> containerDtos=Sets.newHashSet();  for (  EnvironmentContainerHost containerHost : containerHosts) {    try {      containerDtos.add(new ContainerDto(containerHost.getId(),containerHost.getContainerName(),containerHost.getEnvironmentId().getId(),containerHost.getHostname(),containerHost.getIp(),containerHost.getTemplateName(),containerHost.getContainerSize(),containerHost.getArch().toString(),containerHost.getTags(),containerHost.getPeerId(),containerHost.getResourceHostId().getId(),containerHost.isLocal(),containerHost.getClass().getName(),containerHost.getTemplateId()));    } catch (    Exception e) {      containerDtos.add(new ContainerDto(containerHost.getId(),containerHost.getContainerName(),containerHost.getEnvironmentId().getId(),containerHost.getHostname(),"UNKNOWN",containerHost.getTemplateName(),containerHost.getContainerSize(),containerHost.getArch().toString(),containerHost.getTags(),containerHost.getPeerId(),"UNKNOWN",containerHost.isLocal(),containerHost.getClass().getName(),containerHost.getTemplateId()));    }  }  return containerDtos;}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof JobAttributes)) {    return false;  }  JobAttributes rhs=(JobAttributes)obj;  if (fileName == null) {    if (rhs.fileName != null) {      return false;    }  } else {    if (!fileName.equals(rhs.fileName)) {      return false;    }  }  if (pageRanges == null) {    if (rhs.pageRanges != null) {      return false;    }  } else {    if (rhs.pageRanges == null || pageRanges.length != rhs.pageRanges.length) {      return false;    }    for (int i=0; i < pageRanges.length; i++) {      if (pageRanges[i][0] != rhs.pageRanges[i][0] || pageRanges[i][1] != rhs.pageRanges[i][1]) {        return false;      }    }  }  if (printer == null) {    if (rhs.printer != null) {      return false;    }  } else {    if (!printer.equals(rhs.printer)) {      return false;    }  }  return (copies == rhs.copies && defaultSelection == rhs.defaultSelection && destination == rhs.destination && dialog == rhs.dialog && fromPage == rhs.fromPage && maxPage == rhs.maxPage && minPage == rhs.minPage && multipleDocumentHandling == rhs.multipleDocumentHandling && prFirst == rhs.prFirst && prLast == rhs.prLast && sides == rhs.sides && toPage == rhs.toPage);}  }
class C{  public boolean addCommunity(String comm){  if (commList.contains(comm))   return false;  commList.addElement(comm);  return true;}  }
class C{  private void skipNotUnderHg(Collection<FilePath> filesToFilter){  for (Iterator<FilePath> iter=filesToFilter.iterator(); iter.hasNext(); ) {    final FilePath filePath=iter.next();    if (HgUtil.getHgRootOrNull(myProject,filePath) == null) {      iter.remove();    }  }}  }
class C{  public Table applyPadding(final Table table){  table.pad(top,left,bottom,right);  return table;}  }
class C{  public void testOffer(){  LinkedBlockingQueue q=new LinkedBlockingQueue(1);  assertTrue(q.offer(zero));  assertFalse(q.offer(one));}  }
class C{  public static String removeQueryStringFromTarget(String target){  if (UtilValidate.isEmpty(target))   return null;  int queryStart=target.indexOf('?');  if (queryStart < 0) {    return target;  }  return target.substring(0,queryStart);}  }
class C{  private String isGapASpace(final int c,final int l,final float actualGap,final boolean addMultiplespaceXMLTag,final int writingMode){  String sep="";  float gap;  final float gapA=spaceWidth[c] * fontSize[c];  final float gapB=spaceWidth[l] * fontSize[l];  if (gapA > gapB) {    gap=gapB;  } else {    gap=gapA;  }  gap=(actualGap / (gap / 1000));  if (gap > 0.51f && gap < 1) {    gap=1;  }  final int spaceCount=(int)gap;  if (spaceCount > 0) {    sep=" ";  }  if (spaceCount > 1 && addMultiplespaceXMLTag && writingMode == PdfData.HORIZONTAL_LEFT_TO_RIGHT) {    sep=" <SpaceCount space=\"" + spaceCount + "\" />";  }  return sep;}  }
class C{  public View create(Element elem){  Document doc=elem.getDocument();  Object i18nFlag=doc.getProperty("i18n");  if (Boolean.TRUE.equals(i18nFlag)) {    String kind=elem.getName();    if (kind != null) {      if (kind.equals(AbstractDocument.ContentElementName)) {        return new GlyphView(elem);      } else       if (kind.equals(AbstractDocument.ParagraphElementName)) {        return new I18nFieldView(elem);      }    }  }  return new FieldView(elem);}  }
class C{  static int convertToInt(byte[] bytes){  int n=bytes[0] & 0xFF;  n|=((bytes[1] << 8) & 0xFF00);  n|=((bytes[2] << 16) & 0xFF0000);  n|=((bytes[3] << 24) & 0xFF000000);  return n;}  }
class C{  private void computeCodeLocationEventBlocks(){  if (this.codeLocationEventBlocks == null) {    this.codeLocationEventBlocks=new LinkedHashMap<CodeLocationModel,Map<MethodModel,List<MethodModel>>>();  }  for (  MethodModel inputEvent : inputEventBlocks.keySet()) {    if (inputEventBlocks.get(inputEvent) != null) {      for (      MethodModel outputEvent : inputEventBlocks.get(inputEvent)) {        List<CodeLocationModel> lines=outputEvent.getLines();        if (lines != null) {          for (          CodeLocationModel line : lines) {            Map<MethodModel,List<MethodModel>> lineEventMap=this.codeLocationEventBlocks.get(line);            if (lineEventMap == null) {              lineEventMap=new LinkedHashMap<MethodModel,List<MethodModel>>();              this.codeLocationEventBlocks.put(line,lineEventMap);            }            List<MethodModel> outputMethods=lineEventMap.get(inputEvent);            if (outputMethods == null) {              outputMethods=new ArrayList<MethodModel>();              lineEventMap.put(inputEvent,outputMethods);            }            outputMethods.add(outputEvent);          }        }      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:32.861 -0500",hash_original_method="093D6CB6B4451769E91B74C04E5F7D4D",hash_generated_method="2E8F1D472E39A46FC75E0E5ADF04BCAD") public static void finalizeAllEnqueued() throws InterruptedException {  Sentinel sentinel=new Sentinel();  FinalizerReference<Object> reference=new FinalizerReference<Object>(null,queue);  reference.zombie=sentinel;  reference.enqueueInternal();  sentinel.awaitFinalization();}  }
class C{  public void release(){  valuePool.reset();  rootLocationPool.reset();}  }
class C{  public static void write(String data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  private void resetNetworkVisited(){  for (  Node node : this.network.getNodes().values()) {    DijkstraNodeData data=getData(node);    data.resetVisited();  }}  }
class C{  public void testReserveAvailabilityChange() throws Throwable {  testAvailabilityChange(Member.Type.RESERVE);}  }
class C{  public void transformCombined(FeatureVector combined){  if (combinedTransform != null && combined != null) {    combinedTransform.doTransform(combined);  }}  }
class C{  public void registerTileProvider(TileProvider provider){}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  @Override public boolean execute(String sql,String[] columnNames) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("execute(" + quote(sql) + ", "+ quoteArray(columnNames)+ ");");    }    return executeInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public AddressConstantOperand(Offset v){  this(v.toWord().toAddress());}  }
class C{  public Builder updateNickName(String nickName){  this.nickName=nickName;  return this;}  }
class C{  public boolean resolve(FunctionInterface functionToCheck,Set<UnitInterface> allUnits){  Set<UnitInterface> includedUnits=callerUnit.getIncludedUnits(allUnits);  if (!includedUnits.contains(functionToCheck.getUnit())) {    return false;  }  if (functionToCheck.getName().toLowerCase().endsWith(called.getName().toLowerCase())) {    caller.addCalledFunction(functionToCheck);    return true;  }  return false;}  }
class C{  public void testOR() throws Exception {  BooleanQuery.Builder expected=new BooleanQuery.Builder();  expected.add(new TermQuery(new Term("field","foo")),Occur.SHOULD);  expected.add(new TermQuery(new Term("field","bar")),Occur.SHOULD);  assertEquals(expected.build(),parse("foo|bar"));  assertEquals(expected.build(),parse("foo||bar"));}  }
class C{  public static RoutingService.Builder buildRoutingService(ServerSet serverSet){  return buildRoutingService(serverSet,false);}  }
class C{  public static Position interpolateRhumb(double amount,Position value1,Position value2){  if (value1 == null || value2 == null) {    throw new IllegalArgumentException("Position Is Null");  }  LatLon latLon=LatLon.interpolateRhumb(amount,value1,value2);  double elevation=WWMath.mix(amount,value1.getElevation(),value2.getElevation());  return new Position(latLon,elevation);}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  List lst=getRoomGroups();  if (!checkPrefs(lst)) {    errors.add("roomGroups",new ActionMessage("errors.generic",MSG.errorInvalidRoomGroup()));  }  if (!checkPrefLevels(getRoomGroupLevels(),lst)) {    errors.add("roomGroups",new ActionMessage("errors.generic",MSG.errorInvalidRoomGroupLevel()));  }  lst=getBldgPrefs();  if (!checkPrefs(lst)) {    errors.add("bldgPrefs",new ActionMessage("errors.generic",MSG.errorInvalidBuildingPreference()));  }  if (!checkPrefLevels(getBldgPrefLevels(),lst)) {    errors.add("bldgPrefs",new ActionMessage("errors.generic",MSG.errorInvalidBuildingPreferenceLevel()));  }  lst=getRoomPrefs();  if (!checkPrefs(lst)) {    errors.add("roomPrefs",new ActionMessage("errors.generic",MSG.errorInvalidRoomPreference()));  }  if (!checkPrefLevels(getRoomPrefLevels(),lst)) {    errors.add("roomPrefs",new ActionMessage("errors.generic",MSG.errorInvalidRoomPreferenceLevel()));  }  lst=getRoomFeaturePrefs();  if (!checkPrefs(lst)) {    errors.add("roomFeaturePrefs",new ActionMessage("errors.generic",MSG.errorInvalidRoomFeaturePreference()));  }  if (!checkPrefLevels(getRoomFeaturePrefLevels(),lst)) {    errors.add("roomFeaturePrefs",new ActionMessage("errors.generic",MSG.errorInvalidRoomFeaturePreferenceLevel()));  }  lst=getDistPrefs();  if (!checkPrefs(lst)) {    errors.add("distPrefs",new ActionMessage("errors.generic",MSG.errorInvalidDistributionPreference()));  }  if (!checkPrefLevels(getDistPrefLevels(),lst)) {    errors.add("distPrefs",new ActionMessage("errors.generic",MSG.errorInvalidDistributionPreferenceLevel()));  }  for (int i=0; i < getTimePatterns().size(); i++) {    if (request.getParameter("p" + i + "_hour") != null) {      boolean daySelected=false;      for (int j=0; j < Constants.DAY_CODES.length; j++)       if (request.getParameter("p" + i + "_d"+ j) != null)       daySelected=true;      if (!daySelected) {        errors.add("timePrefs",new ActionMessage("errors.generic","No day is selected in time preferences."));        break;      }      if ("".equals(request.getParameter("p" + i + "_hour"))) {        errors.add("timePrefs",new ActionMessage("errors.generic","No time is selected in time preferences."));        break;      }      if ("".equals(request.getParameter("p" + i + "_min"))) {        errors.add("timePrefs",new ActionMessage("errors.generic","No time is selected in time preferences."));        break;      }      if ("".equals(request.getParameter("p" + i + "_morn"))) {        errors.add("timePrefs",new ActionMessage("errors.generic","No time is selected in time preferences."));        break;      }    }  }  return errors;}  }
class C{  void purge(){  Iterator<Map.Entry<String,QNCacheBean<T>>> it=cache.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<String,QNCacheBean<T>> entry=it.next();    QNCacheBean<T> bean=entry.getValue();    if (!bean.isAlive(now())) {      it.remove();    }  }}  }
class C{  private void writeValue(Value value) throws IOException, RDFHandlerException {  if (value instanceof IRI) {    IRI uri=(IRI)value;    xmlWriter.textElement(URI_TAG,uri.toString());  } else   if (value instanceof BNode) {    BNode bNode=(BNode)value;    xmlWriter.textElement(BNODE_TAG,bNode.getID());  } else   if (value instanceof Literal) {    Literal literal=(Literal)value;    IRI datatype=literal.getDatatype();    if (Literals.isLanguageLiteral(literal)) {      xmlWriter.setAttribute(LANGUAGE_ATT,literal.getLanguage().get());      xmlWriter.textElement(PLAIN_LITERAL_TAG,literal.getLabel());    } else {      xmlWriter.setAttribute(DATATYPE_ATT,datatype.toString());      xmlWriter.textElement(TYPED_LITERAL_TAG,literal.getLabel());    }  } else {    throw new RDFHandlerException("Unknown value type: " + value.getClass());  }}  }
class C{  public Feature(String line,Map cpStr2Int,Map lbStr2Int,Map fmap){  StringTokenizer strTok=new StringTokenizer(line," \t\r\n");  int len=strTok.countTokens();  String strIdStr=strTok.nextToken();  int idx=Integer.parseInt(strTok.nextToken());  float val=1;  double wgt=Double.parseDouble(strTok.nextToken());  StringTokenizer strIdTok=new StringTokenizer(strIdStr,"_");  String prefix=strIdTok.nextToken();  if (prefix.compareToIgnoreCase("e1") == 0) {    Integer yInt=(Integer)lbStr2Int.get(strIdTok.nextToken());    Integer ypInt=(Integer)lbStr2Int.get(strIdTok.nextToken());    if (yInt != null && ypInt != null) {      eFeature1Init(yInt.intValue(),ypInt.intValue());    }  } else   if (prefix.compareToIgnoreCase("s1") == 0) {    Integer yInt=(Integer)lbStr2Int.get(strIdTok.nextToken());    Integer cpInt=(Integer)cpStr2Int.get(strIdTok.nextToken());    if (yInt != null && cpInt != null) {      sFeature1Init(yInt.intValue(),cpInt.intValue());    }  }  this.idx=idx;  this.val=val;  this.wgt=wgt;  strId2IdxAdd(fmap);}  }
class C{  public Bundle load(){  Bundle settings=new Bundle();  Map<String,?> allCachedEntries=cache.getAll();  for (  String key : allCachedEntries.keySet()) {    try {      deserializeKey(key,settings);    } catch (    JSONException e) {      Logger.log(LoggingBehavior.CACHE,Log.WARN,TAG,"Error reading cached value for key: '" + key + "' -- "+ e);      return null;    }  }  return settings;}  }
class C{  public boolean isMultiTouch(){  return isMultiTouch;}  }
class C{  public static double rem(double x,double y){  double tmp=x / y;  if (MathLib.abs(tmp) <= Long.MAX_VALUE)   return x - MathLib.round(tmp) * y; else   return NaN;}  }
class C{  public String locatorInfo(File directory){  int statusCode=ManagerInfo.getLocatorStatusCode(directory);  String statusString=ManagerInfo.statusToString(statusCode);  try {    ManagerInfo mi=ManagerInfo.loadLocatorInfo(directory);    if (statusCode == ManagerInfo.KILLED_STATUS_CODE) {      return LocalizedStrings.SystemAdmin_LOCATOR_IN_0_WAS_KILLED_WHILE_IT_WAS_1_LOCATOR_PROCESS_ID_WAS_2.toLocalizedString(new Object[]{directory,ManagerInfo.statusToString(mi.getManagerStatus()),Integer.valueOf(mi.getManagerProcessId())});    } else {      return LocalizedStrings.SystemAdmin_LOCATOR_IN_0_IS_1_LOCATOR_PROCESS_ID_IS_2.toLocalizedString(new Object[]{directory,statusString,Integer.valueOf(mi.getManagerProcessId())});    }  } catch (  UnstartedSystemException ex) {    return LocalizedStrings.SystemAdmin_LOCATOR_IN_0_IS_STOPPED.toLocalizedString(directory);  }catch (  GemFireIOException ex) {    return LocalizedStrings.SystemAdmin_LOCATOR_IN_0_IS_STARTING.toLocalizedString(directory);  }}  }
class C{  public X509Name(boolean reverse,String dirName){  this(reverse,DefaultLookUp,dirName);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void loadLogixs(Element logixs){  List<Element> logixList=logixs.getChildren("logix");  if (log.isDebugEnabled()) {    log.debug("Found " + logixList.size() + " logixs");  }  LogixManager tm=InstanceManager.getDefault(jmri.LogixManager.class);  for (int i=0; i < logixList.size(); i++) {    String sysName=getSystemName(logixList.get(i));    if (sysName == null) {      log.warn("unexpected null in systemName " + logixList.get(i));      break;    }    String userName=null;    String yesno="";    if (logixList.get(i).getAttribute("userName") != null) {      userName=logixList.get(i).getAttribute("userName").getValue();    }    if (logixList.get(i).getAttribute("enabled") != null) {      yesno=logixList.get(i).getAttribute("enabled").getValue();    }    if (log.isDebugEnabled()) {      log.debug("create logix: (" + sysName + ")("+ (userName == null ? "<null>" : userName)+ ")");    }    Logix x=tm.createNewLogix(sysName,userName);    if (x != null) {      loadCommon(x,logixList.get(i));      if ((yesno != null) && (!yesno.equals(""))) {        if (yesno.equals("yes")) {          x.setEnabled(true);        } else         if (yesno.equals("no")) {          x.setEnabled(false);        }      }      List<Element> logixConditionalList=logixList.get(i).getChildren("logixConditional");      if (logixConditionalList.size() > 0) {        for (int n=0; n < logixConditionalList.size(); n++) {          if (logixConditionalList.get(n).getAttribute("systemName") == null) {            log.warn("unexpected null in systemName " + logixConditionalList.get(n) + " "+ logixConditionalList.get(n).getAttributes());            break;          }          String cSysName=logixConditionalList.get(n).getAttribute("systemName").getValue();          int cOrder=Integer.parseInt(logixConditionalList.get(n).getAttribute("order").getValue());          x.addConditional(cSysName,cOrder);        }      }    }  }}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  public FirstRunFilter(boolean matchPasses){  super(matchPasses);}  }
class C{  protected void doGatherTest(final EdgesEnum gatherEdges,final Set<? extends Statement> expected,final Value startingVertex) throws Exception {  final IGASEngine gasEngine=getGraphFixture().newGASEngine(1);  try {    final RAMGraph g=getGraphFixture().getGraph();    try {      final IGraphAccessor graphAccessor=new RAMGraphAccessor(g);      final IGASContext<Set<Statement>,Set<Statement>,Set<Statement>> gasContext=gasEngine.newGASContext(graphAccessor,new MockGASProgram(gatherEdges));      final IGASState<Set<Statement>,Set<Statement>,Set<Statement>> gasState=gasContext.getGASState();      gasState.setFrontier(gasContext,startingVertex);      gasContext.doRound(new GASStats());      final Set<Statement> actual=gasState.getState(startingVertex);      assertSameEdges(expected,actual);    }  finally {    }  }  finally {    gasEngine.shutdownNow();  }}  }
class C{  public void waitForMessages() throws InterruptedException {  ActiveMQTestBase.waitForLatch(latch);}  }
class C{  public static void main(String[] args){  RegularPolygon regularPolygon1=new RegularPolygon();  RegularPolygon regularPolygon2=new RegularPolygon(6,4);  RegularPolygon regularPolygon3=new RegularPolygon(10,4,5.6,7.8);  System.out.println("\n--------------------------------------------------");  System.out.println("| Regular Polygon Objects |  Perimeter  |  Area  |");  System.out.println("--------------------------------------------------");  System.out.printf("|       Object# 1         |%8.2f     |%6.2f  |\n",regularPolygon1.getPerimeter(),regularPolygon1.getArea());  System.out.printf("|       Object# 2         |%8.2f     |%6.2f  |\n",regularPolygon2.getPerimeter(),regularPolygon2.getArea());  System.out.printf("|       Object# 3         |%8.2f     |%6.2f  |\n",regularPolygon3.getPerimeter(),regularPolygon3.getArea());  System.out.println("--------------------------------------------------");}  }
class C{  public ThriftClientPooledObject(T object){  super(object);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @ResponseBody @RequestMapping(value="/{applicationName}/deploy",method=RequestMethod.POST,consumes={"multipart/form-data"}) public JsonResponse deploy(@RequestPart("file") MultipartFile fileUpload,@PathVariable String applicationName,HttpServletRequest request,HttpServletResponse response) throws IOException, ServiceException, CheckException {  logger.info("applicationName = " + applicationName + "file = "+ fileUpload.getOriginalFilename());  User user=authentificationUtils.getAuthentificatedUser();  Application application=applicationService.findByNameAndUser(user,applicationName);  authentificationUtils.canStartNewAction(user,application,Locale.ENGLISH);  application=applicationService.deploy(fileUpload,application);  String needRestart=dockerService.getEnv(application.getServer().getContainerID(),"CU_SERVER_RESTART_POST_DEPLOYMENT");  if ("true".equalsIgnoreCase(needRestart)) {    applicationEventPublisher.publishEvent(new ApplicationPendingEvent(application));    applicationService.stop(application);    applicationService.start(application);    applicationEventPublisher.publishEvent(new ApplicationStartEvent(application));  }  logger.info("--DEPLOY APPLICATION WAR ENDED--");  return new HttpOk();}  }
class C{  public static void zipDirectory(File dir,File zipfile) throws IOException, IllegalArgumentException {  String[] entries=dir.list();  byte[] buffer=new byte[4096];  int bytesRead;  ZipOutputStream out=new ZipOutputStream(new FileOutputStream(zipfile));  for (int i=0; i < entries.length; i++) {    File f=new File(dir,entries[i]);    if (f.isDirectory())     continue;    FileInputStream in=new FileInputStream(f);    ZipEntry entry=new ZipEntry(f.getPath());    out.putNextEntry(entry);    while ((bytesRead=in.read(buffer)) != -1)     out.write(buffer,0,bytesRead);    in.close();  }  out.close();}  }
class C{  private void callUnbind(NameComponent[] path) throws NamingException {  if (_nc == null)   throw new ConfigurationException("Context does not have a corresponding NamingContext");  try {    _nc.unbind(path);  } catch (  NotFound e) {    if (leafNotFound(e,path[path.length - 1])) {    } else {      throw ExceptionMapper.mapException(e,this,path);    }  }catch (  Exception e) {    throw ExceptionMapper.mapException(e,this,path);  }}  }
class C{  public String toString(CSSEngine eng){  int nSlots=values.length;  StringBuffer sb=new StringBuffer(nSlots * 8);  for (int i=0; i < nSlots; i++) {    Value v=values[i];    if (v == null)     continue;    sb.append(eng.getPropertyName(i));    sb.append(": ");    sb.append(v);    if (isImportant(i))     sb.append(" !important");    sb.append(";\n");  }  return sb.toString();}  }
class C{  @Override protected void finalize() throws Throwable {  mVertexsBuffer=mTextureCoordsBuffer=null;  mVertexs=null;  super.finalize();}  }
class C{  public static boolean gr(double a,double b){  return (a - b > SMALL);}  }
class C{  public IndentingWriter(Writer out,int width){  this(out,width,"");}  }
class C{  protected void addRawEdge(BasicBlock src,BytecodeInstruction target,ControlFlowEdge origEdge){  BasicBlock targetBlock=target.getBasicBlock();  if (targetBlock == null)   throw new IllegalStateException("when adding an edge to a CFG it is expected to know both the src- and the target-instruction");  addRawEdge(src,targetBlock,origEdge);}  }
class C{  public boolean selectAllElements(){  try {    for (    CartographicElement ce : listOfCartographicElements) {      ce.setSelected(true);    }    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public ExprNode makeExprNode(ExprEvaluatorContext exprEvaluatorContext){  ExprNode representativeNode=new ExprEqualsNodeImpl(false,false);  representativeNode.addChildNode(optLeftNode);  representativeNode.addChildNode(optRightNode);  if (optAddLeftNode == null) {    topValidate(representativeNode,exprEvaluatorContext);    return representativeNode;  }  ExprAndNode andNode=new ExprAndNodeImpl();  topValidate(representativeNode,exprEvaluatorContext);  andNode.addChildNode(representativeNode);  representativeNode=andNode;  for (int i=0; i < optAddLeftNode.length; i++) {    ExprEqualsNode eqNode=new ExprEqualsNodeImpl(false,false);    eqNode.addChildNode(optAddLeftNode[i]);    eqNode.addChildNode(optAddRightNode[i]);    topValidate(eqNode,exprEvaluatorContext);    andNode.addChildNode(eqNode);  }  topValidate(andNode,exprEvaluatorContext);  return representativeNode;}  }
class C{  protected void restoreState(){  likelihoodCore.restoreState();  super.restoreState();}  }
class C{  void updateDragEnabled(boolean dragEnabled){}  }
class C{  final public void increment(){  cat.increment();}  }
class C{  public DSETestCaseLocalSearch(TestSuiteChromosome suite){  this.suite=suite;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:12.842 -0500",hash_original_method="51201694E0EE76265BF39848EF10BE9C",hash_generated_method="49E6B3D175AEB85C0CC035D6E473FA9A") public boolean isSecure(){  return false;}  }
class C{  public void testTestBitNegative2(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=45;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertTrue(!aNumber.testBit(number));}  }
class C{  private String appendQueryParam(String base_url,Map<String,String> query_parameters){  if (query_parameters != null && !query_parameters.isEmpty()) {    StringBuilder sb=new StringBuilder(base_url).append('?');    for (    Map.Entry<String,String> entry : query_parameters.entrySet()) {      String value=entry.getValue().replaceAll(" ","%20");      sb.append(entry.getKey()).append('=').append(value);      sb.append('&');    }    sb.deleteCharAt(sb.length() - 1);    return sb.toString();  } else {    return base_url;  }}  }
class C{  public void removeSelectionChangeListener(final SelectionChangeListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (selectionChangeListeners == null) {    return;  }  selectionChangeListeners.remove(listener);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void mouseReleased(MouseEvent e){  if (isVisible())   e.consume();}  }
class C{  public static String dateToHuman(Date date){  if (date == null) {    return "missing";  }  return m_date.get().format(date);}  }
class C{  public static boolean onTouch(View v,MotionEvent event){  int action=event.getAction();  if (v instanceof TextView) {    TextView widget=(TextView)v;    int x=(int)event.getX();    int y=(int)event.getY();    x-=widget.getTotalPaddingLeft();    y-=widget.getTotalPaddingTop();    x+=widget.getScrollX();    y+=widget.getScrollY();    Layout layout=widget.getLayout();    int line=layout.getLineForVertical(y);    int off=layout.getOffsetForHorizontal(line,x);    Spannable buffer=(Spannable)widget.getText();    ClickableSpanEx[] link=buffer.getSpans(off,off,ClickableSpanEx.class);    if (link.length != 0) {      if (action == MotionEvent.ACTION_DOWN) {        Selection.setSelection(buffer,buffer.getSpanStart(link[0]),buffer.getSpanEnd(link[0]));        link[0].setTransparent(false);      } else {        if (action == MotionEvent.ACTION_UP)         link[0].onClick(widget);        link[0].setTransparent(true);        Selection.removeSelection(buffer);      }      return true;    }  } else {    Log.e(TAG,"ClickableSpanEx supports TextView only .");  }  return false;}  }
class C{  private void changeNextButtonState(boolean connected){  if (mEnableNextOnConnection && hasNextButton()) {    getNextButton().setEnabled(connected);  }}  }
class C{  public JPAProperty(String namespace,String localName,String value,int order){  super();  this.localName=localName;  this.namespace=namespace;  this.value=value;  this.line=order;}  }
class C{  public void onAnimationCancel(Animator animation){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void addDecoTypes(DecoType... decos){  for (int i=0; i < decos.length; i++) {    this.decoTypes.add(decos[i]);  }}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(NumbersRegressionTest.class);}  }
class C{  public static String fromIPv4AddressCollection(Collection<Integer> ipAddresses){  if (ipAddresses == null)   return "null";  StringBuffer sb=new StringBuffer();  sb.append("[");  for (  Integer ip : ipAddresses) {    sb.append(fromIPv4Address(ip));    sb.append(",");  }  sb.replace(sb.length() - 1,sb.length(),"]");  return sb.toString();}  }
class C{  public boolean hasExtension(String typeUri){  return _extAliases.containsKey(typeUri);}  }
class C{  private void processDecPrivateCommandCharacter(char commandCharacter){switch (commandCharacter) {case 'h':    processDecPrivateCommand_h();  break;case 'l':processDecPrivateCommand_l();break;default :Logger.log("Ignoring unsupported DEC private command character: '" + commandCharacter + "'");break;}}  }
class C{  public void clear(){  new ByteArrayList(this.state).fillFromToWith(0,this.state.length - 1,FREE);  new ObjectArrayList(values).fillFromToWith(0,state.length - 1,null);  this.distinct=0;  this.freeEntries=table.length;  trimToSize();}  }
class C{  public static Class<?> toClass(String type,ClassLoader loader) throws ClassNotFoundException {  Class<?> c=null;  int i0=type.indexOf('[');  int dims=0;  if (i0 > 0) {    for (int i=0; i < type.length(); i++) {      if (type.charAt(i) == '[')       dims++;    }    type=type.substring(0,i0);  }  if ("boolean".equals(type))   c=boolean.class; else   if ("char".equals(type))   c=char.class; else   if ("byte".equals(type))   c=byte.class; else   if ("short".equals(type))   c=short.class; else   if ("int".equals(type))   c=int.class; else   if ("long".equals(type))   c=long.class; else   if ("float".equals(type))   c=float.class; else   if ("double".equals(type))   c=double.class; else   if (type.indexOf('[') < 0)   c=loader.loadClass(type);  if (dims == 0)   return c;  if (dims == 1)   return java.lang.reflect.Array.newInstance(c,1).getClass();  return java.lang.reflect.Array.newInstance(c,new int[dims]).getClass();}  }
class C{  @Override public boolean isIdentifiedUser(){  return true;}  }
class C{  public boolean isInterfaceDirectSubinterfaceOf(SootClass child,SootClass possibleParent){  child.checkLevel(SootClass.HIERARCHY);  possibleParent.checkLevel(SootClass.HIERARCHY);  return getDirectSubinterfacesOf(possibleParent).contains(child);}  }
class C{  protected SyncQuerySample(){}  }
class C{  public void reset(){  System.arraycopy(IV,0,cfbV,0,IV.length);  cipher.reset();}  }
class C{  public boolean updateAllTypes(){  return updateAllTypes;}  }
class C{  protected void processObject(final Object obj,final Field field,final Object customFieldProcessor){  JBBPUtils.assertNotNull(obj,"Object must not be null");  Field[] orderedFields=null;  final Map<Class<?>,Field[]> fieldz;  if (cachedClasses == null) {    fieldz=new HashMap<Class<?>,Field[]>();    cachedClasses=fieldz;  } else {    fieldz=cachedClasses;synchronized (fieldz) {      orderedFields=fieldz.get(obj.getClass());    }  }  if (orderedFields == null) {    final List<Class<?>> listOfClassHierarchy=new ArrayList<Class<?>>();    final List<OrderedField> fields=new ArrayList<OrderedField>();    Class<?> current=obj.getClass();    while (current != java.lang.Object.class) {      listOfClassHierarchy.add(current);      current=current.getSuperclass();    }    for (int i=listOfClassHierarchy.size() - 1; i >= 0; i--) {      final Class<?> clazzToProcess=listOfClassHierarchy.get(i);      final Bin clazzAnno=clazzToProcess.getAnnotation(Bin.class);      for (      final Field f : clazzToProcess.getDeclaredFields()) {        if (!f.isAccessible()) {          JBBPUtils.makeAccessible(f);        }        final int modifiers=f.getModifiers();        if (Modifier.isTransient(modifiers) || Modifier.isStatic(modifiers) || f.getName().indexOf('$') >= 0) {          continue;        }        Bin fieldAnno=f.getAnnotation(Bin.class);        fieldAnno=fieldAnno == null ? clazzAnno : fieldAnno;        if (fieldAnno == null) {          continue;        }        fields.add(new OrderedField(fieldAnno.outOrder(),f));      }    }    Collections.sort(fields);    orderedFields=new Field[fields.size()];    for (int i=0; i < fields.size(); i++) {      orderedFields[i]=fields.get(i).field;    }synchronized (fieldz) {      fieldz.put(obj.getClass(),orderedFields);    }  }  if (field != null && !field.isAccessible()) {    JBBPUtils.makeAccessible(field);  }  final Bin clazzAnno=obj.getClass().getAnnotation(Bin.class);  final Bin fieldAnno=field == null ? null : field.getAnnotation(Bin.class);  this.onStructStart(obj,field,clazzAnno == null ? fieldAnno : clazzAnno);  for (  final Field f : orderedFields) {    Bin binAnno=f.getAnnotation(Bin.class);    if (binAnno == null) {      binAnno=f.getDeclaringClass().getAnnotation(Bin.class);      if (binAnno == null) {        throw new JBBPIllegalArgumentException("Can't find any Bin annotation to use for " + f + " field");      }    }    if (binAnno.custom() && customFieldProcessor == null) {      throw new JBBPIllegalArgumentException("The Class '" + obj.getClass().getName() + "' contains the field '"+ f.getName()+ "\' which is a custom one, you must provide a JBBPCustomFieldWriter instance to save the field.");    }    processObjectField(obj,f,binAnno,customFieldProcessor);  }  this.onStructEnd(obj,field,clazzAnno == null ? fieldAnno : clazzAnno);}  }
class C{  protected void flowThrough(Object inValue,Object block,Object outValue){  FlowSet in=(FlowSet)inValue, out=(FlowSet)outValue;  in.union(nodeToGenerateSet.get(block),out);}  }
class C{  public void distill(List<Metric> metrics){  for (  Metric m : metrics) {    distill(m);  }}  }
class C{  public int numEntries(){  return pp;}  }
class C{  public TSIG(String name,String key){  this(HMAC_MD5,name,key);}  }
class C{  public static Object makeParamValueFromComposite(HttpServletRequest request,String prefix,Locale locale){  String compositeType=request.getParameter(makeCompositeParam(prefix,"compositeType"));  if (UtilValidate.isEmpty(compositeType))   return null;  Map<String,String> data=new HashMap<String,String>();  for (Enumeration<String> names=UtilGenerics.cast(request.getParameterNames()); names.hasMoreElements(); ) {    String name=names.nextElement();    if (!name.startsWith(prefix + COMPOSITE_DELIMITER))     continue;    String suffix=name.substring(name.indexOf(COMPOSITE_DELIMITER) + COMPOSITE_DELIMITER_LENGTH);    String value=request.getParameter(name);    data.put(suffix,value);  }  if (Debug.verboseOn()) {    Debug.logVerbose("Creating composite type with parameter data: " + data.toString(),module);  }  if ("Timestamp".equals(compositeType)) {    String date=data.get("date");    String hour=data.get("hour");    String minutes=data.get("minutes");    String ampm=data.get("ampm");    if (date == null || date.length() < 10)     return null;    if (UtilValidate.isEmpty(hour))     return null;    if (UtilValidate.isEmpty(minutes))     return null;    boolean isTwelveHour=UtilValidate.isNotEmpty(ampm);    try {      int h=Integer.parseInt(hour);      Timestamp timestamp=Timestamp.valueOf(date.substring(0,10) + " 00:00:00.000");      Calendar cal=Calendar.getInstance(locale);      cal.setTime(timestamp);      if (isTwelveHour) {        boolean isAM=("AM".equals(ampm) ? true : false);        if (isAM && h == 12)         h=0;        if (!isAM && h < 12)         h+=12;      }      cal.set(Calendar.HOUR_OF_DAY,h);      cal.set(Calendar.MINUTE,Integer.parseInt(minutes));      return new Timestamp(cal.getTimeInMillis());    } catch (    IllegalArgumentException e) {      Debug.logWarning("User input for composite timestamp was invalid: " + e.getMessage(),module);      return null;    }  }  return null;}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(KEY)) {    key=null;  } else {    throw new IOException("Attribute name not recognized by " + "CertAttrSet: CertificateX509Key.");  }}  }
class C{  public static InputStream toInputStream(CharSequence input,Charset encoding){  return toInputStream(input.toString(),encoding);}  }
class C{  public static IgniteLogger logger(GridKernalContext ctx,AtomicReference<IgniteLogger> logRef,Class<?> cls){  IgniteLogger log=logRef.get();  if (log == null) {    logRef.compareAndSet(null,ctx.log(cls));    log=logRef.get();  }  return log;}  }
class C{  @Override public void zoomIn(){}  }
class C{  public void addPutAndGetTimeNanos(long duration){  putTimeNanos.addAndGet(duration);  getTimeNanos.addAndGet(duration);  if (delegate != null)   delegate.addPutAndGetTimeNanos(duration);}  }
class C{  public static void assertSymmetric(IDoubleMatrix mat,double epsilon){  assertSquare(mat);  for (int i=0; i < mat.getRowNum(); ++i) {    for (int j=i + 1; j < mat.getRowNum(); ++j) {      final double v1=mat.get(i,j);      final double v2=mat.get(j,i);      if (Double.isNaN(v1) || Double.isNaN(v2)) {        if (!Double.isNaN(v1) || !Double.isNaN(v2)) {          final String msg=String.format("Matrix is not symmetric with respect to Nans: (%d,%d)=%f (%d,%d)=%f",i,j,v1,j,i,v2);          throw new AdeCoreIllegalArgumentException(msg);        }      } else       if (Math.abs(v1 - v2) > epsilon) {        final String errorMsg=String.format("Matrix not symmetric: (%d,%d)=%f (%d,%d)=%f  (epsilon=%g)",i,j,v1,j,i,v2,epsilon);        throw new AdeCoreIllegalArgumentException(errorMsg);      }    }  }}  }
class C{  public SComp(String cID){  self=new EComp(this,cID);}  }
class C{  public GeneratorModelItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void register(RollingStock rs){  Integer oldSize=Integer.valueOf(_hashTable.size());  _hashTable.put(rs.getId(),rs);  firePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_hashTable.size()));}  }
class C{  public static DictionaryTypes2.ModelDesign.DataType fixWrapper(DictionaryTypes2.ModelDesign.DataType dt){  if (dt == null)   return null;  return isPrimitiveWrapper(dt) ? dt.getSuperType() : dt;}  }
class C{  public CallSiteTreeNode find(InlineSequence seq){  if (seq.caller == null) {    return (CallSiteTreeNode)getRoot();  } else {    CallSiteTreeNode parent=find(seq.caller);    CallSiteTreeNode x=(CallSiteTreeNode)parent.getLeftChild();    while (x != null) {      if (x.callSite == seq) {        return x;      }      x=(CallSiteTreeNode)x.getRightSibling();    }    return null;  }}  }
class C{  public static double[] copyOf(double[] original,int newLength){  double[] copy=new double[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  protected boolean hasZoom(){  return true;}  }
class C{  public AbsoluteSizeSpan(int size,boolean dip){  mSize=size;  mDip=dip;}  }
class C{  public static Bitmap createIconBitmap(String packageName,String resourceName,Context context){  PackageManager packageManager=context.getPackageManager();  try {    Resources resources=packageManager.getResourcesForApplication(packageName);    if (resources != null) {      final int id=resources.getIdentifier(resourceName,null,null);      return createIconBitmap(resources.getDrawableForDensity(id,LauncherAppState.getInstance().getInvariantDeviceProfile().fillResIconDpi),context);    }  } catch (  Exception e) {  }  return null;}  }
class C{  public LegendItemEntity(Shape area){  super(area);}  }
class C{  void swapConditional(int row){  _curLogix.swapConditional(_nextInOrder,row);  _nextInOrder++;  if (_nextInOrder >= numConditionals) {    _inReorderMode=false;  }  conditionalTableModel.fireTableDataChanged();}  }
class C{  private static boolean cancelBitmapLoader(ImageView imageView,Uri uri){  BitmapLoader bitmapLoaderAsyncTask=getBitmapLoader(imageView);  if (bitmapLoaderAsyncTask != null) {    if (bitmapLoaderAsyncTask.getUri().equals(uri)) {      return false;    } else {      bitmapLoaderAsyncTask.cancel(true);    }  }  return true;}  }
class C{  public void put(NumberVector val){  assert (val.getDimensionality() == mean.length);  final double nwsum=wsum + 1.;  for (int i=0; i < mean.length; i++) {    final double delta=val.doubleValue(i) - mean[i];    nmea[i]=mean[i] + delta / nwsum;  }  for (int i=0; i < mean.length; i++) {    for (int j=i; j < mean.length; j++) {      double delta=(val.doubleValue(i) - nmea[i]) * (val.doubleValue(j) - mean[j]);      elements[i][j]=elements[i][j] + delta;      if (i != j) {        elements[j][i]=elements[j][i] + delta;      }    }  }  wsum=nwsum;  System.arraycopy(nmea,0,mean,0,nmea.length);}  }
class C{  public static boolean initAsync(String Version,Context AppContext,LoaderCallbackInterface Callback){  return AsyncServiceHelper.initOpenCV(Version,AppContext,Callback);}  }
class C{  @Override public void booleanWrite(ObjectReference src,Address slot,boolean value,Word metaDataA,Word metaDataB,int mode){  VM.barriers.booleanWrite(src,value,metaDataA,metaDataB,mode);}  }
class C{  protected void prepareFixedStatement(String sql) throws SQLException {  if (fbStatement != null)   return;  super.prepareFixedStatement(sql);}  }
class C{  public vec3 add(vec3 a,vec3 b){  this.m[0]=a.m[0] + b.m[0];  this.m[1]=a.m[1] + b.m[1];  this.m[2]=a.m[2] + b.m[2];  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationcreatedocumenttype04.class,args);}  }
class C{  public static char[] encode(byte[] in,int iLen){  return encode(in,0,iLen);}  }
class C{  public Instant plusNanos(long nanosToAdd){  return plus(0,nanosToAdd);}  }
class C{  public static boolean hasFingerprintRegistered(){  return ReprintInternal.INSTANCE.hasFingerprintRegistered();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:52.985 -0400",hash_original_method="76D06BC41176CFA4728FC56D7F0473D6",hash_generated_method="BAB954591AA10BA3342EE623BD599B20") public DrmErrorEvent(int uniqueId,int type,String message){  super(uniqueId,type,message);}  }
class C{  private void addCarToTrain(Car car,RouteLocation rl,RouteLocation rld,Track track){  addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildCarAssignedDest"),new Object[]{car.toString(),rld.getName(),track.getName()}));  car.setDestination(track.getLocation(),track);  int length=car.getTotalLength();  int weightTons=car.getAdjustedWeightTons();  if (car.getKernel() != null) {    length=car.getKernel().getTotalLength();    weightTons=car.getKernel().getAdjustedWeightTons();    List<Car> kCars=car.getKernel().getCars();    addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildCarPartOfKernel"),new Object[]{car.toString(),car.getKernelName(),kCars.size(),car.getKernel().getTotalLength(),Setup.getLengthUnit().toLowerCase()}));    for (    Car kCar : kCars) {      if (kCar == car) {        continue;      }      addLine(_buildReport,THREE,MessageFormat.format(Bundle.getMessage("buildCarKernelAssignedDest"),new Object[]{kCar.toString(),kCar.getKernelName(),rld.getName(),track.getName()}));      kCar.setTrain(_train);      kCar.setRouteLocation(rl);      kCar.setRouteDestination(rld);      kCar.setDestination(track.getLocation(),track,true);      kCar.setPreviousFinalDestination(car.getPreviousFinalDestination());      kCar.setPreviousFinalDestinationTrack(car.getPreviousFinalDestinationTrack());    }    car.updateKernel();  }  if (!_train.acceptsLoad(car.getLoadName(),car.getTypeName())) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildWarnCarDepartStaging"),new Object[]{car.toString(),car.getLoadName()}));  }  addLine(_buildReport,THREE,BLANK_LINE);  _numberCars++;  _completedMoves++;  _reqNumOfMoves--;  if (_reqNumOfMoves <= 0) {    _success=true;  }  _carList.remove(car);  _carIndex--;  rl.setCarMoves(rl.getCarMoves() + 1);  if (rl != rld) {    rld.setCarMoves(rld.getCarMoves() + 1);  }  finishAddRsToTrain(car,rl,rld,length,weightTons);  return;}  }
class C{  @Override public void shutdownEntity(){}  }
class C{  public JSONException(String message){  super(message);}  }
class C{  private static String mapToText(){  final StringBuffer buffer=new StringBuffer();  for (  final Map.Entry<Long,Integer> entry : m_countMap.entrySet()) {    buffer.append(String.format("%d:%d%n",entry.getKey(),entry.getValue()));  }  return buffer.toString();}  }
class C{  public NumExpr_ createNumExpr_(){  NumExpr_Impl numExpr_=new NumExpr_Impl();  return numExpr_;}  }
class C{  public Builder calendarId(long calendarId){  event.calendarId=calendarId;  return this;}  }
class C{  private String treebankTokenHacks(String s){  String token=s.replaceAll("\\\\/","/").replaceAll("\\\\\\*","*");  token=ParseUtils.convertBracketsFromPTBFormat(token);  return token;}  }
class C{  static public Object invoke(Object target,int identifier,Object[] args) throws Throwable {  Method[] allmethods=target.getClass().getMethods();  int n=allmethods.length;  String head=methodPrefix + identifier;  for (int i=0; i < n; ++i)   if (allmethods[i].getName().startsWith(head)) {    try {      return allmethods[i].invoke(target,args);    } catch (    java.lang.reflect.InvocationTargetException e) {      throw e.getTargetException();    }catch (    java.lang.IllegalAccessException e) {      throw new CannotInvokeException(e);    }  }  throw new CannotInvokeException("cannot find a method");}  }
class C{  public void toggleClickability(View view){  if (mClickablePolyline != null) {    mClickablePolyline.setClickable(((CheckBox)view).isChecked());  }  if (mMutablePolyline != null) {    mMutablePolyline.setClickable(((CheckBox)view).isChecked());  }}  }
class C{  public StandardCategoryItemLabelGenerator(){  super(DEFAULT_LABEL_FORMAT_STRING,NumberFormat.getInstance());}  }
class C{  int maxSubArraySumB(int[] A){  if (A == null || A.length == 0)   return 0;  int[] s=new int[A.length];  s[0]=A[0];  int max=A[0];  for (int i=1; i < n; i++) {    s[i]=s[i - 1] > 0 ? (A[i] + s[i - 1]) : A[i];    max=Math.max(max,s[i]);  }  return max;}  }
class C{  public double x(){  return x;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.128 -0400",hash_original_method="0A55185A25FF095B6278724D9B8AC890",hash_generated_method="E82E618C22DE478F69B7855AD8CDD8CA") public FileUtils(){  super();}  }
class C{  public static Command of(AggregateId aggregateId,StreamTimestamp commandTimestamp,VersionedName commandName,Tuple parameters,Type resultType){  checkNotNull(aggregateId,"aggregateId must not be null");  checkNotNull(commandTimestamp,"commandTimestamp must not be null");  checkNotNull(commandName,"commandName must not be null");  checkNotNull(parameters,"parameters must not be null");  checkNotNull(resultType,"resultType must not be null");  return new Command(aggregateId,commandTimestamp,Optional.empty(),commandName,parameters,resultType);}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer a=new SpanishAnalyzer();  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);  a.close();}  }
class C{  public EdgeEffect(Context context){  mPaint.setAntiAlias(true);  final int themeColor=Color.RED;  mPaint.setColor((themeColor & 0xffffff) | 0x33000000);  mPaint.setStyle(Paint.Style.FILL);  mPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_ATOP));  mInterpolator=new DecelerateInterpolator();}  }
class C{  public T declare(String value){  return attr("declare",value);}  }
class C{  public static <X extends Throwable>void throwOrHandle(final X e,final Predicate<X> p,final Consumer<X> handler){  if (p.test(e))   throw ExceptionSoftener.<RuntimeException>uncheck(e); else   handler.accept(e);}  }
class C{  public boolean specifiesHighAvailability(){  return (highAvailability != null && ((HighAvailabilityType.vplex_local.name().equals(highAvailability.getType())) || (HighAvailabilityType.vplex_distributed.name().equals(highAvailability.getType()))));}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public final FilterSet take(Set<Integer> statementIds){  if (isolatableCallbacks == null) {    throw new EPException("Operation not supported, please enable isolation in the engine configuration");  }  List<FilterSetEntry> list=new ArrayList<FilterSetEntry>();  callbacksLock.lock();  try {    for (    Map.Entry<FilterHandle,EventTypeIndexBuilderValueIndexesPair> entry : isolatableCallbacks.entrySet()) {      EventTypeIndexBuilderValueIndexesPair pair=entry.getValue();      if (statementIds.contains(entry.getKey().getStatementId())) {        list.add(new FilterSetEntry(entry.getKey(),pair.getFilterValueSet()));        EventType eventType=pair.getFilterValueSet().getEventType();        FilterHandleSetNode rootNode=eventTypeIndex.get(eventType);        for (int i=0; i < pair.getIndexPairs().length; i++) {          IndexTreeBuilder.remove(eventType,entry.getKey(),pair.getIndexPairs()[i],rootNode);        }      }    }    for (    FilterSetEntry removed : list) {      isolatableCallbacks.remove(removed.getHandle());    }  }  finally {    callbacksLock.unlock();  }  return new FilterSet(list);}  }
class C{  public boolean clientNode(){  String client=attributes.get("client");  return client != null && Booleans.parseBooleanExact(client);}  }
class C{  @Override void doOutsideScores(Tree<StateSet> tree,boolean unaryAbove,double[][][] spanScores){  if (grammar.isLogarithmMode() || lexicon.isLogarithmMode())   throw new Error("Grammar in logarithm mode!  Cannot do inside scores!");  if (tree.isLeaf())   return;  List<Tree<StateSet>> children=tree.getChildren();  StateSet parent=tree.getLabel();  short pState=parent.getState();  int nParentStates=parent.numSubStates();  if (tree.isPreTerminal()) {  } else {    double[] parentScores=parent.getOScores();    if (spanScores != null && !unaryAbove) {      for (int i=0; i < nParentStates; i++) {        parentScores[i]*=spanScores[parent.from][parent.to][stateClass[pState]];      }    }switch (children.size()) {case 0:      break;case 1:    StateSet child=children.get(0).getLabel();  short cState=child.getState();int nChildStates=child.numSubStates();double[] oScores=new double[nChildStates];HierarchicalAdaptiveUnaryRule urule=(HierarchicalAdaptiveUnaryRule)grammar.getUnaryRule(pState,cState);for (HierarchicalAdaptiveUnaryRule.SubRule subRule : urule.subRuleList) {if (subRule == null) continue;int level=subRule.level;int i=substatesToCover[level] * subRule.child;int j=i + substatesToCover[level];int k=substatesToCover[level] * subRule.parent;int l=k + substatesToCover[level];if (pState == 0) l=1;double pS=0;for (int np=k; np < l; np++) {pS+=parent.getOScore(np);}for (int cp=i; cp < j; cp++) {double score=pS * subRule.score;oScores[cp]+=score;}}child.setOScores(oScores);child.scaleOScores(parent.getOScale());unaryAbove=true;break;case 2:StateSet leftChild=children.get(0).getLabel();StateSet rightChild=children.get(1).getLabel();int nLeftChildStates=leftChild.numSubStates();int nRightChildStates=rightChild.numSubStates();short lState=leftChild.getState();short rState=rightChild.getState();double[] lOScores=new double[nLeftChildStates];double[] rOScores=new double[nRightChildStates];HierarchicalAdaptiveBinaryRule brule=(HierarchicalAdaptiveBinaryRule)grammar.getBinaryRule(pState,lState,rState);for (HierarchicalAdaptiveBinaryRule.SubRule subRule : brule.subRuleList) {if (subRule == null) continue;int level=subRule.level;int e=substatesToCover[level] * subRule.lChild;int f=e + substatesToCover[level];int i=substatesToCover[level] * subRule.rChild;int j=i + substatesToCover[level];int k=substatesToCover[level] * subRule.parent;int l=k + substatesToCover[level];double lcS=0;for (int lp=e; lp < f; lp++) {lcS+=leftChild.getIScore(lp);}double rcS=0;for (int rp=i; rp < j; rp++) {rcS+=rightChild.getIScore(rp);}double pS=0;for (int np=k; np < l; np++) {pS+=parent.getOScore(np);}double leftScore=pS * subRule.score * rcS;for (int lp=e; lp < f; lp++) {lOScores[lp]+=leftScore;}double rightScore=pS * subRule.score * lcS;for (int rp=i; rp < j; rp++) {rOScores[rp]+=rightScore;}}leftChild.setOScores(lOScores);leftChild.scaleOScores(parent.getOScale() + rightChild.getIScale());rightChild.setOScores(rOScores);rightChild.scaleOScores(parent.getOScale() + leftChild.getIScale());unaryAbove=false;break;default :throw new Error("Malformed tree: more than two children");}for (Tree<StateSet> child : children) {doOutsideScores(child,unaryAbove,spanScores);}}}  }
class C{  public void parseValue() throws UnsupportedEncodingException, ReplicatorException, SQLException {  if (alreadyParsedValue)   return;  if (rawVal == null) {    imageType=PlogLCRTag.TAG_POSTIMAGE;    columnVal.setValueNull();    columnSpec.setLength(0);    alreadyParsedValue=true;    return;  }  byte[] barr=new byte[rawVal.length * 4];  ByteBuffer b=ByteBuffer.wrap(barr,0,barr.length);  b.order(java.nio.ByteOrder.LITTLE_ENDIAN);  IntBuffer i=b.asIntBuffer();  i.put(rawVal);  int rawLength=b.getInt();  final int dataoff=4;  if (rawLength == 0) {    columnVal.setValueNull();    columnSpec.setLength(0);    alreadyParsedValue=true;    rawVal=null;    return;  }  if (this.datatype.equals(("NUMBER"))) {    if (rawLength == 1 && ((int)barr[dataoff + 0] & 0xff) == 0x80) {      columnVal.setValue(new BigDecimal(0));      columnSpec.setLength(1);    } else {      int length;      int shift;      StringBuilder rtval=new StringBuilder();      if (barr[dataoff + rawLength - 1] == 0x66) {        length=rawLength - 1;        shift=-(((int)barr[dataoff + 0] & 0xff) - 0x3e);        rtval.append("-.");        for (int o=1; o < length; o++)         rtval.append(String.format("%02d",101 - ((int)barr[dataoff + o] & 0xff)));      } else {        length=rawLength;        rtval.append(".");        shift=((int)barr[dataoff + 0] & 0xff) - 0xc1;        for (int o=1; o < length; o++)         rtval.append(String.format("%02d",((int)barr[dataoff + o] & 0xff) - 1));      }      BigDecimal bd=new BigDecimal(rtval.toString());      bd=bd.scaleByPowerOfTen(shift * 2 + 2);      String bdPlainString=bd.toPlainString();      BigDecimal bd2Rescaled=new BigDecimal(bdPlainString);      columnVal.setValue(bd2Rescaled);      columnSpec.setLength(bdPlainString.length());    }  } else   if (this.datatype.equals("VARCHAR2") || this.datatype.equals("VARCHAR") || this.datatype.equals("CHAR")|| this.datatype.equals("NVARCHAR2")|| this.datatype.equals("NVARCHAR")|| this.datatype.equals("NCHAR")|| this.datatype.equals("LONG")) {    byte[] trimmed=new byte[rawLength];    b.get(trimmed,0,rawLength);    String parsedVal=new String(trimmed,"UTF-8");    columnVal.setValue(parsedVal);    columnSpec.setLength(parsedVal.length());  } else   if (this.datatype.equals("RAW") || this.datatype.equals("LONG RAW")) {    byte[] trimmed=new byte[rawLength];    b.get(trimmed,0,rawLength);    SerialBlob parsedVal=new SerialBlob(trimmed);    columnVal.setValue(parsedVal);    columnSpec.setLength((int)parsedVal.length());  } else   if (this.datatype.equals("DATE")) {    GregorianCalendar gcal=new GregorianCalendar((((int)barr[dataoff + 0] & 0xff) - 100) * 100 + (((int)barr[dataoff + 1] & 0xff) - 100),barr[dataoff + 2] - 1,barr[dataoff + 3],barr[dataoff + 4] - 1,barr[dataoff + 5] - 1,barr[dataoff + 6] - 1);    java.sql.Timestamp ts=new java.sql.Timestamp(gcal.getTimeInMillis());    columnVal.setValue(ts);    columnSpec.setLength(ts.toString().length());  } else   if (this.datatype.equals("TIMESTAMP")) {    GregorianCalendar gcal=new GregorianCalendar((((int)barr[dataoff + 0] & 0xff) - 100) * 100 + (((int)barr[dataoff + 1] & 0xff) - 100),barr[dataoff + 2] - 1,barr[dataoff + 3],barr[dataoff + 4] - 1,barr[dataoff + 5] - 1,barr[dataoff + 6] - 1);    int umilli=0;    for (int j=7; j < rawLength; j++)     umilli=(umilli << 8) + ((int)barr[dataoff + j] & 0xff);    java.sql.Timestamp ts=new java.sql.Timestamp(gcal.getTimeInMillis());    ts.setNanos(umilli);    columnVal.setValue(ts);    columnSpec.setLength(ts.toString().length());  } else   if (this.datatype.equals("TIMESTAMP WITH TIME ZONE")) {    GregorianCalendar gcal=new GregorianCalendar((((int)barr[dataoff + 0] & 0xff) - 100) * 100 + (((int)barr[dataoff + 1] & 0xff) - 100),barr[dataoff + 2] - 1,barr[dataoff + 3],barr[dataoff + 4] - 1,barr[dataoff + 5] - 1,barr[dataoff + 6] - 1);    int umilli=0;    for (int j=7; j < rawLength - 2; j++)     umilli=(umilli << 8) + ((int)barr[dataoff + j] & 0xff);    int tzh=((int)barr[dataoff + rawLength - 2] & 0xff);    int tzm=((int)barr[dataoff + rawLength - 1] & 0xff);    if (tzh != 0xd0 || tzm != 0x4) {      logger.warn("Timezone was not UTC in TIMESTAMP WITH TIME ZONE (tzh=" + tzh + ", tzm="+ tzm+ ")");    }    java.sql.Timestamp ts=new java.sql.Timestamp(gcal.getTimeInMillis());    ts.setNanos(umilli);    columnVal.setValue(ts);    columnSpec.setLength(ts.toString().length());  } else   if (this.datatype.equals("TIMESTAMP WITH LOCAL TIME ZONE")) {    GregorianCalendar gcal=new GregorianCalendar((((int)barr[dataoff + 0] & 0xff) - 100) * 100 + (((int)barr[dataoff + 1] & 0xff) - 100),barr[dataoff + 2] - 1,barr[dataoff + 3],barr[dataoff + 4] - 1,barr[dataoff + 5] - 1,barr[dataoff + 6] - 1);    int umilli=0;    for (int j=7; j < rawLength; j++)     umilli=(umilli << 8) + ((int)barr[dataoff + j] & 0xff);    java.sql.Timestamp ts=new java.sql.Timestamp(gcal.getTimeInMillis());    ts.setNanos(umilli);    columnVal.setValue(ts);    columnSpec.setLength(ts.toString().length());  } else   if (this.datatype.equals("INTERVAL DAY TO SECOND")) {    long d=0;    for (int j=0; j < 4; j++)     d=(d << 8) + ((int)barr[dataoff + j] & 0xff);    d-=0x80000000L;    int h=((int)barr[dataoff + 4] & 0xff) - 60;    int mi=((int)barr[dataoff + 5] & 0xff) - 60;    int s=((int)barr[dataoff + 6] & 0xff) - 60;    long umilli=0;    for (int j=7; j < 11; j++)     umilli=(umilli << 8) + ((int)barr[dataoff + j] & 0xff);    umilli-=0x80000000L;    String parsedVal=String.format("%+d %d:%d:%d.%05d",d,Math.abs(h),Math.abs(mi),Math.abs(s),Math.abs(umilli));    columnVal.setValue(parsedVal);    columnSpec.setLength(parsedVal.length());  } else   if (this.datatype.equals("INTERVAL YEAR TO MONTH")) {    long y=0;    for (int j=0; j < 4; j++)     y=(y << 8) + ((int)barr[dataoff + j] & 0xff);    y-=0x80000000L;    int m=((int)barr[dataoff + 4] & 0xff) - 60;    String parsedVal=String.format("%+d-%d",y,Math.abs(m));    columnVal.setValue(parsedVal);    columnSpec.setLength(parsedVal.length());  } else   if (this.datatype.equals("CLOB") || this.datatype.equals("CLOB_UTF16") || this.datatype.equals("NCLOB")) {    @SuppressWarnings("unused") int rawLengthUpper32=b.getInt();    int actualLength;    if (this.datatype.equals("CLOB_UTF16") || this.datatype.equals("NCLOB")) {      actualLength=lobLength > 0 ? (int)lobLength / 2 : rawLength;    } else {      actualLength=lobLength > 0 ? (int)lobLength : rawLength;    }    if (logger.isDebugEnabled()) {      logger.debug(bytesToHex(barr));      logger.debug("CLOB:" + actualLength + "(lobLength="+ lobLength+ ", rawLength="+ rawLength+ ")");    }    byte[] trimmed=new byte[rawLength];    b.get(trimmed,0,rawLength);    String parsedVal=new String(trimmed,"UTF-8").substring(0,actualLength);    columnVal.setValue(parsedVal);    columnSpec.setLength(parsedVal.length());  } else   if (this.datatype.equals("BLOB")) {    @SuppressWarnings("unused") int rawLengthUpper32=b.getInt();    int actualLength=lobLength > 0 ? (int)lobLength : rawLength;    if (logger.isDebugEnabled()) {      logger.debug(bytesToHex(barr));      logger.debug("BLOB:" + actualLength + "(lobLength="+ lobLength+ ", rawLength="+ rawLength);    }    byte[] trimmed=new byte[actualLength];    b.get(trimmed,0,actualLength);    SerialBlob parsedVal=new SerialBlob(trimmed);    columnVal.setValue(parsedVal);    columnSpec.setLength((int)parsedVal.length());  } else {    columnVal.setValueNull();    columnSpec.setLength(0);    alreadyParsedValue=true;  }  alreadyParsedValue=true;  rawVal=null;}  }
class C{  public double dirtyPrice(){  return settlementValue() / notional(settlementDate()) * 100.0;}  }
class C{  private boolean isOptionKeyDown(InputEvent event){  return event.isAltDown();}  }
class C{  public void writeV6(final String filename){  final org.matsim.core.population.io.PopulationWriter writer=new org.matsim.core.population.io.PopulationWriter(transformation,this.population,this.network);  writer.putAttributeConverters(attributeConverters);  writer.writeV6(filename);}  }
class C{  public SliderTrackPainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(CacheMode.NO_CACHING);}  }
class C{  public SolrQuery(String q){  this();  this.set(CommonParams.Q,q);}  }
class C{  @Override public boolean communicationInitiated(){  return bugsPopulated.getCount() == 0 && communicationInitiated && networkClient.ready();}  }
class C{  protected boolean beforeDelete(){  DB.executeUpdate("DELETE FROM AD_View_Trl WHERE AD_View_ID=? ",getAD_View_ID(),get_TrxName());  return true;}  }
class C{  public int lastIndexOf(int offset,double value){  for (int i=offset; i-- > 0; ) {    if (_data[i] == value) {      return i;    }  }  return -1;}  }
class C{  public void finalStatus(GameStatus gs){  if (!gs.isFinal)   return;  int maxVP=0;  int minTurns=10000;  ArrayList<Integer> winners=new ArrayList<Integer>();  for (int i=0; i < players.getCount(); i++) {    if (gs.handSizes[i] > maxVP) {      winners.clear();      winners.add(i);      maxVP=gs.handSizes[i];      minTurns=gs.turnCounts[i];    } else     if (gs.handSizes[i] == maxVP) {      if (gs.turnCounts[i] < minTurns) {        winners.clear();        winners.add(i);        minTurns=gs.turnCounts[i];      } else       if (gs.turnCounts[i] == minTurns)       winners.add(i);    }  }  try {    if (!finalStatsReported) {      finalStatsReported=true;      ArrayList<String> pl=new ArrayList<String>(players.getCount());      for (int i=0; i < players.getCount(); i++) {        pl.add(gs.realNames[i]);      }      achievements.gameOver(pl,winners);    }  } catch (  Exception e) {    e.printStackTrace();  }  boolean won=false;  for (  int i : winners)   if (i == gs.whoseTurn)   won=true;  tr.setVisibility(GONE);  gameOver.setVisibility(VISIBLE);  gameOverScroll.setVisibility(VISIBLE);  @SuppressWarnings("deprecation") LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);  FinalView fv=new FinalView(top,this,gs.realNames[gs.whoseTurn],gs.turnCounts[gs.whoseTurn],gs.embargos,gs.numCards[gs.whoseTurn],gs.supplySizes,gs.handSizes[gs.whoseTurn],won);  fv.setLayoutParams(lp);  showCardsButtons.add(fv.showCards);  gameOver.addView(fv);}  }
class C{  protected void drawLabels(Canvas c,float pos,PointF anchor){  final float labelRotationAngleDegrees=mXAxis.getLabelRotationAngle();  float[] position=new float[]{0f,0f};  for (int i=mMinX; i <= mMaxX; i+=mXAxis.mAxisLabelModulus) {    position[0]=i;    mTrans.pointValuesToPixel(position);    if (mViewPortHandler.isInBoundsX(position[0])) {      String label=mXAxis.getValues().get(i);      if (mXAxis.isAvoidFirstLastClippingEnabled()) {        if (i == mXAxis.getValues().size() - 1 && mXAxis.getValues().size() > 1) {          float width=Utils.calcTextWidth(mAxisLabelPaint,label);          if (width > mViewPortHandler.offsetRight() * 2 && position[0] + width > mViewPortHandler.getChartWidth())           position[0]-=width / 2;        } else         if (i == 0) {          float width=Utils.calcTextWidth(mAxisLabelPaint,label);          position[0]+=width / 2;        }      }      drawLabel(c,label,i,position[0],pos,anchor,labelRotationAngleDegrees);    }  }}  }
class C{  public static int findLastIndexOf(Object self,Closure closure){  return findLastIndexOf(self,0,closure);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.476 -0400",hash_original_method="F2A8A7114388A83AFB9148728DC98FB1",hash_generated_method="84AABE52B5199505ECE3C40F729CE0BC") private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3,String criteria4,String criteria5,String criteria6){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3,criteria4,criteria5,criteria6});}  }
class C{  public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory){  return new ThreadPoolExecutor(0,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),threadFactory);}  }
class C{  public static DataSet readInContinuousData(File file,char delimiter) throws IOException {  byte delim=(byte)delimiter;  int numRow=DataUtility.countLine(file) - 1;  List<Node> nodes=new LinkedList<>();  double[][] data;  try (FileChannel fc=new RandomAccessFile(file,"r").getChannel()){    MappedByteBuffer buffer=fc.map(FileChannel.MapMode.READ_ONLY,0,fc.size());    StringBuilder dataBuilder=new StringBuilder();    byte currentChar;    byte prevChar=NEW_LINE;    int numCol=0;    while (buffer.hasRemaining()) {      currentChar=buffer.get();      if (currentChar == CARRIAGE_RETURN) {        currentChar=NEW_LINE;      }      if (currentChar == delim || (currentChar == NEW_LINE && prevChar != NEW_LINE)) {        nodes.add(new ContinuousVariable(dataBuilder.toString().trim()));        numCol++;        dataBuilder.delete(0,dataBuilder.length());        if (currentChar == NEW_LINE) {          prevChar=currentChar;          break;        }      } else {        if (currentChar == SINGLE_QUOTE || currentChar == DOUBLE_QUOTE) {          continue;        }        dataBuilder.append((char)currentChar);      }      prevChar=currentChar;    }    if (prevChar == delim) {      nodes.add(new ContinuousVariable(dataBuilder.toString().trim()));      numCol++;    }    String leftover=dataBuilder.toString().trim();    if (leftover.length() > 0) {      nodes.add(new ContinuousVariable(leftover));      numCol++;    }    data=new double[numRow][numCol];    int row=0;    int col=0;    while (buffer.hasRemaining()) {      currentChar=buffer.get();      if (currentChar == CARRIAGE_RETURN) {        currentChar=NEW_LINE;      }      if (currentChar == delim || (currentChar == NEW_LINE && prevChar != NEW_LINE)) {        String value=dataBuilder.toString().trim();        if (value.length() > 0) {          try {            data[row][col++]=Double.parseDouble(value);          } catch (          NumberFormatException exception) {            throw new IOException(String.format("Unable to parse data at line %d column %d\n",row + 2,col),exception);          }        } else {          col++;        }        dataBuilder.delete(0,dataBuilder.length());        if (currentChar == NEW_LINE) {          col=0;          row++;        }      } else {        if (currentChar == SINGLE_QUOTE || currentChar == DOUBLE_QUOTE) {          continue;        }        dataBuilder.append((char)currentChar);      }      prevChar=currentChar;    }    String value=dataBuilder.toString().trim();    if (value.length() > 0) {      try {        data[row][col++]=Double.parseDouble(value);      } catch (      NumberFormatException exception) {        throw new IOException(String.format("Unable to parse data at line %d column %d\n",row + 2,col),exception);      }    }  }   return new BoxDataSet(new DoubleDataBox(data),nodes);}  }
class C{  public static int rgba(float r,float g,float b,float a){  return ((((int)(a * 255 + 0.5)) & 0xFF) << 24) | ((((int)(r * 255 + 0.5)) & 0xFF) << 16) | ((((int)(g * 255 + 0.5)) & 0xFF) << 8)| (((int)(b * 255 + 0.5)) & 0xFF);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  UpdateVersionManaferDao.createTable(db,ifNotExists);}  }
class C{  public DocumentValueSourceDictionary(IndexReader reader,String field,ValueSource weightsValueSource){  super(reader,field,null,null);  this.weightsValueSource=weightsValueSource;}  }
class C{  public static void sendResponse(HttpServletResponse response,String contentType,String str) throws IOException {  response.setContentType(contentType);  PrintWriter out=response.getWriter();  out.println(str);  out.close();}  }
class C{  public Command removeArgument(String arg){  arguments.remove(arg);  return this;}  }
class C{  public void onPublish(Record record){  delegate.onPublish(record);}  }
class C{  static public void assertRightAligned(View first,View second){  int[] xy=new int[2];  first.getLocationOnScreen(xy);  int firstRight=xy[0] + first.getMeasuredWidth();  second.getLocationOnScreen(xy);  int secondRight=xy[0] + second.getMeasuredWidth();  assertEquals("views are not right aligned",firstRight,secondRight);}  }
class C{  public static int[][] readInt2D(){  int m=StdIn.readInt();  int n=StdIn.readInt();  int[][] a=new int[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      a[i][j]=StdIn.readInt();    }  }  return a;}  }
class C{  public PKCS10CertificationRequest(String signatureAlgorithm,X509Name subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey,String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  String algorithmName=Strings.toUpperCase(signatureAlgorithm);  DERObjectIdentifier sigOID=(DERObjectIdentifier)algorithms.get(algorithmName);  if (sigOID == null) {    try {      sigOID=new DERObjectIdentifier(algorithmName);    } catch (    Exception e) {      throw new IllegalArgumentException("Unknown signature type requested");    }  }  if (subject == null) {    throw new IllegalArgumentException("subject must not be null");  }  if (key == null) {    throw new IllegalArgumentException("public key must not be null");  }  if (noParams.contains(sigOID)) {    this.sigAlgId=new AlgorithmIdentifier(sigOID);  } else   if (params.containsKey(algorithmName)) {    this.sigAlgId=new AlgorithmIdentifier(sigOID,(ASN1Encodable)params.get(algorithmName));  } else {    this.sigAlgId=new AlgorithmIdentifier(sigOID,DERNull.INSTANCE);  }  try {    ASN1Sequence seq=(ASN1Sequence)ASN1Primitive.fromByteArray(key.getEncoded());    this.reqInfo=new CertificationRequestInfo(subject,new SubjectPublicKeyInfo(seq),attributes);  } catch (  IOException e) {    throw new IllegalArgumentException("can't encode public key");  }  Signature sig;  if (provider == null) {    sig=Signature.getInstance(signatureAlgorithm);  } else {    sig=Signature.getInstance(signatureAlgorithm,provider);  }  sig.initSign(signingKey);  try {    sig.update(reqInfo.getEncoded(ASN1Encoding.DER));  } catch (  Exception e) {    throw new IllegalArgumentException("exception encoding TBS cert request - " + e);  }  this.sigBits=new DERBitString(sig.sign());}  }
class C{  public void comprobarDisponibilidadDetallesPrestamoProrroga(PrestamoVO prestamo,Collection detalles){  Iterator it=detalles.iterator();  while (it.hasNext()) {    DetallePrestamoVO detalle=(DetallePrestamoVO)it.next();    String dias_reserva=PropertyHelper.getProperty(PropertyHelper.PLAZO_PRORROGA);    Calendar fechaFinal=new GregorianCalendar();    if ((prestamo.getFmaxfinprestamo() != null) && (prestamo.getFmaxfinprestamo().after(DBUtils.getFechaActual())))     fechaFinal.setTime(prestamo.getFmaxfinprestamo());    fechaFinal.add(Calendar.HOUR,Integer.parseInt(dias_reserva) * PrestamosConstants.HORAS_DIA);    detalle.setDisponibilidad(this.isDetalleDisponible(detalle,DBUtils.getFechaActual(),fechaFinal.getTime(),prestamo.tieneReserva()));  }}  }
class C{  public void init(RemoteAuthenticatedUser user,SharedConnectionDefinition definition){  this.user=user;  this.definition=definition;}  }
class C{  public TravelDistanceHandler(final double simulationEndTime,final int noOfTimeBins,final String ShapeFile,final Network network){  this(simulationEndTime,noOfTimeBins,network,ShapeFile,null);  LOGGER.info("Area filtering is used, result will include links falls inside the given shape and persons from all user groups.");}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public ResultMatrixLatex(ResultMatrix matrix){  super(matrix);}  }
class C{  public static Vector<?> create(Vector<String> markerNames,Properties properties,ProgressSupport progressSupport){  return getInstance()._create(markerNames,null,properties,progressSupport,false);}  }
class C{  @Override public final long readLong() throws IOException {  d.readFully(w,0,8);  return (long)(w[7]) << 56 | (long)(w[6] & 0xff) << 48 | (long)(w[5] & 0xff) << 40 | (long)(w[4] & 0xff) << 32 | (long)(w[3] & 0xff) << 24 | (long)(w[2] & 0xff) << 16 | (long)(w[1] & 0xff) << 8 | (long)(w[0] & 0xff);}  }
class C{  public LZ4(){  super(30,2,21,24,1);}  }
class C{  public void removeSeries(int index){  TimePeriodValues series=getSeries(index);  if (series != null) {    removeSeries(series);  }}  }
class C{  @Override public String rpoplpush(final String srckey,final String dstkey){  checkIsInMultiOrPipeline();  client.rpoplpush(srckey,dstkey);  return client.getBulkReply();}  }
class C{  public RootCallTarget lookup(LLVMFunction function){  int functionIndex=function.getFunctionIndex();  if (functionIndex >= 0 && functionIndex < functionPtrCallTargetMap.length) {    RootCallTarget result=functionPtrCallTargetMap[functionIndex];    return result;  } else {    return null;  }}  }
class C{  public int size(){  return namesAndValues.length / 2;}  }
class C{  public Matrix prob_Z(Matrix X){  Matrix P_Z=MatrixUtils.sigma(X.times(W));  MatrixUtils.fillCol(P_Z.getArray(),0,1.0);  return P_Z;}  }
class C{  private void updateProgress(int count){  bytesWritten+=count;  responseListener.sendProgressMessage(bytesWritten,totalSize);}  }
class C{  @Inline static void compilePutfieldBarrierAddress(Assembler asm,GPR offset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,offset,locationMetadata,Entrypoints.addressFieldWriteBarrierMethod);}  }
class C{  static public void useDefaultXPathSupport(){synchronized (STATIC_LOCK) {    xpathSupportClass=null;    jaxenXPathSupport=null;    try {      useXalanXPathSupport();    } catch (    Exception e) {      ;    }    if (xpathSupportClass == null)     try {      useSunInternalXPathSupport();    } catch (    Exception e) {      ;    }    if (xpathSupportClass == null)     try {      useJaxenXPathSupport();    } catch (    Exception e) {      ;    }  }}  }
class C{  private VarReplacementProvider(){}  }
class C{  private XYDataset createDataset2(){  XYSeries series=new XYSeries("Series 2");  XYSeriesCollection collection=new XYSeriesCollection(series);  return collection;}  }
class C{  private void verifyIsDelegatingForDebugOrLower(final Level level,final boolean expectIsDelegating) throws Exception {  writeSimpleConfigFile(this.configFile,level);  this.appenderContext.reconfigure();  assertThat(this.logger.getLevel(),is(level));  assertThat(this.logger.isTraceEnabled(),is(level.isLessSpecificThan(Level.TRACE)));  assertThat(this.logger.isDebugEnabled(),is(level.isLessSpecificThan(Level.DEBUG)));  assertThat(this.logger.isInfoEnabled(),is(level.isLessSpecificThan(Level.INFO)));  assertThat(this.logger.isWarnEnabled(),is(level.isLessSpecificThan(Level.WARN)));  assertThat(this.logger.isErrorEnabled(),is(level.isLessSpecificThan(Level.ERROR)));  assertThat(this.logger.isFatalEnabled(),is(level.isLessSpecificThan(Level.FATAL)));  assertThat(this.logger.isTraceEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.TRACE)));  assertThat(this.logger.isDebugEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.DEBUG)));  assertThat(this.logger.isInfoEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.INFO)));  assertThat(this.logger.isWarnEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.WARN)));  assertThat(this.logger.isErrorEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.ERROR)));  assertThat(this.logger.isFatalEnabled(this.unusedMarker),is(level.isLessSpecificThan(Level.FATAL)));  final boolean delegating=((FastLogger)this.logger).isDelegating();  assertThat(delegating,is(expectIsDelegating));  assertThat(delegating,is(level.isLessSpecificThan(Level.DEBUG)));  assertThat(delegating,is(expectIsDelegating));}  }
class C{  public FocusControl(){  this(1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.725 -0400",hash_original_method="8CE491D4D9BE51D07DB14BE0E12E38B2",hash_generated_method="0813E9C241A583114A6037CEB70A7419") public FileWriterWithEncoding(File file,String encoding,boolean append) throws IOException {  super();  this.out=initWriter(file,encoding,append);}  }
class C{  public static ComponentUI createUI(JComponent b){  return new SynthCheckBoxUI();}  }
class C{  public boolean validateReceipt(List<String> sendTopics,List<Integer> expectedQosList,int expectedBatchNumber,int nPublishers,List<byte[]> sentBytes,boolean expectOrdered) throws MqttException, InterruptedException {  final String methodName="validateReceipt";  log.entering(className,methodName,new Object[]{sendTopics,expectedQosList,sentBytes});  int expectedMessageNumbers[]=new int[nPublishers];  for (int i=0; i < nPublishers; i++) {    expectedMessageNumbers[i]=0;  }  long waitMilliseconds=10000;  long totWait=0;  int messageNo=0;  while (true) {    long startWait=System.currentTimeMillis();    ReceivedMessage receivedMessage=receiveNext(waitMilliseconds);    if (receivedMessage == null) {      break;    }    messageNo++;    totWait+=(System.currentTimeMillis() - startWait);    waitMilliseconds=Math.max(totWait / messageNo,500);    byte[] payload=receivedMessage.message.getPayload();    String payloadString=new String(payload);    if (!payloadString.startsWith("Batch Message payload :")) {      report("Received invalid payload\n" + "Received:" + payloadString);      report("Payload did not start with {" + "Batch Message payload :" + "}");      log.exiting(className,methodName,"Return false: " + receivedMessage);      return false;    }    String[] payloadParts=payloadString.split(":");    if (payloadParts.length != 5) {      report("Received invalid payload\n" + "Received:" + payloadString);      report("Payload was not of expected format");      log.finer("Return false: " + receivedMessage);      return false;    }    try {      int batchNumber=Integer.parseInt(payloadParts[1]);      if (batchNumber != expectedBatchNumber) {        report("Received invalid payload\n" + "Received:" + payloadString);        report("batchnumber" + batchNumber + " was not the expected value "+ expectedBatchNumber);        log.exiting(className,methodName,"Return false: " + receivedMessage);        return false;      }    } catch (    NumberFormatException e) {      report("Received invalid payload\n" + "Received:" + payloadString);      report("batchnumber was not a numeric value");      log.exiting(className,methodName,"Return false: " + receivedMessage);      return false;    }    int publisher=-1;    try {      publisher=Integer.parseInt(payloadParts[2]);      if ((publisher < 0) || (publisher >= nPublishers)) {        report("Received invalid payload\n" + "Received:" + payloadString);        report("publisher " + publisher + " was not in the range 0 - "+ (nPublishers - 1));        log.exiting(className,methodName,"Return false: " + receivedMessage);        return false;      }    } catch (    NumberFormatException e) {      report("Received invalid payload\n" + "Received:" + payloadString);      report("publisher was not a numeric value");      log.exiting(className,methodName,"Return false: " + receivedMessage);      return false;    }    if (expectOrdered) {      try {        int messageNumber=Integer.parseInt(payloadParts[3]);        if (messageNumber == expectedMessageNumbers[publisher]) {          expectedMessageNumbers[publisher]+=1;        } else {          report("Received invalid payload\n" + "Received:" + payloadString);          report("messageNumber " + messageNumber + " was received out of sequence - expected value was "+ expectedMessageNumbers[publisher]);          log.exiting(className,methodName,"Return false: " + receivedMessage);          return false;        }      } catch (      NumberFormatException e) {        report("Received invalid payload\n" + "Received:" + payloadString);        report("messageNumber was not a numeric value");        log.exiting(className,methodName,"Return false: " + receivedMessage);        return false;      }    }    int location;    for (location=0; location < sentBytes.size(); location++) {      if (Arrays.equals(payload,sentBytes.get(location))) {        break;      }    }    String sendTopic=null;    int expectedQos=-1;    if (location < sentBytes.size()) {      sentBytes.remove(location);      sendTopic=sendTopics.remove(location);      expectedQos=expectedQosList.remove(location);    } else {      report("Received invalid payload\n" + "Received:" + payloadString);      for (      byte[] expectedPayload : sentBytes) {        report("\texpected message :" + new String(expectedPayload));      }      log.exiting(className,methodName,"Return false: " + receivedMessage);      return false;    }    if (!sendTopic.equals(receivedMessage.topic)) {      report(" Received invalid topic sent=" + sendTopic + " received topic="+ receivedMessage.topic);      log.exiting(className,methodName,"Return false: " + receivedMessage);      return false;    }    if (expectedQos != receivedMessage.message.getQos()) {      report("expectedQos=" + expectedQos + " != Received Qos="+ receivedMessage.message.getQos());      log.exiting(className,methodName,"Return false: " + receivedMessage);      return false;    }  }  if (!sentBytes.isEmpty()) {    for (    byte[] missedPayload : sentBytes) {      report("Did not receive message \n" + new String(missedPayload));    }    log.exiting(className,methodName,"Return false");    return false;  }  log.exiting(className,methodName,new Object[]{"return true"});  return true;}  }
class C{  private String[] canonicalizePaths(final String[] paths){  final String[] canonical=new String[paths.length];  for (int i=0; i < paths.length; i++) {    canonical[i]=LocalPath.canonicalize(paths[i]);  }  return canonical;}  }
class C{  public T caseAnonymous_activity_2_(Anonymous_activity_2_ object){  return null;}  }
class C{  public static Gson newGson(){  return new GsonBuilder().create();}  }
class C{  public void addInputHash(byte[][] hashes) throws Exception {  if (nodes != null) {    throw new IllegalStateException("Cannot add inputs to finished tree");  }  if (hashes.length == 1) {    inputs.add(hashes[0]);  } else {    inputs.add(digestHashStep(hashAlgorithm,hashes));    multiparts.put(inputs.size() - 1,hashes);  }}  }
class C{  private static int applyMaskPenaltyRule1Internal(ByteMatrix matrix,boolean isHorizontal){  int penalty=0;  int iLimit=isHorizontal ? matrix.getHeight() : matrix.getWidth();  int jLimit=isHorizontal ? matrix.getWidth() : matrix.getHeight();  byte[][] array=matrix.getArray();  for (int i=0; i < iLimit; i++) {    int numSameBitCells=0;    int prevBit=-1;    for (int j=0; j < jLimit; j++) {      int bit=isHorizontal ? array[i][j] : array[j][i];      if (bit == prevBit) {        numSameBitCells++;      } else {        if (numSameBitCells >= 5) {          penalty+=N1 + (numSameBitCells - 5);        }        numSameBitCells=1;        prevBit=bit;      }    }    if (numSameBitCells >= 5) {      penalty+=N1 + (numSameBitCells - 5);    }  }  return penalty;}  }
class C{  public long count(){  return count;}  }
class C{  public String sqlObjectDetail_eraseColumn(String vendorName,String catalogName,String schemaName,String tableName,String columnName){  columnName=normalizeColumnName(vendorName,columnName);  return m_interfaces.get(getDBVendorID(vendorName)).sqlObjectDetail_eraseColumn(catalogName,schemaName,tableName,columnName);}  }
class C{  public FastByteBuffer(int size){  if (size < 0) {    throw new IllegalArgumentException("Invalid size: " + size);  }  this.minChunkLen=size;}  }
class C{  void put(final MethodWriter owner,final ByteVector out,final int source,final boolean wideOffset){  if ((status & RESOLVED) == 0) {    if (wideOffset) {      addReference(-1 - source,out.length);      out.putInt(-1);    } else {      addReference(source,out.length);      out.putShort(-1);    }  } else {    if (wideOffset) {      out.putInt(position - source);    } else {      out.putShort(position - source);    }  }}  }
class C{  @Override public void draw(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea,CategoryAxis domainAxis,ValueAxis rangeAxis){  CategoryDataset dataset=plot.getDataset();  int catIndex1=dataset.getColumnIndex(this.category1);  int catIndex2=dataset.getColumnIndex(this.category2);  int catCount=dataset.getColumnCount();  double lineX1=0.0f;  double lineY1=0.0f;  double lineX2=0.0f;  double lineY2=0.0f;  PlotOrientation orientation=plot.getOrientation();  RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(plot.getDomainAxisLocation(),orientation);  RectangleEdge rangeEdge=Plot.resolveRangeAxisLocation(plot.getRangeAxisLocation(),orientation);  if (orientation == PlotOrientation.HORIZONTAL) {    lineY1=domainAxis.getCategoryJava2DCoordinate(CategoryAnchor.MIDDLE,catIndex1,catCount,dataArea,domainEdge);    lineX1=rangeAxis.valueToJava2D(this.value1,dataArea,rangeEdge);    lineY2=domainAxis.getCategoryJava2DCoordinate(CategoryAnchor.MIDDLE,catIndex2,catCount,dataArea,domainEdge);    lineX2=rangeAxis.valueToJava2D(this.value2,dataArea,rangeEdge);  } else   if (orientation == PlotOrientation.VERTICAL) {    lineX1=domainAxis.getCategoryJava2DCoordinate(CategoryAnchor.MIDDLE,catIndex1,catCount,dataArea,domainEdge);    lineY1=rangeAxis.valueToJava2D(this.value1,dataArea,rangeEdge);    lineX2=domainAxis.getCategoryJava2DCoordinate(CategoryAnchor.MIDDLE,catIndex2,catCount,dataArea,domainEdge);    lineY2=rangeAxis.valueToJava2D(this.value2,dataArea,rangeEdge);  }  g2.setPaint(this.paint);  g2.setStroke(this.stroke);  g2.drawLine((int)lineX1,(int)lineY1,(int)lineX2,(int)lineY2);}  }
class C{  private static List<ResultPoint[]> detect(boolean multiple,BitMatrix bitMatrix){  List<ResultPoint[]> barcodeCoordinates=new ArrayList<>();  int row=0;  int column=0;  boolean foundBarcodeInRow=false;  while (row < bitMatrix.getHeight()) {    ResultPoint[] vertices=findVertices(bitMatrix,row,column);    if (vertices[0] == null && vertices[3] == null) {      if (!foundBarcodeInRow) {        break;      }      foundBarcodeInRow=false;      column=0;      for (      ResultPoint[] barcodeCoordinate : barcodeCoordinates) {        if (barcodeCoordinate[1] != null) {          row=(int)Math.max(row,barcodeCoordinate[1].getY());        }        if (barcodeCoordinate[3] != null) {          row=Math.max(row,(int)barcodeCoordinate[3].getY());        }      }      row+=ROW_STEP;      continue;    }    foundBarcodeInRow=true;    barcodeCoordinates.add(vertices);    if (!multiple) {      break;    }    if (vertices[2] != null) {      column=(int)vertices[2].getX();      row=(int)vertices[2].getY();    } else {      column=(int)vertices[4].getX();      row=(int)vertices[4].getY();    }  }  return barcodeCoordinates;}  }
class C{  private void writeTimeStamp(byte[] buffer,int offset,long time){  long seconds=time / 1000L;  long milliseconds=time - seconds * 1000L;  seconds+=OFFSET_1900_TO_1970;  buffer[offset++]=(byte)(seconds >> 24);  buffer[offset++]=(byte)(seconds >> 16);  buffer[offset++]=(byte)(seconds >> 8);  buffer[offset++]=(byte)(seconds >> 0);  long fraction=milliseconds * 0x100000000L / 1000L;  buffer[offset++]=(byte)(fraction >> 24);  buffer[offset++]=(byte)(fraction >> 16);  buffer[offset++]=(byte)(fraction >> 8);  buffer[offset++]=(byte)(Math.random() * 255.0);}  }
class C{  private Pair<Account,SipUri> guess(){  SipUri number=mNumberAdapter == null ? mPreferredNumber : ((CallContact.Phone)mNumberSpinner.getSelectedItem()).getNumber();  Account a=mService.getAccount(mConversation.getLastAccountUsed());  if (a == null && number != null)   a=mService.guessAccount(number);  if (a != null && (number == null))   number=new SipUri(mConversation.getLastNumberUsed(a.getAccountID()));  if (a == null) {    List<Account> accs=mService.getAccounts();    if (accs.isEmpty()) {      finish();      return null;    } else     a=accs.get(0);  }  if (number == null || number.isEmpty())   number=mConversation.contact.getPhones().get(0).getNumber();  return new Pair<>(a,number);}  }
class C{  public void bindService(){  if (!isServiceConnected()) {    FileDownloadServiceUIGuard.getImpl().bindStartByContext(FileDownloadHelper.getAppContext());  }}  }
class C{  public char next() throws JSONException {  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new JSONException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  public boolean processIt(ProcessInfo pi,Trx trx){  return processIt(pi,trx,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:40.373 -0500",hash_original_method="43C05B8A0FF5CBFFF8E027DF94B104CB",hash_generated_method="BEA9506A49791E09E851664F93E1DBF1") public void clear(){  int n=mSize;  Object[] values=mValues;  for (int i=0; i < n; i++) {    values[i]=null;  }  mSize=0;  mGarbage=false;}  }
class C{  private void readMimeFile(Reader mimeFile) throws IOException {  mimeMap=new HashMap<String,AdaptiveRate>();  BufferedReader reader=new BufferedReader(mimeFile);  String line=null;  String[] splits=null;  while ((line=reader.readLine()) != null) {    if (StringUtils.isNotBlank(line) && !line.startsWith("#")) {      splits=line.split("\t");      if (splits.length == 3) {        mimeMap.put(StringUtils.lowerCase(splits[0]),new AdaptiveRate(new Float(splits[1]),new Float(splits[2])));      } else {        LOG.warn("Invalid configuration line in: " + line);      }    }  }}  }
class C{  private boolean removeWaitingThread(SceKernelThreadInfo thread){  SceKernelEventFlagInfo event=eventMap.get(thread.wait.EventFlag_id);  if (event == null) {    return false;  }  event.threadWaitingList.removeWaitingThread(thread);  thread.wait.EventFlag_outBits_addr.setValue(event.currentPattern);  return true;}  }
class C{  @Override public XMLStreamWriter createXMLStreamWriter(OutputStream out,String encoding) throws XMLStreamException {  return new WbXmlStreamWriter(out,(WbXmlDefinition)props.get(DEFINITION_PROPERTY),(WbXmlEncoder.StrtblType)props.get(ENCODING_TYPE_PROPERTY),(Boolean)props.get(SKIP_SPACES_PROPERTY),encoding);}  }
class C{  public int numColumns(){  return MaxC + 1;}  }
class C{  public static void main(String[] args){  RotatingSList<Integer> rsl=new RotatingSList<Integer>();  rsl.insertBack(10);  rsl.insertBack(11);  rsl.insertBack(12);  rsl.insertBack(13);  rsl.rotateRight();  rsl.print();}  }
class C{  public void removeGroupChat(String chatId){  mGroupChatCache.remove(chatId);  if (sLogger.isActivated()) {    sLogger.debug("Remove Group Chat to list (size=" + mGroupChatCache.size() + ") for chatId "+ chatId);  }}  }
class C{  public boolean hasName(){  return hasExtension(Name.class);}  }
class C{  public MenuShortcut(int key){  this(key,false);}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  int dim=getDimensionality();  out.writeInt(dim);  for (  double aMin : min) {    out.writeDouble(aMin);  }  for (  double aMax : max) {    out.writeDouble(aMax);  }}  }
class C{  public List<Node> listAvailableNodes(Class<?> type){  List<Node> result=new ArrayList<Node>();  for (  Node node : availableNodes) {    if (type.isAssignableFrom(node.getReturnType())) {      result.add(node);    }  }  return result;}  }
class C{  public void endElement(String ns,String localName,String name) throws org.xml.sax.SAXException {  m_elemStack.pop();  m_currentNode=m_elemStack.isEmpty() ? null : (Node)m_elemStack.peek();}  }
class C{  private void addWeekdayLabels(){  weekdayLabels=new ArrayList<JLabel>();  int weekdayLabelRowY=constantFirstWeekdayLabelCell.y;  int weekdayLabelWidthInCells=1;  int weekdayLabelHeightInCells=3;  for (int i=0; i < 7; ++i) {    int weekdayLabelColumnX=(i + constantFirstWeekdayLabelCell.x);    JLabel weekdayLabel=new JLabel();    weekdayLabel.setHorizontalAlignment(SwingConstants.CENTER);    weekdayLabel.setVerticalAlignment(SwingConstants.CENTER);    weekdayLabel.setBorder(new EmptyBorder(0,2,0,2));    weekdayLabel.setOpaque(true);    weekdayLabel.setText("wd" + i);    CellConstraints constraints=CC.xywh(weekdayLabelColumnX,weekdayLabelRowY,weekdayLabelWidthInCells,weekdayLabelHeightInCells);    centerPanel.add(weekdayLabel,constraints);    weekdayLabels.add(weekdayLabel);  }}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == Expression.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == PrimaryExpression.class) {switch (derivedFeatureID) {default :    return -1;}}if (baseClass == AnnotableExpression.class) {switch (derivedFeatureID) {case N4JSPackage.N4_CLASS_EXPRESSION__ANNOTATION_LIST:  return N4JSPackage.ANNOTABLE_EXPRESSION__ANNOTATION_LIST;default :return -1;}}if (baseClass == NamedElement.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  private int prevContractChar(int ch){  Vector<EntryPair> list=ordering.getContractValues(ch);  EntryPair pair=list.firstElement();  int order=pair.value;  pair=list.lastElement();  int maxLength=pair.entryName.length();  NormalizerBase tempText=(NormalizerBase)text.clone();  tempText.next();  key.setLength(0);  int c=tempText.previous();  while (maxLength > 0 && c != NormalizerBase.DONE) {    if (Character.isSupplementaryCodePoint(c)) {      key.append(Character.toChars(c));      maxLength-=2;    } else {      key.append((char)c);      --maxLength;    }    c=tempText.previous();  }  String fragment=key.toString();  maxLength=1;  for (int i=list.size() - 1; i > 0; i--) {    pair=list.elementAt(i);    if (pair.fwd)     continue;    if (fragment.startsWith(pair.entryName) && pair.entryName.length() > maxLength) {      maxLength=pair.entryName.length();      order=pair.value;    }  }  while (maxLength > 1) {    c=text.previous();    maxLength-=Character.charCount(c);  }  return order;}  }
class C{  protected void pullImage(CheServiceImpl service,String machineImageName,ProgressMonitor progressMonitor) throws MachineException {  DockerMachineSource dockerMachineSource=new DockerMachineSource(new MachineSourceImpl("image").setLocation(service.getImage()));  if (dockerMachineSource.getRepository() == null) {    throw new MachineException(format("Machine creation failed. Machine source is invalid. No repository is defined. Found '%s'.",dockerMachineSource));  }  try {    boolean isSnapshot=SNAPSHOT_LOCATION_PATTERN.matcher(dockerMachineSource.getLocation()).matches();    if (!isSnapshot || snapshotUseRegistry) {      PullParams pullParams=PullParams.create(dockerMachineSource.getRepository()).withTag(MoreObjects.firstNonNull(dockerMachineSource.getTag(),LATEST_TAG)).withRegistry(dockerMachineSource.getRegistry()).withAuthConfigs(dockerCredentials.getCredentials());      docker.pull(pullParams,progressMonitor);    }    String fullNameOfPulledImage=dockerMachineSource.getLocation(false);    try {      docker.tag(TagParams.create(fullNameOfPulledImage,machineImageName));    } catch (    ImageNotFoundException nfEx) {      throw new SourceNotFoundException(nfEx.getLocalizedMessage(),nfEx);    }    if (isSnapshot && snapshotUseRegistry) {      docker.removeImage(RemoveImageParams.create(fullNameOfPulledImage).withForce(false));    }  } catch (  IOException e) {    LOG.error(e.getLocalizedMessage(),e);    throw new MachineException("Can't create machine from image. Cause: " + e.getLocalizedMessage());  }}  }
class C{  public boolean hasBot(){  return bot != null;}  }
class C{  public static void drawStringUnderlineCharAt(JComponent c,Graphics g,String text,int underlinedIndex,int x,int y){  if (drawStringUnderlineCharAtMethod != null) {    try {      drawStringUnderlineCharAtMethod.invoke(null,new Object[]{c,g,text,new Integer(underlinedIndex),new Integer(x),new Integer(y)});      return;    } catch (    IllegalArgumentException e) {    }catch (    IllegalAccessException e) {    }catch (    InvocationTargetException e) {    }  }  Graphics2D g2=(Graphics2D)g;  Map oldRenderingHints=installDesktopHints(g2);  BasicGraphicsUtils.drawStringUnderlineCharAt(g,text,underlinedIndex,x,y);  if (oldRenderingHints != null) {    g2.addRenderingHints(oldRenderingHints);  }}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String encryptionOID,String digestOID,AttributeTable signedAttr,AttributeTable unsignedAttr) throws IllegalArgumentException {  doAddSigner(key,cert,encryptionOID,digestOID,new DefaultSignedAttributeTableGenerator(signedAttr),new SimpleAttributeTableGenerator(unsignedAttr),signedAttr);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  @Field(42) public __VARIANT_NAME_3_union pullVal(Pointer<Long> pullVal){  this.io.setPointerField(this,42,pullVal);  return this;}  }
class C{  public DefragStress(){  super(Options.set,"Defrag Stress","Should we force degfrag every time the immix space is collected?",false);}  }
class C{  public static final boolean isExternalStorageRemovable(){  return Environment.isExternalStorageRemovable();}  }
class C{  private void loadAdminUsersId(DbConnection dbConn) throws Exception {  DynamicTable tableInfo=new DynamicTable();  DynamicRows rowsInfo=new DynamicRows();  DynamicRow rowInfo=new DynamicRow();  LdapUsersTable table=new LdapUsersTable();  UsersTable usrTbl=new UsersTable();  int counter;  BasicUserImpl user;  String qual;  try {    if (_isLdap) {      tableInfo.setTableObject(table);      tableInfo.setClassName(LdapUsersTable.class.getName());      qual=table.getLoadAminUsersQual(ISicresAdminUserDefsKeys.PRODUCT_IDOC);    } else {      tableInfo.setTableObject(usrTbl);      tableInfo.setClassName(UsersTable.class.getName());      qual=usrTbl.getLoadAminUsersQual(ISicresAdminUserDefsKeys.PRODUCT_IDOC);    }    tableInfo.setTablesMethod("getUserAdminTableNames");    tableInfo.setColumnsMethod("getAdminUserColumnNames");    rowInfo=new DynamicRow();    rowsInfo=new DynamicRows();    rowInfo.setClassName(BasicUserImpl.class.getName());    rowInfo.setValuesMethod("loadValues");    rowsInfo.add(rowInfo);    DynamicFns.selectMultiple(dbConn,qual,true,tableInfo,rowsInfo);    for (counter=0; counter < rowInfo.getRowCount(); counter++) {      user=(BasicUserImpl)rowInfo.getRow(counter);      _adminUsers.add((BasicUser)user);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  }}  }
class C{  public static BoundDelegate register(String id){  launch=true;  return delegateServer.requestDelegate(id);}  }
class C{  public static CGAffineTransform makeScale(double scx,double scY){  CGAffineTransform t=new CGAffineTransform();  t.setToScale(scx,scY);  return t;}  }
class C{  public String columnGet(String key){  String resolvedKey=resolveColumnKey(key);  String cachedValue=columnMapCache.get(resolvedKey);  if (cachedValue != null) {    return cachedValue;  }  String value=columnMap.get(resolvedKey);  if (value == null && parent != null) {    value=parent.columnGet(resolvedKey);  }  if (value == null) {    return null;  }  String expandedString=expand(value,true);  columnMapCache.put(resolvedKey,expandedString);  return expandedString;}  }
class C{  private void loadAdapters(EPServicesContext services){  List<ConfigurationPluginLoader> pluginLoaders=configSnapshot.getPluginLoaders();  if ((pluginLoaders == null) || (pluginLoaders.size() == 0)) {    return;  }  for (  ConfigurationPluginLoader config : pluginLoaders) {    String className=config.getClassName();    Class pluginLoaderClass;    try {      ClassLoader cl=Thread.currentThread().getContextClassLoader();      pluginLoaderClass=Class.forName(className,true,cl);    } catch (    ClassNotFoundException ex) {      throw new ConfigurationException("Failed to load adapter loader class '" + className + "'",ex);    }    Object pluginLoaderObj;    try {      pluginLoaderObj=pluginLoaderClass.newInstance();    } catch (    InstantiationException ex) {      throw new ConfigurationException("Failed to instantiate adapter loader class '" + className + "' via default constructor",ex);    }catch (    IllegalAccessException ex) {      throw new ConfigurationException("Illegal access to instantiate adapter loader class '" + className + "' via default constructor",ex);    }    if (!(pluginLoaderObj instanceof PluginLoader)) {      throw new ConfigurationException("Failed to cast adapter loader class '" + className + "' to "+ PluginLoader.class.getName());    }    PluginLoader pluginLoader=(PluginLoader)pluginLoaderObj;    PluginLoaderInitContext context=new PluginLoaderInitContext(config.getLoaderName(),config.getConfigProperties(),config.getConfigurationXML(),this);    pluginLoader.init(context);    try {      services.getEngineEnvContext().bind("plugin-loader/" + config.getLoaderName(),pluginLoader);    } catch (    NamingException e) {      throw new EPException("Failed to use context to bind adapter loader",e);    }  }}  }
class C{  public static ConstParameter integer(long i){  return new LongConstParameter(i);}  }
class C{  public synchronized FloatSetting createFloatSetting(String key,float defaultValue){  FloatSetting result=new FloatSetting(DEFAULT_PROPS,PROPS,key,defaultValue);  handleSettingInternal(result,null);  return result;}  }
class C{  protected TSDBEntity(String scope,String metric){  _scope=scope;  _metric=metric;}  }
class C{  Letter(final char pCharacter,final float pAdvance){  this(pCharacter,true,0,0,0,0,0,0,pAdvance,0,0,0,0);}  }
class C{  private void removeEldest(){  Iterator<K> iterator=this.keySet().iterator();  if (iterator.hasNext()) {    iterator.next();    iterator.remove();  }}  }
class C{  public boolean hasRealm(){  return super.hasAttribute(REALM);}  }
class C{  private static void assertSameEntryIterator(final String name,final ITupleIterator<?> expectedItr,final ITupleIterator<?> actualItr){  long nvisited=0L;  while (expectedItr.hasNext()) {    if (!actualItr.hasNext())     throw new RuntimeException(name + ":: Expecting another index entry: nvisited=" + nvisited);    final ITuple<?> expectedTuple=expectedItr.next();    final ITuple<?> actualTuple=actualItr.next();    nvisited++;    if (!BytesUtil.bytesEqual(expectedTuple.getKey(),actualTuple.getKey())) {      throw new RuntimeException(name + ":: Wrong key: nvisited=" + nvisited+ ", expected="+ expectedTuple+ ", actual="+ actualTuple);    }    if (!BytesUtil.bytesEqual(expectedTuple.getValue(),actualTuple.getValue())) {      throw new RuntimeException(name + ":: Wrong value: nvisited=" + nvisited+ ", expected="+ expectedTuple+ ", actual="+ actualTuple);    }  }  if (actualItr.hasNext())   throw new RuntimeException(name + ":: Not expecting more tuples");}  }
class C{  private boolean useAeroAtmosphere(IGame game,Entity en){  if (!(en instanceof Aero)) {    return false;  }  if (((Aero)en).isSpheroid()) {    return false;  }  if (game.getBoard().inSpace()) {    return false;  }  return en.isAirborne() && !game.getPlanetaryConditions().isVacuum();}  }
class C{  public static String nameOf(File file,ClassOrInterface<?> clazz){  String name=Formatting.fileToClassName(file.getName()).flatMap(null).orElseThrow(null) + "." + pathTo(file,clazz.getName());  return name;}  }
class C{  public void test_lookup_002(){  try {    TxDag dag=new TxDag(1);    dag.lookup(null,false);    fail("Expecting: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    log.info("Ignoring expected exception: " + ex);  }}  }
class C{  public int hashCode(){  int result;  result=namespaceURI.hashCode();  result=29 * result + localPart.hashCode();  return result;}  }
class C{  public RaycastResult raycast(Point2D start,Point2D end){  raycastCallback.reset();  jboxWorld.raycast(raycastCallback,toPoint(start),toPoint(end));  Entity entity=null;  Point2D point=null;  if (raycastCallback.fixture != null)   entity=(Entity)raycastCallback.fixture.getBody().getUserData();  if (raycastCallback.point != null)   point=toPoint(raycastCallback.point);  return new RaycastResult(Optional.ofNullable(entity),Optional.ofNullable(point));}  }
class C{  private void refreshKeyValues(){  prefsAdapter.setKeyValues(getKeyValues());}  }
class C{  public void write(BytesRef text,TermsEnum termsEnum) throws IOException {  BlockTermState state=postingsWriter.writeTerm(text,termsEnum,docsSeen);  if (state != null) {    assert state.docFreq != 0;    assert fieldInfo.getIndexOptions() == IndexOptions.DOCS || state.totalTermFreq >= state.docFreq : "postingsWriter=" + postingsWriter;    pushTerm(text);    PendingTerm term=new PendingTerm(text,state);    pending.add(term);    sumDocFreq+=state.docFreq;    sumTotalTermFreq+=state.totalTermFreq;    numTerms++;    if (firstPendingTerm == null) {      firstPendingTerm=term;    }    lastPendingTerm=term;  }}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processPostRequest(request,response);}  }
class C{  public void unsidelineState(Long stateMachineId,Long stateId){  State state=this.statesDAO.findById(stateId);  if (state.getStatus() == Status.sidelined) {    state.setStatus(Status.unsidelined);    state.setAttemptedNoOfRetries(0L);    this.statesDAO.updateState(state);    this.executeStates(stateMachineId,Sets.newHashSet(Arrays.asList(state)));  }}  }
class C{  public synchronized boolean start(BufferedImage typicalImage,float fps){  if (isRunning)   return false;  int encodeFormatIndex=0;  try {    Object[] f=(Object[])encoderClass.getMethod("getEncodingFormats",new Class[]{Float.TYPE,BufferedImage.class}).invoke(null,new Object[]{new Float(fps),typicalImage});    if (f == null)     return false;    JPanel p=new JPanel();    p.setLayout(new BorderLayout());    String[] fmts=new String[f.length];    String font=p.getFont().getFamily();    for (int i=0; i < fmts.length; i++)     fmts[i]="<html><font face=\"" + font + "\" size=\"-2\">"+ WordWrap.toHTML(WordWrap.wrap(f[i].toString(),80))+ "</font></html>";    JTextField framerate=new JTextField("" + fps);    JPanel panel=new JPanel();    panel.setLayout(new BorderLayout());    panel.setBorder(new javax.swing.border.TitledBorder("Frame Rate"));    panel.add(framerate,BorderLayout.CENTER);    JPanel panel2=new JPanel();    panel2.setLayout(new BorderLayout());    panel2.setBorder(new javax.swing.border.TitledBorder("Format"));    JComboBox encoding=new JComboBox(fmts);    if (fmts.length == 3)     encoding.setSelectedIndex(1);    panel2.add(encoding,BorderLayout.CENTER);    String text1="MASON uses Sun's JMF movie generation code.  JMF saves out movies in uncompressed RGB: they are gigantic. Once saved out, you need to " + "convert them to a better codec (we recommend H.264). " + "However, JMF also produces videos with an incorect codec label. "+ "This breaks a number of movie players and converters.  Here's some useful information "+ "on various software and how it handles JMF's bugs:\n\n"+ "Quicktime 10.  You can load the movie (which converts it) and save it out as H.264. "+ "However Quicktime does not work with 16-bit RGB: use the 24 or 32 bit RGB formats in MASON.\n\n"+ "iMovie 10.  iMovie does not work with 32-bit RGB: use the 16 or 24 RGB bit formats in MASON.\n\n"+ "Final Cut Pro.  FCP works with any of the RGB formats.\n\n"+ "IN SHORT: We suggest you save out in 24-bit RGB.\n\n"+ "See http://cs.gmu.edu/~eclab/projects/mason/extensions/movies/ for more information.";    int myNumberOfPixels=600;    JLabel label=new JLabel();    label.setText("<html><br><b>Notes</b><br><font size='-2'>" + WordWrap.toHTML(WordWrap.wrap(text1,myNumberOfPixels,label.getFontMetrics(label.getFont()))) + "</font></html>");    JPanel panel3=new JPanel();    panel3.setLayout(new BorderLayout());    panel3.add(panel2,BorderLayout.NORTH);    panel3.add(label,BorderLayout.CENTER);    p.add(panel,BorderLayout.NORTH);    p.add(panel3,BorderLayout.SOUTH);    if (JOptionPane.showConfirmDialog(parentForDialogs,p,"Create a Quicktime Movie...",JOptionPane.OK_CANCEL_OPTION) != JOptionPane.OK_OPTION)     return false;    fps=Float.valueOf(framerate.getText()).floatValue();    encodeFormatIndex=encoding.getSelectedIndex();    f=(Object[])encoderClass.getMethod("getEncodingFormats",new Class[]{Float.TYPE,BufferedImage.class}).invoke(null,new Object[]{new Float(fps),typicalImage});    FileDialog fd=new FileDialog(parentForDialogs,"Stream to Quicktime File...",FileDialog.SAVE);    fd.setFile("Untitled.mov");    fd.setVisible(true);    ;    if (fd.getFile() != null) {      encoder=encoderClass.getConstructor(new Class[]{Float.TYPE,File.class,BufferedImage.class,Class.forName("javax.media.Format")}).newInstance(new Object[]{new Float(fps),new File(fd.getDirectory(),Utilities.ensureFileEndsWith(fd.getFile(),".mov")),typicalImage,f[encodeFormatIndex]});    } else     return false;  } catch (  Throwable e) {    e.printStackTrace();    Object[] options={"Oops"};    JOptionPane.showOptionDialog(parentForDialogs,"JMF is not installed on your computer.\nTo create Quicktime movies of your simulation:\n\n" + "1. Download JMF at http://java.sun.com/products/java-media/jmf/\n" + "2. Mac users should download the \"Cross-platform Java\" version\n"+ "3. Install the JMF libraries.\n"+ "4. Make certain that the jmf.jar file is in your CLASSPATH.\n","Java Media Framework (JMF) Not Installed",JOptionPane.OK_OPTION,JOptionPane.ERROR_MESSAGE,null,options,options[0]);    encoder=null;    isRunning=false;    return false;  }  isRunning=true;  return true;}  }
class C{  public ToStringBuilder append(String fieldName,double[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  public void mult3(int modulus){  for (int i=0; i < coeffs.length; i++) {    coeffs[i]*=3;    coeffs[i]%=modulus;  }}  }
class C{  protected ScoreResult computeScore(DBIDs ids,DBIDs outlierIds,OutlierResult or) throws IllegalStateException {  if (scaling instanceof OutlierScalingFunction) {    OutlierScalingFunction oscaling=(OutlierScalingFunction)scaling;    oscaling.prepare(or);  }  final ScalingFunction innerScaling;  double min=scaling.getMin();  double max=scaling.getMax();  if (Double.isInfinite(min) || Double.isNaN(min) || Double.isInfinite(max)|| Double.isNaN(max)) {    innerScaling=new IdentityScaling();    LOG.warning("JudgeOutlierScores expects values between 0.0 and 1.0, but we don't have such a guarantee by the scaling function: min:" + min + " max:"+ max);  } else {    if (min == 0.0 && max == 1.0) {      innerScaling=new IdentityScaling();    } else {      innerScaling=new LinearScaling(1.0 / (max - min),-min);    }  }  double posscore=0.0;  double negscore=0.0;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    double result=or.getScores().doubleValue(iter);    result=innerScaling.getScaled(scaling.getScaled(result));    posscore+=(1.0 - result);  }  for (DBIDIter iter=outlierIds.iter(); iter.valid(); iter.advance()) {    double result=or.getScores().doubleValue(iter);    result=innerScaling.getScaled(scaling.getScaled(result));    negscore+=result;  }  posscore/=ids.size();  negscore/=outlierIds.size();  LOG.verbose("Scores: " + posscore + " "+ negscore);  ArrayList<double[]> s=new ArrayList<>(1);  s.add(new double[]{(posscore + negscore) * .5,posscore,negscore});  return new ScoreResult(s);}  }
class C{  public Edge(Node node1,Node node2,Endpoint endpoint1,Endpoint endpoint2){  if (node1 == null || node2 == null) {    throw new NullPointerException("Nodes must not be null.");  }  if (endpoint1 == null || endpoint2 == null) {    throw new NullPointerException("Endpoints must not be null.");  }  if (pointingLeft(endpoint1,endpoint2)) {    this.node1=node2;    this.node2=node1;    this.endpoint1=endpoint2;    this.endpoint2=endpoint1;  } else {    this.node1=node1;    this.node2=node2;    this.endpoint1=endpoint1;    this.endpoint2=endpoint2;  }}  }
class C{  private EventNode convert(Node node) throws Exception {  short type=node.getNodeType();  if (type == ELEMENT_NODE) {    if (node != null) {      stack.push(node);    }    return start(node);  }  return text(node);}  }
class C{  public String convertPageNumberToLabel(final int pageNumber){  if (pageLabels == null) {    return null;  } else {    return pageLabels.get(pageNumber);  }}  }
class C{  protected BasicPoolEntry createEntry(RouteSpecificPool rospl,ClientConnectionOperator op){  if (log.isDebugEnabled()) {    log.debug("Creating new connection [" + rospl.getRoute() + "]");  }  BasicPoolEntry entry=new BasicPoolEntry(op,rospl.getRoute(),refQueue);  poolLock.lock();  try {    rospl.createdEntry(entry);    numConnections++;    issuedConnections.add(entry.getWeakRef());  }  finally {    poolLock.unlock();  }  return entry;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeaderRed=null;  String inputHeaderGreen=null;  String inputHeaderBlue=null;  String inputHeaderAlpha=null;  String outputHeader=null;  boolean alphaChannelSpecified=true;  boolean performContrastEnhancement=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeaderRed=args[0];  inputHeaderGreen=args[1];  inputHeaderBlue=args[2];  inputHeaderAlpha=args[3];  if (inputHeaderAlpha.toLowerCase().contains("not specified")) {    alphaChannelSpecified=false;  }  outputHeader=args[4];  String doEnhancement=args[5];  if (doEnhancement.toLowerCase().contains("not specified") || doEnhancement.toLowerCase().contains("f")) {    performContrastEnhancement=false;  }  if ((inputHeaderRed == null) || (inputHeaderGreen == null) || (inputHeaderBlue == null)|| (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redVal, greenVal, blueVal, alphaVal;    double redRange, greenRange, blueRange;    double redMin, greenMin, blueMin;    int r, g, b, a;    double z;    int progress=0;    int oldProgress=-1;    WhiteboxRasterInfo red=new WhiteboxRasterInfo(inputHeaderRed);    int rows=red.getNumberRows();    int cols=red.getNumberColumns();    WhiteboxRasterInfo green=new WhiteboxRasterInfo(inputHeaderGreen);    if ((green.getNumberRows() != rows) || (green.getNumberColumns() != cols)) {      showFeedback("All input images must have the same dimensions.");      return;    }    WhiteboxRasterInfo blue=new WhiteboxRasterInfo(inputHeaderBlue);    if ((blue.getNumberRows() != rows) || (blue.getNumberColumns() != cols)) {      showFeedback("All input images must have the same dimensions.");      return;    }    double noData=red.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeaderRed,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("rgb.pal");    outputFile.setDataScale(WhiteboxRaster.DataScale.RGB);    redMin=red.getDisplayMinimum();    greenMin=green.getDisplayMinimum();    blueMin=blue.getDisplayMinimum();    redRange=red.getDisplayMaximum() - redMin;    greenRange=green.getDisplayMaximum() - greenMin;    blueRange=blue.getDisplayMaximum() - blueMin;    if (!alphaChannelSpecified) {      double[] dataRed, dataGreen, dataBlue;      oldProgress=-1;      for (row=0; row < rows; row++) {        dataRed=red.getRowValues(row);        dataGreen=green.getRowValues(row);        dataBlue=blue.getRowValues(row);        for (col=0; col < cols; col++) {          redVal=dataRed[col];          greenVal=dataGreen[col];          blueVal=dataBlue[col];          if ((redVal != noData) && (greenVal != noData) && (blueVal != noData)) {            r=(int)((redVal - redMin) / redRange * 255);            if (r < 0) {              r=0;            }            if (r > 255) {              r=255;            }            g=(int)((greenVal - greenMin) / greenRange * 255);            if (g < 0) {              g=0;            }            if (g > 255) {              g=255;            }            b=(int)((blueVal - blueMin) / blueRange * 255);            if (b < 0) {              b=0;            }            if (b > 255) {              b=255;            }            z=(double)((255 << 24) | (b << 16) | (g << 8)| r);            outputFile.setValue(row,col,z);          } else {            outputFile.setValue(row,col,noData);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else {      WhiteboxRaster alpha=new WhiteboxRaster(inputHeaderAlpha,"r");      if ((alpha.getNumberRows() != rows) || (alpha.getNumberColumns() != cols)) {        showFeedback("All input images must have the same dimensions.");        return;      }      double[] dataRed, dataGreen, dataBlue, dataAlpha;      double alphaMin, alphaRange;      alphaMin=alpha.getDisplayMinimum();      alphaRange=alpha.getDisplayMaximum() - alphaMin;      oldProgress=-1;      for (row=0; row < rows; row++) {        dataRed=red.getRowValues(row);        dataGreen=green.getRowValues(row);        dataBlue=blue.getRowValues(row);        dataAlpha=alpha.getRowValues(row);        for (col=0; col < cols; col++) {          redVal=dataRed[col];          greenVal=dataGreen[col];          blueVal=dataBlue[col];          alphaVal=dataAlpha[col];          if ((redVal != noData) && (greenVal != noData) && (blueVal != noData)) {            r=(int)((redVal - redMin) / redRange * 255);            if (r < 0) {              r=0;            }            if (r > 255) {              r=255;            }            g=(int)((greenVal - greenMin) / greenRange * 255);            if (g < 0) {              g=0;            }            if (g > 255) {              g=255;            }            b=(int)((blueVal - blueMin) / blueRange * 255);            if (b < 0) {              b=0;            }            if (b > 255) {              b=255;            }            a=(int)((alphaVal - alphaMin) / alphaRange * 255);            if (a < 0) {              a=0;            }            if (a > 255) {              a=255;            }            z=(a << 24) | (b << 16) | (g << 8)| r;            outputFile.setValue(row,col,z);          } else {            outputFile.setValue(row,col,noData);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }      alpha.close();    }    red.close();    green.close();    blue.close();    if (performContrastEnhancement) {      outputFile.flush();      int rOut, gOut, bOut;      int E=100;      double[] data;      long numPixels=0;      int r_l=Integer.MAX_VALUE;      int r_h=Integer.MIN_VALUE;      long r_e=0;      long rSqrTotal=0;      int g_l=Integer.MAX_VALUE;      int g_h=Integer.MIN_VALUE;      long g_e=0;      long gSqrTotal=0;      int b_l=Integer.MAX_VALUE;      int b_h=Integer.MIN_VALUE;      long b_e=0;      long bSqrTotal=0;      int L=0;      int H=255;      oldProgress=-1;      for (row=0; row < rows; row++) {        data=outputFile.getRowValues(row);        for (col=0; col < cols; col++) {          z=data[col];          if (z != noData) {            numPixels++;            r=((int)z & 0xFF);            g=(((int)z >> 8) & 0xFF);            b=(((int)z >> 16) & 0xFF);            if (r < r_l) {              r_l=r;            }            if (r > r_h) {              r_h=r;            }            r_e+=r;            rSqrTotal+=r * r;            if (g < g_l) {              g_l=g;            }            if (g > g_h) {              g_h=g;            }            g_e+=g;            gSqrTotal+=g * g;            if (b < b_l) {              b_l=b;            }            if (b > b_h) {              b_h=b;            }            b_e+=b;            bSqrTotal+=b * b;          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress("Performing Enhancement (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }      r_e=r_e / numPixels;      g_e=g_e / numPixels;      b_e=b_e / numPixels;      double r_s=(double)rSqrTotal / numPixels;      double g_s=(double)gSqrTotal / numPixels;      double b_s=(double)bSqrTotal / numPixels;      double r_b=(r_h * r_h * (E - L) - r_s * (H - L) + r_l * r_l * (H - E)) / (2 * (r_h * (E - L) - r_e * (H - L) + r_l * (H - E)));      double r_a=(H - L) / ((r_h - r_l) * (r_h + r_l - 2 * r_b));      double r_c=L - r_a * ((r_l - r_b) * (r_l - r_b));      double g_b=(g_h * g_h * (E - L) - g_s * (H - L) + g_l * g_l * (H - E)) / (2 * (g_h * (E - L) - g_e * (H - L) + g_l * (H - E)));      double g_a=(H - L) / ((g_h - g_l) * (g_h + g_l - 2 * g_b));      double g_c=L - g_a * ((g_l - g_b) * (g_l - g_b));      double b_b=(b_h * b_h * (E - L) - b_s * (H - L) + b_l * b_l * (H - E)) / (2 * (b_h * (E - L) - b_e * (H - L) + b_l * (H - E)));      double b_a=(H - L) / ((b_h - b_l) * (b_h + b_l - 2 * b_b));      double b_c=L - b_a * ((b_l - b_b) * (b_l - b_b));      oldProgress=-1;      for (row=0; row < rows; row++) {        data=outputFile.getRowValues(row);        for (col=0; col < cols; col++) {          z=data[col];          if (z != noData) {            numPixels++;            r=((int)z & 0xFF);            g=(((int)z >> 8) & 0xFF);            b=(((int)z >> 16) & 0xFF);            a=(((int)z >> 24) & 0xFF);            rOut=(int)(r_a * ((r - r_b) * (r - r_b)) + r_c);            gOut=(int)(g_a * ((g - g_b) * (g - g_b)) + g_c);            bOut=(int)(b_a * ((b - b_b) * (b - b_b)) + b_c);            if (rOut > 255) {              rOut=255;            }            if (gOut > 255) {              gOut=255;            }            if (bOut > 255) {              bOut=255;            }            if (rOut < 0) {              rOut=0;            }            if (gOut < 0) {              gOut=0;            }            if (bOut < 0) {              bOut=0;            }            z=(double)((a << 24) | (bOut << 16) | (gOut << 8)| rOut);            outputFile.setValue(row,col,z);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress("Performing Enhancement (2 of 2):",progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public double updateMiniBatch(List<Vec> x,List<Vec> y,ExecutorService ex){  Random rand=new XORWOW();  for (  Matrix w : W_deltas)   w.zeroOut();  for (  Vec b : B_deltas)   b.zeroOut();  for (int i=0; i < layersActivation.size(); i++) {    if (activations[i] == null || activations[i].cols() != x.size())     activations[i]=new DenseMatrix(layerSizes[i + 1],x.size());    if (unactivated[i] == null || unactivated[i].cols() != x.size())     unactivated[i]=new DenseMatrix(layerSizes[i + 1],x.size());    if (deltas[i] == null || deltas[i].cols() != x.size())     deltas[i]=new DenseMatrix(layerSizes[i + 1],x.size());  }  Matrix X=new DenseMatrix(layerSizes[0],x.size());  for (int j=0; j < x.size(); j++)   x.get(j).copyTo(X.getColumnView(j));  if (p_i > 0)   applyDropout(X,p_i_intThresh,rand,ex);  double errorMade=0;  feedforward(X,activations,unactivated,ex,rand);  errorMade=backpropagateError(deltas,activations,x,y,errorMade,ex,unactivated);  accumulateUpdates(X,activations,deltas,ex,x);  double eta_cur=etaDecay.rate(time++,eta);  if (ex == null)   applyGradient(eta_cur); else   applyGradient(eta_cur,ex);  return errorMade;}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void removeTreeModelListener(TreeModelListener l){  listenerList.remove(TreeModelListener.class,l);}  }
class C{  public static boolean isUnix(){  return _isLinux || _isSolaris;}  }
class C{  public static _Fields findBYNAME(String name){  return BY_NAME.get(name);}  }
class C{  public void remove(){  if (__readOnly) {    throw new UnsupportedOperationException();  }  force_position_sync();  if (__current == null || __pos == null) {    throw new NoSuchElementException();  }  if (__pos.on_system_value()) {    throw new UnsupportedOperationException();  }  int idx=__pos.__user_index;  assert (idx >= 0);  IonValueLite concrete=__current;  int concrete_idx=concrete._elementid();  assert (concrete_idx == idx);  remove_child(idx);  patch_elements_helper(concrete_idx);  __pos.__index_adjustment-=__pos.__local_value_count;  if (__pos.__user_index < get_child_count() - 1) {    __pos.load_updated_position();    __pos.__local_index=-1;  }  __current=null;}  }
class C{  Matrix3D(){  xx=1.0f;  yy=1.0f;  zz=1.0f;}  }
class C{  private JLabel addKeybindLabel(JPanel panel,String labelText){  GridBagConstraints gbc=new GridBagConstraints();  gbc.anchor=GridBagConstraints.WEST;  gbc.insets=new Insets(0,0,5,0);  gbc.gridx=0;  gbc.gridy=keybindLabelGridYCounter++;  gbc.weightx=20;  JLabel jlbl=new JLabel(labelText);  panel.add(jlbl,gbc);  return jlbl;}  }
class C{  public Comment findItem(long commentId){  if (commentId == 0)   return null;  for (  IEndlessAdaptable item : getItems()) {    if (item instanceof Comment && ((Comment)item).getId() == commentId) {      return (Comment)item;    }  }  return null;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"popf");  Preconditions.checkArgument(instruction.getOperands().size() == 0,"Error: Argument instruction is not a popf instruction (invalid number of operand)");  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final String result=environment.getNextVariableString();  Helpers.generateLoadFromStack(environment,offset,OperandSize.DWORD,result,instructions);  offset=baseOffset + instructions.size();  Helpers.shiftValueIntoFlags(environment,offset,result,OperandSize.DWORD,instructions);}  }
class C{  public synchronized void provideRefundSignature(byte[] theirSignature) throws VerificationException {  checkNotNull(theirSignature);  checkState(state == State.WAITING_FOR_SIGNED_REFUND);  TransactionSignature theirSig=TransactionSignature.decodeFromBitcoin(theirSignature,true);  if (theirSig.sigHashMode() != Transaction.SigHash.NONE || !theirSig.anyoneCanPay())   throw new VerificationException("Refund signature was not SIGHASH_NONE|SIGHASH_ANYONECANPAY");  final TransactionOutput multisigContractOutput=multisigContract.getOutput(0);  try {    multisigScript=multisigContractOutput.getScriptPubKey();  } catch (  ScriptException e) {    throw new RuntimeException(e);  }  TransactionSignature ourSignature=refundTx.calculateSignature(0,myKey,multisigScript,Transaction.SigHash.ALL,false);  Script scriptSig=ScriptBuilder.createMultiSigInputScript(ourSignature,theirSig);  log.info("Refund scriptSig: {}",scriptSig);  log.info("Multi-sig contract scriptPubKey: {}",multisigScript);  TransactionInput refundInput=refundTx.getInput(0);  refundInput.setScriptSig(scriptSig);  refundInput.verify(multisigContractOutput);  state=State.SAVE_STATE_IN_WALLET;}  }
class C{  @Override public RegularTimePeriod next(){  RegularTimePeriod result=null;  long t=this.time;  if (t != Long.MAX_VALUE) {    result=new FixedMillisecond(t + 1);  }  return result;}  }
class C{  public String sqlObject_dropOperator(String vendorName,String catalogName,String schemaName,String operatorName,String leftArg,String rightArg){  return m_interfaces.get(getDBVendorID(vendorName)).sqlObject_dropOperator(catalogName,schemaName,operatorName,leftArg,rightArg);}  }
class C{  public static boolean hasAlpha(Image image){  if (image instanceof BufferedImage) {    BufferedImage bimage=(BufferedImage)image;    return bimage.getColorModel().hasAlpha();  }  PixelGrabber pg=new PixelGrabber(image,0,0,1,1,false);  try {    pg.grabPixels();  } catch (  InterruptedException e) {  }  ColorModel cm=pg.getColorModel();  return cm.hasAlpha();}  }
class C{  public Set keySet(){  return totalKeySet();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:22.471 -0500",hash_original_method="F6EBFCAAEA10AE181CE86DC5E6420909",hash_generated_method="913C574D0D0C7F6211EFE2A26B588E71") public void associate(InetAddress address,int port){  if (isBusy()) {    throw new IllegalStateException("Busy");  }  if (!(address instanceof Inet4Address && mLocalAddress instanceof Inet4Address) && !(address instanceof Inet6Address && mLocalAddress instanceof Inet6Address)) {    throw new IllegalArgumentException("Unsupported address");  }  if (port < 0 || port > 65535) {    throw new IllegalArgumentException("Invalid port");  }  mRemoteAddress=address;  mRemotePort=port;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.ASSIGNMENT_EXPRESSION__LHS:    setLhs((Expression)null);  return;case N4JSPackage.ASSIGNMENT_EXPRESSION__OP:setOp(OP_EDEFAULT);return;case N4JSPackage.ASSIGNMENT_EXPRESSION__RHS:setRhs((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public boolean isLast(){  return pos + 1 == str.length();}  }
class C{  public void addFirst(E e){  if (e == null)   throw new NullPointerException("e == null");  elements[head=(head - 1) & (elements.length - 1)]=e;  if (head == tail)   doubleCapacity();}  }
class C{  public boolean mousePressed(MouseEvent e){  Debug.message("eomg","GraphicStateMachine|undefined state|mousePressed = " + graphic.getGraphic().getRenderType());  if (point1 == null) {    graphic.getGrabPoint(indexOfFirstPoint).set(e.getX(),e.getY());    point1=new Point(e.getX(),e.getY());    if (graphic.getGraphic().getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {      graphic.getStateMachine().setOffsetNeeded(true);      Debug.message("eomg","GraphicStateMachine|undefined state| *offset needed*");    }    graphic.getGrabPoint(indexOfSecondPoint).set(e.getX(),e.getY());    graphic.setMovingPoint(graphic.getGrabPoint(indexOfSecondPoint));  } else {    graphic.redraw(e);  }  return getMapMouseListenerResponse();}  }
class C{  public EntityMigrationBuilder addNamedAssociation(String association,Map<String,String> defaultReferences){  migrationBuilder.builder.entityMigrationRules().addRule(new EntityMigrationRule(migrationBuilder.fromVersion,migrationBuilder.toVersion,entityTypes,new AddNamedAssociation(association,defaultReferences)));  return this;}  }
class C{  @Dev public DropRecordedItemAction(final String questname,final int index){  this.questname=checkNotNull(questname);  this.index=index;}  }
class C{  public String[] names(){  return mNames.clone();}  }
class C{  @PUT @Path("/{id}/acl") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN,Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN},blockProxies=true) public ACLAssignments updateAcls(@PathParam("id") URI id,ACLAssignmentChanges changes){  return updateAclsOnVirtualPool(VirtualPool.Type.block,id,changes);}  }
class C{  public void nextBlock(int count,long[] values,int fromIndex){  if (count > my_n)   throw new IllegalArgumentException("Random sample exhausted.");  if (count < 0)   throw new IllegalArgumentException("Negative count.");  if (count == 0)   return;  sample(my_n,my_N,count,my_low,values,fromIndex,my_RandomGenerator);  long lastSample=values[fromIndex + count - 1];  my_n-=count;  my_N=my_N - lastSample - 1 + my_low;  my_low=lastSample + 1;}  }
class C{  public void bounceOffVerticalWall(){  vx=-vx;  count++;}  }
class C{  public static IntegerOrPercentage valueOf(final int i){  return new IntegerOrPercentage(i);}  }
class C{  public static MemberExistsResult methodExists(String methodName,EclipseNode node,boolean caseSensitive,int params){  while (node != null && !(node.get() instanceof TypeDeclaration)) {    node=node.up();  }  if (node != null && node.get() instanceof TypeDeclaration) {    TypeDeclaration typeDecl=(TypeDeclaration)node.get();    if (typeDecl.methods != null)     top:     for (    AbstractMethodDeclaration def : typeDecl.methods) {      if (def instanceof MethodDeclaration) {        char[] mName=def.selector;        if (mName == null)         continue;        boolean nameEquals=caseSensitive ? methodName.equals(new String(mName)) : methodName.equalsIgnoreCase(new String(mName));        if (nameEquals) {          if (params > -1) {            int minArgs=0;            int maxArgs=0;            if (def.arguments != null && def.arguments.length > 0) {              minArgs=def.arguments.length;              if ((def.arguments[def.arguments.length - 1].type.bits & ASTNode.IsVarArgs) != 0) {                minArgs--;                maxArgs=Integer.MAX_VALUE;              } else {                maxArgs=minArgs;              }            }            if (params < minArgs || params > maxArgs)             continue;          }          if (def.annotations != null)           for (          Annotation anno : def.annotations) {            if (typeMatches(Tolerate.class,node,anno.type))             continue top;          }          return getGeneratedBy(def) == null ? MemberExistsResult.EXISTS_BY_USER : MemberExistsResult.EXISTS_BY_LOMBOK;        }      }    }  }  return MemberExistsResult.NOT_EXISTS;}  }
class C{  private void connectDatabaseSystem(){  s_logger.log(Level.CONFIG,"connectDatabaseSystem",getDirection());  String user=s_dbEngine.getDBSystemOrNormalUser(getVendor(),getUser(),getSystemUser());  String passwd=s_dbEngine.getDBSystemOrNormalPassword(getVendor(),getPasswd(),getSystemPasswd());  try {    Class.forName(getDriver());  } catch (  ClassNotFoundException e) {    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"connectDatabaseNoDriver",new Object[]{getDriver(),e.getMessage()});  }  try {    if (m_connection != null)     m_connection.close();    m_connection=DriverManager.getConnection(getUrl(),user,passwd);    m_connection.setAutoCommit(true);    s_logger.log(Level.CONFIG,"connectDatabaseEstablished",getUrl());  } catch (  SQLException e) {    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"connectDatabaseFailed",new Object[]{getUrl(),e.getMessage()});  }  s_logger.flush();}  }
class C{  @Override public void onHomePressed(){  resetActionBarIfApplicable();  fm.popBackStack();}  }
class C{  public static void fill(byte[] a,byte val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  public InvalidEndpointException(String endpoint,String message){  super(message);  this.endpoint=endpoint;}  }
class C{  public static EntityType checkIsEntityType(Type type){  if (!isEntityType(type)) {    throw new ODataSystemException("An entity type is required, but '" + type.getFullyQualifiedName() + "' is not an entity type: "+ type.getMetaType());  }  return (EntityType)type;}  }
class C{  public boolean hasSource(Fact other){  for (  Fact source : sources) {    if (source.equals(other) || source.hasSource(other)) {      return true;    }  }  return false;}  }
class C{  public void testMoveRenameFileSourceParentRootDestinationMissing() throws Exception {  IgfsPath file=new IgfsPath("/" + FILE_NEW.name());  create(igfsSecondary,paths(DIR_NEW,SUBDIR_NEW),paths(file));  create(igfs,null,null);  igfs.rename(file,FILE_NEW);  checkExist(igfs,DIR_NEW,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,FILE_NEW);  checkNotExist(igfs,igfsSecondary,file);}  }
class C{  @Override public int hashCode(){  return getClass().hashCode();}  }
class C{  @Deprecated public boolean isChecked(){  return getValue() == true;}  }
class C{  public void trimToSize(){  this.elements.trimToSize();}  }
class C{  void registerRefs() throws IOException {  if (!incomingRefTable.isEmpty()) {    for (    Map.Entry<Endpoint,List<LiveRef>> entry : incomingRefTable.entrySet()) {      DGCClient.registerRefs(entry.getKey(),entry.getValue());    }  }}  }
class C{  public SerializationException(String message,Throwable cause){  super(message,cause);}  }
