class C{  public void paintPanelBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public DSAMEFormTag(){  super();  autoCompleteEnabled=SystemProperties.getAsBoolean(Constants.AUTOCOMPLETE_ENABLED,true);}  }
class C{  public COTException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  private static <T>Handler<AsyncResult<T>> _failure(){  return null;}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#startPrefixMapping: " + prefix + ", "+ uri);  if (m_contentHandler != null) {    m_contentHandler.startPrefixMapping(prefix,uri);  }}  }
class C{  public void testFloatValuePositiveInfinity1(){  byte[] a={0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};  int aSign=1;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == Float.POSITIVE_INFINITY);}  }
class C{  public int indexOf(int elem,int index){  if (null == m_map)   return -1;  for (int i=index; i < m_firstFree; i++) {    int node=m_map[i];    if (node == elem)     return i;  }  return -1;}  }
class C{  public AncestorEvent(JComponent source,int id,Container ancestor,Container ancestorParent){  super(source,id);  this.ancestor=ancestor;  this.ancestorParent=ancestorParent;}  }
class C{  public ScriptedSyncFailureHandler(ScriptRegistry scriptRegistry,JsonValue config,SyncFailureHandler... builtInHandlers) throws ScriptException {  this.scriptEntry=scriptRegistry.takeScript(config);  this.builtInHandlers=new HashMap<>();  for (  SyncFailureHandler handler : builtInHandlers) {    if (handler instanceof LoggedIgnoreHandler) {      this.builtInHandlers.put("loggedIgnore",handler);    } else     if (handler instanceof DeadLetterQueueHandler) {      this.builtInHandlers.put("deadLetterQueue",handler);    }  }}  }
class C{  public WeakLongHashMap(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  @Activate public void activate(@SuppressWarnings("unused") ComponentContext context) throws GeneralSecurityException {  logger.debug("Activating key store service");  this.store=keyStoreInitializer.initializeKeyStore(getKeyStoreDetails());  store();}  }
class C{  private void checkRSConnectionsAndGenId(int[] rsIndexes,String msg) throws Exception {  debugInfo("checkRSConnectionsAndGenId for <" + msg + ">");  int secTimeout=30;  int nSec=0;  int nRSs=rsIndexes.length;  while (true) {    boolean connected=false;    boolean sameGenId=false;    int nOk=0;    for (int i=0; i < nRSs; i++) {      int rsIndex=rsIndexes[i];      ReplicationServer repServer=rs[rsIndex];      int curRsId=repServer.getServerId();      Iterator<ReplicationServerDomain> iter=repServer.getDomainIterator();      if (!iter.hasNext()) {        debugInfo("RS " + curRsId + " has no domain yet");        break;      }      Set<Integer> connectedRSsId=iter.next().getConnectedRSs().keySet();      int nPeer=0;      debugInfo("Checking RSs connected to RS " + curRsId);      for (int j=0; j < nRSs; j++) {        int otherRsIndex=rsIndexes[j];        if (otherRsIndex != rsIndex) {          int otherRsId=otherRsIndex + 501;          if (connectedRSsId.contains(otherRsId)) {            debugInfo("\tRS " + curRsId + " sees RS "+ otherRsId);            nPeer++;          } else {            debugInfo("\tRS " + curRsId + " does not see RS "+ otherRsId);          }        }      }      if (nPeer == nRSs - 1) {        nOk++;      }    }    if (nOk == nRSs) {      debugInfo("Connections are ok");      connected=true;    } else {      debugInfo("Connections are not ok");    }    long refGenId=-1L;    boolean refGenIdInitialized=false;    nOk=0;    for (int i=0; i < nRSs; i++) {      ReplicationServer repServer=rs[i];      int curRsId=repServer.getServerId();      Iterator<ReplicationServerDomain> iter=repServer.getDomainIterator();      if (!iter.hasNext()) {        debugInfo("RS " + curRsId + " has no domain yet");        break;      }      Long rsGenId=iter.next().getGenerationId();      if (rsGenId == -1L) {        debugInfo("\tRS " + curRsId + " gen id is -1 which is not expected");        break;      }      if (!refGenIdInitialized) {        refGenId=rsGenId;        refGenIdInitialized=true;      }      if (rsGenId == refGenId) {        debugInfo("\tRS " + curRsId + " gen id is "+ rsGenId+ " as expected");        nOk++;      } else {        debugInfo("\tRS " + curRsId + " gen id is "+ rsGenId+ " but expected "+ refGenId);      }    }    if (nOk == nRSs) {      debugInfo("Gen ids are ok");      sameGenId=true;    } else {      debugInfo("Gen ids are not ok");    }    if (connected && sameGenId) {      debugInfo("checkRSConnections: all RSs connected and with same gen id obtained after " + nSec + " seconds.");      return;    }    Thread.sleep(1000);    nSec++;    assertTrue(nSec <= secTimeout,"checkRSConnections: could not obtain that RSs are connected and have the same gen id after " + (nSec - 1) + " seconds. ["+ msg+ "]");  }}  }
class C{  public static boolean checkSchema(){  return directoryServer.checkSchema;}  }
class C{  private String registerForToken(InstanceID instanceID,String senderId) throws IOException {  String token=instanceID.getToken(senderId,GoogleCloudMessaging.INSTANCE_ID_SCOPE,null);  if (GcmHelper.DEBUG_ENABLED)   Log.i(GcmHelper.TAG,"PushRegistrationService: GCM Registration Token: " + token);  GcmHelper.getInstance().tokenUpdated(getApplicationContext(),token);  return token;}  }
class C{  public boolean addFaultyMember(Member mbr,Exception x){  return addFaultyMember(new FaultyMember(mbr,x));}  }
class C{  boolean isEmpty() throws ChangelogException {  return getNewestRecord() == null;}  }
class C{  protected void configureWeld(Weld weld){}  }
class C{  public BatchUpdateException(String reason,String SQLState,int vendorCode,int[] updateCounts,Throwable cause){  super(reason,SQLState,vendorCode,cause);  this.updateCounts=updateCounts;}  }
class C{  public void clear(){  dataMap.clear();}  }
class C{  public void appendCell(double value){  appendCell(String.valueOf(value));}  }
class C{  public Mp4TagTextField(String id,ByteBuffer data) throws UnsupportedEncodingException {  super(id,data);}  }
class C{  private void mergeConfigFiles(String instanceConfigFileMigrate,String instanceConfigFile) throws Exception {  BufferedReader br=null;  PrintWriter pw=null;  Debug.log("MigrateConfigurePropertiesTask.mergeConfigFiles() - " + "config file to migrate from: " + instanceConfigFileMigrate + " config file to migrate to: "+ instanceConfigFile);  try {    FileReader fr=new FileReader(instanceConfigFile);    br=new BufferedReader(fr);    String tmpFileName=instanceConfigFile + ".tmp";    pw=new PrintWriter(new FileWriter(tmpFileName));    String lineData=null;    KeyValue keyValue=null;    ArrayList migrateLines=null;    while ((lineData=br.readLine()) != null) {      lineData=lineData.trim();      if (lineData.startsWith(FileUtils.HASH) || lineData.length() == 0) {        pw.println(lineData);      } else {        keyValue=new KeyValue(lineData);        if (nonMigratedParameters.contains(keyValue.getKey())) {          pw.println(lineData);          continue;        }        migrateLines=getMigrateLines(keyValue.getParameter(),instanceConfigFileMigrate);        Debug.log("MigrateConfigurePropertiesTask.mergeConfigFiles() - " + "parameter: " + keyValue.getParameter() + " matched migration parameter: "+ migrateLines);        if (migrateLines.size() > 0) {          for (int i=0; i < migrateLines.size(); i++) {            pw.println(migrateLines.get(i));          }        } else {          pw.println(lineData);        }      }    }    br.close();    pw.flush();    pw.close();    FileUtils.copyFile(tmpFileName,instanceConfigFile);    File tmpFile=new File(tmpFileName);    tmpFile.delete();  } catch (  Exception ex) {    if (br != null) {      try {        br.close();      } catch (      Exception ex1) {      }    }    if (pw != null) {      try {        pw.close();      } catch (      Exception ex1) {      }    }  }}  }
class C{  public Status createStatus(org.w3c.dom.Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.STATUS,value);  if (obj == null) {    return new StatusImpl(value);  } else {    return (Status)obj;  }}  }
class C{  public Polynomial25519(long[] other){  for (int i=0; i < other.length && i < 19; i++) {    c[i]=other[i];  }}  }
class C{  private void checkEnabledCipherSuites() throws SSLException {  for (  String enabledCipherSuite : enabledCipherSuites) {    if (enabledCipherSuite.equals(NativeCrypto.TLS_EMPTY_RENEGOTIATION_INFO_SCSV)) {      continue;    }    String keyType=CipherSuite.getByName(enabledCipherSuite).getServerKeyType();    if (keyType == null) {      return;    }    if (keyType.equals(CipherSuite.KEY_TYPE_RSA) || keyType.equals(CipherSuite.KEY_TYPE_DH_RSA)) {      if (checkForPrivateKey(keyType,RSAPrivateKey.class)) {        return;      }      continue;    }    if (keyType.equals(CipherSuite.KEY_TYPE_DSA) || keyType.equals(CipherSuite.KEY_TYPE_DH_DSA)) {      if (checkForPrivateKey(keyType,DSAPrivateKey.class)) {        return;      }      continue;    }    if (keyType.equals(CipherSuite.KEY_TYPE_EC) || keyType.equals(CipherSuite.KEY_TYPE_EC_RSA) || keyType.equals(CipherSuite.KEY_TYPE_EC_EC)) {      if (checkForPrivateKey(keyType,ECPrivateKey.class)) {        return;      }      continue;    }    throw new IllegalStateException("Unknown key type " + keyType);  }  throw new SSLException("Could not find any key store entries " + "to support the enabled cipher suites.");}  }
class C{  public org.omg.CORBA.DomainManager[] _get_domain_managers(){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  ReasonsMask(ReasonFlags reasons){  _reasons=reasons.intValue();}  }
class C{  public void testFloatValueNegRounded2(){  byte[] a={-128,1,2,-128,4,5,60,23,1,-3,-5};  int aSign=-1;  float result=-1.5474728E26f;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public boolean indent(){  return append("       ");}  }
class C{  public Enum asEnum(){  return this.modificationTypeEnum;}  }
class C{  public BadLocationException(String s,int offs){  super(s);  this.offs=offs;}  }
class C{  private boolean validateIpRangeSet(Set ipSet) throws PolicyException {  Iterator ipRanges=ipSet.iterator();  while (ipRanges.hasNext()) {    String ipRange=(String)ipRanges.next();    StringTokenizer st=new StringTokenizer(ipRange,"-");    int tokenCount=st.countTokens();    if (tokenCount > 2) {      String args[]={IP_RANGE,ipRange};      throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);    }    String startIp=st.nextToken();    String endIp=startIp;    if (tokenCount == 2) {      endIp=st.nextToken();    }    ipList.add(IPv6Address.fromString(startIp));    ipList.add(IPv6Address.fromString(endIp));  }  return true;}  }
class C{  public void paintTableHeaderBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private void doMatch(FileEntry entry,File file){  if (entry.refresh(file)) {    for (    FileAlterationListener listener : listeners) {      if (entry.isDirectory()) {        listener.onDirectoryChange(file);      } else {        listener.onFileChange(file);      }    }  }}  }
class C{  public boolean isCaseSensitive(){  return sensitive;}  }
class C{  public void test_read$CII() throws IOException {  lnr=new LineNumberReader(new StringReader(text));  char[] c=new char[100];  lnr.read(c,0,4);  assertTrue("Test 1: Read returned incorrect characters.","0\n1\n".equals(new String(c,0,4)));  assertEquals("Test 2: Read failed to inc lineNumber",2,lnr.getLineNumber());  lnr.close();  try {    lnr.read(c,0,4);    fail("Test 3: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  private void disableComponents(){  setEnabledOK(false);  lInitContents.setVisible(true);  argumentsScroll.setVisible(false);  for (  JComponent comp : comps) {    comp.setEnabled(false);  }}  }
class C{  public void addAttribute(String uri,String localName,String rawName,String type,String value) throws SAXException {  if (m_elemContext.m_startTagOpen) {    addAttributeAlways(uri,localName,rawName,type,value,false);  }}  }
class C{  public static Reflect on(String name,ClassLoader classLoader) throws ReflectException {  return on(forName(name,classLoader));}  }
class C{  public void close_output(){  if (file_writer != null) {    try {      file_writer.close();    } catch (    IOException e) {      System.out.println("unable to close logfile");    }  }  write_enabled=false;}  }
class C{  public DynamicGroupSearchThread(DynamicGroupMemberList memberList,DN[] baseDNs,SearchFilter[] filters,LDAPURL[][] memberURLs){  super("Dynamic Group Search Thread " + memberList.getDynamicGroupDN());  this.memberList=memberList;  this.baseDNs=baseDNs;  this.searchFilters=filters;  this.memberURLs=memberURLs;  searchCounter=0;}  }
class C{  @DataProvider(name="byteSequenceProvider") public Object[][] byteSequenceProvider() throws Exception {  byte[] testBytes=new byte[]{(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08};  return new Object[][]{{ByteString.empty(),new byte[0]},{ByteString.valueOfBase64("AAA="),new byte[]{0x00,0x00}},{ByteString.valueOfBase64("AAAA"),new byte[]{0x00,0x00,0x00}},{ByteString.valueOfBase64("AAAAAA=="),new byte[]{0x00,0x00,0x00,0x00}},{ByteString.valueOfInt(1),new byte[]{(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x01}},{ByteString.valueOfInt(Integer.MAX_VALUE),new byte[]{(byte)0x7F,(byte)0xFF,(byte)0xFF,(byte)0xFF}},{ByteString.valueOfInt(Integer.MIN_VALUE),new byte[]{(byte)0x80,(byte)0x00,(byte)0x00,(byte)0x00}},{ByteString.valueOfLong(Long.MAX_VALUE),new byte[]{(byte)0x7F,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF}},{ByteString.valueOfLong(Long.MIN_VALUE),new byte[]{(byte)0x80,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00,(byte)0x00}},{ByteString.valueOfUtf8("cn=testvalue"),"cn=testvalue".getBytes("UTF-8")},{ByteString.valueOfObject("cn=testvalue"),"cn=testvalue".getBytes("UTF-8")},{ByteString.valueOfUtf8("cn=testvalue".toCharArray()),"cn=testvalue".getBytes("UTF-8")},{ByteString.valueOfObject("cn=testvalue".toCharArray()),"cn=testvalue".getBytes("UTF-8")},{ByteString.valueOfBytes(new byte[0]),new byte[0]},{ByteString.valueOfBytes(testBytes),testBytes},{ByteString.valueOfObject(testBytes),testBytes},{ByteString.valueOfObject(ByteString.valueOfUtf8("cn=testvalue")),"cn=testvalue".getBytes("UTF-8")},{ByteString.wrap(new byte[0]),new byte[0]},{ByteString.wrap(new byte[]{(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08}),new byte[]{(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08}},{ByteString.wrap(new byte[]{(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08,(byte)0x09,(byte)0x10},0,8),new byte[]{(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08}},{ByteString.wrap(new byte[]{(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08,(byte)0x09,(byte)0x10},1,8),new byte[]{(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08,(byte)0x09}},{ByteString.wrap(new byte[]{(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08,(byte)0x09,(byte)0x10},2,8),new byte[]{(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08,(byte)0x09,(byte)0x10}},{ByteString.wrap(new byte[]{(byte)0x01,(byte)0x02,(byte)0x03,(byte)0x04,(byte)0x05,(byte)0x06,(byte)0x07,(byte)0x08},3,0),new byte[0]}};}  }
class C{  public DTM createDocumentFragment(){  return m_dtmManager.createDocumentFragment();}  }
class C{  public RelativeInheritedDefaultBehaviorProvider(AbstractManagedObjectDefinition<?,?> d,String propertyName,int offset){  if (offset < 0) {    throw new IllegalArgumentException("Negative offset");  }  this.d=d;  this.propertyName=propertyName;  this.offset=offset;}  }
class C{  public <T>T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {  if (isWrapperFor(iface)) {    return iface.cast(this);  } else {    throw new SQLException("unwrap failed for:" + iface);  }}  }
class C{  private int handleP(String value,DoubleMetaphoneResult result,int index){  if (charAt(value,index + 1) == 'H') {    result.append('F');    index+=2;  } else {    result.append('P');    index=contains(value,index + 1,1,"P","B") ? index + 2 : index + 1;  }  return index;}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true);}  }
class C{  public String toStringImpl(){  return "";}  }
class C{  public void bindAllArgsAsStrings(String[] bindArgs){  if (bindArgs != null) {    for (int i=bindArgs.length; i != 0; i--) {      bindString(i,bindArgs[i - 1]);    }  }}  }
class C{  public void replaceResponseProvider(String name,ResponseProvider respProvider) throws NameNotFoundException {  respProviders.replaceResponseProvider(name,respProvider);}  }
class C{  public void testTryingProceedingCompletedScenario(){  try {    Request register=createRiRegisterRequest();    SipEventCollector responseCollector=new SipEventCollector();    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(register);    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    RequestEvent registerReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (registerReceivedEvent == null || registerReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The initial register request was not received by the TI!");    ServerTransaction tran=null;    try {      tran=tiSipProvider.getNewServerTransaction(registerReceivedEvent.getRequest());    } catch (    Exception ex) {      ex.printStackTrace();      fail(ex.getClass().getName() + "was thrown while trying to " + "create the server transaction");    }    assertNotNull("tiSipProvider.getNewServerTransaction() returned null",tran);    assertEquals(TransactionState.TRYING,tran.getState());    Response trying=null;    try {      trying=tiMessageFactory.createResponse(Response.TRYING,registerReceivedEvent.getRequest());      tran.sendResponse(trying);    } catch (    Exception ex) {      throw new TiUnexpectedError("Failed to send a TRYING response",ex);    }    waitForMessage();    assertEquals("The transaction did not pass into the PROCEEDING state " + "upon transmission of a 1xx response.",TransactionState.PROCEEDING,tran.getState());    ResponseEvent responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The TRYING response has not been sent by the TI.",responseEvent);    assertTrue("A response different from 100 was sent by the TI",Response.TRYING == responseEvent.getResponse().getStatusCode());    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(register);    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    registerReceivedEvent=eventCollector.extractCollectedRequestEvent();    assertNull("Retransmitted REGISTERs should not be passed to the TU",registerReceivedEvent);    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("No TRYING response has been resent by the TI upon reception " + "of a retransmitted REGISTER request",responseEvent);    assertTrue("A response different from 100 was sent by the TI upon " + "reception of a retransmitted REGISTER",Response.TRYING == responseEvent.getResponse().getStatusCode());    Response ringing=null;    try {      ringing=tiMessageFactory.createResponse(Response.RINGING,tran.getRequest());      ((ToHeader)ringing.getHeader(ToHeader.NAME)).setTag(Integer.toString(hashCode()));    } catch (    ParseException ex) {      throw new TiUnexpectedError("A ParseException was thrown while trying to create a ringing " + "response using TI",ex);    }    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      tran.sendResponse(ringing);    } catch (    SipException ex) {      ex.printStackTrace();      fail("The TI failed to send a RINGING response");    }    assertEquals("The Transaction did not remain PROCEEDING after transmitting a RINGING response",TransactionState.PROCEEDING,tran.getState());    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The RINGING response was not received by the RI",responseEvent);    assertTrue("A response different from RINGING was sent by the TI",Response.RINGING == responseEvent.getResponse().getStatusCode());    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(register);    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    registerReceivedEvent=eventCollector.extractCollectedRequestEvent();    assertNull("Retransmitted REGISTERs should not be passed to the TU",registerReceivedEvent);    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("No RINGING response has been sent by the TI upon reception " + "of an REGISTER request",responseEvent);    assertTrue("A response different from RINGING was sent by the TI upon " + "reception of a retransmitted REGISTER",Response.RINGING == responseEvent.getResponse().getStatusCode());    assertEquals("The server transaction left the PROCEEDING state.",TransactionState.PROCEEDING,tran.getState());    Response ok=null;    try {      ok=tiMessageFactory.createResponse(Response.OK,tran.getRequest());      ((ToHeader)ok.getHeader(ToHeader.NAME)).setTag(Integer.toString(hashCode()));    } catch (    ParseException ex) {      throw new TiUnexpectedError("A ParseException was thrown while trying to create a busy_here " + "response using TI",ex);    }    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      tran.sendResponse(ok);    } catch (    SipException ex) {      ex.printStackTrace();      fail("The TI failed to send a OK response");    }    assertEquals("The Transaction did not remain COMPLETED after transmitting a BUSY_HERE response",TransactionState.COMPLETED,tran.getState());    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The OK response was not received by the RI",responseEvent);    assertTrue("A response different from OK was sent by the TI",Response.OK == responseEvent.getResponse().getStatusCode());    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(register);    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    registerReceivedEvent=eventCollector.extractCollectedRequestEvent();    assertNull("Retransmitted REGISTERs should not be passed to the TU",registerReceivedEvent);    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("No OK response has been sent by the TI upon reception " + "of a retransmitted REGISTER request",responseEvent);    assertTrue("A response different from OK was sent by the TI upon " + "reception of a retransmitted invite REGISTER",Response.OK == responseEvent.getResponse().getStatusCode());    assertEquals("The server transaction left the COMPLETED state.",TransactionState.COMPLETED,tran.getState());  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public ServiceDetail(){}  }
class C{  public DERExternal(ASN1ObjectIdentifier directReference,ASN1Integer indirectReference,ASN1Primitive dataValueDescriptor,DERTaggedObject externalData){  this(directReference,indirectReference,dataValueDescriptor,externalData.getTagNo(),externalData.toASN1Primitive());}  }
class C{  static boolean isFractionalConfigConsistent(FractionalConfig fractionalConfig,Iterator<ByteString> exclIt,Iterator<ByteString> inclIt){  Map<String,Set<String>> storedFractionalSpecificClassesAttributes=new HashMap<>();  Set<String> storedFractionalAllClassesAttributes=new HashSet<>();  int storedFractionalMode;  try {    storedFractionalMode=FractionalConfig.parseFractionalConfig(exclIt,inclIt,storedFractionalSpecificClassesAttributes,storedFractionalAllClassesAttributes);  } catch (  ConfigException e) {    logger.info(NOTE_ERR_FRACTIONAL,fractionalConfig.getBaseDn(),stackTraceToSingleLineString(e));    return false;  }  FractionalConfig storedFractionalConfig=new FractionalConfig(fractionalConfig.getBaseDn());  storedFractionalConfig.setFractional(storedFractionalMode != FractionalConfig.NOT_FRACTIONAL);  if (storedFractionalConfig.isFractional()) {    storedFractionalConfig.setFractionalExclusive(storedFractionalMode == FractionalConfig.EXCLUSIVE_FRACTIONAL);  }  storedFractionalConfig.setFractionalSpecificClassesAttributes(storedFractionalSpecificClassesAttributes);  storedFractionalConfig.setFractionalAllClassesAttributes(storedFractionalAllClassesAttributes);  try {    return FractionalConfig.isFractionalConfigEquivalent(fractionalConfig,storedFractionalConfig);  } catch (  ConfigException e) {    logger.info(NOTE_ERR_FRACTIONAL,fractionalConfig.getBaseDn(),stackTraceToSingleLineString(e));    return false;  }}  }
class C{  public boolean isDoneIndexing(){  if (getIndex() != null) {    return getIndex().isActive();  } else {    return false;  }}  }
class C{  @Override public int read(){  return -1;}  }
class C{  public UnsupportedClassVersionError(){  super();}  }
class C{  protected boolean isPersistable(Class<?> clazz){  for (int i=0; i < persistables.length; i++) {    if (persistables[i] == clazz || persistables[i].isAssignableFrom(clazz)) {      return true;    }  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode17.class,args);}  }
class C{  private void tableSelected(){  List<TaskEntry> tasks=getSelectedTasks(true);  cancelTask.setEnabled(!tasks.isEmpty());  detailsSubpanel.removeAll();  tasks=getSelectedTasks(false);  boolean displayContents=false;  if (tasks.isEmpty()) {    noDetailsLabel.setText(INFO_CTRL_PANEL_NO_TASK_SELECTED.get().toString());    logsScroll.setVisible(false);    noLogsLabel.setText(INFO_CTRL_PANEL_NO_TASK_SELECTED.get().toString());    noLogsLabel.setVisible(true);  } else   if (tasks.size() > 1) {    noDetailsLabel.setText(INFO_CTRL_PANEL_MULTIPLE_TASKS_SELECTED.get().toString());    logsScroll.setVisible(false);    noLogsLabel.setText(INFO_CTRL_PANEL_MULTIPLE_TASKS_SELECTED.get().toString());    noLogsLabel.setVisible(true);  } else {    TaskEntry taskEntry=tasks.iterator().next();    Map<LocalizableMessage,List<String>> taskSpecificAttrs=taskEntry.getTaskSpecificAttributeValuePairs();    List<LocalizableMessage> lastLogMessages=taskEntry.getLogMessages();    if (!lastLogMessages.isEmpty()) {      StringBuilder sb=new StringBuilder();      for (      LocalizableMessage msg : lastLogMessages) {        if (sb.length() != 0) {          sb.append("\n");        }        sb.append(msg);      }      logs.setText(sb.toString());    } else {      logs.setText("");    }    logsScroll.setVisible(true);    noLogsLabel.setVisible(false);    if (taskSpecificAttrs.isEmpty()) {      noDetailsLabel.setText(INFO_CTRL_PANEL_NO_TASK_SPECIFIC_DETAILS.get().toString());    } else {      displayContents=true;      GridBagConstraints gbc=new GridBagConstraints();      gbc.gridy=0;      gbc.fill=GridBagConstraints.NONE;      gbc.anchor=GridBagConstraints.NORTHWEST;      gbc.insets.top=10;      for (      LocalizableMessage label : taskSpecificAttrs.keySet()) {        List<String> values=taskSpecificAttrs.get(label);        gbc.gridx=0;        gbc.insets.left=10;        gbc.insets.right=0;        detailsSubpanel.add(Utilities.createPrimaryLabel(INFO_CTRL_PANEL_OPERATION_NAME_AS_LABEL.get(label)),gbc);        gbc.gridx=1;        gbc.insets.right=10;        String s=joinAsString("\n",values);        detailsSubpanel.add(Utilities.makeHtmlPane(s,ColorAndFontConstants.defaultFont),gbc);        gbc.gridy++;      }      gbc.gridx=0;      gbc.gridwidth=2;      gbc.weightx=1.0;      gbc.weighty=1.0;      gbc.fill=GridBagConstraints.BOTH;      detailsSubpanel.add(Box.createGlue(),gbc);    }  }  noDetailsLabel.setVisible(!displayContents);  revalidate();  repaint();}  }
class C{  private E peekExpired(){  E first=q.peek();  return (first == null || first.getDelay(NANOSECONDS) > 0) ? null : first;}  }
class C{  public SASLResponse processSASLRequest(SASLRequest saslReq,Message message,String respMessageID){  if (debug.messageEnabled()) {    debug.message("PlainMechanismHandler.processSASLRequest: ");  }  String refToMessageID=saslReq.getRefToMessageID();  boolean isFirstRequest=(refToMessageID == null || refToMessageID.length() == 0);  if (debug.messageEnabled()) {    debug.message("PlainMechanismHandler.processSASLRequest: " + "refToMessageID = " + refToMessageID);  }  SASLResponse saslResp=null;  byte[] data=saslReq.getData();  if (data == null) {    if (isFirstRequest) {      saslResp=new SASLResponse(SASLResponse.CONTINUE);      saslResp.setServerMechanism(AuthnSvcConstants.MECHANISM_PLAIN);    } else {      saslResp=new SASLResponse(SASLResponse.ABORT);    }  } else {    String dataStr=null;    try {      dataStr=new String(data,"UTF-8");    } catch (    Exception ex) {      debug.error("PlainMechanismHandler.processSASLRequest: ",ex);    }    if (dataStr == null) {      saslResp=new SASLResponse(SASLResponse.ABORT);    } else {      saslResp=authenticate(dataStr,message);    }    if (isFirstRequest) {      saslResp.setServerMechanism(AuthnSvcConstants.MECHANISM_PLAIN);    }  }  return saslResp;}  }
class C{  @Override protected Object createSsoServerFedCOTsMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   fedCotsGroup=new SsoServerFedCOTsImpl(this,server); else   fedCotsGroup=new SsoServerFedCOTsImpl(this);  return fedCotsGroup;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  boolean state;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  state=employeeNode.hasChildNodes();  assertTrue("nodeHasChildAssert1",state);}  }
class C{  public void put(String key,Object value){  Bindings nn=getBindings(ScriptContext.ENGINE_SCOPE);  if (nn != null) {    nn.put(key,value);  }}  }
class C{  public FlowLayout(int align,int hgap,int vgap){  this.hgap=hgap;  this.vgap=vgap;  setAlignment(align);}  }
class C{  public NodeList nodelist() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NODELIST,new Object[]{getTypeString()});  return null;}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeTruncatedLengthArrayAsOctetString() throws Exception {  super.testDecodeTruncatedLengthArrayAsOctetString();}  }
class C{  private boolean isDelimiter(){  if (!isSpace()) {    int ch=peekChar();    if (ch == '=' || ch == '>' || ch == '"' || ch == '\'' || ch == '/') {      return true;    }    if (ch == '-') {      Mark mark=mark();      if (((ch=nextChar()) == '>') || ((ch == '-') && (nextChar() == '>'))) {        setCurrent(mark);        return true;      } else {        setCurrent(mark);        return false;      }    }    return false;  } else {    return true;  }}  }
class C{  public boolean deleteAll(){  return database.delete(DATABASE_TABLE,null,null) > 0;}  }
class C{  public ByteLookupTable(int offset,byte data[]){  super(offset,data.length);  numComponents=1;  numEntries=data.length;  this.data=new byte[1][];  this.data[0]=data;}  }
class C{  public static void addOCGRadioGroup(PdfDocument document,List<PdfLayer> group){  document.getCatalog().getOCProperties(true).addOCGRadioGroup(group);}  }
class C{  @Override public void fireContainerEvent(String type,Object data){  if (listeners.size() < 1)   return;  ContainerEvent event=new ContainerEvent(this,type,data);  for (  ContainerListener listener : listeners) {    listener.containerEvent(event);  }}  }
class C{  protected void handleGenericException(Exception e) throws SAXException {  reportError(e.getMessage(),e,false);}  }
class C{  public byte[] encrypt(byte[] data) throws GeneralSecurityException, CryptoManagerException {  CipherInfo currentCipher=cipherInfo;  return cryptoManager.encrypt(currentCipher.cipherTransformation,currentCipher.cipherKeyLength,data);}  }
class C{  public boolean isCycle(){  return isCycle;}  }
class C{  public boolean containsLogin(){  return prompts.contains(PROMPT_LOGIN);}  }
class C{  public boolean isValid(){  return !(containsNone() && (containsConsent() || containsLogin())) && !containsSelectAccount();}  }
class C{  public static boolean isReservedLongOption(String name){  return reservedLongOptionNames.contains(name);}  }
class C{  private BackupProtos.Key backupKeyToKey(String backupKey) throws InvalidBackupException {  try {    BackupProtos.Key key=BackupProtos.Key.parseFrom(Base64.decode(backupKey,Base64.DEFAULT));    if (key.checksum != checkKey(key)) {      key=null;      throw new InvalidBackupException("invalid key read from stream" + backupKey);    }    return key;  } catch (  InvalidProtocolBufferNanoException e) {    throw new InvalidBackupException(e);  }catch (  IllegalArgumentException e) {    throw new InvalidBackupException(e);  }}  }
class C{  @Override public long skip(long numberOfBytes) throws IOException {  if (eof) {    throw new IOException("Skip after end of file");  }  if (position == size) {    return doEndOfFile();  }  position+=numberOfBytes;  long returnLength=numberOfBytes;  if (position > size) {    returnLength=numberOfBytes - (position - size);    position=size;  }  return returnLength;}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  private boolean isRecordingCardUnmount(Intent intent){  String sdcard=FmRadioService.getRecordingSdcard();  String unmountSDCard=intent.getData().toString();  Log.d(TAG,"unmount sd card file path: " + unmountSDCard);  return unmountSDCard.equalsIgnoreCase("file://" + sdcard) ? true : false;}  }
class C{  @Override public void write(ASN1Writer stream) throws IOException {  stream.writeStartSequence(OP_TYPE_MODIFY_REQUEST);  stream.writeOctetString(dn);  stream.writeStartSequence();  for (  RawModification mod : modifications) {    mod.write(stream);  }  stream.writeEndSequence();  stream.writeEndSequence();}  }
class C{  private ValueRange rangeWeekOfWeekBasedYear(TemporalAccessor temporal){  if (!temporal.isSupported(DAY_OF_YEAR)) {    return WEEK_OF_YEAR_RANGE;  }  int dow=localizedDayOfWeek(temporal);  int doy=temporal.get(DAY_OF_YEAR);  int offset=startOfWeekOffset(doy,dow);  int week=computeWeek(offset,doy);  if (week == 0) {    ChronoLocalDate date=Chronology.from(temporal).date(temporal);    date=date.minus(doy + 7,DAYS);    return rangeWeekOfWeekBasedYear(date);  }  ValueRange dayRange=temporal.range(DAY_OF_YEAR);  int yearLen=(int)dayRange.getMaximum();  int newYearWeek=computeWeek(offset,yearLen + weekDef.getMinimalDaysInFirstWeek());  if (week >= newYearWeek) {    ChronoLocalDate date=Chronology.from(temporal).date(temporal);    date=date.plus(yearLen - doy + 1 + 7,ChronoUnit.DAYS);    return rangeWeekOfWeekBasedYear(date);  }  return ValueRange.of(1,newYearWeek - 1);}  }
class C{  static void sort(char[] a,int left,int right,char[] work,int workBase,int workLen){  if (right - left > COUNTING_SORT_THRESHOLD_FOR_SHORT_OR_CHAR) {    int[] count=new int[NUM_CHAR_VALUES];    for (int i=left - 1; ++i <= right; count[a[i]]++)     ;    for (int i=NUM_CHAR_VALUES, k=right + 1; k > left; ) {      while (count[--i] == 0)       ;      char value=(char)i;      int s=count[i];      do {        a[--k]=value;      } while (--s > 0);    }  } else {    doSort(a,left,right,work,workBase,workLen);  }}  }
class C{  private void enqueueTopoInfoToAllRSs(){  sendRSTopologyMsg=true;}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {}  }
class C{  private static boolean isWindowsAbsolutePath(String systemId){  if (!isAbsolutePath(systemId))   return false;  if (systemId.length() > 2 && systemId.charAt(1) == ':' && Character.isLetter(systemId.charAt(0)) && (systemId.charAt(2) == '\\' || systemId.charAt(2) == '/'))   return true; else   return false;}  }
class C{  public void addChild(int index,XMPNode node) throws XMPException {  assertChildNotExisting(node.getName());  node.setParent(this);  getChildren().add(index - 1,node);}  }
class C{  public void forwardTo(RequestContext reqContext) throws NavigationException {  HttpServletRequest req=reqContext.getRequest();  String template=(String)req.getParameter("Template");  if ((template != null) && template.equals("true")) {    String operation=(String)req.getParameter("Op");    AMServiceProfileViewBeanBase vb=null;    if (operation.equals("add")) {      vb=(AMServiceProfileViewBeanBase)getViewBean(ServicesAddViewBean.class);    } else {      vb=(AMServiceProfileViewBeanBase)getViewBean(ServicesEditViewBean.class);      vb.setPageSessionAttribute(AMAdminConstants.SAVE_VB_NAME,"com.sun.identity.console.realm.ServicesViewBean");    }    vb.setPageSessionAttribute(AMAdminConstants.CURRENT_REALM,hexToString((String)req.getParameter("Location")));    vb.setPageSessionAttribute(AMServiceProfileViewBeanBase.SERVICE_NAME,(String)req.getParameter("ServiceName"));    passPgSessionMap(vb);    vb.forwardTo(reqContext);  } else {    super.forwardTo(reqContext);  }}  }
class C{  private Set searchResultsToSet(SearchResults results) throws UMSException {  Set set=new OrderedSet();  if (results != null) {    while (results.hasMoreElements()) {      PersistentObject one=results.next();      set.add(one.getGuid().toString());    }  }  return set;}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof ChannelBinding))   return false;  ChannelBinding cb=(ChannelBinding)obj;  if ((initiator != null && cb.initiator == null) || (initiator == null && cb.initiator != null))   return false;  if (initiator != null && !initiator.equals(cb.initiator))   return false;  if ((acceptor != null && cb.acceptor == null) || (acceptor == null && cb.acceptor != null))   return false;  if (acceptor != null && !acceptor.equals(cb.acceptor))   return false;  return Arrays.equals(appData,cb.appData);}  }
class C{  public static String generateTOTP(String key,String time,String returnDigits){  return generateTOTP(key,time,returnDigits,"HmacSHA1");}  }
class C{  public void add(int index,HDR sipHeader) throws IndexOutOfBoundsException {  hlist.add(index,sipHeader);}  }
class C{  protected void printAttribute(PrintWriter writer,int indent,Object bean,StoreDescription desc,String attributeName,Object bean2,Object value){  if (isPrintValue(bean,bean2,attributeName,desc))   printValue(writer,indent,attributeName,value);}  }
class C{  public static StringArgument keyStorePasswordArgument() throws ArgumentException {  return StringArgument.builder(OPTION_LONG_KEYSTORE_PWD).shortIdentifier(OPTION_SHORT_KEYSTORE_PWD).description(INFO_ARGUMENT_DESCRIPTION_KEYSTOREPASSWORD.get()).valuePlaceholder(INFO_KEYSTORE_PWD_PLACEHOLDER.get()).buildArgument();}  }
class C{  public PlaLineInt translate_by(PlaVectorInt p_vector){  if (p_vector.equals(PlaVectorInt.ZERO))   return this;  PlaPointInt new_a=point_a.translate_by(p_vector);  PlaPointInt new_b=point_b.translate_by(p_vector);  return new PlaLineInt(new_a,new_b);}  }
class C{  synchronized boolean readCertificates(){  if (metaEntries == null) {    return false;  }  Iterator<String> it=metaEntries.keySet().iterator();  while (it.hasNext()) {    String key=it.next();    if (key.endsWith(".DSA") || key.endsWith(".RSA") || key.endsWith(".EC")) {      verifyCertificate(key);      if (metaEntries == null) {        return false;      }      it.remove();    }  }  return true;}  }
class C{  public WebtopParser(boolean usegeneric){  useGenericClass=usegeneric;}  }
class C{  public static int dpToPx(float dp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  int processDataRead(){  if (bindInProgress.get() || startTLSInProgress.get()) {    return 0;  }  try {    int result=asn1Reader.processChannelData();    if (result < 0) {      disconnect(DisconnectReason.CLIENT_DISCONNECT,false,null);      return -1;    }    return result;  } catch (  Exception e) {    logger.traceException(e);    if (asn1Reader.hasRemainingData() || e instanceof SSLException) {      LocalizableMessage m=ERR_LDAP_CLIENT_IO_ERROR_DURING_READ.get(e);      disconnect(DisconnectReason.IO_ERROR,true,m);    } else {      LocalizableMessage m=ERR_LDAP_CLIENT_IO_ERROR_BEFORE_READ.get();      disconnect(DisconnectReason.CLIENT_DISCONNECT,true,m);    }    return -1;  }}  }
class C{  private File findConfigFileToUse(final File standardConfigFile) throws InitializationException {  File fileToUse;  if (useLastKnownGoodConfig) {    fileToUse=new File(standardConfigFile.getPath() + ".startok");    if (fileToUse.exists()) {      logger.info(NOTE_CONFIG_FILE_USING_STARTOK_FILE,fileToUse.getAbsolutePath(),standardConfigFile);    } else {      logger.warn(WARN_CONFIG_FILE_NO_STARTOK_FILE,fileToUse.getAbsolutePath(),standardConfigFile);      useLastKnownGoodConfig=false;      fileToUse=standardConfigFile;    }  } else {    fileToUse=standardConfigFile;  }  boolean fileExists=false;  try {    fileExists=fileToUse.exists();  } catch (  Exception e) {    logger.traceException(e);    throw new InitializationException(ERR_CONFIG_FILE_CANNOT_VERIFY_EXISTENCE.get(fileToUse.getAbsolutePath(),e));  }  if (!fileExists) {    throw new InitializationException(ERR_CONFIG_FILE_DOES_NOT_EXIST.get(fileToUse.getAbsolutePath()));  }  return fileToUse;}  }
class C{  public void startDrag(Cursor dragCursor,Transferable transferable,DragSourceListener dsl) throws InvalidDnDOperationException {  dragSource.startDrag(this,dragCursor,transferable,dsl);}  }
class C{  public void makeImmutable(){  mutable=false;}  }
class C{  public static ExternalSASLBindRequest unmodifiableExternalSASLBindRequest(final ExternalSASLBindRequest request){  if (request instanceof UnmodifiableExternalSASLBindRequestImpl) {    return request;  }  return new UnmodifiableExternalSASLBindRequestImpl(request);}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  if (null == m_selectPattern && sroot.getOptimizer()) {    XPath newSelect=ElemVariable.rewriteChildToExpression(this);    if (null != newSelect)     m_selectPattern=newSelect;  }  m_qnameID=sroot.getComposeState().getQNameID(m_qname);  super.compose(sroot);  java.util.Vector vnames=sroot.getComposeState().getVariableNames();  if (null != m_selectPattern)   m_selectPattern.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());}  }
class C{  public QualifiedAttributeValueExp(String className,String attr){  super(attr);  this.className=className;}  }
class C{  private void writeJournal(ParcelFileDescriptor newState,BackupProtos.Journal journal){  FileOutputStream outStream=null;  try {    outStream=new FileOutputStream(newState.getFileDescriptor());    final byte[] journalBytes=writeCheckedBytes(journal);    outStream.write(journalBytes);    outStream.close();    if (VERBOSE)     Log.v(TAG,"wrote " + journalBytes.length + " bytes of journal");  } catch (  IOException e) {    Log.w(TAG,"failed to write backup journal",e);  }}  }
class C{  public boolean isPublic(){  return Modifier.isPublic(flags);}  }
class C{  public Collection<Attribute> toLDAPAttributeSet(){  Collection<Attribute> ldapAttrSet=new ArrayList<>();  int size=size();  for (int i=0; i < size; i++) {    Attr attr=(Attr)_attrs.get(i);    if (attr.size() > 0) {      ldapAttrSet.add(attr.toLDAPAttribute());    }  }  return ldapAttrSet;}  }
class C{  public void addNodesInDocOrder(NodeList nodelist,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  int nChildren=nodelist.getLength();  for (int i=0; i < nChildren; i++) {    Node node=nodelist.item(i);    if (null != node) {      addNodeInDocOrder(node,support);    }  }}  }
class C{  public LogoutResponseImpl(String xmlString) throws SAML2Exception {  Document xmlDocument=XMLUtils.toDOMDocument(xmlString,SAML2SDKUtils.debug);  if (xmlDocument == null) {    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("errorObtainingElement"));  }  parseElement(xmlDocument.getDocumentElement());  if (isSigned) {    signedXMLString=xmlString;  }}  }
class C{  public ValidationException(Throwable t){  super(t);}  }
class C{  @Override public int hashCode(){  if (location != null)   return location.hashCode(); else   return 0;}  }
class C{  public static LdapException newLdapException(ResultCode resultCode,Throwable cause){  return newLdapException(resultCode,null,cause);}  }
class C{  public RemoteSessionQuery(String serverId){  this.serverId=serverId;}  }
class C{  public CertificateEncodingException(String message){  super(message);}  }
class C{  public String method(HttpRequestBase method,final int expectedStatusCode){  try {    String result=client.execute(method,responseHandler(expectedStatusCode));    LOG.debug("HTTP " + method.getMethod() + " returned: "+ result);    return result;  } catch (  IOException e) {    fail(e.getMessage());    return null;  }}  }
class C{  private static long mixGamma(long z){  z=(z ^ (z >>> 33)) * 0xff51afd7ed558ccdL;  z=(z ^ (z >>> 33)) * 0xc4ceb9fe1a85ec53L;  z=(z ^ (z >>> 33)) | 1L;  int n=Long.bitCount(z ^ (z >>> 1));  return (n < 24) ? z ^ 0xaaaaaaaaaaaaaaaaL : z;}  }
class C{  public void testMovePointLeftNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=28;  int shift=-18;  int resScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.movePointLeft(shift);  assertTrue("incorrect scale",bNumber.scale() == resScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(a));}  }
class C{  public ServerHeader createServerHeader(List product) throws ParseException {  if (product == null)   throw new NullPointerException("null productList arg");  Server server=new Server();  server.setProduct(product);  return server;}  }
class C{  @ApiOperation(value="read document",notes="This will return the details of the document provided in the route",response=Document.class) @ApiModelRequest(model=Document.class,required=true,modelName="Document") public Document read(Request request,Response response){  String database=request.getHeader(Constants.Url.DATABASE,"No database provided");  String table=request.getHeader(Constants.Url.TABLE,"No table provided");  String id=request.getHeader(Constants.Url.DOCUMENT_ID,"No document ID supplied");  Document document=documentService.read(database,table,new Identifier(database,table,UUID.fromString(id)));  HyperExpress.bind(Constants.Url.DOCUMENT_ID,document.getUuid().toString());  return new LinkableDocument(document);}  }
class C{  protected RemoteObject(){  ref=null;}  }
class C{  public static MouseMotionListener add(MouseMotionListener a,MouseMotionListener b){  return (MouseMotionListener)addInternal(a,b);}  }
class C{  private void addCdataSectionElement(String URI_and_localName,Vector v){  StringTokenizer tokenizer=new StringTokenizer(URI_and_localName,"{}",false);  String s1=tokenizer.nextToken();  String s2=tokenizer.hasMoreTokens() ? tokenizer.nextToken() : null;  if (null == s2) {    v.addElement(null);    v.addElement(s1);  } else {    v.addElement(s1);    v.addElement(s2);  }}  }
class C{  protected ComboPopup createPopup(){  return new BasicComboPopup(comboBox);}  }
class C{  public CardLayout(){  this(0,0);}  }
class C{  public static Foo findByUuid_C_First(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_C_First(uuid,companyId,orderByComparator);}  }
class C{  public void testGetInstance() throws Exception {  try {    ExemptionMechanism.getInstance((String)null,"aaa");    fail("NoSuchProviderException must be thrown");  } catch (  NoSuchProviderException pe) {  }  try {    ExemptionMechanism.getInstance("AlgName",(String)null);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  static Object newInstance(String className,ClassLoader classLoader) throws ConfigurationError {  try {    Class spiClass;    if (classLoader == null) {      spiClass=Class.forName(className);    } else {      spiClass=classLoader.loadClass(className);    }    if (debug) {      debugPrintln("Loaded " + className + " from "+ which(spiClass));    }    return spiClass.newInstance();  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public static String toLatinAlphabetNumberLowerCase(int number){  return AlphabetNumbering.toAlphabetNumber(number,ALPHABET_LOWERCASE);}  }
class C{  public final void testGetMidTermsOfReductionPolynomial01(){  int[] a=new int[]{981,2,1};  int[] b=new ECFieldF2m(2000,BigInteger.valueOf(0L).setBit(0).setBit(1).setBit(2).setBit(981).setBit(2000)).getMidTermsOfReductionPolynomial();  assertTrue(Arrays.equals(a,b));}  }
class C{  @Override public AttributedCharacterIterator formatToCharacterIterator(Object obj){  StringBuffer sb=new StringBuffer();  CharacterIteratorFieldDelegate delegate=new CharacterIteratorFieldDelegate();  if (obj instanceof Date) {    format((Date)obj,sb,delegate);  } else   if (obj instanceof Number) {    format(new Date(((Number)obj).longValue()),sb,delegate);  } else   if (obj == null) {    throw new NullPointerException("formatToCharacterIterator must be passed non-null object");  } else {    throw new IllegalArgumentException("Cannot format given Object as a Date");  }  return delegate.getIterator(sb.toString());}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.IDPSSODescriptorElement createIDPSSODescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.IDPSSODescriptorElementImpl();}  }
class C{  public EventException(Throwable throwable){  cause=throwable;}  }
class C{  public void displayError(LocalizableMessage msg,LocalizableMessage title){  Utilities.displayError(getFrame(),msg,title);}  }
class C{  public MyPropertyProvider(ManagedObjectDefinition<?,?> d,PropertyDefinition<?> namingPropertyDefinition,List<String> args) throws ArgumentException {  for (  String s : args) {    int sep=s.indexOf(':');    if (sep < 0) {      throw ArgumentExceptionFactory.missingSeparatorInPropertyArgument(s);    }    if (sep == 0) {      throw ArgumentExceptionFactory.missingNameInPropertyArgument(s);    }    String propertyName=s.substring(0,sep);    String value=s.substring(sep + 1,s.length());    if (value.length() == 0) {      throw ArgumentExceptionFactory.missingValueInPropertyArgument(s);    }    PropertyDefinition<?> pd;    try {      pd=d.getPropertyDefinition(propertyName);    } catch (    IllegalArgumentException e) {      throw ArgumentExceptionFactory.unknownProperty(d,propertyName);    }    if (pd.equals(namingPropertyDefinition)) {      throw ArgumentExceptionFactory.unableToSetNamingProperty(d,pd);    }    addPropertyValue(d,pd,value);  }}  }
class C{  private static ParsedNamingURL parseURL(String str) throws MalformedURLException {  try {    return intParseURL(str);  } catch (  URISyntaxException ex) {    MalformedURLException mue=new MalformedURLException("invalid URL String: " + str);    mue.initCause(ex);    int indexSchemeEnd=str.indexOf(':');    int indexAuthorityBegin=str.indexOf("//:");    if (indexAuthorityBegin < 0) {      throw mue;    }    if ((indexAuthorityBegin == 0) || ((indexSchemeEnd > 0) && (indexAuthorityBegin == indexSchemeEnd + 1))) {      int indexHostBegin=indexAuthorityBegin + 2;      String newStr=str.substring(0,indexHostBegin) + "localhost" + str.substring(indexHostBegin);      try {        return intParseURL(newStr);      } catch (      URISyntaxException inte) {        throw mue;      }catch (      MalformedURLException inte) {        throw inte;      }    }    throw mue;  }}  }
class C{  synchronized void establishConnection() throws IOException {  if (isConnected) {    throw new IOException("Pipe already connected");  }  if (isClosed) {    throw new IOException("Pipe is closed");  }  if (buffer == null) {    buffer=new char[PIPE_SIZE];  }  isConnected=true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentgetelementsbytagnamevalue.class,args);}  }
class C{  public static int findWordEnd(String line,int pos,String noWordSep,boolean joinNonWordChars){  return findWordEnd(line,pos,noWordSep,joinNonWordChars,false);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  DOMImplementation domImpl;  DocumentType docType;  DocumentType docTypeNull=null;  Element documentElement;  Element element1;  Element element2;  Element element3;  Element element4;  Element element5;  Element element6;  Element element7;  Text text1;  Text text2;  Text text3;  ProcessingInstruction pi;  CDATASection cData;  Comment comment;  EntityReference entRef;  NodeList elementList;  Node appendedChild;  doc=(Document)load("staffNS",true);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument("http://www.w3.org/DOM/Test","dom:root",docTypeNull);  element1=newDoc.createElement("element1");  element2=newDoc.createElement("element2");  element3=newDoc.createElement("element3");  element4=newDoc.createElement("element4");  element5=newDoc.createElement("element5");  element6=newDoc.createElement("element6");  element7=newDoc.createElement("element7");  text1=newDoc.createTextNode("text1");  text2=newDoc.createTextNode("text2");  text3=newDoc.createTextNode("text3");  cData=newDoc.createCDATASection("Cdata");  comment=newDoc.createComment("comment");  pi=newDoc.createProcessingInstruction("PITarget","PIData");  entRef=newDoc.createEntityReference("EntRef");  assertNotNull("createdEntRefNotNull",entRef);  documentElement=newDoc.getDocumentElement();  appendedChild=documentElement.appendChild(element1);  appendedChild=element2.appendChild(text1);  appendedChild=element2.appendChild(text2);  appendedChild=element2.appendChild(text3);  appendedChild=element1.appendChild(element2);  text1=(Text)text1.cloneNode(false);  text2=(Text)text2.cloneNode(false);  appendedChild=element3.appendChild(entRef);  appendedChild=element3.appendChild(text1);  appendedChild=element3.appendChild(text2);  appendedChild=element1.appendChild(element3);  text1=(Text)text1.cloneNode(false);  text2=(Text)text2.cloneNode(false);  appendedChild=element4.appendChild(cData);  appendedChild=element4.appendChild(text1);  appendedChild=element4.appendChild(text2);  appendedChild=element1.appendChild(element4);  text2=(Text)text2.cloneNode(false);  text3=(Text)text3.cloneNode(false);  appendedChild=element5.appendChild(comment);  appendedChild=element5.appendChild(text2);  appendedChild=element5.appendChild(text3);  appendedChild=element1.appendChild(element5);  text2=(Text)text2.cloneNode(false);  text3=(Text)text3.cloneNode(false);  appendedChild=element6.appendChild(pi);  appendedChild=element6.appendChild(text2);  appendedChild=element6.appendChild(text3);  appendedChild=element1.appendChild(element6);  entRef=(EntityReference)entRef.cloneNode(false);  text1=(Text)text1.cloneNode(false);  text2=(Text)text2.cloneNode(false);  text3=(Text)text3.cloneNode(false);  appendedChild=element7.appendChild(entRef);  appendedChild=element7.appendChild(text1);  appendedChild=element7.appendChild(text2);  appendedChild=element7.appendChild(text3);  appendedChild=element1.appendChild(element7);  elementList=element1.getChildNodes();  assertSize("nodeNormalize01_1Bef",6,elementList);  elementList=element2.getChildNodes();  assertSize("nodeNormalize01_2Bef",3,elementList);  elementList=element3.getChildNodes();  assertSize("nodeNormalize01_3Bef",3,elementList);  elementList=element4.getChildNodes();  assertSize("nodeNormalize01_4Bef",3,elementList);  elementList=element5.getChildNodes();  assertSize("nodeNormalize01_5Bef",3,elementList);  elementList=element6.getChildNodes();  assertSize("nodeNormalize01_6Bef",3,elementList);  elementList=element7.getChildNodes();  assertSize("nodeNormalize01_7Bef",4,elementList);  newDoc.normalize();  elementList=element1.getChildNodes();  assertSize("nodeNormalize01_1Aft",6,elementList);  elementList=element2.getChildNodes();  assertSize("nodeNormalize01_2Aft",1,elementList);  elementList=element3.getChildNodes();  assertSize("nodeNormalize01_3Aft",2,elementList);  elementList=element4.getChildNodes();  assertSize("nodeNormalize01_4Aft",2,elementList);  elementList=element5.getChildNodes();  assertSize("nodeNormalize01_5Aft",2,elementList);  elementList=element6.getChildNodes();  assertSize("nodeNormalize01_6Aft",2,elementList);  elementList=element7.getChildNodes();  assertSize("nodeNormalize01_7Aft",2,elementList);}  }
class C{  public static byte[] ipStrToBytes(String ip) throws IOException {  if (!InetAddress.isNumeric(ip)) {    throw new IOException("Not an IP address: " + ip);  }  return InetAddress.getByName(ip).getAddress();}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  boolean beep=true;  if ((target != null) && (target.isEditable())) {    try {      Document doc=target.getDocument();      Caret caret=target.getCaret();      int dot=caret.getDot();      int mark=caret.getMark();      if (dot != mark) {        doc.remove(Math.min(dot,mark),Math.abs(dot - mark));        beep=false;      } else       if (dot > 0) {        int delChars=1;        if (dot > 1) {          String dotChars=doc.getText(dot - 2,2);          char c0=dotChars.charAt(0);          char c1=dotChars.charAt(1);          if (c0 >= '\uD800' && c0 <= '\uDBFF' && c1 >= '\uDC00' && c1 <= '\uDFFF') {            delChars=2;          }        }        doc.remove(dot - delChars,delChars);        beep=false;      }    } catch (    BadLocationException bl) {    }  }  if (beep) {    UIManager.getLookAndFeel().provideErrorFeedback(target);  }}  }
class C{  public void addAttribute(String uri,String localName,String rawName,String type,String value,boolean XSLAttribute) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.addAttribute(uri,localName,rawName,type,value,XSLAttribute);}  }
class C{  public static double sin(double a){  return StrictMath.sin(a);}  }
class C{  public boolean trace_width_is_layer_dependent(){  int compare_value=trace_half_width_arr[0];  for (int index=1; index < trace_half_width_arr.length; ++index) {    if (!blayer_structure.is_signal(index))     continue;    if (trace_half_width_arr[index] != compare_value)     return true;  }  return false;}  }
class C{  public boolean hasFirst(){  return fieldSetFlags()[1];}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  Node textNode;  String localName;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("employeeId");  testEmployee=elementList.item(0);  textNode=testEmployee.getFirstChild();  localName=textNode.getLocalName();  assertNull("textNodeLocalName",localName);}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(port).toString();}  }
class C{  public void begin(){  if (currentPrompt == null) {    abandoned=false;    currentPrompt=firstPrompt;    context.getForWhom().beginConversation(this);  }}  }
class C{  public void startAttribute(String uri,String local){  textBuf.setLength(0);  this.attNamespaceUri=uri;  this.attLocalName=local;}  }
class C{  public EventHeader createEventHeader(String eventType) throws ParseException {  if (eventType == null)   throw new NullPointerException("null eventType");  Event event=new Event();  event.setEventType(eventType);  return event;}  }
class C{  public boolean remove(HDR obj){  if (hlist.size() == 0)   return false; else   return hlist.remove(obj);}  }
class C{  public void test_removeHandshakeCompletedListener() throws IOException {  SSLSocket ssl=getSSLSocket();  HandshakeCompletedListener ls=new HandshakeCL();  try {    ssl.removeHandshakeCompletedListener(null);    fail();  } catch (  IllegalArgumentException expected) {  }  try {    ssl.removeHandshakeCompletedListener(ls);  } catch (  IllegalArgumentException expected) {  }  ssl.addHandshakeCompletedListener(ls);  ssl.removeHandshakeCompletedListener(ls);  ssl.close();}  }
class C{  public static boolean contentEquals(Reader input1,Reader input2) throws IOException {  input1=toBufferedReader(input1);  input2=toBufferedReader(input2);  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  stringBuilder.append("<StatusCode>");  stringBuilder.append(this.getValue());  stringBuilder.append("</StatusCode>");  return stringBuilder.toString();}  }
class C{  protected void shiftYOriginBy(int offset){  yOrigin+=offset;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkEndToEndEncryptionType createMobileNetworkEndToEndEncryptionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkEndToEndEncryptionTypeImpl();}  }
class C{  private int[] determineDimensions(int sourceCodeWords,int errorCorrectionCodeWords) throws WriterException {  float ratio=0.0f;  int[] dimension=null;  for (int cols=minCols; cols <= maxCols; cols++) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,cols);    if (rows < minRows) {      break;    }    if (rows > maxRows) {      continue;    }    float newRatio=((17 * cols + 69) * DEFAULT_MODULE_WIDTH) / (rows * HEIGHT);    if (dimension != null && Math.abs(newRatio - PREFERRED_RATIO) > Math.abs(ratio - PREFERRED_RATIO)) {      continue;    }    ratio=newRatio;    dimension=new int[]{cols,rows};  }  if (dimension == null) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,minCols);    if (rows < minRows) {      dimension=new int[]{minCols,minRows};    }  }  if (dimension == null) {    throw new WriterException("Unable to fit message in columns");  }  return dimension;}  }
class C{  @Hidden static Object invoke__V(MethodHandle mh,Object[] a) throws Throwable {  assert (arityCheck(0,void.class,mh,a));  mh.invokeBasic();  return null;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  StringBuilder sb=new StringBuilder(2000);  String NS="";  String appendNS="";  if (declareNS) {    NS=SAML2Constants.ASSERTION_DECLARE_STR;  }  if (includeNSPrefix) {    appendNS=SAML2Constants.ASSERTION_PREFIX;  }  sb.append("<").append(appendNS).append(SUBJECT_CONFIRMATION_ELEMENT).append(NS);  if ((method == null) || (method.trim().length() == 0)) {    SAML2SDKUtils.debug.error("SubjectConfirmationImpl.toXMLString(): method missing");    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("missing_confirmation_method"));  }  sb.append(" ").append(METHOD_ATTR).append("=\"").append(method).append("\"").append(">\n");  if ((baseId != null) || (nameId != null) || (encryptedId != null)) {    if ((baseId != null) && (nameId == null) && (encryptedId == null)) {      sb.append(baseId.toXMLString(includeNSPrefix,false));    } else     if ((nameId != null) && (baseId == null) && (encryptedId == null)) {      sb.append(nameId.toXMLString(includeNSPrefix,false));    } else     if ((encryptedId != null) && (baseId == null) && (nameId == null)) {      sb.append(encryptedId.toXMLString(includeNSPrefix,false));    } else {      SAML2SDKUtils.debug.error("SubjectConfirmationImpl.toXMLString(): more than one types of id specified");      throw new SAML2Exception(SAML2SDKUtils.bundle.getString("too_many_ids_specified"));    }  }  if (subjectConfirmationData != null) {    sb.append(subjectConfirmationData.toXMLString(includeNSPrefix,false));  }  sb.append("</").append(appendNS).append(SUBJECT_CONFIRMATION_ELEMENT).append(">\n");  return sb.toString();}  }
class C{  public void merge_entries_at_end(BrdTracep p_from_trace,BrdTracep p_to_trace,Polyline p_joined_polyline,int p_from_entry_no,int p_to_entry_no){  for (  AwtreeShapeSearch curr_tree : search_trees) {    curr_tree.merge_entries_at_end(p_from_trace,p_to_trace,p_joined_polyline,p_from_entry_no,p_to_entry_no);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.KeyStorageElement createKeyStorageElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.KeyStorageElementImpl();}  }
class C{  public void testReceive_UnconnectedBufZero() throws Exception {  assertFalse(this.channel1.isConnected());  ByteBuffer dst=ByteBuffer.allocateDirect(CAPACITY_ZERO);  assertNull(this.channel1.receive(dst));}  }
class C{  AbstractCollationMatchingRuleImpl(Locale locale){  this.locale=locale;  this.collator=createCollator(locale);  this.indexName=getPrefixIndexName() + "." + INDEX_ID_SHARED;  this.indexer=new DefaultIndexer(indexName);}  }
class C{  private void determineCrossSize(int flexDirection,int widthMeasureSpec,int heightMeasureSpec,int paddingAlongCrossAxis){  int mode;  int size;switch (flexDirection) {case FLEX_DIRECTION_ROW:case FLEX_DIRECTION_ROW_REVERSE:    mode=MeasureSpec.getMode(heightMeasureSpec);  size=MeasureSpec.getSize(heightMeasureSpec);break;case FLEX_DIRECTION_COLUMN:case FLEX_DIRECTION_COLUMN_REVERSE:mode=MeasureSpec.getMode(widthMeasureSpec);size=MeasureSpec.getSize(widthMeasureSpec);break;default :throw new IllegalArgumentException("Invalid flex direction: " + flexDirection);}if (mode == MeasureSpec.EXACTLY) {int totalCrossSize=getSumOfCrossSize() + paddingAlongCrossAxis;if (mFlexLines.size() == 1) {mFlexLines.get(0).mCrossSize=size - paddingAlongCrossAxis;} else if (mFlexLines.size() >= 2 && totalCrossSize < size) {switch (mAlignContent) {case ALIGN_CONTENT_STRETCH:{float freeSpaceUnit=(size - totalCrossSize) / (float)mFlexLines.size();float accumulatedError=0;for (int i=0, flexLinesSize=mFlexLines.size(); i < flexLinesSize; i++) {FlexLine flexLine=mFlexLines.get(i);float newCrossSizeAsFloat=flexLine.mCrossSize + freeSpaceUnit;if (i == mFlexLines.size() - 1) {newCrossSizeAsFloat+=accumulatedError;accumulatedError=0;}int newCrossSize=Math.round(newCrossSizeAsFloat);accumulatedError+=(newCrossSizeAsFloat - newCrossSize);if (accumulatedError > 1) {newCrossSize+=1;accumulatedError-=1;} else if (accumulatedError < -1) {newCrossSize-=1;accumulatedError+=1;}flexLine.mCrossSize=newCrossSize;}break;}case ALIGN_CONTENT_SPACE_AROUND:{int spaceTopAndBottom=size - totalCrossSize;int numberOfSpaces=mFlexLines.size() * 2;spaceTopAndBottom=spaceTopAndBottom / numberOfSpaces;List<FlexLine> newFlexLines=new ArrayList<>();FlexLine dummySpaceFlexLine=new FlexLine();dummySpaceFlexLine.mCrossSize=spaceTopAndBottom;for (FlexLine flexLine : mFlexLines) {newFlexLines.add(dummySpaceFlexLine);newFlexLines.add(flexLine);newFlexLines.add(dummySpaceFlexLine);}mFlexLines=newFlexLines;break;}case ALIGN_CONTENT_SPACE_BETWEEN:{float spaceBetweenFlexLine=size - totalCrossSize;int numberOfSpaces=mFlexLines.size() - 1;spaceBetweenFlexLine=spaceBetweenFlexLine / (float)numberOfSpaces;float accumulatedError=0;List<FlexLine> newFlexLines=new ArrayList<>();for (int i=0, flexLineSize=mFlexLines.size(); i < flexLineSize; i++) {FlexLine flexLine=mFlexLines.get(i);newFlexLines.add(flexLine);if (i != mFlexLines.size() - 1) {FlexLine dummySpaceFlexLine=new FlexLine();if (i == mFlexLines.size() - 2) {dummySpaceFlexLine.mCrossSize=Math.round(spaceBetweenFlexLine + accumulatedError);accumulatedError=0;} else {dummySpaceFlexLine.mCrossSize=Math.round(spaceBetweenFlexLine);}accumulatedError+=(spaceBetweenFlexLine - dummySpaceFlexLine.mCrossSize);if (accumulatedError > 1) {dummySpaceFlexLine.mCrossSize+=1;accumulatedError-=1;} else if (accumulatedError < -1) {dummySpaceFlexLine.mCrossSize-=1;accumulatedError+=1;}newFlexLines.add(dummySpaceFlexLine);}}mFlexLines=newFlexLines;break;}case ALIGN_CONTENT_CENTER:{int spaceAboveAndBottom=size - totalCrossSize;spaceAboveAndBottom=spaceAboveAndBottom / 2;List<FlexLine> newFlexLines=new ArrayList<>();FlexLine dummySpaceFlexLine=new FlexLine();dummySpaceFlexLine.mCrossSize=spaceAboveAndBottom;for (int i=0, flexLineSize=mFlexLines.size(); i < flexLineSize; i++) {if (i == 0) {newFlexLines.add(dummySpaceFlexLine);}FlexLine flexLine=mFlexLines.get(i);newFlexLines.add(flexLine);if (i == mFlexLines.size() - 1) {newFlexLines.add(dummySpaceFlexLine);}}mFlexLines=newFlexLines;break;}case ALIGN_CONTENT_FLEX_END:{int spaceTop=size - totalCrossSize;FlexLine dummySpaceFlexLine=new FlexLine();dummySpaceFlexLine.mCrossSize=spaceTop;mFlexLines.add(0,dummySpaceFlexLine);break;}}}}}  }
class C{  public boolean isVisible(){  FHTreeStateNode parent=(FHTreeStateNode)getParent();  if (parent == null)   return true;  return (parent.isExpanded() && parent.isVisible());}  }
class C{  public void redo(){  super.redo();  this.object.restoreState(postState);}  }
class C{  public Color stringToColor(String string){  return CSS.stringToColor(string);}  }
class C{  public Line(Point p1,Point p2){  this((float)p1.getX(),(float)p1.getY(),(float)p2.getX(),(float)p2.getY());}  }
class C{  private CSN addEntry(Entry entry) throws Exception {  AddOperation addOp=connection.processAdd(entry);  assertEquals(addOp.getResultCode(),ResultCode.SUCCESS);  assertNotNull(getEntry(entry.getName(),1000,true));  return OperationContext.getCSN(addOp);}  }
class C{  private static void addVarInsn(InsnList instructions,boolean loading,int sort,int index){switch (sort) {case Type.ARRAY:case Type.OBJECT:    instructions.add(new VarInsnNode(loading ? Opcodes.ALOAD : Opcodes.ASTORE,index));  break;case Type.INT:case Type.BOOLEAN:instructions.add(new VarInsnNode(loading ? Opcodes.ILOAD : Opcodes.ISTORE,index));break;case Type.FLOAT:instructions.add(new VarInsnNode(loading ? Opcodes.FLOAD : Opcodes.FSTORE,index));break;case Type.DOUBLE:instructions.add(new VarInsnNode(loading ? Opcodes.DLOAD : Opcodes.DSTORE,index));break;case Type.LONG:instructions.add(new VarInsnNode(loading ? Opcodes.LLOAD : Opcodes.LSTORE,index));break;}}  }
class C{  public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  Log.d(TAG,"begin FMRadioEMActivity.onCreate");  setVolumeControlStream(AudioManager.STREAM_MUSIC);  setContentView(R.layout.fm_rx_em);  mContext=getApplicationContext();  FmRadioStation.initFmDatabase(mContext);  mTextStereoMono=(TextView)findViewById(R.id.FMR_Status_Stereomono);  mTextRssi=(TextView)findViewById(R.id.FMR_Status_RSSI);  mTextCapArray=(TextView)findViewById(R.id.FMR_Status_Caparray);  mTextRdsBler=(TextView)findViewById(R.id.FMR_RDS_Ratio);  mTextRdsPS=(TextView)findViewById(R.id.FMR_RDS_PS);  mTextRdsRT=(TextView)findViewById(R.id.FMR_RDS_RT);  mTextChipID=(TextView)findViewById(R.id.FMR_Chip_ID);  mTextECOVersion=(TextView)findViewById(R.id.FMR_ECO_Version);  mTextPatchVersion=(TextView)findViewById(R.id.FMR_Patch_Version);  mTextDSPVersion=(TextView)findViewById(R.id.FMR_DSP_Version);  mTextCMDReturn0=(TextView)findViewById(R.id.FMR_EM_CMD_RETURN0);  mTextCMDReturn1=(TextView)findViewById(R.id.FMR_EM_CMD_RETURN1);  mTextCMDReturn2=(TextView)findViewById(R.id.FMR_EM_CMD_RETURN2);  mTextCMDReturn3=(TextView)findViewById(R.id.FMR_EM_CMD_RETURN3);  mTextCMDReturn4=(TextView)findViewById(R.id.FMR_EM_CMD_RETURN4);  mEditFreq=(EditText)findViewById(R.id.FMR_Freq_edit);  mEditRssiThreshold=(EditText)findViewById(R.id.FMR_EM_RSSI_THRESHOLD_edit);  mEditMuteGain=(EditText)findViewById(R.id.FMR_EM_MUTE_GAIN_edit);  mEditDesenseRssi=(EditText)findViewById(R.id.FMR_EM_DESENSE_RSSI_edit);  mEditCMD0=(EditText)findViewById(R.id.FMR_EM_CMD_edit0);  mEditCMD1=(EditText)findViewById(R.id.FMR_EM_CMD_edit1);  mEditCMD2=(EditText)findViewById(R.id.FMR_EM_CMD_edit2);  mEditCMD3=(EditText)findViewById(R.id.FMR_EM_CMD_edit3);  mEditCMD4=(EditText)findViewById(R.id.FMR_EM_CMD_edit4);  mEditCMD5=(EditText)findViewById(R.id.FMR_EM_CMD_edit5);  mEditCMD6=(EditText)findViewById(R.id.FMR_EM_CMD_edit6);  mEditCMD7=(EditText)findViewById(R.id.FMR_EM_CMD_edit7);  mEditCMD8=(EditText)findViewById(R.id.FMR_EM_CMD_edit8);  mEditCMD9=(EditText)findViewById(R.id.FMR_EM_CMD_edit9);  mEditCMD10=(EditText)findViewById(R.id.FMR_EM_CMD_edit10);  mEditCMD11=(EditText)findViewById(R.id.FMR_EM_CMD_edit11);  mEditCMD12=(EditText)findViewById(R.id.FMR_EM_CMD_edit12);  mEditCMD13=(EditText)findViewById(R.id.FMR_EM_CMD_edit13);  mEditCMD14=(EditText)findViewById(R.id.FMR_EM_CMD_edit14);  mEditCMD15=(EditText)findViewById(R.id.FMR_EM_CMD_edit15);  mEditCMD16=(EditText)findViewById(R.id.FMR_EM_CMD_edit16);  mEditCMD17=(EditText)findViewById(R.id.FMR_EM_CMD_edit17);  mEditCMD18=(EditText)findViewById(R.id.FMR_EM_CMD_edit18);  mEditCMD19=(EditText)findViewById(R.id.FMR_EM_CMD_edit19);  mButtonRssiThreshold=(Button)findViewById(R.id.FMR_EM_RSSI_THRESHOLD_OK);  mButtonMuteGain=(Button)findViewById(R.id.FMR_EM_MUTE_GAIN_OK);  mButtonDesenseRssi=(Button)findViewById(R.id.FMR_EM_DESENSE_RSSI_OK);  mButtonCMD=(Button)findViewById(R.id.FMR_EM_CMD_OK);  mButtonTune=(Button)findViewById(R.id.FMR_Freq_tune);  mRdAntennaS=(RadioButton)findViewById(R.id.FMR_Antenna_short);  mRdAntennaL=(RadioButton)findViewById(R.id.FMR_Antenna_long);  mRgAntenna=(RadioGroup)findViewById(R.id.FMR_Antenna_type);  mRdStereo=(RadioButton)findViewById(R.id.FMR_Stereomono_stereo);  mRdMono=(RadioButton)findViewById(R.id.FMR_Stereomono_mono);  mRdAntennaS.setOnClickListener(mButtonClickListener);  mRdAntennaL.setOnClickListener(mButtonClickListener);  mRdStereo.setOnClickListener(mButtonClickListener);  mRdMono.setOnClickListener(mButtonClickListener);  mButtonTune.setOnClickListener(mButtonClickListener);  mButtonRssiThreshold.setOnClickListener(mButtonClickListener);  mButtonMuteGain.setOnClickListener(mButtonClickListener);  mButtonDesenseRssi.setOnClickListener(mButtonClickListener);  mButtonCMD.setOnClickListener(mButtonClickListener);  IntentFilter filterHeadset=new IntentFilter();  filterHeadset.addAction(Intent.ACTION_HEADSET_PLUG);  mHeadsetConnectionReceiver=new HeadsetConnectionReceiver();  Log.d(TAG,"Register HeadsetConnectionReceiver");  registerReceiver(mHeadsetConnectionReceiver,filterHeadset);  mCurrentStation=FmRadioStation.getCurrentStation(mContext);  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);  refreshTextStatus(mIsPlaying);  Log.d(TAG,"end FMRadioEMActivity.onCreate");}  }
class C{  public boolean isIDPRole(){  return isRoleIDP;}  }
class C{  public ServerConfigXMLAddServerViewBean(){  super("ServerConfigXMLAddServer");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  createPropertyModel();  registerChildren();}  }
class C{  void writeExternal(DataOutput out) throws IOException {  final int timeSecs=(timeEndOfDay ? 86400 : time.toSecondOfDay());  final int stdOffset=standardOffset.getTotalSeconds();  final int beforeDiff=offsetBefore.getTotalSeconds() - stdOffset;  final int afterDiff=offsetAfter.getTotalSeconds() - stdOffset;  final int timeByte=(timeSecs % 3600 == 0 ? (timeEndOfDay ? 24 : time.getHour()) : 31);  final int stdOffsetByte=(stdOffset % 900 == 0 ? stdOffset / 900 + 128 : 255);  final int beforeByte=(beforeDiff == 0 || beforeDiff == 1800 || beforeDiff == 3600 ? beforeDiff / 1800 : 3);  final int afterByte=(afterDiff == 0 || afterDiff == 1800 || afterDiff == 3600 ? afterDiff / 1800 : 3);  final int dowByte=(dow == null ? 0 : dow.getValue());  int b=(month.getValue() << 28) + ((dom + 32) << 22) + (dowByte << 19)+ (timeByte << 14)+ (timeDefinition.ordinal() << 12)+ (stdOffsetByte << 4)+ (beforeByte << 2)+ afterByte;  out.writeInt(b);  if (timeByte == 31) {    out.writeInt(timeSecs);  }  if (stdOffsetByte == 255) {    out.writeInt(stdOffset);  }  if (beforeByte == 3) {    out.writeInt(offsetBefore.getTotalSeconds());  }  if (afterByte == 3) {    out.writeInt(offsetAfter.getTotalSeconds());  }}  }
class C{  private void registerAuth(LDAPURL ldapUrl,DN dn,String pw,boolean connect) throws LdapException {  String key=makeKeyFromLDAPUrl(ldapUrl);  final AuthRecord ar=new AuthRecord();  ar.dn=dn;  ar.password=pw;  if (connect) {    createLDAPConnection(ldapUrl,ar).close();  }synchronized (this) {    authTable.put(key,ar);    ConnectionRecord cr=connectionTable.get(key);    if (cr != null) {      if (cr.counter <= 0) {        disconnectAndRemove(cr);      } else {        cr.disconnectAfterUse=true;      }    }  }  notifyListeners();}  }
class C{  public void rotate(){  if (rotatable) {    long systime=System.currentTimeMillis();    if ((systime - rotationLastChecked) > 1000) {synchronized (this) {        if ((systime - rotationLastChecked) > 1000) {          rotationLastChecked=systime;          String tsDate;          tsDate=fileDateFormatter.format(new Date(systime));          if (!dateStamp.equals(tsDate)) {            close(true);            dateStamp=tsDate;            open();          }        }      }    }  }}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String appTypeName=getStringOptionValue(PARAM_APPL_TYPE_NAME);  String[] params={appTypeName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SHOW_APPLICATION_TYPE",params);  ApplicationType applType=ApplicationTypeManager.getAppplicationType(getAdminSubject(),appTypeName);  IOutput writer=getOutputWriter();  if (applType == null) {    Object[] param={appTypeName};    writer.printlnMessage(MessageFormat.format(getResourceString("show-application-type-not-found"),param));  } else {    displayAttrs(writer,applType);  }  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_SHOW_APPLICATION_TYPE",params);}  }
class C{  public void from_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("from_any",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.from_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return isHeadless() ? new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB) : getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  public ActivationDesc(ActivationGroupID groupID,String className,String location,MarshalledObject<?> data,boolean restart){  if (groupID == null)   throw new IllegalArgumentException("groupID can't be null");  this.groupID=groupID;  this.className=className;  this.location=location;  this.data=data;  this.restart=restart;}  }
class C{  public static String convertID3v23GenreToGeneric(String value){  if (value.contains(")") && value.lastIndexOf(')') < value.length() - 1) {    return checkBracketed(value.substring(0,value.lastIndexOf(')'))) + ' ' + value.substring(value.lastIndexOf(')') + 1);  } else {    return checkBracketed(value);  }}  }
class C{  @RequestMapping(value="/foos/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteFoo(@PathVariable Long id){  log.debug("REST request to delete Foo : {}",id);  fooRepository.delete(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("foo",id.toString())).build();}  }
class C{  public static boolean wildcardMatch(String filename,String wildcardMatcher,IOCase caseSensitivity){  if (filename == null && wildcardMatcher == null) {    return true;  }  if (filename == null || wildcardMatcher == null) {    return false;  }  if (caseSensitivity == null) {    caseSensitivity=IOCase.SENSITIVE;  }  String[] wcs=splitOnTokens(wildcardMatcher);  boolean anyChars=false;  int textIdx=0;  int wcsIdx=0;  Stack<int[]> backtrack=new Stack<int[]>();  do {    if (backtrack.size() > 0) {      int[] array=backtrack.pop();      wcsIdx=array[0];      textIdx=array[1];      anyChars=true;    }    while (wcsIdx < wcs.length) {      if (wcs[wcsIdx].equals("?")) {        textIdx++;        if (textIdx > filename.length()) {          break;        }        anyChars=false;      } else       if (wcs[wcsIdx].equals("*")) {        anyChars=true;        if (wcsIdx == wcs.length - 1) {          textIdx=filename.length();        }      } else {        if (anyChars) {          textIdx=caseSensitivity.checkIndexOf(filename,textIdx,wcs[wcsIdx]);          if (textIdx == -1) {            break;          }          int repeat=caseSensitivity.checkIndexOf(filename,textIdx + 1,wcs[wcsIdx]);          if (repeat >= 0) {            backtrack.push(new int[]{wcsIdx,repeat});          }        } else {          if (!caseSensitivity.checkRegionMatches(filename,textIdx,wcs[wcsIdx])) {            break;          }        }        textIdx+=wcs[wcsIdx].length();        anyChars=false;      }      wcsIdx++;    }    if (wcsIdx == wcs.length && textIdx == filename.length()) {      return true;    }  } while (backtrack.size() > 0);  return false;}  }
class C{  public void addMonitorProvider(MonitorProvider<? extends MonitorProviderCfg> component){synchronized (monitorProviders) {    if (!monitorProviders.contains(component)) {      monitorProviders.add(component);    }  }}  }
class C{  @org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) @Override public boolean sendSearchReference(SearchOperation searchOperation,SearchResultReference searchReference) throws DirectoryException {  ((InternalSearchOperation)searchOperation).addSearchReference(searchReference);  return true;}  }
class C{  synchronized void removeExtendedStyleAt(int index){  removeAttributeSetAt(extendedIndex + index);}  }
class C{  static XMLReader createParser(){  try {    SAXParserFactory factory=SAXParserFactory.newInstance();    factory.setNamespaceAware(true);    factory.setValidating(false);    factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd",false);    return factory.newSAXParser().getXMLReader();  } catch (  Exception e) {    throw new RuntimeException("Couldn't create XMLReader: " + e.getMessage());  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (Node<E> p=first(); p != null; p=succ(p)) {    Object item=p.item;    if (item != null)     s.writeObject(item);  }  s.writeObject(null);}  }
class C{  public static RDN valueOf(final String rdn){  return valueOf(rdn,Schema.getDefaultSchema());}  }
class C{  public <M extends Configuration>void deregisterDeleteListener(SetRelationDefinition<?,M> d,ConfigurationDeleteListener<M> listener){  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d);  deregisterDeleteListener(baseDN,listener);}  }
class C{  private void initialize(URI p_base,String p_uriSpec) throws MalformedURIException {  if (p_base == null && (p_uriSpec == null || p_uriSpec.trim().length() == 0)) {    throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_CANNOT_INIT_URI_EMPTY_PARMS,null));  }  if (p_uriSpec == null || p_uriSpec.trim().length() == 0) {    initialize(p_base);    return;  }  String uriSpec=p_uriSpec.trim();  int uriSpecLen=uriSpec.length();  int index=0;  int colonIndex=uriSpec.indexOf(':');  if (colonIndex < 0) {    if (p_base == null) {      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_SCHEME_IN_URI,new Object[]{uriSpec}));    }  } else {    initializeScheme(uriSpec);    uriSpec=uriSpec.substring(colonIndex + 1);    uriSpecLen=uriSpec.length();  }  if (uriSpec.startsWith("//")) {    index+=2;    int startPos=index;    char testChar='\0';    while (index < uriSpecLen) {      testChar=uriSpec.charAt(index);      if (testChar == '/' || testChar == '?' || testChar == '#') {        break;      }      index++;    }    if (index > startPos) {      initializeAuthority(uriSpec.substring(startPos,index));    } else {      m_host="";    }  }  initializePath(uriSpec.substring(index));  if (p_base != null) {    if (m_path.length() == 0 && m_scheme == null && m_host == null) {      m_scheme=p_base.getScheme();      m_userinfo=p_base.getUserinfo();      m_host=p_base.getHost();      m_port=p_base.getPort();      m_path=p_base.getPath();      if (m_queryString == null) {        m_queryString=p_base.getQueryString();      }      return;    }    if (m_scheme == null) {      m_scheme=p_base.getScheme();    }    if (m_host == null) {      m_userinfo=p_base.getUserinfo();      m_host=p_base.getHost();      m_port=p_base.getPort();    } else {      return;    }    if (m_path.length() > 0 && m_path.startsWith("/")) {      return;    }    String path=new String();    String basePath=p_base.getPath();    if (basePath != null) {      int lastSlash=basePath.lastIndexOf('/');      if (lastSlash != -1) {        path=basePath.substring(0,lastSlash + 1);      }    }    path=path.concat(m_path);    index=-1;    while ((index=path.indexOf("/./")) != -1) {      path=path.substring(0,index + 1).concat(path.substring(index + 3));    }    if (path.endsWith("/.")) {      path=path.substring(0,path.length() - 1);    }    index=-1;    int segIndex=-1;    String tempString=null;    while ((index=path.indexOf("/../")) > 0) {      tempString=path.substring(0,path.indexOf("/../"));      segIndex=tempString.lastIndexOf('/');      if (segIndex != -1) {        if (!tempString.substring(segIndex++).equals("..")) {          path=path.substring(0,segIndex).concat(path.substring(index + 4));        }      }    }    if (path.endsWith("/..")) {      tempString=path.substring(0,path.length() - 3);      segIndex=tempString.lastIndexOf('/');      if (segIndex != -1) {        path=path.substring(0,segIndex + 1);      }    }    m_path=path;  }}  }
class C{  public static String format(long t){  StringBuilder sb=new StringBuilder(19);  GregorianCalendar calendar=new GregorianCalendar(TIME_ZONE_UTC_OBJ);  calendar.setLenient(false);  calendar.setTimeInMillis(t);  int n=calendar.get(Calendar.YEAR);  if (n < 0) {    throw new IllegalArgumentException("Year cannot be < 0:" + n);  } else   if (n < 10) {    sb.append("000");  } else   if (n < 100) {    sb.append("00");  } else   if (n < 1000) {    sb.append("0");  }  sb.append(n);  n=calendar.get(Calendar.MONTH) + 1;  if (n < 10) {    sb.append("0");  }  sb.append(n);  n=calendar.get(Calendar.DAY_OF_MONTH);  if (n < 10) {    sb.append("0");  }  sb.append(n);  n=calendar.get(Calendar.HOUR_OF_DAY);  if (n < 10) {    sb.append("0");  }  sb.append(n);  n=calendar.get(Calendar.MINUTE);  if (n < 10) {    sb.append("0");  }  sb.append(n);  n=calendar.get(Calendar.SECOND);  if (n < 10) {    sb.append("0");  }  sb.append(n);  sb.append('.');  n=calendar.get(Calendar.MILLISECOND);  if (n < 10) {    sb.append("00");  } else   if (n < 100) {    sb.append("0");  }  sb.append(n);  sb.append('Z');  return sb.toString();}  }
class C{  Node<E> first(){  restartFromHead:   for (; ; ) {    for (Node<E> h=head, p=h, q; ; ) {      boolean hasItem=(p.item != null);      if (hasItem || (q=p.next) == null) {        updateHead(h,p);        return hasItem ? p : null;      } else       if (p == q)       continue restartFromHead; else       p=q;    }  }}  }
class C{  void lock(){  exclusiveLock.lock();}  }
class C{  public void rescanCurrentDirectory(){  getUI().rescanCurrentDirectory(this);}  }
class C{  public CrlClientOnline(Certificate[] chain){  for (int i=0; i < chain.length; i++) {    X509Certificate cert=(X509Certificate)chain[i];    LOGGER.info("Checking certificate: " + cert.getSubjectDN());    try {      addUrl(CertificateUtil.getCRLURL(cert));    } catch (    CertificateParsingException e) {      LOGGER.info("Skipped CRL url (certificate could not be parsed)");    }  }}  }
class C{  public static QName convertStringToQName(String str,Element element){  if (str == null) {    return null;  }  String prefix="";  String localPart;  int index=str.indexOf(":");  if (index == -1) {    localPart=str;  } else {    prefix=str.substring(0,index);    localPart=str.substring(index + 1);  }  String ns=getNamespaceForPrefix(prefix,element);  return new QName(ns,localPart);}  }
class C{  @AfterClass public static void afterClass(){  f.clearTestTables();}  }
class C{  private void whenCommitReturnTrue(LoginModule... modules) throws LoginException {  for (  LoginModule module : modules) {    when(module.commit()).thenReturn(true);  }}  }
class C{  public String findClassNameWithImport(String name,List<Import> imports){  if (typeExists(name))   return name;  for (  Import i : imports) {    if (!i.importAll) {      if (i.access.name.equals(name)) {        return getClassNameFromAccess(i.access);      }    }  }  for (  Import i : imports) {    if (i.importAll && i.pkg != null) {      String possibleClassName=i.pkg.pkg.replace("::",".") + "." + name;      if (typeExists(possibleClassName))       return possibleClassName;    }  }  return null;}  }
class C{  public ClosedChannelException(){}  }
class C{  public BuilderImage<T> useInternalStorage(){  this.config.setUseInternalStorage();  return this;}  }
class C{  public void init() throws Exception {  clearConfiguration();  this.loading=true;  File file=new File(getFullConfigPath());  this.lastCfgModificationDate=file.lastModified();  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  DocumentBuilder db=dbf.newDocumentBuilder();  Document doc=db.parse(file);  doc.normalize();  Node node=doc.getFirstChild();  if (node != null) {    NodeList nodeList=node.getChildNodes();    for (int i=0; i < nodeList.getLength(); i++) {      Node childNode=nodeList.item(i);      if ("enabled".equals(childNode.getNodeName())) {        this.enabled=Boolean.valueOf(childNode.getNodeName().trim());      }      if ("baseDir".equals(childNode.getNodeName())) {        this.baseDir=childNode.getNodeName().trim();        this.baseDir=PathUtils.escape(this.baseDir);        this.baseDir=PathUtils.addSlashToEnd(this.baseDir);      }      if ("baseURL".equals(childNode.getNodeName())) {        this.baseURL=childNode.getNodeName().trim();        this.baseURL=PathUtils.escape(baseURL);        this.baseURL=PathUtils.addSlashToEnd(this.baseURL);      }      if ("licenseName".equals(childNode.getNodeName())) {        this.licenseName=childNode.getNodeName().trim();      }      if ("licenseKey".equals(childNode.getNodeName())) {        this.licenseKey=childNode.getNodeName().trim();      }      if ("imgWidth".equals(childNode.getNodeName())) {        String width=childNode.getNodeName().trim();        width=width.replaceAll("//D","");        try {          this.imgWidth=Integer.valueOf(width);        } catch (        NumberFormatException e) {          this.imgWidth=null;        }      }      if ("imgQuality".equals(childNode.getNodeName())) {        String quality=childNode.getNodeName().trim();        quality=quality.replaceAll("//D","");        this.imgQuality=adjustQuality(quality);      }      if ("imgHeight".equals(childNode.getNodeName())) {        String height=childNode.getNodeName().trim();        height=height.replaceAll("//D","");        try {          this.imgHeight=Integer.valueOf(height);        } catch (        NumberFormatException e) {          this.imgHeight=null;        }      }      if ("thumbs".equals(childNode.getNodeName())) {        setThumbs(childNode.getChildNodes());      }      if ("accessControls".equals(childNode.getNodeName())) {        setACLs(childNode.getChildNodes());      }      if ("hideFolders".equals(childNode.getNodeName())) {        setHiddenFolders(childNode.getChildNodes());      }      if ("hideFiles".equals(childNode.getNodeName())) {        setHiddenFiles(childNode.getChildNodes());      }      if ("checkDoubleExtension".equals(childNode.getNodeName())) {        this.doubleExtensions=Boolean.valueOf(childNode.getNodeName().trim());      }      if ("disallowUnsafeCharacters".equals(childNode.getNodeName())) {        this.disallowUnsafeCharacters=Boolean.valueOf(childNode.getNodeName().trim());      }      if ("forceASCII".equals(childNode.getNodeName())) {        this.forceASCII=Boolean.valueOf(childNode.getNodeName().trim());      }      if ("checkSizeAfterScaling".equals(childNode.getNodeName())) {        this.checkSizeAfterScaling=Boolean.valueOf(childNode.getNodeName().trim());      }      if ("htmlExtensions".equals(childNode.getNodeName())) {        String htmlExt=childNode.getNodeName();        Scanner scanner=new Scanner(htmlExt).useDelimiter(",");        while (scanner.hasNext()) {          String val=scanner.next();          if (val != null && !"".equals(val)) {            htmlExtensions.add(val.trim().toLowerCase());          }        }      }      if ("secureImageUploads".equals(childNode.getNodeName())) {        this.secureImageUploads=Boolean.valueOf(childNode.getNodeName().trim());      }      if ("uriEncoding".equals(childNode.getNodeName())) {        this.uriEncoding=childNode.getNodeName().trim();      }      if ("userRoleSessionVar".equals(childNode.getNodeName())) {        this.userRoleSessionVar=childNode.getNodeName().trim();      }      if ("defaultResourceTypes".equals(childNode.getNodeName())) {        String value=childNode.getNodeName().trim();        Scanner sc=new Scanner(value).useDelimiter(",");        while (sc.hasNext()) {          this.defaultResourceTypes.add(sc.next());        }      }      if ("plugins".equals(childNode.getNodeName())) {        setPlugins(childNode);      }      if ("basePathBuilderImpl".equals(childNode.getNodeName())) {        setBasePathImpl(childNode.getNodeName().trim());      }    }  }  setTypes(doc);  this.events=new Events();  registerEventHandlers();  this.loading=false;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.EncryptionMethodType.KeySize createEncryptionMethodTypeKeySize(java.math.BigInteger value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.EncryptionMethodTypeImpl.KeySizeImpl(value);}  }
class C{  public void add(Permission permission){  if (!(permission instanceof FilePermission))   throw new IllegalArgumentException("invalid permission: " + permission);  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly PermissionCollection");synchronized (this) {    perms.add(permission);  }}  }
class C{  public void seekToPosition(final long filePosition) throws ChangelogException {  try {    reader.seek(filePosition);  } catch (  IOException e) {    throw new ChangelogException(ERR_CHANGELOG_UNABLE_TO_SEEK.get(filePosition,file.getPath()),e);  }}  }
class C{  static public void assertNotNull(Object object){  assertNotNull(null,object);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RecipientSignatureTokenElement createRecipientSignatureTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RecipientSignatureTokenElementImpl();}  }
class C{  @Override public int hashCode(){  return PlainSocketFactory.class.hashCode();}  }
class C{  public static void main(String[] args){  int retCode=mainModify(args,true,System.out,System.err);  if (retCode != 0) {    System.exit(filterExitCode(retCode));  }}  }
class C{  public TabSeparatedTablePrinter(Writer writer){  this.writer=new PrintWriter(writer);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    serverTransaction=sipProvider.getNewServerTransaction(request);    dialog=(DialogExt)sipProvider.getNewDialog(serverTransaction);    dialog.disableSequenceNumberValidation();  } catch (  Exception e) {    e.printStackTrace();  }  for (int q=0; q < 1000; q++) {    try {      Response okResponse=messageFactory.createResponse(180,request);      FromHeader from=(FromHeader)okResponse.getHeader(FromHeader.NAME);      from.removeParameter("tag");      Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");      ContactHeader contactHeader=headerFactory.createContactHeader(address);      ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);      toHeader.setTag("4321");      FromHeader fromHeader=(FromHeader)okResponse.getHeader(FromHeader.NAME);      fromHeader.setTag("12345");      okResponse.addHeader(contactHeader);      serverTransaction.sendResponse(okResponse);    } catch (    Exception ex) {      ex.printStackTrace();    }    if (q % 100 == 0)     System.out.println("Send " + q);  }  try {    Response okResponse=messageFactory.createResponse(200,request);    FromHeader from=(FromHeader)okResponse.getHeader(FromHeader.NAME);    from.removeParameter("tag");    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    FromHeader fromHeader=(FromHeader)okResponse.getHeader(FromHeader.NAME);    fromHeader.setTag("12345");    okResponse.addHeader(contactHeader);    serverTransaction.sendResponse(okResponse);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public Scanner skip(Pattern pattern){  ensureOpen();  if (pattern == null)   throw new NullPointerException();  clearCaches();  while (true) {    String token=matchPatternInBuffer(pattern);    if (token != null) {      matchValid=true;      position=matcher.end();      return this;    }    if (needInput)     readInput(); else     throw new NoSuchElementException();  }}  }
class C{  public static byte[] copyOfRange(byte[] src,int startIndex,int endIndex){  int length=endIndex - startIndex;  if (length < 0) {    throw new IllegalArgumentException("startIndex (" + startIndex + ")"+ " > endIndex ("+ endIndex+ ")");  }  byte[] dest=new byte[length];  System.arraycopy(src,startIndex,dest,0,length);  return dest;}  }
class C{  public boolean add_via_padstack(LibPadstack p_padstack){  if (p_padstack == null)   return false;  if (get_via_padstack(p_padstack.pads_name) != null)   return false;  via_padstacks.add(p_padstack);  return true;}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public String formatLoginURL(String loginUrl,String authnContext){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSSSOLECPProfileHandler.formatLoginURL: Called" + "\nloginUrl=" + loginUrl + "\nauthnContext="+ authnContext);  }  try {    if (loginUrl == null) {      FSUtils.debug.error("FSSSOLECPProfileHandler.formatLoginURL: ");      return null;    }    String ssoUrl=hostedDesc.getSingleSignOnServiceURL();    StringBuffer returnUrl=new StringBuffer(ssoUrl);    if (ssoUrl.indexOf('?') == -1) {      returnUrl.append("?");    } else {      returnUrl.append("&");    }    returnUrl.append(IFSConstants.LECP_INDICATOR_PARAM).append("=").append(IFSConstants.LECP_INDICATOR_VALUE).append("&").append(IFSConstants.AUTHN_INDICATOR_PARAM).append("=").append(IFSConstants.AUTHN_INDICATOR_VALUE).append("&");    if (!authnContext.equals(IFSConstants.DEFAULT_AUTHNCONTEXT_PASSWORD)) {      returnUrl.append(IFSConstants.AUTHN_CONTEXT).append("=").append(URLEncDec.encode(authnContext)).append("&");    }    returnUrl.append(IFSConstants.PROVIDER_ID_KEY).append("=").append(URLEncDec.encode(hostedEntityId)).append("&").append(IFSConstants.REALM).append("=").append(URLEncDec.encode(realm)).append("&").append(IFSConstants.META_ALIAS).append("=").append(URLEncDec.encode(metaAlias)).append("&").append(IFSConstants.AUTH_REQUEST_ID).append("=").append(URLEncDec.encode(authnRequest.getRequestID()));    StringBuffer gotoUrl=new StringBuffer(IFSConstants.POST_LOGIN_PAGE);    gotoUrl.append("/").append(IFSConstants.META_ALIAS).append(metaAlias).append("/");    FSSessionManager sessMgr=FSSessionManager.getInstance(metaAlias);    String id=authnRequest.getRequestID();    sessMgr.setRelayState(id,returnUrl.toString());    gotoUrl.append(IFSConstants.LRURL).append("/").append(URLEncDec.encode(id)).append("/").append(IFSConstants.SSOKEY).append("/").append(IFSConstants.SSOVALUE);    StringBuffer redirectUrl=new StringBuffer(100);    redirectUrl.append(loginUrl);    if (loginUrl.indexOf('?') == -1) {      redirectUrl.append("?");    } else {      redirectUrl.append("&");    }    redirectUrl.append(IFSConstants.GOTO_URL_PARAM).append("=");    redirectUrl.append(URLEncDec.encode(gotoUrl.toString())).append("&");    String authUrl=FSUtils.getAuthDomainURL(realm);    if (authUrl != null && authUrl.length() != 0) {      redirectUrl.append(IFSConstants.ORGKEY).append("=").append(URLEncDec.encode(authUrl)).append("&");    }    int len=redirectUrl.length() - 1;    if (redirectUrl.charAt(len) == '&') {      redirectUrl=redirectUrl.deleteCharAt(len);    }    return redirectUrl.toString();  } catch (  Exception e) {    FSUtils.debug.error("FSSSOLECPProfileHandler.formatLoginURL: Exception: ",e);    return null;  }}  }
class C{  public static boolean matchApprox(String name){  return (osName.regionMatches(true,0,name,0,name.length()));}  }
class C{  public void register(VirtualAttributeRule rule){  rules.put(getDummyDN(rule),rule);}  }
class C{  public static void closeQuietly(LineIterator iterator){  if (iterator != null) {    iterator.close();  }}  }
class C{  private boolean isValidHolderAndChild(ViewHolder holder,View child,List<AlphabeticalAppsList.AdapterItem> items){  GridLayoutManager.LayoutParams lp=(GridLayoutManager.LayoutParams)child.getLayoutParams();  if (lp.isItemRemoved()) {    return false;  }  if (holder == null) {    return false;  }  int pos=holder.getPosition();  if (pos < 0 || pos >= items.size()) {    return false;  }  return true;}  }
class C{  protected static void updateRawImageParameters(RawImageData image,int width,int height,int components,int bpc,byte[] data){  image.setHeight(height);  image.setWidth(width);  if (components != 1 && components != 3 && components != 4)   throw new IOException(IOException.ComponentsMustBe1_3Or4);  if (bpc != 1 && bpc != 2 && bpc != 4 && bpc != 8)   throw new IOException(IOException.BitsPerComponentMustBe1_2_4or8);  image.setColorSpace(components);  image.setBpc(bpc);  image.data=data;}  }
class C{  public String toString(){  return toIndentedString(0);}  }
class C{  private static StatelessSession extractStatelessSession(SSOToken token) throws SSOException {  if (token instanceof StatelessSSOToken) {    return ((StatelessSSOToken)token).getSession();  } else {    throw new SSOException("Not a stateless SSOToken");  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  doc=(Document)load("hc_staff",false);  domImpl=doc.getImplementation();  if (("text/html".equals(getContentType()))) {    state=domImpl.hasFeature("HTML","");  } else {    state=domImpl.hasFeature("XML","");  }  assertTrue("hasFeatureBlank",state);}  }
class C{  protected void forwardUpdateToView(View v,DocumentEvent e,Shape a,ViewFactory f){  v.setParent(this);  super.forwardUpdateToView(v,e,a,f);}  }
class C{  public CTSDJLDAPv3PersistentSearchBuilder withSearchScope(SearchScope searchScope){  Reject.ifNull(searchScope);  this.searchScope=searchScope;  return this;}  }
class C{  String[] args(){  return modifyArgs;}  }
class C{  public IllegalPluginAccessException(){}  }
class C{  private static void fixOverrideNames(MappedMember mm,MappedMember override){  for (  MappedMember mm2 : mm.getOverrides()) {    fixOverrideNames(mm2,override);  }  mm.setNewName(override.getNewName());}  }
class C{  public boolean hasString(){  return true;}  }
class C{  public static String newStringUtf8(final byte[] bytes){  return newString(bytes,StandardCharsets.UTF_8);}  }
class C{  public ColorConvertOp(ColorSpace srcCspace,ColorSpace dstCspace,RenderingHints hints){  if ((srcCspace == null) || (dstCspace == null)) {    throw new NullPointerException("ColorSpaces cannot be null");  }  if ((srcCspace instanceof ICC_ColorSpace) && (dstCspace instanceof ICC_ColorSpace)) {    profileList=new ICC_Profile[2];    profileList[0]=((ICC_ColorSpace)srcCspace).getProfile();    profileList[1]=((ICC_ColorSpace)dstCspace).getProfile();    getMinMaxValsFromColorSpaces(srcCspace,dstCspace);  } else {    CSList=new ColorSpace[2];    CSList[0]=srcCspace;    CSList[1]=dstCspace;  }  this.hints=hints;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetrootnode.class,args);}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.TransformsElement createTransformsElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.TransformsElementImpl();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechild.class,args);}  }
class C{  public SpinnerDateModel(){  this(new Date(),null,null,Calendar.DAY_OF_MONTH);}  }
class C{  private void enlarge(final int size){  int length1=2 * data.length;  int length2=length + size;  byte[] newData=new byte[length1 > length2 ? length1 : length2];  System.arraycopy(data,0,newData,0,length);  data=newData;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList testList;  Node piNode;  NamedNodeMap attrList;  doc=(Document)load("staff",false);  testList=doc.getChildNodes();  piNode=testList.item(0);  attrList=piNode.getAttributes();  assertNull("nodeProcessingInstructionNodeAttrAssert1",attrList);}  }
class C{  private void initialize(Locale locale){  this.locale=locale;  LocaleProviderAdapter adapter=LocaleProviderAdapter.getAdapter(DecimalFormatSymbolsProvider.class,locale);  if (!(adapter instanceof ResourceBundleBasedAdapter)) {    adapter=LocaleProviderAdapter.getResourceBundleBased();  }  Object[] data=adapter.getLocaleResources(locale).getDecimalFormatSymbolsData();  String[] numberElements=(String[])data[0];  decimalSeparator=numberElements[0].charAt(0);  groupingSeparator=numberElements[1].charAt(0);  patternSeparator=numberElements[2].charAt(0);  percent=numberElements[3].charAt(0);  zeroDigit=numberElements[4].charAt(0);  digit=numberElements[5].charAt(0);  minusSign=numberElements[6].charAt(0);  exponential=numberElements[7].charAt(0);  exponentialSeparator=numberElements[7];  perMill=numberElements[8].charAt(0);  infinity=numberElements[9];  NaN=numberElements[10];  if (locale.getCountry().length() > 0) {    try {      currency=Currency.getInstance(locale);    } catch (    IllegalArgumentException e) {    }  }  if (currency != null) {    intlCurrencySymbol=currency.getCurrencyCode();    if (data[1] != null && data[1] == intlCurrencySymbol) {      currencySymbol=(String)data[2];    } else {      currencySymbol=currency.getSymbol(locale);      data[1]=intlCurrencySymbol;      data[2]=currencySymbol;    }  } else {    intlCurrencySymbol="XXX";    try {      currency=Currency.getInstance(intlCurrencySymbol);    } catch (    IllegalArgumentException e) {    }    currencySymbol="\u00A4";  }  monetarySeparator=decimalSeparator;}  }
class C{  public static PdfAction createGoToR(String filename,int pageNum){  return createGoToR(filename,pageNum,false);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.ReferenceListType createReferenceListType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.ReferenceListTypeImpl();}  }
class C{  public void handleHrefRequest(RequestInvocationEvent event){  forwardTo();}  }
class C{  public JColorChooser(ColorSelectionModel model){  selectionModel=model;  updateUI();  dragEnabled=false;}  }
class C{  public AccessException(String s){  super(s);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  String nodeValue;  Text txtNode;  Node retval;  doc=(Document)load("hc_staff",true);  docFragment=doc.createDocumentFragment();  txtNode=doc.createTextNode("");  retval=docFragment.appendChild(txtNode);  docFragment.normalize();  txtNode=(Text)docFragment.getFirstChild();  assertNull("noChild",txtNode);}  }
class C{  @NonNull public static Agera generate(@NonNull Receiver<Updatable> generator){  return new AgeraGenerate(generator);}  }
class C{  public synchronized long resetByteCount(){  long tmp=this.count;  this.count=0;  return tmp;}  }
class C{  public static PdfAction createSetOcgState(List<PdfActionOcgState> states,boolean preserveRb){  PdfArray stateArr=new PdfArray();  for (  PdfActionOcgState state : states)   stateArr.addAll(state.getObjectList());  return new PdfAction().put(PdfName.S,PdfName.SetOCGState).put(PdfName.State,stateArr).put(PdfName.PreserveRB,new PdfBoolean(preserveRb));}  }
class C{  public static ValidatingUnmarshaller create(Grammar grammar,SAXUnmarshallerHandler _core,Locator locator){  Verifier v=new Verifier(new REDocumentDeclaration(grammar),new ErrorHandlerAdaptor(_core,locator));  v.setPanicMode(true);  return new ValidatingUnmarshaller(new VerifierFilter(v),_core);}  }
class C{  @Deprecated protected ActionListener createKeyboardEndListener(){  return new KeyboardEndHandler();}  }
class C{  public PdfCanvas resetFillColorRgb(){  return resetFillColorGray();}  }
class C{  @Override protected void finalize() throws Throwable {  super.finalize();  server.shutdown();  restExpressRunning=false;}  }
class C{  public Node item(int index){  int handle=m_firstChild;  while (--index >= 0 && handle != DTM.NULL) {    handle=m_parentDTM.getNextSibling(handle);  }  if (handle == DTM.NULL) {    return null;  }  return m_parentDTM.getNode(handle);}  }
class C{  public void modify(SSOToken token,String objName,ModificationItem[] mods) throws SMSException, SSOException {  if ((objName == null) || (objName.length() == 0) || (mods == null)|| (mods.length == 0)) {    throw new IllegalArgumentException("SMSFlatFileObject.modify: " + "One or more arguments is null or empty");  }  String objKey=objName.toLowerCase();  String filepath=null;  mRWLock.readRequest();  try {    filepath=mNameMap.getProperty(objKey);    if (filepath == null) {      String errmsg="SMSFlatFileObject.modify: object " + objName + " not found.";      mDebug.error(errmsg);      throw new ServiceNotFoundException(errmsg);    }  }  finally {    mRWLock.readDone();  }  mRWLock.writeRequest();  try {    filepath=mNameMap.getProperty(objKey);    if (filepath == null) {      String errmsg="SMSFlatFileObject.modify: object " + objName + " not found.";      mDebug.error(errmsg);      throw new ServiceNotFoundException(errmsg);    }    File filehandle=new File(filepath);    if (!filehandle.isFile()) {      String errmsg="SMSFlatFileObject.modify: Attributes file for object " + objName + " not found.";      mDebug.error(errmsg);      throw new ServiceNotFoundException(errmsg);    }    Properties props=loadProperties(filehandle,objName);    boolean hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;    for (int i=0; i < mods.length; i++) {      modifyValues(objName,mods[i],props);    }    saveProperties(props,filehandle,objName);    if (!hasSunXmlKeyValue) {      hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;    }    if (hasSunXmlKeyValue) {      deleteSunXmlKeyValFiles(filehandle.getParentFile());      Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,props.getProperty(SMSEntry.ATTR_XML_KEYVAL));      createSunXmlKeyValFiles(filehandle.getParentFile(),xmlKeyVals);    }  }  finally {    mRWLock.writeDone();  }}  }
class C{  boolean isNavigatable(int offset){  return !isLiteral(offset);}  }
class C{  public final void trace(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {    log(SimpleLog.LOG_LEVEL_TRACE,message,t);  }}  }
class C{  protected PropertyChangeListener createActionChangeListener(JButton b){  return null;}  }
class C{  public final void testGetPolicyQualifier01() throws IOException {  byte[] encoding=getDerEncoding();  byte[] pqEncoding=new byte[28];  System.arraycopy(encoding,12,pqEncoding,0,pqEncoding.length);  PolicyQualifierInfo i=new PolicyQualifierInfo(encoding);  byte[] pqEncodingRet=i.getPolicyQualifier();  assertTrue(Arrays.equals(pqEncoding,pqEncodingRet));}  }
class C{  @Override public ServiceCall<NotUsed,Cargo,Done> register(){  return null;}  }
class C{  public Object put(Object key,Object value){  if (value == null) {    throw new NullPointerException();  }  rwlock.writeLock().lock();  try {    Entry tab[]=table;    int hash=key.hashCode();    int index=(hash & 0x7FFFFFFF) % tab.length;    for (Entry e=tab[index]; e != null; e=e.next) {      if ((e.hash == hash) && e.key.equals(key)) {        Object old=e.value;        e.value=value;        lruTracker.replaceLast(e);        return old;      }    }    if (count >= threshold && count != maxSize) {      modCount++;      rehash();      tab=table;      index=(hash & 0x7FFFFFFF) % tab.length;    }    Entry e=null;    if (count == maxSize) {      e=lruTracker.getFirst();      adjustEntry(e.key);      lruTracker.replaceLast(e);      e.changeValues(hash,key,value,tab[index]);    } else {      modCount++;      count++;      e=new Entry(hash,key,value,tab[index]);      lruTracker.addLast(e);    }    tab[index]=e;  }  finally {    rwlock.writeLock().unlock();  }  return null;}  }
class C{  public void visitLabel(Label label){  if (mv != null) {    mv.visitLabel(label);  }}  }
class C{  public boolean hasDescription(){  return (description != null);}  }
class C{  private TraceSettings(Level level){  this(level,false,false,0,false);}  }
class C{  public boolean isSelected(){  return model.isSelected();}  }
class C{  void removeDescendantSelectedPaths(TreeModelEvent e){  TreePath pPath=SwingUtilities2.getTreePath(e,getModel());  Object[] oldChildren=e.getChildren();  TreeSelectionModel sm=getSelectionModel();  if (sm != null && pPath != null && oldChildren != null && oldChildren.length > 0) {    for (int counter=oldChildren.length - 1; counter >= 0; counter--) {      removeDescendantSelectedPaths(pPath.pathByAddingChild(oldChildren[counter]),true);    }  }}  }
class C{  public Oid(byte[] data) throws GSSException {  try {    DerValue derVal=new DerValue(data);    derEncoding=derVal.toByteArray();    oid=derVal.getOID();  } catch (  IOException e) {    throw new GSSException(GSSException.FAILURE,"Improperly formatted ASN.1 DER encoding for Oid");  }}  }
class C{  @Override public void close(){synchronized (lock) {    if (isOpen()) {      buf=null;    }  }}  }
class C{  private static void updateNetwork(WifiManager wifiManager,WifiConfiguration config){  Integer foundNetworkID=findNetworkInExistingConfig(wifiManager,config.SSID);  if (foundNetworkID != null) {    Log.i(TAG,"Removing old configuration for network " + config.SSID);    wifiManager.removeNetwork(foundNetworkID);    wifiManager.saveConfiguration();  }  int networkId=wifiManager.addNetwork(config);  if (networkId >= 0) {    if (wifiManager.enableNetwork(networkId,true)) {      Log.i(TAG,"Associating to network " + config.SSID);      wifiManager.saveConfiguration();    } else {      Log.w(TAG,"Failed to enable network " + config.SSID);    }  } else {    Log.w(TAG,"Unable to add network " + config.SSID);  }}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeDecimalFormats(this);}  }
class C{  @Override public void run(){  status=STARTED;  logger.info(LocalizableMessage.raw("run of the Uninstaller started"));  initMaps();  PrintStream origErr=System.err;  PrintStream origOut=System.out;  try {    PrintStream err=new ErrorPrintStream();    PrintStream out=new OutputPrintStream();    if (!isCli()) {      System.setErr(err);      System.setOut(out);    }    displaySeparator=false;    removeRemoteServerReferences0();    stopServer0();    disableWindowsService0();    deleteExternalDatabaseFiles0();    deleteExternalLogFiles0();    deleteInstallationFiles0();    if (errorOnRemoteOccurred) {      status=FINISHED_WITH_ERROR_ON_REMOTE;    } else     if (errorDeletingOccurred) {      status=FINISHED_WITH_ERROR_DELETING;    } else {      status=FINISHED_SUCCESSFULLY;    }    if (isCli()) {      notifyListeners(new LocalizableMessageBuilder(getLineBreak()).append(getLineBreak()).append(getSummary(status)).toMessage());    } else {      notifyListeners(null);    }  } catch (  ApplicationException ex) {    logger.error(LocalizableMessage.raw("Error: " + ex,ex));    ue=ex;    status=FINISHED_WITH_ERROR;    notifyListeners(getFormattedError(ex,true));  }catch (  Throwable t) {    logger.error(LocalizableMessage.raw("Error: " + t,t));    ue=new ApplicationException(ReturnCode.BUG,getThrowableMsg(INFO_BUG_MSG.get(),t),t);    status=FINISHED_WITH_ERROR;    notifyListeners(getFormattedError(ue,true));  }  if (!isCli()) {    System.setErr(origErr);    System.setOut(origOut);  }}  }
class C{  public Process start() throws IOException {  String[] cmdArray=command.toArray(new String[command.size()]);  String[] envArray=new String[environment.size()];  int i=0;  for (  Map.Entry<String,String> entry : environment.entrySet()) {    envArray[i++]=entry.getKey() + "=" + entry.getValue();  }  return ProcessManager.getInstance().exec(cmdArray,envArray,directory,redirectErrorStream);}  }
class C{  public void insert_via(LibPadstack p_padstack,PlaPointInt p_center,NetNosList p_net_no_arr,int p_clearance_class,ItemFixState p_fixed_state,boolean p_attach_allowed){  BrdAbitVia new_via=new BrdAbitVia(p_padstack,p_center,p_net_no_arr,p_clearance_class,0,0,p_fixed_state,p_attach_allowed,this);  insert_item(new_via);  int from_layer=p_padstack.from_layer();  int to_layer=p_padstack.to_layer();  for (int index=from_layer; index < to_layer; ++index) {    for (    int curr_net_no : p_net_no_arr) {      split_traces(p_center,index,curr_net_no);    }  }}  }
class C{  @Override public boolean implies(Permission permission){  return perms.implies(permission);}  }
class C{  private void ensureCapacity(int desiredLongCount){  if (desiredLongCount <= bits.length) {    return;  }  int newLength=Math.max(desiredLongCount,bits.length * 2);  long[] newBits=new long[newLength];  System.arraycopy(bits,0,newBits,0,longCount);  this.bits=newBits;}  }
class C{  public RuleWithPrefixEditViewBean(){  super("RuleWithPrefixEdit",DEFAULT_DISPLAY_URL);}  }
class C{  private OpendsJmxConnector connect(String user,String password,int jmxPort) throws MalformedURLException, IOException {  Map<String,Object> env=new HashMap<>();  String[] credentials;  if (user == null && password == null) {    credentials=null;  } else {    credentials=new String[]{user,password};  }  env.put("jmx.remote.credentials",credentials);  env.put("jmx.remote.x.client.connection.check.period",0);  OpendsJmxConnector opendsConnector;  try {    opendsConnector=new OpendsJmxConnector("localhost",jmxPort,env);    opendsConnector.connect();    return opendsConnector;  } catch (  SecurityException e) {    return null;  }catch (  IOException e) {    return null;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignatureMethodType.HMACOutputLength createSignatureMethodTypeHMACOutputLength() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureMethodTypeImpl.HMACOutputLengthImpl();}  }
class C{  @Deprecated public int _INVALID_getDamage(){  return NumberConversions.ceil(getDamage());}  }
class C{  public SAML2Exception(Throwable t){  super(t);}  }
class C{  private void checkInstallStatus() throws InitializationException {  final CurrentInstallStatus installStatus=new CurrentInstallStatus();  if (installStatus.canOverwriteCurrentInstall()) {    if (isInteractive()) {      println(installStatus.getInstallationMsg());      try {        if (!confirmAction(INFO_CLI_DO_YOU_WANT_TO_CONTINUE.get(),true)) {          throw new InitializationException(LocalizableMessage.EMPTY);        }      } catch (      final ClientException ce) {        logger.error(LocalizableMessage.raw("Unexpected error: " + ce,ce));        throw new InitializationException(LocalizableMessage.EMPTY,ce);      }    } else {      println(installStatus.getInstallationMsg());    }  } else   if (installStatus.isInstalled()) {    throw new InitializationException(installStatus.getInstallationMsg());  }}  }
class C{  private String updateMethodName(MethodInsnNode min){  ClassNode methodOwner=getClassNode(min.owner);  while (!methodOwner.name.equals("java/lang/Object")) {    MethodNode method=getMethod(methodOwner,min.name,min.desc);    if (method != null) {      String renamed=getRefactoredName(method);      if (!renamed.equals(min.name)) {        return renamed;      }    }    methodOwner=getClassNode(methodOwner.superName);  }  return min.name;}  }
class C{  public void processStatement(final Statement statement,long startTime,ResultSetFuture result){  report(startTime,statement,result);}  }
class C{  public boolean equals(String ns,String localPart){  String thisnamespace=getNamespaceURI();  return getLocalName().equals(localPart) && (((null != thisnamespace) && (null != ns)) ? thisnamespace.equals(ns) : ((null == thisnamespace) && (null == ns)));}  }
class C{  public static boolean isHasSdcard(){  String status=Environment.getExternalStorageState();  if (status.equals(Environment.MEDIA_MOUNTED)) {    return true;  } else {    return false;  }}  }
class C{  public JsonValue toJson(){  JsonValue ret=json(object(field("_id",getId()),field("archive",getArchive()),field("status",getStatus() != null ? getStatus().toString() : null),field("completedTasks",getCompletedTasks()),field("totalTasks",getTotalTasks()),field("startDate",getStartDate()),field("userName",getUserName())));  if (getStatusMessage() != null) {    ret.put("statusMessage",getStatusMessage());  }  if (getEndDate() != null) {    ret.put("endDate",getEndDate());  }  if (getNodeId() != null) {    ret.put("nodeId",getNodeId());  }  ret.put("files",files);  return ret;}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  @DataProvider(name="namedValueIdentifierValues") public Object[][] createNamedValueIdentifierValues(){  return new Object[][]{{"serialNumber ",true},{"issuer ",true},{"Serialnumber ",false},{"0serialnumber ",false},{"serial Number ",false},{"missingSpace",false}};}  }
class C{  public PushbackInputStream(InputStream in,int size){  super(in);  if (size <= 0) {    throw new IllegalArgumentException("size <= 0");  }  this.buf=new byte[size];  this.pos=size;}  }
class C{  private TemplateEntry buildTemplateEntry(){  templateFile.nextFirstAndLastNames();  final TemplateEntry templateEntry=new TemplateEntry(this,parentDN);  for (  final TemplateLine line : templateLines) {    line.generateLine(templateEntry);  }  for (int i=0; i < subTemplates.size(); i++) {    subTemplates.get(i).reset(templateEntry.getDN(),numEntriesPerTemplate.get(i));  }  return templateEntry;}  }
class C{  public long refreshToken(){  return this.refreshToken;}  }
class C{  public void testCase00_ScanChannelPerformance() throws Exception {  if (!mButtonDecrease.isEnabled()) {    makeFMPowerUp();  }  mInstrumentation.invokeMenuActionSync(mFmRadioActivity,R.id.fm_menu,0);  mInstrumentation.waitForIdleSync();  mInstrumentation.sendKeyDownUpSync(KeyEvent.KEYCODE_DPAD_DOWN);  mInstrumentation.sendKeyDownUpSync(KeyEvent.KEYCODE_DPAD_UP);  mInstrumentation.waitForIdleSync();  long startTime=System.currentTimeMillis();  Log.i(TAG,"[Performance test][FmRadio] scan channel start [" + startTime + "]");  mInstrumentation.sendKeyDownUpSync(KeyEvent.KEYCODE_DPAD_CENTER);  sleep(WAIT_SCAN_FINISH);  mInstrumentation.sendKeyDownUpSync(KeyEvent.KEYCODE_BACK);  sleep(SHORT_TIME);}  }
class C{  public static List<String> splitByNullSeperator(String value){  String[] valuesarray=value.split("\\u0000");  List<String> values=Arrays.asList(valuesarray);  if (values.size() == 0) {    values=new ArrayList<String>(1);    values.add("");  }  return values;}  }
class C{  private void checkDestination(InetAddress destAddr,int dstPort){  if (dstPort < 0 || dstPort > 65535) {    throw new IllegalArgumentException("Port out of range: " + dstPort);  }}  }
class C{  public void write(ByteArrayOutputStream tagBuffer){  if (!((PairedTextEncodedStringNullTerminated)getObject(DataTypes.OBJ_TEXT)).canBeEncoded()) {    this.setTextEncoding(TextEncoding.UTF_16);  }  super.write(tagBuffer);}  }
class C{  public boolean isSecure(){  return this.getScheme().equalsIgnoreCase(SIPS);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode12.class,args);}  }
class C{  public DirtySet(final Set<E> set,final DirtyListener listener){  super(set);  this.listener=listener;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreatecomment.class,args);}  }
class C{  static MethodHandle varargsArray(int nargs){  MethodHandle mh=Lazy.ARRAYS[nargs];  if (mh != null)   return mh;  mh=findCollector("array",nargs,Object[].class);  if (mh != null)   mh=makeIntrinsic(mh,Intrinsic.NEW_ARRAY);  if (mh != null)   return Lazy.ARRAYS[nargs]=mh;  mh=buildVarargsArray(Lazy.MH_fillNewArray,Lazy.MH_arrayIdentity,nargs);  assert (assertCorrectArity(mh,nargs));  mh=makeIntrinsic(mh,Intrinsic.NEW_ARRAY);  return Lazy.ARRAYS[nargs]=mh;}  }
class C{  public static File createTemplateFile(Set<String> baseDNs,int numEntries) throws IOException {  File templateFile=File.createTempFile("opendj-install",".template");  templateFile.deleteOnExit();  LinkedList<String> lines=new LinkedList<>();  int i=0;  for (  String baseDN : baseDNs) {    i++;    lines.add("define suffix" + i + "="+ baseDN);  }  if (numEntries > 0) {    lines.add("define numusers=" + numEntries);  }  for (i=1; i <= baseDNs.size(); i++) {    lines.add("");    lines.add("branch: [suffix" + i + "]");    lines.add("");    lines.add("branch: ou=People,[suffix" + i + "]");    if (numEntries > 0) {      lines.add("subordinateTemplate: person:[numusers]");      lines.add("");    }  }  if (!baseDNs.isEmpty() && numEntries > 0) {    lines.add("template: person");    lines.add("rdnAttr: uid");    lines.add("objectClass: top");    lines.add("objectClass: person");    lines.add("objectClass: organizationalPerson");    lines.add("objectClass: inetOrgPerson");    lines.add("givenName: <first>");    lines.add("sn: <last>");    lines.add("cn: {givenName} {sn}");    lines.add("initials: {givenName:1}" + "<random:chars:ABCDEFGHIJKLMNOPQRSTUVWXYZ:1>{sn:1}");    lines.add("employeeNumber: <sequential:0>");    lines.add("uid: user.{employeeNumber}");    lines.add("mail: {uid}@maildomain.net");    lines.add("userPassword: password");    lines.add("telephoneNumber: <random:telephone>");    lines.add("homePhone: <random:telephone>");    lines.add("pager: <random:telephone>");    lines.add("mobile: <random:telephone>");    lines.add("street: <random:numeric:5> <file:streets> Street");    lines.add("l: <file:cities>");    lines.add("st: <file:states>");    lines.add("postalCode: <random:numeric:5>");    lines.add("postalAddress: {cn}${street}${l}, {st}  {postalCode}");    lines.add("description: This is the description for {cn}.");  }  try (BufferedWriter writer=new BufferedWriter(new FileWriter(templateFile))){    for (    String line : lines) {      writer.write(line);      writer.newLine();    }  }   return templateFile;}  }
class C{  public void fireVisibleDataPropertyChange(){  firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));}  }
class C{  public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  @NonNull public static Animator scaleY(@NonNull View view,int pivotX,int pivotY,float fromScale,float toScale,int duration){  view.setPivotX(pivotX);  view.setPivotY(pivotY);  Animator animator=ObjectAnimator.ofFloat(view,"scaleY",fromScale,toScale);  animator.setDuration(duration);  return animator;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element lastEmployee;  NodeList lastempList;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  java.util.List expectedResult=new java.util.ArrayList();  expectedResult.add("employeeId");  expectedResult.add("name");  expectedResult.add("position");  expectedResult.add("salary");  expectedResult.add("gender");  expectedResult.add("address");  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  lastEmployee=(Element)elementList.item(4);  lastempList=lastEmployee.getElementsByTagName("*");  for (int indexN1006A=0; indexN1006A < lastempList.getLength(); indexN1006A++) {    child=(Node)lastempList.item(indexN1006A);    childName=child.getNodeName();    result.add(childName);  }  assertEquals("tagNames",expectedResult,result);}  }
class C{  protected JobState(int value){  super(value);}  }
class C{  public Future<Long> completeCount(String type){  Future<Long> future=Future.future();  jobService.completeCount(type,future.completer());  return future;}  }
class C{  @Override public boolean isPrimarySession(){  return isPrimarySession;}  }
class C{  public void addSubjectAlternativeName(int tag,String name) throws IOException {  GeneralName alt_name=new GeneralName(tag,name);  if (subjectAltNames == null) {    subjectAltNames=new ArrayList[9];  }  if (subjectAltNames[tag] == null) {    subjectAltNames[tag]=new ArrayList<GeneralName>();  }  subjectAltNames[tag].add(alt_name);}  }
class C{  public static short[] copyOf(short[] original,int newLength){  short[] copy=new short[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  protected MouseInputListener createMouseInputListener(){  return getHandler();}  }
class C{  public byte[] encode(byte[] bytes){  return encodeQuotedPrintable(PRINTABLE_CHARS,bytes);}  }
class C{  private void updateConfiguredServices(OrganizationConfigManager ocm,Map serviceNames) throws SMSException {  try {    ocm.setAttributes(IdConstants.REPO_SERVICE,(Map)serviceNames.get(IdConstants.REPO_SERVICE));  } catch (  SMSException smse) {    throw smse;  }}  }
class C{  public void replaceChild(int index,XMPNode node){  node.setParent(this);  getChildren().set(index - 1,node);}  }
class C{  public SAXException(Exception e){  this.exception=e;}  }
class C{  public StatusImpl(String xml) throws XACMLException {  Document document=XMLUtils.toDOMDocument(xml,XACMLSDKUtils.debug);  if (document != null) {    Element rootElement=document.getDocumentElement();    processElement(rootElement);    makeImmutable();  } else {    XACMLSDKUtils.debug.error("StatusImpl.processElement(): invalid XML input");    throw new XACMLException(XACMLSDKUtils.xacmlResourceBundle.getString("errorObtainingElement"));  }}  }
class C{  public String renameEntry(SSOToken token,int objectType,String entryDN,String newName,boolean deleteOldName) throws AMException {  try {    String tokenID=token.getTokenID().toString();    Object[] objs={tokenID,new Integer(objectType),entryDN,newName,Boolean.valueOf(deleteOldName)};    return ((String)client.send(client.encodeMessage("renameEntry",objs),sessionCookies.getLBCookie(tokenID),null));  } catch (  AMRemoteException amrex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.renameEntry : entryDN" + entryDN + ";  AMRemoteException caught exception=",amrex);    }    throw convertException(amrex);  }catch (  RemoteException rex) {    getDebug().error("RemoteServicesImpl.renameEntry: caught " + "exception=",rex);    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }catch (  Exception ex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.renameEntry : entryDN=" + entryDN + ";  caught exception=",ex);    }    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }}  }
class C{  private static void formatTimeZone(Calendar cal,StringBuilder buf){  TimeZone tz=cal.getTimeZone();  if (tz == null) {    return;  }  int offset=tz.getOffset(cal.getTime().getTime());  if (offset == 0) {    buf.append('Z');    return;  }  if (offset >= 0) {    buf.append('+');  } else {    buf.append('-');    offset*=-1;  }  offset/=60 * 1000;  formatTwoDigits(offset / 60,buf);  buf.append(':');  formatTwoDigits(offset % 60,buf);}  }
class C{  @Override protected void onResume(){  super.onResume();  if (sGoCoderSDK != null && mWZCameraView != null) {    if (mAutoFocusDetector == null)     mAutoFocusDetector=new GestureDetectorCompat(this,new AutoFocusListener(this,mWZCameraView));    WZCamera activeCamera=mWZCameraView.getCamera();    if (activeCamera != null && activeCamera.hasCapability(WZCamera.FOCUS_MODE_CONTINUOUS))     activeCamera.setFocusMode(WZCamera.FOCUS_MODE_CONTINUOUS);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrinsertbefore4.class,args);}  }
class C{  static void policyChanged(String serviceTypeName,PolicyEvent pe){  if (DEBUG.messageEnabled()) {    DEBUG.message("PolicyEvaulator.policyChanged():serviceTypeName=" + serviceTypeName);  }  resourceNamesMap.remove(serviceTypeName);  Cache resourceNamesCache=(Cache)resourceNamesMap.get(serviceTypeName);  if ((resourceNamesCache == null) || (resourceNamesCache.isEmpty())) {    return;  }  try {    DEBUG.error("PolicyEvaluator.policyChanged: enterred try block");    ServiceTypeManager stm=ServiceTypeManager.getServiceTypeManager();    ServiceType serviceType=stm.getServiceType(serviceTypeName);    Set resourceNamesToRemove=new HashSet();synchronized (resourceNamesCache) {      Enumeration resourceNames=resourceNamesCache.keys();      while (resourceNames.hasMoreElements()) {        String resourceName=(String)resourceNames.nextElement();        if (resourceNamesToRemove.contains(resourceName)) {          continue;        }        Set affectedResourceNames=pe.getResourceNames();        Iterator iter=affectedResourceNames.iterator();        while (iter.hasNext()) {          String affectedResourceName=(String)iter.next();          if (serviceType.compare(resourceName,affectedResourceName) != ResourceMatch.NO_MATCH) {            resourceNamesToRemove.add(resourceName);          }        }      }      Iterator iter1=resourceNamesToRemove.iterator();      while (iter1.hasNext()) {        String resourceNameToRemove=(String)iter1.next();        resourceNamesCache.remove(resourceNameToRemove);      }    }  } catch (  SSOException e) {    DEBUG.error("PolicyEvaluator.policyChanged:",e);  }catch (  PolicyException pex) {    DEBUG.error("PolicyEvaluator.policyChanged:",pex);  }  if (DEBUG.messageEnabled()) {    DEBUG.message("PolicyEvaulator.policyChanged():serviceTypeName=" + serviceTypeName + ", new cached resoruceNames="+ resourceNamesMap.get(serviceTypeName));  }}  }
class C{  public static void bootstrapClient(){synchronized (directoryServer) {    directoryServer.syntaxEnforcementPolicy=AcceptRejectWarn.REJECT;    directoryServer.schemaHandler=new SchemaHandler();    directoryServer.alertHandlers=new CopyOnWriteArrayList<>();    directoryServer.passwordStorageSchemes=new ConcurrentHashMap<>();    directoryServer.passwordStorageSchemesByDN=new ConcurrentHashMap<>();    directoryServer.passwordGenerators=new ConcurrentHashMap<>();    directoryServer.authPasswordStorageSchemes=new ConcurrentHashMap<>();    directoryServer.passwordValidators=new ConcurrentHashMap<>();    directoryServer.accountStatusNotificationHandlers=new ConcurrentHashMap<>();    directoryServer.rootDNs=new CopyOnWriteArraySet<>();    directoryServer.alternateRootBindDNs=new ConcurrentHashMap<>();    directoryServer.keyManagerProviders=new ConcurrentHashMap<>();    directoryServer.trustManagerProviders=new ConcurrentHashMap<>();    directoryServer.rotationPolicies=new ConcurrentHashMap<>();    directoryServer.retentionPolicies=new ConcurrentHashMap<>();    directoryServer.certificateMappers=new ConcurrentHashMap<>();    directoryServer.authenticationPolicies=new ConcurrentHashMap<>();    directoryServer.defaultPasswordPolicyDN=null;    directoryServer.defaultPasswordPolicy=null;    directoryServer.monitorProviders=new ConcurrentHashMap<>();    directoryServer.backends=new TreeMap<>();    directoryServer.backendInitializationListeners=new CopyOnWriteArraySet<>();    directoryServer.baseDnRegistry=new BaseDnRegistry();    directoryServer.initializationCompletedListeners=new CopyOnWriteArrayList<>();    directoryServer.shutdownListeners=new CopyOnWriteArrayList<>();    directoryServer.synchronizationProviders=new CopyOnWriteArrayList<>();    directoryServer.supportedLDAPVersions=new ConcurrentHashMap<>();    directoryServer.connectionHandlers=new CopyOnWriteArrayList<>();    directoryServer.identityMappers=new ConcurrentHashMap<>();    directoryServer.extendedOperationHandlers=new ConcurrentHashMap<>();    directoryServer.saslMechanismHandlers=new ConcurrentHashMap<>();    directoryServer.backupTaskListeners=new CopyOnWriteArrayList<>();    directoryServer.restoreTaskListeners=new CopyOnWriteArrayList<>();    directoryServer.exportTaskListeners=new CopyOnWriteArrayList<>();    directoryServer.importTaskListeners=new CopyOnWriteArrayList<>();    directoryServer.allowedTasks=new LinkedHashSet<>(0);    directoryServer.disabledPrivileges=new LinkedHashSet<>(0);    directoryServer.returnBindErrorMessages=false;    directoryServer.idleTimeLimit=0L;    TimeThread.start();  }}  }
class C{  private String readInputUntil(char symbol){  String s="";  while (!accept(symbol)) {    s+=(char)data[index];    skip();  }  return s;}  }
class C{  public void bruteForceWithAdditionalOracleEquations(int[] usedOracleEquations,BigInteger[] congs,BigInteger[] modulis,int pointer){  if (result == null) {    int[] eq=Arrays.copyOf(usedOracleEquations,usedOracleEquations.length);    int maxValue=(pointer == usedOracleEquations.length - 1) ? (congs.length) : (usedOracleEquations[pointer + 1]);    int minValue=usedOracleEquations[pointer];    for (int i=minValue; i < maxValue; i++) {      eq[pointer]=i;      if (pointer > 0) {        bruteForceWithAdditionalOracleEquations(eq,congs,modulis,(pointer - 1));      } else {        LOGGER.debug("Trying the following combination: {}",Arrays.toString(eq));        BigInteger sqrtResult=computeCRTFromCombination(usedOracleEquations,congs,modulis);        BigInteger r=MathHelper.bigIntSqRootFloor(sqrtResult);        LOGGER.info("Guessing the following result: {}",r);        if (oracle.isFinalSolutionCorrect(r)) {          result=r;        }      }    }  }}  }
class C{  public static Foo findByUuid_First(java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_First(uuid,orderByComparator);}  }
class C{  public boolean isIncludeCause(){  return includeCause;}  }
class C{  public void jspError(Exception e,String errCode,String... args) throws JasperException {  dispatch(null,errCode,args,e);}  }
class C{  public boolean equals(Object resourceMatch){  if (resourceMatch instanceof ResourceMatch) {    ResourceMatch rm=(ResourceMatch)resourceMatch;    return (rm.resourceMatch.equals(this.resourceMatch));  }  return (false);}  }
class C{  public void logUnbind(UnbindOperation unbindOperation){}  }
class C{  private static boolean containsCertificate(X509Certificate cert,KeyStore keyStore) throws KeyStoreException {  boolean found=false;  Enumeration<String> aliases=keyStore.aliases();  while (aliases.hasMoreElements() && !found) {    String alias=aliases.nextElement();    if (keyStore.isCertificateEntry(alias)) {      Certificate c=keyStore.getCertificate(alias);      found=c.equals(cert);    }  }  return found;}  }
class C{  public URI toURILenient() throws URISyntaxException {  if (streamHandler == null) {    throw new IllegalStateException(protocol);  }  return new URI(streamHandler.toExternalForm(this,true));}  }
class C{  public DSAParameterGenerationParameters(int L,int N,int certainty,SecureRandom random){  this(L,N,certainty,random,-1);}  }
class C{  @Override public void firePropertyChange(String propertyName,int oldValue,int newValue){}  }
class C{  private static String toUnicodeLowerCase(String s){  int n=s.length();  char[] result=new char[n];  for (int i=0; i < n; ++i) {    result[i]=Character.toLowerCase(s.charAt(i));  }  return new String(result);}  }
class C{  public Object clone() throws CloneNotSupportedException {  InternationalFormatter formatter=(InternationalFormatter)super.clone();  formatter.literalMask=null;  formatter.iterator=null;  formatter.validMask=false;  formatter.string=null;  return formatter;}  }
class C{  private void examineCompletedOperation(AbandonOperation abandonOperation){  assertTrue(abandonOperation.getIDToAbandon() > 0);  assertTrue(abandonOperation.getProcessingStartTime() > 0);  assertTrue(abandonOperation.getProcessingStopTime() > 0);  assertTrue(abandonOperation.getProcessingTime() >= 0);}  }
class C{  protected boolean isDynamicalOrIgnoredProfile(String realm){  return true;}  }
class C{  public static Name from(String... pieces){  List<NamePiece> namePieces=new ArrayList<>();  for (  String piece : pieces) {    validateLowerUnderscore(piece);    namePieces.add(new NamePiece(piece,CaseFormat.LOWER_UNDERSCORE));  }  return new Name(namePieces);}  }
class C{  public boolean isReleased(){  return released.get();}  }
class C{  public BaseMultiItemQuickAdapter(List<T> data){  super(data);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute;  String attrValue;  NodeList childList;  String nullNS=null;  doc=(Document)load("staffNS",false);  childList=doc.getElementsByTagNameNS("http://www.nist.gov","employee");  element=(Element)childList.item(1);  attribute=element.getAttributeNodeNS(nullNS,"defaultAttr");  attrValue=attribute.getNodeValue();  assertEquals("elementgetattributenodens03","defaultVal",attrValue);}  }
class C{  public org.w3c.dom.Element signWithUserNameToken(org.w3c.dom.Document doc,java.security.cert.Certificate cert,java.lang.String algorithm,java.util.List ids) throws XMLSignatureException {  return null;}  }
class C{  public int count(){  return array.length;}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  drawDimmedLayer(canvas);  drawCropGrid(canvas);}  }
class C{  public void addPair(String function,String name){  PairedTextEncodedStringNullTerminated.ValuePairs value=((PairedTextEncodedStringNullTerminated)getObject(DataTypes.OBJ_TEXT)).getValue();  value.add(function,name);}  }
class C{  private ConfigAddListener registerAddListenerForTestParent(ConfigurationRepository configRepository,ServerManagedObject<RootCfg> root,ConfigurationAddListener<TestParentCfg> parentListener) throws Exception {  root.registerAddListener(TestCfg.getTestOneToManyParentRelationDefinition(),parentListener);  ArgumentCaptor<ConfigAddListener> registered=ArgumentCaptor.forClass(ConfigAddListener.class);  verify(configRepository).registerAddListener(eq(TEST_PARENTS_DN),registered.capture());  return registered.getValue();}  }
class C{  @Override public void closeEntryWriter(){  printWrappedText(out,INFO_MAKELDIF_PROCESSING_COMPLETE.get(entriesWritten));}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.PreviousSessionElement createPreviousSessionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PreviousSessionElementImpl();}  }
class C{  public InvalidPathException(String input,String reason){  this(input,reason,-1);}  }
class C{  public Object shift(){  return remove(0);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrsetvalue1.class,args);}  }
class C{  public static CipherParameters makePBEParameters(BCPBEKey pbeKey,AlgorithmParameterSpec spec,String targetAlgorithm){  if ((spec == null) || !(spec instanceof PBEParameterSpec)) {    throw new IllegalArgumentException("Need a PBEParameter spec with a PBE key.");  }  PBEParameterSpec pbeParam=(PBEParameterSpec)spec;  PBEParametersGenerator generator=makePBEGenerator(pbeKey.getType(),pbeKey.getDigest());  byte[] key=pbeKey.getEncoded();  CipherParameters param;  if (pbeKey.shouldTryWrongPKCS12()) {    key=new byte[2];  }  generator.init(key,pbeParam.getSalt(),pbeParam.getIterationCount());  if (pbeKey.getIvSize() != 0) {    param=generator.generateDerivedParameters(pbeKey.getKeySize(),pbeKey.getIvSize());  } else {    param=generator.generateDerivedParameters(pbeKey.getKeySize());  }  if (targetAlgorithm.startsWith("DES")) {    if (param instanceof ParametersWithIV) {      KeyParameter kParam=(KeyParameter)((ParametersWithIV)param).getParameters();      DESParameters.setOddParity(kParam.getKey());    } else {      KeyParameter kParam=(KeyParameter)param;      DESParameters.setOddParity(kParam.getKey());    }  }  for (int i=0; i != key.length; i++) {    key[i]=0;  }  return param;}  }
class C{  public void updateState(Path newFile) throws IOException {  Path cacheKey=newFile;  if (!Files.exists(checksum.resolvePath(newFile))) {    checksum.remove(cacheKey);  } else {    checksum.put(cacheKey,checksum.getCurrentDigest(newFile));  }  checksum.persistChecksums();}  }
class C{  public final void initSign(PrivateKey privateKey) throws InvalidKeyException {  engineInitSign(privateKey);  state=SIGN;  if (!skipDebug && pdebug != null) {    pdebug.println("Signature." + algorithm + " signing algorithm from: "+ this.provider.getName());  }}  }
class C{  public Builder withFade(Iterable<?> colors) throws IllegalArgumentException {  Validate.notNull(colors,"Cannot have null colors");  ImmutableList.Builder<Color> list=this.fadeColors;  if (list == null) {    list=this.fadeColors=ImmutableList.builder();  }  for (  Object color : colors) {    if (!(color instanceof Color)) {      throw new IllegalArgumentException(color + " is not a Color in " + colors);    }    list.add((Color)color);  }  return this;}  }
class C{  public void init(boolean isDebug){  mDebug=isDebug;}  }
class C{  private boolean addIfAbsent(E e,Object[] snapshot){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] current=getArray();    int len=current.length;    if (snapshot != current) {      int common=Math.min(snapshot.length,len);      for (int i=0; i < common; i++)       if (current[i] != snapshot[i] && eq(e,current[i]))       return false;      if (indexOf(e,current,common,len) >= 0)       return false;    }    Object[] newElements=Arrays.copyOf(current,len + 1);    newElements[len]=e;    setArray(newElements);    return true;  }  finally {    lock.unlock();  }}  }
class C{  public boolean hasAttribute(AttributeType attributeType){  return hasAttribute(AttributeDescription.create(attributeType),true);}  }
class C{  public static OggPageHeader read(ByteBuffer byteBuffer) throws IOException, CannotReadException {  int start=byteBuffer.position();  logger.fine("Trying to read OggPage at:" + start);  byte[] b=new byte[OggPageHeader.CAPTURE_PATTERN.length];  byteBuffer.get(b);  if (!(Arrays.equals(b,OggPageHeader.CAPTURE_PATTERN))) {    throw new CannotReadException(ErrorMessage.OGG_HEADER_CANNOT_BE_FOUND.getMsg(new String(b)));  }  byteBuffer.position(start + OggPageHeader.FIELD_PAGE_SEGMENTS_POS);  int pageSegments=byteBuffer.get() & 0xFF;  byteBuffer.position(start);  b=new byte[OggPageHeader.OGG_PAGE_HEADER_FIXED_LENGTH + pageSegments];  byteBuffer.get(b);  OggPageHeader pageHeader=new OggPageHeader(b);  return pageHeader;}  }
class C{  public void cache(String dn,Privilege p,String realm){  rwlock.writeLock().lock();  try {    Object e=cache.put(dn,p);    if (e == null) {      Integer i=countByRealm.get(realm);      int count=(i == null) ? 1 : i.intValue() + 1;      countByRealm.put(realm,count);    }  }  finally {    rwlock.writeLock().unlock();  }}  }
class C{  public void run(){  RandomAccessFile reader=null;  try {    long last=0;    long position=0;    while (run && reader == null) {      try {        reader=new RandomAccessFile(file,RAF_MODE);      } catch (      FileNotFoundException e) {        listener.fileNotFound();      }      if (reader == null) {        try {          Thread.sleep(delayMillis);        } catch (        InterruptedException e) {        }      } else {        position=end ? file.length() : 0;        last=System.currentTimeMillis();        reader.seek(position);      }    }    while (run) {      boolean newer=FileUtils.isFileNewer(file,last);      long length=file.length();      if (length < position) {        listener.fileRotated();        try {          RandomAccessFile save=reader;          reader=new RandomAccessFile(file,RAF_MODE);          position=0;          IOUtils.closeQuietly(save);        } catch (        FileNotFoundException e) {          listener.fileNotFound();        }        continue;      } else {        if (length > position) {          position=readLines(reader);          last=System.currentTimeMillis();        } else         if (newer) {          position=0;          reader.seek(position);          position=readLines(reader);          last=System.currentTimeMillis();        }      }      if (reOpen) {        IOUtils.closeQuietly(reader);      }      try {        Thread.sleep(delayMillis);      } catch (      InterruptedException e) {      }      if (run && reOpen) {        reader=new RandomAccessFile(file,RAF_MODE);        reader.seek(position);      }    }  } catch (  Exception e) {    listener.handle(e);  } finally {    IOUtils.closeQuietly(reader);  }}  }
class C{  public boolean isContextual(){  return fContextual;}  }
class C{  public boolean offerLast(E e){  addLast(e);  return true;}  }
class C{  public SMethodDef findBestMatch(List<Value> argList,List<SMethodDef> methods,LineCol lineCol) throws SyntaxException {  if (null == methods || methods.isEmpty())   return null;  Iterator<SMethodDef> it=methods.iterator();  SMethodDef method=it.next();  while (it.hasNext()) {    int swap=SWAP_NONE;    SMethodDef methodCurrent=it.next();    for (int i=0; i < argList.size(); ++i) {      SParameter paramLast=method.getParameters().get(i);      SParameter paramCurrent=methodCurrent.getParameters().get(i);      if (!paramLast.type().equals(paramCurrent.type())) {        if (paramLast.type().isAssignableFrom(paramCurrent.type()) && !paramLast.type().equals(paramCurrent.type())) {          if (swap == SWAP_NONE) {            swap=SWAP_SWAP;          } else           if (swap == SWAP_NO_SWAP) {            err.SyntaxException("cannot choose between " + method + " and "+ methodCurrent+ " with args "+ argList,lineCol);            return null;          }        } else {          if (swap == SWAP_NONE) {            swap=SWAP_NO_SWAP;          } else           if (swap == SWAP_SWAP) {            err.SyntaxException("cannot choose between " + method + " and "+ methodCurrent+ " with args "+ argList,lineCol);            return null;          }        }      }    }    if (swap == SWAP_SWAP) {      method=methodCurrent;    }  }  return method;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.OElement createOElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.OElementImpl();}  }
class C{  public boolean hasDatabase(){  return (database != null);}  }
class C{  public void removeAdminRole(SSOToken token,String dn,boolean recursive) throws SSOException, AMException {  try {    String tokenID=token.getTokenID().toString();    Object[] objs={tokenID,dn,Boolean.valueOf(recursive)};    client.send(client.encodeMessage("removeAdminRole",objs),sessionCookies.getLBCookie(tokenID),null);  } catch (  AMRemoteException amrex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.removeAdminRole: dn=" + dn + ";  AMRemoteException caught exception=",amrex);    }    throw convertException(amrex);  }catch (  RemoteException rex) {    getDebug().error("RemoteServicesImpl.removeAdminRole: caught exception=",rex);    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }catch (  SSOException ssoe) {    getDebug().error("RemoteServicesImpl.removeAdminRole: caught SSOException=",ssoe);    throw ssoe;  }catch (  Exception ex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.removeAdminRole: dn=" + dn + ";  caught exception=",ex);    }    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }}  }
class C{  static String[] decodeUserPassword(final String userPasswordValue) throws DecodeException {  if (userPasswordValue == null || userPasswordValue.length() == 0) {    final LocalizableMessage message=ERR_ATTR_SYNTAX_USERPW_NO_VALUE.get();    throw DecodeException.error(message);  }  if (userPasswordValue.charAt(0) != '{') {    final LocalizableMessage message=ERR_ATTR_SYNTAX_USERPW_NO_OPENING_BRACE.get();    throw DecodeException.error(message);  }  final int closePos=userPasswordValue.indexOf('}');  if (closePos < 0) {    final LocalizableMessage message=ERR_ATTR_SYNTAX_USERPW_NO_CLOSING_BRACE.get();    throw DecodeException.error(message);  }  final String schemeName=userPasswordValue.substring(1,closePos);  final String encodedValue=userPasswordValue.substring(closePos + 1);  if (schemeName.length() == 0) {    final LocalizableMessage message=ERR_ATTR_SYNTAX_USERPW_NO_SCHEME.get();    throw DecodeException.error(message);  }  return new String[]{toLowerCase(schemeName),encodedValue};}  }
class C{  public List slice(int fromIndex){  return slice(fromIndex,size());}  }
class C{  public static void addFederationProtocol(Object session,String protocol){  if (SingleLogoutManager.debug.messageEnabled()) {    SingleLogoutManager.debug.message("MPUtils.addFedProtocol:" + " protocol=" + protocol + ", session="+ session);  }  try {    SessionProvider provider=SessionManager.getProvider();    String[] values=provider.getProperty(session,SingleLogoutManager.FEDERATION_PROTOCOLS);    if (SingleLogoutManager.debug.messageEnabled()) {      SingleLogoutManager.debug.message("MPUtils.addFedProtocol:" + " current protocols=" + values);    }    if ((values == null) || (values.length == 0)) {      values=new String[]{protocol};      provider.setProperty(session,SingleLogoutManager.FEDERATION_PROTOCOLS,values);    } else {      Set set=new HashSet();      for (int i=0; i < values.length; i++) {        set.add(values[i]);      }      if (!set.contains(protocol)) {        set.add(protocol);        String[] newVals=new String[set.size()];        set.toArray(newVals);        provider.setProperty(session,SingleLogoutManager.FEDERATION_PROTOCOLS,newVals);      }    }  } catch (  UnsupportedOperationException ex) {    SingleLogoutManager.debug.warning("MPUtils.addFedProtocol",ex);  }catch (  SessionException ex) {    SingleLogoutManager.debug.warning("MPUtils.addFedProtocol2",ex);  }}  }
class C{  public void onRing() throws IllegalStateException {  currentState.ring();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(processinginstructiongettarget.class,args);}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  @Override protected void writeValue(ASN1Writer writer) throws IOException {  writer.writeStartSequence(ASN1.UNIVERSAL_OCTET_STRING_TYPE);  writer.writeBoolean(visibility);  writer.writeEndSequence();}  }
class C{  public String append(String superRes,String subRes){  if (resourceNameUtil == null) {    PolicyManager.debug.error("Append: Don't have resource comparator");    return (superRes);  }  return (resourceNameUtil.append(superRes,subRes));}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public void verify(PublicKey key,String sigProvider) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException {}  }
class C{  public IssuingDistributionPoint(DistributionPointName distributionPoint,ReasonFlags onlySomeReasons){  this.distributionPoint=distributionPoint;  this.onlySomeReasons=onlySomeReasons;}  }
class C{  private boolean aciCheckRDNs(ModifyDNOperation operation,RDN oldRDN,RDN newRDN){  AciContainer container=new AciLDAPOperationContainer(operation,ACI_WRITE,operation.getOriginalEntry());  if (!accessAllowed(container)) {    return false;  }  boolean ret=checkRDN(ACI_WRITE_ADD,newRDN,container);  if (ret && operation.deleteOldRDN()) {    ret=checkRDN(ACI_WRITE_DELETE,oldRDN,container);  }  return ret;}  }
class C{  public void addMetaObject(MetaObject object){  for (int k=0; k < MetaObjects.size(); ++k) {    if (MetaObjects.get(k) == null) {      MetaObjects.set(k,object);      return;    }  }  MetaObjects.add(object);}  }
class C{  public String toString(){  return operation;}  }
class C{  public Attribute(Element element) throws SAMLException {  if (element == null) {    SAMLUtilsCommon.debug.message("Attribute: Input is null.");    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  String tag=null;  tag=element.getLocalName();  if ((tag == null) || (!tag.equals("Attribute"))) {    SAMLUtilsCommon.debug.message("Attribute: wrong input");    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));  }  int i=0;  NamedNodeMap atts=element.getAttributes();  int attrCount=atts.getLength();  for (i=0; i < attrCount; i++) {    Node att=atts.item(i);    if (att.getNodeType() == Node.ATTRIBUTE_NODE) {      String attName=att.getLocalName();      if (attName == null) {        attName=att.getNodeName();      }      if (attName == null || attName.length() == 0) {        if (SAMLUtilsCommon.debug.messageEnabled()) {          SAMLUtilsCommon.debug.message("Attribute:" + "Attribute Name is either null or empty.");        }        continue;      }      if (attName.equals("AttributeName")) {        this._attributeName=((Attr)att).getValue().trim();      } else       if (attName.equals("AttributeNamespace")) {        this._attributeNameSpace=((Attr)att).getValue().trim();      }    }  }  if (_attributeName == null || _attributeName.length() == 0) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("Attribute: " + "AttributeName is required attribute");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingAttribute"));  }  if (_attributeNameSpace == null || _attributeNameSpace.length() == 0) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("Attribute: " + "AttributeNamespace is required attribute");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingAttribute"));  }  NodeList nodes=element.getChildNodes();  int nodeCount=nodes.getLength();  if (nodeCount > 0) {    for (i=0; i < nodeCount; i++) {      Node currentNode=nodes.item(i);      if (currentNode.getNodeType() == Node.ELEMENT_NODE) {        String tagName=currentNode.getLocalName();        String tagNS=currentNode.getNamespaceURI();        if ((tagName == null) || tagName.length() == 0 || tagNS == null || tagNS.length() == 0) {          if (SAMLUtilsCommon.debug.messageEnabled()) {            SAMLUtilsCommon.debug.message("Attribute:" + " The tag name or tag namespace of child" + " element is either null or empty.");          }          throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));        }        if (tagName.equals("AttributeValue") && tagNS.equals(SAMLConstants.assertionSAMLNameSpaceURI)) {          if (_attributeValue == null) {            _attributeValue=new ArrayList();          }          if (!(_attributeValue.add((Element)currentNode))) {            if (SAMLUtilsCommon.debug.messageEnabled()) {              SAMLUtilsCommon.debug.message("Attribute: failed to " + "add to the attribute value list.");            }            throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("addListError"));          }        } else {          if (SAMLUtilsCommon.debug.messageEnabled()) {            SAMLUtilsCommon.debug.message("Attribute:" + "wrong element:" + tagName);          }          throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));        }      }    }  }  if (_attributeValue == null || _attributeValue.isEmpty()) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("Attribute: " + "should contain at least one AttributeValue.");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingElement"));  }}  }
class C{  public UpgradeException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  public static Object checkSession(HttpServletRequest request,HttpServletResponse response,String metaAlias,Map paramsMap) throws SAML2Exception {  String method="SAML2Utils.checkSession : ";  Object session=null;  try {    session=SessionManager.getProvider().getSession(request);  } catch (  SessionException se) {    if (debug.messageEnabled()) {      debug.message(method,se);    }    session=null;  }  String realm=SAML2MetaUtils.getRealmByMetaAlias(metaAlias);  String hostEntity=null;  String hostEntityRole=getHostEntityRole(paramsMap);  if (session == null) {    if (debug.messageEnabled()) {      debug.message(method + "session is missing." + "redirect to the authentication service");    }    try {      hostEntity=saml2MetaManager.getEntityByMetaAlias(metaAlias);      redirectAuthentication(request,response,realm,hostEntity,hostEntityRole);    } catch (    IOException ioe) {      debug.error("Unable to redirect to authentication.");      throw new SAML2Exception(ioe.toString());    }  }  return session;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.DigestValueElement createDigestValueElement(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.DigestValueElementImpl(value);}  }
class C{  public void testEqualsDoesNotDoHostnameResolution() throws Exception {  for (  InetAddress inetAddress : InetAddress.getAllByName("localhost")) {    String address=inetAddress.getHostAddress();    if (inetAddress instanceof Inet6Address) {      address="[" + address + "]";    }    URL urlByHostName=new URL("http://localhost/foo?bar=baz#quux");    URL urlByAddress=new URL("http://" + address + "/foo?bar=baz#quux");    assertFalse("Expected " + urlByHostName + " to not equal "+ urlByAddress,urlByHostName.equals(urlByAddress));  }}  }
class C{  private void VisitLineNumber(MethodVisitor methodVisitor,LineCol lineCol,Label label){  if (lineCol == null || lineCol.line <= 0)   return;  methodVisitor.visitLineNumber(lineCol.line,label);}  }
class C{  public JsonValue jsonValueOf(SSOToken ssoToken) throws IdRepoException, SSOException {  AMIdentity identity=getIdentity(ssoToken);  return json(object(field(UID,identity.getName()),field(REALM,convertDNToRealm(identity.getRealm())),field(IDLE_TIME,ssoToken.getIdleTime()),field(MAX_IDLE_TIME,ssoToken.getMaxIdleTime()),field(MAX_SESSION_TIME,ssoToken.getMaxSessionTime()),field(MAX_TIME,ssoToken.getTimeLeft())));}  }
class C{  public boolean nextTile() throws ModelControlException {  boolean movedToRow=super.nextTile();  PWResetQuestionModel model=getModel();  if (movedToRow) {    String question=questionKeys.get(getTileIndex());    String localizedStr=model.getLocalizedStrForQuestion(question);    HiddenField hf=(HiddenField)getChild(FLD_ATTR_NAME);    hf.setValue(question);    setDisplayFieldValue(LBL_QUESTION,localizedStr);  }  return movedToRow;}  }
class C{  public void startCDATA() throws org.xml.sax.SAXException {  m_inCData=true;  append(m_doc.createCDATASection(""));}  }
class C{  private ResourceType(Builder builder){  this.uuid=builder.uuid;  this.name=builder.name;  this.description=builder.description;  this.patterns=Collections.unmodifiableSet(builder.patterns);  this.actions=Collections.unmodifiableMap(builder.actions);  this.createdBy=builder.createdBy;  this.creationDate=builder.creationDate;  this.lastModifiedBy=builder.lastModifiedBy;  this.lastModifiedDate=builder.lastModifiedDate;}  }
class C{  protected void pathWasExpanded(TreePath path){  if (tree != null) {    tree.fireTreeExpanded(path);  }}  }
class C{  public static void initializeWithArgParser(PurgeHistoricalUserData uData,ReplicationCliArgumentParser argParser){  uData.setBaseDNs(toDNs(argParser.getBaseDNs()));  if (argParser.connectionArgumentsPresent()) {    uData.setAdminUid(argParser.getAdministratorUIDOrDefault());    uData.setAdminPwd(argParser.getBindPasswordAdmin());    uData.setHostPort(new HostPort(argParser.getHostNameToStatusOrDefault(),argParser.getPortToStatusOrDefault()));    uData.setOnline(true);    TaskScheduleUserData taskSchedule=new TaskScheduleUserData();    TaskScheduleArgs taskArgs=argParser.getTaskArgsList();    taskSchedule.setStartNow(taskArgs.isStartNow());    if (!taskSchedule.isStartNow()) {      taskSchedule.setStartDate(taskArgs.getStartDateTime());      taskSchedule.setDependencyIds(taskArgs.getDependencyIds());      taskSchedule.setFailedDependencyAction(taskArgs.getFailedDependencyAction());      taskSchedule.setNotifyUponErrorEmailAddresses(taskArgs.getNotifyUponErrorEmailAddresses());      taskSchedule.setNotifyUponCompletionEmailAddresses(taskArgs.getNotifyUponCompletionEmailAddresses());      taskSchedule.setRecurringDateTime(taskArgs.getRecurringDateTime());    }    uData.setTaskSchedule(taskSchedule);  } else {    uData.setOnline(false);  }  uData.setMaximumDuration(argParser.getMaximumDurationOrDefault());}  }
class C{  private static synchronized String makeDateStringGnuStep(Date date){  return sdfGnuStep.format(date);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  populateValues=true;  forwardTo();}  }
class C{  public IIOImage(Raster raster,List<? extends BufferedImage> thumbnails,IIOMetadata metadata){  if (raster == null) {    throw new IllegalArgumentException("raster == null!");  }  this.raster=raster;  this.image=null;  this.thumbnails=thumbnails;  this.metadata=metadata;}  }
class C{  public LDAPPostReadRequestControl(String oid,boolean isCritical,Set<String> rawAttributes){  super(oid,isCritical);  if (rawAttributes == null) {    this.rawAttributes=new LinkedHashSet<>(0);  } else {    this.rawAttributes=rawAttributes;  }  requestedAttributes=null;}  }
class C{  public void sendMessage(byte message[],InetAddress receiverAddress,int receiverPort,boolean retry) throws IOException {  sendTCPMessage(message,receiverAddress,receiverPort,retry);}  }
class C{  public int indexOf(PdfObject o){  if (o == null)   return list.indexOf(null);  int index=0;  for (  PdfObject pdfObject : this) {    if (PdfObject.equalContent(o,pdfObject)) {      return index;    }    index++;  }  return -1;}  }
class C{  public static String removeBusinessKeyFromRequest(CreateRequest request){  return (String)(request.getContent().isNull() ? null : request.getContent().expect(Map.class).asMap().remove("_businessKey"));}  }
class C{  public CMapObject readObject() throws java.io.IOException {  if (!nextValidToken())   return null;  TokenType type=tokeniser.getTokenType();switch (type) {case StartDic:    return readDictionary();case StartArray:  return readArray();case String:CMapObject obj;if (tokeniser.isHexString()) {obj=new CMapObject(CMapObject.HEX_STRING,PdfTokenizer.decodeStringContent(tokeniser.getByteContent(),true));} else {obj=new CMapObject(CMapObject.STRING,PdfTokenizer.decodeStringContent(tokeniser.getByteContent(),false));}return obj;case Name:return new CMapObject(CMapObject.NAME,decodeName(tokeniser.getByteContent()));case Number:CMapObject numObject=new CMapObject(CMapObject.NUMBER,null);try {numObject.setValue((int)java.lang.Double.parseDouble(tokeniser.getStringValue()));} catch (NumberFormatException e) {numObject.setValue(Integer.MIN_VALUE);}return numObject;case Other:return new CMapObject(CMapObject.LITERAL,tokeniser.getStringValue());case EndArray:return new CMapObject(CMapObject.TOKEN,"]");case EndDic:return new CMapObject(CMapObject.TOKEN,">>");default :return new CMapObject(0,"");}}  }
class C{  public CertificateNotYetValidException(String message){  super(message);}  }
class C{  public boolean deleteAll(){  return database.delete(DATABASE_TABLE,null,null) > 0;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  @DataProvider public Object[][] differentNormalization() throws ParseException {  final String BASE64_CERT_VALUE="MIICpTCCAg6gAwIBAgIJALeoA6I3ZC/cMA0GCSqGSIb3DQEBBQUAMFYxCzAJBgNV" + "BAYTAlVTMRMwEQYDVQQHEwpDdXBlcnRpb25lMRwwGgYDVQQLExNQcm9kdWN0IERl" + "dmVsb3BtZW50MRQwEgYDVQQDEwtCYWJzIEplbnNlbjAeFw0xMjA1MDIxNjM0MzVa"+ "Fw0xMjEyMjExNjM0MzVaMFYxCzAJBgNVBAYTAlVTMRMwEQYDVQQHEwpDdXBlcnRp"+ "b25lMRwwGgYDVQQLExNQcm9kdWN0IERldmVsb3BtZW50MRQwEgYDVQQDEwtCYWJz"+ "IEplbnNlbjCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEApysa0c9qc8FB8gIJ"+ "8zAb1pbJ4HzC7iRlVGhRJjFORkGhyvU4P5o2wL0iz/uko6rL9/pFhIlIMbwbV8sm"+ "mKeNUPitwiKOjoFDmtimcZ4bx5UTAYLbbHMpEdwSpMC5iF2UioM7qdiwpAfZBd6Z"+ "69vqNxuUJ6tP+hxtr/aSgMH2i8ECAwEAAaN7MHkwCQYDVR0TBAIwADAsBglghkgB"+ "hvhCAQ0EHxYdT3BlblNTTCBHZW5lcmF0ZWQgQ2VydGlmaWNhdGUwHQYDVR0OBBYE"+ "FLlZD3aKDa8jdhzoByOFMAJDs2osMB8GA1UdIwQYMBaAFLlZD3aKDa8jdhzoByOF"+ "MAJDs2osMA0GCSqGSIb3DQEBBQUAA4GBAE5vccY8Ydd7by2bbwiDKgQqVyoKrkUg"+ "6CD0WRmc2pBeYX2z94/PWO5L3Fx+eIZh2wTxScF+FdRWJzLbUaBuClrxuy0Y5ifj"+ "axuJ8LFNbZtsp1ldW3i84+F5+SYT+xI67ZcoAtwx/VFVI9s5I/Gkmu9f9nxjPpK7"+ "1AIUXiE3Qcck";  final String CERT_EXACT_ASSERTION="{ serialNumber 13233831500277100508, issuer rdnSequence:\"" + "CN=Babs Jensen,OU=Product Development,L=Cupertione,C=US\" }";  final String LDIF_ENTRY=TestCaseUtils.makeLdif("dn: cn=John Smith,dc=example,dc=com","objectclass: inetorgperson","cn: John Smith","sn: Smith","userCertificate;binary:: " + BASE64_CERT_VALUE);  StringBuilder builder=new StringBuilder();  RawFilter.valueToFilterString(builder,ByteString.wrap(Base64.decode(BASE64_CERT_VALUE)));  final String CERTIFICATE_ENCODED=builder.toString();  return new Object[][]{{LDIF_ENTRY,"userCertificate=" + CERT_EXACT_ASSERTION,true},{LDIF_ENTRY,"userCertificate=" + CERTIFICATE_ENCODED,true}};}  }
class C{  private Polyline reduce_corners(Polyline p_polyline){  if (p_polyline.plaline_len() <= 4)   return p_polyline;  int new_corner_count=1;  PlaPointInt[] curr_corner=new PlaPointInt[4];  for (int index=0; index < 4; ++index) {    PlaPoint a_point=p_polyline.corner(index);    if (!(a_point instanceof PlaPointInt)) {      return p_polyline;    }    curr_corner[index]=(PlaPointInt)a_point;  }  boolean[] curr_corner_in_clip_shape=new boolean[4];  for (int index=0; index < 4; ++index) {    curr_corner_in_clip_shape[index]=true;  }  boolean polyline_changed=false;  PlaPointInt[] new_corners=new PlaPointInt[p_polyline.plaline_len(-3)];  new_corners[0]=curr_corner[0];  PlaPointInt[] curr_check_points=new PlaPointInt[2];  PlaPointInt new_corner=null;  int corner_no=3;  while (corner_no < p_polyline.plaline_len(-1)) {    boolean corner_removed=false;    PlaPoint a_point=p_polyline.corner(corner_no);    if (!(a_point instanceof PlaPointInt)) {      return p_polyline;    }    curr_corner[3]=(PlaPointInt)a_point;    if (curr_corner[1].equals(curr_corner[2]) || corner_no < p_polyline.plaline_len(-2) && curr_corner[3].side_of(curr_corner[1],curr_corner[2]) == PlaSide.COLLINEAR) {      ++corner_no;      curr_corner[2]=curr_corner[3];      curr_corner_in_clip_shape[2]=curr_corner_in_clip_shape[3];      if (corner_no < p_polyline.plaline_len(-1)) {        a_point=p_polyline.corner(corner_no);        if (!(a_point instanceof PlaPointInt)) {          return p_polyline;        }        curr_corner[3]=(PlaPointInt)a_point;      }      polyline_changed=true;    }    curr_corner_in_clip_shape[3]=true;    if (curr_corner_in_clip_shape[1] && curr_corner_in_clip_shape[2] && curr_corner_in_clip_shape[3]) {      PlaVectorInt delta=curr_corner[3].difference_by(curr_corner[2]);      new_corner=curr_corner[1].translate_by(delta);      if (curr_corner[3].equals(curr_corner[2])) {        corner_removed=true;      } else       if (new_corner.side_of(curr_corner[0],curr_corner[1]) == PlaSide.COLLINEAR) {        curr_check_points[0]=new_corner;        curr_check_points[1]=curr_corner[1];        Polyline check_polyline=new Polyline(curr_check_points);        if (check_polyline.plaline_len() == 3) {          ShapeTile shape_to_check=check_polyline.offset_shape(curr_half_width,0);          if (r_board.check_trace(shape_to_check,curr_layer,curr_net_no_arr,curr_cl_type,contact_pins)) {            curr_check_points[1]=curr_corner[3];            if (curr_check_points[0].equals(curr_check_points[1])) {              corner_removed=true;            } else {              check_polyline=new Polyline(curr_check_points);              if (check_polyline.plaline_len() == 3) {                shape_to_check=check_polyline.offset_shape(curr_half_width,0);                corner_removed=r_board.check_trace(shape_to_check,curr_layer,curr_net_no_arr,curr_cl_type,contact_pins);              } else {                corner_removed=true;              }            }          }        } else {          corner_removed=true;        }      }    }    if (!corner_removed && curr_corner_in_clip_shape[0] && curr_corner_in_clip_shape[1]&& curr_corner_in_clip_shape[2]) {      PlaVectorInt delta=curr_corner[0].difference_by(curr_corner[1]);      new_corner=curr_corner[2].translate_by(delta);      if (curr_corner[0].equals(curr_corner[1])) {        corner_removed=true;      } else       if (new_corner.side_of(curr_corner[2],curr_corner[3]) == PlaSide.COLLINEAR) {        curr_check_points[0]=new_corner;        curr_check_points[1]=curr_corner[0];        Polyline check_polyline=new Polyline(curr_check_points);        if (check_polyline.plaline_len() == 3) {          ShapeTile shape_to_check=check_polyline.offset_shape(curr_half_width,0);          if (r_board.check_trace(shape_to_check,curr_layer,curr_net_no_arr,curr_cl_type,contact_pins)) {            curr_check_points[1]=curr_corner[2];            check_polyline=new Polyline(curr_check_points);            if (check_polyline.plaline_len() == 3) {              shape_to_check=check_polyline.offset_shape(curr_half_width,0);              corner_removed=r_board.check_trace(shape_to_check,curr_layer,curr_net_no_arr,curr_cl_type,contact_pins);            } else {              corner_removed=true;            }          }        } else {          corner_removed=true;        }      }    }    if (corner_removed) {      polyline_changed=true;      curr_corner[1]=new_corner;      curr_corner_in_clip_shape[1]=true;      r_board.changed_area.join(new_corner.to_float(),curr_layer);      r_board.changed_area.join(curr_corner[1].to_float(),curr_layer);      r_board.changed_area.join(curr_corner[2].to_float(),curr_layer);    } else {      new_corners[new_corner_count]=curr_corner[1];      ++new_corner_count;      curr_corner[0]=curr_corner[1];      curr_corner[1]=curr_corner[2];      curr_corner_in_clip_shape[0]=curr_corner_in_clip_shape[1];      curr_corner_in_clip_shape[1]=curr_corner_in_clip_shape[2];    }    curr_corner[2]=curr_corner[3];    curr_corner_in_clip_shape[2]=curr_corner_in_clip_shape[3];    ++corner_no;  }  if (!polyline_changed) {    return p_polyline;  }  PlaPointInt adjusted_corners[]=new PlaPointInt[new_corner_count + 2];  for (int i=0; i < new_corner_count; ++i) {    adjusted_corners[i]=new_corners[i];  }  adjusted_corners[new_corner_count]=curr_corner[1];  adjusted_corners[new_corner_count + 1]=curr_corner[2];  Polyline result=new Polyline(adjusted_corners);  return result;}  }
class C{  @Override protected boolean doDelete(File fileToDelete) throws IOException {  FileUtils.forceDelete(fileToDelete);  return true;}  }
class C{  public void addMenuDragMouseListener(MenuDragMouseListener l){  listenerList.add(MenuDragMouseListener.class,l);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(notationgetpublicid.class,args);}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.NameIDFormatElement createNameIDFormatElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.NameIDFormatElementImpl();}  }
class C{  @Deprecated public static LogStream log(String name){  LogStream stream;synchronized (known) {    stream=known.get(name);    if (stream == null) {      stream=new LogStream(name,defaultStream);    }    known.put(name,stream);  }  return stream;}  }
class C{  public void destroySession(String opsId) throws ServerException {  try {    final Token opsToken=cts.read(opsId);    if (opsToken == null) {      throw new CoreTokenException("Unable to find id_token");    }    JsonValue idTokenUserSessionToken=tokenAdapter.fromToken(opsToken);    cts.delete(opsId);    String sessionId=getFirstItem(idTokenUserSessionToken.get(OAuth2Constants.JWTTokenParams.LEGACY_OPS).asCollection(String.class));    if (sessionId != null) {      final SSOToken token=tokenManager.createSSOToken(sessionId);      tokenManager.destroyToken(token);    }  } catch (  CoreTokenException e) {    logger.error("Unable to get id_token meta data",e);    throw new ServerException("Unable to get id_token meta data");  }catch (  Exception e) {    logger.error("Unable to get SsoTokenManager",e);    throw new ServerException("Unable to get SsoTokenManager");  }}  }
class C{  public static void cassandraSetupComplete(){  lock.countDown();}  }
class C{  public synchronized void initializeGeneralTopics(){  yaml=new HelpYamlReader(server);  for (  HelpTopic topic : yaml.getGeneralTopics()) {    addTopic(topic);  }  for (  HelpTopic topic : yaml.getIndexTopics()) {    if (topic.getName().equals("Default")) {      defaultTopic=topic;    } else {      addTopic(topic);    }  }}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  if (closed) {    return -1;  } else   if (ioException != null) {    throw ioException;  }  if ((entryBytes == null || !entryBytes.hasRemaining()) && !getNextEntry()) {    closed=true;    return -1;  }  int bytesRead=Math.min(len,entryBytes.remaining());  entryBytes.get(b,off,bytesRead);  return bytesRead;}  }
class C{  public void assertGenerateSnippet(@Nonnull String json,@Nonnull String responseText,@CheckForNull String referer) throws Exception {  JenkinsRule.WebClient wc=r.createWebClient();  WebRequest wrs=new WebRequest(new URL(r.getURL(),Snippetizer.GENERATE_URL),HttpMethod.POST);  if (referer != null) {    wrs.setAdditionalHeader("Referer",referer);  }  List<NameValuePair> params=new ArrayList<NameValuePair>();  params.add(new NameValuePair("json",json));  params.add(new NameValuePair(r.jenkins.getCrumbIssuer().getDescriptor().getCrumbRequestField(),r.jenkins.getCrumbIssuer().getCrumb(null)));  wrs.setRequestParameters(params);  WebResponse response=wc.getPage(wrs).getWebResponse();  assertEquals("text/plain",response.getContentType());  assertEquals(responseText,response.getContentAsString().trim());}  }
class C{  public FileMessage readMessage(FileMessage f) throws IllegalArgumentException, IOException {  checkState(false);  int length=in.read(data);  if (length == -1) {    cleanup();    return null;  } else {    f.setData(data,length);    f.setTotalNrOfMsgs(totalNrOfMessages);    f.setMessageNumber(++nrOfMessagesProcessed);    return f;  }}  }
class C{  public void insert_octet(byte value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_octet",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_octet(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  static StepPattern loadSteps(MatchPatternIterator mpi,Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException {  if (DEBUG_PATTERN_CREATION) {    System.out.println("================");    System.out.println("loadSteps for: " + compiler.getPatternString());  }  int stepType;  StepPattern step=null;  StepPattern firstStep=null, prevStep=null;  int analysis=analyze(compiler,stepOpCodePos,stepIndex);  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {    step=createDefaultStepPattern(compiler,stepOpCodePos,mpi,analysis,firstStep,prevStep);    if (null == firstStep) {      firstStep=step;    } else {      step.setRelativePathPattern(prevStep);    }    prevStep=step;    stepOpCodePos=compiler.getNextStepPos(stepOpCodePos);    if (stepOpCodePos < 0)     break;  }  int axis=Axis.SELF;  int paxis=Axis.SELF;  StepPattern tail=step;  for (StepPattern pat=step; null != pat; pat=pat.getRelativePathPattern()) {    int nextAxis=pat.getAxis();    pat.setAxis(axis);    int whatToShow=pat.getWhatToShow();    if (whatToShow == DTMFilter.SHOW_ATTRIBUTE || whatToShow == DTMFilter.SHOW_NAMESPACE) {      int newAxis=(whatToShow == DTMFilter.SHOW_ATTRIBUTE) ? Axis.ATTRIBUTE : Axis.NAMESPACE;      if (isDownwardAxisOfMany(axis)) {        StepPattern attrPat=new StepPattern(whatToShow,pat.getNamespace(),pat.getLocalName(),newAxis,0);        XNumber score=pat.getStaticScore();        pat.setNamespace(null);        pat.setLocalName(NodeTest.WILD);        attrPat.setPredicates(pat.getPredicates());        pat.setPredicates(null);        pat.setWhatToShow(DTMFilter.SHOW_ELEMENT);        StepPattern rel=pat.getRelativePathPattern();        pat.setRelativePathPattern(attrPat);        attrPat.setRelativePathPattern(rel);        attrPat.setStaticScore(score);        if (Axis.PRECEDING == pat.getAxis())         pat.setAxis(Axis.PRECEDINGANDANCESTOR); else         if (Axis.DESCENDANT == pat.getAxis())         pat.setAxis(Axis.DESCENDANTORSELF);        pat=attrPat;      } else       if (Axis.CHILD == pat.getAxis()) {        pat.setAxis(Axis.ATTRIBUTE);      }    }    axis=nextAxis;    tail=pat;  }  if (axis < Axis.ALL) {    StepPattern selfPattern=new ContextMatchStepPattern(axis,paxis);    XNumber score=tail.getStaticScore();    tail.setRelativePathPattern(selfPattern);    tail.setStaticScore(score);    selfPattern.setStaticScore(score);  }  if (DEBUG_PATTERN_CREATION) {    System.out.println("Done loading steps: " + step.toString());    System.out.println("");  }  return step;}  }
class C{  public UnsupportedGrantTypeException(String message){  super(400,"unsupported_grant_type",message);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  RMRealmModel model=(RMRealmModel)getModel();  String realm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);  AMPropertySheet ps=(AMPropertySheet)getChild(REALM_PROPERTIES);  try {    Map orig=model.getAttributeValues(realm);    Map values=ps.getAttributeValues(orig,true,true,model);    model.setAttributeValues(realm,values);    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","message.updated");  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public synchronized void clearCache(){  idRepoCache.invalidateAll();  initializeCache();}  }
class C{  public final void interrupt(){  int ngroupsSnapshot;  ThreadGroup[] groupsSnapshot;synchronized (this) {    checkAccess();    for (int i=0; i < nthreads; i++) {      threads[i].interrupt();    }    ngroupsSnapshot=ngroups;    if (groups != null) {      groupsSnapshot=Arrays.copyOf(groups,ngroupsSnapshot);    } else {      groupsSnapshot=null;    }  }  for (int i=0; i < ngroupsSnapshot; i++) {    groupsSnapshot[i].interrupt();  }}  }
class C{  private synchronized void updateThreshold(CounterMonitorObservedObject o){  if (((Number)o.getDerivedGauge()).longValue() >= o.getThreshold().longValue()) {    if (offset.longValue() > 0L) {      long threshold_value=o.getThreshold().longValue();      while (((Number)o.getDerivedGauge()).longValue() >= threshold_value) {        threshold_value+=offset.longValue();      }switch (o.getType()) {case INTEGER:        o.setThreshold(Integer.valueOf((int)threshold_value));      break;case BYTE:    o.setThreshold(Byte.valueOf((byte)threshold_value));  break;case SHORT:o.setThreshold(Short.valueOf((short)threshold_value));break;case LONG:o.setThreshold(Long.valueOf(threshold_value));break;default :MONITOR_LOGGER.logp(Level.FINEST,CounterMonitor.class.getName(),"updateThreshold","the threshold type is invalid");break;}if (!differenceMode) {if (modulus.longValue() > 0L) {if (o.getThreshold().longValue() > modulus.longValue()) {o.setModulusExceeded(true);o.setDerivedGaugeExceeded((Number)o.getDerivedGauge());}}}o.setEventAlreadyNotified(false);} else {o.setModulusExceeded(true);o.setDerivedGaugeExceeded((Number)o.getDerivedGauge());}}}  }
class C{  public void paintToolBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  private static void sort(float[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        float ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        float a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      float last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    float t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    float t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    float t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    float t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    float pivot1=a[e2];    float pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      float ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        float ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=a[great];            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    float pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      float ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  public void run(){  for (; ; ) {    bindStreams();    copyData();  }}  }
class C{  public static NSObject parse(File f) throws IOException, ParseException {  return parse(new FileInputStream(f));}  }
class C{  public TRANSACTION_MODE(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public static boolean isFloat(final String txt){  try {    Float.parseFloat(txt);    return true;  } catch (  final Exception e) {    return false;  }}  }
class C{  @Override public boolean isEnabled(int position){  return position < data.size();}  }
class C{  private static int stopWindowsService(OutputStream outStream,OutputStream errStream){  NullOutputStream.wrapOrNullStream(outStream);  PrintStream err=NullOutputStream.wrapOrNullStream(errStream);  JDKLogging.disableLogging();  String serviceName=ConfigureWindowsService.getServiceName();  if (serviceName == null) {    printWrappedText(err,ERR_WINDOWS_SERVICE_NOT_FOUND.get());    return SERVICE_NOT_FOUND;  }  String[] cmd;  if (hasUAC()) {    cmd=new String[]{ConfigureWindowsService.getLauncherBinaryFullPath(),ConfigureWindowsService.LAUNCHER_OPTION,ConfigureWindowsService.getLauncherAdministratorBinaryFullPath(),ConfigureWindowsService.LAUNCHER_OPTION,"net","stop",serviceName};  } else {    cmd=new String[]{"net","stop",serviceName};  }  try {switch (Runtime.getRuntime().exec(cmd).waitFor()) {case 0:      return SERVICE_STOP_SUCCESSFUL;case 2:    return SERVICE_STOP_SUCCESSFUL;default :  return SERVICE_STOP_ERROR;}} catch (Throwable t) {printWrappedText(err,ERR_WINDOWS_SERVICE_STOP_ERROR.get());printWrappedText(err,"Exception:" + t);return SERVICE_STOP_ERROR;}}  }
class C{  public boolean textareaUI(String opt){  String shortName=getShortOptionName(opt);  return !textBoxUI.contains(opt) && (!shortName.equals(shortName.toLowerCase()) || textAreaUI.contains(opt));}  }
class C{  @Override public boolean accept(File file){  String name=file.getName();  for (  String prefix : this.prefixes) {    if (caseSensitivity.checkStartsWith(name,prefix)) {      return true;    }  }  return false;}  }
class C{  @SuppressWarnings("unchecked") @Test public void testCreateLDAPListenerWithCustomClassLoader() throws Exception {  Options options=defaultOptions().set(TRANSPORT_PROVIDER_CLASS_LOADER,Thread.currentThread().getContextClassLoader());  LDAPListener listener=new LDAPListener(findFreeSocketAddress(),mock(ServerConnectionFactory.class),options);  listener.close();}  }
class C{  public SocketSecurityException(String s,Exception ex){  super(s,ex);}  }
class C{  public void testCompareLessScale1(){  String a="12380964839238475457356735674573563567890295784902768787678287";  int aScale=18;  String b="4573563567890295784902768787678287";  int bScale=28;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  int result=1;  assertEquals("incorrect result",result,aNumber.compareTo(bNumber));}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  if (DTM.NULL == m_lastFetched) {    resetProximityPositions();  }  int next;  org.apache.xpath.VariableStack vars;  int savedStart;  if (-1 != m_stackFrame) {    vars=m_execContext.getVarStack();    savedStart=vars.getStackFrame();    vars.setStackFrame(m_stackFrame);  } else {    vars=null;    savedStart=0;  }  try {    do {      if (0 == m_extendedTypeID) {        next=m_lastFetched=(DTM.NULL == m_lastFetched) ? m_traverser.first(m_context) : m_traverser.next(m_context,m_lastFetched);      } else {        next=m_lastFetched=(DTM.NULL == m_lastFetched) ? m_traverser.first(m_context,m_extendedTypeID) : m_traverser.next(m_context,m_lastFetched,m_extendedTypeID);      }      if (DTM.NULL != next) {        if (DTMIterator.FILTER_ACCEPT == acceptNode(next))         break; else         continue;      } else       break;    } while (next != DTM.NULL);    if (DTM.NULL != next) {      m_pos++;      return next;    } else {      m_foundLast=true;      return DTM.NULL;    }  }  finally {    if (-1 != m_stackFrame) {      vars.setStackFrame(savedStart);    }  }}  }
class C{  private boolean connect_to_target(PlaPointInt p_from_point){  if (nearest_target_item != null && target_set != null && !target_set.contains(nearest_target_item)) {    nearest_target_item=null;  }  if (nearest_target_item == null || !nearest_target_item.shares_net_no(net_nos)) {    return false;  }  boolean route_completed=false;  PlaPointInt connection_point=null;  if (nearest_target_item instanceof BrdAbit) {    BrdAbit target=(BrdAbit)nearest_target_item;    connection_point=target.center_get();  } else   if (nearest_target_item instanceof BrdTracep) {    return r_board.connect_to_trace(p_from_point,(BrdTracep)nearest_target_item,pen_half_width_arr[layer_active_no],clearance_class);  } else   if (nearest_target_item instanceof BrdAreaConduction) {    connection_point=p_from_point;  }  if (connection_point != null) {    route_completed=itera_connect(p_from_point,connection_point);  }  return route_completed;}  }
class C{  public static void replaceAttributeSchema(String serviceName,String subSchemaName,String schemaType,String attributeName,SSOToken adminToken,Node attributeSchemaNode) throws UpgradeException {  ServiceSchema ss=getServiceSchema(serviceName,subSchemaName,schemaType,adminToken);  replaceAttributeSchema(ss,attributeName,attributeSchemaNode);}  }
class C{  public Builder requiredAttributes(final Collection<String> attributeNamesOrOIDs){  this.requiredAttributeOIDs.addAll(attributeNamesOrOIDs);  return this;}  }
class C{  protected HashAttributeSet(AttributeSet attributes,Class<?> interfaceName){  myInterface=interfaceName;  if (attributes != null) {    Attribute[] attribArray=attributes.toArray();    int n=attribArray == null ? 0 : attribArray.length;    for (int i=0; i < n; ++i) {      add(attribArray[i]);    }  }}  }
class C{  public void return_from_state(){  if (board_is_read_only)   return;  StateInteractive new_state=interactive_state.complete();  if (new_state != interactive_state) {    set_interactive_state(new_state);    repaint();  }}  }
class C{  public boolean isAmbient(){  return ambient;}  }
class C{  public void removeShutdownListener(ShutdownListener listener) throws IllegalMonitorStateException {  if (acquireValidLock()) {    try {      List<ShutdownPriority> priorities=ShutdownPriority.getPriorities();      for (      ShutdownPriority priority : priorities) {        int index=(priority).getIntValue();        if (listeners[index - 1].remove(listener)) {          break;        }      }    }  finally {      releaseLockAndNotify();    }  } else {    throw new IllegalMonitorStateException("Failed to acquire lock unregistering with ShutdownListener");  }}  }
class C{  public void addSeparator(Dimension size){  JToolBar.Separator s=new JToolBar.Separator(size);  add(s);}  }
class C{  @SuppressWarnings("unchecked") public CompositeFileComparator(Comparator<File>... delegates){  if (delegates == null) {    this.delegates=(Comparator<File>[])NO_COMPARATORS;  } else {    this.delegates=(Comparator<File>[])new Comparator<?>[delegates.length];    System.arraycopy(delegates,0,this.delegates,0,delegates.length);  }}  }
class C{  public static void logUnbind(UnbindOperation unbindOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logUnbind(unbindOperation);  }}  }
class C{  public Token tokenFromEntry(Entry entry){  Map<CoreTokenField,Object> map=mapFromEntry(entry);  String tokenId=(String)map.get(CoreTokenField.TOKEN_ID);  TokenType type=(TokenType)map.get(CoreTokenField.TOKEN_TYPE);  Token token=new Token(tokenId,type);  for (  Map.Entry<CoreTokenField,Object> e : map.entrySet()) {    CoreTokenField key=e.getKey();    Object value=e.getValue();    if (Token.isFieldReadOnly(key)) {      continue;    }    if (Collection.class.isAssignableFrom(value.getClass())) {      Collection collection=(Collection)value;      for (      Object content : collection) {        token.setMultiAttribute(key,content);      }    } else {      token.setAttribute(key,value);    }  }  return token;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.EncryptionPropertyElement createEncryptionPropertyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.EncryptionPropertyElementImpl();}  }
class C{  public boolean isDescendantOf(final ObjectClass objectClass){  for (  final ObjectClass sup : superiorClasses) {    if (sup.equals(objectClass) || sup.isDescendantOf(objectClass)) {      return true;    }  }  return false;}  }
class C{  public void terminateServer(){  process.destroy();}  }
class C{  @Override public void onChildViewDetachedFromWindow(View view){  final RecyclerView.ViewHolder holder=recyclerView.getChildViewHolder(view);  if (holder == null || !(holder instanceof SwipeOpenViewHolder)) {    return;  }  final SwipeOpenViewHolder swipeHolder=(SwipeOpenViewHolder)holder;  if (prevSelected == swipeHolder) {    prevSelected=null;  }  if (selected != null && swipeHolder == selected) {    select(null,ACTION_STATE_IDLE);  } else {    callback.clearView(recyclerView,swipeHolder);    endRecoverAnimation(swipeHolder,false);  }}  }
class C{  public static void registerAccountStatusNotificationHandler(DN handlerDN,AccountStatusNotificationHandler<?> handler){  directoryServer.accountStatusNotificationHandlers.put(handlerDN,handler);}  }
class C{  public boolean isAssigned(){  return this.isAssigned;}  }
class C{  public void addResourceEnvRef(ContextResourceEnvRef resourceEnvRef){  Reference ref=new ResourceEnvRef(resourceEnvRef.getType());  Iterator<String> params=resourceEnvRef.listProperties();  while (params.hasNext()) {    String paramName=params.next();    String paramValue=(String)resourceEnvRef.getProperty(paramName);    StringRefAddr refAddr=new StringRefAddr(paramName,paramValue);    ref.add(refAddr);  }  try {    if (log.isDebugEnabled())     log.debug("  Adding resource env ref " + resourceEnvRef.getName());    createSubcontexts(envCtx,resourceEnvRef.getName());    envCtx.bind(resourceEnvRef.getName(),ref);  } catch (  NamingException e) {    log.error(sm.getString("naming.bindFailed",e));  }}  }
class C{  private void updateFont(Font font){  StyledDocument doc=(StyledDocument)getComponent().getDocument();  Style style=doc.getStyle(StyleContext.DEFAULT_STYLE);  if (style == null) {    return;  }  String fontFamily=(String)style.getAttribute(StyleConstants.FontFamily);  Integer fontSize=(Integer)style.getAttribute(StyleConstants.FontSize);  Boolean isBold=(Boolean)style.getAttribute(StyleConstants.Bold);  Boolean isItalic=(Boolean)style.getAttribute(StyleConstants.Italic);  Font fontAttribute=(Font)style.getAttribute(FONT_ATTRIBUTE_KEY);  if (font == null) {    if (fontFamily != null) {      style.removeAttribute(StyleConstants.FontFamily);    }    if (fontSize != null) {      style.removeAttribute(StyleConstants.FontSize);    }    if (isBold != null) {      style.removeAttribute(StyleConstants.Bold);    }    if (isItalic != null) {      style.removeAttribute(StyleConstants.Italic);    }    if (fontAttribute != null) {      style.removeAttribute(FONT_ATTRIBUTE_KEY);    }  } else {    if (!font.getName().equals(fontFamily)) {      StyleConstants.setFontFamily(style,font.getName());    }    if (fontSize == null || fontSize.intValue() != font.getSize()) {      StyleConstants.setFontSize(style,font.getSize());    }    if (isBold == null || isBold.booleanValue() != font.isBold()) {      StyleConstants.setBold(style,font.isBold());    }    if (isItalic == null || isItalic.booleanValue() != font.isItalic()) {      StyleConstants.setItalic(style,font.isItalic());    }    if (!font.equals(fontAttribute)) {      style.addAttribute(FONT_ATTRIBUTE_KEY,font);    }  }}  }
class C{  public void clear_add_field(){  if (write_protected)   return;  statusPanel.add_message.setText(EMPTY);  prev_target_layer_name=EMPTY;}  }
class C{  public Collection<PartialToken> attributeQuery(final TokenFilter filter) throws CoreTokenException, IllegalArgumentException {  ResultHandler<Collection<PartialToken>,CoreTokenException> handler=handlerFactory.getPartialQueryHandler();  try {    attributeQueryWithHandler(filter,handler);    Collection<PartialToken> partialTokens=handler.getResults();    Collection<PartialToken> results=new ArrayList<>();    if (filter.getReturnFields().contains(CoreTokenField.BLOB)) {      for (      PartialToken p : partialTokens) {        try {          byte[] value=p.getValue(CoreTokenField.BLOB);          results.add(new PartialToken(p,CoreTokenField.BLOB,strategy.reverse(value)));        } catch (        TokenStrategyFailedException e) {          throw new CoreTokenException("Failed to reverse Blob strategy",e);        }      }    } else {      results=partialTokens;    }    debug("AttributeQuery: returned {0} Partial Tokens: {1}",results.size(),filter);    return results;  } catch (  CoreTokenException e) {    throw new QueryFailedException(filter,e);  }}  }
class C{  public AccessibleState[] toArray(){  if (states == null) {    return new AccessibleState[0];  } else {    AccessibleState[] stateArray=new AccessibleState[states.size()];    for (int i=0; i < stateArray.length; i++) {      stateArray[i]=(AccessibleState)states.elementAt(i);    }    return stateArray;  }}  }
class C{  ZipEntry(){}  }
class C{  public AssignableDynamicGroup(CreationTemplate template,AttrSet attrSet) throws UMSException {  super(template,attrSet);}  }
class C{  @Override public String encodeRedirectURL(String url){  if (isEncodeable(toAbsolute(url))) {    return (toEncoded(url,request.getSessionInternal().getIdInternal()));  } else {    return (url);  }}  }
class C{  public void testLongValuePositive1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,120,-34,-12,45,98};  long result=3268209772258930018L;  long aNumber=new BigInteger(aBytes).longValue();  assertTrue(aNumber == result);}  }
class C{  private void writeToFile(final String input,final File output) throws IOException {  InputStream is=new ByteArrayInputStream(input.getBytes(Charset.forName("UTF-8")));  writeToFile(is,output);}  }
class C{  protected void sendCrossContextSession(){  List<DeltaSession> sessions=crossContextSessions.get();  if (sessions != null && sessions.size() > 0) {    for (Iterator<DeltaSession> iter=sessions.iterator(); iter.hasNext(); ) {      Session session=iter.next();      if (log.isDebugEnabled()) {        log.debug(sm.getString("ReplicationValve.crossContext.sendDelta",session.getManager().getContext().getName()));      }      sendMessage(session,(ClusterManager)session.getManager());      if (doStatistics()) {        nrOfCrossContextSendRequests++;      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  NamedNodeMap notations;  Attr attr;  Node newNode;  doc=(Document)load("staffNS",true);  docType=doc.getDoctype();  entities=docType.getEntities();  notations=docType.getNotations();  attr=doc.createAttributeNS("http://www.w3.org/DOM/Test","test");{    boolean success=false;    try {      newNode=entities.setNamedItemNS(attr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR_entities",success);  }{    boolean success=false;    try {      newNode=notations.setNamedItemNS(attr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR_notations",success);  }}  }
class C{  public java.lang.String toString(){  StringBuffer sb=new StringBuffer(1000);  sb.append("<InsertEntry xmlns=\"").append(DiscoConstants.DISCO_NS).append("\">");  if (offering != null) {    sb.append(offering);  }  if (any != null) {    Iterator iter=any.iterator();    while (iter.hasNext()) {      sb.append(iter.next().toString());    }  }  sb.append("</InsertEntry>");  return sb.toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentitynodetype.class,args);}  }
class C{  public boolean isNullable(){  return nullable;}  }
class C{  protected void testTask(Entry taskEntry,TaskState expectedState,int timeoutInSec) throws Exception {  AddOperation addOperation=getRootConnection().processAdd(taskEntry);  assertEquals(addOperation.getResultCode(),ResultCode.SUCCESS,"Add of the task definition was not successful");  Entry resultEntry=getCompletedTaskEntry(taskEntry.getName(),timeoutInSec);  String stateString=resultEntry.parseAttribute(ATTR_TASK_STATE).asString();  TaskState taskState=TaskState.fromString(stateString);  assertEquals(taskState,expectedState,"The task completed in an unexpected state");  Set<String> logMessages=resultEntry.parseAttribute(ATTR_TASK_LOG_MESSAGES).asSetOfString();  assertTrue(taskState == TaskState.COMPLETED_SUCCESSFULLY || !logMessages.isEmpty(),"No log messages were written to the task entry on a failed task.\n" + "taskState=" + taskState + "logMessages size="+ logMessages.size()+ " and content=["+ logMessages+ "]");}  }
class C{  public UnableToRedirectException(String message,Throwable cause){  super(message,cause);}  }
class C{  public StatusCode createStatusCode() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.STATUS_CODE);  if (obj == null) {    return new StatusCodeImpl();  } else {    return (StatusCode)obj;  }}  }
class C{  public static CountryPicker newInstance(String dialogTitle){  CountryPicker picker=new CountryPicker();  Bundle bundle=new Bundle();  bundle.putString("dialogTitle",dialogTitle);  picker.setArguments(bundle);  return picker;}  }
class C{  public boolean isMetaphoneEqual(String str1,String str2){  return metaphone(str1).equals(metaphone(str2));}  }
class C{  public Arg(QName qname,XObject val,boolean isFromWithParam){  m_qname=qname;  m_val=val;  m_isFromWithParam=isFromWithParam;  m_isVisible=!isFromWithParam;  m_expression=null;}  }
class C{  ElementInfo(Element element,ElementInfo parent){  this.element=element;  this.parent=parent;  isValid=false;  canBeValid=true;}  }
class C{  public void close(){synchronized (this) {    if (!closing) {      closing=true;      try {        textOut.close();        out.close();      } catch (      IOException x) {        trouble=true;      }      textOut=null;      charOut=null;      out=null;    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment documentFragmentNode;  int nodeType;  doc=(Document)load("staff",true);  documentFragmentNode=doc.createDocumentFragment();  nodeType=(int)documentFragmentNode.getNodeType();  assertEquals("nodeDocumentFragmentNodeTypeAssert1",11,nodeType);}  }
class C{  public static void convertToASCII(File in,File out) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {  NSObject root=parse(in);  if (root instanceof NSDictionary) {    saveAsASCII((NSDictionary)root,out);  } else   if (root instanceof NSArray) {    saveAsASCII((NSArray)root,out);  } else {    throw new PropertyListFormatException("The root of the given input property list " + "is neither a Dictionary nor an Array!");  }}  }
class C{  public static DataFlavor decodeDataFlavor(String nat) throws ClassNotFoundException {  String retval_str=SystemFlavorMap.decodeJavaMIMEType(nat);  return (retval_str != null) ? new DataFlavor(retval_str) : null;}  }
class C{  public Element toElement() throws AuthnSvcException {  Document doc=null;  try {    doc=XMLUtils.newDocument();  } catch (  Exception ex) {    AuthnSvcUtils.debug.error("SASLRequest:toElement",ex);    throw new AuthnSvcException(ex.getMessage());  }  Element saslReqE=doc.createElementNS(AuthnSvcConstants.NS_AUTHN_SVC,AuthnSvcConstants.PTAG_SASL_REQUEST);  saslReqE.setAttributeNS(AuthnSvcConstants.NS_XML,AuthnSvcConstants.XMLNS_AUTHN_SVC,AuthnSvcConstants.NS_AUTHN_SVC);  saslReqE.setAttributeNS(AuthnSvcConstants.NS_XML,AuthnSvcConstants.XMLNS_PROTOCOLS_SCHEMA,AuthnSvcConstants.NS_PROTOCOLS_SCHEMA);  saslReqE.setAttributeNS(null,AuthnSvcConstants.ATTR_MECHANISM,mechanism);  if (authzID != null) {    saslReqE.setAttributeNS(null,AuthnSvcConstants.ATTR_AUTHZ_ID,authzID);  }  if (advisoryAuthnID != null) {    saslReqE.setAttributeNS(null,AuthnSvcConstants.ATTR_ADVISORY_AUTHN_ID,advisoryAuthnID);  }  if (id != null) {    saslReqE.setAttributeNS(null,AuthnSvcConstants.ATTR_id,id);  }  if (data != null) {    Element dataE=doc.createElementNS(AuthnSvcConstants.NS_AUTHN_SVC,AuthnSvcConstants.PTAG_DATA);    dataE.appendChild(doc.createTextNode(Base64.encode(data)));    saslReqE.appendChild(dataE);  }  doc.appendChild(saslReqE);  return doc.getDocumentElement();}  }
class C{  @Override public void writeOut(Writer out) throws IOException {  if (writer == null) {    out.write(cb,0,nextChar);  }}  }
class C{  protected void formatCookieAsVer(final CharArrayBuffer buffer,final Cookie cookie,int version){  formatParamAsVer(buffer,cookie.getName(),cookie.getValue(),version);  if (cookie.getPath() != null) {    if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.PATH_ATTR)) {      buffer.append("; ");      formatParamAsVer(buffer,"$Path",cookie.getPath(),version);    }  }  if (cookie.getDomain() != null) {    if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.DOMAIN_ATTR)) {      buffer.append("; ");      formatParamAsVer(buffer,"$Domain",cookie.getDomain(),version);    }  }}  }
class C{  public boolean remove(Class<?> category){  return category != null && AttributeSetUtilities.verifyAttributeCategory(category,Attribute.class) != null && attrMap.remove(category) != null;}  }
class C{  protected void handleError(int ln,String msg){}  }
class C{  @Override public boolean allowedInBranch(){  return true;}  }
class C{  public void startDocument() throws SAXException {}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.CElement createCElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.CElementImpl();}  }
class C{  private void readID() throws IOException, ClassFormatException {  if (dataInputStream.readInt() != MAGIC) {    throw new ClassFormatException("It is not a Java .class file");  }}  }
class C{  public static void removeDelegationPolicyAttribute(String policyName,String attributeName,String conditionName){  String classMethod="UpgradeUtils:removeDelegationPolicyAttribute";  try {    PolicyManager pm=new PolicyManager(ssoToken,HIDDEN_REALM);    Policy policy=pm.getPolicy(policyName);    Condition cond=policy.getCondition(conditionName);    HashMap newMap=new HashMap();    if (cond != null) {      Map orig=cond.getProperties();      Iterator i=(orig.keySet()).iterator();      while (i.hasNext()) {        String key=(String)i.next();        if (!key.equals(attributeName)) {          HashSet values=(HashSet)orig.get(key);          newMap.put(key,values);        }      }      if (debug.messageEnabled()) {        debug.message(classMethod + "attributes :" + newMap);      }      cond.setProperties(newMap);      policy.replaceCondition(conditionName,cond);    }    pm.replacePolicy(policy);  } catch (  PolicyException e) {    debug.error(classMethod,e);  }catch (  SSOException e) {    debug.error(classMethod,e);  }}  }
class C{  public RDN(ASN1ObjectIdentifier oid,ASN1Encodable value){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(oid);  v.add(value);  this.values=new DERSet(new DERSequence(v));}  }
class C{  public static double convertToDouble(String rawValue) throws XMPException {  try {    if (rawValue == null || rawValue.length() == 0) {      throw new XMPException("Empty convert-string",XMPError.BADVALUE);    } else {      return Double.parseDouble(rawValue);    }  } catch (  NumberFormatException e) {    throw new XMPException("Invalid double string",XMPError.BADVALUE);  }}  }
class C{  public void draw(java.awt.Graphics p_graphics){  PlaPointFloat current_mouse_position=i_brd.get_current_mouse_position();  if (current_mouse_position == null) {    return;  }  circle_radius=circle_center.distance(current_mouse_position);  i_brd.gdi_context.draw_circle(circle_center,circle_radius,300,java.awt.Color.white,p_graphics,1);}  }
class C{  public LogoutResponse createLogoutResponse(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.LOGOUT_RESPONSE);  if (obj == null) {    return new LogoutResponseImpl();  } else {    return (LogoutResponse)obj;  }}  }
class C{  public MenuEvent(Object source){  super(source);}  }
class C{  public void testSetBitPositiveOutside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=150;  byte rBytes[]={64,0,0,0,0,0,1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void addGraceLoginUseTime(final Date date){  setDateProperty(ADD_GRACE_LOGIN_USE_TIME,date);}  }
class C{  @Override public void addRuleInstances(Digester digester){  digester.addObjectCreate(prefix + "Ejb","org.apache.tomcat.util.descriptor.web.ContextEjb");  digester.addRule(prefix + "Ejb",new SetAllPropertiesRule());  digester.addRule(prefix + "Ejb",new SetNextNamingRule("addEjb","org.apache.tomcat.util.descriptor.web.ContextEjb"));  digester.addObjectCreate(prefix + "Environment","org.apache.tomcat.util.descriptor.web.ContextEnvironment");  digester.addSetProperties(prefix + "Environment");  digester.addRule(prefix + "Environment",new SetNextNamingRule("addEnvironment","org.apache.tomcat.util.descriptor.web.ContextEnvironment"));  digester.addObjectCreate(prefix + "LocalEjb","org.apache.tomcat.util.descriptor.web.ContextLocalEjb");  digester.addRule(prefix + "LocalEjb",new SetAllPropertiesRule());  digester.addRule(prefix + "LocalEjb",new SetNextNamingRule("addLocalEjb","org.apache.tomcat.util.descriptor.web.ContextLocalEjb"));  digester.addObjectCreate(prefix + "Resource","org.apache.tomcat.util.descriptor.web.ContextResource");  digester.addRule(prefix + "Resource",new SetAllPropertiesRule());  digester.addRule(prefix + "Resource",new SetNextNamingRule("addResource","org.apache.tomcat.util.descriptor.web.ContextResource"));  digester.addObjectCreate(prefix + "ResourceEnvRef","org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef");  digester.addRule(prefix + "ResourceEnvRef",new SetAllPropertiesRule());  digester.addRule(prefix + "ResourceEnvRef",new SetNextNamingRule("addResourceEnvRef","org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef"));  digester.addObjectCreate(prefix + "ServiceRef","org.apache.tomcat.util.descriptor.web.ContextService");  digester.addRule(prefix + "ServiceRef",new SetAllPropertiesRule());  digester.addRule(prefix + "ServiceRef",new SetNextNamingRule("addService","org.apache.tomcat.util.descriptor.web.ContextService"));  digester.addObjectCreate(prefix + "Transaction","org.apache.tomcat.util.descriptor.web.ContextTransaction");  digester.addRule(prefix + "Transaction",new SetAllPropertiesRule());  digester.addRule(prefix + "Transaction",new SetNextNamingRule("setTransaction","org.apache.tomcat.util.descriptor.web.ContextTransaction"));}  }
class C{  public void test_readResolve(){  MockAttributedCharacterIteratorAttribute mac1=new MockAttributedCharacterIteratorAttribute("test");  try {    mac1.readResolve();    fail("InvalidObjectException has not been thrown");  } catch (  InvalidObjectException e) {  }  ObjectOutputStream out=null;  ObjectInputStream in=null;  try {    ByteArrayOutputStream bytes=new ByteArrayOutputStream();    out=new ObjectOutputStream(bytes);    AttributedCharacterIterator.Attribute attr1, attr2;    attr1=AttributedCharacterIterator.Attribute.LANGUAGE;    out.writeObject(attr1);    in=new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()));    try {      attr2=(AttributedCharacterIterator.Attribute)in.readObject();      assertSame("resolved incorrectly",attr1,attr2);    } catch (    IllegalArgumentException e) {      fail("Unexpected IllegalArgumentException: " + e);    }  } catch (  IOException e) {    fail("unexpected IOException" + e);  }catch (  ClassNotFoundException e) {    fail("unexpected ClassNotFoundException" + e);  } finally {    try {      if (out != null)       out.close();      if (in != null)       in.close();    } catch (    IOException e) {    }  }}  }
class C{  public HyperlinkEvent(Object source,EventType type,URL u,String desc,Element sourceElement){  super(source);  this.type=type;  this.u=u;  this.desc=desc;  this.sourceElement=sourceElement;}  }
class C{  public void testAlgorithmParameterGenerator01() throws NoSuchAlgorithmException {  try {    AlgorithmParameterGenerator.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException should be thrown");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException should be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public ModifyCommonMsg(){  super();}  }
class C{  private static LDAPFilter decodeCompoundFilter(FilterType filterType,String filterString,int startPos,int endPos) throws LDAPException {  ArrayList<RawFilter> filterComponents=new ArrayList<>();  if (startPos == endPos) {    if (filterType == FilterType.NOT) {      LocalizableMessage message=ERR_LDAP_FILTER_NOT_EXACTLY_ONE.get(filterString,startPos,endPos);      throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);    } else {      return new LDAPFilter(filterType,filterComponents,null,null,null,null,null,null,null,false);    }  }  if (filterString.charAt(startPos) != '(' || filterString.charAt(endPos - 1) != ')') {    LocalizableMessage message=ERR_LDAP_FILTER_COMPOUND_MISSING_PARENTHESES.get(filterString,startPos,endPos);    throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);  }  int pendingOpens=0;  int openPos=-1;  for (int i=startPos; i < endPos; i++) {    char c=filterString.charAt(i);    if (c == '(') {      if (openPos < 0) {        openPos=i;      }      pendingOpens++;    } else     if (c == ')') {      pendingOpens--;      if (pendingOpens == 0) {        filterComponents.add(decode(filterString,openPos,i + 1));        openPos=-1;      } else       if (pendingOpens < 0) {        LocalizableMessage message=ERR_LDAP_FILTER_NO_CORRESPONDING_OPEN_PARENTHESIS.get(filterString,i);        throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);      }    } else     if (pendingOpens <= 0) {      LocalizableMessage message=ERR_LDAP_FILTER_COMPOUND_MISSING_PARENTHESES.get(filterString,startPos,endPos);      throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);    }  }  if (pendingOpens != 0) {    LocalizableMessage message=ERR_LDAP_FILTER_NO_CORRESPONDING_CLOSE_PARENTHESIS.get(filterString,openPos);    throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);  }  if (filterType == FilterType.NOT) {    if (filterComponents.size() != 1) {      LocalizableMessage message=ERR_LDAP_FILTER_NOT_EXACTLY_ONE.get(filterString,startPos,endPos);      throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);    }    RawFilter notComponent=filterComponents.get(0);    return new LDAPFilter(filterType,null,notComponent,null,null,null,null,null,null,false);  } else {    return new LDAPFilter(filterType,filterComponents,null,null,null,null,null,null,null,false);  }}  }
class C{  protected void installDefaults(){  LookAndFeel.installBorder(splitPane,"SplitPane.border");  LookAndFeel.installColors(splitPane,"SplitPane.background","SplitPane.foreground");  LookAndFeel.installProperty(splitPane,"opaque",Boolean.TRUE);  if (divider == null)   divider=createDefaultDivider();  divider.setBasicSplitPaneUI(this);  Border b=divider.getBorder();  if (b == null || !(b instanceof UIResource)) {    divider.setBorder(UIManager.getBorder("SplitPaneDivider.border"));  }  dividerDraggingColor=UIManager.getColor("SplitPaneDivider.draggingColor");  setOrientation(splitPane.getOrientation());  Integer temp=(Integer)UIManager.get("SplitPane.dividerSize");  LookAndFeel.installProperty(splitPane,"dividerSize",temp == null ? 10 : temp);  divider.setDividerSize(splitPane.getDividerSize());  dividerSize=divider.getDividerSize();  splitPane.add(divider,JSplitPane.DIVIDER);  setContinuousLayout(splitPane.isContinuousLayout());  resetLayoutManager();  if (nonContinuousLayoutDivider == null) {    setNonContinuousLayoutDivider(createDefaultNonContinuousLayoutDivider(),true);  } else {    setNonContinuousLayoutDivider(nonContinuousLayoutDivider,true);  }  if (managingFocusForwardTraversalKeys == null) {    managingFocusForwardTraversalKeys=new HashSet<KeyStroke>();    managingFocusForwardTraversalKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,0));  }  splitPane.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,managingFocusForwardTraversalKeys);  if (managingFocusBackwardTraversalKeys == null) {    managingFocusBackwardTraversalKeys=new HashSet<KeyStroke>();    managingFocusBackwardTraversalKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,InputEvent.SHIFT_MASK));  }  splitPane.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,managingFocusBackwardTraversalKeys);}  }
class C{  public static CompareResult copyOfCompareResult(final CompareResult result){  return new CompareResultImpl(result);}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeLengthMismatchArrayAsOctetString() throws Exception {  super.testDecodeLengthMismatchArrayAsOctetString();}  }
class C{  public boolean checkMaxDegree(int value){  if (value >= ROLE_CARDINALITY_INFINITY && (maxDegree == ROLE_CARDINALITY_INFINITY || (value != ROLE_CARDINALITY_INFINITY && value <= maxDegree))) {    return true;  } else {    return false;  }}  }
class C{  protected int findNext(int from){  if (from < -1)   return -1;  final int to=this.allHeaders.length - 1;  boolean found=false;  while (!found && (from < to)) {    from++;    found=filterHeader(from);  }  return found ? from : -1;}  }
class C{  public Date(long date){  fastTime=date;}  }
class C{  public final static String formatParameters(final NameValuePair[] nvps,final boolean quote,HeaderValueFormatter formatter){  if (formatter == null)   formatter=BasicHeaderValueFormatter.DEFAULT;  return formatter.formatParameters(null,nvps,quote).toString();}  }
class C{  public void addAttribute(String key,String value){  extraSessionAttributes.put(key,value);}  }
class C{  @Override protected String toExternalForm(URL url){  StringBuilder sb=new StringBuilder();  sb.append("jar:");  sb.append(url.getFile());  String ref=url.getRef();  if (ref != null) {    sb.append(ref);  }  return sb.toString();}  }
class C{  public void close() throws IOException {  if (input != null) {    input.close();    input=null;  }}  }
class C{  public final static String formatHeaderElement(final HeaderElement elem,boolean quote,HeaderValueFormatter formatter){  if (formatter == null)   formatter=BasicHeaderValueFormatter.DEFAULT;  return formatter.formatHeaderElement(null,elem,quote).toString();}  }
class C{  public boolean isSpecified(){  return (!this.isNasSelected()) && (!this.isUserNegotiated());}  }
class C{  public int indent(){  return indent;}  }
class C{  protected void storeElementArray(PrintWriter aWriter,int indent,Object[] elements) throws Exception {  if (elements != null) {    for (int i=0; i < elements.length; i++) {      try {        storeElement(aWriter,indent,elements[i]);      } catch (      IOException ioe) {      }    }  }}  }
class C{  public static boolean isLocal(Stub stub) throws RemoteException {  if (utilDelegate != null) {    return utilDelegate.isLocal(stub);  }  return false;}  }
class C{  private void formatAndLogThrowable(LoggingLevel level,String msg,Throwable t){  if (PhotonLogger.level.id < level.id) {    return;  }  LocalDateTime dateTime=LocalDateTime.now();  String formatted=formatLogLine(level,dateTime,msg);  LoggingService.logThrowable(dateTime,t,formatted);}  }
class C{  @Override public void close(){  idx=0;  mark=0;}  }
class C{  public NoSuchFileException(String file,String other,String reason){  super(file,other,reason);}  }
class C{  public boolean hasID3v1Tag(){  return (id3v1tag != null);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SynthMenuUI();}  }
class C{  public static String queryStringFromRequest(HttpServletRequest request){  Enumeration en=request.getParameterNames();  StringBuilder buf=new StringBuilder();  boolean priorparam=false;  while (en.hasMoreElements()) {    String name=(String)en.nextElement();    String val=request.getParameter(name);    if (priorparam)     buf.append("&");    buf.append(name).append("=").append(val);    priorparam=true;  }  return buf.toString();}  }
class C{  public void removeValue(String name){  if (name == null) {    throw new IllegalArgumentException("name == null");  }  Object old=values.remove(name);  if (old instanceof SSLSessionBindingListener) {    SSLSessionBindingListener listener=(SSLSessionBindingListener)old;    listener.valueUnbound(new SSLSessionBindingEvent(this,name));  }}  }
class C{  @Override public String toString(){  return in.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  DocumentType docType=null;  DOMImplementation domImpl;  Element element;  String namespaceURI="http://www.w3.org/xml/1998/namespace ";  String qualifiedName="xml:root";  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument("http://www.w3.org/DOM/Test","dom:doc",docType);{    boolean success=false;    try {      element=newDoc.createElementNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("documentcreateelementNS06",success);  }}  }
class C{  public final void entityReference(String name) throws org.xml.sax.SAXException {  try {    final java.io.Writer writer=m_writer;    writer.write('&');    writer.write(name);    writer.write(';');  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public boolean equals(ShapeGraphicAttribute rhs){  if (rhs == null) {    return false;  }  if (this == rhs) {    return true;  }  if (fStroke != rhs.fStroke) {    return false;  }  if (getAlignment() != rhs.getAlignment()) {    return false;  }  if (!fShape.equals(rhs.fShape)) {    return false;  }  return true;}  }
class C{  public AndroidOperationQueue(String name,int priority){  this.name=name;  this.priority=priority;  bundle=new Bundle();  operationHandlerThread=new HandlerThread(name,priority);}  }
class C{  public boolean isTimedOut(Thread thread){  if (debug.messageEnabled()) {    debug.message("Timed ut hash has : " + timedOutHash);  }  if ((timedOutHash == null) || (timedOutHash.isEmpty())) {    return false;  }  try {    Boolean timedOut=(Boolean)timedOutHash.get(thread);    return timedOut.booleanValue();  } catch (  Exception e) {    return false;  }}  }
class C{  public void testKeyPairGenerator13(){  int[] keys={-1,-250,1,63,-512,-1024};  SecureRandom random=new SecureRandom();  KeyPairGenerator mKPG=new MyKeyPairGenerator2(null);  assertEquals("Algorithm must be null",mKPG.getAlgorithm(),MyKeyPairGenerator2.getResAlgorithm());  assertNull("genKeyPair() must return null",mKPG.genKeyPair());  assertNull("generateKeyPair() mut return null",mKPG.generateKeyPair());  for (int i=0; i < keys.length; i++) {    try {      mKPG.initialize(keys[i]);      fail("InvalidParameterException must be thrown (key: " + Integer.toString(keys[i]) + ")");    } catch (    InvalidParameterException e) {    }    try {      mKPG.initialize(keys[i],random);      fail("InvalidParameterException must be thrown (key: " + Integer.toString(keys[i]) + ")");    } catch (    InvalidParameterException e) {    }  }  try {    mKPG.initialize(64);  } catch (  InvalidParameterException e) {    fail("Unexpected InvalidParameterException was thrown");  }  try {    mKPG.initialize(64,null);  } catch (  InvalidParameterException e) {    fail("Unexpected InvalidParameterException was thrown");  }  try {    mKPG.initialize(null,random);  } catch (  UnsupportedOperationException e) {  }catch (  InvalidAlgorithmParameterException e) {    fail("Unexpected InvalidAlgorithmParameterException was thrown");  }}  }
class C{  public void test_getDoubleLjava_lang_ObjectI(){  double[] x={1};  double ret=0;  boolean thrown=false;  try {    ret=Array.getDouble(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,ret,0.0);  try {    ret=Array.getDouble(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.getDouble(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    ret=Array.getDouble(null,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public synchronized void storeContext(String aContextName,boolean backup,boolean externalAllowed) throws MalformedObjectNameException {  if (aContextName == null || aContextName.length() == 0) {    if (log.isErrorEnabled())     log.error("Please, call with a correct context ObjectName!");    return;  }  MBeanServer mserver=MBeanUtils.createServer();  ObjectName objectName=new ObjectName(aContextName);  if (mserver.isRegistered(objectName)) {    try {      Context aContext=(Context)mserver.getAttribute(objectName,"managedResource");      URL configFile=aContext.getConfigFile();      if (configFile != null) {        try {          StoreDescription desc=null;          desc=getRegistry().findDescription(aContext.getClass());          if (desc != null) {            boolean oldSeparate=desc.isStoreSeparate();            boolean oldBackup=desc.isBackup();            boolean oldExternalAllowed=desc.isExternalAllowed();            try {              desc.setStoreSeparate(true);              desc.setBackup(backup);              desc.setExternalAllowed(externalAllowed);              desc.getStoreFactory().store(null,-2,aContext);            }  finally {              desc.setStoreSeparate(oldSeparate);              desc.setBackup(oldBackup);              desc.setBackup(oldExternalAllowed);            }          }        } catch (        Exception e) {          log.error(e);        }      } else       log.error("Missing configFile at Context " + aContext.getPath() + " to store!");    } catch (    Exception e) {      if (log.isInfoEnabled())       log.info("Object " + aContextName + " is no a context instance or store exception",e);    }  } else   if (log.isInfoEnabled())   log.info("Context " + aContextName + " not found!");}  }
class C{  public Notification(String type,Object source,long sequenceNumber,long timeStamp){  super(source);  this.source=source;  this.type=type;  this.sequenceNumber=sequenceNumber;  this.timeStamp=timeStamp;}  }
class C{  public void callNative(String instanceId,String tasks,String callback){  if (TextUtils.isEmpty(tasks)) {    if (WXEnvironment.isApkDebugable()) {      WXLogUtils.e("[WXBridgeManager] callNative: call Native tasks is null");    }    return;  }  if (WXEnvironment.isApkDebugable()) {    mLodBuilder.append("[WXBridgeManager] callNative >>>> instanceId:").append(instanceId).append(", tasks:").append(tasks).append(", callback:").append(callback);    WXLogUtils.d(mLodBuilder.substring(0));    mLodBuilder.setLength(0);  }  long start=System.currentTimeMillis();  JSONArray array=JSON.parseArray(tasks);  if (WXSDKManager.getInstance().getSDKInstance(instanceId) != null) {    WXSDKManager.getInstance().getSDKInstance(instanceId).jsonParseTime(System.currentTimeMillis() - start);  }  int size=array.size();  if (size > 0) {    try {      JSONObject task;      for (int i=0; i < size; ++i) {        task=(JSONObject)array.get(i);        if (task != null && WXSDKManager.getInstance().getSDKInstance(instanceId) != null) {          WXModuleManager.callModuleMethod(instanceId,(String)task.get("module"),(String)task.get("method"),(JSONArray)task.get("args"));        }      }    } catch (    Exception e) {      WXLogUtils.e("[WXBridgeManager] callNative exception: " + WXLogUtils.getStackTrace(e));    }  }  if (UNDEFINED.equals(callback) || mDestroyedInstanceId.equals(instanceId)) {    return;  }  getNextTick(instanceId,callback);}  }
class C{  public void testGetNamedItemNS1() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr domesticAttr;  String attrName;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  domesticAttr=(Attr)attributes.getNamedItemNS("http://www.usa.com","domestic");  attrName=domesticAttr.getNodeName();  assertEquals("attrName","dmstc:domestic",attrName);}  }
class C{  private String cleanComment(String comment){  return stripCodeValueSentences(stripTags(convertLineSeparators(comment))).trim();}  }
class C{  public static void fill(long[] array,long value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public LDAPResult doOperation(ObjectFactory objFactory,ModifyDNRequest modifyDNRequest,List<org.opends.server.types.Control> controls) throws IOException, LDAPException, DecodeException {  LDAPResult modDNResponse=objFactory.createLDAPResult();  modDNResponse.setRequestID(modifyDNRequest.getRequestID());  ByteString dnStr=ByteString.valueOfUtf8(modifyDNRequest.getDn());  ProtocolOp op=null;  if (modifyDNRequest.getNewSuperior() != null) {    op=new ModifyDNRequestProtocolOp(dnStr,ByteString.valueOfUtf8(modifyDNRequest.getNewrdn()),modifyDNRequest.isDeleteoldrdn(),ByteString.valueOfUtf8(modifyDNRequest.getNewSuperior()));  } else {    op=new ModifyDNRequestProtocolOp(dnStr,ByteString.valueOfUtf8(modifyDNRequest.getNewrdn()),modifyDNRequest.isDeleteoldrdn());  }  LDAPMessage msg=new LDAPMessage(DSMLServlet.nextMessageID(),op,controls);  connection.getLDAPWriter().writeMessage(msg);  LDAPMessage responseMessage=connection.getLDAPReader().readMessage();  ModifyDNResponseProtocolOp modDNOp=responseMessage.getModifyDNResponseProtocolOp();  int resultCode=modDNOp.getResultCode();  LocalizableMessage errorMessage=modDNOp.getErrorMessage();  modDNResponse.setErrorMessage(errorMessage != null ? errorMessage.toString() : null);  ResultCode code=ResultCodeFactory.create(objFactory,resultCode);  modDNResponse.setResultCode(code);  return modDNResponse;}  }
class C{  public void enableDragItem(@NonNull ItemTouchHelper itemTouchHelper,int toggleViewId,boolean dragOnLongPress){  itemDragEnabled=true;  mItemTouchHelper=itemTouchHelper;  setToggleViewId(toggleViewId);  setToggleDragOnLongPress(dragOnLongPress);}  }
class C{  public void makeImmutable(){  if (isMutable) {    if (subjectConfirmationData != null) {      subjectConfirmationData.makeImmutable();    }    if (baseId != null) {      baseId.makeImmutable();    }    if (nameId != null) {      nameId.makeImmutable();    }    isMutable=false;  }}  }
class C{  public boolean removeAll(Collection<?> c){  if (!(c instanceof RegularEnumSet))   return super.removeAll(c);  RegularEnumSet<?> es=(RegularEnumSet<?>)c;  if (es.elementType != elementType)   return false;  long oldElements=elements;  elements&=~es.elements;  return elements != oldElements;}  }
class C{  public void printStackTrace(java.io.PrintStream s){  if (linkedException != null) {    linkedException.printStackTrace(s);    s.println("--------------- linked to ------------------");  }  super.printStackTrace(s);}  }
class C{  private boolean door_is_small(ExpandDoor p_door,double p_trace_width){  if (!p_door.dimension.is_line())   return false;  if (!(p_door.first_room instanceof ExpandRoomFreespaceComplete && p_door.second_room instanceof ExpandRoomFreespaceComplete))   return false;  ShapeTile door_shape=p_door.get_shape();  if (door_shape.is_empty()) {    if (r_board.debug(Mdbg.MAZE,Ldbg.DEBUG))     System.out.println(classname + "door_is_small door_shape is empty");    return true;  }  double door_length;  TraceAngleRestriction angle_restriction=r_board.brd_rules.get_trace_snap_angle();  if (angle_restriction.is_limit_45()) {    ShapeTileOctagon door_oct=door_shape.bounding_octagon();    door_length=door_oct.max_width();  } else {    PlaSegmentFloat door_line_segment=door_shape.diagonal_corner_segment();    door_length=door_line_segment.point_b.distance(door_line_segment.point_a);  }  return door_length < p_trace_width;}  }
class C{  public Builder withMessageDispatcherDuration(long duration){  config.setMessageDispatcherDuration(duration);  return this;}  }
class C{  public boolean is_contained_in_box(PlaPointFloat p_1,PlaPointFloat p_2,double p_tolerance){  if (is_NaN())   return false;  double min_x;  double max_x;  if (p_1.v_x < p_2.v_x) {    min_x=p_1.v_x;    max_x=p_2.v_x;  } else {    min_x=p_2.v_x;    max_x=p_1.v_x;  }  if (v_x < min_x - p_tolerance || v_x > max_x + p_tolerance) {    return false;  }  double min_y;  double max_y;  if (p_1.v_y < p_2.v_y) {    min_y=p_1.v_y;    max_y=p_2.v_y;  } else {    min_y=p_2.v_y;    max_y=p_1.v_y;  }  return (v_y >= min_y - p_tolerance && v_y <= max_y + p_tolerance);}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec05(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,null,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    logger.info("shootme:  dialog = " + requestEvent.getDialog());    logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());    Response response=messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);    }    logger.info("shootme:  dialogState = " + requestEvent.getDialog().getState());    this.byeSeen=true;  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  @Override public void send(HandshakeIODataStream out){  out.writeUint8(certificate_types.length);  for (int i=0; i < certificate_types.length; i++) {    out.write(certificate_types[i]);  }  int authoritiesLength=0;  for (int i=0; i < certificate_authorities.length; i++) {    authoritiesLength+=encoded_principals[i].length + 2;  }  out.writeUint16(authoritiesLength);  for (int i=0; i < certificate_authorities.length; i++) {    out.writeUint16(encoded_principals[i].length);    out.write(encoded_principals[i]);  }}  }
class C{  @Override @SuppressWarnings("FinalizeDoesntCallSuperFinalize") protected final void finalize(){}  }
class C{  public static String safeTruncate(final String value,final int length,final String filler){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  if (length == 0) {    return "";  }  if (length >= value.length()) {    return value;  }  String[] words=words(value);  StringJoiner result=new StringJoiner(" ");  int spaceCount=0;  for (  String word : words) {    if (result.length() + word.length() + filler.length()+ spaceCount > length) {      break;    } else {      result.add(word);      spaceCount++;    }  }  return append(result.toString(),filler);}  }
class C{  public boolean equals(Object obj){  return obj instanceof JapaneseImperialCalendar && super.equals(obj);}  }
class C{  private <T>Handler<AsyncResult<T>> resultHandler(RoutingContext context,Handler<T> handler){  return null;}  }
class C{  public void test_unmodifiable_toString_methods(){  ArrayList al=new ArrayList();  al.add("a");  al.add("b");  Collection uc=Collections.unmodifiableCollection(al);  assertEquals("[a, b]",uc.toString());  HashMap m=new HashMap();  m.put("one","1");  m.put("two","2");  Map um=Collections.unmodifiableMap(m);  assertTrue("{one=1, two=2}".equals(um.toString()) || "{two=2, one=1}".equals(um.toString()));}  }
class C{  public void mouseDragged(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e) || (!getSupportsAbsolutePositioning() && SwingUtilities.isMiddleMouseButton(e)))   return;  if (!scrollbar.isEnabled() || getThumbBounds().isEmpty()) {    return;  }  if (isDragging) {    setValueFrom(e);  } else {    currentMouseX=e.getX();    currentMouseY=e.getY();    updateThumbState(currentMouseX,currentMouseY);    startScrollTimerIfNecessary();  }}  }
class C{  private boolean hasConfigChanged(JsonValue existingConfig,JsonValue newConfig){  return !existingConfig.isEqualTo(newConfig);}  }
class C{  public void test_addSubjectAlternativeNameLintLbyte_array2() throws Exception {  GeneralName san0=new GeneralName(new OtherName("1.2.3.4.5",new byte[]{1,2,0,1}));  GeneralName san1=new GeneralName(1,"rfc@822.Name");  GeneralName san2=new GeneralName(2,"dNSName");  GeneralNames sans1=new GeneralNames();  sans1.addName(san0);  sans1.addName(san1);  sans1.addName(san2);  X509CertSelector selector=new X509CertSelector();  selector.addSubjectAlternativeName(0,san0.getEncodedName());  selector.addSubjectAlternativeName(1,san1.getEncodedName());  selector.addSubjectAlternativeName(2,san2.getEncodedName());  GeneralNames sans2=new GeneralNames();  sans2.addName(san0);  TestCert cert1=new TestCert(sans1);  TestCert cert2=new TestCert(sans2);  assertTrue(selector.match(cert1));  assertFalse(selector.match(cert2));  selector.setSubjectAlternativeNames(null);  GeneralName name=new GeneralName(new Name("O=Android"));  try {    selector.addSubjectAlternativeName(0,name.getEncodedName());  } catch (  IOException e) {  }}  }
class C{  public BigInteger[] generateSignature(byte[] message){  DSAParameters params=key.getParameters();  BigInteger m=calculateE(params.getQ(),message);  BigInteger k;  int qBitLength=params.getQ().bitLength();  do {    k=new BigInteger(qBitLength,random);  } while (k.compareTo(params.getQ()) >= 0);  BigInteger r=params.getG().modPow(k,params.getP()).mod(params.getQ());  k=k.modInverse(params.getQ()).multiply(m.add(((DSAPrivateKeyParameters)key).getX().multiply(r)));  BigInteger s=k.mod(params.getQ());  BigInteger[] res=new BigInteger[2];  res[0]=r;  res[1]=s;  return res;}  }
class C{  @SuppressWarnings("unchecked") public void writeTime(java.sql.Time x) throws SQLException {  attribs.add(x);}  }
class C{  public DefaultAccountProvider(String idNameAttribute){  this.idNameAttribute=idNameAttribute;}  }
class C{  private NameIdentifier generateNameIdentifier(){  try {    FSUtils.debug.message("Entered FSNameRegistrationHandler::generateNameIdentifier");    NameIdentifier nameIdentifier;    FSNameIdentifierHelper nameHelper=new FSNameIdentifierHelper(hostedConfig);    String handleName=nameHelper.createNameIdentifier();    if (handleName == null || handleName.trim().length() < 1) {      FSUtils.debug.error("FSNameIdentifierHelper::createNameIdentif" + "ier returned null");      return null;    } else {      FSUtils.debug.message("To set nameIdentifier");      nameIdentifier=new NameIdentifier(handleName,remoteEntityId);      nameIdentifier.setFormat(IFSConstants.NI_FEDERATED_FORMAT_URI);      FSUtils.debug.message("completed set nameIdentifier");      return nameIdentifier;    }  } catch (  SAMLException e) {    String[] data={FSUtils.bundle.getString(IFSConstants.REGISTRATION_FAILED_SP_NAME_IDENTIFIER)};    LogUtil.error(Level.INFO,"REGISTRATION_FAILED_SP_NAME_IDENTIFIER",data,ssoToken);    return null;  }}  }
class C{  void refreshFromDataStore() throws PolicyException {  Node xmlRootNode=null;  try {    xmlRootNode=resourceManager.getXMLRootNode(resourceType.getName());  } catch (  Exception e) {    DEBUG.error("Error reading resource index from data store ",e);    throw new PolicyException(ResBundleUtils.rbName,"error_reading_resource_index_from_data_store",null,e);  }  if (xmlRootNode != null) {    Set topIndexEntryNodeSet=XMLUtils.getChildNodes(xmlRootNode,PolicyManager.POLICY_INDEX_REFERENCE_NODE);    Iterator topIndexEntryNodes=topIndexEntryNodeSet.iterator();    while (topIndexEntryNodes.hasNext()) {      Node topIndexEntryNode=(Node)topIndexEntryNodes.next();      String resourceName=XMLUtils.getNodeAttributeValue(topIndexEntryNode,PolicyManager.POLICY_INDEX_REFERENCE_NODE_NAME_ATTR);      Set policyNames=getPolicyNames(topIndexEntryNode);      ResourceIndexEntry rie=new ResourceIndexEntry(resourceName,policyNames);      topLevelEntries.add(rie);      Set indexEntryNodeSet=XMLUtils.getChildNodes(topIndexEntryNode,PolicyManager.POLICY_INDEX_REFERENCE_NODE);      Iterator indexEntryNodes=indexEntryNodeSet.iterator();      while (indexEntryNodes.hasNext()) {        Node indexEntryNode=(Node)indexEntryNodes.next();        processIndexEntryNode(rie,indexEntryNode);      }    }  }}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider02(){  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  try {    SSLContext.getInstance(null,defaultProvider);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (protocol is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SSLContext.getInstance(invalidValues[i],defaultProvider);      fail("Expected NoSuchAlgorithmException was not thrown as expected");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public void testConstrCharIntIntMathContextException1(){  char value[]={'-','1','2','3','8','0','.','4','7','3','8','E','-','4','2','3'};  int offset=3;  int len=120;  int precision=4;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  try {    new BigDecimal(value,offset,len,mc);    fail("NumberFormatException has not been thrown");  } catch (  NumberFormatException e) {  }}  }
class C{  @Override public boolean isSecure(){  return true;}  }
class C{  public void rebind_context(org.omg.CosNaming.NameComponent[] n,org.omg.CosNaming.NamingContext nc) throws org.omg.CosNaming.NamingContextPackage.NotFound, org.omg.CosNaming.NamingContextPackage.CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("rebind_context",true);    org.omg.CosNaming.NameHelper.write($out,n);    org.omg.CosNaming.NamingContextHelper.write($out,nc);    $in=_invoke($out);    return;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"))     throw org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    rebind_context(n,nc);  } finally {    _releaseReply($in);  }}  }
class C{  public void test_getPublicExponent() throws Exception {  KeyFactory gen=KeyFactory.getInstance("RSA");  final BigInteger n=BigInteger.valueOf(3233);  final BigInteger e=BigInteger.valueOf(17);  RSAPublicKey key=(RSAPublicKey)gen.generatePublic(new RSAPublicKeySpec(n,e));  assertEquals("invalid public exponent",e,key.getPublicExponent());}  }
class C{  public static boolean isSupplemental(int c){  return (c >= 0x10000 && c <= 0x10FFFF);}  }
class C{  private void updateTexts(DocumentEvent e){  Document doc=e.getDocument();  if (doc == projectNameTextField.getDocument() || doc == projectLocationTextField.getDocument()) {    String projectName=projectNameTextField.getText();    String projectFolder=projectLocationTextField.getText();    createdFolderTextField.setText(projectFolder + File.separatorChar + projectName);  }  panel.fireChangeEvent();}  }
class C{  public boolean findAuthRole(String role){  if (role == null)   return false;  for (int i=0; i < authRoles.length; i++) {    if (role.equals(authRoles[i]))     return true;  }  return false;}  }
class C{  public AMGroup createDynamicGroup(String name,Map attributes,Map serviceNameAndAttrs) throws AMException, SSOException {  return createGroup(name,attributes,serviceNameAndAttrs,AMObject.DYNAMIC_GROUP);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.KeyNameElement createKeyNameElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.KeyNameElementImpl(value);}  }
class C{  public UpdateSessionPropertiesActionHandler(SessionPropertyWhitelist sessionPropertyWhitelist,SessionResourceUtil sessionResourceUtil){  super(sessionPropertyWhitelist,sessionResourceUtil);  this.sessionPropertyWhitelist=sessionPropertyWhitelist;}  }
class C{  public Condition createCondition(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.CONDITION,elem);  if (obj == null) {    return new ConditionImpl(elem);  } else {    return (Condition)obj;  }}  }
class C{  public DeleteOperation processDelete(DN entryDN,List<Control> controls){  DeleteOperationBasis deleteOperation=new DeleteOperationBasis(this,nextOperationID(),nextMessageID(),controls,entryDN);  deleteOperation.setInternalOperation(true);  deleteOperation.run();  return deleteOperation;}  }
class C{  public void testGetElementsByTagNameNS1() throws Throwable {  Document doc;  Element element;  NodeList elementList;  doc=(Document)load("staffNS",builder);  element=doc.getDocumentElement();  elementList=element.getElementsByTagNameNS("**","*");  assertEquals("elementgetelementsbytagnamens02",0,elementList.getLength());}  }
class C{  public boolean areTablesSet(){  return (qTables != null);}  }
class C{  public ResponseResetableException(String message,boolean resetResponse){  super(message);  this.resetResponse=resetResponse;}  }
class C{  public boolean implies(ProtectionDomain domain,Permission permission){  PermissionCollection pc;  if (pdMapping == null) {    initPolicy(this);  }synchronized (pdMapping) {    pc=pdMapping.get(domain.key);  }  if (pc != null) {    return pc.implies(permission);  }  pc=getPermissions(domain);  if (pc == null) {    return false;  }synchronized (pdMapping) {    pdMapping.put(domain.key,pc);  }  return pc.implies(permission);}  }
class C{  public Object encode(Object obj) throws EncoderException {  if (!(obj instanceof String)) {    throw new EncoderException("DoubleMetaphone encode parameter is not of type String");  }  return doubleMetaphone((String)obj);}  }
class C{  static final int drawTabbedText(View view,Segment s,int x,int y,Graphics g,TabExpander e,int startOffset){  return drawTabbedText(view,s,x,y,g,e,startOffset,null);}  }
class C{  protected CanWriteFileFilter(){}  }
class C{  public NewEncryptedID createNewEncryptedID(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NEW_ENCRYPTEDID,value);  if (obj == null) {    return new NewEncryptedIDImpl(value);  } else {    return (NewEncryptedID)obj;  }}  }
class C{  protected void childJustAddedHook(Object child,BCSChild bcsc){}  }
class C{  @Override public void run(){  isRunning=true;  schedulerThread=currentThread();  try {    while (!stopRequested) {      schedulerLock.lock();      boolean writeState=false;      long sleepTime=MAX_SLEEP_TIME;      try {        Iterator<Task> iterator=pendingTasks.iterator();        while (iterator.hasNext()) {          Task t=iterator.next();          TaskState state=shouldStart(t);          if (state == TaskState.RUNNING) {            TaskThread taskThread;            if (idleThreads.isEmpty()) {              taskThread=new TaskThread(this,nextThreadID++);              taskThread.start();            } else {              taskThread=idleThreads.removeFirst();            }            runningTasks.add(t);            activeThreads.put(t.getTaskID(),taskThread);            taskThread.setTask(t);            iterator.remove();            writeState=true;          } else           if (state == TaskState.WAITING_ON_START_TIME) {            long waitTime=t.getScheduledStartTime() - TimeThread.getTime();            sleepTime=Math.min(sleepTime,waitTime);          } else           if (state == TaskState.CANCELED_BEFORE_STARTING && t.isRecurring()) {            if (t.getScheduledStartTime() > TimeThread.getTime()) {              long waitTime=t.getScheduledStartTime() - TimeThread.getTime();              sleepTime=Math.min(sleepTime,waitTime);            } else {              TaskThread taskThread;              if (idleThreads.isEmpty()) {                taskThread=new TaskThread(this,nextThreadID++);                taskThread.start();              } else {                taskThread=idleThreads.removeFirst();              }              runningTasks.add(t);              activeThreads.put(t.getTaskID(),taskThread);              taskThread.setTask(t);            }          }          if (state != t.getTaskState()) {            t.setTaskState(state);            writeState=true;          }        }        long retentionTimeMillis=TimeUnit.SECONDS.toMillis(taskBackend.getRetentionTime());        long oldestRetainedCompletionTime=TimeThread.getTime() - retentionTimeMillis;        iterator=completedTasks.iterator();        while (iterator.hasNext()) {          Task t=iterator.next();          if (t.getCompletionTime() < oldestRetainedCompletionTime) {            iterator.remove();            tasks.remove(t.getTaskID());            writeState=true;          }        }        if (writeState) {          writeState();        }      }  finally {        schedulerLock.unlock();      }      try {        if (sleepTime > 0) {          Thread.sleep(sleepTime);        }      } catch (      InterruptedException ie) {      }    }  }  finally {    isRunning=false;  }}  }
class C{  private void doGetPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String providerAlias=request.getParameter(IFSConstants.META_ALIAS);  if (providerAlias == null || providerAlias.length() < 1) {    FSUtils.debug.error("Unable to retrieve alias, Hosted Provider. " + "Cannot process request");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("aliasNotFound"));    return;  }  if (metaManager == null) {    FSUtils.debug.error("Cannot retrieve hosted descriptor. " + "Cannot process request");    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));    return;  }  ProviderDescriptorType hostedProviderDesc=null;  BaseConfigType hostedConfig=null;  String hostedRole=null;  String hostedEntityId=null;  String realm=IDFFMetaUtils.getRealmByMetaAlias(providerAlias);  try {    hostedRole=metaManager.getProviderRoleByMetaAlias(providerAlias);    hostedEntityId=metaManager.getEntityIDByMetaAlias(providerAlias);    if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.SP)) {      hostedProviderDesc=metaManager.getSPDescriptor(realm,hostedEntityId);      hostedConfig=metaManager.getSPDescriptorConfig(realm,hostedEntityId);    } else     if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.IDP)) {      hostedProviderDesc=metaManager.getIDPDescriptor(realm,hostedEntityId);      hostedConfig=metaManager.getIDPDescriptorConfig(realm,hostedEntityId);    }    if (hostedProviderDesc == null) {      throw new IDFFMetaException((String)null);    }  } catch (  IDFFMetaException eam) {    FSUtils.debug.error("Unable to find Hosted Provider. not process request",eam);    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString(IFSConstants.FAILED_HOSTED_DESCRIPTOR));    return;  }  boolean isIDP=false;  if (hostedRole != null && hostedRole.equalsIgnoreCase(IFSConstants.IDP)) {    isIDP=true;  }  if (FSUtils.needSetLBCookieAndRedirect(request,response,isIDP)) {    return;  }  this.request=request;  setTerminationURL(hostedConfig,providerAlias);  doTerminationInitiation(request,response,hostedProviderDesc,hostedConfig,realm,hostedEntityId,hostedRole,providerAlias);  return;}  }
class C{  public FrameBodyRVAD(FrameBodyRVA2 body){  setObjectValue(DataTypes.OBJ_DATA,body.getObjectValue(DataTypes.OBJ_DATA));}  }
class C{  public MarshalException(String message){  this(message,null,null);}  }
class C{  public DefaultFormatterFactory(JFormattedTextField.AbstractFormatter defaultFormat,JFormattedTextField.AbstractFormatter displayFormat,JFormattedTextField.AbstractFormatter editFormat,JFormattedTextField.AbstractFormatter nullFormat){  this.defaultFormat=defaultFormat;  this.displayFormat=displayFormat;  this.editFormat=editFormat;  this.nullFormat=nullFormat;}  }
class C{  Type3Glyph(PdfDocument pdfDocument,float wx,float llx,float lly,float urx,float ury,boolean isColor){  super(new PdfStream().makeIndirect(pdfDocument),null,pdfDocument);  writeMetrics(wx,llx,lly,urx,ury,isColor);}  }
class C{  public CertificateNotYetValidException(){  super();}  }
class C{  private List<Runnable> drainQueue(){  BlockingQueue<Runnable> q=workQueue;  ArrayList<Runnable> taskList=new ArrayList<Runnable>();  q.drainTo(taskList);  if (!q.isEmpty()) {    for (    Runnable r : q.toArray(new Runnable[0])) {      if (q.remove(r))       taskList.add(r);    }  }  return taskList;}  }
class C{  public final void update(byte b) throws SignatureException {  if (state == VERIFY || state == SIGN) {    engineUpdate(b);  } else {    throw new SignatureException("object not initialized for " + "signature or verification");  }}  }
class C{  public boolean change_layer(int p_to_layer){  if (layer_active_no == p_to_layer)   return true;  if (p_to_layer < 0 || p_to_layer >= layer_active_arr.length) {    System.out.println("Route.change_layer: p_to_layer out of range");    return false;  }  if (!layer_active_arr[p_to_layer])   return false;  if (via_rule == null)   return false;  shove_failing_obstacle=null;  if (via_snap_to_smd_center) {    boolean snapped_to_smd_center=via_try_snap_smd_center(p_to_layer);    if (!snapped_to_smd_center) {      via_try_snap_smd_center(layer_active_no);    }  }  PlaPointInt a_corner=prev_corner;  boolean result=true;  int min_layer=Math.min(layer_active_no,p_to_layer);  int max_layer=Math.max(layer_active_no,p_to_layer);  boolean via_found=false;  for (int index=0; index < via_rule.via_count(); ++index) {    BrdViaInfo curr_via_info=via_rule.get_via(index);    LibPadstack curr_via_padstack=curr_via_info.get_padstack();    if (min_layer < curr_via_padstack.from_layer() || max_layer > curr_via_padstack.to_layer()) {      continue;    }    r_board.generate_snapshot();    result=r_board.insert_via(curr_via_info,a_corner,net_nos,clearance_class,pen_half_width_arr,max_shove_trace_recursion_depth,0,itera_settings.trace_pullt_min_move,s_PULL_TIGHT_TIME_MAX);    if (result) {      via_found=true;      break;    }    set_shove_failing_obstacle(r_board.shove_fail_obstacle_get());    r_board.undo(null);  }  if (via_found) {    layer_active_no=p_to_layer;  }  return result;}  }
class C{  public SafeDataExpectedAcksInfo(CSN csn,ServerHandler requesterServerHandler,byte safeDataLevel,List<Integer> expectedServers){  super(csn,requesterServerHandler,AssuredMode.SAFE_DATA_MODE,expectedServers);  this.safeDataLevel=safeDataLevel;}  }
class C{  public void windowActivated(WindowEvent e){  ((WindowListener)a).windowActivated(e);  ((WindowListener)b).windowActivated(e);}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public CodeSource(URL url,CodeSigner[] signers){  this.location=url;  if (signers != null) {    this.signers=signers.clone();  }}  }
class C{  public PdfCanvas closePathEoFillStroke(){  document.checkIsoConformance(currentGs,IsoKey.DRAWMODE_FILL_STROKE,resources);  contentStream.getOutputStream().writeBytes(bStar);  return this;}  }
class C{  final void treeify(Node<K,V>[] tab){  TreeNode<K,V> root=null;  for (TreeNode<K,V> x=this, next; x != null; x=next) {    next=(TreeNode<K,V>)x.next;    x.left=x.right=null;    if (root == null) {      x.parent=null;      x.red=false;      root=x;    } else {      K k=x.key;      int h=x.hash;      Class<?> kc=null;      for (TreeNode<K,V> p=root; ; ) {        int dir, ph;        K pk=p.key;        if ((ph=p.hash) > h)         dir=-1; else         if (ph < h)         dir=1; else         if ((kc == null && (kc=comparableClassFor(k)) == null) || (dir=compareComparables(kc,k,pk)) == 0)         dir=tieBreakOrder(k,pk);        TreeNode<K,V> xp=p;        if ((p=(dir <= 0) ? p.left : p.right) == null) {          x.parent=xp;          if (dir <= 0)           xp.left=x; else           xp.right=x;          root=balanceInsertion(root,x);          break;        }      }    }  }  moveRootToFront(tab,root);}  }
class C{  public static byte[] decode(char[] in,int iOff,int iLen){  if (iLen % 4 != 0)   throw new IllegalArgumentException("Length of Base64 encoded input string is not a multiple of 4.");  while (iLen > 0 && in[iOff + iLen - 1] == '=')   iLen--;  int oLen=(iLen * 3) / 4;  byte[] out=new byte[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++];    int i1=in[ip++];    int i2=ip < iEnd ? in[ip++] : 'A';    int i3=ip < iEnd ? in[ip++] : 'A';    if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)     throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    int b0=map2[i0];    int b1=map2[i1];    int b2=map2[i2];    int b3=map2[i3];    if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)     throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    int o0=(b0 << 2) | (b1 >>> 4);    int o1=((b1 & 0xf) << 4) | (b2 >>> 2);    int o2=((b2 & 3) << 6) | b3;    out[op++]=(byte)o0;    if (op < oLen)     out[op++]=(byte)o1;    if (op < oLen)     out[op++]=(byte)o2;  }  return out;}  }
class C{  public CertificateManager(String keyStorePath,String keyStoreType,char[] keyStorePassword) throws IllegalArgumentException {  ensureValid(keyStorePath,KEYSTORE_PATH_MSG);  ensureValid(keyStoreType,KEYSTORE_TYPE_MSG);  if (keyStoreType.equals(KEY_STORE_TYPE_PKCS11)) {    if (!keyStorePath.equals(KEY_STORE_PATH_PKCS11)) {      LocalizableMessage msg=ERR_CERTMGR_INVALID_PKCS11_PATH.get(KEY_STORE_PATH_PKCS11);      throw new IllegalArgumentException(msg.toString());    }  } else   if (keyStoreType.equals(KEY_STORE_TYPE_JKS) || keyStoreType.equals(KEY_STORE_TYPE_JCEKS) || keyStoreType.equals(KEY_STORE_TYPE_PKCS12)) {    File keyStoreFile=new File(keyStorePath);    if (keyStoreFile.exists()) {      if (!keyStoreFile.isFile()) {        LocalizableMessage msg=ERR_CERTMGR_INVALID_KEYSTORE_PATH.get(keyStorePath);        throw new IllegalArgumentException(msg.toString());      }    } else {      final File keyStoreDirectory=keyStoreFile.getParentFile();      if (keyStoreDirectory == null || !keyStoreDirectory.exists() || !keyStoreDirectory.isDirectory()) {        LocalizableMessage msg=ERR_CERTMGR_INVALID_PARENT.get(keyStorePath);        throw new IllegalArgumentException(msg.toString());      }    }  } else {    LocalizableMessage msg=ERR_CERTMGR_INVALID_STORETYPE.get(KEY_STORE_TYPE_JKS,KEY_STORE_TYPE_JCEKS,KEY_STORE_TYPE_PKCS11,KEY_STORE_TYPE_PKCS12);    throw new IllegalArgumentException(msg.toString());  }  this.keyStorePath=keyStorePath;  this.keyStoreType=keyStoreType;  this.password=keyStorePassword;  this.keyStore=null;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.ResumeSessionElement createResumeSessionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ResumeSessionElementImpl();}  }
class C{  public static Values buildErrorTuple(Class<? extends BaseRichBolt> currentBolt,String source,String message,Throwable e){  if (e != null) {    return new Values(System.currentTimeMillis(),currentBolt.getCanonicalName(),source,message,e.getClass().getCanonicalName(),e.getMessage());  } else {    return new Values(System.currentTimeMillis(),currentBolt.getCanonicalName(),source,message,"na","na");  }}  }
class C{  public void addAttribute(Attribute attribute,Collection<? super ByteString> duplicateValues){  setAttribute(attribute,duplicateValues,false);}  }
class C{  public static Boolean booleanValueOf(String value){  return new Boolean("true".equalsIgnoreCase(value) || "1".equals(value));}  }
class C{  static void testMissingStuff(){  Mutant mutant=new Mutant();  try {    int x=mutant.disappearingField;  } catch (  NoSuchFieldError nsfe) {    System.out.println("Got expected NoSuchFieldError");    if (VERBOSE)     System.out.println("--- " + nsfe);  }  try {    int y=Mutant.disappearingStaticField;  } catch (  NoSuchFieldError nsfe) {    System.out.println("Got expected NoSuchFieldError");    if (VERBOSE)     System.out.println("--- " + nsfe);  }  try {    mutant.disappearingMethod();  } catch (  NoSuchMethodError nsme) {    System.out.println("Got expected NoSuchMethodError");    if (VERBOSE)     System.out.println("--- " + nsme);  }  try {    Mutant.disappearingStaticMethod();  } catch (  NoSuchMethodError nsme) {    System.out.println("Got expected NoSuchMethodError");    if (VERBOSE)     System.out.println("--- " + nsme);  }}  }
class C{  public boolean isSupportedLookAndFeel(){  return true;}  }
class C{  public boolean equals(Object o){  if (o instanceof LDAPRoles) {    LDAPRoles roles=(LDAPRoles)o;    if ((selectedRoleDNs != null) && (roles.selectedRoleDNs != null) && (selectedRoleDNs.equals(roles.selectedRoleDNs))) {      return true;    }  }  return false;}  }
class C{  public ID3v24Frame createFrame(String id){  return new ID3v24Frame(id);}  }
class C{  public PermissionCollection newPermissionCollection(){  return new UnresolvedPermissionCollection();}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  logger.info("shootme: got an ACK! ");  logger.info("Dialog = " + requestEvent.getDialog());  logger.info("Dialog State = " + requestEvent.getDialog().getState());  this.ackSeen=true;}  }
class C{  public static void deregisterSupportedControl(String controlOID){  DirectoryServer.deregisterSupportedControl(controlOID);}  }
class C{  static int indexFor(int h,int length){  return h & (length - 1);}  }
class C{  @Override public void addHeader(String name,String value){  this._getHttpServletResponse().addHeader(name,value);}  }
class C{  private void initIndeterminateDefaults(){  initRepaintInterval();  initCycleTime();  if (repaintInterval <= 0) {    repaintInterval=100;  }  if (repaintInterval > cycleTime) {    cycleTime=repaintInterval * 20;  } else {    int factor=(int)Math.ceil(((double)cycleTime) / ((double)repaintInterval * 2));    cycleTime=repaintInterval * factor * 2;  }}  }
class C{  protected void appendAndPush(StylesheetHandler handler,ElemTemplateElement elem) throws org.xml.sax.SAXException {  super.appendAndPush(handler,elem);  elem.setDOMBackPointer(handler.getOriginatingNode());  handler.getStylesheet().setTemplate((ElemTemplate)elem);}  }
class C{  public final LinkedList<AwtreeFindEntry> find_overlap_tree_entries(ShapeConvex p_shape,int p_layer,NetNosList p_ignore_net_nos){  LinkedList<AwtreeFindEntry> risul_list=new LinkedList<AwtreeFindEntry>();  if (p_shape == null)   return risul_list;  ShapeTileRegular bounds=p_shape.bounding_shape();  if (bounds == null) {    System.err.println("board.ShapeSearchTree.overlaps: p_shape not bounded");    return risul_list;  }  boolean is_45_degree=p_shape instanceof ShapeTileOctagon;  for (  AwtreeNodeLeaf curr_leaf : get_overlaps(bounds)) {    AwtreeObject curr_object=curr_leaf.object;    int shape_index=curr_leaf.shape_index_in_object;    boolean ignore_object=p_layer >= 0 && curr_object.shape_layer(shape_index) != p_layer;    if (ignore_object)     continue;    ignore_object=p_ignore_net_nos.is_connectable(curr_object);    if (ignore_object)     continue;    ShapeTile curr_shape=curr_object.get_tree_shape(this,curr_leaf.shape_index_in_object);    boolean add_item;    if (is_45_degree && curr_shape instanceof ShapeTileOctagon) {      add_item=true;    } else {      add_item=curr_shape.intersects(p_shape);    }    if (add_item) {      AwtreeFindEntry new_entry=new AwtreeFindEntry(curr_object,shape_index);      risul_list.add(new_entry);    }  }  return risul_list;}  }
class C{  @Override public int process(Callback[] callbacks,int state) throws AuthLoginException {  String tmpPasswd=null;  String sState;switch (state) {case ISAuthConstants.LOGIN_START:    try {      radiusConn=new RadiusConn(primaryServers,secondaryServers,sharedSecret,iTimeOut,healthCheckInterval);    } catch (    SocketException se) {      debug.error("RADIUS login failure; Socket Exception se == ",se);      shutdown();      throw new AuthLoginException(AM_AUTH_RADIUS,"RadiusNoServer",null);    }catch (    Exception e) {      debug.error("RADIUS login failure; Can't connect to RADIUS server",e);      shutdown();      throw new AuthLoginException(AM_AUTH_RADIUS,"RadiusNoServer",null);    }  if (callbacks != null && callbacks.length == 0) {    username=(String)sharedState.get(getUserKey());    tmpPasswd=(String)sharedState.get(getPwdKey());    if (username == null || tmpPasswd == null) {      return ISAuthConstants.LOGIN_START;    }    getCredentialsFromSharedState=true;  } else {    username=((NameCallback)callbacks[0]).getName();    tmpPasswd=charToString(((PasswordCallback)callbacks[1]).getPassword(),callbacks[1]);    if (debug.messageEnabled()) {      debug.message("username: " + username);    }  }storeUsernamePasswd(username,tmpPasswd);try {succeeded=false;radiusConn.authenticate(username,tmpPasswd);} catch (RejectException re) {if (getCredentialsFromSharedState && !isUseFirstPassEnabled()) {  getCredentialsFromSharedState=false;  return ISAuthConstants.LOGIN_START;}if (debug.messageEnabled()) {  debug.message("Radius login request rejected",re);}shutdown();setFailureID(username);throw new InvalidPasswordException(AM_AUTH_RADIUS,"RadiusLoginFailed",null,username,re);}catch (IOException ioe) {if (getCredentialsFromSharedState && !isUseFirstPassEnabled()) {  getCredentialsFromSharedState=false;  return ISAuthConstants.LOGIN_START;}debug.error("Radius request IOException",ioe);shutdown();setFailureID(username);throw new AuthLoginException(AM_AUTH_RADIUS,"RadiusLoginFailed",null);}catch (java.security.NoSuchAlgorithmException ne) {if (getCredentialsFromSharedState && !isUseFirstPassEnabled()) {  getCredentialsFromSharedState=false;  return ISAuthConstants.LOGIN_START;}debug.error("Radius No Such Algorithm Exception",ne);shutdown();setFailureID(username);throw new AuthLoginException(AM_AUTH_RADIUS,"RadiusLoginFailed",null);}catch (ChallengeException ce) {if (getCredentialsFromSharedState && !isUseFirstPassEnabled()) {  getCredentialsFromSharedState=false;  return ISAuthConstants.LOGIN_START;}cException=ce;sState=ce.getState();if (sState == null) {  debug.error("Radius failure - no state returned in challenge");  shutdown();  setFailureID(username);  throw new AuthLoginException(AM_AUTH_RADIUS,"RadiusAuth",null);}challengeID=ce.getReplyMessage();if (debug.messageEnabled()) {  debug.message("Server challenge with " + "challengeID: " + challengeID);}setDynamicText(2);return ISAuthConstants.LOGIN_CHALLENGE;}catch (Exception e) {if (getCredentialsFromSharedState && !isUseFirstPassEnabled()) {  getCredentialsFromSharedState=false;  return ISAuthConstants.LOGIN_START;}shutdown();setFailureID(username);throw new AuthLoginException(AM_AUTH_RADIUS,"RadiusLoginFailed",null,e);}succeeded=true;break;case ISAuthConstants.LOGIN_CHALLENGE:String passwd=getChallengePassword(callbacks);if (debug.messageEnabled()) {debug.message("reply to challenge--username: " + username);}try {succeeded=false;radiusConn.replyChallenge(username,passwd,cException);} catch (ChallengeException ce) {sState=ce.getState();if (sState == null) {debug.error("handle Challenge failure - no state returned");shutdown();setFailureID(username);throw new AuthLoginException(AM_AUTH_RADIUS,"RadiusLoginFailed",null);}resetCallback(2,0);challengeID=ce.getReplyMessage();if (debug.messageEnabled()) {debug.message("Server challenge again with challengeID: " + challengeID);}cException=ce;setDynamicText(2);return ISAuthConstants.LOGIN_CHALLENGE;}catch (RejectException ex) {debug.error("Radius challenge response rejected",ex);shutdown();setFailureID(username);throw new InvalidPasswordException(AM_AUTH_RADIUS,"RadiusLoginFailed",null,username,ex);}catch (IOException ioe) {debug.error("Radius challenge IOException",ioe);shutdown();setFailureID(username);throw new AuthLoginException(AM_AUTH_RADIUS,"RadiusLoginFailed",null);}catch (java.security.NoSuchAlgorithmException ex) {debug.error("Radius No Such Algorithm Exception",ex);shutdown();setFailureID(username);throw new AuthLoginException(AM_AUTH_RADIUS,"RadiusLoginFailed",null);}catch (Exception e) {debug.error("RADIUS challenge Authentication Failed ",e);shutdown();setFailureID(username);throw new AuthLoginException(AM_AUTH_RADIUS,"RadiusLoginFailed",null);}succeeded=true;break;default :debug.error("RADIUS Authentication Failed - invalid state" + state);shutdown();succeeded=false;setFailureID(username);throw new AuthLoginException(AM_AUTH_RADIUS,"RadiusLoginFailed",null);}if (succeeded) {if (debug.messageEnabled()) {debug.message("RADIUS authentication successful");}if (username != null) {StringTokenizer usernameToken=new StringTokenizer(username,",");userTokenId=usernameToken.nextToken();}if (debug.messageEnabled()) {debug.message("userTokenID: " + userTokenId);}shutdown();return ISAuthConstants.LOGIN_SUCCEED;} else {if (debug.messageEnabled()) {debug.message("RADIUS authentication to be ignored");}return ISAuthConstants.LOGIN_IGNORE;}}  }
class C{  public LineEvent(Line line,Type type,long position){  super(line);  this.type=type;  this.position=position;}  }
class C{  private void fixNodeReferences(Node<T> node){  while (true) {    final Node<T> nextNode=node.next;    final Node<T> previousNode=node.previous;    if (nextNode != null) {      nextNode.previous=previousNode;    }    if (previousNode != null) {      previousNode.next=nextNode;    }    final Node<T> parentNode=node.parent;    if (parentNode == null) {      break;    }    if (parentNode.child != node) {      break;    }    if (nextNode != null) {      parentNode.child=nextNode;      break;    }    if (parentNode.element != null) {      break;    }    ditCacheMap.remove(parentNode.dn);    node.parent=null;    node.previous=null;    node.next=null;    node=parentNode;  }}  }
class C{  public StatusMessage createStatusMessage(String value){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.STATUS_MESSAGE,value);  if (obj == null) {    return new StatusMessageImpl(value);  } else {    return (StatusMessage)obj;  }}  }
class C{  public void transactionErrorEvent(SIPTransactionErrorEvent transactionErrorEvent){  SIPTransaction transaction=(SIPTransaction)transactionErrorEvent.getSource();  if (transactionErrorEvent.getErrorID() == SIPTransactionErrorEvent.TRANSPORT_ERROR) {    if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {      logger.logDebug("TransportError occured on " + transaction);    }    Object errorObject=transactionErrorEvent.getSource();    Timeout timeout=Timeout.TRANSACTION;    TimeoutEvent ev=null;    if (errorObject instanceof SIPServerTransaction) {      ev=new TimeoutEvent(this,(ServerTransaction)errorObject,timeout);    } else {      SIPClientTransaction clientTx=(SIPClientTransaction)errorObject;      Hop hop=clientTx.getNextHop();      if (sipStack.getRouter() instanceof RouterExt) {        ((RouterExt)sipStack.getRouter()).transactionTimeout(hop);      }      ev=new TimeoutEvent(this,(ClientTransaction)errorObject,timeout);    }    this.handleEvent(ev,(SIPTransaction)errorObject);  } else   if (transactionErrorEvent.getErrorID() == SIPTransactionErrorEvent.TIMEOUT_ERROR) {    Object errorObject=transactionErrorEvent.getSource();    Timeout timeout=Timeout.TRANSACTION;    TimeoutEvent ev=null;    if (errorObject instanceof SIPServerTransaction) {      ev=new TimeoutEvent(this,(ServerTransaction)errorObject,timeout);    } else {      SIPClientTransaction clientTx=(SIPClientTransaction)errorObject;      Hop hop=clientTx.getNextHop();      if (sipStack.getRouter() instanceof RouterExt) {        ((RouterExt)sipStack.getRouter()).transactionTimeout(hop);      }      ev=new TimeoutEvent(this,(ClientTransaction)errorObject,timeout);    }    this.handleEvent(ev,(SIPTransaction)errorObject);  } else   if (transactionErrorEvent.getErrorID() == SIPTransactionErrorEvent.TIMEOUT_RETRANSMIT) {    Object errorObject=transactionErrorEvent.getSource();    Transaction tx=(Transaction)errorObject;    if (tx.getDialog() != null)     InternalErrorHandler.handleException("Unexpected event !",this.logger);    Timeout timeout=Timeout.RETRANSMIT;    TimeoutEvent ev=null;    if (errorObject instanceof SIPServerTransaction) {      ev=new TimeoutEvent(this,(ServerTransaction)errorObject,timeout);    } else {      ev=new TimeoutEvent(this,(ClientTransaction)errorObject,timeout);    }    this.handleEvent(ev,(SIPTransaction)errorObject);  }}  }
class C{  public void focusGained(FocusEvent e){  if (component.isEnabled()) {    if (component.isEditable()) {      setVisible(true);    }    setSelectionVisible(true);  }}  }
class C{  protected synchronized void readConfiguration(InputStream is,ClassLoader classLoader) throws IOException {  ClassLoaderLogInfo info=classLoaderLoggers.get(classLoader);  try {    info.props.load(is);  } catch (  IOException e) {    System.err.println("Configuration error");    e.printStackTrace();  } finally {    try {      is.close();    } catch (    IOException ioe) {    }  }  String rootHandlers=info.props.getProperty(".handlers");  String handlers=info.props.getProperty("handlers");  Logger localRootLogger=info.rootNode.logger;  if (handlers != null) {    StringTokenizer tok=new StringTokenizer(handlers,",");    while (tok.hasMoreTokens()) {      String handlerName=(tok.nextToken().trim());      String handlerClassName=handlerName;      String prefix="";      if (handlerClassName.length() <= 0) {        continue;      }      if (Character.isDigit(handlerClassName.charAt(0))) {        int pos=handlerClassName.indexOf('.');        if (pos >= 0) {          prefix=handlerClassName.substring(0,pos + 1);          handlerClassName=handlerClassName.substring(pos + 1);        }      }      try {        this.prefix.set(prefix);        Handler handler=(Handler)classLoader.loadClass(handlerClassName).newInstance();        this.prefix.set(null);        info.handlers.put(handlerName,handler);        if (rootHandlers == null) {          localRootLogger.addHandler(handler);        }      } catch (      Exception e) {        System.err.println("Handler error");        e.printStackTrace();      }    }  }}  }
class C{  private boolean validateDays(Set startDaySet,Set endDaySet) throws PolicyException {  if (startDaySet.size() != 1) {    String[] args={START_DAY};    throw new PolicyException(ResBundleUtils.rbName,"property_does_not_allow_multiple_values",args,null);  }  if (endDaySet.size() != 1) {    String[] args={END_DAY};    throw new PolicyException(ResBundleUtils.rbName,"property_does_not_allow_multiple_values",args,null);  }  String startDayString=(String)(startDaySet.iterator().next());  startDay=parseDayString(startDayString);  String endDayString=(String)(endDaySet.iterator().next());  endDay=parseDayString(endDayString);  return true;}  }
class C{  public NSObject put(String key,Object obj){  return put(key,NSObject.wrap(obj));}  }
class C{  protected void tearDown(){}  }
class C{  @Overridden boolean notUncommon(CraftMetaItem meta){  return true;}  }
class C{  public boolean events(){  boolean result=false;  PollerEvent pe=null;  while ((pe=events.poll()) != null) {    result=true;    try {      pe.run();      pe.reset();      if (running && !paused) {        eventCache.push(pe);      }    } catch (    Throwable x) {      log.error("",x);    }  }  return result;}  }
class C{  protected Object readLocation() throws IOException, ClassNotFoundException {  return (locIn == null ? null : locIn.readObject());}  }
class C{  public void assignCOSDef(PersistentObject pObject,ICOSDefinition cosDef,COSTemplate cosTemplate) throws UMSException {  if (pObject == null || cosDef == null) {    String msg=i18n.getString(IUMSConstants.COS_DEF_OR_TARGET_OBJECT_NULL);    throw new UMSException(msg);  }  if (pObject.getGuid() == null) {    String msg=i18n.getString(IUMSConstants.COS_TARGET_OBJECT_NOT_PERSISTENT);    throw new UMSException(msg);  }  if (!(cosDef instanceof DirectCOSDefinition)) {    String msg=i18n.getString(IUMSConstants.INVALID_COSDEFINITION);    throw new UMSException(msg);  }  if (cosDef instanceof DirectCOSDefinition) {    assignDirectCOSDef(pObject,(DirectCOSDefinition)cosDef,cosTemplate,_schemaManager);  }}  }
class C{  public AuthenticationEnforcer exceptUpdate(){  exceptUpdate=true;  return this;}  }
class C{  public final void testNextBytesbyteArray03() throws NoSuchAlgorithmException, NoSuchProviderException {  SecureRandom sr1;  SecureRandom sr2;  byte[] myBytes1;  byte[] myBytes2;  for (int i=1; i < LENGTH / 2; i+=INCR) {    sr1=SecureRandom.getInstance(algorithm,provider);    sr2=SecureRandom.getInstance(algorithm,provider);    boolean flag=true;    myBytes1=new byte[i];    myBytes2=new byte[i];    sr1.nextBytes(myBytes1);    sr2.nextBytes(myBytes2);    for (int j=0; j < i; j++) {      flag&=myBytes1[j] == myBytes2[j];    }    sr1.nextBytes(myBytes1);    sr2.nextBytes(myBytes2);    for (int j=0; j < i; j++) {      flag&=myBytes1[j] == myBytes2[j];    }    if (flag) {      fail("TESTING RANDOM NUMBER GENERATOR QUALITY: IGNORE THIS FAILURE IF INTERMITTENT :: i=" + i);    }  }}  }
class C{  public void testFloatValuePosNotRounded(){  byte[] a={-128,1,2,3,4,5,60,23,1,-3,-5};  int aSign=1;  float result=1.5474726E26f;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == result);}  }
class C{  protected static Vector convertToVector(final Object[] anArray){  if (anArray == null) {    return null;  }  final Vector v=new Vector(anArray.length);  for (  final Object element : anArray) {    v.addElement(element);  }  return v;}  }
class C{  protected AdminException(LocalizableMessage message){  this.message=message;}  }
class C{  public String layoutText(SynthContext ss,FontMetrics fm,String text,Icon icon,int hAlign,int vAlign,int hTextPosition,int vTextPosition,Rectangle viewR,Rectangle iconR,Rectangle textR,int iconTextGap){  if (icon instanceof SynthIcon) {    SynthIconWrapper wrapper=SynthIconWrapper.get((SynthIcon)icon,ss);    String formattedText=SwingUtilities.layoutCompoundLabel(ss.getComponent(),fm,text,wrapper,vAlign,hAlign,vTextPosition,hTextPosition,viewR,iconR,textR,iconTextGap);    SynthIconWrapper.release(wrapper);    return formattedText;  }  return SwingUtilities.layoutCompoundLabel(ss.getComponent(),fm,text,icon,vAlign,hAlign,vTextPosition,hTextPosition,viewR,iconR,textR,iconTextGap);}  }
class C{  public List<Cookie> parse(final Header header,final CookieOrigin origin) throws MalformedCookieException {  if (header == null) {    throw new IllegalArgumentException("Header may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  NetscapeDraftHeaderParser parser=NetscapeDraftHeaderParser.DEFAULT;  CharArrayBuffer buffer;  ParserCursor cursor;  if (header instanceof FormattedHeader) {    buffer=((FormattedHeader)header).getBuffer();    cursor=new ParserCursor(((FormattedHeader)header).getValuePos(),buffer.length());  } else {    String s=header.getValue();    if (s == null) {      throw new MalformedCookieException("Header value is null");    }    buffer=new CharArrayBuffer(s.length());    buffer.append(s);    cursor=new ParserCursor(0,buffer.length());  }  return parse(new HeaderElement[]{parser.parseHeader(buffer,cursor)},origin);}  }
class C{  public static final byte[] longToBytes(long value,int size){  if (size < 1) {    throw new IllegalArgumentException("The array must be at least of size 1");  }  byte[] result=new byte[size];  int shift=0;  for (int i=size - 1; i >= 0; i--) {    result[i]=(byte)(value >>> shift);    shift+=8;  }  return result;}  }
class C{  private static String readVersion(){  try {    byte[] bytes=IoUtils.readFileAsByteArray(ZONE_DIRECTORY_NAME + "+VERSION");    return new String(bytes,0,bytes.length,StandardCharsets.ISO_8859_1).trim();  } catch (  IOException ex) {    return "unknown";  }}  }
class C{  public static Map processArtifact(String[] artifact,String target) throws SAMLException {  List assts=null;  Subject assertionSubject=null;  AssertionArtifact firstArtifact=null;  Map sessMap=null;  try {    assts=SAMLClient.artifactQueryHandler(artifact,(String)null);    if ((assertionSubject=examAssertions(assts)) == null) {      return null;    }    firstArtifact=new AssertionArtifact(artifact[0]);    String sid=firstArtifact.getSourceID();    Map partner=(Map)SAMLServiceManager.getAttribute(SAMLConstants.PARTNER_URLS);    if (partner == null) {      throw new SAMLException(bundle.getString("nullPartnerUrl"));    }    SAMLServiceManager.SOAPEntry partnerdest=(SAMLServiceManager.SOAPEntry)partner.get(sid);    if (partnerdest == null) {      throw new SAMLException(bundle.getString("failedAccountMapping"));    }    sessMap=getAttributeMap(partnerdest,assts,assertionSubject,target);  } catch (  Exception se) {    debug.error("SAMLUtils.processArtifact :",se);    throw new SAMLException(bundle.getString("failProcessArtifact"));  }  return sessMap;}  }
class C{  public static boolean checkFileSize(final ResourceType type,final long fileSize){  return (type.getMaxSize() == null || type.getMaxSize() > fileSize);}  }
class C{  protected void registerChildren(){  registerChild(TXT_INDEX,StaticTextField.class);  registerChild(TXT_BUTTON,StaticTextField.class);  registerChild(TXT_CLASS,StaticTextField.class);}  }
class C{  public static String forceFrameID23To24(String identifier){  return ID3Frames.forcev23Tov24.get(identifier);}  }
class C{  public AlgoShoveTraceEntries(ShapeTile p_shape,int p_layer,NetNosList p_own_net_nos,int p_cl_type,BrdFromSide p_from_side,RoutingBoard p_board){  shape=p_shape;  layer=p_layer;  own_net_nos=p_own_net_nos;  cl_class=p_cl_type;  from_side=p_from_side;  r_board=p_board;  list_anchor=null;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private Object writeReplace(){  return new Ser(Ser.ZOTRULE,this);}  }
class C{  public ConnectionWrapper(ConnectionWrapper other) throws LdapException {  this(other.hostPort,other.connectionType,other.bindDn,other.bindPwd,other.connectTimeout,other.trustManager,other.keyManager);}  }
class C{  private static String which(String classname,ClassLoader loader){  String classnameAsResource=classname.replace('.','/') + ".class";  if (loader == null)   loader=ClassLoader.getSystemClassLoader();  URL it=loader.getResource(classnameAsResource);  return it != null ? it.toString() : null;}  }
class C{  public boolean isOutputShutdown(){  return isOutputShutdown;}  }
class C{  ByteVector encodeUTF8(final String s,int i,int maxByteLength){  int charLength=s.length();  int byteLength=i;  char c;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      byteLength++;    } else     if (c > '\u07FF') {      byteLength+=3;    } else {      byteLength+=2;    }  }  if (byteLength > maxByteLength) {    throw new IllegalArgumentException();  }  int start=length - i - 2;  if (start >= 0) {    data[start]=(byte)(byteLength >>> 8);    data[start + 1]=(byte)byteLength;  }  if (length + byteLength - i > data.length) {    enlarge(byteLength - i);  }  int len=length;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else     if (c > '\u07FF') {      data[len++]=(byte)(0xE0 | c >> 12 & 0xF);      data[len++]=(byte)(0x80 | c >> 6 & 0x3F);      data[len++]=(byte)(0x80 | c & 0x3F);    } else {      data[len++]=(byte)(0xC0 | c >> 6 & 0x1F);      data[len++]=(byte)(0x80 | c & 0x3F);    }  }  length=len;  return this;}  }
class C{  public List<String> encode(){  LinkedList<String> list=new LinkedList<>();  SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT_GMT_TIME);  dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));  list.add(PROPERTY_BACKUP_ID + "=" + backupID);  list.add(PROPERTY_BACKUP_DATE + "=" + dateFormat.format(backupDate));  list.add(PROPERTY_IS_INCREMENTAL + "=" + String.valueOf(isIncremental));  list.add(PROPERTY_IS_COMPRESSED + "=" + String.valueOf(isCompressed));  list.add(PROPERTY_IS_ENCRYPTED + "=" + String.valueOf(isEncrypted));  if (unsignedHash != null) {    list.add(PROPERTY_UNSIGNED_HASH + "=" + Base64.encode(unsignedHash));  }  if (signedHash != null) {    list.add(PROPERTY_SIGNED_HASH + "=" + Base64.encode(signedHash));  }  if (!dependencies.isEmpty()) {    for (    String dependency : dependencies) {      list.add(PROPERTY_DEPENDENCY + "=" + dependency);    }  }  if (!backupProperties.isEmpty()) {    for (    String name : backupProperties.keySet()) {      String value=backupProperties.get(name);      if (value == null) {        value="";      }      list.add(PROPERTY_CUSTOM_PREFIX + name + "="+ value);    }  }  return list;}  }
class C{  public static Rectangle scaleRectangle(Rectangle rect,float scaleFactor){  return new Rectangle(Math.round(rect.x * scaleFactor),Math.round(rect.y * scaleFactor),Math.round(rect.width * scaleFactor),Math.round(rect.height * scaleFactor));}  }
class C{  public boolean isConfigRead(){  return configRead;}  }
class C{  public int hashCode(){  return (((crossFeedResolution & 0x0000FFFF)) | ((feedResolution & 0x0000FFFF) << 16));}  }
class C{  @SuppressWarnings("unchecked") @Test public void testCreateLDAPListener() throws Exception {  LDAPListener listener=new LDAPListener(findFreeSocketAddress(),mock(ServerConnectionFactory.class));  listener.close();}  }
class C{  private static ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int index,int size){  throw new ArrayIndexOutOfBoundsException(size,index);}  }
class C{  public boolean isConfigBackend(){  return isConfigBackend;}  }
class C{  public RenderedImage createDefaultRendering(){  AffineTransform usr2dev=new AffineTransform();  RenderContext newRC=new RenderContext(usr2dev);  return createRendering(newRC);}  }
class C{  public TransformerHandlerImpl(TransformerImpl transformer,boolean doFragment,String baseSystemID){  super();  m_transformer=transformer;  m_baseSystemID=baseSystemID;  XPathContext xctxt=transformer.getXPathContext();  DTM dtm=xctxt.getDTM(null,true,transformer,true,true);  m_dtm=dtm;  dtm.setDocumentBaseURI(baseSystemID);  m_contentHandler=dtm.getContentHandler();  m_dtdHandler=dtm.getDTDHandler();  m_entityResolver=dtm.getEntityResolver();  m_errorHandler=dtm.getErrorHandler();  m_lexicalHandler=dtm.getLexicalHandler();  m_incremental=transformer.getIncremental();  m_optimizer=transformer.getOptimize();  m_source_location=transformer.getSource_location();}  }
class C{  @Inject public AuthenticationServiceV1(RestAuthenticationHandler restAuthenticationHandler){  this.restAuthenticationHandler=restAuthenticationHandler;}  }
class C{  protected void destroy(){  sendfileRunning=false;  try {synchronized (this) {      this.notify();      this.wait(pollTime / 1000);    }  } catch (  InterruptedException e) {  }  for (int i=(addS.size() - 1); i >= 0; i--) {    SendfileData data=addS.get(i);    closeSocket(data.socket);  }  int rv=Poll.pollset(sendfilePollset,desc);  if (rv > 0) {    for (int n=0; n < rv; n++) {      closeSocket(desc[n * 2 + 1]);    }  }  Pool.destroy(pool);  sendfileData.clear();}  }
class C{  public static void copy(InputStream input,Writer output) throws IOException {  InputStreamReader in=new InputStreamReader(input);  copy(in,output);}  }
class C{  @Override protected void onResume(){  super.onResume();  if (!mUIInitialized)   initUIControls();  if (!mDevicesInitialized)   initGoCoderDevices();  if (sGoCoderSDK != null && mPermissionsGranted) {    SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);    mWZCameraView.setCameraConfig(getBroadcastConfig());    mWZCameraView.setScaleMode(ConfigPrefs.getScaleMode(sharedPrefs));    mWZCameraView.setVideoBackgroundColor(WZColor.DARKGREY);    if (mWZBroadcastConfig.isVideoEnabled()) {      if (mWZCameraView.isPreviewPaused())       mWZCameraView.onResume(); else       mWZCameraView.startPreview();    }    Toast.makeText(this,getBroadcastConfig().getLabel(true,true,false,true),Toast.LENGTH_LONG).show();  }  syncUIControlState();}  }
class C{  public SASLConfigManager(ServerContext serverContext){  this.serverContext=serverContext;  handlers=new ConcurrentHashMap<>();}  }
class C{  private ByteBuffer writeString(CharsetEncoder encoder,String next,int i,int noOfValues) throws CharacterCodingException {  ByteBuffer bb;  if ((i + 1) == noOfValues) {    bb=encoder.encode(CharBuffer.wrap(next));  } else {    bb=encoder.encode(CharBuffer.wrap(next + '\0'));  }  bb.rewind();  return bb;}  }
class C{  protected int next() throws IOException, ExifInvalidFormatException {  if (!mContainExifData) {    return EVENT_END;  }  int offset=mTiffStream.getReadByteCount();  int endOfTags=mIfdStartOffset + OFFSET_SIZE + TAG_SIZE * mNumOfTagInIfd;  if (offset < endOfTags) {    mTag=readTag();    if (mTag == null) {      return next();    }    if (mNeedToParseOffsetsInCurrentIfd) {      checkOffsetOrImageTag(mTag);    }    return EVENT_NEW_TAG;  } else   if (offset == endOfTags) {    if (mIfdType == IfdId.TYPE_IFD_0) {      long ifdOffset=readUnsignedLong();      if (isIfdRequested(IfdId.TYPE_IFD_1) || isThumbnailRequested()) {        if (ifdOffset != 0) {          registerIfd(IfdId.TYPE_IFD_1,ifdOffset);        }      }    } else {      int offsetSize=4;      if (mCorrespondingEvent.size() > 0) {        offsetSize=mCorrespondingEvent.firstEntry().getKey() - mTiffStream.getReadByteCount();      }      if (offsetSize < 4) {        Log.w(TAG,"Invalid size of link to next IFD: " + offsetSize);      } else {        long ifdOffset=readUnsignedLong();        if (ifdOffset != 0) {          Log.w(TAG,"Invalid link to next IFD: " + ifdOffset);        }      }    }  }  while (mCorrespondingEvent.size() != 0) {    Entry<Integer,Object> entry=mCorrespondingEvent.pollFirstEntry();    Object event=entry.getValue();    try {      skipTo(entry.getKey());    } catch (    IOException e) {      Log.w(TAG,"Failed to skip to data at: " + entry.getKey() + " for "+ event.getClass().getName()+ ", the file may be broken.");      continue;    }    if (event instanceof IfdEvent) {      mIfdType=((IfdEvent)event).ifd;      mNumOfTagInIfd=mTiffStream.readUnsignedShort();      mIfdStartOffset=entry.getKey();      if (mNumOfTagInIfd * TAG_SIZE + mIfdStartOffset + OFFSET_SIZE > mApp1End) {        Log.w(TAG,"Invalid size of IFD " + mIfdType);        return EVENT_END;      }      mNeedToParseOffsetsInCurrentIfd=needToParseOffsetsInCurrentIfd();      if (((IfdEvent)event).isRequested) {        return EVENT_START_OF_IFD;      } else {        skipRemainingTagsInCurrentIfd();      }    } else     if (event instanceof ImageEvent) {      mImageEvent=(ImageEvent)event;      return mImageEvent.type;    } else {      ExifTagEvent tagEvent=(ExifTagEvent)event;      mTag=tagEvent.tag;      if (mTag.getDataType() != ExifTag.TYPE_UNDEFINED) {        readFullTagValue(mTag);        checkOffsetOrImageTag(mTag);      }      if (tagEvent.isRequested) {        return EVENT_VALUE_OF_REGISTERED_TAG;      }    }  }  return EVENT_END;}  }
class C{  private static ModifyResponseProtocolOp readModifyResponse(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  int resultCode;  try {    resultCode=(int)reader.readInteger();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_RESULT_CODE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  DN matchedDN;  try {    String dnString=reader.readOctetStringAsString();    if (dnString.length() == 0) {      matchedDN=null;    } else {      matchedDN=DN.valueOf(dnString);    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_MATCHED_DN.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  LocalizableMessage errorMessage;  try {    errorMessage=LocalizableMessage.raw(reader.readOctetStringAsString());    if (errorMessage.length() == 0) {      errorMessage=null;    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_ERROR_MESSAGE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ArrayList<String> referralURLs=null;  try {    if (reader.hasNextElement()) {      reader.readStartSequence();      referralURLs=new ArrayList<>();      while (reader.hasNextElement()) {        referralURLs.add(reader.readOctetStringAsString());      }      reader.readEndSequence();    }  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_REFERRALS.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_RESULT_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new ModifyResponseProtocolOp(resultCode,errorMessage,matchedDN,referralURLs);}  }
class C{  public org.omg.CORBA.Any to_any(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("to_any",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    return $self.to_any();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private boolean isFormElementWithContent(AttributeSet attr){  return matchNameAttribute(attr,HTML.Tag.TEXTAREA) || matchNameAttribute(attr,HTML.Tag.SELECT);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event){  backTrail();  forwardToRealmView(event);}  }
class C{  private static boolean isNodeAfterSibling(Node parent,Node child1,Node child2){  boolean isNodeAfterSibling=false;  short child1type=child1.getNodeType();  short child2type=child2.getNodeType();  if ((Node.ATTRIBUTE_NODE != child1type) && (Node.ATTRIBUTE_NODE == child2type)) {    isNodeAfterSibling=false;  } else   if ((Node.ATTRIBUTE_NODE == child1type) && (Node.ATTRIBUTE_NODE != child2type)) {    isNodeAfterSibling=true;  } else   if (Node.ATTRIBUTE_NODE == child1type) {    NamedNodeMap children=parent.getAttributes();    int nNodes=children.getLength();    boolean found1=false, found2=false;    for (int i=0; i < nNodes; i++) {      Node child=children.item(i);      if (child1 == child || isNodeTheSame(child1,child)) {        if (found2) {          isNodeAfterSibling=false;          break;        }        found1=true;      } else       if (child2 == child || isNodeTheSame(child2,child)) {        if (found1) {          isNodeAfterSibling=true;          break;        }        found2=true;      }    }  } else {    Node child=parent.getFirstChild();    boolean found1=false, found2=false;    while (null != child) {      if (child1 == child || isNodeTheSame(child1,child)) {        if (found2) {          isNodeAfterSibling=false;          break;        }        found1=true;      } else       if (child2 == child || isNodeTheSame(child2,child)) {        if (found1) {          isNodeAfterSibling=true;          break;        }        found2=true;      }      child=child.getNextSibling();    }  }  return isNodeAfterSibling;}  }
class C{  private void decrypt(CipherState state,ByteBuffer inByteBuffer,ByteBuffer outByteBuffer,byte padding) throws IOException {  Utils.checkState(inByteBuffer.position() >= padding);  if (inByteBuffer.position() == padding) {    return;  }  inByteBuffer.flip();  outByteBuffer.clear();  decryptBuffer(state,inByteBuffer,outByteBuffer);  inByteBuffer.clear();  outByteBuffer.flip();  if (padding > 0) {    outByteBuffer.position(padding);  }}  }
class C{  public void printJobFailed(PrintJobEvent pje){}  }
class C{  public void removeButtonActionListener(ButtonActionListener l){  buttonListeners.remove(l);}  }
class C{  public void registerEngineExtension(String extension,ScriptEngineFactory factory){  if (extension == null || factory == null)   throw new NullPointerException();  extensionAssociations.put(extension,factory);}  }
class C{  public static Foo fetchByUuid_First(java.lang.String uuid,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_First(uuid,orderByComparator);}  }
class C{  public Tailer(File file,TailerListener listener,long delayMillis,boolean end){  this(file,listener,delayMillis,end,DEFAULT_BUFSIZE);}  }
class C{  public ManageReferralControl(boolean criticality){  super(OID,criticality,null);}  }
class C{  public void test_UseClientMode() throws IOException {  SSLSocket ssl=getSSLSocket();  assertTrue(ssl.getUseClientMode());  ssl.setUseClientMode(false);  assertFalse(ssl.getUseClientMode());  ssl.close();  ssl=getSSLSocket("localhost",startServer("UseClientMode"));  try {    ssl.startHandshake();  } catch (  IOException ioe) {  }  try {    ssl.setUseClientMode(false);    fail();  } catch (  IllegalArgumentException expected) {  }  ssl.close();}  }
class C{  public void initGenerationID(long generationId){synchronized (generationIDLock) {    this.generationId=generationId;    this.generationIdSavedStatus=true;  }}  }
class C{  public EntryEncodeConfig(){  excludeDN=false;  compressAttrDescriptions=false;  compressObjectClassSets=false;  compressedSchema=DirectoryServer.getDefaultCompressedSchema();  encodedRepresentation=0x00;}  }
class C{  K highestKey(){  Comparator<? super K> cmp=m.comparator;  ConcurrentSkipListMap.Node<K,V> n=hiNode(cmp);  if (n != null) {    K last=n.key;    if (inBounds(last,cmp))     return last;  }  throw new NoSuchElementException();}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit) throws InterruptedException {  if (e == null)   throw new NullPointerException();  long nanos=unit.toNanos(timeout);  int c=-1;  final ReentrantLock putLock=this.putLock;  final AtomicInteger count=this.count;  putLock.lockInterruptibly();  try {    while (count.get() == capacity) {      if (nanos <= 0)       return false;      nanos=notFull.awaitNanos(nanos);    }    enqueue(new Node<E>(e));    c=count.getAndIncrement();    if (c + 1 < capacity)     notFull.signal();  }  finally {    putLock.unlock();  }  if (c == 0)   signalNotEmpty();  return true;}  }
class C{  public int enumerate(ThreadGroup[] groups){  return enumerate(groups,true);}  }
class C{  public Referral createReferral(String realmName,String referralType,Set values) throws AMConsoleException {  Referral referral=null;  try {    PolicyManager policyMgr=getPolicyManager(realmName);    if (policyMgr != null) {      ReferralTypeManager referralTypeMgr=policyMgr.getReferralTypeManager();      referral=referralTypeMgr.getReferral(referralType);      referral.setValues(values);    }  } catch (  NameNotFoundException e) {    throw new AMConsoleException(getErrorString(e));  }catch (  PolicyException e) {    throw new AMConsoleException(getErrorString(e));  }  return referral;}  }
class C{  public synchronized void stop(){  if (!isRunning)   return;  isRunning=false;  try {    sock.close();  } catch (  IOException e) {    e.printStackTrace();  }  Collection en=messageChannels.values();  for (Iterator it=en.iterator(); it.hasNext(); ) {    TLSMessageChannel next=(TLSMessageChannel)it.next();    next.close();  }  for (Iterator incomingMCIterator=incomingMessageChannels.values().iterator(); incomingMCIterator.hasNext(); ) {    TLSMessageChannel next=(TLSMessageChannel)incomingMCIterator.next();    next.close();  }  this.notify();}  }
class C{  public JTextField(String text,int columns){  this(null,text,columns);}  }
class C{  public BAD_PARAM(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  protected void serializeText(Text node) throws SAXException {  if (fNextIsRaw) {    fNextIsRaw=false;    fSerializer.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");    dispatachChars(node);    fSerializer.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");  } else {    boolean bDispatch=false;    if ((fFeatures & WELLFORMED) != 0) {      isTextWellFormed(node);    }    boolean isElementContentWhitespace=false;    if (fIsLevel3DOM) {      isElementContentWhitespace=node.isElementContentWhitespace();    }    if (isElementContentWhitespace) {      if ((fFeatures & ELEM_CONTENT_WHITESPACE) != 0) {        bDispatch=true;      }    } else {      bDispatch=true;    }    if (!applyFilter(node,NodeFilter.SHOW_TEXT)) {      return;    }    if (bDispatch) {      dispatachChars(node);    }  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String siteName=getStringOptionValue(IArgument.SITE_NAME);  List secondaryURLs=(List)rc.getOption(IArgument.SECONDARY_URLS);  String[] params={siteName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_ADD_SITE_FAILOVER_URLS",params);    if (SiteConfiguration.isSiteExist(adminSSOToken,siteName)) {      SiteConfiguration.addSiteSecondaryURLs(adminSSOToken,siteName,secondaryURLs);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("add-site-secondary-urls-succeeded"),(Object[])params));    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("add-site-secondary-urls-no-exists"),(Object[])params));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_ADD_SITE_FAILOVER_URLS",params);  } catch (  SSOException e) {    String[] args={siteName,e.getMessage()};    debugError("AddSiteFailoverURLs.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_SITE_FAILOVER_URLS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  ConfigurationException e) {    String[] args={siteName,e.getMessage()};    debugError("AddSiteFailoverURLs.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_SITE_FAILOVER_URLS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={siteName,e.getMessage()};    debugError("AddSiteFailoverURLs.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_SITE_FAILOVER_URLS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public String post(String url,String json,final int expectedStatusCode){  return post(url,json,Collections.<String,String>emptyMap(),expectedStatusCode);}  }
class C{  public void stopThread(){  runStatus=false;}  }
class C{  private void paint(Painter p,SynthContext ctx,Graphics g,int x,int y,int w,int h,AffineTransform transform){  if (p != null) {    if (g instanceof Graphics2D) {      Graphics2D gfx=(Graphics2D)g;      if (transform != null) {        gfx.transform(transform);      }      gfx.translate(x,y);      p.paint(gfx,ctx.getComponent(),w,h);      gfx.translate(-x,-y);      if (transform != null) {        try {          gfx.transform(transform.createInverse());        } catch (        NoninvertibleTransformException e) {          e.printStackTrace();        }      }    } else {      BufferedImage img=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);      Graphics2D gfx=img.createGraphics();      if (transform != null) {        gfx.transform(transform);      }      p.paint(gfx,ctx.getComponent(),w,h);      gfx.dispose();      g.drawImage(img,x,y,null);      img=null;    }  }}  }
class C{  private void verifyTable(String database,String table) throws ItemNotFoundException {  String key=database + table;  Identifier tableId=new Identifier(database,table);  Element e=tableCache.get(key);  if (e == null || e.getObjectValue() == null) {    e=new Element(key,(Boolean)tableRepo.exists(tableId));  }  if (!(Boolean)e.getObjectValue()) {    throw new ItemNotFoundException("Table not found: " + tableId.toString());  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardTo();}  }
class C{  public SubjectDecision evaluate(String realm,SubjectAttributesManager mgr,Subject subject,String resourceName,Map<String,Set<String>> environment) throws EntitlementException {  boolean satified=false;  Set publicCreds=subject.getPublicCredentials();  if ((publicCreds != null) && !publicCreds.isEmpty()) {    Map<String,Set<String>> attributes=(Map<String,Set<String>>)publicCreds.iterator().next();    Set<String> values=attributes.get(SubjectAttributesCollector.NAMESPACE_IDENTITY + GROUP_NAME);    satified=(values != null) ? values.contains(getID()) : false;  }  satified=satified ^ isExclusive();  return new SubjectDecision(satified,Collections.EMPTY_MAP);}  }
class C{  public Object newInstance(Class javaContentInterface) throws JAXBException {  if (javaContentInterface == null) {    throw new JAXBException(Messages.format(Messages.CI_NOT_NULL));  }  try {    Class c=gi.getDefaultImplementation(javaContentInterface);    if (c == null)     throw new JAXBException(Messages.format(Messages.MISSING_INTERFACE,javaContentInterface));    return c.newInstance();  } catch (  Exception e) {    throw new JAXBException(e);  }}  }
class C{  public static Response.Builder readHttp2HeadersList(List<Header> headerBlock) throws IOException {  String status=null;  Headers.Builder headersBuilder=new Headers.Builder();  for (int i=0, size=headerBlock.size(); i < size; i++) {    ByteString name=headerBlock.get(i).name;    String value=headerBlock.get(i).value.utf8();    if (name.equals(RESPONSE_STATUS)) {      status=value;    } else     if (!HTTP_2_SKIPPED_RESPONSE_HEADERS.contains(name)) {      headersBuilder.add(name.utf8(),value);    }  }  if (status == null)   throw new ProtocolException("Expected ':status' header not present");  StatusLine statusLine=StatusLine.parse("HTTP/1.1 " + status);  return new Response.Builder().protocol(Protocol.HTTP_2).code(statusLine.code).message(statusLine.message).headers(headersBuilder.build());}  }
class C{  public boolean isActivated() throws AMException, SSOException {  return getStringAttribute(statusAN).equalsIgnoreCase("active");}  }
class C{  public XADataSource(PoolConfiguration poolProperties){  super(poolProperties);}  }
class C{  private static boolean isAlphanum(char p_char){  return (isAlpha(p_char) || isDigit(p_char));}  }
class C{  private void validateClassName(String className){  String nvalue=className.trim();  if (!nvalue.matches(CLASS_RE)) {    throw PropertyException.illegalPropertyValueException(this,className);  }}  }
class C{  Expression compileFunction(int opPos) throws TransformerException {  int endFunc=opPos + getOp(opPos + 1) - 1;  opPos=getFirstChildPos(opPos);  int funcID=getOp(opPos);  opPos++;  if (-1 != funcID) {    Function func=m_functionTable.getFunction(funcID);    if (func instanceof FuncExtFunctionAvailable)     ((FuncExtFunctionAvailable)func).setFunctionTable(m_functionTable);    func.postCompileStep(this);    try {      int i=0;      for (int p=opPos; p < endFunc; p=getNextOpPos(p), i++) {        func.setArg(compile(p),i);      }      func.checkNumberArgs(i);    } catch (    WrongNumberArgsException wnae) {      java.lang.String name=m_functionTable.getFunctionName(funcID);      m_errorHandler.fatalError(new TransformerException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ONLY_ALLOWS,new Object[]{name,wnae.getMessage()}),m_locator));    }    return func;  } else {    error(XPATHErrorResources.ER_FUNCTION_TOKEN_NOT_FOUND,null);    return null;  }}  }
class C{  public void push(final boolean value){  push(value ? 1 : 0);}  }
class C{  private static String buildCacheKey(String realm,String entityId){  return realm + "//" + entityId;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  String attrValue;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(4);  testEmployee.setAttribute("district","dallas");  attrValue=testEmployee.getAttribute("district");  assertEquals("elementAddNewAttributeAssert","dallas",attrValue);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns07.class,args);}  }
class C{  public InheritableThreadLocal(){}  }
class C{  public Builder names(final Collection<String> names){  this.names.addAll(names);  return this;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  StringBuffer xml=new StringBuffer();  String NS="";  String NSP="";  String assertNS="";  String assertNSP="";  if (declareNS) {    NS=SAML2Constants.PROTOCOL_DECLARE_STR;    assertNS=SAML2Constants.ASSERTION_DECLARE_STR;  }  if (includeNSPrefix) {    NSP=SAML2Constants.PROTOCOL_PREFIX;    assertNSP=SAML2Constants.ASSERTION_PREFIX;  }  xml.append("<").append(NSP).append(elementName);  xml.append(NS).append(" ");  if (comparison == null) {    comparison="exact";  }  xml.append("Comparison=\"");  xml.append(comparison);  xml.append("\">");  if ((authnContextClassRef != null) && (authnContextDeclRef != null)) {    throw new SAML2Exception("");  }  if ((authnContextClassRef != null) && (authnContextClassRef != Collections.EMPTY_LIST)) {    Iterator it=authnContextClassRef.iterator();    while (it.hasNext()) {      String element=(String)it.next();      xml.append("<").append(assertNSP);      xml.append("AuthnContextClassRef").append(assertNS).append(">");      xml.append(element);      xml.append("</").append(assertNSP);      xml.append("AuthnContextClassRef").append(">");    }  }  if ((authnContextDeclRef != null) && (authnContextDeclRef != Collections.EMPTY_LIST)) {    Iterator it=authnContextDeclRef.iterator();    while (it.hasNext()) {      String element=(String)it.next();      xml.append("<").append(assertNSP);      xml.append("AuthnContextDeclRef").append(assertNS).append(">");      xml.append(element);      xml.append("</").append(assertNSP);      xml.append("AuthnContextDeclRef").append(">");    }  }  xml.append("</").append(NSP).append(elementName).append(">");  return xml.toString();}  }
class C{  public void layoutContainer(Container parent){  JViewport vp=(JViewport)parent;  Component view=vp.getView();  Scrollable scrollableView=null;  if (view == null) {    return;  } else   if (view instanceof Scrollable) {    scrollableView=(Scrollable)view;  }  Insets insets=vp.getInsets();  Dimension viewPrefSize=view.getPreferredSize();  Dimension vpSize=vp.getSize();  Dimension extentSize=vp.toViewCoordinates(vpSize);  Dimension viewSize=new Dimension(viewPrefSize);  if (scrollableView != null) {    if (scrollableView.getScrollableTracksViewportWidth()) {      viewSize.width=vpSize.width;    }    if (scrollableView.getScrollableTracksViewportHeight()) {      viewSize.height=vpSize.height;    }  }  Point viewPosition=vp.getViewPosition();  if (scrollableView == null || vp.getParent() == null || vp.getParent().getComponentOrientation().isLeftToRight()) {    if ((viewPosition.x + extentSize.width) > viewSize.width) {      viewPosition.x=Math.max(0,viewSize.width - extentSize.width);    }  } else {    if (extentSize.width > viewSize.width) {      viewPosition.x=viewSize.width - extentSize.width;    } else {      viewPosition.x=Math.max(0,Math.min(viewSize.width - extentSize.width,viewPosition.x));    }  }  if ((viewPosition.y + extentSize.height) > viewSize.height) {    viewPosition.y=Math.max(0,viewSize.height - extentSize.height);  }  if (scrollableView == null) {    if ((viewPosition.x == 0) && (vpSize.width > viewPrefSize.width)) {      viewSize.width=vpSize.width;    }    if ((viewPosition.y == 0) && (vpSize.height > viewPrefSize.height)) {      viewSize.height=vpSize.height;    }  }  vp.setViewPosition(viewPosition);  vp.setViewSize(viewSize);}  }
class C{  protected boolean isBlockTag(AttributeSet attr){  Object o=attr.getAttribute(StyleConstants.NameAttribute);  if (o instanceof HTML.Tag) {    HTML.Tag name=(HTML.Tag)o;    return name.isBlock();  }  return false;}  }
class C{  protected void onRequestHandlerNotSpecified(RequestContext requestContext) throws ServletException {  ViewBeanManager viewBeanManager=requestContext.getViewBeanManager();  ViewBean targetView=viewBeanManager.getViewBean(PWResetInvalidURLViewBean.class);  targetView.forwardTo(requestContext);  throw new CompleteRequestException();}  }
class C{  public int gatherInt(String errorMsg,int maxValue) throws XMPException {  int value=0;  boolean success=false;  char ch=ch(pos);  while ('0' <= ch && ch <= '9') {    value=(value * 10) + (ch - '0');    success=true;    pos++;    ch=ch(pos);  }  if (success) {    if (value > maxValue) {      return maxValue;    } else     if (value < 0) {      return 0;    } else {      return value;    }  } else {    throw new XMPException(errorMsg,XMPError.BADVALUE);  }}  }
class C{  public Builder optionalAttributes(final String... attributeNamesOrOIDs){  this.optionalAttributes.addAll(asList(attributeNamesOrOIDs));  return this;}  }
class C{  public boolean computeScrollOffset(){  if (isFinished()) {    return false;  }switch (mMode) {case SCROLL_MODE:    long time=AnimationUtils.currentAnimationTimeMillis();  final long elapsedTime=time - mScrollerX.mStartTime;final int duration=mScrollerX.mDuration;if (elapsedTime < duration) {final float q=mInterpolator.getInterpolation(elapsedTime / (float)duration);mScrollerX.updateScroll(q);mScrollerY.updateScroll(q);} else {abortAnimation();}break;case FLING_MODE:if (!mScrollerX.mFinished) {if (!mScrollerX.update()) {if (!mScrollerX.continueWhenFinished()) {mScrollerX.finish();}}}if (!mScrollerY.mFinished) {if (!mScrollerY.update()) {if (!mScrollerY.continueWhenFinished()) {mScrollerY.finish();}}}break;}return true;}  }
class C{  public ModifyDNResponseProtocolOp(int resultCode,LocalizableMessage errorMessage){  this.resultCode=resultCode;  this.errorMessage=errorMessage;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node fcNode;  Node psNode;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(2);  fcNode=employeeNode.getFirstChild();  psNode=fcNode.getPreviousSibling();  assertNull("nodeGetPreviousSiblingNullAssert1",psNode);}  }
class C{  public void forgetLastBug(){  lastWarning=null;}  }
class C{  EmulatedFields emulatedFields(){  return emulatedFields;}  }
class C{  public ObjectIdentifier(String strOid){  this.oid=toIntArray(strOid);  this.soid=strOid;}  }
class C{  public ReflectionException(java.lang.Exception e){  super();  exception=e;}  }
class C{  private Object writeReplace(){  return new Ser(Ser.ZONE_REGION_TYPE,this);}  }
class C{  public static Component createVerticalGlue(){  return new Filler(new Dimension(0,0),new Dimension(0,0),new Dimension(0,Short.MAX_VALUE));}  }
class C{  public ByteStringBuilder appendInt(int i){  ensureAdditionalCapacity(4);  for (int j=length + 3; j >= length; j--) {    buffer[j]=(byte)i;    i>>>=8;  }  length+=4;  return this;}  }
class C{  public boolean removeFirstOccurrence(Object o){  return remove(o);}  }
class C{  private void dispatch(Mark where,String errCode,Object[] args,Exception e) throws JasperException {  String file=null;  String errMsg=null;  int line=-1;  int column=-1;  boolean hasLocation=false;  if (errCode != null) {    errMsg=Localizer.getMessage(errCode,args);  } else   if (e != null) {    errMsg=e.getMessage();  }  if (where != null) {    if (jspcMode) {      try {        file=where.getURL().toString();      } catch (      MalformedURLException me) {        file=where.getFile();      }    } else {      file=where.getFile();    }    line=where.getLineNumber();    column=where.getColumnNumber();    hasLocation=true;  }  Exception nestedEx=e;  if ((e instanceof SAXException) && (((SAXException)e).getException() != null)) {    nestedEx=((SAXException)e).getException();  }  if (hasLocation) {    errHandler.jspError(file,line,column,errMsg,nestedEx);  } else {    errHandler.jspError(errMsg,nestedEx);  }}  }
class C{  public PdfSignatureBuildProperties(PdfDictionary dict){  super(dict);}  }
class C{  ByteVector put12(final int b,final int s){  int length=this.length;  if (length + 3 > data.length) {    enlarge(3);  }  byte[] data=this.data;  data[length++]=(byte)b;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public void testKeyPairGenerator02() throws NoSuchAlgorithmException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  KeyPairGenerator kpg;  for (int i=0; i < algs.length; i++) {    kpg=KeyPairGenerator.getInstance(algs[i]);    assertEquals("Incorrect algorithm ",kpg.getAlgorithm().toUpperCase(),algs[i].toUpperCase());  }}  }
class C{  @Override public void toString(StringBuilder buffer,int indent){  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  buffer.append(indentBuf);  buffer.append("Abandon Request");  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  ID to Abandon:  ");  buffer.append(idToAbandon);  buffer.append(EOL);}  }
class C{  void put(final MethodWriter owner,final ByteVector out,final int source,final boolean wideOffset){  if ((status & RESOLVED) == 0) {    if (wideOffset) {      addReference(-1 - source,out.length);      out.putInt(-1);    } else {      addReference(source,out.length);      out.putShort(-1);    }  } else {    if (wideOffset) {      out.putInt(position - source);    } else {      out.putShort(position - source);    }  }}  }
class C{  public boolean isBorderPainted(){  return paintBorder;}  }
class C{  public Vector multiply(float by){  float x=vals[I1] * by;  float y=vals[I2] * by;  float z=vals[I3] * by;  return new Vector(x,y,z);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(30,5);  childData=child.getData();  assertEquals("characterdataDeleteDataEndAssert","1230 North Ave. Dallas, Texas ",childData);}  }
class C{  public UnknownDependencyException(){}  }
class C{  public JPasswordField(){  this(null,null,0);}  }
class C{  public Enumeration pathFromAncestorEnumeration(TreeNode ancestor){  return new PathBetweenNodesEnumeration(ancestor,this);}  }
class C{  public void next(){  index++;}  }
class C{  public java.lang.String toString(){  return this.toString(true,false);}  }
class C{  public String toString(){  return (toXML());}  }
class C{  @DataProvider(name="bigIntegerValues") public Object[][] createBigIntegerValues(){  return new Object[][]{{"0123456",true},{"42",true},{"0",true},{"",false},{"0xFF",false},{"NULL",false},{"Not a Number",false},{"2147483648",true}};}  }
class C{  public void insert_ushort(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ushort",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_ushort(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private Collection<ExpandRoomFreespaceIncomplete> restrain_shape(ExpandRoomFreespaceIncomplete p_incomplete_room,ShapeTile p_obstacle_shape){  ShapeTileSimplex obstacle_simplex=p_obstacle_shape.to_Simplex();  ShapeTile shape_to_be_contained=p_incomplete_room.get_contained_shape().to_Simplex();  Collection<ExpandRoomFreespaceIncomplete> result=new LinkedList<ExpandRoomFreespaceIncomplete>();  ShapeTile room_shape=p_incomplete_room.get_shape();  int layer=p_incomplete_room.get_layer();  if (shape_to_be_contained.is_empty()) {    if (r_board.debug(Mdbg.SHAPE,Ldbg.SPC_C))     System.out.println("ShapeSearchTree.restrain_shape: p_shape_to_be_contained is empty");    return result;  }  PlaLineInt cut_line=null;  double cut_line_distance=-1;  for (int index=0; index < obstacle_simplex.border_line_count(); ++index) {    PlaSegmentInt curr_line_segment=new PlaSegmentInt(obstacle_simplex,index);    if (room_shape.is_intersected_interiour_by(curr_line_segment)) {      PlaLineInt curr_line=obstacle_simplex.border_line(index);      double curr_min_distance=shape_to_be_contained.distance_to_the_left(curr_line);      if (curr_min_distance > cut_line_distance) {        cut_line_distance=curr_min_distance;        cut_line=curr_line.opposite();      }    }  }  if (cut_line != null) {    ShapeTile result_piece=new ShapeTileSimplex(cut_line);    if (room_shape != null) {      result_piece=room_shape.intersection(result_piece);    }    if (result_piece.dimension().is_area()) {      result.add(new ExpandRoomFreespaceIncomplete(result_piece,layer,shape_to_be_contained));    }  } else {    if (shape_to_be_contained.dimension().is_lt_point()) {      return result;    }    for (int i=0; i < obstacle_simplex.border_line_count(); ++i) {      PlaSegmentInt curr_line_segment=new PlaSegmentInt(obstacle_simplex,i);      if (room_shape.is_intersected_interiour_by(curr_line_segment)) {        PlaLineInt curr_line=obstacle_simplex.border_line(i);        if (shape_to_be_contained.side_of(curr_line) == PlaSide.COLLINEAR) {          cut_line=curr_line.opposite();          break;        }      }    }    if (cut_line == null) {      return result;    }    ShapeTile cut_half_plane=new ShapeTileSimplex(cut_line);    ShapeTile new_shape_to_be_contained=shape_to_be_contained.intersection(cut_half_plane);    ShapeTile result_piece;    if (room_shape == null) {      result_piece=cut_half_plane;    } else {      result_piece=room_shape.intersection(cut_half_plane);    }    if (result_piece.dimension().is_area()) {      result.add(new ExpandRoomFreespaceIncomplete(result_piece,layer,new_shape_to_be_contained));    }    ShapeTile opposite_half_plane=new ShapeTileSimplex(cut_line.opposite());    ShapeTile rest_piece;    if (room_shape == null) {      rest_piece=opposite_half_plane;    } else {      rest_piece=room_shape.intersection(opposite_half_plane);    }    if (rest_piece.dimension().is_area()) {      ShapeTile rest_shape_to_be_contained=shape_to_be_contained.intersection(opposite_half_plane);      ExpandRoomFreespaceIncomplete rest_incomplete_room=new ExpandRoomFreespaceIncomplete(rest_piece,layer,rest_shape_to_be_contained);      result.addAll(restrain_shape(rest_incomplete_room,obstacle_simplex));    }  }  return result;}  }
class C{  @Override public List<Foo> findAll(){  return findAll(QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  public boolean isEmpty(){  return true;}  }
class C{  public void writeBindResult(final int messageID,final BindResult result) throws IOException {  logger.trace("ENCODE LDAP BIND RESULT(messageID=%d, result=%s)",messageID,result);  writeMessageHeader(messageID);{    writeResultHeader(LDAP.OP_TYPE_BIND_RESPONSE,result);{      final ByteString saslCredentials=result.getServerSASLCredentials();      if (saslCredentials != null && saslCredentials.length() > 0) {        writer.writeOctetString(LDAP.TYPE_SERVER_SASL_CREDENTIALS,result.getServerSASLCredentials());      }    }    writeResultFooter(writer);  }  writeMessageFooter(result.getControls());}  }
class C{  @Override public void write(int oneChar){synchronized (lock) {    buf.append((char)oneChar);  }}  }
class C{  public byte[] decode(byte[] ascii){  return fromAscii(ascii);}  }
class C{  public boolean isSessionConstraintEnabled(){  return hotSwappableSessionServiceConfig.sessionConstraintEnabled;}  }
class C{  private void createContainerEntry(DN dn) throws ADSContextException {  createEntry(newAddRequest(dn).addAttribute("objectclass","top","ds-cfg-branch"));}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("<role rolename=\"");  sb.append(rolename);  sb.append("\"");  if (description != null) {    sb.append(" description=\"");    sb.append(description);    sb.append("\"");  }  sb.append("/>");  return (sb.toString());}  }
class C{  void initializeParser(OutputStream outStream) throws ArgumentException {  taskArgs=new TaskScheduleArgs();  initializeGlobalArguments(outStream);  try {    defaultAdminPort=secureArgsList.getAdminPortFromConfig();  } catch (  Throwable t) {  }  secureArgsList.initArgumentsWithConfiguration(this);  createEnableReplicationSubCommand();  createDisableReplicationSubCommand();  createRelatedServersOptions();  createInitializeReplicationSubCommand();  createInitializeAllReplicationSubCommand();  createPreExternalInitializationSubCommand();  createPostExternalInitializationSubCommand();  createResetChangeNumberSubCommand();  createStatusReplicationSubCommand();  createPurgeHistoricalSubCommand();}  }
class C{  public boolean isInMemory(){  return !isThresholdExceeded();}  }
class C{  private Object writeReplace(){  return new Ser(Ser.DURATION_TYPE,this);}  }
class C{  public String toString(){  int len=this.name.length();  if (this.value != null)   len+=1 + this.value.length();  CharArrayBuffer buffer=new CharArrayBuffer(len);  buffer.append(this.name);  if (this.value != null) {    buffer.append("=");    buffer.append(this.value);  }  return buffer.toString();}  }
class C{  public void keyTyped(KeyEvent e){  ((KeyListener)a).keyTyped(e);  ((KeyListener)b).keyTyped(e);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String badSubstring;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      badSubstring=child.substringData(10,-3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public boolean hasUnsupportedCriticalExtension(){  Set extns=getCriticalExtensionOIDs();  if (extns == null) {    return false;  }  extns.remove(RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT);  extns.remove(RFC3280CertPathUtilities.DELTA_CRL_INDICATOR);  return !extns.isEmpty();}  }
class C{  private long exportBackend(OutputStream output,boolean checksumOutput) throws DirectoryException {  Backend<?> backend=getBackend();  try {    String lockFile=LockFileManager.getBackendLockFileName(backend);    StringBuilder failureReason=new StringBuilder();    if (!LockFileManager.acquireSharedLock(lockFile,failureReason)) {      LocalizableMessage message=ERR_LDIFEXPORT_CANNOT_LOCK_BACKEND.get(backend.getBackendID(),failureReason);      logger.error(message);      throw new DirectoryException(ResultCode.OTHER,message);    }  } catch (  Exception e) {    LocalizableMessage message=ERR_LDIFEXPORT_CANNOT_LOCK_BACKEND.get(backend.getBackendID(),stackTraceToSingleLineString(e));    logger.error(message);    throw new DirectoryException(ResultCode.OTHER,message);  }  long numberOfEntries=backend.getNumberOfEntriesInBaseDN(getBaseDN());  long entryCount=Math.min(numberOfEntries,1000);  OutputStream os;  ReplLDIFOutputStream ros=null;  if (checksumOutput) {    ros=new ReplLDIFOutputStream(entryCount);    os=ros;    try {      os.write(Long.toString(numberOfEntries).getBytes());    } catch (    Exception e) {    }  } else {    os=output;  }  LDIFExportConfig exportConfig=new LDIFExportConfig(os);  exportConfig.setIncludeBranches(newArrayList(getBaseDN()));  if (checksumOutput) {    String includeAttributeStrings[]={"objectclass","sn","cn","entryuuid"};    Set<AttributeType> includeAttributes=new HashSet<>();    for (    String attrName : includeAttributeStrings) {      includeAttributes.add(DirectoryServer.getSchema().getAttributeType(attrName));    }    exportConfig.setIncludeAttributes(includeAttributes);  }  long genID=0;  try {    backend.exportLDIF(exportConfig);  } catch (  DirectoryException de) {    if (ros == null || ros.getNumExportedEntries() < entryCount) {      LocalizableMessage message=ERR_LDIFEXPORT_ERROR_DURING_EXPORT.get(de.getMessageObject());      logger.error(message);      throw new DirectoryException(ResultCode.OTHER,message);    }  }catch (  Exception e) {    LocalizableMessage message=ERR_LDIFEXPORT_ERROR_DURING_EXPORT.get(stackTraceToSingleLineString(e));    logger.error(message);    throw new DirectoryException(ResultCode.OTHER,message);  } finally {    exportConfig.close();    if (checksumOutput) {      genID=ros.getChecksumValue();    }    try {      String lockFile=LockFileManager.getBackendLockFileName(backend);      StringBuilder failureReason=new StringBuilder();      if (!LockFileManager.releaseLock(lockFile,failureReason)) {        LocalizableMessage message=WARN_LDIFEXPORT_CANNOT_UNLOCK_BACKEND.get(backend.getBackendID(),failureReason);        logger.warn(message);        throw new DirectoryException(ResultCode.OTHER,message);      }    } catch (    Exception e) {      LocalizableMessage message=WARN_LDIFEXPORT_CANNOT_UNLOCK_BACKEND.get(backend.getBackendID(),stackTraceToSingleLineString(e));      logger.warn(message);      throw new DirectoryException(ResultCode.OTHER,message);    }  }  return genID;}  }
class C{  public void removeResourceTypeUuid(final String resourceTypeUuid){  this.resourceTypeUuids.remove(resourceTypeUuid);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  m_predicateIndex=-1;  AxesWalker walker=m_firstWalker;  while (null != walker) {    walker.fixupVariables(vars,globalsSize);    walker=walker.getNextWalker();  }}  }
class C{  public InvalidMidiDataException(){  super();}  }
class C{  public void startElement(String uri,String local) throws SAXException {  boolean isRoot=false;  String suggestion=null;  if (elementLen == 0) {    isRoot=true;    suggestion="";  }  writePendingText();  nsContext.startElement();  pushElement(uri,local);  nsContext.declareNamespace(uri,suggestion,false);  if (isRoot) {    String[] uris=nsContext.getNamespacePrefixMapper().getPreDeclaredNamespaceUris();    if (uris != null) {      for (int i=0; i < uris.length; i++) {        if (uris[i] != null)         nsContext.declareNamespace(uris[i],null,false);      }    }  }}  }
class C{  public NotificationResult(long earliestSequenceNumber,long nextSequenceNumber,TargetedNotification[] targetedNotifications){  validate(targetedNotifications,earliestSequenceNumber,nextSequenceNumber);  this.earliestSequenceNumber=earliestSequenceNumber;  this.nextSequenceNumber=nextSequenceNumber;  this.targetedNotifications=(targetedNotifications.length == 0 ? targetedNotifications : targetedNotifications.clone());}  }
class C{  public void schemaChanged(String serviceName,String version){synchronized (mapRealmToFormat) {    mapRealmToFormat.remove(ROOT);  }}  }
class C{  public static boolean isLocalDS(String hostName) throws PolicyException {  if (hostName == null) {    throw new PolicyException(ResBundleUtils.rbName,"invalid_ldap_server_host",null,null);  }  return (hostName.equalsIgnoreCase(PolicyConfig.ISDS_HOST));}  }
class C{  public static void shuffle(List<?> list,Random random){  @SuppressWarnings("unchecked") final List<Object> objectList=(List<Object>)list;  if (list instanceof RandomAccess) {    for (int i=objectList.size() - 1; i > 0; i--) {      int index=random.nextInt(i + 1);      objectList.set(index,objectList.set(i,objectList.get(index)));    }  } else {    Object[] array=objectList.toArray();    for (int i=array.length - 1; i > 0; i--) {      int index=random.nextInt(i + 1);      Object temp=array[i];      array[i]=array[index];      array[index]=temp;    }    int i=0;    ListIterator<Object> it=objectList.listIterator();    while (it.hasNext()) {      it.next();      it.set(array[i++]);    }  }}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public void resizeAndRepaint(){  revalidate();  repaint();}  }
class C{  public boolean validate(String value,String rule){  return validate(value);}  }
class C{  public final boolean equals(Object obj){  if (toString() == null) {    return (obj != null) && (obj.toString() == null);  }  if (obj instanceof Type) {    return toString().equals(obj.toString());  }  return false;}  }
class C{  public static boolean isRecognizedEncoding(String encoding){  EncodingInfo ei;  String normalizedEncoding=encoding.toUpperCase();  ei=(EncodingInfo)_encodingTableKeyJava.get(normalizedEncoding);  if (ei == null)   ei=(EncodingInfo)_encodingTableKeyMime.get(normalizedEncoding);  if (ei != null)   return true;  return false;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.JobTitleElement createJobTitleElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.JobTitleElementImpl();}  }
class C{  public int changesInProgressSize(){  return activeAndDependentChanges.size();}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public double toDouble(){  try {    return Double.valueOf(m_str).doubleValue();  } catch (  NumberFormatException nfe) {    return Double.NaN;  }}  }
class C{  void open(WriteableTransaction txn,AccessMode accessMode) throws StorageRuntimeException, ConfigException {  boolean shouldCreate=accessMode.isWriteable();  try {    id2entry=new ID2Entry(getIndexName(ID2ENTRY_TREE_NAME),newDataConfig(config));    id2entry.open(txn,shouldCreate);    id2childrenCount.open(txn,shouldCreate);    dn2id.open(txn,shouldCreate);    state.open(txn,shouldCreate);    dn2uri.open(txn,shouldCreate);    final boolean isNotEmpty=!isEmpty(txn);    for (    String idx : config.listBackendIndexes()) {      BackendIndexCfg indexCfg=config.getBackendIndex(idx);      CryptoSuite cryptoSuite=newCryptoSuite(indexCfg.isConfidentialityEnabled());      final AttributeIndex index=newAttributeIndex(indexCfg,cryptoSuite);      index.open(txn,shouldCreate);      if (!index.isTrusted() && isNotEmpty) {        logger.info(NOTE_INDEX_ADD_REQUIRES_REBUILD,index.getName());      }      attrIndexMap.put(indexCfg.getAttribute(),index);      attrCryptoMap.put(indexCfg.getAttribute(),cryptoSuite);    }    for (    String idx : config.listBackendVLVIndexes()) {      BackendVLVIndexCfg vlvIndexCfg=config.getBackendVLVIndex(idx);      VLVIndex vlvIndex=new VLVIndex(vlvIndexCfg,state,storage,this,txn);      vlvIndex.open(txn,shouldCreate);      if (!vlvIndex.isTrusted() && isNotEmpty) {        logger.info(NOTE_INDEX_ADD_REQUIRES_REBUILD,vlvIndex.getName());      }      vlvIndexMap.put(vlvIndexCfg.getName().toLowerCase(),vlvIndex);    }  } catch (  StorageRuntimeException de) {    logger.traceException(de);    close();    throw de;  }}  }
class C{  public boolean visitUnionPattern(ExpressionOwner owner,UnionPattern pattern){  return true;}  }
class C{  private MacKeyEntry generateAndPublishKeyEntry(final String algorithm,final int keyLengthBits) throws CryptoManagerException {  Reject.ifNull(algorithm);  final MacKeyEntry keyEntry=generateKeyEntry(algorithm,keyLengthBits);  publishKeyEntry(keyEntry);  macKeyEntryCache.put(keyEntry.getKeyID(),keyEntry);  return keyEntry;}  }
class C{  public boolean nextTile() throws ModelControlException {  boolean movedToRow=super.nextTile();  if (movedToRow) {    curTile=getTileIndex();    curCallback=callbacks[curTile];    setDisplayFieldValue(TXT_INDEX,Integer.toString(curTile));    if (curCallback instanceof HiddenValueCallback) {      setHiddenValueCallbackInfo((HiddenValueCallback)curCallback);    } else     if (curCallback instanceof NameCallback) {      setNameCallbackInfo((NameCallback)curCallback);    } else     if (curCallback instanceof PasswordCallback) {      setPasswordCallbackInfo((PasswordCallback)curCallback);    } else     if (curCallback instanceof ChoiceCallback) {      setChoiceCallbackInfo((ChoiceCallback)curCallback);    } else     if (curCallback instanceof TextOutputCallback) {      setTextOutputCallbackInfo((TextOutputCallback)curCallback);    } else {      setDisplayFieldValue(TXT_PROMPT,"");      setDisplayFieldValue(TXT_VALUE,"");      setDisplayFieldValue(TXT_INFO,"");      setDisplayFieldValue(SCRIPT_CONTENT,"");      setDisplayFieldValue(TEXT_CONTENT,"");      setDisplayFieldValue(MESSAGE_TYPE,"");      CallBackChoiceTiledView tView=(CallBackChoiceTiledView)getChild(TILED_CHOICE);      tView.setChoices(curTile,null,0);    }  }  return movedToRow;}  }
class C{  public void readEnumerated() throws IOException {  if (tag != ASN1Constants.TAG_ENUM) {    throw expected("enumerated");  }  if (length == 0) {    throw new ASN1Exception("ASN.1 enumerated: wrong length for identifier at [" + tagOffset + "]");  }  readContent();  if (length > 1) {    int bits=buffer[contentOffset] & 0xFF;    if (buffer[contentOffset + 1] < 0) {      bits+=0x100;    }    if (bits == 0 || bits == 0x1FF) {      throw new ASN1Exception("ASN.1 enumerated: wrong content at [" + contentOffset + "]. An integer MUST be encoded in minimum number of octets");    }  }}  }
class C{  static <T>PropertyEditorModification<T> createRemoveModification(PropertyDefinition<T> propertyDefinition,SortedSet<T> removedValues,SortedSet<T> originalValues){  return new PropertyEditorModification<>(propertyDefinition,Type.REMOVE,removedValues,originalValues);}  }
class C{  protected void createInputAttributes(Element element,MutableAttributeSet set){  if (element.getAttributes().getAttributeCount() > 0 || element.getEndOffset() - element.getStartOffset() > 1 || element.getEndOffset() < element.getDocument().getLength()) {    set.removeAttributes(set);    set.addAttributes(element.getAttributes());    set.removeAttribute(StyleConstants.ComponentAttribute);    set.removeAttribute(StyleConstants.IconAttribute);    set.removeAttribute(AbstractDocument.ElementNameAttribute);    set.removeAttribute(StyleConstants.ComposedTextAttribute);  }}  }
class C{  public void arrayLength(){  mv.visitInsn(Opcodes.ARRAYLENGTH);}  }
class C{  public static boolean isJavaKeyword(String key){  int i=0;  int j=javaKeywords.length;  while (i < j) {    int k=(i + j) / 2;    int result=javaKeywords[k].compareTo(key);    if (result == 0) {      return true;    }    if (result < 0) {      i=k + 1;    } else {      j=k;    }  }  return false;}  }
class C{  Node(Node<K,V> next){  this.key=null;  this.value=this;  this.next=next;}  }
class C{  public void testCertificateFactory13() throws IOException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  byte[] enc={(byte)0,(byte)2,(byte)3,(byte)4,(byte)5};  MyCertPath mc=new MyCertPath(enc);  ByteArrayOutputStream os=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(os);  oos.writeObject(mc);  oos.flush();  oos.close();  byte[] arr=os.toByteArray();  ByteArrayInputStream is=new ByteArrayInputStream(arr);  for (int i=0; i < certFs.length; i++) {    try {      certFs[i].generateCertPath(is);      fail("CertificateException must be thrown because input stream contains incorrect datas");    } catch (    CertificateException e) {    }    Iterator<String> it=certFs[i].getCertPathEncodings();    while (it.hasNext()) {      try {        certFs[i].generateCertPath(is,it.next());        fail("CertificateException must be thrown because input stream contains incorrect datas");      } catch (      CertificateException e) {      }    }  }}  }
class C{  public AndCondition(Set<EntitlementCondition> eConditions){  super(eConditions);}  }
class C{  protected void parseDOMChileElements(ListIterator iter) throws SAML2Exception {  super.parseDOMChileElements(iter);  AssertionFactory aFactory=AssertionFactory.getInstance();  while (iter.hasNext()) {    Element childElement=(Element)iter.next();    String localName=childElement.getLocalName();    if (SAML2Constants.ASSERTION_ID_REF.equals(localName)) {      AssertionIDRef assertionIDRef=aFactory.createAssertionIDRef(childElement);      if (assertionIDRefs == null) {        assertionIDRefs=new ArrayList();      }      assertionIDRefs.add(assertionIDRef);    } else {      iter.previous();      break;    }  }  if (assertionIDRefs == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("schemaViolation"));  }}  }
class C{  protected void onSessionTimeout(RequestContext requestContext) throws ServletException {}  }
class C{  public String toString(){  if (stringForm == null) {    StringBuilder sb=new StringBuilder(200);    sb.append("Resource Result for resourceName : ").append(resourceName).append(PolicyUtils.CRLF).append("PolicyDecision : ").append(policyDecision).append("Nested ResourceResults : ").append(resourceResults);    stringForm=sb.toString();  }  return stringForm;}  }
class C{  public RelationNotification(String notifType,Object sourceObj,long sequence,long timeStamp,String message,String id,String typeName,ObjectName objectName,String name,List<ObjectName> newValue,List<ObjectName> oldValue) throws IllegalArgumentException {  super(notifType,sourceObj,sequence,timeStamp,message);  if (!isValidBasicStrict(notifType,sourceObj,id,typeName) || !isValidUpdate(notifType,name,newValue,oldValue)) {    throw new IllegalArgumentException("Invalid parameter.");  }  relationId=id;  relationTypeName=typeName;  relationObjName=safeGetObjectName(objectName);  roleName=name;  oldRoleValue=safeGetObjectNameList(oldValue);  newRoleValue=safeGetObjectNameList(newValue);}  }
class C{  static BigInteger flipBit(BigInteger val,int n){  val.prepareJavaRepresentation();  int resSign=(val.sign == 0) ? 1 : val.sign;  int intCount=n >> 5;  int bitN=n & 31;  int resLength=Math.max(intCount + 1,val.numberLength) + 1;  int[] resDigits=new int[resLength];  int i;  int bitNumber=1 << bitN;  System.arraycopy(val.digits,0,resDigits,0,val.numberLength);  if (val.sign < 0) {    if (intCount >= val.numberLength) {      resDigits[intCount]=bitNumber;    } else {      int firstNonZeroDigit=val.getFirstNonzeroDigit();      if (intCount > firstNonZeroDigit) {        resDigits[intCount]^=bitNumber;      } else       if (intCount < firstNonZeroDigit) {        resDigits[intCount]=-bitNumber;        for (i=intCount + 1; i < firstNonZeroDigit; i++) {          resDigits[i]=-1;        }        resDigits[i]=resDigits[i]--;      } else {        i=intCount;        resDigits[i]=-((-resDigits[intCount]) ^ bitNumber);        if (resDigits[i] == 0) {          for (i++; resDigits[i] == -1; i++) {            resDigits[i]=0;          }          resDigits[i]++;        }      }    }  } else {    resDigits[intCount]^=bitNumber;  }  return new BigInteger(resSign,resLength,resDigits);}  }
class C{  public String fillParamWithEventAttrib(String paramData,Event event){  if (!database.isOpen()) {    throw new IllegalStateException(TAG + " is already closed.");  }  StringBuilder retVal=new StringBuilder();  int cursor=0;  while (cursor < paramData.length()) {    int openBracketIdx=paramData.indexOf('<',cursor);    int closeBracketIdx=paramData.indexOf('>',cursor);    if (openBracketIdx == -1 || closeBracketIdx == -1 || openBracketIdx + 1 >= closeBracketIdx) {      retVal.append(paramData.substring(cursor));      break;    }    String attr=paramData.substring(openBracketIdx + 1,closeBracketIdx);    String param=paramData.substring(openBracketIdx,closeBracketIdx + 1);    String paramAttr;    try {      paramAttr=event.getAttribute(attr);    } catch (    IllegalArgumentException e) {      paramAttr=param;    }    retVal.append(paramData.substring(cursor,openBracketIdx));    retVal.append(paramAttr);    cursor=closeBracketIdx + 1;  }  Log.d("fillParamWithEventAttrib",paramData + " -> " + retVal.toString());  return retVal.toString();}  }
class C{  public void handleButton1Request(RequestInvocationEvent event){  String name=(String)getDisplayFieldValue(CONFIG_NAME);  acModel=(AuthConfigurationModel)getModel();  try {    acModel.createAuthConfiguration(name);    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","authentication.configuration.created");    setPageSessionAttribute(AuthConfigurationModelImpl.CONFIG_NAME,name);    AuthConfigViewBean vb=(AuthConfigViewBean)getViewBean(AuthConfigViewBean.class);    unlockPageTrailForSwapping();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException amc) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",amc.getMessage());    forwardTo();  }}  }
class C{  public SearchResultEntryProtocolOp(DN dn){  this(dn,null,null,3);}  }
class C{  public void writerAttributes(final FacesContext context,final String style) throws IOException {  context.getResponseWriter().writeAttribute("id",getComponent().getClientId(),null);  String css=(String)this.component.getAttributes().get("styleClass");  if (css == null) {    css="";  }  if (style != null) {    css=css.concat(" ").concat(style);  }  if (!css.equals("")) {    context.getResponseWriter().writeAttribute("class",css,null);  }  renderPassThruAttributes(context);}  }
