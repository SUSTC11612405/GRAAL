class C{  public boolean isPassword(){  return getBooleanProperty(BOOLEAN_PROPERTY_PASSWORD);}  }
class C{  protected void backfitHoldOutSet() throws Exception {  if (m_Info.classAttribute().isNominal()) {    if (m_ClassProbs == null) {      m_ClassProbs=new double[m_Info.numClasses()];    }    System.arraycopy(m_Distribution,0,m_ClassProbs,0,m_Info.numClasses());    for (int i=0; i < m_HoldOutDist.length; i++) {      m_ClassProbs[i]+=m_HoldOutDist[i];    }    if (Utils.sum(m_ClassProbs) > 0) {      doSmoothing();      Utils.normalize(m_ClassProbs);    } else {      m_ClassProbs=null;    }  } else {    double sumOfWeightsTrainAndHoldout=m_Distribution[1] + m_HoldOutDist[0];    if (sumOfWeightsTrainAndHoldout <= 0) {      return;    }    if (m_ClassProbs == null) {      m_ClassProbs=new double[1];    } else {      m_ClassProbs[0]*=m_Distribution[1];    }    m_ClassProbs[0]+=m_HoldOutDist[1];    m_ClassProbs[0]/=sumOfWeightsTrainAndHoldout;  }  if (m_Attribute != -1) {    for (    Tree m_Successor : m_Successors) {      m_Successor.backfitHoldOutSet();    }  }}  }
class C{  public Boolean isDigitalOn(int pin){  if (this.isDigitalEnabled(pin)) {    if (pin >= 0 && pin <= 7) {      return ByteUtils.getBit(dioLsb,pin + 1);    } else     if (pin >= 10 && pin <= 12) {      return ByteUtils.getBit(dioMsb,pin - 7);    }  }  return null;}  }
class C{  protected void skipRemainingTagsInCurrentIfd() throws IOException, ExifInvalidFormatException {  int endOfTags=mIfdStartOffset + OFFSET_SIZE + TAG_SIZE * mNumOfTagInIfd;  int offset=mTiffStream.getReadByteCount();  if (offset > endOfTags) {    return;  }  if (mNeedToParseOffsetsInCurrentIfd) {    while (offset < endOfTags) {      mTag=readTag();      offset+=TAG_SIZE;      if (mTag == null) {        continue;      }      checkOffsetOrImageTag(mTag);    }  } else {    skipTo(endOfTags);  }  long ifdOffset=readUnsignedLong();  if (mIfdType == IfdId.TYPE_IFD_0 && (isIfdRequested(IfdId.TYPE_IFD_1) || isThumbnailRequested())) {    if (ifdOffset > 0) {      registerIfd(IfdId.TYPE_IFD_1,ifdOffset);    }  }}  }
class C{  @Override public ActionMap createActionMap(Application a,@Nullable View v){  return new ActionMap();}  }
class C{  public CycleBoundTick(boolean mapToLastCycle,Number number,String label,TextAnchor textAnchor,TextAnchor rotationAnchor,double angle){  super(number,label,textAnchor,rotationAnchor,angle);  this.mapToLastCycle=mapToLastCycle;}  }
class C{  @SuppressWarnings("rawtypes") public Long addUserOrganisationsByHashMap(long us,List org){  try {    if (org != null) {      for (Iterator it=org.iterator(); it.hasNext(); ) {        Integer key=(Integer)it.next();        Long newOrgId=key.longValue();        this.addUserToOrganisation(us,newOrgId,new Long(1));      }    }  } catch (  Exception ex) {    log.error("addUserOrganisationsByHashMap",ex);  }  return null;}  }
class C{  public void registerEngineMimeType(String type,ScriptEngineFactory factory){  if (type == null || factory == null)   throw new NullPointerException();  mimeTypeAssociations.put(type,factory);}  }
class C{  public void updateTag(final String tagId,final JSONObject tag) throws ServiceException {  final Transaction transaction=tagRepository.beginTransaction();  try {    tagRepository.update(tagId,tag);    transaction.commit();  } catch (  final RepositoryException e) {    if (transaction.isActive()) {      transaction.rollback();    }    LOGGER.log(Level.ERROR,"Updates a tag[id=" + tagId + "] failed",e);    throw new ServiceException(e);  }}  }
class C{  public void doImportInternal(final JobContext context) throws IOException {  doDataImport(context);}  }
class C{  public void testSendWithDelayAndOptAckDelayOff(){  PseudoTcpTestTransfer test=new PseudoTcpTestTransfer();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setDelay(50);  test.setOptAckDelay(0);  test.doTestTransfer(100000);}  }
class C{  private void drawFrequencyLine(Graphics2D graphics,double xaxis,Color color){  graphics.setColor(color);  graphics.draw(new Line2D.Double(xaxis,0.0d,xaxis,getSize().getHeight() - mSpectrumInset));}  }
class C{  public MaterialBadge(){  super(Document.get().createSpanElement(),"badge","sideBarBadge");}  }
class C{  public static void initAde() throws AdeException {  if (!Ade.isCreated()) {    Ade.create();    AdeExt.create(Ade.getAde());    logger.info("initAde() - created Ade and AdeExt singletons");  } else {    logger.warn("Attempt to initialize Ade twice.");  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("Selection"))     p_Selection="Y".equals(para[i].getParameter()); else     if (name.equals("DateInvoiced"))     p_DateInvoiced=(Timestamp)para[i].getParameter(); else     if (name.equals("AD_Org_ID"))     p_AD_Org_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("M_InOut_ID"))     p_M_InOut_ID=para[i].getParameterAsInt(); else     if (name.equals("ConsolidateDocument"))     p_ConsolidateDocument="Y".equals(para[i].getParameter()); else     if (name.equals("DocAction"))     p_docAction=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (p_DateInvoiced == null)   p_DateInvoiced=Env.getContextAsDate(getCtx(),"#Date");  if (p_DateInvoiced == null)   p_DateInvoiced=new Timestamp(System.currentTimeMillis());  if (!DocAction.ACTION_Complete.equals(p_docAction))   p_docAction=DocAction.ACTION_Prepare;}  }
class C{  void undent(){  lmargin=lmargin - width;}  }
class C{  protected Anonymous_parameterList_1_Impl(){  super();}  }
class C{  public static String evaluateTemplate(String template) throws IOException {  return Templates.evaluateExternal(Templates.evaluateHostName(template));}  }
class C{  public void testAtomicReplicated() throws Exception {  checkAtomic(REPLICATED);}  }
class C{  public static long clearC(long v,int off){  v&=~(1L << off);  return v;}  }
class C{  public static void startRinging(Context context){  Log.d(LOG_TAG,"startRinging");  if (null != mRingTone) {    Log.d(LOG_TAG,"already ringing");    return;  }  mRingTone=getRingTone(context,R.raw.ring,"ring.ogg");  if (null != mRingTone) {    if (null != mRingbackTone) {      mRingbackTone.stop();      mRingbackTone=null;    }    if (null != mCallEndTone) {      mCallEndTone.stop();      mCallEndTone=null;    }    MXCallsManager.setSpeakerphoneOn(context,true);    mRingTone.play();    return;  }  if (null == mRingingPlayer) {    mRingingPlayer=MediaPlayer.create(context.getApplicationContext(),R.raw.ring);    if (null != mRingingPlayer) {      mRingingPlayer.setLooping(true);      mRingingPlayer.setVolume(1.0f,1.0f);    }  }  if (null != mRingingPlayer) {    if (!mRingingPlayer.isPlaying()) {      if ((null != mCallEndPlayer) && mCallEndPlayer.isPlaying()) {        mCallEndPlayer.stop();      }      if ((null != mRingbackPlayer) && mRingbackPlayer.isPlaying()) {        mRingbackPlayer.stop();      }      MXCallsManager.setSpeakerphoneOn(context,true);      mRingingPlayer.start();    }  }}  }
class C{  public boolean isAuthenticated(){  return this.isAuthenticated;}  }
class C{  public static SharedPreferenceUtils initWith(Context context,String name){  if (sharedPreferenceUtils == null) {    sharedPreferenceUtils=new SharedPreferenceUtils();  }  if (isEmptyString(name)) {    sharedPreferenceUtils.sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);  } else {    sharedPreferenceUtils.sharedPreferences=context.getSharedPreferences(name,Context.MODE_PRIVATE);  }  return sharedPreferenceUtils;}  }
class C{  public boolean isIgnoreWhiteSpace(){  return ignoreWhiteSpace;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"BXJ");  final long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset));}  }
class C{  private final String _decodeShortUnicodeName(int len) throws IOException, JsonParseException {  int outPtr=0;  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();  int inPtr=_inputPtr;  _inputPtr+=len;  final int[] codes=SmileConstants.sUtf8UnitLengths;  final byte[] inBuf=_inputBuffer;  for (int end=inPtr + len; inPtr < end; ) {    int i=inBuf[inPtr++] & 0xFF;    int code=codes[i];    if (code != 0) {switch (code) {case 1:        i=((i & 0x1F) << 6) | (inBuf[inPtr++] & 0x3F);      break;case 2:    i=((i & 0x0F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6) | (inBuf[inPtr++] & 0x3F);  break;case 3:i=((i & 0x07) << 18) | ((inBuf[inPtr++] & 0x3F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6)| (inBuf[inPtr++] & 0x3F);i-=0x10000;outBuf[outPtr++]=(char)(0xD800 | (i >> 10));i=0xDC00 | (i & 0x3FF);break;default :_reportError("Invalid byte " + Integer.toHexString(i) + " in short Unicode text block");}}outBuf[outPtr++]=(char)i;}_textBuffer.setCurrentLength(outPtr);return _textBuffer.contentsAsString();}  }
class C{  public void testExamples() throws IOException {  checkOneTerm(analyzer,"queries","query");  checkOneTerm(analyzer,"phrases","phrase");  checkOneTerm(analyzer,"corpus","corpus");  checkOneTerm(analyzer,"stress","stress");  checkOneTerm(analyzer,"kings","king");  checkOneTerm(analyzer,"panels","panel");  checkOneTerm(analyzer,"aerodynamics","aerodynamic");  checkOneTerm(analyzer,"congress","congress");  checkOneTerm(analyzer,"serious","serious");}  }
class C{  public boolean isSwapPlacementSupported(){  return swapPlacementSupported;}  }
class C{  public static OutputStream newBFOS(String name){  File file=new File(name);  if (file != null) {    try {      FileOutputStream fos=new FileOutputStream(file);      return fos;    } catch (    FileNotFoundException e) {      ToolIO.out.println("Error: Unable to write to file " + name);    }  }  return null;}  }
class C{  public DialogOwner(Frame frame){  dlgOwner=frame;}  }
class C{  public UpdateResponse index(SolrInputDocument doc) throws IOException, SolrServerException {  return solrClient.add(doc);}  }
class C{  public int length(){  return info.length + 6;}  }
class C{  private void callDeleteApi(String serviceId){  RetroCallback retroCallback;  retroCallback=new RetroCallback(this);  retroCallback.setRequestId(HttpConstants.ApiResponseCodes.DELETE_SERVICE);  retroCallbackList.add(retroCallback);  mYeloApi.deleteService(serviceId,retroCallback);  String selection=DatabaseColumns.ID + SQLConstants.EQUALS_ARG;  getActivity().setProgressBarIndeterminate(true);  DBInterface.deleteAsync(AppConstants.QueryTokens.DELETE_SERVICE_CARD,getTaskTag(),null,TableServices.NAME,selection,new String[]{serviceId},true,this);}  }
class C{  public AccountLockedException(){  super();}  }
class C{  @Deprecated public MutuallyExclusiveSetLock(boolean fair,Comparator<? super T> comparator){  this.fair=fair;  this.comparator=comparator;}  }
class C{  public static <A,B>Pair<A,B> create(A a,B b){  return new Pair<A,B>(a,b);}  }
class C{  public HashIsoSurface(VolumetricSpace volume,float density){  this.volume=volume;  this.density=density;  cellSize=new Vec3D(volume.scale.x / volume.resX1,volume.scale.y / volume.resY1,volume.scale.z / volume.resZ1);  resX=volume.resX;  resY=volume.resY;  resZ=volume.resZ;  resX1=volume.resX1;  resY1=volume.resY1;  resZ1=volume.resZ1;  sliceRes=volume.sliceRes;  nextXY=resX + sliceRes;  cellIndexCache=new short[sliceRes];  prevCellIndexCache=new short[sliceRes];  centreOffset=volume.halfScale.getInverted();  reset();}  }
class C{  public SBS(int minFeatures,int maxFeatures,RegressionDataSet rds,Regressor evaluater,int folds,double maxDecrease){  this(minFeatures,maxFeatures,evaluater,folds,maxDecrease);  search(rds,evaluater,minFeatures,maxFeatures,folds);}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public void toEPLElement(StringWriter writer){  writer.write(streamName);  writer.write(".*");  if (optionalColumnName != null) {    writer.write(" as ");    writer.write(optionalColumnName);  }}  }
class C{  @Override public void onChunkUnload(){  if (addedToEnet && Info.isIc2Available()) {    MinecraftForge.EVENT_BUS.post(new EnergyTileUnloadEvent(this));    addedToEnet=false;  }}  }
class C{  public static boolean isPN_CHARS_BASE(int codePoint){  return ASCIIUtil.isLetter(codePoint) || codePoint >= 0x00C0 && codePoint <= 0x00D6 || codePoint >= 0x00D8 && codePoint <= 0x00F6 || codePoint >= 0x00F8 && codePoint <= 0x02FF || codePoint >= 0x0370 && codePoint <= 0x037D || codePoint >= 0x037F && codePoint <= 0x1FFF || codePoint >= 0x200C && codePoint <= 0x200D || codePoint >= 0x2070 && codePoint <= 0x218F || codePoint >= 0x2C00 && codePoint <= 0x2FEF || codePoint >= 0x3001 && codePoint <= 0xD7FF || codePoint >= 0xF900 && codePoint <= 0xFDCF || codePoint >= 0xFDF0 && codePoint <= 0xFFFD || codePoint >= 0x10000 && codePoint <= 0xEFFFF;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public SimpleList(Collection<? extends E> c){  this(c.size());  this.addAll(c);}  }
class C{  public boolean intersects(final PlanetModel planetModel,final Plane p,final GeoPoint[] notablePoints,final Membership[] bounds){  return upperConnectingPlane.intersects(planetModel,p,notablePoints,upperConnectingPlanePoints,bounds,lowerConnectingPlane,startCutoffPlane,endCutoffPlane) || lowerConnectingPlane.intersects(planetModel,p,notablePoints,lowerConnectingPlanePoints,bounds,upperConnectingPlane,startCutoffPlane,endCutoffPlane);}  }
class C{  public void addRow(){  getRowConstraints().add(new RowConstraints());}  }
class C{  public GuildMemberAddHandler(ImplDiscordAPI api){  super(api,true,"GUILD_MEMBER_ADD");}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public static void determineMatrixFormatIfNeeded(DataFrame dataFrame,MatrixMetadata matrixMetadata){  MatrixFormat matrixFormat=matrixMetadata.getMatrixFormat();  if (matrixFormat != null) {    return;  }  StructType schema=dataFrame.schema();  boolean hasID=false;  try {    schema.fieldIndex(RDDConverterUtils.DF_ID_COLUMN);    hasID=true;  } catch (  IllegalArgumentException iae) {  }  StructField[] fields=schema.fields();  MatrixFormat mf=null;  if (hasID) {    if (fields[1].dataType() instanceof VectorUDT) {      mf=MatrixFormat.DF_VECTOR_WITH_INDEX;    } else {      mf=MatrixFormat.DF_DOUBLES_WITH_INDEX;    }  } else {    if (fields[0].dataType() instanceof VectorUDT) {      mf=MatrixFormat.DF_VECTOR;    } else {      mf=MatrixFormat.DF_DOUBLES;    }  }  if (mf == null) {    throw new MLContextException("DataFrame format not recognized as an accepted SystemML MatrixFormat");  }  matrixMetadata.setMatrixFormat(mf);}  }
class C{  public static IKeyBuilder newInstance(final int initialCapacity){  return newInstance(initialCapacity,CollatorEnum.ASCII,null,null,null);}  }
class C{  public VNXeCommandJob deleteLunSnap(String snapId) throws VNXeException {  _url=URL_INSTANCE + snapId;  setQueryParameters(null);  if (getDataForOneObject(VNXeLunSnap.class) != null) {    return deleteRequestAsync(null);  } else {    throw VNXeException.exceptions.vnxeCommandFailed(String.format("No lun snap %s found",snapId));  }}  }
class C{  private static long parse(FacesContext context,String value,Long minValue,Long maxValue) throws ValidatorException {  if (!GenericValidator.isLong(value)) {    minValue=(minValue != null ? minValue : Long.valueOf(Long.MIN_VALUE));    maxValue=(maxValue != null ? maxValue : Long.valueOf(Long.MAX_VALUE));    String message=JSFUtils.getText(BaseBean.ERROR_LONG_VALUE_OUT_OF_RANGE,new String[]{String.valueOf(minValue),String.valueOf(maxValue)},context);    throw getException(message);  }  return Long.parseLong(value);}  }
class C{  @Override public boolean acquire(final String owner) throws Exception {  String localOwner=owner;  String globalOwner=_vdc;  if (_mode.equals(GlobalLock.GL_Mode.GL_NodeSvcShared_MODE)) {    globalOwner=String.format("%1$s:%2$s",_vdc,owner);  }  _log.info("{} is acquiring global lock {} ...",localOwner,_name);  boolean bLockAcquired=false;  MutationBatch m=_keyspace.prepareMutationBatch();  try {    ColumnMap<String> columns=_cpDistRowlock.acquireLockAndReadRow();    String currMode=columns.getString(GlobalLock.GL_MODE_COLUMN,null);    String currOwner=columns.getString(GlobalLock.GL_OWNER_COLUMN,null);    String currExpiration=columns.getString(GlobalLock.GL_EXPIRATION_COLUMN,null);    if (currMode != null && !currMode.equals(_mode.toString())) {      errMsg=String.format("The global lock %s has been acquired by incompatible mode %s.",_name,currMode);      _log.error(errMsg);      throw new IllegalStateException(errMsg);    }    long curTimeMicros=System.currentTimeMillis();    if (currExpiration != null) {      long expirationTime=Long.parseLong(currExpiration);      if (curTimeMicros < expirationTime || expirationTime == 0) {        if (currOwner == null) {          errMsg=String.format("The global lock %s owner should not be null.",_name);          _log.error(errMsg);          throw new IllegalStateException(errMsg);        }        if (!currOwner.isEmpty() && !currOwner.equals(globalOwner)) {          errMsg=String.format("The global lock %s has been acquired by another owner %s.",_name,currOwner);          _log.error(errMsg);          return bLockAcquired;        }      }    }    m.withRow(_cf,_name).putColumn(GlobalLock.GL_MODE_COLUMN,_mode.toString());    m.withRow(_cf,_name).putColumn(GlobalLock.GL_OWNER_COLUMN,globalOwner);    long expirationTime=(_timeout == 0) ? 0 : curTimeMicros + _timeout;    m.withRow(_cf,_name).putColumn(GlobalLock.GL_EXPIRATION_COLUMN,String.valueOf(expirationTime));    if (!_mode.equals(GlobalLock.GL_Mode.GL_NodeSvcShared_MODE)) {      addLocalHolder(localOwner);    }    _cpDistRowlock.releaseWithMutation(m);    bLockAcquired=true;  } catch (  StaleLockException e) {    errMsg=String.format("%s failed to acquire global lock %s due to internal distributed row lock becoming stale.",localOwner,_name);    _log.error(errMsg);    return bLockAcquired;  }catch (  BusyLockException e) {    errMsg=String.format("%s failed to acquire global lock %s due to locked by others.",localOwner,_name);    _log.error(errMsg);    return bLockAcquired;  }catch (  Exception e) {    errMsg=String.format("Failed to acquire global lock %s due to unexpected exception : %s.",_name,e.getMessage());    _log.error("Failed to acquire global lock {} due to unexpected exception {}.",_name,e);    throw e;  } finally {    _log.debug("internal distributed row lock released.");    _cpDistRowlock.release();  }  _log.info("{} acquired global lock {} successfully.",localOwner,_name);  return bLockAcquired;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (trace_record_1: ");  result.append(trace_record_1);  result.append(')');  return result.toString();}  }
class C{  Entry<V> find(long key,int hash){  int index=hash & mask;  Entry<V> e=entries[index];  while (e != null && e.key != key) {    e=e.mapNext;  }  return e;}  }
class C{  public void onEvent(Event e){  if (e.getTarget() == fPaySelect)   loadPaySelectInfo(); else   if (e.getTarget() == fPaymentRule)   loadPaymentRuleInfo(); else   if (e.getTarget() == bCancel)   dispose(); else   if (e.getTarget() == bExport)   cmd_export(); else   if (e.getTarget() == bProcess)   cmd_EFT(); else   if (e.getTarget() == bPrint)   cmd_print();}  }
class C{  public RequestHandle put(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPut(url),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  public GF2nONBElement(GF2nONBField gf2n,byte[] e){  mField=gf2n;  mDegree=mField.getDegree();  mLength=gf2n.getONBLength();  mBit=gf2n.getONBBit();  mPol=new long[mLength];  assign(e);}  }
class C{  public static synchronized void removePropertyChangeListener(PropertyChangeListener l){  if (listeners.contains(l)) {    listeners.remove(l);  }}  }
class C{  public boolean createAudioSocket(final NativeHub hub,final String socketName){  if (mAudioSocketName != null) {    hub.releaseHostSocket(socketName);    mAudioSocketName=null;  }  if (hub.createHostSocket(socketName,this instanceof DSPConnection)) {    mAudioSocketName=socketName;    return true;  } else {    return false;  }}  }
class C{  public String nameList(String dir) throws IOException {  passive();  send("NLST " + dir);  readCode(150);  ByteArrayOutputStream out=new ByteArrayOutputStream();  IOUtils.copyAndClose(inData,out);  readCode(226);  byte[] data=out.toByteArray();  return new String(data);}  }
class C{  public UnionPathIterator(Compiler compiler,int opPos) throws javax.xml.transform.TransformerException {  super();  opPos=OpMap.getFirstChildPos(opPos);  loadLocationPaths(compiler,opPos,0);}  }
class C{  public static void filterSupportedVpoolsBasedOnTieringPolicy(UnManagedVolume unManagedVolume,String policyName,StorageSystem system,DbClient dbClient){  StringSet supportedVpoolURIs=unManagedVolume.getSupportedVpoolUris();  List<String> vPoolsToRemove=new ArrayList<String>();  if (supportedVpoolURIs != null) {    Iterator<String> itr=supportedVpoolURIs.iterator();    while (itr.hasNext()) {      String uri=itr.next();      VirtualPool vPool=dbClient.queryObject(VirtualPool.class,URI.create(uri));      if (vPool != null && !vPool.getInactive()) {        String autoTierPolicyId=NativeGUIDGenerator.generateAutoTierPolicyNativeGuid(system.getNativeGuid(),policyName,NativeGUIDGenerator.getTieringPolicyKeyForSystem(system));        if (!checkVPoolValidForUnManagedVolumeAutoTieringPolicy(vPool,autoTierPolicyId,system)) {          String msg="Removing vPool %s from SUPPORTED_VPOOL_LIST in UnManagedVolume %s " + "since Auto-tiering Policy %s in UnManaged Volume does not match with vPool's (%s)";          _log.info(String.format(msg,new Object[]{uri,unManagedVolume.getId(),autoTierPolicyId,vPool.getAutoTierPolicyName()}));          vPoolsToRemove.add(uri);        }      } else {        vPoolsToRemove.add(uri);      }    }  }  for (  String uri : vPoolsToRemove) {    supportedVpoolURIs.remove(uri);  }}  }
class C{  private static void writePlottingData(String outputDirectory,ActivityFacilities analysisPoints,Map<Id<ActivityFacility>,Map<Modes4Accessibility,Double>> map,String fileName){  log.info("Writing plotting data for other analyis into " + outputDirectory + " ...");  final CSVWriter writer=new CSVWriter(outputDirectory + "/" + fileName);  writer.writeField(Labels.X_COORDINATE);  writer.writeField(Labels.Y_COORDINATE);  for (  Modes4Accessibility mode : Modes4Accessibility.values()) {    writer.writeField(mode.toString() + "_accessibility");  }  writer.writeNewLine();  for (  Id<ActivityFacility> analysisPointId : map.keySet()) {    ActivityFacility analysisPoint=analysisPoints.getFacilities().get(analysisPointId);    Coord coord=analysisPoint.getCoord();    writer.writeField(coord.getX());    writer.writeField(coord.getY());    Map<Modes4Accessibility,Double> valuesByMode=map.get(analysisPointId);    for (    Modes4Accessibility mode : Modes4Accessibility.values()) {      double value=valuesByMode.get(Modes4Accessibility.walk);      writer.writeField(value);    }    writer.writeNewLine();  }  writer.close();  log.info("Writing plotting data for other analysis done!");}  }
class C{  public FSTCompletion build() throws IOException {  this.automaton=buildAutomaton(sorter);  if (sorter instanceof Closeable) {    ((Closeable)sorter).close();  }  return new FSTCompletion(automaton);}  }
class C{  static String createRequest(String dnsName,int dnsType,int version){  StringBuffer sb=new StringBuffer();  if (dnsType == WifiP2pDnsSdServiceInfo.DNS_TYPE_TXT) {    dnsName=dnsName.toLowerCase(Locale.ROOT);  }  sb.append(compressDnsName(dnsName));  sb.append(String.format("%04x",dnsType));  sb.append(String.format("%02x",version));  return sb.toString();}  }
class C{  public NameValue value(final String value){  this.value=value;  return this;}  }
class C{  public NodeSetDTM(int blocksize,int dummy,DTMManager dtmManager){  super(blocksize);  m_manager=dtmManager;}  }
class C{  public void iinc(final int local,final int amount){  mv.visitIincInsn(local,amount);}  }
class C{  public final void addClip(final Area current_area){  if (TRmask == null) {    TRmask=new GeneralPath();  }  TRmask.append(current_area,false);}  }
class C{  public static boolean isReserved(String string){  for (  String word : RESERVED_WORDS) {    if (StringUtils.equalsIgnoreCase(string,word)) {      return true;    }  }  return false;}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public synchronized void goToParent(){  if (m_Current.parent != null) {    m_Current=m_Current.parent;  }}  }
class C{  protected synchronized void findAllModules(Collection<String> mList) throws FloodlightModuleException {  if (serviceMap != null)   return;  serviceMap=new HashMap<>();  moduleServiceMap=new HashMap<>();  moduleNameMap=new HashMap<>();  ClassLoader cl=Thread.currentThread().getContextClassLoader();  ServiceLoader<IFloodlightModule> moduleLoader=ServiceLoader.load(IFloodlightModule.class,cl);  Iterator<IFloodlightModule> moduleIter=moduleLoader.iterator();  while (moduleIter.hasNext()) {    IFloodlightModule m=null;    try {      m=moduleIter.next();    } catch (    ServiceConfigurationError sce) {      logger.error("Could not find module: {}",sce.getMessage());      continue;    }    if (logger.isDebugEnabled()) {      logger.debug("Found module " + m.getClass().getName());    }    moduleNameMap.put(m.getClass().getCanonicalName(),m);    Collection<Class<? extends IFloodlightService>> servs=m.getModuleServices();    if (servs != null) {      moduleServiceMap.put(m,servs);      for (      Class<? extends IFloodlightService> s : servs) {        Collection<IFloodlightModule> mods=serviceMap.get(s);        if (mods == null) {          mods=new ArrayList<IFloodlightModule>();          serviceMap.put(s,mods);        }        mods.add(m);        int dupInConf=0;        for (        IFloodlightModule cMod : mods) {          if (mList.contains(cMod.getClass().getCanonicalName()))           dupInConf+=1;        }        if (dupInConf > 1) {          StringBuilder sb=new StringBuilder();          for (          IFloodlightModule mod : mods) {            sb.append(mod.getClass().getCanonicalName());            sb.append(", ");          }          String duplicateMods=sb.toString();          String mess="ERROR! The configuration file " + "specifies more than one module that " + "provides the service " + s.getCanonicalName() + ". Please specify only ONE of the "+ "following modules in the config file: "+ duplicateMods;          throw new FloodlightModuleException(mess);        }      }    }  }}  }
class C{  protected Array(Element arrayE) throws Exception {  initialize(arrayE);}  }
class C{  public static double length(double x,double y,double z){  return Math.sqrt(x * x + y * y + z * z);}  }
class C{  public ReadPacketFetcher(final MariaDbInputStream is,int maxQuerySizeToLog){  this.inputStream=is;  this.maxQuerySizeToLog=maxQuerySizeToLog;}  }
class C{  @Override public void loadState(CloudDebugProcessStateSerializer.ProjectState state){  if (CloudDebugConfigType.isFeatureEnabled() && state.configStates != null) {    for (    RunConfigState configState : state.configStates) {      stateMap.put(configState.configName,configState.processState);    }  }}  }
class C{  public static synchronized void initialize(Context context){  if (sSoundResources == null) {    File dir=context.getFilesDir();    sSoundResources=new SoundResources(dir);  }}  }
class C{  public void filter(final Collection<T> collection){  if (collection != null) {    final Iterator<T> iter=collection.iterator();    while (iter.hasNext()) {      final T o=iter.next();      if (!passesAllCriteria(o)) {        iter.remove();      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.048 -0500",hash_original_method="5CE1AB9DF7D7162F89956B1D13BE745E",hash_generated_method="31A9F3A8193481445E2152C80BE55093") public void sendStatus(int resultCode,Bundle results){  if (mWatcher != null) {    try {      mWatcher.instrumentationStatus(mComponent,resultCode,results);    } catch (    RemoteException e) {      mWatcher=null;    }  }}  }
class C{  public S2CellId nextWrap(){  S2CellId n=next();  if (unsignedLongLessThan(n.id,WRAP_OFFSET)) {    return n;  }  return new S2CellId(n.id - WRAP_OFFSET);}  }
class C{  public SubscriptionPriceModelTable(){  super(SUBSCRIPTION_PM_TABLE_FILE_NAME);}  }
class C{  public GenericPropertiesCreator(String filename) throws Exception {  super();  m_InputFilename=filename;  m_OutputFilename=PROPERTY_FILE;  m_InputProperties=null;  m_OutputProperties=null;  m_ExplicitPropsFile=true;  m_Excludes=new Hashtable<String,Hashtable<String,Vector<String>>>();}  }
class C{  protected LayoutManager createLayoutManager(){  if (tabPane.getTabLayoutPolicy() == JTabbedPane.SCROLL_TAB_LAYOUT) {    return new TabbedPaneScrollLayout();  } else {    return new TabbedPaneLayout();  }}  }
class C{  public boolean isInclude(){  Object oo=get_Value(COLUMNNAME_IsInclude);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    if (isClosed()) {      return;    }    Throwable thrown=null;    try {      flushInternal();    } catch (    Throwable e) {      thrown=e;    }    buf=null;    try {      out.close();    } catch (    Throwable e) {      if (thrown == null) {        thrown=e;      }    }    out=null;    if (thrown != null) {      SneakyThrow.sneakyThrow(thrown);    }  }}  }
class C{  public void marshall(Path path,Object object,String noNamespaceSchemaLocation) throws JAXBException, IOException {  if (Files.isDirectory(path)) {    throw new IOException("Can not marshal object to the path that represents the directory");  }  Files.deleteIfExists(path);  Files.createDirectories(path.getParent());  JAXBContext context=JAXBContext.newInstance(object.getClass());  Marshaller marshaller=context.createMarshaller();  marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);  if (null != noNamespaceSchemaLocation) {    marshaller.setProperty(Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION,noNamespaceSchemaLocation);  }  try (OutputStream outputStream=Files.newOutputStream(path,StandardOpenOption.CREATE_NEW)){    marshaller.marshal(object,outputStream);  } }  }
class C{  protected synchronized void recomputePairPriorities(){  for (  CandidatePair pair : this)   pair.computePriority();}  }
class C{  public static void beginStartingService(Context context,Intent intent){synchronized (mStartingServiceSync) {    if (mStartingService == null) {      PowerManager pm=(PowerManager)context.getSystemService(Context.POWER_SERVICE);      mStartingService=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"StartingAlertService");      mStartingService.setReferenceCounted(false);    }    mStartingService.acquire();    context.startService(intent);  }}  }
class C{  private Unit insertCloneAfter(Chain unitChain,Unit node,Unit toClone){  Unit clone=(Unit)toClone.clone();  body.getUnits().insertAfter(clone,node);  return clone;}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int cols=0;  int rows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified.");    return;  }  try {    double[] data;    updateProgress("Calculating min values:",0);    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      imageNoData=image.getNoDataValue();      String label="Loop " + String.valueOf(a + 1) + " of "+ String.valueOf(numImages)+ ":";      if (a == 0) {        rows=image.getNumberRows();        cols=image.getNumberColumns();        outputNoData=imageNoData;        output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,outputNoData);        output.setPreferredPalette(image.getPreferredPalette());      } else {        if (image.getNumberColumns() != cols || image.getNumberRows() != rows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != imageNoData) {            z=output.getValue(row,col);            if (z != outputNoData) {              if (data[col] < z) {                output.setValue(row,col,data[col]);              }            } else {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress(label,(int)progress);      }      image.close();      progress=a / (numImages - 1) * 100;      updateProgress("Calculating image average:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Style(Color fg,Color bg,Font font){  this(fg,bg,font,false);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public MazeGenerator(String name,int width,int height){  this.name=name;  this.width=width;  this.height=height;  mapStructure=generateMapStructure(width,height);}  }
class C{  public List<String> matchAlmost(CharSequence key,int numReturnValues){  return matchAlmostRecursion(rootNode,0,matchAlmostDiff,key,((numReturnValues < 0) ? -1 : numReturnValues),new Vector<String>(),false);}  }
class C{  public static String valueToString(Object value) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof JSONString) {    Object object;    try {      object=((JSONString)value).toJSONString();    } catch (    Exception e) {      throw new JSONException(e);    }    if (object instanceof String) {      return (String)object;    }    throw new JSONException("Bad value from toJSONString: " + object);  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  if (value instanceof Map) {    @SuppressWarnings("unchecked") Map<String,Object> map=(Map<String,Object>)value;    return new JSONObject(map).toString();  }  if (value instanceof Collection) {    @SuppressWarnings("unchecked") Collection<Object> coll=(Collection<Object>)value;    return new JSONArray(coll).toString();  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  public static void compress(){  String s=BinaryStdIn.readString();  char[] input=s.toCharArray();  int[] freq=new int[R];  for (int i=0; i < input.length; i++)   freq[input[i]]++;  Node root=buildTrie(freq);  String[] st=new String[R];  buildCode(st,root,"");  writeTrie(root);  BinaryStdOut.write(input.length);  for (int i=0; i < input.length; i++) {    String code=st[input[i]];    for (int j=0; j < code.length(); j++) {      if (code.charAt(j) == '0') {        BinaryStdOut.write(false);      } else       if (code.charAt(j) == '1') {        BinaryStdOut.write(true);      } else       throw new IllegalStateException("Illegal state");    }  }  BinaryStdOut.close();}  }
class C{  public void paint(Graphics2D g2d){  if (painters != null) {    for (int i=0; i < count; ++i) {      painters[i].paint(g2d);    }  }}  }
class C{  @Override public IValue copy(final IScope scope) throws GamaRuntimeException {  return new GamaFont(name,style,size);}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.config.mvcc=true;  test.test();}  }
class C{  public static String repeatCharacter(char c,int repetitions){  StringBuilder s=new StringBuilder(repetitions);  for (int i=0; i < repetitions; i++) {    s.append(c);  }  return s.toString();}  }
class C{  public double eval(double params[]){  return (1.0 / Math.cosh(params[0]));}  }
class C{  private String printDFormat(final int x){  return printDFormat(Integer.toString(x));}  }
class C{  public Plane normalize(){  Vector normVect=super.normalize();  if (normVect == null)   return null;  return new Plane(normVect,this.D);}  }
class C{  public static String decodeUtf8UriParam(final String value){  if (value != null) {    if (value.indexOf('%') == -1) {      return value;    }    final String uri=value.replace("+","%2B");    try {      return URLDecoder.decode(uri,"UTF-8");    } catch (    UnsupportedEncodingException e) {      throw new RuntimeException(e);    }  }  return null;}  }
class C{  public String execCommand(String command){  StringBuilder buf=new StringBuilder();  sendWaitFor(command,defaultTimeout,prompts,buf);  log.debug(buf.toString());  return cleanOutput(buf);}  }
class C{  protected int nextInEntity() throws IOException, XMLException {switch (current) {case 0x9:case 0xA:case 0xD:case 0x20:    do {      nextChar();    } while (current != -1 && XMLUtilities.isXMLSpace((char)current));  return LexicalUnits.S;case '>':nextChar();context=DTD_DECLARATIONS_CONTEXT;return LexicalUnits.END_CHAR;case '%':nextChar();return LexicalUnits.PERCENT;case 'S':return readIdentifier("YSTEM",LexicalUnits.SYSTEM_IDENTIFIER,LexicalUnits.NAME);case 'P':return readIdentifier("UBLIC",LexicalUnits.PUBLIC_IDENTIFIER,LexicalUnits.NAME);case 'N':return readIdentifier("DATA",LexicalUnits.NDATA_IDENTIFIER,LexicalUnits.NAME);case '"':attrDelimiter='"';nextChar();if (current == -1) {throw createXMLException("unexpected.eof");}if (current != '"' && current != '&' && current != '%') {do {nextChar();} while (current != -1 && current != '"' && current != '&' && current != '%');}switch (current) {default :throw createXMLException("invalid.character");case '&':case '%':context=ENTITY_VALUE_CONTEXT;break;case '"':nextChar();return LexicalUnits.STRING;}return LexicalUnits.FIRST_ATTRIBUTE_FRAGMENT;case '\'':attrDelimiter='\'';nextChar();if (current == -1) {throw createXMLException("unexpected.eof");}if (current != '\'' && current != '&' && current != '%') {do {nextChar();} while (current != -1 && current != '\'' && current != '&' && current != '%');}switch (current) {default :throw createXMLException("invalid.character");case '&':case '%':context=ENTITY_VALUE_CONTEXT;break;case '\'':nextChar();return LexicalUnits.STRING;}return LexicalUnits.FIRST_ATTRIBUTE_FRAGMENT;default :return readName(LexicalUnits.NAME);}}  }
class C{  public String peekStringAtOffset(int startPosition){  int i=startPosition;  int len=0;  int maxLen=this.byteBuffer.length;  while ((i < maxLen) && (this.byteBuffer[i] != 0)) {    len++;    i++;  }  return peekString(startPosition,len);}  }
class C{  public void onUnhandledKeyEvent(WebView view,KeyEvent event){  ViewRootImpl root=view.getViewRootImpl();  if (root != null) {    root.dispatchUnhandledKey(event);  }}  }
class C{  public static boolean isFalse(String key,boolean defaultVal){  return !isTrue(key,defaultVal);}  }
class C{  public ListBindingSet(List<String> names,Value... values){  this(names,Arrays.asList(values));}  }
class C{  protected static void createDirectory(String path){  (new File(path)).mkdir();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case InformationModelPackage.INFORMATION_MODEL__NAME:    setName(NAME_EDEFAULT);  return;case InformationModelPackage.INFORMATION_MODEL__NAMESPACE:setNamespace(NAMESPACE_EDEFAULT);return;case InformationModelPackage.INFORMATION_MODEL__VERSION:setVersion(VERSION_EDEFAULT);return;case InformationModelPackage.INFORMATION_MODEL__REFERENCES:getReferences().clear();return;case InformationModelPackage.INFORMATION_MODEL__DESCRIPTION:setDescription(DESCRIPTION_EDEFAULT);return;case InformationModelPackage.INFORMATION_MODEL__DISPLAYNAME:setDisplayname(DISPLAYNAME_EDEFAULT);return;case InformationModelPackage.INFORMATION_MODEL__CATEGORY:setCategory(CATEGORY_EDEFAULT);return;case InformationModelPackage.INFORMATION_MODEL__PROPERTIES:getProperties().clear();return;}super.eUnset(featureID);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ExpressionsPackage.PRIMITIVE_VALUE_EXPRESSION__VALUE:    return basicSetValue(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private static void arraycopyNoCheckcast(Object[] src,int srcIdx,Object[] dst,int dstIdx,int len){  Offset srcOffset=Offset.fromIntZeroExtend(srcIdx << LOG_BYTES_IN_ADDRESS);  Offset dstOffset=Offset.fromIntZeroExtend(dstIdx << LOG_BYTES_IN_ADDRESS);  int bytes=len << LOG_BYTES_IN_ADDRESS;  if (((src != dst) || (srcIdx > dstIdx)) && OBJECT_BULK_COPY_SUPPORTED) {    if (NEEDS_OBJECT_ASTORE_BARRIER || NEEDS_OBJECT_ALOAD_BARRIER) {      Barriers.objectBulkCopy(src,srcOffset,dst,dstOffset,bytes);    } else {      Memory.alignedWordCopy(Magic.objectAsAddress(dst).plus(dstOffset),Magic.objectAsAddress(src).plus(srcOffset),bytes);    }  } else {    arraycopyPiecemealNoCheckcast(src,dst,len,srcOffset,dstOffset,bytes);  }}  }
class C{  public boolean removeOption(T option){  int idx=options.indexOf(option);  if (idx >= 0) {    options.remove(idx);    double w=weights.removeAt(idx);    weightSum-=w;    return true;  } else {    return false;  }}  }
class C{  public GZipInputStreamRandomAccess(SeekableInputStream is) throws IOException {  this(is,true);}  }
class C{  @Override protected int calcDamagePerHit(){  float toReturn=1;  if ((ae instanceof BattleArmor) && (weapon.getLocation() == BattleArmor.LOC_SQUAD) && !(weapon.isSquadSupportWeapon())&& (ae.getSwarmTargetId() == target.getTargetId())) {    toReturn*=((BattleArmor)ae).getShootingStrength();  }  if ((target instanceof Infantry) && !(target instanceof BattleArmor)) {    toReturn=wtype.getRackSize();    if (bDirect) {      toReturn+=toHit.getMoS() / 3;    }  }  if (((target instanceof Entity) && !(target instanceof Infantry)) || (target instanceof BattleArmor)) {    toReturn=0;  }  if (bGlancing) {    toReturn=(int)Math.floor(toReturn / 2.0);  }  return (int)Math.ceil(toReturn);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.557 -0500",hash_original_method="74DA7764B5809B26A354DD7668DF4A77",hash_generated_method="E8F8B044021BD44FB7B4A0DB83968990") @Override public void close() throws IOException {  if (in != null) {    in.close();    in=null;    buf=null;  }}  }
class C{  public static String[][] ISO8859_1_ESCAPE(){  return ISO8859_1_ESCAPE.clone();}  }
class C{  private void applyQueryHints(final AST2BOpContext context,final QueryRoot queryRoot,final QueryHintScope scope,final ASTBase t,final Properties queryHints){  @SuppressWarnings("rawtypes") final Enumeration e=queryHints.propertyNames();  while (e.hasMoreElements()) {    final String name=(String)e.nextElement();    final String value=queryHints.getProperty(name);    _applyQueryHint(context,queryRoot,scope,t,name,value);  }}  }
class C{  public double strictAzimuth(Geo v2){  double phi1=this.getLatitudeRadians();  double lambda0=this.getLongitudeRadians();  double phi=v2.getLatitudeRadians();  double lambda=v2.getLongitudeRadians();  double ldiff=lambda - lambda0;  double cosphi=Math.cos(phi);  double az=Math.atan2(cosphi * Math.sin(ldiff),(Math.cos(phi1) * Math.sin(phi) - Math.sin(phi1) * cosphi * Math.cos(ldiff)));  return (az >= 0.0) ? az : MoreMath.TWO_PI_D + az;}  }
class C{  public int hashCode(){  int h=0;  for (int j=realSize(), i=0, t=0; j-- != 0; ) {    while (((key[i]) == (0)))     i++;    t=it.unimi.dsi.fastutil.HashCommon.long2int(key[i]);    t^=it.unimi.dsi.fastutil.HashCommon.long2int(value[i]);    h+=t;    i++;  }  if (containsNullKey)   h+=it.unimi.dsi.fastutil.HashCommon.long2int(value[n]);  return h;}  }
class C{  public ClassEntry(DynamicClassLoader loader,String name,Path sourcePath,Path classPath,CodeSource codeSource){  _loader=loader;  _name=name;  _classPath=classPath;  setDependPath(classPath);  if (sourcePath != null && !sourcePath.equals(classPath)) {    _sourcePath=sourcePath;    _sourceLastModified=sourcePath.getLastModified();    _sourceLength=sourcePath.length();  }  _codeSource=codeSource;}  }
class C{  public BusinessObjectDataEntity createBusinessObjectDataEntity(BusinessObjectFormatEntity businessObjectFormatEntity,String businessObjectDataPartitionValue,List<String> businessObjectDataSubPartitionValues,Integer businessObjectDataVersion,Boolean businessObjectDataLatestVersion,String businessObjectDataStatusCode){  BusinessObjectDataStatusEntity businessObjectDataStatusEntity=businessObjectDataStatusDao.getBusinessObjectDataStatusByCode(businessObjectDataStatusCode);  if (businessObjectDataStatusEntity == null) {    businessObjectDataStatusEntity=businessObjectDataStatusDaoTestHelper.createBusinessObjectDataStatusEntity(businessObjectDataStatusCode);  }  return createBusinessObjectDataEntity(businessObjectFormatEntity,businessObjectDataPartitionValue,businessObjectDataSubPartitionValues,businessObjectDataVersion,businessObjectDataLatestVersion,businessObjectDataStatusEntity);}  }
class C{  private StringBuffer subformat(StringBuffer result,FieldDelegate delegate,boolean isNegative,boolean isInteger,int maxIntDigits,int minIntDigits,int maxFraDigits,int minFraDigits){  char zero=symbols.getZeroDigit();  int zeroDelta=zero - '0';  char grouping=symbols.getGroupingSeparator();  char decimal=isCurrencyFormat ? symbols.getMonetaryDecimalSeparator() : symbols.getDecimalSeparator();  if (digitList.isZero()) {    digitList.decimalAt=0;  }  if (isNegative) {    append(result,negativePrefix,delegate,getNegativePrefixFieldPositions(),Field.SIGN);  } else {    append(result,positivePrefix,delegate,getPositivePrefixFieldPositions(),Field.SIGN);  }  if (useExponentialNotation) {    int iFieldStart=result.length();    int iFieldEnd=-1;    int fFieldStart=-1;    int exponent=digitList.decimalAt;    int repeat=maxIntDigits;    int minimumIntegerDigits=minIntDigits;    if (repeat > 1 && repeat > minIntDigits) {      if (exponent >= 1) {        exponent=((exponent - 1) / repeat) * repeat;      } else {        exponent=((exponent - repeat) / repeat) * repeat;      }      minimumIntegerDigits=1;    } else {      exponent-=minimumIntegerDigits;    }    int minimumDigits=minIntDigits + minFraDigits;    if (minimumDigits < 0) {      minimumDigits=Integer.MAX_VALUE;    }    int integerDigits=digitList.isZero() ? minimumIntegerDigits : digitList.decimalAt - exponent;    if (minimumDigits < integerDigits) {      minimumDigits=integerDigits;    }    int totalDigits=digitList.count;    if (minimumDigits > totalDigits) {      totalDigits=minimumDigits;    }    boolean addedDecimalSeparator=false;    for (int i=0; i < totalDigits; ++i) {      if (i == integerDigits) {        iFieldEnd=result.length();        result.append(decimal);        addedDecimalSeparator=true;        fFieldStart=result.length();      }      result.append((i < digitList.count) ? (char)(digitList.digits[i] + zeroDelta) : zero);    }    if (decimalSeparatorAlwaysShown && totalDigits == integerDigits) {      iFieldEnd=result.length();      result.append(decimal);      addedDecimalSeparator=true;      fFieldStart=result.length();    }    if (iFieldEnd == -1) {      iFieldEnd=result.length();    }    delegate.formatted(INTEGER_FIELD,Field.INTEGER,Field.INTEGER,iFieldStart,iFieldEnd,result);    if (addedDecimalSeparator) {      delegate.formatted(Field.DECIMAL_SEPARATOR,Field.DECIMAL_SEPARATOR,iFieldEnd,fFieldStart,result);    }    if (fFieldStart == -1) {      fFieldStart=result.length();    }    delegate.formatted(FRACTION_FIELD,Field.FRACTION,Field.FRACTION,fFieldStart,result.length(),result);    int fieldStart=result.length();    result.append(symbols.getExponentSeparator());    delegate.formatted(Field.EXPONENT_SYMBOL,Field.EXPONENT_SYMBOL,fieldStart,result.length(),result);    if (digitList.isZero()) {      exponent=0;    }    boolean negativeExponent=exponent < 0;    if (negativeExponent) {      exponent=-exponent;      fieldStart=result.length();      result.append(symbols.getMinusSign());      delegate.formatted(Field.EXPONENT_SIGN,Field.EXPONENT_SIGN,fieldStart,result.length(),result);    }    digitList.set(negativeExponent,exponent);    int eFieldStart=result.length();    for (int i=digitList.decimalAt; i < minExponentDigits; ++i) {      result.append(zero);    }    for (int i=0; i < digitList.decimalAt; ++i) {      result.append((i < digitList.count) ? (char)(digitList.digits[i] + zeroDelta) : zero);    }    delegate.formatted(Field.EXPONENT,Field.EXPONENT,eFieldStart,result.length(),result);  } else {    int iFieldStart=result.length();    int count=minIntDigits;    int digitIndex=0;    if (digitList.decimalAt > 0 && count < digitList.decimalAt) {      count=digitList.decimalAt;    }    if (count > maxIntDigits) {      count=maxIntDigits;      digitIndex=digitList.decimalAt - count;    }    int sizeBeforeIntegerPart=result.length();    for (int i=count - 1; i >= 0; --i) {      if (i < digitList.decimalAt && digitIndex < digitList.count) {        result.append((char)(digitList.digits[digitIndex++] + zeroDelta));      } else {        result.append(zero);      }      if (isGroupingUsed() && i > 0 && (groupingSize != 0) && (i % groupingSize == 0)) {        int gStart=result.length();        result.append(grouping);        delegate.formatted(Field.GROUPING_SEPARATOR,Field.GROUPING_SEPARATOR,gStart,result.length(),result);      }    }    boolean fractionPresent=(minFraDigits > 0) || (!isInteger && digitIndex < digitList.count);    if (!fractionPresent && result.length() == sizeBeforeIntegerPart) {      result.append(zero);    }    delegate.formatted(INTEGER_FIELD,Field.INTEGER,Field.INTEGER,iFieldStart,result.length(),result);    int sStart=result.length();    if (decimalSeparatorAlwaysShown || fractionPresent) {      result.append(decimal);    }    if (sStart != result.length()) {      delegate.formatted(Field.DECIMAL_SEPARATOR,Field.DECIMAL_SEPARATOR,sStart,result.length(),result);    }    int fFieldStart=result.length();    for (int i=0; i < maxFraDigits; ++i) {      if (i >= minFraDigits && (isInteger || digitIndex >= digitList.count)) {        break;      }      if (-1 - i > (digitList.decimalAt - 1)) {        result.append(zero);        continue;      }      if (!isInteger && digitIndex < digitList.count) {        result.append((char)(digitList.digits[digitIndex++] + zeroDelta));      } else {        result.append(zero);      }    }    delegate.formatted(FRACTION_FIELD,Field.FRACTION,Field.FRACTION,fFieldStart,result.length(),result);  }  if (isNegative) {    append(result,negativeSuffix,delegate,getNegativeSuffixFieldPositions(),Field.SIGN);  } else {    append(result,positiveSuffix,delegate,getPositiveSuffixFieldPositions(),Field.SIGN);  }  return result;}  }
class C{  public Global excludedAttributes(String... attributes){  for (  String attribute : attributes)   global.excluded.add(new XmlExcludedAttribute(attribute));  return this;}  }
class C{  public R addParams(String key,InputStream stream,String name,String contentType){  addParams(key,stream,name,contentType,true);  return (R)this;}  }
class C{  public boolean canJump(int[] A){  if (A == null || A.length == 0)   return false;  if (A.length == 1)   return true;  if (A[0] == 0)   return false;  int maxJump=A[0];  for (int i=1; i < A.length - 1; i++) {    maxJump=Math.max(maxJump - 1,A[i]);    if (maxJump == 0)     return false;  }  return true;}  }
class C{  public LZMAInputStream(InputStream in) throws IOException {  this(in,-1);}  }
class C{  public AnalyzedMessageSummaryImpl(IMessageSummary messageSummary) throws AdeException {  m_messageSummary=messageSummary;}  }
class C{  public synchronized ArrayList<V> clear(){  ArrayList<V> oldValues=new ArrayList<>(mMap.values());  mMap.clear();  mSizeInBytes=0;  return oldValues;}  }
class C{  public boolean checkIfExists(String videoId){  SQLiteDatabase db=dbHelper.getWritableDatabase();  String Query="SELECT * FROM " + tableName + " WHERE "+ YouTubeVideoEntry.COLUMN_VIDEO_ID+ "='"+ videoId+ "'";  Cursor cursor=db.rawQuery(Query,null);  if (cursor.getCount() <= 0) {    cursor.close();    return false;  }  cursor.close();  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.077 -0500",hash_original_method="407334247B0770162522DC9F49AB59F1",hash_generated_method="60F9307B3237528FFF40374DAE975639") public void copyFromUnchecked(int[] d){  mRS.validate();  copy1DRangeFromUnchecked(0,mCurrentCount,d);}  }
class C{  public Class<V> valueType(){  return valueType;}  }
class C{  protected void adaptGrid(){  Arrays.fill(minimum,Double.POSITIVE_INFINITY);  Arrays.fill(maximum,Double.NEGATIVE_INFINITY);  Arrays.fill(density,0);  for (  Solution solution : this) {    for (int i=0; i < problem.getNumberOfObjectives(); i++) {      minimum[i]=Math.min(minimum[i],solution.getObjective(i));      maximum[i]=Math.max(maximum[i],solution.getObjective(i));    }  }  for (  Solution solution : this) {    density[findIndex(solution)]++;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:43.609 -0500",hash_original_method="C24176B61861DC93124341EFD3884687",hash_generated_method="C57FFB0E757E667CC454DE2D973702B2") public GsmCellLocation(Bundle bundle){  mLac=bundle.getInt("lac",mLac);  mCid=bundle.getInt("cid",mCid);  mPsc=bundle.getInt("psc",mPsc);}  }
class C{  public int compareTo(Entry entry){  double thisVal=abs(value);  double entryVal=abs(entry.value);  return (new Double(thisVal).compareTo(entryVal));}  }
class C{  private void createViewToolbar(){  IToolBarManager toolBarManager=getViewSite().getActionBars().getToolBarManager();  toolBarManager.add(new ShowPropertiesAction());  MenuAction filterMenuAction=new MenuAction();  filterMenuAction.setText("Group and Filter");  filterMenuAction.setImageDescriptor(InspectIT.getDefault().getImageDescriptor(InspectITImages.IMG_FILTER));  groupByLabelMenu=new MenuManager("Group Storages By");  filterMenuAction.addContributionItem(groupByLabelMenu);  filterByRepositoryMenu=new MenuManager("Filter By Repository");  filterMenuAction.addContributionItem(filterByRepositoryMenu);  filterByStateMenu=new MenuManager("Filter By Storage State");  filterByStateMenu.add(new FilterStatesAction("Writable",StorageState.OPENED));  filterByStateMenu.add(new FilterStatesAction("Recording",StorageState.RECORDING));  filterByStateMenu.add(new FilterStatesAction("Readable",StorageState.CLOSED));  filterMenuAction.addContributionItem(filterByStateMenu);  toolBarManager.add(filterMenuAction);  toolBarManager.add(new Separator());}  }
class C{  @Override public final void endElement(final String ns,final String lName,final String qName) throws SAXException {  String name=lName == null || lName.length() == 0 ? qName : lName;  Rule r=(Rule)RULES.match(match);  if (r != null) {    r.end(name);  }  int slash=match.lastIndexOf('/');  if (slash >= 0) {    match=match.substring(0,slash);  } else {    match="";  }}  }
class C{  public static synchronized PasswordAuthentication requestPasswordAuthentication(String rHost,InetAddress rAddr,int rPort,String rProtocol,String rPrompt,String rScheme){  if (thisAuthenticator == null) {    return null;  }  thisAuthenticator.host=rHost;  thisAuthenticator.addr=rAddr;  thisAuthenticator.port=rPort;  thisAuthenticator.protocol=rProtocol;  thisAuthenticator.prompt=rPrompt;  thisAuthenticator.scheme=rScheme;  thisAuthenticator.rt=RequestorType.SERVER;  return thisAuthenticator.getPasswordAuthentication();}  }
class C{  public static void resetClientHost(){  setClientHost(HOST);}  }
class C{  public static String toOctalString(int i){  return IntegralToString.intToOctalString(i);}  }
class C{  private void signalErrorToEnumerationAdapter(Throwable t){  this.aws.error=t;  this.aws.stage=AWSStorageEnumerationStages.ERROR;  this.service.handleEnumerationRequest(this.aws);}  }
class C{  protected JobSheets(int value){  super(value);}  }
class C{  private double distanceD1(double[] f,double[] w){  double dn=normVector(w);  for (int j=0; j < problem.getNumberOfObjectives(); j++) {    w[j]=w[j] / dn;  }  return innerproduct(f,w);}  }
class C{  private void verifyState(CourseUnitNavigationActivity activity,int unitIndex,CourseComponent currentUnit,CourseComponent prevUnit,CourseComponent nextUnit,ViewPager viewPager,PagerAdapter pagerAdapter,TextView prevButton,TextView nextButton,TextView prevUnitLabel,TextView nextUnitLabel){  assertTitle(activity,currentUnit.getDisplayName());  Class<? extends CourseUnitFragment> fragmentClass;  if (currentUnit instanceof VideoBlockModel) {    fragmentClass=CourseUnitVideoFragment.class;  } else   if (!currentUnit.isMultiDevice()) {    fragmentClass=CourseUnitMobileNotSupportedFragment.class;  } else   if (currentUnit.getType() != BlockType.VIDEO && currentUnit.getType() != BlockType.HTML && currentUnit.getType() != BlockType.OTHERS && currentUnit.getType() != BlockType.DISCUSSION && currentUnit.getType() != BlockType.PROBLEM) {    fragmentClass=CourseUnitEmptyFragment.class;  } else   if (currentUnit instanceof HtmlBlockModel) {    fragmentClass=CourseUnitWebViewFragment.class;  } else {    fragmentClass=CourseUnitMobileNotSupportedFragment.class;  }  Object item=pagerAdapter.instantiateItem(viewPager,unitIndex);  assertNotNull(item);  assertThat(item).isInstanceOf(fragmentClass);  Bundle args=((Fragment)item).getArguments();  assertNotNull(args);  assertEquals(currentUnit,args.getSerializable(Router.EXTRA_COURSE_UNIT));  assertEquals(prevUnit != null,prevButton.isEnabled());  assertEquals(nextUnit != null,nextButton.isEnabled());  CourseComponent prevSection=prevUnit == null ? null : prevUnit.getParent();  CourseComponent nextSection=nextUnit == null ? null : nextUnit.getParent();  if (prevSection == null || currentUnit.getParent().equals(prevSection)) {    assertThat(prevUnitLabel).isNotVisible();    assertThat(prevButton).hasText(R.string.assessment_previous);  } else {    assertThat(prevUnitLabel).isVisible();    assertThat(prevUnitLabel).hasText(prevSection.getDisplayName());  }  if (nextSection == null || currentUnit.getParent().equals(nextSection)) {    assertThat(nextUnitLabel).isNotVisible();    assertThat(nextButton).hasText(R.string.assessment_next);  } else {    assertThat(nextUnitLabel).isVisible();    assertThat(nextUnitLabel).hasText(nextSection.getDisplayName());  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public LargeConversionSet(AttributeSet source){  super(source);}  }
class C{  public TelephoneNumber(){  parameters=new NameValueList();}  }
class C{  Iterator<C> createColumnKeyIterator(){  return new ColumnKeyIterator();}  }
class C{  public static boolean sm(double a,double b){  return (b - a > SMALL);}  }
class C{  public Vector2f subtract(float valX,float valY){  return new Vector2f(x - valX,y - valY);}  }
class C{  public void testDeviceStatusReport() throws Exception {  withTerminalSized(5,5);  assertEnteringStringGivesResponse("\033[5n","\033[0n");  assertEnteringStringGivesResponse("\033[6n","\033[1;1R");  enterString("AB");  assertEnteringStringGivesResponse("\033[6n","\033[1;3R");  enterString("\r\n");  assertEnteringStringGivesResponse("\033[6n","\033[2;1R");}  }
class C{  private void pressDownUntilViewInFocus(View view,int maxKeyPress){  int count=0;  while (!view.hasFocus()) {    sendKeys(KeyEvent.KEYCODE_DPAD_DOWN);    getInstrumentation().waitForIdleSync();    if (++count > maxKeyPress) {      fail("couldn't move down to bottom button within " + maxKeyPress + " key presses.");    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.367 -0500",hash_original_method="F7F977701F133D0F59F048A53A2C698B",hash_generated_method="ABBB6CDA68601FC7EFCC3D71377FC446") public boolean stopWifi(){  try {    mService.stopWifi();    return true;  } catch (  RemoteException e) {    return false;  }}  }
class C{  public static RuntimeException throwInternalError(String s){  RuntimeException e=new RuntimeException(s);  DbException.traceThrowable(e);  throw e;}  }
class C{  @Override protected void handleClose() throws QueryEvaluationException {  try {    super.handleClose();  }  finally {    long size=clearExcludeSet();    used.addAndGet(-size);  }}  }
class C{  public static IPath canonicalPath(IPath path){  if (path == null)   return null;  try {    final String pathString=path.toOSString();    final String canonicalPath=new java.io.File(pathString).getCanonicalPath();    if (canonicalPath.equals(pathString))     return path;    return new Path(canonicalPath);  } catch (  IOException e) {    return path;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.332 -0500",hash_original_method="A537A06A51D1B98674021AAB895861DD",hash_generated_method="9473E555FD0E729E909574712BAAF604") public void processingInstruction(String target,String data) throws SAXException {  if (contentHandler != null) {    contentHandler.processingInstruction(target,data);  }}  }
class C{  public TitledPaddedPanel(){  this("",OUT_MARGIN,TITLED_MARGIN);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:44.749 -0500",hash_original_method="66AE1F5CE6A7D22DCB733CBBD166C2BB",hash_generated_method="2EA6E3EF05C1CC57312D79304A74B402") public int available(){  return mEnd - mPos;}  }
class C{  public void testSetF14(){  boolean f14=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF14(f14);  jmri.util.JUnitAppender.assertErrorMessage("Can't send F13-F20 since no command station defined");}  }
class C{  public void testListSubClass() throws Exception {  ObjectMapper mapper=new ObjectMapper();  ListSubClass result=mapper.readValue("[ \"123\" ]",ListSubClass.class);  assertEquals(1,result.size());  Object value=result.get(0);  assertEquals(StringWrapper.class,value.getClass());  StringWrapper bw=(StringWrapper)value;  assertEquals("123",bw.str);}  }
class C{  public String toString(){  return super.toString() + "[\"" + annotation+ "\"]";}  }
class C{  public void addObservations(byte var1[],byte var2[],byte cond[]){  int rows=var1.length;  observations+=rows;  for (int r=0; r < rows; r++) {    firstSecondCondCount[var1[r]][var2[r]][cond[r]]++;    firstCondCount[var1[r]][cond[r]]++;    secondCondCount[var2[r]][cond[r]]++;    condCount[cond[r]]++;  }}  }
class C{  public SimpleNode parse(Reader reader,String templateName,boolean dumpNamespace) throws ParseException {  SimpleNode ast=null;  Parser parser=(Parser)parserPool.get();  boolean madeNew=false;  if (parser == null) {    error("Runtime : ran out of parsers. Creating new.  " + " Please increment the parser.pool.size property." + " The current value is too small.");    parser=createNewParser();    if (parser != null) {      madeNew=true;    }  }  if (parser != null) {    try {      if (dumpNamespace) {        dumpVMNamespace(templateName);      }      ast=parser.parse(reader,templateName);    }  finally {      if (!madeNew) {        parserPool.put(parser);      }    }  } else {    error("Runtime : ran out of parsers and unable to create more.");  }  return ast;}  }
class C{  public static void w(String tag,String s){  if (LDJSLOG.WARN >= LOGLEVEL)   Log.w(tag,s);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  private String convertLessThanOneThousand(int number){  String soFar;  if (number % 100 < 20) {    soFar=numNames[number % 100];    number/=100;  } else   if ((number % 100 < 80) && (number % 100 > 70)) {    soFar=numNames[(number - 60) % 100];    number/=10;    soFar=tensNames[(number - 1) % 10] + soFar;    number/=10;  } else   if ((number % 100 < 100) && (number % 100 > 90)) {    soFar=numNames[(number - 80) % 100];    number/=10;    soFar=tensNames[(number - 1) % 10] + soFar;    number/=10;  } else {    soFar=numNames[number % 10];    number/=10;    soFar=tensNames[number % 10] + soFar;    number/=10;  }  if (number == 0)   return soFar;  if (number == 1)   return " cent" + soFar; else   return numNames[number] + " cent" + soFar;}  }
class C{  public void SendHomeKeyToKeypad(){  boolean found=false;  for (  InputDevice idev : events.m_Devs) {    if (idev.getOpen() && idev.getName().contains("keypad")) {      idev.SendKey(102,true);      idev.SendKey(102,false);      found=true;      break;    }  }  if (found == false)   Toast.makeText(this,"Keypad not found.",Toast.LENGTH_SHORT).show();}  }
class C{  private void onBallInPipe(){  mSoundPool.play(mSoundBallInMachine,1,1,0,0,1.0f);  mGameBallsLeft--;  mNumberCollected++;  changeIndicator();  mMatchScore+=50 * Math.max(1f,(mCurrentLevelNum - mCountLevelBallRespawns));  mViewScore.setText(String.valueOf(mMatchScore));  if (mGameBallsLeft == 0 && mViewPlayAgainBackground.getVisibility() != View.VISIBLE) {    mCurrentLevelNum++;    mLevelNumberText.setLevelNumber(mCurrentLevelNum);    mLevelNumberText.startAnimation(mAnimationLevelScaleUp);    mEndLevelCircle.startAnimation(mAnimationScaleLevelDown);  }}  }
class C{  private void unlockUdocsCodeLogic(String[] udocsToUnlock,ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws ActionNotAllowedException {  if (udocsToUnlock != null) {    ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));    GestionFondosBI fondosBI=services.lookupGestionFondosBI();    fondosBI.unlockUnidadesDocumentales(udocsToUnlock);  }}  }
class C{  public static Image decorateImageWithException(Image image,ExceptionSensorData data,ResourceManager resourceManager){  ImageDescriptor exceptionDesc=getImageDescriptor(data);  DecorationOverlayIcon icon=new DecorationOverlayIcon(image,exceptionDesc,IDecoration.BOTTOM_RIGHT);  Image createdImage=resourceManager.createImage(icon);  return createdImage;}  }
class C{  public CViewSelectionTree(final Window dialog,final IViewContainer container){  final DefaultTreeModel model=new DefaultTreeModel(null);  setModel(model);  setRootVisible(false);  model.setRoot(new CRootNode(dialog,container,model));  Preconditions.checkNotNull(container,"IE01826: Container argument can not be null");  setRootVisible(false);  setCellRenderer(new IconNodeRenderer());  addMouseListener(new InternalMouseListener());}  }
class C{  public void start(int conditions) throws IOException {  count=0;  bout=new ByteArrayOutputStream();  out=new OutStream(bout);  pushValues=new ArrayList();  labels=null;  jumps=null;  skips=null;  blocks=null;  blockStack=null;}  }
class C{  public void tag(String tag,String name,String value){  tag(tag,name,value,true);}  }
class C{  public void navigateToGameDetails(Game game,View viewToshare){  Intent detailsActivityIntent=new Intent(activityContext,DetailsActivity.class);  detailsActivityIntent.putExtra(DetailsActivity.GAME_EXTRA,Parcels.wrap(game));  ActivityOptionsCompat options=ActivityOptionsCompat.makeSceneTransitionAnimation((Activity)activityContext,viewToshare,"sharedImage");  ActivityCompat.startActivity((Activity)activityContext,detailsActivityIntent,options.toBundle());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.FEATURE_CALL__OWNER:    return owner != null;case ExpressionsPackage.FEATURE_CALL__FEATURE:  return feature != null;case ExpressionsPackage.FEATURE_CALL__OPERATION_CALL:return operationCall != OPERATION_CALL_EDEFAULT;case ExpressionsPackage.FEATURE_CALL__ARGS:return args != null && !args.isEmpty();case ExpressionsPackage.FEATURE_CALL__ARRAY_SELECTOR:return arraySelector != null && !arraySelector.isEmpty();case ExpressionsPackage.FEATURE_CALL__ARRAY_ACCESS:return arrayAccess != ARRAY_ACCESS_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public void clearConditionFlags(){  throw new RuntimeException("Unimplemented");}  }
class C{  public static void main(String[] args){  System.out.println(CURRENT_VERSION);}  }
class C{  private static double triArea(Coordinate a,Coordinate b,Coordinate c){  return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);}  }
class C{  protected void addInverseRelation(String relationName,Object relationValue){  Object inverseEntity=relationValue;  String inverseRelationName=dictionary.getRelationInverse(obj.getClass(),relationName);  if (!inverseRelationName.equals("")) {    Class<?> inverseRelationType=dictionary.getType(inverseEntity.getClass(),inverseRelationName);    PersistentResource inverseResource=new PersistentResource(this,inverseEntity,getRequestScope());    Object inverseRelation=inverseResource.getValueUnchecked(inverseRelationName);    if (Collection.class.isAssignableFrom(inverseRelationType)) {      if (inverseRelation != null) {        inverseResource.addToCollection((Collection)inverseRelation,inverseRelationName,this);      } else {        inverseResource.setValueChecked(inverseRelationName,Collections.singleton(this.getObject()));      }    } else     if (inverseRelationType.equals(this.getResourceClass())) {      inverseResource.setValueChecked(inverseRelationName,this.getObject());    } else {      throw new InternalServerErrorException("Relationship type mismatch");    }    inverseResource.markDirty();  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public XmlHandler cleanAnnotatedClassAll(Class<?>... classes){  return cleanAnnotatedClass(true,list(classes));}  }
class C{  public float textDescent(){  return g.textDescent();}  }
class C{  public boolean firstTimeIn(){  try {    mRetainedFragment=(RetainedFragment)mFragmentManager.get().findFragmentByTag(mRetainedFragmentTag);    if (mRetainedFragment == null) {      Log.d(TAG,"Creating new RetainedFragment " + mRetainedFragmentTag);      mRetainedFragment=new RetainedFragment();      mFragmentManager.get().beginTransaction().add(mRetainedFragment,mRetainedFragmentTag).commit();      return true;    } else {      Log.d(TAG,"Returning existing RetainedFragment " + mRetainedFragmentTag);      return false;    }  } catch (  NullPointerException e) {    Log.d(TAG,"NPE in firstTimeIn()");    return false;  }}  }
class C{  public ShowEditToolBarAction(final NetworkPanel networkPanel){  super("Edit Toolbar");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;}  }
class C{  protected void verifyAndCleanupSingleFileDownload(long requestId,byte[] fileData) throws Exception {  int fileSize=fileData.length;  ParcelFileDescriptor pfd=mDownloadManager.openDownloadedFile(requestId);  Cursor cursor=mDownloadManager.query(new Query().setFilterById(requestId));  try {    assertEquals(1,cursor.getCount());    assertTrue(cursor.moveToFirst());    verifyFileSize(pfd,fileSize);    verifyFileContents(pfd,fileData);  }  finally {    pfd.close();    cursor.close();    mDownloadManager.remove(requestId);  }}  }
class C{  public static String put(String tname,String jname){  return javaToTLA.put(tname,jname);}  }
class C{  public static final float[] cmykToRGB(float c,float m,float y,float k){  return cmykToRGB(c,m,y,k,new float[3]);}  }
class C{  public View create(Element elem){  if (textArea.getLineWrap())   return new WrappedPlainView(elem,textArea.getWrapStyleWord()); else   return new PlainView(elem);}  }
class C{  public DoubleMetaphoneFilterFactory(Map<String,String> args){  super(args);  inject=getBoolean(args,INJECT,true);  maxCodeLength=getInt(args,MAX_CODE_LENGTH,DEFAULT_MAX_CODE_LENGTH);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  @Nullable @ObjectiveCName("addContactCommandWithUid:") public Command<Boolean> addContact(int uid){  return modules.getContactsModule().addContact(uid);}  }
class C{  public boolean isCompatibleWith(String version) throws NumberFormatException {  String[] requested=version.split("\\.");  String[] provided=specVersion.split("\\.");  for (int i=0; i < Math.min(requested.length,provided.length); i++) {    int reqNum=Integer.parseInt(requested[i]);    int provNum=Integer.parseInt(provided[i]);    if (reqNum > provNum) {      return false;    } else     if (reqNum < provNum) {      return true;    }  }  if (requested.length > provided.length) {    return false;  }  return true;}  }
class C{  public void notifyRegisteredObjects(){  registrator.setChanges();  registrator.notifyObservers(circumstances);}  }
class C{  public void markStart(IGraphEntity st){  start=getKey(st);}  }
class C{  private void updateDownloadProgress(DownloadInfo downloadInfo,DownloadStatus status){  assert downloadInfo.hasDownloadId();  int downloadId=downloadInfo.getDownloadId();  DownloadProgress progress=mDownloadProgressMap.get(downloadId);  if (progress == null) {    progress=new DownloadProgress(System.currentTimeMillis(),downloadInfo,status);    if (status == DownloadStatus.IN_PROGRESS) {      addDownloadIdToSharedPrefs(downloadId);    }    mDownloadProgressMap.putIfAbsent(downloadId,progress);  } else {    progress.mDownloadStatus=status;    progress.mDownloadInfo=downloadInfo;  }}  }
class C{  public LofsRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void apply(FaceletContext ctxObj,UIComponent parent) throws IOException {  FaceletContextImplBase ctx=(FaceletContextImplBase)ctxObj;  VariableMapper orig=ctx.getVariableMapper();  if (this.vars.length > 0) {    VariableMapper varMapper=new VariableMapperWrapper(orig);    for (int i=0; i < this.vars.length; i++) {      varMapper.setVariable(this.vars[i].getLocalName(),this.vars[i].getValueExpression(ctx,Object.class));    }    ctx.setVariableMapper(varMapper);  }  try {    ctx.pushClient(this);    ctx.includeFacelet(parent,this.location);  } catch (  FileNotFoundException e) {    throw new TagException(this.tag,e.getMessage());  } finally {    ctx.popClient(this);    ctx.setVariableMapper(orig);  }}  }
class C{  public final void addToTier(int tier,String var){  if (!variables.contains(var)) {    addVariable(var);  }  if (tier < 0) {    throw new IllegalArgumentException();  }  if (var == null) {    throw new NullPointerException();  }  for (  String var2 : tierMap.keySet()) {    int tier2=tierMap.get(var2);    if (tier2 < tier) {      if (isRequired(var,var2)) {        throw new IllegalStateException("Edge " + var + "-->"+ var2+ " is a required edge. Please remove that requirement "+ "or adjust \nthe tiers so that "+ var+ "-->"+ var2+ " will not be forbidden.");      }    } else     if (tier < tier2) {      if (isRequired(var2,var)) {        throw new IllegalStateException("Edge " + var2 + "-->"+ var+ " is a required edge. Please remove that requirement "+ "or adjust \nthe tiers so that "+ var2+ "-->"+ var+ " will not be forbidden.");      }    }  }  tierMap.put(var,tier);}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,char escape,int line){  this(reader,separator,quotechar,escape,line,CSVParser.DEFAULT_STRICT_QUOTES);}  }
class C{  public void shutdown() throws SchedulerException {  try {    String schedulerName=getSchedulerName();    getRemoteScheduler().shutdown();    SchedulerRepository.getInstance().remove(schedulerName);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  protected Rectangle2D createLogicalBounds(){  return getGV().getLogicalBounds();}  }
class C{  public void defineTypeAtom(final HGPersistentHandle handle,final Class<?> clazz){  defineTypeAtom(handle,config.getDefaultSchema().toTypeURI(clazz));}  }
class C{  public ToolTipPopup(String text,View anchor){  mText=text;  mAnchorViewRef=new WeakReference<View>(anchor);  mContext=anchor.getContext();}  }
class C{  public void testJsp() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simple-war/index.jsp");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public Object clone(){  ZoneInfoOld zi=(ZoneInfoOld)super.clone();  zi.lastRule=null;  return zi;}  }
class C{  public boolean isMissingDataNotificationEnabled(){  return missingDataNotificationEnabled;}  }
class C{  public void selectDevice(ConnectableDevice device){  if (device != null) {    pendingDevice=device;    pendingDevice.addListener(this);    if (listener != null) {      listener.onPrepareDevice(device);    }    if (!device.isConnected()) {      device.connect();    } else {      onDeviceReady(device);    }  } else {    cleanupPending();  }}  }
class C{  public static int ENOTSOCK(){  return Errno.ENOTSOCK.intValue();}  }
class C{  private void init(){  this.setSurfaceTextureListener(this);}  }
class C{  public LabelNode gotoLabel(final LabelNode l){  Instantiation owner=findOwner(instructions.indexOf(l));  return owner.rangeTable.get(l);}  }
class C{  public E putDouble(final String key,final double value){  this.bundle.putDouble(key,value);  return (E)this;}  }
class C{  SegmentReader(SegmentCommitInfo si,SegmentReader sr,Bits liveDocs,int numDocs) throws IOException {  this(si,sr,liveDocs,numDocs,true);}  }
class C{  @Override public void D(final Object e,final FormObject formObj){  if (showMethods) {    System.out.println("DefaultActionHandler.D()");  }  javascript.execute(formObj,PdfDictionary.D,ActionHandler.FOCUS_EVENT,' ');}  }
class C{  public void reset(){  super.reset();  fmod.reset();}  }
class C{  public Matrix33(float xx,float xy,float xz,float yx,float yy,float yz,float zx,float zy,float zz){  this.xx=xx;  this.xy=xy;  this.xz=xz;  this.yx=yx;  this.yy=yy;  this.yz=yz;  this.zx=zx;  this.zy=zy;  this.zz=zz;}  }
class C{  private void addTaxonomicCoverages(Document doc,Eml eml) throws DocumentException {  if (exists(eml.getTaxonomicCoverages()) && !eml.getTaxonomicCoverages().isEmpty()) {    Paragraph p=new Paragraph();    p.setAlignment(Element.ALIGN_JUSTIFIED);    p.setFont(font);    boolean firstTaxon=true;    for (    TaxonomicCoverage taxcoverage : eml.getTaxonomicCoverages()) {      if (!firstTaxon) {        p.add(Chunk.NEWLINE);      }      firstTaxon=false;      p.add(new Phrase(getText("rtf.taxcoverage"),fontTitle));      p.add(Chunk.NEWLINE);      p.add(Chunk.NEWLINE);      if (exists(taxcoverage.getDescription())) {        p.add(new Phrase(getText("rtf.taxcoverage.description") + ": ",fontTitle));        p.add(taxcoverage.getDescription().replace("\r\n","\n"));        p.add(Chunk.NEWLINE);      }      Map<String,String> ranks=vocabManager.getI18nVocab(Constants.VOCAB_URI_RANKS,Locale.getDefault().getLanguage(),false);      boolean firstRank=true;      for (      String rank : ranks.keySet()) {        boolean wroteRank=false;        for (        TaxonKeyword keyword : taxcoverage.getTaxonKeywords()) {          if (exists(keyword.getRank()) && keyword.getRank().equals(rank)) {            if (!wroteRank) {              if (firstRank) {                p.add(new Phrase(getText("rtf.taxcoverage.rank"),fontTitle));              }              p.add(Chunk.NEWLINE);              p.add(StringUtils.capitalize(rank) + ": ");              p.add(keyword.getScientificName());              wroteRank=true;              firstRank=false;            } else {              p.add(", " + keyword.getScientificName());            }          }        }      }      p.add(Chunk.NEWLINE);      boolean isFirst=true;      for (      TaxonKeyword keyword : taxcoverage.getTaxonKeywords()) {        if (exists(keyword.getCommonName())) {          if (isFirst) {            p.add(new Phrase(getText("rtf.taxcoverage.common") + ": ",fontTitle));          } else {            p.add(", ");          }          isFirst=false;          p.add(keyword.getCommonName());        }      }    }    p.add(Chunk.NEWLINE);    doc.add(p);    p.clear();  }}  }
class C{  public final boolean sendMessage(Message msg){  return mExec.sendMessage(msg);}  }
class C{  protected void writeNamespace(String prefix,String uri) throws IOException {  if ((prefix != null) && (prefix.length() > 0)) {    writer.write(" xmlns:");    writer.write(prefix);    writer.write("=\"");  } else {    writer.write(" xmlns=\"");  }  writer.write(uri);  writer.write("\"");}  }
class C{  @Inline public void postCopy(ObjectReference object,int bytes,boolean majorGC){  ObjectHeader.writeMarkState(object,markState,bytes > BYTES_IN_LINE);  if (!MARK_LINE_AT_SCAN_TIME && majorGC)   markLines(object);  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!ForwardingWord.isForwardedOrBeingForwarded(object));  if (VM.VERIFY_ASSERTIONS && HeaderByte.NEEDS_UNLOGGED_BIT)   VM.assertions._assert(HeaderByte.isUnlogged(object));}  }
class C{  private void createButtons(){  iconButton=new NoFocusButton("InternalFrameTitlePane.iconifyButtonAccessibleName");  iconButton.addActionListener(iconifyAction);  if (iconButtonToolTip != null && iconButtonToolTip.length() != 0) {    iconButton.setToolTipText(iconButtonToolTip);  }  maxButton=new NoFocusButton("InternalFrameTitlePane.maximizeButtonAccessibleName");  maxButton.addActionListener(maximizeAction);  closeButton=new NoFocusButton("InternalFrameTitlePane.closeButtonAccessibleName");  closeButton.addActionListener(closeAction);  if (closeButtonToolTip != null && closeButtonToolTip.length() != 0) {    closeButton.setToolTipText(closeButtonToolTip);  }  setButtonTooltips();}  }
class C{  public boolean addSoftWrapChangeListener(@NotNull SoftWrapChangeListener listener){  return myListeners.add(listener);}  }
class C{  public void writeExif(InputStream jpegStream,OutputStream exifOutStream) throws IOException {  if (jpegStream == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  doExifStreamIO(jpegStream,s);  s.flush();}  }
class C{  public synchronized void pressPause(){  pressPause(true);}  }
class C{  public static void cArraySet(char[] a,int i,char v){  try {    a[i]=v;  } catch (  Throwable t) {    a[DefaultGroovyMethodsSupport.normaliseIndex(i,a.length)]=v;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.652 -0500",hash_original_method="82C3193F23F6D7770C948A8F860700C8",hash_generated_method="ECFDA70CD333AB189AE460B59374A49D") public boolean isInfinite(){  return isInfinite(value);}  }
class C{  public Optional<Context> fetchContext() throws NotificationStoreException {  final FetchMap fetchMap=new FetchMap.Builder(LOCATION).build();  LOGGER.debug("Fetching key: {}",LOCATION);  try (Timer.Context context=fetchTimer.time()){    final FetchMap.Response response=client.execute(fetchMap);    return Optional.ofNullable(response.getContext());  } catch (  ExecutionException e) {    LOGGER.error("Unable to fetch key: " + LOCATION,e);    throw new NotificationStoreException(e);  }catch (  InterruptedException e) {    LOGGER.warn("Fetch request was interrupted",e);    Thread.currentThread().interrupt();    throw new NotificationStoreException(e);  }}  }
class C{  private THLEvent genEvent(long seqno,short fragNo,boolean lastFrag,String shardId){  ReplDBMSEvent rde=helper.createEvent(seqno,fragNo,lastFrag,shardId);  THLEvent thlEvent=new THLEvent(rde.getSourceId(),rde);  return thlEvent;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public void score(int s){  score=s;}  }
class C{  private void stepOutput(final Port port){  final Pipe sendingPipe=getCasing().getSendingPipe(getFace(),port);  if (!sendingPipe.isWriting()) {    sendingPipe.beginWrite(input);  }}  }
class C{  @Override protected ClientConnectionManager createClientConnectionManager(){  HttpParams params=new BasicHttpParams();  HttpProtocolParams.setVersion(params,HttpVersion.HTTP_1_1);  HttpProtocolParams.setContentCharset(params,"utf-8");  params.setBooleanParameter("http.protocol.expect-continue",false);  SchemeRegistry registry=new SchemeRegistry();  registry.register(new Scheme("http",PlainSocketFactory.getSocketFactory(),HTTP_PORT));  registry.register(new Scheme("https",new EasySSLSocketFactory(),HTTPS_PORT));  ThreadSafeClientConnManager manager=new ThreadSafeClientConnManager(params,registry);  return manager;}  }
class C{  public static ArrayList<Object> mergeAllItemSets(ArrayList<Object> itemSets,int size,int totalTrans){  ArrayList<Object> newVector=new ArrayList<Object>();  AprioriItemSet result;  int numFound, k;  for (int i=0; i < itemSets.size(); i++) {    ItemSet first=(ItemSet)itemSets.get(i);    out:     for (int j=i + 1; j < itemSets.size(); j++) {      ItemSet second=(ItemSet)itemSets.get(j);      result=new AprioriItemSet(totalTrans);      result.m_items=new int[first.m_items.length];      numFound=0;      k=0;      while (numFound < size) {        if (first.m_items[k] == second.m_items[k]) {          if (first.m_items[k] != -1) {            numFound++;          }          result.m_items[k]=first.m_items[k];        } else {          break out;        }        k++;      }      while (k < first.m_items.length) {        if ((first.m_items[k] != -1) && (second.m_items[k] != -1)) {          break;        } else {          if (first.m_items[k] != -1) {            result.m_items[k]=first.m_items[k];          } else {            result.m_items[k]=second.m_items[k];          }        }        k++;      }      if (k == first.m_items.length) {        result.m_counter=0;        newVector.add(result);      }    }  }  return newVector;}  }
class C{  public ProtocolDecoderException(){}  }
class C{  private void notifyConsumer(final Consumer<Object> consumer,final Object event){  final Executor executor=consumerExecutors.get(consumer);  if (executor == null) {    consumer.accept(event);  } else {    executor.execute(null);  }}  }
class C{  private void clearMemory(){  dataIsTop=true;  aMemVal.clear();}  }
class C{  @Override public void close() throws IOException {  ordinals=null;}  }
class C{  public MediaServerRemuxer(FileChannel fileChannel,int outputFormat,boolean isTV,MediaServer.Connection mediaServer){  this(fileChannel,27888 * TS_ALIGN,outputFormat,isTV ? MPEGParser2.StreamFormat.ATSC : MPEGParser2.StreamFormat.FREE,MPEGParser2.SubFormat.UNKNOWN,MPEGParser2.TuneStringType.CHANNEL,0,0,0,0,0,mediaServer);}  }
class C{  public DoubleDocValuesField(String name,double value){  super(name,Double.doubleToRawLongBits(value));}  }
class C{  public String stepSizeTipText(){  return "Set the number of instances to add at each step.";}  }
class C{  public ConfigurationTestCase(){  super("ConfigurationTestCase");}  }
class C{  public String midString(int index,final int length){  if (index < 0) {    index=0;  }  if (length <= 0 || index >= size) {    return "";  }  if (size <= index + length) {    return new String(buffer,index,size - index);  }  return new String(buffer,index,length);}  }
class C{  public static void sendEmail(final Context context,final String receiver,final String subject,final String text,final String pickerTitle,final String securityErrorMessage,final String noAssociatedAppErrorMessage){  sendEmail(context,!TextUtils.isEmpty(receiver) ? new String[]{receiver} : null,subject,text,pickerTitle,securityErrorMessage,noAssociatedAppErrorMessage);}  }
class C{  @Override public WritableRaster copyData(WritableRaster dest){  Rectangle bounds;  Raster tile;  if (dest == null) {    bounds=getBounds();    Point p=new Point(minX,minY);    SampleModel sm=sampleModel.createCompatibleSampleModel(width,height);    dest=Raster.createWritableRaster(sm,p);  } else {    bounds=dest.getBounds();  }  int startX=XToTileX(bounds.x);  int startY=YToTileY(bounds.y);  int endX=XToTileX(bounds.x + bounds.width - 1);  int endY=YToTileY(bounds.y + bounds.height - 1);  for (int j=startY; j <= endY; j++) {    for (int i=startX; i <= endX; i++) {      tile=getTile(i,j);      Rectangle intersectRect=bounds.intersection(tile.getBounds());      Raster liveRaster=tile.createChild(intersectRect.x,intersectRect.y,intersectRect.width,intersectRect.height,intersectRect.x,intersectRect.y,null);      dest.setDataElements(0,0,liveRaster);    }  }  return dest;}  }
class C{  @Field(3) public __VARIANT_NAME_3_union iVal(short iVal){  this.io.setShortField(this,3,iVal);  return this;}  }
class C{  public final void appendPGN(String pgn,Context context){  try {    mkDirs();    FileWriter fw=new FileWriter(fileName,true);    fw.write(pgn);    fw.close();    Toast.makeText(context,R.string.game_saved,Toast.LENGTH_SHORT).show();  } catch (  IOException e) {    if (context != null)     Toast.makeText(context,R.string.failed_to_save_game,Toast.LENGTH_SHORT).show();  }}  }
class C{  @Override public void onResume(){  super.onResume();  if (AdvertiserService.running) {    mSwitch.setChecked(true);  } else {    mSwitch.setChecked(false);  }  IntentFilter failureFilter=new IntentFilter(AdvertiserService.ADVERTISING_FAILED);  getActivity().registerReceiver(advertisingFailureReceiver,failureFilter);}  }
class C{  public final boolean isWarnEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_WARN);}  }
class C{  @Override public void customize(ConfigurableEmbeddedServletContainer container){  MimeMappings mappings=new MimeMappings(MimeMappings.DEFAULT);  mappings.add("html","text/html;charset=utf-8");  mappings.add("json","text/html;charset=utf-8");  container.setMimeMappings(mappings);}  }
class C{  protected void logStatusInfo(String detailMsg) throws MessagingException {  getLogger().info(getStatusReport(detailMsg).toString());}  }
class C{  public RotationMatrixBuilder rotateAll(){  for (int i=0; i < dimension - 1; i++) {    for (int j=i + 1; j < dimension; j++) {      Plane plane=new Plane(i,j);      plane.setTheta(PRNG.nextDouble(0.0,2.0 * Math.PI));      planes.add(plane);    }  }  return this;}  }
class C{  private synchronized void updateIOThrottle(OneMerge newMerge) throws IOException {  if (doAutoIOThrottle == false) {    return;  }  double mergeMB=bytesToMB(newMerge.estimatedMergeBytes);  if (mergeMB < MIN_BIG_MERGE_MB) {    return;  }  long now=System.nanoTime();  boolean newBacklog=isBacklog(now,newMerge);  boolean curBacklog=false;  if (newBacklog == false) {    if (mergeThreads.size() > maxThreadCount) {      curBacklog=true;    } else {      for (      MergeThread mergeThread : mergeThreads) {        if (isBacklog(now,mergeThread.merge)) {          curBacklog=true;          break;        }      }    }  }  double curMBPerSec=targetMBPerSec;  if (newBacklog) {    targetMBPerSec*=1.20;    if (targetMBPerSec > MAX_MERGE_MB_PER_SEC) {      targetMBPerSec=MAX_MERGE_MB_PER_SEC;    }    if (verbose()) {      if (curMBPerSec == targetMBPerSec) {        message(String.format(Locale.ROOT,"io throttle: new merge backlog; leave IO rate at ceiling %.1f MB/sec",targetMBPerSec));      } else {        message(String.format(Locale.ROOT,"io throttle: new merge backlog; increase IO rate to %.1f MB/sec",targetMBPerSec));      }    }  } else   if (curBacklog) {    if (verbose()) {      message(String.format(Locale.ROOT,"io throttle: current merge backlog; leave IO rate at %.1f MB/sec",targetMBPerSec));    }  } else {    targetMBPerSec/=1.10;    if (targetMBPerSec < MIN_MERGE_MB_PER_SEC) {      targetMBPerSec=MIN_MERGE_MB_PER_SEC;    }    if (verbose()) {      if (curMBPerSec == targetMBPerSec) {        message(String.format(Locale.ROOT,"io throttle: no merge backlog; leave IO rate at floor %.1f MB/sec",targetMBPerSec));      } else {        message(String.format(Locale.ROOT,"io throttle: no merge backlog; decrease IO rate to %.1f MB/sec",targetMBPerSec));      }    }  }  double rate;  if (newMerge.maxNumSegments != -1) {    rate=forceMergeMBPerSec;  } else {    rate=targetMBPerSec;  }  newMerge.rateLimiter.setMBPerSec(rate);  targetMBPerSecChanged();}  }
class C{  public E removeFirst(){  return remove(header.next);}  }
class C{  void processSerialCalls(){  processingSerialCalls=true;  int size=pendingSerialCalls.size();  if (size > 0) {    Runnable[] array=null;synchronized (lock) {      size=pendingSerialCalls.size();      array=new Runnable[size];      pendingSerialCalls.toArray(array);      if (size == pendingSerialCalls.size()) {        pendingSerialCalls.clear();      } else {        for (int iter=0; iter < size; iter++) {          pendingSerialCalls.remove(0);        }      }    }    for (int iter=0; iter < size; iter++) {      array[iter].run();    }synchronized (lock) {      lock.notify();    }  }  processingSerialCalls=false;}  }
class C{  public void endCompose(StylesheetRoot sroot) throws TransformerException {  int length=getParamElemCount();  for (int i=0; i < length; i++) {    ElemWithParam ewp=getParamElem(i);    ewp.endCompose(sroot);  }  super.endCompose(sroot);}  }
class C{  public void removeAllUsers(){  this.users.clear();}  }
class C{  @BeforeClass public static void beforeClass() throws Exception {  assumeTrue(CanConnect.to(new InetSocketAddress(MYSQL_HOST,MYSQL_PORT)));  VaultRule vaultRule=new VaultRule();  vaultRule.before();  if (!vaultRule.prepare().hasSecretBackend("mysql")) {    vaultRule.prepare().mountSecret("mysql");  }  VaultOperations vaultOperations=vaultRule.prepare().getVaultOperations();  vaultOperations.write("mysql/config/connection",Collections.singletonMap("connection_url",ROOT_CREDENTIALS));  vaultOperations.write("mysql/roles/readonly",Collections.singletonMap("sql",CREATE_USER_AND_GRANT_SQL));}  }
class C{  public ImageViewer(Image i){  this();  setImage(i);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"LDR");  translateAll(environment,instruction,"LDR",instructions);}  }
class C{  protected void removeCurrentRow(){  throw new UnsupportedOperationException();}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  if (m_zeroR == null) {    return "Classifier hasn't been built yet!";  }  if (!m_SuitableData) {    StringBuffer buf=new StringBuffer();    buf.append(this.getClass().getName().replaceAll(".*\\.","") + "\n");    buf.append(this.getClass().getName().replaceAll(".*\\.","").replaceAll(".","=") + "\n\n");    buf.append("Warning: No model could be built, hence ZeroR model is used:\n\n");    buf.append(m_zeroR.toString());    return buf.toString();  }  text.append("Additive Regression\n\n");  text.append("ZeroR model\n\n" + m_zeroR + "\n\n");  text.append("Base classifier " + getClassifier().getClass().getName() + "\n\n");  text.append("" + m_Classifiers.size() + " models generated.\n");  for (int i=0; i < m_Classifiers.size(); i++) {    text.append("\nModel number " + i + "\n\n"+ m_Classifiers.get(i)+ "\n");  }  return text.toString();}  }
class C{  public void clearParameters(){  _vars.removeAll();}  }
class C{  PhoneNumberController(ResultReceiver resultReceiver,StateButton stateButton,EditText phoneEditText,CountryListSpinner countryCodeSpinner,DigitsClient client,ErrorCodes errors,ActivityClassManager activityClassManager,SessionManager<DigitsSession> sessionManager,TosView tosView,DigitsEventCollector digitsEventCollector,boolean emailCollection,DigitsEventDetailsBuilder digitsEventDetailsBuilder){  super(resultReceiver,stateButton,phoneEditText,client,errors,activityClassManager,sessionManager,digitsEventCollector,digitsEventDetailsBuilder);  this.countryCodeSpinner=countryCodeSpinner;  this.tosView=tosView;  voiceEnabled=false;  resendState=false;  this.emailCollection=emailCollection;}  }
class C{  public void cancelRequests(Context context,boolean mayInterruptIfRunning){  List<WeakReference<Future<?>>> requestList=requestMap.get(context);  if (requestList != null) {    for (    WeakReference<Future<?>> requestRef : requestList) {      Future<?> request=requestRef.get();      if (request != null) {        request.cancel(mayInterruptIfRunning);      }    }  }  requestMap.remove(context);}  }
class C{  public static float[] subBounds(float[] target,float[] contractor){  assert target.length == 6;  target[0]-=contractor[0];  target[1]-=contractor[1];  target[2]-=contractor[2];  target[3]-=contractor[3];  target[4]-=contractor[4];  target[5]-=contractor[5];  return target;}  }
class C{  public void addGetDataEventListener(GetDataEventListener listener){  addGetDataEventListener(Threading.USER_THREAD,listener);}  }
class C{  public void onPrivateListen(final String texttype,final String text){  NotificationType type;  try {    type=NotificationType.valueOf(texttype);  } catch (  final RuntimeException e) {    LOGGER.error("Unkown texttype: ",e);    type=NotificationType.PRIVMSG;  }  ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine(text,type));  if (type != NotificationType.SCENE_SETTING) {    ClientSingletonRepository.getUserInterface().addGameScreenText(getX() + (getWidth() / 2.0),getY(),text.replace("|",""),type,false);  }}  }
class C{  public void addHeader(String s){  header.add(s);}  }
class C{  private static String createMessage(String fieldName,String value){  StringBuffer buf=new StringBuffer().append("Value ");  if (value == null) {    buf.append("null");  } else {    buf.append('"');    buf.append(value);    buf.append('"');  }  buf.append(" for ").append(fieldName).append(' ').append("is not supported");  return buf.toString();}  }
class C{  public void init(int width,int height,int glName,int glTarget,int glFormat,int glWidth,int glHeight,int glMinFilter,int glMagFilter,int glWrapS,int glWrapT){  this.width=width;  this.height=height;  this.glName=glName;  this.glTarget=glTarget;  this.glFormat=glFormat;  this.glWidth=glWidth;  this.glHeight=glHeight;  this.glMinFilter=glMinFilter;  this.glMagFilter=glMagFilter;  this.glWrapS=glWrapS;  this.glWrapT=glWrapT;  maxTexcoordU=(float)width / glWidth;  maxTexcoordV=(float)height / glHeight;  usingMipmaps=glMinFilter == PGL.LINEAR_MIPMAP_NEAREST || glMinFilter == PGL.LINEAR_MIPMAP_LINEAR;  usingRepeat=glWrapS == PGL.REPEAT || glWrapT == PGL.REPEAT;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ChanceNode(String nodeId,ProbDistribution distrib){  super(nodeId);  if (!distrib.getVariable().equals(nodeId)) {    log.warning(nodeId + "  != " + distrib.getVariable());  }  this.distrib=distrib;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (type: ");  result.append(type);  result.append(')');  return result.toString();}  }
class C{  public void paintScrollBarTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected EntityItemMetaBuilder(){  this.meta=Diorite.getCore().getItemFactory().construct(EntityItemMeta.class);}  }
class C{  private ParseResult mergeSelectWithAgg(ParseResult top,ParseResult nested) throws SQLException {  if (top.getRequestScore())   throw new SQLException("Unable to request a _score on an aggregation");  if (!(top.getQuery() instanceof MatchAllQueryBuilder))   throw new SQLException("Unable to combine a WHERE clause with a nested query");  int limit=Math.min(top.getLimit(),nested.getLimit());  if (limit <= 0)   limit=Math.max(top.getLimit(),nested.getLimit());  List<OrderBy> sorts=nested.getSorts();  sorts.addAll(top.getSorts());  boolean useCache=top.getUseCache() || nested.getUseCache();  QueryBuilder aggQuery=nested.getQuery();  AggregationBuilder<?> agg=nested.getAggregation();  IComparison having=nested.getHaving();  Heading head=new Heading();  if (top.getHeading().hasAllCols())   head=nested.getHeading(); else {    for (    Column col : top.getHeading().columns()) {      Column col2=nested.getHeading().getColumnByNameAndOp(col.getColumn(),Operation.NONE);      if (col2 == null)       col2=nested.getHeading().getColumnByLabel(col.getAlias());      if (col2 == null)       throw new SQLException("Unable to determine column '" + col + "' within nested query");      nested.getHeading().remove(col2);      head.add(new Column(col2.getColumn(),col2.getOp()).setAlias(col.getAlias()).setSqlType(col2.getSqlType()));    }    for (    Column col2 : nested.getHeading().columns()) {      head.add(new Column(col2.getColumn(),col2.getOp()).setAlias(col2.getAlias()).setCalculation(col2.getCalculation()).setSqlType(col2.getSqlType()).setTable(col2.getTable(),col2.getTableAlias()).setVisible(false));    }  }  head.buildIndex();  return new ParseResult(head,nested.getSources(),aggQuery,agg,having,sorts,limit,useCache,false);}  }
class C{  public <T>Result<T> evaluate(Class<T> concept) throws QueryEvaluationException {  TupleQueryResult tuple=query.evaluate();  List<String> bindings=tuple.getBindingNames();  if (concept.isArray() && !manager.getObjectFactory().isDatatype(concept)) {    ObjectArrayCursor cursor=new ObjectArrayCursor(manager,tuple,bindings,concept.getComponentType());    Result result=new ResultImpl(cursor,concept);    return (Result<T>)result;  } else {    String binding=bindings.get(0);    ObjectCursor cursor=new ObjectCursor(manager,tuple,binding);    Result result=new ResultImpl(cursor,concept);    return (Result<T>)result;  }}  }
class C{  private void emitLines(final SpannableStringBuilder out,final Block block){switch (block.type) {case FENCED_CODE:    this.emitCodeLines(out,block.lines,block.meta);  break;default :this.emitMarkedLines(out,block.lines);break;}}  }
class C{  public static void startWorkflowProcess(int AD_Table_ID,int Record_ID){  if (s_workflow_Window_ID == 0)   return;  MQuery query=null;  if (AD_Table_ID != 0 && Record_ID != 0) {    query=new MQuery("AD_WF_Process");    query.addRestriction("AD_Table_ID",MQuery.EQUAL,AD_Table_ID);    query.addRestriction("Record_ID",MQuery.EQUAL,Record_ID);  }  AWindow frame=new AWindow();  if (!frame.initWindow(s_workflow_Window_ID,query))   return;  addToWindowManager(frame);  if (Ini.isPropertyBool(Ini.P_OPEN_WINDOW_MAXIMIZED)) {    frame.pack();    frame.setExtendedState(Frame.MAXIMIZED_BOTH);    frame.setVisible(true);    frame.toFront();  } else   AEnv.showCenterScreen(frame);  frame=null;}  }
class C{  @Override protected void initData(){}  }
class C{  @Override public String toString(){  return name;}  }
class C{  protected static void dispose(){}  }
class C{  public void putClientProperty(String key,Object value){  if (clientProperties == null) {    clientProperties=new HashMap<String,Object>();  }  if (value == null) {    clientProperties.remove(key);  } else {    clientProperties.put(key,value);  }}  }
class C{  public String login(int AD_Org_ID,int AD_Role_ID,int AD_User_ID){  Env.setContext(Env.getCtx(),CTX_IsLiberoEnabled,true);  return null;}  }
class C{  protected int keyOnList(String key,List<String> list){  int ret=-1;  int index=0;  if (list != null) {    for (    String listKey : list) {      if (listKey.equalsIgnoreCase(key)) {        ret=index;        break;      }      index++;    }  }  return ret;}  }
class C{  public static boolean isTransient(int mod){  return (mod & TRANSIENT) != 0;}  }
class C{  @Override void draw(Canvas canvas){  updateRadius();  getActionButton().getPaint().setShadowLayer(currentShadowRadius,getActionButton().getShadowXOffset(),getActionButton().getShadowYOffset(),getActionButton().getShadowColor());  LOGGER.trace("Drawn the next Shadow Responsive Effect step");}  }
class C{  public SetMonitoringModeResponse SetMonitoringMode(SetMonitoringModeRequest req) throws ServiceFaultException, ServiceResultException {  return (SetMonitoringModeResponse)channel.serviceRequest(req);}  }
class C{  public void selectParameters(List<Parameter> params){}  }
class C{  public Vector copyVector(){  Vector result=new Vector(getRowDimension());  for (int i=0; i < getRowDimension(); i++) {    result.setValue(i,getValue(i));  }  return result;}  }
class C{  public MysqlCharset(String charsetName,int mblen,int priority,String[] javaEncodings){  this.charsetName=charsetName;  this.mblen=mblen;  this.priority=priority;  for (int i=0; i < javaEncodings.length; i++) {    String encoding=javaEncodings[i];    try {      Charset cs=Charset.forName(encoding);      addEncodingMapping(cs.name());      Set<String> als=cs.aliases();      Iterator<String> ali=als.iterator();      while (ali.hasNext()) {        addEncodingMapping(ali.next());      }    } catch (    Exception e) {      if (mblen == 1) {        addEncodingMapping(encoding);      }    }  }  if (this.javaEncodingsUc.size() == 0) {    if (mblen > 1) {      addEncodingMapping("UTF-8");    } else {      addEncodingMapping("Cp1252");    }  }}  }
class C{  public InputStream openStream(Iterator mimeTypes) throws IOException {  return data.openStream(userAgent,mimeTypes);}  }
class C{  public void mouseWheelMoved(MouseWheelEvent e){  boolean accepted=checkModifiers(e);  float delta=this.delta;  if (accepted == true) {    VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();    MutableTransformer modelTransformer=vv.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.LAYOUT);    MutableTransformer viewTransformer=vv.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.VIEW);    int amount=e.getWheelRotation();    if (amount < 0) {      delta=-delta;    }    changeMagnification(modelTransformer,delta);    changeMagnification(viewTransformer,delta);    vv.repaint();    e.consume();  }}  }
class C{  @Override public void mouseMoved(MouseEvent e){  if (!fixedHoverEntry) {    updateHoverEntry(e.getPoint());  }}  }
class C{  private static double[][] createTransposedPhiTransform(double originLon,double originLat,double[][] phiMatrix){  if (phiMatrix == null) {    phiMatrix=new double[3][3];  }  originLon=StrictMath.toRadians(originLon);  originLat=StrictMath.toRadians(originLat);  final double sLat=StrictMath.sin(originLat);  final double cLat=StrictMath.cos(originLat);  final double sLon=StrictMath.sin(originLon);  final double cLon=StrictMath.cos(originLon);  phiMatrix[0][0]=-sLon;  phiMatrix[1][0]=cLon;  phiMatrix[2][0]=0.0D;  phiMatrix[0][1]=-sLat * cLon;  phiMatrix[1][1]=-sLat * sLon;  phiMatrix[2][1]=cLat;  phiMatrix[0][2]=cLat * cLon;  phiMatrix[1][2]=cLat * sLon;  phiMatrix[2][2]=sLat;  return phiMatrix;}  }
class C{  public static int ENOLINK(){  return Errno.ENOLINK.intValue();}  }
class C{  private void attemptOrientationSelection(){  int index=this.orientationCombo.getSelectedIndex();  if (index == ORIENTATION_VERTICAL) {    this.plotOrientation=PlotOrientation.VERTICAL;  } else {    this.plotOrientation=PlotOrientation.HORIZONTAL;  }}  }
class C{  final void put(final ByteVector out){  out.put2(access).put2(name.index).put2(desc.index);  int attributeCount=0;  if (code.length > 0) {    ++attributeCount;  }  if (exceptionCount > 0) {    ++attributeCount;  }  if ((access & Constants.ACC_SYNTHETIC) != 0) {    ++attributeCount;  }  if ((access & Constants.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  out.put2(attributeCount);  if (code.length > 0) {    int size=12 + code.length + 8 * catchCount;    if (localVar != null) {      size+=8 + localVar.length;    }    if (lineNumber != null) {      size+=8 + lineNumber.length;    }    out.put2(cw.newUTF8("Code").index).put4(size);    out.put2(maxStack).put2(maxLocals);    out.put4(code.length).putByteArray(code.data,0,code.length);    out.put2(catchCount);    if (catchCount > 0) {      out.putByteArray(catchTable.data,0,catchTable.length);    }    attributeCount=0;    if (localVar != null) {      ++attributeCount;    }    if (lineNumber != null) {      ++attributeCount;    }    out.put2(attributeCount);    if (localVar != null) {      out.put2(cw.newUTF8("LocalVariableTable").index);      out.put4(localVar.length + 2).put2(localVarCount);      out.putByteArray(localVar.data,0,localVar.length);    }    if (lineNumber != null) {      out.put2(cw.newUTF8("LineNumberTable").index);      out.put4(lineNumber.length + 2).put2(lineNumberCount);      out.putByteArray(lineNumber.data,0,lineNumber.length);    }  }  if (exceptionCount > 0) {    out.put2(cw.newUTF8("Exceptions").index).put4(2 * exceptionCount + 2);    out.put2(exceptionCount);    for (int i=0; i < exceptionCount; ++i) {      out.put2(exceptions[i]);    }  }  if ((access & Constants.ACC_SYNTHETIC) != 0) {    out.put2(cw.newUTF8("Synthetic").index).put4(0);  }  if ((access & Constants.ACC_DEPRECATED) != 0) {    out.put2(cw.newUTF8("Deprecated").index).put4(0);  }}  }
class C{  protected static int toDigit(char ch,int index) throws DSSException {  int digit=Character.digit(ch,16);  if (digit == -1) {    throw new DSSException("Illegal hexadecimal character " + ch + " at index "+ index);  }  return digit;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  NamedNodeMap notations;  Node removedNode;  String nullNS=null;  doc=(Document)load("staffNS",true);  docType=doc.getDoctype();  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  try {    removedNode=entities.removeNamedItemNS(nullNS,"ent1");    fail("entity_throw_DOMException");  } catch (  DOMException ex) {switch (ex.code) {case 8:      break;case 7:    break;default :  throw ex;}}try {removedNode=notations.removeNamedItemNS(nullNS,"notation1");fail("notation_throw_DOMException");} catch (DOMException ex) {switch (ex.code) {case 8:break;case 7:break;default :throw ex;}}}  }
class C{  @PUT @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) @Path("/{dashboardId}") @Description("Updates a dashboard having the given ID.") public DashboardDto updateDashboard(@Context HttpServletRequest req,@PathParam("dashboardId") BigInteger dashboardId,DashboardDto dashboardDto){  if (dashboardId == null || dashboardId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Dashboard Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (dashboardDto == null) {    throw new WebApplicationException("Null object cannot be updated.",Status.BAD_REQUEST);  }  PrincipalUser owner=validateAndGetOwner(req,dashboardDto.getOwnerName());  Dashboard oldDashboard=dService.findDashboardByPrimaryKey(dashboardId);  if (oldDashboard == null) {    throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);  }  validateResourceAuthorization(req,oldDashboard.getOwner(),owner);  copyProperties(oldDashboard,dashboardDto);  oldDashboard.setModifiedBy(getRemoteUser(req));  return DashboardDto.transformToDto(dService.updateDashboard(oldDashboard));}  }
class C{  public ImageLoadOption errorImgResId(int errorImgResId){  this.errorImgResId=errorImgResId;  return this;}  }
class C{  public CLContext createContext(Map<ContextProperties,Object> contextProperties,CLDevice... devices){}  }
class C{  public final boolean isInitial(){  return flags[INITIAL_TICKET_FLAG];}  }
class C{  public void testInit_SetsKnownUserLoadGoing(){  mController.init();  mMockUserManager.loadKnownUsers();}  }
class C{  public AbstractPersistentConcurrentOffHeapMap(Factory<? extends Segment<K,V>> segmentFactory,int concurrency){  super(segmentFactory,concurrency);}  }
class C{  public <R>List<R> toList(BiFunction<? super K,? super V,? extends R> function){  return root.toList(function);}  }
class C{  @Override public void addExternalHandler(final java.util.Map<Integer,Object> newHandler,final int type){  decode_pdf.addExternalHandler(newHandler,type);}  }
class C{  public void testMapPutAll(){  if (!isAddRemoveModifiable())   return;  resetEmpty();  Map m2=makeFullMap();  map.putAll(m2);  confirmed.putAll(m2);  verify();  resetEmpty();  m2=new HashMap();  Object[] keys=getSampleKeys();  Object[] values=getSampleValues();  for (int i=0; i < keys.length; i++) {    m2.put(keys[i],values[i]);  }  map.putAll(m2);  confirmed.putAll(m2);  verify();}  }
class C{  public void run(){  for (  VCardVersion version : versions) {    Map<VCardProperty,Integer[]> expectedPropCodes=new HashMap<VCardProperty,Integer[]>(this.expectedPropCodes);    ValidationWarnings warnings=vcard.validate(version);    for (    Map.Entry<VCardProperty,List<Warning>> entry : warnings) {      VCardProperty property=entry.getKey();      List<Warning> actualWarnings=entry.getValue();      Integer[] expectedCodes=expectedPropCodes.remove(property);      if (expectedCodes == null) {        String className=(property == null) ? "vCard" : property.getClass().getSimpleName();        fail("For version " + version + ", "+ className+ " had "+ actualWarnings.size()+ " warnings, but none were expected.  Actual warnings:\n"+ warnings);      }      boolean passed=checkCodes(actualWarnings,expectedCodes);      if (!passed) {        fail("For version " + version + ", expected validation warnings did not match actual warnings.  Actual warnings:\n"+ warnings);      }    }    if (!expectedPropCodes.isEmpty()) {      List<String> lines=new ArrayList<String>();      for (      Map.Entry<VCardProperty,Integer[]> entry : expectedPropCodes.entrySet()) {        VCardProperty property=entry.getKey();        String className=(property == null) ? null : property.getClass().getSimpleName();        Integer[] expectedCodes=entry.getValue();        lines.add(className + ": " + Arrays.toString(expectedCodes));      }      fail("For version " + version + ", the following validation warnings were expected, but NOT thrown:\n"+ lines+ "\nActual warnings:\n"+ warnings);    }  }}  }
class C{  private void sendRequestToServer(HttpURLConnection urlConnection,String xml) throws RequestFailureException {  try {    OutputStream out=new BufferedOutputStream(urlConnection.getOutputStream());    OutputStreamWriter writer=new OutputStreamWriter(out);    writer.write(xml,0,xml.length());    writer.close();    checkServerResponseCode(urlConnection);  } catch (  IOException e) {    throw new RequestFailureException("Failed to write request to server: ",e);  }}  }
class C{  public PassiveEntity(){  setResistance(0);}  }
class C{  public static void main(String[] argv){  int pnumber=-1;  for (int i=0; i < argv.length; i++) {    if (argv[i].equals("-port") && argv.length > i + 1) {      try {        pnumber=Integer.parseInt(argv[i + 1]);        break;      } catch (      NumberFormatException e) {        pnumber=-1;      }    }  }  if (pnumber < 0) {    System.out.println("Need to start the server with a port number.");    System.out.println("Usage: java com.bbn.openmap.layer.link.TestServerStarter -port <port number>");    System.exit(0);  }  System.out.println("TestServerStarter: Starting up on port " + pnumber + ".");  TestServerStarter serverStarter=new TestServerStarter(pnumber);  while (true) {    serverStarter.run();  }}  }
class C{  public Address minus(Offset offset){  return new Address(value.minus(offset.toLong()));}  }
class C{  public AbstractIndexAnalyzerProvider(Index index,Settings indexSettings,String name,Settings settings){  super(index,indexSettings);  this.name=name;  this.version=Analysis.parseAnalysisVersion(indexSettings,settings,logger);}  }
class C{  void updatedTextField(){  if (log.isDebugEnabled()) {    log.debug("updatedTextField");  }  CvValue cv=_cvMap.get(getCvNum());  int oldCv=cv.getValue();  int newVal;  try {    newVal=textToValue(_value.getText());  } catch (  java.lang.NumberFormatException ex) {    newVal=0;  }  int newCv=newValue(oldCv,newVal,getMask());  if (oldCv != newCv) {    cv.setValue(newCv);  }}  }
class C{  @NoInline @Entrypoint @Unpreemptible("Deliver exception possibly from unpreemptible code") public static void athrow(Throwable exceptionObject){  if (traceAthrow) {    VM.sysWriteln("in athrow.");    RVMThread.dumpStack();  }  RVMThread myThread=RVMThread.getCurrentThread();  AbstractRegisters exceptionRegisters=myThread.getExceptionRegisters();  VM.disableGC();  Magic.saveThreadState(exceptionRegisters);  exceptionRegisters.setInUse(true);  deliverException(exceptionObject,exceptionRegisters);}  }
class C{  public void removeAllTrackingIcons(){  if (trackingIcons != null && trackingIcons.size() > 0) {    trackingIcons.clear();    repaint();  }}  }
class C{  public synchronized NativeTcp connectToRemoteAddress(EndPointInfo localOrigin,EndPointInfo remoteTarget) throws IllegalArgumentException, IOException {  if (localOrigin == null || remoteTarget == null) {    throw new IllegalArgumentException("Null input");  }  if (!localOrigin.getType().equals(ConnectionType.TCP) || !remoteTarget.getType().equals(ConnectionType.TCP)) {    throw new IllegalArgumentException("Non-TCP connections");  }  if (!isValidLocalServer(localOrigin)) {    throw new IllegalArgumentException("Invalid local address: " + localOrigin);  }  remoteContactedPorts.add(remoteTarget);  Queue<RemoteTcpServer> queue=remoteCurrentServers.get(remoteTarget);  if (queue == null || queue.isEmpty()) {    throw new IOException("Remote address/port is not opened: " + remoteTarget);  }  RemoteTcpServer server=queue.poll();  NativeTcp connection=server.connect(localOrigin);  return connection;}  }
class C{  public static int sumOfNNumbers1(int n){  int sum=0;  for (int i=1; i <= n; i++) {    for (int j=1; j <= i; j++) {      sum+=1;    }  }  return sum;}  }
class C{  public ArrayList<ChartSet> prepareExitAnimation(ChartView chartView){  mIsExiting=true;  return prepareAnimation(chartView);}  }
class C{  @Override public DriverTask splitVolumeMirror(List<VolumeMirror> list){  return mirrorHelper.splitVolumeMirror(list);}  }
class C{  public boolean isTableLoaded(){  return true;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.ABSTRACT_ANNOTATION_LIST__ANNOTATIONS:    getAnnotations().clear();  getAnnotations().addAll((Collection<? extends Annotation>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new PolishAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  public boolean isDiffVerificationEnabled(){  return enableDiffVerification;}  }
class C{  public synchronized boolean isConsumer(ImageConsumer ic){  return ics.contains(ic);}  }
class C{  private static boolean isTokenChar(char c){  return ((c > 040) && (c < 0177)) && (TSPECIALS.indexOf(c) < 0);}  }
class C{  public byte[] array(){  return bytes.memory.array();}  }
class C{  public void updateFeatures(){  for (int i=0; i < feaGen.features.size(); i++) {    Feature f=(Feature)feaGen.features.get(i);    f.wgt=lambda[f.idx];  }}  }
class C{  public Categories createCategories(){  return mAdapter.create(Categories.class);}  }
class C{  public TestAnnotation(int index,String text){  this.index=index;  this.text=text;}  }
class C{  private void doPettisHansenAlgo2(IR ir){  int numBlocks=0;  TreeSet<Edge> edges=new TreeSet<Edge>();  LinkedHashSet<BasicBlock> chainHeads=new LinkedHashSet<BasicBlock>();  HashMap<BasicBlock,BasicBlock> associatedChain=new HashMap<BasicBlock,BasicBlock>();  BasicBlock entry=ir.cfg.entry();  if (VM.VerifyAssertions)   VM._assert(ir.cfg.entry() == ir.cfg.firstInCodeOrder());  for (BasicBlock bb=entry; bb != null; bb=bb.nextBasicBlockInCodeOrder()) {    numBlocks++;    chainHeads.add(bb);    associatedChain.put(bb,bb);    BasicBlock ft=bb.getFallThroughBlock();    if (ft != null) {      bb.appendInstruction(Goto.create(GOTO,ft.makeJumpTarget()));    }    float bw=bb.getExecutionFrequency();    for (WeightedBranchTargets wbt=new WeightedBranchTargets(bb); wbt.hasMoreElements(); wbt.advance()) {      edges.add(new Edge(bb,wbt.curBlock(),wbt.curWeight() * bw));    }  }  if (DEBUG)   VM.sysWriteln("Edges = " + edges);  ir.cfg.clearCodeOrder();  for (  Edge e : edges) {    if (DEBUG)     VM.sysWriteln("Processing edge " + e);    if (e.target == entry) {      if (DEBUG)       VM.sysWriteln("\tCan't put entry block in interior of chain");      continue;    }    if (e.source.nextBasicBlockInCodeOrder() != null) {      if (DEBUG)       VM.sysWriteln("\tSource is not at end of a chain");      continue;    }    if (e.target.prevBasicBlockInCodeOrder() != null) {      if (DEBUG)       VM.sysWriteln("\tTarget is not at start of a chain");      continue;    }    BasicBlock sourceChain=associatedChain.get(e.source);    BasicBlock targetChain=associatedChain.get(e.target);    if (sourceChain == targetChain) {      if (DEBUG)       VM.sysWriteln("\tSource and target are in same chain");      continue;    }    if (DEBUG)     VM.sysWriteln("\tMerging chains");    chainHeads.remove(e.target);    ir.cfg.linkInCodeOrder(e.source,e.target);    BasicBlock newChain=sourceChain;    for (BasicBlock ptr=e.target; ptr != null; ptr=ptr.nextBasicBlockInCodeOrder()) {      associatedChain.put(ptr,newChain);    }  }  if (DEBUG)   VM.sysWriteln("Chains constructed ");  LinkedHashMap<BasicBlock,ChainInfo> chainInfo=new LinkedHashMap<BasicBlock,ChainInfo>();  for (  BasicBlock head : chainHeads) {    if (DEBUG)     dumpChain(head);    chainInfo.put(head,new ChainInfo(head));  }  for (  Edge e : edges) {    BasicBlock sourceChain=associatedChain.get(e.source);    BasicBlock targetChain=associatedChain.get(e.target);    if (sourceChain != targetChain) {      ChainInfo sourceInfo=chainInfo.get(sourceChain);      ChainInfo targetInfo=chainInfo.get(targetChain);      if (DEBUG)       VM.sysWriteln("Inter-chain edge " + sourceChain + "->"+ targetChain+ " ("+ e.weight+ ")");      Float value=sourceInfo.outWeights.get(targetInfo);      float weight=e.weight;      if (value != null) {        weight+=value;      }      sourceInfo.outWeights.put(targetInfo,weight);      targetInfo.inWeight+=e.weight;      if (DEBUG)       VM.sysWriteln("\t" + targetInfo + ","+ sourceInfo.outWeights.get(targetInfo));    }  }  if (DEBUG)   VM.sysWriteln("Chain Info " + chainInfo);  BasicBlock lastNode=null;  ChainInfo nextChoice=chainInfo.get(entry);  int numPlaced=0;  ir.cfg.setFirstNode(entry);  while (true) {    if (DEBUG)     VM.sysWriteln("Placing chain " + nextChoice);    if (lastNode != null)     ir.cfg.linkInCodeOrder(lastNode,nextChoice.head);    for (BasicBlock ptr=nextChoice.head; ptr != null; ptr=ptr.nextBasicBlockInCodeOrder()) {      numPlaced++;      lastNode=ptr;    }    chainInfo.remove(nextChoice.head);    if (chainInfo.isEmpty())     break;    for (    ChainInfo target : nextChoice.outWeights.keySet()) {      if (DEBUG)       VM.sysWrite("\toutedge " + target);      float weight=nextChoice.outWeights.get(target);      if (DEBUG)       VM.sysWriteln(" = " + weight);      target.placedWeight+=weight;      target.inWeight-=weight;    }    if (DEBUG)     VM.sysWriteln("Chain Info " + chainInfo);    nextChoice=null;    for (    ChainInfo cand : chainInfo.values()) {      if (cand.placedWeight > 0f) {        if (nextChoice == null) {          if (DEBUG)           VM.sysWriteln("First reachable candidate " + cand);          nextChoice=cand;        } else         if (cand.inWeight > nextChoice.inWeight || (cand.inWeight == nextChoice.inWeight && cand.placedWeight > nextChoice.placedWeight)) {          if (DEBUG)           VM.sysWriteln(cand + " is a better choice than " + nextChoice);          nextChoice=cand;        }      }    }    if (nextChoice != null)     continue;    for (    ChainInfo cand : chainInfo.values()) {      if (nextChoice == null) {        if (DEBUG)         VM.sysWriteln("First candidate " + cand);        nextChoice=cand;      } else       if (cand.inWeight < nextChoice.inWeight) {        if (DEBUG)         VM.sysWriteln(cand + " is a better choice than " + nextChoice);        nextChoice=cand;      }    }  }  if (VM.VerifyAssertions)   VM._assert(numPlaced == numBlocks);  ir.cfg.setLastNode(lastNode);}  }
class C{  public void initialize(DevMachine devMachine){  this.devMachine=devMachine;  this.state=STOPPED;  loader.show(LoaderPresenter.Phase.STARTING_WORKSPACE_AGENT);  checkHttpConnection();}  }
class C{  protected void buildShape(BridgeContext ctx,Element e,ShapeNode shapeNode){  try {    SVGOMLineElement le=(SVGOMLineElement)e;    AbstractSVGAnimatedLength _x1=(AbstractSVGAnimatedLength)le.getX1();    float x1=_x1.getCheckedValue();    AbstractSVGAnimatedLength _y1=(AbstractSVGAnimatedLength)le.getY1();    float y1=_y1.getCheckedValue();    AbstractSVGAnimatedLength _x2=(AbstractSVGAnimatedLength)le.getX2();    float x2=_x2.getCheckedValue();    AbstractSVGAnimatedLength _y2=(AbstractSVGAnimatedLength)le.getY2();    float y2=_y2.getCheckedValue();    shapeNode.setShape(new Line2D.Float(x1,y1,x2,y2));  } catch (  LiveAttributeException ex) {    throw new BridgeException(ctx,ex);  }}  }
class C{  private long cancelWaiter(WNode node,WNode group,boolean interrupted){  if (node != null && group != null) {    Thread w;    node.status=CANCELLED;    for (WNode p=group, q; (q=p.cowait) != null; ) {      if (q.status == CANCELLED) {        U.compareAndSwapObject(p,WCOWAIT,q,q.cowait);        p=group;      } else       p=q;    }    if (group == node) {      for (WNode r=group.cowait; r != null; r=r.cowait) {        if ((w=r.thread) != null)         U.unpark(w);      }      for (WNode pred=node.prev; pred != null; ) {        WNode succ, pp;        while ((succ=node.next) == null || succ.status == CANCELLED) {          WNode q=null;          for (WNode t=wtail; t != null && t != node; t=t.prev)           if (t.status != CANCELLED)           q=t;          if (succ == q || U.compareAndSwapObject(node,WNEXT,succ,succ=q)) {            if (succ == null && node == wtail)             U.compareAndSwapObject(this,WTAIL,node,pred);            break;          }        }        if (pred.next == node)         U.compareAndSwapObject(pred,WNEXT,node,succ);        if (succ != null && (w=succ.thread) != null) {          succ.thread=null;          U.unpark(w);        }        if (pred.status != CANCELLED || (pp=pred.prev) == null)         break;        node.prev=pp;        U.compareAndSwapObject(pp,WNEXT,pred,succ);        pred=pp;      }    }  }  WNode h;  while ((h=whead) != null) {    long s;    WNode q;    if ((q=h.next) == null || q.status == CANCELLED) {      for (WNode t=wtail; t != null && t != h; t=t.prev)       if (t.status <= 0)       q=t;    }    if (h == whead) {      if (q != null && h.status == 0 && ((s=state) & ABITS) != WBIT && (s == 0L || q.mode == RMODE))       release(h);      break;    }  }  return (interrupted || Thread.interrupted()) ? INTERRUPTED : 0L;}  }
class C{  private void preprocessData(Map<Integer,Map<Integer,List<Integer>>> knotenVonSpurNachSpurMapping,Map<Integer,Map<Integer,String>> knotenSpurLinkMapping){  preprocessKnotenSpurLinkMapping(knotenSpurLinkMapping);  cleanKnotenVonSpurNachSpurMapping(knotenVonSpurNachSpurMapping,knotenSpurLinkMapping);  mergeLanesOnSameLink(knotenVonSpurNachSpurMapping,knotenSpurLinkMapping);}  }
class C{  public LongAdder(){}  }
class C{  public synchronized boolean compactMoveChunks(int targetFillRate,long moveSize){  checkOpen();  if (lastChunk == null || !reuseSpace) {    return false;  }  int oldRetentionTime=retentionTime;  boolean oldReuse=reuseSpace;  try {    retentionTime=-1;    freeUnusedChunks();    if (fileStore.getFillRate() > targetFillRate) {      return false;    }    long start=fileStore.getFirstFree() / BLOCK_SIZE;    ArrayList<Chunk> move=compactGetMoveBlocks(start,moveSize);    compactMoveChunks(move);    freeUnusedChunks();    storeNow();  }  finally {    reuseSpace=oldReuse;    retentionTime=oldRetentionTime;  }  return true;}  }
class C{  public static void deleteFileOrLog(File file){  if (!file.delete()) {    logger.warn(FAILED_DELETING_FILE + file.getPath());  }}  }
class C{  private Transform matchSQL(Class type) throws Exception {  if (type == Time.class) {    return new DateTransform(type);  }  if (type == java.sql.Date.class) {    return new DateTransform(type);  }  if (type == Timestamp.class) {    return new DateTransform(type);  }  return null;}  }
class C{  public String forceGetValueAsString(){  if (mValue == null) {    return "";  } else   if (mValue instanceof byte[]) {    if (mDataType == TYPE_ASCII) {      return new String((byte[])mValue,US_ASCII);    } else {      return Arrays.toString((byte[])mValue);    }  } else   if (mValue instanceof long[]) {    if (((long[])mValue).length == 1) {      return String.valueOf(((long[])mValue)[0]);    } else {      return Arrays.toString((long[])mValue);    }  } else   if (mValue instanceof Object[]) {    if (((Object[])mValue).length == 1) {      Object val=((Object[])mValue)[0];      if (val == null) {        return "";      } else {        return val.toString();      }    } else {      return Arrays.toString((Object[])mValue);    }  } else {    return mValue.toString();  }}  }
class C{  public void initializeDefinition(String tableName,String columnName,String fTableName,String fColumnName){  m_table=tableName;  m_column=columnName;  m_fTable=fTableName;  m_fColumn=fColumnName;  s_logger.log(Level.FINEST,toString());}  }
class C{  public TStructMember basicGetDefinedMember(){  return definedMember;}  }
class C{  public synchronized CommChannelFactory createCommChannelFactory(String name,CommCore commCore) throws IOException {  CommChannelFactory factory=null;  String className=channelExtensionClassNames.get(name);  if (className != null) {    try {      Class<?> c=loadExtensionClass(className);      if (CommChannelFactory.class.isAssignableFrom(c)) {        Class<? extends CommChannelFactory> fClass=(Class<? extends CommChannelFactory>)c;        factory=fClass.getConstructor(CommCore.class).newInstance(commCore);      }    } catch (    ClassNotFoundException|InstantiationException|IllegalAccessException|NoSuchMethodException|InvocationTargetException e) {      throw new IOException(e);    }  }  return factory;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SASSIGNMENT;}  }
class C{  @Override public String toString(){  String out="";  for (  Channel tvChannel : channels) {    out+=tvChannel.toString() + "\n";  }  return out;}  }
class C{  public void copyAndAddExtension(DERObjectIdentifier oid,boolean critical,X509Certificate cert) throws CertificateParsingException {  this.copyAndAddExtension(oid.getId(),critical,cert);}  }
class C{  @Deprecated public static void copy(Instance source,Instance dest){  AppBeans.get(MetadataTools.NAME,MetadataTools.class).copy(source,dest);}  }
class C{  public void write(char c[],int off,int len){  if (off < 0 || off > c.length || len < 0 || off + len > c.length || off + len < 0) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  int newcount=count + len;  if (newcount > buf.length) {    if (writer == null) {      expandCapacity(newcount);    } else {      do {        int rest=buf.length - count;        System.arraycopy(c,off,buf,count,rest);        count=buf.length;        flush();        len-=rest;        off+=rest;      } while (len > buf.length);      newcount=len;    }  }  System.arraycopy(c,off,buf,count,len);  count=newcount;}  }
class C{  protected void processConnectedFragment(String tenantId,Trace fragment){  List<Producer> producers=NodeUtil.findNodes(fragment.getNodes(),Producer.class);  for (  Producer producer : producers) {    if (!producer.getCorrelationIds().isEmpty()) {      List<Trace> fragments=getTraceFragments(tenantId,producer.getCorrelationIds().stream().map(null).collect(Collectors.toList()));      for (      Trace descendant : fragments) {        producer.getNodes().addAll(descendant.getNodes());        processConnectedFragment(tenantId,descendant);      }    }  }}  }
class C{  public void testUnsupportedCallbackException03(){  UnsupportedCallbackException ucE=new UnsupportedCallbackException(null,null);  assertNull("getMessage() must return null.",ucE.getMessage());  assertNull("getCallback() must return null.",ucE.getCallback());}  }
class C{  @Override public void switchReadOnlyConnection(Boolean mustBeReadOnly) throws QueryException {  checkWaitingConnection();  if (currentReadOnlyAsked != mustBeReadOnly) {    proxy.lock.lock();    try {      if (currentReadOnlyAsked == mustBeReadOnly) {        return;      } else {        currentReadOnlyAsked=mustBeReadOnly;      }      if (currentReadOnlyAsked) {        if (currentProtocol.isMasterConnection()) {          if (!isSecondaryHostFail()) {            proxy.lock.lock();            try {              syncConnection(this.masterProtocol,this.secondaryProtocol);              currentProtocol=this.secondaryProtocol;              return;            } catch (            QueryException e) {              if (setSecondaryHostFail()) {                addToBlacklist(secondaryProtocol.getHostAddress());              }            } finally {              proxy.lock.unlock();            }          }          FailoverLoop.addListener(this);        }      } else {        if (!currentProtocol.isMasterConnection()) {          if (!isMasterHostFail()) {            try {              syncConnection(this.secondaryProtocol,this.masterProtocol);              currentProtocol=this.masterProtocol;              return;            } catch (            QueryException e) {              if (setMasterHostFail()) {                addToBlacklist(masterProtocol.getHostAddress());              }            }          }          try {            reconnectFailedConnection(new SearchFilter(true,false));            handleFailLoop();            try {              syncConnection(this.secondaryProtocol,this.masterProtocol);              currentProtocol=this.masterProtocol;            } catch (            QueryException e) {              if (setMasterHostFail()) {                addToBlacklist(masterProtocol.getHostAddress());              }            }          } catch (          QueryException e) {            FailoverLoop.removeListener(this);            HostAddress failHost=(this.masterProtocol != null) ? this.masterProtocol.getHostAddress() : null;            throwFailoverMessage(failHost,true,new QueryException("master " + masterProtocol.getHostAddress() + " connection failed"),false);          }        }      }    }  finally {      proxy.lock.unlock();    }  }}  }
class C{  public static long parse(String[] options,String option,long defValue) throws Exception {  String value=Utils.getOption(option,options);  if (value.isEmpty())   return defValue; else   return Long.parseLong(value);}  }
class C{  public ThumbnailStreamRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  private void showCard(View view){  mSoundPool.play(mSoundDoorOpen,1,1,0,0,1.0f);  view.findViewById(R.id.card_pane_right).startAnimation(mAnimationRightPaneSlideOut);  view.findViewById(R.id.card_pane_left).startAnimation(mAnimationLeftPaneSlideOut);}  }
class C{  public CharBuffer(){  this(32);}  }
class C{  @Override public void onError(Throwable e){  log.error("Exception occured in callbacks in the Container Manager : {}",e);  exceptionOccurred=e;}  }
class C{  public void changeConnectionStatus(ConnectionStatus connectionStatus){  status=connectionStatus;  notifyListeners((new PropertyChangeEvent(this,ActivityConstants.ConnectionStatusProperty,null,null)));}  }
class C{  public static void assertValue(){  try {    Region r1=cache.getRegion(Region.SEPARATOR + REGION_NAME1);    Region r2=cache.getRegion(Region.SEPARATOR + REGION_NAME2);    assertTrue(r1.containsKey("key-1"));    assertTrue(r1.get("key-1").equals("33"));    assertTrue(r2.containsKey("key-1"));    assertTrue(r2.get("key-1").equals("33"));  } catch (  Exception e) {    fail("Exception in trying to get due to " + e);  }}  }
class C{  public static Typeface caviarDreamsBold(Context context){  return FontSourceProcessor.process(R.raw.caviar_dreams_bold,context);}  }
class C{  private static List<String[]> readSentence(BufferedReader aReader) throws IOException {  List<String[]> words=new ArrayList<String[]>();  String line;  while ((line=aReader.readLine()) != null) {    if (StringUtils.isBlank(line)) {      break;    }    if (line.startsWith("<")) {      break;    }    String[] fields=line.split("\t");    if (fields.length != 10) {      throw new IOException("Invalid file format. Line needs to have 10 tab-separated fields, but it has " + fields.length + ": ["+ line+ "]");    }    words.add(fields);  }  if (line == null && words.isEmpty()) {    return null;  } else {    return words;  }}  }
class C{  public static Builder builder(AppendRequest request){  return new Builder(request);}  }
class C{  public void loadLookup(){  if (!isLookup())   return;  log.config("(" + m_vo.ColumnName + ")");  if (DisplayType.isLookup(m_vo.displayType) && m_vo.IsDisplayed) {    if (m_vo.lookupInfo == null) {      log.log(Level.SEVERE,"(" + m_vo.ColumnName + ") - No LookupInfo");      return;    }    if (m_vo.displayType == DisplayType.Table && (m_vo.ColumnName.equals("CreatedBy") || m_vo.ColumnName.equals("UpdatedBy"))) {      m_vo.lookupInfo.IsCreadedUpdatedBy=true;      m_vo.lookupInfo.DisplayType=DisplayType.Search;    }    m_vo.lookupInfo.IsKey=isKey();    MLookup ml=new MLookup(m_vo.lookupInfo,m_vo.TabNo);    m_lookup=ml;  } else   if (m_vo.displayType == DisplayType.Location) {    MLocationLookup ml=new MLocationLookup(m_vo.ctx,m_vo.WindowNo);    m_lookup=ml;  } else   if (m_vo.displayType == DisplayType.Locator) {    MLocatorLookup ml=new MLocatorLookup(m_vo.ctx,m_vo.WindowNo);    m_lookup=ml;  } else   if (m_vo.displayType == DisplayType.Account) {    MAccountLookup ma=new MAccountLookup(m_vo.ctx,m_vo.WindowNo);    m_lookup=ma;  } else   if (m_vo.displayType == DisplayType.PAttribute) {    MPAttributeLookup pa=new MPAttributeLookup(m_vo.ctx,m_vo.WindowNo);    m_lookup=pa;  }}  }
class C{  public String sqlMetadata_foreignKeyColumns(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_foreignKeyColumns(catalogName,schemaName);}  }
class C{  private boolean focusOnEmpty(){  boolean found=false;  View sv=getView();  LinearLayout ll=(LinearLayout)sv.findViewById(R.id.form_container_layout);  if (ll != null) {    int pos=0;    while (ll.getChildAt(pos) instanceof EditableLayout && pos < ll.getChildCount() && !found) {      EditableLayout ll2=(EditableLayout)ll.getChildAt(pos);      for (int i=0; i < ll2.getChildCount(); i++) {        View v=ll2.getChildAt(i);        if (v instanceof TagTextRow && "".equals(((TagTextRow)v).getValue())) {          ((TagTextRow)v).getValueView().requestFocus();          found=true;          break;        }      }      pos++;    }  } else {    Log.d(DEBUG_TAG,"update container layout null");    return false;  }  return found;}  }
class C{  public void applyBodyForce(Vec2 force,Vec2 point){  getBody().applyForce(force,point);}  }
class C{  public AttributeStore(Map<String,Object> values){  setAttributes(values);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element elementNode;  String elementName;  doc=(Document)load("staff",false);  elementNode=doc.getDocumentElement();  elementName=elementNode.getNodeName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgNodeName","svg",elementName);  } else {    assertEquals("nodeElementNodeNameAssert1","staff",elementName);  }}  }
class C{  protected RenameMethodProcessor(IMethod method){  this(method,new TextChangeManager(true),null);  fIsComposite=false;}  }
class C{  protected void endVisitNode(ASTNode node){}  }
class C{  public ByteVector putUTF8(final String s){  int charLength=s.length();  if (charLength > 65535) {    throw new IllegalArgumentException();  }  int len=length;  if (len + 2 + charLength > data.length) {    enlarge(2 + charLength);  }  byte[] data=this.data;  data[len++]=(byte)(charLength >>> 8);  data[len++]=(byte)charLength;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else {      length=len;      return encodeUTF8(s,i,65535);    }  }  length=len;  return this;}  }
class C{  public PackagingUnit(LoadUnit lu,UnitType qty,Product product){  Assert.notNull(lu);  Assert.notNull(qty);  Assert.notNull(product);  assignInitialValues(lu);  this.quantity=qty;  if (lu.getProduct() == null) {    this.product=product;    this.loadUnit.setProduct(product);  } else {    this.product=lu.getProduct();  }}  }
class C{  public ImageSaver(){  useDefaultVisual();  setLayout(new BorderLayout());  add(m_visual,BorderLayout.CENTER);  m_env=Environment.getSystemWide();}  }
class C{  public ImportException(String message,ImportExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.MARKER__KEY:    return KEY_EDEFAULT == null ? key != null : !KEY_EDEFAULT.equals(key);case DomPackage.MARKER__VALUE:  return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);}return super.eIsSet(featureID);}  }
class C{  public void cfgComputeDigest(ConfigurationValue cv,boolean b){  computeDigest=b;}  }
class C{  public PiNodes(boolean insert){  this.insertion=insert;  this.typeChecks=false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr streetAttr;  Attr replacedAttr;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(2);  streetAttr=testEmployee.getAttributeNode("street");  replacedAttr=testEmployee.setAttributeNode(streetAttr);  assertSame("replacedAttr",streetAttr,replacedAttr);}  }
class C{  public Body(){  vel=new MathVector();  acc=new MathVector();  newAcc=new MathVector();  phi=0.0;  next=null;  procNext=null;}  }
class C{  private void $$$setupUI$$$(){  panel=new JPanel();  panel.setLayout(new GridLayoutManager(2,1,new Insets(0,0,0,0),-1,-1));  titleLabel=new JLabel();  titleLabel.setText("Label");  panel.add(titleLabel,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  summaryLabel=new JLabel();  summaryLabel.setText("Label");  panel.add(summaryLabel,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setRetainInstance(true);  scaleDetector=new ScaleGestureDetector(getActivity().getApplicationContext(),scaleListener);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  LocalSocket(LocalSocketImpl impl){  this.impl=impl;  this.isConnected=false;  this.isBound=false;}  }
class C{  public static String tranDate2TimeLabel(Date date){  try {    SimpleDateFormat formatter2=new SimpleDateFormat("HH:mm",Locale.getDefault());    formatter2.setTimeZone(timeZone);    return formatter2.format(date);  } catch (  Throwable e) {    Log.e(TAG,e.toString());    return "2014-01-01";  }}  }
class C{  public final int readUnsignedShort() throws java.io.IOException {  return 0;}  }
class C{  public void alter(Instance instance,int x,int y){  alter(instance,new Transform(x,y),null,-1);}  }
class C{  private SpaceScope isSelected(Space space){  if (space.getParent() == null) {    Object rel=this.select.getScope().get(space.getDomain());    if (rel != null && rel instanceof IFromPiece) {      IFromPiece from=(IFromPiece)rel;      return new SpaceScope(space,from.getScope());    } else {      return null;    }  } else {    SpaceScope check=isSelected(space.getParent());    if (check == null) {      return null;    } else     if (check.space.equals(space)) {      return check;    } else {      Object rel=check.scope.get(space.getRelation());      if (rel != null && rel instanceof IFromPiece) {        IFromPiece from=(IFromPiece)rel;        return new SpaceScope(space,from.getScope());      } else {        return check;      }    }  }}  }
class C{  private void sweep(){  for (Node p=head, s, n; p != null && (s=p.next) != null; ) {    if (!s.isMatched())     p=s; else     if ((n=s.next) == null)     break; else     if (s == n)     p=head; else     p.casNext(s,n);  }}  }
class C{  @Override protected void handleSuccess(final AttachReply reply){  getDebugger().getProcessManager().setAttached(true);}  }
class C{  public boolean dialogFinished(){  return !this.dialog.cancelled();}  }
class C{  private void appendTypeParametersLabels(ITypeParameter[] typeParameters,long flags,StringBuilder builder) throws JavaModelException {  if (typeParameters.length > 0) {    builder.append(getLT());    for (int i=0; i < typeParameters.length; i++) {      if (i > 0) {        builder.append(JavaElementLabels.COMMA_STRING);      }      appendTypeParameterWithBounds(typeParameters[i],flags,builder);    }    builder.append(getGT());  }}  }
class C{  public static void removeBlockVolumeTag(ViPRCoreClient client,URI volumeId,String tagName){  Set<String> currentTags=getBlockResourceTags(client,volumeId);  Map<String,String> currentMachineTags=parseMachineTags(currentTags);  if (currentMachineTags.containsKey(tagName)) {    String currentTagValue=currentMachineTags.get(tagName);    getClientResource(client,volumeId).removeTags(volumeId,Sets.newHashSet(machineTag(tagName,currentTagValue)));  }}  }
class C{  public CacheObject load(Object key,int x,int y,int zoomLevel,Projection proj){  if (key instanceof String) {    if (verbose) {      logger.fine("fetching file for cache: " + key);    }    byte[] imageBytes=null;    CacheObject localVersion=super.load(key,x,y,zoomLevel,proj);    if (localVersion != null) {      logger.fine("found version of tile in local cache: " + key);      return localVersion;    }    String imagePath=buildFilePath(x,y,zoomLevel,fileExt);    imageBytes=getImageBytes(imagePath,(String)key);    if (imageBytes != null && imageBytes.length > 0) {      ImageIcon ii=new ImageIcon(imageBytes);      try {        BufferedImage rasterImage=preprocessImage(ii.getImage(),ii.getIconWidth(),ii.getIconHeight());        OMGraphic raster=createOMGraphicFromBufferedImage(rasterImage,x,y,zoomLevel,proj);        if (raster != null) {          return new CacheObject(key,raster);        }      } catch (      InterruptedException ie) {        if (logger.isLoggable(Level.FINE)) {          logger.fine("factory interrupted fetching " + imagePath);        }      }    }    return getEmptyTile(key,x,y,zoomLevel,proj);  }  return null;}  }
class C{  public void drawAnnotations(Graphics2D g2,Rectangle2D dataArea,PlotRenderingInfo info){  Iterator iterator=this.annotations.iterator();  while (iterator.hasNext()) {    XYAnnotation annotation=(XYAnnotation)iterator.next();    ValueAxis xAxis=getDomainAxis();    ValueAxis yAxis=getRangeAxis();    annotation.draw(g2,this,dataArea,xAxis,yAxis,0,info);  }}  }
class C{  public void parse(String line,Server server,Conversation conversation,IRCService service){  line=line.trim().substring(1);  String[] params=line.split(" ");  String type=params[0];  if (isClientCommand(type)) {    handleClientCommand(type,params,server,conversation,service);  } else {    handleServerCommand(type,params,server,conversation,service);  }}  }
class C{  public void updateIndex(final int index){  int newTypeRef=0x42000000 | (index << 8);  if (visibleTypeAnnotations != null) {    for (    TypeAnnotationNode tan : visibleTypeAnnotations) {      tan.typeRef=newTypeRef;    }  }  if (invisibleTypeAnnotations != null) {    for (    TypeAnnotationNode tan : invisibleTypeAnnotations) {      tan.typeRef=newTypeRef;    }  }}  }
class C{  public static BufferedWriter newWriter(Path self,String charset,boolean append) throws IOException {  return newWriter(self,charset,append,false);}  }
class C{  FieldAnalysisRequest resolveAnalysisRequest(SolrQueryRequest req){  SolrParams solrParams=req.getParams();  FieldAnalysisRequest analysisRequest=new FieldAnalysisRequest();  boolean useDefaultSearchField=true;  if (solrParams.get(AnalysisParams.FIELD_TYPE) != null) {    analysisRequest.setFieldTypes(Arrays.asList(solrParams.get(AnalysisParams.FIELD_TYPE).split(",")));    useDefaultSearchField=false;  }  if (solrParams.get(AnalysisParams.FIELD_NAME) != null) {    analysisRequest.setFieldNames(Arrays.asList(solrParams.get(AnalysisParams.FIELD_NAME).split(",")));    useDefaultSearchField=false;  }  if (useDefaultSearchField) {    analysisRequest.addFieldName(req.getSchema().getDefaultSearchFieldName());  }  analysisRequest.setQuery(solrParams.get(AnalysisParams.QUERY,solrParams.get(CommonParams.Q)));  String value=solrParams.get(AnalysisParams.FIELD_VALUE);  if (analysisRequest.getQuery() == null && value == null) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"One of analysis.value or q or analysis.query parameters must be specified");  }  Iterable<ContentStream> streams=req.getContentStreams();  if (streams != null) {    for (    ContentStream stream : streams) {      Reader reader=null;      try {        reader=stream.getReader();        value=IOUtils.toString(reader);      } catch (      IOException e) {      } finally {        IOUtils.closeQuietly(reader);      }      break;    }  }  analysisRequest.setFieldValue(value);  analysisRequest.setShowMatch(solrParams.getBool(AnalysisParams.SHOW_MATCH,false));  return analysisRequest;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:39.860 -0500",hash_original_method="EA9B69B04B091CE31C2FA335B78FBE5D",hash_generated_method="7FE30655C7379EA539EA4C6666F2EE29") public void addGesture(String entryName,Gesture gesture){  if (entryName == null || entryName.length() == 0) {    return;  }  ArrayList<Gesture> gestures=mNamedGestures.get(entryName);  if (gestures == null) {    gestures=new ArrayList<Gesture>();    mNamedGestures.put(entryName,gestures);  }  gestures.add(gesture);  mClassifier.addInstance(Instance.createInstance(mSequenceType,mOrientationStyle,gesture,entryName));  mChanged=true;}  }
class C{  WaitForExitService(ServerBase server,SystemManager systemManager){  _server=server;  _resinSystem=systemManager;}  }
class C{  public FieldArray(){  this(10);}  }
class C{  public void mutateConjugate(){  this.imag=-imag;}  }
class C{  public AccountHeaderBuilder withProfileImagesVisible(boolean profileImagesVisible){  this.mProfileImagesVisible=profileImagesVisible;  return this;}  }
class C{  static public void warning(String str){  warning(false,str);}  }
class C{  public DisqueConnectionImpl(RedisChannelWriter<K,V> writer,RedisCodec<K,V> codec,long timeout,TimeUnit unit){  super(writer,timeout,unit);  this.codec=codec;}  }
class C{  public void enterToDetails(View view){  startActivity(new Intent(this,GroupSimpleDetailActivity.class));}  }
class C{  private boolean genClassObj(XMLStreamReader xmlReader,List<SimpleClass> classes){  final String fullClsName=xmlReader.getAttributeValue(null,"type").trim();  if (fullClsName.isEmpty() || !fullClsName.contains(".")) {    return false;  } else {    SimpleClass cls=mViewModelMap.get(fullClsName);    if (cls == null) {      cls=new SimpleClass(fullClsName);      mViewModelMap.put(fullClsName,cls);    }    cls.clsVarName=xmlReader.getAttributeValue(null,"name").trim();    if (!classes.contains(cls)) {      classes.add(cls);    }    return true;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.171 -0500",hash_original_method="8400B64AA446E0EFD1887423DF561D32",hash_generated_method="7048CD8EA0479E36CDE1D456E0B31B7C") public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    removeAt(i);  }}  }
class C{  public void notifyVerticalEdgeReached(int startY,int finalY,int overY){  mScrollerY.notifyEdgeReached(startY,finalY,overY);}  }
class C{  public CharArrayReader(char buf[]){  this.buf=buf;  this.pos=0;  this.count=buf.length;}  }
class C{  protected Reader openExternalEntity(IXMLReader xmlReader,String publicID,String systemID) throws XMLParseException {  String parentSystemID=xmlReader.getSystemID();  try {    return xmlReader.openStream(publicID,systemID);  } catch (  Exception e) {    throw new XMLParseException(parentSystemID,xmlReader.getLineNr(),"Could not open external entity " + "at system ID: " + systemID);  }}  }
class C{  @Override public boolean isReachable(ObjectReference object){  if (GCTrace.finalDead)   return false; else   if (object.isNull())   return false; else {    Space space=Space.getSpaceForObject(object);    return space.isReachable(object);  }}  }
class C{  public void loadString(String source) throws ParserConfigurationException, SAXException, IOException {  DocumentBuilder builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();  document=builder.parse(new InputSource(new StringReader(source)));}  }
class C{  public static int ENODEV(){  return Errno.ENODEV.intValue();}  }
class C{  private static void verifyDevice(IDevice d,MacAddress mac,VlanVid vlan,IPv4Address ipv4,IPv6Address ipv6,DatapathId swId,OFPort port){  assertNotNull(d);  if (!mac.equals(MacAddress.NONE)) {    assertEquals(mac,d.getMACAddress());  }  if (vlan != null) {    assertArrayEquals(new VlanVid[]{vlan},d.getVlanId());  }  if (!ipv4.equals(IPv4Address.NONE)) {    assertArrayEquals(new IPv4Address[]{ipv4},d.getIPv4Addresses());  }  if (!ipv6.equals(IPv6Address.NONE)) {    assertArrayEquals(new IPv6Address[]{ipv6},d.getIPv6Addresses());  }  if (!swId.equals(DatapathId.NONE) && !port.equals(OFPort.ZERO)) {    SwitchPort expectedAp=new SwitchPort(swId,port);    assertArrayEquals(new SwitchPort[]{expectedAp},d.getAttachmentPoints());  }}  }
class C{  public TranslucentPopup(){}  }
class C{  private String encode(String s){  try {    return URLEncoder.encode(s,"UTF-8");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("UTF-8 is not supported by the JVM",e);  }}  }
class C{  protected void propertyChange(PropertyChangeEvent evt){  super.propertyChange(evt);  String name=evt.getPropertyName();  if ("editorKit".equals(name)) {    ActionMap map=SwingUtilities.getUIActionMap(getComponent());    if (map != null) {      Object oldValue=evt.getOldValue();      if (oldValue instanceof EditorKit) {        Action[] actions=((EditorKit)oldValue).getActions();        if (actions != null) {          removeActions(map,actions);        }      }      Object newValue=evt.getNewValue();      if (newValue instanceof EditorKit) {        Action[] actions=((EditorKit)newValue).getActions();        if (actions != null) {          addActions(map,actions);        }      }    }    updateFocusTraversalKeys();  } else   if ("editable".equals(name)) {    updateFocusTraversalKeys();  } else   if ("foreground".equals(name) || "font".equals(name) || "document".equals(name)|| JEditorPane.W3C_LENGTH_UNITS.equals(name)|| JEditorPane.HONOR_DISPLAY_PROPERTIES.equals(name)) {    JComponent c=getComponent();    updateDisplayProperties(c.getFont(),c.getForeground());    if (JEditorPane.W3C_LENGTH_UNITS.equals(name) || JEditorPane.HONOR_DISPLAY_PROPERTIES.equals(name)) {      modelChanged();    }    if ("foreground".equals(name)) {      Object honorDisplayPropertiesObject=c.getClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES);      boolean honorDisplayProperties=false;      if (honorDisplayPropertiesObject instanceof Boolean) {        honorDisplayProperties=((Boolean)honorDisplayPropertiesObject).booleanValue();      }      if (honorDisplayProperties) {        modelChanged();      }    }  }}  }
class C{  public static String random(final int count){  return random(count,false,false);}  }
class C{  public static boolean usingPlastic3DLnf(){  return usingLnf(Plastic3DLookAndFeel.class);}  }
class C{  @SuppressWarnings("unchecked") @Override protected void processClass(Class clazz){  if (DataObject.class.isAssignableFrom(clazz)) {    if (!isDualDbSvcMode()) {      addToTypeMap(clazz,_cfMap);    } else     if (KeyspaceUtil.isLocal(clazz)) {      addToTypeMap(clazz,_cfMap);    } else     if (KeyspaceUtil.isGlobal(clazz)) {      addToTypeMap(clazz,_geocfMap);    } else {      addToTypeMap(clazz,_geocfMap);      addToTypeMap(clazz,_cfMap);    }  } else   if (TimeSeries.class.isAssignableFrom(clazz)) {    TimeSeriesType tsType=TypeMap.getTimeSeriesType(clazz);    ColumnFamily cf=tsType.getCf();    _cfMap.put(cf.getName(),cf);    if (tsType.getCompactOptimized() && _dbCommonInfo != null && Boolean.TRUE.toString().equalsIgnoreCase(_dbCommonInfo.getProperty(DbClientImpl.DB_STAT_OPTIMIZE_DISK_SPACE,"false"))) {      int min_ttl=Integer.parseInt(_dbCommonInfo.getProperty(DbClientImpl.DB_LOG_MINIMAL_TTL,"604800"));      if (min_ttl < tsType.getTtl()) {        _log.info("Setting TTL for the CF {} equal to {}",cf.getName(),min_ttl);        tsType.setTtl(min_ttl);      }    }  } else   if (SchemaRecord.class.isAssignableFrom(clazz)) {    SchemaRecordType srType=TypeMap.getSchemaRecordType();    ColumnFamily cf=srType.getCf();    _cfMap.put(cf.getName(),cf);  } else   if (GlobalLock.class.isAssignableFrom(clazz)) {    GlobalLockType glType=TypeMap.getGlobalLockType();    ColumnFamily cf=glType.getCf();    _geocfMap.put(cf.getName(),cf);  } else {    throw new IllegalStateException("Failed to process Class " + clazz.getName());  }}  }
class C{  static void warn(String s,Throwable t){  System.out.println("Warning: " + s);  if (t != null) {    t.printStackTrace();  }}  }
class C{  public JdpPacketReader(byte[] packet) throws JdpException {  ByteArrayInputStream bais=new ByteArrayInputStream(packet);  pkt=new DataInputStream(bais);  try {    int magic=pkt.readInt();    JdpGenericPacket.checkMagic(magic);  } catch (  IOException e) {    throw new JdpException("Invalid JDP packet received, bad magic");  }  try {    short version=pkt.readShort();    JdpGenericPacket.checkVersion(version);  } catch (  IOException e) {    throw new JdpException("Invalid JDP packet received, bad protocol version");  }}  }
class C{  protected synchronized Object peekAtInfo(IJavaElement element){  HashMap tempCache=(HashMap)this.temporaryCache.get();  if (tempCache != null) {    Object result=tempCache.get(element);    if (result != null) {      return result;    }  }  return this.cache.peekAtInfo(element);}  }
class C{  public QueryStringQueryBuilder tieBreaker(float tieBreaker){  this.tieBreaker=tieBreaker;  return this;}  }
class C{  public RolesAddNewEntry(java.awt.Frame parent,Boolean modal){  super(parent,modal);  initComponents();}  }
class C{  public static void shuffle(Object[] a){  int N=a.length;  for (int i=0; i < N; i++) {    int r=i + uniform(N - i);    Object temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  @SuppressWarnings("deprecation") @SuppressLint("NewApi") public static boolean checkForText(Context ctx){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {    if (clipboard == null) {      clipboard=(ClipboardManager)ctx.getSystemService(Context.CLIPBOARD_SERVICE);    }    return clipboard.hasPrimaryClip();  } else {    if (oldClipboard == null) {      oldClipboard=(android.text.ClipboardManager)ctx.getSystemService(Context.CLIPBOARD_SERVICE);    }    return oldClipboard.hasText();  }}  }
class C{  public static boolean isXML11InternalEntityContent(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_CONTENT_INTERNAL) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  private void handleCallToHelloWorldProxy(final HttpServerRequest httpRequest){  helloWorldServiceInterface.hello(httpRequest.getParam("msg"),null);}  }
class C{  public boolean isLongPressDragEnabled(){  return mTouchHelperCallback.isLongPressDragEnabled();}  }
class C{  public static void generate(ClientCache cache,PrintWriter pw,boolean useSchema,String version){  (new CacheXmlGenerator(cache,useSchema,version,true)).generate(pw);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.731 -0400",hash_original_method="C99FBA65B0D308569620507D6E099042",hash_generated_method="5CE80A6225762CA51E516040755CB8E9") @Override public void flush() throws IOException {  out.flush();}  }
class C{  public static String generateResetKey(){  return RandomStringUtils.randomNumeric(DEF_COUNT);}  }
class C{  public void removeProgressListener(ProgressListener list){  progressSupport.remove(list);}  }
class C{  private void cmd_selection(Object source){  for (int i=0; i < m_selectionList.size(); i++) {    if (source == m_selectionList.get(i)) {      boolean selected=isSelectionSelected(source);      VNumber qty=(VNumber)m_qtyList.get(i);      qty.setReadWrite(selected);      return;    }  }  log.log(Level.SEVERE,"not found - " + source);}  }
class C{  private Type(final int sort){  this.sort=sort;  this.len=1;}  }
class C{  public void addProperty(GridQueryProperty prop,boolean failOnDuplicate) throws IgniteCheckedException {  String name=prop.name();  if (props.put(name,prop) != null && failOnDuplicate)   throw new IgniteCheckedException("Property with name '" + name + "' already exists.");  fields.put(name,prop.type());}  }
class C{  @Override public boolean attackEntityFrom(DamageSource source,float amount){  if (this.isEntityInvulnerable(source)) {    return false;  } else {    this.setBeenAttacked();    this.health=(int)(this.health - amount);    if (this.health <= 0) {      this.setDead();    }    return false;  }}  }
class C{  private static int _getStackOffset(StackTraceElement[] trace){  for (int i=MIN_STACK_OFFSET; i < trace.length; i++) {    StackTraceElement e=trace[i];    String name=e.getClassName();    if (!name.equals(LogUtils.class.getName())) {      return --i;    }  }  return -1;}  }
class C{  public OKA2(){  super(3,2);}  }
class C{  public JBBPOut Utf8(final String str) throws IOException {  assertNotEnded();  assertStringNotNull(str);  if (this.processCommands) {    this.outStream.write(str.getBytes("UTF-8"));  }  return this;}  }
class C{  public static final Parameter base(){  return new Parameter(P_GP);}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public void testUrlValid(){  setParameterToInitMockMethod("http://myurl.com",TestSolution.PASSED);  SeoRule01071 test=new SeoRule01071();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  public void writeMessageSetExtension(final int fieldNumber,final MessageLite value) throws IOException {  writeTag(WireFormat.MESSAGE_SET_ITEM,WireFormat.WIRETYPE_START_GROUP);  writeUInt32(WireFormat.MESSAGE_SET_TYPE_ID,fieldNumber);  writeMessage(WireFormat.MESSAGE_SET_MESSAGE,value);  writeTag(WireFormat.MESSAGE_SET_ITEM,WireFormat.WIRETYPE_END_GROUP);}  }
class C{  public static void randomShuffle(ArrayModifiableDBIDs ids,Random random){  randomShuffle(ids,random,ids.size());}  }
class C{  public static Pair<ParserRuleContext,Integer> earliestAncestorWithChildStartingAtCharPos(ParserRuleContext node,Token t,int charpos){  ParserRuleContext p=node;  while (p != null) {    for (int i=0; i < p.getChildCount(); i++) {      ParseTree child=p.getChild(i);      Token start;      if (child instanceof ParserRuleContext) {        start=((ParserRuleContext)child).getStart();      } else {        start=((TerminalNode)child).getSymbol();      }      if (start.getTokenIndex() < t.getTokenIndex() && start.getCharPositionInLine() == charpos) {        return new Pair<>(p,i);      }    }    p=p.getParent();  }  return null;}  }
class C{  boolean matchesOverlap(PfamHmmer3RawMatch one,PfamHmmer3RawMatch two){  return !((one.getLocationStart() > two.getLocationEnd()) || (two.getLocationStart() > one.getLocationEnd()));}  }
class C{  @Override public void generate(XmlWriter w,ExtensionProfile extProfile) throws IOException {  generateStartElement(w,Namespaces.W3C_GEO_NAMESPACE,NAME,null,null);  generateExtensions(w,extProfile);  w.endElement(Namespaces.W3C_GEO_NAMESPACE,NAME);}  }
class C{  public void finish() throws Exception {}  }
class C{  @Override public int compareTo(EigenPair o){  if (this.eigenvalue < o.eigenvalue) {    return -1;  }  if (this.eigenvalue > o.eigenvalue) {    return +1;  }  return 0;}  }
class C{  public boolean updateMessage(String message,double trust,boolean enforceLimit){  SQLiteDatabase db=getWritableDatabase();  if (db != null && message != null) {    if (enforceLimit) {      trust=streamlineTrust(trust);    } else {      checkTrust(trust);    }    db.execSQL("UPDATE " + TABLE + " SET "+ COL_TRUST+ "="+ trust+ " WHERE "+ COL_MESSAGE+ "='"+ Utils.makeTextSafeForSQL(message)+ "';");    log.debug("Message trust changed in the store.");    return true;  }  log.debug("Message was not edited, either message or database is null. [" + message + "]");  return false;}  }
class C{  protected int effectiveBandSize(final int dim1,final int dim2){  if (bandSize == Double.POSITIVE_INFINITY) {    return (dim1 > dim2) ? dim1 : dim2;  }  if (bandSize >= 1.) {    return (int)bandSize;  }  return (int)Math.ceil((dim1 >= dim2 ? dim1 : dim2) * bandSize);}  }
class C{  protected Rectangle2D intersects(Rectangle2D rectangle){  if (rectangle == null)   return null;  for (  Rectangle2D rect : this.rectList) {    if (rectangle.intersects(rect))     return rect;  }  return null;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public int write(String str) throws IOException {  int n=0;  int nll=newline.length();  int sl=str.length();  for (int i=0; i < sl; i++) {    char c=str.charAt(i);    if (c == '\r')     continue;    if (c == '\n') {      atStartOfLine=true;      charPosition=-nll;      out.write(newline);      n+=nll;      charIndex+=nll;      charPosition+=n;      continue;    }    if (atStartOfLine) {      n+=indent();      atStartOfLine=false;    }    n++;    out.write(c);    charPosition++;    charIndex++;  }  return n;}  }
class C{  public void configure(){  SerialTrafficController tc=null;  tc=new SpecificTrafficController(this.getSystemConnectionMemo());  this.getSystemConnectionMemo().setTrafficController(tc);  tc.setAdapterMemo(this.getSystemConnectionMemo());  this.getSystemConnectionMemo().configureManagers();  tc.connectPort(this);  this.getSystemConnectionMemo().setSerialAddress(new jmri.jmrix.powerline.SerialAddress(this.getSystemConnectionMemo()));}  }
class C{  private Process runAndGetProcess(File workingDirectory,String executableToRun,List<String> arguments,Map<String,String> environment) throws ScriptFailureException {  validateWineInstallationInitialized();  validateArchitecture(workingDirectory,executableToRun);  if ("regedit".equalsIgnoreCase(executableToRun)) {    logRegFile(workingDirectory,arguments);  }  try {    final Process process=wineVersion.getInstallation().run(prefix,workingDirectory,executableToRun,environment,arguments);    if (this.setupWizard.getLogContext() != null) {      final Service processPipe=new ProcessPipe(process,new TeeOutputStream(this.setupWizard.getLogContext(),outputStream),new TeeOutputStream(this.setupWizard.getLogContext(),errorStream),inputStream);      backgroundServicesManager.register(processPipe);    }    return process;  } catch (  WineException e) {    throw new ScriptFailureException("Error while running wine:",e);  }}  }
class C{  public void addConfig(Provider provider,String key,String secret,String permissions){  OAuthConfig authConfig=new OAuthConfig(key,secret);  authConfig.setId(provider.toString());  authConfig.setCustomPermissions(permissions);  authMap.put(provider.toString(),authConfig);}  }
class C{  protected void drawQuadrants(Graphics2D g2,Rectangle2D area){  boolean somethingToDraw=false;  ValueAxis xAxis=getDomainAxis();  if (xAxis == null) {    return;  }  double x=xAxis.getRange().constrain(this.quadrantOrigin.getX());  double xx=xAxis.valueToJava2D(x,area,getDomainAxisEdge());  ValueAxis yAxis=getRangeAxis();  if (yAxis == null) {    return;  }  double y=yAxis.getRange().constrain(this.quadrantOrigin.getY());  double yy=yAxis.valueToJava2D(y,area,getRangeAxisEdge());  double xmin=xAxis.getLowerBound();  double xxmin=xAxis.valueToJava2D(xmin,area,getDomainAxisEdge());  double xmax=xAxis.getUpperBound();  double xxmax=xAxis.valueToJava2D(xmax,area,getDomainAxisEdge());  double ymin=yAxis.getLowerBound();  double yymin=yAxis.valueToJava2D(ymin,area,getRangeAxisEdge());  double ymax=yAxis.getUpperBound();  double yymax=yAxis.valueToJava2D(ymax,area,getRangeAxisEdge());  Rectangle2D[] r=new Rectangle2D[]{null,null,null,null};  if (this.quadrantPaint[0] != null) {    if (x > xmin && y < ymax) {      if (this.orientation == PlotOrientation.HORIZONTAL) {        r[0]=new Rectangle2D.Double(Math.min(yymax,yy),Math.min(xxmin,xx),Math.abs(yy - yymax),Math.abs(xx - xxmin));      } else {        r[0]=new Rectangle2D.Double(Math.min(xxmin,xx),Math.min(yymax,yy),Math.abs(xx - xxmin),Math.abs(yy - yymax));      }      somethingToDraw=true;    }  }  if (this.quadrantPaint[1] != null) {    if (x < xmax && y < ymax) {      if (this.orientation == PlotOrientation.HORIZONTAL) {        r[1]=new Rectangle2D.Double(Math.min(yymax,yy),Math.min(xxmax,xx),Math.abs(yy - yymax),Math.abs(xx - xxmax));      } else {        r[1]=new Rectangle2D.Double(Math.min(xx,xxmax),Math.min(yymax,yy),Math.abs(xx - xxmax),Math.abs(yy - yymax));      }      somethingToDraw=true;    }  }  if (this.quadrantPaint[2] != null) {    if (x > xmin && y > ymin) {      if (this.orientation == PlotOrientation.HORIZONTAL) {        r[2]=new Rectangle2D.Double(Math.min(yymin,yy),Math.min(xxmin,xx),Math.abs(yy - yymin),Math.abs(xx - xxmin));      } else {        r[2]=new Rectangle2D.Double(Math.min(xxmin,xx),Math.min(yymin,yy),Math.abs(xx - xxmin),Math.abs(yy - yymin));      }      somethingToDraw=true;    }  }  if (this.quadrantPaint[3] != null) {    if (x < xmax && y > ymin) {      if (this.orientation == PlotOrientation.HORIZONTAL) {        r[3]=new Rectangle2D.Double(Math.min(yymin,yy),Math.min(xxmax,xx),Math.abs(yy - yymin),Math.abs(xx - xxmax));      } else {        r[3]=new Rectangle2D.Double(Math.min(xx,xxmax),Math.min(yymin,yy),Math.abs(xx - xxmax),Math.abs(yy - yymin));      }      somethingToDraw=true;    }  }  if (somethingToDraw) {    Composite originalComposite=g2.getComposite();    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getBackgroundAlpha()));    for (int i=0; i < 4; i++) {      if (this.quadrantPaint[i] != null && r[i] != null) {        g2.setPaint(this.quadrantPaint[i]);        g2.fill(r[i]);      }    }    g2.setComposite(originalComposite);  }}  }
class C{  private void addRecentDownloadedFiles(){  try {    for (int i=Variable.getVariable().getRecentDownloadedMaps().size() - 1; i >= 0; i--) {      MyMap mm=Variable.getVariable().removeRecentDownloadedMap(i);      mapAdapter.insert(mm);      Variable.getVariable().addLocalMap(mm);    }  } catch (  Exception e) {    e.getStackTrace();  }}  }
class C{  public int compareTo(DebugRegisters other){  return new Integer(offset).compareTo(other.offset);}  }
class C{  public static PackedInts.Mutable generateWorstCaseArray(int length){  final int minRun=TimSorter.minRun(length);  final List<Integer> runs=runsWorstCase(length,minRun);  return createArray(length,runs);}  }
class C{  void receive(int length,DataInputStream in) throws IOException {synchronized (lock) {    if ((pos > 0) && ((buffer.length - present) < length)) {      System.arraycopy(buffer,pos,buffer,0,present - pos);      present-=pos;      pos=0;    }    if ((buffer.length - present) < length)     throw new IOException("Receive buffer overflow");    in.readFully(buffer,present,length);    present+=length;    requested-=length;    lock.notifyAll();  }}  }
class C{  public boolean contains(String signature){  if (!Scene.v().containsMethod(signature))   return false;  return methods.contains(Scene.v().getMethod(signature));}  }
class C{  public DoubleMemberValue(double d,ConstPool cp){  super('D',cp);  setValue(d);}  }
class C{  public boolean isMeasuredDataSaved(){  return parameters.getBoolean("measuredDataSaved",measuredDataSaved);}  }
class C{  public String automap(){  if (property == null || property.getVocabulary() == null) {    addActionError(getText("manage.translation.cantfind.vocabulary"));  } else {    Vocabulary vocab=property.getVocabulary();    int count=0;    for (    Entry<String,String> sourceValueEntry : getSourceValuesMap().entrySet()) {      if (!getTmap().containsValue(sourceValueEntry.getValue())) {        VocabularyConcept vc=vocab.findConcept(sourceValueEntry.getValue());        if (vc != null) {          getTmap().put(sourceValueEntry.getKey(),vc.getIdentifier());          count++;        }      }    }    addActionMessage(getText("manage.translation.mapped.terms",new String[]{String.valueOf(count)}));  }  return SUCCESS;}  }
class C{  protected void removeTag(short tagId){  mExifTags.remove(tagId);}  }
class C{  public static XNodeSet executeFilterExpr(int context,XPathContext xctxt,PrefixResolver prefixResolver,boolean isTopLevel,int stackFrame,Expression expr) throws org.apache.xml.utils.WrappedRuntimeException {  PrefixResolver savedResolver=xctxt.getNamespaceContext();  XNodeSet result=null;  try {    xctxt.pushCurrentNode(context);    xctxt.setNamespaceContext(prefixResolver);    if (isTopLevel) {      VariableStack vars=xctxt.getVarStack();      int savedStart=vars.getStackFrame();      vars.setStackFrame(stackFrame);      result=(org.apache.xpath.objects.XNodeSet)expr.execute(xctxt);      result.setShouldCacheNodes(true);      vars.setStackFrame(savedStart);    } else     result=(org.apache.xpath.objects.XNodeSet)expr.execute(xctxt);  } catch (  javax.xml.transform.TransformerException se) {    throw new org.apache.xml.utils.WrappedRuntimeException(se);  } finally {    xctxt.popCurrentNode();    xctxt.setNamespaceContext(savedResolver);  }  return result;}  }
class C{  public void redrawDots(){  reflectParametersInView();}  }
class C{  public void testCertPathBuilder05() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        CertPathBuilder.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be hrown");      } catch (      NoSuchProviderException e1) {      }    }  }}  }
class C{  @DrawableRes private int findCardType(){  this.mType=VISA;  if (mCardNumber.length() > 0) {    final String cardNumber=mCardNumber.replaceAll("\\s+","");    if (Pattern.compile(PATTERN_MASTER_CARD).matcher(cardNumber).matches()) {      this.mType=MASTERCARD;    } else     if (Pattern.compile(PATTERN_AMERICAN_EXPRESS).matcher(cardNumber).matches()) {      this.mType=AMERICAN_EXPRESS;    } else     if (Pattern.compile(PATTERN_DISCOVER).matcher(cardNumber).matches()) {      this.mType=DISCOVER;    }  }  return getLogo();}  }
class C{  public EulerianPath(Graph G){  int oddDegreeVertices=0;  int s=nonIsolatedVertex(G);  for (int v=0; v < G.V(); v++) {    if (G.degree(v) % 2 != 0) {      oddDegreeVertices++;      s=v;    }  }  if (oddDegreeVertices > 2)   return;  if (s == -1)   s=0;  Queue<Edge>[] adj=(Queue<Edge>[])new Queue[G.V()];  for (int v=0; v < G.V(); v++)   adj[v]=new Queue<Edge>();  for (int v=0; v < G.V(); v++) {    int selfLoops=0;    for (    int w : G.adj(v)) {      if (v == w) {        if (selfLoops % 2 == 0) {          Edge e=new Edge(v,w);          adj[v].enqueue(e);          adj[w].enqueue(e);        }        selfLoops++;      } else       if (v < w) {        Edge e=new Edge(v,w);        adj[v].enqueue(e);        adj[w].enqueue(e);      }    }  }  Stack<Integer> stack=new Stack<Integer>();  stack.push(s);  path=new Stack<Integer>();  while (!stack.isEmpty()) {    int v=stack.pop();    while (!adj[v].isEmpty()) {      Edge edge=adj[v].dequeue();      if (edge.isUsed)       continue;      edge.isUsed=true;      stack.push(v);      v=edge.other(v);    }    path.push(v);  }  if (path.size() != G.E() + 1)   path=null;  assert certifySolution(G);}  }
class C{  public AtomicArrayBase(int length){  this.array=new Object[length];}  }
class C{  private ReadStream openRead(long address,int size){  InStore inStore=_store.openRead(address,size);  InStoreStream is=new InStoreStream(inStore,address,address + size);  return new ReadStream(new VfsStream(is));}  }
class C{  private void reportErrors(FileExportUpdateParams param,ExportOperationType type) throws Exception {  _log.info("Working on reporting errors found if any");switch (type) {case ADD:{      reportAddErrors(param);      break;    }case MODIFY:{    reportModifyErrors(param);    break;  }case DELETE:{  reportDeleteErrors(param);  break;}}}  }
class C{  public void testValidateSecurityProperties() throws ConfigurationException, ServerRuntimeException {  resetSecuritySystemProperties();  AuthenticationInfo authInfo=null;  AuthenticationInfo badAuthInfo=null;  try {    authInfo=SecurityHelper.loadAuthenticationInformation("test.validation.security.properties",true,TUNGSTEN_APPLICATION_NAME.REST_API);    badAuthInfo=(AuthenticationInfo)authInfo.clone();  } catch (  ConfigurationException e) {    assertFalse("Initial values should not cause an exception as they are supposed to be OK",true);  }  badAuthInfo.setAuthenticationNeeded(true);  try {    badAuthInfo.setAuthenticationNeeded(true);    assertFalse(badAuthInfo.isEncryptionNeeded());    badAuthInfo.checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.REST_API);    assertFalse(badAuthInfo.isEncryptionNeeded());  } catch (  ConfigurationException e) {    assertTrue("That should not throw an exception, just update values.",false);  }  badAuthInfo=(AuthenticationInfo)authInfo.clone();  badAuthInfo.setPasswordFileLocation(badAuthInfo.getPasswordFileLocation() + "_XXX");  badAuthInfo.checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.REST_API);  assertTrue("Authentication not needed. No exception was thrown.",true);  badAuthInfo=(AuthenticationInfo)authInfo.clone();  badAuthInfo.setAuthenticationNeeded(true);  badAuthInfo.checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.REST_API);  assertTrue("File exists, no exception should be thrown !",true);  try {    badAuthInfo.setPasswordFileLocation(badAuthInfo.getPasswordFileLocation() + "_XXX");    badAuthInfo.checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.REST_API);    assertFalse("Exception should have been thrown !",true);  } catch (  ServerRuntimeException e) {    assertTrue("That's expected",true);  }  badAuthInfo=(AuthenticationInfo)authInfo.clone();  badAuthInfo.setKeystoreLocation(badAuthInfo.getKeystoreLocation() + "_XXX");  badAuthInfo.checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.REST_API);  assertTrue("Feature off. No exception was thrown.",true);  badAuthInfo=(AuthenticationInfo)authInfo.clone();  badAuthInfo.setEncryptionNeeded(true);  badAuthInfo.checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.REST_API);  assertTrue("File exists, no exception should be thrown !",true);  try {    badAuthInfo.setKeystoreLocation(badAuthInfo.getKeystoreLocation() + "_XXX");    badAuthInfo.checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.REST_API);    assertFalse("Exception should have been thrown !",true);  } catch (  ServerRuntimeException e) {    assertTrue("That's expected",true);  }  badAuthInfo=(AuthenticationInfo)authInfo.clone();  badAuthInfo.setTruststoreLocation(badAuthInfo.getTruststoreLocation() + "_XXX");  badAuthInfo.checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.REST_API);  assertTrue("Feature off, no exception should be thrown !",true);  badAuthInfo=(AuthenticationInfo)authInfo.clone();  badAuthInfo.setEncryptionNeeded(true);  badAuthInfo.checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.REST_API);  assertTrue("File exists, no exception should be thrown !",true);  try {    badAuthInfo.setTruststoreLocation(badAuthInfo.getTruststoreLocation() + "_XXX");    badAuthInfo.checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.REST_API);    assertFalse("Exception should have been thrown !",true);  } catch (  Exception ee) {    assertTrue("That's expected",true);  }  badAuthInfo=(AuthenticationInfo)authInfo.clone();  badAuthInfo.setClientKeystoreLocation(badAuthInfo.getClientKeystoreLocation() + "_XXX");  badAuthInfo.checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.REST_API);  assertTrue("Feature off. No exception was thrown.",true);  badAuthInfo=(AuthenticationInfo)authInfo.clone();  badAuthInfo.setAuthenticationNeeded(true);  badAuthInfo.setAuthenticationByCertificateNeeded(true);  badAuthInfo.checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.REST_API);  assertTrue("File exists, no exception should be thrown !",true);  try {    badAuthInfo.setClientKeystoreLocation(badAuthInfo.getClientKeystoreLocation() + "_XXX");    badAuthInfo.checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.REST_API);    assertFalse("Exception should have been thrown !",true);  } catch (  ServerRuntimeException e) {    assertTrue("That's expected",true);  }  String EMPTY_KEYSTORE="empty_keystore.jks";  badAuthInfo=(AuthenticationInfo)authInfo.clone();  badAuthInfo.setKeystoreLocation(EMPTY_KEYSTORE);  badAuthInfo.checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.REST_API);  assertTrue("Feature off. No exception was thrown.",true);  badAuthInfo=(AuthenticationInfo)authInfo.clone();  badAuthInfo.setEncryptionNeeded(true);  badAuthInfo.setKeystoreLocation(EMPTY_KEYSTORE);  try {    badAuthInfo.checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.REST_API);    assertFalse("Exception should have been thrown !",true);  } catch (  ConfigurationException e) {    assertTrue("That's expected",true);  }  badAuthInfo=(AuthenticationInfo)authInfo.clone();  badAuthInfo.setEncryptionNeeded(true);  badAuthInfo.setKeystoreLocation(EMPTY_KEYSTORE);  badAuthInfo.setKeystorePassword("bad_password");  try {    badAuthInfo.checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.REST_API);    assertFalse("Exception should have been thrown !",true);  } catch (  ConfigurationException e) {    assertTrue("That's expected",true);  }  badAuthInfo=(AuthenticationInfo)authInfo.clone();  badAuthInfo.setEncryptionNeeded(true);  badAuthInfo.setTruststorePassword(badAuthInfo.getTruststorePassword() + "_XXX");  try {    badAuthInfo.checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.REST_API);    assertFalse("Exception should have been thrown !",true);  } catch (  ConfigurationException e) {    assertTrue("That's expected",true);  }  resetSecuritySystemProperties();}  }
class C{  public void generateCode(BlockScope currentScope,boolean valueRequired){  int expressionLength=(this.expressions == null) ? 0 : this.expressions.length;  if (this.expressions != null) {    int elementsTypeID=this.binding.dimensions > 1 ? -1 : this.binding.leafComponentType.id;    for (int i=0; i < expressionLength; i++) {      Expression expr;      if ((expr=this.expressions[i]).constant != Constant.NotAConstant) {switch (elementsTypeID) {case T_int:case T_short:case T_byte:case T_char:case T_long:          if (expr.constant.longValue() != 0) {            expr.generateCode(currentScope,true);          }        break;case T_float:case T_double:      double constantValue=expr.constant.doubleValue();    if (constantValue == -0.0 || constantValue != 0) {      expr.generateCode(currentScope,true);    }  break;case T_boolean:if (expr.constant.booleanValue() != false) {  expr.generateCode(currentScope,true);}break;default :if (!(expr instanceof NullLiteral)) {expr.generateCode(currentScope,true);}}} else if (!(expr instanceof NullLiteral)) {expr.generateCode(currentScope,true);}}}}  }
class C{  public void updateFromFloatArray(float[] xyz){  this.x=xyz[0];  this.y=xyz[1];  this.z=xyz[2];}  }
class C{  Version readVersion() throws FormatException {  if (parsedVersion != null) {    return parsedVersion;  }  int dimension=bitMatrix.getHeight();  int provisionalVersion=(dimension - 17) >> 2;  if (provisionalVersion <= 6) {    return Version.getVersionForNumber(provisionalVersion);  }  int versionBits=0;  int ijMin=dimension - 11;  for (int j=5; j >= 0; j--) {    for (int i=dimension - 9; i >= ijMin; i--) {      versionBits=copyBit(i,j,versionBits);    }  }  Version theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  versionBits=0;  for (int i=5; i >= 0; i--) {    for (int j=dimension - 9; j >= ijMin; j--) {      versionBits=copyBit(i,j,versionBits);    }  }  theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  throw FormatException.getFormatInstance();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.GENERIC_DECLARATION__TYPE_VARS:    return typeVars != null && !typeVars.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTraceDuring_();}  }
class C{  @Override public int hashCode(){  int result;  long temp;  temp=Double.doubleToLongBits(this.x);  result=(int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.y);  result=29 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.displayWidth);  result=29 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.displayHeight);  result=29 * result + (int)(temp ^ (temp >>> 32));  return result;}  }
class C{  private void updateByInternalDistributedMember(InternalDistributedMember member){  if (member != null) {    this.internalId=member;    this.id=this.internalId.toString();    this.host=this.internalId.getHost();    this.name=this.internalId.getName();    if (this.name == null || DistributionConfig.DEFAULT_NAME.equals(this.name)) {      this.name=this.id;    }  }}  }
class C{  @Override public void updateInt(String columnLabel,int x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateInt(" + quote(columnLabel) + ", "+ x+ ");");    }    update(columnLabel,ValueInt.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected CCRepeatForever(CCIntervalAction action){  other=action;}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (status == JobStatus.IN_PROGRESS) {      return;    }    StringBuilder logMsgBuilder=new StringBuilder();    URI snapshotId=getTaskCompleter().getId();    BlockSnapshot snapshot=dbClient.queryObject(BlockSnapshot.class,snapshotId);    if (status == JobStatus.SUCCESS) {      snapshot.setInactive(true);      dbClient.persistObject(snapshot);      if (logMsgBuilder.length() != 0) {        logMsgBuilder.append("\n");      }      logMsgBuilder.append(String.format("Successfully deleted snapshot %s",snapshot.getId()));    } else     if (status == JobStatus.FAILED) {      if (logMsgBuilder.length() != 0) {        logMsgBuilder.append("\n");      }      logMsgBuilder.append(String.format("Failed to delete snapshot %s",snapshot.getId()));    }    if (logMsgBuilder.length() > 0) {      _logger.info(logMsgBuilder.toString());    }  } catch (  Exception e) {    setErrorStatus("Encountered an internal error during delete snapshot job status processing: " + e.getMessage());    super.updateStatus(jobContext);    _logger.error("Caught exception while handling updateStatus for delete snapshot job.",e);  } finally {    super.updateStatus(jobContext);  }}  }
class C{  public void toggle(boolean animate){  toggle(animate,fadeIn,fadeOut);}  }
class C{  protected ArrayList<Intersection> filterIntersections(DrawContext dc,ArrayList<Intersection> list){  list=super.filterIntersections(dc,list);  if (this.getPositions() == null)   return list;  Globe globe=dc.getGlobe();  int i=0;  while (i < list.size()) {    if (WWMath.isLocationInside(globe.computePositionFromPoint(list.get(i).getIntersectionPoint()),this.positions) && WWMath.isLocationInside(globe.computePositionFromPoint(list.get(i + 1).getIntersectionPoint()),this.positions))     i+=2; else {      list.remove(i);      list.remove(i);    }  }  return list;}  }
class C{  public <T extends ServiceDocument>T callServiceSynchronously(String serviceUri,T parameters,Class<T> type) throws Throwable {  Operation postOperation=Operation.createPost(UriUtils.buildUri(hosts[0],serviceUri)).setBody(parameters);  Operation result=sendRequestAndWait(postOperation,hosts[0]);  if (result.getStatusCode() >= Operation.STATUS_CODE_FAILURE_THRESHOLD) {    throw new XenonRuntimeException("Operation failed with code " + result.getStatusCode());  }  return result.getBody(type);}  }
class C{  private void init() throws Exception {  this.appendChild(mainLayout);  mainLayout.setHeight("100%");  mainLayout.setWidth("100%");  labelResourceType.setValue(Msg.translate(Env.getCtx(),"S_ResourceType_ID"));  labelResource.setValue(Msg.translate(Env.getCtx(),"S_Resource_ID"));  labelDate.setValue(Msg.translate(Env.getCtx(),"Date"));  bPrevious.setLabel("<");  bNext.setLabel(">");  mainLayout.appendChild(parameterPanel);  Rows rows=new Rows();  rows.setParent(parameterPanel);  Row row=new Row();  rows.appendChild(row);  row.appendChild(labelResourceType);  row.appendChild(fieldResourceType);  row=new Row();  rows.appendChild(row);  row.appendChild(labelResource);  row.appendChild(fieldResource);  row=new Row();  rows.appendChild(row);  row.appendChild(labelDate);  Hbox hbox=new Hbox();  hbox.appendChild(bPrevious);  hbox.appendChild(fieldDate);  hbox.appendChild(bNext);  row.appendChild(hbox);  mainLayout.appendChild(schedulePane);  schedulePane.setWidth("100%");  schedulePane.setHeight("400px");  Div div=new Div();  div.appendChild(confirmPanel);  div.appendChild(statusBar);  mainLayout.appendChild(div);  fieldResourceType.setMold("select");  fieldResource.setMold("select");}  }
class C{  public String nextLine(){  if (!hasNext()) {    throw new NoSuchElementException("No more lines");  }  String currentLine=cachedLine;  cachedLine=null;  return currentLine;}  }
class C{  public Object evaluate(Reader in) throws CompilationFailedException {  return evaluate(in,generateScriptName());}  }
class C{  public static Activity unwrap(Context context){  while (!(context instanceof Activity)) {    ContextWrapper wrapper=(ContextWrapper)context;    context=wrapper.getBaseContext();  }  return (Activity)context;}  }
class C{  public static Document deepCloneDocument(Document doc,DOMImplementation impl){  Element root=doc.getDocumentElement();  Document result=impl.createDocument(root.getNamespaceURI(),root.getNodeName(),null);  Element rroot=result.getDocumentElement();  boolean before=true;  for (Node n=doc.getFirstChild(); n != null; n=n.getNextSibling()) {    if (n == root) {      before=false;      if (root.hasAttributes()) {        NamedNodeMap attr=root.getAttributes();        int len=attr.getLength();        for (int i=0; i < len; i++) {          rroot.setAttributeNode((Attr)result.importNode(attr.item(i),true));        }      }      for (Node c=root.getFirstChild(); c != null; c=c.getNextSibling()) {        rroot.appendChild(result.importNode(c,true));      }    } else {      if (n.getNodeType() != Node.DOCUMENT_TYPE_NODE) {        if (before) {          result.insertBefore(result.importNode(n,true),rroot);        } else {          result.appendChild(result.importNode(n,true));        }      }    }  }  return result;}  }
class C{  protected void performBoosting(int numIterations) throws Exception {  double[][] trainYs=getYs(m_train);  double[][] trainFs=getFs(m_numericData);  double[][] probs=getProbs(trainFs);  int iteration=0;  while (iteration < numIterations) {    boolean foundAttribute=performIteration(iteration,trainYs,trainFs,probs,m_numericData);    if (foundAttribute) {      iteration++;    } else {      break;    }  }  m_numRegressions=iteration;}  }
class C{  public Builder withLines(int lines){  this.lines=lines;  return this;}  }
class C{  public NBTTagCompound writeToNBT(NBTTagCompound nbt){  NBTTagList discoveryList=new NBTTagList();  Iterator<Entry<AspectItem,List<IAspectType>>> discoveryIT=this.discoveredStaticAspects.entrySet().iterator();  while (discoveryIT.hasNext()) {    Entry<AspectItem,List<IAspectType>> e=discoveryIT.next();    if (e.getKey() == null || e.getValue() == null || e.getValue().size() == 0) {      discoveryIT.remove();      continue;    }    NBTTagCompound discoveryEntry=new NBTTagCompound();    e.getKey().writeToNBT(discoveryEntry);    NBTTagList aspectListCompound=new NBTTagList();    for (    IAspectType type : e.getValue()) {      aspectListCompound.appendTag(type.writeToNBT(new NBTTagCompound()));    }    discoveryEntry.setTag("aspects",aspectListCompound);    discoveryList.appendTag(discoveryEntry);  }  nbt.setTag("discoveries",discoveryList);  return nbt;}  }
class C{  public static NodeIdentity deserializeWithPrivateKey(final Deserializer deserializer){  return new NodeIdentity(deserializer,true);}  }
class C{  private void stopTimer(){  if (mTimer != null) {    mTimer.cancel();    mTimer=null;  }  Log.d(MainActivity.class.getName(),"Update Time stopped");}  }
class C{  private static boolean less(Comparable v,Comparable w){  return v.compareTo(w) < 0;}  }
class C{  public static boolean isSupportedAutoTieringPolicyAndLimitsChange(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,DbClient _dbClient,StringBuffer notSuppReasonBuff){  s_logger.info(String.format("Checking isSupportedAutoTieringPolicyAndLimitsChange from [%s] to [%s]...",currentVpool.getLabel(),newVpool.getLabel()));  if (isSameVirtualPool(currentVpool,newVpool,notSuppReasonBuff)) {    return false;  }  String[] included=INCLUDED_AUTO_TIERING_POLICY_LIMITS_COMPRESSION_CHANGE;  if (analyzeChanges(currentVpool,newVpool,included,null,null).isEmpty()) {    notSuppReasonBuff.append("Did not change AUTO_TIER_POLICY_NAME, HOST_IO_LIMIT_BANDWIDTH, HOST_IO_LIMIT_IOPS or VMAX_AF_COMPRESSION");    return false;  }  StringSet currentSystemType=null;  StringSet newSystemType=null;  if (currentVpool.getArrayInfo() != null) {    currentSystemType=(StringSet)currentVpool.getArrayInfo().get(VirtualPoolCapabilityValuesWrapper.SYSTEM_TYPE).clone();  }  if (currentSystemType == null || currentSystemType.isEmpty() || currentSystemType.contains(NONE)) {    URI systemURI=volume.getStorageController();    StorageSystem system=_dbClient.queryObject(StorageSystem.class,systemURI);    if (currentSystemType == null) {      currentSystemType=new StringSet();    }    currentSystemType.remove(NONE);    currentSystemType.add(system.getSystemType());  }  if (newVpool.getArrayInfo() != null) {    newSystemType=newVpool.getArrayInfo().get(VirtualPoolCapabilityValuesWrapper.SYSTEM_TYPE);  }  if (newSystemType != null && !newSystemType.contains(NONE)) {    if (!currentSystemType.equals(newSystemType)) {      notSuppReasonBuff.append("Auto-tiering Policy change: system_type between source vPool/Volume and target vPool is not same.");      return false;    }  }  if (!checkTargetVpoolHasVolumePool(volume,currentVpool,newVpool,_dbClient)) {    String msg="Auto-tiering Policy change: Target vPool does not have Volume's Storage Pool in its matched/assigned pools list.";    if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && VirtualPool.vPoolSpecifiesHighAvailability(newVpool)) {      msg="Auto-tiering Policy change: Target Vplex/Vplex HA vPool does not have Volume's Storage Pool in its matched/assigned pools list.";    }    notSuppReasonBuff.append(msg);    s_logger.info("Virtual Pool change not supported: {}",notSuppReasonBuff.toString());    return false;  }  List<String> excluded=new ArrayList<String>();  String[] exclude=EXCLUDED_AUTO_TIERING_POLICY_LIMITS_CHANGE;  excluded.addAll(Arrays.asList(exclude));  excluded.addAll(Arrays.asList(GENERALLY_EXCLUDED));  excluded.addAll(Arrays.asList(RP_RPO_VALUE,PROTECTION_VARRAY_SETTINGS));  if (VirtualPool.vPoolSpecifiesHighAvailabilityDistributed(currentVpool) && VirtualPool.vPoolSpecifiesHighAvailabilityDistributed(newVpool)) {    VirtualPool currentHAVpool=getHaVpool(currentVpool,_dbClient);    VirtualPool newHAVpool=getHaVpool(newVpool,_dbClient);    if (!isSameVirtualPool(currentHAVpool,newHAVpool)) {      s_logger.info("Comparing HA vPool attributes {} {}",currentHAVpool.getLabel(),newHAVpool.getLabel());      Map<String,Change> changes=analyzeChanges(currentHAVpool,newHAVpool,null,excluded.toArray(exclude),null);      if (!changes.isEmpty()) {        logNotSupportedReasonForTieringPolicyChange(changes,notSuppReasonBuff,exclude,"HA vPool");        return false;      }    }    excluded.add(HA_VARRAY_VPOOL_MAP);  }  Map<String,Change> changes=analyzeChanges(currentVpool,newVpool,null,excluded.toArray(exclude),null);  if (!changes.isEmpty()) {    logNotSupportedReasonForTieringPolicyChange(changes,notSuppReasonBuff,exclude,"vPool");    return false;  }  return true;}  }
class C{  @Override protected void succeeded(Description description){  this.trState.isSuccess=true;}  }
class C{  public boolean isApproveVisible(){  return m_ButtonApprove.isVisible();}  }
class C{  public static String[] stripAll(String[] strs){  return stripAll(strs,null);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected static int partition(Instances insts,int[] index,int attidx,int l,int r){  double pivot=insts.instance(index[(l + r) / 2]).value(attidx);  int help;  while (l < r) {    while ((insts.instance(index[l]).value(attidx) < pivot) && (l < r)) {      l++;    }    while ((insts.instance(index[r]).value(attidx) > pivot) && (l < r)) {      r--;    }    if (l < r) {      help=index[l];      index[l]=index[r];      index[r]=help;      l++;      r--;    }  }  if ((l == r) && (insts.instance(index[r]).value(attidx) > pivot)) {    r--;  }  return r;}  }
class C{  public MunitionMutator(String munitionName,int weightRatio,long munitionType,int introYear,int introTechLevel){  name=munitionName;  weight=weightRatio;  type=munitionType;  techLevel=new HashMap<Integer,Integer>();  techLevel.put(introYear,introTechLevel);}  }
class C{  public long startTime(){  return DistributionStats.getStatTime();}  }
class C{  public int[][] crossTab(int child,int parent,int lag){  int[][] ns=new int[2][2];  ns[0][0]=0;  ns[0][1]=0;  ns[1][0]=0;  ns[1][1]=0;  int j;  for (int i=lag; i < ntimes; i++) {    j=i - lag;    ns[cases[i][child]][cases[j][parent]]++;  }  return ns;}  }
class C{  public long incRevisionNumber(){  return ++revisionNumber;}  }
class C{  public void flush() throws IOException {  writer.flush();}  }
class C{  protected void expandFor(int i1,int i2,int d){  if (i1 >= sizes.size()) {    int oldSize=sizes.size(), capacity=vector.length;    sizes.set(i1,0);    if (capacity < sizes.size()) {      while (capacity < sizes.size())       capacity*=2;      int[][] t=new int[capacity][];      System.arraycopy(vector,0,t,0,oldSize);      vector=t;    }    for (int i=oldSize; i < sizes.size(); ++i)     vector[i]=new int[defaultCapacity2];  }  if (i2 < sizes.get(i1))   return;  int oldSize=sizes.get(i1), capacity=vector[i1].length;  sizes.set(i1,i2 + 1);  if (capacity >= sizes.get(i1))   return;  while (capacity < sizes.get(i1))   capacity*=2;  int[] t=new int[capacity];  System.arraycopy(vector[i1],0,t,0,oldSize);  if (d != 0)   Arrays.fill(t,oldSize,sizes.get(i1),d);  vector[i1]=t;}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus deleteUsers(String instanceId,ProvisioningSettings settings,List<ServiceUser> users) throws APPlatformException {  return null;}  }
class C{  public GenerateRoutes(URI modelURI,File targetFolder,List<? extends Object> arguments) throws IOException {  initialize(modelURI,targetFolder,arguments);}  }
class C{  private void endArguments(){  if (argumentStack % 2 != 0) {    buf.append('>');  }  argumentStack/=2;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void printActivations(){  System.out.println(Utils.doubleArrayToString(Network.getActivationVector(neuronList)));}  }
class C{  private int lookupSymbol(char chr) throws IOException {  int result=-1;  Character chrObj=chr;  int index=Collections.binarySearch(symbols,chrObj);  if (index >= 0) {    while (index > 0 && symbols.get(index - 1).compareTo(chrObj) == 0) {      index--;    }    while (index < symbols.size()) {      TokenizerSymbol symbol=symbols.get(index);      if (symbol.compareTo(chrObj) == 0) {        if (compare(symbol.startText.toCharArray(),1)) {          result=index;          break;        }        index++;      } else {        break;      }    }  }  return result;}  }
class C{  private static boolean equalityConditionsPresent(Collection<Column> columns,List<ConditionExpression> conditions){  for (  Column column : columns) {    if (!equalityConditionPresent(column,conditions)) {      return false;    }  }  return true;}  }
class C{  public void write(ArrayList data){  data.add(xCoord);  data.add(yCoord);  data.add(zCoord);  data.add(dimensionId);}  }
class C{  private void scanIdent(){  boolean isJavaIdentifierPart;  char high;  reader.putChar(true);  do {switch (reader.ch) {case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':case '$':case '_':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':      break;case '\u0000':case '\u0001':case '\u0002':case '\u0003':case '\u0004':case '\u0005':case '\u0006':case '\u0007':case '\u0008':case '\u000E':case '\u000F':case '\u0010':case '\u0011':case '\u0012':case '\u0013':case '\u0014':case '\u0015':case '\u0016':case '\u0017':case '\u0018':case '\u0019':case '\u001B':case '\u007F':    reader.scanChar();  continue;case '\u001A':if (reader.bp >= reader.buflen) {  name=reader.name();  tk=tokens.lookupKind(name);  return;}reader.scanChar();continue;default :if (reader.ch < '\u0080') {isJavaIdentifierPart=false;} else {if (Character.isIdentifierIgnorable(reader.ch)) {reader.scanChar();continue;} else {high=reader.scanSurrogates();if (high != 0) {reader.putChar(high);isJavaIdentifierPart=Character.isJavaIdentifierPart(Character.toCodePoint(high,reader.ch));} else {isJavaIdentifierPart=Character.isJavaIdentifierPart(reader.ch);}}}if (!isJavaIdentifierPart) {name=reader.name();tk=tokens.lookupKind(name);return;}}reader.putChar(true);} while (true);}  }
class C{  public ConvertedExperiment convert(String kpi){  return sixpack.convert(this,kpi);}  }
class C{  @Override public void write(int oneChar){synchronized (lock) {    buf.append((char)oneChar);  }}  }
class C{  public static boolean testSaveLocationExists(){  String sDCardStatus=Environment.getExternalStorageState();  boolean status;  if (sDCardStatus.equals(Environment.MEDIA_MOUNTED)) {    status=true;  } else {    status=false;  }  return status;}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  public ExtensionNamespaceSupport defineJavaNamespace(String ns){  return defineJavaNamespace(ns,ns);}  }
class C{  public static void hideToast(){  if (null != toast) {    toast.cancel();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.MORE_GUARDS___ANONYMOUS_MORE_GUARDS_11:    return getAnonymous_moreGuards_1_1();case UmplePackage.MORE_GUARDS___CODE_1:  return getCode_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Object init(InternalContextAdapter context,Object data) throws Exception {  super.init(context,data);  if (nodeTree != null) {    nodeTree.init(context,rsvc);    return data;  }  interpolate=interpolate && rsvc.getBoolean(RuntimeConstants.INTERPOLATE_STRINGLITERALS,true);  if (interpolate) {    BufferedReader br=new BufferedReader(new StringReader(image));    try {      nodeTree=rsvc.parse(br,"StringLiteral",false);    } catch (    ParseException pe) {      throw new RuntimeException(pe);    }  }  return data;}  }
class C{  public SWFShape tagDefineMorphShape(int id,Rect startBounds,Rect endBounds) throws IOException {  startTag(TAG_DEFINEMORPHSHAPE,id,true);  startBounds.write(out);  endBounds.write(out);  return new MorphShapeImpl(this);}  }
class C{  public boolean evict(){  throw new UnsupportedOperationException();}  }
class C{  public GF2nPolynomialField(int deg,GF2Polynomial polynomial) throws RuntimeException {  if (deg < 3) {    throw new IllegalArgumentException("degree must be at least 3");  }  if (polynomial.getLength() != deg + 1) {    throw new RuntimeException();  }  if (!polynomial.isIrreducible()) {    throw new RuntimeException();  }  mDegree=deg;  fieldPolynomial=polynomial;  computeSquaringMatrix();  int k=2;  for (int j=1; j < fieldPolynomial.getLength() - 1; j++) {    if (fieldPolynomial.testBit(j)) {      k++;      if (k == 3) {        tc=j;      }      if (k <= 5) {        pc[k - 3]=j;      }    }  }  if (k == 3) {    isTrinomial=true;  }  if (k == 5) {    isPentanomial=true;  }  fields=new Vector();  matrices=new Vector();}  }
class C{  public void testStore2withFail(){  store.put("A",Arrays.asList(new String[]{"E","D","E"}));  store.put("B",Arrays.asList(new String[]{"C","E","D","E"}));  store.parseFailed("A");  List cModules=store.getListOfModulesToReparse("C");  List dModules=store.getListOfModulesToReparse("D");  List eModules=store.getListOfModulesToReparse("E");  assertEquals(1,cModules.size());  assertTrue(cModules.contains("B"));  assertEquals(1,dModules.size());  assertTrue(dModules.contains("B"));  assertEquals(1,eModules.size());  assertTrue(eModules.contains("B"));}  }
class C{  private void init(int initCapacity){  threshold=(initCapacity * 2) / 3;  table=new Object[2 * initCapacity];}  }
class C{  void createAdminWithCorrespondingUserRoles(Organization organization,VOUserDetails user,String marketplaceId,OrganizationRoleType... roles) throws ValidationException, MailOperationException, NonUniqueBusinessKeyException {  user.setUserRoles(OrganizationRoleType.correspondingUserRoles(Arrays.asList(roles)));  createOrganizationAdmin(organization,user,null,null,getMarketplace(marketplaceId));}  }
class C{  public void drainEncoder(boolean endOfStream){  final int TIMEOUT_USEC=10000;  if (VERBOSE)   Log.d(TAG,"drainEncoder(" + endOfStream + ")");  if (endOfStream) {    if (VERBOSE)     Log.d(TAG,"sending EOS to encoder");    mEncoder.signalEndOfInputStream();  }  ByteBuffer[] encoderOutputBuffers=mEncoder.getOutputBuffers();  while (true) {    int encoderStatus=mEncoder.dequeueOutputBuffer(mBufferInfo,TIMEOUT_USEC);    if (encoderStatus == MediaCodec.INFO_TRY_AGAIN_LATER) {      if (!endOfStream) {        break;      } else {        if (VERBOSE)         Log.d(TAG,"no output available, spinning to await EOS");      }    } else     if (encoderStatus == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {      encoderOutputBuffers=mEncoder.getOutputBuffers();    } else     if (encoderStatus == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {      if (mMuxerStarted) {        throw new RuntimeException("format changed twice");      }      MediaFormat newFormat=mEncoder.getOutputFormat();      Log.d(TAG,"encoder output format changed: " + newFormat);      mTrackIndex=mMuxer.addTrack(newFormat);      mMuxer.start();      mMuxerStarted=true;    } else     if (encoderStatus < 0) {      Log.w(TAG,"unexpected result from encoder.dequeueOutputBuffer: " + encoderStatus);    } else {      ByteBuffer encodedData=encoderOutputBuffers[encoderStatus];      if (encodedData == null) {        throw new RuntimeException("encoderOutputBuffer " + encoderStatus + " was null");      }      if ((mBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {        if (VERBOSE)         Log.d(TAG,"ignoring BUFFER_FLAG_CODEC_CONFIG");        mBufferInfo.size=0;      }      if (mBufferInfo.size != 0) {        if (!mMuxerStarted) {          throw new RuntimeException("muxer hasn't started");        }        encodedData.position(mBufferInfo.offset);        encodedData.limit(mBufferInfo.offset + mBufferInfo.size);        mMuxer.writeSampleData(mTrackIndex,encodedData,mBufferInfo);        if (VERBOSE) {          Log.d(TAG,"sent " + mBufferInfo.size + " bytes to muxer, ts="+ mBufferInfo.presentationTimeUs);        }      }      mEncoder.releaseOutputBuffer(encoderStatus,false);      if ((mBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {        if (!endOfStream) {          Log.w(TAG,"reached end of stream unexpectedly");        } else {          if (VERBOSE)           Log.d(TAG,"end of stream reached");        }        break;      }    }  }}  }
class C{  protected void writeDataDescriptor(ZipArchiveEntry ze) throws IOException {  if (ze.getMethod() != DEFLATED || raf != null) {    return;  }  writeOut(DD_SIG);  writeOut(ZipLong.getBytes(ze.getCrc()));  int sizeFieldSize=WORD;  if (!hasZip64Extra(ze)) {    writeOut(ZipLong.getBytes(ze.getCompressedSize()));    writeOut(ZipLong.getBytes(ze.getSize()));  } else {    sizeFieldSize=DWORD;    writeOut(ZipEightByteInteger.getBytes(ze.getCompressedSize()));    writeOut(ZipEightByteInteger.getBytes(ze.getSize()));  }  written+=2 * WORD + 2 * sizeFieldSize;}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4 + 1),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  LongCounts(int sz){  vals=new long[sz];  counts=new int[sz];  threshold=(int)(sz * LOAD_FACTOR);}  }
class C{  public static void clearDnsCache(){  try {    InetAddressCacheUtil.clearInetAddressCache();  } catch (  Exception e) {    throw new DnsCacheManipulatorException("Fail to clearDnsCache, cause: " + e.toString(),e);  }}  }
class C{  public Vector3f(float value){  this.points[0]=value;  this.points[1]=value;  this.points[2]=value;}  }
class C{  public void delete(String key){  root=delete(root,key,0);}  }
class C{  private WindowManager.LayoutParams createLayoutParams(){  WindowManager.LayoutParams layoutParams=getWindow().getAttributes();  layoutParams.width=ViewGroup.LayoutParams.MATCH_PARENT;  layoutParams.height=ViewGroup.LayoutParams.MATCH_PARENT;  return layoutParams;}  }
class C{  public String buildImage(String repository,ProgressMonitor progressMonitor,AuthConfigs authConfigs,File... files) throws IOException, InterruptedException {  final File tar=Files.createTempFile(null,".tar").toFile();  try {    createTarArchive(tar,files);    return buildImage(repository,tar,progressMonitor,authConfigs);  }  finally {    FileCleaner.addFile(tar);  }}  }
class C{  public void paintPopupMenuBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    history.getCurrentState().setNextStateAsCurrentState();    kseFrame.updateControls(true);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  private void updateTooltips(ShuffleMenuUser user){  String metricTT=getString(KEY_METRIC_TOOLTIP);  String doMoveTT=getString(KEY_DO_TOOLTIP);  String closeTT=getString(KEY_CLOSE_TOOLTIP);  if (!metricTT.equals(metricLabel.getToolTipText())) {    metricLabel.setToolTipText(getString(KEY_METRIC_TOOLTIP));    ind.setToolTipText(getString(KEY_METRIC_TOOLTIP));  }  if (user.getSelectedResult() == null) {    doMoveButton.setToolTipText(null);  } else   if (!doMoveTT.equals(doMoveButton.getToolTipText())) {    doMoveButton.setToolTipText(getString(KEY_DO_TOOLTIP));  }  if (!closeTT.equals(closeButton.getToolTipText())) {    closeButton.setToolTipText(getString(KEY_CLOSE_TOOLTIP));  }}  }
class C{  public static Resources open(String resource) throws IOException {  return open(resource,-1);}  }
class C{  private boolean isUidALocationProvider(int uid){  if (uid == Process.SYSTEM_UID) {    return true;  }  if (mGeocodeProvider != null) {    if (doesPackageHaveUid(uid,mGeocodeProvider.getConnectedPackageName()))     return true;  }  for (  LocationProviderProxy proxy : mProxyProviders) {    if (doesPackageHaveUid(uid,proxy.getConnectedPackageName()))     return true;  }  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.340 -0500",hash_original_method="B8A7B4640F8CA15D86AD2B2DA38E6CD3",hash_generated_method="418FAD9CD57B1DF307E434ACAC1968EE") public int start(){  return start(0);}  }
class C{  public void dispose(){  if (m_addressSpace != null) {    m_addressSpace.removeListener(m_addressSpaceListener);    m_addressSpace.getConfiguration().removeListener(m_addressSpaceConfigurationListener);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void testAddMultipleFilterInitParams() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "  </filter>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  WebXmlUtils.addFilterInitParam(webXml,"f1","f1param1","f1param1value");  WebXmlUtils.addFilterInitParam(webXml,"f1","f1param2","f1param2value");  WebXmlUtils.addFilterInitParam(webXml,"f1","f1param3","f1param3value");  List<String> initParams=WebXmlUtils.getFilterInitParamNames(webXml,"f1");  assertEquals(3,initParams.size());  assertEquals("f1param1",initParams.get(0));  assertEquals("f1param2",initParams.get(1));  assertEquals("f1param3",initParams.get(2));}  }
class C{  @Override public void flush() throws IOException {  out.flush();}  }
class C{  public Codebase merge(){  Set<String> filesToMerge=Sets.union(Utils.makeFilenamesRelative(filesystem.findFiles(destinationCodebase.path()),destinationCodebase.path()),Utils.makeFilenamesRelative(filesystem.findFiles(modifiedCodebase.path()),modifiedCodebase.path()));  for (  String filename : filesToMerge) {    this.generateMergedFile(filename);  }  this.report();  return mergedCodebase;}  }
class C{  BinaryNode<T> construct(T value){  return new BinaryNode<T>(value);}  }
class C{  public static long highestOneBit(long v){  v|=(v >> 1);  v|=(v >> 2);  v|=(v >> 4);  v|=(v >> 8);  v|=(v >> 16);  v|=(v >> 32);  return v - (v >>> 1);}  }
class C{  public LinkedCorrectionProposal(String name,ASTRewrite rewrite,int relevance,Document document,Images image){  super(name,rewrite,relevance,document,image);}  }
class C{  public Zipper<A> dropBefore(){  return new Zipper<>(List.empty(),back,0);}  }
class C{  public boolean execute(INode state){  JumpingSolitaireState jss=(JumpingSolitaireState)state;  jss.filled[from]=false;  jss.filled[over]=false;  jss.filled[to]=true;  return true;}  }
class C{  public boolean makePlayServicesAvailable(@NonNull Activity activity,int requestCode,@Nullable Dialog.OnCancelListener cancelListener){  if (isPlayServicesAvailable()) {    return true;  }  if (!canMakePlayServicesAvailable()) {    return false;  }  int errorCode=sApiAvailability.isGooglePlayServicesAvailable(activity);  Dialog dialog=sApiAvailability.getErrorDialog(activity,errorCode,requestCode,cancelListener);  if (dialog != null) {    dialog.show();    return true;  } else {    Log.w(TAG,"apiAvailability.getErrorDialog() was null!");    Log.w(TAG,"errorCode=" + errorCode);    return false;  }}  }
class C{  public void start(){  running=true;  startTimeMillis=System.currentTimeMillis();  thread=new Thread(this,THREAD_NAME_PREFIX + getPort());  thread.start();}  }
class C{  private void handleJavaPaintEvent(){  if (!isLayouting()) {    targetPaintArea.paint(getTarget(),shouldClearRectBeforePaint());  }}  }
class C{  public static <K,V>SmallLRUCache<K,V> newInstance(int size){  return new SmallLRUCache<K,V>(size);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String timestamp(){  return timestamp;}  }
class C{  @Override protected Integer scan(AnnotatedTypeMirror type,Void v){  return reduce(super.scan(type,null),generateHashcode(type));}  }
class C{  public void showDropDown(){  showDropDown(0,0);}  }
class C{  protected void lockOrientation(){  if (this.orientationLock == ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED) {    Display display=activity.getWindowManager().getDefaultDisplay();    int rotation=display.getRotation();    int baseOrientation=activity.getResources().getConfiguration().orientation;    int orientation=0;    if (baseOrientation == Configuration.ORIENTATION_LANDSCAPE) {      if (rotation == Surface.ROTATION_0 || rotation == Surface.ROTATION_90) {        orientation=ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;      } else {        orientation=ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;      }    } else     if (baseOrientation == Configuration.ORIENTATION_PORTRAIT) {      if (rotation == Surface.ROTATION_0 || rotation == Surface.ROTATION_270) {        orientation=ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;      } else {        orientation=ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT;      }    }    this.orientationLock=orientation;  }  activity.setRequestedOrientation(this.orientationLock);}  }
class C{  public RouteItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("batchstatus") @Valid BatchStatus batchStatus,BindingResult bindingResult,Principal principal){  LOGGER.debug("Entering into insert for batch_status table");  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.BatchStatus jpaBatchStatus=new com.wipro.ats.bdre.md.dao.jpa.BatchStatus();    jpaBatchStatus.setBatchStateId(batchStatus.getBatchStateId());    jpaBatchStatus.setDescription(batchStatus.getDescription());    Integer batchStatusID=batchStatusDAO.insert(jpaBatchStatus);    batchStatus.setBatchStateId(batchStatusID);    LOGGER.debug("Batch State Id" + batchStatus.getBatchStateId());    LOGGER.debug("Exiting from insert for batch_status table");    restWrapper=new RestWrapper(batchStatus,RestWrapper.OK);    LOGGER.info(RECORDWITHID + batchStatus.getBatchStateId() + " inserted in BatchStatus by User:"+ principal.getName()+ batchStatus);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public final boolean isResourceAbsent(TileKey tileKey){  if (tileKey == null) {    String msg=Logging.getMessage("nullValue.TileKeyIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Level level=this.getLevel(tileKey.getLevelNumber());  return level.isEmpty() || level.isResourceAbsent(this.getTileNumber(tileKey));}  }
class C{  public void saveSceneCurrentSceneData(){}  }
class C{  public void addClickingListener(OnWheelClickedListener listener){  clickingListeners.add(listener);}  }
class C{  public static void serializeActions(JsonGenerator jsonGenerator,List<OFAction> actions) throws IOException, JsonProcessingException {  if (actions.isEmpty()) {    jsonGenerator.writeStringField("none","drop");  }  for (  OFAction a : actions) {switch (a.getType()) {case OUTPUT:      jsonGenerator.writeStringField(ActionUtils.STR_OUTPUT,((OFActionOutput)a).getPort().toString());    break;case SET_VLAN_VID:  jsonGenerator.writeNumberField(ActionUtils.STR_VLAN_SET_VID,((OFActionSetVlanVid)a).getVlanVid().getVlan());break;case SET_VLAN_PCP:jsonGenerator.writeNumberField(ActionUtils.STR_VLAN_SET_PCP,((OFActionSetVlanPcp)a).getVlanPcp().getValue());break;case SET_QUEUE:jsonGenerator.writeNumberField(ActionUtils.STR_QUEUE_SET,((OFActionSetQueue)a).getQueueId());break;case SET_DL_SRC:jsonGenerator.writeStringField(ActionUtils.STR_DL_SRC_SET,((OFActionSetDlSrc)a).getDlAddr().toString());break;case SET_DL_DST:jsonGenerator.writeStringField(ActionUtils.STR_DL_DST_SET,((OFActionSetDlDst)a).getDlAddr().toString());break;case SET_NW_SRC:jsonGenerator.writeStringField(ActionUtils.STR_NW_SRC_SET,((OFActionSetNwSrc)a).getNwAddr().toString());break;case SET_NW_DST:jsonGenerator.writeStringField(ActionUtils.STR_NW_DST_SET,((OFActionSetNwDst)a).getNwAddr().toString());break;case SET_NW_TOS:jsonGenerator.writeNumberField(ActionUtils.STR_NW_TOS_SET,((OFActionSetNwTos)a).getNwTos());break;case SET_TP_SRC:jsonGenerator.writeNumberField(ActionUtils.STR_TP_SRC_SET,((OFActionSetTpSrc)a).getTpPort().getPort());break;case SET_TP_DST:jsonGenerator.writeNumberField(ActionUtils.STR_TP_DST_SET,((OFActionSetTpDst)a).getTpPort().getPort());break;case ENQUEUE:jsonGenerator.writeNumberField(ActionUtils.STR_ENQUEUE,((OFActionEnqueue)a).getPort().getPortNumber());break;case GROUP:jsonGenerator.writeStringField(ActionUtils.STR_GROUP,((OFActionGroup)a).getGroup().toString());break;case STRIP_VLAN:jsonGenerator.writeString(ActionUtils.STR_VLAN_STRIP);break;case PUSH_VLAN:jsonGenerator.writeNumberField(ActionUtils.STR_VLAN_PUSH,((OFActionPushVlan)a).getEthertype().getValue());break;case PUSH_MPLS:jsonGenerator.writeNumberField(ActionUtils.STR_MPLS_PUSH,((OFActionPushMpls)a).getEthertype().getValue());break;case PUSH_PBB:jsonGenerator.writeNumberField(ActionUtils.STR_PBB_PUSH,((OFActionPushPbb)a).getEthertype().getValue());break;case POP_VLAN:jsonGenerator.writeString(ActionUtils.STR_VLAN_POP);break;case POP_MPLS:jsonGenerator.writeNumberField(ActionUtils.STR_MPLS_POP,((OFActionPopMpls)a).getEthertype().getValue());break;case POP_PBB:jsonGenerator.writeString(ActionUtils.STR_PBB_POP);break;case COPY_TTL_IN:jsonGenerator.writeString(ActionUtils.STR_TTL_IN_COPY);break;case COPY_TTL_OUT:jsonGenerator.writeString(ActionUtils.STR_TTL_OUT_COPY);break;case DEC_NW_TTL:jsonGenerator.writeString(ActionUtils.STR_NW_TTL_DEC);break;case DEC_MPLS_TTL:jsonGenerator.writeString(ActionUtils.STR_MPLS_TTL_DEC);break;case SET_MPLS_LABEL:jsonGenerator.writeNumberField(ActionUtils.STR_MPLS_LABEL_SET,((OFActionSetMplsLabel)a).getMplsLabel());break;case SET_MPLS_TC:jsonGenerator.writeNumberField(ActionUtils.STR_MPLS_TC_SET,((OFActionSetMplsTc)a).getMplsTc());break;case SET_MPLS_TTL:jsonGenerator.writeNumberField(ActionUtils.STR_MPLS_TTL_SET,((OFActionSetMplsTtl)a).getMplsTtl());break;case SET_NW_ECN:jsonGenerator.writeNumberField(ActionUtils.STR_NW_ECN_SET,((OFActionSetNwEcn)a).getNwEcn().getEcnValue());break;case SET_NW_TTL:jsonGenerator.writeNumberField(ActionUtils.STR_NW_TTL_SET,((OFActionSetNwTtl)a).getNwTtl());break;case EXPERIMENTER:jsonGenerator.writeNumberField(ActionUtils.STR_EXPERIMENTER,((OFActionExperimenter)a).getExperimenter());break;case SET_FIELD:if (((OFActionSetField)a).getField() instanceof OFOxmArpOp) {jsonGenerator.writeNumberField(MatchUtils.STR_ARP_OPCODE,((OFOxmArpOp)((OFActionSetField)a).getField()).getValue().getOpcode());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpSha) {jsonGenerator.writeStringField(MatchUtils.STR_ARP_SHA,((OFOxmArpSha)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpTha) {jsonGenerator.writeStringField(MatchUtils.STR_ARP_DHA,((OFOxmArpTha)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpSpa) {jsonGenerator.writeStringField(MatchUtils.STR_ARP_SPA,((OFOxmArpSpa)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpTpa) {jsonGenerator.writeStringField(MatchUtils.STR_ARP_DPA,((OFOxmArpTpa)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdSll) {jsonGenerator.writeStringField(MatchUtils.STR_IPV6_ND_SSL,((OFOxmIpv6NdSll)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdTll) {jsonGenerator.writeStringField(MatchUtils.STR_IPV6_ND_TTL,((OFOxmIpv6NdTll)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdTarget) {jsonGenerator.writeStringField(MatchUtils.STR_IPV6_ND_TARGET,((OFOxmIpv6NdTarget)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmEthType) {jsonGenerator.writeNumberField(MatchUtils.STR_DL_TYPE,((OFOxmEthType)((OFActionSetField)a).getField()).getValue().getValue());} else if (((OFActionSetField)a).getField() instanceof OFOxmEthSrc) {jsonGenerator.writeStringField(MatchUtils.STR_DL_SRC,((OFOxmEthSrc)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmEthDst) {jsonGenerator.writeStringField(MatchUtils.STR_DL_DST,((OFOxmEthDst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmVlanVid) {jsonGenerator.writeNumberField(MatchUtils.STR_DL_VLAN,((OFOxmVlanVid)((OFActionSetField)a).getField()).getValue().getVlan());} else if (((OFActionSetField)a).getField() instanceof OFOxmVlanPcp) {} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv4Code) {jsonGenerator.writeNumberField(MatchUtils.STR_ICMP_CODE,((OFOxmIcmpv4Code)((OFActionSetField)a).getField()).getValue().getCode());} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv4Type) {jsonGenerator.writeNumberField(MatchUtils.STR_ICMP_TYPE,((OFOxmIcmpv4Type)((OFActionSetField)a).getField()).getValue().getType());} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv6Code) {jsonGenerator.writeNumberField(MatchUtils.STR_ICMPV6_CODE,((OFOxmIcmpv6Code)((OFActionSetField)a).getField()).getValue().getRaw());} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv6Type) {jsonGenerator.writeNumberField(MatchUtils.STR_ICMPV6_TYPE,((OFOxmIcmpv6Type)((OFActionSetField)a).getField()).getValue().getRaw());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpProto) {jsonGenerator.writeNumberField(MatchUtils.STR_NW_PROTO,((OFOxmIpProto)((OFActionSetField)a).getField()).getValue().getIpProtocolNumber());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv4Src) {jsonGenerator.writeStringField(MatchUtils.STR_NW_SRC,((OFOxmIpv4Src)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv4Dst) {jsonGenerator.writeStringField(MatchUtils.STR_NW_DST,((OFOxmIpv4Dst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Src) {jsonGenerator.writeStringField(MatchUtils.STR_IPV6_SRC,((OFOxmIpv6Src)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Dst) {jsonGenerator.writeStringField(MatchUtils.STR_IPV6_DST,((OFOxmIpv6Dst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Flabel) {jsonGenerator.writeStringField(MatchUtils.STR_IPV6_FLOW_LABEL,((OFOxmIpv6Flabel)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpEcn) {jsonGenerator.writeNumberField(MatchUtils.STR_NW_ECN,((OFOxmIpEcn)((OFActionSetField)a).getField()).getValue().getEcnValue());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpDscp) {jsonGenerator.writeNumberField(MatchUtils.STR_NW_DSCP,((OFOxmIpDscp)((OFActionSetField)a).getField()).getValue().getDscpValue());} else if (((OFActionSetField)a).getField() instanceof OFOxmTcpSrc) {jsonGenerator.writeNumberField(MatchUtils.STR_TCP_SRC,((OFOxmTcpSrc)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmTcpDst) {jsonGenerator.writeNumberField(MatchUtils.STR_TCP_DST,((OFOxmTcpDst)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmUdpSrc) {jsonGenerator.writeNumberField(MatchUtils.STR_UDP_SRC,((OFOxmUdpSrc)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmUdpDst) {jsonGenerator.writeNumberField(MatchUtils.STR_UDP_DST,((OFOxmUdpDst)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmSctpSrc) {jsonGenerator.writeNumberField(MatchUtils.STR_SCTP_SRC,((OFOxmSctpSrc)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmSctpDst) {jsonGenerator.writeNumberField(MatchUtils.STR_SCTP_DST,((OFOxmSctpDst)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmMplsLabel) {jsonGenerator.writeNumberField(MatchUtils.STR_MPLS_LABEL,((OFOxmMplsLabel)((OFActionSetField)a).getField()).getValue().getValue());} else if (((OFActionSetField)a).getField() instanceof OFOxmMplsTc) {jsonGenerator.writeNumberField(MatchUtils.STR_MPLS_TC,((OFOxmMplsTc)((OFActionSetField)a).getField()).getValue().getValue());} else if (((OFActionSetField)a).getField() instanceof OFOxmMplsBos) {jsonGenerator.writeStringField(MatchUtils.STR_MPLS_TC,((OFOxmMplsBos)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmMetadata) {jsonGenerator.writeNumberField(MatchUtils.STR_METADATA,((OFOxmMetadata)((OFActionSetField)a).getField()).getValue().getValue().getValue());} else {logger.error("Could not decode Set-Field action field: {}",((OFActionSetField)a));}}}}  }
class C{  public static boolean isRequiredConfigDirectory(final String directory){  return requiredConfigDirectories.contains(directory);}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.416 -0500",hash_original_method="EFF3BAA5D0EF7633E7DF2DAA76502E87",hash_generated_method="376BE25A6A8379FB0723D68DD552DF63") @Override AndroidHttpClientConnection openConnection(Request req) throws IOException {  EventHandler eventHandler=req.getEventHandler();  mCertificate=null;  eventHandler.certificate(mCertificate);  AndroidHttpClientConnection conn=new AndroidHttpClientConnection();  BasicHttpParams params=new BasicHttpParams();  Socket sock=new Socket(mHost.getHostName(),mHost.getPort());  params.setIntParameter(HttpConnectionParams.SOCKET_BUFFER_SIZE,8192);  conn.bind(sock,params);  return conn;}  }
class C{  private Boolean validQuotaDirectoryPath(String volName,String quotaDirName){  if (volName == null && quotaDirName == null) {    _log.info("Invalid volume name and quota directory name ");    return false;  } else {    if (quotaDirName.length() > QUOTA_DIR_MAX_NAME) {      _log.error("quota directory name is too long {}, maximum {} chars",quotaDirName.length(),QUOTA_DIR_MAX_NAME);      return false;    }    String qtreePath=VOL_ROOT + volName + "/"+ quotaDirName;    if (qtreePath.length() > QUOTA_DIR_MAX_PATH) {      _log.error("quota directory path is too long {}, maximum {} chars",qtreePath.length(),QUOTA_DIR_MAX_PATH);      return false;    }  }  return true;}  }
class C{  public AnnotationParser createAnnotationParser(){  if (parser.getAnnotationParserFactory() == null)   return DefaultAnnotationParser.theInstance; else   return parser.getAnnotationParserFactory().create();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildAssassinIdGuy(zone);}  }
class C{  private void validateState(State current){  ValidationUtils.validateState(current);}  }
class C{  public OpenReplicatorClient(MySqlClient mysqlClient,ZkClient client){  this.zkClient=client;  this.mySqlClient=mysqlClient;}  }
class C{  public Object[] toArray(){  Object[] result=new Object[size];  int i=0;  for (Entry<E> e=header.next; e != header; e=e.next)   result[i++]=e.element;  return result;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void observeDisabled(){  FRCNetworkCommunicationsLibrary.FRCNetworkCommunicationObserveUserProgramDisabled();}  }
class C{  public InvalidParameterException(){  super();}  }
class C{  public void addArc(int nParent,int nChild) throws Exception {  if (m_bNeedsUndoAction) {    addUndoAction(new AddArcAction(nParent,nChild));  }  int nOldCard=m_ParentSets[nChild].getCardinalityOfParents();  m_ParentSets[nChild].addParent(nParent,m_Instances);  int nNewCard=m_ParentSets[nChild].getCardinalityOfParents();  Estimator[] ds=new Estimator[nNewCard];  for (int iParent=0; iParent < nNewCard; iParent++) {    ds[iParent]=Estimator.clone(m_Distributions[nChild][iParent % nOldCard]);  }  m_Distributions[nChild]=ds;}  }
class C{  public SVGTranscoder(){  setErrorHandler(DEFAULT_ERROR_HANDLER);}  }
class C{  public static boolean isCodecSupported(String codec){  Format format=(Format)SUPPORTED_CODECS.get(codec.toLowerCase());  return (format != null);}  }
class C{  public void clear(){  lastIterableEvent=null;}  }
class C{  private static int expandParametersToSysCall(Instruction call,IR ir){  int nGPRParams=0;  int nFPRParams=0;  int parameterBytes=0;  int numParams=MIR_Call.getNumberOfParams(call);  if (VM.BuildFor32Addr) {    for (int i=numParams - 1; i >= 0; i--) {      Operand param=MIR_Call.getClearParam(call,i);      MIR_Call.setParam(call,i,null);      TypeReference paramType=param.getType();      if (paramType.isFloatType() || paramType.isDoubleType()) {        nFPRParams++;        int size;        if (paramType.isFloatType()) {          size=BYTES_IN_FLOAT;          parameterBytes-=WORDSIZE;        } else {          size=BYTES_IN_DOUBLE;          parameterBytes-=2 * WORDSIZE;        }        Operand M=new StackLocationOperand(false,parameterBytes,size);        if (SSE2_FULL) {          if (paramType.isFloatType()) {            call.insertBefore(MIR_Move.create(IA32_MOVSS,M,param));          } else {            call.insertBefore(MIR_Move.create(IA32_MOVSD,M,param));          }        } else {          call.insertBefore(MIR_Move.create(IA32_FMOV,M,param));        }      } else {        nGPRParams++;        parameterBytes-=WORDSIZE;        call.insertBefore(MIR_UnaryNoRes.create(REQUIRE_ESP,IC(parameterBytes + WORDSIZE)));        call.insertBefore(MIR_UnaryNoRes.create(IA32_PUSH,param));      }    }    return parameterBytes;  } else {    PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet().asIA32();    int FPRRegisterParams=countFPRParams(call);    FPRRegisterParams=Math.min(FPRRegisterParams,PhysicalRegisterSet.getNumberOfNativeFPRParams());    parameterBytes=-2 * WORDSIZE;    RegisterOperand fpCount=new RegisterOperand(phys.getEAX(),TypeReference.Int);    call.insertBefore(MIR_Move.create(IA32_MOV,fpCount,IC(FPRRegisterParams)));    call.insertBefore(MIR_Move.create(IA32_MOV,new RegisterOperand(phys.getGPR(R14),TypeReference.Long),new RegisterOperand(phys.getESI(),TypeReference.Long)));    call.insertBefore(MIR_Move.create(IA32_MOV,new RegisterOperand(phys.getGPR(R13),TypeReference.Long),new RegisterOperand(phys.getEDI(),TypeReference.Long)));    call.insertAfter(MIR_Move.create(IA32_MOV,new RegisterOperand(phys.getESI(),TypeReference.Long),new RegisterOperand(phys.getGPR(R14),TypeReference.Long)));    call.insertAfter(MIR_Move.create(IA32_MOV,new RegisterOperand(phys.getEDI(),TypeReference.Long),new RegisterOperand(phys.getGPR(R13),TypeReference.Long)));    call.insertBefore(MIR_UnaryNoRes.create(REQUIRE_ESP,IC(0)));    int nParamsInRegisters=0;    for (int i=0; i < numParams; i++) {      Operand param=MIR_Call.getClearParam(call,i);      MIR_Call.setParam(call,i,null);      TypeReference paramType=param.getType();      if (paramType.isFloatType() || paramType.isDoubleType()) {        nFPRParams++;        int size;        size=BYTES_IN_STACKSLOT;        parameterBytes-=WORDSIZE;        if (nFPRParams > PhysicalRegisterSet.getNumberOfNativeFPRParams()) {          Operand M=new StackLocationOperand(false,parameterBytes,size);          if (SSE2_FULL) {            if (paramType.isFloatType()) {              call.insertBefore(MIR_Move.create(IA32_MOVSS,M,param));            } else {              call.insertBefore(MIR_Move.create(IA32_MOVSD,M,param));            }          } else {            call.insertBefore(MIR_Move.create(IA32_FMOV,M,param));          }        } else {          RegisterOperand real;          if (SSE2_FULL) {            real=new RegisterOperand(phys.getNativeFPRParam(nFPRParams - 1),paramType);            if (paramType.isFloatType()) {              call.insertBefore(MIR_Move.create(IA32_MOVSS,real,param));            } else {              call.insertBefore(MIR_Move.create(IA32_MOVSD,real,param));            }          } else {            real=new RegisterOperand(phys.getNativeFPRParam(FPRRegisterParams - nFPRParams),paramType);            call.insertBefore(MIR_Move.create(IA32_FMOV,real,param));          }          MIR_Call.setParam(call,nParamsInRegisters++,real.copy());        }      } else {        nGPRParams++;        parameterBytes-=WORDSIZE;        if (nGPRParams > PhysicalRegisterSet.getNumberOfNativeGPRParams()) {          call.insertBefore(MIR_UnaryNoRes.create(REQUIRE_ESP,IC(parameterBytes + WORDSIZE)));          call.insertBefore(MIR_UnaryNoRes.create(IA32_PUSH,param));        } else {          Register phy=phys.getNativeGPRParam(nGPRParams - 1);          RegisterOperand real=new RegisterOperand(phy,paramType);          call.insertBefore(MIR_Move.create(IA32_MOV,real,param));          MIR_Call.setParam(call,nParamsInRegisters++,real.copy());        }      }    }    return parameterBytes;  }}  }
class C{  public boolean onShouldBeingScrolling(PLIView view,CGPoint startPoint,CGPoint endPoint){  return true;}  }
class C{  public WbXmlAttributeDef locateAttribute(byte pageCode,byte token){  return attrsByToken.get(new WbXmlToken(pageCode,token));}  }
class C{  public void initialize(InitializationParams initializationParams){  if (initializationParams == null) {    throw new IllegalArgumentException("Argument is mandatory");  }  mInitializationParams=initializationParams;  getFragmentManager().addOnBackStackChangedListener(mOnBackStackChangedListener);  mLastStackCount=getFragmentManager().getBackStackEntryCount();  mPendingOperations=new LinkedList<Runnable>();}  }
class C{  public boolean hasName(String nameToCheck){  return namesLowercase.contains(nameToCheck.toLowerCase());}  }
class C{  public boolean isHalfDayLeaveAllowed(){  Object oo=get_Value(COLUMNNAME_IsHalfDayLeaveAllowed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public URL find(String classname){  if (this.classname.equals(classname)) {    String cname=classname.replace('.','/') + ".class";    try {      return new URL("file:/ByteArrayClassPath/" + cname);    } catch (    MalformedURLException e) {    }  }  return null;}  }
class C{  public void standby(){  sched.standby();}  }
class C{  public void addChild(FXGNode child){  if (mask == null && child instanceof MaskingNode) {    mask=(MaskingNode)child;    delegate.addChild(this);  } else {    super.addChild(child);  }}  }
class C{  protected void fireEventListeners(NodeEventTarget node,AbstractEvent e,boolean useCapture,HashSet stoppedGroups,HashSet toBeStoppedGroups){  String type=e.getType();  EventSupport support=node.getEventSupport();  if (support == null) {    return;  }  EventListenerList list=support.getEventListeners(type,useCapture);  if (list == null) {    return;  }  EventListenerList.Entry[] listeners=list.getEventListeners();  fireEventListeners(node,e,listeners,stoppedGroups,toBeStoppedGroups);}  }
class C{  public void update(long duration){  if (duration > 0) {    reservoir.update(duration);  }}  }
class C{  public TableHeaderElement(Element e){  super("th",e);}  }
class C{  public static UnchangeableAllowingOnBehalfActingException convertToApi(org.oscm.internal.types.exception.UnchangeableAllowingOnBehalfActingException oldEx){  return convertExceptionToApi(oldEx,UnchangeableAllowingOnBehalfActingException.class);}  }
class C{  public PuffInAnimation(View view){  this.view=view;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public void pushElemAttributeSet(ElemAttributeSet attrSet){  m_attrSetStack.push(attrSet);}  }
class C{  public static TransportNetwork fromFiles(String osmFile,List<String> gtfsFiles,TNBuilderConfig config){  return fromFiles(osmFile,gtfsFiles,null,config);}  }
class C{  public GridClientFutureTimeoutException(String msg){  super(msg);}  }
class C{  public void testContainsAll(){  LinkedBlockingQueue q=populatedQueue(SIZE);  LinkedBlockingQueue p=new LinkedBlockingQueue(SIZE);  for (int i=0; i < SIZE; ++i) {    assertTrue(q.containsAll(p));    assertFalse(p.containsAll(q));    p.add(new Integer(i));  }  assertTrue(p.containsAll(q));}  }
class C{  public static final boolean isLeapYear(int year){  return DateTimeUtil.getInstance().isLeapYear(year);}  }
class C{  private static void testKey(Key key1,Key key2) throws Exception {  if (key2.getAlgorithm().equals("RSA") == false) {    throw new Exception("Algorithm not RSA");  }  if (key1 instanceof PublicKey) {    if (key2.getFormat().equals("X.509") == false) {      throw new Exception("Format not X.509");    }  } else   if (key1 instanceof PrivateKey) {    if (key2.getFormat().equals("PKCS#8") == false) {      throw new Exception("Format not PKCS#8");    }  }  if (key1.equals(key2) == false) {    throw new Exception("Keys not equal");  }  if (Arrays.equals(key1.getEncoded(),key2.getEncoded()) == false) {    throw new Exception("Encodings not equal");  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector result=new Vector();  OptionUtils.add(result,super.listOptions());  OptionUtils.addOption(result,fileTipText(),"" + getDefaultFile(),'F');  return OptionUtils.toEnumeration(result);}  }
class C{  private void paint(SeaGlassContext context,Graphics g){  String title=getTitle();  if (title != null) {    SynthStyle style=context.getStyle();    Color color=style.getColor(context,ColorType.TEXT_FOREGROUND);    if ((context.getComponentState() & 512) != 0) {      Object obj=style.get(context,"[WindowFocused].textForeground");      if (obj != null && obj instanceof Color) {        color=(Color)obj;      }      color=Color.BLACK;    }    g.setColor(color);    g.setFont(style.getFont(context));    FontMetrics fm=SwingUtilities2.getFontMetrics(rootPane,g);    int baseline=(getHeight() + fm.getAscent() - fm.getLeading() - fm.getDescent()) / 2;    JButton lastButton=null;    if (isParentIconifiable()) {      lastButton=iconButton;    } else     if (isParentMaximizable()) {      lastButton=maxButton;    } else     if (isParentClosable()) {      lastButton=closeButton;    }    int maxX;    int minX;    boolean ltr=isParentLeftToRight();    if (ltr) {      if (lastButton != null) {        maxX=lastButton.getX() - titleSpacing;      } else {        maxX=getParentWidth() - getParentInsets().right - titleSpacing;      }      minX=menuButton.getX() + menuButton.getWidth() + titleSpacing;    } else {      if (lastButton != null) {        minX=lastButton.getX() + lastButton.getWidth() + titleSpacing;      } else {        minX=getParentInsets().left + titleSpacing;      }      maxX=getParentWidth() - getParentInsets().right - menuButton.getX()- titleSpacing;    }    String clippedTitle=getTitle(title,fm,maxX - minX);    if (clippedTitle == title) {      int width=style.getGraphicsUtils(context).computeStringWidth(context,g.getFont(),fm,title);      minX=Math.max(minX,(getWidth() - width) / 2);      minX=Math.min(maxX - width,minX);    }    ((SeaGlassGraphicsUtils)style.getGraphicsUtils(context)).drawEmphasizedText(g,color,DEFAULT_EMPHASIS_COLOR,clippedTitle,minX,baseline);  }}  }
class C{  @RequestMapping(produces="text/html") public String errorHtml(Model model,HttpServletRequest request,HttpServletResponse response){  response.setStatus(getStatus(request).value());  model.addAttribute("errors",getErrorAttributes(request,isIncludeStackTrace(request)));  State.populateModel(model,request);  return "index";}  }
class C{  public void materialize(RPromise promise){  if (isOptEagerProfile.profile(promise.getState().isEager()) || isOptPromisedProfile.profile(promise.getState() == PromiseState.Promised)) {    EagerPromiseBase eager=(EagerPromiseBase)promise;    eager.materialize();  }}  }
class C{  public CannotParseException(String reason){  this(new Warning(reason));}  }
class C{  public String UseThisVar(String id,String context){  SymTabEntry se=null;  int i=FindSym(id,context);  if (i == symtab.size())   return id;  se=(SymTabEntry)symtab.elementAt(i);  if (se.type == GLOBAL || se.type == PROCESSVAR || se.type == PROCEDUREVAR || se.type == PARAMETER)   return se.useThis;  i=FindSym(id,"");  if (se.type == GLOBAL)   return se.useThis;  return id;}  }
class C{  @NotNull @Deprecated @ObjectiveCName("requestStartAuthCommandWithEmail:") public Command<AuthState> requestStartEmailAuth(final String email){  return modules.getAuthModule().requestStartEmailAuth(email);}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key) throws SecurityException, SignatureException, InvalidKeyException {  try {    return generateX509Certificate(key,"BC",null);  } catch (  NoSuchProviderException e) {    throw new SecurityException("BC provider not installed!");  }}  }
class C{  public void hideView(V view,int offset,boolean withAnimation){  if (!hidden) {    hidden=true;    animateOffset(view,offset,true,withAnimation);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public FastStringBuffer(){  this(10,15,2);}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public boolean onBlockDestroyed(ItemStack stack,World worldIn,IBlockState blockIn,BlockPos pos,EntityLivingBase entityLiving){  if ((double)blockIn.getBlockHardness(worldIn,pos) != 0.0D) {    stack.damageItem(1,entityLiving);  }  return true;}  }
class C{  public void jump(int where){  if (frames.length > where) {    currentFrame=where;    loadPixels();    System.arraycopy(frames[currentFrame].pixels,0,pixels,0,width * height);    updatePixels();    lastJumpTime=parent.millis();  }}  }
class C{  @Override public void onSuccess(){  if (measuredHeight <= 0)   measuredHeight=itemView.getMeasuredHeight();  ViewGroup.LayoutParams params=image.getLayoutParams();  params.height=measuredHeight;}  }
class C{  static boolean chunkSet(InternalDistributedMember recipient,Set set,int CHUNK_SIZE_IN_BYTES,boolean includeValues,ObjectIntProcedure proc) throws IOException {  Iterator it=set.iterator();  boolean keepGoing=true;  boolean sentLastChunk=false;  final HeapDataOutputStream mos=new HeapDataOutputStream(InitialImageOperation.CHUNK_SIZE_IN_BYTES + 2048,recipient.getVersionObject());  do {    mos.reset();    int avgItemSize=0;    int itemCount=0;    while ((mos.size() + avgItemSize) < InitialImageOperation.CHUNK_SIZE_IN_BYTES && it.hasNext()) {      Object key=it.next();      DataSerializer.writeObject(key,mos);      itemCount++;      avgItemSize=mos.size() / itemCount;    }    DataSerializer.writeObject((Object)null,mos);    int lastMsg=it.hasNext() ? 0 : 1;    keepGoing=proc.executeWith(mos,lastMsg);    sentLastChunk=lastMsg == 1 && keepGoing;  } while (keepGoing && it.hasNext());  return sentLastChunk;}  }
class C{  public LoaderClassPath(ClassLoader cl){  clref=new WeakReference(cl);}  }
class C{  protected void copyTo(String path) throws IOException {  File destination=new File(path);  FileUtils.copyDirectory(folder.getRoot(),destination);}  }
class C{  public ConnectionPoolTimeoutException(){  super();}  }
class C{  public NoSuchPaddingException(String msg){  super(msg);}  }
class C{  private boolean checkDBConnectivity(boolean createDB,boolean ignoreError) throws ReplicatorException {  Database conn=null;  try {    conn=connectionManager.getRawConnection(createDB);    conn.connect();    return true;  } catch (  SQLException e) {    if (!ignoreError) {      throw new ReplicatorException("Unable to connect to DBMS: url=" + connectionSpec.createUrl(createDB));    }  } finally {    if (conn != null) {      connectionManager.releaseConnection(conn);    }  }  return false;}  }
class C{  public FileVirtualPoolRestRep assignStoragePools(URI id,VirtualPoolPoolUpdateParam input){  return client.put(FileVirtualPoolRestRep.class,input,getIdUrl() + "/assign-matched-pools",id);}  }
class C{  public GenericProxyFactory directory(Directory directory){  return group(directory.getGroup()).version(directory.getVersion()).providerName(directory.getServiceProviderName());}  }
class C{  @AssistedInject public ConnectionResource(@Assisted UserContext userContext,@Assisted Directory<Connection> directory,@Assisted Connection connection,DirectoryObjectTranslator<Connection,APIConnection> translator){  super(directory,connection,translator);  this.userContext=userContext;  this.connection=connection;}  }
class C{  @Override public void processChallenge(final Header header) throws MalformedChallengeException {  super.processChallenge(header);  this.complete=true;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  private void createRaytracingTexture(){  this.raytraceTexture=glGenTextures();  glBindTexture(GL_TEXTURE_2D,raytraceTexture);  glTexStorage2D(GL_TEXTURE_2D,1,GL_RGBA32F,width,height);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  public E removeMinimum(){  if (this.root == null)   return null;  return this.removeMinimum(this.root).comparable;}  }
class C{  public GraphEnvironment(){  super(null);}  }
class C{  protected void lock(Lock lock){  while (true) {    try {      while (!lock.tryLock(1000,TimeUnit.MILLISECONDS)) {      }      return;    } catch (    InterruptedException e) {    }  }}  }
class C{  @Override protected void checkCompatibility(ExampleSet exampleSet) throws OperatorException {}  }
class C{  public boolean isTruncated(){  return isTruncated;}  }
class C{  public League(File saveFile,String namesCSV,String lastNamesCSV){  heismanDecided=false;  hasScheduledBowls=false;  blessDevelopingStory=false;  curseDevelopingStory=false;  bowlGames=new Game[10];  String line=null;  currentWeek=0;  leagueRecords=new LeagueRecords();  userTeamRecords=new LeagueRecords();  longestWinStreak=new TeamStreak(2016,2016,0,"XXX");  yearStartLongestWinStreak=new TeamStreak(2016,2016,0,"XXX");  longestActiveWinStreak=new TeamStreak(2016,2016,0,"XXX");  try {    BufferedReader bufferedReader=new BufferedReader(new FileReader(saveFile));    line=bufferedReader.readLine();    if (line.substring(line.length() - 7,line.length()).equals("[HARD]%"))     isHardMode=true; else     isHardMode=false;    leagueHistory=new ArrayList<String[]>();    while ((line=bufferedReader.readLine()) != null && !line.equals("END_LEAGUE_HIST")) {      leagueHistory.add(line.split("%"));    }    heismanHistory=new ArrayList<String>();    while ((line=bufferedReader.readLine()) != null && !line.equals("END_HEISMAN_HIST")) {      heismanHistory.add(line);    }    conferences=new ArrayList<Conference>();    teamList=new ArrayList<Team>();    conferences.add(new Conference("SOUTH",this));    conferences.add(new Conference("LAKES",this));    conferences.add(new Conference("NORTH",this));    conferences.add(new Conference("COWBY",this));    conferences.add(new Conference("PACIF",this));    conferences.add(new Conference("MOUNT",this));    allAmericans=new ArrayList<Player>();    String[] splits;    for (int i=0; i < 60; ++i) {      StringBuilder sbTeam=new StringBuilder();      while ((line=bufferedReader.readLine()) != null && !line.equals("END_PLAYERS")) {        sbTeam.append(line);      }      Team t=new Team(sbTeam.toString(),this);      conferences.get(getConfNumber(t.conference)).confTeams.add(t);      teamList.add(t);    }    if ((line=bufferedReader.readLine()) != null) {      for (      Team t : teamList) {        if (t.name.equals(line)) {          userTeam=t;          userTeam.userControlled=true;        }      }    }    while ((line=bufferedReader.readLine()) != null && !line.equals("END_USER_TEAM")) {      userTeam.teamHistory.add(line);    }    StringBuilder sbBless=new StringBuilder();    while ((line=bufferedReader.readLine()) != null && !line.equals("END_BLESS_TEAM")) {      sbBless.append(line);    }    if (!sbBless.toString().equals("NULL")) {      saveBless=findTeamAbbr(sbBless.toString());      saveBless.sortPlayers();      findTeamAbbr(saveBless.rivalTeam).sortPlayers();    } else {      saveBless=null;    }    StringBuilder sbCurse=new StringBuilder();    while ((line=bufferedReader.readLine()) != null && !line.equals("END_CURSE_TEAM")) {      sbCurse.append(line);    }    if (!sbCurse.toString().equals("NULL")) {      saveCurse=findTeamAbbr(sbCurse.toString());      saveCurse.sortPlayers();      findTeamAbbr(saveCurse.rivalTeam).sortPlayers();    } else {      saveCurse=null;    }    String[] record;    while ((line=bufferedReader.readLine()) != null && !line.equals("END_LEAGUE_RECORDS")) {      record=line.split(",");      if (!record[1].equals("-1"))       leagueRecords.checkRecord(record[0],Integer.parseInt(record[1]),record[2],Integer.parseInt(record[3]));    }    while ((line=bufferedReader.readLine()) != null && !line.equals("END_LEAGUE_WIN_STREAK")) {      record=line.split(",");      longestWinStreak=new TeamStreak(Integer.parseInt(record[2]),Integer.parseInt(record[3]),Integer.parseInt(record[0]),record[1]);      yearStartLongestWinStreak=new TeamStreak(Integer.parseInt(record[2]),Integer.parseInt(record[3]),Integer.parseInt(record[0]),record[1]);    }    while ((line=bufferedReader.readLine()) != null && !line.equals("END_USER_TEAM_RECORDS")) {      record=line.split(",");      if (!record[1].equals("-1"))       userTeamRecords.checkRecord(record[0],Integer.parseInt(record[1]),record[2],Integer.parseInt(record[3]));    }    while ((line=bufferedReader.readLine()) != null && !line.equals("END_HALL_OF_FAME")) {      userTeam.hallOfFame.add(line);    }    bufferedReader.close();    nameList=new ArrayList<String>();    String[] namesSplit=namesCSV.split(",");    for (    String n : namesSplit) {      nameList.add(n.trim());    }    lastNameList=new ArrayList<String>();    namesSplit=lastNamesCSV.split(",");    for (    String n : namesSplit) {      lastNameList.add(n.trim());    }    updateLongestActiveWinStreak();    for (int i=0; i < conferences.size(); ++i) {      conferences.get(i).setUpSchedule();    }    for (int i=0; i < conferences.size(); ++i) {      conferences.get(i).setUpOOCSchedule();    }    for (int i=0; i < conferences.size(); ++i) {      conferences.get(i).insertOOCSchedule();    }    newsStories=new ArrayList<ArrayList<String>>();    for (int i=0; i < 16; ++i) {      newsStories.add(new ArrayList<String>());    }    newsStories.get(0).add("New Season!>Ready for the new season, coach? Whether the National Championship is " + "on your mind, or just a winning season, good luck!");    if (saveBless != null) {      storyFullName=getRandName();      storyFirstName=storyFullName.replaceAll(" .*","");      storyLastName=storyFullName.replaceAll(".* ","");      String storyPlayer;      for (int i=0; i < 1; i++) {switch ((int)(Math.random() * 8)) {case 0:          newsStories.get(0).add("Blue Chip hire for Bad Break University>" + saveBless.name + " announced the hire of alumnus and former professional coach "+ getRandName()+ ", today. It was long rumored that the highly touted coach considered the position a \"dream job\", but talks between the two didn't heat up until this offseason. The hire certainly helps boost the prestige of the University's football program, which has fallen on hard times as of late.");        break;case 1:      newsStories.get(0).add("Fashion Speaks Louder Than Words>Renowned sports apparel mogul and " + saveBless.name + " alumnus "+ storyFullName+ " has declared war on boring uniforms. "+ storyLastName+ " has pledged his company's services to \"ensure that the university's football team never wears the same uniform twice.\" Recruits are already abuzz on social media declaring their newly found interest in playing for the school.");    break;case 2:  String playerLastName;if (saveBless.getS(0).year >= 2) storyPlayer=saveBless.getS(0).name; else if (saveBless.getCB(0).year >= 2) storyPlayer=saveBless.getCB(0).name; else if (saveBless.getF7(0).year >= 2) storyPlayer=saveBless.getF7(0).name; else if (saveBless.getCB(1).year >= 2) storyPlayer=saveBless.getCB(1).name; else if (saveBless.getF7(1).year >= 2) storyPlayer=saveBless.getF7(1).name; else if (saveBless.getCB(2).year >= 2) storyPlayer=saveBless.getCB(2).name; else if (saveBless.getF7(2).year >= 2) storyPlayer=saveBless.getF7(2).name; else if (saveBless.getF7(3).year >= 2) storyPlayer=saveBless.getF7(3).name; else {  System.out.println("No suitable defensive players, new bless story");  i--;  break;}playerLastName=storyPlayer.replaceAll(".* ","");newsStories.get(0).add("The Hit That Keeps On Giving>For the 50th consecutive day, " + saveBless.name + " star "+ storyPlayer+ "'s explosive hit against "+ saveBless.rivalTeam+ " sits atop the CFB News Top Plays list. "+ playerLastName+ " credits Coach "+ getRandName()+ " with providing him the inspiration to stay in the weight room late and think clearly during plays. During its reign, \"The Hit\" has dethroned and outlasted the "+ teamList.get((int)(Math.random() * 60)).name+ " Baseball Team's \"Puppies in the Park\" viral video, and "+ teamList.get((int)(Math.random() * 60)).name+ "'s Make-A-Wish TD on the Top Plays list.");break;case 3:newsStories.get(0).add(saveBless.name + " Nutrition Dept. Electro-Lighting Up the Field>Nutrition and Sport Science graduate students at " + saveBless.name+ " are helping their team gain the upper hand on the field with their own work in the lab. At a press conference held today outside the team's practice field, the university announced the first production run of it's own sports enhancement drink. The drink is expected to be available in stores mid-season with an initial offering of three flavors: \"Berry Blitz\", \"Hail Cherry\", and \"The Man-Go Route.\" Despite recent struggles by "+ saveBless.name+ " on the football field, the school is hoping to boost it's overall image with this move.");blessDevelopingStory=true;blessDevelopingWeek=((int)(Math.random() * 4)) + 5;blessDevelopingCase=1;System.out.println("Check news in week " + (blessDevelopingWeek + 1) + " for "+ saveBless.name+ "'s story development");break;case 4:newsStories.get(0).add("Just Call Him Coach Dougie>When a cell phone recording of Coach " + storyFullName + " out dancing his players at the end of a Spring practice was uploaded to the internet, "+ storyLastName+ " thought nothing of it. When it hit one million views over night, Coach took notice. In response to wild popularity his moves have received, "+ storyLastName+ " has made it a new tradition at "+ saveBless.name+ " to have a dance off with all prospective recruits, much to the delight of fans and students, who have turned out in large numbers to watch the competitions.");break;case 5:newsStories.get(0).add("Breaking News: College Athletes Love Partying>A stunning development out of " + saveBless.name + " today, as it's being reported that college athletes, and athletic recruits for that matter, love to \"party and just have a good time.\" This surprising development grew out of reports on social media that "+ saveBless.name+ " fall practices were drawing large crowds. These stories eventually led to more reports that full fledged parties, complete with beer and music, were taking place after each practice. Recruits have been abuzz on social media declaring their intent to check out these parties and their desire to play for a school that \"knows how to have a good time.\" Coaching staffs around the country are scratching their collective heads in bewilderment while "+ saveBless.name+ " enjoys their sudden and unexpected recruiting boon.");break;case 6:newsStories.get(0).add("Success in the Classroom Spilling Onto the Field>" + saveBless.name + " find themselves in an unusual, but agreeable, position. The university, which has been slowly increasing admissions standards and taking strives to improve it's academic offerings, has begun to find itself counted among the Top 100 schools nationwide. As a result, the football Program program is finding itself with a new breed of recruit: smarter, more driven, and more capable of learning complex schemes. "+ saveBless.name+ " also finds itself with increased overall attention, as its name is beginning to have association with some of the most academically rigorous institutions in the country. As the school's mission to improve its academic standing continues, it stands to reason that it will enjoy an increased level of prestige.");break;case 7:String networkName;switch (getConfNumber(saveBless.conference)) {case 0:networkName="SOUTH Sportsnet";break;case 1:networkName="LAKES Vision";break;case 2:networkName="The NORTH Network";break;case 3:networkName="COWBY Championship Channel";break;case 4:networkName="PACIF Pics";break;case 5:networkName="MOUNT Mega Sports";break;default :networkName=(saveBless.conference + " Collegiate Sports Network");break;}int teamTVDeals=0;ArrayList<String> tvDealTeams=new ArrayList<String>();String memberSchoolsWithTV;for (int ttv=0; ttv < conferences.get(getConfNumber(saveBless.conference)).confTeams.size(); ttv++) {if (conferences.get(getConfNumber(saveBless.conference)).confTeams.get(ttv).teamTVDeal) {teamTVDeals++;tvDealTeams.add(conferences.get(getConfNumber(saveBless.conference)).confTeams.get(ttv).name);}}if (tvDealTeams.size() == 1) {memberSchoolsWithTV="member school " + tvDealTeams.get(0);} else {memberSchoolsWithTV="member schools ";for (int tdt=0; tdt < tvDealTeams.size(); tdt++) {if (tdt == tvDealTeams.size() - 1) {memberSchoolsWithTV+=" and ";}if (tvDealTeams.size() == 2) {memberSchoolsWithTV+=(tvDealTeams.get(tdt) + " ");} else {if (tdt == tvDealTeams.size() - 1) {memberSchoolsWithTV+=(tvDealTeams.get(tdt) + " ");} else {memberSchoolsWithTV+=(tvDealTeams.get(tdt) + ", ");}}}}if (Math.random() <= 0 && !findTeamAbbr(saveBless.abbr).confTVDeal && teamTVDeals == 0) {newsStories.get(0).add(saveBless.conference + " Announces Launch of New TV Network>In a joint press conference between conference officials and all member schools, The " + saveBless.conference+ " Conference announced the launch of it's new TV network "+ networkName+ ". The network, which was largely spearheaded by member school "+ saveBless.name+ ", is expected to increase the revenue and recruiting range of member schools in ways previously unseen by the conference. The channel goes live next week with the first broadcast expected to be the morning matchup between "+ saveBless.gameSchedule.get(0).homeTeam.name+ " and "+ saveBless.gameSchedule.get(0).awayTeam.name+ ".");for (int ctv=0; ctv < conferences.get(getConfNumber(saveBless.conference)).confTeams.size(); ctv++) {conferences.get(getConfNumber((saveBless.conference))).confTeams.get(ctv).confTVDeal=true;conferences.get(getConfNumber((saveBless.conference))).confTeams.get(ctv).teamPrestige+=5;}} else if (Math.random() <= 0.20 && !findTeamAbbr(saveBless.abbr).confTVDeal && teamTVDeals != 0) {newsStories.get(0).add(saveBless.conference + " Announces New Network After Lengthy Negotiations>After negotiations that went long into the night, The " + saveBless.conference+ " Conference released a statement today detailing the launch of "+ networkName+ ", the conference's first exclusive TV network. Sources familiar with the situation explained that the agreement was delayed by negotiations with "+ memberSchoolsWithTV+ " who had previously inked TV deals of their own for team specific networks. Specific details were not released, but Conference Comissioner "+ storyFullName+ " did go on record as saying the only TV network for all conference teams will be "+ networkName+ " moving forward.");for (int ctv=0; ctv < conferences.get(getConfNumber(saveBless.conference)).confTeams.size(); ctv++) {conferences.get(getConfNumber((saveBless.conference))).confTeams.get(ctv).confTVDeal=true;if (tvDealTeams.contains(conferences.get(getConfNumber((saveBless.conference))).confTeams.get(ctv).name)) {if (conferences.get(getConfNumber((saveBless.conference))).confTeams.get(ctv).name.equals(saveBless.name)) conferences.get(getConfNumber((saveBless.conference))).confTeams.get(ctv).teamPrestige+=0; else conferences.get(getConfNumber((saveBless.conference))).confTeams.get(ctv).teamPrestige+=1;} else {conferences.get(getConfNumber((saveBless.conference))).confTeams.get(ctv).teamPrestige+=5;}}} else if (!findTeamAbbr(saveBless.abbr).confTVDeal && !findTeamAbbr(saveBless.abbr).teamTVDeal) {if (saveBless.abbr.equals("HOL") || saveBless.abbr.equals("ULA")) {String holOrUlaTVName;if (saveBless.abbr.equals("HOL")) {holOrUlaTVName="Hollywood St announced today, that it will launch it's own exclusive athletics channel 'Hollywood St. Sportsnet'.";} else {holOrUlaTVName="The University of Los Angeles announced that 'ULA All Access', a channel dedicated exclusively to hosting ULA Athletics content, is set to begin broadcasting.";}newsStories.get(0).add(saveBless.name + " Takes Advantage of Non-Athletic Local Talents>In a move that left everyone around the country wondering \"what took so long?\", " + holOrUlaTVName+ " The channel goes live next week, with the first broadcast expected to be "+ findTeamAbbr(saveBless.abbr).gameSchedule.get(0).awayTeam.name+ " at "+ findTeamAbbr(saveBless.abbr).gameSchedule.get(0).homeTeam.name+ ". "+ saveBless.name+ " cited the wealth of local talent and expertise in the broadcasting industry as major catalysts for getting the network off the ground and on the air.");} else {newsStories.get(0).add(saveBless.name + " Does Its Best Hollywood St Impression>In a move that's expected to greatly boost the national awareness and recruiting reach of " + saveBless.name+ ", the university announced that it's ready to go live with its first foray into national broadcasting in the form of a university specific athletics television network. The school has remained hush on many details surrounding the network, but the channel is expected to go live next week when a name and availability will be announced at the conclusion of the final fall practice of the year.");findTeamAbbr(saveBless.abbr).teamTVDeal=true;}} else {i--;break;}break;default :i--;System.out.println("Error in selecting bless story (got default case), retrying...");break;}}}if (saveCurse != null) {storyFullName=getRandName();storyFirstName=storyFullName.replaceAll(" .*","");storyLastName=storyFullName.replaceAll(".* ","");String storyPlayer;for (int i=0; i < 1; i++) {switch ((int)(Math.random() * 7)) {case 0:newsStories.get(0).add(saveCurse.name + " Rocked by Infractions Scandal!>After an investigation during the offseason, " + saveCurse.name+ " has been placed on probation and assigned on-campus vistation limits for recruits. Athletic Director "+ storyFullName+ " released a statment vowing that the institution would work to repair the damage done to its prestige.");break;case 1:newsStories.get(0).add(saveCurse.name + " Coach Redefines \"Strange Bed Fellows\">" + saveCurse.name+ " Head Coach "+ storyFullName+ " has landed in hot water after he was discovered at the home of a Class of "+ (getYear() + 2)+ " recruit, having a sleepover. Family of the recruit, who's name has been withheld, state that Coach "+ storyLastName+ " and the recruit \"watched GetPix and chilled.\" Despite a lack of charges against "+ storyLastName+ ", the university has placed an indefinite suspension to the coach's recruiting travel privileges, pending an internal investigation.");break;case 2:String playerGFSchool;if (saveCurse.getQB(0).year >= 2 && saveCurse.getQB(0).ratOvr > 85) storyPlayer=saveCurse.getQB(0).name; else if (saveCurse.getRB(0).year >= 2 && saveCurse.getRB(0).ratOvr > 79) storyPlayer=saveCurse.getRB(0).name; else if (saveCurse.getWR(0).year >= 2 && saveCurse.getWR(0).ratOvr > 79) storyPlayer=saveCurse.getWR(0).name; else if (saveCurse.getRB(1).year >= 2 && saveCurse.getRB(1).ratOvr > 79) storyPlayer=saveCurse.getRB(1).name; else if (saveCurse.getWR(1).year >= 2 && saveCurse.getWR(1).ratOvr > 79) storyPlayer=saveCurse.getWR(1).name; else if (saveCurse.getWR(2).year >= 2 && saveCurse.getWR(2).ratOvr > 79) storyPlayer=saveCurse.getWR(2).name; else {i--;break;}if (saveCurse.abbr.equals("SAM")) playerGFSchool="Indiana"; else if (saveCurse.abbr.equals("IND")) playerGFSchool="American Samoa"; else playerGFSchool=teamList.get((int)(Math.random() * 60)).name;String storyPlayerLast=storyPlayer.replaceAll(".* ","");newsStories.get(0).add(saveCurse.name + " Star Demonstrates The Rare \"Reverse Catfish\">After winning the nation's heart by finishing out the " + (getYear() - 1)+ " season despite losing his girlfriend to a freak fishing accident, "+ saveCurse.name+ " star "+ storyPlayer+ " now faces intense scrutiny from national media for allegedly making the whole thing up. "+ storyPlayerLast+ " originally claimed his girlfriend was a student at "+ playerGFSchool+ ", until internet message board users discovered a private blog run by the player that revealed the truth; the girlfriend was fake, and her name was actually the name of his pet catfish. The university's athletics department officially declined to comment, citing an ongoing internal investigation.");break;case 3:String starRSOrFR;if (findTeamAbbr(saveCurse.rivalTeam).teamRSs.size() > 0 && findTeamAbbr(saveCurse.rivalTeam).teamFRs.size() > 0 && (findTeamAbbr(saveCurse.rivalTeam).teamRSs.get(0).ratOvr >= findTeamAbbr(saveCurse.rivalTeam).teamFRs.get(0).ratOvr)) {starRSOrFR=("highly sought after recruit and current " + findTeamAbbr(saveCurse.rivalTeam).name + " redshirt freshman "+ findTeamAbbr(saveCurse.rivalTeam).teamRSs.get(0).name);} else {if (findTeamAbbr(saveCurse.rivalTeam).teamFRs.size() > 0) starRSOrFR=(findTeamAbbr(saveCurse.rivalTeam).name + "'s star freshman recruit " + findTeamAbbr(saveCurse.rivalTeam).teamFRs.get(0).name); else starRSOrFR=(findTeamAbbr(saveCurse.rivalTeam).name + "'s star freshman recruit " + getRandName());}Player srCurseTeam;if (saveCurse.teamSRs.size() > 0) srCurseTeam=saveCurse.teamSRs.get(0); else srCurseTeam=saveCurse.teamQBs.get(0);newsStories.get(0).add("A New Kind of Summer Haze>" + saveCurse.name + " Senior "+ srCurseTeam.position+ " "+ srCurseTeam.name+ " stepped forward today, as the ringleader of a group of upperclassmen responsible for the extreme hazing of several of the program's underclassmen, including several non-player students. It was revealed earlier this year that "+ starRSOrFR+ " flipped his commitment from "+ saveCurse.name+ " after being contacted on social media by members of the group and told to \"prepare\" for the hazing he would face leading up to Spring Practice. There is currently no word on what punishment Coach "+ storyFullName+ " will hand out to the group.");curseDevelopingStory=true;curseDevelopingWeek=0;curseDevelopingCase=1;break;case 4:newsStories.get(0).add("Coach Tries, Fails, to Shield Team from Booster Politics>" + saveCurse.name + " Head Coach "+ storyFullName+ " is making headlines this week for launching into an expletive filled tirade directed at athletics boosters at a private \"Boosters Only\" event. "+ storyLastName+ " was set off when a particular booster asked for star quarterback "+ saveCurse.getQB(0).name+ "'s phone number and began chastising the audience for \"caring too much about a bunch of kids playing football.\" Athletic Director "+ getRandName()+ " released a statement stating \"The Athletics Department appreciates the support of all fans of all "+ saveCurse.name+ " sports, and we will be working with "+ storyFirstName+ " to help him understand that.\"");break;case 5:String saveCurseGameOneOpp=null;if (saveCurse.gameSchedule.get(0).homeTeam == saveCurse) {saveCurseGameOneOpp=saveCurse.gameSchedule.get(0).awayTeam.name;} else if (saveCurse.gameSchedule.get(0).awayTeam == saveCurse) {saveCurseGameOneOpp=saveCurse.gameSchedule.get(0).homeTeam.name;}newsStories.get(0).add("Collegiate Boxing Returns to " + saveCurse.name + "'s Locker Room>Sources inside the football program at "+ saveCurse.name+ " have reported that an offseason dispute between between starting quarterback "+ saveCurse.teamQBs.get(0).name+ " and top wide receiver "+ saveCurse.teamWRs.get(1).name+ " was left to fester over the summer and finally came to blows this afternoon. When contacted for comment, Head Coach "+ storyFullName+ " said only that he was \"aware of an issue within the team\" and that he will be \"looking into the matter further.\" "+ saveCurse.name+ " kicks their season off against "+ saveCurseGameOneOpp+ " next Saturday.");curseDevelopingStory=true;curseDevelopingWeek=0;curseDevelopingCase=2;break;case 6:newsStories.get(0).add(saveCurse.name + "'s Reputation Shaken by Fake Grading Scandal>" + saveCurse.name+ " has announced the suspension of several university administrators pending an internal investigation into the falsification of grades for student athletes that were on the border of academic eligibility. Third party investigators uncovered the grading scheme after being asked to look into why several graduating players could not read the instructions provided with their Wonderlic Tests. Recruits from as far out as the class of "+ (getYear() + 2)+ " have rescinded verbal commitments, citing their desire to explore their options further. Currently, no academic or athletic sactions have been announced for the school.");break;default :i--;System.out.println("Error in selecting curse story (got default case), retrying...");break;}}}} catch (FileNotFoundException ex) {System.out.println("Unable to open file");}catch (IOException ex) {System.out.println("Error reading file");}}  }
class C{  public double nextGaussian(){  return org.evosuite.runtime.Random.nextGaussian();}  }
class C{  public List<Long> keys(boolean cold,boolean nonResident){  ArrayList<Long> keys=new ArrayList<Long>();  for (  Segment<V> s : segments) {    keys.addAll(s.keys(cold,nonResident));  }  return keys;}  }
class C{  protected SmallerOp_Impl(){  super();}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public boolean isSetTransactionId(){  return EncodingUtils.testBit(__isset_bitfield,__TRANSACTIONID_ISSET_ID);}  }
class C{  public T caseS_Solve(S_Solve object){  return null;}  }
class C{  protected boolean isIPBroadcast(IPv4Address ip){  IPv4Address inv_subnet_mask=subnet_mask.not();  return ip.and(inv_subnet_mask).equals(inv_subnet_mask);}  }
class C{  public static MGRSCoord fromString(String MGRSString,Globe globe){  if (MGRSString == null || MGRSString.length() == 0) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  MGRSString=MGRSString.toUpperCase().replaceAll(" ","");  final MGRSCoordConverter converter=new MGRSCoordConverter(globe);  long err=converter.convertMGRSToGeodetic(MGRSString);  if (err != MGRSCoordConverter.MGRS_NO_ERROR) {    String message=Logging.getMessage("Coord.MGRSConversionError");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return new MGRSCoord(Angle.fromRadians(converter.getLatitude()),Angle.fromRadians(converter.getLongitude()),MGRSString);}  }
class C{  public void record(DefaultData dataToRecord){  if (storageRecorder.isRecordingOn() && canWriteMore()) {    storageRecorder.record(dataToRecord);  } else   if (storageRecorder.isRecordingOn() && !canWriteMore()) {    try {      stopRecording();    } catch (    Exception e) {      log.warn("Exception occurred trying to automatically stop the recording due to the hard disk space limitation warning.",e);    }  }}  }
class C{  protected Expression gt(int opPos) throws TransformerException {  return compileOperation(new Gt(),opPos);}  }
class C{  @Deprecated public static void debug(Object msg){  X.error(debugPrefix() + msg);}  }
class C{  public boolean userHasGivenACL(StorageOSUser user,URI projectId,ACL... acls){  if (_disabler != null) {    return true;  }  Set<String> projectAcls=getProjectACLsForUser(user,projectId,false);  for (  ACL acl : acls) {    if (acl.equals(ACL.ANY) && !projectAcls.isEmpty()) {      return true;    }    if (projectAcls.contains(acl.toString())) {      return true;    }  }  return false;}  }
class C{  private void loadTableInfo(){  log.config("");  if (m_sql == null)   return;  loading=true;  String sql=m_sql;  int Account_ID=((Integer)fieldAccount.getValue()).intValue();  if (Account_ID != 0)   sql+=" AND fa.Account_ID=?";  if (((Integer)fieldAcctSchema.getValue()) > 0)   sql+=" AND fa.C_AcctSchema_ID = ?";  sql+=" AND ((SELECT SUM(f.amtacctdr-f.amtacctcr) FROM Fact_Reconciliation rec " + " INNER JOIN Fact_Acct f ON (f.Fact_Acct_ID = rec.Fact_Acct_ID) " + " WHERE r.MatchCode=rec.MatchCode) ";  if (isReconciled.isSelected())   sql+="= 0) "; else   sql+="<> 0 OR r.MatchCode IS NULL) ";  if (fieldBPartner.getValue() != null)   sql+=" AND fa.C_BPartner_ID = ?";  if (fieldProduct.getValue() != null)   sql+=" AND fa.M_Product_ID = ?";  if (fieldDateAcct.getValue() != null)   sql+=" AND fa.DateAcct >= ?";  if (fieldDateAcct2.getValue() != null)   sql+=" AND fa.DateAcct <= ?";  sql+=" ORDER BY 13,4,3,5";  log.finest(sql + "Account_ID =" + Account_ID);  try {    int index=1;    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(index++,m_AD_Client_ID);    pstmt.setInt(index++,(Integer)fieldAccount.getValue());    if (((Integer)fieldAcctSchema.getValue()) > 0)     pstmt.setInt(index++,(Integer)fieldAcctSchema.getValue());    if (fieldBPartner.getValue() != null)     pstmt.setInt(index++,(Integer)fieldBPartner.getValue());    if (fieldProduct.getValue() != null)     pstmt.setInt(index++,(Integer)fieldProduct.getValue());    if (fieldDateAcct.getValue() != null)     pstmt.setTimestamp(index++,(Timestamp)fieldDateAcct.getValue());    if (fieldDateAcct2.getValue() != null)     pstmt.setTimestamp(index++,(Timestamp)fieldDateAcct2.getValue());    ResultSet rs=pstmt.executeQuery();    miniTable.loadTable(rs);    rs.close();    pstmt.close();    log.log(Level.FINE,sql);  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  loading=false;  calculateSelection();}  }
class C{  public void copy(int ioffset,int joffset,MathArray array){  for (int i=0; (i < (rows + joffset) || i < array.rows); i++) {    for (int j=0; (j < (columns + ioffset) || j < array.columns); j++) {      MathSequence component=array.getArgument(i,j);      component=component.copy();      setArgument(i + ioffset,j + joffset,component);    }  }}  }
class C{  public ByteString toByteString(){  try {    return impl == null ? ByteString.EMPTY : impl.toByteString();  }  finally {    impl=null;  }}  }
class C{  private static double precisionScaleFactor(Geometry g,double distance,int maxPrecisionDigits){  Envelope env=g.getEnvelopeInternal();  double envMax=MathUtil.max(Math.abs(env.getMaxX()),Math.abs(env.getMaxY()),Math.abs(env.getMinX()),Math.abs(env.getMinY()));  double expandByDistance=distance > 0.0 ? distance : 0.0;  double bufEnvMax=envMax + 2 * expandByDistance;  int bufEnvPrecisionDigits=(int)(Math.log(bufEnvMax) / Math.log(10) + 1.0);  int minUnitLog10=maxPrecisionDigits - bufEnvPrecisionDigits;  double scaleFactor=Math.pow(10.0,minUnitLog10);  return scaleFactor;}  }
class C{  public List<Integer> emit(String streamId,List<Object> tuple){  return emit(streamId,tuple,null);}  }
class C{  public static void show(final JFrame parent,final Iterable<Pair<RelocatedAddress,Integer>> failedAddresses){  final CBreakpointRemovalDialog dialog=new CBreakpointRemovalDialog(parent,failedAddresses);  GuiHelper.centerChildToParent(parent,dialog,true);  dialog.setVisible(true);}  }
class C{  public void insert(Instruction inst){  Operator opr=inst.operator();  Operand[] ops=null;  LocationOperand location=null;switch (inst.operator().format) {case InstructionFormat.GetField_format:    if (VM.VerifyAssertions)     VM._assert(doMemory);  ops=new Operand[]{GetField.getRef(inst)};location=GetField.getLocation(inst);break;case InstructionFormat.GetStatic_format:if (VM.VerifyAssertions) VM._assert(doMemory);location=GetStatic.getLocation(inst);break;case InstructionFormat.PutField_format:if (VM.VerifyAssertions) VM._assert(doMemory);ops=new Operand[]{PutField.getRef(inst)};location=PutField.getLocation(inst);break;case InstructionFormat.PutStatic_format:if (VM.VerifyAssertions) VM._assert(doMemory);location=PutStatic.getLocation(inst);break;case InstructionFormat.Unary_format:ops=new Operand[]{Unary.getVal(inst)};break;case InstructionFormat.GuardedUnary_format:ops=new Operand[]{GuardedUnary.getVal(inst)};break;case InstructionFormat.Binary_format:ops=new Operand[]{Binary.getVal1(inst),Binary.getVal2(inst)};break;case InstructionFormat.GuardedBinary_format:ops=new Operand[]{GuardedBinary.getVal1(inst),GuardedBinary.getVal2(inst)};break;case InstructionFormat.Move_format:ops=new Operand[]{Move.getVal(inst)};break;case InstructionFormat.NullCheck_format:ops=new Operand[]{NullCheck.getRef(inst)};break;case InstructionFormat.ZeroCheck_format:ops=new Operand[]{ZeroCheck.getValue(inst)};break;case InstructionFormat.BoundsCheck_format:ops=new Operand[]{BoundsCheck.getRef(inst),BoundsCheck.getIndex(inst)};break;case InstructionFormat.TrapIf_format:ops=new Operand[]{TrapIf.getVal1(inst),TrapIf.getVal2(inst),TrapIf.getTCode(inst)};break;case InstructionFormat.TypeCheck_format:ops=new Operand[]{TypeCheck.getRef(inst),TypeCheck.getType(inst)};break;case InstructionFormat.InstanceOf_format:ops=new Operand[]{InstanceOf.getRef(inst),InstanceOf.getType(inst)};break;case InstructionFormat.Call_format:int numParams=Call.getNumberOfParams(inst);ops=new Operand[numParams + 2];ops[0]=Call.getAddress(inst);ops[1]=Call.getMethod(inst);for (int i=0; i < numParams; i++) {ops[i + 2]=Call.getParam(inst,i);}break;default :throw new OptimizingCompilerException("Unsupported type " + inst);}AvailableExpression ae=new AvailableExpression(inst,opr,ops,location,null);cache.add(ae);}  }
class C{  public synchronized void lineTo(float x,float y){  checkMoveTo();  path.lineTo(x,y);  makeRoom(2);  types[numSeg++]=PathIterator.SEG_LINETO;  cx=values[numVals++]=x;  cy=values[numVals++]=y;}  }
class C{  public boolean hasOriginalVideo(){  return hasExtension(GphotoOriginalVideo.class);}  }
class C{  public static InlineDecision guardedYES(RVMMethod[] targets,byte[] guards,String reason){  return new InlineDecision(targets,guards,Code.GUARDED_YES,reason);}  }
class C{  Vector processQNAMES(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {  StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");  int nQNames=tokenizer.countTokens();  Vector qnames=new Vector(nQNames);  for (int i=0; i < nQNames; i++) {    qnames.addElement(new QName(tokenizer.nextToken(),handler));  }  return qnames;}  }
class C{  private static void initSessionFc(){  sessionFc=new JFileChooser();  sessionFc.setMultiSelectionEnabled(true);  sessionFc.setCurrentDirectory(PrefManager.get().getSelectedPath());  if ((PrefManager.get().getPreferredSizeFileChooser().height > 0)) {    sessionFc.setPreferredSize(PrefManager.get().getPreferredSizeFileChooser());  }  sessionFc.setFileFilter(getSessionFilter());  sessionFc.setSelectedFile(null);}  }
class C{  private void updateTrackPowerStatus(){  LnTrackStatusUpdateThread thread=new LnTrackStatusUpdateThread(tc);  thread.start();}  }
class C{  public boolean isAccelerated(){  return accelerated;}  }
class C{  public void updateQueuingTime(){  this.queuingTime=this.enteredPerson.getLinkEnterTime() + availableLinkSpace / Math.min(this.enteredPerson.getLink().getFreespeed(),MixedTrafficVehiclesUtils.getSpeed(this.enteredPerson.getLegMode()));}  }
class C{  public static String fromTag(StringTag tag){  return String.valueOf(MojangsonToken.STRING_QUOTES) + tag.getValue() + MojangsonToken.STRING_QUOTES;}  }
class C{  protected int calculateBreakPosition(int p0,int p1){  int p;  Segment segment=SegmentCache.getSharedSegment();  loadText(segment,p0,p1);  int currentWidth=getWidth();  if (wordWrap) {    p=p0 + Utilities.getBreakLocation(segment,metrics,tabBase,tabBase + currentWidth,this,p0);  } else {    p=p0 + Utilities.getTabbedTextOffset(segment,metrics,tabBase,tabBase + currentWidth,this,p0,false);  }  SegmentCache.releaseSharedSegment(segment);  return p;}  }
class C{  public OperatorAnnotation(final String comment,final AnnotationStyle style,final Operator attachedTo,final boolean wasResized,final boolean wasColored,final double x,final double y,final double width,final double height){  super(comment,style,wasResized,wasColored,new Rectangle2D.Double(x,y,width,height));  if (attachedTo == null) {    throw new IllegalArgumentException("attachedTo must not be null!");  }  this.attachedTo=attachedTo;}  }
class C{  private void createRasterFrameBufferObject(){  this.fbo=glGenFramebuffers();  this.depthBuffer=glGenRenderbuffers();  glBindFramebuffer(GL_FRAMEBUFFER,fbo);  IntBuffer renderBuffers=BufferUtils.createIntBuffer(2).put(GL_COLOR_ATTACHMENT0).put(GL_COLOR_ATTACHMENT1);  renderBuffers.flip();  glDrawBuffers(renderBuffers);  glBindRenderbuffer(GL_RENDERBUFFER,depthBuffer);  glRenderbufferStorage(GL_RENDERBUFFER,GL_DEPTH_COMPONENT,width,height);  glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT0,GL_TEXTURE_2D,positionTexture,0);  glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT1,GL_TEXTURE_2D,normalTexture,0);  glFramebufferRenderbuffer(GL_FRAMEBUFFER,GL_DEPTH_ATTACHMENT,GL_RENDERBUFFER,depthBuffer);  int fboStatus=glCheckFramebufferStatus(GL_FRAMEBUFFER);  if (fboStatus != GL_FRAMEBUFFER_COMPLETE) {    throw new AssertionError("Could not create FBO: " + fboStatus);  }  glBindFramebuffer(GL_FRAMEBUFFER,0);  glBindRenderbuffer(GL_RENDERBUFFER,0);}  }
class C{  private boolean allocateInvoice(){  BigDecimal allocationAmt=getPayAmt();  if (getOverUnderAmt().signum() < 0 && getPayAmt().signum() > 0)   allocationAmt=allocationAmt.add(getOverUnderAmt());  MAllocationHdr alloc=new MAllocationHdr(getCtx(),false,getDateTrx(),getC_Currency_ID(),Msg.translate(getCtx(),"C_Payment_ID") + ": " + getDocumentNo()+ " [1]",get_TrxName());  alloc.setAD_Org_ID(getAD_Org_ID());  alloc.setDateAcct(getDateAcct());  alloc.saveEx();  MAllocationLine aLine=null;  if (isReceipt())   aLine=new MAllocationLine(alloc,allocationAmt,getDiscountAmt(),getWriteOffAmt(),getOverUnderAmt()); else   aLine=new MAllocationLine(alloc,allocationAmt.negate(),getDiscountAmt().negate(),getWriteOffAmt().negate(),getOverUnderAmt().negate());  aLine.setDocInfo(getC_BPartner_ID(),0,getC_Invoice_ID());  aLine.setC_Payment_ID(getC_Payment_ID());  aLine.saveEx(get_TrxName());  alloc.processIt(DocAction.ACTION_Complete);  alloc.saveEx(get_TrxName());  m_processMsg="@C_AllocationHdr_ID@: " + alloc.getDocumentNo();  int C_Project_ID=DB.getSQLValue(get_TrxName(),"SELECT MAX(C_Project_ID) FROM C_Invoice WHERE C_Invoice_ID=?",getC_Invoice_ID());  if (C_Project_ID > 0 && getC_Project_ID() == 0)   setC_Project_ID(C_Project_ID); else   if (C_Project_ID > 0 && getC_Project_ID() > 0 && C_Project_ID != getC_Project_ID())   log.warning("Invoice C_Project_ID=" + C_Project_ID + " <> Payment C_Project_ID="+ getC_Project_ID());  return true;}  }
class C{  protected final void readType1FontFile(final byte[] content) throws Exception {  LogWriter.writeLog("Embedded Type1 font used " + getBaseFontName());  final BufferedReader br=new BufferedReader(new StringReader(new String(content)));  String line;  while (true) {    line=br.readLine();    if (line == null) {      break;    }    if (line.startsWith("/Encoding 256 array")) {      readDiffEncoding(br);    } else     if (line.startsWith("/lenIV")) {      final StringTokenizer vals=new StringTokenizer(line);      vals.nextToken();      skipBytes=Integer.parseInt(vals.nextToken());    } else     if (line.contains("/FontMatrix")) {      int startP;      final int endP;      String values="";      startP=line.indexOf('[');      if (startP != -1) {        endP=line.indexOf(']');        values=line.substring(startP + 1,endP);      } else {        startP=line.indexOf('{');        if (startP != -1) {          endP=line.indexOf('}');          values=line.substring(startP + 1,endP);        }      }      final StringTokenizer matrixValues=new StringTokenizer(values);      for (int i=0; i < 6; i++) {        FontMatrix[i]=Double.parseDouble(matrixValues.nextToken());      }    }  }  if (br != null) {    try {      br.close();    } catch (    final Exception e) {      LogWriter.writeLog("Exception " + e + " closing stream");    }  }  int glyphCount=0;  if (this.renderPage) {    glyphCount=readEncodedContent(content);  }  this.glyphs.setGlyphCount(glyphCount);  if (!renderPage || glyphCount > 0) {    isFontEmbedded=true;  }  glyphs.setFontEmbedded(true);}  }
class C{  public void open(){  open(new Config());}  }
class C{  public void handleMessageEvent(StunMessageEvent e){  if (!turnCandidateHarvest.hostCandidate.getTransportAddress().equals(e.getLocalAddress()))   return;  if (!turnCandidateHarvest.harvester.stunServer.equals(e.getRemoteAddress()))   return;  Message message=e.getMessage();  char messageType=message.getMessageType();  if (messageType != Message.DATA_INDICATION)   return;  XorPeerAddressAttribute peerAddressAttribute=(XorPeerAddressAttribute)message.getAttribute(Attribute.XOR_PEER_ADDRESS);  if (peerAddressAttribute == null)   return;  DataAttribute dataAttribute=(DataAttribute)message.getAttribute(Attribute.DATA);  if (dataAttribute == null)   return;  TransportAddress peerAddress=peerAddressAttribute.getAddress(message.getTransactionID());  if (peerAddress == null)   return;  byte[] data=dataAttribute.getData();  if (data == null)   return;  DatagramPacket packetToReceive;  try {    packetToReceive=new DatagramPacket(data,0,data.length,peerAddress);  } catch (  Throwable t) {    if (t instanceof SocketException) {      packetToReceive=null;    } else     if (t instanceof Error) {      throw (Error)t;    } else     if (t instanceof RuntimeException) {      throw (RuntimeException)t;    } else {      if (t instanceof InterruptedException) {        Thread.currentThread().interrupt();      }      packetToReceive=null;    }  }  if (packetToReceive != null) {synchronized (packetsToReceive) {      packetsToReceive.add(packetToReceive);      packetsToReceive.notifyAll();    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.540 -0400",hash_original_method="3FFD29AD715D9C39F6ED957689008AA1",hash_generated_method="78FF9BF70A37451F69D511DD8ED1A7F0") public static boolean equals(String filename1,String filename2){  return equals(filename1,filename2,false,IOCase.SENSITIVE);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void printTo(Appendable appendable,ReadablePartial partial) throws IOException {  appendable.append(print(partial));}  }
class C{  protected VectorApproximation calculateFullApproximation(DBID id,V dv){  int[] approximation=new int[dv.getDimensionality()];  for (int d=0; d < splitPartitions.length; d++) {    double[] split=daFiles.get(d).getSplitPositions();    final double val=dv.doubleValue(d);    final int lastBorderIndex=split.length - 1;    if (val < split[0]) {      approximation[d]=0;      if (id != null) {        LOG.warning("Vector outside of VAFile grid!");      }    } else     if (val > split[lastBorderIndex]) {      approximation[d]=lastBorderIndex - 1;      if (id != null) {        LOG.warning("Vector outside of VAFile grid!");      }    } else {      int pos=Arrays.binarySearch(split,val);      pos=(pos >= 0) ? pos : ((-pos) - 2);      approximation[d]=pos;    }  }  return new VectorApproximation(id,approximation);}  }
class C{  public int compareTo(LogIndexEntry o){  if (this.startSeqno < o.startSeqno)   return -1; else   if (this.startSeqno == o.startSeqno)   return 0; else   return 1;}  }
class C{  @Override public ShardResponse takeCompletedIncludingErrors(){  return take(false);}  }
class C{  public Boolean isPowerOnWhenOpened(){  return powerOnWhenOpened;}  }
class C{  private boolean isWifiSupported(){  return ((RadioInfo.getSupportedWAFs() & RadioInfo.WAF_WLAN) > 0);}  }
class C{  public LicenseException(String message){  super(message);}  }
class C{  protected String downloadUrl(String myurl) throws IOException {  InputStream is=null;  try {    URL url=new URL(myurl);    HttpURLConnection conn=(HttpURLConnection)url.openConnection();    conn.setReadTimeout(10000);    conn.setConnectTimeout(15000);    conn.setRequestMethod("GET");    conn.setDoInput(true);    conn.connect();    int response=conn.getResponseCode();    if (!isValidHeader(conn)) {      Log.d(TAG,"Santa communication failure.");      return null;    } else     if (response != 200) {      Log.d(TAG,"Santa communication failure " + response);      return null;    } else {      is=conn.getInputStream();      return read(is).toString();    }  }  finally {    if (is != null) {      is.close();    }  }}  }
class C{  @Transient public boolean isDirty(){  for (  CodeAttribute item : this.getCodeAttribute()) {    if (item.isDirty())     return true;  }  return super.isDirty();}  }
class C{  public String run(String scriptName,String argument) throws ResourceException, ScriptException {  Binding binding=new Binding();  binding.setVariable("arg",argument);  Object result=run(scriptName,binding);  return result == null ? "" : result.toString();}  }
class C{  public AbstractEmptyMapIterator(){  super();}  }
class C{  @Override public void drawDomainGridLine(Graphics2D g2,XYPlot plot,ValueAxis axis,Rectangle2D dataArea,double value){  Range range=axis.getRange();  if (!range.contains(value)) {    return;  }  PlotOrientation orientation=plot.getOrientation();  double v=axis.valueToJava2D(value,dataArea,plot.getDomainAxisEdge());  Line2D line=null;  if (orientation == PlotOrientation.HORIZONTAL) {    line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);  } else   if (orientation == PlotOrientation.VERTICAL) {    line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());  }  Paint paint=plot.getDomainGridlinePaint();  Stroke stroke=plot.getDomainGridlineStroke();  g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT);  g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);  Object saved=g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);  g2.draw(line);  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,saved);}  }
class C{  public static byte[] accDecoderPktOpsModeLegacy(int number,int cvNum,int data){  int aBits=(number - 1) >> 2;  aBits+=1;  return NmraPacket.accDecPktOpsModeLegacy(aBits,cvNum,data);}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  public static File createEmptyZipFile(String prefix){  try {    return File.createTempFile(prefix,".zip");  } catch (  final IOException e) {    throw new RuntimeException(MSGS.format(Messages.ERROR_CREATING_ZIP_1,prefix + ".zip"),e);  }}  }
class C{  public void removeFieldCamera(FieldCamera fieldCamera){  if (layerManager.removeFieldCamera(fieldCamera)) {    LayerEffects layerEffects=layerManager.getLayerEffects();    layerEffects.setEnabled(true);    quadTree.setRenderState(layerEffects);    quadTree.markDirty(DirtyType.RenderState);  }}  }
class C{  public Period normalizedStandard(PeriodType type){  long millis=getMillis();  millis+=(((long)getSeconds()) * ((long)DateTimeConstants.MILLIS_PER_SECOND));  millis+=(((long)getMinutes()) * ((long)DateTimeConstants.MILLIS_PER_MINUTE));  millis+=(((long)getHours()) * ((long)DateTimeConstants.MILLIS_PER_HOUR));  millis+=(((long)getDays()) * ((long)DateTimeConstants.MILLIS_PER_DAY));  millis+=(((long)getWeeks()) * ((long)DateTimeConstants.MILLIS_PER_WEEK));  Period result=new Period(millis,DateTimeUtils.getPeriodType(type),ISOChronology.getInstanceUTC());  int years=getYears();  int months=getMonths();  if (years != 0 || months != 0) {    years=FieldUtils.safeAdd(years,months / 12);    months=months % 12;    if (years != 0) {      result=result.withYears(years);    }    if (months != 0) {      result=result.withMonths(months);    }  }  return result;}  }
class C{  public static void attribute(String name,long value){  openAttribute(name);  Log.write(value);  closeAttribute();}  }
class C{  @Override public void releaseView(){  mView=null;}  }
class C{  public static List<PythonInstallationDirectory> whereArePythonInterpreters(){  final List<PythonInstallationDirectory> paths=new ArrayList<>();  for (  final SuiteExecutor interpreter : EnumSet.allOf(SuiteExecutor.class)) {    paths.addAll(whereIsPythonInterpreter(interpreter));  }  return paths;}  }
class C{  public DoubleRangeValidatorTestCase(String name){  super(name);}  }
class C{  public static int crc(byte[] bytes,int start,int end,int initialValue){  for (int i=start; i < end; i++) {    initialValue=(initialValue << 8) ^ CRC32_BYTES_MSBF[((initialValue >>> 24) ^ (bytes[i] & 0xFF)) & 0xFF];  }  return initialValue;}  }
class C{  public boolean canContain(Element other){  return theType.canContain(other.theType);}  }
class C{  public void insert(RatTerm t,int index){  underlying_terms.add(index,t);  terms=(RatTerm[])underlying_terms.toArray(new RatTerm[]{});}  }
class C{  private static int type(final ClassWriter cw,final String desc){  String t;  int index=desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0;switch (desc.charAt(index)) {case 'V':    return 0;case 'Z':case 'C':case 'B':case 'S':case 'I':  return INTEGER;case 'F':return FLOAT;case 'J':return LONG;case 'D':return DOUBLE;case 'L':t=desc.substring(index + 1,desc.length() - 1);return OBJECT | cw.addType(t);default :int data;int dims=index + 1;while (desc.charAt(dims) == '[') {++dims;}switch (desc.charAt(dims)) {case 'Z':data=BOOLEAN;break;case 'C':data=CHAR;break;case 'B':data=BYTE;break;case 'S':data=SHORT;break;case 'I':data=INTEGER;break;case 'F':data=FLOAT;break;case 'J':data=LONG;break;case 'D':data=DOUBLE;break;default :t=desc.substring(dims + 1,desc.length() - 1);data=OBJECT | cw.addType(t);}return (dims - index) << 28 | data;}}  }
class C{  private ObjectName createXsltProcessor() throws javax.management.JMException {  ObjectName objName=getXsltProcessorName();  if (getMBeanServer().isRegistered(objName)) {    logger.info(LocalizedMessage.create(LocalizedStrings.AgentImpl_XSLTPROCESSOR_ALREADY_REGISTERED_AS__0,objName));    return objName;  }  getMBeanServer().registerMBean(new mx4j.tools.adaptor.http.XSLTProcessor(),objName);  return objName;}  }
class C{  private void doPopup(){  if (findPopup != null) {    JTextComponent c=getComponent();    findPopup.pack();    findPopup.show(c,0,c.getHeight() - 1);    c.requestFocusInWindow();  }}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length < 2) {    System.err.println("Usage: PluginRepository pluginId className [arg1 arg2 ...]");    return;  }  Configuration conf=NutchConfiguration.create();  PluginRepository repo=new PluginRepository(conf);  PluginDescriptor d=repo.getPluginDescriptor(args[0]);  if (d == null) {    System.err.println("Plugin '" + args[0] + "' not present or inactive.");    return;  }  ClassLoader cl=d.getClassLoader();  Class clazz=null;  try {    clazz=Class.forName(args[1],true,cl);  } catch (  Exception e) {    System.err.println("Could not load the class '" + args[1] + ": "+ e.getMessage());    return;  }  Method m=null;  try {    m=clazz.getMethod("main",new Class[]{args.getClass()});  } catch (  Exception e) {    System.err.println("Could not find the 'main(String[])' method in class " + args[1] + ": "+ e.getMessage());    return;  }  String[] subargs=new String[args.length - 2];  System.arraycopy(args,2,subargs,0,subargs.length);  m.invoke(null,new Object[]{subargs});}  }
class C{  private synchronized void handleServiceConnectionError(LicenseValidator validator){  mPolicy.processServerResponse(Policy.RETRY,null);  if (mPolicy.allowAccess()) {    validator.getCallback().allow(Policy.RETRY);  } else {    validator.getCallback().dontAllow(Policy.RETRY);  }}  }
class C{  private String mapCollectionName(String collectionName,boolean dest){  if ((collectionRules.size() == 0) && (StringUtils.isBlank(defaultCollectionAppend))) {    return collectionName;  }  for (  String[] rule : collectionRules) {    String match=(dest) ? rule[0] : rule[1];    String replace=(dest) ? rule[1] : rule[0];    if (collectionName.contains(match)) {      return collectionName.replace(match,replace);    }  }  if (dest) {    return collectionName + defaultCollectionAppend;  } else {    return collectionName.replace(defaultCollectionAppend,"");  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  protected void addChildTo(ModelRenderer child,ModelRenderer parent){  float distance=(float)Math.sqrt(Math.pow((child.rotationPointZ - parent.rotationPointZ),2) + Math.pow((child.rotationPointY - parent.rotationPointY),2));  float oldRotateAngleX=parent.rotateAngleX;  float parentToChildAngle=(float)Math.atan((child.rotationPointZ - parent.rotationPointZ) / (child.rotationPointY - parent.rotationPointY));  float childRelativeRotation=parentToChildAngle - parent.rotateAngleX;  float newRotationPointY=(float)(distance * (Math.cos(childRelativeRotation)));  float newRotationPointZ=(float)(distance * (Math.sin(childRelativeRotation)));  parent.rotateAngleX=0F;  child.setRotationPoint(child.rotationPointX - parent.rotationPointX,newRotationPointY,newRotationPointZ);  parent.addChild(child);  parent.rotateAngleX=oldRotateAngleX;  child.rotateAngleX-=parent.rotateAngleX;  child.rotateAngleY-=parent.rotateAngleY;  child.rotateAngleZ-=parent.rotateAngleZ;}  }
class C{  public void openProject(Project prj){  conversation.begin();  doOpenProject(prj);}  }
class C{  public final synchronized void queueSearchRequest(SearchRequest sr){  killOldEngine(sr.engine);  stopSearch();  if (sr.ponderMove != null)   sr.mList.add(sr.ponderMove);  long[] posHashList=new long[sr.mList.size() + 1];  int posHashListSize=0;  Position p=new Position(sr.prevPos);  UndoInfo ui=new UndoInfo();  for (int i=0; i < sr.mList.size(); i++) {    posHashList[posHashListSize++]=p.zobristHash();    p.makeMove(sr.mList.get(i),ui);  }  if (sr.ponderMove == null) {    Move bookMove=book.getBookMove(sr.currPos);    if (bookMove != null) {      if (canClaimDraw(sr.currPos,posHashList,posHashListSize,bookMove) == "") {        listener.notifySearchResult(sr.searchId,TextIO.moveToString(sr.currPos,bookMove,false,false),null);        return;      }    }    ArrayList<Move> moves=movesToSearch(sr);    if (moves.size() == 0) {      listener.notifySearchResult(sr.searchId,"",null);      return;    }    if (moves.size() == 1) {      Move bestMove=moves.get(0);      if (canClaimDraw(sr.currPos,posHashList,posHashListSize,bestMove) == "") {        listener.notifySearchResult(sr.searchId,TextIO.moveToUCIString(bestMove),null);        return;      }    }  }  sr.posHashList=posHashList;  sr.posHashListSize=posHashListSize;  searchRequest=sr;  handleQueue();}  }
class C{  public <V>Map<String,V> serialise(Function<Object,V> serialiser){  return schema.serialise(serialiser,values);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public PartialLoadException(final CPartialLoadException exception){  super(exception);  m_module=exception.getModule().getConfiguration().getName();}  }
class C{  public void addOperatorAnnotation(final OperatorAnnotation anno){  if (anno == null) {    throw new IllegalArgumentException("anno must not be null!");  }  model.addOperatorAnnotation(anno);  setSelected(anno);  fireProcessUpdate(anno);  model.fireAnnotationMoved(anno);}  }
class C{  public static float memToPhys(long memVal,int pidNum){  float result=0;  Pid currPid=getPid(pidNum);  if (currPid != null) {    long mskdVal=memVal & valueMask[currPid.bytes];    result=Conversions.memToPhys(mskdVal,currPid.cnv);  }  return (result);}  }
class C{  public static <T>Iterator<T> unique(Iterator<T> self){  return uniqueItems(new IteratorIterableAdapter<T>(self)).listIterator();}  }
class C{  public static void addCrystallization(String input,String output1,String output2,float xp){  if (!OreDictionary.getOres(output1).isEmpty() && !OreDictionary.getOres(output2).isEmpty())   for (  ItemStack stack : OreDictionary.getOres(input))   addCrystallization(stack,OreDictionary.getOres(output1).get(0),OreDictionary.getOres(output2).get(0),xp);}  }
class C{  public boolean hasBatchInterrupted(){  return hasExtension(BatchInterrupted.class);}  }
class C{  public BufferUnderflowException(){  super();}  }
class C{  public RemoteCacheStatistics(){}  }
class C{  public DhcpServiceApi(RestClient restClient){  super(restClient);}  }
class C{  public static String toString(AbstractMap self){  return toMapString(self);}  }
class C{  public void printAttlistStart(char[] space,char[] name) throws IOException {  writer.write("<!ATTLIST");  printSpaces(space,false);  writer.write(name);}  }
class C{  @Override public void onCanceled(List<T> datas){  super.onCanceled(datas);  onReleaseResources(datas);}  }
class C{  public void init(){  _offset=0;  if (_tempBuffer == null) {    _tempBuffer=TempBuffer.create();    _buffer=_tempBuffer.buffer();    _bufferEnd=_buffer.length;  }}  }
class C{  public <T>T read(Class<? extends T> type,String source,boolean strict) throws Exception {  return read(type,new StringReader(source),strict);}  }
class C{  public boolean equals(Object other){  if (this == other)   return true;  if (!(other instanceof PKCS10Attributes))   return false;  Collection<PKCS10Attribute> othersAttribs=((PKCS10Attributes)other).getAttributes();  PKCS10Attribute[] attrs=othersAttribs.toArray(new PKCS10Attribute[othersAttribs.size()]);  int len=attrs.length;  if (len != map.size())   return false;  PKCS10Attribute thisAttr, otherAttr;  String key=null;  for (int i=0; i < len; i++) {    otherAttr=attrs[i];    key=otherAttr.getAttributeId().toString();    if (key == null)     return false;    thisAttr=map.get(key);    if (thisAttr == null)     return false;    if (!thisAttr.equals(otherAttr))     return false;  }  return true;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DatatypePackage.OBJECT_PROPERTY_TYPE__TYPE:    if (resolve)     return getType();  return basicGetType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  boolean attemptStopAudio(){  MediaPlayer mediaPlayer=MediaPlayer.instance();  mediaPlayer.stop();  return true;}  }
class C{  private void addRow(Dimension dim,int rowWidth,int rowHeight){  dim.width=Math.max(dim.width,rowWidth);  if (dim.height > 0) {    dim.height+=getVgap();  }  dim.height+=rowHeight;}  }
class C{  public Arrow(double arrowTailRadius,Double3D startPoint,Double3D endPoint,String stLabel,String endLabel,Appearance appearance){  Vector3d stPt=new Vector3d(startPoint.x,startPoint.y,startPoint.z);  Vector3d endPt=new Vector3d(endPoint.x,endPoint.y,endPoint.z);  Vector3d v=new Vector3d(stPt);  v.negate();  v.add(new Vector3d(endPt));  float arrowLen=(float)v.length();  float arrowHeadLen=5.0f * (float)arrowTailRadius;  float arrowHeadMaxRadius=3.0f * (float)arrowTailRadius;  float cylinderLen=arrowLen - arrowHeadLen;  if (cylinderLen < 0) {    arrowHeadLen=arrowLen / 16;    cylinderLen=arrowLen - arrowHeadLen;  }  Appearance caAppearance=appearance;  if (caAppearance == null) {    caAppearance=SimplePortrayal3D.appearanceForColors(DEFAULT_ARROW_COLOR,null,DEFAULT_ARROW_COLOR,DEFAULT_ARROW_COLOR,1.0f,1.0f);  }  Transform3D caTransform=new Transform3D();  caTransform.setTranslation(stPt);  Vector3d oy=new Vector3d(0,1,0);  Vector3d axis=new Vector3d();  axis.cross(oy,v);  if (axis.length() != 0) {    caTransform.setRotation(new AxisAngle4d(axis,Math.asin(axis.length() / v.length())));  }  caTransform.setTranslation(stPt);  this.setTransform(caTransform);  this.arrowTail=new Cylinder((float)arrowTailRadius,cylinderLen,caAppearance);  Transform3D arrowCylinderTransform=new Transform3D();  arrowCylinderTransform.set(new Vector3f(0,cylinderLen / 2,0));  TransformGroup arrowCylinderTransformGroup=new TransformGroup(arrowCylinderTransform);  arrowCylinderTransformGroup.addChild(this.arrowTail);  addChild(arrowCylinderTransformGroup);  Transform3D arrowHeadTransform=new Transform3D();  arrowHeadTransform.set(new Vector3f(0,cylinderLen,0));  TransformGroup arrowHeadTransformGroup=new TransformGroup(arrowHeadTransform);  this.arrowHead=new Cone(arrowHeadMaxRadius,arrowHeadLen,1,caAppearance);  arrowHeadTransformGroup.addChild(this.arrowHead);  this.addChild(arrowHeadTransformGroup);  if (stLabel != null) {    Text3D txt=new Text3D(DEFAULT_FONT3D,stLabel);    OrientedShape3D os3d=new OrientedShape3D(txt,caAppearance,OrientedShape3D.ROTATE_ABOUT_POINT,new Point3f(0,0,0));    Transform3D t=new Transform3D();    t.setScale(5 * (float)arrowTailRadius);    t.setTranslation(new Vector3f(0,-.1f,0));    TransformGroup stLabelTG=new TransformGroup(t);    stLabelTG.addChild(os3d);    this.addChild(stLabelTG);  }  if (endLabel != null) {    Text3D txt=new Text3D(DEFAULT_FONT3D,endLabel);    OrientedShape3D os3d=new OrientedShape3D(txt,caAppearance,OrientedShape3D.ROTATE_ABOUT_POINT,new Point3f(0,arrowLen,0));    Transform3D t=new Transform3D();    t.setScale(5 * (float)arrowTailRadius);    t.setTranslation(new Vector3f(0,arrowLen + .1f,0));    TransformGroup endLabelTG=new TransformGroup(t);    endLabelTG.addChild(os3d);    this.addChild(endLabelTG);  }}  }
class C{  private void updateMaterialsWithLights(){  for (  Object3D child : mChildren) {    updateChildMaterialWithLights(child);  }}  }
class C{  public void unlock(){  locked=false;  for (  ManagedObservable<?> managedObservable : groupMap.values()) {    managedObservable.unlock();  }}  }
class C{  public static Word fromLong(long val){  return new Word(val);}  }
class C{  public static int createHash(String val,Charset charset,MessageDigest digestFunction){  return createHash(val.getBytes(charset),digestFunction);}  }
class C{  public void testLoadsOfRules() throws IOException, ServletException, InvocationTargetException {  Log.setLevel("ERROR");  float bench=new BenchmarkRunner().establishBenchmark();  float timePerRule=bench * (float)0.0003;  System.out.println("using " + timePerRule + "ms per rule as the standard");  float testAmount=10000;  Conf conf=new Conf();  for (int i=0; i < 1000; i++) {    NormalRule rule=new NormalRule();    rule.setFrom("^/([a-z]+)/([0-9]+)/" + i + "/$");    rule.setTo("/blah/a/$2/");    conf.addRule(rule);  }  conf.initialise();  UrlRewriter urlRewriter=new UrlRewriter(conf);  MockRequest request=new MockRequest("/dir/999/45/");  urlRewriter.processRequest(request,response);  long timeStart=System.currentTimeMillis();  for (float i=0; i < testAmount; i++) {    urlRewriter.processRequest(request,response);    if (i % 500 == 0 && i > 0) {      System.out.println("avg so far " + ((System.currentTimeMillis() - timeStart) / i) + "ms per rule");    }  }  long took=System.currentTimeMillis() - timeStart;  System.out.println("took " + took + "ms "+ (took / testAmount)+ "ms  per rule");  assertTrue("should take less than " + timePerRule + "ms per rule",(took / testAmount) < timePerRule);}  }
class C{  public StddevProjectionExpression(Expression expression,boolean isDistinct){  this.distinct=isDistinct;  this.getChildren().add(expression);}  }
class C{  public void visitTree(JCTree tree){  throw new AssertionError();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:30.528 -0500",hash_original_method="E9E54F71CD8326C8AF2C780315CD689D",hash_generated_method="E55330C8EE6F8D117A9BF2110C3DAF64") private void adjustForTopFadingEdge(View childInSelectedRow,int topSelectionPixel,int bottomSelectionPixel){  if (childInSelectedRow.getTop() < topSelectionPixel) {    int spaceAbove=topSelectionPixel - childInSelectedRow.getTop();    int spaceBelow=bottomSelectionPixel - childInSelectedRow.getBottom();    int offset=Math.min(spaceAbove,spaceBelow);    offsetChildrenTopAndBottom(offset);  }}  }
class C{  public MutableInterval(){  super(0L,0L,null);}  }
class C{  public static NurbsCurve createFullCircleQuad7(Origin3D o,float r){  Vec4D[] cp=new Vec4D[7];  cp[0]=new Vec4D(o.xAxis.scale(r),1);  cp[3]=cp[0].getInvertedXYZ();  cp[6]=cp[0].copy();  cp[1]=new Vec4D(o.yAxis.add(o.xAxis).scaleSelf(r),0.5f);  cp[4]=cp[1].getInvertedXYZ();  cp[2]=new Vec4D(o.xAxis.getInverted().addSelf(o.yAxis).scaleSelf(r),0.5f);  cp[5]=cp[2].getInvertedXYZ();  for (int i=0; i < 7; i++) {    cp[i].addXYZSelf(o.origin);  }  float[] u={0,0,0,0.25f,0.5f,0.5f,0.75f,1,1,1};  return new BasicNurbsCurve(cp,u,2);}  }
class C{  public static String stringFor(int n){switch (n) {case CU_RESOURCE_TYPE_ARRAY:    return "CU_RESOURCE_TYPE_ARRAY";case CU_RESOURCE_TYPE_MIPMAPPED_ARRAY:  return "CU_RESOURCE_TYPE_MIPMAPPED_ARRAY";case CU_RESOURCE_TYPE_LINEAR:return "CU_RESOURCE_TYPE_LINEAR";case CU_RESOURCE_TYPE_PITCH2D:return "CU_RESOURCE_TYPE_PITCH2D";}return "INVALID CUresourcetype: " + n;}  }
class C{  public ActivateSessionResponse activate(UserIdentityToken identity,SignatureData identitySignature) throws ServiceResultException {  if (channel == null || identity == null)   throw new IllegalArgumentException("null arg");  final String policyId=identity.getPolicyId();  if (policyId != null) {    UserTokenPolicy userTokenPolicy=session.getEndpoint().findUserTokenPolicy(policyId);    if (userTokenPolicy == null)     throw new ServiceResultException("UserIdentityPolicy \"" + policyId + "\" is not supported by the given endpoint");  }  SignatureData clientSignature=null;  if (!MessageSecurityMode.None.equals(channel.getMessageSecurityMode())) {    SecurityPolicy securityPolicy=channel.getSecurityPolicy();    RSAPrivateKey signerKey=session.getClientPrivateKey().getPrivateKey();    SecurityAlgorithm algorithm=securityPolicy.getAsymmetricSignatureAlgorithm();    byte[] dataToSign=session.getServerCertificate().getEncoded();    if (session.getServerNonce() != null)     dataToSign=ByteBufferUtils.concatenate(dataToSign,session.getServerNonce());    clientSignature=new SignatureData(algorithm.getUri(),CryptoUtil.getCryptoProvider().signAsymm(signerKey,algorithm,dataToSign));  }  ActivateSessionRequest asreq=new ActivateSessionRequest();  asreq.setLocaleIds(client.getApplication().getLocaleIds());  asreq.setClientSoftwareCertificates(client.getApplication().getSoftwareCertificates());  asreq.setClientSignature(clientSignature);  asreq.setUserIdentityToken(ExtensionObject.binaryEncode(identity,client.getEncoderContext()));  asreq.setUserTokenSignature(identitySignature);  ActivateSessionResponse asres=ActivateSession(asreq);  session.serverNonce=asres.getServerNonce();  return asres;}  }
class C{  public void testTestResultsClick_showsLoadingDialog(){  mController.init();  mController.onAddTestResultsPressed();  verify(mMockUi).showFormLoadingDialog(true);}  }
class C{  public boolean equals(Object p_test){  if (p_test instanceof URI) {    URI testURI=(URI)p_test;    if (((m_scheme == null && testURI.m_scheme == null) || (m_scheme != null && testURI.m_scheme != null && m_scheme.equals(testURI.m_scheme))) && ((m_userinfo == null && testURI.m_userinfo == null) || (m_userinfo != null && testURI.m_userinfo != null && m_userinfo.equals(testURI.m_userinfo))) && ((m_host == null && testURI.m_host == null) || (m_host != null && testURI.m_host != null && m_host.equals(testURI.m_host)))&& m_port == testURI.m_port && ((m_path == null && testURI.m_path == null) || (m_path != null && testURI.m_path != null && m_path.equals(testURI.m_path))) && ((m_queryString == null && testURI.m_queryString == null) || (m_queryString != null && testURI.m_queryString != null && m_queryString.equals(testURI.m_queryString))) && ((m_fragment == null && testURI.m_fragment == null) || (m_fragment != null && testURI.m_fragment != null && m_fragment.equals(testURI.m_fragment)))) {      return true;    }  }  return false;}  }
class C{  public mxPartitionLayout(mxGraph graph,boolean horizontal){  this(graph,horizontal,0);}  }
class C{  @Override public boolean sendEntity(SendPacket entity,SendDelivery delivery){  int cursor=0;  int total=entity.getLength();  InputStream in=entity.getInputStream();  int count;  try {    while ((count=in.read(mOutBuffer)) != -1) {      mOut.write(mOutBuffer,0,count);      cursor+=count;      delivery.postSendProgress(entity,total,cursor);    }    return true;  } catch (  IOException e) {    e.printStackTrace();  } finally {    closeInputStream(in);  }  return false;}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    if (pos == count) {      return -1;    }    return buf[pos++];  }}  }
class C{  public void dpln(int debugType,String text){  if (outputTypeSet(debugType)) {    System.out.println(text);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static EncodedImage cloneOrNull(EncodedImage encodedImage){  return encodedImage != null ? encodedImage.cloneOrNull() : null;}  }
class C{  public static File write(File file,String contents) throws IOException {  com.google.common.io.Files.createParentDirs(file);  com.google.common.io.Files.write(contents,file,StandardCharsets.UTF_8);  return file;}  }
class C{  @Override public void launch(int id){  restartable(id).launch();}  }
class C{  @SuppressWarnings("unchecked") public static <T extends Number>T convertNumberToTargetClass(Number number,Class<T> targetClass) throws IllegalArgumentException {  Assert.notNull(number,"Number must not be null");  Assert.notNull(targetClass,"Target class must not be null");  if (targetClass.isInstance(number)) {    return (T)number;  } else   if (targetClass.equals(Byte.class)) {    long value=number.longValue();    if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {      raiseOverflowException(number,targetClass);    }    return (T)new Byte(number.byteValue());  } else   if (targetClass.equals(Short.class)) {    long value=number.longValue();    if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {      raiseOverflowException(number,targetClass);    }    return (T)new Short(number.shortValue());  } else   if (targetClass.equals(Integer.class)) {    long value=number.longValue();    if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {      raiseOverflowException(number,targetClass);    }    return (T)new Integer(number.intValue());  } else   if (targetClass.equals(Long.class)) {    BigInteger bigInt=null;    if (number instanceof BigInteger) {      bigInt=(BigInteger)number;    } else     if (number instanceof BigDecimal) {      bigInt=((BigDecimal)number).toBigInteger();    }    if (bigInt != null && (bigInt.compareTo(LONG_MIN) < 0 || bigInt.compareTo(LONG_MAX) > 0)) {      raiseOverflowException(number,targetClass);    }    return (T)new Long(number.longValue());  } else   if (targetClass.equals(BigInteger.class)) {    if (number instanceof BigDecimal) {      return (T)((BigDecimal)number).toBigInteger();    } else {      return (T)BigInteger.valueOf(number.longValue());    }  } else   if (targetClass.equals(Float.class)) {    return (T)new Float(number.floatValue());  } else   if (targetClass.equals(Double.class)) {    return (T)new Double(number.doubleValue());  } else   if (targetClass.equals(BigDecimal.class)) {    return (T)new BigDecimal(number.toString());  } else {    throw new IllegalArgumentException("Could not convert number [" + number + "] of type ["+ number.getClass().getName()+ "] to unknown target class ["+ targetClass.getName()+ "]");  }}  }
class C{  public boolean only_array_ref(){  return soot.PhaseOptions.getBoolean(options,"only-array-ref");}  }
class C{  public T casePort(Port object){  return null;}  }
class C{  protected void runUpload(Integer numOfThreads) throws Exception {  runUpload(numOfThreads,null,Boolean.FALSE);}  }
class C{  @Override public Object wrapKey(Object key,AbstractSession session){  return key;}  }
class C{  public float remove(double key){  float prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  public Mono<HandlerResult> applyExceptionHandler(Throwable failure){  return (hasExceptionHandler() ? this.exceptionHandler.apply(failure) : Mono.error(failure));}  }
class C{  public void insertBefore(final AbstractInsnNode location,final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  AbstractInsnNode ifirst=insns.first;  AbstractInsnNode ilast=insns.last;  AbstractInsnNode prev=location.prev;  if (prev == null) {    first=ifirst;  } else {    prev.next=ifirst;  }  location.prev=ilast;  ilast.next=location;  ifirst.prev=prev;  cache=null;  insns.removeAll(false);}  }
class C{  public void visitTableSwitchInsn(int min,int max,Label dflt,Label... labels){  if (mv != null) {    mv.visitTableSwitchInsn(min,max,dflt,labels);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.794 -0400",hash_original_method="F9B91C6A43A2457E469B64CA7EECF8B6",hash_generated_method="A326956E1EF7B621D8F57F47CD9B2A84") private void onRequestPairingConsent(String objectPath,int nativeData){  String address=checkPairingRequestAndGetAddress(objectPath,nativeData);  if (address == null)   return;  if (mBluetoothService.getBondState(address) == BluetoothDevice.BOND_BONDED) {    Message message=mHandler.obtainMessage(EVENT_PAIRING_CONSENT_DELAYED_ACCEPT);    message.obj=address;    mHandler.sendMessageDelayed(message,1500);    return;  }  mWakeLock.acquire();  Intent intent=new Intent(BluetoothDevice.ACTION_PAIRING_REQUEST);  intent.putExtra(BluetoothDevice.EXTRA_DEVICE,mAdapter.getRemoteDevice(address));  intent.putExtra(BluetoothDevice.EXTRA_PAIRING_VARIANT,BluetoothDevice.PAIRING_VARIANT_CONSENT);  mContext.sendBroadcast(intent,BLUETOOTH_ADMIN_PERM);  mWakeLock.release();  return;}  }
class C{  public Compressor(BitWriter bitwriter){  super();  this.bitwriter=bitwriter;}  }
class C{  public void addDivider(ArchiveTokenDivider div){  m_dividers.add(div);}  }
class C{  public void addLocalTempTable(Table table){  if (localTempTables == null) {    localTempTables=database.newStringMap();  }  if (localTempTables.get(table.getName()) != null) {    throw DbException.get(ErrorCode.TABLE_OR_VIEW_ALREADY_EXISTS_1,table.getSQL());  }  modificationId++;  localTempTables.put(table.getName(),table);}  }
class C{  static void processArgs(String[] args){  StringBuffer desc=new StringBuffer("java GenerateCharacter");  for (int j=0; j < args.length; ++j) {    desc.append(" " + args[j]);  }  for (int j=0; j < args.length; j++) {    if (args[j].equals("-verbose") || args[j].equals("-v"))     verbose=true; else     if (args[j].equals("-nobidi"))     nobidi=true; else     if (args[j].equals("-nomirror"))     nomirror=true; else     if (args[j].equals("-identifiers"))     identifiers=true; else     if (args[j].equals("-c"))     Csyntax=true; else     if (args[j].equals("-string"))     tableAsString=true; else     if (args[j].equals("-o")) {      if (j == args.length - 1) {        FAIL("File name missing after -o");      } else {        OutputFileName=args[++j];      }    } else     if (args[j].equals("-search")) {      if (j == args.length - 1)       FAIL("Bin count missing after -search"); else {        bins=Integer.parseInt(args[++j]);        if (bins < 1 || bins > 10)         FAIL("Bin count must be >= 1 and <= 10");      }    } else     if (args[j].equals("-template")) {      if (j == args.length - 1)       FAIL("File name missing after -template"); else       TemplateFileName=args[++j];    } else     if (args[j].equals("-spec")) {      if (j == args.length - 1) {        FAIL("File name missing after -spec");      } else {        UnicodeSpecFileName=args[++j];      }    } else     if (args[j].equals("-specialcasing")) {      if (j == args.length - 1) {        FAIL("File name missing after -specialcasing");      } else {        SpecialCasingFileName=args[++j];      }    } else     if (args[j].equals("-proplist")) {      if (j == args.length - 1) {        FAIL("File name missing after -proplist");      } else {        PropListFileName=args[++j];      }    } else     if (args[j].equals("-plane")) {      if (j == args.length - 1) {        FAIL("Plane number missing after -plane");      } else {        plane=Integer.parseInt(args[++j]);      }      if (plane > 0) {        bLatin1=false;      }    } else     if ("-usecharforbyte".equals(args[j])) {      useCharForByte=true;    } else     if (args[j].equals("-latin1")) {      bLatin1=true;      plane=0;    } else {      try {        int val=Integer.parseInt(args[j]);        if (val < 0 || val > 32)         FAIL("Incorrect bit field width: " + args[j]);        if (sizes == null)         sizes=new int[1]; else {          int[] newsizes=new int[sizes.length + 1];          System.arraycopy(sizes,0,newsizes,0,sizes.length);          sizes=newsizes;        }        sizes[sizes.length - 1]=val;      } catch (      NumberFormatException e) {        FAIL("Unknown switch: " + args[j]);      }    }  }  if (Csyntax && tableAsString) {    FAIL("Can't specify table as string with C syntax");  }  if (sizes == null) {    desc.append(" [");    if (identifiers) {      int[] newsizes={8,4,4};      desc.append("8 4 4]");      sizes=newsizes;    } else {      int[] newsizes={10,5,1};      desc.append("10 5 1]");      sizes=newsizes;    }  }  if (UnicodeSpecFileName == null) {    UnicodeSpecFileName=DefaultUnicodeSpecFileName;    desc.append(" [-spec " + UnicodeSpecFileName + ']');  }  if (SpecialCasingFileName == null) {    SpecialCasingFileName=DefaultSpecialCasingFileName;    desc.append(" [-specialcasing " + SpecialCasingFileName + ']');  }  if (PropListFileName == null) {    PropListFileName=DefaultPropListFileName;    desc.append(" [-proplist " + PropListFileName + ']');  }  if (TemplateFileName == null) {    TemplateFileName=(Csyntax ? DefaultCTemplateFileName : DefaultJavaTemplateFileName);    desc.append(" [-template " + TemplateFileName + ']');  }  if (OutputFileName == null) {    OutputFileName=(Csyntax ? DefaultCOutputFileName : DefaultJavaOutputFileName);    desc.append(" [-o " + OutputFileName + ']');  }  commentStart=(Csyntax ? "/*" : "//");  commentEnd=(Csyntax ? " */" : "");  commandLineDescription=desc.toString();}  }
class C{  private Vector<String> sortStatements(final Vector<String> statements){  final Vector<String> sortedStatements=new Vector<String>(1000,500);  int maxTries=statements.size();  int attempt=0;  while (statements.size() != 0 && attempt <= maxTries) {    final String statement=statements.firstElement();    try {      String[] stmts=statement.split(Table.STATEMENT_SEPARATOR);      for (int j=0; j < stmts.length; j++) {        if (!"".equals(stmts[j])) {          stmtdb1.executeUpdate(stmts[j].substring(0,stmts[j].lastIndexOf(';')));        }      }      sortedStatements.add(statement.replaceAll(Table.STATEMENT_SEPARATOR,""));      statements.remove(0);      maxTries=statements.size();      attempt=0;    } catch (    SQLException e) {      System.out.println(e.getMessage());      statements.remove(0);      statements.add(statement);    }    attempt++;  }  if (statements.size() != 0) {    for (int i=0; i < statements.size(); i++) {      m_unappliableStatements.add(statements.get(i));    }  }  return sortedStatements;}  }
class C{  public static void createTlds(String... tlds){  for (  String tld : tlds) {    createTld(tld,TldState.GENERAL_AVAILABILITY);  }}  }
class C{  private void sendMessages(RPEntity user){  if (publicMessage != null) {    if (user instanceof Player) {      Player player=(Player)user;      player.put("text",publicMessage);      SingletonRepository.getRuleProcessor().removePlayerText(player);    } else     if (user instanceof NPC) {      ((NPC)user).say(publicMessage);    }  }  if (privateMessage != null) {    sendPrivateMessage(user,privateMessage);  }  user.notifyWorldAboutChanges();}  }
class C{  public static String of(String classname){  if (classname.equals("void"))   return "V"; else   if (classname.equals("int"))   return "I"; else   if (classname.equals("byte"))   return "B"; else   if (classname.equals("long"))   return "J"; else   if (classname.equals("double"))   return "D"; else   if (classname.equals("float"))   return "F"; else   if (classname.equals("char"))   return "C"; else   if (classname.equals("short"))   return "S"; else   if (classname.equals("boolean"))   return "Z"; else   return "L" + toJvmName(classname) + ";";}  }
class C{  public ImmutablePair(final L left,final R right){  super();  this.left=left;  this.right=right;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void validateParameter(ClusterIpInfo clusterIpInfo,String postOperation) throws Exception {  boolean bValid=true;  String errmsg="";  if (!postOperation.equals("poweroff") && !postOperation.equals("reboot")) {    bValid=false;    errmsg="post operation is invalid.";  }  errmsg=clusterIpInfo.validate(nodeCount);  if (!errmsg.isEmpty()) {    bValid=false;  }  if (!bValid) {    throw new IllegalStateException(errmsg);  }}  }
class C{  public HillClimbingSearch(HeuristicFunction hf){  this(hf,new NodeExpander());}  }
class C{  public boolean isLast() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  protected void decoderEventAction(VSDecoderEvent e){  if (e.getType() == VSDecoderEvent.EventType.LOCATION_CHANGE) {    if (e.getData() != null) {      jmri.util.PhysicalLocation p=(jmri.util.PhysicalLocation)e.getData();      statusBar.setMessage("Location:" + p.toString());    } else {      statusBar.setMessage("Location: unknown");    }  }}  }
class C{  public ObjectFactory(){}  }
class C{  protected PlanNode toQuery(SelectNode selectNode) throws StandardException {  PlanNode input;  if (!selectNode.getFromList().isEmpty()) {    Joinable joins=null;    for (    FromTable fromTable : selectNode.getFromList()) {      if (joins == null)       joins=toJoinNode(fromTable,true); else       joins=joinNodes(joins,toJoinNode(fromTable,true),JoinType.INNER);    }    input=joins;  } else {    input=new ExpressionsSource(Collections.singletonList(Collections.<ExpressionNode>emptyList()));  }  ConditionList conditions=toConditions(selectNode.getWhereClause());  return new Select(input,conditions);}  }
class C{  static int toUpperCaseEx(int codePoint){  assert isValidCodePoint(codePoint);  return CharacterData.of(codePoint).toUpperCaseEx(codePoint);}  }
class C{  private void handleNetworkDisconnect(){  if (DBG)   log("Stopping DHCP and clearing IP");  stopDhcp();  try {    mNwService.clearInterfaceAddresses(mInterfaceName);    mNwService.disableIpv6(mInterfaceName);  } catch (  Exception e) {    loge("Failed to clear addresses or disable ipv6" + e);  }  mWifiInfo.setInetAddress(null);  mWifiInfo.setBSSID(null);  mWifiInfo.setSSID(null);  mWifiInfo.setNetworkId(WifiConfiguration.INVALID_NETWORK_ID);  mWifiInfo.setRssi(MIN_RSSI);  mWifiInfo.setLinkSpeed(-1);  mWifiInfo.setMeteredHint(false);  setNetworkDetailedState(DetailedState.DISCONNECTED);  mWifiConfigStore.updateStatus(mLastNetworkId,DetailedState.DISCONNECTED);  mLinkProperties.clear();  sendNetworkStateChangeBroadcast(mLastBssid);  if (!mWifiConfigStore.isUsingStaticIp(mLastNetworkId)) {    mWifiConfigStore.clearLinkProperties(mLastNetworkId);  }  mLastBssid=null;  mLastNetworkId=WifiConfiguration.INVALID_NETWORK_ID;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public static DateTimeFormatter hourMinute(){  return Constants.hm;}  }
class C{  static void checkArray(Object a,Class<?> c,int requiredLen,int offset,int firstNull){  check(c == a.getClass().getComponentType());  Object nullValue=nullValues.get(c);  assert (nullValues.containsKey(c));  int misses=0;  int firstMiss=-1;  int length=Array.getLength(a);  if (length != requiredLen && requiredLen != -1) {    if (muzzle == 0)     System.out.println("*** a.length = " + length + " != "+ requiredLen);    ++misses;  }  for (int i=0; i < length; i++) {    Object tv=(i >= firstNull) ? nullValue : testValue(i + offset,c);    Object ai=Array.get(a,i);    if (!eq(ai,tv)) {      if (muzzle == 0)       System.out.println("*** a[" + i + "] = "+ ai+ " != "+ tv);      if (misses == 0)       firstMiss=i;      if (++misses > 10)       break;    }  }  if (misses != 0) {    Method toString=toStrings.get(c);    if (toString == null)     toString=toStrings.get(Object.class);    throw new RuntimeException("checkArray failed at " + firstMiss + " "+ c+ "[]"+ " : "+ invoke(toString,a));  }}  }
class C{  public MaxProjectionExpression(boolean isDistinct,boolean isEver){  this.distinct=isDistinct;  this.ever=isEver;}  }
class C{  public static Supplier<byte[]> props(Action<Map<String,String>> mapPopulate){  return null;}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (o instanceof EventPoint) {    EventPoint other=(EventPoint)o;    return point.equals(other.point);  }  return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_NUM_EXPR_1__TAIL_1:    setTail_1(TAIL_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:18.842 -0500",hash_original_method="75EA37BFFAA918A3594F9496C85F47EF",hash_generated_method="D5FCAC53DF2CC1B2A069EBC5B89D20B4") public Object[] toArray(){  final Object[] items=this.items;  final ReentrantLock lock=this.lock;  lock.lock();  try {    final int count=this.count;    Object[] a=new Object[count];    for (int i=takeIndex, k=0; k < count; i=inc(i), k++)     a[k]=items[i];    return a;  }  finally {    lock.unlock();  }}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == modeCombo)   createGrid(); else   if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    if (tabbedPane.getSelectedIndex() == 0)     createGrid(); else     gridOK();  } else   if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))   m_frame.dispose();}  }
class C{  public static DataSet center(DataSet data){  DataSet _data=data.copy();  for (int j=0; j < _data.getNumColumns(); j++) {    double sum=0.0;    int n=0;    for (int i=0; i < _data.getNumRows(); i++) {      double v=_data.getDouble(i,j);      if (!Double.isNaN(v)) {        sum+=v;        n++;      }    }    double avg=sum / n;    for (int i=0; i < _data.getNumRows(); i++) {      _data.setDouble(i,j,_data.getDouble(i,j) - avg);    }  }  return _data;}  }
class C{  private void appendLinearRingTaggedText(LinearRing linearRing,int level,Writer writer) throws IOException {  writer.write("LINEARRING ");  appendLineStringText(linearRing,level,false,writer);}  }
class C{  public static ValueAndBoost parseCreateFieldForString(ParseContext context,String nullValue,float defaultBoost) throws IOException {  if (context.externalValueSet()) {    return new ValueAndBoost((String)context.externalValue(),defaultBoost);  }  XContentParser parser=context.parser();  if (parser.currentToken() == XContentParser.Token.VALUE_NULL) {    return new ValueAndBoost(nullValue,defaultBoost);  }  if (parser.currentToken() == XContentParser.Token.START_OBJECT) {    XContentParser.Token token;    String currentFieldName=null;    String value=nullValue;    float boost=defaultBoost;    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {      if (token == XContentParser.Token.FIELD_NAME) {        currentFieldName=parser.currentName();      } else {        if ("value".equals(currentFieldName) || "_value".equals(currentFieldName)) {          value=parser.textOrNull();        } else         if ("boost".equals(currentFieldName) || "_boost".equals(currentFieldName)) {          boost=parser.floatValue();        } else {          throw new IllegalArgumentException("unknown property [" + currentFieldName + "]");        }      }    }    return new ValueAndBoost(value,boost);  }  return new ValueAndBoost(parser.textOrNull(),defaultBoost);}  }
class C{  public CandidateAttribute(Candidate<?> candidate){  this.candidate=candidate;}  }
class C{  public Openable createOpenable(String resourcePath,IJavaSearchScope scope){  int separatorIndex;  if ((separatorIndex=resourcePath.indexOf(IJavaSearchScope.JAR_FILE_ENTRY_SEPARATOR)) > -1) {    int rootPathLength;    if (this.lastPkgFragmentRootPath == null || (rootPathLength=this.lastPkgFragmentRootPath.length()) != resourcePath.length() || !resourcePath.regionMatches(0,this.lastPkgFragmentRootPath,0,rootPathLength)) {      String jarPath=resourcePath.substring(0,separatorIndex);      PackageFragmentRoot root=getJarPkgFragmentRoot(resourcePath,separatorIndex,jarPath,scope);      if (root == null)       return null;      this.lastPkgFragmentRootPath=jarPath;      this.lastPkgFragmentRoot=root;      this.packageHandles=new HashtableOfArrayToObject(5);    }    String classFilePath=resourcePath.substring(separatorIndex + 1);    String[] simpleNames=new Path(classFilePath).segments();    String[] pkgName;    int length=simpleNames.length - 1;    if (length > 0) {      pkgName=new String[length];      System.arraycopy(simpleNames,0,pkgName,0,length);    } else {      pkgName=CharOperation.NO_STRINGS;    }    IPackageFragment pkgFragment=(IPackageFragment)this.packageHandles.get(pkgName);    if (pkgFragment == null) {      pkgFragment=this.lastPkgFragmentRoot.getPackageFragment(pkgName);      this.packageHandles.put(pkgName,pkgFragment);    }    IClassFile classFile=pkgFragment.getClassFile(simpleNames[length]);    return (Openable)classFile;  } else {    int rootPathLength=-1;    if (this.lastPkgFragmentRootPath == null || !(resourcePath.startsWith(this.lastPkgFragmentRootPath) && !org.eclipse.jdt.internal.compiler.util.Util.isExcluded(resourcePath.toCharArray(),this.lastPkgFragmentRoot.fullInclusionPatternChars(),this.lastPkgFragmentRoot.fullExclusionPatternChars(),false) && (rootPathLength=this.lastPkgFragmentRootPath.length()) > 0 && resourcePath.charAt(rootPathLength) == '/')) {      PackageFragmentRoot root=getPkgFragmentRoot(resourcePath);      if (root == null)       return null;      this.lastPkgFragmentRoot=root;      this.lastPkgFragmentRootPath=this.lastPkgFragmentRoot.internalPath().toString();      this.packageHandles=new HashtableOfArrayToObject(5);    }    resourcePath=resourcePath.substring(this.lastPkgFragmentRootPath.length() + 1);    String[] simpleNames=new Path(resourcePath).segments();    String[] pkgName;    int length=simpleNames.length - 1;    if (length > 0) {      pkgName=new String[length];      System.arraycopy(simpleNames,0,pkgName,0,length);    } else {      pkgName=CharOperation.NO_STRINGS;    }    IPackageFragment pkgFragment=(IPackageFragment)this.packageHandles.get(pkgName);    if (pkgFragment == null) {      pkgFragment=this.lastPkgFragmentRoot.getPackageFragment(pkgName);      this.packageHandles.put(pkgName,pkgFragment);    }    String simpleName=simpleNames[length];    if (org.eclipse.jdt.internal.core.util.Util.isJavaLikeFileName(simpleName)) {      ICompilationUnit unit=pkgFragment.getCompilationUnit(simpleName);      return (Openable)unit;    } else     if (org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(simpleName)) {      IClassFile classFile=pkgFragment.getClassFile(simpleName);      return (Openable)classFile;    }    return null;  }}  }
class C{  static public void appendEscapingCDATA(final StringBuffer buf,final String str){  if (str != null) {    int end=str.indexOf(CDATA_END);    if (end < 0) {      buf.append(str);    } else {      int start=0;      while (end > -1) {        buf.append(str.substring(start,end));        buf.append(CDATA_EMBEDED_END);        start=end + CDATA_END_LEN;        if (start < str.length()) {          end=str.indexOf(CDATA_END,start);        } else {          return;        }      }      buf.append(str.substring(start));    }  }}  }
class C{  private boolean checkSensorsStatus_notRecording(){  EndToEndTestUtils.instrumentation.waitForIdleSync();  EndToEndTestUtils.createTrackIfEmpty(0,false);  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_sensor_state),true);  return EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.sensor_state_connected),1,EndToEndTestUtils.LONG_WAIT_TIME);}  }
class C{  private void createTitle(){  final Label labelTitle=new Label(this,SWT.NONE);  labelTitle.setLayoutData(new GridData(GridData.FILL,GridData.BEGINNING,true,false));  labelTitle.setFont(this.titleFont);  labelTitle.setForeground(this.titleColor);  labelTitle.setText(this.title);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public boolean containsTestClass(){  for (  StackTraceElement stackTraceElement : getStackTraceList()) {    String className=stackTraceElement.getClassName();    if (isTestClassName(className)) {      return true;    }  }  return false;}  }
class C{  public static Chset intersection(Chset left,Chset right){  return difference(left,not(right));}  }
class C{  public UpdateRequestProcessorChain(List<UpdateRequestProcessorFactory> chain,SolrCore solrCore){  this.chain=chain;  this.solrCore=solrCore;}  }
class C{  @Override public void onFinishInput(){  super.onFinishInput();  mComposing.setLength(0);  updateCandidates();  setCandidatesViewShown(false);  mCurKeyboard=mQwertyKeyboard;  if (mInputView != null) {    mInputView.closing();  }}  }
class C{  public static <T>Collection<T> synchronizedCollection(Collection<T> collection){  if (collection == null) {    throw new NullPointerException();  }  return new SynchronizedCollection<T>(collection);}  }
class C{  public void init(String prefix,Properties props){  setProperties(prefix,props);}  }
class C{  public void testParseName() throws SQLException {  String name=FBEscapedFunctionHelper.parseFunction(ESCAPED_FUNCTION_CALL);  assertEquals("Parsed function name should be equal to the test one.",ESCAPED_FUNCTION_NAME,name);}  }
class C{  public static int hash32(final byte[] data,int length,int seed){  final int m=0x5bd1e995;  final int r=24;  int h=seed ^ length;  int length4=length / 4;  for (int i=0; i < length4; i++) {    final int i4=i * 4;    int k=(data[i4 + 0] & 0xff) + ((data[i4 + 1] & 0xff) << 8) + ((data[i4 + 2] & 0xff) << 16)+ ((data[i4 + 3] & 0xff) << 24);    k*=m;    k^=k >>> r;    k*=m;    h*=m;    h^=k;  }switch (length % 4) {case 3:    h^=(data[(length & ~3) + 2] & 0xff) << 16;case 2:  h^=(data[(length & ~3) + 1] & 0xff) << 8;case 1:h^=(data[length & ~3] & 0xff);h*=m;}h^=h >>> 13;h*=m;h^=h >>> 15;return h;}  }
class C{  @Override public void write(byte[] buffer,int offset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);  if (currentEntry == null) {    throw new ZipException("No active entry");  }  if (currentEntry.getMethod() == STORED) {    out.write(buffer,offset,byteCount);  } else {    super.write(buffer,offset,byteCount);  }  crc.update(buffer,offset,byteCount);}  }
class C{  public ForceReply build(){  return new ForceReply(this);}  }
class C{  protected void processInObjectStreamOutStream(int type,@Nullable Object arg,BinaryRawReaderEx reader,BinaryRawWriterEx writer) throws IgniteCheckedException {  throwUnsupported(type);}  }
class C{  public Inspector(){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_2__VALUE_1:    setValue_1(VALUE_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private void jbInit(boolean showTable) throws Exception {  getContentPane().add(mainPanel);  if (showTable) {    mainPanel.add(scrollPane,BorderLayout.CENTER);    scrollPane.getViewport().add(table);    scrollPane.setPreferredSize(new Dimension(500,100));  }  mainPanel.add(confirmPanel,BorderLayout.SOUTH);  confirmPanel.addActionListener(this);}  }
class C{  public NoSuchMethodError(){  super();}  }
class C{  private int deleteAllContacts(Iterator<String> contactsIter){  int totalContactsDeleted=0;  while (contactsIter.hasNext())   totalContactsDeleted+=deleteContact(contactsIter.next());  return totalContactsDeleted;}  }
class C{  public RoleList retrieveAllRoles(){  RELATION_LOGGER.entering(RelationSupport.class.getName(),"retrieveAllRoles");  RoleList result;synchronized (myRoleName2ValueMap) {    result=new RoleList(new ArrayList<Role>(myRoleName2ValueMap.values()));  }  RELATION_LOGGER.exiting(RelationSupport.class.getName(),"retrieveAllRoles");  return result;}  }
class C{  public void grow(int newLength){  ref.ints=ArrayUtil.grow(ref.ints,newLength);}  }
class C{  public boolean skipToKeyframeBefore(long timeUs){  long nextOffset=infoQueue.skipToKeyframeBefore(timeUs);  if (nextOffset == -1) {    return false;  }  dropDownstreamTo(nextOffset);  return true;}  }
class C{  public void clearImage(int color){  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      setPixelColor(x,y,color);    }  }}  }
class C{  public void putParam(Class modelClass,Parameters param){  if (param instanceof SessionListener) {    SessionListener listener=(SessionListener)param;    getSessionSupport().addSessionListener(listener);  }  paramMap.put(modelClass,param);}  }
class C{  public void testBug5191() throws Exception {  PreparedStatement pStmt=null;  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug5191Q");    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug5191C");    this.stmt.executeUpdate("CREATE TABLE testBug5191Q (QuestionId int NOT NULL AUTO_INCREMENT, Text VARCHAR(200), PRIMARY KEY(QuestionId))");    this.stmt.executeUpdate("CREATE TABLE testBug5191C (CategoryId int, QuestionId int)");    String[] questions=new String[]{"What is your name?","What is your quest?","What is the airspeed velocity of an unladen swollow?","How many roads must a man walk?","Where's the tea?"};    for (int i=0; i < questions.length; i++) {      this.stmt.executeUpdate("INSERT INTO testBug5191Q(Text) VALUES (\"" + questions[i] + "\")");      int catagory=(i < 3) ? 0 : i;      this.stmt.executeUpdate("INSERT INTO testBug5191C (CategoryId, QuestionId) VALUES (" + catagory + ", "+ i+ ")");    }    pStmt=this.conn.prepareStatement("SELECT qc.QuestionId, q.Text FROM testBug5191Q q, testBug5191C qc WHERE qc.CategoryId = ? AND q.QuestionId = qc.QuestionId");    int catId=0;    for (int i=0; i < 100; i++) {      execQueryBug5191(pStmt,catId);    }  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug5191Q");    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug5191C");    if (pStmt != null) {      pStmt.close();    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void removePlaceholder(Uri uri){  sSessionsToSizes.remove(uri);  sSessionsToPlaceholderBitmap.remove(uri);  sSessionsToPlaceholderVersions.remove(uri);}  }
class C{  public void checkRowDoesntExistInKeyGroup(String sql,String key) throws Exception {  this.conn.setShardKey(key);  checkRowDoesntExist(sql);}  }
class C{  public void putFloat(int key,float value){  map.put(key,value);}  }
class C{  protected static int faculty(int num){  if (num == 0) {    return 0;  }  int fac=1;  for (int i=1; i <= num; i++) {    fac*=i;  }  return fac;}  }
class C{  public JavaFieldConverter(final ClassLoaderReference classLoaderReference){  this(new JavaClassConverter(classLoaderReference),new DefaultMapper(classLoaderReference));}  }
class C{  @Override public void deleteLink(String key){}  }
class C{  public TerminalSeqSetf(Iterable<ITerminalSeq> sequences){  super();  for (  ITerminalSeq seq : sequences) {    this.set.add(seq.seal());  }  this.maxLength=super.getMaxLength();  this.hashCode=calcHashCode();}  }
class C{  @Override protected boolean isPathCacheable(){  return true;}  }
class C{  public void addOrUpdateExtension(WalletExtension extension){  String id=checkNotNull(extension).getWalletExtensionID();  lock.lock();  try {    extensions.put(id,extension);    saveNow();  }  finally {    lock.unlock();  }}  }
class C{  private void initResourcePoolAndComputeHost() throws Throwable {  this.outPool=createAWSResourcePool(this.host);  this.outComputeHost=createAWSComputeHost(this.host,this.outPool.documentSelfLink,this.accessKey,this.secretKey,this.isAwsClientMock,this.awsMockEndpointReference,null);}  }
class C{  public Task<VolumeRestRep> deactivate(URI id,VolumeDeleteTypeEnum deletionType){  URI uri=client.uriBuilder(getDeactivateUrl()).queryParam("type",deletionType).build(id);  TaskResourceRep task=client.postURI(TaskResourceRep.class,uri);  return new Task<>(client,task,resourceClass);}  }
class C{  public static void checkCodeVerifier(String codeVerifier){  checkArgument(MIN_CODE_VERIFIER_LENGTH <= codeVerifier.length(),"codeVerifier length is shorter than allowed by the PKCE specification");  checkArgument(codeVerifier.length() <= MAX_CODE_VERIFIER_LENGTH,"codeVerifier length is longer than allowed by the PKCE specification");  checkArgument(REGEX_CODE_VERIFIER.matcher(codeVerifier).matches(),"codeVerifier string contains illegal characters");}  }
class C{  protected Namespace remove(int index){  Namespace namespace=namespaceStack.remove(index);  namespaceCacheList.remove(index);  defaultNamespace=null;  currentNamespaceCache=null;  return namespace;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:15.758 -0400",hash_original_method="A362BC8E40D9F298E8A1FE201159EF3E",hash_generated_method="7CB0DF6A2C66B38B5610F3CF5DE43592") public boolean isExplicitPolicyRequired(){  return explicitPolicyRequired;}  }
class C{  public void close(){  if (running) {    taskPool.clear();    running=false;    for (    PoolThread thread : threadPool) {      thread.interrupt();    }  }}  }
class C{  @Override public String toString(){  DateFormat df=DateFormat.getDateTimeInstance();  return "[" + df.format(getLowerDate()) + " --> "+ df.format(getUpperDate())+ "]";}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener l){  m_simplePanel.addPropertyChangeListener(l);  m_advancedPanel.addPropertyChangeListener(l);}  }
class C{  protected ObjectPropertyTypeImpl(){  super();}  }
class C{  private byte[] bytes(int... bytesAsInts){  byte[] bytes=new byte[bytesAsInts.length];  for (int i=0; i < bytesAsInts.length; i++) {    bytes[i]=(byte)bytesAsInts[i];  }  return bytes;}  }
class C{  public int ff_h264_decode_mb_cabac(){  int mb_xy;  int mb_type, partition_count=0, cbp=0;  int dct8x8_allowed=pps.transform_8x8_mode;  mb_xy=this.mb_xy=s.mb_x + s.mb_y * s.mb_stride;  if (slice_type_nos != FF_I_TYPE) {    int skip;    if (mb_mbaff != 0 && (s.mb_y & 1) == 1 && prev_mb_skipped != 0)     skip=next_mb_skipped; else     skip=cabac.decode_cabac_mb_skip(this,s.mb_x,s.mb_y);    if (skip != 0) {      if (mb_mbaff != 0 && (s.mb_y & 1) == 0) {        s.current_picture.mb_type_base[s.current_picture.mb_type_offset + mb_xy]=MB_TYPE_SKIP;        next_mb_skipped=cabac.decode_cabac_mb_skip(this,s.mb_x,s.mb_y + 1);        if (0 == next_mb_skipped)         mb_mbaff=mb_field_decoding_flag=cabac.decode_cabac_field_decoding_flag(this);      }      decode_mb_skip();      cbp_table[mb_xy]=0;      chroma_pred_mode_table[mb_xy]=0;      last_qscale_diff=0;      return 0;    }  }  if (mb_mbaff != 0) {    if ((s.mb_y & 1) == 0)     mb_mbaff=mb_field_decoding_flag=cabac.decode_cabac_field_decoding_flag(this);  }  prev_mb_skipped=0;  fill_decode_neighbors(-(mb_field_decoding_flag));  if (slice_type_nos == FF_B_TYPE) {    int ctx=0;    if (0 == ((left_type[0] - 1) & MB_TYPE_DIRECT2))     ctx++;    if (0 == ((top_type - 1) & MB_TYPE_DIRECT2))     ctx++;    boolean goto_decode_intra_mb=false;    if (0 == cabac.get_cabac_noinline(cabac_state,27 + ctx)) {      mb_type=0;    } else     if (0 == cabac.get_cabac_noinline(cabac_state,27 + 3)) {      mb_type=1 + cabac.get_cabac_noinline(cabac_state,27 + 5);    } else {      int bits;      bits=cabac.get_cabac_noinline(cabac_state,27 + 4) << 3;      bits+=cabac.get_cabac_noinline(cabac_state,27 + 5) << 2;      bits+=cabac.get_cabac_noinline(cabac_state,27 + 5) << 1;      bits+=cabac.get_cabac_noinline(cabac_state,27 + 5);      if (bits < 8) {        mb_type=bits + 3;      } else       if (bits == 13) {        mb_type=cabac.decode_cabac_intra_mb_type(this,32,0);        goto_decode_intra_mb=true;        partition_count=0;        cbp=H264Data.i_mb_type_info[mb_type].cbp;        intra16x16_pred_mode=H264Data.i_mb_type_info[mb_type].pred_mode;        mb_type=H264Data.i_mb_type_info[mb_type].type;      } else       if (bits == 14) {        mb_type=11;      } else       if (bits == 15) {        mb_type=22;      } else {        bits=(bits << 1) + cabac.get_cabac_noinline(cabac_state,27 + 5);        mb_type=bits - 4;      }    }    if (!goto_decode_intra_mb) {      partition_count=H264Data.b_mb_type_info[mb_type].partition_count;      mb_type=H264Data.b_mb_type_info[mb_type].type;    }  } else   if (slice_type_nos == FF_P_TYPE) {    if (cabac.get_cabac_noinline(cabac_state,14) == 0) {      if (cabac.get_cabac_noinline(cabac_state,15) == 0) {        mb_type=3 * cabac.get_cabac_noinline(cabac_state,16);      } else {        mb_type=2 - cabac.get_cabac_noinline(cabac_state,17);      }      partition_count=H264Data.p_mb_type_info[mb_type].partition_count;      mb_type=H264Data.p_mb_type_info[mb_type].type;    } else {      mb_type=cabac.decode_cabac_intra_mb_type(this,17,0);      partition_count=0;      cbp=H264Data.i_mb_type_info[mb_type].cbp;      intra16x16_pred_mode=H264Data.i_mb_type_info[mb_type].pred_mode;      mb_type=H264Data.i_mb_type_info[mb_type].type;    }  } else {    mb_type=cabac.decode_cabac_intra_mb_type(this,3,1);    if (slice_type == FF_SI_TYPE && mb_type != 0)     mb_type--;    partition_count=0;    cbp=H264Data.i_mb_type_info[mb_type].cbp;    intra16x16_pred_mode=H264Data.i_mb_type_info[mb_type].pred_mode;    mb_type=H264Data.i_mb_type_info[mb_type].type;  }  if (mb_field_decoding_flag != 0)   mb_type|=MB_TYPE_INTERLACED;  slice_table_base[this.slice_table_offset + mb_xy]=slice_num;  if ((mb_type & MB_TYPE_INTRA_PCM) != 0) {    int ptr_offset=cabac.bytestream_current;    int[] ptr=cabac.bytestream;    if ((cabac.low & 0x01) != 0)     ptr_offset--;    if (CABACContext.CABAC_BITS == 16) {      if ((cabac.low & 0x01FF) != 0)       ptr_offset--;    }    for (int i=0; i < 128; i++) {      mb[i]=(short)(((ptr[ptr_offset + 1] & 0x0ff) << 8) | (ptr[ptr_offset] & 0x0ff));      ptr_offset+=2;    }    if (sps.chroma_format_idc != 0) {      for (int i=0; i < 64; i++) {        mb[128 + i]=(short)(((ptr[ptr_offset + 1] & 0x0ff) << 8) | (ptr[ptr_offset] & 0x0ff));        ptr_offset+=2;      }    }    cabac.ff_init_cabac_decoder(ptr,ptr_offset,cabac.bytestream_end - ptr_offset);    cbp_table[mb_xy]=0x01ef;    chroma_pred_mode_table[mb_xy]=0;    s.current_picture.qscale_table[mb_xy]=0;    Arrays.fill(non_zero_count[mb_xy],16);    s.current_picture.mb_type_base[s.current_picture.mb_type_offset + mb_xy]=mb_type;    last_qscale_diff=0;    return 0;  }  if (mb_mbaff != 0) {    ref_count[0]<<=1;    ref_count[1]<<=1;  }  fill_decode_caches(mb_type);  if ((mb_type & 7) != 0) {    int i, pred_mode;    if ((mb_type & MB_TYPE_INTRA4x4) != 0) {      if (dct8x8_allowed != 0 && (cabac.get_cabac_noinline(cabac_state,399 + neighbor_transform_size) != 0)) {        mb_type|=MB_TYPE_8x8DCT;        for (i=0; i < 16; i+=4) {          int pred=pred_intra_mode(i);          int mode=cabac.decode_cabac_mb_intra4x4_pred_mode(this,pred);          Rectangle.fill_rectangle_sign(intra4x4_pred_mode_cache,scan8[i],2,2,8,mode,1);        }      } else {        for (i=0; i < 16; i++) {          int pred=pred_intra_mode(i);          intra4x4_pred_mode_cache[scan8[i]]=(byte)cabac.decode_cabac_mb_intra4x4_pred_mode(this,pred);        }      }      ff_h264_write_back_intra_pred_mode();      if (ff_h264_check_intra4x4_pred_mode() < 0)       return -1;    } else {      intra16x16_pred_mode=ff_h264_check_intra_pred_mode(intra16x16_pred_mode);      if (intra16x16_pred_mode < 0)       return -1;    }    if (sps.chroma_format_idc != 0) {      chroma_pred_mode_table[mb_xy]=pred_mode=cabac.decode_cabac_mb_chroma_pre_mode(this);      pred_mode=ff_h264_check_intra_pred_mode(pred_mode);      if (pred_mode < 0)       return -1;      chroma_pred_mode=pred_mode;    }  } else   if (partition_count == 4) {    int i, j;    int[] sub_partition_count=new int[4];    int list;    int[][] ref=new int[2][4];    if (slice_type_nos == FF_B_TYPE) {      for (i=0; i < 4; i++) {        sub_mb_type[i]=cabac.decode_cabac_b_mb_sub_type(this);        sub_partition_count[i]=H264Data.b_sub_mb_type_info[sub_mb_type[i]].partition_count;        sub_mb_type[i]=H264Data.b_sub_mb_type_info[sub_mb_type[i]].type;      }      if (((sub_mb_type[0] | sub_mb_type[1] | sub_mb_type[2]| sub_mb_type[3]) & MB_TYPE_DIRECT2) != 0) {        mb_type=ff_h264_pred_direct_motion(mb_type);        ref_cache[0][scan8[4]]=ref_cache[1][scan8[4]]=ref_cache[0][scan8[12]]=ref_cache[1][scan8[12]]=PART_NOT_AVAILABLE;        for (i=0; i < 4; i++)         Rectangle.fill_rectangle_unsign(direct_cache,scan8[4 * i],2,2,8,(sub_mb_type[i] >> 1) & 0x0FF,1);      }    } else {      for (i=0; i < 4; i++) {        sub_mb_type[i]=cabac.decode_cabac_p_mb_sub_type(this);        sub_partition_count[i]=H264Data.p_sub_mb_type_info[sub_mb_type[i]].partition_count;        sub_mb_type[i]=H264Data.p_sub_mb_type_info[sub_mb_type[i]].type;      }    }    for (list=0; list < list_count; list++) {      for (i=0; i < 4; i++) {        if ((sub_mb_type[i] & MB_TYPE_DIRECT2) != 0)         continue;        if (((sub_mb_type[i]) & (MB_TYPE_P0L0 << ((0) + 2 * (list)))) != 0) {          if (ref_count[list] > 1) {            ref[list][i]=cabac.decode_cabac_mb_ref(this,list,4 * i);            if (ref[list][i] >= (int)ref_count[list]) {              return -1;            }          } else           ref[list][i]=0;        } else {          ref[list][i]=-1;        }        ref_cache[list][scan8[4 * i] + 1]=ref_cache[list][scan8[4 * i] + 8]=ref_cache[list][scan8[4 * i] + 9]=ref[list][i];      }    }    if (dct8x8_allowed != 0)     dct8x8_allowed=get_dct8x8_allowed();    for (list=0; list < list_count; list++) {      for (i=0; i < 4; i++) {        ref_cache[list][scan8[4 * i]]=ref_cache[list][scan8[4 * i] + 1];        if ((sub_mb_type[i] & MB_TYPE_DIRECT2) != 0) {          Rectangle.fill_rectangle_mvd_cache(mvd_cache[list],scan8[4 * i],2,2,8,0,2);          continue;        }        if (((sub_mb_type[i]) & (MB_TYPE_P0L0 << ((0) + 2 * (list)))) != 0 && ((sub_mb_type[i] & MB_TYPE_DIRECT2) == 0)) {          int sub_mb_type=this.sub_mb_type[i];          int block_width=(sub_mb_type & (MB_TYPE_16x16 | MB_TYPE_16x8)) != 0 ? 2 : 1;          for (j=0; j < sub_partition_count[i]; j++) {            int mpx=0, mpy=0;            int mx=0, my=0;            int index=4 * i + block_width * j;            int[][] mv_cache_base=this.mv_cache[list];            int mv_cache_offset=scan8[index];            int[][] mvd_cache_base=this.mvd_cache[list];            int mvd_cache_offset=scan8[index];            int[] args=new int[]{mx,my};            pred_motion(index,block_width,list,ref_cache[list][scan8[index]],args);            mx=args[0];            my=args[1];{              int amvd0=this.mvd_cache[list][scan8[index] - 1][0] + this.mvd_cache[list][scan8[index] - 8][0];              int amvd1=this.mvd_cache[list][scan8[index] - 1][1] + this.mvd_cache[list][scan8[index] - 8][1];              args[0]=mpx;              mx+=cabac.decode_cabac_mb_mvd(this,40,amvd0,args);              mpx=args[0];              args[0]=mpy;              my+=cabac.decode_cabac_mb_mvd(this,47,amvd1,args);              mpy=args[0];            }            if (((sub_mb_type) & MB_TYPE_16x16) != 0) {              mv_cache_base[mv_cache_offset + 1][0]=mv_cache_base[mv_cache_offset + 8][0]=mv_cache_base[mv_cache_offset + 9][0]=mx;              mv_cache_base[mv_cache_offset + 1][1]=mv_cache_base[mv_cache_offset + 8][1]=mv_cache_base[mv_cache_offset + 9][1]=my;              mvd_cache_base[mvd_cache_offset + 1][0]=mvd_cache_base[mvd_cache_offset + 8][0]=mvd_cache_base[mvd_cache_offset + 9][0]=mpx;              mvd_cache_base[mvd_cache_offset + 1][1]=mvd_cache_base[mvd_cache_offset + 8][1]=mvd_cache_base[mvd_cache_offset + 9][1]=mpy;            } else             if (((sub_mb_type) & MB_TYPE_16x8) != 0) {              mv_cache_base[mv_cache_offset + 1][0]=mx;              mv_cache_base[mv_cache_offset + 1][1]=my;              mvd_cache_base[mvd_cache_offset + 1][0]=mpx;              mvd_cache_base[mvd_cache_offset + 1][1]=mpy;            } else             if (((sub_mb_type) & MB_TYPE_8x16) != 0) {              mv_cache_base[mv_cache_offset + 8][0]=mx;              mv_cache_base[mv_cache_offset + 8][1]=my;              mvd_cache_base[mvd_cache_offset + 8][0]=mpx;              mvd_cache_base[mvd_cache_offset + 8][1]=mpy;            }            mv_cache_base[mv_cache_offset + 0][0]=mx;            mv_cache_base[mv_cache_offset + 0][1]=my;            mvd_cache_base[mvd_cache_offset + 0][0]=mpx;            mvd_cache_base[mvd_cache_offset + 0][1]=mpy;          }        } else {          Rectangle.fill_rectangle_mv_cache(mv_cache[list],scan8[4 * i],2,2,8,0,4);          Rectangle.fill_rectangle_mvd_cache(mvd_cache[list],scan8[4 * i],2,2,8,0,2);        }      }    }  } else   if ((mb_type & MB_TYPE_DIRECT2) != 0) {    mb_type=ff_h264_pred_direct_motion(mb_type);    Rectangle.fill_rectangle_mvd_cache(mvd_cache[0],scan8[0],4,4,8,0,2);    Rectangle.fill_rectangle_mvd_cache(mvd_cache[1],scan8[0],4,4,8,0,2);    dct8x8_allowed&=sps.direct_8x8_inference_flag;  } else {    int list, i;    if ((mb_type & MB_TYPE_16x16) != 0) {      for (list=0; list < list_count; list++) {        if (((mb_type) & (MB_TYPE_P0L0 << ((0) + 2 * (list)))) != 0) {          int ref;          if (ref_count[list] > 1) {            ref=cabac.decode_cabac_mb_ref(this,list,0);            if (ref >= (int)ref_count[list]) {              return -1;            }          } else           ref=0;          Rectangle.fill_rectangle_sign(ref_cache[list],scan8[0],4,4,8,ref,1);        }      }      for (list=0; list < list_count; list++) {        if (((mb_type) & (MB_TYPE_P0L0 << ((0) + 2 * (list)))) != 0) {          int mx=0, my=0, mpx=0, mpy=0;          int[] args=new int[2];          args[0]=mx;          args[1]=my;          pred_motion(0,4,list,ref_cache[list][scan8[0]],args);          mx=args[0];          my=args[1];{            int amvd0=this.mvd_cache[list][scan8[0] - 1][0] + this.mvd_cache[list][scan8[0] - 8][0];            int amvd1=this.mvd_cache[list][scan8[0] - 1][1] + this.mvd_cache[list][scan8[0] - 8][1];            args[0]=mpx;            mx+=cabac.decode_cabac_mb_mvd(this,40,amvd0,args);            mpx=args[0];            args[0]=mpy;            my+=cabac.decode_cabac_mb_mvd(this,47,amvd1,args);            mpy=args[0];          }          Rectangle.fill_rectangle_mvd_cache(mvd_cache[list],scan8[0],4,4,8,pack8to16(mpx,mpy),2);          Rectangle.fill_rectangle_mv_cache(mv_cache[list],scan8[0],4,4,8,pack16to32(mx,my),4);        }      }    } else     if ((mb_type & MB_TYPE_16x8) != 0) {      for (list=0; list < list_count; list++) {        for (i=0; i < 2; i++) {          if (((mb_type) & (MB_TYPE_P0L0 << ((i) + 2 * (list)))) != 0) {            int ref;            if (ref_count[list] > 1) {              ref=cabac.decode_cabac_mb_ref(this,list,8 * i);              if (ref >= (int)ref_count[list]) {                return -1;              }            } else             ref=0;            Rectangle.fill_rectangle_sign(ref_cache[list],scan8[0] + 16 * i,4,2,8,ref,1);          } else {            Rectangle.fill_rectangle_sign(ref_cache[list],scan8[0] + 16 * i,4,2,8,(LIST_NOT_USED),1);          }        }      }      for (list=0; list < list_count; list++) {        for (i=0; i < 2; i++) {          if (((mb_type) & (MB_TYPE_P0L0 << ((i) + 2 * (list)))) != 0) {            int mx=0, my=0, mpx=0, mpy=0;            int[] args=new int[2];            args[0]=mx;            args[1]=my;            pred_16x8_motion(8 * i,list,ref_cache[list][scan8[0] + 16 * i],args);            mx=args[0];            my=args[1];{              int amvd0=this.mvd_cache[list][scan8[8 * i] - 1][0] + this.mvd_cache[list][scan8[8 * i] - 8][0];              int amvd1=this.mvd_cache[list][scan8[8 * i] - 1][1] + this.mvd_cache[list][scan8[8 * i] - 8][1];              args[0]=mpx;              mx+=cabac.decode_cabac_mb_mvd(this,40,amvd0,args);              mpx=args[0];              args[0]=mpy;              my+=cabac.decode_cabac_mb_mvd(this,47,amvd1,args);              mpy=args[0];            }            Rectangle.fill_rectangle_mvd_cache(mvd_cache[list],scan8[0] + 16 * i,4,2,8,pack8to16(mpx,mpy),2);            Rectangle.fill_rectangle_mv_cache(mv_cache[list],scan8[0] + 16 * i,4,2,8,pack16to32(mx,my),4);          } else {            Rectangle.fill_rectangle_mvd_cache(mvd_cache[list],scan8[0] + 16 * i,4,2,8,0,2);            Rectangle.fill_rectangle_mv_cache(mv_cache[list],scan8[0] + 16 * i,4,2,8,0,4);          }        }      }    } else {      for (list=0; list < list_count; list++) {        for (i=0; i < 2; i++) {          if (((mb_type) & (MB_TYPE_P0L0 << ((i) + 2 * (list)))) != 0) {            int ref;            if (ref_count[list] > 1) {              ref=cabac.decode_cabac_mb_ref(this,list,4 * i);              if (ref >= (int)ref_count[list]) {                return -1;              }            } else             ref=0;            Rectangle.fill_rectangle_sign(ref_cache[list],scan8[0] + 2 * i,2,4,8,ref,1);          } else {            Rectangle.fill_rectangle_sign(ref_cache[list],scan8[0] + 2 * i,2,4,8,(LIST_NOT_USED),1);          }        }      }      for (list=0; list < list_count; list++) {        for (i=0; i < 2; i++) {          if (((mb_type) & (MB_TYPE_P0L0 << ((i) + 2 * (list)))) != 0) {            int mx=0, my=0, mpx=0, mpy=0;            int[] args=new int[2];            args[0]=mx;            args[1]=my;            pred_8x16_motion(i * 4,list,ref_cache[list][scan8[0] + 2 * i],args);            mx=args[0];            my=args[1];{              int amvd0=this.mvd_cache[list][scan8[4 * i] - 1][0] + this.mvd_cache[list][scan8[4 * i] - 8][0];              int amvd1=this.mvd_cache[list][scan8[4 * i] - 1][1] + this.mvd_cache[list][scan8[4 * i] - 8][1];              args[0]=mpx;              mx+=cabac.decode_cabac_mb_mvd(this,40,amvd0,args);              mpx=args[0];              args[0]=mpy;              my+=cabac.decode_cabac_mb_mvd(this,47,amvd1,args);              mpy=args[0];            }            Rectangle.fill_rectangle_mvd_cache(mvd_cache[list],scan8[0] + 2 * i,2,4,8,pack8to16(mpx,mpy),2);            Rectangle.fill_rectangle_mv_cache(mv_cache[list],scan8[0] + 2 * i,2,4,8,pack16to32(mx,my),4);          } else {            Rectangle.fill_rectangle_mvd_cache(mvd_cache[list],scan8[0] + 2 * i,2,4,8,0,2);            Rectangle.fill_rectangle_mv_cache(mv_cache[list],scan8[0] + 2 * i,2,4,8,0,4);          }        }      }    }  }  if ((mb_type & (MB_TYPE_16x16 | MB_TYPE_16x8 | MB_TYPE_8x16| MB_TYPE_8x8)) != 0) {    chroma_pred_mode_table[mb_xy]=0;    write_back_motion(mb_type);  }  if ((mb_type & MB_TYPE_INTRA16x16) == 0) {    cbp=cabac.decode_cabac_mb_cbp_luma(this);    if (sps.chroma_format_idc != 0)     cbp|=cabac.decode_cabac_mb_cbp_chroma(this) << 4;  }  cbp_table[mb_xy]=this.cbp=cbp;  if (dct8x8_allowed != 0 && (cbp & 15) != 0 && (mb_type & 7) == 0) {    mb_type|=MB_TYPE_8x8DCT * cabac.get_cabac_noinline(cabac_state,399 + neighbor_transform_size);  }  s.current_picture.mb_type_base[s.current_picture.mb_type_offset + mb_xy]=mb_type;  if (cbp != 0 || (mb_type & MB_TYPE_INTRA16x16) != 0) {    int[] scan, scan8x8;    long[] qmul;    if ((mb_type & MB_TYPE_INTERLACED) != 0) {      scan8x8=(s.qscale != 0) ? field_scan8x8 : field_scan8x8_q0;      scan=(s.qscale != 0) ? field_scan : field_scan_q0;    } else {      scan8x8=(s.qscale != 0) ? zigzag_scan8x8 : zigzag_scan8x8_q0;      scan=(s.qscale != 0) ? zigzag_scan : zigzag_scan_q0;    }    if (cabac.get_cabac_noinline(cabac_state,60 + (last_qscale_diff != 0 ? 1 : 0)) != 0) {      int val=1;      int ctx=2;      while (cabac.get_cabac_noinline(cabac_state,60 + ctx) != 0) {        ctx=3;        val++;        if (val > 102) {          return -1;        }      }      if ((val & 0x01) != 0)       val=(val + 1) >> 1; else       val=-((val + 1) >> 1);      last_qscale_diff=val;      s.qscale+=val;      if (s.qscale > 51 || s.qscale < 0) {        if (s.qscale < 0)         s.qscale+=52; else         s.qscale-=52;      }      chroma_qp[0]=pps.chroma_qp_table[0][s.qscale];      chroma_qp[1]=pps.chroma_qp_table[1][s.qscale];    } else     last_qscale_diff=0;    if ((mb_type & MB_TYPE_INTRA16x16) != 0) {      int i;      Arrays.fill(mb_luma_dc,0,16,(short)0);      decode_cabac_residual_dc(mb_luma_dc,0,0,LUMA_DC_BLOCK_INDEX,scan,0,16);      if ((cbp & 15) != 0) {        qmul=dequant4_coeff[0][s.qscale];        for (i=0; i < 16; i++) {          decode_cabac_residual_nondc(mb,16 * i,1,i,scan,1,qmul,15);        }      } else {        Rectangle.fill_rectangle_unsign(non_zero_count_cache,scan8[0],4,4,8,0,1);      }    } else {      int i8x8, i4x4;      for (i8x8=0; i8x8 < 4; i8x8++) {        if ((cbp & (1 << i8x8)) != 0) {          if ((mb_type & MB_TYPE_8x8DCT) != 0) {            decode_cabac_residual_nondc(mb,64 * i8x8,5,4 * i8x8,scan8x8,0,dequant8_coeff[((mb_type & 7) != 0) ? 0 : 1][s.qscale],64);          } else {            qmul=dequant4_coeff[((mb_type & 7) != 0) ? 0 : 3][s.qscale];            for (i4x4=0; i4x4 < 4; i4x4++) {              int index=4 * i8x8 + i4x4;              decode_cabac_residual_nondc(mb,16 * index,2,index,scan,0,qmul,16);            }          }        } else {          int[] nnz=non_zero_count_cache;          int nnz_offset=scan8[4 * i8x8];          nnz[nnz_offset + 0]=nnz[nnz_offset + 1]=nnz[nnz_offset + 8]=nnz[nnz_offset + 9]=0;        }      }    }    if ((cbp & 0x030) != 0) {      int c;      for (int j=0; j < 2; j++)       for (int k=0; k < 4; k++)       mb_chroma_dc[j][k]=0;      for (c=0; c < 2; c++) {        decode_cabac_residual_dc(mb_chroma_dc[c],0,3,CHROMA_DC_BLOCK_INDEX + c,H264Data.chroma_dc_scan,0,4);      }    }    if ((cbp & 0x020) != 0) {      int c, i;      for (c=0; c < 2; c++) {        qmul=dequant4_coeff[c + 1 + (((mb_type & 7) != 0) ? 0 : 3)][chroma_qp[c]];        for (i=0; i < 4; i++) {          int index=16 + 4 * c + i;          decode_cabac_residual_nondc(mb,16 * index,4,index,scan,1,qmul,15);        }      }    } else {      int[] nnz=non_zero_count_cache;      nnz[scan8[16] + 0]=nnz[scan8[16] + 1]=nnz[scan8[16] + 8]=nnz[scan8[16] + 9]=nnz[scan8[20] + 0]=nnz[scan8[20] + 1]=nnz[scan8[20] + 8]=nnz[scan8[20] + 9]=0;    }  } else {    int[] nnz=non_zero_count_cache;    Rectangle.fill_rectangle_unsign(nnz,scan8[0],4,4,8,0,1);    nnz[scan8[16] + 0]=nnz[scan8[16] + 1]=nnz[scan8[16] + 8]=nnz[scan8[16] + 9]=nnz[scan8[20] + 0]=nnz[scan8[20] + 1]=nnz[scan8[20] + 8]=nnz[scan8[20] + 9]=0;    last_qscale_diff=0;  }  s.current_picture.qscale_table[mb_xy]=s.qscale;  write_back_non_zero_count();  if (mb_mbaff != 0) {    ref_count[0]>>=1;    ref_count[1]>>=1;  }  return 0;}  }
class C{  public void fireSynapseTypeChanged(final SynapseUpdateRule oldRule,final SynapseUpdateRule learningRule){  for (  SynapseListener listener : synapseListeners) {    listener.synapseTypeChanged(new NetworkEvent<SynapseUpdateRule>(this,oldRule,learningRule));  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected Object constructObject(Node node){  if (constructedObjects.containsKey(node)) {    return constructedObjects.get(node);  }  if (recursiveObjects.contains(node)) {    throw new ConstructorException(null,null,"found unconstructable recursive node",node.getStartMark());  }  recursiveObjects.add(node);  Construct constructor=getConstructor(node);  Object data=constructor.construct(node);  constructedObjects.put(node,data);  recursiveObjects.remove(node);  if (node.isTwoStepsConstruction()) {    constructor.construct2ndStep(node,data);  }  return data;}  }
class C{  public static Combo createCombo(Composite parent,int style,int hspan,String[] items){  Combo c=new Combo(parent,style);  c.setFont(parent.getFont());  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  c.setLayoutData(gd);  if (items != null) {    c.setItems(items);  }  c.select(0);  return c;}  }
class C{  public void scan(JSONArray args){  Intent intentScan=new Intent(SCAN_INTENT);  intentScan.addCategory(Intent.CATEGORY_DEFAULT);  if (args.length() > 0) {    JSONObject obj;    JSONArray names;    String key;    Object value;    for (int i=0; i < args.length(); i++) {      try {        obj=args.getJSONObject(i);      } catch (      JSONException e) {        Log.i("CordovaLog",e.getLocalizedMessage());        continue;      }      names=obj.names();      for (int j=0; j < names.length(); j++) {        try {          key=names.getString(j);          value=obj.get(key);          if (value instanceof Integer) {            intentScan.putExtra(key,(Integer)value);          } else           if (value instanceof String) {            intentScan.putExtra(key,(String)value);          }        } catch (        JSONException e) {          Log.i("CordovaLog",e.getLocalizedMessage());          continue;        }      }    }  }  intentScan.setPackage(this.cordova.getActivity().getApplicationContext().getPackageName());  this.cordova.startActivityForResult((CordovaPlugin)this,intentScan,REQUEST_CODE);}  }
class C{  public static CnATreeElement extractElement(IEditorPart editor){  if (editor == null) {    return null;  }  IEditorInput input=editor.getEditorInput();  if (!(input instanceof BSIElementEditorInput)) {    return null;  }  BSIElementEditorInput elementInput=(BSIElementEditorInput)input;  if (elementInput.getCnAElement() == null) {    LOG.warn("Element in editor input is null.");    return null;  }  return elementInput.getCnAElement();}  }
class C{  public TimeInstant addSeconds(final int seconds){  return new TimeInstant(this.time + seconds);}  }
class C{  @Path("/clients/{clientId}/groups/{groupId}") @Timed @ExceptionMetered @PUT public Response enrollClient(@Auth User user,@PathParam("clientId") LongParam clientId,@PathParam("groupId") LongParam groupId){  logger.info("User {} enrolling clientId {} in groupId {}.",user.getName(),clientId,groupId);  try {    aclDAO.findAndEnrollClient(clientId.get(),groupId.get(),auditLog,user.getName(),new HashMap<>());  } catch (  IllegalStateException e) {    throw new NotFoundException();  }  return Response.ok().build();}  }
class C{  public SVGOMFontFaceNameElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  protected static boolean readYes() throws IOException {  return (System.in.read() == 'y');}  }
class C{  public CCachedSelectionCriterium(final SelectionState selectionState){  m_selectionState=selectionState;}  }
class C{  private boolean assertStaticType(Class<?> cls,Name n){  int local=n.index();  Class<?> aclass=localClasses[local];  if (aclass != null && (aclass == cls || cls.isAssignableFrom(aclass))) {    return true;  } else   if (aclass == null || aclass.isAssignableFrom(cls)) {    localClasses[local]=cls;  }  return false;}  }
class C{  public Builder(String dtedDirectory){  this(new DTEDDirectoryHandler(dtedDirectory));}  }
class C{  public void paintDesktopPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static Object convertNumberToWrapper(Number num,Class<?> wrapper){  if (wrapper.equals(String.class)) {    return num.toString();  } else   if (wrapper.equals(Boolean.class)) {    return Boolean.valueOf(num.intValue() == 1);  } else   if (wrapper.equals(Double.class)) {    return Double.valueOf(num.doubleValue());  } else   if (wrapper.equals(Long.class)) {    return Long.valueOf(num.longValue());  } else   if (wrapper.equals(Float.class)) {    return Float.valueOf(num.floatValue());  } else   if (wrapper.equals(Integer.class)) {    return Integer.valueOf(num.intValue());  } else   if (wrapper.equals(Short.class)) {    return Short.valueOf(num.shortValue());  } else   if (wrapper.equals(Byte.class)) {    return Byte.valueOf(num.byteValue());  }  return null;}  }
class C{  public boolean isNoStore(){  return noStore;}  }
class C{  @Override public void send(HandshakeIODataStream out){  if (exchange_keys.length != 0) {    if (!isRSA || isTLS) {      out.writeUint16(exchange_keys.length);    }    out.write(exchange_keys);  }}  }
class C{  public static void clear(){  mutationMap.clear();  mutationIdMap.clear();  numMutations=0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createElementNS06.class,args);}  }
class C{  public int read(byte[] bytes,int off,int len) throws IOException {  if (!buf.hasRemaining()) {    return -1;  }  len=Math.min(len,buf.remaining());  buf.get(bytes,off,len);  return len;}  }
class C{  public void readString(ASN1StringType type) throws IOException {  if (tag == type.id) {    readContent();  } else   if (tag == type.constrId) {    throw new ASN1Exception("Decoding constructed ASN.1 string type is not provided");  } else {    throw expected("string");  }}  }
class C{  private String entryAnnotationString(LocalList.Entry e){  StringBuilder sb=new StringBuilder();  sb.append(RegisterSpec.PREFIX);  sb.append(e.getRegister());  sb.append(' ');  CstString name=e.getName();  if (name == null) {    sb.append("null");  } else {    sb.append(name.toHuman());  }  sb.append(' ');  CstType type=e.getType();  if (type == null) {    sb.append("null");  } else {    sb.append(type.toHuman());  }  CstString signature=e.getSignature();  if (signature != null) {    sb.append(' ');    sb.append(signature.toHuman());  }  return sb.toString();}  }
class C{  public void accept(final MethodVisitor mv){  int i, j, n;  n=parameters == null ? 0 : parameters.size();  for (i=0; i < n; i++) {    ParameterNode parameter=parameters.get(i);    mv.visitParameter(parameter.name,parameter.access);  }  if (annotationDefault != null) {    AnnotationVisitor av=mv.visitAnnotationDefault();    AnnotationNode.accept(av,null,annotationDefault);    if (av != null) {      av.visitEnd();    }  }  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(mv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(mv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(mv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(mv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=visibleParameterAnnotations == null ? 0 : visibleParameterAnnotations.length;  for (i=0; i < n; ++i) {    List<?> l=visibleParameterAnnotations[i];    if (l == null) {      continue;    }    for (j=0; j < l.size(); ++j) {      AnnotationNode an=(AnnotationNode)l.get(j);      an.accept(mv.visitParameterAnnotation(i,an.desc,true));    }  }  n=invisibleParameterAnnotations == null ? 0 : invisibleParameterAnnotations.length;  for (i=0; i < n; ++i) {    List<?> l=invisibleParameterAnnotations[i];    if (l == null) {      continue;    }    for (j=0; j < l.size(); ++j) {      AnnotationNode an=(AnnotationNode)l.get(j);      an.accept(mv.visitParameterAnnotation(i,an.desc,false));    }  }  if (visited) {    instructions.resetLabels();  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    mv.visitAttribute(attrs.get(i));  }  if (instructions.size() > 0) {    mv.visitCode();    n=tryCatchBlocks == null ? 0 : tryCatchBlocks.size();    for (i=0; i < n; ++i) {      tryCatchBlocks.get(i).updateIndex(i);      tryCatchBlocks.get(i).accept(mv);    }    instructions.accept(mv);    n=localVariables == null ? 0 : localVariables.size();    for (i=0; i < n; ++i) {      localVariables.get(i).accept(mv);    }    n=visibleLocalVariableAnnotations == null ? 0 : visibleLocalVariableAnnotations.size();    for (i=0; i < n; ++i) {      visibleLocalVariableAnnotations.get(i).accept(mv,true);    }    n=invisibleLocalVariableAnnotations == null ? 0 : invisibleLocalVariableAnnotations.size();    for (i=0; i < n; ++i) {      invisibleLocalVariableAnnotations.get(i).accept(mv,false);    }    mv.visitMaxs(maxStack,maxLocals);    visited=true;  }  mv.visitEnd();}  }
class C{  private Integer[] createVertices(int count){  Integer[] v=new Integer[count];  for (int i=0; i < count; i++) {    v[i]=new Integer(i);    graph.addVertex(v[i]);  }  return v;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:59.508 -0500",hash_original_method="68F4A719CC13890482E2E4D067F0B6D6",hash_generated_method="352A5D5B42344D6A9110067E6C3F7EBC") public static boolean match(X509Certificate certificate,String thisDomain){  if (certificate == null || thisDomain == null || thisDomain.length() == 0) {    return false;  }  thisDomain=thisDomain.toLowerCase();  if (!isIpAddress(thisDomain)) {    return matchDns(certificate,thisDomain);  } else {    return matchIpAddress(certificate,thisDomain);  }}  }
class C{  public void debug(Object message){  ri.debug(message);}  }
class C{  private int[] calculateTaskCountPerContainer(int taskCount,int prevContainerCount,int currentContainerCount){  int[] newTaskCountPerContainer=new int[Math.max(currentContainerCount,prevContainerCount)];  Arrays.fill(newTaskCountPerContainer,0);  for (int i=0; i < currentContainerCount; i++) {    newTaskCountPerContainer[i]=taskCount / currentContainerCount;    if (taskCount % currentContainerCount > i) {      newTaskCountPerContainer[i]++;    }  }  return newTaskCountPerContainer;}  }
class C{  public void clear(){  this.rowKeys.clear();  this.columnKeys.clear();  this.rows.clear();}  }
class C{  @Override public String lastString(){  if (_lastvalue == null) {    _lastvalue=nextString();  }  return _lastvalue;}  }
class C{  protected static void property(List ps,String name,Class beanClass,Class editorClass){  try {    PropertyDescriptor pd=new PropertyDescriptor(name,beanClass);    if (editorClass != null)     pd.setPropertyEditorClass(editorClass);    ps.add(pd);  } catch (  Exception e) {  }}  }
class C{  public void paintToolBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintToolBarBackground(context,g,x,y,w,h);}  }
class C{  public void copyCasView(CAS aSrcCasView,boolean aCopySofa){  CAS targetView=getOrCreateView(mDestCas,aSrcCasView.getViewName());  if (aCopySofa) {    String sofaMime=aSrcCasView.getSofa().getSofaMime();    if (aSrcCasView.getDocumentText() != null) {      targetView.setSofaDataString(aSrcCasView.getDocumentText(),sofaMime);    } else     if (aSrcCasView.getSofaDataURI() != null) {      targetView.setSofaDataURI(aSrcCasView.getSofaDataURI(),sofaMime);    } else     if (aSrcCasView.getSofaDataArray() != null) {      targetView.setSofaDataArray(copyFs(aSrcCasView.getSofaDataArray()),sofaMime);    }  }  Set<FeatureStructure> indexedFs=new HashSet<FeatureStructure>();  Iterator<FSIndex<FeatureStructure>> indexes=aSrcCasView.getIndexRepository().getIndexes();  while (indexes.hasNext()) {    FSIndex<FeatureStructure> index=indexes.next();    Iterator<FeatureStructure> iter=index.iterator();    while (iter.hasNext()) {      FeatureStructure fs=iter.next();      if (!indexedFs.contains(fs)) {        FeatureStructure copyOfFs=copyFs(fs);        if (fs instanceof AnnotationFS) {          FeatureStructure sofa=((AnnotationFS)copyOfFs).getFeatureValue(mDestSofaFeature);          if (sofa == null) {            copyOfFs.setFeatureValue(mDestSofaFeature,targetView.getSofa());          }        }        if (!isDocumentAnnotation(copyOfFs)) {          targetView.addFsToIndexes(copyOfFs);        }        indexedFs.add(fs);      }    }  }}  }
class C{  public void removeCallback(KeyguardUpdateMonitorCallback callback){  if (DEBUG)   Log.v(TAG,"*** unregister callback for " + callback);  for (int i=mCallbacks.size() - 1; i >= 0; i--) {    if (mCallbacks.get(i).get() == callback) {      mCallbacks.remove(i);    }  }}  }
class C{  public Cube(float size,boolean isSkybox,boolean hasCubemapTexture,boolean createTextureCoordinates,boolean createVertexColorBuffer,boolean createVBOs){  super();  mIsSkybox=isSkybox;  mSize=size;  mHasCubemapTexture=hasCubemapTexture;  mCreateTextureCoords=createTextureCoordinates;  mCreateVertexColorBuffer=createVertexColorBuffer;  init(createVBOs);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.368 -0500",hash_original_method="1063C2554F38236C917DADCB6A55ADB8",hash_generated_method="707DF2990815E7D886CAB50CA5F51B6E") public SecurityVerifyHeader createSecurityVerifyHeader(){  SecurityVerify secVerify=new SecurityVerify();  return secVerify;}  }
class C{  public void testFloatValuePos(){  String a="1238096483923847.6356789029578E+21";  BigDecimal aNumber=new BigDecimal(a);  float result=1.2380965E36F;  assertTrue("incorrect value",aNumber.floatValue() == result);}  }
class C{  public Composer arc(long animDuration,float x,float y,float angle,int alpha,float scaleX,float scaleY,float rotation,Ease ease){  if (angle < 1f && angle > -1f) {    return to(animDuration,x,y,alpha,scaleX,scaleY,rotation,ease);  }  mTweenParameterList.add(new TweenParameter(x,y,alpha,scaleX,scaleY,rotation,animDuration,ease,angle));  return this;}  }
class C{  public void findBrokenClass() throws TestFailed, InvocationTargetException {  findDexClass(CLASS_NAME);}  }
class C{  public String decode(String pString) throws DecoderException {  if (pString == null) {    return null;  }  try {    return decodeText(pString);  } catch (  UnsupportedEncodingException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  public int nextClearBit(int fromIndex){  if (fromIndex < 0) {    throw new IndexOutOfBoundsException("fromIndex < 0: " + fromIndex);  }  int u=unitIndex(fromIndex);  if (u >= unitsInUse)   return fromIndex;  int testIndex=(fromIndex & BIT_INDEX_MASK);  long unit=bits[u] >> testIndex;  if (unit == (WORD_MASK >> testIndex)) {    testIndex=0;  }  while ((unit == WORD_MASK) && (u < unitsInUse - 1))   unit=bits[++u];  if (unit == WORD_MASK) {    return length();  }  if (unit == 0) {    return u * BITS_PER_UNIT + testIndex;  }  testIndex+=trailingZeroCnt(~unit);  return ((u * BITS_PER_UNIT) + testIndex);}  }
class C{  public void clearAssertionStatus(){  VM.sysWriteln("TODO ClassLoader.clearAssertionStatus");  return;}  }
class C{  public void liberaUnidadInstalacion(String idUnidadInstalacion){  checkPermission(DepositoSecurityManager.MODIFICAR_ELEMENTO_ACTION);  LoggingEvent event=AuditDeposito.getLogginEventLiberaUinstalacion(this);  iniciarTransaccion();  _huecoDBEntity.liberaUnidadInstalacion(idUnidadInstalacion);  AuditDeposito.addDataLogInfoUInstalacion(event,idUnidadInstalacion);  commit();}  }
class C{  public JCVariableDecl Param(Name name,Type argtype,Symbol owner){  return VarDef(new VarSymbol(PARAMETER,name,argtype,owner),null);}  }
class C{  private void updateSite(String site){  if (mSite == null || (site != null && !mSite.contentEquals(site))) {    mSite=site;    broadcast(ChangedAttribute.SITE);    if (hasAliasList()) {      Alias alias=getAliasList().getSiteID(mSite);      if (alias != null) {        mSiteAlias=alias.getName();      } else {        mSiteAlias=null;      }    }    broadcast(ChangedAttribute.SITE_ALIAS);  }}  }
class C{  public boolean contains(final char[] a){  int i=d, l=a.length;  long bits[]=this.bits;  while (i-- != 0)   if (!get(bits,hash(a,l,i)))   return false;  return true;}  }
class C{  public AsciiToImageConverter(final AsciiImgCache characterCacher,final BestCharacterFitStrategy characterFitStrategy){  super(characterCacher,characterFitStrategy);}  }
class C{  @PostConstruct public void test() throws Exception {  @SuppressWarnings("unchecked") ZoneAwareLoadBalancer<Server> lb=(ZoneAwareLoadBalancer<Server>)this.clientFactory.getLoadBalancer("baz");  ServerList<Server> serverList=lb.getServerListImpl();  if (!(serverList instanceof MyDefaultRibbonConfig.BazServiceList)) {    throw new Exception("wrong server list type");  }}  }
class C{  private boolean isSetterMethod(IMethod method) throws JavaModelException {  String methodName=method.getElementName();  return methodName.startsWith(SETTER_PREFIX) && methodName.length() > SETTER_PREFIX_LENGTH && Character.isUpperCase(methodName.charAt(SETTER_PREFIX_LENGTH)) && Flags.isPublic(method.getFlags()) && !Flags.isStatic(method.getFlags()) && Signature.SIG_VOID.equals(method.getReturnType());}  }
class C{  public final boolean isNullConstant(){  JavaConstant value=asJavaConstant();  return value != null && value.isNull();}  }
class C{  protected void notifyChangingListeners(int oldValue,int newValue){  for (  OnWheelChangedListener listener : changingListeners) {    listener.onChanged(this,oldValue,newValue);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.889 -0500",hash_original_method="8D1A748741E986595DDAF37DACF7707E",hash_generated_method="56022E42011686843A810B775EA12434") void _setDo(int option){  _options[option]|=_DO_MASK;  if (_requestedDo(option)) {    if (optionHandlers[option] != null) {      optionHandlers[option].setDo(true);      int subneg[]=optionHandlers[option].startSubnegotiationRemote();      if (subneg != null) {        try {          _sendSubnegotiation(subneg);        } catch (        Exception e) {          System.err.println("Exception in option subnegotiation" + e.getMessage());        }      }    }  }}  }
class C{  public IonValue singleValue(Iterator<IonValue> iterator){  IonValue value=null;  if (iterator.hasNext()) {    value=iterator.next();    if (iterator.hasNext()) {      IonValue part=iterator.next();      fail("Found unexpected part: " + part);    }  }  return value;}  }
class C{  public void valueOf(final Type type){  if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {    return;  }  if (type == Type.VOID_TYPE) {    push((String)null);  } else {    Type boxed=getBoxedType(type);    invokeStatic(boxed,new Method("valueOf",boxed,new Type[]{type}));  }}  }
class C{  public AnalogPrototype lptobp(double omega1,double omega2){  double BW=omega2 - omega1;  double prod=omega1 * omega2;  double[] tn={prod,0.0,1.0};  double[] td={0.0,BW};  Rational T=new Rational(tn,td);  AnalogPrototype retval=new AnalogPrototype();  double A=1.0;  for (int i=0; i < sections.size(); i++) {    Rational section=sections.get(i);    Rational Tsection=section.map(T);    A*=Tsection.canonicalForm();    int[] order=section.order();    if (order[0] < 2 && order[1] < 2)     retval.addSection(Tsection); else     if (order[1] == 2) {      Polynomial[] DT=lptobpFactors(section.denominator(),BW,prod);      double[] t1={0.0,1.0};      if (order[0] == 0) {        retval.addSection(new Rational(new Polynomial(t1),DT[0]));        retval.addSection(new Rational(new Polynomial(t1),DT[1]));      } else       if (order[0] == 1) {        retval.addSection(new Rational(new Polynomial(t1),DT[0]));        double[] t2=new double[3];        double[] tc=Tsection.numerator().coefficients();        for (int j=0; j < 3; j++)         t2[j]=tc[j + 1];        retval.addSection(new Rational(new Polynomial(t2),DT[1]));      } else       if (order[0] == 2) {        Polynomial[] NT=lptobpFactors(section.numerator(),BW,prod);        retval.addSection(new Rational(NT[0],DT[0]));        retval.addSection(new Rational(NT[1],DT[1]));      }    }  }  retval.sections.get(0).timesEquals(A);  return retval;}  }
class C{  Entry removeMapping(Object o){  if (!(o instanceof Map.Entry)) {    return null;  }  Map.Entry entry=(Map.Entry)o;  Object k=maskNull(entry.getKey());  int hash=hash(k);  int i=indexFor(hash,table.length);  Entry prev=table[i];  Entry e=prev;  while (e != null) {    Entry next=e.next;    if (e.hash == hash && e.equals(entry)) {      modCount++;      size--;      if (prev == e)       table[i]=next; else       prev.next=next;      e.recordRemoval(this);      return e;    }    prev=e;    e=next;  }  return e;}  }
class C{  public Boolean isIpv6LinkLocalAutoConfigurationEnabled(){  return ipv6LinkLocalAutoConfigurationEnabled;}  }
class C{  private Object cloneObject(Object object){  if (object == null) {    return null;  }  Class<?> cls=multiplexManager.getDictionary().lookupEntityClass(object.getClass());  try {    Object clone=cls.newInstance();    for (    Field field : cls.getFields()) {      field.set(clone,field.get(object));    }    for (    Method method : cls.getMethods()) {      if (method.getName().startsWith("set")) {        try {          Method getMethod=cls.getMethod("get" + method.getName().substring(3));          method.invoke(clone,getMethod.invoke(object));        } catch (        IllegalStateException|IllegalArgumentException|ReflectiveOperationException|SecurityException e) {          return null;        }      }    }    return clone;  } catch (  InstantiationException|IllegalAccessException e) {  }  return null;}  }
class C{  @Override protected Node removeFromFrontier(){  Node result=frontier.remove();  explored.add(result.getState());  frontierStates.remove(result.getState());  updateMetrics(frontier.size());  return result;}  }
class C{  public boolean isVariable(String symbol){  return (variables.containsKey(symbol));}  }
class C{  public void init(){  ThreadFactory.LOGGER.info("Thread max: " + ThreadFactory.THREAD_MAX);  ThreadFactory.LOGGER.info("Thread core: " + ThreadFactory.THREAD_CORE);  ThreadFactory.LOGGER.info("Thread queue: " + ThreadFactory.THREAD_QUEUE);  this.threads=new ThreadPoolExecutor(ThreadFactory.THREAD_CORE,ThreadFactory.THREAD_MAX,ThreadFactory.THREAD_KEEPALIVE,TimeUnit.MILLISECONDS,new ArrayBlockingQueue<Runnable>(ThreadFactory.THREAD_QUEUE),new ThreadPoolExecutor.CallerRunsPolicy());}  }
class C{  @Override protected void visitAll(@SuppressWarnings("rawtypes") List acus,RuleContext ctx){  lastLineParsed=-1;  currentVisibility=DelphiLexer.PUBLISHED;  inImplementationSection=false;  init();  for (Iterator<?> i=acus.iterator(); i.hasNext(); ) {    DelphiPMDNode node=(DelphiPMDNode)i.next();    ASTTree ast=node.getASTTree();    if (ast != null) {      String codeLine=node.getASTTree().getFileSourceLine(node.getLine());      if (codeLine.trim().endsWith("//NOSONAR") && node.getLine() + 1 > lastLineParsed) {        lastLineParsed=node.getLine() + 1;      }    }    if (node.getLine() >= lastLineParsed) {      updateVisibility(node);      if (!inImplementationSection) {        inImplementationSection=node.getType() == DelphiLexer.IMPLEMENTATION;      }      visit(node,ctx);      lastLineParsed=node.getLine();    }  }}  }
class C{  public E pop(){  E o=list[--size];  return o;}  }
class C{  private boolean arrived(){  if ((moveRate > 0 && currentIndex >= endIndex) || (moveRate < 0 && currentIndex <= startIndex)) {    return true;  }  return false;}  }
class C{  public int next(){  int node;  for (node=_currentNode; node != END; node=getNextNamespaceNode(_startNode,node,true)) {    if (getExpandedTypeID(node) == _nodeType || getNodeType(node) == _nodeType || getNamespaceType(node) == _nodeType) {      _currentNode=node;      return returnNode(node);    }  }  return (_currentNode=END);}  }
class C{  public CResultsTable(final ZyGraph graph,final CSpecialInstructionsModel model){  m_graph=graph;  m_model=model;  m_tableModel=new CResultsTableModel(model);  setModel(m_tableModel);  final TableRowSorter<CResultsTableModel> sorter=new TableRowSorter<CResultsTableModel>(m_tableModel);  sorter.setComparator(CResultsTableModel.TYPE_COLUMN,new CTypeComparator());  sorter.setComparator(CResultsTableModel.ADDRESS_COLUMN,new HexStringComparator());  setRowSorter(sorter);  getColumnModel().getColumn(CResultsTableModel.TYPE_COLUMN).setCellRenderer(new CTypeColumnRenderer());  getColumnModel().getColumn(CResultsTableModel.INSTRUCTION_COLUMN).setCellRenderer(new CMonospaceRenderer());  final InternalSelectionListener listener=new InternalSelectionListener();  getSelectionModel().addListSelectionListener(listener);  addMouseListener(listener);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public byte receiveOneByte(){  Log.d(TAG,"receiveOneByte() entrance");  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    Log.d(TAG,"receive: " + (0 + mReceivePacket.getData()[0]));    return mReceivePacket.getData()[0];  } catch (  IOException e) {    e.printStackTrace();  }  return Byte.MIN_VALUE;}  }
class C{  @Override public double doubleValue(){  return value;}  }
class C{  public boolean isReady(){  return hasLoaded() && isCompiled();}  }
class C{  public JPanelConfiguration(AppView oApp){  this();  if (oApp != null) {    jbtnExit.setVisible(false);  }}  }
class C{  public Long sort(final String key,final SortingParams sortingParameters,final String dstkey){  checkIsInMulti();  client.sort(key,sortingParameters,dstkey);  return client.getIntegerReply();}  }
class C{  public static boolean classLoaderIsAncestor(Class<?> parentClass,Class<?> childClass){  return loadersAreRelated(parentClass.getClassLoader(),childClass.getClassLoader(),true);}  }
class C{  private static void printPaginationInfo(GaData gaData){  System.out.println("Pagination Info:");  System.out.println("Previous Link: " + gaData.getPreviousLink());  System.out.println("Next Link: " + gaData.getNextLink());  System.out.println("Items Per Page: " + gaData.getItemsPerPage());  System.out.println("Total Results: " + gaData.getTotalResults());}  }
class C{  public static String encodeFromFile(String filename){  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0)     length+=numBytes;    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    System.err.println("Error encoding from file " + filename);  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public StandardProblems(){  super();}  }
class C{  public synchronized int size(){  return count;}  }
class C{  public static boolean hasFindBugsNature(IProject project){  try {    return ProjectUtilities.isJavaProject(project) && project.hasNature(FindbugsPlugin.NATURE_ID);  } catch (  CoreException e) {    FindbugsPlugin.getDefault().logException(e,"Error while testing FindBugs nature for project " + project);  }  return false;}  }
class C{  final public void println(long v){  try {    _out.println(v);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  @Override public Iterator<Example> iterator(){  return new AttributesExampleReader(parent.iterator(),this);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  char[] separator={'[',' '};  int n=rows.length;  for (int i=0; i < n; i++) {    separator[0]='{';    for (int j=0; j <= i; j++) {      sb.append(separator);      sb.append(rows[i][j]);      separator[0]=' ';    }    sb.append('}');    sb.append('\n');  }  return sb.toString();}  }
class C{  public void senderNodeId(UUID sndNodeId){  this.sndNodeId=sndNodeId;}  }
class C{  public static <T>T use(Object self,List<Class> categoryClassList,Closure<T> closure){  return GroovyCategorySupport.use(categoryClassList,closure);}  }
class C{  @NonNull public static Set<String> generateSignatureHashes(@NonNull Signature[] signatures){  Set<String> signatureHashes=new HashSet<>();  for (  Signature signature : signatures) {    signatureHashes.add(generateSignatureHash(signature));  }  return signatureHashes;}  }
class C{  public DKeyIdentifierChooser(JFrame parent,String title,PublicKey publicKey,byte[] keyIdentifier) throws CryptoException {  super(parent,title,ModalityType.DOCUMENT_MODAL);  this.publicKey=publicKey;  initComponents(keyIdentifier);}  }
class C{  private void disableColumnForm(){  editColumnIndex=-1;  txtColumnName.setText("");  txtColumnLogicalName.setText("");  cmbColumnType.setText("");  txtColumnSize.setText("");  chkIsPK.setSelection(false);  chkNotNull.setSelection(false);  autoIncrement.setSelection(false);  defaultValue.setText("");  txtColumnName.setEnabled(false);  txtColumnLogicalName.setEnabled(false);  cmbColumnType.setEnabled(false);  txtColumnSize.setEnabled(false);  txtColumnDescription.setEnabled(false);  chkIsPK.setEnabled(false);  chkNotNull.setEnabled(false);  autoIncrement.setEnabled(false);  defaultValue.setEnabled(false);}  }
class C{  public VertexAtom(final String id,final String label){  super(id,label);}  }
class C{  private void startRecording(boolean trackStarted){  sensorManager=SensorManagerFactory.getSystemSensorManager(this);  lastLocation=null;  currentSegmentHasLocation=false;  isIdle=false;  startGps();  sendTrackBroadcast(trackStarted ? R.string.track_started_broadcast_action : R.string.track_resumed_broadcast_action,recordingTrackId);  voiceExecutor.restore();  splitExecutor.restore();}  }
class C{  protected void startActivityForResult(Intent intent,int code){  if (fragment == null) {    activity.startActivityForResult(intent,code);  } else {    fragment.startActivityForResult(intent,code);  }}  }
class C{  public void mapVolumeToSCSIInitiator(String volumeId,String initiatorId) throws Exception {  log.info("mapping to scsi");  String uri=ScaleIOConstants.getMapVolumeToScsiInitiatorURI(volumeId);  ScaleIOMapVolumeToScsiInitiator mapParm=new ScaleIOMapVolumeToScsiInitiator();  mapParm.setScsiInitiatorId(initiatorId);  mapParm.setAllowMultipleMapp("TRUE");  post(URI.create(uri),getJsonForEntity(mapParm));}  }
class C{  public SortedEvictionPolicy(){  this(DFLT_CACHE_SIZE,null);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case RegularExpressionPackage.GROUP__PATTERN:    return basicSetPattern(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  Vector processSIMPLEPATTERNLIST(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  try {    StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");    int nPatterns=tokenizer.countTokens();    Vector patterns=new Vector(nPatterns);    for (int i=0; i < nPatterns; i++) {      XPath pattern=handler.createMatchPatternXPath(tokenizer.nextToken(),owner);      patterns.addElement(pattern);    }    return patterns;  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public BreadCrumbsView(final String id,final long shopId,final long categoryId){  super(id);  this.categoryId=categoryId;  this.shopId=shopId;}  }
class C{  public void toEPL(StringWriter writer){  writer.write(namespace);  writer.write(':');  writer.write(name);  String delimiter="";  writer.write('(');  for (  Expression param : parameters) {    writer.write(delimiter);    param.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);    delimiter=",";  }  writer.write(')');}  }
class C{  public static void shift(double[] a,double b){  for (int i=0; i < a.length; i++) {    a[i]=a[i] + b;  }}  }
class C{  public Builder withSerializer(Serializer serializer){  this.serializer=Assert.notNull(serializer,"serializer");  return this;}  }
class C{  protected void doInvoke(IgniteInClosureX<BinaryRawWriterEx> task,@Nullable PlatformCacheStoreCallback cb) throws IgniteCheckedException {  try (PlatformMemory mem=platformCtx.memory().allocate()){    PlatformOutputStream out=mem.output();    BinaryRawWriterEx writer=platformCtx.writer(out);    task.apply(writer);    out.synchronize();    int res=platformCtx.gateway().cacheStoreInvoke(ptr,mem.pointer(),cb);    if (res != 0) {      Object nativeErr=platformCtx.reader(mem.input()).readObjectDetached();      throw platformCtx.createNativeException(nativeErr);    }  } }  }
class C{  public void addAttribute(String uri,String localName,String rawName,String type,String value,boolean xslAttribute) throws SAXException {  if (m_elemContext.m_startTagOpen) {    boolean was_added=addAttributeAlways(uri,localName,rawName,type,value,xslAttribute);    if (was_added && !xslAttribute && !rawName.startsWith("xmlns")) {      String prefixUsed=ensureAttributesNamespaceIsDeclared(uri,localName,rawName);      if (prefixUsed != null && rawName != null && !rawName.startsWith(prefixUsed)) {        rawName=prefixUsed + ":" + localName;      }    }    addAttributeAlways(uri,localName,rawName,type,value,xslAttribute);  } else {    String msg=Utils.messages.createMessage(MsgKey.ER_ILLEGAL_ATTRIBUTE_POSITION,new Object[]{localName});    try {      Transformer tran=super.getTransformer();      ErrorListener errHandler=tran.getErrorListener();      if (null != errHandler && m_sourceLocator != null)       errHandler.warning(new TransformerException(msg,m_sourceLocator)); else       System.out.println(msg);    } catch (    TransformerException e) {      SAXException se=new SAXException(e);      throw se;    }  }}  }
class C{  @Override public Node insertChildAt(Node toInsert,int index){  if (toInsert instanceof Element && getDocumentElement() != null) {    throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,"Only one root element allowed");  }  if (toInsert instanceof DocumentType && getDoctype() != null) {    throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,"Only one DOCTYPE element allowed");  }  return super.insertChildAt(toInsert,index);}  }
class C{  public Task uploadImage(String inputFileName,String replicationType) throws IOException {  String path=getBasePath();  HttpResponse response=this.restClient.upload(path,inputFileName,ImmutableMap.of("IMAGEREPLICATION",replicationType));  this.restClient.checkResponse(response,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(response);}  }
class C{  public static boolean equals(String filename1,String filename2,boolean normalized,IOCase caseSensitivity){  if (filename1 == null || filename2 == null)   return filename1 == null && filename2 == null;  if (normalized) {    filename1=normalize(filename1);    filename2=normalize(filename2);    if (filename1 == null || filename2 == null) {      throw new NullPointerException("Error normalizing one or both of the file names");    }  }  if (caseSensitivity == null)   caseSensitivity=IOCase.SENSITIVE;  return caseSensitivity.checkEquals(filename1,filename2);}  }
class C{  protected StringEvaluatorImpl(){  super();}  }
class C{  public static Message obtain(){synchronized (sPoolSync) {    if (sPool != null) {      Message m=sPool;      sPool=m.next;      m.next=null;      sPoolSize--;      return m;    }  }  return new Message();}  }
class C{  void readAAT(E00Record r,int n) throws IOException {  OMGraphic og;  int type=Integer.MIN_VALUE;  int val=Integer.MIN_VALUE;  int itype=r.getItemIndex(prefix.substring(0,2) + "LNTYPE");  int ival=r.getItemIndex(prefix.substring(0,2) + "LNVAL");  int iID=r.getItemIndex(prefix.substring(0,2) + "NET-ID");  int ID=-1;  for (int i=0; i < n; i++) {    r.read(isr);    if ((itype == -1) && (ival == -1))     continue;    og=arcs.getOMGraphicAt(i);    if (itype != -1) {      type=r.getIntField(itype);      og.setLinePaint(getArcPaint(type));    }    if (ival != -1)     val=r.getIntField(ival);    if (iID != -1)     ID=r.getIntField(iID);    E00Data data=(E00Data)og.getAttribute(OMGraphic.APP_OBJECT);    data.type=type;    data.valeur=val;    data.valeur2=val;    data.ID=ID;  }}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public static boolean isXML11InternalEntityContent(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_CONTENT_INTERNAL) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public byte[] constructSignedChunk(int userDataLen,byte[] userData){  byte[] dataToChunk;  if (userDataLen == 0) {    dataToChunk=FINAL_CHUNK;  } else {    if (userDataLen < userData.length) {      dataToChunk=new byte[userDataLen];      System.arraycopy(userData,0,dataToChunk,0,userDataLen);    } else {      dataToChunk=userData;    }  }  StringBuilder chunkHeader=new StringBuilder();  chunkHeader.append(Integer.toHexString(dataToChunk.length));  String nonsigExtension="";  String chunkStringToSign=CHUNK_STRING_TO_SIGN_PREFIX + "\n" + dateTimeStamp+ "\n"+ scope+ "\n"+ lastComputedSignature+ "\n"+ BinaryUtils.toHex(AWS4SignerBase.hash(nonsigExtension))+ "\n"+ BinaryUtils.toHex(AWS4SignerBase.hash(dataToChunk));  String chunkSignature=BinaryUtils.toHex(AWS4SignerBase.sign(chunkStringToSign,signingKey,"HmacSHA256"));  lastComputedSignature=chunkSignature;  chunkHeader.append(nonsigExtension).append(CHUNK_SIGNATURE_HEADER).append(chunkSignature);  chunkHeader.append(CLRF);  try {    byte[] header=chunkHeader.toString().getBytes("UTF-8");    byte[] trailer=CLRF.getBytes("UTF-8");    byte[] signedChunk=new byte[header.length + dataToChunk.length + trailer.length];    System.arraycopy(header,0,signedChunk,0,header.length);    System.arraycopy(dataToChunk,0,signedChunk,header.length,dataToChunk.length);    System.arraycopy(trailer,0,signedChunk,header.length + dataToChunk.length,trailer.length);    return signedChunk;  } catch (  Exception e) {    throw new RuntimeException("Unable to sign the chunked data. " + e.getMessage(),e);  }}  }
class C{  public int width(){  if (width == null)   return NO_WIDTH;  return width;}  }
class C{  public static String convertKey(String key,int m_windowNo){  String k=m_windowNo + "|";  if (key.startsWith(k)) {    String retValue=WINDOW_CONTEXT_PREFIX + key.substring(k.length());    retValue=Util.replace(retValue,"|","_");    return retValue;  } else {    String retValue=null;    if (key.startsWith("#"))     retValue=GLOBAL_CONTEXT_PREFIX + key.substring(1); else     retValue=key;    retValue=Util.replace(retValue,"#","_");    return retValue;  }}  }
class C{  public LensMagnificationGraphMousePlugin(int modifiers){  this(modifiers,1.0f,4.0f,.2f);}  }
class C{  public boolean isRegAnti(){  return (flags & REG_ANTI) != 0;}  }
class C{  public DriverTask createVolumes(List<StorageVolume> volumes,StorageCapabilities storageCapabilities){  DriverTask task=new DellSCDriverTask("createVolume");  StringBuilder errBuffer=new StringBuilder();  int volumesCreated=0;  for (  StorageVolume volume : volumes) {    LOG.debug("Creating volume {} on system {}",volume.getDisplayName(),volume.getStorageSystemId());    String ssn=volume.getStorageSystemId();    try {      StorageCenterAPI api=connectionManager.getConnection(ssn);      ScVolume scVol=api.createVolume(ssn,volume.getDisplayName(),volume.getStoragePoolId(),SizeUtil.byteToMeg(volume.getRequestedCapacity()),volume.getConsistencyGroup());      volume.setProvisionedCapacity(SizeUtil.sizeStrToBytes(scVol.configuredSize));      volume.setAllocatedCapacity(0L);      volume.setWwn(scVol.deviceId);      volume.setNativeId(scVol.instanceId);      volume.setDeviceLabel(scVol.name);      volume.setAccessStatus(AccessStatus.READ_WRITE);      volumesCreated++;      LOG.info("Created volume '{}'",scVol.name);    } catch (    StorageCenterAPIException|DellSCDriverException dex) {      String error=String.format("Error creating volume %s: %s",volume.getDisplayName(),dex);      LOG.error(error);      errBuffer.append(String.format("%s%n",error));    }  }  task.setMessage(errBuffer.toString());  if (volumesCreated == volumes.size()) {    task.setStatus(TaskStatus.READY);  } else   if (volumesCreated == 0) {    task.setStatus(TaskStatus.FAILED);  } else {    task.setStatus(TaskStatus.PARTIALLY_FAILED);  }  return task;}  }
class C{  public static double[][] H(Instances D){  int C[][]=getC(D);  return H(C,D.classIndex());}  }
class C{  public InMemoryMessageIdProvider(final NetworkConfig config){  if (config == null) {    throw new NullPointerException("Config must not be null");  }  this.config=config;  trackers=new LeastRecentlyUsedCache<>(config.getInt(NetworkConfig.Keys.MAX_ACTIVE_PEERS,500000),config.getLong(NetworkConfig.Keys.MAX_PEER_INACTIVITY_PERIOD,36 * 60 * 60));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.626 -0500",hash_original_method="1A1413577F7152F2ECD6922D2D24CEE2",hash_generated_method="950DE6C5B1F761D93F899644CB882D70") public static String cdmaCheckAndProcessPlusCode(String dialStr){  if (!TextUtils.isEmpty(dialStr)) {    if (isReallyDialable(dialStr.charAt(0)) && isNonSeparator(dialStr)) {      String currIso=SystemProperties.get(PROPERTY_OPERATOR_ISO_COUNTRY,"");      String defaultIso=SystemProperties.get(PROPERTY_ICC_OPERATOR_ISO_COUNTRY,"");      if (!TextUtils.isEmpty(currIso) && !TextUtils.isEmpty(defaultIso)) {        return cdmaCheckAndProcessPlusCodeByNumberFormat(dialStr,getFormatTypeFromCountryCode(currIso),getFormatTypeFromCountryCode(defaultIso));      }    }  }  return dialStr;}  }
class C{  private static InputStream transform(final TransformerFactory factory,final InputStream xml) throws TransformerException {  final byte[] input;  try {    input=RsXslt.consume(xml);  } catch (  final IOException ex) {    throw new IllegalStateException(ex);  }  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  final Source xsl=RsXslt.stylesheet(factory,new StreamSource(new Utf8InputStreamReader(new ByteArrayInputStream(new Utf8String(input).bytes()))));  RsXslt.transformer(factory,xsl).transform(new StreamSource(new Utf8InputStreamReader(new ByteArrayInputStream(new Utf8String(input).bytes()))),new StreamResult(new Utf8OutputStreamWriter(baos)));  return new ByteArrayInputStream(new Utf8String(baos.toByteArray()).bytes());}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  @Override protected Iterable<Form> searchImpl(RequestContext context,long snapshotTime){  return getCharts(formService);}  }
class C{  public JTableHelper(JTable jtable){  this.jtable=jtable;}  }
class C{  private void reconcileFCEndpoints(NetworkSystem dev,List<FCEndpoint> currentConnections) throws IOException {  URIQueryResultList uriList=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getNetworkSystemFCPortConnectionConstraint(dev.getId()),uriList);  Map<String,FCEndpoint> existingEndpoints=new HashMap<String,FCEndpoint>();  for (  URI uriold : uriList) {    FCEndpoint connection=dbClient.queryObject(FCEndpoint.class,uriold);    if (connection != null) {      existingEndpoints.put(connection.getRemotePortName().toUpperCase(),connection);    }  }  List<FCEndpoint> updated=new ArrayList<FCEndpoint>();  List<FCEndpoint> created=new ArrayList<FCEndpoint>();  Set<String> processedWwpns=new HashSet<String>();  int conflictingEndpoints=0;  for (  FCEndpoint current : currentConnections) {    String key=current.getRemotePortName().toUpperCase();    processedWwpns.add(key);    FCEndpoint existing=existingEndpoints.get(key);    if (existing == null) {      current.setNetworkDevice(dev.getId());      current.setId(URIUtil.createId(FCEndpoint.class));      created.add(current);      conflictingEndpoints+=removeConflictingEndpoints(key,current.getFabricWwn(),dev.getId());    } else {      boolean modified=checkUpdated(existing,current);      if (existing.getAwolCount() > 0) {        modified=true;        existing.setAwolCount(0);        existing.setAwolTime(null);      }      if (modified) {        updated.add(existing);        conflictingEndpoints+=removeConflictingEndpoints(key,current.getFabricWwn(),dev.getId());      }    }  }  for (  String key : processedWwpns) {    existingEndpoints.remove(key);  }  Integer removedCount=0;  for (  FCEndpoint entry : existingEndpoints.values()) {    int count=entry.getAwolCount();    if (count == 0) {      entry.setAwolTime(System.currentTimeMillis());    }    entry.setAwolCount(++count);    if (count >= _minAwolSamples && (System.currentTimeMillis() - entry.getAwolTime()) > _minAwolTime) {      removedCount++;      dbClient.removeObject(entry);    } else {      updated.add(entry);    }  }  dbClient.createObject(created);  dbClient.updateAndReindexObject(updated);  _log.info(MessageFormat.format("{0} new connections persisted",created.size()).toString());  _log.info(MessageFormat.format("{0} updated connections persisted",updated.size()).toString());  _log.info(MessageFormat.format("{0} missing connections",existingEndpoints.values().size()).toString());  _log.info(MessageFormat.format("{0} removed connections",removedCount.toString()));  _log.info(MessageFormat.format("{0} conflicting connections (removed)",conflictingEndpoints));}  }
class C{  public static void main(String[] args) throws Exception {  String region="eu-west-1";  if (args.length > 0) {    region=args[0];  }  CloudWatchCollector jc=new CloudWatchCollector(("{" + "`region`: `" + region + "`,"+ "`metrics`: [{`aws_namespace`: `AWS/ELB`, `aws_metric_name`: `RequestCount`, `aws_dimensions`: [`AvailabilityZone`, `LoadBalancerName`]}] ,"+ "}").replace('`','"'));  for (  MetricFamilySamples mfs : jc.collect()) {    System.out.println(mfs);  }}  }
class C{  protected void paintText(Graphics g,JComponent c,Rectangle textRect,String text){  AbstractButton b=(AbstractButton)c;  ButtonModel model=b.getModel();  FontMetrics fm=SwingUtilities2.getFontMetrics(c,g);  int mnemonicIndex=b.getDisplayedMnemonicIndex();  if (model.isEnabled()) {    g.setColor(b.getForeground());    SwingUtilities2.drawStringUnderlineCharAt(c,g,text,mnemonicIndex,textRect.x + getTextShiftOffset(),textRect.y + fm.getAscent() + getTextShiftOffset());  } else {    g.setColor(b.getBackground().brighter());    SwingUtilities2.drawStringUnderlineCharAt(c,g,text,mnemonicIndex,textRect.x,textRect.y + fm.getAscent());    g.setColor(b.getBackground().darker());    SwingUtilities2.drawStringUnderlineCharAt(c,g,text,mnemonicIndex,textRect.x - 1,textRect.y + fm.getAscent() - 1);  }}  }
class C{  public MultisigAggregateModificationTransaction(final int version,final TimeInstant timeStamp,final Account sender,final Collection<MultisigCosignatoryModification> cosignatoryModifications,final MultisigMinCosignatoriesModification minCosignatoriesModification){  super(TransactionTypes.MULTISIG_AGGREGATE_MODIFICATION,version,timeStamp,sender);  this.cosignatoryModifications=null == cosignatoryModifications ? null : new ArrayList<>(cosignatoryModifications);  this.minCosignatoriesModification=minCosignatoriesModification;  VALIDATION_EXTENSIONS.validate(this);  assert this.cosignatoryModifications != null;  Collections.sort(this.cosignatoryModifications);}  }
class C{  private static void initializeReleaseVersion(){synchronized (INIT_VERSION_LOCK) {    currentVersion=readResourceProperty(VERSION_PROPERTY_KEY);    if (currentVersion == null) {      logInfo("Could not read current version from resources. Looking for 'gradle.properties'...");      currentVersion=readConfigProperty(GRADLE_PROPERTIES,VERSION_PROPERTY_KEY);      if (currentVersion == null) {        throw new IllegalStateException("Could not initialize RapidMiner Studio version from properties file");      }    }  }}  }
class C{  public static TableIndex findReferencedIndex(Table referencedTable,List<Column> referencedColumns){  return findIndex(referencedTable,referencedColumns,true);}  }
class C{  public TupleQueryResultFormat(String name,String mimeType,Charset charset,String fileExt){  super(name,mimeType,charset,fileExt);}  }
class C{  public void testConcurrentUnknownHostPing() throws Exception {  HostAddressService has=new HostAddressService(true);  has.setTimeout(2000);  HostAddress address=HostAddressService.getByName(UNKNOWN_IP);  this.doConcurrentPing(has,address,10,2,false);}  }
class C{  public static byte[][] convert(final MultipartFile... files) throws IOException {  if (files != null) {    final List<Resource> resources=new ArrayList<Resource>(files.length);    for (    final MultipartFile file : files) {      resources.add(new MultipartFileResourceAdapter(file));    }    return convert(resources.toArray(new Resource[resources.size()]));  }  return new byte[0][];}  }
class C{  private boolean saveDataToDisk(boolean exit,boolean complete,String updatedSaveName){  return saveDataToDisk(exit,complete,updatedSaveName,true);}  }
class C{  public boolean addRef(Object object) throws IOException {  if (_refs == null)   _refs=new IdentityHashMap();  Integer ref=(Integer)_refs.get(object);  if (ref != null) {    int value=ref.intValue();    writeRef(value);    return true;  } else {    _refs.put(object,new Integer(_refs.size()));    return false;  }}  }
class C{  protected void rejectUserUndefined(MailAddress recipient) throws MessagingException {  if (!isLeaveUserUndefined())   setMessageDeleted();  if (isMarkUserUndefinedSeen())   setMessageSeen();  StringBuilder messageBuffer=new StringBuilder("Rejected mail intended for undefined user: ");  messageBuffer.append(recipient);  messageBuffer.append('.');  logStatusInfo(messageBuffer.toString());}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int capacity=s.readInt();  if (capacity < 0) {    throw new InvalidObjectException("Illegal capacity: " + capacity);  }  float loadFactor=s.readFloat();  if (loadFactor <= 0 || Float.isNaN(loadFactor)) {    throw new InvalidObjectException("Illegal load factor: " + loadFactor);  }  int size=s.readInt();  if (size < 0) {    throw new InvalidObjectException("Illegal size: " + size);  }  capacity=(int)Math.min(size * Math.min(1 / loadFactor,4.0f),HashMap.MAXIMUM_CAPACITY);  map=(((HashSet<?>)this) instanceof LinkedHashSet ? new LinkedHashMap<E,Object>(capacity,loadFactor) : new HashMap<E,Object>(capacity,loadFactor));  for (int i=0; i < size; i++) {    @SuppressWarnings("unchecked") E e=(E)s.readObject();    map.put(e,PRESENT);  }}  }
class C{  public Bundler putLong(String key,long value){  bundle.putLong(key,value);  return this;}  }
class C{  @Override public void processChallenge(final Header header) throws MalformedChallengeException {  super.processChallenge(header);  if (getParameter("realm") == null) {    throw new MalformedChallengeException("missing realm in challange");  }  if (getParameter("nonce") == null) {    throw new MalformedChallengeException("missing nonce in challange");  }  boolean unsupportedQop=false;  String qop=getParameter("qop");  if (qop != null) {    StringTokenizer tok=new StringTokenizer(qop,",");    while (tok.hasMoreTokens()) {      String variant=tok.nextToken().trim();      if (variant.equals("auth")) {        qopVariant=QOP_AUTH;        break;      } else       if (variant.equals("auth-int")) {        qopVariant=QOP_AUTH_INT;      } else {        unsupportedQop=true;      }    }  }  if (unsupportedQop && (qopVariant == QOP_MISSING)) {    throw new MalformedChallengeException("None of the qop methods is supported");  }  this.cnonce=null;  this.complete=true;}  }
class C{  public boolean hasSendAclNotifications(){  return hasExtension(SendAclNotificationsProperty.class);}  }
class C{  protected void link(FibonacciHeapNode<T> y,FibonacciHeapNode<T> x){  y.left.right=y.right;  y.right.left=y.left;  y.parent=x;  if (x.child == null) {    x.child=y;    y.right=y;    y.left=y;  } else {    y.left=x.child;    y.right=x.child.right;    x.child.right=y;    y.right.left=y;  }  x.degree++;  y.mark=false;}  }
class C{  private void skipToEnd() throws IOException {  InputStream is=getInputStream();  if (is == null)   return;  if (chunkLength > 0)   is.skip(chunkLength);  for (int tag=is.read(); tag >= 0; tag=is.read()) {switch (tag) {case 'Y':      server.freeReadLock();    this.is=is=server.readChannel(channel);  if (is == null) {    this.server=null;    return;  }break;case 'Q':server.freeReadLock();this.is=null;this.server=null;return;case -1:server.freeReadLock();this.is=null;this.server=null;return;default :int length=(is.read() << 8) + is.read();is.skip(length);break;}}}  }
class C{  void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  int attributeCount=0;  if (value != 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (value != 0) {    out.putShort(cw.newUTF8("ConstantValue"));    out.putInt(2).putShort(value);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(cw.newUTF8("Signature"));    out.putInt(2).putShort(signature);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  private void nodeId(UUID nodeId){  this.nodeId=nodeId;}  }
class C{  public String toString(){  return "MLanguage[" + getAD_Language() + "-"+ getName()+ ",Language="+ getLanguageISO()+ ",Country="+ getCountryCode()+ "]";}  }
