class C{  public static boolean isStatusInformational(int status){  return (status >= 100 && status < 200);}  }
class C{  public static void waitForCompletion(Future<?>[] futures){  int size=futures.length;  try {    for (int j=0; j < size; j++) {      futures[j].get();    }  } catch (  ExecutionException ex) {    ex.printStackTrace();  }catch (  InterruptedException e) {    e.printStackTrace();  }}  }
class C{  public String toString(){  return getSelector() + " + " + getSiblingSelector();}  }
class C{  public static DirectedGraph<Integer,DefaultEdge> loadGraph(String location) throws IOException, ClassNotFoundException {  File file=new File(location);  if (!file.canWrite()) {    throw new IOException("Cannot read from file " + location);  }  return GraphSerialization.loadGraph(file);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public LocalTime(int hourOfDay,int minuteOfHour,int secondOfMinute){  this(hourOfDay,minuteOfHour,secondOfMinute,0,ISOChronology.getInstanceUTC());}  }
class C{  public final void clear(){  for (  TTEntry ent : table) {    ent.type=TTEntry.T_EMPTY;  }}  }
class C{  @DebugLog private void assignColorToPlayer(@NonNull String color,@NonNull PlayerColorChoices player,String reason){  PlayerResult playerResult=new PlayerResult(player.name,player.type,color,reason);  results.results.add(playerResult);  Timber.i("Assigned %s",playerResult);  colorsAvailable.remove(color);  playersNeedingColor.remove(player);  for (  PlayerColorChoices playerColorChoices : playersNeedingColor) {    playerColorChoices.removeChoice(color);  }}  }
class C{  public static void filterDataModel(BookFilter filter){  List<Book> booksCopy=new LinkedList<Book>(DataModel.getListOfBooks());  for (  Book book : booksCopy) {    if (!filter.didBookPassThroughFilter(book)) {      for (      Tag tag : book.getTags()) {        List<Book> books=DataModel.getMapOfBooksByTag().get(tag);        if (Helper.isNotNullOrEmpty(books))         books.remove(book);        if (Helper.isNullOrEmpty(books)) {          DataModel.getMapOfBooksByTag().remove(tag);          DataModel.getListOfTags().remove(tag);        }      }      DataModel.getMapOfTagsByBookId().remove(book.getId());      Series serie=book.getSeries();      List<Book> booksInSerie=DataModel.getMapOfBooksBySeries().get(serie);      if (Helper.isNotNullOrEmpty(booksInSerie))       booksInSerie.remove(book);      if (Helper.isNullOrEmpty(booksInSerie)) {        DataModel.getMapOfBooksBySeries().remove(serie);        DataModel.getListOfSeries().remove(serie);      }      DataModel.getMapOfSeriesByBookId().remove(book.getId());      for (      Author author : book.getAuthors()) {        List<Book> booksByAuthor=DataModel.getMapOfBooksByAuthor().get(author);        if (Helper.isNotNullOrEmpty(booksByAuthor))         booksByAuthor.remove(book);        if (Helper.isNullOrEmpty(booksByAuthor)) {          DataModel.getMapOfBooksByAuthor().remove(author);          DataModel.getListOfAuthors().remove(author);        }      }      DataModel.getMapOfAuthorsByBookId().remove(book.getId());      BookRating rating=book.getRating();      List<Book> booksInRating=DataModel.getMapOfBooksByRating().get(rating);      if (Helper.isNotNullOrEmpty(booksInRating))       booksInRating.remove(book);      if (Helper.isNullOrEmpty(booksInRating)) {        DataModel.getMapOfBooksByRating().remove(rating);      }      Publisher publisher=book.getPublisher();      List<Book> booksByPublisher=DataModel.getMapOfBooksByPublisher().get(publisher);      if (Helper.isNotNullOrEmpty(booksByPublisher))       booksByPublisher.remove(book);      if (Helper.isNullOrEmpty(booksByPublisher)) {        DataModel.getMapOfBooksByPublisher().remove(publisher);        DataModel.getListOfPublishers().remove(publisher);      }      DataModel.getListOfBooks().remove(book);      DataModel.getMapOfBooks().remove(book.getId());      DataModel.getMapOfCommentsByBookId().remove(book.getId());      DataModel.getMapOfEBookFilesByBookId().remove(book.getId());    }  }  LinkedList<Tag> tagList=new LinkedList<Tag>(DataModel.getListOfTags());  for (  Tag tag : tagList) {    List<Book> books=DataModel.getMapOfBooksByTag().get(tag);    if (Helper.isNullOrEmpty(books)) {      DataModel.getMapOfBooksByTag().remove(tag);      DataModel.getListOfTags().remove(tag);    }  }  LinkedList<Series> seriesList=new LinkedList<Series>(DataModel.getListOfSeries());  for (  Series serie : seriesList) {    List<Book> booksInSerie=DataModel.getMapOfBooksBySeries().get(serie);    if (Helper.isNullOrEmpty(booksInSerie)) {      DataModel.getMapOfBooksBySeries().remove(serie);      DataModel.getListOfSeries().remove(serie);    }  }  LinkedList<Author> authorList=new LinkedList<Author>(DataModel.getListOfAuthors());  for (  Author author : authorList) {    List<Book> booksByAuthor=DataModel.getMapOfBooksByAuthor().get(author);    if (Helper.isNullOrEmpty(booksByAuthor)) {      DataModel.getMapOfBooksByAuthor().remove(author);      DataModel.getListOfAuthors().remove(author);    }  }}  }
class C{  public boolean isStreaming(){  return false;}  }
class C{  public LabeledOMSpline(float latPoint,float lonPoint,int[] xypoints,int cMode){  super(latPoint,lonPoint,xypoints,cMode);}  }
class C{  public void fireTableRowsUpdated(int firstRow,int lastRow){  fireTableChanged(new TableModelEvent(this,firstRow,lastRow,TableModelEvent.ALL_COLUMNS,TableModelEvent.UPDATE));}  }
class C{  public UpdateManager(BridgeContext ctx,GraphicsNode gn,Document doc){  bridgeContext=ctx;  bridgeContext.setUpdateManager(this);  document=doc;  updateRunnableQueue=RunnableQueue.createRunnableQueue();  runHandler=createRunHandler();  updateRunnableQueue.setRunHandler(runHandler);  graphicsNode=gn;  scriptingEnvironment=initializeScriptingEnvironment(bridgeContext);  secondaryBridgeContexts=(BridgeContext[])ctx.getChildContexts().clone();  secondaryScriptingEnvironments=new ScriptingEnvironment[secondaryBridgeContexts.length];  for (int i=0; i < secondaryBridgeContexts.length; i++) {    BridgeContext resCtx=secondaryBridgeContexts[i];    if (!((SVGOMDocument)resCtx.getDocument()).isSVG12()) {      continue;    }    resCtx.setUpdateManager(this);    ScriptingEnvironment se=initializeScriptingEnvironment(resCtx);    secondaryScriptingEnvironments[i]=se;  }  minRepaintTime=MIN_REPAINT_TIME;}  }
class C{  public static byte[] downloadBitmapToMemory(Context context,String urlString,int maxBytes){  HttpURLConnection urlConnection=null;  ByteArrayOutputStream out=null;  InputStream in=null;  try {    final URL url=new URL(urlString);    urlConnection=(HttpURLConnection)url.openConnection();    if (urlConnection.getResponseCode() != HttpURLConnection.HTTP_OK) {      return null;    }    in=new BufferedInputStream(urlConnection.getInputStream(),IO_BUFFER_SIZE_BYTES);    out=new ByteArrayOutputStream(IO_BUFFER_SIZE_BYTES);    final byte[] buffer=new byte[128];    int total=0;    int bytesRead;    while ((bytesRead=in.read(buffer)) != -1) {      total+=bytesRead;      if (total > maxBytes) {        return null;      }      out.write(buffer,0,bytesRead);    }    return out.toByteArray();  } catch (  final IOException e) {    Log.e(TAG,"Error in downloadBitmapToMemory - " + e);  } finally {    if (urlConnection != null) {      urlConnection.disconnect();    }    try {      if (out != null) {        out.close();      }      if (in != null) {        in.close();      }    } catch (    final IOException e) {      Log.e(TAG,"Error in downloadBitmapToMemory - " + e);    }  }  return null;}  }
class C{  public LoggingFraction consoleHandler(Level level,String formatter){  consoleHandler(new ConsoleHandler(CONSOLE).level(level).namedFormatter(formatter));  return this;}  }
class C{  public static double[] meansOfRows(double[][] input){  double[] theMeans=new double[input.length];  for (int i=0; i < input.length; i++) {    theMeans[i]=mean(input[i]);  }  return theMeans;}  }
class C{  private Token toASIToken(ILeafNode leaf){  if (leaf.isHidden()) {    return newSemicolonToken(leaf);  } else {    if (!leafNodes.hasNext()) {      int tokenType=tokenTypeMapper.getInternalTokenType(leaf);      int semicolonTokenType=tokenTypeMapper.getInternalTokenType(semicolon);      if (tokenType == semicolonTokenType) {        return new CommonToken(semicolonTokenType,leaf.getText());      }      if (leaf.getTotalEndOffset() == endOffset) {        leafNodes=Iterators.emptyIterator();        return new CommonToken(tokenType,leaf.getText());      }      next=new CommonToken(semicolonTokenType,leaf.getText());      return new CommonToken(tokenType,leaf.getText());    } else     if (leaf.getGrammarElement() == rightCurlyInBlock || leaf.getGrammarElement() == rightCurlyInArrowExpression) {      int tokenType=tokenTypeMapper.getInternalTokenType(leaf);      next=new CommonToken(tokenType);      return new CommonToken(tokenTypeMapper.getInternalTokenType(semicolon),leaf.getText());    } else {      return newSemicolonToken(leaf);    }  }}  }
class C{  public void respondPrivateMessage(String response){  getUser().send().message(response);}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public void prepend(CharSequence s){  StringBuffer newText=new StringBuffer();  newText.append(s);  newText.append(text);  text=newText;}  }
class C{  public RC5ParameterSpec(int version,int rounds,int wordSize){  this.version=version;  this.rounds=rounds;  this.wordSize=wordSize;  this.iv=null;}  }
class C{  private void updateTickLabelForLogScale(int length){  double min=scale.getRange().getLower();  double max=scale.getRange().getUpper();  if (min <= 0 || max <= 0)   throw new IllegalArgumentException("the range for log scale must be in positive range");  boolean minBigger=max < min;  int digitMin=(int)Math.ceil(Math.log10(min));  int digitMax=(int)Math.ceil(Math.log10(max));  final BigDecimal MIN=new BigDecimal(new Double(min).toString());  BigDecimal tickStep=pow(10,digitMin - 1);  BigDecimal firstPosition;  if (MIN.remainder(tickStep).doubleValue() <= 0) {    firstPosition=MIN.subtract(MIN.remainder(tickStep));  } else {    if (minBigger)     firstPosition=MIN.subtract(MIN.remainder(tickStep)); else     firstPosition=MIN.subtract(MIN.remainder(tickStep)).add(tickStep);  }  boolean minDateAdded=false;  if (MIN.compareTo(firstPosition) == (minBigger ? 1 : -1)) {    tickLabelValues.add(min);    if (scale.isDateEnabled()) {      Date date=new Date((long)MIN.doubleValue());      tickLabels.add(scale.format(date,true));      minDateAdded=true;    } else {      tickLabels.add(scale.format(MIN.doubleValue()));    }    tickLabelPositions.add(scale.getMargin());  }  for (int i=digitMin; minBigger ? i >= digitMax : i <= digitMax; i+=minBigger ? -1 : 1) {    if (Math.abs(digitMax - digitMin) > 20) {      BigDecimal v=pow(10,i);      if (v.doubleValue() > max)       break;      if (scale.isDateEnabled()) {        Date date=new Date((long)v.doubleValue());        tickLabels.add(scale.format(date,i == digitMin && !minDateAdded));      } else {        tickLabels.add(scale.format(v.doubleValue()));      }      tickLabelValues.add(v.doubleValue());      int tickLabelPosition=(int)((Math.log10(v.doubleValue()) - Math.log10(min)) / (Math.log10(max) - Math.log10(min)) * length) + scale.getMargin();      tickLabelPositions.add(tickLabelPosition);    } else {      for (BigDecimal j=firstPosition; minBigger ? j.doubleValue() >= pow(10,i - 1).doubleValue() : j.doubleValue() <= pow(10,i).doubleValue(); j=minBigger ? j.subtract(tickStep) : j.add(tickStep)) {        if (minBigger ? j.doubleValue() < max : j.doubleValue() > max) {          break;        }        if (scale.isDateEnabled()) {          Date date=new Date((long)j.doubleValue());          tickLabels.add(scale.format(date,j == firstPosition && !minDateAdded));        } else {          tickLabels.add(scale.format(j.doubleValue()));        }        tickLabelValues.add(j.doubleValue());        int tickLabelPosition=(int)((Math.log10(j.doubleValue()) - Math.log10(min)) / (Math.log10(max) - Math.log10(min)) * length) + scale.getMargin();        tickLabelPositions.add(tickLabelPosition);      }      tickStep=minBigger ? tickStep.divide(pow(10,1)) : tickStep.multiply(pow(10,1));      firstPosition=minBigger ? pow(10,i - 1) : tickStep.add(pow(10,i));    }  }  if (minBigger ? max < tickLabelValues.get(tickLabelValues.size() - 1) : max > tickLabelValues.get(tickLabelValues.size() - 1)) {    tickLabelValues.add(max);    if (scale.isDateEnabled()) {      Date date=new Date((long)max);      tickLabels.add(scale.format(date,true));    } else {      tickLabels.add(scale.format(max));    }    tickLabelPositions.add(scale.getMargin() + length);  }}  }
class C{  public boolean isLastInstructionInBasicBlock(){  return !basicBlock.isEmpty() && handle == basicBlock.getLastInstruction();}  }
class C{  private PrincipalId authenticate(String tenantName,X509Certificate[] tlsCertChain) throws IDMLoginException, CertificateRevocationCheckException, InvalidArgumentException, IdmCertificateRevokedException, IDMException {  TenantInformation info;  try {    info=findTenant(tenantName);  } catch (  Exception e) {    throw new IDMLoginException("Error in retrieve tenantInfo");  }  if (tlsCertChain == null || tlsCertChain.length < 1) {    logger.error("Certificate chain is empty or null");    throw new IDMLoginException("Certificate chain is empty or null");  }  if (logger.isDebugEnabled()) {    for (int i=0; i < tlsCertChain.length; i++) {      logger.debug("Client Certificate [" + i + "] = "+ tlsCertChain[i].toString());    }  }  String subjectDn=tlsCertChain[0].getSubjectDN() != null ? tlsCertChain[0].getSubjectDN().toString() : "";  IIdmAuthStatRecorder recorder=PerformanceMonitorFactory.createIdmAuthStatRecorderInstance(tenantName,"CertificateAuthentication","IDM",0,IIdmAuthStat.ActivityKind.AUTHENTICATE,IIdmAuthStat.EventLevel.INFO,subjectDn);  recorder.start();  AuthnPolicy aPolicy=info.getAuthnPolicy();  Validate.notNull(aPolicy,"AuthnPolicy can not be null.");  Validate.isTrue(aPolicy.IsTLSClientCertAuthnEnabled(),"TLSClient authn is not enabled.");  ClientCertPolicy certPolicy=aPolicy.getClientCertPolicy();  Validate.notNull(certPolicy,"Client Certificate Policy can not be null.");  ValidateUtil.validateNotEmpty(tenantName,"Tenant name");  IdmClientCertificateValidator certValidator=new IdmClientCertificateValidator(certPolicy,tenantName);  Map<String,String> authStatsExtension=new HashMap<String,String>();  recorder.add(authStatsExtension);  String clusterID;  try {    clusterID=this.getClusterId();  } catch (  Exception e1) {    throw new IDMException("Failed to retrieve PSC cluster ID.");  }  certValidator.validateCertificatePath(tlsCertChain[0],clusterID,authStatsExtension);  long startTime=System.nanoTime();  String upn=certValidator.extractUPN(tlsCertChain[0]);  IIdentityProvider provider=null;  try {    PrincipalId userPrincipal=getUserPrincipal(tenantName,upn);    provider=info.findProviderADAsFallBack(userPrincipal.getDomain());  } catch (  Exception e) {    throw new IDMException("Failed to retrieve details of identity provider with domain :" + subjectDn);  }  if (provider != null) {    validateProviderAllowedAuthnTypes(DirectoryConfigStore.FLAG_AUTHN_TYPE_ALLOW_TLS_CERTIFICATE,provider.getName(),info);  }  String[] parts=upn.split("@");  PrincipalId principalID;  if (parts.length == 2) {    principalID=new PrincipalId(parts[0],parts[1]);    try {      if (!this.IsActive(tenantName,principalID)) {        logger.error("The user is not found or inactive:" + principalID.getUPN());        throw new IDMLoginException("The user owning this certificate is not found or inactive. User UPN: " + principalID.getUPN());      }      logger.info("Successfully validated subject of the client certificate : " + principalID.getUPN());    } catch (    Exception e) {      logger.error("Failed to determine the status of principal with candicate UPN:" + principalID.getUPN());      throw new IDMLoginException("Unable to find user with UPN: " + principalID.getUPN());    }  } else {    logger.error(upn + " is in illegal UPN format");    throw new IDMLoginException("Illegal UPN format: " + upn);  }  authStatsExtension.put("SearchUserByCertificateUpn",String.format("%d Ms",TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime)));  recorder.end();  return principalID;}  }
class C{  public static double[][][] expandNoiseArray(final double[][][] input){  double[][][] result=getNewCubeSizedArray();  int xSteps=X_SECTION_SIZE - 1;  int ySteps=Y_SECTION_SIZE - 1;  int zSteps=Z_SECTION_SIZE - 1;  for (int noiseX=0; noiseX < X_SECTIONS - 1; noiseX++) {    for (int noiseZ=0; noiseZ < Z_SECTIONS - 1; noiseZ++) {      for (int noiseY=0; noiseY < Y_SECTIONS - 1; noiseY++) {        double x0y0z0=input[noiseX][noiseY][noiseZ];        double x0y0z1=input[noiseX][noiseY][noiseZ + 1];        double x1y0z0=input[noiseX + 1][noiseY][noiseZ];        double x1y0z1=input[noiseX + 1][noiseY][noiseZ + 1];        double x0y1z0=input[noiseX][noiseY + 1][noiseZ];        double x0y1z1=input[noiseX][noiseY + 1][noiseZ + 1];        double x1y1z0=input[noiseX + 1][noiseY + 1][noiseZ];        double x1y1z1=input[noiseX + 1][noiseY + 1][noiseZ + 1];        for (int x=0; x < xSteps; x++) {          int xRel=noiseX * xSteps + x;          double xd=(double)x / xSteps;          double xy0z0=lerp(xd,x0y0z0,x1y0z0);          double xy0z1=lerp(xd,x0y0z1,x1y0z1);          double xy1z0=lerp(xd,x0y1z0,x1y1z0);          double xy1z1=lerp(xd,x0y1z1,x1y1z1);          for (int z=0; z < zSteps; z++) {            int zRel=noiseZ * zSteps + z;            double zd=(double)z / zSteps;            double xy0z=lerp(zd,xy0z0,xy0z1);            double xy1z=lerp(zd,xy1z0,xy1z1);            for (int y=0; y < ySteps; y++) {              int yRel=noiseY * ySteps + y;              double yd=(double)y / ySteps;              double xyz=lerp(yd,xy0z,xy1z);              result[xRel][yRel][zRel]=xyz;            }          }        }      }    }  }  return result;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UQSUB16");  translateAll(environment,instruction,"UQSUB16",instructions);}  }
class C{  public static String toStringExclude(Object object,final String excludeFieldName){  return toStringExclude(object,new String[]{excludeFieldName});}  }
class C{  public static boolean removeDirectory(String pathToDir){  return deleteRecursive(new File(pathToDir));}  }
class C{  public Dimension minimumSize(int v){  FontMetrics fm=getFontMetrics(getFont());  initFontMetrics();  return new Dimension(20 + fm.stringWidth("0123456789abcde"),getItemHeight() * v + (2 * MARGIN));}  }
class C{  String pullInSource(InputStream in,Charset encoding){  String script="";  BufferedReader f=null;  try {    StringBuilder sb=new StringBuilder();    Reader reader=null;    if (encoding == null)     reader=new InputStreamReader(in); else     reader=new InputStreamReader(in,encoding);    f=new BufferedReader(reader);    String line;    while ((line=f.readLine()) != null) {      sb.append(line);      sb.append('\n');    }    script=sb.toString();  } catch (  IOException e) {    e.printStackTrace();  }  return script;}  }
class C{  @Override public void connect() throws IOException {  File f=new File(filename);  if (f.isDirectory()) {    isDir=true;    is=getDirectoryListing(f);  } else {    is=new BufferedInputStream(new FileInputStream(f));    long lengthAsLong=f.length();    length=lengthAsLong <= Integer.MAX_VALUE ? (int)lengthAsLong : Integer.MAX_VALUE;  }  connected=true;}  }
class C{  public int falsePositives(int classindex){  int fp=0;  for (int i=0; i < confusion[classindex].length; i++) {    if (i != classindex) {      fp+=confusion[classindex][i];    }  }  return fp;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.470 -0400",hash_original_method="00066F2A5261D560420BAE8B5DB685BE",hash_generated_method="0F0633676B8D14425F94FFB8C4B89BE8") private boolean isSilentStart(String value){  boolean result=false;  for (int i=0; i < SILENT_START.length; i++) {    if (value.startsWith(SILENT_START[i])) {      result=true;      break;    }  }  return result;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public MPLSObject(sage.io.SageDataFile inStream) throws java.io.IOException {  byte[] strHolder=new byte[4];  inStream.readFully(strHolder);  String fileType=new String(strHolder,BluRayParser.BLURAY_CHARSET);  if (!"MPLS".equals(fileType))   throw new java.io.IOException("Invalid BluRay structure: MPLS file is missing the MPLS header!");  inStream.readFully(strHolder);  version=new String(strHolder,BluRayParser.BLURAY_CHARSET);  int playlistOffset=inStream.readInt();  int markOffset=inStream.readInt();  int extensionOffset=inStream.readInt();  inStream.skipBytes(20);  int appInfoLength=inStream.readInt();  inStream.skipBytes(1);  playbackType=inStream.read();  inStream.skipBytes(2);  inStream.skipBytes(8);  inStream.skipBytes(2);  inStream.seek(playlistOffset);  inStream.skipBytes(6);  int playlistLength=inStream.readUnsignedShort();  int numSubPaths=inStream.readUnsignedShort();  playlistItems=new PlaylistItem[playlistLength];  java.util.HashSet uniqueClips=new java.util.HashSet();  for (int i=0; i < playlistLength; i++) {    playlistItems[i]=new PlaylistItem(inStream);    totalDuration+=playlistItems[i].duration;    if (uniqueClips.add(playlistItems[i].itemClips[0].clipName))     totalUniqueDuration+=playlistItems[i].duration;  }  inStream.seek(markOffset);  inStream.skipBytes(4);  int numMarks=inStream.readUnsignedShort();  playlistMarks=new PlaylistMark[numMarks];  for (int i=0; i < numMarks; i++)   playlistMarks[i]=new PlaylistMark(inStream);}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  @Override public boolean lookAt(PLRotation rotation){  return (mIsNotLocked ? this.internalLookAt(null,rotation.pitch,rotation.yaw,false,true,false) : false);}  }
class C{  public BreadcrumbItem(final Breadcrumb parent,final int style){  super(parent,checkStyle(style));  parent.addItem(this);  this.parentBreadcrumb=parent;  this.textColor=parent.getDisplay().getSystemColor(SWT.COLOR_BLACK);  this.textColorSelected=parent.getDisplay().getSystemColor(SWT.COLOR_BLACK);  this.enabled=true;  if ((style & SWT.LEFT) != 0) {    this.alignment=SWT.LEFT;  }  if ((style & SWT.CENTER) != 0) {    this.alignment=SWT.CENTER;  }  if ((style & SWT.RIGHT) != 0) {    this.alignment=SWT.RIGHT;  }  this.selectionListeners=new ArrayList<SelectionListener>();  this.width=this.height=-1;}  }
class C{  public FileDescriptor(){}  }
class C{  public TDoubleObjectHashMap(int initialCapacity,float loadFactor,TDoubleHashingStrategy strategy){  super(initialCapacity,loadFactor);  _hashingStrategy=strategy;}  }
class C{  public void addImageView(CubeImageView imageView){  if (null == imageView) {    return;  }  if (null == mFirstImageViewHolder) {    mFirstImageViewHolder=new ImageViewHolder(imageView);    return;  }  ImageViewHolder holder=mFirstImageViewHolder;  for (; ; holder=holder.mNext) {    if (holder.contains(imageView)) {      return;    }    if (holder.mNext == null) {      break;    }  }  ImageViewHolder newHolder=new ImageViewHolder(imageView);  newHolder.mPrev=holder;  holder.mNext=newHolder;}  }
class C{  public static void checkLocation(int location,String label){  if (location < 0) {    throw new RuntimeException("Unable to locate '" + label + "' in program");  }}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        try {          int b=in.read();          if (b >= 0) {            b3[i]=(byte)b;            numBinaryBytes++;          }        } catch (        java.io.IOException e) {          if (i == 0) {            throw e;          }        }      }      if (numBinaryBytes > 0) {        Base64.encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= Base64.WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=Base64.decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= Base64.MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public MethExecutorResult executeMethodOnObject(Object obj,String methodName,Object[] args){  String name=obj.getClass().getName() + "." + methodName+ (args != null ? " with " + args.length + " args" : "")+ " on object: "+ obj;  long start=start(name);  MethExecutorResult result=MethExecutor.executeObject(obj,methodName,args);  logDelta(name,start,result);  return result;}  }
class C{  private void logError(Text url,Throwable t){  if (LOG.isInfoEnabled()) {    LOG.info("Conversion of " + url + " failed with: "+ StringUtils.stringifyException(t));  }}  }
class C{  public void testDivideRemainderIsZero(){  String a="8311389578904553209874735431110";  int aScale=-15;  String b="237468273682987234567849583746";  int bScale=20;  String c="3.5000000000000000000000000000000E+36";  int resScale=-5;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_CEILING);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public static String toString(LocalDateTime data,String modelo){  return data == null ? "" : data.format(formatter(modelo));}  }
class C{  private void paintCloseEnabled(Graphics2D g,JComponent c,int width,int height){  paintClose(g,c,width,height,enabled);}  }
class C{  public void append(Printable painter,PageFormat page,int numPages){  BookPage bookPage=new BookPage(painter,page);  int pageIndex=mPages.size();  int newSize=pageIndex + numPages;  mPages.setSize(newSize);  for (int i=pageIndex; i < newSize; i++) {    mPages.setElementAt(bookPage,i);  }}  }
class C{  void close(){  myContentManager.removeAllContents(true);  myToolWindowManager.unregisterToolWindow(myWindowName);}  }
class C{  protected static boolean isLandingPage(HttpServletRequest httpRequest){  return httpRequest.getServletPath().startsWith(BaseBean.MARKETPLACE_START_SITE);}  }
class C{  protected final boolean _matchToken(String matchStr,int i) throws IOException, JsonParseException {  final int len=matchStr.length();  do {    if (_inputPtr >= _inputEnd) {      if (!loadMore()) {        _reportInvalidEOFInValue();      }    }    if (_inputBuffer[_inputPtr] != matchStr.charAt(i)) {      _reportInvalidToken(matchStr.substring(0,i),"'null', 'true', 'false' or NaN");    }    ++_inputPtr;  } while (++i < len);  if (_inputPtr >= _inputEnd) {    if (!loadMore()) {      return true;    }  }  char c=_inputBuffer[_inputPtr];  if (Character.isJavaIdentifierPart(c)) {    ++_inputPtr;    _reportInvalidToken(matchStr.substring(0,i),"'null', 'true', 'false' or NaN");  }  return true;}  }
class C{  @RequestMapping(value=STORAGE_POLICIES_URI_PREFIX,method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_STORAGE_POLICIES_POST) public StoragePolicy createStoragePolicy(@RequestBody StoragePolicyCreateRequest request){  return storagePolicyService.createStoragePolicy(request);}  }
class C{  public boolean isString(){  return value instanceof String;}  }
class C{  public UtilizationModelPlanetLabInMemory(String inputPath,double schedulingInterval) throws NumberFormatException, IOException {  data=new double[289];  setSchedulingInterval(schedulingInterval);  BufferedReader input=new BufferedReader(new FileReader(inputPath));  int n=data.length;  for (int i=0; i < n - 1; i++) {    data[i]=Integer.valueOf(input.readLine()) / 100.0;  }  data[n - 1]=data[n - 2];  input.close();}  }
class C{  public GridByteArrayList(byte[] data,int size){  assert data != null;  assert size > 0;  this.data=data;  this.size=size;}  }
class C{  public JToolBar createJToolBar(String name) throws MissingResourceException, ResourceFormatException, MissingListenerException {  JToolBar result=new JToolBar();  List buttons=getStringList(name);  Iterator it=buttons.iterator();  while (it.hasNext()) {    String s=(String)it.next();    if (s.equals(SEPARATOR)) {      result.add(new JToolbarSeparator());    } else {      result.add(createJButton(s));    }  }  return result;}  }
class C{  private void removeAllNodes(@Nullable Object key){  for (Iterator<V> i=new ValueForKeyIterator(key); i.hasNext(); ) {    i.next();    i.remove();  }}  }
class C{  @Bean public static DataSourceInitializer dataSourceInitializer(){  ResourceDatabasePopulator resourceDatabasePopulator=new ResourceDatabasePopulator();  resourceDatabasePopulator.addScript(new ClassPathResource("alterJpaTablesAndInsertReferenceData.sql"));  DataSourceInitializer dataSourceInitializer=new DataSourceInitializer();  dataSourceInitializer.setDataSource(herdDataSource());  dataSourceInitializer.setDatabasePopulator(resourceDatabasePopulator);  return dataSourceInitializer;}  }
class C{  public void createBuffers(){  boolean supportsUIntBuffers=RajawaliRenderer.supportsUIntBuffers;  if (mVertices != null) {    mVertices.compact().position(0);    createBuffer(mVertexBufferInfo,BufferType.FLOAT_BUFFER,mVertices,GLES20.GL_ARRAY_BUFFER);  }  if (mNormals != null) {    mNormals.compact().position(0);    createBuffer(mNormalBufferInfo,BufferType.FLOAT_BUFFER,mNormals,GLES20.GL_ARRAY_BUFFER);  }  if (mTextureCoords != null) {    mTextureCoords.compact().position(0);    createBuffer(mTexCoordBufferInfo,BufferType.FLOAT_BUFFER,mTextureCoords,GLES20.GL_ARRAY_BUFFER);  }  if (mColors != null) {    mColors.compact().position(0);    createBuffer(mColorBufferInfo,BufferType.FLOAT_BUFFER,mColors,GLES20.GL_ARRAY_BUFFER);  }  if (mIndicesInt != null && !mOnlyShortBufferSupported && supportsUIntBuffers) {    mIndicesInt.compact().position(0);    createBuffer(mIndexBufferInfo,BufferType.INT_BUFFER,mIndicesInt,GLES20.GL_ELEMENT_ARRAY_BUFFER);  }  if (mOnlyShortBufferSupported || !supportsUIntBuffers) {    mOnlyShortBufferSupported=true;    if (mIndicesShort == null && mIndicesInt != null) {      mIndicesInt.position(0);      mIndicesShort=ByteBuffer.allocateDirect(mNumIndices * SHORT_SIZE_BYTES).order(ByteOrder.nativeOrder()).asShortBuffer();      try {        for (int i=0; i < mNumIndices; ++i) {          mIndicesShort.put((short)mIndicesInt.get(i));        }      } catch (      BufferOverflowException e) {        RajLog.e("Buffer overflow. Unfortunately your device doesn't supported int type index buffers. The mesh is too big.");        throw (e);      }      mIndicesInt.clear();      mIndicesInt.limit();      mIndicesInt=null;    }    if (mIndicesShort != null) {      mIndicesShort.compact().position(0);      createBuffer(mIndexBufferInfo,BufferType.SHORT_BUFFER,mIndicesShort,GLES20.GL_ELEMENT_ARRAY_BUFFER);    }  }  GLES20.glBindBuffer(GLES20.GL_ELEMENT_ARRAY_BUFFER,0);  GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,0);  mHaveCreatedBuffers=true;}  }
class C{  private ServerPod[] buildServers(int serverCount){  ArrayList<ServerPod> serversPod=new ArrayList<>();  for (int i=0; i < serverCount; i++) {    if (i < _serverList.size()) {      serversPod.add(_serverList.get(i));    } else {      serversPod.add(new ServerPod(i));    }  }  ServerPod[] serverArray=new ServerPod[serverCount];  for (int i=0; i < serverCount; i++) {    serverArray[i]=serversPod.get(i);  }  return serverArray;}  }
class C{  public boolean remove(URI uri,HttpCookie ck){  if (ck == null) {    throw new NullPointerException("cookie is null");  }  boolean modified=false;  lock.lock();  try {    modified=cookieJar.remove(ck);  }  finally {    lock.unlock();  }  return modified;}  }
class C{  public static Document parseSAMLConfig(String samlConfigDoc) throws IOException, SAXException {  assert samlConfigDoc != null;  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  dbf.setNamespaceAware(true);  dbf.setValidating(false);  DocumentBuilder builder;  try {    builder=dbf.newDocumentBuilder();  } catch (  ParserConfigurationException e) {    throw new IllegalStateException(e);  }  ByteArrayInputStream strIn=new ByteArrayInputStream(samlConfigDoc.getBytes());  return builder.parse(strIn);}  }
class C{  public static void assertTrue(boolean value,String errorMessage){  if (verbose) {    log("assertTrue(" + value + ", "+ errorMessage+ ")");  }  assertBool(value,errorMessage);}  }
class C{  public boolean hasDays(){  return super.hasAttribute(DAYS);}  }
class C{  protected void stripIgnorableText(){  if (rootElement.getFirstChild() == null) {    return;  }  Node firstChild=rootElement.getFirstChild();  if (isIgnorableTextNode(firstChild)) {    rootElement.removeChild(firstChild);    if (rootElement.getFirstChild() == null) {      return;    }  }  Node lastChild=rootElement.getLastChild();  if (isIgnorableTextNode(lastChild)) {    rootElement.removeChild(lastChild);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:24.484 -0400",hash_original_method="FE4B8D7BDC2BC5EA73BFE2D5582C2DF7",hash_generated_method="8E163135FFCE65EC07B847F759C17E8E") public boolean isMarked(){  return pair.mark;}  }
class C{  public void write(OutputNode node,Object source) throws Exception {  Collection list=(Collection)source;  for (  Object item : list) {    if (item != null) {      Class expect=entry.getType();      Class actual=item.getClass();      if (!expect.isAssignableFrom(actual)) {        throw new PersistenceException("Entry %s does not match %s for %s",actual,entry,type);      }      root.write(node,item,expect,name);    }  }}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.core.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new BatikTestDocumentBuilderFactory(new DocumentBuilderSetting[0]);  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public static long[] unknown_N_compute_B_and_K(double epsilon,double delta,int quantiles){  return unknown_N_compute_B_and_K_raw(epsilon,delta,quantiles);}  }
class C{  public static String reflectionToString(Object object,ToStringStyle style){  return ReflectionToStringBuilder.toString(object,style);}  }
class C{  public DrawerBuilder withTranslucentStatusBarShadow(Boolean translucentStatusBarShadow){  this.mTranslucentStatusBarShadow=translucentStatusBarShadow;  return this;}  }
class C{  @DELETE @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{snapshot_id}") @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public Response deleteSnapshot(@PathParam("tenant_id") String openstack_tenant_id,@PathParam("snapshot_id") String snapshot_id){  _log.info("Delete Snapshot: id = {}",snapshot_id);  BlockSnapshot snap=findSnapshot(snapshot_id,openstack_tenant_id);  if (snap == null) {    _log.error("Not Found : Invalid volume snapshot id");    return CinderApiUtils.createErrorResponse(404,"Not Found : Invalid volume snapshot id");  } else   if (snap.hasConsistencyGroup()) {    _log.error("Not Found : Snapshot belongs to a consistency group");    return CinderApiUtils.createErrorResponse(400,"Invalid snapshot: Snapshot belongs to consistency group");  }  URI snapshotURI=snap.getId();  String task=UUID.randomUUID().toString();  TaskList response=new TaskList();  ArgValidator.checkReference(BlockSnapshot.class,snapshotURI,checkForDelete(snap));  if (snap.getInactive()) {    Operation op=new Operation();    op.ready("The snapshot has already been deleted");    op.setResourceType(ResourceOperationTypeEnum.DELETE_VOLUME_SNAPSHOT);    _dbClient.createTaskOpStatus(BlockSnapshot.class,snap.getId(),task,op);    response.getTaskList().add(toTask(snap,task,op));    return Response.status(202).build();  }  StorageSystem device=_dbClient.queryObject(StorageSystem.class,snap.getStorageController());  List<BlockSnapshot> snapshots=new ArrayList<BlockSnapshot>();  final URI cgId=snap.getConsistencyGroup();  if (!NullColumnValueGetter.isNullURI(cgId)) {    URIQueryResultList results=new URIQueryResultList();    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getBlockSnapshotsBySnapsetLabel(snap.getSnapsetLabel()),results);    while (results.iterator().hasNext()) {      URI uri=results.iterator().next();      _log.info("BlockSnapshot being deactivated: " + uri);      BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,uri);      if (snapshot != null) {        snapshots.add(snapshot);      }    }  } else {    snapshots.add(snap);  }  for (  BlockSnapshot snapshot : snapshots) {    Operation snapOp=_dbClient.createTaskOpStatus(BlockSnapshot.class,snapshot.getId(),task,ResourceOperationTypeEnum.DELETE_VOLUME_SNAPSHOT);    response.getTaskList().add(toTask(snapshot,task,snapOp));  }  Volume volume=_permissionsHelper.getObjectById(snap.getParent(),Volume.class);  BlockServiceApi blockServiceApiImpl=BlockService.getBlockServiceImpl(volume,_dbClient);  blockServiceApiImpl.deleteSnapshot(snap,snapshots,task,VolumeDeleteTypeEnum.FULL.name());  StringMap extensions=snap.getExtensions();  if (extensions == null) {    extensions=new StringMap();  }  for (  TaskResourceRep rep : response.getTaskList()) {    extensions.put("taskid",rep.getId().toString());    break;  }  snap.setExtensions(extensions);  _dbClient.updateObject(snap);  auditOp(OperationTypeEnum.DELETE_VOLUME_SNAPSHOT,true,AuditLogManager.AUDITOP_BEGIN,snapshot_id,snap.getLabel(),snap.getParent().getName(),device.getId().toString());  return Response.status(202).build();}  }
class C{  @Since(CommonParams.VERSION_1) @DELETE @Path(CommonParams.PATH_ID) @Override public Response deleteItem(@Context Request request,@InjectParam TriggerParameters params) throws WebApplicationException {  return delete(request,triggerBackend.deleteItem(),params);}  }
class C{  public DecodeReturn(String _data){  data=_data;  pos=0;}  }
class C{  public static ServerSocketBar create(int port,int listenBacklog) throws IOException {  return create(null,port,listenBacklog,true);}  }
class C{  private void fixedLongToBytes(long n,byte[] buf,int off){  buf[off + 0]=(byte)(n & 0xff);  buf[off + 1]=(byte)((n >> 8) & 0xff);  buf[off + 2]=(byte)((n >> 16) & 0xff);  buf[off + 3]=(byte)((n >> 24) & 0xff);  buf[off + 4]=(byte)((n >> 32) & 0xff);  buf[off + 5]=(byte)((n >> 40) & 0xff);  buf[off + 6]=(byte)((n >> 48) & 0xff);  buf[off + 7]=(byte)((n >> 56) & 0xff);}  }
class C{  public boolean matchesFirst(){  return super.get().getValue() == 0;}  }
class C{  public static void main(final String[] args){  System.out.println(TITLE + " " + VERSION);}  }
class C{  public Builder noCache(){  this.noCache=true;  return this;}  }
class C{  private boolean parseQuantifier(PsiBuilder builder){  final PsiBuilder.Marker marker=builder.mark();  if (builder.getTokenType() == RegExpTT.LBRACE) {    builder.advanceLexer();    boolean minOmitted=false;    if (builder.getTokenType() == RegExpTT.COMMA && myCapabilities.contains(RegExpCapability.OMIT_NUMBERS_IN_QUANTIFIERS)) {      minOmitted=true;      builder.advanceLexer();    } else     if (builder.getTokenType() != RegExpTT.NUMBER && myCapabilities.contains(RegExpCapability.DANGLING_METACHARACTERS)) {      marker.done(RegExpTT.CHARACTER);      return true;    } else {      checkMatches(builder,RegExpTT.NUMBER,"Number expected");    }    if (builder.getTokenType() == RegExpTT.RBRACE) {      builder.advanceLexer();      parseQuantifierType(builder);      marker.done(RegExpElementTypes.QUANTIFIER);    } else {      if (!minOmitted) {        checkMatches(builder,RegExpTT.COMMA,"',' expected");      }      if (builder.getTokenType() == RegExpTT.RBRACE) {        builder.advanceLexer();        parseQuantifierType(builder);        marker.done(RegExpElementTypes.QUANTIFIER);      } else       if (builder.getTokenType() == RegExpTT.NUMBER) {        builder.advanceLexer();        checkMatches(builder,RegExpTT.RBRACE,"'}' expected");        parseQuantifierType(builder);        marker.done(RegExpElementTypes.QUANTIFIER);      } else {        builder.error("'}' or number expected");        marker.done(RegExpElementTypes.QUANTIFIER);        return true;      }    }  } else   if (RegExpTT.QUANTIFIERS.contains(builder.getTokenType())) {    builder.advanceLexer();    parseQuantifierType(builder);    marker.done(RegExpElementTypes.QUANTIFIER);  } else {    marker.drop();    return false;  }  return true;}  }
class C{  public MAttributeInstance(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  public JSONWriter value(double d) throws JSONException {  return this.value(new Double(d));}  }
class C{  public void startAutoScroll(int delayTimeInMills){  isAutoScroll=true;  sendScrollMessage(delayTimeInMills);}  }
class C{  public static ModuleSpec parse(String moduleSpec,Option... options){  int sep=moduleSpec.indexOf("/");  String name=sep != -1 ? moduleSpec.substring(0,sep) : moduleSpec;  name=name.trim();  String version=sep != -1 && sep < moduleSpec.length() - 1 ? moduleSpec.substring(sep + 1) : "";  version=version.trim();  if (name.equals(DEFAULT_MODULE.name)) {    if (contains(options,Option.DEFAULT_MODULE_PROHIBITED)) {      throw new IllegalArgumentException(CommonMessages.msg("modspec.default.prohibited"));    }    if (version.equals(DEFAULT_MODULE.version)) {      return DEFAULT_MODULE;    }    throw new IllegalArgumentException(CommonMessages.msg("modspec.default.no.version"));  }  if (version.isEmpty() && contains(options,Option.VERSION_REQUIRED)) {    throw new IllegalArgumentException(CommonMessages.msg("modspec.version.required",moduleSpec));  } else   if ((!version.isEmpty() || sep != -1) && contains(options,Option.VERSION_PROHIBITED)) {    throw new IllegalArgumentException(CommonMessages.msg("modspec.version.prohibited",moduleSpec));  }  ModuleSpec spec=new ModuleSpec(name,version);  return spec;}  }
class C{  private Process createProcess(final File sourceFile,final File destFile) throws IOException {  notNull(sourceFile);  final String[] commandLine=getCommandLine(sourceFile.getPath(),destFile.getPath());  LOG.debug("CommandLine arguments: {}",Arrays.asList(commandLine));  final Process process=new ProcessBuilder(commandLine).redirectErrorStream(true).start();  final StreamGobbler errorGobbler=new StreamGobbler(process.getErrorStream(),"ERROR");  final StreamGobbler outputGobbler=new StreamGobbler(process.getInputStream(),"OUTPUT");  errorGobbler.start();  outputGobbler.start();  return process;}  }
class C{  public void beginAdding(GL10 gl){  checkState(STATE_INITIALIZED,STATE_ADDING);  mLabels.clear();  mU=0;  mV=0;  mLineHeight=0;  Bitmap.Config config=mFullColor ? Bitmap.Config.ARGB_4444 : Bitmap.Config.ALPHA_8;  mBitmap=Bitmap.createBitmap(mStrikeWidth,mStrikeHeight,config);  mCanvas=new Canvas(mBitmap);  mBitmap.eraseColor(0);}  }
class C{  public boolean equals(Object o){  if (o instanceof Action)   return isEquiv((Action)o); else   return false;}  }
class C{  public void removeIndex(String indexName) throws Exception {  try {    Collection<Index> idxs=qs.getIndexes();    if (!idxs.isEmpty()) {      Iterator<Index> idx=idxs.iterator();      while (idx.hasNext()) {        Index index=idx.next();        if (index.getName().equals(indexName)) {          qs.removeIndex(index);        }        return;      }    }  } catch (  Exception e) {    throw new Exception(e.getMessage());  }}  }
class C{  private void drawDiamond(Canvas canvas,Paint paint,float[] path,float x,float y){  path[0]=x;  path[1]=y - size;  path[2]=x - size;  path[3]=y;  path[4]=x;  path[5]=y + size;  path[6]=x + size;  path[7]=y;  drawPath(canvas,path,paint,true);}  }
class C{  public void onMessagesRead(Peer peer,long fromDate){  if (fromDate < getLastReadDate(peer)) {    return;  }  getNotifications().clear();  pendingStorage.setMessagesCount(0);  pendingStorage.setDialogsCount(0);  allPendingNotifications.clear();  saveStorage();  updateNotification();  setLastReadDate(peer,fromDate);}  }
class C{  public void doSaveAs(){  saveAs();}  }
class C{  public CursorPosition(IndexSegmentTupleCursor<E> cursor,ILeafCursor<ImmutableLeaf> leafCursor,int index,byte[] key){  super(cursor,leafCursor,index,key);}  }
class C{  private void enlarge(final int size){  int length1=2 * data.length;  int length2=length + size;  byte[] newData=new byte[length1 > length2 ? length1 : length2];  System.arraycopy(data,0,newData,0,length);  data=newData;}  }
class C{  public RaceGUI(String appName){  UIManager.put("swing.boldMetal",Boolean.FALSE);  JFrame f=new JFrame(appName);  f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  f.setLayout(new BorderLayout());  track=new TrackView();  f.add(track,BorderLayout.CENTER);  controlPanel=new RaceControlPanel();  f.add(controlPanel,BorderLayout.SOUTH);  f.pack();  f.setVisible(true);}  }
class C{  public static double logpdf(double val,double loc,double scale,double shape1,double shape2){  final double c=cdf(val,loc,scale,shape1,shape2);  val=(val - loc) / scale;  if (shape1 != 0.) {    val=1 - shape1 * val;    if (val < 1e-15) {      return Double.NEGATIVE_INFINITY;    }    val=(1. - 1. / shape1) * Math.log(val);  }  return -val - Math.log(scale) + Math.log(c) * (1. - shape2);}  }
class C{  public IndexSchema create(String resourceName,SolrConfig config){  SolrResourceLoader loader=config.getResourceLoader();  InputStream schemaInputStream=null;  if (null == resourceName) {    resourceName=IndexSchema.DEFAULT_SCHEMA_FILE;  }  try {    schemaInputStream=loader.openSchema(resourceName);  } catch (  Exception e) {    final String msg="Error loading schema resource " + resourceName;    log.error(msg,e);    throw new SolrException(ErrorCode.SERVER_ERROR,msg,e);  }  InputSource inputSource=new InputSource(schemaInputStream);  inputSource.setSystemId(SystemIdResolver.createSystemIdFromResourceName(resourceName));  IndexSchema schema=new IndexSchema(config,resourceName,inputSource);  return schema;}  }
class C{  private GridData gridDataForLbl(){  GridData gridData=new GridData();  gridData.horizontalIndent=5;  gridData.verticalIndent=10;  return gridData;}  }
class C{  public static boolean isXioVolume(String nativeGuid){  return nativeGuid.contains("XTREMIO");}  }
class C{  public RegisterServer2Request clone(){  RegisterServer2Request result=new RegisterServer2Request();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.Server=Server == null ? null : Server.clone();  return result;}  }
class C{  public void restartPlayback(Context context){  Log.i("CAMERA","Restarting playback!!");  init(context);  startPlayback();}  }
class C{  public String previousToken(){  if (hasPrevious()) {    return tokens[--tokenPos];  }  return null;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deregister") @CheckPermission(roles={Role.TENANT_ADMIN}) public InitiatorRestRep deregisterInitiator(@PathParam("id") URI id){  Initiator initiator=queryResource(id);  ArgValidator.checkEntity(initiator,id,isIdEmbeddedInURL(id));  if (ComputeSystemHelper.isInitiatorInUse(_dbClient,id.toString())) {    throw APIException.badRequests.resourceHasActiveReferencesWithType(Initiator.class.getSimpleName(),initiator.getId(),ExportGroup.class.getSimpleName());  }  if (RegistrationStatus.REGISTERED.toString().equalsIgnoreCase(initiator.getRegistrationStatus())) {    initiator.setRegistrationStatus(RegistrationStatus.UNREGISTERED.toString());    _dbClient.persistObject(initiator);    auditOp(OperationTypeEnum.DEREGISTER_INITIATOR,true,null,initiator.getLabel(),initiator.getId().toString());  }  return map(initiator);}  }
class C{  public int indexOf(final AbstractInsnNode insn){  if (cache == null) {    cache=toArray();  }  return insn.index;}  }
class C{  public static Vector<Object> inputs(Vector<Object> subset,Integer... tab){  Vector<Object> result=new Vector<Object>();  for (int i=0; i < subset.size(); i++) {    BeanInstance temp=(BeanInstance)subset.elementAt(i);    if (checkTargetConstraint(temp,subset,tab)) {      result.add(temp);    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:19.764 -0500",hash_original_method="47CE65B8425CCCD6D64866E88AA89041",hash_generated_method="9066BCE4D54754916DEFAD52BAF6D753") public boolean restoreState(Bundle inState){  if (DebugFlags.NETWORK) {    Log.v(LOGTAG,"Network.restoreState()");  }  return mSslErrorHandler.restoreState(inState);}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  public static void wtf(String tag,String msg,Throwable tr){  println(ASSERT,tag,msg,tr);}  }
class C{  public NativePooledByteBufferOutputStream(NativeMemoryChunkPool pool,int initialCapacity){  super();  Preconditions.checkArgument(initialCapacity > 0);  mPool=Preconditions.checkNotNull(pool);  mCount=0;  mBufRef=CloseableReference.of(mPool.get(initialCapacity),mPool);}  }
class C{  private static Object add(final Object array,final int index,final Object element,final Class<?> clss){  if (array == null) {    if (index != 0) {      throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0");    }    final Object joinedArray=Array.newInstance(clss,1);    Array.set(joinedArray,0,element);    return joinedArray;  }  final int length=Array.getLength(array);  if (index > length || index < 0) {    throw new IndexOutOfBoundsException("Index: " + index + ", Length: "+ length);  }  final Object result=Array.newInstance(clss,length + 1);  System.arraycopy(array,0,result,0,index);  Array.set(result,index,element);  if (index < length) {    System.arraycopy(array,index,result,index + 1,length - index);  }  return result;}  }
class C{  public Notification updateNotification(BigInteger alertId,BigInteger notificationId,Notification notification) throws IOException {  String requestUrl=RESOURCE + "/" + alertId.toString()+ "/notifications/"+ notificationId.toString();  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.PUT,requestUrl,notification);  assertValidResponse(response,requestUrl);  return fromJson(response.getResult(),Notification.class);}  }
class C{  private void showSoftKeyboard(View triggerView){  if (BuildConfig.DEBUG)   Log.v("showSoftKeyboard()");  if (inputManager == null) {    inputManager=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);  }  inputView=triggerView;  inputManager.toggleSoftInput(InputMethodManager.SHOW_FORCED,0);}  }
class C{  public TermPayloadIterablePosting(BitIn _bitFileReader,int _numEntries,DocumentIndex doi) throws IOException {  super(_bitFileReader,_numEntries,doi);}  }
class C{  private int insertTestDataOffsetDTTypes(PreparedStatement pstmt) throws Exception {  pstmt.setInt(1,1);  pstmt.setObject(2,testOffsetTime,JDBCType.VARCHAR);  pstmt.setObject(3,testOffsetTime);  pstmt.setObject(4,testOffsetDateTime,JDBCType.VARCHAR);  pstmt.setObject(5,testOffsetDateTime);  assertEquals(1,pstmt.executeUpdate());  if (pstmt instanceof CallableStatement) {    CallableStatement cstmt=(CallableStatement)pstmt;    cstmt.setInt("id",2);    cstmt.setObject("ot1",testOffsetTime,JDBCType.VARCHAR);    cstmt.setObject("ot2",testOffsetTime);    cstmt.setObject("odt1",testOffsetDateTime,JDBCType.VARCHAR);    cstmt.setObject("odt2",testOffsetDateTime);    assertEquals(1,cstmt.executeUpdate());    return 2;  }  return 1;}  }
class C{  private Builder(){}  }
class C{  public Method resolveFunction(String prefix,String localName){  if (this.fnmap != null) {    return this.fnmap.get(prefix + ":" + localName);  }  return theMethod;}  }
class C{  public void testTrivial(){  check("select * from table;","select * from table;");}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public boolean closeIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_CLOSE);  if (m_processMsg != null)   return false;  setDocAction(DOCACTION_None);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_CLOSE);  if (m_processMsg != null)   return false;  return true;}  }
class C{  @Override public void readFile(final String filename){  String lcFilename=filename.toLowerCase(Locale.ROOT);  if (lcFilename.endsWith(".xml") || lcFilename.endsWith(".xml.gz")) {    new XmlEventsReader(this.events).readFile(filename);  } else   if (lcFilename.endsWith(".txt") || lcFilename.endsWith(".txt.gz")) {    throw new RuntimeException("text events are no longer supported. Please use MATSim 0.6.1 or earlier to read text events.");  } else {    throw new IllegalArgumentException("Cannot recognize the format of the events-file " + filename);  }}  }
class C{  public TextBuilder(int capacity){  this();  while (capacity > _capacity) {    increaseCapacity();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public String toStringRfc3339(){  StringBuilder sb=new StringBuilder();  Calendar dateTime=new GregorianCalendar(GMT);  long localTime=value + (tzShift * 60000L);  dateTime.setTimeInMillis(localTime);  appendInt(sb,dateTime.get(Calendar.YEAR),4);  sb.append('-');  appendInt(sb,dateTime.get(Calendar.MONTH) + 1,2);  sb.append('-');  appendInt(sb,dateTime.get(Calendar.DAY_OF_MONTH),2);  if (!dateOnly) {    sb.append('T');    appendInt(sb,dateTime.get(Calendar.HOUR_OF_DAY),2);    sb.append(':');    appendInt(sb,dateTime.get(Calendar.MINUTE),2);    sb.append(':');    appendInt(sb,dateTime.get(Calendar.SECOND),2);    if (dateTime.isSet(Calendar.MILLISECOND)) {      sb.append('.');      appendInt(sb,dateTime.get(Calendar.MILLISECOND),3);    }    if (tzShift == 0) {      sb.append('Z');    } else {      int absTzShift=tzShift;      if (tzShift > 0) {        sb.append('+');      } else {        sb.append('-');        absTzShift=-absTzShift;      }      int tzHours=absTzShift / 60;      int tzMinutes=absTzShift % 60;      appendInt(sb,tzHours,2);      sb.append(':');      appendInt(sb,tzMinutes,2);    }  }  return sb.toString();}  }
class C{  public void copyIntoResetFrontier(final int off,final IArraySlice<Value> slice){  backing.put(off,slice.array(),slice.off(),slice.len());}  }
class C{  @Override protected void onMessageOnProducerThread(T msg){synchronized (_lock) {    if (_pending == null) {      _pending=new ArrayList<>();      _queue.schedule(_flushRunnable,_interval,_timeUnit);    }    _pending.add(msg);  }}  }
class C{  public NodesInfoRequestBuilder clear(){  request.clear();  return this;}  }
class C{  protected void skipIdentifier() throws IOException {  loop:   for (; ; ) {    current=reader.read();switch (current) {case 0xD:case 0xA:case 0x20:case 0x9:      current=reader.read();    break loop;default :  if (current == -1) {    break loop;  }}}}  }
class C{  public boolean hasListener(String listenerName){synchronized (lockObj) {    if (listener == null)     return false; else     if (listener.getName().equalsIgnoreCase(listenerName))     return true; else     if (listener instanceof CompositeListener)     return ((CompositeListener)listener).hasListener(listenerName); else     return false;  }}  }
class C{  public CloneableIterator<byte[]> keys(final boolean up,final boolean rotating) throws IOException {  if (this.index == null) {    log.severe("this.index == null in keys(); closeDate=" + this.closeDate + ", now="+ new Date()+ this.heapFile == null ? "" : (" file = " + this.heapFile.toString()));    return null;  }synchronized (this.index) {    return new RotateIterator<byte[]>(this.index.keys(up,null),null,this.index.size());  }}  }
class C{  final public MutableString append(final double d){  return append(String.valueOf(d));}  }
class C{  int chunkSize(){  return mChunkSize;}  }
class C{  private void stopExecutors(IgniteLogger log){  boolean interrupted=Thread.interrupted();  try {    stopExecutors0(log);  }  finally {    if (interrupted)     Thread.currentThread().interrupt();  }}  }
class C{  public static Map<String,String> simpleCommandLineParser(String[] args){  Map<String,String> map=new HashMap<String,String>();  for (int i=0; i <= args.length; i++) {    String key=(i > 0 ? args[i - 1] : null);    String value=(i < args.length ? args[i] : null);    if (key == null || key.startsWith("-")) {      if (value != null && value.startsWith("-"))       value=null;      if (key != null || value != null)       map.put(key,value);    }  }  return map;}  }
class C{  public boolean isSetDomainId(){  return EncodingUtils.testBit(__isset_bitfield,__DOMAINID_ISSET_ID);}  }
class C{  public void ret(final int local){  mv.visitVarInsn(Opcodes.RET,local);}  }
class C{  public BaseNode(final List<ConditionNode> children){  this.children=new ArrayList<>(children);}  }
class C{  public String localize() throws OperationNotPermittedException, ObjectNotFoundException {  setLocalizeVisible(true);  menuBean.setCurrentPageLink(MenuBean.LINK_SERVICE_EDIT);  localization=null;  setServiceAttributesToLocalization();  return null;}  }
class C{  public WrappedByteBuffer putUnsignedInt(long value){  this.putInt((int)value & 0xFFFFFFFF);  return this;}  }
class C{  public WETriangleMesh(String name,int numV,int numF){  super(name,numV,numF);}  }
class C{  @Override public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  LOGGER.debug("Visiting class: " + name);  this.className=name;  LOGGER.debug("Class Major Version: " + version);  cw.visit(version,ACC_PUBLIC + ACC_SUPER,generateWithName,null,name,null);  LOGGER.debug("Super class: " + superName);  LOGGER.debug("Generating new Class with name:" + generateWithName);  super.visit(version,access,name,signature,superName,interfaces);}  }
class C{  public boolean isDownloadingFinished(){  return status.get() != DownloadArtifactInfo.Status.DOWNLOADING;}  }
class C{  public boolean isAPSupported(){  return Util.getImplementation().isAPSupported();}  }
class C{  public TestSource(String className,Modifier... modifiers){  this.packageName=null;  this.className=className;  this.modifiers=modifiers;}  }
class C{  public String list(){  users=userManager.getUsers(new User());  return SUCCESS;}  }
class C{  private void unregisterListener(String request){  delete(request).then().assertThat().statusCode(200);}  }
class C{  public void testRetrievalHeap() throws Exception {  double fullBegin=System.currentTimeMillis();  double averageQueryTimeMs=0;  double averageTraversalTimeMs=0;  for (int i=0; i < NUM_TESTS; i++) {    long queryBegin=System.currentTimeMillis();    this.rs=this.stmt.executeQuery("SELECT * FROM retrievalPerfTestHeap");    long queryEnd=System.currentTimeMillis();    averageQueryTimeMs+=((double)(queryEnd - queryBegin) / NUM_TESTS);    long traverseBegin=System.currentTimeMillis();    while (this.rs.next()) {      this.rs.getInt(1);      this.rs.getString(2);    }    long traverseEnd=System.currentTimeMillis();    averageTraversalTimeMs+=((double)(traverseEnd - traverseBegin) / NUM_TESTS);  }  double fullEnd=System.currentTimeMillis();  double fullTime=(fullEnd - fullBegin) / 1000;  double queriesPerSec=NUM_TESTS / fullTime;  double rowsPerSec=(NUM_ROWS * NUM_TESTS) / fullTime;  System.out.println("\nHEAP Table Retrieval\n");  System.out.println("Full test took: " + fullTime + " seconds.");  System.out.println("Queries/second: " + queriesPerSec);  System.out.println("Rows/second: " + rowsPerSec);  System.out.println("Avg. Query Exec Time: " + averageQueryTimeMs + " ms");  System.out.println("Avg. Traversal Time: " + averageTraversalTimeMs + " ms");  assertTrue(fullTime < 45);}  }
class C{  private static long shallowSizeOfArray(Object array){  long size=NUM_BYTES_ARRAY_HEADER;  final int len=Array.getLength(array);  if (len > 0) {    Class<?> arrayElementClazz=array.getClass().getComponentType();    if (arrayElementClazz.isPrimitive()) {      size+=(long)len * primitiveSizes.get(arrayElementClazz);    } else {      size+=(long)NUM_BYTES_OBJECT_REF * len;    }  }  return alignObjectSize(size);}  }
class C{  public static File fromDataURI(String dataURI,String fileName){  return File.createIfSupported(fromDataURI(dataURI),fileName);}  }
class C{  public void validate(FacesContext facesContext,UIComponent uiComponent,Object value) throws ValidatorException {  if (value == null) {    return;  }  BigDecimal valueBigDecimal=(BigDecimal)value;  BigDecimal maxValue=new BigDecimal("100.00");  BigDecimal minValue=new BigDecimal("0");  if (valueBigDecimal.scale() > MAXIMUM_FRACTION_DIGIT) {    FacesMessage facesMessage=JSFUtils.getFacesMessage(uiComponent,facesContext,BaseBean.ERROR_REVENUESHARE_INVALID_FRACTIONAL_PART);    throw new ValidatorException(facesMessage);  }  if (valueBigDecimal.compareTo(maxValue) == 1) {    FacesMessage facesMessage=JSFUtils.getFacesMessage(uiComponent,facesContext,BaseBean.ERROR_REVENUESHARE_VALUE);    throw new ValidatorException(facesMessage);  }  if (valueBigDecimal.compareTo(minValue) == -1) {    FacesMessage facesMessage=JSFUtils.getFacesMessage(uiComponent,facesContext,BaseBean.ERROR_REVENUESHARE_VALUE);    throw new ValidatorException(facesMessage);  }}  }
class C{  public void addContact(Contact contact){  addProperty(contact);}  }
class C{  @Experimental public void registerHook(String event,String cmd){  String className=interpreterContext.getClassName();  registerHook(event,cmd,className);}  }
class C{  public static void disableScreenshotFunctionality(Activity activity){  activity.getWindow().setFlags(LayoutParams.FLAG_SECURE,LayoutParams.FLAG_SECURE);}  }
class C{  private String postExperimentInfo(){  StringBuffer text=new StringBuffer();  text.append(m_finishedCount + (m_splitByDataSet ? " data sets" : " runs") + " completed successfully. "+ m_failedCount+ " failures during running.\n");  System.err.print(text.toString());  return text.toString();}  }
class C{  private boolean isValidStatus(String statusStr){  boolean valid=false;  Status[] validStatus=Status.values();  for (  Status status : validStatus) {    if (status.name().toUpperCase().equals(statusStr.toUpperCase())) {      valid=true;      break;    }  }  return valid;}  }
class C{  public void popIn(View v,long delay){  if (v.getVisibility() != View.VISIBLE) {    v.setVisibility(View.VISIBLE);    ScaleAnimation anim=new ScaleAnimation(0f,1f,0f,1f);    anim.setDuration(750);    anim.setStartOffset(delay);    anim.setInterpolator(new BounceInterpolator());    v.startAnimation(anim);  }}  }
class C{  @PrePersist protected void prePersist(){  this.orderState=OrderState.CREATED;}  }
class C{  public TenantConfigurationValueBuilder<T> createdAt(final Long createdAt){  this.configuration.createdAt=createdAt;  return this;}  }
class C{  public int lastIndexOfAny(CharSet charSet){  return lastIndexOfAny(charSet,0,length());}  }
class C{  public void showDrawerButton(){  if (getActivity() instanceof AppCompatActivity) {    ((AppCompatActivity)getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(false);  }  mActionBarDrawerToggle.syncState();}  }
class C{  public static boolean isNil(final LuaValue target){  return target != null && target.type() == LuaValue.TNIL;}  }
class C{  public MatPalette overridePalette(MatPalette palette){  return palette;}  }
class C{  public static synchronized void describe(String description,SafeBlock block){  isValidContext("describe");  ExampleGroupConfiguration config=new ExampleGroupConfiguration.Builder().description(description).executionFlag(DEFAULT).build();  contexts.get().current().addGroup(config,block);}  }
class C{  public static String createVltFilePath(Shell shell,String text,int style,String defaultFileName){  return createFilePath(shell,text,PreferenceConstants.DEFAULT_FOLDER_VLT,vltExtensions,style,defaultFileName);}  }
class C{  public boolean isCommentOnly(){  return commentOnly;}  }
class C{  public void print(String sTab){  for (int iValue=0; iValue < m_ADNodes.length; iValue++) {    System.out.print(sTab + iValue + ": ");    if (m_ADNodes[iValue] == null) {      if (iValue == m_nMCV) {        System.out.println("MCV");      } else {        System.out.println("null");      }    } else {      System.out.println();      m_ADNodes[iValue].print();    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void selectWord(MouseEvent e){  if (selectedWordEvent != null && selectedWordEvent.getX() == e.getX() && selectedWordEvent.getY() == e.getY()) {    return;  }  Action a=null;  RTextArea textArea=getTextArea();  ActionMap map=textArea.getActionMap();  if (map != null) {    a=map.get(RTextAreaEditorKit.selectWordAction);  }  if (a == null) {    if (selectWord == null) {      selectWord=new RTextAreaEditorKit.SelectWordAction();    }    a=selectWord;  }  a.actionPerformed(new ActionEvent(textArea,ActionEvent.ACTION_PERFORMED,null,e.getWhen(),e.getModifiers()));  selectedWordEvent=e;}  }
class C{  String formatNumberList(TransformerImpl transformer,long[] list,int contextNode) throws TransformerException {  String numStr;  FastStringBuffer formattedNumber=StringBufferPool.get();  try {    int nNumbers=list.length, numberWidth=1;    char numberType='1';    String formatToken, lastSepString=null, formatTokenString=null;    String lastSep=".";    boolean isFirstToken=true;    String formatValue=(null != m_format_avt) ? m_format_avt.evaluate(transformer.getXPathContext(),contextNode,this) : null;    if (null == formatValue)     formatValue="1";    NumberFormatStringTokenizer formatTokenizer=new NumberFormatStringTokenizer(formatValue);    for (int i=0; i < nNumbers; i++) {      if (formatTokenizer.hasMoreTokens()) {        formatToken=formatTokenizer.nextToken();        if (Character.isLetterOrDigit(formatToken.charAt(formatToken.length() - 1))) {          numberWidth=formatToken.length();          numberType=formatToken.charAt(numberWidth - 1);        } else         if (formatTokenizer.isLetterOrDigitAhead()) {          formatTokenString=formatToken;          while (formatTokenizer.nextIsSep()) {            formatToken=formatTokenizer.nextToken();            formatTokenString+=formatToken;          }          if (!isFirstToken)           lastSep=formatTokenString;          formatToken=formatTokenizer.nextToken();          numberWidth=formatToken.length();          numberType=formatToken.charAt(numberWidth - 1);        } else {          lastSepString=formatToken;          while (formatTokenizer.hasMoreTokens()) {            formatToken=formatTokenizer.nextToken();            lastSepString+=formatToken;          }        }      }      if (null != formatTokenString && isFirstToken) {        formattedNumber.append(formatTokenString);      } else       if (null != lastSep && !isFirstToken)       formattedNumber.append(lastSep);      getFormattedNumber(transformer,contextNode,numberType,numberWidth,list[i],formattedNumber);      isFirstToken=false;    }    while (formatTokenizer.isLetterOrDigitAhead()) {      formatTokenizer.nextToken();    }    if (lastSepString != null)     formattedNumber.append(lastSepString);    while (formatTokenizer.hasMoreTokens()) {      formatToken=formatTokenizer.nextToken();      formattedNumber.append(formatToken);    }    numStr=formattedNumber.toString();  }  finally {    StringBufferPool.free(formattedNumber);  }  return numStr;}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();  for (int i=0; i < timeEvents.length; i++) {    timeEvents[i]=false;  }}  }
class C{  public void startMachine(MachineConfig machineConfig,String workspaceId) throws ServerException, ConflictException, BadRequestException, NotFoundException {  final WorkspaceImpl workspace=getWorkspace(workspaceId);  if (RUNNING != workspace.getStatus()) {    throw new ConflictException(format("Workspace '%s' is not running, new machine can't be started",workspaceId));  }  performAsyncStart(machineConfig,workspaceId);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  private static int determineConsecutiveTextCount(CharSequence msg,int startpos){  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch) && idx < len) {      numericCount++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }    if (numericCount >= 13) {      return idx - startpos - numericCount;    }    if (numericCount > 0) {      continue;    }    ch=msg.charAt(idx);    if (!isText(ch)) {      break;    }    idx++;  }  return idx - startpos;}  }
class C{  private <T>T[] copyElements(T[] a){  if (head < tail) {    System.arraycopy(elements,head,a,0,size());  } else   if (head > tail) {    int headPortionLen=elements.length - head;    System.arraycopy(elements,head,a,0,headPortionLen);    System.arraycopy(elements,0,a,headPortionLen,tail);  }  return a;}  }
class C{  public Object opt(int index){  return (index < 0 || index >= length()) ? null : get(index);}  }
class C{  public boolean isInStandbyMode(){  return isInStandbyMode;}  }
class C{  private void initScrollbar(){  m_scrollbar.addAdjustmentListener(m_listener);  add(m_scrollbar,BorderLayout.EAST);  m_horizontalScrollbar.addAdjustmentListener(m_listener);  add(m_horizontalScrollbar,BorderLayout.SOUTH);}  }
class C{  public static void putLong(long val,byte[] buf,int off){  assert off + 4 <= buf.length;  buf[off]=long0(val);  buf[off + 1]=long1(val);  buf[off + 2]=long2(val);  buf[off + 3]=long3(val);  buf[off + 4]=long4(val);  buf[off + 5]=long5(val);  buf[off + 6]=long6(val);  buf[off + 7]=long7(val);}  }
class C{  @Parameterized.Parameters public static Collection<Object[]> configs(){  return Arrays.asList(new Object[][]{{"inner","on","v2",true},{"left","on","v1",true},{"left","on","v2",true}});}  }
class C{  public void process(DistributionManager dm){  Assert.assertTrue(this.date != null);  System.out.println(format.format(this.date));}  }
class C{  public boolean isNotIn(){  return isNotIn;}  }
class C{  public static boolean toBooleanValue(int i){  return i != 0;}  }
class C{  public String save() throws IOException {  Boolean encrypt=(Boolean)getConfiguration().get(Constants.ENCRYPT_PASSWORD);  if ("true".equals(getRequest().getParameter("encryptPass")) && (encrypt != null && encrypt)) {    String algorithm=(String)getConfiguration().get(Constants.ENC_ALGORITHM);    if (algorithm == null) {      log.debug("assuming testcase, setting algorithm to 'SHA'");      algorithm="SHA";    }    user.setPassword(StringUtil.encodePassword(user.getPassword(),algorithm));  }  Integer originalVersion=user.getVersion();  boolean isNew=("".equals(getRequest().getParameter("user.version")));  if (getRequest().isUserInRole(Constants.ADMIN_ROLE)) {    user.getRoles().clear();    String[] userRoles=getRequest().getParameterValues("userRoles");    for (int i=0; userRoles != null && i < userRoles.length; i++) {      String roleName=userRoles[i];      user.addRole(roleManager.getRole(roleName));    }  }  try {    user=userManager.saveUser(user);  } catch (  AccessDeniedException ade) {    log.warn(ade.getMessage());    getResponse().sendError(HttpServletResponse.SC_FORBIDDEN);    return null;  }catch (  UserExistsException e) {    List<String> args=new ArrayList<String>();    args.add(user.getUsername());    args.add(user.getEmail());    addActionError(getText("errors.existing.user",args.toArray(new String[]{})));    user.setVersion(originalVersion);    user.setPassword(user.getConfirmPassword());    return INPUT;  }  if (!"list".equals(from)) {    saveMessage(getText("user.saved"));    return "mainMenu";  } else {    List<String> args=new ArrayList<String>();    args.add(user.getFullName());    if (isNew) {      saveMessage(getText("user.added",args.toArray(new String[]{})));      mailMessage.setSubject(getText("signup.email.subject"));      sendUserMessage(user,getText("newuser.email.message",args.toArray(new String[]{})),RequestUtil.getAppURL(getRequest()));      return SUCCESS;    } else {      saveMessage(getText("user.updated.byAdmin",args.toArray(new String[]{})));      return INPUT;    }  }}  }
class C{  public Vector4f normalize3(){  float invLength=(float)(1.0 / Math.sqrt(x * x + y * y + z * z));  x*=invLength;  y*=invLength;  z*=invLength;  w*=invLength;  return this;}  }
class C{  long readLong() throws IOException {  return (((long)_is.read() << 56) | ((long)_is.read() << 48) | ((long)_is.read() << 40)| ((long)_is.read() << 32)| ((long)_is.read() << 24)| ((long)_is.read() << 16)| ((long)_is.read() << 8)| ((long)_is.read()));}  }
class C{  public void zoomOut(){  if (mZoomOut != null) {    mZoomOut.apply(Zoom.ZOOM_AXIS_XY);    repaint();  }}  }
class C{  public Viennet2(){  super(2,3);}  }
class C{  public static void startGooglePlay(Context context){  final String appPackageName=context.getPackageName();  try {    context.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("market://details?id=" + appPackageName)));  } catch (  android.content.ActivityNotFoundException anfe) {    context.startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("http://play.google.com/store/apps/details?id=" + appPackageName)));  }}  }
class C{  protected void validateStartState(State currentState){  ValidationUtils.validateState(currentState);  ValidationUtils.validateTaskStage(currentState.taskState);}  }
class C{  public void swapComponents(){  JComponent tmp=myFirstComponent;  myFirstComponent=mySecondComponent;  mySecondComponent=tmp;  revalidate();  repaint();}  }
class C{  public double originalValue(double value) throws Exception {  if (m_Converter == null) {    throw new IllegalStateException("Coverter table not defined yet!");  }  for (int i=0; i < m_Converter.length; i++) {    if ((int)value == m_Converter[i]) {      return i;    }  }  return -1;}  }
class C{  void loadFieldIds() throws IOException {  int count=mHeaderItem.fieldIdsSize;  mFieldIds=new FieldIdItem[count];  seek(mHeaderItem.fieldIdsOff);  for (int i=0; i < count; i++) {    mFieldIds[i]=new FieldIdItem();    mFieldIds[i].classIdx=readShort() & 0xffff;    mFieldIds[i].typeIdx=readShort() & 0xffff;    mFieldIds[i].nameIdx=readInt();  }}  }
class C{  private boolean validateCorsOrigin(final HttpRequest request){  if (config.isAnyOriginSupported()) {    return true;  }  final String origin=request.headers().get(HttpHeaderNames.ORIGIN);  return origin == null || NULL_ORIGIN.equals(origin) && config.isNullOriginAllowed() || config.origins().contains(origin.toLowerCase(Locale.ENGLISH));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void updateSnapshotSessionLinkedTargets(BlockSnapshot snapshot,DbClient dbClient){  List<BlockSnapshot> snapshots=ControllerUtils.getSnapshotsPartOfReplicationGroup(snapshot,dbClient);  if (snapshots == null || snapshots.isEmpty()) {    return;  }  for (  BlockSnapshot existing : snapshots) {    List<BlockSnapshotSession> sessions=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,BlockSnapshotSession.class,ContainmentConstraint.Factory.getLinkedTargetSnapshotSessionConstraint(existing.getId()));    if (!sessions.isEmpty()) {      BlockSnapshotSession session=sessions.get(0);      session.getLinkedTargets().add(snapshot.getId().toString());      dbClient.updateObject(session);      break;    }  }}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(getGraphicsConfiguration().getColorModel())) {    return image;  }  BufferedImage compatibleImage=getGraphicsConfiguration().createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  public void done(){  if (isDone)   throw new IllegalStateException("Can't call done() twice");  if (points.size() == 0)   throw new IllegalArgumentException("Path must have at least one point");  isDone=true;  endPoints=new ArrayList<>(points.size());  segments=new ArrayList<>(points.size());  final double cutoffOffset=this.sinAngle * planetModel.getMinimumMagnitude();  GeoPoint lastPoint=null;  for (  final GeoPoint end : points) {    if (lastPoint != null) {      final Plane normalizedConnectingPlane=new Plane(lastPoint,end);      if (normalizedConnectingPlane == null) {        continue;      }      segments.add(new PathSegment(planetModel,lastPoint,end,normalizedConnectingPlane,cutoffOffset));    }    lastPoint=end;  }  if (segments.size() == 0) {    double lat=points.get(0).getLatitude();    double lon=points.get(0).getLongitude();    double upperLat=lat + cutoffAngle;    double upperLon=lon;    if (upperLat > Math.PI * 0.5) {      upperLon+=Math.PI;      if (upperLon > Math.PI)       upperLon-=2.0 * Math.PI;      upperLat=Math.PI - upperLat;    }    double lowerLat=lat - cutoffAngle;    double lowerLon=lon;    if (lowerLat < -Math.PI * 0.5) {      lowerLon+=Math.PI;      if (lowerLon > Math.PI)       lowerLon-=2.0 * Math.PI;      lowerLat=-Math.PI - lowerLat;    }    final GeoPoint upperPoint=new GeoPoint(planetModel,upperLat,upperLon);    final GeoPoint lowerPoint=new GeoPoint(planetModel,lowerLat,lowerLon);    final GeoPoint point=points.get(0);    final Plane normalPlane=Plane.constructNormalizedZPlane(upperPoint,lowerPoint,point);    final SegmentEndpoint onlyEndpoint=new SegmentEndpoint(point,normalPlane,upperPoint,lowerPoint);    endPoints.add(onlyEndpoint);    this.edgePoints=new GeoPoint[]{onlyEndpoint.circlePlane.getSampleIntersectionPoint(planetModel,normalPlane)};    return;  }  for (int i=0; i < segments.size(); i++) {    final PathSegment currentSegment=segments.get(i);    if (i == 0) {      final SegmentEndpoint startEndpoint=new SegmentEndpoint(currentSegment.start,currentSegment.startCutoffPlane,currentSegment.ULHC,currentSegment.LLHC);      endPoints.add(startEndpoint);      this.edgePoints=new GeoPoint[]{currentSegment.ULHC};      continue;    }    final PathSegment prevSegment=segments.get(i - 1);    final SidedPlane candidate1=SidedPlane.constructNormalizedThreePointSidedPlane(currentSegment.start,prevSegment.URHC,currentSegment.ULHC,currentSegment.LLHC);    final SidedPlane candidate2=SidedPlane.constructNormalizedThreePointSidedPlane(currentSegment.start,currentSegment.ULHC,currentSegment.LLHC,prevSegment.LRHC);    final SidedPlane candidate3=SidedPlane.constructNormalizedThreePointSidedPlane(currentSegment.start,currentSegment.LLHC,prevSegment.LRHC,prevSegment.URHC);    final SidedPlane candidate4=SidedPlane.constructNormalizedThreePointSidedPlane(currentSegment.start,prevSegment.LRHC,prevSegment.URHC,currentSegment.ULHC);    if (candidate1 == null && candidate2 == null && candidate3 == null && candidate4 == null) {      final SegmentEndpoint midEndpoint=new SegmentEndpoint(currentSegment.start,prevSegment.endCutoffPlane,currentSegment.startCutoffPlane,currentSegment.ULHC,currentSegment.LLHC);      endPoints.add(midEndpoint);    } else {      endPoints.add(new SegmentEndpoint(currentSegment.start,prevSegment.endCutoffPlane,currentSegment.startCutoffPlane,prevSegment.URHC,prevSegment.LRHC,currentSegment.ULHC,currentSegment.LLHC,candidate1,candidate2,candidate3,candidate4));    }  }  final PathSegment lastSegment=segments.get(segments.size() - 1);  endPoints.add(new SegmentEndpoint(lastSegment.end,lastSegment.endCutoffPlane,lastSegment.URHC,lastSegment.LRHC));}  }
class C{  public boolean addressTypeUnique(){  return false;}  }
class C{  public void drawHeader(RecyclerView recyclerView,Canvas canvas,View header,Rect offset){  canvas.save();  if (recyclerView.getLayoutManager().getClipToPadding()) {    Rect clipRect=getClipRectForHeader(recyclerView,header);    canvas.clipRect(clipRect);  }  canvas.translate(offset.left,offset.top);  header.draw(canvas);  canvas.restore();}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tFull path to serialized classifier to include.\n" + "\tMay be specified multiple times to include\n" + "\tmultiple serialized classifiers. Note: it does\n"+ "\tnot make sense to use pre-built classifiers in\n"+ "\ta cross-validation.","P",1,"-P <path to serialized " + "classifier>"));  result.addElement(new Option("\tThe combination rule to use\n" + "\t(default: AVG)","R",1,"-R " + Tag.toOptionList(TAGS_RULES)));  result.addElement(new Option("\tSuppress the printing of the individual models in the output","do-not-print",0,"-do-not-print"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  protected boolean shouldShowControls(){  MediaControllerCompat mediaController=mMediaController;  if (mediaController == null || mediaController.getMetadata() == null || mediaController.getPlaybackState() == null) {    return false;  }switch (mediaController.getPlaybackState().getState()) {case PlaybackState.STATE_ERROR:case PlaybackState.STATE_NONE:case PlaybackState.STATE_STOPPED:    return false;default :  return true;}}  }
class C{  private void addDepartures(TransitSchedule newTransitSchedule,List<FahrtEvent> fahrtEvents,Set<String> rblDates,double timeBinSize){  int nOfDeparture=0;  for (  FahrtEvent fahrtEvent : fahrtEvents) {    if (rblDates.contains(String.valueOf(fahrtEvent.getRblDate()))) {      TransitLine line=newTransitSchedule.getTransitLines().get(fahrtEvent.getLineId());      if (line != null) {        Id<TransitRoute> routeId=Id.create(fahrtEvent.getRouteId().toString() + "-" + ((int)(fahrtEvent.getDepartureTimeIst() / timeBinSize)),TransitRoute.class);        TransitRoute route=line.getRoutes().get(routeId);        if (route != null) {          nOfDeparture++;          Departure departure=newTransitSchedule.getFactory().createDeparture(Id.create(nOfDeparture,Departure.class),fahrtEvent.getDepartureTimeIst());          departure.setVehicleId(fahrtEvent.getVehId());          route.addDeparture(departure);        }      }    }  }  log.info("Added " + nOfDeparture + " departures");}  }
class C{  public BigdataOpenRDFBindingSetsResolverator start(final ExecutorService service){  return (BigdataOpenRDFBindingSetsResolverator)super.start(service);}  }
class C{  private SchedulerFuture<R> snapshot(R res,Throwable err){  return new ScheduleFutureSnapshot<>(this,res,err);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case FunctionblockPackage.FAULT__PROPERTIES:    return getProperties();}return super.eGet(featureID,resolve,coreType);}  }
class C{  void appendAttribute(int namespaceIndex,int localNameIndex,int prefixIndex,boolean isID,int m_char_current_start,int contentLength){  int w0=ATTRIBUTE_NODE | namespaceIndex << 16;  int w1=currentParent;  int w2=0;  int w3=localNameIndex | prefixIndex << 16;  System.out.println("set w3=" + w3 + " "+ (w3 >> 16)+ "/"+ (w3 & 0xffff));  int ourslot=appendNode(w0,w1,w2,w3);  previousSibling=ourslot;  w0=TEXT_NODE;  w1=ourslot;  w2=m_char_current_start;  w3=contentLength;  appendNode(w0,w1,w2,w3);  previousSiblingWasParent=true;  return;}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  HistoryEntityDao.dropTable(db,ifExists);}  }
class C{  public final boolean contains(int s){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == s)     return true;  }  return false;}  }
class C{  void checkEndCode(){  if (endCode) {    throw new IllegalStateException("Cannot visit instructions after visitMaxs has been called.");  }}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  public void onEngineComplete(){  mEngineCompleteTime=SystemClock.elapsedRealtime();}  }
class C{  public Select<Model> whereLike(String column,Object value){  addClause(new DataFilterCriterion(column,DataFilterCriterion.DataFilterOperator.LIKE,value),DataFilterConjunction.AND);  return this;}  }
class C{  public XTIFFEncodeParam(TIFFEncodeParam param){  initialize();  if (param == null)   return;  setCompression(param.getCompression());  setWriteTiled(param.getWriteTiled());}  }
class C{  public void sendEmptyTouchAreaFeedbackDelayed(AccessibilityNodeInfoCompat touchedNode){  cancelEmptyTouchAreaFeedback();  mCachedTouchedNode=AccessibilityNodeInfoCompat.obtain(touchedNode);  final Message msg=obtainMessage(EMPTY_TOUCH_AREA);  sendMessageDelayed(msg,EMPTY_TOUCH_AREA_DELAY);}  }
class C{  protected void drawRangeGridlines(Graphics2D g2,Rectangle2D area,List ticks){  if (getRenderer() == null) {    return;  }  if (isRangeGridlinesVisible() || isRangeMinorGridlinesVisible()) {    Stroke gridStroke=null;    Paint gridPaint=null;    ValueAxis axis=getRangeAxis();    if (axis != null) {      Iterator iterator=ticks.iterator();      boolean paintLine;      while (iterator.hasNext()) {        paintLine=false;        ValueTick tick=(ValueTick)iterator.next();        if ((tick.getTickType() == TickType.MINOR) && isRangeMinorGridlinesVisible()) {          gridStroke=getRangeMinorGridlineStroke();          gridPaint=getRangeMinorGridlinePaint();          paintLine=true;        } else         if ((tick.getTickType() == TickType.MAJOR) && isRangeGridlinesVisible()) {          gridStroke=getRangeGridlineStroke();          gridPaint=getRangeGridlinePaint();          paintLine=true;        }        if ((tick.getValue() != 0.0 || !isRangeZeroBaselineVisible()) && paintLine) {          getRenderer().drawRangeLine(g2,this,getRangeAxis(),area,tick.getValue(),gridPaint,gridStroke);        }      }    }  }}  }
class C{  public boolean hasGenericSuperType(Type superType){  return GenericTypeReflector.isSuperType(superType,type);}  }
class C{  @ToString public String toString(){  return "P" + String.valueOf(getValue()) + "D";}  }
class C{  public static int listFind(String list,String value){  return listFind(list,value,",");}  }
class C{  public PacProxySelector(String pacUrl){  if (pacUrl == null) {    throw new NullPointerException();  }  this.pacUrl=pacUrl;}  }
class C{  public void flush(){synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      try {        mDiskLruCache.flush();        if (BuildConfig.DEBUG) {          Log.d(TAG,"Disk cache flushed");        }      } catch (      IOException e) {        Log.e(TAG,"flush - " + e);      }    }  }}  }
class C{  public String toString(){  return markupDocBuilder.toString();}  }
class C{  public TransactionOutPoint(NetworkParameters params,byte[] payload,int offset,Message parent,MessageSerializer serializer) throws ProtocolException {  super(params,payload,offset,parent,serializer,MESSAGE_LENGTH);}  }
class C{  public Object storedData(){  return stored;}  }
class C{  public static void doMain(String[] args){  String job="java:saveWithQueryBuilder";  String keyspaceName="test";  String inputTableName="tweets2";  final String outputTableName="copy_tweets3";  ContextProperties p=new ContextProperties(args);  DeepSparkContext deepContext=new DeepSparkContext(p.getCluster(),job,p.getSparkHome(),p.getJars());  CassandraDeepJobConfig<Cells> inputConfig=CassandraConfigFactory.create().host(p.getCassandraHost()).cqlPort(p.getCassandraCqlPort()).rpcPort(p.getCassandraThriftPort()).keyspace(keyspaceName).table(inputTableName).initialize();  long initTime=System.currentTimeMillis();  JavaRDD<Cells> inputRDD=deepContext.createJavaRDD(inputConfig);  System.out.println("**********************" + inputRDD.count() + System.currentTimeMillis());  long timeCreate=System.currentTimeMillis() - initTime;  initTime=System.currentTimeMillis();  CassandraDeepJobConfig<Cells> outputConfig=CassandraConfigFactory.create().host(p.getCassandraHost()).cqlPort(p.getCassandraCqlPort()).rpcPort(p.getCassandraThriftPort()).keyspace(keyspaceName).table(outputTableName).createTableOnWrite(true).initialize();  deepContext.saveRDD(inputRDD.rdd(),outputConfig);  System.out.println("**********************");  long timeSave=System.currentTimeMillis() - initTime;  initTime=System.currentTimeMillis();  System.out.println("initTime" + timeCreate + "save"+ timeSave);  deepContext.stop();}  }
class C{  protected static void print(String msg){  System.out.print(msg);}  }
class C{  public boolean hasTransparency(){  return super.hasElement(Transparency.KEY);}  }
class C{  public SelectorExtractor htmlParser(){  this.parser=Parser.htmlParser();  return this;}  }
class C{  public boolean isAssignBuckets(){  return this.assignBuckets;}  }
class C{  public void show(Animation anim){  show(true,anim);}  }
class C{  public static IndicatorSeries newInstance(String value){  final IndicatorSeries returnInstance=new IndicatorSeries();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  public static BigInteger calculateM2(Digest digest,BigInteger N,BigInteger A,BigInteger M1,BigInteger S){  BigInteger M2=hashPaddedTriplet(digest,N,A,M1,S);  return M2;}  }
class C{  public boolean isReinitialize(){  return this == REINITIALIZE;}  }
class C{  public ObjectFactory(){  super();}  }
class C{  public static SemSimulationParams serializableInstance(){  return new SemSimulationParams();}  }
class C{  @Override public boolean visit(boolean ignoreLastVisited,Visitor v) throws IgniteCheckedException {  if (!state.compareAndSet(State.READING_WRITING,State.VISITING)) {    assert state.get() != State.CLOSING;    return false;  }  AtomicLongArray tbl0=oldTbl;  for (int i=0; i < tbl0.length(); i++) {    long meta=tbl0.get(i);    while (meta != 0) {      long valPtr=value(meta);      long lastVisited=ignoreLastVisited ? 0 : lastVisitedValue(meta);      if (valPtr != lastVisited) {        v.onKey(key(meta),keySize(meta));        lastVisitedValue(meta,valPtr);        do {          v.onValue(valPtr + 12,valueSize(valPtr));          valPtr=nextValue(valPtr);        } while (valPtr != lastVisited);      }      meta=collision(meta);    }  }  state(State.VISITING,State.READING_WRITING);  return true;}  }
class C{  public int indexOf(final StrMatcher matcher,int startIndex){  startIndex=(startIndex < 0 ? 0 : startIndex);  if (matcher == null || startIndex >= size) {    return -1;  }  final int len=size;  final char[] buf=buffer;  for (int i=startIndex; i < len; i++) {    if (matcher.isMatch(buf,i,startIndex,len) > 0) {      return i;    }  }  return -1;}  }
class C{  public NativeDaemonEvent execute(Command cmd) throws NativeDaemonConnectorException {  return execute(cmd.mCmd,cmd.mArguments.toArray());}  }
class C{  @Override public void evaluate(Solution solution) throws JMException {  double[] values=new double[Pnts.length];switch (SVType) {case EXPONENTIAL:    for (int i=0; i < Pnts.length; i++) {      if (Pnts[i][0] != 0) {        values[i]=(Nugget ? solution.getDecisionVariables()[2].getValue() : 0) + solution.getDecisionVariables()[1].getValue() * (1 - Math.exp(-Pnts[i][0] / solution.getDecisionVariables()[0].getValue()));      } else {        values[i]=0;      }    }  break;case GAUSSIAN:for (int i=0; i < Pnts.length; i++) {  if (Pnts[i][0] != 0) {    values[i]=(Nugget ? solution.getDecisionVariables()[2].getValue() : 0) + solution.getDecisionVariables()[1].getValue() * (1 - Math.exp(-(Math.pow(Pnts[i][0],2)) / (Math.pow(solution.getDecisionVariables()[0].getValue(),2))));  } else {    values[i]=0;  }}break;case SPHERICAL:for (int i=0; i < Pnts.length; i++) {if (Pnts[0][0] > solution.getDecisionVariables()[0].getValue()) {values[i]=(Nugget ? solution.getDecisionVariables()[2].getValue() : 0) + solution.getDecisionVariables()[1].getValue();} else if (0 < Pnts[0][0] && Pnts[0][0] <= solution.getDecisionVariables()[0].getValue()) {values[i]=(Nugget ? solution.getDecisionVariables()[2].getValue() : 0) + solution.getDecisionVariables()[1].getValue() * (1.5 * Pnts[i][0] / solution.getDecisionVariables()[0].getValue() - 0.5 * Math.pow((Pnts[i][0] / solution.getDecisionVariables()[0].getValue()),3));} else {values[i]=0;}}break;}double mse=0;for (int i=0; i < Pnts.length; i++) {mse+=Math.pow((values[i] - Pnts[i][1]),2);}if (mse < difMin) {Kriging k=new Kriging();var=k.getSemivariogram(SVType,solution.getDecisionVariables()[0].getValue(),solution.getDecisionVariables()[1].getValue(),(Nugget) ? solution.getDecisionVariables()[2].getValue() : 0,false);var.mse=mse;difMin=mse;}solution.setObjective(0,mse);solution.setObjective(1,mse);}  }
class C{  public WeightedRandomChoiceWrapper(int weight,T wrapped){  super(weight);  this.wrapped=wrapped;}  }
class C{  public DoubleMatrix1D like1D(int size){  return new SparseDoubleMatrix1D(size);}  }
class C{  public FilteredNavigationRecordImpl(final String name,final String displayName,final String code,final String value,final String displayValue,final int count,final int rank,final String type){  this.name=name;  this.displayName=displayName;  this.code=code;  this.value=value;  this.displayValue=displayValue;  this.count=count;  this.rank=rank;  this.type=type;}  }
class C{  public static void copyStreamSynchronously(InputStream in,OutputStream out,boolean closeOutputStream) throws IOException {  byte[] buffer=new byte[1024 * 20];  try {    int length;    while ((length=in.read(buffer)) != -1) {      out.write(buffer,0,length);    }    out.flush();  }  finally {    if (closeOutputStream && out != null) {      try {        out.close();      } catch (      IOException ex) {      }    }    if (in != null) {      try {        in.close();      } catch (      IOException ex) {      }    }  }}  }
class C{  public void autodetectAnnotations(final boolean mode){  if (annotationMapper != null) {    annotationMapper.autodetectAnnotations(mode);  }}  }
class C{  public void write(String str,int off,int len){  buf.append(str.substring(off,off + len));}  }
class C{  public static ArrayOfDoublesSketch wrapSketch(final Memory mem,final long seed){  SerializerDeserializer.SketchType sketchType=SerializerDeserializer.getSketchType(mem);  if (sketchType == SerializerDeserializer.SketchType.ArrayOfDoublesQuickSelectSketch) {    return new DirectArrayOfDoublesQuickSelectSketch(mem,seed);  }  return new DirectArrayOfDoublesCompactSketch(mem,seed);}  }
class C{  public ExtentTest warning(String details){  log(Status.WARNING,details);  return this;}  }
class C{  public cite addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeArgument.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_ARGUMENT___GET_TYPE_REF_AS_STRING:      return TypeRefsPackage.UNKNOWN_TYPE_REF___GET_TYPE_REF_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_REF___GET_TYPE_REF_AS_STRING:  return TypeRefsPackage.UNKNOWN_TYPE_REF___GET_TYPE_REF_AS_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  @XmlElement(required=false,name="migration_suspend_before_commit") public boolean isMigrationSuspendBeforeCommit(){  return migrationSuspendBeforeCommit;}  }
class C{  @POST @Path("/{machineId}/{stateId}/status") @Transactional public Response updateStatus(@PathParam("machineId") Long machineId,@PathParam("stateId") Long stateId,ExecutionUpdateData executionUpdateData) throws Exception {  com.flipkart.flux.domain.Status updateStatus=null;switch (executionUpdateData.getStatus()) {case initialized:    updateStatus=com.flipkart.flux.domain.Status.initialized;  break;case running:updateStatus=com.flipkart.flux.domain.Status.running;break;case completed:updateStatus=com.flipkart.flux.domain.Status.completed;break;case cancelled:updateStatus=com.flipkart.flux.domain.Status.cancelled;break;case errored:updateStatus=com.flipkart.flux.domain.Status.errored;break;case sidelined:updateStatus=com.flipkart.flux.domain.Status.sidelined;break;}this.workFlowExecutionController.updateExecutionStatus(machineId,stateId,updateStatus,executionUpdateData.getRetrycount(),executionUpdateData.getCurrentRetryCount(),executionUpdateData.getErrorMessage());return Response.status(Response.Status.ACCEPTED.getStatusCode()).build();}  }
class C{  @Override public boolean isAuthenticated() throws RemoteException {  return true;}  }
class C{  public String toString(){  return getClass().getName() + "[id=\"" + getID()+ "\""+ ",offset="+ getLastRawOffset()+ ",dstSavings="+ dstSavings+ ",useDaylight="+ useDaylightTime()+ ",transitions="+ ((transitions != null) ? transitions.length : 0)+ ",lastRule="+ (lastRule == null ? getLastRuleInstance() : lastRule)+ "]";}  }
class C{  @Override public int length(){  return str.length();}  }
class C{  private void addMenuAction(String id,String label,String menuLabel,int mnemonic,Action action){  action.putValue(Action.NAME,menuLabel);  action.putValue(Action.MNEMONIC_KEY,mnemonic);  menu.setAction(id,action);  hotkeyManager.registerAction(id,label,action);}  }
class C{  public void addColumn(String header){  WBrowseListItemRenderer renderer=(WBrowseListItemRenderer)getItemRenderer();  renderer.addColumn(Util.cleanAmp(header));  getModel().addColumn();  return;}  }
class C{  public BasicWWTexture(Object imageSource,boolean useMipMaps){  initialize(imageSource,useMipMaps);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.257 -0500",hash_original_method="9CB801DBEAF645326E64FD8725588653",hash_generated_method="ADA6219B535C173D2ADD2608EB80D68B") public void drawRect(Rect r,Paint paint){  drawRect(r.left,r.top,r.right,r.bottom,paint);}  }
class C{  public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory){  return new ThreadPoolExecutorWithExceptions(0,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),threadFactory);}  }
class C{  public Boolean isSystemLogging(){  return systemLogging;}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  final String key=preference.getKey();  if (preference instanceof MultiSelectListPreference) {    Set<String> summary=SharedPreferencesCompat.getStringSet(PreferenceManager.getDefaultSharedPreferences(preference.getContext()),key,new HashSet<String>());    sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,summary);  } else   if (preference instanceof ColorPreference) {    sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,((ColorPreference)preference).getColor());  } else   if (preference instanceof SeekBarPreference) {    sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,((SeekBarPreference)preference).getProgress());  } else {    String value=PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(key,"");    sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,value);  }}  }
class C{  public static Cylinder computeBoundingCylinder(Globe globe,double verticalExaggeration,Sector sector,double minElevation,double maxElevation){  if (globe == null) {    String msg=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (sector == null) {    String msg=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  double minHeight=minElevation * verticalExaggeration;  double maxHeight=maxElevation * verticalExaggeration;  if (minHeight == maxHeight)   maxHeight=minHeight + 1;  List<Vec4> points=new ArrayList<Vec4>();  for (  LatLon ll : sector) {    points.add(globe.computePointFromPosition(ll,minHeight));    points.add(globe.computePointFromPosition(ll,maxHeight));  }  points.add(globe.computePointFromPosition(sector.getCentroid(),maxHeight));  if (sector.getDeltaLonDegrees() > 180) {    Angle cLon=sector.getCentroid().getLongitude();    Angle cLat=sector.getCentroid().getLatitude();    Angle lon=Angle.midAngle(sector.getMinLongitude(),cLon);    points.add(globe.computePointFromPosition(cLat,lon,maxHeight));    lon=Angle.midAngle(cLon,sector.getMaxLongitude());    points.add(globe.computePointFromPosition(cLat,lon,maxHeight));    points.add(globe.computePointFromPosition(cLat,sector.getMinLongitude(),maxHeight));    points.add(globe.computePointFromPosition(cLat,sector.getMaxLongitude(),maxHeight));  }  try {    return Cylinder.computeBoundingCylinder(points);  } catch (  Exception e) {    return new Cylinder(points.get(0),points.get(0).add3(Vec4.UNIT_Y),1);  }}  }
class C{  private QueryTask buildImageToImageDatastoreQuery(final State state){  QueryTask.Query.Builder queryBuilder=QueryTask.Query.Builder.create().addKindFieldClause(ImageToImageDatastoreMappingService.State.class);  queryBuilder.addFieldClause(ImageToImageDatastoreMappingService.State.FIELD_NAME_IMAGE_DATASTORE_ID,state.datastoreId);  QueryTask.Query query=queryBuilder.build();  QueryTask.Builder queryTaskBuilder=QueryTask.Builder.createDirectTask().setQuery(query);  QueryTask queryTask=queryTaskBuilder.build();  return queryTask;}  }
class C{  public boolean canGet(String field,Class type){  Column c=getColumn(field);  return (c == null ? false : c.canGet(type));}  }
class C{  public DoubleProperty oscillationsProperty(){  return oscillations;}  }
class C{  public void downloadFromV7WithObb(String url,String url_alt,String md5sum,long fileSize,String name,String packageName,String versionName,String icon,long appId,boolean paid,GetAppMeta.Obb obb,Download downloadOld,List<String> permissions){  UpdatesResponse.UpdateApk apk=createUpdateApkFromV7Params(url,url_alt,md5sum,fileSize,name,packageName,versionName,icon,appId);  Download download=new Download();  download.setId(apk.md5sum.hashCode());  download.setName(apk.name);  download.setPackageName(apk.packageName);  download.setVersion(apk.versionName);  download.setMd5(apk.md5sum);  download.setPaid(paid);  download.setIcon(apk.icon);  download.setSize(fileSize);  download.setCpiUrl(downloadOld.getCpiUrl());  startDownload(download,apk,obb,permissions);}  }
class C{  public static void close() throws SQLException {  if (connection != null) {    connection.close();  }}  }
class C{  public void preVisit(TextEdit edit){}  }
class C{  @Override public boolean ensureProjectSaved(IGanttProject project){  if (project.isModified()) {    UIFacade.Choice saveChoice=myWorkbenchFacade.showConfirmationDialog(i18n.getText("msg1"),i18n.getText("warning"));    if (UIFacade.Choice.CANCEL == saveChoice) {      return false;    }    if (UIFacade.Choice.YES == saveChoice) {      try {        saveProject(project);        return !project.isModified();      } catch (      Exception e) {        myWorkbenchFacade.showErrorDialog(e);        return false;      }    }  }  return true;}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(7);  newVector.addElement(new Option("\tWeight neighbours by the inverse of their distance\n" + "\t(use when k > 1)","I",0,"-I"));  newVector.addElement(new Option("\tWeight neighbours by 1 - their distance\n" + "\t(use when k > 1)","F",0,"-F"));  newVector.addElement(new Option("\tNumber of nearest neighbours (k) used in classification.\n" + "\t(Default = 1)","K",1,"-K <number of neighbors>"));  newVector.addElement(new Option("\tMinimise mean squared error rather than mean absolute\n" + "\terror when using -X option with numeric prediction.","E",0,"-E"));  newVector.addElement(new Option("\tMaximum number of training instances maintained.\n" + "\tTraining instances are dropped FIFO. (Default = no window)","W",1,"-W <window size>"));  newVector.addElement(new Option("\tSelect the number of nearest neighbours between 1\n" + "\tand the k value specified using hold-one-out evaluation\n" + "\ton the training data (use when k > 1)","X",0,"-X"));  newVector.addElement(new Option("\tThe nearest neighbour search algorithm to use " + "(default: weka.core.neighboursearch.LinearNNSearch).\n","A",0,"-A"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public boolean isCascadedIG(StorageSystem storage,CIMObjectPath path) throws WBEMException {  CloseableIterator<CIMObjectPath> pathItr=null;  try {    if (checkExists(storage,path,false,false) != null) {      pathItr=getReference(storage,path,SE_MEMBER_OF_COLLECTION_IMG_IMG,null);      if (!pathItr.hasNext()) {        return false;      }      while (pathItr.hasNext()) {        CIMObjectPath objPath=pathItr.next();        if (objPath != null) {          CIMProperty prop=objPath.getKey(MEMBER);          if (prop != null) {            CIMObjectPath comparePath=(CIMObjectPath)prop.getValue();            if (comparePath != null && comparePath.toString().endsWith(path.toString())) {              return false;            }          }        }      }    } else {      _log.info("Instance not found for path {}. Assuming non-cascaded.",path);      return false;    }  } catch (  Exception e) {    _log.info("Got exception trying to retrieve cascade status of IG.  Assuming cascaded: ",e);  } finally {    closeCIMIterator(pathItr);  }  return true;}  }
class C{  @SuppressWarnings("unchecked") public CompositeTransactionAdaptor(Stack<CompositeTransaction> lineage,String tid,boolean serial,RecoveryCoordinator adaptor){  super(tid,(Stack<CompositeTransaction>)lineage.clone(),serial);  adaptorForReplayRequests_=adaptor;  Stack<CompositeTransaction> tmp=(Stack<CompositeTransaction>)lineage.clone();  CompositeTransaction parent=null;  while (!tmp.empty()) {    parent=tmp.pop();  }  root_=parent.getTid();}  }
class C{  public static Timestamp convertDateValueToTimestamp(long dateValue,long timeNanos){  long millis=timeNanos / 1000000;  timeNanos-=millis * 1000000;  long s=millis / 1000;  millis-=s * 1000;  long m=s / 60;  s-=m * 60;  long h=m / 60;  m-=h * 60;  long ms=getMillis(null,yearFromDateValue(dateValue),monthFromDateValue(dateValue),dayFromDateValue(dateValue),(int)h,(int)m,(int)s,0);  Timestamp ts=new Timestamp(ms);  ts.setNanos((int)(timeNanos + millis * 1000000));  return ts;}  }
class C{  public AppCardBuilder imageUri(Uri imageUri){  this.imageUri=imageUri;  return this;}  }
class C{  private boolean checkTrackedBranchesConfigured(){  LOG.info("checking tracked branch configuration...");  for (  GitRepository repository : myRepositories) {    VirtualFile root=repository.getRoot();    final GitLocalBranch branch=repository.getCurrentBranch();    if (branch == null) {      LOG.info("checkTrackedBranchesConfigured: current branch is null in " + repository);      notifyImportantError(myProject,"Can't update: no current branch","You are in 'detached HEAD' state, which means that you're not on any branch" + rootStringIfNeeded(root) + "Checkout a branch to make update possible.");      return false;    }    GitBranchTrackInfo trackInfo=GitBranchUtil.getTrackInfoForBranch(repository,branch);    if (trackInfo == null) {      final String branchName=branch.getName();      LOG.info(String.format("checkTrackedBranchesConfigured: no track info for current branch %s in %s",branch,repository));      notifyImportantError(myProject,"Can't update: no tracked branch","No tracked branch configured for branch " + code(branchName) + rootStringIfNeeded(root)+ "To make your branch track a remote branch call, for example,<br/>"+ "<code>git branch --set-upstream "+ branchName+ " origin/"+ branchName+ "</code>");      return false;    }    myTrackedBranches.put(root,new GitBranchPair(branch,trackInfo.getRemoteBranch()));  }  return true;}  }
class C{  public static void softmax(Vec x,boolean implicitExtra){  double max=implicitExtra ? 1 : Double.NEGATIVE_INFINITY;  max=max(max,x.max());  double z=implicitExtra ? exp(-max) : 0;  for (int c=0; c < x.length(); c++) {    double newVal=exp(x.get(c) - max);    x.set(c,newVal);    z+=newVal;  }  x.mutableDivide(z);}  }
class C{  public boolean readLineToBuffer(StringBuilder sb) throws IOException {  sb.delete(0,sb.length());  while (true) {    int c=read();    if (c == -1)     return true; else     if (c == '\n')     break;    if (c != '\r')     sb.append((char)c);  }  return false;}  }
class C{  @Override public boolean hasClaw(int location){  return false;}  }
class C{  private boolean isAdministrator(StorageOSUser storageOSUser){  for (  String role : storageOSUser.getRoles()) {    if (role.equalsIgnoreCase(Role.SYSTEM_ADMIN.toString())) {      return true;    }  }  Set<String> tenantRoles=_permissionsHelper.getTenantRolesForUser(storageOSUser,URI.create(storageOSUser.getTenantId()),false);  for (  String role : tenantRoles) {    if (role.equalsIgnoreCase(Role.TENANT_ADMIN.toString())) {      return true;    }  }  return false;}  }
class C{  public JSONObject(){  this.map=new HashMap();}  }
class C{  private void fireBreakpointEvent(final Operator operator,final IOContainer ioContainer,final int location){  for (  BreakpointListener l : breakpointListeners) {    l.breakpointReached(this,operator,ioContainer,location);  }}  }
class C{  public UnchangeableAllowingOnBehalfActingException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  private long next(long qAddr){  return mem.readLong(qAddr + 19);}  }
class C{  public LogStream(OutputStream os){  ps=os instanceof PrintStream ? (PrintStream)os : new PrintStream(os);  lineBuffer=new StringBuilder(100);}  }
class C{  private int calculateNested(@NonNull String text){  if (text.length() < 2) {    return -1;  }  int nested=0;  while (true) {    if ((nested + 1) * KEY_HEADER.length() > text.length()) {      break;    }    String sub=text.substring(nested * KEY_HEADER.length(),(nested + 1) * KEY_HEADER.length());    if (KEY_HEADER.equals(sub)) {      nested++;    } else     if (check(text.substring(nested * KEY_HEADER.length(),text.length()))) {      return nested;    } else {      return -1;    }  }  return nested;}  }
class C{  public boolean reset(){  boolean wasReset=false;  if (super.reset()) {    resetToStream();    wasReset=true;  }  return wasReset;}  }
class C{  public static TestDiscrete[] printAllTestResultsAsOneDataset(Vector<Data> dataCollection,boolean verbose){  TestDiscrete resultsPhraseLevel1=new TestDiscrete();  resultsPhraseLevel1.addNull("O");  TestDiscrete resultsTokenLevel1=new TestDiscrete();  resultsTokenLevel1.addNull("O");  TestDiscrete resultsPhraseLevel2=new TestDiscrete();  resultsPhraseLevel2.addNull("O");  TestDiscrete resultsTokenLevel2=new TestDiscrete();  resultsTokenLevel2.addNull("O");  TestDiscrete resultsByBILOU=new TestDiscrete();  TestDiscrete resultsSegmentation=new TestDiscrete();  resultsByBILOU.addNull("O");  resultsSegmentation.addNull("O");  for (int dataSetId=0; dataSetId < dataCollection.size(); dataSetId++)   reportPredictions(dataCollection.elementAt(dataSetId),resultsTokenLevel1,resultsTokenLevel2,resultsPhraseLevel1,resultsPhraseLevel2,resultsByBILOU,resultsSegmentation);  System.out.println("------------------------------------------------------------");  System.out.println("******	Combined performance on all the datasets :");  for (int i=0; i < dataCollection.size(); i++)   System.out.println("\t>>> Dataset path : \t" + dataCollection.elementAt(i).datasetPath);  System.out.println("------------------------------------------------------------");  if (verbose) {    if (ParametersForLbjCode.currentParameters.featuresToUse.containsKey("PredictionsLevel1")) {      System.out.println("Phrase-level Acc Level2:");      resultsPhraseLevel2.printPerformance(System.out);      System.out.println("Token-level Acc Level2:");      resultsTokenLevel2.printPerformance(System.out);      System.out.println("Level2 BILOU Accuracy, letter-by-letter:");      resultsByBILOU.printPerformance(System.out);      System.out.println("Level2 BILOU PHRASE/BOUNDARY DETECTION Accuracy");      resultsSegmentation.printPerformance(System.out);    }    System.out.println("Phrase-level Acc Level1:");    resultsPhraseLevel1.printPerformance(System.out);    System.out.println("Token-level Acc Level1:");    resultsTokenLevel1.printPerformance(System.out);  } else {    System.out.println("\t Level 1: " + resultsPhraseLevel1.getOverallStats()[2]);    if (ParametersForLbjCode.currentParameters.featuresToUse.containsKey("PredictionsLevel1"))     System.out.println("\t Level 2: " + resultsPhraseLevel2.getOverallStats()[2]);  }  System.out.println("------------------------------------------------------------");  System.out.println("************************************************************");  System.out.println("------------------------------------------------------------");  return new TestDiscrete[]{resultsPhraseLevel1,resultsPhraseLevel2};}  }
class C{  AsyncFuture<Void> doLastFlush(){  return doFlush(null);}  }
class C{  public boolean isValidSimpleAssignmentTarget(){  return false;}  }
class C{  public void init(MCMCOptions options,Likelihood likelihood,OperatorSchedule schedule,Logger[] loggers){  init(options,likelihood,Prior.UNIFORM_PRIOR,schedule,loggers,new MarkovChainDelegate[0]);}  }
class C{  public boolean contains(double x){  return (min <= x) && (x <= max);}  }
class C{  public HexEditor(){  ResourceBundle msg=ResourceBundle.getBundle(MSG);  HexTableModel model=new HexTableModel(this,msg);  table=new HexTable(this,model);  setViewportView(table);  setShowRowHeader(true);  setAlternateRowBG(false);  setAlternateColumnBG(false);  setHighlightSelectionInAsciiDump(true);  setHighlightSelectionInAsciiDumpColor(new Color(255,255,192));  setPadLowBytes(true);  setCellEditable(true);  setTransferHandler(DEFAULT_TRANSFER_HANDLER);}  }
class C{  public void paint(Graphics g,Rectangle bounds){  Color temp=g.getColor();  g.setColor(color);  g.fillRect(bounds.x,bounds.y,bounds.width,bounds.height);  g.setColor(temp);}  }
class C{  Object processENUM(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  AVT avt=null;  if (getSupportsAVT()) {    try {      avt=new AVT(handler,uri,name,rawName,value,owner);      if (!avt.isSimple())       return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  }  int retVal=this.getEnum(value);  if (retVal == StringToIntTable.INVALID_KEY) {    StringBuffer enumNamesList=getListOfEnums();    handleError(handler,XSLTErrorResources.INVALID_ENUM,new Object[]{name,value,enumNamesList.toString()},null);    return null;  }  if (getSupportsAVT())   return avt; else   return new Integer(retVal);}  }
class C{  public static Double[] valuesOf(double[] array){  Double[] dest=new Double[array.length];  for (int i=0; i < array.length; i++) {    dest[i]=Double.valueOf(array[i]);  }  return dest;}  }
class C{  public void beforeCompletion(int txId){  TXSynchronizationOp.execute(pool,0,txId,TXSynchronizationOp.CompletionType.BEFORE_COMPLETION);}  }
class C{  public DocumentListEntry uploadFile(String filepath,String title) throws IOException, ServiceException, DocumentListException {  if (filepath == null || title == null) {    throw new DocumentListException("null passed in for required parameters");  }  File file=new File(filepath);  String mimeType=DocumentListEntry.MediaType.fromFileName(file.getName()).getMimeType();  DocumentEntry newDocument=new DocumentEntry();  newDocument.setFile(file,mimeType);  newDocument.setTitle(new PlainTextConstruct(title));  return service.insert(buildUrl(URL_DEFAULT + URL_DOCLIST_FEED),newDocument);}  }
class C{  public E backward(){  E prevItem=peekBackwards();  if (prevItem == null) {    return null;  }  pos=(pos + size - 1) % size;  return prevItem;}  }
class C{  public void toggle(){  mSlidingMenu.toggle();}  }
class C{  public static SipRequest createUpdate(SipDialogPath dialog) throws PayloadException {  try {    Request update=dialog.getStackDialog().createRequest(Request.UPDATE);    Header supportedHeader=SipUtils.HEADER_FACTORY.createHeader(SupportedHeader.NAME,"timer");    update.addHeader(supportedHeader);    Header sessionExpiresHeader=SipUtils.HEADER_FACTORY.createHeader(SipUtils.HEADER_SESSION_EXPIRES,"" + dialog.getSessionExpireTime());    update.addHeader(sessionExpiresHeader);    ViaHeader viaHeader=(ViaHeader)update.getHeader(ViaHeader.NAME);    viaHeader.setRPort();    return new SipRequest(update);  } catch (  ParseException|SipException e) {    throw new PayloadException("Can't create SIP message!",e);  }}  }
class C{  @Override public boolean hasOverlappingRendering(){  return false;}  }
class C{  private boolean updateOutlierList(OutlierList list,Outlier outlier){  boolean result=false;  result=list.add(outlier);  list.updateAveragedOutlier();  list.setMultiple(true);  return result;}  }
class C{  public void testColdDeployEJBJar(){  this.fileHandler.createFile("ram:///test.jar");  EJB ejb=(EJB)factory.createDeployable("jonas4x","ram:///test.jar",DeployableType.EJB);  setupAdminColdDeployment();  deployer.deploy(ejb);  assertTrue(fileHandler.exists(deployer.getDeployableDir(ejb) + "/autoload/test.jar"));}  }
class C{  @Override public boolean isObstacle(final Entity entity){  if (entity instanceof RPEntity) {    return true;  }  return super.isObstacle(entity);}  }
class C{  public void testCreateConfigurationWithAPropertyWithNullValue() throws Exception {  Configuration configurationElement=new Configuration();  configurationElement.setImplementation(StandaloneLocalConfigurationStub.class.getName());  Map<String,String> properties=new HashMap<String,String>();  properties.put("someName",null);  configurationElement.setProperties(properties);  org.codehaus.cargo.container.configuration.Configuration configuration=configurationElement.createConfiguration("testcontainer",ContainerType.INSTALLED,null,new CargoProject(null,null,null,null,null,Collections.<Artifact>emptySet(),null));  assertEquals("",configuration.getPropertyValue("someName"));}  }
class C{  protected AbstractMatrix3D vDice(int axis0,int axis1,int axis2){  super.vDice(axis0,axis1,axis2);  int[][] offsets=new int[3][];  offsets[0]=this.sliceOffsets;  offsets[1]=this.rowOffsets;  offsets[2]=this.columnOffsets;  this.sliceOffsets=offsets[axis0];  this.rowOffsets=offsets[axis1];  this.columnOffsets=offsets[axis2];  return this;}  }
class C{  protected boolean isFullDetail(Boolean fullDetailRequest){  if (fullDetailRequest == null) {    return defaultFullDetail;  }  return fullDetailRequest.booleanValue();}  }
class C{  public void union(Node a,Node b){  union(getNodeId(a),getNodeId(b));}  }
class C{  static void accumSingle(int counts[],int startTermIndex,SortedDocValues si,DocIdSetIterator disi,int subIndex,OrdinalMap map) throws IOException {  if (startTermIndex == -1 && (map == null || si.getValueCount() < disi.cost() * 10)) {    accumSingleSeg(counts,si,disi,subIndex,map);  } else {    accumSingleGeneric(counts,startTermIndex,si,disi,subIndex,map);  }}  }
class C{  public static S2Cap full(){  return new S2Cap(new S2Point(1,0,0),2);}  }
class C{  @Override protected void initialize(){  super.initialize();  m_FileChooserDatasets=GUIHelper.newConverterFileChooser();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.058 -0500",hash_original_method="7E0E89252855B3CDBF126F525B8DFC31",hash_generated_method="B543AE4E1838FF864DE64776FEE21A06") public void onDestroy(){}  }
class C{  public void forceStop(){  if (this.serverProcess != null) {    this.serverProcess.destroy();    this.serverProcess=null;  }}  }
class C{  protected void saveDialogBounds(Shell shell){  IDialogSettings settings=getDialogSettings();  if (settings != null) {    Point shellLocation=shell.getLocation();    Point shellSize=shell.getSize();    Shell parent=getParentShell();    if (parent != null) {      Point parentLocation=parent.getLocation();      shellLocation.x-=parentLocation.x;      shellLocation.y-=parentLocation.y;    }    String prefix=getClass().getName();    if (persistSize) {      settings.put(prefix + DIALOG_WIDTH,shellSize.x);      settings.put(prefix + DIALOG_HEIGHT,shellSize.y);    }    if (persistLocation) {      settings.put(prefix + DIALOG_ORIGIN_X,shellLocation.x);      settings.put(prefix + DIALOG_ORIGIN_Y,shellLocation.y);    }    if (showPersistActions && showDialogMenu) {      settings.put(getClass().getName() + DIALOG_USE_PERSISTED_SIZE,persistSize);      settings.put(getClass().getName() + DIALOG_USE_PERSISTED_LOCATION,persistLocation);    }  }}  }
class C{  public Debug(String clientID,ClientComms comms){  this.clientID=clientID;  this.comms=comms;  log.setResourceName(clientID);}  }
class C{  public static String flatten(Object[] lines,String sep){  StringBuilder result;  int i;  result=new StringBuilder();  for (i=0; i < lines.length; i++) {    if (i > 0)     result.append(sep);    result.append(lines[i].toString());  }  return result.toString();}  }
class C{  private boolean isLetter(char value){  return Character.isLetterOrDigit(value);}  }
class C{  public Long updateUserSelfSmall(String SID,@SuppressWarnings("rawtypes") ObjectMap values){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (user_level != null && user_level >= 1) {      return userManagement.saveOrUpdateUser(new Long(3),values,users_id);    } else {      return new Long(-2);    }  } catch (  Exception err) {    log.error("[updateUserSelfSmall] " + err);    return new Long(-1);  }}  }
class C{  public TextSliceExtractor(int start,int stop){  this.start=start;  this.stop=stop;  this.featureName="Suffix";}  }
class C{  @Override public void qtest(Query q,int[] expDocNrs) throws Exception {  CheckHits.checkNoMatchExplanations(q,FIELD,searcher,expDocNrs);}  }
class C{  public String toString(){  return m_Formatter.format(getStamp());}  }
class C{  static String toString(CharSequence charSequence){  return new StringBuilder().append(charSequence).toString();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static float fArrayGet(float[] a,int i){  try {    return a[i];  } catch (  Throwable t) {    return a[DefaultGroovyMethodsSupport.normaliseIndex(i,a.length)];  }}  }
class C{  public ColladaRoot parse(Object... args) throws XMLStreamException {  ColladaParserContext ctx=this.parserContext;  try {    for (XMLEvent event=ctx.nextEvent(); ctx.hasNext(); event=ctx.nextEvent()) {      if (event == null)       continue;      if (event.isStartElement() && event.asStartElement().getName().getLocalPart().equals("COLLADA")) {        super.parse(ctx,event,args);        return this;      }    }  }  finally {    ctx.getEventReader().close();    this.closeEventStream();  }  return null;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private CIMObjectPath createCIMPath(String nativeGUID,String volume,String system,Map<String,Object> keyMap){  String[] tokens=nativeGUID.split(Constants.PATH_DELIMITER_REGEX);  String SystemName=tokens[0] + Constants._plusDelimiter + tokens[1];  String deviceID=tokens[3];  if (tokens.length > 4) {    for (int i=4; i < tokens.length; i++) {      deviceID=deviceID + "+" + tokens[i];    }  }  CIMProperty<?> CreationClassName=new CIMProperty(CreationClassNamestr,CIMDataType.STRING_T,volume,true,false,null);  CIMProperty<?> SystemCreationClassName=new CIMProperty(SystemCreationClassNamestr,CIMDataType.STRING_T,system,true,false,null);  CIMProperty<?> systemName=new CIMProperty(SystemNamestr,CIMDataType.STRING_T,SystemName,true,false,null);  CIMProperty<?> Id=new CIMProperty(DeviceIDstr,CIMDataType.STRING_T,deviceID,true,false,null);  CIMProperty<?>[] keys=new CIMProperty<?>[4];  keys[0]=CreationClassName;  keys[1]=SystemCreationClassName;  keys[2]=systemName;  keys[3]=Id;  return CimObjectPathCreator.createInstance(volume,keyMap.get(Constants._InteropNamespace).toString(),keys);}  }
class C{  public boolean remove(int val){  Integer v=val;  boolean flag=list.contains(v);  list.remove(v);  return flag;}  }
class C{  public static double latJLT90(double val){  return justLessThan(val,90,.00001);}  }
class C{  public void updateUi(){  BusProvider.getInstance().post(new Event.OnUpdateUi());}  }
class C{  private double dmsToDeg(Integer d,Integer m,Double s){  double seconds=m * 60.0;  if (s != null) {    seconds+=s;  }  return d + (seconds / 3600);}  }
class C{  public Class<K> keyType(){  return keyType;}  }
class C{  public RequestInputDataSimple(String clientUrl,TestRequest testRequest,String contentType){  super(clientUrl,testRequest);  this.contentType=contentType;}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,final long inputOffset,final long length,byte[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  final int bufferLength=buffer.length;  int bytesToRead=bufferLength;  if (length > 0 && length < bufferLength) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,bufferLength);    }  }  return totalRead;}  }
class C{  protected static MethodHandle makeFallBack(MutableCallSite mc,Class<?> sender,String name,int callID,MethodType type,boolean safeNavigation,boolean thisCall,boolean spreadCall){  MethodHandle mh=MethodHandles.insertArguments(SELECT_METHOD,0,mc,sender,name,callID,safeNavigation,thisCall,spreadCall,1);  mh=mh.asCollector(Object[].class,type.parameterCount()).asType(type);  return mh;}  }
class C{  public static final Parameter base(){  return GPDefaults.base().push(P_BUILD);}  }
class C{  public void writeToCheckpoint(OutputStream stream) throws IOException {  preCheckpoint();  GZIPOutputStream g=new GZIPOutputStream(new BufferedOutputStream(stream));  ObjectOutputStream s=new ObjectOutputStream(g);  s.writeObject(this);  s.flush();  g.finish();  g.flush();  postCheckpoint();}  }
class C{  public Texture(int width,int height,int pixelFormat) throws Exception {  this.id=glGenTextures();  this.width=width;  this.height=height;  glBindTexture(GL_TEXTURE_2D,this.id);  glTexImage2D(GL_TEXTURE_2D,0,GL_DEPTH_COMPONENT,this.width,this.height,0,pixelFormat,GL_FLOAT,(ByteBuffer)null);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);}  }
class C{  private MLTResult buildQueryForField(String fieldName,PriorityQueue<MLTTerm> q,BooleanQuery query,boolean contentStreamQuery){  List<MLTTerm> interestingTerms=new ArrayList<MLTTerm>();  int qterms=0;  int maxTerms=maxQueryTermsPerField;  if (maxTerms <= 0) {    maxTerms=Integer.MAX_VALUE;  }  BooleanQuery tmpQuery=new BooleanQuery();  double sumQuaredBoost=0.0f;  MLTTerm cur;  while ((cur=q.pop()) != null) {    Query tq=null;    final Term term=new Term(cur.getFieldName(),cur.getWord());    if (isPayloadField(cur.getFieldName())) {      tq=new PayloadTermQuery(term,new AveragePayloadFunction(),true);    } else {      tq=new TermQuery(term);    }    if (boost) {      float boost=cur.getScore();      tq.setBoost(boost);      sumQuaredBoost+=boost * boost;    } else {      sumQuaredBoost+=1.0;    }    try {      tmpQuery.add(tq,BooleanClause.Occur.SHOULD);      interestingTerms.add(cur);      qterms++;    } catch (    BooleanQuery.TooManyClauses ignore) {      break;    }    if (qterms >= maxTerms) {      break;    }  }  double vectorLength=Math.sqrt(sumQuaredBoost);  if (vectorLength <= 0.0) {    return new MLTResult(interestingTerms,query);  }  buildBoostedNormalizedQuery(fieldName,tmpQuery,query,vectorLength,contentStreamQuery);  return new MLTResult(interestingTerms,query);}  }
class C{  private int shouldKillIndex(int x,int y){  int idx=getIndexForPoint(x,y);  if (idx != -1) {    Icon icon=tabbedPane.getIconAt(idx);    if (icon != null && icon instanceof CancelSearchIconProxy)     if (((CancelSearchIconProxy)icon).shouldKill(x,y))     return idx;  }  return -1;}  }
class C{  public void writeKtab(String tab) throws IOException, KrbException {  writeKtab(tab,false);}  }
class C{  public void createEmptyDB(SQLiteDatabase db){  db.execSQL("DROP TABLE IF EXISTS " + TABLE_FAVORITES);  db.execSQL("DROP TABLE IF EXISTS " + TABLE_WORKSPACE_SCREENS);  onCreate(db);}  }
class C{  public static boolean isFileExist(String filePath){  File f=new File(filePath);  return f.exists() && !f.isDirectory();}  }
class C{  public static Typeface droidSerifRegular(Context context){  sDroidSerifRegular=getFontFromRes(R.raw.droidserif_regular,context);  return sDroidSerifRegular;}  }
class C{  public Builder bufferSize(int bufferSize){  this._bufferSize=bufferSize;  return this;}  }
class C{  public static void silentCloseInputStream(InputStream is){  try {    if (is != null) {      is.close();    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void turnRight(double amount){  if (amount == 0) {    return;  }  if (!isBlocked()) {    heading-=amount;  }}  }
class C{  public static IProposalComputer newUrnImportProposalComputer(ContentAssistRequest contentAssistRequest,IJavaProject javaProject){  IDOMAttr attribute=XmlContentAssistUtilities.getAttribute(contentAssistRequest);  if (attribute == null) {    return null;  }  String attrValue=XmlContentAssistUtilities.getAttributeValueUsingMatchString(contentAssistRequest);  if (!UiBinderXmlModelUtilities.isUrnImportAttribute(attribute)) {    return null;  }  int urnImportLength=UiBinderConstants.URN_IMPORT_NAMESPACE_BEGINNING.length();  if (attrValue.length() < urnImportLength) {    return null;  }  String replaceText=attrValue.substring(urnImportLength);  int replaceOffset=XmlContentAssistUtilities.getAttributeValueOffset(contentAssistRequest) + urnImportLength;  return new CodeCompleteProposalComputer(new int[]{CompletionProposal.PACKAGE_REF},javaProject,replaceText,replaceOffset,replaceText.length(),null,false);}  }
class C{  private void printGroupInformation(String output,String[][] array){  if (array.length > 0) {    for (int i=0; i < array.length; i++) {      output+="\n  Group: " + array[i][0] + " Nested Groups: "+ array[i][1]+ " Criteria Count: "+ array[i][2];    }  }}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public boolean isEmployee(){  Object oo=get_Value(COLUMNNAME_IsEmployee);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public boolean handles(ResultHistoryList history,int index){  return (getClassifier(history,index) instanceof IncrementalMultiLabelClassifier);}  }
class C{  public RegistrationResponse build(){  return new RegistrationResponse(mRequest,mClientId,mClientIdIssuedAt,mClientSecret,mClientSecretExpiresAt,mRegistrationAccessToken,mRegistrationClientUri,mTokenEndpointAuthMethod,mAdditionalParameters);}  }
class C{  public boolean isStatic(){  return ref == null;}  }
class C{  public static <NodeType extends IGraphNode<NodeType> & ISelectableNode>void selectPredecessorsOfSelection(final ISelectableGraph<NodeType> graph){  graph.selectNodes(getPredecessorsOfSelection(graph),true);}  }
class C{  public ClampMountTank(){  super();}  }
class C{  protected void sequence_TStructField(ISerializationContext context,TStructField semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void dump(Printer pw,String prefix){  pw.println(prefix + "durationMillis: " + durationMillis);  pw.println(prefix + "serviceDetails: " + serviceDetails);}  }
class C{  public static void main(String[] args){  GenericStack<String> stack1=new GenericStack<>();  stack1.push("London");  stack1.push("Paris");  stack1.push("Berlin");  GenericStack<Integer> stack2=new GenericStack<>();  for (int i=0; i < 100; i++) {    stack2.push(i + 1);  }  System.out.print("Stack 1: ");  while (!stack1.isEmpty()) {    System.out.print(stack1.pop() + " ");  }  System.out.println("\n");  System.out.println("Stack 2: ");  for (int i=1; !stack2.isEmpty(); i++) {    if (i % 10 == 0)     System.out.println(stack2.pop()); else     System.out.print(stack2.pop() + " ");  }  System.out.println();}  }
class C{  public Quaternionf fromAxisAngleDeg(float axisX,float axisY,float axisZ,float angle){  return fromAxisAngleRad(axisX,axisY,axisZ,(float)Math.toRadians(angle));}  }
class C{  public static String stringFor(int m){switch (m) {case cudaReadModeElementType:    return "cudaReadModeElementType";case cudaReadModeNormalizedFloat:  return "cudaReadModeNormalizedFloat";}return "INVALID cudaTextureReadMode: " + m;}  }
class C{  protected PLPosition convertPitchAndYawToPosition(float pitch,float yaw){  float r=this.getZ(), pr=(90.0f - pitch) * PLConstants.kToRadians, yr=-yaw * PLConstants.kToRadians;  float x=r * (float)Math.sin(pr) * (float)Math.cos(yr);  float y=r * (float)Math.sin(pr) * (float)Math.sin(yr);  float z=r * (float)Math.cos(pr);  return PLPosition.PLPositionMake(y,z,x);}  }
class C{  public static void copyResourceFromClass(Class clazz,String file,File toFile) throws IOException {  try (InputStream ins=clazz.getResourceAsStream(clazz.getSimpleName() + "/" + file)){    if (ins == null) {      throw new IllegalStateException("Resource file " + file + " not found");    }    FileUtils.copyInputStreamToFile(ins,toFile);  } }  }
class C{  private void registerReflectiveClass(CtClass clazz){  CtField[] fs=clazz.getDeclaredFields();  for (int i=0; i < fs.length; ++i) {    CtField f=fs[i];    int mod=f.getModifiers();    if ((mod & Modifier.PUBLIC) != 0 && (mod & Modifier.FINAL) == 0) {      String name=f.getName();      converter.replaceFieldRead(f,clazz,readPrefix + name);      converter.replaceFieldWrite(f,clazz,writePrefix + name);    }  }}  }
class C{  @Override public boolean hasNext(){  if (null != this.buffer) {    return true;  } else   if (null != this.error) {    return false;  } else {    try {      this.buffer=this.reader.readLine();    } catch (    IOException e) {      this.buffer=null;      this.error=e;      return false;    }    return (null != this.buffer);  }}  }
class C{  protected SVGOMFontFaceUriElement(){}  }
class C{  public void invalidate(){}  }
class C{  public static String unescapeChar(String parseStr){switch (parseStr) {case "\\001":    return "\001";case "\\t":  return "\t";case "\\r":return "\r";case "\\b":return "\b";case "\\f":return "\f";case "\\n":return "\n";default :return parseStr;}}  }
class C{  @Override synchronized public void invalidate(){  if (this == nullSession) {    return;  }  invalidated=true;  if (debug != null && Debug.isOn("session")) {    System.out.println("%% Invalidated:  " + this);  }  if (context != null) {    context.remove(sessionId);    context=null;  }}  }
class C{  private void publishRemoteDownloadLeader(String leader){  if (leader != null) {    _svc.setAttribute(REMOTE_DOWNLOAD_LEADER,leader);  } else {    _svc.setAttribute(REMOTE_DOWNLOAD_LEADER,"");  }  try {    _log.info("Publishing leader: {}",leader);    _beacon.publish();  } catch (  Exception ex) {    _log.error("Failed to publish the leader",ex);  }}  }
class C{  public Frame<V> init(final Frame<? extends V> src){  returnValue=src.returnValue;  System.arraycopy(src.values,0,values,0,values.length);  top=src.top;  return this;}  }
class C{  public LineNumberList(RTextArea textArea){  this(textArea,Color.GRAY);}  }
class C{  public void initAllDayHeights(){  if (mMaxAlldayEvents <= mMaxUnexpandedAlldayEventCount) {    return;  }  if (mShowAllAllDayEvents) {    int maxADHeight=mViewHeight - DAY_HEADER_HEIGHT - MIN_HOURS_HEIGHT;    maxADHeight=Math.min(maxADHeight,(int)(mMaxAlldayEvents * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT));    mAnimateDayEventHeight=maxADHeight / mMaxAlldayEvents;  } else {    mAnimateDayEventHeight=(int)MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT;  }}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null)   return null;  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  if (fDebug) {    System.out.println("number of triplets = " + numberTriplets);  }  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    if (fDebug) {      System.out.println("b1= " + b1 + ", b2= "+ b2+ ", b3= "+ b3);    }    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    if (fDebug) {      System.out.println("val2 = " + val2);      System.out.println("k4   = " + (k << 4));      System.out.println("vak  = " + (val2 | (k << 4)));    }    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    if (fDebug) {      System.out.println("b1=" + b1);      System.out.println("b1<<2 = " + (b1 >> 2));    }    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  public final View startVideoConsumerPreview(){  if (mVideoConsumer != null) {    return mVideoConsumer.startPreview(mContext);  }  return null;}  }
class C{  public void readFromNBT(NBTTagCompound compound){  if (compound != null) {    this.state=MatterNetworkTaskState.get(compound.getInteger("State"));    this.id=compound.getLong("id");  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void loadDataObjectConfiguration(List<DataObjectFieldConfiguration> configuration){  for (  DataObjectFieldConfiguration fieldConfig : configuration) {    DataObjectType doType=getDoType(fieldConfig.getDoClass());    ColumnField field=doType.getColumnField(fieldConfig.getFieldName());    if (field == null) {      throw new IllegalArgumentException(String.format("Unknown field: %1$s",fieldConfig.getFieldName()));    }    field.setTtl(fieldConfig.getTtl());  }}  }
class C{  @Override public void validateVarrayStoragePorts(Set<URI> storageSystemURIs,VirtualArray varray,List<URI> allHosts) throws InternalException {  try {    Map<Network,Set<StoragePort>> networkToPortsMap=getVirtualArrayTaggedPortsByNework(varray.getId());    Map<URI,Set<URI>> vplexCluster1ports=new HashMap<URI,Set<URI>>();    Map<URI,Set<URI>> vplexCluster2ports=new HashMap<URI,Set<URI>>();    Map<URI,StorageSystem> storageSystems=new HashMap<URI,StorageSystem>();    for (    URI uri : storageSystemURIs) {      StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,uri);      URIQueryResultList storagePortURIs=new URIQueryResultList();      _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStoragePortConstraint(storageSystem.getId()),storagePortURIs);      final String cluster1="1";      final String cluster2="2";      Set<URI> cluster1StoragePorts=new HashSet<URI>();      Set<URI> cluster2StoragePorts=new HashSet<URI>();      Iterator<URI> storagePortsIter=storagePortURIs.iterator();      while (storagePortsIter.hasNext()) {        URI storagePortURI=storagePortsIter.next();        StoragePort storagePort=_dbClient.queryObject(StoragePort.class,storagePortURI);        if (storagePort != null && !storagePort.getInactive() && storagePort.getRegistrationStatus().equals(DiscoveredDataObject.RegistrationStatus.REGISTERED.name()) && !storagePort.getDiscoveryStatus().equalsIgnoreCase(DiscoveryStatus.NOTVISIBLE.name())) {          if (storagePort.getPortGroup() != null) {            String[] tokens=storagePort.getPortGroup().split("-");            if (cluster1.equals(tokens[1])) {              cluster1StoragePorts.add(storagePort.getId());            } else             if (cluster2.equals(tokens[1])) {              cluster2StoragePorts.add(storagePort.getId());            } else {              _log.warn("Could not determine cluster for storageport:" + storagePort.getPortNetworkId() + " "+ storagePort.getId()+ " Port group is:"+ storagePort.getPortGroup());            }          } else {            _log.warn("Could not determine cluster for storageport:" + storagePort.getPortNetworkId() + " "+ storagePort.getId());          }        }      }      vplexCluster1ports.put(uri,cluster1StoragePorts);      vplexCluster2ports.put(uri,cluster2StoragePorts);      storageSystems.put(uri,storageSystem);    }    for (    URI hostUri : allHosts) {      Map<URI,StoragePort> networkStoragePortsForHost=getNetworkTaggedPortsForHost(hostUri,networkToPortsMap);      for (      URI uri : storageSystemURIs) {        Set<URI> intersection1=new HashSet<URI>(networkStoragePortsForHost.keySet());        Set<URI> intersection2=new HashSet<URI>(networkStoragePortsForHost.keySet());        intersection1.retainAll(vplexCluster1ports.get(uri));        intersection2.retainAll(vplexCluster2ports.get(uri));        if (!intersection1.isEmpty() && !intersection2.isEmpty()) {          Map<URI,String> cluster1Ports=new HashMap<URI,String>();          Map<URI,String> cluster2Ports=new HashMap<URI,String>();          for (          URI uriIntersection1 : intersection1) {            if (networkStoragePortsForHost.get(uriIntersection1) != null) {              cluster1Ports.put(uriIntersection1,networkStoragePortsForHost.get(uriIntersection1).getPortNetworkId());            }          }          for (          URI uriIntersection2 : intersection2) {            if (networkStoragePortsForHost.get(uriIntersection2) != null) {              cluster2Ports.put(uriIntersection2,networkStoragePortsForHost.get(uriIntersection2).getPortNetworkId());            }          }          Host host=_dbClient.queryObject(Host.class,hostUri);          _log.error("Varray " + varray.getLabel() + " has storageports from Cluster 1 and Cluster 2 of the Vplex "+ storageSystems.get(uri).getLabel()+ " "+ storageSystems.get(uri).getId().toString()+ ". This is detected for the host "+ host.getHostName()+ "\n Cluster 1 storageports in varray are"+ cluster1Ports+ "\n Cluster 2 storageports in varray are"+ cluster2Ports);          throw APIException.badRequests.invalidVarrayNetworkConfiguration(varray.getLabel(),storageSystems.get(uri).getLabel());        }      }    }    _log.info("Done validating vplex cluster 1 and 2 ports for the Varray:" + varray.getLabel());  } catch (  InternalException ex) {    _log.error(ex.getLocalizedMessage());    throw (ex);  }}  }
class C{  private void putObject(String bucketName,String objectName,String contentType,long size,Object data) throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException, InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException, InternalException, InvalidArgumentException, InsufficientDataException {  if (size <= MIN_MULTIPART_SIZE) {    putObject(bucketName,objectName,(int)size,data,null,contentType,0);    return;  }  int[] rv=calculateMultipartSize(size);  int partSize=rv[0];  int partCount=rv[1];  int lastPartSize=rv[2];  Part[] totalParts=new Part[partCount];  String uploadId=getLatestIncompleteUploadId(bucketName,objectName);  Iterator<Result<Part>> existingParts=null;  Part part=null;  if (uploadId != null) {    existingParts=listObjectParts(bucketName,objectName,uploadId).iterator();    if (existingParts.hasNext()) {      part=existingParts.next().get();    }  } else {    uploadId=initMultipartUpload(bucketName,objectName,contentType);  }  int expectedReadSize=partSize;  for (int partNumber=1; partNumber <= partCount; partNumber++) {    if (partNumber == partCount) {      expectedReadSize=lastPartSize;    }    if (part != null && partNumber == part.partNumber() && expectedReadSize == part.partSize()) {      String md5Hash=Digest.md5Hash(data,expectedReadSize);      if (md5Hash.equals(part.etag())) {        totalParts[partNumber - 1]=new Part(part.partNumber(),part.etag());        skipStream(data,expectedReadSize);        part=getPart(existingParts);        continue;      }    }    String etag=putObject(bucketName,objectName,expectedReadSize,data,uploadId,null,partNumber);    totalParts[partNumber - 1]=new Part(partNumber,etag);  }  completeMultipart(bucketName,objectName,uploadId,totalParts);}  }
class C{  private static boolean dataSetsAreOk(){  if (fileList1 != null && fileList2 != null && (fileList1.length == fileList2.length)) {    for (    File file1 : fileList1) {      String fileName1=file1.getName();      boolean foundRelatedFile=false;      for (      File file2 : fileList2) {        String fileName2=file2.getName();        if (fileName1.equalsIgnoreCase(fileName2)) {          foundRelatedFile=true;          break;        }      }      if (!foundRelatedFile) {        System.err.println("Didn't found related file for : " + fileName1);        return false;      }    }    return true;  }  System.err.println("Number of datasets not equal or fileList variables is null.");  return false;}  }
class C{  public static boolean isFullCopyInactive(Volume volume,DbClient dbClient){  boolean result=true;  String replicaState=volume.getReplicaState();  if (isVolumeFullCopy(volume,dbClient) && replicaState != null && !replicaState.isEmpty()) {    ReplicationState state=ReplicationState.getEnumValue(replicaState);    if (state != null && state != ReplicationState.INACTIVE) {      result=false;    }  }  return result;}  }
class C{  public boolean doAccessibleAction(int i){  if (i == 0) {    doClick();    return true;  } else {    return false;  }}  }
class C{  static Object[] packageParameterFromVarArg(MethodReference targetMethod,Address argAddress){  TypeReference[] argTypes=targetMethod.getParameterTypes();  int argCount=argTypes.length;  Object[] argObjectArray=new Object[argCount];  JNIEnvironment env=RVMThread.getCurrentThread().getJNIEnv();  Address addr=argAddress;  for (int i=0; i < argCount; i++) {    long hiword=VM.BuildFor64Addr ? addr.loadLong() : (long)addr.loadInt();    addr=addr.plus(BYTES_IN_ADDRESS);    if (argTypes[i].isFloatType()) {      if (VM.BuildFor32Addr) {        int loword=addr.loadInt();        addr=addr.plus(BYTES_IN_ADDRESS);        long doubleBits=(hiword << BITS_IN_INT) | (loword & 0xFFFFFFFFL);        argObjectArray[i]=Reflection.wrapFloat((float)(Double.longBitsToDouble(doubleBits)));      } else {        argObjectArray[i]=Reflection.wrapFloat((float)(Double.longBitsToDouble(hiword)));      }    } else     if (argTypes[i].isDoubleType()) {      if (VM.BuildFor32Addr) {        int loword=addr.loadInt();        addr=addr.plus(BYTES_IN_ADDRESS);        long doubleBits=(hiword << BITS_IN_INT) | (loword & 0xFFFFFFFFL);        argObjectArray[i]=Reflection.wrapDouble(Double.longBitsToDouble(doubleBits));      } else {        argObjectArray[i]=Reflection.wrapDouble(Double.longBitsToDouble(hiword));      }    } else     if (argTypes[i].isLongType()) {      if (VM.BuildFor32Addr) {        int loword=addr.loadInt();        addr=addr.plus(BYTES_IN_ADDRESS);        long longValue=(hiword << BITS_IN_INT) | (loword & 0xFFFFFFFFL);        argObjectArray[i]=Reflection.wrapLong(longValue);      } else {        argObjectArray[i]=Reflection.wrapLong(hiword);      }    } else     if (argTypes[i].isBooleanType()) {      argObjectArray[i]=Reflection.wrapBoolean((int)hiword);    } else     if (argTypes[i].isByteType()) {      argObjectArray[i]=Reflection.wrapByte((byte)hiword);    } else     if (argTypes[i].isCharType()) {      argObjectArray[i]=Reflection.wrapChar((char)hiword);    } else     if (argTypes[i].isShortType()) {      argObjectArray[i]=Reflection.wrapShort((short)hiword);    } else     if (argTypes[i].isReferenceType()) {      argObjectArray[i]=env.getJNIRef((int)hiword);    } else     if (argTypes[i].isIntType()) {      argObjectArray[i]=Reflection.wrapInt((int)hiword);    } else {      return null;    }  }  return argObjectArray;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.messenger_service_binding);  Button button=(Button)findViewById(R.id.bind);  button.setOnClickListener(mBindListener);  button=(Button)findViewById(R.id.unbind);  button.setOnClickListener(mUnbindListener);  mCallbackText=(TextView)findViewById(R.id.callback);  mCallbackText.setText("Not attached.");}  }
class C{  public static int calcRLen(int diff){  return (int)Math.round(1.5 * Math.log(rand.nextInt(diff + 1) + 1) + rand.nextInt(1));}  }
class C{  public DataSourceCreateException(){  super();}  }
class C{  public void enableLight(boolean enabled){  light.setEnabled(enabled);  lightEnabled=enabled;  headlight.setEnabled(headlightEnabled && enabled);}  }
class C{  public static TimePeriodExpression timePeriod(Object days,Object hours,Object minutes,Object seconds,Object milliseconds){  Expression daysExpr=convertVariableNumeric(days);  Expression hoursExpr=convertVariableNumeric(hours);  Expression minutesExpr=convertVariableNumeric(minutes);  Expression secondsExpr=convertVariableNumeric(seconds);  Expression millisecondsExpr=convertVariableNumeric(milliseconds);  return new TimePeriodExpression(daysExpr,hoursExpr,minutesExpr,secondsExpr,millisecondsExpr);}  }
class C{  private void crossover(int[] individual1,int[] individual2){switch (crossoverType) {case CROSSOVER_ONE_POINT:    int n=1 + random.nextInt(individual1.length - 1);  for (int i=n; i < individual1.length; i++) {    int dummy=individual1[i];    individual1[i]=individual2[i];    individual2[i]=dummy;  }break;case CROSSOVER_UNIFORM:for (int i=0; i < individual1.length; i++) {if (random.nextBoolean()) {  int dummy=individual1[i];  individual1[i]=individual2[i];  individual2[i]=dummy;}}break;default :break;}}  }
class C{  public static String[] toStringArray(int[] array){  if (array == null) {    return null;  }  String[] result=new String[array.length];  for (int i=0; i < array.length; i++) {    result[i]=String.valueOf(array[i]);  }  return result;}  }
class C{  public void incrementAccessCount(){  if (isPrimitive()) {    return;  }  if ((this.accessDate != null) && ((System.currentTimeMillis() - this.accessDate.getTime()) < (24 * Utils.HOUR))) {    return;  }  setAccessDate(new Date());  setAccessCount(this.accessCount + 1);}  }
class C{  public static void processSource(Context cx,String filename){  if (filename == null || filename.equals("-")) {    PrintStream ps=global.getErr();    if (filename == null) {      ps.println(cx.getImplementationVersion());    }    String charEnc=shellContextFactory.getCharacterEncoding();    if (charEnc == null) {      charEnc=System.getProperty("file.encoding");    }    BufferedReader in;    try {      in=new BufferedReader(new InputStreamReader(global.getIn(),charEnc));    } catch (    UnsupportedEncodingException e) {      throw new UndeclaredThrowableException(e);    }    int lineno=1;    boolean hitEOF=false;    while (!hitEOF) {      String[] prompts=global.getPrompts(cx);      if (filename == null)       ps.print(prompts[0]);      ps.flush();      String source="";      while (true) {        String newline;        try {          newline=in.readLine();        } catch (        IOException ioe) {          ps.println(ioe.toString());          break;        }        if (newline == null) {          hitEOF=true;          break;        }        source=source + newline + "\n";        lineno++;        if (cx.stringIsCompilableUnit(source))         break;        ps.print(prompts[1]);      }      Script script=loadScriptFromSource(cx,source,"<stdin>",lineno,null);      if (script != null) {        Object result=evaluateScript(script,cx,global);        if (result != Context.getUndefinedValue() && !(result instanceof Function && source.trim().startsWith("function"))) {          try {            ps.println(Context.toString(result));          } catch (          RhinoException rex) {            ToolErrorReporter.reportException(cx.getErrorReporter(),rex);          }        }        NativeArray h=global.history;        h.put((int)h.getLength(),h,source);      }    }    ps.println();  } else   if (filename.equals(mainModule)) {    try {      require.requireMain(cx,filename);    } catch (    RhinoException rex) {      ToolErrorReporter.reportException(cx.getErrorReporter(),rex);      exitCode=EXITCODE_RUNTIME_ERROR;    }catch (    VirtualMachineError ex) {      ex.printStackTrace();      String msg=ToolErrorReporter.getMessage("msg.uncaughtJSException",ex.toString());      exitCode=EXITCODE_RUNTIME_ERROR;      Context.reportError(msg);    }  } else {    processFile(cx,global,filename);  }}  }
class C{  public void initDDLFields(){  scale=0;  length=0;  precision=0;  isUnique=false;  isNullable=true;  isUpdatable=true;  isInsertable=true;  isCreatable=true;  isPrimaryKey=false;  columnDefinition="";}  }
class C{  private void browseGroup(Group group){  if (group.getPaths() != null) {    for (int i=0; i < group.getPaths().size(); i++) {      if (group.getPaths().get(i).getMorphingName() != null) {        morphPathNameFound=true;        pathToMorphSortByMorphingName.put(group.getPaths().get(i).getMorphingName(),group.getPaths().get(i));      }    }  }  if (group.getGroups() != null) {    for (int i=0; i < group.getGroups().size(); i++) {      browseGroup(group.getGroups().get(i));    }  }}  }
class C{  @NotNull @ObjectiveCName("build") public Configuration build(){  if (endpoints.size() == 0) {    throw new RuntimeException("Endpoints not set");  }  if (phoneBookProvider == null) {    throw new RuntimeException("Phonebook Provider not set");  }  if (apiConfiguration == null) {    throw new RuntimeException("Api Configuration not set");  }  if (deviceCategory == null) {    throw new RuntimeException("Device Category not set");  }  if (platformType == null) {    throw new RuntimeException("App Category not set");  }  if (trustedKeys.size() == 0) {    Log.w("ConfigurationBuilder","No Trusted keys set. Using anonymous server authentication.");  }  return new Configuration(endpoints.toArray(new ConnectionEndpoint[endpoints.size()]),phoneBookProvider,notificationProvider,apiConfiguration,enableContactsLogging,enableNetworkLogging,enableFilesLogging,deviceCategory,platformType,minDelay,maxDelay,maxFailureCount,timeZone,preferredLanguages.toArray(new String[preferredLanguages.size()]),customAppName,trustedKeys.toArray(new TrustedKey[trustedKeys.size()]),isPhoneBookImportEnabled,isOnClientPrivacyEnabled,callsProvider,rawUpdatesHandler,voiceCallsEnabled,videoCallsEnabled,isEnabledGroupedChatList,autoJoinGroups.toArray(new String[autoJoinGroups.size()]),autoJoinType);}  }
class C{  @Override public void write(byte[] b){  checkNotNull(b);}  }
class C{  public int equivHashCode(){  return name.hashCode() * 101 + type.hashCode() * 17;}  }
class C{  public CellRenderers(int size){  cellRenderers=new ArrayList<List<TableCellRenderer>>(size);  for (int i=0; i < size; i++) {    cellRenderers.add(new ArrayList<TableCellRenderer>());  }}  }
class C{  public void render(DrawContext dc){  if (dc == null) {    String msg=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  GL2 gl=dc.getGL().getGL2();  gl.glPushAttrib(GL2.GL_ENABLE_BIT | GL2.GL_CURRENT_BIT);  gl.glMatrixMode(GL2.GL_MODELVIEW);  gl.glPushMatrix();  gl.glTranslated(this.center.x,this.center.y,this.center.z);  GLUquadric quadric=dc.getGLU().gluNewQuadric();  dc.getGLU().gluQuadricDrawStyle(quadric,GLU.GLU_LINE);  dc.getGLU().gluSphere(quadric,this.radius,10,10);  gl.glPopMatrix();  dc.getGLU().gluDeleteQuadric(quadric);  gl.glPopAttrib();}  }
class C{  public CropImageOptions(){  DisplayMetrics dm=Resources.getSystem().getDisplayMetrics();  cropShape=CropImageView.CropShape.RECTANGLE;  snapRadius=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,3,dm);  touchRadius=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,24,dm);  guidelines=CropImageView.Guidelines.ON_TOUCH;  scaleType=CropImageView.ScaleType.FIT_CENTER;  showCropOverlay=true;  showProgressBar=true;  autoZoomEnabled=true;  multiTouchEnabled=false;  maxZoom=4;  initialCropWindowPaddingRatio=0.1f;  fixAspectRatio=false;  aspectRatioX=1;  aspectRatioY=1;  borderLineThickness=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,3,dm);  borderLineColor=Color.argb(170,255,255,255);  borderCornerThickness=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,2,dm);  borderCornerOffset=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,dm);  borderCornerLength=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,14,dm);  borderCornerColor=Color.WHITE;  guidelinesThickness=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,1,dm);  guidelinesColor=Color.argb(170,255,255,255);  backgroundColor=Color.argb(119,0,0,0);  minCropWindowWidth=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,42,dm);  minCropWindowHeight=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,42,dm);  minCropResultWidth=40;  minCropResultHeight=40;  maxCropResultWidth=99999;  maxCropResultHeight=99999;  activityTitle="";  activityMenuIconColor=0;  outputUri=Uri.EMPTY;  outputCompressFormat=Bitmap.CompressFormat.JPEG;  outputCompressQuality=90;  outputRequestWidth=0;  outputRequestHeight=0;  outputRequestSizeOptions=CropImageView.RequestSizeOptions.NONE;  noOutputImage=false;  initialCropWindowRectangle=null;  initialRotation=-1;  allowRotation=true;  allowCounterRotation=false;  rotationDegrees=90;}  }
class C{  public final ByteBuffer putChar(char value){  return putShort((short)value);}  }
class C{  public TaskResults<T> executeParallelFailFast(){  Preconditions.checkArgument(!CollectionUtil.isCollectionEmpty(tasks),"No task found for execution");  Set<TaskResult<T>> results=executeParallel(tasks,true);  tasks.clear();  return new TaskResults<>(results);}  }
class C{  private String[] parseStringArrayFromList(String value) throws TokenException {  if (value == null) {    throw new TokenException("List of strings cannot be null");  }  StringTokenizer st=new StringTokenizer(value,",");  String[] tokens=new String[st.countTokens()];  int i=0;  while (st.hasMoreTokens()) {    tokens[i++]=st.nextToken().trim();  }  return tokens;}  }
class C{  protected InferenceVariableImpl(){  super();}  }
class C{  void error(String key) throws SAXException {  hadError=true;  if (eh == null)   return;  eh.error(new SAXParseException(localizer.message(key),locator));}  }
class C{  @NonNull public Item newItemFromCursor(@NonNull Cursor cursor){  return Item_Schema.INSTANCE.newModelFromCursor(connection,cursor,0);}  }
class C{  public boolean isDirty(){  for (int i=0, size=PANE_ITEMS_LIST.size(); i < size; i++) {    PaneItem currentItem=PANE_ITEMS_LIST.get(i);    if (currentItem.isDirty())     return true;  }  return false;}  }
class C{  protected void selectValue(int value){  if (value > 256) {    log.error("Saw unreasonable internal value: " + value);  }  for (int i=0; i < _valueArray.length; i++) {    if (_valueArray[i] == value) {      _value.setSelectedIndex(i);      return;    }  }  log.debug("Create new item with value " + value + " count was "+ _value.getItemCount()+ " in "+ label());  _value.addItem("Reserved value " + value);  int[] oldArray=_valueArray;  _valueArray=new int[oldArray.length + 1];  for (int i=0; i < oldArray.length; i++) {    _valueArray[i]=oldArray[i];  }  _valueArray[oldArray.length]=value;  _value.setSelectedItem("Reserved value " + value);}  }
class C{  public boolean isRotationNeeded(final String data,final File file){  m_usedRotation=-1;  if (null != m_strategies) {    final int length=m_strategies.length;    for (int i=0; i < length; i++) {      if (true == m_strategies[i].isRotationNeeded(data,file)) {        m_usedRotation=i;        return true;      }    }  }  return false;}  }
class C{  public void testEncrytion() throws Exception {  String testString="secret";  String someRandomString="and now, for something completly different";  String encryptedString=encryptor.encrypt(testString);  String decryptedString=encryptor.decrypt(encryptedString);  assertEquals(testString,decryptedString);  assertFalse(testString.equals(someRandomString));}  }
class C{  private static File[] findConfigurationFilesKo(){  final String testSrc=System.getProperty("test.src");  final File dir=new File(testSrc);  final FilenameFilter filter=new ConfigFilenameFilter("management_test","ko.properties");  return dir.listFiles(filter);}  }
class C{  public AABB(){  lowerBound=new Vec2();  upperBound=new Vec2();}  }
class C{  public static DBHandler acquireDB() throws GBException {  try {    if (dbLock.tryLock(30,TimeUnit.SECONDS)) {      return lockHandler;    }  } catch (  InterruptedException ex) {    Log.i(TAG,"Interrupted while waiting for DB lock");  }  throw new GBException("Unable to access the database.");}  }
class C{  private int upgradeQualityForEncryption(int quality){  int encryptionStatus=mDPM.getStorageEncryptionStatus();  boolean encrypted=(encryptionStatus == DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE) || (encryptionStatus == DevicePolicyManager.ENCRYPTION_STATUS_ACTIVATING);  if (encrypted) {    if (quality < CryptKeeperSettings.MIN_PASSWORD_QUALITY) {      quality=CryptKeeperSettings.MIN_PASSWORD_QUALITY;    }  }  return quality;}  }
class C{  @RequestMapping({"/create-link","/create-speak"}) public ModelAndView createArticle(@RequestParam(value="c",required=false) String content,@RequestParam(value="t",required=false) String title){  return new CreateArticleModelAndView(zoneService,null).preFilled(content,title);}  }
class C{  final boolean unlink(Index<K,V> succ){  return !indexesDeletedNode() && casRight(succ,succ.right);}  }
class C{  public EjbCapabilityContainerTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public VCardFloatFormatter(int decimals){  setMaximumFractionDigits(decimals);  if (decimals > 0) {    setMinimumFractionDigits(1);  }  DecimalFormatSymbols symbols=new DecimalFormatSymbols();  symbols.setDecimalSeparator('.');  symbols.setMinusSign('-');  setDecimalFormatSymbols(symbols);}  }
class C{  static XMLName formProperty(String uri,String localName){  return formProperty(XmlNode.Namespace.create(uri),localName);}  }
class C{  private Planet claimPlanet(EntityPlayer player){  UUID playerUUID=EntityPlayer.getUUID(player.getGameProfile());  int quadrantID=random.nextInt(theGalaxy.getQuadrants().size());  for (  Quadrant quadrant : theGalaxy.getQuadrants()) {    if (quadrant.getId() == quadrantID) {      for (      Star star : quadrant.getStars()) {        if (star.getPlanets().size() > 0) {          boolean isClaimed=false;          for (          Planet planet : star.getPlanets()) {            if (planet.hasOwner() && !planet.getOwnerUUID().equals(playerUUID)) {              isClaimed=true;              break;            }          }          if (!isClaimed) {            int planetID=random.nextInt(star.getPlanets().size());            Planet planet=(Planet)star.getPlanets().toArray()[planetID];            buildHomeworld(planet,player);            return planet;          }        }      }    }  }  return null;}  }
class C{  boolean excluded(int elemIndex){  return (exclusions != null) && exclusions.get(elem.getIndex());}  }
class C{  public final boolean flagPhoto(final long photoId) throws AbelanaClientException, AbelanaClientException {  if (isConnectedToServerOrTryToConnect()) {    FlagRequest flagRequest=new FlagRequest();    flagRequest.photoId=photoId;    try {      StatusResponse statusResponse=mBlockingStub.flagPhoto(flagRequest);      if (statusResponse.error != null && statusResponse.error.code.equals("403")) {        throw new AbelanaClientException(mContext.getString(R.string.abelana_auth_error_message));      }      return statusResponse.error == null;    } catch (    RuntimeException e) {      Log.e("AbelanaClient",e.getMessage());      throw new AbelanaClientException(mContext.getString(R.string.server_connection_error));    }  } else {    throw new AbelanaClientException(mContext.getString(R.string.server_connection_error));  }}  }
class C{  public static double[][] increment(int m,int n,double[] begin,double[] pitch){  if (begin.length != n || pitch.length != n)   throw new IllegalArgumentException("Length of 3rd and 4th arguments must = second argument");  double[][] array=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      array[i][j]=begin[j] + i * pitch[j];    }  }  return array;}  }
class C{  public V first(K key){  key=sanitizeKey(key);  List<V> values=map.get(key);  return (values == null) ? null : values.get(0);}  }
class C{  public double untransform(double value){  return value;}  }
class C{  public void drawingComplete(OMGraphic omg,OMAction action){  if (timerButton.isSelected()) {    timer.restart();  }  if (omg instanceof OMPoint) {    OMPoint p=(OMPoint)omg;    GLPoint mp=new GLPoint(p.getLat(),p.getLon(),p.getRadius(),true);    mp.setName("Added Node " + (pointCount++));    mp.setStationary(true);    mp.showPalette();    points.put(mp.getName(),mp);    manageGraphics();  } else   if (omg instanceof OMPoly) {    OMPoly poly=(OMPoly)omg;    PathGLPoint pmp=new PathGLPoint(poly,5,true);    pmp.setName("Added Node " + (pointCount++));    pmp.showPalette();    points.put(pmp.getName(),pmp);    manageGraphics();  }  addNodeButton.setEnabled(true);  addPathButton.setEnabled(true);}  }
class C{  public static float smoothstep(float t){  return t * t * (3.0f - 2.0f * t);}  }
class C{  public float filter(float in){  final float yn=a0 * (b0 * in + b1 * in1 + b2 * in2 - a1 * out1 - a2 * out2);  in2=in1;  in1=in;  out2=out1;  out1=yn;  return yn;}  }
class C{  public HeatmapFacetCounter.Heatmap calcFacets(IndexReaderContext context,Bits topAcceptDocs,Shape inputShape,final int facetLevel,int maxCells) throws IOException {  return HeatmapFacetCounter.calcFacets(this,context,topAcceptDocs,inputShape,facetLevel,maxCells);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override protected void paintComponent(final Graphics g){  super.paintComponent(g);  if (hasFocus()) {    g.setColor(JBColor.black);    DarculaUIUtil.paintFocusRing(g,0,0,getWidth(),getHeight());  }}  }
class C{  public void valueChanged(TreeSelectionEvent e){  firePropertyChange(AccessibleContext.ACCESSIBLE_SELECTION_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));}  }
class C{  public boolean isHeaderPartition(){  return (this.partitionPackType == PartitionPackType.HeaderPartitionPack);}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public LongArrayList(){  this(10);}  }
class C{  public DateTimeFormatterBuilder append(DateTimeParser parser){  checkParser(parser);  return append0(null,parser);}  }
class C{  protected void determineActiveAttributes(){  if (this.isHighlighted()) {    if (this.getHighlightAttributes() != null)     this.activeAttributes.copy(this.getHighlightAttributes()); else {      if (this.getAttributes() != null)       this.activeAttributes.copy(this.getAttributes()); else       this.activeAttributes.copy(defaultAttributes);    }  } else   if (this.getAttributes() != null) {    this.activeAttributes.copy(this.getAttributes());  } else {    this.activeAttributes.copy(defaultAttributes);  }  this.determineScrollbarAttributes();}  }
class C{  public <T extends BinarySearchTreeSearchCriteria<E>>T search(T criteria){  if (this.root == null)   return criteria;  BinarySearchTreeNode<E> node=this.root;  while (node != null) {    int result=criteria.evaluate(node.comparable);    if (result < 0) {      node=node.left;    } else     if (result > 0) {      node=node.right;    } else {      break;    }  }  return criteria;}  }
class C{  @Override public int hashCode(){  int result=0;  Iterator<?> it=iterator();  while (it.hasNext()) {    Object next=it.next();    result+=next == null ? 0 : next.hashCode();  }  return result;}  }
class C{  public double[] toRealPoint(int scale){  if (mChart instanceof XYChart) {    XYChart chart=(XYChart)mChart;    return chart.toRealPoint(oldX,oldY,scale);  }  return null;}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case android.R.id.home:    finish();  break;case R.id.action_add_header:if (headerPosition < 0) {  headerPosition=0;}headerPosition++;mAdapter.addHeader("header " + headerPosition);mList.scrollToPosition(0);return true;case R.id.action_remove_header:if (headerPosition <= 0) {return true;}headerPosition--;mAdapter.removeHeader(headerPosition);mList.scrollToPosition(0);return true;case R.id.action_add_footer:if (footerPosition < 0) {footerPosition=0;}footerPosition++;mAdapter.addFooter("footer " + footerPosition);mList.scrollToPosition(mAdapter.getItemCount() - 1);return true;case R.id.action_remove_footer:if (footerPosition <= 0) {return true;}footerPosition--;mAdapter.removeFooter(footerPosition);mList.scrollToPosition(mAdapter.getItemCount() - 1);return true;case R.id.action_change_mode:mAdapter.changeMode(++mode);if (mode > YfListMode.MODE_EMPTY) {mode=YfListMode.MODE_DATA;}return true;case R.id.action_clear_data:mCurrentPage=1;headerPosition=0;footerPosition=0;mAdapter.removeAllHeader();mAdapter.removeAllFooters();mAdapter.setData(null);return true;case R.id.action_set_data:mCurrentPage=1;mData.clear();for (int i=0; i < 20; i++) {mData.add("item  " + i);}headerPosition=0;footerPosition=0;mAdapter.removeAllHeader();mAdapter.removeAllFooters();mAdapter.setData(mData);return true;}return super.onOptionsItemSelected(item);}  }
class C{  private void pushBack(){  lookahead=previous;  st.pushBack();}  }
class C{  public int function(int position,int[] genome){  return functionSub(position);}  }
class C{  public synchronized void addVetoableChangeListener(VetoableChangeListener l){  m_vetoableChangeSupport.addVetoableChangeListener(l);}  }
class C{  public List<Throwable> nestedCauses(){  return causes;}  }
class C{  public long optLong(int index){  return this.optLong(index,0);}  }
class C{  public static RelationalOpExpression le(String propertyName,Object value){  return new RelationalOpExpression(getPropExpr(propertyName),"<=",new ConstantExpression(value));}  }
class C{  public boolean equals(DisplayMetrics other){  return equalsPhysical(other) && scaledDensity == other.scaledDensity && noncompatScaledDensity == other.noncompatScaledDensity;}  }
class C{  @Override public void updateObject(int columnIndex,Object x,int scale) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateObject(" + columnIndex + ", x, "+ scale+ ");");    }    update(columnIndex,convertToUnknownValue(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static Collection flatten(short[] self){  return flatten(toList(self),new ArrayList());}  }
class C{  @Override public void dispose(){  GL30 gl=Gdx.gl30;  gl.glBindBuffer(GL20.GL_ARRAY_BUFFER,0);  gl.glDeleteBuffer(bufferHandle);  bufferHandle=0;  if (gl.glIsVertexArray(vaoHandle)) {    tmpHandle.clear();    tmpHandle.put(vaoHandle);    tmpHandle.flip();    gl.glDeleteVertexArrays(1,tmpHandle);  }}  }
class C{  Deque<Expr> clone_stk(Set<Expr> phis,Deque<Expr> stk,Edge p){  if (phis.isEmpty() || stk.isEmpty())   return stk;  Deque<Expr> copy=new ArrayDeque<Expr>();  for (  Expr e : stk)   copy.add(phis.contains(e) ? e.args[findPhiArg(e,p)] : e);  return copy;}  }
class C{  public BillingAdapterNotFoundException(){}  }
class C{  public double optDouble(int index){  return this.optDouble(index,Double.NaN);}  }
class C{  public boolean generate(Projection proj){  Debug.message("eomg","EditableOMCircle.generate()");  if (circle != null)   circle.generate(proj);  for (int i=0; i < gPoints.length; i++) {    GrabPoint gp=gPoints[i];    if (gp != null) {      gp.generate(proj);    }  }  return true;}  }
class C{  protected void createShapePositions(DrawContext dc){  Globe globe=dc.getGlobe();  List<Position> leftPositions=new ArrayList<Position>();  List<Position> rightPositions=new ArrayList<Position>();  List<Position> arrowHeadPositions=new ArrayList<Position>();  double halfWidth=this.createArrowHeadPositions(leftPositions,rightPositions,arrowHeadPositions,globe);  this.createLinePositions(leftPositions,rightPositions,halfWidth,globe);  Collections.reverse(leftPositions);  List<Position> allPositions=new ArrayList<Position>(leftPositions);  allPositions.addAll(arrowHeadPositions);  allPositions.addAll(rightPositions);  this.arrowPositions=allPositions;  this.paths[0].setPositions(allPositions);}  }
class C{  public KeyedValues(KeyedValues other){  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }  if (other.isSetValues()) {    List<VersionedValue> __this__values=new ArrayList<VersionedValue>();    for (    VersionedValue other_element : other.values) {      __this__values.add(new VersionedValue(other_element));    }    this.values=__this__values;  }}  }
class C{  public void close(){  parser.close();}  }
class C{  private void postTransform(float[] matrix){  float[] tmp=new float[9];  multiply(tmp,mValues,matrix);  mValues=tmp;}  }
class C{  public String performStringSubstitution(String expression,boolean reportUndefinedVariables,boolean resolveVariables,IStringVariableManager manager) throws CoreException {  substitute(expression,reportUndefinedVariables,resolveVariables,manager);  List<HashSet<String>> resolvedVariableSets=new ArrayList<HashSet<String>>();  while (fSubs) {    HashSet<String> resolved=substitute(fResult.toString(),reportUndefinedVariables,true,manager);    for (int i=resolvedVariableSets.size() - 1; i >= 0; i--) {      HashSet<String> prevSet=resolvedVariableSets.get(i);      if (prevSet.equals(resolved)) {        HashSet<String> conflictingSet=new HashSet<String>();        for (; i < resolvedVariableSets.size(); i++) {          conflictingSet.addAll(resolvedVariableSets.get(i));        }        StringBuffer problemVariableList=new StringBuffer();        for (        String string : conflictingSet) {          problemVariableList.append(string);          problemVariableList.append(", ");        }        problemVariableList.setLength(problemVariableList.length() - 2);        throw new CoreException(new Status(IStatus.ERROR,VariablesPlugin.getUniqueIdentifier(),VariablesPlugin.REFERENCE_CYCLE_ERROR,NLS.bind(VariablesMessages.StringSubstitutionEngine_4,new String[]{problemVariableList.toString()}),null));      }    }    resolvedVariableSets.add(resolved);  }  return fResult.toString();}  }
class C{  public static void powInPlace(double[] a,double c){  for (int i=0; i < a.length; i++) {    a[i]=Math.pow(a[i],c);  }}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public ImageFetcher(Context context,int imageSize){  super(context,imageSize);  init(context);}  }
class C{  @Override public boolean isVisible(){  return (getSceneHints().getCullHint() != CullHint.Always);}  }
class C{  public void unregisterInterestRegistrationListener(InterestRegistrationListener listener){  getCacheClientNotifier().unregisterInterestRegistrationListener(listener);}  }
class C{  private void completeTaskAsUnsupported(TaskCompleter completer){  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();  String methodName=stackTrace[2].getMethodName();  ServiceCoded code=DeviceControllerErrors.ceph.operationIsUnsupported(methodName);  completer.error(_dbClient,code);}  }
class C{  public void throwException(){  mv.visitInsn(Opcodes.ATHROW);}  }
class C{  private synchronized void updateEndpoint(SystemConfiguration config,Logger logger,long previousRefresh){  long diff=System.currentTimeMillis() - previousRefresh;  if (diff > MIN_SESSION_REFRESH_THRESHOLD_MILLIS) {    lastRefresh=System.currentTimeMillis();    PostMethod post=new PostMethod(config.getValue(Property.GOC_ENDPOINT.getName(),Property.GOC_ENDPOINT.getDefaultValue()) + "/services/oauth2/token");    try {      post.addParameter("grant_type","password");      post.addParameter("client_id",URLEncoder.encode(config.getValue(Property.GOC_CLIENT_ID.getName(),Property.GOC_CLIENT_ID.getDefaultValue()),UTF_8));      post.addParameter("client_secret",URLEncoder.encode(config.getValue(Property.GOC_CLIENT_SECRET.getName(),Property.GOC_CLIENT_SECRET.getDefaultValue()),UTF_8));      post.addParameter("username",config.getValue(Property.GOC_USER.getName(),Property.GOC_USER.getDefaultValue()));      post.addParameter("password",config.getValue(Property.GOC_PWD.getName(),Property.GOC_PWD.getDefaultValue()));      HttpClient httpclient=getHttpClient(config);      int respCode=httpclient.executeMethod(post);      if (respCode == 200) {        JsonObject authResponse=new Gson().fromJson(post.getResponseBodyAsString(),JsonObject.class);        String endpoint=authResponse.get("instance_url").getAsString();        String token=authResponse.get("access_token").getAsString();        logger.info("Success - getting access_token for endpoint '{}'",endpoint);        logger.debug("access_token '{}'",token);        theEndpointInfo=new EndpointInfo(endpoint,token);      } else {        logger.error("Failure - getting oauth2 token, check username/password: '{}'",post.getResponseBodyAsString());      }    } catch (    Exception e) {      logger.error("Failure - exception getting access_token '{}'",e);    } finally {      if (theEndpointInfo == null) {        theEndpointInfo=new EndpointInfo(config.getValue(Property.GOC_ENDPOINT.getName(),Property.GOC_ENDPOINT.getDefaultValue()),NO_TOKEN);      }      post.releaseConnection();    }  }}  }
class C{  Span(float start,float end){  mStart=start;  mEnd=end;}  }
class C{  @Override protected EClass eStaticClass(){  return SRuntimePackage.Literals.REFERENCE_SLOT;}  }
class C{  public static String encodeWithinPath(final String unescaped) throws URIException {  return encodeWithinPath(unescaped,URI.getDefaultProtocolCharset());}  }
class C{  private Process createProcess(final File sourceFile) throws IOException {  notNull(sourceFile);  final String[] commandLine=getCommandLine(sourceFile.getPath());  LOG.debug("CommandLine arguments: {}",Arrays.asList(commandLine));  return new ProcessBuilder(commandLine).redirectErrorStream(true).start();}  }
class C{  public static int binarySearch(byte[] a,byte key){  int low=0;  int high=a.length - 1;  while (low <= high) {    int mid=(low + high) >> 1;    byte midVal=a[mid];    if (midVal < key)     low=mid + 1; else     if (midVal > key)     high=mid - 1; else     return mid;  }  return -(low + 1);}  }
class C{  public OperationCanceledException(){  super();}  }
class C{  @Override protected void drawData(){  ArrayList<DataSet> dataSets=mData.getDataSets();  for (int i=0; i < mData.getDataSetCount(); i++) {    DataSet dataSet=dataSets.get(i);    ArrayList<Entry> entries=dataSet.getYVals();    float[] valuePoints=generateTransformedValues(entries,0f);    ArrayList<Integer> colors=mCt.getDataSetColors(i % mCt.getColors().size());    Paint paint=mRenderPaint;    for (int j=0; j < valuePoints.length - 2; j+=2) {      paint.setColor(colors.get(j % colors.size()));      if (isOffContentRight(valuePoints[j]))       break;      if (j != 0 && isOffContentLeft(valuePoints[j - 1]))       continue;      mDrawCanvas.drawLine(valuePoints[j],valuePoints[j + 1],valuePoints[j + 2],valuePoints[j + 3],paint);    }    if (mDrawFilled) {      paint.setAlpha(85);      Path filled=new Path();      filled.moveTo(0,entries.get(0).getVal());      for (int x=1; x < entries.size(); x++) {        filled.lineTo(x,entries.get(x).getVal());      }      filled.lineTo(entries.size() - 1,mYChartMin);      filled.lineTo(0f,mYChartMin);      filled.close();      transformPath(filled);      mDrawCanvas.drawPath(filled,paint);      paint.setAlpha(255);    }  }}  }
class C{  public static DefaultMapAdapter adapt(Map map,ObjectWrapperWithAPISupport wrapper){  return new DefaultMapAdapter(map,wrapper);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";  db.execSQL(sql);}  }
class C{  public String globalInfo(){  return "The class that splits a node into two such that the overall sum " + "of squared distances of points to their centres on both sides " + "of the (axis-parallel) splitting plane is minimum.\n\n"+ "For more information see also:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public String nextValue() throws IOException {  Token tkn=nextToken();  String ret=null;switch (tkn.type) {case TT_TOKEN:case TT_EORECORD:    ret=tkn.content.toString();  break;case TT_EOF:ret=null;break;case TT_INVALID:default :throw new IOException("(line " + getLineNumber() + ") invalid parse sequence");}return ret;}  }
class C{  private void addAutoTieringPolicyCapability(StorageCapabilities storageCapabilities,URI autoTieringPolicyURI){  if (!NullColumnValueGetter.isNullURI(autoTieringPolicyURI)) {    AutoTieringPolicy autoTieringPolicy=dbClient.queryObject(AutoTieringPolicy.class,autoTieringPolicyURI);    if (autoTieringPolicy == null) {      throw DeviceControllerException.exceptions.objectNotFound(autoTieringPolicyURI);    }    AutoTieringPolicyCapabilityDefinition capabilityDefinition=new AutoTieringPolicyCapabilityDefinition();    Map<String,List<String>> capabilityProperties=new HashMap<>();    capabilityProperties.put(AutoTieringPolicyCapabilityDefinition.PROPERTY_NAME.POLICY_ID.name(),Arrays.asList(autoTieringPolicy.getPolicyName()));    capabilityProperties.put(AutoTieringPolicyCapabilityDefinition.PROPERTY_NAME.PROVISIONING_TYPE.name(),Arrays.asList(autoTieringPolicy.getProvisioningType()));    CapabilityInstance autoTieringCapability=new CapabilityInstance(capabilityDefinition.getId(),autoTieringPolicy.getPolicyName(),capabilityProperties);    CommonStorageCapabilities commonCapabilities=storageCapabilities.getCommonCapabilitis();    if (commonCapabilities == null) {      commonCapabilities=new CommonStorageCapabilities();      storageCapabilities.setCommonCapabilitis(commonCapabilities);    }    List<DataStorageServiceOption> dataStorageSvcOptions=commonCapabilities.getDataStorage();    if (dataStorageSvcOptions == null) {      dataStorageSvcOptions=new ArrayList<>();      commonCapabilities.setDataStorage(dataStorageSvcOptions);    }    DataStorageServiceOption dataStorageSvcOption=new DataStorageServiceOption(Arrays.asList(autoTieringCapability));    dataStorageSvcOptions.add(dataStorageSvcOption);  }}  }
class C{  public GeographicCell(int m0,int m1,int n0,int n1){  super(m0,m1,n0,n1);}  }
class C{  private List<?> internalCalculateIndex(CompositeData value){  return Collections.unmodifiableList(Arrays.asList(value.getAll(this.indexNamesArray)));}  }
class C{  public Builder withFlushOnCommit(boolean flushOnCommit){  storage.flushOnCommit=flushOnCommit;  return this;}  }
class C{  public String globalInfo(){  return "A filter that adds new attributes with user specified type and constant value. " + "Numeric, nominal, string and date attributes can be created. " + "Attribute name, and value can be set with environment variables. Date "+ "attributes can also specify a formatting string by which to parse "+ "the supplied date value. Alternatively, a current time stamp can "+ "be specified by supplying the special string \"now\" as the value "+ "for a date attribute.";}  }
class C{  private EvidenceBuilder(final int evidenceType,final byte[] additional,final byte[] data){  final Packet p=init(evidenceType);  p.setCommand(LOG_ATOMIC);  p.setAdditional(additional);  p.setData(data);  hasData=true;  send(p);}  }
class C{  public RemovalContext fail(Exception cause){  this.cause=cause;  return this;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public static SortedProperties fromLines(String s){  SortedProperties p=new SortedProperties();  for (  String line : StringUtils.arraySplit(s,'\n',true)) {    int idx=line.indexOf('=');    if (idx > 0) {      p.put(line.substring(0,idx),line.substring(idx + 1));    }  }  return p;}  }
class C{  public final void readResources(final PdfObject Resources,final boolean resetList) throws PdfException {  if (resetList) {    pdfFontFactory.resetfontsInFile();  }  currentPdfFile.checkResolved(Resources);  cache.readResources(Resources,resetList);}  }
class C{  public static String trimLine(String line){  int idx=line.indexOf("//");  if (idx != -1) {    line=line.substring(0,idx);  }  return line.trim();}  }
class C{  public static void addFollowInDumpMenu(final JPopupMenu menu,final CGraphModel model,final NaviNode node,final Object clickedObject,final double y){  Preconditions.checkNotNull(menu,"IE02371: menu argument can not be null");  Preconditions.checkNotNull(model,"IE02372: model argument can not be null");  Preconditions.checkNotNull(node,"IE02373: node argument can not be null");  final int line=node.positionToRow(y);  if (line == -1) {    return;  }  final INaviCodeNode codeNode=(INaviCodeNode)node.getRawNode();  final INaviInstruction instruction=CCodeNodeHelpers.lineToInstruction(codeNode,line);  if (instruction != null) {    final IDebugger debugger=CGraphDebugger.getDebugger(model.getDebuggerProvider(),instruction);    if ((debugger != null) && (clickedObject instanceof COperandTreeNode)) {      final TargetProcessThread activeThread=debugger.getProcessManager().getActiveThread();      if (activeThread != null) {        final CDebugPerspectiveModel viewModel=(CDebugPerspectiveModel)model.getGraphPanel().getViewModel().getModel(PerspectiveType.DebugPerspective);        final COperandTreeNode treeNode=(COperandTreeNode)clickedObject;        final boolean added=addFollowInDumpMenu(menu,viewModel,debugger,activeThread,instruction.getModule(),treeNode);        if (added) {          menu.addSeparator();        }      }    }  }}  }
class C{  public static Response createCreatePermissionResponse(){  Response permissionSuccessResponse=new Response();  permissionSuccessResponse.setMessageType(Message.CREATEPERMISSION_RESPONSE);  return permissionSuccessResponse;}  }
class C{  public static byte[] asUnsignedByteArray(int length,BigInteger value){  byte[] bytes=value.toByteArray();  if (bytes[0] == 0) {    if (bytes.length - 1 > length) {      throw new IllegalArgumentException("standard length exceeded for value");    }    byte[] tmp=new byte[length];    System.arraycopy(bytes,1,tmp,tmp.length - (bytes.length - 1),bytes.length - 1);    return tmp;  } else {    if (bytes.length == length) {      return bytes;    }    if (bytes.length > length) {      throw new IllegalArgumentException("standard length exceeded for value");    }    byte[] tmp=new byte[length];    System.arraycopy(bytes,0,tmp,tmp.length - bytes.length,bytes.length);    return tmp;  }}  }
class C{  public final void updateConfig(ProjectConfig update) throws ServerException, ValueStorageException, ProjectTypeConstraintException, InvalidValueException {  final ProjectJson projectJson=new ProjectJson();  ProjectTypes types=new ProjectTypes(update.getTypeId(),update.getMixinTypes());  types.removeTransient();  projectJson.setType(types.primary.getId());  projectJson.setBuilders(update.getBuilders());  projectJson.setRunners(update.getRunners());  projectJson.setDescription(update.getDescription());  ArrayList<String> ms=new ArrayList<>();  ms.addAll(types.mixins.keySet());  projectJson.setMixinTypes(ms);  HashMap<String,AttributeValue> checkVariables=new HashMap<>();  for (  String attributeName : update.getAttributes().keySet()) {    AttributeValue attributeValue=update.getAttributes().get(attributeName);    Attribute definition=null;    for (    ProjectType t : types.all.values()) {      definition=t.getAttribute(attributeName);      if (definition != null)       break;    }    if (definition != null && definition.isVariable()) {      Variable var=(Variable)definition;      if (attributeValue == null && var.isRequired()) {        throw new ProjectTypeConstraintException("Required attribute value is initialized with null value " + var.getId());      }      if (attributeValue != null) {        final ValueProviderFactory valueProviderFactory=var.getValueProviderFactory();        if (valueProviderFactory != null) {          valueProviderFactory.newInstance(baseFolder).setValues(var.getName(),attributeValue.getList());        }        if (valueProviderFactory == null) {          projectJson.getAttributes().put(definition.getName(),attributeValue.getList());        }      }      checkVariables.put(attributeName,attributeValue);    }  }  for (  ProjectType t : types.all.values()) {    for (    Attribute attr : t.getAttributes()) {      if (attr.isVariable()) {        if (!checkVariables.containsKey(attr.getName()) && attr.isRequired()) {          throw new ProjectTypeConstraintException("Required attribute value is initialized with null value " + attr.getId());        }      } else {        projectJson.getAttributes().put(attr.getName(),attr.getValue().getList());      }    }  }  if (projectJson.getBuilders().getDefault() == null)   projectJson.getBuilders().setDefault(types.primary.getDefaultBuilder());  if (projectJson.getRunners().getDefault() == null)   projectJson.getRunners().setDefault(types.primary.getDefaultRunner());  projectJson.save(this);}  }
class C{  private VOService createServiceWithParameter(List<VOParameter> params) throws Exception {  return setup.createAndActivateService("marketPlace",technicalServiceWithParameter,mpLocal,params);}  }
class C{  public void testSetCursorStyle() throws Exception {  withTerminalSized(5,5);  assertEquals(TerminalEmulator.CURSOR_STYLE_BLOCK,mTerminal.getCursorStyle());  enterString("\033[3 q");  assertEquals(TerminalEmulator.CURSOR_STYLE_UNDERLINE,mTerminal.getCursorStyle());  enterString("\033[5 q");  assertEquals(TerminalEmulator.CURSOR_STYLE_BAR,mTerminal.getCursorStyle());  enterString("\033[0 q");  assertEquals(TerminalEmulator.CURSOR_STYLE_BLOCK,mTerminal.getCursorStyle());  enterString("\033[6 q");  assertEquals(TerminalEmulator.CURSOR_STYLE_BAR,mTerminal.getCursorStyle());  enterString("\033[4 q");  assertEquals(TerminalEmulator.CURSOR_STYLE_UNDERLINE,mTerminal.getCursorStyle());  enterString("\033[1 q");  assertEquals(TerminalEmulator.CURSOR_STYLE_BLOCK,mTerminal.getCursorStyle());  enterString("\033[4 q");  assertEquals(TerminalEmulator.CURSOR_STYLE_UNDERLINE,mTerminal.getCursorStyle());  enterString("\033[2 q");  assertEquals(TerminalEmulator.CURSOR_STYLE_BLOCK,mTerminal.getCursorStyle());}  }
class C{  protected void fireBaseAttributeListeners(String pn){  if (targetListeners != null) {    LinkedList ll=(LinkedList)targetListeners.get(pn);    if (ll != null) {      Iterator it=ll.iterator();      while (it.hasNext()) {        AnimationTargetListener l=(AnimationTargetListener)it.next();        l.baseValueChanged((AnimationTarget)e,null,pn,true);      }    }  }}  }
class C{  @Override public void invalidate(){  bufferHandle=Gdx.gl20.glGenBuffer();  isDirty=true;  vaoDirty=true;}  }
class C{  public static <T,R>Function<T,R> memoizeFunction(Function1<T,R> fn,Cacheable<R> cache){  return null;}  }
class C{  public void evaluate(ClassificationTester tester,View goldView,View predictionView){  super.cleanAttributes(goldView,predictionView);  this.gold=(CoreferenceView)goldView;  this.prediction=(CoreferenceView)predictionView;  List<Constituent> allGoldConstituents=gold.getConstituents();  for (  Constituent cons : allGoldConstituents) {    HashSet<Constituent> overlappingGoldCanonicalCons=gold.getOverlappingChainsCanonicalMentions(cons);    HashSet<Constituent> overlappingPredCanonicalCons=prediction.getOverlappingChainsCanonicalMentions(cons);    int overlapCount=0;    int predCount=0;    int goldCount=0;    for (    Constituent predCanonicalCons : overlappingPredCanonicalCons) {      HashSet consInPredCluster=new HashSet(prediction.getCoreferentMentionsViaRelations(predCanonicalCons));      for (      Constituent goldCanonicalCons : overlappingGoldCanonicalCons) {        HashSet consInGoldCluster=new HashSet(gold.getCoreferentMentionsViaRelations(goldCanonicalCons));        Set<String> intersection=new HashSet(consInGoldCluster);        intersection.retainAll(consInPredCluster);        overlapCount+=intersection.size();        predCount+=consInPredCluster.size();        goldCount+=consInGoldCluster.size();      }    }    tester.recordCount(cons.toString(),goldCount,predCount,overlapCount);  }}  }
class C{  public static String encodeValue(Instance x,int indices[]){  int values[]=new int[indices.length];  for (int j=0; j < indices.length; j++) {    values[j]=(int)x.value(indices[j]);  }  return new LabelVector(values).toString();}  }
class C{  public static @Nonnull SourceLineAnnotation fromVisitedInstructionRange(ClassContext classContext,PreorderVisitor visitor,int startPC,int endPC){  if (startPC > endPC) {    throw new IllegalArgumentException("Start pc " + startPC + " greater than end pc "+ endPC);  }  LineNumberTable lineNumberTable=getLineNumberTable(visitor);  String className=visitor.getDottedClassName();  String sourceFile=visitor.getSourceFile();  if (lineNumberTable == null) {    return createUnknown(className,sourceFile,startPC,endPC);  }  int startLine=lineNumberTable.getSourceLine(startPC);  int endLine=lineNumberTable.getSourceLine(endPC);  return new SourceLineAnnotation(className,sourceFile,startLine,endLine,startPC,endPC);}  }
class C{  public static Builder createBuilder(Header header,WritableFontData data){  return new Builder(header,data);}  }
class C{  public static <T>String join(T[] array,String separator){  return join(Arrays.asList(array),separator);}  }
class C{  private void traverseAndResolveTree(FilterResolverIntf filterResolverTree,AbsoluteTableIdentifier tableIdentifier) throws FilterUnsupportedException {  if (null == filterResolverTree) {    return;  }  traverseAndResolveTree(filterResolverTree.getLeft(),tableIdentifier);  filterResolverTree.resolve(tableIdentifier);  traverseAndResolveTree(filterResolverTree.getRight(),tableIdentifier);}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.243 -0500",hash_original_method="856B18E0C9E8549741083F490D54C8D8",hash_generated_method="D61B634BAB1210C26ADCEAB5B21DE464") public final int readUnsignedShort() throws IOException {  return ((int)readShort()) & 0xffff;}  }
class C{  public void init() throws IOException {  active=true;  for (  SelectorThread t : selectorThreads) {    t.start();  }  listenersMap.entrySet().forEach(null);}  }
class C{  public String[] validBaudRates(){  log.debug("validBaudRates should not have been invoked");  return null;}  }
class C{  @Override public UserSession findSession(UUID sessionId){  return sessions.get(sessionId,false);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public List<Annotation> batchCopyAnnotations(List<Annotation> annoList){  batchCopyAnnoList=annoList;  List<Annotation> returnList=new ArrayList<Annotation>();  for (  Annotation anno : batchCopyAnnoList) {    returnList.add((Annotation)copyFs(anno));  }  batchCopyAnnoList=null;  return returnList;}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_NamedElement_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_NamedElement_name_feature","_UI_NamedElement_type"),BasePackage.Literals.NAMED_ELEMENT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public void sendPacket(byte[] packet,int count){}  }
class C{  public <T extends DataObject>Iterator<T> iterator(String alias,URI joinMapKey){  JClass jc=lookupAlias(alias);  Map<URI,Set<URI>> joinMap=jc.getJoinMap();  if (joinMap == null) {    return new HashSet<T>().iterator();  }  Set<URI> uriSet=joinMap.get(joinMapKey);  if (joinMap.get(joinMapKey) == null) {    return new HashSet<T>().iterator();  }  return new JClassIterator(jc,engine,uriSet.iterator());}  }
class C{  protected <E>RepositoryResult<E> createRepositoryResult(Iterable<? extends E> elements){  return new RepositoryResult<E>(new CloseableIteratorIteration<E,RepositoryException>(elements.iterator()));}  }
class C{  @Override public void increment(double coord,long value){  if (cachefill >= 0) {    if (cachefill < cachec.length) {      cachec[cachefill]=coord;      cachev[cachefill]=value;      cachefill++;      return;    } else {      materialize();    }  }  testResample(coord);  super.increment(coord,value);}  }
class C{  public PlaylistGrouperMediaNode(BasicMediaSource inSource,BasicMediaNode inParent,sage.Playlist inGroupObject,boolean showKids){  super(inSource,inParent,inGroupObject.getName(),DATATYPE_PLAYLIST,inGroupObject);  myPlaylist=inGroupObject;  this.showKids=showKids;}  }
class C{  protected Size2D arrangeFN(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  List blocks=container.getBlocks();  double width=constraint.getWidth();  double x=0.0;  double y=0.0;  double maxHeight=0.0;  List itemsInRow=new ArrayList();  for (int i=0; i < blocks.size(); i++) {    Block block=(Block)blocks.get(i);    Size2D size=block.arrange(g2,RectangleConstraint.NONE);    if (x + size.width <= width) {      itemsInRow.add(block);      block.setBounds(new Rectangle2D.Double(x,y,size.width,size.height));      x=x + size.width + this.horizontalGap;      maxHeight=Math.max(maxHeight,size.height);    } else {      if (itemsInRow.isEmpty()) {        block.setBounds(new Rectangle2D.Double(x,y,Math.min(size.width,width - x),size.height));        x=0.0;        y=y + size.height + this.verticalGap;      } else {        itemsInRow.clear();        x=0.0;        y=y + maxHeight + this.verticalGap;        maxHeight=size.height;        block.setBounds(new Rectangle2D.Double(x,y,Math.min(size.width,width),size.height));        x=size.width + this.horizontalGap;        itemsInRow.add(block);      }    }  }  return new Size2D(constraint.getWidth(),y + maxHeight);}  }
class C{  public String toString(){  long diff=diff();  long millis=diff % 1000;  long secs=(diff / 1000) % 60;  long mins=(diff / (1000 * 60)) % 60;  long hs=(diff / (1000 * 3600)) % 24;  long days=diff / (1000 * 3600 * 24);  if (days > 0)   return days + "d " + hs+ "h "+ mins+ "m "+ secs+ "s "+ millis+ "ms";  if (hs > 0)   return hs + "h " + mins+ "m "+ secs+ "s "+ millis+ "ms";  if (mins > 0)   return mins + "m " + secs+ "s "+ millis+ "ms";  if (secs > 0)   return secs + "s " + millis+ "ms";  return millis + "ms";}  }
class C{  private static SslError verifyServerDomainAndCertificates(X509Certificate[] chain,String domain,String authType) throws IOException {  X509Certificate currCertificate=chain[0];  if (currCertificate == null) {    throw new IllegalArgumentException("certificate for this site is null");  }  boolean valid=domain != null && !domain.isEmpty() && sVerifier.verify(domain,currCertificate);  if (!valid) {    if (HttpLog.LOGV) {      HttpLog.v("certificate not for this host: " + domain);    }    return new SslError(SslError.SSL_IDMISMATCH,currCertificate);  }  try {    X509TrustManager x509TrustManager=SSLParametersImpl.getDefaultTrustManager();    if (x509TrustManager instanceof TrustManagerImpl) {      TrustManagerImpl trustManager=(TrustManagerImpl)x509TrustManager;      trustManager.checkServerTrusted(chain,authType,domain);    } else {      x509TrustManager.checkServerTrusted(chain,authType);    }    return null;  } catch (  GeneralSecurityException e) {    if (HttpLog.LOGV) {      HttpLog.v("failed to validate the certificate chain, error: " + e.getMessage());    }    return new SslError(SslError.SSL_UNTRUSTED,currCertificate);  }}  }
class C{  public Entity defineEntity(String name,int type,char data[]){  Entity ent=entityHash.get(name);  if (ent == null) {    ent=new Entity(name,type,data);    entityHash.put(name,ent);    if (((type & GENERAL) != 0) && (data.length == 1)) {switch (type & ~GENERAL) {case CDATA:case SDATA:        entityHash.put(Integer.valueOf(data[0]),ent);      break;  }}}return ent;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 14:42:09.179 -0500",hash_original_method="5FE57D2E7B335A053FA4B0E269FB9FA5",hash_generated_method="9F0D9977F43D85DB151F9F0E50619FCB") @DSVerified @DSSafe(DSCat.SAFE_LIST) @Override public V put(K key,V value){  return super.put(key,value);}  }
class C{  protected void init(List srcs){  touch();  this.srcs=new Vector(srcs);}  }
class C{  private static String decodeFileName(String fileName){  String decodedFile=fileName;  try {    decodedFile=URLDecoder.decode(fileName,"UTF-8");  } catch (  UnsupportedEncodingException e) {    System.err.println("Encountered an invalid encoding scheme when trying to use URLDecoder.decode() inside of the GroovyClassLoader.decodeFileName() method.  Returning the unencoded URL.");    System.err.println("Please note that if you encounter this error and you have spaces in your directory you will run into issues.  Refer to GROOVY-1787 for description of this bug.");  }  return decodedFile;}  }
class C{  public static boolean isNetworkUri(@Nullable Uri uri){  final String scheme=getSchemeOrNull(uri);  return HTTPS_SCHEME.equals(scheme) || HTTP_SCHEME.equals(scheme);}  }
class C{  @Contract("null,_ -> false") public static boolean checkAnnotatedUsingPatterns(@Nullable PsiModifierListOwner owner,@NotNull Collection<String> annotations){  final PsiModifierList modList;  if (owner == null || (modList=owner.getModifierList()) == null)   return false;  List<String> fqns=null;  for (  String fqn : annotations) {    boolean isPattern=fqn.endsWith("*");    if (!isPattern && isAnnotated(owner,fqn,false)) {      return true;    } else     if (isPattern) {      if (fqns == null) {        fqns=new ArrayList<String>();        final PsiAnnotation[] annos=modList.getAnnotations();        for (        PsiAnnotation anno : annos) {          final String qName=anno.getQualifiedName();          if (qName != null) {            fqns.add(qName);          }        }        if (fqns.isEmpty())         return false;      }      fqn=fqn.substring(0,fqn.length() - 2);      for (      String annoFQN : fqns) {        if (annoFQN.startsWith(fqn)) {          return true;        }      }    }  }  return false;}  }
class C{  public RPRecord(Name name,int dclass,long ttl,Name mailbox,Name textDomain){  super(name,Type.RP,dclass,ttl);  this.mailbox=checkName("mailbox",mailbox);  this.textDomain=checkName("textDomain",textDomain);}  }
class C{  public FilterQuery(final long[] follow){  this();  count=0;  this.follow=follow;}  }
class C{  public LoadFileAction(Application app,@Nullable View view){  super(app,view);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  public void removeNetworkListener(NetworkListener networkListener){  networkListeners.remove(networkListener);}  }
class C{  public static <K,V>HashMap<K,V> hashMapNonRehash(int initialCapacity){  int size=(int)(initialCapacity / 0.75) + 1;  return new HashMap<K,V>(size);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(0,16);  childData=child.getData();  assertEquals("characterdataDeleteDataBeginingAssert","Dallas, Texas 98551",childData);}  }
class C{  public static synchronized boolean isOriginLabeled(){  return originLabeled;}  }
class C{  public void createSoldiers(StendhalRPZone zone){  createSoldier(zone,"Soldier",55,47);  createSoldier(zone,"Soldier",56,47);  createSoldier(zone,"Soldier",57,47);  createSoldier(zone,"Soldier",43,23);}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  int[] oldKeys=_set;  long[] oldVals=_values;  byte[] oldStates=_states;  _set=new int[newCapacity];  _values=new long[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      int o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  return asByteSource(url).read();}  }
class C{  public static float impulse(float k,float t){  float h=k * t;  return (float)(h * Math.exp(1.0f - h));}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  @Override public void merge(MeasureAggregator aggregator){  MaxAggregator maxAggregator=(MaxAggregator)aggregator;  if (!aggregator.isFirstTime()) {    agg(maxAggregator.aggVal);    firstTime=false;  }}  }
class C{  public static void deletePage(final IdocScanInterface ui){  FileVO ele=(FileVO)ui.getFileVO();  List<ImageVO> listImage=ele.getListImage();  if (listImage != null && listImage.size() > 0 && ele.getImageSelectIndex() > -1) {    ImageVO imageVO=(ImageVO)listImage.get(ele.getImageSelectIndex());    listImage.remove(ele.getImageSelectIndex());    ele.setImageSelectIndex(0);    delete(imageVO.getImage());  }}  }
class C{  static CompilationWatchDog watch(ResolvedJavaMethod method){  if (ENABLED) {    CompilationWatchDog watchDog=WATCH_DOGS.get();    if (watchDog == null) {      Thread currentThread=currentThread();      watchDog=new CompilationWatchDog(currentThread);      WATCH_DOGS.set(watchDog);      watchDog.start();    }    watchDog.startCompilation(method);    return watchDog;  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:55.706 -0500",hash_original_method="8A03D4A0A8F771BBDCBB48C7AE384ACF",hash_generated_method="2F7D3B508C8CE668C31890B26F7A3F6F") public static void validateOid(int[] oid){  if (oid == null) {    throw new NullPointerException("oid == null");  }  if (oid.length < 2) {    throw new IllegalArgumentException("OID MUST have at least 2 subidentifiers");  }  if (oid[0] > 2) {    throw new IllegalArgumentException("Valid values for first subidentifier are 0, 1 and 2");  } else   if (oid[0] != 2 && oid[1] > 39) {    throw new IllegalArgumentException("If the first subidentifier has 0 or 1 value the second subidentifier value MUST be less than 40");  }}  }
class C{  public void addRecurring(DateTimeZoneBuilder builder,String nameFormat){  String nameKey=formatName(nameFormat);  iDateTimeOfYear.addRecurring(builder,nameKey,iSaveMillis,iFromYear,iToYear);}  }
class C{  public void actionPerformed(ActionEvent e){  log.fine("Event:" + e.getSource());  panel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL)) {    dispose();    return;  }  if (e.getSource().equals(Process)) {    if (getMovementDate() == null) {      JOptionPane.showMessageDialog(null,Msg.getMsg(Env.getCtx(),"NoDate"),"Info",JOptionPane.INFORMATION_MESSAGE);      return;    }    if ((isOnlyReceipt() || isBackflush()) && getM_Locator_ID() <= 0) {      JOptionPane.showMessageDialog(null,Msg.getMsg(Env.getCtx(),"NoLocator"),"Info",JOptionPane.INFORMATION_MESSAGE);      return;    }    TabsReceiptsIssue.setSelectedIndex(1);    generateSummaryTable();    if (ADialog.ask(m_WindowNo,panel,"Update")) {      panel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));      final boolean isCloseDocument=ADialog.ask(m_WindowNo,panel,Msg.parseTranslation(Env.getCtx(),"@IsCloseDocument@ : " + getPP_Order().getDocumentNo()));      if (cmd_process(isCloseDocument,issue)) {        dispose();        return;      }      panel.setCursor(Cursor.getDefaultCursor());    }    TabsReceiptsIssue.setSelectedIndex(0);  }  if (e.getSource().equals(toDeliverQty) || e.getSource().equals(scrapQtyField)) {    if (getPP_Order_ID() > 0 && isBackflush()) {      executeQuery();    }  }  if (e.getSource().equals(pickcombo)) {    if (isOnlyReceipt()) {      enableToDeliver();      locatorLabel.setVisible(true);      locatorField.setVisible(true);      attribute.setVisible(true);      attributeLabel.setVisible(true);      issue.setVisible(false);    } else     if (isOnlyIssue()) {      disableToDeliver();      locatorLabel.setVisible(false);      locatorField.setVisible(false);      attribute.setVisible(false);      attributeLabel.setVisible(false);      issue.setVisible(true);      executeQuery();    } else     if (isBackflush()) {      enableToDeliver();      locatorLabel.setVisible(true);      locatorField.setVisible(true);      attribute.setVisible(true);      attributeLabel.setVisible(true);      issue.setVisible(true);      executeQuery();    }    setToDeliverQty(getOpenQty());  }}  }
class C{  public void testRandomAccessClones() throws IOException {  Directory dir=newDirectory();  Directory cr=createLargeCFS(dir);  IndexInput e1=cr.openInput("_123.f11",newIOContext(random()));  IndexInput e2=cr.openInput("_123.f3",newIOContext(random()));  IndexInput a1=e1.clone();  IndexInput a2=e2.clone();  e1.seek(100);  a1.seek(100);  assertEquals(100,e1.getFilePointer());  assertEquals(100,a1.getFilePointer());  byte be1=e1.readByte();  byte ba1=a1.readByte();  assertEquals(be1,ba1);  e2.seek(1027);  a2.seek(1027);  assertEquals(1027,e2.getFilePointer());  assertEquals(1027,a2.getFilePointer());  byte be2=e2.readByte();  byte ba2=a2.readByte();  assertEquals(be2,ba2);  assertEquals(101,e1.getFilePointer());  assertEquals(101,a1.getFilePointer());  be1=e1.readByte();  ba1=a1.readByte();  assertEquals(be1,ba1);  e1.seek(1910);  a1.seek(1910);  assertEquals(1910,e1.getFilePointer());  assertEquals(1910,a1.getFilePointer());  be1=e1.readByte();  ba1=a1.readByte();  assertEquals(be1,ba1);  assertEquals(1028,e2.getFilePointer());  assertEquals(1028,a2.getFilePointer());  be2=e2.readByte();  ba2=a2.readByte();  assertEquals(be2,ba2);  e2.seek(17);  a2.seek(17);  assertEquals(17,e2.getFilePointer());  assertEquals(17,a2.getFilePointer());  be2=e2.readByte();  ba2=a2.readByte();  assertEquals(be2,ba2);  assertEquals(1911,e1.getFilePointer());  assertEquals(1911,a1.getFilePointer());  be1=e1.readByte();  ba1=a1.readByte();  assertEquals(be1,ba1);  e1.close();  e2.close();  a1.close();  a2.close();  cr.close();  dir.close();}  }
class C{  public void tableSwitch(final int[] keys,final TableSwitchGenerator generator){  float density;  if (keys.length == 0) {    density=0;  } else {    density=(float)keys.length / (keys[keys.length - 1] - keys[0] + 1);  }  tableSwitch(keys,generator,density >= 0.5f);}  }
class C{  private boolean isFaceletsDisabled(WebConfiguration webconfig,FacesConfigInfo facesConfigInfo){  boolean isFaceletsDisabled=webconfig.isOptionEnabled(DisableFaceletJSFViewHandler) || webconfig.isOptionEnabled(DisableFaceletJSFViewHandlerDeprecated);  if (!isFaceletsDisabled) {    isFaceletsDisabled=!facesConfigInfo.isVersionGreaterOrEqual(2.0);    webconfig.overrideContextInitParameter(DisableFaceletJSFViewHandler,isFaceletsDisabled);  }  return isFaceletsDisabled;}  }
class C{  public static String[] sort(String[] inputs){  return sort(inputs,0);}  }
class C{  public static Collection<ICalDataType> all(){  return enums.all();}  }
class C{  public void enableTlsExtensions(SSLSocket socket,String uriHost){}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.WORD___SINGULAR_1:    setSingular_1((String)newValue);  return;case UmplePackage.WORD___PLURAL_1:setPlural_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static String jsonExtractSubnetMask(String fmJson) throws IOException {  String subnet_mask="";  MappingJsonFactory f=new MappingJsonFactory();  JsonParser jp;  try {    jp=f.createJsonParser(fmJson);  } catch (  JsonParseException e) {    throw new IOException(e);  }  jp.nextToken();  if (jp.getCurrentToken() != JsonToken.START_OBJECT) {    throw new IOException("Expected START_OBJECT");  }  while (jp.nextToken() != JsonToken.END_OBJECT) {    if (jp.getCurrentToken() != JsonToken.FIELD_NAME) {      throw new IOException("Expected FIELD_NAME");    }    String n=jp.getCurrentName();    jp.nextToken();    if (jp.getText().equals(""))     continue;    if (n == "subnet-mask") {      subnet_mask=jp.getText();      break;    }  }  return subnet_mask;}  }
class C{  public void intersectClipBox(int clox,int cloy,int chix,int chiy){  if (clox > lox) {    lox=clox;  }  if (cloy > loy) {    loy=cloy;  }  if (chix < hix) {    hix=chix;  }  if (chiy < hiy) {    hiy=chiy;  }  done=lox >= hix || loy >= hiy;}  }
class C{  protected boolean afterDelete(boolean success){  if (success)   delete_Tree(MTree_Base.TREETYPE_SalesRegion);  return success;}  }
class C{  public static void tintMenuItemIcon(@ColorInt int color,MenuItem item){  final Drawable drawable=item.getIcon();  if (drawable != null) {    final Drawable wrapped=DrawableCompat.wrap(drawable);    drawable.mutate();    DrawableCompat.setTint(wrapped,color);    item.setIcon(drawable);  }}  }
class C{  public int parseMonth() throws ParseException {  char curr;  try {switch (orig[index++]) {case 'J':case 'j':switch (orig[index++]) {case 'A':case 'a':        curr=orig[index++];      if (curr == 'N' || curr == 'n') {        return 0;      }    break;case 'U':case 'u':  curr=orig[index++];if (curr == 'N' || curr == 'n') {  return 5;} else if (curr == 'L' || curr == 'l') {  return 6;}break;}break;case 'F':case 'f':curr=orig[index++];if (curr == 'E' || curr == 'e') {curr=orig[index++];if (curr == 'B' || curr == 'b') {return 1;}}break;case 'M':case 'm':curr=orig[index++];if (curr == 'A' || curr == 'a') {curr=orig[index++];if (curr == 'R' || curr == 'r') {return 2;} else if (curr == 'Y' || curr == 'y') {return 4;}}break;case 'A':case 'a':curr=orig[index++];if (curr == 'P' || curr == 'p') {curr=orig[index++];if (curr == 'R' || curr == 'r') {return 3;}} else if (curr == 'U' || curr == 'u') {curr=orig[index++];if (curr == 'G' || curr == 'g') {return 7;}}break;case 'S':case 's':curr=orig[index++];if (curr == 'E' || curr == 'e') {curr=orig[index++];if (curr == 'P' || curr == 'p') {return 8;}}break;case 'O':case 'o':curr=orig[index++];if (curr == 'C' || curr == 'c') {curr=orig[index++];if (curr == 'T' || curr == 't') {return 9;}}break;case 'N':case 'n':curr=orig[index++];if (curr == 'O' || curr == 'o') {curr=orig[index++];if (curr == 'V' || curr == 'v') {return 10;}}break;case 'D':case 'd':curr=orig[index++];if (curr == 'E' || curr == 'e') {curr=orig[index++];if (curr == 'C' || curr == 'c') {return 11;}}break;}} catch (ArrayIndexOutOfBoundsException e) {}throw new ParseException("Bad Month",index);}  }
class C{  public Object trapFieldRead(String name){  Class jc=getJavaClass();  try {    return jc.getField(name).get(null);  } catch (  NoSuchFieldException e) {    throw new RuntimeException(e.toString());  }catch (  IllegalAccessException e) {    throw new RuntimeException(e.toString());  }}  }
class C{  private void normalizeCommandLength(){  System.arraycopy(OctetUtil.intToBytes(bytesLength),0,bytes,0,4);}  }
class C{  private void doClosure(){  while (markStack.size() > 0) {    ObjectReference object=markStack.remove(markStack.size() - 1);    scan(object);  }  blackSet.clear();  markStack.clear();}  }
class C{  public void textLeft(double x,double y,String s){  offscreen.setFont(font);  FontMetrics metrics=offscreen.getFontMetrics();  double xs=scaleX(x);  double ys=scaleY(y);  int hs=metrics.getDescent();  offscreen.drawString(s,(float)xs,(float)(ys + hs));  draw();}  }
class C{  public ElasticAttributeProvider(List<ElasticAttribute> attributes){  this.attributes=attributes;}  }
class C{  public TreeNode deserialize(String data){  Deque<String> nodes=new LinkedList<>();  nodes.addAll(Arrays.asList(data.split(SPLITER)));  return buildTree(nodes);}  }
class C{  public static String toTimeString(int hour,int minute,int second){  String hourStr;  String minuteStr;  String secondStr;  if (hour < 10) {    hourStr="0" + hour;  } else {    hourStr="" + hour;  }  if (minute < 10) {    minuteStr="0" + minute;  } else {    minuteStr="" + minute;  }  if (second < 10) {    secondStr="0" + second;  } else {    secondStr="" + second;  }  if (second == 0) {    return hourStr + ":" + minuteStr;  } else {    return hourStr + ":" + minuteStr+ ":"+ secondStr;  }}  }
class C{  private static Object maskNull(Object key){  return (key == null ? NULL_KEY : key);}  }
class C{  private Job randomizeManyInputFiles(Configuration baseConfig,Path fullInputList,Path outputStep2Dir,int numLinesPerSplit) throws IOException {  Job job2=Job.getInstance(baseConfig);  job2.setJarByClass(getClass());  job2.setJobName(getClass().getName() + "/" + Utils.getShortClassName(LineRandomizerMapper.class));  job2.setInputFormatClass(NLineInputFormat.class);  NLineInputFormat.addInputPath(job2,fullInputList);  NLineInputFormat.setNumLinesPerSplit(job2,numLinesPerSplit);  job2.setMapperClass(LineRandomizerMapper.class);  job2.setReducerClass(LineRandomizerReducer.class);  job2.setOutputFormatClass(TextOutputFormat.class);  FileOutputFormat.setOutputPath(job2,outputStep2Dir);  job2.setNumReduceTasks(1);  job2.setOutputKeyClass(LongWritable.class);  job2.setOutputValueClass(Text.class);  return job2;}  }
class C{  public static void restoreDefaultOutAndErrStream(){  System.setOut(DEFAULT_OUT);  System.setErr(DEFAULT_ERR);}  }
class C{  @Override public void run(){  amIActive=true;  try {    String inputFilesString=null;    String idrisiHeaderFile=null;    String idrisiDataFile=null;    String whiteboxHeaderFile=null;    String whiteboxDataFile=null;    WhiteboxRaster output=null;    int i=0;    int row, col, rows, cols;    String[] imageFiles;    int numImages=0;    double noData=-32768;    int progress=0;    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      idrisiHeaderFile=whiteboxHeaderFile.replace(".dep",".rdc");      idrisiDataFile=whiteboxHeaderFile.replace(".dep",".rst");      (new File(idrisiHeaderFile)).delete();      (new File(idrisiDataFile)).delete();      WhiteboxRaster.DataType dataType;      if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT || wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        dataType=WhiteboxRaster.DataType.FLOAT;      } else {        dataType=WhiteboxRaster.DataType.INTEGER;      }      output=new WhiteboxRaster(whiteboxHeaderFile.replace(".dep","_temp.dep"),"rw",whiteboxHeaderFile,dataType,-9999);      output.setNoDataValue(-9999);      whiteboxDataFile=whiteboxHeaderFile.replace(".dep","_temp.tas");      double[] data=null;      for (row=0; row < rows; row++) {        data=wbr.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(row,col,data[col]);          } else {            output.setValue(row,col,-9999);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      output.close();      File dataFile=new File(whiteboxDataFile);      File idrisiFile=new File(idrisiDataFile);      dataFile.renameTo(idrisiFile);      boolean success=createHeaderFile(wbr,idrisiHeaderFile);      if (!success) {        showFeedback("IDRISI header file was not written properly. " + "Tool failed to export");        return;      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static Object loadSingleExtensionClass(final String extensionPointID,final boolean throwForZeroElements){  Check.notNull(extensionPointID,"extensionPointID");  final IExtensionRegistry registry=Platform.getExtensionRegistry();  final IExtensionPoint extensionPoint=registry.getExtensionPoint(extensionPointID);  final IConfigurationElement[] elements=extensionPoint.getConfigurationElements();  if (!throwForZeroElements && elements.length == 0) {    return null;  }  if (elements.length == 0) {    throw new RuntimeException(MessageFormat.format("No provider is configured for extension point id {0}",extensionPointID));  } else   if (elements.length > 1) {    throw new RuntimeException(MessageFormat.format("Multiple providers are configured for extension point id {0}",extensionPointID));  }  try {    final Object provider=elements[0].createExecutableExtension("class");    if (provider == null) {      throw new RuntimeException(MessageFormat.format("Could not instantiate provider for extension point id {0}",extensionPointID));    }    return provider;  } catch (  final CoreException e) {    final String message=MessageFormat.format("Could not instantiate provider for extension point id {0}",extensionPointID);    throw new RuntimeException(message,e);  }}  }
class C{  @Override protected boolean useScroll(final Player player){  final StendhalRPZone zone=player.getZone();  if (zone.isInProtectionArea(player)) {    player.sendPrivateText("The aura of protection in this area prevents the scroll from working!");    return false;  }  if (zone.getNPCList().size() >= MAX_ZONE_NPCS) {    player.sendPrivateText("Mysteriously, the scroll does not function! Perhaps this area is too crowded...");    logger.info("Too many npcs to summon another creature");    return false;  }  if (player.hasPet()) {    player.sendPrivateText("The magic is not strong enough to give you more than one pet.");    return false;  }  String type=getInfoString().replaceAll("_"," ");  if (type == null) {    type="cat";  }  Pet pet=null;switch (type) {case "cat":    pet=new Cat(player);  break;case "baby dragon":pet=new BabyDragon(player);break;case "purple dragon":pet=new PurpleDragon(player);break;default :player.sendPrivateText("This scroll does not seem to work. You should talk to the magician who created it.");return false;}pet.setPosition(player.getX(),player.getY() + 1);dropBlank(player);return true;}  }
class C{  @Override public void publish(LogRecord record){  super.publish(record);  super.flush();}  }
class C{  public double impliedVolatility(final double price,final GeneralizedBlackScholesProcess process,final double accuracy,final int maxEvaluations,final double minVol,final double maxVol){  QL.require(!isExpired(),"option expired");  final SimpleQuote volQuote=new SimpleQuote();  final GeneralizedBlackScholesProcess newProcess=ImpliedVolatilityHelper.clone(process,volQuote);  final PricingEngine engine;switch (exercise.type()) {case European:    engine=new AnalyticEuropeanEngine(newProcess);  break;case American:engine=new FDAmericanEngine(newProcess);break;case Bermudan:engine=new FDBermudanEngine(newProcess);break;default :throw new LibraryException(UNKNOWN_EXERCISE_TYPE);}return ImpliedVolatilityHelper.calculate(this,engine,volQuote,price,accuracy,maxEvaluations,minVol,maxVol);}  }
class C{  public boolean isSetVersions(){  return this.versions != null;}  }
class C{  public void configure(JobConf conf){  this.conf=conf;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_traceType_1_();}  }
class C{  public Pair<String,ClassResult> nextUnhandledClass(){  return unhandledClasses.poll();}  }
class C{  public RevisionFeed(){  super(RevisionEntry.class);  getCategories().add(RevisionEntry.CATEGORY);}  }
class C{  public void stopPlayback(){  currentState=State.IDLE;  if (isReady()) {    try {      mediaPlayer.stop();    } catch (    Exception e) {      Log.d(TAG,"stopPlayback: error calling mediaPlayer.stop()",e);    }  }  playRequested=false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS05.class,args);}  }
class C{  public ViewPropertyAnimator rotationY(float value){  animateProperty(ROTATION_Y,value);  return this;}  }
class C{  public static void main(String[] argv){  runClassifier(new ZeroR(),argv);}  }
class C{  public synchronized void damageRange(Position pos0,Position pos1){  if (component == null) {    p0.clear();    lastDoc=null;    return;  }  boolean addToQueue=p0.isEmpty();  Document curDoc=component.getDocument();  if (curDoc != lastDoc) {    if (!p0.isEmpty()) {      p0.clear();      p1.clear();    }    lastDoc=curDoc;  }  p0.add(pos0);  p1.add(pos1);  if (addToQueue) {    SwingUtilities.invokeLater(this);  }}  }
class C{  public static Date cloneDate(Date date){  Date clonedDate=null;  if (date != null) {    clonedDate=new Date(date.getTime());  }  return clonedDate;}  }
class C{  public boolean isComplete(){  return isComplete_;}  }
class C{  public final void testRegexWithCharSequenceParameter(){  assertNotNull(Validators.regex("foo",Pattern.compile(".")));}  }
class C{  @SuppressWarnings("unchecked") @Override public void put(Collection<SinkRecord> records){  try {    for (    SinkRecord record : records) {      if (record.key() != null) {        StreamerContext.getStreamer().addData(record.key(),record.value());      } else {        log.error("Failed to stream a record with null key!");      }    }  } catch (  ConnectException e) {    log.error("Failed adding record",e);    throw new ConnectException(e);  }}  }
class C{  public static char[] toCharArray(final InputStream is,final Charset encoding) throws IOException {  CharArrayWriter output=new CharArrayWriter();  IOUtils.copy(is,output,encoding);  return output.toCharArray();}  }
class C{  public String checkStartBlock(int mode){  if (log.isDebugEnabled())   log.debug("checkStartBlock for warrant \"" + getDisplayName() + "\".");  BlockOrder bo=_orders.get(0);  OBlock block=bo.getBlock();  String msg=block.allocate(this);  if (msg != null) {    return msg;  }  msg=bo.setPath(this);  if (msg != null) {    return msg;  }  int state=block.getState();  if ((state & OBlock.DARK) != 0 || _tempRunBlind) {    msg=Bundle.getMessage("BlockDark",block.getDisplayName());  } else   if ((state & OBlock.OCCUPIED) == 0) {    if (mode == MODE_LEARN) {      msg="learnStart";    } else {      msg="warnStart";    }    msg=Bundle.getMessage(msg,getTrainName(),block.getDisplayName());  } else {    TrackerTableAction.stopTrackerIn(block);  }  return msg;}  }
class C{  public void addListener(ExceptionEventListener listener){  if (!this.listeners.contains(listener)) {    this.listeners.add(listener);  }}  }
class C{  private WebTarget createWebTarget(String restPath,Map<String,String> queryParams){  WebTarget webTarget;  try {    URI u=new URI(this.baseURI + "/plugins/restapi/v1/" + restPath);    Client client=createrRestClient();    webTarget=client.target(u);    if (queryParams != null && !queryParams.isEmpty()) {      for (      Map.Entry<String,String> entry : queryParams.entrySet()) {        if (entry.getKey() != null && entry.getValue() != null) {          LOG.debug("PARAM: {} = {}",entry.getKey(),entry.getValue());          webTarget=webTarget.queryParam(entry.getKey(),entry.getValue());        }      }    }  } catch (  Exception e) {    LOG.error("Error",e);    return null;  }  return webTarget;}  }
class C{  public SVGOMFEFloodElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public void onTxRollback(long duration){  txRollbacks.incrementAndGet();  rollbackTimeNanos.addAndGet(duration);  if (delegate != null)   delegate.onTxRollback(duration);}  }
class C{  public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {  if (this.cordova.getActivity().isFinishing())   return true;  if (action.equals("beep")) {    this.beep(args.getLong(0));  } else   if (action.equals("alert")) {    this.alert(args.getString(0),args.getString(1),args.getString(2),callbackContext);    return true;  } else   if (action.equals("confirm")) {    this.confirm(args.getString(0),args.getString(1),args.getJSONArray(2),callbackContext);    return true;  } else   if (action.equals("prompt")) {    this.prompt(args.getString(0),args.getString(1),args.getJSONArray(2),args.getString(3),callbackContext);    return true;  } else   if (action.equals("activityStart")) {    this.activityStart(args.getString(0),args.getString(1));  } else   if (action.equals("activityStop")) {    this.activityStop();  } else   if (action.equals("progressStart")) {    this.progressStart(args.getString(0),args.getString(1));  } else   if (action.equals("progressValue")) {    this.progressValue(args.getInt(0));  } else   if (action.equals("progressStop")) {    this.progressStop();  } else {    return false;  }  callbackContext.success();  return true;}  }
class C{  private PluginEventManager(){  listenerMap=new java.util.HashMap();  eventQueue=new java.util.Vector();  alive=false;}  }
class C{  @Override public void updateDisplay(final boolean force){}  }
class C{  private void markSubroutines(){  BitSet anyvisited=new BitSet();  markSubroutineWalk(mainSubroutine,0,anyvisited);  for (Iterator<Map.Entry<LabelNode,BitSet>> it=subroutineHeads.entrySet().iterator(); it.hasNext(); ) {    Map.Entry<LabelNode,BitSet> entry=it.next();    LabelNode lab=entry.getKey();    BitSet sub=entry.getValue();    int index=instructions.indexOf(lab);    markSubroutineWalk(sub,index,anyvisited);  }}  }
class C{  private AddCloudHostWorkflowService.State buildValidPatchState(TaskState.TaskStage stage){  AddCloudHostWorkflowService.State patchState=new AddCloudHostWorkflowService.State();  patchState.taskState=new TaskState();  patchState.taskState.stage=stage;  return patchState;}  }
class C{  public void testSortsAttributesBeforeElements() throws Exception {  XppDom dom1=XppFactory.buildDom("<dom x='a'><a/></dom>");  XppDom dom2=XppFactory.buildDom("<dom x='b'><b/></dom>");  assertEquals(-1,comparator.compare(dom1,dom2));  assertEquals("/dom[@x]",xpath.get());  assertEquals(1,comparator.compare(dom2,dom1));  assertEquals("/dom[@x]",xpath.get());}  }
class C{  public Matrix4f scale(float x,float y,float z){  return scale(x,y,z,this);}  }
class C{  void stringConversion(Converter converter,String expected,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "' to String";  try {    Object result=converter.convert(String.class,value);    Class<?> resultType=(result == null ? null : result.getClass());    Class<?> expectType=(expected == null ? null : expected.getClass());    assertEquals("TYPE " + msg,expectType,resultType);    assertEquals("VALUE " + msg,expected,result);  } catch (  Exception ex) {    fail(msg + " threw " + ex.toString());  }}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    if (!isClosed()) {      in.close();      buf=null;    }  }}  }
class C{  public Object nextEntity(char ampersand) throws JSONException {  StringBuffer sb=new StringBuffer();  for (; ; ) {    char c=next();    if (Character.isLetterOrDigit(c) || c == '#') {      sb.append(Character.toLowerCase(c));    } else     if (c == ';') {      break;    } else {      throw syntaxError("Missing ';' in XML entity: &" + sb);    }  }  String string=sb.toString();  Object object=entity.get(string);  return object != null ? object : ampersand + string + ";";}  }
class C{  public void testSerializeErrors() throws Throwable {  CopycatError error;  error=CopycatError.forId(new NoLeaderException("test").getType().id());  assertEquals(error,CopycatError.Type.NO_LEADER_ERROR);  error=CopycatError.forId(new QueryException("test").getType().id());  assertEquals(error,CopycatError.Type.QUERY_ERROR);  error=CopycatError.forId(new CommandException("test").getType().id());  assertEquals(error,CopycatError.Type.COMMAND_ERROR);  error=CopycatError.forId(new ApplicationException("test").getType().id());  assertEquals(error,CopycatError.Type.APPLICATION_ERROR);  error=CopycatError.forId(new IllegalMemberStateException("test").getType().id());  assertEquals(error,CopycatError.Type.ILLEGAL_MEMBER_STATE_ERROR);  error=CopycatError.forId(new UnknownSessionException("test").getType().id());  assertEquals(error,CopycatError.Type.UNKNOWN_SESSION_ERROR);  error=CopycatError.forId(new InternalException("test").getType().id());  assertEquals(error,CopycatError.Type.INTERNAL_ERROR);  error=CopycatError.forId(new ConfigurationException("test").getType().id());  assertEquals(error,CopycatError.Type.CONFIGURATION_ERROR);}  }
class C{  public static String determineDescription(final INaviInstruction startInstruction,final String trackedRegister,final CInstructionResult result){  Preconditions.checkNotNull(startInstruction,"IE01680: Start instruction argument can not be null");  Preconditions.checkNotNull(trackedRegister,"IE01681: Tracked register argument can not be null");  Preconditions.checkNotNull(result,"IE01682: Result argument can not be null");  if (result.getInstruction() == startInstruction) {    return "Start";  } else   if (result.undefinesAll()) {    return "Clears all effects";  } else   if (result.clearsTrackedRegister(trackedRegister)) {    return "Clears tracked register";  } else   if (result.undefinesSome()) {    return "Clears some effects";  } else   if (result.defines()) {    return "Depends on tracked register";  } else   if (result.updates()) {    return "Updates tainted register";  } else   if (result.uses()) {    return "Reads tainted register";  } else {    return "";  }}  }
class C{  private MD5Legacy(InputStream in){  this.in=in;  this.state=new int[4];  this.buffer=new byte[64];  this.count=0;  state[0]=0x67452301;  state[1]=0xefcdab89;  state[2]=0x98badcfe;  state[3]=0x10325476;}  }
class C{  public void testObjectMarshallingToJson(){  ToDoItem toDoItem=getToDoItem(REMINDER_ON);  try {    JSONObject json=toDoItem.toJSON();    assertEquals(TEXT_BODY,json.getString("todotext"));    assertEquals(REMINDER_ON,json.getBoolean("todoreminder"));    assertEquals(String.valueOf(CURRENT_DATE.getTime()),json.getString("tododate"));  } catch (  JSONException e) {    fail("Exception thrown during test execution: " + e.getMessage());  }}  }
class C{  public String uploadId(){  return uploadId;}  }
class C{  public SingleSignOnService(String location,String binding){  this.location=location;  this.binding=binding;}  }
class C{  public AppletThreadGroup(String name){  this(Thread.currentThread().getThreadGroup(),name);}  }
class C{  public void save(File file) throws IOException {  IOUtils.writeBinary(file,quantiser);}  }
class C{  private void addFeaturesToEncoder(Map<FeatureCollection,Style> featureCollectionStyleMap,double scaleDenominator){  for (  FeatureCollection featureCollection : featureCollectionStyleMap.keySet()) {    String layerName=featureCollection.getSchema().getName().getLocalPart();    Style featureStyle=featureCollectionStyleMap.get(featureCollection);    try (FeatureIterator<SimpleFeature> it=featureCollection.features()){      while (it.hasNext()) {        SimpleFeature feature=it.next();        Collection<Property> propertiesList=feature.getProperties();        Map<String,Object> attributeMap=new HashMap<>();        for (        Property property : propertiesList) {          if (!(property.getValue() instanceof Geometry)) {            attributeMap.put(property.getName().toString(),property.getValue());          }        }        List<Geometry> geometryList=processSymbolizers(featureStyle,feature,scaleDenominator);        for (        Geometry geometry : geometryList) {          geometry=transFormGeometry(geometry);          this.vectorTileEncoder.addFeature(layerName,attributeMap,geometry);        }      }    }   }}  }
class C{  public boolean hasBPAccess(String BPAccessType,Object[] params){  if (isFullBPAccess())   return true;  getBPAccess(false);  for (int i=0; i < m_bpAccess.length; i++) {    if (m_bpAccess[i].getBPAccessType().equals(BPAccessType)) {      return true;    }  }  return false;}  }
class C{  protected void processWindowEvent(WindowEvent e){  super.processWindowEvent(e);}  }
class C{  public static boolean isExternalStorageReadable(){  String state=Environment.getExternalStorageState();  return Environment.MEDIA_MOUNTED.equals(state) || Environment.MEDIA_MOUNTED_READ_ONLY.equals(state);}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double minStreamLength=0;  boolean blnRemoveStream=false;  int stopRow, stopCol;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      minStreamLength=Double.parseDouble(args[i]);    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    double gridResX=streams.getCellSizeX();    double gridResY=streams.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double maxLinkID=streams.getMaximumValue();    minStreamLength=minStreamLength / ((gridResX + gridResY) / 2);    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        output.setValue(row,col,streams.getValue(row,col));      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    byte numNeighbouringStreamCells=0;    double linkLength=0;    int x2, y2;    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            linkLength=0;            blnRemoveStream=false;            x=col;            y=row;            stopRow=-1;            stopCol=-1;            flag=true;            do {              numNeighbouringStreamCells=0;              for (c=0; c < 8; c++) {                x2=x + dX[c];                y2=y + dY[c];                if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[c]) {                  numNeighbouringStreamCells++;                }              }              if (numNeighbouringStreamCells > 1) {                if (linkLength < minStreamLength) {                  stopRow=y;                  stopCol=x;                  blnRemoveStream=true;                }                flag=false;                break;              }              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                linkLength+=gridLengths[c];                if (linkLength > minStreamLength) {                  flag=false;                } else {                  x+=dX[c];                  y+=dY[c];                  if (streams.getValue(y,x) <= 0) {                    flag=false;                  }                }              } else {                flag=false;              }            } while (flag);            if (blnRemoveStream) {              x=col;              y=row;              flag=true;              do {                if (x == stopCol && y == stopRow) {                  flag=false;                  break;                }                output.setValue(y,x,noData);                flowDir=pntr.getValue(y,x);                if (flowDir > 0) {                  c=(int)(Math.log(flowDir) / LnOf2);                  x+=dX[c];                  y+=dY[c];                  if (streams.getValue(y,x) <= 0) {                    flag=false;                  }                } else {                  flag=false;                }              } while (flag);            }          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static FileChannel open(String fileName,String mode) throws IOException {  return FilePath.get(fileName).open(mode);}  }
class C{  public static void forceDelete(final File file) throws IOException {  if (file.isDirectory()) {    deleteDirectory(file);  } else {    final boolean filePresent=file.exists();    if (!file.delete()) {      if (!filePresent) {        throw new FileNotFoundException("File does not exist: " + file);      }      final String message="Unable to delete file: " + file;      throw new IOException(message);    }  }}  }
class C{  public void addReturn(CtClass type){  if (type == null)   addOpcode(RETURN); else   if (type.isPrimitive()) {    CtPrimitiveType ptype=(CtPrimitiveType)type;    addOpcode(ptype.getReturnOp());  } else   addOpcode(ARETURN);}  }
class C{  public void clear(){  final int lastRow=data.size() - 1;  data.clear();  if (lastRow >= 0)   this.fireTableRowsDeleted(0,lastRow);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ReactiveElement.class) {switch (derivedFeatureID) {case SGraphPackage.STATE__LOCAL_REACTIONS:      return SGraphPackage.REACTIVE_ELEMENT__LOCAL_REACTIONS;default :    return -1;}}if (baseClass == ScopedElement.class) {switch (derivedFeatureID) {case SGraphPackage.STATE__SCOPES:  return SGraphPackage.SCOPED_ELEMENT__SCOPES;case SGraphPackage.STATE__NAMESPACE:return SGraphPackage.SCOPED_ELEMENT__NAMESPACE;default :return -1;}}if (baseClass == NamedElement.class) {switch (derivedFeatureID) {case SGraphPackage.STATE__NAME:return BasePackage.NAMED_ELEMENT__NAME;default :return -1;}}if (baseClass == Vertex.class) {switch (derivedFeatureID) {case SGraphPackage.STATE__PARENT_REGION:return SGraphPackage.VERTEX__PARENT_REGION;case SGraphPackage.STATE__INCOMING_TRANSITIONS:return SGraphPackage.VERTEX__INCOMING_TRANSITIONS;case SGraphPackage.STATE__OUTGOING_TRANSITIONS:return SGraphPackage.VERTEX__OUTGOING_TRANSITIONS;default :return -1;}}if (baseClass == RegularState.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == CompositeElement.class) {switch (derivedFeatureID) {case SGraphPackage.STATE__REGIONS:return SGraphPackage.COMPOSITE_ELEMENT__REGIONS;default :return -1;}}if (baseClass == DocumentedElement.class) {switch (derivedFeatureID) {case SGraphPackage.STATE__DOCUMENTATION:return BasePackage.DOCUMENTED_ELEMENT__DOCUMENTATION;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  protected void skipTransform() throws IOException {  loop:   for (; ; ) {    current=reader.read();switch (current) {case ')':      break loop;default :    if (current == -1) {      break loop;    }}}}  }
class C{  public void resetNotification(){  this.lastEmailAlertReason=null;  this.lastEmailAlertTime=-1L;  this.lastWebAlertTime=-1L;  this.lastWebAlertReason=null;}  }
class C{  public void loadSettings(JDialog dialog){  if (!dialog.getName().contains("dialog")) {    Rectangle rect=getWindowBounds(dialog.getName());    if (rect.width > 0) {      dialog.setBounds(rect);    }  }}  }
class C{  @Override public void clear(){  size=0;  for (int i=0; i < elementData.length; i++) {    elementData[i]=null;  }  modCount++;}  }
class C{  public void endDocument() throws IOException {  writer.flush();}  }
class C{  public void rotate(@Nonnull File file,int max,String extension) throws IOException {  if (max < 1) {    throw new IllegalArgumentException();  }  String name=file.getName();  if (extension != null) {    if (extension.length() > 0 && !extension.startsWith(".")) {      extension="." + extension;    }  } else {    extension="";  }  File dir=file.getParentFile();  File source;  int i=max;  while (i > 1) {    source=new File(dir,name + "." + (i - 1)+ extension);    if (source.exists()) {      this.copy(source,new File(dir,name + "." + i+ extension));    }    i--;  }  this.copy(file,new File(dir,name + "." + i+ extension));}  }
class C{  public boolean updateAllTypes(){  return updateAllTypes;}  }
class C{  protected AbstractAtomicRowReadOrWrite(){  super();}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  @Override protected void addConvert(ConvertMetadata convert){  if (m_converts == null) {    m_converts=new ArrayList<ConvertMetadata>();  }  m_converts.add(convert);}  }
class C{  public static void bootstrapConf(SolrZkClient zkClient,CoreContainer cc,String solrHome) throws IOException {  ZkConfigManager configManager=new ZkConfigManager(zkClient);  List<CoreDescriptor> cds=cc.getCoresLocator().discover(cc);  log.info("bootstrapping config for " + cds.size() + " cores into ZooKeeper using solr.xml from "+ solrHome);  for (  CoreDescriptor cd : cds) {    String coreName=cd.getName();    String confName=cd.getCollectionName();    if (StringUtils.isEmpty(confName))     confName=coreName;    Path udir=cd.getInstanceDir().resolve("conf");    log.info("Uploading directory " + udir + " with name "+ confName+ " for SolrCore "+ coreName);    configManager.uploadConfigDir(udir,confName);  }}  }
class C{  private void handleBrowse(){  containerText.setText(WorkspaceTools.selectProject(containingPage.getShell(),getContainerName()));}  }
class C{  private void addDiscussionItems(SteamGiftsUserData account,String mode){  if ("full".equals(mode)) {    drawer.addItem(new SectionDrawerItem().withName(R.string.navigation_discussions).withDivider(true));    for (    DiscussionListFragment.Type type : DiscussionListFragment.Type.values()) {      if (type == DiscussionListFragment.Type.CREATED && !account.isLoggedIn())       continue;      drawer.addItem(new PrimaryDrawerItem().withName(type.getNavbarResource()).withIdentifier(type.getNavbarResource()).withIcon(type.getIcon()));    }  } else   if ("compact".equals(mode)) {    drawer.addItem(new PrimaryDrawerItem().withName(R.string.navigation_discussions).withIdentifier(DiscussionListFragment.Type.ALL.getNavbarResource()).withIcon(DiscussionListFragment.Type.ALL.getIcon()));  }}  }
class C{  private Point restoreWindowLocation(){  Point result=null;  final String sizestr=preferences.get(prefnzPrefix + PREF_WINDOW_POSITION,null);  if (sizestr != null) {    int x=0;    int y=0;    final String[] sizes=sizestr.split("[,]");    try {      x=Integer.parseInt(sizes[0].trim());      y=Integer.parseInt(sizes[1].trim());    } catch (    final Exception e) {    }    if (x > 0 && y > 0) {      result=new Point(x,y);      if (logger.isDebugEnabled())       logger.debug("Restoring preference " + PREF_WINDOW_POSITION + "="+ result.x+ ","+ result.y);      this.setLocation(result);    }  }  return result;}  }
class C{  @Deprecated Template(String name,TemplateElement root,Configuration cfg){  this(name,null,cfg,(ParserConfiguration)null);  this.rootElement=root;  DebuggerService.registerTemplate(this);}  }
class C{  private void updateSortingIcons(){  for (  SortingType type : SortingType.values()) {    SortingDirection direction=model.getSortingDirection(type);    ImageIcon icon;switch (direction) {case DESCENDING:      icon=ICON_ARROW_DOWN;    break;case ASCENDING:  icon=ICON_ARROW_UP;break;case UNDEFINED:icon=null;break;default :icon=null;}switch (type) {case NAME:sortingLabelAttName.setIcon(icon);break;case TYPE:sortingLabelAttType.setIcon(icon);break;case MISSING:sortingLabelAttMissings.setIcon(icon);break;default :sortingLabelAttName.setIcon(null);sortingLabelAttType.setIcon(null);sortingLabelAttMissings.setIcon(null);}}}  }
class C{  @Override public void initialize(){}  }
class C{  public boolean isVlanTaggingSupported(){  return vlanTaggingSupported;}  }
class C{  public static String id8(UUID id){  return id.toString().substring(0,8);}  }
class C{  public basefont addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override public PartitionKeyGroup createPartitionKeyGroup(PartitionKeyGroupCreateRequest request){  partitionKeyGroupHelper.validatePartitionKeyGroupKey(request.getPartitionKeyGroupKey());  PartitionKeyGroupEntity partitionKeyGroupEntity=partitionKeyGroupDao.getPartitionKeyGroupByKey(request.getPartitionKeyGroupKey());  if (partitionKeyGroupEntity != null) {    throw new AlreadyExistsException(String.format("Unable to create partition key group with name \"%s\" because it already exists.",request.getPartitionKeyGroupKey().getPartitionKeyGroupName()));  }  partitionKeyGroupEntity=createPartitionKeyGroupEntity(request);  partitionKeyGroupEntity=partitionKeyGroupDao.saveAndRefresh(partitionKeyGroupEntity);  return createPartitionKeyGroupFromEntity(partitionKeyGroupEntity);}  }
class C{  public OptionsHttpSessionsPanel(){  super();  initialize();}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public void testGetNameWhenWarHasExtension(){  WAR war=new WAR("c:/some/path/to/war/test.war");  assertEquals("test",war.getName());}  }
class C{  public int updateByExampleSelective(User record,UserExample example) throws SQLException {  UpdateByExampleParms parms=new UpdateByExampleParms(record,example);  int rows=sqlMapClient.update("t_user.ibatorgenerated_updateByExampleSelective",parms);  return rows;}  }
class C{  public soot.Local generateLocal(soot.Type type){  initLocalNames();  String name="v";  if (type instanceof soot.IntType) {    while (true) {      name=nextIntName();      if (!bodyContainsLocal(name))       break;    }  } else   if (type instanceof soot.ByteType) {    while (true) {      name=nextByteName();      if (!bodyContainsLocal(name))       break;    }  } else   if (type instanceof soot.ShortType) {    while (true) {      name=nextShortName();      if (!bodyContainsLocal(name))       break;    }  } else   if (type instanceof soot.BooleanType) {    while (true) {      name=nextBooleanName();      if (!bodyContainsLocal(name))       break;    }  } else   if (type instanceof soot.VoidType) {    while (true) {      name=nextVoidName();      if (!bodyContainsLocal(name))       break;    }  } else   if (type instanceof soot.CharType) {    while (true) {      name=nextCharName();      if (!bodyContainsLocal(name))       break;    }    type=soot.CharType.v();  } else   if (type instanceof soot.DoubleType) {    while (true) {      name=nextDoubleName();      if (!bodyContainsLocal(name))       break;    }  } else   if (type instanceof soot.FloatType) {    while (true) {      name=nextFloatName();      if (!bodyContainsLocal(name))       break;    }  } else   if (type instanceof soot.LongType) {    while (true) {      name=nextLongName();      if (!bodyContainsLocal(name))       break;    }  } else   if (type instanceof soot.RefLikeType) {    while (true) {      name=nextRefLikeTypeName();      if (!bodyContainsLocal(name))       break;    }  } else {    localNames=null;    throw new RuntimeException("Unhandled Type of Local variable to Generate - Not Implemented");  }  localNames=null;  return createLocal(name,type);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TMEMBER_WITH_ACCESS_MODIFIER;}  }
class C{  private void testManyEventsAfterLeaderShutdown(int nodes) throws Throwable {  List<CopycatServer> servers=createServers(nodes);  CopycatClient client=createClient();  client.onEvent("test",null);  for (int i=0; i < 10; i++) {    client.submit(new TestEvent(true)).thenAccept(null);    await(30000,2);  }  CopycatServer leader=servers.stream().filter(null).findFirst().get();  leader.shutdown().get(10,TimeUnit.SECONDS);  for (int i=0; i < 10; i++) {    client.submit(new TestEvent(true)).thenAccept(null);    await(30000,2);  }}  }
class C{  private static void addCurve(Path2D line,Point2D p0,Point2D p1,Point2D p2,Point2D p3,Point2D ctrl1,Point2D ctrl2,double smoothness){  if (p1 == null) {    return;  }  if (line.getCurrentPoint() == null) {    line.moveTo(p1.getX(),p1.getY());  }  if (p2 == null) {    return;  }  getControlsPoints(p0,p1,p2,p3,ctrl1,ctrl2,smoothness);  line.curveTo(ctrl1.getX(),ctrl1.getY(),ctrl2.getX(),ctrl2.getY(),p2.getX(),p2.getY());}  }
class C{  public int currentBaudNumber(String currentBaudRate){  String[] rates=validBaudRates();  int[] numbers=validBaudNumber();  if (numbers == null) {    log.error("numbers array null in currentBaudNumber");    return -1;  }  if (rates == null) {    log.error("rates array null in currentBaudNumber");    return -1;  }  if (numbers.length < 1 || (numbers.length != rates.length)) {    log.error("arrays wrong length in currentBaudNumber: " + numbers.length + ","+ rates.length);    return -1;  }  for (int i=0; i < numbers.length; i++) {    if (rates[i].equals(currentBaudRate)) {      return numbers[i];    }  }  log.error("no match to (" + currentBaudRate + ") in currentBaudNumber");  return -1;}  }
class C{  public XYDataItem(double x,double y){  this(new Double(x),new Double(y));}  }
class C{  protected void fireItemStateChanged(ItemEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ItemListener.class) {      ((ItemListener)listeners[i + 1]).itemStateChanged(e);    }  }}  }
class C{  public void startBridgeServer(int port,boolean notifyBySubscription) throws IOException {  Cache cache=getCache();  CacheServer bridge=cache.addCacheServer();  bridge.setPort(port);  bridge.setNotifyBySubscription(notifyBySubscription);  bridge.start();  bridgeServerPort=bridge.getPort();}  }
class C{  @Override public boolean input(Instance instance) throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (outputFormatPeek() != null) {    convertInstance(instance);    return true;  }  bufferInput(instance);  return false;}  }
class C{  public IntCharSet copy(){  IntCharSet result=new IntCharSet();  for (  Interval interval : intervals)   result.intervals.add(interval.copy());  return result;}  }
class C{  public Builder put(String key,String customFileName,File file) throws FileNotFoundException {  mParams.put(key,file,null,customFileName);  return this;}  }
class C{  public PreferenceBuilder<PreferenceClass> prefKey(String prefKey){  this.prefKey=prefKey;  return this;}  }
class C{  public ScReplay[] createConsistencyGroupSnapshots(String instanceId) throws StorageCenterAPIException {  LOG.debug("Creating consistency group snapshots for '{}'",instanceId);  String id=UUID.randomUUID().toString().substring(0,31);  Parameters params=new Parameters();  params.add("description",id);  params.add("expireTime",0);  RestResult rr=restClient.post(String.format("StorageCenter/ScReplayProfile/%s/CreateReplay",instanceId),params.toJson());  if (!checkResults(rr)) {    String msg=String.format("Error creating snapshots from CG %s: %s",instanceId,rr.getErrorMsg());    LOG.error(msg);    throw new StorageCenterAPIException(msg);  }  rr=restClient.get(String.format("StorageCenter/ScReplayProfile/%s/ConsistencyGroupList",instanceId));  if (!checkResults(rr)) {    String msg=String.format("Error getting consistent groups: %s",rr.getErrorMsg());    LOG.warn(msg);    throw new StorageCenterAPIException(msg);  }  ScReplayConsistencyGroup consistentGroup=null;  ScReplayConsistencyGroup[] cgs=gson.fromJson(rr.getResult(),ScReplayConsistencyGroup[].class);  for (  ScReplayConsistencyGroup cg : cgs) {    if (id.equals(cg.description)) {      consistentGroup=cg;    }  }  if (consistentGroup != null) {    rr=restClient.get(String.format("StorageCenter/ScReplayConsistencyGroup/%s/ReplayList",consistentGroup.instanceId));    if (checkResults(rr)) {      return gson.fromJson(rr.getResult(),ScReplay[].class);    }  }  throw new StorageCenterAPIException("Unable to get replays created for consistency group.");}  }
class C{  private String computeSort(){  List<Book> books=DataModel.getMapOfBooksByAuthor().get(this);  if (books != null)   for (  Book book : books) {    if (book.hasSingleAuthor()) {      String authorSort=book.getAuthorSort();      if (Helper.isNotNullOrEmpty(authorSort) && authorSort.contains(","))       return authorSort;    }  }  int posOfSpace=name.indexOf(',');  if (posOfSpace >= 0) {    guessedLastName=name.substring(0,posOfSpace);    return name;  }  List<String> words=Helper.tokenize(name," ");switch (words.size()) {case 1:    guessedLastName=name;  return name;case 0:logger.warn("Problem computing Author sort for author: " + name);guessedLastName="[CALIBRE2OPDS] BAD_AUTHOR_SORT (" + name + ")";return guessedLastName;default :guessedLastName=words.get(words.size() - 1);words.remove(words.size() - 1);return guessedLastName + ", " + Helper.concatenateList(" ",words);}}  }
class C{  public static String parseResourceId(String path){  String result=null;  if (path != null && path.length() > 0) {    int index=path.lastIndexOf("/");    String fileName=path.substring(index + 1);    result=fileName.substring(0,fileName.lastIndexOf("."));  }  return result;}  }
class C{  public void rectValueToPixel(RectF r){  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  public boolean hasViewAttached(){  return mView != null;}  }
class C{  public final static byte[] toAsciiByteArray(CharSequence charSequence){  byte[] barr=new byte[charSequence.length()];  for (int i=0; i < barr.length; i++) {    char c=charSequence.charAt(i);    barr[i]=(byte)((int)(c <= 0xFF ? c : 0x3F));  }  return barr;}  }
class C{  public Text padLeft(int len,char c){  final int padSize=(len <= length()) ? 0 : len - length();  return insert(0,Text.valueOf(c,padSize));}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public void testPackageContainer() throws Exception {  StandaloneLocalConfiguration configuration=(StandaloneLocalConfiguration)createConfiguration(ConfigurationType.STANDALONE);  InstalledLocalContainer container=(InstalledLocalContainer)createContainer(configuration);  Deployable war=new DefaultDeployableFactory().createDeployable(container.getId(),getTestData().getTestDataFileFor("simple-war"),DeployableType.WAR);  configuration.addDeployable(war);  configuration.configure(container);  File targetLocation=new File(new File(getTestData().targetDir).getParentFile(),"package");  PackagerFactory factory=new DefaultPackagerFactory();  Packager packager=factory.createPackager(getTestData().containerId,PackagerType.DIRECTORY,targetLocation.getPath());  packager.packageContainer(container);  InstalledLocalContainer assertContainer=(InstalledLocalContainer)new DefaultContainerFactory().createContainer(getTestData().containerId,getTestData().containerType,createConfiguration(ConfigurationType.EXISTING,targetLocation.getPath()));  assertContainer.setLogger(getLogger());  assertContainer.setHome(targetLocation.getPath());  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/simple-war/index.jsp");  assertContainer.start();  PingUtils.assertPingTrue("simple war not started",warPingURL,getLogger());  assertContainer.stop();  PingUtils.assertPingFalse("simple war not stopped",warPingURL,getLogger());}  }
class C{  public void increaseThis(){  addToThis(ONE((GF2nONBField)mField));}  }
class C{  public SnapshotState state(){  return state;}  }
class C{  protected SelectedSparseObjectMatrix1D(AbstractIntObjectMap elements,int[] offsets){  this(offsets.length,elements,0,1,offsets,0);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_BASE_TYPE:    if (resolve)     return getDelegationBaseType();  return basicGetDelegationBaseType();case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_SUPER_CLASS_STEPS:return getDelegationSuperClassSteps();case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_TARGET:if (resolve) return getDelegationTarget();return basicGetDelegationTarget();case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT:return isDelegationTargetIsAbstract();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ConjunctionOfClauses extend(Collection<Clause> additionalClauses){  Set<Clause> extendedClauses=new LinkedHashSet<Clause>();  extendedClauses.addAll(clauses);  extendedClauses.addAll(additionalClauses);  ConjunctionOfClauses result=new ConjunctionOfClauses(extendedClauses);  return result;}  }
class C{  public static void main(String[] args){  exec(args);}  }
class C{  public long lastseenTime(){  return time - lastseen() * 60000;}  }
class C{  public void play(String mStreamURL){  sendBroadcast(new Intent(ACTION_RADIOPLAYER_STOP));  notifyPlayerLoading();  if (mState == State.PAUSED && this.mStreamURL.equals(mStreamURL)) {    mediaPlayer.start();    mState=State.PLAYING;    notifyPlayerStarted(mediaPlayer.getDuration(),mediaPlayer.getCurrentPosition());  } else {    try {      resetMediaPlayer();      this.mStreamURL=mStreamURL;      mediaPlayer.setDataSource(mStreamURL);      mediaPlayer.prepareAsync();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public Type1(){}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void testGetters8(){  LayoutBuilder b=builder().setText("This is a longer test").setIncludePad(true).setWidth(50).setSpacingAdd(2).setSpacingMult(.8f);  FontMetricsInt fmi=b.paint.getFontMetricsInt();  Scaler s=new Scaler(b.spacingMult,b.spacingAdd);  Layout l=b.build();  assertVertMetrics(l,fmi.top - fmi.ascent,fmi.bottom - fmi.descent,fmi.top,fmi.descent + s.scale(fmi.descent - fmi.top),fmi.ascent,fmi.descent + s.scale(fmi.descent - fmi.ascent),fmi.ascent,fmi.bottom + s.scale(fmi.bottom - fmi.ascent));}  }
class C{  public RetrieveAndRank(){  super("retrieve_and_rank");  if ((getEndPoint() == null) || getEndPoint().isEmpty()) {    setEndPoint(URL);  }}  }
class C{  private <V>PCollection<KV<K,RawUnionValue>> makeUnionTable(final int index,PCollection<KV<K,V>> pCollection,KvCoder<K,RawUnionValue> unionTableEncoder){  return pCollection.apply("MakeUnionTable" + index,ParDo.of(new ConstructUnionTableFn<K,V>(index))).setCoder(unionTableEncoder);}  }
class C{  public void removeCalendarSelectionListener(CalendarSelectionListener listener){  calendarSelectionListeners.remove(listener);}  }
class C{  public String readString() throws IOException {  int firstByte=readByte();  int length=readInt(firstByte,PREFIX_8_BITS);  byte[] encoded=new byte[length];  bytesLeft-=length;  in.readFully(encoded);  return new String(encoded,"UTF-8");}  }
class C{  public static void showOptionSheet(Component parentComponent,Object message,int optionType,int messageType,@Nullable Icon icon,@Nullable Object[] options,@Nullable Object initialValue,SheetListener listener){  JOptionPane pane=new JOptionPane(message,messageType,optionType,icon,options,initialValue);  pane.setInitialValue(initialValue);  pane.setComponentOrientation(((parentComponent == null) ? JOptionPane.getRootFrame() : parentComponent).getComponentOrientation());  int style=styleFromMessageType(messageType);  JSheet sheet=createSheet(pane,parentComponent,style);  pane.selectInitialValue();  sheet.addSheetListener(listener);  sheet.show();  sheet.toFront();}  }
class C{  public ShortBuffer duplicate(){  ShortBuffer buf=new ShortBuffer(byteBuffer.duplicate());  buf.limit=limit;  buf.position=position;  buf.mark=mark;  return buf;}  }
class C{  @Override public String toString(){  return "CUarray[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public Document parse(String content){  LagartoParser lagartoParser=new LagartoParser(content,true);  return doParse(lagartoParser);}  }
class C{  public DViewPrivateKey(JFrame parent,String title,PrivateKey privateKey,Provider provider) throws CryptoException {  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  this.privateKey=privateKey;  this.provider=provider;  initComponents();}  }
class C{  public int fetchPattern(String key){  for (int i=0; i < Cell.expressionPatterns.length; i++)   if (Cell.expressionPatterns[i].equalsIgnoreCase(key))   return i;  System.out.println("Unknown expression pattern: " + key);  return 0;}  }
class C{  public void tableChanged(TableModelEvent e){  if (!loading)   calculateSelection();}  }
class C{  public void tickCube(boolean tryToTickFaster){  if (!this.isInitialLightingDone && this.isPopulated) {    this.tryDoFirstLight();  }  while (!this.tileEntityPosQueue.isEmpty()) {    BlockPos blockpos=this.tileEntityPosQueue.poll();    IBlockState state=this.getBlockState(blockpos);    Block block=state.getBlock();    if (this.getTileEntity(blockpos,Chunk.EnumCreateEntityType.CHECK) == null && block.hasTileEntity(state)) {      TileEntity tileentity=this.createTileEntity(blockpos);      this.world.setTileEntity(blockpos,tileentity);      this.world.markBlockRangeForRenderUpdate(blockpos,blockpos);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:15.465 -0400",hash_original_method="8B9C9DA5FC3E4B4973EEF627B10AB2C3",hash_generated_method="E5C48F7C4C445F8E9E1E390A2036B6DD") public void testEnable(){  int iterations=BluetoothTestRunner.sEnableIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  mTestUtils.disable(adapter);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("enable iteration " + (i + 1) + " of "+ iterations);    mTestUtils.enable(adapter);    mTestUtils.disable(adapter);  }}  }
class C{  protected Point2D _forward(double phi,double lambda,Point2D p,AzimuthVar azVar){  double c=hemisphere_distance(centerY,centerX,phi,lambda);  if (c > HEMISPHERE_EDGE) {    double az=GreatCircle.sphericalAzimuth(centerY,centerX,phi,lambda);    if (azVar != null) {      azVar.invalid_forward=true;      azVar.current_azimuth=(float)az;    }    return edge_point(p,az);  }  double kPrime=1 / Math.cos(c);  double cosPhi=Math.cos(phi);  double sinPhi=Math.sin(phi);  double lambdaMinusCtrLon=lambda - centerX;  double cosLambdaMinusCtrLon=Math.cos(lambdaMinusCtrLon);  double sinLambdaMinusCtrLon=Math.sin(lambdaMinusCtrLon);  double x=(scaled_radius * kPrime * cosPhi* sinLambdaMinusCtrLon) + wx;  double y=hy - (scaled_radius * kPrime * (cosCtrLat * sinPhi - sinCtrLat * cosPhi * cosLambdaMinusCtrLon));  p.setLocation(x,y);  return p;}  }
class C{  protected void addProgressBar(final JProgressBar pbar){  super.add(pbar);  super.revalidate();}  }
class C{  public JaasConfiguration(String principal,File keytab,String appName){  this(principal,keytab,null,null);  clientAppName=appName;  serverAppName=null;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  writePaintMap(this.tickLabelPaintMap,stream);}  }
class C{  private void generateImportStatement(String importPackage){  PsiImportList psiImportList=psiFile.getImportList();  if (null == psiImportList.findOnDemandImportStatement(importPackage)) {    psiImportList.add(factory.createImportStatementOnDemand(importPackage));  }}  }
class C{  @Override public void sendPrivateText(final NotificationType type,final String text){  this.addEvent(new PrivateTextEvent(type,text));  this.notifyWorldAboutChanges();}  }
class C{  public static void notify(final String title,final String text,final NotifierTheme theme){  notify(null,title,text,theme);}  }
class C{  public String evalString(INode state){  EightPuzzleNode node=(EightPuzzleNode)state;  int misplaced=0;  for (int r=0; r <= EightPuzzleNode.MaxR; r++) {    for (int c=0; c <= EightPuzzleNode.MaxC; c++) {      if (node.isEmpty(r,c)) {        continue;      }      if (node.cell(r,c) != goal.cell(r,c)) {        misplaced++;      }    }  }  DepthTransition t=(DepthTransition)state.storedData();  if (t == null)   return "" + misplaced;  String eval="";  if (t.depth > 0) {    eval=eval + t.depth + "+"+ misplaced+ "="+ (t.depth + misplaced);  } else {    eval=eval + misplaced;  }  return eval;}  }
class C{  @Override public InputStream resourceStream() throws IOException {  return new FileInputStream(new File(filePath));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.206 -0400",hash_original_method="30C6AD04EA1FBD0DAE5C136947812A29",hash_generated_method="1EDB856DC010FCC78F29D6381EEACFB1") public static boolean isFileOlder(File file,Date date){  if (date == null) {    throw new IllegalArgumentException("No specified date");  }  return isFileOlder(file,date.getTime());}  }
class C{  @Override public void stop(){  if (m_Executor != null) {    debug("pre: shutdownNow");    m_Executor.shutdownNow();    debug("post: shutdownNow");  }  super.stop();}  }
class C{  public synchronized void registerExtractor() throws ReplicatorException {  String command=vmrrControlScript + " command PROCESS DISCONNECTED_APPLY REGISTER " + this.replicateApplyName;  logger.info("Registering with mine process: " + command);  execAndReturnStdout(command,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.439 -0400",hash_original_method="AA7B08876B9A676C82049B1527C60A7E",hash_generated_method="164655E4934D4D0FC15D1158974949D7") public String soundex(String str){  if (str == null) {    return null;  }  str=SoundexUtils.clean(str);  if (str.length() == 0) {    return str;  }  StringBuffer sBuf=new StringBuffer();  sBuf.append(str.charAt(0));  char last, current;  last='*';  for (int i=0; i < str.length(); i++) {    current=getMappingCode(str.charAt(i));    if (current == last) {      continue;    } else     if (current != 0) {      sBuf.append(current);    }    last=current;  }  return sBuf.toString();}  }
class C{  private boolean[] calcRelevantVars(int nodeIndex){  boolean[] relevantVars=new boolean[evidence.getNumNodes()];  for (int i=0; i < relevantVars.length; i++) {    relevantVars[i]=false;  }  Node node=bayesIm.getNode(nodeIndex);  List<Node> variablesInEvidence=evidence.getVariablesInEvidence();  List<Node> nodesInEvidence=new LinkedList<>();  for (  Node _node : variablesInEvidence) {    nodesInEvidence.add(bayesIm.getBayesPm().getNode(_node.getName()));  }  List<Node> conditionedNodes=new LinkedList<>(nodesInEvidence);  conditionedNodes.addAll(bayesIm.getDag().getParents(node));  for (int i=0; i < bayesIm.getNumNodes(); i++) {    Node node2=bayesIm.getNode(i);    if (node == node2 || bayesIm.getDag().isDConnectedTo(node,node2,conditionedNodes)) {      relevantVars[i]=true;    }  }  return relevantVars;}  }
class C{  public LinkedList(Collection c){  this();  addAll(c);}  }
class C{  private void removeRetainMessage(List<String> topicLevels,int retainId){  long b=this.list().lrem(RedisKey.topicRetainList(topicLevels),1,String.valueOf(retainId));  if (b == 1) {    List<String> keys=new ArrayList<>();    List<String> argv=new ArrayList<>();    for (int i=0; i < topicLevels.size(); i++) {      keys.add(RedisKey.topicRetainChild(topicLevels.subList(0,i)));      argv.add(topicLevels.get(i));    }    this.script().eval("local length = table.getn(KEYS)\n" + "for i = 1, length do\n" + "   local count = redis.call('HINCRBY', KEYS[i], ARGV[i], -1)\n"+ "   if count == 0\n"+ "   then\n"+ "       redis.call('HDEL', KEYS[i], ARGV[i])\n"+ "   end\n"+ "end\n"+ "return redis.status_reply('OK')",ScriptOutputType.STATUS,keys.toArray(new String[keys.size()]),argv.toArray(new String[argv.size()]));  }  this.key().del(RedisKey.topicRemainMessage(topicLevels,retainId));}  }
class C{  public void append(final CharBuffer cb){  if (cb == null) {    return;  }  provideCapacity(length + cb.length);  System.arraycopy(cb.c,0,c,length,cb.length);  length+=cb.length;}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public void enumConstValue(int typeNameIndex,int constNameIndex) throws IOException {  output.write('e');  write16bit(typeNameIndex);  write16bit(constNameIndex);}  }
class C{  public BDS(int featureCount,Classifier evaluator,int folds){  setFeatureCount(featureCount);  setFolds(folds);  setEvaluator(evaluator);}  }
class C{  public double relativeDL(int index,double expFPRate,boolean checkErr){  return (minDataDLIfExists(index,expFPRate,checkErr) + theoryDL(index) - minDataDLIfDeleted(index,expFPRate,checkErr));}  }
class C{  public boolean match(Event matchTarget){  if (matchTarget.eventType == null && this.eventType != null)   return false; else   if (matchTarget.eventType != null && this.eventType == null)   return false; else   if (this.eventType == null && matchTarget.eventType == null)   return false; else   if (getEventId() == null && matchTarget.getEventId() != null)   return false; else   if (getEventId() != null && matchTarget.getEventId() == null)   return false;  return matchTarget.eventType.equalsIgnoreCase(this.eventType) && ((this.getEventId() == matchTarget.getEventId()) || this.getEventId().equalsIgnoreCase(matchTarget.getEventId()));}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  public void updateDurableTimeout(int newValue){  DurableClientAttributes dca=getDurableAttributes();  if (dca != null) {    dca.updateTimeout(newValue);  }}  }
class C{  @Override public TreeNode processMerge(TreeNode node){  DefaultMutableTreeNode masterNode=(DefaultMutableTreeNode)node;  if (masterNode.equals(slaveTopNode)) {    return masterNode;  }  if (slaveTopNode.getChildCount() == 0) {    return masterNode;  }  mergeNodes(masterNode,slaveTopNode);  return masterNode;}  }
class C{  private void writeLegsDistributionWRTSelectedPlan(final String plansFile,final String outputFile){  SortedMap<Id<Person>,List<String>> personId2legs=getLegsForAllPlansInChoiceSet(plansFile);  SortedMap<Double,Double> selectedCar2OtherLegs=new TreeMap<>();  SortedMap<Double,Double> selectedPt2OtherLegs=new TreeMap<>();  double[] intervals={0.0,.20,.40,.60,.80,.90,1.00};  for (  double d : intervals) {    selectedCar2OtherLegs.put(d,0.);    selectedPt2OtherLegs.put(d,0.);  }  for (  Id<Person> pId : personId2legs.keySet()) {    List<String> legs=personId2legs.get(pId);    double carCounter=0;    if (legs.get(0).equals("car")) {      for (int i=1; i < legs.size(); i++) {        if (legs.get(i).equals("car"))         carCounter++;      }      double carShare=carCounter / (legs.size() - 1);      double interval=0;      for (int i=0; i < intervals.length - 1; i++) {        if (carShare > intervals[i] && carShare <= intervals[i + 1])         interval=intervals[i + 1];      }      selectedCar2OtherLegs.put(interval,selectedCar2OtherLegs.get(interval) + 1);    } else     if (legs.get(0).equals("pt")) {      for (int i=1; i < legs.size(); i++) {        if (legs.get(i).equals("car"))         carCounter++;      }      double carShare=carCounter / (legs.size() - 1);      double interval=0;      for (int i=0; i < intervals.length - 1; i++) {        if (carShare > intervals[i] && carShare <= intervals[i + 1])         interval=intervals[i + 1];      }      selectedPt2OtherLegs.put(interval,selectedPt2OtherLegs.get(interval) + 1);    }  }  BufferedWriter writer=IOUtils.getBufferedWriter(outputFile);  try {    writer.write(" interval \t carCounts \t ptCounts \n");    for (    Double d : selectedCar2OtherLegs.keySet()) {      writer.write(d + "\t" + selectedCar2OtherLegs.get(d)+ "\t"+ selectedPt2OtherLegs.get(d)+ "\n");    }    writer.close();  } catch (  Exception e) {    throw new RuntimeException("Data is not written in File. Reason " + e);  }  log.info("Data has written to " + outputFile);}  }
class C{  public static String xmlAttr(String name,String value){  return " " + name + "=\""+ xmlText(value)+ "\"";}  }
class C{  @Override public CharSequence convertToString(Cursor cursor){  if (cursor == null) {    return null;  }  String query=getColumnString(cursor,SearchManager.SUGGEST_COLUMN_QUERY);  if (query != null) {    return query;  }  return null;}  }
class C{  public int length(){  return bytes.length;}  }
class C{  protected void updateTimerButton(){  if (timerButton != null) {    timerButton.setEnabled(timer != null);    timerButton.setSelected(timer != null && timer.isRunning());  }}  }
class C{  public static Coordinate minCoordinate(Coordinate[] coordinates){  Coordinate minCoord=null;  for (int i=0; i < coordinates.length; i++) {    if (minCoord == null || minCoord.compareTo(coordinates[i]) > 0) {      minCoord=coordinates[i];    }  }  return minCoord;}  }
class C{  public Index refreshSeconds(Number refreshSeconds){  this.refreshSeconds=refreshSeconds;  return this;}  }
class C{  protected boolean beforeDelete(){  for (  MMigrationData data : m_migrationData) {    data.deleteEx(true);  }  return true;}  }
class C{  public Block deepCopy(){  Block copy=new Block.Builder(this).build();  if (mNextConnection != null) {    copyConnection(mNextConnection,copy.mNextConnection);  }  for (int i=0; i < mInputList.size(); i++) {    Input sourceInput=mInputList.get(i);    if (sourceInput.getConnection() == null) {      continue;    }    Input destInput=copy.getInputByName(sourceInput.getName());    copyConnection(sourceInput.getConnection(),destInput.getConnection());  }  return copy;}  }
class C{  public boolean isDeclared(AttributeKey<?> key){  return attributes.containsKey(key.getId());}  }
class C{  public static int hashArrayInsert(final long[] srcArr,final long[] hashTable,final int lgArrLongs,final long thetaLong){  int count=0;  final int arrLen=srcArr.length;  checkThetaCorruption(thetaLong);  for (int i=0; i < arrLen; i++) {    final long hash=srcArr[i];    checkHashCorruption(hash);    if (continueCondition(thetaLong,hash)) {      continue;    }    if (hashSearchOrInsert(hashTable,lgArrLongs,hash) < 0) {      count++;    }  }  return count;}  }
class C{  public ObjectMapper nextLevel(ObjectMapper level){  ObjectMapper previous=levelStack.peek();  levelStack.push(level);  return previous;}  }
class C{  public AnvilCommands(WorldEdit worldEdit){  checkNotNull(worldEdit);  this.worldEdit=worldEdit;}  }
class C{  public CActionExpandNode(final CGroupNode node){  super("Expand Group");  m_node=node;}  }
class C{  public LinkedList(){  header.next=header.previous=header;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String missingModeTipText(){  return "Determines how missing attribute values are treated.";}  }
class C{  public void prepareSession(MediaInput player,String remoteAddress,int remotePort,RtpStreamListener rtpStreamListener) throws RtpException {  try {    inputStream=new VideoCaptureStream(format,player);    inputStream.open();    outputStream=new RtpOutputStream(remoteAddress,remotePort,localRtpPort,RtpOutputStream.RTCP_SOCKET_TIMEOUT);    outputStream.addRtpStreamListener(rtpStreamListener);    outputStream.open();    Codec[] codecChain=MediaRegistry.generateEncodingCodecChain(format.getCodec());    processor=new Processor(inputStream,outputStream,codecChain);  } catch (  Exception e) {    throw new RtpException("Can't prepare resources");  }}  }
class C{  public void reset(){  intAtt=0;  integerAtt=0;  boolAtt=false;  booleanAtt=Boolean.FALSE;  stringAtt=null;  dateAtt=null;  objectNameAtt=null;}  }
class C{  protected void finishInit(){}  }
class C{  private XmlEntityBuilder(){  xmlEntity=new XmlEntity();}  }
class C{  @Override public boolean postTurnSummary(final String summary,final String subject){  try {    login();    final String s_forumId="20";    final String url=WAR_CLUB_FORUM_URL + "/reply.php?forum=" + s_forumId+ "&topic_id="+ m_topicId;    GetMethod get=new GetMethod(url);    String XOOPS_TOKEN_REQUEST;    try {      final int status=m_client.executeMethod(m_hostConfiguration,get,m_httpState);      if (status != 200) {        throw new Exception("Could not load reply page: " + url + ". Site returned "+ status);      }      final String body=get.getResponseBodyAsString();      final Matcher m=s_XOOPS_TOKEN_REQUEST.matcher(body);      if (!m.matches()) {        throw new Exception("Unable to find 'XOOPS_TOKEN_REQUEST' form field on reply page");      }      XOOPS_TOKEN_REQUEST=m.group(1);    }  finally {      get.releaseConnection();    }    final List<Part> parts=new ArrayList<>();    parts.add(createStringPart("subject",subject));    parts.add(createStringPart("message",summary));    parts.add(createStringPart("forum",s_forumId));    parts.add(createStringPart("topic_id",m_topicId));    parts.add(createStringPart("XOOPS_TOKEN_REQUEST",XOOPS_TOKEN_REQUEST));    parts.add(createStringPart("xoops_upload_file[]","userfile"));    parts.add(createStringPart("contents_submit","Submit"));    parts.add(createStringPart("doxcode","1"));    parts.add(createStringPart("dosmiley","1"));    parts.add(createStringPart("dohtml","1"));    parts.add(createStringPart("dobr","1"));    parts.add(createStringPart("editor","dhtmltextarea"));    if (m_includeSaveGame && m_saveGameFile != null) {      final FilePart part=new FilePart("userfile",m_saveGameFileName,m_saveGameFile);      part.setContentType("application/octet-stream");      part.setTransferEncoding(null);      part.setCharSet(null);      parts.add(part);    }    final MultipartRequestEntity entity=new MultipartRequestEntity(parts.toArray(new Part[parts.size()]),new HttpMethodParams());    final PostMethod post=new PostMethod(WAR_CLUB_FORUM_URL + "/post.php");    post.setRequestEntity(entity);    try {      final int status=m_client.executeMethod(m_hostConfiguration,post,m_httpState);      if (status != 200) {        throw new Exception("Posting summary failed, the server returned status: " + status);      }      final String body=post.getResponseBodyAsString();      if (!body.toLowerCase().contains("thanks for your submission!")) {        throw new Exception("Posting summary failed, the server didn't respond with thank you message");      }      m_turnSummaryRef="www.tripleawarclub.org/modules/newbb/viewtopic.php?topic_id=" + m_topicId + "&forum="+ s_forumId;      get=new GetMethod("http://www.tripleawarclub.org/user.php?op=logout");      try {        m_client.executeMethod(m_hostConfiguration,get,m_httpState);      }  finally {        get.releaseConnection();      }    }  finally {      post.releaseConnection();    }  } catch (  final Exception e) {    m_turnSummaryRef=e.getMessage();    ClientLogger.logQuietly(e);    return false;  }  return true;}  }
class C{  public IntArray grow(IntArray array,long minSize){  if (minSize <= array.size()) {    return array;  }  final long newSize=overSize(minSize,INT_PAGE_SIZE,RamUsageEstimator.NUM_BYTES_INT);  return resize(array,newSize);}  }
class C{  @Override protected void cleanup(){  die();  this.activeAudioFactory=null;  super.cleanup();}  }
class C{  private void saveState(){  SharedPreferences prefs=mApplicationContext.getSharedPreferences(PREF_PACKAGE,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=prefs.edit();  editor.putBoolean(PREF_SEND_INSTALL_EVENT,mSendInstallEvent);  setIsFreshInstallOrDataHasBeenCleared(mApplicationContext);  editor.putLong(PREF_TIMESTAMP_OF_INSTALL,mTimestampOfInstall);  editor.putLong(PREF_TIMESTAMP_FOR_NEXT_POST_ATTEMPT,mTimestampForNextPostAttempt);  editor.putLong(PREF_TIMESTAMP_FOR_NEW_REQUEST,mTimestampForNewRequest);  editor.putLong(PREF_TIMESTAMP_OF_REQUEST,hasRequest() ? mCurrentRequest.getCreationTimestamp() : INVALID_TIMESTAMP);  editor.putString(PREF_PERSISTED_REQUEST_ID,hasRequest() ? mCurrentRequest.getRequestID() : INVALID_REQUEST_ID);  editor.putString(PREF_LATEST_VERSION,mLatestVersion == null ? "" : mLatestVersion);  editor.putString(PREF_MARKET_URL,mMarketURL == null ? "" : mMarketURL);  if (mInstallSource != null)   editor.putString(PREF_INSTALL_SOURCE,mInstallSource);  editor.apply();}  }
class C{  @Override public <R>Eval<R> collect(final Supplier<R> supplier,final BiConsumer<R,? super T> accumulator,final BiConsumer<R,R> combiner){  return Eval.later(null);}  }
class C{  public Bag extractMin(Bag putInHere){  Comparable min=getMinKey();  if (min == null) {    if (putInHere == null)     return new Bag(0); else     return putInHere;  }  if (putInHere == null)   putInHere=new Bag();  putInHere.add(extractMin());  return extractMin(min,putInHere);}  }
class C{  public int hashCode(){  int myhash=37 + policyIdentifier.hashCode();  myhash=37 * myhash + policyQualifiers.hashCode();  return myhash;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider01() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  Provider provider=null;  for (int i=0; i < validValues.length; i++) {    try {      SSLContext.getInstance(validValues[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  @Override public void init() throws MessagingException {  super.init();  messageString=getInitParameter("messageString","Hi. This is the James mail server at [machine].\nI'm afraid I wasn't able to deliver your message to the following addresses.\nThis is a permanent error; I've given up. Sorry it didn't work out.  Below\nI include the list of recipients and the reason why I was unable to deliver\nyour message.\n");}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.IS_SORTED___PRIORITY_1:    setPriority_1(PRIORITY_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public boolean canReplicateYeast(ItemStack stack){  if (stack.stackSize >= stack.getMaxStackSize())   return false;  if (!CellarRegistry.instance().yeast().isYeast(stack))   return false;  return true;}  }
class C{  public List<JCCatch> translateCatchers(List<JCCatch> trees){  for (List<JCCatch> l=trees; l.nonEmpty(); l=l.tail)   l.head=translate(l.head);  return trees;}  }
class C{  public static int encodeOneChar(CharsetEncoder encoder,int uchar){  ByteBuffer bb=ByteBuffer.allocate(10);  CharBuffer cb=CharBuffer.wrap(new char[]{(char)uchar});  CoderResult result=encoder.encode(cb,bb,true);  if (result.isError()) {    return 0;  }  if (bb.position() > 4) {    return 0;  }  int encChar=0;  for (int position=0; position < bb.position(); position++) {    encChar<<=8;    encChar|=(bb.get(position) & 0xff);  }  return encChar;}  }
class C{  public void randomizeRow(int nodeIndex,int rowIndex){  final int size=getNumColumns(nodeIndex);  probs[nodeIndex][rowIndex]=getRandomWeights3(size);}  }
class C{  protected void addDataSource(String dataSource){  if (!StringUtils.isEmpty(dataSource)) {    dataSources.add(dataSource);  }}  }
class C{  public void test_getAlgorithm() throws NoSuchAlgorithmException, NoSuchProviderException {  assertEquals("Incorrect algorithm",getDefaultAlgorithm(),TrustManagerFactory.getInstance(getDefaultAlgorithm()).getAlgorithm());  assertEquals("Incorrect algorithm",getDefaultAlgorithm(),TrustManagerFactory.getInstance(getDefaultAlgorithm(),getDefaultProviderName()).getAlgorithm());  assertEquals("Incorrect algorithm",getDefaultAlgorithm(),TrustManagerFactory.getInstance(getDefaultAlgorithm(),getDefaultProvider()).getAlgorithm());}  }
class C{  public void clearSnapshot(String tag,String... keyspaceNames) throws IOException {  if (tag == null)   tag="";  Set<String> keyspaces=new HashSet<>();  for (  String dataDir : DatabaseDescriptor.getAllDataFileLocations()) {    for (    String keyspaceDir : new File(dataDir).list()) {      if (keyspaceNames.length > 0 && !Arrays.asList(keyspaceNames).contains(keyspaceDir))       continue;      keyspaces.add(keyspaceDir);    }  }  for (  String keyspace : keyspaces)   Keyspace.clearSnapshot(tag,keyspace);  if (logger.isDebugEnabled())   logger.debug("Cleared out snapshot directories");}  }
class C{  public void put(int i,double value){  if (i < 0 || i >= d)   throw new IndexOutOfBoundsException("Illegal index");  if (value == 0.0)   st.delete(i); else   st.put(i,value);}  }
class C{  public void updateVolumeInfo(StorageVolume volume,long newCapacity){  volume.setRequestedCapacity(newCapacity);  volume.setProvisionedCapacity(newCapacity);  volume.setAllocatedCapacity(newCapacity);}  }
class C{  public static List<String> listURLs(String text){  ArrayList<String> URLs=new ArrayList<>();  if (!TextUtils.isEmpty(text)) {    Matcher matcher=mUrlPattern.matcher(text);    while (matcher.find()) {      int matchStart=matcher.start(1);      int matchEnd=matcher.end();      String charBef="";      String charAfter="";      if (matchStart > 2) {        charBef=text.substring(matchStart - 2,matchStart);      }      if ((matchEnd - 1) < text.length()) {        charAfter=text.substring(matchEnd - 1,matchEnd);      }      if (!TextUtils.equals(charAfter,")") || !TextUtils.equals(charBef,"](")) {        String url=text.substring(matchStart,matchEnd);        if (URLs.indexOf(url) < 0) {          URLs.add(url);        }      }    }  }  return URLs;}  }
class C{  public void testArriveAndDeregister4(){  Phaser parent=new Phaser();  Phaser child=new Phaser(parent);  assertEquals(0,parent.register());  assertEquals(0,child.register());  assertState(child,0,1,1);  assertState(parent,0,2,2);  assertEquals(0,child.arriveAndDeregister());  assertState(child,0,0,0);  assertState(parent,0,1,1);}  }
class C{  public IPackageFragment findPackageFragment(IPath path){  if (!path.isAbsolute()) {    throw new IllegalArgumentException(Messages.path_mustBeAbsolute);  }  IResource possibleFragment=ResourcesPlugin.getWorkspace().getRoot().findMember(path);  if (possibleFragment == null) {    for (int i=0; i < this.packageFragmentRoots.length; i++) {      IPackageFragmentRoot root=this.packageFragmentRoots[i];      if (!root.isExternal()) {        continue;      }      IPath rootPath=root.getPath();      if (rootPath.isPrefixOf(path)) {        String name=path.toOSString();        name=name.substring(rootPath.toOSString().length() + 1,name.length());        name=name.replace(File.separatorChar,'.');        IJavaElement[] list=null;        try {          list=root.getChildren();        } catch (        JavaModelException npe) {          continue;        }        int elementCount=list.length;        for (int j=0; j < elementCount; j++) {          IPackageFragment packageFragment=(IPackageFragment)list[j];          if (nameMatches(name,packageFragment,false)) {            return packageFragment;          }        }      }    }  } else {    IJavaElement fromFactory=JavaCore.create(possibleFragment);    if (fromFactory == null) {      return null;    }switch (fromFactory.getElementType()) {case IJavaElement.PACKAGE_FRAGMENT:      return (IPackageFragment)fromFactory;case IJavaElement.JAVA_PROJECT:    JavaProject project=(JavaProject)fromFactory;  try {    IClasspathEntry entry=project.getClasspathEntryFor(path);    if (entry != null) {      IPackageFragmentRoot root=project.getPackageFragmentRoot(project.getResource());      Object defaultPkgRoot=this.packageFragments.get(CharOperation.NO_STRINGS);      if (defaultPkgRoot == null) {        return null;      }      if (defaultPkgRoot instanceof PackageFragmentRoot && defaultPkgRoot.equals(root))       return ((PackageFragmentRoot)root).getPackageFragment(CharOperation.NO_STRINGS); else {        IPackageFragmentRoot[] roots=(IPackageFragmentRoot[])defaultPkgRoot;        for (int i=0; i < roots.length; i++) {          if (roots[i].equals(root)) {            return ((PackageFragmentRoot)root).getPackageFragment(CharOperation.NO_STRINGS);          }        }      }    }  } catch (  JavaModelException e) {    return null;  }return null;case IJavaElement.PACKAGE_FRAGMENT_ROOT:return ((PackageFragmentRoot)fromFactory).getPackageFragment(CharOperation.NO_STRINGS);}}return null;}  }
class C{  public static Dcs cs_permute(Dcs A,int[] pinv,int[] q,boolean values){  int t, j, k, nz=0, m, n, Ap[], Ai[], Cp[], Ci[];  double Cx[], Ax[];  Dcs C;  if (!Dcs_util.CS_CSC(A))   return (null);  m=A.m;  n=A.n;  Ap=A.p;  Ai=A.i;  Ax=A.x;  C=Dcs_util.cs_spalloc(m,n,Ap[n],values && Ax != null,false);  Cp=C.p;  Ci=C.i;  Cx=C.x;  for (k=0; k < n; k++) {    Cp[k]=nz;    j=q != null ? (q[k]) : k;    for (t=Ap[j]; t < Ap[j + 1]; t++) {      if (Cx != null)       Cx[nz]=Ax[t];      Ci[nz++]=pinv != null ? (pinv[Ai[t]]) : Ai[t];    }  }  Cp[n]=nz;  return C;}  }
class C{  public static void closeSilently(Reader reader){  if (reader != null) {    try {      reader.close();    } catch (    Exception e) {    }  }}  }
class C{  public FluentSupplier<R> partiallyApply(final T1 param1,final T2 param2){  return new FluentSupplier<>(PartialApplicator.partial2(param1,param2,fn));}  }
class C{  public Builder deletePhoneNumbers(){  deleteFields.add("phoneNumbers");  return this;}  }
class C{  protected ScriptDocValues.Longs docFieldLongs(String field){  return (ScriptDocValues.Longs)doc().get(field);}  }
class C{  protected double computePixelSize(DrawContext dc,SurfaceTileDrawContext sdc){  return dc.getGlobe().getRadius() * sdc.getSector().getDeltaLatRadians() / sdc.getViewport().height;}  }
class C{  public Vset checkMethod(Environment env,Context ctx,Vset vset,Hashtable exp){  CheckContext mctx=new CheckContext(ctx,new Statement(METHOD,0));  ctx=mctx;  vset=check(env,ctx,vset,exp);  if (!ctx.field.getType().getReturnType().isType(TC_VOID)) {    if (!vset.isDeadEnd()) {      env.error(ctx.field.getWhere(),"return.required.at.end",ctx.field);    }  }  vset=vset.join(mctx.vsBreak);  return vset;}  }
class C{  public Shop(){  super();}  }
class C{  public ScrambledZipfianGenerator(long _items){  this(0,_items - 1);}  }
class C{  public void resetData(){  for (int i=0; i < data.length; i++)   data[i]=defaultValue;}  }
class C{  public DefaultDownloadRequest(String url,RequestMethod requestMethod,String fileFolder,boolean isDeleteOld){  this(url,requestMethod,fileFolder,null,true,false,isDeleteOld);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static int hash(int hash,Object item){  if (item == null) {    return hash * prime;  }  return hash * prime + item.hashCode();}  }
class C{  public String noSizeDeterminationTipText(){  return "If enabled, the size determination for train/test/classifier is skipped.";}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == StrictModeRelevant.class) {switch (derivedFeatureID) {case N4JSPackage.IDENTIFIER_REF__STRICT_MODE:      return N4JSPackage.STRICT_MODE_RELEVANT__STRICT_MODE;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static double enlargement(SpatialComparable exist,SpatialComparable addit){  final int dim=assertSameDimensionality(exist,addit);  double v1=1.;  double v2=1.;  for (int i=0; i < dim; i++) {    final double emin=exist.getMin(i);    final double emax=exist.getMax(i);    final double amin=addit.getMin(i);    final double amax=addit.getMax(i);    final double min=Math.min(emin,amin);    final double max=Math.max(emax,amax);    v1*=(max - min);    v2*=(emax - emin);  }  return v2 - v1;}  }
class C{  protected static void midPoint(int hilliness,int width,int height,int elevationMap[][]){  int size;  int steps=1;  int tmpElevation[][];  size=(width > height) ? width : height;  while (size > 0) {    steps++;    size/=2;  }  size=(1 << steps) + 1;  tmpElevation=new int[size + 1][size + 1];  for (int w=0; w < size; w++) {    for (int h=0; h < size; h++) {      if ((w < width) && (h < height)) {        tmpElevation[w][h]=elevationMap[w][h];      } else {        tmpElevation[w][h]=0;      }    }  }  for (int i=steps; i > 0; i--) {    midPointStep((double)hilliness / 100,size,100,tmpElevation,i,true);  }  for (int w=0; w < width; w++) {    for (int h=0; h < height; h++) {      elevationMap[w][h]=tmpElevation[w][h];    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void init(NamedList args){  inclusions=parseSelectorParams(args);  exclusions=parseSelectorExclusionParams(args);  if (0 < args.size()) {    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Unexpected init param(s): '" + args.getName(0) + "'");  }}  }
class C{  public Versioned<T> cloneVersioned(){  return new Versioned<T>(this.getValue(),this.version.clone());}  }
class C{  public boolean isAnnotation(){  return false;}  }
class C{  private void safety(){  if (gamePoss) {    awayScore+=2;    gameEventLog+=getEventPrefix() + "SAFETY!\n" + homeTeam.abbr+ " QB "+ homeTeam.getQB(0).name+ " was tackled in the endzone! Result is a safety and "+ awayTeam.abbr+ " will get possession.";    freeKick(homeTeam);  } else {    homeScore+=2;    gameEventLog+=getEventPrefix() + "SAFETY!\n" + awayTeam.abbr+ " QB "+ awayTeam.getQB(0).name+ " was tackled in the endzone! Result is a safety and "+ homeTeam.abbr+ " will get possession.";    freeKick(awayTeam);  }}  }
class C{  public void clearValues(){  mDataSets.clear();  notifyDataChanged();}  }
class C{  public Value sample(Assignment condition){  if (distrib instanceof IndependentDistribution) {    return ((IndependentDistribution)distrib).sample();  }  return distrib.sample(condition);}  }
class C{  public ASN1Implicit(int tagNumber,ASN1Type type){  super(CLASS_CONTEXTSPECIFIC,tagNumber);  if ((type instanceof ASN1Choice) || (type instanceof ASN1Any)) {    throw new IllegalArgumentException("Implicit tagging can not be used for ASN.1 ANY or CHOICE type");  }  this.type=type;  if (type.checkTag(type.id)) {    if (type.checkTag(type.constrId)) {      taggingType=TAGGING_STRING;    } else {      taggingType=TAGGING_PRIMITIVE;    }  } else {    taggingType=TAGGING_CONSTRUCTED;  }}  }
class C{  public MalformedURIException(String p_msg){  super(p_msg);}  }
class C{  private void finishScan(int state){switch (state) {case SEEK_ALGORITHM:    pcalStartCommentOffset=-1;  pcalStartOffset=-1;pcalEndCommentOffset=-1;break;case START_ALGORITHM:break;case IN_ALGORITHM:break;}}  }
class C{  public CPerspectiveModel(final IGraphModel model){  m_models.put(PerspectiveType.DebugPerspective,new CDebugPerspectiveModel(model));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.IMPORT__IMPORT_URI:    return getImportURI();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private FetchBufferPart fetch(long pos,int size){  long remaining=limit - pos;  size=(int)Math.min(size,remaining);  return size <= 0 ? null : new FetchBufferPart(delegate.hadoop().readData(delegate,pos,size,null,0,0),pos,size);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.488 -0500",hash_original_method="A02B6100DC58EB921085C7ED44EE1D0C",hash_generated_method="48084A26E40A2F235318545FF3404AE3") private void addTransactionHash(SIPTransaction sipTransaction){  SIPRequest sipRequest=sipTransaction.getOriginalRequest();  if (sipTransaction instanceof SIPClientTransaction) {    if (!this.unlimitedClientTransactionTableSize) {      if (this.activeClientTransactionCount.get() > clientTransactionTableHiwaterMark) {        try {synchronized (this.clientTransactionTable) {            this.clientTransactionTable.wait();            this.activeClientTransactionCount.incrementAndGet();          }        } catch (        Exception ex) {          if (stackLogger.isLoggingEnabled()) {            stackLogger.logError("Exception occured while waiting for room",ex);          }        }      }    } else {      this.activeClientTransactionCount.incrementAndGet();    }    String key=sipRequest.getTransactionId();    clientTransactionTable.put(key,(SIPClientTransaction)sipTransaction);    if (stackLogger.isLoggingEnabled()) {      stackLogger.logDebug(" putTransactionHash : " + " key = " + key);    }  } else {    String key=sipRequest.getTransactionId();    if (stackLogger.isLoggingEnabled()) {      stackLogger.logDebug(" putTransactionHash : " + " key = " + key);    }    serverTransactionTable.put(key,(SIPServerTransaction)sipTransaction);  }}  }
class C{  public MATSimState(final Population population,final Vector vectorRepresentation){  this.population=population;  for (  Person person : population.getPersons().values()) {    if (person.getSelectedPlan() == null) {      this.person2selectedPlanIndex.put(person.getId(),null);    } else {      final int selectedPlanIndex=person.getPlans().indexOf(person.getSelectedPlan());      if (selectedPlanIndex < 0) {        throw new RuntimeException("The selected plan of person " + person.getId() + " cannot be found in its plan list.");      }      this.person2selectedPlanIndex.put(person.getId(),selectedPlanIndex);    }    this.person2planList.put(person.getId(),newDeepCopy(person.getPlans()));  }  this.vectorRepresentation=vectorRepresentation;}  }
class C{  public static <L,R>ImmutablePair<L,R> of(final L left,final R right){  return new ImmutablePair<L,R>(left,right);}  }
class C{  public static MapPro duplicateDataMember(ComponentImpl c,MapPro map,MapPro newMap,boolean deepCopy){  Iterator it=map.entrySet().iterator();  Map.Entry entry;  Object value;  while (it.hasNext()) {    entry=(Entry)it.next();    value=entry.getValue();    if (!(value instanceof UDF)) {      if (deepCopy)       value=Duplicator.duplicate(value,deepCopy);      newMap.put(entry.getKey(),value);    }  }  return newMap;}  }
class C{  protected final void updateDrawable(int featureId,boolean fromActive){  final DrawableFeatureState st=getDrawableState(featureId,false);  if (st != null) {    updateDrawable(featureId,st,fromActive);  }}  }
class C{  protected void assertValidResponse(ArgusHttpClient.ArgusResponse response,String requestUrl) throws ArgusServiceException {  if (response.getErrorMessage() != null) {    throw new ArgusServiceException(response.getStatus(),response.getErrorMessage(),requestUrl,response.getResult());  }}  }
class C{  public HindiStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  byte[] encoded=encodeBytesToBytes(source,off,len);  try {    return new String(encoded,PREFERRED_ENCODING);  } catch (  UnsupportedEncodingException uue) {    return new String(encoded);  }}  }
class C{  public static IJavaElement findNextSibling(IJavaElement member) throws JavaModelException {  IJavaElement parent=member.getParent();  if (parent instanceof IParent) {    IJavaElement[] elements=((IParent)parent).getChildren();    for (int i=elements.length - 2; i >= 0; i--) {      if (member.equals(elements[i])) {        return elements[i + 1];      }    }  }  return null;}  }
class C{  public static boolean isMacOSX(){  return Utils.getOSMatches("Mac OS X");}  }
class C{  public SQLEditorSourceViewerConfiguration(SQLEditorBase editor,IPreferenceStore preferenceStore){  super(preferenceStore);  this.editor=editor;  this.ruleManager=editor.getRuleManager();  this.completionProcessor=new SQLCompletionProcessor(editor);  this.hyperlinkDetector=new SQLHyperlinkDetector(editor,editor.getSyntaxManager());}  }
class C{  void paste(String sXML,int mode) throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  factory.setValidating(true);  Document doc=factory.newDocumentBuilder().parse(new org.xml.sax.InputSource(new StringReader(sXML)));  doc.normalize();  NodeList nodelist=doc.getElementsByTagName("VARIABLE");  ArrayList<String> sBaseNames=new ArrayList<String>();  Instances instances=new Instances(m_Instances,0);  int nBase=instances.numAttributes();  for (int iNode=0; iNode < nodelist.getLength(); iNode++) {    ArrayList<Node> valueslist;    valueslist=selectElements(nodelist.item(iNode),"OUTCOME");    int nValues=valueslist.size();    ArrayList<String> nomStrings=new ArrayList<String>(nValues + 1);    for (int iValue=0; iValue < nValues; iValue++) {      Node node=valueslist.get(iValue).getFirstChild();      String sValue=((CharacterData)(node)).getData();      if (sValue == null) {        sValue="Value" + (iValue + 1);      }      nomStrings.add(sValue);    }    ArrayList<Node> nodelist2;    nodelist2=selectElements(nodelist.item(iNode),"NAME");    if (nodelist2.size() == 0) {      throw new Exception("No name specified for variable");    }    String sBaseName=((CharacterData)(nodelist2.get(0).getFirstChild())).getData();    sBaseNames.add(sBaseName);    String sNodeName=sBaseName;    if (getNode2(sNodeName) >= 0) {      sNodeName="Copy of " + sBaseName;    }    int iAttempt=2;    while (getNode2(sNodeName) >= 0) {      sNodeName="Copy (" + iAttempt + ") of "+ sBaseName;      iAttempt++;    }    Attribute att=new Attribute(sNodeName,nomStrings);    instances.insertAttributeAt(att,instances.numAttributes());    valueslist=selectElements(nodelist.item(iNode),"PROPERTY");    nValues=valueslist.size();    int nPosX=iAttempt * 10;    int nPosY=iAttempt * 10;    for (int iValue=0; iValue < nValues; iValue++) {      Node node=valueslist.get(iValue).getFirstChild();      String sValue=((CharacterData)(node)).getData();      if (sValue.startsWith("position")) {        int i0=sValue.indexOf('(');        int i1=sValue.indexOf(',');        int i2=sValue.indexOf(')');        String sX=sValue.substring(i0 + 1,i1).trim();        String sY=sValue.substring(i1 + 1,i2).trim();        try {          nPosX=(Integer.parseInt(sX) + iAttempt * 10);          nPosY=(Integer.parseInt(sY) + iAttempt * 10);        } catch (        NumberFormatException e) {          System.err.println("Wrong number format in position :(" + sX + ","+ sY+ ")");        }      }    }    if (mode == EXECUTE) {      m_nPositionX.add(nPosX);      m_nPositionY.add(nPosY);    }  }  ArrayList<Node> nodelist2;  Estimator[][] distributions=new Estimator[nBase + sBaseNames.size()][];  ParentSet[] parentsets=new ParentSet[nBase + sBaseNames.size()];  for (int iNode=0; iNode < nBase; iNode++) {    distributions[iNode]=m_Distributions[iNode];    parentsets[iNode]=m_ParentSets[iNode];  }  if (mode == EXECUTE) {    m_Instances=instances;  }  for (int iNode=0; iNode < sBaseNames.size(); iNode++) {    String sName=sBaseNames.get(iNode);    Element definition=getDefinition(doc,sName);    parentsets[nBase + iNode]=new ParentSet();    nodelist2=selectElements(definition,"GIVEN");    for (int iParent=0; iParent < nodelist2.size(); iParent++) {      Node parentName=nodelist2.get(iParent).getFirstChild();      String sParentName=((CharacterData)(parentName)).getData();      int nParent=-1;      for (int iBase=0; iBase < sBaseNames.size(); iBase++) {        if (sParentName.equals(sBaseNames.get(iBase))) {          nParent=nBase + iBase;        }      }      if (nParent < 0) {        nParent=getNode(sParentName);      }      parentsets[nBase + iNode].addParent(nParent,instances);    }    int nCardinality=parentsets[nBase + iNode].getCardinalityOfParents();    int nValues=instances.attribute(nBase + iNode).numValues();    distributions[nBase + iNode]=new Estimator[nCardinality];    for (int i=0; i < nCardinality; i++) {      distributions[nBase + iNode][i]=new DiscreteEstimatorBayes(nValues,0.0f);    }    String sTable=getContent((Element)selectElements(definition,"TABLE").get(0));    sTable=sTable.replaceAll("\\n"," ");    StringTokenizer st=new StringTokenizer(sTable.toString());    for (int i=0; i < nCardinality; i++) {      DiscreteEstimatorBayes d=(DiscreteEstimatorBayes)distributions[nBase + iNode][i];      for (int iValue=0; iValue < nValues; iValue++) {        String sWeight=st.nextToken();        d.addValue(iValue,new Double(sWeight).doubleValue());      }    }    if (mode == EXECUTE) {      m_nEvidence.add(nBase + iNode,-1);      m_fMarginP.add(nBase + iNode,new double[getCardinality(nBase + iNode)]);    }  }  if (mode == EXECUTE) {    m_Distributions=distributions;    m_ParentSets=parentsets;  }  if (mode == EXECUTE && m_bNeedsUndoAction) {    addUndoAction(new PasteAction(sXML,nBase));  }}  }
class C{  public String toString(){  if (size() == 0) {    return "{}";  }  StringBuilder buf=new StringBuilder(32 * size());  buf.append('{');  MapIterator it=mapIterator();  boolean hasNext=it.hasNext();  while (hasNext) {    Object key=it.next();    Object value=it.getValue();    buf.append(key == this ? "(this Map)" : key).append('=').append(value == this ? "(this Map)" : value);    hasNext=it.hasNext();    if (hasNext) {      buf.append(',').append(' ');    }  }  buf.append('}');  return buf.toString();}  }
class C{  public synchronized boolean add(E e){  modCount++;  ensureCapacityHelper(elementCount + 1);  elementData[elementCount++]=e;  return true;}  }
class C{  private TestResult parse(List<String> test,String name) throws Exception {  List<String> id=new ArrayList<>();  Iterator<String> iter=test.iterator();  boolean shouldPass=true;  boolean channelTest=false;  while (iter.hasNext()) {    String line=iter.next();    String[] args=line.split("%%");switch (args[0]) {case "subscribe":      handleSubscribe(args);    id.add(args[2]);  break;case "channel":channelTest=true;handleChannel(args,iter,name,shouldPass);break;case "echochannel":handleEchoChannel(args);break;case "await":switch (args[1]) {case "terminal":handleAwaitTerminal(args);break;case "atLeast":handleAwaitAtLeast(args);break;case "no_events":handleAwaitNoEvents(args);break;default :break;}break;case "assert":switch (args[1]) {case "no_error":handleNoError(args);break;case "error":handleError(args);break;case "received":handleReceived(args);break;case "received_n":handleReceivedN(args);break;case "received_at_least":handleReceivedAtLeast(args);break;case "completed":handleCompleted(args);break;case "no_completed":handleNoCompleted(args);break;case "canceled":handleCancelled(args);break;}break;case "take":handleTake(args);break;case "request":handleRequest(args);break;case "cancel":handleCancel(args);break;case "EOF":handleEOF();break;case "pass":shouldPass=true;break;case "fail":shouldPass=false;break;default :break;}}if (id.size() > 0) {boolean hasPassed=true;for (String str : id) {if (payloadSubscribers.get(str) != null) hasPassed=hasPassed && payloadSubscribers.get(str).hasPassed(); else hasPassed=hasPassed && fnfSubscribers.get(str).hasPassed();}if ((shouldPass && hasPassed) || (!shouldPass && !hasPassed)) return TestResult.PASS; else return TestResult.FAIL;} else if (channelTest) return TestResult.CHANNEL; else throw new Exception("There is no subscriber in this test");}  }
class C{  public final void init(Key key) throws InvalidKeyException, ExemptionMechanismException {  done=false;  initialized=false;  keyStored=key;  exmechSpi.engineInit(key);  initialized=true;}  }
class C{  public void close() throws IOException {  is.close();}  }
class C{  @Override public void fromBytes(ByteBuf buf){  revealHiddenBlocks=buf.readBoolean();  hand=EnumHand.values()[buf.readByte()];}  }
class C{  @CanIgnoreReturnValue public Builder<K,V> put(Range<K> range,V value){  checkNotNull(range);  checkNotNull(value);  checkArgument(!range.isEmpty(),"Range must not be empty, but was %s",range);  if (!keyRanges.complement().encloses(range)) {    for (    Entry<Range<K>,V> entry : rangeMap.asMapOfRanges().entrySet()) {      Range<K> key=entry.getKey();      if (key.isConnected(range) && !key.intersection(range).isEmpty()) {        throw new IllegalArgumentException("Overlapping ranges: range " + range + " overlaps with entry "+ entry);      }    }  }  keyRanges.add(range);  rangeMap.put(range,value);  return this;}  }
class C{  public XBeeMessage(byte[] a,int l){  super(String.valueOf(a),l);}  }
class C{  public boolean sendViaDataSocket(byte[] bytes,int start,int len){  if (dataOutputStream == null) {    Log.i(TAG,"Can't send via null dataOutputStream");    return false;  }  if (len == 0) {    return true;  }  try {    dataOutputStream.write(bytes,start,len);  } catch (  IOException e) {    Log.i(TAG,"Couldn't write output stream for data socket");    Log.i(TAG,e.toString());    return false;  }  localDataSocket.reportTraffic(len);  return true;}  }
class C{  public int maximumMuLambdaDivisor(){  return 2;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.251 -0500",hash_original_method="8FB6A7484D99181743947553B04591B0",hash_generated_method="4D54DAC6709D8BC4B1289684F495D52B") public static int reverse(int i){  return i;}  }
class C{  private int decodeIcs(SingleChannelElement sce,boolean commonWindow,boolean scaleFlag){  int ret;  Pulse pulse=new Pulse();  TemporalNoiseShaping tns=sce.tns;  IndividualChannelStream ics=sce.ics;  float out[]=sce.coeffs;  boolean eldSyntax=ac.oc[1].m4ac.objectType == AOT_ER_AAC_ELD;  boolean erSyntax=ac.oc[1].m4ac.objectType == AOT_ER_AAC_LC || ac.oc[1].m4ac.objectType == AOT_ER_AAC_LTP || ac.oc[1].m4ac.objectType == AOT_ER_AAC_LD || ac.oc[1].m4ac.objectType == AOT_ER_AAC_ELD;  int globalGain=br.read(8);  if (!commonWindow && !scaleFlag) {    if (decodeIcsInfo(ics) < 0) {      return AAC_ERROR;    }  }  ret=decodeBandTypes(sce.bandType,sce.bandTypeRunEnd,ics);  if (ret < 0) {    return ret;  }  ret=decodeScalefactors(sce.sf,globalGain,ics,sce.bandType,sce.bandTypeRunEnd);  if (ret < 0) {    return ret;  }  boolean pulsePresent=false;  if (!scaleFlag) {    if (!eldSyntax && (pulsePresent=br.readBool())) {      if (ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) {        log.error(String.format("Pulse tool not allowed in eight short sequence"));        return AAC_ERROR;      }      if (decodePulses(pulse,ics.swbOffset,ics.numSwb) != 0) {        log.error(String.format("Pulse data corrupt or invalid"));        return AAC_ERROR;      }    }    tns.present=br.readBool();    if (tns.present && !erSyntax) {      if (decodeTns(tns,ics) < 0) {        return AAC_ERROR;      }    }    if (!eldSyntax && br.readBool()) {      return AAC_ERROR;    }    if (tns.present && erSyntax) {      if (decodeTns(tns,ics) < 0) {        return AAC_ERROR;      }    }  }  if (decodeSpectrumAndDequant(out,sce.sf,pulsePresent,pulse,ics,sce.bandType) < 0) {    return AAC_ERROR;  }  if (ac.oc[1].m4ac.objectType == AOT_AAC_MAIN && !commonWindow) {    applyPrediction(sce);  }  return 0;}  }
class C{  public boolean domainMatch(String host,String domain){  boolean match=host.equals(domain) || (domain.startsWith(".") && host.endsWith(domain));  return match;}  }
class C{  public static int longestPrefix(final String... strings){  return longestPrefix(0,strings);}  }
class C{  public void removeSimulationListener(MobsimListener listener){  if (listener instanceof MobsimInitializedListener) {    removeSimulationInitializedListener((MobsimInitializedListener)listener);  }  if (listener instanceof MobsimBeforeSimStepListener) {    removeSimulationBeforeSimStepListener((MobsimBeforeSimStepListener)listener);  }  if (listener instanceof MobsimAfterSimStepListener) {    removeSimulationAfterSimStepListener((MobsimAfterSimStepListener)listener);  }  if (listener instanceof MobsimBeforeCleanupListener) {    removeSimulationBeforeCleanupListener((MobsimBeforeCleanupListener)listener);  }}  }
class C{  public static boolean hasFunction(String name){  return s_functionTable.containsKey(name);}  }
class C{  public static void loadLibraryFromJar(String path) throws IOException {  if (!path.startsWith("/")) {    throw new IllegalArgumentException("The path has to be absolute (start with '/').");  }  String[] parts=path.split("/");  String filename=(parts.length > 1) ? parts[parts.length - 1] : null;  String prefix="";  String suffix=null;  if (filename != null) {    parts=filename.split("\\.",2);    prefix=parts[0];    suffix=(parts.length > 1) ? "." + parts[parts.length - 1] : null;  }  if (filename == null || prefix.length() < 3) {    throw new IllegalArgumentException("The filename has to be at least 3 characters long.");  }  File temp=File.createTempFile(prefix,suffix);  temp.deleteOnExit();  if (!temp.exists()) {    throw new FileNotFoundException("File " + temp.getAbsolutePath() + " does not exist.");  }  byte[] buffer=new byte[1024];  int readBytes;  InputStream is=NativeUtils.class.getResourceAsStream(path);  if (is == null) {    throw new FileNotFoundException("File " + path + " was not found inside JAR.");  }  OutputStream os=new FileOutputStream(temp);  try {    while ((readBytes=is.read(buffer)) != -1) {      os.write(buffer,0,readBytes);    }  }  finally {    os.close();    is.close();  }  System.load(temp.getAbsolutePath());}  }
class C{  private static void restart(){  onExit();  System.exit(0);}  }
class C{  public static double[] v3Combine(double[] a,double[] b,double aScale,double bScale){  return new double[]{aScale * a[0] + bScale * b[0],aScale * a[1] + bScale * b[1],aScale * a[2] + bScale * b[2]};}  }
class C{  public static Key<CommitLogCheckpoint> createKey(DateTime checkpointTime){  return Key.create(CommitLogCheckpointRoot.getKey(),CommitLogCheckpoint.class,checkpointTime.getMillis());}  }
class C{  private NullValue(){  super(ObjectReference.nullReference());}  }
class C{  public synchronized BasicNetwork clone(){  BasicNetwork clone=(BasicNetwork)super.clone();  clone.setVerticies(new HashSet<Vertex>(getVerticies()));  clone.setVerticiesById(new HashMap<Number,Vertex>(getVerticiesById()));  clone.setVerticiesByData(new HashMap<Object,Vertex>(getVerticiesByData()));  return clone;}  }
class C{  public boolean isCancel(){  return m_cancel;}  }
class C{  public GraphNode(String name){  setName(name);}  }
class C{  @Override protected void keyTyped(char par1,int par2){  proxyBox.textboxKeyTyped(par1,par2);  if (par2 == 28 || par2 == 156)   actionPerformed((GuiButton)buttonList.get(1));}  }
class C{  private void updateSyncState(){  boolean isSyncEnabled=AndroidSyncSettings.isSyncEnabled(getActivity());  mSyncSwitchPreference.setChecked(isSyncEnabled);  mSyncSwitchPreference.setEnabled(canDisableSync());  updateSyncStateFromSwitch();}  }
class C{  void removeMarkOccurrencesHighlight(Object tag){  removeListHighlight(markedOccurrences,tag);}  }
class C{  public Regression(Class<?> theClass){  if (theClass == null) {    throw new NullPointerException();  }  String relative=theClass.getName().replace('.',File.separatorChar) + FILE_EXTENSION;  m_RefFile=new File(getRoot(),relative);  m_Output=new StringBuffer();}  }
class C{  public boolean shouldBeConflated(){  return this.conflate;}  }
class C{  public static String toString(URI uri,String encoding) throws IOException {  return toString(uri,Charsets.toCharset(encoding));}  }
class C{  protected ExecutionError(@Nullable String message){  super(message);}  }
class C{  public RequestBuilder withTimeout(int timeout){  Preconditions.checkArgument(NumUtil.isIntBetween(timeout,Common.MIN_COMMAND_TIMEOUT_SEC,Common.MAX_COMMAND_TIMEOUT_SEC),String.format("Timeout is not in range %d to %d",Common.MIN_COMMAND_TIMEOUT_SEC,Common.MAX_COMMAND_TIMEOUT_SEC));  this.timeout=timeout;  return this;}  }
class C{  public boolean matchesExactly(Collection<Issue> issues,List<String> messages){  Collection<Issue> issueCopy=new LinkedList<>(issues);  Collection<IssueMatcher> matcherCopy=new LinkedList<>(issueMatchers);  performMatching(issueCopy,matcherCopy,messages);  if (inverted) {    if (issueCopy.isEmpty() && matcherCopy.isEmpty()) {      if (issueMatchers.isEmpty() && messages != null) {        messages.add("Expected issues, but got nothing");      } else {        explainIssues(issues,messages,inverted);        explainExpectations(issueMatchers,messages,inverted);      }      return false;    }  } else {    if (!issueCopy.isEmpty() || !matcherCopy.isEmpty()) {      explainIssues(issueCopy,messages,inverted);      explainExpectations(matcherCopy,messages,inverted);      return false;    }  }  return true;}  }
class C{  private void filter(int i,SentenceFilteredTrie trieNode,boolean lastWasNT){  if (i >= tokens.length)   return;  Trie unfilteredTrieNode=trieNode.unfilteredTrieNode;  if (unfilteredTrieNode.getChildren() == null) {    return;  }  Trie trie=unfilteredTrieNode.match(tokens[i]);  if (trie != null) {    SentenceFilteredTrie nextFilteredTrie=trieNode.match(tokens[i]);    if (nextFilteredTrie == null) {      nextFilteredTrie=new SentenceFilteredTrie(trie);      trieNode.children.put(tokens[i],nextFilteredTrie);    }    filter(i + 1,nextFilteredTrie,false);  }  HashMap<Integer,? extends Trie> children=unfilteredTrieNode.getChildren();  if (children != null) {    for (    int label : children.keySet()) {      if (label < 0) {        SentenceFilteredTrie nextFilteredTrie=trieNode.match(label);        if (nextFilteredTrie == null) {          nextFilteredTrie=new SentenceFilteredTrie(unfilteredTrieNode.match(label));          trieNode.children.put(label,nextFilteredTrie);        }        int maxJ=lastWasNT ? (i + 1) : tokens.length;        for (int j=i + 1; j <= maxJ; j++) {          filter(j,nextFilteredTrie,true);        }      }    }  }}  }
class C{  protected void respond(ClaimBuilder cb){  cb.put(KEY_TYPE,getType());}  }
class C{  public static QuarkMaterializeCluster create(RelOptPlannerHolder plannerHolder,RexBuilder rexBuilder){  return new QuarkMaterializeCluster(plannerHolder,rexBuilder.getTypeFactory(),rexBuilder,new AtomicInteger(0),new HashMap<String,RelNode>());}  }
class C{  public RSSEnclosure(String url,String type,String length){  this.setUrl(url);  this.setType(type);  this.setLength(length);}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  try {    ElemTemplateElement p=handler.getElemTemplateElement();    boolean excludeXSLDecl=false;    boolean isLREAsStyleSheet=false;    if (null == p) {      XSLTElementProcessor lreProcessor=handler.popProcessor();      XSLTElementProcessor stylesheetProcessor=handler.getProcessorFor(Constants.S_XSLNAMESPACEURL,"stylesheet","xsl:stylesheet");      handler.pushProcessor(lreProcessor);      Stylesheet stylesheet;      try {        stylesheet=getStylesheetRoot(handler);      } catch (      TransformerConfigurationException tfe) {        throw new TransformerException(tfe);      }      SAXSourceLocator slocator=new SAXSourceLocator();      Locator locator=handler.getLocator();      if (null != locator) {        slocator.setLineNumber(locator.getLineNumber());        slocator.setColumnNumber(locator.getColumnNumber());        slocator.setPublicId(locator.getPublicId());        slocator.setSystemId(locator.getSystemId());      }      stylesheet.setLocaterInfo(slocator);      stylesheet.setPrefixes(handler.getNamespaceSupport());      handler.pushStylesheet(stylesheet);      isLREAsStyleSheet=true;      AttributesImpl stylesheetAttrs=new AttributesImpl();      AttributesImpl lreAttrs=new AttributesImpl();      int n=attributes.getLength();      for (int i=0; i < n; i++) {        String attrLocalName=attributes.getLocalName(i);        String attrUri=attributes.getURI(i);        String value=attributes.getValue(i);        if ((null != attrUri) && attrUri.equals(Constants.S_XSLNAMESPACEURL)) {          stylesheetAttrs.addAttribute(null,attrLocalName,attrLocalName,attributes.getType(i),attributes.getValue(i));        } else         if ((attrLocalName.startsWith("xmlns:") || attrLocalName.equals("xmlns")) && value.equals(Constants.S_XSLNAMESPACEURL)) {        } else {          lreAttrs.addAttribute(attrUri,attrLocalName,attributes.getQName(i),attributes.getType(i),attributes.getValue(i));        }      }      attributes=lreAttrs;      try {        stylesheetProcessor.setPropertiesFromAttributes(handler,"stylesheet",stylesheetAttrs,stylesheet);      } catch (      Exception e) {        if (stylesheet.getDeclaredPrefixes() == null || !declaredXSLNS(stylesheet)) {          throw new org.xml.sax.SAXException(XSLMessages.createWarning(XSLTErrorResources.WG_OLD_XSLT_NS,null));        } else {          throw new org.xml.sax.SAXException(e);        }      }      handler.pushElemTemplateElement(stylesheet);      ElemTemplate template=new ElemTemplate();      if (slocator != null)       template.setLocaterInfo(slocator);      appendAndPush(handler,template);      XPath rootMatch=new XPath("/",stylesheet,stylesheet,XPath.MATCH,handler.getStylesheetProcessor().getErrorListener());      template.setMatch(rootMatch);      stylesheet.setTemplate(template);      p=handler.getElemTemplateElement();      excludeXSLDecl=true;    }    XSLTElementDef def=getElemDef();    Class classObject=def.getClassObject();    boolean isExtension=false;    boolean isComponentDecl=false;    boolean isUnknownTopLevel=false;    while (null != p) {      if (p instanceof ElemLiteralResult) {        ElemLiteralResult parentElem=(ElemLiteralResult)p;        isExtension=parentElem.containsExtensionElementURI(uri);      } else       if (p instanceof Stylesheet) {        Stylesheet parentElem=(Stylesheet)p;        isExtension=parentElem.containsExtensionElementURI(uri);        if ((false == isExtension) && (null != uri) && (uri.equals(Constants.S_BUILTIN_EXTENSIONS_URL) || uri.equals(Constants.S_BUILTIN_OLD_EXTENSIONS_URL))) {          isComponentDecl=true;        } else {          isUnknownTopLevel=true;        }      }      if (isExtension)       break;      p=p.getParentElem();    }    ElemTemplateElement elem=null;    try {      if (isExtension) {        elem=new ElemExtensionCall();      } else       if (isComponentDecl) {        elem=(ElemTemplateElement)classObject.newInstance();      } else       if (isUnknownTopLevel) {        elem=(ElemTemplateElement)classObject.newInstance();      } else {        elem=(ElemTemplateElement)classObject.newInstance();      }      elem.setDOMBackPointer(handler.getOriginatingNode());      elem.setLocaterInfo(handler.getLocator());      elem.setPrefixes(handler.getNamespaceSupport(),excludeXSLDecl);      if (elem instanceof ElemLiteralResult) {        ((ElemLiteralResult)elem).setNamespace(uri);        ((ElemLiteralResult)elem).setLocalName(localName);        ((ElemLiteralResult)elem).setRawName(rawName);        ((ElemLiteralResult)elem).setIsLiteralResultAsStylesheet(isLREAsStyleSheet);      }    } catch (    InstantiationException ie) {      handler.error(XSLTErrorResources.ER_FAILED_CREATING_ELEMLITRSLT,null,ie);    }catch (    IllegalAccessException iae) {      handler.error(XSLTErrorResources.ER_FAILED_CREATING_ELEMLITRSLT,null,iae);    }    setPropertiesFromAttributes(handler,rawName,attributes,elem);    if (!isExtension && (elem instanceof ElemLiteralResult)) {      isExtension=((ElemLiteralResult)elem).containsExtensionElementURI(uri);      if (isExtension) {        elem=new ElemExtensionCall();        elem.setLocaterInfo(handler.getLocator());        elem.setPrefixes(handler.getNamespaceSupport());        ((ElemLiteralResult)elem).setNamespace(uri);        ((ElemLiteralResult)elem).setLocalName(localName);        ((ElemLiteralResult)elem).setRawName(rawName);        setPropertiesFromAttributes(handler,rawName,attributes,elem);      }    }    appendAndPush(handler,elem);  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public static byte parseByte(CharSequence csq){  return parseByte(csq,10);}  }
class C{  public final void checkAssert(final QuadConsumer<A,B,C,D> property){  check(null);}  }
class C{  @Override public String toString(){  return String.valueOf(value);}  }
class C{  public Vector3d mulTranspose(Matrix3dc mat){  return mul(mat,this);}  }
class C{  public PersonalityInsights(final String versionDate,String username,String password){  this(versionDate);  setUsernameAndPassword(username,password);}  }
class C{  public ArrayLongCompressed(long[] longs,int offset,int length){  long mask=0x0;  for (int i=0; i < length; i++) {    mask|=longs[offset + i];  }  int leadingClearBits=0;  int trailingClearBits=0;  while (((mask & (1 << (BIT_LENGTH - leadingClearBits - 1))) == 0) && (leadingClearBits < BIT_LENGTH)) {    leadingClearBits++;  }  while (((mask & (1 << trailingClearBits)) == 0) && (trailingClearBits < (BIT_LENGTH - leadingClearBits))) {    trailingClearBits++;  }  init(length,BIT_LENGTH - leadingClearBits - trailingClearBits,trailingClearBits);  for (int i=0; i < length; i++) {    set(i,longs[offset + i]);  }}  }
class C{  private int findProductRow(int M_Product_ID){  DefaultTableModel model=(DefaultTableModel)dialog.getMiniTable().getModel();  KeyNamePair kp;  for (int i=0; i < model.getRowCount(); i++) {    kp=(KeyNamePair)model.getValueAt(i,4);    if (kp.getKey() == M_Product_ID) {      return (i);    }  }  return (-1);}  }
class C{  public static void UF10(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  int count3=0;  double sum1=0.0;  double sum2=0.0;  double sum3=0.0;  double yj;  double hj;  for (int j=3; j <= nx; j++) {    yj=x[j - 1] - 2.0 * x[1] * Math.sin(2.0 * PI * x[0] + j * PI / nx);    hj=4.0 * yj * yj - Math.cos(8.0 * PI * yj) + 1.0;    if (j % 3 == 1) {      sum1+=hj;      count1++;    } else     if (j % 3 == 2) {      sum2+=hj;      count2++;    } else {      sum3+=hj;      count3++;    }  }  f[0]=Math.cos(0.5 * PI * x[0]) * Math.cos(0.5 * PI * x[1]) + 2.0 * sum1 / (double)count1;  f[1]=Math.cos(0.5 * PI * x[0]) * Math.sin(0.5 * PI * x[1]) + 2.0 * sum2 / (double)count2;  f[2]=Math.sin(0.5 * PI * x[0]) + 2.0 * sum3 / (double)count3;}  }
class C{  @Override public void introspect(ContextH3 context){  if (_infoRef.get() != null) {    return;  }  FieldInfoH3[] fieldInfo=new FieldInfoH3[1];  fieldInfo[0]=new FieldInfoH3("ordinal");  ClassInfoH3 classInfo=new ClassInfoH3(_type.getName(),ClassTypeH3.ENUM,fieldInfo,_sequence);  _infoRef.compareAndSet(null,classInfo);}  }
class C{  private static boolean overflowInParse(long current,int digit,int radix){  if (current >= 0) {    if (current < maxValueDivs[radix]) {      return false;    }    if (current > maxValueDivs[radix]) {      return true;    }    return (digit > maxValueMods[radix]);  }  return true;}  }
class C{  public int maxReceiver(){  List<Element> kids=root.getChildren("receiver");  int max=-1;  for (int i=0; i < kids.size(); i++) {    Attribute a=kids.get(i).getAttribute("number");    if (a == null) {      continue;    }    int n=-1;    try {      n=a.getIntValue();    } catch (    org.jdom2.DataConversionException e) {      log.error("in maxReceiver",e);    }    max=Math.max(max,n);  }  return max;}  }
class C{  public void addChild(FXGNode child){  if (content == null) {    if (child instanceof CDATANode && TextHelper.ignorableWhitespace(((CDATANode)child).content)) {      return;    }  } else {    super.addChild(child);  }}  }
class C{  public BufferedDocumentScanner(int size){  Assert.isTrue(size >= 1);  fBuffer=new char[size];}  }
class C{  private static void createParents(File file){  FileMisc.mkdirs(file.getParentFile());}  }
class C{  public NotificationChain basicSetCatchVariable(CatchVariable newCatchVariable,NotificationChain msgs){  CatchVariable oldCatchVariable=catchVariable;  catchVariable=newCatchVariable;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.CATCH_BLOCK__CATCH_VARIABLE,oldCatchVariable,newCatchVariable);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void importLegacySettings(){}  }
class C{  public EmbeddedJMSResource(){  this(false);}  }
class C{  public void update(final long item,final long count){  if (count == 0)   return;  if (count < 0) {    throw new SketchesArgumentException("Count may not be negative");  }  this.streamLength+=count;  hashMap.adjustOrPutValue(item,count);  if (getNumActiveItems() > curMapCap) {    if (hashMap.getLgLength() < lgMaxMapSize) {      hashMap.resize(2 * hashMap.getLength());      curMapCap=hashMap.getCapacity();    } else {      offset+=hashMap.purge(sampleSize);      if (getNumActiveItems() > getMaximumMapCapacity()) {        throw new SketchesStateException("Purge did not reduce active items.");      }    }  }}  }
class C{  public long numCqsCreated(){  return this.cqService.getCqServiceVsdStats().getNumCqsCreated();}  }
class C{  public DdlException(){  super();}  }
class C{  public ArrayIndexOutOfBoundsException(int sourceLength,int index){  super("length=" + sourceLength + "; index="+ index);}  }
class C{  public StackScroller(Context context){  mFlywheel=true;  mScrollerX=new SplineStackScroller(context);  mScrollerY=new SplineStackScroller(context);  initContants();}  }
class C{  public void requestUpdateFromLayout(){}  }
class C{  public FileEntry(BaseEntry sourceEntry){  super(sourceEntry);}  }
class C{  public boolean isResetValues(){  Boolean result=(Boolean)eval(RESET_VALUES,resetValues);  return ((result != null) ? result : false);}  }
class C{  @Override protected void verifyMatch(Object target,Object deserialized){  CronTriggerImpl targetCronTrigger=(CronTriggerImpl)target;  CronTriggerImpl deserializedCronTrigger=(CronTriggerImpl)deserialized;  assertNotNull(deserializedCronTrigger);  assertEquals(targetCronTrigger.getName(),deserializedCronTrigger.getName());  assertEquals(targetCronTrigger.getGroup(),deserializedCronTrigger.getGroup());  assertEquals(targetCronTrigger.getJobName(),deserializedCronTrigger.getJobName());  assertEquals(targetCronTrigger.getJobGroup(),deserializedCronTrigger.getJobGroup());  assertEquals(targetCronTrigger.getEndTime(),deserializedCronTrigger.getEndTime());  assertEquals(targetCronTrigger.getCalendarName(),deserializedCronTrigger.getCalendarName());  assertEquals(targetCronTrigger.getDescription(),deserializedCronTrigger.getDescription());  assertEquals(targetCronTrigger.getJobDataMap(),deserializedCronTrigger.getJobDataMap());  assertEquals(targetCronTrigger.getCronExpression(),deserializedCronTrigger.getCronExpression());}  }
class C{  private void tokenize(InputSource is) throws SAXException, IOException, MalformedURLException {  if (is == null) {    throw new IllegalArgumentException("Null input.");  }  if (is.getByteStream() == null && is.getCharacterStream() == null) {    String systemId=is.getSystemId();    if (systemId == null) {      throw new IllegalArgumentException("No byte stream, no character stream nor URI.");    }    if (entityResolver != null) {      is=entityResolver.resolveEntity(is.getPublicId(),systemId);    }    if (is.getByteStream() == null || is.getCharacterStream() == null) {      is=new InputSource();      is.setSystemId(systemId);      is.setByteStream(new URL(systemId).openStream());    }  }  tokenizer.tokenize(is);}  }
class C{  @Override public void processingInstruction(String target,String data) throws SAXException {  writeText4Links();  write("<?");  write(target);  write(' ');  write(data);  write("?>");  if (elementLevel < 1) {    write('\n');  }  super.processingInstruction(target,data);}  }
class C{  public double kineticEnergy(){  return 0.5 * mass * (vx * vx + vy * vy);}  }
class C{  public void close() throws IOException {  _stream.close();}  }
class C{  public Class toClass(ClassLoader loader,ProtectionDomain domain) throws CannotCompileException {  ClassPool cp=getClassPool();  if (loader == null)   loader=cp.getClassLoader();  return cp.toClass(this,loader,domain);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public RangeCategorySeries(String title){  super(title);}  }
class C{  public Clustering<DendrogramModel> extractClusters(DBIDs ids,final DBIDDataStore pi,final DoubleDataStore lambda){  FiniteProgress progress=LOG.isVerbose() ? new FiniteProgress("Extracting clusters",ids.size(),LOG) : null;  ArrayDBIDs order=PointerHierarchyRepresentationResult.topologicalSort(ids,pi,lambda);  DBIDArrayIter it=order.iter();  final int split=findSplit(order,it,lambda);  final int expcnum=ids.size() - split;  WritableIntegerDataStore cluster_map=DataStoreUtil.makeIntegerStorage(ids,DataStoreFactory.HINT_TEMP,-1);  ArrayList<ModifiableDBIDs> cluster_dbids=new ArrayList<>(expcnum + 10);  DoubleArray cluster_dist=new DoubleArray(expcnum + 10);  ArrayModifiableDBIDs cluster_leads=DBIDUtil.newArray(expcnum + 10);  DBIDVar succ=DBIDUtil.newVar();  for (it.seek(split - 1); it.valid(); it.retract()) {    double dist=lambda.doubleValue(it);    pi.assignVar(it,succ);    int clusterid=cluster_map.intValue(succ);    if (clusterid >= 0) {      cluster_dbids.get(clusterid).add(it);      cluster_map.putInt(it,clusterid);      if (cluster_dist.get(clusterid) < dist) {        cluster_dist.set(clusterid,dist);      }    } else {      clusterid=cluster_dbids.size();      ModifiableDBIDs cids=DBIDUtil.newArray();      cids.add(succ);      cluster_map.putInt(succ,clusterid);      cids.add(it);      cluster_map.putInt(it,clusterid);      cluster_dbids.add(cids);      cluster_leads.add(succ);      cluster_dist.add(dist);    }    LOG.incrementProcessed(progress);  }  final Clustering<DendrogramModel> dendrogram;  if (hierarchical) {    dendrogram=new Clustering<>("Hierarchical Clustering","hierarchical-clustering");    Cluster<DendrogramModel> root=null;    ArrayList<Cluster<DendrogramModel>> clusters=new ArrayList<>(expcnum);{      int i=0;      for (DBIDIter it2=cluster_leads.iter(); it2.valid(); it2.advance(), i++) {        double depth=cluster_dist.get(i);        clusters.add(makeCluster(it2,depth,cluster_dbids.get(i)));      }      cluster_dist=null;      cluster_dbids=null;    }    for (it.seek(split); it.valid(); it.advance()) {      int clusterid=cluster_map.intValue(it);      final Cluster<DendrogramModel> clus;      if (clusterid >= 0) {        clus=clusters.get(clusterid);      } else       if (nosingletons && ids.size() > 1) {        clus=null;      } else {        clus=makeCluster(it,Double.NaN,DBIDUtil.deref(it));      }      pi.assignVar(it,succ);      if (DBIDUtil.equal(it,succ)) {        assert (root == null);        root=clus;        LOG.incrementProcessed(progress);        continue;      }      int parentid=cluster_map.intValue(succ);      double depth=lambda.doubleValue(it);      if (parentid >= 0) {        final Cluster<DendrogramModel> pclus=clusters.get(parentid);        if (pclus.getModel().getDistance() == depth) {          if (clus == null) {            ((ModifiableDBIDs)pclus.getIDs()).add(it);          } else {            dendrogram.addChildCluster(pclus,clus);          }        } else {          ModifiableDBIDs cids=DBIDUtil.newArray(clus == null ? 1 : 0);          if (clus == null) {            cids.add(it);          }          Cluster<DendrogramModel> npclus=makeCluster(succ,depth,cids);          if (clus != null) {            dendrogram.addChildCluster(npclus,clus);          }          dendrogram.addChildCluster(npclus,pclus);          clusters.set(parentid,npclus);        }      } else {        final Cluster<DendrogramModel> pclus;        if (nosingletons) {          ModifiableDBIDs cids=DBIDUtil.newArray(clus == null ? 2 : 1);          cids.add(succ);          if (clus == null) {            cids.add(it);          }          pclus=makeCluster(succ,depth,cids);        } else {          pclus=makeCluster(succ,depth,DBIDUtil.EMPTYDBIDS);          dendrogram.addChildCluster(pclus,makeCluster(succ,Double.NaN,DBIDUtil.deref(succ)));        }        if (clus != null) {          dendrogram.addChildCluster(pclus,clus);        }        parentid=clusters.size();        clusters.add(pclus);        cluster_map.putInt(succ,parentid);      }      LOG.incrementProcessed(progress);    }    assert (root != null);    dendrogram.addToplevelCluster(root);  } else {    dendrogram=new Clustering<>("Flattened Hierarchical Clustering","flattened-hierarchical-clustering");{      int i=0;      for (DBIDIter it2=cluster_leads.iter(); it2.valid(); it2.advance(), i++) {        double depth=cluster_dist.get(i);        dendrogram.addToplevelCluster(makeCluster(it2,depth,cluster_dbids.get(i)));      }      cluster_dist=null;    }    if (nosingletons) {      for (it.seek(split); it.valid(); it.advance()) {        int parentid=cluster_map.intValue(succ);        if (parentid >= 0) {          cluster_dbids.get(parentid).add(it);          cluster_map.put(it,parentid);        }      }    }    for (it.seek(split); it.valid(); it.advance()) {      int clusterid=cluster_map.intValue(it);      if (clusterid < 0) {        dendrogram.addToplevelCluster(makeCluster(it,Double.NaN,DBIDUtil.deref(it)));      }      LOG.incrementProcessed(progress);    }    cluster_dbids=null;  }  LOG.ensureCompleted(progress);  return dendrogram;}  }
class C{  private static void decodeAnsiX12Segment(BitSource bits,StringBuilder result) throws FormatException {  int[] cValues=new int[3];  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];      if (cValue == 0) {        result.append('\r');      } else       if (cValue == 1) {        result.append('*');      } else       if (cValue == 2) {        result.append('>');      } else       if (cValue == 3) {        result.append(' ');      } else       if (cValue < 14) {        result.append((char)(cValue + 44));      } else       if (cValue < 40) {        result.append((char)(cValue + 51));      } else {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);}  }
class C{  public Collection<LocalCandidate> harvest(Component component){  if (getMask() == null || getFace() == null)   return null;  Collection<LocalCandidate> candidates=new HashSet<>();  for (  Candidate<?> cand : component.getLocalCandidates()) {    if (!(cand instanceof HostCandidate) || !cand.getTransportAddress().getHostAddress().equals(getFace().getHostAddress()) || cand.getTransport() != getFace().getTransport()) {      continue;    }    HostCandidate hostCandidate=(HostCandidate)cand;    TransportAddress mappedAddress=new TransportAddress(getMask().getHostAddress(),hostCandidate.getHostAddress().getPort(),hostCandidate.getHostAddress().getTransport());    ServerReflexiveCandidate mappedCandidate=new ServerReflexiveCandidate(mappedAddress,hostCandidate,hostCandidate.getStunServerAddress(),CandidateExtendedType.STATICALLY_MAPPED_CANDIDATE);    if (hostCandidate.isSSL())     mappedCandidate.setSSL(true);    if (!candidates.contains(mappedCandidate) && component.addLocalCandidate(mappedCandidate)) {      candidates.add(mappedCandidate);    }  }  return candidates;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.434 -0500",hash_original_method="11AFF6C7676FEB0968CBC8B8BF9C6A52",hash_generated_method="506047B26931C7FFF38435DA1DD16290") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public synchronized void write(byte buffer[]) throws IOException {  write(buffer,0,buffer.length);}  }
class C{  private void parseAdtsHeader(){  adtsScratch.setPosition(0);  if (!hasOutputFormat) {    int audioObjectType=adtsScratch.readBits(2) + 1;    if (audioObjectType != 2) {      Log.w(TAG,"Detected audio object type: " + audioObjectType + ", but assuming AAC LC.");      audioObjectType=2;    }    int sampleRateIndex=adtsScratch.readBits(4);    adtsScratch.skipBits(1);    int channelConfig=adtsScratch.readBits(3);    byte[] audioSpecificConfig=CodecSpecificDataUtil.buildAacAudioSpecificConfig(audioObjectType,sampleRateIndex,channelConfig);    Pair<Integer,Integer> audioParams=CodecSpecificDataUtil.parseAacAudioSpecificConfig(audioSpecificConfig);    MediaFormat mediaFormat=MediaFormat.createAudioFormat(null,MimeTypes.AUDIO_AAC,MediaFormat.NO_VALUE,MediaFormat.NO_VALUE,C.UNKNOWN_TIME_US,audioParams.second,audioParams.first,Collections.singletonList(audioSpecificConfig),null);    sampleDurationUs=(C.MICROS_PER_SECOND * 1024) / mediaFormat.sampleRate;    output.format(mediaFormat);    hasOutputFormat=true;  } else {    adtsScratch.skipBits(10);  }  adtsScratch.skipBits(4);  int sampleSize=adtsScratch.readBits(13) - 2 - HEADER_SIZE;  if (hasCrc) {    sampleSize-=CRC_SIZE;  }  setReadingSampleState(output,sampleDurationUs,0,sampleSize);}  }
class C{  public String toStringHeader(){  return new ResultMatrixPlainText(this).toStringHeader();}  }
class C{  public ElasticSearchTransportClient(Client client,ElasticSearchEventSerializer serializer){  this.client=client;  this.serializer=serializer;}  }
class C{  public void updateTime(int columnIndex,java.sql.Time x) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateTime(columnIndex,x);}  }
class C{  public Drawable loadIcon(PackageManager pm){  return mService.loadIcon(pm);}  }
class C{  private void execute(TriggerProcess triggerProcess) throws SaaSApplicationException {  SaaSSystemException se;switch (triggerProcess.getTriggerDefinition().getType()) {case REGISTER_CUSTOMER_FOR_SUPPLIER:    accLocal.registerKnownCustomerInt(triggerProcess);  break;case SAVE_PAYMENT_CONFIGURATION:accLocal.savePaymentConfigurationInt(triggerProcess);break;case START_BILLING_RUN:se=new SaaSSystemException("Nothing to execute for TriggerType '" + TriggerType.START_BILLING_RUN + "'");logger.logError(Log4jLogger.SYSTEM_LOG,se,LogMessageIdentifier.ERROR_NO_EXECUTION_FOR_THE_TRIGGER_TYPE,String.valueOf(TriggerType.START_BILLING_RUN));throw se;case ACTIVATE_SERVICE:srvProvLocal.activateServiceInt(triggerProcess);break;case DEACTIVATE_SERVICE:srvProvLocal.deactivateServiceInt(triggerProcess);break;case SUBSCRIBE_TO_SERVICE:subLocal.subscribeToServiceInt(triggerProcess);break;case UNSUBSCRIBE_FROM_SERVICE:subLocal.unsubscribeFromServiceInt(triggerProcess);break;case MODIFY_SUBSCRIPTION:subLocal.modifySubscriptionInt(triggerProcess);break;case UPGRADE_SUBSCRIPTION:subLocal.upgradeSubscriptionInt(triggerProcess);break;case ADD_REVOKE_USER:subLocal.addRevokeUserInt(triggerProcess);break;case REGISTER_OWN_USER:idLocal.createUserInt(triggerProcess);break;default :se=new SaaSSystemException("Unhandled TriggerType '" + triggerProcess.getTriggerDefinition().getType() + "'");logger.logError(Log4jLogger.SYSTEM_LOG,se,LogMessageIdentifier.ERROR_UNHANDLED_TRIGGER_TYPE,String.valueOf(triggerProcess.getTriggerDefinition().getType()));throw se;}}  }
class C{  @Override public int hashCode(){  if (wifiP2pDevice == null) {    return 0;  }  return wifiP2pDevice.hashCode();}  }
class C{  protected static void remoteDestroy(String regionName,String entryName) throws CacheException {  Region root=getRootRegion();  Region region=root.getSubregion(regionName);  Region sub=region.getSubregion(entryName);  if (sub == null) {    String s="Entry \"" + entryName + "\" does not exist";    throw new EntryNotFoundException(s);  }  assertNotNull(sub.getEntry(entryName));  sub.destroy(entryName);  assertNull(sub.getEntry(entryName));}  }
class C{  protected static void overrideDefaultProperties(@NotNull String localConfDir){  Path confDirPath=Paths.get(localConfDir);  if (exists(confDirPath)) {    try (DirectoryStream<Path> stream=newDirectoryStream(confDirPath)){      for (      Path entry : stream) {        if (!Files.isDirectory(entry)) {          if (entry.toString().endsWith(".properties")) {            try (InputStream in=newInputStream(entry)){              doBindFileProperties(in);            }           }        }      }    } catch (    IOException e) {      throw new IllegalStateException("Can't load properties",e);    }  }}  }
class C{  public boolean isSaveStreams(){  return saveStreams;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static <I,A>Parser<I,A> label(Parser<I,A> p,String name){  return null;}  }
class C{  public FirstFitLocalCombiningAllocator(SsaMethod ssaMeth,InterferenceGraph interference,boolean minimizeRegisters){  super(ssaMeth,interference);  ssaRegsMapped=new BitSet(ssaMeth.getRegCount());  mapper=new InterferenceRegisterMapper(interference,ssaMeth.getRegCount());  this.minimizeRegisters=minimizeRegisters;  paramRangeEnd=ssaMeth.getParamWidth();  reservedRopRegs=new BitSet(paramRangeEnd * 2);  reservedRopRegs.set(0,paramRangeEnd);  usedRopRegs=new BitSet(paramRangeEnd * 2);  localVariables=new TreeMap<LocalItem,ArrayList<RegisterSpec>>();  moveResultPseudoInsns=new ArrayList<NormalSsaInsn>();  invokeRangeInsns=new ArrayList<NormalSsaInsn>();  phiInsns=new ArrayList<PhiInsn>();}  }
class C{  public ResultSetImpl(long updateCount,long updateID,MySQLConnection conn,StatementImpl creatorStmt){  this.updateCount=updateCount;  this.updateId=updateID;  this.reallyResult=false;  this.fields=new Field[0];  this.connection=conn;  this.owningStatement=creatorStmt;  this.retainOwningStatement=false;  if (this.connection != null) {    this.exceptionInterceptor=this.connection.getExceptionInterceptor();    this.retainOwningStatement=this.connection.getRetainStatementAfterResultSetClose();    this.connectionId=this.connection.getId();    this.serverTimeZoneTz=this.connection.getServerTimezoneTZ();    this.padCharsWithSpace=this.connection.getPadCharsWithSpace();    this.useLegacyDatetimeCode=this.connection.getUseLegacyDatetimeCode();  }}  }
class C{  @Override public final boolean printingEnabled(OptOptions options,boolean before){  return false;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int a;  int i;  float progress=0;  int range;  boolean blnTextOutput=false;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      blnTextOutput=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    int minVal=(int)image.getMinimumValue();    int maxVal=(int)image.getMaximumValue();    range=maxVal - minVal;    long[] totalColumns=new long[range + 1];    long[] totalRows=new long[range + 1];    long[] totalN=new long[range + 1];    double[] data=null;    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)data[col] - minVal;          totalColumns[a]+=col;          totalRows[a]+=row;          totalN[a]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress((int)progress);    }    for (a=0; a <= range; a++) {      if (totalN[a] > 0) {        col=(int)(totalColumns[a] / totalN[a]);        row=(int)(totalRows[a] / totalN[a]);        output.setValue(row,col,a + minVal);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    if (blnTextOutput) {      String retstr="Patch Centroid\nPatch ID\tColumn\tRow";      for (a=0; a <= range; a++) {        if (totalN[a] > 0) {          retstr=retstr + "\n" + (a + minVal)+ "\t"+ ((float)totalColumns[a] / totalN[a])+ "\t"+ ((float)totalRows[a] / totalN[a]);        }      }      returnData(retstr);    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void putValue(String name,Object value){  if (name == null || value == null) {    throw new IllegalArgumentException("name == null || value == null");  }  Object old=values.put(name,value);  if (value instanceof SSLSessionBindingListener) {    ((SSLSessionBindingListener)value).valueBound(new SSLSessionBindingEvent(this,name));  }  if (old instanceof SSLSessionBindingListener) {    ((SSLSessionBindingListener)old).valueUnbound(new SSLSessionBindingEvent(this,name));  }}  }
class C{  private void init(){  mShadowColor=Color.BLACK;  shadowColor=ColorUtils.getNewColorAlpha(mShadowColor,MIN_SHADOW_ALPHA);  elevation=DEFAULT_ELEVATION;  mShadowAlpha=(MAX_SHADOW_ALPHA - MIN_SHADOW_ALPHA) * (elevation / MAX_ELEVATION) + MAX_SHADOW_ALPHA;  mShadowRadius=(maxShadowSize - minShawdowSize) * (elevation / MAX_ELEVATION) + minShawdowSize;  mShadowOffset=(maxShadowOffset - minShadowOffset) * (elevation / MAX_ELEVATION) + minShadowOffset;  shadowColor=ColorUtils.getNewColorAlpha(mShadowColor,mShadowAlpha);  mView.addOnAttachStateChangeListener(stateChangeListener);  isFlat=false;}  }
class C{  private void ensureSize(int minsize){  if (minsize <= store.length) {    return;  }  int asize=store.length;  while (asize < minsize) {    asize=(asize >>> 1) + asize;  }  final int[] prev=store;  store=new int[asize];  System.arraycopy(prev,0,store,0,size);}  }
class C{  public static boolean pendingAddSelected(final ISelection selection){  final AdaptedSelectionInfo selectionInfo=ActionHelpers.adaptSelectionToStandardResources(selection,ResourceFilters.LINKED_RESOURCES_FILTER,false);  if (selectionInfo == null || selectionInfo.getRepositories() == null || selectionInfo.getRepositories().length == 0) {    return false;  }  final TFSRepository repository=selectionInfo.getRepositories()[0];  final String path=getFirstSelectedPath(selection);  if (path == null || repository == null) {    return false;  } else {    return PendingChangesHelpers.isPendingAdd(repository,path);  }}  }
class C{  public void testConvertEscape() throws Exception {  assertEquals(this.conn.nativeSQL("{fn convert(abcd, SQL_INTEGER)}"),this.conn.nativeSQL("{fn convert(abcd, INTEGER)}"));}  }
class C{  public void rollLeft(){  if (DEBUG) {    Debug.output("Rolling left");  }  doRotateZ(getRollLeftAmount());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:47.302 -0400",hash_original_method="3CFB904866B3259764C1179843D2440E",hash_generated_method="B0184391B61883391B71DEB8F787FC1E") private static boolean isDirectory(URL url){  String file=url.getFile();  return (file.length() > 0 && file.charAt(file.length() - 1) == '/');}  }
class C{  private String indent(int index){  if (indent > 0) {    String text=cache.get(index);    if (text == null) {      text=create();      cache.set(index,text);    }    if (cache.size() > 0) {      return text;    }  }  return "";}  }
class C{  private void generateMethodInfos(IType type,IBinaryType typeInfo,HashMap newElements,ArrayList childrenHandles,ArrayList typeParameterHandles){  IBinaryMethod[] methods=typeInfo.getMethods();  if (methods == null) {    return;  }  for (int i=0, methodCount=methods.length; i < methodCount; i++) {    IBinaryMethod methodInfo=methods[i];    final boolean isConstructor=methodInfo.isConstructor();    boolean isEnum=false;    try {      isEnum=type.isEnum();    } catch (    JavaModelException e) {    }    boolean useGenericSignature=true;    char[] signature=methodInfo.getGenericSignature();    String[] pNames=null;    if (signature == null) {      useGenericSignature=false;      signature=methodInfo.getMethodDescriptor();      if (isEnum && isConstructor) {        pNames=Signature.getParameterTypes(new String(signature));        int length=pNames.length - 2;        if (length >= 0)         System.arraycopy(pNames,2,pNames=new String[length],0,length);      }    }    String selector=new String(methodInfo.getSelector());    if (isConstructor) {      selector=type.getElementName();    }    try {      if (!(isEnum && isConstructor && !useGenericSignature)) {        pNames=Signature.getParameterTypes(new String(signature));      }      if (isConstructor && useGenericSignature && type.isMember()&& !Flags.isStatic(type.getFlags())) {        int length=pNames.length;        System.arraycopy(pNames,0,(pNames=new String[length + 1]),1,length);        char[] descriptor=methodInfo.getMethodDescriptor();        final String[] parameterTypes=Signature.getParameterTypes(new String(descriptor));        pNames[0]=parameterTypes[0];      }    } catch (    IllegalArgumentException e) {      signature=methodInfo.getMethodDescriptor();      pNames=Signature.getParameterTypes(new String(signature));    }catch (    JavaModelException e) {      signature=methodInfo.getMethodDescriptor();      pNames=Signature.getParameterTypes(new String(signature));    }    char[][] paramNames=new char[pNames.length][];    for (int j=0; j < pNames.length; j++) {      paramNames[j]=pNames[j].toCharArray();    }    char[][] parameterTypes=ClassFile.translatedNames(paramNames);    JavaModelManager manager=((JavaElement)type).manager;    selector=manager.intern(selector);    for (int j=0; j < pNames.length; j++) {      pNames[j]=manager.intern(new String(parameterTypes[j]));    }    BinaryMethod method=new BinaryMethod((JavaElement)type,manager,selector,pNames);    childrenHandles.add(method);    while (newElements.containsKey(method))     method.occurrenceCount++;    newElements.put(method,methodInfo);    int max=pNames.length;    char[][] argumentNames=methodInfo.getArgumentNames();    if (argumentNames == null || argumentNames.length < max) {      argumentNames=new char[max][];      for (int j=0; j < max; j++) {        argumentNames[j]=("arg" + j).toCharArray();      }    }    int startIndex=0;    try {      if (isConstructor) {        if (isEnum) {          startIndex=2;        } else         if (type.isMember() && !Flags.isStatic(type.getFlags())) {          startIndex=1;        }      }    } catch (    JavaModelException e) {    }    generateTypeParameterInfos(method,signature,newElements,typeParameterHandles);    generateAnnotationsInfos(method,methodInfo.getAnnotations(),methodInfo.getTagBits(),newElements);    Object defaultValue=methodInfo.getDefaultValue();    if (defaultValue instanceof IBinaryAnnotation) {      generateAnnotationInfo(method,newElements,(IBinaryAnnotation)defaultValue,new String(methodInfo.getSelector()));    }  }}  }
class C{  public SmsDcs(byte dcs){  dcs_=dcs;}  }
class C{  public boolean removeThread(Thread thread){synchronized (this) {    return this.participatingThreads.remove(thread);  }}  }
class C{  public boolean completeWrite(){  int digest=(int)_crc.getValue();  byte[] headerBuffer=_headerBuffer;  BitsUtil.writeInt16(headerBuffer,0,0);  BitsUtil.writeInt(headerBuffer,2,digest);  writeImpl(headerBuffer,0,6);  return true;}  }
class C{  @Override public void onUpdate(final ItemStack stack,final World worldIn,final Entity entity,final int itemSlot,final boolean isSelected){  if (!worldIn.isRemote && entity instanceof EntityLivingBase && hasReplacedArmour(stack)) {    final EntityInventoryType successfulInventoryType=InventoryUtils.forEachEntityInventory(entity,null,EntityInventoryType.MAIN,EntityInventoryType.HAND);    if (successfulInventoryType != null) {      Logger.info("Restored saved armour for slot %d of %s's %s inventory",itemSlot,entity.getName(),successfulInventoryType);    }  }}  }
class C{  public static void writeConfigFile(String fileName) throws SQLException, IOException {  List<Class<?>> classList=new ArrayList<Class<?>>();  findAnnotatedClasses(classList,new File("."),0);  writeConfigFile(fileName,classList.toArray(new Class[classList.size()]));}  }
class C{  public String toStringCR(){  StringBuffer retStr=new StringBuffer();  if (isAddressLinesReverse()) {    retStr.append(parseCRP(getCountry()));    if (getAddress4() != null && getAddress4().length() > 0)     retStr.append("\n").append(getAddress4());    if (getAddress3() != null && getAddress3().length() > 0)     retStr.append("\n").append(getAddress3());    if (getAddress2() != null && getAddress2().length() > 0)     retStr.append("\n").append(getAddress2());    if (getAddress1() != null)     retStr.append("\n").append(getAddress1());  } else {    if (getAddress1() != null)     retStr.append(getAddress1());    if (getAddress2() != null && getAddress2().length() > 0)     retStr.append("\n").append(getAddress2());    if (getAddress3() != null && getAddress3().length() > 0)     retStr.append("\n").append(getAddress3());    if (getAddress4() != null && getAddress4().length() > 0)     retStr.append("\n").append(getAddress4());    retStr.append("\n").append(parseCRP(getCountry()));  }  return retStr.toString();}  }
class C{  public void execute(T context){  if (context == null) {    throw new IllegalArgumentException("context is null");  }  activityRef=new WeakReference<>(context);  permissiveHandler.enqueueAction(this);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static int[] sort(double[] array){  int[] index=initialIndex(array.length);  if (array.length > 1) {    array=array.clone();    replaceMissingWithMAX_VALUE(array);    quickSort(array,index,0,array.length - 1);  }  return index;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:47.389 -0500",hash_original_method="B22A6A9FCAC23A7432F783A7943584BE",hash_generated_method="1C3883CD016118ED827CE462FA5E440B") public static void remove(Activity activity){  FragmentManager manager=activity.getFragmentManager();  Fragment fragment=manager.findFragmentByTag(FRAGMENT_TAG);  if (fragment != null) {    manager.beginTransaction().remove(fragment).commitAllowingStateLoss();  }}  }
class C{  @Override protected void doPost(SlingHttpServletRequest request,SlingHttpServletResponse response) throws ServletException, IOException {  ResourceResolver resolver=request.getResourceResolver();  Session session=resolver.adaptTo(Session.class);  final String title=request.getParameter("title");  final String description=request.getParameter("description");  final String content=request.getParameter("content");  final String url=request.getParameter("url");  final boolean visible=Boolean.parseBoolean(request.getParameter("visible"));  final String[] keywords=request.getParameterValues("keywords");  final long month=Long.parseLong(request.getParameter("month"));  final long year=Long.parseLong(request.getParameter("year"));  final String path=String.format(BLOG_PATH,year,month);  final String blogPath=PublickConstants.BLOG_PATH + path + "/"+ url;  String image=fileUploadService.uploadFile(request,PublickConstants.IMAGE_PATH);  Resource existingNode=resolver.getResource(blogPath);  if (image == null && existingNode != null) {    image=existingNode.adaptTo(ValueMap.class).get("image",String.class);  }  Map<String,Object> properties=new HashMap<String,Object>();  properties.put(JcrConstants.JCR_PRIMARYTYPE,PublickConstants.NODE_TYPE_PAGE);  properties.put(JcrResourceConstants.SLING_RESOURCE_TYPE_PROPERTY,PublickConstants.PAGE_TYPE_BLOG);  properties.put("title",title);  properties.put("visible",visible);  properties.put("content",content);  properties.put("description",description);  properties.put("month",month);  properties.put("year",year);  if (image != null) {    properties.put("image",image);  }  if (keywords != null) {    properties.put("keywords",keywords);  }  try {    UserManager userManager=((JackrabbitSession)session).getUserManager();    Authorizable auth=userManager.getAuthorizable(session.getUserID());    properties.put("author",auth.getID());  } catch (  RepositoryException e) {    LOGGER.error("Could not get user.",e);  }  try {    if (existingNode != null) {      ModifiableValueMap existingProperties=existingNode.adaptTo(ModifiableValueMap.class);      existingProperties.putAll(properties);    } else {      Node node=JcrResourceUtil.createPath(resolver.getResource(PublickConstants.CONTENT_PATH).adaptTo(Node.class),BLOG_ROOT + path,NodeType.NT_UNSTRUCTURED,NodeType.NT_UNSTRUCTURED,true);      Resource blog=resolver.create(resolver.getResource(node.getPath()),url,properties);      Node blogNode=blog.adaptTo(Node.class);      blogNode.addMixin(NodeType.MIX_CREATED);    }    resolver.commit();    resolver.close();    response.sendRedirect(PublickConstants.ADMIN_LIST_PATH + ".html");  } catch (  RepositoryException e) {    LOGGER.error("Could not save blog to repository.",e);    response.sendRedirect(request.getHeader("referer"));  }catch (  PersistenceException e) {    LOGGER.error("Could not save blog to repository.",e);    response.sendRedirect(request.getHeader("referer"));  } finally {    if (resolver != null && resolver.isLive()) {      resolver.close();      resolver=null;    }  }}  }
class C{  public void createSubUsageScenario07() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(15);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO07_PERUNIT_MONTH",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO07_PERUNIT_MONTH",serviceDetails,basicSetup.getCustomerUser2(),role);  long usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(9);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"MAX_FOLDER_NUMBER","13");  usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(3);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"MAX_FOLDER_NUMBER","23");  usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(5);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"MAX_FOLDER_NUMBER","33");  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.daysToMillis(3);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.terminateSubscription(basicSetup.getSupplierAdminKey(),subDetails,"");  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO07_PERUNIT_MONTH",subDetails);}  }
class C{  public Duration withMillis(long duration){  if (duration == getMillis()) {    return this;  }  return new Duration(duration);}  }
class C{  @Deprecated public AsyncNoteStoreClient createNoteStoreClient() throws TTransportException {  if (EvernoteSession.getInstance() == null || EvernoteSession.getInstance().getAuthenticationResult() == null) {    throw new IllegalStateException();  }  TEvernoteHttpClient transport=new TEvernoteHttpClient(EvernoteSession.getInstance().getAuthenticationResult().getNoteStoreUrl(),mUserAgent,mTempDir);  TBinaryProtocol protocol=new TBinaryProtocol(transport);  return new AsyncNoteStoreClient(protocol,protocol,EvernoteSession.getInstance().getAuthenticationResult().getAuthToken());}  }
class C{  public synchronized void removeSeries(int index){  mSeries.remove(index);}  }
class C{  public void disableUsbMassStorage(){  try {    mMountService.setUsbMassStorageEnabled(false);  } catch (  Exception ex) {    Log.e(TAG,"Failed to disable UMS",ex);  }}  }
class C{  public BatchSentenceResource(Session s,String resscript){  super(s);  m_sResScript=resscript;}  }
class C{  protected final void toString(StringBuffer buf,boolean unseen){  if (this.getVisited() == unseen) {    this.flipVisited();    buf.append("(" + this.stateFP + ","+ this.getIndex()+ ") --> ");    int size=this.nextSize();    if (size != 0) {      BTGraphNode node=(BTGraphNode)this.nextAt(0);      buf.append("(" + node.stateFP + ","+ node.getIndex()+ ")");    }    for (int i=1; i < size; i++) {      buf.append(", ");      BTGraphNode node=(BTGraphNode)this.nextAt(i);      buf.append("(" + node.stateFP + ","+ node.getIndex()+ ")");    }    buf.append("\n");    for (int i=0; i < size; i++) {      this.nextAt(i).toString(buf,unseen);    }  }}  }
class C{  public boolean areRomFilesAvailable(Set<File> romPaths){  return this.getMissingRomFiles(romPaths).size() == 0;}  }
class C{  public void put(CharSequence key,Object value){  getOrCreateNode(key).data=value;}  }
class C{  public InvalidDeltaException(){}  }
class C{  private boolean handShake(ChannelHandlerContext ctx,Object msg){  ByteBuf buf=((ByteBuf)msg);  if (buf.readableBytes() < 2) {    buf.release();    return false;  }  byte v=buf.readByte();  if (v != 5) {    buf.release();    return false;  }  byte nmethod=buf.readByte();  byte[] methods=new byte[nmethod];  buf.readBytes(methods);  buf.release();  ByteBuf responose=ctx.alloc().buffer(2);  responose.writeByte(5);  responose.writeByte(0);  ctx.writeAndFlush(responose);  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:08.467 -0500",hash_original_method="11B1E697782FA8E30A6D0D1E236AB9C8",hash_generated_method="660D7457B8BE490BE462C73899E90B4C") public void addHeaderField(String name,String val){  header.append(name);  header.append(": ");  header.append(val);  header.append('\n');}  }
class C{  public static String md5Hash(byte[] data,int length) throws NoSuchAlgorithmException {  MessageDigest messageDigest=MessageDigest.getInstance("MD5");  messageDigest.update(data,0,length);  return BaseEncoding.base64().encode(messageDigest.digest());}  }
class C{  public static Byte[][] toByteArray(final byte[][] array){  if (array == null) {    return null;  }  final Byte[][] byteArray=new Byte[array.length][];  for (int i=0; i < array.length; i++) {    byteArray[i]=new Byte[array[i].length];    for (int j=0; j < array[i].length; j++) {      byteArray[i][j]=array[i][j];    }  }  return byteArray;}  }
class C{  protected void writePrimaryKeyStmt(Table table,Column[] primaryKeyColumns,StringBuilder ddl){  ddl.append("PRIMARY KEY (");  for (int idx=0; idx < primaryKeyColumns.length; idx++) {    printIdentifier(getColumnName(primaryKeyColumns[idx]),ddl);    if (idx < primaryKeyColumns.length - 1) {      ddl.append(", ");    }  }  ddl.append(")");}  }
class C{  private static void appendDefaultValueIfSet(Document htmldoc,Parameter<?> par,Element optdd){  if (par.hasDefaultValue()) {    Element p=htmldoc.createElement(HTMLUtil.HTML_P_TAG);    p.appendChild(htmldoc.createTextNode(HEADER_DEFAULT_VALUE));    if (par instanceof ClassParameter<?>) {      appendDefaultClassLink(htmldoc,par,p);    } else     if (par instanceof RandomParameter && par.getDefaultValue() == RandomFactory.DEFAULT) {      p.appendChild(htmldoc.createTextNode("use global random seed"));    } else {      p.appendChild(htmldoc.createTextNode(par.getDefaultValueAsString()));    }    optdd.appendChild(p);  }}  }
class C{  @Override public TagAttachObject copy(){  return new TagAttachObject(this);}  }
class C{  public boolean drawShadows(){  return drawShadows;}  }
class C{  public static CCPropertyAction action(float aDuration,String key,float from,float to){  return new CCPropertyAction(aDuration,key,from,to);}  }
class C{  public void testDurableTopicRecoverMarksMessageRedelivered() throws JMSException {  connection.setClientID(getName());  connection.start();  Session session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  Topic topic=session.createTopic("topic-" + getName());  MessageConsumer consumer=session.createDurableSubscriber(topic,"sub1");  MessageProducer producer=createProducer(session,topic);  producer.send(createTextMessage(session));  Message msg=consumer.receive(1000);  assertNotNull(msg);  assertFalse("Message should not be redelivered.",msg.getJMSRedelivered());  session.recover();  msg=consumer.receive(2000);  assertNotNull(msg);  assertTrue("Message should be redelivered.",msg.getJMSRedelivered());  msg.acknowledge();  session.close();}  }
class C{  @Override public int hashCode(){  long val=value.toLongZeroExtend();  int high=(int)(val >>> 32);  int low=(int)(val & 0xFFFFFFFFL);  return high ^ (low >>> 2);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:02.246 -0500",hash_original_method="7FDDE82DCC606FA9E5D06171C4D7A283",hash_generated_method="2DCD092639F2BFD0DFB3E894AE55E7E2") public static boolean onTouchEvent(TextView widget,Spannable buffer,MotionEvent event){  DragState[] ds;switch (event.getActionMasked()) {case MotionEvent.ACTION_DOWN:    ds=buffer.getSpans(0,buffer.length(),DragState.class);  for (int i=0; i < ds.length; i++) {    buffer.removeSpan(ds[i]);  }buffer.setSpan(new DragState(event.getX(),event.getY(),widget.getScrollX(),widget.getScrollY()),0,0,Spannable.SPAN_MARK_MARK);return true;case MotionEvent.ACTION_UP:ds=buffer.getSpans(0,buffer.length(),DragState.class);for (int i=0; i < ds.length; i++) {buffer.removeSpan(ds[i]);}if (ds.length > 0 && ds[0].mUsed) {return true;} else {return false;}case MotionEvent.ACTION_MOVE:ds=buffer.getSpans(0,buffer.length(),DragState.class);if (ds.length > 0) {if (ds[0].mFarEnough == false) {int slop=ViewConfiguration.get(widget.getContext()).getScaledTouchSlop();if (Math.abs(event.getX() - ds[0].mX) >= slop || Math.abs(event.getY() - ds[0].mY) >= slop) {ds[0].mFarEnough=true;}}if (ds[0].mFarEnough) {ds[0].mUsed=true;boolean cap=(event.getMetaState() & KeyEvent.META_SHIFT_ON) != 0 || MetaKeyKeyListener.getMetaState(buffer,MetaKeyKeyListener.META_SHIFT_ON) == 1 || MetaKeyKeyListener.getMetaState(buffer,MetaKeyKeyListener.META_SELECTING) != 0;float dx;float dy;if (cap) {dx=event.getX() - ds[0].mX;dy=event.getY() - ds[0].mY;} else {dx=ds[0].mX - event.getX();dy=ds[0].mY - event.getY();}ds[0].mX=event.getX();ds[0].mY=event.getY();int nx=widget.getScrollX() + (int)dx;int ny=widget.getScrollY() + (int)dy;int padding=widget.getTotalPaddingTop() + widget.getTotalPaddingBottom();Layout layout=widget.getLayout();ny=Math.min(ny,layout.getHeight() - (widget.getHeight() - padding));ny=Math.max(ny,0);int oldX=widget.getScrollX();int oldY=widget.getScrollY();scrollTo(widget,layout,nx,ny);if (oldX != widget.getScrollX() || oldY != widget.getScrollY()) {widget.cancelLongPress();}return true;}}}return false;}  }
class C{  private void createFilesForOldBackupFormat(BackupConfig spyBackupConfig) throws IOException {  doReturn(Paths.get(TMP_CODENVY)).when(spyBackupConfig).obtainArtifactTempDirectory();  Files.createDirectory(Paths.get(TMP_CODENVY).resolve(BackupConfig.Component.FS.getRelativeBackupPath()));  Files.createDirectory(Paths.get(TMP_CODENVY).resolve(BackupConfig.Component.MONGO.getRelativeBackupPath()));  FileUtils.write(Paths.get(TMP_CODENVY).resolve(BackupConfig.Component.LDAP.getRelativeBackupPath()).toFile(),"");  FileUtils.write(Paths.get(TMP_CODENVY).resolve(BackupConfig.Component.LDAP_ADMIN.getRelativeBackupPath()).toFile(),"");}  }
class C{  public long runtime(TimeUnit unit){  return unit.convert(getNanos(),TimeUnit.NANOSECONDS);}  }
class C{  public String randomNumeric(int length){  return randomString(JexlStringFunctions.numeric,length);}  }
class C{  public Object remove(int key){  Entry[] table=this.table;  int bucket=Math.abs(key) % table.length;  for (Entry e=table[bucket], prev=null; e != null; prev=e, e=e.next) {    if (key == e.key) {      if (prev != null)       prev.next=e.next; else       table[bucket]=e.next;      count--;      Object oldValue=e.value;      e.value=null;      return oldValue;    }  }  return null;}  }
class C{  public double secondsSinceLast(){  return (timeSinceLast()) / 1000.0;}  }
class C{  public static void clear(EntityPlayer player){  NotificationCoord at=new NotificationCoord(player.worldObj,new BlockPos(player));  NotifyImplementation.instance.doSend(player,at,player.worldObj,EnumSet.of(Style.CLEAR),null,"",emptyStringArray);}  }
class C{  private JPanel createSearchButtonPanel(){  JPanel b=new JPanel(new GridBagLayout());  GridBagConstraints c=new GridBagConstraints();  c.anchor=GridBagConstraints.LINE_START;  c.fill=GridBagConstraints.NONE;  c.gridx=0;  c.gridy=0;  c.insets=new Insets(0,10,10,0);  JPanel filterLabelIconPanel=new JPanel(new GridBagLayout());  c=new GridBagConstraints();  c.gridx=0;  c.gridy=0;  c.anchor=GridBagConstraints.WEST;  c.fill=GridBagConstraints.NONE;  c.insets=new Insets(0,10,0,0);  c=new GridBagConstraints();  c.gridx=1;  c.gridy=0;  c.fill=GridBagConstraints.HORIZONTAL;  c.anchor=GridBagConstraints.WEST;  c.weightx=1.0;  c.insets=new Insets(0,3,0,0);  c=new GridBagConstraints();  c.anchor=GridBagConstraints.WEST;  c.fill=GridBagConstraints.NONE;  c.gridy=0;  c.gridy=1;  c.weightx=1.0;  c.insets=new Insets(10,0,10,0);  b.add(filterLabelIconPanel,c);  return b;}  }
class C{  public String toString(){  if (maps == null)   return "";  String s=super.toString() + "PolicyMappings [\n" + maps.toString()+ "]\n";  return (s);}  }
class C{  public CallSpec<Void,HttpError> sendContactRequest(String userId){  return Resource.<Void,HttpError>newPostSpec(api,"/v1/users/{user_id}/contact_requests",false).pathParam("user_id",userId).responseAs(Void.class).build();}  }
class C{  private <T>void assertCompressedToUncompressedImage(String fileName,String unCompfileName,Class<T> clazz,IHDUAsserter<T> reader) throws Exception {  Fits f=null;  try {    f=new Fits(fileName);    Fits unFits=new Fits(unCompfileName);    ImageHDU hdu=readHDU(unFits,ImageHDU.class);    unFits.deleteHDU(0);    CompressedImageHDU uncompHdu=readHDU(f,CompressedImageHDU.class);    f.deleteHDU(0);    while (hdu != null && uncompHdu != null) {      T compressedData=(T)uncompHdu.asImageHDU().getData().getData();      T orgData=(T)hdu.getData().getData();      System.out.println("Asserting image data! " + (assertionCounter++));      reader.assertData(orgData,compressedData);      hdu=readHDU(unFits,ImageHDU.class);      if (hdu != null) {        unFits.deleteHDU(0);      }      uncompHdu=readHDU(f,CompressedImageHDU.class);      if (uncompHdu != null) {        f.deleteHDU(0);      }    }    Assert.assertFalse(hdu != null || uncompHdu != null);  }  finally {    SafeClose.close(f);  }}  }
class C{  public InfoBDocumentoVitalExtVO validarDocumentoVital(InfoBDocumentoVitalExtVO documentoVital){  checkPermission(DocumentosVitalesSecurityManager.EDICION_DOCUMENTOS_VITALES_ACTION);  if ((documentoVital != null) && (documentoVital.getEstadoDocVit() == EstadoDocumentoVital.PENDIENTE_VALIDACION)) {    iniciarTransaccion();    documentoVitalDBEntity.pasaAHistoricoDocsVigentes(documentoVital.getIdBdTerceros());    documentoVital.setEstadoDocVit(EstadoDocumentoVital.VIGENTE);    documentoVital.setIdUsuarioVig(getServiceClient().getId());    documentoVital.setFechaVig(new Date());    documentoVitalDBEntity.updateDocumentoVital(documentoVital);    Locale locale=getServiceClient().getLocale();    AuditoriaDocumentosVitales.auditaValidacionDocumentoVital(locale,this,documentoVital);    commit();  }  return documentoVital;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void publish(Record record,Handler<AsyncResult<Record>> resultHandler){  delegate.publish(record,resultHandler);}  }
class C{  public static boolean validSystemNameFormat(String systemName,char type,String prefix){  if (!(systemName.startsWith(prefix)) || (systemName.charAt(prefix.length()) != type)) {    log.error("illegal character in header field of system name: " + systemName);    return (false);  }  int num;  try {    num=Integer.valueOf(systemName.substring(prefix.length() + 1)).intValue();  } catch (  Exception e) {    log.error("illegal character in number field of system name: " + systemName);    return (false);  }  if (num >= 0) {  } else {    log.error("invalid Acela system name: " + systemName);    return (false);  }  return true;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CategoryDataset)) {    return false;  }  CategoryDataset that=(CategoryDataset)obj;  if (!getRowKeys().equals(that.getRowKeys())) {    return false;  }  if (!getColumnKeys().equals(that.getColumnKeys())) {    return false;  }  int rowCount=getRowCount();  int colCount=getColumnCount();  for (int r=0; r < rowCount; r++) {    for (int c=0; c < colCount; c++) {      Number v1=getValue(r,c);      Number v2=that.getValue(r,c);      if (v1 == null) {        if (v2 != null) {          return false;        }      } else       if (!v1.equals(v2)) {        return false;      }    }  }  return true;}  }
class C{  public Matrix fitScreen(){  mMinScaleX=1f;  mMinScaleY=1f;  Matrix save=new Matrix();  save.set(mMatrixTouch);  float[] vals=new float[9];  save.getValues(vals);  vals[Matrix.MTRANS_X]=0f;  vals[Matrix.MTRANS_Y]=0f;  vals[Matrix.MSCALE_X]=1f;  vals[Matrix.MSCALE_Y]=1f;  save.setValues(vals);  return save;}  }
class C{  public Map<String,List<String>> parameters(){  if (params == null) {    if (hasPath) {      int pathLength=path().length();      if (uri.length() == pathLength) {        return Collections.emptyMap();      }      decodeParams(uri.substring(pathLength + 1));    } else {      if (uri.isEmpty()) {        return Collections.emptyMap();      }      decodeParams(uri);    }  }  return params;}  }
class C{  private void showMessageDialog(String title,String message){  dialogFactory.createMessageDialog(title,message,null).show();}  }
class C{  public void parse(){  try {    SAXParser parser=SAXParserFactory.newInstance().newSAXParser();    parser.parse(xml.getAbsolutePath(),this);  } catch (  Exception ex) {    DelphiUtils.LOG.error(ex.getMessage());  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:29.557 -0500",hash_original_method="9EAE3F24E2C650B2D541A86A9F9A7795",hash_generated_method="28DA8E137822FE176B67AF43B0F4F4B9") public boolean isInCall(){  try {    return mSession.isInCall();  } catch (  RemoteException e) {    Log.e(TAG,"isInCall(): " + e);    return false;  }}  }
class C{  @Override void decode(final byte[] in,int inPos,final int inAvail,final Context context){  if (context.eof) {    return;  }  if (inAvail < 0) {    context.eof=true;  }  for (int i=0; i < inAvail; i++) {    final byte[] buffer=ensureBufferSize(decodeSize,context);    final byte b=in[inPos++];    if (b == pad) {      context.eof=true;      break;    } else {      if (b >= 0 && b < DECODE_TABLE.length) {        final int result=DECODE_TABLE[b];        if (result >= 0) {          context.modulus=(context.modulus + 1) % BYTES_PER_ENCODED_BLOCK;          context.ibitWorkArea=(context.ibitWorkArea << BITS_PER_ENCODED_BYTE) + result;          if (context.modulus == 0) {            buffer[context.pos++]=(byte)((context.ibitWorkArea >> 16) & MASK_8BITS);            buffer[context.pos++]=(byte)((context.ibitWorkArea >> 8) & MASK_8BITS);            buffer[context.pos++]=(byte)(context.ibitWorkArea & MASK_8BITS);          }        }      }    }  }  if (context.eof && context.modulus != 0) {    final byte[] buffer=ensureBufferSize(decodeSize,context);switch (context.modulus) {case 1:      break;case 2:    context.ibitWorkArea=context.ibitWorkArea >> 4;  buffer[context.pos++]=(byte)((context.ibitWorkArea) & MASK_8BITS);break;case 3:context.ibitWorkArea=context.ibitWorkArea >> 2;buffer[context.pos++]=(byte)((context.ibitWorkArea >> 8) & MASK_8BITS);buffer[context.pos++]=(byte)((context.ibitWorkArea) & MASK_8BITS);break;default :throw new IllegalStateException("Impossible modulus " + context.modulus);}}}  }
class C{  private void printProgress(long row,long rowFrom,long rowTill){  long rowsProcessed=row + chunkSize - rowFrom;  if (rowsProcessed > (rowTill - rowFrom))   rowsProcessed=(rowTill - rowFrom);  print(String.format("%d%%",(int)(((double)(rowsProcessed) / (double)(rowTill - rowFrom)) * 100.0f)));}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.N4_METHOD_DECLARATION;}  }
class C{  public void addAll(List<Offer> offers){  this.offers=offers;  notifyBinderDataSetChanged();}  }
class C{  public static final void sort(double[] a,int[] b,int begin,int end){  mergesort(a,b,begin,end - 1);}  }
class C{  public String toString(){  return Utils.arrayToString(m_Keys);}  }
class C{  public void addAll(int... values){  for (  int value : values) {    add(value);  }}  }
class C{  protected synchronized void completedClassifier(int iteration,boolean success){  if (!success) {    m_failed++;    if (m_Debug) {      System.err.println("Iteration " + iteration + " failed!");    }  } else {    m_completed++;  }  if (m_completed + m_failed == m_Classifiers.length) {    if (m_failed > 0) {      if (m_Debug) {        System.err.println("Problem building classifiers - some iterations failed.");      }    }    m_executorPool.shutdown();    block(false);  }}  }
class C{  public void zoomIn(){  if (canZoomIn()) {    zoomLevel++;    updatePaths();    invalidate();  }}  }
class C{  public static Integer createServerCache() throws Exception {  Bug37210DUnitTest test=new Bug37210DUnitTest();  Properties props=new Properties();  cache=test.createCache(props);  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setDataPolicy(DataPolicy.REPLICATE);  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME,attrs);  CacheServer server=cache.addCacheServer();  int port=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  server.setPort(port);  server.setNotifyBySubscription(false);  server.setSocketBufferSize(32768);  server.setMaximumTimeBetweenPings(1000000);  server.start();  LogWriterUtils.getLogWriter().info("Server started at PORT = " + port);  return new Integer(server.getPort());}  }
class C{  public static String bin2str(final byte[] values,final JBBPBitOrder bitOrder,final boolean separateBytes){  if (values == null) {    return null;  }  final StringBuilder result=new StringBuilder(values.length * (separateBytes ? 9 : 8));  boolean nofirst=false;  for (  final byte b : values) {    if (separateBytes) {      if (nofirst) {        result.append(' ');      } else {        nofirst=true;      }    }    int a=b;    if (bitOrder == JBBPBitOrder.MSB0) {      for (int i=0; i < 8; i++) {        result.append((a & 0x1) == 0 ? '0' : '1');        a>>=1;      }    } else {      for (int i=0; i < 8; i++) {        result.append((a & 0x80) == 0 ? '0' : '1');        a<<=1;      }    }  }  return result.toString();}  }
class C{  protected AbstractMatrix3D vSliceFlip(){  if (slices > 0) {    sliceZero+=(slices - 1) * sliceStride;    sliceStride=-sliceStride;    this.isNoView=false;  }  return this;}  }
class C{  public boolean load(Element shared,Element perNode) throws Exception {  return true;}  }
class C{  @NonNull @SuppressWarnings({"unused","MissingPermission"}) protected Account createOrGetAccount(@NonNull String accountName){  Account[] accountList=accountManager.getAccountsByType(accountType);  for (  Account account : accountList) {    if (account.name.equals(accountName))     return account;  }  Account account=new Account(accountName,accountType);  accountManager.addAccountExplicitly(account,null,null);  return account;}  }
class C{  public int length(int line){  int offsetStart=lineStarts[line];  int offsetEnd=lineStarts[line + 1];  return offsetEnd - offsetStart;}  }
class C{  public void enableImageTransforms(boolean enable){  if (mPhotoView != null) {    mPhotoView.enableImageTransforms(enable);  }}  }
class C{  public SetConfig(CoordinatorStreamMessage message){  super(message.getKeyArray(),message.getMessageMap());}  }
class C{  public boolean add(int index,C controller){  return addAll(index,Collections.singleton(controller));}  }
class C{  public void paint(Graphics2D g){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  origAlpha=1.0f;  Composite origComposite=g.getComposite();  if (origComposite instanceof AlphaComposite) {    AlphaComposite origAlphaComposite=(AlphaComposite)origComposite;    if (origAlphaComposite.getRule() == AlphaComposite.SRC_OVER) {      origAlpha=origAlphaComposite.getAlpha();    }  }  AffineTransform trans_0=g.getTransform();  paintRootGraphicsNode_0(g);  g.setTransform(trans_0);}  }
class C{  public void addScriptingListeners(Node node){  if (node.getNodeType() == Node.ELEMENT_NODE) {    addScriptingListenersOn((Element)node);  }  for (Node n=node.getFirstChild(); n != null; n=n.getNextSibling()) {    addScriptingListeners(n);  }}  }
class C{  public static void println(int priority,String tag,String msg,Throwable tr){  if (mLogNode != null) {    mLogNode.println(priority,tag,msg,tr);  }}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public void hspan(double start,double end,Paint color){  hspan(start,end,color,null);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public static String[] tokenizeUnquoted(String s){  List tokens=new LinkedList();  int first=0;  while (first < s.length()) {    first=skipWhitespace(s,first);    int last=scanToken(s,first);    if (first < last) {      tokens.add(s.substring(first,last));    }    first=last;  }  return (String[])tokens.toArray(new String[tokens.size()]);}  }
class C{  public static ECKey fromPrivateAndPrecalculatedPublic(BigInteger priv,ECPoint pub){  return new ECKey(priv,pub);}  }
class C{  public void test_Constructor$CII() throws IOException {  try {    cr=new CharArrayReader(null,0,0);    fail("Test 1: NullPointerException expected.");  } catch (  NullPointerException e) {  }  try {    cr=new CharArrayReader(hw,-1,0);    fail("Test 2: IllegalArgumentException expected.");  } catch (  IllegalArgumentException e) {  }  try {    cr=new CharArrayReader(hw,0,-1);    fail("Test 3: IllegalArgumentException expected.");  } catch (  IllegalArgumentException e) {  }  try {    cr=new CharArrayReader(hw,hw.length + 1,1);    fail("Test 4: IllegalArgumentException expected.");  } catch (  IllegalArgumentException e) {  }  cr=new CharArrayReader(hw,5,5);  assertTrue("Test 5: Failed to create reader",cr.ready());  assertEquals("Test 6: Incorrect character read;",'W',cr.read());}  }
class C{  public static double[][] multiplyMatrix(double[][] a,double[][] b){  double[][] c=new double[3][3];  for (int i=0; i < c.length; i++) {    for (int j=0; j < c[i].length; j++) {      for (int h=0; h < c.length; h++) {        c[i][j]+=a[i][h] * b[h][j];      }    }  }  return c;}  }
class C{  public static String newEditorLabel(String baseLabel){  Integer count=labelCounts.get(baseLabel);  if (null == count) {    count=1;    labelCounts.put(baseLabel,count);    return baseLabel;  }  String result=baseLabel + " " + count;  labelCounts.put(baseLabel,count + 1);  return result;}  }
class C{  private JVMCheck(){}  }
class C{  public Credentials toCredentials(Element el,String attributeUser,String attributePassword){  String user=el.getAttribute(attributeUser);  String pass=el.getAttribute(attributePassword);  if (user == null)   return null;  if (pass == null)   pass="";  return CredentialsImpl.toCredentials(user,pass);}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null) {        changeEvent=new ChangeEvent(this);      }      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  protected void checkCapacity(){  if (size >= threshold) {    int newCapacity=data.length * 2;    if (newCapacity <= MAXIMUM_CAPACITY) {      ensureCapacity(newCapacity);    }  }}  }
class C{  public static boolean isFinal(int mod){  return (mod & FINAL) != 0;}  }
class C{  @Override public void close(){  panel.dispose();}  }
class C{  protected void generateCopyValueToWidgetMethod(SourcePrinter srcWriter){  srcWriter.println("public void copyValueToWidget(HasValue<?> valueContainer, String columnKey, DataSourceRecord<?> dataSourceRecord) {");  String elseStm="";  JField[] fields=JClassUtils.getDeclaredFields(dtoType);  for (int i=0; i < fields.length; i++) {    JField field=fields[i];    String name=field.getName();    JType type=field.getType();    String typeName=type.getQualifiedSourceName();    if (type.isPrimitive() != null) {      JPrimitiveType jPrimitiveType=type.isPrimitive();      typeName=jPrimitiveType.getQualifiedBoxedSourceName();    }    srcWriter.println();    if (JClassUtils.getGetterMethod(name,dtoType) != null) {      srcWriter.println(elseStm + "if(" + EscapeUtils.quote(name)+ ".equals(columnKey)){");      srcWriter.println("((HasValue<" + typeName + ">)valueContainer).setValue(("+ typeName+ ") getValue(columnKey, dataSourceRecord));");      srcWriter.print("}");      srcWriter.println();      elseStm="else ";    }  }  srcWriter.println();  srcWriter.println("bindToWidget(valueContainer, columnKey, dataSourceRecord);");  srcWriter.println("}");}  }
class C{  @SuppressWarnings("unchecked") private void notifyRulesListeners(BatchAssociationRulesEvent are){  Vector<BatchAssociationRulesListener> l;synchronized (this) {    l=(Vector<BatchAssociationRulesListener>)m_rulesListeners.clone();    for (int i=0; i < l.size(); i++) {      l.get(i).acceptAssociationRules(are);    }  }}  }
class C{  public FofcSearchEditor(FofcRunner runner){  this(runner,"Result MAG");}  }
class C{  boolean isValid(){  return issuerX509PrincipalMatches && signatureIntact && crlSignKeyUsage&& !unknownCriticalExtension;}  }
class C{  private void reset(Component newOwner,Component newContents,int newX,int newY,Popup newPopup){  this.owner=newOwner;  this.contents=newContents;  this.popup=newPopup;  this.x=newX;  this.y=newY;  if (newOwner instanceof JComboBox) {    return;  }  final Dimension contentsPrefSize=newContents.getPreferredSize();  if (contentsPrefSize.width <= 0 || contentsPrefSize.height <= 0) {    return;  }  for (Container p=newContents.getParent(); p != null; p=p.getParent()) {    if (p instanceof JWindow || p instanceof Panel) {      p.setBackground(newContents.getBackground());      heavyWeightContainer=p;      break;    }  }  final JComponent parent=(JComponent)newContents.getParent();  oldOpaque=parent.isOpaque();  oldBorder=parent.getBorder();  parent.setOpaque(false);  parent.setBorder(SHADOW_BORDER);  if (heavyWeightContainer != null) {    heavyWeightContainer.setSize(heavyWeightContainer.getPreferredSize());  } else {    parent.setSize(parent.getPreferredSize());  }}  }
class C{  public static final SnapshotException rethrow(Throwable e){  if (e instanceof RuntimeException) {    if (((RuntimeException)e).getCause() instanceof SnapshotException)     return (SnapshotException)((RuntimeException)e).getCause();    throw (RuntimeException)e;  } else   if (e instanceof SnapshotException)   return (SnapshotException)e; else   return new SnapshotException(e);}  }
class C{  public BufferReader(int capacity,InputStream is){  this.capacity=capacity;  this.is=is;  Log.d(LOG,"init(): capacity=" + capacity);  buffers=new Buffer[3];  for (int i=0; i < buffers.length; i++) {    buffers[i]=new Buffer(capacity);  }  indexMine=0;  indexBlocked=buffers.length - 1;}  }
class C{  public void reset() throws IOException {  m_structure=null;  m_Buffer=null;  setRetrieval(NONE);  if (m_File != null) {    setFile(new File(m_File));  } else   if ((m_URL != null) && !m_URL.equals("http://")) {    setURL(m_URL);  }}  }
