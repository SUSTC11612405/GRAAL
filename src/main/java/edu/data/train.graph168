class C{  public VmAllocationPolicySimple(List<? extends Host> list){  super(list);  setFreePes(new ArrayList<Integer>());  for (  Host host : getHostList()) {    getFreePes().add(host.getNumberOfPes());  }  setVmTable(new HashMap<String,Host>());  setUsedPes(new HashMap<String,Integer>());}  }
class C{  public ScriptHealthDetector(final IKBus eventBus,final Script script,final Executor executor){  this.script=script;  this.eventBus=eventBus;  this.executor=executor;}  }
class C{  private void unlock(){  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.d(TAG,"unlock: releasing semaphore");  }  mLock.release();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isDownloaded(){  return (downloaded == DownloadedState.DOWNLOADED);}  }
class C{  private boolean addPath(List<OPath> list,OPath path){  if (list.contains(path)) {    return true;  }  String pName=path.getName();  for (int i=0; i < list.size(); i++) {    OPath p=list.get(i);    if (pName.equals(p.getName())) {      log.error("Path \"" + path.getName() + "\" is duplicate name for another path in Portal \""+ getUserName()+ "\".");      return false;    }    if (p.equals(path)) {      log.warn("Path \"" + path.getName() + "\" is duplicate of path \""+ p.getName()+ "\" in Portal \""+ getUserName()+ "\".");      return false;    }  }  list.add(path);  return true;}  }
class C{  private void updateHeartbeat(){  final long now=SystemClock.elapsedRealtime();  if (now < mLastHeartbeatSendTime + HEARTBEAT_SEND_INTERVAL_IN_MS)   return;  try {    mLastHeartbeatSendTime=now;    if (mSyncContext != null) {      mSyncContext.sendHeartbeat();    }  } catch (  RemoteException e) {  }}  }
class C{  private void flushWriteChunk(){  if (writeChunk == null)   return;  if (writeChunk.position() == 0)   return;  if (!writeChunk.hasRemaining()) {    bytesWritten+=writeChunk.position();    writeChunk.flip();    list.addLast(writeChunk);    writeChunk=null;    return;  }  bytesWritten+=writeChunk.position();  ByteBuffer flushChunk=writeChunk;  writeChunk=writeChunk.slice();  writeChunk.order(order);  flushChunk.flip();  list.addLast(flushChunk);  return;}  }
class C{  protected void onFileTransferFinished(DccFileTransfer transfer,Exception e){}  }
class C{  public long deleteAttributeValue(final long attributeValuePk){  final AttrValueEntityCategory valueEntityCategory=attrValueEntityCategoryDao.findById(attributeValuePk);  if (Etype.IMAGE_BUSINESS_TYPE.equals(valueEntityCategory.getAttribute().getEtype().getBusinesstype())) {    imageService.deleteImage(valueEntityCategory.getVal(),Constants.CATEGORY_IMAGE_REPOSITORY_URL_PATTERN,systemService.getImageRepositoryDirectory());  }  attrValueEntityCategoryDao.delete(valueEntityCategory);  return valueEntityCategory.getCategory().getCategoryId();}  }
class C{  private void checkEqualsIsConsistent(Message message){  assertEquals(message,message);  DynamicMessage dynamic=DynamicMessage.newBuilder(message).build();  checkEqualsIsConsistent(message,dynamic);}  }
class C{  public Builder withLogIndex(long index){  request.logIndex=Assert.argNot(index,index < 0,"log index must not be negative");  return this;}  }
class C{  public StreamSource(File f){  setSystemId(f);}  }
class C{  public final void dropTables(EXT_TABLES_SQL[] tables) throws AdeException {  if (tables == null) {    return;  }  final IDataStoreUser ud=Ade.getAde().getDataStore().user();  for (int i=0; i < tables.length; i++) {    ud.dropTable(tables[i].name());  }}  }
class C{  public PreferenceStore(String filename){  this();  Assert.isNotNull(filename);  this.filename=filename;}  }
class C{  public String prepareIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  MDocType dt=MDocType.get(getCtx(),getC_DocType_ID());  if (getC_Order_ID() != 0 && getM_RMA_ID() != 0) {    m_processMsg="@OrderOrRMA@";    return DocAction.STATUS_Invalid;  }  if (!MPeriod.isOpen(getCtx(),getDateAcct(),dt.getDocBaseType(),getAD_Org_ID())) {    m_processMsg="@PeriodClosed@";    return DocAction.STATUS_Invalid;  }  if (isSOTrx() && !isReversal()) {    I_C_Order order=getC_Order();    if (order != null && MDocType.DOCSUBTYPESO_PrepayOrder.equals(order.getC_DocType().getDocSubTypeSO()) && !MSysConfig.getBooleanValue("CHECK_CREDIT_ON_PREPAY_ORDER",true,getAD_Client_ID(),getAD_Org_ID())) {    } else {      MBPartner bp=new MBPartner(getCtx(),getC_BPartner_ID(),get_TrxName());      if (MBPartner.SOCREDITSTATUS_CreditStop.equals(bp.getSOCreditStatus())) {        m_processMsg="@BPartnerCreditStop@ - @TotalOpenBalance@=" + bp.getTotalOpenBalance() + ", @SO_CreditLimit@="+ bp.getSO_CreditLimit();        return DocAction.STATUS_Invalid;      }      if (MBPartner.SOCREDITSTATUS_CreditHold.equals(bp.getSOCreditStatus())) {        m_processMsg="@BPartnerCreditHold@ - @TotalOpenBalance@=" + bp.getTotalOpenBalance() + ", @SO_CreditLimit@="+ bp.getSO_CreditLimit();        return DocAction.STATUS_Invalid;      }      BigDecimal notInvoicedAmt=MBPartner.getNotInvoicedAmt(getC_BPartner_ID());      if (MBPartner.SOCREDITSTATUS_CreditHold.equals(bp.getSOCreditStatus(notInvoicedAmt))) {        m_processMsg="@BPartnerOverSCreditHold@ - @TotalOpenBalance@=" + bp.getTotalOpenBalance() + ", @NotInvoicedAmt@="+ notInvoicedAmt+ ", @SO_CreditLimit@="+ bp.getSO_CreditLimit();        return DocAction.STATUS_Invalid;      }    }  }  MInOutLine[] lines=getLines(true);  if (lines == null || lines.length == 0) {    m_processMsg="@NoLines@";    return DocAction.STATUS_Invalid;  }  BigDecimal Volume=Env.ZERO;  BigDecimal Weight=Env.ZERO;  for (int i=0; i < lines.length; i++) {    MInOutLine line=lines[i];    MProduct product=line.getProduct();    if (product != null) {      Volume=Volume.add(product.getVolume().multiply(line.getMovementQty()));      Weight=Weight.add(product.getWeight().multiply(line.getMovementQty()));    }    if (line.getM_AttributeSetInstance_ID() != 0)     continue;    if (product != null && product.isASIMandatory(isSOTrx(),line.getAD_Org_ID())) {      m_processMsg="@M_AttributeSet_ID@ @IsMandatory@ (@Line@ #" + lines[i].getLine() + ", @M_Product_ID@="+ product.getValue()+ ")";      return DocAction.STATUS_Invalid;    }  }  setVolume(Volume);  setWeight(Weight);  if (!isReversal()) {    createConfirmation();  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_PREPARE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  m_justPrepared=true;  if (!DOCACTION_Complete.equals(getDocAction()))   setDocAction(DOCACTION_Complete);  return DocAction.STATUS_InProgress;}  }
class C{  @Override public boolean isUnsecurable(){  return false;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:10.822 -0500",hash_original_method="1E43ADB2B24E4AEE234C287749830ABE",hash_generated_method="BF31A384C12F3C95702A05E5A660934A") public URI toURI() throws URISyntaxException {  return new URI(toExternalForm());}  }
class C{  public synchronized void stop(){  if (mStreaming) {    super.stop();  }}  }
class C{  public static double sin(double x){  boolean negative=false;  int quadrant=0;  double xa;  double xb=0.0;  xa=x;  if (x < 0) {    negative=true;    xa=-xa;  }  if (xa == 0.0) {    long bits=Double.doubleToRawLongBits(x);    if (bits < 0) {      return -0.0;    }    return 0.0;  }  if (xa != xa || xa == Double.POSITIVE_INFINITY) {    return Double.NaN;  }  if (xa > 3294198.0) {    double reduceResults[]=new double[3];    reducePayneHanek(xa,reduceResults);    quadrant=((int)reduceResults[0]) & 3;    xa=reduceResults[1];    xb=reduceResults[2];  } else   if (xa > 1.5707963267948966) {    final CodyWaite cw=new CodyWaite(xa);    quadrant=cw.getK() & 3;    xa=cw.getRemA();    xb=cw.getRemB();  }  if (negative) {    quadrant^=2;  }switch (quadrant) {case 0:    return sinQ(xa,xb);case 1:  return cosQ(xa,xb);case 2:return -sinQ(xa,xb);case 3:return -cosQ(xa,xb);default :return Double.NaN;}}  }
class C{  protected void updateCachedPreferredSize(){  if (treeState != null) {    Insets i=tree.getInsets();    if (isLargeModel()) {      Rectangle visRect=tree.getVisibleRect();      if (visRect.x == 0 && visRect.y == 0 && visRect.width == 0 && visRect.height == 0 && tree.getVisibleRowCount() > 0) {        visRect.width=1;        visRect.height=tree.getRowHeight() * tree.getVisibleRowCount();      } else {        visRect.x-=i.left;        visRect.y-=i.top;      }      Component component=SwingUtilities.getUnwrappedParent(tree);      if (component instanceof JViewport) {        component=component.getParent();        if (component instanceof JScrollPane) {          JScrollPane pane=(JScrollPane)component;          JScrollBar bar=pane.getHorizontalScrollBar();          if ((bar != null) && bar.isVisible()) {            int height=bar.getHeight();            visRect.y-=height;            visRect.height+=height;          }        }      }      preferredSize.width=treeState.getPreferredWidth(visRect);    } else {      preferredSize.width=treeState.getPreferredWidth(null);    }    preferredSize.height=treeState.getPreferredHeight();    preferredSize.width+=i.left + i.right;    preferredSize.height+=i.top + i.bottom;  }  validCachedPreferredSize=true;}  }
class C{  public boolean hasConnection(){  return mConnection != null;}  }
class C{  protected void rotateImage(int degrees){  mCropImageView.rotateImage(degrees);}  }
class C{  private boolean updateIndices(Device device,Long deviceKey){  if (!primaryIndex.updateIndex(device,deviceKey)) {    return false;  }  IEntityClass entityClass=device.getEntityClass();  ClassState classState=getClassState(entityClass);  if (classState.classIndex != null) {    if (!classState.classIndex.updateIndex(device,deviceKey))     return false;  }  return true;}  }
class C{  public boolean containsKey(float key){  return contains(key);}  }
class C{  public static Intent newIntent(Context context,String extraURL,String extraTitle){  Intent intent=new Intent(context,WebActivity.class);  intent.putExtra(EXTRA_URL,extraURL);  intent.putExtra(EXTRA_TITLE,extraTitle);  KLog.a(extraURL + extraTitle);  return intent;}  }
class C{  @Util public static void backToReferrer(){  String referrer=getReferrer();  if (StringUtils.isNotBlank(referrer)) {    redirect(referrer);  }}  }
class C{  public void relateTags(final String tagString) throws ServiceException {  final List<JSONObject> tags=new ArrayList<JSONObject>();  try {    final String[] tagTitles=tagString.split(",");    for (    final String tagTitle : tagTitles) {      final JSONObject tag=tagRepository.getByTitle(tagTitle.trim());      if (null != tag) {        tags.add(tag);      }    }    for (int i=0; i < tags.size(); i++) {      final JSONObject tag1=tags.get(i);      final String tag1Id=tag1.optString(Keys.OBJECT_ID);      for (int j=i + 1; j < tags.size(); j++) {        final JSONObject tag2=tags.get(j);        final String tag2Id=tag2.optString(Keys.OBJECT_ID);        JSONObject relation=tagTagRepository.getByTag1IdAndTag2Id(tag1Id,tag2Id);        if (null != relation) {          relation.put(Common.WEIGHT,relation.optInt(Common.WEIGHT) + 1);          updateTagRelation(relation.optString(Keys.OBJECT_ID),relation);          continue;        }        relation=tagTagRepository.getByTag1IdAndTag2Id(tag2Id,tag1Id);        if (null != relation) {          relation.put(Common.WEIGHT,relation.optInt(Common.WEIGHT) + 1);          updateTagRelation(relation.optString(Keys.OBJECT_ID),relation);          continue;        }        relation=new JSONObject();        relation.put(Tag.TAG + "1_" + Keys.OBJECT_ID,tag1Id);        relation.put(Tag.TAG + "2_" + Keys.OBJECT_ID,tag2Id);        relation.put(Common.WEIGHT,1);        addTagRelation(relation);      }    }  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Relates tag and tag [" + tagString + "] failed",e);    throw new ServiceException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.866 -0500",hash_original_method="8A8BB0EA1E4D89E1A8E627888FCA29D4",hash_generated_method="3CE6EFFEB5226F9323C3D89F04BAE13E") public final boolean hasDataPath(String data){  if (mDataPaths == null) {    return false;  }  final int numDataPaths=mDataPaths.size();  for (int i=0; i < numDataPaths; i++) {    final PatternMatcher pe=mDataPaths.get(i);    if (pe.match(data)) {      return true;    }  }  return false;}  }
class C{  private void readCoords(int count,ByteArrayInputStream bais){  short x=0;  short y=0;  for (int i=0; i < count; i++) {    if ((flags[i] & xDual) != 0) {      if ((flags[i] & xShortVector) != 0) {        x+=(short)bais.read();      }    } else {      if ((flags[i] & xShortVector) != 0) {        x+=(short)-((short)bais.read());      } else {        x+=(short)(bais.read() << 8 | bais.read());      }    }    xCoordinates[i]=x;  }  for (int i=0; i < count; i++) {    if ((flags[i] & yDual) != 0) {      if ((flags[i] & yShortVector) != 0) {        y+=(short)bais.read();      }    } else {      if ((flags[i] & yShortVector) != 0) {        y+=(short)-((short)bais.read());      } else {        y+=(short)(bais.read() << 8 | bais.read());      }    }    yCoordinates[i]=y;  }}  }
class C{  public Property property(DateTimeFieldType type){  if (type == null) {    throw new IllegalArgumentException("The DateTimeFieldType must not be null");  }  DateTimeField field=type.getField(getChronology());  if (field.isSupported() == false) {    throw new IllegalArgumentException("Field '" + type + "' is not supported");  }  return new Property(this,field);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  static URI uriForClass(String typeName){  try {    return new URI("mem:///" + typeName.replaceAll("\\.","/") + ".java");  } catch (  URISyntaxException e) {    throw Throwables.propagate(e);  }}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException, IOException {  if (m_entityResolver != null) {    return m_entityResolver.resolveEntity(publicId,systemId);  } else {    return null;  }}  }
class C{  public StackedBarRenderer(){  this(false);}  }
class C{  public CTablePanel(final IFilteredTable<T> table,final IFilterFactory<T> filterFactory,final IHelpInformation filterHelp){  super(new BorderLayout());  Preconditions.checkNotNull(table,"IE01841: Table argument can not be null");  m_table=table;  m_filterFactory=filterFactory;  if (filterFactory == null) {    m_filterPanel=null;  } else {    m_filterPanel=new CFilterPanel<T>(filterFactory,filterHelp);    add(m_filterPanel,BorderLayout.NORTH);    m_filterPanel.addListener(m_filterListener);  }  m_titledBorder=new TitledBorder("");  setBorder(m_titledBorder);  add(new JScrollPane(m_table.self()),BorderLayout.CENTER);}  }
class C{  public boolean verify() throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  return verify(BouncyCastleProvider.PROVIDER_NAME);}  }
class C{  public static File bytesToBgzipFile(byte[] data,File f) throws IOException {  try (BlockCompressedOutputStream out=new BlockCompressedOutputStream(f)){    out.write(data);  }   return f;}  }
class C{  public void login(String username,char[] password) throws IOException {  httpPost(baseUrl.resolve("/admin/login"),LoginRequest.from(username,password));}  }
class C{  public static double max(double a,double b){  return a > b ? a : b;}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof Set) {    Set<?> s=(Set<?>)object;    try {      return size() == s.size() && containsAll(s);    } catch (    NullPointerException ignored) {      return false;    }catch (    ClassCastException ignored) {      return false;    }  }  return false;}  }
class C{  public void removeLayer(Layers layers,Layer layer){  if (layers != null && layer != null && layers.contains(layer)) {    layers.remove(layer);  }}  }
class C{  public void performSuspendOperationAsync(final String vmId,final FutureCallback<Task> responseCallback) throws IOException {  String path=String.format("%s/%s/suspend",getBasePath(),vmId);  createObjectAsync(path,null,responseCallback);}  }
class C{  private void pop(){  if (m_stack.size() > 0)   m_stack.remove(m_stack.size() - 1);  if (m_stack.size() > 0)   m_curPD=(PrintData)m_stack.get(m_stack.size() - 1);}  }
class C{  private void addIntersectionNodes(Iterator nodeIterator,GeomVectorField intersections){  GeometryFactory fact=new GeometryFactory();  Coordinate coord=null;  Point point=null;  while (nodeIterator.hasNext()) {    Node node=(Node)nodeIterator.next();    System.out.println("node: " + node.getCoordinate() + " "+ node.getDegree());    coord=node.getCoordinate();    point=fact.createPoint(coord);    junctions.addGeometry(new MasonGeometry(point));  }}  }
class C{  private boolean updateIndices(Device device,Long deviceKey){  if (!primaryIndex.updateIndex(device,deviceKey)) {    return false;  }  IEntityClass entityClass=device.getEntityClass();  ClassState classState=getClassState(entityClass);  if (classState.classIndex != null) {    if (!classState.classIndex.updateIndex(device,deviceKey))     return false;  }  return true;}  }
class C{  public boolean skipTests(Object mode){  if (mode.toString().equals("local")) {    return true;  } else {    return false;  }}  }
class C{  public void processResponse(StunResponseEvent ev){  alive=true;  CandidatePair checkedPair=(CandidatePair)ev.getTransactionID().getApplicationData();  if (!checkSymmetricAddresses(ev)) {    logger.info("Received a non-symmetric response for pair: " + checkedPair.toShortString() + ". Failing.");    checkedPair.setStateFailed();  } else {    Response response=ev.getResponse();    char messageType=response.getMessageType();    if (messageType == Response.BINDING_ERROR_RESPONSE) {      if (!response.containsAttribute(Attribute.ERROR_CODE)) {        logger.fine("Received a malformed error response.");        return;      }      processErrorResponse(ev);    } else     if (messageType == Response.BINDING_SUCCESS_RESPONSE) {      processSuccessResponse(ev);    }  }  updateCheckListAndTimerStates(checkedPair);}  }
class C{  public byte nextByte(){  return (byte)(next(8));}  }
class C{  public SamFilterParamsBuilder excludeUnplaced(final boolean val){  mExcludeUnplaced=val;  return this;}  }
class C{  public static boolean hasMnemonic(String caption){  return (caption.indexOf(MNEMONIC_INDICATOR) > -1);}  }
class C{  public static String toOctalString(long v){  return IntegralToString.longToOctalString(v);}  }
class C{  public static void serializeTableReply(List<OFTableStatsReply> tableReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFTableStatsReply tableReply=tableReplies.get(0);  jGen.writeStringField("version",tableReply.getVersion().toString());  jGen.writeFieldName("table");  jGen.writeStartArray();  for (  OFTableStatsEntry entry : tableReply.getEntries()) {    jGen.writeStartObject();    jGen.writeStringField("tableId",entry.getTableId().toString());    jGen.writeNumberField("activeCount",entry.getActiveCount());    jGen.writeNumberField("lookUpCount",entry.getLookupCount().getValue());    jGen.writeNumberField("matchCount",entry.getMatchedCount().getValue());switch (entry.getVersion()) {case OF_12:      jGen.writeNumberField("writeSetFields",entry.getWriteSetfields().getValue());    jGen.writeNumberField("applySetFields",entry.getApplySetfields().getValue());  jGen.writeNumberField("metaDataMatch",entry.getMetadataMatch().getValue());jGen.writeNumberField("metaDataWrite",entry.getMetadataWrite().getValue());case OF_11:jGen.writeStringField("match",entry.getMatch().toString());jGen.writeNumberField("instructions",entry.getInstructions());jGen.writeNumberField("writeActions",entry.getWriteActions());jGen.writeNumberField("applyActions",entry.getApplyActions());jGen.writeNumberField("config",entry.getConfig());case OF_10:jGen.writeStringField("name",entry.getName());jGen.writeNumberField("wildcards",entry.getWildcards());jGen.writeNumberField("maxEntries",entry.getMaxEntries());break;default :break;}jGen.writeEndObject();}jGen.writeEndArray();}  }
class C{  private PDFDecoder(){}  }
class C{  public int addFile(File file){  if (file == null) {    return DataCloudTags.FILE_ADD_ERROR_EMPTY;  }  if (contains(file.getName())) {    return DataCloudTags.FILE_ADD_ERROR_EXIST_READ_ONLY;  }  if (getStorageList().size() <= 0) {    return DataCloudTags.FILE_ADD_ERROR_STORAGE_FULL;  }  Storage tempStorage=null;  int msg=DataCloudTags.FILE_ADD_ERROR_STORAGE_FULL;  for (int i=0; i < getStorageList().size(); i++) {    tempStorage=getStorageList().get(i);    if (tempStorage.getAvailableSpace() >= file.getSize()) {      tempStorage.addFile(file);      msg=DataCloudTags.FILE_ADD_SUCCESSFUL;      break;    }  }  return msg;}  }
class C{  public Trimmer(){  this(Toolbox.defaultInstance());}  }
class C{  public Builder animate(boolean animate){  mAnimate=animate;  return this;}  }
class C{  public void shouldNotMatch(String pattern){  Matcher matcher=Pattern.compile(pattern,Pattern.MULTILINE).matcher(stdout);  if (matcher.find()) {    reportDiagnosticSummary();    throw new RuntimeException("'" + pattern + "' found in stdout: '"+ matcher.group()+ "' \n");  }  matcher=Pattern.compile(pattern,Pattern.MULTILINE).matcher(stderr);  if (matcher.find()) {    reportDiagnosticSummary();    throw new RuntimeException("'" + pattern + "' found in stderr: '"+ matcher.group()+ "' \n");  }}  }
class C{  public void removeListener(MapDownloadListener listener){  this.mapDownloadListeners.remove(listener);}  }
class C{  public void tableChanged(TableModelEvent e){  super.tableChanged(e);  log.fine("Type=" + e.getType());}  }
class C{  public static void main(String[] args){  String[] a=StdIn.readAllStrings();  Shell.sort(a);  show(a);}  }
class C{  public String toLocalizedPattern(){  return ndf.toLocalizedPattern();}  }
class C{  public void visitAttribute(Attribute attr){  if (mv != null) {    mv.visitAttribute(attr);  }}  }
class C{  @Override public int hashCode(){  int result=algorithm.length();  for (  byte element : key) {    result+=element;  }  return result;}  }
class C{  public static List<String> checkInvalidAddress(LinkedHashMap<String,String> map1,LinkedHashMap<String,String> map2){  List<String> invalidIpv4=validateIPv4Addresses(map1);  List<String> invalidIpv6=validateIPv6Address(map2);  List<String> invalid=new ArrayList<String>();  invalid.addAll(invalidIpv4);  invalid.addAll(invalidIpv6);  if (!invalid.isEmpty()) {    log.warn("There are invalid addresses entered: {}/{}",invalid.size(),invalid);  }  return invalid;}  }
class C{  protected static StringBuilder appendLiteral(StringBuilder sb,Literal lit){  sb.append('"');  sb.append(lit.getLabel().replace("\"","\\\""));  sb.append('"');  if (Literals.isLanguageLiteral(lit)) {    sb.append('@');    sb.append(lit.getLanguage());  } else {    sb.append("^^<");    sb.append(lit.getDatatype().stringValue());    sb.append('>');  }  return sb;}  }
class C{  public static double millisecondsPerMonth(){  return 2.63E9;}  }
class C{  public void stopProximityDetection(ProximityListener proximityListener){  stopLibrarySensorDetection(proximityListener);}  }
class C{  public Shape rectangle(double x,double y,double width,double height){  m_rect.setFrame(x,y,width,height);  return m_rect;}  }
class C{  public static void registerCommand(int messageType,Map<Version,Command> versionToNewCommand){  Command command=null;  for (  Map.Entry<Version,Map<Integer,Command>> entry : ALL_COMMANDS.entrySet()) {    Version version=entry.getKey();    Map<Integer,Command> commandMap=entry.getValue();    Command newerVersion=versionToNewCommand.get(version);    if (newerVersion != null) {      command=newerVersion;    }    if (command != null) {      Command oldCommand=commandMap.get(messageType);      if (oldCommand != null && oldCommand != command) {        throw new InternalGemFireError("Command is already defined int the map for message Type " + MessageType.getString(messageType) + ". Old Value="+ commandMap.get(messageType)+ ", newValue="+ command+ ", version="+ version);      }      commandMap.put(messageType,command);    }  }}  }
class C{  public ScrollButtonDropShadowEffect(){  color=new Color(150,150,150);  angle=0;  distance=0;  size=3;  opacity=0.25f;}  }
class C{  public int firstPageIndex(){  return isRtl() ? pages.size() - 1 : 0;}  }
class C{  public Header header(){  return this.header;}  }
class C{  public Set adviseDestroyRegion(){  return adviseGeneric();}  }
class C{  protected String assertPgFeatures(final String pg,final boolean external,final boolean online,final boolean authorise,final boolean perShipment){  final PaymentGateway proto=ctx().getBean(pg,PaymentGateway.class);  assertEquals(pg + " external feature",external,proto.getPaymentGatewayFeatures().isExternalFormProcessing());  assertEquals(pg + " online feature",online,proto.getPaymentGatewayFeatures().isOnlineGateway());  assertEquals(pg + " authorise feature",authorise,proto.getPaymentGatewayFeatures().isSupportAuthorize());  assertEquals(pg + " authorise per shipment feature",perShipment,proto.getPaymentGatewayFeatures().isSupportAuthorizePerShipment());  return proto.getLabel() + "Label";}  }
class C{  public void clearTemplateCache(){  cache.clear();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:10.579 -0500",hash_original_method="B5BC76A876DDBB43CC54F09A33784608",hash_generated_method="6904ABE9DB46F0850CCC8E3D457C571E") public void postConcat(ColorMatrix postmatrix){  setConcat(postmatrix,this);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static String preencode(String contents){  int length=contents.length();  if (length == 11) {    int sum=0;    for (int i=0; i < 11; ++i) {      sum+=(contents.charAt(i) - '0') * (i % 2 == 0 ? 3 : 1);    }    contents+=(1000 - sum) % 10;  } else   if (length != 12) {    throw new IllegalArgumentException("Requested contents should be 11 or 12 digits long, but got " + contents.length());  }  return '0' + contents;}  }
class C{  public static double[] clone(double[] vector){  int m=vector.length;  double[] res=new double[m];  for (int i=0; i < m; ++i) {    res[i]=vector[i];  }  return (res);}  }
class C{  boolean cancel(int propertyConstant){  if ((mPropertyMask & propertyConstant) != 0 && mNameValuesHolder != null) {    int count=mNameValuesHolder.size();    for (int i=0; i < count; ++i) {      NameValuesHolder nameValuesHolder=mNameValuesHolder.get(i);      if (nameValuesHolder.mNameConstant == propertyConstant) {        mNameValuesHolder.remove(i);        mPropertyMask&=~propertyConstant;        return true;      }    }  }  return false;}  }
class C{  @Override public long downloadToStream(String uri,OutputStream outputStream,final BitmapUtils.BitmapLoadTask<?> task){  if (task == null || task.isCancelled() || task.getTargetContainer() == null)   return -1;  URLConnection urlConnection=null;  BufferedInputStream bis=null;  OtherUtils.trustAllHttpsURLConnection();  long result=-1;  long fileLen=0;  long currCount=0;  try {    if (uri.startsWith("/")) {      FileInputStream fileInputStream=new FileInputStream(uri);      fileLen=fileInputStream.available();      bis=new BufferedInputStream(fileInputStream);      result=System.currentTimeMillis() + this.getDefaultExpiry();    } else     if (uri.startsWith("assets/")) {      InputStream inputStream=this.getContext().getAssets().open(uri.substring(7,uri.length()));      fileLen=inputStream.available();      bis=new BufferedInputStream(inputStream);      result=Long.MAX_VALUE;    } else {      final URL url=new URL(uri);      urlConnection=url.openConnection();      urlConnection.setConnectTimeout(this.getDefaultConnectTimeout());      urlConnection.setReadTimeout(this.getDefaultReadTimeout());      bis=new BufferedInputStream(urlConnection.getInputStream());      result=urlConnection.getExpiration();      result=result < System.currentTimeMillis() ? System.currentTimeMillis() + this.getDefaultExpiry() : result;      fileLen=urlConnection.getContentLength();    }    if (task.isCancelled() || task.getTargetContainer() == null)     return -1;    byte[] buffer=new byte[4096];    int len=0;    BufferedOutputStream out=new BufferedOutputStream(outputStream);    while ((len=bis.read(buffer)) != -1) {      out.write(buffer,0,len);      currCount+=len;      if (task.isCancelled() || task.getTargetContainer() == null)       return -1;      task.updateProgress(fileLen,currCount);    }    out.flush();  } catch (  Throwable e) {    result=-1;    LogUtils.e(e.getMessage(),e);  } finally {    IOUtils.closeQuietly(bis);  }  return result;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public synchronized void reset() throws IOException {  try {    buffer.reset();  } catch (  InvalidMarkException e) {    throw new IOException("No mark set");  }}  }
class C{  public static boolean isChartByDistance(Context context){  return CHART_X_AXIS_DEFAULT.equals(getString(context,R.string.chart_x_axis_key,CHART_X_AXIS_DEFAULT));}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  public TransitionData(S source,S target,S state,E event,Long period,Integer count,Collection<Action<S,E>> actions,Guard<S,E> guard,TransitionKind kind,SecurityRule securityRule){  this.source=source;  this.target=target;  this.state=state;  this.event=event;  this.period=period;  this.count=count;  this.actions=actions;  this.guard=guard;  this.kind=kind;  this.securityRule=securityRule;}  }
class C{  @Override public void drag(int from,int to){}  }
class C{  private static synchronized void loadConditionMappingIfNeeded() throws ConfigurationException {  boolean loadNeeded=false;  long lastModified=-1;  if ((lastModified=configFileLastModified(ConfigurationConstants.CLUSTER_STATE_MAP_DEFAULT_PROPS,defaultStateMappingModified)) > defaultStateMappingModified) {    CLUtils.println(String.format("%s CONDITION MAPPING FROM %s/%s",(defaultStateMappingModified == -1 ? "LOADING" : "RELOADING"),getGlobalConfigDirName(clusterHomeName),ConfigurationConstants.CLUSTER_STATE_MAP_DEFAULT_PROPS),CLLogLevel.detailed);    defaultStateMappingModified=lastModified;    loadNeeded=true;  }  if ((lastModified=configFileLastModified(ConfigurationConstants.CLUSTER_STATE_MAP_OVERRIDE_PROPS,overriddenStateMappingModified)) > overriddenStateMappingModified) {    CLUtils.println(String.format("%s CONDITION MAPPING FROM %s/%s",(overriddenStateMappingModified == -1 ? "LOADING" : "RELOADING"),getGlobalConfigDirName(clusterHomeName),ConfigurationConstants.CLUSTER_STATE_MAP_OVERRIDE_PROPS),CLLogLevel.detailed);    overriddenStateMappingModified=lastModified;    loadNeeded=true;  }  if (!loadNeeded) {    return;  }  TungstenProperties mapping=getConfiguration(ConfigurationConstants.CLUSTER_STATE_MAP_DEFAULT_PROPS);  defaults=getMappings(mapping);  try {    mapping=getConfiguration(ConfigurationConstants.CLUSTER_STATE_MAP_OVERRIDE_PROPS);    overrides=getMappings(mapping);  } catch (  ConfigurationException c) {    overrides=new HashMap<ExecuteQueryStatus,DataServerConditionMapping>();  }  CLUtils.println(showStateMapping(),CLLogLevel.detailed);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType ownerDocument;  doc=(Document)load("staff",false);  ownerDocument=(DocumentType)doc.getOwnerDocument();  assertNull("throw_Null",ownerDocument);}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof MapBean) {    if (getMap() == (MapBean)someObj) {      Debug.message("droplistenersupport","DropListenerSupport: removing the map.");      setMap(null);    }  }}  }
class C{  static int synthStateToGTKState(Region region,int state){  if ((state & SynthConstants.PRESSED) != 0) {    if (region == Region.RADIO_BUTTON || region == Region.CHECK_BOX || region == Region.MENU || region == Region.MENU_ITEM || region == Region.RADIO_BUTTON_MENU_ITEM || region == Region.CHECK_BOX_MENU_ITEM || region == Region.SPLIT_PANE) {      state=SynthConstants.MOUSE_OVER;    } else {      state=SynthConstants.PRESSED;    }  } else   if (region == Region.TABBED_PANE_TAB) {    if ((state & SynthConstants.DISABLED) != 0) {      state=SynthConstants.DISABLED;    } else     if ((state & SynthConstants.SELECTED) != 0) {      state=SynthConstants.ENABLED;    } else {      state=SynthConstants.PRESSED;    }  } else   if ((state & SynthConstants.SELECTED) != 0) {    if (region == Region.MENU) {      state=SynthConstants.MOUSE_OVER;    } else     if (region == Region.RADIO_BUTTON || region == Region.TOGGLE_BUTTON || region == Region.RADIO_BUTTON_MENU_ITEM || region == Region.CHECK_BOX_MENU_ITEM || region == Region.CHECK_BOX || region == Region.BUTTON) {      if ((state & SynthConstants.DISABLED) != 0) {        state=SynthConstants.DISABLED;      } else       if ((state & SynthConstants.MOUSE_OVER) != 0) {        state=SynthConstants.MOUSE_OVER;      } else {        state=SynthConstants.PRESSED;      }    } else {      state=SynthConstants.SELECTED;    }  } else   if ((state & SynthConstants.MOUSE_OVER) != 0) {    state=SynthConstants.MOUSE_OVER;  } else   if ((state & SynthConstants.DISABLED) != 0) {    state=SynthConstants.DISABLED;  } else {    if (region == Region.SLIDER_TRACK) {      state=SynthConstants.PRESSED;    } else {      state=SynthConstants.ENABLED;    }  }  return state;}  }
class C{  public void reinitializeContacts(final EvolutionState state){  initializeContacts(state);  return;}  }
class C{  public static String plnoun(final int quantity,final String noun){  final String enoun=fullForm(noun);  if (quantity == 1) {    return singular(enoun);  } else {    return plural(noun);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MSchedulerPara[");  sb.append(get_ID()).append("-").append(getColumnName()).append("=").append(getParameterDefault()).append("]");  return sb.toString();}  }
class C{  protected AbstractIntegerAttr(final String val) throws BOSHException {  super(parseInt(val));}  }
class C{  private boolean onHomeserverUrlUpdate(){  if (!TextUtils.equals(mHomeServerUrl,getHomeServerUrl())) {    mHomeServerUrl=getHomeServerUrl();    mRegistrationResponse=null;    mHomeserverConnectionConfig=null;    mRegisterButton.setVisibility(View.VISIBLE);    checkFlows();    return true;  }  return false;}  }
class C{  protected void relaxNode(final Node outNode,final PseudoRemovePriorityQueue<Node> pendingNodes){  DijkstraNodeData outData=getData(outNode);  double currTime=outData.getTime();  double currCost=outData.getCost();  if (this.pruneDeadEnds) {    PreProcessDijkstra.DeadEndData ddOutData=getPreProcessData(outNode);    for (    Link l : outNode.getOutLinks().values()) {      relaxNodeLogic(l,pendingNodes,currTime,currCost,ddOutData);    }  } else {    for (    Link l : outNode.getOutLinks().values()) {      relaxNodeLogic(l,pendingNodes,currTime,currCost,null);    }  }}  }
class C{  protected void push(String location,FragmentBuilder builder,Node node){  processInContent(location,builder,-1);  builder.pushNode(node);}  }
class C{  private void changeToLeaf(Tree node){  Map<String,Integer> counterMap=node.getSubtreeCounterMap();  int maximum=0;  String label="";  for (  String entry : counterMap.keySet()) {    int number=counterMap.get(entry);    node.addCount(entry,number);    if (number > maximum) {      maximum=number;      label=entry;    }  }  node.removeChildren();  node.setLeaf(label);}  }
class C{  public TypeAlias createTypeAlias(){  TypeAliasImpl typeAlias=new TypeAliasImpl();  return typeAlias;}  }
class C{  public boolean canBeActiveFor(BytecodeInstruction instruction){  if (!instruction.isUse())   return false;  return sharesVariableWith(instruction);}  }
class C{  private byte[] embiggen(byte[] b,int len){  if (b == null || b.length < len) {    return new byte[len];  } else {    return b;  }}  }
class C{  private void validateFolderName(String folderName) throws IOException {  File tempFile=new File(folderName);  if (tempFile.getParent() != null) {    String errorMsg="Folder name cannot consist of multiple path components separated by a file separator." + " Please use newFolder('MyParentFolder','MyFolder') to create hierarchies of folders";    throw new IOException(errorMsg);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void saveClusterFile(MesosCluster cluster){  String clusterId=cluster.getClusterId();  File dotMinimesosDir=getMinimesosDir();  try {    FileUtils.forceMkdir(dotMinimesosDir);    String clusterIdPath=dotMinimesosDir.getAbsolutePath() + "/" + MINIMESOS_FILE_PROPERTY;    Files.write(Paths.get(clusterIdPath),clusterId.getBytes());    LOGGER.debug("Writing cluster ID " + clusterId + " to "+ clusterIdPath);  } catch (  IOException ie) {    LOGGER.error("Could not write .minimesos folder",ie);    throw new RuntimeException(ie);  }}  }
class C{  public void error(SAXParseException e) throws SAXException {}  }
class C{  protected void connect(String host,int port) throws IOException {  doConnect(new InetSocketAddress(InetAddress.getByName(host),port),0);}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  @Override public boolean storesUpperCaseIdentifiers() throws SQLException {  debugCodeCall("storesUpperCaseIdentifiers");  String m=conn.getMode();  if (m.equals("MySQL")) {    return false;  }  return true;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public AbstractSimulatedDevice createSimulatedDeviceWithImmediatePoll(final String id,final String tenant,final Protocol protocol,final int pollDelaySec,final URL baseEndpoint,final String gatewayToken){  return createSimulatedDevice(id,tenant,protocol,pollDelaySec,baseEndpoint,gatewayToken,true);}  }
class C{  private boolean invokeJavac(Batch batch,List<File> files){  List<String> javacArgs=new ArrayList<String>();  javacArgs.add("-nowarn");  if (batch.debug) {    javacArgs.add("-g");  }  if (batch.verbose) {    javacArgs.add("-verbose");  }  if (batch.bootClassPath != null) {    javacArgs.add("-bootclasspath");    javacArgs.add(batch.bootClassPath);  }  if (batch.extDirs != null) {    javacArgs.add("-extdirs");    javacArgs.add(batch.extDirs);  }  if (batch.classPath != null) {    javacArgs.add("-classpath");    javacArgs.add(batch.classPath);  }  javacArgs.add("-source");  javacArgs.add("1.3");  javacArgs.add("-target");  javacArgs.add("1.1");  for (  File file : files) {    javacArgs.add(file.getPath());  }  int status=com.sun.tools.javac.Main.compile(javacArgs.toArray(new String[javacArgs.size()]),new PrintWriter(out,true));  return status == 0;}  }
class C{  public KdTree(double tolerance){  this.tolerance=tolerance;}  }
class C{  public void initDctNxN(int width,int height) throws IllegalArgumentException {  if (width != height || width <= 0) {    throw new IllegalArgumentException("Dimensions out of range");  }  if (this.nxnTmp != null && this.M != height) {    this.nxnTmp=null;  }  this.N=width;  this.M=height;  this.nxnTmp=new double[height];  initCosArray();}  }
class C{  public void loop(double ellapsedMillis){  for (  SpringSystemListener listener : mListeners) {    listener.onBeforeIntegrate(this);  }  advance(ellapsedMillis);  if (mActiveSprings.isEmpty()) {    mIdle=true;  }  for (  SpringSystemListener listener : mListeners) {    listener.onAfterIntegrate(this);  }  if (mIdle) {    mSpringLooper.stop();  }}  }
class C{  @Override public void onFruitPicked(final Item picked){  getZone().remove(this);  notifyWorldAboutChanges();}  }
class C{  public double noise(double x,double frequency,double amplitude,boolean normalized){  return this.noise(x,0,0,frequency,amplitude,normalized);}  }
class C{  public static void checkFailure() throws InternalGemFireError, Error {  if (failure == null) {    return;  }  notifyWatchDog();  throwFailure();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static void logInitialization(final Logger logger){  logger.logMessage(Level.INFO,"Consumer initialized [LogLevel: " + logger.getLogLevel() + "]");}  }
class C{  public static void processNSDecls(SerializationHandler handler,int src,int type,DTM dtm) throws TransformerException {  try {    if (type == DTM.ELEMENT_NODE) {      for (int namespace=dtm.getFirstNamespaceNode(src,true); DTM.NULL != namespace; namespace=dtm.getNextNamespaceNode(src,namespace,true)) {        String prefix=dtm.getNodeNameX(namespace);        String desturi=handler.getNamespaceURIFromPrefix(prefix);        String srcURI=dtm.getNodeValue(namespace);        if (!srcURI.equalsIgnoreCase(desturi)) {          handler.startPrefixMapping(prefix,srcURI,false);        }      }    } else     if (type == DTM.NAMESPACE_NODE) {      String prefix=dtm.getNodeNameX(src);      String desturi=handler.getNamespaceURIFromPrefix(prefix);      String srcURI=dtm.getNodeValue(src);      if (!srcURI.equalsIgnoreCase(desturi)) {        handler.startPrefixMapping(prefix,srcURI,false);      }    }  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }}  }
class C{  static private long fac1(int j){  long i=j;  if (j < 0)   i=Math.abs(j);  if (i > longFactorials.length)   throw new IllegalArgumentException("Overflow");  long d=1;  while (i > 1)   d*=i--;  if (j < 0)   return -d; else   return d;}  }
class C{  @Override public boolean isInboundDone(){  return isInboundDone || engine_was_closed;}  }
class C{  private InetAddressUtil(){}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public ImmutableMultimap<State,Service> servicesByState(){  return state.servicesByState();}  }
class C{  protected DeserializableList(final Collection<T> collection,final String label){  this(collection.size(),label);  collection.forEach(null);}  }
class C{  public boolean dismissPopup(){  if (isShowingPopup()) {    getListPopupWindow().dismiss();    ViewTreeObserver viewTreeObserver=getViewTreeObserver();    if (viewTreeObserver.isAlive()) {      viewTreeObserver.removeGlobalOnLayoutListener(mOnGlobalLayoutListener);    }  }  return true;}  }
class C{  public void progressChange(MediaPlayer mediaPlayer,float currentTimeInSecs){  _progress=currentTimeInSecs;  progressCurrentTime.setText(LibraryUtils.getSecondsInDDHHMMSS((int)_progress));  if (currentPlayListItem != null && currentPlayListItem.getURL() == null) {    progressSongLength.setText(LibraryUtils.getSecondsInDDHHMMSS((int)mediaPlayer.getDurationInSecs()));  }  if (currentPlayListItem != null && currentPlayListItem.getURL() == null && mediaPlayer.canSeek()) {    setProgressEnabled(true);    float progressUpdate=((PROGRESS.getMaximum() * currentTimeInSecs) / mediaPlayer.getDurationInSecs());    setProgressValue((int)progressUpdate);  }}  }
class C{  public RC5ParameterSpec(int version,int rounds,int wordSize,byte[] iv){  if (iv == null) {    throw new IllegalArgumentException("iv == null");  }  if (iv.length < 2 * (wordSize / 8)) {    throw new IllegalArgumentException("iv.length < 2 * (wordSize / 8)");  }  this.version=version;  this.rounds=rounds;  this.wordSize=wordSize;  this.iv=new byte[2 * (wordSize / 8)];  System.arraycopy(iv,0,this.iv,0,2 * (wordSize / 8));}  }
class C{  public TextFileChange(String name,Document document){  super(name);  this.document=document;}  }
class C{  public static PropertyValidateAsserter assertValidate(VCardProperty property){  return new PropertyValidateAsserter(property);}  }
class C{  protected static int[] buildDefaultNestingOrder(int numStreams,int forStream){  int[] nestingOrder=new int[numStreams - 1];  int count=0;  for (int i=0; i < numStreams; i++) {    if (i == forStream) {      continue;    }    nestingOrder[count++]=i;  }  return nestingOrder;}  }
class C{  public TestStackResponse TestStack(RequestHeader RequestHeader,UnsignedInteger TestId,Integer Iteration,Variant Input) throws ServiceFaultException, ServiceResultException {  TestStackRequest req=new TestStackRequest(RequestHeader,TestId,Iteration,Input);  return (TestStackResponse)channel.serviceRequest(req);}  }
class C{  @Override protected boolean hasImmediateOutputFormat(){  return false;}  }
class C{  private boolean needsValidation(Method controller){  if (controller == null || !hasAnnotation(controller,POST.class)) {    return false;  }switch (ozarkConfig.getCsrfOptions()) {case OFF:    return false;case IMPLICIT:  return true;case EXPLICIT:return hasAnnotation(controller,CsrfValid.class);}return false;}  }
class C{  public void testShiftLeft4(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=45;  byte rBytes[]={48,7,12,-97,-42,-117,37,-85,96,126,36,99,64,0,0,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftLeft(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  @EventHandler(priority=EventPriority.LOWEST) public void onPlayerDeath(PlayerDeathEvent event){  playerDeathWorlds.put(event.getEntity().getUniqueId(),event.getEntity().getWorld());  event.setKeepInventory(true);  event.setKeepLevel(true);}  }
class C{  private void destroyInitializer(){  GdxMaps.clearAll(fieldProcessors,methodProcessors,typeProcessors);  GdxArrays.clearAll(scannedMetaAnnotations,scannedAnnotations,processors,delayedConstructions,manuallyAddedComponents,manuallyAddedProcessors);}  }
class C{  void writeExternal(DataOutput out) throws IOException {  final int timeSecs=(timeEndOfDay ? 86400 : time.toSecondOfDay());  final int stdOffset=standardOffset.getTotalSeconds();  final int beforeDiff=offsetBefore.getTotalSeconds() - stdOffset;  final int afterDiff=offsetAfter.getTotalSeconds() - stdOffset;  final int timeByte=(timeSecs % 3600 == 0 ? (timeEndOfDay ? 24 : time.getHour()) : 31);  final int stdOffsetByte=(stdOffset % 900 == 0 ? stdOffset / 900 + 128 : 255);  final int beforeByte=(beforeDiff == 0 || beforeDiff == 1800 || beforeDiff == 3600 ? beforeDiff / 1800 : 3);  final int afterByte=(afterDiff == 0 || afterDiff == 1800 || afterDiff == 3600 ? afterDiff / 1800 : 3);  final int dowByte=(dow == null ? 0 : dow.getValue());  int b=(month.getValue() << 28) + ((dom + 32) << 22) + (dowByte << 19)+ (timeByte << 14)+ (timeDefinition.ordinal() << 12)+ (stdOffsetByte << 4)+ (beforeByte << 2)+ afterByte;  out.writeInt(b);  if (timeByte == 31) {    out.writeInt(timeSecs);  }  if (stdOffsetByte == 255) {    out.writeInt(stdOffset);  }  if (beforeByte == 3) {    out.writeInt(offsetBefore.getTotalSeconds());  }  if (afterByte == 3) {    out.writeInt(offsetAfter.getTotalSeconds());  }}  }
class C{  public GenericEntry retrieveSettingsEntry(String username,String setting) throws IOException, ServiceException {  URL singleUrl=buildSettingsUrl(username,setting);  return getEntry(singleUrl,GenericEntry.class);}  }
class C{  private void selectArrowTools(){  addDirectedEdge.setEnabled(true);}  }
class C{  public void removeOnItemTouchListener(RecyclerView.OnItemTouchListener listener){  mRecycler.removeOnItemTouchListener(listener);}  }
class C{  public static void checkUnknownSymbol(String text,int sid,SymbolTable symtab){  checkUnknownSymbol(text,symtab);  if (sid != UNKNOWN_SYMBOL_ID) {    checkUnknownSymbol(sid,symtab);  }}  }
class C{  public boolean hasContentLocked(){  return mHasContent;}  }
class C{  final public MutableString delete(final int start,int end){  final int length=length();  if (end > length)   end=length;  if (start > end)   throw new StringIndexOutOfBoundsException();  final int l=end - start;  if (l > 0) {    System.arraycopy(array,start + l,array,start,length - end);    if (hashLength < 0) {      setCapacity(length - l);      hashLength=-1;    } else     hashLength-=l;  }  return this;}  }
class C{  private void gaussianExpectation(SemIm semIm){  double beta[][]=new double[numLatent][numLatent];  double fi[][]=new double[numLatent][numLatent];  double lambdaI[][]=new double[numObserved][numObserved];  double lambdaL[][]=new double[numObserved][numLatent];  double tau[][]=new double[numObserved][numObserved];  for (int i=0; i < numLatent; i++) {    for (int j=0; j < numLatent; j++) {      beta[i][j]=0.;      fi[i][j]=0.;    }  }  for (int i=0; i < numObserved; i++) {    for (int j=0; j < numLatent; j++) {      lambdaL[i][j]=0.;    }  }  for (int i=0; i < numObserved; i++) {    for (int j=0; j < numObserved; j++) {      tau[i][j]=0.;      lambdaI[i][j]=0.;    }  }  List parameters=semIm.getFreeParameters();  double paramValues[]=semIm.getFreeParamValues();  for (int i=0; i < parameters.size(); i++) {    Parameter parameter=(Parameter)parameters.get(i);    if (parameter.getType() == ParamType.COEF) {      Node from=parameter.getNodeA();      Node to=parameter.getNodeB();      if (to.getNodeType() == NodeType.MEASURED && from.getNodeType() == NodeType.LATENT) {        int position1=(Integer)latentNames.get(from.getName());        int position2=(Integer)observableNames.get(to.getName());        lambdaL[position2][position1]=paramValues[i];      } else       if (to.getNodeType() == NodeType.MEASURED && from.getNodeType() == NodeType.MEASURED) {        int position1=(Integer)observableNames.get(from.getName());        int position2=(Integer)observableNames.get(to.getName());        lambdaI[position2][position1]=paramValues[i];      } else       if (to.getNodeType() == NodeType.LATENT) {        int position1=(Integer)latentNames.get(from.getName());        int position2=(Integer)latentNames.get(to.getName());        beta[position2][position1]=paramValues[i];      }    } else     if (parameter.getType() == ParamType.VAR) {      Node exo=parameter.getNodeA();      if (exo.getNodeType() == NodeType.ERROR) {        Iterator ci=semIm.getSemPm().getGraph().getChildren(exo).iterator();        exo=(Node)ci.next();      }      if (exo.getNodeType() == NodeType.LATENT) {        fi[((Integer)latentNames.get(exo.getName()))][((Integer)latentNames.get(exo.getName()))]=paramValues[i];      } else {        tau[((Integer)observableNames.get(exo.getName()))][((Integer)observableNames.get(exo.getName()))]=paramValues[i];      }    } else     if (parameter.getType() == ParamType.COVAR) {      Node exo1=parameter.getNodeA();      Node exo2=parameter.getNodeB();      exo1=semIm.getSemPm().getGraph().getVarNode(exo1);      exo2=semIm.getSemPm().getGraph().getVarNode(exo2);      tau[((Integer)observableNames.get(exo1.getName()))][((Integer)observableNames.get(exo2.getName()))]=tau[((Integer)observableNames.get(exo2.getName()))][((Integer)observableNames.get(exo1.getName()))]=paramValues[i];    }  }  double identity[][]=new double[numLatent][numLatent];  for (int i=0; i < numLatent; i++) {    for (int j=0; j < numLatent; j++) {      if (i == j) {        identity[i][j]=1.;      } else {        identity[i][j]=0.;      }    }  }  double identityI[][]=new double[numObserved][numObserved];  for (int i=0; i < numObserved; i++) {    for (int j=0; j < numObserved; j++) {      if (i == j) {        identityI[i][j]=1.;      } else {        identityI[i][j]=0.;      }    }  }  double iMinusB[][]=MatrixUtils.inverse(MatrixUtils.subtract(identity,beta));  double latentImpliedCovar[][]=MatrixUtils.product(iMinusB,MatrixUtils.product(fi,MatrixUtils.transpose(iMinusB)));  double iMinusI[][]=MatrixUtils.inverse(MatrixUtils.subtract(identityI,lambdaI));  double indImpliedCovar[][]=MatrixUtils.product(MatrixUtils.product(iMinusI,MatrixUtils.sum(MatrixUtils.product(MatrixUtils.product(lambdaL,latentImpliedCovar),MatrixUtils.transpose(lambdaL)),tau)),MatrixUtils.transpose(iMinusI));  double loadingLatentCovar[][]=MatrixUtils.product(iMinusI,MatrixUtils.product(lambdaL,latentImpliedCovar));  double smallDelta[][]=MatrixUtils.product(MatrixUtils.inverse(indImpliedCovar),loadingLatentCovar);  double bigDelta[][]=MatrixUtils.subtract(latentImpliedCovar,MatrixUtils.product(MatrixUtils.transpose(loadingLatentCovar),smallDelta));  this.Cyz=MatrixUtils.product(this.Cyy,smallDelta);  this.Czz=MatrixUtils.sum(MatrixUtils.product(MatrixUtils.transpose(smallDelta),Cyz),bigDelta);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public TraceRecord_ createTraceRecord_(){  TraceRecord_Impl traceRecord_=new TraceRecord_Impl();  return traceRecord_;}  }
class C{  public Component add(String title,Component component){  if (!(component instanceof UIResource)) {    addTab(title,component);  } else {    super.add(title,component);  }  return component;}  }
class C{  public static Lattice<String> createStringLatticeFromString(String data,JoshuaConfiguration config){  Map<Integer,Node<String>> nodes=new HashMap<>();  Pattern nodePattern=Pattern.compile("(.+?)\\((\\(.+?\\),)\\)(.*)");  Pattern arcPattern=Pattern.compile("\\('(.+?)',(\\d+.\\d+),(\\d+)\\),(.*)");  Matcher nodeMatcher=nodePattern.matcher(data);  int nodeID=-1;  while (nodeMatcher.matches()) {    String nodeData=nodeMatcher.group(2);    String remainingData=nodeMatcher.group(3);    nodeID++;    Node<String> currentNode;    if (nodes.containsKey(nodeID)) {      currentNode=nodes.get(nodeID);    } else {      currentNode=new Node<>(nodeID);      nodes.put(nodeID,currentNode);    }    LOG.debug("Node : {}",nodeID);    Matcher arcMatcher=arcPattern.matcher(nodeData);    while (arcMatcher.matches()) {      String arcLabel=arcMatcher.group(1);      float arcWeight=Float.valueOf(arcMatcher.group(2));      int destinationNodeID=nodeID + Integer.parseInt(arcMatcher.group(3));      Node<String> destinationNode;      if (nodes.containsKey(destinationNodeID)) {        destinationNode=nodes.get(destinationNodeID);      } else {        destinationNode=new Node<>(destinationNodeID);        nodes.put(destinationNodeID,destinationNode);      }      String remainingArcs=arcMatcher.group(4);      LOG.debug("\t{} {} {}",arcLabel,arcWeight,destinationNodeID);      currentNode.addArc(destinationNode,arcWeight,arcLabel);      arcMatcher=arcPattern.matcher(remainingArcs);    }    nodeMatcher=nodePattern.matcher(remainingData);  }  List<Node<String>> nodeList=new ArrayList<>(nodes.values());  Collections.sort(nodeList,new NodeIdentifierComparator());  LOG.debug("Nodelist={}",nodeList);  return new Lattice<>(nodeList,config);}  }
class C{  public boolean action() throws IOException, ServletException {  if (getMode() == null) {    String s=WebUtil.getParameter(m_request,P_Action);    setMode(s);  }  boolean deleteCookie="deleteCookie".equals(m_mode);  if (deleteCookie) {    log.fine("** deleteCookie");    WebUtil.deleteCookieWebUser(m_request,m_response,COOKIE_NAME);  }  boolean logout="logout".equals(m_mode);  if (logout || deleteCookie) {    log.fine("** logout");    if (m_session != null) {      MSession cSession=MSession.get(m_ctx,false);      if (cSession != null)       cSession.logout();      m_wu=(WebUser)m_session.getAttribute(WebUser.NAME);      if (m_wu != null)       m_wu.logout();      m_session.removeAttribute(WebUser.NAME);      m_session.setMaxInactiveInterval(1);      m_session.invalidate();    }    WebUtil.createForwardPage(m_response,"Logout","http://" + m_request.getServerName() + "/",2);  } else   if ("SendEMail".equals(m_mode)) {    log.info("** send mail");    m_wu=WebUser.get(m_ctx,m_email);    if (!m_wu.isEMailValid())     m_wu.setPasswordMessage("EMail not found in system"); else {      m_wu.setPassword();      String msg=WebUtil.sendEMail(m_request,m_wu,MMailMsg.MAILMSGTYPE_UserPassword,new Object[]{m_request.getServerName(),m_wu.getName(),WebUtil.getFrom(m_request),m_wu.getPassword()});      if (EMail.SENT_OK.equals(msg))       m_wu.setPasswordMessage("EMail sent"); else       m_wu.setPasswordMessage("Problem sending EMail: " + msg);    }    m_forward=getLogin_RelURL();  } else   if ("Login".equals(m_mode)) {    log.info("** login " + m_email + "/"+ m_password);    WebUtil.addCookieWebUser(m_request,m_response,m_email,COOKIE_NAME);    m_wu=WebUser.get(m_ctx,m_email,m_password,false);    m_wu.login(m_password);    if (m_wu.isLoggedIn()) {      if (m_forward == null || m_forward.equals(getLogin_RelURL()))       m_forward="/index.jsp";      MSession cSession=MSession.get(m_ctx,m_request.getRemoteAddr(),m_request.getRemoteHost(),m_session.getId());      if (cSession != null)       cSession.setWebStoreSession(true);    } else {      m_forward=getLogin_RelURL();      log.fine("- PasswordMessage=" + m_wu.getPasswordMessage());    }    if (m_session == null)     m_session=m_request.getSession(true);    m_session.setAttribute(WebInfo.NAME,new WebInfo(m_ctx,m_wu));  } else   if ("LoginNew".equals(m_mode)) {    log.info("** loginNew");    WebUtil.addCookieWebUser(m_request,m_response,"",COOKIE_NAME);    m_wu=WebUser.get(m_ctx,"");    m_forward=getLogin_RelURL();  } else   if ("Submit".equals(m_mode)) {    log.info("** submit " + m_email + "/"+ m_password+ " - AddrConf="+ m_addressConfirm);    if (m_wu != null && m_wu.isLoggedIn() && m_addressConfirm)     ; else     m_wu=WebUser.get(m_ctx,m_email,null,false);    if (m_wu.getAD_User_ID() != 0) {      String passwordNew=WebUtil.getParameter(m_request,"PasswordNew");      if (passwordNew == null)       passwordNew="";      boolean passwordChange=passwordNew.length() > 0 && !passwordNew.equals(m_password);      if (m_addressConfirm || m_wu.login(m_password)) {        if (m_wu.isLoggedIn()) {          MSession cSession=MSession.get(m_ctx,m_request.getRemoteAddr(),m_request.getRemoteHost(),m_session.getId());          if (cSession != null)           cSession.setWebStoreSession(true);        }        if (passwordChange)         log.fine("- update Pwd " + m_email + ", Old="+ m_password+ ", DB="+ m_wu.getPassword()+ ", New="+ passwordNew);        if (WebUtil.updateFields(m_request,m_wu,passwordChange)) {          if (passwordChange)           m_session.setAttribute(WebSessionCtx.HDR_MESSAGE,"Password changed");        } else {          m_forward=getLogin_RelURL();          log.warning(" - update not done");        }      } else {        m_forward=getLogin_RelURL();        m_session.setAttribute(WebSessionCtx.HDR_MESSAGE,"Email/Password not correct");        log.warning(" - update not confirmed");      }    } else {      log.fine("** new " + m_email + "/"+ m_password);      m_wu.setEmail(m_email);      m_wu.setPassword(m_password);      if (WebUtil.updateFields(m_request,m_wu,true)) {        if (m_wu.login(m_password)) {          m_session.setAttribute(WebInfo.NAME,new WebInfo(m_ctx,m_wu));          MSession cSession=MSession.get(m_ctx,m_request.getRemoteAddr(),m_request.getRemoteHost(),m_session.getId());          if (cSession != null)           cSession.setWebStoreSession(true);          WebUtil.resendCode(m_request,m_wu);        } else         m_forward=getLogin_RelURL();      } else {        log.fine("- failed - " + m_wu.getSaveErrorMessage() + " - "+ m_wu.getPasswordMessage());        m_forward=getLogin_RelURL();      }    }    if (m_wu != null)     m_session.setAttribute(WebInfo.NAME,new WebInfo(m_ctx,m_wu));  } else   if ("email".equals(m_mode)) {    String email=WebUtil.getParameter(m_request,"EMail");    if (email == null)     email="";    email=email.trim();    String emailNew=WebUtil.getParameter(m_request,"EMailNew");    if (emailNew == null)     emailNew="";    email=email.trim();    if ((emailNew.length() == 0) || (emailNew.equals(email))) {      setMessage("New EMail invalid.");      return false;    }    if (!WebUtil.isEmailValid(emailNew)) {      setMessage("New EMail invalid.");      return false;    }    m_wu.setEmail(emailNew);    m_wu.save();    m_session.setAttribute(WebSessionCtx.HDR_MESSAGE,"EMail Address Changed");    m_session.setAttribute(WebInfo.NAME,new WebInfo(m_ctx,m_wu));  } else   if ("password".equals(m_mode)) {    if (m_wu == null) {      log.warning("No web user");      return false;    }    String password=WebUtil.getParameter(m_request,"Password");    if (password == null)     password="";    password=password.trim();    if (!m_wu.login(password)) {      setMessage("Email/Password not correct");      return false;    }    MSession cSession=MSession.get(m_ctx,m_request.getRemoteAddr(),m_request.getRemoteHost(),m_session.getId());    if (cSession != null)     cSession.setWebStoreSession(true);    String passwordNew=WebUtil.getParameter(m_request,"PasswordNew");    if (passwordNew == null)     passwordNew="";    password=password.trim();    if ((passwordNew.length() == 0) || (passwordNew.equals(password))) {      setMessage("New Password invalid.");      return false;    }    m_wu.setPasswordMessage(null);    m_wu.setPassword(passwordNew);    if (m_wu.getPasswordMessage() != null) {      setMessage("New Password invalid.");      return false;    }    m_wu.save();    if (m_forward == null || m_forward.equals(getLogin_RelURL()))     m_forward="/index.jsp";    m_session.setAttribute(WebSessionCtx.HDR_MESSAGE,"Password Changed");    m_session.setAttribute(WebInfo.NAME,new WebInfo(m_ctx,m_wu));  } else   if ("address".equals(m_mode)) {    m_wu.setC_Country_ID(WebUtil.getParamOrNull(m_request,"C_Country_ID"));    m_wu.setC_Region_ID(WebUtil.getParamOrNull(m_request,"C_Region_ID"));    m_wu.setRegionName(WebUtil.getParamOrNull(m_request,"RegionName"));    m_wu.setName(WebUtil.getParamOrNull(m_request,"Name"));    m_wu.setCompany(WebUtil.getParamOrNull(m_request,"Company"));    m_wu.setTitle(WebUtil.getParamOrNull(m_request,"Title"));    m_wu.setAddress(WebUtil.getParamOrNull(m_request,"Address"));    m_wu.setAddress2(WebUtil.getParamOrNull(m_request,"Address2"));    m_wu.setCity(WebUtil.getParamOrNull(m_request,"City"));    m_wu.setPostal(WebUtil.getParamOrNull(m_request,"Postal"));    m_wu.setPhone(WebUtil.getParamOrNull(m_request,"Phone"));    m_wu.setFax(WebUtil.getParamOrNull(m_request,"Fax"));    m_wu.save();    m_session.setAttribute(WebSessionCtx.HDR_MESSAGE,"Contact Information Changed");    m_session.setAttribute(WebInfo.NAME,new WebInfo(m_ctx,m_wu));  } else   if ("EMailVerify".equals(m_mode)) {    if (m_wu == null) {      log.warning("No web user");      return false;    }    log.info(m_forward + " - " + m_wu.toString());    String cmd=WebUtil.getParameter(m_request,"ReSend");    if (cmd != null && cmd.length() > 1)     WebUtil.resendCode(m_request,m_wu); else     m_wu.setEMailVerifyCode(WebUtil.getParameter(m_request,"VerifyCode"),m_request.getRemoteAddr());  } else   if ("bankaccountach".equals(m_mode)) {    if (m_wu == null) {      log.warning("No web user");      return false;    }    log.info(m_forward + " - " + m_wu.toString());    MBPBankAccount thisBPBankAccount=m_wu.getBankAccount(true);    thisBPBankAccount.setIsACH(true);    thisBPBankAccount.setA_City(WebUtil.getParamOrNull(m_request,"A_City"));    thisBPBankAccount.setA_Name(WebUtil.getParamOrNull(m_request,"A_Name"));    thisBPBankAccount.setAccountNo(WebUtil.getParamOrNull(m_request,"AccountNo"));    thisBPBankAccount.setRoutingNo(WebUtil.getParamOrNull(m_request,"RoutingNo"));    thisBPBankAccount.save();  } else   log.log(Level.WARNING,"Unknown request='" + m_mode + "'");  return true;}  }
class C{  public DMSLatLonPoint(int lat_degrees,int lat_minutes,double lat_seconds,int lon_degrees,int lon_minutes,double lon_seconds){  this(lat_degrees < 0,Math.abs(lat_degrees),lat_minutes,lat_seconds,lon_degrees < 0,Math.abs(lon_degrees),lon_minutes,lon_seconds);}  }
class C{  private ResultPoint[] centerEdges(ResultPoint y,ResultPoint z,ResultPoint x,ResultPoint t){  float yi=y.getX();  float yj=y.getY();  float zi=z.getX();  float zj=z.getY();  float xi=x.getX();  float xj=x.getY();  float ti=t.getX();  float tj=t.getY();  if (yi < width / 2.0f) {    return new ResultPoint[]{new ResultPoint(ti - CORR,tj + CORR),new ResultPoint(zi + CORR,zj + CORR),new ResultPoint(xi - CORR,xj - CORR),new ResultPoint(yi + CORR,yj - CORR)};  } else {    return new ResultPoint[]{new ResultPoint(ti + CORR,tj + CORR),new ResultPoint(zi + CORR,zj - CORR),new ResultPoint(xi - CORR,xj + CORR),new ResultPoint(yi - CORR,yj - CORR)};  }}  }
class C{  public ParsingResult clone(){  ParsingResult result=new ParsingResult();  result.StatusCode=StatusCode;  result.DataStatusCodes=DataStatusCodes == null ? null : DataStatusCodes.clone();  result.DataDiagnosticInfos=DataDiagnosticInfos == null ? null : DataDiagnosticInfos.clone();  return result;}  }
class C{  protected File copyResource(File dir,String resName) throws Exception {  BufferedOutputStream buffOut=null;  FileOutputStream fileOut;  InputStream in=null;  File file=null;  byte[] buffer;  int count;  file=new File(dir,resName);  try {    fileOut=new FileOutputStream(file);    buffOut=new BufferedOutputStream(fileOut);    in=getClass().getResourceAsStream(resName);    buffer=new byte[1024];    while ((count=in.read(buffer)) >= 0) {      buffOut.write(buffer,0,count);    }    buffOut.flush();  }  finally {    if (buffOut != null) {      try {        buffOut.close();      } catch (      IOException e) {      }    }    if (in != null) {      try {        in.close();      } catch (      IOException e) {      }    }  }  return file;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().rew2();  return null;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public Vertex findReferenceBy(Vertex source,Vertex type){  Vertex result=null;  List<Relationship> relationships=source.getNetwork().findAllRelationshipsTo(source,type);  for (  Relationship relationship : relationships) {    if (!relationship.isInverse() && ((result == null) || (relationship.getSource().getConsciousnessLevel() > result.getConsciousnessLevel()))) {      result=relationship.getSource();    }  }  if (result != null) {    source.getNetwork().getBot().log(this,"Found reference",Level.FINER,source,type,result);  } else {    result=source.getNetwork().createVertex(Primitive.NULL);    source.getNetwork().getBot().log(this,"No references",Level.FINER,source,type);  }  return result;}  }
class C{  public void add(final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  if (last == null) {    first=insns.first;    last=insns.last;  } else {    AbstractInsnNode elem=insns.first;    last.next=elem;    elem.prev=last;    last=insns.last;  }  cache=null;  insns.removeAll(false);}  }
class C{  public long readUTF8EncodedLong(){  int length=0;  long value=data[position];  for (int j=7; j >= 0; j--) {    if ((value & (1 << j)) == 0) {      if (j < 6) {        value&=(1 << j) - 1;        length=7 - j;      } else       if (j == 7) {        length=1;      }      break;    }  }  if (length == 0) {    throw new NumberFormatException("Invalid UTF-8 sequence first byte: " + value);  }  for (int i=1; i < length; i++) {    int x=data[position + i];    if ((x & 0xC0) != 0x80) {      throw new NumberFormatException("Invalid UTF-8 sequence continuation byte: " + value);    }    value=(value << 6) | (x & 0x3F);  }  position+=length;  return value;}  }
class C{  public void stop(boolean cancel) throws IgniteCheckedException {  List<GridComponent> comps=components();  for (ListIterator<GridComponent> it=comps.listIterator(comps.size()); it.hasPrevious(); ) {    GridComponent comp=it.previous();    comp.stop(cancel);  }}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;}  }
class C{  public static double area2(Point2D a,Point2D b,Point2D c){  return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);}  }
class C{  public Expression order(){  if (precedence() > left.precedence()) {    UnaryExpression e=(UnaryExpression)left;    left=e.right;    e.right=order();    return e;  }  return this;}  }
class C{  public Builder withKerberosDelegationToken(String delegationToken){  this.delegationToken=delegationToken;  return this;}  }
class C{  public RangeConditionBuilder includeUpper(Boolean includeUpper){  this.includeUpper=includeUpper;  return this;}  }
class C{  public static SegmentPart parse(String string) throws IOException {  int idx=string.indexOf('/');  if (idx == -1) {    throw new IOException("Invalid SegmentPart: '" + string + "'");  }  String segment=string.substring(0,idx);  String part=string.substring(idx + 1);  return new SegmentPart(segment,part);}  }
class C{  public PeerAddress(NetworkParameters params,InetAddress addr,int port){  this(addr,port,params.getProtocolVersionNum(NetworkParameters.ProtocolVersion.CURRENT));}  }
class C{  protected void emit_NoLineTerminator_NO_LINE_TERMINATORTerminalRuleCall_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  private void initData(String baseName,Locale l){  StringBuffer sb=new StringBuffer(baseName);  sb.append("_").append(l.getLanguage()).append(".txt");  String resource=sb.toString();  InputStream is=null;  try {    is=ClassPathLoader.getLatest().getResourceAsStream(getClass(),resource);  } catch (  SecurityException se) {    System.err.println("A SecurityException occurred while attempting to load the resource bundle, defaulting to English." + se.toString());    se.printStackTrace();    System.err.flush();  }  if (is == null) {    data=null;  } else {    data=readDataFile(is);  }}  }
class C{  public TestedProjects createTestedProjects(){  TestedProjectsImpl testedProjects=new TestedProjectsImpl();  return testedProjects;}  }
class C{  public static synchronized int generateLocalRtpPort(RcsSettings rcsSettings){  return generateLocalUdpPort(rcsSettings.getDefaultRtpPort());}  }
class C{  public static void requestPermission(CordovaPlugin plugin,int requestCode,String permission){  PermissionHelper.requestPermissions(plugin,requestCode,new String[]{permission});}  }
class C{  public void mark(int readLimit){  bfdi.mark(readLimit);}  }
class C{  public void renameAttributeValue(int att,int val,String name){  Attribute newAtt=(Attribute)attribute(att).copy();  ArrayList<Attribute> newVec=new ArrayList<Attribute>(numAttributes());  newAtt.setValue(val,name);  for (  Attribute attr : m_Attributes) {    if (attr.index() == att) {      newVec.add(newAtt);    } else {      newVec.add(attr);    }  }  m_Attributes=newVec;}  }
class C{  public static void reset(){  if (isEnabled())   init();}  }
class C{  public void addCutover(DateTimeZoneBuilder builder,int year){  builder.addCutover(year,iZoneChar,iMonthOfYear,iDayOfMonth,iDayOfWeek,iAdvanceDayOfWeek,iMillisOfDay);}  }
class C{  protected void addDistinct(double value,int count,double weight){  if (count > 0) {    if (count == 1) {      uniqueCount++;    }    if (Utils.eq(value,(double)((int)value))) {      intCount+=count;    } else {      realCount+=count;    }    if (nominalCounts != null) {      nominalCounts[(int)value]=count;      nominalWeights[(int)value]=weight;    }    if (numericStats != null) {      numericStats.add(value,weight);      numericStats.calculateDerived();    }  }  distinctCount++;}  }
class C{  public int enter(){  return ++depth;}  }
class C{  public static EdgeRing findEdgeRingContaining(EdgeRing testEr,List shellList){  LinearRing testRing=testEr.getRing();  Envelope testEnv=testRing.getEnvelopeInternal();  Coordinate testPt=testRing.getCoordinateN(0);  EdgeRing minShell=null;  Envelope minShellEnv=null;  for (Iterator it=shellList.iterator(); it.hasNext(); ) {    EdgeRing tryShell=(EdgeRing)it.next();    LinearRing tryShellRing=tryShell.getRing();    Envelope tryShellEnv=tryShellRing.getEnvelopeInternal();    if (tryShellEnv.equals(testEnv))     continue;    if (!tryShellEnv.contains(testEnv))     continue;    testPt=CoordinateArrays.ptNotInList(testRing.getCoordinates(),tryShellRing.getCoordinates());    boolean isContained=false;    if (CGAlgorithms.isPointInRing(testPt,tryShellRing.getCoordinates()))     isContained=true;    if (isContained) {      if (minShell == null || minShellEnv.contains(tryShellEnv)) {        minShell=tryShell;        minShellEnv=minShell.getRing().getEnvelopeInternal();      }    }  }  return minShell;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  for (int i=0; i < numVertices; i++) {    if (!info[i].forward.isEmpty()) {      Node<EdgeInfo> n=info[i].forward.head();      while (n != null) {        sb.append(n.value()).append('\n');        n=n.next();      }    }  }  return sb.toString() + "\ncost:" + getCost()+ "\nflow:"+ getFlow();}  }
class C{  public COpenAction(){  super("Open");}  }
class C{  public void delete(Name name,int type,Tokenizer tokenizer) throws IOException {  newUpdate(Record.fromString(name,type,DClass.NONE,0,tokenizer,origin));}  }
class C{  private void addOptionList(final List<String> args,final String optName,final List<String> values){  for (  final String value : values) {    if (value != null && !value.isEmpty()) {      args.add(optName);      args.add(value);    }  }}  }
class C{  public OrderedThreadPoolExecutor(int corePoolSize,int maximumPoolSize){  this(corePoolSize,maximumPoolSize,DEFAULT_KEEP_ALIVE,TimeUnit.SECONDS,Executors.defaultThreadFactory(),null);}  }
class C{  protected File createTestFile(String filename) throws IOException {  int lastSlash=filename.lastIndexOf('/');  String name=lastSlash >= 0 ? filename.substring(lastSlash) : filename;  File file=folder.newFile(name);  file.getParentFile().mkdirs();  Files.write(file.toPath(),getTestResource(filename).getBytes(StandardCharsets.UTF_8));  return file;}  }
class C{  @Override public final boolean equals(Object obj){  return super.equals(obj);}  }
class C{  private static TetradLoggerConfig configureLogger(Element logger){  Elements elements=logger.getChildElements();  List<TetradLoggerConfig.Event> events=new LinkedList<>();  List<String> defaultLog=new LinkedList<>();  for (int i=0; i < elements.size(); i++) {    Element event=elements.get(i);    String eventId=event.getAttributeValue("id");    String description=event.getAttributeValue("description");    String defaultOption=event.getAttributeValue("default");    if (defaultOption != null && defaultOption.equals("on")) {      defaultLog.add(eventId);    }    events.add(new DefaultTetradLoggerConfig.DefaultEvent(eventId,description));  }  TetradLoggerConfig config=new DefaultTetradLoggerConfig(events);  for (  String event : defaultLog) {    config.setEventActive(event,true);  }  return config;}  }
class C{  private void ShiftRow(byte[] shiftsSC){  A1=shift(A1,shiftsSC[1]);  A2=shift(A2,shiftsSC[2]);  A3=shift(A3,shiftsSC[3]);}  }
class C{  public static List<Integer> extractOriginalSequenceIDs(File featureVectorsFile) throws IOException {  List<Integer> result=new ArrayList<>();  Iterator<List<String>> comments=extractComments(featureVectorsFile);  while (comments.hasNext()) {    List<String> comment=comments.next();    result.add(Integer.valueOf(comment.get(1)));  }  return result;}  }
class C{  public InvalidDatabaseException(final String msg){  super(msg);}  }
class C{  private ListResourceBundle loadResourceBundle(String resourceBundle) throws MissingResourceException {  m_resourceBundleName=resourceBundle;  Locale locale=getLocale();  ListResourceBundle lrb;  try {    ResourceBundle rb=ResourceBundle.getBundle(m_resourceBundleName,locale);    lrb=(ListResourceBundle)rb;  } catch (  MissingResourceException e) {    try {      lrb=(ListResourceBundle)ResourceBundle.getBundle(m_resourceBundleName,new Locale("en","US"));    } catch (    MissingResourceException e2) {      throw new MissingResourceException("Could not load any resource bundles." + m_resourceBundleName,m_resourceBundleName,"");    }  }  m_resourceBundle=lrb;  return lrb;}  }
class C{  public Word(){}  }
class C{  @Pure public Atom parseForArrayElementDescriptor(){  if (VM.VerifyAssertions) {    VM._assert(val.length > 1,"An array descriptor has at least two characters");    VM._assert(val[0] == '[',"An array descriptor must start with '['");  }  return findOrCreate(val,1,val.length - 1,toUnicodeStringInternal());}  }
class C{  public JSONArray put(long value){  this.put(new Long(value));  return this;}  }
class C{  private Object[] marshall(Env env,Value[] values){  assert values.length == signature.length : "Signature doesn't match params";  Object[] marshalled=new Object[values.length + 1];  marshalled[0]=env;  for (int i=0; i < values.length; i++) {    marshalled[i + 1]=values[i].marshall(signature[i]);  }  return marshalled;}  }
class C{  public static Text valueOf(double d,int digits,boolean scientific,boolean showZero){  TextBuilder tb=new TextBuilder();  return tb.append(d,digits,scientific,showZero).toText();}  }
class C{  @Override public long executeLargeUpdate() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    long returnVal=-1;    checkStreamability();    if (this.callingStoredFunction) {      execute();      return -1;    }    setInOutParamsOnServer();    setOutParams();    returnVal=super.executeLargeUpdate();    retrieveOutParams();    return returnVal;  }}  }
class C{  public boolean containsAccession(String methodAccession){  return methodAccessionToEntry.containsKey(methodAccession);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.TRANSFORMER__NAME:    setName((String)newValue);  return;case EipPackage.TRANSFORMER__TO_CHANNELS:getToChannels().clear();getToChannels().addAll((Collection<? extends Channel>)newValue);return;case EipPackage.TRANSFORMER__FROM_CHANNELS:getFromChannels().clear();getFromChannels().addAll((Collection<? extends Channel>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean hasCustomExecutor(){  return customExecutor;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  return sage.plugin.CorePluginManager.getInstance().getLatestRepoPlugin(s);}  }
class C{  public FixElevationCommand(Server server){  super(server,"fixelevation","Fix elevation of any units that are messed up");}  }
class C{  private void updateVirtualNetwork(AssignFloatingIpToVmWorkflowDocument state){  VirtualNetworkService.State virtualNetworkPatchState=new VirtualNetworkService.State();  virtualNetworkPatchState.natRuleToFloatingIpMap=state.taskServiceEntity.natRuleToFloatingIpMap;  ServiceHostUtils.getCloudStoreHelper(getHost()).createPatch(state.taskServiceEntity.documentSelfLink).setBody(virtualNetworkPatchState).setCompletion(null).sendWith(this);}  }
class C{  public GphotoDataImpl(ExtensionPoint extensionPoint){  this.extPoint=extensionPoint;  this.extClass=extensionPoint.getClass();}  }
class C{  public Boolean isDisabled(){  return disabled;}  }
class C{  public boolean hasMinuteChanged(WatchFaceTime otherTime){  return minute != otherTime.minute;}  }
class C{  public ServiceDocument(){  super(KEY);}  }
class C{  public ApacheCommonsLog(org.apache.commons.logging.Log logger){  this.logger=logger;}  }
class C{  public ProcessBuilder command(String... command){  return command(new ArrayList<String>(Arrays.asList(command)));}  }
class C{  public static CCSprite sprite(CCTexture2D texture,CGRect rect){  return new CCSprite(texture,rect);}  }
class C{  public void addLStore(int local){  xop(ByteCode.LSTORE_0,ByteCode.LSTORE,local);}  }
class C{  public boolean isConfigurable(){  return true;}  }
class C{  public boolean hasLastModified(){  return fieldSetFlags()[2];}  }
class C{  @Override public BigDataMemAllocator enableActiveGC(long timeout){  m_activegc=true;  m_gctimeout=timeout;  return this;}  }
class C{  public NodeRepresentation(){}  }
class C{  @SuppressWarnings("unchecked") public static <T>Consumer<T> discard(){  return (Consumer<T>)DISCARDER;}  }
class C{  public static <T>Observable.Transformer<T,T> subscribeOnIoThreadTransformer(){  return null;}  }
class C{  public void clearPieSegments(){  mPieSegmentList.clear();}  }
class C{  protected void applyPatch(S currentState,S patchState) throws Throwable {  T currentTaskState=ServiceDocumentUtils.getTaskState(currentState);  E currentSubstage=ServiceDocumentUtils.getTaskStateSubStage(currentTaskState);  T patchTaskState=ServiceDocumentUtils.getTaskState(patchState);  E patchSubstage=ServiceDocumentUtils.getTaskStateSubStage(patchTaskState);  if (currentTaskState.stage != patchTaskState.stage || currentSubstage != patchSubstage) {    String currentStage=currentTaskState.stage.toString();    if (currentSubstage != null) {      currentStage+=":" + currentSubstage;    }    String patchStage=patchTaskState.stage.toString();    if (patchSubstage != null) {      patchStage+=":" + patchSubstage;    }    ServiceUtils.logInfo(this,"Moving from %s to stage %s",currentStage,patchStage);    ServiceDocumentUtils.setTaskState(currentState,patchTaskState);  }  PatchUtils.patchState(currentState,patchState);}  }
class C{  public IOException(java.lang.String s){  super(s);}  }
class C{  public static synchronized boolean isBodyColorRandom(){  return bodyColorRandom;}  }
class C{  public synchronized boolean loadPrivateKey(){  if (!has("private_key") || !has("key_algorithm"))   return false;  String encodedKey=getString("private_key");  String algorithm=getString("key_algorithm");  try {    PKCS8EncodedKeySpec keySpec=new PKCS8EncodedKeySpec(Base64.getDecoder().decode(encodedKey));    PrivateKey priv=KeyFactory.getInstance(algorithm).generatePrivate(keySpec);    private_key=priv;    key_algorithm=algorithm;    return true;  } catch (  NoSuchAlgorithmException|InvalidKeySpecException e) {    Log.getLog().warn(e);  }  return false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.EQUALS_OP___EQUALS_OP_1:    return EQUALS_OP_1_EDEFAULT == null ? equalsOp_1 != null : !EQUALS_OP_1_EDEFAULT.equals(equalsOp_1);}return super.eIsSet(featureID);}  }
class C{  Permission resolve(Permission p,java.security.cert.Certificate certs[]){  if (this.certs != null) {    if (certs == null) {      return null;    }    boolean match;    for (int i=0; i < this.certs.length; i++) {      match=false;      for (int j=0; j < certs.length; j++) {        if (this.certs[i].equals(certs[j])) {          match=true;          break;        }      }      if (!match)       return null;    }  }  try {    Class<?> pc=p.getClass();    if (name == null && actions == null) {      try {        Constructor<?> c=pc.getConstructor(PARAMS0);        return (Permission)c.newInstance(new Object[]{});      } catch (      NoSuchMethodException ne) {        try {          Constructor<?> c=pc.getConstructor(PARAMS1);          return (Permission)c.newInstance(new Object[]{name});        } catch (        NoSuchMethodException ne1) {          Constructor<?> c=pc.getConstructor(PARAMS2);          return (Permission)c.newInstance(new Object[]{name,actions});        }      }    } else {      if (name != null && actions == null) {        try {          Constructor<?> c=pc.getConstructor(PARAMS1);          return (Permission)c.newInstance(new Object[]{name});        } catch (        NoSuchMethodException ne) {          Constructor<?> c=pc.getConstructor(PARAMS2);          return (Permission)c.newInstance(new Object[]{name,actions});        }      } else {        Constructor<?> c=pc.getConstructor(PARAMS2);        return (Permission)c.newInstance(new Object[]{name,actions});      }    }  } catch (  NoSuchMethodException nsme) {    if (debug != null) {      debug.println("NoSuchMethodException:\n  could not find " + "proper constructor for " + type);      nsme.printStackTrace();    }    return null;  }catch (  Exception e) {    if (debug != null) {      debug.println("unable to instantiate " + name);      e.printStackTrace();    }    return null;  }}  }
class C{  public static PapeRequest createPapeRequest(ParameterList params) throws MessageException {  PapeRequest req=new PapeRequest(params);  req.validate();  if (DEBUG)   _log.debug("Created PAPE request from parameter list:\n" + params);  return req;}  }
class C{  private void unifyUsernameByName(Map<String,List<LogCommitInfo>> devNameMap){  for (  Entry<String,List<LogCommitInfo>> entry : devNameMap.entrySet()) {    List<String> userNames=getUserNamesList(entry.getValue());    if (userNames.size() > 1) {      String newUserName=getNewUserName(userNames);      for (      LogCommitInfo commit : entry.getValue()) {        commit.setUserName(newUserName);      }    }  }}  }
class C{  public final void initLineNumber(int lineNumber){  if (lineNumber <= 0)   throw new IllegalArgumentException(String.valueOf(lineNumber));  if (this.lineNumber > 0)   throw new IllegalStateException();  this.lineNumber=lineNumber;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public Region basicGetParentRegion(){  if (eContainerFeatureID() != SGraphPackage.VERTEX__PARENT_REGION)   return null;  return (Region)eInternalContainer();}  }
class C{  public String upperRunsTipText(){  return "The upper number of runs to perform (included).";}  }
class C{  public void copyArea(int x,int y,int width,int height,int dx,int dy){}  }
class C{  public static Map<String,Object> alwaysBadExpireProcessor(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  BigDecimal processAmount=(BigDecimal)context.get("processAmount");  Debug.logInfo("Test Processor Bad Expire Date Credit Card",module);  String refNum=UtilDateTime.nowAsString();  result.put("authResult",Boolean.FALSE);  result.put("resultBadExpire",Boolean.TRUE);  result.put("processAmount",processAmount);  result.put("authRefNum",refNum);  result.put("authAltRefNum",refNum);  result.put("authFlag","E");  result.put("authMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestProcessor",locale));  return result;}  }
class C{  public static void print(short x){  out.print(x);  out.flush();}  }
class C{  public void testNextCleanHashComments() throws JSONException {  JSONTokener tokener=new JSONTokener("A # B */ /* C */ \nD #");  assertEquals('A',tokener.nextClean());  assertEquals('D',tokener.nextClean());  assertEquals('\0',tokener.nextClean());}  }
class C{  public boolean equals(Object compareTo){  if (!(compareTo instanceof NominalItem)) {    return false;  }  NominalItem b=(NominalItem)compareTo;  if (m_attribute.equals(b.getAttribute()) && m_valueIndex == b.getValueIndex()) {    return true;  }  return false;}  }
class C{  Entry(int h,Object k,Object v,Entry n){  value=v;  next=n;  key=k;  hash=h;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:36.766 -0500",hash_original_method="D870EC906D46A0EDE777AE892D1551DA",hash_generated_method="1AF934A0C9560E8B4C2D9A553AB9ECF1") public boolean isExpired(final Date date){  if (date == null) {    throw new IllegalArgumentException("Date may not be null");  }  return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= date.getTime());}  }
class C{  public void mark(int readAheadLimit) throws IOException {synchronized (lock) {    super.mark(readAheadLimit);    markedLineNumber=lineNumber;    markedSkipLF=skipLF;  }}  }
class C{  @SideEffectFree public void exiting(@Nullable String sourceClass,@Nullable String sourceMethod){  throw new RuntimeException();}  }
class C{  @Override public Set<java.util.Map.Entry<K,V>> entrySet(){  final Set<Map.Entry<K,V>> m=new HashSet<Map.Entry<K,V>>();  for (  final ARC<K,V> a : this.arc) {    for (    final Map.Entry<K,V> entry : a.entrySet())     m.add(entry);  }  return m;}  }
class C{  public static void main(String[] args) throws RunnerException {  for (  String benchmark : benchmarks.keySet()) {    String[] parts=benchmark.split("-");    Options opt=new OptionsBuilder().include(ArrayListBenchmark.class.getSimpleName()).warmupIterations(2).measurementIterations(5).mode(Mode.AverageTime).warmupTime(TimeValue.seconds(10)).measurementTime(TimeValue.seconds(60)).param("size","80000000","20000000","5000000").param("list",parts[0]).param("type",parts[1]).forks(1).jvmArgs("-Xmx16g").build();    new Runner(opt).run();  }}  }
class C{  static GenericJson parseJson(String json) throws IOException {  JsonObjectParser parser=new JsonObjectParser(OAuth2Utils.JSON_FACTORY);  InputStream stateStream=new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8));  GenericJson stateJson=parser.parseAndClose(stateStream,StandardCharsets.UTF_8,GenericJson.class);  return stateJson;}  }
class C{  private GF2Matrix(int m,int n){  if ((n <= 0) || (m <= 0)) {    throw new ArithmeticException("size of matrix is non-positive");  }  assignZeroMatrix(m,n);}  }
class C{  public static int hashCode(final Object obj){  return (obj == null ? 0 : obj.hashCode());}  }
class C{  public RecentFilesHandlerWithCommandline(String propsFile,int maxCount,M menu){  super(propsFile,maxCount,menu);}  }
class C{  private Resources(){}  }
class C{  protected ExifTag addTag(ExifTag tag,int ifdId){  if (tag != null && ExifTag.isValidIfd(ifdId)) {    IfdData ifdData=getOrCreateIfdData(ifdId);    return ifdData.setTag(tag);  }  return null;}  }
class C{  private double reservoirNoise(){  return noiseGenerator.getRandom();}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  public static void generateReport(String resultsDir,String xmlFileName){  try {    String strhtml=null;    String strstr=null;    String[] tempstr2=new String[2];    String[] tempstr=new String[2];    J2DAnalyzer.readResults(xmlFileName);    J2DAnalyzer.SingleResultSetHolder srsh=(J2DAnalyzer.SingleResultSetHolder)J2DAnalyzer.results.elementAt(0);    Enumeration enum_=srsh.getKeyEnumeration();    Vector keyvector=new Vector();    while (enum_.hasMoreElements()) {      keyvector.add(enum_.nextElement());    }    String keys[]=new String[keyvector.size()];    keyvector.copyInto(keys);    J2DAnalyzer.sort(keys);    File reportFile=new File(resultsDir,"J2DBench_Results.html");    PrintWriter writer=openFile(reportFile.getAbsolutePath(),HTMLGEN_FILE_NEW);    writer.println("<html><body bgcolor=\"#ffffff\"><hr size=\"1\">");    writer.println("<center><h2>J2DBench2 - Report</h2>");    writer.println("</center><hr size=\"1\"><br>");    writer.println("<table cols=\"2\" cellspacing=\"2\" " + "cellpadding=\"5\" " + "border=\"0\" width=\"80%\">");    writer.println("<tr><td bgcolor=\"#CCCCFF\" colspan=\"2\">" + "<b>Build Details</b></td></tr>");    writer.println("<tr>");    writer.println("<td bgcolor=\"#f0f0f0\">Description</td>");    writer.println("<td>" + srsh.getDescription() + "</td>");    writer.println("</tr>");    writer.println("<tr><td bgcolor=\"#f0f0f0\">From Date</td>");    writer.println("<td>" + dateFormat.format(new Date(srsh.getStartTime())) + "</td></tr>");    writer.println("<tr><td bgcolor=\"#f0f0f0\">To Date</td>");    writer.println("<td>" + dateFormat.format(new Date(srsh.getEndTime())) + "</td></tr>");    writer.flush();    writer.println("<tr><td bgcolor=\"#CCCCFF\"><b>System Property</b>" + "</td><td bgcolor=\"#CCCCFF\">" + "<b>Value</b></td></tr>");    String key=null;    String value=null;    Map sysProps=srsh.getProperties();    Iterator iter=sysProps.keySet().iterator();    while (iter.hasNext()) {      key=iter.next().toString();      value=sysProps.get(key).toString();      writer.println("<tr><td bgcolor=\"#f0f0f0\">" + key + "</td><td>"+ value+ "&nbsp;</td></tr>");    }    writer.flush();    writer.println("</table>");    writer.println("<br>");    writer.println("<hr size=\"1\">");    writer.println("<br>");    writer.println("<table cellspacing=\"0\" " + "cellpadding=\"3\" border=\"1\" width=\"80%\">");    writer.println("<tr>");    writer.println("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>Num Reps</b></td>");    writer.println("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>Num Units</b></td>");    writer.println("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>Name</b></td>");    writer.println("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>Options</b></td>");    writer.println("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>Score</b></td>");    writer.println("</tr>");    writer.flush();    for (int k=0; k < keys.length; k++) {      J2DAnalyzer.ResultHolder testResult=srsh.getResultByKey(keys[k]);      writer.println("<tr>");      writer.println("<td>" + testResult.getReps() + "</td>");      writer.println("<td>" + testResult.getUnits() + "</td>");      writer.println("<td>" + testResult.getName() + "</td>");      writer.println("<td valign=\"center\"><ul>");      Map map=testResult.getOptions();      iter=map.keySet().iterator();      while (iter.hasNext()) {        key=iter.next().toString();        value=map.get(key).toString();        writer.println("<li>" + key + " = "+ value+ "</li>");      }      writer.println("</ul></td>");      writer.println("<td valign=\"center\">" + decimalFormat.format(testResult.getScore()) + "</td>");      writer.println("</tr>");    }    writer.flush();    writer.println("</table>");    writer.println("<br><hr WIDTH=\"100%\" size=\"1\">");    writer.println("</p><hr WIDTH=\"100%\" size=\"1\"></body></html>");    writer.flush();    writer.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static Coord4D read(NBTTagCompound tag){  return new Coord4D(tag.getInteger("x"),tag.getInteger("y"),tag.getInteger("z"),tag.getInteger("id"));}  }
class C{  public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  if (cv != null) {    cv.visit(version,access,name,signature,superName,interfaces);  }}  }
class C{  public float moveBox(float speed,float degree,boolean bounce,float f,float f1){  if (bounce)   return -MathHelper.abs((MathHelper.sin(f * speed) * f1 * degree)); else   return MathHelper.sin(f * speed) * f1 * degree - f1 * degree;}  }
class C{  private void box(){  try {    if (progressBar == null) {      int[] attrs=new int[]{R.attr.actionBarSize};      TypedArray ta=view.getContext().obtainStyledAttributes(attrs);      int progressBarThreshold=ta.getDimensionPixelSize(0,-1);      ta.recycle();      int shortEdgeOfView=(view.getHeight() > view.getWidth()) ? view.getWidth() : view.getHeight();      progressBar=new ProgressBar(view.getContext(),null,(progressBarThreshold < shortEdgeOfView) ? android.R.attr.progressBarStyleLarge : android.R.attr.progressBarStyleSmall);    }    FrameLayout.LayoutParams progressLayoutParams=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);    progressLayoutParams.gravity=Gravity.CENTER;    progressBar.setLayoutParams(progressLayoutParams);    parent=(ViewGroup)view.getParent();    ViewGroup.LayoutParams layoutParams=view.getLayoutParams();    FrameLayout frameLayout=new FrameLayout(view.getContext());    frameLayout.setId(view.getId());    frameLayout.setLayoutParams(layoutParams);    parent.removeView(view);    FrameLayout.LayoutParams frameLayoutParams=new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);    frameLayoutParams.gravity=Gravity.CENTER;    view.setLayoutParams(frameLayoutParams);    frameLayout.addView(view);    frameLayout.addView(progressBar);    parent.addView(frameLayout,originalPosition);    encapsulated=true;  } catch (  ClassCastException e) {    e.printStackTrace();    Log.e(Progressive.DEBUG_TAG,"View's parent must extend ViewGroup");  }}  }
class C{  public static void reportEventSetDescriptor(EventSetDescriptor esd){  System.out.println("event set name:   " + esd.getName());  System.out.println(" listener type:   " + esd.getListenerType());  System.out.println("   method get:    " + esd.getGetListenerMethod());  System.out.println("   method add:    " + esd.getAddListenerMethod());  System.out.println("   method remove: " + esd.getRemoveListenerMethod());}  }
class C{  public static void addTo(Collection coll,Object objToAdd){  if (objToAdd instanceof Collection)   coll.addAll((Collection)objToAdd); else   if (objToAdd instanceof Object[])   coll.addAll(Arrays.asList((Object[])objToAdd)); else   if (objToAdd instanceof ToArray)   coll.addAll(Arrays.asList(((ToArray)objToAdd).toArray())); else   coll.add(objToAdd);}  }
class C{  public ExpirationAttributes(){  this.timeout=0;  this.action=ExpirationAction.INVALIDATE;}  }
class C{  public static double max(double x,double y){  return Double.isNaN(x) ? y : Double.isNaN(y) ? x : Math.max(x,y);}  }
class C{  private ThreadLocalMap(ThreadLocalMap parentMap){  Entry[] parentTable=parentMap.table;  int len=parentTable.length;  setThreshold(len);  table=new Entry[len];  for (int j=0; j < len; j++) {    Entry e=parentTable[j];    if (e != null) {      @SuppressWarnings("unchecked") ThreadLocal<Object> key=(ThreadLocal<Object>)e.get();      if (key != null) {        Object value=key.childValue(e.value);        Entry c=new Entry(key,value);        int h=key.threadLocalHashCode & (len - 1);        while (table[h] != null)         h=nextIndex(h,len);        table[h]=c;        size++;      }    }  }}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ModifiableElement.class) {switch (derivedFeatureID) {case N4JSPackage.N4_GETTER_DECLARATION__DECLARED_MODIFIERS:      return N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS;default :    return -1;}}if (baseClass == N4MemberDeclaration.class) {switch (derivedFeatureID) {case N4JSPackage.N4_GETTER_DECLARATION__OWNER:  return N4JSPackage.N4_MEMBER_DECLARATION__OWNER;default :return -1;}}if (baseClass == AnnotableN4MemberDeclaration.class) {switch (derivedFeatureID) {case N4JSPackage.N4_GETTER_DECLARATION__ANNOTATION_LIST:return N4JSPackage.ANNOTABLE_N4_MEMBER_DECLARATION__ANNOTATION_LIST;default :return -1;}}if (baseClass == N4FieldAccessor.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public void register(){  eventListeningStarted=true;  if (Constants.EventListeners.EVENT_LISTENING_ENABLED) {    if (Constants.EventListeners.APPLICATION_STATE_LISTENER) {      ApplicationStateListener applicationState=new ApplicationStateListener();      applicationState.startListening();    }    if (Constants.EventListeners.RUNTIME_STATE_LISTENER) {      EventRegistry.startAlarm(Constants.EventListeners.DEFAULT_LISTENER_CODE,Constants.EventListeners.DEFAULT_START_TIME,Constants.EventListeners.DEFAULT_INTERVAL);    }  }}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public static double blackFormulaImpliedStdDev(final Option.Type optionType,@Real final double strike,@Real final double forward,@Real final double blackPrice,@DiscountFactor final double discount,@Real final double guess,@Real final double accuracy){  return blackFormulaImpliedStdDev(optionType,strike,forward,blackPrice,discount,guess,accuracy,0.0);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ImPackage.PARAMETERIZED_TYPE_REF_IM__REWIRED_TARGET:    setRewiredTarget((SymbolTableEntry)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public PilotingRollData addEntityBonuses(PilotingRollData roll){  int[] locsToCheck=new int[4];  int destroyedLegs=0;  locsToCheck=new int[4];  locsToCheck[0]=Mech.LOC_RLEG;  locsToCheck[1]=Mech.LOC_LLEG;  locsToCheck[2]=Mech.LOC_RARM;  locsToCheck[3]=Mech.LOC_LARM;  destroyedLegs=countBadLegs();  if (destroyedLegs == 0) {    roll.addModifier(-2,"Quad bonus");  }  if (hasFunctionalLegAES()) {    roll.addModifier(-2,"AES bonus");  }  boolean destroyedLegCounted=false;  for (  int loc : locsToCheck) {    if (isLocationBad(loc)) {      if ((destroyedLegs == 2) && !destroyedLegCounted) {        roll.addModifier(5,"2 legs destroyed");        destroyedLegCounted=true;      }    } else {      if (getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.ACTUATOR_HIP,loc) > 0) {        roll.addModifier(2,getLocationName(loc) + " Hip Actuator destroyed");        if (!game.getOptions().booleanOption("tacops_leg_damage")) {          continue;        }      }      if (getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.ACTUATOR_UPPER_LEG,loc) > 0) {        roll.addModifier(1,getLocationName(loc) + " Upper Leg Actuator destroyed");      }      if (getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.ACTUATOR_LOWER_LEG,loc) > 0) {        roll.addModifier(1,getLocationName(loc) + " Lower Leg Actuator destroyed");      }      if (getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.ACTUATOR_FOOT,loc) > 0) {        roll.addModifier(1,getLocationName(loc) + " Foot Actuator destroyed");      }    }  }  return super.addEntityBonuses(roll);}  }
class C{  public static String encodeBase64(String input){  return DatatypeConverter.printBase64Binary(input.getBytes(StandardCharsets.UTF_8));}  }
class C{  public float heading(){  float angle=(float)Math.atan2(-y,x);  return -1 * angle;}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public static boolean isStoreInventoryAvailable(String productStoreId,ProductConfigWrapper productConfig,BigDecimal quantity,Delegator delegator,LocalDispatcher dispatcher){  GenericValue productStore=getProductStore(productStoreId,delegator);  if (productStore == null) {    Debug.logWarning("No ProductStore found with id " + productStoreId + ", returning false for inventory available check",module);    return false;  }  if ("N".equals(productStore.getString("checkInventory"))) {    if (Debug.verboseOn())     Debug.logVerbose("ProductStore with id " + productStoreId + ", is set to NOT check inventory, returning true for inventory available check",module);    return true;  }  boolean isInventoryAvailable=false;  if ("Y".equals(productStore.getString("oneInventoryFacility"))) {    String inventoryFacilityId=productStore.getString("inventoryFacilityId");    if (UtilValidate.isEmpty(inventoryFacilityId)) {      Debug.logWarning("ProductStore with id " + productStoreId + " has Y for oneInventoryFacility but inventoryFacilityId is empty, returning false for inventory check",module);      return false;    }    return ProductWorker.isProductInventoryAvailableByFacility(productConfig,inventoryFacilityId,quantity,dispatcher);  } else {    GenericValue product=productConfig.getProduct();    List<GenericValue> productFacilities=null;    try {      productFacilities=product.getRelated("ProductFacility",null,null,true);    } catch (    GenericEntityException e) {      Debug.logWarning(e,"Error invoking getRelatedCache in isCatalogInventoryAvailable",module);      return false;    }    if (UtilValidate.isNotEmpty(productFacilities)) {      for (      GenericValue pfValue : productFacilities) {        isInventoryAvailable=ProductWorker.isProductInventoryAvailableByFacility(productConfig,pfValue.getString("facilityId"),quantity,dispatcher);        if (isInventoryAvailable == true) {          return isInventoryAvailable;        }      }    }    return false;  }}  }
class C{  private static ByteArrayOutputStream sizeLine(final InputStream stream) throws IOException {  State state=State.NORMAL;  final ByteArrayOutputStream result=new ByteArrayOutputStream();  while (state != State.END) {    state=next(stream,state,result);  }  return result;}  }
class C{  private static void eliminateGroupsWithUnknownTerms(final QueryRoot queryRoot,final GroupNodeBase<IGroupMemberNode> op){  for (int i=0; i < op.arity(); i++) {    final BOp sp=op.get(i);    if (!(sp instanceof StatementPatternNode)) {      continue;    }    for (int j=0; j < sp.arity(); j++) {      final BOp term=sp.get(j);      if (term instanceof ConstantNode) {        final IV iv=((ConstantNode)term).getValue().getIV();        if (iv == null || iv.isNullIV()) {          pruneGroup(queryRoot,op);        }      }    }  }  for (int i=0; i < op.arity(); i++) {    final BOp child=op.get(i);    if (child instanceof GroupNodeBase<?>) {      @SuppressWarnings("unchecked") final GroupNodeBase<IGroupMemberNode> childGroup=(GroupNodeBase<IGroupMemberNode>)child;      eliminateGroupsWithUnknownTerms(queryRoot,childGroup);    } else     if (child instanceof QueryBase) {      final QueryBase subquery=(QueryBase)child;      final GroupNodeBase<IGroupMemberNode> childGroup=(GroupNodeBase<IGroupMemberNode>)subquery.getWhereClause();      eliminateGroupsWithUnknownTerms(queryRoot,childGroup);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.005 -0500",hash_original_method="048D73921D9D83B7AF6D9F369B7BCD1A",hash_generated_method="67359A61641A4CD69AC9272E5B035287") protected String jsPrompt(String url,String message,String defaultValue){  return mCallbackProxy.onJsPrompt(url,message,defaultValue);}  }
class C{  public static MockSwitch triggeredSwitch(){  MockSwitch s=new MockSwitch();  s.setTriggered();  return s;}  }
class C{  public Builder name(String name){  this.name=checkNotNull(name);  return this;}  }
class C{  private void createRasterProgram() throws IOException {  int program=glCreateProgram();  int vshader=createShader("org/lwjgl/demo/opengl/textures/texture2dArrayMipmap.vs",GL_VERTEX_SHADER);  int fshader=createShader("org/lwjgl/demo/opengl/textures/texture2dArrayMipmap.fs",GL_FRAGMENT_SHADER);  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"position");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.program=program;}  }
class C{  public static void main(String[] args){  char[] chars={'I','n','s','e','r','t'};  MyStringBuilder2 str1=new MyStringBuilder2("testString");  MyStringBuilder2 str2=new MyStringBuilder2(chars);  System.out.print("\nInsert string 2 into string 1 at index 3: ");  MyStringBuilder2 str3=str1.insert(3,str2);  System.out.println(str3);  System.out.println("\nReverse string 1: " + str1.reverse());  System.out.println("\nSubstring of string 3 beginning index 10: " + str3.substring(10));  System.out.println("\nString 2 to upper case: " + str2.toUpperCase());}  }
class C{  boolean contains(float pos){  return mStart <= pos && pos < mEnd;}  }
class C{  @Override public void updateByte(int columnIndex,byte x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateByte(" + columnIndex + ", "+ x+ ");");    }    update(columnIndex,ValueByte.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void addCancelListener(ActionListener a){  m_cancelBut.addActionListener(a);}  }
class C{  public DiscoverRequest(String path){  super(new LwM2mPath(path));}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public static int parseInt(String str){  return Integer.parseInt(str.replace(",",""));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:56.853 -0500",hash_original_method="D3C9920CEA488FFF412D7F8E3FE64835",hash_generated_method="1112B3A261238B6BEC43636417F4DA7A") private void createPdu(){  SmsEnvelope env=mEnvelope;  CdmaSmsAddress addr=env.origAddress;  ByteArrayOutputStream baos=new ByteArrayOutputStream(100);  DataOutputStream dos=new DataOutputStream(new BufferedOutputStream(baos));  try {    dos.writeInt(env.messageType);    dos.writeInt(env.teleService);    dos.writeInt(env.serviceCategory);    dos.writeByte(addr.digitMode);    dos.writeByte(addr.numberMode);    dos.writeByte(addr.ton);    dos.writeByte(addr.numberPlan);    dos.writeByte(addr.numberOfDigits);    dos.write(addr.origBytes,0,addr.origBytes.length);    dos.writeInt(env.bearerReply);    dos.writeByte(env.replySeqNo);    dos.writeByte(env.errorClass);    dos.writeByte(env.causeCode);    dos.writeInt(env.bearerData.length);    dos.write(env.bearerData,0,env.bearerData.length);    dos.close();    mPdu=baos.toByteArray();  } catch (  IOException ex) {    Log.e(LOG_TAG,"createPdu: conversion from object to byte array failed: " + ex);  }}  }
class C{  public final void displayStorageData(IStorageData storageData){  this.storageData=storageData;  if (null != storageData) {    name.setText(storageData.getName());    if (null != storageData.getDescription()) {      if (storageData.getDescription().length() > MAX_DESCRIPTION_LENGTH) {        description.setText("<form><p>" + storageData.getDescription().substring(0,MAX_DESCRIPTION_LENGTH) + ".. <a href=\"More\">[More]</a></p></form>",true,false);      } else {        description.setText(storageData.getDescription(),false,false);      }    } else {      description.setText("",false,false);    }    size.setText(NumberFormatter.humanReadableByteCount(storageData.getDiskSize()));    if (StringUtils.isNotEmpty(storageData.getCmrVersion())) {      cmrVersion.setText(storageData.getCmrVersion());    }    if (showDataDownloaded) {      LocalStorageData localStorageData=null;      if (storageData instanceof LocalStorageData) {        localStorageData=(LocalStorageData)storageData;      } else       if (storageData instanceof StorageData) {        localStorageData=InspectIT.getDefault().getInspectITStorageManager().getLocalDataForStorage((StorageData)storageData);      }      boolean notDownloaded=((null == localStorageData) || !localStorageData.isFullyDownloaded());      if (notDownloaded) {        downloaded.setText("No");      } else {        downloaded.setText("Yes");      }    }  } else {    showDataUnavailable();  }  this.layout(true,true);}  }
class C{  public SubscriptionStillActiveException(String message){  super(message);}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  return new SyntheticAttribute(newCp);}  }
class C{  public static boolean isRememberLastLocation(Context c){  return p(c).getBoolean(c.getString(R.string.afc_pkey_display_remember_last_location),c.getResources().getBoolean(R.bool.afc_pkey_display_remember_last_location_def));}  }
class C{  public static void main(final String[] args){  try {    setup();    runUtilWithArgs(args);  } catch (  Exception e) {    System.err.println(e.getMessage());    log.error("Error while running confproxy util:",e);  } finally {    actorSystem.shutdown();  }}  }
class C{  public S2LatLngRect union(S2LatLngRect other){  return new S2LatLngRect(lat.union(other.lat),lng.union(other.lng));}  }
class C{  protected void parse(DataInputStream stream) throws Exception {  int len=stream.readInt();  data=new int[len];  for (int i=0; i < len; i++)   data[i]=stream.readInt();}  }
class C{  public PartitionResponse send(DistributedMember recipient,PartitionedRegion r) throws ForceReattemptException {  Set recipients=Collections.singleton(recipient);  PutAllResponse p=new PutAllResponse(r.getSystem(),recipients);  initMessage(r,recipients,false,p);  setTransactionDistributed(r.getCache().getTxManager().isDistributed());  if (logger.isDebugEnabled()) {    logger.debug("PutAllPRMessage.send: recipient is {}, msg is {}",recipient,this);  }  Set failures=r.getDistributionManager().putOutgoing(this);  if (failures != null && failures.size() > 0) {    throw new ForceReattemptException("Failed sending <" + this + ">");  }  return p;}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (isFirstBatchDone()) {    push(instance);    return true;  } else {    bufferInput(instance);    return false;  }}  }
class C{  public boolean isFullBST(){  return size == Math.pow(2,height()) - 1 ? true : false;}  }
class C{  public ProgressUpdate(final AbstractSimulatedDevice device){  this.device=device;}  }
class C{  @Override protected void ensureNumberOfColumns(int numberOfColumns){  if (data.length >= numberOfColumns) {    return;  }  boolean[] newData=new boolean[numberOfColumns];  System.arraycopy(data,0,newData,0,data.length);  data=newData;}  }
class C{  private boolean isMediaTypeString(String string){  if (m_recognizeExampleMediaType && string.matches(EXAMPLE_MIME_MEDIA_TYPE_PATTERN)) {    return true;  }  return mimeTypes.contains(string);}  }
class C{  void addCommonRequestParameters(String baseUrl,String httpMethod) throws OAuthException {  if (parameters.getOAuthSignatureMethod().length() == 0) {    parameters.setOAuthSignatureMethod(signer.getSignatureMethod());  }  if (parameters.getOAuthTimestamp().length() == 0) {    parameters.setOAuthTimestamp(OAuthUtil.getTimestamp());  }  if (parameters.getOAuthNonce().length() == 0) {    parameters.setOAuthNonce(OAuthUtil.getNonce());  }  if (parameters.getOAuthSignature().length() == 0) {    String baseString=OAuthUtil.getSignatureBaseString(baseUrl,httpMethod,parameters.getBaseParameters());    parameters.setOAuthSignature(signer.getSignature(baseString,parameters));  }}  }
class C{  public static CompiereColor parse(String attributes){  CompiereColor cc=new CompiereColor();  try {    if (attributes != null && attributes.length() > 0)     cc.parseAttributres(attributes);  } catch (  Exception e) {    log.severe("(" + attributes + ") - "+ e.toString());  }  return cc;}  }
class C{  public static final float[][] inverse(final float[][] input_matrix){  final float d=(input_matrix[2][0] * input_matrix[0][1] * input_matrix[1][2] - input_matrix[2][0] * input_matrix[0][2] * input_matrix[1][1] - input_matrix[1][0] * input_matrix[0][1] * input_matrix[2][2] + input_matrix[1][0] * input_matrix[0][2] * input_matrix[2][1] + input_matrix[0][0] * input_matrix[1][1] * input_matrix[2][2] - input_matrix[0][0] * input_matrix[1][2] * input_matrix[2][1]);  final float t00=(input_matrix[1][1] * input_matrix[2][2] - input_matrix[1][2] * input_matrix[2][1]) / d;  final float t01=-(input_matrix[0][1] * input_matrix[2][2] - input_matrix[0][2] * input_matrix[2][1]) / d;  final float t02=(input_matrix[0][1] * input_matrix[1][2] - input_matrix[0][2] * input_matrix[1][1]) / d;  final float t10=-(-input_matrix[2][0] * input_matrix[1][2] + input_matrix[1][0] * input_matrix[2][2]) / d;  final float t11=(-input_matrix[2][0] * input_matrix[0][2] + input_matrix[0][0] * input_matrix[2][2]) / d;  final float t12=-(-input_matrix[1][0] * input_matrix[0][2] + input_matrix[0][0] * input_matrix[1][2]) / d;  final float t20=(-input_matrix[2][0] * input_matrix[1][1] + input_matrix[1][0] * input_matrix[2][1]) / d;  final float t21=-(-input_matrix[2][0] * input_matrix[0][1] + input_matrix[0][0] * input_matrix[2][1]) / d;  final float t22=(-input_matrix[1][0] * input_matrix[0][1] + input_matrix[0][0] * input_matrix[1][1]) / d;  final float[][] output_matrix=new float[3][3];  output_matrix[0][0]=t00;  output_matrix[0][1]=t01;  output_matrix[0][2]=t02;  output_matrix[1][0]=t10;  output_matrix[1][1]=t11;  output_matrix[1][2]=t12;  output_matrix[2][0]=t20;  output_matrix[2][1]=t21;  output_matrix[2][2]=t22;  return output_matrix;}  }
class C{  private boolean hasNextTlsMode(){  return nextTlsMode != TLS_MODE_NULL;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("PaymentRule"))     p_PaymentRule=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_C_PaySelection_ID=getRecord_ID();  if (p_PaymentRule != null && p_PaymentRule.equals(X_C_Order.PAYMENTRULE_DirectDebit))   p_PaymentRule=null;}  }
class C{  private void addColumns(ColumnList cols,Put put){  for (  ColumnList.Column col : cols.getColumns()) {    if (col.getTs() > 0) {      put.add(col.getFamily(),col.getQualifier(),col.getTs(),col.getValue());    } else {      put.add(col.getFamily(),col.getQualifier(),col.getValue());    }  }}  }
class C{  int accumDefaultEntity(java.io.Writer writer,char ch,int i,char[] chars,int len,boolean fromTextNode,boolean escLF) throws IOException {  if (!escLF && CharInfo.S_LINEFEED == ch) {    writer.write(m_lineSep,0,m_lineSepLen);  } else {    if ((fromTextNode && m_charInfo.shouldMapTextChar(ch)) || (!fromTextNode && m_charInfo.shouldMapAttrChar(ch))) {      String outputStringForChar=m_charInfo.getOutputStringForChar(ch);      if (null != outputStringForChar) {        writer.write(outputStringForChar);      } else       return i;    } else     return i;  }  return i + 1;}  }
class C{  public static boolean hasSisterTagAfter(Tag tag,String nameToFind){  Body body=(Body)tag.getParent();  List<Statement> stats=body.getStatements();  Iterator<Statement> it=stats.iterator();  Statement other;  boolean isAfter=false;  while (it.hasNext()) {    other=it.next();    if (other instanceof Tag) {      if (isAfter) {        if (((Tag)other).getTagLibTag().getName().equals(nameToFind))         return true;      } else       if (other == tag)       isAfter=true;    }  }  return false;}  }
class C{  public static String serialize(Object object){  if (object == null)   return "[null]";  try {    return new ScriptConverter().serialize(object);  } catch (  Throwable t) {    return object.toString();  }}  }
class C{  protected void pluginInitialize(){}  }
class C{  public BloomEffect(RajawaliScene scene,Camera camera,int width,int height,int lowerThreshold,int upperThreshold,BlendMode blendMode){  super();  mScene=scene;  mCamera=camera;  mWidth=width;  mHeight=height;  mLowerThreshold=lowerThreshold;  mUpperThreshold=upperThreshold;  mBlendMode=blendMode;}  }
class C{  public static int dpToPx(int i,Context mContext){  DisplayMetrics displayMetrics=mContext.getResources().getDisplayMetrics();  return (int)((i * displayMetrics.density) + 0.5);}  }
class C{  public void spawn(Runnable task){  executor.execute(task);}  }
class C{  public static Offset bottomCenter(){  return new Offset(WorldWind.OFFSET_FRACTION,0.5,WorldWind.OFFSET_FRACTION,0.0);}  }
class C{  private void fail() throws IOException {  if (numGen != null)   numGen.tokenInsertTries=-1;  LRAction reduction=searchSingleReduction();  if (reduction != null) {    if (DEBUG)     System.out.println("Trying to reduce before recovering error!");    rdAction=reduction;    return;  }  if (DEBUG)   System.out.println("Recover: Simple PBER");  LRAction handleAction;  try {    LRParserState catchState=rdStack.peek();    handleAction=table.getActionTable().get(catchState,SpecialTerminals.Error);    while (!(handleAction instanceof Shift)) {      rdStack.pop();      catchState=rdStack.peek();      handleAction=table.getActionTable().get(catchState,SpecialTerminals.Error);    }    if (DEBUG) {      System.out.println("Found error-catching state  : " + catchState);    }  } catch (  java.util.EmptyStackException e) {    if (DEBUG)     System.out.println("!!! EmptyStackException during search for error-terminal.");    processedTokens.addAll(changeAbleTokens);    processedTokens.add(currentToken);    processedTokens.add(new ScannerToken<Object>(SpecialTerminals.EndOfInputStream,"$is1$"));    changeAbleTokens.clear();    changeAbleActions.clear();    currentToken=null;    return;  }  LRParserState handleState=((Shift)handleAction).getState();  if (DEBUG)   System.out.println("  Error-shifting to state   : " + handleState);  LRParserState s=(LRParserState)handleState.clone();  s.beginColumn=currentToken.getColumn();  s.beginLine=currentToken.getLine();  rdStack.push(s);  numGen=null;  chgStack=(Stack<LRParserState>)rdStack.clone();  if (changeAbleTokens.size() == 0) {    processedTokens.add(currentToken);    currentToken=getNextToken();    changeAbleActions.clear();  } else {    processedTokens.addAll(changeAbleTokens);    changeAbleTokens.clear();    changeAbleActions.clear();  }  rdAction=table.getActionTable().get(handleState,currentToken.getSymbol());  while (rdAction instanceof ErrorAction || currentToken.getSymbol() == SpecialTerminals.EndOfInputStream) {    processedTokens.add(currentToken);    if (currentToken.getSymbol() == SpecialTerminals.EndOfInputStream) {      if (DEBUG)       System.out.println("!!! End of input during error-recovery :(");      processedTokens.add(new ScannerToken<Object>(SpecialTerminals.EndOfInputStream,"$is2$"));      changeAbleTokens.clear();      changeAbleActions.clear();      currentToken=null;      return;    }    currentToken=getNextToken();    rdAction=table.getActionTable().get(handleState,currentToken.getSymbol());  }  if (DEBUG_possibilities) {    System.out.print("DENIED   : ");    System.out.print(this.processedTokens);    System.out.println(this.changeAbleTokens);    maxErrors--;  }}  }
class C{  public float ascent(){  return 0.7f * height;}  }
class C{  public void deleteGroup(Integer groupId) throws IOException {  String tailUrl=GitlabGroup.URL + "/" + groupId;  retrieve().method("DELETE").to(tailUrl,Void.class);}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer seriesRenderer,float yAxisValue,int seriesIndex,int startIndex){  XYChart chart=getXYChart(seriesIndex);  chart.setScreenR(getScreenR());  chart.setCalcRange(getCalcRange(mDataset.getSeriesAt(seriesIndex).getScaleNumber()),0);  chart.drawSeries(canvas,paint,points,seriesRenderer,yAxisValue,getChartSeriesIndex(seriesIndex),startIndex);}  }
class C{  public void sendSipAck(SipDialogPath dialog) throws PayloadException, NetworkException {  try {    SipRequest ack=SipMessageFactory.createAck(dialog);    if (sLogger.isActivated()) {      sLogger.debug(">>> Send SIP ACK");    }    if (mSipTraceEnabled) {      System.out.println(">>> " + ack.getStackMessage().toString());      System.out.println(TRACE_SEPARATOR);    }    dialog.getStackDialog().sendAck(ack.getStackMessage());  } catch (  SipException e) {    throw new NetworkException("Can't send SIP message!",e);  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return get();}  }
class C{  public final void addVariable(int index,Node variable){  if (variables.contains(variable)) {    throw new IllegalArgumentException("Expecting a new variable.");  }  if (index < 0 || index > variables.size()) {    throw new IndexOutOfBoundsException("Index must in (0, #vars).");  }  variables.add(index,variable);  resize(tetradMatrix.rows(),variables.size());  TetradMatrix _data=new TetradMatrix(tetradMatrix.rows(),tetradMatrix.columns() + 1);  for (int j=0; j < tetradMatrix.columns() + 1; j++) {    if (j < index) {      for (int i=0; i < tetradMatrix.rows(); i++) {        _data.set(i,j,tetradMatrix.get(i,j));      }    } else     if (j == index) {      for (int i=0; i < tetradMatrix.rows(); i++) {        _data.set(i,j,Double.NaN);      }    } else {      for (int i=0; i < tetradMatrix.rows(); i++) {        _data.set(i,j,tetradMatrix.get(i,j - 1));      }    }  }}  }
class C{  public CountingOutputStream(OutputStream out){  super(checkNotNull(out));}  }
class C{  public void refreshTransitRoute(TransitRoute transitRoute){  Router router=routers.get(transitRoute.getTransportMode());  List<TransitRouteStop> routeStops=transitRoute.getStops();  List<Id<Link>> linkSequence=new ArrayList<>();  linkSequence.add(routeStops.get(0).getStopFacility().getLinkId());  for (int i=0; i < routeStops.size() - 1; i++) {    if (routeStops.get(i).getStopFacility().getLinkId() == null) {      throw new IllegalArgumentException("stop facility " + routeStops.get(i).getStopFacility().getName() + " ("+ routeStops.get(i).getStopFacility().getId()+ " not referenced!");    }    if (routeStops.get(i + 1).getStopFacility().getLinkId() == null) {      throw new IllegalArgumentException("stop facility " + routeStops.get(i - 1).getStopFacility().getName() + " ("+ routeStops.get(i + 1).getStopFacility().getId()+ " not referenced!");    }    Id<Link> currentLinkId=Id.createLinkId(routeStops.get(i).getStopFacility().getLinkId().toString());    Link currentLink=network.getLinks().get(currentLinkId);    Link nextLink=network.getLinks().get(routeStops.get(i + 1).getStopFacility().getLinkId());    List<Id<Link>> path=PTMapperUtils.getLinkIdsFromPath(router.calcLeastCostPath(currentLink.getToNode(),nextLink.getFromNode()));    if (path != null)     linkSequence.addAll(path);    linkSequence.add(nextLink.getId());  }  transitRoute.setRoute(RouteUtils.createNetworkRoute(linkSequence,network));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.N4_GETTER_DECLARATION__DECLARED_MODIFIERS:    return getDeclaredModifiers();case N4JSPackage.N4_GETTER_DECLARATION__OWNER:  if (resolve)   return getOwner();return basicGetOwner();case N4JSPackage.N4_GETTER_DECLARATION__ANNOTATION_LIST:return getAnnotationList();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public SpherePortrayal3D(Appearance appearance,boolean generateNormals,boolean generateTextureCoordinates,double scale,int divisions){  this.appearance=appearance;  setScale(null,scale);  Sphere sphere=new Sphere(0.5f,(generateNormals ? Primitive.GENERATE_NORMALS : 0) | (generateTextureCoordinates ? Primitive.GENERATE_TEXTURE_COORDS : 0),divisions,appearance);  setShape3DFlags(sphere.getShape(Sphere.BODY));  group=sphere;}  }
class C{  public boolean match(Object matchObj){  if (matchObj == null)   return true; else   if (!matchObj.getClass().equals(this.getClass())) {    return false;  } else   if (matchObj == this)   return true;  SIPResponse that=(SIPResponse)matchObj;  StatusLine rline=that.statusLine;  if (this.statusLine == null && rline != null)   return false; else   if (this.statusLine == rline)   return super.match(matchObj); else {    return statusLine.match(that.statusLine) && super.match(matchObj);  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  String inputHeader2=args[1];  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");    WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    double noData2=inputFile2.getNoDataValue();    if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {      showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      data2=inputFile2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if ((z1 != noData1) && (z2 != noData2)) {          if (z1 != 0) {            z1=1;          }          if (z2 != 0) {            z2=1;          }          outputFile.setValue(row,col,z1 * z2);        } else {          outputFile.setValue(row,col,noData1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    inputFile2.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private boolean isValid(BlockPos pos){  return pos.getX() >= -30000000 && pos.getZ() >= -30000000 && pos.getX() < 30000000 && pos.getZ() < 30000000 && pos.getY() >= 0 && pos.getY() < 256;}  }
class C{  public Builder<VType> fPut(int key,VType value){  map.put(key,value);  return this;}  }
class C{  public void seek(final int position) throws IOException {  if (position < 0) {    throw new IllegalArgumentException("position < 0: " + position);  }  if (position > size) {    throw new EOFException();  }  this.pointer=position;}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.start_bt:{      this.startActivity(new Intent(this,VActivity.class));      break;    }}}  }
class C{  private ArrayList<Interval> findOrCreateIntervalSet(Register r){  ArrayList<Interval> v=map.get(r);  if (v == null) {    v=new ArrayList<Interval>();    map.put(r,v);  }  return v;}  }
class C{  public void exitApp(){  this.webView.getPluginManager().postMessage("exit",null);}  }
class C{  @Synchronized("stateLock") @SuppressWarnings("unchecked") public void addNetwork(Configuration config){  checkNotNull(config,"Configuration cannot be null");  if (state != State.NEW && state != State.RUNNING)   throw new RuntimeException("MultiBotManager is not running. State: " + state);  addNetwork(new PircBotX(config));}  }
class C{  public void initialize(){  final boolean allowMulti=true;  LOGGER.debug("Setting allow_multi={} for namespace={}",allowMulti,NAMESPACE);  final StoreBucketProperties storeBucketProperties=new StoreBucketProperties.Builder(NAMESPACE).withAllowMulti(allowMulti).build();  try {    client.execute(storeBucketProperties);  } catch (  InterruptedException e) {    LOGGER.warn(String.format("Unable to set allow_multi=%s for namespace=%s",allowMulti,NAMESPACE),e);    Thread.currentThread().interrupt();  }catch (  ExecutionException e) {    LOGGER.error(String.format("Unable to set allow_multi=%s for namespace=%s",allowMulti,NAMESPACE),e);  }}  }
class C{  public CLEvent enqueueTask(CLQueue queue,CLEvent... eventsToWaitFor){}  }
class C{  private boolean hasFinalModifier(int access){  return (access & Opcodes.ACC_FINAL) == Opcodes.ACC_FINAL;}  }
class C{  public static int singleNum(int[] A){  int ones=0, twos=0;  for (int i=0; i < A.length; i++) {    ones=(ones ^ A[i]) & ~twos;    twos=(twos ^ A[i]) & ~ones;  }  return ones;}  }
class C{  public void receiveErrorrecordEventForInstance(java.lang.Exception e){}  }
class C{  public static Minutes minutesBetween(ReadablePartial start,ReadablePartial end){  if (start instanceof LocalTime && end instanceof LocalTime) {    Chronology chrono=DateTimeUtils.getChronology(start.getChronology());    int minutes=chrono.minutes().getDifference(((LocalTime)end).getLocalMillis(),((LocalTime)start).getLocalMillis());    return Minutes.minutes(minutes);  }  int amount=BaseSingleFieldPeriod.between(start,end,ZERO);  return Minutes.minutes(amount);}  }
class C{  public void shuffle(Random rand){  for (int i=_pos; i-- > 1; ) {    swap(i,rand.nextInt(i));  }}  }
class C{  public boolean hasCategory(String category){  return mCategories != null && mCategories.contains(category);}  }
class C{  @SuppressWarnings("unchecked") public void add(String term,int doc,int frequency,PAYLOAD[] payloads) throws IOException {  TermPayloadPosting<PAYLOAD> post;  if ((post=(TermPayloadPosting<PAYLOAD>)postings.get(term)) != null) {    post.insert(doc,frequency,payloads);    int tf=post.getTF();    if (maxSize < tf)     maxSize=tf;  } else {    post=new TermPayloadPosting<PAYLOAD>(payloadConf);    post.writeFirstDoc(doc,frequency,payloads);    postings.put(term,post);  }  numPointers++;}  }
class C{  @Override public String toString(){  return super.toString() + "[" + hasHandled+ "-"+ hasUnhandled+ "]";}  }
class C{  public JonasStandaloneLocalConfigurationCapability(){  this.propertySupportMap.remove(GeneralPropertySet.PROTOCOL);  this.propertySupportMap.put(GeneralPropertySet.RMI_PORT,Boolean.TRUE);  this.propertySupportMap.put(ServletPropertySet.USERS,Boolean.FALSE);  this.propertySupportMap.put(GeneralPropertySet.RMI_PORT,Boolean.TRUE);  this.propertySupportMap.put(JonasPropertySet.JONAS_SERVER_NAME,Boolean.TRUE);  this.propertySupportMap.put(JonasPropertySet.JONAS_DOMAIN_NAME,Boolean.TRUE);  this.propertySupportMap.put(JonasPropertySet.JONAS_SERVICES_LIST,Boolean.TRUE);  this.propertySupportMap.put(JonasPropertySet.JONAS_JMS_PORT,Boolean.TRUE);  this.propertySupportMap.put(DatasourcePropertySet.DATASOURCE,Boolean.TRUE);  this.propertySupportMap.put(DatasourcePropertySet.TRANSACTION_SUPPORT,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.USERNAME,Boolean.TRUE);  this.propertySupportMap.put(RemotePropertySet.PASSWORD,Boolean.TRUE);}  }
class C{  public PartialVisitContext(FacesContext facesContext,Collection<String> clientIds,Set<VisitHint> hints){  if (facesContext == null) {    throw new NullPointerException();  }  this.facesContext=facesContext;  initializeCollections(clientIds);  EnumSet<VisitHint> hintsEnumSet=((hints == null) || (hints.isEmpty())) ? EnumSet.noneOf(VisitHint.class) : EnumSet.copyOf(hints);  this.hints=Collections.unmodifiableSet(hintsEnumSet);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof PivotRenderer)) {    return false;  }  PivotRenderer that=(PivotRenderer)obj;  if (this.dotWidth != that.dotWidth) {    return false;  }  if (this.dotHeight != that.dotHeight) {    return false;  }  if (!ShapeUtilities.equal(this.legendShape,that.legendShape)) {    return false;  }  return super.equals(obj);}  }
class C{  public Collection<Member> members(){  return members;}  }
class C{  public Object clone(){  MimeType newObj=null;  try {    newObj=(MimeType)super.clone();  } catch (  CloneNotSupportedException cannotHappen) {  }  newObj.parameters=(MimeTypeParameterList)parameters.clone();  return newObj;}  }
class C{  private static void replaceSymbolicRegisters(IR ir){  RegisterAllocatorState regAllocState=ir.MIRInfo.regAllocState;  for (Enumeration<Instruction> inst=ir.forwardInstrEnumerator(); inst.hasMoreElements(); ) {    Instruction s=inst.nextElement();    for (Enumeration<Operand> ops=s.getOperands(); ops.hasMoreElements(); ) {      Operand op=ops.nextElement();      if (op.isRegister()) {        RegisterOperand rop=op.asRegister();        Register r=rop.getRegister();        if (r.isSymbolic() && !r.isSpilled()) {          Register p=regAllocState.getMapping(r);          if (VM.VerifyAssertions)           VM._assert(p != null);          rop.setRegister(p);        }      }    }  }}  }
class C{  private static synchronized final void closeCache(){  if (cache != null) {    try {      if (!cache.isClosed()) {        CacheTransactionManager txMgr=cache.getCacheTransactionManager();        if (txMgr != null) {          if (txMgr.exists()) {            txMgr.rollback();          }        }        cache.close();      }    }  finally {      cache=null;    }  }}  }
class C{  int parseYear(String source,String token,int ofs) throws ParseException {  int year=parseNumber(source,ofs,"year",-1,-1);  int len=source.length();  int tokenLen=token.length();  int thisYear=Calendar.getInstance().get(Calendar.YEAR);  if ((len == 2) && (tokenLen < 3)) {    int c=(thisYear / 100) * 100;    year+=c;    if (year > (thisYear + 20)) {      year-=100;    }  }  validateNumber(year,ofs,"year",1000,thisYear + 1000);  return year;}  }
class C{  public StrBuilder insert(int index,final boolean value){  validateIndex(index);  if (value) {    ensureCapacity(size + 4);    System.arraycopy(buffer,index,buffer,index + 4,size - index);    buffer[index++]='t';    buffer[index++]='r';    buffer[index++]='u';    buffer[index]='e';    size+=4;  } else {    ensureCapacity(size + 5);    System.arraycopy(buffer,index,buffer,index + 5,size - index);    buffer[index++]='f';    buffer[index++]='a';    buffer[index++]='l';    buffer[index++]='s';    buffer[index]='e';    size+=5;  }  return this;}  }
class C{  public boolean containDatum(ContextualDatum datum){  int discreteDimensions=datum.getContextualDiscreteAttributes().size();  int doubleDimensions=datum.getContextualDoubleAttributes().getDimension();  int totalDimensions=discreteDimensions + doubleDimensions;  for (int i=0; i < dimensions.size(); i++) {    int k=dimensions.get(i);    if (k >= 0 && k < discreteDimensions) {      int value=datum.getContextualDiscreteAttributes().get(k);      if (!intervals.get(i).contains(value))       return false;    } else     if (k >= discreteDimensions && k < totalDimensions) {      double value=datum.getContextualDoubleAttributes().getEntry(k - discreteDimensions);      if (!intervals.get(i).contains(value))       return false;    }  }  return true;}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return this.getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @Snippet public static Object instanceofWithProfile(Object object,@VarargsParameter KlassPointer[] hints,@VarargsParameter boolean[] hintIsPositive,Object trueValue,Object falseValue,@ConstantParameter boolean nullSeen){  if (probability(NOT_FREQUENT_PROBABILITY,object == null)) {    isNull.inc();    if (!nullSeen) {      DeoptimizeNode.deopt(InvalidateReprofile,OptimizedTypeCheckViolated);    }    return falseValue;  }  GuardingNode anchorNode=SnippetAnchorNode.anchor();  KlassPointer objectHub=loadHubIntrinsic(PiNode.piCastNonNull(object,anchorNode));  ExplodeLoopNode.explodeLoop();  for (int i=0; i < hints.length; i++) {    KlassPointer hintHub=hints[i];    boolean positive=hintIsPositive[i];    if (probability(LIKELY_PROBABILITY,hintHub.equal(objectHub))) {      hintsHit.inc();      return positive ? trueValue : falseValue;    }    hintsMiss.inc();  }  DeoptimizeNode.deopt(DeoptimizationAction.InvalidateReprofile,OptimizedTypeCheckViolated);  return falseValue;}  }
class C{  void applyTypeToList(Import t,List<File> files,Consumer<List<ImportItem>> cb){  if (cb == null)   return;  if (files == null || files.isEmpty())   return;  cb.accept(files.stream().map(null).collect(Collectors.toList()));}  }
class C{  public double linearDistanceSquared(final PlanetModel planetModel,final double x,final double y,final double z,final Membership... bounds){  final double linearDistance=linearDistance(planetModel,x,y,z,bounds);  return linearDistance * linearDistance;}  }
class C{  public void destroy(){  log.fine("destroy");}  }
class C{  public boolean hasPrestamosEnCurso(String idUsuario){  String[] estados={String.valueOf(PrestamosConstants.ESTADO_PRESTAMO_ABIERTO),String.valueOf(PrestamosConstants.ESTADO_PRESTAMO_AUTORIZADO),String.valueOf(PrestamosConstants.ESTADO_PRESTAMO_DEVUELTO_INCOMPLETO),String.valueOf(PrestamosConstants.ESTADO_PRESTAMO_ENTREGADO),String.valueOf(PrestamosConstants.ESTADO_PRESTAMO_RESERVADO),String.valueOf(PrestamosConstants.ESTADO_PRESTAMO_SOLICITADO)};  return prestamoDBEntity.hasPrestamos(idUsuario,estados);}  }
class C{  void updateChildOffsetsToIndex(int index){  int pos=lastValidOffset.getChildView().getStartOffset();  int startIndex=getViewIndex(pos,Position.Bias.Forward);  float lastOffset=lastValidOffset.getMajorOffset();  for (int i=startIndex; i <= index; i++) {    ChildState cs=getChildState(i);    cs.setMajorOffset(lastOffset);    lastOffset+=cs.getMajorSpan();  }}  }
class C{  @Override public Collection<Integer> positions(){  return null;}  }
class C{  public MongoInteractionWriter(DB db,String relationTypesCollection,String interactionCollection){  interactions=db.getCollection(interactionCollection);  relationTypes=db.getCollection(relationTypesCollection);}  }
class C{  public Select<Model> include(String... columns){  Collections.addAll(includedColumns,columns);  return this;}  }
class C{  public String toString(){  return this.soundFieldGroupLabelSubDescriptorBO.toString();}  }
class C{  @Override public DataTable sample(int newSize){  return this;}  }
class C{  public void deletePoint(int position){  int renderType=poly.getRenderType();  Projection proj=getProjection();  boolean needToHookUp=false;  if (position <= 0 && isEnclosed()) {    enclose(false);    needToHookUp=true;  }  if (renderType == OMGraphic.RENDERTYPE_LATLON) {    Debug.message("eomg","EditableOMPoly: removing point from lat/lon poly");    if (proj != null) {      double[] ll=poly.getLatLonArray();      double[] newll=new double[ll.length - 2];      int actualPosition=(position == Integer.MAX_VALUE ? ll.length : position * 2);      if (actualPosition >= ll.length) {        System.arraycopy(ll,0,newll,0,ll.length - 2);        position=(ll.length - 2) / 2;      } else       if (actualPosition <= 0) {        System.arraycopy(ll,2,newll,0,ll.length - 2);        position=0;      } else {        System.arraycopy(ll,0,newll,0,actualPosition);        System.arraycopy(ll,actualPosition + 2,newll,actualPosition,ll.length - actualPosition - 2);      }      poly.setLocation(newll,poly.getUnits());    }  } else {    Debug.message("eomg","EditableOMPoly: removing point from x/y or offset poly");    int currentLength=poly.xs.length;    int[] newxs=new int[currentLength - 1];    int[] newys=new int[currentLength - 1];    if (position >= currentLength) {      System.arraycopy(poly.xs,0,newxs,0,currentLength - 1);      System.arraycopy(poly.ys,0,newys,0,currentLength - 1);      position=currentLength - 1;    } else     if (position <= 0) {      System.arraycopy(poly.xs,1,newxs,0,currentLength - 1);      System.arraycopy(poly.ys,1,newys,0,currentLength - 1);      position=0;    } else {      System.arraycopy(poly.xs,0,newxs,0,position);      System.arraycopy(poly.xs,position + 1,newxs,position,currentLength - position - 1);      System.arraycopy(poly.ys,0,newys,0,position);      System.arraycopy(poly.ys,position + 1,newys,position,currentLength - position - 1);    }    if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {      poly.setLocation(poly.lat,poly.lon,poly.getUnits(),newxs,newys);    } else {      poly.setLocation(newxs,newys);    }  }  if (proj != null) {    poly.regenerate(proj);  }  GrabPoint gp=(GrabPoint)polyGrabPoints.remove(position);  if (gpo != null && gp != null) {    gpo.removeGrabPoint(gp);  }  if (needToHookUp) {    enclose(true);  }}  }
class C{  static void sortBound(double bound[],int bc){  for (int i=0; i < bc - 4; i+=4) {    int k=i;    for (int j=i + 4; j < bc; j+=4) {      if (bound[k] > bound[j]) {        k=j;      }    }    if (k != i) {      double tmp=bound[i];      bound[i]=bound[k];      bound[k]=tmp;      tmp=bound[i + 1];      bound[i + 1]=bound[k + 1];      bound[k + 1]=tmp;      tmp=bound[i + 2];      bound[i + 2]=bound[k + 2];      bound[k + 2]=tmp;      tmp=bound[i + 3];      bound[i + 3]=bound[k + 3];      bound[k + 3]=tmp;    }  }}  }
class C{  public ScoreboardEntry(ScoreboardDisplay display,String displayName,String entry){  this(display,Strings.trim(displayName,0,16),entry,Strings.trim(displayName,16,32));}  }
class C{  public ScriptExecutorTaskStatus call() throws Exception {  ScriptMethodRequest request;  while ((request=requests.poll()) != null) {    ScriptMethodResponse response=null;    try {      String method=request.getMethod();      Object argument=request.getArgument();      Object value=executor.execute(method,argument);      response=new ScriptMethodResponse(request,value,null,true);    } catch (    Throwable t) {      response=new ScriptMethodResponse(request,null,t,false);      String msg=formatErrorMessage(request);      logger.error(msg,response.getThrowable());      ScriptExecutorTaskStatus status=new ScriptExecutorTaskStatus(count.get(),false,response);      return status;    } finally {      responses.add(response);    }    count.incrementAndGet();  }  return new ScriptExecutorTaskStatus(count.get(),true,null);}  }
class C{  public static Statement generateNullCheck(AbstractVariableDeclaration variable,EclipseNode sourceNode){  NullCheckExceptionType exceptionType=sourceNode.getAst().readConfiguration(ConfigurationKeys.NON_NULL_EXCEPTION_TYPE);  if (exceptionType == null)   exceptionType=NullCheckExceptionType.NULL_POINTER_EXCEPTION;  ASTNode source=sourceNode.get();  int pS=source.sourceStart, pE=source.sourceEnd;  long p=(long)pS << 32 | pE;  if (isPrimitive(variable.type))   return null;  AllocationExpression exception=new AllocationExpression();  setGeneratedBy(exception,source);  int partCount=1;  String exceptionTypeStr=exceptionType.getExceptionType();  for (int i=0; i < exceptionTypeStr.length(); i++)   if (exceptionTypeStr.charAt(i) == '.')   partCount++;  long[] ps=new long[partCount];  Arrays.fill(ps,0L);  exception.type=new QualifiedTypeReference(fromQualifiedName(exceptionTypeStr),ps);  setGeneratedBy(exception.type,source);  exception.arguments=new Expression[]{new StringLiteral(exceptionType.toExceptionMessage(new String(variable.name)).toCharArray(),pS,pE,0)};  setGeneratedBy(exception.arguments[0],source);  ThrowStatement throwStatement=new ThrowStatement(exception,pS,pE);  setGeneratedBy(throwStatement,source);  SingleNameReference varName=new SingleNameReference(variable.name,p);  setGeneratedBy(varName,source);  NullLiteral nullLiteral=new NullLiteral(pS,pE);  setGeneratedBy(nullLiteral,source);  EqualExpression equalExpression=new EqualExpression(varName,nullLiteral,OperatorIds.EQUAL_EQUAL);  equalExpression.sourceStart=pS;  equalExpression.statementEnd=equalExpression.sourceEnd=pE;  setGeneratedBy(equalExpression,source);  Block throwBlock=new Block(0);  throwBlock.statements=new Statement[]{throwStatement};  throwBlock.sourceStart=pS;  throwBlock.sourceEnd=pE;  setGeneratedBy(throwBlock,source);  IfStatement ifStatement=new IfStatement(equalExpression,throwBlock,0,0);  setGeneratedBy(ifStatement,source);  return ifStatement;}  }
class C{  public boolean unregister(CacheInterface instance){  if (instance == null)   return false;  boolean found=false;  for (int i=m_instances.size() - 1; i >= 0; i--) {    CacheInterface stored=(CacheInterface)m_instances.get(i);    if (instance.equals(stored)) {      m_instances.remove(i);      found=true;    }  }  return found;}  }
class C{  public NamingEnumeration list(Name name) throws NamingException {  return listBindings(name);}  }
class C{  public JSONObject(Object bean){  this();  this.populateMap(bean);}  }
class C{  protected Object entryValue(HashEntry entry){  return entry.value;}  }
class C{  public void startEditingAtPath(JTree a,TreePath b){  for (int i=0; i < uis.size(); i++) {    ((TreeUI)(uis.elementAt(i))).startEditingAtPath(a,b);  }}  }
class C{  public static Location listTagsToLocation(World world,CompoundTag tag){  if (tag.isList("Pos",TagType.DOUBLE)) {    List<Double> pos=tag.getList("Pos",TagType.DOUBLE);    if (pos.size() == 3) {      Location location=new Location(world,pos.get(0),pos.get(1),pos.get(2));      if (tag.isList("Rotation",TagType.FLOAT)) {        List<Float> rot=tag.getList("Rotation",TagType.FLOAT);        if (rot.size() == 2) {          location.setYaw(rot.get(0));          location.setPitch(rot.get(1));        }      }      return location;    }  }  return null;}  }
class C{  private boolean existsDirtyEditorFor(IMarker[] markers){  for (  IMarker marker : markers) {    final XtextEditor editorForMarker=findEditor(marker.getResource());    if (editorForMarker != null && editorForMarker.isDirty())     return true;  }  return false;}  }
class C{  public static int longestSuffix(final int leftOffset,final String... strings){  if (strings.length <= 1) {    return strings.length == 0 ? 0 : strings[0].length();  }  final String a=strings[0];  int clip=-1;  while (true) {    clip++;    for (int k=1; k < strings.length; k++) {      if (strings[k] != null && !equalsRight(a,strings[k],clip,leftOffset)) {        return clip;      }    }  }}  }
class C{  public int index(){  return currentBufferIndex;}  }
class C{  private static int gcd(int a,int b){  while (b != 0) {    int tmp=a % b;    a=b;    b=tmp;  }  return a;}  }
class C{  protected ExecutionError(@Nullable String message){  super(message);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public boolean isUdhiAndReplyPath(){  return isUdhiAndReplyPath(esmClass);}  }
class C{  public void mark(long n){  count.add(n);  m1Rate.update(n);  m5Rate.update(n);  m15Rate.update(n);}  }
class C{  public GemFireParameterizedMessage(final String messagePattern,final Object[] objectArgs,final Throwable throwable){  this.messagePattern=messagePattern;  this.throwable=throwable;  this.stringArgs=parseArguments(objectArgs);}  }
class C{  public void testDhtDoubleDestroy() throws Exception {  dhtDestroy();  dhtDestroy();}  }
class C{  private void prev(){  if (changed() && !MessageBox.confirmDialog(owner,"Are you sure you want to return to previous page?\n" + "This will discard all your changes."))   return;  hdrPane.setLeft(dbIcon);  titleLb.setText("Connect To Database");  subTitleLb.setText("Specify database connection properties...");  rootPane.setCenter(connLayerPnl);  prevBtn.setDisable(true);  nextBtn.setText("Next");  Controls.tooltip(nextBtn,"Go to \"XML and POJO generation\" page");}  }
class C{  public void makeDirty(){}  }
class C{  public Rod(final String name,final int axisSamples,final int radialSamples,final double radius,final double length){  super(name);  _axisSamples=axisSamples;  _radialSamples=radialSamples;  _length=length;  _radius=radius;  allocateVertices();}  }
class C{  private byte encryptByte(byte data,int blockOff){  return (byte)(FRE[blockOff] ^ data);}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.annotationValue();  value.write(writer);}  }
class C{  protected synchronized void updateCurrentCursor(int sourceAct,int targetAct,int status){  if (useCustomCursor) {    return;  }  Cursor c=null;switch (status) {default :    targetAct=DnDConstants.ACTION_NONE;case ENTER:case OVER:case CHANGED:  int ra=sourceAct & targetAct;if (ra == DnDConstants.ACTION_NONE) {  if ((sourceAct & DnDConstants.ACTION_LINK) == DnDConstants.ACTION_LINK)   c=DragSource.DefaultLinkNoDrop; else   if ((sourceAct & DnDConstants.ACTION_MOVE) == DnDConstants.ACTION_MOVE)   c=DragSource.DefaultMoveNoDrop; else   c=DragSource.DefaultCopyNoDrop;} else {  if ((ra & DnDConstants.ACTION_LINK) == DnDConstants.ACTION_LINK)   c=DragSource.DefaultLinkDrop; else   if ((ra & DnDConstants.ACTION_MOVE) == DnDConstants.ACTION_MOVE)   c=DragSource.DefaultMoveDrop; else   c=DragSource.DefaultCopyDrop;}}setCursorImpl(c);}  }
class C{  public Entry next(){  while (this.next == null && this.index < table.length) {    if (table[index] != null) {      this.next=table[index];    }    this.index++;  }  Entry oldNext=this.next;  if (oldNext != null) {    this.next=oldNext.next;  }  return oldNext;}  }
class C{  private void registerArrays(final boolean throwException,final int defaultArraySize){  this.registerArrayConverter(Boolean.TYPE,new BooleanConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Byte.TYPE,new ByteConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Character.TYPE,new CharacterConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Double.TYPE,new DoubleConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Float.TYPE,new FloatConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Integer.TYPE,new IntegerConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Long.TYPE,new LongConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Short.TYPE,new ShortConverter(),throwException,defaultArraySize);  this.registerArrayConverter(BigDecimal.class,new BigDecimalConverter(),throwException,defaultArraySize);  this.registerArrayConverter(BigInteger.class,new BigIntegerConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Boolean.class,new BooleanConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Byte.class,new ByteConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Character.class,new CharacterConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Double.class,new DoubleConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Float.class,new FloatConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Integer.class,new IntegerConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Long.class,new LongConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Short.class,new ShortConverter(),throwException,defaultArraySize);  this.registerArrayConverter(String.class,new StringConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Class.class,new ClassConverter(),throwException,defaultArraySize);  this.registerArrayConverter(java.util.Date.class,new DateConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Calendar.class,new DateConverter(),throwException,defaultArraySize);  this.registerArrayConverter(File.class,new FileConverter(),throwException,defaultArraySize);  this.registerArrayConverter(java.sql.Date.class,new SqlDateConverter(),throwException,defaultArraySize);  this.registerArrayConverter(java.sql.Time.class,new SqlTimeConverter(),throwException,defaultArraySize);  this.registerArrayConverter(Timestamp.class,new SqlTimestampConverter(),throwException,defaultArraySize);  this.registerArrayConverter(URL.class,new URLConverter(),throwException,defaultArraySize);}  }
class C{  private byte[] convertPasswordToKey(byte[] password){  try {    MessageDigest md=MessageDigest.getInstance("SHA");    byte[] seed=md.digest(password);    SecureRandom random=SecureRandom.getInstance("SHA1PRNG");    random.setSeed(seed);    byte[] rawkey=new byte[keyLength];    random.nextBytes(rawkey);    return rawkey;  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private void initFeedback(Product product) throws NonUniqueBusinessKeyException {  if (product.getProductFeedback() == null) {    ProductFeedback feedback=new ProductFeedback();    feedback.setAverageRating(new BigDecimal(0));    feedback.setProduct(product);    product.setProductFeedback(feedback);    dm.persist(feedback);  }}  }
class C{  public DeprecatedAttr(){}  }
class C{  public static int nticks(GeoTimeSerie gts){  if (isBucketized(gts)) {    return gts.bucketcount;  } else {    return gts.values;  }}  }
class C{  public <T>T unwrap(final Class<T> iface) throws SQLException {  return null;}  }
class C{  public void updateRaster(float lt,float ln,int offset_x1,int offset_y1,int w,int h,byte[] bytes,Color[] colorTable,int trans,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRaster.write(lt,ln,offset_x1,offset_y1,w,h,bytes,colorTable,trans,properties,link.dos);}  }
class C{  public T trackingId(String value){  setString(TRACKING_ID,value);  return (T)this;}  }
class C{  public boolean containsPlayer(){  for (  final RPObject obj : objects.values()) {    if (obj instanceof Player) {      return true;    }  }  return false;}  }
class C{  public static long nanoTime(){  return Time.nanoTime();}  }
class C{  protected int computeScrollDeltaToGetChildRectOnScreenV(Rect rect){  if (getChildCount() == 0)   return 0;  int height=getHeight();  int screenTop=getScrollY();  int screenBottom=screenTop + height;  int fadingEdge=getVerticalFadingEdgeLength();  if (rect.top > 0) {    screenTop+=fadingEdge;  }  if (rect.bottom < getChildAt(0).getHeight()) {    screenBottom-=fadingEdge;  }  int scrollYDelta=0;  if (rect.bottom > screenBottom && rect.top > screenTop) {    if (rect.height() > height) {      scrollYDelta+=(rect.top - screenTop);    } else {      scrollYDelta+=(rect.bottom - screenBottom);    }    int bottom=getChildAt(0).getBottom();    int distanceToBottom=bottom - screenBottom;    scrollYDelta=Math.min(scrollYDelta,distanceToBottom);  } else   if (rect.top < screenTop && rect.bottom < screenBottom) {    if (rect.height() > height) {      scrollYDelta-=(screenBottom - rect.bottom);    } else {      scrollYDelta-=(screenTop - rect.top);    }    scrollYDelta=Math.max(scrollYDelta,-getScrollY());  }  return scrollYDelta;}  }
class C{  @After public void tearDown(){  grammar=null;}  }
class C{  private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {  iInstant=(DateMidnight)oos.readObject();  DateTimeFieldType type=(DateTimeFieldType)oos.readObject();  iField=type.getField(iInstant.getChronology());}  }
class C{  public Bundle saveInstanceState(){  Bundle bundle=new Bundle();  bundle.putBundle(KEY_VIEW_CONTROLLER_BUNDLE,controller.saveInstanceState());  if (pushControllerChangeHandler != null) {    bundle.putBundle(KEY_PUSH_TRANSITION,pushControllerChangeHandler.toBundle());  }  if (popControllerChangeHandler != null) {    bundle.putBundle(KEY_POP_TRANSITION,popControllerChangeHandler.toBundle());  }  bundle.putString(KEY_TAG,tag);  bundle.putBoolean(KEY_ATTACHED_TO_ROUTER,attachedToRouter);  return bundle;}  }
class C{  public String name(){  return name;}  }
class C{  public boolean isInPosession(){  Object oo=get_Value(COLUMNNAME_IsInPosession);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void restoreManagedDialogs(Bundle savedInstanceState){  final Bundle b=savedInstanceState.getBundle(SAVED_DIALOGS_TAG);  if (b == null) {    return;  }  final int[] ids=b.getIntArray(SAVED_DIALOG_IDS_KEY);  final int numDialogs=ids.length;  mManagedDialogs=new SparseArray<ManagedDialog>(numDialogs);  for (int i=0; i < numDialogs; i++) {    final Integer dialogId=ids[i];    Bundle dialogState=b.getBundle(savedDialogKeyFor(dialogId));    if (dialogState != null) {      final ManagedDialog md=new ManagedDialog();      md.mArgs=b.getBundle(savedDialogArgsKeyFor(dialogId));      md.mDialog=createDialog(dialogId,dialogState,md.mArgs);      if (md.mDialog != null) {        mManagedDialogs.put(dialogId,md);        onPrepareDialog(dialogId,md.mDialog,md.mArgs);        md.mDialog.onRestoreInstanceState(dialogState);      }    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:12.370 -0500",hash_original_method="96346F5FDCAEE775233825443F323528",hash_generated_method="96346F5FDCAEE775233825443F323528") void appendArrayType(StringBuilder sb,Class<?> obj){  int dimensions=0;  while (obj.isArray()) {    obj=obj.getComponentType();    dimensions++;  }  sb.append(obj.getName());  for (int d=0; d < dimensions; d++) {    sb.append("[]");  }}  }
class C{  @Override public boolean removeAll(Collection<?> collection){  int size=collection.size();  Iterator it=collection.iterator();  boolean changed=false;  while (size-- > 0) {    if (remove(it.next())) {      changed=true;    }  }  return changed;}  }
class C{  public TIntIntHashMap(int[] keys,int[] values){  super(Math.max(keys.length,values.length));  int size=Math.min(keys.length,values.length);  for (int i=0; i < size; i++) {    this.put(keys[i],values[i]);  }}  }
class C{  public void addBottomResourceBundle(String resource){  if (this.initialResourceBundle == null) {    throw new IllegalArgumentException("Cannot add bottom resource bundle, this wrapper was not properly initialized (there is no base/initial ResourceBundle).");  }  this.addBottomResourceBundle(new InternalRbmWrapper(UtilProperties.getResourceBundle(resource,this.initialResourceBundle.getLocale())));}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.PARAMETERIZED_TYPE_REF_STRUCTURAL;}  }
class C{  @Around("serviceMethods()") public Object logMethodTime(ProceedingJoinPoint pjp) throws Throwable {  Class<?> targetClass=pjp.getTarget().getClass();  MethodSignature targetMethodSignature=(MethodSignature)pjp.getSignature();  Method targetMethod=targetMethodSignature.getMethod();  if (targetMethod.getDeclaringClass().isInterface()) {    targetMethod=pjp.getTarget().getClass().getMethod(pjp.getSignature().getName(),targetMethod.getParameterTypes());  }  if ((AnnotationUtils.findAnnotation(targetClass,SuppressLogging.class) == null) && (AnnotationUtils.findAnnotation(targetMethod,SuppressLogging.class) == null) && (LOGGER.isInfoEnabled())) {    StopWatch stopWatch=new StopWatch();    stopWatch.start();    Object returnValue=pjp.proceed();    long durationMilliseconds=stopWatch.getTime();    LOGGER.info("javaMethod=\"{}.{}\" javaMethodDurationTimeInMilliseconds={} javaMethodDurationTimeFormatted=\"{}\"",targetClass.getName(),targetMethodSignature.getName(),durationMilliseconds,HerdDateUtils.formatDuration(durationMilliseconds));    return returnValue;  } else {    return pjp.proceed();  }}  }
class C{  public CStarModulesAction(final JFrame parent,final INaviModule[] modules){  super("Star module");  m_parent=parent;  m_modules=modules.clone();}  }
class C{  private void maybeMarkCurrentAddressAsUsed(Address address){  checkArgument(address.isP2SHAddress());  for (  Map.Entry<KeyChain.KeyPurpose,Address> entry : currentAddresses.entrySet()) {    if (entry.getValue() != null && entry.getValue().equals(address)) {      log.info("Marking P2SH address as used: {}",address);      currentAddresses.put(entry.getKey(),freshAddress(entry.getKey()));      return;    }  }}  }
class C{  public Builder timeout(int timeout,TimeUnit unit){  this.timeout=timeout;  this.timeoutUnit=unit;  return this;}  }
class C{  public CConnectFunctionAction(final Window parent,final IDatabase database,final INaviFunction function){  super("Resolve Imported Function");  parentWindow=parent;  this.database=database;  this.function=function;}  }
class C{  public static boolean IsBuiltInSymbol(String str,boolean pcalMode){  return null != GetBuiltInSymbol(str,pcalMode);}  }
class C{  public static Method findReadMethod(Object o,String name){  Class<?>[] params;  Method result;  result=null;  params=new Class[1];  params[0]=Element.class;  try {    result=o.getClass().getMethod(name,params);  } catch (  Exception e) {    result=null;  }  return result;}  }
class C{  public void keyReleased(KeyEvent e){  if (AWTEventMonitor.keyListener_private != null) {    AWTEventMonitor.keyListener_private.keyReleased(e);  }}  }
class C{  public void reset(){  lastPts=Long.MIN_VALUE;}  }
class C{  public double execute2(double in1,double in2){switch (bFunc) {case MAX:case CUMMAX:    return (in1 >= in2 ? in1 : in2);case MIN:case CUMMIN:  return (in1 <= in2 ? in1 : in2);case MAXINDEX:return (in1 >= in2) ? 1 : 0;case MININDEX:return (in1 <= in2) ? 1 : 0;default :return -1;}}  }
class C{  public int startBridgeServer(int port) throws IOException {  Cache cache=getCache();  CacheServer bridge=cache.addCacheServer();  bridge.setPort(port);  bridge.setMaxThreads(getMaxThreads());  bridge.start();  return bridge.getPort();}  }
class C{  public RegressionResult regress(Node target,List<Node> regressors){  int n=data.rows();  int k=regressors.size() + 1;  int _target=variables.indexOf(target);  int[] _regressors=new int[regressors.size()];  for (int i=0; i < regressors.size(); i++) {    _regressors[i]=variables.indexOf(regressors.get(i));  }  int rows[]=new int[data.rows()];  for (int i=0; i < rows.length; i++)   rows[i]=i;  TetradMatrix xSub=data.getSelection(rows,_regressors);  TetradMatrix X=new TetradMatrix(xSub.rows(),xSub.columns() + 1);  for (int i=0; i < X.rows(); i++) {    for (int j=0; j < X.columns(); j++) {      if (j == 0) {        X.set(i,j,1);      } else {        X.set(i,j,xSub.get(i,j - 1));      }    }  }  TetradVector y=data.getColumn(_target);  TetradMatrix Xt=X.transpose();  TetradMatrix XtX=Xt.times(X);  TetradMatrix G=XtX.inverse();  TetradMatrix GXt=G.times(Xt);  TetradVector b=GXt.times(y);  TetradVector yPred=X.times(b);  TetradVector xRes=yPred.minus(y);  double rss=rss(X,y,b);  double se=Math.sqrt(rss / (n - k));  double tss=tss(y);  double r2=1.0 - (rss / tss);  String[] vNames=new String[regressors.size()];  for (int i=0; i < regressors.size(); i++) {    vNames[i]=regressors.get(i).getName();  }  return new RegressionResult(false,vNames,n,b.toArray(),new double[0],new double[0],new double[0],r2,rss,alpha,yPred,xRes);}  }
class C{  @Override public void plotChanged(PlotChangeEvent event){  this.lastEvent=event;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public final void append(FastStringBuffer value){  if (value == null)   return;  int strlen=value.length();  if (0 == strlen)   return;  int copyfrom=0;  char[] chunk=m_array[m_lastChunk];  int available=m_chunkSize - m_firstFree;  while (strlen > 0) {    if (available > strlen)     available=strlen;    int sourcechunk=(copyfrom + value.m_chunkSize - 1) >>> value.m_chunkBits;    int sourcecolumn=copyfrom & value.m_chunkMask;    int runlength=value.m_chunkSize - sourcecolumn;    if (runlength > available)     runlength=available;    System.arraycopy(value.m_array[sourcechunk],sourcecolumn,m_array[m_lastChunk],m_firstFree,runlength);    if (runlength != available)     System.arraycopy(value.m_array[sourcechunk + 1],0,m_array[m_lastChunk],m_firstFree + runlength,available - runlength);    strlen-=available;    copyfrom+=available;    if (strlen > 0) {      int i=m_array.length;      if (m_lastChunk + 1 == i) {        char[][] newarray=new char[i + 16][];        System.arraycopy(m_array,0,newarray,0,i);        m_array=newarray;      }      chunk=m_array[++m_lastChunk];      if (chunk == null) {        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {          m_innerFSB=new FastStringBuffer(this);        }        chunk=m_array[m_lastChunk]=new char[m_chunkSize];      }      available=m_chunkSize;      m_firstFree=0;    }  }  m_firstFree+=available;}  }
class C{  public SyncActionApn(final ConfAction params){  super(params);}  }
class C{  public static String file_to_string(File file) throws IOException {  FileReader reader=null;  StringWriter writer=null;  String str;  try {    reader=new FileReader(file);    writer=new StringWriter();    char[] buf=new char[1000];    while (true) {      int n=reader.read(buf,0,1000);      if (n == -1) {        break;      }      writer.write(buf,0,n);    }    str=writer.toString();  }  finally {    if (reader != null) {      reader.close();    }    if (writer != null) {      writer.close();    }  }  return str;}  }
class C{  public void finish() throws Exception {}  }
class C{  private static int stringToWeek(String s){  int result=-1;  s=s.replace('W',' ');  s=s.trim();  try {    result=Integer.parseInt(s);    if ((result < 1) || (result > LAST_WEEK_IN_YEAR)) {      result=-1;    }  } catch (  NumberFormatException e) {  }  return result;}  }
class C{  public void stopStreaming(){  if (state == State.PLAYING || state == State.PAUSED) {    player.stop();    player.reset();    state=State.STOPPED;  }}  }
class C{  public PreRemoveFromViewEvent(FacesContext facesContext,UIComponent component){  super(facesContext,component);}  }
class C{  private static <T,ID>MappedDeleteCollection<T,ID> build(DatabaseType databaseType,TableInfo<T,ID> tableInfo,int dataSize) throws SQLException {  FieldType idField=tableInfo.getIdField();  if (idField == null) {    throw new SQLException("Cannot delete " + tableInfo.getDataClass() + " because it doesn't have an id field defined");  }  StringBuilder sb=new StringBuilder(128);  appendTableName(databaseType,sb,"DELETE FROM ",tableInfo.getTableName());  FieldType[] argFieldTypes=new FieldType[dataSize];  appendWhereIds(databaseType,idField,sb,dataSize,argFieldTypes);  return new MappedDeleteCollection<T,ID>(tableInfo,sb.toString(),argFieldTypes);}  }
class C{  public <T>MappingIterator<T> readValues(URL src) throws IOException, JsonProcessingException {  JsonParser jp=_jsonFactory.createJsonParser(src);  if (_schema != null) {    jp.setSchema(_schema);  }  DeserializationContext ctxt=_createDeserializationContext(jp,_config);  return new MappingIterator<T>(_valueType,jp,ctxt,_findRootDeserializer(_config,_valueType),true,_valueToUpdate);}  }
class C{  public CTracesTableFilterMenu(final JTextField filterField){  add(new CFilterEventsAction(filterField));}  }
class C{  public void testTokenSeparator() throws Exception {  Reader reader=new StringReader("this is a test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Shingle","tokenSeparator","=BLAH=").create(stream);  assertTokenStreamContents(stream,new String[]{"this","this=BLAH=is","is","is=BLAH=a","a","a=BLAH=test","test"});}  }
class C{  public boolean isEmpty(){  return head == tail;}  }
class C{  public static VOPaymentInfo toVOPaymentInfo(PaymentInfo paymentInfo,LocalizerFacade localizerFacade){  if (paymentInfo == null) {    return null;  }  VOPaymentInfo voPaymentInfo=new VOPaymentInfo();  PaymentType paymentType=paymentInfo.getPaymentType();  voPaymentInfo.setPaymentType(PaymentTypeAssembler.toVOPaymentType(paymentType,localizerFacade));  if (paymentInfo.getVersion() == 0 && paymentType != null && paymentType.getKey() == PAYMENTTYPE_INVOICE) {    voPaymentInfo.setId(localizerFacade.getText(PAYMENTTYPE_INVOICE,LocalizedObjectTypes.PAYMENT_TYPE_NAME));  } else {    voPaymentInfo.setId(paymentInfo.getPaymentInfoId());  }  voPaymentInfo.setAccountNumber(paymentInfo.getAccountNumber());  voPaymentInfo.setProviderName(paymentInfo.getProviderName());  updateValueObject(voPaymentInfo,paymentInfo);  return voPaymentInfo;}  }
class C{  public void showScrollHint(int direction){  float fraction=(direction == DragController.SCROLL_LEFT) ^ mIsRtl ? -SCROLL_HINT_FRACTION : SCROLL_HINT_FRACTION;  int hint=(int)(fraction * getWidth());  int scroll=getScrollForPage(getNextPage()) + hint;  int delta=scroll - getScrollX();  if (delta != 0) {    mScroller.setInterpolator(new DecelerateInterpolator());    mScroller.startScroll(getScrollX(),0,delta,0,Folder.SCROLL_HINT_DURATION);    invalidate();  }}  }
class C{  public JBBPOut Bit(final int... value) throws IOException {  assertNotEnded();  assertArrayNotNull(value);  if (this.processCommands) {    for (    final int b : value) {      this._writeBits(JBBPBitNumber.BITS_1,b);    }  }  return this;}  }
class C{  protected void preprocessType(Type t){  typePreprocessor.visit(t);}  }
class C{  @DSModeled protected void attachBaseContext(Context base){  mBase=base;}  }
class C{  private <T extends HadoopCounter>T createCounter(Class<? extends HadoopCounter> cls,String grp,String name){  try {    Constructor constructor=cls.getConstructor(String.class,String.class);    return (T)constructor.newInstance(grp,name);  } catch (  Exception e) {    throw new IgniteException(e);  }}  }
class C{  public SourceDirectoryWizard(java.awt.Frame parent,boolean modal,Project project,NewProjectWizard parentGUI){  super(parent,modal);  this.parentGUI=parentGUI;  this.project=project;  initComponents();  setStep(1);}  }
class C{  @Override public void paintPeer(Graphics g){  resetColors();  int width=getWidth();  int height=getHeight();  flush();  g.setColor(getBackgroundColor());  g.fillRect(1,1,width - 2,height - 2);  draw3DRect(g,0,0,width,height,true);  MappingData mappingData=(MappingData)getMappingData();  paintCaption(g,mappingData.getCaptionRect());  XMenuItemPeer[] itemVector=mappingData.getItems();  Dimension windowSize=mappingData.getDesiredSize();  XMenuItemPeer selectedItem=getSelectedItem();  for (int i=0; i < itemVector.length; i++) {    XMenuItemPeer item=itemVector[i];    XMenuItemPeer.TextMetrics metrics=item.getTextMetrics();    Rectangle bounds=item.getBounds();    if (item.isSeparator()) {      draw3DRect(g,bounds.x,bounds.y + bounds.height / 2,bounds.width,2,false);    } else {      g.setFont(item.getTargetFont());      Point textOrigin=item.getTextOrigin();      Dimension textDim=metrics.getTextDimension();      if (item == selectedItem) {        g.setColor(getSelectedColor());        g.fillRect(bounds.x,bounds.y,bounds.width,bounds.height);        draw3DRect(g,bounds.x,bounds.y,bounds.width,bounds.height,false);      }      g.setColor(item.isTargetItemEnabled() ? getForegroundColor() : getDisabledColor());      g.drawString(item.getTargetLabel(),textOrigin.x,textOrigin.y);      String shortcutText=item.getShortcutText();      if (shortcutText != null) {        g.drawString(shortcutText,mappingData.getShortcutOrigin(),textOrigin.y);      }      if (item instanceof XMenuPeer) {        int markWidth=textDim.height * 4 / 5;        int markHeight=textDim.height * 4 / 5;        int markX=bounds.x + bounds.width - markWidth - WINDOW_SPACING_RIGHT - WINDOW_ITEM_MARGIN_RIGHT;        int markY=bounds.y + (bounds.height - markHeight) / 2;        g.setColor(item.isTargetItemEnabled() ? getDarkShadowColor() : getDisabledColor());        g.drawLine(markX,markY + markHeight,markX + markWidth,markY + markHeight / 2);        g.setColor(item.isTargetItemEnabled() ? getLightShadowColor() : getDisabledColor());        g.drawLine(markX,markY,markX + markWidth,markY + markHeight / 2);        g.drawLine(markX,markY,markX,markY + markHeight);      } else       if (item instanceof XCheckboxMenuItemPeer) {        int markWidth=textDim.height * 4 / 5;        int markHeight=textDim.height * 4 / 5;        int markX=WINDOW_SPACING_LEFT + WINDOW_ITEM_MARGIN_LEFT;        int markY=bounds.y + (bounds.height - markHeight) / 2;        boolean checkState=((XCheckboxMenuItemPeer)item).getTargetState();        if (checkState) {          g.setColor(getSelectedColor());          g.fillRect(markX,markY,markWidth,markHeight);          draw3DRect(g,markX,markY,markWidth,markHeight,false);          int[] px=new int[CHECKMARK_X.length];          int[] py=new int[CHECKMARK_X.length];          for (int j=0; j < CHECKMARK_X.length; j++) {            px[j]=markX + CHECKMARK_X[j] * markWidth / CHECKMARK_SIZE;            py[j]=markY + CHECKMARK_Y[j] * markHeight / CHECKMARK_SIZE;          }          g.setColor(item.isTargetItemEnabled() ? getForegroundColor() : getDisabledColor());          g.fillPolygon(px,py,CHECKMARK_X.length);        } else {          g.setColor(getBackgroundColor());          g.fillRect(markX,markY,markWidth,markHeight);          draw3DRect(g,markX,markY,markWidth,markHeight,true);        }      }    }  }  flush();}  }
class C{  public static boolean isEntityName(String name){  PunctuationTrie<Integer> t=HtmlEntities.ENTITY_TRIE;  int n=name.length();  boolean isUcase=true;  for (int i=0; i < n; ++i) {    char ch=name.charAt(i);    if (!('A' <= ch && ch <= 'Z')) {      isUcase=false;      break;    }  }  if (isUcase) {    name=Strings.lower(name);  }  for (int i=0; i < n; ++i) {    t=t.lookup(name.charAt(i));    if (t == null) {      return false;    }  }  return t.isTerminal();}  }
class C{  public BabushkaText(Context context){  super(context);  init();}  }
class C{  public void freeze(){  this.frozen=true;}  }
class C{  public DelegationSpec(PrincipalId delegate,boolean delegable){  this.delegate=delegate;  this.delegable=delegable;  this.history=null;}  }
class C{  private static DateTimeFormatter createFormatterForStyleIndex(int dateStyle,int timeStyle){  int index=((dateStyle << 2) + dateStyle) + timeStyle;  DateTimeFormatter f=null;synchronized (cStyleCache) {    f=cStyleCache[index];    if (f == null) {      int type=DATETIME;      if (dateStyle == NONE) {        type=TIME;      } else       if (timeStyle == NONE) {        type=DATE;      }      StyleFormatter llf=new StyleFormatter(dateStyle,timeStyle,type);      f=new DateTimeFormatter(llf,llf);      cStyleCache[index]=f;    }  }  return f;}  }
class C{  public CFunctionSelectionPanel(final IDatabase database,final IActionProvider actionProvider){  super(new BorderLayout());  Preconditions.checkNotNull(database,"IE01573: Database argument can not be null");  Preconditions.checkNotNull(actionProvider,"IE01574: Action provider argument can not be null");  m_tree=new CFunctionSelectionTree(database,actionProvider);  add(m_tree);}  }
class C{  public static boolean assertEquals(final String msg,final Object a,final Object b){  if (a == b) {    return true;  }  if (a == null || !a.equals(b)) {    throw new ExamException(msg + ":" + a+ " != "+ b);  }  return true;}  }
class C{  public boolean hasEntrySource(){  return hasExtension(Source.class);}  }
class C{  private boolean anyPortsMatchStorageDevice(URIQueryResultList ports,String systemUri){  boolean isMatched=false;  for (  URI spUri : ports) {    StoragePort storagePort=_dbClient.queryObject(StoragePort.class,spUri);    if (storagePort != null) {      URI system=storagePort.getStorageDevice();      if (system != null && system.toString().equals(systemUri)) {        isMatched=true;        break;      }    }  }  return isMatched;}  }
class C{  private Status unwrapHandshake() throws SSLException, IgniteCheckedException {  inNetBuf.flip();  SSLEngineResult res=unwrap0();  handshakeStatus=res.getHandshakeStatus();  checkStatus(res);  if (handshakeStatus == FINISHED && res.getStatus() == Status.OK && inNetBuf.hasRemaining()) {    res=unwrap0();    handshakeStatus=res.getHandshakeStatus();    inNetBuf.compact();    renegotiateIfNeeded(res);  } else   inNetBuf.compact();  return res.getStatus();}  }
class C{  public CreateSnapshotRequest includeGlobalState(boolean includeGlobalState){  this.includeGlobalState=includeGlobalState;  return this;}  }
class C{  public void registerBugPattern(BugPattern bugPattern){  bugPatternMap.put(bugPattern.getType(),bugPattern);}  }
class C{  public Ifne4(){  super("ifne4",4);}  }
class C{  public PolarChartPanel(JFreeChart chart,boolean useBuffer){  super(chart,useBuffer);  checkChart(chart);  setMinimumDrawWidth(200);  setMinimumDrawHeight(200);  setMaximumDrawWidth(2000);  setMaximumDrawHeight(2000);}  }
class C{  @SideEffectFree public void info(@Nullable String msg){  throw new RuntimeException();}  }
class C{  public static void signOut(Context context){  SharedPreferences.Editor editor=getEditor(context);  editor.remove(PREFERENCE_FIRST_NAME);  editor.remove(PREFERENCE_LAST_INITIAL);  editor.remove(PREFERENCE_AVATAR);  editor.apply();}  }
class C{  @SuppressWarnings("unused") public static int dpToPx(float dp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  public static String optionalString(String string){  return TextUtils.isEmpty(string) ? "" : string;}  }
class C{  public Vertex createUniqueFormula(Vertex formula,Network network){  try {    StringWriter writer=new StringWriter();    printFormula(formula,writer,"",new ArrayList<Vertex>(),new ArrayList<Vertex>(),new HashSet<Vertex>(),network);    String source=writer.toString();    if (source.length() > AbstractNetwork.MAX_TEXT) {      return formula;    }    Vertex existingFormula=network.createVertex(source);    if (!existingFormula.instanceOf(Primitive.FORMULA)) {      for (Iterator<Relationship> iterator=formula.orderedAllRelationships(); iterator.hasNext(); ) {        Relationship relationship=iterator.next();        existingFormula.addRelationship(relationship.getType(),relationship.getTarget(),relationship.getIndex());      }    }    return existingFormula;  } catch (  IOException ignore) {    throw new BotException(ignore);  }}  }
class C{  @Override public int executeUpdate(String sql) throws SQLException {  try {    debugCodeCall("executeUpdate",sql);    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  MultiplexOutputStream(ConnectionMultiplexer manager,MultiplexConnectionInfo info,int bufferLength){  this.manager=manager;  this.info=info;  buffer=new byte[bufferLength];  pos=0;}  }
class C{  public boolean isSessionInProgress(Integer vsanId) throws NetworkDeviceControllerException {  if (inConfigMode) {    throw NetworkDeviceControllerException.exceptions.mdsDeviceInConfigMode();  }  SSHPrompt[] prompts={SSHPrompt.MDS_POUND};  StringBuilder buf=new StringBuilder();  String payload=MessageFormat.format(MDSDialogProperties.getString("MDSDialog.isSessionInProgress.showzonestatus.cmd"),vsanId.toString());  lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);  String[] lines=getLines(buf);  String[] regex={MDSDialogProperties.getString("MDSDialog.isSessionInProgress.session.match"),MDSDialogProperties.getString("MDSDialog.isSessionInProgress.mode.match")};  String[] groups=new String[10];  boolean session=false;  boolean enhanced=false;  for (  String line : lines) {    int index=match(line,regex,groups);switch (index) {case 0:      if (false == groups[0].equals(MDSDialogProperties.getString("MDSDialog.isSessionInProgress.none"))) {        session=true;      }case 1:    if (groups[0].equals(MDSDialogProperties.getString("MDSDialog.isSessionInProgress.enhanced"))) {      enhanced=true;    }}}if (!enhanced) {_log.warn("Enhanced zoning not enabled: " + vsanId);}return session;}  }
class C{  @Override public JsonGenerator useDefaultPrettyPrinter(){  return this;}  }
class C{  public boolean hasMagneticClamps(){  return countWorkingMisc(MiscType.F_MAGNETIC_CLAMP) > 0;}  }
class C{  public XPathFunctionException(String message){  super(message);}  }
class C{  @Override public int compareTo(Object o1){  int result;  if (o1 instanceof Month) {    Month m=(Month)o1;    result=this.year - m.getYearValue();    if (result == 0) {      result=this.month - m.getMonth();    }  } else   if (o1 instanceof RegularTimePeriod) {    result=0;  } else {    result=1;  }  return result;}  }
class C{  public void warning(SAXParseException e) throws SAXException {  addValidationException(e);}  }
class C{  public void printPath(int index){  List<V> path=getPath(index);  System.out.print("A path from " + vertices.get(root) + " to "+ vertices.get(index)+ ": ");  for (int i=path.size() - 1; i >= 0; i--)   System.out.print(path.get(i) + " ");}  }
class C{  @SuppressWarnings("unused") @Test public void testParentEntryPartial(){  Statechart sc=_createStatechart("sc");{    InterfaceScope s_scope=_createInterfaceScope("Interface",sc);    VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,s_scope);    Region r=_createRegion("r",sc);{      State s1=_createState("s1",r);{        _createEntryAssignment(v1,s1,1);        Region r_s1=_createRegion("r",s1);{          State s3=_createState("s3",r_s1);{            Region r_s3=_createRegion("r",s3);{              State s4=_createState("s4",r_s3);              _createEntryAssignment(v1,s4,3);              State s5=_createState("s5",r_s3);            }          }        }      }      State s2=_createState("s2",r);{        Region r_s1=_createRegion("r",s2);{          _createState("s6",r_s1);        }      }    }  }  _createTransition(findState(sc,"s6"),findState(sc,"s4"));  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s1=flow.getStates().get(0);  assertEquals("sc.r.s1",_s1.getName());  assertNotNull(_s1.getEntryAction());  ExecutionState _s3=flow.getStates().get(1);  assertEquals("sc.r.s1.r.s3",_s3.getName());  assertNull(_s3.getEntryAction());  ExecutionState _s4=flow.getStates().get(2);  assertEquals("sc.r.s1.r.s3.r.s4",_s4.getName());  assertNotNull(_s4.getEntryAction());  ExecutionState _s6=flow.getStates().get(5);  assertEquals("sc.r.s2.r.s6",_s6.getName());  assertNull(_s6.getEntryAction());  Reaction _t=_s6.getReactions().get(0);  assertTrue(_t.isTransition());  Sequence _effect=(Sequence)_t.getEffect();  assertEquals(3,_effect.getSteps().size());  assertCall(_effect,2,_s4.getEnterSequences().get(0));  assertCall(_effect,1,_s1.getEntryAction());}  }
class C{  public synchronized void add(String category,double value){  mCategories.add(category);  mValues.add(value);}  }
class C{  public static String objectToJsonNested(Object object,int length){  return objectToJsonNestedChkCDep(object,length,false);}  }
class C{  private void unSubscribeAction(Bundle data){  IMqttToken token=removeMqttToken(data);  simpleAction(token,data);}  }
class C{  private void showErrorMessage(String message){  Toast.makeText(getActivity(),message,Toast.LENGTH_LONG).show();  if (message.equals(getString(R.string.abelana_auth_error_message))) {    ((MainActivity)getActivity()).startGitkitActivity();  }}  }
class C{  public IonSystemBuilder immutable(){  return this;}  }
class C{  public CDebugLeftPanel(final JFrame parent,final BackEndDebuggerProvider provider,final CDebugPerspectiveModel debugPerspectiveModel){  super(new BorderLayout());  Preconditions.checkNotNull(parent,"IE01807: Parent argument can not be null");  Preconditions.checkNotNull(debugPerspectiveModel,"IE01808: Debug perspective model argument can not be null");  m_debuggerSelectionPanel=new CDebuggerSelectionPanel(provider,debugPerspectiveModel);  m_debuggerSelectionPanel.setBorder(new TitledBorder("Active Debugger"));  m_registerPanel=new CRegisterView(parent,debugPerspectiveModel);  add(m_debuggerSelectionPanel,BorderLayout.NORTH);  add(m_registerPanel);}  }
class C{  private void toggleDisplay(){  mechW.setVisible(!mechW.isVisible());  if (mechW.isVisible()) {    frame.requestFocus();  }}  }
class C{  public ExponentialBSPGrowth(Type units){  super(units);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (changeType_1: ");  result.append(changeType_1);  result.append(')');  return result.toString();}  }
class C{  static public Locator southEast(boolean isTransform){  return new RelativeLocator(1.0,1.0,isTransform);}  }
class C{  private void paintWay(final Canvas canvas,final Way way){  float[] linePoints=pointListToLinePointsArray(way.getNodes());  Paint paint;  if (tmpDrawingInEditRange && (tmpDrawingEditMode == Logic.Mode.MODE_TAG_EDIT || tmpDrawingEditMode == Logic.Mode.MODE_EASYEDIT)) {    if (prefs.isToleranceVisible() && tmpClickableElements == null) {      canvas.drawLines(linePoints,wayTolerancePaint);    } else     if (tmpClickableElements != null && tmpClickableElements.contains(way)) {      canvas.drawLines(linePoints,wayTolerancePaint2);    }  }  boolean isSelected=tmpDrawingInEditRange && tmpDrawingSelectedWays != null && tmpDrawingSelectedWays.contains(way);  boolean isMemberOfSelectedRelation=tmpDrawingInEditRange && tmpDrawingSelectedRelationWays != null && tmpDrawingSelectedRelationWays.contains(way);  if (isSelected) {    paint=DataStyle.getCurrent(DataStyle.SELECTED_WAY).getPaint();    canvas.drawLines(linePoints,paint);    paint=DataStyle.getCurrent(DataStyle.WAY_DIRECTION).getPaint();    drawOnewayArrows(canvas,linePoints,false,paint);  } else   if (isMemberOfSelectedRelation) {    paint=DataStyle.getCurrent(DataStyle.SELECTED_RELATION_WAY).getPaint();    canvas.drawLines(linePoints,paint);    paint=DataStyle.getCurrent(DataStyle.WAY_DIRECTION).getPaint();    drawOnewayArrows(canvas,linePoints,false,paint);  }  int onewayCode=way.getOneway();  if (onewayCode != 0) {    FeatureStyle fp=DataStyle.getCurrent(DataStyle.ONEWAY_DIRECTION);    drawOnewayArrows(canvas,linePoints,(onewayCode == -1),fp.getPaint());  } else   if (way.getTagWithKey(Tags.KEY_WATERWAY) != null) {    FeatureStyle fp=DataStyle.getCurrent(DataStyle.ONEWAY_DIRECTION);    drawOnewayArrows(canvas,linePoints,false,fp.getPaint());  }  FeatureStyle fp;  if (way.hasProblem(context)) {    fp=DataStyle.getCurrent(DataStyle.PROBLEM_WAY);  } else {    FeatureStyle wayFp=way.getFeatureProfile();    if (wayFp == null) {      fp=DataStyle.getCurrent(DataStyle.WAY);      String highwayType=way.getTagWithKey(Tags.KEY_HIGHWAY);      if (highwayType != null) {        FeatureStyle tempFp=DataStyle.getCurrent("way-highway");        if (tempFp != null) {          fp=tempFp;        }        tempFp=DataStyle.getCurrent("way-highway-" + highwayType);        if (tempFp != null) {          fp=tempFp;        }        String highwaySubType;        if (highwayType.equals("track")) {          highwaySubType=way.getTagWithKey("tracktype");        } else {          highwaySubType=way.getTagWithKey(highwayType);        }        if (highwaySubType != null) {          tempFp=DataStyle.getCurrent("way-highway-" + highwayType + "-"+ highwaySubType);          if (tempFp != null) {            fp=tempFp;          }        }      } else {        String[] tags={"building","railway","leisure","landuse","waterway","natural","addr:interpolation","boundary","amenity","shop","power","aerialway","military","historic"};        FeatureStyle tempFp=null;        for (        String tag : tags) {          tempFp=getProfile(tag,way);          if (tempFp != null) {            fp=tempFp;            break;          }        }        if (tempFp == null) {          ArrayList<Relation> relations=way.getParentRelations();          String[] relationTags={"boundary","leisure","landuse","natural","waterway","building"};          if (relations != null) {            for (            Relation r : relations) {              for (              String tag : relationTags) {                tempFp=getProfile(tag,r);                if (tempFp != null) {                  fp=tempFp;                  break;                }              }              if (tempFp != null) {                break;              }            }          }        }      }      way.setFeatureProfile(fp);    } else {      fp=wayFp;    }  }  if (linePoints.length > 2) {    path.reset();    for (int i=0; i < (linePoints.length); i=i + 4) {      path.moveTo(linePoints[i],linePoints[i + 1]);      path.lineTo(linePoints[i + 2],linePoints[i + 3]);    }    canvas.drawPath(path,fp.getPaint());  }  if (tmpDrawingSelectedWays == null && tmpDrawingSelectedRelationWays == null && tmpDrawingSelectedRelationNodes == null && tmpDrawingEditMode == Logic.Mode.MODE_EASYEDIT) {    for (int i=2; i < linePoints.length; i=i + 4) {      float x0=linePoints[i - 2];      float y0=linePoints[i - 1];      float xDelta=linePoints[i] - x0;      float yDelta=linePoints[i + 1] - y0;      double len=Math.hypot(xDelta,yDelta);      if (len > DataStyle.getCurrent().minLenForHandle) {        if (handles == null)         handles=new LongHashSet();        handles.put(((long)(Float.floatToRawIntBits(x0 + xDelta / 2)) << 32) + (long)Float.floatToRawIntBits(y0 + yDelta / 2));      }    }  }  if (showIcons && showWayIcons && zoomLevel > SHOW_ICONS_LIMIT && way.isClosed()) {    int vs=linePoints.length;    if (vs < way.nodeCount() * 2) {      return;    }    double A=0;    double Y=0;    double X=0;    for (int i=0; i < vs; i=i + 2) {      double x1=linePoints[i];      double y1=linePoints[i + 1];      double x2=linePoints[(i + 2) % vs];      double y2=linePoints[(i + 3) % vs];      double d=x1 * y2 - x2 * y1;      A=A + d;      X=X + (x1 + x2) * d;      Y=Y + (y1 + y2) * d;    }    Y=Y / (3 * A);    X=X / (3 * A);    if (tmpPresets == null || !paintNodeIcon(way,canvas,(float)X,(float)Y,isSelected ? DataStyle.SELECTED_NODE_TAGGED : null)) {      String houseNumber=way.getTagWithKey(Tags.KEY_ADDR_HOUSENUMBER);      if (houseNumber != null && !"".equals(houseNumber)) {        paintHouseNumber((float)X,(float)Y,canvas,isSelected ? DataStyle.SELECTED_NODE_THIN : DataStyle.NODE_THIN,houseNumber);        return;      }    }  }}  }
class C{  synchronized public boolean mergeData(Storage storage,PostMergeHandler postMerge){  Log.d("StorageDelegator","mergeData called");  Storage temp=new Storage(currentStorage);  LongOsmElementMap<Node> nodeIndex=temp.getNodeIndex();  LongOsmElementMap<Way> wayIndex=temp.getWayIndex();  LongOsmElementMap<Relation> relationIndex=temp.getRelationIndex();  Log.d("StorageDelegator","mergeData finished init");  try {    for (    Node n : storage.getNodes()) {      Node apiNode=apiStorage.getNode(n.getOsmId());      if (!nodeIndex.containsKey(n.getOsmId()) && apiNode == null) {        temp.insertNodeUnsafe(n);        if (postMerge != null) {          postMerge.handler(n);        }      } else {        if (apiNode != null && apiNode.getState() == OsmElement.STATE_DELETED) {          if (apiNode.getOsmVersion() >= n.getOsmVersion())           continue; else           return false;        }        Node existingNode=nodeIndex.get(n.getOsmId());        if (existingNode.getOsmVersion() >= n.getOsmVersion())         continue; else {          if (existingNode.isUnchanged()) {            temp.insertNodeUnsafe(n);            if (postMerge != null) {              postMerge.handler(n);            }          } else           return false;        }      }    }    Log.d("StorageDelegator","mergeData added nodes");    for (    Way w : storage.getWays()) {      Way apiWay=apiStorage.getWay(w.getOsmId());      if (!wayIndex.containsKey(w.getOsmId()) && apiWay == null) {        temp.insertWayUnsafe(w);        if (postMerge != null) {          postMerge.handler(w);        }      } else {        if (apiWay != null && apiWay.getState() == OsmElement.STATE_DELETED) {          if (apiWay.getOsmVersion() >= w.getOsmVersion())           continue; else           return false;        }        Way existingWay=wayIndex.get(w.getOsmId());        if (existingWay != null) {          if (existingWay.getOsmVersion() >= w.getOsmVersion()) {            continue;          } else {            if (existingWay.isUnchanged()) {              temp.insertWayUnsafe(w);              if (postMerge != null) {                postMerge.handler(w);              }            } else             return false;          }        } else {          Log.e("StorageDelegator","mergeData null existing way " + w.getOsmId());          ACRA.getErrorReporter().putCustomData("STATUS","NOCRASH");          ACRA.getErrorReporter().handleException(null);          return false;        }      }    }    Log.d("StorageDelegator","mergeData added ways");    for (    Way w : wayIndex) {      List<Node> nodes=w.getNodes();      for (int i=0; i < nodes.size(); i++) {        Node n=nodeIndex.get(nodes.get(i).getOsmId());        if (n != null) {          nodes.set(i,n);        } else {          Log.e("StorageDelegator","mergeData null way node for way " + w.getOsmId() + " node "+ nodes.get(i).getOsmId());          ACRA.getErrorReporter().putCustomData("STATUS","NOCRASH");          ACRA.getErrorReporter().handleException(null);          return false;        }      }    }    Log.d("StorageDelegator","mergeData fixup way nodes nodes");    for (    Relation r : storage.getRelations()) {      Relation apiRelation=apiStorage.getRelation(r.getOsmId());      if (!relationIndex.containsKey(r.getOsmId()) && apiRelation == null) {        temp.insertRelationUnsafe(r);        if (postMerge != null) {          postMerge.handler(r);        }      } else {        if (apiRelation != null && apiRelation.getState() == OsmElement.STATE_DELETED) {          if (apiRelation.getOsmVersion() >= r.getOsmVersion())           continue; else           return false;        }        Relation existingRelation=relationIndex.get(r.getOsmId());        if (existingRelation.getOsmVersion() >= r.getOsmVersion()) {          continue;        } else {          if (existingRelation.isUnchanged()) {            temp.insertRelationUnsafe(r);            if (postMerge != null) {              postMerge.handler(r);            }          } else           return false;        }      }    }    Log.d("StorageDelegator","mergeData added relations");    for (    Relation r : temp.getRelations()) {      for (      RelationMember rm : r.getMembers()) {        if (rm.getType().equals(Node.NAME)) {          if (nodeIndex.containsKey(rm.getRef())) {            Node n=nodeIndex.get(rm.getRef());            rm.setElement(n);            if (n.hasParentRelation(r.getOsmId())) {              n.removeParentRelation(r.getOsmId());            }            n.addParentRelation(r);          } else {            Node apiNode=apiStorage.getNode(rm.getRef());            if (apiNode != null && apiNode.getState() == OsmElement.STATE_DELETED) {              Log.e("StorageDelegator","mergeData deleted node in downloaded relation " + r.getOsmId());              ACRA.getErrorReporter().putCustomData("STATUS","NOCRASH");              ACRA.getErrorReporter().handleException(null);              return false;            }          }        } else         if (rm.getType().equals(Way.NAME)) {          if (wayIndex.containsKey(rm.getRef())) {            Way w=wayIndex.get(rm.getRef());            rm.setElement(w);            if (w.hasParentRelation(r.getOsmId())) {              w.removeParentRelation(r.getOsmId());            }            w.addParentRelation(r);          } else {            Way apiWay=apiStorage.getWay(rm.getRef());            if (apiWay != null && apiWay.getState() == OsmElement.STATE_DELETED) {              Log.e("StorageDelegator","mergeData deleted way in downloaded relation");              ACRA.getErrorReporter().putCustomData("STATUS","NOCRASH");              ACRA.getErrorReporter().handleException(null);              return false;            }          }        } else         if (rm.getType().equals(Relation.NAME)) {          if (relationIndex.containsKey(rm.getRef())) {            Relation r2=relationIndex.get(rm.getRef());            rm.setElement(r2);            if (r2.hasParentRelation(r.getOsmId())) {              r2.removeParentRelation(r.getOsmId());            }            r2.addParentRelation(r);          } else {            Relation apiRel=apiStorage.getRelation(rm.getRef());            if (apiRel != null && apiRel.getState() == OsmElement.STATE_DELETED) {              Log.e("StorageDelegator","mergeData deleted relation in downloaded relation");              ACRA.getErrorReporter().putCustomData("STATUS","NOCRASH");              ACRA.getErrorReporter().handleException(null);              return false;            }          }        }      }    }    Log.d("StorageDelegator","mergeData fixuped relations");  } catch (  StorageException sex) {    return false;  }  currentStorage=temp;  undo.setCurrentStorage(temp);  return true;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.780 -0500",hash_original_method="DF4D046D4E3EE4FA52893B437F7EAF42",hash_generated_method="6B46B4700A32DA071066C28BB4046251") public void copyPixelsFromBuffer(Buffer src){  checkRecycled("copyPixelsFromBuffer called on recycled bitmap");  int elements=src.remaining();  int shift;  if (src instanceof ByteBuffer) {    shift=0;  } else   if (src instanceof ShortBuffer) {    shift=1;  } else   if (src instanceof IntBuffer) {    shift=2;  } else {    throw new RuntimeException("unsupported Buffer subclass");  }  long bufferBytes=(long)elements << shift;  long bitmapBytes=getByteCount();  if (bufferBytes < bitmapBytes) {    throw new RuntimeException("Buffer not large enough for pixels");  }  nativeCopyPixelsFromBuffer(mNativeBitmap,src);}  }
class C{  FieldQuery(Query query,boolean phraseHighlight,boolean fieldMatch) throws IOException {  this(query,null,phraseHighlight,fieldMatch);}  }
class C{  public int hashCode(){  return content.hashCode();}  }
class C{  public static ByteStream newGCspyByteStream(AbstractDriver driver,String name,byte minValue,byte maxValue,byte zeroValue,byte defaultValue,String stringPre,String stringPost,int presentation,int paintStyle,int indexMaxStream,Color colour,boolean summary){  return factory.newGCspyByteStream(driver,name,minValue,maxValue,zeroValue,defaultValue,stringPre,stringPost,presentation,paintStyle,indexMaxStream,colour,summary);}  }
class C{  protected void emit_Disjunction_VerticalLineKeyword_0_1_1_0_p(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public void removeChildAtIndex(int index){  this.children.remove(index);}  }
class C{  public void addActionListener(ActionListener listener){}  }
class C{  public void clear() throws IOException {  try {    hashFile.clear();  }  finally {    try {      idFile.clear();    }  finally {      dataFile.clear();    }  }}  }
class C{  public static Options fromConfig(){  return fromConfig(CeylonConfig.get());}  }
class C{  @Override public List<WorkOrder> searchWOForMB(final Map<String,Object> criteriaMap){  logger.info("---------------------------Inside searchWOForMB----------------------------");  final List<WorkOrder> filteredList=new ArrayList<WorkOrder>();  criteriaMap.put(ACTION_FLAG,"searchWOForMB");  for (  final WorkOrder workorder : searchWO(criteriaMap))   if (!isApprovalLimitReachedForWO(workorder.getId()))   filteredList.add(workorder);  return filteredList;}  }
class C{  static ColumnImpl create(ColumnImpl.InitArgs args) throws IOException {switch (args.type) {case BOOLEAN:    return new CalcBooleanColImpl(args);case TEXT:  return new CalcTextColImpl(args);case MEMO:return new CalcMemoColImpl(args);default :}if (args.type.getHasScalePrecision()) {return new CalcNumericColImpl(args);}return new CalcColImpl(args);}  }
class C{  private String transformBuildTargetToGeneratedJarPath(String buildTarget){  StringBuilder sb=new StringBuilder("buck-out/gen/");  for (  String pathComponent : buildTarget.split("/")) {    if (pathComponent.length() > 0) {      String[] targetComponents=pathComponent.split(":");      sb.append(targetComponents[0]).append("/");      if (targetComponents.length > 1) {        sb.append(targetComponents[1]).append(".jar");      }    }  }  return sb.toString();}  }
class C{  private List<BatchInfo> createBatch(InputStream inputStream,List<BatchInfo> batchInfos,JobInfo jobInfo,BulkConnection bulkConnection){  try {    LOG.info("Creating batch for the test classes to execute using bulk connection....");    BatchInfo batchInfo=bulkConnection.createBatchFromStream(jobInfo,inputStream);    batchInfos.add(batchInfo);  } catch (  AsyncApiException e) {    ApexUnitUtils.shutDownWithDebugLog(e,"Encountered AsyncApiException Exception while trying to create batchInfo" + " using bulk connection. " + e.getMessage());  } finally {    try {      inputStream.close();    } catch (    IOException e) {      ApexUnitUtils.shutDownWithDebugLog(e,"Encountered IO Exception while trying to close the input stream after " + "creating batchInfo using bulk connection. " + e.getMessage());    }  }  return batchInfos;}  }
class C{  private void enableSubmitIfReady(){  boolean isReady=false;  if (evServerIP.getText().toString().length() >= 1) {    isReady=true;  }  if (isReady) {    btnStartRegistration.setBackgroundColor(Color.parseColor("#11375B"));    btnStartRegistration.setTextColor(Color.WHITE);    btnStartRegistration.setEnabled(true);  } else {    btnStartRegistration.setBackgroundColor(Color.parseColor("#76756f"));    btnStartRegistration.setTextColor(Color.parseColor("#343331"));    btnStartRegistration.setEnabled(false);  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.log10(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void upgradeDatabase(Configuration configuration){  if (configuration.getMonitoringVersion() == null || configuration.getMonitoringVersion().isEmpty()) {    configuration.setMonitoringVersion("2.1");    configurationService.saveExcludingPassword(configuration);    update("update monit_check set condition_value = condition");    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.2")) {    configuration.setMonitoringVersion("2.1");    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.1")) {    configuration.setDefaultSpiderCheckInterval(60);    configuration.setDefaultSendEmails(true);    configuration.setMonitoringVersion("2.1.1");    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.1.1")) {    configuration.setMonitoringVersion("2.1.2");    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.1.2")) {    configuration.setInfoMessage("Please don't monitor my websites (like javavids.com and sitemonitoring.sourceforge.net). Lot's of people started doing it and effectively DDOSed them. If you monitor them anyway, your IP address will be blocked!");    configuration.setUserAgent("sitemonitoring http://sitemonitoring.sourceforge.net");    configuration.setMonitoringVersion("2.1.3");    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.1.3")) {    configuration.setMonitoringVersion("2.1.4");    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.1.4")) {    configuration.setMonitoringVersion("2.1.6");    configuration.setDefaultSendEmails(true);    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.1.6")) {    configuration.setMonitoringVersion("2.1.7");    configuration.setEmailFrom(configuration.getAdminEmail());    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.1.7")) {    configuration.setMonitoringVersion("2.1.8");    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.1.8")) {    configuration.setMonitoringVersion("2.1.9");    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.1.9")) {    configuration.setMonitoringVersion("2.1.10");    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.1.10")) {    configuration.setMonitoringVersion("2.1.11");    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.1.11")) {    configuration.setMonitoringVersion("2.1.12");    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.1.12")) {    configuration.setMonitoringVersion("2.1.13");    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.1.13")) {    configuration.setMonitoringVersion("2.1.14");    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.1.14")) {    configuration.setMonitoringVersion("2.2.0");    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.2.0")) {    configuration.setMonitoringVersion("2.2.1");    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.2.1")) {    configuration.setMonitoringVersion("2.2.2");    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }  if (configuration.getMonitoringVersion().equals("2.2.2")) {    configuration.setMonitoringVersion("3.0.0");    configurationService.saveExcludingPassword(configuration);    configuration=configurationService.find();  }}  }
class C{  public void showOverview(){  if (currentSubplot != null) {    currentSubplot.destroy();  }  currentSubplot=null;  showPlot(overview.getPlot());}  }
class C{  public static String checkAndFormatText(final FormatterDetails format,final String text){  if (format != null) {    return FormattingUtils.formatText(format,text,null);  }  return text;}  }
class C{  public static MasterPrivateKey decrypt(String passphrase,byte[] encrypted) throws HyperLedgerException {  try {    byte[] key=SCrypt.generate(passphrase.getBytes("UTF-8"),BITCOIN_SEED,16384,8,8,32);    SecretKeySpec keyspec=new SecretKeySpec(key,"AES");    Cipher cipher=Cipher.getInstance("AES/CBC/PKCS5Padding","BC");    byte[] iv=Arrays.copyOfRange(encrypted,0,16);    byte[] data=Arrays.copyOfRange(encrypted,16,encrypted.length);    cipher.init(Cipher.DECRYPT_MODE,keyspec,new IvParameterSpec(iv));    return MasterPrivateKey.parse(new String(cipher.doFinal(data)));  } catch (  UnsupportedEncodingException|InvalidAlgorithmParameterException|NoSuchPaddingException|NoSuchProviderException|NoSuchAlgorithmException|InvalidKeyException|BadPaddingException|IllegalBlockSizeException e) {    throw new HyperLedgerException(e);  }}  }
class C{  public void addFloat(String name){  _columnMap.put(name,new FloatCol(name));}  }
class C{  public ConsistentAreaTester(GeometryGraph geomGraph){  this.geomGraph=geomGraph;}  }
class C{  public void startInternalActivity(Intent intent){  helper.startInternalActivity(intent);}  }
class C{  public void addDefaultKeyBindings(){  addKeyBinding("C+C",COPY);  addKeyBinding("C+X",CUT);  addKeyBinding("C+V",PASTE);  addKeyBinding("BACK_SPACE",BACKSPACE);  addKeyBinding("C+BACK_SPACE",BACKSPACE_WORD);  addKeyBinding("DELETE",DELETE);  addKeyBinding("C+DELETE",DELETE_WORD);  addKeyBinding("ENTER",INSERT_BREAK);  addKeyBinding("TAB",INSERT_TAB);  addKeyBinding("S+TAB",REMOVE_TAB);  addKeyBinding("C+A",SELECT_ALL);  addKeyBinding("INSERT",OVERWRITE);  addKeyBinding("C+\\",TOGGLE_RECT);  addKeyBinding("HOME",HOME);  addKeyBinding("END",END);  addKeyBinding("S+HOME",SELECT_HOME);  addKeyBinding("S+END",SELECT_END);  addKeyBinding("C+HOME",DOCUMENT_HOME);  addKeyBinding("C+END",DOCUMENT_END);  addKeyBinding("CS+HOME",SELECT_DOC_HOME);  addKeyBinding("CS+END",SELECT_DOC_END);  addKeyBinding("PAGE_UP",PREV_PAGE);  addKeyBinding("PAGE_DOWN",NEXT_PAGE);  addKeyBinding("S+PAGE_UP",SELECT_PREV_PAGE);  addKeyBinding("S+PAGE_DOWN",SELECT_NEXT_PAGE);  addKeyBinding("LEFT",PREV_CHAR);  addKeyBinding("S+LEFT",SELECT_PREV_CHAR);  addKeyBinding("C+LEFT",PREV_WORD);  addKeyBinding("CS+LEFT",SELECT_PREV_WORD);  addKeyBinding("RIGHT",NEXT_CHAR);  addKeyBinding("S+RIGHT",SELECT_NEXT_CHAR);  addKeyBinding("C+RIGHT",NEXT_WORD);  addKeyBinding("CS+RIGHT",SELECT_NEXT_WORD);  addKeyBinding("UP",PREV_LINE);  addKeyBinding("S+UP",SELECT_PREV_LINE);  addKeyBinding("DOWN",NEXT_LINE);  addKeyBinding("S+DOWN",SELECT_NEXT_LINE);  addKeyBinding("C+ENTER",REPEAT);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.277 -0500",hash_original_method="7FDA52C90EA81767BFA435745FBF29BC",hash_generated_method="089E0854D84F67F7C34E741D9604673A") public boolean op(Region region1,Region region2,Op op){  addTaintLocal(region1.getTaintInt() + region2.getTaintInt() + op.getTaintInt());  return getTaintBoolean();}  }
class C{  @Override public void updateNotification(String singerName,String songName,int smallArt,int bigArt){  if (mService != null)   mService.updateNotification(singerName,songName,smallArt,bigArt);}  }
class C{  public int hashCode(){  int hashcode=decimalAt;  for (int i=0; i < count; i++) {    hashcode=hashcode * 37 + digits[i];  }  return hashcode;}  }
class C{  public boolean isIncludeNullsProject(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsProject);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void render(Graphics gr){  if (isVague() && !isVisible())   return;  Shape shp=getShape();  if (shp != null) {    if (matted) {      if (gr instanceof Graphics2D && stroke instanceof BasicStroke) {        ((Graphics2D)gr).setStroke(new BasicStroke(((BasicStroke)stroke).getLineWidth() + 2f));        setGraphicsColor(gr,mattingPaint);        ((Graphics2D)gr).draw(shp);      }    }    setGraphicsForFill(gr);    ((Graphics2D)gr).fill(shp);    setGraphicsForEdge(gr);    ((Graphics2D)gr).draw(shp);  } else {synchronized (graphics) {      if (traverseMode == FIRST_ADDED_ON_TOP) {        ListIterator<OMGeometry> iterator=graphics.listIterator(graphics.size());        while (iterator.hasPrevious()) {          renderGeometry(iterator.previous(),gr);        }      } else {        ListIterator<OMGeometry> iterator=graphics.listIterator();        while (iterator.hasNext()) {          renderGeometry(iterator.next(),gr);        }      }    }  }  renderLabel(gr);}  }
class C{  private void dfs(int u,int[] parent,List<Integer> searchOrder,boolean[] isVisited){  searchOrder.add(u);  isVisited[u]=true;  for (  Edge e : neighbors.get(u)) {    if (!isVisited[e.v]) {      parent[e.v]=u;      dfs(e.v,parent,searchOrder,isVisited);    }  }}  }
class C{  public int hashCode(){  long bits=1L;  bits=31L * bits + VecMathUtil.floatToIntBits(x);  bits=31L * bits + VecMathUtil.floatToIntBits(y);  bits=31L * bits + VecMathUtil.floatToIntBits(z);  bits=31L * bits + VecMathUtil.floatToIntBits(w);  return (int)(bits ^ (bits >> 32));}  }
class C{  @Override public boolean isDumbAware(){  return FoldingUpdate.supportsDumbModeFolding(myEditor);}  }
class C{  protected void engineSetMode(String mode) throws NoSuchAlgorithmException {  core.setMode(mode);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  String readTimeZone(String source,int ofs){  int sp=source.indexOf(' ',ofs);  String fragment;  if (sp != -1) {    fragment=source.substring(ofs,sp);  } else {    fragment=source.substring(ofs);  }  int len=fragment.length();  if (len == 1) {    return fragment.equals("z") ? source.substring(ofs,1) : null;  }  if (len >= 8 && fragment.startsWith(GMT)) {    return source.substring(ofs);  }  int ch=fragment.charAt(0);  if (len >= 5 && (ch == SIGN_NEGATIVE || ch == SIGN_POSITIVE)) {    return source.substring(ofs,ofs + 5);  }  for (  String timezone[] : getDateFormatSymbols().getZoneStrings()) {    for (    String z : timezone) {      if (z.equalsIgnoreCase(fragment)) {        return source.substring(ofs,ofs + z.length());      }    }  }  return null;}  }
class C{  public FriendStore(Context context,int encryptionMode) throws IllegalArgumentException {  store=new StorageBase(context,encryptionMode);}  }
class C{  void releaseWriteLock(){  this.writeLock.unlock();}  }
class C{  private String replaceLanguageAndRegion(String str){  if (str.contains("%lang%") || str.contains("%region%")) {    Locale locale=Locale.getDefault();    str=str.replace("%lang%",locale.getLanguage().toLowerCase());    str=str.replace("%region%",locale.getCountry().toLowerCase());  }  return str;}  }
class C{  public void handleException(ParseException ex,SIPMessage sipMessage,Class hdrClass,String header,String message) throws ParseException {  if (sipStack.isLoggingEnabled())   this.sipStack.getStackLogger().logException(ex);  if ((hdrClass != null) && (hdrClass.equals(From.class) || hdrClass.equals(To.class) || hdrClass.equals(CSeq.class)|| hdrClass.equals(Via.class)|| hdrClass.equals(CallID.class)|| hdrClass.equals(RequestLine.class)|| hdrClass.equals(StatusLine.class))) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logError("BAD MESSAGE!");      sipStack.getStackLogger().logError(message);    }    throw ex;  } else {    sipMessage.addUnparsed(header);  }}  }
class C{  protected void selectVerticalAutoTickUnit(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  TickUnitSource tickUnits=getStandardTickUnits();  double zero=valueToJava2D(0.0,dataArea,edge);  double estimate1=getRange().getLength() / 10.0;  DateTickUnit candidate1=(DateTickUnit)tickUnits.getCeilingTickUnit(estimate1);  double labelHeight1=estimateMaximumTickLabelHeight(g2,candidate1);  double y1=valueToJava2D(candidate1.getSize(),dataArea,edge);  double candidate1UnitHeight=Math.abs(y1 - zero);  double estimate2=(labelHeight1 / candidate1UnitHeight) * candidate1.getSize();  DateTickUnit candidate2=(DateTickUnit)tickUnits.getCeilingTickUnit(estimate2);  double labelHeight2=estimateMaximumTickLabelHeight(g2,candidate2);  double y2=valueToJava2D(candidate2.getSize(),dataArea,edge);  double unit2Height=Math.abs(y2 - zero);  DateTickUnit finalUnit;  if (labelHeight2 < unit2Height) {    finalUnit=candidate2;  } else {    finalUnit=(DateTickUnit)tickUnits.getLargerTickUnit(candidate2);  }  setTickUnit(finalUnit,false,false);}  }
class C{  public SVG12CSSEngine(Document doc,ParsedURL uri,ExtendedParser p,CSSContext ctx){  super(doc,uri,p,SVG_VALUE_MANAGERS,SVG_SHORTHAND_MANAGERS,ctx);  lineHeightIndex=LINE_HEIGHT_INDEX;}  }
class C{  public static String routeOrderEntry(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  if (session.getAttribute("orderMode") == null) {    return "init";  }  if (request.getParameter("orderMode") != null) {    return "agreements";  }  return "cart";}  }
class C{  DownloadResult download(ConfigurationSource source,String... contentIdentifiers){  DownloadResult result=new DownloadResult();  for (  ConfigurationLocation location : getLocations(source)) {    try {      Configuration config=download(location,contentIdentifiers);      rememberLastSuccessfulLocation(location);      return result.success(config);    } catch (    Exception e) {      result.addFailure(location,e);    }  }  return result.failure();}  }
class C{  public static PivotTracingClient client(){  PivotTracingClient pt=new PivotTracingClient();  for (  Tracepoint t : tracepoints) {    pt.addTracepoint(t);  }  return pt;}  }
class C{  public void casToTcfWriter(InputStream aIs,JCas aJCas,OutputStream aOs) throws WLFormatException {  EnumSet<TextCorpusLayerTag> layersToRead=EnumSet.of(TextCorpusLayerTag.TOKENS,TextCorpusLayerTag.SENTENCES);  List<TextCorpusLayerTag> layersToReplace=new ArrayList<TextCorpusLayerTag>();  if (exists(aJCas,POS.class) || !preserveIfEmpty) {    layersToReplace.add(TextCorpusLayerTag.POSTAGS);  }  if (exists(aJCas,Lemma.class) || !preserveIfEmpty) {    layersToReplace.add(TextCorpusLayerTag.LEMMAS);  }  if (exists(aJCas,NamedEntity.class) || !preserveIfEmpty) {    layersToReplace.add(TextCorpusLayerTag.NAMED_ENTITIES);  }  if (exists(aJCas,Dependency.class) || !preserveIfEmpty) {    layersToReplace.add(TextCorpusLayerTag.PARSING_DEPENDENCY);  }  if (exists(aJCas,CoreferenceChain.class) || !preserveIfEmpty) {    layersToReplace.add(TextCorpusLayerTag.REFERENCES);  }  TextCorpusStreamedWithReplaceableLayers textCorpus=null;  try {    textCorpus=new TextCorpusStreamedWithReplaceableLayers(aIs,layersToRead,EnumSet.copyOf(layersToReplace),aOs);    write(aJCas,textCorpus);  }  finally {    if (textCorpus != null) {      try {        textCorpus.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public void updatePixels(int x,int y,int w,int h){  updatePixelsImpl(x,y,w,h);}  }
class C{  @Override public void update(Instance ins) throws Exception {  throw new Exception("BottomUpConstruction method does not allow addition " + "of new Instances.");}  }
class C{  public static long hash64(final byte[] data,int length){  return hash64(data,length,0xe17a1465);}  }
class C{  public void addAttendee(Attendee attendee){  addProperty(attendee);}  }
class C{  private byte[] toZLIB(RenderedImage image,Color bkg,String colorModel) throws IOException {  return ImageGraphics2D.toByteArray(image,ImageConstants.RAW,ImageConstants.ENCODING_FLATE_ASCII85,ImageGraphics2D.getRAWProperties(bkg,colorModel));}  }
class C{  public static KeyPair createECKeyPair(String name) throws IOException {  try {    ECGenParameterSpec ecSpec=new ECGenParameterSpec(name);    KeyPairGenerator keyGen=KeyPairGenerator.getInstance("EC");    keyGen.initialize(ecSpec,new SecureRandom());    return keyGen.generateKeyPair();  } catch (  NoSuchAlgorithmException|InvalidAlgorithmParameterException ex) {    throw new IOException(ex);  }}  }
class C{  public static Name fromAddress(int[] addr){  byte[] bytes=new byte[addr.length];  for (int i=0; i < addr.length; i++) {    if (addr[i] < 0 || addr[i] > 0xFF)     throw new IllegalArgumentException("array must " + "contain values " + "between 0 and 255");    bytes[i]=(byte)addr[i];  }  return fromAddress(bytes);}  }
class C{  private void expungeBans(){  boolean changed=false;  Iterator<GlowBanEntry> iter=entryMap.values().iterator();  while (iter.hasNext()) {    if (iter.next().isExpired()) {      iter.remove();      changed=true;    }  }  if (changed) {    save();  }}  }
class C{  protected static String guessType(File file){  String name=file.getName();  String suffix=name.substring(name.lastIndexOf(".") + 1);  return mimeMap.get(suffix.toLowerCase(Locale.ROOT));}  }
class C{  public DuplicateEventException(){  super("Event has no unique ID for the subscription.");}  }
class C{  public static void validateNotNull(Object... objects){  for (  Object o : objects) {    validateNotNull(o);  }}  }
class C{  @NotNull public AsyncCallbackBuilder<T> unmarshaller(@NotNull Unmarshallable<T> unmarshaller){  this.unmarshaller=unmarshaller;  return this;}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame(SplitPaneDemo.class.getAnnotation(DemoProperties.class).value());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().add(new SplitPaneDemo());  frame.setPreferredSize(new Dimension(800,600));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  public static void writeSignedVarint(ByteBuffer buffer,int val){  writeUnsignedVarint(buffer,(val << 1) ^ (val >> 31));}  }
class C{  @Override public void onOpen(SQLiteDatabase db){  super.onOpen(db);  if (!db.isReadOnly()) {    db.execSQL("PRAGMA foreign_keys=ON;");  }}  }
class C{  public static boolean hideKeyboard(View view){  if (view == null) {    throw new NullPointerException("View is null!");  }  try {    InputMethodManager imm=(InputMethodManager)view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);    if (imm == null) {      return false;    }    imm.hideSoftInputFromWindow(view.getWindowToken(),0);  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  public OkHttpDownloader(OkHttpClient client){  this.urlFactory=new OkUrlFactory(client);}  }
class C{  public static String resourceToString(final Resource uriOrBnode){  if (uriOrBnode instanceof IRI) {    return uriOrBnode.stringValue();  } else {    return "_:" + ((BNode)uriOrBnode).getID();  }}  }
class C{  public static final Polygon flipAlongTheXAxis(Polygon polygon,Vector2 point){  return Geometry.flip(polygon,Vector2.X_AXIS,point);}  }
class C{  @RequestMapping(value="/routes",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<List<RouteDTO>> activeRoutes(){  List<Route> routes=routeLocator.getRoutes();  List<RouteDTO> routeDTOs=new ArrayList<>();  routes.forEach(null);  return new ResponseEntity<>(routeDTOs,HttpStatus.OK);}  }
class C{  private void buildExportGroupSearchResponse(List<ExportGroup> exportGroups,List<SearchResultResourceRep> resRepLists,boolean selfOnly,String type,boolean authorized){  PermissionsEnforcingResourceFilter<ExportGroup> filter=new ExportGroupSearchFilter(getUserFromContext(),_permissionsHelper);  for (  ExportGroup eg : exportGroups) {    if (!authorized && !filter.isExposed(eg)) {      continue;    }    if (selfOnly) {      if (!eg.getType().equals(type)) {        continue;      }    }    RestLinkRep selfLink=new RestLinkRep("self",RestLinkFactory.newLink(getResourceType(),eg.getId()));    SearchResultResourceRep searchResult=new SearchResultResourceRep(eg.getId(),selfLink,eg.getLabel());    resRepLists.add(searchResult);  }}  }
class C{  static Object newPropertyChangeEvent(Object source,String prop,Object oldValue,Object newValue){  try {    return propertyEventCtor.newInstance(source,prop,oldValue,newValue);  } catch (  InstantiationException|IllegalAccessException x) {    throw new AssertionError(x);  }catch (  InvocationTargetException x) {    Throwable cause=x.getCause();    if (cause instanceof Error)     throw (Error)cause;    if (cause instanceof RuntimeException)     throw (RuntimeException)cause;    throw new AssertionError(x);  }}  }
class C{  private void expandBuffer(int newBufferSize){  ByteBuffer newBuffer=ByteBuffer.allocate(newBufferSize);  int oldPosition=mBuffer.position();  mBuffer.position(0);  newBuffer.put(mBuffer);  newBuffer.position(oldPosition);  mBuffer=newBuffer;}  }
class C{  public boolean intersects(Rectangle rect){  return intersects(rect.getX(),rect.getY(),rect.getSize().getWidth(),rect.getSize().getHeight());}  }
class C{  public SocketChannel channel(){  return ch;}  }
class C{  public synchronized void addSeries(XYSeries series){  mSeries.add(series);}  }
class C{  public Matrix times(Matrix right){  if (getColumns() != right.getRows()) {    throw new IllegalArgumentException("Columns on left (" + getColumns() + ") "+ "is different than rows on right ("+ right.getRows()+ ")");  }  Matrix result=new Matrix(getRows(),right.getColumns());  for (int r=0; r < getRows(); r++) {    for (int c=0; c < right.getColumns(); c++) {      byte value=0;      for (int i=0; i < getColumns(); i++) {        value^=Galois.multiply(get(r,i),right.get(i,c));      }      result.set(r,c,value);    }  }  return result;}  }
class C{  public static boolean isTokenIn(final RevocationToken revocationToken,final List<BasicOCSPResp> basicOCSPResponses){  if ((revocationToken instanceof OCSPToken) && (basicOCSPResponses != null)) {    final BasicOCSPResp basicOCSPResp=((OCSPToken)revocationToken).getBasicOCSPResp();    final boolean contains=basicOCSPResponses.contains(basicOCSPResp);    return contains;  }  return false;}  }
class C{  public static byte[] stringToGsm7BitPacked(String data,int startingSeptetOffset,boolean throwException,int languageTable,int languageShiftTable) throws EncodeException {  int dataLen=data.length();  int septetCount=countGsmSeptetsUsingTables(data,!throwException,languageTable,languageShiftTable);  if (septetCount == -1) {    throw new EncodeException("countGsmSeptetsUsingTables(): unencodable char");  }  septetCount+=startingSeptetOffset;  if (septetCount > 255) {    throw new EncodeException("Payload cannot exceed 255 septets");  }  int byteCount=((septetCount * 7) + 7) / 8;  byte[] ret=new byte[byteCount + 1];  SparseIntArray charToLanguageTable=sCharsToGsmTables[languageTable];  SparseIntArray charToShiftTable=sCharsToShiftTables[languageShiftTable];  for (int i=0, septets=startingSeptetOffset, bitOffset=startingSeptetOffset * 7; i < dataLen && septets < septetCount; i++, bitOffset+=7) {    char c=data.charAt(i);    int v=charToLanguageTable.get(c,-1);    if (v == -1) {      v=charToShiftTable.get(c,-1);      if (v == -1) {        if (throwException) {          throw new EncodeException("stringToGsm7BitPacked(): unencodable char");        } else {          v=charToLanguageTable.get(' ',' ');        }      } else {        packSmsChar(ret,bitOffset,GSM_EXTENDED_ESCAPE);        bitOffset+=7;        septets++;      }    }    packSmsChar(ret,bitOffset,v);    septets++;  }  ret[0]=(byte)(septetCount);  return ret;}  }
class C{  void scheduleMessageReceived(NextFilter nextFilter,Object message){  messageReceivedEventQueue.add(new IoFilterEvent(nextFilter,IoEventType.MESSAGE_RECEIVED,session,message));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.652 -0500",hash_original_method="4B916DD49AA1C881C6B40C3BB12114A0",hash_generated_method="E99DE92F5D686004F214CC5A1E5D831F") public boolean remove(Object o){  return al.remove(o);}  }
class C{  private float readFloat() throws IOException {  return in.readFloat();}  }
class C{  public SigningStream(final OutputStream stream,final PGPPrivateKey privateKey,final int digestAlgorithm,final boolean inline,final String version){  this.stream=stream;  this.privateKey=privateKey;  this.digestAlgorithm=digestAlgorithm;  this.inline=inline;  this.version=version;}  }
class C{  public static String vendorToString(int vendorEnum){  return vendors[vendorEnum - NOT_ENOUGH_DIGITS];}  }
class C{  public static <T>List<T> list(T... objects){  return new ArrayList<>(Arrays.asList(objects));}  }
class C{  @NotNull public static SqlQuery namedQuery(@NotNull @SQL String sql,@NotNull Map<String,?> valueMap){  return namedQuery(sql,VariableResolver.forMap(valueMap));}  }
class C{  public void addChatMessage(String line){  setIdleTime(0,false);  if (!isUp()) {    slideUp();  }  int stringWidth=fm.stringWidth(line);  int lineWidth=width - 5 - 20;  chatScroll=0;  if (stringWidth <= lineWidth) {    messages.addElement(line);    computeScrollBarHeight();    bv.refreshDisplayables();    return;  }  Enumeration<String> words=StringUtil.splitString(line," ").elements();  String nextLine="";  while (words.hasMoreElements()) {    String nextWord=words.nextElement();    if (fm.stringWidth(nextLine + " " + nextWord) < lineWidth) {      nextLine=(nextLine.equals("")) ? nextWord : nextLine + " " + nextWord;    } else {      messages.addElement(nextLine);      nextLine=nextWord;    }  }  messages.addElement(nextLine);  computeScrollBarHeight();  bv.refreshDisplayables();}  }
class C{  protected String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public static void drawBounds(Canvas canvas,Paint paint,float size,Rect rect){  drawBounds(canvas,paint,size,rect.left,rect.top,rect.right,rect.bottom);}  }
class C{  public CertificateIssuer(byte[] encoding){  super(encoding);}  }
class C{  public FluxMapFuseable(Publisher<? extends T> source,Function<? super T,? extends R> mapper){  super(source);  this.mapper=Objects.requireNonNull(mapper,"mapper");}  }
class C{  public Vector3f mulDirection(Matrix4x3fc mat){  return mulDirection(mat,this);}  }
class C{  private static boolean isAssignableFrom(Type from,GenericArrayType to){  Type toGenericComponentType=to.getGenericComponentType();  if (toGenericComponentType instanceof ParameterizedType) {    Type t=from;    if (from instanceof GenericArrayType) {      t=((GenericArrayType)from).getGenericComponentType();    } else     if (from instanceof Class<?>) {      Class<?> classType=(Class<?>)from;      while (classType.isArray()) {        classType=classType.getComponentType();      }      t=classType;    }    return isAssignableFrom(t,(ParameterizedType)toGenericComponentType,new HashMap<String,Type>());  }  return true;}  }
class C{  public boolean hasAttributeNS(String name,String x){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return false;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  @Override public long insertOrUpdate(String key,String value){  checkKey(key);  checkValue(value);  if (keyExists(key))   return doUpdate(key,value);  return doInsert(key,value);}  }
class C{  public String report(){  StringBuffer report=new StringBuffer();  intHashTable=new int[table.tableSize];  calculateSlotUsage();  int max=maxCollisions();  int[] slotUsageCount=new int[max + 1];  for (  int i : intHashTable) {    slotUsageCount[i]++;  }  report.append("Total number of entries: " + numEntries + "\n");  report.append("   Load factor:" + (numEntries / (1.0f * table.tableSize) + "\n\n"));  float weightedAvg=0.0f;  int numNonEmpty=0;  report.append("Number of hits\tNumber of slots\n");  for (int j=0; j <= max; j++) {    if (slotUsageCount[j] != 0) {      report.append(j + "\t" + slotUsageCount[j]+ "\n");      if (j != 0) {        weightedAvg+=slotUsageCount[j] * j;        numNonEmpty+=slotUsageCount[j];      }    }  }  weightedAvg/=numNonEmpty;  report.append("\n  Slot statistics: min=" + minCollisions() + ", max="+ max+ ", weightedAvg:"+ weightedAvg);  return report.toString();}  }
class C{  public void finish() throws Exception {}  }
class C{  public boolean containsEdge(Edge edge){  return sessionEdges.contains(edge);}  }
class C{  State lastChild(int label){  final int index=labels.length - 1;  State s=null;  if (index >= 0 && labels[index] == label) {    s=states[index];  }  assert s == getState(label);  return s;}  }
class C{  public void clearIndex(String index){  final Set<Object> coreCacheKeys=shardKeyMap.getCoreKeysForIndex(index);  for (  Object coreKey : coreCacheKeys) {    cache.clearCoreCacheKey(coreKey);  }  if (cache.getCacheSize() == 0) {    cache.clear();  }}  }
class C{  public Builder addPhoneNumber(PhoneNumber phoneNumber){  if (phoneNumber != null) {    this.phoneNumbers.add(new PhoneNumber.Builder(phoneNumber).build());  }  return this;}  }
class C{  public BayesIm iterate(){  double start=System.currentTimeMillis();  BdeMetricCache bdeMetricCache=new BdeMetricCache(dataSet,bayesPmM0);  BayesPm bayesPmMnplus1=bayesPmM0;  BayesPm bayesPmMn;  double oldBestScore=Double.NEGATIVE_INFINITY;  int iteration=0;  TimedIterate ti=new TimedIterate(bdeMetricCache,bayesPmMnplus1,oldBestScore,iteration,start);  Thread tithread=new Thread(ti);  tithread.start();  try {    tithread.join();  } catch (  InterruptedException e) {    e.printStackTrace();  }  bayesPmMnplus1=ti.bayesPmMnplus1;  bayesPmMn=bayesPmMnplus1;  EmBayesEstimator emBayesEst=new EmBayesEstimator(bayesPmMn,dataSet);  return emBayesEst.maximization(tolerance);}  }
class C{  public void addSoundEvent(PullToRefreshBase.State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public static float wrap(float value){  if (value >= 0.f) {    return value - (int)value;  }  float wrappedValue=value - (float)Math.floor(value);  if (wrappedValue >= 1.f) {    wrappedValue-=1.f;  }  return wrappedValue;}  }
class C{  public boolean decodeTextString(int startIndex){  int index=startIndex;  while (mWspData[index] != 0) {    index++;  }  mDataLength=index - startIndex + 1;  if (mWspData[startIndex] == 127) {    mStringValue=new String(mWspData,startIndex + 1,mDataLength - 2);  } else {    mStringValue=new String(mWspData,startIndex,mDataLength - 1);  }  return true;}  }
class C{  public MutableDouble(final double value){  super();  this.value=value;}  }
class C{  public static HistoryEvent createMerged(long timestamp,Recordable recordable,String referrer,long mergedId){  return new RecordableHistoryEvent(MERGED_TYPE,timestamp,recordable,referrer,String.format("merged [%d]",mergedId),ImmutableMap.of(PARAM_MERGED_ID,Long.toString(mergedId)));}  }
class C{  @Override public boolean equals(Object other){  if (!(other instanceof Sha256Hash))   return false;  return Arrays.equals(bytes,((Sha256Hash)other).bytes);}  }
class C{  protected HttpHost determineProxy(HttpHost target,HttpRequest request,HttpContext context) throws HttpException {  ProxySelector psel=this.proxySelector;  if (psel == null)   psel=ProxySelector.getDefault();  if (psel == null)   return null;  URI targetURI=null;  try {    targetURI=new URI(target.toURI());  } catch (  URISyntaxException usx) {    throw new HttpException("Cannot convert host to URI: " + target,usx);  }  List<Proxy> proxies=psel.select(targetURI);  Proxy p=chooseProxy(proxies,target,request,context);  HttpHost result=null;  if (p.type() == Proxy.Type.HTTP) {    if (!(p.address() instanceof InetSocketAddress)) {      throw new HttpException("Unable to handle non-Inet proxy address: " + p.address());    }    final InetSocketAddress isa=(InetSocketAddress)p.address();    result=new HttpHost(getHost(isa),isa.getPort());  }  return result;}  }
class C{  public boolean isReflective(){  for (  Mounted equip : getMisc()) {    if (equip.getType().hasFlag(MiscType.F_REFLECTIVE)) {      return true;    }  }  return false;}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  ElemVariable v=(ElemVariable)handler.getElemTemplateElement();  handler.getStylesheet().appendChild(v);  handler.getStylesheet().setVariable(v);  super.endElement(handler,uri,localName,rawName);}  }
class C{  public void deActivateLogix(){  if (_isActivated) {    _isActivated=false;    for (int i=_listeners.size() - 1; i >= 0; i--) {      removeListener(_listeners.get(i));    }  }}  }
class C{  private void assembleClassPackageHierarchy(){  Collection<AsClass> classes=classTable.values();  Iterator<AsClass> classIterator=classes.iterator();  while (classIterator.hasNext()) {    AsClass asClass=classIterator.next();    if (asClass != null) {      int innerClassSize=asClass.getInnerClasses().size();      for (int ix=0; ix < innerClassSize; ix++) {        AsClass innerClass=asClass.getInnerClasses().get(ix);        Element apiName=outputObject.createElement("apiName");        apiName.setTextContent(asClass.getName() + "." + innerClass.getName());        innerClass.getNode().appendChild(apiName);        Element apiClassifier=asDocUtil.getElementByTagName(asClass.getNode(),"apiClassifier");        if (apiClassifier != null) {          apiClassifier.appendChild(innerClass.getNode());        }      }    }  }  HashMap<String,AsClass> packageContents=packageContentsTable.get(GLOBAL);  classes=packageContents.values();  classIterator=classes.iterator();  while (classIterator.hasNext()) {    AsClass asClass=classIterator.next();    asClass.getNode().setAttribute("id","globalClassifier:" + asClass.getNode().getAttribute("id"));  }  Element packages=outputObject.createElement("packages");  Set<String> keySet=packageContentsTable.keySet();  Iterator<String> keyIterator=keySet.iterator();  while (keyIterator.hasNext()) {    String key=keyIterator.next();    Element packageElement=packageTable.get(key);    if (packageElement == null) {      String packageName=key.replaceAll("\\$","_");      packageElement=outputObject.createElement("apiPackage");      packageElement.setAttribute("id",packageName);      Element apiName=outputObject.createElement("apiName");      apiName.setTextContent(packageName);      Element apiDetail=outputObject.createElement("apiDetail");      packageElement.appendChild(apiName);      packageElement.appendChild(apiDetail);    }    NodeList privateChilds=packageElement.getElementsByTagName("private");    if ((privateChilds != null && privateChilds.getLength() != 0) || asDocUtil.hidePackage(key,hiddenPackages)) {      continue;    }    if (!key.equals("")) {      packageContents=packageContentsTable.get(key);      classes=packageContents.values();      classIterator=classes.iterator();      while (classIterator.hasNext()) {        AsClass asClass=classIterator.next();        if (verbose) {          System.out.println("post-processing class " + asClass.getName() + " in package "+ key);        }        if (asClass.getName().charAt(0) == '$' && asClass.getName().charAt(1) == '$') {          NodeList childrenOfNode=asClass.getNode().getElementsByTagName("apiOperation");          if (childrenOfNode != null && childrenOfNode.getLength() != 0) {            for (int ix=0; ix < childrenOfNode.getLength(); ix++) {              Element apiOperation=(Element)childrenOfNode.item(ix);              apiOperation.setAttribute("id","globalOperation:" + apiOperation.getAttribute("id"));              packageElement.appendChild(apiOperation.cloneNode(true));            }          }          childrenOfNode=asClass.getNode().getElementsByTagName("apiValue");          if (childrenOfNode != null && childrenOfNode.getLength() != 0) {            for (int ix=0; ix < childrenOfNode.getLength(); ix++) {              Element apiValue=(Element)childrenOfNode.item(ix);              apiValue.setAttribute("id","globalValue:" + apiValue.getAttribute("id"));              packageElement.appendChild(apiValue.cloneNode(true));            }          }        } else         if (!asClass.isInnerClass()) {          Element apiAccess=asDocUtil.getElementByTagName(asClass.getNode(),"apiAccess");          if (apiAccess != null) {            if (!apiAccess.getAttribute("value").equals("private") || includePrivate) {              packageElement.appendChild(asClass.getNode());            }          }        }      }    }    NodeList apiClassifierList=packageElement.getElementsByTagName("apiClassifier");    NodeList apiValueList=packageElement.getElementsByTagName("apiValue");    NodeList apiOperationList=packageElement.getElementsByTagName("apiOperation");    if (apiClassifierList != null && apiClassifierList.getLength() != 0) {      packages.appendChild(packageElement);    } else     if (apiValueList != null && apiValueList.getLength() != 0) {      packages.appendChild(packageElement);    } else     if (apiOperationList != null && apiOperationList.getLength() != 0) {      packages.appendChild(packageElement);    }  }  root.appendChild(packages);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:07.533 -0500",hash_original_method="62214805062DB6ECE1A1C9B69D272F36",hash_generated_method="26A00544EB52F6F007616F3D38D09FA5") public void release(FileLock lock) throws IOException {  checkOpen();  StructFlock flock=new StructFlock();  flock.l_type=(short)F_UNLCK;  flock.l_whence=(short)SEEK_SET;  flock.l_start=lock.position();  flock.l_len=translateLockLength(lock.size());  try {    Libcore.os.fcntlFlock(fd,F_SETLKW64,flock);  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsIOException();  }  removeLock(lock);}  }
class C{  public String lossFunctionTipText(){  return "The loss function to use. Hinge loss (SVM), " + "log loss (logistic regression) or " + "squared loss (regression).";}  }
class C{  private boolean isLeftCompleted(long target){  long size=completed ? thisNodeSize : completedSize(target);  if (size >= target)   return true;  for (SliceTask<P_IN,P_OUT> parent=getParent(), node=this; parent != null; node=parent, parent=parent.getParent()) {    if (node == parent.rightChild) {      SliceTask<P_IN,P_OUT> left=parent.leftChild;      if (left != null) {        size+=left.completedSize(target);        if (size >= target)         return true;      }    }  }  return size >= target;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T result(Object result) throws Exception {  if (result instanceof Throwable) {    throw (Exception)result;  } else {    return (T)result;  }}  }
class C{  @Override public Object createTest() throws Exception {  Object object;  if (fieldsAreAnnotated()) {    object=createTestUsingFieldInjection();  } else {    object=createTestUsingConstructorInjection();  }  IInjectorProvider injectorProvider=getOrCreateInjectorProvider();  if (injectorProvider != null) {    Injector injector=injectorProvider.getInjector();    if (injector != null)     injector.injectMembers(object);  }  return object;}  }
class C{  private void toggleEditMode(boolean on,boolean save){  mIntent.putExtra("edit",on);  mIntent.putExtra("save",save);  mActivity.sendBroadcast(mIntent);  if (mEditMenu != null) {    mEditMenu.setTitle(on ? R.string.navigation_bar_menu_editable : R.string.navigation_bar_menu_locked).setIcon(on ? R.drawable.stat_navbar_edit_on : R.drawable.stat_navbar_edit_off);  }  if (on) {    Utils.lockCurrentOrientation(mActivity);  } else {    mActivity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);  }}  }
class C{  @EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onPlayerMove(PlayerMoveEvent event){  Match match=Cardinal.getMatch(event.getPlayer());  if (match == null || !match.hasPlayer(event.getPlayer())) {    return;  }  Vector from=event.getFrom().toVector();  Vector to=event.getTo().toVector();  for (  AppliedRegion reg : get(match,ApplyType.ENTER,ApplyType.LEAVE)) {    boolean containsFrom=reg.contains(from);    if (containsFrom ^ reg.contains(to) && reg.isType(ApplyType.ENTER) != containsFrom && apply(reg,null,event.getPlayer(),event,event,event.getPlayer())) {      break;    }  }  if (event.isCancelled()) {    return;  }  for (  AppliedRegion reg : get(match,ApplyType.KIT,ApplyType.KIT_LEND,ApplyType.VELOCITY)) {    boolean containsFrom=reg.contains(from);    if (containsFrom ^ reg.contains(to)) {      if (containsFrom) {        reg.remove(event.getPlayer());      } else {        reg.applyEffects(event.getPlayer(),event,event.getPlayer());      }    }  }}  }
class C{  private final void swap(int i,int j){  byte tmp=_data[i];  _data[i]=_data[j];  _data[j]=tmp;}  }
class C{  public SearchPredicate(String group,boolean includeAllByDefault){  super(group);  m_incEmpty=new BooleanLiteral(includeAllByDefault);  paramCount=2;}  }
class C{  public AddressExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.201 -0500",hash_original_method="3B1EBFADD13882DEC7CB8A7DB9BB782B",hash_generated_method="83AE03E01797E3C3432BDFB8207BCAEF") public Region(int left,int top,int right,int bottom){  addTaintLocal(left + right + bottom+ top);}  }
class C{  public MalformedLinkException(String explanation){  super(explanation);}  }
class C{  @Override public List<String> alarmTriggers(){  return ALARM_TRIGGERS;}  }
class C{  @Override public void disconnectionNotification(String eventName,Object source){  if (source == m_listenee) {    m_listenee=null;  }}  }
class C{  public void manageGraphics(){  if (receiver != null) {    if (DEBUG) {      Debug.output("NetMapConnector.update: Updating graphics.");    }    receiver.setList(getOMList());  } else {    if (DEBUG) {      Debug.output("NetMapConnector.update: no receiver to notify.");    }  }}  }
class C{  public JMenuItem(String text,Icon icon){  setModel(new DefaultButtonModel());  init(text,icon);  initFocusability();}  }
class C{  public static boolean locationsCrossAntimeridian(List<? extends Location> locations){  if (locations == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Location","locationsCrossAntimeridian","missingList"));  }  int len=locations.size();  if (len < 2) {    return false;  }  double lon1=normalizeLongitude(locations.get(0).longitude);  double sig1=Math.signum(lon1);  for (int idx=1; idx < len; idx++) {    double lon2=normalizeLongitude(locations.get(idx).longitude);    double sig2=Math.signum(lon2);    if (sig1 != sig2) {      double delta=Math.abs(lon1 - lon2);      if (delta > 180 && delta < 360) {        return true;      }    }    lon1=lon2;    sig1=sig2;  }  return false;}  }
class C{  @Util public static void flashException(Throwable throwable){  handleExpiredToken(throwable);  String message=getUserMessage(throwable);  Logger.error(throwable,message);  if (request.isAjax()) {    error(503,message);  }  flash.error(MessagesUtils.escape(message));}  }
class C{  public void testBug71672Statement(int testStep,Connection testConn,String query,int expectedUpdateCount,int[] expectedKeys) throws SQLException {  Statement testStmt=testConn.createStatement();  if (expectedUpdateCount < 0) {    assertFalse(testStep + ". Stmt.execute() result",testStmt.execute(query,Statement.RETURN_GENERATED_KEYS));  } else {    assertEquals(testStep + ". Stmt.executeUpdate() result",expectedUpdateCount,testStmt.executeUpdate(query,Statement.RETURN_GENERATED_KEYS));  }  ResultSet testRS=testStmt.getGeneratedKeys();  for (  int k : expectedKeys) {    assertTrue(testStep + ". Row expected in generated keys ResultSet",testRS.next());    assertEquals(testStep + ". Wrong generated key",k,testRS.getInt(1));  }  assertFalse(testStep + ". No more rows expected in generated keys ResultSet",testRS.next());  testRS.close();  testStmt.close();}  }
class C{  public static String parseWithImageTags(String htmlText,@Nullable String originUrl,List<String> outImageUrls){  ExtractImageGetter imageGetter=new ExtractImageGetter(originUrl,outImageUrls);  String strippedText=Html.fromHtml(htmlText,imageGetter,null).toString();  return strippedText.trim();}  }
class C{  @SuppressWarnings("unchecked") public static <T>int binarySearch(List<? extends java.lang.Comparable<? super T>> list,T object){  if (list == null) {    throw new NullPointerException();  }  if (list.isEmpty()) {    return -1;  }  if (!(list instanceof RandomAccess)) {    ListIterator<? extends java.lang.Comparable<? super T>> it=list.listIterator();    while (it.hasNext()) {      int result;      if ((result=-it.next().compareTo(object)) <= 0) {        if (result == 0) {          return it.previousIndex();        }        return -it.previousIndex() - 1;      }    }    return -list.size() - 1;  }  int low=0, mid=list.size(), high=mid - 1, result=-1;  while (low <= high) {    mid=(low + high) >> 1;    if ((result=-list.get(mid).compareTo(object)) > 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  return -mid - (result < 0 ? 1 : 2);}  }
class C{  public int addBlock(int beginPos,int endPos){  if (endPos < 0 || endPos > this.buffer.capacity()) {    String message=Logging.getMessage("generic.indexOutOfRange",endPos);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (beginPos < 0 || beginPos > endPos) {    String message=Logging.getMessage("generic.indexOutOfRange",beginPos);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return this.addSubBuffer(beginPos,endPos - beginPos + 1);}  }
class C{  private void cleanup(Path configPath,Path outputPath) throws IOException {  loggingHelper.shutdownLogging();  if (Files.exists(configPath)) {    Files.delete(configPath);  }  if (Files.exists(outputPath)) {    Files.delete(outputPath);  }}  }
class C{  public void moveTo(int x,int y){  invalidateSelf();  pos.x=x;  pos.y=y;  recalculateBounds();  invalidateSelf();}  }
class C{  @Nullable String findLongestNamePrefix(Node name,Set<String> namespaces){  if (namespaces.contains(name.getQualifiedName())) {    return name.getQualifiedName();  } else   if (name.isGetProp()) {    return findLongestNamePrefix(name.getFirstChild(),namespaces);  }  return null;}  }
class C{  public void configureManagers(){  powerManager=new jmri.jmrix.ecos.EcosPowerManager(getTrafficController());  jmri.InstanceManager.store(powerManager,jmri.PowerManager.class);  turnoutManager=new jmri.jmrix.ecos.EcosTurnoutManager(this);  jmri.InstanceManager.setTurnoutManager(turnoutManager);  locoManager=new jmri.jmrix.ecos.EcosLocoAddressManager(this);  throttleManager=new jmri.jmrix.ecos.EcosDccThrottleManager(this);  jmri.InstanceManager.setThrottleManager(throttleManager);  sensorManager=new jmri.jmrix.ecos.EcosSensorManager(this);  jmri.InstanceManager.setSensorManager(sensorManager);  reporterManager=new jmri.jmrix.ecos.EcosReporterManager(this);  jmri.InstanceManager.setReporterManager(reporterManager);  jmri.InstanceManager.setProgrammerManager(getProgrammerManager());}  }
class C{  public DestinationWrapper<Queue> lookupQueue(String uri,QueueSession session) throws JMSException, NamingException {  if (usingJNDI) {    return lookupQueueFromJNDI(uri);  } else {    return new DestinationWrapper<Queue>(uri,session.createQueue(uri));  }}  }
class C{  public void reset() throws SecurityException {  checkPermission();synchronized (this) {    props=new Properties();    initializedGlobalHandlers=true;  }  for (  LoggerContext cx : contexts()) {    Enumeration<String> enum_=cx.getLoggerNames();    while (enum_.hasMoreElements()) {      String name=enum_.nextElement();      Logger logger=cx.findLogger(name);      if (logger != null) {        resetLogger(logger);      }    }  }}  }
class C{  public boolean waitForCompletion(){  return waitForCompletion;}  }
class C{  synchronized void add(SigningRequest request){  requests.add(request);}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, FormatException, ChecksumException {  return decode(image,null);}  }
class C{  public void startExpiring(){  stateLock.writeLock().lock();  try {    if (!running) {      running=true;      expirerThread.start();    }  }  finally {    stateLock.writeLock().unlock();  }}  }
class C{  public void performMerge(File targetFile) throws IOException, JDOMException {  WarArchive output=(WarArchive)performMerge();  output.store(targetFile);}  }
class C{  public JMessageSizeEstimator(int unknownSize){  if (unknownSize < 0) {    throw new IllegalArgumentException("unknownSize: " + unknownSize + " (expected: >= 0)");  }  handle=new HandleImpl(unknownSize);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.384 -0500",hash_original_method="2988A35ECCAC86323C503A15399549F2",hash_generated_method="ECBB610784E4A3BFAFD4A3D2BCFF736C") private final void completeConstruction(){  if (mDbg)   Log.d(TAG,"completeConstruction: E");  int maxDepth=0;  for (  StateInfo si : mStateInfo.values()) {    int depth=0;    for (StateInfo i=si; i != null; depth++) {      i=i.parentStateInfo;    }    if (maxDepth < depth) {      maxDepth=depth;    }  }  if (mDbg)   Log.d(TAG,"completeConstruction: maxDepth=" + maxDepth);  mStateStack=new StateInfo[maxDepth];  mTempStateStack=new StateInfo[maxDepth];  setupInitialStateStack();  mIsConstructionCompleted=true;  mMsg=obtainMessage(SM_INIT_CMD);  invokeEnterMethods(0);  performTransitions();  if (mDbg)   Log.d(TAG,"completeConstruction: X");}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childSubstring;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      childSubstring=child.substringData(10,-3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public JmxServerProbe(String host) throws IOException {  this.host=host;  this.port=defaultPort;  connect();}  }
class C{  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {  SCHEMES.get(iprot.getScheme()).getScheme().read(iprot,this);}  }
class C{  public void seek(long pos){  position=Math.min(pos,document.getLength());}  }
class C{  private ValueGraphVertex findOrCreateVertex(ConditionOperand op){  Object name=op.value;  ValueGraphVertex v=getVertex(name);  if (v == null) {    v=new ValueGraphVertex(op);    v.setLabel(op,0);    graph.addGraphNode(v);    nameMap.put(name,v);  }  return v;}  }
class C{  private static String calculateDigest(final InputStream input,final int size) throws Exception {  int remaining=size;  final MessageDigest md=MessageDigest.getInstance("SHA-256");  final byte[] buffer=new byte[16 * 1024];  while (remaining > 0) {    final int bytesRead=input.read(buffer,0,Math.min(buffer.length,remaining));    if (bytesRead <= 0)     throw new RuntimeException("Not enough data, still need " + remaining + " bytes!");    remaining-=bytesRead;    md.update(buffer,0,bytesRead);  }  final StringBuilder sb=new StringBuilder(64);  for (  final byte b : md.digest())   sb.append(String.format("%02x",b & 0xff));  return sb.toString();}  }
class C{  public static boolean verifyPurchase(String productId,String base64PublicKey,String signedData,String signature){  if (TextUtils.isEmpty(signedData) || TextUtils.isEmpty(base64PublicKey) || TextUtils.isEmpty(signature)) {    if (BuildConfig.DEBUG) {      if (productId.equals("android.test.purchased")) {        return true;      }    }    Log.e(TAG,"Purchase verification failed: missing data.");    return false;  }  PublicKey key=Security.generatePublicKey(base64PublicKey);  return Security.verify(key,signedData,signature);}  }
class C{  public static byte[] convertHexToBytes(String s){  int len=s.length();  if (len % 2 != 0) {    throw DbException.get(ErrorCode.HEX_STRING_ODD_1,s);  }  len/=2;  byte[] buff=new byte[len];  int mask=0;  int[] hex=HEX_DECODE;  try {    for (int i=0; i < len; i++) {      int d=hex[s.charAt(i + i)] << 4 | hex[s.charAt(i + i + 1)];      mask|=d;      buff[i]=(byte)d;    }  } catch (  ArrayIndexOutOfBoundsException e) {    throw DbException.get(ErrorCode.HEX_STRING_WRONG_1,s);  }  if ((mask & ~255) != 0) {    throw DbException.get(ErrorCode.HEX_STRING_WRONG_1,s);  }  return buff;}  }
class C{  public static String last(String list,char delimiter){  int len=list.length();  if (len == 0)   return "";  int index=0;  while (true) {    index=list.lastIndexOf(delimiter);    if (index == -1) {      return list;    } else     if (index + 1 == len) {      list=list.substring(0,len - 1);      len--;    } else {      return list.substring(index + 1);    }  }}  }
class C{  public void iinc(final int local,final int amount){  mv.visitIincInsn(local,amount);}  }
class C{  private boolean isOutsideDocElem(){  return (null == m_docFrag) && m_elemStack.size() == 0 && (null == m_currentNode || m_currentNode.getNodeType() == Node.DOCUMENT_NODE);}  }
class C{  public JBBPIntegerValueEvaluator make(final String expression,final List<JBBPNamedFieldInfo> namedFields,final byte[] compiledScript){  final JBBPIntegerValueEvaluator result;  if (JBBPExpressionEvaluator.hasExpressionOperators(expression)) {    result=new JBBPExpressionEvaluator(expression,namedFields,compiledScript);  } else {    final String externalFieldName;    int index=-1;    if (expression.startsWith("$")) {      result=new JBBPOnlyFieldEvaluator(expression.substring(1),index);    } else {      externalFieldName=null;      for (int i=namedFields.size() - 1; i >= 0; i--) {        final JBBPNamedFieldInfo field=namedFields.get(i);        if (expression.equals(field.getFieldPath())) {          index=i;          break;        }      }      if (index < 0) {        result=new JBBPExpressionEvaluator(expression,namedFields,compiledScript);      } else {        JBBPCompilerUtils.assertFieldIsNotArrayOrInArray(namedFields.get(index),namedFields,compiledScript);        result=new JBBPOnlyFieldEvaluator(externalFieldName,index);      }    }  }  return result;}  }
class C{  public void testNegPosSameLength(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=1;  byte rBytes[]={0,-2,125,-60,-104,1,10,6,2,32,56,2,4,4,21};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public ResolveCallsAction(final JFrame parent,final ICallResolverTarget module){  super("Resolve Calls");  this.parent=parent;  this.module=module;}  }
class C{  @Override public boolean wasNull(){  return wasNull;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public MockTransaction(){  this(Utils.generateRandomAccount());}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  void addTargetsToStorageView(String viewName,List<PortInfo> targetPortInfo) throws VPlexApiException {  List<VPlexTargetInfo> targetInfoList=new ArrayList<VPlexTargetInfo>();  VPlexClusterInfo clusterInfo=findTargets(targetPortInfo,targetInfoList,true);  if (targetInfoList.size() != targetPortInfo.size()) {    throw VPlexApiException.exceptions.failedToFindAllRequestedTargets();  }  s_logger.info("Found targets ports for storage view");  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  VPlexStorageViewInfo storageViewInfo=discoveryMgr.findStorageViewOnCluster(viewName,clusterInfo.getName(),false);  if (storageViewInfo == null) {    throw VPlexApiException.exceptions.couldNotFindStorageView(viewName);  }  modifyStorageViewTargets(storageViewInfo,targetInfoList,false);}  }
class C{  protected void fireSettingsHandlerEvent(EventType type,SettingsGroup group){  fireSettingsHandlerEvent(new SettingsGroupManagerEvent(type,this,group));}  }
class C{  public boolean forceReleasePrepareStatement(int statementId) throws QueryException {  if (lock.tryLock()) {    try {      checkClose();      try {        writer.closePrepare(statementId);        return true;      } catch (      IOException e) {        throw new QueryException("Could not deallocate query: " + e.getMessage(),-1,CONNECTION_EXCEPTION.getSqlState(),e);      }    }  finally {      lock.unlock();    }  } else {    statementIdToRelease=statementId;  }  return false;}  }
class C{  @Override public Object instantiateController(Class<? extends Object> cls,Operation operation) throws IllegalAccessException, InstantiationException {  return cls.newInstance();}  }
class C{  protected boolean shouldRemoveStopFilter(ExtendedDismaxConfiguration config,Query query){  return config.stopwords && isEmpty(query);}  }
class C{  public NbtTagIntArray(String name,int[] value){  super(name);  Validate.notNull(value,"array can't be null.");  this.value=value;}  }
class C{  public static void shuffle(ArrayList<Integer> list){  java.util.Collections.shuffle(list);}  }
class C{  @Override public Void visitCompoundAssignment(CompoundAssignmentTree node,Void p){  if (!isString(node)) {    checkForNullability(node.getVariable(),UNBOXING_OF_NULLABLE);    checkForNullability(node.getExpression(),UNBOXING_OF_NULLABLE);  }  return super.visitCompoundAssignment(node,p);}  }
class C{  static private void initConvertMap(){  s_pg.put("\\bNUMBER\\b","NUMERIC");  s_pg.put("\\bDATE\\b","TIMESTAMP");  s_pg.put("\\bVARCHAR2\\b","VARCHAR");  s_pg.put("\\bNVARCHAR2\\b","VARCHAR");  s_pg.put("\\bNCHAR\\b","CHAR");  s_pg.put("\\bBLOB\\b","BYTEA");  s_pg.put("\\bCLOB\\b","TEXT");  s_pg.put("\\bLIMIT\\b","\"limit\"");  s_pg.put("\\bACTION\\b","\"action\"");  s_pg.put("\\bold\\b","\"old\"");  s_pg.put("\\bnew\\b","\"new\"");  s_pg.put("\\bCACHE\\b","");  s_pg.put("\\bUSING INDEX\\b","");  s_pg.put("\\bTABLESPACE\\s\\w+\\b","");  s_pg.put("\\bSTORAGE\\([\\w\\s]+\\)","");  s_pg.put("\\bBITMAP INDEX\\b","INDEX");  s_pg.put("\\bSYSDATE\\b","CURRENT_TIMESTAMP");  s_pg.put("\\bDUMP\\b","MD5");  s_pg.put("END CASE","END");  s_pg.put("\\bgetDate\\b\\(\\)","CURRENT_TIMESTAMP");  s_pg.put("\\bNVL\\b","COALESCE");  s_pg.put("\\bTO_DATE\\b","TO_TIMESTAMP");  s_pg.put("\\bDBMS_OUTPUT.PUT_LINE\\b","RAISE NOTICE");  s_pg.put("\\bTO_NCHAR\\b","");  s_pg.put("\\bGLOBAL TEMPORARY\\b","TEMPORARY");  s_pg.put("\\bON COMMIT DELETE ROWS\\b","");  s_pg.put("\\bON COMMIT PRESERVE ROWS\\b","");  s_pg.put("\\bCASCADE CONSTRAINTS\\b","");  s_pg.put("\\sFROM\\s+DUAL\\b","");  s_pg.put("\\bELSIF\\b","ELSE IF");  s_pg.put("\\bREC \\b","AS REC ");  s_pg.put("\\bSTART WITH\\b","START");  s_pg.put("\\bINCREMENT BY\\b","INCREMENT");}  }
class C{  public void layoutContainer(Container parent){  arrangeGrid(parent);}  }
class C{  public static String[] split(String str,char separator){  return split(str,separator,false);}  }
class C{  public static void startTag(){  Log.write("<");}  }
class C{  @Override protected void draw(Canvas canvas,MapView mapView,boolean shadow){  if (shadow)   return;  if (mIcon == null)   return;  if (mPosition == null)   return;  final Projection pj=mapView.getProjection();  pj.toPixels(mPosition,mPositionPixels);  int width=mIcon.getIntrinsicWidth();  int height=mIcon.getIntrinsicHeight();  Rect rect=new Rect(0,0,width,height);  rect.offset(-(int)(mAnchorU * width),-(int)(mAnchorV * height));  mIcon.setBounds(rect);  mIcon.setAlpha((int)(mAlpha * 255));  float rotationOnScreen=(mFlat ? -mBearing : mapView.getMapOrientation() - mBearing);  drawAt(canvas,mIcon,mPositionPixels.x,mPositionPixels.y,false,rotationOnScreen);}  }
class C{  private String queryMap(Locale locale,Map<String,String> map){  if (locale == null) {    return map.get(DEFAULT_KEY);  } else {    String key=locale.toString();    String description=map.get(key);    if (description == null) {      return map.get(DEFAULT_KEY);    }  }  return null;}  }
class C{  @Override public Message reply(boolean replyToAll) throws MessagingException {  return getWrappedMessage().reply(replyToAll);}  }
class C{  StandardTextSource(char[] chars,int start,int len,int cstart,int clen,int level,int flags,Font font,FontRenderContext frc,CoreMetrics cm){  if (chars == null) {    throw new IllegalArgumentException("bad chars: null");  }  if (cstart < 0) {    throw new IllegalArgumentException("bad cstart: " + cstart);  }  if (start < cstart) {    throw new IllegalArgumentException("bad start: " + start + " for cstart: "+ cstart);  }  if (clen < 0) {    throw new IllegalArgumentException("bad clen: " + clen);  }  if (cstart + clen > chars.length) {    throw new IllegalArgumentException("bad clen: " + clen + " cstart: "+ cstart+ " for array len: "+ chars.length);  }  if (len < 0) {    throw new IllegalArgumentException("bad len: " + len);  }  if ((start + len) > (cstart + clen)) {    throw new IllegalArgumentException("bad len: " + len + " start: "+ start+ " for cstart: "+ cstart+ " clen: "+ clen);  }  if (font == null) {    throw new IllegalArgumentException("bad font: null");  }  if (frc == null) {    throw new IllegalArgumentException("bad frc: null");  }  this.chars=chars;  this.start=start;  this.len=len;  this.cstart=cstart;  this.clen=clen;  this.level=level;  this.flags=flags;  this.font=font;  this.frc=frc;  if (cm != null) {    this.cm=cm;  } else {    LineMetrics metrics=font.getLineMetrics(chars,cstart,clen,frc);    this.cm=((FontLineMetrics)metrics).cm;  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:48.488 -0400",hash_original_method="D10CE17DC95AE21D783C9B3DBD60C86E",hash_generated_method="D06AD8CA4EA9EB4EE4F0785C8756E630") public void show(){  int height=buildDropDown();  int widthSpec=0;  int heightSpec=0;  boolean noInputMethod=isInputMethodNotNeeded();  if (mPopup.isShowing()) {    if (mDropDownWidth == ViewGroup.LayoutParams.FILL_PARENT) {      widthSpec=-1;    } else     if (mDropDownWidth == ViewGroup.LayoutParams.WRAP_CONTENT) {      widthSpec=getAnchorView().getWidth();    } else {      widthSpec=mDropDownWidth;    }    if (mDropDownHeight == ViewGroup.LayoutParams.FILL_PARENT) {      heightSpec=noInputMethod ? height : ViewGroup.LayoutParams.FILL_PARENT;      if (noInputMethod) {        mPopup.setWindowLayoutMode(mDropDownWidth == ViewGroup.LayoutParams.FILL_PARENT ? ViewGroup.LayoutParams.FILL_PARENT : 0,0);      } else {        mPopup.setWindowLayoutMode(mDropDownWidth == ViewGroup.LayoutParams.FILL_PARENT ? ViewGroup.LayoutParams.FILL_PARENT : 0,ViewGroup.LayoutParams.FILL_PARENT);      }    } else     if (mDropDownHeight == ViewGroup.LayoutParams.WRAP_CONTENT) {      heightSpec=height;    } else {      heightSpec=mDropDownHeight;    }    mPopup.setOutsideTouchable(!mForceIgnoreOutsideTouch && !mDropDownAlwaysVisible);    mPopup.update(getAnchorView(),mDropDownHorizontalOffset,mDropDownVerticalOffset,widthSpec,heightSpec);  } else {    if (mDropDownWidth == ViewGroup.LayoutParams.FILL_PARENT) {      widthSpec=ViewGroup.LayoutParams.FILL_PARENT;    } else {      if (mDropDownWidth == ViewGroup.LayoutParams.WRAP_CONTENT) {        mPopup.setWidth(getAnchorView().getWidth());      } else {        mPopup.setWidth(mDropDownWidth);      }    }    if (mDropDownHeight == ViewGroup.LayoutParams.FILL_PARENT) {      heightSpec=ViewGroup.LayoutParams.FILL_PARENT;    } else {      if (mDropDownHeight == ViewGroup.LayoutParams.WRAP_CONTENT) {        mPopup.setHeight(height);      } else {        mPopup.setHeight(mDropDownHeight);      }    }    mPopup.setWindowLayoutMode(widthSpec,heightSpec);    mPopup.setOutsideTouchable(!mForceIgnoreOutsideTouch && !mDropDownAlwaysVisible);    mPopup.setTouchInterceptor(mTouchInterceptor);    mPopup.showAsDropDown(getAnchorView(),mDropDownHorizontalOffset,mDropDownVerticalOffset);    mDropDownList.setSelection(ListView.INVALID_POSITION);    if (!mModal || mDropDownList.isInTouchMode()) {      clearListSelection();    }    if (!mModal) {      mHandler.post(mHideSelector);    }  }}  }
class C{  private void prepareTaxInfoForHistoryProperty(final PropertyAckNoticeInfo infoBean,BigDecimal totalTax,BigDecimal propertyTax,Ptdemand currDemand){  for (  final EgDemandDetails demandDetail : currDemand.getEgDemandDetails()) {    if (demandDetail.getEgDemandReason().getEgInstallmentMaster().equals(propertyTaxCommonUtils.getCurrentPeriodInstallment())) {      if (!demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_PENALTY_FINES)) {        totalTax=totalTax.add(demandDetail.getAmount());      }      if (demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_EDUCATIONAL_CESS)) {        propertyTax=propertyTax.add(demandDetail.getAmount());      }      if (demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_LIBRARY_CESS))       infoBean.setExistingLibraryCess(demandDetail.getAmount());      if (demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_GENERAL_TAX) || demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_VACANT_TAX)) {        propertyTax=propertyTax.add(demandDetail.getAmount());      }      if (demandDetail.getEgDemandReason().getEgDemandReasonMaster().getCode().equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_UNAUTHORIZED_PENALTY))       infoBean.setExistingUCPenalty(demandDetail.getAmount());    }  }  infoBean.setExistingTotalTax(totalTax);  infoBean.setExistingPropertyTax(propertyTax);}  }
class C{  public InetAddress inetAddressValue() throws UnknownHostException {  return InetAddress.getByAddress(value);}  }
class C{  public void pullGlow(int x,int y,int oldX,int oldY,int maxX,int maxY){  if (oldX == mHostView.getScrollX() && oldY == mHostView.getScrollY()) {    if (maxX > 0) {      final int pulledToX=oldX + mOverScrollDeltaX;      if (pulledToX < 0) {        mEdgeGlowLeft.onPull((float)mOverScrollDeltaX / mHostView.getWidth());        if (!mEdgeGlowRight.isFinished()) {          mEdgeGlowRight.onRelease();        }      } else       if (pulledToX > maxX) {        mEdgeGlowRight.onPull((float)mOverScrollDeltaX / mHostView.getWidth());        if (!mEdgeGlowLeft.isFinished()) {          mEdgeGlowLeft.onRelease();        }      }      mOverScrollDeltaX=0;    }    if (maxY > 0 || mHostView.getWebView().getOverScrollMode() == View.OVER_SCROLL_ALWAYS) {      final int pulledToY=oldY + mOverScrollDeltaY;      if (pulledToY < 0) {        mEdgeGlowTop.onPull((float)mOverScrollDeltaY / mHostView.getHeight());        if (!mEdgeGlowBottom.isFinished()) {          mEdgeGlowBottom.onRelease();        }      } else       if (pulledToY > maxY) {        mEdgeGlowBottom.onPull((float)mOverScrollDeltaY / mHostView.getHeight());        if (!mEdgeGlowTop.isFinished()) {          mEdgeGlowTop.onRelease();        }      }      mOverScrollDeltaY=0;    }  }}  }
class C{  public String providePath(){  return "/blockcanary/";}  }
class C{  public boolean isInstalled(){  return installed;}  }
class C{  public int addPadding(byte[] in,int inOff){  byte code=(byte)(in.length - inOff);  while (inOff < in.length) {    in[inOff]=code;    inOff++;  }  return code;}  }
class C{  private static CalendarEventEntry updateTitle(CalendarEventEntry entry,String newTitle) throws ServiceException, IOException {  entry.setTitle(new PlainTextConstruct(newTitle));  return entry.update();}  }
class C{  private String normalize(String path,boolean discardRelativePrefix){  path=UrlUtils.canonicalizePath(path,discardRelativePrefix);  int colon=path.indexOf(':');  if (colon != -1) {    int slash=path.indexOf('/');    if (slash == -1 || colon < slash) {      path="./" + path;    }  }  return path;}  }
class C{  public boolean disconnect(){  if (outpoint.fromTx == null)   return false;  TransactionOutput output=outpoint.fromTx.getOutput((int)outpoint.getIndex());  if (output.getSpentBy() == this) {    output.markAsUnspent();    outpoint.fromTx=null;    return true;  } else {    return false;  }}  }
class C{  protected DeLiCluLeafEntry createNewLeafEntry(DBID id){  return new DeLiCluLeafEntry(id,relation.get(id));}  }
class C{  public Archive(final String url) throws JAXBException {  _dsDispatcher=new DSDispatcher();  _uriBuilder=new UriBuilder();  List<String> _matrixParamSet;  _matrixParamSet=_uriBuilder.addPathSegment(url);  _matrixParamSet=_uriBuilder.addPathSegment("search");  _matrixParamSet=_uriBuilder.addPathSegment("archive");  _templateAndMatrixParameterValues=new HashMap<String,Object>();}  }
class C{  public Timezone(UtcOffset offset,String text){  setOffset(offset);  setText(text);}  }
class C{  public void fatal(Object message){  log(Level.SEVERE,String.valueOf(message),null);}  }
class C{  public static Future<LogRecordWithDLSN> asyncReadFirstUserRecord(final String streamName,final LogSegmentMetadata l,final int scanStartBatchSize,final int scanMaxBatchSize,final AtomicInteger numRecordsScanned,final ExecutorService executorService,final LedgerHandleCache handleCache,final DLSN dlsn){  long startEntryId=0L;  if (l.getLogSegmentSequenceNumber() == dlsn.getLogSegmentSequenceNo()) {    startEntryId=dlsn.getEntryId();  }  final LogRecordSelector selector=new FirstDLSNNotLessThanSelector(dlsn);  return asyncReadRecord(streamName,l,false,false,false,scanStartBatchSize,scanMaxBatchSize,numRecordsScanned,executorService,handleCache,selector,false,startEntryId);}  }
class C{  public static void logError(Throwable exception,String message){  log(IStatus.ERROR,IStatus.OK,message,exception);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNunNPC(zone);}  }
class C{  public double[] homogeneRelativeVector(double[] v){  assert (v.length == dim);  double[] dv=Arrays.copyOf(v,dim + 1);  dv[dim]=0.0;  return dv;}  }
class C{  public static Map<String,LowerAndUpperValue> toValidatedCustomFieldsConstraints(final String[] customFields,final Object[] customFieldsLowerBounds,final Object[] customFieldsUpperBounds){  final Map<String,LowerAndUpperValue> customFieldsConstraints=new HashMap<String,LowerAndUpperValue>();  if (customFields.length != customFieldsLowerBounds.length)   throw new GeoSpatialSearchException("Nr of custom fields = " + customFields.length + " differs from number of lower bounds = "+ customFieldsLowerBounds.length);  if (customFields.length != customFieldsUpperBounds.length)   throw new GeoSpatialSearchException("Nr of custom fields = " + customFields.length + " differs from number of upper bounds = "+ customFieldsUpperBounds.length);  for (int i=0; i < customFields.length; i++) {    customFieldsConstraints.put(customFields[i],new LowerAndUpperValue(customFieldsLowerBounds[i],customFieldsUpperBounds[i]));  }  return customFieldsConstraints;}  }
class C{  protected String generateMessage(Log log){  ErrLoggingEvent ev=log.getLoggingEvent();  if (host != null) {    return String.format("[ %s ] %s%n%s%n:mag: %s/log/list.err?id=%s",ev.getLevel(),log.getRabbitId(),ev.getRenderedMessage(),host,log.getRabbitId());  } else {    return String.format("[ %s ] %s%n%s",ev.getLevel(),log.getRabbitId(),ev.getRenderedMessage());  }}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public Complex subtract(Complex secondComplex){  return new Complex(a - secondComplex.a,b - secondComplex.b);}  }
class C{  public int read(char cbuf[],int off,int len){  int k;  if (position >= document.getLength()) {    return -1;  }  k=len;  if ((position + k) >= document.getLength())   k=document.getLength() - (int)position;  if (off + k >= cbuf.length)   k=cbuf.length - off;  try {    document.getText((int)position,k,segment);    position+=k;    System.arraycopy(segment.array,segment.offset,cbuf,off,k);    return k;  } catch (  BadLocationException ble) {    return -1;  }}  }
class C{  protected HexIntLiteralImpl(){  super();}  }
class C{  protected static int extractByteValue(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  int temp=pduDataStream.read();  assert (-1 != temp);  return temp & 0xFF;}  }
class C{  public static String[] listServices() throws RemoteException {  return null;}  }
class C{  protected void addAutoDeployDeployable(LocalContainer container) throws MojoExecutionException {  if (getDeployerElement() == null && getCargoProject().getPackaging() != null && getCargoProject().isJ2EEPackaging()) {    if (getDeployablesElement() == null || !containsAutoDeployable(getDeployablesElement())) {      LocalConfiguration configuration=container.getConfiguration();      configuration.addDeployable(createAutoDeployDeployable(container));    }  }}  }
class C{  public TextClusterReader(int componentId,int currentMaxClusterId,Collection<TextClusterData> clustersData){  super("SELECT   TEXT_CLUSTER_INTERNAL_ID, TEXT_REPRESENTATIVE, LAST_OBSERVED " + "FROM     " + SQL.TEXT_CLUSTERS + " "+ "WHERE    COMPONENT_INTERNAL_ID = "+ componentId+ " "+ "AND      TEXT_CLUSTER_INTERNAL_ID > "+ currentMaxClusterId);  m_clustersData=clustersData;  m_maxClusterId=currentMaxClusterId;}  }
class C{  @Override public Set<String> locationNames(){  final Set<String> locations=new HashSet<String>();  for (  final Locations service : this.services.values()) {    locations.addAll(service.locationNames());  }  return locations;}  }
class C{  public S2LatLng mul(final double m){  return new S2LatLng(latRadians * m,lngRadians * m);}  }
class C{  public void timingEvent(float fraction){  current.x=(int)(start.x + (end.x - start.x) * fraction);  current.y=(int)(start.y + (end.y - start.y) * fraction);  track.setCarPosition(current);}  }
class C{  GHASH(byte[] subkeyH) throws ProviderException {  if ((subkeyH == null) || subkeyH.length != AES_BLOCK_SIZE) {    throw new ProviderException("Internal error");  }  this.subkeyH0=getLong(subkeyH,0);  this.subkeyH1=getLong(subkeyH,8);}  }
class C{  public static byte[] duplicate(final byte[] src){  final byte[] result=new byte[src.length];  System.arraycopy(src,0,result,0,src.length);  return result;}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  private void replaceRootWithEmptyLeaf(){  writeRetentionQueue.clear(true);  ndistinctOnWriteRetentionQueue=0;  newRootLeaf();}  }
class C{  public static JavaPairRDD<MatrixIndexes,MatrixBlock> copyBinaryBlockMatrix(JavaPairRDD<MatrixIndexes,MatrixBlock> in){  return copyBinaryBlockMatrix(in,true);}  }
class C{  @NoInline @Interruptible public static ITable newITable(int size){  if (!VM.runningVM) {    return ITable.allocate(size);  }  return (ITable)newRuntimeTable(size,RVMType.ITableType);}  }
class C{  public void updateMouseTimeDisplay(long mouseOffsetTime){  String mtds="--";  if (realTimeMode) {    if (mouseOffsetTime > timelinePanel.getTimelineLayer().getEndTime()) {      mouseOffsetTime=timelinePanel.getTimelineLayer().getEndTime();    }  } else {    if (mouseOffsetTime < 0) {      mouseOffsetTime=0;    }  }  if (mouseOffsetTime >= 0) {    mtds=convertOffsetTimeToText(mouseOffsetTime);  }  if (mouseTimeLabel != null) {    mouseTimeLabel.setText(mtds);  }}  }
class C{  public void processingInstruction(String target,XMLString data,Augmentations augs) throws XNIException {  try {    if (fDocumentHandler != null) {      fDocumentHandler.processingInstruction(target,data.toString());    }    if (fContentHandler != null) {      fContentHandler.processingInstruction(target,data.toString());    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public static List<T> listAndClose(final HGSearchResult<T> result){  final List<T> outputList=new ArrayList<T>();  while (result.hasNext()) {    final T currentValue=result.next();    outputList.add(currentValue);  }  result.close();  return outputList;}  }
class C{  public RenameAttributeTest(String name){  super(name);}  }
class C{  public void left(BalancedBinaryNode<K,V> newLeft){  left=newLeft;}  }
class C{  private boolean isKnownVersion(long version){  if (version > currentVersion || version < 0) {    return false;  }  if (version == currentVersion || chunks.size() == 0) {    return true;  }  Chunk c=getChunkForVersion(version);  if (c == null) {    return false;  }  MVMap<String,String> oldMeta=getMetaMap(version);  if (oldMeta == null) {    return false;  }  try {    for (Iterator<String> it=oldMeta.keyIterator("chunk."); it.hasNext(); ) {      String chunkKey=it.next();      if (!chunkKey.startsWith("chunk.")) {        break;      }      if (!meta.containsKey(chunkKey)) {        String s=oldMeta.get(chunkKey);        Chunk c2=Chunk.fromString(s);        Chunk test=readChunkHeaderAndFooter(c2.block);        if (test == null || test.id != c2.id) {          return false;        }        chunks.put(c2.id,c2);      }    }  } catch (  IllegalStateException e) {    return false;  }  return true;}  }
class C{  public static void forEachDatabaseName(MongoClient client,Consumer<String> operation){  forEach(client.listDatabaseNames(),operation);}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof Set) {    Set<?> s=(Set<?>)object;    try {      return size() == s.size() && containsAll(s);    } catch (    NullPointerException ignored) {      return false;    }catch (    ClassCastException ignored) {      return false;    }  }  return false;}  }
class C{  protected int inverseTranslateRow(int row){  if (enabled) {    return Arrays.binarySearch(rowMap,row);  } else {    return row;  }}  }
class C{  public final boolean success(){  return errorCode == 0;}  }
class C{  public static boolean isInnerClass(final Class<?> cls){  return cls != null && cls.getEnclosingClass() != null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Seeker.getInstance().setDisableProfilerRecording(evalBool(stack.pop()));  return null;}  }
class C{  public Learner emptyClone(){  return new POSBaselineLearner();}  }
class C{  @Override public String format(LogRecord r){  StringBuilder sb=new StringBuilder();  sb.append(ISO_DATE_TIME_FORMATTER.print(r.getMillis())).append(" ");  sb.append(r.getLevel().getName()).append(" ");  sb.append("[").append(r.getThreadID()).append("] ");  sb.append(r.getLoggerName()).append(": ");  sb.append(formatMessage(r)).append(LINE_SEPARATOR);  if (r.getThrown() != null) {    sb.append("Stacktrace: ");    sb.append(ExceptionUtils.getStackTrace(r.getThrown()));  }  return sb.toString();}  }
class C{  public void addTargetSupertype(final TypeVariable target,final TypeVariable subtype,Set<AnnotationMirror> hierarchies){  final Supertypes supertypes=targetToRecords.get(target).supertypes;  final Set<AnnotationMirror> supertypeTops=supertypes.targets.get(subtype);  if (supertypeTops == null) {    supertypes.targets.put(subtype,new HashSet<>(hierarchies));  } else {    supertypeTops.addAll(hierarchies);  }}  }
class C{  public void deleteButtonActionPerformed(){  int nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(SerialNode)SerialTrafficController.instance().getNodeFromAddress(nodeAddress);  if (curNode == null) {    statusText1.setText(rb.getString("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  if (javax.swing.JOptionPane.OK_OPTION == javax.swing.JOptionPane.showConfirmDialog(this,rb.getString("ConfirmDelete1") + "\n" + rb.getString("ConfirmDelete2"),rb.getString("ConfirmDeleteTitle"),javax.swing.JOptionPane.OK_CANCEL_OPTION,javax.swing.JOptionPane.WARNING_MESSAGE)) {    SerialTrafficController.instance().deleteNode(nodeAddress);    resetNotes();    statusText1.setText(rb.getString("FeedBackDelete") + " " + Integer.toString(nodeAddress));    errorInStatus1=true;    changedNode=true;  } else {    resetNotes();  }}  }
class C{  public void addPreferencesButton(){  JButton prefsButton=new JButton("Prefs");  prefsButton.setHideActionText(true);  prefsButton.setAction(TimeSeriesPlotActions.getPropertiesDialogAction(this));  buttonPanel.add(prefsButton);}  }
class C{  private void disconnect(){  this.server=null;  if (this.jmxc != null) {    try {      this.jmxc.close();    } catch (    IOException e) {    }  }  this.jmxc=null;}  }
class C{  public boolean wasNull() throws SQLException {  checkState();  return rs.wasNull();}  }
class C{  public Atts(){  this(4);}  }
class C{  public InputRegister createInputRegister(byte b1,byte b2){  return new SimpleInputRegister(b1,b2);}  }
class C{  public static String quoteWord(String s){  return '\"' + s + '\"';}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static void saveBooleanValue(String name,boolean value,boolean isDefault){  if (isDefault) {    preferenceStore.setDefault(name,value);  } else {    preferenceStore.setValue(name,value);  }  try {    preferenceStore.save();  } catch (  IOException e) {    InspectIT.getDefault().createErrorDialog("Error occurred trying to save setting with name '" + name + "' to preference store.",e,-1);  }}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public InputStream post(String[] cookies,Object[] parameters) throws IOException {  setCookies(cookies);  postCookies();  setParameters(parameters);  return doPost();}  }
class C{  public void finalize(){}  }
class C{  public void open() throws IOException {  if (isOpen)   return;  try {    tbl=EagleConfigFactory.load().getHTable(schema.getTable());  } catch (  RuntimeException ex) {    throw new IOException(ex);  }  String rowkeyRegex=buildRegex2(searchTags);  RegexStringComparator regexStringComparator=new RegexStringComparator(rowkeyRegex);  regexStringComparator.setCharset(Charset.forName("ISO-8859-1"));  RowFilter filter=new RowFilter(CompareOp.EQUAL,regexStringComparator);  FilterList filterList=new FilterList();  filterList.addFilter(filter);  Scan s1=new Scan();  s1.setStartRow(stopKey);  s1.setStopRow(startKey);  s1.setFilter(filterList);  s1.setCaching(100);  s1.setCacheBlocks(true);  for (  byte[] qualifier : qualifiers) {    s1.addColumn(schema.getColumnFamily().getBytes(),qualifier);  }  rs=tbl.getScanner(s1);  isOpen=true;}  }
class C{  public void lock(int key){  getLock(key).lock();}  }
class C{  public XpaTurnout(int number,XpaSystemConnectionMemo m){  super(m.getSystemPrefix() + "T" + number);  _number=number;  tc=m.getXpaTrafficController();}  }
class C{  static String copyright(){  return Copyright.IBM_COPYRIGHT;}  }
class C{  private static String removeLastNewline(String str){  int strlen=str.length();  if (strlen == 0) {    return str;  }  int lastNewline=str.lastIndexOf("\n");  if (strlen == lastNewline + 1) {    return str.substring(0,strlen - 1);  } else {    return str;  }}  }
class C{  public static boolean isAbsolute(String uri){  int i=uri.indexOf(':');  if (i < 0)   return false;  while (--i >= 0) {switch (uri.charAt(i)) {case '#':case '/':case '?':      return false;  }}return true;}  }
class C{  public static Object evaluateOutputEval(SBJob job,Object output,Object binding) throws SBExpressionException {  Object outputEval=getOutputEval(binding);  if (SBExpressionBeanHelper.isExpression(outputEval)) {    try {      return SBExpressionBeanHelper.evaluate(job,output,outputEval);    } catch (    SBExpressionException e) {      throw new SBExpressionException("Failed to evaluate outputEval.",e);    }  }  return output;}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  private boolean dependsOn(Entity entity,Entity possibleDep){  for (  RefNode refNode : entity.getChildren(RefNode.class)) {    if (refNode.getReference() == null) {      continue;    }    if (refNode.getReference() == possibleDep) {      LOG.debug(entity + " has FK dependency on " + possibleDep);      return true;    } else {      if (dependsOn(refNode.getReference(),possibleDep)) {        LOG.debug(entity + " has indirect FK dependency on " + possibleDep+ " via "+ refNode.getReference());        return true;      }    }  }  LOG.debug(entity + " has no FK dependency on " + possibleDep);  return false;}  }
class C{  public double cdf(double x){  if (x <= 0.0)   return 0.0;  return 1.0 - Math.exp(-x * lambda);}  }
class C{  @VisibleForTesting protected static State buildPatch(TaskState.TaskStage patchStage,@Nullable TaskState.SubStage patchSubStage,@Nullable Throwable t){  State patchState=new State();  patchState.taskState=new TaskState();  patchState.taskState.stage=patchStage;  patchState.taskState.subStage=patchSubStage;  if (null != t) {    patchState.taskState.failure=Utils.toServiceErrorResponse(t);  }  return patchState;}  }
class C{  static public double normalInverse(double y0) throws ArithmeticException {  double x, y, z, y2, x0, x1;  int code;  final double s2pi=Math.sqrt(2.0 * Math.PI);  if (y0 <= 0.0)   throw new IllegalArgumentException();  if (y0 >= 1.0)   throw new IllegalArgumentException();  code=1;  y=y0;  if (y > (1.0 - 0.13533528323661269189)) {    y=1.0 - y;    code=0;  }  if (y > 0.13533528323661269189) {    y=y - 0.5;    y2=y * y;    x=y + y * (y2 * Polynomial.polevl(y2,P0,4) / Polynomial.p1evl(y2,Q0,8));    x=x * s2pi;    return (x);  }  x=Math.sqrt(-2.0 * Math.log(y));  x0=x - Math.log(x) / x;  z=1.0 / x;  if (x < 8.0)   x1=z * Polynomial.polevl(z,P1,8) / Polynomial.p1evl(z,Q1,8); else   x1=z * Polynomial.polevl(z,P2,8) / Polynomial.p1evl(z,Q2,8);  x=x0 - x1;  if (code != 0)   x=-x;  return (x);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:32.510 -0500",hash_original_method="7BE12B55CFE54AFD4A89AB866136213C",hash_generated_method="A4791E68B3620EA3E9FF0ACD146CF78D") float collect(float off,long time,String axis){  long normTime;  if (off > 0) {    normTime=(long)(off * FAST_MOVE_TIME);    if (dir < 0) {      if (DEBUG_TRACKBALL)       Log.v(TAG,axis + " reversed to positive!");      position=0;      step=0;      acceleration=1;      lastMoveTime=0;    }    dir=1;  } else   if (off < 0) {    normTime=(long)((-off) * FAST_MOVE_TIME);    if (dir > 0) {      if (DEBUG_TRACKBALL)       Log.v(TAG,axis + " reversed to negative!");      position=0;      step=0;      acceleration=1;      lastMoveTime=0;    }    dir=-1;  } else {    normTime=0;  }  if (normTime > 0) {    long delta=time - lastMoveTime;    lastMoveTime=time;    float acc=acceleration;    if (delta < normTime) {      float scale=(normTime - delta) * ACCEL_MOVE_SCALING_FACTOR;      if (scale > 1)       acc*=scale;      if (DEBUG_TRACKBALL)       Log.v(TAG,axis + " accelerate: off=" + off+ " normTime="+ normTime+ " delta="+ delta+ " scale="+ scale+ " acc="+ acc);      acceleration=acc < MAX_ACCELERATION ? acc : MAX_ACCELERATION;    } else {      float scale=(delta - normTime) * ACCEL_MOVE_SCALING_FACTOR;      if (scale > 1)       acc/=scale;      if (DEBUG_TRACKBALL)       Log.v(TAG,axis + " deccelerate: off=" + off+ " normTime="+ normTime+ " delta="+ delta+ " scale="+ scale+ " acc="+ acc);      acceleration=acc > 1 ? acc : 1;    }  }  position+=off;  return (absPosition=Math.abs(position));}  }
class C{  @Nullable private GridMessageListener listenerRemove0(Object topic){  if (topic instanceof GridTopic) {synchronized (sysLsnrsMux) {      int idx=systemListenerIndex(topic);      GridMessageListener old=sysLsnrs[idx];      if (old != null)       changeSystemListener(idx,null);      return old;    }  } else   return lsnrMap.remove(topic);}  }
class C{  protected String buildQuery(List<NameValuePair> valuePairs){  StringBuilder stringBuilder=new StringBuilder();  try {    for (int i=0; i < valuePairs.size(); i++) {      NameValuePair pair=valuePairs.get(i);      stringBuilder.append(URLEncoder.encode(pair.getName(),"utf-8"));      stringBuilder.append("=");      stringBuilder.append(URLEncoder.encode(pair.getValue(),"utf-8"));      if (i + 1 != valuePairs.size())       stringBuilder.append("&");    }  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }  return stringBuilder.toString();}  }
class C{  public final Node popAndTop(){  m_firstFree--;  m_map[m_firstFree]=null;  return (m_firstFree == 0) ? null : m_map[m_firstFree - 1];}  }
class C{  @Override public void stateChanged(ChangeEvent e){  m_Changed=true;  createTitle();  notifyListener();}  }
class C{  public boolean want(Edge e){  return e.isExplicit();}  }
class C{  private void loadPaymentRule(){  log.info("");  if (m_C_BankAccount_ID == -1)   return;  fPaymentRule.removeAllItems();  int C_PaySelection_ID=((KeyNamePair)fPaySelect.getSelectedItem()).getKey();  ArrayList<ValueNamePair> data=loadPaymentRule(C_PaySelection_ID);  for (  ValueNamePair pp : data)   fPaymentRule.addItem(pp);  if (fPaymentRule.getItemCount() > 0)   fPaymentRule.setSelectedIndex(0);  loadPaymentRuleInfo();}  }
class C{  public boolean isActive(){  if (mDrawable instanceof StateListDrawable) {    StateListDrawable d=(StateListDrawable)mDrawable;    int[] states=d.getState();    for (int i=0; i < states.length; i++) {      if (states[i] == android.R.attr.state_focused) {        return true;      }    }  }  return false;}  }
class C{  public CipherParameters decrypt(byte[] in,int keyLen){  return decrypt(in,0,in.length,keyLen);}  }
class C{  @Override public boolean hasNext(){  try {    if (result != null && result.next()) {      return true;    }    if (this.statement != null) {      this.statement.close();    }    if (this.result != null) {      this.result.close();    }    if (primaryKey <= endPK) {      return query();    }    return false;  } catch (  SQLException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected PendingDismissData createPendingDismissData(int position,View view){  return new PendingDismissData(position,view);}  }
class C{  public static Lint instance(Context context){  Lint instance=context.get(lintKey);  if (instance == null)   instance=new Lint(context);  return instance;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.EXECUTION_STATE__STATE_VECTOR:    setStateVector((StateVector)newValue);  return;case SexecPackage.EXECUTION_STATE__SUB_SCOPES:getSubScopes().clear();getSubScopes().addAll((Collection<? extends ExecutionScope>)newValue);return;case SexecPackage.EXECUTION_STATE__SUPER_SCOPE:setSuperScope((ExecutionScope)newValue);return;case SexecPackage.EXECUTION_STATE__ENTER_SEQUENCES:getEnterSequences().clear();getEnterSequences().addAll((Collection<? extends Sequence>)newValue);return;case SexecPackage.EXECUTION_STATE__EXIT_SEQUENCE:setExitSequence((Sequence)newValue);return;case SexecPackage.EXECUTION_STATE__INIT_SEQUENCE:setInitSequence((Sequence)newValue);return;case SexecPackage.EXECUTION_STATE__LEAF:setLeaf((Boolean)newValue);return;case SexecPackage.EXECUTION_STATE__ENTRY_ACTION:setEntryAction((Step)newValue);return;case SexecPackage.EXECUTION_STATE__EXIT_ACTION:setExitAction((Step)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean hasNext(){  return this.nextTask != null;}  }
class C{  @SuppressWarnings({"unchecked","deprecation","null"}) public T[] build(Consumer<? super T> after){  if (variations.size() == 0) {    throw new IllegalArgumentException("Must have at least one variation!");  }  VariationData[] vars=new VariationData[variations.size()];  for (int i=0; i < variations.size(); i++) {    vars[i]=variations.get(i).doBuild();  }  VariationData[][] data=BlockRegistry.splitVariationArray(vars);  T[] ret=(T[])Array.newInstance(provider.getBlockClass(),data.length);  for (int i=0; i < ret.length; i++) {    ret[i]=provider.createBlock(material,i,vars.length,data[i]);    ret[i].setRegistryName(blockName + (i == 0 ? "" : i));    ret[i].setUnlocalizedName(domain + '.' + blockName);    ret[i].setHardness(1);    if (sound != null) {      ret[i].setSoundType(sound);    }    GameRegistry.register(ret[i]);    GameRegistry.register(provider.createItemBlock(ret[i]));    after.accept(ret[i]);    if (FMLCommonHandler.instance().getEffectiveSide().isClient()) {      ChiselModelRegistry.INSTANCE.register(ret[i]);    }    for (int j=0; j < data[i].length; j++) {      if (data[i][j].group != null) {        VariationBuilder<T> v=variations.get(data[i][j].index);        CarvingUtils.getChiselRegistry().addVariation(data[i][j].group,ret[i].getStateFromMeta(j),v.order);      }    }  }  return ret;}  }
class C{  public SQLSyntaxErrorException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public long position(){  if (mPlayer != null && mPlayer.isInitialized()) {    return mPlayer.position();  }  return -1;}  }
class C{  void remove(String id){  typeObjectIDs.remove(objectIDs.remove(id));  nodeList.remove(getNode(id));  removeCell(id);}  }
class C{  public void schedule(TimerTask task,Date when,long period){  if (period <= 0 || when.getTime() < 0) {    throw new IllegalArgumentException();  }  long delay=when.getTime() - System.currentTimeMillis();  scheduleImpl(task,delay < 0 ? 0 : delay,period,false);}  }
class C{  public int computePaginationBarEndIndex(int resultSize){  this.paginationBarEndIndex=this.paginationBarStartIndex + (resultSize - 1) / this.pageLength;  return this.paginationBarEndIndex;}  }
class C{  public static String normalizeReference(String reference){  IScanner scanner=ToolFactory.createScanner(false,false,false,false);  scanner.setSource(reference.toCharArray());  StringBuffer sb=new StringBuffer();  try {    int tokenType=scanner.getNextToken();    while (tokenType != ITerminalSymbols.TokenNameEOF) {      sb.append(scanner.getRawTokenSource());      tokenType=scanner.getNextToken();    }  } catch (  InvalidInputException e) {    Assert.isTrue(false,reference);  }  reference=sb.toString();  return reference;}  }
class C{  protected void drawOval(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){  if (fillColor != null || fillPaint != null) {    if (shadow) {      g.setColor(mxConstants.SHADOW_COLOR);      g.fillOval(x + mxConstants.SHADOW_OFFSETX,y + mxConstants.SHADOW_OFFSETY,w,h);    }    if (fillPaint != null) {      g.setPaint(fillPaint);    } else {      g.setColor(fillColor);    }    g.fillOval(x,y,w,h);  }  if (penColor != null) {    g.setColor(penColor);    g.drawOval(x,y,w,h);  }}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,char escape){  this(reader,separator,quotechar,escape,DEFAULT_SKIP_LINES,CSVParser.DEFAULT_STRICT_QUOTES);}  }
class C{  public void addMinutes(final int minutes){  setMillis(getChronology().minutes().add(getMillis(),minutes));}  }
class C{  private List<String> constructMetricQueryKeys(MetricQuery query){  Long startTimeQuery=query.getStartTimestamp();  Long endTimeQuery=query.getEndTimestamp();  List<String> metricQueryKeys=new ArrayList<String>();  for (Long timeStamp=startTimeQuery; timeStamp < endTimeQuery; timeStamp=timeStamp + DURATION_IN_MILLIS) {    StringBuilder sb=new StringBuilder();    sb.append(timeStamp).append(":");    sb.append(query.getNamespace()).append(":");    sb.append(query.getScope()).append(":");    sb.append(query.getMetric()).append(":");    Map<String,String> treeMap=new TreeMap<String,String>();    for (    Map.Entry<String,String> tag : query.getTags().entrySet()) {      String[] tagValues=tag.getValue().split("\\|");      Arrays.sort(tagValues);      StringBuilder sbTag=new StringBuilder();      String separator="";      for (      String tagValue : tagValues) {        sbTag.append(separator);        separator="|";        sbTag.append(tagValue);      }      treeMap.put(tag.getKey(),sbTag.toString());    }    sb.append(treeMap).append(":");    sb.append(query.getAggregator()).append(":");    sb.append(query.getDownsampler()).append(":");    sb.append(query.getDownsamplingPeriod());    metricQueryKeys.add(sb.toString());  }  return metricQueryKeys;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public boolean isAnyPolicyInhibited(){  return anyPolicyInhibited;}  }
class C{  public SwaggerAssert isEqualTo(String expectedLocation){  return isEqualTo(new SwaggerParser().read(expectedLocation));}  }
class C{  public TermCriteria(int type,int maxCount,double epsilon){  this.type=type;  this.maxCount=maxCount;  this.epsilon=epsilon;}  }
class C{  public static JTabbedPane createTabbedPane(int tabPlacement){switch (tabPlacement) {case JTabbedPane.LEFT:case JTabbedPane.RIGHT:    Object textIconGap=UIManager.get("TabbedPane.textIconGap");  Insets tabInsets=UIManager.getInsets("TabbedPane.tabInsets");UIManager.put("TabbedPane.textIconGap",1);UIManager.put("TabbedPane.tabInsets",new Insets(tabInsets.left,tabInsets.top,tabInsets.right,tabInsets.bottom));JTabbedPane tabPane=new JTabbedPane(tabPlacement);UIManager.put("TabbedPane.textIconGap",textIconGap);UIManager.put("TabbedPane.tabInsets",tabInsets);return tabPane;default :return new JTabbedPane(tabPlacement);}}  }
class C{  String findParmValue(Element e,String name){  List<Element> l=e.getChildren("parameter");  for (int i=0; i < l.size(); i++) {    Element n=l.get(i);    if (n.getAttributeValue("name").equals(name)) {      return n.getTextTrim();    }  }  return null;}  }
class C{  public static void picture(double x,double y,String s){  Image image=getImage(s);  double xs=scaleX(x);  double ys=scaleY(y);  int ws=image.getWidth(null);  int hs=image.getHeight(null);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + s + " is corrupt");  offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),null);  draw();}  }
class C{  public ProfilerEntity(String name){  this.name=name;}  }
class C{  protected N4InterfaceDeclarationImpl(){  super();}  }
class C{  public double calculateLog(double value){  return Math.log(value) / this.baseLog;}  }
class C{  public static void cleanDirectory(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDelete(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public Builder addData(String key,String value){  data.put(key,value);  return this;}  }
class C{  protected double calculateBarW0(CategoryPlot plot,PlotOrientation orientation,Rectangle2D dataArea,CategoryAxis domainAxis,CategoryItemRendererState state,int row,int column){  double space;  if (orientation.isHorizontal()) {    space=dataArea.getHeight();  } else {    space=dataArea.getWidth();  }  double barW0=domainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());  int seriesCount=state.getVisibleSeriesCount();  if (seriesCount < 0) {    seriesCount=getRowCount();  }  int categoryCount=getColumnCount();  if (seriesCount > 1) {    double seriesGap=space * getItemMargin() / (categoryCount * (seriesCount - 1));    double seriesW=calculateSeriesWidth(space,domainAxis,categoryCount,seriesCount);    barW0=barW0 + row * (seriesW + seriesGap) + (seriesW / 2.0) - (state.getBarWidth() / 2.0);  } else {    barW0=domainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;  }  return barW0;}  }
class C{  public void removeRow(int offset){  data.remove(offset);  for (int col=0; col < getColumnCount(); col++) {    dispatcher.fireDataChangeEvent(col,offset);  }}  }
class C{  @Override public synchronized int hashCode(){  int result=1;  for (int i=0; i < elementCount; i++) {    result=(31 * result) + (elementData[i] == null ? 0 : elementData[i].hashCode());  }  return result;}  }
class C{  public static <T,U>T[] copyOfRange(U[] original,int from,int to,Class<? extends T[]> newType){  int newLength=to - from;  if (newLength < 0)   throw new IllegalArgumentException(from + " > " + to);  @SuppressWarnings("unchecked") T[] copy=((Object)newType == (Object)Object[].class) ? (T[])new Object[newLength] : (T[])Array.newInstance(newType.getComponentType(),newLength);  System.arraycopy(original,from,copy,0,Math.min(original.length - from,newLength));  return copy;}  }
class C{  private static void driverMsg(String str){  System.out.println(str);  logger.info(str);}  }
class C{  public T caseTerminalExpression(TerminalExpression object){  return null;}  }
class C{  private void beforeValue(boolean root) throws IOException {switch (peek()) {case EMPTY_DOCUMENT:    if (!lenient && !root) {      throw new IllegalStateException("JSON must start with an array or an object.");    }  replaceTop(JsonScope.NONEMPTY_DOCUMENT);break;case EMPTY_ARRAY:replaceTop(JsonScope.NONEMPTY_ARRAY);newline();break;case NONEMPTY_ARRAY:out.append(',');newline();break;case DANGLING_NAME:out.append(separator);replaceTop(JsonScope.NONEMPTY_OBJECT);break;case NONEMPTY_DOCUMENT:throw new IllegalStateException("JSON must have only one top-level value.");default :throw new IllegalStateException("Nesting problem: " + stack);}}  }
class C{  public ShowPropertyDialogAction(final Workspace workspace){  super("Workspace Properties...");  this.workspace=workspace;  putValue(SHORT_DESCRIPTION,"Show workspace properties dialog.");  putValue(SMALL_ICON,ResourceManager.getImageIcon("Prefs.png"));}  }
class C{  public static BigInteger toBigInteger(final int[] t){  BigInteger b=BigInteger.ZERO;  for (int i=0; i < 10; i++) {    b=b.add(BigInteger.ONE.multiply(BigInteger.valueOf(t[i])).shiftLeft(EXPONENTS[i]));  }  return b;}  }
class C{  public static String stringFor(int n){switch (n) {case CU_RES_VIEW_FORMAT_NONE:    return "CU_RES_VIEW_FORMAT_NONE";case CU_RES_VIEW_FORMAT_UINT_1X8:  return "CU_RES_VIEW_FORMAT_UINT_1X8";case CU_RES_VIEW_FORMAT_UINT_2X8:return "CU_RES_VIEW_FORMAT_UINT_2X8";case CU_RES_VIEW_FORMAT_UINT_4X8:return "CU_RES_VIEW_FORMAT_UINT_4X8";case CU_RES_VIEW_FORMAT_SINT_1X8:return "CU_RES_VIEW_FORMAT_SINT_1X8";case CU_RES_VIEW_FORMAT_SINT_2X8:return "CU_RES_VIEW_FORMAT_SINT_2X8";case CU_RES_VIEW_FORMAT_SINT_4X8:return "CU_RES_VIEW_FORMAT_SINT_4X8";case CU_RES_VIEW_FORMAT_UINT_1X16:return "CU_RES_VIEW_FORMAT_UINT_1X16";case CU_RES_VIEW_FORMAT_UINT_2X16:return "CU_RES_VIEW_FORMAT_UINT_2X16";case CU_RES_VIEW_FORMAT_UINT_4X16:return "CU_RES_VIEW_FORMAT_UINT_4X16";case CU_RES_VIEW_FORMAT_SINT_1X16:return "CU_RES_VIEW_FORMAT_SINT_1X16";case CU_RES_VIEW_FORMAT_SINT_2X16:return "CU_RES_VIEW_FORMAT_SINT_2X16";case CU_RES_VIEW_FORMAT_SINT_4X16:return "CU_RES_VIEW_FORMAT_SINT_4X16";case CU_RES_VIEW_FORMAT_UINT_1X32:return "CU_RES_VIEW_FORMAT_UINT_1X32";case CU_RES_VIEW_FORMAT_UINT_2X32:return "CU_RES_VIEW_FORMAT_UINT_2X32";case CU_RES_VIEW_FORMAT_UINT_4X32:return "CU_RES_VIEW_FORMAT_UINT_4X32";case CU_RES_VIEW_FORMAT_SINT_1X32:return "CU_RES_VIEW_FORMAT_SINT_1X32";case CU_RES_VIEW_FORMAT_SINT_2X32:return "CU_RES_VIEW_FORMAT_SINT_2X32";case CU_RES_VIEW_FORMAT_SINT_4X32:return "CU_RES_VIEW_FORMAT_SINT_4X32";case CU_RES_VIEW_FORMAT_FLOAT_1X16:return "CU_RES_VIEW_FORMAT_FLOAT_1X16";case CU_RES_VIEW_FORMAT_FLOAT_2X16:return "CU_RES_VIEW_FORMAT_FLOAT_2X16";case CU_RES_VIEW_FORMAT_FLOAT_4X16:return "CU_RES_VIEW_FORMAT_FLOAT_4X16";case CU_RES_VIEW_FORMAT_FLOAT_1X32:return "CU_RES_VIEW_FORMAT_FLOAT_1X32";case CU_RES_VIEW_FORMAT_FLOAT_2X32:return "CU_RES_VIEW_FORMAT_FLOAT_2X32";case CU_RES_VIEW_FORMAT_FLOAT_4X32:return "CU_RES_VIEW_FORMAT_FLOAT_4X32";case CU_RES_VIEW_FORMAT_UNSIGNED_BC1:return "CU_RES_VIEW_FORMAT_UNSIGNED_BC1";case CU_RES_VIEW_FORMAT_UNSIGNED_BC2:return "CU_RES_VIEW_FORMAT_UNSIGNED_BC2";case CU_RES_VIEW_FORMAT_UNSIGNED_BC3:return "CU_RES_VIEW_FORMAT_UNSIGNED_BC3";case CU_RES_VIEW_FORMAT_UNSIGNED_BC4:return "CU_RES_VIEW_FORMAT_UNSIGNED_BC4";case CU_RES_VIEW_FORMAT_SIGNED_BC4:return "CU_RES_VIEW_FORMAT_SIGNED_BC4";case CU_RES_VIEW_FORMAT_UNSIGNED_BC5:return "CU_RES_VIEW_FORMAT_UNSIGNED_BC5";case CU_RES_VIEW_FORMAT_SIGNED_BC5:return "CU_RES_VIEW_FORMAT_SIGNED_BC5";case CU_RES_VIEW_FORMAT_UNSIGNED_BC6H:return "CU_RES_VIEW_FORMAT_UNSIGNED_BC6H";case CU_RES_VIEW_FORMAT_SIGNED_BC6H:return "CU_RES_VIEW_FORMAT_SIGNED_BC6H";case CU_RES_VIEW_FORMAT_UNSIGNED_BC7:return "CU_RES_VIEW_FORMAT_UNSIGNED_BC7";}return "INVALID CUresourceViewFormat: " + n;}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  getMenuInflater().inflate(R.menu.video_list,menu);  return true;}  }
class C{  public DisplayBlock(ToplevelPane pane){  this(pane,"DisplayBlock");}  }
class C{  public CertificateNotYetValidException(){  super();}  }
class C{  public static void checkArgument(boolean test,String message,Object... arguments){  if (!test) {    throw newIllegalArgumentException(message,arguments);  }}  }
class C{  public java.util.Set<Map.Entry<String,String>> entrySet(){  Set<Map.Entry<String,String>> set=new HashSet<Map.Entry<String,String>>();  for (  String key : keySet()) {    set.add(new Entry(key));  }  return set;}  }
class C{  public void resize(int width,int height){  if ((width == 0) || (height == 0)) {    return;  }  if (basicCamera == null) {    return;  }  basicCamera.resize(width,height);  centerX=width / 2;  centerY=height / 2;}  }
class C{  public List<RayTraceResult> rayTrace(Stream<Cuboid> stream){  return stream.map(null).filter(null).map(null).sorted().collect(Collectors.toList());}  }
class C{  public ExponentialDistr(double mean){  numGen=new ExponentialDistribution(mean);}  }
class C{  public ClusterRerouteRequest dryRun(boolean dryRun){  this.dryRun=dryRun;  return this;}  }
class C{  public static Date round(final Date date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  final Calendar gval=Calendar.getInstance();  gval.setTime(date);  modify(gval,field,ModifyType.ROUND);  return gval.getTime();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void paintVerticalPartOfLeg(Graphics g,Rectangle clipBounds,Insets insets,TreePath path){  if (!paintLines) {    return;  }  int depth=path.getPathCount() - 1;  if (depth == 0 && !getShowsRootHandles() && !isRootVisible()) {    return;  }  int lineX=getRowX(-1,depth + 1);  if (leftToRight) {    lineX=lineX - getRightChildIndent() + insets.left;  } else {    lineX=tree.getWidth() - lineX - insets.right + getRightChildIndent() - 1;  }  int clipLeft=clipBounds.x;  int clipRight=clipBounds.x + (clipBounds.width - 1);  if (lineX >= clipLeft && lineX <= clipRight) {    int clipTop=clipBounds.y;    int clipBottom=clipBounds.y + clipBounds.height;    Rectangle parentBounds=getPathBounds(tree,path);    Rectangle lastChildBounds=getPathBounds(tree,getLastChildPath(path));    if (lastChildBounds == null)     return;    int top;    if (parentBounds == null) {      top=Math.max(insets.top + getVerticalLegBuffer(),clipTop);    } else     top=Math.max(parentBounds.y + parentBounds.height + getVerticalLegBuffer(),clipTop);    if (depth == 0 && !isRootVisible()) {      TreeModel model=getModel();      if (model != null) {        Object root=model.getRoot();        if (model.getChildCount(root) > 0) {          parentBounds=getPathBounds(tree,path.pathByAddingChild(model.getChild(root,0)));          if (parentBounds != null)           top=Math.max(insets.top + getVerticalLegBuffer(),parentBounds.y + parentBounds.height / 2);        }      }    }    int bottom=Math.min(lastChildBounds.y + (lastChildBounds.height / 2),clipBottom);    if (top <= bottom) {      g.setColor(getHashColor());      paintVerticalLine(g,tree,lineX,top,bottom);    }  }}  }
class C{  public void paintMenuBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((AcelaListener)client).message((AcelaMessage)m);}  }
class C{  protected byte[] engineSign() throws SignatureException {  BigInteger r=null;  BigInteger s=null;  BigInteger k=null;  BigInteger p, q, g, x;  BigInteger digestBI;  byte[] randomBytes;  byte[] rBytes;  byte[] sBytes;  byte[] signature;  int n, n1, n2;  DSAParams params;  if (appRandom == null) {    appRandom=new SecureRandom();  }  params=dsaKey.getParams();  p=params.getP();  q=params.getQ();  g=params.getG();  x=((DSAPrivateKey)dsaKey).getX();  digestBI=new BigInteger(1,msgDigest.digest());  randomBytes=new byte[20];  for (; ; ) {    appRandom.nextBytes(randomBytes);    k=new BigInteger(1,randomBytes);    if (k.compareTo(q) != -1) {      continue;    }    r=g.modPow(k,p).mod(q);    if (r.signum() == 0) {      continue;    }    s=k.modInverse(q).multiply(digestBI.add(x.multiply(r)).mod(q)).mod(q);    if (s.signum() != 0) {      break;    }  }  rBytes=r.toByteArray();  n1=rBytes.length;  if ((rBytes[0] & 0x80) != 0) {    n1++;  }  sBytes=s.toByteArray();  n2=sBytes.length;  if ((sBytes[0] & 0x80) != 0) {    n2++;  }  signature=new byte[6 + n1 + n2];  signature[0]=(byte)0x30;  signature[1]=(byte)(4 + n1 + n2);  signature[2]=(byte)0x02;  signature[3]=(byte)n1;  signature[4 + n1]=(byte)0x02;  signature[5 + n1]=(byte)n2;  if (n1 == rBytes.length) {    n=4;  } else {    n=5;  }  System.arraycopy(rBytes,0,signature,n,rBytes.length);  if (n2 == sBytes.length) {    n=6 + n1;  } else {    n=7 + n1;  }  System.arraycopy(sBytes,0,signature,n,sBytes.length);  return signature;}  }
class C{  public void ensureOpen() throws IOException {  if (mExceptionString != null) {    throw new IOException(mExceptionString);  }  if (mClosed) {    throw new IOException("Operation has already ended");  }}  }
class C{  protected void shutdown() throws IOException {  zooKeeperServer.shutdown();  ZKDatabase zkDb=zooKeeperServer.getZKDatabase();  if (cnxnFactory != null && cnxnFactory.getLocalPort() != 0) {    waitForServerDown(getZkHost() + ":" + getPort(),5000);  }  if (cnxnFactory != null) {    cnxnFactory.shutdown();    try {      cnxnFactory.join();    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }  }  if (zkDb != null) {    zkDb.close();  }}  }
class C{  public ClusterId(final int clusterId){  super(clusterId,ClusterId.class);  if (this.getRaw() < 0) {    throw new IllegalArgumentException("cluster id must be non-negative");  }}  }
class C{  private void initLegacy(){  File framwork=new File(folder.getAbsolutePath() + File.separator + S.SYSTEM_FRAMEWORK);  File app=new File(folder.getAbsolutePath() + File.separator + S.SYSTEM_APP);  File privApp=new File(folder.getAbsolutePath() + File.separator + S.SYSTEM_PRIV_APP);  this.worker1List=new ArrayList<File>();  this.worker2List=new ArrayList<File>();  this.worker3List=new ArrayList<File>();  this.worker4List=new ArrayList<File>();  File[] appList=app.listFiles();  File[] privList=null;  if (privApp.exists())   privList=privApp.listFiles();  File framworkList[]=framwork.listFiles();  S.getBootTmpDex().mkdirs();  for (  File f : framworkList) {    if (f.getName().endsWith(".odex")) {      worker3List.add(f);      FilesUtils.copyFile(f,new File(S.getBootTmpDex().getAbsolutePath() + File.separator + f.getName()));    }  }  isinitialized=true;  for (  File f : appList) {    if (f.getName().endsWith(".odex")) {      worker1List.add(f);    }  }  if (privList != null) {    for (    File f : privList) {      if (f.getName().endsWith(".odex")) {        worker1List.add(f);      }    }  }  if (worker3List.size() > 0) {    int half=worker3List.size() / 2;    for (int i=0; i <= half; i++) {      worker4List.add(worker3List.get(0));      worker3List.remove(0);    }  }  if (worker1List.size() > 0) {    int half=worker1List.size() / 2;    for (int i=0; i <= half; i++) {      worker2List.add(worker1List.get(0));      worker1List.remove(0);    }  }  worker1List=ArrayUtils.deletedupricates(worker1List);  worker2List=ArrayUtils.deletedupricates(worker2List);  worker3List=ArrayUtils.deletedupricates(worker3List);  worker4List=ArrayUtils.deletedupricates(worker4List);  apk1l=new ApkWorkerLegacy(worker1List,logPan,S.getWorker1Folder(),SessionCfg.sign,SessionCfg.zipalign);  apk2l=new ApkWorkerLegacy(worker2List,logPan,S.getWorker2Folder(),SessionCfg.sign,SessionCfg.zipalign);  jar1l=new JarWorkerLegacy(worker3List,logPan,S.getWorker3Folder());  jar2l=new JarWorkerLegacy(worker4List,logPan,S.getWorker4Folder());  apk1l.addThreadWatcher(this);  apk2l.addThreadWatcher(this);  jar1l.addThreadWatcher(this);  jar2l.addThreadWatcher(this);  tasks=new ArrayList<Runnable>();  tasks.add(apk1l);  tasks.add(apk2l);  tasks.add(jar1l);  tasks.add(jar2l);  this.initPannelLegacy();}  }
class C{  private void fixAfterDeletion(Entry x){  while (x != root && colorOf(x) == BLACK) {    if (x == leftOf(parentOf(x))) {      Entry sib=rightOf(parentOf(x));      if (colorOf(sib) == RED) {        setColor(sib,BLACK);        setColor(parentOf(x),RED);        rotateLeft(parentOf(x));        sib=rightOf(parentOf(x));      }      if (colorOf(leftOf(sib)) == BLACK && colorOf(rightOf(sib)) == BLACK) {        setColor(sib,RED);        x=parentOf(x);      } else {        if (colorOf(rightOf(sib)) == BLACK) {          setColor(leftOf(sib),BLACK);          setColor(sib,RED);          rotateRight(sib);          sib=rightOf(parentOf(x));        }        setColor(sib,colorOf(parentOf(x)));        setColor(parentOf(x),BLACK);        setColor(rightOf(sib),BLACK);        rotateLeft(parentOf(x));        x=root;      }    } else {      Entry sib=leftOf(parentOf(x));      if (colorOf(sib) == RED) {        setColor(sib,BLACK);        setColor(parentOf(x),RED);        rotateRight(parentOf(x));        sib=leftOf(parentOf(x));      }      if (colorOf(rightOf(sib)) == BLACK && colorOf(leftOf(sib)) == BLACK) {        setColor(sib,RED);        x=parentOf(x);      } else {        if (colorOf(leftOf(sib)) == BLACK) {          setColor(rightOf(sib),BLACK);          setColor(sib,RED);          rotateLeft(sib);          sib=leftOf(parentOf(x));        }        setColor(sib,colorOf(parentOf(x)));        setColor(parentOf(x),BLACK);        setColor(leftOf(sib),BLACK);        rotateRight(parentOf(x));        x=root;      }    }  }  setColor(x,BLACK);}  }
class C{  @Override @Inline public boolean isLive(ObjectReference object){  if (defrag.inDefrag() && isDefragSource(object))   return ForwardingWord.isForwardedOrBeingForwarded(object) || ObjectHeader.testMarkState(object,markState); else   return ObjectHeader.testMarkState(object,markState);}  }
class C{  public static String convertIpv4IpToHex(String ipAddress){  StringBuffer hexIp=new StringBuffer(64);  String[] ipSegments=ipAddress.split("\\.");  for (  String ipSegment : ipSegments) {    hexIp.append(convertIpSegmentToHex(ipSegment));  }  return hexIp.toString();}  }
class C{  private boolean isLoggable(){  return Log.isLoggable(tag,level);}  }
class C{  public static <T>T splitEachLine(InputStream stream,String regex,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {  return splitEachLine(new BufferedReader(new InputStreamReader(stream)),regex,closure);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  private String createRealizedGainLoss(DocLine line,MAcctSchema as,Fact fact,MAccount acct,MInvoice invoice,BigDecimal allocationSource,BigDecimal allocationAccounted){  BigDecimal invoiceSource=null;  BigDecimal invoiceAccounted=null;  String sql="SELECT " + (invoice.isSOTrx() ? "SUM(AmtSourceDr), SUM(AmtAcctDr)" : "SUM(AmtSourceCr), SUM(AmtAcctCr)") + " FROM Fact_Acct "+ "WHERE AD_Table_ID=318 AND Record_ID=?"+ " AND C_AcctSchema_ID=?"+ " AND PostingType='A'";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,getTrxName());    pstmt.setInt(1,invoice.getC_Invoice_ID());    pstmt.setInt(2,as.getC_AcctSchema_ID());    rs=pstmt.executeQuery();    if (rs.next()) {      invoiceSource=rs.getBigDecimal(1);      invoiceAccounted=rs.getBigDecimal(2);    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (invoiceSource == null || invoiceAccounted == null)   return "Gain/Loss - Invoice not posted yet";  String description="Invoice=(" + invoice.getC_Currency_ID() + ")"+ invoiceSource+ "/"+ invoiceAccounted+ " - Allocation=("+ getC_Currency_ID()+ ")"+ allocationSource+ "/"+ allocationAccounted;  log.fine(description);  if (getC_Currency_ID() != invoice.getC_Currency_ID()) {    BigDecimal allocationSourceNew=MConversionRate.convert(getCtx(),allocationSource,getC_Currency_ID(),invoice.getC_Currency_ID(),getDateAcct(),invoice.getC_ConversionType_ID(),invoice.getAD_Client_ID(),invoice.getAD_Org_ID());    if (allocationSourceNew == null)     return "Gain/Loss - No Conversion from Allocation->Invoice";    String d2="Allocation=(" + getC_Currency_ID() + ")"+ allocationSource+ "->("+ invoice.getC_Currency_ID()+ ")"+ allocationSourceNew;    log.fine(d2);    description+=" - " + d2;    allocationSource=allocationSourceNew;  }  BigDecimal acctDifference=null;  if (allocationSource.compareTo(invoiceSource) == 0) {    acctDifference=invoiceAccounted.subtract(allocationAccounted);    String d2="(full) = " + acctDifference;    log.fine(d2);    description+=" - " + d2;  } else {    double multiplier=allocationSource.doubleValue() / invoiceSource.doubleValue();    invoiceAccounted=invoiceAccounted.multiply(new BigDecimal(multiplier));    acctDifference=invoiceAccounted.subtract(allocationAccounted);    if (acctDifference.abs().compareTo(TOLERANCE) < 0)     acctDifference=Env.ZERO;    int precision=as.getStdPrecision();    if (acctDifference.scale() > precision)     acctDifference=acctDifference.setScale(precision,BigDecimal.ROUND_HALF_UP);    String d2="(partial) = " + acctDifference + " - Multiplier="+ multiplier;    log.fine(d2);    description+=" - " + d2;  }  if (acctDifference.signum() == 0) {    log.fine("No Difference");    return null;  }  MAccount gain=MAccount.get(as.getCtx(),as.getAcctSchemaDefault().getRealizedGain_Acct());  MAccount loss=MAccount.get(as.getCtx(),as.getAcctSchemaDefault().getRealizedLoss_Acct());  if (invoice.isSOTrx()) {    FactLine fl=fact.createLine(line,loss,gain,as.getC_Currency_ID(),acctDifference);    fl.setDescription(description);    fact.createLine(line,acct,as.getC_Currency_ID(),acctDifference.negate());    fl.setDescription(description);  } else {    fact.createLine(line,acct,as.getC_Currency_ID(),acctDifference);    FactLine fl=fact.createLine(line,loss,gain,as.getC_Currency_ID(),acctDifference.negate());  }  return null;}  }
class C{  public void register1(String name,Type arg,InvocationPlugin plugin){  plugins.register(plugin,false,allowOverwrite,declaringType,name,arg);}  }
class C{  private int shortRangeSquared(){  int tmp=range / 2 + (range % 2);  return tmp * tmp;}  }
class C{  public void background(float gray,float alpha){  if (format == RGB) {    background(gray);  } else {    colorCalc(gray,alpha);    backgroundFromCalc();  }}  }
class C{  private ArrayList<Object> purgeLineRecords(ArrayList<Object> lineRecords,final int moduleId,DebugHandler handler){  ArrayList<Object> newLineRecords=new ArrayList<Object>();  DebugModule module=(DebugModule)modules.get(moduleId);  int i=0, size=lineRecords.size();  while (i < size) {    Integer id=(Integer)lineRecords.get(i);    LineRecord lr=(LineRecord)lineRecords.get(i + 1);    Integer offset=(Integer)lineRecords.get(i + 2);    if (id.intValue() == moduleId) {      lr.module=module;      if (lr.module != null) {        lr.module.addOffset(lr,offset.intValue());        handler.offset(offset.intValue(),lr);      } else {        handler.error("Could not find kDebugScript with module ID = " + id);      }    } else {      newLineRecords.add(id);      newLineRecords.add(lr);      newLineRecords.add(offset);    }    i+=3;  }  return newLineRecords;}  }
class C{  private void executePropose(Epoch epoch,byte[] value){  int cid=epoch.getConsensus().getId();  Logger.println("(Acceptor.executePropose) executing propose for " + cid + ","+ epoch.getTimestamp());  long consensusStartTime=System.nanoTime();  if (epoch.propValue == null) {    epoch.propValue=value;    epoch.propValueHash=tomLayer.computeHash(value);    epoch.getConsensus().addWritten(value);    Logger.println("(Acceptor.executePropose) I have written value " + Arrays.toString(epoch.propValueHash) + " in consensus instance "+ cid+ " with timestamp "+ epoch.getConsensus().getEts());    if (cid == tomLayer.getLastExec() + 1) {      tomLayer.setInExec(cid);    }    epoch.deserializedPropValue=tomLayer.checkProposedValue(value,true);    if (epoch.deserializedPropValue != null && !epoch.isWriteSetted(me)) {      if (epoch.getConsensus().getDecision().firstMessageProposed == null) {        epoch.getConsensus().getDecision().firstMessageProposed=epoch.deserializedPropValue[0];      }      if (epoch.getConsensus().getDecision().firstMessageProposed.consensusStartTime == 0) {        epoch.getConsensus().getDecision().firstMessageProposed.consensusStartTime=consensusStartTime;      }      epoch.getConsensus().getDecision().firstMessageProposed.proposeReceivedTime=System.nanoTime();      if (controller.getStaticConf().isBFT()) {        Logger.println("(Acceptor.executePropose) sending WRITE for " + cid);        epoch.setWrite(me,epoch.propValueHash);        epoch.getConsensus().getDecision().firstMessageProposed.writeSentTime=System.nanoTime();        communication.send(this.controller.getCurrentViewOtherAcceptors(),factory.createWrite(cid,epoch.getTimestamp(),epoch.propValueHash));        Logger.println("(Acceptor.executePropose) WRITE sent for " + cid);        computeWrite(cid,epoch,epoch.propValueHash);        Logger.println("(Acceptor.executePropose) WRITE computed for " + cid);      } else {        epoch.setAccept(me,epoch.propValueHash);        epoch.getConsensus().getDecision().firstMessageProposed.writeSentTime=System.nanoTime();        epoch.getConsensus().getDecision().firstMessageProposed.acceptSentTime=System.nanoTime();        Logger.println("(Acceptor.executePropose) [CFT Mode] Setting consensus " + cid + " QuorumWrite tiemstamp to "+ epoch.getConsensus().getEts()+ " and value "+ Arrays.toString(epoch.propValueHash));        epoch.getConsensus().setQuorumWrites(epoch.propValueHash);        communication.send(this.controller.getCurrentViewOtherAcceptors(),factory.createAccept(cid,epoch.getTimestamp(),epoch.propValueHash));        computeAccept(cid,epoch,epoch.propValueHash);      }      executionManager.processOutOfContext(epoch.getConsensus());    }  }}  }
class C{  public ObjectName[] manageStats() throws AdminException, MalformedObjectNameException {  return Helper.manageStats(this);}  }
class C{  public LongBestFitAllocator(OffHeapStorageArea storage){  this.storage=storage;  clear();}  }
class C{  public static void toast(Context context,CharSequence msg,int duration){  if (mToast != null)   mToast.cancel();  mToast=android.widget.Toast.makeText(context,msg,duration);  mToast.show();}  }
class C{  public synchronized void onMessageProcessingFinished(TcpDiscoveryAbstractMessage msg){  assert msg != null;  Long startTs=msgsProcStartTs.get(msg.id());  if (startTs != null) {    long duration=U.currentTimeMillis() - startTs;    int totalProcMsgs=totalProcessedMessages();    if (totalProcMsgs != 0)     avgMsgProcTime=(avgMsgProcTime * (totalProcMsgs - 1) + duration) / totalProcMsgs;    if (duration > maxMsgProcTime) {      maxMsgProcTime=duration;      maxProcTimeMsgCls=msg.getClass().getSimpleName();    }    msgsProcStartTs.remove(msg.id());  }}  }
class C{  public Line3D(Stack<Vector3> points,float thickness,int color){  this(points,thickness,null);  setColor(color);}  }
class C{  protected static void do_reduce_table(PrintStream out,parse_reduce_table red_tab){  lalr_state goto_st;  parse_action act;  long start_time=System.currentTimeMillis();  out.println();  out.println("  /** reduce_goto table */");  out.println("  protected static final short[][] _reduce_table = {");  for (int i=0; i < red_tab.num_states(); i++) {    out.print("    /*" + i + "*/{");    for (int j=0; j < red_tab.under_state[i].size(); j++) {      goto_st=red_tab.under_state[i].under_non_term[j];      if (goto_st != null) {        out.print(j + "," + goto_st.index()+ ",");      }    }    out.println("-1,-1},");  }  out.println("  };");  out.println();  out.println("  /** access to reduce_goto table */");  out.println("  public short[][] reduce_table() {return _reduce_table;}");  out.println();  goto_table_time=System.currentTimeMillis() - start_time;}  }
class C{  public Plan(){  super(Harness.options,"Plan","Plan to use",System.getProperty("mmtk.harness.plan","org.mmtk.plan.marksweep.MS"));}  }
class C{  @Override public boolean onLeftClickEntity(ItemStack itemStack,EntityPlayer player,Entity entity){  if (this.getEnergy(itemStack) >= ENERGY_USAGE) {    if (entity instanceof EntityExplosive) {      if (!entity.worldObj.isRemote) {        EntityExplosive entityTNT=(EntityExplosive)entity;        EntityItem entityItem=new EntityItem(entity.worldObj,entity.posX,entity.posY,entity.posZ,new ItemStack(DefenseTechBlocks.blockExplosive,1,entityTNT.explosiveID));        float var13=0.05F;        Random random=new Random();        entityItem.motionX=((float)random.nextGaussian() * var13);        entityItem.motionY=((float)random.nextGaussian() * var13 + 0.2F);        entityItem.motionZ=((float)random.nextGaussian() * var13);        entity.worldObj.spawnEntityInWorld(entityItem);      }      entity.setDead();    } else     if (entity instanceof EntityTNTPrimed) {      if (!entity.worldObj.isRemote) {        EntityItem entityItem=new EntityItem(entity.worldObj,entity.posX,entity.posY,entity.posZ,new ItemStack(Blocks.tnt));        float var13=0.05F;        Random random=new Random();        entityItem.motionX=((float)random.nextGaussian() * var13);        entityItem.motionY=((float)random.nextGaussian() * var13 + 0.2F);        entityItem.motionZ=((float)random.nextGaussian() * var13);        entity.worldObj.spawnEntityInWorld(entityItem);      }      entity.setDead();    } else     if (entity instanceof EntityBombCart) {      ((EntityBombCart)entity).killMinecart(DamageSource.generic);    }    this.setEnergy(itemStack,this.getEnergy(itemStack) - ENERGY_USAGE);    return true;  } else {    player.addChatMessage(new ChatComponentText(Reference.CHAT_DESC + EnumColor.GREY + " "+ LangUtils.localize("message.defuser.nopower")));  }  return false;}  }
class C{  public Label(Label lbl){  elt[0]=new TopologyLocation(lbl.elt[0]);  elt[1]=new TopologyLocation(lbl.elt[1]);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("M_MatchInv_ID"))     p_M_MatchInv_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"@UnknownParameter@ " + name);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.138 -0500",hash_original_method="505B6F2C5D14D5307D2792E4869F206A",hash_generated_method="B2A8BE88A07C1CCC431566DDEBE0F08C") private static int parsePolicyFromMessage(String message){  return message.getTaintInt();}  }
class C{  public static byte[] randomBytes(byte len){  char u8=convertByte2Uint8(len);  return randomBytes(u8);}  }
class C{  public void parse(){  try {    start();  } catch (  ParseException e) {    throw new CustomDrawingParserRuntimeException(e);  }catch (  TokenMgrException e) {    throw new CustomDrawingParserRuntimeException(e);  }}  }
class C{  public boolean isChrome(){  return isChrome;}  }
class C{  IonListLite(ContainerlessContext context,Collection<? extends IonValue> elements) throws ContainedValueException {  super(context,elements);}  }
class C{  @Override public boolean performOperation(int generation){  return true;}  }
class C{  public QueueReader<MethodOrMethodContext> newListener(){  return reachables.reader();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void deltaTransform(double[] src,int srcOff,double[] dst,int dstOff,int length){  while (--length >= 0) {    double x=src[srcOff++];    double y=src[srcOff++];    dst[dstOff++]=x * m00 + y * m01;    dst[dstOff++]=x * m10 + y * m11;  }}  }
class C{  public PageMessages(){}  }
class C{  @Override public void deliver(WriteStream os,OutHttp2 outHttp) throws IOException {  outHttp.writePriority(_streamId,_streamRef,_weight);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TFIELD__CONST:    return isConst();case TypesPackage.TFIELD__HAS_EXPRESSION:  return isHasExpression();case TypesPackage.TFIELD__TYPE_REF:return getTypeRef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public DistributeExperimentPanel(Experiment exp){  this();  setExperiment(exp);}  }
class C{  @Override public Joiner join(Class<? extends DataObject> clazz,String alias,String field,Collection<? extends Object> value){  return new Joiner(getDbClient()).join(clazz,alias).match(field,value);}  }
class C{  @Override public synchronized Problem fillInStackTrace(){  return this;}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  public void firePropertyChange(String propertyName,float oldValue,float newValue){}  }
class C{  public byte[] pngEncode(){  byte[] pngIdBytes={-119,80,78,71,13,10,26,10};  if (image == null) {    return null;  }  width=image.getWidth(null);  height=image.getHeight(null);  pngBytes=new byte[((width + 1) * height * 3) + 200];  maxPos=0;  bytePos=writeBytes(pngIdBytes,0);  writeHeader();  if (writeImageData()) {    writeEnd();    pngBytes=resizeByteArray(pngBytes,maxPos);  } else {    pngBytes=null;  }  return pngBytes;}  }
class C{  public String start(Properties ctx,String methodName,int WindowNo,GridTab mTab,GridField mField,Object value,Object oldValue){  if (methodName == null || methodName.length() == 0)   throw new IllegalArgumentException("No Method Name");  m_mTab=mTab;  m_mField=mField;  String retValue="";  StringBuffer msg=new StringBuffer(methodName).append(" - ").append(mField.getColumnName()).append("=").append(value).append(" (old=").append(oldValue).append(") {active=").append(isCalloutActive()).append("}");  if (!isCalloutActive())   log.info(msg.toString());  Method method=getMethod(methodName);  if (method == null)   throw new IllegalArgumentException("Method not found: " + methodName);  int argLength=method.getParameterTypes().length;  if (!(argLength == 5 || argLength == 6))   throw new IllegalArgumentException("Method " + methodName + " has invalid no of arguments: "+ argLength);  try {    Object[] args=null;    if (argLength == 6)     args=new Object[]{ctx,new Integer(WindowNo),mTab,mField,value,oldValue}; else     args=new Object[]{ctx,new Integer(WindowNo),mTab,mField,value};    retValue=(String)method.invoke(this,args);  } catch (  Exception e) {    Throwable ex=e.getCause();    if (ex == null)     ex=e;    log.log(Level.SEVERE,"start: " + methodName,ex);    retValue=ex.getLocalizedMessage();    if (retValue == null) {      retValue=ex.toString();    }  } finally {    m_mTab=null;    m_mField=null;  }  return retValue;}  }
class C{  public static void resetPresets(){synchronized (currentPresetsLock) {    currentPresets=null;    presetSearchIndex=null;    translatedPresetSearchIndex=null;    System.gc();  }}  }
class C{  public static double quantileInverse(DoubleArrayList sortedList,double element){  return rankInterpolated(sortedList,element) / sortedList.size();}  }
class C{  public void applyPhysics(Material oldType,int newTypeId,byte oldData,byte newData){  ItemTable itemTable=ItemTable.instance();  Material newType=Material.getMaterial(newTypeId);  for (int y=-1; y <= 1; y++) {    for (    BlockFace face : LAYER) {      if (y == 0 && face == BlockFace.SELF) {        continue;      }      GlowBlock notify=getRelative(face.getModX(),face.getModY() + y,face.getModZ());      BlockFace blockFace;      if (y == 0) {        blockFace=face.getOppositeFace();      } else       if (y == -1 && face == BlockFace.SELF) {        blockFace=BlockFace.UP;      } else       if (y == 1 && face == BlockFace.SELF) {        blockFace=BlockFace.DOWN;      } else {        blockFace=null;      }      BlockType notifyType=itemTable.getBlock(notify.getTypeId());      if (notifyType != null) {        notifyType.onNearBlockChanged(notify,blockFace,this,oldType,oldData,newType,newData);      }    }  }  BlockType type=itemTable.getBlock(oldType);  if (type != null) {    type.onBlockChanged(this,oldType,oldData,newType,newData);  }}  }
class C{  public GenericPdu parse(){  if (mPduDataStream == null) {    return null;  }  mHeaders=parseHeaders(mPduDataStream);  if (null == mHeaders) {    return null;  }  int messageType=mHeaders.getOctet(PduHeaders.MESSAGE_TYPE);  if (false == checkMandatoryHeader(mHeaders)) {    log("check mandatory headers failed!");    return null;  }  if ((PduHeaders.MESSAGE_TYPE_SEND_REQ == messageType) || (PduHeaders.MESSAGE_TYPE_RETRIEVE_CONF == messageType)) {    mBody=parseParts(mPduDataStream);    if (null == mBody) {      return null;    }  }switch (messageType) {case PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND:    NotificationInd notificationInd=new NotificationInd(mHeaders);  return notificationInd;default :;return null;}}  }
class C{  public void testConstrCharIntIntMathContextException1(){  char value[]={'-','1','2','3','8','0','.','4','7','3','8','E','-','4','2','3'};  int offset=3;  int len=120;  int precision=4;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  try {    new BigDecimal(value,offset,len,mc);    fail("NumberFormatException has not been thrown");  } catch (  NumberFormatException e) {  }}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  super.removePropertyChangeListener(listener);}  }
class C{  public static void main(String[] args){  try {    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());    parseCommandLine(args);    System.out.println("=====  Test Runner  -  JTS Topology Suite (Version " + JTSVersion.CURRENT_VERSION + ")  =====");    TopologyTestApp topologyTestApp=new TopologyTestApp(testFiles());    if (args.length == 0) {      displayHelp();      System.exit(0);    }    if (commandLine.hasOption(OPT_GEOMOP)) {      String geomOpClassname=commandLine.getOption(OPT_GEOMOP).getArg(0);      geometryOp=GeometryOperationLoader.createGeometryOperation(TopologyTestApp.class.getClassLoader(),geomOpClassname);      if (geometryOp == null) {        System.exit(0);      }      System.out.println("Using Geometry Operation: " + geomOpClassname);    }    if (commandLine.hasOption(OPT_GEOMFUNC)) {      String geomFuncClassname=commandLine.getOption(OPT_GEOMFUNC).getArg(0);      System.out.println("Adding Geometry Functions from: " + geomFuncClassname);      funcRegistry.add(geomFuncClassname);    }    if (commandLine.hasOption(OPT_TESTCASEINDEX)) {      int testCaseIndexToRun=commandLine.getOption(OPT_TESTCASEINDEX).getArgAsInt(0);      topologyTestApp.engine.setTestCaseIndexToRun(testCaseIndexToRun);      System.out.println("Running test case # " + testCaseIndexToRun);    }    if (!commandLine.hasOption("GUI")) {      topologyTestApp.engine.setTestFiles(topologyTestApp.getAllTestFiles());      topologyTestApp.engine.run();      System.out.println(topologyTestApp.report());      System.exit(0);    } else {      topologyTestApp.setVisible(true);    }  } catch (  Exception e) {    e.printStackTrace();    System.exit(0);  }}  }
class C{  public void println(char x){  return;}  }
class C{  public void resolve(ClassScope scope){  super.resolve(scope);  internalResolve(scope);}  }
class C{  public static Notification info(String title,String message,boolean clear){  return show(title,message,MessageType.INFO,clear ? 3000 : 0);}  }
class C{  public List<MType> build(){  isClean=true;  if (!isMessagesListMutable && builders == null) {    return messages;  }  boolean allMessagesInSync=true;  if (!isMessagesListMutable) {    for (int i=0; i < messages.size(); i++) {      Message message=messages.get(i);      SingleFieldBuilder<MType,BType,IType> builder=builders.get(i);      if (builder != null) {        if (builder.build() != message) {          allMessagesInSync=false;          break;        }      }    }    if (allMessagesInSync) {      return messages;    }  }  ensureMutableMessageList();  for (int i=0; i < messages.size(); i++) {    messages.set(i,getMessage(i,true));  }  messages=Collections.unmodifiableList(messages);  isMessagesListMutable=false;  return messages;}  }
class C{  public static String valueOf(Object value){  return value != null ? value.toString() : "null";}  }
class C{  public int read(char[] cbuf,int off,int len) throws IOException {  int num=0;  int val;  while (num < len) {    if ((val=is.read()) < 0) {      return (num != 0) ? num : -1;    }switch (val & 0xf0) {case 0xc0:case 0xd0:      cbuf[off++]=(char)(((val & 0x1f) << 6) | (is.read() & 0x3f));    break;case 0xe0:  cbuf[off++]=(char)(((val & 0x0f) << 12) | ((is.read() & 0x3f) << 6) | (is.read() & 0x3f));break;case 0xf0:throw new UnsupportedEncodingException("UTF-32 (or UCS-4) encoding not supported.");default :cbuf[off++]=(char)val;break;}num++;}return num;}  }
class C{  @Override public JSONObject asJson(){  return jsonMessage;}  }
class C{  public AwaitExpression createAwaitExpression(){  AwaitExpressionImpl awaitExpression=new AwaitExpressionImpl();  return awaitExpression;}  }
class C{  public ExchangeRate fetch(final Currency source,final Currency target,final Date date){  final List<Entry> rates=data_.get(hash(source,target));  final int i=matchValidateAt(rates,date);  return i == rates.size() - 1 ? rates.get(i).rate : null;}  }
class C{  private void waitForJmsQueueToStartTrigger() throws InterruptedException {  Thread.sleep(1000);}  }
class C{  public static Geometry simplify(Geometry geom,double distanceTolerance){  DouglasPeuckerSimplifier tss=new DouglasPeuckerSimplifier(geom);  tss.setDistanceTolerance(distanceTolerance);  return tss.getResultGeometry();}  }
class C{  void addLabel(Component label){  if (labels == null) {    labels=new Vector();  }  labels.addElement(label);}  }
class C{  public static void main(String[] args){  Log.printLine("Starting CloudSimExample1...");  try {    int num_user=1;    Calendar calendar=Calendar.getInstance();    boolean trace_flag=false;    CloudSim.init(num_user,calendar,trace_flag);    @SuppressWarnings("unused") Datacenter datacenter0=createDatacenter("Datacenter_0");    DatacenterBroker broker=createBroker();    int brokerId=broker.getId();    vmlist=new ArrayList<Vm>();    int vmid=0;    int mips=1000;    long size=10000;    int ram=512;    long bw=1000;    int pesNumber=1;    String vmm="Xen";    Vm vm=new Vm(vmid,brokerId,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    Vm vm1=new Vm(1,brokerId,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    Vm vm2=new Vm(2,brokerId,mips,pesNumber,ram,bw,size,vmm,new CloudletSchedulerTimeShared());    vmlist.add(vm);    vmlist.add(vm1);    vmlist.add(vm2);    broker.submitVmList(vmlist);    cloudletList=new ArrayList<Cloudlet>();    int id=0;    long length=400000;    long fileSize=300;    long outputSize=300;    UtilizationModel utilizationModel=new UtilizationModelFull();    Cloudlet cloudlet=new Cloudlet(id,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet.setUserId(brokerId);    cloudlet.setVmId(vmid);    Cloudlet cloudlet1=new Cloudlet(1,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet1.setUserId(brokerId);    cloudlet1.setVmId(1);    Cloudlet cloudlet2=new Cloudlet(2,length,pesNumber,fileSize,outputSize,utilizationModel,utilizationModel,utilizationModel);    cloudlet2.setUserId(brokerId);    cloudlet2.setVmId(2);    cloudletList.add(cloudlet);    cloudletList.add(cloudlet1);    cloudletList.add(cloudlet2);    broker.submitCloudletList(cloudletList);    CloudSim.startSimulation();    CloudSim.stopSimulation();    List<Cloudlet> newList=broker.getCloudletReceivedList();    printCloudletList(newList);    Log.printLine("CloudSimExample1 finished!");  } catch (  Exception e) {    e.printStackTrace();    Log.printLine("The simulation has been terminated due to an unexpected error");  }}  }
class C{  private InsnList convertInsns(ArrayList<SsaInsn> ssaInsns){  int insnCount=ssaInsns.size();  InsnList result=new InsnList(insnCount);  for (int i=0; i < insnCount; i++) {    result.set(i,ssaInsns.get(i).toRopInsn());  }  result.setImmutable();  return result;}  }
class C{  public void drawBytes(byte data[],int offset,int length,int x,int y){  DebugGraphicsInfo info=info();  Font font=graphics.getFont();  if (debugLog()) {    info().log(toShortString() + " Drawing bytes at: " + new Point(x,y));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawBytes(data,offset,length,x,y);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawBytes(data,offset,length,x,y);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawBytes(data,offset,length,x,y);}  }
class C{  private static void debugPrintln(String msg){  if (debug) {    System.err.println(CLASS_NAME + ":" + msg);  }}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public static OMText read(DataInputStream dis,LinkProperties propertiesBuffer) throws IOException {  OMText text=null;  float lat=0;  float lon=0;  int x=0;  int y=0;  int just=0;  String string, font;  int renderType=dis.readByte();switch (renderType) {case RENDERTYPE_OFFSET:    lat=dis.readFloat();  lon=dis.readFloat();case RENDERTYPE_XY:x=dis.readInt();y=dis.readInt();break;case RENDERTYPE_LATLON:default :lat=dis.readFloat();lon=dis.readFloat();}just=dis.readByte();LinkProperties properties=(LinkProperties)LinkProperties.read(dis,propertiesBuffer).clone();string=properties.getProperty(LPC_LINKTEXTSTRING);font=properties.getProperty(LPC_LINKTEXTFONT);if (string == null) string="";if (font == null) font=DEFAULT_FONT;switch (renderType) {case RENDERTYPE_OFFSET:text=new OMText(lat,lon,x,y,string,OMText.rebuildFont(font),just);break;case RENDERTYPE_XY:text=new OMText(x,y,string,OMText.rebuildFont(font),just);break;case RENDERTYPE_LATLON:default :text=new OMText(lat,lon,string,OMText.rebuildFont(font),just);}if (text != null) {properties.setProperties(text);text.setBaseline(PropUtils.intFromProperties(properties,LPC_LINKTEXTBASELINE,BASELINE_BOTTOM));text.setRotationAngle((double)ProjMath.degToRad(PropUtils.floatFromProperties(properties,LPC_LINKROTATION,0.0f)));}return text;}  }
class C{  public boolean print_table(){  return soot.PhaseOptions.getBoolean(options,"print-table");}  }
class C{  public mat4 negate(){  for (int i=0; i < 16; ++i) {    this.m[i]=-this.m[i];  }  return this;}  }
class C{  public boolean isShowHiddenDirectories(){  return showHiddenDirectories;}  }
class C{  public boolean isNullable(){  return m_isNullable;}  }
class C{  public static boolean runSubOps(List<MethodOperation> methodOperations,MethodContext methodContext) throws MiniLangException {  Assert.notNull("methodOperations",methodOperations,"methodContext",methodContext);  for (  MethodOperation methodOperation : methodOperations) {    if (!methodOperation.exec(methodContext)) {      return false;    }  }  return true;}  }
class C{  public int optInt(String key,int defaultValue){  try {    return this.getInt(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static void assertArrayEqual(short[] expected,short[] actual){  if (verbose) {    log("assertArrayEqual(" + arrayToString(expected) + ", "+ arrayToString(actual)+ ")");  }  if (expected.length != actual.length) {    TestUtils.assertBool(false);  }  for (int index=0; index < expected.length; ++index) {    assertEqual(expected[index],actual[index]);  }}  }
class C{  public static String formatEntityKey(EntityDataModel entityDataModel,Object entity) throws ODataEdmException {  Key entityKey=getAndCheckEntityType(entityDataModel,entity.getClass()).getKey();  List<PropertyRef> keyPropertyRefs=entityKey.getPropertyRefs();  try {    if (keyPropertyRefs.size() == 1) {      return getKeyValueFromPropertyRef(entityDataModel,entity,keyPropertyRefs.get(0));    } else     if (keyPropertyRefs.size() > 1) {      List<String> processedKeys=new ArrayList<>();      for (      PropertyRef propertyRef : keyPropertyRefs) {        processedKeys.add(String.format("%s=%s",propertyRef.getPath(),getKeyValueFromPropertyRef(entityDataModel,entity,propertyRef)));      }      return processedKeys.stream().map(null).collect(Collectors.joining(","));    } else {      LOG.error("Not possible to retrieve entity key for entity " + entity);      throw new ODataEdmException("Entity key is not found for " + entity);    }  } catch (  IllegalAccessException e) {    LOG.error("Not possible to retrieve entity key for entity " + entity);    throw new ODataEdmException("Not possible to retrieve entity key for entity " + entity,e);  }}  }
class C{  public void testCountOrderBy(){  cleanTable();  populateTable();  From from=new Select().from(MockModel.class).where("intField = ?",1).orderBy("intField ASC");  final List<MockModel> list=from.execute();  final int count=from.count();  assertEquals(2,count);  assertEquals(list.size(),count);}  }
class C{  @RequestMapping(value="/users",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Transactional @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<ManagedUserDTO> updateUser(@RequestBody ManagedUserDTO managedUserDTO) throws URISyntaxException {  log.debug("REST request to update User : {}",managedUserDTO);  Optional<User> existingUser=userRepository.findOneByEmail(managedUserDTO.getEmail());  if (existingUser.isPresent() && (!existingUser.get().getId().equals(managedUserDTO.getId()))) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("user-management","emailexists","E-mail already in use")).body(null);  }  existingUser=userRepository.findOneByLogin(managedUserDTO.getLogin());  if (existingUser.isPresent() && (!existingUser.get().getId().equals(managedUserDTO.getId()))) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("user-management","userexists","Login already in use")).body(null);  }  return userRepository.findOneById(managedUserDTO.getId()).map(null).orElseGet(null);}  }
class C{  public int downloadManagerUid(){  try {    PackageManager pm=mContext.getPackageManager();    ApplicationInfo appInfo=pm.getApplicationInfo(DOWNLOAD_MANAGER_PKG_NAME,PackageManager.GET_META_DATA);    return appInfo.uid;  } catch (  NameNotFoundException e) {    Log.d(LOG_TAG,"Did not find the package for the download service.");    return -1;  }}  }
class C{  public static void growShrink(final Component c,int duration){  c.growShrink(duration);}  }
class C{  public void verifyStatistics(){}  }
class C{  public static void main(String[] args){  Generator<IPoint> g=new UniformGenerator();  for (int n=10; n < 100; n++) {    for (int t=0; t < 10; t++) {      System.out.println(n + "...");      IPoint[] max=g.generate(n);      IPoint[] hull=new ConvexHullScan().compute(max);      IPoint[] points=AklToussaint.reduce(max);      IPoint[] hullRegular=new ConvexHullScan().compute(points);      points=AklToussaint.reduce(max);      IPoint hullSlow[]=new SlowHull().compute(points);      if (hull.length != hullSlow.length) {        for (int j=0; j < max.length; j++) {          System.out.println(max[j]);        }        System.err.println("We have a discrepancy...");        System.exit(-1);      }      assert (hull.length == hullRegular.length);      assert (hull.length == hullSlow.length);      for (int i=0; i < hull.length; i++) {        assert (hull[i].equals(hullRegular[i]));      }      for (int i=0; i < hull.length; i++) {        boolean match=false;        for (int j=0; j < hullSlow.length; j++) {          if (hull[i].equals(hullSlow[i])) {            match=true;            break;          }        }        if (!match) {          System.err.println("Slow failed to have point:" + hull[i]);          System.exit(-1);        }      }    }  }}  }
class C{  private void writeResponseHeaderToField(Record record,Response response) throws StageException {  if (record.has(conf.headerOutputField)) {    throw new StageException(Errors.HTTP_11,conf.headerOutputField);  }  Map<String,Field> headers=new HashMap<>(response.getStringHeaders().size());  for (  Map.Entry<String,List<String>> entry : response.getStringHeaders().entrySet()) {    if (!entry.getValue().isEmpty()) {      String firstValue=entry.getValue().get(0);      headers.put(entry.getKey(),Field.create(firstValue));    }  }  record.set(conf.headerOutputField,Field.create(headers));}  }
class C{  public IntVector subvector(IntVector index){  IntVector v=new IntVector(index.size());  for (int i=0; i < index.size(); i++)   v.V[i]=V[index.V[i]];  return v;}  }
class C{  public ServiceNotPublishedException(Object[] params){  super(params);}  }
class C{  public void expireReplay(String instanceId) throws StorageCenterAPIException {  Parameters params=new Parameters();  RestResult rr=restClient.post(String.format("StorageCenter/ScReplay/%s/Expire",instanceId),params.toJson());  if (!checkResults(rr)) {    String msg=String.format("Error expiring replay %s: %s",instanceId,rr.getErrorMsg());    LOG.warn(msg);    throw new StorageCenterAPIException(msg);  }}  }
class C{  public boolean canBeFound(){  return SettingsManager.getConfig().getBoolean(category.getConfigPath() + "." + getConfigName()+ ".Can-Be-Found-In-Treasure-Chests");}  }
class C{  public static <T>T[] concat(T[] base,T[] other,int appendCount){  T[] newArray=copyFrom(base,base.length + appendCount);  System.arraycopy(other,0,newArray,base.length,appendCount);  return newArray;}  }
class C{  private void processInstanceContentEvent(InstancesContentEvent instContentEvent){  this.numBatches++;  this.contentEventList.add(instContentEvent);  if (this.numBatches == 1 || this.numBatches > 4) {    this.processInstances(this.contentEventList.remove(0));  }  if (instContentEvent.isLastEvent()) {    while (!contentEventList.isEmpty()) {      processInstances(contentEventList.remove(0));    }  }}  }
class C{  private void checkParameters() throws SSLException {  assert keyStoreType != null;  assert proto != null;  checkNullParameter(keyStoreFilePath,"keyStoreFilePath");  checkNullParameter(keyStorePwd,"keyStorePwd");  if (trustMgrs == null) {    if (trustStoreFilePath == null)     throw new SSLException("Failed to initialize SSL context (either trustStoreFilePath or " + "trustManagers must be provided)"); else     checkNullParameter(trustStorePwd,"trustStorePwd");  }}  }
class C{  private void placeGroups(){  startRow();  placeChild(mCloseButton,Gravity.END);  placeGroup(mMainGroup);  int customGroupWidth=0;  if (mCustomGroup != null) {    updateCustomGroupForRow(ROW_MAIN);    customGroupWidth=getWidthWithMargins(mCustomGroup);  }  int buttonGroupWidth=0;  if (mButtonGroup != null) {    updateButtonGroupForRow(ROW_MAIN);    buttonGroupWidth=getWidthWithMargins(mButtonGroup);  }  boolean customGroupOnMainRow=customGroupWidth <= availableWidth();  boolean buttonGroupOnMainRow=customGroupWidth + buttonGroupWidth <= availableWidth();  if (mCustomGroup != null) {    if (customGroupOnMainRow) {      mCustomGroup.gravity=(mButtonGroup != null && buttonGroupOnMainRow) ? Gravity.START : Gravity.END;    } else {      startRow();      updateCustomGroupForRow(ROW_OTHER);    }    placeGroup(mCustomGroup);  }  if (mButtonGroup != null) {    if (!buttonGroupOnMainRow) {      startRow();      updateButtonGroupForRow(ROW_OTHER);      if (mCustomGroup == null && mMessageTextView != null) {        LayoutParams lp=(LayoutParams)mMessageTextView.getLayoutParams();        int messageBottom=lp.top + mMessageTextView.getMeasuredHeight();        mTop=Math.max(mTop,messageBottom + 2 * mMargin);      }    }    placeGroup(mButtonGroup);    if (mCustomButton != null && !buttonGroupOnMainRow) {      LayoutParams primaryButtonLP=(LayoutParams)mPrimaryButton.getLayoutParams();      LayoutParams customButtonLP=(LayoutParams)mCustomButton.getLayoutParams();      LayoutParams messageLP=(LayoutParams)mMessageView.getLayoutParams();      if (customButtonLP.start >= messageLP.start) {        customButtonLP.start=messageLP.start;      } else {        customButtonLP.start=mMargin;      }      if (!mButtonGroup.isStacked) {        customButtonLP.top=primaryButtonLP.top + (mPrimaryButton.getMeasuredHeight() - mCustomButton.getMeasuredHeight()) / 2;      }    }  }  startRow();  if (buttonGroupOnMainRow) {    int layoutHeight=mBottom;    for (int i=0; i < getChildCount(); i++) {      View child=getChildAt(i);      int extraSpace=layoutHeight - child.getMeasuredHeight();      LayoutParams lp=(LayoutParams)child.getLayoutParams();      lp.top=extraSpace / 2;    }  }}  }
class C{  public void stitch(int stitchLevel){  if (child == null) {    if (stitchLevel == level) {      stitchSides();    }  } else   if (stitchLevel > level) {    for (int i=0; i < child.length; ++i) {      child[i].stitch(stitchLevel);    }  }}  }
class C{  public TriggeredObserver(Uri uri){  this(uri,true);}  }
class C{  public static RealVariable newInt(int lowerBound,int upperBound){  return new RealVariable(lowerBound,Math.nextAfter((double)(upperBound + 1),Double.NEGATIVE_INFINITY));}  }
class C{  public final TestSubscriber assertNoErrors(){  boolean passed=true;  String prefix="";  if (done.getCount() != 0) {    prefix="Subscriber still running! ";  }  int s=errors.size();  if (s != 0) {    fail(prefix,"Error(s) present: " + errors,errors);    fail("errors exist");  }  pass("no errors",passed);  return this;}  }
class C{  public void verifyAccountWithToken(String verificationToken,String signalingKey,int axolotlRegistrationId,boolean voice) throws IOException {  this.pushServiceSocket.verifyAccountToken(verificationToken,signalingKey,axolotlRegistrationId,voice);}  }
class C{  public static String toEnvName(String kafkaConfigKey){  return KAFKA_OVERRIDE_PREFIX + kafkaConfigKey.replace('.','_').toUpperCase();}  }
class C{  public static double[][] deleteEmpty(double[][] matrix){  int numberOfRows=matrix.length;  int numberOfColumns=matrix[0].length;  double[] rowSums=new double[numberOfRows];  double[] columnSums=new double[numberOfColumns];  for (int row=0; row < numberOfRows; row++) {    for (int column=0; column < numberOfColumns; column++) {      rowSums[row]+=matrix[row][column];      columnSums[column]+=matrix[row][column];    }  }  int nonZeroRowCounter=0;  for (int row=0; row < numberOfRows; row++) {    if (rowSums[row] > 0) {      nonZeroRowCounter++;    }  }  int nonZeroColumnCounter=0;  for (int column=0; column < numberOfColumns; column++) {    if (columnSums[column] > 0) {      nonZeroColumnCounter++;    }  }  double[][] result=new double[nonZeroRowCounter][nonZeroColumnCounter];  int rowIndex=0;  for (int row=0; row < numberOfRows; row++) {    if (rowSums[row] > 0) {      int columnIndex=0;      for (int column=0; column < numberOfColumns; column++) {        if (columnSums[column] > 0) {          result[rowIndex][columnIndex]=matrix[row][column];          columnIndex++;        }      }      rowIndex++;    }  }  return result;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case FunctionblockPackage.RETURN_OBJECT_TYPE__RETURN_TYPE:    setReturnType((Type)null);  return;}super.eUnset(featureID);}  }
class C{  public static CSVRow createEmptyLine(final int nbOfColumns,final IRowChangesListener listener){  final List<String> line=new LinkedList<String>();  for (int i=0; i < nbOfColumns; i++) {    line.add("");  }  return new CSVRow(line,listener);}  }
class C{  @Override protected void forceInsertAttributeAt(int position){  int index=locateIndex(position);  m_NumAttributes++;  if ((index >= 0) && (m_Indices[index] == position)) {    int[] tempIndices=new int[m_Indices.length + 1];    System.arraycopy(m_Indices,0,tempIndices,0,index);    tempIndices[index]=position;    for (int i=index; i < m_Indices.length; i++) {      tempIndices[i + 1]=m_Indices[i] + 1;    }    m_Indices=tempIndices;  } else {    int[] tempIndices=new int[m_Indices.length + 1];    System.arraycopy(m_Indices,0,tempIndices,0,index + 1);    tempIndices[index + 1]=position;    for (int i=index + 1; i < m_Indices.length; i++) {      tempIndices[i + 1]=m_Indices[i] + 1;    }    m_Indices=tempIndices;  }}  }
class C{  public boolean applyOptions(){  StartupSettings.RUN_ON_STARTUP.setValue(CHECK_BOX.isSelected());  if (OSUtils.isMacOSX())   MacOSXUtils.setLoginStatus(CHECK_BOX.isSelected()); else   if (WindowsUtils.isLoginStatusAvailable())   WindowsUtils.setLoginStatus(CHECK_BOX.isSelected());  return false;}  }
class C{  public void testFilteredClassifier(){}  }
class C{  public static SpecialCaseMap parse(String s){  SpecialCaseMap spec=null;  String[] tokens=new String[REQUIRED_FIELDS];  if (s != null && s.length() != 0 && s.charAt(0) != '#') {    try {      int x=0, tokenStart=0, tokenEnd=0;      for (x=0; x < REQUIRED_FIELDS - 1; x++) {        tokenEnd=s.indexOf(';',tokenStart);        tokens[x]=s.substring(tokenStart,tokenEnd);        tokenStart=tokenEnd + 1;      }      tokens[x]=s.substring(tokenStart);      if (tokens[FIELD_CONDITIONS].indexOf(';') == -1) {        spec=new SpecialCaseMap();        spec.setCharSource(parseChar(tokens[FIELD_SOURCE]));        spec.setUpperCaseMap(parseCaseMap(tokens[FIELD_UPPERCASE]));        spec.setLowerCaseMap(parseCaseMap(tokens[FIELD_LOWERCASE]));        spec.setTitleCaseMap(parseCaseMap(tokens[FIELD_TITLECASE]));        spec.setLocale(parseLocale(tokens[FIELD_CONDITIONS]));        spec.setContext(parseContext(tokens[FIELD_CONDITIONS]));      }    } catch (    Exception e) {      spec=null;      System.out.println("Error parsing spec line.");    }  }  return spec;}  }
class C{  public void test_addSubjectAlternativeNameLintLjava_lang_String(){  int[] types={GeneralName.OTHER_NAME,GeneralName.DNS_NAME,GeneralName.X400_ADDR,GeneralName.DIR_NAME,GeneralName.EDIP_NAME,GeneralName.UR_ID,GeneralName.IP_ADDR,GeneralName.REG_ID};  for (int i=0; i < types.length; i++) {    try {      new X509CertSelector().addSubjectAlternativeName(types[i],"-0xDFRF");      fail("IOException expected for type: " + types[i]);    } catch (    IOException expected) {    }  }}  }
class C{  public List<String> listSnapshotsForVolume(String volumeId){  _log.info("CinderApi - start listSnapshotsForVolume");  List<String> snapshotIdList=new ArrayList<String>();  SnapshotListResponse listRes=listSnapshots();  if (null != listRes) {    for (int i=0; i < listRes.snapshots.length; i++) {      String snapshotsVolumeId=listRes.snapshots[i].volume_id;      if (volumeId.equals(snapshotsVolumeId)) {        snapshotIdList.add(listRes.snapshots[i].id);      }    }  }  _log.info("CinderApi - end listSnapshotsForVolume");  return snapshotIdList;}  }
class C{  public Name addAll(int posn,List<Rdn> suffixRdns){  unparsed=null;  for (int i=0; i < suffixRdns.size(); i++) {    Object obj=suffixRdns.get(i);    if (!(obj instanceof Rdn)) {      throw new IllegalArgumentException("Entry:" + obj + "  not a valid type;suffix list entries must be of type Rdn");    }    rdns.add(i + posn,(Rdn)obj);  }  return this;}  }
class C{  public ViewData layoutNextView(View view,ViewData previousViewData){  if (SHOW_LOGS)   Log.v(TAG,">> layoutNextView, previousViewData " + previousViewData);  Pair<Integer,Integer> halfWidthHeight=mCallback.getHalfWidthHeightPair(view);  Point viewCenter=mQuadrantHelper.findNextViewCenter(previousViewData,halfWidthHeight.first,halfWidthHeight.second);  if (SHOW_LOGS)   Log.v(TAG,"layoutNextView, viewCenter " + viewCenter);  performLayout(view,viewCenter,halfWidthHeight.first,halfWidthHeight.second);  previousViewData.updateData(view,viewCenter);  if (SHOW_LOGS)   Log.v(TAG,"<< layoutNextView");  return previousViewData;}  }
class C{  public static Object restoreFromStream(final ByteArrayInputStream bis) throws IOException, ClassNotFoundException {  final ObjectInput os=new ObjectInputStream(bis);  return os.readObject();}  }
class C{  public static NbtInputStream fromInflated(File in,NbtLimiter limiter) throws IOException {  return fromInflated(new FileInputStream(in),limiter);}  }
class C{  private void resize(int newSize){  char[][] newKeys=new char[newSize][];  int[] newValues=new int[newSize];  _mask=newKeys.length - 1;  for (int i=0; i < _keys.length; i++) {    char[] key=_keys[i];    if (key == null)     continue;    int hash=hash(key,key.length) & _mask;    while (true) {      if (newKeys[hash] == null) {        newKeys[hash]=_keys[i];        newValues[hash]=_values[i];        break;      }      hash=(hash + 1) & _mask;    }  }  _keys=newKeys;  _values=newValues;}  }
class C{  public void messageArrived(MqttPublish sendMessage){  final String methodName="messageArrived";  if (mqttCallback != null || callbacks.size() > 0) {synchronized (spaceAvailable) {      while (running && !quiescing && messageQueue.size() >= INBOUND_QUEUE_SIZE) {        try {          log.fine(CLASS_NAME,methodName,"709");          spaceAvailable.wait(200);        } catch (        InterruptedException ex) {        }      }    }    if (!quiescing) {      messageQueue.addElement(sendMessage);synchronized (workAvailable) {        log.fine(CLASS_NAME,methodName,"710");        workAvailable.notifyAll();      }    }  }}  }
class C{  public PartitionNotAvailableException(){  super();}  }
class C{  public Object clone(){  OpenIntDoubleHashMap copy=(OpenIntDoubleHashMap)super.clone();  copy.table=(int[])copy.table.clone();  copy.values=(double[])copy.values.clone();  copy.state=(byte[])copy.state.clone();  return copy;}  }
class C{  public static Container center(Component center){  return Container.encloseIn(new BorderLayout(),center,BorderLayout.CENTER);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getUseStatement_();}  }
class C{  public static boolean bind(Context context,ServiceConnection connection){  return context.bindService(new Intent(context,JockeyService.class),connection,Context.BIND_AUTO_CREATE);}  }
class C{  public static boolean hasRepositoryConfig(Repository repository,String repositoryID) throws RepositoryException, RepositoryConfigException {  RepositoryConnection con=repository.getConnection();  try {    return getIDStatement(con,repositoryID) != null;  }  finally {    con.close();  }}  }
class C{  private static void updateNetwork(WifiManager wifiManager,WifiConfiguration config){  Integer foundNetworkID=findNetworkInExistingConfig(wifiManager,config.SSID);  if (foundNetworkID != null) {    Log.i(TAG,"Removing old configuration for network " + config.SSID);    wifiManager.removeNetwork(foundNetworkID);    wifiManager.saveConfiguration();  }  int networkId=wifiManager.addNetwork(config);  if (networkId >= 0) {    if (wifiManager.enableNetwork(networkId,true)) {      Log.i(TAG,"Associating to network " + config.SSID);      wifiManager.saveConfiguration();    } else {      Log.w(TAG,"Failed to enable network " + config.SSID);    }  } else {    Log.w(TAG,"Unable to add network " + config.SSID);  }}  }
class C{  public DtlsHandshakeException(String message,AlertDescription description,AlertLevel level,InetSocketAddress peer){  super(message,peer);  if (description == null) {    throw new NullPointerException("Description must not be null");  } else   if (level == null) {    throw new NullPointerException("Level must not be null");  } else {    this.description=description;    this.level=level;  }}  }
class C{  public PrintStream(OutputStream out){  this(out,false);}  }
class C{  public Vertex processCorrection(Vertex input,Vertex correction,Vertex speaker,Vertex target,Vertex conversation,Network network){  if (!shouldCorrect(input,speaker)) {    throw new BotException("You do not have permission to correct");  }  Vertex originalQuestion=null;  Vertex originalQuestionInput=null;  if (target != null) {    originalQuestionInput=getLastInputInConversation(conversation,speaker,2);    if (originalQuestionInput != null) {      originalQuestion=originalQuestionInput.mostConscious(Primitive.INPUT);    }  }  if (originalQuestion == null) {    log("Correction missing question",Level.FINE,correction);    return correction;  }  Vertex wrongResponseInput=originalQuestionInput.mostConscious(Primitive.RESPONSE);  Vertex previousQuestionInput=originalQuestionInput.getRelationship(Primitive.QUESTION);  boolean wasCorrect=addCorrection(originalQuestionInput,originalQuestion,wrongResponseInput,correction,previousQuestionInput,network);  originalQuestionInput.addRelationship(Primitive.RESPONSE,input);  input.addRelationship(Primitive.QUESTION,originalQuestionInput);  log("Correction question",Level.FINE,originalQuestion);  log("Correction response",Level.FINE,correction);  Vertex quotient=getLastQuotient(network);  if (!wasCorrect && (quotient != null) && !quotient.isPinned()) {    Vertex state=getLastState(network);    log("Correcting quotient",Level.FINE,quotient,state);    Relationship relationship=state.getRelationship(Primitive.QUOTIENT,quotient);    if ((relationship == null) || (relationship.getCorrectness() < 0.5)) {      originalQuestion.removeRelationship(Primitive.RESPONSE,quotient);      network.checkReduction(originalQuestion);      originalQuestion.inverseAssociateAll(Primitive.SYNONYM,quotient,Primitive.RESPONSE);    } else {      relationship.setCorrectness(relationship.getCorrectness() / 2);      removeSentencePreviousMeta(relationship,previousQuestionInput,network);    }  }  return correction;}  }
class C{  private String arrayToString(Object[] array){  String str="";  for (int i=0; i < array.length; i++) {    str+=array[i].toString();    if (i != array.length - 1)     str+=",";  }  return str;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.279 -0400",hash_original_method="0064360AB1AB3F05FE92D2335A446B5F",hash_generated_method="26CD8A537B8C09100AF720689779985A") public String decode(String value) throws DecoderException {  if (value == null) {    return null;  }  try {    return decodeText(value);  } catch (  UnsupportedEncodingException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  void close(){  _client.destroy();}  }
class C{  @SuppressWarnings({"SimplifiableIfStatement"}) public final boolean isForbiddenByTiers(String var1,String var2){  if (var1.equals(var2)) {    throw new IllegalArgumentException();  }  Integer tier1=tierMap.get(var1);  Integer tier2=tierMap.get(var2);  if ((tier1 == null) || (tier2 == null)) {    return false;  } else   if (tier1.equals(tier2) && isTierForbiddenWithin(tier1)) {    return true;  } else {    return tier1 > tier2;  }}  }
class C{  private void calcStackSize(List<BarEntry> yVals){  for (int i=0; i < yVals.size(); i++) {    float[] vals=yVals.get(i).getVals();    if (vals != null && vals.length > mStackSize)     mStackSize=vals.length;  }}  }
class C{  public boolean nextPage() throws SQLException {  if (populatecallcount == 0) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.nextpage").toString());  }  onFirstPage=false;  if (callWithCon) {    crsReader.setStartPosition(endPos);    crsReader.readData((RowSetInternal)this);    resultSet=null;  } else {    populate(resultSet,endPos);  }  return pagenotend;}  }
class C{  public int id(){  return this.shardId;}  }
class C{  public void testReadEmpty1() throws Exception {  LogFile tf=LogHelper.createLogFile("testReadEmpty1.dat",3);  tf.close();  LogFile tfro=LogHelper.openExistingFileForRead("testReadEmpty1.dat");  LogRecord logRec=tfro.readRecord(LogFile.NO_WAIT);  assertTrue("Record from empty log is empty",logRec.isEmpty());  assertFalse("Record is not truncated",logRec.isTruncated());  try {    LogRecord logRec2=tfro.readRecord(2000);    throw new Exception("Timeout did not occur with no data: " + logRec2.toString());  } catch (  LogTimeoutException e) {  }  tfro.close();}  }
class C{  @Override public final ByteBufferIndexInput slice(String sliceDescription,long offset,long length){  if (offset < 0 || length < 0 || offset + length > this.length) {    throw new IllegalArgumentException("slice() " + sliceDescription + " out of bounds: offset="+ offset+ ",length="+ length+ ",fileLength="+ this.length+ ": "+ this);  }  return buildSlice(sliceDescription,offset,length);}  }
class C{  public RemoteAtRequest(XBeeAddress16 dest16,String command){  this(dest16,command,null);  this.setApplyChanges(false);}  }
class C{  Set<Class<?>> flattenHierarchy(Class<?> concreteClass){  Set<Class<?>> classes=flattenHierarchyCache.get(concreteClass);  if (classes == null) {    classes=getClassesFor(concreteClass);    flattenHierarchyCache.put(concreteClass,classes);  }  return classes;}  }
class C{  public RankedObservation(double value,int group){  super(value,group);}  }
class C{  @Override public IType fromFacetType(){  return Types.CONTAINER.of(Types.GEOMETRY);}  }
class C{  public boolean isDisposed(){  Object oo=get_Value(COLUMNNAME_IsDisposed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public PlayerProfile(String name,UUID uuid,List<PlayerProperty> properties){  checkNotNull(uuid,"uuid must not be null");  checkNotNull(properties,"properties must not be null");  if (null == name) {    PlayerProfile profile=ProfileCache.getProfile(uuid);    name=profile != null ? profile.getName() : null;  }  this.name=name;  uniqueId=uuid;  this.properties=properties;}  }
class C{  @Override public void tearDown() throws Exception {  super.tearDown();  if (backend != null)   tearDownBackend(backend);  backend=null;}  }
class C{  @Override public int compareTo(final InstallmentReceiptTuple other){  return installment.compareTo(other.installment);}  }
class C{  public static void loadContainedConverters(Class<?> containerClass){  for (  Class<?> clz : containerClass.getClasses()) {    try {      if ((clz.getModifiers() & Modifier.ABSTRACT) == 0) {        Object value;        try {          value=clz.getConstructor().newInstance();        } catch (        NoSuchMethodException e) {          continue;        }        if (value instanceof ConverterLoader) {          ConverterLoader loader=(ConverterLoader)value;          loader.loadConverters();        }      }    } catch (    Exception e) {      Debug.logError(e,module);    }  }}  }
class C{  private UriResult findExistingOrCreateNewUri(File formFile) throws TaskCancelledException {  Cursor cursor=null;  Uri uri=null;  String mediaPath;  boolean isNew;  String formFilePath=formFile.getAbsolutePath();  mediaPath=FileUtils.constructMediaPath(formFilePath);  FileUtils.checkMediaPath(new File(mediaPath));  try {    String[] selectionArgs={formFile.getAbsolutePath()};    String selection=FormsColumns.FORM_FILE_PATH + "=?";    cursor=Collect.getInstance().getContentResolver().query(FormsColumns.CONTENT_URI,null,selection,selectionArgs,null);    isNew=cursor.getCount() <= 0;    if (isNew) {      ContentValues v=new ContentValues();      v.put(FormsColumns.FORM_FILE_PATH,formFilePath);      v.put(FormsColumns.FORM_MEDIA_PATH,mediaPath);      Log.w(t,"Parsing document " + formFile.getAbsolutePath());      HashMap<String,String> formInfo=FileUtils.parseXML(formFile);      if (isCancelled()) {        throw new TaskCancelledException(formFile,"Form " + formFile.getName() + " was cancelled while it was being parsed.");      }      v.put(FormsColumns.DISPLAY_NAME,formInfo.get(FileUtils.TITLE));      v.put(FormsColumns.JR_VERSION,formInfo.get(FileUtils.VERSION));      v.put(FormsColumns.JR_FORM_ID,formInfo.get(FileUtils.FORMID));      v.put(FormsColumns.SUBMISSION_URI,formInfo.get(FileUtils.SUBMISSIONURI));      v.put(FormsColumns.BASE64_RSA_PUBLIC_KEY,formInfo.get(FileUtils.BASE64_RSA_PUBLIC_KEY));      uri=Collect.getInstance().getContentResolver().insert(FormsColumns.CONTENT_URI,v);      Collect.getInstance().getActivityLogger().logAction(this,"insert",formFile.getAbsolutePath());    } else {      cursor.moveToFirst();      uri=Uri.withAppendedPath(FormsColumns.CONTENT_URI,cursor.getString(cursor.getColumnIndex(FormsColumns._ID)));      mediaPath=cursor.getString(cursor.getColumnIndex(FormsColumns.FORM_MEDIA_PATH));      Collect.getInstance().getActivityLogger().logAction(this,"refresh",formFile.getAbsolutePath());    }  }  finally {    if (cursor != null) {      cursor.close();    }  }  return new UriResult(uri,mediaPath,isNew);}  }
class C{  public static void reverse(final Object[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  Object tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  public void findAndUpdatePreferredPoolsForHost(StorageSystem system,Host host,DbClient dbClient) throws Exception {  Map<String,String> preferredPoolMap=getPreferredPoolMapForHost(system,host,dbClient);  if (ArrayAffinityDiscoveryUtils.updatePreferredPools(host,Sets.newHashSet(system.getId().toString()),dbClient,preferredPoolMap)) {    dbClient.updateObject(host);  }}  }
class C{  public static String urlDecode(String encoded){  int length=encoded.length();  byte[] buff=new byte[length];  int j=0;  for (int i=0; i < length; i++) {    char ch=encoded.charAt(i);    if (ch == '+') {      buff[j++]=' ';    } else     if (ch == '%') {      buff[j++]=(byte)Integer.parseInt(encoded.substring(i + 1,i + 3),16);      i+=2;    } else {      if (SysProperties.CHECK) {        if (ch > 127 || ch < ' ') {          throw new IllegalArgumentException("Unexpected char " + (int)ch + " decoding "+ encoded);        }      }      buff[j++]=(byte)ch;    }  }  return new String(buff,0,j,Constants.UTF8);}  }
class C{  public void flushCache(String rendererID) throws EmptyCacheException {  Log.d(MapTileFilesystemProvider.DEBUGTAG,"Flushing cache for " + rendererID);  final Cursor c=mDatabase.rawQuery("SELECT " + T_FSCACHE_ZOOM_LEVEL + ","+ T_FSCACHE_TILE_X+ ","+ T_FSCACHE_TILE_Y+ ","+ T_FSCACHE_FILESIZE+ " FROM "+ T_FSCACHE+ " WHERE "+ T_FSCACHE_RENDERER_ID+ "='"+ rendererID+ "' ORDER BY "+ T_FSCACHE_TIMESTAMP+ " ASC",null);  final ArrayList<MapTile> deleteFromDB=new ArrayList<MapTile>();  long sizeGained=0;  if (c != null) {    MapTile tileToBeDeleted;    if (c.moveToFirst()) {      do {        final int sizeItem=c.getInt(c.getColumnIndexOrThrow(T_FSCACHE_FILESIZE));        sizeGained+=sizeItem;        tileToBeDeleted=new MapTile(rendererID,c.getInt(c.getColumnIndexOrThrow(T_FSCACHE_ZOOM_LEVEL)),c.getInt(c.getColumnIndexOrThrow(T_FSCACHE_TILE_X)),c.getInt(c.getColumnIndexOrThrow(T_FSCACHE_TILE_Y)));        deleteFromDB.add(tileToBeDeleted);        Log.d(DEBUG_TAG,"flushCache " + tileToBeDeleted.toString());      } while (c.moveToNext());    } else {      c.close();      throw new EmptyCacheException("Cache seems to be empty.");    }    c.close();    for (    MapTile t : deleteFromDB) {      final String[] args=new String[]{"" + t.rendererID,"" + t.zoomLevel,"" + t.x,"" + t.y};      mDatabase.delete(T_FSCACHE,T_FSCACHE_WHERE,args);    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode10.class,args);}  }
class C{  public void testEditTrackInMyTracks() throws IOException {  if (!RunConfiguration.getInstance().getRunSyncTest()) {    return;  }  EndToEndTestUtils.createTrackIfEmpty(3,true);  EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_now),true);  SyncTestUtils.checkFile(EndToEndTestUtils.trackName,true,drive);  String oldTrack=SyncTestUtils.getContentOfFile(SyncTestUtils.getFile(EndToEndTestUtils.trackName,drive),drive);  String oldTrackName=EndToEndTestUtils.trackName;  EndToEndTestUtils.SOLO.clickOnText(EndToEndTestUtils.trackName);  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_edit),true);  String newTrackName=EndToEndTestUtils.TRACK_NAME_PREFIX + "_new" + System.currentTimeMillis();  String newType=EndToEndTestUtils.activityType + newTrackName;  String newDesc="desc" + newTrackName;  instrumentation.waitForIdleSync();  EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.generic_save));  sendKeys(KeyEvent.KEYCODE_DEL);  EndToEndTestUtils.enterTextAvoidSoftKeyBoard(0,newTrackName);  EndToEndTestUtils.enterTextAvoidSoftKeyBoard(1,newType);  EndToEndTestUtils.enterTextAvoidSoftKeyBoard(2,newDesc);  EndToEndTestUtils.SOLO.clickOnButton(trackListActivity.getString(R.string.generic_save));  instrumentation.waitForIdleSync();  EndToEndTestUtils.SOLO.goBack();  instrumentation.waitForIdleSync();  EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_now),true);  SyncTestUtils.checkFile(oldTrackName,false,drive);  SyncTestUtils.checkFile(newTrackName,true,drive);  String newTrack=SyncTestUtils.getContentOfFile(SyncTestUtils.getFile(newTrackName,drive),drive);  assertNotSame(oldTrack,newTrack);  assertTrue(newTrack.indexOf(newTrackName) > 0);  assertTrue(newTrack.indexOf(newType) > 0);  assertTrue(newTrack.indexOf(newDesc) > 0);}  }
class C{  private void sendEmptyMsrpSendRequest(String txId,String to,String from,String msrpMsgId) throws NetworkException {  ByteArrayOutputStream buffer=null;  try {    buffer=new ByteArrayOutputStream(4000);    buffer.reset();    buffer.write(MsrpConstants.MSRP_HEADER.getBytes(UTF8));    buffer.write(MsrpConstants.CHAR_SP);    buffer.write(txId.getBytes(UTF8));    buffer.write((" " + MsrpConstants.METHOD_SEND).getBytes(UTF8));    buffer.write(NEW_LINE);    String toHeader=MsrpConstants.HEADER_TO_PATH + ": " + to+ MsrpConstants.NEW_LINE;    buffer.write(toHeader.getBytes(UTF8));    String fromHeader=MsrpConstants.HEADER_FROM_PATH + ": " + from+ MsrpConstants.NEW_LINE;    buffer.write(fromHeader.getBytes(UTF8));    String msgIdHeader=MsrpConstants.HEADER_MESSAGE_ID + ": " + msrpMsgId+ MsrpConstants.NEW_LINE;    buffer.write(msgIdHeader.getBytes(UTF8));    buffer.write(MsrpConstants.END_MSRP_MSG.getBytes(UTF8));    buffer.write(txId.getBytes(UTF8));    buffer.write(MsrpConstants.FLAG_LAST_CHUNK);    buffer.write(NEW_LINE);    mRequestTransaction=new RequestTransaction(mRcsSettings);    mConnection.sendChunkImmediately(buffer.toByteArray());    mRequestTransaction.waitResponse();    if (!mRequestTransaction.isResponseReceived()) {      throw new NetworkException("Failed to receive transaction response!");    }  } catch (  IOException e) {    throw new NetworkException("Failed to send empty Msrp send request!",e);  } finally {    CloseableUtils.tryToClose(buffer);  }}  }
class C{  public static void readFully(FileChannel file,long pos,ByteBuffer dst){  try {    do {      int len=file.read(dst,pos);      if (len < 0) {        throw new EOFException();      }      pos+=len;    } while (dst.remaining() > 0);    dst.rewind();  } catch (  IOException e) {    long size;    try {      size=file.size();    } catch (    IOException e2) {      size=-1;    }    throw newIllegalStateException(ERROR_READING_FAILED,"Reading from {0} failed; file length {1} " + "read length {2} at {3}",file,size,dst.remaining(),pos,e);  }}  }
class C{  public boolean isStatic(){  return this.isStatic;}  }
class C{  @Override @SuppressWarnings("incomplete-switch") public void channelChanged(ChannelEvent event){  Channel channel=event.getChannel();switch (event.getEvent()) {case NOTIFICATION_ADD:case NOTIFICATION_PROCESSING_START:    if (!mVisibleChannels.contains(channel) && channel.isWithin(getMinFrequency(),getMaxFrequency())) {      mVisibleChannels.add(channel);    }  break;case NOTIFICATION_DELETE:mVisibleChannels.remove(channel);break;case NOTIFICATION_PROCESSING_STOP:if (channel.getChannelType() == ChannelType.TRAFFIC) {mVisibleChannels.remove(channel);}break;case NOTIFICATION_CONFIGURATION_CHANGE:if (mVisibleChannels.contains(channel) && !channel.isWithin(getMinFrequency(),getMaxFrequency())) {mVisibleChannels.remove(channel);}if (!mVisibleChannels.contains(channel) && channel.isWithin(getMinFrequency(),getMaxFrequency())) {mVisibleChannels.add(channel);}break;default :break;}repaint();}  }
class C{  public boolean isCellEditable(int row,int column){  OrderStatus orderStatus=(OrderStatus)this.getValueAt(row,8);  if (null != orderStatus) {    if (OrderStatus.CANCELLED.equals(orderStatus.getCode()) || OrderStatus.FILLED.equals(orderStatus.getCode()) || OrderStatus.INACTIVE.equals(orderStatus.getCode())) {      return false;    }  }  if ((columnNames[column] == SYMBOL) || (columnNames[column] == ORDER_KEY) || (columnNames[column] == STATUS)|| (columnNames[column] == AVG_PRICE)|| (columnNames[column] == FILLED_DATE)|| (columnNames[column] == FILLED_QTY)|| (columnNames[column] == STOP_PRICE)) {    return false;  }  return true;}  }
class C{  public double evaluateClustering(Database db,Relation<? extends NumberVector> rel,Clustering<?> c){  List<? extends Cluster<?>> clusters=c.getAllClusters();  NumberVector[] centroids=new NumberVector[clusters.size()];  int ignorednoise=EvaluateSimplifiedSilhouette.centroids(rel,clusters,centroids,noiseHandling);  final int dim=RelationUtil.dimensionality(rel);  Centroid overallCentroid=new Centroid(dim);  EvaluateVarianceRatioCriteria.globalCentroid(overallCentroid,rel,clusters,centroids,noiseHandling);  double max=0;  for (int i=0; i < centroids.length; i++) {    if (centroids[i] == null && noiseHandling != NoiseHandling.TREAT_NOISE_AS_SINGLETONS) {      continue;    }    for (int j=i + 1; j < centroids.length; j++) {      if (centroids[j] == null && noiseHandling != NoiseHandling.TREAT_NOISE_AS_SINGLETONS) {        continue;      }      if (centroids[i] == null && centroids[j] == null) {        for (DBIDIter iti=clusters.get(i).getIDs().iter(); iti.valid(); iti.advance()) {          for (DBIDIter itj=clusters.get(j).getIDs().iter(); itj.valid(); itj.advance()) {            double dist=distanceFunction.distance(rel.get(iti),rel.get(itj));            max=dist > max ? dist : max;          }        }      } else       if (centroids[i] == null) {        for (DBIDIter iti=clusters.get(i).getIDs().iter(); iti.valid(); iti.advance()) {          double dist=distanceFunction.distance(rel.get(iti),centroids[j]);          max=dist > max ? dist : max;        }      } else       if (centroids[j] == null) {        for (DBIDIter itj=clusters.get(j).getIDs().iter(); itj.valid(); itj.advance()) {          double dist=distanceFunction.distance(centroids[i],rel.get(itj));          max=dist > max ? dist : max;        }      } else {        double dist=distanceFunction.distance(centroids[i],centroids[j]);        max=dist > max ? dist : max;      }    }  }  double a=0, b=0;  Iterator<? extends Cluster<?>> ci=clusters.iterator();  for (int i=0; ci.hasNext(); i++) {    Cluster<?> cluster=ci.next();    if (cluster.size() <= 1 || cluster.isNoise()) {switch (noiseHandling) {case IGNORE_NOISE:        continue;case TREAT_NOISE_AS_SINGLETONS:      for (DBIDIter it=cluster.getIDs().iter(); it.valid(); it.advance()) {        b+=SquaredEuclideanDistanceFunction.STATIC.distance(overallCentroid,rel.get(it));      }    continue;case MERGE_NOISE:  break;}}for (DBIDIter it=cluster.getIDs().iter(); it.valid(); it.advance()) {NumberVector obj=rel.get(it);a+=distanceFunction.distance(centroids[i],obj);b+=distanceFunction.distance(overallCentroid,obj);}}final double pbm=Math.pow((1. / centroids.length) * (b / a) * max,2.);if (LOG.isStatistics()) {LOG.statistics(new StringStatistic(key + ".pbm.noise-handling",noiseHandling.toString()));if (ignorednoise > 0) {LOG.statistics(new LongStatistic(key + ".pbm.ignored",ignorednoise));}LOG.statistics(new DoubleStatistic(key + ".pbm",pbm));}EvaluationResult ev=EvaluationResult.findOrCreate(db.getHierarchy(),c,"Internal Clustering Evaluation","internal evaluation");MeasurementGroup g=ev.findOrCreateGroup("Distance-based Evaluation");g.addMeasure("PBM-Index",pbm,0.,Double.POSITIVE_INFINITY,0.,false);db.getHierarchy().resultChanged(ev);return pbm;}  }
class C{  public void extractFieldTypes(ConnectionSource connectionSource) throws SQLException {  if (fieldTypes == null) {    if (fieldConfigs == null) {      fieldTypes=extractFieldTypes(connectionSource,dataClass,tableName);    } else {      fieldTypes=convertFieldConfigs(connectionSource,tableName,fieldConfigs);    }  }}  }
class C{  public static String toStringMMDDYY(Timestamp v){  if (v != null) {    return new SimpleDateFormat("MM/dd/yyyy").format(v);  }  return null;}  }
class C{  public static String escapeString(String value,boolean noBackslashEscapes){  if (value.indexOf("'") == -1) {    if (noBackslashEscapes) {      return value;    }    if (value.indexOf("\\") == -1) {      return value;    }  }  String escaped=value.replace("'","''");  if (noBackslashEscapes) {    return escaped;  }  return escaped.replace("\\","\\\\");}  }
class C{  @PostConstruct public void initApplication() throws IOException {  if (env.getActiveProfiles().length == 0) {    log.warn("No Spring profile configured, running with default configuration");  } else {    log.info("Running with Spring profile(s) : {}",Arrays.toString(env.getActiveProfiles()));  }}  }
class C{  public double evaluateClustering(Database db,Relation<? extends NumberVector> rel,Clustering<?> c){  List<? extends Cluster<?>> clusters=c.getAllClusters();  NumberVector[] centroids=new NumberVector[clusters.size()];  int ignorednoise=centroids(rel,clusters,centroids,noiseOption);  MeanVariance mssil=new MeanVariance();  Iterator<? extends Cluster<?>> ci=clusters.iterator();  for (int i=0; ci.hasNext(); i++) {    Cluster<?> cluster=ci.next();    if (cluster.size() <= 1) {      mssil.put(0.,cluster.size());      continue;    }    if (cluster.isNoise()) {switch (noiseOption) {case IGNORE_NOISE:        continue;case TREAT_NOISE_AS_SINGLETONS:      mssil.put(0.,cluster.size());    continue;case MERGE_NOISE:  break;}}final NumberVector center=centroids[i];assert (center != null);for (DBIDIter it=cluster.getIDs().iter(); it.valid(); it.advance()) {NumberVector obj=rel.get(it);double a=distance.distance(center,obj);double min=Double.POSITIVE_INFINITY;Iterator<? extends Cluster<?>> cj=clusters.iterator();for (int j=0; cj.hasNext(); j++) {Cluster<?> ocluster=cj.next();if (i == j) {  continue;}NumberVector other=centroids[j];if (other == null) {switch (noiseOption) {case IGNORE_NOISE:    continue;case TREAT_NOISE_AS_SINGLETONS:  for (DBIDIter it2=ocluster.getIDs().iter(); it2.valid(); it2.advance()) {    double dist=distance.distance(rel.get(it2),obj);    min=dist < min ? dist : min;  }continue;case MERGE_NOISE:break;}}double dist=distance.distance(other,obj);min=dist < min ? dist : min;}min=min < Double.POSITIVE_INFINITY ? min : a;mssil.put((min - a) / (min > a ? min : a));}}double penalty=1.;if (penalize && ignorednoise > 0) {penalty=(rel.size() - ignorednoise) / (double)rel.size();}final double meanssil=penalty * mssil.getMean();final double stdssil=penalty * mssil.getSampleStddev();if (LOG.isStatistics()) {LOG.statistics(new StringStatistic(key + ".simplified-silhouette.noise-handling",noiseOption.toString()));if (ignorednoise > 0) {LOG.statistics(new LongStatistic(key + ".simplified-silhouette.ignored",ignorednoise));}LOG.statistics(new DoubleStatistic(key + ".simplified-silhouette.mean",meanssil));LOG.statistics(new DoubleStatistic(key + ".simplified-silhouette.stddev",stdssil));}EvaluationResult ev=EvaluationResult.findOrCreate(db.getHierarchy(),c,"Internal Clustering Evaluation","internal evaluation");MeasurementGroup g=ev.findOrCreateGroup("Distance-based Evaluation");g.addMeasure("Simp. Silhouette +-" + FormatUtil.NF2.format(stdssil),meanssil,-1.,1.,0.,false);db.getHierarchy().resultChanged(ev);return meanssil;}  }
class C{  @SuppressWarnings("unused") private static boolean checkUIFonts(String newFont,String testString){  String[] comps=new String[]{"TextField.font","PasswordField.font","TextArea.font","TextPane.font","EditorPane.font","FormattedTextField.font","Button.font","CheckBox.font","RadioButton.font","ToggleButton.font","ProgressBar.font","ComboBox.font","InternalFrame.titleFont","DesktopIcon.font","TitledBorder.font","Label.font","List.font","TabbedPane.font","Table.font","TableHeader.font","MenuBar.font","Menu.font","Menu.acceleratorFont","MenuItem.font","MenuItem.acceleratorFont","PopupMenu.font","CheckBoxMenuItem.font","CheckBoxMenuItem.acceleratorFont","RadioButtonMenuItem.font","RadioButtonMenuItem.acceleratorFont","Spinner.font","Tree.font","ToolBar.font","OptionPane.messageFont","OptionPane.buttonFont","ToolTip.font"};  boolean displayable=false;  for (int i=0; i < comps.length; i++)   displayable|=checkFont(comps[i],newFont,testString,false);  for (  Map.Entry<Object,Object> next : UIManager.getDefaults().entrySet()) {    if (next.getValue() instanceof Font) {      Font f=(Font)next.getValue();      if (f != null && !newFont.equalsIgnoreCase(f.getName())) {        if (!GUIUtils.canDisplay(f,testString)) {          f=new Font(newFont,f.getStyle(),f.getSize());          if (GUIUtils.canDisplay(f,testString)) {            next.setValue(f);            displayable=true;          }        }      }    }  }  return displayable;}  }
class C{  public boolean hasSectionBeginScript(){  return hasExtension(GwoSectionBeginScript.class);}  }
class C{  Item(final int index,final Item i){  this.index=index;  type=i.type;  intVal=i.intVal;  longVal=i.longVal;  strVal1=i.strVal1;  strVal2=i.strVal2;  strVal3=i.strVal3;  hashCode=i.hashCode;}  }
class C{  public SipTransactionContext sendSipMessageAndWait(SipMessage message) throws PayloadException, NetworkException {  return sendSipMessageAndWait(message,SipManager.sTimeout);}  }
class C{  private static void copy(File inFile,File outFile) throws IOException {  FileInputStream fin=null;  FileOutputStream fout=null;  try {    fin=new FileInputStream(inFile);    fout=new FileOutputStream(outFile);    copy(fin,fout);  }  finally {    try {      if (fin != null)       fin.close();    } catch (    IOException e) {    }    try {      if (fout != null)       fout.close();    } catch (    IOException e) {    }  }}  }
class C{  @Pure public RVMMethod findStaticMethod(Atom memberName,Atom memberDescriptor){  if (VM.VerifyAssertions)   VM._assert(isResolved());  for (  RVMMethod method : getStaticMethods()) {    if (method.getName() == memberName && method.getDescriptor() == memberDescriptor) {      return method;    }  }  return null;}  }
class C{  public synchronized static void stopBackgroundThread(long timeoutMillis){  backgroundThreadMayRun=false;  fifo.notify();  if (backgroundThread != null && timeoutMillis > 0) {    try {      backgroundThread.join(timeoutMillis);    } catch (    InterruptedException e) {    }    backgroundThread=null;  }}  }
class C{  protected LineTag createLineTag(TagTitle tagTitle){  LineTag tag=DOM.createLineTag();  tag.setTagDefinition(this);  tag.setTitle(tagTitle);  return tag;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.888 -0400",hash_original_method="C583E738065B40E214C664AD56CC21CE",hash_generated_method="5F3B8072603ACB325A709E1A3F57BE59") public static IOFileFilter makeDirectoryOnly(IOFileFilter filter){  if (filter == null) {    return DirectoryFileFilter.DIRECTORY;  }  return new AndFileFilter(DirectoryFileFilter.DIRECTORY,filter);}  }
class C{  public static boolean isElementFoldable(ElKey el){  if (!el.isHtml()) {    return false;  }  String cname=el.localName;  return "head".equals(cname) || "body".equals(cname) || "html".equals(cname);}  }
class C{  private void drawMouseOverHighlighting(final Graphics g){  g.setColor(m_colorHighlight);  m_lastHighlightedNibble=getNibbleAtCoordinate(m_lastMouseX,m_lastMouseY);  if (m_lastHighlightedNibble == -1) {    return;  }  final Views lastHighlightedView=m_lastMouseX >= getAsciiViewLeft() ? Views.ASCII_VIEW : Views.HEX_VIEW;  if (lastHighlightedView == Views.HEX_VIEW) {    final Rectangle r=getNibbleBoundsHex(m_lastHighlightedNibble);    g.fillRect((int)r.getX(),(int)r.getY(),(int)r.getWidth(),(int)r.getHeight());  } else   if (lastHighlightedView == Views.ASCII_VIEW) {    final int first=(2 * m_lastHighlightedNibble) / 2;    Rectangle r=getNibbleBoundsHex(first);    g.fillRect((int)r.getX(),(int)r.getY(),(int)r.getWidth(),(int)r.getHeight());    r=getNibbleBoundsHex(first + 1);    g.fillRect((int)r.getX(),(int)r.getY(),(int)r.getWidth(),(int)r.getHeight());  }  final Rectangle r=getByteBoundsAscii(m_lastHighlightedNibble);  g.fillRect((int)r.getX(),(int)r.getY(),(int)r.getWidth(),(int)r.getHeight());}  }
class C{  @Override @SuppressWarnings("unchecked") protected boolean isEqualKey(final Object key1,Object key2){  key2=keyType == ReferenceStrength.HARD ? key2 : ((Reference<K>)key2).get();  return key1 == key2 || key1.equals(key2);}  }
class C{  private void persist(Method method){  if (persist == null) {    persist=getFunction(method);  }}  }
class C{  public ConstAttr(CP val){  this.val=val;}  }
class C{  public static ResourceFilter include(){  return new ResourceFilter(Kind.INCLUDE_ONLY);}  }
class C{  private void handleDoubleClick(final MouseEvent event){  final IFunctionTreeNode selectedNode=(IFunctionTreeNode)TreeHelpers.getNodeAt(this,event.getX(),event.getY());  if (selectedNode == null) {    return;  }  selectedNode.doubleClicked();}  }
class C{  public IntListParameter(OptionID optionID,boolean optional){  super(optionID,optional);}  }
class C{  public void updateCrosshairX(double candidateX,int domainAxisIndex){  double d=Math.abs(candidateX - this.anchorX);  if (d < this.distance) {    this.crosshairX=candidateX;    this.domainAxisIndex=domainAxisIndex;    this.distance=d;  }}  }
class C{  public boolean isAssignableFrom(JClass cl){  return _rawClass.isAssignableFrom(cl);}  }
class C{  public void didRollback(){synchronized (this) {    if (pending != null) {      pending.cancel(false);      pending=null;    }    docsSinceCommit.set(0);  }}  }
class C{  private void populateLinkTypeCombo(final Combo combo){  WIFormLinksControlWILinkFilters wiFilters=null;  WIFormLinksControlExternalLinkFilters externalFilters=null;  if (linksControlOptions != null) {    wiFilters=linksControlOptions.getWorkItemLinkFilters();    externalFilters=linksControlOptions.getExternalLinkFilters();  }  final WorkItemClient client=workItem.getClient();  final RegisteredLinkTypeCollection externalTypes=client.getRegisteredLinkTypes();  final ArrayList<String> listLinkTypeNames=new ArrayList<String>();  final boolean hasWorkItemLinks=client.supportsWorkItemLinkTypes();  WorkItemLinkTypeEnd conflictingWorkItemLinkType=null;  if (hasWorkItemLinks) {    final WorkItemLinkTypeCollection types=client.getLinkTypes();    final WorkItemLinkTypeEndCollection endTypes=types.getLinkTypeEnds();    for (    final WorkItemLinkTypeEnd linkTypeEnd : endTypes) {      final int linkTypeId=linkTypeEnd.getID();      final String linkReferenceName=types.getReferenceName(linkTypeId);      final boolean isForward=types.isForwardLink(linkTypeId);      final boolean isReverse=types.isReverseLink(linkTypeId);      if (wiFilters == null || wiFilters.includes(linkReferenceName,isForward,isReverse)) {        if (!hasConflictingLink(linkTypeEnd,linkCollection)) {          final String displayName=linkTypeEnd.getName();          listLinkTypeNames.add(displayName);          mapDisplayNameToRegisteredName.put(displayName,RegisteredLinkTypeNames.WORKITEM);          mapRelatedNameToLinkTypeEnd.put(displayName,linkTypeEnd);        } else {          conflictingWorkItemLinkType=linkTypeEnd;        }      }    }  }  for (  final RegisteredLinkType externalType : externalTypes) {    if (!hasWorkItemLinks || !externalType.getName().equalsIgnoreCase(RegisteredLinkTypeNames.WORKITEM)) {      if (externalFilters == null || externalFilters.includes(externalType.getName())) {        final String registeredTypeName=externalType.getName();        final String displayName=linkUiRegistry.getLinkControlProvider(registeredTypeName).getDisplayName(externalType);        listLinkTypeNames.add(displayName);        mapDisplayNameToRegisteredName.put(displayName,registeredTypeName);      }    }  }  if (listLinkTypeNames.size() == 0) {    if (conflictingWorkItemLinkType != null) {      throw new WorkItemLinkValidationException(MessageFormat.format(Messages.getString("LinkDialog.AlreadyHaveALinkFormat"),conflictingWorkItemLinkType.getName()));    } else {      throw new WorkItemLinkValidationException(Messages.getString("LinkDialog.NoLinkTypesToAdd"));    }  }  linkTypeDisplayNames=listLinkTypeNames.toArray(new String[listLinkTypeNames.size()]);  Arrays.sort(linkTypeDisplayNames);  selectedIndex=ComboHelper.populateCombo(combo,linkTypeDisplayNames,initialLinkTypeName);  if (selectedIndex != -1) {    processSelectedLinkType();  }}  }
class C{  public boolean isInvisible(){  return invisible;}  }
class C{  public void addTextLabel(double x,String text){  addXTextLabel(x,text);}  }
class C{  public Nosey register(Class<? extends RealmObject> type){  objectTypes.put(type.getSimpleName(),type);  return this;}  }
class C{  public static List propertyDescriptors(int apiLevel){  if (apiLevel == AST.JLS2_INTERNAL) {    return PROPERTY_DESCRIPTORS_2_0;  } else {    return PROPERTY_DESCRIPTORS_3_0;  }}  }
class C{  private static void readThrough(IgniteCache<PersonKey,Person> cache){  PersonKey key=new PersonKey(4);  System.out.println();  System.out.println(">>> Read-through person from database for ID: " + key.getId());  Person p=cache.localPeek(key);  assert p == null;  p=cache.get(new PersonKey(4));  System.out.println(">>> Loaded person from database: " + p);}  }
class C{  public void enableButtons(boolean b){  subButton.setEnabled(b);  unsubButton.setEnabled(b);}  }
class C{  protected static Authentication askForAuthentication(String host,String message){  Authentication authentication=null;  UserValidationDialog ui=new AuthDialog(null,host,message);  if (!canceled) {    ui.open();  }  authentication=ui.getAuthentication();  return authentication;}  }
class C{  public int countNode(XPathContext support,ElemNumber numberElem,int node) throws TransformerException {  int count=0;  Vector counters=getCounters(numberElem);  int nCounters=counters.size();  int target=numberElem.getTargetNode(support,node);  if (DTM.NULL != target) {    for (int i=0; i < nCounters; i++) {      Counter counter=(Counter)counters.elementAt(i);      count=counter.getPreviouslyCounted(support,target);      if (count > 0)       return count;    }    count=0;    if (m_newFound == null)     m_newFound=new NodeSetDTM(support.getDTMManager());    for (; DTM.NULL != target; target=numberElem.getPreviousNode(support,target)) {      if (0 != count) {        for (int i=0; i < nCounters; i++) {          Counter counter=(Counter)counters.elementAt(i);          int cacheLen=counter.m_countNodes.size();          if ((cacheLen > 0) && (counter.m_countNodes.elementAt(cacheLen - 1) == target)) {            count+=(cacheLen + counter.m_countNodesStartCount);            if (cacheLen > 0)             appendBtoFList(counter.m_countNodes,m_newFound);            m_newFound.removeAllElements();            return count;          }        }      }      m_newFound.addElement(target);      count++;    }    Counter counter=new Counter(numberElem,new NodeSetDTM(support.getDTMManager()));    m_countersMade++;    appendBtoFList(counter.m_countNodes,m_newFound);    m_newFound.removeAllElements();    counters.addElement(counter);  }  return count;}  }
class C{  public Set performPutAllAdjunctMessaging(DistributedPutAllOperation dpao,Set cacheOpRecipients,Set adjunctRecipients,FilterRoutingInfo filterRoutingInfo,DirectReplyProcessor processor){  PutAllPRMessage prMsg=dpao.createPRMessagesNotifyOnly(getId());  prMsg.initMessage(this.partitionedRegion,adjunctRecipients,true,processor);  prMsg.setSender(this.partitionedRegion.getDistributionManager().getDistributionManagerId());  Set recipients=null;  Set membersWithRouting=filterRoutingInfo.getMembers();  for (Iterator it=membersWithRouting.iterator(); it.hasNext(); ) {    Object mbr=it.next();    if (!cacheOpRecipients.contains(mbr)) {      if (!adjunctRecipients.contains(mbr)) {        if (recipients == null) {          recipients=new HashSet();          recipients.add(mbr);        }      }    }  }  if (recipients == null) {    recipients=adjunctRecipients;  } else {    recipients.addAll(adjunctRecipients);  }  Set failures=this.partitionedRegion.getDistributionManager().putOutgoing(prMsg);  return failures;}  }
