class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    initializer.visit(v);    condition.visit(v);    increment.visit(v);    body.visit(v);  }}  }
class C{  public RotatingFileTarget(final Formatter formatter,final RotateStrategy rotateStrategy,final FileStrategy fileStrategy) throws IOException {  this(false,formatter,rotateStrategy,fileStrategy);}  }
class C{  public static int indexOfWhitespace(String string){  return indexOfWhitespace(string,0,string.length());}  }
class C{  final public SyntaxTreeNode SetExcept() throws ParseException {  SyntaxTreeNode tn;  Token t;  bpa("Set Except");  t=jj_consume_token(LWB);  addHeir(new SyntaxTreeNode(mn,t));  tn=Expression();  addHeir(tn);  t=jj_consume_token(EXCEPT);  addHeir(new SyntaxTreeNode(mn,t));  tn=SExceptSpec();  addHeir(tn);  label_42:   while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case COMMA:      ;    break;default :  jj_la1[115]=jj_gen;break label_42;}t=jj_consume_token(COMMA);addHeir(new SyntaxTreeNode(mn,t));tn=SExceptSpec();addHeir(tn);}t=jj_consume_token(RWB);addHeir(new SyntaxTreeNode(mn,t));SyntaxTreeNode sn[]=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,N_SetExcept,sn);}throw new Error("Missing return statement in function");}  }
class C{  private void maybePrefetchDnsInBackground(){  if (getIntent() != null && Intent.ACTION_VIEW.equals(getIntent().getAction())) {    String maybeUrl=IntentHandler.getUrlFromIntent(getIntent());    if (maybeUrl != null) {      WarmupManager.getInstance().maybePrefetchDnsForUrlInBackground(this,maybeUrl);    }  }}  }
class C{  private void findBackEdges(BasicBlock bb,int numBlocks,Map<SpaceEffGraphNode,Integer> dfnMap){  Stack<BasicBlock> stack=new Stack<BasicBlock>();  SpaceEffGraphNode.OutEdgeEnumeration[] BBenum=new SpaceEffGraphNode.OutEdgeEnumeration[numBlocks];  stack.push(bb);  recurse:   while (!stack.empty()) {    bb=stack.peek();    SpaceEffGraphNode.OutEdgeEnumeration e=BBenum[bb.getNumber()];    if (e == null) {      if (DEBUG) {        System.out.println(" Initial processing of " + bb);      }      bb.setDfsVisited();      e=bb.outEdges();    } else {      if (DEBUG) {        System.out.println(" Resuming processing of " + bb);      }    }    while (e.hasMoreElements()) {      SpaceEffGraphEdge outEdge=(SpaceEffGraphEdge)e.next();      BasicBlock outbb=(BasicBlock)outEdge.toNode();      if (LTDominatorInfo.isDominatedBy(bb,outbb,ir)) {        outbb.setLoopHeader();        outEdge.setBackEdge();        if (DEBUG) {          System.out.println("backedge from " + dfnMap.get(bb) + " ( "+ bb+ " ) "+ dfnMap.get(outbb)+ " ( "+ outbb+ " ) ");        }      } else       if (!outbb.dfsVisited()) {        if (dfnMap.get(outbb) < dfnMap.get(bb)) {          throw new OptimizingCompilerException("irreducible loop found!");        }        BBenum[bb.getNumber()]=e;        stack.push(outbb);        continue recurse;      }    }    if (DEBUG) {      System.out.println(" Popping");    }    stack.pop();  }}  }
class C{  public String toReParseableString(){  StringBuilder result=new StringBuilder();  if (sParserComment != null)   result.append("# ").append(sParserComment).append("\n");  Helper.append(result,"\nFROM ",mFrom,"","\n\t","");  if (mID != 0)   result.append("\n\tQUERY-TYPE-ID\n\t\t").append(mID);  Helper.append(result,"\nSELECT ",mColumns,"","\n\t","");  Helper.append(result,"\nWHERE ",mWhere,"","\n\t","");  Helper.append(result,"\n\tWHERE-PARAMETERS ",mParameters,"","\n\t\t","");  Helper.append(result,"\nGROUP-BY ",mGroupBy,"","\n\t","");  Helper.append(result,"\nHAVING ",mHaving,"","\n\t","");  Helper.append(result,"\n\tHAVING-PARAMETERS ",mHavingParameters,"","\n\t\t","");  Helper.append(result,"\nORDER-BY ",mOrderBy,"","\n\t","");  if (result.length() == 0)   return null;  return result.toString();}  }
class C{  private Relation<?> addNewRelation(SimpleTypeInformation<?> meta){  @SuppressWarnings("unchecked") SimpleTypeInformation<Object> ometa=(SimpleTypeInformation<Object>)meta;  Relation<?> relation=new MaterializedRelation<>(ometa,ids);  relations.add(relation);  getHierarchy().add(this,relation);  for (  IndexFactory<?,?> factory : indexFactories) {    if (factory.getInputTypeRestriction().isAssignableFromType(meta)) {      @SuppressWarnings("unchecked") final IndexFactory<Object,?> ofact=(IndexFactory<Object,?>)factory;      @SuppressWarnings("unchecked") final Relation<Object> orep=(Relation<Object>)relation;      Index index=ofact.instantiate(orep);      index.initialize();      getHierarchy().add(relation,index);    }  }  return relation;}  }
class C{  public static void uiImpl(){  UIManager.put("control",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("Separator.foreground",new ColorUIResource(new Color(180,180,180)));  UIManager.put("ToolTip.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("Separator.background",new ColorUIResource(Color.white));  UIManager.put("Panel.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("Panel.background",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("Label.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("Label.background",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("ColorChooser.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("ColorChooser.background",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("ColorChooser.swatchesDefaultRecentColor",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("TitledBorder.titleColor",new ColorUIResource(new Color(58,135,173)));  UIManager.put("TitledBorder.border",new BorderUIResource(new BEDashedRoundRecBorder(BeautyEyeLNFHelper.commonFocusedBorderColor)));  UIManager.put("OptionPane.setButtonMargin",false);  UIManager.put("OptionPane.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("OptionPane.background",new ColorUIResource(BeautyEyeLNFHelper.commonBackgroundColor));  UIManager.put("OptionPane.questionIcon",__IconFactory__.getInstance().getOptionPaneQUESTIONIcon());  UIManager.put("OptionPane.warningIcon",__IconFactory__.getInstance().getOptionPaneWARNIcon());  UIManager.put("OptionPane.informationIcon",__IconFactory__.getInstance().getOptionPaneINFOIcon());  UIManager.put("OptionPane.errorIcon",__IconFactory__.getInstance().getOptionPaneERRORIcon());  UIManager.put("SeparatorUI",org.jb2011.lnf.beautyeye.ch_x.BESeparatorUI.class.getName());}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  trimToFileCount();  journalWriter.close();  journalWriter=null;}  }
class C{  public void vetoableChange(PropertyChangeEvent event) throws PropertyVetoException {  getListener().vetoableChange(event);}  }
class C{  Color nextColor(){  int red=Math.min(255,((measurementColor >> 2) & 0x1) * 255 / 1);  int green=Math.min(255,((measurementColor >> 1) & 0x1) * 255 / 1);  int blue=Math.min(255,((measurementColor >> 0) & 0x1) * 255 / 1);  measurementColor++;  return new Color(red,green,blue);}  }
class C{  public Object readObject(Class cl) throws IOException {  if (cl == null || cl == Object.class)   return readObject();  int tag=_offset < _length ? (_buffer[_offset++] & 0xff) : read();switch (tag) {case 'N':    return null;case 'H':{    Deserializer reader=findSerializerFactory().getDeserializer(cl);    return reader.readMap(this);  }case 'M':{  String type=readType();  if ("".equals(type)) {    Deserializer reader;    reader=findSerializerFactory().getDeserializer(cl);    return reader.readMap(this);  } else {    Deserializer reader;    reader=findSerializerFactory().getObjectDeserializer(type,cl);    return reader.readMap(this);  }}case 'C':{readObjectDefinition(cl);return readObject(cl);}case 0x60:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:case 0x66:case 0x67:case 0x68:case 0x69:case 0x6a:case 0x6b:case 0x6c:case 0x6d:case 0x6e:case 0x6f:{int ref=tag - 0x60;int size=_classDefs.size();if (ref < 0 || size <= ref) throw new HessianProtocolException("'" + ref + "' is an unknown class definition");ObjectDefinition def=_classDefs.get(ref);return readObjectInstance(cl,def);}case 'O':{int ref=readInt();int size=_classDefs.size();if (ref < 0 || size <= ref) throw new HessianProtocolException("'" + ref + "' is an unknown class definition");ObjectDefinition def=_classDefs.get(ref);return readObjectInstance(cl,def);}case BC_LIST_VARIABLE:{String type=readType();Deserializer reader;reader=findSerializerFactory().getListDeserializer(type,cl);Object v=reader.readList(this,-1);return v;}case BC_LIST_FIXED:{String type=readType();int length=readInt();Deserializer reader;reader=findSerializerFactory().getListDeserializer(type,cl);Object v=reader.readLengthList(this,length);return v;}case 0x70:case 0x71:case 0x72:case 0x73:case 0x74:case 0x75:case 0x76:case 0x77:{int length=tag - 0x70;String type=readType();Deserializer reader;reader=findSerializerFactory().getListDeserializer(type,cl);Object v=reader.readLengthList(this,length);return v;}case BC_LIST_VARIABLE_UNTYPED:{Deserializer reader;reader=findSerializerFactory().getListDeserializer(null,cl);Object v=reader.readList(this,-1);return v;}case BC_LIST_FIXED_UNTYPED:{int length=readInt();Deserializer reader;reader=findSerializerFactory().getListDeserializer(null,cl);Object v=reader.readLengthList(this,length);return v;}case 0x78:case 0x79:case 0x7a:case 0x7b:case 0x7c:case 0x7d:case 0x7e:case 0x7f:{int length=tag - 0x78;Deserializer reader;reader=findSerializerFactory().getListDeserializer(null,cl);Object v=reader.readLengthList(this,length);return v;}case BC_REF:{int ref=readInt();return _refs.get(ref);}}if (tag >= 0) _offset--;Object value=findSerializerFactory().getDeserializer(cl).readObject(this);return value;}  }
class C{  public void addToInstructors(ClassInstructor classInstr){  String id="";  String pctShare="0";  boolean isLead=false;  if (classInstr != null) {    id=classInstr.getInstructor().getUniqueId().toString();    pctShare=classInstr.getPercentShare().toString();    isLead=classInstr.isLead().booleanValue();  } else {    if (this.instructors.size() == 0) {      pctShare="100";      isLead=true;    }  }  this.instructors.add(id);  this.instrPctShare.add(pctShare);  this.instrLead.add(isLead ? "true" : "false");}  }
class C{  private void whitelistAttributes(){  for (  ElementMetadataRegistryBuilder builder : elements.values()) {    Map<TransformKey,Set<AttributeKey<?>>> whitelistMap=Maps.newLinkedHashMap();    Map<TransformKey,ElementCreatorImpl> creators=builder.getCreators();    for (    Map.Entry<TransformKey,ElementCreatorImpl> entry : creators.entrySet()) {      TransformKey key=entry.getKey();      ElementCreatorImpl element=entry.getValue();      if (element.getAttributeWhitelist() != null) {        whitelistMap.put(key,element.getAttributeWhitelist());      }    }    for (    Map.Entry<TransformKey,Set<AttributeKey<?>>> whitelistEntry : whitelistMap.entrySet()) {      TransformKey key=whitelistEntry.getKey();      Set<AttributeKey<?>> whitelist=whitelistEntry.getValue();      Set<QName> whitelistNames=Sets.newHashSet();      for (      AttributeKey<?> whitelistKey : whitelist) {        whitelistNames.add(whitelistKey.getId());      }      Set<AttributeKey<?>> allAttributes=Sets.newHashSet();      for (      Map.Entry<TransformKey,ElementCreatorImpl> entry : creators.entrySet()) {        if (entry.getKey().matches(key)) {          allAttributes.addAll(entry.getValue().getAttributeSet());        }      }      if (!allAttributes.containsAll(whitelist)) {        Set<AttributeKey<?>> missing=Sets.newHashSet(whitelist);        missing.removeAll(allAttributes);        throw new IllegalStateException("Missing attributes!  Whitelist specified " + missing + " but did not find those attributes.");      }      for (      AttributeKey<?> attribute : allAttributes) {        if (!whitelistNames.contains(attribute.getId())) {          ElementKey<?,?> parent=(ElementKey<?,?>)key.getKey();          build(parent,attribute,key.getContext()).setVisible(false);        }      }    }  }}  }
class C{  public void initDiskCacheAsync(){  if (DEBUG) {    Log.d(TAG,"initDiskCacheAsync " + this);  }  new FileCacheTask(FileCacheTaskType.init_cache).execute();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:31.365 -0500",hash_original_method="C4C5F4E81B860F4CAE8325550F47061B",hash_generated_method="E1B44FC98B1B9EEE86046AB5EFD43859") private void readCentralDir() throws IOException {  long scanOffset=mRaf.length() - ENDHDR;  if (scanOffset < 0) {    throw new ZipException("too short to be Zip");  }  long stopOffset=scanOffset - 65536;  if (stopOffset < 0) {    stopOffset=0;  }  final int ENDHEADERMAGIC=0x06054b50;  while (true) {    mRaf.seek(scanOffset);    if (Integer.reverseBytes(mRaf.readInt()) == ENDHEADERMAGIC) {      break;    }    scanOffset--;    if (scanOffset < stopOffset) {      throw new ZipException("EOCD not found; not a Zip archive?");    }  }  byte[] eocd=new byte[18];  mRaf.readFully(eocd);  BufferIterator it=HeapBufferIterator.iterator(eocd,0,eocd.length,ByteOrder.LITTLE_ENDIAN);  short diskNumber=it.readShort();  short diskWithCentralDir=it.readShort();  short numEntries=it.readShort();  short totalNumEntries=it.readShort();  it.skip(4);  int centralDirOffset=it.readInt();  if (numEntries != totalNumEntries || diskNumber != 0 || diskWithCentralDir != 0) {    throw new ZipException("spanned archives not supported");  }  RAFStream rafs=new RAFStream(mRaf,centralDirOffset);  BufferedInputStream bin=new BufferedInputStream(rafs,4096);  byte[] hdrBuf=new byte[CENHDR];  for (int i=0; i < numEntries; ++i) {    ZipEntry newEntry=new ZipEntry(hdrBuf,bin);    mEntries.put(newEntry.getName(),newEntry);  }}  }
class C{  public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        try {          int b=in.read();          if (b >= 0) {            b3[i]=(byte)b;            numBinaryBytes++;          }        } catch (        java.io.IOException e) {          if (i == 0)           throw e;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0)         break;        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes)     return -1;    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength)       position=-1;      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  private void proc_method(SootMethod meth){  JimpleBody body=null;  try {    body=(JimpleBody)meth.retrieveActiveBody();  } catch (  Exception ex) {    logger.info("Exception retrieving method body {}",ex);    return;  }  Chain<Unit> insts=body.getUnits();  lnums=new LinkedHashMap<Unit,Integer>();  HashMap<Unit,List<Unit>> jump_dests_to_src=new LinkedHashMap<Unit,List<Unit>>();  int inst_offset=0;  for (  Unit src : insts) {    lnums.put(src,inst_offset);    inst_offset++;    Unit target=null;    if (src instanceof GotoStmt)     target=((GotoStmt)src).getTarget(); else     if (src instanceof IfStmt)     target=((IfStmt)src).getTarget();    if (target != null) {      List<Unit> sources=jump_dests_to_src.get(target);      if (sources == null) {        sources=new ArrayList<Unit>();        jump_dests_to_src.put(target,sources);      }      sources.add(src);    }  }  if (logger.isInfoEnabled()) {    logger.info("  processing method {}",meth);    for (    Unit unit : insts) {      if (unit instanceof GotoStmt) {        GotoStmt goto_stmt=(GotoStmt)unit;        logger.info("    {} class {} stmt goto {}",lnums.get(unit),unit.getClass(),lnums.get(goto_stmt.getTarget()));      } else       if (unit instanceof IfStmt) {        IfStmt if_stmt=(IfStmt)unit;        logger.info("    {} class {} stmt if {} goto {}",lnums.get(unit),unit.getClass(),if_stmt.getCondition(),lnums.get(if_stmt.getTarget()));      } else {        logger.info("    {}: class {}, stmt {}",lnums.get(unit),unit.getClass(),unit);      }    }  }  logger.info("  processing traps for {}",meth);  for (  Trap trap : body.getTraps()) {    logger.info("    class {}, trap {}",trap.getClass(),trap);    HashSet<Unit> unit_in_trap=new HashSet<Unit>();    Unit start=trap.getHandlerUnit();    Unit u;    for (u=start; u != null; u=insts.getSuccOf(u)) {      unit_in_trap.add(u);      if (jump_dests_to_src.containsKey(u)) {        for (        Unit src : jump_dests_to_src.get(u))         logger.info("      {} is targeted by {}",toString(u),toString(src));        break;      }      if (u instanceof ReturnStmt)       break;      if (u instanceof GotoStmt)       break;      if (u instanceof IfStmt)       break;    }    logger.info("  begin handler = {}",toString(start));    logger.info("  end handler = {}",toString(u));    CallChainInfo cci=extract_calls(fp,meth,insts,start,u);    cci.calculate_scores();    cci.dump_json(fp,"  ");    fp.println(",");  }}  }
class C{  public static TomcatContextXml parseTomcatConfigXml(InputStream input) throws IOException, JDOMException {  TomcatContextXmlIo io=new TomcatContextXmlIo();  return (TomcatContextXml)io.parseXml(input);}  }
class C{  @Override protected void unpackageClassifier(JarInputStream modelStream) throws IOException {  super.unpackageClassifier(modelStream);  JarStreams.getNextJarEntry(modelStream,"model.svmlight");  model=TreeKernelSvmModel.fromInputStream(modelStream);}  }
class C{  protected void beforeShow(){}  }
class C{  @POST @Path("/validate") @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response validateUserPassword(PasswordValidateParam passwordParam){  checkSecurityContext();  _passwordHandler.getPasswordUtils().validatePasswordParameter(passwordParam);  return Response.noContent().build();}  }
class C{  @VisibleForTesting void invokeSubscriberMethod(Object event) throws InvocationTargetException {  try {    method.invoke(target,checkNotNull(event));  } catch (  IllegalArgumentException e) {    throw new Error("Method rejected target/argument: " + event,e);  }catch (  IllegalAccessException e) {    throw new Error("Method became inaccessible: " + event,e);  }catch (  InvocationTargetException e) {    if (e.getCause() instanceof Error) {      throw (Error)e.getCause();    }    throw e;  }}  }
class C{  @Override public void V(final Object ex,final FormObject formObj,final int actionID){  if (showMethods) {    System.out.println("DefaultActionHandler.V()");  }  javascript.execute(formObj,PdfDictionary.V,actionID,getKeyPressed(ex));}  }
class C{  public SnapshotState state(){  return state;}  }
class C{  final void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=ACC_CONSTRUCTOR | Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE| ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  if (classReaderOffset != 0) {    out.putByteArray(cw.cr.b,classReaderOffset,classReaderLength);    return;  }  int attributeCount=0;  if (code.length > 0) {    ++attributeCount;  }  if (exceptionCount > 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != null) {    ++attributeCount;  }  if (methodParameters != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && annd != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && panns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (code.length > 0) {    int size=12 + code.length + 8 * handlerCount;    if (localVar != null) {      size+=8 + localVar.length;    }    if (localVarType != null) {      size+=8 + localVarType.length;    }    if (lineNumber != null) {      size+=8 + lineNumber.length;    }    if (stackMap != null) {      size+=8 + stackMap.length;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      size+=8 + ctanns.getSize();    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      size+=8 + ictanns.getSize();    }    if (cattrs != null) {      size+=cattrs.getSize(cw,code.data,code.length,maxStack,maxLocals);    }    out.putShort(cw.newUTF8("Code")).putInt(size);    out.putShort(maxStack).putShort(maxLocals);    out.putInt(code.length).putByteArray(code.data,0,code.length);    out.putShort(handlerCount);    if (handlerCount > 0) {      Handler h=firstHandler;      while (h != null) {        out.putShort(h.start.position).putShort(h.end.position).putShort(h.handler.position).putShort(h.type);        h=h.next;      }    }    attributeCount=0;    if (localVar != null) {      ++attributeCount;    }    if (localVarType != null) {      ++attributeCount;    }    if (lineNumber != null) {      ++attributeCount;    }    if (stackMap != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      ++attributeCount;    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      ++attributeCount;    }    if (cattrs != null) {      attributeCount+=cattrs.getCount();    }    out.putShort(attributeCount);    if (localVar != null) {      out.putShort(cw.newUTF8("LocalVariableTable"));      out.putInt(localVar.length + 2).putShort(localVarCount);      out.putByteArray(localVar.data,0,localVar.length);    }    if (localVarType != null) {      out.putShort(cw.newUTF8("LocalVariableTypeTable"));      out.putInt(localVarType.length + 2).putShort(localVarTypeCount);      out.putByteArray(localVarType.data,0,localVarType.length);    }    if (lineNumber != null) {      out.putShort(cw.newUTF8("LineNumberTable"));      out.putInt(lineNumber.length + 2).putShort(lineNumberCount);      out.putByteArray(lineNumber.data,0,lineNumber.length);    }    if (stackMap != null) {      boolean zip=(cw.version & 0xFFFF) >= Opcodes.V1_6;      out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"));      out.putInt(stackMap.length + 2).putShort(frameCount);      out.putByteArray(stackMap.data,0,stackMap.length);    }    if (ClassReader.ANNOTATIONS && ctanns != null) {      out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));      ctanns.put(out);    }    if (ClassReader.ANNOTATIONS && ictanns != null) {      out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));      ictanns.put(out);    }    if (cattrs != null) {      cattrs.put(cw,code.data,code.length,maxLocals,maxStack,out);    }  }  if (exceptionCount > 0) {    out.putShort(cw.newUTF8("Exceptions")).putInt(2 * exceptionCount + 2);    out.putShort(exceptionCount);    for (int i=0; i < exceptionCount; ++i) {      out.putShort(exceptions[i]);    }  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != null) {    out.putShort(cw.newUTF8("Signature")).putInt(2).putShort(cw.newUTF8(signature));  }  if (methodParameters != null) {    out.putShort(cw.newUTF8("MethodParameters"));    out.putInt(methodParameters.length + 1).putByte(methodParametersCount);    out.putByteArray(methodParameters.data,0,methodParameters.length);  }  if (ClassReader.ANNOTATIONS && annd != null) {    out.putShort(cw.newUTF8("AnnotationDefault"));    out.putInt(annd.length);    out.putByteArray(annd.data,0,annd.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (ClassReader.ANNOTATIONS && panns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"));    AnnotationWriter.put(panns,synthetics,out);  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"));    AnnotationWriter.put(ipanns,synthetics,out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  protected Program(String name,boolean parallel,boolean closure){  this(name,parallel,closure,QueryOptions.NONE);}  }
class C{  public void pan(PanEvent evt){  if (logger.isLoggable(Level.FINE)) {    debugmsg("PanEvent: " + evt);  }  float az=evt.getAzimuth() - (float)Math.toDegrees(rotationAngle);  float c=evt.getArcDistance();  if (Float.isNaN(c)) {    projection.pan(az);  } else {    projection.pan(az,c);  }  fireProjectionChanged();}  }
class C{  public void addArrowHead(int directionType,int location){  setArrowHead(new OMArrowHead(directionType,location));}  }
class C{  public RSAKeyLoader(int id,String configHome,boolean defaultKeys){  this.id=id;  this.defaultKeys=defaultKeys;  if (configHome.equals("")) {    path="config" + System.getProperty("file.separator") + "keys"+ System.getProperty("file.separator");  } else {    path=configHome + System.getProperty("file.separator") + "keys"+ System.getProperty("file.separator");  }}  }
class C{  public boolean isFromMockProvider(){  return mIsFromMockProvider;}  }
class C{  public Anonymous_invariant_1_ createAnonymous_invariant_1_(){  Anonymous_invariant_1_Impl anonymous_invariant_1_=new Anonymous_invariant_1_Impl();  return anonymous_invariant_1_;}  }
class C{  final void push(final Object object){  stack.add(object);}  }
class C{  public static NameKey parse(final String str){  final NameKey r=new NameKey();  r.fromString(str);  return r;}  }
class C{  public boolean ensureReplicaInLeaderInitiatedRecovery(final CoreContainer container,final String collection,final String shardId,final ZkCoreNodeProps replicaCoreProps,CoreDescriptor leaderCd,boolean forcePublishState) throws KeeperException, InterruptedException {  final String replicaUrl=replicaCoreProps.getCoreUrl();  if (collection == null)   throw new IllegalArgumentException("collection parameter cannot be null for starting leader-initiated recovery for replica: " + replicaUrl);  if (shardId == null)   throw new IllegalArgumentException("shard parameter cannot be null for starting leader-initiated recovery for replica: " + replicaUrl);  if (replicaUrl == null)   throw new IllegalArgumentException("replicaUrl parameter cannot be null for starting leader-initiated recovery");  boolean nodeIsLive=true;  String replicaNodeName=replicaCoreProps.getNodeName();  String replicaCoreNodeName=((Replica)replicaCoreProps.getNodeProps()).getName();  assert replicaCoreNodeName != null : "No core name for replica " + replicaNodeName;synchronized (replicasInLeaderInitiatedRecovery) {    if (replicasInLeaderInitiatedRecovery.containsKey(replicaUrl)) {      if (!forcePublishState) {        log.debug("Replica {} already in leader-initiated recovery handling.",replicaUrl);        return false;      }    }    if (getZkStateReader().getClusterState().liveNodesContain(replicaNodeName)) {      LeaderInitiatedRecoveryThread lirThread=new LeaderInitiatedRecoveryThread(this,container,collection,shardId,replicaCoreProps,120,leaderCd);      ExecutorService executor=container.getUpdateShardHandler().getUpdateExecutor();      try {        MDC.put("DistributedUpdateProcessor.replicaUrlToRecover",replicaCoreProps.getCoreUrl());        executor.execute(lirThread);      }  finally {        MDC.remove("DistributedUpdateProcessor.replicaUrlToRecover");      }      replicasInLeaderInitiatedRecovery.put(replicaUrl,getLeaderInitiatedRecoveryZnodePath(collection,shardId,replicaCoreNodeName));      log.info("Put replica core={} coreNodeName={} on " + replicaNodeName + " into leader-initiated recovery.",replicaCoreProps.getCoreName(),replicaCoreNodeName);    } else {      nodeIsLive=false;      log.info("Node " + replicaNodeName + " is not live, so skipping leader-initiated recovery for replica: core={} coreNodeName={}",replicaCoreProps.getCoreName(),replicaCoreNodeName);    }  }  return nodeIsLive;}  }
class C{  protected Position(){}  }
class C{  public static void shuffle(double[] a){  int N=a.length;  for (int i=0; i < N; i++) {    int r=i + uniform(N - i);    double temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public CompletableFuture<Long> appendEntries(){  if (context.getClusterState().getRemoteMemberStates().isEmpty())   return CompletableFuture.completedFuture(null);  if (heartbeatFuture == null) {    CompletableFuture<Long> newHeartbeatFuture=new CompletableFuture<>();    heartbeatFuture=newHeartbeatFuture;    heartbeatTime=System.currentTimeMillis();    for (    MemberState member : context.getClusterState().getRemoteMemberStates()) {      appendEntries(member);    }    return newHeartbeatFuture;  } else   if (nextHeartbeatFuture == null) {    nextHeartbeatFuture=new CompletableFuture<>();    return nextHeartbeatFuture;  } else {    return nextHeartbeatFuture;  }}  }
class C{  public static <T extends Throwable>void maybeThrowRuntimeAndSuppress(List<T> exceptions){  T main=null;  for (  T ex : exceptions) {    main=useOrSuppress(main,ex);  }  if (main != null) {    throw new ElasticsearchException(main.getMessage(),main);  }}  }
class C{  public int startPc(int i){  return ByteArray.readU16bit(info,i * 10 + 2);}  }
class C{  private static boolean listsMatch(ListBlock a,ListBlock b){  if (a instanceof BulletList && b instanceof BulletList) {    return equals(((BulletList)a).getBulletMarker(),((BulletList)b).getBulletMarker());  } else   if (a instanceof OrderedList && b instanceof OrderedList) {    return equals(((OrderedList)a).getDelimiter(),((OrderedList)b).getDelimiter());  }  return false;}  }
class C{  @Override public void mouseReleased(MouseEvent evt){  delegate.mouseMoved(evt);}  }
class C{  public static OfbizUrlBuilder from(HttpServletRequest request) throws GenericEntityException, WebAppConfigurationException {  Assert.notNull("request",request);  OfbizUrlBuilder builder=(OfbizUrlBuilder)request.getAttribute("_OFBIZ_URL_BUILDER_");  if (builder == null) {    WebSiteProperties webSiteProps=WebSiteProperties.from(request);    URL url=ConfigXMLReader.getControllerConfigURL(request.getServletContext());    ControllerConfig config=ConfigXMLReader.getControllerConfig(url);    String servletPath=(String)request.getAttribute("_CONTROL_PATH_");    builder=new OfbizUrlBuilder(config,webSiteProps,servletPath);    request.setAttribute("_OFBIZ_URL_BUILDER_",builder);  }  return builder;}  }
class C{  public static int findFirstNonSpaceOffsetInRange(@NotNull CharSequence text,int start,int end){  for (; start < end; start++) {    char c=text.charAt(start);    if (c != ' ' && c != '\t') {      return start;    }  }  return -1;}  }
class C{  @Override public Boolean apply(final RuleEntity ruleEntity,final ViolationEntity violationEntity){  final List<Predicate<ViolationEntity>> predicates=newArrayList();  trimOptional(ruleEntity.getAccountId()).map(null).ifPresent(null);  trimOptional(ruleEntity.getRegion()).map(null).ifPresent(null);  trimOptional(ruleEntity.getViolationTypeEntityId()).map(null).ifPresent(null);  trimOptional(ruleEntity.getImageName()).map(null).ifPresent(null);  trimOptional(ruleEntity.getImageOwner()).map(null).ifPresent(null);  trimOptional(ruleEntity.getApplicationId()).map(null).ifPresent(null);  trimOptional(ruleEntity.getApplicationVersion()).map(null).ifPresent(null);  final Optional<Predicate<ViolationEntity>> whiteListTest=predicates.stream().reduce(null);  return whiteListTest.isPresent() && whiteListTest.get().test(violationEntity);}  }
class C{  public NotificationChain basicSetSymbolTable(SymbolTable newSymbolTable,NotificationChain msgs){  SymbolTable oldSymbolTable=symbolTable;  symbolTable=newSymbolTable;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ImPackage.SCRIPT_IM__SYMBOL_TABLE,oldSymbolTable,newSymbolTable);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void bindTexture(Allocation va,int slot) throws IllegalArgumentException {  mRS.validate();  if ((slot < 0) || (slot >= mTextureCount)) {    throw new IllegalArgumentException("Slot ID out of range.");  }  if (va != null && va.getType().hasFaces() && mTextures[slot] != TextureType.TEXTURE_CUBE) {    throw new IllegalArgumentException("Cannot bind cubemap to 2d texture slot");  }  int id=va != null ? va.getID(mRS) : 0;  mRS.nProgramBindTexture(getID(mRS),slot,id);}  }
class C{  @Override protected final int next(int bits){  return (int)(nextLong() & ((1L << bits) - 1));}  }
class C{  public int writeTelegram(char[] buffer,int type,Object id){  int result=0;  try {    String msg=new String(buffer);    msg+="\n";    wrtr.write(msg.getBytes());    result=buffer.length;  } catch (  Exception ex) {    ex.printStackTrace();  }  return (result);}  }
class C{  @Override public String format(Date date){  return format(date,"short");}  }
class C{  protected int digit(int pos,int base){  char c=ch;  int result=Character.digit(c,base);  if (result >= 0 && c > 0x7f) {    log.error(pos + 1,"illegal.nonascii.digit");    ch="0123456789abcdef".charAt(result);  }  return result;}  }
class C{  public void addProject(String projectPath){  addDependency(project.evaluationDependsOn(projectPath));}  }
class C{  @NoInline private static void throwNewIllegalArgumentException(String str){  throw new IllegalArgumentException(str);}  }
class C{  private void matchX509Certs(CertSelector selector,Collection<Certificate> matches){  for (  Object obj : certSubjects.values()) {    if (obj instanceof X509Certificate) {      X509Certificate cert=(X509Certificate)obj;      if (selector.match(cert)) {        matches.add(cert);      }    } else {      @SuppressWarnings("unchecked") List<X509Certificate> list=(List<X509Certificate>)obj;      for (      X509Certificate cert : list) {        if (selector.match(cert)) {          matches.add(cert);        }      }    }  }}  }
class C{  public Buffer minDistance(String minDistance){  this.minDistance=minDistance;  return this;}  }
class C{  @Override public String toString(){  StringBuilder b=new StringBuilder();  b.append("// <NormalExecution object=");  if (result == null)   b.append("null"); else   b.append("object-of-type-" + result.getClass().getName());  b.append(">;");  return b.toString();}  }
class C{  public KSTest(Vec v){  this.v=v.sortedCopy();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.HEX_LITERAL__VALUE:    return value != VALUE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  static boolean checkCollisionSub(final float[] pVerticesA,final int pVertexOffsetXA,final int pVertexOffsetYA,final int pVertexStrideA,final int pVertexIndexA1,final int pVertexIndexA2,final float[] pVerticesB,final int pVertexCountB,final int pVertexOffsetXB,final int pVertexOffsetYB,final int pVertexStrideB){  final float vertexA1X=VertexUtils.getVertex(pVerticesA,pVertexOffsetXA,pVertexStrideA,pVertexIndexA1);  final float vertexA1Y=VertexUtils.getVertex(pVerticesA,pVertexOffsetYA,pVertexStrideA,pVertexIndexA1);  final float vertexA2X=VertexUtils.getVertex(pVerticesA,pVertexOffsetXA,pVertexStrideA,pVertexIndexA2);  final float vertexA2Y=VertexUtils.getVertex(pVerticesA,pVertexOffsetYA,pVertexStrideA,pVertexIndexA2);  for (int b=pVertexCountB - 2; b >= 0; b--) {    final float vertexB1X=VertexUtils.getVertex(pVerticesB,pVertexOffsetXB,pVertexStrideB,b);    final float vertexB1Y=VertexUtils.getVertex(pVerticesB,pVertexOffsetYB,pVertexStrideB,b);    final float vertexB2X=VertexUtils.getVertex(pVerticesB,pVertexOffsetXB,pVertexStrideB,b + 1);    final float vertexB2Y=VertexUtils.getVertex(pVerticesB,pVertexOffsetYB,pVertexStrideB,b + 1);    if (LineCollisionChecker.checkLineCollision(vertexA1X,vertexA1Y,vertexA2X,vertexA2Y,vertexB1X,vertexB1Y,vertexB2X,vertexB2Y)) {      return true;    }  }  final float vertexB1X=VertexUtils.getVertex(pVerticesB,pVertexOffsetXB,pVertexStrideB,pVertexCountB - 1);  final float vertexB1Y=VertexUtils.getVertex(pVerticesB,pVertexOffsetYB,pVertexStrideB,pVertexCountB - 1);  final float vertexB2X=VertexUtils.getVertex(pVerticesB,pVertexOffsetXB,pVertexStrideB,0);  final float vertexB2Y=VertexUtils.getVertex(pVerticesB,pVertexOffsetYB,pVertexStrideB,0);  if (LineCollisionChecker.checkLineCollision(vertexA1X,vertexA1Y,vertexA2X,vertexA2Y,vertexB1X,vertexB1Y,vertexB2X,vertexB2Y)) {    return true;  }  return false;}  }
class C{  public static void clearCache(Context context){  initCacheMap(context);  mCacheMap.clear();}  }
class C{  public RestResult<Object> postPlain(String url,Object body){  return execute("POST",url,body,Object.class,false);}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public boolean visit(PackageDeclaration node){  return true;}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String pathInfo=request.getPathInfo();switch (pathInfo != null ? pathInfo : "") {case "":    getTodoList(request,response);  break;case "/create":getCreateTodoForm(request,response);break;default :getEditTodoForm(request,response);}}  }
class C{  private static void addId(final StringBuilder buf,final byte[] id){  buf.append("\\Q");  boolean backslash=false;  for (  final byte b : id) {    buf.append((char)(b & 0xFF));    if (b == 'E' && backslash) {      buf.append("\\\\E\\Q");    } else {      backslash=b == '\\';    }  }  buf.append("\\E");}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] concat(T[] first,T[] second){  T[] result=(T[])new Object[first.length + second.length];  System.arraycopy(first,0,result,0,first.length);  System.arraycopy(second,0,result,first.length,second.length);  return result;}  }
class C{  public static <B>Builder<B> builder(){  return new Builder<B>();}  }
class C{  public <A extends Annotation>Expressions buildSpecificFieldExpressions(final PersistentResource resource,final Class<A> annotationClass,final String field,final ChangeSpec changeSpec){  Class<?> resourceClass=resource.getResourceClass();  if (!entityDictionary.entityHasChecksForPermission(resourceClass,annotationClass)) {    return SUCCESSFUL_EXPRESSIONS;  }  final Function<Check,Expression> deferredCheckFn=getDeferredExpressionFor(resource,changeSpec);  final Function<Check,Expression> immediateCheckFn=getImmediateExpressionFor(resource,changeSpec);  final Function<Function<Check,Expression>,Expression> buildExpressionFn=null;  return new Expressions(buildExpressionFn.apply(deferredCheckFn),buildExpressionFn.apply(immediateCheckFn));}  }
class C{  public static boolean checkAndCollapseToken(PsiBuilder b,int l,IElementType targetTokenType,IElementType... sequenceTokenType){  if (sequenceTokenType.length == 0) {    return false;  }  b.getTokenType();  for (int i=0; i < sequenceTokenType.length; i++) {    if (b.rawLookup(i) != sequenceTokenType[i]) {      return false;    }  }  PsiBuilder.Marker m=b.mark();  for (int i=0; i < sequenceTokenType.length; i++) {    b.advanceLexer();  }  m.collapse(targetTokenType);  return true;}  }
class C{  public void debug(boolean enable){  mDebug=enable;  mCacheQueryHandler.debug(enable);}  }
class C{  protected boolean isDirectorySelected(){  return directorySelected;}  }
class C{  public SearchResult(String title,Drawable icon){  this.title=title;  this.icon=icon;}  }
class C{  public VisualRecognition(String versionDate){  super(SERVICE_NAME);  if ((getEndPoint() == null) || getEndPoint().isEmpty()) {    setEndPoint(URL);  }  Validator.notNull(versionDate,"versionDate cannot be null. Use '2016-05-19'");  this.versionDate=versionDate;}  }
class C{  public String rawOutputTipText(){  return "Save raw output (useful for debugging). If set, then output is " + "sent to the destination specified by outputFile";}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  private void buildString(StringBuilder sb,DimensionalNode node){  if (node == null) {    return;  }  DimensionalNode left=node.getBelow();  DimensionalNode right=node.getAbove();  if (left != null) {    buildString(sb,left);  }  sb.append(node.toString());  if (right != null) {    buildString(sb,right);  }}  }
class C{  public ColorLiteral createColorLiteral(){  ColorLiteralImpl colorLiteral=new ColorLiteralImpl();  return colorLiteral;}  }
class C{  public OrderedThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,ThreadFactory threadFactory,IoEventQueueHandler eventQueueHandler){  super(DEFAULT_INITIAL_THREAD_POOL_SIZE,1,keepAliveTime,unit,new SynchronousQueue<Runnable>(),threadFactory,new AbortPolicy());  if (corePoolSize < DEFAULT_INITIAL_THREAD_POOL_SIZE) {    throw new IllegalArgumentException("corePoolSize: " + corePoolSize);  }  if ((maximumPoolSize == 0) || (maximumPoolSize < corePoolSize)) {    throw new IllegalArgumentException("maximumPoolSize: " + maximumPoolSize);  }  super.setCorePoolSize(corePoolSize);  super.setMaximumPoolSize(maximumPoolSize);  if (eventQueueHandler == null) {    this.eventQueueHandler=IoEventQueueHandler.NOOP;  } else {    this.eventQueueHandler=eventQueueHandler;  }}  }
class C{  private WebSocketOutputStream openOutputStream(Socket socket) throws WebSocketException {  try {    return new WebSocketOutputStream(new BufferedOutputStream(socket.getOutputStream()));  } catch (  IOException e) {    throw new WebSocketException(WebSocketError.SOCKET_OUTPUT_STREAM_FAILURE,"Failed to get the output stream from the raw socket: " + e.getMessage(),e);  }}  }
class C{  public boolean hasNumber(){  return getNumber() != null;}  }
class C{  protected static int createSerialNumber(){  return serialNumberSequencer.incrementAndGet();}  }
class C{  public int read(byte b[]) throws IOException {  final int i=super.read(b);  if (i >= 0)   out.write(b,0,i);  return i;}  }
class C{  private void checkPausedOrCanceled(State state) throws StopRequest {  if (mService.getControl() == DownloaderService.CONTROL_PAUSED) {    int status=mService.getStatus();switch (status) {case DownloaderService.STATUS_PAUSED_BY_APP:      throw new StopRequest(mService.getStatus(),"download paused");  }}}  }
class C{  public static boolean evaluate(Context context,Writer writer,String logTag,Reader reader) throws ParseErrorException, MethodInvocationException, ResourceNotFoundException, IOException {  SimpleNode nodeTree=null;  try {    nodeTree=RuntimeSingleton.parse(reader,logTag);  } catch (  ParseException pex) {    throw new ParseErrorException(pex.getMessage());  }  if (nodeTree != null) {    InternalContextAdapterImpl ica=new InternalContextAdapterImpl(context);    ica.pushCurrentTemplateName(logTag);    try {      try {        nodeTree.init(ica,RuntimeSingleton.getRuntimeServices());      } catch (      Exception e) {        RuntimeSingleton.error("Velocity.evaluate() : init exception for tag = " + logTag + " : "+ e);      }      nodeTree.render(ica,writer);    }  finally {      ica.popCurrentTemplateName();    }    return true;  }  return false;}  }
class C{  public AmqpReceiver createReceiver(String address,String selector,boolean noLocal) throws Exception {  return createReceiver(address,selector,noLocal,false);}  }
class C{  public static ScheduledThreadPoolExecutor newScheduledThreadPoolExecutor(int corePoolSize,RejectedExecutionHandler handler){  return newScheduledThreadPoolExecutor(corePoolSize,newNamedThreadFactory(true),handler);}  }
class C{  public ToStringBuilder append(String fieldName,byte value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public void fillAttributeSet(Set attrSet){  attrSet.add(localName);}  }
class C{  @Override public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event){  if (event.getEventType() == AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {    event.getText().clear();    int flags=DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR | DateUtils.FORMAT_SHOW_WEEKDAY;    String dateString=DateUtils.formatDateTime(getContext(),mDateMillis,flags);    event.getText().add(dateString);    return true;  }  return super.dispatchPopulateAccessibilityEvent(event);}  }
class C{  public boolean isHosting(){synchronized (this) {    return this.primaryState == NO_PRIMARY_HOSTING || this.primaryState == OTHER_PRIMARY_HOSTING || this.primaryState == VOLUNTEERING_HOSTING || this.primaryState == BECOMING_HOSTING || this.primaryState == IS_PRIMARY_HOSTING;  }}  }
class C{  public static void unstar(final JFrame parent,final INaviModule[] modules){  for (  final INaviModule module : modules) {    try {      module.getConfiguration().setStared(false);    } catch (    final CouldntSaveDataException e) {      CUtilityFunctions.logException(e);      final String innerMessage="E00081: " + "Module could not be unstared";      final String innerDescription=CUtilityFunctions.createDescription(String.format("The module '%s' could not be unstared.",module.getConfiguration().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The module star was not updated."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,e);    }  }}  }
class C{  protected long checkInstant(long instant,Chronology chronology){  return instant;}  }
class C{  public static String makeSafe(String s){  return (s == null) ? "" : s;}  }
class C{  public boolean isIPVideoCallSupported(){  return mIpVideoCall;}  }
class C{  private void initDeprecatedSupport(){  String gettable=solrConfig.get("admin/gettableFiles",null);  if (gettable != null) {    log.warn("solrconfig.xml uses deprecated <admin/gettableFiles>, Please " + "update your config to use the ShowFileRequestHandler.");    if (getRequestHandler("/admin/file") == null) {      NamedList<String> invariants=new NamedList<>();      Set<String> hide=new HashSet<>();      for (      String file : solrConfig.getResourceLoader().listConfigDir()) {        hide.add(file.toUpperCase(Locale.ROOT));      }      StringTokenizer st=new StringTokenizer(gettable);      while (st.hasMoreTokens()) {        hide.remove(st.nextToken().toUpperCase(Locale.ROOT));      }      for (      String s : hide) {        invariants.add(ShowFileRequestHandler.HIDDEN,s);      }      NamedList<Object> args=new NamedList<>();      args.add("invariants",invariants);      ShowFileRequestHandler handler=new ShowFileRequestHandler();      handler.init(args);      reqHandlers.register("/admin/file",handler);      log.warn("adding ShowFileRequestHandler with hidden files: " + hide);    }  }  String facetSort=solrConfig.get("//bool[@name='facet.sort']",null);  if (facetSort != null) {    log.warn("solrconfig.xml uses deprecated <bool name='facet.sort'>. Please " + "update your config to use <string name='facet.sort'>.");  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void main(final String[] args){  final File f=new File(args[0]);  if (f.exists())   FileUtils.deletedelete(f);  try {    final Records t=new Records(f,8);    final byte[] b=new byte[8];    t.add("01234567".getBytes(),0);    t.add("ABCDEFGH".getBytes(),0);    t.add("abcdefgh".getBytes(),0);    t.add("--------".getBytes(),0);    t.add("********".getBytes(),0);    for (int i=0; i < 1000; i++)     t.add("++++++++".getBytes(),0);    t.add("=======0".getBytes(),0);    t.add("=======1".getBytes(),0);    t.add("=======2".getBytes(),0);    t.cleanLast(b,0);    System.out.println(UTF8.String(b));    t.cleanLast(b,0);    System.out.println(UTF8.String(b));    t.get(1,b,0);    System.out.println(UTF8.String(b));    t.put(1,"AbCdEfGh".getBytes(),0);    t.get(1,b,0);    System.out.println(UTF8.String(b));    t.get(3,b,0);    System.out.println(UTF8.String(b));    t.get(4,b,0);    System.out.println(UTF8.String(b));    System.out.println("size = " + t.size());    t.cleanLast();    final long start=System.currentTimeMillis();    long c=0;    for (int i=0; i < 100000; i++) {      c=t.size();    }    System.out.println("size() needs " + ((System.currentTimeMillis() - start) / 100) + " nanoseconds");    System.out.println("size = " + c);    t.close();  } catch (  final IOException e) {    ConcurrentLog.logException(e);  }}  }
class C{  public BinaryTextFinder(byte[] sequence,BinaryContent aContent){  initSearchHex(sequence);  content=aContent;  bufferPosition=0L;  currentPosition=0L;}  }
class C{  @Override public String toString(){  return String.format("%s - %s",memorySectionStartAddress,memorySectionEndAddress);}  }
class C{  public ImportException(){  super();}  }
class C{  public boolean isDepthMaskEnabled(){  return mDepthMask;}  }
class C{  private void removeAccessibilityApisIfNecessary(){  removeTtsApis();  removeCallbackApis();}  }
class C{  public static Uri generateUriForSentContent(String fileName,String mime,RcsSettings rcsSettings){  String path;  if (MimeManager.isImageType(mime)) {    path=getSentPhotoRootDirectory(rcsSettings);  } else   if (MimeManager.isVideoType(mime)) {    path=getSentVideoRootDirectory(rcsSettings);  } else   if (MimeManager.isAudioType(mime)) {    path=getSentAudioRootDirectory(rcsSettings);  } else {    path=getSentFileRootDirectory(rcsSettings);  }  if (fileName.indexOf('.') == -1) {    throw new RuntimeException("Filename without extension: fileName='" + fileName + "'!");  }  int extPosition=fileName.lastIndexOf('.');  String extension="." + fileName.substring(extPosition + 1);  fileName=fileName.substring(0,extPosition);  String destination=fileName;  int incrementIndex=1;  File generatedFile=new File(path + destination + extension);  while (generatedFile.exists()) {    destination=fileName + '_' + incrementIndex;    generatedFile=new File(path + destination + extension);    incrementIndex++;  }  return Uri.fromFile(generatedFile);}  }
class C{  public final boolean isProxiable(){  return flags[PROXIABLE_TICKET_FLAG];}  }
class C{  protected IntRange(int from,int to,boolean reverse){  this.inclusive=null;  if (from > to) {    throw new IllegalArgumentException("'from' must be less than or equal to 'to'");  }  this.from=from;  this.to=to;  this.reverse=reverse;  checkSize();}  }
class C{  public EditSessionBuilder(@Nonnull World world){  checkNotNull(world);  this.world=world;}  }
class C{  public static @Nullable String lookupTag(List<LanguageRange> priorityList,Collection<String> tags){  return null;}  }
class C{  public void updateVehicleStatistics(MultiPolygon studyArea){  setAverageActivitiesPerChain();  setAverageChainDuration();  setAverageChainDistance();  if (studyArea != null) {    setStudyAreaActivities(studyArea);  }}  }
class C{  protected SparseObjectMatrix2D(int rows,int columns,AbstractIntObjectMap elements,int rowZero,int columnZero,int rowStride,int columnStride){  setUp(rows,columns,rowZero,columnZero,rowStride,columnStride);  this.elements=elements;  this.isNoView=false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:32.273 -0500",hash_original_method="9E2C0918A44EC11D2232D0B603F66A6B",hash_generated_method="0138C4AD160C9AAF1F0B41D5F85236C8") @Override public float floatValue(){  return value;}  }
class C{  public int addOutput(){  int index=outputs.size();  outputs.add(Functions.discard());  return index;}  }
class C{  public void flip(int bitIndex){  if (bitIndex < 0)   throw new IndexOutOfBoundsException("bitIndex < 0: " + bitIndex);  int wordIndex=wordIndex(bitIndex);  expandTo(wordIndex);  words[wordIndex]^=(1L << bitIndex);  recalculateWordsInUse();  checkInvariants();}  }
class C{  public Collection engineGenerateCertificates(InputStream inStream) throws CertificateException {  throw new UnsupportedOperationException("not yet.");}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("LdapConnCfg[");  buffer.append("engine = ").append(m_engine);  buffer.append(", provider = ").append(m_provider);  buffer.append(", url = ").append(m_url);  buffer.append(", user = ").append(m_user);  buffer.append(", pwd = ").append(m_pwd);  buffer.append(", pool = ").append(m_pool);  buffer.append(", poolTimeOut = ").append(m_poolTO);  buffer.append("]");  return buffer.toString();}  }
class C{  private void swapLetters(StringBuilder text){  int length=text.codePointCount(0,text.length());  if (length < 2) {    return;  }  int index=Rand.rand(length - 1);  int chrIndex=text.offsetByCodePoints(0,index);  int chr=text.codePointAt(chrIndex);  int toRemove=Character.charCount(chr);  for (int i=0; i < toRemove; i++) {    text.deleteCharAt(chrIndex);  }  text.insert(chrIndex + Character.charCount(text.codePointAt(chrIndex)),new StringBuilder().appendCodePoint(chr));}  }
class C{  public void devolverUnidadesDocumentales(ArrayList udocs) throws ConsultaActionNotAllowedException {  try {    getGestionPrestamosBI().devolverUnidadesDocumentales(udocs);  } catch (  PrestamoActionNotAllowedException panae) {    throw new ConsultaActionNotAllowedException(panae.getCodError(),panae.getMotivo());  }}  }
class C{  public int length(){  return _toString.length();}  }
class C{  public Query rewrite(Query original) throws IOException {  Query query=original;  for (Query rewrittenQuery=query.rewrite(reader); rewrittenQuery != query; rewrittenQuery=query.rewrite(reader)) {    query=rewrittenQuery;  }  return query;}  }
class C{  private boolean ManageInputArguments(){  CustomLogger.log("I begin to parse the command line, your arguments (size=" + args.length + ") are :");  for (int i=0; i < args.length; i++) {    CustomLogger.log("Main args : " + args[i]);  }  printer.jumpLine();  CustomLogger.log("Then I analyse them");  if (args.length == 0) {    CustomLogger.log("No arguments found dude, I print you the help :");    printer.printHelp();    return true;  }  if (args[0].equalsIgnoreCase(OPTION_VERSION) || args[0].equalsIgnoreCase(OPTION_VERSION2)) {    CustomLogger.log("You want to find the version of the tool, here it is:");    printer.printVersion();    return true;  }  if (args[0].equalsIgnoreCase(OPTION_HELP) || args[0].equalsIgnoreCase(OPTION_HELP2)) {    CustomLogger.log("You want to see the help :");    printer.printHelp();    return true;  }  return false;}  }
class C{  public int findMostCrowdedPoint(){  double minimumDistance=Double.POSITIVE_INFINITY;  int minimumIndex=-1;  for (int i=0; i < distanceMatrix.size(); i++) {    List<Pair<Integer,Double>> distances=distanceMatrix.get(i);    Pair<Integer,Double> point=distances.get(0);    if (point.getSecond() < minimumDistance) {      minimumDistance=point.getSecond();      minimumIndex=i;    } else     if (point.getSecond() == minimumDistance) {      for (int k=0; k < distances.size(); k++) {        double kdist1=distances.get(k).getSecond();        double kdist2=distanceMatrix.get(minimumIndex).get(k).getSecond();        if (kdist1 < kdist2) {          minimumIndex=i;          break;        } else         if (kdist2 < kdist1) {          break;        }      }    }  }  return minimumIndex;}  }
class C{  public InlineMenuRow rowAt(int index){  return rows.get(index);}  }
class C{  public Double(double width,double height){  setSize(width,height);}  }
class C{  public LongIterator(long[] primitiveArray){  super(primitiveArray);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public synchronized Throwable initCause(Throwable cause){  myCause=cause;  return this;}  }
class C{  public void testDocValuesMatch() throws Exception {  assertU(adoc("id","1","floatdv","2","intdv","3","doubledv","4","longdv","5","datedv","1995-12-31T23:59:59.999Z","stringdv","b"));  assertU(adoc("id","2","floatdv","5","intdv","4","doubledv","3","longdv","2","datedv","1997-12-31T23:59:59.999Z","stringdv","a"));  assertU(adoc("id","3","floatdv","3","intdv","1","doubledv","2","longdv","1","datedv","1996-12-31T23:59:59.999Z","stringdv","c"));  assertU(adoc("id","4","floatdv","3","intdv","1","doubledv","2","longdv","1","datedv","1996-12-31T23:59:59.999Z","stringdv","car"));  assertU(commit());  assertQ(req("q","stringdv:car","sort","id asc"),"//*[@numFound='1']","//result/doc[1]/str[@name='id'][.=4]");  assertQ(req("q","stringdv:[b TO d]","sort","id asc"),"//*[@numFound='3']","//result/doc[1]/str[@name='id'][.=1]","//result/doc[2]/str[@name='id'][.=3]","//result/doc[3]/str[@name='id'][.=4]");  assertQ(req("q","stringdv:c*","sort","id asc"),"//*[@numFound='2']","//result/doc[1]/str[@name='id'][.=3]","//result/doc[2]/str[@name='id'][.=4]");  assertQ(req("q","stringdv:c?r","sort","id asc"),"//*[@numFound='1']","//result/doc[1]/str[@name='id'][.=4]");  assertQ(req("q","stringdv:/c[a-b]r/","sort","id asc"),"//*[@numFound='1']","//result/doc[1]/str[@name='id'][.=4]");  assertQ(req("q","floatdv:3","sort","id asc"),"//*[@numFound='2']","//result/doc[1]/str[@name='id'][.=3]","//result/doc[2]/str[@name='id'][.=4]");  assertQ(req("q","floatdv:[2 TO 3]","sort","id asc"),"//*[@numFound='3']","//result/doc[1]/str[@name='id'][.=1]","//result/doc[2]/str[@name='id'][.=3]","//result/doc[3]/str[@name='id'][.=4]");  assertQ(req("q","intdv:1","sort","id asc"),"//*[@numFound='2']","//result/doc[1]/str[@name='id'][.=3]","//result/doc[2]/str[@name='id'][.=4]");  assertQ(req("q","intdv:[3 TO 4]","sort","id asc"),"//*[@numFound='2']","//result/doc[1]/str[@name='id'][.=1]","//result/doc[2]/str[@name='id'][.=2]");  assertQ(req("q","longdv:1","sort","id asc"),"//*[@numFound='2']","//result/doc[1]/str[@name='id'][.=3]","//result/doc[2]/str[@name='id'][.=4]");  assertQ(req("q","longdv:[1 TO 2]","sort","id asc"),"//*[@numFound='3']","//result/doc[1]/str[@name='id'][.=2]","//result/doc[2]/str[@name='id'][.=3]","//result/doc[3]/str[@name='id'][.=4]");}  }
class C{  private List<PlatformIdent> loadIdentsFromDB(Collection<Long> ids){  if (CollectionUtils.isEmpty(ids)) {    return Collections.emptyList();  }  List<PlatformIdent> platformIdents=new ArrayList<>();  for (  Long id : ids) {    PlatformIdent platformIdent=load(id);    if (null != platformIdent) {      Hibernate.initialize(platformIdent.getSensorTypeIdents());      Hibernate.initialize(platformIdent.getJmxDefinitionDataIdents());      Hibernate.initialize(platformIdent.getMethodIdents());      for (      MethodIdent methodIdent : platformIdent.getMethodIdents()) {        Hibernate.initialize(methodIdent.getMethodIdentToSensorTypes());      }      platformIdents.add(platformIdent);    }  }  for (  PlatformIdent platformIdent : platformIdents) {    platformIdentCache.markClean(platformIdent);  }  return platformIdents;}  }
class C{  private void endHost(){  String host=popString();  ManagedEntityConfig config=(ManagedEntityConfig)stack.peek();  config.setHost(host);}  }
class C{  private Vocabulary loadFromFile(File localFile) throws InvalidConfigException {  Preconditions.checkNotNull(localFile);  Preconditions.checkState(localFile.exists());  Closer closer=Closer.create();  try {    InputStream fileIn=closer.register(new FileInputStream(localFile));    Vocabulary v=vocabFactory.build(fileIn);    v.setModified(new Date(localFile.lastModified()));    log.info("Successfully loaded vocabulary: " + v.getUriString());    return v;  } catch (  IOException e) {    log.error("Can't access local vocabulary file (" + localFile.getAbsolutePath() + ")",e);    throw new InvalidConfigException(InvalidConfigException.TYPE.INVALID_VOCABULARY,"Can't access local vocabulary file");  }catch (  SAXException e) {    log.error("Can't parse local extension file (" + localFile.getAbsolutePath() + ")",e);    throw new InvalidConfigException(InvalidConfigException.TYPE.INVALID_VOCABULARY,"Can't parse local vocabulary file");  }catch (  ParserConfigurationException e) {    log.error("Can't create sax parser",e);    throw new InvalidConfigException(InvalidConfigException.TYPE.INVALID_VOCABULARY,"Can't create sax parser");  } finally {    try {      closer.close();    } catch (    IOException e) {      log.debug("Failed to close input stream on vocabulary file",e);    }  }}  }
class C{  public static CCLabelAtlas label(CharSequence theString,String charmapfile,int w,int h,char c){  return new CCLabelAtlas(theString,charmapfile,w,h,c);}  }
class C{  public void stackedView(){  sensorMatrixNode.setVisible(true);  sensorMatrixNode.raiseToTop();  sensorMatrixNode.setOffset(sensorMatrixNode.getWidth() * -0.1d,sensorMatrixNode.getHeight() * 0.1d);  if (pixelMatrixNode.hasFocus()) {    pixelMatrixNode.setFocus(false);  }  if (!selectionEventHandlerInstalled) {    selectionEventHandlerInstalled=true;    addInputEventListener(selectionEventHandler);  }  centerCamera();}  }
class C{  public boolean isModelVersionSupported(String modelVersion){  Version version=Version.parse(modelVersion);  return MODEL_VERSION_SUPPORTED.compareTo(version) <= 0;}  }
class C{  public static synchronized void copySynchronized(final File src,final File dst) throws IOException {  if (src == null || !src.exists() || !src.canRead())   throw new IOException("IOException (copy file): source file does not exists or not readable");  if (!isWritable(dst,true))   throw new IOException("IOException (copy file): destination file not writable");  final FileInputStream fis=new FileInputStream(src);  final FileOutputStream fos=new FileOutputStream(dst);  final InputStream in=new BufferedInputStream(fis);  final BufferedOutputStream out=new BufferedOutputStream(fos);  final byte[] buf=new byte[1024];  int len;  IOException e=null;  try {    while ((len=in.read(buf)) > 0)     out.write(buf,0,len);  } catch (  IOException e1) {    e=e1;  }  try {    in.close();  } catch (  IOException ignored) {  }  try {    fis.close();  } catch (  IOException ignored) {  }  try {    out.flush();    out.close();  } catch (  IOException ignored) {  }  try {    fos.flush();    fos.close();  } catch (  IOException ignored) {  }  sync(fos);  if (e != null)   throw e;}  }
class C{  public BasicSourcefireParserTest() throws Exception {  super();}  }
class C{  protected synchronized void loadHeaders() throws MessagingException {  if (headers != null) {  } else   if (source != null) {    try {      InputStream in=source.getInputStream();      try {        headers=createInternetHeaders(in);      }  finally {        IOUtils.closeQuietly(in);      }    } catch (    IOException ioe) {      throw new MessagingException("Unable to parse headers from stream: " + ioe.getMessage(),ioe);    }  } else {    throw new MessagingException("loadHeaders called for a message with no source, contentStream or stream");  }}  }
class C{  private void paintCheckIconEnabledAndSelected(Graphics2D g,int width,int height){  Shape s=shapeGenerator.createCheckMark(0,0,width,height);  g.setPaint(iconEnabledSelected);  g.fill(s);}  }
class C{  private void saveUrlToPreference(String url){  PreferenceManager.getDefaultSharedPreferences(mActivity).edit().putString(PREF_LAST_USED_URL,url).apply();}  }
class C{  public FourRegisterDecodedInstruction(InstructionCodec format,int opcode,int index,IndexType indexType,int target,long literal,int a,int b,int c,int d){  super(format,opcode,index,indexType,target,literal);  this.a=a;  this.b=b;  this.c=c;  this.d=d;}  }
class C{  public static void json(String json){  json(TAG,json);}  }
class C{  public double eval(double params[]){  return (Math.ceil(params[0]));}  }
class C{  protected int read() throws IOException {  if (offset == buffer.length) {    throw new ASN1Exception("Unexpected end of encoding");  }  if (in == null) {    return buffer[offset++] & 0xFF;  } else {    int octet=in.read();    if (octet == -1) {      throw new ASN1Exception("Unexpected end of encoding");    }    buffer[offset++]=(byte)octet;    return octet;  }}  }
class C{  @Override public boolean equals(Object obj){  try {    NoneRabbitGroup ng=(NoneRabbitGroup)obj;    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public static QueryIndex readQueryIndex(BinaryRawReader in){  QueryIndex res=new QueryIndex();  res.setName(in.readString());  res.setIndexType(QueryIndexType.values()[in.readByte()]);  int cnt=in.readInt();  if (cnt > 0) {    LinkedHashMap<String,Boolean> fields=new LinkedHashMap<>(cnt);    for (int i=0; i < cnt; i++)     fields.put(in.readString(),!in.readBoolean());    res.setFields(fields);  }  return res;}  }
class C{  public Filter(String name,FilterType type,FilterPred pred,boolean enabled){  if (name != null && !name.isEmpty())   this.name=name;  this.type=type;  this.pred=pred;  this.enabled=enabled;}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  int hash(Object k){  int h;  h=k.hashCode();  h^=(h >>> 20) ^ (h >>> 12);  return h ^ (h >>> 7) ^ (h >>> 4);}  }
class C{  public CarouselView(Context context){  this(context,null);}  }
class C{  private void addToSeason(TvShowEpisode episode){  TvShowSeason season=getSeasonForEpisode(episode);  season.addEpisode(episode);}  }
class C{  public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory,int defaultOsPriority){  return new ThreadPoolExecutorWithExceptions(0,Integer.MAX_VALUE,60L,TimeUnit.SECONDS,new SynchronousQueue<Runnable>(),threadFactory,defaultOsPriority);}  }
class C{  public V value(){  return _map._values[_index];}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof PlotEntity)) {    return false;  }  PlotEntity that=(PlotEntity)obj;  if (!getArea().equals(that.getArea())) {    return false;  }  if (!ObjectUtilities.equal(getToolTipText(),that.getToolTipText())) {    return false;  }  if (!ObjectUtilities.equal(getURLText(),that.getURLText())) {    return false;  }  if (!(this.plot.equals(that.plot))) {    return false;  }  return true;}  }
class C{  public static boolean writeFile(String filePath,InputStream stream,boolean append){  return writeFile(filePath != null ? new File(filePath) : null,stream,append);}  }
class C{  public static int[] expand(int[] n){  int[] n2=new int[n.length + 1];  extract(n2,1,n,0,n.length);  return n2;}  }
class C{  public static void clearCache(){  cache.clear();}  }
class C{  public OperationPendingException(){  super();}  }
class C{  public final void addNode(Node node){  if (node instanceof Circle) {    Circle c=(Circle)node;    c.setCenterX(c.getRadius());    c.setCenterY(c.getRadius());  }  getChildren().add(node);}  }
class C{  public void initWithText(String text,CGSize dimensions,CCLabel.TextAlignment alignment,String fontname,float fontSize){  initWithText(text,dimensions,alignment,fontname,fontSize,Typeface.NORMAL);}  }
class C{  static FileChannel newFileChannel(int fd,String path,boolean reading,boolean writing){  FileDescriptor fdObj=new FileDescriptor();  fdAccess.set(fdObj,fd);  return FileChannelImpl.open(fdObj,path,reading,writing,null);}  }
class C{  public OffsetGrabPoint(int x,int y){  this(x,y,DEFAULT_RADIUS);}  }
class C{  public synchronized void removeServer(ServerLocation location){  String[] groups=(String[])serverGroupMap.remove(location);  if (groups != null) {    removeFromMap(connectionLoadMap,groups,location);    removeFromMap(queueLoadMap,groups,location);  }}  }
class C{  public Template findTemplateById(String id){  TemplatePersistenceData data=getTemplateData(id);  if (data != null && !data.isDeleted())   return data.getTemplate();  return null;}  }
class C{  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) private void prepTests(){  setApplication(app);  this.startActivity(new Intent(getInstrumentation().getTargetContext(),ZulipActivity.class),null,null);  this.getInstrumentation().waitForIdleSync();  app.setContext(getInstrumentation().getTargetContext());  app.setEmail(TESTUSER_EXAMPLE_COM);  app.deleteDatabase(app.getDatabaseHelper().getDatabaseName());  app.setEmail(TESTUSER_EXAMPLE_COM);  messageDao=app.getDao(Message.class);}  }
class C{  static void skip0(String line,BufferedReader reader,PhysicalNode map){  try {    while ((line=reader.readLine()) != null && !line.startsWith(SKIP_KEY0)) {    }  } catch (  IOException ex) {    Logger.getLogger(CiscoRCParse.class.getName()).log(Level.SEVERE,null,ex);  }}  }
class C{  private static BitMatrix encodeLowLevel(DefaultPlacement placement,SymbolInfo symbolInfo){  int symbolWidth=symbolInfo.getSymbolDataWidth();  int symbolHeight=symbolInfo.getSymbolDataHeight();  ByteMatrix matrix=new ByteMatrix(symbolInfo.getSymbolWidth(),symbolInfo.getSymbolHeight());  int matrixY=0;  for (int y=0; y < symbolHeight; y++) {    int matrixX;    if ((y % symbolInfo.matrixHeight) == 0) {      matrixX=0;      for (int x=0; x < symbolInfo.getSymbolWidth(); x++) {        matrix.set(matrixX,matrixY,(x % 2) == 0);        matrixX++;      }      matrixY++;    }    matrixX=0;    for (int x=0; x < symbolWidth; x++) {      if ((x % symbolInfo.matrixWidth) == 0) {        matrix.set(matrixX,matrixY,true);        matrixX++;      }      matrix.set(matrixX,matrixY,placement.getBit(x,y));      matrixX++;      if ((x % symbolInfo.matrixWidth) == symbolInfo.matrixWidth - 1) {        matrix.set(matrixX,matrixY,(y % 2) == 0);        matrixX++;      }    }    matrixY++;    if ((y % symbolInfo.matrixHeight) == symbolInfo.matrixHeight - 1) {      matrixX=0;      for (int x=0; x < symbolInfo.getSymbolWidth(); x++) {        matrix.set(matrixX,matrixY,true);        matrixX++;      }      matrixY++;    }  }  return convertByteMatrixToBitMatrix(matrix);}  }
class C{  public JpaArtifact(@NotNull final String gridFsFileName,@NotNull final String filename,final SoftwareModule softwareModule){  setSoftwareModule(softwareModule);  this.gridFsFileName=gridFsFileName;  this.filename=filename;}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,Object value){  buffer.append(summaryObjectStartText);  buffer.append(getShortClassName(value.getClass()));  buffer.append(summaryObjectEndText);}  }
class C{  private static void collectComponentVisit(Node node,Set<Node> component,Graph graph,List<Node> unsortedNodes){  if (TaskManager.getInstance().isCanceled()) {    return;  }  component.add(node);  unsortedNodes.remove(node);  List<Node> adj=graph.getAdjacentNodes(node);  for (  Object anAdj : adj) {    Node _node=(Node)anAdj;    if (!component.contains(_node)) {      collectComponentVisit(_node,component,graph,unsortedNodes);    }  }}  }
class C{  protected void doMarkovBlanketCorrection(BayesNet bayesNet,Instances instances){  int iClass=instances.classIndex();  ParentSet ancestors=new ParentSet();  int nOldSize=0;  ancestors.addParent(iClass,instances);  while (nOldSize != ancestors.getNrOfParents()) {    nOldSize=ancestors.getNrOfParents();    for (int iNode=0; iNode < nOldSize; iNode++) {      int iCurrent=ancestors.getParent(iNode);      ParentSet p=bayesNet.getParentSet(iCurrent);      for (int iParent=0; iParent < p.getNrOfParents(); iParent++) {        if (!ancestors.contains(p.getParent(iParent))) {          ancestors.addParent(p.getParent(iParent),instances);        }      }    }  }  for (int iAttribute=0; iAttribute < instances.numAttributes(); iAttribute++) {    boolean bIsInMarkovBoundary=(iAttribute == iClass) || bayesNet.getParentSet(iAttribute).contains(iClass) || bayesNet.getParentSet(iClass).contains(iAttribute);    for (int iAttribute2=0; !bIsInMarkovBoundary && iAttribute2 < instances.numAttributes(); iAttribute2++) {      bIsInMarkovBoundary=bayesNet.getParentSet(iAttribute2).contains(iAttribute) && bayesNet.getParentSet(iAttribute2).contains(iClass);    }    if (!bIsInMarkovBoundary) {      if (ancestors.contains(iAttribute)) {        if (bayesNet.getParentSet(iClass).getCardinalityOfParents() < 1024) {          bayesNet.getParentSet(iClass).addParent(iAttribute,instances);        } else {        }      } else {        bayesNet.getParentSet(iAttribute).addParent(iClass,instances);      }    }  }}  }
class C{  protected int _rowOffset(int absRank){  return absRank;}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  public String toString(){  String s="";  s+=String.format("%.2f n + %.2f",slope(),intercept());  return s + "  (R^2 = " + String.format("%.3f",R2())+ ")";}  }
class C{  protected static String quoteTimestamp(java.sql.Timestamp x){  if (x == null) {    return "null";  }  return "Timestamp.valueOf(\"" + x.toString() + "\")";}  }
class C{  public Message convertMessage(final Object object,final MessageProperties messageProperties){  return rabbitTemplate.getMessageConverter().toMessage(object,messageProperties);}  }
class C{  private static String convertJava2MimeEncoding(String encoding){  EncodingInfo enc=(EncodingInfo)_encodingTableKeyJava.get(toUpperCaseFast(encoding));  if (null != enc)   return enc.name;  return encoding;}  }
class C{  public SystemPropertiesLoader withCommon(){  withCommon=true;  return this;}  }
class C{  protected String doIt() throws Exception {  MRequest request=new MRequest(getCtx(),p_R_Request_ID,get_TrxName());  log.info(request.toString());  if (request.get_ID() == 0)   throw new AdempiereUserError("@NotFound@ @R_Request_ID@ " + p_R_Request_ID);  request.setR_Status_ID();  request.setProcessed(false);  if (request.save() && !request.isProcessed())   return "@OK@";  return "@Error@";}  }
class C{  public void auditBlockSnapshot(OperationTypeEnum auditType,String operationalStatus,String operationStage,Object... descparams){  _auditMgr.recordAuditLog(URI.create(getUserFromContext().getTenantId()),URI.create(getUserFromContext().getName()),EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),operationalStatus,operationStage,descparams);}  }
class C{  @Override public void cancel(){  this.state=State.CANCELLED;  if (request != null && !request.isAborted()) {    try {      request.abort();    } catch (    Throwable e) {    }  }  if (!this.isCancelled()) {    try {      this.cancel(true);    } catch (    Throwable e) {    }  }  if (callback != null) {    callback.onCancelled();  }}  }
class C{  public void unescapedTextElement(String elName,String text) throws IOException {  _writeIndent();  _write("<" + elName);  _writeAtts();  _write(">");  _write(text);  _writeLn("</" + elName + ">");}  }
class C{  public void addEdge(int i,int j){  if (i != j) {    addEdgeInternal(i,j);    addEdgeInternal(j,i);  } else {    throw new UnsupportedOperationException("Self-loops are not allowed.");  }}  }
class C{  public void removeRestartListener(RestartListener listener){  listeners.removeListener(listener);}  }
class C{  @Override public Cookie[] parse(String host,final int port,String path,final boolean secure,final String header) throws MalformedCookieException {  LOG.trace("enter NetscapeDraftSpec.parse(String, port, path, boolean, Header)");  if (host == null) {    throw new IllegalArgumentException("Host of origin may not be null");  }  if (host.trim().equals("")) {    throw new IllegalArgumentException("Host of origin may not be blank");  }  if (port < 0) {    throw new IllegalArgumentException("Invalid port: " + port);  }  if (path == null) {    throw new IllegalArgumentException("Path of origin may not be null.");  }  if (header == null) {    throw new IllegalArgumentException("Header may not be null.");  }  if (path.trim().equals("")) {    path=PATH_DELIM;  }  host=host.toLowerCase();  String defaultPath=path;  int lastSlashIndex=defaultPath.lastIndexOf(PATH_DELIM);  if (lastSlashIndex >= 0) {    if (lastSlashIndex == 0) {      lastSlashIndex=1;    }    defaultPath=defaultPath.substring(0,lastSlashIndex);  }  final HeaderElement headerelement=new HeaderElement(header.toCharArray());  final Cookie cookie=new Cookie(host,headerelement.getName(),headerelement.getValue(),defaultPath,null,false);  final NameValuePair[] parameters=headerelement.getParameters();  if (parameters != null) {    for (int j=0; j < parameters.length; j++) {      parseAttribute(parameters[j],cookie);    }  }  return new Cookie[]{cookie};}  }
class C{  public AbstractTransferable(DataFlavor flavor){  this.flavors=new DataFlavor[]{flavor};}  }
class C{  private JLabel createWeekday(String title){  JLabel label=new JLabel(title);  label.setHorizontalAlignment(SwingConstants.CENTER);  label.setHorizontalTextPosition(SwingConstants.CENTER);  label.setRequestFocusEnabled(false);  label.setBackground(AdempierePLAF.getPrimary1());  label.setForeground(Color.white);  label.setOpaque(true);  return label;}  }
class C{  private List<Paragraph> classify(String htmlText,Set<String> stopwordsSet,double lengthLow,double lengthHigh,double stopwordsLow,double stopwordsHigh,double maxLinkDensity,int maxHeadingDistance){  if (stopwordsSet.isEmpty()) {    stopwordsHigh=0;    stopwordsLow=0;  }  Document jSoupDoc=convertHtmlToDoc(htmlText);  Document cleanJSoupDoc=cleanDom(jSoupDoc);  LinkedList<Paragraph> paragraphs=makeParagraphs(cleanJSoupDoc);  classifyContextFree(paragraphs,stopwordsSet,lengthLow,lengthHigh,stopwordsLow,stopwordsHigh,maxLinkDensity);  reclassifyContextSensitive(paragraphs,maxHeadingDistance);  return paragraphs;}  }
class C{  private void newFileAndSet(ObjectXmlPersist persist,IFile file,String setName) throws IOException, CoreException {  Collection<RelationSetDescriptor> collection=Lists.newArrayList();  persistUpdatedBundle(persist,file,collection,setName);}  }
class C{  private void initTokenizer(StreamTokenizer tokenizer){  tokenizer.resetSyntax();  tokenizer.whitespaceChars(0,(' ' - 1));  tokenizer.wordChars(' ','\u00FF');  tokenizer.whitespaceChars(m_FieldSeparator.charAt(0),m_FieldSeparator.charAt(0));  String[] parts=m_Enclosures.split(",");  for (  String e : parts) {    if (e.length() > 1 || e.length() == 0) {      throw new IllegalArgumentException("Enclosures can only be single characters");    }    tokenizer.quoteChar(e.charAt(0));  }  tokenizer.eolIsSignificant(true);}  }
class C{  public boolean stop(){  logger.info("Stopping Gondola instance for host {}...",hostId);  boolean status=network.stop();  status=Utils.stopThreads(threads) && status;  threads.clear();  for (  Shard shard : shards) {    status=shard.stop() && status;  }  shards.clear();  shardMap.clear();  status=storage.stop() && status;  status=clock.stop() && status;  try {    mbs.unregisterMBean(objectName);    inited=false;  } catch (  InstanceNotFoundException|MBeanRegistrationException e) {    logger.error("Unregister MBean failed",e);  }catch (  Exception e) {    logger.error(e.getMessage(),e);  }  return status;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  static synchronized void insert(ControllerPlan plan){  numMethodsScheduledForRecomp++;  int optLevel=plan.getCompPlan().options.getOptLevel();switch (optLevel) {case 0:    numOpt0++;  break;case 1:numOpt1++;break;case 2:numOpt2++;break;case 3:numOpt3++;break;case 4:numOpt4++;break;default :if (VM.VerifyAssertions) VM._assert(NOT_REACHED,"Unknown Opt Level");}LinkedList<ControllerPlan> planList=findPlan(plan.getCompPlan().method);if (planList == null) {planList=new LinkedList<ControllerPlan>();planList.addLast(plan);table.put(plan.getCompPlan().method,planList);} else {synchronized (planList) {planList.addLast(plan);}}plan.setPlanList(planList);}  }
class C{  protected boolean isIntegerType(byte type){  return type == T_INT || type == T_BYTE || type == T_BOOLEAN || type == T_CHAR || type == T_SHORT;}  }
class C{  public static SceneCanvas createSceneCanvas(int width,int height,boolean fullScreen,JoglCanvasRenderer canvasRenderer,boolean mainCanvas){  GLCapabilities glCaps=new GLCapabilities(GLProfile.getDefault());  if (glCaps.getAlphaBits() < 8) {    glCaps.setAlphaBits(8);  }  if (glCaps.getRedBits() < 8) {    glCaps.setRedBits(8);  }  if (glCaps.getGreenBits() < 8) {    glCaps.setGreenBits(8);  }  if (glCaps.getBlueBits() < 8) {    glCaps.setBlueBits(8);  }  int colorDepth=glCaps.getRedBits() + glCaps.getGreenBits() + glCaps.getBlueBits();  if (glCaps.getDepthBits() < 32) {    glCaps.setDepthBits(32);  }  DisplaySettings displaySettings=new DisplaySettings(width,height,colorDepth,0,glCaps.getAlphaBits(),glCaps.getDepthBits(),glCaps.getStencilBits(),0,fullScreen,glCaps.getStereo());  SceneCanvas canvas=null;  try {    canvas=new SceneCanvas(displaySettings,glCaps,canvasRenderer,mainCanvas);  } catch (  Exception e32) {    e32.printStackTrace();    try {      glCaps.setDepthBits(24);      displaySettings=new DisplaySettings(width,height,colorDepth,0,glCaps.getAlphaBits(),glCaps.getDepthBits(),glCaps.getStencilBits(),0,fullScreen,glCaps.getStereo());      canvas=new SceneCanvas(displaySettings,glCaps,canvasRenderer,mainCanvas);    } catch (    Exception e24) {      e24.printStackTrace();      throw new IllegalStateException("System is not configured for 24 or 32 bit graphics.");    }  }  return (canvas);}  }
class C{  @Pure public static Atom findOrCreateAsciiAtom(String str){  return findOrCreate(null,true,str);}  }
class C{  Item newFieldItem(final String owner,final String name,final String desc){  key3.set(FIELD,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(FIELD,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.spanRV=this.findView(R.id.span_rv);}  }
class C{  public void addSparseFeatureVector(IFeatureVector sfv,double alpha){  if (this.isExtendable()) {    this.expandFor(sfv.getMaxIdx());  }  for (int i=0; i < sfv.getNumActiveFeatures(); i++) {    u[sfv.getIdx(i)]+=alpha * sfv.getValue(i);  }}  }
class C{  public TFSRepository connect(final IProject project){  return connect(project,true);}  }
class C{  boolean spends(Transaction txA,Transaction txB){  for (  TransactionInput txInput : txA.getInputs()) {    if (txInput.getOutpoint().getHash().equals(txB.getHash())) {      return true;    }  }  return false;}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + min+ ","+ max+ ")";}  }
class C{  protected boolean removeLevelXing(LevelXing o){  if (!noWarnLevelXing) {    int selectedValue=JOptionPane.showOptionDialog(this,rb.getString("Question3r"),Bundle.getMessage("WarningTitle"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{Bundle.getMessage("ButtonYes"),Bundle.getMessage("ButtonNo"),rb.getString("ButtonYesPlus")},Bundle.getMessage("ButtonNo"));    if (selectedValue == 1) {      return (false);    }    if (selectedValue == 2) {      noWarnLevelXing=true;    }  }  if (selectedObject == o) {    selectedObject=null;  }  if (prevSelectedObject == o) {    prevSelectedObject=null;  }  TrackSegment t=(TrackSegment)o.getConnectA();  if (t != null) {    substituteAnchor(o.getCoordsA(),o,t);  }  t=(TrackSegment)o.getConnectB();  if (t != null) {    substituteAnchor(o.getCoordsB(),o,t);  }  t=(TrackSegment)o.getConnectC();  if (t != null) {    substituteAnchor(o.getCoordsC(),o,t);  }  t=(TrackSegment)o.getConnectD();  if (t != null) {    substituteAnchor(o.getCoordsD(),o,t);  }  LayoutBlock lb=o.getLayoutBlockAC();  if (lb != null) {    lb.decrementUse();  }  LayoutBlock lbx=o.getLayoutBlockBD();  if (lbx != null && lb != null && lbx != lb) {    lb.decrementUse();  }  for (int i=0; i < xingList.size(); i++) {    LevelXing lx=xingList.get(i);    if (lx == o) {      xingList.remove(i);      o.remove();      setDirty(true);      repaint();      return (true);    }  }  return (false);}  }
class C{  public void clear(){  this.keys.clear();  this.lookup.clear();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void startPrefixMapping(String alias,String uri){  Stack<NamespaceDecl> mapping=namespaceMap.get(alias);  if (mapping == null) {    mapping=new Stack<NamespaceDecl>();    namespaceMap.put(alias,mapping);  }  XmlNamespace ns=new XmlNamespace(alias,uri);  NamespaceDecl nsDecl=new NamespaceDecl(ns);  mapping.push(nsDecl);  elementNamespaces.add(ns);}  }
class C{  public void insertDecoration(int index,ShapeDecoration decoration){  decorations.add(index,decoration);}  }
class C{  public final void testIdentityScopeStringIdentityScope() throws Exception {  IdentityScope scope=new IdentityScopeStub("my scope");  is=new IdentityScopeStub("Aleksei Semenov",scope);  assertNotNull(is);  assertEquals("Aleksei Semenov",is.getName());  assertEquals(scope.getName(),is.getScope().getName());}  }
class C{  protected boolean left(Vector2 a,Vector2 b,Vector2 p){  return Segment.getLocation(p,a,b) > 0;}  }
class C{  public Element store(Object o){  getInstance(o);  Element e=new Element("connection");  if (adapter.getSystemConnectionMemo() != null) {    e.setAttribute("userName",adapter.getSystemConnectionMemo().getUserName());    e.setAttribute("systemPrefix",adapter.getSystemConnectionMemo().getSystemPrefix());  }  if (adapter.getManufacturer() != null) {    e.setAttribute("manufacturer",adapter.getManufacturer());  }  saveOptions(e,adapter);  if (adapter.getDisabled()) {    e.setAttribute("disabled","yes");  } else {    e.setAttribute("disabled","no");  }  e.setAttribute("class",this.getClass().getName());  return e;}  }
class C{  static void svd_opa(SMat A,double[] x,double[] y){  int[] pointr=A.pointr, rowind=A.rowind;  double[] value=A.value;  for (int i=0; i < A.rows; i++)   y[i]=0;  for (int i=0; i < A.cols; i++) {    int end=pointr[i + 1];    for (int j=pointr[i]; j < end; j++)     y[rowind[j]]+=value[j] * x[i];  }  return;}  }
class C{  public void write(byte b[]) throws IOException {  writeBytes(b,0,b.length);}  }
class C{  static public String[] nfs(float num[],int left,int right){  String formatted[]=new String[num.length];  for (int i=0; i < formatted.length; i++) {    formatted[i]=nfs(num[i],left,right);  }  return formatted;}  }
class C{  public boolean inNativeCode(){  return inNativeCode;}  }
class C{  public int readAgain(){  return lastChar;}  }
class C{  public MilStd2525GraphicFactory(){  this.populateClassMap();}  }
class C{  protected MutableCoord transform(MutableCoord coord){  double x=coord.getX() - curX, y=coord.getY() - curY;  final double boxSizeX=offX + offX * 0.05;  final double boxSizeY=offY + offY * 0.05;  x=(x * this.getWidth()) / boxSizeX + 10;  y=(y * this.getHeight()) / boxSizeY + 10;  y=getHeight() - y;  MutableCoord result=new MutableCoord(x,y);  return result;}  }
class C{  private void checkRepeatVarsDuringDownload(final RepeatVars repeatVars){  try {    mWaiter.assertEquals(repeatVars.isRepeatUpload(),false);    mWaiter.assertEquals(repeatVars.isRepeatDownload(),true);    mWaiter.assertEquals(repeatVars.isRepeatFinished(),false);  } catch (  IllegalAccessException e) {    mWaiter.fail(e.getMessage());  }}  }
class C{  public Archive<?> createDefaultDeployment() throws Exception {  if (this.server == null) {    throw SwarmMessages.MESSAGES.containerNotStarted("createDefaultDeployment()");  }  return this.server.deployer().createDefaultDeployment();}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  public synchronized void clearXTextLabels(){  mXTextLabels.clear();}  }
class C{  public void addLock(Table table){  if (SysProperties.CHECK) {    if (locks.contains(table)) {      DbException.throwInternalError();    }  }  locks.add(table);}  }
class C{  public static void updateInt(VisualItem item,String field,int val){  item.setInt(getStartField(field),item.getInt(field));  item.setInt(field,val);  item.setInt(getEndField(field),val);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("staff",true);  newNode=doc.createEntityReference("ent1");  assertNotNull("createdEntRefNotNull",newNode);  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  MultiFinderPatternFinder(BitMatrix image){  super(image);}  }
class C{  @Override public Properties trackScreenView(@NonNull String screenName,@Nullable String courseId,@Nullable String action,@Nullable Map<String,String> values){  SegmentAnalyticsEvent aEvent=new SegmentAnalyticsEvent();  aEvent.setAppNameContext();  if (!TextUtils.isEmpty(action)) {    aEvent.properties.put(Keys.ACTION,action);  }  if (!TextUtils.isEmpty(courseId)) {    aEvent.properties.put(Keys.COURSE_ID,courseId);  }  if (values != null) {    aEvent.data.putAll(values);  }  tracker.screen("",screenName,aEvent.properties);  addCategoryToBiEvents(aEvent.properties,Values.SCREEN,screenName);  tracker.track(screenName,aEvent.properties);  return aEvent.properties;}  }
class C{  private void add(Container parent,String key,JComponent widget,int x,int y){  JLabel label=new JLabel(UIManager.getString(key + "Text",getLocale()));  String mnemonic=(String)UIManager.get(key + "Mnemonic",getLocale());  if (mnemonic != null) {    try {      label.setDisplayedMnemonic(Integer.parseInt(mnemonic));    } catch (    NumberFormatException nfe) {    }    String mnemonicIndex=(String)UIManager.get(key + "MnemonicIndex",getLocale());    if (mnemonicIndex != null) {      try {        label.setDisplayedMnemonicIndex(Integer.parseInt(mnemonicIndex));      } catch (      NumberFormatException nfe) {      }    }  }  label.setLabelFor(widget);  if (x < 0) {    x=parent.getComponentCount() % 4;  }  if (y < 0) {    y=parent.getComponentCount() / 4;  }  GridBagConstraints con=new GridBagConstraints(x + 1,y,1,1,0,0,GridBagConstraints.FIRST_LINE_END,GridBagConstraints.NONE,new Insets(4,0,0,4),0,0);  if (y == 0) {    con.insets.top=14;  }  parent.add(label,con);  con.gridx++;  parent.add(widget,con);}  }
class C{  protected static boolean checkMandatoryHeader(PduHeaders headers){  if (null == headers) {    return false;  }  int messageType=headers.getOctet(PduHeaders.MESSAGE_TYPE);  int mmsVersion=headers.getOctet(PduHeaders.MMS_VERSION);  if (0 == mmsVersion) {    return false;  }switch (messageType) {case PduHeaders.MESSAGE_TYPE_SEND_REQ:    byte[] srContentType=headers.getTextString(PduHeaders.CONTENT_TYPE);  if (null == srContentType) {    return false;  }EncodedStringValue srFrom=headers.getEncodedStringValue(PduHeaders.FROM);if (null == srFrom) {return false;}byte[] srTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);if (null == srTransactionId) {return false;}break;case PduHeaders.MESSAGE_TYPE_SEND_CONF:int scResponseStatus=headers.getOctet(PduHeaders.RESPONSE_STATUS);if (0 == scResponseStatus) {return false;}byte[] scTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);if (null == scTransactionId) {return false;}break;case PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND:byte[] niContentLocation=headers.getTextString(PduHeaders.CONTENT_LOCATION);if (null == niContentLocation) {return false;}long niExpiry=headers.getLongInteger(PduHeaders.EXPIRY);if (-1 == niExpiry) {return false;}byte[] niMessageClass=headers.getTextString(PduHeaders.MESSAGE_CLASS);if (null == niMessageClass) {return false;}long niMessageSize=headers.getLongInteger(PduHeaders.MESSAGE_SIZE);if (-1 == niMessageSize) {return false;}byte[] niTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);if (null == niTransactionId) {return false;}break;case PduHeaders.MESSAGE_TYPE_NOTIFYRESP_IND:int nriStatus=headers.getOctet(PduHeaders.STATUS);if (0 == nriStatus) {return false;}byte[] nriTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);if (null == nriTransactionId) {return false;}break;case PduHeaders.MESSAGE_TYPE_RETRIEVE_CONF:byte[] rcContentType=headers.getTextString(PduHeaders.CONTENT_TYPE);if (null == rcContentType) {return false;}long rcDate=headers.getLongInteger(PduHeaders.DATE);if (-1 == rcDate) {return false;}break;case PduHeaders.MESSAGE_TYPE_DELIVERY_IND:long diDate=headers.getLongInteger(PduHeaders.DATE);if (-1 == diDate) {return false;}byte[] diMessageId=headers.getTextString(PduHeaders.MESSAGE_ID);if (null == diMessageId) {return false;}int diStatus=headers.getOctet(PduHeaders.STATUS);if (0 == diStatus) {return false;}EncodedStringValue[] diTo=headers.getEncodedStringValues(PduHeaders.TO);if (null == diTo) {return false;}break;case PduHeaders.MESSAGE_TYPE_ACKNOWLEDGE_IND:byte[] aiTransactionId=headers.getTextString(PduHeaders.TRANSACTION_ID);if (null == aiTransactionId) {return false;}break;case PduHeaders.MESSAGE_TYPE_READ_ORIG_IND:long roDate=headers.getLongInteger(PduHeaders.DATE);if (-1 == roDate) {return false;}EncodedStringValue roFrom=headers.getEncodedStringValue(PduHeaders.FROM);if (null == roFrom) {return false;}byte[] roMessageId=headers.getTextString(PduHeaders.MESSAGE_ID);if (null == roMessageId) {return false;}int roReadStatus=headers.getOctet(PduHeaders.READ_STATUS);if (0 == roReadStatus) {return false;}EncodedStringValue[] roTo=headers.getEncodedStringValues(PduHeaders.TO);if (null == roTo) {return false;}break;case PduHeaders.MESSAGE_TYPE_READ_REC_IND:EncodedStringValue rrFrom=headers.getEncodedStringValue(PduHeaders.FROM);if (null == rrFrom) {return false;}byte[] rrMessageId=headers.getTextString(PduHeaders.MESSAGE_ID);if (null == rrMessageId) {return false;}int rrReadStatus=headers.getOctet(PduHeaders.READ_STATUS);if (0 == rrReadStatus) {return false;}EncodedStringValue[] rrTo=headers.getEncodedStringValues(PduHeaders.TO);if (null == rrTo) {return false;}break;default :return false;}return true;}  }
class C{  private void notifyPortUnreachable(int port){  List<Action> actions=Arrays.asList(new Action(i18n.get("portCheckTask.help"),null),new Action(i18n.get("portCheckTask.neverShowAgain"),null),new Action(i18n.get("portCheckTask.retry"),null));  notificationService.addNotification(new PersistentNotification(i18n.get("portCheckTask.unreachableNotification",port),Severity.WARN,actions));}  }
class C{  @SuppressWarnings(value="unused") public List<String> suggest(FacesContext context,UIComponent component,String tag){  if (StringUtils.isEmpty(tag) || tag.equals(SEPARATOR)) {    return null;  }  try {    final String pattern=tag + "%";    return this.getTagService().getTagsByPattern(this.getUserLanguage(),pattern,MAX_SUGGESTIONS);  } catch (  Exception e) {    ExceptionHandler.execute(new SaaSApplicationException(e));  }  return null;}  }
class C{  public void clear(){  al.clear();}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/register") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public CustomConfigRestRep registerCustomConfig(@PathParam("id") URI id){  CustomConfig config=getCustomConfigById(id,true);  if (config.getRegistered()) {    return DbObjectMapper.map(config);  }  config.setRegistered(true);  _dbClient.updateAndReindexObject(config);  auditOp(OperationTypeEnum.REGISTER_CONFIG,true,null,config.getId().toString(),config.getLabel(),config.getScope());  return DbObjectMapper.map(config);}  }
class C{  public JBBPOut ResetCounter(){  assertNotEnded();  if (this.processCommands) {    this.outStream.resetCounter();  }  return this;}  }
class C{  protected void loadTableOIS(Vector<?> data){  window.getWListbox().clear();  window.getWListbox().getModel().removeTableModelListener(window);  ListModelTable model=new ListModelTable(data);  model.addTableModelListener(window);  window.getWListbox().setData(model,getOISColumnNames());  configureMiniTable(window.getWListbox());}  }
class C{  static int readInt(final byte[] b,final int index){  return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF);}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader;  String inputViewingStation;  String outputHeader;  int row, col, rows, cols;  int progress=0;  double z, noData, outputNoData;  double stationHeight;  double[] data;  double vertCount=1;  double horizCount;  double t1, t2, tva;  int stationRow;  int stationCol;  double x, y, dist, dZ, viewAngleValue;  double va;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  inputViewingStation=args[1];  outputHeader=args[2];  stationHeight=Double.parseDouble(args[3]);  if (demHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(demHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=DEM.getNoDataValue();    double stationX;    double stationY;    double stationZ;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    WhiteboxRaster viewAngle=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    viewAngle.isTemporaryFile=true;    WhiteboxRaster maxViewAngle=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    maxViewAngle.isTemporaryFile=true;    ArrayList<Double> stationXs=new ArrayList<>();    ArrayList<Double> stationYs=new ArrayList<>();    if (inputViewingStation.toLowerCase().endsWith(".shp")) {      ShapeFile input=new ShapeFile(inputViewingStation);      if (input.getShapeType().getBaseType() != ShapeType.POINT) {        showFeedback("The input viewing station vector should be \n" + "of a Point or MultiPoint ShapeType.");        return;      }      for (      ShapeFileRecord record : input.records) {        double[][] vertices;        ShapeType shapeType=record.getShapeType();switch (shapeType) {case POINT:          whitebox.geospatialfiles.shapefile.Point recPoint=(whitebox.geospatialfiles.shapefile.Point)(record.getGeometry());        vertices=recPoint.getPoints();      stationXs.add(vertices[0][0]);    stationYs.add(vertices[0][1]);  break;case POINTZ:PointZ recPointZ=(PointZ)(record.getGeometry());vertices=recPointZ.getPoints();stationXs.add(vertices[0][0]);stationYs.add(vertices[0][1]);break;case POINTM:PointM recPointM=(PointM)(record.getGeometry());vertices=recPointM.getPoints();stationXs.add(vertices[0][0]);stationYs.add(vertices[0][1]);break;case MULTIPOINT:MultiPoint recMultiPoint=(MultiPoint)(record.getGeometry());vertices=recMultiPoint.getPoints();for (int i=0; i < vertices.length; i++) {stationXs.add(vertices[i][0]);stationYs.add(vertices[i][1]);}break;case MULTIPOINTZ:MultiPointZ recMultiPointZ=(MultiPointZ)(record.getGeometry());vertices=recMultiPointZ.getPoints();for (int i=0; i < vertices.length; i++) {stationXs.add(vertices[i][0]);stationYs.add(vertices[i][1]);}break;case MULTIPOINTM:MultiPointM recMultiPointM=(MultiPointM)(record.getGeometry());vertices=recMultiPointM.getPoints();for (int i=0; i < vertices.length; i++) {stationXs.add(vertices[i][0]);stationYs.add(vertices[i][1]);}break;}}} else if (inputViewingStation.toLowerCase().endsWith(".dep")) {WhiteboxRaster viewStation=new WhiteboxRaster(inputViewingStation,"r");int vsRows=viewStation.getNumberRows();int vsCols=viewStation.getNumberColumns();double vsNoData=viewStation.getNoDataValue();for (row=0; row < vsRows; row++) {data=viewStation.getRowValues(row);for (col=0; col < vsCols; col++) {z=data[col];if (z != vsNoData & z != 0) {stationXs.add(viewStation.getXCoordinateFromColumn(col));stationYs.add(viewStation.getXCoordinateFromColumn(row));}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (vsRows - 1));updateProgress(progress);}} else {showFeedback("Unrecognized input viewing station file type.");return;}int numStations=stationXs.size();for (int a=0; a < numStations; a++) {stationX=stationXs.get(a);stationY=stationYs.get(a);stationRow=DEM.getRowFromYCoordinate(stationY);stationCol=DEM.getColumnFromXCoordinate(stationX);stationZ=DEM.getValue(stationRow,stationCol) + stationHeight;for (row=0; row < rows; row++) {data=DEM.getRowValues(row);for (col=0; col < cols; col++) {z=data[col];if (z != noData) {x=DEM.getXCoordinateFromColumn(col);y=DEM.getYCoordinateFromRow(row);dZ=z - stationZ;dist=Math.sqrt((x - stationX) * (x - stationX) + (y - stationY) * (y - stationY));if (dist != 0.0) {viewAngleValue=dZ / dist * 1000;viewAngle.setValue(row,col,viewAngleValue);}} else {viewAngle.setValue(row,col,outputNoData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress(progress);}for (row=stationRow - 1; row <= stationRow + 1; row++) {for (col=stationCol - 1; col <= stationCol + 1; col++) {maxViewAngle.setValue(row,col,viewAngle.getValue(row,col));}}double maxVA=viewAngle.getValue(stationRow - 1,stationCol);for (row=stationRow - 2; row >= 0; row--) {z=viewAngle.getValue(row,stationCol);if (z > maxVA) {maxVA=z;}maxViewAngle.setValue(row,stationCol,maxVA);}maxVA=viewAngle.getValue(stationRow + 1,stationCol);for (row=stationRow + 2; row < rows; row++) {z=viewAngle.getValue(row,stationCol);if (z > maxVA) {maxVA=z;}maxViewAngle.setValue(row,stationCol,maxVA);}maxVA=viewAngle.getValue(stationRow,stationCol + 1);for (col=stationCol + 2; col < cols - 1; col++) {z=viewAngle.getValue(stationRow,col);if (z > maxVA) {maxVA=z;}maxViewAngle.setValue(stationRow,col,maxVA);}maxVA=viewAngle.getValue(stationRow,stationCol - 1);for (col=stationCol - 2; col >= 0; col--) {z=viewAngle.getValue(stationRow,col);if (z > maxVA) {maxVA=z;}maxViewAngle.setValue(stationRow,col,maxVA);}for (row=stationRow - 2; row >= 0; row--) {vertCount++;horizCount=0;for (col=stationCol + 1; col <= stationCol + vertCount; col++) {if (col <= cols) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row + 1,col - 1);t2=maxViewAngle.getValue(row + 1,col);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row + 1,col - 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (row=stationRow - 2; row >= 0; row--) {vertCount++;horizCount=0;for (col=stationCol - 1; col >= stationCol - vertCount; col--) {if (col >= 0) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row + 1,col + 1);t2=maxViewAngle.getValue(row + 1,col);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row + 1,col + 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (row=stationRow + 2; row < rows; row++) {vertCount++;horizCount=0;for (col=stationCol - 1; col >= stationCol - vertCount; col--) {if (col >= 0) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row - 1,col + 1);t2=maxViewAngle.getValue(row - 1,col);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row - 1,col + 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (row=stationRow + 2; row < rows; row++) {vertCount++;horizCount=0;for (col=stationCol + 1; col <= stationCol + vertCount; col++) {if (col < cols) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row - 1,col - 1);t2=maxViewAngle.getValue(row - 1,col);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row - 1,col - 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (col=stationCol + 2; col < cols; col++) {vertCount++;horizCount=0;for (row=stationRow - 1; row >= stationRow - vertCount; row--) {if (row >= 0) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row + 1,col - 1);t2=maxViewAngle.getValue(row,col - 1);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row + 1,col - 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (col=stationCol + 2; col < cols; col++) {vertCount++;horizCount=0;for (row=stationRow + 1; row <= stationRow + vertCount; row++) {if (row < rows) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row - 1,col - 1);t2=maxViewAngle.getValue(row,col - 1);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row - 1,col - 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (col=stationCol - 2; col >= 0; col--) {vertCount++;horizCount=0;for (row=stationRow + 1; row <= stationRow + vertCount; row++) {if (row < rows) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row - 1,col + 1);t2=maxViewAngle.getValue(row,col + 1);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row - 1,col + 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}vertCount=1;for (col=stationCol - 2; col >= 0; col--) {vertCount++;horizCount=0;for (row=stationRow - 1; row >= stationRow - vertCount; row--) {if (row < rows) {va=viewAngle.getValue(row,col);horizCount++;if (horizCount != vertCount) {t1=maxViewAngle.getValue(row + 1,col + 1);t2=maxViewAngle.getValue(row,col + 1);tva=t2 + horizCount / vertCount * (t1 - t2);} else {tva=maxViewAngle.getValue(row + 1,col + 1);}if (tva > va) {maxViewAngle.setValue(row,col,tva);} else {maxViewAngle.setValue(row,col,va);}} else {break;}}if (cancelOp) {cancelOperation();return;}}viewAngle.flush();maxViewAngle.flush();double[] dataVA;for (row=0; row < rows; row++) {dataVA=viewAngle.getRowValues(row);data=maxViewAngle.getRowValues(row);for (col=0; col < cols; col++) {if (data[col] <= dataVA[col] && dataVA[col] != outputNoData) {output.setValue(row,col,output.getValue(row,col) + 1);} else if (dataVA[col] == outputNoData) {output.setValue(row,col,outputNoData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress(progress);}}viewAngle.close();maxViewAngle.close();output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());DEM.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public QuantileLayerPlot(Plot p,int a,double[] q,double r,boolean _symetric){  super(r + " quantile of " + p.name,p);  if (q != null)   PArray.checkLength(q,p.getData().length);  Q=q;  axe=a;  quantileRate=r;  symetric=_symetric;}  }
class C{  public void addXPathProperty(String name,String xpath,QName type,String castToType){  Class castToTypeClass=null;  if (castToType != null) {    try {      castToTypeClass=JavaClassHelper.getClassForSimpleName(castToType);    } catch (    EventAdapterException ex) {      throw new ConfigurationException("Invalid cast-to type for xpath expression named '" + name + "': "+ ex.getMessage());    }  }  XPathPropertyDesc desc=new XPathPropertyDesc(name,xpath,type,castToTypeClass);  xPathProperties.put(name,desc);}  }
class C{  static public void unTriggerAll(){  if (Cfg.DEBUG) {    Check.log(TAG + " (unTriggerAll)");  }  for (int qq=0; qq < Action.NUM_QUEUE; qq++) {    @SuppressWarnings("unchecked") ArrayList<Trigger> act=(ArrayList<Trigger>)triggeredActions[qq];    Object sem=triggeredSemaphore[qq];synchronized (act) {      act.clear();    }synchronized (sem) {      try {        sem.notifyAll();      } catch (      final Exception ex) {        if (Cfg.EXCEPTION) {          Check.log(ex);        }        if (Cfg.DEBUG) {          Check.log(ex);        }      }    }  }}  }
class C{  @Override public int updateCharacter(Uri uri,ContentValues cvs,String selection,String[] selectionArgs){  selection=addSelectionArgs(selection,selectionArgs," OR ");  return mOpenHelper.getWritableDatabase().update(CharacterContract.CharacterEntry.TABLE_NAME,cvs,addKeyIdCheckToWhereStatement(selection,ContentUris.parseId(uri)),selectionArgs);}  }
class C{  public static ProcessResults executeChildProcess(final Class classToExecute,final String[] args){  return executeChildProcess(classToExecute,System.getProperty("java.class.path"),args);}  }
class C{  public void addGameView(EntityView view){  getRenderGroup(view.getRenderLayer()).getChildren().add(view);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public double mouseY(){synchronized (mouseLock) {    return mouseY;  }}  }
class C{  private static float scurve(float value,float s){  final float x=value - 0.5f;  final float y=sigmoid(x,s) - 0.5f;  final float v=sigmoid(0.5f,s) - 0.5f;  return y / v * 0.5f + 0.5f;}  }
class C{  public static void main(String[] argv){  runClassifier(new Vote(),argv);}  }
class C{  public boolean removeAll(int[] array){  boolean changed=false;  for (int i=array.length; i-- > 0; ) {    if (remove(array[i])) {      changed=true;    }  }  return changed;}  }
class C{  public void print(PrintWriter p){  for (int i=0; i < nkeys; i++)   if (keys[i] != null)   p.println(keys[i] + (values[i] != null ? ": " + values[i] : "") + "\r");  p.println("\r");  p.flush();}  }
class C{  private void rebuildTableData(){  final Replay r=repProc.replay;  final GameDescription gd=r.initData.getGameDescription();  final Vector<Vector<Object>> data=new Vector<>();  data.add(Utils.vector("Time values converted to real-time?",repProc.realTime));  data.add(Utils.vector("File",repProc.file));  try {    data.add(Utils.vector("File size",new SizeValue(Files.size(repProc.file))));  } catch (  final IOException ie) {    data.add(Utils.vector("File size",null));  }  data.add(Utils.vector("Expansion level",new RenderablePair<>(gd.getExpansionLevel().ricon.size(24),gd.getExpansionLevel().fullText)));  data.add(Utils.vector("Version",r.header.versionString()));  if (SkillLevel.ADVANCED.isAtLeast())   data.add(Utils.vector("Base build",Integer.toString(r.header.baseBuild)));  data.add(Utils.vector("Date",new DateValue(r.details.getTime(),DateFormat.DATE_TIME_REL_LONG)));  if (SkillLevel.NORMAL.isAtLeast())   data.add(Utils.vector("Recorder time zone",(r.details.getTimeLocalOffsetHour() >= 0 ? "+" : "") + Env.LANG.formatNumber(r.details.getTimeLocalOffsetHour(),2)));  data.add(Utils.vector("Game mode",r.attributesEvents.getGameMode()));  data.add(Utils.vector("Game speed",gd.getGameSpeed()));  data.add(Utils.vector("Length",new DurationValue(repProc.getLengthMs())));  data.add(Utils.vector("Format",repProc.getFormat()));  data.add(Utils.vector("Race Matchup",repProc.getRaceMatchup() + (repProc.isArchon() ? " (Archon)" : "")));  data.add(Utils.vector("League Matchup",repProc.getLeagueMatchup()));  data.add(Utils.vector("Region",gd.getRegion()));  data.add(Utils.vector("Map title",r.details.title));  data.add(Utils.vector("Map size",gd.getMapSizeX() + "x" + gd.getMapSizeY()));  data.add(Utils.vector("Is single player?",r.initData.getLobbyState().getIsSinglePlayer()));  if (r.initData.getLobbyState().getHostUserId() != null)   data.add(Utils.vector("Host user",repProc.getUser(r.initData.getLobbyState().getHostUserId()).uid.fullName));  final CacheHandle[] handles=gd.cacheHandles;  if (SkillLevel.BASIC.isAbove() && handles.length > 0) {    data.add(Utils.vector("Map file name",handles[handles.length - 1]));  }  data.add(Utils.vector("Max players",gd.getMaxPlayers()));  data.add(Utils.vector("Max observers",gd.getObservers()));  data.add(Utils.vector("Max teams",gd.getMaxTeams()));  data.add(Utils.vector("Is cooperative mode?",gd.getIsCoopMode()));  data.add(Utils.vector("Is Blizzard map?",gd.getIsBlizzardMap()));  data.add(Utils.vector("Is premade FFA?",gd.getIsPremadeFfa()));  data.add(Utils.vector("AutoMM?",gd.getAmm()));  data.add(Utils.vector("Competitive?",gd.getCompetitive()));  data.add(Utils.vector("Battle.net?",gd.getBattleNet()));  if (SkillLevel.NORMAL.isAtLeast()) {    data.add(Utils.vector("Advanced shared controls?",gd.getAdvancedSharedControls()));    data.add(Utils.vector("Teams together?",gd.getTeamsTogether()));    data.add(Utils.vector("Random races?",gd.getRandomRaces()));    data.add(Utils.vector("Lock teams?",gd.getLockTeams()));    data.add(Utils.vector("No victory or defeat?",gd.getNoVictoryDefeat()));    data.add(Utils.vector("Map author",gd.getMapAuthorName()));  }  if (SkillLevel.DEVELOPER.isAtLeast()) {    for (int i=0; i < handles.length; i++)     data.add(Utils.vector("Dependency #" + (i + 1),handles[i]));  }  table.getXTableModel().setDataVector(data,Utils.vector("Property","Value"));  table.packColumnsExceptLast();}  }
class C{  private ContentValues(HashMap<String,Object> values){  mValues=values;}  }
class C{  private void calculateDiversity(){  long divStartTime=System.nanoTime();  uniqueCalls=0;  for (  Entry<String,Map<Integer,String>> dEntry : diversityMap.entrySet()) {    Map<Integer,String> calleeObjects=diversityMap.get(dEntry.getKey());    for (    Entry<Integer,String> mCall : calleeObjects.entrySet()) {      boolean alreadyPresent=false;      for (      int position : calleeObjects.keySet()) {        if (position != mCall.getKey() && calleeObjects.get(position).contains(mCall.getValue())) {          alreadyPresent=true;          break;        }      }      if (!alreadyPresent) {        uniqueCalls++;      }    }  }  RegressionSearchListener.diversityCalculationTime+=System.nanoTime() - divStartTime;}  }
class C{  public SurfaceEllipse(LatLon center,double majorRadius,double minorRadius){  if (center == null) {    String message=Logging.getMessage("nullValue.CenterIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (majorRadius < 0) {    String message=Logging.getMessage("Geom.RadiusIsNegative",majorRadius);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (minorRadius < 0) {    String message=Logging.getMessage("Geom.RadiusIsNegative",majorRadius);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.center=center;  this.majorRadius=majorRadius;  this.minorRadius=minorRadius;}  }
class C{  public SyncTVShows(final int hostId,final int tvshowId,Bundle syncExtras){  this.hostId=hostId;  this.tvshowId=tvshowId;  this.syncExtras=syncExtras;}  }
class C{  public ArticleFilter(Collection<Integer> namespaceWhitelist){  this.allowedNamespaces=namespaceWhitelist;  if (!this.allowedNamespaces.contains(MAIN_NAMESPACE)) {    this.excludeMainNamespace=true;  }}  }
class C{  public void onProgressData(byte[] responseBody){  Log.d(LOG_TAG,"onProgressData(byte[]) was not overriden, but callback was received");}  }
class C{  public byte[] digest(){  byte[] result=engineDigest();  state=INITIAL;  return result;}  }
class C{  public LZMA2Options(){  try {    setPreset(PRESET_DEFAULT);  } catch (  UnsupportedOptionsException e) {    assert false;    throw new RuntimeException();  }}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException, HeadlessException {  GraphicsEnvironment.checkHeadless();  s.defaultReadObject();  this.text=(text != null) ? text : "";  select(selectionStart,selectionEnd);  Object keyOrNull;  while (null != (keyOrNull=s.readObject())) {    String key=((String)keyOrNull).intern();    if (textListenerK == key) {      addTextListener((TextListener)(s.readObject()));    } else {      s.readObject();    }  }  enableInputMethodsIfNecessary();}  }
class C{  public void reusePages(int pages){  lock();  reserved+=pages;  committed+=pages;  unlock();}  }
class C{  public int rank(){  final double eps=Math.pow(2.0,-52.0);  final double tol=Math.max(m,n) * s.$[s.addr.op(0)] * eps;  int r=0;  for (int i=0; i < s.size(); i++) {    if (s.$[s.addr.op(i)] > tol) {      r++;    }  }  return r;}  }
class C{  public ConvexHullOutlineHandle(SVGPathFigure owner){  this(owner,false,false);}  }
class C{  public static String cropBetween(String in,String limit){  StringBuilder out=new StringBuilder();  int lastPos=0;  int lenLimit=limit.length();  boolean modeAdd=true;  int pos=-1;  while ((pos=in.indexOf(limit,lastPos)) >= 0) {    if (modeAdd) {      out.append(in.substring(lastPos,pos));    }    modeAdd=!modeAdd;    lastPos=pos + lenLimit;  }  if (modeAdd) {    out.append(in.substring(lastPos));  }  return out.toString();}  }
class C{  public static PortfolioData[] createPortfolioData(final int cnt,final int cntDest){  PortfolioData[] portfolio=new PortfolioData[cntDest];  for (int k=cnt; k < cntDest; k++) {    portfolio[k]=new PortfolioData(k);  }  return portfolio;}  }
class C{  public static int d6(int dice,int keep){  Roll roll=random.d6(dice,keep);  if (Server.getServerInstance() != null) {    if (Server.getServerInstance().getGame().getOptions().booleanOption("rng_log")) {      Server.getServerInstance().reportRoll(roll);    }  }  return roll.getIntValue();}  }
class C{  @NonNull public static Animator moveBy(float x,float y,float duration,@Nullable Interpolator interpolator){  return move(x,y,duration,interpolator,ActionType.MOVE_BY);}  }
class C{  LayerCheckBoxMenuItem(Layer aLayer){  if (aLayer == null) {    throw new IllegalArgumentException("null Layer");  }synchronized (LAYER_LOCK) {    layer=aLayer;  }  this.setText(layer.getName());  setState(layer.isVisible());  this.addActionListener(this);  layer.addComponentListener(this);}  }
class C{  public int optInt(int index,int defaultValue){  try {    return this.getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private VertexFlag(int bitNumber){  flag=1 << bitNumber;}  }
class C{  protected static TrustAnchor findTrustAnchor(X509Certificate cert,Set trustAnchors,String sigProvider) throws AnnotatedException {  TrustAnchor trust=null;  PublicKey trustPublicKey=null;  Exception invalidKeyEx=null;  X509CertSelector certSelectX509=new X509CertSelector();  X500Principal certIssuer=getEncodedIssuerPrincipal(cert);  try {    certSelectX509.setSubject(certIssuer.getEncoded());  } catch (  IOException ex) {    throw new AnnotatedException("Cannot set subject search criteria for trust anchor.",ex);  }  Iterator iter=trustAnchors.iterator();  while (iter.hasNext() && trust == null) {    trust=(TrustAnchor)iter.next();    if (trust.getTrustedCert() != null) {      if (certSelectX509.match(trust.getTrustedCert())) {        trustPublicKey=trust.getTrustedCert().getPublicKey();      } else {        trust=null;      }    } else     if (trust.getCAName() != null && trust.getCAPublicKey() != null) {      try {        X500Principal caName=new X500Principal(trust.getCAName());        if (certIssuer.equals(caName)) {          trustPublicKey=trust.getCAPublicKey();        } else {          trust=null;        }      } catch (      IllegalArgumentException ex) {        trust=null;      }    } else {      trust=null;    }    if (trustPublicKey != null) {      try {        verifyX509Certificate(cert,trustPublicKey,sigProvider);      } catch (      Exception ex) {        invalidKeyEx=ex;        trust=null;        trustPublicKey=null;      }    }  }  if (trust == null && invalidKeyEx != null) {    throw new AnnotatedException("TrustAnchor found but certificate validation failed.",invalidKeyEx);  }  return trust;}  }
class C{  public Envelope(Object message,ActorScope scope,Mailbox mailbox,ActorRef sender){  this.scope=scope;  this.message=message;  this.sender=sender;  this.mailbox=mailbox;  this.sendTime=ActorTime.currentTime();}  }
class C{  public Socket createSocket(InetAddress address,int port,InetAddress myAddress,int myPort) throws IOException {  if (myAddress != null)   return new Socket(address,port,myAddress,myPort); else   if (port != 0) {    Socket sock=new Socket();    sock.bind(new InetSocketAddress(port));    sock.connect(new InetSocketAddress(address,port));    return sock;  } else   return new Socket(address,port);}  }
class C{  protected Date evaluateString(String datemathfmt,Locale locale,TimeZone tz){  if (datemathfmt.startsWith("NOW")) {    datemathfmt=datemathfmt.substring("NOW".length());  }  try {    DateMathParser parser=new DateMathParser(tz);    parser.setNow(new Date());    return parser.parseMath(datemathfmt);  } catch (  ParseException e) {    throw wrapAndThrow(SEVERE,e,"Invalid expression for date");  }}  }
class C{  public void showDialog(){  view.showDialog();  view.clearInput();}  }
class C{  public void connectTo(Peer peer){  if (getConnecting() != null) {    log.warn("connectTo() not connecting to " + peer + " -- already connecting to ("+ getConnecting()+ ")");    return;  }  log.info("connecting to " + peer);  PeerManager peerManager=PeerManager.getInstance(this);  setConnecting(peer.address);  log.info("Starting to connect to " + peer.toString());  if (mPeerConnectionCallback == null)   log.info("Was starting to connect to " + peer.toString() + " but PeerConnectionCallback was null");  mBluetoothSpeaker.connect(peer,mPeerConnectionCallback);}  }
class C{  public static <S extends HasCellHoverHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    CellHoverEvent event=new CellHoverEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(MicroPerformanceRegressionTest.class);}  }
class C{  protected void seedLine(String uri){  if (!uri.matches("[a-zA-Z][\\w+\\-]+:.*")) {    uri="http://" + uri;  }  try {    UURI uuri=UURIFactory.getInstance(uri);    CrawlURI curi=new CrawlURI(uuri);    curi.setSeed(true);    curi.setSchedulingDirective(SchedulingConstants.MEDIUM);    if (getSourceTagSeeds()) {      curi.setSourceTag(curi.toString());    }    publishAddedSeed(curi);  } catch (  URIException e) {    nonseedLine(uri);  }}  }
class C{  public boolean canDial(){  return impl.canDial();}  }
class C{  public static SequencesReader createMemorySequencesReaderCheckEmpty(final File dir,final boolean loadNames,boolean loadFullNames,LongRange region) throws IOException, NoTalkbackSlimException {  final SequencesReader result=createMemorySequencesReader(dir,loadNames,loadFullNames,region);  ReaderUtils.validateNotEmpty(result);  return result;}  }
class C{  public static double tile2lon(int x,int z){  return x / Math.pow(2.0,z) * 360.0 - 180;}  }
class C{  int readCorner2(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 4,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public void fillAttributeSet(Set attrSet){  ((ExtendedSelector)getSimpleSelector()).fillAttributeSet(attrSet);  ((ExtendedCondition)getCondition()).fillAttributeSet(attrSet);}  }
class C{  public static <V,E>Graph<V,E> foldKPartiteGraph(KPartiteGraph<V,E> g,Predicate<V> p,Supplier<Graph<V,E>> graph_factory,Supplier<E> edge_factory){  Graph<V,E> newGraph=graph_factory.get();  Collection<V> vertices=g.getVertices(p);  for (  V v : vertices) {    newGraph.addVertex(v);    for (    V s : g.getSuccessors(v)) {      for (      V t : g.getSuccessors(s)) {        if (!vertices.contains(t) || t.equals(v))         continue;        newGraph.addVertex(t);        newGraph.addEdge(edge_factory.get(),v,t);      }    }  }  return newGraph;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__TYPE_ARGS:    getTypeArgs().clear();  return;case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__TARGET:setTarget((Expression)null);return;case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__PROPERTY:setProperty((IdentifiableElement)null);return;case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__PROPERTY_AS_TEXT:setPropertyAsText(PROPERTY_AS_TEXT_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public RectangleFigure(){  this(0,0,0,0);}  }
class C{  public boolean containsValue(long val){  byte[] states=_states;  long[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (states[i] == FULL && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  @Override public void readFields(DataInput dataInput) throws IOException {  byte[] row=read(dataInput);  byte[] columnFamily=read(dataInput);  byte[] columnQualifier=read(dataInput);  byte[] columnVisibility=read(dataInput);  byte[] value=read(dataInput);  boolean b=dataInput.readBoolean();  Long timestamp=null;  if (b) {    timestamp=dataInput.readLong();  }  try {    ryaStatement=ryaContext.deserializeTriple(RdfCloudTripleStoreConstants.TABLE_LAYOUT.SPO,new TripleRow(row,columnFamily,columnQualifier));    ryaStatement.setColumnVisibility(columnVisibility);    ryaStatement.setValue(value);    ryaStatement.setTimestamp(timestamp);  } catch (  TripleRowResolverException e) {    throw new IOException(e);  }}  }
class C{  public boolean isSupported(int feature){  return feature == (getSupportedFeatures() & feature);}  }
class C{  public static ODataUri createODataUriForMetaData(){  scala.Option<MediaType> format=scala.Option.apply(null);  scala.Option<ContextFragment> context=scala.Option.apply(null);  return new ODataUri(SERVICE_ROOT,new MetadataUri(format,context));}  }
class C{  boolean hasMore(){  return index < chars.length;}  }
class C{  public AddExpr newAddExpr(Value op1,Value op2){  return new JAddExpr(op1,op2);}  }
class C{  @Override public void onBasicPaymentProductGroupsCallComplete(BasicPaymentProductGroups basicPaymentProductGroups){  for (  BasicPaymentProductGroup paymentProductGroup : basicPaymentProductGroups.getBasicPaymentProductGroups()) {    cacheBasicPaymentItem(paymentProductGroup);  }}  }
class C{  private void restoreDefaultSettings(){  if (getProject() != null) {    chkEnableFindBugs.setSelection(false);    chkRunAtFullBuild.setEnabled(false);    FindBugsPreferenceInitializer.restoreDefaults(projectStore);  } else {    FindBugsPreferenceInitializer.restoreDefaults(workspaceStore);  }  currentUserPreferences=FindBugsPreferenceInitializer.createDefaultUserPreferences();  refreshUI(currentUserPreferences);}  }
class C{  public SQLRecoverableException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public SetRepeat(int playerId,String repeat){  super();  addParameterToRequest("playerid",playerId);  addParameterToRequest("repeat",repeat);}  }
class C{  public void highlight(int x,int y){  highlight(new Coords(x,y));}  }
class C{  private void identifyBlocks(){  int numBlocks=0;  for (  AbstractBeginNode begin : graph.getNodes(AbstractBeginNode.TYPE)) {    Block block=new Block(begin);    identifyBlock(block);    numBlocks++;  }  int count=0;  NodeMap<Block> nodeMap=this.nodeToBlock;  Block[] stack=new Block[numBlocks];  int tos=0;  Block startBlock=blockFor(graph.start());  stack[0]=startBlock;  startBlock.setPredecessors(Block.EMPTY_ARRAY);  do {    Block block=stack[tos];    int id=block.getId();    if (id == BLOCK_ID_INITIAL) {      FixedNode last=block.getEndNode();      if (last instanceof EndNode) {        EndNode endNode=(EndNode)last;        Block suxBlock=nodeMap.get(endNode.merge());        if (suxBlock.getId() == BLOCK_ID_INITIAL) {          stack[++tos]=suxBlock;        }        block.setSuccessors(new Block[]{suxBlock});      } else       if (last instanceof IfNode) {        IfNode ifNode=(IfNode)last;        Block trueSucc=nodeMap.get(ifNode.trueSuccessor());        stack[++tos]=trueSucc;        Block falseSucc=nodeMap.get(ifNode.falseSuccessor());        stack[++tos]=falseSucc;        block.setSuccessors(new Block[]{trueSucc,falseSucc});        Block[] ifPred=new Block[]{block};        trueSucc.setPredecessors(ifPred);        falseSucc.setPredecessors(ifPred);      } else       if (last instanceof LoopEndNode) {        LoopEndNode loopEndNode=(LoopEndNode)last;        block.setSuccessors(new Block[]{nodeMap.get(loopEndNode.loopBegin())});      } else {        assert !(last instanceof AbstractEndNode) : "Algorithm only supports EndNode and LoopEndNode.";        int startTos=tos;        Block[] ifPred=new Block[]{block};        for (        Node suxNode : last.successors()) {          Block sux=nodeMap.get(suxNode);          stack[++tos]=sux;          sux.setPredecessors(ifPred);        }        int suxCount=tos - startTos;        Block[] successors=new Block[suxCount];        System.arraycopy(stack,startTos + 1,successors,0,suxCount);        block.setSuccessors(successors);      }      block.setId(BLOCK_ID_VISITED);      AbstractBeginNode beginNode=block.getBeginNode();      if (beginNode instanceof LoopBeginNode) {        computeLoopPredecessors(nodeMap,block,(LoopBeginNode)beginNode);      } else       if (beginNode instanceof MergeNode) {        MergeNode mergeNode=(MergeNode)beginNode;        int forwardEndCount=mergeNode.forwardEndCount();        Block[] predecessors=new Block[forwardEndCount];        for (int i=0; i < forwardEndCount; ++i) {          predecessors[i]=nodeMap.get(mergeNode.forwardEndAt(i));        }        block.setPredecessors(predecessors);      }    } else     if (id == BLOCK_ID_VISITED) {      --tos;      count++;      int index=numBlocks - count;      stack[index]=block;      block.setId(index);    } else {      throw GraalError.shouldNotReachHere();    }  } while (tos >= 0);  assert count == numBlocks : "all blocks must be reachable";  this.reversePostOrder=stack;}  }
class C{  public T rules(String value){  return attr("rules",value);}  }
class C{  private String _serializeDate(Date date){  return _serializeDateTime(new DateTimeImpl(date));}  }
class C{  public DeflaterInputStream(InputStream in){  this(in,new Deflater());  usesDefaultDeflater=true;}  }
class C{  public long executeInsert(){  acquireReference();  try {    return getSession().executeForLastInsertedRowId(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public static void createAndAddLane(LanesToLinkAssignment l2l,LanesFactory factory,Id<Lane> laneId,double capacity,double startsAtMeterFromLinkEnd,int alignment,int numberOfRepresentedLanes,List<Id<Link>> toLinkIds,List<Id<Lane>> toLaneIds){  Lane lane=factory.createLane(laneId);  if (toLinkIds != null) {    for (    Id<Link> toLinkId : toLinkIds) {      lane.addToLinkId(toLinkId);    }  }  if (toLaneIds != null) {    for (    Id<Lane> toLaneId : toLaneIds) {      lane.addToLaneId(toLaneId);    }  }  lane.setCapacityVehiclesPerHour(capacity);  lane.setStartsAtMeterFromLinkEnd(startsAtMeterFromLinkEnd);  lane.setNumberOfRepresentedLanes(numberOfRepresentedLanes);  lane.setAlignment(alignment);  l2l.addLane(lane);}  }
class C{  public Builder customLogger(CustomLogger logger){  configuration.customLogger=logger;  return this;}  }
class C{  public BasicLocation(double latitude,double longitude,String name,OMGraphic locationMarker){  super(latitude,longitude,name,locationMarker);}  }
class C{  public static void showLoading(@NonNull View loadingView,@NonNull View contentView,@NonNull View errorView){  contentView.setVisibility(View.GONE);  errorView.setVisibility(View.GONE);  loadingView.setVisibility(View.VISIBLE);}  }
class C{  public RelayLogTask(RelayLogClient relayClient){  this.relayClient=relayClient;}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s",opId,_status.name()));    VNXeApiClient vnxeApiClient=getVNXeClient(jobContext);    URI snapId=getTaskCompleter().getId();    Snapshot snapshotObj=dbClient.queryObject(Snapshot.class,snapId);    URI fsUri=snapshotObj.getParent().getURI();    FileShare fsObj=dbClient.queryObject(FileShare.class,fsUri);    String event=null;    if (_status == JobStatus.SUCCESS && snapshotObj != null) {      syncSnapshots(dbClient,fsObj,vnxeApiClient);      event=String.format("Restore file system snapshot successfully for URI: %s",getTaskCompleter().getId());    } else     if (_status == JobStatus.FAILED && snapshotObj != null) {      event=String.format("Task %s failed to restore file system snapshot: %s",opId,snapshotObj.getName());      logMsgBuilder.append("\n");      logMsgBuilder.append(event);    } else {      logMsgBuilder.append(String.format("Could not find the snapshot:%s",snapId.toString()));    }    _logger.info(logMsgBuilder.toString());    FileDeviceController.recordFileDeviceOperation(dbClient,OperationTypeEnum.RESTORE_FILE_SNAPSHOT,_isSuccess,event,"",fsObj,snapId);  } catch (  Exception e) {    _logger.error("Caught an exception while trying to updateStatus for VNXeRestoreFileSystemSnapshotJob",e);    setErrorStatus("Encountered an internal error during file system snapshot restore job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  private void resetSerializerBase(){  this.m_attributes.clear();  this.m_CdataElems=null;  this.m_cdataTagOpen=false;  this.m_docIsEmpty=true;  this.m_doctypePublic=null;  this.m_doctypeSystem=null;  this.m_doIndent=false;  this.m_elemContext=new ElemContext();  this.m_indentAmount=0;  this.m_inEntityRef=false;  this.m_inExternalDTD=false;  this.m_mediatype=null;  this.m_needToCallStartDocument=true;  this.m_needToOutputDocTypeDecl=false;  if (m_OutputProps != null)   this.m_OutputProps.clear();  if (m_OutputPropsDefault != null)   this.m_OutputPropsDefault.clear();  if (this.m_prefixMap != null)   this.m_prefixMap.reset();  this.m_shouldNotWriteXMLHeader=false;  this.m_sourceLocator=null;  this.m_standalone=null;  this.m_standaloneWasSpecified=false;  this.m_StringOfCDATASections=null;  this.m_tracer=null;  this.m_transformer=null;  this.m_version=null;}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  float oldWidth=paint.getStrokeWidth();  paint.setStrokeWidth(((XYSeriesRenderer)renderer).getLineWidth());  canvas.drawLine(x,y,x + SHAPE_WIDTH,y,paint);  paint.setStrokeWidth(oldWidth);  if (isRenderPoints(renderer)) {    pointsChart.drawLegendShape(canvas,renderer,x + 5,y,seriesIndex,paint);  }}  }
class C{  public void clearPermisosRol(String[] roles){  StringBuffer qual=new StringBuffer("WHERE ").append(DBUtils.generateInTokenField(CAMPO_ID_ROL,roles));  deleteVO(qual.toString(),TABLE_NAME);}  }
class C{  public static int printDocumentMonospaced(Graphics g,Document doc,int fontSize,int pageIndex,PageFormat pageFormat,int tabSize){  g.setColor(Color.BLACK);  g.setFont(new Font("Monospaced",Font.PLAIN,fontSize));  tabSizeInSpaces=tabSize;  fm=g.getFontMetrics();  int fontWidth=fm.charWidth('w');  int fontHeight=fm.getHeight();  int MAX_CHARS_PER_LINE=(int)pageFormat.getImageableWidth() / fontWidth;  int MAX_LINES_PER_PAGE=(int)pageFormat.getImageableHeight() / fontHeight;  final int STARTING_LINE_NUMBER=MAX_LINES_PER_PAGE * pageIndex;  xOffset=(int)pageFormat.getImageableX();  int y=(int)pageFormat.getImageableY() + fm.getAscent() + 1;  int numPrintedLines=0;  currentDocLineNumber=0;  rootElement=doc.getDefaultRootElement();  numDocLines=rootElement.getElementCount();  while (currentDocLineNumber < numDocLines) {    String curLineString;    Element currentLine=rootElement.getElement(currentDocLineNumber);    int startOffs=currentLine.getStartOffset();    try {      curLineString=doc.getText(startOffs,currentLine.getEndOffset() - startOffs);    } catch (    BadLocationException ble) {      ble.printStackTrace();      return Printable.NO_SUCH_PAGE;    }    curLineString=curLineString.replaceAll("\n","");    if (tabSizeInSpaces == 0) {      curLineString=curLineString.replaceAll("\t","");    } else {      int tabIndex=curLineString.indexOf('\t');      while (tabIndex > -1) {        int spacesNeeded=tabSizeInSpaces - (tabIndex % tabSizeInSpaces);        String replacementString="";        for (int i=0; i < spacesNeeded; i++)         replacementString+=' ';        curLineString=curLineString.replaceFirst("\t",replacementString);        tabIndex=curLineString.indexOf('\t');      }    }    while (curLineString.length() > MAX_CHARS_PER_LINE) {      numPrintedLines++;      if (numPrintedLines > STARTING_LINE_NUMBER) {        g.drawString(curLineString.substring(0,MAX_CHARS_PER_LINE),xOffset,y);        y+=fontHeight;        if (numPrintedLines == STARTING_LINE_NUMBER + MAX_LINES_PER_PAGE)         return Printable.PAGE_EXISTS;      }      curLineString=curLineString.substring(MAX_CHARS_PER_LINE,curLineString.length());    }    currentDocLineNumber+=1;    numPrintedLines++;    if (numPrintedLines > STARTING_LINE_NUMBER) {      g.drawString(curLineString,xOffset,y);      y+=fontHeight;      if (numPrintedLines == STARTING_LINE_NUMBER + MAX_LINES_PER_PAGE)       return Printable.PAGE_EXISTS;    }  }  if (numPrintedLines > STARTING_LINE_NUMBER)   return Printable.PAGE_EXISTS;  return Printable.NO_SUCH_PAGE;}  }
class C{  public static double clamp(double val,double min,double max){  return Math.max(min,Math.min(max,val));}  }
class C{  public boolean nameExists(String name) throws Exception {  boolean exists;  int idx;  idx=findIndexByName(name);  if (idx == -1)   exists=false; else   exists=true;  return exists;}  }
class C{  private void privateRun(HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse){}  }
class C{  public static boolean canDisplay(Font f,String s){  int upTo=f.canDisplayUpTo(s);  if (upTo >= s.length() || upTo == -1)   return true; else   return false;}  }
class C{  public static Response jerseyError(WebApplicationException e){  if (e instanceof NotFoundException) {    NotFoundException notFoundException=(NotFoundException)e;    String errorMessage=null;    if (notFoundException.getResponse().getLocation() != null) {      errorMessage=notFoundException.getResponse().getLocation().toString();    }    ExternalException externalException=new ExternalException(ErrorCode.NOT_FOUND,errorMessage,null);    return externalException(externalException);  } else {    Response.ResponseBuilder builder=Response.status(e.getResponse().getStatus()).entity("");    addResponseHeaders(builder);    return builder.build();  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  @Override public View onCreateMediaControlView(Bundle savedInstanceState){  LayoutInflater inflater=getLayoutInflater();  View controls=inflater.inflate(R.layout.custom_media_route_controller_controls_dialog,null);  loadViews(controls);  mState=mCastManager.getPlaybackStatus();  updateMetadata();  updatePlayPauseState(mState);  setupCallbacks();  return controls;}  }
class C{  public void run(){synchronized (runLock) {    while (!runLockNotified) {      curValue+=5;      if (curValue > MAX_VALUE) {        curValue=0;      }      setValue(curValue);      try {        runLock.wait(100);      } catch (      InterruptedException ie) {      }    }    runLockNotified=false;  }}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.UNDEFINED_TYPE;}  }
class C{  @Override public void close(){  flush();  hasBeenClosed=true;}  }
class C{  public SQLWordPartDetector(IDocument document,SQLSyntaxManager syntaxManager,int documentOffset){  super(syntaxManager.getStructSeparator(),syntaxManager.getQuoteSymbol());  cursorOffset=documentOffset;  startOffset=documentOffset - 1;  endOffset=documentOffset;  int topIndex=0, documentLength=document.getLength();  try {    while (startOffset >= topIndex && isWordPart(document.getChar(startOffset))) {      startOffset--;    }    while (endOffset < documentLength && isWordPart(document.getChar(endOffset))) {      endOffset++;    }    int prevOffset=startOffset;    startOffset++;    wordPart=document.get(startOffset,documentOffset - startOffset);    fullWord=document.get(startOffset,endOffset - startOffset);    while (prevOffset >= topIndex) {      StringBuilder prevPiece=new StringBuilder();      while (prevOffset >= topIndex) {        char ch=document.getChar(prevOffset);        if (isWordPart(ch)) {          break;        } else         if (!Character.isWhitespace(ch)) {          delimiterOffset=prevOffset;        }        prevPiece.append(ch);        prevOffset--;      }      if (prevDelimiter == null) {        prevDelimiter=prevPiece.toString().trim();      }      for (      String delim : syntaxManager.getStatementDelimiters()) {        if (prevPiece.indexOf(delim) != -1) {          return;        }      }      int prevStartOffset=prevOffset + 1;      while (prevOffset >= topIndex) {        char ch=document.getChar(prevOffset);        if (isWordPart(ch)) {          prevOffset--;        } else {          prevOffset++;          break;        }      }      if (prevOffset < topIndex) {        prevOffset=topIndex;      }      String prevWord=document.get(prevOffset,prevStartOffset - prevOffset);      SQLDialect dialect=syntaxManager.getDialect();      if (dialect.isEntityQueryWord(prevWord) || dialect.isAttributeQueryWord(prevWord)) {        this.prevKeyWord=prevWord.toUpperCase(Locale.ENGLISH);        break;      }      if (prevWords == null) {        prevWords=new ArrayList<>();      }      prevWords.add(prevWord);      prevOffset--;    }  } catch (  BadLocationException e) {  }}  }
class C{  @Override public boolean hasError(){  return errorBuffer != null;}  }
class C{  public void insert(String str,int pos){  Document doc=getDocument();  if (doc != null) {    try {      doc.insertString(pos,str,null);    } catch (    BadLocationException e) {      throw new IllegalArgumentException(e.getMessage());    }  }}  }
class C{  public long insert(final IChunkedOrderedIterator<E> itr){  long n=0;  final IIndex ndx=getIndex(primaryKeyOrder);  @SuppressWarnings("unchecked") final ITupleSerializer<E,E> tupleSer=ndx.getIndexMetadata().getTupleSerializer();  final IKeyBuilder keyBuilder=ndx.getIndexMetadata().getKeyBuilder();  while (itr.hasNext()) {    final E e=itr.next();    final byte[] key=primaryKeyOrder.getKey(keyBuilder,e);    if (!ndx.contains(key)) {      ndx.insert(key,tupleSer.serializeVal(e));      if (log.isTraceEnabled())       log.trace("insert: element=" + e + ", key="+ BytesUtil.toString(key));      n++;    }  }  return n;}  }
class C{  @SuppressWarnings("unchecked") public CTraceFilterCreator(){  super(Lists.newArrayList(new MemoryPredicateGenerator(),new RegisterPredicateGenerator(),new PlainTextPredicateGenerator()));}  }
class C{  public static KeyStore loadKeyStore(String type,String file,String password){  try {    KeyStore keyStore=KeyStore.getInstance(type);    InputStream fis=getFile(file);    keyStore.load(fis,password.toCharArray());    fis.close();    return keyStore;  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public synchronized <M extends MVMap<K,V>,K,V>M openMap(String name,MVMap.MapBuilder<M,K,V> builder){  checkOpen();  String x=meta.get("name." + name);  int id;  long root;  HashMap<String,Object> c;  M map;  if (x != null) {    id=DataUtils.parseHexInt(x);    @SuppressWarnings("unchecked") M old=(M)maps.get(id);    if (old != null) {      return old;    }    map=builder.create();    String config=meta.get(MVMap.getMapKey(id));    c=New.hashMap();    c.putAll(DataUtils.parseMap(config));    c.put("id",id);    map.init(this,c);    root=getRootPos(meta,id);  } else {    c=New.hashMap();    id=++lastMapId;    c.put("id",id);    c.put("createVersion",currentVersion);    map=builder.create();    map.init(this,c);    markMetaChanged();    x=Integer.toHexString(id);    meta.put(MVMap.getMapKey(id),map.asString(name));    meta.put("name." + name,x);    root=0;  }  map.setRootPos(root,-1);  maps.put(id,map);  return map;}  }
class C{  Item newFieldItem(final String owner,final String name,final String desc){  key3.set(FIELD,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(FIELD,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public boolean isFinal(){  return this.isDeclaredFinal();}  }
class C{  public ProductDecoratorImpl(final ImageService imageService,final AttributableImageService productImageService,final ProductService productService,final I18NWebSupport i18NWebSupport,final Product productEntity,final String httpServletContextPath,final boolean withAttributes,final String defaultImageAttributeValue){  this.i18NWebSupport=i18NWebSupport;  if (productEntity != null) {    BeanUtils.copyProperties(productEntity,this);  }  this.httpServletContextPath=httpServletContextPath;  this.defaultImageAttributeValue=defaultImageAttributeValue;  if (withAttributes) {    this.attrValueMap=getAllAttributesAsMap();  } else {    this.attrValueMap=Collections.emptyMap();  }  this.productImageService=productImageService;  this.productService=productService;  this.imageService=imageService;}  }
class C{  void m(){  f++;  String g="f";}  }
class C{  private int calculateInstalledRank(){  Statement statement=new SimpleStatement("UPDATE " + keyspace.getName() + "."+ tableName+ COUNTS_TABLE_NAME_SUFFIX+ " SET count = count + 1"+ "WHERE name = 'installed_rank';");  session.execute(statement);  Select select=QueryBuilder.select("count").from(tableName + COUNTS_TABLE_NAME_SUFFIX);  select.where(eq("name","installed_rank"));  select.setConsistencyLevel(this.consistencyLevel);  ResultSet result=session.execute(select);  return (int)result.one().getLong("count");}  }
class C{  public JSONObject putOpt(String key,Object value) throws JSONException {  if (key != null && value != null) {    this.put(key,value);  }  return this;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("UpdateServlet.init");}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public void cacheName(String cacheName){  this.cacheName=cacheName;}  }
class C{  public UpdateConstraintException(ClassEnum classEnum,String businessKey){  super(generateMessage(classEnum,businessKey),classEnum,businessKey);}  }
class C{  public CProcessListModel(final ProcessList processList){  Preconditions.checkNotNull(processList,"IE01500: Processes argument can not be null");  m_processes=processList;}  }
class C{  public static void main(String[] args) throws Exception {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Cache query example started.");    CacheConfiguration<Long,Organization> orgCacheCfg=new CacheConfiguration<>(ORG_CACHE);    orgCacheCfg.setCacheMode(CacheMode.PARTITIONED);    orgCacheCfg.setIndexedTypes(Long.class,Organization.class);    CacheConfiguration<AffinityKey<Long>,Person> colPersonCacheCfg=new CacheConfiguration<>(COLLOCATED_PERSON_CACHE);    colPersonCacheCfg.setCacheMode(CacheMode.PARTITIONED);    colPersonCacheCfg.setIndexedTypes(AffinityKey.class,Person.class);    CacheConfiguration<AffinityKey<Long>,Person> personCacheCfg=new CacheConfiguration<>(PERSON_CACHE);    personCacheCfg.setCacheMode(CacheMode.PARTITIONED);    personCacheCfg.setIndexedTypes(Long.class,Person.class);    try (IgniteCache<Long,Organization> orgCache=ignite.getOrCreateCache(orgCacheCfg);IgniteCache<AffinityKey<Long>,Person> colPersonCache=ignite.getOrCreateCache(colPersonCacheCfg);IgniteCache<AffinityKey<Long>,Person> personCache=ignite.getOrCreateCache(personCacheCfg)){      initialize();      scanQuery();      sqlQuery();      sqlQueryWithJoin();      sqlQueryWithDistributedJoin();      textQuery();      sqlQueryWithAggregation();      sqlFieldsQuery();      sqlFieldsQueryWithJoin();    }  finally {      ignite.destroyCache(COLLOCATED_PERSON_CACHE);      ignite.destroyCache(PERSON_CACHE);      ignite.destroyCache(ORG_CACHE);    }    print("Cache query example finished.");  } }  }
class C{  private static void sparseProbabilisticOverlapTest(final ISchemaVersion schemaVersion) throws IOException {  final Writer output=openOutput(schemaVersion,"sparse_sparse",TestType.UNION);  final Random random=new Random(randomLong());  final HLL hll=newHLL(HLLType.EMPTY);  final HLL emptyHLL=newHLL(HLLType.EMPTY);  cumulativeUnionLine(output,hll,emptyHLL,schemaVersion);  for (int i=0; i < SPARSE_THRESHOLD; i++) {    final HLL sparseHLL=newHLL(HLLType.SPARSE);    final int registerIndex=Math.abs(random.nextInt()) % REGISTER_COUNT;    final int registerValue=((Math.abs(random.nextInt()) % REGISTER_MAX_VALUE) + 1);    final long rawValue=constructHLLValue(LOG2M,registerIndex,registerValue);    sparseHLL.addRaw(rawValue);    cumulativeUnionLine(output,hll,sparseHLL,schemaVersion);  }  output.flush();  output.close();}  }
class C{  public Pair(First first,Second second){  this.first=first;  this.second=second;}  }
class C{  public RandomizedSet(){  keyMap=new HashMap<Integer,Integer>();  valueMap=new HashMap<Integer,Integer>();}  }
class C{  private void attachPoolsToSLOBasedAutoTierPolicies(StoragePool pool,List<AutoTieringPolicy> newList,List<AutoTieringPolicy> updateList){  if (newList != null) {    for (    AutoTieringPolicy newPolicy : newList) {      newPolicy.addPool(pool.getId().toString());    }  }  if (updateList != null) {    for (    AutoTieringPolicy updatePolicy : updateList) {      updatePolicy.addPool(pool.getId().toString());    }  }}  }
class C{  public void info(Supplier<String> msgSupplier){  log(Level.INFO,msgSupplier);}  }
class C{  @Override public boolean isValidSelection(int minsPerWeek,DatePattern datePattern,TimePattern timePattern,int dayCode){  if (!isValidCombination(minsPerWeek,datePattern,timePattern))   return false;  if (datePattern.getType() != null && datePattern.getType() == DatePattern.sTypePatternSet) {    for (    DatePattern child : datePattern.findChildren())     if (hasDates(child,dayCode))     return true;    return false;  }  return hasDates(datePattern,dayCode);}  }
class C{  public void end(String namespace,String name) throws Exception {  NavigationRuleBean top=null;  try {    top=(NavigationRuleBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  FacesConfigBean fcb=(FacesConfigBean)digester.peek();  NavigationRuleBean old=fcb.getNavigationRule(top.getFromViewId());  if (old == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[NavigationRuleRule]{" + digester.getMatch() + "} New("+ top.getFromViewId()+ ")");    }    fcb.addNavigationRule(top);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[NavigationRuleRule]{" + digester.getMatch() + "} Merge("+ top.getFromViewId()+ ")");    }    mergeNavigationRule(top,old);  }}  }
class C{  public static ByteArrayList readAsBytes(InputStream is) throws IOException {  ByteArrayList buf=new ByteArrayList();  byte[] b=new byte[8192];  int nread=-1;  while ((nread=is.read(b)) >= 0) {    buf.add(b,0,nread);  }  return buf;}  }
class C{  protected void doParseEventAttributes(XMLEventParserContext ctx,XMLEvent event,Object... args) throws XMLStreamException {  Iterator iter=event.asStartElement().getAttributes();  if (iter == null)   return;  while (iter.hasNext()) {    this.doAddEventAttribute((Attribute)iter.next(),ctx,event,args);  }}  }
class C{  @SuppressWarnings("rawtypes") public static void createProjectLog(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();    String entryName=normalizeEntryName(entry);    if (entryName.startsWith(LOG_DIR)) {      FileUtils.copyInputStreamToFile(zip.getInputStream(entry),aRepository.getProjectLogFile(aProject));      LOG.info("Imported log for project [" + aProject.getName() + "] with id ["+ aProject.getId()+ "]");    }  }}  }
class C{  @Override public void onUnreadMessageCountChanged(int unreadMessageCount){  AppLog.i(this,"onUnreadMessageCountChanged()");  invalidateOptionsMenu();}  }
class C{  public boolean canImmediatelyFree(final int addr,final int size,final IAllocationContext context){  final int offset=((-addr) & RWStore.OFFSET_BITS_MASK);  final boolean committed=isCommitted(offset);  if (!m_pendingContextCommit && ((context == m_context) || (m_context == null && !context.isIsolated()))) {    return !committed;  } else   if (m_context != null) {    if (!committed)     throw new IllegalStateException("Attempt to free address with invalid context");    return false;  } else {    return false;  }}  }
class C{  public T caseLinkingOp_(LinkingOp_ object){  return null;}  }
class C{  public byte[] generateSignature() throws OpenStegoException {  Random rand=null;  Signature sig=null;  rand=new Random(StringUtil.passwordHash(this.config.getPassword()));  sig=new Signature(rand);  return sig.getSigData();}  }
class C{  public Builder withSession(long session){  response.session=Assert.argNot(session,session < 1,"session must be positive");  return this;}  }
class C{  private boolean createOffer(Player player,Item item,int price,int number){  Market shop=TradeCenterZoneConfigurator.getShopFromZone(player.getZone());  if (shop != null) {    Offer o=shop.createOffer(player,item,Integer.valueOf(price),Integer.valueOf(number));    if (o == null) {      return false;    }    StringBuilder message=new StringBuilder("Offer for some ");    message.append(item.getName());    message.append(" at ");    message.append(price);    message.append(" created. ");    String messageNumberOfOffers="You have now made " + Grammar.quantityplnoun(Integer.valueOf(shop.countOffersOfPlayer(player)),"offer","one") + ".";    player.sendPrivateText(message.toString() + messageNumberOfOffers);    return true;  }  return false;}  }
class C{  public boolean localNodeMaster(){  if (localNodeId == null) {    return false;  }  return localNodeId.equals(masterNodeId);}  }
class C{  public CheckBox(Image icon){  this("",icon);}  }
class C{  public static boolean isNumericCol(Column col){  int t=col.getType();  return t == Types.BIGINT || t == Types.DECIMAL || t == Types.DOUBLE || t == Types.FLOAT || t == Types.INTEGER || t == Types.NUMERIC || t == Types.REAL || t == Types.SMALLINT || t == Types.TINYINT;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  float f=getFloat(stack);  String ass=getString(stack);  stack.getUIMgrSafe().getVideoFrame().setVideoZoomY(f,VideoFrame.getAspectRatioCode(ass));  return null;}  }
class C{  private DigicoreNetwork buildSmallNetwork(){  DigicoreNetwork dn=new DigicoreNetwork();  DigicoreActivity da1=new DigicoreActivity("test",TimeZone.getTimeZone("GMT+2"),new Locale("en"));  da1.setCoord(new Coord(0.0,0.0));  da1.setFacilityId(Id.create(1,ActivityFacility.class));  DigicoreActivity da2=new DigicoreActivity("test",TimeZone.getTimeZone("GMT+2"),new Locale("en"));  da2.setCoord(new Coord(0.0,1.0));  da2.setFacilityId(Id.create(2,ActivityFacility.class));  DigicoreActivity da3=new DigicoreActivity("test",TimeZone.getTimeZone("GMT+2"),new Locale("en"));  da3.setCoord(new Coord(1.0,1.0));  da3.setFacilityId(Id.create(3,ActivityFacility.class));  DigicoreActivity da4=new DigicoreActivity("test",TimeZone.getTimeZone("GMT+2"),new Locale("en"));  da4.setCoord(new Coord(1.0,0.0));  da4.setFacilityId(Id.create(4,ActivityFacility.class));  dn.addArc(da1,da2);  dn.addArc(da1,da3);  dn.addArc(da1,da3);  dn.addArc(da3,da1);  dn.addArc(da4,da1);  dn.addArc(da4,da1);  dn.addArc(da4,da1);  return dn;}  }
class C{  public LocalizedText(String locale,String text){  this.locale=locale;  this.text=text;}  }
class C{  static void checkTypeRefAndPath(int typeRef,TypePath typePath){  int mask=0;switch (typeRef >>> 24) {case TypeReference.CLASS_TYPE_PARAMETER:case TypeReference.METHOD_TYPE_PARAMETER:case TypeReference.METHOD_FORMAL_PARAMETER:    mask=0xFFFF0000;  break;case TypeReference.FIELD:case TypeReference.METHOD_RETURN:case TypeReference.METHOD_RECEIVER:case TypeReference.LOCAL_VARIABLE:case TypeReference.RESOURCE_VARIABLE:case TypeReference.INSTANCEOF:case TypeReference.NEW:case TypeReference.CONSTRUCTOR_REFERENCE:case TypeReference.METHOD_REFERENCE:mask=0xFF000000;break;case TypeReference.CLASS_EXTENDS:case TypeReference.CLASS_TYPE_PARAMETER_BOUND:case TypeReference.METHOD_TYPE_PARAMETER_BOUND:case TypeReference.THROWS:case TypeReference.EXCEPTION_PARAMETER:mask=0xFFFFFF00;break;case TypeReference.CAST:case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:mask=0xFF0000FF;break;default :throw new IllegalArgumentException("Invalid type reference sort 0x" + Integer.toHexString(typeRef >>> 24));}if ((typeRef & ~mask) != 0) {throw new IllegalArgumentException("Invalid type reference 0x" + Integer.toHexString(typeRef));}if (typePath != null) {for (int i=0; i < typePath.getLength(); ++i) {int step=typePath.getStep(i);if (step != TypePath.ARRAY_ELEMENT && step != TypePath.INNER_TYPE && step != TypePath.TYPE_ARGUMENT && step != TypePath.WILDCARD_BOUND) {throw new IllegalArgumentException("Invalid type path step " + i + " in "+ typePath);}if (step != TypePath.TYPE_ARGUMENT && typePath.getStepArgument(i) != 0) {throw new IllegalArgumentException("Invalid type path step argument for step " + i + " in "+ typePath);}}}}  }
class C{  @Override public int read(final byte[] data,final int offset,final int length) throws IOException {  return m_InputStream.read(data,offset,length);}  }
class C{  public static boolean simplify(BasicBlock bb,IR ir){  boolean didSomething=false;  for (Enumeration<Instruction> branches=bb.enumerateBranchInstructions(); branches.hasMoreElements(); ) {    Instruction s=branches.nextElement();    if (Goto.conforms(s)) {    } else     if (IfCmp.conforms(s)) {      if (processIfCmp(ir,bb,s)) {        branches=bb.enumerateBranchInstructions();        bb.recomputeNormalOut(ir);        didSomething=true;      }    } else     if (IfCmp2.conforms(s)) {      if (processIfCmp2(ir,bb,s)) {        branches=bb.enumerateBranchInstructions();        bb.recomputeNormalOut(ir);        didSomething=true;      }    } else     if (LookupSwitch.conforms(s)) {      if (processLookupSwitch(ir,bb,s)) {        branches=bb.enumerateBranchInstructions();        bb.recomputeNormalOut(ir);        didSomething=true;      }    } else     if (TableSwitch.conforms(s)) {      if (processTableSwitch(ir,bb,s)) {        branches=bb.enumerateBranchInstructions();        bb.recomputeNormalOut(ir);        didSomething=true;      }    } else     if (InlineGuard.conforms(s)) {      if (processInlineGuard(ir,bb,s)) {        branches=bb.enumerateBranchInstructions();        bb.recomputeNormalOut(ir);        didSomething=true;      }    }  }  return didSomething;}  }
class C{  public static DefineBitsLossless createDefineBitsLossless(int[] pixels,int width,int height){  DefineBitsLossless defineBitsLossless=new DefineBitsLossless(TagValues.stagDefineBitsLossless2);  defineBitsLossless.format=DefineBitsLossless.FORMAT_24_BIT_RGB;  defineBitsLossless.width=width;  defineBitsLossless.height=height;  defineBitsLossless.data=new byte[pixels.length * 4];  for (int i=0; i < pixels.length; i++) {    int offset=i * 4;    int alpha=(pixels[i] >> 24) & 0xFF;    defineBitsLossless.data[offset]=(byte)alpha;    if (defineBitsLossless.data[offset] != 0) {      int red=(pixels[i] >> 16) & 0xFF;      defineBitsLossless.data[offset + 1]=(byte)((red * alpha) / 255);      int green=(pixels[i] >> 8) & 0xFF;      defineBitsLossless.data[offset + 2]=(byte)((green * alpha) / 255);      int blue=pixels[i] & 0xFF;      defineBitsLossless.data[offset + 3]=(byte)((blue * alpha) / 255);    }  }  return defineBitsLossless;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int i;  int progress;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    double[] data;    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] == noData) {          output.setValue(row,col,0);        } else {          output.setValue(row,col,data[col]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (numRows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static long remainder(long dividend,long divisor){  if (divisor < 0) {    if (compare(dividend,divisor) < 0) {      return dividend;    } else {      return dividend - divisor;    }  }  if (dividend >= 0) {    return dividend % divisor;  }  long quotient=((dividend >>> 1) / divisor) << 1;  long rem=dividend - quotient * divisor;  return rem - (compare(rem,divisor) >= 0 ? divisor : 0);}  }
class C{  public SimpleStatistics(){  super();}  }
class C{  @Override public void disconnect(){  log("Service Disconnected.");  mContext.unbindService(mServiceConnection);}  }
class C{  @Override public String toString(){  return "GammaDistribution(k=" + k + ", theta="+ theta+ ")";}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean hasDeniedPermissions(){  return !deniedCount.isEmpty();}  }
class C{  private static Couple<String> splitNameOfRemoteBranch(String branchName){  int firstSlash=branchName.indexOf('/');  String remoteName=firstSlash > -1 ? branchName.substring(0,firstSlash) : branchName;  String remoteBranchName=branchName.substring(firstSlash + 1);  return Couple.of(remoteName,remoteBranchName);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:18.895 -0500",hash_original_method="B9AF8185F4B8412B9E80F317F384108E",hash_generated_method="9425F6BBE5A615832A85DEB7FCBE8AFE") protected static void log(String s){  Log.d(TAG,s);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_BASE_TYPE:    setDelegationBaseType((SymbolTableEntryOriginal)null);  return;case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_SUPER_CLASS_STEPS:setDelegationSuperClassSteps(DELEGATION_SUPER_CLASS_STEPS_EDEFAULT);return;case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_TARGET:setDelegationTarget((SymbolTableEntryOriginal)null);return;case ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT:setDelegationTargetIsAbstract(DELEGATION_TARGET_IS_ABSTRACT_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public AccountHeaderBuilder withTranslucentStatusBar(boolean translucentStatusBar){  this.mTranslucentStatusBar=translucentStatusBar;  return this;}  }
class C{  public static void putKeyValuePair(Cursor realCursor,final Integer key,final String value) throws Exception {  realCursor.put(new DatabaseEntry(new ByteArrayConverterForInteger().toByteArray(key)),new DatabaseEntry(new ByteArrayConverterForString().toByteArray(value)));}  }
class C{  public static float difference(final float from,final float to){  return normalize(to - from + 180) - 180;}  }
class C{  public void addListener(final IDatabaseSettingsPanelListener listener){  listeners.addListener(listener);}  }
class C{  @Override public String toString(){  return ("Status = " + status + " HandshakeStatus = "+ handshakeStatus+ "\nbytesConsumed = "+ bytesConsumed+ " bytesProduced = "+ bytesProduced);}  }
class C{  private String buildUrl(String url){  if (!URLUtil.hasScheme(url)) {    return StringUtils.defaultIfEmpty(scheme,DEFAULT_SCHEME) + "://" + url;  } else   if (StringUtils.isNotEmpty(scheme)) {    return scheme + "://" + URLUtil.removeScheme(url);  }  return url;}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  public final void write(final byte new_name){  if (current_item + 1 >= max_size) {    checkSize(current_item + 1);  }  items[current_item]=new_name;  current_item++;}  }
class C{  public void mousePressed(MouseEvent e){synchronized (mouseLock) {    mouseX=StdDraw.userX(e.getX());    mouseY=StdDraw.userY(e.getY());    mousePressed=true;  }}  }
class C{  public static JSONValue value(Integer value){  return new JSONNumber(Integer.toString(value,10));}  }
class C{  public static int findOuter(Name ref,Typeref[] scopes){  for (int i=scopes.length - 1; i >= 1; i--) {    Type st=scopes[i].t;    Binding b=st.find(ref);    if (b != null)     return i;  }  Typeref st=TypeCache.instance().globals.get(ref);  if (st != null)   return -1;  if (scopes.length > 0 && scopes[0].t.find(ref) != null)   return 0;  return -1;}  }
class C{  public TinyDancerBuilder addFrameDataCallback(FrameDataCallback callback){  fpsConfig.frameDataCallback=callback;  return this;}  }
class C{  private void updateNumericalElements(final AbstractAttributeStatisticsModel model){  labelStatsValues.setVisible(false);  labelStatsMin.setText(Tools.formatIntegerIfPossible(((NumericalAttributeStatisticsModel)model).getMinimum()));  labelStatsMin.setToolTipText(labelStatsMin.getText());  labelStatsMax.setText(Tools.formatIntegerIfPossible(((NumericalAttributeStatisticsModel)model).getMaximum()));  labelStatsMax.setToolTipText(labelStatsMax.getText());  labelStatsAvg.setText(Tools.formatIntegerIfPossible(((NumericalAttributeStatisticsModel)model).getAverage()));  labelStatsAvg.setToolTipText(labelStatsAvg.getText());  labelStatsDeviation.setText(Tools.formatIntegerIfPossible(((NumericalAttributeStatisticsModel)model).getDeviation()));  labelStatsDeviation.setToolTipText(labelStatsDeviation.getText());}  }
class C{  public GermanStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public SignerInfo toASN1Structure(){  return info;}  }
class C{  public void process(Link link,Transform transform1,Convex convex,Transform transform2,Penetration penetration){  Vector2 n=penetration.getNormal();  Vector2 c=transform2.getTransformed(convex.getCenter());  Vector2 p1=transform1.getTransformed(link.getPoint1());  Vector2 p2=transform1.getTransformed(link.getPoint2());  Vector2 p0=link.getPoint0() != null ? transform1.getTransformed(link.getPoint0()) : null;  Vector2 p3=link.getPoint3() != null ? transform1.getTransformed(link.getPoint3()) : null;  boolean convex1=false;  boolean convex2=false;  Vector2 edge0=null;  Vector2 edge1=null;  Vector2 edge2=null;  Vector2 normal0=null;  Vector2 normal1=null;  Vector2 normal2=null;  Vector2 normal=null;  Vector2 upper=null;  Vector2 lower=null;  double offset0=0;  double offset1=0;  double offset2=0;  edge1=p1.to(p2);  edge1.normalize();  normal1=edge1.getLeftHandOrthogonalVector();  offset1=normal1.dot(p1.to(c));  if (p0 != null) {    edge0=p0.to(p1);    edge0.normalize();    normal0=edge0.getLeftHandOrthogonalVector();    convex1=edge0.cross(edge1) >= 0;    offset0=normal0.dot(p0.to(c));  }  if (p3 != null) {    edge2=p2.to(p3);    edge2.normalize();    normal2=edge2.getLeftHandOrthogonalVector();    convex2=edge1.cross(edge2) >= 0;    offset2=normal2.dot(p2.to(c));  }  if (p0 != null && p3 != null) {    if (convex1 && convex2) {      boolean front=offset0 >= 0 || offset1 >= 0 || offset2 >= 0;      if (front) {        normal=normal1;        lower=normal0;        upper=normal2;      } else {        normal=normal1.getNegative();        lower=normal;        upper=normal;      }    } else     if (convex1) {      boolean front=offset0 >= 0 || (offset1 >= 0 && offset2 >= 0);      if (front) {        normal=normal1;        lower=normal0;        upper=normal1;      } else {        normal=normal1.getNegative();        lower=normal2.getNegative();        upper=normal1.getNegative();      }    } else     if (convex2) {      boolean front=offset2 >= 0 || (offset0 >= 0 && offset1 >= 0);      if (front) {        normal=normal1;        lower=normal1;        upper=normal2;      } else {        normal=normal1.getNegative();        lower=normal1.getNegative();        upper=normal0.getNegative();      }    } else {      boolean front=offset0 >= 0 && offset1 >= 0 && offset2 >= 0;      if (front) {        normal=normal1;        lower=normal1;        upper=normal1;      } else {        normal=normal1.getNegative();        lower=normal2.getNegative();        upper=normal0.getNegative();      }    }  } else   if (p0 != null) {    if (convex1) {      boolean front=offset0 >= 0 || offset1 >= 0;      if (front) {        normal=normal1;        lower=normal0;        upper=normal1.getNegative();      } else {        normal=normal1.getNegative();        lower=normal1;        upper=normal1.getNegative();      }    } else {      boolean front=offset0 >= 0 && offset1 >= 0;      if (front) {        normal=normal1;        lower=normal1;        upper=normal1.getNegative();      } else {        normal=normal1.getNegative();        lower=normal1;        upper=normal0.getNegative();      }    }  } else   if (p3 != null) {    if (convex2) {      boolean front=offset1 >= 0 || offset2 >= 0;      if (front) {        normal=normal1;        lower=normal1.getNegative();        upper=normal2;      } else {        normal=normal1.getNegative();        lower=normal1.getNegative();        upper=normal1;      }    } else {      boolean front=offset1 >= 0 && offset2 >= 0;      if (front) {        normal=normal1;        lower=normal1.getNegative();        upper=normal1;      } else {        normal=normal1.getNegative();        lower=normal2.getNegative();        upper=normal1;      }    }  } else {    boolean front=offset1 >= 0;    if (front) {      normal=normal1;      lower=normal1.getNegative();      upper=normal1.getNegative();    } else {      normal=normal1.getNegative();      lower=normal1;      upper=normal1;    }  }  Vector2 perp=normal.getRightHandOrthogonalVector();  if (n.dot(perp) >= 0) {    if (n.difference(upper).dot(normal) < 0) {      penetration.normal=upper;      penetration.depth=upper.dot(n) * penetration.depth;    }  } else {    if (n.difference(lower).dot(normal) < 0) {      penetration.normal=lower;      penetration.depth=lower.dot(n) * penetration.depth;    }  }}  }
class C{  private void updatePortsWithNewPortsByNumber(Map<OFPort,OFPortDesc> newPortsByNumber){  if (!lock.writeLock().isHeldByCurrentThread()) {    throw new IllegalStateException("Method called without " + "holding writeLock");  }  Map<String,OFPortDesc> newPortsByName=new HashMap<String,OFPortDesc>();  List<OFPortDesc> newPortList=new ArrayList<OFPortDesc>();  List<OFPortDesc> newEnabledPortList=new ArrayList<OFPortDesc>();  List<OFPort> newEnabledPortNumbers=new ArrayList<OFPort>();  for (  OFPortDesc p : newPortsByNumber.values()) {    newPortList.add(p);    newPortsByName.put(p.getName().toLowerCase(),p);    if (!p.getState().contains(OFPortState.LINK_DOWN) && !p.getConfig().contains(OFPortConfig.PORT_DOWN)) {      newEnabledPortList.add(p);      newEnabledPortNumbers.add(p.getPortNo());    }  }  portsByName=Collections.unmodifiableMap(newPortsByName);  portsByNumber=Collections.unmodifiableMap(newPortsByNumber);  enabledPortList=Collections.unmodifiableList(newEnabledPortList);  enabledPortNumbers=Collections.unmodifiableList(newEnabledPortNumbers);  portList=Collections.unmodifiableList(newPortList);}  }
class C{  @ApiMethod(httpMethod="PUT") public final Recommendation updateRecommendation(final Recommendation recommendation,final User user) throws ServiceException {  EndpointUtil.throwIfNotAdmin(user);  ofy().save().entity(recommendation).now();  return recommendation;}  }
class C{  private static int partition(int[] array,int[] index,int l,int r){  double pivot=array[index[(l + r) / 2]];  int help;  while (l < r) {    while ((array[index[l]] < pivot) && (l < r)) {      l++;    }    while ((array[index[r]] > pivot) && (l < r)) {      r--;    }    if (l < r) {      help=index[l];      index[l]=index[r];      index[r]=help;      l++;      r--;    }  }  if ((l == r) && (array[index[r]] > pivot)) {    r--;  }  return r;}  }
class C{  public static ComponentUI createUI(JComponent x){  if (x == null) {    throw new NullPointerException("Must pass in a non-null component");  }  return new MetalMenuBarUI();}  }
class C{  public JobCpeBuilder(String name,String yamlString) throws BaleenException {  super(name,yamlString);}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof Kim)) {    return false;  }  Kim that=(Kim)obj;  if (this == that) {    return true;  }  if (this.hashcode != that.hashcode) {    return false;  }  return java.util.Arrays.equals(this.bytes,that.bytes);}  }
class C{  public void addAttributeTransformation(String targetAttName,String transformationDesc){  attributeTransformations.put(targetAttName.toLowerCase(),transformationDesc);}  }
class C{  private void logViewerstats(String channel){  if (Helper.isRegularChannel(channel)) {    ViewerStats stats=api.getStreamInfo(Helper.toStream(channel),null).getViewerStats(true);    chatLog.viewerstats(channel,stats);  }}  }
class C{  public boolean isLogicalFunction(){  return true;}  }
class C{  private float computeColor(float[][] colorDef,float position){  float leftPos=0.0f;  float rightPos=0.0f;  float left=0.0f;  float right=0.0f;  for (int i=0; i < colorDef.length; ++i) {    float[] checkPoint=colorDef[i];    float pos=checkPoint[0];    float leftLimit=checkPoint[1];    float rightLimit=checkPoint[2];    if (position > pos) {      leftPos=pos;      left=rightLimit;    } else     if (position < pos) {      rightPos=pos;      right=leftLimit;      break;    } else     if (position == pos) {      return leftLimit;    }  }  float valDiff=rightPos - leftPos;  float posRelative=position - leftPos;  float fraction=posRelative / valDiff;  float colorDiff=right - left;  return colorDiff * fraction + left;}  }
class C{  public static void showCenterScreen(Window window){  positionCenterScreen(window);  showWindow(window);}  }
class C{  private Descriptor validDescriptor(final Descriptor in) throws RuntimeOperationsException {  Descriptor clone;  boolean defaulted=(in == null);  if (defaulted) {    clone=new DescriptorSupport();    MODELMBEAN_LOGGER.finer("Null Descriptor, creating new.");  } else {    clone=(Descriptor)in.clone();  }  if (defaulted && clone.getFieldValue("name") == null) {    clone.setField("name",this.getName());    MODELMBEAN_LOGGER.finer("Defaulting Descriptor name to " + this.getName());  }  if (defaulted && clone.getFieldValue("descriptorType") == null) {    clone.setField("descriptorType","attribute");    MODELMBEAN_LOGGER.finer("Defaulting descriptorType to \"attribute\"");  }  if (clone.getFieldValue("displayName") == null) {    clone.setField("displayName",this.getName());    MODELMBEAN_LOGGER.finer("Defaulting Descriptor displayName to " + this.getName());  }  if (!clone.isValid()) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The isValid() method of the Descriptor object itself returned false," + "one or more required fields are invalid. Descriptor:" + clone.toString());  }  if (!getName().equalsIgnoreCase((String)clone.getFieldValue("name"))) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor \"name\" field does not match the object described. " + " Expected: " + this.getName() + " , was: "+ clone.getFieldValue("name"));  }  if (!"attribute".equalsIgnoreCase((String)clone.getFieldValue("descriptorType"))) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor \"descriptorType\" field does not match the object described. " + " Expected: \"attribute\" ," + " was: "+ clone.getFieldValue("descriptorType"));  }  return clone;}  }
class C{  public void shutDown(){  stunStack.removeSocket(localAddress);  sock.close();  sock=null;  localAddress=null;  requestSender=null;  this.started=false;}  }
class C{  private final int _outputRawMultiByteChar(int ch,char[] cbuf,int inputOffset,int inputLen) throws IOException {  if (ch >= SURR1_FIRST) {    if (ch <= SURR2_LAST) {      if (inputOffset >= inputLen) {        _reportError("Split surrogate on writeRaw() input (last character)");      }      _outputSurrogates(ch,cbuf[inputOffset]);      return (inputOffset + 1);    }  }  final byte[] bbuf=_outputBuffer;  bbuf[_outputTail++]=(byte)(0xe0 | (ch >> 12));  bbuf[_outputTail++]=(byte)(0x80 | ((ch >> 6) & 0x3f));  bbuf[_outputTail++]=(byte)(0x80 | (ch & 0x3f));  return inputOffset;}  }
class C{  public void addEvidence(Assignment assignment){  evidence.addAssignment(assignment);}  }
class C{  public ColorRange addBrightnessRange(float min,float max){  return addBrightnessRange(new FloatRange(min,max));}  }
class C{  private void closeDestination(State state){  try {    if (state.mStream != null) {      state.mStream.close();      state.mStream=null;    }  } catch (  IOException ex) {    if (Constants.LOGV) {      Log.v(Constants.TAG,"exception when closing the file after download : " + ex);    }  }}  }
class C{  public double numWithSideEffects() throws javax.xml.transform.TransformerException {  return num();}  }
class C{  public RequestHandle head(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,new HttpHead(getUrlWithQueryString(isUrlEncodingEnabled,url,params)),null,responseHandler,context);}  }
class C{  private static void offsetY2000TimeSource(){  TimeSource tsToday=new SystemTimeSource();  TimeSource tsYesterday=new OffsetTimeSource(Y2000,tsToday);  compareTimeSources(SYSTEM_SOURCE_NAME,"Y2000",tsToday,tsYesterday);}  }
class C{  public static Complex[] fft(Complex[] x){  int n=x.length;  if (n == 1) {    return new Complex[]{x[0]};  }  if (n % 2 != 0) {    throw new IllegalArgumentException("n is not a power of 2");  }  Complex[] even=new Complex[n / 2];  for (int k=0; k < n / 2; k++) {    even[k]=x[2 * k];  }  Complex[] q=fft(even);  Complex[] odd=even;  for (int k=0; k < n / 2; k++) {    odd[k]=x[2 * k + 1];  }  Complex[] r=fft(odd);  Complex[] y=new Complex[n];  for (int k=0; k < n / 2; k++) {    double kth=-2 * k * Math.PI / n;    Complex wk=new Complex(Math.cos(kth),Math.sin(kth));    y[k]=q[k].plus(wk.times(r[k]));    y[k + n / 2]=q[k].minus(wk.times(r[k]));  }  return y;}  }
class C{  final public SyntaxTreeNode Theorem() throws ParseException {  SyntaxTreeNode tn;  Token t;  bpa("Theorem");  expecting="THEOREM, PROPOSITION";switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case THEOREM:    t=jj_consume_token(THEOREM);  break;case PROPOSITION:t=jj_consume_token(PROPOSITION);break;default :jj_la1[52]=jj_gen;jj_consume_token(-1);throw new ParseException();}addHeir(new SyntaxTreeNode(mn,t));expecting="Identifier, Assume-Prove or Expression";if (jj_2_23(2)) {tn=Identifier();addHeir(tn);expecting="==";t=jj_consume_token(DEF);addHeir(new SyntaxTreeNode(mn,t));} else {;}belchDEF();if (jj_2_24(3)) {if (getToken(1).kind == ASSUME) {} else {jj_consume_token(-1);throw new ParseException();}tn=AssumeProve();} else if (jj_2_25(1)) {tn=Expression();} else {jj_consume_token(-1);throw new ParseException();}addHeir(tn);if (beginsProof(getToken(1))) {tn=Proof();addHeir(tn);} else {;}SyntaxTreeNode sn[]=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,N_Theorem,sn);}throw new Error("Missing return statement in function");}  }
class C{  public Report(int id,int type){  messageId=id;  this.type=type;}  }
class C{  protected SVGOMMissingGlyphElement(){}  }
class C{  public final SpaceEffGraphNode toNode(){  return _toNode;}  }
class C{  public Card play(Eights eights,Card prev){  Card card=searchForMatch(prev);  if (card == null) {    card=drawForMatch(eights,prev);  }  return card;}  }
class C{  public void show(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public List<Recommendation> scheduleStorageForVpoolChangeProtected(Volume volume,VirtualPool newVpool,List<VirtualArray> protectionVirtualArraysForVirtualPool){  _log.info(String.format("Schedule storage for vpool change to vpool [%s : %s] for volume [%s : %s]",newVpool.getLabel(),newVpool.getId().toString(),volume.getLabel(),volume.getId().toString()));  this.initResources();  VirtualPool currentVpool=dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());  VirtualArray varray=dbClient.queryObject(VirtualArray.class,volume.getVirtualArray());  SwapContainer container=this.swapSrcAndHAIfNeeded(varray,newVpool);  Project project=dbClient.queryObject(Project.class,volume.getProject());  VirtualPoolCapabilityValuesWrapper capabilities=new VirtualPoolCapabilityValuesWrapper();  capabilities.put(VirtualPoolCapabilityValuesWrapper.SIZE,volume.getCapacity());  capabilities.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,1);  capabilities.put(VirtualPoolCapabilityValuesWrapper.BLOCK_CONSISTENCY_GROUP,volume.getConsistencyGroup());  List<StoragePool> sourcePools=new ArrayList<StoragePool>();  List<StoragePool> haPools=new ArrayList<StoragePool>();  VirtualArray haVarray=vplexScheduler.getHaVirtualArray(container.getSrcVarray(),project,container.getSrcVpool());  VirtualPool haVpool=vplexScheduler.getHaVirtualPool(container.getSrcVarray(),project,container.getSrcVpool());  List<Recommendation> recommendations=Lists.newArrayList();  if (VirtualPool.vPoolSpecifiesRPVPlex(currentVpool) && VirtualPool.vPoolSpecifiesMetroPoint(newVpool)) {    _log.info("Scheduling storage for upgrade to MetroPoint, we need to place a HA/Stand-by/Secondary Journal");    Volume sourceBackingVolume=null;    Volume haBackingVolume=null;    if (null == volume.getAssociatedVolumes() || volume.getAssociatedVolumes().isEmpty()) {      _log.error("VPLEX volume {} has no backend volumes.",volume.forDisplay());      throw InternalServerErrorException.internalServerErrors.noAssociatedVolumesForVPLEXVolume(volume.forDisplay());    }    for (    String associatedVolumeId : volume.getAssociatedVolumes()) {      URI associatedVolumeURI=URI.create(associatedVolumeId);      Volume backingVolume=dbClient.queryObject(Volume.class,associatedVolumeURI);      if (backingVolume.getVirtualArray().equals(volume.getVirtualArray())) {        sourceBackingVolume=backingVolume;      } else {        haBackingVolume=backingVolume;      }    }    sourcePools.add(dbClient.queryObject(StoragePool.class,sourceBackingVolume.getPool()));    haPools.add(dbClient.queryObject(StoragePool.class,haBackingVolume.getPool()));    List<VirtualArray> tgtVarrays=RecoverPointScheduler.getProtectionVirtualArraysForVirtualPool(project,container.getSrcVpool(),dbClient,_permissionsHelper);    recommendations=createMetroPointRecommendations(container.getSrcVarray(),tgtVarrays,container.getSrcVpool(),haVarray,haVpool,project,capabilities,sourcePools,haPools,volume);  }  _log.info(String.format("%s %n",((RPProtectionRecommendation)recommendations.get(0)).toString(dbClient)));  return recommendations;}  }
class C{  protected void readContents(){  boolean done=false;  while (!(done || err())) {    int code=read();switch (code) {case 0x2C:      readImage();    break;case 0x21:  code=read();switch (code) {case 0xf9:  readGraphicControlExt();break;case 0xff:readBlock();String app="";for (int i=0; i < 11; i++) {app+=(char)block[i];}if (app.equals("NETSCAPE2.0")) {readNetscapeExt();} else skip();break;default :skip();}break;case 0x3b:done=true;break;case 0x00:break;default :status=STATUS_FORMAT_ERROR;}}}  }
class C{  public DESKeySpec(byte[] key) throws InvalidKeyException {  this(key,0);}  }
class C{  public void open(){  this.database=openHelper.getWritableDatabase();}  }
class C{  private void adjustByteCounts(){  if (byteCount1 > 0x1fffffffffffffffL) {    byteCount2+=(byteCount1 >>> 61);    byteCount1&=0x1fffffffffffffffL;  }}  }
class C{  private TaskSeriesCollection createCollection2(){  TaskSeriesCollection result=new TaskSeriesCollection();  TaskSeries s1=new TaskSeries("S1");  Task t1=new Task("Task 1",new Date(10),new Date(20));  t1.addSubtask(new Task("Task 1A",new Date(10),new Date(15)));  t1.addSubtask(new Task("Task 1B",new Date(16),new Date(20)));  t1.setPercentComplete(0.10);  s1.add(t1);  Task t2=new Task("Task 2",new Date(30),new Date(40));  t2.addSubtask(new Task("Task 2A",new Date(30),new Date(35)));  t2.addSubtask(new Task("Task 2B",new Date(36),new Date(40)));  t2.setPercentComplete(0.20);  s1.add(t2);  result.add(s1);  TaskSeries s2=new TaskSeries("S2");  Task t3=new Task("Task 3",new Date(50),new Date(60));  t3.addSubtask(new Task("Task 3A",new Date(50),new Date(55)));  t3.addSubtask(new Task("Task 3B",new Date(56),new Date(60)));  t3.setPercentComplete(0.30);  s2.add(t3);  result.add(s2);  return result;}  }
class C{  @Override protected void register(PackagerFactory packagerFactory){}  }
class C{  public static LocalList make(DalvInsnList insns){  int sz=insns.size();  MakeState state=new MakeState(sz);  for (int i=0; i < sz; i++) {    DalvInsn insn=insns.get(i);    if (insn instanceof LocalSnapshot) {      RegisterSpecSet snapshot=((LocalSnapshot)insn).getLocals();      state.snapshot(insn.getAddress(),snapshot);    } else     if (insn instanceof LocalStart) {      RegisterSpec local=((LocalStart)insn).getLocal();      state.startLocal(insn.getAddress(),local);    } else     if (insn instanceof LocalEnd) {      RegisterSpec local=((LocalEnd)insn).getLocal();      state.endLocal(insn.getAddress(),local);    }  }  LocalList result=state.finish();  if (DEBUG) {    debugVerify(result);  }  return result;}  }
class C{  public void subscribeTriggers() throws MetricNotSupportedException, MonitorServiceException {  List<AutoScalerPolicyTrigger> policyTriggers=policy.getPolicyTriggers();  if (policyTriggers == null) {    logger.warn("No triggers");    return;  }  for (  AutoScalerPolicyTrigger policyTrigger : policyTriggers) {    subscribeTrigger(policyTrigger);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static String mergeReferVariable(String mainRefer,String otherRefer){  if (mainRefer == null)   return otherRefer;  if (otherRefer == null)   return mainRefer;  if (mainRefer.equals(otherRefer))   return mainRefer;  final String[] mainStrs=mainRefer.split(",");  final String[] otherStrs=otherRefer.split(",");  for (int i=0, size=mainStrs.length; i < size; i++) {    sSet.add(mainStrs[i]);  }  for (int i=0, size=otherStrs.length; i < size; i++) {    sSet.add(otherStrs[i]);  }  StringBuilder sb=new StringBuilder();  for (  String str : sSet) {    sb.append(str).append(",");  }  sb.deleteCharAt(sb.length() - 1);  sSet.clear();  return sb.toString();}  }
class C{  protected List<MethodHelpDto> describeMethods(){  List<MethodHelpDto> result=new LinkedList<>();  Path endpointPath=getClass().getAnnotation(Path.class);  for (  Method method : getClass().getDeclaredMethods()) {    String parentPath=endpointPath == null ? null : endpointPath.value();    MethodHelpDto methodHelpDto=MethodHelpDto.fromMethodClass(parentPath,method);    if (methodHelpDto != null) {      result.add(methodHelpDto);    }  }  Collections.sort(result);  return result;}  }
class C{  @Override public String toString(){  return String.format("Tag '%s'",getName());}  }
class C{  private void readComponentConfiguration(ComponentContext context){  Dictionary<?,?> properties=context.getProperties();  boolean packetOutOnlyEnabled=isPropertyEnabled(properties,"packetOutOnly");  if (packetOutOnly != packetOutOnlyEnabled) {    packetOutOnly=packetOutOnlyEnabled;    log.info("Configured. Packet-out only forwarding is {}",packetOutOnly ? "enabled" : "disabled");  }  boolean packetOutOfppTableEnabled=isPropertyEnabled(properties,"packetOutOfppTable");  if (packetOutOfppTable != packetOutOfppTableEnabled) {    packetOutOfppTable=packetOutOfppTableEnabled;    log.info("Configured. Forwarding using OFPP_TABLE port is {}",packetOutOfppTable ? "enabled" : "disabled");  }  boolean ipv6ForwardingEnabled=isPropertyEnabled(properties,"ipv6Forwarding");  if (ipv6Forwarding != ipv6ForwardingEnabled) {    ipv6Forwarding=ipv6ForwardingEnabled;    log.info("Configured. IPv6 forwarding is {}",ipv6Forwarding ? "enabled" : "disabled");  }  boolean matchDstMacOnlyEnabled=isPropertyEnabled(properties,"matchDstMacOnly");  if (matchDstMacOnly != matchDstMacOnlyEnabled) {    matchDstMacOnly=matchDstMacOnlyEnabled;    log.info("Configured. Match Dst MAC Only is {}",matchDstMacOnly ? "enabled" : "disabled");  }  boolean matchVlanIdEnabled=isPropertyEnabled(properties,"matchVlanId");  if (matchVlanId != matchVlanIdEnabled) {    matchVlanId=matchVlanIdEnabled;    log.info("Configured. Matching Vlan ID is {}",matchVlanId ? "enabled" : "disabled");  }  boolean matchIpv4AddressEnabled=isPropertyEnabled(properties,"matchIpv4Address");  if (matchIpv4Address != matchIpv4AddressEnabled) {    matchIpv4Address=matchIpv4AddressEnabled;    log.info("Configured. Matching IPv4 Addresses is {}",matchIpv4Address ? "enabled" : "disabled");  }  boolean matchIpv4DscpEnabled=isPropertyEnabled(properties,"matchIpv4Dscp");  if (matchIpv4Dscp != matchIpv4DscpEnabled) {    matchIpv4Dscp=matchIpv4DscpEnabled;    log.info("Configured. Matching IPv4 DSCP and ECN is {}",matchIpv4Dscp ? "enabled" : "disabled");  }  boolean matchIpv6AddressEnabled=isPropertyEnabled(properties,"matchIpv6Address");  if (matchIpv6Address != matchIpv6AddressEnabled) {    matchIpv6Address=matchIpv6AddressEnabled;    log.info("Configured. Matching IPv6 Addresses is {}",matchIpv6Address ? "enabled" : "disabled");  }  boolean matchIpv6FlowLabelEnabled=isPropertyEnabled(properties,"matchIpv6FlowLabel");  if (matchIpv6FlowLabel != matchIpv6FlowLabelEnabled) {    matchIpv6FlowLabel=matchIpv6FlowLabelEnabled;    log.info("Configured. Matching IPv6 FlowLabel is {}",matchIpv6FlowLabel ? "enabled" : "disabled");  }  boolean matchTcpUdpPortsEnabled=isPropertyEnabled(properties,"matchTcpUdpPorts");  if (matchTcpUdpPorts != matchTcpUdpPortsEnabled) {    matchTcpUdpPorts=matchTcpUdpPortsEnabled;    log.info("Configured. Matching TCP/UDP fields is {}",matchTcpUdpPorts ? "enabled" : "disabled");  }  boolean matchIcmpFieldsEnabled=isPropertyEnabled(properties,"matchIcmpFields");  if (matchIcmpFields != matchIcmpFieldsEnabled) {    matchIcmpFields=matchIcmpFieldsEnabled;    log.info("Configured. Matching ICMP (v4 and v6) fields is {}",matchIcmpFields ? "enabled" : "disabled");  }  Integer flowTimeoutConfigured=getIntegerProperty(properties,"flowTimeout");  if (flowTimeoutConfigured == null) {    log.info("Flow Timeout is not configured, default value is {}",flowTimeout);  } else {    flowTimeout=flowTimeoutConfigured;    log.info("Configured. Flow Timeout is configured to {}",flowTimeout," seconds");  }  Integer flowPriorityConfigured=getIntegerProperty(properties,"flowPriority");  if (flowPriorityConfigured == null) {    log.info("Flow Priority is not configured, default value is {}",flowPriority);  } else {    flowPriority=flowPriorityConfigured;    log.info("Configured. Flow Priority is configured to {}",flowPriority);  }}  }
class C{  private static double calcDeltaMovement(final double clientPos,final double serverPos,final double delta){  final double moveErr=clientPos - serverPos;  final double moveCorrection=(delta - moveErr) / delta;  return (delta + delta * moveCorrection) / 2;}  }
class C{  public void dispose(){  if (validationStatus != null) {    validationStatus.removeDisposeListener(disposeListener);    validationStatus.removeValueChangeListener(statusChangeListener);    validationStatus=null;  }  if (targets != null) {    targets.removeDisposeListener(disposeListener);    targets.removeListChangeListener(targetsChangeListener);    targets=null;  }  disposeListener=null;  statusChangeListener=null;  targetsChangeListener=null;  if (targetDecorations != null) {    for (Iterator<TargetDecoration> it=targetDecorations.iterator(); it.hasNext(); ) {      it.next().dispose();    }    targetDecorations.clear();    targetDecorations=null;  }}  }
class C{  public DSAPrivateKeyImpl(PKCS8EncodedKeySpec keySpec) throws InvalidKeySpecException {  super("DSA");  AlgorithmIdentifier ai;  ThreeIntegerSequence threeInts=null;  String alg, algName;  byte[] encoding=keySpec.getEncoded();  PrivateKeyInfo privateKeyInfo=null;  try {    privateKeyInfo=(PrivateKeyInfo)PrivateKeyInfo.ASN1.decode(encoding);  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode keySpec encoding: " + e);  }  try {    x=new BigInteger((byte[])ASN1Integer.getInstance().decode(privateKeyInfo.getPrivateKey()));  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode parameters: " + e);  }  ai=privateKeyInfo.getAlgorithmIdentifier();  try {    threeInts=(ThreeIntegerSequence)ThreeIntegerSequence.ASN1.decode(ai.getParameters());  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode parameters: " + e);  }  p=new BigInteger(threeInts.p);  q=new BigInteger(threeInts.q);  g=new BigInteger(threeInts.g);  params=new DSAParameterSpec(p,q,g);  setEncoding(encoding);  alg=ai.getAlgorithm();  algName=AlgNameMapper.map2AlgName(alg);  setAlgorithm(algName == null ? alg : algName);}  }
class C{  private String parsePid(String tool,OutputAnalyzer output) throws Exception {  String[] lines=output.getOutput().split(Utils.NEW_LINE);  String pid=null;  int count=0;  String processName=tool;  if (tool == "rmiregistry") {    processName="registryimpl";  }  Pattern toolInJpsPattern=Pattern.compile("^\\d+\\s{1}" + processName + "\\s{1}.*-dparent\\.pid\\."+ ProcessTools.getProcessId()+ ".*");  for (  String line : lines) {    if (toolInJpsPattern.matcher(line.toLowerCase()).matches()) {      pid=line.split(" ")[0];      count++;    }  }  if (count > 1) {    throw new Exception("Expected one " + tool + " process, got "+ count+ ". Test will be canceled.");  }  return pid;}  }
class C{  public String asPlaintext(){  if (object.containsKey("text")) {    Object obj=object.get("text");    if (obj instanceof String) {      return (String)obj;    }  }  return "";}  }
class C{  public ColorAnimator(){  super();  setColorFields(DEFAULTS);}  }
class C{  public int indentationMultiplier(){  return style.indentationMultiplier();}  }
class C{  public Copies(int value){  super(value,1,Integer.MAX_VALUE);}  }
class C{  public Rfci(IndependenceTest independenceTest,List<Node> searchVars){  if (independenceTest == null || knowledge == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;  this.variables.addAll(independenceTest.getVariables());  Set<Node> remVars=new HashSet<>();  for (  Node node1 : this.variables) {    boolean search=false;    for (    Node node2 : searchVars) {      if (node1.getName().equals(node2.getName())) {        search=true;      }    }    if (!search) {      remVars.add(node1);    }  }  this.variables.removeAll(remVars);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.PRECONDITION___NAME_1:    return getName_1();case UmplePackage.PRECONDITION___CONSTRAINT_1:  return getConstraint_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected void printAttributeSummary(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  String str="";  if (numericPredictor) {    str+=" numeric";  }  if (nominalPredictor) {    if (str.length() > 0) {      str+=" &";    }    str+=" nominal";  }  if (stringPredictor) {    if (str.length() > 0) {      str+=" &";    }    str+=" string";  }  if (datePredictor) {    if (str.length() > 0) {      str+=" &";    }    str+=" date";  }  if (relationalPredictor) {    if (str.length() > 0) {      str+=" &";    }    str+=" relational";  }  str+=" predictors)";switch (classType) {case Attribute.NUMERIC:    str=" (numeric class," + str;  break;case Attribute.NOMINAL:str=" (nominal class," + str;break;case Attribute.STRING:str=" (string class," + str;break;case Attribute.DATE:str=" (date class," + str;break;case Attribute.RELATIONAL:str=" (relational class," + str;break;}print(str);}  }
class C{  public boolean isUnshared(){  return unshared;}  }
class C{  private Set<UUID> collectCandidateResourceUUIDsFromAlternateIds(Resource resource){  Set<UUID> ls=new HashSet<UUID>();  if (resource.getEml() != null) {    List<String> ids=resource.getEml().getAlternateIdentifiers();    for (    String id : ids) {      try {        UUID uuid=UUID.fromString(id);        ls.add(uuid);      } catch (      IllegalArgumentException e) {      }    }  }  return ls;}  }
class C{  @Override public String name(){  return U.gridEventName(type());}  }
class C{  public boolean isEcho(){  return echo;}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  public void testManyEvents() throws Exception {  int maxEvents=5000000;  TungstenProperties config=helper.createSimpleRuntime();  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  Pipeline pipeline=runtime.getPipeline();  Stage stage0=pipeline.getStages().get(0);  stage0.setLoggingInterval(1000000);  ExtractorWrapper ew=(ExtractorWrapper)stage0.getExtractor0();  DummyExtractor de=(DummyExtractor)ew.getExtractor();  de.setNTrx(maxEvents);  ApplierWrapper aw=(ApplierWrapper)stage0.getApplier0();  DummyApplier da=(DummyApplier)aw.getApplier();  da.setStoreAppliedEvents(false);  pipeline.start(new MockEventDispatcher());  Future<ReplDBMSHeader> future=pipeline.watchForProcessedSequenceNumber(maxEvents - 1);  ReplDBMSHeader matchingEvent=future.get(600,TimeUnit.SECONDS);  assertEquals("Applied sequence number matches",maxEvents - 1,matchingEvent.getSeqno());  pipeline.shutdown(false);  pipeline.release(runtime);}  }
class C{  synchronized void startRunningImages(){  queue.removeAllElements();  Vector urls=new Vector();  for (Enumeration e=images.keys(); e.hasMoreElements(); ) {    Component imgComp=(Component)e.nextElement();    String imageUrl=(String)images.get(imgComp);    int urlIndex=urls.indexOf(imageUrl);    if (urlIndex != -1) {      ResourceThread t=(ResourceThread)queue.elementAt(urlIndex);      t.addLabel(imgComp);    } else {      ResourceThread t=new ResourceThread(imageUrl,imgComp,htmlC,this);      queue.addElement(t);      urls.addElement(imageUrl);    }  }  urls=null;  images=new Hashtable();  if (!startDequeue()) {    htmlC.setPageStatus(HTMLCallback.STATUS_COMPLETED);  }}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,short[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  public AbstractReadWriteLockManager(boolean trackLocks){  boolean trace=trackLocks || Properties.lockTrackingEnabled();  activeWriter=new LockManager(trace);  activeReaders=new LockManager(trace);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final CC growPrioX(int p){  hor.setGrowPriority(p);  return this;}  }
class C{  public static Angle computeVerticalFieldOfView(Angle horizontalFieldOfView,java.awt.Rectangle viewport){  if (horizontalFieldOfView == null) {    String message=Logging.getMessage("nullValue.FOVIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (viewport == null) {    String message=Logging.getMessage("nullValue.ViewportIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double aspectRatio=viewport.getHeight() / viewport.getWidth();  double distanceToNearPlane=1d / horizontalFieldOfView.tanHalfAngle();  double verticalFieldOfViewRadians=2d * Math.atan(aspectRatio / distanceToNearPlane);  return Angle.fromRadians(verticalFieldOfViewRadians);}  }
class C{  public boolean isCellEditable(int row,int column){  return false;}  }
class C{  @Override public void onPan(float dx,float dy){  mMatrixHelper.translate(getMeasuredWidth(),getMeasuredHeight(),dx,dy);}  }
class C{  protected SelectedTag defaultInputOrder(){  return new SelectedTag(ORDERED,TAGS_INPUTORDER);}  }
class C{  protected void emit_S_Equations_SemicolonKeyword_3_1_or___LeftCurlyBracketKeyword_3_0_0_RightCurlyBracketKeyword_3_0_2__(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  @Override public boolean isDefined(){  return true;}  }
class C{  public Image subImage(int x,int y,int width,int height,boolean processAlpha){  int[] arr=new int[width * height];  getRGB(arr,0,x,y,width,height);  Image i=new Image(Display.impl.createImage(arr,width,height));  i.opaque=opaque;  i.opaqueTested=opaqueTested;  return i;}  }
class C{  public static void llenarInformacionError(InformacionError ie,int codigoError,Exception e){  llenarInformacionError(ie,codigoError + "",e);}  }
class C{  @Override public double calculate_K(int[] x_index,double[] x_att,int[] y_index,double[] y_att){  double expression=norm2(x_index,x_att,y_index,y_att) / sigma;  if (expression > 1) {    return 0.0d;  } else {    double minus=1.0d - expression;    return Math.pow(minus,degree);  }}  }
class C{  public static void convertToBinary(File in,File out) throws IOException, ParserConfigurationException, ParseException, SAXException, PropertyListFormatException {  NSObject root=parse(in);  saveAsBinary(root,out);}  }
class C{  private Groups(){}  }
class C{  public long startOffset(){  return start;}  }
class C{  public boolean isStopScrollWhenTouch(){  return stopScrollWhenTouch;}  }
class C{  public void putLong(long i){  ensureCapacity(8);  byte[] b=this.byteBuffer;  b[this.position++]=(byte)(i & 0xff);  b[this.position++]=(byte)(i >>> 8);  b[this.position++]=(byte)(i >>> 16);  b[this.position++]=(byte)(i >>> 24);  b[this.position++]=(byte)(i >>> 32);  b[this.position++]=(byte)(i >>> 40);  b[this.position++]=(byte)(i >>> 48);  b[this.position++]=(byte)(i >>> 56);}  }
class C{  protected List<DecompoundedWord> makeSplit(String aWord){  List<DecompoundedWord> returnList=new ArrayList<DecompoundedWord>();  if (aWord.length() - 5 <= 0) {    DecompoundedWord s=new DecompoundedWord();    s.appendSplitElement(new Fragment(aWord));    returnList.add(s);    return returnList;  }  int[] forward=new int[aWord.length() - 2];  int[] backward=new int[aWord.length() - 2];  int[] diffForward=new int[aWord.length() - 3];  int[] diffBackward=new int[aWord.length() - 3];  boolean[] maxForward=new boolean[aWord.length() - 5];  boolean[] maxBackward=new boolean[aWord.length() - 5];  for (int i=2; i < aWord.length(); i++) {    String subword=aWord.substring(0,i + 1);    forward[i - 2]=forwardTrie.getSuccessors(subword);  }  for (int i=aWord.length() - 3; i > -1; i--) {    String subword=aWord.substring(i);    backward[i]=backwardTrie.getSuccessors(new StringBuffer(subword).reverse().toString());  }  for (int i=1; i < forward.length; i++) {    diffForward[i - 1]=forward[i - 1] - forward[i];  }  for (int i=backward.length - 2; i > -1; i--) {    diffBackward[i]=backward[i + 1] - backward[i];  }  for (int i=1; i < diffForward.length - 1; i++) {    if (diffForward[i - 1] < diffForward[i] && diffForward[i] > diffForward[i + 1]) {      maxForward[i - 1]=true;    } else {      maxForward[i - 1]=false;    }  }  for (int i=diffBackward.length - 2; i > 0; i--) {    if (diffBackward[i - 1] < diffBackward[i] && diffBackward[i] > diffBackward[i + 1]) {      maxBackward[i - 1]=true;    } else {      maxBackward[i - 1]=false;    }  }  List<Integer> splitPos=new ArrayList<Integer>();  for (int i=0; i < maxForward.length - 3; i++) {    boolean maxF=maxForward[i];    boolean maxB=maxBackward[i + 2];    if (maxF && maxB) {      splitPos.add(i + 4);    }  }  if (splitPos.size() > 0) {    for (    Integer pos : splitPos) {      DecompoundedWord s=new DecompoundedWord();      s.appendSplitElement(new Fragment(aWord.substring(0,pos)));      s.appendSplitElement(new Fragment(aWord.substring(pos)));      returnList.addAll(checkForMorphemes(s));    }  } else {    DecompoundedWord s=new DecompoundedWord();    s.appendSplitElement(new Fragment(aWord));    returnList.add(s);  }  return returnList;}  }
class C{  public static void recycleNodes(Collection<AccessibilityNodeInfoCompat> nodes){  if (nodes == null) {    return;  }  for (  AccessibilityNodeInfoCompat node : nodes) {    if (node != null) {      node.recycle();    }  }  nodes.clear();}  }
class C{  protected ShaderVar addGlobal(IGlobalShaderVar var,int index){  return addGlobal(var.getVarString() + Integer.toString(index),var.getDataType());}  }
class C{  public void writeTo(Writer out) throws IOException {  if (this.writer != null) {    throw new UnsupportedOperationException("writer not null");  }  out.write(buf,0,count);}  }
class C{  private void viewWarnings(){  createLogWindow("guiButtonViewWarnings",m_warningLog,Color.BLUE);}  }
class C{  public static boolean canDockSouth(List constraints){  for (Iterator iter=constraints.iterator(); iter.hasNext(); ) {    DockConstraint dc=(DockConstraint)iter.next();    if (!dc.canDockSouth())     return false;  }  return true;}  }
class C{  public AuthorityKeyIdentifier(byte[] keyIdentifier,GeneralNames name,BigInteger serialNumber){  this.keyidentifier=(keyIdentifier != null) ? new DEROctetString(keyIdentifier) : null;  this.certissuer=name;  this.certserno=(serialNumber != null) ? new ASN1Integer(serialNumber) : null;}  }
class C{  public FilterEditorException(final Throwable cause){  super(cause);}  }
class C{  private Filter createGroupObjectClassFilter(){  OrFilter groupObjectClassFilter=null;  if (_type == ProvidersType.ad) {    groupObjectClassFilter=new OrFilter();    final Filter localObjectClassFilter=new EqualsFilter("objectClass","group");    groupObjectClassFilter.or(localObjectClassFilter);  } else {    if (shouldSearchGroupInLDAP()) {      groupObjectClassFilter=new OrFilter();      for (      String objectClass : this._groupObjectClasses) {        final Filter localObjectClassFilter=new EqualsFilter("objectClass",objectClass);        groupObjectClassFilter.or(localObjectClassFilter);      }    }  }  return groupObjectClassFilter;}  }
class C{  public Unknown(byte dataType,IoBuffer data){  super(Type.SYSTEM);  this.dataType=dataType;  this.data=data;}  }
class C{  public BulgarianAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  public final char yycharat(int pos){  return zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public static boolean isRequestFromLoadBalancer(final HttpServletRequest req){  boolean result=false;  if (req != null) {    String lbFlag=req.getHeader(FORWARDED_HOST_HEADER);    if (lbFlag != null) {      result=true;    }  }  return result;}  }
class C{  public boolean hasMetrics(){  return hasRepeatingExtension(Metric.class);}  }
class C{  private void add(String value){  if ((numberOfArgs > 0) && (values.size() > (numberOfArgs - 1))) {    throw new RuntimeException("Cannot add value, list full.");  }  values.add(value);}  }
class C{  public String toString(){  return image;}  }
class C{  public NodeSetDTM(int node,DTMManager dtmManager){  super();  m_manager=dtmManager;  addNode(node);}  }
class C{  public static IReorgDestination createDestination(Object destination){  return createDestination(destination,IReorgDestination.LOCATION_ON);}  }
class C{  OFSwitchHandshakeHandler(@Nonnull IOFConnectionBackend connection,@Nonnull OFFeaturesReply featuresReply,@Nonnull IOFSwitchManager switchManager,@Nonnull RoleManager roleManager,@Nonnull Timer timer){  Preconditions.checkNotNull(connection,"connection");  Preconditions.checkNotNull(featuresReply,"featuresReply");  Preconditions.checkNotNull(switchManager,"switchManager");  Preconditions.checkNotNull(roleManager,"roleManager");  Preconditions.checkNotNull(timer,"timer");  Preconditions.checkArgument(connection.getAuxId().equals(OFAuxId.MAIN),"connection must be MAIN connection but is %s",connection);  this.switchManager=switchManager;  this.roleManager=roleManager;  this.mainConnection=connection;  this.auxConnections=new ConcurrentHashMap<OFAuxId,IOFConnectionBackend>();  this.featuresReply=featuresReply;  this.timer=timer;  this.switchManagerCounters=switchManager.getCounters();  this.factory=OFFactories.getFactory(featuresReply.getVersion());  this.roleChanger=new RoleChanger(DEFAULT_ROLE_TIMEOUT_NS);  setState(new InitState());  this.pendingPortStatusMsg=new ArrayList<OFPortStatus>();  connection.setListener(this);}  }
class C{  private CompositeTransactionImp createCT(String tid,CoordinatorImp coordinator,Stack<CompositeTransaction> lineage,boolean serial) throws SysException {  if (LOGGER.isTraceEnabled())   LOGGER.logTrace("Creating composite transaction: " + tid);  CompositeTransactionImp ct=new CompositeTransactionImp(this,lineage,tid,serial,coordinator);  setTidToTx(ct.getTid(),ct);  return ct;}  }
class C{  public static String createReplacementOrder(HttpServletRequest request,HttpServletResponse response){  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  Delegator delegator=(Delegator)request.getAttribute("delegator");  HttpSession session=request.getSession();  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  ShoppingCart cart=(ShoppingCart)request.getSession().getAttribute("shoppingCart");  Map<String,Object> context=cart.makeCartMap(dispatcher,false);  String originalOrderId=request.getParameter("orderId");  List<GenericValue> orderAdjustments=UtilGenerics.checkList(context.get("orderAdjustments"));  List<GenericValue> orderItems=UtilGenerics.checkList(context.get("orderItems"));  OrderReadHelper orderReadHelper=new OrderReadHelper(orderAdjustments,orderItems);  BigDecimal grandTotal=orderReadHelper.getOrderGrandTotal();  if (grandTotal.compareTo(new BigDecimal(0)) != 0) {    GenericValue adjustment=delegator.makeValue("OrderAdjustment");    adjustment.set("orderAdjustmentTypeId","REPLACE_ADJUSTMENT");    adjustment.set("amount",grandTotal.negate());    adjustment.set("comments","ReShip Order for Order #" + originalOrderId);    adjustment.set("createdDate",UtilDateTime.nowTimestamp());    adjustment.set("createdByUserLogin",userLogin.getString("userLoginId"));    cart.addAdjustment(adjustment);  }  List<ShoppingCartItem> cartLines=cart.items();  for (  ShoppingCartItem sci : cartLines) {    int index=cart.getItemIndex(sci);    try {      GenericValue orderItem=EntityQuery.use(delegator).from("OrderItem").where("orderId",originalOrderId,"isPromo",sci.getIsPromo() ? "Y" : "N","productId",sci.getProductId(),"orderItemTypeId",sci.getItemType()).queryFirst();      if (UtilValidate.isNotEmpty(orderItem)) {        sci.setAssociatedOrderId(orderItem.getString("orderId"));        sci.setAssociatedOrderItemSeqId(orderItem.getString("orderItemSeqId"));        sci.setOrderItemAssocTypeId("REPLACEMENT");        cart.addItem(index,sci);      }    } catch (    GenericEntityException e) {      Debug.logError(e,module);    }catch (    CartItemModifyException e) {      Debug.logError(e.getMessage(),module);    }  }  String result=createOrder(request,response);  if ("error".equals(result)) {    return "error";  } else {    return "success";  }}  }
class C{  private void populateNonCombatSea(final boolean nonCombat,final GameData data,final List<Collection<Unit>> moveUnits,final List<Route> moveRoutes,final PlayerID player){  final Route amphibRoute=getAmphibRoute(player,data);  Territory firstSeaZoneOnAmphib=null;  Territory lastSeaZoneOnAmphib=null;  if (amphibRoute != null) {    firstSeaZoneOnAmphib=amphibRoute.getAllTerritories().get(1);    lastSeaZoneOnAmphib=amphibRoute.getAllTerritories().get(amphibRoute.numberOfSteps() - 1);  }  final Match<Unit> ownedAndNotMoved=new CompositeMatchAnd<>(Matches.unitIsOwnedBy(player),Matches.unitHasNotMoved);  for (  final Territory t : data.getMap()) {    if (t.isWater()) {      if (t.getUnits().someMatch(Matches.UnitIsLand)) {        if (lastSeaZoneOnAmphib != null) {          final Route r=getMaxSeaRoute(data,t,lastSeaZoneOnAmphib,player);          if (r != null && r.numberOfSteps() > 0) {            moveRoutes.add(r);            final List<Unit> unitsToMove=t.getUnits().getMatches(Matches.unitIsOwnedBy(player));            moveUnits.add(unitsToMove);          }        }      }      if (nonCombat && t.getUnits().someMatch(ownedAndNotMoved)) {        if (firstSeaZoneOnAmphib != null) {          final Route r=getMaxSeaRoute(data,t,firstSeaZoneOnAmphib,player);          moveRoutes.add(r);          moveUnits.add(t.getUnits().getMatches(ownedAndNotMoved));        }      }    }  }}  }
class C{  private static byte doEncodeOpcode(byte b,WsMessage message){switch (message.getKind()) {case TEXT:{      b|=Opcode.TEXT.getCode();      break;    }case BINARY:{    b|=Opcode.BINARY.getCode();    break;  }case PING:{  b|=Opcode.PING.getCode();  break;}case PONG:{b|=Opcode.PONG.getCode();break;}case CLOSE:{b|=Opcode.CLOSE.getCode();break;}default :throw new IllegalArgumentException("Unrecognized frame type: " + message.getKind());}return b;}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.642 -0400",hash_original_method="DE40F403B4AA3B3194A9FBF22582153E",hash_generated_method="797BA1D0D041A26281B5AB9F4D6EDF41") @Override public int read() throws IOException {  for (; ; ) {    if (encoderOut.hasRemaining()) {      return encoderOut.get() & 0xFF;    } else {      fillBuffer();      if (endOfInput && !encoderOut.hasRemaining()) {        return -1;      }    }  }}  }
class C{  public ParallelTaskBuilder prepareHttpPost(String url){  reinitIfClosed();  ParallelTaskBuilder cb=new ParallelTaskBuilder();  cb.getHttpMeta().setHttpMethod(HttpMethod.POST);  cb.getHttpMeta().setRequestUrlPostfix(url);  return cb;}  }
class C{  public void forwardEvent(EventType eventType,Object data){  dispatch(new AppEvent(eventType,data));}  }
class C{  private void verifyNewHAVpoolForHAVpoolUpdate(VirtualPool vPoolBeingUpdated,String newHAVpoolId){  URI newHAVpoolURI=URI.create(newHAVpoolId);  VirtualPool newHAVpool=_dbClient.queryObject(VirtualPool.class,newHAVpoolURI);  if (newHAVpool == null) {    throw APIException.badRequests.haVpoolForVpoolUpdateDoesNotExist(newHAVpoolId);  }  if (newHAVpool.getInactive()) {    throw APIException.badRequests.haVpoolForVpoolUpdateIsInactive(newHAVpool.getLabel());  }  StringMap newHAVpoolHAMap=newHAVpool.getHaVarrayVpoolMap();  if ((newHAVpoolHAMap == null) || (newHAVpoolHAMap.isEmpty())) {    return;  }  String newHAVpoolHAVpoolId=newHAVpoolHAMap.get(newHAVpoolHAMap.keySet().iterator().next());  if (!NullColumnValueGetter.isNotNullValue(newHAVpoolHAVpoolId)) {    return;  }  VirtualPool newHAVpoolHAVpool=_dbClient.queryObject(VirtualPool.class,URI.create(newHAVpoolHAVpoolId));  if (newHAVpoolHAVpool == null) {    throw APIException.badRequests.haVpoolForNewHAVpoolForVpoolUpdateDoesNotExist(newHAVpoolHAVpoolId,newHAVpool.getLabel());  }  if (newHAVpoolHAVpool.getId().equals(vPoolBeingUpdated.getId())) {    throw APIException.badRequests.haVpoolForVpoolUpdateHasInvalidHAVpool(newHAVpool.getLabel());  }}  }
class C{  public static final Jama.Matrix dsigma(Jama.Matrix A){  double A_[][]=A.getArray();  double X[][]=new double[A_.length][A_[0].length];  for (int i=0; i < A_.length; i++) {    for (int j=0; j < A_[i].length; j++) {      X[i][j]=dsigma(A_[i][j]);    }  }  return new Jama.Matrix(X);}  }
class C{  public static long doubleSign(double d){  if (((Double.doubleToRawLongBits(d) >> 63) & 1) == 1) {    return -1;  } else {    return 1;  }}  }
class C{  public ReplDBMSEvent eventFromStatement(long seqno,String defaultSchema,String query){  return eventFromStatement(seqno,defaultSchema,query,0,true);}  }
class C{  public void add(char element){  if (size == elements.length) {    ensureCapacity(size + 1);  }  elements[size++]=element;}  }
class C{  public void rollback() throws SQLException {synchronized (getSynchronizationObject()) {    if (isClosed()) {      throw new FBSQLException("You cannot rollback closed connection.",SQLStateConstants.SQL_STATE_CONNECTION_CLOSED);    }    if (mc.inDistributedTransaction()) {      throw new FBSQLException("Connection enlisted in distributed transaction",SQLStateConstants.SQL_STATE_INVALID_TX_STATE);    }    txCoordinator.rollback();    invalidateTransactionLifetimeObjects();  }}  }
class C{  public PointF createFromParcel(Parcel in){  PointF r=new PointF();  r.readFromParcel(in);  return r;}  }
class C{  public ArrayList<MoveOption> findMoves(Coords dest,Client client){  ArrayList<MoveOption> result=new ArrayList<MoveOption>();  for (int i=0; i < 6; i++) {    for (int j=1; j < 2; j++) {      MoveOption.Key key=new MoveOption.Key(dest,i,j);      MoveOption es=null;      if ((es=getAllMoves(client).get(key)) != null) {        result.add(es);      }    }  }  return result;}  }
class C{  public boolean hasUrl(){  return hasExtension(CrawlIssueUrl.class);}  }
class C{  boolean filterChanged(TableLineFilter<SearchResultDataLine> filter,int depth){  FILTER.setFilter(depth,filter);  int[] rows=TABLE.getSelectedRows();  SearchResultDataLine[] lines=new SearchResultDataLine[rows.length];  List<SearchResultDataLine> inView=new LinkedList<>();  for (int i=0; i < rows.length; i++) {    int row=rows[i];    SearchResultDataLine line=DATA_MODEL.get(row);    lines[i]=line;    if (TABLE.isRowVisible(row))     inView.add(line);  }  DATA_MODEL.filtersChanged();  for (int i=0; i < rows.length; i++) {    SearchResultDataLine line=lines[i];    int row=DATA_MODEL.getRow(line);    if (row != -1) {      TABLE.addRowSelectionInterval(row,row);      if (inView != null && inView.contains(line)) {        TABLE.ensureRowVisible(row);        inView=null;      }    }  }  SearchMediator.setTabDisplayCount(this);  return true;}  }
class C{  public GroupOfTargets(String sidc){  super(sidc);}  }
class C{  public GlobalDocumentBuilder(Class<? extends GlobalFeature> globalFeatureClass,boolean hashing,boolean useDocValues){  addExtractor(globalFeatureClass);  this.useDocValues=useDocValues;  this.hashingEnabled=hashing;  if (hashingEnabled)   testHashes();}  }
class C{  public EnumLiteral createEnumLiteral(){  EnumLiteralImpl enumLiteral=new EnumLiteralImpl();  return enumLiteral;}  }
class C{  private td createTD(Element element){  td td=new td().addElement(element).setAlign(AlignType.LEFT).setVAlign(AlignType.TOP);  return td;}  }
class C{  @Override public void initialScore(String url,WebPage row) throws ScoringFilterException {  row.setScore(0.0f);  row.getMetadata().put(CASH_KEY,ByteBuffer.wrap(Bytes.toBytes(0.0f)));}  }
class C{  public BackingStoreException(String s){  super(s);}  }
class C{  @SuppressWarnings("unchecked") protected void parseConfigFile(String configFile){  try {    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    DocumentBuilder parser=factory.newDocumentBuilder();    URL url=Bot.class.getResource(configFile);    Document document=parser.parse(url.toString());    Element root=document.getDocumentElement();    Element memoryElement=(Element)root.getElementsByTagName("memory").item(0);    Element implementationClassElement=(Element)memoryElement.getElementsByTagName("implementation-class").item(0);    Class<Memory> memoryImplementor=(Class<Memory>)Class.forName(implementationClassElement.getFirstChild().getNodeValue());    setMemory(memoryImplementor.newInstance());    memory().initialize(getProperties(memoryElement));    Element mindElement=(Element)root.getElementsByTagName("mind").item(0);    implementationClassElement=(Element)mindElement.getElementsByTagName("implementation-class").item(0);    Class<Mind> mindImplementor=(Class<Mind>)Class.forName(implementationClassElement.getFirstChild().getNodeValue());    setMind(mindImplementor.newInstance());    mind().initialize(getProperties(mindElement));    NodeList thoughtElements=((Element)mindElement.getElementsByTagName("thoughts").item(0)).getElementsByTagName("thought");    for (int index=0; index < thoughtElements.getLength(); index++) {      Element thoughtElement=(Element)thoughtElements.item(index);      implementationClassElement=(Element)thoughtElement.getElementsByTagName("implementation-class").item(0);      Class<Thought> thoughtImplementor=(Class<Thought>)Class.forName(implementationClassElement.getFirstChild().getNodeValue());      Thought thought=thoughtImplementor.newInstance();      mind().addThought(thought);      thought.initialize(getProperties(thoughtElement));    }    Element moodElement=(Element)root.getElementsByTagName("mood").item(0);    if (moodElement != null) {      implementationClassElement=(Element)moodElement.getElementsByTagName("implementation-class").item(0);      Class<Mood> moodImplementor=(Class<Mood>)Class.forName(implementationClassElement.getFirstChild().getNodeValue());      setMood(moodImplementor.newInstance());      mood().initialize(getProperties(moodElement));      NodeList emotionElements=((Element)moodElement.getElementsByTagName("emotions").item(0)).getElementsByTagName("emotion");      for (int index=0; index < emotionElements.getLength(); index++) {        Element emotionElement=(Element)emotionElements.item(index);        implementationClassElement=(Element)emotionElement.getElementsByTagName("implementation-class").item(0);        Class<Emotion> emotionImplementor=(Class<Emotion>)Class.forName(implementationClassElement.getFirstChild().getNodeValue());        Emotion emotion=emotionImplementor.newInstance();        mood().addEmotion(emotion);        emotion.initialize(getProperties(emotionElement));      }    }    Element avatarElement=(Element)root.getElementsByTagName("avatar").item(0);    implementationClassElement=(Element)avatarElement.getElementsByTagName("implementation-class").item(0);    Class<Avatar> avatarImplementor=(Class<Avatar>)Class.forName(implementationClassElement.getFirstChild().getNodeValue());    setAvatar(avatarImplementor.newInstance());    avatar().initialize(getProperties(avatarElement));    Element awarenessElement=(Element)root.getElementsByTagName("awareness").item(0);    implementationClassElement=(Element)awarenessElement.getElementsByTagName("implementation-class").item(0);    Class<Awareness> awarenessImplementor=(Class<Awareness>)Class.forName(implementationClassElement.getFirstChild().getNodeValue());    setAwareness(awarenessImplementor.newInstance());    NodeList senseElements=((Element)awarenessElement.getElementsByTagName("senses").item(0)).getElementsByTagName("sense");    for (int index=0; index < senseElements.getLength(); index++) {      Element senseElement=(Element)senseElements.item(index);      implementationClassElement=(Element)senseElement.getElementsByTagName("implementation-class").item(0);      Class<Sense> senseImplementor=(Class<Sense>)Class.forName(implementationClassElement.getFirstChild().getNodeValue());      Sense sense=senseImplementor.newInstance();      awareness().addSense(sense);      sense.initialize(getProperties(senseElement));    }    NodeList toolElements=((Element)awarenessElement.getElementsByTagName("tools").item(0)).getElementsByTagName("tool");    for (int index=0; index < toolElements.getLength(); index++) {      Element toolElement=(Element)toolElements.item(index);      implementationClassElement=(Element)toolElement.getElementsByTagName("implementation-class").item(0);      Class<Tool> toolImplementor=(Class<Tool>)Class.forName(implementationClassElement.getFirstChild().getNodeValue());      Tool tool=toolImplementor.newInstance();      awareness().addTool(tool);      tool.initialize(getProperties(toolElement));    }  } catch (  Exception exception) {    throw new InitializationException(exception);  }}  }
class C{  public XYSeries(String title){  this(title,0);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:30.283 -0500",hash_original_method="BBCDAD7BF06FB621822DBBAD11355700",hash_generated_method="235D538D470CAF18D465A30A0FFDA613") @Override final public int hashCode(){  return super.hashCode();}  }
class C{  @Override public void drawRoundRect(int x,int y,int width,int height,int arcWidth,int arcHeight){}  }
class C{  public int read(ByteBuffer dst) throws IOException {  if (!dst.hasRemaining())   return 0;  if (!isHandShakeComplete()) {    if (isBlocking()) {      while (!isHandShakeComplete()) {        processHandshake();      }    } else {      processHandshake();      if (!isHandShakeComplete()) {        return 0;      }    }  }  int purged=readRemaining(dst);  if (purged != 0)   return purged;  assert (inData.position() == 0);  inData.clear();  if (!inCrypt.hasRemaining())   inCrypt.clear(); else   inCrypt.compact();  if (isBlocking() || readEngineResult.getStatus() == Status.BUFFER_UNDERFLOW)   if (socketChannel.read(inCrypt) == -1) {    return -1;  }  inCrypt.flip();  unwrap();  int transfered=transfereTo(inData,dst);  if (transfered == 0 && isBlocking()) {    return read(dst);  }  return transfered;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.METADATA__KEY:    return KEY_EDEFAULT == null ? key != null : !KEY_EDEFAULT.equals(key);case EipPackage.METADATA__VALUES:  return values != null && !values.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public synchronized boolean generate(Projection proj){  if ((proj.getScale() <= getVisibleScale()) || (getVisibleScale() == -1)) {    this.renderPoint=true;  } else {    this.renderPoint=false;  }  return super.generate(proj);}  }
class C{  public synchronized void removeActionListener(ActionListener l){  if (l == null) {    return;  }  actionListener=AWTEventMulticaster.remove(actionListener,l);}  }
class C{  public boolean submitNoWake(Runnable task,ClassLoader loader){  boolean isPriority=false;  boolean isQueue=true;  boolean isWake=false;  return scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake);}  }
class C{  @Override public void publish(LogRecord record){  super.publish(record);  flush();}  }
class C{  public static String convertContentTypeToQualifier(String contentType){  if (contentType.equals(MediaType.APPLICATION_JSON_VALUE)) {    return "AsJson";  }  if (contentType.equals(MediaType.APPLICATION_OCTET_STREAM_VALUE)) {    return "AsBinary";  }  if (contentType.equals(MediaType.TEXT_PLAIN_VALUE) || contentType.equals(MediaType.TEXT_HTML_VALUE)) {    return "AsText";  }  Matcher versionMatcher=CONTENT_TYPE_VERSION.matcher(contentType);  if (versionMatcher.find()) {    String version=versionMatcher.group(1);    if (version != null) {      return StringUtils.capitalize(version).replace(".","_");    }  }  int seperatorIndex=contentType.indexOf("/");  if (seperatorIndex != -1 && seperatorIndex < contentType.length()) {    String candidate=contentType.substring(seperatorIndex + 1).toLowerCase();    String out="";    if (candidate.contains("json")) {      candidate=candidate.replace("json","");      out+="AsJson";    }    candidate=StringUtils.deleteAny(candidate," ,.+=-'\"\\|~`#$%^&\n\t");    if (StringUtils.hasText(candidate)) {      out=StringUtils.capitalize(candidate) + out;    }    return "_" + out;  }  return "";}  }
class C{  public static Method add(){  return create(ADD);}  }
class C{  public static Uri createCopyOfSentFile(Uri file,RcsSettings rcsSettings) throws IOException {  String mimeType=getMimeType(file);  Context ctx=AndroidFactory.getApplicationContext();  String fileName=getFileName(ctx,file);  String extension=MimeManager.getFileExtension(fileName);  if (extension == null) {    extension=MimeManager.getInstance().getExtensionFromMimeType(mimeType);    if (extension == null) {      throw new RuntimeException("Cannot retrieve file extension for Uri='" + file + "'!");    }    fileName=fileName + "." + extension;  }  Uri destination=ContentManager.generateUriForSentContent(fileName,mimeType,rcsSettings);  copyFile(file,destination);  return destination;}  }
class C{  private void initRayTracingProgram(){  glUseProgram(rayTracingProgram);  eyeUniform=glGetUniformLocation(rayTracingProgram,"eye");  ray00Uniform=glGetUniformLocation(rayTracingProgram,"ray00");  ray10Uniform=glGetUniformLocation(rayTracingProgram,"ray10");  ray01Uniform=glGetUniformLocation(rayTracingProgram,"ray01");  ray11Uniform=glGetUniformLocation(rayTracingProgram,"ray11");  timeUniform=glGetUniformLocation(rayTracingProgram,"time");  blendFactorUniform=glGetUniformLocation(rayTracingProgram,"blendFactor");  framebufferUniform=glGetUniformLocation(rayTracingProgram,"framebuffer");  widthUniform=glGetUniformLocation(rayTracingProgram,"width");  heightUniform=glGetUniformLocation(rayTracingProgram,"height");  bounceCountUniform=glGetUniformLocation(rayTracingProgram,"bounceCount");  glUniform1i(framebufferUniform,0);  glUseProgram(0);}  }
class C{  public boolean isLocalAndExists(){  return false;}  }
class C{  public RequestHandle patch(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPatch(getURI(url)),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  protected void updateIdealPoint(){  for (  Solution solution : this) {    if (solution.getNumberOfObjectives() != numberOfObjectives) {      throw new FrameworkException("incorrect number of objectives");    }    for (int i=0; i < numberOfObjectives; i++) {      idealPoint[i]=Math.min(idealPoint[i],solution.getObjective(i));    }  }}  }
class C{  @Override public void actionPerformed(ActionEvent e){  String actionCommand=e.getActionCommand();  Action action=tree.getActionMap().get(actionCommand);  if (action != null) {    action.actionPerformed(new ActionEvent(tree,ActionEvent.ACTION_PERFORMED,actionCommand));  }}  }
class C{  public void testAddDirectoryScanner() throws IOException {  System.out.println("addDirectoryScanner");  System.out.println("save");  final File file=File.createTempFile("testconf",".xml");  final ScanDirConfig instance=new ScanDirConfig(file.getAbsolutePath());  final ScanManagerConfig bean=new ScanManagerConfig("testSave");  final DirectoryScannerConfig dir=new DirectoryScannerConfig("tmp");  dir.setRootDirectory(file.getParent());  FileMatch filter=new FileMatch();  filter.setFilePattern(".*");  dir.setIncludeFiles(new FileMatch[]{filter});  instance.setConfiguration(bean);  instance.addDirectoryScanner(dir.getName(),dir.getRootDirectory(),filter.getFilePattern(),filter.getSizeExceedsMaxBytes(),0);  instance.save();  final ScanManagerConfig loaded=new XmlConfigUtils(file.getAbsolutePath()).readFromFile();  assertNotNull(loaded.getScan(dir.getName()));  assertEquals(dir,loaded.getScan(dir.getName()));  assertEquals(instance.getConfiguration(),loaded);  assertEquals(instance.getConfiguration().getScan(dir.getName()),dir);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.193 -0500",hash_original_method="63363EB4B4D28F766A23B83B48599393",hash_generated_method="83E6B08A153F5D18F61651070F02427A") @Override public final boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof RouteTracker))   return false;  RouteTracker that=(RouteTracker)o;  boolean equal=this.targetHost.equals(that.targetHost);  equal&=(this.localAddress == that.localAddress) || ((this.localAddress != null) && this.localAddress.equals(that.localAddress));  equal&=(this.proxyChain == that.proxyChain) || ((this.proxyChain != null) && (that.proxyChain != null) && (this.proxyChain.length == that.proxyChain.length));  equal&=(this.connected == that.connected) && (this.secure == that.secure) && (this.tunnelled == that.tunnelled)&& (this.layered == that.layered);  if (equal && (this.proxyChain != null)) {    for (int i=0; equal && (i < this.proxyChain.length); i++)     equal=this.proxyChain[i].equals(that.proxyChain[i]);  }  return equal;}  }
class C{  @Override protected final void parseArgs(String[] args) throws AdeException {  final Options options=new Options();  OptionBuilder.withArgName(OPTION_SOURCES);  OptionBuilder.withLongOpt(OPTION_SOURCES);  OptionBuilder.isRequired(false);  OptionBuilder.hasArg();  OptionBuilder.withDescription("Specify the Source to be analyzed.  ");  options.addOption(OptionBuilder.create("s"));  super.parseArgs(options,args);}  }
class C{  private static BitmapSampled cropBitmap(Context context,Uri loadedImageUri,float[] points,int degreesRotated,boolean fixAspectRatio,int aspectRatioX,int aspectRatioY,int sampleMulti,Rect rect,int width,int height){  Bitmap result=null;  int sampleSize;  try {    BitmapFactory.Options options=new BitmapFactory.Options();    options.inSampleSize=sampleSize=sampleMulti * calculateInSampleSizeByReqestedSize(rect.width(),rect.height(),width,height);    Bitmap fullBitmap=decodeImage(context.getContentResolver(),loadedImageUri,options);    if (fullBitmap != null) {      try {        float[] points2=new float[points.length];        System.arraycopy(points,0,points2,0,points.length);        for (int i=0; i < points2.length; i++) {          points2[i]=points2[i] / options.inSampleSize;        }        result=cropBitmap(fullBitmap,points2,degreesRotated,fixAspectRatio,aspectRatioX,aspectRatioY);      }  finally {        if (result != fullBitmap) {          fullBitmap.recycle();        }      }    }  } catch (  OutOfMemoryError e) {    if (result != null) {      result.recycle();    }    throw e;  }catch (  Exception e) {    throw new RuntimeException("Failed to load sampled bitmap: " + loadedImageUri + "\r\n"+ e.getMessage(),e);  }  return new BitmapSampled(result,sampleSize);}  }
class C{  public String nominalStringReplacementValueTipText(){  return "The constant to replace missing values in nominal/string attributes with";}  }
class C{  public SAMISubtitleHandler(sage.media.format.ContainerFormat inFormat){  super(inFormat);}  }
class C{  public String optString(int index,String defaultValue){  Object object=this.opt(index);  return JSONObject.NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  protected UuidType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public final void fatalError(final String message){  if (isFatalErrorEnabled()) {    output(Priority.FATAL_ERROR,message,null);  }}  }
class C{  public void append(Object msg){  if (msg instanceof String) {    append(msg.toString(),"empty_small.gif");    return;  }  m_Model.addElement(msg);  m_Info.setSelectedIndex(m_Model.getSize() - 1);  m_Info.ensureIndexIsVisible(m_Info.getSelectedIndex());  setButtons(null);}  }
class C{  public NativeRunner(File eclipsec){  this.eclipsec=Objects.requireNonNull(eclipsec);}  }
class C{  public ColladaAsset(String ns){  super(ns);}  }
class C{  public Boolean isOSD(){  return osd;}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    if (mAdapter != null && ((HeaderViewListAdapter)mAdapter).removeHeader(v)) {      if (mDataSetObserver != null) {        mDataSetObserver.onChanged();      }      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public static void openMap(Context context,String parh){  Uri uri=Uri.parse(parh);  Intent intent=new Intent(Intent.ACTION_VIEW,uri);  context.startActivity(intent);}  }
class C{  private Object readResolve(){  return ToStringStyle.DEFAULT_STYLE;}  }
class C{  public void merge(String assembleDir) throws MergeException, IOException, JDOMException {  DefaultFileHandler fileHandler=new DefaultFileHandler();  WebXml mergedWebXml=getWebXml();  expandToPath(assembleDir);  if (!mergeJarFiles) {    File f=new File(assembleDir);    File webInfLib=new File(f,"WEB-INF/lib");    File[] files=webInfLib.listFiles();    for (int i=0; i < files.length; i++) {      if (!files[i].isDirectory() && files[i].getName().toLowerCase().endsWith(".jar")) {        fileHandler.delete(files[i].getAbsolutePath());      }    }  }  copyJars(assembleDir);  AbstractDescriptorIo.writeAll(mergedWebXml,fileHandler.append(new File(assembleDir).getAbsolutePath(),File.separator + "WEB-INF"));  executeMergeProcessors(new File(assembleDir));}  }
class C{  public Annotation(int type,ConstPool cp){  pool=cp;  typeIndex=type;  members=null;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep deactivateExportGroup(@PathParam("id") URI groupId) throws ControllerException {  String task=UUID.randomUUID().toString();  Operation op=null;  ExportGroup exportGroup=lookupExportGroup(groupId);  Map<URI,Map<URI,Integer>> storageMap=ExportUtils.getStorageToVolumeMap(exportGroup,true,_dbClient);  validateInitiatorsInExportGroup(exportGroup);  validateExportGroupNoPendingEvents(exportGroup);  if (exportGroup.getVolumes() != null) {    validateVolumesNotMounted(exportGroup,URIUtil.toURIList(exportGroup.getVolumes().keySet()));  }  Set<URI> tenants=new HashSet<URI>();  tenants.add(exportGroup.getTenant().getURI());  Set<ExportGroup> dataObjects=new HashSet<ExportGroup>();  dataObjects.add(exportGroup);  checkForPendingTasks(tenants,dataObjects);  exportGroup.addInternalFlags(DataObject.Flag.DELETION_IN_PROGRESS);  if (exportGroup.getVolumes() != null && !exportGroup.getVolumes().isEmpty() && !exportGroup.getPathParameters().isEmpty()) {    removeBlockObjectsFromPathParamMap(URIUtil.uris(exportGroup.getVolumes().keySet()),exportGroup);  }  if (storageMap.isEmpty()) {    op=initTaskStatus(exportGroup,task,Operation.Status.ready,ResourceOperationTypeEnum.DELETE_EXPORT_GROUP);    _dbClient.markForDeletion(exportGroup);  } else {    op=initTaskStatus(exportGroup,task,Operation.Status.pending,ResourceOperationTypeEnum.DELETE_EXPORT_GROUP);    _dbClient.persistObject(exportGroup);    BlockExportController exportController=getExportController();    exportController.exportGroupDelete(exportGroup.getId(),task);  }  auditOp(OperationTypeEnum.DELETE_EXPORT_GROUP,true,AuditLogManager.AUDITOP_BEGIN,exportGroup.getLabel(),exportGroup.getId().toString(),exportGroup.getVirtualArray().toString(),exportGroup.getProject().toString());  return toTask(exportGroup,task,op);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String convertTemplate(final String functionCall,final EscapeParserMode mode) throws FBSQLParseException {  final String functionName=parseFunction(functionCall).toUpperCase();  final String[] params=parseArguments(functionCall).toArray(new String[0]);  if (!FUNCTION_MAP.containsKey(functionName)) {    throw new FBSQLParseException("Unsupported JDBC function escape: " + functionName);  }  final String firebirdTemplate=FUNCTION_MAP.get(functionName);  if (firebirdTemplate != null)   return MessageFormat.format(firebirdTemplate,(Object[])params);  if (mode == EscapeParserMode.USE_STANDARD_UDF)   return convertUsingStandardUDF(functionName,params);  return null;}  }
class C{  protected void onPeerNotUnderstand(Json msg){  HGPeerIdentity id=getThisPeer().getIdentity(getSender(msg));  this.future.result.exception=new ExceptionAtPeer(id,"Peer did not understand last message:" + msg.at(CONTENT).toString() + ", because "+ msg.at(WHY_NOT_UNDERSTOOD).asString());  getState().assign(WorkflowState.Failed);}  }
class C{  private void parseData(){  videoList=new ArrayList<>();  try {    JsonElement root=new JsonParser().parse(new BufferedReader(new InputStreamReader(getResources().getAssets().open("android_tv_videos.json"))));    JsonArray array=root.getAsJsonObject().get("googlevideos").getAsJsonArray();    Gson gson=new Gson();    for (    JsonElement element : array) {      String category=element.getAsJsonObject().get("category").getAsString();      JsonArray videoArray=element.getAsJsonObject().get("videos").getAsJsonArray();      JsonObject videoObject;      Video[] categoryVideos=new Video[videoArray.size()];      Video video;      for (int i=0, limit=videoArray.size(); i < limit; i++) {        videoObject=videoArray.get(i).getAsJsonObject();        video=gson.fromJson(videoObject,Video.class);        video.category=category;        video.source=videoObject.get("sources").getAsJsonArray().get(0).getAsString();        categoryVideos[i]=video;        video.card=BASE_CONTENT_URL + URLEncoder.encode(video.category,"UTF-8").replace("+","%20") + "/"+ URLEncoder.encode(video.title,"UTF-8").replace("+","%20")+ "/"+ video.card;      }      videoList.add(categoryVideos);    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static boolean isAvailable(){  return AudioEffect.isEffectTypeAvailable(AudioEffect.EFFECT_TYPE_NS);}  }
class C{  private Node<E> nextNode(Node<E> p){  for (; ; ) {    Node<E> s=p.next;    if (s == p)     return head.next;    if (s == null || s.item != null)     return s;    p=s;  }}  }
class C{  protected HttpResponse doSendRequest(final HttpRequest request,final HttpClientConnection conn,final HttpContext context) throws IOException, HttpException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  if (conn == null) {    throw new IllegalArgumentException("HTTP connection may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  HttpResponse response=null;  context.setAttribute(ExecutionContext.HTTP_REQ_SENT,Boolean.FALSE);  conn.sendRequestHeader(request);  if (request instanceof HttpEntityEnclosingRequest) {    boolean sendentity=true;    final ProtocolVersion ver=request.getRequestLine().getProtocolVersion();    if (((HttpEntityEnclosingRequest)request).expectContinue() && !ver.lessEquals(HttpVersion.HTTP_1_0)) {      conn.flush();      int tms=request.getParams().getIntParameter(CoreProtocolPNames.WAIT_FOR_CONTINUE,2000);      if (conn.isResponseAvailable(tms)) {        response=conn.receiveResponseHeader();        if (canResponseHaveBody(request,response)) {          conn.receiveResponseEntity(response);        }        int status=response.getStatusLine().getStatusCode();        if (status < 200) {          if (status != HttpStatus.SC_CONTINUE) {            throw new ProtocolException("Unexpected response: " + response.getStatusLine());          }          response=null;        } else {          sendentity=false;        }      }    }    if (sendentity) {      conn.sendRequestEntity((HttpEntityEnclosingRequest)request);    }  }  conn.flush();  context.setAttribute(ExecutionContext.HTTP_REQ_SENT,Boolean.TRUE);  return response;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (multiplicity: ");  result.append(multiplicity);  result.append(", name: ");  result.append(name);  result.append(", description: ");  result.append(description);  result.append(')');  return result.toString();}  }
class C{  private synchronized boolean isPaused(){  return this.paused;}  }
class C{  public boolean isConstant(Value v){  if (v instanceof StringConstant)   return true;  RE re=regexMap.get(v);  return re != null && re.isConstant();}  }
class C{  public SignatureEvaluator(int suggestedBufferSize,boolean humanReadable,SignatureRules signatureRules){  this.out=new StringBuilder(suggestedBufferSize);  this.humanReadable=humanReadable;  this.signatureRules=signatureRules;}  }
class C{  public OutputNode purge(int index){  OutputNode node=remove(index);  if (node != null) {    active.remove(node);  }  return node;}  }
class C{  public XmlHandler addClass(Class<?> clazz,Global global,Attribute... attributes){  try {    xml.addClass(clazz,global,attributes);    xml.write();  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  public TSPInstance(Reader reader) throws IOException {  this();  load(new BufferedReader(reader));}  }
class C{  public void MeasureTextViewIsVisible(){  dismissTheAlertDialogBox();  dumpUi(R.id.measure);  TestHelper.checkUiIsVisible(listUi);}  }
class C{  protected void moveTo(KMLAbstractView view){  KMLViewController viewController=KMLViewController.create(this.wwd);  if (viewController == null)   return;  viewController.goTo(view);}  }
class C{  public final boolean postDelayed(Runnable r,long delayMillis){  return mExec.postDelayed(wrapRunnable(r),delayMillis);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void copyTo(@Name("destination") char[] destination,@Name("sourcePosition") @Defaulted int sourcePosition,@Name("destinationPosition") @Defaulted int destinationPosition,@Name("length") @Defaulted int length){  throw Util.makeJavaArrayWrapperException();}  }
class C{  public link addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public DurationConverter removeDurationConverter(DurationConverter converter) throws SecurityException {  checkAlterDurationConverters();  if (converter == null) {    return null;  }  DurationConverter[] removed=new DurationConverter[1];  iDurationConverters=iDurationConverters.remove(converter,removed);  return removed[0];}  }
class C{  @RequestMapping(value="/users",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Transactional @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<ManagedUserDTO> updateUser(@RequestBody ManagedUserDTO managedUserDTO) throws URISyntaxException {  log.debug("REST request to update User : {}",managedUserDTO);  Optional<User> existingUser=userRepository.findOneByEmail(managedUserDTO.getEmail());  if (existingUser.isPresent() && (!existingUser.get().getId().equals(managedUserDTO.getId()))) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("user-management","emailexists","Email already in use")).body(null);  }  existingUser=userRepository.findOneByLogin(managedUserDTO.getLogin());  if (existingUser.isPresent() && (!existingUser.get().getId().equals(managedUserDTO.getId()))) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("user-management","userexists","Login name already used")).body(null);  }  return userRepository.findOneById(managedUserDTO.getId()).map(null).orElseGet(null);}  }
class C{  public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {  if ("Topic".equals(qName)) {    curSection=atts.getValue("r:id");  } else   if ("ExternalPage".equals(qName)) {    if ((!includeAdult) && curSection.startsWith("Top/Adult")) {      return;    }    if (topicPattern != null && !topicPattern.matcher(curSection).matches()) {      return;    }    String url=atts.getValue("about");    int hashValue=MD5Hash.digest(url).hashCode();    hashValue=Math.abs(hashValue ^ hashSkew);    if ((hashValue % subsetDenom) != 0) {      return;    }    curURL=url;  } else   if (curURL != null && "d:Title".equals(qName)) {    titlePending=true;  } else   if (curURL != null && "d:Description".equals(qName)) {    descPending=true;  }}  }
class C{  public CacheHandler(String thisURL,CLogger tLog,Properties ctx,String trxName){  int[] theseServers=X_CM_BroadcastServer.getAllIDs("CM_BroadcastServer","CM_WebProject_ID=0",trxName);  if (theseServers != null && theseServers.length > 0) {    String[] thisURLs=new String[theseServers.length];    for (int i=0; i < theseServers.length; i++) {      X_CM_BroadcastServer thisServer=new X_CM_BroadcastServer(ctx,theseServers[i],trxName);      thisURLs[i]=thisServer.getIP_Address();    }    cacheURLs=thisURLs;  } else {    String[] thisURLs=new String[1];    thisURLs[0]=thisURL;    cacheURLs=thisURLs;  }  log=tLog;}  }
class C{  @Override public boolean hasRetractedBlade(int loc){  for (  Mounted m : getEquipment()) {    if ((m.getLocation() == loc) && !m.isDestroyed() && !m.isBreached()&& (m.getType() instanceof MiscType)&& m.getType().hasFlag(MiscType.F_CLUB)&& m.getType().hasSubType(MiscType.S_RETRACTABLE_BLADE)&& !m.curMode().equals("extended")) {      return true;    }  }  return false;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static String clearAllEvent(HttpServletRequest request,HttpServletResponse response){  String errMsg="";  Locale locale=UtilHttp.getLocale(request);  Security security=(Security)request.getAttribute("security");  if (!security.hasPermission("UTIL_CACHE_EDIT",request.getSession())) {    errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCacheEvents.permissionEdit",locale) + ".";    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  UtilCache.clearAllCaches();  errMsg=UtilProperties.getMessage(UtilCacheEvents.err_resource,"utilCache.clearAllCaches",locale);  request.setAttribute("_EVENT_MESSAGE_",errMsg + " (" + UtilDateTime.nowDateString("yyyy-MM-dd HH:mm:ss")+ ").");  return "success";}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,Object value){  buffer.append(summaryObjectStartText);  buffer.append(getShortClassName(value.getClass()));  buffer.append(summaryObjectEndText);}  }
class C{  private void createJournalEntriesForDisbursements(final LoanDTO loanDTO,final LoanTransactionDTO loanTransactionDTO,final Office office){  final Long loanProductId=loanDTO.getLoanProductId();  final Long loanId=loanDTO.getLoanId();  final String currencyCode=loanDTO.getCurrencyCode();  final String transactionId=loanTransactionDTO.getTransactionId();  final Date transactionDate=loanTransactionDTO.getTransactionDate();  final BigDecimal disbursalAmount=loanTransactionDTO.getAmount();  final boolean isReversal=loanTransactionDTO.isReversed();  final Long paymentTypeId=loanTransactionDTO.getPaymentTypeId();  if (loanTransactionDTO.isLoanToLoanTransfer()) {    this.helper.createCashBasedJournalEntriesAndReversalsForLoan(office,currencyCode,CASH_ACCOUNTS_FOR_LOAN.LOAN_PORTFOLIO.getValue(),FINANCIAL_ACTIVITY.ASSET_TRANSFER.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,disbursalAmount,isReversal);  } else   if (loanTransactionDTO.isAccountTransfer()) {    this.helper.createCashBasedJournalEntriesAndReversalsForLoan(office,currencyCode,CASH_ACCOUNTS_FOR_LOAN.LOAN_PORTFOLIO.getValue(),FINANCIAL_ACTIVITY.LIABILITY_TRANSFER.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,disbursalAmount,isReversal);  } else {    this.helper.createCashBasedJournalEntriesAndReversalsForLoan(office,currencyCode,CASH_ACCOUNTS_FOR_LOAN.LOAN_PORTFOLIO.getValue(),CASH_ACCOUNTS_FOR_LOAN.FUND_SOURCE.getValue(),loanProductId,paymentTypeId,loanId,transactionId,transactionDate,disbursalAmount,isReversal);  }}  }
class C{  public boolean isParameterizedMethod(){  KeyKind kind=new KeyKind(this.key);  kind.parse();  return (kind.flags & KeyKind.F_PARAMETERIZED_METHOD) != 0;}  }
class C{  @Override public void reply(WebSocket session,HeadersAmp headers,String to,long qid,Object value) throws IOException {}  }
class C{  public BEDashedBorder(Color color,boolean top,boolean left,boolean bottom,boolean right){  super(color);  this.top=top;  this.left=left;  this.bottom=bottom;  this.right=right;}  }
class C{  public boolean isCellEditable(EventObject event){  boolean retValue=false;  boolean editable=false;  if (event != null) {    if (event.getSource() instanceof JTree) {      setTree((JTree)event.getSource());      if (event instanceof MouseEvent) {        TreePath path=tree.getPathForLocation(((MouseEvent)event).getX(),((MouseEvent)event).getY());        editable=(lastPath != null && path != null && lastPath.equals(path));        if (path != null) {          lastRow=tree.getRowForPath(path);          Object value=path.getLastPathComponent();          boolean isSelected=tree.isRowSelected(lastRow);          boolean expanded=tree.isExpanded(path);          TreeModel treeModel=tree.getModel();          boolean leaf=treeModel.isLeaf(value);          determineOffset(tree,value,isSelected,expanded,leaf,lastRow);        }      }    }  }  if (!realEditor.isCellEditable(event))   return false;  if (canEditImmediately(event))   retValue=true; else   if (editable && shouldStartEditingTimer(event)) {    startEditingTimer();  } else   if (timer != null && timer.isRunning())   timer.stop();  if (retValue)   prepareForEditing();  return retValue;}  }
class C{  @Override @SuppressWarnings("unchecked") public boolean remove(Object o){  if (o == null) {    return false;  }  for (int targetIndex=0; targetIndex < size; targetIndex++) {    if (o.equals(elements[targetIndex])) {      removeAt(targetIndex);      return true;    }  }  return false;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:02.391 -0500",hash_original_method="9A3C530B0BF357B0539558761B1AC70C",hash_generated_method="988E0C7B6C13324742BC106865E82AEA") private History(){}  }
class C{  public final void add(int element){  int index=(length++) & 0x3FF;  if (index == 0) {    pages.add(page=new int[0x400]);  }  page[index]=element;}  }
class C{  public void test_wrap_ByteBuffer_ByteBuffer_05(){  String host="new host";  int port=8080;  ByteBuffer bb=ByteBuffer.allocate(10);  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    SSLEngineResult res=sse.wrap(bb,ByteBuffer.allocate(10));    assertEquals(0,res.bytesConsumed());    assertEquals(0,res.bytesProduced());  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }}  }
class C{  public void stop(){synchronized (this) {    mStopped=true;    if (mListenerThread == null) {      return;    }  }  mListenerThread.interrupt();  try {    if (mServerSocket != null) {      mServerSocket.close();    }  } catch (  IOException e) {  }}  }
class C{  public boolean isError(){  Object oo=get_Value(COLUMNNAME_IsError);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override protected String generateJavadoc(int index) throws Exception {  String result;  OptionHandler handler;  String optionStr;  result="";  if (index == 0) {    if (!canInstantiateClass()) {      return result;    }    if (!ClassDiscovery.hasInterface(OptionHandler.class,getInstance().getClass())) {      throw new Exception("Class '" + getClassname() + "' is not an OptionHandler!");    }    handler=(OptionHandler)getInstance();    Enumeration<Option> enm=handler.listOptions();    if (!enm.hasMoreElements()) {      return result;    }    if (getProlog()) {      result="Valid options are: <p/>\n\n";    }    enm=handler.listOptions();    while (enm.hasMoreElements()) {      Option option=enm.nextElement();      optionStr=toHTML(option.synopsis()) + "\n" + toHTML(option.description().replaceAll("\\t"," "));      result+="<pre> " + optionStr.replaceAll("<br/>","") + "</pre>\n\n";    }    if (getUseStars()) {      result=indent(result,1,"* ");    }  }  return result;}  }
class C{  public static double simpleTest(double[] test,final double min,final double max){  double scale=(max - min) / (test.length + 1.);  double maxdev=Double.NEGATIVE_INFINITY;  for (int i=0; i < test.length; i++) {    double expected=(i + 1.) * scale + min;    double dev=Math.abs(test[i] - expected);    if (dev > maxdev) {      maxdev=dev;    }  }  return Math.abs(maxdev);}  }
class C{  public void removeAllPlots(){  m_masterPlot=null;  m_plotInstances=null;  m_plots=new ArrayList<PlotData2D>();  m_xIndex=0;  m_yIndex=0;  m_cIndex=0;}  }
class C{  public static void write(String filename,Experiment exp) throws Exception {  if ((KOML.isPresent()) && (filename.toLowerCase().endsWith(KOML.FILE_EXTENSION))) {    KOML.write(filename,exp);  } else   if (filename.toLowerCase().endsWith(".xml")) {    XMLExperiment xml=new XMLExperiment();    xml.write(filename,exp);  } else {    FileOutputStream fo=new FileOutputStream(filename);    ObjectOutputStream oo=new ObjectOutputStream(new BufferedOutputStream(fo));    oo.writeObject(exp);    oo.close();  }}  }
class C{  private boolean dynInit(String title){  if (AD_Table_ID != 0) {    MTable table1=MTable.get(Env.getCtx(),AD_Table_ID);    setTitle(title + " - " + table1.getName());  }  if (!MRole.PREFERENCETYPE_Client.equals(MRole.getDefault().getPreferenceType()))   return false;  if (Record_ID == 0)   return false;  String sql="SELECT AD_Column_ID, Updated, UpdatedBy, OldValue, NewValue " + "FROM AD_ChangeLog " + "WHERE AD_Table_ID=? AND Record_ID=? AND AD_Column_ID=?"+ "ORDER BY Updated DESC";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Table_ID);    pstmt.setInt(2,Record_ID);    pstmt.setInt(3,AD_Column_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      addLine(rs.getInt(1),rs.getTimestamp(2),rs.getInt(3),rs.getString(4),rs.getString(5));    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);  }  Vector<String> columnNames=new Vector<String>();  columnNames.add(Msg.translate(Env.getCtx(),"NewValue"));  columnNames.add(Msg.translate(Env.getCtx(),"OldValue"));  columnNames.add(Msg.translate(Env.getCtx(),"UpdatedBy"));  columnNames.add(Msg.translate(Env.getCtx(),"Updated"));  Listhead listhead=new Listhead();  listhead.setSizable(true);  for (int i=0; i < columnNames.size(); i++) {    Listheader listheader=new Listheader(columnNames.get(i).replaceAll("[&]",""));    listhead.appendChild(listheader);  }  table.appendChild(listhead);  SimpleListModel model=new SimpleListModel(m_data);  table.setItemRenderer(model);  table.setModel(model);  return true;}  }
class C{  public boolean initSegmenter(String modelDir){  System.out.println("Initilize JVnSegmenter ...");  System.out.println(modelDir);  vnSegmenter=new CRFSegmenter();  try {    vnSegmenter.init(modelDir);  } catch (  Exception e) {    System.out.println("Error while initializing JVnSegmenter");    vnSegmenter=null;    return false;  }  return true;}  }
class C{  public void shared(){  addArg("shared");}  }
class C{  private static boolean urlMatches(String url,String template){  if (TextUtils.isEmpty(url) || TextUtils.isEmpty(template)) {    return false;  }  String pattern='^' + template;  if (template.charAt(template.length() - 1) != '/') {    pattern+="/?";  }  pattern+="(\\?.*)?$";  return url.matches(pattern);}  }
class C{  public Trie lookup(CharSequence s){  Trie t=this;  for (int i=0, n=s.length(); i < n; ++i) {    t=t.lookup(s.charAt(i));    if (null == t) {      break;    }  }  return t;}  }
class C{  private void put122(final int b,final int s1,final int s2){  pool.put12(b,s1).putShort(s2);}  }
class C{  protected void checkActiveState(Widget child){  String href=child.getElement().getAttribute("href");  String url=Window.Location.getHref();  int pos=url.indexOf("#");  String location=pos >= 0 ? url.substring(pos,url.length()) : "";  if (!href.isEmpty() && location.startsWith(href)) {    ListItem li=findListItemParent(child);    if (li != null) {      makeActive(li);    }  } else   if (child instanceof HasWidgets) {    for (    Widget w : (HasWidgets)child) {      checkActiveState(w);    }  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] appendElement(Class<T> kind,T[] array,T element){  final T[] result;  final int end;  if (array != null) {    end=array.length;    result=(T[])Array.newInstance(kind,end + 1);    System.arraycopy(array,0,result,0,end);  } else {    end=0;    result=(T[])Array.newInstance(kind,1);  }  result[end]=element;  return result;}  }
class C{  Object processNUMBER(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    Double val;    AVT avt=null;    try {      avt=new AVT(handler,uri,name,rawName,value,owner);      if (avt.isSimple()) {        val=Double.valueOf(value);      }    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }catch (    NumberFormatException nfe) {      handleError(handler,XSLTErrorResources.INVALID_NUMBER,new Object[]{name,value},nfe);      return null;    }    return avt;  } else {    try {      return Double.valueOf(value);    } catch (    NumberFormatException nfe) {      handleError(handler,XSLTErrorResources.INVALID_NUMBER,new Object[]{name,value},nfe);      return null;    }  }}  }
class C{  public void addDataPoint(Vec v,int classification){  addDataPoint(v,emptyInt,classification,1.0);}  }
class C{  public boolean hasAnyResponseRelationship(){  if (this.hasResponse == null) {    this.hasResponse=hasRelationship(Primitive.RESPONSE);  }  return this.hasResponse;}  }
class C{  public static boolean isApkDebugable(Context context,String packageName){  try {    PackageInfo pkginfo=context.getPackageManager().getPackageInfo(packageName,PackageManager.GET_ACTIVITIES);    if (pkginfo != null) {      ApplicationInfo info=pkginfo.applicationInfo;      return (info.flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0;    }  } catch (  Exception e) {  }  return false;}  }
class C{  private void resetToXMLStream(){  return;}  }
class C{  public void appendName(String attrFormat,StringBuilder sb){  boolean hexFormat=false;  if (X500Principal.RFC1779.equals(attrFormat)) {    if (RFC1779_NAMES == oid.getGroup()) {      sb.append(oid.getName());    } else {      sb.append(oid.toOIDString());    }    sb.append('=');    if (value.escapedString == value.getHexString()) {      sb.append(value.getHexString().toUpperCase(Locale.US));    } else     if (value.escapedString.length() != value.rawString.length()) {      value.appendQEString(sb);    } else {      sb.append(value.escapedString);    }  } else {    Object group=oid.getGroup();    if (RFC1779_NAMES == group || RFC2253_NAMES == group) {      sb.append(oid.getName());      if (X500Principal.CANONICAL.equals(attrFormat)) {        int tag=value.getTag();        if (!ASN1StringType.UTF8STRING.checkTag(tag) && !ASN1StringType.PRINTABLESTRING.checkTag(tag) && !ASN1StringType.TELETEXSTRING.checkTag(tag)) {          hexFormat=true;        }      }    } else {      sb.append(oid.toString());      hexFormat=true;    }    sb.append('=');    if (hexFormat) {      sb.append(value.getHexString());    } else {      if (X500Principal.CANONICAL.equals(attrFormat)) {        sb.append(value.makeCanonical());      } else {        sb.append(value.escapedString);      }    }  }}  }
class C{  static public void deleteFromCache(int AD_PrintFormat_ID){  Integer key=new Integer(AD_PrintFormat_ID);  s_formats.put(key,null);}  }
class C{  @Override public void draw(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea,CategoryAxis domainAxis,ValueAxis rangeAxis){  PlotOrientation orientation=plot.getOrientation();  RectangleEdge domainEdge=Plot.resolveDomainAxisLocation(plot.getDomainAxisLocation(),orientation);  RectangleEdge rangeEdge=Plot.resolveRangeAxisLocation(plot.getRangeAxisLocation(),orientation);  CategoryDataset dataset=plot.getDataset();  int catIndex=dataset.getColumnIndex(getCategory());  int catCount=dataset.getColumnCount();  double j2DX=domainAxis.getCategoryMiddle(catIndex,catCount,dataArea,domainEdge);  double j2DY=rangeAxis.valueToJava2D(getValue(),dataArea,rangeEdge);  if (orientation == PlotOrientation.HORIZONTAL) {    double temp=j2DX;    j2DX=j2DY;    j2DY=temp;  }  double startX=j2DX + Math.cos(this.angle) * this.baseRadius;  double startY=j2DY + Math.sin(this.angle) * this.baseRadius;  double endX=j2DX + Math.cos(this.angle) * this.tipRadius;  double endY=j2DY + Math.sin(this.angle) * this.tipRadius;  double arrowBaseX=endX + Math.cos(this.angle) * this.arrowLength;  double arrowBaseY=endY + Math.sin(this.angle) * this.arrowLength;  double arrowLeftX=arrowBaseX + Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;  double arrowLeftY=arrowBaseY + Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;  double arrowRightX=arrowBaseX - Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;  double arrowRightY=arrowBaseY - Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;  GeneralPath arrow=new GeneralPath();  arrow.moveTo((float)endX,(float)endY);  arrow.lineTo((float)arrowLeftX,(float)arrowLeftY);  arrow.lineTo((float)arrowRightX,(float)arrowRightY);  arrow.closePath();  g2.setStroke(this.arrowStroke);  g2.setPaint(this.arrowPaint);  Line2D line=new Line2D.Double(startX,startY,arrowBaseX,arrowBaseY);  g2.draw(line);  g2.fill(arrow);  g2.setFont(getFont());  g2.setPaint(getPaint());  double labelX=j2DX + Math.cos(this.angle) * (this.baseRadius + this.labelOffset);  double labelY=j2DY + Math.sin(this.angle) * (this.baseRadius + this.labelOffset);  TextUtilities.drawAlignedString(getText(),g2,(float)labelX,(float)labelY,getTextAnchor());}  }
class C{  public static ScalarOperator parseScalarBinaryOperator(String opcode,boolean arg1IsScalar) throws DMLRuntimeException {  double default_constant=0;  return parseScalarBinaryOperator(opcode,arg1IsScalar,default_constant);}  }
class C{  public TriggerProcessIdentifier addTriggerProcessIdentifier(TriggerProcessIdentifierName name,String value){  TriggerProcessIdentifier identifier=new TriggerProcessIdentifier();  identifier.setTriggerProcess(this);  identifier.setName(name);  identifier.setValue(value);  getTriggerProcessIdentifiers().add(identifier);  return identifier;}  }
class C{  private StreamTokenizer makeArffTokenizer(BufferedReader br){  StreamTokenizer tokenizer=new StreamTokenizer(br);{    tokenizer.resetSyntax();    tokenizer.whitespaceChars(0,' ');    tokenizer.ordinaryChars('0','9');    tokenizer.ordinaryChar('-');    tokenizer.ordinaryChar('.');    tokenizer.wordChars(' ' + 1,'\u00FF');    tokenizer.whitespaceChars(',',',');    tokenizer.commentChar('%');    tokenizer.quoteChar('"');    tokenizer.quoteChar('\'');    tokenizer.ordinaryChar('{');    tokenizer.ordinaryChar('}');    tokenizer.eolIsSignificant(true);  }  return tokenizer;}  }
class C{  public static String join(String[] input){  return join(Arrays.asList(input));}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) public ResultVO delete(@CurrentUser User currentUser,@PathVariable String id){  try {    GroupParam param=new GroupParam(StringUtils.isBlank(id) ? null : Long.valueOf(id));    ResultVO resultVO=validateHelper.validate(param,currentUser,logger,OperationType.DELETE);    if (resultVO != null) {      return resultVO;    }    groupDomain.delete(param,currentUser);    final String GROUP="group";    return new ResultVO(ResultConstant.OK,OperationStatus.SUCCESS,String.format(ControllerConstant.DELETE,GROUP));  } catch (  CommonsException e) {    return resultHelper.infoResp(logger,e.getErrorType(),e.getMessage());  }catch (  Exception e) {    return resultHelper.errorResp(logger,e,ErrorType.UNKNOWN,e.getMessage());  }}  }
class C{  public void writeProperty(String propertyName,ICalDataType dataType,JCalValue value) throws IOException {  writeProperty(propertyName,new ICalParameters(),dataType,value);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public DebugRenderer(PhysicsWorld world,VertexBufferObjectManager pVBO){  this(world,pVBO,5);}  }
class C{  public static float[] join(float[] arrayA,float... arrayB){  if ((arrayB == null) || (arrayB.length == 0)) {    return arrayA;  }  if ((arrayA == null) || (arrayA.length == 0)) {    return arrayB;  }  float[] array=new float[arrayA.length + arrayB.length];  System.arraycopy(arrayA,0,array,0,arrayA.length);  System.arraycopy(arrayB,0,array,arrayA.length,arrayB.length);  return array;}  }
class C{  public int read(ByteBuffer buf,int off,int len,long timeout) throws IgniteCheckedException, IpcSharedMemoryOperationTimedoutException {  assert buf != null;  assert len > 0;  assert buf.capacity() >= off + len;  assert isReader;  lock.readLock().lock();  try {    if (closed.get())     throw new IgniteCheckedException("Shared memory segment has been closed: " + this);    return (int)IpcSharedMemoryUtils.readSharedMemoryByteBuffer(shmemPtr,buf,off,len,timeout);  }  finally {    lock.readLock().unlock();  }}  }
class C{  public void logEvent(String eventName,double valueToSum){  logEvent(eventName,valueToSum,null);}  }
class C{  public Message editMessageText(Message oldMessage,String text,ParseMode parseMode,boolean disableWebPagePreview,InlineReplyMarkup inlineReplyMarkup){  return this.editMessageText(oldMessage.getChat().getId(),oldMessage.getMessageId(),text,parseMode,disableWebPagePreview,inlineReplyMarkup);}  }
class C{  protected void countProximityPosition(int i){  if (!isReverseAxes())   super.countProximityPosition(i); else   if (i < m_proximityPositions.length)   m_proximityPositions[i]--;}  }
class C{  public final static <T>Stream<T> onePer(final Stream<T> stream,final long time,final TimeUnit t){  return new OnePerOperator<>(stream).onePer(time,t);}  }
class C{  @SuppressWarnings("unchecked") protected static Clustering<OPTICSModel> findOPTICSClustering(VisualizerContext context,Result start){  Hierarchy.Iter<Clustering<?>> it1=VisualizationTree.filterResults(context,start,Clustering.class);  for (; it1.valid(); it1.advance()) {    Clustering<?> clus=it1.get();    if (clus.getToplevelClusters().size() == 0) {      continue;    }    try {      Cluster<?> firstcluster=clus.getToplevelClusters().iterator().next();      if (firstcluster.getModel() instanceof OPTICSModel) {        return (Clustering<OPTICSModel>)clus;      }    } catch (    Exception e) {      LOG.warning("Clustering with no cluster detected.",e);    }  }  return null;}  }
class C{  public static boolean installNormal(Context context,String filePath){  Intent i=new Intent(Intent.ACTION_VIEW);  File file=new File(filePath);  if (file == null || !file.exists() || !file.isFile() || file.length() <= 0) {    return false;  }  i.setDataAndType(Uri.parse("file://" + filePath),"application/vnd.android.package-archive");  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(i);  return true;}  }
class C{  public void addSignature(ConsentSignature signature){  signatures.add(signature);}  }
class C{  @Override public FieldValue clone(){  try {    FieldValue clonedFieldValue=(FieldValue)super.clone();    if (fieldData != null) {      clonedFieldValue.fieldData=fieldData.clone();    }    return clonedFieldValue;  } catch (  CloneNotSupportedException e) {    throw new AssertionError("Unexpected (and impossible) CloneNotSupportedException");  }}  }
class C{  public boolean containsElement(SequenceElement element){  return includedElements.contains(element);}  }
class C{  public void addIncludeRegex(String regexExpression){  patterns.add(new Pair<StringPatternSet,Boolean>(new StringPatternSetRegex(regexExpression),true));}  }
class C{  public static <K>IdentityArrayList<K> wrap(final K a[]){  return wrap(a,a.length);}  }
class C{  protected void notify(XNetReply m){  notifyReply(m,lastSender);  lastSender=null;}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public static void main(final String[] args) throws IOException, InterruptedException {  Scanner scanner=new Scanner(System.in);  System.out.println("Enter your project id: ");  String projectId=scanner.nextLine();  System.out.println("Enter your dataset id: ");  String datasetId=scanner.nextLine();  System.out.println("Enter your table id: ");  String tableId=scanner.nextLine();  System.out.println("Enter the Google Cloud Storage Path to which you'd " + "like to export: ");  String cloudStoragePath=scanner.nextLine();  System.out.println("Enter how often to check if your job is  complete " + "(milliseconds): ");  long interval=scanner.nextLong();  scanner.close();  run(cloudStoragePath,projectId,datasetId,tableId,interval);}  }
class C{  @Override public String toString(){  return "CUDA_RESOURCE_DESC[" + createString(",") + "]";}  }
class C{  public static <ST,A>XorTSeq<ST,A> of(final AnyMSeq<Xor<ST,A>> monads){  return new XorTSeq<>(monads);}  }
class C{  private TInstance findCommon(V overload,TInputSet inputSet,List<? extends TPreptimeValue> inputs,TCastResolver resolver){  assert inputSet.targetType() == null : inputSet;  TClass common=null;  TInstance commonInst=null;  int lastPositionalInput=overload.positionalInputs();  boolean notVararg=!overload.isVararg();  boolean nullable=false;  for (int i=0, size=inputs.size(); i < size; ++i) {    if (overload.inputSetAt(i) != inputSet)     continue;    if (notVararg && (i >= lastPositionalInput))     break;    TPreptimeValue inputTpv=inputs.get(i);    nullable|=inputTpv.isNullable();    TInstance inputInstance=inputTpv.type();    if (inputInstance == null) {      continue;    }    TClass inputClass=inputInstance.typeClass();    if (common == null) {      common=inputClass;      commonInst=inputInstance;    } else     if (inputClass == common) {      commonInst=(commonInst == null) ? inputInstance : common.pickInstance(commonInst,inputInstance);    } else {      TClass newCommon=resolver.commonTClass(common,inputClass);      if (newCommon == null)       throw new NoCommonTypeException(overload.displayName(),typeNameList(inputs));      if (newCommon == inputClass) {        common=newCommon;        commonInst=inputInstance;      } else       if (newCommon != common) {        common=newCommon;        commonInst=null;      }    }  }  if (common == null) {    if (!inputSet.isPicking())     return MString.VARCHAR.instance(0,nullable); else     throw new ArgumentTypeRequiredException(overload.displayName(),inputSet);  }  return (commonInst == null) ? common.instance(nullable) : commonInst;}  }
class C{  private void remove(ShardRouting shard){  ensureMutable();  if (!shard.active() && shard.relocatingNodeId() == null) {    inactiveShardCount--;    assert inactiveShardCount >= 0;    if (shard.primary()) {      inactivePrimaryCount--;    }  } else   if (shard.relocating()) {    cancelRelocation(shard);  }  assignedShardsRemove(shard);}  }
class C{  public GenericAnnotatedTypeFactory(BaseTypeChecker checker,boolean useFlow){  super(checker);  this.everUseFlow=useFlow;  this.shouldDefaultTypeVarLocals=useFlow;  this.useFlow=useFlow;  this.analyses=new LinkedList<>();  this.scannedClasses=new HashMap<>();  this.flowResult=null;  this.regularExitStores=null;  this.methodInvocationStores=null;  this.returnStatementStores=null;  this.initializationStore=null;  this.initializationStaticStore=null;  this.cfgVisualizer=createCFGVisualizer();}  }
class C{  public final void testGetMidTermsOfReductionPolynomial02(){  assertNull(new ECFieldF2m(2000).getMidTermsOfReductionPolynomial());}  }
class C{  public Link(){}  }
class C{  @SuppressWarnings("ConstantConditions") public void sendUserMessage(Collection<? extends ClusterNode> nodes,Object msg,@Nullable Object topic,boolean ordered,long timeout) throws IgniteCheckedException {  boolean loc=nodes.size() == 1 && F.first(nodes).id().equals(locNodeId);  byte[] serMsg=null;  byte[] serTopic=null;  if (!loc) {    serMsg=marsh.marshal(msg);    if (topic != null)     serTopic=marsh.marshal(topic);  }  GridDeployment dep=null;  String depClsName=null;  if (ctx.config().isPeerClassLoadingEnabled()) {    Class<?> cls0=U.detectClass(msg);    if (U.isJdk(cls0) && topic != null)     cls0=U.detectClass(topic);    dep=ctx.deploy().deploy(cls0,U.detectClassLoader(cls0));    if (dep == null)     throw new IgniteDeploymentCheckedException("Failed to deploy user message: " + msg);    depClsName=cls0.getName();  }  Message ioMsg=new GridIoUserMessage(msg,serMsg,depClsName,topic,serTopic,dep != null ? dep.classLoaderId() : null,dep != null ? dep.deployMode() : null,dep != null ? dep.userVersion() : null,dep != null ? dep.participants() : null);  if (ordered)   sendOrderedMessage(nodes,TOPIC_COMM_USER,ioMsg,PUBLIC_POOL,timeout,true); else   if (loc)   send(F.first(nodes),TOPIC_COMM_USER,ioMsg,PUBLIC_POOL); else {    ClusterNode locNode=F.find(nodes,null,F.localNode(locNodeId));    Collection<? extends ClusterNode> rmtNodes=F.view(nodes,F.remoteNodes(locNodeId));    if (!rmtNodes.isEmpty())     send(rmtNodes,TOPIC_COMM_USER,ioMsg,PUBLIC_POOL);    if (locNode != null)     send(locNode,TOPIC_COMM_USER,ioMsg,PUBLIC_POOL);  }}  }
class C{  @SuppressWarnings("unchecked") public void extractProperties(Object o,boolean ignoreIfUnsupported){  if (logger.isDebugEnabled())   logger.debug("Extracting properties from object=" + o.getClass().getName());  Field[] fields=o.getClass().getDeclaredFields();  for (  Field field : fields) {    field.setAccessible(true);    if (logger.isDebugEnabled())     logger.debug("Extracting field=" + field.getName());    try {      if (field.getType() == Integer.TYPE) {        this.setInt(field.getName(),field.getInt(o));      } else       if (field.getType() == Long.TYPE) {        this.setInt(field.getName(),(int)field.getLong(o));      } else       if (field.getType() == Boolean.TYPE) {        this.setBoolean(field.getName(),field.getBoolean(o));      } else       if (field.getType() == String.class) {        this.setString(field.getName(),(String)field.get(o));      } else       if (field.getType() == Float.TYPE) {        this.setFloat(field.getName(),(Float)field.get(o));      } else       if (field.getType() == Double.TYPE) {        this.setDouble(field.getName(),(Double)field.get(o));      } else       if (field.getType() == Date.class) {        this.setDate(field.getName(),(Date)field.get(o));      } else       if (field.getType() == List.class) {        this.setStringList(field.getName(),(List<String>)field.get(o));      } else {        Object bean=field.get(o);        if (bean == null) {          if (logger.isDebugEnabled()) {            logger.debug("Skipping property with null value, prop=" + field.getName());          }        } else         if (isBean(bean.getClass())) {          TungstenProperties beanProps=new TungstenProperties();          beanProps.extractProperties(bean,ignoreIfUnsupported);          String beanKey=field.getName();          setString(beanKey,bean.getClass().getName());          this.putAllWithPrefix(beanProps,beanKey + ".");        } else         if (ignoreIfUnsupported) {          if (logger.isDebugEnabled()) {            logger.debug("Skipping property with unsupported type, prop=" + field.getName());          }          continue;        } else {          throw new PropertyException("Unsupported property type:" + field.getType());        }      }    } catch (    IllegalAccessException i) {      logger.error("Exception while trying to extract values from field=" + field.getName() + " of class="+ o.getClass().getName());    }  }}  }
class C{  private void showMessage(String message){  Toast.makeText(SampleConfigActivity.this,message,Toast.LENGTH_SHORT).show();}  }
class C{  protected void printIndent(StringBuilder ddl){  ddl.append(getIndent());}  }
class C{  public static GeoTimeSerie fillticks(GeoTimeSerie gts,long location,long elevation,Object value,long[] ticks){  GeoTimeSerie filled=gts.clone();  if (null == value || GTSHelper.isBucketized(filled)) {    return filled;  }  long[] gticks=filled.values > 0 ? Arrays.copyOf(filled.ticks,filled.values) : new long[0];  Arrays.sort(gticks);  Arrays.sort(ticks);  int gtsidx=0;  int tickidx=0;  int nvalues=filled.values;  while (gtsidx < nvalues) {    long tick=gticks[gtsidx];    while (tickidx < ticks.length && ticks[tickidx] < tick) {      GTSHelper.setValue(filled,ticks[tickidx],location,elevation,value,false);      tickidx++;    }    gtsidx++;  }  while (tickidx < ticks.length) {    GTSHelper.setValue(filled,ticks[tickidx],location,elevation,value,false);    tickidx++;  }  return filled;}  }
class C{  public String toString(){  String ret="TAG_Compound(\"" + name + "\"): count="+ elements.size()+ "\n";  Iterator<NBT_Tag> iter=elements.iterator();  while (iter.hasNext()) {    NBT_Tag tag=iter.next();    ret+=tag.toString() + "\n";  }  ret+="ENDOF TAG_Compound(\"" + name + "\")";  return ret;}  }
class C{  private boolean validateInstanceCounts(String appId,AutoScalerPolicy policy,String triggerId,Integer currentInstanceCount) throws Exception {  int minCount=policy.getCurrentInstanceMinCount();  int maxCount=policy.getCurrentInstanceMaxCount();  if (null == triggerId) {    if (currentInstanceCount >= minCount && currentInstanceCount <= maxCount) {      logger.info("The number of application instances is greater than minimum instances limitation and less than maximum instances limitation.");      return false;    } else     if (currentInstanceCount >= maxCount) {      logger.info("The number of application instances is greater than maximum instances limitation. Start scaling in.");      return true;    } else {      logger.info("The number of application instances is less than minimum instances limitation. Start scaling out.");      return true;    }  } else {    if (AutoScalerPolicyTrigger.TriggerId_LowerThreshold.equals(triggerId) && currentInstanceCount <= minCount) {      logger.debug("False: Min count reached. No scaling in action.");      return false;    } else     if (AutoScalerPolicyTrigger.TriggerId_UpperThreshold.equals(triggerId) && currentInstanceCount >= maxCount) {      logger.debug("False: Max count reached. No scaling out action.");      return false;    }  }  return true;}  }
class C{  public void finest(CharSequence message){  log(Level.FINEST,message);}  }
class C{  public static boolean hasUnknownDecorator(@NotNull PyDecoratable element,@NotNull TypeEvalContext context){  return !allDecoratorsAreKnown(element,getKnownDecorators(element,context));}  }
class C{  @Deprecated public ConfirmDialog(String key,int mode,boolean showAskAgainCheckbox,Object... arguments){  this(ApplicationFrame.getApplicationFrame(),key,mode,showAskAgainCheckbox,arguments);}  }
class C{  public void recordSRDFOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,Object... extParam){  try {    boolean opStatus=(Operation.Status.ready == status) ? true : false;    String evType;    evType=opType.getEvType(opStatus);    String evDesc=opType.getDescription();    String opStage=AuditLogManager.AUDITOP_END;    _logger.info("opType: {} detail: {}",opType.toString(),evType.toString() + ':' + evDesc);    recordBourneSRDFEvent(dbClient,getId(),evType,status,evDesc);    String id=(String)extParam[0];switch (opType) {case CREATE_SRDF_LINK:      AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);    break;case SUSPEND_SRDF_LINK:  AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);break;case DETACH_SRDF_LINK:AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);break;case PAUSE_SRDF_LINK:AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);break;case RESUME_SRDF_LINK:AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);break;case FAILOVER_SRDF_LINK:AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);break;case SWAP_SRDF_VOLUME:AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);break;case STOP_SRDF_LINK:AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);break;case SYNC_SRDF_LINK:AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);break;default :_logger.error("unrecognized SRDF operation type");}} catch (Exception e) {_logger.error("Failed to record SRDF operation {}, err: {}",opType.toString(),e);}}  }
class C{  protected void sequence_CharacterClassEscapeSequence_Term(ISerializationContext context,CharacterClassEscapeSequence semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static <E>void shuffle(final List<E> list){  final Random prng=new Random(13);  final int size=list.size();  for (int i=0; i < size; i++) {    final int j=i + prng.nextInt(size - i);    final E e=list.get(i);    list.set(i,list.get(j));    list.set(j,e);  }}  }
class C{  public StereoTypeTarget createStereoTypeTarget(){  StereoTypeTargetImpl stereoTypeTarget=new StereoTypeTargetImpl();  return stereoTypeTarget;}  }
class C{  private void queueUpSyncs(final Cursor contactsCursor){  ContactSyncEntry syncEntry=null;  while (contactsCursor.moveToNext()) {    if (syncEntry == null) {      syncEntry=new ContactSyncEntry(UPLOAD_BATCH_SIZE);    }    final String number=contactsCursor.getString(contactsCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));    final String name=contactsCursor.getString(contactsCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));    if (!TextUtils.isEmpty(number)) {      syncEntry.addNumber(numberToNational(number));      syncEntry.addName(name);      if (syncEntry.isFull()) {        Logger.d(TAG,"Adding sync entry to queue");        mSyncQueue.add(syncEntry);        syncEntry=null;      }    }  }}  }
class C{  private void invalidateEndTransition(){  if (mEndTransition != null && mEndTransition.isGenerated()) {    final long transitionDurationMs=mEndTransition.getDuration();    final List<Effect> effects=getAllEffects();    for (    Effect effect : effects) {      if (effect.getStartTime() + effect.getDuration() > mDurationMs - transitionDurationMs) {        mEndTransition.invalidate();        break;      }    }    if (mEndTransition.isGenerated()) {      final List<Overlay> overlays=getAllOverlays();      for (      Overlay overlay : overlays) {        if (overlay.getStartTime() + overlay.getDuration() > mDurationMs - transitionDurationMs) {          mEndTransition.invalidate();          break;        }      }    }  }}  }
class C{  @Override public void update(final SolrInputDocument solrdoc) throws IOException, SolrException {  this.add(partialUpdatePatch(solrdoc));}  }
class C{  private void filterProtectedVpools(DbClient dbClient,UnManagedVolume unManagedVolume,String personality){  if (unManagedVolume.getSupportedVpoolUris() != null && !unManagedVolume.getSupportedVpoolUris().isEmpty()) {    Iterator<VirtualPool> vpoolItr=dbClient.queryIterativeObjects(VirtualPool.class,URIUtil.toURIList(unManagedVolume.getSupportedVpoolUris()));    while (vpoolItr.hasNext()) {      boolean remove=false;      VirtualPool vpool=vpoolItr.next();      if (vpool.getProtectionRemoteCopySettings() != null) {        remove=true;      }      if (vpool.getProtectionVarraySettings() != null && ((Volume.PersonalityTypes.TARGET.name().equalsIgnoreCase(personality)) || Volume.PersonalityTypes.METADATA.name().equalsIgnoreCase(personality))) {        boolean foundEmptyTargetVpool=false;        Map<URI,VpoolProtectionVarraySettings> settings=VirtualPool.getProtectionSettings(vpool,dbClient);        for (        Map.Entry<URI,VpoolProtectionVarraySettings> setting : settings.entrySet()) {          if (NullColumnValueGetter.isNullURI(setting.getValue().getVirtualPool())) {            foundEmptyTargetVpool=true;            break;          }        }        if (Volume.PersonalityTypes.METADATA.name().equalsIgnoreCase(personality) && (NullColumnValueGetter.isNullValue(vpool.getJournalVpool()) || NullColumnValueGetter.isNullValue(vpool.getStandbyJournalVpool()))) {          foundEmptyTargetVpool=true;        }        if (!foundEmptyTargetVpool) {          remove=true;        }      }      if (Volume.PersonalityTypes.SOURCE.name().equalsIgnoreCase(personality)) {        if (!VirtualPool.vPoolSpecifiesProtection(vpool)) {          remove=true;        } else         if (unManagedVolume.getVolumeInformation().containsKey(SupportedVolumeInformation.RP_STANDBY_INTERNAL_SITENAME.toString()) && !VirtualPool.vPoolSpecifiesMetroPoint(vpool)) {          remove=true;        }      }      if (remove) {        log.info("Removing virtual pool " + vpool.getLabel() + " from supported vpools for unmanaged volume: "+ unManagedVolume.getLabel());        unManagedVolume.getSupportedVpoolUris().remove(vpool.getId().toString());      }    }  }}  }
class C{  public static HashMap<String,ParticipantAdapterItem> listKnownParticipants(MXSession session){  HashMap<String,ParticipantAdapterItem> map=new HashMap<>();  Collection<User> users=session.getDataHandler().getStore().getUsers();  for (  User user : users) {    if (!MXCallsManager.isConferenceUserId(user.user_id)) {      map.put(user.user_id,new ParticipantAdapterItem(user));    }  }  return map;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public String toString(){  try {    StringBuilder buffer=new StringBuilder();    buffer.append(query + "\r\n\r\n");    for (int i=0; i < list.size(); i++) {      buffer.append(i + "\t" + list.get(i).length+ "\r\n");    }    return buffer.toString();  } catch (  Exception e) {  }  return "<" + list.size() + ">\r\n"+ query.toString();}  }
class C{  public Fire(final int width,final int height){  setDescription("You see a flickering light. You are tempted to touch it.");  setRPClass("fire");  put("type","fire");  setSize(width,height);  setResistance(100);}  }
class C{  private static VmDisksOpResponse checkAttachDisksResponse(VmDisksOpResponse vmDisksOpResponse) throws RpcException {  return checkVmDisksOpResponse(vmDisksOpResponse);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Class getClass()")) {    java_lang_Object_getClass(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object clone()")) {    java_lang_Object_clone(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public boolean hasAttributeNS(String namespaceURI,String localName){  return DTM.NULL != dtm.getAttributeNode(node,namespaceURI,localName);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Path("/{id}/storage-ports") public StoragePortRestRep createStoragePort(@PathParam("id") URI id,StoragePortRequestParam param) throws ControllerException {  ArgValidator.checkFieldUriType(id,StorageSystem.class,"id");  StorageSystem system=queryResource(id);  if (!Type.openstack.name().equalsIgnoreCase(system.getSystemType())) {    throw APIException.badRequests.cannotCreatePortForSystem(system.getSystemType());  }  ArgValidator.checkFieldNotEmpty(param.getName(),"name");  String portName=param.getName();  ArgValidator.checkFieldNotEmpty(param.getTransportType(),"transport_type");  ArgValidator.checkFieldValueFromEnum(param.getTransportType(),"transport_type",EnumSet.of(TransportType.FC,TransportType.IP));  String transportType=param.getTransportType();  String portNetworkId=param.getPortNetworkId();  ArgValidator.checkFieldNotEmpty(param.getPortNetworkId(),"port_network_id");  StoragePortService.checkValidPortNetworkId(transportType,portNetworkId);  checkForDuplicatePortName(portName,id);  StoragePortService.checkForDuplicatePortNetworkIdWithinSystem(_dbClient,portNetworkId,id);  StorageHADomain adapter=CinderUtils.getStorageAdapter(system,_dbClient);  StoragePort port=new StoragePort();  port.setId(URIUtil.createId(StoragePort.class));  port.setStorageDevice(id);  String nativeGuid=NativeGUIDGenerator.generateNativeGuid(system,portName,NativeGUIDGenerator.PORT);  port.setNativeGuid(nativeGuid);  port.setPortNetworkId(portNetworkId);  port.setRegistrationStatus(DiscoveredDataObject.RegistrationStatus.REGISTERED.toString());  port.setPortType(PortType.frontend.name());  port.setOperationalStatus(OperationalStatus.OK.toString());  port.setTransportType(transportType);  port.setLabel(portName);  port.setPortName(portName);  port.setStorageHADomain(adapter.getId());  port.setPortGroup(CinderConstants.CINDER_PORT_GROUP);  port.setCompatibilityStatus(CompatibilityStatus.COMPATIBLE.name());  _dbClient.createObject(port);  StoragePortAssociationHelper.runUpdatePortAssociationsProcess(Collections.singleton(port),null,_dbClient,_coordinator,null);  auditOp(OperationTypeEnum.CREATE_STORAGE_PORT,true,null,port.getLabel(),port.getId().toString());  return MapStoragePort.getInstance(_dbClient).toStoragePortRestRep(port);}  }
class C{  private void actionZoom(Object selectedItem){  if (m_lookup == null)   return;  MQuery zoomQuery=m_lookup.getZoomQuery();  Object value=getValue();  if (value == null)   value=selectedItem;  if (zoomQuery == null || value != null) {    zoomQuery=new MQuery();    String keyTableName=null;    String keyColumnName=null;    if (m_lookup != null && m_lookup instanceof MLookup) {      int AD_Reference_ID=((MLookup)m_lookup).getAD_Reference_Value_ID();      if (DisplayType.List == m_lookup.getDisplayType()) {        keyColumnName="AD_Ref_List_ID";        keyTableName="AD_Ref_List";        value=DB.getSQLValue(null,"SELECT AD_Ref_List_ID FROM AD_Ref_List WHERE AD_Reference_ID=? AND Value=?",AD_Reference_ID,value);      } else {        if (AD_Reference_ID != 0) {          String query="SELECT kc.ColumnName, kt.TableName" + " FROM AD_Ref_Table rt" + " INNER JOIN AD_Column kc ON (rt.AD_Key=kc.AD_Column_ID)"+ " INNER JOIN AD_Table kt ON (rt.AD_Table_ID=kt.AD_Table_ID)"+ " WHERE rt.AD_Reference_ID=?";          PreparedStatement pstmt=null;          ResultSet rs=null;          try {            pstmt=DB.prepareStatement(query,null);            pstmt.setInt(1,AD_Reference_ID);            rs=pstmt.executeQuery();            if (rs.next()) {              keyColumnName=rs.getString(1);              keyTableName=rs.getString(2);            }          } catch (          Exception e) {            log.log(Level.SEVERE,query,e);          } finally {            DB.close(rs,pstmt);            rs=null;            pstmt=null;          }        }      }    }    if (keyColumnName != null && keyColumnName.length() != 0) {      zoomQuery.addRestriction(keyColumnName,MQuery.EQUAL,value);      zoomQuery.setZoomColumnName(keyColumnName);      zoomQuery.setZoomTableName(keyTableName);    } else {      zoomQuery.addRestriction(m_columnName,MQuery.EQUAL,value);      if (m_columnName.indexOf(".") > 0) {        zoomQuery.setZoomColumnName(m_columnName.substring(m_columnName.indexOf(".") + 1));        zoomQuery.setZoomTableName(m_columnName.substring(0,m_columnName.indexOf(".")));      } else {        zoomQuery.setZoomColumnName(m_columnName);        zoomQuery.setZoomTableName(m_columnName.substring(0,m_columnName.length() - 3));      }    }    zoomQuery.setZoomValue(value);    zoomQuery.setRecordCount(1);  }  int AD_Window_ID=m_lookup.getZoom(zoomQuery);  log.info(m_columnName + " - AD_Window_ID=" + AD_Window_ID+ " - Query="+ zoomQuery+ " - Value="+ value);  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  AWindow frame=new AWindow();  if (!frame.initWindow(AD_Window_ID,zoomQuery)) {    setCursor(Cursor.getDefaultCursor());    ValueNamePair pp=CLogger.retrieveError();    String msg=pp == null ? "AccessTableNoView" : pp.getValue();    ADialog.error(m_lookup.getWindowNo(),this,msg,pp == null ? "" : pp.getName());  } else {    AEnv.addToWindowManager(frame);    if (Ini.isPropertyBool(Ini.P_OPEN_WINDOW_MAXIMIZED)) {      AEnv.showMaximized(frame);    } else {      AEnv.showCenterScreen(frame);    }  }  frame=null;  setCursor(Cursor.getDefaultCursor());}  }
class C{  public boolean do_BoundsCheck(Operand ref,Operand index){  if (gc.noBoundsChecks()) {    return false;  }  RegisterOperand guard=gc.getTemps().makeTempValidation();  appendInstruction(BoundsCheck.create(BOUNDS_CHECK,guard,ref.copy(),index.copy(),getCurrentGuard()));  setCurrentGuard(guard);  rectifyStateWithArrayBoundsExceptionHandler();  return false;}  }
class C{  private synchronized void refreshSockets(){  refreshAperture();  int n=pendingSockets + activeSockets.size();  if (n < targetAperture && !activeFactories.isEmpty()) {    logger.debug("aperture {} is below target {}, adding {} sockets",n,targetAperture,targetAperture - n);    addSockets(targetAperture - n);  } else   if (targetAperture < activeSockets.size()) {    logger.debug("aperture {} is above target {}, quicking 1 socket",n,targetAperture);    quickSlowestRS();  }  long now=Clock.now();  if (now - lastRefresh < refreshPeriod) {    return;  } else {    long prev=refreshPeriod;    refreshPeriod=(long)Math.min(refreshPeriod * 1.5,maxRefreshPeriod);    logger.info("Bumping refresh period, {}->{}",prev / 1000,refreshPeriod / 1000);  }  lastRefresh=now;  addSockets(1);}  }
class C{  public OpenAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("OpenAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(LONG_DESCRIPTION,res.getString("OpenAction.statusbar"));  putValue(NAME,res.getString("OpenAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("OpenAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("OpenAction.image")))));}  }
class C{  public boolean addGpsDateTimeStampTag(long timestamp){  ExifTag t=buildTag(TAG_GPS_DATE_STAMP,mGPSDateStampFormat.format(timestamp));  if (t == null) {    return false;  }  setTag(t);  mGPSTimeStampCalendar.setTimeInMillis(timestamp);  t=buildTag(TAG_GPS_TIME_STAMP,new Rational[]{new Rational(mGPSTimeStampCalendar.get(Calendar.HOUR_OF_DAY),1),new Rational(mGPSTimeStampCalendar.get(Calendar.MINUTE),1),new Rational(mGPSTimeStampCalendar.get(Calendar.SECOND),1)});  if (t == null) {    return false;  }  setTag(t);  return true;}  }
class C{  public static String parseTagName(String tagName){  return Character.toUpperCase(tagName.charAt(0)) + tagName.substring(1).replace("_"," ");}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatableIntegerValue res;  if (result == null) {    res=new AnimatableIntegerValue(target);  } else {    res=(AnimatableIntegerValue)result;  }  int v=value;  if (to != null) {    AnimatableIntegerValue toInteger=(AnimatableIntegerValue)to;    v+=value + interpolation * (toInteger.getValue() - value);  }  if (accumulation != null) {    AnimatableIntegerValue accInteger=(AnimatableIntegerValue)accumulation;    v+=multiplier * accInteger.getValue();  }  if (res.value != v) {    res.value=v;    res.hasChanged=true;  }  return res;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.STATE_CASE__STEP:    return basicSetStep(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void editNodeLocations(Map<GraphNode,Point2D> newLocations){  glPanel.editNodeLocations(newLocations);}  }
class C{  public static int parseInt(char[] chars,int offset,int len,int radix) throws NumberFormatException {  if (chars == null || radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {    throw new NumberFormatException();  }  int i=0;  if (len == 0) {    throw new NumberFormatException("chars length is 0");  }  boolean negative=chars[offset + i] == '-';  if (negative && ++i == len) {    throw new NumberFormatException("can't convert to an int");  }  if (negative == true) {    offset++;    len--;  }  return parse(chars,offset,len,radix,negative);}  }
class C{  public void copyBlockChainFromInstallationDirectory(String destinationBlockChainFilename,boolean alwaysOverWrite) throws IOException {  if (destinationBlockChainFilename == null) {    return;  }  File destinationBlockchain=new File(destinationBlockChainFilename);  if (!destinationBlockchain.exists() || alwaysOverWrite) {    File directory=new File(".");    String currentWorkingDirectory=directory.getCanonicalPath();    String filePrefix=MultiBitService.getFilePrefix();    String blockchainFilename=filePrefix + MultiBitService.BLOCKCHAIN_SUFFIX;    String sourceBlockchainFilename=currentWorkingDirectory + File.separator + blockchainFilename;    File sourceBlockchain=new File(sourceBlockchainFilename);    if (sourceBlockchain.exists() && !destinationBlockChainFilename.equals(sourceBlockchainFilename)) {      log.info("Copying blockchain from '" + sourceBlockchainFilename + "' to '"+ destinationBlockChainFilename+ "'");      if (alwaysOverWrite) {        if (destinationBlockchain.exists()) {          destinationBlockchain.delete();        }      }      long startTime=(DateUtils.nowUtc()).getMillis();      copyFile(sourceBlockchain,destinationBlockchain);      long stopTime=(DateUtils.nowUtc()).getMillis();      log.info("Time taken to copy blockchain was " + (stopTime - startTime) + " ms.");      long sourceLength=sourceBlockchain.length();      long destinationLength=destinationBlockchain.length();      if (sourceLength != destinationLength) {        String errorText="Blockchain was not copied to user's application data directory correctly.\nThe source blockchain '" + sourceBlockchainFilename + "' is of length "+ sourceLength+ "\nbut the destination blockchain '"+ destinationBlockChainFilename+ "' is of length "+ destinationLength;        log.error(errorText);        throw new FileHandlerException(errorText);      }    }  }}  }
class C{  public static boolean isTableAbsenceError(Throwable e){  while (e != null) {    if (e instanceof InvalidQueryException && (TABLE_EXIST_ERROR1.matcher(e.getMessage()).matches() || KEYSPACE_EXIST_ERROR1.matcher(e.getMessage()).matches() || KEYSPACE_EXIST_ERROR2.matcher(e.getMessage()).matches()))     return true;    if (e instanceof NoHostAvailableException && ((NoHostAvailableException)e).getErrors() != null) {      NoHostAvailableException ex=(NoHostAvailableException)e;      for (      Map.Entry<InetSocketAddress,Throwable> entry : ex.getErrors().entrySet()) {        Throwable error=entry.getValue();        if (error instanceof DriverException && (error.getMessage().contains(TABLE_EXIST_ERROR2) || KEYSPACE_EXIST_ERROR3.matcher(error.getMessage()).matches()))         return true;      }    }    e=e.getCause();  }  return false;}  }
class C{  public GDSException(int type,int fbErrorCode,String strParam,Throwable cause){  this(type,fbErrorCode,strParam);  initCause(cause);  setNext(new GDSException(ISCConstants.isc_arg_string,strParam));}  }
class C{  public void testAtomic() throws Exception {  testAtomic0(cachesAtomic);}  }
class C{  public void initHandler(){  if (hooksReference == null) {    return;  }  if (existingHooks != null) {    List<Thread> list=removeNewHooks();    if (list != null && !list.isEmpty()) {      logger.warn("Previous hooks were not executed. Going to remove them");    }  }  existingHooks=new IdentityHashMap<>();  existingHooks.putAll(hooksReference);}  }
class C{  @Override public boolean isAllowedToSendMessage() throws RemoteException {  try {    if (!mRcsSettings.isGroupChatActivated()) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot send message on group chat with group chat Id '" + mChatId + "' as group chat feature is not supported.");      }      return false;    }    if (isGroupChatAbandoned()) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot send message on group chat with group chat Id '" + mChatId + "'");      }      return false;    }    if (!mRcsSettings.getMyCapabilities().isImSessionSupported()) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot send message on group chat with group chat Id '" + mChatId + "' as IM capabilities are not supported for self.");      }      return false;    }    GroupChatSession session=mImService.getGroupChatSession(mChatId);    if (session == null) {      if (!isGroupChatRejoinable()) {        return false;      }    }    return true;  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  private void restartVideo(){  mMediaPlayer.start();}  }
class C{  public void preSplit(BaggageImpl current){  current.moveEntries(PT_ACTIVE_NAMESPACE,PT_ARCHIVE_NAMESPACE);}  }
class C{  private FieldValue(final byte[] fieldData,final boolean initialized){  this.fieldData=fieldData;  this.initialized=initialized;}  }
class C{  public EgovPaginatedList(final int pageNumber,final int objectsPerPage,final String sortCriterion,final SortOrderEnum sortDir){  super();  if (pageNumber < 0) {    this.pageNumber=0;  } else {    this.pageNumber=pageNumber;  }  this.objectsPerPage=objectsPerPage;  this.sortCriterion=sortCriterion;  this.sortDirection=sortDir;}  }
class C{  public static boolean isLoggable(String tag,int level){  return android.util.Log.isLoggable(tag,level);}  }
class C{  private TLogical(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static SWTBotTreeItem selectProject(final SWTWorkbenchBot bot,String projectName){  SWTBotView explorer=getPackageExplorer(bot);  for (  SWTBotView view : bot.views()) {    if (view.getTitle().equals("Package Explorer") || view.getTitle().equals("Project Explorer")) {      explorer=view;      break;    }  }  if (explorer == null) {    throw new WidgetNotFoundException("Could not find the 'Package Explorer' or 'Project Explorer' view.");  }  Widget explorerWidget=explorer.getWidget();  Tree explorerTree=bot.widget(widgetOfType(Tree.class),explorerWidget);  return new SWTBotTree(explorerTree).getTreeItem(projectName).select();}  }
class C{  private static boolean meetsAllBounds(final Vector p,final Membership[] bounds){  return meetsAllBounds(p.x,p.y,p.z,bounds);}  }
class C{  public void adjustZoomFromMouseWheel(int rot){  Projection projection=getProjection();  if (projection == null) {    return;  }  setUserHasChangedScale(true);  Point2D minutesPnt0=projection.inverse(0,0);  Point2D minutesPnt1=projection.inverse(1,0);  double minutesPerPixel=minutesPnt1.getX() - minutesPnt0.getX();  double minSelectionWidthMinutes=minutesPerPixel * sliderPointHalfWidth * 2;  double selectionWidthPixels=selectionWidthMinutes / minutesPerPixel;  double multiplier=selectionWidthPixels / 40;  selectionWidthMinutes+=rot * minutesPerPixel * multiplier;  if (selectionWidthMinutes < minSelectionWidthMinutes) {    selectionWidthMinutes=minSelectionWidthMinutes;  }  if (selectionWidthMinutes > maxSelectionWidthMinutes) {    selectionWidthMinutes=maxSelectionWidthMinutes;  }  updateTimeline();  doPrepare();}  }
class C{  public static Path valueOf(String pathString){  return new Path(pathString);}  }
class C{  public static boolean isLetter(String data){  String expr="^[A-Za-z]+$";  return data.matches(expr);}  }
class C{  public ChartPanel(String title,String unitName,Dataset dataset,GCTraceCheckpoint checkpoint){  super(title,unitName);  this.dataset=dataset;  this.refresher=new Refresher(WorkerThread.instance(),new RCWithGCTraceCheckpoint(checkpoint,locker,this));  this.checkpoint=checkpoint;  addChart();}  }
class C{  public String toString(){  return String.format("attribute %s='%s'",name,value);}  }
class C{  public JsonReader newJsonReader(Reader reader){  JsonReader jsonReader=new JsonReader(reader);  jsonReader.setLenient(lenient);  return jsonReader;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:00.409 -0500",hash_original_method="8C5AA93676CE0EF7515972F93F61C0B6",hash_generated_method="191467B0F9825B33B79222EA1167811D") protected int computeScrollDeltaToGetChildRectOnScreen(Rect rect){  if (getChildCount() == 0)   return 0;  int width=getWidth();  int screenLeft=getScrollX();  int screenRight=screenLeft + width;  int fadingEdge=getHorizontalFadingEdgeLength();  return (width + screenLeft + screenRight+ fadingEdge+ rect.getTaintInt());}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[24];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 10; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }      }    }  }  for (int i=0; i < 24; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  jj_endpos=0;  jj_rescan_token();  jj_add_error_token(0,0);  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage);}  }
class C{  public ForgeDirection sideDifference(Coord4D other){  Coord4D diff=difference(other);  for (  ForgeDirection side : ForgeDirection.VALID_DIRECTIONS) {    if (side.offsetX == diff.xCoord && side.offsetY == diff.yCoord && side.offsetZ == diff.zCoord) {      return side;    }  }  return ForgeDirection.UNKNOWN;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i;  double numInNeighbours;  boolean flag=false;  boolean logTransform=false;  String outputType=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      power=Double.parseDouble(args[i]);      if (power > 10) {        power=10;      }    } else     if (i == 3) {      outputType=args[i].toLowerCase();    } else     if (i == 4) {      logTransform=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      if (!args[i].toLowerCase().contains("not specified")) {        threshold=Double.parseDouble(args[i]);      } else {        threshold=-9999;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,1);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpGrid.isTemporaryFile=true;    int loopNum=1;    updateProgress("Loop " + loopNum + ":",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          numInNeighbours=0;          for (i=0; i < 8; i++) {            if (DEM.getValue(row + dY[i],col + dX[i]) > z) {              numInNeighbours++;            }          }          tmpGrid.setValue(row,col,numInNeighbours);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop " + loopNum + ":",(int)progress);    }    boolean somethingDone;    do {      loopNum++;      updateProgress("Loop " + loopNum + ":",0);      somethingDone=false;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (tmpGrid.getValue(row,col) == 0) {            FD8Accum(row,col);            somethingDone=true;          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } while (somethingDone);    loopNum++;    updateProgress("Loop " + loopNum + ":",0);    if (outputType.equals("specific catchment area (sca)")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=DEM.getValue(row,col);          if (z != noData) {            output.setValue(row,col,output.getValue(row,col) * gridRes);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } else     if (outputType.equals("total catchment area")) {      double gridCellArea=gridRes * gridRes;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z != noData) {            output.setValue(row,col,output.getValue(row,col) * gridCellArea);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    }    if (logTransform) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z != noData) {            output.setValue(row,col,Math.log(output.getValue(row,col)));          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } else {      output.setNonlinearity(0.2);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static Vec4 intersect(Plane pa,Plane pb,Plane pc){  if (pa == null || pb == null || pc == null) {    throw new IllegalArgumentException("Plane Is Null");  }  Vec4 na=pa.getNormal();  Vec4 nb=pb.getNormal();  Vec4 nc=pc.getNormal();  Matrix m=new Matrix(na.x,na.y,na.z,0,nb.x,nb.y,nb.z,0,nc.x,nc.y,nc.z,0,0,0,0,1,true);  Matrix mInverse=m.getInverse();  Vec4 D=new Vec4(-pa.getDistance(),-pb.getDistance(),-pc.getDistance());  return D.transformBy3(mInverse);}  }
class C{  public NormalBoundaryIntersectionGenerator(int numberOfObjectives,int divisions){  this(numberOfObjectives,divisions,0);}  }
class C{  private List<String> sentenceSplit(String str){  BreakIterator iterator=BreakIterator.getSentenceInstance(Locale.US);  iterator.setText(str);  int start=iterator.first();  List<String> sentences=new ArrayList<String>();  for (int end=iterator.next(); end != BreakIterator.DONE; start=end, end=iterator.next()) {    sentences.add(str.substring(start,end).trim());  }  return sentences;}  }
class C{  private boolean removeMapping(Object rowKey,Object columnKey,Object value){  if (containsMapping(rowKey,columnKey,value)) {    remove(rowKey,columnKey);    return true;  }  return false;}  }
class C{  public void warn(Rules rule,String warningMsg,Location location){  print(rule,Severity.WARNING,warningMsg,location);}  }
class C{  public boolean equals(String anotherString){  int n=m_length;  if (n == anotherString.length()) {    FastStringBuffer fsb=fsb();    int i=m_start;    int j=0;    while (n-- != 0) {      if (fsb.charAt(i) != anotherString.charAt(j)) {        return false;      }      i++;      j++;    }    return true;  }  return false;}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  protected synchronized void loadValue(String sValue){  value=encode(sValue);}  }
class C{  public TObjectIntHashMap(int initialCapacity,float loadFactor,TObjectHashingStrategy<K> strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  private static List<String[]> readSentence(BufferedReader aReader) throws IOException {  List<String[]> words=new ArrayList<String[]>();  String line;  while ((line=aReader.readLine()) != null) {    if (StringUtils.isBlank(line)) {      break;    }    if (line.startsWith("#")) {      continue;    }    String[] fields=line.split("\t");    if (fields.length != 4) {      throw new IOException("Invalid file format. Line needs to have 4 tab-separted fields.");    }    words.add(fields);  }  if (line == null && words.isEmpty()) {    return null;  } else {    return words;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static PCalLocation PrevLocOf(PCalLocation loc,MappingObject[][] map){  if (loc.getColumn() > 0) {    return new PCalLocation(loc.getLine(),loc.getColumn() - 1);  }  for (int i=loc.getLine() - 1; i >= 0; i--) {    if (map[i].length > 0) {      return new PCalLocation(i,map[i].length - 1);    }  }  return null;}  }
class C{  private void moveIndex(){  int i=rightmostDip();  if (i < 0) {    hasNext=false;    return;  }  int leastToRightIndex=i + 1;  for (int j=i + 2; j < n; j++) {    if (index[j] < index[leastToRightIndex] && index[j] > index[i]) {      leastToRightIndex=j;    }  }  int t=index[i];  index[i]=index[leastToRightIndex];  index[leastToRightIndex]=t;  if (m - 1 > i) {    reverseAfter(i);    reverseAfter(m - 1);  }}  }
class C{  public void mouseClicked(MouseEvent e){  if (e.getClickCount() > 1)   m_adaptee.actionPerformed(new ActionEvent(e.getSource(),e.getID(),"Mouse"));  if (SwingUtilities.isRightMouseButton(e))   m_adaptee.popupMenu.show((Component)e.getSource(),e.getX(),e.getY());}  }
class C{  public boolean isDeprecated(){  return deprecated;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void calcMaxTick(){  maxTick=1;  if (maxData > 1) {    while (maxTick < maxData)     maxTick*=10;  } else   if (maxData < 1) {    while ((maxTick / 10) > maxData)     maxTick/=10;  }}  }
class C{  protected static double cosSquared(double x){  return Math.cos(x) * Math.cos(x);}  }
class C{  public final int pop(){  return m_map[--m_firstFree];}  }
class C{  public CategorySorter(boolean ascending){  super(ascending);}  }
class C{  public static void createTable(Database db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"SIMPLE_ENTITY\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"SIMPLE_BOOLEAN\" INTEGER,"+ "\"SIMPLE_BYTE\" INTEGER,"+ "\"SIMPLE_SHORT\" INTEGER,"+ "\"SIMPLE_INT\" INTEGER,"+ "\"SIMPLE_LONG\" INTEGER,"+ "\"SIMPLE_FLOAT\" REAL,"+ "\"SIMPLE_DOUBLE\" REAL,"+ "\"SIMPLE_STRING\" TEXT,"+ "\"SIMPLE_BYTE_ARRAY\" BLOB);");}  }
class C{  public void activate(){  this.button.setSelection(true);  SWTGraphicUtil.enableAllChildrenWidgets(this.content);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void testSameClassLoaderSharedMode() throws Exception {  processTestHotRedeployment(DeploymentMode.SHARED);}  }
class C{  protected SVGOMGradientElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public static void main(String[] args){  String[] lockers=new String[100];  closeAllLockers(lockers);  studentLockerChanges(lockers);  print(lockers);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_entitiesremovenameditemns1.class,args);}  }
class C{  GeneralRange<T> intersect(GeneralRange<T> other){  checkNotNull(other);  checkArgument(comparator.equals(other.comparator));  boolean hasLowBound=this.hasLowerBound;  @Nullable T lowEnd=getLowerEndpoint();  BoundType lowType=getLowerBoundType();  if (!hasLowerBound()) {    hasLowBound=other.hasLowerBound;    lowEnd=other.getLowerEndpoint();    lowType=other.getLowerBoundType();  } else   if (other.hasLowerBound()) {    int cmp=comparator.compare(getLowerEndpoint(),other.getLowerEndpoint());    if (cmp < 0 || (cmp == 0 && other.getLowerBoundType() == OPEN)) {      lowEnd=other.getLowerEndpoint();      lowType=other.getLowerBoundType();    }  }  boolean hasUpBound=this.hasUpperBound;  @Nullable T upEnd=getUpperEndpoint();  BoundType upType=getUpperBoundType();  if (!hasUpperBound()) {    hasUpBound=other.hasUpperBound;    upEnd=other.getUpperEndpoint();    upType=other.getUpperBoundType();  } else   if (other.hasUpperBound()) {    int cmp=comparator.compare(getUpperEndpoint(),other.getUpperEndpoint());    if (cmp > 0 || (cmp == 0 && other.getUpperBoundType() == OPEN)) {      upEnd=other.getUpperEndpoint();      upType=other.getUpperBoundType();    }  }  if (hasLowBound && hasUpBound) {    int cmp=comparator.compare(lowEnd,upEnd);    if (cmp > 0 || (cmp == 0 && lowType == OPEN && upType == OPEN)) {      lowEnd=upEnd;      lowType=OPEN;      upType=CLOSED;    }  }  return new GeneralRange<T>(comparator,hasLowBound,lowEnd,lowType,hasUpBound,upEnd,upType);}  }
class C{  public static void log(Context c,String msg){  appendMessage(c,msg);}  }
class C{  public static URI createURI(URI archiveFile,ZipEntry entry){  String entryName=entry.getName();  List<String> segmentList=Strings.split(entryName,'/');  String[] segments=segmentList.toArray(new String[segmentList.size()]);  URI result=URI.createHierarchicalURI("archive",archiveFile.toString() + "!",null,segments,null,null);  return result;}  }
class C{  public synchronized void reset(){  isInvoked=false;  insertStreamList.clear();  removeStreamList.clear();}  }
class C{  public void updateFogColors(){  EntityPlayer player=TheBetweenlands.proxy.getClientPlayer();  if (player == null)   return;  this.initFogColors(player);  int[] targetFogColor=this.getTargetFogColor(player);  final int transitionStart=WorldProviderBetweenlands.CAVE_START;  final int transitionEnd=WorldProviderBetweenlands.CAVE_START - 15;  float m=0;  if (FogHandler.hasDenseFog()) {    float y=(float)player.posY;    if (y < transitionStart) {      if (transitionEnd < y) {        m=(y - transitionEnd) / (transitionStart - transitionEnd) * 80;      }    } else {      m=80;    }  }  LocationAmbience ambience=LocationStorage.getAmbience(player);  if (ambience != null && ambience.hasFogBrightness()) {    m=ambience.getFogBrightness();  }  if (!ShaderHelper.INSTANCE.isWorldShaderActive()) {    if (WorldProviderBetweenlands.getProvider(this.worldObj).getEnvironmentEventRegistry().BLOODSKY.isActive() || WorldProviderBetweenlands.getProvider(this.worldObj).getEnvironmentEventRegistry().SPOOPY.isActive()) {      m=0;    }  }  if (ambience != null && ambience.hasFogColor()) {    for (int i=0; i < 3; i++) {      int diff=255 - ambience.getFogColor()[i];      targetFogColor[i]=(int)(ambience.getFogColor()[i] + (diff / 255.0D * m));    }  } else {    for (int i=0; i < 3; i++) {      int diff=255 - targetFogColor[i];      targetFogColor[i]=(int)(targetFogColor[i] + (diff / 255.0D * m));    }  }  for (int a=0; a < 3; a++) {    this.lastFogColor[a]=this.currentFogColor[a];  }  for (int a=0; a < 3; a++) {    if (this.currentFogColor[a] != targetFogColor[a]) {      if (this.currentFogColor[a] < targetFogColor[a]) {        this.currentFogColor[a]+=0.2F;        if (this.currentFogColor[a] > targetFogColor[a]) {          this.currentFogColor[a]=targetFogColor[a];        }      } else       if (this.currentFogColor[a] > targetFogColor[a]) {        this.currentFogColor[a]-=0.2F;        if (this.currentFogColor[a] < targetFogColor[a]) {          this.currentFogColor[a]=targetFogColor[a];        }      }    }  }}  }
class C{  public TextFormat(Font font,boolean antialias){  this.font=font;  this.antialias=antialias;}  }
class C{  public static boolean hasJavaNature(IProject project){  try {    return project.hasNature(JavaCore.NATURE_ID);  } catch (  CoreException e) {    if (ExternalJavaProject.EXTERNAL_PROJECT_NAME.equals(project.getName()))     return true;  }  return false;}  }
class C{  public static boolean isPortrait(Context context){  return context.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT;}  }
class C{  public void receive(Message message){  if (mCanConvertAudio && mAudioPacketListener != null) {    if (message instanceof LDUMessage) {      LDUMessage ldu=(LDUMessage)message;      if (!(ldu.isValid() && ldu.isEncrypted())) {        for (        byte[] frame : ldu.getIMBEFrames()) {          float[] audio=mAudioConverter.decode(frame);          audio=mGain.apply(audio);          mAudioPacketListener.receive(new AudioPacket(audio,mAudioMetadata.copyOf()));        }      }    }  }}  }
class C{  private ConnectRunnable(final Profile profile){  this.profile=profile;}  }
class C{  @Override public boolean start() throws ContainerException {  ContainerConfig.Container cfg=ContainerConfig.getContainer(name,configFile);  String dispatcherName=ContainerConfig.getPropertyValue(cfg,"dispatcher-name","JavaMailDispatcher");  String delegatorName=ContainerConfig.getPropertyValue(cfg,"delegator-name","default");  this.deleteMail="true".equals(ContainerConfig.getPropertyValue(cfg,"delete-mail","false"));  this.delegator=DelegatorFactory.getDelegator(delegatorName);  this.dispatcher=ServiceContainer.getLocalDispatcher(dispatcherName,delegator);  this.timerDelay=ContainerConfig.getPropertyValue(cfg,"poll-delay",300000);  this.maxSize=ContainerConfig.getPropertyValue(cfg,"maxSize",1000000);  String runAsUser=ContainerConfig.getPropertyValue(cfg,"run-as-user","system");  try {    this.userLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",runAsUser).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Unable to load run-as-user UserLogin; cannot start container",module);    return false;  }  ServiceMcaUtil.readConfig();  List<ContainerConfig.Container.Property> configs=cfg.getPropertiesWithValue("store-listener");  for (  ContainerConfig.Container.Property prop : configs) {    Session session=this.makeSession(prop);    Store store=this.getStore(session);    if (store != null) {      stores.put(store,session);      store.addStoreListener(new LoggingStoreListener());    }  }  if (UtilValidate.isNotEmpty(stores)) {    pollTimer.scheduleAtFixedRate(new PollerTask(dispatcher,userLogin),timerDelay,timerDelay,TimeUnit.MILLISECONDS);  } else {    Debug.logWarning("No JavaMail Store(s) configured; poller disabled.",module);  }  return true;}  }
class C{  public String toString(){  return "REDUCE(" + reduce_with().index() + ")";}  }
class C{  public GetSeasons(int tvshowid,String... properties){  super();  addParameterToRequest("tvshowid",tvshowid);  addParameterToRequest("properties",properties);}  }
class C{  private void createSectionHeading(String heading){  FormText headingText=toolkit.createFormText(mainComposite,false);  GridData gridData=new GridData(SWT.FILL,SWT.CENTER,true,false,NUM_COLUMNS,1);  gridData.verticalIndent=20;  headingText.setLayoutData(gridData);  headingText.setColor("header",toolkit.getColors().getColor(IFormColors.TITLE));  headingText.setFont("header",JFaceResources.getBannerFont());  headingText.setText("<form><p><span color=\"header\" font=\"header\">" + heading + "</span></p></form>",true,false);}  }
class C{  public Annotation(String type,boolean isPersistent,String text,int layer,SVGResource imageSVG){  this(type,isPersistent,text,layer,null,imageSVG);}  }
class C{  @Override public <T>T loadObject(Class<T> loadClass,Serializable id,Optional<FilterExpression> filterExpression){  try {    if (!filterExpression.isPresent() && !isJoinQuery()) {      @SuppressWarnings("unchecked") T record=(T)session.get(loadClass,id);      return record;    }    Criteria criteria=session.createCriteria(loadClass).add(Restrictions.idEq(id));    if (requestScope != null && isJoinQuery()) {      joinCriteria(criteria,loadClass);    }    if (filterExpression.isPresent()) {      CriterionFilterOperation filterOpn=buildCriterionFilterOperation(criteria);      criteria=filterOpn.apply(filterExpression.get());    }    @SuppressWarnings("unchecked") T record=(T)criteria.uniqueResult();    return record;  } catch (  ObjectNotFoundException e) {    return null;  }}  }
class C{  public ServerDiagnosticsSummaryDataType clone(){  ServerDiagnosticsSummaryDataType result=new ServerDiagnosticsSummaryDataType();  result.ServerViewCount=ServerViewCount;  result.CurrentSessionCount=CurrentSessionCount;  result.CumulatedSessionCount=CumulatedSessionCount;  result.SecurityRejectedSessionCount=SecurityRejectedSessionCount;  result.RejectedSessionCount=RejectedSessionCount;  result.SessionTimeoutCount=SessionTimeoutCount;  result.SessionAbortCount=SessionAbortCount;  result.CurrentSubscriptionCount=CurrentSubscriptionCount;  result.CumulatedSubscriptionCount=CumulatedSubscriptionCount;  result.PublishingIntervalCount=PublishingIntervalCount;  result.SecurityRejectedRequestsCount=SecurityRejectedRequestsCount;  result.RejectedRequestsCount=RejectedRequestsCount;  return result;}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public void traverse(int pos) throws org.xml.sax.SAXException {  m_dtm=m_transformer.getXPathContext().getDTM(pos);  m_startNode=pos;  super.traverse(pos);}  }
class C{  public Object encode(Object value) throws EncoderException {  if (value == null) {    return null;  } else   if (value instanceof String) {    return encode((String)value);  } else {    throw new EncoderException("Objects of type " + value.getClass().getName() + " cannot be encoded using BCodec");  }}  }
class C{  public static boolean isNodeGroupAvailable(ServiceHost host,NodeGroupState localState){  if (NodeGroupUtils.isMembershipSettled(host,host.getMaintenanceIntervalMicros(),localState) && NodeGroupUtils.hasMembershipQuorum(host,localState)) {    return true;  }  return false;}  }
class C{  protected int routeDataForEachChannel(){  int dataCount=0;  Node sourceNode=engine.getNodeService().findIdentity();  ProcessInfo processInfo=engine.getStatisticManager().newProcessInfo(new ProcessInfoKey(sourceNode.getNodeId(),null,ProcessType.ROUTER_JOB));  processInfo.setStatus(ProcessInfo.Status.PROCESSING);  try {    final List<NodeChannel> channels=engine.getConfigurationService().getNodeChannels(false);    Set<String> readyChannels=null;    if (parameterService.is(ParameterConstants.ROUTING_QUERY_CHANNELS_FIRST)) {      readyChannels=getReadyChannels();    }    for (    NodeChannel nodeChannel : channels) {      if (nodeChannel.isEnabled() && (readyChannels == null || readyChannels.contains(nodeChannel.getChannelId()))) {        processInfo.setCurrentChannelId(nodeChannel.getChannelId());        dataCount+=routeDataForChannel(processInfo,nodeChannel,sourceNode);      } else {        gapDetector.setIsAllDataRead(false);        if (log.isDebugEnabled()) {          log.debug("Not routing the {} channel.  It is either disabled or suspended.",nodeChannel.getChannelId());        }      }    }    processInfo.setStatus(ProcessInfo.Status.OK);  } catch (  RuntimeException ex) {    processInfo.setStatus(ProcessInfo.Status.ERROR);    firstTimeCheckForAbandonedBatches=true;    throw ex;  }  return dataCount;}  }
class C{  public Boolean isNetworkReservationSupported(){  return networkReservationSupported;}  }
class C{  private static ImmutableMultimap<Registrar,BigMoney> parseCreditsFromCsv(Path csvFile,String tld) throws IOException {  List<String> lines=Files.readAllLines(csvFile,StandardCharsets.UTF_8);  checkArgument(CsvHeader.getHeaders().equals(splitCsvLine(lines.get(0))),"Expected CSV header line not present");  ImmutableMultimap.Builder<Registrar,BigMoney> builder=new ImmutableMultimap.Builder<>();  for (  String line : Iterables.skip(lines,1)) {    List<String> fields=splitCsvLine(line);    checkArgument(CsvHeader.getHeaders().size() == fields.size(),"Wrong number of fields");    try {      String registrarId=fields.get(CsvHeader.AFFILIATE.ordinal());      Registrar registrar=checkNotNull(Registrar.loadByClientId(registrarId),"Registrar %s not found",registrarId);      CurrencyUnit tldCurrency=Registry.get(tld).getCurrency();      CurrencyUnit currency=CurrencyUnit.of((fields.get(CsvHeader.CURRENCY_CODE.ordinal())));      checkArgument(tldCurrency.equals(currency),"Credit in wrong currency (%s should be %s)",currency,tldCurrency);      BigDecimal creditAmount=new BigDecimal(fields.get(CsvHeader.COMMISSIONS.ordinal()));      BigMoney credit=BigMoney.of(currency,creditAmount);      builder.put(registrar,credit);    } catch (    IllegalArgumentException|IndexOutOfBoundsException e) {      throw new IllegalArgumentException("Error in line: " + line,e);    }  }  return builder.build();}  }
class C{  protected String ensureAttributesNamespaceIsDeclared(String ns,String localName,String rawName) throws org.xml.sax.SAXException {  if (ns != null && ns.length() > 0) {    int index=0;    String prefixFromRawName=(index=rawName.indexOf(":")) < 0 ? "" : rawName.substring(0,index);    if (index > 0) {      String uri=m_prefixMap.lookupNamespace(prefixFromRawName);      if (uri != null && uri.equals(ns)) {        return null;      } else {        this.startPrefixMapping(prefixFromRawName,ns,false);        this.addAttribute("http://www.w3.org/2000/xmlns/",prefixFromRawName,"xmlns:" + prefixFromRawName,"CDATA",ns,false);        return prefixFromRawName;      }    } else {      String prefix=m_prefixMap.lookupPrefix(ns);      if (prefix == null) {        prefix=m_prefixMap.generateNextPrefix();        this.startPrefixMapping(prefix,ns,false);        this.addAttribute("http://www.w3.org/2000/xmlns/",prefix,"xmlns:" + prefix,"CDATA",ns,false);      }      return prefix;    }  }  return null;}  }
class C{  public void reset(){  extensions=new Hashtable();  extOrdering=new Vector();}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.test();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test/L2","dom:elem");{    boolean success=false;    try {      element.setPrefix("xml");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobMediaSheetsCompleted);}  }
class C{  public void addFooterView(View view){  mFooterViews.add(view);}  }
class C{  public void paintViewportBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void initialize(){  if (dataClass == null) {    throw new IllegalStateException("dataClass was never set on " + getClass().getSimpleName());  }  if (tableName == null) {    tableName=extractTableName(dataClass);  }}  }
class C{  public WriteBuffer putShort(short x){  ensureCapacity(2).putShort(x);  return this;}  }
class C{  public final boolean hasContended(){  return head != null;}  }
class C{  private ContextMenu createContextMenu(){  final ContextMenu menu=new ContextMenu();  Menu export=new Menu("Export As");  MenuItem pngItem=new MenuItem("PNG...");  pngItem.setOnAction(null);  export.getItems().add(pngItem);  MenuItem jpegItem=new MenuItem("JPEG...");  jpegItem.setOnAction(null);  export.getItems().add(jpegItem);  if (ExportUtils.isOrsonPDFAvailable()) {    MenuItem pdfItem=new MenuItem("PDF...");    pdfItem.setOnAction(null);    export.getItems().add(pdfItem);  }  if (ExportUtils.isJFreeSVGAvailable()) {    MenuItem svgItem=new MenuItem("SVG...");    svgItem.setOnAction(null);    export.getItems().add(svgItem);  }  menu.getItems().add(export);  return menu;}  }
class C{  private static String[] sectors(final String text){  return new EnglishLowerCase(MediaType.split(text)[0]).string().split("/",2);}  }
class C{  public boolean isAfterLast() throws SQLException {  return fbFetcher.isAfterLast();}  }
class C{  public void continuousQueryListenerApply(long cbPtr,long memPtr){  enter();  try {    PlatformCallbackUtils.continuousQueryListenerApply(envPtr,cbPtr,memPtr);  }  finally {    leave();  }}  }
class C{  public PcPatternRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  public void jumpTo(final int index){  m_searcher.getCursor().jumpTo(index);  final SearchResult result=m_searcher.getCursor().current();  if (result == null) {    return;  }  if (result.getObject() instanceof NaviNode) {    ZyGraphHelpers.centerNode(m_graph,(NaviNode)result.getObject(),false);  } else   if (result.getObject() instanceof NaviEdge) {    ZyGraphHelpers.centerEdgeLabel(m_graph,(NaviEdge)result.getObject(),false);  }}  }
class C{  protected List<BlockVirtualPoolRestRep> listTargetVirtualPools(AssetOptionsContext ctx,URI volumeId,ResourceFilter<BlockVirtualPoolRestRep> filter){  ViPRCoreClient client=api(ctx);  List<VirtualPoolChangeRep> vpoolChanges=client.blockVolumes().listVirtualPoolChangeCandidates(volumeId);  List<URI> vpoolIds=Lists.newArrayList();  for (  VirtualPoolChangeRep change : vpoolChanges) {    if (change.getAllowed()) {      vpoolIds.add(change.getId());    }  }  return client.blockVpools().getByIds(vpoolIds,filter);}  }
class C{  public LoggingEvent decode(final String data){  Document document=parse(data);  if (document == null) {    return null;  }  Vector events=decodeEvents(document);  if (events.size() > 0) {    return (LoggingEvent)events.firstElement();  }  return null;}  }
class C{  public EDIPartyName(String partyName){  this.party=partyName;}  }
class C{  public int compareTo(Object obj){  int diff=-1;  if (obj instanceof ParserNotice) {    ParserNotice p2=(ParserNotice)obj;    diff=level - p2.getLevel();    if (diff == 0) {      diff=line - p2.getLine();      if (diff == 0) {        diff=message.compareTo(p2.getMessage());      }    }  }  return diff;}  }
class C{  @Override public boolean hasOverlappingRendering(){  return mNeedsOffscreenAlphaCompositing;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TSTRUCT_MEMBER__DEFINED_MEMBER:    return definedMember != null;}return super.eIsSet(featureID);}  }
class C{  public boolean showGraphicalSmilies(){  return preferences.getBoolean(resources.getString(R.string.key_graphical_smilies),Boolean.parseBoolean(resources.getString(R.string.default_graphical_smilies)));}  }
class C{  public CompiledST compile(String srcName,String name,List<FormalArgument> args,String template,Token templateToken){  Compiler c=new Compiler(this);  return c.compile(srcName,name,args,template,templateToken);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE_ITEM___TRACE_ENTITY_1:    getTraceEntity_1().clear();  getTraceEntity_1().addAll((Collection<? extends TraceEntity_>)newValue);return;case UmplePackage.TRACE_ITEM___PRE_OR_POST_CONDITION_1:getPreOrPostCondition_1().clear();getPreOrPostCondition_1().addAll((Collection<? extends PreOrPostCondition_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static KeyStroke parseKeyStroke(String keyStroke){  if (keyStroke == null)   return null;  int modifiers=0;  int index=keyStroke.indexOf('+');  if (index != -1) {    for (int i=0; i < index; i++) {switch (Character.toUpperCase(keyStroke.charAt(i))) {case 'A':        modifiers|=InputEvent.ALT_MASK;      break;case 'C':    modifiers|=InputEvent.CTRL_MASK;  break;case 'M':modifiers|=InputEvent.META_MASK;break;case 'S':modifiers|=InputEvent.SHIFT_MASK;break;}}}String key=keyStroke.substring(index + 1);if (key.length() == 1) {char ch=Character.toUpperCase(key.charAt(0));if (modifiers == 0) return KeyStroke.getKeyStroke(ch); else return KeyStroke.getKeyStroke(ch,modifiers);} else if (key.length() == 0) {System.err.println("Invalid key stroke: " + keyStroke);return null;} else {int ch;try {ch=KeyEvent.class.getField("VK_".concat(key)).getInt(null);} catch (Exception e) {System.err.println("Invalid key stroke: " + keyStroke);return null;}return KeyStroke.getKeyStroke(ch,modifiers);}}  }
class C{  public Token_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_filename=jcas.getRequiredFeatureDE(casType,"filename","uima.cas.String",featOkTst);  casFeatCode_filename=(null == casFeat_filename) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_filename).getCode();  casFeat_tokenId=jcas.getRequiredFeatureDE(casType,"tokenId","uima.cas.Integer",featOkTst);  casFeatCode_tokenId=(null == casFeat_tokenId) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_tokenId).getCode();  casFeat_sentId=jcas.getRequiredFeatureDE(casType,"sentId","uima.cas.Integer",featOkTst);  casFeatCode_sentId=(null == casFeat_sentId) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_sentId).getCode();  casFeat_pos=jcas.getRequiredFeatureDE(casType,"pos","uima.cas.String",featOkTst);  casFeatCode_pos=(null == casFeat_pos) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_pos).getCode();}  }
class C{  public void testFindProvider() throws IOException {  String id=Long.toString((new Date()).getTime());  Profile p=new Profile(this.getName(),id,new File(this.workspace.toFile(),id));  JmriConfigurationProvider config=JmriConfigurationProvider.findProvider(p);  assertNotNull(config);  FileUtil.delete(p.getPath());}  }
class C{  public double x(){  return x;}  }
class C{  public EnhancedBookmarkRecyclerView(Context context,AttributeSet attrs){  super(context,attrs);  setLayoutManager(new LinearLayoutManager(context));  setHasFixedSize(true);}  }
class C{  public int lastExistingIndex(){  return lastExistingIdx;}  }
class C{  public static double standardNormalPdf(double x){  double a=1.0 / (Math.sqrt(2.0 * Math.PI));  double b=-(x) * (x) / (2.0);  return a * Math.exp(b);}  }
class C{  protected void fitLogistic(Instances insts,int cl1,int cl2,int numFolds,Random random) throws Exception {  ArrayList<Attribute> atts=new ArrayList<Attribute>(2);  atts.add(new Attribute("pred"));  ArrayList<String> attVals=new ArrayList<String>(2);  attVals.add(insts.classAttribute().value(cl1));  attVals.add(insts.classAttribute().value(cl2));  atts.add(new Attribute("class",attVals));  Instances data=new Instances("data",atts,insts.numInstances());  data.setClassIndex(1);  if (numFolds <= 0) {    for (int j=0; j < insts.numInstances(); j++) {      Instance inst=insts.instance(j);      double[] vals=new double[2];      vals[0]=SVMOutput(-1,inst);      if (inst.classValue() == cl2) {        vals[1]=1;      }      data.add(new DenseInstance(inst.weight(),vals));    }  } else {    if (numFolds > insts.numInstances()) {      numFolds=insts.numInstances();    }    insts=new Instances(insts);    insts.randomize(random);    insts.stratify(numFolds);    for (int i=0; i < numFolds; i++) {      Instances train=insts.trainCV(numFolds,i,random);      BinarySMO smo=new BinarySMO();      smo.setKernel(Kernel.makeCopy(SMO.this.m_kernel));      smo.buildClassifier(train,cl1,cl2,false,-1,-1);      Instances test=insts.testCV(numFolds,i);      for (int j=0; j < test.numInstances(); j++) {        double[] vals=new double[2];        vals[0]=smo.SVMOutput(-1,test.instance(j));        if (test.instance(j).classValue() == cl2) {          vals[1]=1;        }        data.add(new DenseInstance(test.instance(j).weight(),vals));      }    }  }  m_logistic=new Logistic();  m_logistic.buildClassifier(data);}  }
class C{  public void testSimpleCompression(){  byte[] bytes=grabRepeatBytes();  final ByteBuffer src=ByteBuffer.wrap(bytes);{    final IRecordCompressor compressor=CompressorRegistry.getInstance().get(CompressorRegistry.DEFLATE_BEST_COMPRESSION);    final ByteBuffer dst=compressor.compress(src.duplicate());    if (log.isInfoEnabled())     log.info("COMPRESSED Compressed Dst: " + dst.limit() + ", Src:"+ src.limit());    final ByteBuffer res=compressor.decompress(dst.duplicate());    if (log.isInfoEnabled())     log.info("Expanded Dst: " + dst.limit() + ", Src:"+ res.limit());    assertTrue(res.compareTo(src) == 0);  }{    final IRecordCompressor compressor=CompressorRegistry.getInstance().get(CompressorRegistry.DEFLATE_BEST_SPEED);    final ByteBuffer dst=compressor.compress(src.duplicate());    if (log.isInfoEnabled())     log.info("SPEED Compressed Dst: " + dst.limit() + ", Src:"+ src.limit());    final ByteBuffer res=compressor.decompress(dst.duplicate());    if (log.isInfoEnabled())     log.info("Expanded Dst: " + dst.limit() + ", Src:"+ res.limit());    assertTrue(res.compareTo(src) == 0);  }{    final IRecordCompressor compressor=CompressorRegistry.getInstance().get(CompressorRegistry.NOP);    final ByteBuffer dst=compressor.compress(src.duplicate());    if (log.isInfoEnabled())     log.info("NO COMPRESSION Compressed Dst: " + dst.limit() + ", Src:"+ src.limit());    final ByteBuffer res=compressor.decompress(dst.duplicate());    if (log.isInfoEnabled())     log.info("Expanded Dst: " + dst.limit() + ", Src:"+ res.limit());    assertTrue(res.compareTo(src) == 0);  }{    final IRecordCompressor compressor=CompressorRegistry.getInstance().get(CompressorRegistry.GZIP);    final ByteBuffer dst=compressor.compress(src);    if (log.isInfoEnabled())     log.info("Compressed ZIP Dst: " + dst.limit() + ", Src:"+ src.limit());    final ByteBuffer res=compressor.decompress(dst);    if (log.isInfoEnabled())     log.info("Expanded ZIP Dst: " + dst.limit() + ", Src:"+ res.limit());    assertTrue(res.compareTo(src) == 0);  }}  }
class C{  @Override public void execute(Database database) throws CustomChangeException {  PreparedStatement products=null;  ResultSet products_res=null;  JdbcConnection db_connection=(JdbcConnection)database.getConnection();  try {    products=db_connection.prepareStatement("SELECT PRODUCT.ID ID," + "       PRODUCT.DOWNLOAD_PATH DWN_PATH, " + "       PRODUCT.PATH PRODUCT_PATH,"+ "       IMAGE.QUICKLOOK QUICKLOOK,"+ "       IMAGE.THUMBNAIL THUMBNAIL "+ "FROM PRODUCTS PRODUCT, PRODUCT_IMAGES IMAGE "+ "WHERE PRODUCT.IMAGES_ID=IMAGE.ID");    products_res=products.executeQuery();    while (products_res.next()) {      Blob ql=(Blob)products_res.getObject("QUICKLOOK");      Blob th=(Blob)products_res.getObject("THUMBNAIL");      long id=products_res.getLong("ID");      String download_path=products_res.getString("DWN_PATH");      String product_path=products_res.getString("PRODUCT_PATH");      if (download_path == null) {        logger.error("No download path for product '" + product_path + "': product images not managed");        continue;      }      if (ql != null) {        String ql_path=download_path.replaceAll("(?i)(.*).zip","$1-ql.gif");        blobToFile(ql,ql_path);        PreparedStatement product_flags_stmt=null;        try {          product_flags_stmt=db_connection.prepareStatement("UPDATE PRODUCTS SET QUICKLOOK_PATH=? WHERE ID=?");          product_flags_stmt.setString(1,ql_path);          product_flags_stmt.setLong(2,id);          product_flags_stmt.execute();        }  finally {          if (product_flags_stmt != null)           try {            product_flags_stmt.close();          } catch (          Exception e) {            logger.warn("Cannot close Statement !");          }        }      }      if (th != null) {        String th_path=download_path.replaceAll("(?i)(.*).zip","$1-th.gif");        blobToFile(th,th_path);        PreparedStatement product_flags_stmt=null;        try {          product_flags_stmt=db_connection.prepareStatement("UPDATE PRODUCTS SET THUMBNAIL_PATH=? WHERE ID=?");          product_flags_stmt.setString(1,th_path);          product_flags_stmt.setLong(2,id);          product_flags_stmt.execute();        }  finally {          if (product_flags_stmt != null)           try {            product_flags_stmt.close();          } catch (          Exception e) {            logger.warn("Cannot close Statement !");          }        }      }    }    PreparedStatement product_flags_stmt=null;    try {      product_flags_stmt=db_connection.prepareStatement("CHECKPOINT DEFRAG");      product_flags_stmt.execute();    } catch (    Exception e) {      logger.error("Cannot perform database checkpoint defrag command",e);    } finally {      if (product_flags_stmt != null)       try {        product_flags_stmt.close();      } catch (      Exception e) {        logger.warn("Cannot close Statement !",e);      }    }  } catch (  Exception e) {    throw new CustomChangeException("Cannot move Blobs from product",e);  } finally {    if (products_res != null) {      try {        products_res.close();      } catch (      Exception e) {        logger.warn("Cannot close ResultSet !");      }    }    if (products != null) {      try {        products.close();      } catch (      Exception e) {        logger.warn("Cannot close Statement !");      }    }  }}  }
class C{  private void guessCountryName(final JTextField text,final Iterator<Entry<String,Point>> centersiter){  final List<String> options=new ArrayList<>();  while (centersiter.hasNext()) {    final Entry<String,Point> item=centersiter.next();    final Point p=new Point(item.getValue());    for (    final Polygon polygon : m_current) {      if (polygon.contains(p)) {        options.add(item.getKey());      }    }  }  if (!options.isEmpty()) {    Collections.shuffle(options);    text.setText(options.get(0));  }}  }
class C{  static AttrInactivity createFromString(final String str) throws BOSHException {  if (str == null) {    return null;  } else {    return new AttrInactivity(str);  }}  }
class C{  public static <T>Set<T> synchronizedSet(){  return Collections.synchronizedSet(new HashSet<T>());}  }
class C{  public <FT,FID>BaseForeignCollection<FT,FID> buildForeignCollection(Object parent,FID id) throws SQLException {  if (foreignFieldType == null) {    return null;  }  @SuppressWarnings("unchecked") Dao<FT,FID> castDao=(Dao<FT,FID>)foreignDao;  if (!fieldConfig.isForeignCollectionEager()) {    return new LazyForeignCollection<FT,FID>(castDao,parent,id,foreignFieldType,fieldConfig.getForeignCollectionOrderColumnName(),fieldConfig.isForeignCollectionOrderAscending());  }  LevelCounters levelCounters=threadLevelCounters.get();  if (levelCounters.foreignCollectionLevel == 0) {    levelCounters.foreignCollectionLevelMax=fieldConfig.getForeignCollectionMaxEagerLevel();  }  if (levelCounters.foreignCollectionLevel >= levelCounters.foreignCollectionLevelMax) {    return new LazyForeignCollection<FT,FID>(castDao,parent,id,foreignFieldType,fieldConfig.getForeignCollectionOrderColumnName(),fieldConfig.isForeignCollectionOrderAscending());  }  levelCounters.foreignCollectionLevel++;  try {    return new EagerForeignCollection<FT,FID>(castDao,parent,id,foreignFieldType,fieldConfig.getForeignCollectionOrderColumnName(),fieldConfig.isForeignCollectionOrderAscending());  }  finally {    levelCounters.foreignCollectionLevel--;  }}  }
class C{  public int turnOnAllDirtyFlags(int minDepth){  int myDepth=ap().getDepth();  if (myDepth != minDepth)   this.clearLineCalcs();  if (children != null) {    this.dirtyDescendents=1;    if (minDepth == myDepth) {      children=null;    } else {      for (      ViewNode child : children) {        if (child != null)         dirtyDescendents+=child.turnOnAllDirtyFlags(minDepth);      }    }  } else {    if (status == VNStatus.SET && minDepth != ap().getDepth() && children == null) {      createUnknownChildren();      dirtyDescendents++;    } else     this.dirtyDescendents=1;  }  return dirtyDescendents;}  }
class C{  private void publishModCounts(){  launcherFrame.setModuleCounts(checkedModsCount,checkableModsCount);}  }
class C{  public Task delete(String networkId) throws ExternalException {  VirtualNetworkService.State virtualNetworkState=getNetworkById(networkId);  if (virtualNetworkState == null) {    throw new NetworkNotFoundException(networkId);  }  if (SubnetState.PENDING_DELETE.equals(virtualNetworkState.state)) {    throw new InvalidNetworkStateException(String.format("Invalid operation to delete virtual network %s in state PENDING_DELETE",networkId));  }  VirtualNetworkService.State networkState=new VirtualNetworkService.State();  networkState.state=SubnetState.PENDING_DELETE;  networkState.deleteRequestTime=System.currentTimeMillis();  this.patchNetworkService(networkId,networkState);  DeleteVirtualNetworkWorkflowDocument startState=new DeleteVirtualNetworkWorkflowDocument();  startState.virtualNetworkId=networkId;  DeleteVirtualNetworkWorkflowDocument finalState=backendClient.post(DeleteVirtualNetworkWorkflowService.FACTORY_LINK,startState).getBody(DeleteVirtualNetworkWorkflowDocument.class);  return TaskUtils.convertBackEndToFrontEnd(finalState.taskServiceState);}  }
class C{  public StateLog(int id,int k){  this.messageBatches=new CommandsInfo[k - 1];  this.lastCheckpointCID=-1;  this.state=null;  this.stateHash=null;  this.position=0;  this.lastCID=-1;  this.id=id;}  }
class C{  private void removeHotkeys(JRootPane pane){  Set<KeyStroke> toBeRemoved=new HashSet<>();  InputMap input=pane.getInputMap(INPUT_MAP_KEY);  ActionMap action=pane.getActionMap();  if (input.keys() == null) {    return;  }  for (  KeyStroke keyStroke : input.keys()) {    Object key=input.get(keyStroke);    if (key instanceof String && ((String)key).startsWith(PREFIX)) {      toBeRemoved.add(keyStroke);      action.remove(key);    }  }  for (  KeyStroke keyStroke : toBeRemoved) {    input.remove(keyStroke);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.906 -0500",hash_original_method="17E8F6A0DA6BEF949708E45EF28FBDEC",hash_generated_method="072395F153C45E5EB171F20F34EFAEBF") public void offsetTo(float newLeft,float newTop){  addTaintLocal(newLeft + newTop);}  }
class C{  void apply(){  final AnnotatedTypeMirror extendsBound=wildcard.getExtendsBound();  final AnnotatedTypeMirror superBound=wildcard.getSuperBound();  for (  AnnotationMirror extAnno : upperBoundAnnos) {    extendsBound.addAnnotation(extAnno);  }  for (  AnnotationMirror supAnno : lowerBoundAnnos) {    superBound.addAnnotation(supAnno);  }  for (  AnnotationMirror anno : possiblyBoth) {    superBound.addAnnotation(anno);    if (extendsBound.getAnnotationInHierarchy(anno) == null) {      extendsBound.addAnnotation(anno);    }  }}  }
class C{  public void removeColumn(int columnIndex){  Comparable columnKey=getColumnKey(columnIndex);  removeColumn(columnKey);}  }
class C{  public void initMenu(){}  }
class C{  public final CC gapRight(String boundsSize){  hor.setGapAfter(ConstraintParser.parseBoundSize(boundsSize,true,true));  return this;}  }
class C{  @RequestMapping(value="/account/reset_password/finish",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<String> finishPasswordReset(@RequestBody KeyAndPasswordDTO keyAndPassword){  if (!checkPasswordLength(keyAndPassword.getNewPassword())) {    return new ResponseEntity<>("Incorrect password",HttpStatus.BAD_REQUEST);  }  return userService.completePasswordReset(keyAndPassword.getNewPassword(),keyAndPassword.getKey()).map(null).orElse(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.906 -0500",hash_original_method="00E84702996DAE91A9CE0634285E6E21",hash_generated_method="AC914F9D11C14A36E16BA7574B42A713") public ViewPropertyAnimator yBy(float value){  animatePropertyBy(Y,value);  return this;}  }
class C{  public final boolean equals(Object object){  if (object == null) {    return false;  }  if (!(object instanceof KnowledgeEdge)) {    return false;  }  KnowledgeEdge pair=(KnowledgeEdge)object;  return from.equals(pair.from) && to.equals(pair.to);}  }
class C{  public static String stringFor(int n){  if (n == 0) {    return "CU_STREAM_DEFAULT";  }  String result="";  if ((n & CU_STREAM_NON_BLOCKING) != 0)   result+="CU_STREAM_NON_BLOCKING ";  return result;}  }
class C{  public static View fromQuery(Query query,String name){  return fromQuery(query,name,null,null);}  }
class C{  private void createView(){  Columns columns=new Columns();  prepareSelectQuery();  int columnsSize=column.length;  for (int i1=0; i1 < columnsSize; i1++) {    if (column[i1] != null) {      column[i1].setSort("auto");      columns.appendChild(column[i1]);    }  }  grid.appendChild(columns);  columns.setSizable(true);  vbox.appendChild(grid);  grid.appendChild(createRows());  grid.setMold("paging");  vbox.setVisible(Boolean.TRUE);  this.appendChild(vbox);  if (pageSize <= 0) {    grid.setPageSize(MSysConfig.getIntValue("DASHBOARD_PAGE_SIZE",5));  } else {    grid.setPageSize(pageSize);  }}  }
class C{  public void addAll(PairedStats values){  if (values.count() == 0) {    return;  }  xStats.addAll(values.xStats());  if (yStats.count() == 0) {    sumOfProductsOfDeltas=values.sumOfProductsOfDeltas();  } else {    sumOfProductsOfDeltas+=values.sumOfProductsOfDeltas() + (values.xStats().mean() - xStats.mean()) * (values.yStats().mean() - yStats.mean()) * values.count();  }  yStats.addAll(values.yStats());}  }
class C{  protected Node newNode(){  return new GenericProcessingInstruction();}  }
class C{  public CGraphWindow(){  CIconInitializer.initializeWindowIcons(this);  setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);  addWindowListener(new CWindowCloser(m_tabbedPane));  final InternalTabListener listener=new InternalTabListener();  m_tabbedPane.getModel().addChangeListener(listener);  m_tabbedPane.addContainerListener(listener);  addWindowStateListener(new WorkaroundListener());  m_tabbedPane.addMouseListener(new InternalMouseListener());  add(m_tabbedPane);  final JPanel statusBar=new JPanel(new BorderLayout());  statusBar.add(new CProgressStatusBar(),BorderLayout.EAST);  add(statusBar,BorderLayout.SOUTH);}  }
class C{  public Point createFromParcel(Parcel in){  Point r=new Point();  r.readFromParcel(in);  return r;}  }
class C{  public static void recoveryExceptionStatus(Record record,DownloadFileInfo downloadFileInfo){  if (!DownloadFileUtil.isLegal(downloadFileInfo)) {    return;  }  String url=downloadFileInfo.getUrl();switch (downloadFileInfo.getStatus()) {case Status.DOWNLOAD_STATUS_WAITING:case Status.DOWNLOAD_STATUS_PREPARING:case Status.DOWNLOAD_STATUS_PREPARED:case Status.DOWNLOAD_STATUS_DOWNLOADING:    try {      record.recordStatus(url,Status.DOWNLOAD_STATUS_PAUSED,0);    } catch (    Exception e) {      e.printStackTrace();    }  break;case Status.DOWNLOAD_STATUS_COMPLETED:case Status.DOWNLOAD_STATUS_PAUSED:case Status.DOWNLOAD_STATUS_ERROR:break;case Status.DOWNLOAD_STATUS_UNKNOWN:case Status.DOWNLOAD_STATUS_RETRYING:default :try {record.recordStatus(url,Status.DOWNLOAD_STATUS_ERROR,0);} catch (Exception e) {e.printStackTrace();}break;}}  }
class C{  public static <K,V>LinkedHashMap<K,V> newLinkedHashMap(){  return new LinkedHashMap<K,V>();}  }
class C{  public static boolean isValidNmtoken(String nmtoken){  if (nmtoken.length() == 0)   return false;  for (int i=0; i < nmtoken.length(); i++) {    char ch=nmtoken.charAt(i);    if (!isName(ch)) {      return false;    }  }  return true;}  }
class C{  public List<TaskResourceRep> findByState(URI tenantId,State state){  Map<String,Object> params=new HashMap<>();  params.put(TENANT_PARAM,tenantId);  params.put(STATE_PARAM,state.getLiteral());  List<SearchResultResourceRep> results=performSearch(params);  return getByRefs(results);}  }
class C{  public void propertyChange(final PropertyChangeEvent e){  if ("exitProgram".equals(e.getPropertyName())) {    exitApplication();  }}  }
class C{  public boolean isValidInet4Address(String inet4Address){  String[] groups=ipv4Validator.match(inet4Address);  if (groups == null) {    return false;  }  for (int i=0; i <= 3; i++) {    String ipSegment=groups[i];    if (ipSegment == null || ipSegment.length() == 0) {      return false;    }    int iIpSegment=0;    try {      iIpSegment=Integer.parseInt(ipSegment);    } catch (    NumberFormatException e) {      return false;    }    if (iIpSegment > 255) {      return false;    }    if (ipSegment.length() > 1 && ipSegment.startsWith("0")) {      return false;    }  }  return true;}  }
class C{  private static double computeRadiusOfEllipsoid(double geographicLat){  double sinLatSquared=pow(sin(toRadians(geographicLat)),2);  double cosLatSquared=pow(cos(toRadians(geographicLat)),2);  double a=OFFICIAL_WGS84_SEMI_MAJOR_AXIS;  double eSquared=OFFICIAL_WGS84_EC2;  double radius=a * sqrt(pow(1 - eSquared,2.0) * sinLatSquared + cosLatSquared);  radius/=sqrt(1 - eSquared * sinLatSquared);  return radius;}  }
class C{  @Override public Integer remove(Object key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  @Override public int hashCode(){  return 31 + ((this.member == null) ? 0 : this.member.hashCode());}  }
class C{  public void handleCSSEngineEvent(CSSEngineEvent evt){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(noderemovechildnomodificationallowederrEE.class,args);}  }
class C{  public boolean isLenient(){  return lenient;}  }
class C{  public static void checkProperties(String[] myKeys,Properties p) throws MissingPropertiesException {  if ((myKeys == null) || (p == null)) {    return;  }  MissingPropertiesException mpe=null;  for (int ii=0; ii < myKeys.length; ii++) {    if (!p.containsKey(myKeys[ii])) {      if (mpe == null) {        mpe=new MissingPropertiesException();      }      mpe.addProperty(myKeys[ii]);    }  }  if (mpe != null) {    throw mpe;  }  return;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.CONSTRAINT___ANONYMOUS_CONSTRAINT_11:    return ((InternalEList<?>)getAnonymous_constraint_1_1()).basicRemove(otherEnd,msgs);case UmplePackage.CONSTRAINT___CONSTRAINT_BODY_1:  return ((InternalEList<?>)getConstraintBody_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static <V>ConcurrentMapLong<V> newConcurrentMapLongWithAggressiveConcurrency(){  return new ConcurrentHashMapLong<>(ConcurrentCollections.<Long,V>newConcurrentMapWithAggressiveConcurrency());}  }
class C{  static void printException(String key,Exception e){  if (key != null) {    try {      println(key);    } catch (    MissingResourceException mex) {      printDirectln(key);    }  }  System.out.flush();  e.printStackTrace();}  }
class C{  public boolean isSuppressImplicitAnyIndexErrors(){  return suppressImplicitAnyIndexErrors;}  }
class C{  public static double squaredError(double[] dist,double[] reference){  double error=0;  Preconditions.checkArgument(dist.length == reference.length,"input arrays must be of the same length");  for (int i=0; i < dist.length; i++) {    double difference=dist[i] - reference[i];    error+=difference * difference;  }  return error;}  }
class C{  public Publisher<T> publisher(){  return publisher;}  }
class C{  public void show(){  show(false,null);}  }
class C{  public Map<StorageGroupPolicyLimitsParam,List<URI>> groupVolumesBasedOnFastPolicy(StorageSystem storage,List<URI> volumeUris) throws Exception {  Map<StorageGroupPolicyLimitsParam,List<URI>> volumeGroup=new HashMap<StorageGroupPolicyLimitsParam,List<URI>>();  Map<URI,VirtualPool> uriVirtualPoolMap=new HashMap<URI,VirtualPool>();  for (  URI volumeURI : volumeUris) {    String policyName=Constants.NONE;    Integer hostIOLimitBandwidth=null;    Integer hostIOLimitIOPs=null;    if (URIUtil.isType(volumeURI,Volume.class)) {      Volume volume=_dbClient.queryObject(Volume.class,volumeURI);      VirtualPool virtualPool=uriVirtualPoolMap.get(volume.getVirtualPool());      if (virtualPool == null) {        virtualPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());        uriVirtualPoolMap.put(volume.getVirtualPool(),virtualPool);      }      String volumePolicyName=ControllerUtils.getAutoTieringPolicyName(volume.getId(),_dbClient);      if (volumePolicyName != null) {        policyName=volumePolicyName;      }      hostIOLimitBandwidth=virtualPool.getHostIOLimitBandwidth();      hostIOLimitIOPs=virtualPool.getHostIOLimitIOPs();    }    StorageGroupPolicyLimitsParam storageGroupPolicyLimitsParam=new StorageGroupPolicyLimitsParam(policyName,hostIOLimitBandwidth,hostIOLimitIOPs,storage);    if (volumeGroup.get(storageGroupPolicyLimitsParam) == null) {      volumeGroup.put(storageGroupPolicyLimitsParam,new ArrayList<URI>());    }    volumeGroup.get(storageGroupPolicyLimitsParam).add(volumeURI);    _log.info("Adding volumeURI {} to policy {}",volumeURI,storageGroupPolicyLimitsParam);  }  return volumeGroup;}  }
class C{  public Im(){  super(KEY);}  }
class C{  public ControlNet(Vec4D[][] cpnet) throws IllegalArgumentException {  if (cpnet.length < 1) {    throw new IllegalArgumentException("Nurbs is not a Surface, to few ControlPoints in u Direction");  }  if (cpnet[0].length < 1) {    throw new IllegalArgumentException("Nurbs is not a Surface, to few ControlPoints in v Direction");  }  for (int i=1; i < cpnet.length; i++) {    if (cpnet[i].length != cpnet[i - 1].length) {      throw new IllegalArgumentException("ControlPoint net is not a Matrix");    }  }  nU=cpnet.length;  nV=cpnet[0].length;  cps=cpnet;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case KEY:    return isSetKey();case VERSIONS:  return isSetVersions();}throw new IllegalStateException();}  }
class C{  public boolean isPrivacyPolicyAccepted(){  return privacyPolicyAccepted;}  }
class C{  private void destroyThrottleWindow(ThrottleWindow window){  window.dispose();}  }
class C{  public static void main(String[] args) throws Exception {  System.out.println("building TreeVisualizer...");  weka.gui.treevisualizer.TreeBuild builder=new weka.gui.treevisualizer.TreeBuild();  weka.gui.treevisualizer.NodePlace arrange=new weka.gui.treevisualizer.PlaceNode2();  weka.gui.treevisualizer.Node top=builder.create(new java.io.StringReader("digraph atree { top [label=\"the top\"] a [label=\"the first node\"] b [label=\"the second nodes\"] c [label=\"comes off of first\"] top->a top->b b->c }"));  weka.gui.treevisualizer.TreeVisualizer tv=new weka.gui.treevisualizer.TreeVisualizer(null,top,arrange);  tv.setSize(800,600);  String filename=System.getProperty("java.io.tmpdir") + "test.eps";  System.out.println("outputting to '" + filename + "'...");  toOutput(new PostscriptWriter(),tv,new File(filename));  System.out.println("done!");}  }
class C{  private void zonesetClone(MDSDialog dialog,Integer vsanId,Zoneset activeZoneset){  boolean doZonesetClone=true;  boolean allowZonesIfZonesetCloneFails=true;  try {    doZonesetClone=Boolean.valueOf(ControllerUtils.getPropertyValueFromCoordinator(_coordinator,"controller_mds_clone_zoneset"));    allowZonesIfZonesetCloneFails=Boolean.valueOf(ControllerUtils.getPropertyValueFromCoordinator(_coordinator,"controller_mds_allow_zoneset_commit"));  } catch (  Exception e) {    _log.warn("Zoneset clone properties not set");  }  if (doZonesetClone) {    _log.info(String.format("Cloning zoneset %s",activeZoneset.getName()));    try {      dialog.zonesetClone(vsanId,activeZoneset.getName());    } catch (    NetworkDeviceControllerException nde) {      _log.info("Failed to create zoneset clone. Reason : ",nde.getMessage());      if (!allowZonesIfZonesetCloneFails) {        throw nde;      }    }  } else {    _log.info(String.format("controller_mds_clone_zoneset is false, NOT Cloning zoneset %s",activeZoneset.getName()));  }}  }
class C{  @Override public String toString(){  Object value=get();  return value == null ? "" : value.toString();}  }
class C{  public void addAttribute(Object name,Object value){  table.put(name,value);}  }
class C{  public ButtonFragment(){}  }
class C{  public Fuel(){  super();}  }
class C{  public void removeComponent(String includeClass){  classes.remove(includeClass);}  }
class C{  public ShowSystemMenuAction(boolean show){  this.show=show;}  }
class C{  public static void multiply(int[] n1,int d,int[] result){  int[] n2=new int[n1.length];  n2[n2.length - 1]=d;  multiply(n2,n1,result);}  }
class C{  public DTEDLocator(File dtedDir){  this();  handleEntry(dtedDir);}  }
class C{  void addEncoder(final MediaEncoder encoder){  if (encoder instanceof MediaVideoEncoder) {    if (mVideoEncoder != null)     throw new IllegalArgumentException("Video encoder already added.");    mVideoEncoder=encoder;  } else   if (encoder instanceof MediaAudioEncoder) {    if (mAudioEncoder != null)     throw new IllegalArgumentException("Video encoder already added.");    mAudioEncoder=encoder;  } else   throw new IllegalArgumentException("unsupported encoder");  mEncoderCount=(mVideoEncoder != null ? 1 : 0) + (mAudioEncoder != null ? 1 : 0);}  }
class C{  public void handlePotentialCommitFailure(HashMap<DistributedMember,DistTXCoordinatorInterface> msgMap){  if (fatalExceptions.size() > 0) {    StringBuffer errorMessage=new StringBuffer("Incomplete commit of transaction ").append(id).append(".  Caused by the following exceptions: ");    for (Iterator i=fatalExceptions.entrySet().iterator(); i.hasNext(); ) {      Map.Entry me=(Map.Entry)i.next();      DistributedMember mem=(DistributedMember)me.getKey();      errorMessage.append(" From member: ").append(mem).append(" ");      List exceptions=(List)me.getValue();      for (Iterator ei=exceptions.iterator(); ei.hasNext(); ) {        Exception e=(Exception)ei.next();        errorMessage.append(e);        for (        StackTraceElement ste : e.getStackTrace()) {          errorMessage.append("\n\tat ").append(ste);        }        if (ei.hasNext()) {          errorMessage.append("\nAND\n");        }      }      errorMessage.append(".");    }    throw new CommitIncompleteException(errorMessage.toString());  }}  }
class C{  public boolean isDynamic(){  return false;}  }
class C{  private void executeQuery(String query,boolean ignoreError) throws ReplicatorException {  Statement stmt=null;  ResultSet resultset=null;  try {    stmt=connection.getConnection().createStatement();    resultset=stmt.executeQuery(query);  } catch (  SQLException e) {    if (!ignoreError)     throw new ReplicatorException("Failed to execute query " + query,e); else     logger.warn("Ignoring exception : " + e.getMessage());  } finally {    try {      if (resultset != null)       resultset.close();      if (stmt != null)       stmt.close();    } catch (    SQLException ignore) {      if (logger.isDebugEnabled())       logger.debug("Failed to close resultset",ignore);    }  }}  }
class C{  public void reset(String tag,String label){  mTag=tag;  mLabel=label;  reset();}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  public SendableAudioMessage.SendableAudioMessageBuilder replyMarkup(ReplyMarkup replyMarkup){  this.replyMarkup=replyMarkup;  return this;}  }
class C{  private static Object doPSRCheck(MovePath md,boolean stringResult){  StringBuffer nagReport=new StringBuffer();  List<TargetRoll> psrList=new ArrayList<TargetRoll>();  final Entity entity=md.getEntity();  final IGame game=entity.getGame();  Coords lastPos=entity.getPosition();  Coords curPos=entity.getPosition();  int lastElevation=entity.getElevation();  int curElevation=entity.getElevation();  int curFacing=entity.getFacing();  int distance=0;  EntityMovementType moveType=EntityMovementType.MOVE_NONE;  EntityMovementType overallMoveType=EntityMovementType.MOVE_NONE;  boolean firstStep;  int prevFacing=curFacing;  IHex prevHex=game.getBoard().getHex(curPos);  final boolean isInfantry=(entity instanceof Infantry);  PilotingRollData rollTarget;  md.clipToPossible();  overallMoveType=md.getLastStepMovementType();  firstStep=true;  MoveStep prevStep=null;  for (final Enumeration<MoveStep> i=md.getSteps(); i.hasMoreElements(); ) {    final MoveStep step=i.nextElement();    boolean isPavementStep=step.isPavementStep();    if (step.getMovementType(md.isEndStep(step)) == EntityMovementType.MOVE_ILLEGAL) {      break;    }    if (entity.isAirborne() && (entity instanceof Aero)) {      Aero a=(Aero)entity;      rollTarget=a.checkRolls(step,overallMoveType);      checkNag(rollTarget,nagReport,psrList);      rollTarget=a.checkManeuver(step,overallMoveType);      checkNag(rollTarget,nagReport,psrList);    }    rollTarget=entity.checkGetUp(step,overallMoveType);    checkNag(rollTarget,nagReport,psrList);    moveType=step.getMovementType(md.isEndStep(step));    distance=step.getDistance();    curPos=step.getPosition();    curFacing=step.getFacing();    curElevation=step.getElevation();    final IHex curHex=game.getBoard().getHex(curPos);    if ((step.getType() == MoveStepType.VTAKEOFF) && (entity instanceof Aero)) {      rollTarget=((Aero)entity).checkVerticalTakeOff();      checkNag(rollTarget,nagReport,psrList);    }    if ((step.getType() == MoveStepType.LAND) && (entity instanceof Aero)) {      rollTarget=((Aero)entity).checkLanding(moveType,step.getVelocity(),curPos,curFacing,false);      checkNag(rollTarget,nagReport,psrList);    }    if ((step.getType() == MoveStepType.VLAND) && (entity instanceof Aero)) {      rollTarget=((Aero)entity).checkLanding(moveType,step.getVelocity(),curPos,curFacing,true);      checkNag(rollTarget,nagReport,psrList);    }    if (!lastPos.equals(curPos) && (moveType != EntityMovementType.MOVE_JUMP) && (entity instanceof Mech)&& game.getOptions().booleanOption("tacops_leaping")) {      int leapDistance=(lastElevation + game.getBoard().getHex(lastPos).getLevel()) - (curElevation + curHex.getLevel());      if (leapDistance > 2) {        rollTarget=entity.getBasePilotingRoll(moveType);        entity.addPilotingModifierForTerrain(rollTarget,curPos);        rollTarget.append(new PilotingRollData(entity.getId(),2 * leapDistance,"leaping (leg damage)"));        SharedUtility.checkNag(rollTarget,nagReport,psrList);        rollTarget=entity.getBasePilotingRoll(moveType);        entity.addPilotingModifierForTerrain(rollTarget,curPos);        rollTarget.append(new PilotingRollData(entity.getId(),leapDistance,"leaping (fall)"));        SharedUtility.checkNag(rollTarget,nagReport,psrList);      }    }    rollTarget=entity.checkSkid(moveType,prevHex,overallMoveType,prevStep,prevFacing,curFacing,lastPos,curPos,isInfantry,distance - 1);    checkNag(rollTarget,nagReport,psrList);    boolean isLastStep=md.getLastStep().equals(step);    rollTarget=entity.checkRubbleMove(step,overallMoveType,curHex,lastPos,curPos,isLastStep,isPavementStep);    checkNag(rollTarget,nagReport,psrList);    int lightPenalty=entity.getGame().getPlanetaryConditions().getLightPilotPenalty();    if (lightPenalty > 0) {      rollTarget.addModifier(lightPenalty,entity.getGame().getPlanetaryConditions().getLightDisplayableName());    }    rollTarget=entity.checkRecklessMove(step,overallMoveType,curHex,lastPos,curPos,prevHex);    checkNag(rollTarget,nagReport,psrList);    if (curHex.containsTerrain(Terrains.ICE) && curHex.containsTerrain(Terrains.WATER) && !(curPos.equals(lastPos))&& (step.getElevation() == 0)&& (moveType != EntityMovementType.MOVE_JUMP)&& !(entity instanceof Infantry)&& !(isPavementStep && curHex.containsTerrain(Terrains.BRIDGE))) {      nagReport.append(Messages.getString("MovementDisplay.IceMoving"));    }    rollTarget=entity.checkWaterMove(step,overallMoveType,curHex,lastPos,curPos,isPavementStep);    checkNag(rollTarget,nagReport,psrList);    boolean underwater=curHex.containsTerrain(Terrains.WATER) && (curHex.depth() > 0) && (step.getElevation() < curHex.surface());    if (curHex.containsTerrain(Terrains.FIRE) && !underwater && !(entity instanceof Mech)&& (step.getElevation() <= 1)&& (moveType != EntityMovementType.MOVE_JUMP)&& !(curPos.equals(lastPos))) {      nagReport.append(Messages.getString("MovementDisplay.FireMoving",new Object[]{new Integer(8)}));    }    int level=curHex.terrainLevel(Terrains.MAGMA);    if ((level == 1) && (step.getElevation() == 0) && (moveType != EntityMovementType.MOVE_JUMP)&& !(curPos.equals(lastPos))) {      nagReport.append(Messages.getString("MovementDisplay.MagmaCrustMoving"));    } else     if ((level == 2) && (step.getElevation() == 0) && (moveType != EntityMovementType.MOVE_JUMP)&& (entity.getMovementMode() != EntityMovementMode.HOVER)&& (entity.getMovementMode() != EntityMovementMode.WIGE)&& !(curPos.equals(lastPos))) {      nagReport.append(Messages.getString("MovementDisplay.MagmaLiquidMoving"));    }    if ((entity instanceof VTOL) || (entity.getMovementMode() == EntityMovementMode.HOVER) || (entity.getMovementMode() == EntityMovementMode.WIGE)) {      rollTarget=entity.checkSideSlip(moveType,prevHex,overallMoveType,prevStep,prevFacing,curFacing,lastPos,curPos,distance);      checkNag(rollTarget,nagReport,psrList);    }    rollTarget=entity.checkBogDown(step,overallMoveType,curHex,lastPos,curPos,lastElevation,isPavementStep);    checkNag(rollTarget,nagReport,psrList);    if (!i.hasMoreElements() && !firstStep) {      if ((entity instanceof Mech) || (entity instanceof VTOL)) {        if ((moveType == EntityMovementType.MOVE_WALK) || (moveType == EntityMovementType.MOVE_VTOL_WALK) || (moveType == EntityMovementType.MOVE_RUN)|| (moveType == EntityMovementType.MOVE_VTOL_RUN)) {          if (step.getMpUsed() > entity.getRunMP(false,false,false)) {            rollTarget=entity.checkMovedTooFast(step,overallMoveType);            checkNag(rollTarget,nagReport,psrList);          }        } else         if (moveType == EntityMovementType.MOVE_JUMP) {          int origWalkMP=entity.getWalkMP(false,false);          int gravWalkMP=entity.getWalkMP();          if (step.getMpUsed() > entity.getJumpMP(false)) {            rollTarget=entity.checkMovedTooFast(step,overallMoveType);            checkNag(rollTarget,nagReport,psrList);          } else           if ((game.getPlanetaryConditions().getGravity() > 1) && ((origWalkMP - gravWalkMP) > 0)) {            rollTarget=entity.getBasePilotingRoll(md.getLastStepMovementType());            entity.addPilotingModifierForTerrain(rollTarget,step);            int gravMod=game.getPlanetaryConditions().getGravityPilotPenalty();            if ((gravMod != 0) && !game.getBoard().inSpace()) {              rollTarget.addModifier(gravMod,game.getPlanetaryConditions().getGravity() + "G gravity");            }            rollTarget.append(new PilotingRollData(entity.getId(),0,"jumped in high gravity"));            SharedUtility.checkNag(rollTarget,nagReport,psrList);          }        } else         if (moveType == EntityMovementType.MOVE_SPRINT) {          if (step.getMpUsed() > entity.getSprintMP(false,false,false)) {            rollTarget=entity.checkMovedTooFast(step,overallMoveType);            checkNag(rollTarget,nagReport,psrList);          }        }      } else       if (entity instanceof Tank) {        if ((moveType == EntityMovementType.MOVE_WALK) || (moveType == EntityMovementType.MOVE_VTOL_WALK) || (moveType == EntityMovementType.MOVE_RUN)|| (moveType == EntityMovementType.MOVE_VTOL_RUN)) {          if ((step.getMpUsed() > entity.getRunMP(false,false,false)) && !step.isOnlyPavement()) {            rollTarget=entity.checkMovedTooFast(step,overallMoveType);            checkNag(rollTarget,nagReport,psrList);          } else           if (step.getMpUsed() > (entity.getRunMP(false,false,false) + 1)) {            rollTarget=entity.checkMovedTooFast(step,overallMoveType);            checkNag(rollTarget,nagReport,psrList);          }        }      }    }    int buildingMove=entity.checkMovementInBuilding(step,prevStep,curPos,lastPos);    if ((buildingMove > 1) && !(entity instanceof Protomech)) {      Building bldg=null;      String reason="entering";      if ((buildingMove & 2) == 2) {        bldg=game.getBoard().getBuildingAt(curPos);      }      if (bldg != null) {        rollTarget=entity.rollMovementInBuilding(bldg,distance,reason,overallMoveType);        SharedUtility.checkNag(rollTarget,nagReport,psrList);      }    }    if (step.getType() == MoveStepType.GO_PRONE) {      rollTarget=entity.checkDislodgeSwarmers(step,overallMoveType);      checkNag(rollTarget,nagReport,psrList);    }    IHex lastHex=game.getBoard().getHex(lastPos);    if (((step.getType() == MoveStepType.BACKWARDS) || (step.getType() == MoveStepType.LATERAL_LEFT_BACKWARDS) || (step.getType() == MoveStepType.LATERAL_RIGHT_BACKWARDS)) && !(md.isJumping() && (entity.getJumpType() == Mech.JUMP_BOOSTER)) && ((lastHex.getLevel() + entity.calcElevation(curHex,lastHex,step.getElevation(),md.getFinalClimbMode(),false)) != (curHex.getLevel() + entity.getElevation()))&& !(entity instanceof VTOL)&& !(md.getFinalClimbMode() && curHex.containsTerrain(Terrains.BRIDGE) && ((curHex.terrainLevel(Terrains.BRIDGE_ELEV) + curHex.getLevel()) == (prevHex.getLevel() + (prevHex.containsTerrain(Terrains.BRIDGE) ? prevHex.terrainLevel(Terrains.BRIDGE_ELEV) : 0))))) {      nagReport.append(Messages.getString("MovementDisplay.BackWardsElevationChange"));      SharedUtility.checkNag(entity.getBasePilotingRoll(overallMoveType),nagReport,psrList);    }    if (step.getType() == MoveStepType.EJECT && (entity instanceof Mech)) {      rollTarget=Server.getEjectModifiers(game,entity,false);      checkNag(rollTarget,nagReport,psrList);    }    if (step.getType() == MoveStepType.UNLOAD) {      Targetable targ=step.getTarget(game);      if (game.getOptions().booleanOption("tacops_ziplines") && (entity instanceof VTOL) && (md.getFinalElevation() > 0)&& (targ instanceof Infantry)&& (((Entity)targ).getJumpMP() < 1)&& !((Infantry)targ).isMechanized()) {        rollTarget=Server.getEjectModifiers(game,(Entity)targ,false,entity.getPosition(),"zip lining");        checkNag(rollTarget,nagReport,psrList);      }    }    if (!curPos.equals(lastPos)) {      prevFacing=curFacing;    }    lastPos=new Coords(curPos);    prevStep=step;    prevHex=curHex;    lastElevation=step.getElevation();    firstStep=false;  }  rollTarget=entity.checkRunningWithDamage(overallMoveType);  checkNag(rollTarget,nagReport,psrList);  rollTarget=entity.checkSprintingWithMASC(overallMoveType,md.getMpUsed());  checkNag(rollTarget,nagReport,psrList);  rollTarget=entity.checkSprintingWithSupercharger(overallMoveType,md.getMpUsed());  checkNag(rollTarget,nagReport,psrList);  if ((overallMoveType == EntityMovementType.MOVE_JUMP) && !entity.isMakingDfa()) {    rollTarget=entity.checkLandingWithDamage(overallMoveType);    checkNag(rollTarget,nagReport,psrList);    rollTarget=entity.checkLandingWithPrototypeJJ(overallMoveType);    checkNag(rollTarget,nagReport,psrList);    IHex hex=game.getBoard().getHex(curPos);    if (game.getOptions().booleanOption("psr_jump_heavy_woods")) {      rollTarget=entity.checkLandingInHeavyWoods(overallMoveType,hex);      checkNag(rollTarget,nagReport,psrList);    }    int waterLevel=hex.terrainLevel(Terrains.WATER);    if (hex.containsTerrain(Terrains.ICE) && (waterLevel > 0)) {      if (!(entity instanceof Infantry)) {        nagReport.append(Messages.getString("MovementDisplay.IceLanding"));      }    } else     if (!(prevStep.climbMode() && hex.containsTerrain(Terrains.BRIDGE))) {      if (!(entity.getMovementMode() == EntityMovementMode.HOVER)) {        rollTarget=entity.checkWaterMove(waterLevel,overallMoveType);        checkNag(rollTarget,nagReport,psrList);      }    }  }  if (entity.isAirborne() && (entity instanceof Aero)) {    Aero a=(Aero)entity;    int thrust=md.getMpUsed();    rollTarget=a.checkThrustSITotal(thrust,overallMoveType);    checkNag(rollTarget,nagReport,psrList);    if (!game.getBoard().inSpace() && !md.contains(MoveStepType.LAND) && !md.contains(MoveStepType.VLAND)) {      rollTarget=a.checkVelocityDouble(md.getFinalVelocity(),overallMoveType);      checkNag(rollTarget,nagReport,psrList);      rollTarget=a.checkDown(md.getFinalNDown(),overallMoveType);      checkNag(rollTarget,nagReport,psrList);      rollTarget=a.checkStall(md);      checkNag(rollTarget,nagReport,psrList);      rollTarget=a.checkHover(md);      checkNag(rollTarget,nagReport,psrList);    }  }  if (stringResult) {    return nagReport.toString();  }  return psrList;}  }
class C{  static int mysqlToJavaType(String mysqlType){  if (mysqlType.equalsIgnoreCase("BIT")) {    return mysqlToJavaType(FIELD_TYPE_BIT);  } else   if (mysqlType.equalsIgnoreCase("TINYINT")) {    return mysqlToJavaType(FIELD_TYPE_TINY);  } else   if (mysqlType.equalsIgnoreCase("SMALLINT")) {    return mysqlToJavaType(FIELD_TYPE_SHORT);  } else   if (mysqlType.equalsIgnoreCase("MEDIUMINT")) {    return mysqlToJavaType(FIELD_TYPE_INT24);  } else   if (mysqlType.equalsIgnoreCase("INT") || mysqlType.equalsIgnoreCase("INTEGER")) {    return mysqlToJavaType(FIELD_TYPE_LONG);  } else   if (mysqlType.equalsIgnoreCase("BIGINT")) {    return mysqlToJavaType(FIELD_TYPE_LONGLONG);  } else   if (mysqlType.equalsIgnoreCase("INT24")) {    return mysqlToJavaType(FIELD_TYPE_INT24);  } else   if (mysqlType.equalsIgnoreCase("REAL")) {    return mysqlToJavaType(FIELD_TYPE_DOUBLE);  } else   if (mysqlType.equalsIgnoreCase("FLOAT")) {    return mysqlToJavaType(FIELD_TYPE_FLOAT);  } else   if (mysqlType.equalsIgnoreCase("DECIMAL")) {    return mysqlToJavaType(FIELD_TYPE_DECIMAL);  } else   if (mysqlType.equalsIgnoreCase("NUMERIC")) {    return mysqlToJavaType(FIELD_TYPE_DECIMAL);  } else   if (mysqlType.equalsIgnoreCase("DOUBLE")) {    return mysqlToJavaType(FIELD_TYPE_DOUBLE);  } else   if (mysqlType.equalsIgnoreCase("CHAR")) {    return mysqlToJavaType(FIELD_TYPE_STRING);  } else   if (mysqlType.equalsIgnoreCase("VARCHAR")) {    return mysqlToJavaType(FIELD_TYPE_VAR_STRING);  } else   if (mysqlType.equalsIgnoreCase("DATE")) {    return mysqlToJavaType(FIELD_TYPE_DATE);  } else   if (mysqlType.equalsIgnoreCase("TIME")) {    return mysqlToJavaType(FIELD_TYPE_TIME);  } else   if (mysqlType.equalsIgnoreCase("YEAR")) {    return mysqlToJavaType(FIELD_TYPE_YEAR);  } else   if (mysqlType.equalsIgnoreCase("TIMESTAMP")) {    return mysqlToJavaType(FIELD_TYPE_TIMESTAMP);  } else   if (mysqlType.equalsIgnoreCase("DATETIME")) {    return mysqlToJavaType(FIELD_TYPE_DATETIME);  } else   if (mysqlType.equalsIgnoreCase("TINYBLOB")) {    return java.sql.Types.BINARY;  } else   if (mysqlType.equalsIgnoreCase("BLOB")) {    return java.sql.Types.LONGVARBINARY;  } else   if (mysqlType.equalsIgnoreCase("MEDIUMBLOB")) {    return java.sql.Types.LONGVARBINARY;  } else   if (mysqlType.equalsIgnoreCase("LONGBLOB")) {    return java.sql.Types.LONGVARBINARY;  } else   if (mysqlType.equalsIgnoreCase("TINYTEXT")) {    return java.sql.Types.VARCHAR;  } else   if (mysqlType.equalsIgnoreCase("TEXT")) {    return java.sql.Types.LONGVARCHAR;  } else   if (mysqlType.equalsIgnoreCase("MEDIUMTEXT")) {    return java.sql.Types.LONGVARCHAR;  } else   if (mysqlType.equalsIgnoreCase("LONGTEXT")) {    return java.sql.Types.LONGVARCHAR;  } else   if (mysqlType.equalsIgnoreCase("ENUM")) {    return mysqlToJavaType(FIELD_TYPE_ENUM);  } else   if (mysqlType.equalsIgnoreCase("SET")) {    return mysqlToJavaType(FIELD_TYPE_SET);  } else   if (mysqlType.equalsIgnoreCase("GEOMETRY")) {    return mysqlToJavaType(FIELD_TYPE_GEOMETRY);  } else   if (mysqlType.equalsIgnoreCase("BINARY")) {    return Types.BINARY;  } else   if (mysqlType.equalsIgnoreCase("VARBINARY")) {    return Types.VARBINARY;  } else   if (mysqlType.equalsIgnoreCase("BIT")) {    return mysqlToJavaType(FIELD_TYPE_BIT);  } else   if (mysqlType.equalsIgnoreCase("JSON")) {    return mysqlToJavaType(FIELD_TYPE_JSON);  }  return java.sql.Types.OTHER;}  }
class C{  @Deprecated public static void fill(final char[] array,final char value){  int i=array.length;  while (i-- != 0)   array[i]=value;}  }
class C{  public boolean isReachable(){  return reachable;}  }
class C{  public int compareTo(Object o){  if (!(o instanceof CodeTemplate)) {    return -1;  }  CodeTemplate t2=(CodeTemplate)o;  return getID().compareTo(t2.getID());}  }
class C{  private void calculateUncoveredBranches(){  unsolvedBranchConditions.clear();  if (Properties.DSE_NEGATE_ALL_CONDITIONS == true) {    for (    TestChromosome testChromosome : pathConditions.keySet()) {      final List<BranchCondition> pathCondition=pathConditions.get(testChromosome);      for (      BranchCondition branch : pathCondition) {        if (!unsolvableBranchConditions.contains(branch)) {          unsolvedBranchConditions.add(new TestBranchPair(testChromosome,pathCondition,branch));        }      }    }  } else {    Map<String,Map<Comparator,Set<TestBranchPair>>> solvedConstraints=new HashMap<String,Map<Comparator,Set<TestBranchPair>>>();    for (    TestChromosome test : pathConditions.keySet()) {      final List<BranchCondition> pathCondition=pathConditions.get(test);      for (      BranchCondition branch : pathCondition) {        if (unsolvableBranchConditions.contains(branch))         continue;        String index=getBranchIndex(branch);        if (!solvedConstraints.containsKey(index))         solvedConstraints.put(index,new HashMap<Comparator,Set<TestBranchPair>>());        Constraint<?> c=branch.getConstraint();        if (!solvedConstraints.get(index).containsKey(c.getComparator()))         solvedConstraints.get(index).put(c.getComparator(),new HashSet<TestBranchPair>());        solvedConstraints.get(index).get(c.getComparator()).add(new TestBranchPair(test,pathCondition,branch));      }    }    for (    String index : solvedConstraints.keySet()) {      if (solvedConstraints.get(index).size() == 1) {        Set<TestBranchPair> branches=solvedConstraints.get(index).values().iterator().next();        unsolvedBranchConditions.addAll(branches);      }    }    logger.info("Update set of unsolved branch conditions to " + unsolvedBranchConditions.size());    if (Properties.DSE_RANK_BRANCH_CONDITIONS == false) {      Randomness.shuffle((ArrayList<TestBranchPair>)unsolvedBranchConditions);    }  }}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  StringBuffer sb=new StringBuffer();  int i;  JSONArray ja;  String key;  Iterator keys;  int length;  Object object;  String tagName;  String value;  tagName=jo.optString("tagName");  if (tagName == null) {    return XML.escape(jo.toString());  }  XML.noSpace(tagName);  tagName=XML.escape(tagName);  sb.append('<');  sb.append(tagName);  keys=jo.keys();  while (keys.hasNext()) {    key=keys.next().toString();    if (!"tagName".equals(key) && !"childNodes".equals(key)) {      XML.noSpace(key);      value=jo.optString(key);      if (value != null) {        sb.append(' ');        sb.append(XML.escape(key));        sb.append('=');        sb.append('"');        sb.append(XML.escape(value));        sb.append('"');      }    }  }  ja=jo.optJSONArray("childNodes");  if (ja == null) {    sb.append('/');    sb.append('>');  } else {    sb.append('>');    length=ja.length();    for (i=0; i < length; i+=1) {      object=ja.get(i);      if (object != null) {        if (object instanceof String) {          sb.append(XML.escape(object.toString()));        } else         if (object instanceof JSONObject) {          sb.append(toString((JSONObject)object));        } else         if (object instanceof JSONArray) {          sb.append(toString((JSONArray)object));        } else {          sb.append(object.toString());        }      }    }    sb.append('<');    sb.append('/');    sb.append(tagName);    sb.append('>');  }  return sb.toString();}  }
class C{  public void removeVirtualVolumesFromStorageView(String viewName,String clusterName,List<String> virtualVolumeNames) throws VPlexApiException {  s_logger.info("Request to remove virtual volumes from storage view on VPlex at {}",_baseURI);  _exportMgr.removeVirtualVolumesFromStorageView(viewName,clusterName,virtualVolumeNames);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void step3(DBIDRef id,WritableDBIDDataStore pi,WritableDoubleDataStore lambda,DBIDs processedIDs,WritableDoubleDataStore m){  DBIDVar p_i=DBIDUtil.newVar();  for (DBIDIter it=processedIDs.iter(); it.valid(); it.advance()) {    double l_i=lambda.doubleValue(it);    double m_i=m.doubleValue(it);    pi.assignVar(it,p_i);    double mp_i=m.doubleValue(p_i);    if (l_i >= m_i) {      if (l_i < mp_i) {        m.putDouble(p_i,l_i);      }      lambda.putDouble(it,m_i);      pi.put(it,id);    } else {      if (m_i < mp_i) {        m.putDouble(p_i,m_i);      }    }  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.CHECK_REF__CHECK:    setCheck((Check)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean loadMissingRsrcs(ServiceContext context) throws IOException {  CacheStructure cache=context.cache;  byte[] orig=context.orig;  HttpServletRequest request=context.request;  boolean isCss=context.isCss;  String url=context.url;  int[] info=context.info;  char variant=context.variant;  boolean isIE8=context.isIE8;  boolean isMobile=context.isMobile;  ConfigData configData=context.configData;  boolean noInline=false;  long currentTime=System.currentTimeMillis();  int i=0;  int rsrcCount=0;  while (i < info.length) {    if (info[i] == HtmlAnalyzer.EOF_KIND)     break;    if (info[i] == HtmlAnalyzer.IMG_KIND || info[i] == HtmlAnalyzer.CSS_IMG_KIND || info[i] == HtmlAnalyzer.INPUT_KIND || info[i] == HtmlAnalyzer.SCRIPT_KIND || info[i] == HtmlAnalyzer.LINK_KIND)     rsrcCount++;    i+=HtmlAnalyzer.INFO_LENS[info[i]];  }  i=0;  RsrcIfc[] allRsrcs=new RsrcIfc[rsrcCount];  context.allRsrcs=allRsrcs;  int iAll=0;  TempRsrc[] rsrcsToLoad=new TempRsrc[rsrcCount];  BackThreadLoadInfo backThreadLoadInfo=new BackThreadLoadInfo(context.client,url,context.requestHost);  LoadLock rsrcsLoadLock=new LoadLock();  LoadLock rsrcsWaitLock=new LoadLock();synchronized (cache.globalLock) {    while (i < info.length) {      if (info[i] == HtmlAnalyzer.EOF_KIND)       break;      int dupInfo=0;      boolean replace=false;      if (info[i] == HtmlAnalyzer.IMG_KIND) {        dupInfo=info[i + HtmlAnalyzer.DUPLICATES_INFO];        replace=true;        int srcFirst=info[i + HtmlAnalyzer.IMG_SRC_FIRST];        int srcLast=info[i + HtmlAnalyzer.IMG_SRC_LAST];        String path=(srcFirst < 0 || srcLast < srcFirst ? "" : new String(orig,srcFirst,srcLast - srcFirst,"UTF-8"));        String validUrl=toValidUrl(path,context);        if (path.length() == 0 || path.equals("about:blank") || path.startsWith("data:") || path.contains("#") || cache.isStateFull(validUrl,configData) || variant == CacheUtils.FORTH_VISIT_VARIANT || variant == CacheUtils.IE8_FORTH_VISIT_VARIANT || variant == CacheUtils.MOBILE_FORTH_VISIT_VARIANT) {          i+=HtmlAnalyzer.INFO_LENS[info[i]];          iAll++;          continue;        }        allRsrcs[iAll]=checkRsrc(context,currentTime,path,validUrl,ImageRsrc.class,rsrcsToLoad,backThreadLoadInfo,rsrcsLoadLock,rsrcsWaitLock,false);      } else       if (info[i] == HtmlAnalyzer.CSS_IMG_KIND) {        dupInfo=info[i + HtmlAnalyzer.DUPLICATES_INFO];        replace=true;        int srcFirst=info[i + HtmlAnalyzer.CSS_IMG_FIRST];        int srcLast=info[i + HtmlAnalyzer.CSS_IMG_LAST];        String path=(srcFirst < 0 || srcLast < srcFirst ? "" : new String(orig,srcFirst,srcLast - srcFirst,"UTF-8"));        String validUrl=toValidUrl(path,context);        if (path.length() == 0 || path.equals("about:blank") || path.startsWith("data:") || cache.isStateFull(validUrl,configData) || variant == CacheUtils.FORTH_VISIT_VARIANT || variant == CacheUtils.IE8_FORTH_VISIT_VARIANT || variant == CacheUtils.MOBILE_FORTH_VISIT_VARIANT) {          if (!path.startsWith("http:") && !path.startsWith("https:"))           noInline=true;          i+=HtmlAnalyzer.INFO_LENS[info[i]];          iAll++;          continue;        }        allRsrcs[iAll]=checkRsrc(context,currentTime,path,validUrl,ImageRsrc.class,rsrcsToLoad,backThreadLoadInfo,rsrcsLoadLock,rsrcsWaitLock,false);      } else       if (info[i] == HtmlAnalyzer.INPUT_KIND) {        dupInfo=info[i + HtmlAnalyzer.DUPLICATES_INFO];        replace=true;        int srcFirst=info[i + HtmlAnalyzer.INPUT_SRC_FIRST];        int srcLast=info[i + HtmlAnalyzer.INPUT_SRC_LAST];        String path=(srcFirst < 0 || srcLast < srcFirst ? "" : new String(orig,srcFirst,srcLast - srcFirst,"UTF-8"));        String validUrl=toValidUrl(path,context);        if (path.length() == 0 || path.equals("about:blank") || path.startsWith("data:") || path.contains("#") || cache.isStateFull(validUrl,configData) || variant == CacheUtils.FORTH_VISIT_VARIANT || variant == CacheUtils.IE8_FORTH_VISIT_VARIANT || variant == CacheUtils.MOBILE_FORTH_VISIT_VARIANT) {          i+=HtmlAnalyzer.INFO_LENS[info[i]];          iAll++;          continue;        }        allRsrcs[iAll]=checkRsrc(context,currentTime,path,validUrl,ImageRsrc.class,rsrcsToLoad,backThreadLoadInfo,rsrcsLoadLock,rsrcsWaitLock,false);      } else       if (info[i] == HtmlAnalyzer.SCRIPT_KIND) {        dupInfo=info[i + HtmlAnalyzer.DUPLICATES_INFO];        replace=true;        int srcFirst=info[i + HtmlAnalyzer.SCRIPT_SRC_FIRST];        int srcLast=info[i + HtmlAnalyzer.SCRIPT_SRC_LAST];        String path=(srcFirst < 0 || srcLast < srcFirst ? "" : new String(orig,srcFirst,srcLast - srcFirst));        String validUrl=toValidUrl(path,context);        if (srcFirst < 0 || dupInfo != 0 || path.contains("#") || cache.isStateFull(validUrl,configData) || variant == CacheUtils.FORTH_VISIT_VARIANT || variant == CacheUtils.IE8_FORTH_VISIT_VARIANT || variant == CacheUtils.MOBILE_FORTH_VISIT_VARIANT) {          i+=HtmlAnalyzer.INFO_LENS[info[i]];          iAll++;          continue;        }        allRsrcs[iAll]=checkRsrc(context,currentTime,path,validUrl,JsRsrc.class,rsrcsToLoad,backThreadLoadInfo,rsrcsLoadLock,rsrcsWaitLock,info[i + HtmlAnalyzer.SCRIPT_IN_IE_COMMENT] == 1);      } else       if (info[i] == HtmlAnalyzer.LINK_KIND) {        dupInfo=info[i + HtmlAnalyzer.DUPLICATES_INFO];        replace=true;        int hrefFirst=info[i + HtmlAnalyzer.LINK_HREF_FIRST];        int hrefLast=info[i + HtmlAnalyzer.LINK_HREF_LAST];        if (hrefFirst < 0 || hrefLast <= hrefFirst || dupInfo != 0) {          i+=HtmlAnalyzer.INFO_LENS[info[i]];          iAll++;          continue;        }        int relFirst=info[i + HtmlAnalyzer.LINK_REL_FIRST];        int relLast=info[i + HtmlAnalyzer.LINK_REL_LAST];        if (relFirst < 0 || relLast <= relFirst) {          i+=HtmlAnalyzer.INFO_LENS[info[i]];          iAll++;          continue;        }        String rel=new String(orig,relFirst,relLast - relFirst,"UTF-8").toLowerCase();        if (!rel.equals("stylesheet")) {          i+=HtmlAnalyzer.INFO_LENS[info[i]];          iAll++;          continue;        }        int typeFirst=info[i + HtmlAnalyzer.LINK_TYPE_FIRST];        int typeLast=info[i + HtmlAnalyzer.LINK_TYPE_LAST];        String type="text/css";        if (0 <= typeFirst && typeFirst < typeLast)         type=new String(orig,typeFirst,typeLast - typeFirst,"UTF-8").toLowerCase();        if (!type.equals("text/css")) {          i+=HtmlAnalyzer.INFO_LENS[info[i]];          iAll++;          continue;        }        int mediaFirst=info[i + HtmlAnalyzer.LINK_MEDIA_FIRST];        int mediaLast=info[i + HtmlAnalyzer.LINK_MEDIA_LAST];        String media="all";        if (0 <= mediaFirst && mediaFirst < mediaLast)         media=new String(orig,mediaFirst,mediaLast - mediaFirst,"UTF-8").toLowerCase();        if (!media.equals("all") && !media.contains("screen")) {          i+=HtmlAnalyzer.INFO_LENS[info[i]];          iAll++;          continue;        }        String href=new String(orig,hrefFirst,hrefLast - hrefFirst,"UTF-8");        String validUrl=toValidUrl(href,context);        if (cache.isStateFull(validUrl,configData) || variant == CacheUtils.FORTH_VISIT_VARIANT || variant == CacheUtils.IE8_FORTH_VISIT_VARIANT || variant == CacheUtils.MOBILE_FORTH_VISIT_VARIANT || validUrl.contains("#")) {          i+=HtmlAnalyzer.INFO_LENS[info[i]];          iAll++;          continue;        }        allRsrcs[iAll]=checkRsrc(context,currentTime,href,validUrl,CssRsrc.class,rsrcsToLoad,backThreadLoadInfo,rsrcsLoadLock,rsrcsWaitLock,info[i + HtmlAnalyzer.LINK_IN_IE_COMMENT] == 1);      }      if (replace) {        if (allRsrcs[iAll] instanceof TempRsrc) {          TempRsrc tmpRsrc=(TempRsrc)allRsrcs[iAll];          tmpRsrc.isDuplicated=(dupInfo != 0);        } else         if (allRsrcs[iAll] != null) {          TempRsrc tmpRsrc=new TempRsrc();          tmpRsrc.replacer=(Rsrc)allRsrcs[iAll];          tmpRsrc.host=tmpRsrc.replacer.host;          tmpRsrc.url=tmpRsrc.replacer.url;          tmpRsrc.isDuplicated=(dupInfo != 0);          allRsrcs[iAll]=tmpRsrc;        }        iAll++;      }      i+=HtmlAnalyzer.INFO_LENS[info[i]];    }  }  if (backThreadLoadInfo.tmpRsrcs != null) {    while (true) {      try {        _blockingQueue.put(backThreadLoadInfo);        break;      } catch (      InterruptedException e) {        try {          Thread.sleep(1000);        } catch (        Exception exc) {        }      }    }synchronized (ServiceUtils.class) {      if (_backThread == null || !_backThread.isAlive()) {        _backThread=new BackThread("HtmlSpeedServiceUtils");        _backThread.start();      }    }  }  loadMissingRsrcsIntoCache(context,request.getProtocol(),request.getRemoteAddr(),rsrcsToLoad,rsrcsLoadLock,rsrcsWaitLock);  final int COUNTS_CSS=0;  final int COUNTS_LARGE_JS=1;  final int COUNTS_LARGE_IMG=2;  final int COUNTS_MEDIUM_JS=3;  final int COUNTS_MEDIUM_IMG=4;  final int COUNTS_SMALL_JS=5;  final int COUNTS_SMALL_IMG=6;  final int COUNTS_TINY_JS=7;  final int COUNTS_TINY_IMG=8;  final int COUNTS_LEN=9;  int countsAll=0;  int[] counts=new int[COUNTS_LEN];  for (int step=0; step < (!isCss && ((CacheUtils.FIRST_VISIT_VARIANT < variant && variant < CacheUtils.FORTH_VISIT_VARIANT) || (CacheUtils.IE8_FIRST_VISIT_VARIANT < variant && variant < CacheUtils.IE8_FORTH_VISIT_VARIANT) || (CacheUtils.MOBILE_FIRST_VISIT_VARIANT < variant && variant < CacheUtils.MOBILE_FORTH_VISIT_VARIANT)) ? 2 : 1); step++) {    if (step == 1) {      int noInlinedCount=0;      if (variant == CacheUtils.FIRST_PLUS_VISIT_VARIANT || variant == CacheUtils.IE8_FIRST_PLUS_VISIT_VARIANT || variant == CacheUtils.MOBILE_FIRST_PLUS_VISIT_VARIANT)       noInlinedCount=countsAll / 3; else       if (variant == CacheUtils.SECOND_VISIT_VARIANT || variant == CacheUtils.IE8_SECOND_VISIT_VARIANT || variant == CacheUtils.MOBILE_SECOND_VISIT_VARIANT)       noInlinedCount=countsAll / 3; else       if (variant == CacheUtils.THIRD_VISIT_VARIANT || variant == CacheUtils.IE8_THIRD_VISIT_VARIANT || variant == CacheUtils.MOBILE_THIRD_VISIT_VARIANT)       noInlinedCount=countsAll * 2 / 3;      for (int ii=0; ii < counts.length; ii++) {        if (noInlinedCount >= counts[ii]) {          noInlinedCount-=counts[ii];          counts[ii]=0;        } else {          counts[ii]-=noInlinedCount;          noInlinedCount=0;          break;        }      }    }    for (int a=0; a < allRsrcs.length; a++) {      if (allRsrcs[a] instanceof TempRsrc) {        TempRsrc tempRsrc=(TempRsrc)allRsrcs[a];        Rsrc replacer=tempRsrc.replacer;        if (replacer.versionUrl != null)         tempRsrc.isVersioned=true;        if (variant == CacheUtils.FORTH_VISIT_VARIANT || variant == CacheUtils.IE8_FORTH_VISIT_VARIANT || variant == CacheUtils.MOBILE_FORTH_VISIT_VARIANT) {        } else         if (replacer.origData == null) {        } else         if ((tempRsrc.isDuplicated && replacer.origData.length > 256) || tempRsrc.isStateFull || (replacer instanceof ImageRsrc && ((ImageRsrc)replacer).base64Data == null)|| ((isIE8 || isCss) && replacer instanceof ImageRsrc && ((ImageRsrc)replacer).base64Data.length > 32 * 1024)|| (replacer.origData.length >= configData.minHugeBuffer)|| (replacer.origData.length >= 8 * 1024 && isMobile)|| (isCss && configData.isNoInline(tempRsrc.url))) {          if (isCss)           noInline=true;        } else         if (replacer instanceof JsRsrc && !((JsRsrc)replacer).isInlinable) {        } else         if (replacer instanceof CssRsrc && !((CssRsrc)replacer).isInlinable) {        } else {          if (variant == CacheUtils.FIRST_VISIT_VARIANT || variant == CacheUtils.IE8_FIRST_VISIT_VARIANT || variant == CacheUtils.MOBILE_FIRST_VISIT_VARIANT || isCss) {            allRsrcs[a]=replacer;          } else           if (step == 0) {            countsAll++;            if (replacer instanceof CssRsrc) {              counts[COUNTS_CSS]++;            } else             if (replacer instanceof JsRsrc) {              if (replacer.origData.length >= configData.minLargeBuffer && replacer.origData.length < configData.minHugeBuffer)               counts[COUNTS_LARGE_JS]++; else               if (replacer.origData.length >= configData.minMediumBuffer)               counts[COUNTS_MEDIUM_JS]++; else               if (replacer.origData.length >= configData.minSmallBuffer)               counts[COUNTS_SMALL_JS]++; else               counts[COUNTS_TINY_JS]++;            } else             if (replacer instanceof ImageRsrc) {              if (replacer.origData.length >= configData.minLargeBuffer && replacer.origData.length < configData.minHugeBuffer)               counts[COUNTS_LARGE_IMG]++; else               if (replacer.origData.length >= configData.minMediumBuffer)               counts[COUNTS_MEDIUM_IMG]++; else               if (replacer.origData.length >= configData.minSmallBuffer)               counts[COUNTS_SMALL_IMG]++; else               counts[COUNTS_TINY_IMG]++;            }          } else {            if (replacer instanceof CssRsrc) {              if (counts[COUNTS_CSS]-- > 0)               allRsrcs[a]=replacer;            } else             if (replacer instanceof JsRsrc) {              if (replacer.origData.length >= configData.minHugeBuffer) {              } else               if (replacer.origData.length >= configData.minLargeBuffer) {                if (counts[COUNTS_LARGE_JS]-- > 0)                 allRsrcs[a]=replacer;              } else               if (replacer.origData.length >= configData.minMediumBuffer) {                if (counts[COUNTS_MEDIUM_JS]-- > 0)                 allRsrcs[a]=replacer;              } else               if (replacer.origData.length >= configData.minSmallBuffer) {                if (counts[COUNTS_SMALL_JS]-- > 0)                 allRsrcs[a]=replacer;              } else {                if (counts[COUNTS_TINY_JS]-- > 0)                 allRsrcs[a]=replacer;              }            } else             if (replacer instanceof ImageRsrc) {              if (replacer.origData.length >= configData.minHugeBuffer) {              } else               if (replacer.origData.length >= configData.minLargeBuffer) {                if (counts[COUNTS_LARGE_IMG]-- > 0 || variant == CacheUtils.FIRST_PLUS_VISIT_VARIANT || variant == CacheUtils.IE8_FIRST_PLUS_VISIT_VARIANT || variant == CacheUtils.MOBILE_FIRST_PLUS_VISIT_VARIANT)                 allRsrcs[a]=replacer;              } else               if (replacer.origData.length >= configData.minMediumBuffer) {                if (counts[COUNTS_MEDIUM_IMG]-- > 0 || variant == CacheUtils.FIRST_PLUS_VISIT_VARIANT || variant == CacheUtils.IE8_FIRST_PLUS_VISIT_VARIANT || variant == CacheUtils.MOBILE_FIRST_PLUS_VISIT_VARIANT)                 allRsrcs[a]=replacer;              } else               if (replacer.origData.length >= configData.minSmallBuffer) {                if (counts[COUNTS_SMALL_IMG]-- > 0 || variant == CacheUtils.FIRST_PLUS_VISIT_VARIANT || variant == CacheUtils.IE8_FIRST_PLUS_VISIT_VARIANT || variant == CacheUtils.MOBILE_FIRST_PLUS_VISIT_VARIANT)                 allRsrcs[a]=replacer;              } else {                if (counts[COUNTS_TINY_IMG]-- > 0 || variant == CacheUtils.FIRST_PLUS_VISIT_VARIANT || variant == CacheUtils.IE8_FIRST_PLUS_VISIT_VARIANT || variant == CacheUtils.MOBILE_FIRST_PLUS_VISIT_VARIANT)                 allRsrcs[a]=replacer;              }            } else {              allRsrcs[a]=replacer;            }          }        }      }      if (allRsrcs[a] instanceof TempRsrc)       Cdn.handleCdn((TempRsrc)allRsrcs[a],configData);    }  }  return noInline;}  }
class C{  public static <E>List<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9,E e10){  return new ImmutableCollections.ListN<E>(e1,e2,e3,e4,e5,e6,e7,e8,e9,e10);}  }
class C{  public void processSuccess(Response response,Request request){  socketDelegate.processSuccess(response,request);}  }
class C{  public boolean isSourceEmpty(){  return getResult.isSourceEmpty();}  }
class C{  public int nextInt(int n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive");  if ((n & -n) == n) {    int y=nextInt();    return (int)((n * (long)(y >>> 1)) >> 31);  }  int bits, val;  do {    int y=nextInt();    bits=(y >>> 1);    val=bits % n;  } while (bits - val + (n - 1) < 0);  return val;}  }
class C{  @Override public NonVolatileMemAllocator enableActiveGC(long timeout){  m_activegc=true;  m_gctimeout=timeout;  return this;}  }
class C{  protected void QName() throws javax.xml.transform.TransformerException {  if (lookahead(':',1)) {    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    nextToken();    consumeExpected(':');  } else {    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.EMPTY);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  }  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  nextToken();}  }
class C{  public boolean validate(ResponseHeaders networkResponse){  if (networkResponse.headers.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) {    return true;  }  if (lastModified != null && networkResponse.lastModified != null && networkResponse.lastModified.getTime() < lastModified.getTime()) {    return true;  }  return false;}  }
class C{  public static boolean operate(PageContext pc,String[] varNames){  int scope=VariableInterpreter.scopeString2Int(pc.ignoreScopes(),varNames[0]);  return _operate(pc,scope,KeyImpl.toKeyArray(varNames),scope == Scope.SCOPE_UNDEFINED ? 0 : 1);}  }
class C{  public void addTwoForTeamB(View v){  scoreTeamB=scoreTeamB + 2;  displayForTeamB(scoreTeamB);}  }
class C{  @Override protected void drawLegend(Graphics graphics,DataTable table,int legendColumn,int xOffset,int alpha){  Graphics2D g=(Graphics2D)graphics.create();  g.translate(xOffset,0);  List<Integer> columnIndices=new ArrayList<Integer>();  int index=0;  for (  Boolean column : columns) {    if (column) {      columnIndices.add(index);    }    ++index;  }  int currentX=MARGIN;  for (  Integer i : columnIndices) {    if (currentX > getWidth()) {      break;    }    String columnName=table.getColumnName(i);    if (columnName.length() > 16) {      columnName=columnName.substring(0,16) + "...";    }    Shape colorBullet=new Ellipse2D.Double(currentX,7,7.0d,7.0d);    Color color;    if (columnIndices.size() == 1) {      color=getColorProvider(true).getPointColor((double)i / (double)(1),alpha);    } else {      color=getColorProvider(true).getPointColor((double)i / (double)(columnIndices.size()),alpha);    }    color=new Color(color.getRed(),color.getGreen(),color.getBlue(),RectangleStyle.ALPHA);    g.setColor(color);    g.fill(colorBullet);    g.setColor(Color.black);    g.draw(colorBullet);    currentX+=12;    g.drawString(columnName,currentX,15);    Rectangle2D stringBounds=LABEL_FONT.getStringBounds(columnName,g.getFontRenderContext());    currentX+=stringBounds.getWidth() + 15;  }}  }
class C{  public static Map<String,Object> deletePartyContactMechPurpose(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_DELETE");  if (result.size() > 0)   return result;  String contactMechId=(String)context.get("contactMechId");  String contactMechPurposeTypeId=(String)context.get("contactMechPurposeTypeId");  Timestamp fromDate=(Timestamp)context.get("fromDate");  GenericValue pcmp=null;  try {    pcmp=EntityQuery.use(delegator).from("PartyContactMechPurpose").where("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId,"fromDate",fromDate).queryOne();    if (pcmp == null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_delete_purpose_from_contact_mechanism_not_found",locale));    }  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_delete_purpose_from_contact_mechanism_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  pcmp.set("thruDate",UtilDateTime.nowTimestamp());  try {    pcmp.store();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_delete_purpose_from_contact_mechanism_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  private String[] readEncoding(byte[] d){  byte[][] ary=readArray(d,"Encoding","def");  String res[]=new String[256];  for (int i=0; i < ary.length; i++) {    if (ary[i] != null) {      if (ary[i][0] == '/') {        res[i]=new String(ary[i]).substring(1);      } else {        res[i]=new String(ary[i]);      }    } else {      res[i]=null;    }  }  return res;}  }
class C{  protected void sendFunctionGroup1(){  commandStation.function0Through4Packet(address,getF0(),getF0Momentary(),getF1(),getF1Momentary(),getF2(),getF2Momentary(),getF3(),getF3Momentary(),getF4(),getF4Momentary());}  }
class C{  public int increment(int offset){  CharSequence txt=getText();  int i;  if (txt != null) {    try {      i=Integer.parseInt(txt.toString());    } catch (    NumberFormatException e) {      i=0;    }  } else {    i=0;  }  i=i + offset;  setText(String.valueOf(i));  return i;}  }
class C{  public void SelectAttributes(Instances data) throws Exception {  int[] attributeSet;  m_transformer=null;  m_attributeFilter=null;  m_trainInstances=data;  if (m_doXval == true && (m_ASEvaluator instanceof AttributeTransformer)) {    throw new Exception("Can't cross validate an attribute transformer.");  }  if (m_ASEvaluator instanceof SubsetEvaluator && m_searchMethod instanceof Ranker) {    throw new Exception(m_ASEvaluator.getClass().getName() + " must use a search method other than Ranker");  }  if (m_ASEvaluator instanceof AttributeEvaluator && !(m_searchMethod instanceof Ranker)) {    throw new Exception("AttributeEvaluators must use the Ranker search " + "method");  }  if (m_searchMethod instanceof RankedOutputSearch) {    m_doRank=((RankedOutputSearch)m_searchMethod).getGenerateRanking();  }  if (m_ASEvaluator instanceof UnsupervisedAttributeEvaluator || m_ASEvaluator instanceof UnsupervisedSubsetEvaluator) {  } else {    if (m_trainInstances.classIndex() < 0) {      m_trainInstances.setClassIndex(m_trainInstances.numAttributes() - 1);    }  }  m_ASEvaluator.buildEvaluator(m_trainInstances);  if (m_ASEvaluator instanceof AttributeTransformer) {    m_trainInstances=((AttributeTransformer)m_ASEvaluator).transformedHeader();    m_transformer=(AttributeTransformer)m_ASEvaluator;  }  int fieldWidth=(int)(Math.log(m_trainInstances.numAttributes()) + 1.0);  attributeSet=m_searchMethod.search(m_ASEvaluator,m_trainInstances);  try {    BeanInfo bi=Introspector.getBeanInfo(m_searchMethod.getClass());    PropertyDescriptor properties[];    properties=bi.getPropertyDescriptors();    for (    PropertyDescriptor propertie : properties) {      propertie.getDisplayName();      Method meth=propertie.getReadMethod();      Object retType=meth.getReturnType();      if (retType.equals(ASEvaluation.class)) {        Class<?> args[]={};        ASEvaluation tempEval=(ASEvaluation)(meth.invoke(m_searchMethod,(Object[])args));        if (tempEval instanceof AttributeTransformer) {          m_trainInstances=((AttributeTransformer)tempEval).transformedHeader();          m_transformer=(AttributeTransformer)tempEval;        }      }    }  } catch (  IntrospectionException ex) {    System.err.println("AttributeSelection: Couldn't " + "introspect");  }  attributeSet=m_ASEvaluator.postProcess(attributeSet);  if (!m_doRank) {    m_selectionResults.append(printSelectionResults());  }  if ((m_searchMethod instanceof RankedOutputSearch) && m_doRank == true) {    m_attributeRanking=((RankedOutputSearch)m_searchMethod).rankedAttributes();    m_selectionResults.append(printSelectionResults());    m_selectionResults.append("Ranked attributes:\n");    m_numToSelect=((RankedOutputSearch)m_searchMethod).getCalculatedNumToSelect();    int f_p=0;    int w_p=0;    for (int i=0; i < m_numToSelect; i++) {      double precision=(Math.abs(m_attributeRanking[i][1]) - (int)(Math.abs(m_attributeRanking[i][1])));      double intPart=(int)(Math.abs(m_attributeRanking[i][1]));      if (precision > 0) {        precision=Math.abs((Math.log(Math.abs(precision)) / Math.log(10))) + 3;      }      if (precision > f_p) {        f_p=(int)precision;      }      if (intPart == 0) {        if (w_p < 2) {          w_p=2;        }      } else       if ((Math.abs((Math.log(Math.abs(m_attributeRanking[i][1])) / Math.log(10))) + 1) > w_p) {        if (m_attributeRanking[i][1] > 0) {          w_p=(int)Math.abs((Math.log(Math.abs(m_attributeRanking[i][1])) / Math.log(10))) + 1;        }      }    }    for (int i=0; i < m_numToSelect; i++) {      m_selectionResults.append(Utils.doubleToString(m_attributeRanking[i][1],f_p + w_p + 1,f_p) + Utils.doubleToString((m_attributeRanking[i][0] + 1),fieldWidth + 1,0) + " "+ m_trainInstances.attribute((int)m_attributeRanking[i][0]).name()+ "\n");    }    if (m_trainInstances.classIndex() >= 0) {      if ((!(m_ASEvaluator instanceof UnsupervisedSubsetEvaluator) && !(m_ASEvaluator instanceof UnsupervisedAttributeEvaluator)) || m_ASEvaluator instanceof AttributeTransformer) {        m_selectedAttributeSet=new int[m_numToSelect + 1];        m_selectedAttributeSet[m_numToSelect]=m_trainInstances.classIndex();      } else {        m_selectedAttributeSet=new int[m_numToSelect];      }    } else {      m_selectedAttributeSet=new int[m_numToSelect];    }    m_selectionResults.append("\nSelected attributes: ");    for (int i=0; i < m_numToSelect; i++) {      m_selectedAttributeSet[i]=(int)m_attributeRanking[i][0];      if (i == m_numToSelect - 1) {        m_selectionResults.append(((int)m_attributeRanking[i][0] + 1) + " : " + (i + 1)+ "\n");      } else {        m_selectionResults.append(((int)m_attributeRanking[i][0] + 1));        m_selectionResults.append(",");      }    }  } else {    if ((!(m_ASEvaluator instanceof UnsupervisedSubsetEvaluator) && !(m_ASEvaluator instanceof UnsupervisedAttributeEvaluator)) || m_trainInstances.classIndex() >= 0) {      m_selectedAttributeSet=new int[attributeSet.length + 1];      m_selectedAttributeSet[attributeSet.length]=m_trainInstances.classIndex();    } else {      m_selectedAttributeSet=new int[attributeSet.length];    }    for (int i=0; i < attributeSet.length; i++) {      m_selectedAttributeSet[i]=attributeSet[i];    }    m_selectionResults.append("Selected attributes: ");    for (int i=0; i < attributeSet.length; i++) {      if (i == (attributeSet.length - 1)) {        m_selectionResults.append((attributeSet[i] + 1) + " : " + attributeSet.length+ "\n");      } else {        m_selectionResults.append((attributeSet[i] + 1) + ",");      }    }    for (    int element : attributeSet) {      m_selectionResults.append("                     " + m_trainInstances.attribute(element).name() + "\n");    }  }  if (m_doXval == true) {    m_selectionResults.append(CrossValidateAttributes());  }  if (m_selectedAttributeSet != null && !m_doXval) {    m_attributeFilter=new Remove();    m_attributeFilter.setAttributeIndicesArray(m_selectedAttributeSet);    m_attributeFilter.setInvertSelection(true);    m_attributeFilter.setInputFormat(m_trainInstances);  }  m_trainInstances=new Instances(m_trainInstances,0);}  }
class C{  boolean isTerminated(){synchronized (paragraphs) {    for (    Paragraph p : paragraphs) {      if (!p.isTerminated()) {        return false;      }    }  }  return true;}  }
class C{  public static void main(String[] args) throws Exception {  String property_file=System.getProperty(CONFIG_FILE_LOCATION_KEY,null);  String etlJobNameString=null;  int refId=0;  long whEtlExecId=0;  Properties props=new Properties();  try (InputStream propFile=new FileInputStream(property_file)){    props.load(propFile);    etlJobNameString=props.getProperty(JOB_NAME_KEY);    refId=Integer.valueOf(props.getProperty(REF_ID_KEY));    whEtlExecId=Integer.valueOf(props.getProperty(WH_ETL_EXEC_ID_KEY));    System.setProperty(LOGGER_CONTEXT_NAME_KEY,etlJobNameString);  } catch (  IOException e) {    e.printStackTrace();    System.exit(1);  }  EtlJobName etlJobName=EtlJobName.valueOf(etlJobNameString);  EtlJob etlJob=EtlJobFactory.getEtlJob(etlJobName,refId,whEtlExecId,props);  try {    etlJob.run();  } catch (  Exception e) {    StringWriter sw=new StringWriter();    PrintWriter pw=new PrintWriter(sw);    e.printStackTrace(pw);    logger.error(sw.toString());    System.exit(1);  }  logger.info("whEtlExecId=" + whEtlExecId + " finished.");  System.exit(0);}  }
class C{  public static void readyGoForResult(Fragment fragment,Class<?> className,int requestCode){  fragment.startActivityForResult(getIntent(fragment.getActivity(),className),requestCode);}  }
class C{  public void addObject(String namespace,String name,Class clazz,PluggableObjectType type,Serializable configuration){  Map<String,Pair<Class,PluggableObjectEntry>> namespaceMap=pluggables.get(namespace);  if (namespaceMap == null) {    namespaceMap=new HashMap<String,Pair<Class,PluggableObjectEntry>>();    pluggables.put(namespace,namespaceMap);  }  namespaceMap.put(name,new Pair<Class,PluggableObjectEntry>(clazz,new PluggableObjectEntry(type,configuration)));}  }
class C{  public void draw(Graphics2D g){  checkDrawingMode(g);}  }
class C{  public String removeMask(String mask,String value){  if (mask == null || value == null) {    return null;  }  value=applyMask(mask,value);  String newValue="";  Integer isInMask=0;  Integer index=0;  for (Integer i=0; i < mask.length(); i++) {    Character maskCharacter=mask.charAt(i);    if (maskCharacter.equals('}')) {      isInMask--;    } else     if (maskCharacter.equals('{')) {      isInMask++;    } else {      if (isInMask == 2) {        if (index >= value.length()) {          break;        }        newValue+=value.charAt(index);      }      index++;    }  }  return newValue;}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public void update(List<Race> races){  if (currentRace == null) {    return;  }  if (races.contains(currentRace)) {    setRace(races.get(races.indexOf(currentRace)));  }}  }
class C{  @Override public Project updateProject(String workspace,String path,ProjectConfig newConfig,String newVisibility) throws ForbiddenException, ServerException, NotFoundException, ConflictException, IOException {  Project project=getProject(workspace,path);  String oldProjectType=null;  List<String> oldMixinTypes=new ArrayList<>();  if (project == null) {    FolderEntry projectsRoot=getProjectsRoot(workspace);    VirtualFileEntry child=projectsRoot.getChild(path);    if (child != null && child.isFolder() && child.getParent().isRoot()) {      project=new Project((FolderEntry)child,this);    } else {      throw new NotFoundException(String.format("Project '%s' doesn't exist in workspace '%s'.",path,workspace));    }  } else {    try {      ProjectConfig config=project.getConfig();      oldProjectType=config.getTypeId();      oldMixinTypes=config.getMixinTypes();    } catch (    ProjectTypeConstraintException|ValueStorageException e) {      LOG.warn(e.getMessage());    }  }  if (newVisibility != null && !newVisibility.isEmpty()) {    project.setVisibility(newVisibility);  }  project.updateConfig(newConfig);  if (!newConfig.getTypeId().equals(oldProjectType)) {    ProjectTypeChangedHandler projectTypeChangedHandler=handlers.getProjectTypeChangedHandler(newConfig.getTypeId());    if (projectTypeChangedHandler != null) {      projectTypeChangedHandler.onProjectTypeChanged(project.getBaseFolder());    }  }  List<String> mixinTypes=firstNonNull(newConfig.getMixinTypes(),Collections.<String>emptyList());  for (  String mixin : mixinTypes) {    if (!oldMixinTypes.contains(mixin)) {      ProjectTypeChangedHandler projectTypeChangedHandler=handlers.getProjectTypeChangedHandler(mixin);      if (projectTypeChangedHandler != null) {        projectTypeChangedHandler.onProjectTypeChanged(project.getBaseFolder());      }    }  }  return project;}  }
class C{  public static Type fromString(String typeString){  for (  Type t : Type.values()) {    if (typeString.equals(t.value)) {      return t;    }  }  return null;}  }
class C{  private CSVWriter(char separator){  this(separator,DEFAULT_QUOTE_CHARACTER);}  }
class C{  @Override public FactoryDto createFactory(@NotNull final Map<String,String> factoryParameters) throws BadRequestException {  final GitlabUrl gitlabUrl=gitlabUrlParser.parse(factoryParameters.get("url"));  FactoryDto factory=urlFactoryBuilder.createFactory(CreateFactoryParams.create().codenvyJsonFileLocation(gitlabUrl.codenvyFactoryJsonFileLocation()));  if (factory.getWorkspace() == null) {    factory.setWorkspace(urlFactoryBuilder.buildWorkspaceConfig(gitlabUrl.repository(),gitlabUrl.username(),gitlabUrl.codenvyDockerFileLocation()));  }  ProjectConfigDto projectConfigDto=newDto(ProjectConfigDto.class).withSource(gitlabSourceStorageBuilder.build(gitlabUrl)).withName(gitlabUrl.repository()).withType("blank").withPath("/".concat(gitlabUrl.repository()));  return projectConfigDtoMerger.merge(factory,projectConfigDto);}  }
class C{  public GF2Vector extractLeftVector(int k){  if (k > length) {    throw new ArithmeticException("invalid length");  }  if (k == length) {    return new GF2Vector(this);  }  GF2Vector result=new GF2Vector(k);  int q=k >> 5;  int r=k & 0x1f;  System.arraycopy(v,0,result.v,0,q);  if (r != 0) {    result.v[q]=v[q] & ((1 << r) - 1);  }  return result;}  }
class C{  public T caseExpression(Expression object){  return null;}  }
class C{  public static boolean isClassClassNodeWrappingConcreteType(ClassNode classNode){  GenericsType[] genericsTypes=classNode.getGenericsTypes();  return CLASS_Type.equals(classNode) && classNode.isUsingGenerics() && genericsTypes != null && !genericsTypes[0].isPlaceholder() && !genericsTypes[0].isWildcard();}  }
class C{  protected void validatePair(CandidatePair validPair){  Component parentComponent=validPair.getParentComponent();  IceMediaStream parentStream=parentComponent.getParentStream();  parentStream.addToValidList(validPair);}  }
class C{  public int syncContentBitmaps(){  List<Bitmap> bitmaps=new ArrayList<>();  ViewGroup parent=(ViewGroup)this.getParent();  int count=parent == null ? 0 : parent.getChildCount() - 1;  for (int i=0; i < count; i++) {    View view=parent.getChildAt(i);    if (view instanceof ViewGroup) {      ViewGroup group=(ViewGroup)view;      if (group.getChildCount() == 1) {        view=group.getChildAt(0);      }    }    bitmaps.add(captureView(view));  }  contentBitmaps=bitmaps;  return count;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  static public PVector mult(PVector v,float n,PVector target){  if (target == null) {    target=new PVector(v.x * n,v.y * n,v.z * n);  } else {    target.set(v.x * n,v.y * n,v.z * n);  }  return target;}  }
class C{  static Class<?> loadClass(String className,Class<?> callingClass) throws ClassNotFoundException {  try {    ClassLoader cl=Thread.currentThread().getContextClassLoader();    if (cl != null) {      return cl.loadClass(className);    }  } catch (  ClassNotFoundException e) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,e.getMessage(),e);    }  }  return loadClass2(className,callingClass);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.942 -0500",hash_original_method="99CE1AB60FDF93828647C541E1949F71",hash_generated_method="5DFCE93F99CC30C5C7222F42DC2D6BD3") public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (!isProcessed() && getBeginningBalance().compareTo(Env.ZERO) == 0) {    MBankAccount ba=getBankAccount();    ba.load(get_TrxName());    setBeginningBalance(ba.getCurrentBalance());  }  setEndingBalance(getBeginningBalance().add(getStatementDifference()));  return true;}  }
class C{  public void removeChild(String key){  children.remove(key);}  }
class C{  public void notifyUnRegistration(RcsServiceRegistration.ReasonCode reasonCode){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.broadcastServiceUnRegistered(reasonCode);  }}  }
class C{  public void check(SnmpValue x,long var,Object data) throws SnmpStatusException {switch ((int)var) {case 23:{      throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);    }case 22:{    throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);  }case 21:{  throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}case 9:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 20:{throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}case 8:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 7:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 6:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 5:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 4:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 3:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 12:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 11:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 2:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 1:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 10:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);default :throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}}  }
class C{  private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException {  s.defaultWriteObject();}  }
class C{  private static String formatParagraph(String paragraph,int[] offset,String prefix,String lineDelimiter,int margin){  LineBreakIterator iterator=new LineBreakIterator(paragraph);  StringBuilder paragraphBuffer=new StringBuilder();  StringBuilder lineBuffer=new StringBuilder();  StringBuilder whiteSpaceBuffer=new StringBuilder();  int index=offset[0];  int indexBuffer=-1;  if (lineDelimiter == null) {    lineDelimiter="";  }  for (int start=iterator.first(), end=iterator.next(); end != BreakIterator.DONE; start=end, end=iterator.next()) {    String word=paragraph.substring(start,end);    if (word.trim().length() == 0) {      whiteSpaceBuffer.append(word);    } else     if (lineBuffer.length() == 0) {      lineBuffer.append(prefix);      lineBuffer.append(whiteSpaceBuffer.toString());      lineBuffer.append(word);    } else {      String line=lineBuffer.toString() + whiteSpaceBuffer.toString() + word;      if (calculateDisplayedWidth(line) > margin) {        paragraphBuffer.append(lineBuffer.toString());        paragraphBuffer.append(lineDelimiter);        lineBuffer.setLength(0);        lineBuffer.append(prefix);        lineBuffer.append(word);        if (indexBuffer != -1) {          offset[0]=indexBuffer;          if (whiteSpaceBuffer.length() != 0 && index < start && index >= start - whiteSpaceBuffer.length()) {            offset[0]-=(index - (start - whiteSpaceBuffer.length()));          }          indexBuffer=-1;        }        whiteSpaceBuffer.setLength(0);      } else {        lineBuffer.append(whiteSpaceBuffer.toString());        lineBuffer.append(word);        whiteSpaceBuffer.setLength(0);      }    }    if (index >= start && index < end) {      indexBuffer=paragraphBuffer.length() + lineBuffer.length() + (index - start);      if (word.trim().length() != 0) {        indexBuffer-=word.length();      }    }  }  paragraphBuffer.append(lineBuffer.toString());  paragraphBuffer.append(lineDelimiter);  if (indexBuffer != -1) {    offset[0]=indexBuffer;  } else   if (offset[0] == paragraph.length()) {    offset[0]=paragraphBuffer.length() - lineDelimiter.length();  }  return paragraphBuffer.toString();}  }
class C{  public boolean isSocketConnect(){  if (mSocket == null)   return false;  return mSocket.connected();}  }
class C{  DCBRecord prepareDCMap(final Object[] dcbData2,DCBRecord dcbRecord,final Map<String,BigDecimal> demands,final Map<String,BigDecimal> collections,final Map<String,BigDecimal> rebates,final EgDemand dmd,final List<String> fieldNames){  if (dcbData2 != null && dmd != null) {    final String reason=getReason(dcbData2,fieldNames);    if (reason != null && demands != null && demands.containsKey(reason)) {      demands.put(reason,demands.get(reason).add(new BigDecimal(dcbData2[1].toString())));      collections.put(reason,collections.get(reason).add(new BigDecimal(dcbData2[2].toString())));      rebates.put(reason,rebates.get(reason).add(new BigDecimal(dcbData2[5].toString())));    }    dcbRecord=new DCBRecord(demands,collections,rebates);  }  return dcbRecord;}  }
class C{  public final String toString(){  return description;}  }
class C{  public static AVList wmsGetParamsFromCapsDoc(WMSCapabilities caps,AVList params){  if (caps == null) {    String message=Logging.getMessage("nullValue.WMSCapabilities");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (params == null)   params=new AVListImpl();  try {    DataConfigurationUtils.getWMSLayerConfigParams(caps,formatOrderPreference,params);  } catch (  IllegalArgumentException e) {    String message=Logging.getMessage("WMS.MissingLayerParameters");    Logging.logger().log(java.util.logging.Level.SEVERE,message,e);    throw new IllegalArgumentException(message,e);  }catch (  WWRuntimeException e) {    String message=Logging.getMessage("WMS.MissingCapabilityValues");    Logging.logger().log(java.util.logging.Level.SEVERE,message,e);    throw new IllegalArgumentException(message,e);  }  setFallbacks(params);  params.setValue(AVKey.WMS_VERSION,caps.getVersion());  params.setValue(AVKey.TILE_URL_BUILDER,new URLBuilder(params));  params.setValue(AVKey.USE_TRANSPARENT_TEXTURES,true);  return params;}  }
class C{  public boolean isConfigValid() throws RcsGenericException {  try {    return mIConfig.isConfigValid();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  @Override public void execute(Runnable command){  executor.execute(command);}  }
class C{  private void testUpdateBusinessObjectDataStatus(List<String> subPartitionValues,boolean useSsl) throws IOException, JAXBException, URISyntaxException {  dataBridgeWebClient.regServerAccessParamsDto.setUseSsl(useSsl);  BusinessObjectDataKey businessObjectDataKey=new BusinessObjectDataKey();  businessObjectDataKey.setSubPartitionValues(subPartitionValues);  String businessObjectDataStatus="testBusinessObjectDataStatus";  BusinessObjectDataStatusUpdateResponse businessObjectDataStatusUpdateResponse=dataBridgeWebClient.updateBusinessObjectDataStatus(businessObjectDataKey,businessObjectDataStatus);  assertNotNull("businessObjectDataStatusUpdateResponse",businessObjectDataStatusUpdateResponse);}  }
class C{  private void initPOReview(){  poReview.setTitle("title");  poReview.setComment("comment");  poReview.setRating(1);}  }
class C{  public static boolean isDrawableImage(String imagePath){  return imagePath.startsWith("@drawable/");}  }
class C{  public Builder txId(Long txId){  this.innerTxId=txId;  return this;}  }
class C{  byte[] generateSecureRandomBytes(int size){  SecureRandom secureRandom=new SecureRandom();  byte[] randomBytes=new byte[size];  secureRandom.nextBytes(randomBytes);  return randomBytes;}  }
class C{  protected ShootDontShoot(List<Target> targets,Random rng,List<Target> shootTargets,List<Target> dontShootTargets){  this(targets);  this.rng=rng;  this.shootTargets=shootTargets;  this.dontShootTargets=dontShootTargets;}  }
class C{  public synchronized void update(Object value,boolean forceToDisk) throws IOException {  if (log == null) {    throw new IOException("log is inaccessible, " + "it may have been corrupted or closed");  }  long entryStart=log.getFilePointer();  boolean spansBoundary=log.checkSpansBoundary(entryStart);  writeInt(log,spansBoundary ? 1 << 31 : 0);  try {    handler.writeUpdate(new LogOutputStream(log),value);  } catch (  IOException e) {    throw e;  }catch (  Exception e) {    throw (IOException)new IOException("write update failed").initCause(e);  }  log.sync();  long entryEnd=log.getFilePointer();  int updateLen=(int)((entryEnd - entryStart) - intBytes);  log.seek(entryStart);  if (spansBoundary) {    writeInt(log,updateLen | 1 << 31);    log.sync();    log.seek(entryStart);    log.writeByte(updateLen >> 24);    log.sync();  } else {    writeInt(log,updateLen);    log.sync();  }  log.seek(entryEnd);  logBytes=entryEnd;  lastLog=System.currentTimeMillis();  logEntries++;}  }
class C{  @Deprecated @Override public Editor edit() throws InstantiationError {  if (mEditor != null) {    return mEditor;  }  if (mSharedPreferences == null) {    throw new InstantiationError("\n ======================================== \nError : " + "Do not call " + tag + "'s `edit()`."+ "\n This method is not supported directly."+ " \n ======================================== \n");  }  mEditor=mSharedPreferences.edit();  return mEditor;}  }
class C{  static public Map<String,Object> asMap(final Object... nameValuePairs){  if (nameValuePairs.length % 2 != 0)   throw new IllegalArgumentException();  final Map<String,Object> rslt=new LinkedHashMap<String,Object>(nameValuePairs.length / 2);  for (int i=0; i < nameValuePairs.length; i+=2) {    rslt.put((String)nameValuePairs[i],nameValuePairs[i + 1]);  }  return rslt;}  }
class C{  public boolean isValidateGCFinAccount(Delegator delegator){  try {    GenericValue giftCertSettings=getGiftCertSettingFromStore(delegator);    if (giftCertSettings != null) {      if ("Y".equals(giftCertSettings.getString("validateGCFinAcct"))) {        return true;      } else {        return false;      }    } else {      Debug.logWarning("No product store gift certificate settings found for store [" + getProductStoreId() + "]",module);      return false;    }  } catch (  GenericEntityException ex) {    Debug.logError("Error checking if store requires pin number for GC: " + ex.getMessage(),module);    return false;  }}  }
class C{  public T classAttr(String value){  return attr("class",value);}  }
class C{  public boolean add(StateMachineInterceptor<S,E> interceptor){  return interceptors.add(interceptor);}  }
class C{  public UmpleFactoryImpl(){  super();}  }
class C{  public static void multiply(int[] n1,int d,int[] result){  int[] n2=new int[n1.length];  n2[n2.length - 1]=d;  multiply(n2,n1,result);}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public void testDynamicRepeatedMessageNull() throws Exception {  Descriptors.Descriptor descriptor=TestRequired.getDescriptor();  DynamicMessage result=DynamicMessage.newBuilder(TestAllTypes.getDescriptor()).mergeFrom(DynamicMessage.newBuilder(MERGE_SOURCE).build()).build();  assertTrue(result.getField(result.getDescriptorForType().findFieldByName("repeated_foreign_message")) instanceof List<?>);  assertEquals(result.getRepeatedFieldCount(result.getDescriptorForType().findFieldByName("repeated_foreign_message")),0);}  }
class C{  public URL(String protocol,String host,int port,String file,URLStreamHandler handler) throws MalformedURLException {  if (port < -1) {    throw new MalformedURLException("port < -1: " + port);  }  if (protocol == null) {    throw new NullPointerException("protocol == null");  }  if (host != null && host.contains(":") && host.charAt(0) != '[') {    host="[" + host + "]";  }  this.protocol=protocol;  this.host=host;  this.port=port;  file=UrlUtils.authoritySafePath(host,file);  int hash=file.indexOf("#");  if (hash != -1) {    this.file=file.substring(0,hash);    this.ref=file.substring(hash + 1);  } else {    this.file=file;  }  fixURL(false);  if (handler == null) {    setupStreamHandler();    if (streamHandler == null) {      throw new MalformedURLException("Unknown protocol: " + protocol);    }  } else {    streamHandler=handler;  }}  }
class C{  private void createTable(String table){  db.execSQL("CREATE TABLE " + table + " (test INTEGER)");}  }
class C{  private Object _deserializeQuery(Element recordset) throws ConverterException {  try {    Query query=new QueryImpl(lucee.runtime.type.util.ListUtil.listToArray(recordset.getAttribute("fieldNames"),','),Caster.toIntValue(recordset.getAttribute("rowCount")),"query");    NodeList list=recordset.getChildNodes();    int len=list.getLength();    for (int i=0; i < len; i++) {      Node node=list.item(i);      if (node instanceof Element) {        _deserializeQueryField(query,(Element)node);      }    }    return query;  } catch (  PageException e) {    throw toConverterException(e);  }}  }
class C{  public static void testIms(){  if (!isImsConnected()) {    throw new ServerApiServiceNotRegisteredException("Core is not connected to IMS");  }}  }
class C{  public <W extends String,V extends List>Object longTypeParamList(W param1,V param2){  return null;}  }
class C{  public AsymmetricCipherKeyPair generateKeyPair(){  BigInteger n=params.getN();  int nBitLength=n.bitLength();  BigInteger d;  do {    d=new BigInteger(nBitLength,random);  } while (d.equals(ZERO) || (d.compareTo(n) >= 0));  ECPoint Q=params.getG().multiply(d);  return new AsymmetricCipherKeyPair(new ECPublicKeyParameters(Q,params),new ECPrivateKeyParameters(d,params));}  }
class C{  public void optimize(TupleExpr tupleExpr,Dataset dataset,BindingSet bindings){  tupleExpr.visit(new JoinVisitor());}  }
class C{  @Override public void run(){  amIActive=true;  String streamsLinkIDHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsLinkIDHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsLinkIDHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streamID=new WhiteboxRaster(streamsLinkIDHeader,"r");    int rows=streamID.getNumberRows();    int cols=streamID.getNumberColumns();    double noData=streamID.getNoDataValue();    double gridResX=streamID.getCellSizeX();    double gridResY=streamID.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double maxLinkID=streamID.getMaximumValue();    double[] linkLengths=new double[(int)maxLinkID + 1];    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsLinkIDHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    byte numNeighbouringStreamCells=0;    double currentID=0;    double linkLength=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streamID.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streamID.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            linkLength=0;            currentID=streamID.getValue(y,x);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                linkLength+=gridLengths[c];                x+=dX[c];                y+=dY[c];                if (streamID.getValue(y,x) != currentID) {                  linkLengths[(int)(currentID)]=linkLength;                  currentID=streamID.getValue(y,x);                  if (currentID != noData) {                    linkLength=0;                    if (linkLengths[(int)currentID] > 0) {                      flag=false;                    }                  } else {                    flag=false;                  }                }              } else {                linkLengths[(int)currentID]=linkLength;                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streamID.getValue(row,col) > 0) {          currentID=streamID.getValue(row,col);          output.setValue(row,col,linkLengths[(int)currentID]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streamID.close();    output.close();    returnData(outputHeader);    String retData="Stream Link Length Output\n";    for (i=1; i <= maxLinkID; i++) {      retData=retData + i + "\t"+ linkLengths[i]+ "\n";    }    returnData(retData);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public PairThisDeviceDialog(java.awt.Frame parent) throws Exception {  super(parent,true);  loadDeviceList();  initComponents(0);  setDeviceList();  QRCodeProcessor proc=new QRCodeProcessor();  proc.addSquareCodeListener(this);  try {    if (camLifeViewPanel instanceof OpenCVWebCam) {      webCam=(OpenCVWebCam)camLifeViewPanel;      webCam.setImageProcessor(proc);      webCam.start();    }  } catch (  Exception e) {    logger.warn("PairThisDeviceDialog : Failed to load webcam. This might not be a problem. Thrown exception: ",e);  }  setLocationRelativeTo(null);}  }
class C{  public double addEnergyToVehicleBattery(double energyChargeInJoule){  if (!ignoreOverCharging) {    socInJoules+=energyChargeInJoule;    if (!MathLib.equals(socInJoules,getUsableBatteryCapacityInJoules(),overchargingErrorMargin * 100) && socInJoules > getUsableBatteryCapacityInJoules()) {      DebugLib.stopSystemAndReportInconsistency("the car has been overcharged soc(" + socInJoules + ") > battery capacity ("+ getUsableBatteryCapacityInJoules()+ ")");    }  }  return energyChargeInJoule;}  }
class C{  public void removeStar(int id){  starList.remove(id);}  }
class C{  public int memberOf(){  return theMemberOf;}  }
class C{  public OutputProperties(Properties defaults){  m_properties=new Properties(defaults);}  }
class C{  public long size(){  return length;}  }
class C{  private int decodePce(MPEG4AudioConfig m4ac,int[][] layoutMap){  br.skip(2);  int samplingIndex=br.read(4);  if (m4ac.samplingIndex != samplingIndex) {    log.warn(String.format("Sample rate index in program config element does not match the sample rate index configured by the container"));  }  int numFront=br.read(4);  int numSide=br.read(4);  int numBack=br.read(4);  int numLfe=br.read(2);  int numAssocData=br.read(3);  int numCc=br.read(4);  if (br.readBool()) {    br.skip(4);  }  if (br.readBool()) {    br.skip(4);  }  if (br.readBool()) {    br.skip(3);  }  if (br.getBitsLeft() < 4 * (numFront + numSide + numBack+ numLfe+ numAssocData+ numCc)) {    log.error(String.format("decode_pce: overread error"));    return AAC_ERROR;  }  decodeChannelMap(layoutMap,0,AAC_CHANNEL_FRONT,numFront);  int tags=numFront;  decodeChannelMap(layoutMap,tags,AAC_CHANNEL_SIDE,numSide);  tags+=numSide;  decodeChannelMap(layoutMap,tags,AAC_CHANNEL_BACK,numBack);  tags+=numBack;  decodeChannelMap(layoutMap,tags,AAC_CHANNEL_LFE,numLfe);  tags+=numLfe;  br.skip(4 * numAssocData);  decodeChannelMap(layoutMap,tags,AAC_CHANNEL_CC,numCc);  tags+=numCc;  br.byteAlign();  int commentLen=br.read(8) * 8;  if (br.getBitsLeft() < commentLen) {    log.error(String.format("decode_pce: overread error"));    return AAC_ERROR;  }  br.skip(commentLen);  return tags;}  }
class C{  public CompletableFuture<Void> write(Iterable<EventData> events){  if (isRolledBack) {    throw new IllegalStateException("Cannot write to a rolled-back transaction");  } else   if (isCommitted) {    throw new IllegalStateException("Transaction is already committed");  } else {    return transactionManager.write(this,events);  }}  }
class C{  private int readChunkLength() throws IOException {  int length=0;  int ch;  ReadStream is=_next;  for (ch=is.read(); ch == ' ' || ch == '\t' || ch == '\r' || ch == '\n'; ch=is.read()) {  }  for (; ch > 0 && ch != '\r' && ch != '\n'; ch=is.read()) {    if ('0' <= ch && ch <= '9')     length=16 * length + ch - '0'; else     if ('a' <= ch && ch <= 'f')     length=16 * length + ch - 'a' + 10; else     if ('A' <= ch && ch <= 'F')     length=16 * length + ch - 'A' + 10; else     if (ch == ' ' || ch == '\t') {    } else {      StringBuilder sb=new StringBuilder();      sb.append((char)ch);      for (int ch1=is.read(); ch1 >= 0 && ch1 != '\r' && ch1 != '\n'; ch1=is.read()) {        sb.append((char)ch1);      }      throw new IOException("HTTP/1.1 protocol error: bad chunk at" + " '" + sb + "'"+ " 0x"+ Integer.toHexString(ch)+ " length="+ length);    }  }  if (ch == '\r')   ch=is.read();  return length;}  }
class C{  public void askPublishPermissions(LoginCallback lc){  throw new RuntimeException("Native facebook unsupported");}  }
class C{  public long loadLong(Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0L;}  }
class C{  public void addListener(final SelectionListener listener1){  this.listener=listener1;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=enumToVector(super.listOptions());  result.addElement(new Option("\tThe number of attributes (default " + defaultNumAttributes() + ").","a",1,"-a <num>"));  result.addElement(new Option("\tThe number of classes (default " + defaultNumClasses() + ")","c",1,"-c <num>"));  result.add(new Option("\tThe number of centroids to use. (default " + defaultNumCentroids() + ")","C",1,"-C <num>"));  return result.elements();}  }
class C{  public static InsnList loadLocals(MarkerType markerType,StorageVariables storageVars,Frame<BasicValue> frame){  Validate.notNull(markerType);  Validate.notNull(storageVars);  Validate.notNull(frame);  Variable intsVar=storageVars.getIntStorageVar();  Variable floatsVar=storageVars.getFloatStorageVar();  Variable longsVar=storageVars.getLongStorageVar();  Variable doublesVar=storageVars.getDoubleStorageVar();  Variable objectsVar=storageVars.getObjectStorageVar();  int intsCounter=0;  int floatsCounter=0;  int longsCounter=0;  int doublesCounter=0;  int objectsCounter=0;  InsnList ret=new InsnList();  ret.add(debugMarker(markerType,"Loading locals"));  for (int i=0; i < frame.getLocals(); i++) {    BasicValue basicValue=frame.getLocal(i);    Type type=basicValue.getType();    if (type == null) {      ret.add(debugMarker(markerType,"Skipping uninitialized value at " + i));      continue;    }    if (type.getSort() == Type.OBJECT && "Lnull;".equals(type.getDescriptor())) {      ret.add(debugMarker(markerType,"Putting null value at " + i));      ret.add(new InsnNode(Opcodes.ACONST_NULL));      ret.add(new VarInsnNode(Opcodes.ASTORE,i));      continue;    }switch (type.getSort()) {case Type.BOOLEAN:case Type.BYTE:case Type.SHORT:case Type.CHAR:case Type.INT:      ret.add(debugMarker(markerType,"Loading int to LVT index " + i + " from storage index "+ intsCounter));    ret.add(new VarInsnNode(Opcodes.ALOAD,intsVar.getIndex()));  ret.add(new LdcInsnNode(intsCounter));ret.add(new InsnNode(Opcodes.IALOAD));ret.add(new VarInsnNode(Opcodes.ISTORE,i));intsCounter++;break;case Type.FLOAT:ret.add(debugMarker(markerType,"Loading float to LVT index " + i + " from storage index "+ floatsCounter));ret.add(new VarInsnNode(Opcodes.ALOAD,floatsVar.getIndex()));ret.add(new LdcInsnNode(floatsCounter));ret.add(new InsnNode(Opcodes.FALOAD));ret.add(new VarInsnNode(Opcodes.FSTORE,i));floatsCounter++;break;case Type.LONG:ret.add(debugMarker(markerType,"Loading long to LVT index " + i + " from storage index "+ longsCounter));ret.add(new VarInsnNode(Opcodes.ALOAD,longsVar.getIndex()));ret.add(new LdcInsnNode(longsCounter));ret.add(new InsnNode(Opcodes.LALOAD));ret.add(new VarInsnNode(Opcodes.LSTORE,i));longsCounter++;break;case Type.DOUBLE:ret.add(debugMarker(markerType,"Loading double to LVT index " + i + " from storage index "+ doublesCounter));ret.add(new VarInsnNode(Opcodes.ALOAD,doublesVar.getIndex()));ret.add(new LdcInsnNode(doublesCounter));ret.add(new InsnNode(Opcodes.DALOAD));ret.add(new VarInsnNode(Opcodes.DSTORE,i));doublesCounter++;break;case Type.ARRAY:case Type.OBJECT:ret.add(debugMarker(markerType,"Loading object to LVT index " + i + " from storage index "+ objectsCounter));ret.add(new VarInsnNode(Opcodes.ALOAD,objectsVar.getIndex()));ret.add(new LdcInsnNode(objectsCounter));ret.add(new InsnNode(Opcodes.AALOAD));ret.add(new TypeInsnNode(Opcodes.CHECKCAST,basicValue.getType().getInternalName()));ret.add(new VarInsnNode(Opcodes.ASTORE,i));objectsCounter++;break;case Type.METHOD:case Type.VOID:default :throw new IllegalStateException();}}return ret;}  }
class C{  public boolean wasCreated(){  return mWasCreated;}  }
class C{  private int readAnnotationTarget(final Context context,int u){  int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:    target&=0xFFFF0000;  u+=2;break;case 0x13:case 0x14:case 0x15:target&=0xFF000000;u+=1;break;case 0x40:case 0x41:{target&=0xFF000000;int n=readUnsignedShort(u + 1);context.start=new Label[n];context.end=new Label[n];context.index=new int[n];u+=3;for (int i=0; i < n; ++i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);context.start[i]=readLabel(start,context.labels);context.end[i]=readLabel(start + length,context.labels);context.index[i]=readUnsignedShort(u + 4);u+=6;}break;}case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:target&=0xFF0000FF;u+=4;break;default :target&=(target >>> 24) < 0x43 ? 0xFFFFFF00 : 0xFF000000;u+=3;break;}int pathLength=readByte(u);context.typeRef=target;context.typePath=pathLength == 0 ? null : new TypePath(b,u);return u + 1 + 2 * pathLength;}  }
class C{  public void addActionListener(EventListener listener){  addEventListener(Events.ON_CLICK,listener);}  }
class C{  public static double pow(final double value,final double power){  if (USE_JDK_MATH) {    return Math.pow(value,power);  }  if (power == 0.0) {    return 1.0;  } else   if (power == 1.0) {    return value;  }  if (value <= 0.0) {    int powerInfo;    if (Math.abs(power) >= TWO_POW_52 * 2) {      powerInfo=1;    } else {      if (Math.abs(power) <= Integer.MAX_VALUE) {        final int powerAsInt=(int)power;        if (power == powerAsInt) {          powerInfo=(powerAsInt & 1) == 0 ? 1 : -1;        } else {          powerInfo=0;        }      } else {        final long powerAsLong=(long)power;        if (power == powerAsLong) {          powerInfo=(powerAsLong & 1) == 0 ? 1 : -1;        } else {          if (power != power) {            return Double.NaN;          }          powerInfo=0;        }      }    }    if (value == 0.0) {      if (power < 0.0) {        return powerInfo < 0 ? 1 / value : Double.POSITIVE_INFINITY;      } else {        return powerInfo < 0 ? value : 0.0;      }    } else {      if (value == Double.NEGATIVE_INFINITY) {        if (powerInfo < 0) {          return power < 0.0 ? -0.0 : Double.NEGATIVE_INFINITY;        } else {          return power < 0.0 ? 0.0 : Double.POSITIVE_INFINITY;        }      } else {        return powerInfo == 0 ? Double.NaN : powerInfo * exp(power * log(-value));      }    }  } else {    return exp(power * log(value));  }}  }
class C{  public Unsigned16(String s) throws NumberFormatException {  set(s);}  }
class C{  public TranscoderException(String s,Exception ex){  super(s);  this.ex=ex;}  }
class C{  final long internalNextLong(long origin,long bound){  long r=nextLong();  if (origin < bound) {    long n=bound - origin, m=n - 1;    if ((n & m) == 0L)     r=(r & m) + origin; else     if (n > 0L) {      for (long u=r >>> 1; u + m - (r=u % n) < 0L; u=nextLong() >>> 1)       ;      r+=origin;    } else {      while (r < origin || r >= bound)       r=nextLong();    }  }  return r;}  }
class C{  private void compareWithParser15(File javaFile){  if (!javaFile.exists()) {    fail("Test not implemented - cannot find file >" + javaFile + "<");  }  String newTokens=parseWithJ7Parser(javaFile,true);  String oldTokens=parseWithJ5Parser(javaFile);  Assert.assertEquals(oldTokens,newTokens);}  }
class C{  protected void connect() throws Exception {  FloodlightModuleContext fmc=new FloodlightModuleContext();  ThreadPool tp=new ThreadPool();  syncManager=new RemoteSyncManager();  fmc.addService(IThreadPoolService.class,tp);  fmc.addService(ISyncService.class,syncManager);  fmc.addConfigParam(syncManager,"hostname",settings.hostname);  fmc.addConfigParam(syncManager,"port",Integer.toString(settings.port));  if (settings.authScheme != null) {    fmc.addConfigParam(syncManager,"authScheme",settings.authScheme.toString());    fmc.addConfigParam(syncManager,"keyStorePath",settings.keyStorePath);    fmc.addConfigParam(syncManager,"keyStorePassword",settings.keyStorePassword);  }  tp.init(fmc);  syncManager.init(fmc);  tp.startUp(fmc);  syncManager.startUp(fmc);  out.println("Using remote sync service at " + settings.hostname + ":"+ settings.port);}  }
class C{  boolean isMapgraphCompatible(){  final IFeatureSupported obj=ClassPathUtil.classForName("com.blazegraph.rdf.gpu.MapgraphCompatibleNamespace",null,IFeatureSupported.class,getClass().getClassLoader());  if (obj == null)   return false;  return obj.isSupported(tripleStore);}  }
class C{  public void write(char[] buf) throws IOException {  if (writer != null) {    writer.write(buf);  } else {    write(buf,0,buf.length);  }}  }
class C{  public InvocableEndpointItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static void main(String[] args){  try {    URL whatismyip=new URL("http://checkip.amazonaws.com");    BufferedReader in=new BufferedReader(new InputStreamReader(whatismyip.openStream()));    fullHostName=in.readLine();    in.close();  } catch (  Exception e) {    e.printStackTrace();  }  wampWWW=getProperty("wampWWW",wampWWW);  logDir=wampWWW + "/RServer/logs/";  requestsDir=wampWWW + "/RServer/requests/";  routDir=wampWWW + "/RServer/Rout/";  jobsDir=wampWWW + "/RServer/jobs/";  indexPagePath=wampWWW + "/RServer/index.php";  scriptPath=wampWWW + "/RServer/scripts/";  performanceLogDir=wampWWW + "/RServer/perf";  isLinux=!wampWWW.contains(":");  String[] directories={"/RServer","/RServer/jobs","/RServer/logs","/RServer/perf","/RServer/reports","/RServer/requests","/RServer/Rout","/RServer/scripts","/RServer/reports/RServer"};  for (  String dir : directories) {    File file=new File(wampWWW + dir);    if (!file.exists()) {      file.mkdir();    }  }  try {    if (isLinux) {      Runtime.getRuntime().exec("sudo chmod 0777 " + wampWWW + "/RServer/requests").waitFor();      Runtime.getRuntime().exec("sudo chmod 0777 " + wampWWW + "/RServer/Rout").waitFor();    }  } catch (  Exception e) {    e.printStackTrace();  }  mainThreadRefresh=Long.parseLong(getProperty("mainThreadRefresh","" + mainThreadRefresh));  statusThreadRefresh=Long.parseLong(getProperty("statusThreadRefresh","" + statusThreadRefresh));  gcRefresh=Long.parseLong(getProperty("gcRefresh","" + gcRefresh));  completedTaskSize=Integer.parseInt(getProperty("completedTaskSize","" + completedTaskSize));  logHistorySize=Integer.parseInt(getProperty("logHistorySize","" + logHistorySize));  maxJobFiles=Integer.parseInt(getProperty("maxJobFiles","" + maxJobFiles));  pageRefreshTime=Integer.parseInt(getProperty("pageRefreshTime","" + pageRefreshTime));  performanceLogSize=Integer.parseInt(getProperty("performanceLogSize","" + performanceLogSize));  performanceLogDir=getProperty("performanceLogDir",performanceLogDir);  serverEmail=getProperty("serverEmail",serverEmail);  serverAdmin=getProperty("serverAdmin",serverAdmin);  smtp=getProperty("smtp",smtp);  perforceBase=getProperty("perforceBase",perforceBase);  schedulePath=perforceBase + getProperty("schedulePath","" + schedulePath);  rPath=getProperty("rPath",rPath);  perforceBase=getProperty("perforceBase",perforceBase);  File logFile=new File(performanceLogDir + "/ServerLoad.csv");  if (logFile.exists()) {    logFile.delete();  }  new RServer().start();}  }
class C{  public NodePortTuple(DatapathId nodeId,OFPort portId){  this.nodeId=nodeId;  this.portId=portId;}  }
class C{  @Override public void handleMessage(final Message msg){  try {switch (msg.what) {case OPEN_CAMERA:      int cameraId=msg.arg1;    Context context=CameraApp.getContext();  boolean backCameraOpenLegacy=context.getResources().getBoolean(R.bool.back_camera_open_legacy);boolean frontCameraOpenLegacy=context.getResources().getBoolean(R.bool.front_camera_open_legacy);CameraInfo info=CameraHolder.instance().getCameraInfo()[cameraId];if (info.facing == CameraInfo.CAMERA_FACING_BACK && backCameraOpenLegacy || info.facing == CameraInfo.CAMERA_FACING_FRONT && frontCameraOpenLegacy) {try {mCamera=android.hardware.Camera.openLegacy(cameraId,android.hardware.Camera.CAMERA_HAL_API_VERSION_1_0);} catch (RuntimeException e) {Log.v(TAG,"openLegacy failed. Using open instead");mCamera=android.hardware.Camera.open(cameraId);}} else {mCamera=android.hardware.Camera.open(cameraId);}if (mCamera != null) {mParametersIsDirty=true;if (mParamsToSet == null) {mParamsToSet=mCamera.getParameters();}} else {if (msg.obj != null) {((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(cameraId);}}return;case RELEASE:if (mCamera == null) {return;}mCamera.release();errorCbInstance=null;mCamera=null;return;case RECONNECT:mReconnectIOException=null;try {mCamera.reconnect();} catch (IOException ex) {mReconnectIOException=ex;}return;case UNLOCK:mCamera.unlock();return;case LOCK:mCamera.lock();return;case SET_PREVIEW_TEXTURE_ASYNC:setPreviewTexture(msg.obj);return;case SET_PREVIEW_DISPLAY_ASYNC:try {mCamera.setPreviewDisplay((SurfaceHolder)msg.obj);} catch (IOException e) {throw new RuntimeException(e);}return;case START_PREVIEW_ASYNC:try {mCamera.startPreview();} catch (Exception e) {e.printStackTrace();if (errorCbInstance != null) errorCbInstance.onStartPreviewFailure(msg.arg1);}return;case STOP_PREVIEW:mCamera.stopPreview();return;case SET_PREVIEW_CALLBACK_WITH_BUFFER:mCamera.setPreviewCallbackWithBuffer((PreviewCallback)msg.obj);return;case ADD_CALLBACK_BUFFER:mCamera.addCallbackBuffer((byte[])msg.obj);return;case AUTO_FOCUS:mCamera.autoFocus((AutoFocusCallback)msg.obj);return;case CANCEL_AUTO_FOCUS:mCamera.cancelAutoFocus();return;case SET_AUTO_FOCUS_MOVE_CALLBACK:setAutoFocusMoveCallback(mCamera,msg.obj);return;case SET_DISPLAY_ORIENTATION:mCamera.setDisplayOrientation(msg.arg1);return;case SET_ZOOM_CHANGE_LISTENER:mCamera.setZoomChangeListener((OnZoomChangeListener)msg.obj);return;case SET_FACE_DETECTION_LISTENER:setFaceDetectionListener((FaceDetectionListener)msg.obj);return;case START_FACE_DETECTION:startFaceDetection();return;case STOP_FACE_DETECTION:stopFaceDetection();return;case SET_ERROR_CALLBACK:mCamera.setErrorCallback((ErrorCallback)msg.obj);return;case SET_PARAMETERS:mParametersIsDirty=true;mCamera.setParameters((Parameters)msg.obj);mSig.open();break;case GET_PARAMETERS:if (mParametersIsDirty) {mParameters=mCamera.getParameters();mParametersIsDirty=false;}return;case SET_PREVIEW_CALLBACK:mCamera.setPreviewCallback((PreviewCallback)msg.obj);return;case SET_ONESHOT_PREVIEW_CALLBACK:mCamera.setOneShotPreviewCallback((PreviewCallback)msg.obj);return;case ENABLE_SHUTTER_SOUND:enableShutterSound((msg.arg1 == 1) ? true : false);return;case REFRESH_PARAMETERS:mParametersIsDirty=true;return;case SET_HISTOGRAM_MODE:mCamera.setHistogramMode((CameraDataCallback)msg.obj);break;case SEND_HISTOGRAM_DATA:mCamera.sendHistogramData();break;case SET_LONGSHOT:mCamera.setLongshot((Boolean)msg.obj);break;case STOP_LONGSHOT:mCamera.stopLongshot();break;case SET_AUTO_HDR_MODE:mCamera.setMetadataCb((CameraMetaDataCallback)msg.obj);break;default :throw new RuntimeException("Invalid CameraProxy message=" + msg.what);}} catch (RuntimeException e) {if (msg.what != RELEASE && mCamera != null) {try {mCamera.release();} catch (Exception ex) {Log.e(TAG,"Fail to release the camera.");}mCamera=null;} else if (mCamera == null) {if (msg.what == OPEN_CAMERA) {if (msg.obj != null) {((CameraOpenErrorCallback)msg.obj).onDeviceOpenFailure(msg.arg1);}} else {Log.w(TAG,"Cannot handle message, mCamera is null.");}return;}throw e;}}  }
class C{  public final TestSubscriber assertValueCount(int count){  String prefix="";  boolean passed=true;  if (done.getCount() != 0) {    prefix="Subscriber still running! ";  }  int s=values.size();  if (s != count) {    fail(prefix,"Value counts differ; Expected: " + count + ", Actual: "+ s,errors);    fail("Value counts differ; Expected: " + count + ", Actual: "+ s);    passed=false;  }  pass("received " + count + " values",passed);  return this;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthFormattedTextFieldUI();}  }
class C{  public boolean isTranslated(){  for (int i=0; i < m_columns.length; i++) {    if (m_columns[i].IsTranslated)     return true;  }  return false;}  }
class C{  private void openSession(File file,boolean isRecent){  try {    loadSession(file,isRecent);  } catch (  FileNotFoundException ex) {    JOptionPane.showMessageDialog(this.getRootPane(),"Error opening " + ex.getMessage() + ".","Error opening session",JOptionPane.ERROR_MESSAGE);  }catch (  IOException ex) {    JOptionPane.showMessageDialog(this.getRootPane(),"Error opening " + ex.getMessage() + ".","Error opening session",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public static List<Integer> unmodifiableView(int[] array,int length){  return Collections.unmodifiableList(view(array,length));}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  private synchronized void schedule(){  if (this.inflight.get() >= MAX_INFLIGHT) {    return;  }  if (0 == this.pending.get()) {    return;  }  if (idx >= runnables.size()) {    return;  }  GTSDecoderIteratorRunnable runnable=runnables.get(idx);  try {    executor.execute(runnable);    idx++;  } catch (  RejectedExecutionException ree) {  }}  }
class C{  public Birthday(PartialDate partialDate){  super(partialDate);}  }
class C{  public static char convertByte2Uint8(byte b){  return (char)(b & 0xff);}  }
class C{  public static NumericEntityEscaper between(final int codepointLow,final int codepointHigh){  return new NumericEntityEscaper(codepointLow,codepointHigh,true);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.CONDITIONAL_EXPRESSION__CONDITION:    setCondition((Expression)null);  return;case ExpressionsPackage.CONDITIONAL_EXPRESSION__TRUE_CASE:setTrueCase((Expression)null);return;case ExpressionsPackage.CONDITIONAL_EXPRESSION__FALSE_CASE:setFalseCase((Expression)null);return;}super.eUnset(featureID);}  }
class C{  @Deprecated public Map<Integer,Throwable> exposeExceptionMapping(){  return exceptions;}  }
class C{  public ByteCountingOutputStream(OutputStream out,Counter counter){  super(out);  this.byteCounter=counter;}  }
class C{  public boolean isUnset(String name){  return (values.get(name) == null);}  }
class C{  public static boolean isMap(FTypeRef typeRef){  return isUserDefinedType(typeRef,FMapType.class);}  }
class C{  public boolean isSIPAddress(){  return address instanceof SipUri;}  }
class C{  protected boolean isFilteredOut(AttributeMetaData amd){  return false;}  }
class C{  public void addCustomBaseParameter(String key,String value){  put(key,value,baseParameters);}  }
class C{  @Override public String toString(){  return toString(true);}  }
class C{  public static int translateStatusCode(int statusCode,Rule rule){  return translateStatusCode(statusCode,rule,null);}  }
class C{  public void printTo(StringBuffer buf,ReadablePeriod period){  checkPrinter();  checkPeriod(period);  getPrinter().printTo(buf,period,iLocale);}  }
class C{  public void queueHint(String storeName,ByteArray key,Versioned<byte[]> value){  try {    HintKey hk=new HintKey(storeName,key);    hintLock.lock();    try {      boolean needed=!hints.containsKey(hk);      needed&=hints.doput(hk,value);      if (needed) {        hintQueue.add(hk);        hintsAvailable.signal();      }    }  finally {      hintLock.unlock();    }  } catch (  SyncException e) {    logger.error("Failed to queue hint for store " + storeName,e);  }}  }
class C{  public void validateCounter(String typeStr,long value){  for (  DebugCounterResource dcInfo : dc.getAllCounterValues()) {    if (dcInfo.getCounterHierarchy().contains("/" + typeStr)) {      assertEquals(Long.valueOf(value),dcInfo.getCounterValue());    }  }}  }
class C{  protected int[][] createPolyIndex(EsriGraphicList list){  double[] data;  int[][] indexData=new int[2][list.size()];  int pos=50;  for (int i=0; i < list.size(); i++) {    int contentLength=0;    OMGraphic graphic=(OMGraphic)list.getOMGraphicAt(i);    contentLength+=2;    contentLength+=16;    contentLength+=2;    contentLength+=2;    if (graphic instanceof OMGraphicList) {      OMGraphicList sublist=(OMGraphicList)graphic;      contentLength+=sublist.size() * 2;      for (int j=0; j < sublist.size(); j++) {        OMPoly poly=(OMPoly)sublist.getOMGraphicAt(j);        data=poly.getLatLonArray();        contentLength+=data.length * 4;      }    } else {      contentLength+=2;      data=((OMPoly)graphic).getLatLonArray();      contentLength+=data.length * 4;    }    indexData[1][i]=contentLength;    indexData[0][i]=pos;    pos+=contentLength + 4;  }  return indexData;}  }
class C{  public AsyncResult TranslateBrowsePathsToNodeIdsAsync(TranslateBrowsePathsToNodeIdsRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  public static int binarySearch(int[] array,int value){  return binarySearch(array,0,array.length,value);}  }
class C{  public XYSeries(String title){  this(title,0);}  }
class C{  public static void dropTemporaryOutputTables(String table,int numberOfPartitions,Connection connection){  table=table.replace(";","");  for (int i=0; i < numberOfPartitions; i++) {    StringBuilder dropTableQuery=new StringBuilder();    dropTableQuery.append("DROP TABLE ");    dropTableQuery.append(table);    dropTableQuery.append("_");    dropTableQuery.append(i);    LOG.info("Drop Table: ");    LOG.info(dropTableQuery);    executeStatementIfExists(dropTableQuery.toString(),connection);  }}  }
class C{  DhcpInformPacket(int transId,InetAddress clientIp,InetAddress yourIp,InetAddress nextIp,InetAddress relayIp,byte[] clientMac){  super(transId,clientIp,yourIp,nextIp,relayIp,clientMac,false);}  }
