class C{  private void asyncClose(boolean beingSick){  if (beingSick) {    prepareForAsyncClose();  } else {    if (this.asyncCloseCalled.compareAndSet(false,true)) {      Socket s=this.socket;      if (s != null && !s.isClosed()) {        prepareForAsyncClose();        this.owner.getSocketCloser().asyncClose(s,String.valueOf(this.remoteAddr),null);      }    }  }}  }
class C{  @Override public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  if (logger.isTraceEnabled()) {    logger.trace("Invoking Method {}",method.getName());  }  final Class methodClass=method.getDeclaringClass();  if (methodClass.equals(NotificationBroadcaster.class) || methodClass.equals(NotificationEmitter.class))   return invokeBroadcasterMethod(proxy,method,args);  final String methodName=method.getName();  final Class[] paramTypes=method.getParameterTypes();  final Class returnType=method.getReturnType();  final int nargs=(args == null) ? 0 : args.length;  if (methodName.equals("setLastRefreshedTime")) {    proxyImpl.setLastRefreshedTime((Long)args[0]);    return null;  }  if (methodName.equals("getLastRefreshedTime")) {    return proxyImpl.getLastRefreshedTime();  }  if (methodName.equals("sendNotification")) {    sendNotification(args[0]);    return null;  }  if (shouldDoLocally(proxy,method)) {    return doLocally(proxy,method,args);  }  if (isMXBean) {    MXBeanProxyInvocationHandler p=findMXBeanProxy(objectName,methodClass,this);    return p.invoke(proxy,method,args);  }  if (methodName.startsWith("get") && methodName.length() > 3 && nargs == 0 && !returnType.equals(Void.TYPE)) {    return delegateToObjectState(methodName.substring(3));  }  if (methodName.startsWith("is") && methodName.length() > 2 && nargs == 0 && (returnType.equals(Boolean.TYPE) || returnType.equals(Boolean.class))) {    return delegateToObjectState(methodName.substring(2));  }  final String[] signature=new String[paramTypes.length];  for (int i=0; i < paramTypes.length; i++)   signature[i]=paramTypes[i].getName();  if (methodName.startsWith("set") && methodName.length() > 3 && nargs == 1 && returnType.equals(Void.TYPE)) {    return delegateToFucntionService(objectName,methodName,args,signature);  }  return delegateToFucntionService(objectName,methodName,args,signature);}  }
class C{  public static Motor talon(int channel){  return talon(channel,SPEED_LIMITER);}  }
class C{  public QName intern(QName qname){  return get(qname.getName(),qname.getNamespace(),qname.getQualifiedName());}  }
class C{  private void parseFile(File xml) throws IOException, XMLStreamException, SAXException {  if (xml == null) {    throw new IllegalArgumentException("No xml file passed");  } else   if (!xml.exists()) {    throw new IOException("Project file not found");  }  file=xml;  ProjectXmlParser parser=new ProjectXmlParser(file,this);  parser.parse();}  }
class C{  private static void initScanner(final WebAppContext web,final Configs config){  int scanIntervalSeconds=config.getScanIntervalSeconds();  final ArrayList<File> scanList=new ArrayList<File>();  System.err.println("init scanning folders...");  if (config.getScanlist() != null) {    String[] items=config.getScanlist().split(File.pathSeparator);    for (    String item : items) {      File f=new File(item);      scanList.add(f);      System.err.println("add to scan list:" + item);    }  }  Scanner scanner=new Scanner();  scanner.setScanInterval(scanIntervalSeconds);  scanner.setScanDirs(scanList);  scanner.setRecursive(true);  scanner.setReportExistingFilesOnStartup(false);  scanner.addListener(new RJRFileChangeListener(web,config));  System.err.println("Starting scanner at interval of " + scanIntervalSeconds + " seconds.");  try {    scanner.start();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private Token createJavaHomeToken(){  String javaHome=getPropertyValue(GeneralPropertySet.JAVA_HOME);  ReplaceTokens.Token tokenJavaHome=new ReplaceTokens.Token();  tokenJavaHome.setKey("jrun.java.home");  tokenJavaHome.setValue(javaHome.replace('\\','/'));  return tokenJavaHome;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public AsyncInputStage(InputStage next,String traceCounter){  super(next);  mTraceCounter=traceCounter;}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  private int randomLevel(){  int x=randomSeed;  x^=x << 13;  x^=x >>> 17;  randomSeed=x^=x << 5;  if ((x & 0x80000001) != 0)   return 0;  int level=1;  while (((x>>>=1) & 1) != 0)   ++level;  return level;}  }
class C{  public boolean isEnum(){  return isEnum;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static long currentTimeMillis(){  return mockTime != null ? mockTime.getTime() : System.currentTimeMillis();}  }
class C{  static int mysqlToJavaType(String mysqlType){  if (mysqlType.equalsIgnoreCase("BIT")) {    return mysqlToJavaType(FIELD_TYPE_BIT);  } else   if (mysqlType.equalsIgnoreCase("TINYINT")) {    return mysqlToJavaType(FIELD_TYPE_TINY);  } else   if (mysqlType.equalsIgnoreCase("SMALLINT")) {    return mysqlToJavaType(FIELD_TYPE_SHORT);  } else   if (mysqlType.equalsIgnoreCase("MEDIUMINT")) {    return mysqlToJavaType(FIELD_TYPE_INT24);  } else   if (mysqlType.equalsIgnoreCase("INT") || mysqlType.equalsIgnoreCase("INTEGER")) {    return mysqlToJavaType(FIELD_TYPE_LONG);  } else   if (mysqlType.equalsIgnoreCase("BIGINT")) {    return mysqlToJavaType(FIELD_TYPE_LONGLONG);  } else   if (mysqlType.equalsIgnoreCase("INT24")) {    return mysqlToJavaType(FIELD_TYPE_INT24);  } else   if (mysqlType.equalsIgnoreCase("REAL")) {    return mysqlToJavaType(FIELD_TYPE_DOUBLE);  } else   if (mysqlType.equalsIgnoreCase("FLOAT")) {    return mysqlToJavaType(FIELD_TYPE_FLOAT);  } else   if (mysqlType.equalsIgnoreCase("DECIMAL")) {    return mysqlToJavaType(FIELD_TYPE_DECIMAL);  } else   if (mysqlType.equalsIgnoreCase("NUMERIC")) {    return mysqlToJavaType(FIELD_TYPE_DECIMAL);  } else   if (mysqlType.equalsIgnoreCase("DOUBLE")) {    return mysqlToJavaType(FIELD_TYPE_DOUBLE);  } else   if (mysqlType.equalsIgnoreCase("CHAR")) {    return mysqlToJavaType(FIELD_TYPE_STRING);  } else   if (mysqlType.equalsIgnoreCase("VARCHAR")) {    return mysqlToJavaType(FIELD_TYPE_VAR_STRING);  } else   if (mysqlType.equalsIgnoreCase("DATE")) {    return mysqlToJavaType(FIELD_TYPE_DATE);  } else   if (mysqlType.equalsIgnoreCase("TIME")) {    return mysqlToJavaType(FIELD_TYPE_TIME);  } else   if (mysqlType.equalsIgnoreCase("YEAR")) {    return mysqlToJavaType(FIELD_TYPE_YEAR);  } else   if (mysqlType.equalsIgnoreCase("TIMESTAMP")) {    return mysqlToJavaType(FIELD_TYPE_TIMESTAMP);  } else   if (mysqlType.equalsIgnoreCase("DATETIME")) {    return mysqlToJavaType(FIELD_TYPE_DATETIME);  } else   if (mysqlType.equalsIgnoreCase("TINYBLOB")) {    return java.sql.Types.BINARY;  } else   if (mysqlType.equalsIgnoreCase("BLOB")) {    return java.sql.Types.LONGVARBINARY;  } else   if (mysqlType.equalsIgnoreCase("MEDIUMBLOB")) {    return java.sql.Types.LONGVARBINARY;  } else   if (mysqlType.equalsIgnoreCase("LONGBLOB")) {    return java.sql.Types.LONGVARBINARY;  } else   if (mysqlType.equalsIgnoreCase("TINYTEXT")) {    return java.sql.Types.VARCHAR;  } else   if (mysqlType.equalsIgnoreCase("TEXT")) {    return java.sql.Types.LONGVARCHAR;  } else   if (mysqlType.equalsIgnoreCase("MEDIUMTEXT")) {    return java.sql.Types.LONGVARCHAR;  } else   if (mysqlType.equalsIgnoreCase("LONGTEXT")) {    return java.sql.Types.LONGVARCHAR;  } else   if (mysqlType.equalsIgnoreCase("ENUM")) {    return mysqlToJavaType(FIELD_TYPE_ENUM);  } else   if (mysqlType.equalsIgnoreCase("SET")) {    return mysqlToJavaType(FIELD_TYPE_SET);  } else   if (mysqlType.equalsIgnoreCase("GEOMETRY")) {    return mysqlToJavaType(FIELD_TYPE_GEOMETRY);  } else   if (mysqlType.equalsIgnoreCase("BINARY")) {    return Types.BINARY;  } else   if (mysqlType.equalsIgnoreCase("VARBINARY")) {    return Types.VARBINARY;  } else   if (mysqlType.equalsIgnoreCase("BIT")) {    return mysqlToJavaType(FIELD_TYPE_BIT);  }  return java.sql.Types.OTHER;}  }
class C{  private List<String> queryHostInitiators(URI hostId){  List<String> initiatorNames=new ArrayList<String>();  List<URI> uris=_dbClient.queryByConstraint(ContainmentConstraint.Factory.getContainedObjectsConstraint(hostId,Initiator.class,"host"));  if (uris != null && !uris.isEmpty()) {    List<Initiator> initiators=_dbClient.queryObjectField(Initiator.class,"iniport",uris);    Collection<String> intiatorHostPortNames=transform(initiators,fctnInitiatorToPortName());    if (intiatorHostPortNames != null && !intiatorHostPortNames.isEmpty()) {      initiatorNames.addAll(intiatorHostPortNames);    }  }  return initiatorNames;}  }
class C{  public int hashCode(){  return getRules().hashCode();}  }
class C{  private void startListener(JmriSimplePropertyListener listener){  String msg="(unknown type number " + listener.getType() + ")";  NamedBean nb;  NamedBeanHandle<?> namedBeanHandle;switch (listener.getType()) {case LISTENER_TYPE_FASTCLOCK:    Timebase tb=InstanceManager.getDefault(jmri.Timebase.class);  tb.addMinuteChangeListener(listener);return;default :namedBeanHandle=listener.getNamedBean();if (namedBeanHandle == null) {switch (listener.getType()) {case LISTENER_TYPE_SENSOR:msg="sensor";break;case LISTENER_TYPE_TURNOUT:msg="turnout";break;case LISTENER_TYPE_LIGHT:msg="light";break;case LISTENER_TYPE_CONDITIONAL:msg="conditional";break;case LISTENER_TYPE_SIGNALHEAD:msg="signalhead";break;case LISTENER_TYPE_SIGNALMAST:msg="signalmast";break;case LISTENER_TYPE_MEMORY:msg="memory";break;case LISTENER_TYPE_WARRANT:msg="warrant";break;case LISTENER_TYPE_OBLOCK:msg="oblock";break;case LISTENER_TYPE_ENTRYEXIT:msg="entry exit";break;default :msg="unknown";}break;}nb=(NamedBean)namedBeanHandle.getBean();nb.addPropertyChangeListener(listener,namedBeanHandle.getName(),"Logix " + getDisplayName());return;}log.error("Bad name for " + msg + " \""+ listener.getDevName()+ "\" when setting up Logix listener");}  }
class C{  public void add(char[] w,int wLen){  if (i + wLen >= b.length) {    char[] new_b=new char[i + wLen + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  for (int c=0; c < wLen; c++)   b[i++]=w[c];}  }
class C{  public void testUtf8StringsWithEscaping() throws Exception {  List<byte[]> strings=generateStrings(new Random(28),720000,true);  ByteArrayOutputStream out=new ByteArrayOutputStream(16000);  JsonFactory jf=new JsonFactory();  JsonGenerator jgen=jf.createJsonGenerator(out,JsonEncoding.UTF8);  jgen.writeStartArray();  for (  byte[] str : strings) {    jgen.writeUTF8String(str,0,str.length);    jgen.writeRaw('\n');  }  jgen.writeEndArray();  jgen.close();  byte[] json=out.toByteArray();  JsonParser jp=jf.createJsonParser(json);  assertToken(JsonToken.START_ARRAY,jp.nextToken());  for (  byte[] inputBytes : strings) {    assertToken(JsonToken.VALUE_STRING,jp.nextToken());    String string=jp.getText();    byte[] outputBytes=string.getBytes("UTF-8");    assertEquals(inputBytes.length,outputBytes.length);    assertArrayEquals(inputBytes,outputBytes);  }  assertToken(JsonToken.END_ARRAY,jp.nextToken());}  }
class C{  public void updateCircle(int x1,int y1,int w,int h,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkCircle.write(x1,y1,w,h,properties,link.dos);}  }
class C{  void registerMultiName(MultiName multiName,QName qName){  multiNames.put(multiName,qName);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:33.824 -0500",hash_original_method="1DDC7258E310FE2F6E87FB700766CEAD",hash_generated_method="C8D2EBF41CF2C3F39FBBA801A5688D9A") public void finish() throws IOException {  if (done) {    return;  }  def.finish();  while (!def.finished()) {    int byteCount=def.deflate(buf);    out.write(buf,0,byteCount);  }  done=true;}  }
class C{  public MediaImageItem createMediaItem(VideoEditor videoEditor,String MediaId,String filename,long duration,int renderingMode){  MediaImageItem mii=null;  try {    mii=new MediaImageItem(videoEditor,MediaId,filename,duration,renderingMode);    assertNotNull("Can not create an object of MediaImageItem",mii);  } catch (  IllegalArgumentException e) {    assertTrue("Can not create an object of Media Image with file name = " + filename + " Issue = "+ e.toString(),false);  }catch (  IOException e) {    assertTrue("Can not create an object of Media Image with file name = " + filename + " Issue = "+ e.toString(),false);  }  return mii;}  }
class C{  public void copyManagedDBCredential(String targetUserName,boolean restrictedUser,String srcUsername,String dbGroup,String dbuser,String password){  if (targetUserName == null || targetUserName.isEmpty() || targetUserName.equalsIgnoreCase(srcUsername))   return;  DBCredential cred2=new DBCredential();  cred2.setAppUser(targetUserName);  cred2.setDbGroupName(dbGroup);  cred2.setUsername(dbuser);  cred2.setPassword(password);  getMetaDb().upsertDBCredential(cred2);  if (!restrictedUser)   getMyDatabases(cred2.getAppUser(),false).addDb(cred2.getDbGroupName());}  }
class C{  public void mapPathsToMetadata(Object value){  if (value == null) {    return;  } else   if (SBSchemaHelper.isFileFromValue(value)) {    String path=SBFileValueHelper.getPath(value);    String originalPath=SBFileValueHelper.getOriginalPath(value);    logger.debug("Putting metadata for file {}",path);    if (!pathToMetadata.containsKey(path)) {      pathToMetadata.put(path,SBFileValueHelper.getMetadata(value));      if (originalPath != null) {        pathToMetadata.put(originalPath,SBFileValueHelper.getMetadata(value));      }    }    List<Map<String,Object>> secondaryFiles=SBFileValueHelper.getSecondaryFiles(value);    if (secondaryFiles != null) {      for (      Object subvalue : secondaryFiles) {        String subpath=SBFileValueHelper.getPath(subvalue);        String suboriginalPath=SBFileValueHelper.getOriginalPath(subvalue);        if (!pathToMetadata.containsKey(subpath)) {          pathToMetadata.put(subpath,SBFileValueHelper.getMetadata(subvalue));          if (suboriginalPath != null) {            pathToMetadata.put(suboriginalPath,SBFileValueHelper.getMetadata(subvalue));          }        }      }    }  } else   if (value instanceof List<?>) {    for (    Object subvalue : ((List<?>)value)) {      mapPathsToMetadata(subvalue);    }  } else   if (value instanceof Map<?,?>) {    for (    Object subvalue : ((Map<?,?>)value).values()) {      mapPathsToMetadata(subvalue);    }  }}  }
class C{  public CharBuffer replace(int start,int end,String string){  int length=length();  if (start < 0 || end < start || length < start)   throw new StringIndexOutOfBoundsException();  int len=string.length();  ensureCapacity(len + length - (end - start));  char[] buffer=buffer();  if (len < end - start) {    int tail=length - end;    for (int i=0; i < tail; i++) {      buffer[start + len + i]=buffer[end + i];    }  } else {    int tail=length - end;    for (int i=tail - 1; i >= 0; i--) {      buffer[end + i]=buffer[start + len + i];    }  }  string.getChars(0,len,buffer,start);  length(length + len - (end - start));  return this;}  }
class C{  public MemoryFullPrunedBlockStore(NetworkParameters params,int fullStoreDepth){  blockMap=new TransactionalHashMap<Sha256Hash,StoredBlockAndWasUndoableFlag>();  fullBlockMap=new TransactionalMultiKeyHashMap<Sha256Hash,Integer,StoredUndoableBlock>();  transactionOutputMap=new TransactionalHashMap<StoredTransactionOutPoint,UTXO>();  this.fullStoreDepth=fullStoreDepth > 0 ? fullStoreDepth : 1;  try {    StoredBlock storedGenesisHeader=new StoredBlock(params.getGenesisBlock().cloneAsHeader(),params.getGenesisBlock().getWork(),0);    List<Transaction> genesisTransactions=Lists.newLinkedList();    StoredUndoableBlock storedGenesis=new StoredUndoableBlock(params.getGenesisBlock().getHash(),genesisTransactions);    put(storedGenesisHeader,storedGenesis);    setChainHead(storedGenesisHeader);    setVerifiedChainHead(storedGenesisHeader);    this.params=params;  } catch (  BlockStoreException e) {    throw new RuntimeException(e);  }catch (  VerificationException e) {    throw new RuntimeException(e);  }}  }
class C{  public ListModel(){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void rename(HttpServletRequest request,File dir,String element,String newName){  if (element != null && element.length() > 0) {    File src=new File(dir,element);    File dest=new File(dir,newName);    if (isAccessible(request,src) && isAccessible(request,dest)) {      src.renameTo(dest);    }  }}  }
class C{  private String replaceMetaChars(String input){  String result=input.replaceAll("\\\\","\\\\\\");  result=result.replaceAll(Pattern.quote("]"),"\\\\]");  result=result.replaceAll(Pattern.quote("["),"\\\\[");  result=result.replaceAll(Pattern.quote("^"),"\\\\^");  result=result.replaceAll(Pattern.quote("$"),"\\\\$");  result=result.replaceAll(Pattern.quote("."),"\\\\.");  result=result.replaceAll(Pattern.quote("|"),"\\\\|");  result=result.replaceAll(Pattern.quote("?"),"\\\\?");  result=result.replaceAll(Pattern.quote("+"),"\\\\+");  result=result.replaceAll(Pattern.quote("("),"\\\\(");  result=result.replaceAll(Pattern.quote(")"),"\\\\)");  result=result.replaceAll(Pattern.quote("-"),"\\\\-");  result=result.replaceAll(Pattern.quote("{"),"\\\\{");  result=result.replaceAll(Pattern.quote("}"),"\\\\}");  result=result.replaceAll(Pattern.quote("#"),"\\\\#");  return result;}  }
class C{  public void testSetUploadAuditExecutionListMax(){  System.out.println("setUploadAuditExecutionListMax");  AuditServiceThreadQueueImpl instance=new AuditServiceThreadQueueImpl();  int uploadAuditExecutionListMax=10;  instance.setUploadAuditExecutionListMax(uploadAuditExecutionListMax);  assertEquals(uploadAuditExecutionListMax,instance.getUploadAuditExecutionListMax());}  }
class C{  public void init() throws ServletException {}  }
class C{  static ApplicationType[] determinePotentialTypes(StreamAppDefinition appDefinition){  Set<String> properties=appDefinition.getProperties().keySet();  if (properties.contains(BindingPropertyKeys.INPUT_DESTINATION)) {    if (properties.contains(BindingPropertyKeys.OUTPUT_DESTINATION)) {      return new ApplicationType[]{ApplicationType.processor};    } else {      return new ApplicationType[]{ApplicationType.processor,ApplicationType.sink};    }  } else {    return new ApplicationType[]{ApplicationType.source};  }}  }
class C{  public void remove(int volId) throws Exception {  for (int i=0; i < _list.size(); i++) {    VolumeImpl volume=getImpl(i);    if (volume.getId() == volId)     _list.remove(i);  }}  }
class C{  public BooleanLiteral createBooleanLiteral(){  BooleanLiteralImpl booleanLiteral=new BooleanLiteralImpl();  return booleanLiteral;}  }
class C{  public boolean isVisible(DataSource source){  return dataVisible.contains(source);}  }
class C{  public void release(){  LCRList.release();}  }
class C{  public void test_GetCurve(){  assertEquals("wrong elliptic curve",curve,ecps.getCurve());}  }
class C{  @CloudUnitSecurable @ResponseBody @RequestMapping(value="/{applicationName}",method=RequestMethod.GET) public Application detail(JsonInput jsonInput) throws ServiceException, CheckException {  jsonInput.validateDetail();  User user=authentificationUtils.getAuthentificatedUser();  Application application=applicationService.findByNameAndUser(user,jsonInput.getApplicationName());  return application;}  }
class C{  public void close(){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      e.printStackTrace();    }    reset(null,false);  }}  }
class C{  public AssignmentExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void testClassificationNumeric(){  performTest(true,true,false,false,false);}  }
class C{  void cancel(){  setVisible(false);}  }
class C{  public FavoriteFilter(boolean matchPasses){  super(matchPasses);}  }
class C{  boolean resolve(final MethodWriter owner,final int position,final byte[] data){  boolean needUpdate=false;  this.status|=RESOLVED;  this.position=position;  int i=0;  while (i < referenceCount) {    int source=srcAndRefPositions[i++];    int reference=srcAndRefPositions[i++];    int offset;    if (source >= 0) {      offset=position - source;      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {        int opcode=data[reference - 1] & 0xFF;        if (opcode <= Opcodes.JSR) {          data[reference - 1]=(byte)(opcode + 49);        } else {          data[reference - 1]=(byte)(opcode + 20);        }        needUpdate=true;      }      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    } else {      offset=position + source + 1;      data[reference++]=(byte)(offset >>> 24);      data[reference++]=(byte)(offset >>> 16);      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    }  }  return needUpdate;}  }
class C{  public int indexOf(TimeSeries series){  ParamChecks.nullNotPermitted(series,"series");  return this.data.indexOf(series);}  }
class C{  public void close(){  if (mBluetoothGatt == null) {    return;  }  mBluetoothGatt.close();  mBluetoothGatt=null;}  }
class C{  public static <T>MatchableObject<T> listOfValues(final T... o){  return AsMatchable.asMatchable(Arrays.asList(o));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.116 -0500",hash_original_method="5C2FD3A5795EB59386117F9A61E0ADCE",hash_generated_method="B01B6B091CA06151A1DE19D0694FE513") private void loadFinished(String url,int loadType,boolean isMainFrame){  if (isMainFrame || loadType == FRAME_LOADTYPE_STANDARD) {    if (isMainFrame) {      resetLoadingStates();      mCallbackProxy.switchOutDrawHistory();      mCallbackProxy.onPageFinished(url);    }  }}  }
class C{  public void initImpl(){  if (_level == null) {    return;  }  if (_names.size() == 0) {    _names.add("");  }  for (  String name : _names) {    _logger=Logger.getLogger(name);    if (_level != null) {      _logger.setLevel(_level);    }    if (_useParentHandlers != null) {      _logger.setUseParentHandlers(_useParentHandlers.booleanValue());    }    for (    Handler handler : _handlerList) {      _logger.addHandler(handler);    }    if (_filter != null) {      _logger.setFilter(_filter);    }  }}  }
class C{  @Override public int size(){  if (size == 0)   return 0;  expungeStaleEntries();  return size;}  }
class C{  boolean matches(TransformKey other){  return (parent == null || parent.matches(other.parent)) && (key.matches(other.key)) && (context == null || context.matches(other.context));}  }
class C{  public static float convertPixelsToDp(float px){  if (mMetrics == null) {    Log.e("MPChartLib-Utils","Utils NOT INITIALIZED. You need to call Utils.init(...) at least once before calling Utils.convertPixelsToDp(...). Otherwise conversion does not take place.");    return px;  }  DisplayMetrics metrics=mMetrics;  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  @ReactMethod public void canShow(ReadableMap shareContentMap,Promise promise){  if (getCurrentActivity() != null) {    ShareContent shareContent=Utility.buildShareContent(shareContentMap);    MessageDialog messageDialog=new MessageDialog(getCurrentActivity());    promise.resolve(messageDialog.canShow(shareContent));  } else {    promise.reject("No current activity.");  }}  }
class C{  protected Bits(int[] bits,BitsState initState){  this.bits=bits;  this.currentState=initState;switch (initState) {case UNKNOWN:    this.bits=null;  break;case NORMAL:Assert.check(bits != unassignedBits);break;}}  }
class C{  public void writeBuffer(byte[] buffer) throws IOException {  if (buffer == null)   writeInt(0); else {    int len=buffer.length;    writeInt(len);    write(buffer,0,len,(4 - len) & 3);  }}  }
class C{  public static SQLException rollupSqlExceptions(Collection<SQLException> exceptions){  SQLException parent=null;  for (  SQLException exception : exceptions) {    if (parent != null) {      exception.setNextException(parent);    }    parent=exception;  }  return parent;}  }
class C{  protected Object updateDotQuery(boolean value){  throw new IllegalStateException();}  }
class C{  static boolean stopServices(){  if (Cfg.DEBUG) {    Check.log(TAG + " (stopServices)");  }  ManagerModule.self().stopAll();  ManagerEvent.self().stopAll();  Status.unTriggerAll();  return true;}  }
class C{  public ExactTokenizerFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public boolean isPowerOfTwoB(int n){  return n > 0 && Integer.bitCount(n) == 1;}  }
class C{  public void done() throws Exception {  if (m_Classifier instanceof IterativeClassifier)   ((IterativeClassifier)m_Classifier).done(); else   throw new Exception("Classifier: " + getClassifierSpec() + " is not an IterativeClassifier");}  }
class C{  public static int hash32(final int[] data,int startPos,int endPos,int seed){  final int m=0x5bd1e995;  final int r=24;  final int length=endPos - startPos;  int h=seed ^ length;  for (int i=startPos; i < endPos; i++) {    int k=data[i];    k*=m;    k^=k >>> r;    k*=m;    h*=m;    h^=k;  }  h^=h >>> 13;  h*=m;  h^=h >>> 15;  return h;}  }
class C{  protected void clearError(){  ioError=false;}  }
class C{  public Queue(){  first=null;  last=null;  n=0;}  }
class C{  void recreateRecentPresetView(){  if (usePaneLayout) {    FragmentManager fm=getSupportFragmentManager();    Fragment recentPresetsFragment=fm.findFragmentByTag(RECENTPRESETS_FRAGMENT);    if (recentPresetsFragment != null) {      ((RecentPresetsFragment)recentPresetsFragment).recreateRecentPresetView();    }  } else {    if (tagFormFragment != null) {      tagFormFragment.recreateRecentPresetView();    } else {      tagEditorFragment.recreateRecentPresetView();    }  }}  }
class C{  public void notify(AppleEvent[] events){  try {    String threadName=Thread.currentThread().getName();    logger.log(Level.FINEST,threadName + ": " + toString()+ ".notify: BEGIN");    for (int i=0; i < events.length; ++i) {      logger.log(Level.FINEST,threadName + ": " + toString()+ ".notify(): events["+ i+ "] = "+ events[i].toString());    }    logger.log(Level.FINEST,threadName + ": " + toString()+ ".notify(): END");  } catch (  RuntimeException e) {    logger.log(Level.SEVERE,toString() + ".notify():",e);    throw e;  }}  }
class C{  private void initUpdatingAction(SelectionDispatchAction action,ISelectionProvider provider,ISelectionProvider specialProvider,ISelection selection,String actionDefinitionId){  action.setActionDefinitionId(actionDefinitionId);  action.update(selection);  if (provider != null)   provider.addSelectionChangedListener(action);  if (specialProvider != null)   action.setSpecialSelectionProvider(specialProvider);  fActions.add(action);}  }
class C{  private static void appendException(final PrintWriter writer,final Throwable ex){  if (ex instanceof CoreException) {    appendCommandStatus(writer,((CoreException)ex).getStatus(),0);    writer.println();  }  appendStackTrace(writer,ex);  if (ex instanceof InvocationTargetException) {    appendException(writer,((InvocationTargetException)ex).getTargetException());  }}  }
class C{  private CollectionDescriptor loadCollection(String collectionName) throws OracleException {  if (!metadataTableExists) {    return null;  }  OracleCallableStatement stmt=null;  String sqltext="begin\n" + "  DBMS_SODA_ADMIN.DESCRIBE_COLLECTION(\n" + "                   P_URI_NAME   => ?,\n"+ "                   P_DESCRIPTOR => ?);\n"+ "end;";  CollectionDescriptor desc=null;  try {    metrics.startTiming();    stmt=(OracleCallableStatement)conn.prepareCall(sqltext);    stmt.setNString(1,collectionName);    stmt.registerOutParameter(2,OracleTypes.VARCHAR,DESC_LENGTH);    stmt.execute();    String jsonDescriptor=stmt.getString(2);    desc=getDescriptorFromCaches(collectionName);    if ((desc == null) && (jsonDescriptor != null)) {      Builder builder=CollectionDescriptor.jsonToBuilder(jsonDescriptor);      desc=putDescriptorIntoCaches(builder.buildDescriptor(collectionName));    }    stmt.close();    stmt=null;    metrics.recordCall();  } catch (  SQLException e) {    if (OracleLog.isLoggingEnabled())     log.severe(e.toString());    throw SODAUtils.makeExceptionWithSQLText(e,sqltext);  } finally {    for (    String message : SODAUtils.closeCursor(stmt,null)) {      if (OracleLog.isLoggingEnabled())       log.severe(message);    }  }  return (desc);}  }
class C{  public void removeChild(IXMLElement child){  if (child == null) {    throw new IllegalArgumentException("child must not be null");  }  this.children.remove(child);}  }
class C{  public GoalDirectedStagedDeepening(INode goal,IScore eval){  super(null);  this.goal=goal;  this.eval=eval;}  }
class C{  protected void requireIUs(String... ius){  for (  String iu : ius) {    extension.getP2().addIU(iu);  }}  }
class C{  private boolean isRedirectingOutput(){  return Boolean.TRUE.equals(getRedirectOutput());}  }
class C{  private void dialogChanged(){  errorMsg=validateInputs();  updateStatus(errorMsg);}  }
class C{  public void removeSourceFolderFromIndex(JavaProject javaProject,IPath sourceFolder,char[][] inclusionPatterns,char[][] exclusionPatterns){  IProject project=javaProject.getProject();  if (this.jobEnd > this.jobStart) {    IndexRequest request=new IndexAllProject(project,this);    if (isJobWaiting(request))     return;  }  request(new RemoveFolderFromIndex(sourceFolder,inclusionPatterns,exclusionPatterns,project,this));}  }
class C{  public void testDivideRoundUpNeg(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="-1.24390557635720517122423359799284E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_UP);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  void createPressed(ActionEvent e){  String lightPrefix=ConnectionNameFromSystemName.getPrefixFromName((String)prefixBox.getSelectedItem()) + "L";  String turnoutPrefix=ConnectionNameFromSystemName.getPrefixFromName((String)prefixBox.getSelectedItem()) + "T";  String curAddress=fieldHardwareAddress.getText();  if (curAddress.length() < 1) {    log.warn("Hardware Address was not entered");    status1.setText(Bundle.getMessage("LightError17"));    status2.setVisible(false);    addFrame.pack();    addFrame.setVisible(true);    return;  }  String suName=lightPrefix + curAddress;  String uName=userName.getText();  if (uName.equals("")) {    uName=null;  }  if (!InstanceManager.lightManagerInstance().validSystemNameFormat(suName)) {    log.warn("Invalid Light system name format entered: " + suName);    status1.setText(Bundle.getMessage("LightError3"));    status2.setText(Bundle.getMessage("LightError6"));    status2.setVisible(true);    addFrame.pack();    addFrame.setVisible(true);    return;  }  String sName=InstanceManager.lightManagerInstance().normalizeSystemName(suName);  Light g=InstanceManager.lightManagerInstance().getBySystemName(sName);  if (g != null) {    status1.setText(Bundle.getMessage("LightError1"));    status2.setText(Bundle.getMessage("LightError2"));    status2.setVisible(true);    addFrame.pack();    addFrame.setVisible(true);    return;  }  String altName=InstanceManager.lightManagerInstance().convertSystemNameToAlternate(suName);  if (!altName.equals("")) {    g=InstanceManager.lightManagerInstance().getBySystemName(altName);    if (g != null) {      status1.setText(Bundle.getMessage("LightError10") + " '" + altName+ "' "+ Bundle.getMessage("LightError11"));      status2.setVisible(false);      addFrame.pack();      addFrame.setVisible(true);      return;    }  }  if (uName != null && !uName.equals("")) {    g=InstanceManager.lightManagerInstance().getByUserName(uName);    if (g != null) {      status1.setText(Bundle.getMessage("LightError8"));      status2.setText(Bundle.getMessage("LightError9"));      status2.setVisible(true);      addFrame.pack();      addFrame.setVisible(true);      return;    }  }  if (!InstanceManager.lightManagerInstance().validSystemNameConfig(sName)) {    status1.setText(Bundle.getMessage("LightError5"));    status2.setText(Bundle.getMessage("LightError6"));    status2.setVisible(true);    addFrame.pack();    addFrame.setVisible(true);    return;  }  String testSN=turnoutPrefix + curAddress;  Turnout testT=InstanceManager.turnoutManagerInstance().getBySystemName(testSN);  if (testT != null) {    log.warn("Requested Light " + sName + " uses same address as Turnout "+ testT);    if (!noWarn) {      int selectedValue=JOptionPane.showOptionDialog(addFrame,Bundle.getMessage("LightWarn5") + " " + sName+ " "+ Bundle.getMessage("LightWarn6")+ " "+ testSN+ ".\n   "+ Bundle.getMessage("LightWarn7"),Bundle.getMessage("WarningTitle"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{Bundle.getMessage("ButtonYes"),Bundle.getMessage("ButtonNo"),Bundle.getMessage("ButtonYesPlus")},Bundle.getMessage("ButtonNo"));      if (selectedValue == 1) {        return;      }      if (selectedValue == 2) {        noWarn=true;      }    }    status2.setText(Bundle.getMessage("LightWarn4") + " " + testSN+ ".");    status2.setVisible(true);  }  int numberOfLights=1;  int startingAddress=0;  if ((InstanceManager.lightManagerInstance().allowMultipleAdditions(sName)) && addRangeBox.isSelected() && (fieldNumToAdd.getText().length() > 0)) {    try {      numberOfLights=Integer.parseInt(fieldNumToAdd.getText());    } catch (    NumberFormatException ex) {      status1.setText(Bundle.getMessage("LightError4"));      status2.setVisible(false);      addFrame.pack();      addFrame.setVisible(true);      log.error("Unable to convert " + fieldNumToAdd.getText() + " to a number - Number to add");      return;    }    try {      startingAddress=Integer.parseInt(fieldHardwareAddress.getText());    } catch (    NumberFormatException ex) {      status1.setText(Bundle.getMessage("LightError18"));      status2.setVisible(false);      addFrame.pack();      addFrame.setVisible(true);      log.error("Unable to convert " + fieldHardwareAddress.getText() + " to a number.");      return;    }    int add=startingAddress;    String testAdd="";    for (int i=0; i < numberOfLights; i++) {      testAdd=lightPrefix + add;      if (InstanceManager.lightManagerInstance().getBySystemName(testAdd) != null) {        status1.setText(Bundle.getMessage("LightError19"));        status2.setVisible(true);        addFrame.pack();        addFrame.setVisible(true);        log.error("Range not available - " + testAdd + " already exists.");        return;      }      testAdd=turnoutPrefix + add;      if (InstanceManager.turnoutManagerInstance().getBySystemName(testAdd) != null) {        status1.setText(Bundle.getMessage("LightError19"));        status2.setVisible(true);        addFrame.pack();        addFrame.setVisible(true);        log.error("Range not available - " + testAdd + " already exists.");        return;      }      add++;    }  }  try {    g=InstanceManager.lightManagerInstance().newLight(sName,uName);  } catch (  IllegalArgumentException ex) {    handleCreateException(ex,sName);    return;  }  setLightControlInformation(g);  clearLightControls();  g.activateLight();  lightCreatedOrUpdated=true;  String p;  p=fieldMinIntensity.getText();  if (p.equals("")) {    p="1.0";  }  g.setMinIntensity(Double.parseDouble(p) / 100);  p=fieldMaxIntensity.getText();  if (p.equals("")) {    p="0.0";  }  g.setMaxIntensity(Double.parseDouble(p) / 100);  p=fieldTransitionTime.getText();  if (p.equals("")) {    p="0";  }  try {    g.setTransitionTime(Double.parseDouble(p));  } catch (  IllegalArgumentException e1) {    g.setTransitionTime(0.0);  }  String feedback=Bundle.getMessage("LightCreateFeedback") + " " + sName+ ", "+ uName;  if (numberOfLights > 1) {    String sxName="";    String uxName="";    if (uName == null) {      uxName=null;    }    for (int i=1; i < numberOfLights; i++) {      sxName=lightPrefix + (startingAddress + i);      if (uName != null) {        uxName=uName + "+" + i;      }      try {        g=InstanceManager.lightManagerInstance().newLight(sxName,uxName);      } catch (      IllegalArgumentException ex) {        handleCreateException(ex,sName);        return;      }    }    feedback=feedback + " - " + sxName+ ", "+ uxName;  }  status1.setText(feedback);  status2.setText("");  status2.setVisible(false);  addFrame.pack();  addFrame.setVisible(true);}  }
class C{  public Vec3 swap(Vec3 vector){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec3","swap","missingVector"));  }  double tmp=this.x;  this.x=vector.x;  vector.x=tmp;  tmp=this.y;  this.y=vector.y;  vector.y=tmp;  tmp=this.z;  this.z=vector.z;  vector.z=tmp;  return this;}  }
class C{  private void printProperties(Properties properties) throws IOException {  StringWriter stringBuffer=new StringWriter();  BufferedReader reader=null;  properties.store(stringBuffer,null);  try {    reader=new BufferedReader(new StringReader(stringBuffer.toString()));    reader.readLine();    String line=null;    while ((line=reader.readLine()) != null) {      writer.print("//");      writer.println(line);    }  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public CatalogEntryRemovedException(String message){  super(message);}  }
class C{  @Override public boolean isCaseSensitive(int columnIndex){  return true;}  }
class C{  public DriveRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public Object findRecursive(String... args){  NamedList<?> currentList=null;  Object value=null;  for (int i=0; i < args.length; i++) {    String key=args[i];    if (currentList == null) {      currentList=this;    } else {      if (value instanceof NamedList) {        currentList=(NamedList<?>)value;      } else {        value=null;        break;      }    }    value=currentList.get(key,0);  }  return value;}  }
class C{  private PaymentGatewayFac(){}  }
class C{  protected void log(String s){  if (mLog) {    Logger.global.fine(s);  }}  }
class C{  public void Done(){  nextCharBuf=null;  buffer=null;  bufline=null;  bufcolumn=null;}  }
class C{  public noscript addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public cudaGraphicsResource(){}  }
class C{  public CCSprite initSprite(CGRect rect){  CCSprite sprite=new CCSprite(textureAtlas_.getTexture(),rect);  sprite.useSpriteSheetRender(this);  return sprite;}  }
class C{  public static void fillAutoSaveList(ShoppingCart cart,LocalDispatcher dispatcher) throws GeneralException {  if (cart != null && dispatcher != null) {    GenericValue userLogin=ShoppingListEvents.getCartUserLogin(cart);    Delegator delegator=cart.getDelegator();    String autoSaveListId=cart.getAutoSaveListId();    if (autoSaveListId == null) {      autoSaveListId=getAutoSaveListId(delegator,dispatcher,null,userLogin,cart.getProductStoreId());      cart.setAutoSaveListId(autoSaveListId);    }    GenericValue shoppingList=EntityQuery.use(delegator).from("ShoppingList").where("shoppingListId",autoSaveListId).queryOne();    Integer currentListSize=0;    if (UtilValidate.isNotEmpty(shoppingList)) {      List<GenericValue> shoppingListItems=shoppingList.getRelated("ShoppingListItem",null,null,false);      if (UtilValidate.isNotEmpty(shoppingListItems)) {        currentListSize=shoppingListItems.size();      }    }    try {      String[] itemsArray=makeCartItemsArray(cart);      if (itemsArray != null && itemsArray.length != 0) {        addBulkFromCart(delegator,dispatcher,cart,userLogin,autoSaveListId,null,itemsArray,false,false);      } else       if (itemsArray.length == 0 && currentListSize != 0) {        clearListInfo(delegator,autoSaveListId);      }    } catch (    IllegalArgumentException e) {      throw new GeneralException(e.getMessage(),e);    }  }}  }
class C{  public EndUserNotificationParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {  try {    SAXParserFactory factory=SAXParserFactory.newInstance();    SAXParser parser=factory.newSAXParser();    parser.parse(mInputSource,this);    return this;  } catch (  IOException e) {    throw new ParseFailureException("Failed to parse input source!",e);  }}  }
class C{  public ConcurrentHashMapPro(int initialCapacity,float loadFactor,int concurrencyLevel){  if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)   throw new IllegalArgumentException();  if (concurrencyLevel > MAX_SEGMENTS)   concurrencyLevel=MAX_SEGMENTS;  int sshift=0;  int ssize=1;  while (ssize < concurrencyLevel) {    ++sshift;    ssize<<=1;  }  segmentShift=32 - sshift;  segmentMask=ssize - 1;  this.segments=Segment.newArray(ssize);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  int c=initialCapacity / ssize;  if (c * ssize < initialCapacity)   ++c;  int cap=1;  while (cap < c)   cap<<=1;  for (int i=0; i < this.segments.length; ++i)   this.segments[i]=new Segment<K,V>(cap,loadFactor);}  }
class C{  public JsonHttpResponseHandler(String encoding){  super(encoding);}  }
class C{  public static int safeMultiply(int val1,int val2){  long total=(long)val1 * (long)val2;  if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {    throw new ArithmeticException("The calculation caused an overflow: " + val1 + " * "+ val2);  }  return (int)total;}  }
class C{  private List<TagNode> closeSnippet(List nodeList,TagPos tagPos,Object toNode,CleanTimeValues cleanTimeValues){  List<TagNode> closed=new ArrayList<TagNode>();  ListIterator it=nodeList.listIterator(tagPos.position);  TagNode tagNode=null;  Object item=it.next();  boolean isListEnd=false;  while ((toNode == null && !isListEnd) || (toNode != null && item != toNode)) {    if (Thread.currentThread().isInterrupted()) {      handleInterruption();      return closed;    }    if (isStartToken(item)) {      TagNode startTagToken=(TagNode)item;      closed.add(startTagToken);      List itemsToMove=startTagToken.getItemsToMove();      if (itemsToMove != null) {        pushNesting(cleanTimeValues);        makeTree(itemsToMove,itemsToMove.listIterator(0),cleanTimeValues);        closeAll(itemsToMove,cleanTimeValues);        startTagToken.setItemsToMove(null);        popNesting(cleanTimeValues);      }      TagNode newTagNode=createTagNode(startTagToken);      TagInfo tag=getTagInfo(newTagNode.getName(),cleanTimeValues);      addPossibleHeadCandidate(tag,newTagNode,cleanTimeValues);      if (tagNode != null) {        tagNode.addChildren(itemsToMove);        tagNode.addChild(newTagNode);        it.set(null);      } else {        if (itemsToMove != null) {          itemsToMove.add(newTagNode);          it.set(itemsToMove);        } else {          it.set(newTagNode);        }      }      getOpenTags(cleanTimeValues).removeTag(newTagNode.getName());      tagNode=newTagNode;    } else {      if (tagNode != null) {        it.set(null);        if (item != null) {          tagNode.addChild(item);        }      }    }    if (it.hasNext()) {      item=it.next();    } else {      isListEnd=true;    }  }  return closed;}  }
class C{  @VisibleForTesting public Mapper(Map<Class,List<Class<? extends BindableLayout>>> mockMapping,Map<Integer,Class<? extends BindableLayout>> mockViewTypes){  this.mapping=mockMapping;  this.viewTypes=mockViewTypes;  this.viewTypePositions=new HashMap<>();}  }
class C{  public static String format(long value,int decimalPlaces,boolean base2){  NumberFormat nf=NumberFormat.getInstance();  nf.setMinimumFractionDigits(decimalPlaces);  double doubleResult;  String unit=base2 ? UNIT_BASE : "";  double multiplierKilo=multiplier(PREFIX_KILO,base2);  double multiplierMega=multiplier(PREFIX_MEGA,base2);  double multiplierGiga=multiplier(PREFIX_GIGA,base2);  double multiplierTera=multiplier(PREFIX_TERA,base2);  double multiplierPeta=multiplier(PREFIX_PETA,base2);  if (value < multiplierKilo) {    doubleResult=value;    nf.setMinimumFractionDigits(0);  } else   if (value >= multiplierKilo && value < multiplierMega) {    doubleResult=round(value / multiplierKilo,decimalPlaces);    unit=PREFIX_KILO + unit;  } else   if (value >= multiplierMega && value < multiplierGiga) {    doubleResult=round(value / multiplierMega,decimalPlaces);    unit=PREFIX_MEGA + unit;  } else   if (value >= multiplierGiga && value < multiplierTera) {    doubleResult=round(value / multiplierGiga,decimalPlaces);    unit=PREFIX_GIGA + unit;  } else   if (value >= multiplierTera && value < multiplierPeta) {    doubleResult=round(value / multiplierTera,decimalPlaces);    unit=PREFIX_TERA + unit;  } else {    doubleResult=round(value / multiplierPeta,decimalPlaces);    unit=PREFIX_PETA + unit;  }  return nf.format(doubleResult) + (base2 ? " " : "") + unit;}  }
class C{  private void readFromNet() throws IgniteCheckedException {  try {    inNetBuf.clear();    int read=ch.read(inNetBuf);    if (read == -1)     throw new IgniteCheckedException("Failed to read remote node response (connection closed).");  } catch (  IOException e) {    throw new IgniteCheckedException("Failed to write byte to socket.",e);  }}  }
class C{  public static String debugCursor(Cursor cursor,int maxRows,String delim,String... colmnNames){  StringBuilder result=new StringBuilder();  if ((cursor != null) && (!cursor.isClosed())) {    int last=Math.min(maxRows - 1,cursor.getCount() - 1);    for (int position=0; position <= last; position++) {      result.append("#").append(position);      cursor.moveToPosition(position);      for (      String col : colmnNames) {        result.append(";").append(cursor.getString(cursor.getColumnIndex(col)));      }      result.append(delim);    }  }  return result.toString();}  }
class C{  public Comparator comparator(){  return m.comparator();}  }
class C{  public void testMethodOnInstanceMemberDependencies() throws Exception {  checkMembers("method_depends_on_instance_field_bar(self)");  Assert.assertThat("Instance on member dependencies failed",getErrorMemberNames(),Matchers.containsInAnyOrder("self.instance_field_bar"));}  }
class C{  public static ShortBuffer allocate(int capacity){  if (capacity < 0) {    throw new IllegalArgumentException();  }  ByteBuffer bb=ByteBuffer.allocateDirect(capacity * 2);  bb.order(ByteOrder.nativeOrder());  return bb.asShortBuffer();}  }
class C{  public static WaitContainerParams create(@NotNull String container){  return new WaitContainerParams().withContainer(container);}  }
class C{  private static int type(final ClassWriter cw,final String desc){  String t;  int index=desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0;switch (desc.charAt(index)) {case 'V':    return 0;case 'Z':case 'C':case 'B':case 'S':case 'I':  return INTEGER;case 'F':return FLOAT;case 'J':return LONG;case 'D':return DOUBLE;case 'L':t=desc.substring(index + 1,desc.length() - 1);return OBJECT | cw.addType(t);default :int data;int dims=index + 1;while (desc.charAt(dims) == '[') {++dims;}switch (desc.charAt(dims)) {case 'Z':data=BOOLEAN;break;case 'C':data=CHAR;break;case 'B':data=BYTE;break;case 'S':data=SHORT;break;case 'I':data=INTEGER;break;case 'F':data=FLOAT;break;case 'J':data=LONG;break;case 'D':data=DOUBLE;break;default :t=desc.substring(dims + 1,desc.length() - 1);data=OBJECT | cw.addType(t);}return (dims - index) << 28 | data;}}  }
class C{  public R paramsToJsonEntity(String elapsedFieldInJsonStreamer){  try {    mHttpEntity=createJsonStreamerEntity(elapsedFieldInJsonStreamer);  } catch (  IOException e) {    e.printStackTrace();  }  return (R)this;}  }
class C{  private double computeClusterQuality(int clusterSize,int numRelevantDimensions){  return clusterSize * Math.pow(1. / beta,numRelevantDimensions);}  }
class C{  public ConcurrentWriteLockedOffHeapHashMap(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory,long tableSize,int concurrency){  super(new WriteLockedOffHeapHashMapFactory<K,V>(tableSource,storageEngineFactory,(int)(tableSize / concurrency)),concurrency);}  }
class C{  public void testConstructorSignBytesZero3(){  byte aBytes[]={-0,0,+0,0,0,00,000};  int aSign=1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  public void testFormatInfinitySP(){  mFReal=new FormatReal(2,2);  clearStrBuffer();  mStr=mFReal.format(mStrBuff,Float.POSITIVE_INFINITY).toString();  assertEquals("Should be Infinity","#Infinity#",mStr);}  }
class C{  protected void removeFromPortMap(IOFSwitch sw,MacAddress mac,VlanVid vlan){  if (vlan == VlanVid.FULL_MASK) {    vlan=VlanVid.ofVlan(0);  }  Map<MacVlanPair,OFPort> swMap=macVlanToSwitchPortMap.get(sw);  if (swMap != null) {    swMap.remove(new MacVlanPair(mac,vlan));  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.STATE_SPECIFICATION__SCOPE:    setScope((Scope)null);  return;}super.eUnset(featureID);}  }
class C{  public static boolean shutdownExecutorService(final ExecutorService es){  es.shutdown();  try {    return es.awaitTermination(100l,TimeUnit.SECONDS);  } catch (  final InterruptedException ie) {    ie.printStackTrace();    Thread.currentThread().interrupt();    return false;  }}  }
class C{  protected static void showNotification(Context context,NotificationId notificationId,@DrawableRes int iconResource,String title,CharSequence content,PendingIntent viewIntent,PendingIntent deleteIntent){  Notification notification=new NotificationCompat.Builder(context).setSmallIcon(iconResource).setPriority(NotificationCompat.PRIORITY_LOW).setCategory(NotificationCompat.CATEGORY_SOCIAL).setContentTitle(title).setContentText(content).setStyle(new NotificationCompat.BigTextStyle().bigText(content)).setContentIntent(viewIntent).setDeleteIntent(deleteIntent).setAutoCancel(true).build();  showNotification(context,notificationId,notification);}  }
class C{  public Container iface(String name,String expression){  this.interfaces.add(new Interface(name,expression));  return this;}  }
class C{  public float[] generateTransformedValuesLine(List<? extends Entry> entries,float phaseX,float phaseY,int from,int to){  final int count=(int)Math.ceil((to - from) * phaseX) * 2;  float[] valuePoints=new float[count];  for (int j=0; j < count; j+=2) {    Entry e=entries.get(j / 2 + from);    if (e != null) {      valuePoints[j]=e.getXIndex();      valuePoints[j + 1]=e.getVal() * phaseY;    }  }  pointValuesToPixel(valuePoints);  return valuePoints;}  }
class C{  @LargeTest public void testNavigationByParentFirstChild() throws Exception {  sExecutedTestCount++;  String html="<!DOCTYPE html>" + "<html>" + "<head>"+ "</head>"+ "<body>"+ "<div>"+ "<button>Input</button>"+ "</div>"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_LEFT,META_STATE_ALT_LEFT_ON);  assertSelectionString("6");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_LEFT,META_STATE_ALT_LEFT_ON);  assertSelectionString("5");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<div><button>Input</button></div>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<button>Input</button>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<div><button>Input</button></div>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<body><div><button>Input</button></div></body>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<div><button>Input</button></div>");}  }
class C{  @Override public MessageConsumer retrieve(){  return vertx.eventBus().consumer(record().getLocation().getString(Record.ENDPOINT));}  }
class C{  public NumberFormatter(NumberFormat format){  super(format);  setFormat(format);  setAllowsInvalid(true);  setCommitsOnValidEdit(false);  setOverwriteMode(false);}  }
class C{  public static boolean equal(Object a,Object b){  return a == b || (a != null && a.equals(b));}  }
class C{  public FilterTermsEnum(TermsEnum in){  if (in == null) {    throw new NullPointerException("incoming TermsEnum must not be null");  }  this.in=in;}  }
class C{  private int activeSigningKeyCount(){  Object activeKeyProperty=config.getProperty(ACTIVE_SIGNING_KEY_ID);  if (activeKeyProperty instanceof ArrayList) {    return ((ArrayList<?>)activeKeyProperty).size();  }  return activeKeyProperty != null ? 1 : 0;}  }
class C{  public DateColumn date(){  DateColumn newColumn=DateColumn.create(this.name() + " date");  for (int r=0; r < this.size(); r++) {    long c1=this.getLong(r);    if (c1 == MISSING_VALUE) {      newColumn.add(DateColumn.MISSING_VALUE);    } else {      newColumn.add(PackedLocalDateTime.date(c1));    }  }  return newColumn;}  }
class C{  @GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public VirtualPoolList listObjectVirtualPool(@DefaultValue("") @QueryParam(TENANT_ID_QUERY_PARAM) String tenantId,@DefaultValue("") @QueryParam(VDC_ID_QUERY_PARAM) String shortVdcId){  _geoHelper.verifyVdcId(shortVdcId);  return getVirtualPoolList(VirtualPool.Type.object,shortVdcId,tenantId);}  }
class C{  public void testTableAcceptWithFile() throws ReplicatorException, InterruptedException {  ReplicateFilter rf=new ReplicateFilter();  rf.setTungstenSchema("tungsten_foo");  rf.setFilePrefix("filter/testTableAcceptWithFile");  filterHelper.setFilter(rf);  verifyStmtAccept(filterHelper,0,"bar","insert into foo.test values(1)");  verifyStmtAccept(filterHelper,1,"foo","delete from test1 where id=1");  verifyStmtAccept(filterHelper,2,"bar","insert into wild1 values(1)");  verifyStmtAccept(filterHelper,3,"bar","update w2 set age=29");  verifyStmtIgnore(filterHelper,4,null,"create database foo");  verifyStmtIgnore(filterHelper,5,"bar","insert into test2 values(1)");  verifyStmtIgnore(filterHelper,6,"bar","create table will1 (id int)");  verifyStmtIgnore(filterHelper,7,"bar","delete from w22");  filterHelper.done();}  }
class C{  public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  String mangleName;synchronized (_mangleMap) {    mangleName=_mangleMap.get(method);  }  if (mangleName == null) {    String methodName=method.getName();    Class<?>[] params=method.getParameterTypes();    if (methodName.equals("equals") && params.length == 1 && params[0].equals(Object.class)) {      Object value=args[0];      if (value == null || !Proxy.isProxyClass(value.getClass()))       return Boolean.FALSE;      Object proxyHandler=Proxy.getInvocationHandler(value);      if (!(proxyHandler instanceof HessianProxy))       return Boolean.FALSE;      HessianProxy handler=(HessianProxy)proxyHandler;      return new Boolean(_url.equals(handler.getURL()));    } else     if (methodName.equals("hashCode") && params.length == 0)     return new Integer(_url.hashCode()); else     if (methodName.equals("getHessianType"))     return proxy.getClass().getInterfaces()[0].getName(); else     if (methodName.equals("getHessianURL"))     return _url.toString(); else     if (methodName.equals("toString") && params.length == 0)     return "HessianProxy[" + _url + "]";    if (!_factory.isOverloadEnabled())     mangleName=method.getName(); else     mangleName=mangleName(method);synchronized (_mangleMap) {      _mangleMap.put(method,mangleName);    }  }  InputStream is=null;  HessianConnection conn=null;  try {    if (log.isLoggable(Level.FINER))     log.finer("Hessian[" + _url + "] calling "+ mangleName);    conn=sendRequest(mangleName,args);    is=getInputStream(conn);    if (log.isLoggable(Level.FINEST)) {      PrintWriter dbg=new PrintWriter(new LogWriter(log));      HessianDebugInputStream dIs=new HessianDebugInputStream(is,dbg);      dIs.startTop2();      is=dIs;    }    AbstractHessianInput in;    int code=is.read();    if (code == 'H') {      int major=is.read();      int minor=is.read();      in=_factory.getHessian2Input(is);      Object value=in.readReply(method.getReturnType());      return value;    } else     if (code == 'r') {      int major=is.read();      int minor=is.read();      in=_factory.getHessianInput(is);      in.startReplyBody();      Object value=in.readObject(method.getReturnType());      if (value instanceof InputStream) {        value=new ResultInputStream(conn,is,in,(InputStream)value);        is=null;        conn=null;      } else       in.completeReply();      return value;    } else     throw new HessianProtocolException("'" + (char)code + "' is an unknown code");  } catch (  HessianProtocolException e) {    throw new HessianRuntimeException(e);  } finally {    try {      if (is != null)       is.close();    } catch (    Exception e) {      log.log(Level.FINE,e.toString(),e);    }    try {      if (conn != null)       conn.destroy();    } catch (    Exception e) {      log.log(Level.FINE,e.toString(),e);    }  }}  }
class C{  public long timeOfLastKeepalive(){  return timeOfLastKeepalive;}  }
class C{  public void remove(String name){  if (impl.formalArguments == null) {    if (impl.hasFormalArgs) {      throw new IllegalArgumentException("no such attribute: " + name);    }    return;  }  FormalArgument arg=impl.formalArguments.get(name);  if (arg == null) {    throw new IllegalArgumentException("no such attribute: " + name);  }  locals[arg.index]=EMPTY_ATTR;}  }
class C{  public static String readString(Reader r,int maxChars) throws IOException {  char[] charBuf=new char[maxChars];  int charsRead=readChars(r,charBuf);  return new String(charBuf,0,charsRead);}  }
class C{  public static void main(String... args) throws Exception {  String baseDir="src/docsrc/textbase";  prepare(baseDir,"src/main/org/h2/res",true);  prepare(baseDir,"src/main/org/h2/server/web/res",true);  PropertiesToUTF8.textUTF8ToProperties("src/docsrc/text/_docs_de.utf8.txt","src/docsrc/text/_docs_de.properties");  PropertiesToUTF8.textUTF8ToProperties("src/docsrc/text/_docs_ja.utf8.txt","src/docsrc/text/_docs_ja.properties");  extractFromHtml("docs/html","src/docsrc/text");  prepare(baseDir,"src/docsrc/text",false);  buildHtml("src/docsrc/text","docs/html","en");  PropertiesToUTF8.propertiesToTextUTF8("src/docsrc/text/_docs_en.properties","src/docsrc/text/_docs_en.utf8.txt");  PropertiesToUTF8.propertiesToTextUTF8("src/docsrc/text/_docs_de.properties","src/docsrc/text/_docs_de.utf8.txt");  PropertiesToUTF8.propertiesToTextUTF8("src/docsrc/text/_docs_ja.properties","src/docsrc/text/_docs_ja.utf8.txt");  for (  File f : new File("src/docsrc/text").listFiles()) {    if (!f.getName().endsWith(".utf8.txt")) {      f.delete();    }  }}  }
class C{  private boolean isDictionaryMetaFileModified(CarbonFile carbonFile,long fileTimeStamp,long endOffset){  return carbonFile.isFileModified(fileTimeStamp,endOffset);}  }
class C{  public static boolean isValidImportString(String s){  if (s.equals("*"))   return true;  boolean valid=true;  String t=s;  int index=t.indexOf('*');  if (index != -1) {    if (index == t.length() - 1) {      if (index - 1 >= 0) {        valid=t.charAt(index - 1) == '.';        t=t.substring(0,t.length() - 2);      }    } else     return false;  }  if (valid) {    String[] javaIds=t.split("\\.",t.length() + 2);    for (    String javaId : javaIds)     valid&=SourceVersion.isIdentifier(javaId);  }  return valid;}  }
class C{  public boolean isWatched(){  return watched;}  }
class C{  public void addNew(String text,SARTrack owner){  if (text == null)   text=showAnnotationDialog("Add New Annotation",null);  OrbitView view=(OrbitView)this.wwd.getView();  if (text != null && text.length() > 0 && view != null) {    Position centerPosition=new Position(view.getCenterPosition(),0);    SARAnnotation annotation=new SARAnnotation(text,centerPosition);    addNew(annotation,owner);    select(annotation);  }}  }
class C{  private boolean isRecoverPointInitiator(String portWWN){  return portWWN.contains(RECOVERPOINT_INITIATOR_PREFIX);}  }
class C{  public ResourceFilter exclude(){  return addFilter(ResourceFilter.exclude());}  }
class C{  public Script freshOutputScript(KeyPurpose purpose){  throw new UnsupportedOperationException();}  }
class C{  boolean isUndeploy(){  return isUndeploy;}  }
class C{  public boolean drawImage(Image img,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,ImageObserver observer){  DebugGraphicsInfo info=info();  if (debugLog()) {    info.log(toShortString() + " Drawing image: " + img+ " destination: "+ new Rectangle(dx1,dy1,dx2,dy2)+ " source: "+ new Rectangle(sx1,sy1,sx2,sy2));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,observer);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    int i, count=(info.flashCount * 2) - 1;    ImageProducer oldProducer=img.getSource();    ImageProducer newProducer=new FilteredImageSource(oldProducer,new DebugGraphicsFilter(info.flashColor));    Image newImage=Toolkit.getDefaultToolkit().createImage(newProducer);    DebugGraphicsObserver imageObserver=new DebugGraphicsObserver();    Image imageToDraw;    for (i=0; i < count; i++) {      imageToDraw=(i % 2) == 0 ? newImage : img;      loadImage(imageToDraw);      graphics.drawImage(imageToDraw,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,imageObserver);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }  }  return graphics.drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,observer);}  }
class C{  @Transient public boolean isActive(){  if (!this.getIsFilled() && !OrderStatus.CANCELLED.equals(this.getStatus()) && !OrderStatus.INACTIVE.equals(this.getStatus()))   return true;  return false;}  }
class C{  private PropertyChangeListener createHSBPropertyChangeListener(){  return getHandler();}  }
class C{  public RationalQuadraticKernel(double c){  this.c=c;}  }
class C{  private void sortList(Context context) throws JSONException {  ensureOrderer(context);  final Map<String,Integer> order=mOrderer.getOrder();  if (order != null) {    Collections.sort(mPlaylists,new PlaylistListAdapter.PlaylistSort(order));  }}  }
class C{  @ReactMethod public void canShow(Promise promise){  promise.resolve(GameRequestDialog.canShow());}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  public static String resolveProperty(final String attribute,final String defaultValue,final String frameworkProject,final Framework framework,final INodeEntry node,final Map<String,Object> jobConf){  if (jobConf != null && jobConf.containsKey(attribute)) {    return (String)jobConf.get(attribute);  } else   if (node != null && null != node.getAttributes().get(attribute)) {    return node.getAttributes().get(attribute);  } else   if (framework.hasProjectProperty(AnsibleDescribable.PROJ_PROP_PREFIX + attribute,frameworkProject) && !"".equals(framework.getProjectProperty(frameworkProject,AnsibleDescribable.PROJ_PROP_PREFIX + attribute))) {    return framework.getProjectProperty(frameworkProject,AnsibleDescribable.PROJ_PROP_PREFIX + attribute);  } else   if (framework.hasProperty(AnsibleDescribable.FWK_PROP_PREFIX + attribute)) {    return framework.getProperty(AnsibleDescribable.FWK_PROP_PREFIX + attribute);  } else {    return defaultValue;  }}  }
class C{  public void load(File file) throws IOException {  final ClusterTypeOp quantiserType=ClusterType.sniffClusterType(file);  quantiser=IOUtils.read(file,quantiserType.getClusterClass());}  }
class C{  public boolean isShapeFilled(){  return this.shapeFilled;}  }
class C{  protected void stopBridgeServer(Cache cache){  CacheServer bridge=(CacheServer)cache.getCacheServers().iterator().next();  bridge.stop();  assertFalse(bridge.isRunning());}  }
class C{  private void updateTickLabelMaxLengthAndHeight(){  int maxLength=0;  int maxHeight=0;  for (int i=0; i < tickLabels.size(); i++) {    if (tickVisibilities.size() > i && tickVisibilities.get(i) == true) {      Dimension p=FigureUtilities.getTextExtents(tickLabels.get(i),scale.getFont());      if (tickLabels.get(0).startsWith("-") && !tickLabels.get(i).startsWith("-")) {        p.width+=FigureUtilities.getTextExtents("-",getFont()).width;      }      if (p.width > maxLength) {        maxLength=p.width;      }      if (p.height > maxHeight) {        maxHeight=p.height;      }    }  }  tickLabelMaxLength=maxLength;  tickLabelMaxHeight=maxHeight;}  }
class C{  private static long finalMix64(long h){  h^=h >>> 33;  h*=0xff51afd7ed558ccdL;  h^=h >>> 33;  h*=0xc4ceb9fe1a85ec53L;  h^=h >>> 33;  return h;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean success;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  success=domImpl.hasFeature("Blah Blah","");  assertFalse("domimplementationhasfeature02",success);}  }
class C{  public SPConfiguration(String alias,String entityID,boolean authnRequestsSigned,PrivateKey signingPrivateKey,X509Certificate signingCertificate,String signingAlgorithmName,List<String> nameIDFormats,List<AssertionConsumerService> assertionConsumerServices,List<SingleLogoutService> singleLogoutServices){  this.alias=alias;  this.entityID=entityID;  this.authnRequestsSigned=authnRequestsSigned;  this.signingPrivateKey=signingPrivateKey;  this.signingCertificate=signingCertificate;  this.nameIDFormats=nameIDFormats;  this.signingAlgorithm=signingAlgorithmName;  this.assertionConsumerServices=assertionConsumerServices;  this.singleLogoutServices=singleLogoutServices;}  }
class C{  private Response generateResponse(String spEntId,Document tokenDoc){  Response retval=null;  Validate.notNull(this.validationResult);  if (this.validationResult.getResponseCode() == HttpServletResponse.SC_OK) {    try {      Validate.notNull(this.idmAccessor,"idmAccessor");      SamlService service=this.createSamlServiceForTenant(spEntId);      String translatedMessage=this.validationResult.getMessage(messageSource,locale);      String acsUrl=idmAccessor.getAcsForRelyingParty(spEntId,null,null,SAMLNames.HTTP_POST_BINDING,false);      retval=service.createSamlResponse(this.inResponseTo,acsUrl,this.validationResult.getStatus(),this.validationResult.getSubstatus(),translatedMessage,tokenDoc);    } catch (    Exception e) {      log.error("Caught exception while generating response " + ", will respond with error 500",e);      this.validationResult=new ValidationResult(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,OasisNames.RESPONDER,null);      return null;    }  }  return retval;}  }
class C{  public Bitmap loadBitmap(String uri,int reqWidth,int reqHeight){  Bitmap bitmap=loadBitmapFromMemCache(uri);  if (bitmap != null) {    Log.d(TAG,"loadBitmapFromMemCache,url:" + uri);    return bitmap;  }  try {    bitmap=loadBitmapFromDiskCache(uri,reqWidth,reqHeight);    if (bitmap != null) {      Log.d(TAG,"loadBitmapFromDisk,url:" + uri);      return bitmap;    }    bitmap=loadBitmapFromHttp(uri,reqWidth,reqHeight);    Log.d(TAG,"loadBitmapFromHttp,url:" + uri);  } catch (  IOException e) {    e.printStackTrace();  }  if (bitmap == null && !mIsDiskLruCacheCreated) {    Log.w(TAG,"encounter error, DiskLruCache is not created.");    bitmap=downloadBitmapFromUrl(uri);  }  return bitmap;}  }
class C{  public IndonesianAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  Collection<Var> outputs(boolean pack){  if (pack) {    Set<Var> groupby_outputs=Sets.newHashSet(outputs);    groupby_outputs.removeAll(aggregate);    groupby_outputs.addAll(groupby);    return groupby_outputs;  } else {    return groupby;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowTVPlayer.setForceDeinterlace(DShowTVPlayer.getDeinterlaceCode(getString(stack)));  return null;}  }
class C{  @Override public boolean isInstantiable(){  return false;}  }
class C{  private void checkAndInsert(MailAddress senderMailAddress,Collection<MailAddress> recipients) throws MessagingException {  String senderUser=senderMailAddress.getLocalPart().toLowerCase(Locale.US);  String senderHost=senderMailAddress.getDomain().toLowerCase(Locale.US);  senderUser=getPrimaryName(senderUser);  Connection conn=null;  PreparedStatement selectStmt=null;  PreparedStatement insertStmt=null;  boolean dbUpdated=false;  try {    for (    MailAddress recipient : recipients) {      ResultSet selectRS=null;      try {        String recipientUser=recipient.getLocalPart().toLowerCase(Locale.US);        String recipientHost=recipient.getDomain().toLowerCase(Locale.US);        if (getMailetContext().isLocalServer(recipientHost)) {          continue;        }        if (conn == null) {          conn=datasource.getConnection();        }        if (selectStmt == null) {          selectStmt=conn.prepareStatement(selectByPK);        }        selectStmt.setString(1,senderUser);        selectStmt.setString(2,senderHost);        selectStmt.setString(3,recipientUser);        selectStmt.setString(4,recipientHost);        selectRS=selectStmt.executeQuery();        if (selectRS.next()) {          continue;        }        if (insertStmt == null) {          insertStmt=conn.prepareStatement(insert);        }        insertStmt.setString(1,senderUser);        insertStmt.setString(2,senderHost);        insertStmt.setString(3,recipientUser);        insertStmt.setString(4,recipientHost);        insertStmt.executeUpdate();        dbUpdated=true;      }  finally {        theJDBCUtil.closeJDBCResultSet(selectRS);      }      if (conn != null && dbUpdated && !conn.getAutoCommit()) {        conn.commit();        dbUpdated=false;      }    }  } catch (  SQLException sqle) {    log("Error accessing database",sqle);    throw new MessagingException("Exception thrown",sqle);  } finally {    theJDBCUtil.closeJDBCStatement(selectStmt);    theJDBCUtil.closeJDBCStatement(insertStmt);    try {      if (conn != null && dbUpdated && !conn.getAutoCommit()) {        conn.rollback();        dbUpdated=false;      }    } catch (    Exception e) {    }    theJDBCUtil.closeJDBCConnection(conn);  }}  }
class C{  public static void unlockOrientation(Activity activity){  activity.setRequestedOrientation(getManifestOrientation(activity));}  }
class C{  public void renderNormals(GL2 gl){  gl.glColor4fv(Preferences.getBodyNormalColor(),0);  int fSize=this.getFixtureCount();  for (int i=0; i < fSize; i++) {    BodyFixture bf=this.getFixture(i);    Convex convex=bf.getShape();    if (convex instanceof Wound) {      Wound w=(Wound)convex;      Vector2[] vertices=w.getVertices();      Vector2[] normals=w.getNormals();      int size=normals.length;      Vector2 p1, p2, n;      Vector2 mid=new Vector2();      for (int j=0; j < size; j++) {        p1=vertices[j];        p2=vertices[(j + 1 == size) ? 0 : j + 1];        n=normals[j];        mid.set(p2).subtract(p1).multiply(0.5).add(p1);        gl.glBegin(GL.GL_LINES);        gl.glVertex2d(mid.x,mid.y);        gl.glVertex2d(mid.x + n.x * 0.1,mid.y + n.y * 0.1);        gl.glEnd();      }    }  }}  }
class C{  StreamCopier(InputStream from,PrintWriter to){  super(Thread.currentThread().getName() + "_StreamCopier_" + (serial++));  in=new BufferedReader(new InputStreamReader(from));  out=to;}  }
class C{  public boolean contains(String fileName){  if (fileName.startsWith(shareName + File.separator) || fileName.substring(1).startsWith(shareName + File.separator) || fileName.substring(1).toUpperCase().startsWith(shareName + File.separator)|| fileName.equals(shareName)|| fileName.toUpperCase().equals(shareName)|| fileName.substring(1).equals(shareName)) {    return true;  }  return false;}  }
class C{  public static int mixMono(int value1,int value2){  return clampMono(value1 + value2);}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  @SuppressWarnings("rawtypes") public static <R>IFilter newInstance(final IFilterTest test){  if (test == null)   return null;  return new ElementFilter(test);}  }
class C{  public static List<File> writeRemainingFiles(String outputRemainingFolder,List<File> validationList,String inputFolder){  File input=new File(inputFolder);  File[] fileArr=input.listFiles(FileUtils.getFileFilter(".xml.gz"));  List<File> remainingFileList=new ArrayList<File>();  List<File> originalList=new ArrayList<File>(fileArr.length);  for (  File file : fileArr) {    originalList.add(file);  }  File validation_remaining=new File(outputRemainingFolder);  if (validation_remaining.exists()) {    LOG.warn("The output folder exists and will be deleted.");    LOG.warn("  --> " + validation_remaining.getAbsolutePath());    FileUtils.delete(validation_remaining);  }  validation_remaining.mkdirs();  for (  File file : originalList) {    if (!validationList.contains(file)) {      remainingFileList.add(file);    }  }  for (  File file : remainingFileList) {    String fileName=file.getName();    File newFile=new File(outputRemainingFolder + "\\" + fileName);    IOUtils.copyFile(file,newFile);  }  return remainingFileList;}  }
class C{  public EqualsResult append(final Object[] lhs,final Object[] rhs){  if (!isEqual) {    return this;  }  if (lhs == rhs) {    return this;  }  if (lhs == null || rhs == null) {    this.setEquals(false);    return this;  }  if (lhs.length != rhs.length) {    this.setEquals(false);    return this;  }  for (int i=0; i < lhs.length && isEqual; ++i) {    append(lhs[i],rhs[i]);  }  return this;}  }
class C{  @Override public void after(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){}  }
class C{  public FgsOld(ICovarianceMatrix covMatrix){  if (verbose) {    out.println("GES constructor");  }  SemBicScore score=new SemBicScore(covMatrix);  score.setPenaltyDiscount(2.0);  setScore(score);  this.graph=new EdgeListGraphSingleConnections(getVariables());  if (verbose) {    out.println("GES constructor done");  }}  }
class C{  @Override public void refresh(){}  }
class C{  void register(Object listener){  Multimap<Class<?>,Subscriber> listenerMethods=findAllSubscribers(listener);  for (  Map.Entry<Class<?>,Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {    Class<?> eventType=entry.getKey();    Collection<Subscriber> eventMethodsInListener=entry.getValue();    CopyOnWriteArraySet<Subscriber> eventSubscribers=subscribers.get(eventType);    if (eventSubscribers == null) {      CopyOnWriteArraySet<Subscriber> newSet=new CopyOnWriteArraySet<Subscriber>();      eventSubscribers=MoreObjects.firstNonNull(subscribers.putIfAbsent(eventType,newSet),newSet);    }    eventSubscribers.addAll(eventMethodsInListener);  }}  }
class C{  public final boolean post(@NonNull Runnable r){  return mExec.post(wrapRunnable(r));}  }
class C{  public void add(ActionValidator validator){  validators.add(validator);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String userId=getUserId(request);  DatastoreUtils datastoreUtils=new DatastoreUtils(userId);  printPage(response,datastoreUtils.getUserLastRunMessage());  if (!datastoreUtils.hasUserEntity() || datastoreUtils.hasUserQueryFailed()) {    runQuery(request,response,userId,datastoreUtils);  }}  }
class C{  private boolean checkServices(int total,int maxPerNode,int gridIdx,boolean lastTry) throws Exception {  IgniteEx grid=grid(gridIdx);  IgniteInternalCache<GridServiceAssignmentsKey,GridServiceAssignments> cache=grid.utilityCache();  GridServiceAssignments assignments=cache.get(new GridServiceAssignmentsKey("testService"));  Collection<UUID> nodes=F.viewReadOnly(grid.cluster().nodes(),F.node2id());  assertNotNull("Grid assignments object is null",assignments);  int sum=0;  for (  Map.Entry<UUID,Integer> entry : assignments.assigns().entrySet()) {    UUID nodeId=entry.getKey();    if (!lastTry && !nodes.contains(nodeId))     return false;    assertTrue("Dead node is in assignments: " + nodeId,nodes.contains(nodeId));    Integer nodeCnt=entry.getValue();    if (maxPerNode > 0)     assertTrue("Max per node limit exceeded [nodeId=" + nodeId + ", max="+ maxPerNode+ ", actual="+ nodeCnt,nodeCnt <= maxPerNode);    sum+=nodeCnt;  }  if (total > 0)   assertTrue("Total number of services limit exceeded [sum=" + sum + ", assigns="+ assignments.assigns()+ ']',sum <= total);  if (!lastTry && proxy(grid).get() != 10)   return false;  assertEquals(10,proxy(grid).get());  return true;}  }
class C{  public void unsubscribeFromViewEvent(Class<? extends SystemEvent> systemEvent,SystemEventListener listener){  if (systemEvent == null) {    throw new NullPointerException();  }  if (listener == null) {    throw new NullPointerException();  }  if (viewListeners != null) {    List<SystemEventListener> listeners=viewListeners.get(systemEvent);    if (listeners != null) {      listeners.remove(listener);    }  }}  }
class C{  public CompositeAction(Visualization vis,long duration){  super(vis,duration,Activity.DEFAULT_STEP_TIME);}  }
class C{  private List<Extension> findExtensions(String scope){  String[] orders=null;  String orderlist=conf.get("urlnormalizer.order." + scope);  if (orderlist == null)   orderlist=conf.get("urlnormalizer.order");  if (orderlist != null && !orderlist.trim().equals("")) {    orders=orderlist.trim().split("\\s+");  }  String scopelist=conf.get("urlnormalizer.scope." + scope);  Set<String> impls=null;  if (scopelist != null && !scopelist.trim().equals("")) {    String[] names=scopelist.split("\\s+");    impls=new HashSet<String>(Arrays.asList(names));  }  Extension[] extensions=this.extensionPoint.getExtensions();  HashMap<String,Extension> normalizerExtensions=new HashMap<String,Extension>();  for (int i=0; i < extensions.length; i++) {    Extension extension=extensions[i];    if (impls != null && !impls.contains(extension.getClazz()))     continue;    normalizerExtensions.put(extension.getClazz(),extension);  }  List<Extension> res=new ArrayList<Extension>();  if (orders == null) {    res.addAll(normalizerExtensions.values());  } else {    for (int i=0; i < orders.length; i++) {      Extension e=normalizerExtensions.get(orders[i]);      if (e != null) {        res.add(e);        normalizerExtensions.remove(orders[i]);      }    }    res.addAll(normalizerExtensions.values());  }  return res;}  }
class C{  private static void raiseOverflowException(final Number number,final Class<?> targetClass){  throw new IllegalArgumentException("Could not convert number [" + number + "] of type ["+ number.getClass().getName()+ "] to target class ["+ targetClass.getName()+ "]: overflow");}  }
class C{  public Node(Node parent,Object name,Object value){  this(parent,name,new HashMap(),value);}  }
class C{  public boolean isDisabled(){  return false;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == fPaySelect)   loadPaySelectInfo(); else   if (e.getSource() == fPaymentRule)   loadPaymentRuleInfo(); else   if (e.getSource() == bCancel)   dispose(); else   if (e.getSource() == bExport)   cmd_export(); else   if (e.getSource() == bProcess)   cmd_EFT(); else   if (e.getSource() == bPrint)   cmd_print();}  }
class C{  public boolean pushNamespace(String prefix,String uri,int elemDepth){  if (prefix.startsWith(XML_PREFIX)) {    return false;  }  Stack stack;  if ((stack=(Stack)m_namespaces.get(prefix)) == null) {    m_namespaces.put(prefix,stack=new Stack());  }  if (!stack.empty()) {    MappingRecord mr=(MappingRecord)stack.peek();    if (uri.equals(mr.m_uri) || elemDepth == mr.m_declarationDepth) {      return false;    }  }  MappingRecord map=new MappingRecord(prefix,uri,elemDepth);  stack.push(map);  m_nodeStack.push(map);  return true;}  }
class C{  private void updateEntry(){  String sql="UPDATE C_DunningRunEntry e " + "SET Amt=NVL((SELECT SUM(ConvertedAmt)+SUM(FeeAmt)+SUM(InterestAmt)" + " FROM C_DunningRunLine l "+ "WHERE e.C_DunningRunEntry_ID=l.C_DunningRunEntry_ID), 0), "+ "QTY=(SELECT COUNT(*)"+ " FROM C_DunningRunLine l "+ "WHERE e.C_DunningRunEntry_ID=l.C_DunningRunEntry_ID "+ " AND (NOT C_Invoice_ID IS NULL OR NOT C_Payment_ID IS NULL))"+ " WHERE C_DunningRunEntry_ID="+ getC_DunningRunEntry_ID();  DB.executeUpdate(sql,get_TrxName());}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public JSONArray optJSONArray(int index){  Object o=this.opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  protected Point interp(double x1,double y1,double x2,double y2,int width,int height){  double deltaY=y2 - y1;  double deltaX=x2 - x1;  double slope=deltaY / deltaX;  double newX=x2;  double newY=y2;  if (newX < 0) {    newX=0;    newY=Math.round(slope * (newX - x1) + y1);  } else   if (newX >= width) {    newX=width - 1;    newY=Math.round(slope * (newX - x1) + y1);  }  if (newY < 0) {    newY=0;    newX=Math.round(x1 + (newY - y1) / slope);  } else   if (newY >= height) {    newY=height - 1;    newX=Math.round(x1 + (newY - y1) / slope);  }  int intX=(int)newX;  int intY=(int)newY;  if (intX < 0) {    logger.warning("new x is " + intX);    intX=0;  }  if (intX >= width) {    logger.warning("new x is " + intX);    intX=width - 1;  }  if (intY < 0) {    logger.warning("new y is " + intY);    intY=0;  }  if (intY >= height) {    logger.warning("new y is " + intY);    intY=height - 1;  }  if (logger.isLoggable(Level.INFO)) {    logger.info("from " + x1 + ","+ y1+ " to "+ x2+ ","+ y2+ "w "+ width+ " h "+ height+ " interp "+ intX+ ","+ intY);  }  return new Point(intX,intY);}  }
class C{  protected void createIdentityTable() throws DataAccessException {  ProvisionedThroughput provisionedThroughput=new ProvisionedThroughput().withReadCapacityUnits(10L).withWriteCapacityUnits(5L);  ArrayList<AttributeDefinition> attributeDefinitions=new ArrayList<AttributeDefinition>();  attributeDefinitions.add(new AttributeDefinition().withAttributeName(ATTRIBUTE_USERNAME).withAttributeType("S"));  ArrayList<KeySchemaElement> tableKeySchema=new ArrayList<KeySchemaElement>();  tableKeySchema.add(new KeySchemaElement().withAttributeName(ATTRIBUTE_USERNAME).withKeyType(KeyType.HASH));  CreateTableRequest createTableRequest=new CreateTableRequest().withTableName(USER_TABLE).withProvisionedThroughput(provisionedThroughput).withAttributeDefinitions(attributeDefinitions).withKeySchema(tableKeySchema);  try {    ddb.createTable(createTableRequest);  } catch (  AmazonClientException e) {    throw new DataAccessException("Failed to create table: " + USER_TABLE,e);  }}  }
class C{  public void testSortsAccordingNumberOfAttributes() throws Exception {  XppDom dom1=XppFactory.buildDom("<dom/>");  XppDom dom2=XppFactory.buildDom("<dom a='1'/>");  assertEquals(-1,comparator.compare(dom1,dom2));  assertEquals("/dom::count(@*)",xpath.get());  assertEquals(1,comparator.compare(dom2,dom1));  assertEquals("/dom::count(@*)",xpath.get());}  }
class C{  public void initialize(String pathToTopicAssignmentFile){  System.out.println("Reading topic-assignment file: " + pathToTopicAssignmentFile);  topicAssignments=new ArrayList<List<Integer>>();  BufferedReader br=null;  try {    br=new BufferedReader(new FileReader(pathToTopicAssignmentFile));    int docID=0;    int numWords=0;    for (String line; (line=br.readLine()) != null; ) {      String[] strTopics=line.trim().split("\\s+");      List<Integer> topics=new ArrayList<Integer>();      for (int j=0; j < strTopics.length; j++) {        int topic=new Integer(strTopics[j]);        docTopicCount[docID][topic]+=1;        topicWordCount[topic][corpus.get(docID).get(j)]+=1;        sumDocTopicCount[docID]+=1;        sumTopicWordCount[topic]+=1;        topics.add(topic);        numWords++;      }      topicAssignments.add(topics);      docID++;    }    if ((docID != numDocuments) || (numWords != numWordsInCorpus)) {      System.out.println("The topic modeling corpus and topic assignment file are not consistent!!!");      throw new Exception();    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static void hide(int tabId){  if (sInstance == null)   return;  sInstance.hideNotification(tabId);}  }
class C{  public PeriodConverter removePeriodConverter(PeriodConverter converter) throws SecurityException {  checkAlterPeriodConverters();  if (converter == null) {    return null;  }  PeriodConverter[] removed=new PeriodConverter[1];  iPeriodConverters=iPeriodConverters.remove(converter,removed);  return removed[0];}  }
class C{  @Override public int hashCode(){  return variable.hashCode() + templateValue.hashCode() - 3 * relation.hashCode();}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  @SafeVarargs public static <T>Supplier<T> randomlySelect(T first,T... additional){  if (additional == null || additional.length == 0)   return null;  Random rng=new Random(System.currentTimeMillis());  int max=additional.length + 1;  return null;}  }
class C{  protected void fireNewRoot(){  Object[] pairs=listeners.getListenerList();  Object root=getRoot();  TreePath path=(root != null) ? new TreePath(root) : null;  TreeModelEvent e=null;  for (int i=pairs.length - 2; i >= 0; i-=2) {    if (pairs[i] == TreeModelListener.class) {      if (e == null) {        e=new TreeModelEvent(this,path,null,null);      }      ((TreeModelListener)pairs[i + 1]).treeStructureChanged(e);    }  }}  }
class C{  public void testSingleMultiPointRoundTrip() throws SAXException, IOException, ParserConfigurationException {  PointGenerator pgc=new PointGenerator();  pgc.setGeometryFactory(geometryFactory);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  MultiPoint pt=(MultiPoint)pg.create();  checkRoundTrip(pt);}  }
class C{  @Override public Element store(Object o){  RosterConfigPane p=(RosterConfigPane)o;  if ((p.getSelectedItem() == null || p.getSelectedItem().isEmpty()) && p.getDefaultOwner().isEmpty()) {    return null;  }  Element roster=new Element("roster");  if (p.getSelectedItem() != null && !p.getSelectedItem().isEmpty()) {    roster.setAttribute("directory",p.getSelectedItem());  }  roster.setAttribute("class",this.getClass().getName());  roster.setAttribute("ownerDefault",p.getDefaultOwner());  return roster;}  }
class C{  public synchronized void parse(Reader reader,String baseURI) throws IOException, RDFParseException, RDFHandlerException {  if (reader == null) {    throw new IllegalArgumentException("Reader must not be 'null'");  }  if (baseURI == null) {    throw new IllegalArgumentException("base URI must not be 'null'");  }  if (rdfHandler != null) {    rdfHandler.startRDF();  }  lineNumber=1;  this.reader=new PushbackReader(reader,8);  setBaseURI(baseURI);  reportLocation();  try {    int c=skipWSC();    while (c != -1) {      parseStatement();      c=skipWSC();    }  }  finally {    clear();  }  if (rdfHandler != null) {    rdfHandler.endRDF();  }}  }
class C{  private static void parse(final Map<String,Set<String>> parameters,final Scanner scanner,final String encoding,boolean decodeQueryParam){  scanner.useDelimiter(PARAMETER_SEPARATOR);  while (scanner.hasNext()) {    final String[] nameValue=scanner.next().split(NAME_VALUE_SEPARATOR);    if (nameValue.length == 0 || nameValue.length > 2)     throw new IllegalArgumentException("bad parameter");    final String name=decodeQueryParam ? decode(nameValue[0],encoding) : nameValue[0];    String value=null;    if (nameValue.length == 2)     value=decodeQueryParam ? decode(nameValue[1],encoding) : nameValue[1];    Set<String> values=parameters.get(name);    if (values == null) {      values=new LinkedHashSet<>();      parameters.put(name,values);    }    if (value != null) {      values.add(value);    }  }}  }
class C{  public void gc(){  VMCommonLibrarySupport.gc();}  }
class C{  public boolean isTaxIncluded(){  return m_isTaxIncluded;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public JBoss6xStandaloneLocalConfigurationCapability(){  super();  this.propertySupportMap.put(JBossPropertySet.JBOSS_AJP_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.JBOSS_JMX_PORT,Boolean.TRUE);}  }
class C{  public void populate(GisFeature gisFeature){  if (gisFeature != null) {    this.setAdm(gisFeature.getAdm());    this.setAdm1Code(gisFeature.getAdm1Code());    this.setAdm2Code(gisFeature.getAdm2Code());    this.setAdm3Code(gisFeature.getAdm3Code());    this.setAdm4Code(gisFeature.getAdm4Code());    this.setAdm1Name(gisFeature.getAdm1Name());    this.setAdm2Name(gisFeature.getAdm2Name());    this.setAdm3Name(gisFeature.getAdm3Name());    this.setAdm4Name(gisFeature.getAdm4Name());    this.setAlternateNames(gisFeature.getAlternateNames());    if (getAlternateNames() != null) {      for (      AlternateName alternateName : getAlternateNames()) {        alternateName.setGisFeature(this);      }    }    if (gisFeature.getAsciiName() != null) {      this.setAsciiName(gisFeature.getAsciiName().trim());    }    if (gisFeature.getCountryCode() != null) {      this.setCountryCode(gisFeature.getCountryCode().toUpperCase());    }    this.setElevation(gisFeature.getElevation());    this.setFeatureClass(gisFeature.getFeatureClass());    this.setFeatureCode(gisFeature.getFeatureCode());    this.setFeatureId(gisFeature.getFeatureId());    this.setGtopo30(gisFeature.getGtopo30());    this.setLocation(gisFeature.getLocation());    this.setModificationDate(gisFeature.getModificationDate());    this.setName(gisFeature.getName().trim());    this.setPopulation(gisFeature.getPopulation());    this.setSource(gisFeature.getSource());    this.setTimezone(gisFeature.getTimezone());    Set<ZipCode> zipCodes=gisFeature.getZipCodes();    if (zipCodes != null) {      for (      ZipCode zipCode : zipCodes) {        this.addZipCode(zipCode);      }    }    this.amenity=gisFeature.getAmenity();    this.openstreetmapId=gisFeature.getOpenstreetmapId();  }}  }
class C{  public void testWarWithContextXmlFile() throws Exception {  File artifactDir=new File(getTestData().targetDir).getParentFile();  Copy copyTask=(Copy)new AntUtils().createProject().createTask("copy");  copyTask.setTofile(new File(artifactDir,"tomcat-context.war"));  copyTask.setFile(new File(getTestData().getTestDataFileFor("tomcatcontext-war")));  copyTask.execute();  Deployable war=new DefaultDeployableFactory().createDeployable(getContainer().getId(),new File(artifactDir,"tomcat-context.war").getPath(),DeployableType.WAR);  getLocalContainer().getConfiguration().addDeployable(war);  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/tomcat-context/");  getLocalContainer().start();  PingUtils.assertPingTrue("tomcat context war not started","Test value is [test value]",warPingURL,getLogger());  getLocalContainer().stop();  PingUtils.assertPingFalse("tomcat context war not stopped",warPingURL,getLogger());}  }
class C{  public void runLocalScript(){  QFileDialog fileDialog=new QFileDialog(mainWindow);  fileDialog.setDirectory(lastLocalScriptDir);  fileDialog.setFileMode(QFileDialog.FileMode.ExistingFile);  fileDialog.setAcceptMode(QFileDialog.AcceptMode.AcceptOpen);  fileDialog.setNameFilter("POL Scriptfiles (*.py *.sh)");  fileDialog.setNameFilterDetailsVisible(true);  if (fileDialog.exec() == QDialog.DialogCode.Accepted.value()) {    File scriptFile=new File(fileDialog.selectedFiles().get(0));    lastLocalScriptDir=scriptFile.getParent();    try {      mainEventHandler.runLocalScript(scriptFile);    } catch (    PlayOnLinuxException e) {      LOGGER.error("Failed to run local script",e);    }  }}  }
class C{  protected void loadSchemas(File[] files){  for (  File file : files) {    FileReader fileReader=null;    BufferedReader reader=null;    try {      fileReader=new FileReader(file);      reader=new BufferedReader(fileReader);      loadSchemaFromReader(reader);    } catch (    IOException exception) {      log.warn("Exception occurred during reading the schema file.",exception);    } finally {      try {        if (reader != null) {          reader.close();        }        if (fileReader != null) {          fileReader.close();        }      } catch (      IOException exception) {        log.warn("Exception occurred trying to close the schema file,",exception);      }    }  }}  }
class C{  public static int dpToPx(float dp,Resources resources){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,resources.getDisplayMetrics());  return (int)px;}  }
class C{  public void testValidXmlReplacement(){  final String file="target/jboss-standalone-valid.xml";  final String old="<socket-binding name=\"http\" port=\"@cargo.servlet.port@\"/>";  final String new1="<socket-binding name=\"http\" port=\"test1\"/>";  final String new2="<socket-binding name=\"http\" port=\"test1\">test2</socket-binding>";  this.fileHandler.copyFile("src/test/resources/jboss-standalone.xml",file,true);  String read=this.fileHandler.readTextFile(file,"UTF-8");  assertTrue("File " + file + " does not contain: "+ old,read.contains(old));  XmlReplacement xmlReplacement=new XmlReplacement(file,"//server/socket-binding-group/socket-binding[@name='http']","port",false,"test1");  this.fileHandler.replaceInXmlFile(xmlReplacement);  read=this.fileHandler.readTextFile(file,"UTF-8");  assertFalse("File " + file + " still contains: "+ old,read.contains(old));  assertTrue("File " + file + " does not contain: "+ new1,read.contains(new1));  xmlReplacement.setAttributeName(null);  xmlReplacement.setValue("test2");  this.fileHandler.replaceInXmlFile(xmlReplacement);  read=this.fileHandler.readTextFile(file,"UTF-8");  assertFalse("File " + file + " still contains: "+ old,read.contains(old));  assertFalse("File " + file + " still contains: "+ new1,read.contains(new1));  assertTrue("File " + file + " does not contain: "+ new2,read.contains(new2));}  }
class C{  public void selectAllAccessibleSelection(){  TreeModel model=JTree.this.getModel();  if (model != null) {    Object[] objPath={model.getRoot()};    if (objPath[0] == null)     return;    TreePath path=new TreePath(objPath);    JTree.this.addSelectionPath(path);  }}  }
class C{  @Override default Streamable<T> skipLast(final int num){  return fromStream(reactiveSeq().skipLast(num));}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  Document newDoc;  DocumentType docType=null;  String namespaceURI="http://www.w3.org/DOMTest/L2";  String qualifiedName;  java.util.List qualifiedNames=new java.util.ArrayList();  qualifiedNames.add("_:_");  qualifiedNames.add("_:h0");  qualifiedNames.add("_:test");  qualifiedNames.add("l_:_");  qualifiedNames.add("ns:_0");  qualifiedNames.add("ns:a0");  qualifiedNames.add("ns0:test");  qualifiedNames.add("a.b:c");  qualifiedNames.add("a-b:c");  qualifiedNames.add("a-b:c");  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  for (int indexN1006B=0; indexN1006B < qualifiedNames.size(); indexN1006B++) {    qualifiedName=(String)qualifiedNames.get(indexN1006B);    newDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);    assertNotNull("domimplementationcreatedocument03",newDoc);  }}  }
class C{  public static Set<String> varyFields(Headers responseHeaders){  Set<String> result=Collections.emptySet();  for (int i=0, size=responseHeaders.size(); i < size; i++) {    if (!"Vary".equalsIgnoreCase(responseHeaders.name(i)))     continue;    String value=responseHeaders.value(i);    if (result.isEmpty()) {      result=new TreeSet<>(String.CASE_INSENSITIVE_ORDER);    }    for (    String varyField : value.split(",")) {      result.add(varyField.trim());    }  }  return result;}  }
class C{  public void updates(String type,List<String> ids,MetacatContext metacatContext,ObjectNode node){  if (ids == null || ids.isEmpty()) {    return;  }  try {    RETRY_ES_PUBLISH.call(null);  } catch (  Exception e) {    log.error(String.format("Failed updating metadata of type %s with ids %s",type,ids),e);    CounterWrapper.incrementCounter("dse.metacat.esBulkUpdateFailure");    log("ElasticSearchUtil.updates",type,ids.toString(),null,e.getMessage(),e,true);  }}  }
class C{  @Override public void onEvent(Event e) throws Exception {  if (e.getName().equals(Events.ON_CANCEL)) {    dispose();    return;  }  if (e.getTarget().equals(Process)) {    if (getMovementDate() == null) {      try {        Messagebox.show(Msg.getMsg(Env.getCtx(),"NoDate"),"Info",Messagebox.OK,Messagebox.INFORMATION);      } catch (      InterruptedException ex) {        throw new AdempiereException(ex);      }      return;    }    if ((isOnlyReceipt() || isBackflush()) && getM_Locator_ID() <= 0) {      try {        Messagebox.show(Msg.getMsg(Env.getCtx(),"NoLocator"),"Info",Messagebox.OK,Messagebox.INFORMATION);      } catch (      InterruptedException ex) {        throw new AdempiereException(ex);      }      return;    }    TabsReceiptsIssue.setSelectedIndex(1);    generateSummaryTable();    int result=-1;    try {      result=Messagebox.show(Msg.getMsg(Env.getCtx(),"Update"),"",Messagebox.OK | Messagebox.CANCEL,Messagebox.QUESTION);    } catch (    InterruptedException ex) {      throw new AdempiereException(ex);    }    if (result == Messagebox.OK) {      try {        final boolean isCloseDocument=(Messagebox.show(Msg.parseTranslation(Env.getCtx(),"@IsCloseDocument@ : " + getPP_Order().getDocumentNo()),"",Messagebox.OK | Messagebox.CANCEL,Messagebox.QUESTION) == Messagebox.OK);        if (cmd_process(isCloseDocument,issue)) {          dispose();          return;        }      } catch (      InterruptedException ex) {        throw new AdempiereException(ex);      }      Clients.showBusy(null,false);    }    TabsReceiptsIssue.setSelectedIndex(0);  }  if (e.getTarget().equals(pickcombo)) {    if (isOnlyReceipt()) {      enableToDeliver();      locatorLabel.setVisible(true);      locatorField.setVisible(true);      attribute.setVisible(true);      attributeLabel.setVisible(true);      issue.setVisible(false);    } else     if (isOnlyIssue()) {      disableToDeliver();      locatorLabel.setVisible(false);      locatorField.setVisible(false);      attribute.setVisible(false);      attributeLabel.setVisible(false);      issue.setVisible(true);      executeQuery();    } else     if (isBackflush()) {      enableToDeliver();      locatorLabel.setVisible(true);      locatorField.setVisible(true);      attribute.setVisible(true);      attributeLabel.setVisible(true);      issue.setVisible(true);      executeQuery();    }    setToDeliverQty(getOpenQty());  }}  }
class C{  public static Behavior createBehavior(BeanManager beanManager,String value){  Behavior delegatingBehavior=null;  Behavior managedBehavior=getBeanReference(beanManager,Behavior.class,new FacesBehaviorAnnotationLiteral(value));  if (managedBehavior != null) {    delegatingBehavior=new CdiBehavior(value,managedBehavior);  }  return delegatingBehavior;}  }
class C{  public void writeTo(Writer writer,String encoding){  if (LOGGER.isLoggable(Level.FINE)) {    LOGGER.fine("Converting buffered ServletOutputStream bytes" + " to chars using " + encoding);  }  ByteBuffer bBuff=baos.getByteBuffer();  CharsetDecoder decoder=Charset.forName(encoding).newDecoder();  try {    CharBuffer cBuff=decoder.decode(bBuff);    writer.write(cBuff.array());  } catch (  CharacterCodingException cce) {    throw new FacesException(cce);  }catch (  IOException ioe) {    throw new FacesException(ioe);  }}  }
class C{  public boolean isOpCode(){  return isOpCode;}  }
class C{  private static String stackTraceToString(Throwable t){  final StringBuilder sb=new StringBuilder();  final String indent="\tat ";  for (  StackTraceElement frame : t.getStackTrace()) {    sb.append(indent);    sb.append(frame.toString());    sb.append("\n");  }  return sb.toString();}  }
class C{  public OptimizedEdgeRandomIterator(OptimizedEdgePool optimizedDegreeEdgePool){  super(optimizedDegreeEdgePool);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (not: ");  result.append(not);  result.append(')');  return result.toString();}  }
class C{  protected int countLocations(){  int count=0;  for (  List<? extends LatLon> locations : this.boundaries) {    count+=locations.size();  }  this.totalFaceCount=count - this.boundaries.size();  return count;}  }
class C{  private void deleteDriveFile(String driveId,boolean canRetry) throws IOException {  try {    File driveFile=drive.files().get(driveId).execute();    if (SyncUtils.isInMyTracks(driveFile,folderId)) {      if (!driveFile.getLabels().getTrashed()) {        drive.files().trash(driveId).execute();      }    } else     if (SyncUtils.isInSharedWithMe(driveFile)) {      if (!driveFile.getLabels().getTrashed()) {        drive.files().delete(driveId).execute();      }    }  } catch (  UserRecoverableAuthIOException e) {    throw e;  }catch (  IOException e) {    if (canRetry) {      deleteDriveFile(driveId,false);      return;    }    Log.e(TAG,"Unable to delete Drive file for " + driveId,e);  }}  }
class C{  public void startDocument() throws ODataRenderException {  outputStream=new ByteArrayOutputStream();  try {    xmlWriter=XML_OUTPUT_FACTORY.createXMLStreamWriter(outputStream,UTF_8.name());    entityTypeWriter=new MetadataDocumentEntityTypeWriter(xmlWriter,entityDataModel);    complexTypeWriter=new MetadataDocumentComplexTypeWriter(xmlWriter,entityDataModel);    enumTypeWriter=new MetadataDocumentEnumTypeWriter(xmlWriter);    entitySetWriter=new MetadataDocumentEntitySetWriter(xmlWriter);    singletonWriter=new MetadataDocumentSingletonWriter(xmlWriter);    xmlWriter.writeStartDocument(UTF_8.name(),XML_VERSION);    xmlWriter.setPrefix(EDMX_PREFIX,EDMX_NS);  } catch (  XMLStreamException e) {    LOG.error("Not possible to start stream XML");    throw new ODataRenderException("Not possible to start stream XML: ",e);  }}  }
class C{  private static BigInteger multiplyToomCook3(BigInteger a,BigInteger b){  int alen=a.mag.length;  int blen=b.mag.length;  int largest=Math.max(alen,blen);  int k=(largest + 2) / 3;  int r=largest - 2 * k;  BigInteger a0, a1, a2, b0, b1, b2;  a2=a.getToomSlice(k,r,0,largest);  a1=a.getToomSlice(k,r,1,largest);  a0=a.getToomSlice(k,r,2,largest);  b2=b.getToomSlice(k,r,0,largest);  b1=b.getToomSlice(k,r,1,largest);  b0=b.getToomSlice(k,r,2,largest);  BigInteger v0, v1, v2, vm1, vinf, t1, t2, tm1, da1, db1;  v0=a0.multiply(b0);  da1=a2.add(a0);  db1=b2.add(b0);  vm1=da1.subtract(a1).multiply(db1.subtract(b1));  da1=da1.add(a1);  db1=db1.add(b1);  v1=da1.multiply(db1);  v2=da1.add(a2).shiftLeft(1).subtract(a0).multiply(db1.add(b2).shiftLeft(1).subtract(b0));  vinf=a2.multiply(b2);  t2=v2.subtract(vm1).exactDivideBy3();  tm1=v1.subtract(vm1).shiftRight(1);  t1=v1.subtract(v0);  t2=t2.subtract(t1).shiftRight(1);  t1=t1.subtract(tm1).subtract(vinf);  t2=t2.subtract(vinf.shiftLeft(1));  tm1=tm1.subtract(t2);  int ss=k * 32;  BigInteger result=vinf.shiftLeft(ss).add(t2).shiftLeft(ss).add(t1).shiftLeft(ss).add(tm1).shiftLeft(ss).add(v0);  if (a.signum != b.signum) {    return result.negate();  } else {    return result;  }}  }
class C{  public void toEPL(StringWriter writer){  writer.write(windowName);  if (optionalAsName != null) {    writer.write(" as ");    writer.write(optionalAsName);  }}  }
class C{  @SuppressWarnings("unchecked") private void initSourceSelectorSyntax(NamedList args){  if (0 <= args.indexOf(PATTERN_PARAM,0) || 0 <= args.indexOf(REPLACEMENT_PARAM,0)) {    throw new SolrException(SERVER_ERROR,"Short hand syntax must not be mixed with full syntax. Found " + SOURCE_PARAM + " and "+ DEST_PARAM+ " but also found "+ PATTERN_PARAM+ " or "+ REPLACEMENT_PARAM);  }  Object d=args.remove(DEST_PARAM);  assert null != d;  List<Object> sources=args.getAll(SOURCE_PARAM);  assert null != sources;  if (1 == sources.size()) {    if (sources.get(0) instanceof NamedList) {      NamedList selectorConfig=(NamedList)args.remove(SOURCE_PARAM);      srcInclusions=parseSelectorParams(selectorConfig);      List<Object> excList=selectorConfig.getAll("exclude");      for (      Object excObj : excList) {        if (null == excObj) {          throw new SolrException(SERVER_ERROR,"Init param '" + SOURCE_PARAM + "' child 'exclude' can not be null");        }        if (!(excObj instanceof NamedList)) {          throw new SolrException(SERVER_ERROR,"Init param '" + SOURCE_PARAM + "' child 'exclude' must be <lst/>");        }        NamedList exc=(NamedList)excObj;        srcExclusions.add(parseSelectorParams(exc));        if (0 < exc.size()) {          throw new SolrException(SERVER_ERROR,"Init param '" + SOURCE_PARAM + "' has unexpected 'exclude' sub-param(s): '"+ selectorConfig.getName(0)+ "'");        }        selectorConfig.remove("exclude");      }      if (0 < selectorConfig.size()) {        throw new SolrException(SERVER_ERROR,"Init param '" + SOURCE_PARAM + "' contains unexpected child param(s): '"+ selectorConfig.getName(0)+ "'");      }      sources.remove(0);    }  }  if (1 <= sources.size()) {    srcInclusions.fieldName=new HashSet<>(args.removeConfigArgs("source"));  }  if (srcInclusions == null) {    throw new SolrException(SERVER_ERROR,"Init params do not specify anything to clone, please supply either " + SOURCE_PARAM + " and "+ DEST_PARAM+ " or "+ PATTERN_PARAM+ " and "+ REPLACEMENT_PARAM+ ". See javadocs"+ "for CloneFieldUpdateProcessorFactory for further details.");  }  if (d instanceof NamedList) {    NamedList destList=(NamedList)d;    Object patt=destList.remove(PATTERN_PARAM);    Object replacement=destList.remove(REPLACEMENT_PARAM);    if (null == patt || null == replacement) {      throw new SolrException(SERVER_ERROR,"Init param '" + DEST_PARAM + "' children '"+ PATTERN_PARAM+ "' and '"+ REPLACEMENT_PARAM+ "' are both mandatoryand can not be null");    }    if (!(patt instanceof String && replacement instanceof String)) {      throw new SolrException(SERVER_ERROR,"Init param '" + DEST_PARAM + "' children '"+ PATTERN_PARAM+ "' and '"+ REPLACEMENT_PARAM+ "' must both be strings (i.e. <str>)");    }    if (0 != destList.size()) {      throw new SolrException(SERVER_ERROR,"Init param '" + DEST_PARAM + "' has unexpected children: '"+ destList.getName(0)+ "'");    }    try {      this.pattern=Pattern.compile(patt.toString());    } catch (    PatternSyntaxException pe) {      throw new SolrException(SERVER_ERROR,"Init param '" + DEST_PARAM + "' child '"+ PATTERN_PARAM+ " is not a valid regex pattern: "+ patt,pe);    }    dest=replacement.toString();  } else   if (d instanceof String) {    dest=d.toString();  } else {    throw new SolrException(SERVER_ERROR,"Init param '" + DEST_PARAM + "' must either be a string "+ "(i.e. <str>) or a list (i.e. <lst>) containing '"+ PATTERN_PARAM+ "' and '"+ REPLACEMENT_PARAM);  }}  }
class C{  private void checkMatrixDimensions(Matrix B){  if (B.m != m || B.n != n) {    throw new IllegalArgumentException("Matrix dimensions must agree.");  }}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[189];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 174; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }        if ((jj_la1_1[i] & (1 << j)) != 0) {          la1tokens[32 + j]=true;        }        if ((jj_la1_2[i] & (1 << j)) != 0) {          la1tokens[64 + j]=true;        }        if ((jj_la1_3[i] & (1 << j)) != 0) {          la1tokens[96 + j]=true;        }        if ((jj_la1_4[i] & (1 << j)) != 0) {          la1tokens[128 + j]=true;        }        if ((jj_la1_5[i] & (1 << j)) != 0) {          la1tokens[160 + j]=true;        }      }    }  }  for (int i=0; i < 189; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  jj_endpos=0;  jj_rescan_token();  jj_add_error_token(0,0);  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage);}  }
class C{  private void after() throws Exception {  if (primaryFs != null) {    try {      primaryFs.delete(new Path("/"),true);    } catch (    Exception ignore) {    }    U.closeQuiet(primaryFs);  }  G.stopAll(true);  delete(primaryConfFullPath);  delete(secondaryConfFullPath);}  }
class C{  public boolean isLedOn(){  return null == ledOn ? _ledOn : ledOn.get();}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  super.writeToParcel(dest,flags,TYPE_GSM);  mCellIdentityGsm.writeToParcel(dest,flags);  mCellSignalStrengthGsm.writeToParcel(dest,flags);}  }
class C{  private static void assertEmptyTable(final String tableId,final HtmlPage page,final boolean hasHeader){  HtmlTable table=(HtmlTable)page.getElementById(tableId);  assertNotNull("Should find Table with ID: " + tableId,table);  List<HtmlTableRow> allRows=table.getRows();  int expectedRowCount=hasHeader ? 2 : 1;  assertEquals("Table " + tableId + " should have "+ expectedRowCount+ " row(s)",expectedRowCount,allRows.size());  HtmlTableBody body=assertSingle(tableId + "should have one tbody",table.getBodies());  HtmlTableRow row=assertSingle(tableId + ":tbody should have one tr",body.getRows());  assertTrue(row.getCells().size() == 2);}  }
class C{  private Website(){}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return CURSOR_ID;case 3:return VALUES;default :return null;}}  }
class C{  public StepBreakpointSetReply(final int packetId,final int errorCode,final List<Pair<RelocatedAddress,Integer>> addresses){  super(packetId,errorCode,addresses);}  }
class C{  public static String write(String... strings){  return write(new StringBuilder(),strings);}  }
class C{  private PrintStream newStream(String name) throws IOException {  if (LOG.isDebuggingFiner()) {    LOG.debugFiner("Requested stream: " + name);  }  if (!basename.exists()) {    basename.mkdirs();  }  String fn=basename.getAbsolutePath() + File.separator + name+ EXTENSION;  if (usegzip) {    fn=fn + GZIP_EXTENSION;  }  File n=new File(fn);  OutputStream os=new FileOutputStream(n);  if (usegzip) {    os=new GZIPOutputStream(os);  }  PrintStream res=new PrintStream(os);  if (LOG.isDebuggingFiner()) {    LOG.debugFiner("Opened new output stream:" + fn);  }  return res;}  }
class C{  public CIDFontType2(final PdfObjectReader currentPdfFile,final boolean ttflag){  isCIDFont=true;  TTstreamisCID=ttflag;  glyphs=new TTGlyphs();  init(currentPdfFile);}  }
class C{  private static void groupNodes(final ZyGraph graph,final List<NaviNode> nodes){  final StringBuilder stringBuilder=new StringBuilder();  final List<INaviViewNode> rawNodes=new ArrayList<INaviViewNode>();  final INaviGroupNode commonParent=getCommonParent(nodes);  for (  final NaviNode node : nodes) {    if (node.getRawNode().getParentGroup() != null) {      node.getRawNode().getParentGroup().removeElement(node.getRawNode());    }    rawNodes.add(node.getRawNode());    stringBuilder.append(determineNodeText(node));    stringBuilder.append('\n');  }  final CGroupNode groupNode=graph.getRawView().getContent().createGroupNode(rawNodes);  if (commonParent != null) {    commonParent.addElement(groupNode);  }  try {    groupNode.appendComment(stringBuilder.toString());  } catch (  CouldntSaveDataException|CouldntLoadDataException exception) {    CUtilityFunctions.logException(exception);  }}  }
class C{  protected boolean dispatchBatch(List events) throws GatewaySenderException {  if (events.isEmpty()) {    return true;  }  int batchId=this.eventProcessor.getBatchId();  boolean successAll=true;  try {    for (    AsyncEventListener listener : this.eventListeners) {      boolean successOne=listener.processEvents(events);      if (!successOne) {        successAll=false;      }    }  } catch (  Exception e) {    final StringId alias=LocalizedStrings.SerialGatewayEventCallbackDispatcher__0___EXCEPTION_DURING_PROCESSING_BATCH__1_;    final Object[] aliasArgs=new Object[]{this,Integer.valueOf(batchId)};    String exMsg=alias.toLocalizedString(aliasArgs);    GatewaySenderException ge=new GatewaySenderException(exMsg,e);    logger.warn(LocalizedMessage.create(alias,aliasArgs),ge);    throw ge;  }  return successAll;}  }
class C{  public boolean executeCommand(BufferedReader reader){  for (  String s : COMMAND_HELP_MESSAGE) {    out.println(s);  }  System.err.print("Command: ");  try {    String command=reader.readLine();    String[] parts=command.trim().split(" ",2);    String name=parts[0];    String parameters=parts.length > 1 ? parts[1] : "";    if (name.equals("add")) {      addNewEntry(parameters);    } else     if (name.equals("load")) {      loadSheet(reader);    } else     if (name.equals("list")) {      listAllEntries();    } else     if (name.equals("reverse")) {      reverseAllEntries();    } else     if (name.equals("search")) {      search(parameters);    } else     if (name.equals("query")) {      query(parameters);    } else     if (name.equals("delete")) {      delete(parameters);    } else     if (name.equals("update")) {      String[] split=parameters.split(" ",2);      update(split[0],split[1]);    } else     if (name.startsWith("q") || name.startsWith("exit")) {      return false;    } else {      out.println("Unknown command.");    }  } catch (  ServiceException se) {    se.printStackTrace();  }catch (  IOException ioe) {    ioe.printStackTrace();  }  return true;}  }
class C{  private void unregisterEventHandler(){  if (editor != null) {    editor.removePropertyChangeListener(eventHandler);  }  if (activeView != null) {    activeView.removeFigureSelectionListener(eventHandler);    activeView.removePropertyChangeListener(eventHandler);    activeView=null;  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (orOp_1: ");  result.append(orOp_1);  result.append(')');  return result.toString();}  }
class C{  private boolean isViewHtml(String fileName){  String baseName=new File(fileName).getName();  return "index.html".equals(baseName) || baseName.contains("-");}  }
class C{  public boolean hasSpAdminViewPermission(){  return permissionService.hasPermission(SpPermission.SYSTEM_ADMIN);}  }
class C{  public String toString(){  return "CADRG[ spps_x=" + spps_x + " spps_y="+ spps_y+ " x_pix="+ x_pix_constant+ " y_pix="+ y_pix_constant+ " oy="+ oy+ " ul("+ ul.x+ ","+ ul.y+ ")"+ super.toString();}  }
class C{  public int loadUnsigned16(int addr){  return (loadUnsigned8(addr + 1) << 8) | loadUnsigned8(addr);}  }
class C{  public T caseCast(Cast object){  return null;}  }
class C{  public boolean hasFatalError(){  return fSeverity == FATAL;}  }
class C{  public void text(String str,float x,float y){  if (textFont == null) {    defaultFontOrDeath("text");  }  int length=str.length();  if (length > textBuffer.length) {    textBuffer=new char[length + 10];  }  str.getChars(0,length,textBuffer,0);  float high=0;  for (int i=0; i < length; i++) {    if (textBuffer[i] == '\n') {      high+=textLeading;    }  }  if (textAlignY == CENTER) {    y+=(textAscent() - high) / 2;  } else   if (textAlignY == TOP) {    y+=textAscent();  } else   if (textAlignY == BOTTOM) {    y-=textDescent() + high;  }  int start=0;  int index=0;  while (index < length) {    if (textBuffer[index] == '\n') {      textLineAlignImpl(textBuffer,start,index,x,y);      start=index + 1;      y+=textLeading;    }    index++;  }  if (start < length) {    textLineAlignImpl(textBuffer,start,index,x,y);  }}  }
class C{  private void transformAwait(final ClassNode classNode,final MethodNode original,final MethodVisitor mv,final SwitchEntry switchEntry,final String lambdaDesc,final List<Argument> lambdaArguments,final boolean isContinued,final boolean nonCompFutReturn,final Handle handle){  mv.visitInsn(DUP);  Label futureIsDoneLabel=isContinued ? switchEntry.futureIsDoneLabel : new Label();  final boolean needsConversion=switchEntry == null || !checkType(switchEntry.frame,COMPLETABLE_FUTURE_TYPE);  if (needsConversion) {    mv.visitMethodInsn(INVOKEINTERFACE,COMPLETION_STAGE_NAME,"toCompletableFuture","()Ljava/util/concurrent/CompletableFuture;",true);  }  mv.visitMethodInsn(INVOKEVIRTUAL,COMPLETABLE_FUTURE_NAME,"isDone","()Z",false);  mv.visitJumpInsn(IFNE,futureIsDoneLabel);  saveStack(mv,switchEntry);  mv.visitVarInsn(ALOAD,switchEntry.stackToNewLocal[switchEntry.frame.getStackSize() - 1]);  mv.visitMethodInsn(INVOKESTATIC,Type.getType(Function.class).getInternalName(),"identity","()Ljava/util/function/Function;",false);  if (needsConversion) {    mv.visitMethodInsn(INVOKEINTERFACE,COMPLETION_STAGE_NAME,"exceptionally","(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;",true);  } else {    mv.visitMethodInsn(INVOKEVIRTUAL,COMPLETABLE_FUTURE_NAME,"exceptionally","(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;",false);  }  pushArguments(mv,switchEntry,lambdaArguments);  mv.visitIntInsn(SIPUSH,switchEntry.key);  mv.visitInvokeDynamicInsn("apply",lambdaDesc,METAFACTORY_HANDLE,Type.getType("(Ljava/lang/Object;)Ljava/lang/Object;"),handle,Type.getType("(Ljava/lang/Object;)Ljava/util/concurrent/CompletableFuture;"));  if (needsConversion) {    mv.visitMethodInsn(INVOKEINTERFACE,COMPLETION_STAGE_NAME,"thenCompose","(Ljava/util/function/Function;)Ljava/util/concurrent/CompletionStage;",true);  } else {    mv.visitMethodInsn(INVOKEVIRTUAL,COMPLETABLE_FUTURE_NAME,"thenCompose","(Ljava/util/function/Function;)Ljava/util/concurrent/CompletableFuture;",false);  }  if (needsConversion) {    mv.visitMethodInsn(INVOKEINTERFACE,COMPLETION_STAGE_NAME,"toCompletableFuture","()Ljava/util/concurrent/CompletableFuture;",true);  }  if (!isContinued && nonCompFutReturn) {    final String retType=Type.getReturnType(original.desc).getInternalName();    final String castFunction="lambda$checkCast$" + retType.replace('/','_');    generateCheckCast(classNode,castFunction,retType);    mv.visitMethodInsn(INVOKESTATIC,classNode.name,castFunction,"(Ljava/util/concurrent/CompletionStage;)L" + retType + ";",false);    mv.visitTypeInsn(CHECKCAST,retType);  }  if (switchEntry.frame.monitors.length > 0) {    for (int i=switchEntry.frame.monitors.length; --i >= 0; ) {      final BasicValue monitorValue=switchEntry.frame.monitors[i];      int monitorLocal=-1;      for (int iLocal=0; iLocal < switchEntry.frame.getLocals(); iLocal+=valueSize(switchEntry.frame.getLocal(iLocal))) {        if (switchEntry.frame.getLocal(iLocal) == monitorValue) {          monitorLocal=iLocal;        }      }      if (monitorLocal != -1) {        mv.visitVarInsn(ALOAD,monitorLocal);        mv.visitInsn(MONITOREXIT);      } else {        notifyError("Error restoring monitors in synchronized method. monitorLocal=%d, at %s.%s",monitorLocal,classNode.name,original.name);      }    }  }  mv.visitInsn(ARETURN);  mv.visitLabel(futureIsDoneLabel);  fullFrame(mv,switchEntry.frame);  if (needsConversion) {    mv.visitMethodInsn(INVOKEINTERFACE,COMPLETION_STAGE_NAME,"toCompletableFuture","()Ljava/util/concurrent/CompletableFuture;",true);  }  mv.visitMethodInsn(INVOKEVIRTUAL,COMPLETABLE_FUTURE_NAME,JOIN_METHOD_NAME,JOIN_METHOD_DESC,false);}  }
class C{  public static BrowserDescriptor standaloneBrowser(@NonNull String version){  return new BrowserDescriptor(PACKAGE_NAME,SIGNATURE_SET,version,false);}  }
class C{  public TestHarness(SolrResourceLoader loader,ConfigSolr config){  container=new CoreContainer(loader,config);  container.load();  updater=new UpdateRequestHandler();  updater.init(null);}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.477 -0500",hash_original_method="5CB2A904EF4F6F10099E7C4AAF4D8031",hash_generated_method="9B4693DCC535893E1901AA92F501BE31") public static byte[] decode(String data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,bOut);  } catch (  IOException e) {    throw new RuntimeException("exception decoding Hex string: " + e);  }  return bOut.toByteArray();}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public static void createDir(File target) throws AdeUsageException {  if (!target.exists() && !target.mkdir()) {    throw new AdeUsageException("Failed creating directory " + target.getPath());  }}  }
class C{  public int hashCode(){  int result=choiceLimits.length;  if (choiceFormats.length > 0) {    result^=choiceFormats[choiceFormats.length - 1].hashCode();  }  return result;}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.EXECUTION_STATE;}  }
class C{  public static boolean isNewerThan(final Version left,final Version right){  if (left.getMajor() > right.getMajor())   return true;  if (left.getMajor() < right.getMajor())   return false;  if (left.getMinor() > right.getMinor())   return true;  if (left.getMinor() < right.getMinor())   return false;  if (left.getMicro() > right.getMicro())   return true;  if (left.getMicro() < right.getMicro())   return false;  String q=left.getQualifier();  int index=q.indexOf('-');  String qla=index == -1 ? "" : q.substring(index + 1).trim();  int ql=Integer.parseInt(index == -1 ? q : q.substring(0,index));  q=right.getQualifier();  index=q.indexOf('-');  String qra=index == -1 ? "" : q.substring(index + 1).trim();  int qr=Integer.parseInt(index == -1 ? q : q.substring(0,index));  if (ql > qr)   return true;  if (ql < qr)   return false;  int qlan=qualifierAppendix2Number(qla);  int qran=qualifierAppendix2Number(qra);  if (qlan > qran)   return true;  if (qlan < qran)   return false;  if (qlan == QUALIFIER_APPENDIX_OTHER && qran == QUALIFIER_APPENDIX_OTHER)   return left.compareTo(right) > 0;  return false;}  }
class C{  public void testIncreasingSloppinessWithHoles() throws Exception {  Term t1=randomTerm();  Term t2=randomTerm();  for (int i=0; i < 10; i++) {    PhraseQuery.Builder builder=new PhraseQuery.Builder();    builder.add(t1,0);    builder.add(t2,2);    builder.setSlop(i);    PhraseQuery q1=builder.build();    builder.setSlop(i + 1);    PhraseQuery q2=builder.build();    assertSubsetOf(q1,q2);  }}  }
class C{  public XML11ConfigurationMMImpl(SymbolTable symbolTable){  this(symbolTable,null,null);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE_TYPE___TRACER_TYPE_1:    setTracerType_1(TRACER_TYPE_1_EDEFAULT);  return;case UmplePackage.TRACE_TYPE___ANONYMOUS_TRACE_TYPE_11:getAnonymous_traceType_1_1().clear();return;case UmplePackage.TRACE_TYPE___ANONYMOUS_TRACE_TYPE_21:getAnonymous_traceType_2_1().clear();return;}super.eUnset(featureID);}  }
class C{  @SuppressWarnings("unused") public List<String> hostVcenterUnassignDetails(URI hostId){  List<String> result=Lists.newArrayList();  Host host=_dbClient.queryObject(Host.class,hostId);  if (host != null) {    Vcenter vcenter=ComputeSystemHelper.getHostVcenter(_dbClient,host);    result.add(ComputeSystemDialogProperties.getMessage("ComputeSystem.hostVcenterUnassignDetails",host.getLabel(),vcenter == null ? "N/A" : vcenter.getLabel()));    result.addAll(hostClusterChangeDetails(hostId,NullColumnValueGetter.getNullURI(),NullColumnValueGetter.getNullURI(),true));  }  return result;}  }
class C{  private void testEmail(){  final ProgressWindow progressWindow=new ProgressWindow(MainFrame.getInstance(),"Sending test email...");  progressWindow.setVisible(true);  final Runnable runnable=null;  final Thread t=new Thread(runnable);  t.start();}  }
class C{  public static boolean isClear(Color value){  return (value == null) || ((value.getRGB() >>> 24) == 0);}  }
class C{  public static void endEntityViaReflection(HttpEntity entity){  if (entity instanceof HttpEntityWrapper) {    try {      Field f=null;      Field[] fields=HttpEntityWrapper.class.getDeclaredFields();      for (      Field ff : fields) {        if (ff.getName().equals("wrappedEntity")) {          f=ff;          break;        }      }      if (f != null) {        f.setAccessible(true);        HttpEntity wrapped=(HttpEntity)f.get(entity);        if (wrapped != null) {          wrapped.consumeContent();        }      }    } catch (    Throwable t) {      Log.e(LOG_TAG,"wrappedEntity consume",t);    }  }}  }
class C{  public Matrix3d mul(Matrix3dc right){  return mul(right,this);}  }
class C{  public static synchronized PasswordAuthentication requestPasswordAuthentication(InetAddress rAddr,int rPort,String rProtocol,String rPrompt,String rScheme){  if (thisAuthenticator == null) {    return null;  }  thisAuthenticator.addr=rAddr;  thisAuthenticator.port=rPort;  thisAuthenticator.protocol=rProtocol;  thisAuthenticator.prompt=rPrompt;  thisAuthenticator.scheme=rScheme;  thisAuthenticator.rt=RequestorType.SERVER;  return thisAuthenticator.getPasswordAuthentication();}  }
class C{  public void releaseUnstartableContainer(SamzaResource resource){  log.info("Releasing unstartable container {}",resource.getResourceID());  manager.releaseResources(resource);}  }
class C{  @Override public void onAction(final ActionType at){  if (isReleased()) {    return;  }switch (at) {case LOOK_CLOSELY:case READ:    at.send(at.fillTargetInfo(entity));  break;default :super.onAction(at);break;}}  }
class C{  public Stream<SentencePair> stream(){  return IntStream.range(0,srcBitext.length).mapToObj(null).filter(null);}  }
class C{  public NodeSetDTM mutableNodeset() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_MUTABLENODELIST,new Object[]{getTypeString()});  return (NodeSetDTM)m_obj;}  }
class C{  @SuppressWarnings("unchecked") public ArrayList<Hero> currentHeros(){  return (ArrayList<Hero>)currentHeros.clone();}  }
class C{  public static RefactoringStatus createWarningStatus(String msg,RefactoringStatusContext context){  return createStatus(WARNING,msg,context,null,RefactoringStatusEntry.NO_CODE,null);}  }
class C{  private Base64(){}  }
class C{  private long computeSettleDuration(final float velocity,final boolean dismissing){  final float clampedVelocity=Math.max(MIN_SETTLE_VELOCITY,Math.abs(velocity));  final int settleDistance=dismissing ? sheetBottom - sheet.getTop() : sheet.getTop() - sheetExpandedTop;  return (long)(settleDistance * 1000 / clampedVelocity);}  }
class C{  public static boolean supportsLogSegmentSequenceNo(int version){  return version >= LogSegmentMetadataVersion.VERSION_V2_LEDGER_SEQNO.value;}  }
class C{  public Shape3DPortrayal3D(Geometry geometry,Image image){  this(geometry,appearanceForImage(image,true));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:46.421 -0500",hash_original_method="E50E44C9D86336E922CA2AE8F511D506",hash_generated_method="80AC8B6BE9B156C3EE30B3EFE4A2A8F1") CallerInfo markAsVoiceMail(){  mIsVoiceMail=true;  try {    String voiceMailLabel=TelephonyManager.getDefault().getVoiceMailAlphaTag();    phoneNumber=voiceMailLabel;  } catch (  SecurityException se) {    Log.e(TAG,"Cannot access VoiceMail.",se);  }  return this;}  }
class C{  private void writeBodyToConnection(String body,HttpsURLConnection con) throws IOException {  OutputStreamWriter request=null;  try {    CharsetEncoder encoder=Charset.forName("UTF-8").newEncoder();    request=new OutputStreamWriter(con.getOutputStream(),encoder);    request.append(body);    request.flush();  } catch (  IOException e) {    throw new MCApiRuntimeException(e);  } finally {    if (request != null) {      request.close();    }  }}  }
class C{  public ServiceHost startIdempotentFactory(Service instanceService){  final Class<? extends Service> serviceClass=instanceService.getClass();  return startFactory(serviceClass,null);}  }
class C{  @Override public void paint(Graphics g,Rectangle rect){  for (  Component c : constraintList.keySet()) {    if (!isValid(c)) {      int xpos=c.getAbsoluteX();      int ypos=c.getAbsoluteY();      float width=c.getWidth();      float height=c.getHeight();      xpos+=Math.round(width * validationEmblemPositionX);      ypos+=Math.round(height * validationEmblemPositionY);      g.drawImage(validationFailedEmblem,xpos - validationFailedEmblem.getWidth() / 2,ypos - validationFailedEmblem.getHeight() / 2);    }  }}  }
class C{  public static SecretKeys generateKey() throws GeneralSecurityException {  fixPrng();  KeyGenerator keyGen=KeyGenerator.getInstance(CIPHER);  keyGen.init(AES_KEY_LENGTH_BITS);  SecretKey confidentialityKey=keyGen.generateKey();  byte[] integrityKeyBytes=randomBytes(HMAC_KEY_LENGTH_BITS / 8);  SecretKey integrityKey=new SecretKeySpec(integrityKeyBytes,HMAC_ALGORITHM);  return new SecretKeys(confidentialityKey,integrityKey);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredFinal: ");  result.append(declaredFinal);  result.append(", declaredStatic: ");  result.append(declaredStatic);  result.append(", declaredOverride: ");  result.append(declaredOverride);  result.append(')');  return result.toString();}  }
class C{  private void downloadUsersAndForms(DataOutputStream dos,String serializerKey) throws Exception {  UserDownloadManager.downloadUsers(dos,null);  XformDownloadManager.downloadXforms(dos,serializerKey);}  }
class C{  @CanIgnoreReturnValue public MapMaker concurrencyLevel(int concurrencyLevel){  checkState(this.concurrencyLevel == UNSET_INT,"concurrency level was already set to %s",this.concurrencyLevel);  checkArgument(concurrencyLevel > 0);  this.concurrencyLevel=concurrencyLevel;  return this;}  }
class C{  public void mergeSubordinate(final InferenceResult subordinate){  final LinkedHashSet<TypeVariable> previousKeySet=new LinkedHashSet<>(this.keySet());  final LinkedHashSet<TypeVariable> remainingSubKeys=new LinkedHashSet<>(subordinate.keySet());  remainingSubKeys.removeAll(keySet());  for (  TypeVariable target : previousKeySet) {    mergeTarget(target,subordinate);  }  for (  TypeVariable target : remainingSubKeys) {    this.put(target,subordinate.get(target));  }  resolveChainedTargets();}  }
class C{  public int indexOf(final AbstractInsnNode insn){  if (cache == null) {    cache=toArray();  }  return insn.index;}  }
class C{  public static String replaceAll(String original,String oldSubstring,String newSubstring){  return replace(original,oldSubstring,newSubstring,true);}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  props.removeListener(listener);}  }
class C{  public void onCreate(Bundle savedInstanceState,Class<OpsType> opsType,Interface instance){  super.onCreate(savedInstanceState);  try {    handleConfiguration(opsType,instance);  } catch (  InstantiationException|IllegalAccessException e) {    Log.d(TAG,"handleConfiguration " + e);    throw new RuntimeException(e);  }}  }
class C{  public int keyAt(int index){  return mKeys[index];}  }
class C{  public boolean includeStacktrace(){  return stacktrace;}  }
class C{  @NotImplemented public Configurator recordDataToNetworkTables(){  throw new UnsupportedOperationException("Network data writer is not yet implemented");}  }
class C{  public boolean isReadOnly(){  Object oo=get_Value(COLUMNNAME_IsReadOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void assertEquals(long expected,long actual){  Assert.assertEquals(expected,actual);}  }
class C{  public static double[] solveNR(double a[][],double[] b){  int N=b.length;  int[] idxs=new int[N];  double[][] ac=Common.copy(a);  double d=ludcmp(ac,idxs);  double[] bc=Common.copy(b);  lubksb(ac,idxs,bc);  return bc;}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  public TokenMap(int size){  this(size,false);}  }
class C{  @Override public void cleanup(){  _logger.info("Stopping the Plugin Thread and clearing Resources");  releaseResources();}  }
class C{  public void fireRequestInfoLine(String infoLine){  fireRequestInfoLine(new InfoDisplayEvent(this,infoLine));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_PROGRAM_1__COMMENT_1:    return comment_1 != null && !comment_1.isEmpty();case UmplePackage.ANONYMOUS_PROGRAM_1__DIRECTIVE_1:  return directive_1 != null && !directive_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  protected void makeLevelZeroCells(Sector sector){  Sector[] subSectors=sector.subdivide();  this.levelZeroCells=new ArrayList<double[]>(4);  this.levelZeroCells.add(subSectors[0].asDegreesArray());  this.levelZeroCells.add(subSectors[1].asDegreesArray());  this.levelZeroCells.add(subSectors[3].asDegreesArray());  this.levelZeroCells.add(subSectors[2].asDegreesArray());}  }
class C{  public ParseException(final int line,final int column,final String message){  super(Integer.toString(line) + ":" + column+ ": "+ message);  this.line=line;  this.column=column;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.EXECUTION_SCOPE__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case SexecPackage.EXECUTION_SCOPE__STATE_VECTOR:  return stateVector != null;case SexecPackage.EXECUTION_SCOPE__SUB_SCOPES:return subScopes != null && !subScopes.isEmpty();case SexecPackage.EXECUTION_SCOPE__SUPER_SCOPE:return superScope != null;case SexecPackage.EXECUTION_SCOPE__ENTER_SEQUENCES:return enterSequences != null && !enterSequences.isEmpty();case SexecPackage.EXECUTION_SCOPE__EXIT_SEQUENCE:return exitSequence != null;case SexecPackage.EXECUTION_SCOPE__INIT_SEQUENCE:return initSequence != null;}return super.eIsSet(featureID);}  }
class C{  public void addElementToRelation(final OsmElement e,final String role,final Relation rel){  dirty=true;  undo.save(rel);  undo.save(e);  RelationMember newMember=new RelationMember(role,e);  rel.addMember(newMember);  e.addParentRelation(rel);  rel.updateState(OsmElement.STATE_MODIFIED);  try {    apiStorage.insertElementSafe(rel);    recordImagery();  } catch (  StorageException sex) {    sex.printStackTrace();  }}  }
class C{  public boolean isBlockHeightRelative(int i){  return (masks[i] & BLOCK_HEIGHT_RELATIVE_MASK) != 0;}  }
class C{  public void enable() throws IOException {  if (isOptOut()) {    configuration.getCategory(Configuration.CATEGORY_GENERAL).get("opt-out").set("false");    configuration.save();  }  FMLCommonHandler.instance().bus().register(this);}  }
class C{  public void shutdownNow(){  pool.shutdownNow();}  }
class C{  public synchronized int decryptData(byte[] output,byte[] input){  return decryptData(output,input,0,input.length);}  }
class C{  public boolean invoke(){  if (mClickListener != null && mClickListener.onMenuItemClick(this)) {    return true;  }  if (mMenu.dispatchMenuItemSelected(mMenu.getRootMenu(),this)) {    return true;  }  if (mItemCallback != null) {    mItemCallback.run();    return true;  }  if (mIntent != null) {    try {      mMenu.getContext().startActivity(mIntent);      return true;    } catch (    ActivityNotFoundException e) {      Log.e(TAG,"Can't find activity to handle intent; ignoring",e);    }  }  if (mActionProvider != null && mActionProvider.onPerformDefaultAction()) {    return true;  }  return false;}  }
class C{  protected void writeCentralDirectoryEnd(long cdLength,long cdOffset) throws IOException {  writeOut(EOCD_SIG);  writeOutShort(0);  writeOutShort(0);  final int entiresCount=myFile.getEntries().size();  writeOutShort(entiresCount);  writeOutShort(entiresCount);  writeOutLong(cdLength);  writeOutLong(cdOffset);  byte[] data=getBytes(comment);  writeOutShort(data.length);  writeOut(data);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  protected void onCompactStart() throws Exception {}  }
class C{  public void removeAllStickyEventsRemote(){  new SendCommandToNode(WearBusTools.MESSAGE_PATH_COMMAND,WearBusTools.ACTION_STICKY_CLEAR_ALL.getBytes(),String.class,context).start();}  }
class C{  public String toString(){  return mimeType;}  }
class C{  public ParseResult parseModule(IResource parseResource,IProgressMonitor monitor,boolean installMarkers,boolean updateStorage){  IProject project=parseResource.getProject();  ToolIO.setUserDir(ResourceHelper.getParentDirName(parseResource.getLocation().toOSString()));  if (installMarkers) {    TLAMarkerHelper.removeProblemMarkers(parseResource,monitor,TLAMarkerHelper.TOOLBOX_MARKERS_TLAPARSER_MARKER_ID);  }  ParseResult result=parseModule(parseResource,monitor,updateStorage);  checkCancel(monitor);  if (updateStorage) {    if (AdapterFactory.isProblemStatus(result.getStatus())) {      Activator.getModuleDependencyStorage().parseFailed(parseResource.getProjectRelativePath().toString());    }  }  processParsingErrors(project,result);  if (installMarkers) {    TLAMarkerHelper.installProblemMarkers(result.getDetectedErrors(),monitor);  }  return result;}  }
class C{  @Override public ExampleSet apply(ExampleSet eSet) throws OperatorException {  int k=this.getParameterAsInt(PARAMETER_NUMBER_OF_NEIGHBORS);  int n=this.getParameterAsInt(PARAMETER_NUMBER_OF_OUTLIERS);  n=n - 2;  int kindOfDistance=this.getParameterAsInt(PARAMETER_DISTANCE_FUNCTION);  Iterator<Example> reader=eSet.iterator();  int searchSpaceDimension=eSet.getAttributes().size();  SearchSpace sr=new SearchSpace(searchSpaceDimension,k,k);  int counter=0;  while (reader.hasNext()) {    Example example=reader.next();    SearchObject so=new SearchObject(searchSpaceDimension,"object" + counter,k,k + 1);    counter++;    int i=0;    for (    Attribute attribute : eSet.getAttributes()) {      so.setVektor(i++,example.getValue(attribute));    }    sr.addObject(so);  }  sr.resetOutlierStatus();  sr.findAllKdContainers(kindOfDistance,this);  sr.computeDKN(k,n,this);  Attribute outlierAttribute=AttributeFactory.createAttribute(Attributes.OUTLIER_NAME,Ontology.BINOMINAL);  outlierAttribute.getMapping().mapString("false");  outlierAttribute.getMapping().mapString("true");  eSet.getExampleTable().addAttribute(outlierAttribute);  eSet.getAttributes().setOutlier(outlierAttribute);  counter=0;  Iterator<Example> reader2=eSet.iterator();  while (reader2.hasNext()) {    Example example=reader2.next();    if (sr.getSearchObjectOutlierStatus(counter) == true) {      example.setValue(outlierAttribute,outlierAttribute.getMapping().mapString("true"));    } else {      example.setValue(outlierAttribute,outlierAttribute.getMapping().mapString("false"));    }    counter++;  }  return eSet;}  }
class C{  public static boolean isModVersionAccepted(String modId,int[] versionInt,String deliminator){  String version=getModVersion(modId);  if (!version.isEmpty()) {    String[] split=version.split(deliminator);    for (int i=0; i < split.length && i < versionInt.length; i++) {      if (compareStringInt(split[i],versionInt[i]))       return false;    }    return true;  }  return false;}  }
class C{  public void addAll(Collection<Mention> collection){  mentions.addAll(collection);  collection.forEach(null);}  }
class C{  private void writeToTableAndCsv(TabularResultData metricsTable,String type,String metricName,long metricValue,StringBuilder csvBuilder){  metricsTable.accumulate(CliStrings.SHOW_METRICS__TYPE__HEADER,type);  metricsTable.accumulate(CliStrings.SHOW_METRICS__METRIC__HEADER,metricName);  metricsTable.accumulate(CliStrings.SHOW_METRICS__VALUE__HEADER,metricValue);  if (csvBuilder != null) {    csvBuilder.append(type);    csvBuilder.append(',');    csvBuilder.append(metricName);    csvBuilder.append(',');    csvBuilder.append(metricValue);    csvBuilder.append('\n');  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {    ZComp focusOwner=uiComp.getLastFocusedChild();    if (focusOwner == null)     return new Integer(-1);    if (focusOwner instanceof ZPseudoComp) {      ZPseudoComp focusComp=(ZPseudoComp)focusOwner;      Object o1=focusComp.getRelatedContext().safeLookup("TableRow");      int tablePosition=o1 != null ? (Integer.parseInt(o1.toString()) - 1) : 0;      return new Integer(1 + tablePosition);    }  }  return new Integer(-1);}  }
class C{  public static ValueLob openLinked(int type,DataHandler handler,int tableId,int objectId,long precision,boolean compression){  String fileName=getFileName(handler,tableId,objectId);  return new ValueLob(type,handler,fileName,tableId,objectId,true,precision,compression);}  }
class C{  private int sendToMany(final MembershipManager mgr,InternalDistributedMember[] p_destinations,final DistributionMessage msg,long ackWaitThreshold,long ackSAThreshold) throws ConnectExceptions, NotSerializableException {  InternalDistributedMember destinations[]=p_destinations;  ConnectExceptions failedCe=null;  ConnectExceptions retryInfo=null;  int bytesWritten=0;  boolean retry=false;  final boolean orderedMsg=msg.orderedDelivery() || Connection.isDominoThread();  final List totalSentCons=new ArrayList(destinations.length);  boolean interrupted=false;  long ackTimeout=0;  long ackSDTimeout=0;  long startTime=0;  final DirectReplyMessage directMsg;  if (msg instanceof DirectReplyMessage) {    directMsg=(DirectReplyMessage)msg;  } else {    directMsg=null;  }  if (directMsg != null || msg.getProcessorId() > 0) {    ackTimeout=(int)(ackWaitThreshold * 1000);    if (msg.isSevereAlertCompatible() || ReplyProcessor21.isSevereAlertProcessingForced()) {      ackSDTimeout=(int)(ackSAThreshold * 1000);      if (ReplyProcessor21.getShortSevereAlertProcessing()) {        ackSDTimeout=(int)(ReplyProcessor21.PR_SEVERE_ALERT_RATIO * ackSDTimeout);      }    }  }  boolean directReply=false;  if (directMsg != null && directMsg.supportsDirectAck() && threadOwnsResources()) {    directReply=true;  }  if (!directReply && directMsg != null) {    directMsg.registerProcessor();  }  try {    do {      interrupted=interrupted || Thread.interrupted();      if (retryInfo != null) {        List retryMembers=retryInfo.getMembers();        InternalDistributedMember[] retryDest=new InternalDistributedMember[retryMembers.size()];        retryDest=(InternalDistributedMember[])retryMembers.toArray(retryDest);        destinations=retryDest;        retryInfo=null;        retry=true;      }      final List cons=new ArrayList(destinations.length);      ConnectExceptions ce=getConnections(mgr,msg,destinations,orderedMsg,retry,ackTimeout,ackSDTimeout,cons);      if (directReply && msg.getProcessorId() > 0) {        directReply=false;      }      if (ce != null) {        if (failedCe != null) {          failedCe.getMembers().addAll(ce.getMembers());          failedCe.getCauses().addAll(ce.getCauses());        } else {          failedCe=ce;        }        ce=null;      }      if (cons.isEmpty()) {        if (failedCe != null) {          throw failedCe;        }        return bytesWritten;      }      boolean sendingToGroup=cons.size() > 1;      Connection permissionCon=null;      if (sendingToGroup) {        acquireGroupSendPermission(orderedMsg);      } else {        permissionCon=(Connection)cons.get(0);        if (permissionCon != null) {          try {            permissionCon.acquireSendPermission();          } catch (          ConnectionException conEx) {            retryInfo=new ConnectExceptions();            retryInfo.addFailure(permissionCon.getRemoteAddress(),conEx);            continue;          }        }      }      try {        if (logger.isDebugEnabled()) {          logger.debug("{}{}) to {} peers ({}) via tcp/ip",(retry ? "Retrying send (" : "Sending ("),msg,cons.size(),cons);        }        DMStats stats=getDMStats();        List<?> sentCons;        final BaseMsgStreamer ms=MsgStreamer.create(cons,msg,directReply,stats);        try {          startTime=0;          if (ackTimeout > 0) {            startTime=System.currentTimeMillis();          }          ms.reserveConnections(startTime,ackTimeout,ackSDTimeout);          int result=ms.writeMessage();          if (bytesWritten == 0) {            bytesWritten=result;          }          ce=ms.getConnectExceptions();          sentCons=ms.getSentConnections();          totalSentCons.addAll(sentCons);        } catch (        NotSerializableException e) {          throw e;        }catch (        ToDataException e) {          throw e;        }catch (        IOException ex) {          throw new InternalGemFireException(LocalizedStrings.DirectChannel_UNKNOWN_ERROR_SERIALIZING_MESSAGE.toLocalizedString(),ex);        } finally {          try {            ms.close();          } catch (          IOException e) {            throw new InternalGemFireException("Unknown error serializing message",e);          }        }        if (ce != null) {          retryInfo=ce;          ce=null;        }        if (directReply && !sentCons.isEmpty()) {          long readAckStart=0;          if (stats != null) {            readAckStart=stats.startReplyWait();          }          try {            ce=readAcks(sentCons,startTime,ackTimeout,ackSDTimeout,ce,directMsg.getDirectReplyProcessor());          }  finally {            if (stats != null) {              stats.endReplyWait(readAckStart,startTime);            }          }        }      }  finally {        if (sendingToGroup) {          releaseGroupSendPermission(orderedMsg);        } else         if (permissionCon != null) {          permissionCon.releaseSendPermission();        }      }      if (ce != null) {        if (retryInfo != null) {          retryInfo.getMembers().addAll(ce.getMembers());          retryInfo.getCauses().addAll(ce.getCauses());        } else {          retryInfo=ce;        }        ce=null;      }      if (retryInfo != null) {        this.conduit.getCancelCriterion().checkCancelInProgress(null);      }    } while (retryInfo != null);  }  finally {    if (interrupted) {      Thread.currentThread().interrupt();    }    for (Iterator it=totalSentCons.iterator(); it.hasNext(); ) {      Connection con=(Connection)it.next();      con.setInUse(false,0,0,0,null);    }  }  if (failedCe != null) {    throw failedCe;  }  return bytesWritten;}  }
class C{  public static InputStream toInputStream(CharSequence input,Charset encoding){  return toInputStream(input.toString(),encoding);}  }
class C{  public void drawString(String str,float x,float y){  if (str.length() == 0) {    return;  }  FontRenderContext frc=getFontRenderContext();  Rectangle2D bbox=getFont().getStringBounds(str,frc);  addDrawingRect(bbox,x,y);  mPrintMetrics.drawText(this);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzPushbackPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    final char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  final int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead < 0) {    return true;  } else {    zzEndRead+=numRead;    return false;  }}  }
class C{  @HLEFunction(nid=0x04B93CEF,version=271) public int sceJpegDecodeMJpeg(TPointer jpegBuffer,int jpegBufferSize,TPointer imageBuffer,int dhtMode){  if (log.isTraceEnabled()) {    log.trace(String.format("sceJpegDecodeMJpeg jpegBuffer: %s",Utilities.getMemoryDump(jpegBuffer.getAddress(),jpegBufferSize)));  }  int pixelFormat=TPSM_PIXEL_STORAGE_MODE_32BIT_ABGR8888;  BufferedImage bufferedImage=readJpegImage(jpegBuffer,jpegBufferSize);  if (bufferedImage == null) {    generateFakeImage(imageBuffer,jpegWidth,jpegHeight,jpegWidth,pixelFormat);  } else {    decodeImage(imageBuffer,bufferedImage,jpegWidth,jpegHeight,jpegWidth,pixelFormat,0);  }  return getWidthHeight(jpegWidth,jpegHeight);}  }
class C{  public ValidationSwitch(){  if (modelPackage == null) {    modelPackage=ValidationPackage.eINSTANCE;  }}  }
class C{  public UniqueFileStrategy(final File baseFile,String pattern,String suffix){  this(baseFile,pattern);  m_suffix=suffix;}  }
class C{  public static CCTextureAtlas textureAtlas(String file,int capacity){  return new CCTextureAtlas(file,capacity);}  }
class C{  public Builder deleteEmail(Email email){  Email deleteEmail=new Email.Builder().setValue(email.getValue()).setType(email.getType()).setOperation(DELETE).build();  emails.add(deleteEmail);  return this;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:42.530 -0500",hash_original_method="1D035E07BE479B8A909681E6BF90CFBD",hash_generated_method="30EC794E829AE5A6C71E9027AA07F44F") public void flush() throws IOException {  flushCache();  this.out.flush();}  }
class C{  public static int valueAsByte(String key,byte defaultVal){  String val=valueFor(key);  if (val == null) {    return defaultVal;  }  byte bval;  try {    bval=Byte.valueOf(val).byteValue();  } catch (  NumberFormatException nex) {    XRLog.exception("Property '" + key + "' was requested as a byte, but "+ "value of '"+ val+ "' is not a byte. Check configuration.");    bval=defaultVal;  }  return bval;}  }
class C{  public Operand generateLoopInvariantOperand(BasicBlock block,Operand op){  Instruction instr=definingInstruction(op);  if (op.isConstant() || !CFGTransformations.inLoop(instr.getBasicBlock(),loop)) {    return op;  } else {    RegisterOperand result;    Instruction opInstr=definingInstruction(op);    if (ResultCarrier.conforms(opInstr)) {      result=ResultCarrier.getResult(opInstr).copyRO();      result.setRegister(ir.regpool.getReg(result));    } else {      if (VM.VerifyAssertions)       VM._assert(GuardResultCarrier.conforms(opInstr));      result=GuardResultCarrier.getGuardResult(opInstr).copyRO();      result.setRegister(ir.regpool.getReg(result));    }    Instruction resultInstruction;    Operator operator=instr.operator();switch (operator.format) {case InstructionFormat.Binary_format:      resultInstruction=Binary.create(operator,result,generateLoopInvariantOperand(block,Binary.getVal1(instr)),generateLoopInvariantOperand(block,Binary.getVal2(instr)));    break;case InstructionFormat.BoundsCheck_format:  resultInstruction=BoundsCheck.create(operator,result,generateLoopInvariantOperand(block,BoundsCheck.getRef(instr)),generateLoopInvariantOperand(block,BoundsCheck.getIndex(instr)),generateLoopInvariantOperand(block,BoundsCheck.getGuard(instr)));break;case InstructionFormat.GuardedBinary_format:resultInstruction=GuardedBinary.create(operator,result,generateLoopInvariantOperand(block,GuardedBinary.getVal1(instr)),generateLoopInvariantOperand(block,GuardedBinary.getVal2(instr)),generateLoopInvariantOperand(block,GuardedBinary.getGuard(instr)));break;case InstructionFormat.GuardedUnary_format:resultInstruction=GuardedUnary.create(operator,result,generateLoopInvariantOperand(block,GuardedUnary.getVal(instr)),generateLoopInvariantOperand(block,GuardedUnary.getGuard(instr)));break;case InstructionFormat.Move_format:resultInstruction=Move.create(operator,result,generateLoopInvariantOperand(block,Move.getVal(instr)));break;case InstructionFormat.NullCheck_format:resultInstruction=NullCheck.create(operator,result,generateLoopInvariantOperand(block,NullCheck.getRef(instr)));break;case InstructionFormat.Unary_format:resultInstruction=Unary.create(operator,result,generateLoopInvariantOperand(block,Unary.getVal(instr)));break;default :throw new Error("TODO: generate loop invariant for operator " + operator);}resultInstruction.copyPosition(instr);block.appendInstruction(resultInstruction);DefUse.updateDUForNewInstruction(resultInstruction);return result.copyRO();}}  }
class C{  public boolean saveFileWriter(){  boolean result=false;  try {    Writer w=new FileWriter(currFileName);    jTextArea1.write(w);    w.close();    statusBar.setText("Saving " + currFileName);    result=true;  } catch (  Throwable t) {    JOptionPane.showMessageDialog(this,"Could not save file " + currFileName,"Warning",JOptionPane.WARNING_MESSAGE);    result=false;  }  return result;}  }
class C{  protected synchronized AbstractMRMessage pollMessage(){  if (getNumNodes() <= 0) {    return null;  }  int previousPollPointer=curSerialNodeIndex;  updatePollPointer();  if (getMustInit(curSerialNodeIndex)) {    setMustInit(curSerialNodeIndex,false);    AbstractMRMessage m=getNode(curSerialNodeIndex).createInitPacket();    log.debug("send init message: " + m);    m.setTimeout(500);    return m;  }  if (getNode(curSerialNodeIndex).mustSend()) {    log.debug("request write command to send");    getNode(curSerialNodeIndex).resetMustSend();    AbstractMRMessage m=getNode(curSerialNodeIndex).createOutPacket();    m.setTimeout(2);    curSerialNodeIndex=previousPollPointer;    return m;  }  if (getNode(curSerialNodeIndex).getSensorsActive()) {    SerialMessage m=SerialMessage.getPoll(getNode(curSerialNodeIndex).getNodeAddress());    return m;  } else {    return null;  }}  }
class C{  public ObjectOutputStream createObjectOutputStream(final OutputStream out,final String rootNodeName) throws IOException {  return createObjectOutputStream(hierarchicalStreamDriver.createWriter(out),rootNodeName);}  }
class C{  private List<VolumeDescriptor> makeBackendVolumeDescriptors(List<VPlexRecommendation> recommendations,Project project,Project vplexProject,VirtualPool rootVpool,String volumeLabel,int varrayCount,long size,BlockConsistencyGroup backendCG,VirtualPoolCapabilityValuesWrapper vPoolCapabilities,boolean createTask,String task){  VPlexRecommendation firstRecommendation=recommendations.get(0);  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();  URI varrayId=firstRecommendation.getVirtualArray();  VirtualPool vpool=firstRecommendation.getVirtualPool();  s_logger.info("Generated backend descriptors for {} recommendations varray {}",recommendations.size(),varrayCount);  vPoolCapabilities.put(VirtualPoolCapabilityValuesWrapper.AUTO_TIER__POLICY_NAME,vpool.getAutoTierPolicyName());  if (firstRecommendation.getRecommendation() != null) {    List<Recommendation> childRecommendations=new ArrayList<Recommendation>();    Recommendation childRecommendation=null;    for (    VPlexRecommendation recommendation : recommendations) {      childRecommendation=recommendation.getRecommendation();      childRecommendations.add(childRecommendation);    }    VirtualArray varray=_dbClient.queryObject(VirtualArray.class,varrayId);    String newVolumeLabel=generateVolumeLabel(volumeLabel,varrayCount,0,0);    boolean srdfTarget=(childRecommendation instanceof SRDFCopyRecommendation);    boolean srdfSource=(childRecommendation instanceof SRDFRecommendation);    if (srdfTarget) {      newVolumeLabel=newVolumeLabel + "-target";    } else     if (srdfSource) {    } else {      project=vplexProject;    }    TaskList taskList=new TaskList();    descriptors=super.createVolumesAndDescriptors(descriptors,newVolumeLabel,size,project,varray,vpool,childRecommendations,taskList,task,vPoolCapabilities);    VolumeDescriptor.Type[] types;    if (srdfTarget) {      types=new VolumeDescriptor.Type[]{VolumeDescriptor.Type.SRDF_TARGET};    } else {      types=new VolumeDescriptor.Type[]{VolumeDescriptor.Type.BLOCK_DATA,VolumeDescriptor.Type.SRDF_SOURCE,VolumeDescriptor.Type.SRDF_EXISTING_SOURCE};    }    descriptors=VolumeDescriptor.filterByType(descriptors,types);    for (    VolumeDescriptor descriptor : descriptors) {      Volume volume=_dbClient.queryObject(Volume.class,descriptor.getVolumeURI());      s_logger.info(String.format("Received prepared volume %s (%s, args) type %s",volume.getLabel(),volume.getId(),descriptor.getType().name()));      volume.addInternalFlags(DataObject.Flag.INTERNAL_OBJECT);      configureCGAndReplicationGroup(rootVpool,vPoolCapabilities,backendCG,volume);      _dbClient.updateObject(volume);    }    return descriptors;  }  int totalResourceCount=0;  for (  VPlexRecommendation recommendation : recommendations) {    totalResourceCount+=recommendation.getResourceCount();  }  s_logger.info("Processing recommendations for Virtual Array {}",varrayId);  int volumeCounter=0;  for (  VPlexRecommendation recommendation : recommendations) {    for (int i=0; i < recommendation.getResourceCount(); i++) {      vpool=recommendation.getVirtualPool();      URI storageDeviceURI=recommendation.getSourceStorageSystem();      URI storagePoolURI=recommendation.getSourceStoragePool();      String newVolumeLabel=generateVolumeLabel(volumeLabel,varrayCount,volumeCounter,totalResourceCount);      validateVolumeLabel(newVolumeLabel,project);      s_logger.info("Volume label is {}",newVolumeLabel);      VirtualArray varray=_dbClient.queryObject(VirtualArray.class,varrayId);      long thinVolumePreAllocationSize=0;      if (null != vpool.getThinVolumePreAllocationPercentage()) {        thinVolumePreAllocationSize=VirtualPoolUtil.getThinVolumePreAllocationSize(vpool.getThinVolumePreAllocationPercentage(),size);      }      Volume volume=prepareVolume(VolumeType.BLOCK_VOLUME,null,size,thinVolumePreAllocationSize,vplexProject,varray,vpool,storageDeviceURI,storagePoolURI,newVolumeLabel,backendCG,vPoolCapabilities);      configureCGAndReplicationGroup(rootVpool,vPoolCapabilities,backendCG,volume);      volume.addInternalFlags(Flag.INTERNAL_OBJECT);      _dbClient.persistObject(volume);      if (createTask) {        _dbClient.createTaskOpStatus(Volume.class,volume.getId(),task,ResourceOperationTypeEnum.CREATE_BLOCK_VOLUME);      }      s_logger.info("Prepared volume {} ({}) ",volume.getLabel(),volume.getId());      VolumeDescriptor descriptor=new VolumeDescriptor(VolumeDescriptor.Type.BLOCK_DATA,storageDeviceURI,volume.getId(),storagePoolURI,backendCG == null ? null : backendCG.getId(),vPoolCapabilities,size);      descriptors.add(descriptor);      volumeCounter++;    }  }  return descriptors;}  }
class C{  public void add(int value){  if (size >= data.length) {    ensureCapacity(size + size);  }  data[size++]=value;}  }
class C{  public DefaultLmlParser(final LmlData data,final LmlSyntax syntax,final LmlTemplateReader templateReader){  super(data,syntax,templateReader,new DefaultLmlStyleSheet(),true);}  }
class C{  public BytecodeInstruction(BytecodeInstruction wrap){  this(wrap.classLoader,wrap.className,wrap.methodName,wrap.instructionId,wrap.bytecodeOffset,wrap.asmNode,wrap.lineNumber,wrap.basicBlock);  this.frame=wrap.frame;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.STANDALONE_BLOCK__BLOCK:    return block != null;}return super.eIsSet(featureID);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public FeatureTypeLibrary basicGetLibrary(){  return (FeatureTypeLibrary)eContainer();}  }
class C{  public FailedLoginException(){  super();}  }
class C{  public static void quickSort(float[] a,int fromIndex,int toIndex,FloatComparator c){  rangeCheck(a.length,fromIndex,toIndex);  quickSort1(a,fromIndex,toIndex - fromIndex,c);}  }
class C{  private String determineUserIds(List<TriggerProcessIdentifier> pendingAddRevokeUsers){  StringBuilder userIds=new StringBuilder();  for (  TriggerProcessIdentifier id : pendingAddRevokeUsers) {    if (userIds.length() != 0) {      userIds.append(", ");    }    if (TriggerProcessIdentifierName.USER_TO_ADD.equals(id.getName()) || TriggerProcessIdentifierName.USER_TO_REVOKE.equals(id.getName())) {      userIds.append(id.getValue());    }  }  return userIds.toString();}  }
class C{  private void assertBad(String in) throws Exception {  try {    byte[] out=Base64.decode(in,0);    fail("should have failed to decode");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public void run(){  ActivationLibrary.deactivate(this,getID());}  }
class C{  public static void append(ReadableDateTime t,StringBuilder s){  s.append(t.getYear());  appendTwoDigits(t.getMonthOfYear(),s);  appendTwoDigits(t.getDayOfMonth(),s);  s.append('-');  appendTwoDigits(t.getHourOfDay(),s);  s.append(':');  appendTwoDigits(t.getMinuteOfHour(),s);  s.append(':');  appendTwoDigits(t.getSecondOfMinute(),s);  s.append('.');  appendThreeDigits(t.getMillisOfSecond(),s);}  }
class C{  public static SoapMessageImpl createRequest(String fileName) throws Exception {  Soap message=createSoapMessage(fileName);  if (!(message instanceof SoapMessageImpl)) {    throw new RuntimeException("Got " + message.getClass() + " instead of SoapMessage");  }  if (((SoapMessageImpl)message).isResponse()) {    throw new RuntimeException("Got response instead of request");  }  return (SoapMessageImpl)message;}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof RequestingUserName);}  }
class C{  private static int GetIntField(JNIEnvironment env,int objJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetIntField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    return field.getIntValueUnchecked(obj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  protected void sequence_UnicodeEscapeSequence(ISerializationContext context,UnicodeEscapeSequence semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,RegularExpressionPackage.Literals.UNICODE_ESCAPE_SEQUENCE__SEQUENCE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,RegularExpressionPackage.Literals.UNICODE_ESCAPE_SEQUENCE__SEQUENCE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getUnicodeEscapeSequenceAccess().getSequenceUNICODE_ESCAPETerminalRuleCall_0(),semanticObject.getSequence());  feeder.finish();}  }
class C{  public String globalInfo(){  return "Uses Java serialization for readin/writing the statistics.";}  }
class C{  @Override @CanIgnoreReturnValue public boolean offer(E e){  return add(e);}  }
class C{  DropLocation dropLocationForPoint(Point p){  DropLocation location=null;  int row=getClosestRowForLocation(p.x,p.y);  Rectangle bounds=getRowBounds(row);  TreeModel model=getModel();  Object root=(model == null) ? null : model.getRoot();  TreePath rootPath=(root == null) ? null : new TreePath(root);  TreePath child;  TreePath parent;  boolean outside=row == -1 || p.y < bounds.y || p.y >= bounds.y + bounds.height;switch (dropMode) {case USE_SELECTION:case ON:    if (outside) {      location=new DropLocation(p,null,-1);    } else {      location=new DropLocation(p,getPathForRow(row),-1);    }  break;case INSERT:case ON_OR_INSERT:if (row == -1) {  if (root != null && !model.isLeaf(root) && isExpanded(rootPath)) {    location=new DropLocation(p,rootPath,0);  } else {    location=new DropLocation(p,null,-1);  }  break;}boolean checkOn=dropMode == DropMode.ON_OR_INSERT || !model.isLeaf(getPathForRow(row).getLastPathComponent());Section section=SwingUtilities2.liesInVertical(bounds,p,checkOn);if (section == LEADING) {child=getPathForRow(row);parent=child.getParentPath();} else if (section == TRAILING) {int index=row + 1;if (index >= getRowCount()) {if (model.isLeaf(root) || !isExpanded(rootPath)) {location=new DropLocation(p,null,-1);} else {parent=rootPath;index=model.getChildCount(root);location=new DropLocation(p,parent,index);}break;}child=getPathForRow(index);parent=child.getParentPath();} else {assert checkOn;location=new DropLocation(p,getPathForRow(row),-1);break;}if (parent != null) {location=new DropLocation(p,parent,model.getIndexOfChild(parent.getLastPathComponent(),child.getLastPathComponent()));} else if (checkOn || !model.isLeaf(root)) {location=new DropLocation(p,rootPath,-1);} else {location=new DropLocation(p,null,-1);}break;default :assert false : "Unexpected drop mode";}if (outside || row != expandRow) {cancelDropTimer();}if (!outside && row != expandRow) {if (isCollapsed(row)) {expandRow=row;startDropTimer();}}return location;}  }
class C{  public static boolean isMarketHours(ZonedDateTime date){  if (!isAfterHours(date) && !isPreMarket(date)) {    return true;  }  return false;}  }
class C{  @Override @Transactional public void logout(HttpServletRequest request,HttpServletResponse response,Authentication authentication){  String rememberMeCookie=extractRememberMeCookie(request);  if (rememberMeCookie != null && rememberMeCookie.length() != 0) {    try {      String[] cookieTokens=decodeCookie(rememberMeCookie);      PersistentToken token=getPersistentToken(cookieTokens);      persistentTokenRepository.delete(token);    } catch (    InvalidCookieException ice) {      log.info("Invalid cookie, no persistent token could be deleted");    }catch (    RememberMeAuthenticationException rmae) {      log.debug("No persistent token found, so no token could be deleted");    }  }  super.logout(request,response,authentication);}  }
class C{  public static ProjectActionEvent createProjectOpenedEvent(ProjectDescriptor project){  return new ProjectActionEvent(project,ProjectAction.READY,false);}  }
class C{  public static void e(String tag,String msg,Object... args){  if (sLevel > LEVEL_ERROR) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.e(tag,msg);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void activateCert(String certId) throws Exception {  LOG.trace("Activating cert '{}'",certId);  execute(new ActivateCert(certId,true));}  }
class C{  public static String toString(final EObject expr){  if (expr == null) {    return null;  }  if (expr instanceof Statement) {    return getNameOf((Statement)expr);  } else   if (expr instanceof Facet) {    return ((Facet)expr).getName();  }  if (!(expr instanceof Expression)) {    return expr.toString();  }  final StringBuilder serializer=new StringBuilder(100);  serializer.setLength(0);  serialize(serializer,(Expression)expr);  return serializer.toString();}  }
class C{  public Excerpt constructor(){  return Excerpts.add("new %s%s",qualifiedName,isParameterized() ? diamondOperator(Excerpts.join(", ",typeParameters)) : "");}  }
class C{  public boolean isUseAverage(){  return useAvg;}  }
class C{  public static boolean hasPort(String url){  return !Strings.isNullOrEmpty(url) && url.split(":").length > 2;}  }
class C{  public IsilonList<IsilonSnapshot> listSnapshotsCreatedByPolicy(String resumeToken,String policy) throws IsilonException {  if (policy == null || policy.isEmpty()) {    return null;  }  URI uri=URI_SNAPSHOTS;  StringBuffer URLBuffer=new StringBuffer(_baseUrl.resolve(uri).toString());  URLBuffer.append("?schedule=").append(policy);  uri=URI.create(URLBuffer.toString());  sLogger.info("get list of snapshots for policy {} and uri {} .",policy,uri.toString());  return list(uri,"snapshots",IsilonSnapshot.class,resumeToken);}  }
class C{  public Notification delete(Integer notificationID){  return find(notificationID).delete();}  }
class C{  public void testEmptyLanguageConcatenate(){  Automaton a=Automata.makeString("a");  Automaton concat=Operations.concatenate(a,Automata.makeEmpty());  assertTrue(Operations.isEmpty(concat));}  }
class C{  public NamedScheduledThreadPoolExecutor(String poolName,int fixPoolSize,ThreadFactory threadFactory){  super(fixPoolSize,new NamedThreadFactory(poolName,threadFactory));  setPoolName(poolName);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  if (null != m_attributeSetsNames) {    applyAttrSets(transformer,getStylesheetRoot(),m_attributeSetsNames);  }}  }
class C{  public static VMRequest discontiguous(){  if (VM.HEAP_LAYOUT_64BIT) {    return common64Bit(false);  }  return new VMRequest(REQUEST_DISCONTIGUOUS,Address.zero(),Extent.zero(),0f,false);}  }
class C{  public ScReplay createReplay(String instanceId) throws StorageCenterAPIException {  return createReplay(instanceId,0);}  }
class C{  public GridOffHeapOutOfMemoryException(long total,long size){  super("Failed to allocate memory [total=" + total + ", failed="+ size+ ']');}  }
class C{  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request,int retryCount,String collection) throws SolrServerException, IOException {  connect();  String stateVerParam=null;  List<DocCollection> requestedCollections=null;  boolean isAdmin=ADMIN_PATHS.contains(request.getPath());  if (collection != null && !isAdmin) {    Set<String> requestedCollectionNames=getCollectionNames(getZkStateReader().getClusterState(),collection);    StringBuilder stateVerParamBuilder=null;    for (    String requestedCollection : requestedCollectionNames) {      DocCollection coll=getDocCollection(getZkStateReader().getClusterState(),requestedCollection,null);      int collVer=coll.getZNodeVersion();      if (coll.getStateFormat() > 1) {        if (requestedCollections == null)         requestedCollections=new ArrayList<>(requestedCollectionNames.size());        requestedCollections.add(coll);        if (stateVerParamBuilder == null) {          stateVerParamBuilder=new StringBuilder();        } else {          stateVerParamBuilder.append("|");        }        stateVerParamBuilder.append(coll.getName()).append(":").append(collVer);      }    }    if (stateVerParamBuilder != null) {      stateVerParam=stateVerParamBuilder.toString();    }  }  if (request.getParams() instanceof ModifiableSolrParams) {    ModifiableSolrParams params=(ModifiableSolrParams)request.getParams();    if (stateVerParam != null) {      params.set(STATE_VERSION,stateVerParam);    } else {      params.remove(STATE_VERSION);    }  }  NamedList<Object> resp=null;  try {    resp=sendRequest(request,collection);    Object o=resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION,resp.size() - 1);    if (o != null && o instanceof Map) {      resp.remove(resp.size() - 1);      Map invalidStates=(Map)o;      for (      Object invalidEntries : invalidStates.entrySet()) {        Map.Entry e=(Map.Entry)invalidEntries;        getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(),(Integer)e.getValue());      }    }  } catch (  Exception exc) {    Throwable rootCause=SolrException.getRootCause(exc);    if (collection == null || isAdmin) {      if (exc instanceof SolrServerException) {        throw (SolrServerException)exc;      } else       if (exc instanceof IOException) {        throw (IOException)exc;      } else       if (exc instanceof RuntimeException) {        throw (RuntimeException)exc;      } else {        throw new SolrServerException(rootCause);      }    }    int errorCode=(rootCause instanceof SolrException) ? ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;    log.error("Request to collection {} failed due to (" + errorCode + ") {}, retry? "+ retryCount,collection,rootCause.toString());    boolean wasCommError=(rootCause instanceof ConnectException || rootCause instanceof ConnectTimeoutException || rootCause instanceof NoHttpResponseException|| rootCause instanceof SocketException);    boolean stateWasStale=false;    if (retryCount < MAX_STALE_RETRIES && requestedCollections != null && !requestedCollections.isEmpty() && SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE) {      stateWasStale=true;      for (      DocCollection ext : requestedCollections) {        collectionStateCache.remove(ext.getName());      }    }    if (retryCount < MAX_STALE_RETRIES && !stateWasStale && requestedCollections != null && !requestedCollections.isEmpty() && wasCommError) {      for (      DocCollection ext : requestedCollections) {        DocCollection latestStateFromZk=getDocCollection(zkStateReader.getClusterState(),ext.getName(),null);        if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {          stateWasStale=true;          collectionStateCache.put(ext.getName(),new ExpiringCachedDocCollection(latestStateFromZk));        }      }    }    if (requestedCollections != null) {      requestedCollections.clear();    }    if (stateWasStale) {      log.warn("Re-trying request to  collection(s) " + collection + " after stale state error from server.");      resp=requestWithRetryOnStaleState(request,retryCount + 1,collection);    } else {      if (exc instanceof SolrException) {        throw exc;      }      if (exc instanceof SolrServerException) {        throw (SolrServerException)exc;      } else       if (exc instanceof IOException) {        throw (IOException)exc;      } else {        throw new SolrServerException(rootCause);      }    }  }  return resp;}  }
class C{  public AuthorizationManager(@NotNull Context context,@NotNull String productId){  mContext=context;  mProductId=productId;  try {    mAuthManager=new AmazonAuthorizationManager(mContext,Bundle.EMPTY);  } catch (  IllegalArgumentException e) {    Util.showAuthToast(mContext,"APIKey is incorrect or does not exist.");    Log.e(TAG,"Unable to Use Amazon Authorization Manager. APIKey is incorrect or does not exist. Does assets/api_key.txt exist in the main application?",e);  }}  }
class C{  public ParallelTaskInvalidException(String error){  super(error);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public JXSearchField(){  this("");}  }
class C{  private void handle200OK(SipTransactionContext ctx) throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("200 OK response received");  }  SipResponse resp=ctx.getSipResponse();  ListIterator<Header> associatedHeader=resp.getHeaders(SipUtils.HEADER_P_ASSOCIATED_URI);  ImsModule.getImsUserProfile().setAssociatedUri(associatedHeader);  SipInterface sipInterface=mNetworkInterface.getSipManager().getSipStack();  sipInterface.setInstanceId(mInstanceId);  ListIterator<Header> contacts=resp.getHeaders(ContactHeader.NAME);  while (contacts.hasNext()) {    ContactHeader contact=(ContactHeader)contacts.next();    String contactInstanceId=contact.getParameter(SipUtils.SIP_INSTANCE_PARAM);    if ((contactInstanceId != null) && (mInstanceId != null) && (mInstanceId.contains(contactInstanceId))) {      String pubGruu=contact.getParameter(SipUtils.PUBLIC_GRUU_PARAM);      sipInterface.setPublicGruu(pubGruu);      String tempGruu=contact.getParameter(SipUtils.TEMP_GRUU_PARAM);      sipInterface.setTemporaryGruu(tempGruu);    }  }  ListIterator<Header> routes=resp.getHeaders(SipUtils.HEADER_SERVICE_ROUTE);  sipInterface.setServiceRoutePath(routes);  String localIpAddr=mNetworkInterface.getNetworkAccess().getIpAddress();  ViaHeader respViaHeader=ctx.getSipResponse().getViaHeaders().next();  String received=respViaHeader.getParameter("received");  if (!respViaHeader.getHost().equals(localIpAddr) || ((received != null) && !received.equals(localIpAddr))) {    mNetworkInterface.setNatTraversal(true);    mNetworkInterface.setNatPublicAddress(received);    String viaRportStr=respViaHeader.getParameter("rport");    int viaRport=-1;    if (viaRportStr != null) {      try {        viaRport=Integer.parseInt(viaRportStr);      } catch (      NumberFormatException e) {        if (sLogger.isActivated()) {          sLogger.warn("Non-numeric rport value \"" + viaRportStr + "\"");        }      }    }    mNetworkInterface.setNatPublicPort(viaRport);    if (sLogger.isActivated()) {      sLogger.debug("NAT public interface detected: " + received + ":"+ viaRport);    }  } else {    mNetworkInterface.setNatTraversal(false);    mNetworkInterface.setNatPublicAddress(null);    mNetworkInterface.setNatPublicPort(-1);  }  if (sLogger.isActivated()) {    sLogger.debug("NAT traversal detection: " + mNetworkInterface.isBehindNat());  }  mRegistrationProcedure.readSecurityHeader(resp);  retrieveExpirePeriod(resp);  mRegistered=true;  mReasonCode=ReasonCode.UNSPECIFIED;  long currentTime=System.currentTimeMillis();  if (mExpirePeriod <= DEFAULT_EXPIRE_PERIOD) {    startTimer(currentTime,mExpirePeriod,0.5);  } else {    startTimer(currentTime,mExpirePeriod - SUBSTRACT_EXPIRE_PERIOD);  }  mCore.getListener().onRegistrationSuccessful();  if (mPendingUnRegister) {    deRegister();  }}  }
class C{  public static void addAttributes(SerializationHandler handler,int src) throws TransformerException {  TransformerImpl transformer=(TransformerImpl)handler.getTransformer();  DTM dtm=transformer.getXPathContext().getDTM(src);  for (int node=dtm.getFirstAttribute(src); DTM.NULL != node; node=dtm.getNextAttribute(node)) {    addAttribute(handler,node);  }}  }
class C{  public NFA(int numInput,LexScan scanner,RegExps regExps,Macros macros,CharClasses classes){  this(numInput,regExps.NFASize(macros) + 2 * scanner.states.number());  this.scanner=scanner;  this.regExps=regExps;  this.macros=macros;  this.classes=classes;  numLexStates=scanner.states.number();  int new_num=numEntryStates();  ensureCapacity(new_num);  numStates=new_num;}  }
class C{  protected void before(){}  }
class C{  private void loadConfig(){  config.load();  eliteRarity=Integer.parseInt(config.get(Configuration.CATEGORY_GENERAL,"eliteRarity",15,"One in THIS many Mobs will become atleast rare").getString());  ultraRarity=Integer.parseInt(config.get(Configuration.CATEGORY_GENERAL,"ultraRarity",7,"One in THIS many already rare Mobs will become atleast ultra").getString());  infernoRarity=Integer.parseInt(config.get(Configuration.CATEGORY_GENERAL,"infernoRarity",7,"One in THIS many already ultra Mobs will become infernal").getString());  useSimpleEntityClassNames=config.get(Configuration.CATEGORY_GENERAL,"useSimpleEntityClassnames",true,"Use Entity class names instead of ingame Entity names for the config").getBoolean(true);  disableHealthBar=config.get(Configuration.CATEGORY_GENERAL,"disableGUIoverlay",false,"Disables the ingame Health and Name overlay").getBoolean(false);  modHealthFactor=config.get(Configuration.CATEGORY_GENERAL,"mobHealthFactor","1.0","Multiplier applied ontop of all of the modified Mobs health").getDouble(1.0D);  parseItemsForList(config.get(Configuration.CATEGORY_GENERAL,"droppedItemIDsElite","iron_shovel,iron_pickaxe,iron_axe,iron_sword,iron_hoe,chainmail_helmet,chainmail_chestplate,chainmail_leggings,chainmail_boots,iron_helmet,iron_chestplate,iron_leggings,iron_boots,cookie-0-6","List of equally likely to drop Items for Elites, seperated by commas, syntax: ID-meta-stackSize-stackSizeRandomizer, everything but ID is optional, see changelog").getString(),instance.dropIdListElite);  parseItemsForList(config.get(Configuration.CATEGORY_GENERAL,"droppedItemIDsUltra","bow,iron_hoe,chainmail_helmet,chainmail_chestplate,chainmail_leggings,chainmail_boots,iron_helmet,iron_chestplate,iron_leggings,iron_boots,golden_helmet,golden_chestplate,golden_leggings,golden_boots,golden_apple,blaze_powder-0-3,enchanted_book","List of equally likely to drop Items for Ultras, seperated by commas, syntax: ID-meta-stackSize-stackSizeRandomizer, everything but ID is optional, see changelog").getString(),instance.dropIdListUltra);  parseItemsForList(config.get(Configuration.CATEGORY_GENERAL,"droppedItemIDsInfernal","diamond-0-3,diamond_sword,diamond_shovel,diamond_pickaxe,diamond_axe,diamond_hoe,chainmail_helmet,chainmail_chestplate,chainmail_leggings,chainmail_boots,diamond_helmet,diamond_chestplate,diamond_leggings,diamond_boots,ender_pearl,enchanted_book","List of equally likely to drop Items for Infernals, seperated by commas, syntax: ID-meta-stackSize-stackSizeRandomizer, everything but ID is optional, see changelog").getString(),instance.dropIdListInfernal);  maxDamage=config.get(Configuration.CATEGORY_GENERAL,"maxOneShotDamage",10d,"highest amount of damage an Infernal Mob or reflecting Mod will do in a single strike").getDouble(10d);  parseIDsForList(config.get(Configuration.CATEGORY_GENERAL,"dimensionIDBlackList","","List of DimensionIDs where InfernalMobs will NEVER spawn").getString(),instance.dimensionBlackList);  config.save();}  }
class C{  public boolean hasChildren(){  return (!this.children.isEmpty());}  }
class C{  @Override public int executeUpdate(String sql,int autoGeneratedKeys) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("executeUpdate(" + quote(sql) + ", "+ autoGeneratedKeys+ ");");    }    return executeUpdateInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public ThreadInterrupter(Thread toInterrupt){  this.toInterrupt=toInterrupt;}  }
class C{  public static <T>TStream<T> rateMeter(TStream<T> stream){  return stream.pipe(new RateMeter<T>());}  }
class C{  public void testUnivariateTEforCoupledVariablesFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/2coupledRandomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={4};  double[] expectedFromTRENTOOL={0.3058006};  System.out.println("Kraskov TE comparison 1 - univariate coupled data 1");  checkTEForGivenData(MatrixUtils.selectColumn(data,0),MatrixUtils.selectColumn(data,1),kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{-0.0029744};  System.out.println("  reverse direction:");  checkTEForGivenData(MatrixUtils.selectColumn(data,1),MatrixUtils.selectColumn(data,0),kNNs,expectedFromTRENTOOL);}  }
class C{  public NameServiceException(String name,Throwable rootCause){  super(name);  this.rootCause=rootCause;}  }
class C{  public static boolean hasParents(){  return BaggageContents.contains(XTRACE_BAGGAGE_NAMESPACE,PARENT_EVENT_ID_BAGGAGE_FIELD);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MWorkflow[");  sb.append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public DataModelBean(){  accountId=new UISelectOne();  accountId.setId("accountId");  accountId.setValue("0");}  }
class C{  public void drawElement(Graphics sc,ILineSegment ils){  double x1=ils.getStart().getX();  double y1=ils.getStart().getY();  double x2=ils.getEnd().getX();  double y2=ils.getEnd().getY();  sc.drawLine((int)x1,(int)y1,(int)x2,(int)y2);}  }
class C{  public static void showError(String title,String msg,Exception ex){  Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();  if (ex != null)   msg=msg + "\n\n" + ex;  MessageDialog.openError(shell,title,msg);}  }
class C{  public static String decryptName(final String logMask){  return Encryption.decryptName(logMask,Keys.self().getChallengeKey()[0]);}  }
class C{  public static boolean isRightMouseButton(MouseEvent anEvent){  return ((anEvent.getModifiersEx() & InputEvent.BUTTON3_DOWN_MASK) != 0 || anEvent.getButton() == MouseEvent.BUTTON3);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public boolean hasExtensions(){  return (extensions != null);}  }
class C{  public final void flushBuffer() throws IOException {  final StreamImpl source=_source;  if (_isDisableFlush || _source == null)   return;  final int len=_writeLength;  if (len > 0) {    _writeLength=0;    source.write(_writeBuffer,0,len,false);    _position+=len;    _isFlushRequired=true;    source.flushBuffer();  }}  }
class C{  public void modified(Boolean deliveryFailed,Boolean undeliverableHere) throws Exception {  if (receiver == null) {    throw new IllegalStateException("Can't modify non-received message.");  }  receiver.modified(delivery,deliveryFailed,undeliverableHere);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:41.684 -0500",hash_original_method="5F549E6AF9CCE63195F783E8262D413B",hash_generated_method="E2A829C575CE61DD8A74E19EBF149E4F") public static void startMethodTracingDdms(int bufferSize,int flags){  startMethodTracingNative(null,null,bufferSize,flags);}  }
class C{  @DSComment("Traffic statistics") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:23.282 -0500",hash_original_method="171C5D5D16A1A39BAF8B5EAF02935E25",hash_generated_method="9D87F629693BDA83CCD42A680700F21C") public static void incrementOperationCount(int tag,int operationCount){  final INetworkStatsService statsService=INetworkStatsService.Stub.asInterface(ServiceManager.getService(Context.NETWORK_STATS_SERVICE));  final int uid=android.os.Process.myUid();  try {    statsService.incrementOperationCount(uid,tag,operationCount);  } catch (  RemoteException e) {    throw new RuntimeException(e);  }}  }
class C{  public body addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  private static void inPlaceMerge(final long from,long mid,final long to,final LongComparator comp,final BigSwapper swapper){  if (from >= mid || mid >= to)   return;  if (to - from == 2) {    if (comp.compare(mid,from) < 0) {      swapper.swap(from,mid);    }    return;  }  long firstCut;  long secondCut;  if (mid - from > to - mid) {    firstCut=from + (mid - from) / 2;    secondCut=lowerBound(mid,to,firstCut,comp);  } else {    secondCut=mid + (to - mid) / 2;    firstCut=upperBound(from,mid,secondCut,comp);  }  long first2=firstCut;  long middle2=mid;  long last2=secondCut;  if (middle2 != first2 && middle2 != last2) {    long first1=first2;    long last1=middle2;    while (first1 < --last1)     swapper.swap(first1++,last1);    first1=middle2;    last1=last2;    while (first1 < --last1)     swapper.swap(first1++,last1);    first1=first2;    last1=last2;    while (first1 < --last1)     swapper.swap(first1++,last1);  }  mid=firstCut + (secondCut - mid);  inPlaceMerge(from,firstCut,mid,comp,swapper);  inPlaceMerge(mid,secondCut,to,comp,swapper);}  }
class C{  @SuppressWarnings("unchecked") public boolean equalsIgnoreCase(ForeignKey otherFk){  boolean checkName=isCheckName(otherFk);  if ((!checkName || name.equalsIgnoreCase(otherFk.name)) && foreignTableName.equalsIgnoreCase(otherFk.foreignTableName)) {    HashSet<Reference> otherRefs=new HashSet<Reference>();    otherRefs.addAll(otherFk.references);    for (Iterator<?> it=references.iterator(); it.hasNext(); ) {      Reference curLocalRef=(Reference)it.next();      boolean found=false;      for (Iterator<?> otherIt=otherRefs.iterator(); otherIt.hasNext(); ) {        Reference curOtherRef=(Reference)otherIt.next();        if (curLocalRef.equalsIgnoreCase(curOtherRef)) {          otherIt.remove();          found=true;          break;        }      }      if (!found) {        return false;      }    }    return otherRefs.isEmpty();  } else {    return false;  }}  }
class C{  @Override public void messageItemDetails(String strClass,String item,String description,HashMap<Integer,String> options,int defaultOption){  if (!classPreferenceList.containsKey(strClass)) {    classPreferenceList.put(strClass,new ClassPreferences());  }  ArrayList<MultipleChoice> a=classPreferenceList.get(strClass).getMultipleChoiceList();  for (int i=0; i < a.size(); i++) {    if (a.get(i).getItem().equals(item)) {      a.get(i).setMessageItems(description,options,defaultOption);      return;    }  }  a.add(new MultipleChoice(description,item,options,defaultOption));}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof ArrowNeedle)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  ArrowNeedle that=(ArrowNeedle)obj;  if (this.isArrowAtTop != that.isArrowAtTop) {    return false;  }  return true;}  }
class C{  public void reset(){  super.reset();  H1=0x6a09e667;  H2=0xbb67ae85;  H3=0x3c6ef372;  H4=0xa54ff53a;  H5=0x510e527f;  H6=0x9b05688c;  H7=0x1f83d9ab;  H8=0x5be0cd19;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  void releaseCompositionArea(){synchronized (compositionAreaHandlerLock) {    if (compositionAreaHandler != null) {      compositionAreaHandler.releaseCompositionArea();    }  }}  }
class C{  private static boolean isMergedSegment(String segName){  if (segName.contains(".")) {    return true;  }  return false;}  }
class C{  public final int attIndex(){  return m_attIndex;}  }
class C{  void waitIfStalled(){  if (stalled) {synchronized (this) {      if (stalled) {        try {          incWaiters();          wait(1000);          decrWaiters();        } catch (        InterruptedException e) {          throw new ThreadInterruptedException(e);        }      }    }  }}  }
class C{  public static boolean checkPermission(Context context,String permName,String pkgName){  PackageManager pm=context.getPackageManager();  boolean permission=(PackageManager.PERMISSION_GRANTED == pm.checkPermission(permName,pkgName));  return permission;}  }
class C{  void calcDependencyGraph(boolean[][] edges,SeparationSet[][] sepsets){  SeparationSet oSepSet;  for (int iNode1=0; iNode1 < maxn(); iNode1++) {    for (int iNode2=0; iNode2 < maxn(); iNode2++) {      edges[iNode1][iNode2]=true;    }  }  for (int iNode1=0; iNode1 < maxn(); iNode1++) {    edges[iNode1][iNode1]=false;  }  for (int iCardinality=0; iCardinality <= getMaxCardinality(); iCardinality++) {    for (int iNode1=0; iNode1 <= maxn() - 2; iNode1++) {      for (int iNode2=iNode1 + 1; iNode2 < maxn(); iNode2++) {        if (edges[iNode1][iNode2]) {          oSepSet=existsSepSet(iNode1,iNode2,iCardinality,edges);          if (oSepSet != null) {            edges[iNode1][iNode2]=false;            edges[iNode2][iNode1]=false;            sepsets[iNode1][iNode2]=oSepSet;            sepsets[iNode2][iNode1]=oSepSet;            System.err.print("I(" + name(iNode1) + ", {");            for (int iNode3=0; iNode3 < iCardinality; iNode3++) {              System.err.print(name(oSepSet.m_set[iNode3]) + " ");            }            System.err.print("} ," + name(iNode2) + ")\n");          }        }      }    }    System.err.print(iCardinality + " ");    for (int iNode1=0; iNode1 < maxn(); iNode1++) {      System.err.print(name(iNode1) + " ");    }    System.err.print('\n');    for (int iNode1=0; iNode1 < maxn(); iNode1++) {      for (int iNode2=0; iNode2 < maxn(); iNode2++) {        if (edges[iNode1][iNode2]) {          System.err.print("X ");        } else {          System.err.print(". ");        }      }      System.err.print(name(iNode1) + " ");      System.err.print('\n');    }  }}  }
class C{  public Element createElement(String tagName) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  private static void add0(Collection<String> src,String line){  src.add(line);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void checkServiceProfileTemplateURIs(Set<String> sptIds,DbClient dbClient){  Set<String> invalidIds=new HashSet<String>();  if ((sptIds != null) && (!sptIds.isEmpty())) {    Iterator<String> sptIdsIter=sptIds.iterator();    while (sptIdsIter.hasNext()) {      URI sptURI=null;      try {        sptURI=URI.create(sptIdsIter.next());        UCSServiceProfileTemplate serviceProfileTemplate=dbClient.queryObject(UCSServiceProfileTemplate.class,sptURI);        if (serviceProfileTemplate == null) {          invalidIds.add(sptURI.toString());        }      } catch (      DatabaseException e) {        if (sptURI != null) {          invalidIds.add(sptURI.toString());        }      }    }  }  if (!invalidIds.isEmpty()) {    throw APIException.badRequests.theURIsOfParametersAreNotValid("service profile templates",invalidIds);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:09.896 -0500",hash_original_method="2D22A2D80C0943AA7141B4A0B4034D5B",hash_generated_method="F9F2A0914D7FFA9C370363F5FF6BD17F") public String encode(){  String encoding=SIPConstants.SIP_VERSION_STRING + SP + statusCode;  if (reasonPhrase != null)   encoding+=SP + reasonPhrase;  encoding+=NEWLINE;  return encoding;}  }
class C{  public void processRegexOpener(){  allowSharpQuote=true;  isEscaped=false;  regexCommand=yytext();  if (StringUtil.equals("s",regexCommand)) {    sectionsNumber=2;  } else {    sectionsNumber=1;  }  pushState();  yybegin(LEX_REGEX_OPENER);}  }
class C{  static public int ceil(float x){  return (int)(x + BIG_ENOUGH_CEIL) - BIG_ENOUGH_INT;}  }
class C{  public static IgniteBiTuple<Collection<IgniteConfiguration>,? extends GridSpringResourceContext> loadConfigurations(URL springCfgUrl) throws IgniteCheckedException {  IgniteSpringHelper spring=SPRING.create(false);  return spring.loadConfigurations(springCfgUrl);}  }
class C{  @Override public synchronized void updateBigDecimal(String columnName,BigDecimal x) throws SQLException {  updateBigDecimal(findColumn(columnName),x);}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof DontFragmentAttribute))   return false;  return true;}  }
class C{  public void testParseUsers(){  User expectedUser1=new User();  expectedUser1.setName("n1");  expectedUser1.setPassword("p1");  expectedUser1.addRole("r1");  User expectedUser2=new User();  expectedUser2.setName("n2");  expectedUser2.setPassword("p2");  expectedUser2.addRole("r2");  List<User> users=User.parseUsers("n1:p1:r1|n2:p2:r2");  assertEquals(2,users.size());  assertEquals(expectedUser1,users.get(0));  assertEquals(expectedUser2,users.get(1));}  }
class C{  public OrderInfo orderByPath(String path,Map<String,Object> parameters) throws ValidationException {  return doOrder(catalogPath(path),parameters);}  }
class C{  public S2LatLngRect intersection(S2LatLngRect other){  R1Interval intersectLat=lat.intersection(other.lat);  S1Interval intersectLng=lng.intersection(other.lng);  if (intersectLat.isEmpty() || intersectLng.isEmpty()) {    return empty();  }  return new S2LatLngRect(intersectLat,intersectLng);}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public boolean removeHost(MacAddress host){  for (  Entry<String,MacAddress> entry : this.portToMac.entrySet()) {    if (entry.getValue().equals(host)) {      this.portToMac.remove(entry.getKey());      return true;    }  }  return false;}  }
class C{  protected void engineInit(int keysize,SecureRandom random){  if (((keysize % 8) != 0) || (keysize < 32) || (keysize > 448)) {    throw new InvalidParameterException("Keysize must be " + "multiple of 8, and can " + "only range from 32 to 448 "+ "(inclusive)");  }  this.keysize=keysize / 8;  this.engineInit(random);}  }
class C{  public Socks5Message(InputStream in,boolean clientMode) throws SocksException, IOException {  read(in,clientMode);}  }
class C{  public void persistCurrentUser(){  SharedPreferences settings=mApplication.getSharedPreferences(PREFS_NAME,0);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(KEY_PERSISTENT_USER_ID,mCurrentUser.getId());  editor.apply();}  }
class C{  private int mergeThreeWordExpressions(){  int changes=0;  boolean changed;  do {    final Iterator<Expression> it=expressions.iterator();    changed=false;    if (it.hasNext()) {      Expression third=it.next();      if (it.hasNext()) {        Expression first=null;        Expression second=third;        third=it.next();        while (it.hasNext()) {          first=second;          second=third;          third=it.next();          if (first.getBreakFlag() || second.getBreakFlag()) {            continue;          }          if (context.isForMatching()) {            if (first.getNormalized().contains(Expression.JOKER) || second.getNormalized().contains(Expression.JOKER) || third.getNormalized().contains(Expression.JOKER)) {              continue;            }          }          if (first.isObject() && second.getNormalized().equals("of") && third.isObject()) {            final String expr=first.getNormalized() + " of " + third.getNormalized();            if (!Grammar.isNormalized(expr)) {              first.mergeRight(second,false);              expressions.remove(second);              third.mergeLeft(first,false);              expressions.remove(first);              changed=true;              break;            }          }        }      }    }    if (changed) {      ++changes;    }  } while (changed);  return changes;}  }
class C{  public void paint(Graphics2D g2D,int pageNo,Point2D pageStart,Properties ctx,boolean isView){  Point2D.Double location=getAbsoluteLocation(pageStart);  if (m_originalString != null)   translate(ctx);  AttributedString aString=null;  AttributedCharacterIterator iter=null;  AttributedCharacterIterator iter2=null;  float xPos=(float)location.x;  float yPos=(float)location.y;  float yPen=0f;  float height=0f;  float width=0f;  for (int i=0; i < m_string_paper.length; i++) {    if (isView) {      if (m_string_view[i] == null)       continue;      aString=m_string_view[i];    } else {      if (m_string_paper[i] == null)       continue;      aString=m_string_paper[i];    }    iter=aString.getIterator();    if (iter.getBeginIndex() == iter.getEndIndex())     continue;    int tabPos=-1;    boolean is8Bit=true;    for (char c=iter.first(); c != CharacterIterator.DONE; c=iter.next()) {      if (c == '\t' && tabPos == -1)       tabPos=iter.getIndex();      if (c > 255)       is8Bit=false;    }    TextLayout layout=null;    float xPen=xPos;    if (p_maxWidth == 0f) {      if (tabPos == -1) {        layout=new TextLayout(iter,g2D.getFontRenderContext());        yPen=yPos + layout.getAscent();        g2D.setFont(m_font);        g2D.setPaint(m_paint);        g2D.drawString(iter,xPen,yPen);        yPos+=layout.getAscent() + layout.getDescent() + layout.getLeading();        if (width < layout.getAdvance())         width=layout.getAdvance();      } else {        LineBreakMeasurer measurer=new LineBreakMeasurer(iter,g2D.getFontRenderContext());        layout=measurer.nextLayout(9999,tabPos,false);        float lineHeight_1=layout.getAscent() + layout.getDescent() + layout.getLeading();        yPen=yPos + layout.getAscent();        layout.draw(g2D,xPen,yPen);        xPen=getTabPos(xPos,layout.getAdvance());        float lineWidth=xPen - xPos;        layout=measurer.nextLayout(9999);        float lineHeight_2=layout.getAscent() + layout.getDescent() + layout.getLeading();        layout.draw(g2D,xPen,yPen);        yPos+=Math.max(lineHeight_1,lineHeight_2);        lineWidth+=layout.getAdvance();        if (width < lineWidth)         width=lineWidth;      }    } else {      boolean fastDraw=LayoutEngine.s_FASTDRAW;      if (fastDraw && !isView && !is8Bit)       fastDraw=false;      LineBreakMeasurer measurer=new LineBreakMeasurer(iter,g2D.getFontRenderContext());      while (measurer.getPosition() < iter.getEndIndex()) {        if (tabPos == -1) {          layout=measurer.nextLayout(p_maxWidth);          if (measurer.getPosition() < iter.getEndIndex())           fastDraw=false;        } else {          fastDraw=false;          layout=measurer.nextLayout(p_maxWidth,tabPos,false);        }        float lineHeight=layout.getAscent() + layout.getDescent() + layout.getLeading();        if (p_maxHeight == -1f && i == 0)         p_maxHeight=lineHeight;        if (p_maxHeight == 0f || (height + lineHeight) <= p_maxHeight) {          yPen=(float)location.y + height + layout.getAscent();          if (tabPos != -1) {            layout.draw(g2D,xPen,yPen);            xPen=getTabPos(xPos,layout.getAdvance());            layout=measurer.nextLayout(p_width,iter.getEndIndex(),true);            tabPos=-1;          } else           if ((MPrintFormatItem.FIELDALIGNMENTTYPE_TrailingRight.equals(p_FieldAlignmentType) && layout.isLeftToRight()) || (MPrintFormatItem.FIELDALIGNMENTTYPE_LeadingLeft.equals(p_FieldAlignmentType) && !layout.isLeftToRight()))           xPen+=p_maxWidth - layout.getAdvance(); else           if (MPrintFormatItem.FIELDALIGNMENTTYPE_Center.equals(p_FieldAlignmentType))           xPen+=(p_maxWidth - layout.getAdvance()) / 2; else           if (MPrintFormatItem.FIELDALIGNMENTTYPE_Block.equals(p_FieldAlignmentType) && measurer.getPosition() < iter.getEndIndex()) {            layout=layout.getJustifiedLayout(p_maxWidth);            fastDraw=false;          }          if (fastDraw) {            g2D.setFont(m_font);            g2D.setPaint(m_paint);            g2D.drawString(iter,xPen,yPen);            height+=lineHeight;            break;          } else {            layout.draw(g2D,xPen,yPen);          }          height+=lineHeight;        }      }      width=p_maxWidth;    }  }  if (m_check != null) {    int x=(int)(location.x + width + 1);    int y=(int)(location.y);    g2D.drawImage(m_check.booleanValue() ? LayoutEngine.IMAGE_TRUE : LayoutEngine.IMAGE_FALSE,x,y,this);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:33.547 -0500",hash_original_method="CCC24799A0A4E36EF41D9DC91181B3F5",hash_generated_method="CCA099F176C13ED8EEA04F95F200FB2A") private Retry processResponseHeaders() throws IOException {switch (getResponseCode()) {case HTTP_PROXY_AUTH:    if (!usingProxy()) {      throw new IOException("Received HTTP_PROXY_AUTH (407) code while not using proxy");    }case HTTP_UNAUTHORIZED:  boolean credentialsFound=processAuthHeader(getResponseCode(),httpEngine.getResponseHeaders(),rawRequestHeaders);return credentialsFound ? Retry.SAME_CONNECTION : Retry.NONE;case HTTP_MULT_CHOICE:case HTTP_MOVED_PERM:case HTTP_MOVED_TEMP:case HTTP_SEE_OTHER:if (!getInstanceFollowRedirects()) {return Retry.NONE;}if (++redirectionCount > HttpEngine.MAX_REDIRECTS) {throw new ProtocolException("Too many redirects");}String location=getHeaderField("Location");if (location == null) {return Retry.NONE;}URL previousUrl=url;url=new URL(previousUrl,location);if (!previousUrl.getProtocol().equals(url.getProtocol())) {return Retry.NONE;}if (previousUrl.getHost().equals(url.getHost()) && previousUrl.getEffectivePort() == url.getEffectivePort()) {return Retry.SAME_CONNECTION;} else {return Retry.DIFFERENT_CONNECTION;}default :return Retry.NONE;}}  }
class C{  public StatisticalLineAndShapeRenderer(){  this(true,true);}  }
class C{  public boolean destroyGroup(String playerName){  Group group=getGroup(playerName);  if (group == null) {    return false;  }  group.destory();  groups.remove(group);  return true;}  }
class C{  public Vector2f zero(){  this.x=0.0f;  this.y=0.0f;  return this;}  }
class C{  public static long binCoeff(int n,int k){  return Math.round(Math.exp(logBinCoeff(n,k)));}  }
class C{  public void deleteConditional(Conditional c){  deregister(c);}  }
class C{  public long readLong() throws IOException {  return bfdi.readLong();}  }
class C{  public void deleteRoute(Route r){  deregister(r);}  }
class C{  public Cosh(){  super("cosh",1);}  }
class C{  public static Scenario loadScenarioFromPlansNetworkAndConfig(String populationFile,String networkFile,String configFile){  Config config=new Config();  config.addCoreModules();  ConfigReader configReader=new ConfigReader(config);  configReader.readFile(configFile);  config.plans().setInputFile(populationFile);  config.plans().setInputPersonAttributeFile(null);  config.vehicles().setVehiclesFile(null);  config.network().setInputFile(networkFile);  Scenario scenario=ScenarioUtils.loadScenario(config);  return scenario;}  }
class C{  public void disconfirm(Object msg){  if (compareAndSetState(State.Accepted,State.Disconfirmed)) {  }}  }
class C{  public MaterialPackage(MaterialPackageBO materialPackageBO,List<GenericTrack> genericTracks){  super(materialPackageBO);  this.materialPackageBO=materialPackageBO;  this.genericTracks=Collections.unmodifiableList(genericTracks);}  }
class C{  public void animateFromZerotoCurrentValue(){  animateText(0,getEndValue());}  }
class C{  protected void initializeData(){  this.vertex_ids=HashBiMap.<V,String>create();  this.vertex_desc=new HashMap<V,String>();  this.vertex_metadata=new HashMap<String,GraphMLMetadata<V>>();  this.edge_ids=HashBiMap.<E,String>create();  this.edge_desc=new HashMap<E,String>();  this.edge_metadata=new HashMap<String,GraphMLMetadata<E>>();  this.graph_desc=new HashMap<G,String>();  this.graph_metadata=new HashMap<String,GraphMLMetadata<G>>();  this.hyperedge_vertices=new ArrayList<V>();}  }
class C{  public void onDestroy(boolean isSaved){  EventBus.getDefault().unregister(this);  for (  RTEditText editor : mEditors.values()) {    editor.unregister();    editor.onDestroy(isSaved);  }  mEditors.clear();  for (  RTToolbar toolbar : mToolbars.values()) {    toolbar.removeToolbarListener();  }  mToolbars.clear();  mRTApi=null;}  }
class C{  public final ActorRef self(){  return context.getSelf();}  }
class C{  public static boolean hasToken(File dir,String name) throws IOException {  return readToken(dir,name).isPresent();}  }
class C{  @SuppressWarnings("unused") private void notSoLazyPathfinder(final Coords dest,final MoveStepType type,final int timeLimit){  final long endTime=System.currentTimeMillis() + timeLimit;  MoveStepType step=type;  if (step != MoveStepType.BACKWARDS) {    step=MoveStepType.FORWARDS;  }  final MovePathComparator mpc=new MovePathComparator(dest,step == MoveStepType.BACKWARDS);  MovePath bestPath=clone();  final HashMap<MovePath.Key,MovePath> discovered=new HashMap<MovePath.Key,MovePath>();  discovered.put(bestPath.getKey(),bestPath);  final PriorityQueue<MovePath> candidates=new PriorityQueue<MovePath>(110,mpc);  candidates.add(bestPath);  boolean keepLooping=getFinalCoords().distance(dest) > 1;  int loopcount=0;  while ((candidates.size() > 0) && keepLooping) {    final MovePath candidatePath=candidates.poll();    final Coords startingPos=candidatePath.getFinalCoords();    final int startingElev=candidatePath.getFinalElevation();    if (candidatePath.getFinalCoords().distance(dest) == 0) {      bestPath=candidatePath;      keepLooping=false;      break;    }    final Iterator<MovePath> adjacent=candidatePath.getNextMoves(step == MoveStepType.BACKWARDS,step == MoveStepType.FORWARDS).iterator();    while (adjacent.hasNext()) {      final MovePath expandedPath=adjacent.next();      if (expandedPath.getLastStep().isMovementPossible(getGame(),startingPos,startingElev)) {        if (discovered.containsKey(expandedPath.getKey())) {          continue;        }        candidates.add(expandedPath);        discovered.put(expandedPath.getKey(),expandedPath);        if (candidates.size() > 100) {          candidates.remove(candidates.size() - 1);        }      }    }    if (type == MoveStepType.CHARGE || type == MoveStepType.DFA) {      MovePath expandedPath=candidatePath.clone();      expandedPath.addStep(type);      if (expandedPath.getLastStep().isMovementPossible(getGame(),startingPos,startingElev)) {        if (discovered.containsKey(expandedPath.getKey())) {          continue;        }        candidates.add(expandedPath);        discovered.put(expandedPath.getKey(),expandedPath);        if (candidates.size() > 100) {          candidates.remove(candidates.size() - 1);        }      }    }    loopcount++;    if (((loopcount % 256) == 0) && keepLooping && (candidates.size() > 0)) {      final MovePath front=candidates.peek();      if (front.getFinalCoords().distance(dest) < bestPath.getFinalCoords().distance(dest)) {        bestPath=front;      }      if (System.currentTimeMillis() > endTime) {        keepLooping=false;        System.out.println("Time limit reached searching " + "for path!");      }    }  }  if (getFinalCoords().distance(dest) > bestPath.getFinalCoords().distance(dest)) {    steps=bestPath.steps;  }  if (!getFinalCoords().equals(dest)) {    lazyPathfinder(dest,type);  }}  }
class C{  private boolean isInSegmentEnvelopes(Coordinate intPt){  Envelope env0=new Envelope(inputLines[0][0],inputLines[0][1]);  Envelope env1=new Envelope(inputLines[1][0],inputLines[1][1]);  return env0.contains(intPt) && env1.contains(intPt);}  }
class C{  protected void runDefaultActions(AbstractEvent e){  List runables=e.getDefaultActions();  if (runables != null) {    Iterator i=runables.iterator();    while (i.hasNext()) {      Runnable r=(Runnable)i.next();      r.run();    }  }}  }
class C{  @Override public void sync(Parser recognizer){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:57.761 -0400",hash_original_method="1433914DD19ED8527D865BA07D38D783",hash_generated_method="F8FD011E80F5AB65A2E076510F3CC003") public void reset(){  adler=1;}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  Class factoryClass=lookUpFactoryClass(factoryId,propertiesFilename,fallbackClassName);  if (factoryClass == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  try {    Object instance=factoryClass.newInstance();    debugPrintln("created new instance of factory " + factoryId);    return instance;  } catch (  Exception x) {    throw new ConfigurationError("Provider for factory " + factoryId + " could not be instantiated: "+ x,x);  }}  }
class C{  private void checkFailoverSafe() throws Exception {  IgniteSemaphore semaphore=createSemaphore("rmv",5,true);  assert semaphore.isFailoverSafe();  removeSemaphore("rmv");  IgniteSemaphore semaphore1=createSemaphore("rmv1",5,false);  assert !semaphore1.isFailoverSafe();  removeSemaphore("rmv1");}  }
class C{  public static byte[] decode(byte[] data){  int len=data.length / 4 * 3;  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);  try {    encoder.decode(data,0,data.length,bOut);  } catch (  Exception e) {    throw new DecoderException("unable to decode base64 data: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public ServletOutputStream createOutputStream() throws IOException {  if (debug > 1) {    System.out.println("createOutputStream gets called");  }  CompressionResponseStream stream=new CompressionResponseStream(this,origResponse.getOutputStream());  stream.setDebugLevel(debug);  stream.setCompressionThreshold(compressionThreshold);  stream.setCompressionBuffer(compressionBuffer);  stream.setCompressionMimeTypes(compressionMimeTypes);  return stream;}  }
class C{  public String ruleString(){  String ruleString="(" + rules[0].ruleString();  for (int i=1; i < rules.length; i++) {    ruleString+="& " + rules[i].ruleString();  }  return ruleString + ")";}  }
class C{  @Override public void addPacket(byte[] chunk,int flowControlSize,boolean isContinues){  int flowControlCredit=0;synchronized (this) {    packetAdded=true;    if (outStream != null) {      try {        if (!isContinues) {          streamEnded=true;        }        if (fileCache != null) {          fileCache.cachePackage(chunk);        }        outStream.write(chunk);        flowControlCredit=flowControlSize;        notifyAll();        if (streamEnded) {          outStream.close();        }      } catch (      Exception e) {        ActiveMQClientLogger.LOGGER.errorAddingPacket(e);        handledException=e;      }    } else {      if (fileCache != null) {        try {          fileCache.cachePackage(chunk);        } catch (        Exception e) {          ActiveMQClientLogger.LOGGER.errorAddingPacket(e);          handledException=e;        }      }      largeMessageData.offer(new LargeData(chunk,flowControlSize,isContinues));    }  }  if (flowControlCredit != 0) {    try {      consumerInternal.flowControl(flowControlCredit,!isContinues);    } catch (    Exception e) {      ActiveMQClientLogger.LOGGER.errorAddingPacket(e);      handledException=e;    }  }}  }
class C{  public void testGetF17(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF17();  assertEquals(expResult,result);}  }
class C{  public LinkedHashMap(Map m){  super(m);  accessOrder=false;}  }
class C{  public ReportMailingJob findOneThrowExceptionIfNotFound(final Long id){  final ReportMailingJob reportMailingJob=this.reportMailingJobRepository.findOne(id);  if (reportMailingJob == null || reportMailingJob.isDeleted()) {    throw new ReportMailingJobNotFoundException(id);  }  return reportMailingJob;}  }
class C{  protected void notifyDataChangedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onChanged();    }  }}  }
class C{  public static void saveArff(Instances i,String filename) throws IOException {  System.out.println("\nSaving arff file: " + filename);  ArffSaver saver=new ArffSaver();  saver.setInstances(i);  saver.setFile(new File(filename));  saver.writeBatch();}  }
class C{  public void onStackAnimationFinished(){  mStackAnimationCount--;  if (mStackAnimationCount == 0)   super.onAnimationFinished();}  }
class C{  @Override protected void onFocusChanged(boolean focused,int direction,Rect previouslyFocusedRect){  super.onFocusChanged(focused,direction,previouslyFocusedRect);  showErrorIconHax(lastErrorIcon);}  }
class C{  public void processMouseEvent(MouseEvent event){  int screenX, screenY;  Point p;  int i, c, j, d;  Component mc;  Rectangle r2;  int cWidth, cHeight;  MenuElement menuElement;  MenuElement subElements[];  MenuElement path[];  Vector<MenuElement> tmp;  int selectionSize;  p=event.getPoint();  Component source=event.getComponent();  if ((source != null) && !source.isShowing()) {    return;  }  int type=event.getID();  int modifiers=event.getModifiers();  if ((type == MouseEvent.MOUSE_ENTERED || type == MouseEvent.MOUSE_EXITED) && ((modifiers & (InputEvent.BUTTON1_MASK | InputEvent.BUTTON2_MASK | InputEvent.BUTTON3_MASK)) != 0)) {    return;  }  if (source != null) {    SwingUtilities.convertPointToScreen(p,source);  }  screenX=p.x;  screenY=p.y;  tmp=(Vector<MenuElement>)selection.clone();  selectionSize=tmp.size();  boolean success=false;  for (i=selectionSize - 1; i >= 0 && success == false; i--) {    menuElement=(MenuElement)tmp.elementAt(i);    subElements=menuElement.getSubElements();    path=null;    for (j=0, d=subElements.length; j < d && success == false; j++) {      if (subElements[j] == null)       continue;      mc=subElements[j].getComponent();      if (!mc.isShowing())       continue;      if (mc instanceof JComponent) {        cWidth=mc.getWidth();        cHeight=mc.getHeight();      } else {        r2=mc.getBounds();        cWidth=r2.width;        cHeight=r2.height;      }      p.x=screenX;      p.y=screenY;      SwingUtilities.convertPointFromScreen(p,mc);      if ((p.x >= 0 && p.x < cWidth && p.y >= 0 && p.y < cHeight)) {        int k;        if (path == null) {          path=new MenuElement[i + 2];          for (k=0; k <= i; k++)           path[k]=(MenuElement)tmp.elementAt(k);        }        path[i + 1]=subElements[j];        MenuElement currentSelection[]=getSelectedPath();        if (currentSelection[currentSelection.length - 1] != path[i + 1] && (currentSelection.length < 2 || currentSelection[currentSelection.length - 2] != path[i + 1])) {          Component oldMC=currentSelection[currentSelection.length - 1].getComponent();          MouseEvent exitEvent=new MouseEvent(oldMC,MouseEvent.MOUSE_EXITED,event.getWhen(),event.getModifiers(),p.x,p.y,event.getXOnScreen(),event.getYOnScreen(),event.getClickCount(),event.isPopupTrigger(),MouseEvent.NOBUTTON);          currentSelection[currentSelection.length - 1].processMouseEvent(exitEvent,path,this);          MouseEvent enterEvent=new MouseEvent(mc,MouseEvent.MOUSE_ENTERED,event.getWhen(),event.getModifiers(),p.x,p.y,event.getXOnScreen(),event.getYOnScreen(),event.getClickCount(),event.isPopupTrigger(),MouseEvent.NOBUTTON);          subElements[j].processMouseEvent(enterEvent,path,this);        }        MouseEvent mouseEvent=new MouseEvent(mc,event.getID(),event.getWhen(),event.getModifiers(),p.x,p.y,event.getXOnScreen(),event.getYOnScreen(),event.getClickCount(),event.isPopupTrigger(),MouseEvent.NOBUTTON);        subElements[j].processMouseEvent(mouseEvent,path,this);        success=true;        event.consume();      }    }  }}  }
class C{  public void updateBounds(int x,int y,int width,int height){  if (!getIgnoreStateChangeEvent())   m_CurrentBounds=new Rectangle(x,y,width,height);}  }
class C{  public final E[] toArray(Class<E> type){  return Iterables.toArray(iterable,type);}  }
class C{  public void init() throws ServletException {}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  public void reset(){  super.reset();  H1=0x67452301;  H2=0xefcdab89;  H3=0x98badcfe;  H4=0x10325476;  H5=0xc3d2e1f0;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public String convert(String defaultValue,int originalTypeCode,int targetTypeCode){  String result=defaultValue;  if (defaultValue != null) {switch (originalTypeCode) {case Types.BIT:      result=convertBoolean(defaultValue,targetTypeCode).toString();    break;case Types.DATE:  if (targetTypeCode == Types.TIMESTAMP) {    try {      Date date=Date.valueOf(result);      return new Timestamp(date.getTime()).toString();    } catch (    IllegalArgumentException ex) {    }  }break;case Types.TIME:if (targetTypeCode == Types.TIMESTAMP) {try {  Time time=Time.valueOf(result);  return new Timestamp(time.getTime()).toString();} catch (IllegalArgumentException ex) {}}break;default :if (PlatformUtils.supportsJava14JdbcTypes() && (originalTypeCode == PlatformUtils.determineBooleanTypeCode())) {result=convertBoolean(defaultValue,targetTypeCode).toString();}break;}}return result;}  }
class C{  private static boolean compare(byte[] what,String with){  if (what.length != with.length()) {    return false;  }  for (int i=0; i < what.length; i++) {    if (with.charAt(i) != what[i]) {      return false;    }  }  return true;}  }
class C{  Field(String name,Type type,int offset){  this.name=name;  this.type=type;  this.offset=offset;}  }
class C{  public void testGetters2(){  LayoutBuilder b=builder().setIncludePad(true);  FontMetricsInt fmi=b.paint.getFontMetricsInt();  Layout l=b.build();  assertVertMetrics(l,fmi.top - fmi.ascent,fmi.bottom - fmi.descent,fmi.top,fmi.bottom);}  }
class C{  @Override public void onChangedAdded(final RPObject object,final RPObject changes){  if (false) {    if (!this.stopped()) {      boolean shouldStop=true;      String debugString="Stopped on:";      if (StendhalClient.get().directionKeyIsPressed()) {        shouldStop=false;      } else {        debugString+=" !directionKeyIsPressed()";      }      if (object.has(AUTOWALK)) {        shouldStop=false;      } else {        debugString+=" !has(AUTOWALK)";      }      if (object.has(PATHSET)) {        shouldStop=false;      } else {        debugString+=" !has(PATHSET)";      }      if (shouldStop) {        this.stopMovement();        if (logger.isDebugEnabled() || Testing.DEBUG) {          logger.info(debugString);        }      }    }  }  super.onChangedAdded(object,changes);  if (object != null) {    if (changes.has("offline")) {      final String[] players=changes.get("offline").split(",");      for (      final String playername : players) {        ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine(playername + " has left Stendhal.",NotificationType.INFORMATION));      }    }    if (changes.has("online")) {      final String[] players=changes.get("online").split(",");      for (      final String playerName : players) {        ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine(playerName + " has joined Stendhal.",NotificationType.INFORMATION));      }    }    if (changes.hasSlot("!ignore")) {      RPObject ign=changes.getSlot("!ignore").getFirst();      if (ign != null) {        addIgnore(ign);      }    }  }}  }
class C{  public int prepareAddWindowLw(WindowState win,WindowManager.LayoutParams attrs){switch (attrs.type) {case TYPE_STATUS_BAR:    mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,"PhoneWindowManager");  if (mStatusBar != null) {    if (mStatusBar.isAlive()) {      return WindowManagerGlobal.ADD_MULTIPLE_SINGLETON;    }  }mStatusBar=win;break;case TYPE_NAVIGATION_BAR:mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,"PhoneWindowManager");if (mNavigationBar != null) {if (mNavigationBar.isAlive()) {return WindowManagerGlobal.ADD_MULTIPLE_SINGLETON;}}mNavigationBar=win;if (DEBUG_LAYOUT) Log.i(TAG,"NAVIGATION BAR: " + mNavigationBar);break;case TYPE_NAVIGATION_BAR_PANEL:mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,"PhoneWindowManager");break;case TYPE_STATUS_BAR_PANEL:mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,"PhoneWindowManager");break;case TYPE_STATUS_BAR_SUB_PANEL:mContext.enforceCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR_SERVICE,"PhoneWindowManager");break;case TYPE_KEYGUARD:if (mKeyguard != null) {return WindowManagerGlobal.ADD_MULTIPLE_SINGLETON;}mKeyguard=win;break;}return WindowManagerGlobal.ADD_OKAY;}  }
class C{  public static DateTime toDate(char c,TimeZone tz){  return DateCaster.toDateSimple(c,tz);}  }
class C{  public UsedClass methodInC2(UsedClass p){  return p;}  }
class C{  public void dropScreenSurface(SurfaceData sd){}  }
class C{  public PearsonDistance(boolean bothNonZero,boolean absoluteDistance){  this.bothNonZero=bothNonZero;  this.absoluteDistance=absoluteDistance;}  }
class C{  public static boolean isViable(World worldObj,int x,int y,int z,int yoffset){  Block id=worldObj.getBlockState(new BlockPos(x,y,z)).getBlock();  if (id == Blocks.ladder && isPassableBlock(worldObj,x,y + 1,z)) {    return true;  }  if (!isPassableBlock(worldObj,x,y,z) || !isPassableBlock(worldObj,x,y + 1,z)) {    return false;  }  if (isPassableBlock(worldObj,x,y - 1,z)) {    if (id == Blocks.air || id.isPassable(worldObj,new BlockPos(x,y - 1,z))) {      return false;    }  }  if (yoffset < 0) {    yoffset*=-1;    int ycheckhigher=1;    while (ycheckhigher <= yoffset) {      if (!isPassableBlock(worldObj,x,y + yoffset,z)) {        return false;      }      ycheckhigher++;    }  }  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(EPG.getInstance().getAutodial());}  }
class C{  public Result compile(String[] args){  Context context=new Context();  JavacFileManager.preRegister(context);  Result result=compile(args,context);  if (fileManager instanceof JavacFileManager) {    ((JavacFileManager)fileManager).close();  }  return result;}  }
class C{  @JsonCreator public static CassandraDaemonStatus create(final Protos.TaskStatus status){  return new CassandraDaemonStatus(status);}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public void createDropShipGroups(LocalDispatcher dispatcher) throws CartItemModifyException {  String facilityId=null;  if (UtilValidate.isNotEmpty(this.getProductStoreId())) {    try {      GenericValue productStore=this.getDelegator().findOne("ProductStore",UtilMisc.toMap("productStoreId",this.getProductStoreId()),true);      facilityId=productStore.getString("inventoryFacilityId");    } catch (    Exception e) {      Debug.logError(UtilProperties.getMessage(resource_error,"OrderProblemGettingProductStoreRecords",locale) + e.getMessage(),module);      return;    }  }  List<CartShipInfo> shipGroups=getShipGroups();  if (shipGroups == null)   return;  Map<String,Map<ShoppingCartItem,Map<Integer,BigDecimal>>> dropShipItems=new HashMap<String,Map<ShoppingCartItem,Map<Integer,BigDecimal>>>();  for (int shipGroupIndex=0; shipGroupIndex < shipGroups.size(); shipGroupIndex++) {    CartShipInfo shipInfo=shipGroups.get(shipGroupIndex);    String shipGroupSupplierPartyId=shipInfo.getSupplierPartyId();    if (UtilValidate.isNotEmpty(shipGroupSupplierPartyId)) {      continue;    }    Set<ShoppingCartItem> shipItems=shipInfo.getShipItems();    if (UtilValidate.isEmpty(shipItems))     continue;    for (    ShoppingCartItem cartItem : shipItems) {      BigDecimal itemQuantity=cartItem.getQuantity();      BigDecimal dropShipQuantity=BigDecimal.ZERO;      GenericValue product=cartItem.getProduct();      if (product == null) {        continue;      }      String productId=product.getString("productId");      String requirementMethodEnumId=product.getString("requirementMethodEnumId");      if ("PRODRQM_DS".equals(requirementMethodEnumId)) {        dropShipQuantity=itemQuantity;      } else       if ("PRODRQM_DSATP".equals(requirementMethodEnumId)) {        try {          Map<String,Object> getProductInventoryAvailableResult=dispatcher.runSync("getInventoryAvailableByFacility",UtilMisc.toMap("productId",productId,"facilityId",facilityId));          BigDecimal availableToPromise=(BigDecimal)getProductInventoryAvailableResult.get("availableToPromiseTotal");          if (itemQuantity.compareTo(availableToPromise) <= 0) {            dropShipQuantity=BigDecimal.ZERO;          } else {            dropShipQuantity=itemQuantity.subtract(availableToPromise);          }        } catch (        Exception e) {          Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderRunServiceGetInventoryAvailableByFacilityError",locale) + e.getMessage(),module);        }      } else {        dropShipQuantity=BigDecimal.ZERO;      }      if (dropShipQuantity.compareTo(BigDecimal.ZERO) <= 0)       continue;      String supplierPartyId=null;      try {        Map<String,Object> getSuppliersForProductResult=dispatcher.runSync("getSuppliersForProduct",UtilMisc.<String,Object>toMap("productId",productId,"quantity",dropShipQuantity,"canDropShip","Y","currencyUomId",getCurrency()));        List<GenericValue> supplierProducts=UtilGenerics.checkList(getSuppliersForProductResult.get("supplierProducts"));        supplierProducts=EntityUtil.orderBy(supplierProducts,UtilMisc.toList("supplierPrefOrderId"));        GenericValue supplierProduct=EntityUtil.getFirst(supplierProducts);        if (!UtilValidate.isEmpty(supplierProduct)) {          supplierPartyId=supplierProduct.getString("partyId");        }      } catch (      Exception e) {        Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderRunServiceGetSuppliersForProductError",locale) + e.getMessage(),module);      }      if (UtilValidate.isEmpty(supplierPartyId))       continue;      if (!dropShipItems.containsKey(supplierPartyId))       dropShipItems.put(supplierPartyId,new HashMap<ShoppingCartItem,Map<Integer,BigDecimal>>());      Map<ShoppingCartItem,Map<Integer,BigDecimal>> supplierCartItems=UtilGenerics.checkMap(dropShipItems.get(supplierPartyId));      if (!supplierCartItems.containsKey(cartItem))       supplierCartItems.put(cartItem,new HashMap<Integer,BigDecimal>());      Map<Integer,BigDecimal> cartItemGroupQuantities=UtilGenerics.checkMap(supplierCartItems.get(cartItem));      cartItemGroupQuantities.put(Integer.valueOf(shipGroupIndex),dropShipQuantity);    }  }  for (  String supplierPartyId : dropShipItems.keySet()) {    CartShipInfo shipInfo=null;    int newShipGroupIndex=-1;    TreeMap<Integer,CartShipInfo> supplierShipGroups=this.getShipGroupsBySupplier(supplierPartyId);    if (!UtilValidate.isEmpty(supplierShipGroups)) {      newShipGroupIndex=(supplierShipGroups.firstKey()).intValue();      shipInfo=supplierShipGroups.get(supplierShipGroups.firstKey());    }    if (newShipGroupIndex == -1) {      newShipGroupIndex=addShipInfo();      shipInfo=this.shipInfo.get(newShipGroupIndex);    }    shipInfo.supplierPartyId=supplierPartyId;    Map<ShoppingCartItem,Map<Integer,BigDecimal>> supplierCartItems=UtilGenerics.checkMap(dropShipItems.get(supplierPartyId));    for (    ShoppingCartItem cartItem : supplierCartItems.keySet()) {      Map<Integer,BigDecimal> cartItemGroupQuantities=UtilGenerics.checkMap(supplierCartItems.get(cartItem));      for (      Integer previousShipGroupIndex : cartItemGroupQuantities.keySet()) {        BigDecimal dropShipQuantity=cartItemGroupQuantities.get(previousShipGroupIndex);        positionItemToGroup(cartItem,dropShipQuantity,previousShipGroupIndex.intValue(),newShipGroupIndex,true);      }    }  }}  }
class C{  private boolean equals(FieldKey other){  if (other.type != type) {    return false;  }  return other.name.equals(name);}  }
class C{  public void sessionDestroyed(HttpSessionEvent event){  activeSessions.remove(event.getSession());  if (Util.isCdiAvailable(servletContext)) {    FlowCDIContext.sessionDestroyed(event);  }  ViewScopeManager manager=(ViewScopeManager)servletContext.getAttribute(ViewScopeManager.VIEW_SCOPE_MANAGER);  if (manager != null) {    manager.sessionDestroyed(event);  }}  }
class C{  public void readData(DataInput din) throws IOException {  reference=din.readUnsignedShort();  bitCount=din.readUnsignedShort();}  }
class C{  public KafkaStringRecordWriter(Producer<String,String> producer,String topic){  this.producer=producer;  this.topic=topic;}  }
class C{  private void failPreferencesPermissions(){  fail(I18n.tr("FrostWire could not create a temporary preferences folder.\n\nThis is generally caused by a lack of permissions.  Please make sure that FrostWire (and you) have access to create files/folders on your computer.  If the problem persists, please visit www.frostwire.com and click the 'Support' link.\n\nFrostWire will now exit.  Thank You."));}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (derivedFeatureID) {case StextPackage.INTERFACE_SCOPE__NAME:      return BasePackage.NAMED_ELEMENT__NAME;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  private void updateView(){  double simTime=SimClock.getTime();  this.lastUpdate=simTime;  guiControls.setSimTime(simTime);  this.field.updateField();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  if (m_nodeTests != null) {    for (int i=0; i < m_nodeTests.length; i++) {      m_nodeTests[i].fixupVariables(vars,globalsSize);    }  }}  }
class C{  public XPathException(String message,ExpressionNode ex){  super(message);  this.setLocator(ex);  setStylesheetNode(getStylesheetNode(ex));}  }
class C{  private void population(){  Network carNetwork=NetworkTools.filterNetworkByLinkMode(network,Collections.singleton("car"));  log.info("adapting plans...");  Counter personCounter=new Counter(" person # ");  for (  Person person : population.getPersons().values()) {    personCounter.incCounter();    List<? extends Plan> plans=person.getPlans();    for (    Plan plan : plans) {      List<PlanElement> elements=plan.getPlanElements();      for (      PlanElement e : elements) {        if (e instanceof Activity) {          Activity activity=(Activity)e;switch (activity.getType()) {case "home":            break;case "work":          break;default :        activity.setType(OTHER);    }    activity.setFacilityId(null);    activity.setLinkId(NetworkTools.getNearestLink(carNetwork,activity.getCoord()).getId());  }}}}}  }
class C{  public void pOln(Object o) throws IOException {  pO(o.toString());  pln();}  }
class C{  private static void writePostContent(HttpURLConnection connection,String postContent) throws Exception {  connection.setRequestMethod("POST");  connection.setDoOutput(true);  connection.setDoInput(true);  connection.setAllowUserInteraction(false);  DataOutputStream dstream=null;  try {    connection.connect();    dstream=new DataOutputStream(connection.getOutputStream());    dstream.writeBytes(postContent);    dstream.flush();  }  finally {    if (dstream != null) {      try {        dstream.close();      } catch (      Exception ex) {        System.out.println("Exception while closing the stream.");      }    }  }}  }
class C{  public PaddedBufferedBlockCipher(BlockCipher cipher,BlockCipherPadding padding){  this.cipher=cipher;  this.padding=padding;  buf=new byte[cipher.getBlockSize()];  bufOff=0;}  }
class C{  public String toXml(){  StringBuilder sb=new StringBuilder();  sb.append("<sdks defaultSdk=\"");  if (getDefault() != null) {    sb.append(getDefault().getName());  }  sb.append("\">\n");  for (  E sdk : sdks.values()) {    sb.append("\t");    sb.append(sdk.toXml());    sb.append("\n");  }  sb.append("</sdks>\n");  return sb.toString();}  }
class C{  @Override public String toString(){  return "L" + System.identityHashCode(this);}  }
class C{  public final boolean postDelayed(Runnable r,long delayMillis){  return mExec.postDelayed(wrapRunnable(r),delayMillis);}  }
class C{  public FilterGraphEffect(EffectContext context,String name,String graphString,String inputName,String outputName,Class scheduler){  super(context,name);  mInputName=inputName;  mOutputName=outputName;  mSchedulerClass=scheduler;  createGraph(graphString);}  }
class C{  public void displayComment(String comment){  if (getModule(GUIFrame.class) != null && getModule(GUIFrame.class).isRunning()) {    getModule(GUIFrame.class).addComment(comment);  } else {    log.info(comment);  }  if (getModule(DialogueRecorder.class) != null && getModule(DialogueRecorder.class).isRunning()) {    getModule(DialogueRecorder.class).addComment(comment);  }}  }
class C{  protected Size2D arrangeNN(BlockContainer container,Graphics2D g2){  List blocks=container.getBlocks();  Block b=(Block)blocks.get(0);  Size2D s=b.arrange(g2,RectangleConstraint.NONE);  b.setBounds(new Rectangle2D.Double(0.0,0.0,s.width,s.height));  return new Size2D(s.width,s.height);}  }
class C{  public Object put(Object key,Object value){synchronized (table) {    MostRecentKeyValue recent=mostRecentKeyValue;    if ((recent != null) && (recent.key == key))     recent.value=value;    return table.put(key,value);  }}  }
class C{  public String toString(){  String name=toString(rank,suit);  return name;}  }
class C{  public DomainObjectException(String message,DomainObjectExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  public ObjectFactory(){}  }
class C{  protected void executeLocalContainerAction(){  this.localContainer.start();}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == TypeProvidingElement.class) {switch (derivedFeatureID) {default :    return -1;}}if (baseClass == TypedElement.class) {switch (derivedFeatureID) {case N4JSPackage.VARIABLE_DECLARATION__DECLARED_TYPE_REF:  return N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF;case N4JSPackage.VARIABLE_DECLARATION__BOGUS_TYPE_REF:return N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF;default :return -1;}}if (baseClass == TypableElement.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == IdentifiableElement.class) {switch (derivedFeatureID) {case N4JSPackage.VARIABLE_DECLARATION__NAME:return TypesPackage.IDENTIFIABLE_ELEMENT__NAME;default :return -1;}}if (baseClass == NamedElement.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == Variable.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  private void readFileHeader() throws IOException, FormatErrorException {  fillBuffer(FILE_MAGIC_HEADER_LENGTH);  boolean error=false;  if ((buffer.get() & 0xFF) != 'U')   error=true;  if ((buffer.get() & 0xFF) != 'L')   error=true;  if ((buffer.get() & 0xFF) != 'o')   error=true;  if ((buffer.get() & 0xFF) != 'g')   error=true;  if ((buffer.get() & 0xFF) != 0x01)   error=true;  if ((buffer.get() & 0xFF) != 0x12)   error=true;  if ((buffer.get() & 0xFF) != 0x35)   error=true;  if ((buffer.get() & 0xFF) != 0x00 && !error) {    System.out.println("ULog: Different version than expected. Will try anyway");  }  if (error)   throw new FormatErrorException("ULog: Wrong file format");  logStartTimestamp=buffer.getLong();}  }
class C{  public Response createResponse(String responseString) throws java.text.ParseException {  if (responseString == null)   return new SIPResponse();  StringMsgParser smp=new StringMsgParser();  SIPMessage sipMessage=smp.parseSIPMessage(responseString);  if (!(sipMessage instanceof SIPResponse))   throw new ParseException(responseString,0);  return (SIPResponse)sipMessage;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:24.655 -0500",hash_original_method="E25F9CE570E0BFA743AE6FCAFFB6168D",hash_generated_method="B45569DC11A75BEC758B271655EA9D3C") public void startPreferencePanel(String fragmentClass,Bundle args,int titleRes,CharSequence titleText,Fragment resultTo,int resultRequestCode){  if (mSinglePane) {    startWithFragment(fragmentClass,args,resultTo,resultRequestCode,titleRes,0);  } else {    Fragment f=Fragment.instantiate(this,fragmentClass,args);    if (resultTo != null) {      f.setTargetFragment(resultTo,resultRequestCode);    }    FragmentTransaction transaction=getFragmentManager().beginTransaction();    transaction.replace(com.android.internal.R.id.prefs,f);    if (titleRes != 0) {      transaction.setBreadCrumbTitle(titleRes);    } else     if (titleText != null) {      transaction.setBreadCrumbTitle(titleText);    }    transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);    transaction.addToBackStack(BACK_STACK_PREFS);    transaction.commitAllowingStateLoss();  }}  }
class C{  private boolean invalidated(int index,int prevTakeIndex,long dequeues,int length){  if (index < 0)   return false;  int distance=index - prevTakeIndex;  if (distance < 0)   distance+=length;  return dequeues > distance;}  }
class C{  public Clustering<SubspaceModel> run(Database database,Relation<V> relation){  final int dim=RelationUtil.dimensionality(relation);  StepProgress stepProgress=LOG.isVerbose() ? new StepProgress(8) : null;  if (stepProgress != null) {    stepProgress.beginStep(1,"Grid-partitioning data.",LOG);  }  final int binCount=(int)Math.ceil(1 + MathUtil.log2(relation.size()));  SetDBIDs[][] partitions=partitionData(relation,binCount);  if (stepProgress != null) {    stepProgress.beginStep(2,"Searching for non-uniform bins in support histograms.",LOG);  }  final long[][] markers=new long[dim][];  for (int d=0; d < dim; d++) {    final SetDBIDs[] parts=partitions[d];    if (parts == null) {      continue;    }    final long[] marked=markers[d]=BitsUtil.zero(binCount);    int card=0;    while (card < dim - 1) {      int bestBin=chiSquaredUniformTest(parts,marked,card);      if (bestBin < 0) {        break;      }      BitsUtil.setI(marked,bestBin);      card++;    }    if (LOG.isDebugging()) {      LOG.debug("Marked bins in dim " + d + ": "+ BitsUtil.toString(marked,binCount));    }  }  if (stepProgress != null) {    stepProgress.beginStep(3,"Merging marked bins to 1-signatures.",LOG);  }  ArrayList<Signature> signatures=constructOneSignatures(partitions,markers);  if (stepProgress != null) {    stepProgress.beginStep(4,"Computing cluster cores from merged p-signatures.",LOG);  }  ArrayList<Signature> clusterCores=mergeClusterCores(binCount,signatures);  if (stepProgress != null) {    stepProgress.beginStep(5,"Pruning redundant cluster cores.",LOG);  }  clusterCores=pruneRedundantClusterCores(clusterCores);  if (LOG.isVerbose()) {    LOG.verbose("Number of cluster cores found: " + clusterCores.size());  }  if (clusterCores.isEmpty()) {    LOG.setCompleted(stepProgress);    Clustering<SubspaceModel> c=new Clustering<>("P3C","P3C");    c.addToplevelCluster(new Cluster<SubspaceModel>(relation.getDBIDs(),true));    return c;  }  if (stepProgress != null) {    stepProgress.beginStep(5,"Refining cluster cores to clusters via EM.",LOG);  }  ModifiableDBIDs noise=DBIDUtil.newHashSet();  WritableDataStore<double[]> probClusterIGivenX=DataStoreUtil.makeStorage(relation.getDBIDs(),DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_SORTED,double[].class);  int k=clusterCores.size();  List<MultivariateGaussianModel> models=new ArrayList<>(k);  computeFuzzyMembership(relation,clusterCores,noise,probClusterIGivenX,models,dim);  EM.recomputeCovarianceMatrices(relation,probClusterIGivenX,models);  assignUnassigned(relation,probClusterIGivenX,models,noise);  double emNew=EM.assignProbabilitiesToInstances(relation,models,probClusterIGivenX);  for (int it=1; it <= maxEmIterations || maxEmIterations < 0; it++) {    final double emOld=emNew;    EM.recomputeCovarianceMatrices(relation,probClusterIGivenX,models);    emNew=EM.assignProbabilitiesToInstances(relation,models,probClusterIGivenX);    if (LOG.isVerbose()) {      LOG.verbose("iteration " + it + " - expectation value: "+ emNew);    }    if ((emNew - emOld) <= emDelta) {      break;    }  }  if (stepProgress != null) {    stepProgress.beginStep(6,"Generating hard clustering.",LOG);  }  ArrayList<ClusterCandidate> clusterCandidates=hardClustering(probClusterIGivenX,clusterCores,relation.getDBIDs());  if (stepProgress != null) {    stepProgress.beginStep(7,"Looking for outliers and moving them to the noise set.",LOG);  }  findOutliers(relation,models,clusterCandidates,noise);  if (stepProgress != null) {    stepProgress.beginStep(8,"Removing empty clusters.",LOG);  }  for (Iterator<ClusterCandidate> it=clusterCandidates.iterator(); it.hasNext(); ) {    ClusterCandidate cand=it.next();    final int size=cand.ids.size();    if (size < minClusterSize) {      if (size > 0) {        noise.addDBIDs(cand.ids);      }      it.remove();    }  }  if (LOG.isVerbose()) {    LOG.verbose("Number of clusters remaining: " + clusterCandidates.size());  }  if (stepProgress != null) {    stepProgress.beginStep(9,"Generating final result.",LOG);  }  Clustering<SubspaceModel> result=new Clustering<>("P3C","P3C");  for (int cluster=0; cluster < clusterCandidates.size(); ++cluster) {    ClusterCandidate candidate=clusterCandidates.get(cluster);    CovarianceMatrix cvm=CovarianceMatrix.make(relation,candidate.ids);    result.addToplevelCluster(new Cluster<>(candidate.ids,new SubspaceModel(new Subspace(candidate.dimensions),cvm.getMeanVector())));  }  LOG.verbose("Noise size: " + noise.size());  if (noise.size() > 0) {    result.addToplevelCluster(new Cluster<SubspaceModel>(noise,true));  }  LOG.ensureCompleted(stepProgress);  return result;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col;  double x, y;  int progress=0;  int a=0;  int i;  double slopeGradient=0;  double aspect=0;  double z=0;  double k=0;  double north=0;  double south=0;  double east=0;  double west=0;  double xRange=0;  double yRange=0;  final double degreesToRadians=Math.PI / 180;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      slopeGradient=Double.parseDouble(args[i]);    } else     if (i == 3) {      aspect=Double.parseDouble(args[i]);    } else     if (i == 4) {      k=Double.parseDouble(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    north=image.getNorth();    south=image.getSouth();    east=image.getEast();    west=image.getWest();    xRange=east - west;    yRange=north - south;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    if (aspect > 360) {      boolean flag=false;      do {        aspect-=360;        if (aspect <= 360) {          flag=true;        }      } while (!flag);    }    if (aspect > 180) {      aspect-=180;    } else {      aspect+=180;    }    slopeGradient=slopeGradient * degreesToRadians;    aspect=aspect * degreesToRadians;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        x=west + xRange * ((double)col / (cols - 1));        y=north - yRange * ((double)row / (rows - 1));        z=Math.tan(slopeGradient) * Math.sin(aspect) * x + Math.tan(slopeGradient) * Math.cos(aspect) * y + k;        output.setValue(row,col,z);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ClearSelectionAction(){  this(null);}  }
class C{  public Task<ExportGroupRestRep> deactivate(URI id){  return doDeactivateWithTask(id);}  }
class C{  public Optional<Id> generateId(){  Optional<List<Id>> result=generateIdBatch(1);  if (result.isPresent()) {    return Optional.of(result.get().get(0));  }  return Optional.absent();}  }
class C{  private static void raiseOverflowException(Number number,Class targetClass){  throw new IllegalArgumentException("Could not convert number [" + number + "] of type ["+ number.getClass().getName()+ "] to target class ["+ targetClass.getName()+ "]: overflow");}  }
class C{  public StandardCategoryToolTipGenerator(String labelFormat,NumberFormat formatter){  super(labelFormat,formatter);}  }
class C{  static public void main(String args[]){  ArgParser ap=new ArgParser("OpenMap");  String propArgs=null;  ap.add("properties","A resource, file path or URL to properties file\n Ex: http://myhost.com/xyz.props or file:/myhome/abc.pro\n See Java Documentation for java.net.URL class for more details",1);  ap.parse(args);  String[] arg=ap.getArgValues("properties");  if (arg != null) {    propArgs=arg[0];  }  OpenMap.create(propArgs);}  }
class C{  public static void clear(DefaultMutableTreeNode self){  self.removeAllChildren();}  }
class C{  public Set<Object> keySet(){  return keys;}  }
class C{  public static synchronized boolean isDesignTime(){  return designTime;}  }
class C{  public Variable(String name){  this.name=name;  this.definingScope=null;}  }
class C{  public int day(){  return day;}  }
class C{  public final void removeAllConstraints(){  constraints.clear();}  }
class C{  public boolean inverse(){  Matrix4f result=new Matrix4f();  for (int i=0; i < 4; ++i) {    for (int j=0; j < 4; ++j) {      result.mMat[4 * i + j]=computeCofactor(i,j);    }  }  float det=mMat[0] * result.mMat[0] + mMat[4] * result.mMat[1] + mMat[8] * result.mMat[2] + mMat[12] * result.mMat[3];  if (Math.abs(det) < 1e-6) {    return false;  }  det=1.0f / det;  for (int i=0; i < 16; ++i) {    mMat[i]=result.mMat[i] * det;  }  return true;}  }
class C{  public String createSerNo(){  StringBuffer name=new StringBuffer();  if (getPrefix() != null)   name.append(getPrefix());  int no=getCurrentNext();  name.append(no);  if (getSuffix() != null)   name.append(getSuffix());  no+=getIncrementNo();  setCurrentNext(no);  save();  return name.toString();}  }
class C{  public void dataStatusChanged(DataStatusEvent e){  log.config(e.toString());  String info=(String)m_mTab.getValue("Description");  if (Executions.getCurrent() != null)   f_Description.setValue(info);}  }
class C{  private static byte[] gzip(final InputStream input) throws IOException {  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  final byte[] buf=new byte[4096];  final OutputStream gzip=new GZIPOutputStream(baos);  try {    while (true) {      final int len=input.read(buf);      if (len < 0) {        break;      }      gzip.write(buf,0,len);    }  }  finally {    gzip.close();    input.close();  }  return baos.toByteArray();}  }
class C{  public void whois(String target){  bot.sendRaw().rawLine("WHOIS " + target);}  }
class C{  public char previous(){  if (offset == start) {    return DONE;  }  return string.charAt(--offset);}  }
class C{  @Override public void onDestroyView(){  mIsWebViewAvailable=false;  super.onDestroyView();}  }
class C{  public boolean isAbsoluteCenter(){  return centerBehavior == CENTER_BEHAVIOR_CENTER;}  }
class C{  public void restartServiceByNodeId(String nodeId,String name){  UriBuilder builder=client.uriBuilder(CONTROL_RESTART_URL);  addQueryParam(builder,NODE_ID_PARAM,nodeId);  addQueryParam(builder,NAME_PARAM,name);  client.postURI(String.class,builder.build());}  }
class C{  public static boolean contains(final boolean[] array,final boolean valueToFind){  return ArrayUtils.indexOf(array,valueToFind) != ArrayUtils.INDEX_NOT_FOUND;}  }
class C{  private boolean isThisPrefix(char[] string){  if (string == null || string.length < 5)   return false;  return string[0] == 't' && string[1] == 'h' && string[2] == 'i' && string[3] == 's' && string[4] == '.';}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode14.class,args);}  }
class C{  public Builder password(String password){  this.password=password;  return this;}  }
class C{  public static URI buildBroadcastRequestUri(URI targetService,String selectorPath){  URI u=UriUtils.buildUri(targetService,UriUtils.buildUriPath(selectorPath,ServiceUriPaths.SERVICE_URI_SUFFIX_FORWARDING));  u=UriUtils.extendUriWithQuery(u,FORWARDING_URI_PARAM_NAME_PATH,targetService.getPath(),FORWARDING_URI_PARAM_NAME_TARGET,ForwardingTarget.ALL.toString());  return u;}  }
class C{  public com.emc.storageos.vasa.VasaServiceStub.QueryStorageProcessorsResponse queryStorageProcessors(com.emc.storageos.vasa.VasaServiceStub.QueryStorageProcessors queryStorageProcessors41) throws java.rmi.RemoteException, com.emc.storageos.vasa.NotImplemented, com.emc.storageos.vasa.InvalidArgument, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[20].getName());    _operationClient.getOptions().setAction("urn:queryStorageProcessors");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),queryStorageProcessors41,optimizeContent(new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/","queryStorageProcessors")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),com.emc.storageos.vasa.VasaServiceStub.QueryStorageProcessorsResponse.class,getEnvelopeNamespaces(_returnEnv));    return (com.emc.storageos.vasa.VasaServiceStub.QueryStorageProcessorsResponse)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.NotImplemented) {            throw (com.emc.storageos.vasa.NotImplemented)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidArgument) {            throw (com.emc.storageos.vasa.InvalidArgument)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  public void closeSession(){  getSession().close();}  }
class C{  public UserModificationConstraintExceptionBean(ApplicationExceptionBean bean,Reason reason){  super(bean);  setReason(reason);}  }
class C{  public void handleVariableChangedEvent(Variable variable,int index,Parameter.ChangeType type){  final Node node=getNodeOfParameter((Parameter)variable);  if (type == Parameter.ChangeType.ALL_VALUES_CHANGED) {    pushTreeChangedEvent(new TreeChangedEvent(node,(Parameter)variable,TreeChangedEvent.CHANGE_IN_ALL_INTERNAL_NODES));  } else {    pushTreeChangedEvent(node,(Parameter)variable,index);  }}  }
class C{  public Boolean isDefault(){  return _default;}  }
class C{  private void assign(long[] val){  System.arraycopy(val,0,mPol,0,mLength);}  }
class C{  public boolean containsSymbol(String symbol){  int bucket=hash(symbol) % fTableSize;  int length=symbol.length();  OUTER:   for (Entry entry=fBuckets[bucket]; entry != null; entry=entry.next) {    if (length == entry.characters.length) {      for (int i=0; i < length; i++) {        if (symbol.charAt(i) != entry.characters[i]) {          continue OUTER;        }      }      return true;    }  }  return false;}  }
class C{  boolean checkClosed(){  return checkClosed(false);}  }
class C{  private static Intent createShareIntent(Context context,final String shareText){  final Intent shareIntent=new Intent(Intent.ACTION_SEND);  shareIntent.putExtra(android.content.Intent.EXTRA_SUBJECT,context.getString(R.string.share_subject));  shareIntent.putExtra(android.content.Intent.EXTRA_TEXT,shareText);  shareIntent.setType("text/plain");  return shareIntent;}  }
class C{  protected String saveNewSpecial(Object value,int index){  String colName=p_info.getColumnName(index);  String colValue=value == null ? "null" : value.getClass().toString();  log.fine(colName + "=" + colValue);  if (value == null)   return "NULL";  return value.toString();}  }
class C{  public void close(String noteId){  LOGGER.info("Close interpreter group " + getId() + " for note "+ noteId);  List<Interpreter> intpForNote=this.get(noteId);  close(intpForNote);}  }
class C{  public static <T>void reverseForEach(ArrayList<T> list,Procedure<? super T> procedure){  if (!list.isEmpty()) {    ArrayListIterate.forEach(list,list.size() - 1,0,procedure);  }}  }
class C{  public ServiceConnectionAborted(){  requestFileName="getstate.query";}  }
class C{  private final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public Iterator iterator(){  return new Iterator();}  }
class C{  private SQLiteDatabase openDatabase(String dbname,String assetFilePath,int openFlags,CallbackContext cbc) throws Exception {  InputStream in=null;  File dbfile=null;  try {    SQLiteDatabase database=this.getDatabase(dbname);    if (database != null && database.isOpen()) {      if (cbc != null)       cbc.error("database already open");      throw new Exception("database already open");    }    if (assetFilePath != null && assetFilePath.length() > 0) {      if (assetFilePath.compareTo("1") == 0) {        assetFilePath="www/" + dbname;        in=this.getContext().getAssets().open(assetFilePath);        Log.v("info","Located pre-populated DB asset in app bundle www subdirectory: " + assetFilePath);      } else       if (assetFilePath.charAt(0) == '~') {        assetFilePath=assetFilePath.startsWith("~/") ? assetFilePath.substring(2) : assetFilePath.substring(1);        in=this.getContext().getAssets().open(assetFilePath);        Log.v("info","Located pre-populated DB asset in app bundle subdirectory: " + assetFilePath);      } else {        File filesDir=this.getContext().getFilesDir();        assetFilePath=assetFilePath.startsWith("/") ? assetFilePath.substring(1) : assetFilePath;        File assetFile=new File(filesDir,assetFilePath);        in=new FileInputStream(assetFile);        Log.v("info","Located pre-populated DB asset in Files subdirectory: " + assetFile.getCanonicalPath());        if (openFlags == SQLiteDatabase.OPEN_READONLY) {          dbfile=assetFile;          Log.v("info","Detected read-only mode request for external asset.");        }      }    }    if (dbfile == null) {      openFlags=SQLiteDatabase.OPEN_READWRITE | SQLiteDatabase.CREATE_IF_NECESSARY;      dbfile=this.getContext().getDatabasePath(dbname);      if (!dbfile.exists() && in != null) {        Log.v("info","Copying pre-populated db asset to destination");        this.createFromAssets(dbname,dbfile,in);      }      if (!dbfile.exists()) {        dbfile.getParentFile().mkdirs();      }    }    Log.v("info","Opening sqlite db: " + dbfile.getAbsolutePath());    SQLiteDatabase mydb=SQLiteDatabase.openDatabase(dbfile.getAbsolutePath(),null,openFlags);    if (cbc != null)     cbc.success("database open");    return mydb;  } catch (  SQLiteException ex) {    if (cbc != null)     cbc.error("can't open database " + ex);    throw ex;  } finally {    if (in != null) {      try {        in.close();      } catch (      IOException ignored) {      }    }  }}  }
class C{  public SQLNonTransientConnectionException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testIteratorRemove(){  final LinkedBlockingQueue q=new LinkedBlockingQueue(3);  q.add(two);  q.add(one);  q.add(three);  Iterator it=q.iterator();  it.next();  it.remove();  it=q.iterator();  assertSame(it.next(),one);  assertSame(it.next(),three);  assertFalse(it.hasNext());}  }
class C{  public LinearScan(AbstractDriver d){  driver=d;}  }
class C{  public static void addShoggothBlacklist(Block block){  shoggothBlockBlacklist.add(block);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.914 -0500",hash_original_method="9E6C3A8E77106C45FBFB86AD320286A9",hash_generated_method="090A502C5C4A40551CC36324ED090E43") public void putUnknownHost(String hostname,String detailMessage){  put(hostname,detailMessage);}  }
class C{  public Bundle putIfAbsent(String key,String value){  Bundle bundle=(value == null) ? NULL_SETTING : Bundle.forPair("value",value);  if (value == null || value.length() <= MAX_CACHE_ENTRY_SIZE) {synchronized (this) {      if (get(key) == null) {        put(key,bundle);      }    }  }  return bundle;}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  private Platform(){}  }
class C{  public static WindowStateListener remove(WindowStateListener l,WindowStateListener oldl){  return (WindowStateListener)removeInternal(l,oldl);}  }
class C{  @SuppressWarnings("deprecation") public ItemStack toItemStack(int amount){  ItemStack item=new ItemStack(Material.MONSTER_EGG,amount);  net.minecraft.server.v1_9_R2.ItemStack stack=CraftItemStack.asNMSCopy(item);  NBTTagCompound tagCompound=stack.getTag();  if (tagCompound == null) {    tagCompound=new NBTTagCompound();  }  NBTTagCompound id=new NBTTagCompound();  id.setString("id",type.getName());  tagCompound.set("EntityTag",id);  stack.setTag(tagCompound);  return CraftItemStack.asBukkitCopy(stack);}  }
class C{  protected Object loadSpecial(ResultSet rs,int index) throws SQLException {  log.config(p_info.getColumnName(index));  if (index == get_ColumnIndex("ColorType"))   return rs.getString(index + 1);  return null;}  }
class C{  public static void logTapsSinceOpenForDecided(int tapsSinceOpen){  RecordHistogram.recordCountHistogram("Search.ContextualSearchTapsSinceOpenDecided",tapsSinceOpen);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Show s=getShow(stack);  return (s == null) ? new Long(0) : new Long(s.getDuration());}  }
class C{  public static byte[] decode(String data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,bOut);  } catch (  Exception e) {    throw new DecoderException("exception decoding URL safe base64 string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  public void configureManagers(){}  }
class C{  public String toString(){  return "[" + min + ", "+ max+ "]";}  }
class C{  public PieLabelDistributor(int labelCount){  super();}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("ProductServlet.init");}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof ParametersWithSBox) {    ParametersWithSBox param=(ParametersWithSBox)params;    byte[] sBox=param.getSBox();    if (sBox.length != Sbox_Default.length) {      throw new IllegalArgumentException("invalid S-box passed to GOST28147 init");    }    this.S=Arrays.clone(sBox);    if (param.getParameters() != null) {      workingKey=generateWorkingKey(forEncryption,((KeyParameter)param.getParameters()).getKey());    }  } else   if (params instanceof KeyParameter) {    workingKey=generateWorkingKey(forEncryption,((KeyParameter)params).getKey());  } else   if (params != null) {    throw new IllegalArgumentException("invalid parameter passed to GOST28147 init - " + params.getClass().getName());  }}  }
class C{  public Field(String name,TokenStream tokenStream,IndexableFieldType type){  if (name == null) {    throw new IllegalArgumentException("name must not be null");  }  if (tokenStream == null) {    throw new NullPointerException("tokenStream must not be null");  }  if (type.indexOptions() == IndexOptions.NONE || !type.tokenized()) {    throw new IllegalArgumentException("TokenStream fields must be indexed and tokenized");  }  if (type.stored()) {    throw new IllegalArgumentException("TokenStream fields cannot be stored");  }  this.name=name;  this.fieldsData=null;  this.tokenStream=tokenStream;  this.type=type;}  }
class C{  public boolean letsFluidOut(byte aSide,int aCoverID,int aCoverVariable,Fluid aFluid,ICoverable aTileEntity){  return false;}  }
class C{  public static boolean referenceEquals(Object x,Object y){  return x == y;}  }
class C{  public void resetCropOverlayView(){  if (initializedCropWindow) {    initCropWindow(mBitmapRect);    invalidate();  }}  }
class C{  private boolean isVdcOpLockHold(StringBuffer msg){  try {    GlobalLockImpl glock=new GlobalLockImpl((DbClientImpl)dbClient,GeoServiceClient.VDCOP_LOCK_NAME,GlobalLock.GL_Mode.GL_NodeSvcShared_MODE,GeoServiceClient.VDCOP_LOCK_TIMEOUT,VdcUtil.getLocalShortVdcId());    String owner=glock.getOwner();    boolean locked=owner != null && !owner.isEmpty();    log.info("Vdc op lock is locked {}",locked);    if (locked && msg != null && !StringUtils.isEmpty(glock.getErrorMessage())) {      msg.append(glock.getErrorMessage());    }    return locked;  } catch (  Exception ex) {    log.error("Unexpected exception during check vdc lock",ex);    throw GeoException.fatals.accessGlobalLockFail();  }}  }
class C{  public StraightListLayout(int style){  this.horizontal=(style & SWT.HORIZONTAL) != 0;}  }
class C{  public void moveUp(final URI location){  if (null != location) {    final String path=new File(checkUri(location)).getAbsolutePath();    int indexOf=externalLibraryLocations.indexOf(path);    if (indexOf > 0) {      externalLibraryLocations.remove(indexOf);      externalLibraryLocations.add(indexOf - 1,path);    }  }}  }
class C{  public static String fixWindowsPath(String path){  if (isWindows && path.length() > 3 && path.charAt(0) == '/' && path.charAt(2) == ':') {    path=path.substring(1).replace('/','\\');  }  return path;}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  result.append(x);  result.append('x');  result.append(y);  result.append(" um");  return result.toString();}  }
class C{  public ActiveInfoStorageCalculatorKraskov(int algorithm) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(algorithm == 1 ? MI_CALCULATOR_KRASKOV1 : MI_CALCULATOR_KRASKOV2);  if ((algorithm != 1) && (algorithm != 2)) {    throw new ClassNotFoundException("Algorithm must be 1 or 2");  }}  }
class C{  private void throwException(){  if (stackTrace.containsTestClass()) {    takeCurrentTime();  } else {    throw new IllegalStateException("No transactime defined. Please call takeCurrentTime() before this method. Maybe the class InvocationDateContainer must be added as interceptor to the bean (the EJB business implementation)");  }}  }
class C{  public Enum read(String value) throws Exception {  return Enum.valueOf(type,value);}  }
class C{  public double eval(double params[]){  return (Math.cosh(params[0]));}  }
class C{  IoBuffer fetchAppBuffer(){  if (this.appBuffer == null) {    return IoBuffer.allocate(0);  } else {    IoBuffer appBuffer=this.appBuffer.flip();    this.appBuffer=null;    return appBuffer;  }}  }
class C{  protected boolean isServing(final Cache cache){  return !cache.getCacheServers().isEmpty();}  }
class C{  public SparseDoubleMatrix2D(int rows,int columns){  this(rows,columns,rows * (columns / 1000),0.2,0.5);}  }
class C{  public void postAttr(JCTree tree){  new PostAttrAnalyzer().scan(tree);}  }
class C{  private void stepInput(){  for (  final Port port : Port.VALUES) {    final Pipe receivingPipe=getCasing().getReceivingPipe(getFace(),port);    if (!receivingPipe.isReading()) {      receivingPipe.beginRead();    }    if (receivingPipe.canTransfer()) {      if (getCasing().getCasingWorld().getTotalWorldTime() > lastStep) {        playNote(receivingPipe.read());        receivingPipe.beginRead();      }    }  }}  }
class C{  public static int hashCode(CK_DATE date){  int hash=0;  if (date != null) {    if (date.year.length == 4) {      hash^=(0xFFFF & date.year[0]) << 16;      hash^=0xFFFF & date.year[1];      hash^=(0xFFFF & date.year[2]) << 16;      hash^=0xFFFF & date.year[3];    }    if (date.month.length == 2) {      hash^=(0xFFFF & date.month[0]) << 16;      hash^=0xFFFF & date.month[1];    }    if (date.day.length == 2) {      hash^=(0xFFFF & date.day[0]) << 16;      hash^=0xFFFF & date.day[1];    }  }  return hash;}  }
class C{  protected double derivative(int i,NumberVector v){  final int dim=v.getDimensionality();  if (dim == 1) {    return 0.;  }  i=(i == 0) ? 1 : (i == dim - 1) ? dim - 2 : i;  return (v.doubleValue(i) - v.doubleValue(i - 1) + (v.doubleValue(i + 1) - v.doubleValue(i - 1)) * .5) * .5;}  }
class C{  public static boolean deleteDirectory(File path){  if (path.exists()) {    File[] files=path.listFiles();    for (int i=0; i < files.length; i++) {      if (files[i].isDirectory()) {        deleteDirectory(files[i]);      } else {        files[i].delete();      }    }  }  return (path.delete());}  }
class C{  public static RawHeaders fromBytes(InputStream in) throws IOException {  RawHeaders headers;  do {    headers=new RawHeaders();    headers.setStatusLine(Util.readAsciiLine(in));    readHeaders(in,headers);  } while (headers.getResponseCode() == HttpEngine.HTTP_CONTINUE);  return headers;}  }
class C{  private void prepareFramebuffer(int width,int height){  GlUtil.checkGlError("start");  int[] values=new int[1];  GLES20.glGenTextures(1,values,0);  GlUtil.checkGlError("glGenTextures");  mOffscreenTexture=values[0];  Log.i(TAG,"prepareFramebuffer mOffscreenTexture:" + mOffscreenTexture);  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,mOffscreenTexture);  GlUtil.checkGlError("glBindTexture");  GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D,0,GLES20.GL_RGBA,width,height,0,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,null);  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_LINEAR);  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);  GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);  GlUtil.checkGlError("glTexParameter");  GLES20.glGenFramebuffers(1,values,0);  GlUtil.checkGlError("glGenFramebuffers");  mFramebuffer=values[0];  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,mFramebuffer);  GlUtil.checkGlError("glBindFramebuffer " + mFramebuffer);  GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER,GLES20.GL_COLOR_ATTACHMENT0,GLES20.GL_TEXTURE_2D,mOffscreenTexture,0);  int status=GLES20.glCheckFramebufferStatus(GLES20.GL_FRAMEBUFFER);  if (status != GLES20.GL_FRAMEBUFFER_COMPLETE) {    throw new RuntimeException("Framebuffer not complete, status=" + status);  }  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,0);  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,0);  GlUtil.checkGlError("glBindFramebuffer");}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9,E e10,E e11){  return construct(e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11);}  }
class C{  public boolean canTraverseOutsideSubtree(){  return super.canTraverseOutsideSubtree() ? true : m_arg1.canTraverseOutsideSubtree();}  }
class C{  public TPrimitiveHash(){  super();}  }
class C{  public Integer call(){  try {    EfficientTerminalSet sourceItemLookaheads=lookaheads.get(currentItem);    CPGoToLink gotoLink=goToLinks.get(currentItem);    if (gotoLink != null) {      LALR1CPState targetState=gotoLink.getTargetState();      LALR1CPItem targetItem=targetState.getItemWithLookaheadByLR0Item(gotoLink.getTargetItem());synchronized (lookaheads) {        EfficientTerminalSet before=lookaheads.get(targetItem);        EfficientTerminalSet after=before.plusAll(sourceItemLookaheads);        if (!before.equals(after)) {          lookaheads.put(targetItem,after);          threadPool.submit(new WorkerTaskCPLinks(targetItem,threadPool,taskCountLock));        }      }    }    for (    LR0Item closureLink : currentItem.getClosureLinks()) {      LALR1CPState targetState=itemStates.get(currentItem);      LALR1CPItem targetItem=targetState.getItemWithLookaheadByLR0Item(closureLink);synchronized (lookaheads) {        EfficientTerminalSet before=lookaheads.get(targetItem);        EfficientTerminalSet after=before.plusAll(sourceItemLookaheads);        after=after.plusAll(targetItem.getLookaheads());        if (!before.equals(after)) {          lookaheads.put(targetItem,after);          threadPool.submit(new WorkerTaskCPLinks(targetItem,threadPool,taskCountLock));        }      }    }  } catch (  Throwable e) {    e.printStackTrace();  }  decrementTaskCount();  return 0;}  }
class C{  @ManagedOperation(description="Ping test of the ERP system") public String ping(){  return "PONG";}  }
class C{  public boolean isHierachic(String string){  int index=string.indexOf(m_Seperator);  if ((index == (string.length() - 1)) || (index == -1)) {    return false;  }  return true;}  }
class C{  protected Node newNode(){  return new SVGOMFontElement();}  }
class C{  void startDotItems(int i,int j){  extendDotItemsWithProvedItems(i,i,j,true);}  }
class C{  protected Point isAreaClearBW(int xPoint,int yPoint,Point point){  Debug.message("declutterdetail","Decluttering: Checking both ways...");  if (!indexes.setFromPixels(xPoint,yPoint) || isClear(indexes,true)) {    point.x=xPoint;    point.y=yPoint;    return point;  }  int leftMostIndex=indexes.origXIndex - indexes.origIndexLength;  int count=0;  int currentXIndex=indexes.origXIndex + indexes.origIndexLength;  while (count < indexes.origIndexLength && currentXIndex > leftMostIndex) {    if (!indexes.set(currentXIndex,indexes.origYIndex)) {      count=0;      currentXIndex--;      continue;    }    if (currentXIndex >= 0 && currentXIndex <= maxx) {      if (!isMatrixLocationTaken(currentXIndex,indexes.yStart,indexes.yEnd - indexes.yStart + 1)) {        count++;      } else {        count=0;      }    } else {      if (allowPartials) {        count++;      } else {        count=0;      }    }    if (count < indexes.origIndexLength) {      currentXIndex--;    }  }  if (count >= indexes.origIndexLength) {    point.x=currentXIndex * x_pix_interval;    point.y=yPoint;    indexes.xStart=currentXIndex;    setTaken(indexes);    Debug.message("declutterdetail","Decluttering: found a spot");    return point;  }  return null;}  }
class C{  public void openAnimate(int position){  touchListener.openAnimate(position);}  }
class C{  public void runtimeInit(TransformerImpl transformer) throws TransformerException {}  }
class C{  @Bean public AnnotationBean annotationBean(@Value("${motan.annotation.package}") String scanPackage){  AnnotationBean annotationBean=new AnnotationBean();  if (!StringUtils.isEmpty(scanPackage)) {    annotationBean.setPackage(scanPackage);  }  return annotationBean;}  }
class C{  @PostConstruct public void init(){  super.init(smTypeFilterHeader,smTypeFilterButtons,smTypeFilterButtonClick);  eventbus.subscribe(this);}  }
class C{  protected AlgorithmParameters engineGetParameters(){  return core.getParameters();}  }
class C{  @Override public DMLProgram parse(String fileName,String dmlScript,Map<String,String> argVals) throws ParseException {  DMLProgram prog=doParse(fileName,dmlScript,null,argVals);  return prog;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-19 13:30:38.179 -0400",hash_original_method="E45D6D96430861522854D560F5CA6F0B",hash_generated_method="1DD86CA2457166B3F593DEB15897F714") public boolean isShowingPopup(){  return getListPopupWindow().isShowing();}  }
class C{  private Method reflectGetNumCurrentReplicas(FSDataOutputStream os){  Method m=null;  if (os != null) {    Class<? extends OutputStream> wrappedStreamClass=os.getWrappedStream().getClass();    try {      m=wrappedStreamClass.getDeclaredMethod("getNumCurrentReplicas",new Class<?>[]{});      m.setAccessible(true);    } catch (    NoSuchMethodException e) {      LOGGER.info("FileSystem's output stream doesn't support" + " getNumCurrentReplicas; --HDFS-826 not available; fsOut=" + wrappedStreamClass.getName() + "; err="+ e);    }catch (    SecurityException e) {      LOGGER.info("Doesn't have access to getNumCurrentReplicas on " + "FileSystems's output stream --HDFS-826 not available; fsOut=" + wrappedStreamClass.getName(),e);      m=null;    }  }  if (m != null) {    LOGGER.debug("Using getNumCurrentReplicas--HDFS-826");  }  return m;}  }
class C{  public void receiveOneToOneChatSessionInitiation(OneToOneChatSession session){  ContactId contact=session.getRemoteContact();  OneToOneChatImpl oneToOneChat=getOrCreateOneToOneChat(contact);  session.addListener(oneToOneChat);}  }
class C{  protected TypeBuilderListener(Map<String,TypeClass> typeClasses){  this.typeClasses=typeClasses;  this.enter();}  }
class C{  private void createGui(){  final JPanel topPanel=new JPanel(new BorderLayout());  final JPanel innerTopPanel=new JPanel(new BorderLayout());  final JPanel debuggerChooserPanel=new JPanel(new BorderLayout());  debuggerChooserPanel.setBorder(new TitledBorder("Address Space Debugger"));  m_debuggerCombo=new CDebuggerComboBox(new CDebuggerComboModel(m_debuggerContainer));  m_debuggerCombo.setSelectedDebugger(m_addressSpace.getConfiguration().getDebuggerTemplate());  final JPanel debuggerComboPanel=new JPanel(new BorderLayout());  debuggerComboPanel.add(m_debuggerCombo,BorderLayout.CENTER);  debuggerChooserPanel.add(debuggerComboPanel,BorderLayout.CENTER);  innerTopPanel.add(m_stdEditPanel);  innerTopPanel.add(debuggerChooserPanel,BorderLayout.SOUTH);  topPanel.add(innerTopPanel);  final JPanel buttonPanel=new JPanel(new GridLayout(1,2));  buttonPanel.setBorder(new EmptyBorder(0,0,5,2));  buttonPanel.add(new JPanel());  buttonPanel.add(m_saveButton);  topPanel.add(buttonPanel,BorderLayout.SOUTH);  final JPanel bottomPanel=new CTablePanel<INaviModule>(m_table,new CModuleFilterCreator(),new CModuleFilterHelp());  bottomPanel.setBorder(m_titledBorder);  bottomPanel.add(new JScrollPane(m_table));  final JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,topPanel,bottomPanel);  splitPane.setOneTouchExpandable(true);  splitPane.setDividerLocation(splitPane.getMinimumDividerLocation());  splitPane.setResizeWeight(0.5);  setBorder(new EmptyBorder(0,0,0,1));  add(splitPane);}  }
class C{  public static void run(){  v=new MethodCallsOnAlloc();  if (PTABridge.v().getPackage() == PointsToAnalysisPackage.SPARK) {    v.runInternalSpark();  } else {    logger.error("Only SPARK supported!");    droidsafe.main.Main.exit(1);  }}  }
class C{  public GetRecordings(String... properties){  super();  addParameterToRequest("properties",properties);}  }
class C{  public static boolean areEqual(Bundle[] bundles1,Bundle[] bundles2){  if (bundles1 == null) {    return bundles2 == null;  } else   if (bundles2 == null) {    return false;  } else   if (bundles1 == bundles2) {    return true;  }  if (bundles1.length != bundles2.length) {    return false;  }  for (int i=0; i < bundles1.length; i++) {    if (!areEqual(bundles1[i],bundles2[i])) {      return false;    }  }  return true;}  }
class C{  public Tasks<VolumeRestRep> restoreFromFullCopy(URI copyId){  return postTasks(getIdUrl() + "/restore",copyId);}  }
class C{  public void assertNotUnprivilegedMaster() throws RuntimeException {  if (context.isMaster() && !context.isPrivilegedMaster())   throw new RuntimeException("Operation requires a privileged master");}  }
class C{  public NotificationChain basicSetRewiredTarget(SymbolTableEntry newRewiredTarget,NotificationChain msgs){  SymbolTableEntry oldRewiredTarget=rewiredTarget;  rewiredTarget=newRewiredTarget;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ImPackage.PARAMETERIZED_TYPE_REF_IM__REWIRED_TARGET,oldRewiredTarget,newRewiredTarget);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void addRSSSequence(RSSSequence s){  seq=s;}  }
class C{  private void clearCommercialButtonsSelection(){  for (  JToggleButton b : commercialButtons.values()) {    b.setSelected(false);  }}  }
class C{  public void densitySolver(){  addSource(d,dOld);  swap(d,dOld);  diffusion(0,d,dOld,diffusion);  swap(d,dOld);  advect(0,d,dOld,u,v);  for (int i=0; i < size; i++) {    dOld[i]=0;  }}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  public void loadMedia(MediaInfo media,boolean autoPlay,int position) throws TransientNetworkDisconnectionException, NoConnectionException {  loadMedia(media,autoPlay,position,null);}  }
class C{  private static boolean evaluateExpression(final FilterRelation predicate,final TraceRegister register,final long value){switch (predicate) {case EQUAL_TO:    return register.getValue().toLong() == value;case GREATER_EQUAL_THAN:  return register.getValue().toLong() >= value;case GREATER_THAN:return register.getValue().toLong() > value;case LESS_EQUAL_TO:return register.getValue().toLong() <= value;case LESS_THAN:return register.getValue().toLong() < value;case NOT_EQUAL_TO:return register.getValue().toLong() != value;default :throw new IllegalStateException("IE00264: Unknown predicate");}}  }
class C{  public static InputTextMessageContentBuilder builder(){  return new InputTextMessageContentBuilder();}  }
class C{  void resetId(){  id=NativeCrypto.SSL_SESSION_session_id(sslSessionNativePointer);}  }
class C{  private boolean checkStorageQuotaDirectoryExistsInDB(String nativeGuid) throws IOException {  URIQueryResultList result=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getQuotaDirsByNativeGuid(nativeGuid),result);  if (result.iterator().hasNext()) {    return true;  }  return false;}  }
class C{  private void printHeader(Problem problem,boolean reduced,List<String> attributes,PrintWriter writer){  int numberOfVariables=problem.getNumberOfVariables();  int numberOfObjectives=problem.getNumberOfObjectives();  if (reduced) {    numberOfVariables=0;  }  writer.println("# Nondominated Solutions:");  writer.print("# Format:  Variables = ");  writer.print(numberOfVariables);  writer.print(" | Objectives = ");  writer.println(numberOfObjectives);  if (attributes.size() == numberOfObjectives) {    writer.print("# <DATA_HEADER>");    for (int i=0; i < numberOfVariables; i++) {      writer.print(" Var");      writer.print(i + 1);    }    for (int i=0; i < numberOfObjectives; i++) {      writer.print(" ");      writer.print(attributes.get(i));    }    writer.println();  } else   if (attributes.size() == numberOfVariables + numberOfObjectives) {    writer.print("# <DATA_HEADER>");    for (int i=0; i < numberOfVariables + numberOfObjectives; i++) {      writer.print(" ");      writer.print(attributes.get(i));    }    writer.println();  } else {    if (!attributes.isEmpty()) {      System.err.println("incorrect number of names, using defaults");    }    writer.print("# <DATA_HEADER>");    for (int i=0; i < numberOfVariables; i++) {      writer.print(" Var");      writer.print(i + 1);    }    for (int i=0; i < numberOfObjectives; i++) {      writer.print(" Obj");      writer.print(i + 1);    }    writer.println();  }  writer.println("# <GEN_HEADER> NFE, Time (sec)");  writer.println("#");}  }
class C{  public static final int[] toSparseIntArray(Instance x,int L){  return A.toPrimitive(toIndicesSet(x,L));}  }
class C{  public void load(String fileName) throws Exception {  if (!fileName.endsWith(".kf") && !fileName.endsWith(".kfml")) {    throw new Exception("Can only load and run binary or xml serialized KnowledgeFlows " + "(*.kf | *.kfml)");  }  if (fileName.endsWith(".kf")) {    loadBinary(fileName);  } else   if (fileName.endsWith(".kfml")) {    loadXML(fileName);  }}  }
class C{  @Override protected void refreshVisuals(){  EntityFigure entityFigure=getFigure();  Point location=entityFigure.getLocation();  DiagramPart parent=(DiagramPart)getParent();  Rectangle constraint=new Rectangle(location.x,location.y,-1,-1);  parent.setLayoutConstraint(this,entityFigure,constraint);}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  public CharSeq replaceFirst(String regex,CharSeq replacement){  return this.replaceFirst(regex,replacement.str);}  }
class C{  protected NodeResult compareDocumentType(final XNode xControl,final XNode xTest){  Differences differences=new Differences();  NodeResult nodeResult=new NodeResult(xControl,xTest,differences);  boolean diffName=false;  boolean diffPublicId=false;  boolean diffSysId=false;  DocumentType control=(DocumentType)xControl.getNode();  DocumentType test=(DocumentType)xTest.getNode();  if ((diffName=XMLUtil.areNullorEqual(control.getPublicId(),test.getPublicId(),_ignoringWhitespace,_includeNodeValueInXPath)) && (diffSysId=XMLUtil.areNullorEqual(control.getSystemId(),test.getSystemId(),_ignoringWhitespace,_includeNodeValueInXPath)) && (diffPublicId=XMLUtil.areNullorEqual(control.getName(),test.getName(),_ignoringWhitespace,_includeNodeValueInXPath))) {  } else {    if (!_config.isCustomDifference()) {      differences.add("Different DocumentType Node: Current Node " + xTest.getXPath() + " --> Golden Node "+ xControl.getXPath());    } else {      Difference diff=null;      if (diffName) {        diff=new Difference(DifferenceConstants.DOCTYPE_NAME,xControl,xTest);      } else       if (diffSysId) {        diff=new Difference(DifferenceConstants.DOCTYPE_SYSTEM_ID,xControl,xTest);      } else       if (diffPublicId) {        diff=new Difference(DifferenceConstants.DOCTYPE_PUBLIC_ID,xControl,xTest);      }      differences.add(diff);    }  }  return nodeResult;}  }
class C{  public LVQ(DistanceMetric dm,int iterations,double learningRate,int representativesPerClass,LVQVersion lvqVersion,DecayRate learningDecay){  setLearningDecay(learningDecay);  setIterations(iterations);  setLearningRate(learningRate);  setDistanceMetric(dm);  setLVQMethod(lvqVersion);  setEpsilonDistance(DEFAULT_EPS);  setMScale(DEFAULT_MSCALE);  setSeedSelection(DEFAULT_SEED_SELECTION);  setVecCollectionFactory(new DefaultVectorCollectionFactory<VecPaired<Vec,Integer>>());  setRepresentativesPerClass(representativesPerClass);}  }
class C{  public void commitSample(boolean isKeyframe,int offset){  Assertions.checkState(offset <= 0);  int sampleSize=(int)(totalBytesWritten + offset - pendingSampleOffset);  infoQueue.commitSample(pendingSampleTimeUs,pendingSampleOffset,sampleSize,isKeyframe ? C.SAMPLE_FLAG_SYNC : 0);}  }
class C{  public ElsaMaker unknownClassNotification(ElsaClassCallback callback){  this.unknownClassNotification=callback;  return this;}  }
class C{  public Color toAWTColor(TextColor color,boolean isForeground,boolean inBoldContext){  if (color instanceof TextColor.ANSI) {    return colorPalette.get((TextColor.ANSI)color,isForeground,inBoldContext && useBrightColorsOnBold);  }  return color.toColor();}  }
class C{  public static IPath findFilterPath(final IProject project){  FilterLocator filterLocator=Activator.getDefault().getFilterLocator();  IFolder syncFolder=ProjectUtil.getSyncDirectory(project);  if (syncFolder == null) {    return null;  }  File filterLocation=filterLocator.findFilterLocation(syncFolder.getLocation().toFile());  if (filterLocation == null) {    return null;  }  return Path.fromOSString(filterLocation.getAbsolutePath());}  }
class C{  public String composeOtpAttribute(OTPUserRecord otpUserRecord) throws PwmUnrecoverableException {  String value="";  if (otpUserRecord != null) {    final Configuration config=pwmApplication.getConfig();    final OTPStorageFormat format=config.readSettingAsEnum(PwmSetting.OTP_SECRET_STORAGEFORMAT,OTPStorageFormat.class);switch (format) {case PWM:      value=JsonUtil.serialize(otpUserRecord);    break;case OTPURL:  value=OTPUrlUtil.composeOtpUrl(otpUserRecord);break;case BASE32SECRET:value=otpUserRecord.getSecret();break;case PAM:value=OTPPamUtil.composePamData(otpUserRecord);break;default :String errorStr=String.format("Unsupported storage format: ",format.toString());ErrorInformation error=new ErrorInformation(PwmError.ERROR_INVALID_CONFIG,errorStr);throw new PwmUnrecoverableException(error);}}return value;}  }
class C{  private UiUtils(){  throw new AssertionError();}  }
class C{  protected final boolean isDebugMode(){  return debugMode;}  }
class C{  private static InsnNode removeAssignChain(InsnNode insn,InstructionRemover remover,InsnType insnType){  if (insn == null) {    return null;  }  remover.add(insn);  InsnType type=insn.getType();  if (type == insnType) {    return insn;  }  if (type == InsnType.MOVE) {    RegisterArg arg=(RegisterArg)insn.getArg(0);    return removeAssignChain(arg.getAssignInsn(),remover,insnType);  }  return null;}  }
class C{  public boolean onKeyOther(View view,Editable content,KeyEvent event){  if (event.getAction() != KeyEvent.ACTION_MULTIPLE || event.getKeyCode() != KeyEvent.KEYCODE_UNKNOWN) {    return false;  }  int selectionStart=Selection.getSelectionStart(content);  int selectionEnd=Selection.getSelectionEnd(content);  if (selectionEnd < selectionStart) {    int temp=selectionEnd;    selectionEnd=selectionStart;    selectionStart=temp;  }  CharSequence text=event.getCharacters();  if (text == null) {    return false;  }  content.replace(selectionStart,selectionEnd,text);  return true;}  }
class C{  public static String makeSystemName(String type,int nAddress,int bitNum){  String nName="";  if ((!type.equals("S")) && (!type.equals("L")) && (!type.equals("T"))) {    log.error("illegal type character proposed for system name");    return (nName);  }  if ((nAddress < 0) || (nAddress > 127)) {    log.error("illegal node adddress proposed for system name");    return (nName);  }  if ((bitNum < 1) || (bitNum > 2048)) {    log.error("illegal bit number proposed for system name");    return (nName);  }  if (bitNum < 1000) {    nName="T" + type + Integer.toString((nAddress * 1000) + bitNum);  } else {    nName="T" + type + Integer.toString(nAddress)+ "B"+ Integer.toString(bitNum);  }  return (nName);}  }
class C{  public VariableReference createVariableReference(){  VariableReferenceImpl variableReference=new VariableReferenceImpl();  return variableReference;}  }
class C{  public void contextDestroyed(ServletContextEvent event){  CFPollerManager.getInstance().shutdown();  MonitorController.getInstance().shutdown();  ScalingScheduledServiceFactory.getScheduledService().shutdown();  logger.info("Finished to shutdown all thread pools.");}  }
class C{  @Override public void onReceive(Context context,Intent intent){  listener.onStatusUpdate();}  }
class C{  private static int gallopRight(Comparable<Object> key,Object[] a,int base,int len,int hint){  assert len > 0 && hint >= 0 && hint < len;  int ofs=1;  int lastOfs=0;  if (key.compareTo(a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  assert lastOfs == ofs;  return ofs;}  }
class C{  @Deprecated @Nullable public static GitRemoteBranch tracked(@NotNull Project project,@NotNull VirtualFile root,@NotNull String branchName) throws VcsException {  final HashMap<String,String> result=new HashMap<String,String>();  GitConfigUtil.getValues(project,root,null,result);  String remoteName=result.get(trackedRemoteKey(branchName));  if (remoteName == null) {    return null;  }  String branch=result.get(trackedBranchKey(branchName));  if (branch == null) {    return null;  }  if (".".equals(remoteName)) {    return new GitSvnRemoteBranch(branch,GitBranch.DUMMY_HASH);  }  GitRemote remote=findRemoteByNameOrLogError(project,root,remoteName);  if (remote == null)   return null;  return new GitStandardRemoteBranch(remote,branch,GitBranch.DUMMY_HASH);}  }
class C{  public static String replace$(String text,Map<String,String> vars){  return replace(text,vars,"$");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void addItem(File directory){  if (directory == null) {    return;  }  int oldSize=directories.size();  directories.clear();  if (oldSize > 0) {    fireIntervalRemoved(this,0,oldSize);  }  File canonical;  try {    canonical=fsv.createFileObject(ShellFolder.getNormalizedFile(directory).getPath());  } catch (  IOException e) {    canonical=directory;  }  File f=canonical;  do {    directories.add(f);  } while ((f=f.getParentFile()) != null);  int newSize=directories.size();  if (newSize > 0) {    fireIntervalAdded(this,0,newSize);  }  setSelectedItem(canonical);}  }
class C{  private void deleteCurrentFile(File fileToDelete) throws IOException {  logger.info("Preparing to delete file {}",fileToDelete);  if (!fileToDelete.exists()) {    logger.warn("Unable to delete nonexistent file: {}",fileToDelete);    return;  }  if (!fileToDelete.delete()) {    throw new IOException("Unable to delete spool file: " + fileToDelete);  }  deleteMetaFile();}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (mv != null) {    return mv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  private synchronized void startSort(){  if (kicker == null || !kicker.isAlive()) {    kicker=new Thread(this);    kicker.start();  }}  }
class C{  public static ValueLob openLinked(int type,int tableId,int objectId,long precision){  String fileName=getFileName(tableId,objectId);  return new ValueLob(type,fileName,tableId,objectId,true,precision);}  }
class C{  public static void write(Path reportingPath,double value,long ts) throws IOException {  try (DataOutputStream dos=new DataOutputStream(Files.newOutputStream(reportingPath,StandardOpenOption.CREATE,StandardOpenOption.APPEND))){    dos.writeDouble(value);    dos.writeLong(ts);    dos.flush();  } }  }
class C{  private void recordZoneEvent(FCZoneReference ref,String type,String description){  if (ref == null) {    _log.error("Invalid Zone event");    return;  }  RecordableBourneEvent event=ControllerUtils.convertToRecordableBourneEvent(ref,type,description,null,_dbClient,EVENT_SERVICE_TYPE,RecordType.Event.name(),EVENT_SERVICE_SOURCE);  try {    _eventManager.recordEvents(event);  } catch (  Exception ex) {    _log.error("Failed to record event. Event description: {}. Error:",description,ex);  }}  }
class C{  private void updateNotification(){  performNotificationImp(true);}  }
class C{  private static String generateEvent(Long currTime,int delayInMillis){  TeamInfo team=randomTeam(liveTeams);  String teamName=team.getTeamName();  String user;  final int parseErrorRate=900000;  String robot=team.getRobot();  if (robot != null) {    if (random.nextInt(team.numMembers() / 2) == 0) {      user=robot;    } else {      user=team.getRandomUser();    }  } else {    user=team.getRandomUser();  }  String event=user + "," + teamName+ ","+ random.nextInt(MAX_SCORE);  if (random.nextInt(parseErrorRate) == 0) {    System.out.println("Introducing a parse error.");    event="THIS LINE REPRESENTS CORRUPT DATA AND WILL CAUSE A PARSE ERROR";  }  return addTimeInfoToEvent(event,currTime,delayInMillis);}  }
class C{  private static void add_alt_ocsp(CommandLine cmdLine) throws Exception {  CasIdmClient client=new CasIdmClient(HOSTNAME);  String tenant=getTenantName(cmdLine);  if (tenant.isEmpty()) {    tenant=client.getDefaultTenant().toString();  }  System.out.println("Adding alternative OCSP responder for tenant :" + tenant);  AuthnPolicy authnPolicy=client.getAuthnPolicy(tenant);  ClientCertPolicy certPolicy=new ClientCertPolicy();  if (authnPolicy.getClientCertPolicy() != null) {    certPolicy=authnPolicy.getClientCertPolicy();  }  String siteID=cmdLine.getOptionValue(OPTION_SITE_ID,null);  if (siteID == null) {    siteID=client.getClusterId();  }  String urlStr=cmdLine.getOptionValue(OPTION_AUTHN_CERT_OCSP_URL,null);  Validate.notEmpty(urlStr,"ocspUrl is required for this command!");  URL ocspUrl;  try {    ocspUrl=new URL(urlStr);  } catch (  MalformedURLException e) {    System.out.format("MalformedURLException for url %s:",urlStr);    return;  }  X509Certificate ocspSignCert=null;  String inputValue=cmdLine.getOptionValue(OPTION_AUTHN_CERT_OCSP_CERT,null);  if (inputValue != null) {    CertificateFactory certFactory=CertificateFactory.getInstance("X.509");    String[] certFiles=inputValue.split(",");    String certStr=certFiles[0];    if (certStr != null) {      certStr=certStr.trim();      if (certStr.startsWith("~" + File.separator)) {        certStr=System.getProperty("user.home") + certStr.substring(1);      }      Path path=Paths.get(certStr);      InputStream inStream=new FileInputStream(path.toString());      ocspSignCert=(X509Certificate)certFactory.generateCertificate(inStream);      inStream.close();    }  }  HashMap<String,AlternativeOCSPList> ocspMap=certPolicy.get_siteOCSPList();  if (ocspMap == null) {    ocspMap=new HashMap<String,AlternativeOCSPList>();  }  AlternativeOCSPList siteAltOCSPList=ocspMap.get(siteID);  if (siteAltOCSPList == null) {    siteAltOCSPList=new AlternativeOCSPList(siteID,null);  }  siteAltOCSPList.addAlternativeOCSP(new AlternativeOCSP(ocspUrl,ocspSignCert));  ocspMap.put(siteID,siteAltOCSPList);  certPolicy.set_siteOCSPMap(ocspMap);  client.setAuthnPolicy(tenant,new AuthnPolicy(authnPolicy.IsPasswordAuthEnabled(),authnPolicy.IsWindowsAuthEnabled(),authnPolicy.IsTLSClientCertAuthnEnabled(),authnPolicy.IsRsaSecureIDAuthnEnabled(),certPolicy,authnPolicy.get_rsaAgentConfig()));  System.out.println("OCSP reponder is added successfully!");  displayAltOcspSite(siteAltOCSPList);}  }
class C{  private static Headers combine(Headers cachedHeaders,Headers networkHeaders) throws IOException {  Headers.Builder result=new Headers.Builder();  for (int i=0, size=cachedHeaders.size(); i < size; i++) {    String fieldName=cachedHeaders.name(i);    String value=cachedHeaders.value(i);    if ("Warning".equalsIgnoreCase(fieldName) && value.startsWith("1")) {      continue;    }    if (!OkHeaders.isEndToEnd(fieldName) || networkHeaders.get(fieldName) == null) {      result.add(fieldName,value);    }  }  for (int i=0, size=networkHeaders.size(); i < size; i++) {    String fieldName=networkHeaders.name(i);    if ("Content-Length".equalsIgnoreCase(fieldName)) {      continue;    }    if (OkHeaders.isEndToEnd(fieldName)) {      result.add(fieldName,networkHeaders.value(i));    }  }  return result.build();}  }
class C{  private boolean hasTransition(Assignment action){  for (  Model m : system.getDomain().getModels()) {    if (m.isTriggered(action.removePrimes().getVariables())) {      return true;    }  }  return false;}  }
class C{  protected boolean[] canHandleClassAsNthAttribute(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,int classIndex){  if (classIndex == TestInstances.CLASS_IS_LAST) {    print("class attribute as last attribute");  } else {    print("class attribute as " + (classIndex + 1) + ". attribute");  }  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  int numTrain=getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,classIndex,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  private boolean isJsf23(){  if (isJsf23 == null) {    FacesContext facesContext=FacesContext.getCurrentInstance();    isJsf23=getFacesConfigXmlVersion(facesContext).equals("2.3");  }  return isJsf23;}  }
class C{  public RouteLocation(Element e){  Attribute a;  if ((a=e.getAttribute(Xml.ID)) != null) {    _id=a.getValue();  } else {    log.warn("no id attribute in route location element when reading operations");  }  if ((a=e.getAttribute(Xml.LOCATION_ID)) != null) {    _locationId=a.getValue();    _location=LocationManager.instance().getLocationById(a.getValue());    if (_location != null) {      _location.addPropertyChangeListener(this);    }  } else   if ((a=e.getAttribute(Xml.NAME)) != null) {    _location=LocationManager.instance().getLocationByName(a.getValue());    if (_location != null) {      _location.addPropertyChangeListener(this);    }    RouteManagerXml.instance().setDirty(true);  }  if ((a=e.getAttribute(Xml.TRAIN_DIRECTION)) != null) {    if (Setup.getTrainDirectionList().contains(a.getValue())) {      _trainDir=Setup.getDirectionInt(a.getValue());      log.debug("found old train direction {} new direction {}",a.getValue(),_trainDir);    } else {      try {        _trainDir=Integer.parseInt(a.getValue());      } catch (      NumberFormatException ee) {        log.error("Route location ({}) direction ({}) is unknown",getName(),a.getValue());      }    }  }  if ((a=e.getAttribute(Xml.MAX_TRAIN_LENGTH)) != null) {    try {      _maxTrainLength=Integer.parseInt(a.getValue());    } catch (    NumberFormatException ee) {      log.error("Route location ({}) maximum train length ({}) isn't a valid number",getName(),a.getValue());    }  }  if ((a=e.getAttribute(Xml.GRADE)) != null) {    try {      _grade=Double.parseDouble(a.getValue());    } catch (    NumberFormatException ee) {      log.error("Route location ({}) grade ({}) isn't a valid number",getName(),a.getValue());    }  }  if ((a=e.getAttribute(Xml.MAX_CAR_MOVES)) != null) {    try {      _maxCarMoves=Integer.parseInt(a.getValue());    } catch (    NumberFormatException ee) {      log.error("Route location ({}) maximum car moves ({}) isn't a valid number",getName(),a.getValue());    }  }  if ((a=e.getAttribute(Xml.RANDOM_CONTROL)) != null) {    _randomControl=a.getValue();  }  if ((a=e.getAttribute(Xml.PICKUPS)) != null) {    _pickups=a.getValue().equals(Xml.YES);  }  if ((a=e.getAttribute(Xml.DROPS)) != null) {    _drops=a.getValue().equals(Xml.YES);  }  if ((a=e.getAttribute(Xml.WAIT)) != null) {    try {      _wait=Integer.parseInt(a.getValue());    } catch (    NumberFormatException ee) {      log.error("Route location ({}) wait ({}) isn't a valid number",getName(),a.getValue());    }  }  if ((a=e.getAttribute(Xml.DEPART_TIME)) != null) {    _departureTime=a.getValue();  }  if ((a=e.getAttribute(Xml.TRAIN_ICON_X)) != null) {    try {      _trainIconX=Integer.parseInt(a.getValue());    } catch (    NumberFormatException ee) {      log.error("Route location ({}) icon x ({}) isn't a valid number",getName(),a.getValue());    }  }  if ((a=e.getAttribute(Xml.TRAIN_ICON_Y)) != null) {    try {      _trainIconY=Integer.parseInt(a.getValue());    } catch (    NumberFormatException ee) {      log.error("Route location ({}) icon y ({}) isn't a valid number",getName(),a.getValue());    }  }  if ((a=e.getAttribute(Xml.SEQUENCE_ID)) != null) {    try {      _sequenceId=Integer.parseInt(a.getValue());    } catch (    NumberFormatException ee) {      log.error("Route location ({}) sequence id isn't a valid number",getName(),a.getValue());    }  }  if ((a=e.getAttribute(Xml.COMMENT)) != null) {    _comment=OperationsXml.convertFromXmlComment(a.getValue());  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void insertBitmap(final BufferedImage bitmap,final int x,final int y,final int xx,final int yy,final FilterMode filter){  insertBitmap(bitmap,x,y,bitmap.getRGB(xx,yy),filter);}  }
class C{  protected void recordHeartbeat(String details){  Preconditions.checkNotNull(activityContext,"ActivityContext should have been set.");  final String taskToken=activityContext().task().getTaskToken();  try {    final RecordActivityTaskHeartbeatRequest request=RecordActivityTaskHeartbeatRequestBuilder.builder().taskToken(taskToken).details(Details.of(details)).build();    activityContext().service().recordActivityTaskHeartbeat(request);  } catch (  Throwable e) {    log.warn("Failed to record heartbeat: " + taskToken + ", "+ details,e);    throw e;  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  @Override public void draw(Graphics2D g2,DialPlot plot,Rectangle2D frame,Rectangle2D view){  Rectangle2D arcRectInner=DialPlot.rectangleByRadius(frame,this.innerRadius,this.innerRadius);  Rectangle2D arcRectOuter=DialPlot.rectangleByRadius(frame,this.outerRadius,this.outerRadius);  DialScale scale=plot.getScale(this.scaleIndex);  if (scale == null) {    throw new RuntimeException("No scale for scaleIndex = " + this.scaleIndex);  }  double angleMin=scale.valueToAngle(this.lowerBound);  double angleMax=scale.valueToAngle(this.upperBound);  Arc2D arcInner=new Arc2D.Double(arcRectInner,angleMin,angleMax - angleMin,Arc2D.OPEN);  Arc2D arcOuter=new Arc2D.Double(arcRectOuter,angleMax,angleMin - angleMax,Arc2D.OPEN);  g2.setPaint(this.paint);  g2.setStroke(new BasicStroke(2.0f));  g2.draw(arcInner);  g2.draw(arcOuter);}  }
class C{  public void truncate(final long size) throws FileNotFoundException, IOException {  fileChannel.truncate(Math.max(size,writePosition));}  }
class C{  public static int checkCorrectBufferSize(int audioSource,int fs,int channelConfiguration,int audioEncoding){  for (  int buffer : new int[]{256,512,1024,2048,4096}) {    AudioRecord audioRecordTemp=new AudioRecord(audioSource,fs,channelConfiguration,audioEncoding,buffer);    if (audioRecordTemp != null && audioRecordTemp.getState() == AudioRecord.STATE_INITIALIZED) {      return buffer;    }  }  return 0;}  }
class C{  public void halt(){synchronized (this) {    beenHalted=true;  }}  }
class C{  private static void deleteData(Module persistenceModule) throws SQLException {{    UnitOfWork uow=persistenceModule.unitOfWorkFactory().newUnitOfWork();    try {      SQLConfiguration config=uow.get(SQLConfiguration.class,PostgreSQLEntityStoreAssembler.DEFAULT_ENTITYSTORE_IDENTITY);      Connection connection=persistenceModule.findService(DataSource.class).get().getConnection();      connection.setAutoCommit(false);      connection.setReadOnly(false);      String schemaName=config.schemaName().get();      if (schemaName == null) {        schemaName=SQLs.DEFAULT_SCHEMA_NAME;      }      Statement stmt=null;      try {        stmt=connection.createStatement();        stmt.execute("DROP SCHEMA " + schemaName + " CASCADE");        connection.commit();      }  finally {        SQLUtil.closeQuietly(stmt);      }    }  finally {      uow.discard();    }  }{    UnitOfWork uow=persistenceModule.unitOfWorkFactory().newUnitOfWork();    try {      SQLConfiguration config=uow.get(SQLConfiguration.class,PostgreSQLIndexQueryAssembler.DEFAULT_IDENTITY);      Connection connection=persistenceModule.findService(DataSource.class).get().getConnection();      connection.setAutoCommit(false);      connection.setReadOnly(false);      String schemaName=config.schemaName().get();      if (schemaName == null) {        schemaName=PostgreSQLAppStartup.DEFAULT_SCHEMA_NAME;      }      Statement stmt=null;      try {        stmt=connection.createStatement();        stmt.execute("DROP SCHEMA " + schemaName + " CASCADE");        connection.commit();      }  finally {        SQLUtil.closeQuietly(stmt);        SQLUtil.closeQuietly(connection);      }    }  finally {      uow.discard();    }  }}  }
class C{  public void transform(Source source,Result outputTarget) throws TransformerException {  createResultContentHandler(outputTarget);  if ((source instanceof StreamSource && source.getSystemId() == null && ((StreamSource)source).getInputStream() == null && ((StreamSource)source).getReader() == null) || (source instanceof SAXSource && ((SAXSource)source).getInputSource() == null && ((SAXSource)source).getXMLReader() == null) || (source instanceof DOMSource && ((DOMSource)source).getNode() == null)) {    try {      DocumentBuilderFactory builderF=DocumentBuilderFactory.newInstance();      DocumentBuilder builder=builderF.newDocumentBuilder();      String systemID=source.getSystemId();      source=new DOMSource(builder.newDocument());      if (systemID != null) {        source.setSystemId(systemID);      }    } catch (    ParserConfigurationException e) {      throw new TransformerException(e.getMessage());    }  }  try {    if (source instanceof DOMSource) {      DOMSource dsource=(DOMSource)source;      m_systemID=dsource.getSystemId();      Node dNode=dsource.getNode();      if (null != dNode) {        try {          if (dNode.getNodeType() == Node.ATTRIBUTE_NODE)           this.startDocument();          try {            if (dNode.getNodeType() == Node.ATTRIBUTE_NODE) {              String data=dNode.getNodeValue();              char[] chars=data.toCharArray();              characters(chars,0,chars.length);            } else {              org.apache.xml.serializer.TreeWalker walker;              walker=new org.apache.xml.serializer.TreeWalker(this,m_systemID);              walker.traverse(dNode);            }          }  finally {            if (dNode.getNodeType() == Node.ATTRIBUTE_NODE)             this.endDocument();          }        } catch (        SAXException se) {          throw new TransformerException(se);        }        return;      } else {        String messageStr=XSLMessages.createMessage(XSLTErrorResources.ER_ILLEGAL_DOMSOURCE_INPUT,null);        throw new IllegalArgumentException(messageStr);      }    }    InputSource xmlSource=SAXSource.sourceToInputSource(source);    if (null == xmlSource) {      throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_CANNOT_TRANSFORM_SOURCE_TYPE,new Object[]{source.getClass().getName()}));    }    if (null != xmlSource.getSystemId())     m_systemID=xmlSource.getSystemId();    XMLReader reader=null;    boolean managedReader=false;    try {      if (source instanceof SAXSource) {        reader=((SAXSource)source).getXMLReader();      }      if (null == reader) {        try {          reader=XMLReaderManager.getInstance().getXMLReader();          managedReader=true;        } catch (        SAXException se) {          throw new TransformerException(se);        }      } else {        try {          reader.setFeature("http://xml.org/sax/features/namespace-prefixes",true);        } catch (        org.xml.sax.SAXException se) {        }      }      ContentHandler inputHandler=this;      reader.setContentHandler(inputHandler);      if (inputHandler instanceof org.xml.sax.DTDHandler)       reader.setDTDHandler((org.xml.sax.DTDHandler)inputHandler);      try {        if (inputHandler instanceof org.xml.sax.ext.LexicalHandler)         reader.setProperty("http://xml.org/sax/properties/lexical-handler",inputHandler);        if (inputHandler instanceof org.xml.sax.ext.DeclHandler)         reader.setProperty("http://xml.org/sax/properties/declaration-handler",inputHandler);      } catch (      org.xml.sax.SAXException se) {      }      try {        if (inputHandler instanceof org.xml.sax.ext.LexicalHandler)         reader.setProperty("http://xml.org/sax/handlers/LexicalHandler",inputHandler);        if (inputHandler instanceof org.xml.sax.ext.DeclHandler)         reader.setProperty("http://xml.org/sax/handlers/DeclHandler",inputHandler);      } catch (      org.xml.sax.SAXNotRecognizedException snre) {      }      reader.parse(xmlSource);    } catch (    org.apache.xml.utils.WrappedRuntimeException wre) {      Throwable throwable=wre.getException();      while (throwable instanceof org.apache.xml.utils.WrappedRuntimeException) {        throwable=((org.apache.xml.utils.WrappedRuntimeException)throwable).getException();      }      throw new TransformerException(wre.getException());    }catch (    org.xml.sax.SAXException se) {      throw new TransformerException(se);    }catch (    IOException ioe) {      throw new TransformerException(ioe);    } finally {      if (managedReader) {        XMLReaderManager.getInstance().releaseXMLReader(reader);      }    }  }  finally {    if (null != m_outputStream) {      try {        m_outputStream.close();      } catch (      IOException ioe) {      }      m_outputStream=null;    }  }}  }
class C{  public int count(){  return m_docs.count();}  }
class C{  private void loadDeviceInfoActivity(){  Intent intent=new Intent(AlreadyRegisteredActivity.this,DisplayDeviceInfoActivity.class);  intent.putExtra(getResources().getString(R.string.intent_extra_from_activity),AlreadyRegisteredActivity.class.getSimpleName());  startActivity(intent);}  }
class C{  public void testBasicAuth() throws Exception {  startServer(47500);  fetchPage("/basic.jsp",200);  fetchPage("/basic.jsp?case=1",200);  fetchPage("/basic.jsp?case=2",200);  server.start();}  }
class C{  public ReservedLiteral createReservedLiteral(){  ReservedLiteralImpl reservedLiteral=new ReservedLiteralImpl();  return reservedLiteral;}  }
class C{  public void clearTable(String tableName){  HTable table=null;  ResultScanner scanner=null;  try {    table=new HTable(conf,tableName);    Scan scan=new Scan();    scan.setCaching(1000);    scanner=table.getScanner(scan);    Result result;    while ((result=scanner.next()) != null) {      Delete delete=new Delete(result.getRow());      table.delete(delete);    }  } catch (  IOException ex) {    LOG.info("Exception clearing table {}",tableName);  } finally {    IOUtils.closeStream(scanner);    IOUtils.closeStream(table);  }}  }
class C{  public static int[] createMSBMask(int bits){  int m=0, orig=32 - bits;  while (bits-- > 0) {    m|=1;    m<<=1;  }  while (--orig > 0) {    m<<=1;  }  return new int[]{(m >> 24) & 0xFF,(m >> 16) & 0xFF,(m >> 8) & 0xFF,m & 0xFF};}  }
class C{  public StringWriter(File file) throws IOException {  output=new BufferedWriter(new FileWriter(file));}  }
class C{  public SelectiveAccessHandler(){  loadConfig();}  }
class C{  public synchronized Point2d undistort(HasCoordinates2d p){  double x=(p.getX() - cx) / fx;  double y=(p.getY() - cy) / fy;  final double r2=x * x + y * y;  final double r4=r2 * r2;  final double a=1 + k1 * r2 + k2 * r4;  double xp=x * a + 2 * p1 * x* y + p2 * (r2 + 2 * x * x);  double yp=y * a + 2 * p2 * x* y + p1 * (r2 + 2 * y * y);  return new Point2d(fx * xp + cx,fy * yp + cy);}  }
class C{  private void buildIterator(){  if (rowIterator != null) {    SolrDocumentListIterator documentListIterator=(SolrDocumentListIterator)rowIterator;    if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {      SolrDocumentList solrDocumentList=doQuery(documentListIterator.getStart() + documentListIterator.getSize());      if (solrDocumentList != null) {        rowIterator=new SolrDocumentListIterator(solrDocumentList);      }    }  } else {    SolrDocumentList solrDocumentList=doQuery(0);    if (solrDocumentList != null) {      rowIterator=new SolrDocumentListIterator(solrDocumentList);    }    return;  }}  }
class C{  public boolean hasExperimentId(){  return hasExtension(GwoExperimentId.class);}  }
class C{  public ServiceCall<Ranker> createRanker(final String name,final File training){  Validator.notNull(training,"training file cannot be null");  Validator.isTrue(training.exists(),"training file: " + training.getAbsolutePath() + " not found");  final JsonObject contentJson=new JsonObject();  if ((name != null) && !name.isEmpty()) {    contentJson.addProperty(NAME,name);  }  final RequestBody body=new MultipartBody.Builder().setType(MultipartBody.FORM).addPart(Headers.of(HttpHeaders.CONTENT_DISPOSITION,"form-data; name=\"training_data\""),RequestBody.create(HttpMediaType.BINARY_FILE,training)).addPart(Headers.of(HttpHeaders.CONTENT_DISPOSITION,"form-data; name=\"training_metadata\""),RequestBody.create(HttpMediaType.TEXT,contentJson.toString())).build();  final Request request=RequestBuilder.post(PATH_CREATE_RANKER).body(body).build();  return createServiceCall(request,ResponseConverterUtils.getObject(Ranker.class));}  }
class C{  public static boolean containsAssignableType(Types types,List<Type> list,Type type){  for (  Type t : list) {    if (types.isAssignable(t,type)) {      return true;    }  }  return false;}  }
class C{  void replacePrefixInName(Node name,String prefix,String newPrefix){  if (prefix.equals(name.getQualifiedName())) {    Node newName=NodeUtil.newQName(compiler,newPrefix);    JSDocInfo jsdoc=NodeUtil.getBestJSDocInfo(name);    newName.setJSDocInfo(jsdoc);    name.getParent().replaceChild(name,newName);  } else {    if (name.isGetProp()) {      replacePrefixInName(name.getFirstChild(),prefix,newPrefix);    }  }}  }
class C{  public void reverse(){  int[] newBits=new int[bits.length];  int len=((size - 1) / 32);  int oldBitsLen=len + 1;  for (int i=0; i < oldBitsLen; i++) {    long x=(long)bits[i];    x=((x >> 1) & 0x55555555L) | ((x & 0x55555555L) << 1);    x=((x >> 2) & 0x33333333L) | ((x & 0x33333333L) << 2);    x=((x >> 4) & 0x0f0f0f0fL) | ((x & 0x0f0f0f0fL) << 4);    x=((x >> 8) & 0x00ff00ffL) | ((x & 0x00ff00ffL) << 8);    x=((x >> 16) & 0x0000ffffL) | ((x & 0x0000ffffL) << 16);    newBits[len - i]=(int)x;  }  if (size != oldBitsLen * 32) {    int leftOffset=oldBitsLen * 32 - size;    int mask=1;    for (int i=0; i < 31 - leftOffset; i++) {      mask=(mask << 1) | 1;    }    int currentInt=(newBits[0] >> leftOffset) & mask;    for (int i=1; i < oldBitsLen; i++) {      int nextInt=newBits[i];      currentInt|=nextInt << (32 - leftOffset);      newBits[i - 1]=currentInt;      currentInt=(nextInt >> leftOffset) & mask;    }    newBits[oldBitsLen - 1]=currentInt;  }  bits=newBits;}  }
class C{  private final void processQueue(){  WeakElement wv=null;  while ((wv=(WeakElement)this.queue.poll()) != null) {    super.remove(wv);  }}  }
class C{  public static Element[] addElement(Element element,Element... elements){  Element[] newElements=new Element[elements.length + 1];  newElements[0]=element;  System.arraycopy(elements,0,newElements,1,elements.length);  return newElements;}  }
class C{  public WildFly9xStandaloneLocalConfigurationCapability(){  super();  this.propertySupportMap.put(DatasourcePropertySet.CONNECTION_TYPE,Boolean.TRUE);  this.propertySupportMap.put(ResourcePropertySet.RESOURCE,Boolean.TRUE);  this.propertySupportMap.put(WildFlyPropertySet.CLI_OFFLINE_SCRIPT,Boolean.TRUE);  this.propertySupportMap.put(WildFlyPropertySet.CLI_EMBEDDED_SCRIPT,Boolean.TRUE);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:33.684 -0500",hash_original_method="7B136AF27CDBDA451A86F0C558D92536",hash_generated_method="AADC47DFFEB747DA251688B348BDD88D") private void scrollIntoSlots(){  if (getChildCount() == 0 || mSelectedChild == null)   return;  int selectedCenter=getCenterOfView(mSelectedChild);  int targetCenter=getCenterOfGallery();  int scrollAmount=targetCenter - selectedCenter;  if (scrollAmount != 0) {    mFlingRunnable.startUsingDistance(scrollAmount);  } else {    onFinishedMovement();  }}  }
class C{  public static String randomRegexpishString(Random r,int maxLength){  final StringBuilder regexp=new StringBuilder(maxLength);  for (int i=nextInt(r,0,maxLength); i > 0; i--) {    if (r.nextBoolean()) {      regexp.append((char)RandomNumbers.randomIntBetween(r,'a','z'));    } else {      regexp.append(RandomPicks.randomFrom(r,ops));    }  }  return regexp.toString();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String[] n=getStringList(stack);  String s=getString(stack);  EPG.getInstance().setOverride(EPG.getInstance().getProviderIDForEPGDSName(s),getChannel(stack).getStationID(),n);  return null;}  }
class C{  @Override public boolean isInvisibleToCreatures(){  return has(INVISIBLE);}  }
class C{  @Override public void mayLaunch(Uri uri){  connection.mayLaunch(uri);}  }
class C{  int crossOverUp(int index,E x){  if (index == 0) {    queue[0]=x;    return 0;  }  int parentIndex=getParentIndex(index);  E parentElement=elementData(parentIndex);  if (parentIndex != 0) {    int grandparentIndex=getParentIndex(parentIndex);    int uncleIndex=getRightChildIndex(grandparentIndex);    if (uncleIndex != parentIndex && getLeftChildIndex(uncleIndex) >= size) {      E uncleElement=elementData(uncleIndex);      if (ordering.compare(uncleElement,parentElement) < 0) {        parentIndex=uncleIndex;        parentElement=uncleElement;      }    }  }  if (ordering.compare(parentElement,x) < 0) {    queue[index]=parentElement;    queue[parentIndex]=x;    return parentIndex;  }  queue[index]=x;  return index;}  }
class C{  public boolean isHistoricalDataRunning(Tradestrategy tradestrategy){  if (m_historyDataRequests.containsKey(tradestrategy.getId())) {    return true;  }  return false;}  }
class C{  public boolean isJarCacheEnabled(){  return isJarCacheEnabledDefault();}  }
class C{  public void testSearchMenu(){  EndToEndTestUtils.deleteAllTracks();  EndToEndTestUtils.createSimpleTrack(0,true);  assertTrue(isTrackControllerShown());  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_search),true);  assertFalse(isTrackControllerShown());  EndToEndTestUtils.enterTextAvoidSoftKeyBoard(0,EndToEndTestUtils.trackName);  sendKeys(KeyEvent.KEYCODE_ENTER);  instrumentation.waitForIdleSync();  assertEquals(1,EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0).getCount());  EndToEndTestUtils.SOLO.goBack();  instrumentation.waitForIdleSync();  assertTrue(isTrackControllerShown());}  }
class C{  @SuppressWarnings("unchecked") public void store(final String space,final CacheObject key,final CacheObject val,byte[] ver,long expirationTime) throws IgniteCheckedException {  assert key != null;  assert val != null;  if (log.isDebugEnabled())   log.debug("Store [space=" + space + ", key="+ key+ ", val="+ val+ "]");  CacheObjectContext coctx=null;  if (ctx.indexing().enabled()) {    coctx=cacheObjectContext(space);    ctx.indexing().store(space,key.value(coctx,false),val.value(coctx,false),expirationTime);  }  if (idx == null)   return;  if (!busyLock.enterBusy())   return;  try {    if (coctx == null)     coctx=cacheObjectContext(space);    Class<?> valCls=null;    TypeId id;    boolean binaryVal=ctx.cacheObjects().isBinaryObject(val);    if (binaryVal) {      int typeId=ctx.cacheObjects().typeId(val);      id=new TypeId(space,typeId);    } else {      valCls=val.value(coctx,false).getClass();      id=new TypeId(space,valCls);    }    TypeDescriptor desc=types.get(id);    if (desc == null || !desc.registered())     return;    if (!binaryVal && !desc.valueClass().isAssignableFrom(valCls))     throw new IgniteCheckedException("Failed to update index due to class name conflict" + "(multiple classes with same simple name are stored in the same cache) " + "[expCls=" + desc.valueClass().getName() + ", actualCls="+ valCls.getName()+ ']');    if (!ctx.cacheObjects().isBinaryObject(key)) {      Class<?> keyCls=key.value(coctx,false).getClass();      if (!desc.keyClass().isAssignableFrom(keyCls))       throw new IgniteCheckedException("Failed to update index, incorrect key class [expCls=" + desc.keyClass().getName() + ", actualCls="+ keyCls.getName()+ "]");    }    idx.store(space,desc,key,val,ver,expirationTime);  }  finally {    busyLock.leaveBusy();  }}  }
class C{  public JParamsLocation(){  initComponents();}  }
class C{  public void reset(){  getByteStream().reset();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.698 -0400",hash_original_method="4FD20927C2E38EB86416DF04242C2C20",hash_generated_method="6D228AD5403D64D87AD2A559B240F277") private void tryGrow(Object[] array,int oldCap){  lock.unlock();  Object[] newArray=null;  if (allocationSpinLock == 0 && UNSAFE.compareAndSwapInt(this,allocationSpinLockOffset,0,1)) {    try {      int newCap=oldCap + ((oldCap < 64) ? (oldCap + 2) : (oldCap >> 1));      if (newCap - MAX_ARRAY_SIZE > 0) {        int minCap=oldCap + 1;        if (minCap < 0 || minCap > MAX_ARRAY_SIZE)         throw new OutOfMemoryError();        newCap=MAX_ARRAY_SIZE;      }      if (newCap > oldCap && queue == array)       newArray=new Object[newCap];    }  finally {      allocationSpinLock=0;    }  }  if (newArray == null)   Thread.yield();  lock.lock();  if (newArray != null && queue == array) {    queue=newArray;    System.arraycopy(array,0,newArray,0,oldCap);  }}  }
class C{  public double minDataDLIfExists(int index,double expFPRate,boolean checkErr){  double[] rulesetStat=new double[6];  for (int j=0; j < m_SimpleStats.size(); j++) {    rulesetStat[0]+=m_SimpleStats.get(j)[0];    rulesetStat[2]+=m_SimpleStats.get(j)[2];    rulesetStat[4]+=m_SimpleStats.get(j)[4];    if (j == m_SimpleStats.size() - 1) {      rulesetStat[1]=m_SimpleStats.get(j)[1];      rulesetStat[3]=m_SimpleStats.get(j)[3];      rulesetStat[5]=m_SimpleStats.get(j)[5];    }  }  double potential=0;  for (int k=index + 1; k < m_SimpleStats.size(); k++) {    double[] ruleStat=getSimpleStats(k);    double ifDeleted=potential(k,expFPRate,rulesetStat,ruleStat,checkErr);    if (!Double.isNaN(ifDeleted)) {      potential+=ifDeleted;    }  }  double dataDLWith=dataDL(expFPRate,rulesetStat[0],rulesetStat[1],rulesetStat[4],rulesetStat[5]);  return (dataDLWith - potential);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TGETTER__DECLARED_TYPE_REF:    setDeclaredTypeRef((TypeRef)null);  return;}super.eUnset(featureID);}  }
class C{  public VariableDeclarator(VariableDeclaratorId id,Expression init){  setId(id);  setInit(init);}  }
class C{  public static UiResult alert(String message){  UiResult r=new UiResult();  r.alert=message;  return r;}  }
class C{  public String officialObbFilePath(){  return mOfficialObbFilePath;}  }
class C{  public Complex plus(double a){  return add(this,a);}  }
class C{  public void logFine(Throwable t){  ByteArrayOutputStream bs=new ByteArrayOutputStream();  t.printStackTrace(new PrintStream(bs));  logger.fine(logPrefix + bs.toString());}  }
class C{  public void callMethod() throws IOException {  writeCode(CALL_METHOD);}  }
class C{  public static DayOfWeek firstDayOfWeekInMonth(int year,int month){  int result=fixedFromGregorian(year,month,1) % 7;  if (result < 0) {    result+=7;  }  return DAYS_OF_WEEK[result];}  }
class C{  public boolean isValueVisible(){  return null == valueVisible ? _valueVisible : valueVisible.get();}  }
class C{  public String doInitiatorAliasGet(StorageSystem storage,Initiator initiator) throws Exception {  String initiatorAlias=null;  try {    checkIfProviderSupportsAliasOperations(storage);    CIMObjectPath hwManagementIDSvcPath=_cimPath.getStorageHardwareIDManagementService(storage);    CIMObjectPath shidPath=getSHIDPathForAliasOperation(storage,hwManagementIDSvcPath,initiator);    CIMArgument[] inArgs=_helper.getEMCInitiatorAliasGetArgs(shidPath);    CIMArgument[] outArgs=new CIMArgument[5];    _helper.invokeMethod(storage,hwManagementIDSvcPath,SmisConstants.INITIATOR_ALIAS_GET,inArgs,outArgs);    for (    CIMArgument arg : outArgs) {      if (arg != null && arg.getName().equalsIgnoreCase(SmisConstants.CP_ALIAS_STORAGEID)) {        initiatorAlias=(String)arg.getValue();      }    }  } catch (  WBEMException e) {    _log.error("Problem making SMI-S call: ",e);    throw e;  }catch (  Exception e) {    _log.error("Unexpected error: EMCInitiatorAliasGet failed.",e);    throw e;  }  return initiatorAlias;}  }
class C{  public SubjectKeyIdentifierExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.SubjectKey_Id;  this.critical=critical.booleanValue();  this.extensionValue=(byte[])value;  DerValue val=new DerValue(this.extensionValue);  this.id=new KeyIdentifier(val);}  }
class C{  @Inline protected final Offset bufferSentinel(int arity){  return bufferLastOffset(arity).plus(BYTES_IN_ADDRESS);}  }
class C{  private float drawRun(Canvas c,int start,int limit,boolean runIsRtl,float x,int top,int y,int bottom,boolean needWidth){  if ((mDir == Layout.DIR_LEFT_TO_RIGHT) == runIsRtl) {    float w=-measureRun(start,limit,limit,runIsRtl,null);    handleRun(start,limit,limit,runIsRtl,c,x + w,top,y,bottom,null,false);    return w;  }  return handleRun(start,limit,limit,runIsRtl,c,x,top,y,bottom,null,needWidth);}  }
class C{  private boolean isRecordExists(String tableName,String columnName,String checkCondition){  String vendor=m_target.getVendor();  String catalog=m_target.getCatalog();  String schema=m_target.getSchema();  boolean isRecordsFound=false;  Statement stmt=m_target.setStatement();  String sqlCommand=s_dbEngine.sqlAction_checkRecordExists(vendor,catalog,schema,tableName,columnName,checkCondition);  ResultSet rs=m_target.executeQuery(stmt,sqlCommand);  if (m_target.getResultSetNext(rs)) {    int numberOfRecords=m_target.getResultSetInt(rs,"NumberOfRecords");    if (numberOfRecords > 0)     isRecordsFound=true;  }  m_target.releaseResultSet(rs);  m_target.releaseStatement(stmt);  return isRecordsFound;}  }
class C{  private JettyResponseListener doConnect(final ConnectOptions opts) throws Exception {  return mgr.doConnect(opts);}  }
class C{  protected boolean shardAvailable(@Nullable IndexShard shard){  return shard != null && shard.canIndex() && CAN_UPDATE_INDEX_BUFFER_STATES.contains(shard.state());}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  public List<N> nodes(@Nullable Object key,int cnt,@Nullable Collection<N> inc){  return nodes(key,cnt,inc,null);}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  private void initFromAttributes(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.JCropImageView,defStyleAttr,defStyleRes);  mCropType=a.getInt(R.styleable.JCropImageView_cropType,mCropType);  mCropAlign=a.getInt(R.styleable.JCropImageView_cropAlign,mCropAlign);  a.recycle();  setCropType(mCropType);}  }
class C{  public final void printLatin1Old(String string) throws IOException {  if (string == null) {    string="null";  }  int length=string.length();  int i=0;  do {    int sublen=Math.min(length - i,128);    require(sublen);    int end=i + sublen;    byte[] buffer=buffer();    int offset=offset();    for (; i < end; i++) {      char ch=string.charAt(i);      if (ch < 0x100) {        buffer[offset++]=(byte)ch;      } else {        buffer[offset++]=LATIN1[ch];      }    }    offset(offset);  } while (i < length);}  }
class C{  private void showLocalVideo(String localPath){  Intent intent=new Intent(Intent.ACTION_VIEW);  intent.setDataAndType(Uri.fromFile(new File(localPath)),"video/mp4");  startActivity(intent);  finish();}  }
class C{  public boolean isTpmLogReliable(){  return tpmLogReliable;}  }
class C{  public boolean interactFirst(EntityPlayer par1EntityPlayer){  if (this.riddenByEntity != null && this.riddenByEntity instanceof EntityPlayer && this.riddenByEntity != par1EntityPlayer) {    return true;  } else {    if (!this.worldObj.isRemote) {      par1EntityPlayer.mountEntity(this);    }    return true;  }}  }
class C{  public VTableExcelAdapter(VTable table){  this.table=table;  table.registerKeyboardAction(this,CMD_Copy,KS_copy,JComponent.WHEN_FOCUSED);  table.registerKeyboardAction(this,CMD_CopyWithHeaders,KS_copyWithHeader,JComponent.WHEN_FOCUSED);  system=Toolkit.getDefaultToolkit().getSystemClipboard();}  }
class C{  private void enqueueFinalUpdate(){  updateHandler.removeMessages(MSG_FINAL_UPDATE);  updateHandler.sendMessageDelayed(updateHandler.obtainMessage(MSG_FINAL_UPDATE,lastStartId,-1),5 * MINUTE_IN_MILLIS);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_main);  readContacts();}  }
class C{  void replace(DocumentFilter.FilterBypass fb,int offset,int length,String string,AttributeSet attr) throws BadLocationException {  if (!getAllowsInvalid() && length == 0 && string != null && string.length() == 1 && toggleSignIfNecessary(fb,offset,string.charAt(0))) {    return;  }  super.replace(fb,offset,length,string,attr);}  }
class C{  private TrieNode lookupTrieNode(TrieNode rootNode,String userContext,int index){  if (index >= userContext.length()) {    rootNode=(rootNode == mRoot) ? null : rootNode;    return rootNode;  }  int curContent=(int)userContext.charAt(index);  if (rootNode.hasChild(curContent)) {    return lookupTrieNode(rootNode.getChild(curContent),userContext,index + 1);  } else   if (rootNode == mRoot) {    return lookupTrieNode(rootNode,userContext,index + 1);  } else {    return lookupTrieNode(rootNode.getVineNode(),userContext,index);  }}  }
class C{  public static void closeSilently(Statement stat){  if (stat != null) {    try {      stat.close();    } catch (    SQLException e) {    }  }}  }
class C{  public boolean contains(BoundingBox bounds){  if (!isValid())   return true;  if (min.x > bounds.min.x)   return false;  if (min.y > bounds.min.y)   return false;  if (min.z > bounds.min.z)   return false;  if (max.x < bounds.max.x)   return false;  if (max.y < bounds.max.y)   return false;  if (max.z < bounds.max.z)   return false;  return true;}  }
class C{  public boolean hasNext() throws X {  if (isClosed()) {    return false;  }  boolean result=wrappedIter.hasNext();  if (!result) {    close();  }  return result;}  }
class C{  public void forceSetActivations(double[] inputs){  for (int i=0, n=size(); i < n; i++) {    if (i >= inputs.length) {      break;    }    neuronList.get(i).forceSetActivation(inputs[i]);  }}  }
class C{  public Vector3(float[] xyz) throws IllegalArgumentException {  if (xyz.length != 3) {    throw new IllegalArgumentException("Trying to create 3 vector from array of length: " + xyz.length);  }  this.x=xyz[0];  this.y=xyz[1];  this.z=xyz[2];}  }
class C{  public Builder with(@StringRes int resId){  if (context == null) {    throw new IllegalStateException("Context should be set first.");  }  this.apiKey=context.getString(resId);  return this;}  }
class C{  public final static String encodeHTML(String s){  final String CR="<BR>";  if (htmlEntityTable == null) {    buildEntityTable();  }  if (s == null) {    return "";  }  StringBuffer sb=new StringBuffer(s.length() * 2);  char ch;  for (int i=0; i < s.length(); ++i) {    ch=s.charAt(i);    if ((ch >= 63 && ch <= 90) || (ch >= 97 && ch <= 122) || (ch == ' ')) {      sb.append(ch);    } else     if (ch == '\n') {      sb.append(CR);    } else {      String chEnc=encodeSingleChar(String.valueOf(ch));      if (chEnc != null) {        sb.append(chEnc);      } else {        sb.append(ch);      }    }  }  return sb.toString();}  }
class C{  private void drawLifelinePart(DrawHandler drawHandler,final double centerX,final double startY,boolean activeCountIncStart,final double endY,boolean activeCountIncEnd,int activeCount,ListIterator<Line1D> interruptedAreas){  double nextStartY=startY;  boolean drawHead=true;  if (interruptedAreas.hasNext()) {    Line1D area=interruptedAreas.next();    if (area.contains(nextStartY)) {      drawHead=false;      nextStartY=area.getHigh();    } else {      interruptedAreas.previous();    }  }  boolean drawingFinished=false;  boolean drawEnd=false;  double currentEndY;  double currentStartY;  while (!drawingFinished) {    currentStartY=nextStartY;    if (interruptedAreas.hasNext()) {      Line1D area=interruptedAreas.next();      if (area.getLow() < endY) {        currentEndY=area.getLow();        nextStartY=area.getHigh();        if (area.getHigh() > endY) {          drawingFinished=true;          interruptedAreas.previous();        }      } else {        interruptedAreas.previous();        drawingFinished=true;        drawEnd=true;        currentEndY=endY;      }    } else {      drawingFinished=true;      drawEnd=true;      currentEndY=endY;    }    if (activeCount == 0) {      drawHandler.setLineType(LineType.DASHED);      drawHandler.drawLine(centerX,currentStartY,centerX,currentEndY);    } else {      drawHandler.setLineType(LineType.SOLID);      double lineX=centerX - EXECUTIONSPECIFICATION_WIDTH / 2.0;      drawHandler.drawLine(lineX,currentStartY,lineX,currentEndY);      for (int i=0; i < activeCount - 1; i++) {        lineX+=EXECUTIONSPECIFICATION_WIDTH - EXECUTIONSPECIFICATION_OVERLAPP;        drawHandler.drawLine(lineX,currentStartY,lineX,currentEndY);      }      lineX+=EXECUTIONSPECIFICATION_WIDTH;      drawHandler.drawLine(lineX,currentStartY,lineX,currentEndY);      if (drawHead && activeCountIncStart) {        drawHandler.drawLine(lineX - EXECUTIONSPECIFICATION_WIDTH,currentStartY,lineX,currentStartY);      }      if (drawEnd && !activeCountIncEnd) {        drawHandler.drawLine(lineX - EXECUTIONSPECIFICATION_WIDTH,currentEndY,lineX,currentEndY);      }    }    drawHead=false;  }}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Null pointer");  }  testValidity(number);  String string=number.toString();  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  @Override protected IgniteInternalFuture currentFuture() throws IgniteCheckedException {  return ((IgniteFutureImpl)events.future()).internalFuture();}  }
class C{  @Override protected void determineActiveAttributes(){  super.determineActiveAttributes();  this.dashedAttributes.copy(this.getActiveShapeAttributes());  this.dashedAttributes.setOutlineStipplePattern(this.getOutlineStipplePattern());  this.dashedAttributes.setOutlineStippleFactor(this.getOutlineStippleFactor());}  }
class C{  public boolean hasArchiveNotify(){  return hasExtension(ArchiveNotify.class);}  }
class C{  public void testSetProperty(){  ArbitraryPropertySupport instance=(new UnboundBeanImpl()).aps();  instance.setProperty(STRING_PROPERTY,NEW_VALUE);  instance.setProperty(MAPPED_STRING,NEW_VALUE);  assertEquals(NEW_VALUE,instance.getProperty(STRING_PROPERTY));  assertEquals(NEW_VALUE,instance.getProperty(MAPPED_STRING));  assertNull(instance.getProperty(NEW_PROPERTY));  instance.setProperty(NEW_PROPERTY,OLD_VALUE);  assertEquals(OLD_VALUE,instance.getProperty(NEW_PROPERTY));  instance.setProperty(NEW_PROPERTY,NEW_VALUE);  assertEquals(NEW_VALUE,instance.getProperty(NEW_PROPERTY));}  }
class C{  public DeleteSnapshotRequest snapshot(String snapshot){  this.snapshot=snapshot;  return this;}  }
class C{  private Operation forwardRequestAndWait(String serviceSelfLink,Operation op,ServiceHost host) throws Throwable {  OperationLatch syncOp=new OperationLatch(op);  op.setReferer(UriUtils.buildUri(host,"test-host")).setExpiration(Utils.getNowMicrosUtc() + host.getOperationTimeoutMicros());  host.forwardRequest(ServiceUriPaths.DEFAULT_NODE_SELECTOR,serviceSelfLink,op);  return syncOp.awaitOperationCompletion();}  }
class C{  public boolean contains(String value){  return m_values.contains(value);}  }
class C{  public Builder bulkLoader(final Class<? extends BulkLoader> clazz){  return bulkLoader(clazz.getCanonicalName());}  }
class C{  public IonValue oneValue(String text){  IonValue value=null;  Iterator<IonValue> iterator=system().iterate(text);  if (iterator.hasNext()) {    value=iterator.next();    if (iterator.hasNext()) {      IonValue part=iterator.next();      fail("Found unexpected part <" + part + "> in text: "+ text);    }  } else {    fail("No data found in text: " + text);  }  return value;}  }
class C{  protected String locationToUrl(String aLocation) throws MalformedURLException {  String location=aLocation;  if (isUnmarkedFileLocation(aLocation)) {    location=new File(location).toURI().toURL().toString();  } else   if (location.startsWith(JAR_PREFIX) && !location.contains("!")) {    location+="!";  }  return location;}  }
class C{  public static Object decodeToObject(final String encodedObject){  byte[] objBytes=Base64.decode(encodedObject);  java.io.ByteArrayInputStream bais=null;  java.io.ObjectInputStream ois=null;  Object obj=null;  try {    bais=new java.io.ByteArrayInputStream(objBytes);    ois=new java.io.ObjectInputStream(bais);    obj=ois.readObject();  } catch (  java.io.IOException e) {    e.printStackTrace();    obj=null;  }catch (  java.lang.ClassNotFoundException e) {    e.printStackTrace();    obj=null;  } finally {    try {      bais.close();    } catch (    Exception e) {    }    try {      ois.close();    } catch (    Exception e) {    }  }  return obj;}  }
class C{  public CodeViewer(){}  }
class C{  public void disableVM(String hostname,long durationMillis) throws IllegalStateException {  logger.info("Disable VM " + hostname + " for "+ durationMillis+ " millis");  assignableVMs.disableUntil(hostname,System.currentTimeMillis() + durationMillis);}  }
class C{  public void onViewPause(ConditionVariable syncObj){  mGameState.save();  syncObj.open();}  }
class C{  public void addMessageListener(MessageListener listener){  m_notifier.add(listener);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public boolean queryCache(ImageTask imageTask,CubeImageView imageView){  if (null == mImageProvider) {    return false;  }  BitmapDrawable drawable=mImageProvider.getBitmapFromMemCache(imageTask);  if (imageTask.getStatistics() != null) {    imageTask.getStatistics().afterMemoryCache(drawable != null);  }  if (drawable == null) {    return false;  }  if (DEBUG) {    Log.d(Log_TAG,String.format(MSG_TASK_HIT_CACHE,imageTask,drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight()));    if (drawable.getIntrinsicWidth() == 270) {      Log.d(Log_TAG,String.format(MSG_TASK_HIT_CACHE,imageTask,drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight()));    }  }  imageTask.addImageView(imageView);  imageTask.onLoadFinish(drawable,mImageLoadHandler);  return true;}  }
class C{  public boolean deleteStaleSubscriptions(String smisProviderURI){  _log.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  boolean isSuccess=false;  try {    _log.debug("smisProviderURI :{}",smisProviderURI);    CimConnection cimConnection=getSMISProviderConnection(smisProviderURI);    if (null != cimConnection) {      _connectionManager.deleteStaleSubscriptions(cimConnection);      isSuccess=true;    }  } catch (  Exception e) {    _log.error("Delete stale subscription for the SMIS provider {} is failed",smisProviderURI);    _log.error(e.getMessage(),e);  }  _log.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());  return isSuccess;}  }
class C{  public SASJavaExec(String execCommand,String script){  this(execCommand,script,null);}  }
class C{  public _DefinitionTriggerType(final _DefinitionTriggerType_Flag[] flags){  super(flags);}  }
class C{  public void removeListener(final IProjectListener listener){  m_listeners.removeListener(listener);}  }
class C{  public void remove(){  _editor.removeFromContents(this);  cleanup();  active=false;}  }
class C{  public ShowNetworkPreferencesAction(final NetworkPanel networkPanel){  super("Network Preferences...");  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  putValue(SMALL_ICON,ResourceManager.getImageIcon("Prefs.png"));  this.putValue(this.ACCELERATOR_KEY,KeyStroke.getKeyStroke(KeyEvent.VK_COMMA,Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(SHORT_DESCRIPTION,"Show the network preference dialog");}  }
class C{  public boolean isSubscribed(Flow.Subscriber<? super T> subscriber){  Objects.requireNonNull(subscriber);  if (!closed) {synchronized (this) {      BufferedSubscription<T> pred=null, next;      for (BufferedSubscription<T> b=clients; b != null; b=next) {        next=b.next;        if (b.isDisabled()) {          b.next=null;          if (pred == null)           clients=next; else           pred.next=next;        } else         if (subscriber.equals(b.subscriber))         return true; else         pred=b;      }    }  }  return false;}  }
class C{  @Override public int size(){  return size;}  }
class C{  void activateStatusAttribute(String attributeName){  RPEntity entity=entityRef.get();  if (entity == null) {    return;  }  if (!entity.has(attributeName)) {    entity.put(attributeName,0);    entity.notifyWorldAboutChanges();  }}  }
class C{  public List<Map<String,Object>> listLogFiles() throws ApiException {  Object postBody=null;  byte[] postBinaryBody=null;  String path="/v1/system/logs/files".replaceAll("\\{format\\}","json");  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  TypeRef returnType=new TypeRef<List<Map<String,Object>>>(){  };  return apiClient.invokeAPI(path,"GET",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,returnType);}  }
class C{  public BalanceAdjustmentNotification(final NotificationType type,final Account account,final Amount amount){  super(type);  this.account=account;  this.amount=amount;}  }
class C{  public DoStatement newDoStatement(){  return new DoStatement(this);}  }
class C{  public TextField(String text,int columns){  super(text,1,columns);  setUIID("TextField");  setSingleLineTextArea(true);}  }
class C{  public FloatDict(BufferedReader reader){  String[] lines=PApplet.loadStrings(reader);  keys=new String[lines.length];  values=new float[lines.length];  for (int i=0; i < lines.length; i++) {    String[] pieces=PApplet.split(lines[i],'\t');    if (pieces.length == 2) {      keys[count]=pieces[0];      values[count]=PApplet.parseFloat(pieces[1]);      count++;    }  }}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5){  return construct(e1,e2,e3,e4,e5);}  }
class C{  public boolean print_graph(){  return soot.PhaseOptions.getBoolean(options,"print-graph");}  }
class C{  public void testFillDataPoint_pace_zeroSpeed(){  chartFragment.setReportSpeed(false);  MyTracksLocation myTracksLocation=TrackStubUtils.createMyTracksLocation();  myTracksLocation.setSpeed(0);  double[] point=fillDataPointTestHelper(myTracksLocation);  assertEquals(0.0,point[ChartView.PACE_SERIES + 1]);}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_unwrap_ByteBuffer$ByteBuffer_03(){  String host="new host";  int port=8080;  ByteBuffer[] bbA={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  ByteBuffer[] bbN={ByteBuffer.allocate(100),null,ByteBuffer.allocate(100)};  ByteBuffer[] bbAN=null;  ByteBuffer bb=ByteBuffer.allocate(10);  ByteBuffer bN=null;  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.unwrap(bN,bbA);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.unwrap(bb,bbAN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.unwrap(bb,bbN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.unwrap(bN,bbAN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iobe) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }}  }
class C{  public Cuboid contract(){  return this.contract(CuboidDirection.Down).contract(CuboidDirection.South).contract(CuboidDirection.East).contract(CuboidDirection.Up).contract(CuboidDirection.North).contract(CuboidDirection.West);}  }
class C{  public void newRegSegment(){  nextreg=max_locals;}  }
class C{  public ListIterator<AbstractInsnNode> iterator(){  return iterator(0);}  }
class C{  private void executeDownload(State state) throws StopRequestException {  state.resetBeforeExecute();  setupDestinationFile(state);  if (originalDownloadInfo.shouldAllowTarUpdate(state.mimeType)) {    state.totalBytes=UNKNOWN_BYTE_SIZE;  }  if (downloadAlreadyFinished(state)) {    LLog.i("Skipping initiating request for download " + originalDownloadInfo.getId() + "; already completed");    return;  }  while (state.redirectionCount++ < Constants.MAX_REDIRECTS) {    HttpURLConnection conn=null;    try {      checkConnectivity();      conn=(HttpURLConnection)state.url.openConnection();      conn.setInstanceFollowRedirects(false);      conn.setConnectTimeout(DEFAULT_TIMEOUT);      conn.setReadTimeout(DEFAULT_TIMEOUT);      addRequestHeaders(state,conn);      final int responseCode=conn.getResponseCode();switch (responseCode) {case HTTP_OK:        if (state.continuingDownload) {          throw new StopRequestException(DownloadStatus.CANNOT_RESUME,"Expected partial, but received OK");        }      processResponseHeaders(state,conn);    transferData(state,conn);  return;case HTTP_PARTIAL:if (!state.continuingDownload) {  throw new StopRequestException(DownloadStatus.CANNOT_RESUME,"Expected OK, but received partial");}transferData(state,conn);return;case HTTP_MOVED_PERM:case HTTP_MOVED_TEMP:case HTTP_SEE_OTHER:case HTTP_TEMP_REDIRECT:final String location=conn.getHeaderField("Location");state.url=new URL(state.url,location);if (responseCode == HTTP_MOVED_PERM) {state.requestUri=state.url.toString();}continue;case HTTP_REQUESTED_RANGE_NOT_SATISFIABLE:throw new StopRequestException(DownloadStatus.CANNOT_RESUME,"Requested range not satisfiable");case HTTP_UNAVAILABLE:parseRetryAfterHeaders(state,conn);throw new StopRequestException(HTTP_UNAVAILABLE,conn.getResponseMessage());case HTTP_INTERNAL_ERROR:throw new StopRequestException(HTTP_INTERNAL_ERROR,conn.getResponseMessage());default :StopRequestException.throwUnhandledHttpError(responseCode,conn.getResponseMessage());}} catch (UnknownHostException e) {throw new StopRequestException(HTTP_NOT_FOUND,e);}catch (IOException e) {throw new StopRequestException(HTTP_DATA_ERROR,e);} finally {if (conn != null) {conn.disconnect();}}}throw new StopRequestException(DownloadStatus.TOO_MANY_REDIRECTS,"Too many redirects");}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.ANNOTATABLE_ELEMENT__ANNOTATIONS:    getAnnotations().clear();  getAnnotations().addAll((Collection<? extends Annotation>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private void calculateDiffuseSkylight(@Nonnull Cube cube){  int cubeX=cube.getX();  int cubeY=cube.getY();  int cubeZ=cube.getZ();  for (int x=-2; x <= 2; x++) {    for (int z=-2; z <= 2; z++) {      for (int y=2; y >= -2; y--) {        if (x != 0 || y != 0 || z != 0) {          getCube(x + cubeX,y + cubeY,z + cubeZ);        }      }    }  }  this.worldServer.getFirstLightProcessor().diffuseSkylight(cube);}  }
class C{  public boolean isValid(){  return (isSet(RFC2822Headers.DATE) && isSet(RFC2822Headers.TO) && isSet(RFC2822Headers.FROM));}  }
class C{  public BeaconAnalysis analyzeFrame(ColorBlobDetector redDetector,ColorBlobDetector blueDetector,Mat img,Mat gray,ScreenOrientation orientation){  if (this.bounds == null)   this.bounds=new Rectangle(img.size());switch (method) {case REALTIME:    blueDetector.process(img);  redDetector.process(img);return BeaconAnalyzer.analyze_REALTIME(redDetector.getContours(),blueDetector.getContours(),img,orientation,this.debug);case FAST:case DEFAULT:default :return BeaconAnalyzer.analyze_FAST(redDetector,blueDetector,img,gray,orientation,this.bounds,this.debug);case COMPLEX:blueDetector.process(img);redDetector.process(img);return BeaconAnalyzer.analyze_COMPLEX(redDetector.getContours(),blueDetector.getContours(),img,gray,orientation,this.bounds,this.debug);}}  }
class C{  public static void hayErrorExcepcion(DocumentoIER dier) throws Excepcion {  if (hayError(dier)) {    InformacionError ie=dier.getInformacionError();    Excepcion e=new Excepcion("el documento tiene un codigo de error: " + ie.getCodigo().get());    e.setCodigo(new Integer(ie.getCodigo().get()).intValue());    e.setDetalle(ie.getDetalle().get());    e.setDescripcion(ie.getDescripcion().get());    throw e;  }}  }
class C{  public NodeModel loadXml(String file,boolean removeXmlNamespace){  try {    if (removeXmlNamespace) {      InputStream forEncodingInput=FileHelper.getInputStream(file);      String encoding=XMLHelper.getXMLEncoding(forEncodingInput);      forEncodingInput.close();      InputStream input=FileHelper.getInputStream(file);      String xml=IOHelper.toString(encoding,input);      xml=XMLHelper.removeXmlns(xml);      input.close();      return NodeModel.parse(new InputSource(new StringReader(xml.trim())));    } else {      return NodeModel.parse(new InputSource(FileHelper.getInputStream(file)));    }  } catch (  Exception e) {    throw new IllegalArgumentException("loadXml error,file:" + file,e);  }}  }
class C{  public void close() throws IOException {  if (mOutput != null) {    mOutput.close();  }}  }
class C{  private static void printPortfolioMenuHelp(){  System.out.println("<command> (<abbreviated command>) : <description>");  System.out.println("-------------------------------------------------");  System.out.println("list (l)      : list portfolios");  System.out.println("show (s)      : show portfolio");  System.out.println("create (c)    : create new portfolio");  System.out.println("update (u)    : update portfolio name or currency");  System.out.println("delete (d)    : delete portfolio");  System.out.println("back (b)      : go back to previous menu");  System.out.println("positions (p) : go to the positions menu");  System.out.println("help (h)      : help");  System.out.println("quit (q)      : quit");  System.out.println("");}  }
class C{  @Override public int nextInt(){  return (int)nextLong(items);}  }
class C{  public static int E2BIG(){  return Errno.E2BIG.intValue();}  }
class C{  public CustomViewBehind(Context context){  this(context,null);}  }
class C{  @SuppressWarnings("unchecked") protected void notifyInstanceLoaded(InstanceEvent e){  Vector<InstanceListener> l;synchronized (this) {    l=(Vector<InstanceListener>)m_listeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptInstance(e);    }    m_dataSet=null;  }}  }
class C{  public void removePage(int pageNum){  pages.remove(pageNum);}  }
class C{  void resourceMessage(Throwable ex){  log.printLines(PrefixKind.JAVAC,"msg.resource");  ex.printStackTrace(log.getWriter(WriterKind.NOTICE));}  }
class C{  public void testMinShouldMatchOptional() throws Exception {  assertQ("test minShouldMatch (top level optional terms only)",req("q","stocks oil gold","qf","text_sw","mm","50%","defType","edismax"),"*[count(//doc)=4]");  assertQ("test minShouldMatch (top level optional and negative terms mm=50%)",req("q","stocks oil gold -stockade","qf","text_sw","mm","50%","defType","edismax"),"*[count(//doc)=3]");  assertQ("test minShouldMatch (top level optional and negative terms mm=100%)",req("q","stocks gold -stockade","qf","text_sw","mm","100%","defType","edismax"),"*[count(//doc)=1]");  assertQ("test minShouldMatch (top level required terms only)",req("q","stocks AND oil","qf","text_sw","mm","50%","defType","edismax"),"*[count(//doc)=1]");  assertQ("test minShouldMatch (top level optional and required terms)",req("q","oil gold +stocks","qf","text_sw","mm","50%","defType","edismax"),"*[count(//doc)=3]");  assertQ("test minShouldMatch (top level optional with explicit OR and parens)",req("q","(snake OR stocks) oil","qf","text_sw","mm","100%","defType","edismax"),"*[count(//doc)=2]");  assertQ("test minShouldMatch (top level optional with explicit OR without parens)",req("q","snake OR stocks oil","qf","text_sw","q.op","OR","mm","100%","defType","edismax"),"*[count(//doc)=0]");  assertQ("test minShouldMatch (top level optional with explicit OR without parens)",req("q","snake OR stocks oil","qf","text_sw","q.op","AND","mm","100%","defType","edismax"),"*[count(//doc)=0]");  assertQ("test minShouldMatch=1<-1 with explicit OR, one impossible clause, and no explicit q.op",req("q","barbie OR (hair AND nonexistentword)","qf","text_sw","mm","1<-1","defType","edismax"),"*[count(//doc)=3]");}  }
class C{  public AppLauncher args(String... args){  this.args.addAll(Arrays.asList(args));  return this;}  }
class C{  protected void writeCsvHeader(final JTable table,final Writer out,final char csvSeparator) throws IOException {  final int columnCount=table.getColumnModel().getColumnCount();  final String eol=System.getProperty("line.separator");  if (table.getName() != null) {    String title=formatCsv(table.getName(),csvSeparator);    if (title.startsWith("ID")) {      final String tmp='"' + title + '"';      title=tmp;    }    out.write(title);    out.write(eol);  }  String text;  for (int i=0; i < columnCount; i++) {    text=String.valueOf(table.getColumnModel().getColumn(i).getHeaderValue());    text=formatCsv(text,csvSeparator);    if (i == 0 && text.startsWith("ID")) {      out.write('"' + text + '"');    } else {      out.write(text);    }    if (i < columnCount - 1) {      out.write(csvSeparator);    }  }  out.write(eol);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static int abs(int n){  int mask=n >> 31;  return (mask + n) ^ mask;}  }
class C{  public void testBasicLocking() throws Exception {  File lockFile=new File("testBasicLocking.lock");  if (lockFile.exists())   lockFile.delete();  assertFalse("Lockfile may not exist before test",lockFile.exists());  WriteLock wl=new WriteLock(lockFile);  for (int i=0; i < 100; i++) {    boolean locked=wl.acquire();    assertTrue("Acquire must succeed",locked);    assertTrue("File must be locked",wl.isLocked());    assertTrue("File must exist",lockFile.exists());    wl.release();    assertFalse("File must not be locked",wl.isLocked());  }  WriteLock wl2=new WriteLock(lockFile);  boolean locked=wl2.acquire();  assertTrue("Acquire must succeed",locked);  assertTrue("File must be locked",wl2.isLocked());  wl2.release();  assertFalse("File must not be locked",wl2.isLocked());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node newChild;  Node replacedNode;  int length;  String childName;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  length=(int)childList.getLength();  oldChild=childList.item(1);  newChild=doc.createElement("newChild");  replacedNode=employeeNode.replaceChild(newChild,oldChild);  childName=replacedNode.getNodeName();  if (equals(6,length)) {    assertEquals("nowhitespace","name",childName);  } else {    assertEquals("whitespace","employeeId",childName);  }}  }
class C{  public boolean reportIfNeeded(){  if (disabled)   return false;  if (counter.get() == 0) {synchronized (this) {      if (counter.get() == 0) {        startTime=now();        lastReport=startTime;      }    }  }  counter.incrementAndGet();  long curTime=now();  if (curTime - lastReport > interval) {synchronized (this) {      if (curTime - lastReport > interval) {        lastReport=curTime;        long lapsedSeconds=(curTime - startTime) / 1000;        System.out.printf("%s %d at %.2f/s\n",message,counter.get(),counter.doubleValue() / lapsedSeconds);        return true;      }    }  }  return false;}  }
class C{  public ExclusiveLockManager(){  this(false);}  }
class C{  public final void printSubpopulation(final EvolutionState state,final int log,final int verbosity){  printSubpopulation(state,log);}  }
class C{  public void xMidYMid() throws ParseException {  align=SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMIDYMID;}  }
class C{  public void removeController(Controller controller){  boolean contain=controllers.contains(controller);  System.out.println(contain);  controllers.remove(controller);}  }
class C{  public Long deleteFileOrFolder(String SID,Long fileExplorerItemId) throws AxisFault {  return this.geFileServiceProxy().deleteFileOrFolder(SID,fileExplorerItemId);}  }
class C{  public Solution(double[] objectives){  this(0,objectives.length,0);  for (int i=0; i < objectives.length; i++) {    setObjective(i,objectives[i]);  }}  }
class C{  public SyncTutoManager(Activity activity,boolean forceDisplay){  super(activity);  this.forceDisplay=forceDisplay;}  }
class C{  protected void notifyScrollingListenersAboutEnd(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingFinished(this);  }}  }
class C{  public synchronized void close(){  if (!this.mIsClosed) {    this.mSocket.close();    this.mIsClosed=true;  }}  }
class C{  public final void testRead03() throws IOException {  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      dis.on(false);      for (int i=0; i < MY_MESSAGE_LEN; i++) {        dis.read();      }      assertTrue(Arrays.equals(dis.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[ii] + "_NU")));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public void addLayoutComponent(String name,Component c){}  }
class C{  public ToStringBuilder append(String fieldName,float[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  private void updateUsage(Offer offer){  Usage usage=usageModel.setLimitedUsage(offer);  view.displayNewUsage(usage);}  }
class C{  public static Response createCreatePermissionErrorResponse(char errorCode){  return createPermissionErrorResponse(errorCode,null);}  }
class C{  private void init(){  getContentPane().add(barPanel,BorderLayout.CENTER);  getContentPane().add(confirmPanel,BorderLayout.SOUTH);  confirmPanel.addActionListener(this);}  }
class C{  public Builder deleteExtensionField(String urn,String fieldName){  deleteFields.add(urn + "." + fieldName);  return this;}  }
class C{  private static void extractRefFromEnd(byte[] raw,final PdfObject pdfObject,PdfFileReader objectReader){  String objectRef;  int ptr=0;  final int len=raw.length;  for (int jj=0; jj < len; jj++) {    if (raw[jj] >= '0' && raw[jj] <= '9') {      ptr=jj;      jj=len;    }  }  int end=ptr;  while ((raw[end] >= '0' && raw[end] <= '9') || raw[end] == ' ' || raw[end] == 10 || raw[end] == 13 || raw[end] == 9) {    end++;  }  if (raw[end] == 'o' && raw[end + 1] == 'b' && raw[end + 2] == 'j') {    objectRef=new String(raw,0,end) + 'R';    int newArrayLen=raw.length - end - 4;    byte[] newArray=new byte[newArrayLen];    System.arraycopy(raw,end + 4,newArray,0,newArrayLen);    raw=newArray;    pdfObject.setRef(objectRef);    Dictionary.readDictionaryFromRefOrDirect(pdfObject,objectRef,0,raw,-1,objectReader);  }}  }
class C{  public MaxPQ(int initCapacity,Comparator<Key> comparator){  this.comparator=comparator;  pq=(Key[])new Object[initCapacity + 1];  n=0;}  }
class C{  public String resolveWorkspacePath(String handleId,String relativePath){  return fileHandler.append(getWorkspaceDirectory(handleId),relativePath);}  }
class C{  public View findView(int position,int dataSize){  if (isInHeader(position))   return getHeaderView(position);  if (isInFooter(position,dataSize)) {    int headerSize=getHeaderViewSize();    return getFooterView(position - headerSize - dataSize);  }  return null;}  }
class C{  public static String fromByteArray(byte[] bytes){  return new String(asCharArray(bytes));}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  int n=in.read(b,off,len);  if (n == -1) {    throwIfFalseEOF();  } else {    bytesRead+=n;  }  return n;}  }
class C{  private String trimUrl(String uri){  if (uri == null)   return "";  if (uri.endsWith("/"))   uri=uri.substring(0,uri.length() - 1);  return uri;}  }
class C{  private Field(){  vmField=null;}  }
class C{  public boolean isConcrete(){  return !isPhantom() && !isAbstract() && !isNative();}  }
class C{  public void addConnection(int registryID,BlockCoords coords){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix11.class,args);}  }
class C{  public void testSyncCancelButton(){  EventBusIdlingResource<SyncCanceledEvent> syncCanceledResource=new EventBusIdlingResource<>(UUID.randomUUID().toString(),mEventBus);  expectVisibleSoon(viewWithId(R.id.action_cancel));  click(viewWithId(R.id.action_cancel));  Espresso.registerIdlingResources(syncCanceledResource);  expectVisibleWithin(90000,viewWithText("Guest User"));  click(viewWithText("Guest User"));  waitForProgressFragment();  expectVisibleSoon(viewWithText("ALL PRESENT PATIENTS"));  expectVisibleSoon(viewWithText(LOCATION_NAME));}  }
class C{  public boolean isTransacted(){  return transacted;}  }
class C{  public void showSecondaryMenu(){  mSlidingMenu.showSecondaryMenu();}  }
class C{  public E removeFirst(){  E first=getFirst();  removeKey(first);  return first;}  }
class C{  protected Anonymous_moreCode_1_Impl(){  super();}  }
class C{  public final boolean compareAndSet(long expect,long update){  return unsafe.compareAndSwapLong(this,valueOffset,expect,update);}  }
class C{  public SIPHeader parse() throws ParseException {  SupportedList supportedList=new SupportedList();  if (debug)   dbg_enter("SupportedParser.parse");  try {    headerName(TokenTypes.SUPPORTED);    while (lexer.lookAhead(0) != '\n') {      this.lexer.SPorHT();      Supported supported=new Supported();      supported.setHeaderName(SIPHeaderNames.SUPPORTED);      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      supported.setOptionTag(token.getTokenValue());      this.lexer.SPorHT();      supportedList.add(supported);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        supported=new Supported();        this.lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        supported.setOptionTag(token.getTokenValue());        this.lexer.SPorHT();        supportedList.add(supported);      }    }  }  finally {    if (debug)     dbg_leave("SupportedParser.parse");  }  return supportedList;}  }
class C{  public boolean disableVMByVMId(String vmID,long durationMillis) throws IllegalStateException {  final String hostname=assignableVMs.getHostnameFromVMId(vmID);  if (hostname == null)   return false;  disableVM(hostname,durationMillis);  return true;}  }
class C{  protected Ellipse2D(){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:43.979 -0500",hash_original_method="7454800965A05A4B5CEDE9BB116D75F0",hash_generated_method="CEA7B09F6E6015D5ADB3B33A9BAFCC45") public ComparisonFailure(String message,String expected,String actual){  super(message);  fExpected=expected;  fActual=actual;}  }
class C{  public int verticalSubframes(){  double value=Math.abs((nw_lat - se_lat) / subframeLatInterval);  int lower=(int)value;  int upper=lower + 1;  if (upper - value < .000001) {    return upper;  } else   return lower;}  }
class C{  @Override protected void kNNdistanceAdjustment(MkMaxEntry entry,Map<DBID,KNNList> knnLists){  MkMaxTreeNode<O> node=getNode(entry);  double knnDist_node=0.;  if (node.isLeaf()) {    for (int i=0; i < node.getNumEntries(); i++) {      MkMaxEntry leafEntry=node.getEntry(i);      leafEntry.setKnnDistance(knnLists.get(leafEntry.getRoutingObjectID()).getKNNDistance());      knnDist_node=Math.max(knnDist_node,leafEntry.getKnnDistance());    }  } else {    for (int i=0; i < node.getNumEntries(); i++) {      MkMaxEntry dirEntry=node.getEntry(i);      kNNdistanceAdjustment(dirEntry,knnLists);      knnDist_node=Math.max(knnDist_node,dirEntry.getKnnDistance());    }  }  entry.setKnnDistance(knnDist_node);}  }
class C{  public static void modifyRules(List<Rule> rules) throws AdeInternalException {  ModifyRulesAtomic atomicUpdate=new ModifyRulesAtomic(rules);  boolean success=ExtDataStoreUtils.executeAtomicTransaction(atomicUpdate);  if (!success) {    logger.error("An error occurred while trying to modify " + RULES_TABLE + " table.");    throw new AdeInternalException("An error occurred while trying to modify " + RULES_TABLE + " table.");  }}  }
class C{  public final String readUTF() throws IOException {  return decodeUTF(readUnsignedShort());}  }
class C{  public int compareTo(Point2D that){  if (this.y < that.y)   return -1;  if (this.y > that.y)   return +1;  if (this.x < that.x)   return -1;  if (this.x > that.x)   return +1;  return 0;}  }
class C{  <T>void addFunction(BindingAmp<T> binding){  Class<T> type=(Class)binding.key().rawClass();  addBinding(type,binding);}  }
class C{  @Override public Assignment sample(){  if (!samples.isEmpty()) {    int selection=sampler.nextInt(samples.size());    Assignment selected=samples.get(selection);    return selected;  } else {    log.warning("distribution has no samples");    return new Assignment();  }}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener l){  if (listeners == null) {    return;  }  if (listeners.contains(l)) {    listeners.remove(l);  }}  }
class C{  private void onDelegateException(RuntimeException e){  if (!isClientOrTransientError(e) || isProtocolViolationError(e)) {    unrecoverableErrorsOccurred=true;  } else   if (!isAckFailureMuted()) {    ackFailure();  }  if (onError != null) {    onError.run();  }  throw e;}  }
class C{  public ElideResponse patch(String contentType,String accept,String path,String jsonApiDocument,Object opaqueUser){  return this.patch(contentType,accept,path,jsonApiDocument,opaqueUser,SecurityMode.SECURITY_ACTIVE);}  }
class C{  public void p2ant(Action<P2AntRunner> antModifier){  this.antModifier=Objects.requireNonNull(antModifier);}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4){  return construct(e1,e2,e3,e4);}  }
class C{  public int capacity(){  return value.length;}  }
class C{  @Override public void terminateEmrCluster(AmazonElasticMapReduceClient emrClient,String clusterId,boolean overrideTerminationProtection){  if (overrideTerminationProtection) {    emrClient.setTerminationProtection(new SetTerminationProtectionRequest().withJobFlowIds(clusterId).withTerminationProtected(false));  }  emrClient.terminateJobFlows(new TerminateJobFlowsRequest().withJobFlowIds(clusterId));}  }
class C{  public Object object(){  if (null == m_obj)   setObject(new Double(m_val));  return m_obj;}  }
class C{  private static LocalDateTime add(LocalDateTime t,int val,String unit){  ChronoUnit uu=CALENDAR_UNITS.get(unit);  if (null == uu) {    throw new IllegalArgumentException("Adding Unit not recognized: " + unit);  }  return t.plus(val,uu);}  }
class C{  public void outputIndex(PrintWriter writer){  writer.println("<html>");  printDocXMLTitle(writer,BeastParserDoc.INDEX_HTML);  writer.println("<p>");  writer.println("The following is a list of generic types that elements represent in a beast file.<br>");  writer.println("</p>");  for (  Class requiredType : requiredTypes) {    if (requiredType != Object.class) {      String name=ClassComparator.getName(requiredType);      System.out.println("  outputting HTML for generic type " + name);      ArrayList<String> matchingParserNames=new ArrayList<String>();      Iterator i=parser.getParsers();      while (i.hasNext()) {        XMLObjectParser xmlParser=(XMLObjectParser)i.next();        Class returnType=xmlParser.getReturnType();        if (returnType == null) {          System.out.println("find null Class for parser : " + xmlParser.getParserName());        } else         if (requiredType.isAssignableFrom(returnType)) {          if (matchingParserNames.size() == 0) {            writer.println("<div id=\"" + name + "\"><h2>"+ name+ "</h2>");            writer.println("<p>");            writer.println("Elements of this type include:");            writer.println("</p>");          }          if (!matchingParserNames.contains(xmlParser.getParserName())) {            matchingParserNames.add(xmlParser.getParserName());            writer.println("<div id=\"" + xmlParser.getParserName() + "\" class=\"element\">");            writer.println("    <span class=\"elementname\"><a href=\"" + BeastParserDoc.DETAIL_HTML + "#"+ xmlParser.getParserName()+ "\"> <h3>&lt;"+ xmlParser.getParserName()+ "&gt;</h3></a></span>");            writer.println("    <div class=\"description\"><b>Description:</b><br>");            writer.println(xmlParser.getParserDescription());            writer.println("    </div>");            writer.println("  </div>");            writer.println("<p/>");          }        }      }      if (matchingParserNames.size() > 0)       writer.println("</div>");      writer.println("<p/>");    }  }  writer.println("</body>");  writer.println("</html>");}  }
class C{  ScheduledFutureTask(Callable<V> callable,long ns){  super(callable);  this.time=ns;  this.period=0;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  public void closeAndDeleteSilently(){  if (file != null) {    closeFileSilently();    try {      FileUtils.tryDelete(fileName);    } catch (    Exception e) {    }  }}  }
class C{  final byte[] compute(byte type,ByteBuffer bb,boolean isSimulated){  if (macAlg.size == 0) {    return nullMAC;  }  if (!isSimulated) {    byte[] additional=acquireAuthenticationBytes(type,bb.remaining());    mac.update(additional);  }  mac.update(bb);  return mac.doFinal();}  }
class C{  public WKTWriter(){}  }
class C{  private ComputeState createComputeHost() throws Throwable {  ComputeState computeState=new ComputeState();  computeState.id=UUID.randomUUID().toString();  computeState.documentSelfLink=computeState.id;  computeState.descriptionLink=this.computeHostDescription.documentSelfLink;  computeState.resourcePoolLink=this.resourcePool.documentSelfLink;  computeState.adapterManagementReference=getAdapterManagementReference();  ComputeState returnState=TestUtils.doPost(this.host,computeState,ComputeState.class,UriUtils.buildUri(this.host,ComputeService.FACTORY_LINK));  return returnState;}  }
class C{  public boolean engineIsCertificateEntry(String alias){  boolean isCert=false;  Object entry=entries.get(alias.toLowerCase(Locale.ENGLISH));  if (entry instanceof TrustedCertEntry) {    isCert=true;  }  return isCert;}  }
class C{  public void fieldModified(ModificationWatchpointEvent event){  MWP mwp=(MWP)event.request().getProperty("executor");  mwp.fieldModified(event);}  }
class C{  public String binsTipText(){  return "Number of bins.";}  }
class C{  private void evalModel(Map<String,ClassificationResult> resultMap) throws Exception {  System.out.println("Starting eval Model");  System.out.println("Tweets: " + tweetList.size());  double[][] matrix=new double[3][3];  Map<String,Integer> classValue=new HashMap<String,Integer>();  classValue.put("positive",0);  classValue.put("neutral",1);  classValue.put("negative",2);  Map<String,Integer> resultMapToPrint=new HashMap<String,Integer>();  for (  Map.Entry<String,ClassificationResult> tweet : resultMap.entrySet()) {    String tweetID=tweet.getKey();    ClassificationResult senti=tweet.getValue();    double[] useSentiArray={0,0,0};    for (int i=0; i < 3; i++) {      useSentiArray[i]=(senti.getResultDistribution()[i]);    }    int useSenti=1;    if (useSentiArray[0] > useSentiArray[1] && useSentiArray[0] > useSentiArray[2]) {      useSenti=0;    }    if (useSentiArray[2] > useSentiArray[0] && useSentiArray[2] > useSentiArray[1]) {      useSenti=2;    }    resultMapToPrint.put(tweetID,useSenti);    if (!tweet.getValue().getTweet().getSentiment().equals("unknwn")) {      Integer actualSenti=classValue.get(tweet.getValue().getTweet().getSentiment());      matrix[actualSenti][useSenti]++;    }  }  if (matrix.length != 0) {    System.out.println(matrix[0][0] + " | " + matrix[0][1]+ " | "+ matrix[0][2]);    System.out.println(matrix[1][0] + " | " + matrix[1][1]+ " | "+ matrix[1][2]);    System.out.println(matrix[2][0] + " | " + matrix[2][1]+ " | "+ matrix[2][2]);    score(matrix);  }  printResultToFile(resultMapToPrint);}  }
class C{  public static ValueLobDb createSmallLob(int type,byte[] small,long precision){  return new ValueLobDb(type,small,precision);}  }
class C{  public void testOfferNull(){  try {    LinkedBlockingQueue q=new LinkedBlockingQueue(1);    q.offer(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  private void maybeAttachFragment(View rootView,SimpleFragment fragment){  SimpleFragmentContainerKey key=(SimpleFragmentContainerKey)fragment.getKey();  if (rootView != null) {    attachFragment(rootView,fragment);    attachedKeys.add(key);  } else {    fragmentsPendingAttach.put(key,fragment);  }}  }
class C{  private void copyAttributes(AttributeMap dest,AttributeMap source){  for (  Entry<Attribute<?>,?> a : source.entrySet()) {    dest.put((Attribute<Object>)a.getKey(),a.getValue());  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  protected void fireTreeStructureChanged(Object source,Object[] path,int[] childIndices,Object[] children){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path,childIndices,children);      ((TreeModelListener)listeners[i + 1]).treeStructureChanged(e);    }  }}  }
class C{  public void reset(){  super.reset();  H1=0xcbbb9d5dc1059ed8l;  H2=0x629a292a367cd507l;  H3=0x9159015a3070dd17l;  H4=0x152fecd8f70e5939l;  H5=0x67332667ffc00b31l;  H6=0x8eb44a8768581511l;  H7=0xdb0c2e0d64f98fa7l;  H8=0x47b5481dbefa4fa4l;}  }
class C{  public JournalIndex(final IRawStore store,final Checkpoint checkpoint,final IndexMetadata metadata,final boolean readOnly){  super(store,checkpoint,metadata,readOnly);}  }
class C{  public void writeXml(java.io.OutputStream oStream) throws SQLException, IOException {  createWebRowSet().writeXml(oStream);}  }
class C{  private boolean allowNotInsert(){  final int childCount=getChildCount();  if (!(getCriterium() instanceof CNotCriterium) && childCount == 1 && !(((JCriteriumTreeNode)children.get(0)).getCriterium() instanceof CNotCriterium)) {    return true;  }  return false;}  }
class C{  public int state(){  return mState;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (isNetworkedPlaylistCall(stack,1)) {    return makeNetworkedCall(stack);  }  Object o=stack.pop();  Playlist p=getPlaylist(stack);  if (!Permissions.hasPermission(Permissions.PERMISSION_PLAYLIST,stack.getUIMgr()) && p != stack.getUIMgrSafe().getVideoFrame().getNowPlayingList())   return null;  if (o instanceof Playlist)   p.addToPlaylist((Playlist)o); else   if (o instanceof Album)   p.addToPlaylist((Album)o); else   if (o instanceof MediaFile) {    if (p.getID() == 0 && ((MediaFile)o).getGeneralType() == MediaFile.MEDIAFILE_LOCAL_PLAYBACK)     p.addToPlaylist((MediaFile)o); else     p.addToPlaylist(((MediaFile)o).getContentAiring());  } else   if (o instanceof Airing)   p.addToPlaylist((Airing)o);  if (stack.getUIMgrSafe() != null && p == stack.getUIMgrSafe().getVideoFrame().getNowPlayingList())   stack.getUIMgrSafe().getVideoFrame().kick();  sage.plugin.PluginEventManager.postEvent(sage.plugin.PluginEventManager.PLAYLIST_MODIFIED,new Object[]{sage.plugin.PluginEventManager.VAR_PLAYLIST,p,sage.plugin.PluginEventManager.VAR_UICONTEXT,(stack.getUIMgr() != null ? stack.getUIMgr().getLocalUIClientName() : null)});  return null;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean downField(EditorState editorState){  return downField(editorState,editorState.getCurrentField());}  }
class C{  public static Money createMoney(long microAmount){  Money money=new Money();  money.setMicroAmount(microAmount);  return money;}  }
class C{  public RelationalJMapper(final Class<T> configuredClass){  this.configuredClass=configuredClass;  try {    init();  } catch (  ClassNotMappedException e) {    JmapperLog.ERROR(e);  }catch (  MappingErrorException e) {    JmapperLog.ERROR(e);  }}  }
class C{  public WriteCoilResponse(){  super();  setFunctionCode(Modbus.WRITE_COIL);  setDataLength(4);}  }
class C{  public boolean visible(){  return visible;}  }
class C{  public static int centimeterAsPixel(double cm,Component component){  return cm == 0d ? 0 : getUnitConverter().centimeterAsPixel(cm,component);}  }
class C{  public static int gcd(final int x,final int y){  int z=0;  if (x > y) {    for (int i=y; i > 0; i--) {      if (x % i == 0 && y % i == 0) {        z=i;        break;      }    }  } else   if (x < y) {    for (int i=x; i > 0; i--) {      if (x % i == 0 && y % i == 0) {        z=i;        break;      }    }  } else {    z=x;  }  return z;}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.write(getMessage());}  }
class C{  public static int roundToGrid(int x,Size gridSpacing){  double grid=gridSpacing.convertToPixels();  return (int)(Math.round(1f * x / grid) * grid);}  }
class C{  public boolean isGroupRow(int row){  return m_data.isGroupRow(row);}  }
class C{  public li addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public TitledPaddedPanel(String title,int orientation) throws IllegalArgumentException {  this(title,OUT_MARGIN,TITLED_MARGIN);  if (orientation != X_AXIS && orientation != Y_AXIS)   throw new IllegalArgumentException("Invalid orientation");  if (orientation == X_AXIS) {    setInnerLayout(new BoxLayout(_mainPanel,BoxLayout.X_AXIS));  }}  }
class C{  public final IBinding resolveBinding(){  return this.ast.getBindingResolver().resolveReference(this);}  }
class C{  public BetweenExpression(boolean lowEndpointIncluded,boolean highEndpointIncluded,boolean notBetween){  isLowEndpointIncluded=lowEndpointIncluded;  isHighEndpointIncluded=highEndpointIncluded;  isNotBetween=notBetween;}  }
class C{  public static ActorTaskContext pushNew(){  final ActorTaskContext context=new ActorTaskContext();  context.push();  return context;}  }
class C{  public double key(){  return _map._set[_index];}  }
class C{  public RoundedBitmapBuilder borderColor(int color){  mBorderColor=ColorStateList.valueOf(color);  return this;}  }
class C{  public static boolean equals(int[] array1,int[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  protected EngineImpl(){  super(new ArgumentsImpl(),new ResultsImpl());}  }
class C{  @Deprecated private void addAlphaAnimator(@NonNull List<Animator> animators,@NonNull View view,@FloatRange(from=0.0,to=1.0) float alphaFrom){  if (animatorsUsed.contains(AnimatorEnum.ALPHA))   return;  animators.add(ObjectAnimator.ofFloat(view,"alpha",alphaFrom,1f));  animatorsUsed.add(AnimatorEnum.ALPHA);}  }
class C{  public static TypeReference newTypeParameterBoundReference(int sort,int paramIndex,int boundIndex){  return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8));}  }
class C{  public Builder delayBeforeLoading(int delayInMillis){  this.delayBeforeLoading=delayInMillis;  return this;}  }
class C{  public synchronized void configureAsForegroundTM(DynamicTranslationModel<FV> backgroundTM,FeatureTemplate t){  TimeKeeper timer=TimingUtils.start();  maxSourcePhrase=backgroundTM.maxSourcePhrase;  maxTargetPhrase=backgroundTM.maxTargetPhrase;  sampleSize=backgroundTM.sampleSize;  if (backgroundTM.reorderingEnabled) {    boolean doHierarchical=backgroundTM.lexModel instanceof HierarchicalReorderingModel;    setReorderingScores(doHierarchical);  }  this.name=Phrasal.TM_FOREGROUND_NAME;  setFeatureTemplate(t);  createIdArrays();  timer.mark("Id arrays");  createLexCoocTable(sa.getVocabulary().size());  timer.mark("Cooc table");  createQueryCache(t);  timer.mark("Query cache");  logger.info("Timing results: {}",timer);}  }
class C{  public void sendRelationRemovalNotification(String relationId,List<ObjectName> unregMBeanList) throws IllegalArgumentException, RelationNotFoundException {  if (relationId == null) {    String excMsg="Invalid parameter";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"sendRelationRemovalNotification",new Object[]{relationId,unregMBeanList});  sendNotificationInt(3,"Removal of relation " + relationId,relationId,unregMBeanList,null,null,null);  RELATION_LOGGER.exiting(RelationService.class.getName(),"sendRelationRemovalNotification");  return;}  }
class C{  public static <V extends NumberVector>V randomVector(NumberVector.Factory<V> factory,int dim,Random r){  double[] data=new double[dim];  for (int i=0; i < dim; i++) {    data[i]=r.nextDouble();  }  return factory.newNumberVector(data);}  }
class C{  private void loadSubmissions(){  submissions.clear();  String[] users=JPlagCentral.usersList();  for (int i=0; i < users.length; i++) {    AccessStructure[] subm=JPlagCentral.listAccessStructures(users[i]);    if (subm != null && subm.length != 0) {      for (int j=0; j < subm.length; j++) {        submissions.add(subm[j]);      }    }  }}  }
class C{  public static boolean isXML11Valid(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public static void selectFile(ResourceEditorView view,EditableResources res,String timelineName){  File[] files=ResourceEditorView.showOpenFileChooser("Images",".gif");  if (files != null) {    File sel=files[0];    if (timelineName == null) {      timelineName=sel.getName();    }    Preferences.userNodeForPackage(view.getClass()).put("lastDir",sel.getParentFile().getAbsolutePath());    ImageReader iReader=ImageIO.getImageReadersBySuffix("gif").next();    try {      iReader.setInput(ImageIO.createImageInputStream(new FileInputStream(sel)));      int frames=iReader.getNumImages(true);      AnimationObject[] anims=new AnimationObject[frames];      int currentTime=0;      for (int frameIter=0; frameIter < frames; frameIter++) {        BufferedImage currentImage=iReader.read(frameIter);        ByteArrayOutputStream bo=new ByteArrayOutputStream();        ImageIO.write(currentImage,"png",bo);        bo.close();        String label=sel.getName() + " frame:" + frameIter;        EncodedImage i=EncodedImage.create(bo.toByteArray());        res.setImage(label,i);        int duration=Math.max(40,AnimationImpl.getFrameTime(iReader,frameIter));        Point pos=AnimationImpl.getPixelOffsets(iReader,frameIter);        anims[frameIter]=AnimationObject.createAnimationImage(i,pos.x,pos.y);        anims[frameIter].setStartTime(currentTime);        anims[frameIter].setEndTime(100000000);        String disposeMethod=getDisposalMethod(iReader,frameIter);        if (disposeMethod != null) {          if ("restoreToBackgroundColor".equals(disposeMethod)) {            if (frameIter + 1 < frames) {              int t=Math.max(40,AnimationImpl.getFrameTime(iReader,frameIter + 1));              anims[frameIter].setEndTime(currentTime + t);            } else {              anims[frameIter].setEndTime(currentTime + duration);            }          }        }        currentTime+=duration;      }      Timeline t=Timeline.createTimeline(currentTime,anims,new com.codename1.ui.geom.Dimension(iReader.getWidth(0),iReader.getHeight(0)));      res.setImage(timelineName,t);      view.setSelectedResource(timelineName);    } catch (    IOException err) {      err.printStackTrace();      JOptionPane.showMessageDialog(JFrame.getFrames()[0],"Error reading file " + err,"IO Error",JOptionPane.ERROR_MESSAGE);    }  }}  }
class C{  @Override protected final long used(){  return heap.getHeapMemoryUsage().getUsed();}  }
class C{  public static SonarQubeIssuesReport extractIssueReport(ProjectIssues projectIssues,InputFileCache inputFileCache,File projectBaseDir){  SonarQubeIssuesReport result=new SonarQubeIssuesReport();  for (  Issue issue : projectIssues.issues()) {    if (!issue.isNew()) {      LOGGER.debug("Issue {} is not a new issue and so, not added to the report",issue.key());    } else {      String key=issue.key();      String severity=issue.severity();      String rule=issue.ruleKey().toString();      String message=issue.message();      int line=0;      if (issue.line() != null) {        line=issue.line();      }      InputFile inputFile=inputFileCache.getInputFile(issue.componentKey());      if (inputFile == null) {        LOGGER.debug("Issue {} is not linked to a file, not added to the report",issue.key());      } else {        String path=new PathResolver().relativePath(projectBaseDir,inputFile.file());        SonarQubeIssue stashIssue=new SonarQubeIssue(key,severity,message,rule,path,line);        result.add(stashIssue);      }    }  }  return result;}  }
class C{  public static CipherParameters makePBEMacParameters(PBEKeySpec keySpec,int type,int hash,int keySize){  PBEParametersGenerator generator=makePBEGenerator(type,hash);  byte[] key;  CipherParameters param;  key=convertPassword(type,keySpec);  generator.init(key,keySpec.getSalt(),keySpec.getIterationCount());  param=generator.generateDerivedMacParameters(keySize);  for (int i=0; i != key.length; i++) {    key[i]=0;  }  return param;}  }
class C{  public Builder updateRateInMs(int updateRate){  this.innerZkScnUpdateRateInMs=updateRate;  return this;}  }
class C{  public Operand popInt(){  Operand r=pop();  if (VM.VerifyAssertions)   opt_assert(r.isIntLike());  return r;}  }
class C{  public DateTime(DateTimeZone zone){  super(zone);}  }
class C{  public boolean writeBlockData(String blockName,Vector<String> blockData){  rawData.add(new String("<" + blockName + ">"));  for (int c=0; c < blockData.size(); c++) {    rawData.add(blockData.get(c).trim());  }  rawData.add(new String("</" + blockName + ">"));  rawData.add(new String(""));  return true;}  }
class C{  AxesWalker cloneDeep(WalkingIterator cloneOwner,Vector cloneList) throws CloneNotSupportedException {  AxesWalker clone=findClone(this,cloneList);  if (null != clone)   return clone;  clone=(AxesWalker)this.clone();  clone.setLocPathIterator(cloneOwner);  if (null != cloneList) {    cloneList.addElement(this);    cloneList.addElement(clone);  }  if (wi().m_lastUsedWalker == this)   cloneOwner.m_lastUsedWalker=clone;  if (null != m_nextWalker)   clone.m_nextWalker=m_nextWalker.cloneDeep(cloneOwner,cloneList);  if (null != cloneList) {    if (null != m_prevWalker)     clone.m_prevWalker=m_prevWalker.cloneDeep(cloneOwner,cloneList);  } else {    if (null != m_nextWalker)     clone.m_nextWalker.m_prevWalker=clone;  }  return clone;}  }
class C{  public T next(){  return internal.next().getValue();}  }
class C{  private boolean serverIsListeningOn(Integer port){  Socket s=new Socket();  boolean serverIsListening=false;  int retryCount=0;  boolean connected=false;  while (connected=tryToConnect(s,port) && retryCount < 10) {    serverIsListening=connected;    tryToClose(s);    retryCount++;    s=new Socket();  }  return serverIsListening;}  }
class C{  public Pair(T value1,T value2){  if (value1 == null || value2 == null)   throw new IllegalArgumentException("Pair cannot contain null values");  first=value1;  second=value2;}  }
class C{  private void sendLocalBroadcast(String event,String dirRemotePath,RemoteOperationResult result){  Log_OC.d(TAG,"Send broadcast " + event);  Intent intent=new Intent(event);  intent.putExtra(FileSyncAdapter.EXTRA_ACCOUNT_NAME,getAccount().name);  if (dirRemotePath != null) {    intent.putExtra(FileSyncAdapter.EXTRA_FOLDER_PATH,dirRemotePath);  }  if (result != null) {    intent.putExtra(FileSyncAdapter.EXTRA_RESULT,result);  }  getContext().sendStickyBroadcast(intent);}  }
class C{  public TableViewerColumnBuilder percentWidth(int width){  this.widthPercent=width;  return this;}  }
class C{  protected Boolean compute(double value){  if (Double.isNaN(value)) {    return null;  }  return !Double.isInfinite(value);}  }
class C{  public static boolean equals(short[] array1,short[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  @Around("execution(* org.yes.cart.service.domain.impl.CustomerServiceImpl.resetPassword(..))") public Object doResetPassword(final ProceedingJoinPoint pjp) throws Throwable {  setPassword((Customer)pjp.getArgs()[0]);  return pjp.proceed();}  }
class C{  public static void copyResource(String resource,File outFile) throws IOException {  try (FileOutputStream fos=new FileOutputStream(outFile)){    try (InputStream is=Resources.getResourceAsStream(FileUtils.class,resource)){      streamToStream(is,fos,FileUtils.BUFFER_SIZE);    } catch (    NullPointerException e) {      throw new IOException("No such resource: " + resource);    }  } }  }
class C{  private static boolean isStartElement(String line){  int first=line.lastIndexOf("<");  int last=line.lastIndexOf(">");  if (last < first) {    return true;  } else {    int firstEnd=line.lastIndexOf("</");    int lastEnd=line.lastIndexOf("/>");    if ((firstEnd != first) && ((lastEnd + 1) != last)) {      return true;    }  }  return false;}  }
class C{  public FBSimpleDataSource(){  this(GDSFactory.getDefaultGDSType());}  }
class C{  public AggregateConfiguration clone(){  AggregateConfiguration result=new AggregateConfiguration();  result.UseServerCapabilitiesDefaults=UseServerCapabilitiesDefaults;  result.TreatUncertainAsBad=TreatUncertainAsBad;  result.PercentDataBad=PercentDataBad;  result.PercentDataGood=PercentDataGood;  result.UseSlopedExtrapolation=UseSlopedExtrapolation;  return result;}  }
class C{  protected double[][] makeJointVectorForNextPast(double[] destination){  return MatrixUtils.makeDelayEmbeddingVector(destination,k + 1);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private boolean deletingUncreatedConsistencyGroup(final BlockConsistencyGroup consistencyGroup){  return (!consistencyGroup.getInactive() && !consistencyGroup.created() && !consistencyGroup.getTypes().contains(BlockConsistencyGroup.Types.VPLEX.name()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.982 -0500",hash_original_method="82E37ECA0641DACABA32320F806C2144",hash_generated_method="3EA9F7A19013669A6C71154EC0034F8C") final synchronized void _requestDont(int option) throws IOException {  if ((_doResponse[option] == 0 && _stateIsDont(option)) || _requestedDont(option)) {    return;  }  _setWantDont(option);  ++_doResponse[option];  _sendDont(option);}  }
class C{  public static Object doReadOptimized(BinaryInputStream in,BinaryContext ctx,@Nullable ClassLoader clsLdr){  int len=in.readInt();  ByteArrayInputStream input=new ByteArrayInputStream(in.array(),in.position(),len);  try {    return ctx.optimizedMarsh().unmarshal(input,U.resolveClassLoader(clsLdr,ctx.configuration()));  } catch (  IgniteCheckedException e) {    throw new BinaryObjectException("Failed to unmarshal object with optimized marshaller",e);  } finally {    in.position(in.position() + len);  }}  }
class C{  public static final String nameForDaemon(final CassandraDaemonTask daemon){  return nameForDaemon(daemon.getName());}  }
class C{  public HtmlEditorConfiguration(Set<AutoEditStrategyFactory> autoEditStrategyFactories,DefaultCodeAssistProcessor defaultProcessor){  this.autoEditStrategyFactories=autoEditStrategyFactories;  this.defaultProcessor=defaultProcessor;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.SHIFT_EXPRESSION__LHS:    return getLhs();case N4JSPackage.SHIFT_EXPRESSION__OP:  return getOp();case N4JSPackage.SHIFT_EXPRESSION__RHS:return getRhs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void writeV5(final String filename){  new org.matsim.core.population.io.PopulationWriter(transformation,this.population,this.network).writeV5(filename);}  }
class C{  private void createColumns(){  String[] columnNames={"Definition Name","Business Transaction Name","Name Extraction","Description"};  int[] columnWidths={250,250,100,400};  String[] toolTips={"The name of the business transaction definition. This name is also used for the mapped business transactions if dynamic name extraction is not enabled.","The name of the actual mapped business transaction. This name equals to the Definition Name if dynamic name extraction is not enabled, otherwise the name is dynamically extracted according to the specified pattern.","Indicates whether the name of the business transaction will be extracted dynamically.","Description."};  for (int i=0; i < columnNames.length; i++) {    TableViewerColumn viewerColumn=new TableViewerColumn(tableViewer,SWT.NONE);    viewerColumn.getColumn().setMoveable(true);    viewerColumn.getColumn().setResizable(true);    viewerColumn.getColumn().setText(columnNames[i]);    viewerColumn.getColumn().setWidth(columnWidths[i]);    viewerColumn.getColumn().setToolTipText(toolTips[i]);  }}  }
class C{  public void background(PImage image){  g.background(image);}  }
class C{  public static Selection createFromStartEnd(int s,int e){  Assert.isTrue(s >= 0 && e >= s);  Selection result=new Selection();  result.fStart=s;  result.fLength=e - s + 1;  result.fExclusiveEnd=result.fStart + result.fLength;  return result;}  }
class C{  public CrawlerPack addCookie(String name,String value){  if (null == name) {    log.warn("addCookie: Cookie name null.");    return this;  }  cookies.add(new Cookie("",name,value));  return this;}  }
class C{  public void addEdge(Object from,Object to){  if (!super.containsNode(from))   super.addNode(from);  if (!super.containsNode(to))   super.addNode(to);  super.addEdge(from,to);}  }
class C{  @Override public boolean equals(final Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final Cookie other=(Cookie)obj;  if (this.name != other.name && (this.name == null || !this.name.equals(other.name))) {    return false;  }  if (this.value != other.value && (this.value == null || !this.value.equals(other.value))) {    return false;  }  if (this.version != other.version) {    return false;  }  if (this.path != other.path && (this.path == null || !this.path.equals(other.path))) {    return false;  }  if (this.domain != other.domain && (this.domain == null || !this.domain.equals(other.domain))) {    return false;  }  return true;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void freeCareful(T obj){  if (checkDuplicate(obj))   throw new IllegalStateException("tried to free object twice: " + obj);  free(obj);}  }
class C{  private RegulatedInputStream(final Builder builder) throws IllegalArgumentException, RegulationException {  super(builder.wrappedStream);  if (builder.bufferSize <= 0) {    throw new IllegalArgumentException("Invalid negative or null buffer size: " + builder.bufferSize);  }  if (builder.listener != null)   this.listener=builder.listener;  buf=new byte[builder.bufferSize];  if (builder.regulator != null) {    this.regulator=builder.regulator;  } else {    this.regulator=Regulator.getDefaultRegulator();  }  long stream_size=0L;  try {    stream_size=getStreamSize(builder.wrappedStream);    if (stream_size == 0)     throw new IOException("Unable to retrieve stream size.");  } catch (  IOException e) {    logger.warn(e);  }  this.connectionParameters=new ConnectionParameters.Builder(builder.direction).user(builder.user).userName(builder.userName).streamSize(stream_size).build();  try {    this.flow=(ChannelFlow)this.regulator.getChannel(this.connectionParameters);  } catch (  RegulationException exception) {    logger.error(exception);    throw exception;  }  logger.debug("OPEN - " + this.flow);}  }
class C{  public void opening(int tenant){  starting(Operation.OPEN,tenant);}  }
class C{  public void contractDetails(int reqId,Contract contractDetails){  try {    if (m_contractRequests.containsKey(reqId)) {      Contract contract=m_contractRequests.get(reqId);      BackTestBrokerModel.logContract(contractDetails);      if (BackTestBrokerModel.populateContract(contractDetails,contract)) {        m_tradePersistentModel.persistContract(contract);synchronized (m_contractRequests) {          m_contractRequests.remove(reqId);        }      } else {        error(reqId,3220,"Contract details not found for reqId: " + reqId + " Symbol: "+ contractDetails.getSymbol());      }    }  } catch (  Exception ex) {    error(reqId,3230,ex.getMessage());  }}  }
class C{  public static List<SingleVariableDeclaration> cloneParameters(AST ast,List<SingleVariableDeclaration> params,ImportRewrite imports){  List<SingleVariableDeclaration> newParams=new ArrayList<SingleVariableDeclaration>();  for (  SingleVariableDeclaration param : params) {    SingleVariableDeclaration newParam=cloneMethodParameter(ast,param,imports);    newParams.add(newParam);  }  return newParams;}  }
class C{  public void testPuAllSingleEntity(){  doStreamerBatchTest(50,1_000,new Class<?>[]{Integer.class,CacheOffheapBatchIndexingBaseTest.Organization.class},1,false);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof MetadataContext)) {    return false;  }  MetadataContext other=(MetadataContext)obj;  if (altFormat == null) {    if (other.altFormat != null) {      return false;    }  } else   if (!altFormat.equals(other.altFormat)) {    return false;  }  if (projection == null) {    if (other.projection != null) {      return false;    }  } else   if (!projection.equals(other.projection)) {    return false;  }  if (version == null) {    if (other.version != null) {      return false;    }  } else   if (!version.equals(other.version)) {    return false;  }  return true;}  }
class C{  @Override public void putAll(Map t){  for (  Object o : t.entrySet()) {    Map.Entry e=(Map.Entry)o;    put(e.getKey(),e.getValue());  }}  }
class C{  public static PatternEveryExpr everyFilter(String eventTypeName,String tagName){  PatternExpr filter=new PatternFilterExpr(Filter.create(eventTypeName),tagName);  return new PatternEveryExpr(filter);}  }
class C{  private void fetchDirective(){  unwindIndent(-1);  removePossibleSimpleKey();  this.allowSimpleKey=false;  Token tok=scanDirective();  this.tokens.add(tok);}  }
class C{  public void testMergeOneServletIntoDocumentWithAnotherServlet() throws Exception {  String srcXml="<web-app>" + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "</web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <servlet>" + "    <servlet-name>s2</servlet-name>"+ "    <servlet-class>sclass2</servlet-class>"+ "  </servlet>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasServlet(srcWebXml,"s1"));  assertTrue(WebXmlUtils.hasServlet(srcWebXml,"s2"));}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  private void updateQoSSettings(final Buffer buffer){  log.info("QoS Content: {}",buffer.toString());  cancelTimer();  JsonObject qosSettings=parseQoSSettings(buffer);  setGlobalQoSConfig(createQoSConfig(qosSettings));  setQosSentinels(createQoSSentinels(qosSettings));  setQosRules(createQoSRules(qosSettings));  if (!qosSentinels.isEmpty() && !qosRules.isEmpty()) {    timerId=vertx.setPeriodic(globalQoSConfig.getPeriod() * 1000,null);  } else {    log.info("QoS is disabled now. No rules and sentinels found.");  }}  }
class C{  public SQLTransactionRollbackException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  public void restoreViewScopeState(FacesContext context,Object state){  if (context == null) {    throw new NullPointerException();  }  if (state == null) {    return;  }  values=(Object[])state;  super.restoreState(context,values[0]);}  }
class C{  public Eval<V> nextOrNull(final K key){  final ValueSubscriber<V> sub=ValueSubscriber.subscriber();  final LazyImmutable<Boolean> requested=LazyImmutable.def();  return get(key).peek(null).map(null).orElse(Eval.<V>now(null));}  }
class C{  public void write(int ch) throws IOException {  if (ch >= 32 && ch <= 126 || ch == cr || ch == lf || ch == ' ') {    super.write(ch);    return;  }  mini.setLength(0);  mini.append(Integer.toHexString(ch));  while (mini.length() < 4)   mini.insert(0,"0");  mini.insert(0,"\\u");  for (int i=0; i < mini.length(); i++)   super.write(mini.charAt(i));}  }
class C{  public static boolean sameLines(final String[] erecs,final String[] arecs){  final String result=compareLines(erecs,arecs);  if (result != null) {    System.err.println(result);  }  return result == null;}  }
class C{  FormatInformation readFormatInformation() throws FormatException {  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  int formatInfoBits1=0;  for (int i=0; i < 6; i++) {    formatInfoBits1=copyBit(i,8,formatInfoBits1);  }  formatInfoBits1=copyBit(7,8,formatInfoBits1);  formatInfoBits1=copyBit(8,8,formatInfoBits1);  formatInfoBits1=copyBit(8,7,formatInfoBits1);  for (int j=5; j >= 0; j--) {    formatInfoBits1=copyBit(8,j,formatInfoBits1);  }  int dimension=bitMatrix.getHeight();  int formatInfoBits2=0;  int jMin=dimension - 7;  for (int j=dimension - 1; j >= jMin; j--) {    formatInfoBits2=copyBit(8,j,formatInfoBits2);  }  for (int i=dimension - 8; i < dimension; i++) {    formatInfoBits2=copyBit(i,8,formatInfoBits2);  }  parsedFormatInfo=FormatInformation.decodeFormatInformation(formatInfoBits1,formatInfoBits2);  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  throw FormatException.getFormatInstance();}  }
class C{  public static boolean isOpenGraphObjectForPost(JSONObject object){  return object != null ? object.optBoolean(NativeProtocol.OPEN_GRAPH_CREATE_OBJECT_KEY) : false;}  }
class C{  boolean compressed(){  return false;}  }
class C{  void reExecutePeriodic(RunnableScheduledFuture<?> task){  if (canRunInCurrentRunState(true)) {    super.getQueue().add(task);    if (!canRunInCurrentRunState(true) && remove(task))     task.cancel(false); else     ensurePrestart();  }}  }
