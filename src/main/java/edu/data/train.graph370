class C{  private void writeStatement() throws RDFHandlerException, IOException {  Statement st=statementQueue.remove();  int subjId=getValueId(st.getSubject());  int predId=getValueId(st.getPredicate());  int objId=getValueId(st.getObject());  int contextId=getValueId(st.getContext());  decValueFreq(st.getSubject());  decValueFreq(st.getPredicate());  decValueFreq(st.getObject());  decValueFreq(st.getContext());  out.writeByte(STATEMENT);  writeValueOrId(st.getSubject(),subjId);  writeValueOrId(st.getPredicate(),predId);  writeValueOrId(st.getObject(),objId);  writeValueOrId(st.getContext(),contextId);}  }
class C{  public static Map<String,Object> encode(final Map<String,Object> form,final String encoding){  if (form != null) {    for (    final String key : form.keySet()) {      final Object value=form.get(key);      if (value instanceof String) {        form.put(key,encode(value.toString(),encoding));      }    }  }  return form;}  }
class C{  private void showNotification(String cityId,boolean microApp){  List<Attraction> attractions=ATTRACTIONS.get(cityId);  if (microApp) {    sendDataToWearable(attractions);  }  Attraction attraction=attractions.get(0);  int count=attractions.size() > Constants.MAX_ATTRACTIONS ? Constants.MAX_ATTRACTIONS : attractions.size();  HashMap<String,Bitmap> bitmaps=new HashMap<>();  try {    for (int i=0; i < count; i++) {      bitmaps.put(attractions.get(i).name,Glide.with(this).load(attractions.get(i).imageUrl).asBitmap().diskCacheStrategy(DiskCacheStrategy.SOURCE).into(Constants.WEAR_IMAGE_SIZE,Constants.WEAR_IMAGE_SIZE).get());    }  } catch (  InterruptedException|ExecutionException e) {    Log.e(TAG,"Error fetching image from network: " + e);  }  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,DetailActivity.getLaunchIntent(this,attraction.name),PendingIntent.FLAG_UPDATE_CURRENT);  PendingIntent deletePendingIntent=PendingIntent.getService(this,0,getClearRemoteNotificationsIntent(this),0);  NotificationCompat.Builder builder=new NotificationCompat.Builder(this).setStyle(new NotificationCompat.BigPictureStyle().bigPicture(bitmaps.get(attraction.name)).setBigContentTitle(attraction.name).setSummaryText(getString(R.string.nearby_attraction))).setLocalOnly(microApp).setContentTitle(attraction.name).setContentText(getString(R.string.nearby_attraction)).setSmallIcon(R.drawable.ic_stat_maps_pin_drop).setContentIntent(pendingIntent).setDeleteIntent(deletePendingIntent).setColor(getResources().getColor(R.color.colorPrimary)).setCategory(Notification.CATEGORY_RECOMMENDATION).setAutoCancel(true);  if (!microApp) {    ArrayList<Notification> pages=new ArrayList<Notification>();    for (int i=1; i < count; i++) {      String distance=Utils.formatDistanceBetween(Utils.getLocation(this),attractions.get(i).location);      pages.add(new NotificationCompat.Builder(this).setContentTitle(attractions.get(i).name).setContentText(distance).setSmallIcon(R.drawable.ic_stat_maps_pin_drop).extend(new NotificationCompat.WearableExtender().setBackground(bitmaps.get(attractions.get(i).name))).build());    }    builder.extend(new NotificationCompat.WearableExtender().addPages(pages));  }  NotificationManagerCompat.from(this).notify(Constants.MOBILE_NOTIFICATION_ID,builder.build());}  }
class C{  public static boolean annotateSnapshot(String snapshot_file,String annotation){  boolean result=false;  if (m_profiler != null && snapshot_file != null) {    result=m_profiler.annotateSnapshot(snapshot_file,annotation);  }  return result;}  }
class C{  public static void updateNodes(PathDataNode[] target,PathDataNode[] source){  for (int i=0; i < source.length; i++) {    target[i].mType=source[i].mType;    for (int j=0; j < source[i].mParams.length; j++) {      target[i].mParams[j]=source[i].mParams[j];    }  }}  }
class C{  private static <NodeType extends IGraphNode<NodeType>>void link(final NodeType parent,final NodeType node,final HashMap<NodeType,NodeType> ancestor,final HashMap<NodeType,NodeType> best){  ancestor.put(node,parent);  best.put(node,node);}  }
class C{  public Mapping Mapping(Type from,Type to){  return new Mapping(from,to);}  }
class C{  public String toString(){  return id.toString();}  }
class C{  public InMemoryStreamingMessageQueueConsumer(final String queueId,final ConcurrentLinkedQueue<StreamingDataMessage> queue,final StreamingMessageQueueWaitStrategy waitStrategy){  this.queueId=queueId;  this.queue=queue;  this.waitStrategy=waitStrategy;}  }
class C{  public void verifyNfsACLs(NfsACLUpdateParams param){  List<NfsACE> addList=param.getAcesToAdd();  List<NfsACE> modifyList=param.getAcesToModify();  List<NfsACE> deleteList=param.getAcesToDelete();  List<NFSShareACL> dbACLList=queryDBSFileNfsACLs(false);  Set<String> userSetDB=new HashSet<String>();  for (  NFSShareACL dbAcl : dbACLList) {    userSetDB.add(dbAcl.getUser());  }  if (addList != null && !addList.isEmpty()) {    verifyNfsACLsAddList(addList,userSetDB);  }  if (modifyList != null && !modifyList.isEmpty()) {    verifyNfsACLsModifyOrDeleteList(modifyList,userSetDB);  }  if (deleteList != null && !deleteList.isEmpty()) {    verifyNfsACLsModifyOrDeleteList(deleteList,userSetDB);  }}  }
class C{  public double calculateLogLikelihood(){  double logL=0.0;  for (int i=0; i < tipHeights.getDimension(); i++) {    logL+=distribution.logPdf(tipHeights.getParameterValue(i) - offsets[i]);  }  return logL;}  }
class C{  public boolean isClear(int col,int row){  return (cells[col][row] == EMPTY);}  }
class C{  public static LatLonPoint calculatePointOnRhumbLine(LatLonPoint point,double azimuth,double dist){  double az=MoreMath.TWO_PI_D - azimuth;  double lat1=point.getRadLat();  double lon1=point.getRadLon();  double lat=lat1 + dist * Math.cos(az);  double dphi=Math.log(Math.abs((1 + Math.sin(lat)) / Math.cos(lat))) - Math.log(Math.abs((1 + Math.sin(lat1)) / Math.cos(lat1)));  double dlon=0.0;  if (Math.abs(Math.cos(az)) > Math.sqrt(0.00000000000001)) {    dlon=dphi * Math.tan(az);  } else {    dlon=Math.sin(az) * dist / Math.cos(lat1);  }  double lon=mod(lon1 - dlon + Math.PI,2 * Math.PI) - Math.PI;  return new LatLonPoint.Double(lat,lon,true);}  }
class C{  public static boolean matchesAnchorTenantReservation(InternetDomainName domainName,String authCode){  ReservedListEntry entry=getReservedListEntry(domainName.parts().get(0),domainName.parent().toString());  return entry != null && entry.reservationType == RESERVED_FOR_ANCHOR_TENANT && Objects.equals(entry.getAuthCode(),authCode);}  }
class C{  public void hasBody(boolean hasBody){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() == null)   Sage.removeNode(getString(stack)); else   stack.getUIMgr().removeNode(getString(stack));  return null;}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  public static <T1,T2,R>Mono<R> zip(Mono<? extends T1> mono,Iterable<? extends T2> app,BiFunction<? super T1,? super T2,? extends R> fn){  return Mono.from(FutureW.of(mono.toFuture()).zip(app,fn));}  }
class C{  public void selectionChanged(SelectionEvent evt){}  }
class C{  public void addRaster(float lt,float ln,int offset_x1,int offset_y1,String url,LinkProperties properties) throws IOException {  LinkRaster.write(lt,ln,offset_x1,offset_y1,url,properties,link.dos);}  }
class C{  private static void addLockInfo(ThreadInfo info,StringBuilder sb){  if (VersionUtils.isJava16OrAbove()) {    try {      Method m=ThreadInfo.class.getMethod("getLockInfo");      Object o=m.invoke(info);      if (o != null) {        Thread.State ts=info.getThreadState();switch (ts) {case BLOCKED:          sb.append("\t-  blocked on " + o + "\n");        break;case WAITING:case TIMED_WAITING:      sb.append("\t-  waiting on " + o + "\n");    break;default :}}} catch (Throwable t) {LOG.info("Error calling getLockInfo",t);}}}  }
class C{  public static long fieldsToDay(int year,int month,int dom){  int y=year - 1;  long julian=365 * y + floorDivide(y,4) + (JULIAN_1_CE - 3) + floorDivide(y,400) - floorDivide(y,100) + 2 + DAYS_BEFORE[month + (isLeapYear(year) ? 12 : 0)] + dom;  return julian - JULIAN_1970_CE;}  }
class C{  public int deleteBulk(String indexName,Map<String,String> ids){  if (ids == null || ids.size() == 0)   return 0;  BulkRequestBuilder bulkRequest=elasticsearchClient.prepareBulk();  for (  Map.Entry<String,String> id : ids.entrySet()) {    bulkRequest.add(new DeleteRequest().id(id.getKey()).index(indexName).type(id.getValue()));  }  bulkRequest.execute().actionGet();  return ids.size();}  }
class C{  private static SparseBooleanArray parseColumns(String sequence){  SparseBooleanArray columns=new SparseBooleanArray();  Pattern pattern=Pattern.compile("\\s*,\\s*");  String[] columnDefs=pattern.split(sequence);  for (  String columnIdentifier : columnDefs) {    try {      int columnIndex=Integer.parseInt(columnIdentifier);      if (columnIndex >= 0) {        columns.put(columnIndex,true);      }    } catch (    NumberFormatException e) {    }  }  return columns;}  }
class C{  @Override public synchronized void print(int x){  print(new Integer(x).toString());}  }
class C{  public static String padLeft(String input,int size){  if (input.length() > size) {    throw new IllegalArgumentException("input must be shorter than or equal to the number of spaces: " + size);  }  StringBuilder sb=new StringBuilder();  for (int i=input.length(); i < size; i++) {    sb.append(" ");  }  return sb.append(input).toString();}  }
class C{  public void logging(String msg1,String msg2){  System.out.print(msg1);  System.out.print(" ");  System.out.println(msg2);}  }
class C{  void readAAT() throws IOException {  String S;  String C=prefix + ".AAT";  do {    S=isr.readLine();    if (S == null)     return;  } while (!S.startsWith(C));  int n=Integer.parseInt(S.substring(46).trim());  Debug.message("e00","E00: read " + C + " "+ n+ " points");  for (int i=0; i < 9; i++)   isr.readLine();  int[] I=new int[2];  for (int i=0; i < n; i++) {    isr.readLine();    S=isr.readLine();    parseString(S,I,2);    arcs.getOMGraphicAt(i).setLinePaint(getArcPaint(I[0]));  }}  }
class C{  @Override public void messageSent(NextFilter nextFilter,IoSession session,WriteRequest writeRequest) throws Exception {  if (profileMessageSent) {    long start=timeNow();    nextFilter.messageSent(session,writeRequest);    long end=timeNow();    messageSentTimerWorker.addNewDuration(end - start);  } else {    nextFilter.messageSent(session,writeRequest);  }}  }
class C{  public ProfileOptions build(){  return new ProfileOptions(this);}  }
class C{  protected void sendMomentaryFunctionGroup4(){  if (tc.getCommandStation().getCommandStationSoftwareVersionBCD() < 0x36) {    log.info("Functions F13-F28 unavailable in CS software version " + tc.getCommandStation().getCommandStationSoftwareVersion());    return;  }  if (tc.getCommandStation().getCommandStationType() == 0x10) {    if (log.isDebugEnabled()) {      log.debug("Command station does not support Momentary functions");    }    return;  }  XNetMessage msg=XNetMessage.getFunctionGroup4SetMomMsg(this.getDccAddress(),f13Momentary,f14Momentary,f15Momentary,f16Momentary,f17Momentary,f18Momentary,f19Momentary,f20Momentary);  queueMessage(msg,THROTTLEFUNCSENT);}  }
class C{  public String dialogId(){  return dialogId;}  }
class C{  protected void transfer(long seqid) throws IOException {  if ((seqid < 0) || (seqid >= mReader.numberSequences())) {    warnInvalidSequence("" + seqid);    return;  }  final int length=mReader.maxLength();  if (mData == null || mData.length < length) {    mData=new byte[length];    if (mReader.hasQualityData()) {      mQualities=new byte[length];    }  }  mWriter.writeSequence(seqid,mData,mQualities);  if (++mWritten % 1000 == 0) {    Diagnostic.progress("Extracted " + mWritten + " sequences");  }}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(ConnectionRegressionTest.class);}  }
class C{  public static Map<String,RamlQueryParameter> convertParameterToQueryParameter(final Parameter param,final String paramComment){  RamlQueryParameter queryParam=RamlModelFactoryOfFactories.createRamlModelFactory().createRamlQueryParameter();  ApiParameterMetadata parameterMetadata=new ApiParameterMetadata(param);  RamlParamType type=mapSimpleType(param.getType());  if (type == null) {    throw new IllegalArgumentException("This method is only applicable to simple types or primitives");  }  if (StringUtils.hasText(paramComment)) {    queryParam.setDescription(paramComment);  }  queryParam.setDisplayName(parameterMetadata.getName());  queryParam.setType(mapSimpleType(param.getType()));  if (StringUtils.hasText(parameterMetadata.getExample())) {    queryParam.setExample(parameterMetadata.getExample());  }  queryParam.setRequired(!parameterMetadata.isNullable());  queryParam.setRepeat(param.getType().isArray());  return Collections.singletonMap(parameterMetadata.getName(),queryParam);}  }
class C{  private final void moveLaneToBuffer(){  double now=context.getSimTimer().getTimeOfDay();  QVehicle veh;  while ((veh=vehQueue.peek()) != null) {    if (veh.getEarliestLinkExitTime() > now) {      return;    }    MobsimDriverAgent driver=veh.getDriver();    if (driver instanceof AbstractTransitDriverAgent) {      AbstractTransitDriverAgent transitDriver=(AbstractTransitDriverAgent)driver;      HandleTransitStopResult handleTransitStop=qLink.getTransitQLink().handleTransitStop(now,veh,transitDriver,qLink.getLink().getId());      if (handleTransitStop == HandleTransitStopResult.accepted) {        removeVehicleFromQueue();        continue;      } else       if (handleTransitStop == HandleTransitStopResult.rehandle) {        continue;      } else       if (handleTransitStop == HandleTransitStopResult.continue_driving) {      }    }    if (driver.isWantingToArriveOnCurrentLink()) {      letVehicleArrive(veh);      continue;    } else {      addToBuffer(veh);      removeVehicleFromQueue();    }  }}  }
class C{  public static void moveFile(File origPath,File destPath) throws IOException {  copyFile(origPath,destPath);  if (!origPath.delete())   throw new IOException("Cannot delete file: " + origPath.getName());}  }
class C{  @Reference(authors="D. Pelleg, A. Moore",booktitle="X-means: Extending K-means with Efficient Estimation on the Number of Clusters",title="Proceedings of the 17th International Conference on Machine Learning (ICML 2000)",url="http://www.pelleg.org/shared/hp/download/xmeans.ps") public static <V extends NumberVector>double logLikelihood(Relation<V> relation,Clustering<? extends MeanModel> clustering,NumberVectorDistanceFunction<? super V> distanceFunction){  List<? extends Cluster<? extends MeanModel>> clusters=clustering.getAllClusters();  final int dim=RelationUtil.dimensionality(relation);  final int m=clusters.size();  int n=0;  int[] n_i=new int[m];  double d=0.;  double[] d_i=new double[m];  Iterator<? extends Cluster<? extends MeanModel>> it=clusters.iterator();  for (int i=0; it.hasNext(); ++i) {    Cluster<? extends MeanModel> cluster=it.next();    n+=n_i[i]=cluster.size();    d+=d_i[i]=varianceOfCluster(cluster,distanceFunction,relation);  }  if (n <= m) {    return Double.NEGATIVE_INFINITY;  }  final double v=d / (n - m), logv=Math.log(v);  double logLikelihood=0.;  for (int i=0; i < m; i++) {    logLikelihood+=n_i[i] * Math.log(n_i[i]) - n_i[i] * .5 * MathUtil.LOGTWOPI - n_i[i] * dim * .5* logv - (d_i[i] - m) * .5;  }  logLikelihood-=n * Math.log(n);  return logLikelihood;}  }
class C{  public List<IPath> chooseResourcePaths(boolean addTrailingSeparatorToContainerPaths){  List<IResource> resources=chooseResources();  if (resources != null) {    List<IPath> paths=new ArrayList<IPath>();    for (    IResource resource : resources) {      int ancestorSegments=rootResource.getFullPath().segmentCount();      IPath path=resource.getFullPath().removeFirstSegments(ancestorSegments).makeRelative();      if (addTrailingSeparatorToContainerPaths && resource instanceof IContainer) {        path=path.addTrailingSeparator();      }      paths.add(path);    }    return paths;  }  return null;}  }
class C{  public void saveRoles(){  int index=getSelectedRoleIndex();  if (index != -1) {    priceModelPricedRoles[index].setPricePerUser(pricePerUserSelectedRole);    int paramNum=pricedParametersOfSelectedRole.length;    for (int i=0; i < paramNum; i++) {      if ((pricedParametersOfSelectedRole[i].getPricedParameter() != null) && (pricedParametersOfAllRoles[index][i].getPricedParameter() != null)) {        pricedParametersOfAllRoles[index][i].getPricedParameter().setPricePerUser(pricedParametersOfSelectedRole[i].getPricedParameter().getPricePerUser());      }      if ((pricedParametersOfSelectedRole[i].getPricedOption() != null) && (pricedParametersOfAllRoles[index][i].getPricedOption() != null)) {        pricedParametersOfAllRoles[index][i].getPricedOption().setPricePerUser(pricedParametersOfSelectedRole[i].getPricedOption().getPricePerUser());      }    }  }}  }
class C{  public static boolean isIpAddress(String ipAddress){  Matcher m1=VALID_IPV4_PATTERN.matcher(ipAddress);  if (m1.matches()) {    return true;  }  Matcher m2=VALID_IPV6_PATTERN.matcher(ipAddress);  return m2.matches();}  }
class C{  public static String repeat(String str,int repeat){  StringBuilder buffer=new StringBuilder(repeat * str.length());  for (int i=0; i < repeat; i++) {    buffer.append(str);  }  return buffer.toString();}  }
class C{  public static final void writeValueXml(Object v,String name,XmlSerializer out) throws XmlPullParserException, IOException {  String typeStr;  if (v == null) {    out.startTag(null,"null");    if (name != null) {      out.attribute(null,"name",name);    }    out.endTag(null,"null");    return;  } else   if (v instanceof String) {    out.startTag(null,"string");    if (name != null) {      out.attribute(null,"name",name);    }    out.text(v.toString());    out.endTag(null,"string");    return;  } else   if (v instanceof Integer) {    typeStr="int";  } else   if (v instanceof Long) {    typeStr="long";  } else   if (v instanceof Float) {    typeStr="float";  } else   if (v instanceof Double) {    typeStr="double";  } else   if (v instanceof Boolean) {    typeStr="boolean";  } else   if (v instanceof byte[]) {    writeByteArrayXml((byte[])v,name,out);    return;  } else   if (v instanceof int[]) {    writeIntArrayXml((int[])v,name,out);    return;  } else   if (v instanceof Map) {    writeMapXml((Map)v,name,out);    return;  } else   if (v instanceof List) {    writeListXml((List)v,name,out);    return;  } else   if (v instanceof CharSequence) {    out.startTag(null,"string");    if (name != null) {      out.attribute(null,"name",name);    }    out.text(v.toString());    out.endTag(null,"string");    return;  } else {    throw new RuntimeException("writeValueXml: unable to write value " + v);  }  out.startTag(null,typeStr);  if (name != null) {    out.attribute(null,"name",name);  }  out.attribute(null,"value",v.toString());  out.endTag(null,typeStr);}  }
class C{  public static boolean[] andRows(boolean[][] data){  boolean[] result=new boolean[data.length];  for (int i=0; i < data.length; i++) {    result[i]=true;    for (int j=0; j < data[i].length; j++) {      result[i]&=data[i][j];    }  }  return result;}  }
class C{  public JToggleGroup(int type,ListModel data,ListSelectionModel selection){  setLayout(new BoxLayout(this,m_axis));  m_type=type;  m_data=data;  m_sel=selection;  if (m_type == RADIO) {    m_group=new ButtonGroup();  }  m_lstnr=new Listener();  m_sel.addListSelectionListener(m_lstnr);  if (m_data.getSize() > 0)   initUI();  setFocusable(false);}  }
class C{  public IMember transplantHandle(IMember handle){  final LinkedList<IMember> oldElements=new LinkedList<IMember>();  addElements(handle,oldElements);  final IMember[] newElements=convertElements(oldElements.toArray(new IMember[0]));  return newElements[newElements.length - 1];}  }
class C{  public void onOptionsMenuClosed(Menu menu){}  }
class C{  public AirMapViewBuilder builder(AirMapViewTypes mapType){switch (mapType) {case NATIVE:    if (isNativeMapSupported) {      return new NativeAirMapViewBuilder();    }  break;case WEB:return getWebMapViewBuilder();}throw new UnsupportedOperationException("Requested map type is not supported");}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TSTRUCT_FIELD__DEFINED_MEMBER:    setDefinedMember((TStructMember)null);  return;}super.eUnset(featureID);}  }
class C{  public Coord4D(Entity entity){  xCoord=(int)entity.posX;  yCoord=(int)entity.posY;  zCoord=(int)entity.posZ;  dimensionId=entity.worldObj.provider.dimensionId;}  }
class C{  public static CharSequence makeBulletList(int leadingMargin,List<? extends CharSequence> lines){  Truss sb=new Truss();  for (int idx=0; idx < lines.size(); idx++) {    boolean last=idx == lines.size() - 1;    CharSequence line=lines.get(idx);    sb.append(line,new BulletSpan(leadingMargin / 3),new LeadingMarginSpan.Standard(leadingMargin));    sb.append(last ? "" : "\n");  }  return sb.build();}  }
class C{  private CipherSuite(String name,boolean isExportable,int keyExchange,String authType,String cipherName,String hash,byte[] code){  this.name=name;  this.keyExchange=keyExchange;  this.authType=authType;  this.isExportable=isExportable;  if (cipherName == null) {    this.cipherName=null;    keyMaterial=0;    expandedKeyMaterial=0;    effectiveKeyBytes=0;    ivSize=0;    blockSize=0;  } else   if ("RC4_40".equals(cipherName)) {    this.cipherName="RC4";    keyMaterial=5;    expandedKeyMaterial=16;    effectiveKeyBytes=5;    ivSize=0;    blockSize=0;  } else   if ("RC4_128".equals(cipherName)) {    this.cipherName="RC4";    keyMaterial=16;    expandedKeyMaterial=16;    effectiveKeyBytes=16;    ivSize=0;    blockSize=0;  } else   if ("DES40_CBC".equals(cipherName)) {    this.cipherName="DES/CBC/NoPadding";    keyMaterial=5;    expandedKeyMaterial=8;    effectiveKeyBytes=5;    ivSize=8;    blockSize=8;  } else   if ("DES_CBC".equals(cipherName)) {    this.cipherName="DES/CBC/NoPadding";    keyMaterial=8;    expandedKeyMaterial=8;    effectiveKeyBytes=7;    ivSize=8;    blockSize=8;  } else   if ("3DES_EDE_CBC".equals(cipherName)) {    this.cipherName="DESede/CBC/NoPadding";    keyMaterial=24;    expandedKeyMaterial=24;    effectiveKeyBytes=24;    ivSize=8;    blockSize=8;  } else   if ("AES_128_CBC".equals(cipherName)) {    this.cipherName="AES/CBC/NoPadding";    keyMaterial=16;    expandedKeyMaterial=16;    effectiveKeyBytes=16;    ivSize=16;    blockSize=16;  } else   if ("AES_256_CBC".equals(cipherName)) {    this.cipherName="AES/CBC/NoPadding";    keyMaterial=32;    expandedKeyMaterial=32;    effectiveKeyBytes=32;    ivSize=16;    blockSize=16;  } else {    this.cipherName=cipherName;    keyMaterial=0;    expandedKeyMaterial=0;    effectiveKeyBytes=0;    ivSize=0;    blockSize=0;  }  if ("MD5".equals(hash)) {    this.hmacName="HmacMD5";    this.hashName="MD5";    hashSize=16;  } else   if ("SHA".equals(hash)) {    this.hmacName="HmacSHA1";    this.hashName="SHA-1";    hashSize=20;  } else {    this.hmacName=null;    this.hashName=null;    hashSize=0;  }  cipherSuiteCode=code;  if (this.cipherName != null) {    try {      Cipher.getInstance(this.cipherName);    } catch (    GeneralSecurityException e) {      supported=false;    }  }  if (this.name.startsWith("TLS_EC")) {    supported=false;  }}  }
class C{  public PreDestroyApplicationEvent(Application application){  super(application);}  }
class C{  public final boolean isOptionsVisible(){  if (_constructor == null)   return false;  return _constructor.isOptionsVisible();}  }
class C{  @SuppressWarnings("EmptyTryBlock") public void testNodeWithoutAttributeExclusion() throws Exception {  try (Ignite node1=startNodeWithCache()){    try (Ignite node2=startGrid("node2",getConfiguration("node2",false,null))){      assertEquals(2,node2.cluster().nodes().size());    }   } }  }
class C{  public LogonGenerator(String[] users,Properties producerConfig){  this.users=users;  producer=new KafkaProducer<String,String>(producerConfig);}  }
class C{  protected Table createTable(Composite sectionArea,FormToolkit toolkit){  Table table=toolkit.createTable(sectionArea,SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL| SWT.FULL_SELECTION);  table.setLinesVisible(false);  table.setHeaderVisible(false);  return table;}  }
class C{  @Override public void onError(Status status){  Log.e(TAG,"onError: Status = " + status.toString());  Toast.makeText(this,"Place selection failed: " + status.getStatusMessage(),Toast.LENGTH_SHORT).show();}  }
class C{  public StrongCachingModuleScriptProvider(ModuleSourceProvider moduleSourceProvider){  super(moduleSourceProvider);}  }
class C{  private AccountResult insertIntoDatabase(){  final TransactionPool transactionPool=SingletonRepository.getTransactionPool();  final DBTransaction transaction=transactionPool.beginWork();  final AccountDAO accountDAO=DAORegister.get().get(AccountDAO.class);  try {    if (accountDAO.hasPlayer(transaction,username)) {      logger.warn("Account already exist: " + username);      transactionPool.commit(transaction);      return new AccountResult(Result.FAILED_PLAYER_EXISTS,username);    }    accountDAO.addPlayer(transaction,username,Hash.hash(password),email);    transactionPool.commit(transaction);    return new AccountResult(Result.OK_CREATED,username);  } catch (  final SQLException e) {    logger.warn("SQL exception while trying to create a new account",e);    transactionPool.rollback(transaction);    return new AccountResult(Result.FAILED_EXCEPTION,username);  }}  }
class C{  public static int startDownloadServiceIfRequired(Context context,PendingIntent notificationClient,Class<?> serviceClass) throws NameNotFoundException {  return DownloaderService.startDownloadServiceIfRequired(context,notificationClient,serviceClass);}  }
class C{  public static boolean hasMarshmallow(){  return Build.VERSION.SDK_INT >= VERSION_CODES.M;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void paint(Graphics g,float x,float y,float w,float h,View v){  float dx=0;  float dy=0;  float dw=0;  float dh=0;  AttributeSet a=v.getAttributes();  boolean isLeftToRight=isLeftToRight(v);  float localLeftMargin=getOrientationMargin(HorizontalMargin.LEFT,leftMargin,a,isLeftToRight);  float localRightMargin=getOrientationMargin(HorizontalMargin.RIGHT,rightMargin,a,isLeftToRight);  if (!(v instanceof HTMLEditorKit.HTMLFactory.BodyBlockView)) {    dx=localLeftMargin;    dy=topMargin;    dw=-(localLeftMargin + localRightMargin);    dh=-(topMargin + bottomMargin);  }  if (bg != null) {    g.setColor(bg);    g.fillRect((int)(x + dx),(int)(y + dy),(int)(w + dw),(int)(h + dh));  }  if (bgPainter != null) {    bgPainter.paint(g,x + dx,y + dy,w + dw,h + dh,v);  }  x+=localLeftMargin;  y+=topMargin;  w-=localLeftMargin + localRightMargin;  h-=topMargin + bottomMargin;  if (border instanceof BevelBorder) {    int bw=(int)getLength(CSS.Attribute.BORDER_TOP_WIDTH,a);    for (int i=bw - 1; i >= 0; i--) {      border.paintBorder(null,g,(int)x + i,(int)y + i,(int)w - 2 * i,(int)h - 2 * i);    }  } else {    border.paintBorder(null,g,(int)x,(int)y,(int)w,(int)h);  }}  }
class C{  public static void init(){  TABBED_COMPONENTS.clear();  TABBED_COMPONENTS.add(new Vector<Object>());}  }
class C{  protected void doWriteObject(ObjectOutputStream out) throws IOException {  out.writeFloat(loadFactor);  out.writeInt(data.length);  out.writeInt(size);  for (MapIterator it=mapIterator(); it.hasNext(); ) {    out.writeObject(it.next());    out.writeObject(it.getValue());  }}  }
class C{  public List<T> filter(BillingTableFilter<T> filter){  List<T> tableEntries=new ArrayList<>();  LineIterator fileIter=null;  try {    fileIter=FileUtils.lineIterator(tableFile,StandardCharsets.UTF_8.toString());    if (fileIter.hasNext()) {      fileIter.nextLine();    }    while (fileIter.hasNext()) {      T entry=filter.accept(fileIter.nextLine());      if (entry != null) {        tableEntries.add(entry);      }    }  } catch (  Exception e) {    e.printStackTrace();    tableEntries.clear();  } finally {    if (fileIter != null) {      fileIter.close();    }  }  return tableEntries;}  }
class C{  public boolean hasPhotoIdExt(){  return hasExtension(GphotoPhotoId.class);}  }
class C{  static void putByte(long ptr,byte data){  unsafe.putByte(ptr,data);}  }
class C{  private void addProduct(Panel element,MProduct product){  int M_Product_ID=product.getM_Product_ID();  Vbox pe=new Vbox();  pe.setStyle("border-width: thin; border-color: blue;");  pe.appendChild(new Label(product.getValue()));  String formatted="";  if (m_M_PriceList_Version_ID != 0) {    MProductPrice pp=MProductPrice.get(Env.getCtx(),m_M_PriceList_Version_ID,M_Product_ID,null);    if (pp != null) {      BigDecimal price=pp.getPriceStd();      formatted=m_price.format(price);    } else     formatted="-";  }  pe.appendChild(new Label(formatted));  pe.appendChild(new Label(product.getName()));  formatted="";  if (m_M_Warehouse_ID != 0) {    BigDecimal qty=MStorage.getQtyAvailable(m_M_Warehouse_ID,M_Product_ID,0,null);    if (qty == null)     formatted="-"; else     formatted=m_qty.format(qty);  }  pe.appendChild(new Label(formatted));  element.appendChild(pe);}  }
class C{  public void eliminarconsultasExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  ConsultaForm frm=(ConsultaForm)form;  eliminarConsultasCodeLogic(frm.getConsultasseleccionadas(),mapping,form,request,response);}  }
class C{  private static String wikiToPlainText(String content){  content=content.replaceAll("\\[\\[[iI]mage:[^\\]]*\\]\\]","");  content=content.replaceAll("(?s)<!--.*?-->","");  content=content.replaceAll("(?s)<ref>.*?</ref>","");  content=content.replaceAll("(?s)\\{\\{([^{}]*?\\{\\{[^{}]*?\\}\\})+[^{}].*?\\}\\}","");  content=content.replaceAll("(?s)\\{\\{.*?\\}\\}","");  content=content.replaceAll("(?s)\\{\\|.*?\\|\\}","");  content=content.replaceAll("\\[\\[[^\\]]*\\|","");  content=content.replaceAll("\\[\\[","");  content=content.replaceAll("\\]\\]","");  content=content.replaceAll("(?s)<.*?>","");  content=content.trim();  final int size=content.length();  int endOfFirstParagraph=content.indexOf("\n",50);  if (endOfFirstParagraph < 0) {    endOfFirstParagraph=size;  }  content=content.substring(0,Math.min(endOfFirstParagraph,1024));  return content;}  }
class C{  private void loop(){  while (!glfwWindowShouldClose(window)) {    glfwPollEvents();    glViewport(0,0,width,height);    update();    raster();    trace();    present();    glfwSwapBuffers(window);  }}  }
class C{  private static int computeAfterTryDoElse(IDocument doc,ITextSelection line,int offset){  int p=offset + line.getOffset();  p=firstWhitespaceToRight(doc,p);  if (p == -1)   return -1;  p--;  if (looksLike(doc,p,"try") || looksLike(doc,p,"do") || looksLike(doc,p,"synchronized")|| looksLike(doc,p,"static")|| looksLike(doc,p,"finally")|| looksLike(doc,p,"else"))   return p + 1 - line.getOffset();  return -1;}  }
class C{  public DocumentCharacterIterator(IDocument document) throws BadLocationException {  this(document,0);}  }
class C{  @Override public int hashCode(){  int hash=super.hashCode();  hash=HashUtilities.hashCode(hash,this.errorIndicatorPaint);  return hash;}  }
class C{  public int next(){  for (; this.wd < this.word.length; this.wd++) {    long w=this.word[this.wd];    for (; this.bit < 64; this.bit++, this.mask<<=1) {      if ((w & this.mask) != 0L) {        int res=(this.wd * 64) + this.bit;        this.bit++;        if (this.bit < 64) {          this.mask<<=1;        } else {          this.wd++;          this.bit=0;          this.mask=1L;        }        return res;      }    }    this.bit=0;    this.mask=1L;  }  return -1;}  }
class C{  public static ServerSocket closeSilently(ServerSocket socket){  if (socket != null) {    try {      socket.close();    } catch (    IOException e) {    }  }  return null;}  }
class C{  private HttpsClientPendingRequest _getNextTimeoutingPendingRequest(){  long next=Long.MAX_VALUE;  HttpsClientPendingRequest result=null;synchronized (requests) {    for (    HttpsClientPendingRequest req : requests.values()) {      if (next > req.timeoutTime) {        next=req.timeoutTime;        result=req;        break;      }    }  }  return result;}  }
class C{  public T caseReturnStatement(ReturnStatement object){  return null;}  }
class C{  protected static void initialiseOutbound(Node n,long baseTime,CommunicationDetails cd,StringBuilder nodeId){  CommunicationDetails.Outbound ob=new CommunicationDetails.Outbound();  ob.getLinkIds().add(nodeId.toString());  ob.setMultiConsumer(true);  ob.setProducerOffset(n.getTimestamp() - baseTime);  cd.getOutbound().add(ob);  if (n.getClass() == Producer.class) {    ob=new CommunicationDetails.Outbound();    for (int j=0; j < n.getCorrelationIds().size(); j++) {      CorrelationIdentifier ci=n.getCorrelationIds().get(j);      if (ci.getScope() == Scope.Interaction || ci.getScope() == Scope.ControlFlow) {        ob.getLinkIds().add(ci.getValue());      }    }    if (!ob.getLinkIds().isEmpty()) {      ob.setMultiConsumer(((Producer)n).multipleConsumers());      ob.setProducerOffset(n.getTimestamp() - baseTime);      cd.getOutbound().add(ob);    }  } else   if (n.containerNode()) {    for (int i=0; i < ((ContainerNode)n).getNodes().size(); i++) {      int len=nodeId.length();      nodeId.append(':');      nodeId.append(i);      initialiseOutbound(((ContainerNode)n).getNodes().get(i),baseTime,cd,nodeId);      nodeId.delete(len,nodeId.length());    }  }}  }
class C{  private void removeGaps(int nodesLevel[]){  int temp=m_nodes.size();  int temp2=graphMatrix[0].length, tempCnt=1;  for (int n=0; n < temp; n++) {    for (int i=0; i < temp2; i++) {      int len=graphMatrix.length;      if (graphMatrix[n][i] > 0) {        if (nodesLevel[i] > nodesLevel[n] + 1) {          int tempMatrix[][]=new int[graphMatrix.length + (nodesLevel[i] - nodesLevel[n] - 1)][graphMatrix.length + (nodesLevel[i] - nodesLevel[n] - 1)];          int level=nodesLevel[n] + 1;          copyMatrix(graphMatrix,tempMatrix);          String s1=new String("S" + tempCnt++);          m_nodes.add(new GraphNode(s1,s1,SINGULAR_DUMMY));          int temp3[]=new int[nodeLevels[level].length + 1];          System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);          temp3[temp3.length - 1]=m_nodes.size() - 1;          nodeLevels[level]=temp3;          level++;          int k;          for (k=len; k < len + nodesLevel[i] - nodesLevel[n] - 1 - 1; k++) {            String s2=new String("S" + tempCnt);            m_nodes.add(new GraphNode(s2,s2,SINGULAR_DUMMY));            temp3=new int[nodeLevels[level].length + 1];            System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);            temp3[temp3.length - 1]=m_nodes.size() - 1;            nodeLevels[level++]=temp3;            tempMatrix[k][k + 1]=tempMatrix[n][i];            tempCnt++;            if (k > len) {              tempMatrix[k][k - 1]=-1 * tempMatrix[n][i];            }          }          tempMatrix[k][i]=tempMatrix[n][i];          tempMatrix[n][len]=tempMatrix[n][i];          tempMatrix[len][n]=-1 * tempMatrix[n][i];          tempMatrix[i][k]=-1 * tempMatrix[n][i];          if (k > len) {            tempMatrix[k][k - 1]=-1 * tempMatrix[n][i];          }          tempMatrix[n][i]=0;          tempMatrix[i][n]=0;          graphMatrix=tempMatrix;        } else {          graphMatrix[i][n]=-1 * graphMatrix[n][i];        }      }    }  }}  }
class C{  public static void addSuperClassExpressions(@NotNull final Project project,@NotNull final PyClass clazz,@Nullable final Collection<String> paramExpressions,@Nullable final Collection<Pair<String,String>> keywordArguments){  final PyElementGenerator generator=PyElementGenerator.getInstance(project);  final LanguageLevel languageLevel=LanguageLevel.forElement(clazz);  PyArgumentList superClassExpressionList=clazz.getSuperClassExpressionList();  boolean addExpression=false;  if (superClassExpressionList == null) {    superClassExpressionList=generator.createFromText(languageLevel,PyClass.class,"class foo():pass").getSuperClassExpressionList();    assert superClassExpressionList != null : "expression not created";    addExpression=true;  }  generator.createFromText(LanguageLevel.PYTHON34,PyClass.class,"class foo(object, metaclass=Foo): pass").getSuperClassExpressionList();  if (paramExpressions != null) {    for (    final String paramExpression : paramExpressions) {      superClassExpressionList.addArgument(generator.createParameter(paramExpression));    }  }  if (keywordArguments != null) {    for (    final Pair<String,String> keywordArgument : keywordArguments) {      superClassExpressionList.addArgument(generator.createKeywordArgument(languageLevel,keywordArgument.first,keywordArgument.second));    }  }  if (addExpression) {    final ASTNode classNameNode=clazz.getNameNode();    final PsiElement elementToAddAfter=(classNameNode == null) ? clazz.getFirstChild() : classNameNode.getPsi();    clazz.addAfter(superClassExpressionList,elementToAddAfter);  }}  }
class C{  public double gaussianPotentialUpside(double percentile){  QL.require(percentile < 1.0 && percentile >= 0.9,"percentile is out of range [0.9, 1)");  double result=gaussianPercentile(percentile);  return Math.max(result,0.0);}  }
class C{  public MovingAverageSeries(Strategy strategy,String name,String type,String description,Boolean displayOnChart,Integer chartRGBColor,Boolean subChart){  super(strategy,name,type,description,displayOnChart,chartRGBColor,subChart);}  }
class C{  public String noReplacementTipText(){  return "Disables the replacement of instances.";}  }
class C{  public long readLong(){  return (data[position++] & 0xFFL) << 56 | (data[position++] & 0xFFL) << 48 | (data[position++] & 0xFFL) << 40 | (data[position++] & 0xFFL) << 32 | (data[position++] & 0xFFL) << 24 | (data[position++] & 0xFFL) << 16 | (data[position++] & 0xFFL) << 8 | (data[position++] & 0xFFL);}  }
class C{  public noscript addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  @SuppressWarnings({"raw","unchecked"}) public static <T>LtPredicate<T> lt(Property<T> property,Variable variable){  return new LtPredicate(property(property),variable);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:56.577 -0500",hash_original_method="BC3AED2375940B210F4240F1B5BF489C",hash_generated_method="D22B3A115D5722AD9AEFD41FD8159508") public void addCountryListener(CountryListener listener,Looper looper){synchronized (mListeners) {    if (!mListeners.containsKey(listener)) {      ListenerTransport transport=new ListenerTransport(listener,looper);      try {        mService.addCountryListener(transport);        mListeners.put(listener,transport);      } catch (      RemoteException e) {        Log.e(TAG,"addCountryListener: RemoteException",e);      }    }  }}  }
class C{  public IntervalCandidateSentence_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());}  }
class C{  public TradeoffAnalytics(String username,String password){  this();  setUsernameAndPassword(username,password);}  }
class C{  public NotificationChain basicSetLhs(Expression newLhs,NotificationChain msgs){  Expression oldLhs=lhs;  lhs=newLhs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.BINARY_LOGICAL_EXPRESSION__LHS,oldLhs,newLhs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected static int parseUnsignedInt(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  int result=0;  int temp=pduDataStream.read();  if (temp == -1) {    return temp;  }  while ((temp & 0x80) != 0) {    result=result << 7;    result|=temp & 0x7F;    temp=pduDataStream.read();    if (temp == -1) {      return temp;    }  }  result=result << 7;  result|=temp & 0x7F;  return result;}  }
class C{  public void handleDecode(Result rawResult,Bundle bundle){  inactivityTimer.onActivity();  beepManager.playBeepSoundAndVibrate();  Intent resultIntent=new Intent();  bundle.putInt("width",mCropRect.width());  bundle.putInt("height",mCropRect.height());  bundle.putString("result",rawResult.getText());  resultIntent.putExtras(bundle);  this.setResult(RESULT_OK,resultIntent);  CaptureActivity.this.finish();}  }
class C{  @Override public boolean start() throws IOException {  LOG.info("Starting reader using {}",initialCheckpointGenerator);  try {    KinesisReaderCheckpoint initialCheckpoint=initialCheckpointGenerator.generate(kinesis);    List<ShardRecordsIterator> iterators=newArrayList();    for (    ShardCheckpoint checkpoint : initialCheckpoint) {      iterators.add(checkpoint.getShardRecordsIterator(kinesis));    }    shardIterators=new RoundRobin<>(iterators);  } catch (  TransientKinesisException e) {    throw new IOException(e);  }  return advance();}  }
class C{  public void method(pkg1.C1 c1){}  }
class C{  public void bindAllArgsAsStrings(String[] bindArgs){  if (bindArgs != null) {    for (int i=bindArgs.length; i != 0; i--) {      bindString(i,bindArgs[i - 1]);    }  }}  }
class C{  public boolean isFullUrl(){  return fullUrl;}  }
class C{  public Strategy findStrategyById(final Integer id) throws PersistentModelException {  Strategy instance=m_strategyHome.findById(id);  if (null == instance)   throw new PersistentModelException("Strategy not found for Id: " + id);  return instance;}  }
class C{  public boolean isAtIdn(){  return isAtElement(RDE_IDN_URI,"idnTableRef");}  }
class C{  public RotatingEntity(final OdorWorld world){  super(world);  initTreeMap();  this.setAnimation(imageMap.get(imageMap.firstKey()));}  }
class C{  @SuppressWarnings("PMD.AvoidArrayLoops") private static byte[] salt(final byte[] text){  final byte size=(byte)CcSalted.RND.nextInt(Tv.TEN);  final byte[] output=new byte[text.length + (int)size + 2];  output[0]=size;  byte sum=(byte)0;  for (int idx=0; idx < (int)size; ++idx) {    output[idx + 1]=(byte)CcSalted.RND.nextInt();    sum+=output[idx + 1];  }  System.arraycopy(text,0,output,(int)size + 1,text.length);  output[output.length - 1]=sum;  return output;}  }
class C{  public int length(){  int idx=actualArrayLength - 1;  while (idx >= 0 && bits[idx] == 0) {    --idx;  }  actualArrayLength=idx + 1;  if (idx == -1) {    return 0;  }  int i=ELM_SIZE - 1;  long val=bits[idx];  while ((val & (TWO_N_ARRAY[i])) == 0 && i > 0) {    i--;  }  return (idx << OFFSET) + i + 1;}  }
class C{  public static boolean isXML11Name(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_NAME) != 0) || (c >= 0x10000 && c < 0xF0000);}  }
class C{  protected StringBuffer inlineValueSB(Environment env,Context ctx,StringBuffer buffer){  Expression inlined=inlineValue(env,ctx);  Object val=inlined.getValue();  if (val == null && !inlined.isNull()) {    return null;  }  if (type == Type.tChar) {    buffer.append((char)((Integer)val).intValue());  } else   if (type == Type.tBoolean) {    buffer.append(((Integer)val).intValue() != 0);  } else {    buffer.append(val);  }  return buffer;}  }
class C{  protected void validatePatch(State patch){}  }
class C{  public void deleteAllDependentObjects(org.hibernate.Session hibSession,boolean updateClass){  deleteAllDistributionPreferences(hibSession,updateClass);  deleteClassInstructors(hibSession);  deleteAssignments(hibSession);  Exam.deleteFromExams(hibSession,this);  Event.deleteFromEvents(hibSession,this);  if (updateClass)   hibSession.saveOrUpdate(this);}  }
class C{  synchronized boolean readyToFallBackToPrimaryHost(){  return this.enableFallBackToPrimaryHost && connectedToSecondaryHost() && (secondsBeforeRetryPrimaryHostIsMet() || queriesBeforeRetryPrimaryHostIsMet());}  }
class C{  public ParsingReader extract(final Path file) throws IOException, TikaException {  return extract(file,new Metadata());}  }
class C{  protected void validateUsers(org.oscm.xsd.User[] param){}  }
class C{  public CpcLocalRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);  this.sourceGraph=graphWrapper.getGraph();}  }
class C{  @Override public ByteBuffer toMedia(Object object) throws BeanConversionException {  try {    JAXBContext jaxbContext=JAXBContext.newInstance(object.getClass());    Marshaller marshaller=jaxbContext.createMarshaller();    StringWriter stringWriter=new StringWriter();    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);    marshaller.marshal(object,stringWriter);    return ByteBuffer.wrap(stringWriter.toString().getBytes(Charset.defaultCharset()));  } catch (  JAXBException e) {    throw new BeanConversionException("Unable to perform object to xml conversion",e);  }}  }
class C{  public V put(K key,V value){  DataUtils.checkArgument(value != null,"The value may not be null");  return set(key,value);}  }
class C{  public RemoveAllPRMessage createPRMessagesNotifyOnly(int bucketId){  final EntryEventImpl event=getBaseEvent();  RemoveAllPRMessage prMsg=new RemoveAllPRMessage(bucketId,removeAllDataSize,true,event.isPossibleDuplicate(),!event.isGenerateCallbacks(),event.getCallbackArgument());  if (event.getContext() != null) {    prMsg.setBridgeContext(event.getContext());  }  for (int i=0; i < removeAllDataSize; i++) {    prMsg.addEntry(removeAllData[i]);  }  return prMsg;}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public Config(){  this(null,null,!DISABLE_PERSIST_BACKUP,!DISABLE_REGISTER_INTEREST);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case B1:    return isSetB1();case B10:  return isSetB10();case B100:return isSetB100();case CHECK_TRUE:return isSetCheck_true();case B1000:return isSetB1000();case CHECK_FALSE:return isSetCheck_false();case VERTWO2000:return isSetVertwo2000();case A_SET2500:return isSetA_set2500();case VERTWO3000:return isSetVertwo3000();case BIG_NUMBERS:return isSetBig_numbers();}throw new IllegalStateException();}  }
class C{  @Override public String toString(){  return "MembershipAttributesData [lossAction=" + lossAction + ", requiredRoles="+ requiredRoles+ ", resumptionAction="+ resumptionAction+ "]";}  }
class C{  public SnmpAdaptorServer(InetAddressAcl acl){  this(false,acl,com.sun.jmx.snmp.ServiceName.SNMP_ADAPTOR_PORT,null);}  }
class C{  public static Color rgba(int rgb,int alpha){  if (alpha > 255 || alpha < 0) {    throw new ColorRangeException(alpha);  }  return rgbac(rgb,alpha);}  }
class C{  public static DoubleMatrix2D pow(DoubleMatrix2D A,DoubleMatrix2D B){  return A.assign(B,F.pow);}  }
class C{  public String key(){  assert cpKey != null;  return cpKey;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public Fire(){  GeneralPath gp=new GeneralPath();  gp.moveTo(-1,0);  gp.lineTo(-3,1);  gp.lineTo(-5,0);  gp.lineTo(-3,-1);  gp.closePath();  shape=gp;}  }
class C{  private void initializeState(State current){  InitializationUtils.initialize(current);  if (current.documentExpirationTimeMicros <= 0) {    current.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }}  }
class C{  public boolean isScreenOn(){  return mScreenOn;}  }
class C{  public final void testDSAPublicKeySpec(){  KeySpec ks=new DSAPublicKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertTrue(ks instanceof DSAPublicKeySpec);}  }
class C{  private void compactSegments(){  Segment compactSegment=manager.createSegment(SegmentDescriptor.builder().withId(segment.descriptor().id()).withVersion(segment.descriptor().version() + 1).withIndex(segment.descriptor().index()).withMaxSegmentSize(segment.descriptor().maxSegmentSize()).withMaxEntries(segment.descriptor().maxEntries()).build());  compactEntries(segment,compactSegment);  manager.replaceSegments(Collections.singletonList(segment),compactSegment);  mergeReleasedEntries(segment,compactSegment);  segment.close();  segment.delete();}  }
class C{  void addNoResultAction(NoResultAction action){  NoResultAction[] actions=new NoResultAction[noResultActions.length + 1];  System.arraycopy(noResultActions,0,actions,0,noResultActions.length);  actions[noResultActions.length]=action;  noResultActions=actions;}  }
class C{  final public MutableString insert(final int index,final float f){  return insert(index,String.valueOf(f));}  }
class C{  protected String matlabHeader(){  StringBuffer result;  int i;  result=new StringBuffer();  result.append("% Relation: " + getInstances().relationName() + "\n");  result.append("% Generated on: " + new Date() + "\n");  result.append("% Generated by: WEKA " + Version.VERSION + "\n");  result.append("%\n");  result.append("%  ");  for (i=0; i < getInstances().numAttributes(); i++) {    if (i > 0) {      result.append((m_UseTabs ? "\t   " : "    "));    }    result.append(Utils.padRight(getInstances().attribute(i).name(),(m_UseDouble ? 16 : 8) + 5));  }  return result.toString();}  }
class C{  public static void generateSeedList(FileSystem fs,Path urlPath,List<String> urls) throws IOException {  generateSeedList(fs,urlPath,urls,new ArrayList<String>());}  }
class C{  @Override protected void sendFunctionGroup4(){  DCCppMessage msg=DCCppMessage.makeFunctionGroup4OpsMsg(this.getDccAddress(),f13,f14,f15,f16,f17,f18,f19,f20);  queueMessage(msg,THROTTLEIDLE);}  }
class C{  public static Integer computeNOR(ArrayList<Integer> inputs){  for (  Integer i : inputs) {    if (i == 1) {      return 0;    }  }  return 1;}  }
class C{  @Override public void close(){  if (parserThread.isAlive()) {    parserThread.interrupt();  }  if (readerThread.isAlive()) {    readerThread.interrupt();  }  try {    lineReader.close();  } catch (  IOException e) {    logger.warn(e);  }  try {    pipeOut.close();  } catch (  IOException e) {    logger.warn(e);  }  try {    pipeIn.close();  } catch (  IOException e) {    logger.warn(e);  }}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiDecode=DECODABET[source[i] & 0xFF];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=source[i];        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (source[i] == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character decimal %d in array position %d",((int)source[i]) & 0xFF,i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public IfExpression(Predicate test,Expression thenExpr,Expression elseExpr){  m_test=test;  m_then=thenExpr;  m_else=elseExpr;}  }
class C{  public boolean isInRange(double value,double min,double max){  return DOUBLE_VALIDATOR.isInRange(value,min,max);}  }
class C{  public void addText(String scriptText){  this.scriptText=getProject().replaceProperties(scriptText);}  }
class C{  public FixedSecureRandom(boolean intPad,byte[] value){  this(intPad,new byte[][]{value});}  }
class C{  public File createPDF(File file){  ReportEngine re=ReportEngine.get(getCtx(),ReportEngine.SHIPMENT,getM_InOut_ID(),get_TrxName());  if (re == null)   return null;  return re.getPDF(file);}  }
class C{  public int numInstances(){  return (m_End - m_Start + 1);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public String toString(int ident){  String spaces=WbXmlLiterals.identString(ident);  StringBuilder sb=new StringBuilder(spaces);  sb.append(this.getClass().getSimpleName());  sb.append(": ");  sb.append(name);  sb.append("=");  for (  String v : values) {    sb.append('"');    sb.append(v);    sb.append('"');    sb.append("|");  }  String res=sb.toString();  return res.substring(0,res.length() - 1);}  }
class C{  public void removeLayer(long theLayerId){  Layer layer=layersMap.remove(theLayerId);  layers.remove(layer);}  }
class C{  private void externalCompare() throws jplag.ExitException {  int size=submissions.size();  SortedVector<AllMatches> avgmatches=new SortedVector<AllMatches>(new AllMatches.AvgComparator());  SortedVector<AllMatches> maxmatches=new SortedVector<AllMatches>(new AllMatches.MaxComparator());  int[] dist=new int[10];  print("Comparing: " + size + " submissions\n",null);  options.setState(Options.COMPARING);  options.setProgress(0);  long totalComparisons=(size * (size - 1)) / 2, count=0, comparisons=0;  int index=0;  AllMatches match;  Submission s1, s2;  long remain;  String totalTimeStr, remainTime;  print("Checking memory size...\n",null);  index=fillMemory(0,size);  long startTime;  long totalTime=0;  int startA=0;  int endA=index / 2;  int startB=endA + 1;  int endB=index;  int i, j;  do {    startTime=System.currentTimeMillis();    print("Comparing block A (" + startA + "-"+ endA+ ") to block A\n",null);    for (i=startA; i <= endA; i++) {      options.setProgress((int)(count * 100 / totalComparisons));      s1=submissions.elementAt(i);      if (s1.struct == null) {        count+=(endA - i);        continue;      }      for (j=(i + 1); j <= endA; j++) {        s2=submissions.elementAt(j);        if (s2.struct == null) {          count++;          continue;        }        match=this.gSTiling.compare(s1,s2);        registerMatch(match,dist,avgmatches,maxmatches,null,i,j);        comparisons++;        count++;      }    }    options.setProgress((int)(count * 100 / totalComparisons));    print("\n",null);    totalTime+=System.currentTimeMillis() - startTime;    if (startA == startB)     break;    do {      totalTimeStr="" + ((totalTime / 3600000 > 0) ? (totalTime / 3600000) + " h " : "") + ((totalTime / 60000 > 0) ? ((totalTime / 60000) % 60) + " min " : "")+ (totalTime / 1000 % 60)+ " sec";      if (comparisons != 0)       remain=totalTime * (totalComparisons - count) / comparisons; else       remain=0;      remainTime="" + ((remain / 3600000 > 0) ? (remain / 3600000) + " h " : "") + ((remain / 60000 > 0) ? ((remain / 60000) % 60) + " min " : "")+ (remain / 1000 % 60)+ " sec";      print("Progress: " + (100 * count) / totalComparisons + "%\nTime used for comparisons: " + totalTimeStr + "\nRemaining time (estimate): " + remainTime + "\n",null);      startTime=System.currentTimeMillis();      print("Comparing block A (" + startA + "-"+ endA+ ") to block B ("+ startB+ "-"+ endB+ ")\n",null);      for (i=startB; i <= endB; i++) {        options.setProgress((int)(count * 100 / totalComparisons));        s1=submissions.elementAt(i);        if (s1.struct == null) {          count+=(endA - startA + 1);          continue;        }        for (j=startA; j <= endA; j++) {          s2=submissions.elementAt(j);          if (s2.struct == null) {            count++;            continue;          }          match=this.gSTiling.compare(s1,s2);          registerMatch(match,dist,avgmatches,maxmatches,null,i,j);          comparisons++;          count++;        }        s1.struct=null;      }      options.setProgress((int)(count * 100 / totalComparisons));      print("\n",null);      totalTime+=System.currentTimeMillis() - startTime;      if (endB == size - 1) {        totalTimeStr="" + ((totalTime / 3600000 > 0) ? (totalTime / 3600000) + " h " : "") + ((totalTime / 60000 > 0) ? ((totalTime / 60000) % 60) + " min " : "")+ (totalTime / 1000 % 60)+ " sec";        remain=totalTime * (totalComparisons - count) / comparisons;        remainTime="" + ((remain / 3600000 > 0) ? (remain / 3600000) + " h " : "") + ((remain / 60000 > 0) ? ((remain / 60000) % 60) + " min " : "")+ (remain / 1000 % 60)+ " sec";        print("Progress: " + (100 * count) / totalComparisons + "%\nTime used for comparisons: " + totalTimeStr + "\nRemaining time (estimate): " + remainTime + "\n",null);        break;      }      runtime.runFinalization();      runtime.gc();      Thread.yield();      print("Finding next B\n",null);      index=fillMemory(endB + 1,size);      startB=endB + 1;      endB=index;    } while (true);    for (i=startA; i <= endA; i++)     submissions.elementAt(i).struct=null;    runtime.runFinalization();    runtime.gc();    Thread.yield();    print("Find next A.\n",null);    index=fillMemory(endA + 1,size);    if (index != size - 1) {      startA=endA + 1;      endA=startA + (index - startA + 1) / 2;      startB=endA + 1;      endB=index;    } else {      startA=startB;      endA=endB=index;    }  } while (true);  totalTime+=System.currentTimeMillis() - startTime;  totalTimeStr="" + ((totalTime / 3600000 > 0) ? (totalTime / 3600000) + " h " : "") + ((totalTime / 60000 > 0) ? ((totalTime / 60000) % 60000) + " min " : "")+ (totalTime / 1000 % 60)+ " sec";  print("Total comparison time: " + totalTimeStr + "\nComparisons: "+ count+ "/"+ comparisons+ "/"+ totalComparisons+ "\n",null);  for (i=startA; i <= endA; i++)   submissions.elementAt(i).struct=null;  runtime.runFinalization();  runtime.gc();  Thread.yield();  Cluster cluster=null;  if (options.clustering)   cluster=this.clusters.calculateClustering(submissions);  writeResults(dist,avgmatches,maxmatches,null,cluster);}  }
class C{  public static void forceVolumeControlStream(AudioManager receiver,int streamType){  CompatUtils.invoke(receiver,null,METHOD_forceVolumeControlStream,streamType);}  }
class C{  public static Model asReadOnlyModel(Model m){  return helper.asReadOnlyModel(m);}  }
class C{  public BufferPool(int bufferLength){  Assertions.checkArgument(bufferLength > 0);  this.bufferLength=bufferLength;  this.recycledBuffers=new byte[INITIAL_RECYCLED_BUFFERS_CAPACITY][];}  }
class C{  private void checkRoundFinished(){  for (  Player player : _players) {    if (player.getClientVO().playerState.equals(PlayerState.PLAYING)) {      return;    }  }  _roundIndex++;  if (_debug)   Log.d(TAG,"checkRoundFinished: " + _roundIndex);  if (_roundIndex < _rounds.size()) {    broadcastMessage(new S2CRoundFinishedMessage());  } else {    broadcastMessage(new S2CGameFinishedMessage(getWinnerId()));  }}  }
class C{  public Vector3 add(Vector3 that){  x+=that.x;  y+=that.y;  z+=that.z;  return this;}  }
class C{  protected boolean attachError(Mail originalMail) throws MessagingException {  return (isStatic()) ? this.attachError : attachError();}  }
class C{  @DSComment("Package priviledge") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:40.840 -0500",hash_original_method="F5167F20A872A63C36DAF85A2B000FB5",hash_generated_method="F5167F20A872A63C36DAF85A2B000FB5") void startAnimation(){  if (getVisibility() != VISIBLE) {    return;  }  if (mIndeterminateDrawable instanceof Animatable) {    mShouldStartAnimationDrawable=true;    mAnimation=null;  } else {    if (mInterpolator == null) {      mInterpolator=new LinearInterpolator();    }    mTransformation=new Transformation();    mAnimation=new AlphaAnimation(0.0f,1.0f);    mAnimation.setRepeatMode(mBehavior);    mAnimation.setRepeatCount(Animation.INFINITE);    mAnimation.setDuration(mDuration);    mAnimation.setInterpolator(mInterpolator);    mAnimation.setStartTime(Animation.START_ON_FIRST_FRAME);  }  postInvalidate();}  }
class C{  public Div(){  super("/",2);}  }
class C{  public void process(Instance toPredict,Classifier classifier,Evaluation eval){  double pred;  double[] values;  int i;  try {    pred=0;    double[] preds=null;    double probActual=0;    double probNext=0;    int mappedClass=-1;    Instance classMissing=(Instance)toPredict.copy();    classMissing.setDataset(toPredict.dataset());    if (classifier instanceof weka.classifiers.misc.InputMappedClassifier && toPredict.classAttribute().isNominal()) {      toPredict=(Instance)toPredict.copy();      toPredict=((weka.classifiers.misc.InputMappedClassifier)classifier).constructMappedInstance(toPredict);      mappedClass=((weka.classifiers.misc.InputMappedClassifier)classifier).getMappedClassIndex();      classMissing.setMissing(mappedClass);    } else {      classMissing.setClassMissing();    }    if (toPredict.classAttribute().isNominal()) {      preds=classifier.distributionForInstance(classMissing);      pred=(Utils.sum(preds) == 0) ? Utils.missingValue() : Utils.maxIndex(preds);      probActual=(Utils.sum(preds) == 0) ? Utils.missingValue() : (!Utils.isMissingValue(toPredict.classIndex()) ? preds[(int)toPredict.classValue()] : preds[Utils.maxIndex(preds)]);      for (i=0; i < toPredict.classAttribute().numValues(); i++) {        if (i != (int)toPredict.classValue() && preds[i] > probNext) {          probNext=preds[i];        }      }      eval.evaluationForSingleInstance(preds,toPredict,true);    } else {      pred=eval.evaluateModelOnceAndRecordPrediction(classifier,toPredict);    }    if (!m_SaveForVisualization) {      return;    }    if (m_PlotInstances != null) {      boolean isNominal=toPredict.classAttribute().isNominal();      values=new double[m_PlotInstances.numAttributes()];      for (i=0; i < m_PlotInstances.numAttributes(); i++) {        if (i < toPredict.classIndex()) {          values[i]=toPredict.value(i);        } else         if (i == toPredict.classIndex()) {          if (isNominal) {            values[i]=probActual - probNext;            values[i + 1]=pred;            values[i + 2]=toPredict.value(i);            i+=2;          } else {            values[i]=pred;            values[i + 1]=toPredict.value(i);            i++;          }        } else {          if (isNominal) {            values[i]=toPredict.value(i - 2);          } else {            values[i]=toPredict.value(i - 1);          }        }      }      m_PlotInstances.add(new DenseInstance(1.0,values));      if (toPredict.classAttribute().isNominal()) {        if (toPredict.isMissing(toPredict.classIndex()) || Utils.isMissingValue(pred)) {          m_PlotShapes.add(new Integer(Plot2D.MISSING_SHAPE));        } else         if (pred != toPredict.classValue()) {          m_PlotShapes.add(new Integer(Plot2D.ERROR_SHAPE));        } else {          m_PlotShapes.add(new Integer(Plot2D.CONST_AUTOMATIC_SHAPE));        }        if (m_pointSizeProportionalToMargin) {          m_PlotSizes.add(new Double(probActual - probNext));        } else {          int sizeAdj=0;          if (pred != toPredict.classValue()) {            sizeAdj=1;          }          m_PlotSizes.add(new Integer(Plot2D.DEFAULT_SHAPE_SIZE + sizeAdj));        }      } else {        Double errd=null;        if (!toPredict.isMissing(toPredict.classIndex()) && !Utils.isMissingValue(pred)) {          errd=new Double(pred - toPredict.classValue());          m_PlotShapes.add(new Integer(Plot2D.CONST_AUTOMATIC_SHAPE));        } else {          m_PlotShapes.add(new Integer(Plot2D.MISSING_SHAPE));        }        m_PlotSizes.add(errd);      }    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  protected RoutedRequest handleResponse(RoutedRequest roureq,HttpResponse response,HttpContext context) throws HttpException, IOException {  HttpRoute route=roureq.getRoute();  HttpHost proxy=route.getProxyHost();  RequestWrapper request=roureq.getRequest();  HttpParams params=request.getParams();  if (HttpClientParams.isRedirecting(params) && this.redirectHandler.isRedirectRequested(response,context)) {    if (redirectCount >= maxRedirects) {      throw new RedirectException("Maximum redirects (" + maxRedirects + ") exceeded");    }    redirectCount++;    URI uri=this.redirectHandler.getLocationURI(response,context);    HttpHost newTarget=new HttpHost(uri.getHost(),uri.getPort(),uri.getScheme());    HttpGet redirect=new HttpGet(uri);    HttpRequest orig=request.getOriginal();    redirect.setHeaders(orig.getAllHeaders());    RequestWrapper wrapper=new RequestWrapper(redirect);    wrapper.setParams(params);    HttpRoute newRoute=determineRoute(newTarget,wrapper,context);    RoutedRequest newRequest=new RoutedRequest(wrapper,newRoute);    if (this.log.isDebugEnabled()) {      this.log.debug("Redirecting to '" + uri + "' via "+ newRoute);    }    return newRequest;  }  CredentialsProvider credsProvider=(CredentialsProvider)context.getAttribute(ClientContext.CREDS_PROVIDER);  if (credsProvider != null && HttpClientParams.isAuthenticating(params)) {    if (this.targetAuthHandler.isAuthenticationRequested(response,context)) {      HttpHost target=(HttpHost)context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);      if (target == null) {        target=route.getTargetHost();      }      this.log.debug("Target requested authentication");      Map<String,Header> challenges=this.targetAuthHandler.getChallenges(response,context);      try {        processChallenges(challenges,this.targetAuthState,this.targetAuthHandler,response,context);      } catch (      AuthenticationException ex) {        if (this.log.isWarnEnabled()) {          this.log.warn("Authentication error: " + ex.getMessage());          return null;        }      }      updateAuthState(this.targetAuthState,target,credsProvider);      if (this.targetAuthState.getCredentials() != null) {        return roureq;      } else {        return null;      }    } else {      this.targetAuthState.setAuthScope(null);    }    if (this.proxyAuthHandler.isAuthenticationRequested(response,context)) {      this.log.debug("Proxy requested authentication");      Map<String,Header> challenges=this.proxyAuthHandler.getChallenges(response,context);      try {        processChallenges(challenges,this.proxyAuthState,this.proxyAuthHandler,response,context);      } catch (      AuthenticationException ex) {        if (this.log.isWarnEnabled()) {          this.log.warn("Authentication error: " + ex.getMessage());          return null;        }      }      updateAuthState(this.proxyAuthState,proxy,credsProvider);      if (this.proxyAuthState.getCredentials() != null) {        return roureq;      } else {        return null;      }    } else {      this.proxyAuthState.setAuthScope(null);    }  }  return null;}  }
class C{  CryptoOutputStream(final OutputStream outputStream,final MessageCryptoHandler<K> cryptoHandler){  outputStream_=Utils.assertNonNull(outputStream,"outputStream");  cryptoHandler_=Utils.assertNonNull(cryptoHandler,"cryptoHandler");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int v=getInt(stack);  CaptureDeviceInput conn=getCapDevInput(stack);  if (conn != null)   conn.setContrast(v);  return null;}  }
class C{  @Override protected byte[] decrypt(byte type,byte[] fragment,int offset,int len){  byte[] data=decCipher.update(fragment,offset,len);  byte[] content;  if (block_size != 0) {    int padding_length=data[data.length - 1] & 0xFF;    for (int i=0; i < padding_length; i++) {      if ((data[data.length - 2 - i] & 0xFF) != padding_length) {        throw new AlertException(AlertProtocol.DECRYPTION_FAILED,new SSLProtocolException("Received message has bad padding"));      }    }    content=new byte[data.length - hash_size - padding_length- 1];  } else {    content=new byte[data.length - hash_size];  }  byte[] mac_value;  mac_material_part[0]=type;  mac_material_part[1]=(byte)((0x00FF00 & content.length) >> 8);  mac_material_part[2]=(byte)(0x0000FF & content.length);  messageDigest.update(mac_read_secret);  messageDigest.update(pad_1);  messageDigest.update(read_seq_num);  messageDigest.update(mac_material_part);  messageDigest.update(data,0,content.length);  mac_value=messageDigest.digest();  messageDigest.update(mac_read_secret);  messageDigest.update(pad_2);  messageDigest.update(mac_value);  mac_value=messageDigest.digest();  if (logger != null) {    logger.println("Decrypted:");    logger.print(data);    logger.println("Expected mac value:");    logger.print(mac_value);  }  for (int i=0; i < hash_size; i++) {    if (mac_value[i] != data[i + content.length]) {      throw new AlertException(AlertProtocol.BAD_RECORD_MAC,new SSLProtocolException("Bad record MAC"));    }  }  System.arraycopy(data,0,content,0,content.length);  incSequenceNumber(read_seq_num);  return content;}  }
class C{  public void revertToDefault(int row){}  }
class C{  public DImportKeyPairOpenSsl(JFrame parent){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  initComponents();}  }
class C{  public String toString(DoubleMatrix2D matrix){  return super.toString(matrix);}  }
class C{  private float clip(final float val){  float tempval=val;  if (val > 1) {    tempval=1;  }  if (val < 0) {    tempval=0;  }  return tempval;}  }
class C{  CaseInsensitiveMapImpl(Object2ObjectMap<String,V> m,float f){  super(m,f,CaseInsensitiveHashingStrategy.INSTANCE);}  }
class C{  public void addDocument(String name,int parentDivId,String fileExt,InputStream inputStreamDocumentFile) throws Exception {  int sortOrder=m_documents.getNextSortOrder();  addDocument(name,parentDivId,fileExt,sortOrder,inputStreamDocumentFile,null);}  }
class C{  private List _internalGetAsArray(final String path) throws IllegalArgumentException {  final List tokens=new ResultTokenizer(path).tokenize(namespaceAliases);  if (tokens.isEmpty()) {    return tokens;  }  final StructuredContent obj=apply(root,tokens,0);  if (obj == null) {    return new Vector();  }  String key=(String)tokens.get(tokens.size() - 1);  if ((tokens.size() > 1) && SELECT_GLOB.equals(tokens.get(tokens.size() - 2))) {    return obj.getDescendants(key);  }  if (key.startsWith("@")) {    key=key.substring(1);    String v=obj.getAttribute(key);    List array=new Vector();    if (v != null) {      array.add(new MapContent(v,obj));    }    return array;  } else   if (key.charAt(0) == Result.ARRAY_END && tokens.size() >= 4) {    List array=new Vector();    array.add(obj);    return array;  }  return obj.getChildren(key);}  }
class C{  public void postCompileStep(Compiler compiler){}  }
class C{  public SkyColorLayer(){}  }
class C{  private void saveDescription(){  try {    m_project.getConfiguration().setDescription(m_stdEditPanel.getDescription());  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00172: " + "Could not save project description";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The new description of the project '%s' could not be saved.",m_project.getConfiguration().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The project keeps its old description."});    NaviErrorDialog.show(SwingUtilities.getWindowAncestor(CProjectNodeComponent.this),innerMessage,innerDescription,e);  }}  }
class C{  private static String determineNodeText(final NaviNode node){  if (node.getRawNode() instanceof INaviCodeNode) {    final INaviCodeNode cnode=(INaviCodeNode)node.getRawNode();    return String.format("Basic Block: %s",cnode.getAddress().toHexString());  } else   if (node.getRawNode() instanceof INaviFunctionNode) {    final INaviFunctionNode fnode=(INaviFunctionNode)node.getRawNode();    return String.format("Function: %s (%s)",fnode.getFunction().getName(),fnode.getFunction().getAddress().toHexString());  } else   if (node.getRawNode() instanceof INaviTextNode) {    final INaviTextNode tnode=(INaviTextNode)node.getRawNode();    final List<IComment> comment=tnode.getComments();    final String firstLine=(comment.isEmpty()) ? "" : comment.get(1).getComment();    final int firstLineBreak=Math.min(firstLine.indexOf('\n'),firstLine.indexOf('\r'));    final int toDisplay=Math.min(Math.min(15,firstLineBreak == -1 ? Integer.MAX_VALUE : firstLineBreak),firstLine.length());    return String.format("Text: %s",firstLine.substring(0,toDisplay));  } else   if (node.getRawNode() instanceof INaviGroupNode) {    final INaviGroupNode gnode=(INaviGroupNode)node.getRawNode();    final List<IComment> comment=gnode.getComments();    final String firstLine=(comment.isEmpty()) ? "" : comment.get(0).getComment();    final int firstLineBreak=Math.min(firstLine.indexOf('\n'),firstLine.indexOf('\r'));    final int toDisplay=Math.min(Math.min(15,firstLineBreak == -1 ? Integer.MAX_VALUE : firstLineBreak),firstLine.length());    return String.format("Group: %s",firstLine.substring(0,toDisplay));  } else {    throw new IllegalStateException("IE01150: Unknown node type");  }}  }
class C{  public void clearAttributes(){  attributes.clear();}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener listener){  propertyChangeSupport.addPropertyChangeListener(listener);}  }
class C{  public static InterestResultPolicy fromOrdinal(byte ordinal){  return VALUES[ordinal];}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.EXPRESSION_LIST__EXPRS:    return exprs != null && !exprs.isEmpty();}return super.eIsSet(featureID);}  }
class C{  void updateTime(){  if (clock.getRun() || showTime) {    showTime=false;    setTimeLabel();    timeLabel.setVisible(true);  }}  }
class C{  public Element writeSaver(Element parent,Object o,String name) throws Exception {  Element node;  weka.core.converters.Saver saver;  String prefix;  String dir;  boolean known;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  saver=(weka.core.converters.Saver)o;  node=addElement(parent,name,saver.getClass().getName(),false);  known=true;  prefix="";  dir="";  if (saver instanceof weka.core.converters.AbstractFileSaver) {    ((weka.core.converters.AbstractFileSaver)saver).retrieveFile();    prefix=((weka.core.converters.AbstractFileSaver)saver).filePrefix();    dir=((weka.core.converters.AbstractFileSaver)saver).retrieveDir();    dir=dir.replace('\\','/');  } else {    known=false;  }  if (!known) {    System.out.println("WARNING: unknown saver class '" + saver.getClass().getName() + "' - cannot retrieve file!");  }  Boolean relativeB=null;  if (saver instanceof weka.core.converters.FileSourcedConverter) {    boolean relative=((weka.core.converters.FileSourcedConverter)saver).getUseRelativePath();    relativeB=new Boolean(relative);  }  invokeWriteToXML(node,"",VAL_FILE);  invokeWriteToXML(node,dir,VAL_DIR);  invokeWriteToXML(node,prefix,VAL_PREFIX);  if (relativeB != null) {    invokeWriteToXML(node,relativeB.toString(),VAL_RELATIVE_PATH);  }  if (saver instanceof weka.core.OptionHandler) {    String[] opts=((weka.core.OptionHandler)saver).getOptions();    invokeWriteToXML(node,opts,VAL_OPTIONS);  }  return node;}  }
class C{  public void strategyError(StrategyRuleException strategyError){  this.cancel(true);}  }
class C{  public PsLinkedin(final Href thref,final Href ahref,final String lapp,final String lkey){  this.tkhref=thref;  this.apihref=ahref;  this.app=lapp;  this.key=lkey;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return sage.plugin.PluginEventManager.getInstance();}  }
class C{  public static QualityStats average(QualityStats[] stats){  QualityStats avg=new QualityStats(0,0);  if (stats.length == 0) {    return avg;  }  int m=0;  for (int i=0; i < stats.length; i++) {    avg.searchTime+=stats[i].searchTime;    avg.docNamesExtractTime+=stats[i].docNamesExtractTime;    if (stats[i].maxGoodPoints > 0) {      m++;      avg.numGoodPoints+=stats[i].numGoodPoints;      avg.numPoints+=stats[i].numPoints;      avg.pReleventSum+=stats[i].getAvp();      avg.recall+=stats[i].recall;      avg.mrr+=stats[i].getMRR();      avg.maxGoodPoints+=stats[i].maxGoodPoints;      for (int j=1; j < avg.pAt.length; j++) {        avg.pAt[j]+=stats[i].getPrecisionAt(j);      }    }  }  assert m > 0 : "Fishy: no \"good\" queries!";  avg.searchTime/=stats.length;  avg.docNamesExtractTime/=stats.length;  avg.numGoodPoints/=m;  avg.numPoints/=m;  avg.recall/=m;  avg.mrr/=m;  avg.maxGoodPoints/=m;  for (int j=1; j < avg.pAt.length; j++) {    avg.pAt[j]/=m;  }  avg.pReleventSum/=m;  avg.pReleventSum*=avg.maxGoodPoints;  return avg;}  }
class C{  RegisterOperand makeLocal(int i,TypeReference type){  return new RegisterOperand(localReg(i,type),type);}  }
class C{  private void checkIfIamLeader(final ElectionContext context,boolean replacement) throws KeeperException, InterruptedException, IOException {  context.checkIfIamLeaderFired();  final String holdElectionPath=context.electionPath + ELECTION_NODE;  List<String> seqs=zkClient.getChildren(holdElectionPath,null,true);  sortSeqs(seqs);  String leaderSeqNodeName=context.leaderSeqPath.substring(context.leaderSeqPath.lastIndexOf('/') + 1);  if (!seqs.contains(leaderSeqNodeName)) {    log.warn("Our node is no longer in line to be leader");    return;  }  String prefix=zkClient.getSolrZooKeeper().getSessionId() + "-" + context.id+ "-";  Iterator<String> it=seqs.iterator();  while (it.hasNext()) {    String elec=it.next();    if (!elec.equals(leaderSeqNodeName) && elec.startsWith(prefix)) {      try {        String toDelete=holdElectionPath + "/" + elec;        log.warn("Deleting duplicate registration: {}",toDelete);        zkClient.delete(toDelete,-1,true);      } catch (      KeeperException.NoNodeException e) {      }      it.remove();    }  }  if (leaderSeqNodeName.equals(seqs.get(0))) {    try {      runIamLeaderProcess(context,replacement);    } catch (    KeeperException.NodeExistsException e) {      log.error("node exists",e);      retryElection(context,false);      return;    }  } else {    String toWatch=seqs.get(0);    for (    String node : seqs) {      if (leaderSeqNodeName.equals(node)) {        break;      }      toWatch=node;    }    try {      String watchedNode=holdElectionPath + "/" + toWatch;      zkClient.getData(watchedNode,watcher=new ElectionWatcher(context.leaderSeqPath,watchedNode,getSeq(context.leaderSeqPath),context),null,true);      log.debug("Watching path {} to know if I could be the leader",watchedNode);    } catch (    KeeperException.SessionExpiredException e) {      throw e;    }catch (    KeeperException.NoNodeException e) {      checkIfIamLeader(context,true);    }catch (    KeeperException e) {      log.warn("Failed setting watch",e);      checkIfIamLeader(context,true);    }  }}  }
class C{  public Transcripts(String userID){  this.userID=userID;  this.summaries=new ArrayList<Transcripts.TranscriptSummary>();}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int cols=0;  int rows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified.");    return;  }  try {    double[] data;    updateProgress("Calculating min values:",0);    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      imageNoData=image.getNoDataValue();      String label="Loop " + String.valueOf(a + 1) + " of "+ String.valueOf(numImages)+ ":";      if (a == 0) {        rows=image.getNumberRows();        cols=image.getNumberColumns();        outputNoData=imageNoData;        output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,outputNoData);        output.setPreferredPalette(image.getPreferredPalette());      } else {        if (image.getNumberColumns() != cols || image.getNumberRows() != rows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != imageNoData) {            z=output.getValue(row,col);            if (z != outputNoData) {              if ((data[col] * data[col]) > (z * z)) {                output.setValue(row,col,data[col]);              }            } else {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress(label,(int)progress);      }      image.close();      progress=a / (numImages - 1) * 100;      updateProgress("Calculating image average:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private Comparator<Resource> attributeComparison(String field){  return null;}  }
class C{  public boolean isBottom(){  return isBottom;}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  static Class<?> loadViewClass(Context context,String name) throws ClassNotFoundException {  return context.getClassLoader().loadClass(name).asSubclass(View.class);}  }
class C{  public void SetParent(int iParent,int nNode){  m_nParents[iParent]=nNode;}  }
class C{  public static PropertyValuesHolder ofFloat(String propertyName,float... values){  return new FloatPropertyValuesHolder(propertyName,values);}  }
class C{  public JavacPathFileManager(Context context,boolean register,Charset charset){  super(charset);  if (register)   context.put(JavaFileManager.class,this);  pathsForLocation=new HashMap<Location,PathsForLocation>();  fileSystems=new HashMap<Path,FileSystem>();  setContext(context);}  }
class C{  public TransferEntropyCalculatorKernel(){  super();  teKernelEstimator=new KernelEstimatorTransferEntropy();  teKernelEstimator.setNormalise(normalise);}  }
class C{  private UserData readUserData() throws IOException {  final UserData userData=new UserData();  userData.userDataSize=readFullBuffer(4).getInt();  userData.archiveHeaderOffset=readFullBuffer(4).getInt();  userData.userData=readFullBuffer(userData.userDataSize).array();  return userData;}  }
class C{  public UserAuthentication(){  ddb=new AmazonDynamoDBClient();  ddb.setRegion(RegionUtils.getRegion(Configuration.REGION));  try {    if (!doesTableExist(USER_TABLE)) {      createIdentityTable();    }  } catch (  DataAccessException e) {    throw new RuntimeException("Failed to create device table.",e);  }}  }
class C{  public void closeFile(boolean showCancel){  if (getCurrentIndex() == -1) {    return;  }  if (!saveChanges(showCancel)) {    return;  }  m_TabbedPane.removeTabAt(getCurrentIndex());  updateFrameTitle();  System.gc();}  }
class C{  public static void addGhoulChestplateTexture(Item chestplate,String res){  addGhoulChestplateTexture(chestplate,new ResourceLocation(res));}  }
class C{  public void testCarDemo() throws Exception {  Locale[] locales={Locale.ENGLISH,Locale.GERMAN,Locale.FRENCH,new Locale("es","")};  for (int i=0; i < locales.length; i++) {    resources=ResourceBundle.getBundle("carstore.bundles.Resources",locales[i]);    carBundles=new ResourceBundle[carBundleNames.length];    for (int j=0; j < carBundleNames.length; j++) {      carBundles[j]=ResourceBundle.getBundle(carBundleNames[j],locales[i]);    }    HtmlSubmitInput button=(HtmlSubmitInput)getAllElementsOfGivenClass(((HtmlPage)getInitialPage()),null,HtmlSubmitInput.class).get(i);    if (LOGGER.isLoggable(Level.FINE)) {      LOGGER.fine("Running test for language: " + button.asText());    }    doStoreFront((HtmlPage)button.click());  }}  }
class C{  public TypesAdapterFactory(){  if (modelPackage == null) {    modelPackage=TypesPackage.eINSTANCE;  }}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  if ((obj == null) || (obj.getClass() != getClass()))   return false;  BasicPermission bp=(BasicPermission)obj;  return getName().equals(bp.getName());}  }
class C{  void perform(SectionState state) throws SAXException {  state.addValidator(schema,getModeUsage());}  }
class C{  public Script out(String... outputNames){  outputVariables.addAll(Arrays.asList(outputNames));  return this;}  }
class C{  public int compare(final BigdataValue term1,final BigdataValue term2){  final IV<?,?> iv1=term1.getIV();  final IV<?,?> iv2=term2.getIV();  if (iv1 == null && iv2 == null)   return 0;  if (iv1 == null)   return -1;  if (iv2 == null)   return 1;  return iv1.compareTo(iv2);}  }
class C{  public void test_setIsNamespaceAware(){  spf.setNamespaceAware(true);  assertTrue(spf.isNamespaceAware());  spf.setNamespaceAware(false);  assertFalse(spf.isNamespaceAware());  spf.setNamespaceAware(true);  assertTrue(spf.isNamespaceAware());}  }
class C{  public boolean login(String username,String password) throws IOException {  user(username);  if (FTPReply.isPositiveCompletion(getReplyCode()))   return true;  if (!FTPReply.isPositiveIntermediate(getReplyCode()))   return false;  return FTPReply.isPositiveCompletion(pass(password));}  }
class C{  public void addUnmanagedTargetVolumeToUpdate(UnManagedVolume volume){  if (null == _unmanagedTargetVolumesToUpdate) {    _unmanagedTargetVolumesToUpdate=new ArrayList<UnManagedVolume>();  }  _unmanagedTargetVolumesToUpdate.add(volume);}  }
class C{  public void addPingUrl(String url){  _pingUrls.add(url);}  }
class C{  protected void error(String msg,Exception e) throws org.xml.sax.SAXException {  SAXSourceLocator locator=getLocator();  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  TransformerException pe;  if (!(e instanceof TransformerException)) {    pe=(null == e) ? new TransformerException(msg,locator) : new TransformerException(msg,locator,e);  } else   pe=(TransformerException)e;  if (null != handler) {    try {      handler.error(pe);    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else   throw new org.xml.sax.SAXException(pe);}  }
class C{  public char[] chars(){  return ref.chars;}  }
class C{  private void loadImage(WebView webView,Uri imageUri,String viewportContent,String css){  String html="<html><head><meta name='viewport' content='" + viewportContent + "'/>"+ "<style type='text/css'>"+ css+ "</style></head>"+ "<body> <div class='wrap'>"+ "<img "+ ("src='" + imageUri.toString() + "'")+ " onerror='this.style.display=\"none\"' id='image' "+ viewportContent+ "/>"+ "</div>"+ "</body>"+ "</html>";  String mime="text/html";  String encoding="utf-8";  webView.loadDataWithBaseURL(null,html,mime,encoding,null);  webView.requestLayout();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o instanceof sage.vfs.MediaNode)   o=((sage.vfs.MediaNode)o).getDataObject();  return Boolean.valueOf(o instanceof SeriesInfo);}  }
class C{  public static void writeVectorsInTextFormat(String vectorFileName,FlagConfig flagConfig,VectorStore objectVectors) throws IOException {  VerbatimLogger.info("About to write " + objectVectors.getNumVectors() + " vectors of dimension "+ flagConfig.dimension()+ " to text file: "+ vectorFileName+ " ... ");  BufferedWriter outBuf=new BufferedWriter(new FileWriter(vectorFileName));  writeToTextBuffer(objectVectors,flagConfig,outBuf);  outBuf.close();  VerbatimLogger.info("finished writing vectors.\n");}  }
class C{  public boolean LT(Address addr2){  return value.LT(addr2.value);}  }
class C{  private void initializeLiveAttributes(){  x=createLiveAnimatedNumber(null,SVG_X_ATTRIBUTE,0f);  y=createLiveAnimatedNumber(null,SVG_Y_ATTRIBUTE,0f);  z=createLiveAnimatedNumber(null,SVG_Z_ATTRIBUTE,0f);  pointsAtX=createLiveAnimatedNumber(null,SVG_POINTS_AT_X_ATTRIBUTE,0f);  pointsAtY=createLiveAnimatedNumber(null,SVG_POINTS_AT_Y_ATTRIBUTE,0f);  pointsAtZ=createLiveAnimatedNumber(null,SVG_POINTS_AT_Z_ATTRIBUTE,0f);  specularExponent=createLiveAnimatedNumber(null,SVG_SPECULAR_EXPONENT_ATTRIBUTE,1f);  limitingConeAngle=createLiveAnimatedNumber(null,SVG_LIMITING_CONE_ANGLE_ATTRIBUTE,0f);}  }
class C{  public static <T>HashSet<T> hashSet(int initialCapacity){  return new HashSet<T>(initialCapacity);}  }
class C{  public AddReviewerResult(String input){  this.input=input;}  }
class C{  public ResourceFilter projectRelativePath(String value){  return setMatcher(value,Matcher.projectRelativePath);}  }
class C{  public static double parseString(String value){  return Double.parseDouble(value);}  }
class C{  public void mapSource(IType type,char[] contents,IBinaryType info){  this.mapSource(type,contents,info,null);}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static ShoppingListsFragment newInstance(String encodedEmail){  ShoppingListsFragment fragment=new ShoppingListsFragment();  Bundle args=new Bundle();  args.putString(Constants.KEY_ENCODED_EMAIL,encodedEmail);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public void init(ServletConfig config){  this.context=config.getServletContext();}  }
class C{  public String nextElementName() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  if (p != PEEKED_ELEMENT_NAME) {    throw syntaxError("Expected XML Tag Element name, but have " + peek());  }  String result=nextUnquotedValue();  peeked=PEEKED_NONE;  pathNames[stackSize - 1]=result;  pushStack(XmlScope.ELEMENT_ATTRIBUTE);  return result;}  }
class C{  public RMIConnector(RMIServer rmiServer,Map<String,?> environment){  this(rmiServer,null,environment);}  }
class C{  public void saveSelection(IMiniTable miniTable){  log.info("");  ArrayList<Integer> results=new ArrayList<Integer>();  setSelection(null);  int rows=miniTable.getRowCount();  for (int i=0; i < rows; i++) {    IDColumn id=(IDColumn)miniTable.getValueAt(i,0);    if (id != null && id.isSelected())     results.add(id.getRecord_ID());  }  if (results.size() == 0)   return;  log.config("Selected #" + results.size());  setSelection(results);}  }
class C{  public void removeChildAtIndex(int index,boolean doCleanup){  CCSprite sprite=(CCSprite)children_.get(index);  removeChild(sprite,doCleanup);}  }
class C{  public boolean isSetCursorRequest(){  return this.cursorRequest != null;}  }
class C{  public static org.oscm.internal.vo.VOPricedEvent convertToUp(org.oscm.vo.VOPricedEvent oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOPricedEvent newVO=new org.oscm.internal.vo.VOPricedEvent();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setSteppedPrices(convertToUpVOSteppedPrice(oldVO.getSteppedPrices()));  newVO.setEventDefinition(convertToUp(oldVO.getEventDefinition()));  newVO.setEventPrice(oldVO.getEventPrice());  return newVO;}  }
class C{  public void clear(){synchronized (lock) {    for (int i=0; i < size; i++) {      elementData[i]=null;    }    size=0;  }}  }
class C{  @Override public void acceptTestSet(TestSetEvent e){  Instances test=e.getTestSet();  DataSetEvent d=new DataSetEvent(this,test);  acceptDataSet(d);}  }
class C{  public FreqDist(){  super();  counts=new HashMap<T,Integer>();}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  FaviterAppsDao.dropTable(db,ifExists);}  }
class C{  public static <NodeType>Collection<NodeType> collectNodes(final Collection<? extends NodeType> nodes,final INodeFilter<NodeType> filter){  Preconditions.checkNotNull(nodes,"Error: Nodes argument can't be null");  Preconditions.checkNotNull(filter,"Error: Filter argument can't be null");  final Collection<NodeType> filteredNodes=new ArrayList<NodeType>();  for (  final NodeType child : nodes) {    if (filter.qualifies(child)) {      filteredNodes.add(child);    }  }  return filteredNodes;}  }
class C{  private static Set<Integer> collectStatementIndexesWithSymbolicVariables(TestChromosome testChromosome,LocalSearchObjective<TestChromosome> localSearchObjective){  int lastPosition=testChromosome.size() - 1;  if (testChromosome.getLastExecutionResult() != null && !testChromosome.isChanged()) {    Integer lastPos=testChromosome.getLastExecutionResult().getFirstPositionOfThrownException();    if (lastPos != null)     lastPosition=lastPos.intValue();  }  TestCase test=testChromosome.getTestCase();  Set<Integer> targetStatementIndexes=new HashSet<Integer>();  for (int i=lastPosition; i >= 0; i--) {    if (LocalSearchBudget.getInstance().isFinished())     break;    if (localSearchObjective.isDone()) {      break;    }    if (i >= testChromosome.size()) {      logger.warn("Test size decreased unexpectedly during local search, aborting local search");      logger.warn(testChromosome.getTestCase().toCode());      break;    }    final Class<?> targetClass=Properties.getTargetClassAndDontInitialise();    if (!test.hasReferences(test.getStatement(i).getReturnValue()) && !test.getStatement(i).getReturnClass().equals(targetClass)) {      logger.info("Return value of statement " + i + " is not referenced and not SUT, not doing local search");      continue;    }    targetStatementIndexes.add(i);  }  return targetStatementIndexes;}  }
class C{  public void debug(String line){  if (shuttingDown) {    return;  }synchronized (cachedDebugMessages) {    if (g == null) {      cachedDebugMessages.add(line);    } else {      if (!cachedDebugMessages.isEmpty()) {        g.printDebug("[Start of cached messages]");        for (        String cachedLine : cachedDebugMessages) {          g.printDebug(cachedLine);        }        g.printDebug("[End of cached messages]");        cachedDebugMessages.clear();      }      g.printDebug(line);    }  }}  }
class C{  public static RightThreadedBinaryTree<Integer> buildRightLinear(int n){  RightThreadedBinaryTree<Integer> bt=new RightThreadedBinaryTree<Integer>();  for (int i=0; i < n; i++) {    bt.insert(i);  }  return bt;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private void reheapify(int startingElement){  int current=startingElement;  int parent=numElements / 2;  while (parent > 0 && queue[parent].priority < queue[current].priority) {    PriorityQueueNode tmp=queue[parent];    queue[parent]=queue[current];    queue[current]=tmp;    current=parent;    parent=parent / 2;  }}  }
class C{  public Action chooseAction(Map<Direction,Occupant> neighbors){  return new Action(Action.ActionType.STAY);}  }
class C{  public static Test suite(){  return new TestSuite(RenameAttributeTest.class);}  }
class C{  public void onRefresh(boolean isRefreshing){  if (mOuterScroller != null) {    mOuterScroller.updateRefreshState(isRefreshing);  }}  }
class C{  public ReviewResponse reviews(String packageName,REVIEW_SORT sort,Integer offset,Integer numberOfResult) throws IOException {  ResponseWrapper responseWrapper=executeGETRequest(REVIEWS_URL,new String[][]{{"doc",packageName},{"sort",(sort == null) ? null : String.valueOf(sort.value)},{"o",(offset == null) ? null : String.valueOf(offset)},{"n",(numberOfResult == null) ? null : String.valueOf(numberOfResult)}});  return responseWrapper.getPayload().getReviewResponse();}  }
class C{  public static void delete_app(String package_name){  InstalledApp app=find_app(package_name);  if (app != null) {    List<AppIcon> icons=find(AppIcon.class,"_owner = ?",app.get_package_name());    if (icons.size() != 1) {      Log.w(MainActivity.TAG,"[InstalledApp.delete_app] Deleting an app with " + icons.size() + " associated icons.");    }    for (    AppIcon icon : icons) {      icon.delete();    }    app.delete();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private CGraphCloser(){}  }
class C{  public IterationAttachExample(IterationAttachObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getIterationId() != null) {    criteria.andIterationIdEqualTo(sample.getIterationId());  }  if (sample.getObjectType() != null) {    criteria.andObjectTypeEqualTo(sample.getObjectType());  }  if (sample.getObjectId() != null) {    criteria.andObjectIdEqualTo(sample.getObjectId());  }  if (sample.getCompleted() != null) {    criteria.andCompletedEqualTo(sample.getCompleted());  }  if (sample.getCompletedTime() != null) {    criteria.andCompletedTimeEqualTo(sample.getCompletedTime());  }}  }
class C{  public void addMethod(MethodRef mref){  mMethodRefs.add(mref);}  }
class C{  public Matrix[] compute(Matrix loghyper,Matrix X,Matrix Xstar){  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  final double s2=Math.exp(2 * loghyper.get(0,0));  double[] a=new double[Xstar.getRowDimension()];  Arrays.fill(a,s2);  Matrix A=new Matrix(a,Xstar.getRowDimension());  Matrix B=new Matrix(X.getRowDimension(),Xstar.getRowDimension());  return new Matrix[]{A,B};}  }
class C{  public long remove(final RemoveOp remove) throws Exception {  return remove(remove,UUID.randomUUID());}  }
class C{  public final void clipImage(final Area current_shape){  final Area final_clip=(Area)current_shape.clone();  final int image_w=current_image.getWidth();  final int image_h=current_image.getHeight();  final double shape_x=final_clip.getBounds2D().getX();  final double shape_y=final_clip.getBounds2D().getY();  final double shape_h=final_clip.getBounds2D().getHeight();  final double d_y=(image_h - shape_h);  final AffineTransform upside_down=new AffineTransform();  upside_down.translate(-shape_x,-shape_y);  upside_down.scale(1,-1);  upside_down.translate(shape_x,-(shape_y + shape_h));  final_clip.transform(upside_down);  final AffineTransform align_clip=new AffineTransform();  align_clip.translate(-i_x,i_y + d_y);  final_clip.transform(align_clip);  double x=final_clip.getBounds2D().getX();  double y=final_clip.getBounds2D().getY();  double w=final_clip.getBounds2D().getWidth();  double h=final_clip.getBounds2D().getHeight();  int image_type=current_image.getType();  if ((image_type == 0)) {    image_type=BufferedImage.TYPE_INT_ARGB;  } else   if ((image_type == BufferedImage.TYPE_INT_RGB)) {    image_type=BufferedImage.TYPE_INT_ARGB;  }  final BufferedImage offscreen=new BufferedImage(image_w,image_h,image_type);  final Graphics2D image_g2=offscreen.createGraphics();  if (!offscreen.getColorModel().hasAlpha()) {    image_g2.setBackground(Color.white);    image_g2.fill(new Rectangle(0,0,image_w,image_h));  }  image_g2.setClip(final_clip);  try {    image_g2.drawImage(current_image,0,0,null);  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " plotting clipping image");  }  if (y < 0) {    h+=y;    y=0;  }  if (x < 0) {    w+=x;    x=0;  }  if (w > image_w) {    w=image_w;  }  if (h > image_h) {    h=image_h;  }  if (y + h > image_h) {    h=image_h - y;  }  if (x + w > image_w) {    w=image_w - x;  }  try {    current_image=offscreen.getSubimage((int)x,(int)y,(int)(w),(int)(h));  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " extracting clipped image with values x="+ x+ " y="+ y+ " w="+ w+ " h="+ h+ " from image ");  }  final double x1;  final double y1;  if (i_x > shape_x) {    x1=i_x;  } else {    x1=shape_x;  }  if (i_y > shape_y) {    y1=i_y;  } else {    y1=shape_y;  }  i_x=(int)(x1);  i_y=(int)(y1);  i_w=(int)w;  i_h=(int)h;}  }
class C{  protected Node handleFloatingNodeBeforeAdd(MethodScope methodScope,LoopScope loopScope,Node node){  return node;}  }
class C{  private static void buildFunctionLine(final INaviCodeNode node,final ZyLabelContent content,final INodeModifier modifier){  try {    final INaviFunction parentFunction=node.getParentFunction();    final String address=modifier == null ? parentFunction.getAddress().toHexString() : modifier.getAddress(parentFunction.getModule(),new UnrelocatedAddress(parentFunction.getAddress()),true);    final String name=parentFunction.getName();    content.addLineContent(new ZyLineContent(address + PADDING_AFTER_FUNCTION_ADDRESS + parentFunction.getModule().getConfiguration().getName()+ "::"+ name,BOLD_FONT,Lists.newArrayList(new CStyleRunData(0,-1,Color.BLACK)),null));  } catch (  final MaybeNullException exception) {  }}  }
class C{  public int receive(GasStack amount,boolean doReceive){  if (amount == null || (stored != null && !(stored.amount != getMaxGas() && stored.isGasEqual(amount)))) {    return 0;  }  int toFill=Math.min(getMaxGas() - getStored(),amount.amount);  if (doReceive) {    if (stored == null) {      stored=amount.copy().withAmount(getStored() + toFill);    } else {      stored.amount=Math.min(getMaxGas(),getStored() + amount.amount);    }  }  return toFill;}  }
class C{  public TimeSeriesData(TetradMatrix matrix,List<String> varNames){  if (matrix == null) {    throw new NullPointerException("Data must not be null.");  }  if (varNames == null) {    throw new NullPointerException("Variables must not be null.");  }  for (int i=0; i < varNames.size(); i++) {    if (varNames.get(i) == null) {      throw new NullPointerException("Variable at index " + i + "is null.");    }  }  this.data2=matrix;  if (varNames.size() != matrix.columns()) {    throw new IllegalArgumentException("Number of columns in the data " + "must match the number of variables.");  }  this.varNames=varNames;  this.name="Time Series Data";}  }
class C{  protected void writeIterator(Iterator<?> iterator,CharBuf buffer){  if (!iterator.hasNext()) {    buffer.addChars(EMPTY_LIST_CHARS);    return;  }  buffer.addChar(OPEN_BRACKET);  while (iterator.hasNext()) {    Object it=iterator.next();    if (!isExcludingValues(it)) {      writeObject(it,buffer);      buffer.addChar(COMMA);    }  }  buffer.removeLastChar(COMMA);  buffer.addChar(CLOSE_BRACKET);}  }
class C{  private void addBinaryChildrenRecursively(PsiElement elem,List<Block> list,Indent indent,@Nullable AlignmentProvider.Aligner aligner){  if (elem == null)   return;  if ((elem instanceof GrBinaryExpression)) {    GrBinaryExpression myExpr=((GrBinaryExpression)elem);    if (myExpr.getLeftOperand() instanceof GrBinaryExpression) {      addBinaryChildrenRecursively(myExpr.getLeftOperand(),list,Indent.getContinuationWithoutFirstIndent(),aligner);    }    PsiElement op=((GrBinaryExpression)elem).getOperationToken();    for (    ASTNode childNode : visibleChildren(elem.getNode())) {      PsiElement psi=childNode.getPsi();      if (!(psi instanceof GrBinaryExpression)) {        if (op != psi && aligner != null) {          aligner.append(psi);        }        list.add(new GroovyBlock(childNode,indent,getChildWrap(childNode),myContext));      }    }    if (myExpr.getRightOperand() instanceof GrBinaryExpression) {      addBinaryChildrenRecursively(myExpr.getRightOperand(),list,Indent.getContinuationWithoutFirstIndent(),aligner);    }  }}  }
class C{  private void discardTrailer() throws IOException {  while (!"".equals(readLine()))   ;}  }
class C{  public String toString(){  return map.toString();}  }
class C{  public void updateQuad(FloatBuffer texCordBuffer,FloatBuffer vertexBuffer,int index){  assert (index >= 0 && index < capacity_) : "update quad with texture_: Invalid index";  totalQuads_=Math.max(index + 1,totalQuads_);  putTexCoords(texCordBuffer,index);  putVertex(vertexBuffer,index);}  }
class C{  public ServiceOperationException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private Object readResolve(){  return Years.years(getValue());}  }
class C{  public EPStatementObjectModel insertInto(InsertIntoClause insertInto){  this.insertInto=insertInto;  return this;}  }
class C{  public boolean isShapesFilled(){  return this.shapesFilled;}  }
class C{  private void chunkNumericPK(Table table,String[] columns,long chunkSize) throws ReplicatorException, InterruptedException {  MinMax minmax=retrieveMinMaxCountPK(connection,table);  if (minmax != null) {    if (logger.isDebugEnabled())     logger.debug("Min = " + minmax.getMin() + " -- Max = "+ minmax.getMax()+ " -- Count = "+ minmax.getCount());    if (minmax.getCount() <= chunkSize)     chunks.put(new NumericChunk(table,columns)); else {      if (!minmax.isDecimal()) {        long gap=(Long)minmax.getMax() - (Long)minmax.getMin();        long blockSize=chunkSize * gap / minmax.getCount();        long nbBlocks=gap / blockSize;        if (gap % blockSize > 0)         nbBlocks++;        long start=(Long)minmax.getMin() - 1;        long end;        do {          end=start + blockSize;          if (end > (Long)minmax.getMax())           end=(Long)minmax.getMax();          NumericChunk e=new NumericChunk(table,start,end,columns,nbBlocks);          chunks.put(e);          start=end;        } while (start < (Long)minmax.getMax());      } else {        BigInteger start=((BigDecimal)minmax.getMin()).setScale(0,RoundingMode.FLOOR).toBigInteger().subtract(BigInteger.valueOf(1));        BigInteger max=((BigDecimal)minmax.getMax()).setScale(0,RoundingMode.CEILING).toBigInteger();        BigInteger gap=max.subtract(start);        BigInteger blockSize=gap.multiply(BigInteger.valueOf(chunkSize)).divide(BigInteger.valueOf(minmax.getCount()));        long nbBlocks=gap.divide(blockSize).longValue();        if (!gap.remainder(blockSize).equals(BigInteger.ZERO)) {          nbBlocks++;          blockSize=gap.divide(BigInteger.valueOf(nbBlocks)).add(gap.remainder(blockSize).equals(BigInteger.ZERO) ? BigInteger.ZERO : BigInteger.ONE);        }        BigInteger end;        do {          end=start.add(blockSize);          if (end.compareTo((((BigDecimal)minmax.getMax()).setScale(0,RoundingMode.CEILING)).toBigInteger()) == 1)           end=(((BigDecimal)minmax.getMax()).setScale(0,RoundingMode.CEILING)).toBigInteger();          NumericChunk e=new NumericChunk(table,start,end,columns,nbBlocks);          chunks.put(e);          start=end;        } while (start.compareTo((((BigDecimal)minmax.getMax()).setScale(0,RoundingMode.CEILING)).toBigInteger()) == -1);      }    }  } else {    chunks.put(new NumericChunk(table,columns));  }}  }
class C{  public boolean isMandatory(){  return mandatory;}  }
class C{  private static boolean possiblySwappingWithNext(Featurizable<IString,String> nextF){  if (nextF.prior == null)   return false;  CoverageSet fCoverage=nextF.derivation.sourceCoverage;  Featurizable<IString,String> currentF=nextF.prior;  if (fStart(currentF) <= fEnd(nextF)) {    if (fEnd(currentF) >= fStart(nextF)) {    }    return false;  }  for (int i=fEnd(nextF) + 1; i < fStart(currentF); ++i)   if (fCoverage.get(i))   return false;  return true;}  }
class C{  public static byte[] genSpecBytes(byte len){  char u8=convertByte2Uint8(len);  return genSpecBytes(u8);}  }
class C{  public boolean isLower(final Priority other){  return m_priority < other.getValue();}  }
class C{  @Override public void capabilitiesFilterChanged(CapabilitiesFilterChangeEvent e){  if (e.getFilter() == null) {    updateCapabilitiesFilter(null);  } else {    updateCapabilitiesFilter((Capabilities)e.getFilter().clone());  }}  }
class C{  private boolean providesHttpResponseMetrics(Class<?> c){  return implementsInterface(c,HTTP_SERVLET_RESPONSE_CLASS,HTTP_RESPONSE_WHITE_LIST,HTTP_RESPONSE_BLACK_LIST);}  }
class C{  public boolean isLoadFinished(){  return resolvedLength != C.LENGTH_UNBOUNDED && loadPosition == resolvedLength;}  }
class C{  public DrawerBuilder withStickyDrawerItems(@NonNull ArrayList<IDrawerItem> stickyDrawerItems){  this.mStickyDrawerItems=IdDistributor.checkIds(stickyDrawerItems);  return this;}  }
class C{  public TimeDuration(final Date date,final long milliseconds){  this(date.getTime(),milliseconds);}  }
class C{  InputStream locateScriptFile(String path,String pkg,String name) throws FileNotFoundException {  if (m_sourceLocator != null) {    m_sourceLocatorChangeCount=m_sourceLocator.getChangeCount();    InputStream is=m_sourceLocator.locateSource(path,pkg,name);    if (is != null)     return is;  }  path=path.replace('/',File.separatorChar);  pkg=pkg.replace('/',File.separatorChar);  File f;  if (path.length() > 0) {    try {      String pkgAndName="";      if (pkg.length() > 0)       pkgAndName+=pkg + File.separatorChar;      pkgAndName+=name;      f=new File(path,pkgAndName);      if (f.exists())       return new FileInputStream(f);    } catch (    NullPointerException npe) {    }  }  if (pkg.length() > 0) {    f=new File(pkg,name);    if (f.exists())     return new FileInputStream(f);  }  f=new File(name);  if (f.exists())   return new FileInputStream(f);  return null;}  }
class C{  public int index(){  return currentBufferIndex;}  }
class C{  public void testBigInt() throws Exception {  createTable("bigIntRegression","(val BIGINT NOT NULL)");  this.stmt.executeUpdate("INSERT INTO bigIntRegression VALUES (6692730313872877584)");  this.rs=this.stmt.executeQuery("SELECT val FROM bigIntRegression");  while (this.rs.next()) {    long retrieveAsLong=this.rs.getLong(1);    assertTrue(retrieveAsLong == 6692730313872877584L);  }  this.rs.close();  this.stmt.executeUpdate("DROP TABLE IF EXISTS bigIntRegression");  String bigIntAsString="6692730313872877584";  long parsedBigIntAsLong=Long.parseLong(bigIntAsString);  assertTrue(bigIntAsString.equals(String.valueOf(parsedBigIntAsLong)));}  }
class C{  public int length(){  return results.size();}  }
class C{  @Override protected void addHelpMenu(){  addHelpMenu("package.jmri.jmrix.sprog.console.SprogConsoleFrame",true);}  }
class C{  public void endScopes(int first){  int prevNextReg=nextreg;  nextreg=first;  for (int i=nextreg; i < prevNextReg; i++)   endScope(i);}  }
class C{  private Intent makeBrowserIntent(String address){  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse("https://maps.google.com/?q=" + Uri.encode(address)));  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  return intent;}  }
class C{  static int sequenceLengthsHelper(final RandomAccessFile raf,final byte[] buffer,final int[] lengths,final int initSeqNo,final long initPos,final long endPos,int entrySize) throws IOException {  int seqNo=initSeqNo;  int bufStart=0;  long pos=initPos;  while (pos < endPos) {    final int maxReadLength;    if (buffer.length - bufStart > endPos - pos) {      maxReadLength=(int)(endPos - pos);    } else {      maxReadLength=buffer.length - bufStart;    }    final int readLength=raf.read(buffer,bufStart,maxReadLength);    if (readLength < 0) {      throw new IllegalArgumentException();    }    pos+=readLength;    final int length=readLength + bufStart;    final int mod=length % entrySize;    final int effLength=mod == 0 ? length : length - mod;    int seqLimit=seqNo;    for (int i=0; i < effLength / entrySize; i++) {      lengths[seqLimit++]=ByteArrayIOUtils.bytesToIntBigEndian(buffer,i * entrySize + (entrySize - 4));    }    if (seqNo == 0 && seqLimit > 0) {      seqNo=1;    }    for (; seqNo < seqLimit; seqNo++) {      lengths[seqNo - 1]=lengths[seqNo] - lengths[seqNo - 1];    }    bufStart=0;    for (int j=effLength; j < length; j++, bufStart++) {      buffer[bufStart]=buffer[j];    }  }  return seqNo;}  }
class C{  public boolean equals(String obj2){  return str().equals(obj2);}  }
class C{  public FileProxy(String pathname){  super(pathname);}  }
class C{  public static MMTSJGPUInstruction parseInstruction(String str) throws DMLRuntimeException {  String[] parts=InstructionUtils.getInstructionPartsWithValueType(str);  InstructionUtils.checkNumFields(parts,3);  String opcode=parts[0];  CPOperand in1=new CPOperand(parts[1]);  CPOperand out=new CPOperand(parts[2]);  MMTSJType titype=MMTSJType.valueOf(parts[3]);  if (!opcode.equalsIgnoreCase("tsmm"))   throw new DMLRuntimeException("Unknown opcode while parsing an MMTSJGPUInstruction: " + str); else   return new MMTSJGPUInstruction(new Operator(true),in1,titype,out,opcode,str);}  }
class C{  private static void xstaticSetRandomGenerator(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  protected void restoreComponentState(Component c,Hashtable destination){  if (shouldAutoStoreState()) {    Enumeration e=destination.keys();    while (e.hasMoreElements()) {      String currentKey=(String)e.nextElement();      Component cmp=findByName(currentKey,c);      if (cmp != null) {        Object value=destination.get(currentKey);        if (value instanceof Integer) {          if (cmp instanceof List) {            ((List)cmp).setSelectedIndex(((Integer)value).intValue());            continue;          }          if (cmp instanceof Tabs) {            int val=((Integer)value).intValue();            Tabs t=(Tabs)cmp;            if (t.getTabCount() > val) {              t.setSelectedIndex(val);            }            continue;          }        }        cmp.setComponentState(value);      }    }  }}  }
class C{  private void ifSshLoadTaskDef(String taskName){  if (taskName.equals("sshjava")) {    if (!currentProject.getTaskDefinitions().containsKey("sshjava")) {      try {        currentProject.addTaskDefinition("sshjava",Class.forName("org.jclouds.tools.ant.taskdefs.sshjava.SSHJava"));      } catch (      BuildException e) {        throw new CargoException("Error adding sshjava task",e);      }catch (      ClassNotFoundException e) {        throw new CargoException("Please ensure jclouds-antcontrib is in the classpath",e);      }    }  }}  }
class C{  public BreitWignerMeanSquare(double mean,double gamma,double cut,MersenneTwisterFast randomGenerator){  super(mean,gamma,cut,randomGenerator);  this.uniform=new Uniform(randomGenerator);}  }
class C{  public MethodTypeStringify(Method method){  this.method=method;}  }
class C{  @Override public void tearDown() throws Exception {  this.ctx.unbind(this.tempDir.getAbsolutePath() + "/test");  this.ctx.unbind(this.tempDir.getAbsolutePath() + "/testNoUrl");  this.ctx.close();  this.tempDir.delete();  super.tearDown();}  }
class C{  public boolean isCentrallyMaintained(){  Object oo=get_Value(COLUMNNAME_IsCentrallyMaintained);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public double[] computeLocal(int sourceStates[],int destStates[]){  initialise();  addObservations(sourceStates,destStates);  return computeLocalFromPreviousObservations(sourceStates,destStates);}  }
class C{  public static Map<String,Object> createEftAccount(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PAY_INFO","_CREATE","ACCOUNTING","_CREATE");  if (result.size() > 0)   return result;  List<GenericValue> toBeStored=FastList.newInstance();  GenericValue newPm=delegator.makeValue("PaymentMethod");  toBeStored.add(newPm);  GenericValue newEa=delegator.makeValue("EftAccount");  toBeStored.add(newEa);  String newPmId=(String)context.get("paymentMethodId");  if (UtilValidate.isEmpty(newPmId)) {    try {      newPmId=delegator.getNextSeqId("PaymentMethod");    } catch (    IllegalArgumentException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeCreated",locale));    }  }  newPm.set("partyId",partyId);  newPm.set("fromDate",(context.get("fromDate") != null ? context.get("fromDate") : now));  newPm.set("thruDate",context.get("thruDate"));  newPm.set("description",context.get("description"));  newEa.set("bankName",context.get("bankName"));  newEa.set("routingNumber",context.get("routingNumber"));  newEa.set("accountType",context.get("accountType"));  newEa.set("accountNumber",context.get("accountNumber"));  newEa.set("nameOnAccount",context.get("nameOnAccount"));  newEa.set("companyNameOnAccount",context.get("companyNameOnAccount"));  newEa.set("contactMechId",context.get("contactMechId"));  newPm.set("paymentMethodId",newPmId);  newPm.set("paymentMethodTypeId","EFT_ACCOUNT");  newEa.set("paymentMethodId",newPmId);  GenericValue newPartyContactMechPurpose=null;  String contactMechId=(String)context.get("contactMechId");  if (UtilValidate.isNotEmpty(contactMechId)) {    String contactMechPurposeTypeId="BILLING_LOCATION";    GenericValue tempVal=null;    try {      List<GenericValue> allPCWPs=EntityQuery.use(delegator).from("PartyContactWithPurpose").where("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId).queryList();      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"contactFromDate","contactThruDate",true);      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"purposeFromDate","purposeThruDate",true);      tempVal=EntityUtil.getFirst(allPCWPs);    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      tempVal=null;    }    if (tempVal == null) {      newPartyContactMechPurpose=delegator.makeValue("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId,"fromDate",now));    }  }  if (newPartyContactMechPurpose != null)   toBeStored.add(newPartyContactMechPurpose);  try {    delegator.storeAll(toBeStored);  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingEftAccountCannotBeCreatedWriteFailure",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  result.put("paymentMethodId",newEa.getString("paymentMethodId"));  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public IOUtils(){  super();}  }
class C{  public boolean injectNextEvent(){  if (this.getProcessor().hasNext()) {    ContentEvent event=this.getProcessor().nextEvent();    this.getOutputStream().put(event);    return true;  }  return false;}  }
class C{  LineLayout(@NotNull EditorView view,@NotNull CharSequence text,@JdkConstants.FontStyle int fontStyle,@NotNull FontRenderContext fontRenderContext){  this(createFragments(view,text,fontStyle,fontRenderContext),true);}  }
class C{  public void onListItemSelected(View view,int parentIndex){}  }
class C{  public ViPRCoreClient withAuthToken(String token){  setAuthToken(token);  return this;}  }
class C{  @Deprecated public void showHiddenFiles(boolean show){  hiddenFilesAreShown=show;  view.showHiddenFilesForAllExpandedNodes(show);}  }
class C{  public synchronized boolean isShutdown(){  return taskGroup.isShutdown();}  }
class C{  public void testPlayFromInputStream() throws Exception {  String myCSV="symbol, price, volume" + NEW_LINE + "IBM, 10.2, 10000";  ByteArrayInputStream inputStream=new ByteArrayInputStream(myCSV.getBytes());  trySource(new AdapterInputSource(inputStream));}  }
class C{  public void testSubscribe3(){  TestSubscriber s=new TestSubscriber();  SubmissionPublisher<Integer> p=basicPublisher();  Throwable ex=new SPException();  p.closeExceptionally(ex);  assertTrue(p.isClosed());  assertSame(p.getClosedException(),ex);  p.subscribe(s);  s.awaitError();  assertEquals(0,s.nexts);  assertEquals(1,s.errors);}  }
class C{  public static CCShatteredTiles3D action(int range,boolean sz,ccGridSize gridSize,float d){  return new CCShatteredTiles3D(range,sz,gridSize,d);}  }
class C{  public ComputeJobFailoverException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  public String toString(){  String result;  boolean comma_flag;  result="{";  comma_flag=false;  for (Enumeration e=all(); e.hasMoreElements(); ) {    if (comma_flag)     result+=", "; else     comma_flag=true;    result+=((symbol)e.nextElement()).name();  }  result+="}";  return result;}  }
class C{  public void updateEntry(ZipEntry e){  e.setMethod(ZipEntry.STORED);  e.setSize(n);  e.setCrc(crc.getValue());}  }
class C{  public static boolean supportsSequenceId(int version){  return version >= LogSegmentMetadataVersion.VERSION_V5_SEQUENCE_ID.value;}  }
class C{  private static final boolean compareAndSetNext(Node node,Node expect,Node update){  return unsafe.compareAndSwapObject(node,nextOffset,expect,update);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void stage(@NotNull Path stagingDirectory){  try {    Path stagedArtifactPath=stagingDirectory.resolve("target" + AppEngineFlexDeploymentArtifactType.typeForPath(deploymentArtifactPath));    Files.copy(deploymentArtifactPath,stagedArtifactPath);    Path appYamlPath=deploymentConfiguration.isAuto() ? helper.defaultAppYaml() : Paths.get(deploymentConfiguration.getAppYamlPath());    Files.copy(appYamlPath,stagingDirectory.resolve("app.yaml"));    Path dockerFilePath=deploymentConfiguration.isAuto() ? helper.defaultDockerfile(AppEngineFlexDeploymentArtifactType.typeForPath(deploymentArtifactPath)) : Paths.get(deploymentConfiguration.getDockerFilePath());    Files.copy(dockerFilePath,stagingDirectory.resolve("Dockerfile"));  } catch (  IOException ex) {    loggingHandler.print(ex.getMessage() + "\n");    throw new RuntimeException(ex);  }}  }
class C{  public boolean submitAction(Action0 action){  boolean submitted=true;  Thread currentThread=Thread.currentThread();  if (currentThread.equals(dutyThread)) {    action.call();  } else {    submitted=actions.offer(action);  }  return submitted;}  }
class C{  @Entrypoint public static void yieldpointFromBackedge(){  Address fp=Magic.getFramePointer();  RVMThread.yieldpoint(RVMThread.BACKEDGE,fp);}  }
class C{  public JettySolrRunner stopJettySolrRunner(int index) throws Exception {  JettySolrRunner jetty=jettys.get(index);  jetty.stop();  jettys.remove(index);  return jetty;}  }
class C{  public static <A,E extends A>A[] toArray(Enumeration<E> enumeration,A[] array){  ArrayList<A> elements=new ArrayList<A>();  while (enumeration.hasMoreElements()) {    elements.add(enumeration.nextElement());  }  return elements.toArray(array);}  }
class C{  public static void assertEqual(float expected,float actual,double maxRelativeError,String errorMessage){  if (verbose) {    log("assertEqual(" + expected + ", "+ actual+ ", "+ errorMessage+ ")");  }  if (expected != actual) {    assertRelativeErrorNotExceeded(expected,actual,maxRelativeError,errorMessage);  }}  }
class C{  public final static byte[] decode(String str,boolean used){  int sLen=str != null ? str.length() : 0;  if (sLen == 0)   return new byte[0];  int sepCnt=0;  for (int i=0; i < sLen; i++)   if (IA[str.charAt(i)] < 0)   sepCnt++;  if ((sLen - sepCnt) % 4 != 0)   return null;  int pad=0;  for (int i=sLen; i > 1 && IA[str.charAt(--i)] <= 0; )   if (str.charAt(i) == '=')   pad++;  int len=((sLen - sepCnt) * 6 >> 3) - pad;  byte[] dArr=new byte[len];  for (int s=0, d=0; d < len; ) {    int i=0;    for (int j=0; j < 4; j++) {      int c=IA[str.charAt(s++)];      if (c >= 0)       i|=c << (18 - j * 6); else       j--;    }    dArr[d++]=(byte)(i >> 16);    if (d < len) {      dArr[d++]=(byte)(i >> 8);      if (d < len)       dArr[d++]=(byte)i;    }  }  return dArr;}  }
class C{  BillingDetailsType createBillingDataForOrganization(BillingInput billingInput,BillingResult billingResult){  SubscriptionHistoryEvaluator subHistoryEvaluator=new SubscriptionHistoryEvaluator(billingInput,bdr);  if (billingInput.getSubscriptionHistoryEntries().isEmpty()) {    return null;  }  if (!subHistoryEvaluator.evaluateHistories()) {    return null;  }  BillingDetailsType billingDetails=createBasicBillDocument(billingInput,billingResult);  OverallCosts overallCosts=OverallCosts.newInstance();  for (  SubscriptionInput subscriptionInput : subHistoryEvaluator.getSubscriptions()) {    BigDecimal costforSubscription=billSubscription(billingInput,subscriptionInput,billingDetails,billingResult);    overallCosts=overallCosts.add(billingInput.getCurrencyIsoCode(),costforSubscription);  }  BigDecimal costsBeforeDiscount=overallCosts.get(billingInput.getCurrencyIsoCode());  if (costsBeforeDiscount == null) {    costsBeforeDiscount=BigDecimal.ZERO;  }  assembler.initializeOverallCostsType(billingInput.getCurrencyIsoCode(),billingDetails);  overallCosts=allowDiscount(billingDetails,costsBeforeDiscount,billingInput,billingResult.getChargingOrgKey(),overallCosts);  includeVat(billingDetails,billingInput,billingResult,overallCosts);  return billingDetails;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeissupported03.class,args);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.CONDITION_RHS___COMPARISON_OPERATOR_1:    setComparison_operator_1(COMPARISON_OPERATOR_1_EDEFAULT);  return;case UmplePackage.CONDITION_RHS___RHS_1:setRHS_1(RHS_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public IdentityHashMap(){  this(11,0.75f);}  }
class C{  public Component add(Component component){  if (!(component instanceof UIResource)) {    addTab(component.getName(),component);  } else {    super.add(component);  }  return component;}  }
class C{  public Vector3f multLocal(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  x*=vec.x;  y*=vec.y;  z*=vec.z;  return this;}  }
class C{  public RectF(RectF r){  if (r == null) {    left=top=right=bottom=0.0f;  } else {    left=r.left;    top=r.top;    right=r.right;    bottom=r.bottom;  }}  }
class C{  public static void printProperties(Properties p,String description,boolean logIt){  if (p == null)   return;  if (logIt)   log.info(description + " - Size=" + p.size()+ ", Hash="+ p.hashCode()+ "\n"+ getLocalHost()); else   System.out.println("Log.printProperties = " + description + ", Size="+ p.size()+ ", Hash="+ p.hashCode()+ "\n"+ getLocalHost());  Object[] pp=p.keySet().toArray();  Arrays.sort(pp);  for (int i=0; i < pp.length; i++) {    String key=pp[i].toString();    String value=p.getProperty(key);    if (logIt)     log.config(key + "=" + value); else     System.out.println("  " + key + " = "+ value);  }}  }
class C{  private int indexOf(Object x){  if (x != null) {    if (x instanceof ScheduledFutureTask) {      int i=((ScheduledFutureTask)x).heapIndex;      if (i >= 0 && i < size && queue[i] == x)       return i;    } else {      for (int i=0; i < size; i++)       if (x.equals(queue[i]))       return i;    }  }  return -1;}  }
class C{  public String trimCoordURI(String uri){  if (!uri.startsWith(urlPrefix)) {    throw new GeoSpatialSearchException("Invalid coordinate URI for the WKT value");  }  return uri.substring(urlPrefix.length());}  }
class C{  @Override public String toString(){  return TemplateLoaderUtils.getClassNameForToString(this) + "(subdirPath=" + StringUtil.jQuote(subdirPath)+ ", servletContext={contextPath="+ StringUtil.jQuote(getContextPath())+ ", displayName="+ StringUtil.jQuote(servletContext.getServletContextName())+ "})";}  }
class C{  public static int[] convertToIntArray(final byte[] vals){  checkSource(vals.length,4);  final int[] dest=new int[vals.length / 4];  convertToIntArrayInternal(vals,0,vals.length,dest,0);  return dest;}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  public String toString(){  return Integer.toString(getValue());}  }
class C{  public NATURAL_LEFT_OUTER_JOIN NATURAL_LEFT_OUTER_JOIN(String tableToJoin){  return new NATURAL_LEFT_OUTER_JOIN(this,tableToJoin);}  }
class C{  private void testEverything() throws SQLException {  for (int c=0; c < 2; c++) {    if (c == 0) {      cipher=null;    } else {      cipher="AES";    }    for (int a=0; a < 64; a++) {      smallLog=(a & 1) != 0;      big=(a & 2) != 0;      networked=(a & 4) != 0;      memory=(a & 8) != 0;      ssl=(a & 16) != 0;      diskResult=(a & 32) != 0;      for (int trace=0; trace < 3; trace++) {        traceLevelFile=trace;        test();      }    }  }}  }
class C{  Optional<EntityDescriptor> referencingEntity(AttributeDescriptor attribute){  if (!Names.isEmpty(attribute.referencedTable())) {    return entities.values().stream().filter(null).findFirst();  } else   if (!Names.isEmpty(attribute.referencedType())) {    Optional<TypeKind> primitiveType=Stream.of(TypeKind.values()).filter(null).filter(null).findFirst();    if (primitiveType.isPresent()) {      return Optional.empty();    } else {      QualifiedName referencedType=new QualifiedName(attribute.referencedType());      return entityByName(referencedType);    }  } else {    TypeMirror referencedType=attribute.typeMirror();    if (attribute.isIterable()) {      referencedType=collectionElementType(referencedType);    }    TypeElement referencedElement=(TypeElement)types.asElement(referencedType);    String referencedName=referencedElement.getSimpleName().toString();    return entities.values().stream().filter(null).findFirst();  }}  }
class C{  public BufferedImage makeSquare(BufferedImage image){  final int w=image.getWidth();  final int h=image.getHeight();  if (w > h) {    final BufferedImage dst=new BufferedImage(h,h,BufferedImage.TYPE_INT_ARGB);    Graphics2D g=dst.createGraphics();    final int offset=(w - h) / 2;    try {      g.drawImage(image,0,0,h - 1,h - 1,offset,0,h + offset,h - 1,null);    }  finally {      g.dispose();    }    image=dst;  } else {    final BufferedImage dst=new BufferedImage(w,w,BufferedImage.TYPE_INT_ARGB);    Graphics2D g=dst.createGraphics();    final int offset=(h - w) / 2;    try {      g.drawImage(image,0,0,w - 1,w - 1,0,offset,w - 1,w + offset,null);    }  finally {      g.dispose();    }    image=dst;  }  return image;}  }
class C{  protected int selectProperty(){  final PropertySelectorDialog jd=new PropertySelectorDialog(null,m_Exp.getResultProducer());  jd.setLocationRelativeTo(this);  int result=jd.showDialog();  if (result == PropertySelectorDialog.APPROVE_OPTION) {    System.err.println("Property Selected");    PropertyNode[] path=jd.getPath();    Object value=path[path.length - 1].value;    PropertyDescriptor property=path[path.length - 1].property;    Class<?> propertyClass=property.getPropertyType();    m_Exp.setPropertyPath(path);    m_Exp.setPropertyArray(Array.newInstance(propertyClass,1));    Array.set(m_Exp.getPropertyArray(),0,value);    m_ArrayEditor.setValue(m_Exp.getPropertyArray());    m_ArrayEditor.getCustomEditor().repaint();    System.err.println("Set new array to array editor");  } else {    System.err.println("Cancelled");  }  return result;}  }
class C{  private static String[] scanForSources(final File sourceDir,final Set<String> sourceIncludes,final Set<String> sourceExcludes){  final DirectoryScanner ds=new DirectoryScanner();  ds.setFollowSymlinks(true);  ds.setBasedir(sourceDir);  ds.setIncludes(sourceIncludes.toArray(new String[sourceIncludes.size()]));  ds.setExcludes(sourceExcludes.toArray(new String[sourceExcludes.size()]));  ds.addDefaultExcludes();  try {    ds.scan();  } catch (  IllegalStateException e) {    return new String[0];  }  return ds.getIncludedFiles();}  }
class C{  private void buildDoc(Reader in) throws IOException {  try {    SAXReader xmlReader=new SAXReader();    xmlReader.setEncoding("UTF-8");    document=xmlReader.read(in);    propertyCache.clear();  } catch (  Exception e) {    Log.error("Error reading XML properties",e);    throw new IOException(e.getMessage());  } finally {    if (in != null) {      in.close();    }  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  addPreferencesFromResource(R.xml.perference);  initUIPart();  initForecastPart();  initWidgetPart();  initNotificationPart();}  }
class C{  private static final void usage(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:31.709 -0500",hash_original_method="466E87FBA65675C6EFE457E3CD1EC710",hash_generated_method="704239654977DB05B159AA9DE97E7B3B") public static PropertyValuesHolder ofFloat(Property<?,Float> property,float... values){  return new FloatPropertyValuesHolder(property,values);}  }
class C{  public DataSourceOnStandaloneConfigurationTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  @Before public void initialize() throws JSONException, IOException {  jsonGroupParser=new JSONGroupParser();  jsonGroupObject=new JSONObject();  initializeJSON();  jsonFile=new File(JSON_FILE_PATH);  fileWriter=new FileWriter(jsonFile);}  }
class C{  protected void respondWithNotFound(HttpServletResponse resp) throws IOException {  respondWithError(resp,HttpStatus.NOT_FOUND_404,"Item not found");}  }
class C{  public void testExecuteWhenNoAutoDeployableBecauseNonJ2EEPackagingProject() throws Exception {  setUpMojo(InstalledLocalContainerStub.class,InstalledLocalContainerStub.ID,StandaloneLocalConfigurationStub.class);  this.mojo.setCargoProject(createTestCargoProject("whatever"));  this.mojo.execute();  LocalContainer localContainer=(LocalContainer)this.mojo.createdContainer;  assertEquals(0,localContainer.getConfiguration().getDeployables().size());}  }
class C{  public synchronized boolean instanceOf(Primitive type){  return instanceOf(this.network.createVertex(type));}  }
class C{  protected boolean initializePanelDecor(PanelFeatureState st){  st.decorView=new DecorView(getContext(),st.featureId);  st.gravity=Gravity.CENTER | Gravity.BOTTOM;  st.setStyle(getContext());  return true;}  }
class C{  @Override public BaseComponent duplicate(){  return new TextComponent(this);}  }
class C{  public static void tenantsList(){  renderArgs.put("tenants",new OpenStackTenantsDataTable());  render();}  }
class C{  public static Test suite(){  return (new TestSuite(NavigationITCase.class));}  }
class C{  protected void writeTableCreationStmt(Table table,StringBuilder ddl){  ddl.append("CREATE TABLE ");  ddl.append(getFullyQualifiedTableNameShorten(table));  println("(",ddl);  writeColumns(table,ddl);  if (databaseInfo.isPrimaryKeyEmbedded()) {    writeEmbeddedPrimaryKeysStmt(table,ddl);  }  if (databaseInfo.isForeignKeysEmbedded()) {    writeEmbeddedForeignKeysStmt(table,ddl);  }  if (databaseInfo.isIndicesEmbedded()) {    writeEmbeddedIndicesStmt(table,ddl);  }  println(ddl);  ddl.append(")");  if (isSpecifyIdentityGapLimit()) {    writeIdentityGapLimit(ddl);  }}  }
class C{  private String stateToString(long s){  return super.toString() + "[phase = " + phaseOf(s)+ " parties = "+ partiesOf(s)+ " arrived = "+ arrivedOf(s)+ "]";}  }
class C{  public static void test_diff_callInstanceMethod(){  Target2 target=new Target2();  assertSame("fizmo",target.fizmo());}  }
class C{  public static Object execute(ExecutablePool pool,LocalRegion region,Object key,Object value,byte[] deltaBytes,EntryEventImpl event,Operation operation,boolean requireOldValue,Object expectedOldValue,Object callbackArg,boolean prSingleHopEnabled){  PutOpImpl op=new PutOpImpl(region,key,value,deltaBytes,event,operation,requireOldValue,expectedOldValue,callbackArg,false,prSingleHopEnabled);  if (prSingleHopEnabled) {    ClientMetadataService cms=region.getCache().getClientMetadataService();    ServerLocation server=cms.getBucketServerLocation(region,Operation.UPDATE,key,value,callbackArg);    if (server != null) {      try {        PoolImpl poolImpl=(PoolImpl)pool;        boolean onlyUseExistingCnx=((poolImpl.getMaxConnections() != -1 && poolImpl.getConnectionCount() >= poolImpl.getMaxConnections()) ? true : false);        op.setAllowDuplicateMetadataRefresh(!onlyUseExistingCnx);        return pool.executeOn(new ServerLocation(server.getHostName(),server.getPort()),op,true,onlyUseExistingCnx);      } catch (      AllConnectionsInUseException e) {      }catch (      ServerConnectivityException e) {        if (e instanceof ServerOperationException) {          throw e;        }        cms.removeBucketServerLocation(server);      }    }  }  return pool.execute(op);}  }
class C{  @Override public void flush() throws IOException {  flushBuffer();  _outputStream.flush();}  }
class C{  public static String ParseNonce(JSONObject jsonObject){  String a=null;  try {    a=jsonObject.getString("nonce");    Log.d("JSON","get a nonce:" + a);  } catch (  Exception e) {    Log.d("JSON","Exception in getting a nonce");    e.printStackTrace();  }  return a;}  }
class C{  public ImageDistributorFactory(Lifetime lifetime,ImageReaderProxy imageReader,HandlerFactory handlerFactory){  ConcurrentBufferQueue<Long> globalTimestampStream=new ConcurrentBufferQueue<>();  mTimestampStream=globalTimestampStream;  lifetime.add(globalTimestampStream);  mImageDistributor=new ImageDistributorImpl(Loggers.tagFactory(),globalTimestampStream);  Handler imageReaderHandler=handlerFactory.create(lifetime,"ImageDistributor",Thread.MAX_PRIORITY);  imageReader.setOnImageAvailableListener(new ImageDistributorOnImageAvailableListener(imageReader,mImageDistributor),imageReaderHandler);}  }
class C{  public int cardinality(){  int c=0;  for (  long v : bits) {    while (v != 0) {      v&=v - 1;      ++c;    }  }  return c;}  }
class C{  public void testDynFloatSort() throws Exception {  checkSortMissingDefault("dyn_floatdv","-1.3","4.2");}  }
class C{  public void testShiftLeft3(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=27;  byte rBytes[]={12,1,-61,39,-11,-94,-55,106,-40,31,-119,24,-48,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftLeft(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (this.getAD_Client_ID() > 0)   this.setAD_Client_ID(0);  if (this.getAD_Org_ID() > 0)   this.setAD_Org_ID(0);  return true;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double zFactor=0;  double slopeThreshold=0;  double profCurvThreshold=0;  double planCurvThreshold=0;  double radToDeg=180 / Math.PI;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      zFactor=Double.parseDouble(args[i]);    } else     if (i == 3) {      slopeThreshold=Double.parseDouble(args[i]);    } else     if (i == 4) {      profCurvThreshold=Double.parseDouble(args[i]);    } else     if (i == 5) {      planCurvThreshold=Double.parseDouble(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    double gridResX=DEM.getCellSizeX();    double gridResY=DEM.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double Zx, Zy, Zxx, Zyy, Zxy, p, Zx2, q, Zy2;    double fx, fy;    double gridResTimes2=gridResX * 2;    double gridResSquared=gridResX * gridResX;    double fourTimesGridResSquared=gridResSquared * 4;    double planCurv, profCurv, slope;    double eightGridRes=8 * gridResX;    double[] N=new double[8];    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setPreferredPalette("landclass.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          z=z * zFactor;          for (c=0; c < 8; c++) {            N[c]=DEM.getValue(row + dY[c],col + dX[c]);            if (N[c] != noData) {              N[c]=N[c] * zFactor;            } else {              N[c]=z;            }          }          Zx=(N[1] - N[5]) / gridResTimes2;          Zy=(N[7] - N[3]) / gridResTimes2;          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          Zx2=Zx * Zx;          Zy2=Zy * Zy;          p=Zx2 + Zy2;          q=p + 1;          if (p > 0) {            fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;            fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;            slope=Math.atan(Math.sqrt(fx * fx + fy * fy));            slope=slope * radToDeg;            planCurv=-1 * (Zxx * Zy2 - 2 * Zxy * Zx* Zy + Zyy * Zx2) / Math.pow(p,1.5);            planCurv=(planCurv * radToDeg);            profCurv=-1 * (Zxx * Zx2 + 2 * Zxy * Zx* Zy + Zyy * Zy2) / Math.pow(p * q,1.5);            profCurv=(profCurv * radToDeg);            if (profCurv < -profCurvThreshold && planCurv <= -planCurvThreshold & slope > slopeThreshold) {              output.setValue(row,col,1);            } else             if (profCurv < -profCurvThreshold && planCurv > planCurvThreshold && slope > slopeThreshold) {              output.setValue(row,col,2);            } else             if (profCurv > profCurvThreshold && planCurv <= planCurvThreshold && slope > slopeThreshold) {              output.setValue(row,col,3);            } else             if (profCurv > profCurvThreshold && planCurv > planCurvThreshold && slope > slopeThreshold) {              output.setValue(row,col,4);            } else             if (profCurv >= -profCurvThreshold && profCurv < profCurvThreshold && slope > slopeThreshold && planCurv <= -planCurvThreshold) {              output.setValue(row,col,5);            } else             if (profCurv >= -profCurvThreshold && profCurv < profCurvThreshold && slope > slopeThreshold && planCurv > planCurvThreshold) {              output.setValue(row,col,6);            } else             if (slope <= slopeThreshold) {              output.setValue(row,col,7);            } else {              output.setValue(row,col,noData);            }          } else {            output.setValue(row,col,noData);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);    String retstr="LANDFORM CLASSIFICATION KEY\n";    retstr+="\nValue:\tClass";    retstr+="\n1\tConvergent Footslope";    retstr+="\n2\tDivergent Footslope";    retstr+="\n3\tConvergent Shoulder";    retstr+="\n4\tDivergent Shoulder";    retstr+="\n5\tConvergent Backslope";    retstr+="\n6\tDivergent Backslope";    retstr+="\n7\tLevel";    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static int countOfAbsoluteSources(int[][] sources,int destAgentRow,int destAgentColumn){  int countOfSources=0;  for (int index=0; index < sources.length; index++) {    if ((sources[index][ROW_INDEX] != destAgentRow) && (sources[index][COLUMN_INDEX] != destAgentColumn)) {      countOfSources++;    }  }  return countOfSources;}  }
class C{  @Deprecated public void addSlideInFromRightAnimator(@NonNull List<Animator> animators,@NonNull View view,@FloatRange(from=0.0,to=1.0) float percent){  if (animatorsUsed.contains(AnimatorEnum.SLIDE_IN_LEFT) || animatorsUsed.contains(AnimatorEnum.SLIDE_IN_RIGHT) || animatorsUsed.contains(AnimatorEnum.SLIDE_IN_TOP)|| animatorsUsed.contains(AnimatorEnum.SLIDE_IN_BOTTOM))   return;  animators.add(ObjectAnimator.ofFloat(view,"translationX",mRecyclerView.getLayoutManager().getWidth() * percent,0));  animatorsUsed.add(AnimatorEnum.SLIDE_IN_RIGHT);}  }
class C{  public static String rsaSign(String content,String privateKey,String charset) throws CommonsException {  try {    PrivateKey priKey=getPrivateKeyFromPKCS8(SignatureConstant.SIGN_TYPE_RSA,new ByteArrayInputStream(privateKey.getBytes()));    java.security.Signature signature=java.security.Signature.getInstance(SignatureConstant.SIGN_ALGORITHMS);    signature.initSign(priKey);    if (StringUtils.isEmpty(charset)) {      signature.update(content.getBytes());    } else {      signature.update(content.getBytes(charset));    }    byte[] signed=signature.sign();    return new String(Base64.encodeBase64(signed));  } catch (  Exception e) {    throw new CommonsException(ErrorType.SYS0004);  }}  }
class C{  public static Date pgnDateHeaderToDate(String pgnDateValue){  Date result=null;  initPgnDateHeader();  if (pgnDateValue.length() != 10) {    LOG.error("Invalid pgn header date format: " + pgnDateValue + " setting to default.");    result=DEFAULT_PGN_DATE_HEADER;  } else   if (pgnDateValue.startsWith("????")) {    result=DEFAULT_PGN_DATE_HEADER;  } else {    String year=pgnDateValue.substring(0,4);    String month=pgnDateValue.substring(5,7);    String day=pgnDateValue.substring(8,10);    if (month.equals("??")) {      month="01";    }    if (day.equals("??")) {      day="01";    }    try {      result=PGN_HEADER_DATE_FORMAT.parse(year + "." + month+ "."+ day);    } catch (    ParseException pe) {      LOG.error("Invalid pgn header date format: " + pgnDateValue + " "+ year+ "."+ month+ "."+ day+ " setting to default.");      result=DEFAULT_PGN_DATE_HEADER;    }  }  return result;}  }
class C{  protected boolean isJar(URL url,byte[] buffer){  InputStream is=null;  try {    is=url.openStream();    is.read(buffer,0,JAR_MAGIC.length);    if (Arrays.equals(buffer,JAR_MAGIC)) {      if (log.isDebugEnabled()) {        log.debug("Found JAR: " + url);      }      return true;    }  } catch (  Exception e) {  } finally {    if (is != null) {      try {        is.close();      } catch (      Exception e) {      }    }  }  return false;}  }
class C{  public BinaryNode<E> min(){  return min(root);}  }
class C{  private void addReferences(Document doc,Eml eml) throws DocumentException {  if (exists(eml.getBibliographicCitationSet()) && !eml.getBibliographicCitationSet().getBibliographicCitations().isEmpty()) {    Paragraph p=new Paragraph();    p.setAlignment(Element.ALIGN_JUSTIFIED);    p.setFont(font);    p.add(new Phrase(getText("rtf.references"),fontTitle));    p.add(Chunk.NEWLINE);    for (    Citation citation : eml.getBibliographicCitationSet().getBibliographicCitations()) {      if (exists(citation.getCitation())) {        p.add(citation.getCitation().replace("\r\n","\n"));      }      if (exists(citation.getIdentifier())) {        p.add(" ");        p.add(citation.getIdentifier());      }      p.add(Chunk.NEWLINE);    }    doc.add(p);    p.clear();  }}  }
class C{  public void addSettingsGroup(SettingsGroup group){  PROPS.add(group);  fireSettingsHandlerEvent(EventType.SETTINGS_GROUP_ADDED,group);}  }
class C{  public void reenable(Application application){  if (application != null && application instanceof FoamApp) {    FoamMain foamMain=((FoamApp)application).getFoamMain();    if (foamMain != null) {      foamMain.start();    }  }}  }
class C{  public Timestamp valueDtime(){  int t, seconds, minutes, hours, day, month, year;  t=rawData[0];  seconds=t % 60;  t/=60;  minutes=t % 60;  t/=60;  hours=t % 24;  t/=24;  day=t % 31 + 1;  t/=31;  month=t % 12 + 1;  t/=12;  year=t + 1988;  GregorianCalendar gc=new GregorianCalendar(year,month - 1,day,hours,minutes,seconds);  return new Timestamp(gc.getTimeInMillis());}  }
class C{  public boolean isCleanSession(){  return this.cleanSession;}  }
class C{  protected EnchantmentStorageMetaBuilder(){  this.meta=Diorite.getCore().getItemFactory().construct(EnchantmentStorageMeta.class);}  }
class C{  public BerkeleyConsideredProtein(){}  }
class C{  public final boolean isEnabled(JsonParser.Feature f){  return (_parserFeatures & f.getMask()) != 0;}  }
class C{  public NoRouteToHostException(String detailMessage){  super(detailMessage);}  }
class C{  public boolean isOptInFullRBF(){  return sequence < NO_SEQUENCE - 1;}  }
class C{  public static void main(String[] argv){  Debug.init();  ArgParser ap=new ArgParser("DTEDAdmin");  ap.add("boundary","upper lat, left lon, lower lat, right lon",4,true);  ap.add("copy","Copy files to DTED directory.",1);  ap.add("level","DTED level to consider (0, 1, 2), 0 is default.  Needs to be set for other levels.",1);  ap.add("outside","Use files outside boundary.");  ap.add("query","Print out files that meet parameters.");  ap.add("remove","Delete DTED files.");  ap.add("source","The source DTED directory path.",1);  ap.add("verbose","Print out progress.");  if (!ap.parse(argv)) {    ap.printUsage();    System.exit(0);  }  String arg[];  String sourceDir=null;  arg=ap.getArgValues("source");  if (arg != null) {    sourceDir=arg[0];  }  boolean inside=true;  arg=ap.getArgValues("outside");  if (arg != null) {    inside=false;  }  int level=0;  arg=ap.getArgValues("level");  if (arg != null) {    try {      level=Integer.parseInt(arg[0]);    } catch (    NumberFormatException nfe) {      level=0;    }  }  arg=ap.getArgValues("verbose");  if (arg != null) {    Debug.put("dted");  }  DTEDAdmin admin=null;  double ullat=89;  double ullon=-180;  double lrlat=-90;  double lrlon=179;  arg=ap.getArgValues("boundary");  if (arg != null) {    try {      ullat=Double.parseDouble(arg[0]);      ullon=Double.parseDouble(arg[1]);      lrlat=Double.parseDouble(arg[2]);      lrlon=Double.parseDouble(arg[3]);    } catch (    NumberFormatException nfe1) {      Debug.error("DTEDAdmin: boundary coordinates not valid:\n" + "  " + arg[0] + "\n  "+ arg[1]+ "\n  "+ arg[2]+ "\n  "+ arg[3]);      System.exit(0);    }  }  if (sourceDir != null) {    admin=new DTEDAdmin(sourceDir,ullat,ullon,lrlat,lrlon,level,inside,DTEDAdmin.DTED_EQUAL_LEVELS);  }  arg=ap.getArgValues("copy");  if (arg != null) {    if (admin != null) {      admin.copyTo(arg[0]);    } else {      Debug.error("DTEDAdmin:  frame parameters not set for copy.  Need source directory");      System.exit(0);    }  }  arg=ap.getArgValues("query");  if (arg != null) {    if (admin != null) {      Debug.output("DTED frame files found:");      admin.query();    } else {      Debug.error("DTEDAdmin:  frame parameters not set for query.  Need source directory");      System.exit(0);    }  }  arg=ap.getArgValues("remove");  if (arg != null) {    if (admin != null) {      Debug.output("These files will be deleted:");      admin.query();      Debug.output("Are you sure you want to delete them? [y/N]");      int answer='n';      try {        answer=System.in.read();      } catch (      IOException ioe) {      }      if (answer == 'Y' || answer == 'y') {        admin.remove();      } else {        Debug.output("File removal aborted.");      }    } else {      Debug.error("DTEDAdmin:  frame parameters not set for copy.  Need source directory");      System.exit(0);    }  }}  }
class C{  public void scriptingTags(TagInfo tagInfo){  tagInfo=new TagInfo("script",ContentType.all,BelongsTo.HEAD_AND_BODY,false,false,false,CloseTag.required,Display.none);  this.put("script",tagInfo);  tagInfo=new TagInfo("noscript",ContentType.all,BelongsTo.HEAD_AND_BODY,false,false,false,CloseTag.required,Display.block);  this.put("noscript",tagInfo);}  }
class C{  public void testWriteReadXml_oldName() throws IOException {  final String eventsFilename=getOutputDirectory() + "events.xml";  BufferedWriter writer=IOUtils.getBufferedWriter(eventsFilename);  writer.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>");  writer.write("<events version=\"1.0\">");  writer.write("<event time=\"25200.0\" type=\"agentMoney\" amount=\"2.34\" person=\"1\"  />");  writer.write("<event time=\"30600.0\" type=\"agentMoney\" amount=\"-3.45\" person=\"2\"  />");  writer.write("</events>");  writer.close();  EventsManager readEvents=EventsUtils.createEventsManager();  EventsCollector collector=new EventsCollector();  readEvents.addHandler(collector);  MatsimEventsReader reader=new MatsimEventsReader(readEvents);  reader.readFile(eventsFilename);  assertEquals(2,collector.getEvents().size());  assertTrue(collector.getEvents().get(0) instanceof PersonMoneyEvent);  PersonMoneyEvent e1=(PersonMoneyEvent)collector.getEvents().get(0);  assertEquals(25200.0,e1.getTime(),EPSILON);  assertEquals("1",e1.getPersonId().toString());  assertEquals(2.34,e1.getAmount(),EPSILON);  assertTrue(collector.getEvents().get(1) instanceof PersonMoneyEvent);  PersonMoneyEvent e2=(PersonMoneyEvent)collector.getEvents().get(1);  assertEquals(30600.0,e2.getTime(),EPSILON);  assertEquals("2",e2.getPersonId().toString());  assertEquals(-3.45,e2.getAmount(),EPSILON);}  }
class C{  public static HttpResponse doPost(String host,String path,String method,Map<String,String> headers,Map<String,String> querys,byte[] body) throws Exception {  HttpClient httpClient=wrapClient(host);  HttpPost request=new HttpPost(buildUrl(host,path,querys));  for (  Map.Entry<String,String> e : headers.entrySet()) {    request.addHeader(e.getKey(),e.getValue());  }  if (body != null) {    request.setEntity(new ByteArrayEntity(body));  }  return httpClient.execute(request);}  }
class C{  public boolean validRule(Rule r){  if (!super.validRule(r)) {    return false;  }  if (r.lhs.size() != 1 || !isVariable(r.lhs.get(0))) {    return false;  }  return true;}  }
class C{  public Matrix4x3f assumeNothing(){  properties=0;  return this;}  }
class C{  public static void addTextField(final JPanel panel,final JTextField textField,final String description,final String hint,final String value){  Preconditions.checkNotNull(panel,"IE01602: Panel argument can not be null");  Preconditions.checkNotNull(textField,"IE01603: Text field argument can not be null");  Preconditions.checkNotNull(description,"IE01604: Description argument can not be null");  Preconditions.checkNotNull(value,"IE01605: Value argument can not be null");  textField.setText(value);  textField.setPreferredSize(new Dimension(PREFERRED_WIDTH,PREFERRED_HEIGHT));  addComponent(panel,textField,description,hint);}  }
class C{  public static void writeByteArrayToFile(File file,byte[] data,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    out.write(data);    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public Source<Long> all(){  return between(Long.MIN_VALUE,Long.MAX_VALUE);}  }
class C{  public static void addRowTimes(Matrix matrix,long diag,long fromCol,long row,double factor){  long cols=matrix.getColumnCount();  for (long col=fromCol; col < cols; col++) {    matrix.setAsDouble(matrix.getAsDouble(row,col) - factor * matrix.getAsDouble(diag,col),row,col);  }}  }
class C{  @VisibleForTesting public boolean doesContainAWord(String selection){  return mContainsWordPattern.matcher(selection).find();}  }
class C{  protected void prepare(){  ProcessInfoParameter[] parameters=getParameter();  for (  ProcessInfoParameter para : parameters) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals("IsImportOnlyNoErrors"))     m_IsImportOnlyNoErrors="Y".equals(para.getParameter()); else     if (name.equals("DeleteOldImported"))     m_DeleteOldImported="Y".equals(para.getParameter()); else     if (name.equals("DocAction"))     m_docAction=(String)para.getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public boolean isConnectedOrConnecting(){  return (status == ConnectionStatus.CONNECTED) || (status == ConnectionStatus.CONNECTING);}  }
class C{  public ORDER_BY ORDER_BY(String orderBy){  return new ORDER_BY(this,orderBy);}  }
class C{  public CNameDescriptionFilterExpression(final String text,final IViewContainer module){  m_text=Preconditions.checkNotNull(text,"IE02808: text argument can not be null");  m_module=module;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public void onCreate(Bundle savedInstanceState){  mSlidingMenu=(SlidingMenu)LayoutInflater.from(mActivity).inflate(R.layout.slidingmenumain,null);}  }
class C{  public Blade listen(int port){  this.port=port;  return this;}  }
class C{  public static <E,C extends Collection<E>>UnmodifiableMutableCollection<E> of(C collection){  if (collection == null) {    throw new IllegalArgumentException("cannot create a UnmodifiableMutableCollection for null");  }  return new UnmodifiableMutableCollection<>(CollectionAdapter.adapt(collection));}  }
class C{  public GprsTransport(final String host){  super(host);}  }
class C{  private synchronized void clearChildren(){  if (child == null) {    return;  }  for (int i=0; i < child.length; ++i) {    child[i].clearChildren();    detachChild(child[i]);    child[i].enabled=false;    child[i].leftDirty=false;    child[i].rightDirty=false;    child[i].bottomDirty=false;    child[i].topDirty=false;    child[i]=null;  }  child=null;  attachChild(mesh);  leftDirty=true;  rightDirty=true;  bottomDirty=true;  topDirty=true;}  }
class C{  public double dot(Vector2D v){  return x * v.x + y * v.y;}  }
class C{  public static int countGsmSeptetsUsingTables(CharSequence s,boolean use7bitOnly,int languageTable,int languageShiftTable){  int count=0;  int sz=s.length();  SparseIntArray charToLanguageTable=sCharsToGsmTables[languageTable];  SparseIntArray charToShiftTable=sCharsToShiftTables[languageShiftTable];  for (int i=0; i < sz; i++) {    char c=s.charAt(i);    if (c == GSM_EXTENDED_ESCAPE) {      Log.w(TAG,"countGsmSeptets() string contains Escape character, skipping.");      continue;    }    if (charToLanguageTable.get(c,-1) != -1) {      count++;    } else     if (charToShiftTable.get(c,-1) != -1) {      count+=2;    } else     if (use7bitOnly) {      count++;    } else {      return -1;    }  }  return count;}  }
class C{  private void extractThemeAndCriterionSet(){  themeMap=new HashMap();  criterionMap=new HashMap();  for (  Test test : testSet) {    Criterion criterion=test.getCriterion();    if (criterionMap.containsKey(criterion)) {      Integer testCounter=criterionMap.get(criterion) + 1;      criterionMap.put(criterion,testCounter);    } else {      criterionMap.put(criterion,1);    }    Theme theme=criterion.getTheme();    if (themeMap.containsKey(theme)) {      Integer testCounter=themeMap.get(theme) + 1;      themeMap.put(theme,testCounter);    } else {      themeMap.put(theme,1);    }  }}  }
class C{  public WrappingStringBuilder wrapText(final String s){  if (s.indexOf('\n') != -1) {    throw new IllegalArgumentException("Input string cannot contain line breaks.");  }  int start=0;  int end=0;  while (end < s.length()) {    boolean leader=true;    for (end=start; end < s.length(); end++) {      final char c=s.charAt(end);      if (Character.isWhitespace(c)) {        if (!leader) {          break;        }      } else {        leader=false;      }    }    wrapWord(s.substring(start,end));    start=end;  }  return this;}  }
class C{  @Override public Long zrevrank(final byte[] key,final byte[] member){  checkIsInMultiOrPipeline();  client.zrevrank(key,member);  return client.getIntegerReply();}  }
class C{  public void chunk(ByteBuffer chunk) throws Exception {  try {    httpStreamHandler.chunk(chunk);  } catch (  Throwable e) {    log.error("Exception while invoking streaming handlers",e);    httpStreamHandler.error(e);    throw e;  }}  }
class C{  public static void initializeDefaultValues(){  IPreferenceStore store=getPreferenceStore();  ColorRegistry registry=PlatformUI.getWorkbench().getThemeManager().getCurrentTheme().getColorRegistry();  String NOBACKGROUNDBOLD=" | null | false";  String JUSTITALIC=" | null | false | true";  String JUSTBOLD=" | null | true | false";  String styleValue=ColorHelper.findRGBString(registry,IStyleConstantsForAngular.ANGULAR2_EXPRESSION_BORDER,0,0,128) + JUSTBOLD;  store.setDefault(IStyleConstantsForAngular.ANGULAR2_EXPRESSION_BORDER,styleValue);  styleValue=" null|" + ColorHelper.findRGBString(registry,IStyleConstantsForAngular.ANGULAR2_EXPRESSION,232,235,255) + " | false | false";  store.setDefault(IStyleConstantsForAngular.ANGULAR2_EXPRESSION,styleValue);  styleValue=ColorHelper.findRGBString(registry,IStyleConstantsForAngular.ANGULAR2_DIRECTIVE_NAME,0,0,128) + JUSTBOLD;  store.setDefault(IStyleConstantsForAngular.ANGULAR2_DIRECTIVE_NAME,styleValue);  store.setDefault(Angular2UIPreferenceNames.HIGHLIGHTING_DIRECTIVE_ENABLED,true);  store.setDefault(Angular2UIPreferenceNames.HIGHLIGHTING_EXPRESSION_ENABLED,true);  store.setDefault(Angular2UIPreferenceNames.TYPING_COMPLETE_END_EL,true);}  }
class C{  protected void beep(){  sysOut.print("\007");  sysOut.flush();}  }
class C{  public SearchItem(String title,String value,int type){  this(title,value,type,null);}  }
class C{  public Short(short value){}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static boolean isLargeObject(int type){  return type == Value.BLOB || type == Value.CLOB;}  }
class C{  protected void print(String s) throws IOException {  int len=s.length();  for (int i=0; i < len; i++) {    int ch=s.charAt(i);    os.write(ch);  }}  }
class C{  public void addChunk(ByteBuffer bb,int length) throws IOException {  if (this.failure == null && length > 0) {    this.t.addChunk(bb,length);    this.size+=length;  }}  }
class C{  public static String[] convertStrings(List<String> strings){  String[] ret=new String[strings.size()];  for (int i=0; i < ret.length; i++) {    ret[i]=strings.get(i);  }  return ret;}  }
class C{  @Bean @Profile("!" + Constants.SPRING_PROFILE_FAST) public Docket swaggerSpringfoxDocket(JHipsterProperties jHipsterProperties){  log.debug("Starting Swagger");  StopWatch watch=new StopWatch();  watch.start();  ApiInfo apiInfo=new ApiInfo(jHipsterProperties.getSwagger().getTitle(),jHipsterProperties.getSwagger().getDescription(),jHipsterProperties.getSwagger().getVersion(),jHipsterProperties.getSwagger().getTermsOfServiceUrl(),jHipsterProperties.getSwagger().getContact(),jHipsterProperties.getSwagger().getLicense(),jHipsterProperties.getSwagger().getLicenseUrl());  Docket docket=new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo).genericModelSubstitutes(ResponseEntity.class).forCodeGeneration(true).genericModelSubstitutes(ResponseEntity.class).directModelSubstitute(java.time.LocalDate.class,String.class).directModelSubstitute(java.time.ZonedDateTime.class,Date.class).directModelSubstitute(java.time.LocalDateTime.class,Date.class).select().paths(regex(DEFAULT_INCLUDE_PATTERN)).build();  watch.stop();  log.debug("Started Swagger in {} ms",watch.getTotalTimeMillis());  return docket;}  }
class C{  public VNXeCommandJob deleteShareForSnapshot(String shareId){  _url=URL_NFS + shareId;  if (getShareById(shareId) != null) {    unsetQueryParameters();    return deleteRequestAsync(null);  }  throw VNXeException.exceptions.vnxeCommandFailed("The shareId is not found: " + shareId);}  }
class C{  public static Random createRandom(long rgenseed){  Random ret=new Random();  if (0L == rgenseed) {    rgenseed=System.currentTimeMillis();    System.out.println("Random number generator seed is " + rgenseed);  } else {    System.out.println("Fixed Random number generator seed is " + rgenseed);  }  ret.setSeed(rgenseed);  return ret;}  }
class C{  public QuotaExceededException(Throwable cause){  super(cause);}  }
class C{  public static void main(String[] args){  rGen=new Random();  rGen.setSeed(1);  int numSearches=50;  int NUM_TRIALS=100;  int scale=1;  System.out.println("n\tRec(2)\tDbl(2)\tRec(10)\tDbl(10)");  for (int n=4; n <= 131072; n*=2) {    double dr[]=new double[2];    double r[]=new double[2];    for (int d=2; d <= 10; d*=5) {      for (int t=1; t <= NUM_TRIALS; t++) {        IMultiPoint[] points=randomPoints(n,d,scale);        System.gc();        IMultiPoint[] searchPoints=randomPoints(numSearches,d,scale);        KDTree tree=KDFactory.generate(points);        DimensionalNode.numDoubleRecursions=0;        DimensionalNode.numRecursions=0;        for (        IMultiPoint imp : searchPoints) {          tree.nearest(imp);        }        dr[d / 10]=DimensionalNode.numDoubleRecursions / (1.0 * numSearches);        r[d / 10]=DimensionalNode.numRecursions / (1.0 * numSearches);      }    }    System.out.println(n + "\t" + r[0]+ "\t"+ dr[0]+ "\t"+ r[1]+ "\t"+ dr[1]);  }}  }
class C{  public InlineQueryResultVideo.InlineQueryResultVideoBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  public final String leftSide(Instances instances){  return "";}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  public boolean shouldSelectCell(EventObject e){  log.finest(m_mField.getColumnName());  return true;}  }
class C{  public void changeStatus(String newStatus,Timestamp date){  String status=getA_Asset_Status();  if (CLogMgt.isLevelFinest())   log.finest("Entering: " + status + "->"+ newStatus+ ", date="+ date);  if (date == null) {    date=Env.getContextAsDate(getCtx(),"#Date");  }  if (newStatus.equals(A_ASSET_STATUS_Activated)) {    setAssetActivationDate(date);  }  if (newStatus.equals(A_ASSET_STATUS_Preservation)) {    setAssetDisposalDate(date);    Collection<MDepreciationWorkfile> workFiles=MDepreciationWorkfile.forA_Asset_ID(getCtx(),getA_Asset_ID(),get_TrxName());    for (    MDepreciationWorkfile assetwk : workFiles) {      assetwk.truncDepreciation();      assetwk.saveEx();    }  }  if (newStatus.equals(A_ASSET_STATUS_Disposed)) {    setAssetDisposalDate(date);  }  setA_Asset_Status(newStatus);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public Vertex createWord(String text,Vertex meaning,boolean prime,Network network){  return createWord(text,meaning,prime,network,null,null,null,null,null);}  }
class C{  public Element writeDimension(Element parent,Object o,String name) throws Exception {  Element node;  Dimension dim;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  dim=(Dimension)o;  node=addElement(parent,name,dim.getClass().getName(),false);  writeDoubleToXML(node,dim.getWidth(),VAL_WIDTH);  writeDoubleToXML(node,dim.getHeight(),VAL_HEIGHT);  return node;}  }
class C{  public AttachmentEntry uploadAttachment(String filename,String parentUrl,String description) throws IOException, ServiceException {  File file=new File(filename);  return uploadAttachment(file,parentUrl,file.getName(),description);}  }
class C{  private static int NewCharArray(JNIEnvironment env,int length){  if (traceJNI)   VM.sysWrite("JNI called: NewCharArray  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    char[] newArray=new char[length];    return env.pushJNIRef(newArray);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  private void initOverallStatsForAllIntervals(){  m_overallStatsForAllIntervals=new OverallStats[m_subIntervalSizeList.length];  for (int i=0; i < m_subIntervalSizeList.length; i++) {    final short subIntervalSize=m_subIntervalSizeList[i];    m_overallStatsForAllIntervals[i]=new OverallStats(subIntervalSize);  }}  }
class C{  public boolean connectToWifi(String knownSSID){  WifiConfiguration config=new WifiConfiguration();  config.SSID=knownSSID;  config.allowedKeyManagement.set(KeyMgmt.NONE);  return connectToWifiWithConfiguration(config);}  }
class C{  public void testKeywordAttribute() throws IOException {  MockTokenizer tokenizer=whitespaceMockTokenizer("lucene is awesome");  tokenizer.setEnableChecks(true);  HunspellStemFilter filter=new HunspellStemFilter(tokenizer,dictionary);  assertTokenStreamContents(filter,new String[]{"lucene","lucen","is","awesome"},new int[]{1,0,1,1});  tokenizer=whitespaceMockTokenizer("lucene is awesome");  CharArraySet set=new CharArraySet(Arrays.asList("Lucene"),true);  filter=new HunspellStemFilter(new SetKeywordMarkerFilter(tokenizer,set),dictionary);  assertTokenStreamContents(filter,new String[]{"lucene","is","awesome"},new int[]{1,1,1});}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'THREAD_INFO' ("+ "'TID' TEXT,"+ "'PID' TEXT,"+ "'PAGE' INTEGER,"+ "'NOPIC' TEXT,"+ "'POST_AUTHOR_PUID' INTEGER,"+ "'TIME' TEXT,"+ "'USER_IMG' TEXT,"+ "'AUTHOR_PUID' TEXT,"+ "'USERNAME' TEXT,"+ "'FID' TEXT,"+ "'VISITS' TEXT,"+ "'RECOMMEND_NUM' TEXT,"+ "'VIA' TEXT,"+ "'UPDATE_INFO' TEXT,"+ "'CONTENT' TEXT,"+ "'TITLE' TEXT,"+ "'TOTAL_PAGE' INTEGER,"+ "'FORUM_NAME' TEXT);");}  }
class C{  public static boolean smOrEq(double a,double b){  return (a - b < SMALL);}  }
class C{  public PatternMatchUntilExpr(){}  }
class C{  private MediaItem parseMediaItem(XmlPullParser parser) throws IOException {  final String mediaItemId=parser.getAttributeValue("",ATTR_ID);  final String type=parser.getAttributeValue("",ATTR_TYPE);  final String filename=parser.getAttributeValue("",ATTR_FILENAME);  final int renderingMode=Integer.parseInt(parser.getAttributeValue("",ATTR_RENDERING_MODE));  final MediaItem currentMediaItem;  if (MediaImageItem.class.getSimpleName().equals(type)) {    final long durationMs=Long.parseLong(parser.getAttributeValue("",ATTR_DURATION));    currentMediaItem=new MediaImageItem(this,mediaItemId,filename,durationMs,renderingMode);  } else   if (MediaVideoItem.class.getSimpleName().equals(type)) {    final long beginMs=Long.parseLong(parser.getAttributeValue("",ATTR_BEGIN_TIME));    final long endMs=Long.parseLong(parser.getAttributeValue("",ATTR_END_TIME));    final int volume=Integer.parseInt(parser.getAttributeValue("",ATTR_VOLUME));    final boolean muted=Boolean.parseBoolean(parser.getAttributeValue("",ATTR_MUTED));    final String audioWaveformFilename=parser.getAttributeValue("",ATTR_AUDIO_WAVEFORM_FILENAME);    currentMediaItem=new MediaVideoItem(this,mediaItemId,filename,renderingMode,beginMs,endMs,volume,muted,audioWaveformFilename);    final long beginTimeMs=Long.parseLong(parser.getAttributeValue("",ATTR_BEGIN_TIME));    final long endTimeMs=Long.parseLong(parser.getAttributeValue("",ATTR_END_TIME));    ((MediaVideoItem)currentMediaItem).setExtractBoundaries(beginTimeMs,endTimeMs);    final int volumePercent=Integer.parseInt(parser.getAttributeValue("",ATTR_VOLUME));    ((MediaVideoItem)currentMediaItem).setVolume(volumePercent);  } else {    throw new IllegalArgumentException("Unknown media item type: " + type);  }  return currentMediaItem;}  }
class C{  private void writeElement(OutputNode node,Object item,String key) throws Exception {  String name=style.getAttribute(key);  OutputNode child=node.getChild(name);  if (item != null) {    if (!isOverridden(child,item)) {      root.write(child,item);    }  }}  }
class C{  private static boolean arabicCharShapesRight(char c){  int charVal=c;  if ((charVal >= 0x0622 && charVal <= 0x0625) || (charVal == 0x0627) || (charVal == 0x0629)|| (charVal >= 0x062F && charVal <= 0x0632)|| (charVal == 0x0648)|| (charVal >= 0x0671 && charVal <= 0x0673)|| (charVal >= 0x0675 && charVal <= 0x0677)|| (charVal >= 0x0688 && charVal <= 0x0699)|| (charVal == 0x06C0)|| (charVal >= 0x06C2 && charVal <= 0x06CB)|| (charVal == 0x06CD)|| (charVal == 0x06CF)|| (charVal >= 0x06D2 && charVal <= 0x06D3)|| arabicCharShapesDuel(c)) {    return true;  }  return false;}  }
class C{  public static void init(Resources res){  mRes=res;}  }
class C{  public static boolean isSameDomainName(String url1,String url2) throws MalformedURLException {  return isSameDomainName(new URL(url1),new URL(url2));}  }
class C{  public ProtocolException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void merge(int A[],int m,int B[],int n){  if (n == 0)   return;  while (m > 0 && n > 0) {    if (A[m - 1] > B[n - 1]) {      A[m + n - 1]=A[m - 1];      m--;    } else {      A[m + n - 1]=B[n - 1];      n--;    }  }  while (n > 0)   A[n - 1]=B[n-- - 1];}  }
class C{  public static BufferedImage read(InputStream in) throws IOException {  return read(in,true);}  }
class C{  private void pop(char c) throws JSONException {  if (this.top <= 0) {    throw new JSONException("Nesting error.");  }  char m=this.stack[this.top - 1] == null ? 'a' : 'k';  if (m != c) {    throw new JSONException("Nesting error.");  }  this.top-=1;  this.mode=this.top == 0 ? 'd' : this.stack[this.top - 1] == null ? 'a' : 'k';}  }
class C{  public Coord4D translate(int x,int y,int z){  xCoord+=x;  yCoord+=y;  zCoord+=z;  return this;}  }
class C{  public NodeLocator(String publicId,String systemId,int lineNumber,int columnNumber){  this.m_publicId=publicId;  this.m_systemId=systemId;  this.m_lineNumber=lineNumber;  this.m_columnNumber=columnNumber;}  }
class C{  protected void fixUnclosedTagsUpToMatchingParent(Tag tag,Node matchingParent){  if (domBuilder.config.isUnclosedTagAsOrphanCheck()) {    Node thisNode=parentNode;    if (!TagUtil.equalsIgnoreCase(tag.getName(),"table")) {      while (thisNode != matchingParent) {        String thisNodeName=thisNode.getNodeName().toLowerCase();        if (thisNodeName.equals("table") || thisNodeName.equals("ul") || thisNodeName.equals("ol")) {          String positionString=tag.getPosition();          if (positionString == null) {            positionString="";          }          error("Orphan closed tag ignored: </" + tag.getName() + "> "+ positionString);          return;        }        thisNode=thisNode.getParentNode();      }    }  }  while (true) {    if (parentNode == matchingParent) {      parentNode=parentNode.getParentNode();      break;    }    Node parentParentNode=parentNode.getParentNode();    if (domBuilder.config.isImpliedEndTags()) {      if (implRules.implicitlyCloseParentTagOnNewTag(parentParentNode.getNodeName(),parentNode.getNodeName())) {        parentNode.detachFromParent();        parentParentNode.getParentNode().addChild(parentNode);      }    }    error("Unclosed tag closed: <" + parentNode.getNodeName() + ">");    parentNode=parentParentNode;  }}  }
class C{  ServerMember update(Status status,Instant time){  if (this.status != status) {    this.status=Assert.notNull(status,"status");    if (time.isAfter(updated)) {      this.updated=Assert.notNull(time,"time");    }    if (statusChangeListeners != null) {      statusChangeListeners.accept(status);    }  }  return this;}  }
class C{  public void testCompareEqualScale2(){  String a="12380964839238475457356735674573563567890295784902768787678287";  int aScale=18;  String b="4573563923487289357829759278282992758247567890295784902768787678287";  int bScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  int result=-1;  assertEquals("incorrect result",result,aNumber.compareTo(bNumber));}  }
class C{  public final int size(){  return m_firstFree;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGenPackage.GENERATOR_ENTRY__FEATURES:    return ((InternalEList<?>)getFeatures()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private boolean doesStorageSystemSupportVolumeExpand(StorageSystem storageSystem) throws WBEMException {  boolean expandSupported=false;  CloseableIterator<CIMInstance> cimInstances=null;  CIMObjectPath storageConfigServicePath=_cimPath.getConfigSvcPath(storageSystem);  try {    cimInstances=_helper.getAssociatorInstances(storageSystem,storageConfigServicePath,null,SmisConstants.EMC_STORAGE_CONFIGURATION_CAPABILITIES,null,null,SmisConstants.PS_SUPPORTED_STORAGE_ELEMENT_FEATURES);    if (cimInstances != null) {      while (cimInstances.hasNext()) {        CIMInstance capabilitiesInstance=cimInstances.next();        UnsignedInteger16[] supportedFeatures=(UnsignedInteger16[])capabilitiesInstance.getPropertyValue(SmisConstants.CP_SUPPORTED_STORAGE_ELEMENT_FEATURES);        for (        UnsignedInteger16 supportedFeatureEntry : supportedFeatures) {          if (supportedFeatureEntry.intValue() == SmisConstants.STORAGE_ELEMENT_CAPACITY_EXPANSION_VALUE) {            expandSupported=true;            return true;          }        }      }    }  }  finally {    if (cimInstances != null) {      cimInstances.close();    }    _log.info(String.format("StorageSystem %s %s volume expand",storageSystem.getNativeGuid(),(expandSupported) ? "supports" : "does not support"));  }  return false;}  }
class C{  private String serialize(Variable variable) throws IOException {  ObjectOutputStream oos=null;  try {    ByteArrayOutputStream baos=new ByteArrayOutputStream();    oos=new ObjectOutputStream(baos);    oos.writeObject(variable);    byte[] encoding=Base64.encodeBase64(baos.toByteArray(),false);    return StringUtils.newStringUtf8(encoding);  }  finally {    if (oos != null) {      oos.close();    }  }}  }
class C{  public Boolean isLocked(){  return locked;}  }
class C{  protected boolean pageUp(TextView widget,Spannable buffer){  return false;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,int duration){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).rotationX(0).translationY(0).start();}  }
class C{  public DistributedLogClientBuilder handshakeTracing(boolean enabled){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setHandshakeTracingEnabled(enabled);  return newBuilder;}  }
class C{  public PeerAddress(NetworkParameters params,byte[] payload,int offset,int protocolVersion) throws ProtocolException {  super(params,payload,offset,protocolVersion);}  }
class C{  public static double normalRand(){  double c, x, y, u, u1, v;  c=Math.sqrt(2.0 / Math.exp(1.0));  do {    u=uniformRand();    u1=uniformRand();    v=c * (2 * u1 - 1);    x=v / u;    y=x * x / 4.0;  } while ((y > (1 - u)) && (y > -Math.log(u)));  return (x);}  }
class C{  protected Rect updateFastScrollerBounds(FastScrollRecyclerView rv,int lastTouchY){  invalidateRect.set(backgroundBounds);  if (isVisible()) {    int edgePadding=rv.getMaxScrollbarWidth();    int bgPadding=(originalBackgroundSize - textBounds.height()) / 2;    int bgHeight=originalBackgroundSize;    int bgWidth=Math.max(originalBackgroundSize,textBounds.width() + (2 * bgPadding));    if (Utilities.isRtl(resources)) {      backgroundBounds.left=rv.getBackgroundPadding().left + (2 * rv.getMaxScrollbarWidth());      backgroundBounds.right=backgroundBounds.left + bgWidth;    } else {      backgroundBounds.right=rv.getWidth() - rv.getBackgroundPadding().right - (2 * rv.getMaxScrollbarWidth());      backgroundBounds.left=backgroundBounds.right - bgWidth;    }    backgroundBounds.top=lastTouchY - (int)(FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR * bgHeight);    backgroundBounds.top=Math.max(edgePadding,Math.min(backgroundBounds.top,rv.getHeight() - edgePadding - bgHeight));    backgroundBounds.bottom=backgroundBounds.top + bgHeight;  } else {    backgroundBounds.setEmpty();  }  invalidateRect.union(backgroundBounds);  return invalidateRect;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public Bitmap makeIcon(){  int measureSpec=View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED);  mContainer.measure(measureSpec,measureSpec);  int measuredWidth=mContainer.getMeasuredWidth();  int measuredHeight=mContainer.getMeasuredHeight();  mContainer.layout(0,0,measuredWidth,measuredHeight);  if (mRotation == 1 || mRotation == 3) {    measuredHeight=mContainer.getMeasuredWidth();    measuredWidth=mContainer.getMeasuredHeight();  }  Bitmap r=Bitmap.createBitmap(measuredWidth,measuredHeight,Bitmap.Config.ARGB_8888);  r.eraseColor(Color.TRANSPARENT);  Canvas canvas=new Canvas(r);  if (mRotation != 0) {    if (mRotation == 1) {      canvas.translate(measuredWidth,0);      canvas.rotate(90);    } else     if (mRotation == 2) {      canvas.rotate(180,measuredWidth / 2,measuredHeight / 2);    } else {      canvas.translate(0,measuredHeight);      canvas.rotate(270);    }  }  mContainer.draw(canvas);  return r;}  }
class C{  public boolean isControl(){  return isControl(metadata);}  }
class C{  private void addInternal(final PendingChange newPendingChange){  Check.notNull(newPendingChange,"newPendingChange");  Check.notNull(newPendingChange.getServerItem(),"newPendingChange.serverItem");  final String serverPath=ServerPath.canonicalize(newPendingChange.getServerItem());  final String[] serverHierarchy=ServerPath.getHierarchy(serverPath);  String localPath=null;  String[] localHierarchy=null;  if (newPendingChange.getLocalItem() != null) {    localPath=LocalPath.canonicalize(newPendingChange.getLocalItem());    localHierarchy=LocalPath.getHierarchy(localPath);  }  changesByServerPath.put(serverPath,newPendingChange);  for (int i=0; i < serverHierarchy.length; i++) {    Set<PendingChange> changesForPath=changesByParentServerPath.get(serverHierarchy[i]);    if (changesForPath == null) {      changesForPath=new HashSet<PendingChange>();      changesByParentServerPath.put(serverHierarchy[i],changesForPath);    }    changesForPath.add(newPendingChange);  }  if (localPath != null) {    changesByLocalPath.put(localPath,newPendingChange);    for (int i=0; i < localHierarchy.length; i++) {      Set<PendingChange> changesForPath=changesByParentLocalPath.get(localHierarchy[i]);      if (changesForPath == null) {        changesForPath=new HashSet<PendingChange>();        changesByParentLocalPath.put(localHierarchy[i],changesForPath);      }      changesForPath.add(newPendingChange);    }  }}  }
class C{  public final LC gridGapY(String boundsSize){  setGridGapY(ConstraintParser.parseBoundSize(boundsSize,true,false));  return this;}  }
class C{  public ExtractSubAnimationDialog(){  super((java.awt.Frame)null,true);  initComponents();  _radioGroup.add(_radFromFile);  _radioGroup.add(_radManual);  _radManual.setSelected(true);  _txtCsvFilename.setEnabled(false);  _btnBrowse.setEnabled(false);  _splitAnimationCount=0;}  }
class C{  public static long elevationAtIndex(GeoTimeSerie gts,int idx){  if (null == gts.elevations || idx >= gts.values) {    return GeoTimeSerie.NO_ELEVATION;  } else {    return gts.elevations[idx];  }}  }
class C{  public final void push(Node value){  int ff=m_firstFree;  if ((ff + 1) >= m_mapSize) {    if (null == m_map) {      m_map=new Node[m_blocksize];      m_mapSize=m_blocksize;    } else {      m_mapSize+=m_blocksize;      Node newMap[]=new Node[m_mapSize];      System.arraycopy(m_map,0,newMap,0,ff + 1);      m_map=newMap;    }  }  m_map[ff]=value;  ff++;  m_firstFree=ff;}  }
class C{  @Override public boolean connectionAllowed(String eventName){  if (!eventName.equals("instance") && !eventName.equals("dataSet") && !eventName.equals("trainingSet")&& !eventName.equals("testSet")) {    return false;  }  if (m_listenee != null) {    return false;  }  return true;}  }
class C{  public JdbcExecutionRequest createJdbcExecutionRequest(JdbcConnection jdbcConnection,List<JdbcStatement> jdbcStatements){  JdbcExecutionRequest jdbcExecutionRequest=new JdbcExecutionRequest();  jdbcExecutionRequest.setConnection(jdbcConnection);  jdbcExecutionRequest.setStatements(jdbcStatements);  return jdbcExecutionRequest;}  }
class C{  public Feature(String line,Map cpStr2Int,Map lbStr2Int){  StringTokenizer strTok=new StringTokenizer(line," \t\r\n");  int len=strTok.countTokens();  String strIdStr=strTok.nextToken();  int idx=Integer.parseInt(strTok.nextToken());  float val=1;  double wgt=Double.parseDouble(strTok.nextToken());  StringTokenizer strIdTok=new StringTokenizer(strIdStr,"_");  String prefix=strIdTok.nextToken();  if (prefix.compareToIgnoreCase("e1") == 0) {    Integer yInt=(Integer)lbStr2Int.get(strIdTok.nextToken());    Integer ypInt=(Integer)lbStr2Int.get(strIdTok.nextToken());    if (yInt != null && ypInt != null) {      eFeature1Init(yInt.intValue(),ypInt.intValue());    }  } else   if (prefix.compareToIgnoreCase("s1") == 0) {    Integer yInt=(Integer)lbStr2Int.get(strIdTok.nextToken());    Integer cpInt=(Integer)cpStr2Int.get(strIdTok.nextToken());    if (yInt != null && cpInt != null) {      sFeature1Init(yInt.intValue(),cpInt.intValue());    }  }  this.idx=idx;  this.val=val;  this.wgt=wgt;}  }
class C{  public Boolean isD4On(){  return this.isDigitalOn(4);}  }
class C{  private void start() throws IOException, InterruptedException {  Connection c=new Connection(myHost.getHostName(),myHost.getPort());  try {    configureKnownHosts(c);    boolean useHttpProxy=Boolean.valueOf(System.getenv(GitSSHHandler.SSH_USE_PROXY_ENV));    if (useHttpProxy) {      String proxyHost=System.getenv(GitSSHHandler.SSH_PROXY_HOST_ENV);      Integer proxyPort=Integer.valueOf(System.getenv(GitSSHHandler.SSH_PROXY_PORT_ENV));      boolean proxyAuthentication=Boolean.valueOf(System.getenv(GitSSHHandler.SSH_PROXY_AUTHENTICATION_ENV));      String proxyUser=null;      String proxyPassword=null;      if (proxyAuthentication) {        proxyUser=System.getenv(GitSSHHandler.SSH_PROXY_USER_ENV);        proxyPassword=System.getenv(GitSSHHandler.SSH_PROXY_PASSWORD_ENV);      }      c.setProxyData(new HTTPProxyData(proxyHost,proxyPort,proxyUser,proxyPassword));    }    c.connect(new HostKeyVerifier());    authenticate(c);    final Session s=c.openSession();    try {      s.execCommand(myCommand);      forward("stdin",s.getStdin(),System.in,false);      forward("stdout",System.out,s.getStdout(),true);      forward("stderr",System.err,s.getStderr(),true);      myForwardCompleted.acquire(2);      s.waitForCondition(ChannelCondition.EXIT_STATUS,Long.MAX_VALUE);      Integer exitStatus=s.getExitStatus();      if (exitStatus == null) {        exitStatus=1;      }      System.exit(exitStatus.intValue() == 0 ? myExitCode : exitStatus.intValue());    }  finally {      s.close();    }  }  finally {    c.close();  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public NestedListsI32x3(NestedListsI32x3 other){  if (other.isSetIntegerlist()) {    List<List<List<Integer>>> __this__integerlist=new ArrayList<List<List<Integer>>>(other.integerlist.size());    for (    List<List<Integer>> other_element : other.integerlist) {      List<List<Integer>> __this__integerlist_copy=new ArrayList<List<Integer>>(other_element.size());      for (      List<Integer> other_element_element : other_element) {        List<Integer> __this__integerlist_copy_copy=new ArrayList<Integer>(other_element_element);        __this__integerlist_copy.add(__this__integerlist_copy_copy);      }      __this__integerlist.add(__this__integerlist_copy);    }    this.integerlist=__this__integerlist;  }}  }
class C{  public void removeByFollowerIdAndFollowingId(final String followerId,final String followingId) throws RepositoryException {  final JSONObject toRemove=getByFollowerIdAndFollowingId(followerId,followingId);  if (null == toRemove) {    return;  }  remove(toRemove.optString(Keys.OBJECT_ID));}  }
class C{  public static void writeExtendedMediumInt(ByteBuffer out,int value){  value=((value & 0xff000000) >> 24) | (value << 8);  out.putInt(value);}  }
class C{  public static String join(Collection col,char sep){  if (col.isEmpty()) {    return "";  }  StringBuffer buffer=new StringBuffer();  boolean first=true;  for (  Object o : col) {    if (first) {      first=false;    } else {      buffer.append(sep);    }    buffer.append(o.toString());  }  return buffer.toString();}  }
class C{  public synchronized void close(){  this.stack.close(true);}  }
class C{  public static String FTLStringLiteralEnc(String s){  return FTLStringLiteralEnc(s,(char)0,false);}  }
class C{  public ArResidualsWrapper(DataWrapper data,Parameters params){  DataModelList list=data.getDataModelList();  DataModelList convertedList=new DataModelList();  DataModelList dataSets=data.getDataModelList();  for (int i=0; i < list.size(); i++) {    DataModel selectedModel=dataSets.get(i);    if (!(selectedModel instanceof DataSet)) {      continue;    }    DataModel model=TimeSeriesUtils.ar2((DataSet)selectedModel,params.getInt("numTimeLags",1));    model.setKnowledge(selectedModel.getKnowledge());    convertedList.add(model);    setSourceGraph(data.getSourceGraph());  }  setDataModelList(convertedList);  LogDataUtils.logDataModelList("Result data from an AR residual calculation.",getDataModelList());}  }
class C{  protected final void addWorkers(int number) throws Exception {  for (int i=0; i < number; i++) {    WorkerThread worker=WorkerThread.newInstance();    addWorker(worker);  }}  }
class C{  public void close(){  ServerLocator oldServerLocator=null;  ClientSessionFactory oldCSF=null;  ClientSession oldDelegate=null;synchronized (ActiveMQXAResourceWrapper.lock) {    oldCSF=csf;    csf=null;    oldDelegate=delegate;    delegate=null;    oldServerLocator=serverLocator;    serverLocator=null;  }  if (oldDelegate != null) {    try {      oldDelegate.close();    } catch (    Throwable ignorable) {      ActiveMQXARecoveryLogger.LOGGER.debug(ignorable.getMessage(),ignorable);    }  }  if (oldCSF != null) {    try {      oldCSF.close();    } catch (    Throwable ignorable) {      ActiveMQXARecoveryLogger.LOGGER.debug(ignorable.getMessage(),ignorable);    }  }  if (oldServerLocator != null) {    try {      oldServerLocator.close();    } catch (    Throwable ignorable) {      ActiveMQXARecoveryLogger.LOGGER.debug(ignorable.getMessage(),ignorable);    }  }}  }
class C{  public static boolean isCaps(String text){  boolean hasCaps=false;  for (int index=0; index < text.length(); index++) {    char character=text.charAt(index);    if (Character.isLetter(character)) {      if (!Character.isUpperCase(character)) {        return false;      }      hasCaps=true;    }  }  return hasCaps;}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  private double executeIntDiv(double in1,double in2){  double ret=in1 / in2;  if (Double.isNaN(ret) || Double.isInfinite(ret))   return ret;  return UtilFunctions.toLong(ret);}  }
class C{  public static long updateProviderDb(ContentResolver cr,String providerName,String providerFullName,String signUpUrl,Map<String,String> config){  boolean versionChanged;  long providerId=Imps.Provider.getProviderIdForName(cr,providerName);  if (providerId > 0) {    String pluginVersion=config.get(ImConfigNames.PLUGIN_VERSION);    if (!isPluginVersionChanged(cr,providerId,pluginVersion)) {      return providerId;    }    updateProviderRow(cr,providerId,providerFullName,signUpUrl);    clearBrandingResourceMapCache(cr,providerId);    Log.d(TAG,"Plugin " + providerName + "("+ providerId+ ") has a version change. Database updated.");  } else {    providerId=insertProviderRow(cr,providerName,providerFullName,signUpUrl);    Log.d(TAG,"Plugin " + providerName + "("+ providerId+ ") is new. Provider added to IM db.");  }  saveProviderSettings(cr,providerId,config);  return providerId;}  }
class C{  private void addDriverAttributes(){  buffer.append("    class='com.evermind.sql.DriverManagerDataSource' \n ");  buffer.append("    connection-driver='" + ds.getDriverClass() + "'\n");}  }
class C{  public BlackVarianceTermStructure(final int settlementDays,final Calendar cal,final BusinessDayConvention bdc,final DayCounter dc){  super(settlementDays,cal,bdc,dc);}  }
class C{  public int compare(Object o1,Object o2){  if (!(o1 instanceof Room))   throw new ClassCastException("o1 must be of type Room");  if (!(o2 instanceof Room))   throw new ClassCastException("o2 must be of type Room");  Room r1=(Room)o1;  Room r2=(Room)o2;  String c1=r1.getRoomTypeLabel();  String c2=r2.getRoomTypeLabel();  if (c1.equals(c2)) {    Integer s1=r1.getCapacity();    Integer s2=r2.getCapacity();    if (s1 != null && s2 != null)     return (s1.compareTo(s2) * -1); else     return 0;  } else {    return c1.compareTo(c2);  }}  }
class C{  public Vector3f addLocal(float addX,float addY,float addZ){  x+=addX;  y+=addY;  z+=addZ;  return this;}  }
class C{  @Override protected void createButtonsForButtonBar(Composite parent){  createButton(parent,IDialogConstants.OK_ID,IDialogConstants.OK_LABEL,true);  createButton(parent,IDialogConstants.CANCEL_ID,IDialogConstants.CANCEL_LABEL,false);}  }
class C{  public void populateIpInterface(IpInterfaceParam param,IpInterface ipInterface){  ipInterface.setIpAddress(param.findIPaddress());  ipInterface.setProtocol(param.findProtocol());  ipInterface.setScopeId(param.getScopeId());  ipInterface.setPrefixLength(param.getPrefixLength());  if (param.getNetmask() != null) {    ipInterface.setNetmask(param.getNetmask().toString());  }  if (ipInterface.getLabel() == null && param.getName() == null) {    ipInterface.setLabel(ipInterface.getIpAddress());  } else   if (param.getName() != null) {    ipInterface.setLabel(param.getName());  }}  }
class C{  public synchronized void warnOnce(String s){  if (!oneTimeWarnings.contains(s)) {    oneTimeWarnings.add(s);    println("ONCE-ONLY WARNING:\n" + s,ALL_MESSAGE_LOGS,true);  }}  }
class C{  public void testBug1774() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug1774");    this.stmt.executeUpdate("CREATE TABLE testBug1774 (field1 VARCHAR(255))");    PreparedStatement pStmt=this.conn.prepareStatement("INSERT INTO testBug1774 VALUES (?)");    String testString="The word contains \" character";    pStmt.setString(1,testString);    pStmt.executeUpdate();    this.rs=this.stmt.executeQuery("SELECT * FROM testBug1774");    this.rs.next();    assertEquals(this.rs.getString(1),testString);  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug1774");  }}  }
class C{  public void warning2(final String filename,int ln,int col,Object msg,String source){  warning(filename,ln,col,msg.toString(),source);}  }
class C{  public boolean exists(String dir,String name) throws IOException {  for (  File f : listFiles(dir)) {    if (f.getName().equals(name)) {      return true;    }  }  return false;}  }
class C{  public String host(){  return this.host;}  }
class C{  public static String toElementContent(String val) throws CharConversionException {  if (val == null) {    throw new CharConversionException("null");  }  if (checkContentCharacters(val)) {    return val;  }  StringBuilder buf=new StringBuilder();  for (int i=0; i < val.length(); i++) {    char ch=val.charAt(i);    if ('<' == ch) {      buf.append("&lt;");      continue;    } else     if ('&' == ch) {      buf.append("&amp;");      continue;    } else     if (('>' == ch) && (i > 1) && (val.charAt(i - 2) == ']')&& (val.charAt(i - 1) == ']')) {      buf.append("&gt;");      continue;    }    buf.append(ch);  }  return buf.toString();}  }
class C{  @LogMessageDoc(level="WARN",message="Module {module} not found or loaded. " + "Not adding configuration option {key} = {value}",explanation="Ignoring a configuration parameter for a " + "module that is not loaded.") protected void parseConfigParameters(Properties prop){  if (prop == null)   return;  Enumeration<?> e=prop.propertyNames();  while (e.hasMoreElements()) {    String key=(String)e.nextElement();    String configValue=null;    int lastPeriod=key.lastIndexOf(".");    String moduleName=key.substring(0,lastPeriod);    String configKey=key.substring(lastPeriod + 1);    String systemKey=System.getProperty(key);    if (systemKey != null) {      configValue=systemKey;    } else {      configValue=prop.getProperty(key);    }    IFloodlightModule mod=moduleNameMap.get(moduleName);    if (mod == null) {      logger.debug("Module {} not found or loaded. " + "Not adding configuration option {} = {}",new Object[]{moduleName,configKey,configValue});    } else {      logger.debug("Adding configuration option {} = {} for module {}",new Object[]{configKey,configValue,moduleName});      floodlightModuleContext.addConfigParam(mod,configKey,configValue);    }  }}  }
class C{  @Override public int compareTo(Transfer o){  int c;  c=Integer.compare(this.alightStop,o.alightStop);  if (c == 0) {    return Integer.compare(this.boardStop,o.boardStop);  }  return c;}  }
class C{  public Split(double a,double b){  if (a < 0) {    throw new IllegalArgumentException("When asking for a range from a to b, the value of a must be >= 0: a = " + a + " b = "+ b);  }  if (b <= a) {    throw new IllegalArgumentException("When asking for a range from a to b, the value of b must be > a: a = " + a + " b = "+ b);  }  this.a=a;  this.b=b;}  }
class C{  public void removeAllAnim(){  mDownloadProgressButton.removeAllAnim();}  }
class C{  public int checkMobileProvisioning(int suggestedTimeOutMs){  int timeOutMs=-1;  try {    timeOutMs=mService.checkMobileProvisioning(suggestedTimeOutMs);  } catch (  RemoteException e) {  }  return timeOutMs;}  }
class C{  public final void addPropertyChangeListener(PropertyChangeListener l){  getPcs().addPropertyChangeListener(l);}  }
class C{  public void run(){  PythonInterpreter p=new PythonInterpreter();  for (  String name : this.locals.keySet()) {    p.set(name,this.locals.get(name));  }  URL jarUrl=JythonServer.class.getProtectionDomain().getCodeSource().getLocation();  String jarPath=jarUrl.getPath();  if (jarUrl.getProtocol().equals("file")) {    jarPath=jarPath + "../../src/main/python/";  }  p.exec("import sys");  p.exec("sys.path.append('" + jarPath + "')");  p.exec("from debugserver import run_server");  if (this.host == null) {    p.exec("run_server(port=" + this.port + ", locals=locals())");  } else {    p.exec("run_server(port=" + this.port + ", host='"+ this.host+ "', locals=locals())");  }}  }
class C{  public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearAnchor(){  anchor=null;  fieldSetFlags()[6]=false;  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public double doOperation() throws OperatorFailedException {  double newValue;  final Bounds<Double> meanBounds=mean.getBounds();  final Bounds<Double> precBounds=precision.getBounds();  final int dim=mean.getSize();  if (updateAllIndependently) {    for (int i=0; i < dim; i++) {      if (DEBUG) {        System.out.println("old precision value: " + precision.getValue(i));        System.out.println("old mean value: " + mean.getValue(i));        System.out.println("model mean check: " + model.getMean().getValue(i));        System.out.println("model precision check: " + model.getPrecision().getValue(i) + "\n");      }      newValue=gamma.nextGamma();      while (newValue == 0.0) {        newValue=gamma.nextGamma();      }      if (newValue < precBounds.getLowerLimit(i) || newValue > precBounds.getUpperLimit(i)) {        throw new OperatorFailedException("proposed value from gamma distribution outside boundaries");      }      precision.setValue(i,newValue);      if (DEBUG) {        System.out.println("new precision value: " + precision.getValue(i));        System.out.println("old mean value: " + mean.getValue(i));        System.out.println("model mean check: " + model.getMean().getValue(i));        System.out.println("model precision check: " + model.getPrecision().getValue(i) + "\n");      }      newValue=coltNormal.nextDouble(model.getMean().getValue(i),1.0 / Math.sqrt(model.getPrecision().getValue(i)));      if (newValue < meanBounds.getLowerLimit(i) || newValue > meanBounds.getUpperLimit(i)) {        throw new OperatorFailedException("proposed value from normal distribution outside boundaries");      }      mean.setValue(i,newValue);      if (DEBUG) {        System.out.println("new precision value: " + precision.getValue(i));        System.out.println("new mean value: " + mean.getValue(i));        System.out.println("model mean check: " + model.getMean().getValue(i));        System.out.println("model precision check: " + model.getPrecision().getValue(i) + "\n");      }    }  }  return 0;}  }
class C{  public byte loadByte(final long address){  return m_data[(int)(address - m_address)];}  }
class C{  public static LatLonPoint UTMtoLL(Ellipsoid ellip,double UTMNorthing,double UTMEasting,int zoneNumber,char zoneLetter,LatLonPoint llpoint){  if (zoneNumber < 0 || zoneNumber > 60) {    return null;  }  double k0=0.9996;  double a=ellip.radius;  double eccSquared=ellip.eccsq;  double eccPrimeSquared;  double e1=(1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));  double N1, T1, C1, R1, D, M;  double LongOrigin;  double mu, phi1Rad;  double x=UTMEasting - 500000.0d;  double y=UTMNorthing;  if (zoneLetter == 'S') {    y-=10000000.0d;  }  LongOrigin=(zoneNumber - 1) * 6 - 180 + 3;  eccPrimeSquared=(eccSquared) / (1 - eccSquared);  M=y / k0;  mu=M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared* eccSquared / 256));  phi1Rad=mu + (3 * e1 / 2 - 27 * e1 * e1* e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1* e1* e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1* e1 / 96) * Math.sin(6 * mu);  N1=a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));  T1=Math.tan(phi1Rad) * Math.tan(phi1Rad);  C1=eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);  R1=a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad),1.5);  D=x / (N1 * k0);  double lat=phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D* D* D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D* D* D* D* D / 720);  lat=ProjMath.radToDeg(lat);  double lon=(D - (1 + 2 * T1 + C1) * D * D* D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D* D* D* D / 120) / Math.cos(phi1Rad);  lon=LongOrigin + ProjMath.radToDeg(lon);  if (llpoint != null) {    llpoint.setLatLon(lat,lon);    return llpoint;  } else {    return new LatLonPoint.Double(lat,lon);  }}  }
class C{  public SQLRecoverableException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  @Inject public WebExtension(HtmlEditorProvider htmlEditorProvider,JsEditorProvider jsEditorProvider,EditorRegistry editorRegistry,WebExtensionResource resources,IconRegistry iconRegistry,@Named("JSFileType") FileType jsFile,@Named("HTMLFileType") FileType htmlFile,@Named("ES6FileType") FileType es6File,@Named("JSXFileType") FileType jsxFile,@Named("TypeScript") FileType typeScriptFile){  iconRegistry.registerIcon(new Icon("JavaScript.samples.category.icon",resources.samplesCategoryJs()));  editorRegistry.registerDefaultEditor(jsFile,jsEditorProvider);  editorRegistry.registerDefaultEditor(es6File,jsEditorProvider);  editorRegistry.registerDefaultEditor(jsxFile,jsEditorProvider);  editorRegistry.registerDefaultEditor(typeScriptFile,jsEditorProvider);  editorRegistry.registerDefaultEditor(htmlFile,htmlEditorProvider);}  }
class C{  public option addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override public void addPropertyChangeListener(String propertyName,PropertyChangeListener listener){  propertyChangeSupport.addPropertyChangeListener(propertyName,listener);}  }
class C{  public void endVisit(QualifiedType node){}  }
class C{  private View fillFromLeft(int nextLeft){  mFirstPosition=Math.min(mFirstPosition,mSelectedPosition);  mFirstPosition=Math.min(mFirstPosition,mItemCount - 1);  if (mFirstPosition < 0) {    mFirstPosition=0;  }  return fillRight(mFirstPosition,nextLeft);}  }
class C{  protected Member[][] array(Member[][] arrayMember){  boolean resetIndexSaved=_resetIndex;  if (_resetIndex) {    _bitIndex=0;    _resetIndex=false;  }  for (int i=0; i < arrayMember.length; i++) {    array(arrayMember[i]);  }  _resetIndex=resetIndexSaved;  return (Member[][])arrayMember;}  }
class C{  public HTMLSchema(){  setURI("http://www.w3.org/1999/xhtml");  setPrefix("html");  elementType("<pcdata>",M_EMPTY,M_PCDATA,0);  elementType("<root>",M_ROOT,M_EMPTY,0);  elementType("a",M_PCDATA | M_NOLINK,M_INLINE,0);  elementType("abbr",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("acronym",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("address",M_PCDATA | M_INLINE | M_P,M_BLOCK,0);  elementType("applet",M_PCDATA | M_PARAM | M_INLINE| M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("area",M_EMPTY,M_AREA,0);  elementType("b",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("base",M_EMPTY,M_HEAD,0);  elementType("basefont",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("bdo",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("bgsound",M_EMPTY,M_HEAD,0);  elementType("big",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("blink",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("blockquote",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("body",M_PCDATA | M_INLINE | M_BLOCK,M_HTML | M_BODY,0);  elementType("br",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("button",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("canvas",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("caption",M_PCDATA | M_INLINE,M_TABULAR,0);  elementType("center",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("cite",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("code",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("col",M_EMPTY,M_COL | M_TABULAR,0);  elementType("colgroup",M_COL,M_TABULAR,0);  elementType("comment",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("dd",M_PCDATA | M_INLINE | M_BLOCK,M_DEF,0);  elementType("del",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_BLOCKINLINE | M_BLOCK,F_RESTART);  elementType("dfn",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("dir",M_LI,M_BLOCK,0);  elementType("div",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("dl",M_DEF,M_BLOCK,0);  elementType("dt",M_PCDATA | M_INLINE,M_DEF,0);  elementType("em",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("fieldset",M_PCDATA | M_LEGEND | M_INLINE| M_BLOCK,M_BLOCK,0);  elementType("font",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("form",M_PCDATA | M_INLINE | M_NOLINK| M_BLOCK| M_TR| M_CELL,M_BLOCK | M_FORM,F_NOFORCE);  elementType("frame",M_EMPTY,M_FRAME,0);  elementType("frameset",M_FRAME,M_FRAME | M_HTML,0);  elementType("h1",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h2",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h3",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h4",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h5",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h6",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("head",M_HEAD,M_HTML,0);  elementType("hr",M_EMPTY,M_BLOCK,0);  elementType("html",M_HTML,M_ROOT,0);  elementType("i",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("iframe",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("img",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("input",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("ins",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_BLOCK,F_RESTART);  elementType("isindex",M_EMPTY,M_HEAD,0);  elementType("kbd",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("label",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("legend",M_PCDATA | M_INLINE,M_LEGEND,0);  elementType("li",M_PCDATA | M_INLINE | M_BLOCK,M_LI,0);  elementType("link",M_EMPTY,M_HEAD | M_INLINE,0);  elementType("listing",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("map",M_BLOCK | M_AREA,M_INLINE,0);  elementType("marquee",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("menu",M_LI,M_BLOCK,0);  elementType("meta",M_EMPTY,M_HEAD,0);  elementType("nobr",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("noframes",M_BODY | M_BLOCK | M_INLINE,M_BLOCK | M_HTML | M_FRAME,0);  elementType("noscript",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("object",M_PCDATA | M_PARAM | M_INLINE| M_BLOCK,M_HEAD | M_INLINE | M_NOLINK,0);  elementType("ol",M_LI,M_BLOCK,0);  elementType("optgroup",M_OPTIONS,M_OPTIONS,0);  elementType("option",M_PCDATA,M_OPTION | M_OPTIONS,0);  elementType("p",M_PCDATA | M_INLINE | M_TABLE,M_BLOCK | M_P,0);  elementType("param",M_EMPTY,M_PARAM,0);  elementType("pre",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("q",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rb",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rbc",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rp",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rt",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rtc",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("ruby",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("s",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("samp",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("script",M_PCDATA,M_ANY & ~M_ROOT,F_CDATA);  elementType("select",M_OPTIONS,M_INLINE,0);  elementType("small",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("span",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("strike",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("strong",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("style",M_PCDATA,M_HEAD | M_INLINE,F_CDATA);  elementType("sub",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("sup",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("table",M_FORM | M_TABULAR,M_BLOCK | M_TABLE,F_NOFORCE);  elementType("tbody",M_TR,M_TABULAR,0);  elementType("td",M_PCDATA | M_INLINE | M_BLOCK,M_CELL,0);  elementType("textarea",M_PCDATA,M_INLINE,0);  elementType("tfoot",M_TR | M_FORM | M_CELL,M_TABULAR,0);  elementType("th",M_PCDATA | M_INLINE | M_BLOCK,M_CELL,0);  elementType("thead",M_TR | M_FORM | M_CELL,M_TABULAR,0);  elementType("title",M_PCDATA,M_HEAD,0);  elementType("tr",M_FORM | M_CELL,M_TR | M_TABULAR,0);  elementType("tt",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("u",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("ul",M_LI,M_BLOCK,0);  elementType("var",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("wbr",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("xmp",M_PCDATA | M_INLINE,M_BLOCK,0);  parent("<pcdata>","body");  parent("html","<root>");  parent("a","body");  parent("abbr","body");  parent("acronym","body");  parent("address","body");  parent("applet","body");  parent("area","map");  parent("b","body");  parent("base","head");  parent("basefont","body");  parent("bdo","body");  parent("bgsound","head");  parent("big","body");  parent("blink","body");  parent("blockquote","body");  parent("body","html");  parent("br","body");  parent("button","form");  parent("canvas","body");  parent("caption","table");  parent("center","body");  parent("cite","body");  parent("code","body");  parent("col","table");  parent("colgroup","table");  parent("comment","body");  parent("dd","dl");  parent("del","body");  parent("dfn","body");  parent("dir","body");  parent("div","body");  parent("dl","body");  parent("dt","dl");  parent("em","body");  parent("fieldset","form");  parent("font","body");  parent("form","body");  parent("frame","frameset");  parent("frameset","html");  parent("h1","body");  parent("h2","body");  parent("h3","body");  parent("h4","body");  parent("h5","body");  parent("h6","body");  parent("head","html");  parent("hr","body");  parent("i","body");  parent("iframe","body");  parent("img","body");  parent("input","form");  parent("ins","body");  parent("isindex","head");  parent("kbd","body");  parent("label","form");  parent("legend","fieldset");  parent("li","ul");  parent("link","head");  parent("listing","body");  parent("map","body");  parent("marquee","body");  parent("menu","body");  parent("meta","head");  parent("nobr","body");  parent("noframes","html");  parent("noscript","body");  parent("object","body");  parent("ol","body");  parent("optgroup","select");  parent("option","select");  parent("p","body");  parent("param","object");  parent("pre","body");  parent("q","body");  parent("rb","body");  parent("rbc","body");  parent("rp","body");  parent("rt","body");  parent("rtc","body");  parent("ruby","body");  parent("s","body");  parent("samp","body");  parent("script","html");  parent("select","form");  parent("small","body");  parent("span","body");  parent("strike","body");  parent("strong","body");  parent("style","head");  parent("sub","body");  parent("sup","body");  parent("table","body");  parent("tbody","table");  parent("td","tr");  parent("textarea","form");  parent("tfoot","table");  parent("th","tr");  parent("thead","table");  parent("title","head");  parent("tr","tbody");  parent("tt","body");  parent("u","body");  parent("ul","body");  parent("var","body");  parent("wbr","body");  parent("xmp","body");  attribute("a","hreflang","NMTOKEN",null);  attribute("a","shape","CDATA","rect");  attribute("a","tabindex","NMTOKEN",null);  attribute("applet","align","NMTOKEN",null);  attribute("area","nohref","BOOLEAN",null);  attribute("area","shape","CDATA","rect");  attribute("area","tabindex","NMTOKEN",null);  attribute("br","clear","CDATA","none");  attribute("button","disabled","BOOLEAN",null);  attribute("button","tabindex","NMTOKEN",null);  attribute("button","type","CDATA","submit");  attribute("caption","align","NMTOKEN",null);  attribute("col","align","NMTOKEN",null);  attribute("col","span","CDATA","1");  attribute("col","valign","NMTOKEN",null);  attribute("colgroup","align","NMTOKEN",null);  attribute("colgroup","span","CDATA","1");  attribute("colgroup","valign","NMTOKEN",null);  attribute("dir","compact","BOOLEAN",null);  attribute("div","align","NMTOKEN",null);  attribute("dl","compact","BOOLEAN",null);  attribute("form","enctype","CDATA","application/x-www-form-urlencoded");  attribute("form","method","CDATA","get");  attribute("frame","frameborder","CDATA","1");  attribute("frame","noresize","BOOLEAN",null);  attribute("frame","scrolling","CDATA","auto");  attribute("h1","align","NMTOKEN",null);  attribute("h2","align","NMTOKEN",null);  attribute("h3","align","NMTOKEN",null);  attribute("h4","align","NMTOKEN",null);  attribute("h5","align","NMTOKEN",null);  attribute("h6","align","NMTOKEN",null);  attribute("hr","align","NMTOKEN",null);  attribute("hr","noshade","BOOLEAN",null);  attribute("iframe","align","NMTOKEN",null);  attribute("iframe","frameborder","CDATA","1");  attribute("iframe","scrolling","CDATA","auto");  attribute("img","align","NMTOKEN",null);  attribute("img","ismap","BOOLEAN",null);  attribute("input","align","NMTOKEN",null);  attribute("input","checked","BOOLEAN",null);  attribute("input","disabled","BOOLEAN",null);  attribute("input","ismap","BOOLEAN",null);  attribute("input","maxlength","NMTOKEN",null);  attribute("input","readonly","BOOLEAN",null);  attribute("input","tabindex","NMTOKEN",null);  attribute("input","type","CDATA","text");  attribute("label","for","IDREF",null);  attribute("legend","align","NMTOKEN",null);  attribute("li","value","NMTOKEN",null);  attribute("link","hreflang","NMTOKEN",null);  attribute("marquee","width","NMTOKEN",null);  attribute("menu","compact","BOOLEAN",null);  attribute("meta","http-equiv","NMTOKEN",null);  attribute("meta","name","NMTOKEN",null);  attribute("object","align","NMTOKEN",null);  attribute("object","declare","BOOLEAN",null);  attribute("object","tabindex","NMTOKEN",null);  attribute("ol","compact","BOOLEAN",null);  attribute("ol","start","NMTOKEN",null);  attribute("optgroup","disabled","BOOLEAN",null);  attribute("option","disabled","BOOLEAN",null);  attribute("option","selected","BOOLEAN",null);  attribute("p","align","NMTOKEN",null);  attribute("param","valuetype","CDATA","data");  attribute("pre","width","NMTOKEN",null);  attribute("rt","rbspan","CDATA","1");  attribute("script","defer","BOOLEAN",null);  attribute("select","disabled","BOOLEAN",null);  attribute("select","multiple","BOOLEAN",null);  attribute("select","size","NMTOKEN",null);  attribute("select","tabindex","NMTOKEN",null);  attribute("table","align","NMTOKEN",null);  attribute("table","frame","NMTOKEN",null);  attribute("table","rules","NMTOKEN",null);  attribute("tbody","align","NMTOKEN",null);  attribute("tbody","valign","NMTOKEN",null);  attribute("td","align","NMTOKEN",null);  attribute("td","colspan","CDATA","1");  attribute("td","headers","IDREFS",null);  attribute("td","nowrap","BOOLEAN",null);  attribute("td","rowspan","CDATA","1");  attribute("td","scope","NMTOKEN",null);  attribute("td","valign","NMTOKEN",null);  attribute("textarea","cols","NMTOKEN",null);  attribute("textarea","disabled","BOOLEAN",null);  attribute("textarea","readonly","BOOLEAN",null);  attribute("textarea","rows","NMTOKEN",null);  attribute("textarea","tabindex","NMTOKEN",null);  attribute("tfoot","align","NMTOKEN",null);  attribute("tfoot","valign","NMTOKEN",null);  attribute("th","align","NMTOKEN",null);  attribute("th","colspan","CDATA","1");  attribute("th","headers","IDREFS",null);  attribute("th","nowrap","BOOLEAN",null);  attribute("th","rowspan","CDATA","1");  attribute("th","scope","NMTOKEN",null);  attribute("th","valign","NMTOKEN",null);  attribute("thead","align","NMTOKEN",null);  attribute("thead","valign","NMTOKEN",null);  attribute("tr","align","NMTOKEN",null);  attribute("tr","valign","NMTOKEN",null);  attribute("ul","compact","BOOLEAN",null);  attribute("ul","type","NMTOKEN",null);  attribute("xmp","width","NMTOKEN",null);  attribute("a","class","NMTOKEN",null);  attribute("abbr","class","NMTOKEN",null);  attribute("acronym","class","NMTOKEN",null);  attribute("address","class","NMTOKEN",null);  attribute("applet","class","NMTOKEN",null);  attribute("area","class","NMTOKEN",null);  attribute("b","class","NMTOKEN",null);  attribute("base","class","NMTOKEN",null);  attribute("basefont","class","NMTOKEN",null);  attribute("bdo","class","NMTOKEN",null);  attribute("bgsound","class","NMTOKEN",null);  attribute("big","class","NMTOKEN",null);  attribute("blink","class","NMTOKEN",null);  attribute("blockquote","class","NMTOKEN",null);  attribute("body","class","NMTOKEN",null);  attribute("br","class","NMTOKEN",null);  attribute("button","class","NMTOKEN",null);  attribute("canvas","class","NMTOKEN",null);  attribute("caption","class","NMTOKEN",null);  attribute("center","class","NMTOKEN",null);  attribute("cite","class","NMTOKEN",null);  attribute("code","class","NMTOKEN",null);  attribute("col","class","NMTOKEN",null);  attribute("colgroup","class","NMTOKEN",null);  attribute("comment","class","NMTOKEN",null);  attribute("dd","class","NMTOKEN",null);  attribute("del","class","NMTOKEN",null);  attribute("dfn","class","NMTOKEN",null);  attribute("dir","class","NMTOKEN",null);  attribute("div","class","NMTOKEN",null);  attribute("dl","class","NMTOKEN",null);  attribute("dt","class","NMTOKEN",null);  attribute("em","class","NMTOKEN",null);  attribute("fieldset","class","NMTOKEN",null);  attribute("font","class","NMTOKEN",null);  attribute("form","class","NMTOKEN",null);  attribute("frame","class","NMTOKEN",null);  attribute("frameset","class","NMTOKEN",null);  attribute("h1","class","NMTOKEN",null);  attribute("h2","class","NMTOKEN",null);  attribute("h3","class","NMTOKEN",null);  attribute("h4","class","NMTOKEN",null);  attribute("h5","class","NMTOKEN",null);  attribute("h6","class","NMTOKEN",null);  attribute("head","class","NMTOKEN",null);  attribute("hr","class","NMTOKEN",null);  attribute("html","class","NMTOKEN",null);  attribute("i","class","NMTOKEN",null);  attribute("iframe","class","NMTOKEN",null);  attribute("img","class","NMTOKEN",null);  attribute("input","class","NMTOKEN",null);  attribute("ins","class","NMTOKEN",null);  attribute("isindex","class","NMTOKEN",null);  attribute("kbd","class","NMTOKEN",null);  attribute("label","class","NMTOKEN",null);  attribute("legend","class","NMTOKEN",null);  attribute("li","class","NMTOKEN",null);  attribute("link","class","NMTOKEN",null);  attribute("listing","class","NMTOKEN",null);  attribute("map","class","NMTOKEN",null);  attribute("marquee","class","NMTOKEN",null);  attribute("menu","class","NMTOKEN",null);  attribute("meta","class","NMTOKEN",null);  attribute("nobr","class","NMTOKEN",null);  attribute("noframes","class","NMTOKEN",null);  attribute("noscript","class","NMTOKEN",null);  attribute("object","class","NMTOKEN",null);  attribute("ol","class","NMTOKEN",null);  attribute("optgroup","class","NMTOKEN",null);  attribute("option","class","NMTOKEN",null);  attribute("p","class","NMTOKEN",null);  attribute("param","class","NMTOKEN",null);  attribute("pre","class","NMTOKEN",null);  attribute("q","class","NMTOKEN",null);  attribute("rb","class","NMTOKEN",null);  attribute("rbc","class","NMTOKEN",null);  attribute("rp","class","NMTOKEN",null);  attribute("rt","class","NMTOKEN",null);  attribute("rtc","class","NMTOKEN",null);  attribute("ruby","class","NMTOKEN",null);  attribute("s","class","NMTOKEN",null);  attribute("samp","class","NMTOKEN",null);  attribute("script","class","NMTOKEN",null);  attribute("select","class","NMTOKEN",null);  attribute("small","class","NMTOKEN",null);  attribute("span","class","NMTOKEN",null);  attribute("strike","class","NMTOKEN",null);  attribute("strong","class","NMTOKEN",null);  attribute("style","class","NMTOKEN",null);  attribute("sub","class","NMTOKEN",null);  attribute("sup","class","NMTOKEN",null);  attribute("table","class","NMTOKEN",null);  attribute("tbody","class","NMTOKEN",null);  attribute("td","class","NMTOKEN",null);  attribute("textarea","class","NMTOKEN",null);  attribute("tfoot","class","NMTOKEN",null);  attribute("th","class","NMTOKEN",null);  attribute("thead","class","NMTOKEN",null);  attribute("title","class","NMTOKEN",null);  attribute("tr","class","NMTOKEN",null);  attribute("tt","class","NMTOKEN",null);  attribute("u","class","NMTOKEN",null);  attribute("ul","class","NMTOKEN",null);  attribute("var","class","NMTOKEN",null);  attribute("wbr","class","NMTOKEN",null);  attribute("xmp","class","NMTOKEN",null);  attribute("a","dir","NMTOKEN",null);  attribute("abbr","dir","NMTOKEN",null);  attribute("acronym","dir","NMTOKEN",null);  attribute("address","dir","NMTOKEN",null);  attribute("applet","dir","NMTOKEN",null);  attribute("area","dir","NMTOKEN",null);  attribute("b","dir","NMTOKEN",null);  attribute("base","dir","NMTOKEN",null);  attribute("basefont","dir","NMTOKEN",null);  attribute("bdo","dir","NMTOKEN",null);  attribute("bgsound","dir","NMTOKEN",null);  attribute("big","dir","NMTOKEN",null);  attribute("blink","dir","NMTOKEN",null);  attribute("blockquote","dir","NMTOKEN",null);  attribute("body","dir","NMTOKEN",null);  attribute("br","dir","NMTOKEN",null);  attribute("button","dir","NMTOKEN",null);  attribute("canvas","dir","NMTOKEN",null);  attribute("caption","dir","NMTOKEN",null);  attribute("center","dir","NMTOKEN",null);  attribute("cite","dir","NMTOKEN",null);  attribute("code","dir","NMTOKEN",null);  attribute("col","dir","NMTOKEN",null);  attribute("colgroup","dir","NMTOKEN",null);  attribute("comment","dir","NMTOKEN",null);  attribute("dd","dir","NMTOKEN",null);  attribute("del","dir","NMTOKEN",null);  attribute("dfn","dir","NMTOKEN",null);  attribute("dir","dir","NMTOKEN",null);  attribute("div","dir","NMTOKEN",null);  attribute("dl","dir","NMTOKEN",null);  attribute("dt","dir","NMTOKEN",null);  attribute("em","dir","NMTOKEN",null);  attribute("fieldset","dir","NMTOKEN",null);  attribute("font","dir","NMTOKEN",null);  attribute("form","dir","NMTOKEN",null);  attribute("frame","dir","NMTOKEN",null);  attribute("frameset","dir","NMTOKEN",null);  attribute("h1","dir","NMTOKEN",null);  attribute("h2","dir","NMTOKEN",null);  attribute("h3","dir","NMTOKEN",null);  attribute("h4","dir","NMTOKEN",null);  attribute("h5","dir","NMTOKEN",null);  attribute("h6","dir","NMTOKEN",null);  attribute("head","dir","NMTOKEN",null);  attribute("hr","dir","NMTOKEN",null);  attribute("html","dir","NMTOKEN",null);  attribute("i","dir","NMTOKEN",null);  attribute("iframe","dir","NMTOKEN",null);  attribute("img","dir","NMTOKEN",null);  attribute("input","dir","NMTOKEN",null);  attribute("ins","dir","NMTOKEN",null);  attribute("isindex","dir","NMTOKEN",null);  attribute("kbd","dir","NMTOKEN",null);  attribute("label","dir","NMTOKEN",null);  attribute("legend","dir","NMTOKEN",null);  attribute("li","dir","NMTOKEN",null);  attribute("link","dir","NMTOKEN",null);  attribute("listing","dir","NMTOKEN",null);  attribute("map","dir","NMTOKEN",null);  attribute("marquee","dir","NMTOKEN",null);  attribute("menu","dir","NMTOKEN",null);  attribute("meta","dir","NMTOKEN",null);  attribute("nobr","dir","NMTOKEN",null);  attribute("noframes","dir","NMTOKEN",null);  attribute("noscript","dir","NMTOKEN",null);  attribute("object","dir","NMTOKEN",null);  attribute("ol","dir","NMTOKEN",null);  attribute("optgroup","dir","NMTOKEN",null);  attribute("option","dir","NMTOKEN",null);  attribute("p","dir","NMTOKEN",null);  attribute("param","dir","NMTOKEN",null);  attribute("pre","dir","NMTOKEN",null);  attribute("q","dir","NMTOKEN",null);  attribute("rb","dir","NMTOKEN",null);  attribute("rbc","dir","NMTOKEN",null);  attribute("rp","dir","NMTOKEN",null);  attribute("rt","dir","NMTOKEN",null);  attribute("rtc","dir","NMTOKEN",null);  attribute("ruby","dir","NMTOKEN",null);  attribute("s","dir","NMTOKEN",null);  attribute("samp","dir","NMTOKEN",null);  attribute("script","dir","NMTOKEN",null);  attribute("select","dir","NMTOKEN",null);  attribute("small","dir","NMTOKEN",null);  attribute("span","dir","NMTOKEN",null);  attribute("strike","dir","NMTOKEN",null);  attribute("strong","dir","NMTOKEN",null);  attribute("style","dir","NMTOKEN",null);  attribute("sub","dir","NMTOKEN",null);  attribute("sup","dir","NMTOKEN",null);  attribute("table","dir","NMTOKEN",null);  attribute("tbody","dir","NMTOKEN",null);  attribute("td","dir","NMTOKEN",null);  attribute("textarea","dir","NMTOKEN",null);  attribute("tfoot","dir","NMTOKEN",null);  attribute("th","dir","NMTOKEN",null);  attribute("thead","dir","NMTOKEN",null);  attribute("title","dir","NMTOKEN",null);  attribute("tr","dir","NMTOKEN",null);  attribute("tt","dir","NMTOKEN",null);  attribute("u","dir","NMTOKEN",null);  attribute("ul","dir","NMTOKEN",null);  attribute("var","dir","NMTOKEN",null);  attribute("wbr","dir","NMTOKEN",null);  attribute("xmp","dir","NMTOKEN",null);  attribute("a","id","ID",null);  attribute("abbr","id","ID",null);  attribute("acronym","id","ID",null);  attribute("address","id","ID",null);  attribute("applet","id","ID",null);  attribute("area","id","ID",null);  attribute("b","id","ID",null);  attribute("base","id","ID",null);  attribute("basefont","id","ID",null);  attribute("bdo","id","ID",null);  attribute("bgsound","id","ID",null);  attribute("big","id","ID",null);  attribute("blink","id","ID",null);  attribute("blockquote","id","ID",null);  attribute("body","id","ID",null);  attribute("br","id","ID",null);  attribute("button","id","ID",null);  attribute("canvas","id","ID",null);  attribute("caption","id","ID",null);  attribute("center","id","ID",null);  attribute("cite","id","ID",null);  attribute("code","id","ID",null);  attribute("col","id","ID",null);  attribute("colgroup","id","ID",null);  attribute("comment","id","ID",null);  attribute("dd","id","ID",null);  attribute("del","id","ID",null);  attribute("dfn","id","ID",null);  attribute("dir","id","ID",null);  attribute("div","id","ID",null);  attribute("dl","id","ID",null);  attribute("dt","id","ID",null);  attribute("em","id","ID",null);  attribute("fieldset","id","ID",null);  attribute("font","id","ID",null);  attribute("form","id","ID",null);  attribute("frame","id","ID",null);  attribute("frameset","id","ID",null);  attribute("h1","id","ID",null);  attribute("h2","id","ID",null);  attribute("h3","id","ID",null);  attribute("h4","id","ID",null);  attribute("h5","id","ID",null);  attribute("h6","id","ID",null);  attribute("head","id","ID",null);  attribute("hr","id","ID",null);  attribute("html","id","ID",null);  attribute("i","id","ID",null);  attribute("iframe","id","ID",null);  attribute("img","id","ID",null);  attribute("input","id","ID",null);  attribute("ins","id","ID",null);  attribute("isindex","id","ID",null);  attribute("kbd","id","ID",null);  attribute("label","id","ID",null);  attribute("legend","id","ID",null);  attribute("li","id","ID",null);  attribute("link","id","ID",null);  attribute("listing","id","ID",null);  attribute("map","id","ID",null);  attribute("marquee","id","ID",null);  attribute("menu","id","ID",null);  attribute("meta","id","ID",null);  attribute("nobr","id","ID",null);  attribute("noframes","id","ID",null);  attribute("noscript","id","ID",null);  attribute("object","id","ID",null);  attribute("ol","id","ID",null);  attribute("optgroup","id","ID",null);  attribute("option","id","ID",null);  attribute("p","id","ID",null);  attribute("param","id","ID",null);  attribute("pre","id","ID",null);  attribute("q","id","ID",null);  attribute("rb","id","ID",null);  attribute("rbc","id","ID",null);  attribute("rp","id","ID",null);  attribute("rt","id","ID",null);  attribute("rtc","id","ID",null);  attribute("ruby","id","ID",null);  attribute("s","id","ID",null);  attribute("samp","id","ID",null);  attribute("script","id","ID",null);  attribute("select","id","ID",null);  attribute("small","id","ID",null);  attribute("span","id","ID",null);  attribute("strike","id","ID",null);  attribute("strong","id","ID",null);  attribute("style","id","ID",null);  attribute("sub","id","ID",null);  attribute("sup","id","ID",null);  attribute("table","id","ID",null);  attribute("tbody","id","ID",null);  attribute("td","id","ID",null);  attribute("textarea","id","ID",null);  attribute("tfoot","id","ID",null);  attribute("th","id","ID",null);  attribute("thead","id","ID",null);  attribute("title","id","ID",null);  attribute("tr","id","ID",null);  attribute("tt","id","ID",null);  attribute("u","id","ID",null);  attribute("ul","id","ID",null);  attribute("var","id","ID",null);  attribute("wbr","id","ID",null);  attribute("xmp","id","ID",null);  attribute("a","lang","NMTOKEN",null);  attribute("abbr","lang","NMTOKEN",null);  attribute("acronym","lang","NMTOKEN",null);  attribute("address","lang","NMTOKEN",null);  attribute("applet","lang","NMTOKEN",null);  attribute("area","lang","NMTOKEN",null);  attribute("b","lang","NMTOKEN",null);  attribute("base","lang","NMTOKEN",null);  attribute("basefont","lang","NMTOKEN",null);  attribute("bdo","lang","NMTOKEN",null);  attribute("bgsound","lang","NMTOKEN",null);  attribute("big","lang","NMTOKEN",null);  attribute("blink","lang","NMTOKEN",null);  attribute("blockquote","lang","NMTOKEN",null);  attribute("body","lang","NMTOKEN",null);  attribute("br","lang","NMTOKEN",null);  attribute("button","lang","NMTOKEN",null);  attribute("canvas","lang","NMTOKEN",null);  attribute("caption","lang","NMTOKEN",null);  attribute("center","lang","NMTOKEN",null);  attribute("cite","lang","NMTOKEN",null);  attribute("code","lang","NMTOKEN",null);  attribute("col","lang","NMTOKEN",null);  attribute("colgroup","lang","NMTOKEN",null);  attribute("comment","lang","NMTOKEN",null);  attribute("dd","lang","NMTOKEN",null);  attribute("del","lang","NMTOKEN",null);  attribute("dfn","lang","NMTOKEN",null);  attribute("dir","lang","NMTOKEN",null);  attribute("div","lang","NMTOKEN",null);  attribute("dl","lang","NMTOKEN",null);  attribute("dt","lang","NMTOKEN",null);  attribute("em","lang","NMTOKEN",null);  attribute("fieldset","lang","NMTOKEN",null);  attribute("font","lang","NMTOKEN",null);  attribute("form","lang","NMTOKEN",null);  attribute("frame","lang","NMTOKEN",null);  attribute("frameset","lang","NMTOKEN",null);  attribute("h1","lang","NMTOKEN",null);  attribute("h2","lang","NMTOKEN",null);  attribute("h3","lang","NMTOKEN",null);  attribute("h4","lang","NMTOKEN",null);  attribute("h5","lang","NMTOKEN",null);  attribute("h6","lang","NMTOKEN",null);  attribute("head","lang","NMTOKEN",null);  attribute("hr","lang","NMTOKEN",null);  attribute("html","lang","NMTOKEN",null);  attribute("i","lang","NMTOKEN",null);  attribute("iframe","lang","NMTOKEN",null);  attribute("img","lang","NMTOKEN",null);  attribute("input","lang","NMTOKEN",null);  attribute("ins","lang","NMTOKEN",null);  attribute("isindex","lang","NMTOKEN",null);  attribute("kbd","lang","NMTOKEN",null);  attribute("label","lang","NMTOKEN",null);  attribute("legend","lang","NMTOKEN",null);  attribute("li","lang","NMTOKEN",null);  attribute("link","lang","NMTOKEN",null);  attribute("listing","lang","NMTOKEN",null);  attribute("map","lang","NMTOKEN",null);  attribute("marquee","lang","NMTOKEN",null);  attribute("menu","lang","NMTOKEN",null);  attribute("meta","lang","NMTOKEN",null);  attribute("nobr","lang","NMTOKEN",null);  attribute("noframes","lang","NMTOKEN",null);  attribute("noscript","lang","NMTOKEN",null);  attribute("object","lang","NMTOKEN",null);  attribute("ol","lang","NMTOKEN",null);  attribute("optgroup","lang","NMTOKEN",null);  attribute("option","lang","NMTOKEN",null);  attribute("p","lang","NMTOKEN",null);  attribute("param","lang","NMTOKEN",null);  attribute("pre","lang","NMTOKEN",null);  attribute("q","lang","NMTOKEN",null);  attribute("rb","lang","NMTOKEN",null);  attribute("rbc","lang","NMTOKEN",null);  attribute("rp","lang","NMTOKEN",null);  attribute("rt","lang","NMTOKEN",null);  attribute("rtc","lang","NMTOKEN",null);  attribute("ruby","lang","NMTOKEN",null);  attribute("s","lang","NMTOKEN",null);  attribute("samp","lang","NMTOKEN",null);  attribute("script","lang","NMTOKEN",null);  attribute("select","lang","NMTOKEN",null);  attribute("small","lang","NMTOKEN",null);  attribute("span","lang","NMTOKEN",null);  attribute("strike","lang","NMTOKEN",null);  attribute("strong","lang","NMTOKEN",null);  attribute("style","lang","NMTOKEN",null);  attribute("sub","lang","NMTOKEN",null);  attribute("sup","lang","NMTOKEN",null);  attribute("table","lang","NMTOKEN",null);  attribute("tbody","lang","NMTOKEN",null);  attribute("td","lang","NMTOKEN",null);  attribute("textarea","lang","NMTOKEN",null);  attribute("tfoot","lang","NMTOKEN",null);  attribute("th","lang","NMTOKEN",null);  attribute("thead","lang","NMTOKEN",null);  attribute("title","lang","NMTOKEN",null);  attribute("tr","lang","NMTOKEN",null);  attribute("tt","lang","NMTOKEN",null);  attribute("u","lang","NMTOKEN",null);  attribute("ul","lang","NMTOKEN",null);  attribute("var","lang","NMTOKEN",null);  attribute("wbr","lang","NMTOKEN",null);  attribute("xmp","lang","NMTOKEN",null);  entity("aacgr",0x03AC);  entity("Aacgr",0x0386);  entity("aacute",0x00E1);  entity("Aacute",0x00C1);  entity("abreve",0x0103);  entity("Abreve",0x0102);  entity("ac",0x223E);  entity("acd",0x223F);  entity("acirc",0x00E2);  entity("Acirc",0x00C2);  entity("acute",0x00B4);  entity("acy",0x0430);  entity("Acy",0x0410);  entity("aelig",0x00E6);  entity("AElig",0x00C6);  entity("af",0x2061);  entity("afr",0x1D51E);  entity("Afr",0x1D504);  entity("agr",0x03B1);  entity("Agr",0x0391);  entity("agrave",0x00E0);  entity("Agrave",0x00C0);  entity("alefsym",0x2135);  entity("aleph",0x2135);  entity("alpha",0x03B1);  entity("Alpha",0x0391);  entity("amacr",0x0101);  entity("Amacr",0x0100);  entity("amalg",0x2A3F);  entity("amp",0x0026);  entity("and",0x2227);  entity("And",0x2A53);  entity("andand",0x2A55);  entity("andd",0x2A5C);  entity("andslope",0x2A58);  entity("andv",0x2A5A);  entity("ang",0x2220);  entity("ange",0x29A4);  entity("angle",0x2220);  entity("angmsd",0x2221);  entity("angmsdaa",0x29A8);  entity("angmsdab",0x29A9);  entity("angmsdac",0x29AA);  entity("angmsdad",0x29AB);  entity("angmsdae",0x29AC);  entity("angmsdaf",0x29AD);  entity("angmsdag",0x29AE);  entity("angmsdah",0x29AF);  entity("angrt",0x221F);  entity("angrtvb",0x22BE);  entity("angrtvbd",0x299D);  entity("angsph",0x2222);  entity("angst",0x212B);  entity("angzarr",0x237C);  entity("aogon",0x0105);  entity("Aogon",0x0104);  entity("aopf",0x1D552);  entity("Aopf",0x1D538);  entity("ap",0x2248);  entity("apacir",0x2A6F);  entity("ape",0x224A);  entity("apE",0x2A70);  entity("apid",0x224B);  entity("apos",0x0027);  entity("ApplyFunction",0x2061);  entity("approx",0x2248);  entity("approxeq",0x224A);  entity("aring",0x00E5);  entity("Aring",0x00C5);  entity("ascr",0x1D4B6);  entity("Ascr",0x1D49C);  entity("Assign",0x2254);  entity("ast",0x002A);  entity("asymp",0x2248);  entity("asympeq",0x224D);  entity("atilde",0x00E3);  entity("Atilde",0x00C3);  entity("auml",0x00E4);  entity("Auml",0x00C4);  entity("awconint",0x2233);  entity("awint",0x2A11);  entity("b.alpha",0x1D6C2);  entity("b.beta",0x1D6C3);  entity("b.chi",0x1D6D8);  entity("b.delta",0x1D6C5);  entity("b.Delta",0x1D6AB);  entity("b.epsi",0x1D6C6);  entity("b.epsiv",0x1D6DC);  entity("b.eta",0x1D6C8);  entity("b.gamma",0x1D6C4);  entity("b.Gamma",0x1D6AA);  entity("b.gammad",0x1D7CB);  entity("b.Gammad",0x1D7CA);  entity("b.iota",0x1D6CA);  entity("b.kappa",0x1D6CB);  entity("b.kappav",0x1D6DE);  entity("b.lambda",0x1D6CC);  entity("b.Lambda",0x1D6B2);  entity("b.mu",0x1D6CD);  entity("b.nu",0x1D6CE);  entity("b.omega",0x1D6DA);  entity("b.Omega",0x1D6C0);  entity("b.phi",0x1D6D7);  entity("b.Phi",0x1D6BD);  entity("b.phiv",0x1D6DF);  entity("b.pi",0x1D6D1);  entity("b.Pi",0x1D6B7);  entity("b.piv",0x1D6E1);  entity("b.psi",0x1D6D9);  entity("b.Psi",0x1D6BF);  entity("b.rho",0x1D6D2);  entity("b.rhov",0x1D6E0);  entity("b.sigma",0x1D6D4);  entity("b.Sigma",0x1D6BA);  entity("b.sigmav",0x1D6D3);  entity("b.tau",0x1D6D5);  entity("b.Theta",0x1D6AF);  entity("b.thetas",0x1D6C9);  entity("b.thetav",0x1D6DD);  entity("b.upsi",0x1D6D6);  entity("b.Upsi",0x1D6BC);  entity("b.xi",0x1D6CF);  entity("b.Xi",0x1D6B5);  entity("b.zeta",0x1D6C7);  entity("backcong",0x224C);  entity("backepsilon",0x03F6);  entity("backprime",0x2035);  entity("backsim",0x223D);  entity("backsimeq",0x22CD);  entity("Backslash",0x2216);  entity("Barv",0x2AE7);  entity("barvee",0x22BD);  entity("barwed",0x2305);  entity("Barwed",0x2306);  entity("barwedge",0x2305);  entity("bbrk",0x23B5);  entity("bbrktbrk",0x23B6);  entity("bcong",0x224C);  entity("bcy",0x0431);  entity("Bcy",0x0411);  entity("bdquo",0x201E);  entity("becaus",0x2235);  entity("because",0x2235);  entity("bemptyv",0x29B0);  entity("bepsi",0x03F6);  entity("bernou",0x212C);  entity("Bernoullis",0x212C);  entity("beta",0x03B2);  entity("Beta",0x0392);  entity("beth",0x2136);  entity("between",0x226C);  entity("bfr",0x1D51F);  entity("Bfr",0x1D505);  entity("bgr",0x03B2);  entity("Bgr",0x0392);  entity("bigcap",0x22C2);  entity("bigcirc",0x25EF);  entity("bigcup",0x22C3);  entity("bigodot",0x2A00);  entity("bigoplus",0x2A01);  entity("bigotimes",0x2A02);  entity("bigsqcup",0x2A06);  entity("bigstar",0x2605);  entity("bigtriangledown",0x25BD);  entity("bigtriangleup",0x25B3);  entity("biguplus",0x2A04);  entity("bigvee",0x22C1);  entity("bigwedge",0x22C0);  entity("bkarow",0x290D);  entity("blacklozenge",0x29EB);  entity("blacksquare",0x25AA);  entity("blacktriangle",0x25B4);  entity("blacktriangledown",0x25BE);  entity("blacktriangleleft",0x25C2);  entity("blacktriangleright",0x25B8);  entity("blank",0x2423);  entity("blk12",0x2592);  entity("blk14",0x2591);  entity("blk34",0x2593);  entity("block",0x2588);  entity("bnot",0x2310);  entity("bNot",0x2AED);  entity("bopf",0x1D553);  entity("Bopf",0x1D539);  entity("bot",0x22A5);  entity("bottom",0x22A5);  entity("bowtie",0x22C8);  entity("boxbox",0x29C9);  entity("boxdl",0x2510);  entity("boxdL",0x2555);  entity("boxDl",0x2556);  entity("boxDL",0x2557);  entity("boxdr",0x250C);  entity("boxdR",0x2552);  entity("boxDr",0x2553);  entity("boxDR",0x2554);  entity("boxh",0x2500);  entity("boxH",0x2550);  entity("boxhd",0x252C);  entity("boxhD",0x2565);  entity("boxHd",0x2564);  entity("boxHD",0x2566);  entity("boxhu",0x2534);  entity("boxhU",0x2568);  entity("boxHu",0x2567);  entity("boxHU",0x2569);  entity("boxminus",0x229F);  entity("boxplus",0x229E);  entity("boxtimes",0x22A0);  entity("boxul",0x2518);  entity("boxuL",0x255B);  entity("boxUl",0x255C);  entity("boxUL",0x255D);  entity("boxur",0x2514);  entity("boxuR",0x2558);  entity("boxUr",0x2559);  entity("boxUR",0x255A);  entity("boxv",0x2502);  entity("boxV",0x2551);  entity("boxvh",0x253C);  entity("boxvH",0x256A);  entity("boxVh",0x256B);  entity("boxVH",0x256C);  entity("boxvl",0x2524);  entity("boxvL",0x2561);  entity("boxVl",0x2562);  entity("boxVL",0x2563);  entity("boxvr",0x251C);  entity("boxvR",0x255E);  entity("boxVr",0x255F);  entity("boxVR",0x2560);  entity("bprime",0x2035);  entity("breve",0x02D8);  entity("brvbar",0x00A6);  entity("bscr",0x1D4B7);  entity("Bscr",0x212C);  entity("bsemi",0x204F);  entity("bsim",0x223D);  entity("bsime",0x22CD);  entity("bsol",0x005C);  entity("bsolb",0x29C5);  entity("bull",0x2022);  entity("bullet",0x2022);  entity("bump",0x224E);  entity("bumpe",0x224F);  entity("bumpE",0x2AAE);  entity("bumpeq",0x224F);  entity("Bumpeq",0x224E);  entity("cacute",0x0107);  entity("Cacute",0x0106);  entity("cap",0x2229);  entity("Cap",0x22D2);  entity("capand",0x2A44);  entity("capbrcup",0x2A49);  entity("capcap",0x2A4B);  entity("capcup",0x2A47);  entity("capdot",0x2A40);  entity("CapitalDifferentialD",0x2145);  entity("caret",0x2041);  entity("caron",0x02C7);  entity("Cayleys",0x212D);  entity("ccaps",0x2A4D);  entity("ccaron",0x010D);  entity("Ccaron",0x010C);  entity("ccedil",0x00E7);  entity("Ccedil",0x00C7);  entity("ccirc",0x0109);  entity("Ccirc",0x0108);  entity("Cconint",0x2230);  entity("ccups",0x2A4C);  entity("ccupssm",0x2A50);  entity("cdot",0x010B);  entity("Cdot",0x010A);  entity("cedil",0x00B8);  entity("Cedilla",0x00B8);  entity("cemptyv",0x29B2);  entity("cent",0x00A2);  entity("centerdot",0x00B7);  entity("cfr",0x1D520);  entity("Cfr",0x212D);  entity("chcy",0x0447);  entity("CHcy",0x0427);  entity("check",0x2713);  entity("checkmark",0x2713);  entity("chi",0x03C7);  entity("Chi",0x03A7);  entity("cir",0x25CB);  entity("circ",0x02C6);  entity("circeq",0x2257);  entity("circlearrowleft",0x21BA);  entity("circlearrowright",0x21BB);  entity("circledast",0x229B);  entity("circledcirc",0x229A);  entity("circleddash",0x229D);  entity("CircleDot",0x2299);  entity("circledR",0x00AE);  entity("circledS",0x24C8);  entity("CircleMinus",0x2296);  entity("CirclePlus",0x2295);  entity("CircleTimes",0x2297);  entity("cire",0x2257);  entity("cirE",0x29C3);  entity("cirfnint",0x2A10);  entity("cirmid",0x2AEF);  entity("cirscir",0x29C2);  entity("ClockwiseContourIntegral",0x2232);  entity("CloseCurlyDoubleQuote",0x201D);  entity("CloseCurlyQuote",0x2019);  entity("clubs",0x2663);  entity("clubsuit",0x2663);  entity("colon",0x003A);  entity("Colon",0x2237);  entity("colone",0x2254);  entity("Colone",0x2A74);  entity("coloneq",0x2254);  entity("comma",0x002C);  entity("commat",0x0040);  entity("comp",0x2201);  entity("compfn",0x2218);  entity("complement",0x2201);  entity("complexes",0x2102);  entity("cong",0x2245);  entity("congdot",0x2A6D);  entity("Congruent",0x2261);  entity("conint",0x222E);  entity("Conint",0x222F);  entity("ContourIntegral",0x222E);  entity("copf",0x1D554);  entity("Copf",0x2102);  entity("coprod",0x2210);  entity("Coproduct",0x2210);  entity("copy",0x00A9);  entity("copysr",0x2117);  entity("CounterClockwiseContourIntegral",0x2233);  entity("crarr",0x21B5);  entity("cross",0x2717);  entity("Cross",0x2A2F);  entity("cscr",0x1D4B8);  entity("Cscr",0x1D49E);  entity("csub",0x2ACF);  entity("csube",0x2AD1);  entity("csup",0x2AD0);  entity("csupe",0x2AD2);  entity("ctdot",0x22EF);  entity("cudarrl",0x2938);  entity("cudarrr",0x2935);  entity("cuepr",0x22DE);  entity("cuesc",0x22DF);  entity("cularr",0x21B6);  entity("cularrp",0x293D);  entity("cup",0x222A);  entity("Cup",0x22D3);  entity("cupbrcap",0x2A48);  entity("cupcap",0x2A46);  entity("CupCap",0x224D);  entity("cupcup",0x2A4A);  entity("cupdot",0x228D);  entity("cupor",0x2A45);  entity("curarr",0x21B7);  entity("curarrm",0x293C);  entity("curlyeqprec",0x22DE);  entity("curlyeqsucc",0x22DF);  entity("curlyvee",0x22CE);  entity("curlywedge",0x22CF);  entity("curren",0x00A4);  entity("curvearrowleft",0x21B6);  entity("curvearrowright",0x21B7);  entity("cuvee",0x22CE);  entity("cuwed",0x22CF);  entity("cwconint",0x2232);  entity("cwint",0x2231);  entity("cylcty",0x232D);  entity("dagger",0x2020);  entity("Dagger",0x2021);  entity("daleth",0x2138);  entity("darr",0x2193);  entity("dArr",0x21D3);  entity("Darr",0x21A1);  entity("dash",0x2010);  entity("dashv",0x22A3);  entity("Dashv",0x2AE4);  entity("dbkarow",0x290F);  entity("dblac",0x02DD);  entity("dcaron",0x010F);  entity("Dcaron",0x010E);  entity("dcy",0x0434);  entity("Dcy",0x0414);  entity("dd",0x2146);  entity("DD",0x2145);  entity("ddagger",0x2021);  entity("ddarr",0x21CA);  entity("DDotrahd",0x2911);  entity("ddotseq",0x2A77);  entity("deg",0x00B0);  entity("Del",0x2207);  entity("delta",0x03B4);  entity("Delta",0x0394);  entity("demptyv",0x29B1);  entity("dfisht",0x297F);  entity("dfr",0x1D521);  entity("Dfr",0x1D507);  entity("dgr",0x03B4);  entity("Dgr",0x0394);  entity("dHar",0x2965);  entity("dharl",0x21C3);  entity("dharr",0x21C2);  entity("DiacriticalAcute",0x00B4);  entity("DiacriticalDot",0x02D9);  entity("DiacriticalDoubleAcute",0x02DD);  entity("DiacriticalGrave",0x0060);  entity("DiacriticalTilde",0x02DC);  entity("diam",0x22C4);  entity("diamond",0x22C4);  entity("diamondsuit",0x2666);  entity("diams",0x2666);  entity("die",0x00A8);  entity("DifferentialD",0x2146);  entity("digamma",0x03DD);  entity("disin",0x22F2);  entity("div",0x00F7);  entity("divide",0x00F7);  entity("divideontimes",0x22C7);  entity("divonx",0x22C7);  entity("djcy",0x0452);  entity("DJcy",0x0402);  entity("dlcorn",0x231E);  entity("dlcrop",0x230D);  entity("dollar",0x0024);  entity("dopf",0x1D555);  entity("Dopf",0x1D53B);  entity("dot",0x02D9);  entity("Dot",0x00A8);  entity("doteq",0x2250);  entity("doteqdot",0x2251);  entity("DotEqual",0x2250);  entity("dotminus",0x2238);  entity("dotplus",0x2214);  entity("dotsquare",0x22A1);  entity("doublebarwedge",0x2306);  entity("DoubleContourIntegral",0x222F);  entity("DoubleDot",0x00A8);  entity("DoubleDownArrow",0x21D3);  entity("DoubleLeftArrow",0x21D0);  entity("DoubleLeftRightArrow",0x21D4);  entity("DoubleLeftTee",0x2AE4);  entity("DoubleLongLeftArrow",0x27F8);  entity("DoubleLongLeftRightArrow",0x27FA);  entity("DoubleLongRightArrow",0x27F9);  entity("DoubleRightArrow",0x21D2);  entity("DoubleRightTee",0x22A8);  entity("DoubleUpArrow",0x21D1);  entity("DoubleUpDownArrow",0x21D5);  entity("DoubleVerticalBar",0x2225);  entity("downarrow",0x2193);  entity("Downarrow",0x21D3);  entity("DownArrowBar",0x2913);  entity("DownArrowUpArrow",0x21F5);  entity("downdownarrows",0x21CA);  entity("downharpoonleft",0x21C3);  entity("downharpoonright",0x21C2);  entity("DownLeftRightVector",0x2950);  entity("DownLeftTeeVector",0x295E);  entity("DownLeftVector",0x21BD);  entity("DownLeftVectorBar",0x2956);  entity("DownRightTeeVector",0x295F);  entity("DownRightVector",0x21C1);  entity("DownRightVectorBar",0x2957);  entity("DownTee",0x22A4);  entity("DownTeeArrow",0x21A7);  entity("drbkarow",0x2910);  entity("drcorn",0x231F);  entity("drcrop",0x230C);  entity("dscr",0x1D4B9);  entity("Dscr",0x1D49F);  entity("dscy",0x0455);  entity("DScy",0x0405);  entity("dsol",0x29F6);  entity("dstrok",0x0111);  entity("Dstrok",0x0110);  entity("dtdot",0x22F1);  entity("dtri",0x25BF);  entity("dtrif",0x25BE);  entity("duarr",0x21F5);  entity("duhar",0x296F);  entity("dwangle",0x29A6);  entity("dzcy",0x045F);  entity("DZcy",0x040F);  entity("dzigrarr",0x27FF);  entity("eacgr",0x03AD);  entity("Eacgr",0x0388);  entity("eacute",0x00E9);  entity("Eacute",0x00C9);  entity("easter",0x2A6E);  entity("ecaron",0x011B);  entity("Ecaron",0x011A);  entity("ecir",0x2256);  entity("ecirc",0x00EA);  entity("Ecirc",0x00CA);  entity("ecolon",0x2255);  entity("ecy",0x044D);  entity("Ecy",0x042D);  entity("eDDot",0x2A77);  entity("edot",0x0117);  entity("eDot",0x2251);  entity("Edot",0x0116);  entity("ee",0x2147);  entity("eeacgr",0x03AE);  entity("EEacgr",0x0389);  entity("eegr",0x03B7);  entity("EEgr",0x0397);  entity("efDot",0x2252);  entity("efr",0x1D522);  entity("Efr",0x1D508);  entity("eg",0x2A9A);  entity("egr",0x03B5);  entity("Egr",0x0395);  entity("egrave",0x00E8);  entity("Egrave",0x00C8);  entity("egs",0x2A96);  entity("egsdot",0x2A98);  entity("el",0x2A99);  entity("Element",0x2208);  entity("elinters",0x23E7);  entity("ell",0x2113);  entity("els",0x2A95);  entity("elsdot",0x2A97);  entity("emacr",0x0113);  entity("Emacr",0x0112);  entity("empty",0x2205);  entity("emptyset",0x2205);  entity("EmptySmallSquare",0x25FB);  entity("emptyv",0x2205);  entity("EmptyVerySmallSquare",0x25AB);  entity("emsp",0x2003);  entity("emsp13",0x2004);  entity("emsp14",0x2005);  entity("eng",0x014B);  entity("ENG",0x014A);  entity("ensp",0x2002);  entity("eogon",0x0119);  entity("Eogon",0x0118);  entity("eopf",0x1D556);  entity("Eopf",0x1D53C);  entity("epar",0x22D5);  entity("eparsl",0x29E3);  entity("eplus",0x2A71);  entity("epsi",0x03F5);  entity("epsilon",0x03B5);  entity("Epsilon",0x0395);  entity("epsiv",0x03B5);  entity("eqcirc",0x2256);  entity("eqcolon",0x2255);  entity("eqsim",0x2242);  entity("eqslantgtr",0x2A96);  entity("eqslantless",0x2A95);  entity("Equal",0x2A75);  entity("equals",0x003D);  entity("EqualTilde",0x2242);  entity("equest",0x225F);  entity("Equilibrium",0x21CC);  entity("equiv",0x2261);  entity("equivDD",0x2A78);  entity("eqvparsl",0x29E5);  entity("erarr",0x2971);  entity("erDot",0x2253);  entity("escr",0x212F);  entity("Escr",0x2130);  entity("esdot",0x2250);  entity("esim",0x2242);  entity("Esim",0x2A73);  entity("eta",0x03B7);  entity("Eta",0x0397);  entity("eth",0x00F0);  entity("ETH",0x00D0);  entity("euml",0x00EB);  entity("Euml",0x00CB);  entity("euro",0x20AC);  entity("excl",0x0021);  entity("exist",0x2203);  entity("Exists",0x2203);  entity("expectation",0x2130);  entity("exponentiale",0x2147);  entity("fallingdotseq",0x2252);  entity("fcy",0x0444);  entity("Fcy",0x0424);  entity("female",0x2640);  entity("ffilig",0xFB03);  entity("fflig",0xFB00);  entity("ffllig",0xFB04);  entity("ffr",0x1D523);  entity("Ffr",0x1D509);  entity("filig",0xFB01);  entity("FilledSmallSquare",0x25FC);  entity("FilledVerySmallSquare",0x25AA);  entity("flat",0x266D);  entity("fllig",0xFB02);  entity("fltns",0x25B1);  entity("fnof",0x0192);  entity("fopf",0x1D557);  entity("Fopf",0x1D53D);  entity("forall",0x2200);  entity("fork",0x22D4);  entity("forkv",0x2AD9);  entity("Fouriertrf",0x2131);  entity("fpartint",0x2A0D);  entity("frac12",0x00BD);  entity("frac13",0x2153);  entity("frac14",0x00BC);  entity("frac15",0x2155);  entity("frac16",0x2159);  entity("frac18",0x215B);  entity("frac23",0x2154);  entity("frac25",0x2156);  entity("frac34",0x00BE);  entity("frac35",0x2157);  entity("frac38",0x215C);  entity("frac45",0x2158);  entity("frac56",0x215A);  entity("frac58",0x215D);  entity("frac78",0x215E);  entity("frasl",0x2044);  entity("frown",0x2322);  entity("fscr",0x1D4BB);  entity("Fscr",0x2131);  entity("gacute",0x01F5);  entity("gamma",0x03B3);  entity("Gamma",0x0393);  entity("gammad",0x03DD);  entity("Gammad",0x03DC);  entity("gap",0x2A86);  entity("gbreve",0x011F);  entity("Gbreve",0x011E);  entity("Gcedil",0x0122);  entity("gcirc",0x011D);  entity("Gcirc",0x011C);  entity("gcy",0x0433);  entity("Gcy",0x0413);  entity("gdot",0x0121);  entity("Gdot",0x0120);  entity("ge",0x2265);  entity("gE",0x2267);  entity("gel",0x22DB);  entity("gEl",0x2A8C);  entity("geq",0x2265);  entity("geqq",0x2267);  entity("geqslant",0x2A7E);  entity("ges",0x2A7E);  entity("gescc",0x2AA9);  entity("gesdot",0x2A80);  entity("gesdoto",0x2A82);  entity("gesdotol",0x2A84);  entity("gesles",0x2A94);  entity("gfr",0x1D524);  entity("Gfr",0x1D50A);  entity("gg",0x226B);  entity("Gg",0x22D9);  entity("ggg",0x22D9);  entity("ggr",0x03B3);  entity("Ggr",0x0393);  entity("gimel",0x2137);  entity("gjcy",0x0453);  entity("GJcy",0x0403);  entity("gl",0x2277);  entity("gla",0x2AA5);  entity("glE",0x2A92);  entity("glj",0x2AA4);  entity("gnap",0x2A8A);  entity("gnapprox",0x2A8A);  entity("gne",0x2A88);  entity("gnE",0x2269);  entity("gneq",0x2A88);  entity("gneqq",0x2269);  entity("gnsim",0x22E7);  entity("gopf",0x1D558);  entity("Gopf",0x1D53E);  entity("grave",0x0060);  entity("GreaterEqual",0x2265);  entity("GreaterEqualLess",0x22DB);  entity("GreaterFullEqual",0x2267);  entity("GreaterGreater",0x2AA2);  entity("GreaterLess",0x2277);  entity("GreaterSlantEqual",0x2A7E);  entity("GreaterTilde",0x2273);  entity("gscr",0x210A);  entity("Gscr",0x1D4A2);  entity("gsim",0x2273);  entity("gsime",0x2A8E);  entity("gsiml",0x2A90);  entity("gt",0x003E);  entity("Gt",0x226B);  entity("gtcc",0x2AA7);  entity("gtcir",0x2A7A);  entity("gtdot",0x22D7);  entity("gtlPar",0x2995);  entity("gtquest",0x2A7C);  entity("gtrapprox",0x2A86);  entity("gtrarr",0x2978);  entity("gtrdot",0x22D7);  entity("gtreqless",0x22DB);  entity("gtreqqless",0x2A8C);  entity("gtrless",0x2277);  entity("gtrsim",0x2273);  entity("Hacek",0x02C7);  entity("hairsp",0x200A);  entity("half",0x00BD);  entity("hamilt",0x210B);  entity("hardcy",0x044A);  entity("HARDcy",0x042A);  entity("harr",0x2194);  entity("hArr",0x21D4);  entity("harrcir",0x2948);  entity("harrw",0x21AD);  entity("Hat",0x005E);  entity("hbar",0x210F);  entity("hcirc",0x0125);  entity("Hcirc",0x0124);  entity("hearts",0x2665);  entity("heartsuit",0x2665);  entity("hellip",0x2026);  entity("hercon",0x22B9);  entity("hfr",0x1D525);  entity("Hfr",0x210C);  entity("HilbertSpace",0x210B);  entity("hksearow",0x2925);  entity("hkswarow",0x2926);  entity("hoarr",0x21FF);  entity("homtht",0x223B);  entity("hookleftarrow",0x21A9);  entity("hookrightarrow",0x21AA);  entity("hopf",0x1D559);  entity("Hopf",0x210D);  entity("horbar",0x2015);  entity("HorizontalLine",0x2500);  entity("hscr",0x1D4BD);  entity("Hscr",0x210B);  entity("hslash",0x210F);  entity("hstrok",0x0127);  entity("Hstrok",0x0126);  entity("HumpDownHump",0x224E);  entity("HumpEqual",0x224F);  entity("hybull",0x2043);  entity("hyphen",0x2010);  entity("iacgr",0x03AF);  entity("Iacgr",0x038A);  entity("iacute",0x00ED);  entity("Iacute",0x00CD);  entity("ic",0x2063);  entity("icirc",0x00EE);  entity("Icirc",0x00CE);  entity("icy",0x0438);  entity("Icy",0x0418);  entity("idiagr",0x0390);  entity("idigr",0x03CA);  entity("Idigr",0x03AA);  entity("Idot",0x0130);  entity("iecy",0x0435);  entity("IEcy",0x0415);  entity("iexcl",0x00A1);  entity("iff",0x21D4);  entity("ifr",0x1D526);  entity("Ifr",0x2111);  entity("igr",0x03B9);  entity("Igr",0x0399);  entity("igrave",0x00EC);  entity("Igrave",0x00CC);  entity("ii",0x2148);  entity("iiiint",0x2A0C);  entity("iiint",0x222D);  entity("iinfin",0x29DC);  entity("iiota",0x2129);  entity("ijlig",0x0133);  entity("IJlig",0x0132);  entity("Im",0x2111);  entity("imacr",0x012B);  entity("Imacr",0x012A);  entity("image",0x2111);  entity("ImaginaryI",0x2148);  entity("imagline",0x2110);  entity("imagpart",0x2111);  entity("imath",0x0131);  entity("imof",0x22B7);  entity("imped",0x01B5);  entity("Implies",0x21D2);  entity("in",0x2208);  entity("incare",0x2105);  entity("infin",0x221E);  entity("infintie",0x29DD);  entity("inodot",0x0131);  entity("int",0x222B);  entity("Int",0x222C);  entity("intcal",0x22BA);  entity("integers",0x2124);  entity("Integral",0x222B);  entity("intercal",0x22BA);  entity("Intersection",0x22C2);  entity("intlarhk",0x2A17);  entity("intprod",0x2A3C);  entity("InvisibleComma",0x2063);  entity("InvisibleTimes",0x2062);  entity("iocy",0x0451);  entity("IOcy",0x0401);  entity("iogon",0x012F);  entity("Iogon",0x012E);  entity("iopf",0x1D55A);  entity("Iopf",0x1D540);  entity("iota",0x03B9);  entity("Iota",0x0399);  entity("iprod",0x2A3C);  entity("iquest",0x00BF);  entity("iscr",0x1D4BE);  entity("Iscr",0x2110);  entity("isin",0x2208);  entity("isindot",0x22F5);  entity("isinE",0x22F9);  entity("isins",0x22F4);  entity("isinsv",0x22F3);  entity("isinv",0x2208);  entity("it",0x2062);  entity("itilde",0x0129);  entity("Itilde",0x0128);  entity("iukcy",0x0456);  entity("Iukcy",0x0406);  entity("iuml",0x00EF);  entity("Iuml",0x00CF);  entity("jcirc",0x0135);  entity("Jcirc",0x0134);  entity("jcy",0x0439);  entity("Jcy",0x0419);  entity("jfr",0x1D527);  entity("Jfr",0x1D50D);  entity("jmath",0x0237);  entity("jopf",0x1D55B);  entity("Jopf",0x1D541);  entity("jscr",0x1D4BF);  entity("Jscr",0x1D4A5);  entity("jsercy",0x0458);  entity("Jsercy",0x0408);  entity("jukcy",0x0454);  entity("Jukcy",0x0404);  entity("kappa",0x03BA);  entity("Kappa",0x039A);  entity("kappav",0x03F0);  entity("kcedil",0x0137);  entity("Kcedil",0x0136);  entity("kcy",0x043A);  entity("Kcy",0x041A);  entity("kfr",0x1D528);  entity("Kfr",0x1D50E);  entity("kgr",0x03BA);  entity("Kgr",0x039A);  entity("kgreen",0x0138);  entity("khcy",0x0445);  entity("KHcy",0x0425);  entity("khgr",0x03C7);  entity("KHgr",0x03A7);  entity("kjcy",0x045C);  entity("KJcy",0x040C);  entity("kopf",0x1D55C);  entity("Kopf",0x1D542);  entity("kscr",0x1D4C0);  entity("Kscr",0x1D4A6);  entity("lAarr",0x21DA);  entity("lacute",0x013A);  entity("Lacute",0x0139);  entity("laemptyv",0x29B4);  entity("lagran",0x2112);  entity("lambda",0x03BB);  entity("Lambda",0x039B);  entity("lang",0x2329);  entity("Lang",0x27EA);  entity("langd",0x2991);  entity("langle",0x2329);  entity("lap",0x2A85);  entity("Laplacetrf",0x2112);  entity("laquo",0x00AB);  entity("larr",0x2190);  entity("lArr",0x21D0);  entity("Larr",0x219E);  entity("larrb",0x21E4);  entity("larrbfs",0x291F);  entity("larrfs",0x291D);  entity("larrhk",0x21A9);  entity("larrlp",0x21AB);  entity("larrpl",0x2939);  entity("larrsim",0x2973);  entity("larrtl",0x21A2);  entity("lat",0x2AAB);  entity("latail",0x2919);  entity("lAtail",0x291B);  entity("late",0x2AAD);  entity("lbarr",0x290C);  entity("lBarr",0x290E);  entity("lbbrk",0x2997);  entity("lbrace",0x007B);  entity("lbrack",0x005B);  entity("lbrke",0x298B);  entity("lbrksld",0x298F);  entity("lbrkslu",0x298D);  entity("lcaron",0x013E);  entity("Lcaron",0x013D);  entity("lcedil",0x013C);  entity("Lcedil",0x013B);  entity("lceil",0x2308);  entity("lcub",0x007B);  entity("lcy",0x043B);  entity("Lcy",0x041B);  entity("ldca",0x2936);  entity("ldquo",0x201C);  entity("ldquor",0x201E);  entity("ldrdhar",0x2967);  entity("ldrushar",0x294B);  entity("ldsh",0x21B2);  entity("le",0x2264);  entity("lE",0x2266);  entity("LeftAngleBracket",0x2329);  entity("leftarrow",0x2190);  entity("Leftarrow",0x21D0);  entity("LeftArrowBar",0x21E4);  entity("LeftArrowRightArrow",0x21C6);  entity("leftarrowtail",0x21A2);  entity("LeftCeiling",0x2308);  entity("LeftDoubleBracket",0x27E6);  entity("LeftDownTeeVector",0x2961);  entity("LeftDownVector",0x21C3);  entity("LeftDownVectorBar",0x2959);  entity("LeftFloor",0x230A);  entity("leftharpoondown",0x21BD);  entity("leftharpoonup",0x21BC);  entity("leftleftarrows",0x21C7);  entity("leftrightarrow",0x2194);  entity("Leftrightarrow",0x21D4);  entity("leftrightarrows",0x21C6);  entity("leftrightharpoons",0x21CB);  entity("leftrightsquigarrow",0x21AD);  entity("LeftRightVector",0x294E);  entity("LeftTee",0x22A3);  entity("LeftTeeArrow",0x21A4);  entity("LeftTeeVector",0x295A);  entity("leftthreetimes",0x22CB);  entity("LeftTriangle",0x22B2);  entity("LeftTriangleBar",0x29CF);  entity("LeftTriangleEqual",0x22B4);  entity("LeftUpDownVector",0x2951);  entity("LeftUpTeeVector",0x2960);  entity("LeftUpVector",0x21BF);  entity("LeftUpVectorBar",0x2958);  entity("LeftVector",0x21BC);  entity("LeftVectorBar",0x2952);  entity("leg",0x22DA);  entity("lEg",0x2A8B);  entity("leq",0x2264);  entity("leqq",0x2266);  entity("leqslant",0x2A7D);  entity("les",0x2A7D);  entity("lescc",0x2AA8);  entity("lesdot",0x2A7F);  entity("lesdoto",0x2A81);  entity("lesdotor",0x2A83);  entity("lesges",0x2A93);  entity("lessapprox",0x2A85);  entity("lessdot",0x22D6);  entity("lesseqgtr",0x22DA);  entity("lesseqqgtr",0x2A8B);  entity("LessEqualGreater",0x22DA);  entity("LessFullEqual",0x2266);  entity("LessGreater",0x2276);  entity("lessgtr",0x2276);  entity("LessLess",0x2AA1);  entity("lesssim",0x2272);  entity("LessSlantEqual",0x2A7D);  entity("LessTilde",0x2272);  entity("lfisht",0x297C);  entity("lfloor",0x230A);  entity("lfr",0x1D529);  entity("Lfr",0x1D50F);  entity("lg",0x2276);  entity("lgE",0x2A91);  entity("lgr",0x03BB);  entity("Lgr",0x039B);  entity("lHar",0x2962);  entity("lhard",0x21BD);  entity("lharu",0x21BC);  entity("lharul",0x296A);  entity("lhblk",0x2584);  entity("ljcy",0x0459);  entity("LJcy",0x0409);  entity("ll",0x226A);  entity("Ll",0x22D8);  entity("llarr",0x21C7);  entity("llcorner",0x231E);  entity("Lleftarrow",0x21DA);  entity("llhard",0x296B);  entity("lltri",0x25FA);  entity("lmidot",0x0140);  entity("Lmidot",0x013F);  entity("lmoust",0x23B0);  entity("lmoustache",0x23B0);  entity("lnap",0x2A89);  entity("lnapprox",0x2A89);  entity("lne",0x2A87);  entity("lnE",0x2268);  entity("lneq",0x2A87);  entity("lneqq",0x2268);  entity("lnsim",0x22E6);  entity("loang",0x27EC);  entity("loarr",0x21FD);  entity("lobrk",0x27E6);  entity("longleftarrow",0x27F5);  entity("Longleftarrow",0x27F8);  entity("longleftrightarrow",0x27F7);  entity("Longleftrightarrow",0x27FA);  entity("longmapsto",0x27FC);  entity("longrightarrow",0x27F6);  entity("Longrightarrow",0x27F9);  entity("looparrowleft",0x21AB);  entity("looparrowright",0x21AC);  entity("lopar",0x2985);  entity("lopf",0x1D55D);  entity("Lopf",0x1D543);  entity("loplus",0x2A2D);  entity("lotimes",0x2A34);  entity("lowast",0x2217);  entity("lowbar",0x005F);  entity("LowerLeftArrow",0x2199);  entity("LowerRightArrow",0x2198);  entity("loz",0x25CA);  entity("lozenge",0x25CA);  entity("lozf",0x29EB);  entity("lpar",0x0028);  entity("lparlt",0x2993);  entity("lrarr",0x21C6);  entity("lrcorner",0x231F);  entity("lrhar",0x21CB);  entity("lrhard",0x296D);  entity("lrm",0x200E);  entity("lrtri",0x22BF);  entity("lsaquo",0x2039);  entity("lscr",0x1D4C1);  entity("Lscr",0x2112);  entity("lsh",0x21B0);  entity("lsim",0x2272);  entity("lsime",0x2A8D);  entity("lsimg",0x2A8F);  entity("lsqb",0x005B);  entity("lsquo",0x2018);  entity("lsquor",0x201A);  entity("lstrok",0x0142);  entity("Lstrok",0x0141);  entity("lt",0x003C);  entity("Lt",0x226A);  entity("ltcc",0x2AA6);  entity("ltcir",0x2A79);  entity("ltdot",0x22D6);  entity("lthree",0x22CB);  entity("ltimes",0x22C9);  entity("ltlarr",0x2976);  entity("ltquest",0x2A7B);  entity("ltri",0x25C3);  entity("ltrie",0x22B4);  entity("ltrif",0x25C2);  entity("ltrPar",0x2996);  entity("lurdshar",0x294A);  entity("luruhar",0x2966);  entity("macr",0x00AF);  entity("male",0x2642);  entity("malt",0x2720);  entity("maltese",0x2720);  entity("map",0x21A6);  entity("Map",0x2905);  entity("mapsto",0x21A6);  entity("mapstodown",0x21A7);  entity("mapstoleft",0x21A4);  entity("mapstoup",0x21A5);  entity("marker",0x25AE);  entity("mcomma",0x2A29);  entity("mcy",0x043C);  entity("Mcy",0x041C);  entity("mdash",0x2014);  entity("mDDot",0x223A);  entity("measuredangle",0x2221);  entity("MediumSpace",0x205F);  entity("Mellintrf",0x2133);  entity("mfr",0x1D52A);  entity("Mfr",0x1D510);  entity("mgr",0x03BC);  entity("Mgr",0x039C);  entity("mho",0x2127);  entity("micro",0x00B5);  entity("mid",0x2223);  entity("midast",0x002A);  entity("midcir",0x2AF0);  entity("middot",0x00B7);  entity("minus",0x2212);  entity("minusb",0x229F);  entity("minusd",0x2238);  entity("minusdu",0x2A2A);  entity("MinusPlus",0x2213);  entity("mlcp",0x2ADB);  entity("mldr",0x2026);  entity("mnplus",0x2213);  entity("models",0x22A7);  entity("mopf",0x1D55E);  entity("Mopf",0x1D544);  entity("mp",0x2213);  entity("mscr",0x1D4C2);  entity("Mscr",0x2133);  entity("mstpos",0x223E);  entity("mu",0x03BC);  entity("Mu",0x039C);  entity("multimap",0x22B8);  entity("mumap",0x22B8);  entity("nabla",0x2207);  entity("nacute",0x0144);  entity("Nacute",0x0143);  entity("nap",0x2249);  entity("napos",0x0149);  entity("napprox",0x2249);  entity("natur",0x266E);  entity("natural",0x266E);  entity("naturals",0x2115);  entity("nbsp",0x00A0);  entity("ncap",0x2A43);  entity("ncaron",0x0148);  entity("Ncaron",0x0147);  entity("ncedil",0x0146);  entity("Ncedil",0x0145);  entity("ncong",0x2247);  entity("ncup",0x2A42);  entity("ncy",0x043D);  entity("Ncy",0x041D);  entity("ndash",0x2013);  entity("ne",0x2260);  entity("nearhk",0x2924);  entity("nearr",0x2197);  entity("neArr",0x21D7);  entity("nearrow",0x2197);  entity("NegativeMediumSpace",0x200B);  entity("NegativeThickSpace",0x200B);  entity("NegativeThinSpace",0x200B);  entity("NegativeVeryThinSpace",0x200B);  entity("nequiv",0x2262);  entity("nesear",0x2928);  entity("NestedGreaterGreater",0x226B);  entity("NestedLessLess",0x226A);  entity("NewLine",0x000A);  entity("nexist",0x2204);  entity("nexists",0x2204);  entity("nfr",0x1D52B);  entity("Nfr",0x1D511);  entity("nge",0x2271);  entity("ngeq",0x2271);  entity("ngr",0x03BD);  entity("Ngr",0x039D);  entity("ngsim",0x2275);  entity("ngt",0x226F);  entity("ngtr",0x226F);  entity("nharr",0x21AE);  entity("nhArr",0x21CE);  entity("nhpar",0x2AF2);  entity("ni",0x220B);  entity("nis",0x22FC);  entity("nisd",0x22FA);  entity("niv",0x220B);  entity("njcy",0x045A);  entity("NJcy",0x040A);  entity("nlarr",0x219A);  entity("nlArr",0x21CD);  entity("nldr",0x2025);  entity("nle",0x2270);  entity("nleftarrow",0x219A);  entity("nLeftarrow",0x21CD);  entity("nleftrightarrow",0x21AE);  entity("nLeftrightarrow",0x21CE);  entity("nleq",0x2270);  entity("nless",0x226E);  entity("nlsim",0x2274);  entity("nlt",0x226E);  entity("nltri",0x22EA);  entity("nltrie",0x22EC);  entity("nmid",0x2224);  entity("NoBreak",0x2060);  entity("NonBreakingSpace",0x00A0);  entity("nopf",0x1D55F);  entity("Nopf",0x2115);  entity("not",0x00AC);  entity("Not",0x2AEC);  entity("NotCongruent",0x2262);  entity("NotCupCap",0x226D);  entity("NotDoubleVerticalBar",0x2226);  entity("NotElement",0x2209);  entity("NotEqual",0x2260);  entity("NotExists",0x2204);  entity("NotGreater",0x226F);  entity("NotGreaterEqual",0x2271);  entity("NotGreaterLess",0x2279);  entity("NotGreaterTilde",0x2275);  entity("notin",0x2209);  entity("notinva",0x2209);  entity("notinvb",0x22F7);  entity("notinvc",0x22F6);  entity("NotLeftTriangle",0x22EA);  entity("NotLeftTriangleEqual",0x22EC);  entity("NotLess",0x226E);  entity("NotLessEqual",0x2270);  entity("NotLessGreater",0x2278);  entity("NotLessTilde",0x2274);  entity("notni",0x220C);  entity("notniva",0x220C);  entity("notnivb",0x22FE);  entity("notnivc",0x22FD);  entity("NotPrecedes",0x2280);  entity("NotPrecedesSlantEqual",0x22E0);  entity("NotReverseElement",0x220C);  entity("NotRightTriangle",0x22EB);  entity("NotRightTriangleEqual",0x22ED);  entity("NotSquareSubsetEqual",0x22E2);  entity("NotSquareSupersetEqual",0x22E3);  entity("NotSubsetEqual",0x2288);  entity("NotSucceeds",0x2281);  entity("NotSucceedsSlantEqual",0x22E1);  entity("NotSupersetEqual",0x2289);  entity("NotTilde",0x2241);  entity("NotTildeEqual",0x2244);  entity("NotTildeFullEqual",0x2247);  entity("NotTildeTilde",0x2249);  entity("NotVerticalBar",0x2224);  entity("npar",0x2226);  entity("nparallel",0x2226);  entity("npolint",0x2A14);  entity("npr",0x2280);  entity("nprcue",0x22E0);  entity("nprec",0x2280);  entity("nrarr",0x219B);  entity("nrArr",0x21CF);  entity("nrightarrow",0x219B);  entity("nRightarrow",0x21CF);  entity("nrtri",0x22EB);  entity("nrtrie",0x22ED);  entity("nsc",0x2281);  entity("nsccue",0x22E1);  entity("nscr",0x1D4C3);  entity("Nscr",0x1D4A9);  entity("nshortmid",0x2224);  entity("nshortparallel",0x2226);  entity("nsim",0x2241);  entity("nsime",0x2244);  entity("nsimeq",0x2244);  entity("nsmid",0x2224);  entity("nspar",0x2226);  entity("nsqsube",0x22E2);  entity("nsqsupe",0x22E3);  entity("nsub",0x2284);  entity("nsube",0x2288);  entity("nsubseteq",0x2288);  entity("nsucc",0x2281);  entity("nsup",0x2285);  entity("nsupe",0x2289);  entity("nsupseteq",0x2289);  entity("ntgl",0x2279);  entity("ntilde",0x00F1);  entity("Ntilde",0x00D1);  entity("ntlg",0x2278);  entity("ntriangleleft",0x22EA);  entity("ntrianglelefteq",0x22EC);  entity("ntriangleright",0x22EB);  entity("ntrianglerighteq",0x22ED);  entity("nu",0x03BD);  entity("Nu",0x039D);  entity("num",0x0023);  entity("numero",0x2116);  entity("numsp",0x2007);  entity("nvdash",0x22AC);  entity("nvDash",0x22AD);  entity("nVdash",0x22AE);  entity("nVDash",0x22AF);  entity("nvHarr",0x2904);  entity("nvinfin",0x29DE);  entity("nvlArr",0x2902);  entity("nvrArr",0x2903);  entity("nwarhk",0x2923);  entity("nwarr",0x2196);  entity("nwArr",0x21D6);  entity("nwarrow",0x2196);  entity("nwnear",0x2927);  entity("oacgr",0x03CC);  entity("Oacgr",0x038C);  entity("oacute",0x00F3);  entity("Oacute",0x00D3);  entity("oast",0x229B);  entity("ocir",0x229A);  entity("ocirc",0x00F4);  entity("Ocirc",0x00D4);  entity("ocy",0x043E);  entity("Ocy",0x041E);  entity("odash",0x229D);  entity("odblac",0x0151);  entity("Odblac",0x0150);  entity("odiv",0x2A38);  entity("odot",0x2299);  entity("odsold",0x29BC);  entity("oelig",0x0153);  entity("OElig",0x0152);  entity("ofcir",0x29BF);  entity("ofr",0x1D52C);  entity("Ofr",0x1D512);  entity("ogon",0x02DB);  entity("ogr",0x03BF);  entity("Ogr",0x039F);  entity("ograve",0x00F2);  entity("Ograve",0x00D2);  entity("ogt",0x29C1);  entity("ohacgr",0x03CE);  entity("OHacgr",0x038F);  entity("ohbar",0x29B5);  entity("ohgr",0x03C9);  entity("OHgr",0x03A9);  entity("ohm",0x2126);  entity("oint",0x222E);  entity("olarr",0x21BA);  entity("olcir",0x29BE);  entity("olcross",0x29BB);  entity("oline",0x203E);  entity("olt",0x29C0);  entity("omacr",0x014D);  entity("Omacr",0x014C);  entity("omega",0x03C9);  entity("Omega",0x03A9);  entity("omicron",0x03BF);  entity("Omicron",0x039F);  entity("omid",0x29B6);  entity("ominus",0x2296);  entity("oopf",0x1D560);  entity("Oopf",0x1D546);  entity("opar",0x29B7);  entity("OpenCurlyDoubleQuote",0x201C);  entity("OpenCurlyQuote",0x2018);  entity("operp",0x29B9);  entity("oplus",0x2295);  entity("or",0x2228);  entity("Or",0x2A54);  entity("orarr",0x21BB);  entity("ord",0x2A5D);  entity("order",0x2134);  entity("orderof",0x2134);  entity("ordf",0x00AA);  entity("ordm",0x00BA);  entity("origof",0x22B6);  entity("oror",0x2A56);  entity("orslope",0x2A57);  entity("orv",0x2A5B);  entity("oS",0x24C8);  entity("oscr",0x2134);  entity("Oscr",0x1D4AA);  entity("oslash",0x00F8);  entity("Oslash",0x00D8);  entity("osol",0x2298);  entity("otilde",0x00F5);  entity("Otilde",0x00D5);  entity("otimes",0x2297);  entity("Otimes",0x2A37);  entity("otimesas",0x2A36);  entity("ouml",0x00F6);  entity("Ouml",0x00D6);  entity("ovbar",0x233D);  entity("OverBar",0x00AF);  entity("OverBrace",0xFE37);  entity("OverBracket",0x23B4);  entity("OverParenthesis",0xFE35);  entity("par",0x2225);  entity("para",0x00B6);  entity("parallel",0x2225);  entity("parsim",0x2AF3);  entity("parsl",0x2AFD);  entity("part",0x2202);  entity("PartialD",0x2202);  entity("pcy",0x043F);  entity("Pcy",0x041F);  entity("percnt",0x0025);  entity("period",0x002E);  entity("permil",0x2030);  entity("perp",0x22A5);  entity("pertenk",0x2031);  entity("pfr",0x1D52D);  entity("Pfr",0x1D513);  entity("pgr",0x03C0);  entity("Pgr",0x03A0);  entity("phgr",0x03C6);  entity("PHgr",0x03A6);  entity("phi",0x03D5);  entity("Phi",0x03A6);  entity("phiv",0x03C6);  entity("phmmat",0x2133);  entity("phone",0x260E);  entity("pi",0x03C0);  entity("Pi",0x03A0);  entity("pitchfork",0x22D4);  entity("piv",0x03D6);  entity("planck",0x210F);  entity("planckh",0x210E);  entity("plankv",0x210F);  entity("plus",0x002B);  entity("plusacir",0x2A23);  entity("plusb",0x229E);  entity("pluscir",0x2A22);  entity("plusdo",0x2214);  entity("plusdu",0x2A25);  entity("pluse",0x2A72);  entity("PlusMinus",0x00B1);  entity("plusmn",0x00B1);  entity("plussim",0x2A26);  entity("plustwo",0x2A27);  entity("pm",0x00B1);  entity("Poincareplane",0x210C);  entity("pointint",0x2A15);  entity("popf",0x1D561);  entity("Popf",0x2119);  entity("pound",0x00A3);  entity("pr",0x227A);  entity("Pr",0x2ABB);  entity("prap",0x2AB7);  entity("prcue",0x227C);  entity("pre",0x2AAF);  entity("prE",0x2AB3);  entity("prec",0x227A);  entity("precapprox",0x2AB7);  entity("preccurlyeq",0x227C);  entity("Precedes",0x227A);  entity("PrecedesEqual",0x2AAF);  entity("PrecedesSlantEqual",0x227C);  entity("PrecedesTilde",0x227E);  entity("preceq",0x2AAF);  entity("precnapprox",0x2AB9);  entity("precneqq",0x2AB5);  entity("precnsim",0x22E8);  entity("precsim",0x227E);  entity("prime",0x2032);  entity("Prime",0x2033);  entity("primes",0x2119);  entity("prnap",0x2AB9);  entity("prnE",0x2AB5);  entity("prnsim",0x22E8);  entity("prod",0x220F);  entity("Product",0x220F);  entity("profalar",0x232E);  entity("profline",0x2312);  entity("profsurf",0x2313);  entity("prop",0x221D);  entity("Proportion",0x2237);  entity("Proportional",0x221D);  entity("propto",0x221D);  entity("prsim",0x227E);  entity("prurel",0x22B0);  entity("pscr",0x1D4C5);  entity("Pscr",0x1D4AB);  entity("psgr",0x03C8);  entity("PSgr",0x03A8);  entity("psi",0x03C8);  entity("Psi",0x03A8);  entity("puncsp",0x2008);  entity("qfr",0x1D52E);  entity("Qfr",0x1D514);  entity("qint",0x2A0C);  entity("qopf",0x1D562);  entity("Qopf",0x211A);  entity("qprime",0x2057);  entity("qscr",0x1D4C6);  entity("Qscr",0x1D4AC);  entity("quaternions",0x210D);  entity("quatint",0x2A16);  entity("quest",0x003F);  entity("questeq",0x225F);  entity("quot",0x0022);  entity("rAarr",0x21DB);  entity("race",0x29DA);  entity("racute",0x0155);  entity("Racute",0x0154);  entity("radic",0x221A);  entity("raemptyv",0x29B3);  entity("rang",0x232A);  entity("Rang",0x27EB);  entity("rangd",0x2992);  entity("range",0x29A5);  entity("rangle",0x232A);  entity("raquo",0x00BB);  entity("rarr",0x2192);  entity("rArr",0x21D2);  entity("Rarr",0x21A0);  entity("rarrap",0x2975);  entity("rarrb",0x21E5);  entity("rarrbfs",0x2920);  entity("rarrc",0x2933);  entity("rarrfs",0x291E);  entity("rarrhk",0x21AA);  entity("rarrlp",0x21AC);  entity("rarrpl",0x2945);  entity("rarrsim",0x2974);  entity("rarrtl",0x21A3);  entity("Rarrtl",0x2916);  entity("rarrw",0x219D);  entity("ratail",0x291A);  entity("rAtail",0x291C);  entity("ratio",0x2236);  entity("rationals",0x211A);  entity("rbarr",0x290D);  entity("rBarr",0x290F);  entity("RBarr",0x2910);  entity("rbbrk",0x2998);  entity("rbrace",0x007D);  entity("rbrack",0x005D);  entity("rbrke",0x298C);  entity("rbrksld",0x298E);  entity("rbrkslu",0x2990);  entity("rcaron",0x0159);  entity("Rcaron",0x0158);  entity("rcedil",0x0157);  entity("Rcedil",0x0156);  entity("rceil",0x2309);  entity("rcub",0x007D);  entity("rcy",0x0440);  entity("Rcy",0x0420);  entity("rdca",0x2937);  entity("rdldhar",0x2969);  entity("rdquo",0x201D);  entity("rdquor",0x201D);  entity("rdsh",0x21B3);  entity("Re",0x211C);  entity("real",0x211C);  entity("realine",0x211B);  entity("realpart",0x211C);  entity("reals",0x211D);  entity("rect",0x25AD);  entity("reg",0x00AE);  entity("ReverseElement",0x220B);  entity("ReverseEquilibrium",0x21CB);  entity("ReverseUpEquilibrium",0x296F);  entity("rfisht",0x297D);  entity("rfloor",0x230B);  entity("rfr",0x1D52F);  entity("Rfr",0x211C);  entity("rgr",0x03C1);  entity("Rgr",0x03A1);  entity("rHar",0x2964);  entity("rhard",0x21C1);  entity("rharu",0x21C0);  entity("rharul",0x296C);  entity("rho",0x03C1);  entity("Rho",0x03A1);  entity("rhov",0x03F1);  entity("RightAngleBracket",0x232A);  entity("rightarrow",0x2192);  entity("Rightarrow",0x21D2);  entity("RightArrowBar",0x21E5);  entity("RightArrowLeftArrow",0x21C4);  entity("rightarrowtail",0x21A3);  entity("RightCeiling",0x2309);  entity("RightDoubleBracket",0x27E7);  entity("RightDownTeeVector",0x295D);  entity("RightDownVector",0x21C2);  entity("RightDownVectorBar",0x2955);  entity("RightFloor",0x230B);  entity("rightharpoondown",0x21C1);  entity("rightharpoonup",0x21C0);  entity("rightleftarrows",0x21C4);  entity("rightleftharpoons",0x21CC);  entity("rightrightarrows",0x21C9);  entity("rightsquigarrow",0x219D);  entity("RightTee",0x22A2);  entity("RightTeeArrow",0x21A6);  entity("RightTeeVector",0x295B);  entity("rightthreetimes",0x22CC);  entity("RightTriangle",0x22B3);  entity("RightTriangleBar",0x29D0);  entity("RightTriangleEqual",0x22B5);  entity("RightUpDownVector",0x294F);  entity("RightUpTeeVector",0x295C);  entity("RightUpVector",0x21BE);  entity("RightUpVectorBar",0x2954);  entity("RightVector",0x21C0);  entity("RightVectorBar",0x2953);  entity("ring",0x02DA);  entity("risingdotseq",0x2253);  entity("rlarr",0x21C4);  entity("rlhar",0x21CC);  entity("rlm",0x200F);  entity("rmoust",0x23B1);  entity("rmoustache",0x23B1);  entity("rnmid",0x2AEE);  entity("roang",0x27ED);  entity("roarr",0x21FE);  entity("robrk",0x27E7);  entity("ropar",0x2986);  entity("ropf",0x1D563);  entity("Ropf",0x211D);  entity("roplus",0x2A2E);  entity("rotimes",0x2A35);  entity("RoundImplies",0x2970);  entity("rpar",0x0029);  entity("rpargt",0x2994);  entity("rppolint",0x2A12);  entity("rrarr",0x21C9);  entity("Rrightarrow",0x21DB);  entity("rsaquo",0x203A);  entity("rscr",0x1D4C7);  entity("Rscr",0x211B);  entity("rsh",0x21B1);  entity("rsqb",0x005D);  entity("rsquo",0x2019);  entity("rsquor",0x2019);  entity("rthree",0x22CC);  entity("rtimes",0x22CA);  entity("rtri",0x25B9);  entity("rtrie",0x22B5);  entity("rtrif",0x25B8);  entity("rtriltri",0x29CE);  entity("RuleDelayed",0x29F4);  entity("ruluhar",0x2968);  entity("rx",0x211E);  entity("sacute",0x015B);  entity("Sacute",0x015A);  entity("sbquo",0x201A);  entity("sc",0x227B);  entity("Sc",0x2ABC);  entity("scap",0x2AB8);  entity("scaron",0x0161);  entity("Scaron",0x0160);  entity("sccue",0x227D);  entity("sce",0x2AB0);  entity("scE",0x2AB4);  entity("scedil",0x015F);  entity("Scedil",0x015E);  entity("scirc",0x015D);  entity("Scirc",0x015C);  entity("scnap",0x2ABA);  entity("scnE",0x2AB6);  entity("scnsim",0x22E9);  entity("scpolint",0x2A13);  entity("scsim",0x227F);  entity("scy",0x0441);  entity("Scy",0x0421);  entity("sdot",0x22C5);  entity("sdotb",0x22A1);  entity("sdote",0x2A66);  entity("searhk",0x2925);  entity("searr",0x2198);  entity("seArr",0x21D8);  entity("searrow",0x2198);  entity("sect",0x00A7);  entity("semi",0x003B);  entity("seswar",0x2929);  entity("setminus",0x2216);  entity("setmn",0x2216);  entity("sext",0x2736);  entity("sfgr",0x03C2);  entity("sfr",0x1D530);  entity("Sfr",0x1D516);  entity("sfrown",0x2322);  entity("sgr",0x03C3);  entity("Sgr",0x03A3);  entity("sharp",0x266F);  entity("shchcy",0x0449);  entity("SHCHcy",0x0429);  entity("shcy",0x0448);  entity("SHcy",0x0428);  entity("ShortDownArrow",0x2193);  entity("ShortLeftArrow",0x2190);  entity("shortmid",0x2223);  entity("shortparallel",0x2225);  entity("ShortRightArrow",0x2192);  entity("ShortUpArrow",0x2191);  entity("shy",0x00AD);  entity("sigma",0x03C3);  entity("Sigma",0x03A3);  entity("sigmaf",0x03C2);  entity("sigmav",0x03C2);  entity("sim",0x223C);  entity("simdot",0x2A6A);  entity("sime",0x2243);  entity("simeq",0x2243);  entity("simg",0x2A9E);  entity("simgE",0x2AA0);  entity("siml",0x2A9D);  entity("simlE",0x2A9F);  entity("simne",0x2246);  entity("simplus",0x2A24);  entity("simrarr",0x2972);  entity("slarr",0x2190);  entity("SmallCircle",0x2218);  entity("smallsetminus",0x2216);  entity("smashp",0x2A33);  entity("smeparsl",0x29E4);  entity("smid",0x2223);  entity("smile",0x2323);  entity("smt",0x2AAA);  entity("smte",0x2AAC);  entity("softcy",0x044C);  entity("SOFTcy",0x042C);  entity("sol",0x002F);  entity("solb",0x29C4);  entity("solbar",0x233F);  entity("sopf",0x1D564);  entity("Sopf",0x1D54A);  entity("spades",0x2660);  entity("spadesuit",0x2660);  entity("spar",0x2225);  entity("sqcap",0x2293);  entity("sqcup",0x2294);  entity("Sqrt",0x221A);  entity("sqsub",0x228F);  entity("sqsube",0x2291);  entity("sqsubset",0x228F);  entity("sqsubseteq",0x2291);  entity("sqsup",0x2290);  entity("sqsupe",0x2292);  entity("sqsupset",0x2290);  entity("sqsupseteq",0x2292);  entity("squ",0x25A1);  entity("square",0x25A1);  entity("SquareIntersection",0x2293);  entity("SquareSubset",0x228F);  entity("SquareSubsetEqual",0x2291);  entity("SquareSuperset",0x2290);  entity("SquareSupersetEqual",0x2292);  entity("SquareUnion",0x2294);  entity("squarf",0x25AA);  entity("squf",0x25AA);  entity("srarr",0x2192);  entity("sscr",0x1D4C8);  entity("Sscr",0x1D4AE);  entity("ssetmn",0x2216);  entity("ssmile",0x2323);  entity("sstarf",0x22C6);  entity("star",0x2606);  entity("Star",0x22C6);  entity("starf",0x2605);  entity("straightepsilon",0x03F5);  entity("straightphi",0x03D5);  entity("strns",0x00AF);  entity("sub",0x2282);  entity("Sub",0x22D0);  entity("subdot",0x2ABD);  entity("sube",0x2286);  entity("subE",0x2AC5);  entity("subedot",0x2AC3);  entity("submult",0x2AC1);  entity("subne",0x228A);  entity("subnE",0x2ACB);  entity("subplus",0x2ABF);  entity("subrarr",0x2979);  entity("subset",0x2282);  entity("Subset",0x22D0);  entity("subseteq",0x2286);  entity("subseteqq",0x2AC5);  entity("SubsetEqual",0x2286);  entity("subsetneq",0x228A);  entity("subsetneqq",0x2ACB);  entity("subsim",0x2AC7);  entity("subsub",0x2AD5);  entity("subsup",0x2AD3);  entity("succ",0x227B);  entity("succapprox",0x2AB8);  entity("succcurlyeq",0x227D);  entity("Succeeds",0x227B);  entity("SucceedsEqual",0x2AB0);  entity("SucceedsSlantEqual",0x227D);  entity("SucceedsTilde",0x227F);  entity("succeq",0x2AB0);  entity("succnapprox",0x2ABA);  entity("succneqq",0x2AB6);  entity("succnsim",0x22E9);  entity("succsim",0x227F);  entity("SuchThat",0x220B);  entity("sum",0x2211);  entity("sung",0x266A);  entity("sup",0x2283);  entity("Sup",0x22D1);  entity("sup1",0x00B9);  entity("sup2",0x00B2);  entity("sup3",0x00B3);  entity("supdot",0x2ABE);  entity("supdsub",0x2AD8);  entity("supe",0x2287);  entity("supE",0x2AC6);  entity("supedot",0x2AC4);  entity("Superset",0x2283);  entity("SupersetEqual",0x2287);  entity("suphsub",0x2AD7);  entity("suplarr",0x297B);  entity("supmult",0x2AC2);  entity("supne",0x228B);  entity("supnE",0x2ACC);  entity("supplus",0x2AC0);  entity("supset",0x2283);  entity("Supset",0x22D1);  entity("supseteq",0x2287);  entity("supseteqq",0x2AC6);  entity("supsetneq",0x228B);  entity("supsetneqq",0x2ACC);  entity("supsim",0x2AC8);  entity("supsub",0x2AD4);  entity("supsup",0x2AD6);  entity("swarhk",0x2926);  entity("swarr",0x2199);  entity("swArr",0x21D9);  entity("swarrow",0x2199);  entity("swnwar",0x292A);  entity("szlig",0x00DF);  entity("Tab",0x0009);  entity("target",0x2316);  entity("tau",0x03C4);  entity("Tau",0x03A4);  entity("tbrk",0x23B4);  entity("tcaron",0x0165);  entity("Tcaron",0x0164);  entity("tcedil",0x0163);  entity("Tcedil",0x0162);  entity("tcy",0x0442);  entity("Tcy",0x0422);  entity("telrec",0x2315);  entity("tfr",0x1D531);  entity("Tfr",0x1D517);  entity("tgr",0x03C4);  entity("Tgr",0x03A4);  entity("there4",0x2234);  entity("therefore",0x2234);  entity("theta",0x03B8);  entity("Theta",0x0398);  entity("thetasym",0x03D1);  entity("thetav",0x03D1);  entity("thgr",0x03B8);  entity("THgr",0x0398);  entity("thickapprox",0x2248);  entity("thicksim",0x223C);  entity("thinsp",0x2009);  entity("ThinSpace",0x2009);  entity("thkap",0x2248);  entity("thksim",0x223C);  entity("thorn",0x00FE);  entity("THORN",0x00DE);  entity("tilde",0x02DC);  entity("Tilde",0x223C);  entity("TildeEqual",0x2243);  entity("TildeFullEqual",0x2245);  entity("TildeTilde",0x2248);  entity("times",0x00D7);  entity("timesb",0x22A0);  entity("timesbar",0x2A31);  entity("timesd",0x2A30);  entity("tint",0x222D);  entity("toea",0x2928);  entity("top",0x22A4);  entity("topbot",0x2336);  entity("topcir",0x2AF1);  entity("topf",0x1D565);  entity("Topf",0x1D54B);  entity("topfork",0x2ADA);  entity("tosa",0x2929);  entity("tprime",0x2034);  entity("trade",0x2122);  entity("triangle",0x25B5);  entity("triangledown",0x25BF);  entity("triangleleft",0x25C3);  entity("trianglelefteq",0x22B4);  entity("triangleq",0x225C);  entity("triangleright",0x25B9);  entity("trianglerighteq",0x22B5);  entity("tridot",0x25EC);  entity("trie",0x225C);  entity("triminus",0x2A3A);  entity("triplus",0x2A39);  entity("trisb",0x29CD);  entity("tritime",0x2A3B);  entity("trpezium",0x23E2);  entity("tscr",0x1D4C9);  entity("Tscr",0x1D4AF);  entity("tscy",0x0446);  entity("TScy",0x0426);  entity("tshcy",0x045B);  entity("TSHcy",0x040B);  entity("tstrok",0x0167);  entity("Tstrok",0x0166);  entity("twixt",0x226C);  entity("twoheadleftarrow",0x219E);  entity("twoheadrightarrow",0x21A0);  entity("uacgr",0x03CD);  entity("Uacgr",0x038E);  entity("uacute",0x00FA);  entity("Uacute",0x00DA);  entity("uarr",0x2191);  entity("uArr",0x21D1);  entity("Uarr",0x219F);  entity("Uarrocir",0x2949);  entity("ubrcy",0x045E);  entity("Ubrcy",0x040E);  entity("ubreve",0x016D);  entity("Ubreve",0x016C);  entity("ucirc",0x00FB);  entity("Ucirc",0x00DB);  entity("ucy",0x0443);  entity("Ucy",0x0423);  entity("udarr",0x21C5);  entity("udblac",0x0171);  entity("Udblac",0x0170);  entity("udhar",0x296E);  entity("udiagr",0x03B0);  entity("udigr",0x03CB);  entity("Udigr",0x03AB);  entity("ufisht",0x297E);  entity("ufr",0x1D532);  entity("Ufr",0x1D518);  entity("ugr",0x03C5);  entity("Ugr",0x03A5);  entity("ugrave",0x00F9);  entity("Ugrave",0x00D9);  entity("uHar",0x2963);  entity("uharl",0x21BF);  entity("uharr",0x21BE);  entity("uhblk",0x2580);  entity("ulcorn",0x231C);  entity("ulcorner",0x231C);  entity("ulcrop",0x230F);  entity("ultri",0x25F8);  entity("umacr",0x016B);  entity("Umacr",0x016A);  entity("uml",0x00A8);  entity("UnderBrace",0xFE38);  entity("UnderBracket",0x23B5);  entity("UnderParenthesis",0xFE36);  entity("Union",0x22C3);  entity("UnionPlus",0x228E);  entity("uogon",0x0173);  entity("Uogon",0x0172);  entity("uopf",0x1D566);  entity("Uopf",0x1D54C);  entity("uparrow",0x2191);  entity("Uparrow",0x21D1);  entity("UpArrowBar",0x2912);  entity("UpArrowDownArrow",0x21C5);  entity("updownarrow",0x2195);  entity("Updownarrow",0x21D5);  entity("UpEquilibrium",0x296E);  entity("upharpoonleft",0x21BF);  entity("upharpoonright",0x21BE);  entity("uplus",0x228E);  entity("UpperLeftArrow",0x2196);  entity("UpperRightArrow",0x2197);  entity("upsi",0x03C5);  entity("Upsi",0x03D2);  entity("upsih",0x03D2);  entity("upsilon",0x03C5);  entity("Upsilon",0x03A5);  entity("UpTee",0x22A5);  entity("UpTeeArrow",0x21A5);  entity("upuparrows",0x21C8);  entity("urcorn",0x231D);  entity("urcorner",0x231D);  entity("urcrop",0x230E);  entity("uring",0x016F);  entity("Uring",0x016E);  entity("urtri",0x25F9);  entity("uscr",0x1D4CA);  entity("Uscr",0x1D4B0);  entity("utdot",0x22F0);  entity("utilde",0x0169);  entity("Utilde",0x0168);  entity("utri",0x25B5);  entity("utrif",0x25B4);  entity("uuarr",0x21C8);  entity("uuml",0x00FC);  entity("Uuml",0x00DC);  entity("uwangle",0x29A7);  entity("vangrt",0x299C);  entity("varepsilon",0x03B5);  entity("varkappa",0x03F0);  entity("varnothing",0x2205);  entity("varphi",0x03C6);  entity("varpi",0x03D6);  entity("varpropto",0x221D);  entity("varr",0x2195);  entity("vArr",0x21D5);  entity("varrho",0x03F1);  entity("varsigma",0x03C2);  entity("vartheta",0x03D1);  entity("vartriangleleft",0x22B2);  entity("vartriangleright",0x22B3);  entity("vBar",0x2AE8);  entity("Vbar",0x2AEB);  entity("vBarv",0x2AE9);  entity("vcy",0x0432);  entity("Vcy",0x0412);  entity("vdash",0x22A2);  entity("vDash",0x22A8);  entity("Vdash",0x22A9);  entity("VDash",0x22AB);  entity("Vdashl",0x2AE6);  entity("vee",0x2228);  entity("Vee",0x22C1);  entity("veebar",0x22BB);  entity("veeeq",0x225A);  entity("vellip",0x22EE);  entity("verbar",0x007C);  entity("Verbar",0x2016);  entity("vert",0x007C);  entity("Vert",0x2016);  entity("VerticalBar",0x2223);  entity("VerticalLine",0x007C);  entity("VerticalSeparator",0x2758);  entity("VerticalTilde",0x2240);  entity("VeryThinSpace",0x200A);  entity("vfr",0x1D533);  entity("Vfr",0x1D519);  entity("vltri",0x22B2);  entity("vopf",0x1D567);  entity("Vopf",0x1D54D);  entity("vprop",0x221D);  entity("vrtri",0x22B3);  entity("vscr",0x1D4CB);  entity("Vscr",0x1D4B1);  entity("Vvdash",0x22AA);  entity("vzigzag",0x299A);  entity("wcirc",0x0175);  entity("Wcirc",0x0174);  entity("wedbar",0x2A5F);  entity("wedge",0x2227);  entity("Wedge",0x22C0);  entity("wedgeq",0x2259);  entity("weierp",0x2118);  entity("wfr",0x1D534);  entity("Wfr",0x1D51A);  entity("wopf",0x1D568);  entity("Wopf",0x1D54E);  entity("wp",0x2118);  entity("wr",0x2240);  entity("wreath",0x2240);  entity("wscr",0x1D4CC);  entity("Wscr",0x1D4B2);  entity("xcap",0x22C2);  entity("xcirc",0x25EF);  entity("xcup",0x22C3);  entity("xdtri",0x25BD);  entity("xfr",0x1D535);  entity("Xfr",0x1D51B);  entity("xgr",0x03BE);  entity("Xgr",0x039E);  entity("xharr",0x27F7);  entity("xhArr",0x27FA);  entity("xi",0x03BE);  entity("Xi",0x039E);  entity("xlarr",0x27F5);  entity("xlArr",0x27F8);  entity("xmap",0x27FC);  entity("xnis",0x22FB);  entity("xodot",0x2A00);  entity("xopf",0x1D569);  entity("Xopf",0x1D54F);  entity("xoplus",0x2A01);  entity("xotime",0x2A02);  entity("xrarr",0x27F6);  entity("xrArr",0x27F9);  entity("xscr",0x1D4CD);  entity("Xscr",0x1D4B3);  entity("xsqcup",0x2A06);  entity("xuplus",0x2A04);  entity("xutri",0x25B3);  entity("xvee",0x22C1);  entity("xwedge",0x22C0);  entity("yacute",0x00FD);  entity("Yacute",0x00DD);  entity("yacy",0x044F);  entity("YAcy",0x042F);  entity("ycirc",0x0177);  entity("Ycirc",0x0176);  entity("ycy",0x044B);  entity("Ycy",0x042B);  entity("yen",0x00A5);  entity("yfr",0x1D536);  entity("Yfr",0x1D51C);  entity("yicy",0x0457);  entity("YIcy",0x0407);  entity("yopf",0x1D56A);  entity("Yopf",0x1D550);  entity("yscr",0x1D4CE);  entity("Yscr",0x1D4B4);  entity("yucy",0x044E);  entity("YUcy",0x042E);  entity("yuml",0x00FF);  entity("Yuml",0x0178);  entity("zacute",0x017A);  entity("Zacute",0x0179);  entity("zcaron",0x017E);  entity("Zcaron",0x017D);  entity("zcy",0x0437);  entity("Zcy",0x0417);  entity("zdot",0x017C);  entity("Zdot",0x017B);  entity("zeetrf",0x2128);  entity("ZeroWidthSpace",0x200B);  entity("zeta",0x03B6);  entity("Zeta",0x0396);  entity("zfr",0x1D537);  entity("Zfr",0x2128);  entity("zgr",0x03B6);  entity("Zgr",0x0396);  entity("zhcy",0x0436);  entity("ZHcy",0x0416);  entity("zigrarr",0x21DD);  entity("zopf",0x1D56B);  entity("Zopf",0x2124);  entity("zscr",0x1D4CF);  entity("Zscr",0x1D4B5);  entity("zwj",0x200D);  entity("zwnj",0x200C);}  }
class C{  private SaveAction(){  super("Save");}  }
class C{  public int length(){  return namesAndValues.size() / 2;}  }
class C{  public CGAffineTransform(float m00,float m10,float m01,float m11,float m02,float m12){  this.type=TYPE_UNKNOWN;  this.m00=m00;  this.m10=m10;  this.m01=m01;  this.m11=m11;  this.m02=m02;  this.m12=m12;}  }
class C{  public boolean isNegative(){  return hi < 0.0 || (hi == 0.0 && lo < 0.0);}  }
class C{  public int length(){  return this.map.size();}  }
class C{  public JTicker(){  this(new DefaultTickerModel());}  }
class C{  @SuppressWarnings("unchecked") private void notifyThresholdListeners(ThresholdDataEvent re){  Vector<ThresholdDataListener> l;synchronized (this) {    l=(Vector<ThresholdDataListener>)m_thresholdListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptDataSet(re);    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Boolean isConnected(){  return connected;}  }
class C{  public DTMConfigurationException(String message,SourceLocator locator,Throwable e){  super(message,locator,e);}  }
class C{  public final BufferedImage create_LED_Image(final int SIZE,final int STATE,final LedColor LED_COLOR,final LedType LED_TYPE){  if (SIZE <= 0) {    return UTIL.createImage(1,1,Transparency.TRANSLUCENT);  }  final StringBuilder KEY=new StringBuilder(32);  KEY.append(Integer.toString(SIZE));  KEY.append("_");  KEY.append(Integer.toString(STATE));  KEY.append("_");  KEY.append(LED_COLOR);  KEY.append("_");  KEY.append(LED_TYPE);  if (LED_COLOR == LedColor.CUSTOM) {    StringBuilder sb=new StringBuilder();    sb.append("#");    final String RED_HEX=Integer.toHexString(customLedColor.COLOR.getRed());    final String BLUE_HEX=Integer.toHexString(customLedColor.COLOR.getBlue());    final String GREEN_HEX=Integer.toHexString(customLedColor.COLOR.getGreen());    if (RED_HEX.length() == 1) {      sb.append("0");    }    sb.append(RED_HEX);    if (GREEN_HEX.length() == 1) {      sb.append("0");    }    sb.append(GREEN_HEX);    if (BLUE_HEX.length() == 1) {      sb.append("0");    }    sb.append(BLUE_HEX);    if (customLedColor.COLOR.getAlpha() != 255) {      final String ALPHA_HEX=Integer.toHexString(customLedColor.COLOR.getAlpha());      if (ALPHA_HEX.length() == 1) {        sb.append("0");      }      sb.append(ALPHA_HEX);    }    KEY.append("_").append(sb.toString());  }  if (CACHE.containsKey(KEY.toString())) {    return CACHE.get(KEY.toString());  }  final BufferedImage IMAGE=UTIL.createImage(SIZE,SIZE,Transparency.TRANSLUCENT);  final Graphics2D G2=IMAGE.createGraphics();  G2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  final int IMAGE_WIDTH=IMAGE.getWidth();  final int IMAGE_HEIGHT=IMAGE.getHeight();  final java.awt.Shape LED;switch (LED_TYPE) {case RECT_VERTICAL:    LED=new Rectangle2D.Double(IMAGE_WIDTH * 0.3421052632,IMAGE_HEIGHT * 0.1052631579,IMAGE_WIDTH * 0.3157894737,IMAGE_HEIGHT * 0.7894736842);  break;case RECT_HORIZONTAL:LED=new Rectangle2D.Double(IMAGE_WIDTH * 0.1052631579,IMAGE_HEIGHT * 0.3421052632,IMAGE_WIDTH * 0.7894736842,IMAGE_HEIGHT * 0.3157894737);break;case ROUND:default :LED=new Ellipse2D.Double(0.25 * IMAGE_WIDTH,0.25 * IMAGE_HEIGHT,0.5 * IMAGE_WIDTH,0.5 * IMAGE_HEIGHT);break;}final Ellipse2D LED_CORONA=new Ellipse2D.Double(0,0,IMAGE_WIDTH,IMAGE_HEIGHT);final Point2D LED_CENTER=new Point2D.Double(LED.getBounds2D().getCenterX(),LED.getBounds2D().getCenterY());final float[] LED_FRACTIONS={0.0f,0.2f,1.0f};final Color[] LED_OFF_COLORS;final Color[] LED_ON_COLORS;final Color[] LED_ON_CORONA_COLORS;if (LED_COLOR != LedColor.CUSTOM) {LED_OFF_COLORS=new Color[]{LED_COLOR.INNER_COLOR1_OFF,LED_COLOR.INNER_COLOR2_OFF,LED_COLOR.OUTER_COLOR_OFF};LED_ON_COLORS=new Color[]{LED_COLOR.INNER_COLOR1_ON,LED_COLOR.INNER_COLOR2_ON,LED_COLOR.OUTER_COLOR_ON};LED_ON_CORONA_COLORS=new Color[]{UTIL.setAlpha(LED_COLOR.CORONA_COLOR,0.4f),UTIL.setAlpha(LED_COLOR.CORONA_COLOR,0.4f),UTIL.setAlpha(LED_COLOR.CORONA_COLOR,0.25f),UTIL.setAlpha(LED_COLOR.CORONA_COLOR,0.15f),UTIL.setAlpha(LED_COLOR.CORONA_COLOR,0.05f),UTIL.setAlpha(LED_COLOR.CORONA_COLOR,0.0f)};} else {LED_OFF_COLORS=new Color[]{customLedColor.INNER_COLOR1_OFF,customLedColor.INNER_COLOR2_OFF,customLedColor.OUTER_COLOR_OFF};LED_ON_COLORS=new Color[]{customLedColor.INNER_COLOR1_ON,customLedColor.INNER_COLOR2_ON,customLedColor.OUTER_COLOR_ON};LED_ON_CORONA_COLORS=new Color[]{UTIL.setAlpha(customLedColor.CORONA_COLOR,0.4f),UTIL.setAlpha(customLedColor.CORONA_COLOR,0.4f),UTIL.setAlpha(customLedColor.CORONA_COLOR,0.25f),UTIL.setAlpha(customLedColor.CORONA_COLOR,0.15f),UTIL.setAlpha(customLedColor.CORONA_COLOR,0.05f),UTIL.setAlpha(customLedColor.CORONA_COLOR,0.0f)};}final float[] LED_INNER_SHADOW_FRACTIONS={0.0f,0.8f,1.0f};final Color[] LED_INNER_SHADOW_COLORS={new Color(0.0f,0.0f,0.0f,0.0f),new Color(0.0f,0.0f,0.0f,0.0f),new Color(0.0f,0.0f,0.0f,0.4f)};final float[] LED_ON_CORONA_FRACTIONS={0.0f,0.6f,0.7f,0.8f,0.85f,1.0f};final RadialGradientPaint LED_OFF_GRADIENT=new RadialGradientPaint(LED_CENTER,0.25f * IMAGE_WIDTH,LED_FRACTIONS,LED_OFF_COLORS);final RadialGradientPaint LED_ON_GRADIENT=new RadialGradientPaint(LED_CENTER,0.25f * IMAGE_WIDTH,LED_FRACTIONS,LED_ON_COLORS);final RadialGradientPaint LED_INNER_SHADOW_GRADIENT=new RadialGradientPaint(LED_CENTER,0.25f * IMAGE_WIDTH,LED_INNER_SHADOW_FRACTIONS,LED_INNER_SHADOW_COLORS);final RadialGradientPaint LED_ON_CORONA_GRADIENT=new RadialGradientPaint(LED_CENTER,0.5f * IMAGE_WIDTH,LED_ON_CORONA_FRACTIONS,LED_ON_CORONA_COLORS);final java.awt.Shape LED_LIGHTREFLEX;final Point2D LED_LIGHTREFLEX_START;final Point2D LED_LIGHTREFLEX_STOP;switch (LED_TYPE) {case RECT_VERTICAL:final GeneralPath VERTICAL_HL=new GeneralPath();VERTICAL_HL.setWindingRule(Path2D.WIND_EVEN_ODD);VERTICAL_HL.moveTo(IMAGE_WIDTH * 0.34210526315789475,IMAGE_HEIGHT * 0.10526315789473684);VERTICAL_HL.lineTo(IMAGE_WIDTH * 0.6578947368421053,IMAGE_HEIGHT * 0.10526315789473684);VERTICAL_HL.lineTo(IMAGE_WIDTH * 0.6578947368421053,IMAGE_HEIGHT * 0.3684210526315789);VERTICAL_HL.curveTo(IMAGE_WIDTH * 0.6578947368421053,IMAGE_HEIGHT * 0.3684210526315789,IMAGE_WIDTH * 0.631578947368421,IMAGE_HEIGHT * 0.42105263157894735,IMAGE_WIDTH * 0.5,IMAGE_HEIGHT * 0.42105263157894735);VERTICAL_HL.curveTo(IMAGE_WIDTH * 0.3684210526315789,IMAGE_HEIGHT * 0.42105263157894735,IMAGE_WIDTH * 0.34210526315789475,IMAGE_HEIGHT * 0.3684210526315789,IMAGE_WIDTH * 0.34210526315789475,IMAGE_HEIGHT * 0.3684210526315789);VERTICAL_HL.lineTo(IMAGE_WIDTH * 0.34210526315789475,IMAGE_HEIGHT * 0.10526315789473684);VERTICAL_HL.closePath();LED_LIGHTREFLEX=VERTICAL_HL;LED_LIGHTREFLEX_START=new Point2D.Double(0,VERTICAL_HL.getBounds2D().getMinY());LED_LIGHTREFLEX_STOP=new Point2D.Double(0,VERTICAL_HL.getBounds2D().getMaxY());break;case RECT_HORIZONTAL:final GeneralPath HORIZONTAL_HL=new GeneralPath();HORIZONTAL_HL.setWindingRule(Path2D.WIND_EVEN_ODD);HORIZONTAL_HL.moveTo(IMAGE_WIDTH * 0.10526315789473684,IMAGE_HEIGHT * 0.34210526315789475);HORIZONTAL_HL.lineTo(IMAGE_WIDTH * 0.8947368421052632,IMAGE_HEIGHT * 0.34210526315789475);HORIZONTAL_HL.lineTo(IMAGE_WIDTH * 0.8947368421052632,IMAGE_HEIGHT * 0.42105263157894735);HORIZONTAL_HL.curveTo(IMAGE_WIDTH * 0.8947368421052632,IMAGE_HEIGHT * 0.42105263157894735,IMAGE_WIDTH * 0.7894736842105263,IMAGE_HEIGHT * 0.5,IMAGE_WIDTH * 0.5,IMAGE_HEIGHT * 0.5);HORIZONTAL_HL.curveTo(IMAGE_WIDTH * 0.21052631578947367,IMAGE_HEIGHT * 0.5,IMAGE_WIDTH * 0.10526315789473684,IMAGE_HEIGHT * 0.42105263157894735,IMAGE_WIDTH * 0.10526315789473684,IMAGE_HEIGHT * 0.42105263157894735);HORIZONTAL_HL.lineTo(IMAGE_WIDTH * 0.10526315789473684,IMAGE_HEIGHT * 0.34210526315789475);HORIZONTAL_HL.closePath();LED_LIGHTREFLEX=HORIZONTAL_HL;LED_LIGHTREFLEX_START=new Point2D.Double(0,LED_LIGHTREFLEX.getBounds2D().getMinY());LED_LIGHTREFLEX_STOP=new Point2D.Double(0,LED_LIGHTREFLEX.getBounds2D().getMaxY());break;case ROUND:default :LED_LIGHTREFLEX=new Ellipse2D.Double(0.4 * IMAGE_WIDTH,0.35 * IMAGE_WIDTH,0.2 * IMAGE_WIDTH,0.15 * IMAGE_WIDTH);LED_LIGHTREFLEX_START=new Point2D.Double(0,LED_LIGHTREFLEX.getBounds2D().getMinY());LED_LIGHTREFLEX_STOP=new Point2D.Double(0,LED_LIGHTREFLEX.getBounds2D().getMaxY());break;}final float[] LIGHT_REFLEX_FRACTIONS={0.0f,1.0f};final Color[] LIGHTREFLEX_COLORS={new Color(1.0f,1.0f,1.0f,0.4f),new Color(1.0f,1.0f,1.0f,0.0f)};final LinearGradientPaint LED_LIGHTREFLEX_GRADIENT=new LinearGradientPaint(LED_LIGHTREFLEX_START,LED_LIGHTREFLEX_STOP,LIGHT_REFLEX_FRACTIONS,LIGHTREFLEX_COLORS);switch (STATE) {case 1:G2.setPaint(LED_ON_CORONA_GRADIENT);G2.fill(LED_CORONA);switch (LED_TYPE) {case ROUND:G2.setPaint(LED_ON_GRADIENT);G2.fill(LED);G2.setPaint(LED_INNER_SHADOW_GRADIENT);G2.fill(LED);break;case RECT_VERTICAL:G2.drawImage(Shadow.INSTANCE.createInnerShadow(LED,LED_ON_GRADIENT,0,0.65f,Color.BLACK,20,315),(int)(IMAGE_WIDTH * 0.3421052632),(int)(IMAGE_HEIGHT * 0.1052631579),null);break;case RECT_HORIZONTAL:G2.drawImage(Shadow.INSTANCE.createInnerShadow(LED,LED_ON_GRADIENT,0,0.65f,Color.BLACK,20,315),(int)(IMAGE_WIDTH * 0.1052631579),(int)(IMAGE_HEIGHT * 0.3421052632),null);break;}G2.setPaint(LED_LIGHTREFLEX_GRADIENT);G2.fill(LED_LIGHTREFLEX);break;case 0:default :switch (LED_TYPE) {case ROUND:G2.setPaint(LED_OFF_GRADIENT);G2.fill(LED);G2.setPaint(LED_INNER_SHADOW_GRADIENT);G2.fill(LED);break;case RECT_VERTICAL:G2.drawImage(Shadow.INSTANCE.createInnerShadow(LED,LED_OFF_GRADIENT,0,0.65f,Color.BLACK,20,315),(int)(IMAGE_WIDTH * 0.3421052632),(int)(IMAGE_HEIGHT * 0.1052631579),null);break;case RECT_HORIZONTAL:G2.drawImage(Shadow.INSTANCE.createInnerShadow(LED,LED_OFF_GRADIENT,0,0.65f,Color.BLACK,20,315),(int)(IMAGE_WIDTH * 0.1052631579),(int)(IMAGE_HEIGHT * 0.3421052632),null);break;}G2.setPaint(LED_LIGHTREFLEX_GRADIENT);G2.fill(LED_LIGHTREFLEX);break;}G2.dispose();CACHE.put(KEY.toString(),IMAGE);return IMAGE;}  }
class C{  public boolean load(String path){  try {    load(new FileInputStream(path));    return true;  } catch (  Exception e) {    logger.warning("error opening config file: " + path);    return false;  }}  }
class C{  public static AboutMeFragment newInstance(String param1,String param2){  AboutMeFragment fragment=new AboutMeFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public JSONArray put(int value){  this.put(new Integer(value));  return this;}  }
class C{  private void createDistributedSystem() throws Exception {  Properties dsProps=new Properties();  if (System.getProperty(DistributionConfig.GEMFIRE_PREFIX + MCAST_PORT) == null && System.getProperty(DistributionConfig.GEMFIRE_PREFIX + LOCATORS) == null) {    dsProps.put(MCAST_PORT,"0");  }  dsProps.put(LOG_FILE,"migrationClient.log");  if (this.cacheXmlFile != null) {    dsProps.put(CACHE_XML_FILE,this.cacheXmlFile.getName());  }  this.distributedSystem=DistributedSystem.connect(dsProps);}  }
class C{  public static Double dijkstra(final HGHandle start,final HGHandle goal,final HGALGenerator adjencyGenerator){  return dijkstra(start,goal,adjencyGenerator,null,null,null);}  }
class C{  public static String formatAbsBytes(long bytes){  return formatBytes(bytes,true);}  }
class C{  public HttpJsonPostRequest(final SerializableEntity entity){  this(JsonSerializer.serializeToJson(entity));}  }
class C{  public void encode(DerOutputStream out) throws IOException {  if (isEmpty()) {    return;  }  DerOutputStream temp=new DerOutputStream();  for (  GeneralName gn : names) {    gn.encode(temp);  }  out.write(DerValue.tag_Sequence,temp);}  }
class C{  static String[] appendToStringArray(String[] array,String str){  String[] result=new String[array.length];  for (int i=0; i < result.length; i++) {    result[i]=array[i];  }  result[result.length - 1]=array[result.length - 1] + str;  return result;}  }
class C{  protected static void checkArguments(final AbstractSQLProvider provider,final INaviModule module){  Preconditions.checkNotNull(provider,"IE00488: Provider argument can not be null");  Preconditions.checkNotNull(module,"IE00489: Module argument can not be null");  Preconditions.checkArgument(module.inSameDatabase(provider),"IE00490: Module is not part of this database");}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return ID;case 2:  return CREATE_TIME;case 3:return UPDATE_TIME;case 4:return OPERATION;case 5:return STATUS;case 6:return SRC_PATH;case 7:return SRC_CLUSTER;case 8:return SRC_DB;case 9:return SRC_TABLE;case 10:return SRC_PARTITIONS;case 11:return SRC_MODIFIED_TIME;case 12:return RENAME_TO_DB;case 13:return RENAME_TO_TABLE;case 14:return RENAME_TO_PATH;case 15:return EXTRAS;case 16:return WAITING_ON_JOBS;default :return null;}}  }
class C{  public static String collapseWhiteSpace(String s){  StringBuilder sb=new StringBuilder(s.length());  StringTokenizer st=new StringTokenizer(s,"\t\r\n ");  if (st.hasMoreTokens()) {    sb.append(st.nextToken());  }  while (st.hasMoreTokens()) {    sb.append(' ').append(st.nextToken());  }  return sb.toString();}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTraceRecord_();}  }
class C{  public String codenvyJsonFileLocation(){  return this.codenvyJsonFileLocation;}  }
class C{  private int calculateTop(View child,boolean duringLayout){  int myHeight=duringLayout ? getMeasuredHeight() : getHeight();  int childHeight=duringLayout ? child.getMeasuredHeight() : child.getHeight();  int childTop=0;switch (mGravity) {case Gravity.TOP:    childTop=mSpinnerPadding.top;  break;case Gravity.CENTER_VERTICAL:int availableSpace=myHeight - mSpinnerPadding.bottom - mSpinnerPadding.top- childHeight;childTop=mSpinnerPadding.top + (availableSpace / 2);break;case Gravity.BOTTOM:childTop=myHeight - mSpinnerPadding.bottom - childHeight;break;}return childTop / 2;}  }
class C{  private String createBoundary(){  return "--------------------" + Long.toString(System.currentTimeMillis(),16);}  }
class C{  public void update(HashMap<String,MCAModelRenderer> parts,IMCAnimatedEntity entity){}  }
class C{  public OutputCollector(DexOptions dexOptions,int initialCapacity,int suffixInitialCapacity,int regCount){  this.finisher=new OutputFinisher(dexOptions,initialCapacity,regCount);  this.suffix=new ArrayList<DalvInsn>(suffixInitialCapacity);}  }
class C{  @SuppressWarnings("ForLoopReplaceableByForEach") private List<GridDhtCacheEntry> lockEntries(List<KeyCacheObject> keys,AffinityTopologyVersion topVer) throws GridDhtInvalidPartitionException {  if (keys.size() == 1) {    KeyCacheObject key=keys.get(0);    while (true) {      try {        GridDhtCacheEntry entry=entryExx(key,topVer);        GridUnsafe.monitorEnter(entry);        if (entry.obsolete())         GridUnsafe.monitorExit(entry); else         return Collections.singletonList(entry);      } catch (      GridDhtInvalidPartitionException e) {        if (ctx.config().getAtomicWriteOrderMode() == CLOCK)         return Collections.singletonList(null); else         throw e;      }    }  } else {    List<GridDhtCacheEntry> locked=new ArrayList<>(keys.size());    while (true) {      for (      KeyCacheObject key : keys) {        try {          GridDhtCacheEntry entry=entryExx(key,topVer);          locked.add(entry);        } catch (        GridDhtInvalidPartitionException e) {          if (ctx.config().getAtomicWriteOrderMode() == CLOCK)           locked.add(null); else           throw e;        }      }      boolean retry=false;      for (int i=0; i < locked.size(); i++) {        GridCacheMapEntry entry=locked.get(i);        if (entry == null)         continue;        GridUnsafe.monitorEnter(entry);        if (entry.obsolete()) {          for (int j=0; j <= i; j++) {            if (locked.get(j) != null)             GridUnsafe.monitorExit(locked.get(j));          }          locked.clear();          retry=true;          break;        }      }      if (!retry)       return locked;    }  }}  }
class C{  public void testGetName(){  String expectedReturn="UNKNOWN-ATTRIBUTES";  String actualReturn=unknownAttributesAttribute.getName();  assertEquals("getName() return",expectedReturn,actualReturn);}  }
class C{  public QueueProcessor(@NotNull Consumer<T> processor,@NotNull Condition<?> deathCondition){  this(processor,deathCondition,true);}  }
class C{  public EnumOption(Enum value,String namePrefix){  this.id=value.name();  name=getDisplayValue(id,StringUtils.defaultString(namePrefix,value.getClass().getSimpleName()));}  }
class C{  public List<Feature> extract(JCas view,TreebankNode leftConstituent,TreebankNode rightConstituent) throws CleartkExtractorException {  List<TreebankNode> fromStart=TreebankNodeUtil.getPathToRoot(leftConstituent);  List<TreebankNode> fromEnd=TreebankNodeUtil.getPathToRoot(rightConstituent);  String pathFeatureName=null;  String lengthFeatureName=null;  fromEnd.remove(fromEnd.size() - 1);  while (fromStart.size() > 1 && fromEnd.size() > 0 && fromStart.get(fromStart.size() - 2) == fromEnd.get(fromEnd.size() - 1)) {    fromStart.remove(fromStart.size() - 1);    fromEnd.remove(fromEnd.size() - 1);  }  int length=fromStart.size();  if (!isPartial)   length+=fromEnd.size();  try {    ListIterator<TreebankNode> it=fromStart.listIterator();    StringBuffer pathBuffer=new StringBuffer();    boolean first=true;    while (it.hasNext()) {      Feature feature=this.pathMemberExtractor.extract(view,it.next()).get(0);      if (first) {        String s=feature.getName();        if (isPartial) {          pathFeatureName=Feature.createName(name,"PartialSyntacticPath(" + s + ")");          lengthFeatureName=Feature.createName(name,"PartialSyntacticPath","Length");        } else {          pathFeatureName=Feature.createName(name,"SyntacticPath(" + s + ")");          lengthFeatureName=Feature.createName(name,"SyntacticPath","Length");        }        first=false;      } else {        pathBuffer.append(this.UP_SEPARATOR);      }      pathBuffer.append(feature.getValue().toString());    }    if (!isPartial) {      it=fromEnd.listIterator(fromEnd.size());      while (it.hasPrevious()) {        Feature feature=this.pathMemberExtractor.extract(view,it.previous()).get(0);        pathBuffer.append(this.DOWN_SEPARATOR);        pathBuffer.append(feature.getValue().toString());      }    }    List<Feature> features=new ArrayList<Feature>(2);    features.add(new Feature(pathFeatureName,pathBuffer.toString()));    features.add(new Feature(lengthFeatureName,(long)length));    return features;  } catch (  IndexOutOfBoundsException e) {    return new ArrayList<Feature>(0);  }}  }
class C{  public int nextNode(){  if ((m_next) < this.size()) {    int next=this.elementAt(m_next);    m_next++;    return next;  } else   return DTM.NULL;}  }
class C{  public Project(final Database database,final INaviProject project,final TagManager nodeTagManager,final TagManager viewTagManager){  m_database=Preconditions.checkNotNull(database,"Error: Database argument can't be null");  m_project=Preconditions.checkNotNull(project,"Error: Project argument can't be null");  m_nodeTagManager=Preconditions.checkNotNull(nodeTagManager,"Error: Node tag manager argument can't be null");  m_viewTagManager=Preconditions.checkNotNull(viewTagManager,"Error: View  tag manager argument can't be null");  if (project.isLoaded()) {    convertData();  }  project.addListener(m_internalListener);}  }
class C{  public static byte[] decode(String s){  return decode(s,NO_OPTIONS);}  }
class C{  public void createReference(Object obj,XMLFormat.InputElement xml) throws XMLStreamException {  CharArray value=xml._reader.getAttributeValue(_idURI,_idName);  if (value == null)   return;  int i=value.toInt();  if (_idToObject.size() != i)   throw new XMLStreamException("Identifier discontinuity detected " + "(expected " + _idToObject.size() + " found "+ i+ ")");  _idToObject.add(obj);}  }
class C{  @Override protected void addAdditionalOperationHandlers(){  addOperationHandler(InitialiseArrayListStoreExport.class,new InitialiseExportHandler());}  }
class C{  public Ranch(){  super();}  }
class C{  public static boolean isIndicesForGrayscale(byte[] r,byte[] g,byte[] b){  if (r.length != g.length || r.length != b.length)   return false;  int size=r.length;  if (size != 256)   return false;  for (int i=0; i < size; i++) {    byte temp=(byte)i;    if (r[i] != temp || g[i] != temp || b[i] != temp)     return false;  }  return true;}  }
class C{  public static boolean isAllColumnsEven1s(int[][] m){  int count=0;  for (int i=0; i < m.length; i++) {    for (int j=0; j < m[i].length; j++) {      if (m[j][i] == 1)       count++;    }    if (count % 2 != 0)     return false;  }  return true;}  }
class C{  public void addSpriteFrame(CCSpriteFrame frame,String frameName){  spriteFrames.put(frameName,frame);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Sage.userLocale == null)   return null;  String lang=Sage.userLocale.getDisplayName(Sage.userLocale);  String availLangCodes=Sage.get("i18n_options","en,fr,it,de,es,nl");  java.util.StringTokenizer toker=new java.util.StringTokenizer(availLangCodes,",;");  String[] langNames=new String[toker.countTokens()];  for (int i=0; i < langNames.length; i++) {    String currLangCode=toker.nextToken();    String currContCode="";    int undIdx=currLangCode.indexOf("_");    if (undIdx != -1) {      currContCode=currLangCode.substring(undIdx + 1);      currLangCode=currLangCode.substring(0,undIdx);    }    java.util.Locale testLocale=new java.util.Locale(currLangCode,currContCode);    if (lang.equalsIgnoreCase(testLocale.getDisplayName(testLocale))) {      return (lang == null || lang.length() < 3) ? lang : ((lang.substring(0,1).toUpperCase()) + lang.substring(1));    }  }  lang=Sage.userLocale.getDisplayLanguage(Sage.userLocale);  return (lang == null || lang.length() < 3) ? lang : ((lang.substring(0,1).toUpperCase()) + lang.substring(1));}  }
class C{  public String minInstNumTipText(){  return "The lower boundary for instances per cluster.";}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((EcosListener)client).message((EcosMessage)m);}  }
class C{  public GenericData(){  this(EnumSet.noneOf(Flags.class));}  }
class C{  private void performUpdate(final Vec x,final double y,final double yHat){  for (  IndexValue iv : x) {    final int j=iv.getIndex();    w.set(j,T(w.get(j) + 2 * learningRate * (y - yHat)* iv.getValue(),((time - t[j]) / K) * gravity * learningRate,threshold));    t[j]+=((time - t[j]) / K) * K;  }}  }
class C{  protected void sequence_AnnotatedExpression_AsyncFunctionExpression_AsyncNoTrailingLineBreak_FunctionBody_FunctionExpression_FunctionHeader_FunctionImpl_StrictFormalParameters_TypeVariables(ISerializationContext context,FunctionExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public IPoint next(){  if (stack.empty()) {    throw new java.util.NoSuchElementException("TwoDNode Traversal Iterator has no more elements");  }  Moment m=stack.peek();  advance();  return m.node.point;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public float nextFloat(){  int y;  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];    }    for (; kk < N - 1; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];    }    y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];    mti=0;  }  y=mt[mti++];  y^=y >>> 11;  y^=(y << 7) & TEMPERING_MASK_B;  y^=(y << 15) & TEMPERING_MASK_C;  y^=(y >>> 18);  return (y >>> 8) / ((float)(1 << 24));}  }
class C{  public Object invoke(ObjectName name,String operationName,Object params[],String signature[]) throws InstanceNotFoundException, MBeanException, ReflectionException {  return mbsInterceptor.invoke(cloneObjectName(name),operationName,params,signature);}  }
class C{  public void testLogFileRead() throws Exception {  File logDir=prepareLogDir("testLogFileRead");  DiskLog log=new DiskLog();  log.setReadOnly(false);  log.setLogDir(logDir.getAbsolutePath());  log.setLogFileSize(3000);  log.setTimeoutMillis(1000);  log.prepare();  writeEventsToLog(log,0,1000);  String[] logFileNames=log.getLogFileNames();  assertTrue("Need at least two log files",logFileNames.length > 2);  long nextSeqno=0;  int nulls=0;  for (  String name : logFileNames) {    logger.info("Opening file: " + name);    LogConnection conn=log.connect(true);    assertTrue("Seeking next file: " + name,conn.seek(name));    THLEvent e=null;    while ((e=conn.next(false)) != null) {      assertEquals("Checking seqno",nextSeqno++,e.getSeqno());    }    logger.info("End of file: seqno=" + (nextSeqno - 1));    nulls++;    conn.release();  }  assertEquals("Nulls match file number",logFileNames.length,nulls);  assertEquals("Read all sequence numbers",log.getMaxSeqno(),nextSeqno - 1);}  }
class C{  public boolean isJobStoreSupportsPersistence(){  return jsPersistent;}  }
class C{  public static void filledCircle(double x,double y,double r){  if (r < 0)   throw new IllegalArgumentException("circle radius must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * r);  double hs=factorY(2 * r);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public Matrix arrayLeftDivide(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=B.A[i][j] / A[i][j];    }  }  return X;}  }
class C{  public boolean isCollection(){  return collection;}  }
class C{  public void clear(){  for (int i=list.size() - 1; i >= 0; i--) {    ObjectPool.Entry<Rect> r=list.get(i);    pool.release(r);  }  list.clear();}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.INTERFACE_MEMBER_DECLARATION___CONSTANT_DECLARATION_1:    getConstantDeclaration_1().clear();  return;case UmplePackage.INTERFACE_MEMBER_DECLARATION___ABSTRACT_METHOD_DECLARATION_1:getAbstractMethodDeclaration_1().clear();return;case UmplePackage.INTERFACE_MEMBER_DECLARATION___POSITION_1:getPosition_1().clear();return;case UmplePackage.INTERFACE_MEMBER_DECLARATION___DISPLAY_COLOR_1:getDisplayColor_1().clear();return;case UmplePackage.INTERFACE_MEMBER_DECLARATION___IS_A1:getIsA_1().clear();return;case UmplePackage.INTERFACE_MEMBER_DECLARATION___EXTRA_CODE_1:getExtraCode_1().clear();return;}super.eUnset(featureID);}  }
class C{  public static synchronized ControllerPlan findMatchingPlan(CompiledMethod cmpMethod){  RVMMethod method=cmpMethod.getMethod();  LinkedList<ControllerPlan> planList=findPlan(method);  if (planList == null) {    return null;  } else {synchronized (planList) {      for (      ControllerPlan plan : planList) {        if (plan.getCMID() == cmpMethod.getId()) {          return plan;        }      }    }    return null;  }}  }
class C{  @SuppressLint("NewApi") public ReactiveBeacons(Context context){  if (isBleSupported()) {    String bluetoothService=Context.BLUETOOTH_SERVICE;    BluetoothManager manager=(BluetoothManager)context.getSystemService(bluetoothService);    bluetoothAdapter=manager.getAdapter();    accessRequester=new AccessRequester(bluetoothAdapter);  }}  }
class C{  public void testRemoteBrokerHasNoConsumer() throws Exception {  bridgeBrokers("BrokerA","BrokerB");  startAllBrokers();  Destination dest=createDestination("TEST.FOO",true);  MessageConsumer clientA=createConsumer("BrokerA",dest);  sendMessages("BrokerA",dest,MESSAGE_COUNT);  MessageIdList msgsA=getConsumerMessages("BrokerA",clientA);  msgsA.waitForMessagesToArrive(MESSAGE_COUNT);  assertEquals(MESSAGE_COUNT,msgsA.getMessageCount());}  }
class C{  public ResultVO validate(BaseParam param,BindingResult result,User currentUser,Logger logger,OperationType operationType) throws Exception {  if (result.hasErrors()) {    return resultHelper.infoResp(ErrorType.SYS0002,result.toString());  }  return validate(param,currentUser,logger,operationType);}  }
class C{  @Override public void put(String name,double value){  emulatedFields.put(name,value);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public C2 method(C2 param){  return param;}  }
class C{  @Override public void performRequest(String request){  if (request.compareTo("Stop") == 0) {    stop();  } else   if (request.compareTo("Save model") == 0) {    saveModel();  } else   if (request.compareTo("Load model") == 0) {    loadModel();  } else {    throw new IllegalArgumentException(request + " not supported (Classifier)");  }}  }
class C{  public boolean isRemoved(){  return this.alreadyRemoved;}  }
class C{  private void addJsonForEntry(final StringBuilder result,Entry entry,boolean includeJustTextFields,boolean includeUserWasSignIn,boolean userWasSignedIn,boolean forceQuotationToNote) throws IOException {  result.append("\"note\":" + JsonBuilder.quote(entry.getNoteOrTitle("")) + "\n");  result.append(",\"quotation\":" + JsonBuilder.quote(entry.getQuotation("")) + "\n");  result.append(",\"isPublic\":" + entry.getIsPublic() + "\n");  String typeToAdd=entry.getType();  if (typeToAdd.equals(DbLogic.Constants.quotation)) {    typeToAdd=DbLogic.Constants.note;  }  result.append(",\"type\":\"" + typeToAdd + "\"\n");  if (includeUserWasSignIn) {    result.append(",\"userWasSignedIn\":" + userWasSignedIn + "\n");  }  if (includeJustTextFields) {    result.append(",\"noteHtml\":" + JsonBuilder.quote(getNoteHtml(entry,false,entry.hasQuotation(),true)) + "\n");    result.append(",\"quotationHtml\":" + JsonBuilder.quote(getQuotationHtml(entry,true)) + "\n");  } else {    final StringBuilder innerResult=new StringBuilder();    addEntryHtmlToTreeSimple(entry,innerResult,null,0,!entry.isNotebook());    result.append(",\"subtreeHtml\":" + JsonBuilder.quote(innerResult.toString()) + "\n");  }}  }
class C{  SortedSet<BasicInterval> headSetInclusive(int upperBound){  BasicInterval newUpperBound=new BasicInterval(upperBound + 1,upperBound + 1);  return headSet(newUpperBound);}  }
class C{  public void discardAllEdits(){  undoManager.discardAllEdits();}  }
class C{  @Override public int compareTo(Route o){  return ((Integer)switchPorts.size()).compareTo(o.switchPorts.size());}  }
class C{  ManagedWindowDecorator(Window window,String windowId){  this.window=window;  name="system." + windowId;}  }
class C{  @Override public void buildEvaluator(Instances data) throws Exception {  getCapabilities().testWithFail(data);  m_trainInstances=data;  m_classIndex=m_trainInstances.classIndex();  m_numInstances=m_trainInstances.numInstances();  Discretize disTransform=new Discretize();  disTransform.setUseBetterEncoding(true);  disTransform.setInputFormat(m_trainInstances);  m_trainInstances=Filter.useFilter(m_trainInstances,disTransform);  m_numClasses=m_trainInstances.attribute(m_classIndex).numValues();}  }
class C{  public SVGPatternElementBridge(){}  }
class C{  public ConfigExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  @NoInline public static void raiseArrayStoreException(){  throw new java.lang.ArrayStoreException();}  }
class C{  public Wall(int width,int height){  super(width,height);  setRPClass("wall");  put("type","wall");  setResistance(100);}  }
class C{  public boolean isSingleRow(){  return m_singleRow;}  }
class C{  public boolean requiresChangedRegions(){  return fRequiresChangedRegions;}  }
class C{  public ServiceError(String reason){  this(null,null,reason);}  }
class C{  @Override public double transform(double value){  return Math.sqrt(value);}  }
class C{  public CStringBuilder replace(int start,int end,String str){  replace0(start,end,str);  return this;}  }
class C{  public boolean hasPrice(){  return hasExtension(Price.class);}  }
class C{  protected void showHistory(){  log.info("InfoAsset.showHistory");}  }
class C{  public synchronized void requestFeatureFridayEmotes(boolean forcedUpdate){  request(Type.FEATURE_FRIDAY,null,forcedUpdate);}  }
class C{  public static int binarySearchCeil(long[] a,long key,boolean inclusive,boolean stayInBounds){  int index=Arrays.binarySearch(a,key);  index=index < 0 ? ~index : (inclusive ? index : (index + 1));  return stayInBounds ? Math.min(a.length - 1,index) : index;}  }
class C{  private void postPhoneticLetterRunnable(String phoneticLetter){  mHandler.startPhoneticLetterTimeout(phoneticLetter);}  }
class C{  @Override final public String toString(){  return "LocalTxState{startTime=" + startTime + ",readsOnCommitTime="+ readsOnCommitTime+ ",runState="+ runState+ "}";}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  private boolean executeConnect() throws IOException, HttpException {  this.connectMethod=new ConnectMethod(this.hostConfiguration);  this.connectMethod.getParams().setDefaults(this.hostConfiguration.getParams());  String agent=(String)getParams().getParameter(PARAM_DEFAULT_USER_AGENT_CONNECT_REQUESTS);  if (agent != null) {    this.connectMethod.setRequestHeader("User-Agent",agent);  }  int code;  for (; ; ) {    if (!this.conn.isOpen()) {      this.conn.open();    }    if (this.params.isAuthenticationPreemptive() || this.state.isAuthenticationPreemptive()) {      LOG.debug("Preemptively sending default basic credentials");      this.connectMethod.getProxyAuthState().setPreemptive();      this.connectMethod.getProxyAuthState().setAuthAttempted(true);    }    try {      authenticateProxy(this.connectMethod);    } catch (    AuthenticationException e) {      LOG.error(e.getMessage(),e);    }    applyConnectionParams(this.connectMethod);    this.connectMethod.execute(state,this.conn);    code=this.connectMethod.getStatusCode();    boolean retry=false;    AuthState authstate=this.connectMethod.getProxyAuthState();    authstate.setAuthRequested(code == HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED);    if (authstate.isAuthRequested()) {      if (processAuthenticationResponse(this.connectMethod)) {        retry=true;      }    }    if (!retry) {      break;    }    if (this.connectMethod.getResponseBodyAsStream() != null) {      this.connectMethod.getResponseBodyAsStream().close();    }  }  if ((code >= 200) && (code < 300)) {    this.conn.tunnelCreated();    this.connectMethod=null;    return true;  } else {    return false;  }}  }
class C{  public void remove(int index){  mCategories.remove(index);  mTitles.remove(index);  mValues.remove(index);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void subtract(SequenceNameLocus region){  final MergedIntervals intervals=mSequences.get(region.getSequenceName());  if (intervals != null) {    intervals.subtract(region);  }}  }
class C{  public SecP384R1Point(ECCurve curve,ECFieldElement x,ECFieldElement y,boolean withCompression){  super(curve,x,y);  if ((x == null) != (y == null)) {    throw new IllegalArgumentException("Exactly one of the field elements is null");  }  this.withCompression=withCompression;}  }
class C{  public static boolean isFunction(String function){  if (StringUtils.isEmpty(function)) {    return false;  }  if (function.startsWith(functionIdentifier)) {    return true;  }  return false;}  }
class C{  public T caseReactionProperty(ReactionProperty object){  return null;}  }
class C{  public long available(long t){  return (elements.size() == 0) ? Long.MAX_VALUE : ((next <= t) ? elements.peek().enqueue : next);}  }
class C{  private void markReceived(long byteCount){  transferDataMonitor.addSample(byteCount);}  }
class C{  private static ShadowedRegisterValue sd(Register reg,int offset){  return new ShadowedRegisterValue(v(reg),s(offset));}  }
class C{  public boolean onForwardedEvent(MotionEvent event,int activePointerId){  boolean handledEvent=true;  boolean clearPressedItem=false;  final int actionMasked=MotionEventCompat.getActionMasked(event);switch (actionMasked) {case MotionEvent.ACTION_CANCEL:    handledEvent=false;  break;case MotionEvent.ACTION_UP:handledEvent=false;case MotionEvent.ACTION_MOVE:final int activeIndex=event.findPointerIndex(activePointerId);if (activeIndex < 0) {handledEvent=false;break;}final int x=(int)event.getX(activeIndex);final int y=(int)event.getY(activeIndex);final int position=pointToPosition(x,y);if (position == INVALID_POSITION) {clearPressedItem=true;break;}final View child=getChildAt(position - getFirstVisiblePosition());setPressedItem(child,position,x,y);handledEvent=true;if (actionMasked == MotionEvent.ACTION_UP) {clickPressedItem(child,position);}break;}if (!handledEvent || clearPressedItem) {clearPressedItem();}if (handledEvent) {if (mScrollHelper == null) {mScrollHelper=new ListViewAutoScrollHelper(this);}mScrollHelper.setEnabled(true);mScrollHelper.onTouch(this,event);} else if (mScrollHelper != null) {mScrollHelper.setEnabled(false);}return handledEvent;}  }
class C{  public List<ConsumedCapacity> runWithBackoff(BatchWriteItemRequest req){  BatchWriteItemResult writeItemResult=null;  List<ConsumedCapacity> consumedCapacities=new LinkedList<ConsumedCapacity>();  Map<String,List<WriteRequest>> unprocessedItems=null;  boolean interrupted=false;  try {    do {      writeItemResult=client.batchWriteItem(req);      unprocessedItems=writeItemResult.getUnprocessedItems();      consumedCapacities.addAll(writeItemResult.getConsumedCapacity());      if (unprocessedItems != null) {        req.setRequestItems(unprocessedItems);        try {          Thread.sleep(exponentialBackoffTime);        } catch (        InterruptedException ie) {          interrupted=true;        } finally {          exponentialBackoffTime*=2;          if (exponentialBackoffTime > BootstrapConstants.MAX_EXPONENTIAL_BACKOFF_TIME) {            exponentialBackoffTime=BootstrapConstants.MAX_EXPONENTIAL_BACKOFF_TIME;          }        }      }    } while (unprocessedItems != null && unprocessedItems.get(tableName) != null);    return consumedCapacities;  }  finally {    if (interrupted) {      Thread.currentThread().interrupt();    }  }}  }
class C{  public void notifyListener(){  Iterator<ChangeListener> iter;  iter=m_ChangeListeners.iterator();  while (iter.hasNext()) {    iter.next().stateChanged(new ChangeEvent(this));  }}  }
class C{  public T caseAnnotableScriptElement(AnnotableScriptElement object){  return null;}  }
class C{  public MailAddress(String address) throws MailAddressException {  address=address.trim();  int pos=0;  stripSourceRoute(address,pos);  StringBuffer localPartSB=new StringBuffer();  StringBuffer domainSB=new StringBuffer();  try {    if (address.charAt(pos) == '\"') {      pos=parseQuotedLocalPart(localPartSB,address,pos);      if (localPartSB.toString().length() == 2) {        throw new MailAddressException("No quoted local-part (user account) found at position " + (pos + 2) + " in '"+ address+ "'",address,pos + 2);      }    } else {      pos=parseUnquotedLocalPart(localPartSB,address,pos);      if (localPartSB.toString().length() == 0) {        throw new MailAddressException("No local-part (user account) found at position " + (pos + 1) + " in '"+ address+ "'",address,pos + 1);      }    }    if (pos >= address.length() || address.charAt(pos) != '@') {      throw new MailAddressException("Did not find @ between local-part and domain at position " + (pos + 1) + " in '"+ address+ "'",address,pos + 1);    }    pos++;    while (true) {      if (address.charAt(pos) == '#') {        pos=parseNumber(domainSB,address,pos);      } else       if (address.charAt(pos) == '[') {        pos=parseDomainLiteral(domainSB,address,pos);      } else {        pos=parseDomain(domainSB,address,pos);      }      if (pos >= address.length()) {        break;      }      if (address.charAt(pos) == '.') {        domainSB.append('.');        pos++;        continue;      }      break;    }    if (domainSB.toString().length() == 0) {      throw new MailAddressException("No domain found at position " + (pos + 1) + " in '"+ address+ "'",address,pos + 1);    }  } catch (  IndexOutOfBoundsException ioobe) {    throw new MailAddressException("Out of data at position " + (pos + 1) + " in '"+ address+ "'",address,pos + 1);  }  localPart=localPartSB.toString();  domain=domainSB.toString();}  }
class C{  public static boolean arrayequals(byte[] a,byte[] b,int count){  for (int i=0; i < count; i++) {    if (a[i] != b[i]) {      return false;    }  }  return true;}  }
class C{  @Override public Long del(final String... keys){  checkIsInMultiOrPipeline();  client.del(keys);  return client.getIntegerReply();}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public static RoundedColorDrawable fromColorDrawable(ColorDrawable colorDrawable){  return new RoundedColorDrawable(colorDrawable.getColor());}  }
class C{  public static Map<String,Collection<Category>> makeDict(final Iterable<InputToParser> input){  final Multiset<String> wordCounts=HashMultiset.create();  final Map<String,Multiset<Category>> wordToCatToCount=new HashMap<>();  for (  final InputToParser sentence : input) {    for (int i=0; i < sentence.getInputWords().size(); i++) {      final String word=sentence.getInputWords().get(i).word;      final Category cat=sentence.getGoldCategories().get(i);      wordCounts.add(word);      if (!wordToCatToCount.containsKey(word)) {        final Multiset<Category> tmp=HashMultiset.create();        wordToCatToCount.put(word,tmp);      }      wordToCatToCount.get(word).add(cat);    }  }  return makeDict(wordCounts,wordToCatToCount);}  }
class C{  @SuppressWarnings("unchecked") @Test public void labels(){  AbstractStorageLabel<Object> storageLabel=mock(AbstractStorageLabel.class);  AbstractStorageLabelType<Object> labelType=mock(AbstractStorageLabelType.class);  when(storageLabel.getStorageLabelType()).thenReturn(labelType);  when(labelType.isOnePerStorage()).thenReturn(false);  StorageData storageData=new StorageData();  storageData.getLabelList().clear();  storageData.addLabel(storageLabel,false);  storageData.addLabel(storageLabel,false);  assertThat(storageData.getLabelList(),hasSize(1));  assertThat(storageData.isLabelPresent(labelType),is(true));  storageData.removeLabel(storageLabel);  assertThat(storageData.getLabelList(),is(empty()));  assertThat(storageData.isLabelPresent(labelType),is(false));  when(labelType.isOnePerStorage()).thenReturn(true);  AbstractStorageLabel<Object> storageLabel2=mock(AbstractStorageLabel.class);  when(storageLabel2.getStorageLabelType()).thenReturn(labelType);  storageData.addLabel(storageLabel,false);  storageData.addLabel(storageLabel2,false);  assertThat(storageData.getLabelList(),hasSize(1));  assertThat(storageData.getLabelList(),hasItem(storageLabel));  storageData.addLabel(storageLabel2,true);  assertThat(storageData.getLabelList(),hasSize(1));  assertThat(storageData.getLabelList(),hasItem(storageLabel2));  assertThat(storageData.getLabels(labelType),hasSize(1));  assertThat(storageData.getLabels(labelType),hasItem(storageLabel2));}  }
class C{  private void createChildren(){  if (m_module.isLoaded()) {    for (    final INaviView view : m_module.getContent().getViewContainer().getViews()) {      if (view.getNodeCount() == 0) {        continue;      }      add(new CViewIconNode(view));    }  }}  }
class C{  public synchronized SerializerRegistry registerDefault(Class<?> baseType,TypeSerializerFactory factory){  defaultFactories.put(baseType,factory);  return this;}  }
class C{  private void triggerCopyServices(Set<String> targetDataStoreSet,State current){  if (targetDataStoreSet.isEmpty()) {    ServiceUtils.logInfo(this,"No copies to trigger!");    return;  }  for (  String targetDataStore : targetDataStoreSet) {    triggerCopyService(current,targetDataStore);  }}  }
class C{  private static void compressBZip2(Resource source,Resource target) throws IOException {  if (source.isDirectory()) {    throw new IOException("you can only create a BZIP File from a single source file, use TBZ (TAR-BZIP2) to first TAR multiple files");  }  InputStream is=null;  OutputStream os=null;  try {    is=source.getInputStream();    os=target.getOutputStream();  } catch (  IOException ioe) {    IOUtil.closeEL(is,os);    throw ioe;  }  _compressBZip2(is,os);}  }
class C{  static void appendBytes(String content,Mode mode,BitArray bits,String encoding) throws WriterException {switch (mode) {case NUMERIC:    appendNumericBytes(content,bits);  break;case ALPHANUMERIC:appendAlphanumericBytes(content,bits);break;case BYTE:append8BitBytes(content,bits,encoding);break;case KANJI:appendKanjiBytes(content,bits);break;default :throw new WriterException("Invalid mode: " + mode);}}  }
class C{  @Override public Request<List<BuilderStatus>> builds(ProjectReference projectReference){  List<DummyBuilderStatus> current=currentBuilderStatuses.get(projectReference.name());  List<BuilderStatus> update=new ArrayList<>();  if (current != null) {    for (    DummyBuilderStatus dummyBuilderStatus : current) {      update.add(dummyBuilderStatus);    }  }  return new DummyRequest<>(update);}  }
class C{  public Dct_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_filename=jcas.getRequiredFeatureDE(casType,"filename","uima.cas.String",featOkTst);  casFeatCode_filename=(null == casFeat_filename) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_filename).getCode();  casFeat_value=jcas.getRequiredFeatureDE(casType,"value","uima.cas.String",featOkTst);  casFeatCode_value=(null == casFeat_value) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_value).getCode();  casFeat_timexId=jcas.getRequiredFeatureDE(casType,"timexId","uima.cas.String",featOkTst);  casFeatCode_timexId=(null == casFeat_timexId) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_timexId).getCode();}  }
class C{  private Path keyStoreFile(){  String fileName=_config.get(_prefix + ".ssl.key-store");  if (fileName == null) {    return null;  }  return Vfs.path(fileName);}  }
class C{  public boolean markSupported(){  return true;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.412 -0500",hash_original_method="5BA8167D6AC26A2C080E0DF071E238DD",hash_generated_method="EB47C2931063D7D379FC7CFA8DCB3485") public SIPClientTransaction findSubscribeTransaction(SIPRequest notifyMessage,ListeningPointImpl listeningPoint){  SIPClientTransaction retval=null;  try {    Iterator it=clientTransactionTable.values().iterator();    if (stackLogger.isLoggingEnabled())     stackLogger.logDebug("ct table size = " + clientTransactionTable.size());    String thisToTag=notifyMessage.getTo().getTag();    if (thisToTag == null) {      return retval;    }    Event eventHdr=(Event)notifyMessage.getHeader(EventHeader.NAME);    if (eventHdr == null) {      if (stackLogger.isLoggingEnabled()) {        stackLogger.logDebug("event Header is null -- returning null");      }      return retval;    }    while (it.hasNext()) {      SIPClientTransaction ct=(SIPClientTransaction)it.next();      if (!ct.getMethod().equals(Request.SUBSCRIBE))       continue;      String fromTag=ct.from.getTag();      Event hisEvent=ct.event;      if (hisEvent == null)       continue;      if (stackLogger.isLoggingEnabled()) {        stackLogger.logDebug("ct.fromTag = " + fromTag);        stackLogger.logDebug("thisToTag = " + thisToTag);        stackLogger.logDebug("hisEvent = " + hisEvent);        stackLogger.logDebug("eventHdr " + eventHdr);      }      if (fromTag.equalsIgnoreCase(thisToTag) && hisEvent != null && eventHdr.match(hisEvent) && notifyMessage.getCallId().getCallId().equalsIgnoreCase(ct.callId.getCallId())) {        if (ct.acquireSem())         retval=ct;        return retval;      }    }    return retval;  }  finally {    if (stackLogger.isLoggingEnabled())     stackLogger.logDebug("findSubscribeTransaction : returning " + retval);  }}  }
class C{  public Vertex nextMostConscious(Vertex type,Set<Vertex> ignoring,float min,boolean inverse){  Relationship relationship=nextMostConsciousRelationship(type,ignoring,min,inverse);  if (relationship != null) {    return relationship.getTarget();  }  return null;}  }
class C{  public JToolBar(String name){  this(name,HORIZONTAL);}  }
class C{  @SuppressWarnings("unchecked") public <T>T loadAs(Reader io,Class<T> type){  return (T)loadFromReader(new StreamReader(io),type);}  }
class C{  private void renderAxes(Camera camera){  glPushMatrix();  glLoadIdentity();  float rotX=camera.getRotation().x;  float rotY=camera.getRotation().y;  float rotZ=0;  glRotatef(rotX,1.0f,0.0f,0.0f);  glRotatef(rotY,0.0f,1.0f,0.0f);  glRotatef(rotZ,0.0f,0.0f,1.0f);  glLineWidth(2.0f);  glBegin(GL_LINES);  glColor3f(1.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(1.0f,0.0f,0.0f);  glColor3f(0.0f,1.0f,0.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,1.0f,0.0f);  glColor3f(1.0f,1.0f,1.0f);  glVertex3f(0.0f,0.0f,0.0f);  glVertex3f(0.0f,0.0f,1.0f);  glEnd();  glPopMatrix();}  }
class C{  static IoBuffer copy(ByteBuffer src){  IoBuffer copy=IoBuffer.allocate(src.remaining());  copy.put(src);  copy.flip();  return copy;}  }
class C{  public void testParseUserWithWhitespace(){  User expectedUser=new User();  expectedUser.setName("name");  expectedUser.setPassword("pwd");  expectedUser.addRole("role");  User user=User.parseUser("\n\t  name:pwd:role");  assertEquals(expectedUser,user);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.ANNOTATION__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case N4JSPackage.ANNOTATION__ARGS:  return args != null && !args.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public double removeDimension(int index){  throw new RuntimeException("Not implemented for wrapper.");}  }
class C{  public SharedAuthenticatedUser(AuthenticatedUser authenticatedUser){  super(authenticatedUser.getAuthenticationProvider(),authenticatedUser.getCredentials());  this.shareKey=null;  this.identifier=authenticatedUser.getIdentifier();}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public void testNulls() throws SQLException {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS nullTest");    this.stmt.executeUpdate("CREATE TABLE IF NOT EXISTS nullTest (field_1 CHAR(20), rowOrder INT)");    this.stmt.executeUpdate("INSERT INTO nullTest VALUES (null, 1), ('', 2)");    this.rs=this.stmt.executeQuery("SELECT field_1 FROM nullTest ORDER BY rowOrder");    this.rs.next();    assertTrue("NULL field not returned as NULL",(this.rs.getString("field_1") == null) && this.rs.wasNull());    this.rs.next();    assertTrue("Empty field not returned as \"\"",this.rs.getString("field_1").equals("") && !this.rs.wasNull());    this.rs.close();  }  finally {    if (this.rs != null) {      try {        this.rs.close();      } catch (      Exception ex) {      }    }    this.stmt.executeUpdate("DROP TABLE IF EXISTS nullTest");  }}  }
class C{  public void invoke(AbstractHessianInput in,AbstractHessianOutput out) throws Exception {  invoke(_service,in,out);}  }
class C{  public static void addMissingJmsResources(LocalConfiguration configuration){  boolean containsJmsServer=false;  boolean containsJmsSubdeployment=false;  boolean containsJmsModule=false;  boolean containsJmsConnectionFactory=false;  boolean containsJmsQueue=false;  List<Resource> weblogicResources=configuration.getResources();  for (  Resource resource : weblogicResources) {    if (WebLogicConfigurationEntryType.JMS_SERVER.equals(resource.getType())) {      containsJmsServer=true;    } else     if (WebLogicConfigurationEntryType.JMS_MODULE.equals(resource.getType())) {      containsJmsModule=true;    } else     if (WebLogicConfigurationEntryType.JMS_SUBDEPLOYMENT.equals(resource.getType())) {      containsJmsSubdeployment=true;    } else     if (WebLogicConfigurationEntryType.JMS_CONNECTION_FACTORY.equals(resource.getType())) {      containsJmsConnectionFactory=true;    } else     if (WebLogicConfigurationEntryType.JMS_QUEUE.equals(resource.getType())) {      containsJmsQueue=true;    }  }  if ((containsJmsConnectionFactory || containsJmsQueue) && !containsJmsServer) {    String jmsServerName=configuration.getPropertyValue(WebLogicPropertySet.JMS_SERVER);    Resource jmsServer=new Resource(jmsServerName,WebLogicConfigurationEntryType.JMS_SERVER);    jmsServer.setId(jmsServerName);    weblogicResources.add(jmsServer);  }  if ((containsJmsConnectionFactory || containsJmsQueue) && !containsJmsModule) {    String jmsModuleName=configuration.getPropertyValue(WebLogicPropertySet.JMS_MODULE);    Resource jmsModule=new Resource(jmsModuleName,WebLogicConfigurationEntryType.JMS_MODULE);    jmsModule.setId(jmsModuleName);    weblogicResources.add(jmsModule);  }  if ((containsJmsConnectionFactory || containsJmsQueue) && !containsJmsSubdeployment) {    String jmsSubdeploymentName=configuration.getPropertyValue(WebLogicPropertySet.JMS_SUBDEPLOYMENT);    Resource jmsSubdeployment=new Resource(jmsSubdeploymentName,WebLogicConfigurationEntryType.JMS_SUBDEPLOYMENT);    jmsSubdeployment.setId(jmsSubdeploymentName);    weblogicResources.add(jmsSubdeployment);  }}  }
class C{  public void diff_cleanupEfficiency(LinkedList<Diff> diffs){  if (diffs.isEmpty()) {    return;  }  boolean changes=false;  Stack<Diff> equalities=new Stack<Diff>();  String lastequality=null;  ListIterator<Diff> pointer=diffs.listIterator();  boolean pre_ins=false;  boolean pre_del=false;  boolean post_ins=false;  boolean post_del=false;  Diff thisDiff=pointer.next();  Diff safeDiff=thisDiff;  while (thisDiff != null) {    if (thisDiff.operation == Operation.EQUAL) {      if (thisDiff.text.length() < Diff_EditCost && (post_ins || post_del)) {        equalities.push(thisDiff);        pre_ins=post_ins;        pre_del=post_del;        lastequality=thisDiff.text;      } else {        equalities.clear();        lastequality=null;        safeDiff=thisDiff;      }      post_ins=post_del=false;    } else {      if (thisDiff.operation == Operation.DELETE) {        post_del=true;      } else {        post_ins=true;      }      if (lastequality != null && ((pre_ins && pre_del && post_ins&& post_del) || ((lastequality.length() < Diff_EditCost / 2) && ((pre_ins ? 1 : 0) + (pre_del ? 1 : 0) + (post_ins ? 1 : 0)+ (post_del ? 1 : 0)) == 3))) {        while (thisDiff != equalities.lastElement()) {          thisDiff=pointer.previous();        }        pointer.next();        pointer.set(new Diff(Operation.DELETE,lastequality));        pointer.add(thisDiff=new Diff(Operation.INSERT,lastequality));        equalities.pop();        lastequality=null;        if (pre_ins && pre_del) {          post_ins=post_del=true;          equalities.clear();          safeDiff=thisDiff;        } else {          if (!equalities.empty()) {            equalities.pop();          }          if (equalities.empty()) {            thisDiff=safeDiff;          } else {            thisDiff=equalities.lastElement();          }          while (thisDiff != pointer.previous()) {          }          post_ins=post_del=false;        }        changes=true;      }    }    thisDiff=pointer.hasNext() ? pointer.next() : null;  }  if (changes) {    diff_cleanupMerge(diffs);  }}  }
class C{  private void resetOptions(){  m_coverVariance=0.95;  m_sumOfEigenValues=0.0;  m_transBackToOriginal=false;}  }
class C{  public static Validator<CharSequence> letterOrNumber(@NonNull final CharSequence errorMessage,@NonNull final Case caseSensitivity,final boolean allowSpaces,@NonNull final char... allowedCharacters){  return new LetterOrNumberValidator(errorMessage,caseSensitivity,allowSpaces,allowedCharacters);}  }
class C{  public static ImageIcon createImageIcon(String path){  java.net.URL imgURL=TDA.class.getResource("icons/" + path);  if (imgURL != null) {    return new ImageIcon(imgURL);  } else {    System.err.println("Couldn't find file: " + path);    return null;  }}  }
class C{  protected void runTests() throws Exception {  startToMain("ThreadGroupTarg");  listenUntilVMDisconnect();  if (!testFailed) {    println("ThreadGroupTest: passed");  } else {    throw new Exception("ThreadGroupTest: failed");  }}  }
class C{  public TypeReference(int typeRef){  this.value=typeRef;}  }
class C{  protected static void processCRLB2(DistributionPoint dp,Object cert,X509CRL crl) throws AnnotatedException {  IssuingDistributionPoint idp=null;  try {    idp=IssuingDistributionPoint.getInstance(CertPathValidatorUtilities.getExtensionValue(crl,RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT));  } catch (  Exception e) {    throw new AnnotatedException("Issuing distribution point extension could not be decoded.",e);  }  if (idp != null) {    if (idp.getDistributionPoint() != null) {      DistributionPointName dpName=IssuingDistributionPoint.getInstance(idp).getDistributionPoint();      List names=new ArrayList();      if (dpName.getType() == DistributionPointName.FULL_NAME) {        GeneralName[] genNames=GeneralNames.getInstance(dpName.getName()).getNames();        for (int j=0; j < genNames.length; j++) {          names.add(genNames[j]);        }      }      if (dpName.getType() == DistributionPointName.NAME_RELATIVE_TO_CRL_ISSUER) {        ASN1EncodableVector vec=new ASN1EncodableVector();        try {          Enumeration e=ASN1Sequence.getInstance(ASN1Sequence.fromByteArray(CertPathValidatorUtilities.getIssuerPrincipal(crl).getEncoded())).getObjects();          while (e.hasMoreElements()) {            vec.add((ASN1Encodable)e.nextElement());          }        } catch (        IOException e) {          throw new AnnotatedException("Could not read CRL issuer.",e);        }        vec.add(dpName.getName());        names.add(new GeneralName(X509Name.getInstance(new DERSequence(vec))));      }      boolean matches=false;      if (dp.getDistributionPoint() != null) {        dpName=dp.getDistributionPoint();        GeneralName[] genNames=null;        if (dpName.getType() == DistributionPointName.FULL_NAME) {          genNames=GeneralNames.getInstance(dpName.getName()).getNames();        }        if (dpName.getType() == DistributionPointName.NAME_RELATIVE_TO_CRL_ISSUER) {          if (dp.getCRLIssuer() != null) {            genNames=dp.getCRLIssuer().getNames();          } else {            genNames=new GeneralName[1];            try {              genNames[0]=new GeneralName(new X509Name((ASN1Sequence)ASN1Sequence.fromByteArray(CertPathValidatorUtilities.getEncodedIssuerPrincipal(cert).getEncoded())));            } catch (            IOException e) {              throw new AnnotatedException("Could not read certificate issuer.",e);            }          }          for (int j=0; j < genNames.length; j++) {            Enumeration e=ASN1Sequence.getInstance(genNames[j].getName().toASN1Primitive()).getObjects();            ASN1EncodableVector vec=new ASN1EncodableVector();            while (e.hasMoreElements()) {              vec.add((ASN1Encodable)e.nextElement());            }            vec.add(dpName.getName());            genNames[j]=new GeneralName(new X509Name(new DERSequence(vec)));          }        }        if (genNames != null) {          for (int j=0; j < genNames.length; j++) {            if (names.contains(genNames[j])) {              matches=true;              break;            }          }        }        if (!matches) {          throw new AnnotatedException("No match for certificate CRL issuing distribution point name to cRLIssuer CRL distribution point.");        }      } else {        if (dp.getCRLIssuer() == null) {          throw new AnnotatedException("Either the cRLIssuer or the distributionPoint field must " + "be contained in DistributionPoint.");        }        GeneralName[] genNames=dp.getCRLIssuer().getNames();        for (int j=0; j < genNames.length; j++) {          if (names.contains(genNames[j])) {            matches=true;            break;          }        }        if (!matches) {          throw new AnnotatedException("No match for certificate CRL issuing distribution point name to cRLIssuer CRL distribution point.");        }      }    }    BasicConstraints bc=null;    try {      bc=BasicConstraints.getInstance(CertPathValidatorUtilities.getExtensionValue((X509Extension)cert,BASIC_CONSTRAINTS));    } catch (    Exception e) {      throw new AnnotatedException("Basic constraints extension could not be decoded.",e);    }    if (cert instanceof X509Certificate) {      if (idp.onlyContainsUserCerts() && (bc != null && bc.isCA())) {        throw new AnnotatedException("CA Cert CRL only contains user certificates.");      }      if (idp.onlyContainsCACerts() && (bc == null || !bc.isCA())) {        throw new AnnotatedException("End CRL only contains CA certificates.");      }    }    if (idp.onlyContainsAttributeCerts()) {      throw new AnnotatedException("onlyContainsAttributeCerts boolean is asserted.");    }  }}  }
class C{  public DrawerBuilder withActionBarDrawerToggleAnimated(boolean actionBarDrawerToggleAnimated){  this.mAnimateActionBarDrawerToggle=actionBarDrawerToggleAnimated;  return this;}  }
class C{  private void initPath(boolean isDevStage){  StringBuilder sb=new StringBuilder(32);  if (library != null) {    sb.append(library.getPath());  } else {    if (null != contract) {      sb.append(helper.getBaseContractsPath());      sb.append("/").append(contract);    } else {      sb.append(helper.getBaseResourcePath());    }  }  if (library == null && localePrefix != null) {    sb.append('/').append(localePrefix);  }  if (isDevStage && JSF_SCRIPT_LIBRARY_NAME.equals(libraryName) && JSF_SCRIPT_RESOURCE_NAME.equals(name)) {    sb.append('/').append("jsf-uncompressed.js");  } else {    sb.append('/').append(name);  }  if (version != null) {    sb.append('/').append(version.getVersion());    String extension=version.getExtension();    if (extension != null) {      sb.append('.').append(extension);    }  }  path=sb.toString();  if (compressible && !supportsEL) {    FacesContext ctx=FacesContext.getCurrentInstance();    File servletTmpDir=(File)ctx.getExternalContext().getApplicationMap().get("javax.servlet.context.tempdir");    if (servletTmpDir == null || !servletTmpDir.isDirectory()) {      if (LOGGER.isLoggable(Level.FINE)) {        LOGGER.log(Level.FINE,"File ({0}) referenced by javax.servlet.context.tempdir attribute is null, or was is not a directory.  Compression for {1} will be unavailable.",new Object[]{((servletTmpDir == null) ? "null" : servletTmpDir.toString()),path});      }      compressible=false;    } else {      String tPath=((path.charAt(0) == '/') ? path : '/' + path);      File newDir=new File(servletTmpDir,COMPRESSED_CONTENT_DIRECTORY + tPath);      try {        if (!newDir.exists()) {          if (newDir.mkdirs()) {            compressedPath=newDir.getCanonicalPath();          } else {            compressible=false;            if (LOGGER.isLoggable(Level.WARNING)) {              LOGGER.log(Level.WARNING,"jsf.application.resource.unable_to_create_compression_directory",newDir.getCanonicalPath());            }          }        } else {          compressedPath=newDir.getCanonicalPath();        }      } catch (      Exception e) {        if (LOGGER.isLoggable(Level.SEVERE)) {          LOGGER.log(Level.SEVERE,e.toString(),e);        }        compressible=false;      }    }  }}  }
class C{  public E remove(){  if (head == null) {    throw new NoSuchElementException("Nothing in List");  }  E result=head.value;  if (head == tail) {    head=tail=null;  } else {    head=head.next;  }  size--;  return result;}  }
class C{  public Anonymous_methodBody_1_ createAnonymous_methodBody_1_(){  Anonymous_methodBody_1_Impl anonymous_methodBody_1_=new Anonymous_methodBody_1_Impl();  return anonymous_methodBody_1_;}  }
class C{  public UUIDSerializer(){  setImmutable(true);}  }
class C{  public static MmContent createMmContent(Uri uri,String mime,long size,String fileName){  if (mime != null) {    if (MimeManager.isImageType(mime)) {      return new PhotoContent(uri,mime,size,fileName);    }    if (MimeManager.isVideoType(mime)) {      return new VideoContent(uri,mime,size,fileName);    }    if (MimeManager.isAudioType(mime)) {      return new AudioContent(uri,mime,size,fileName);    }    if (MimeManager.isVCardType(mime)) {      return new VisitCardContent(uri,mime,size,fileName);    }    if (MimeManager.isGeolocType(mime)) {      return new GeolocContent(uri,size,fileName);    }  }  return new FileContent(uri,size,fileName);}  }
class C{  public static boolean[] toBooleanArray(int[] array){  boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] > 0;  }  return result;}  }
class C{  public String toString(){  String iResult="{";  for (int i=0; i < iV.length; i++) {    if (i != 0)     iResult+=",";    iResult+=iV[i];  }  iResult+="}";  return iResult;}  }
class C{  public static PriceSource newInstance(){  final PriceSource returnInstance=new PriceSource();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public boolean approveIt(){  log.info(toString());  setIsApproved(true);  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public MoveResourceChange(IResource source,IContainer target){  this(source,target,IResource.NULL_STAMP,null);}  }
class C{  public static Script createMultiSigInputScript(List<TransactionSignature> signatures){  List<byte[]> sigs=new ArrayList<byte[]>(signatures.size());  for (  TransactionSignature signature : signatures)   sigs.add(signature.encodeToBitcoin());  return createMultiSigInputScriptBytes(sigs);}  }
class C{  private static void processStringElements(PsiElement startWith,Processor<PerlStringContentElement> processor){  while (startWith != null) {    if (startWith instanceof PerlStringContentElement) {      processor.process((PerlStringContentElement)startWith);    }    if (startWith.getFirstChild() != null) {      processStringElements(startWith.getFirstChild(),processor);    }    startWith=startWith.getNextSibling();  }}  }
class C{  public static void fill(float[] array,int start,int end,float value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public IntLazyValue(IntSupplier supplier){  Validate.notNull(supplier,"supplier can't be null!");  this.supplier=supplier;}  }
class C{  protected Transferable createTransferable(JComponent c){  return new SearchResultTransferable(panel,panel.getAllSelectedLines());}  }
class C{  synchronized PooledConnection tryUse(){  d("tryUse()");  if (state == IDLE) {    state=BUSY;    ++useCount;    return conn;  }  return null;}  }
class C{  public static int computeBestCapacity(int predict){  return predict * 4 / 3 + 1;}  }
class C{  public void redraw(){  mItemCount=getShouldDrawCount();  mPreviousSelectedIndicator=null;  for (  View i : mIndicators) {    removeView(i);  }  if (mItemCount > 1) {    for (int i=0; i < mItemCount; i++) {      addIndicatorView();    }    setItemAsSelected(mPreviousSelectedPosition);  }}  }
class C{  protected void closeStartTag() throws SAXException {  try {    if (m_tracer != null)     super.fireStartElem(m_elemContext.m_elementName);    int nAttrs=m_attributes.getLength();    if (nAttrs > 0) {      processAttributes(m_writer,nAttrs);      m_attributes.clear();    }    m_writer.write('>');    if (m_CdataElems != null)     m_elemContext.m_isCdataSection=isCdataSection();    if (m_doIndent) {      m_isprevtext=false;      m_preserves.push(m_ispreserve);    }  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public AbstractStateMachine(Collection<State<S,E>> states,Collection<Transition<S,E>> transitions,State<S,E> initialState){  this(states,transitions,initialState,new DefaultExtendedState());}  }
class C{  public static long locationAtTick(GeoTimeSerie gts,long tick){  if (null == gts.locations) {    return GeoTimeSerie.NO_LOCATION;  }  sort(gts,false);  int idx=Arrays.binarySearch(gts.ticks,0,gts.values,tick);  if (idx < 0) {    return GeoTimeSerie.NO_LOCATION;  } else {    return gts.locations[idx];  }}  }
class C{  protected void updateView(View view){  try {    mStatusText=(TextView)view.findViewById(R.id.seekBarPrefValue);    mStatusText.setText(String.valueOf(mCurrentValue));    mStatusText.setMinimumWidth(30);    mSeekBar.setProgress(mCurrentValue - mMinValue);    TextView unitsRight=(TextView)view.findViewById(R.id.seekBarPrefUnitsRight);    unitsRight.setText(mUnitsRight);    TextView unitsLeft=(TextView)view.findViewById(R.id.seekBarPrefUnitsLeft);    unitsLeft.setText(mUnitsLeft);  } catch (  Exception e) {    Log.e(TAG,"Error updating seek bar preference",e);  }}  }
class C{  public void put(int fieldNumber,FieldData data){  int i=binarySearch(fieldNumber);  if (i >= 0) {    mData[i]=data;  } else {    i=~i;    if (i < mSize && mData[i] == DELETED) {      mFieldNumbers[i]=fieldNumber;      mData[i]=data;      return;    }    if (mGarbage && mSize >= mFieldNumbers.length) {      gc();      i=~binarySearch(fieldNumber);    }    if (mSize >= mFieldNumbers.length) {      int n=idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      FieldData[] nvalues=new FieldData[n];      System.arraycopy(mFieldNumbers,0,nkeys,0,mFieldNumbers.length);      System.arraycopy(mData,0,nvalues,0,mData.length);      mFieldNumbers=nkeys;      mData=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mFieldNumbers,i,mFieldNumbers,i + 1,mSize - i);      System.arraycopy(mData,i,mData,i + 1,mSize - i);    }    mFieldNumbers[i]=fieldNumber;    mData[i]=data;    mSize++;  }}  }
class C{  private static double computeFootprintInMapper(Lop node){  if (!node.usesDistributedCache())   return 0.0;  OutputParameters in1dims=node.getInputs().get(0).getOutputParameters();  OutputParameters in2dims=node.getInputs().get(1).getOutputParameters();  double footprint=0;  if (node instanceof MapMult) {    int dcInputIndex=node.distributedCacheInputIndex()[0];    footprint=AggBinaryOp.getMapmmMemEstimate(in1dims.getNumRows(),in1dims.getNumCols(),in1dims.getRowsInBlock(),in1dims.getColsInBlock(),in1dims.getNnz(),in2dims.getNumRows(),in2dims.getNumCols(),in2dims.getRowsInBlock(),in2dims.getColsInBlock(),in2dims.getNnz(),dcInputIndex,false);  } else   if (node instanceof PMMJ) {    int dcInputIndex=node.distributedCacheInputIndex()[0];    footprint=AggBinaryOp.getMapmmMemEstimate(in1dims.getNumRows(),1,in1dims.getRowsInBlock(),in1dims.getColsInBlock(),in1dims.getNnz(),in2dims.getNumRows(),in2dims.getNumCols(),in2dims.getRowsInBlock(),in2dims.getColsInBlock(),in2dims.getNnz(),dcInputIndex,true);  } else   if (node instanceof AppendM) {    footprint=BinaryOp.footprintInMapper(in1dims.getNumRows(),in1dims.getNumCols(),in2dims.getNumRows(),in2dims.getNumCols(),in1dims.getRowsInBlock(),in1dims.getColsInBlock());  } else   if (node instanceof BinaryM) {    footprint=BinaryOp.footprintInMapper(in1dims.getNumRows(),in1dims.getNumCols(),in2dims.getNumRows(),in2dims.getNumCols(),in1dims.getRowsInBlock(),in1dims.getColsInBlock());  } else {    return 0.0;  }  return footprint;}  }
class C{  static boolean hasNamedParameters(String sql){  return NAMED_QUERY_PATTERN.matcher(sql).find();}  }
class C{  @Override public ServiceExceptionProtocol rethrow(String msg){  return new ServiceExceptionProtocol(msg,this);}  }
class C{  public synchronized void parse(Reader in) throws IOException {  this.in=in;  this.ln=1;  seenHtml=false;  seenHead=false;  seenBody=false;  crCount=lfCount=crlfCount=0;  try {    ch=readCh();    text=new char[1024];    str=new char[128];    parseContent();    while (stack != null) {      endTag(true);    }    in.close();  } catch (  IOException e) {    errorContext();    error("ioexception");    throw e;  }catch (  Exception e) {    errorContext();    error("exception",e.getClass().getName(),e.getMessage());    e.printStackTrace();  }catch (  ThreadDeath e) {    errorContext();    error("terminated");    e.printStackTrace();    throw e;  } finally {    for (; stack != null; stack=stack.next) {      handleEndTag(stack.tag);    }    text=null;    str=null;  }}  }
class C{  public static void swap32bitsToArray(int value,byte[] dest,int offset){  dest[offset]=(byte)(value & 0x000000FF);  dest[offset + 1]=(byte)((value & 0x0000FF00) >> 8);  dest[offset + 2]=(byte)((value & 0x00FF0000) >> 16);  dest[offset + 3]=(byte)((value & 0xFF000000) >> 24);}  }
class C{  public Memoizer(final Callable<V> compute,final V val){  this.compute=compute;  if (val != null) {    final FutureTask<V> ft=new FutureTask<>(null);    ft.run();    cache.set(ft);  }}  }
class C{  protected void initNode(){  ClassLoader cl=Thread.currentThread().getContextClassLoader();  try {    Thread.currentThread().setContextClassLoader(TransportClient.class.getClassLoader());    final Properties properties=new Properties();    try {      InputStream stream=null;      if (System.getProperties().containsKey("jboss.server.config.dir")) {        File file=new File(System.getProperty("jboss.server.config.dir") + File.separatorChar + HAWKULAR_ELASTICSEARCH_PROPERTIES);        stream=new FileInputStream(file);      } else {        stream=this.getClass().getResourceAsStream(File.separatorChar + HAWKULAR_ELASTICSEARCH_PROPERTIES);      }      properties.load(stream);      stream.close();    } catch (    IOException e) {      log.log(Level.SEVERE,"Failed to load elasticsearch properties",e);    }    node=NodeBuilder.nodeBuilder().settings(ImmutableSettings.settingsBuilder().put(properties)).node();    node.start();    client=node.client();  }  finally {    Thread.currentThread().setContextClassLoader(cl);  }  if (log.isLoggable(Level.FINEST)) {    log.finest("Initialized Elasticsearch node=" + node + " client="+ client);  }}  }
class C{  public ToStringBuilder append(String fieldName,Object[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  public static Validator<CharSequence> letter(@NonNull final CharSequence errorMessage,@NonNull final Case caseSensitivity,final boolean allowSpaces,@NonNull final char... allowedCharacters){  return new LetterValidator(errorMessage,caseSensitivity,allowSpaces,allowedCharacters);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public SeoBookmarkablePageParametersEncoder(final BookmarkService bookmarkService,final boolean seoEnabled){  this.bookmarkService=bookmarkService;  this.seoEnabled=seoEnabled;}  }
class C{  public void afterInvalidate(EntryEvent oevt){  fail("Unexpected listener callback: afterInvalidated");}  }
class C{  final public boolean checkDSClosing(DistributionManager dm){  InternalDistributedSystem ds=dm.getSystem();  return (ds == null || ds.isDisconnecting());}  }
class C{  protected void encodeAtom(OutputStream outStream,byte data[],int offset,int len) throws IOException {  int i;  int p1, p2;  byte a, b;  a=data[offset];  if (len == 2) {    b=data[offset + 1];  } else {    b=0;  }  crc.update(a);  if (len == 2) {    crc.update(b);  }  outStream.write(map_array[((a >>> 2) & 0x38) + ((b >>> 5) & 0x7)]);  p1=0;  p2=0;  for (i=1; i < 256; i=i * 2) {    if ((a & i) != 0) {      p1++;    }    if ((b & i) != 0) {      p2++;    }  }  p1=(p1 & 1) * 32;  p2=(p2 & 1) * 32;  outStream.write(map_array[(a & 31) + p1]);  outStream.write(map_array[(b & 31) + p2]);  return;}  }
class C{  private void decode(byte[] data,int width,int height){  Size size=activity.getCameraManager().getPreviewSize();  byte[] rotatedData=new byte[data.length];  for (int y=0; y < size.height; y++) {    for (int x=0; x < size.width; x++)     rotatedData[x * size.height + size.height - y - 1]=data[x + y * size.width];  }  int tmp=size.width;  size.width=size.height;  size.height=tmp;  Result rawResult=null;  PlanarYUVLuminanceSource source=buildLuminanceSource(rotatedData,size.width,size.height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public static StringBuilder appendSpace(StringBuilder buf,int spaces){  for (int i=spaces; i > 0; i-=SPACEPADDING.length) {    buf.append(SPACEPADDING,0,i < SPACEPADDING.length ? i : SPACEPADDING.length);  }  return buf;}  }
class C{  public TypeAnnotationsWriter(OutputStream os,ConstPool cp){  super(os,cp);}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {  if (contentHandler != null) {    contentHandler.startPrefixMapping(prefix,uri);  }}  }
class C{  public Point2D(double x,double y){  if (Double.isInfinite(x) || Double.isInfinite(y))   throw new IllegalArgumentException("Coordinates must be finite");  if (Double.isNaN(x) || Double.isNaN(y))   throw new IllegalArgumentException("Coordinates cannot be NaN");  if (x == 0.0)   this.x=0.0; else   this.x=x;  if (y == 0.0)   this.y=0.0; else   this.y=y;}  }
class C{  public static TextField textField(String tip){  TextField tf=new TextField();  tooltip(tf,tip);  return tf;}  }
class C{  public void onClickRowView(NotificationBoard board,RowView rowView,NotificationEntry entry){  if (DBG)   Log.v(TAG,"onClickRowView - " + entry.ID);}  }
class C{  public void service(Mail mail){  boolean dbUpdated=false;  mail.setState(Mail.GHOST);  ByteArrayOutputStream baos=new ByteArrayOutputStream();  Connection conn=null;  try {    MimeMessage message=mail.getMessage();    String messageId=message.getMessageID();    if (message.getSize() > getMaxSize()) {      log(messageId + " Feeding HAM/SPAM ignored because message size > " + getMaxSize()+ ": "+ message.getSize());      return;    }    clearAllHeaders(message);    message.writeTo(baos);    BufferedReader br=new BufferedReader(new StringReader(baos.toString()));synchronized (JDBCBayesianAnalyzer.DATABASE_LOCK) {      conn=datasource.getConnection();      if (conn.getAutoCommit()) {        conn.setAutoCommit(false);      }      dbUpdated=true;      analyzer.clear();      if ("ham".equalsIgnoreCase(feedType)) {        log(messageId + " Feeding HAM");        analyzer.addHam(br);        analyzer.updateHamTokens(conn);      } else {        log(messageId + " Feeding SPAM");        analyzer.addSpam(br);        analyzer.updateSpamTokens(conn);      }      if (conn != null && dbUpdated && !conn.getAutoCommit()) {        conn.commit();        dbUpdated=false;        log(messageId + " Training ended successfully");        JDBCBayesianAnalyzer.touchLastDatabaseUpdateTime();      }    }  } catch (  java.sql.SQLException se) {    log("SQLException: " + se.getMessage());  }catch (  java.io.IOException ioe) {    log("IOException: " + ioe.getMessage());  }catch (  javax.mail.MessagingException me) {    log("MessagingException: " + me.getMessage());  } finally {    try {      if (conn != null && dbUpdated && !conn.getAutoCommit()) {        conn.rollback();        dbUpdated=false;      }    } catch (    Exception e) {      log("Failed to rollback after last error.",e);    }    theJDBCUtil.closeJDBCConnection(conn);  }}  }
class C{  public static void insertAuditLogEntry(CliAuditLogHook cliAuditLogHook,HiveOperation operation,String command,List<Table> inputTables,List<org.apache.hadoop.hive.ql.metadata.Partition> inputPartitions,List<Table> outputTables,List<org.apache.hadoop.hive.ql.metadata.Partition> outputPartitions,Map<String,MapRedStats> mapRedStatsPerStage,HiveConf hiveConf) throws Exception {  Set<ReadEntity> readEntities=new HashSet<>();  Set<WriteEntity> writeEntities=new HashSet<>();  for (  Table t : inputTables) {    readEntities.add(new ReadEntity(t));  }  for (  org.apache.hadoop.hive.ql.metadata.Partition p : inputPartitions) {    readEntities.add(new ReadEntity(p));  }  for (  Table t : outputTables) {    writeEntities.add(new WriteEntity(t,WriteEntity.WriteType.DDL_NO_LOCK));  }  for (  org.apache.hadoop.hive.ql.metadata.Partition p : outputPartitions) {    writeEntities.add(new WriteEntity(p,WriteEntity.WriteType.DDL_NO_LOCK));  }  SessionState sessionState=new SessionState(hiveConf);  sessionState.setCmd(command);  sessionState.setCommandType(operation == null ? null : org.apache.hadoop.hive.ql.plan.HiveOperation.valueOf(operation.toString()));  sessionState.setMapRedStats(mapRedStatsPerStage);  cliAuditLogHook.run(sessionState,readEntities,writeEntities,null,null);}  }
class C{  public Action build(){  return action;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public void stop(){  stopRequested=true;}  }
class C{  public List<VirtualArrayRestRep> findByInitiatorPort(String initiatorPort){  return search().byInitiatorPort(initiatorPort).run();}  }
class C{  public final int pull(){  if (current_item > 0) {    current_item--;  }  return (items[current_item]);}  }
class C{  public boolean validateBrokerData(Tradestrategy tradestrategy) throws BrokerModelException {  boolean valid=true;  String errorMsg="Symbol: " + tradestrategy.getContract().getSymbol() + " Bar Size/Chart Days combination was not valid for Yahoo API, these values have been updated."+ "\n"+ "Please validate and save."+ "\n"+ "Note Chart Days/BarSize combinations for Yahoo: "+ "\n"+ "Chart Hist = 1 D, Bar Size >= 1min"+ "\n"+ "Chart Hist > 1 D to 1 M, Bar Size >= 5min"+ "\n"+ "Chart Hist > 1 M to 3 M, Bar Size = 1 day";  if (tradestrategy.getBarSize() < 60) {    tradestrategy.setBarSize(60);    valid=false;  } else   if ((tradestrategy.getChartDays() > 1 && tradestrategy.getChartDays() < 7) && tradestrategy.getBarSize() < 300) {    tradestrategy.setBarSize(300);    valid=false;  } else   if (tradestrategy.getChartDays() > 30 && (tradestrategy.getBarSize() <= 3600)) {    tradestrategy.setBarSize(1);    valid=false;  }  if ((tradestrategy.getBarSize() < 300) && tradestrategy.getChartDays() > 1) {    tradestrategy.setChartDays(1);    valid=false;  } else   if (tradestrategy.getBarSize() <= 3600 && tradestrategy.getChartDays() > 30) {    tradestrategy.setChartDays(7);    valid=false;  }  if (!valid) {    tradestrategy.setDirty(true);    throw new BrokerModelException(1,3901,errorMsg);  }  return true;}  }
class C{  private OverscrollHelper(){}  }
class C{  public static boolean isFileForVcs(@NotNull VirtualFile file,Project project,AbstractVcs host){  return getVcsFor(project,file) == host;}  }
class C{  public void trim(){  trimNonNullValues();  trimNullValue();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputFile=null;  int minClass;  int maxClass;  int numClasses;  int i1, i2;  int[][] contingency;  double[] data1, data2;  double z1, z2;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  outputFile=args[2];  if (inputHeader1 == null || inputHeader2 == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    float progress=0;    WhiteboxRaster image1=new WhiteboxRaster(inputHeader1,"r");    int rows=image1.getNumberRows();    int cols=image1.getNumberColumns();    double noData1=image1.getNoDataValue();    WhiteboxRaster image2=new WhiteboxRaster(inputHeader2,"r");    if (rows != image2.getNumberRows() || cols != image2.getNumberColumns()) {      showFeedback("The input images must have the same dimensions (rows and columns).");      return;    }    double noData2=image2.getNoDataValue();    minClass=(int)(Math.min(image1.getMinimumValue(),image2.getMinimumValue()));    maxClass=(int)(Math.max(image1.getMaximumValue(),image2.getMaximumValue()));    numClasses=maxClass - minClass + 1;    contingency=new int[numClasses][numClasses];    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if (z1 != noData1 && z2 != noData2) {          i1=(int)(z1 - minClass);          i2=(int)(z2 - minClass);          contingency[i1][i2]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    image1.close();    image2.close();    double agreements=0;    double expectedFrequency=0;    double N=0;    double rowTotal=0;    double colTotal=0;    double kappa=0;    double overallAccuracy=0;    for (int a=0; a <= numClasses - 1; a++) {      agreements+=contingency[a][a];      for (int b=0; b <= numClasses - 1; b++) {        N+=contingency[a][b];      }    }    for (int a=0; a <= numClasses - 1; a++) {      rowTotal=0;      colTotal=0;      for (int b=0; b <= numClasses - 1; b++) {        colTotal+=contingency[a][b];        rowTotal+=contingency[b][a];      }      expectedFrequency+=(colTotal * rowTotal) / N;    }    kappa=(agreements - expectedFrequency) / (N - expectedFrequency);    overallAccuracy=agreements / N;    File file=new File(outputFile);    FileWriter fw=null;    BufferedWriter bw=null;    PrintWriter out=null;    try {      fw=new FileWriter(file,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      String str;      str="<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">";      out.println(str);      str="<head>";      out.println(str);      str="<meta content=\"text/html; charset=iso-8859-1\" http-equiv=\"content-type\"><title>Kappa Index of Agreement Output</title>";      out.println(str);      str="</head>";      out.println(str);      str="<body><h1>Kappa Index of Agreement</h1>";      out.println(str);      str="<b>Input Images:</b> <br><br><b>Classification Image:</b> " + inputHeader1 + "<br><b>Reference Image:</b> "+ inputHeader2+ "<br>";      out.println(str);      str="<br><b>Contingency Table:</b><br>";      out.println(str);      str="<br><table border=\"1\" cellspacing=\"0\" cellpadding=\"3\">";      out.println(str);      str="<tr>";      out.println(str);      str="<th colspan=\"2\" rowspan=\"2\"></th><th colspan=\"" + numClasses + "\">Class Image</th><th rowspan=\"2\">Row<br>Totals</th>";      out.println(str);      str="</tr>";      out.println(str);      str="<tr>";      out.println(str);      for (int a=0; a <= numClasses - 1; a++) {        str="<th>" + (minClass + a) + "</th>";        out.println(str);      }      str="</tr>";      out.println(str);      for (int a=0; a <= numClasses - 1; a++) {        if (a == 0) {          str="<tr><th rowspan=\"" + numClasses + "\">Ref<br>Image</th> <th>"+ (minClass + a)+ "</th>";          out.println(str);        } else {          str="<tr><th>" + (minClass + a) + "</th>";          out.println(str);        }        rowTotal=0;        for (int b=0; b <= numClasses - 1; b++) {          rowTotal+=contingency[a][b];          str="<td>" + contingency[a][b] + "</td>";          out.println(str);        }        str="<td>" + rowTotal + "</td>";        out.println(str);        str="</tr>";        out.println(str);      }      str="<tr>";      out.println(str);      str="<th colspan=\"2\">Col<br>Totals</th>";      out.println(str);      for (int a=0; a <= numClasses - 1; a++) {        colTotal=0;        for (int b=0; b <= numClasses - 1; b++) {          colTotal+=contingency[b][a];        }        str="<td>" + colTotal + "</td>";        out.println(str);      }      str="<td><b>N</b>=" + N + "</td></tr>";      out.println(str);      str="</table>";      out.println(str);      str="<br><b>Class Accuracy Statistics:</b><br><br>";      out.println(str);      str="<table border=\"1\" cellspacing=\"0\" cellpadding=\"3\">";      out.println(str);      str="<tr><td><b>Class</b></td><td><b>User's<br>Accuracy</b></td><td><b>Producer's<br>Accuracy</b></td></tr>";      out.println(str);      DecimalFormat df=new DecimalFormat("0.00%");      DecimalFormat df2=new DecimalFormat("0.000");      for (int a=0; a <= numClasses - 1; a++) {        rowTotal=0;        colTotal=0;        for (int b=0; b <= numClasses - 1; b++) {          colTotal+=contingency[a][b];          rowTotal+=contingency[b][a];        }        str="<tr><td>" + a + "</td><td>"+ df.format(contingency[a][a] / colTotal)+ "</td><td>"+ df.format(contingency[a][a] / rowTotal)+ "</td></tr>";        out.println(str);      }      str="</table>";      out.println(str);      str="<br>Note: User's accuracy refers to the proportion of cells correctly assigned to a class (i.e. the number of cells correctly classified for a category divided by the row total in the contingency table). " + "Producer's accuracy is a measure of how much of the land in each category was classified correctly (i.e. the number of cells correctly classified for a category divided by the column total in the contingency table).<br>";      out.println(str);      str="<br><b>Overall Accuracy</b> = " + df.format(overallAccuracy);      out.println(str);      str="<br><br><b>Kappa</b> = " + df2.format(kappa);      out.println(str);      str="</body>";      out.println(str);    } catch (    java.io.IOException e) {      System.err.println("Error: " + e.getMessage());    } finally {      if (out != null || bw != null) {        out.flush();        out.close();      }    }    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void init(URL policy){  PolicyParser pp=new PolicyParser(expandProperties);  try (InputStreamReader isr=new InputStreamReader(PolicyUtil.getInputStream(policy))){    pp.read(isr);    KeyStore keyStore=initKeyStore(policy,pp.getKeyStoreUrl(),pp.getKeyStoreType());    Enumeration<GrantEntry> enum_=pp.grantElements();    while (enum_.hasMoreElements()) {      GrantEntry ge=enum_.nextElement();      addGrantEntry(ge,keyStore);    }  } catch (  PolicyParser.ParsingException pe) {    System.err.println(AUTH_POLICY + rb.getString(".error.parsing.") + policy);    System.err.println(AUTH_POLICY + rb.getString("COLON") + pe.getMessage());    if (debug != null) {      pe.printStackTrace();    }  }catch (  Exception e) {    if (debug != null) {      debug.println("error parsing " + policy);      debug.println(e.toString());      e.printStackTrace();    }  }}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  private void parseResourceTable(){  int chunk=getLEWord(mParserOffset + (1 * WORD_SIZE));  mResCount=(chunk / 4) - 2;  mResourcesIds=new int[mResCount];  for (int i=0; i < mResCount; ++i) {    mResourcesIds[i]=getLEWord(mParserOffset + ((i + 2) * WORD_SIZE));  }  mParserOffset+=chunk;}  }
class C{  private void adaptCategories(List<CategoryDTO> categoryDTOs,List<VoCategory> voCategories){  for (  CategoryDTO dto : categoryDTOs) {    VoCategory voCategory=voAssemblySupport.assembleVo(VoCategory.class,CategoryDTO.class,new VoCategory(),dto);    voCategories.add(voCategory);    voCategory.setChildren(new ArrayList<VoCategory>(dto.getChildren().size()));    adaptCategories(dto.getChildren(),voCategory.getChildren());  }}  }
class C{  public static void startSettingsApp(Activity activity){  startSettingsApp((Context)activity);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof YInterval)) {    return false;  }  YInterval that=(YInterval)obj;  if (this.y != that.y) {    return false;  }  if (this.yLow != that.yLow) {    return false;  }  if (this.yHigh != that.yHigh) {    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:05.656 -0500",hash_original_method="8F04C2F49656580CD2F07A034451AAD3",hash_generated_method="A36F30A03F396A23CC6C0710B11118E8") public void clear(){  currentOutput="";  accruedInput.setLength(0);  accruedInputWithoutFormatting.setLength(0);  formattingTemplate.setLength(0);  lastMatchPosition=0;  currentFormattingPattern="";  prefixBeforeNationalNumber.setLength(0);  nationalNumber.setLength(0);  ableToFormat=true;  positionToRemember=0;  originalPosition=0;  isInternationalFormatting=false;  isExpectingCountryCallingCode=false;  possibleFormats.clear();  if (!currentMetaData.equals(defaultMetaData)) {    currentMetaData=getMetadataForRegion(defaultCountry);  }}  }
class C{  private GeometryOperation parseGeometryOperation(Element runElement) throws TestParseException {  Element goElement=runElement.getChild(TAG_geometryOperation);  if (goElement == null) {    return null;  }  String goClass=goElement.getTextTrim();  GeometryOperation geomOp=(GeometryOperation)getInstance(goClass,GeometryOperation.class);  if (geomOp == null) {    throw new TestParseException("Could not create instance of GeometryOperation from class " + goClass);  }  return geomOp;}  }
class C{  public static SIPDialog createFromNOTIFY(SIPClientTransaction subscribeTx,SIPTransaction notifyST){  SIPDialog d=new SIPDialog(notifyST);  d.serverTransactionFlag=false;  d.lastTransaction=subscribeTx;  storeFirstTransactionInfo(d,subscribeTx);  d.terminateOnBye=false;  d.localSequenceNumber=subscribeTx.getCSeq();  SIPRequest not=(SIPRequest)notifyST.getRequest();  d.remoteSequenceNumber=not.getCSeq().getSeqNumber();  d.setDialogId(not.getDialogId(true));  d.setLocalTag(not.getToTag());  d.setRemoteTag(not.getFromTag());  d.setLastResponse(subscribeTx,subscribeTx.getLastResponse());  d.localParty=not.getTo().getAddress();  d.remoteParty=not.getFrom().getAddress();  d.addRoute(not);  d.setState(CONFIRMED_STATE);  return d;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @Override protected ConsoleReader createConsoleReader(){  try {    output=new ByteArrayOutputStream(1024 * 10);    PrintStream sysout=new PrintStream(output);    setGfshOutErr(sysout);    return new ConsoleReader(new FileInputStream(FileDescriptor.in),sysout);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public void testMacClone() throws NoSuchAlgorithmException, CloneNotSupportedException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  for (int i=0; i < macs.length; i++) {    try {      Mac mac1=(Mac)macs[i].clone();      assertEquals(mac1.getAlgorithm(),macs[i].getAlgorithm());      assertEquals(mac1.getProvider(),macs[i].getProvider());      assertFalse(macs[i].equals(mac1));    } catch (    CloneNotSupportedException e) {    }  }}  }
class C{  public TimeSeriesCollection(TimeSeries series){  this(series,TimeZone.getDefault());}  }
class C{  public static long deserializeLogSegmentSequenceNumber(byte[] data){  String seqNoStr=new String(data,UTF_8);  return Long.valueOf(seqNoStr);}  }
class C{  public static int typeTagOf(char descriptor){switch (descriptor) {case 'D':    return DOUBLE;case 'F':  return FLOAT;case 'J':return LONG;case 'L':case '[':return OBJECT;default :return INTEGER;}}  }
class C{  boolean matchesAreNested(PfamHmmer3RawMatch one,PfamHmmer3RawMatch two){  PfamModel oneModel=clanData.getModelByModelAccession(one.getModelId());  PfamModel twoModel=clanData.getModelByModelAccession(two.getModelId());  return !(oneModel == null || twoModel == null) && (oneModel.isNestedIn(twoModel) || twoModel.isNestedIn(oneModel));}  }
class C{  private void logoutImpl() throws LoginException {  if (subject == null) {    throw new LoginException("auth.38");  }  loggedIn=false;  Throwable firstProblem=null;  int total=0;  for (  Module module : modules) {    try {      module.module.logout();      ++total;    } catch (    Throwable ex) {      if (firstProblem == null) {        firstProblem=ex;      }    }  }  if (firstProblem != null || total == 0) {    if (firstProblem instanceof PrivilegedActionException && firstProblem.getCause() != null) {      firstProblem=firstProblem.getCause();    }    if (firstProblem instanceof LoginException) {      throw (LoginException)firstProblem;    }    throw (LoginException)new LoginException("auth.37").initCause(firstProblem);  }}  }
class C{  protected static Tuple<String,String> createTuple(String one,double two){  return MatsimXmlWriter.createTuple(one,Double.toString(two));}  }
class C{  public void add(){  if (number == dots.length)   return;  dots[number++].setSelected(true);}  }
class C{  public boolean isEmpty(){  return (this.size() == 0);}  }
class C{  public FatalError(String s){  super(s);}  }
class C{  public ProtocolInfo(){  this(null);}  }
class C{  public boolean hasWovenAdvice(){  return woven.get().length != 0;}  }
class C{  public static String convertStringToHtml(String s){  if (s == null) {    return null;  }  if (s.length() == 0) {    return s;  }  StringBuilder buff=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char ch=s.charAt(i);    String token=CODE_MAP.get(ch);    if (token == null) {      if (ch < 128) {        buff.append(ch);      } else {        buff.append('&');        buff.append('#');        buff.append((int)ch);        buff.append(';');      }    } else {      buff.append('&');      buff.append(token);      buff.append(';');    }  }  return buff.toString();}  }
class C{  public void refreshDOM(){  documentReady(docInfo,document);}  }
class C{  @Override public int size(){  return size;}  }
class C{  public void createSchema(Session session,ConnectorSchemaMetadata schemaMetadata){  String schemaName=session.getSchema();  checkArgument(schemaName != null,"Schema cannot be null");  ConnectorMetadataEntry entry=validateCatalogName(session.getCatalog());  ConnectorMetadata metadata=entry.getMetadata();  if (!(metadata instanceof ConnectorDetailMetadata)) {    throw new PrestoException(NOT_SUPPORTED,"Create schema not supported for connector " + entry.getConnectorId());  }  ConnectorDetailMetadata detailMetadata=(ConnectorDetailMetadata)metadata;  detailMetadata.createSchema(session.toConnectorSession(),schemaMetadata);}  }
class C{  public StandardXYZToolTipGenerator(String formatString,NumberFormat xFormat,NumberFormat yFormat,NumberFormat zFormat){  super(formatString,xFormat,yFormat);  ParamChecks.nullNotPermitted(zFormat,"zFormat");  this.zFormat=zFormat;}  }
class C{  RSAPrivateCrtKeyImpl(BigInteger n,BigInteger e,BigInteger d,BigInteger p,BigInteger q,BigInteger pe,BigInteger qe,BigInteger coeff) throws InvalidKeyException {  this.n=n;  this.e=e;  this.d=d;  this.p=p;  this.q=q;  this.pe=pe;  this.qe=qe;  this.coeff=coeff;  RSAKeyFactory.checkRSAProviderKeyLengths(n.bitLength(),e);  algid=rsaId;  try {    DerOutputStream out=new DerOutputStream();    out.putInteger(0);    out.putInteger(n);    out.putInteger(e);    out.putInteger(d);    out.putInteger(p);    out.putInteger(q);    out.putInteger(pe);    out.putInteger(qe);    out.putInteger(coeff);    DerValue val=new DerValue(DerValue.tag_Sequence,out.toByteArray());    key=val.toByteArray();  } catch (  IOException exc) {    throw new InvalidKeyException(exc);  }}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.deviceIdTV=(TextView)this.findViewById(R.id.device_id_tv);  this.versionCodeTV=(TextView)this.findViewById(R.id.version_code_tv);  this.versionNameTV=(TextView)this.findViewById(R.id.version_name_tv);  this.phoneBrandTV=(TextView)this.findViewById(R.id.phone_brand_tv);  this.phoneModelTV=(TextView)this.findViewById(R.id.phone_model_tv);  this.apiLevelTV=(TextView)this.findViewById(R.id.phone_api_level_tv);  this.apiVersionTV=(TextView)this.findViewById(R.id.phone_api_version_tv);  this.appProcessIdTV=(TextView)this.findViewById(R.id.app_process_id_tv);  this.appNameTV=(TextView)this.findViewById(R.id.app_name_tv);  this.metaDataTV=(TextView)this.findViewById(R.id.meta_data_tv);}  }
class C{  public mxObjectCodec(Object template,String[] exclude,String[] idrefs,Map<String,String> mapping){  this.template=template;  if (exclude != null) {    this.exclude=new HashSet<String>();    for (int i=0; i < exclude.length; i++) {      this.exclude.add(exclude[i]);    }  } else {    this.exclude=EMPTY_SET;  }  if (idrefs != null) {    this.idrefs=new HashSet<String>();    for (int i=0; i < idrefs.length; i++) {      this.idrefs.add(idrefs[i]);    }  } else {    this.idrefs=EMPTY_SET;  }  if (mapping == null) {    mapping=new Hashtable<String,String>();  }  this.mapping=mapping;  reverse=new Hashtable<String,String>();  Iterator<Map.Entry<String,String>> it=mapping.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<String,String> e=it.next();    reverse.put(e.getValue(),e.getKey());  }}  }
class C{  public SQLNonTransientConnectionException(){}  }
class C{  public FastAdapterDialog<Item> add(List<Item> items){  mFastItemAdapter.add(items);  return this;}  }
class C{  public void unsetTriggerType(){  this.triggerType=null;}  }
class C{  private void start(JComponent c,MouseEvent e){  Point screenLocation=c.getLocationOnScreen();  if (component != c) {    _stop(component);  }  component=c;  event=new MouseEvent(component,e.getID(),e.getWhen(),e.getModifiers(),e.getX() + screenLocation.x,e.getY() + screenLocation.y,e.getXOnScreen(),e.getYOnScreen(),e.getClickCount(),e.isPopupTrigger(),MouseEvent.NOBUTTON);  if (timer == null) {    timer=new Timer(100,this);  }  if (!timer.isRunning()) {    timer.start();  }}  }
class C{  public int climbStairs(int n){  if (n <= 1)   return n;  int last=1, lastlast=1;  int now=0;  for (int i=2; i <= n; i++) {    now=last + lastlast;    lastlast=last;    last=now;  }  return now;}  }
class C{  @NotNull private Element createBreakpointMark(){  final Element mainElement=Elements.createDivElement();  final Element imageElement=getMarkElement(false);  mainElement.appendChild(imageElement);  mainElement.getStyle().setCursor(CSSStyleDeclaration.Cursor.POINTER);  mainElement.getDataset().setAt(BREAKPOINT_ACTIVE_PROPERTY_NAME,Boolean.FALSE);  return mainElement;}  }
class C{  @Override public void onCreate(Bundle bundle){  super.onCreate(bundle);  setContentView(R.layout.ocr_capture);  mPreview=(CameraSourcePreview)findViewById(R.id.preview);  mGraphicOverlay=(GraphicOverlay<OcrGraphic>)findViewById(R.id.graphicOverlay);  boolean autoFocus=true;  boolean useFlash=false;  int rc=ActivityCompat.checkSelfPermission(this,Manifest.permission.CAMERA);  if (rc == PackageManager.PERMISSION_GRANTED) {    createCameraSource(autoFocus,useFlash);  } else {    requestCameraPermission();  }  gestureDetector=new GestureDetector(this,new CaptureGestureListener());  scaleGestureDetector=new ScaleGestureDetector(this,new ScaleListener());  Snackbar.make(mGraphicOverlay,"Tap to Speak. Pinch/Stretch to zoom",Snackbar.LENGTH_LONG).show();}  }
class C{  public String string(){  return str;}  }
class C{  @SuppressWarnings("unchecked") public static boolean isGzipSupported(final HttpServletRequest request){  if (request != null) {    final Enumeration<String> headerNames=request.getHeaderNames();    if (headerNames != null) {      while (headerNames.hasMoreElements()) {        final String headerName=headerNames.nextElement();        final Matcher m=PATTERN_ACCEPT_ENCODING.matcher(headerName);        if (m.find()) {          final String headerValue=request.getHeader(headerName);          final Matcher mValue=PATTERN_GZIP.matcher(headerValue);          return mValue.find();        }      }    }  }  return false;}  }
class C{  public String diff_toDelta(LinkedList<Diff> diffs){  StringBuilder text=new StringBuilder();  for (  Diff aDiff : diffs) {switch (aDiff.operation) {case INSERT:      try {        text.append("+").append(URLEncoder.encode(aDiff.text,"UTF-8").replace('+',' ')).append("\t");      } catch (      UnsupportedEncodingException e) {        throw new Error("This system does not support UTF-8.",e);      }    break;case DELETE:  text.append("-").append(aDiff.text.length()).append("\t");break;case EQUAL:text.append("=").append(aDiff.text.length()).append("\t");break;}}String delta=text.toString();if (delta.length() != 0) {delta=delta.substring(0,delta.length() - 1);delta=unescapeForEncodeUriCompatability(delta);}return delta;}  }
class C{  @Inline @Uninterruptible private static void processChunk(Address chunkStart,Address imageStart,Address mapStart,Address mapEnd,TraceLocal trace){  int value;  Offset offset=Offset.zero();  Address cursor=chunkStart;  while ((value=(cursor.loadByte() & 0xff)) != 0) {    if ((value & LONGENCODING_MASK) != 0) {      offset=decodeLongEncoding(cursor);      cursor=cursor.plus(LONGENCODING_OFFSET_BYTES);    } else {      offset=offset.plus(value & 0xfc);      cursor=cursor.plus(1);    }    int runlength=0;    if ((value & RUN_MASK) != 0) {      runlength=cursor.loadByte() & 0xff;      cursor=cursor.plus(1);    }    if (VM.VerifyAssertions)     VM._assert(isAddressAligned(offset));    Address slot=imageStart.plus(offset);    if (DEBUG)     refs++;    if (!FILTER || slot.loadAddress().GT(mapEnd)) {      if (DEBUG)       roots++;      trace.processRootEdge(slot,false);    }    if (runlength != 0) {      for (int i=0; i < runlength; i++) {        offset=offset.plus(BYTES_IN_ADDRESS);        slot=imageStart.plus(offset);        if (VM.VerifyAssertions)         VM._assert(isAddressAligned(slot));        if (DEBUG)         refs++;        if (!FILTER || slot.loadAddress().GT(mapEnd)) {          if (DEBUG)           roots++;          if (ScanThread.VALIDATE_REFS)           checkReference(slot);          trace.processRootEdge(slot,false);        }      }    }  }}  }
class C{  public ObjectArrayList(){  this(10);}  }
class C{  public SlowPathException(String message){  super(message);  CompilerDirectives.transferToInterpreterAndInvalidate();}  }
class C{  @Override public int intValue(){  return value;}  }
class C{  public final static <T>Stream<ListX<T>> groupedWhile(final Stream<T> stream,final Predicate<? super T> predicate){  return new BatchWhileOperator<T,ListX<T>>(stream).batchWhile(predicate);}  }
class C{  public static void checkState(final boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public void onDestroy(){  closeDialog();}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return VALUE;case 2:  return VERSION;default :return null;}}  }
class C{  public Value read(Type type,NodeMap<InputNode> node,Map map) throws Exception {  Value value=strategy.read(type,node,map);  if (isReference(value)) {    return value;  }  return read(type,node,value);}  }
class C{  public void fireSuspendEvent(final int detail){  fireEvent(new DebugEvent(this,DebugEvent.SUSPEND,detail));}  }
class C{  private void initialize() throws ClassFormatException {  try {    for (int i=0, max=this.fieldsCount; i < max; i++) {      this.fields[i].initialize();    }    for (int i=0, max=this.methodsCount; i < max; i++) {      this.methods[i].initialize();    }    if (this.innerInfos != null) {      for (int i=0, max=this.innerInfos.length; i < max; i++) {        this.innerInfos[i].initialize();      }    }    if (this.annotations != null) {      for (int i=0, max=this.annotations.length; i < max; i++) {        this.annotations[i].initialize();      }    }    this.getEnclosingMethod();    reset();  } catch (  RuntimeException e) {    ClassFormatException exception=new ClassFormatException(e,this.classFileName);    throw exception;  }}  }
class C{  private void onPress(Event event){  this.wasPressed=true;  CircleMenu.this.hideDelay.playFromStart();  event.consume();}  }
class C{  int encodeHash(long x){  int prefix=(int)((x >>> _64minuspprime) & 0x7fffffffL);  int encoded=prefix;  if (0 == (x & this.ptopprimemask)) {    byte rho=rho(x & this.pprimemask,_64minuspprime);    encoded=encoded << 7;    rho=(byte)((rho ^ 0x3f) & 0x3f);    encoded=encoded | ((rho << 1) & 0x7e);    encoded=encoded | 0x1;  } else {    encoded=encoded << 1;  }  return encoded;}  }
class C{  private void parseStream(StreamInfo streamInfo,String json){  try {    JSONParser parser=new JSONParser();    JSONObject root=(JSONObject)parser.parse(json);    JSONObject stream=(JSONObject)root.get("stream");    if (stream == null) {      streamInfo.setOffline();    } else {      StreamInfo result=parseStream(stream,false);      if (result == null || result != streamInfo) {        LOGGER.warning("Error parsing stream (" + streamInfo.getStream() + "): "+ json);        streamInfo.setUpdateFailed();      }    }  } catch (  ParseException ex) {    streamInfo.setUpdateFailed();    LOGGER.warning("Error parsing stream info: " + ex.getLocalizedMessage());  }}  }
class C{  private ListMultimap<String,URI> groupStoragePoolsByStorageSystem(Set<String> allPoolUris){  Set<String> columnNames=new HashSet<String>();  columnNames.add(STORAGE_DEVICE);  Collection<StoragePool> storagePools=_objectCache.getDbClient().queryObjectFields(StoragePool.class,columnNames,new ArrayList<URI>(Collections2.transform(allPoolUris,CommonTransformerFunctions.FCTN_STRING_TO_URI)));  ListMultimap<String,URI> storageToPoolMap=ArrayListMultimap.create();  for (  StoragePool pool : storagePools) {    storageToPoolMap.put(pool.getStorageDevice().toString(),pool.getId());  }  return storageToPoolMap;}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {}  }
class C{  public void testInit() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, IllegalStateException, InvalidAlgorithmParameterException, InvalidKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] b={(byte)1,(byte)2,(byte)3,(byte)4,(byte)5};  SecretKeySpec sks=new SecretKeySpec(b,"SHA1");  DHGenParameterSpec algPS=new DHGenParameterSpec(1,2);  PSSParameterSpec algPSS=new PSSParameterSpec(20);  SecretKeySpec sks1=new SecretKeySpec(b,"RSA");  for (int i=0; i < macs.length; i++) {    macs[i].init(sks);    try {      macs[i].init(sks1,algPSS);      fail("init(..) accepts incorrect AlgorithmParameterSpec parameter");    } catch (    InvalidAlgorithmParameterException e) {    }    try {      macs[i].init(sks,algPS);      fail("init(..) accepts incorrect AlgorithmParameterSpec parameter");    } catch (    InvalidAlgorithmParameterException e) {    }    try {      macs[i].init(null,null);      fail("InvalidKeyException must be thrown");    } catch (    InvalidKeyException e) {    }    try {      macs[i].init(null);      fail("InvalidKeyException must be thrown");    } catch (    InvalidKeyException e) {    }  }}  }
class C{  public boolean isConnectionOpened(File dbPath){  return connPoolMap.containsKey(dbPath);}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  @Override @SuppressWarnings("rawtypes") public void init(NamedList args){  if (args != null) {    Object o;    o=args.get("defaults");    if (o != null && o instanceof NamedList) {      defaults=SolrParams.toSolrParams((NamedList)o);    } else {      defaults=SolrParams.toSolrParams(args);    }    o=args.get("appends");    if (o != null && o instanceof NamedList) {      appends=SolrParams.toSolrParams((NamedList)o);    }    o=args.get("invariants");    if (o != null && o instanceof NamedList) {      invariants=SolrParams.toSolrParams((NamedList)o);    }  }}  }
class C{  public void engineSetKeyEntry(String alias,byte[] key,Certificate[] chain) throws KeyStoreException {  token.ensureValid();  throw new ProviderException(new UnsupportedOperationException());}  }
class C{  public Boolean isCurrentIpV6Enabled(){  return currentIpV6Enabled;}  }
class C{  @Override public int numberOfClusters() throws Exception {  return m_wrappedClusterer.numberOfClusters();}  }
class C{  public Boolean shouldOpenExternalUrl(String url){  for (  PluginEntry entry : this.entryMap.values()) {    CordovaPlugin plugin=pluginMap.get(entry.service);    if (plugin != null) {      Boolean result=plugin.shouldOpenExternalUrl(url);      if (result != null) {        return result;      }    }  }  return false;}  }
class C{  public String toHexString(final int start,final int length){  final int roundedStart=(start / LOG_BYTES_PER_ROW) * LOG_BYTES_PER_ROW;  final StringBuilder sb=new StringBuilder("buffer byte dump\n");  int index=roundedStart;  for (int nLogged=0; nLogged < length; nLogged+=LOG_BYTES_PER_ROW) {    sb.append(String.format(" [%05d-%05d]",index,index + LOG_BYTES_PER_ROW - 1));    for (int i=0; i < LOG_BYTES_PER_ROW; ++i) {      try {        final byte b=getByte(index++);        sb.append(String.format(" 0x%02x",b));      } catch (      IndexOutOfBoundsException ioob) {        sb.append(" <ioob>");      }    }    sb.append('\n');  }  return sb.toString();}  }
class C{  public ObjectFactory(){}  }
class C{  private void showUnregisterDialog(){  AlertDialog.Builder alertDialog=CommonDialogUtils.getAlertDialogWithTwoButtonAndTitle(context,null,getResources().getString(R.string.dialog_unregister),getResources().getString(R.string.yes),getResources().getString(R.string.no),dialogClickListener,dialogClickListener);  alertDialog.show();}  }
class C{  private void notifyInterfaceLinkStateChanged(String iface,boolean up){  final int length=mObservers.beginBroadcast();  for (int i=0; i < length; i++) {    try {      mObservers.getBroadcastItem(i).interfaceLinkStateChanged(iface,up);    } catch (    RemoteException e) {    }catch (    RuntimeException e) {    }  }  mObservers.finishBroadcast();}  }
class C{  public AssetFileDescriptor(ParcelFileDescriptor fd,long startOffset,long length){  if (fd == null) {    throw new IllegalArgumentException("fd must not be null");  }  if (length < 0 && startOffset != 0) {    throw new IllegalArgumentException("startOffset must be 0 when using UNKNOWN_LENGTH");  }  mFd=fd;  mStartOffset=startOffset;  mLength=length;}  }
class C{  public Bundler putDoubleArray(String key,double[] value){  bundle.putDoubleArray(key,value);  return this;}  }
class C{  private JComponent createStyleTypeSelector(){  int pad=SBoxLayout.COMMON_PADDING;  JComponent styleBox=SBoxLayout.createContainer(SBoxLayout.VERTICAL,pad);  JComponent definedStylesHBox=SBoxLayout.createContainer(SBoxLayout.HORIZONTAL,pad);  JLabel selectorLabel=new JLabel("Client style:");  selectorLabel.setName("defined");  definedStylesHBox.add(selectorLabel);  JComponent selector=createStyleSelector();  selector.setName("defined");  definedStylesHBox.add(selector);  definedStylesHBox.setToolTipText("<html>The style used to draw the controls in the game client." + "<p>This affects the look only, and will not change the behavior of the game.</html>");  styleBox.add(definedStylesHBox);  return styleBox;}  }
class C{  public static RxPaper book(){  return book(null);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void addPeerTask(PeerTask<T> peerTask){  Preconditions.checkNotNull(peerTask,"Invalid peer task");  peerTasks.add(peerTask);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void deleteServiceFile(long serviceInfoId,long templatefileId) throws PortalException, SystemException {  ServiceFileTemplate sft=null;  ServiceFileTemplatePK serviceFilePK=new ServiceFileTemplatePK(serviceInfoId,templatefileId);  sft=serviceFileTemplatePersistence.fetchByPrimaryKey(serviceFilePK);  if (Validator.isNotNull(sft)) {    serviceFileTemplatePersistence.remove(sft);  } else {  }}  }
class C{  public Shipping(String country,String service,float price,String currency){  this(country,null,service,price,currency);}  }
class C{  public Boolean isNetworkBackupAndRestoreSupported(){  return networkBackupAndRestoreSupported;}  }
class C{  NioDatagramSession(IoService service,DatagramChannel channel,IoProcessor<NioSession> processor){  this(service,channel,processor,channel.socket().getRemoteSocketAddress());}  }
class C{  public void logTrace(Object message,Throwable exception){  logInternal(TRACE,message,exception);}  }
class C{  public Jerry addClass(String... classNames){  for (  Node node : nodes) {    String attrClass=node.getAttribute("class");    Set<String> classes=createPropertiesSet(attrClass,' ');    boolean wasChange=false;    for (    String className : classNames) {      if (classes.add(className) == true) {        wasChange=true;      }    }    if (wasChange) {      String attrValue=generateAttributeValue(classes,' ');      node.setAttribute("class",attrValue);    }  }  return this;}  }
class C{  boolean isViewableAs(MethodType newType,boolean keepInterfaces){  if (!VerifyType.isNullConversion(returnType(),newType.returnType(),keepInterfaces))   return false;  return parametersAreViewableAs(newType,keepInterfaces);}  }
class C{  public ApprovalDialog(Dialog owner,ModalityType modality){  super(owner,modality);}  }
class C{  public SolrClusterStats(final DiskUsageStats diskUsage,final MemoryUsageStats memoryUsage){  this.diskUsage=diskUsage;  this.memoryUsage=memoryUsage;}  }
class C{  @Override public final void readFields(final DataInput input) throws IOException {  int size=input.readInt();  for (int i=0; i < size; i++) {    SemiCluster c=new SemiCluster();    c.readFields(input);    add(c);  }}  }
class C{  public static char[] replace(final char[] input){  int surLow=0xD800;  int surHgh=0xDFFF;  int end=input.length;  char[] output=new char[end];  for (int i=0; i < end; i++) {    if ((int)input[i] >= surLow && input[i] <= surHgh) {      output[i]='?';    } else {      output[i]=input[i];    }  }  return output;}  }
class C{  public void hide(){  mDismissed=true;  removeCallbacks(mDelayedShow);  long diff=System.currentTimeMillis() - mStartTime;  if (diff >= MIN_SHOW_TIME || mStartTime == -1) {    setVisibility(View.GONE);  } else {    if (!mPostedHide) {      postDelayed(mDelayedHide,MIN_SHOW_TIME - diff);      mPostedHide=true;    }  }}  }
class C{  public static DalvInsnList makeImmutable(ArrayList<DalvInsn> list,int regCount){  int size=list.size();  DalvInsnList result=new DalvInsnList(size,regCount);  for (int i=0; i < size; i++) {    result.set(i,list.get(i));  }  result.setImmutable();  return result;}  }
class C{  protected boolean isTrafficClassChanged(){  return true;}  }
class C{  public DrawerBuilder withDrawerWidthDp(int drawerWidthDp){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  this.mDrawerWidth=Utils.convertDpToPx(mActivity,drawerWidthDp);  return this;}  }
class C{  public int numNodes(){  return nodes.size();}  }
class C{  public void waitSensorInactive(Sensor[] mSensors){  if (log.isDebugEnabled()) {    log.debug("waitSensorInactive[] starts");  }  waitSensorState(mSensors,Sensor.INACTIVE);}  }
class C{  public static void writeStringToFile(File file,String string,Charset charset) throws IOException, FileNotFoundException {  FileOutputStream fileOS=new FileOutputStream(file);  OutputStreamWriter osWriter=new OutputStreamWriter(fileOS,charset);  StreamUtil.writeStringToWriter(string,osWriter);}  }
class C{  public synchronized void close(){  if (!this.mIsClosed) {    this.mSocket.close();    this.mIsClosed=true;  }}  }
class C{  protected void addTypePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_TypeCastExpression_type_feature"),getString("_UI_PropertyDescriptor_description","_UI_TypeCastExpression_type_feature","_UI_TypeCastExpression_type"),ExpressionsPackage.Literals.TYPE_CAST_EXPRESSION__TYPE,true,false,true,null,null,null));}  }
class C{  public static void checkMatrix(String outDir,long rows,long cols,double min,double max){  try {    FileSystem fs=FileSystem.get(conf);    Path outDirectory=new Path(outDir);    assertTrue(outDir + " does not exist",fs.exists(outDirectory));    if (fs.getFileStatus(outDirectory).isDirectory()) {      FileStatus[] outFiles=fs.listStatus(outDirectory);      for (      FileStatus file : outFiles) {        FSDataInputStream fsout=fs.open(file.getPath());        BufferedReader outIn=new BufferedReader(new InputStreamReader(fsout));        String line;        while ((line=outIn.readLine()) != null) {          String[] rcv=line.split(" ");          long row=Long.parseLong(rcv[0]);          long col=Long.parseLong(rcv[1]);          double value=Double.parseDouble(rcv[2]);          assertTrue("invalid row index",(row > 0 && row <= rows));          assertTrue("invlaid column index",(col > 0 && col <= cols));          assertTrue("invalid value",((value >= min && value <= max) || value == 0));        }        outIn.close();      }    } else {      FSDataInputStream fsout=fs.open(outDirectory);      BufferedReader outIn=new BufferedReader(new InputStreamReader(fsout));      String line;      while ((line=outIn.readLine()) != null) {        String[] rcv=line.split(" ");        long row=Long.parseLong(rcv[0]);        long col=Long.parseLong(rcv[1]);        double value=Double.parseDouble(rcv[2]);        assertTrue("invalid row index",(row > 0 && row <= rows));        assertTrue("invlaid column index",(col > 0 && col <= cols));        assertTrue("invalid value",((value >= min && value <= max) || value == 0));      }      outIn.close();    }  } catch (  IOException e) {    fail("unable to read file: " + e.getMessage());  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.190 -0500",hash_original_method="B255F5DC6E019A7B063A4503DC44009F",hash_generated_method="10DFC2AEEDC3FC67990E5E8E9A4F0AA7") public synchronized int runCount(){  return fRunTests;}  }
class C{  public static void execute(ExecutablePool pool,String region,Function function,ServerRegionFunctionExecutor serverRegionExecutor,ResultCollector resultCollector,byte hasResult,int mRetryAttempts){  AbstractOp op=new ExecuteRegionFunctionOpImpl(region,function,serverRegionExecutor,resultCollector,hasResult,new HashSet<String>());  int retryAttempts=0;  boolean reexecute=false;  boolean reexecuteForServ=false;  Set<String> failedNodes=new HashSet<String>();  AbstractOp reexecOp=null;  int maxRetryAttempts=0;  if (function.isHA()) {    maxRetryAttempts=mRetryAttempts;  }  final boolean isDebugEnabled=logger.isDebugEnabled();  do {    try {      if (reexecuteForServ) {        reexecOp=new ExecuteRegionFunctionOpImpl((ExecuteRegionFunctionOpImpl)op,(byte)1,failedNodes);        pool.execute(reexecOp,0);      } else {        pool.execute(op,0);      }      reexecute=false;      reexecuteForServ=false;    } catch (    InternalFunctionInvocationTargetException e) {      if (isDebugEnabled) {        logger.debug("ExecuteRegionFunctionOp#execute : Received InternalFunctionInvocationTargetException. The failed nodes are {}",e.getFailedNodeSet());      }      reexecute=true;      resultCollector.clearResults();      Set<String> failedNodesIds=e.getFailedNodeSet();      failedNodes.clear();      if (failedNodesIds != null) {        failedNodes.addAll(failedNodesIds);      }    }catch (    ServerConnectivityException se) {      retryAttempts++;      if (isDebugEnabled) {        logger.debug("ExecuteRegionFunctionOp#execute : Received ServerConnectivityException. The exception is {} The retryattempt is : {} maxRetryAttempts {}",se,retryAttempts,maxRetryAttempts);      }      if (se instanceof ServerOperationException) {        throw se;      }      if ((retryAttempts > maxRetryAttempts && maxRetryAttempts != -1))       throw se;      reexecuteForServ=true;      resultCollector.clearResults();      failedNodes.clear();    }  } while (reexecuteForServ);  if (reexecute && function.isHA()) {    ExecuteRegionFunctionOp.reexecute(pool,region,function,serverRegionExecutor,resultCollector,hasResult,failedNodes,maxRetryAttempts - 1);  }}  }
class C{  public static void writeLines(File file,Collection<?> lines,String lineEnding,boolean append) throws IOException {  writeLines(file,null,lines,lineEnding,append);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  void handleQuitButton(){  dir=null;  file=null;  target.hide();}  }
class C{  protected NativePointerObject(long nativePointer){  this.nativePointer=nativePointer;}  }
class C{  public InlineQueryResultCachedAudioBuilder id(String id){  this.id=id;  return this;}  }
class C{  public void testSomeEndNodesNotReachable(){  Fixture f=new Fixture();  TestTimeCost tc=new TestTimeCost();  tc.setData(Id.create(1,Link.class),2.0,2.0);  tc.setData(Id.create(2,Link.class),1.0,1.0);  tc.setData(Id.create(3,Link.class),3.0,3.0);  tc.setData(Id.create(4,Link.class),2.0,2.0);  tc.setData(Id.create(5,Link.class),1.0,1.0);  tc.setData(Id.create(6,Link.class),3.0,3.0);  tc.setData(Id.create(7,Link.class),4.0,4.0);  MultiNodeDijkstra dijkstra=new MultiNodeDijkstra(f.network,tc,tc);  Map<Node,InitialNode> fromNodes=new HashMap<Node,InitialNode>();  fromNodes.put(f.network.getNodes().get(Id.create(2,Node.class)),new InitialNode(2.0,2.0));  fromNodes.put(f.network.getNodes().get(Id.create(1,Node.class)),new InitialNode(3.0,3.0));  Map<Node,InitialNode> toNodes=new HashMap<Node,InitialNode>();  toNodes.put(f.network.getNodes().get(Id.create(5,Node.class)),new InitialNode(1.0,1.0));  toNodes.put(f.network.getNodes().get(Id.create(3,Node.class)),new InitialNode(3.0,3.0));  Path p=dijkstra.calcLeastCostPath(fromNodes,toNodes,null);  assertNotNull("no path found!",p);  assertEquals(3,p.links.size());  assertEquals("2",p.links.get(0).getId().toString());  assertEquals("7",p.links.get(1).getId().toString());  assertEquals("5",p.links.get(2).getId().toString());}  }
class C{  public Builder removePhoneNumbers(){  this.phoneNumbers.clear();  return this;}  }
class C{  final void initializeOwner(LocalRegion drs){  getDiskStore().initializeOwner(drs);}  }
class C{  public synchronized boolean containsCommand(String command){  return commands.containsKey(StringUtil.toLowerCase(command));}  }
class C{  protected boolean isValidClassname(String key,String classname){  boolean result;  Class<?> cls;  Class<?> clsCurrent;  Vector<String> list;  int i;  result=true;  if (m_Excludes.containsKey(key)) {    try {      clsCurrent=Class.forName(classname);    } catch (    Exception e) {      clsCurrent=null;    }    if ((clsCurrent != null) && result) {      list=m_Excludes.get(key).get(EXCLUDE_INTERFACE);      for (i=0; i < list.size(); i++) {        try {          cls=Class.forName(list.get(i).toString());          if (ClassDiscovery.hasInterface(cls,clsCurrent)) {            result=false;            break;          }        } catch (        Exception e) {        }      }    }    if ((clsCurrent != null) && result) {      list=m_Excludes.get(key).get(EXCLUDE_SUPERCLASS);      for (i=0; i < list.size(); i++) {        try {          cls=Class.forName(list.get(i).toString());          if (ClassDiscovery.isSubclass(cls,clsCurrent)) {            result=false;            break;          }        } catch (        Exception e) {        }      }    }    if ((clsCurrent != null) && result) {      list=m_Excludes.get(key).get(EXCLUDE_CLASS);      for (i=0; i < list.size(); i++) {        try {          cls=Class.forName(list.get(i).toString());          if (cls.getName().equals(clsCurrent.getName())) {            result=false;          }        } catch (        Exception e) {        }      }    }  }  return result;}  }
class C{  protected void copyResponseEntity(HttpResponse proxyResponse,HttpServletResponse servletResponse) throws IOException {  HttpEntity entity=proxyResponse.getEntity();  if (entity != null) {    OutputStream servletOutputStream=servletResponse.getOutputStream();    entity.writeTo(servletOutputStream);  }}  }
class C{  public RowBuilder identityCol(String name){  Column column=new ColumnIdentity(_columns.size(),name,_offset);  _offset+=column.length();  _columns.add(column);  return this;}  }
class C{  public UmmalquraCalendar(int year,int month,int dayOfMonth,int hourOfDay,int minute){  this(year,month,dayOfMonth,hourOfDay,minute,0);}  }
class C{  public void start(@NonNull Activity activity,int requestCode){  activity.startActivityForResult(getIntent(activity),requestCode);}  }
class C{  public Boolean isNegate(){  return negate;}  }
class C{  @RequestMapping(value="/admin/table",method=RequestMethod.POST) public String admin(HttpServletRequest request,String fqdn,String dataTimestampField,String dataTimestampFieldFormat){  tableEntityService.setTimestampField(fqdn,dataTimestampField,dataTimestampFieldFormat);  return "redirect:" + request.getHeader("Referer") + "#adminContent";}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(SplitDBdotNameTest.class);}  }
class C{  public static String formatMs(long milliseconds){  if (milliseconds < 0) {    return "--:--";  }  long seconds=(milliseconds % DateUtils.MINUTE_IN_MILLIS) / DateUtils.SECOND_IN_MILLIS;  long minutes=(milliseconds % DateUtils.HOUR_IN_MILLIS) / DateUtils.MINUTE_IN_MILLIS;  long hours=(milliseconds % DateUtils.DAY_IN_MILLIS) / DateUtils.HOUR_IN_MILLIS;  formatBuilder.setLength(0);  if (hours > 0) {    return formatter.format("%d:%02d:%02d",hours,minutes,seconds).toString();  }  return formatter.format("%02d:%02d",minutes,seconds).toString();}  }
class C{  @Override public ImmutableSortedSet<K> keySet(){  return keySet;}  }
class C{  private boolean isDiskOff(HostScsiDisk disk){  String[] state=disk.getOperationalState();  if (state == null || state.length == 0) {    return false;  }  String primaryState=state[0];  return StringUtils.equals(primaryState,ScsiLunState.off.name());}  }
class C{  public void startShimmerAnimation(){  if (mAnimationStarted) {    return;  }  Animator animator=getShimmerAnimation();  animator.start();  mAnimationStarted=true;}  }
class C{  public MLOutput execute(String dmlScriptFilePath,ArrayList<String> args) throws IOException, DMLException, ParseException {  String[] argsArr=new String[args.size()];  argsArr=args.toArray(argsArr);  return execute(dmlScriptFilePath,argsArr,false,null);}  }
class C{  private void verifyBlockObjects(List<BlockObject> blockObjects){  for (  BlockObject blockObject : blockObjects) {    log.info("Verifying BlockObject migration for " + blockObject.getLabel());    Assert.assertTrue("BlockObject.consistencyGroups field should be empty.",blockObject.getConsistencyGroups() == null || blockObject.getConsistencyGroups().isEmpty());    Assert.assertNotNull("BlockObject.consistencyGroup field should not be null.",blockObject.getConsistencyGroup());  }}  }
class C{  public static Properties parsePropertyList(String list,String propertySeparators,String keyValueSeparators) throws PropertyStringFormatException {  Properties props=new Properties();  Vector<String> keyValuePairs=parseMarkers(list,propertySeparators);  for (int i=0; i < keyValuePairs.size(); i++) {    StringTokenizer tokens=new StringTokenizer(keyValuePairs.elementAt(i),keyValueSeparators);    try {      String key=tokens.nextToken().trim();      String value=tokens.nextToken().trim();      props.put(key,value);    } catch (    NoSuchElementException nsee) {      throw new PropertyStringFormatException(list);    }  }  return props;}  }
class C{  public R proceed2(final T2 param){  return fn.apply(param1,param,param3);}  }
class C{  public static SystemSettings fromJson(String json){  checkArgument(!isNullOrEmpty(json),"json");  return fromJson(toBytes(json));}  }
class C{  protected String doIt() throws Exception {  log.info("doIt - C_BPartner_ID=" + p_C_BPartner_ID);  if (p_C_BPartner_ID == 0)   throw new IllegalArgumentException("No Business Partner ID");  MBPartner bp=new MBPartner(getCtx(),p_C_BPartner_ID,get_TrxName());  if (bp.get_ID() == 0)   throw new IllegalArgumentException("Business Partner not found - C_BPartner_ID=" + p_C_BPartner_ID);  if (bp.getAD_OrgBP_ID_Int() == 0)   throw new IllegalArgumentException("Business Partner not linked to an Organization");  bp.setAD_OrgBP_ID(null);  if (!bp.save())   throw new IllegalArgumentException("Business Partner not changed");  return "OK";}  }
class C{  public void test_Of_EEE(){  EnumSet<EnumWithInnerClass> enumSet=EnumSet.of(EnumWithInnerClass.a,EnumWithInnerClass.b,EnumWithInnerClass.c);  assertEquals("Size of enumSet should be 3:",3,enumSet.size());  assertTrue("enumSet should contain EnumWithSubclass.a:",enumSet.contains(EnumWithInnerClass.a));  assertTrue("Should return true",enumSet.contains(EnumWithInnerClass.c));  try {    EnumSet.of((EnumWithInnerClass)null,null,null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  enumSet=EnumSet.of(EnumWithInnerClass.a,EnumWithInnerClass.b,EnumWithInnerClass.b);  assertEquals("enumSet should contain 2 elements:",2,enumSet.size());  EnumSet<HugeEnumWithInnerClass> hugeEnumSet=EnumSet.of(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.b,HugeEnumWithInnerClass.c);  assertEquals(3,hugeEnumSet.size());  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.a));  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.c));  try {    EnumSet.of((HugeEnumWithInnerClass)null,null,null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  hugeEnumSet=EnumSet.of(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.b,HugeEnumWithInnerClass.b);  assertEquals(2,hugeEnumSet.size());}  }
class C{  @Override public int isProvidingStrongPower(IBlockAccess par1IBlockAccess,int x,int y,int z,int side){  TileEntity tileEntity=par1IBlockAccess.getTileEntity(x,y,z);  if (tileEntity instanceof IRedstoneProvider) {    return ((IRedstoneProvider)tileEntity).isPoweringTo(ForgeDirection.getOrientation(side)) ? 15 : 0;  }  return 0;}  }
class C{  protected DefaultConditionFactory(){}  }
class C{  public Matrix add(final Matrix another){  QL.require(rows() == another.rows() && cols() == another.cols(),MATRIX_IS_INCOMPATIBLE);  final Matrix result=new Matrix(rows(),cols());  if (this.addr.isContiguous() && another.addr.isContiguous()) {    for (int i=0; i < size(); i++) {      result.$[i]=this.$[i] + another.$[i];    }  } else {    int addr=0;    final Address.MatrixAddress.MatrixOffset toff=this.addr.offset();    final Address.MatrixAddress.MatrixOffset aoff=another.addr.offset();    for (int row=0; row < rows(); row++) {      toff.setRow(row);      aoff.setRow(row);      for (int col=0; col < cols(); col++) {        result.$[addr]=this.$[toff.op()] + another.$[aoff.op()];        addr++;        toff.nextCol();        aoff.nextCol();      }    }  }  return result;}  }
class C{  Prepared parse(String sql){  Prepared p;  try {    p=parse(sql,false);  } catch (  DbException e) {    if (e.getErrorCode() == ErrorCode.SYNTAX_ERROR_1) {      p=parse(sql,true);    } else {      throw e.addSQL(sql);    }  }  p.setPrepareAlways(recompileAlways);  p.setParameterList(parameters);  return p;}  }
class C{  @Override public RegisterFileInfo execute(String[] params){  try {    RegisterFileInfo registerFileInfo=new RegisterFileInfo();    CommandLine commandLine=getCommandLine(params,PARAMS_STRUCTURE);    String pid=commandLine.getOptionValue("sub-process-id");    LOGGER.debug("subProcessId is " + pid);    String sId=commandLine.getOptionValue("server-id");    LOGGER.debug("serverId is " + sId);    String path=commandLine.getOptionValue("path");    LOGGER.debug("path is " + path);    String fSize=commandLine.getOptionValue("file-size");    LOGGER.debug("file size is " + fSize);    String fHash=commandLine.getOptionValue("file-hash");    LOGGER.debug("file-hash " + fHash);    String creationTs=commandLine.getOptionValue("creation-timestamp");    LOGGER.debug("creation Ts " + creationTs);    String batchId=commandLine.getOptionValue("batch-id");    LOGGER.debug("batchId " + batchId);    if ("0".equalsIgnoreCase(batchId) || "NULL".equalsIgnoreCase(batchId)) {      registerFileInfo.setBatchId(null);    } else {      registerFileInfo.setBatchId(new Long(batchId));    }    registerFileInfo.setSubProcessId(Integer.parseInt(pid));    registerFileInfo.setPath(path);    registerFileInfo.setServerId(Integer.parseInt(sId));    registerFileInfo.setFileSize(Long.parseLong(fSize));    registerFileInfo.setFileHash(fHash);    registerFileInfo.setCreationTs(Timestamp.valueOf(creationTs));    registerFileInfo=registerFileDAO.registerFile(registerFileInfo);    LOGGER.debug("registerFileInfo " + registerFileInfo.getPath() + " "+ registerFileInfo.getBatchId());    LOGGER.debug("registerFileInfo " + registerFileInfo.getSubProcessId() + " "+ registerFileInfo.getCreationTs());    return registerFileInfo;  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  public boolean isSetNoteId(){  return this.noteId != null;}  }
class C{  public SearchObject(ImageResource resource,String keyword){  this.resource=resource;  this.keyword=keyword;}  }
class C{  public void writeToParcel(Parcel dest,int flags){  if (address != null) {    dest.writeByte((byte)1);    dest.writeByteArray(address.getAddress());    dest.writeInt(prefixLength);  } else {    dest.writeByte((byte)0);  }}  }
class C{  public void testWarrant() throws Exception {  _OBlockMgr=InstanceManager.getDefault(OBlockManager.class);  OBlock bWest=_OBlockMgr.createNewOBlock("OB1","West");  OBlock bEast=_OBlockMgr.createNewOBlock("OB2","East");  OBlock bNorth=_OBlockMgr.createNewOBlock("OB3","North");  OBlock bSouth=_OBlockMgr.createNewOBlock("OB4","South");  Assert.assertEquals("OBlock",bNorth,_OBlockMgr.getOBlock("North"));  Assert.assertEquals("OBlock",bEast,_OBlockMgr.getOBlock("OB2"));  _portalMgr=InstanceManager.getDefault(PortalManager.class);  Portal pNorthWest=_portalMgr.createNewPortal(null,"NorthWest");  pNorthWest.setToBlock(bWest,false);  pNorthWest.setFromBlock(bNorth,false);  Portal pSouthWest=_portalMgr.createNewPortal(null,"SouthWest");  pSouthWest.setToBlock(bWest,false);  pSouthWest.setFromBlock(bSouth,false);  Assert.assertEquals("Portal",pNorthWest,_portalMgr.getPortal("NorthWest"));  Assert.assertEquals("Portal Block",bSouth,_portalMgr.getPortal("SouthWest").getFromBlock());  Assert.assertEquals("Portal",pSouthWest,bSouth.getPortalByName("SouthWest"));  Assert.assertEquals("Portal Block","West",_portalMgr.getPortal("NorthWest").getToBlockName());  Assert.assertEquals("Portal Block","North",_portalMgr.getPortal("NorthWest").getFromBlockName());  Portal pNorthEast=_portalMgr.createNewPortal(null,"NorthEast");  pNorthEast.setToBlock(_OBlockMgr.getOBlock("OB2"),false);  pNorthEast.setFromBlock(_OBlockMgr.getOBlock("North"),false);  Portal pSouthEast=_portalMgr.createNewPortal(null,"SouthEast");  OBlock east=_OBlockMgr.getOBlock("OB2");  pSouthEast.setToBlock(east,false);  pSouthEast.setFromBlock(_OBlockMgr.getOBlock("South"),false);  Assert.assertEquals("Portal Block",east,_portalMgr.getPortal("SouthEast").getToBlock());  Assert.assertEquals("Portal Block","West",_portalMgr.getPortal("NorthWest").getToBlockName());  Assert.assertEquals("Portal Block",_OBlockMgr.getOBlock("South"),_portalMgr.getPortal("SouthWest").getFromBlock());  _turnoutMgr=InstanceManager.turnoutManagerInstance();  Turnout northSwitch=_turnoutMgr.newTurnout("IT1","NorthSwitch");  ArrayList<BeanSetting> settings=new ArrayList<BeanSetting>();  settings.add(new BeanSetting(northSwitch,"NorthSwitch",Turnout.CLOSED));  OBlock north=_OBlockMgr.getOBlock("North");  OPath path=new OPath("NorthToWest",north,null,_portalMgr.getPortal("NorthWest"),settings);  north.addPath(path);  settings=new ArrayList<BeanSetting>();  settings.add(new BeanSetting(northSwitch,"NorthSwitch",Turnout.THROWN));  path=new OPath("NorthToEast",north,null,_portalMgr.getPortal("NorthEast"),settings);  north.addPath(path);  Assert.assertEquals("Path Block",path,north.getPathByName("NorthToEast"));  Assert.assertEquals("Path Block","NorthToWest",north.getPathByName("NorthToWest").getName());  Turnout southSwitch=_turnoutMgr.newTurnout("IT2","SouthSwitch");  OBlock south=_OBlockMgr.getOBlock("South");  settings=new ArrayList<BeanSetting>();  settings.add(new BeanSetting(southSwitch,"SouthSwitch",Turnout.THROWN));  path=new OPath("SouthToEast",south,null,_portalMgr.getPortal("SouthEast"),settings);  south.addPath(path);  settings=new ArrayList<BeanSetting>();  settings.add(new BeanSetting(southSwitch,"SouthSwitch",Turnout.CLOSED));  path=new OPath("SouthToWest",south,null,south.getPortalByName("SouthWest"),settings);  south.addPath(path);  Assert.assertEquals("Path Block",path,south.getPathByName("SouthToWest"));  Assert.assertEquals("Path Block","SouthToEast",south.getPathByName("SouthToEast").getName());  settings=new ArrayList<BeanSetting>();  OBlock block=_OBlockMgr.getOBlock("West");  path=new OPath("SouthToNorth",block,_portalMgr.getPortal("NorthWest"),_portalMgr.getPortal("SouthWest"),settings);  _OBlockMgr.getOBlock("West").addPath(path);  Assert.assertEquals("Path Block",path,block.getPathByName("SouthToNorth"));  settings=new ArrayList<BeanSetting>();  block=_OBlockMgr.getOBlock("East");  path=new OPath("NorthToSouth",block,south.getPortalByName("SouthEast"),north.getPortalByName("NorthEast"),settings);  _OBlockMgr.getOBlock("East").addPath(path);  Assert.assertEquals("Path Block",path,block.getPathByName("NorthToSouth"));  _sensorMgr=InstanceManager.getDefault(SensorManager.class);  Sensor sWest=_sensorMgr.newSensor("IS1","WestSensor");  Sensor sEast=_sensorMgr.newSensor("IS2","EastSensor");  Sensor sNorth=_sensorMgr.newSensor("IS3","NorthSensor");  Sensor sSouth=_sensorMgr.newSensor("IS4","SouthSensor");  bWest.setSensor("WestSensor");  bEast.setSensor("IS2");  bNorth.setSensor("NorthSensor");  bSouth.setSensor("IS4");  Assert.assertEquals("Sensor Block",sNorth,bNorth.getSensor());  Assert.assertEquals("Sensor Block",sSouth,bSouth.getSensor());  try {    sWest.setState(Sensor.INACTIVE);    sEast.setState(Sensor.ACTIVE);    sNorth.setState(Sensor.INACTIVE);    sSouth.setState(Sensor.ACTIVE);  } catch (  JmriException je) {  }  Assert.assertEquals("Block Detection",OBlock.UNOCCUPIED,bWest.getState());  Assert.assertEquals("Block Detection",OBlock.OCCUPIED,bEast.getState());  Warrant warrant=new Warrant("IW0","AllTestWarrant");  bWest.allocate(warrant);  bEast.allocate(warrant);  Assert.assertEquals("Block Detection",OBlock.UNOCCUPIED | OBlock.ALLOCATED,bWest.getState());  Assert.assertEquals("Block Detection",OBlock.OCCUPIED | OBlock.ALLOCATED,bEast.getState());  try {    sEast.setState(Sensor.INACTIVE);    sSouth.setState(Sensor.INACTIVE);    sNorth.setState(Sensor.ACTIVE);  } catch (  JmriException je) {  }  bWest.deAllocate(warrant);  bEast.deAllocate(warrant);  Assert.assertEquals("Block Detection",OBlock.UNOCCUPIED,bWest.getState());  Assert.assertEquals("Block Detection",OBlock.UNOCCUPIED,bEast.getState());  ArrayList<BlockOrder> orders=new ArrayList<BlockOrder>();  orders.add(new BlockOrder(_OBlockMgr.getOBlock("North"),"NorthToWest","","NorthWest"));  BlockOrder viaOrder=new BlockOrder(_OBlockMgr.getOBlock("West"),"SouthToNorth","NorthWest","SouthWest");  orders.add(viaOrder);  BlockOrder lastOrder=new BlockOrder(_OBlockMgr.getOBlock("South"),"SouthToWest","SouthWest",null);  orders.add(lastOrder);  warrant.setViaOrder(viaOrder);  warrant.setBlockOrders(orders);  Assert.assertEquals("BlockOrder",warrant.getLastOrder().toString(),lastOrder.toString());  Assert.assertEquals("BlockOrder",warrant.getViaOrder().toString(),viaOrder.toString());  String msg=warrant.allocateRoute(orders);  Assert.assertNull("allocateRoute - " + msg,msg);  warrant.deAllocate();  warrant.setThrottleCommands(new ArrayList<ThrottleSetting>());  warrant.addThrottleCommand(new ThrottleSetting(0,"Speed","0.0","North"));  warrant.addThrottleCommand(new ThrottleSetting(100,"Speed","0.4","North"));  warrant.addThrottleCommand(new ThrottleSetting(100,"NoOp","Enter Block","West"));  warrant.addThrottleCommand(new ThrottleSetting(100,"Speed","0.5","West"));  warrant.addThrottleCommand(new ThrottleSetting(100,"NoOp","Enter Block","South"));  warrant.addThrottleCommand(new ThrottleSetting(100,"Speed","0.3","South"));  warrant.addThrottleCommand(new ThrottleSetting(100,"Speed","0.0","South"));  List<ThrottleSetting> list=warrant.getThrottleCommands();  Assert.assertEquals("ThrottleCommands",7,list.size());  warrant.setDccAddress("999(L)");  msg=warrant.setRoute(0,orders);  Assert.assertNull("setRoute - " + msg,msg);  msg=warrant.checkStartBlock(Warrant.MODE_RUN);  Assert.assertNull("checkStartBlock - " + msg,msg);  msg=warrant.checkRoute();  Assert.assertNull("checkRoute - " + msg,msg);  warrant.setTrainName("TestTrain");  PropertyChangeListener listener=new WarrantListener(warrant);  Assert.assertNotNull("PropertyChangeListener",listener);  warrant.addPropertyChangeListener(listener);  msg=warrant.setRunMode(Warrant.MODE_RUN,null,null,null,false);  Assert.assertNull("setRunMode - " + msg,msg);  jmri.util.JUnitUtil.releaseThread(this);  jmri.util.ThreadingUtil.runOnLayout(null);  jmri.util.JUnitUtil.releaseThread(this);  jmri.util.ThreadingUtil.runOnLayout(null);  jmri.util.JUnitUtil.releaseThread(this);  jmri.util.JUnitAppender.assertWarnMessage("RosterSpeedProfile not found. Using default ThrottleFactor 0.75");  jmri.util.JUnitUtil.waitFor(null,"engineer blocked");  msg=warrant.getRunningMessage();  Assert.assertEquals("getRunningMessage","Idle",msg);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.937 -0500",hash_original_method="026D3AE6EA7284BA85CF864429138595",hash_generated_method="41F61E755A7C3306650DE1A02239C8F3") public int length(){  return getTaintInt();}  }
class C{  public void onPressed(){  pressed=!pressed;}  }
class C{  public Object readPoint(Element node) throws Exception {  Object result;  Vector<Element> children;  Element child;  int i;  double x;  double y;  String name;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  result=null;  children=XMLDocument.getChildTags(node);  x=0;  y=0;  for (i=0; i < children.size(); i++) {    child=children.get(i);    name=child.getAttribute(ATT_NAME);    if (name.equals(VAL_X)) {      x=readDoubleFromXML(child);    } else     if (name.equals(VAL_Y)) {      y=readDoubleFromXML(child);    } else {      System.out.println("WARNING: '" + name + "' is not a recognized name for "+ node.getAttribute(ATT_NAME)+ "!");    }  }  result=new Point();  ((Point)result).setLocation(x,y);  return result;}  }
class C{  public static final double[][] threshold(double P[][],double t){  double X[][]=new double[P.length][P[0].length];  for (int i=0; i < P.length; i++) {    for (int j=0; j < P[i].length; j++) {      X[i][j]=(P[i][j] > t) ? 1. : 0.;    }  }  return X;}  }
class C{  private int findWordEnd(String text,int pos){  int end=-1;  Matcher m=WORD.matcher(text);  if (pos > 0) {    pos--;  }  if (m.find(pos)) {    end=m.end();  }  if (text.length() == pos) {    end=text.length();  }  if (end == -1) {    end=text.length();  }  return end;}  }
class C{  public void generateOutput() throws Exception {  BufferedImage bi;  Graphics g;  bi=new BufferedImage(getComponent().getWidth(),getComponent().getHeight(),BufferedImage.TYPE_INT_RGB);  g=bi.getGraphics();  g.setPaintMode();  g.setColor(getBackground());  if (g instanceof Graphics2D)   ((Graphics2D)g).scale(getXScale(),getYScale());  g.fillRect(0,0,getComponent().getWidth(),getComponent().getHeight());  getComponent().printAll(g);  ImageIO.write(bi,"bmp",getFile());}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_DECLARED_TYPE_IM:    return getDeclaredType_IM();case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___SET_DECLARED_TYPE_IM__SYMBOLTABLEENTRY:  setDeclaredType_IM((SymbolTableEntry)arguments.get(0));return null;case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_DECLARED_TYPE:return getDeclaredType();case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___SET_DECLARED_TYPE__TYPE:setDeclaredType((Type)arguments.get(0));return null;case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_TYPING_STRATEGY:return getTypingStrategy();case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___SET_TYPING_STRATEGY__TYPINGSTRATEGY:setTypingStrategy((TypingStrategy)arguments.get(0));return null;case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_STRUCTURAL_MEMBERS:return getStructuralMembers();case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___GET_TYPE_REF_AS_STRING:return getTypeRefAsString();case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM___HAS_POSTPONED_SUBSTITUTION_FOR__TYPEVARIABLE:return hasPostponedSubstitutionFor((TypeVariable)arguments.get(0));}return super.eInvoke(operationID,arguments);}  }
class C{  public SessionIndexNotFoundException(String message,ReasonEnum reason,Throwable cause){  super(message,cause);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public char[][] toArray(){  char[][] result=new char[max + 1][];  for (  Map.Entry<Character,String> entry : map.entrySet()) {    result[entry.getKey()]=entry.getValue().toCharArray();  }  return result;}  }
class C{  public boolean hasAdminRole(){  return getUserRoles().contains(UserRoleType.ORGANIZATION_ADMIN);}  }
class C{  public void test_write$BII_5() throws Exception {  DigestOutputStream dos=new DigestOutputStream(new ByteArrayOutputStream(),MessageDigest.getInstance("SHA"));  byte digestArray[]={23,43,44};  dos.write(digestArray,1,1);  byte digestResult[]=dos.getMessageDigest().digest();  byte expected[]={-87,121,-17,16,-52,111,106,54,-33,107,-118,50,51,7,-18,59,-78,-30,-37,-100};  assertTrue("Digest did not return expected result.",Arrays.equals(digestResult,expected));}  }
class C{  public boolean userCanViewDir(int connectedUserId,int dirId,String entidad) throws Exception {  boolean can=false;  int dirMgrId=ISicresAdminDefsKeys.NULL_ID;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    if (dirId == ISicresAdminDefsKeys.NULL_ID || dirId == ISicresAdminDefsKeys.ROOT_DIR_ID)     dirMgrId=0; else     dirMgrId=this.getDirMgrId(dirId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_VIEW,dirMgrId,ISicresAdminDefsKeys.NULL_ID,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public BST(){}  }
class C{  protected Session __getHibernateSession(){  return WikiHibernateUtil.getSessionFactory(this.dbConfig).getCurrentSession();}  }
class C{  public void remove(final Class<?> viewController){  destroy(viewController);  controllers.remove(viewController);}  }
class C{  protected void configurePath(Path path){  path.setDelegateOwner(this);  path.setFollowTerrain(true);  path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  path.setAttributes(this.activeShapeAttributes);}  }
class C{  public MultipleXYSeriesLabelGenerator(String format){  ParamChecks.nullNotPermitted(format,"format");  this.formatPattern=format;  this.additionalFormatPattern="\n{0}";  this.seriesLabelLists=new HashMap();}  }
class C{  static public Class<?> primitiveType(final String name){  return NAMED_PRIMITIVE.get(name);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static double hoeffdingLn(double trials,double observed,double prob){  return -2 * Math.pow(trials * prob - observed,2) / trials;}  }
class C{  public static void main(String[] args){  if (!new File("../../org.matsim/examples/pt-tutorial/configExtended.xml").exists()) {    ExtendPtTutorial.main(null);  }  Config config=ConfigUtils.createConfig();  ConfigUtils.loadConfig(config,"../../org.matsim/examples/pt-tutorial/configExtended.xml");  Scenario scenario=ScenarioUtils.loadScenario(config);  Controler controler=new Controler(scenario);  controler.getConfig().controler().setOverwriteFileSetting(true ? OutputDirectoryHierarchy.OverwriteFileSetting.overwriteExistingFiles : OutputDirectoryHierarchy.OverwriteFileSetting.failIfDirectoryExists);  controler.run();}  }
class C{  public List<StorageFile> createStorageFilesFromEntities(Collection<StorageFileEntity> storageFileEntities){  List<StorageFile> storageFiles=new ArrayList<>();  for (  StorageFileEntity storageFileEntity : storageFileEntities) {    storageFiles.add(createStorageFileFromEntity(storageFileEntity));  }  return storageFiles;}  }
class C{  public boolean inVariable(){  return buf != null;}  }
class C{  protected Basis(Polynomial f,Polynomial fPrime,IntegerPolynomial h,NTRUSigningKeyGenerationParameters params){  this.f=f;  this.fPrime=fPrime;  this.h=h;  this.params=params;}  }
class C{  @Override protected IEObjectDescriptionWithError wrapFilteredDescription(IEObjectDescription originalDescr){  return null;}  }
class C{  public static void showToast(Context context,int resourceId){  Toast.makeText(context,context.getString(resourceId),Toast.LENGTH_LONG).show();}  }
class C{  public static void evolve(BinaryVariable variable,double probability){  for (int i=0; i < variable.getNumberOfBits(); i++) {    if (PRNG.nextDouble() <= probability) {      variable.set(i,!variable.get(i));    }  }}  }
class C{  @SuppressWarnings("unchecked") private static Class wrap(Class c){  return c.isPrimitive() ? PRIMITIVES_TO_WRAPPERS.get(c) : c;}  }
class C{  public int recordParams(CtClass[] params,boolean isStatic,String prefix,String paramVarName,String paramsName,SymbolTable tbl) throws CompileError {  return recordParams(params,isStatic,prefix,paramVarName,paramsName,!isStatic,0,getThisName(),tbl);}  }
class C{  public static void normalize(double[] doubles,double sum){  if (Double.isNaN(sum)) {    throw new IllegalArgumentException("Can't normalize array. Sum is NaN.");  }  if (sum == 0) {    throw new IllegalArgumentException("Can't normalize array. Sum is zero.");  }  for (int i=0; i < doubles.length; i++) {    doubles[i]/=sum;  }}  }
class C{  private List<VOUsageLicense> addUsersToSubscription(){  List<VOUsageLicense> list=new ArrayList<VOUsageLicense>();  for (  PlatformUser user : users) {    VOUsageLicense lic=new VOUsageLicense();    lic.setUser(UserDataAssembler.toVOUser(user));    list.add(lic);  }  return list;}  }
class C{  public boolean startsWith(XMLString prefix){  return m_str.startsWith(prefix.toString());}  }
class C{  @Override public final void close(){  try {    if (_disableClose)     return;    if (!_reuseBuffer) {      if (_tempRead != null) {        TempBuffer tempBuffer=_tempRead;        _tempRead=null;        TempBuffer.free(tempBuffer);      }      _readBuffer=null;    }    if (_readEncoding != null) {      Reader reader=_readEncoding;      _readEncoding=null;      reader.close();    }    if (_source != null && !_isDisableCloseSource) {      StreamImpl s=_source;      _source=null;      s.close();    }  } catch (  IOException e) {    log().log(Level.FINE,e.toString(),e);  }}  }
class C{  private void refreshScreenSize(){  final WindowManager wm=(WindowManager)MovableWindow.mWindowHolder.mActivity.getSystemService(Context.WINDOW_SERVICE);  final DisplayMetrics metrics=new DisplayMetrics();  wm.getDefaultDisplay().getMetrics(metrics);  mScreenHeight=metrics.heightPixels;  mScreenWidth=metrics.widthPixels;}  }
class C{  private final void contendedLock(){  boolean waiting=false;  for (int s; ; ) {    if (((s=lockState) & ~WAITER) == 0) {      if (U.compareAndSwapInt(this,LOCKSTATE,s,WRITER)) {        if (waiting)         waiter=null;        return;      }    } else     if ((s & WAITER) == 0) {      if (U.compareAndSwapInt(this,LOCKSTATE,s,s | WAITER)) {        waiting=true;        waiter=Thread.currentThread();      }    } else     if (waiting)     LockSupport.park(this);  }}  }
class C{  public TotalTargetCountStatus(final List<TotalTargetCountActionStatus> targetCountActionStatus,final Long totalTargetCount){  this.totalTargetCount=totalTargetCount;  mapActionStatusToTotalTargetCountStatus(targetCountActionStatus);}  }
class C{  public void syncing(int tenant){  starting(Operation.SYNC,tenant);}  }
class C{  protected void writeLocalFileHeader(ZipEntry ze) throws IOException {  offsets.put(ze,new ZipLong(written));  writeOut(LFH_SIG.getBytes());  written+=4;  if (ze.getMethod() == DEFLATED && raf == null) {    writeOut((new ZipShort(20)).getBytes());    writeOut((new ZipShort(8)).getBytes());  } else {    writeOut((new ZipShort(10)).getBytes());    writeOut(ZERO);  }  written+=4;  writeOut((new ZipShort(ze.getMethod())).getBytes());  written+=2;  writeOut(toDosTime(ze.getTime()).getBytes());  written+=4;  localDataStart=written;  if (ze.getMethod() == DEFLATED || raf != null) {    writeOut(LZERO);    writeOut(LZERO);    writeOut(LZERO);  } else {    writeOut((new ZipLong(ze.getCrc())).getBytes());    writeOut((new ZipLong(ze.getSize())).getBytes());    writeOut((new ZipLong(ze.getSize())).getBytes());  }  written+=12;  byte[] name=getBytes(ze.getName());  writeOut((new ZipShort(name.length)).getBytes());  written+=2;  byte[] extra=ze.getLocalFileDataExtra();  writeOut((new ZipShort(extra.length)).getBytes());  written+=2;  writeOut(name);  written+=name.length;  writeOut(extra);  written+=extra.length;  dataStart=written;}  }
class C{  public void initPannelLegacy(){  progressBar=new WebProgressBar();  progressBar.setFont(R.getCouriernormal());  progressBar.setStringPainted(true);  mainPannel.setSize(798,224);  mainPannel.setLayout(null);  mainPannel.setBackground(R.PANELS_BACK_COLOR);  apk1l.getProgressBar().setBounds(10,5,780,40);  apk1l.getProgressBar().setFont(R.getCouriernormal());  apk1l.getProgressBar().setBackground(Color.white);  apk1l.getProgressBar().setBgBottom(new Color(236,240,241));  apk1l.getProgressBar().setBgTop(new Color(189,195,199));  apk1l.getProgressBar().setProgressTopColor(new Color(46,204,113));  apk1l.getProgressBar().setProgressBottomColor(new Color(39,174,96));  apk2l.getProgressBar().setBounds(10,49,780,40);  apk2l.getProgressBar().setFont(R.getCouriernormal());  apk2l.getProgressBar().setBackground(Color.white);  apk2l.getProgressBar().setBgBottom(new Color(236,240,241));  apk2l.getProgressBar().setBgTop(new Color(189,195,199));  apk2l.getProgressBar().setProgressTopColor(new Color(46,204,113));  apk2l.getProgressBar().setProgressBottomColor(new Color(39,174,96));  jar1l.getProgressBar().setBounds(10,93,780,40);  jar1l.getProgressBar().setFont(R.getCouriernormal());  jar1l.getProgressBar().setBackground(Color.white);  jar1l.getProgressBar().setBgBottom(new Color(236,240,241));  jar1l.getProgressBar().setBgTop(new Color(189,195,199));  jar1l.getProgressBar().setProgressTopColor(new Color(46,204,113));  jar1l.getProgressBar().setProgressBottomColor(new Color(39,174,96));  jar2l.progressBar.setBounds(10,137,780,40);  jar2l.progressBar.setFont(R.getCouriernormal());  jar2l.progressBar.setBackground(Color.white);  jar2l.getProgressBar().setBgBottom(new Color(236,240,241));  jar2l.getProgressBar().setBgTop(new Color(189,195,199));  jar2l.getProgressBar().setProgressTopColor(new Color(46,204,113));  jar2l.getProgressBar().setProgressBottomColor(new Color(39,174,96));  progressBar.setBounds(10,181,780,40);  progressBar.setMinimum(0);  progressBar.setMaximum(this.worker1List.size() + this.worker2List.size() + this.worker3List.size()+ this.worker4List.size());  progressBar.setBackground(Color.WHITE);  progressBar.setBgBottom(new Color(236,240,241));  progressBar.setBgTop(new Color(189,195,199));  progressBar.setProgressTopColor(new Color(155,89,182));  progressBar.setProgressBottomColor(new Color(142,68,173));  mainPannel.add(apk1l.getProgressBar());  mainPannel.add(apk2l.getProgressBar());  mainPannel.add(jar1l.getProgressBar());  mainPannel.add(jar2l.progressBar);  mainPannel.add(progressBar);}  }
class C{  public JpegCommentReader(File jpegFile) throws JpegProcessingException {  this(new JpegSegmentReader(jpegFile).readSegment(JpegSegmentReader.SEGMENT_COM));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean addEdge(Edge edge){  int i=nodesHash.get(edge.getNode1());  int j=nodesHash.get(edge.getNode2());  if (graphMatrix[i][j] != 0) {    return false;  }  short e1=endpointsToShorts.get(edge.getEndpoint1());  short e2=endpointsToShorts.get(edge.getEndpoint2());  graphMatrix[j][i]=e1;  graphMatrix[i][j]=e2;  numEdges++;  return true;}  }
class C{  public static String resolveResourceId(int[] array){  sIntArrayWrapper.set(array);  return sRArrayMap.get(sIntArrayWrapper);}  }
class C{  public ParserException(String context,Mark contextMark,String problem,Mark problemMark){  super(context,contextMark,problem,problemMark,null,null);}  }
class C{  protected QNameCache createQNameCache(){  return new QNameCache(this);}  }
class C{  @Override public void NEW(String className){  Class<?> clazz=classLoader.getClassForName(className);  Type objectType=Type.getType(clazz);  ReferenceConstant newObject=this.env.heap.buildNewReferenceConstant(objectType);  env.topFrame().operandStack.pushRef(newObject);}  }
class C{  protected JvmThreadInstanceTableMeta createJvmThreadInstanceTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmThreadInstanceTableMeta(mib,objectserver);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.985 -0400",hash_original_method="0F27C92B37DFB10D975FFB8810CF21BD",hash_generated_method="633FD3877549CAE012C10A750FE665EF") private File[] listFiles(File file){  File[] children=null;  if (file.isDirectory()) {    children=fileFilter == null ? file.listFiles() : file.listFiles(fileFilter);  }  if (children == null) {    children=FileUtils.EMPTY_FILE_ARRAY;  }  if (comparator != null && children.length > 1) {    Arrays.sort(children,comparator);  }  return children;}  }
class C{  public GeneralAlgorithmRunner(GraphSource graphSource,GeneralAlgorithmRunner runner,Parameters parameters){  this(null,graphSource,parameters,null,null);  this.algorithm=runner.algorithm;}  }
class C{  public void fine(String msg,Object... params){  log(Level.FINE,msg,params);}  }
class C{  public OdbcConfiguration(OdbcConfiguration cfg){  assert cfg != null;  endpointAddr=cfg.getEndpointAddress();  maxOpenCursors=cfg.getMaxOpenCursors();  sockRcvBufSize=cfg.getSocketReceiveBufferSize();  sockSndBufSize=cfg.getSocketSendBufferSize();  threadPoolSize=cfg.getThreadPoolSize();}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatableLengthValue res;  if (result == null) {    res=new AnimatableLengthValue(target);  } else {    res=(AnimatableLengthValue)result;  }  short oldLengthType=res.lengthType;  float oldLengthValue=res.lengthValue;  short oldPercentageInterpretation=res.percentageInterpretation;  res.lengthType=lengthType;  res.lengthValue=lengthValue;  res.percentageInterpretation=percentageInterpretation;  if (to != null) {    AnimatableLengthValue toLength=(AnimatableLengthValue)to;    float toValue;    if (!compatibleTypes(res.lengthType,res.percentageInterpretation,toLength.lengthType,toLength.percentageInterpretation)) {      res.lengthValue=target.svgToUserSpace(res.lengthValue,res.lengthType,res.percentageInterpretation);      res.lengthType=SVGLength.SVG_LENGTHTYPE_NUMBER;      toValue=toLength.target.svgToUserSpace(toLength.lengthValue,toLength.lengthType,toLength.percentageInterpretation);    } else {      toValue=toLength.lengthValue;    }    res.lengthValue+=interpolation * (toValue - res.lengthValue);  }  if (accumulation != null) {    AnimatableLengthValue accLength=(AnimatableLengthValue)accumulation;    float accValue;    if (!compatibleTypes(res.lengthType,res.percentageInterpretation,accLength.lengthType,accLength.percentageInterpretation)) {      res.lengthValue=target.svgToUserSpace(res.lengthValue,res.lengthType,res.percentageInterpretation);      res.lengthType=SVGLength.SVG_LENGTHTYPE_NUMBER;      accValue=accLength.target.svgToUserSpace(accLength.lengthValue,accLength.lengthType,accLength.percentageInterpretation);    } else {      accValue=accLength.lengthValue;    }    res.lengthValue+=multiplier * accValue;  }  if (oldPercentageInterpretation != res.percentageInterpretation || oldLengthType != res.lengthType || oldLengthValue != res.lengthValue) {    res.hasChanged=true;  }  return res;}  }
class C{  private void onOperationFinished(@NonNull final OperationDelivery<?> operationResult){  logd("onOperationFinished " + operationResult);switch (mState) {case PAUSED:    storeResult(operationResult);  break;case RESUMED:deliverResult(operationResult);break;default :throw new IllegalStateException("Unknown state: " + mState);}}  }
class C{  public void addIssuer(X500Principal issuer){  if (issuer == null) {    throw new NullPointerException("issuer == null");  }  if (issuerNames == null) {    issuerNames=new ArrayList<String>();  }  String name=issuer.getName(X500Principal.CANONICAL);  if (!issuerNames.contains(name)) {    issuerNames.add(name);  }  if (issuerPrincipals == null) {    issuerPrincipals=new ArrayList<X500Principal>(issuerNames.size());  }  int size=issuerNames.size() - 1;  for (int i=issuerPrincipals.size(); i < size; i++) {    issuerPrincipals.add(new X500Principal(issuerNames.get(i)));  }  issuerPrincipals.add(issuer);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof terminal_set))   return false; else   return equals((terminal_set)other);}  }
class C{  public Select<Model> offset(int offset){  if (offset < 0)   throw new IllegalArgumentException("Offset must be larger than 0");  this.offset=offset;  return this;}  }
class C{  public void delete(){  ((MappedBytes)bytes).delete();}  }
class C{  public LoginException(){  super();}  }
class C{  public void writeEntry() throws IOException {  if (mOutput == null) {    init();  }  mOutput.writeLong(mCurrent);  mCurrent=0;  mOutput.writeLong(mDataSize);  mDataSize=0;}  }
class C{  private void zzDoEOF() throws java.io.IOException {  if (!zzEOFDone) {    zzEOFDone=true;    yyclose();  }}  }
class C{  public static GeoQuery query(String name,GeoPoint point){  return query(name,point.getGeohash());}  }
class C{  private void callMethodForProperty(Deployable deployable,Property property) throws Exception {  String setterMethodName=getSetterMethodName(property.getName());  Method method;  Object argument;  try {    method=deployable.getClass().getMethod(setterMethodName,new Class[]{String.class});    argument=property.getValue();  } catch (  NoSuchMethodException e) {    method=deployable.getClass().getMethod(setterMethodName,new Class[]{String[].class});    List<String> valueList=new ArrayList<String>();    StringTokenizer commaSeparatedValue=new StringTokenizer(property.getValue(),",");    while (commaSeparatedValue.hasMoreTokens()) {      String commaSeparatedLine=commaSeparatedValue.nextToken().trim();      if (!commaSeparatedLine.isEmpty()) {        valueList.add(commaSeparatedLine);      }    }    String[] valueArray=new String[valueList.size()];    valueArray=valueList.toArray(valueArray);    argument=valueArray;  }  method.invoke(deployable,new Object[]{argument});}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof ExtendedCategoryAxis)) {    return false;  }  ExtendedCategoryAxis that=(ExtendedCategoryAxis)obj;  if (!this.sublabelFont.equals(that.sublabelFont)) {    return false;  }  if (!PaintUtilities.equal(this.sublabelPaint,that.sublabelPaint)) {    return false;  }  if (!this.sublabels.equals(that.sublabels)) {    return false;  }  return super.equals(obj);}  }
class C{  String findParmValue(Element e,String name){  List<Element> l=e.getChildren("parameter");  for (int i=0; i < l.size(); i++) {    Element n=l.get(i);    if (n.getAttributeValue("name").equals(name)) {      return n.getTextTrim();    }  }  return null;}  }
class C{  private static boolean processParents(int certIndex,boolean policiesCritical,boolean rejectPolicyQualifiers,PolicyNodeImpl rootNode,String curPolicy,Set<PolicyQualifierInfo> pQuals,boolean matchAny) throws CertPathValidatorException {  boolean foundMatch=false;  if (debug != null)   debug.println("PolicyChecker.processParents(): matchAny = " + matchAny);  Set<PolicyNodeImpl> parentNodes=rootNode.getPolicyNodesExpected(certIndex - 1,curPolicy,matchAny);  for (  PolicyNodeImpl curParent : parentNodes) {    if (debug != null)     debug.println("PolicyChecker.processParents() " + "found parent:\n" + curParent.asString());    foundMatch=true;    String curParPolicy=curParent.getValidPolicy();    PolicyNodeImpl curNode=null;    Set<String> curExpPols=null;    if (curPolicy.equals(ANY_POLICY)) {      Set<String> parExpPols=curParent.getExpectedPolicies();      parentExplicitPolicies:       for (      String curParExpPol : parExpPols) {        Iterator<PolicyNodeImpl> childIter=curParent.getChildren();        while (childIter.hasNext()) {          PolicyNodeImpl childNode=childIter.next();          String childPolicy=childNode.getValidPolicy();          if (curParExpPol.equals(childPolicy)) {            if (debug != null)             debug.println(childPolicy + " in parent's " + "expected policy set already appears in "+ "child node");            continue parentExplicitPolicies;          }        }        Set<String> expPols=new HashSet<>();        expPols.add(curParExpPol);        curNode=new PolicyNodeImpl(curParent,curParExpPol,pQuals,policiesCritical,expPols,false);      }    } else {      curExpPols=new HashSet<String>();      curExpPols.add(curPolicy);      curNode=new PolicyNodeImpl(curParent,curPolicy,pQuals,policiesCritical,curExpPols,false);    }  }  return foundMatch;}  }
class C{  @Override public Blob createBlob() throws SQLException {  try {    int id=getNextId(TraceObject.BLOB);    debugCodeAssign("Blob",TraceObject.BLOB,id,"createClob()");    checkClosedForWrite();    try {      Value v=session.getDataHandler().getLobStorage().createBlob(new ByteArrayInputStream(Utils.EMPTY_BYTES),0);      session.addTemporaryLob(v);      return new JdbcBlob(this,v,id);    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public void load(PLILoader loader){  this.load(loader,false,null,PLConstants.kFloatUndefinedValue,PLConstants.kFloatUndefinedValue);}  }
class C{  public static void returnToCalendarHome(Context context){  Intent launchIntent=new Intent(context,AllInOneActivity.class);  launchIntent.setAction(Intent.ACTION_DEFAULT);  launchIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  launchIntent.putExtra(INTENT_KEY_HOME,true);  context.startActivity(launchIntent);}  }
class C{  public boolean isEmpty(){  return arrayList.isEmpty();}  }
class C{  public static ViewerFilter createFor(TaskViewState state){  Predicate<TaskNode> taskNodeFilter=createTaskNodeFilter(state);  Predicate<TaskGroupNode> taskGroupNodeFilter=createGroupTaskNodeFiter(taskNodeFilter);  return new TaskNodeViewerFilter(taskNodeFilter,taskGroupNodeFilter);}  }
class C{  public TraceCaseDeactivation_ createTraceCaseDeactivation_(){  TraceCaseDeactivation_Impl traceCaseDeactivation_=new TraceCaseDeactivation_Impl();  return traceCaseDeactivation_;}  }
class C{  public static boolean loadAttributes(final String filepath,Bundle out){  ExifInterface e;  try {    e=new ExifInterface(filepath);  } catch (  IOException e1) {    e1.printStackTrace();    return false;  }  for (  String tag : EXIF_TAGS) {    out.putString(tag,e.getAttribute(tag));  }  return true;}  }
class C{  public CSeqHeader createCSeqHeader(long sequenceNumber,String method) throws ParseException, InvalidArgumentException {  if (sequenceNumber < 0)   throw new InvalidArgumentException("bad arg " + sequenceNumber);  if (method == null)   throw new NullPointerException("null arg method");  CSeq cseq=new CSeq();  cseq.setMethod(method);  cseq.setSeqNumber(sequenceNumber);  return cseq;}  }
class C{  public static void center(Component componentToMove,Component componentToCenterOn){  Dimension componentToCenterOnSize=componentToCenterOn.getSize();  componentToMove.setLocation(componentToCenterOn.getX() + ((componentToCenterOnSize.width - componentToMove.getWidth()) / 2),componentToCenterOn.getY() + ((componentToCenterOnSize.height - componentToMove.getHeight()) / 2));}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  @Override @After public void tearDown() throws Exception {  try {    senderConnection.close();    receiverConnection.close();    admin.deleteQueueConnectionFactory(PTPTestCase.QCF_NAME);    admin.deleteQueue(PTPTestCase.QUEUE_NAME);  } catch (  Exception ignored) {    ignored.printStackTrace();  } finally {    senderQueue=null;    sender=null;    senderQCF=null;    senderSession=null;    senderConnection=null;    receiverQueue=null;    receiver=null;    receiverQCF=null;    receiverSession=null;    receiverConnection=null;  }  super.tearDown();}  }
class C{  public void testAbstractMethodPy2AddMeta(){  checkAbstract(".my_method",".my_method_2");}  }
class C{  private int popInt() throws PDFParseException {  Object obj=stack.pop();  if (obj instanceof Double) {    return ((Double)obj).intValue();  } else {    throw new PDFParseException("Expected a number here.");  }}  }
class C{  public JMenuItem(String text,int mnemonic){  setModel(new DefaultButtonModel());  init(text,null);  setMnemonic(mnemonic);  initFocusability();}  }
class C{  public ExportStatus exportImage() throws ImageExportException {  File chosenFile;  try {    chosenFile=PrintingTools.promptForFileLocation("export_image",FILE_EXTENSIONS,EXTENSION_DESCRIPTIONS);  } catch (  IOException e) {    throw new ImageExportException("",e);  }  if (chosenFile == null) {    return ExportStatus.ABORTED;  }  String extension=chosenFile.getName().substring(chosenFile.getName().lastIndexOf('.') + 1);switch (extension) {case JPG:    exportBitmap(JPG,chosenFile);  break;case PNG:exportBitmap(PNG,chosenFile);break;case SVG:exportVectorGraphics(SVG,chosenFile);break;case EPS:exportVectorGraphics(EPS,chosenFile);break;case PDF:exportVectorGraphics(PDF,chosenFile);break;default :throw new ImageExportException(I18N.getMessage(I18N.getUserErrorMessagesBundle(),"error.image_export.unknown_format",extension));}return ExportStatus.EXPORTED;}  }
class C{  public EntityMigrationBuilder removeManyAssociation(String association,String... defaultReferences){  migrationBuilder.builder.entityMigrationRules().addRule(new EntityMigrationRule(migrationBuilder.fromVersion,migrationBuilder.toVersion,entityTypes,new RemoveManyAssociation(association,defaultReferences)));  return this;}  }
class C{  void thaw(){  thaw(null);}  }
class C{  private void validateAndLoadDefaultProperties(){  if (null == carbonProperties.getProperty(CarbonCommonConstants.STORE_LOCATION)) {    carbonProperties.setProperty(CarbonCommonConstants.STORE_LOCATION,CarbonCommonConstants.STORE_LOCATION_DEFAULT_VAL);  }  validateBlockletSize();  validateMaxFileSize();  validateNumCores();  validateNumCoresBlockSort();  validateSortSize();  validateBadRecordsLocation();  validateHighCardinalityIdentify();  validateHighCardinalityThreshold();  validateHighCardinalityInRowCountPercentage();}  }
class C{  public ImmutableArray(final Array<? extends Type> array){  super(array);}  }
class C{  public boolean isSafari(){  return isSafari;}  }
class C{  public StringIdsSection(DexFile file){  super("string_ids",file,4);  strings=new TreeMap<CstString,StringIdItem>();}  }
class C{  static boolean isSet(){  PolicyInfo pi=policy.get();  return pi.policy != null && pi.initialized == true;}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case MappingPackage.MAPPING_MODEL:{      MappingModel mappingModel=(MappingModel)theEObject;      T result=caseMappingModel(mappingModel);      if (result == null)       result=caseModel(mappingModel);      if (result == null)       result=defaultCase(theEObject);      return result;    }case MappingPackage.INFO_MODEL_MAPPING_MODEL:{    InfoModelMappingModel infoModelMappingModel=(InfoModelMappingModel)theEObject;    T result=caseInfoModelMappingModel(infoModelMappingModel);    if (result == null)     result=caseMappingModel(infoModelMappingModel);    if (result == null)     result=caseModel(infoModelMappingModel);    if (result == null)     result=defaultCase(theEObject);    return result;  }case MappingPackage.INFO_MODEL_MAPPING_RULE:{  InfoModelMappingRule infoModelMappingRule=(InfoModelMappingRule)theEObject;  T result=caseInfoModelMappingRule(infoModelMappingRule);  if (result == null)   result=caseMappingRule(infoModelMappingRule);  if (result == null)   result=defaultCase(theEObject);  return result;}case MappingPackage.INFOMODEL_SOURCE:{InfomodelSource infomodelSource=(InfomodelSource)theEObject;T result=caseInfomodelSource(infomodelSource);if (result == null) result=caseSource(infomodelSource);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.INFO_MODEL_PROPERTY_SOURCE:{InfoModelPropertySource infoModelPropertySource=(InfoModelPropertySource)theEObject;T result=caseInfoModelPropertySource(infoModelPropertySource);if (result == null) result=caseInfomodelSource(infoModelPropertySource);if (result == null) result=caseSource(infoModelPropertySource);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.INFO_MODEL_ATTRIBUTE_SOURCE:{InfoModelAttributeSource infoModelAttributeSource=(InfoModelAttributeSource)theEObject;T result=caseInfoModelAttributeSource(infoModelAttributeSource);if (result == null) result=caseInfomodelSource(infoModelAttributeSource);if (result == null) result=caseSource(infoModelAttributeSource);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.FUNCTION_BLOCK_MAPPING_MODEL:{FunctionBlockMappingModel functionBlockMappingModel=(FunctionBlockMappingModel)theEObject;T result=caseFunctionBlockMappingModel(functionBlockMappingModel);if (result == null) result=caseMappingModel(functionBlockMappingModel);if (result == null) result=caseModel(functionBlockMappingModel);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.FUNCTION_BLOCK_MAPPING_RULE:{FunctionBlockMappingRule functionBlockMappingRule=(FunctionBlockMappingRule)theEObject;T result=caseFunctionBlockMappingRule(functionBlockMappingRule);if (result == null) result=caseMappingRule(functionBlockMappingRule);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.FUNCTION_BLOCK_SOURCE:{FunctionBlockSource functionBlockSource=(FunctionBlockSource)theEObject;T result=caseFunctionBlockSource(functionBlockSource);if (result == null) result=caseSource(functionBlockSource);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.FUNCTION_BLOCK_PROPERTY_SOURCE:{FunctionBlockPropertySource functionBlockPropertySource=(FunctionBlockPropertySource)theEObject;T result=caseFunctionBlockPropertySource(functionBlockPropertySource);if (result == null) result=caseFunctionBlockSource(functionBlockPropertySource);if (result == null) result=caseSource(functionBlockPropertySource);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.FUNCTION_BLOCK_ATTRIBUTE_SOURCE:{FunctionBlockAttributeSource functionBlockAttributeSource=(FunctionBlockAttributeSource)theEObject;T result=caseFunctionBlockAttributeSource(functionBlockAttributeSource);if (result == null) result=caseFunctionBlockSource(functionBlockAttributeSource);if (result == null) result=caseSource(functionBlockAttributeSource);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.CONFIGURATION_SOURCE:{ConfigurationSource configurationSource=(ConfigurationSource)theEObject;T result=caseConfigurationSource(configurationSource);if (result == null) result=caseFunctionBlockPropertySource(configurationSource);if (result == null) result=caseFunctionBlockSource(configurationSource);if (result == null) result=caseSource(configurationSource);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.STATUS_SOURCE:{StatusSource statusSource=(StatusSource)theEObject;T result=caseStatusSource(statusSource);if (result == null) result=caseFunctionBlockPropertySource(statusSource);if (result == null) result=caseFunctionBlockSource(statusSource);if (result == null) result=caseSource(statusSource);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.OPERATION_SOURCE:{OperationSource operationSource=(OperationSource)theEObject;T result=caseOperationSource(operationSource);if (result == null) result=caseFunctionBlockSource(operationSource);if (result == null) result=caseSource(operationSource);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.EVENT_SOURCE:{EventSource eventSource=(EventSource)theEObject;T result=caseEventSource(eventSource);if (result == null) result=caseFunctionBlockSource(eventSource);if (result == null) result=caseSource(eventSource);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.ENTITY_MAPPING_MODEL:{EntityMappingModel entityMappingModel=(EntityMappingModel)theEObject;T result=caseEntityMappingModel(entityMappingModel);if (result == null) result=caseDataTypeMappingModel(entityMappingModel);if (result == null) result=caseMappingModel(entityMappingModel);if (result == null) result=caseModel(entityMappingModel);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.ENTITY_MAPPING_RULE:{EntityMappingRule entityMappingRule=(EntityMappingRule)theEObject;T result=caseEntityMappingRule(entityMappingRule);if (result == null) result=caseMappingRule(entityMappingRule);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.ENTITY_SOURCE:{EntitySource entitySource=(EntitySource)theEObject;T result=caseEntitySource(entitySource);if (result == null) result=caseSource(entitySource);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.ENTITY_PROPERTY_SOURCE:{EntityPropertySource entityPropertySource=(EntityPropertySource)theEObject;T result=caseEntityPropertySource(entityPropertySource);if (result == null) result=caseEntitySource(entityPropertySource);if (result == null) result=caseSource(entityPropertySource);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.ENTITY_ATTRIBUTE_SOURCE:{EntityAttributeSource entityAttributeSource=(EntityAttributeSource)theEObject;T result=caseEntityAttributeSource(entityAttributeSource);if (result == null) result=caseEntitySource(entityAttributeSource);if (result == null) result=caseSource(entityAttributeSource);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.ENUM_MAPPING_MODEL:{EnumMappingModel enumMappingModel=(EnumMappingModel)theEObject;T result=caseEnumMappingModel(enumMappingModel);if (result == null) result=caseDataTypeMappingModel(enumMappingModel);if (result == null) result=caseMappingModel(enumMappingModel);if (result == null) result=caseModel(enumMappingModel);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.ENUM_MAPPING_RULE:{EnumMappingRule enumMappingRule=(EnumMappingRule)theEObject;T result=caseEnumMappingRule(enumMappingRule);if (result == null) result=caseMappingRule(enumMappingRule);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.ENUM_SOURCE:{EnumSource enumSource=(EnumSource)theEObject;T result=caseEnumSource(enumSource);if (result == null) result=caseSource(enumSource);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.ENUM_PROPERTY_SOURCE:{EnumPropertySource enumPropertySource=(EnumPropertySource)theEObject;T result=caseEnumPropertySource(enumPropertySource);if (result == null) result=caseEnumSource(enumPropertySource);if (result == null) result=caseSource(enumPropertySource);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.ENUM_ATTRIBUTE_SOURCE:{EnumAttributeSource enumAttributeSource=(EnumAttributeSource)theEObject;T result=caseEnumAttributeSource(enumAttributeSource);if (result == null) result=caseEnumSource(enumAttributeSource);if (result == null) result=caseSource(enumAttributeSource);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.DATA_TYPE_MAPPING_MODEL:{DataTypeMappingModel dataTypeMappingModel=(DataTypeMappingModel)theEObject;T result=caseDataTypeMappingModel(dataTypeMappingModel);if (result == null) result=caseMappingModel(dataTypeMappingModel);if (result == null) result=caseModel(dataTypeMappingModel);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.TARGET:{Target target=(Target)theEObject;T result=caseTarget(target);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.REFERENCE_TARGET:{ReferenceTarget referenceTarget=(ReferenceTarget)theEObject;T result=caseReferenceTarget(referenceTarget);if (result == null) result=caseTarget(referenceTarget);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.STEREO_TYPE_TARGET:{StereoTypeTarget stereoTypeTarget=(StereoTypeTarget)theEObject;T result=caseStereoTypeTarget(stereoTypeTarget);if (result == null) result=caseTarget(stereoTypeTarget);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.ATTRIBUTE:{Attribute attribute=(Attribute)theEObject;T result=caseAttribute(attribute);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.SOURCE:{Source source=(Source)theEObject;T result=caseSource(source);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.FAULT_SOURCE:{FaultSource faultSource=(FaultSource)theEObject;T result=caseFaultSource(faultSource);if (result == null) result=caseFunctionBlockPropertySource(faultSource);if (result == null) result=caseFunctionBlockSource(faultSource);if (result == null) result=caseSource(faultSource);if (result == null) result=defaultCase(theEObject);return result;}case MappingPackage.MAPPING_RULE:{MappingRule mappingRule=(MappingRule)theEObject;T result=caseMappingRule(mappingRule);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  public SemanticEqualsWrapper(TypeRef typeRef){  this.typeRef=typeRef;}  }
class C{  public TechnicalServiceOperationException(String message,Object[] params){  super(message,params);}  }
class C{  public VideoFrameReleaseTimeHelper(){  this(-1,false);}  }
class C{  public ComboBoxFieldEditor(final String name,final String labelText,final String tooltip,final int labelIndent,final String[][] entryNamesAndValues,final Composite parent){  init(name,labelText);  Assert.isTrue(checkArray(entryNamesAndValues));  this.tooltip=tooltip;  this.entryNamesAndValues=entryNamesAndValues;  this.labelIndent=labelIndent;  createControl(parent);}  }
class C{  public TimmyTable addTimmyTable(String filename,int recordSize) throws SyncFailedException, IOException {  if (isOpen)   throw new IllegalStateException("table can't be added after database is open");  TimmyTable tt=new TimmyTable(filename,recordSize,this);  tables.add(tt);  return tt;}  }
class C{  @Override protected void doAction(){  File defaultKeyStoreFile=new File(System.getProperty("user.home"),".keystore");  if (defaultKeyStoreFile.isFile()) {    openKeyStore(defaultKeyStoreFile);    return;  }  int selected=JOptionPane.showConfirmDialog(frame,res.getString("OpenDefaultAction.NoDefaultKeyStoreCreate.message"),res.getString("OpenDefaultAction.OpenDefaultKeyStore.Title"),JOptionPane.YES_NO_OPTION);  if (selected != JOptionPane.YES_OPTION) {    return;  }  try {    DNewKeyStoreType dNewKeyStoreType=new DNewKeyStoreType(frame);    dNewKeyStoreType.setLocationRelativeTo(frame);    dNewKeyStoreType.setVisible(true);    KeyStoreType keyStoreType=dNewKeyStoreType.getKeyStoreType();    if (keyStoreType == null) {      return;    }    Password password=getNewKeyStorePassword();    if (password == null) {      return;    }    KeyStore defaultKeyStore=KeyStoreUtil.create(keyStoreType);    KeyStoreUtil.save(defaultKeyStore,defaultKeyStoreFile,password);    kseFrame.addKeyStore(defaultKeyStore,defaultKeyStoreFile,password);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  boolean isReady(){  return this.state == READY;}  }
class C{  public Option(int number,int val){  this.number=number;  setIntegerValue(val);}  }
class C{  public void flushZipFiles(Object owner){  ZipCache zipCache=this.zipFiles.get();  if (zipCache == null) {    return;  }  if (zipCache.owner == owner) {    this.zipFiles.set(null);    zipCache.flush();  }}  }
class C{  public AbstractDelegatingSailImplConfig(){  super();}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.ARGUMENT__SPREAD:    setSpread(SPREAD_EDEFAULT);  return;case N4JSPackage.ARGUMENT__EXPRESSION:setExpression((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public double optDouble(String key){  return this.optDouble(key,Double.NaN);}  }
class C{  public boolean isEnabled(){  return mEnabled;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.ROUTER__NAME:    setName((String)newValue);  return;case EipPackage.ROUTER__TO_CHANNELS:getToChannels().clear();getToChannels().addAll((Collection<? extends Channel>)newValue);return;case EipPackage.ROUTER__FROM_CHANNELS:getFromChannels().clear();getFromChannels().addAll((Collection<? extends Channel>)newValue);return;case EipPackage.ROUTER__OWNED_ROUTES:getOwnedRoutes().clear();getOwnedRoutes().addAll((Collection<? extends ConditionalRoute>)newValue);return;case EipPackage.ROUTER__TYPE:setType((RoutingType)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void schedule(TransformExecutor<?> work){  workQueue.offer(work);  updateCurrentlyEvaluating();}  }
class C{  public void force(boolean metadata){  mappedBuffer.force();  super.force(metadata);}  }
class C{  protected void addContentLengthRequestHeader(final HttpState state,final HttpConnection conn) throws IOException, HttpException {  LOG.trace("enter EntityEnclosingMethod.addContentLengthRequestHeader(" + "HttpState, HttpConnection)");  if ((getRequestHeader("content-length") == null) && (getRequestHeader("Transfer-Encoding") == null)) {    final long len=getRequestContentLength();    if (len < 0) {      if (getEffectiveVersion().greaterEquals(HttpVersion.HTTP_1_1)) {        addRequestHeader("Transfer-Encoding","chunked");      } else {        throw new ProtocolException(getEffectiveVersion() + " does not support chunk encoding");      }    } else {      addRequestHeader("Content-Length",String.valueOf(len));    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.396 -0500",hash_original_method="077BDE7287D2ACDD7F2A84D6156CB0F7",hash_generated_method="9A1703FB99D1A51BB295FB9E5853B2EB") public SIPDialog createDialog(SIPClientTransaction transaction,SIPResponse sipResponse){  String dialogId=((SIPRequest)transaction.getRequest()).getDialogId(false);  SIPDialog retval=null;  if (this.earlyDialogTable.get(dialogId) != null) {    retval=this.earlyDialogTable.get(dialogId);    if (sipResponse.isFinalResponse()) {      this.earlyDialogTable.remove(dialogId);    }  } else {    retval=new SIPDialog(transaction,sipResponse);  }  return retval;}  }
class C{  @Override protected void okPressedAndApproved(){  ownGefaehrdung.setId(textNumber.getText());  ownGefaehrdung.setTitel(textName.getText());  ownGefaehrdung.setBeschreibung(textDescription.getText());  ownGefaehrdung.setOwnkategorie(textCategory.getText());  try {    ownGefaehrdung=OwnGefaehrdungHome.getInstance().save(ownGefaehrdung);  } catch (  Exception e) {    ExceptionUtil.log(e,Messages.EditGefaehrdungDialog_6);  }}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  public synchronized StringBuffer deleteCharAt(int location){  deleteCharAt0(location);  return this;}  }
class C{  public void put(String key,Float value){  mValues.put(key,value);}  }
class C{  public static void send(Collection<InternalDistributedMember> acceptedMembers,InternalDistributedMember newPrimary,PartitionedRegion pr,int bid){  Assert.assertTrue(newPrimary != null,"VolunteerPrimaryBucketMessage NULL recipient");  ReplyProcessor21 response=new ReplyProcessor21(pr.getSystem(),acceptedMembers);  EndBucketCreationMessage msg=new EndBucketCreationMessage(acceptedMembers,pr.getPRId(),response,bid,newPrimary);  pr.getDistributionManager().putOutgoing(msg);}  }
class C{  public Map<String,String> parse(final char[] charArray,int offset,int length,char separator){  if (charArray == null) {    return new HashMap<>();  }  HashMap<String,String> params=new HashMap<>();  this.chars=Arrays.copyOf(charArray,charArray.length);  this.pos=offset;  this.len=length;  String paramName;  String paramValue;  while (hasChar()) {    paramName=parseToken(new char[]{'=',separator});    paramValue=null;    if (hasChar() && (charArray[pos] == '=')) {      pos++;      paramValue=parseQuotedToken(new char[]{separator});      if (paramValue != null) {        try {          paramValue=MimeUtility.decodeText(paramValue);        } catch (        UnsupportedEncodingException e) {        }      }    }    if (hasChar() && (charArray[pos] == separator)) {      pos++;    }    if ((paramName != null) && (paramName.length() > 0)) {      if (this.lowerCaseNames) {        paramName=paramName.toLowerCase(Locale.ENGLISH);      }      params.put(paramName,paramValue);    }  }  return params;}  }
class C{  public void detach(){  if (m_allowDetach) {    AxesWalker walker=m_firstWalker;    while (null != walker) {      walker.detach();      walker=walker.getNextWalker();    }    m_lastUsedWalker=null;    super.detach();  }}  }
class C{  public boolean isSwitchCaseBranch(){  return isSwitch;}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(this.opt(index));}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:43.043 -0500",hash_original_method="B5D69574A1B80BC6A0DAF5C729E713CA",hash_generated_method="25E6FF9A7AE135B20437E952A4A56138") public static boolean dumpService(String name,FileDescriptor fd,String[] args){  IBinder service=ServiceManager.getService(name);  if (service == null) {    Log.e(TAG,"Can't find service to dump: " + name);    return false;  }  try {    service.dump(fd,args);    return true;  } catch (  RemoteException e) {    Log.e(TAG,"Can't dump service: " + name,e);    return false;  }}  }
class C{  public static void sort(Object[] array){  sort(0,array.length,array);}  }
class C{  public void removeStatement(String stmtName){  Integer group=statementGroups.remove(stmtName);  if (group != null) {    groupMetrics[group].removeStatement(stmtName);  }}  }
class C{  public static boolean isModulePolyfill(QualifiedName name){  if (name == null || name.getSegmentCount() < 1)   return false;  return MODULE_POLYFILL_SEGMENT.equals(name.getSegment(0));}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public IconicsDrawable drawContour(boolean drawContour){  if (mDrawContour != drawContour) {    mDrawContour=drawContour;    if (mDrawContour) {      mIconPadding+=mContourWidth;    } else {      mIconPadding-=mContourWidth;    }    invalidateSelf();  }  return this;}  }
class C{  public final boolean isEnabled(){  return fEnabled;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:34:30.607 -0500",hash_original_method="0A3E235DA23D08A23EA1E7B6F3841669",hash_generated_method="52005CAA94770D6C812849D99D9A273C") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public byte[] toByteArray(String ascii){  if (ascii == null) {    return EMPTY_BYTE_ARRAY;  }  return fromAscii(ascii.toCharArray());}  }
class C{  protected void spinFan(){  ObservableList<Node> list=paneForBlades.getChildren();  for (int i=0; i < list.size(); i++) {    Arc a=(Arc)list.get(i);    a.setStartAngle(a.getStartAngle() + startAngle);  }}  }
class C{  private PopupDialog(Shell parent,int shellStyle,boolean takeFocusOnOpen,boolean persistSize,boolean persistLocation,boolean showDialogMenu,boolean showPersistActions,String titleText,String infoText,boolean use34API){  super(parent);  if ((shellStyle & SWT.NO_TRIM) != 0) {    shellStyle&=~(SWT.NO_TRIM | SWT.SHELL_TRIM);  }  setShellStyle(shellStyle);  this.takeFocusOnOpen=takeFocusOnOpen;  this.showDialogMenu=showDialogMenu;  this.showPersistActions=showPersistActions;  this.titleText=titleText;  this.infoText=infoText;  setBlockOnOpen(false);  this.isUsing34API=use34API;  this.persistSize=persistSize;  this.persistLocation=persistLocation;  migrateBoundsSetting();  initializeWidgetState();}  }
class C{  public void delete(String databaseName) throws IOException {  impl.deleteDB(databaseName);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:26.795 -0500",hash_original_method="37129B7DF3D611DDAA565F6673B5A889",hash_generated_method="F883E303C45671B497E96C97324A3629") final void removeThread(Thread thread) throws IllegalThreadStateException {synchronized (threadRefs) {    for (Iterator<Thread> i=threads.iterator(); i.hasNext(); ) {      if (i.next().equals(thread)) {        i.remove();        break;      }    }  }  destroyIfEmptyDaemon();}  }
class C{  public void dup2X2(){  mv.visitInsn(Opcodes.DUP2_X2);}  }
class C{  public void onPause(){}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public void updateRow() throws SQLException {  throw new NotUpdatable();}  }
class C{  public void scheduleLocalNotification(LocalNotification n,long firstTime,int repeat){  if (n.getId() == null || n.getId().length() == 0) {    throw new IllegalArgumentException("Notification ID must be set");  }  if (firstTime < System.currentTimeMillis()) {    throw new IllegalArgumentException("Cannot schedule a notification to a past time");  }  if (n.getAlertSound() != null && n.getAlertSound().length() > 0 && !n.getAlertSound().startsWith("/notification_sound")) {    throw new IllegalArgumentException("Alert sound file name must start with the 'notification_sound' prefix");  }  impl.scheduleLocalNotification(n,firstTime,repeat);}  }
class C{  public int incrementDepth(){  return this.depth++;}  }
class C{  private void doResetPassword(String newPassword){  if (alertIfMonkey(mActivity,R.string.monkey_reset_password)) {    return;  }  mDPM.resetPassword(newPassword,DevicePolicyManager.RESET_PASSWORD_REQUIRE_ENTRY);  AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);  String message=mActivity.getString(R.string.reset_password_warning,newPassword);  builder.setMessage(message);  builder.setPositiveButton(R.string.reset_password_ok,null);  builder.show();}  }
class C{  public <T>TSink<T> publish(TStream<T> stream,Function<T,String> topic,Function<T,byte[]> payload,Function<T,Integer> qos,Function<T,Boolean> retain){  return stream.sink(new MqttPublisher<T>(connector,payload,topic,qos,retain));}  }
class C{  @Implementation @SuppressLint("ShowToast") public static Toast makeText(Context context,CharSequence text,int duration){  LinearLayout layout=new LinearLayout(context);  layout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));  TextView messageView=new TextView(context);  layout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  messageView.setId(android.R.id.message);  layout.addView(messageView);  Toast toast=new Toast(context);  toast.setView(layout);  toast.setDuration(duration);  toast.setText(text);  return toast;}  }
class C{  public void test() throws Exception {  short val=0xff;  TestCase.assertEquals(-1,U8.t(val));  TestCase.assertEquals(val,U8.f((byte)-1));}  }
class C{  public static String createLinkForSpreadsheet(String url,String title){  StringBuilder sb=new StringBuilder();  sb.append("=HYPERLINK(\"");  sb.append(url);  sb.append("\";\"");  sb.append(title);  sb.append("\")");  String getLinkForSpreadsheet=sb.toString();  return getLinkForSpreadsheet;}  }
class C{  public Person(){}  }
class C{  protected List<Element> selectAppDeployments(Deployable deployable,Element domain){  String xpath="//weblogic:app-deployment[weblogic:name/text()='" + createIdForDeployable(deployable) + "']";  Element toSearch=domain;  return xmlTool.selectElementsMatchingXPath(xpath,toSearch);}  }
