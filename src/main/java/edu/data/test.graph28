class C{  public int allowed_modifier_changes(){  String s=soot.PhaseOptions.getString(options,"allowed-modifier-changes");  if (s.equalsIgnoreCase("unsafe"))   return allowed_modifier_changes_unsafe;  if (s.equalsIgnoreCase("safe"))   return allowed_modifier_changes_safe;  if (s.equalsIgnoreCase("none"))   return allowed_modifier_changes_none;  throw new RuntimeException("Invalid value " + s + " of phase option allowed-modifier-changes");}  }
class C{  public void onTransactionSynchronization(TransactionData transactionData){}  }
class C{  private boolean isIncludedValue(double value,double[] searchArray,double tolerance){  boolean found=false;  int i=0;  while (!found && i < searchArray.length) {    if (FastMath.abs(value - searchArray[i]) < tolerance) {      found=true;    }    i++;  }  return found;}  }
class C{  public static void e(String msg){  if (isDebug) {    Log.e(TAG,msg);  }}  }
class C{  public void calcMinMax(){  if (mDataSets == null)   return;  mYMax=-Float.MAX_VALUE;  mYMin=Float.MAX_VALUE;  mXMax=-Float.MAX_VALUE;  mXMin=Float.MAX_VALUE;  for (int i=0, size=mDataSets.size(); i < size; i++) {    T set=mDataSets.get(i);    calcMinMax(set);  }  mLeftAxisMax=-Float.MAX_VALUE;  mLeftAxisMin=Float.MAX_VALUE;  mRightAxisMax=-Float.MAX_VALUE;  mRightAxisMin=Float.MAX_VALUE;  T firstLeft=getFirstLeft(mDataSets);  if (firstLeft != null) {    mLeftAxisMax=firstLeft.getYMax();    mLeftAxisMin=firstLeft.getYMin();    for (int i=0; i < mDataSets.size(); i++) {      T dataSet=mDataSets.get(i);      if (dataSet.getAxisDependency() == AxisDependency.LEFT) {        if (dataSet.getYMin() < mLeftAxisMin)         mLeftAxisMin=dataSet.getYMin();        if (dataSet.getYMax() > mLeftAxisMax)         mLeftAxisMax=dataSet.getYMax();      }    }  }  T firstRight=getFirstRight(mDataSets);  if (firstRight != null) {    mRightAxisMax=firstRight.getYMax();    mRightAxisMin=firstRight.getYMin();    for (int i=0; i < mDataSets.size(); i++) {      T dataSet=mDataSets.get(i);      if (dataSet.getAxisDependency() == AxisDependency.RIGHT) {        if (dataSet.getYMin() < mRightAxisMin)         mRightAxisMin=dataSet.getYMin();        if (dataSet.getYMax() > mRightAxisMax)         mRightAxisMax=dataSet.getYMax();      }    }  }}  }
class C{  @Override public void process(ITypesetter out,String arg) throws TruthError {  StandardObjectWriters.setup();  if (recipeCategories == null || Boolean.getBoolean("fz.forceRecipeRefresh")) {    categoryOrder.clear();    recipeCategories=new HashMap<String,ArrayList<ArrayList>>();    Core.logInfo("Loading recipe list");    loadRecipes();    Core.logInfo("Done");  }  if (arg == null || arg.equalsIgnoreCase("categories") || arg.isEmpty()) {    out.write("\\title{Recipe Categories}\n\n");    for (    String cat : categoryOrder) {      out.write(String.format("\\link{cgi/recipes/category/%s}{\\local{%s}}\\nl",cat,cat));    }  } else   if (arg.startsWith("category/")) {    String cat=arg.replace("category/","");    if (recipeCategories.containsKey(cat)) {      ArrayList<ArrayList> recipeList=recipeCategories.get(cat);      writeRecipes(out,null,false,cat,recipeList,null);    } else {      throw new TruthError("Category not found: " + arg);    }  } else {    ArrayList<ItemStack> matchers=null;    boolean mustBeResult=false;    if (!arg.equalsIgnoreCase("all")) {      if (arg.startsWith("for/")) {        mustBeResult=true;        arg=arg.replace("for/","");      }      matchers=DocumentationModule.getNameItemCache().get(arg);      if (matchers == null || matchers.size() == 0) {        throw new TruthError("Couldn't find item: " + arg);      }      out.write("\\nl");    }    if (matchers == null) {      matchers=new ArrayList<ItemStack>();      matchers.add(null);    }    HashSet<ArrayList> previously_found=new HashSet<ArrayList>();    for (    ItemStack matching : matchers) {      for (      String cat : categoryOrder) {        ArrayList<ArrayList> recipeList=recipeCategories.get(cat);        int got=writeRecipes(out,matching,mustBeResult,cat,recipeList,previously_found);        if (got > 0)         out.write("\\nl");      }    }  }}  }
class C{  public FileAdapter(Context context){  this.context=context;}  }
class C{  @SafeVarargs public static <S,T>Aggregate<S,Map<String,T>> select(NamedAggregate<? super S,? extends T>... aggregates){  return select(ImmutableSet.copyOf(aggregates));}  }
class C{  public static String stripFileProtocol(String uriString){  if (uriString.startsWith("file://")) {    uriString=uriString.substring(7);  }  return uriString;}  }
class C{  public static ModRevisionCmpTarget modRevision(long revision){  return new ModRevisionCmpTarget(revision);}  }
class C{  @PostConstruct void init(){  listenerContainer=cacheRegistrationService.registerToAlarms(this);}  }
class C{  private ValueSubPanel createValuePanel(boolean addValueField){  ValueSubPanel valuePanel=new ValueSubPanel(addValueField);  outerPanel.add(valuePanel,ValueSubPanel.getPanelName());  return valuePanel;}  }
class C{  public static int convertDpToPixel(float dp,Context context){  if (pxForDp.containsKey(dp)) {    return pxForDp.get(dp);  }  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  int px=(int)(dp * (metrics.densityDpi / 160f));  pxForDp.put(dp,px);  return px;}  }
class C{  ClusterUnitDatabase(URL url,boolean isBinary) throws IOException {  BulkTimer.LOAD.start("ClusterUnitDatabase");  InputStream is=Utilities.getInputStream(url);  if (isBinary) {    loadBinary(is);  } else {    loadText(is);  }  is.close();  BulkTimer.LOAD.stop("ClusterUnitDatabase");}  }
class C{  @Deprecated public Potion(PotionType type,int level,boolean splash){  this(type,level);  this.splash=splash;}  }
class C{  private int doEndOfFile() throws EOFException {  eof=true;  if (throwEofException) {    throw new EOFException();  }  return -1;}  }
class C{  public InvocationConstraints(InvocationConstraint req,InvocationConstraint pref){  if (req != null) {    reqs=new InvocationConstraint[]{req};  }  if (pref != null) {    prefs=new InvocationConstraint[]{pref};  }  reduce();}  }
class C{  public static boolean isWriteOnly(int mod){  return Modifiers.contains(mod,UpdateModifiers.WRITE_ONLY);}  }
class C{  public void fileRotated(){}  }
class C{  public void onActivityResult(Activity activity,int requestCode,int resultCode,Intent data){  if (requestCode == LI_SDK_CROSSLINK_REQUEST_CODE && deepLinkListener != null) {    if (resultCode == Activity.RESULT_OK) {      deepLinkListener.onDeepLinkSuccess();    } else     if (resultCode == Activity.RESULT_CANCELED) {      if (data == null || data.getExtras() == null) {        deepLinkListener.onDeepLinkError(new LIDeepLinkError(LIAppErrorCode.USER_CANCELLED,""));      } else {        String errorMessage=data.getExtras().getString(DEEPLINK_ERROR_MESSAGE_EXTRA_NAME);        String errorCode=data.getExtras().getString(DEEPLINK_ERROR_CODE_EXTRA_NAME);        deepLinkListener.onDeepLinkError(new LIDeepLinkError(errorCode,errorMessage));      }    }  }}  }
class C{  public static Intent createAddToHomeIntent(String url,String title,Bitmap icon){  Intent shortcutIntent=createShortcutIntent(url);  return createAddToHomeIntent(url,title,icon,shortcutIntent);}  }
class C{  public static void encodeMulticastAnnouncement(MulticastAnnouncement announcement,DatagramBufferFactory bufs) throws IOException {  try {    LinkedList groups=new LinkedList();    groups.addAll(Arrays.asList(announcement.getGroups()));    do {      ByteBuffer buf=bufs.newBuffer();      int slim=buf.limit();      buf.limit(slim - SERVICE_ID_LEN);      buf.putLong(announcement.getSequenceNumber());      putUtf(buf,announcement.getHost());      buf.putShort(intToUshort(announcement.getPort()));      int ngroups=0;      int ngroupsPos=buf.position();      buf.putShort((short)0);      try {        while (!groups.isEmpty() && ngroups < MAX_USHORT) {          putUtf(buf,(String)groups.getFirst());          groups.removeFirst();          ngroups++;        }      } catch (      BufferOverflowException e) {        if (ngroups == 0) {          throw e;        }      }      buf.putShort(ngroupsPos,intToUshort(ngroups));      ServiceID id=announcement.getServiceID();      buf.limit(slim);      buf.putLong(id.getMostSignificantBits());      buf.putLong(id.getLeastSignificantBits());    } while (!groups.isEmpty());  } catch (  RuntimeException e) {    throw new DiscoveryProtocolException(null,e);  }}  }
class C{  public void updateDataTagAddress(final DataTagAddressUpdate dataTagAddressUpdate,final DataTagAddress dataTagAddress) throws NoSuchFieldException, IllegalAccessException {  fillNonNullFields(dataTagAddressUpdate,dataTagAddress);  removeListOfFields(dataTagAddressUpdate.getFieldsToRemove(),dataTagAddress);  if (dataTagAddressUpdate.getHardwareAddressUpdate() != null) {    updateHardwareAddress(dataTagAddressUpdate.getHardwareAddressUpdate(),dataTagAddress.getHardwareAddress());  }}  }
class C{  public TwoColumnOutput(OutputStream out,int leftWidth,int rightWidth,String spacer){  this(new OutputStreamWriter(out),leftWidth,rightWidth,spacer);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_CONFLICT_ME_TO_B(String skillname,String skilltarget){  return new SM_SYSTEM_MESSAGE(1201079,skillname,skilltarget);}  }
class C{  void increment(){  assert isEnabled();  setRawCounter(getCount() + 1);}  }
class C{  @SuppressWarnings("rawtypes") public boolean contextByCallChain(Edge[] callEdgeChain,Local l,SparkField field,PtSensVisitor visitor){  Obj_full_extractor pts_l=new Obj_full_extractor();  if (contextsByCallChain(callEdgeChain,l,pts_l) == false)   return false;  visitor.prepare();  for (  IntervalContextVar icv : pts_l.outList) {    AllocNode obj=(AllocNode)icv.var;    AllocDotField obj_f=geomPts.findAllocDotField(obj,field);    if (obj_f == null)     continue;    IVarAbstraction objField=geomPts.findInternalNode(obj_f);    if (objField == null)     continue;    long L=icv.L;    long R=icv.R;    assert L < R;    objField.get_all_context_sensitive_objects(L,R,visitor);  }  pts_l=null;  visitor.finish();  return visitor.numOfDiffObjects() != 0;}  }
class C{  public ThrowStmt newThrowStmt(Value op){  return new GThrowStmt(op);}  }
class C{  public PegasusSolver(final double absoluteAccuracy){  super(absoluteAccuracy,Method.PEGASUS);}  }
class C{  public SpaceTypeDescriptorBuilder supportsOptimisticLocking(boolean supportsOptimisticLocking){  this._supportsOptimisticLocking=supportsOptimisticLocking;  return this;}  }
class C{  public static Zdiagmat o(Zdiagmat D1,Zdiagmat D2) throws JampackException {  if (D1.order != D2.order) {    throw new JampackException("Matrices not conformable for addition");  }  Zdiagmat C=new Zdiagmat(D1);  for (int i=0; i < D1.order; i++) {    C.re[i]=C.re[i] + D2.re[i];    C.im[i]=C.im[i] + D2.im[i];  }  return C;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillCastingTime_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200944,skillcaster,skilltarget,skillname);}  }
class C{  public static List<BaseMqttMessage> readAndConvertMessageLog(final File selectedFile) throws SpyException {  final List<String> lines=FileUtils.readFileAsLines(selectedFile);  logger.info("Message audit log - read {} messages from {}",lines.size(),selectedFile.getAbsoluteFile());  return processMessageLog(parseMessageLog(lines,null,0,0),null,0,0);}  }
class C{  @Nullable @Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  Log_OC.d(TAG,"query received in thread " + Thread.currentThread().getName());  int match=mUriMatcher.match(uri);switch (match) {case SEARCH:    return searchForUsersOrGroups(uri);default :  return null;}}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public boolean isNotSet(){  return isNotSet;}  }
class C{  @Override public final short readShort() throws IOException {  dis.readFully(work,0,2);  return (short)((work[1] & 0xff) << 8 | (work[0] & 0xff));}  }
class C{  public boolean useRecentDeletes(){  return isEvictableCachePolicy() && !_isMemorySA && (!_readOnlySA || _engine.hasMirror());}  }
class C{  public void testDeploymentEvents() throws Exception {  Deployment deployment=null;  try {    listener.clearEventsReceived();    deployment=repositoryService.createDeployment().addClasspathResource("org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml").deploy();    assertNotNull(deployment);    assertEquals(2,listener.getEventsReceived().size());    assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiEntityEvent);    ActivitiEntityEvent event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());    assertEquals(deployment.getId(),((Deployment)event.getEntity()).getId());    assertTrue(listener.getEventsReceived().get(1) instanceof ActivitiEntityEvent);    event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);    assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());    assertEquals(deployment.getId(),((Deployment)event.getEntity()).getId());    listener.clearEventsReceived();    repositoryService.setDeploymentCategory(deployment.getId(),"test");    assertEquals(1,listener.getEventsReceived().size());    assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiEntityEvent);    event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());    assertEquals(deployment.getId(),((Deployment)event.getEntity()).getId());    assertEquals("test",((Deployment)event.getEntity()).getCategory());    listener.clearEventsReceived();    repositoryService.deleteDeployment(deployment.getId(),true);    assertEquals(1,listener.getEventsReceived().size());    assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiEntityEvent);    event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());    assertEquals(deployment.getId(),((Deployment)event.getEntity()).getId());    listener.clearEventsReceived();  }  finally {    if (deployment != null && repositoryService.createDeploymentQuery().deploymentId(deployment.getId()).count() > 0) {      repositoryService.deleteDeployment(deployment.getId(),true);    }  }}  }
class C{  public static void generateEmptyXml(String path){  File file=new File(path);  JAXBContext jaxbContext;  try {    jaxbContext=JAXBContext.newInstance(DppType.class);    Marshaller jaxbMarshaller=jaxbContext.createMarshaller();    jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);    EditorialType editorial=new EditorialType();    editorial.setSeriesTitle("Required Title");    editorial.setEpisodeTitleNumber("Required Number");    editorial.setProgrammeTitle("Required Programme Title");    editorial.setProductionNumber("Required Production Number");    editorial.setSynopsis("Required Synopsis");    editorial.setOriginator("Required Originator");    editorial.setCopyrightYear(Calendar.getInstance().get(Calendar.YEAR));    editorial.setOtherIdentifier("");    editorial.setOtherIdentifierType("");    editorial.setGenre("");    editorial.setDistributor("");    TechnicalType technical=new TechnicalType();    technical.setShimName(ShimNameType.UK_DPP_HD);    technical.setShimVersion("1.1");    VideoType video=new VideoType();    video.setPictureRatio("16:9");    video.setThreeD(false);    video.setThreeDType(ThreeDTypeType.SIDE_BY_SIDE);    video.setProductPlacement(false);    video.setPSEPass(PSEPassType.NOT_TESTED);    video.setPSEManufacturer("");    video.setPSEVersion("");    video.setVideoComments("");    AudioType audio=new AudioType();    audio.setAudioTrackLayout(AudioTrackLayoutDmAs11Type.EBU_R_48_2_A);    audio.setPrimaryAudioLanguage(Iso6392CodeType.ZXX);    audio.setSecondaryAudioLanguage(Iso6392CodeType.ZXX);    audio.setTertiaryAudioLanguage(Iso6392CodeType.ZXX);    audio.setAudioLoudnessStandard(AudioLoudnessStandardType.NONE);    audio.setAudioComments("");    TimecodesType timecodes=new TimecodesType();    TimecodeType lineUpStart=new TimecodeType();    lineUpStart.setValue(LINE_UP_START);    TimecodeType identClockStart=new TimecodeType();    identClockStart.setValue(IDENT_CLOCK_START);    DurationType zeroDuration=new DurationType();    zeroDuration.setValue("00:00:00:00");    timecodes.setLineUpStart(lineUpStart);    timecodes.setIdentClockStart(identClockStart);    timecodes.setTotalNumberOfParts(1);    timecodes.setTotalProgrammeDuration(zeroDuration);    SegmentationType segmentation=new SegmentationType();    SegmentType segment=new SegmentType();    segment.setPartNumber(1);    segment.setPartTotal(1);    TimecodeType firstPartSOM=new TimecodeType();    firstPartSOM.setValue(FIRST_PART_SOM);    segment.setPartSOM(firstPartSOM);    segment.setPartDuration(zeroDuration);    segmentation.getPart().add(segment);    timecodes.setParts(segmentation);    AccessServicesType accessServicesType=new AccessServicesType();    accessServicesType.setAudioDescriptionPresent(false);    accessServicesType.setAudioDescriptionType(AudioDescriptionTypeType.CONTROL_DATA_NARRATION);    accessServicesType.setClosedCaptionsPresent(false);    accessServicesType.setClosedCaptionsType(CaptionsTypeType.TRANSLATION);    accessServicesType.setClosedCaptionsLanguage(Iso6392CodeType.ZXX);    accessServicesType.setOpenCaptionsPresent(false);    accessServicesType.setOpenCaptionsType(CaptionsTypeType.HARD_OF_HEARING);    accessServicesType.setOpenCaptionsLanguage(Iso6392CodeType.ZXX);    accessServicesType.setSigningPresent(SigningPresentType.NO);    accessServicesType.setSignLanguage(SignLanguageType.BSL_BRITISH_SIGN_LANGUAGE);    AdditionalType additional=new AdditionalType();    additional.setCompletionDate(DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar()));    additional.setTextlessElementsExist(false);    additional.setProgrammeHasText(false);    additional.setProgrammeTextLanguage(Iso6392CodeType.ZXX);    ContactInformationType contactInformation=new ContactInformationType();    contactInformation.setContactEmail("account@myemail.com");    contactInformation.setContactTelephoneNumber("+1 000 000 0000");    DppType dpp=new DppType();    dpp.setEditorial(editorial);    dpp.setTechnical(technical);    technical.setVideo(video);    technical.setAudio(audio);    technical.setTimecodes(timecodes);    technical.setAccessServices(accessServicesType);    technical.setAdditional(additional);    technical.setContactInformation(contactInformation);    JAXBElement<DppType> dppJaxb=new ObjectFactory().createDpp(dpp);    jaxbMarshaller.marshal(dppJaxb,file);  } catch (  JAXBException|DatatypeConfigurationException e) {    throw new RuntimeException(e);  }}  }
class C{  public static <T>List<T> sort(List<T> list,Comparator<? super T> comparator){  Collections.sort(list,comparator);  return list;}  }
class C{  void localEscapes(Local l){  globEscape.addAll(locals.get(l));  if (doCheck)   sanityCheck();}  }
class C{  public long size(){  return mSizeInBytes.get();}  }
class C{  void addAssociatedModelForJoinTable(String associatedModelName,long associatedId){  Set<Long> associatedIdsM2MSet=getAssociatedModelsMapForJoinTable().get(associatedModelName);  if (associatedIdsM2MSet == null) {    associatedIdsM2MSet=new HashSet<Long>();    associatedIdsM2MSet.add(associatedId);    associatedModelsMapForJoinTable.put(associatedModelName,associatedIdsM2MSet);  } else {    associatedIdsM2MSet.add(associatedId);  }}  }
class C{  public static byte[] writeUnsignedShort(int s){  ByteBuffer bb=ByteBuffer.allocate(2);  bb.put((byte)((s >> 8) & 0xff));  bb.put((byte)(s & 0xff));  return bb.array();}  }
class C{  public boolean wantTag(Tag t){  return (t instanceof LineNumberTag) || (t instanceof SourceLnPosTag);}  }
class C{  public boolean renameSample(String sample,String newName,boolean allowReplaceSample){  if (allowReplaceSample || !table.rowKeySet().contains(newName)) {    Map<String,Object> row=table.row(sample);    if (row != null) {      table.rowKeySet().remove(sample);      for (      String key : row.keySet()) {        table.put(newName,key,row.get(key));      }    }    int pos=Math.max(0,sampleOrder.indexOf(sample));    sampleOrder.remove(sample);    sampleOrder.add(pos,newName);    return true;  }  return false;}  }
class C{  public BodyExtractorWalker(SootClass sc,SootResolver resolver,Map<SootMethod,JimpleBody> methodToParsedBodyMap){  super(sc,resolver);  this.methodToParsedBodyMap=methodToParsedBodyMap;}  }
class C{  public SingletonProxyTrustIterator(Object obj){  if (obj == null) {    throw new NullPointerException("cannot be null");  }  this.obj=obj;}  }
class C{  protected AuthConfirmQuery clientId(int value){  return unsafeParam("client_id",value);}  }
class C{  public CustomSwitchPreference(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  public static final int binarySearch(Object[] a,Object key,int length){  int x1=0;  int x2=length;  int i=x2 / 2, c;  while (x1 < x2) {    c=((Comparable)a[i]).compareTo(key);    if (c == 0) {      return i;    } else     if (c < 0) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  @NonNull public static Pair<Project,Project> createForSingleFile(@NonNull IntellijLintClient client,@Nullable VirtualFile file,@NonNull Module module){  LintModuleProject project=createModuleProject(client,module);  LintModuleProject main=null;  Map<Project,Module> projectMap=Maps.newHashMap();  if (project != null) {    project.setDirectLibraries(Collections.<Project>emptyList());    if (file != null) {      project.addFile(VfsUtilCore.virtualToIoFile(file));    }    projectMap.put(project,module);    if (!project.isAndroidProject()) {      Module androidModule=findAndroidModule(module);      if (androidModule != null) {        main=createModuleProject(client,androidModule);        if (main != null) {          projectMap.put(main,androidModule);          main.setDirectLibraries(Collections.<Project>singletonList(project));        }      }    }  }  client.setModuleMap(projectMap);  return Pair.<Project,Project>create(project,main);}  }
class C{  private void computeTabScaleAlphaDepthHelper(RectF stackRect){  final float stackScale=getStackScale(stackRect);  final float discardRange=getDiscardRange();  for (int i=0; i < mStackTabs.length; ++i) {    assert mStackTabs[i] != null;    StackTab stackTab=mStackTabs[i];    LayoutTab layoutTab=stackTab.getLayoutTab();    final float discard=stackTab.getDiscardAmount();    float discardScale=computeDiscardScale(discard,discardRange,stackTab.getDiscardFromClick());    layoutTab.setScale(stackTab.getScale() * discardScale * stackScale);    layoutTab.setBorderScale(discardScale);    float discardAlpha=computeDiscardAlpha(discard,discardRange);    layoutTab.setAlpha(stackTab.getAlpha() * discardAlpha);  }}  }
class C{  public void stateChanged(ChangeEvent event){  if (panelFont != null) {    int scroll=charMap4.getGridScroll().getValue();    int newCorner=scroll * panelColumns;    if (newCorner != cornerIndex) {      cornerIndex=newCorner;      this.repaint();    }  }}  }
class C{  @VisibleForTesting public static Intent createUploadIntent(Context context,File minidumpFile,File logfile){  Intent intent=new Intent(context,MinidumpUploadService.class);  intent.setAction(ACTION_UPLOAD);  intent.putExtra(FILE_TO_UPLOAD_KEY,minidumpFile.getAbsolutePath());  intent.putExtra(UPLOAD_LOG_KEY,logfile.getAbsolutePath());  return intent;}  }
class C{  public void put(String key,File file,String contentType) throws FileNotFoundException {  if (key != null && file != null) {    fileParams.put(key,new FileWrapper(file,contentType));  }}  }
class C{  public void sort(List<Map<String,Object>> sheet,String key){  Collections.sort(sheet,new FieldComparator(key));}  }
class C{  @Override public void startConditional(short type,Augmentations augs) throws XNIException {}  }
class C{  public void writeToUrlConnection(HttpURLConnection urlConnection) throws IOException {}  }
class C{  public void clear(){  int n=mSize;  Object[] values=mValues;  for (int i=0; i < n; i++) {    values[i]=null;  }  mSize=0;  mGarbage=false;}  }
class C{  public boolean hasBlock(){  return getBlockOpt().getNumChild() != 0;}  }
class C{  public static Map<String,Object> adjustDebugLevels(DispatchContext dctc,Map<String,?> context){  Debug.set(Debug.FATAL,"Y".equalsIgnoreCase((String)context.get("fatal")));  Debug.set(Debug.ERROR,"Y".equalsIgnoreCase((String)context.get("error")));  Debug.set(Debug.WARNING,"Y".equalsIgnoreCase((String)context.get("warning")));  Debug.set(Debug.IMPORTANT,"Y".equalsIgnoreCase((String)context.get("important")));  Debug.set(Debug.INFO,"Y".equalsIgnoreCase((String)context.get("info")));  Debug.set(Debug.TIMING,"Y".equalsIgnoreCase((String)context.get("timing")));  Debug.set(Debug.VERBOSE,"Y".equalsIgnoreCase((String)context.get("verbose")));  return ServiceUtil.returnSuccess();}  }
class C{  public PhotosGetQueryWithExtended feedType(String value){  return unsafeParam("feed_type",value);}  }
class C{  private void pack(){  for (int i=0; i < ptm.getColumnCount(); i++) {    JTableColumnPacker.packColumn(this,i,COLUMN_MARGIN);  }}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  if (DEBUG)   debugPrintln("debug is on");  ClassLoader cl=findClassLoader();  try {    String systemProp=SecuritySupport.getSystemProperty(factoryId);    if (systemProp != null && systemProp.length() > 0) {      if (DEBUG)       debugPrintln("found system property, value=" + systemProp);      return newInstance(systemProp,cl,true);    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=SecuritySupport.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=SecuritySupport.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXercesProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=SecuritySupport.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXercesProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=SecuritySupport.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXercesProperties=new Properties();          fis=SecuritySupport.getFileInputStream(propertiesFile);          fXercesProperties.load(fis);        }      } catch (      Exception x) {        fXercesProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXercesProperties != null) {      factoryClassName=fXercesProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=SecuritySupport.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    if (DEBUG)     debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return newInstance(factoryClassName,cl,true);  }  Object provider=findJarServiceProvider(factoryId);  if (provider != null) {    return provider;  }  if (fallbackClassName == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  if (DEBUG)   debugPrintln("using fallback, value=" + fallbackClassName);  return newInstance(fallbackClassName,cl,true);}  }
class C{  public Sample(short[] frameData,byte[] residualData,int residualSize){  this.frameData=frameData;  this.residualData=residualData;  this.residualSize=residualSize;}  }
class C{  public IEntryPacket findObjectInEntry(StateManager sm,IEntryPacket entry,Stack<StateManager> sms){  final StateManager tempStateManager=sms.pop();  final SpaceTypeInfo ownedTypeInfo=SpaceTypeInfoRepository.getTypeInfo(tempStateManager.getMetaData().getDescribedType());  final FieldMetaData[] fms=sm.getMetaData().getFields();  final FieldMetaData fmd=tempStateManager.getOwnerMetaData();  if (fmd == null)   throw new IllegalStateException("Owner field meta data is not set for entity of type: " + tempStateManager.getMetaData().getDescribedType().getName() + " with Id: "+ tempStateManager.getId());  int spacePropertyIndex=-1;  for (int i=0; i <= fmd.getIndex(); i++) {    if (fms[i].isVersion())     continue;    spacePropertyIndex++;  }  if (fmd.getAssociationType() == FieldMetaData.ONE_TO_MANY) {    final Object id=ApplicationIds.toPKValues(tempStateManager.getId(),tempStateManager.getMetaData())[0];    final Collection<?> values=(Collection<?>)entry.getFieldValue(spacePropertyIndex);    if (values != null) {      for (      Object item : values) {        Object itemId=ownedTypeInfo.getIdProperty().getValue(item);        if (id.equals(itemId)) {          final IEntryPacket entryPacket=getEntryPacketFromEntity(item);          return (sms.isEmpty()) ? entryPacket : findObjectInEntry(tempStateManager,entryPacket,sms);        }      }    }  } else   if (fmd.getAssociationType() == FieldMetaData.ONE_TO_ONE) {    final Object id=ApplicationIds.toPKValues(tempStateManager.getId(),tempStateManager.getMetaData())[0];    final Object value=entry.getFieldValue(spacePropertyIndex);    if (value != null) {      Object objectId=ownedTypeInfo.getIdProperty().getValue(value);      if (id.equals(objectId)) {        final IEntryPacket entryPacket=getEntryPacketFromEntity(value);        return (sms.isEmpty()) ? entryPacket : findObjectInEntry(tempStateManager,entryPacket,sms);      }    }  } else   if (fmd.isEmbeddedPC()) {    final Object value=entry.getFieldValue(spacePropertyIndex);    final IEntryPacket entryPacket=getEntryPacketFromEntity(value);    return (sms.isEmpty()) ? entryPacket : findObjectInEntry(tempStateManager,entryPacket,sms);  }  return null;}  }
class C{  public void finish(){  this.done=true;  this.interrupt();}  }
class C{  public static String makeLinkAuto(HttpServletRequest request,HttpServletResponse response,String uri,Boolean fullPath,Boolean secure,Boolean encode){  RequestHandler rh=RequestHandler.getRequestHandler(request.getServletContext());  return rh.makeLinkAuto(request,response,uri,null,null,null,null,fullPath,secure,encode);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static <V>int addDistinctList(List<V> sourceList,List<V> entryList){  if (sourceList == null || isEmpty(entryList)) {    return 0;  }  int sourceCount=sourceList.size();  for (  V entry : entryList) {    if (!sourceList.contains(entry)) {      sourceList.add(entry);    }  }  return sourceList.size() - sourceCount;}  }
class C{  public Collection values(){  processQueue();  return map.values();}  }
class C{  private void fillXMLAttributes(XMLStreamReader reader){  fAttributes.removeAllAttributes();  final int len=reader.getAttributeCount();  for (int i=0; i < len; ++i) {    fillQName(fAttributeQName,reader.getAttributeNamespace(i),reader.getAttributeLocalName(i),reader.getAttributePrefix(i));    String type=reader.getAttributeType(i);    fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,reader.getAttributeValue(i));    fAttributes.setSpecified(i,reader.isAttributeSpecified(i));  }}  }
class C{  public boolean removeEntryFromCache(IEntryHolder entryHolder,boolean initiatedByEvictionStrategy,boolean locked,IEntryCacheInfo pEntry,RecentDeleteCodes recentDeleteUsage){  if (!locked) {    if (!locked && pEntry == null)     throw new RuntimeException("removeEntryFromCache: invalid usage, unlocked && pEntry is null");    if (!initiatedByEvictionStrategy && !pEntry.setRemoving(false))     return false;  } else {    if (isEvictableCachePolicy() || entryHolder.isOffHeapEntry()) {      if (pEntry == null)       pEntry=entryHolder.isOffHeapEntry() ? ((IOffHeapEntryHolder)(entryHolder)).getOffHeapResidentPart() : getPEntryByUid(entryHolder.getUID());      if (pEntry == null)       throw new RuntimeException("removeEntryFromCache: locked && pEntry not found uid=" + entryHolder.getUID());      if (recentDeleteUsage != RecentDeleteCodes.INSERT_DUMMY)       pEntry.setRemoving(true);    }  }  if (recentDeleteUsage == RecentDeleteCodes.REMOVE_DUMMY) {    if (pEntry == null || !pEntry.isRecentDelete())     return false;  } else {    if (pEntry != null && isEvictableCachePolicy())     removeFromEvictionStrategy(pEntry);  }  if (recentDeleteUsage == RecentDeleteCodes.INSERT_DUMMY) {    if (pEntry == null)     pEntry=getPEntryByUid(entryHolder.getUID());    if (pEntry != null) {      IEntryHolder dummyEh=entryHolder.createDummy();      IEntryCacheInfo dummyPe=new EvictableEntryCacheInfo(dummyEh,0,false);      dummyPe.setRecentDelete();      _entries.replace(entryHolder.getUID(),pEntry,dummyPe);    }  } else {    if (pEntry == null)     pEntry=_entries.remove(entryHolder.getUID()); else     _entries.remove(entryHolder.getUID(),pEntry);  }  if (pEntry == null && locked)   throw new RuntimeException("removeEntryFromCache: locked && pEntry not found");  if (recentDeleteUsage == RecentDeleteCodes.REMOVE_DUMMY)   return true;  boolean inserted=(!isEvictableCachePolicy() || (pEntry != null && pEntry.wasInserted()));  if (!inserted)   return true;  TypeData typeData=_typeDataMap.get(entryHolder.getServerTypeDesc());  removeEntryReferences(pEntry,typeData,-1);  _leaseManager.unregister(pEntry,entryHolder.getEntryData().getExpirationTime());  if (isEvictableCachePolicy())   _cacheSize.decrementAndGet();  XtnData pXtn=null;  if (pEntry.getEntryHolder(this).getXidOriginatedTransaction() != null) {    pXtn=pEntry.getEntryHolder(this).getXidOriginated().getXtnData();    if (pXtn != null)     pXtn.removeFromNewEntries(pEntry);  }  if (pEntry.getEntryHolder(this).getWriteLockTransaction() != null) {    if (pEntry.getEntryHolder(this).getXidOriginatedTransaction() == null || !pEntry.getEntryHolder(this).getXidOriginatedTransaction().equals(pEntry.getEntryHolder(this).getWriteLockTransaction()))     pXtn=pEntry.getEntryHolder(this).getWriteLockOwner().getXtnData();    if (pXtn != null) {      removeLockedEntry(pXtn,pEntry);      pXtn.removeTakenEntry(pEntry);    }  }  if (isEvictableCachePolicy())   pEntry.setRemoved();  return true;}  }
class C{  public static boolean isUnlimitedStrengthAllowed(){  try {    return Cipher.getMaxAllowedKeyLength("AES") >= 256;  } catch (  NoSuchAlgorithmException e) {    return false;  }}  }
class C{  public int readNullTerminatedBytes(byte[] bytes) throws IOException {  int i=0;  while (true) {    byte letter=(byte)ins.read();    if (letter == 0)     return i; else     bytes[i++]=letter;  }}  }
class C{  public int valueAt(int index){  return mValues[index];}  }
class C{  public void normalizeTo(double dNewMax){  double dMax=0;  Iterator iValIter=hDistro.values().iterator();  while (iValIter.hasNext()) {    dMax=Math.max(dMax,(Double)iValIter.next());  }  double dFactor=dNewMax / dMax;  Iterator<TKeyType> iKeyIter=hDistro.keySet().iterator();  while (iKeyIter.hasNext()) {    TKeyType oKey=iKeyIter.next();    Double dVal=(Double)hDistro.get(oKey);    dVal*=dFactor;    hDistro.put(oKey,dVal);  }}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);}  }
class C{  protected void writeAnnotation(String loc) throws IOException {  hadAnnotations|=(loc != null);  locOut.writeObject(loc);}  }
class C{  public static boolean equals(IBinding b1,IBinding b2){  return b1.isEqualTo(b2);}  }
class C{  public String encode2XML(){  return null;}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  public static void executeCommand(ProcessBuilder p) throws IOException {  Process proc=p.start();  try (BufferedReader stdInput=new BufferedReader(new InputStreamReader(proc.getInputStream()));BufferedReader stdError=new BufferedReader(new InputStreamReader(proc.getErrorStream()))){    logger.info("Standard output of the command:\n");    String s;    while ((s=stdInput.readLine()) != null) {      logger.info(s);    }    logger.info("Standard error of the command (if any):\n");    while ((s=stdError.readLine()) != null) {      logger.info(s);    }  } }  }
class C{  public Object readResolve() throws ObjectStreamException {  Object stub=LRMIRuntime.getRuntime().getStubCache().getStub(_stubId);  if (stub == null) {    if (_stubCacheLogger.isLoggable(Level.FINEST))     _stubCacheLogger.finest("attempt to get stub from cache by id " + _stubId + " no cached stub exist under that id");    throw new MissingCachedStubException(_stubId);  }  if (_stubCacheLogger.isLoggable(Level.FINEST))   _stubCacheLogger.finest("got stub from cache by id " + _stubId + " result stub toString() = "+ stub);  return stub;}  }
class C{  private boolean isOnlyWhite(Bitmap refinedImage){  int[] pixelArray=new int[refinedImage.getWidth()];  refinedImage.getPixels(pixelArray,0,refinedImage.getWidth(),0,refinedImage.getHeight() / 2,refinedImage.getWidth(),1);  for (  int pixel : pixelArray) {    if (pixel != Color.rgb(255,255,255)) {      return false;    }  }  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_LEFT(int num1,String value0s){  return new SM_SYSTEM_MESSAGE(1400232,num1,value0s);}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder(super.toString());  builder.append("(");  builder.append(new String(magicNumbers));  builder.append(",");  builder.append(this.byteOffset);  builder.append(")");  return builder.toString();}  }
class C{  private Request makeRequest(DataSpec dataSpec){  long position=dataSpec.position;  long length=dataSpec.length;  boolean allowGzip=(dataSpec.flags & DataSpec.FLAG_ALLOW_GZIP) != 0;  HttpUrl url=HttpUrl.parse(dataSpec.uri.toString());  Request.Builder builder=new Request.Builder().url(url);  if (cacheControl != null) {    builder.cacheControl(cacheControl);  }synchronized (requestProperties) {    for (    Map.Entry<String,String> property : requestProperties.entrySet()) {      builder.addHeader(property.getKey(),property.getValue());    }  }  if (!(position == 0 && length == C.LENGTH_UNBOUNDED)) {    String rangeRequest="bytes=" + position + "-";    if (length != C.LENGTH_UNBOUNDED) {      rangeRequest+=(position + length - 1);    }    builder.addHeader("Range",rangeRequest);  }  builder.addHeader("User-Agent",userAgent);  if (!allowGzip) {    builder.addHeader("Accept-Encoding","identity");  }  if (dataSpec.postBody != null) {    builder.post(RequestBody.create(null,dataSpec.postBody));  }  return builder.build();}  }
class C{  private boolean isLegalContainer(Node node){  if (node == null)   return false;  while (node != null) {switch (node.getNodeType()) {case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_TYPE_NODE:      return false;  }  node=node.getParentNode();}return true;}  }
class C{  public boolean isPhantom(){  return isPhantom;}  }
class C{  public static TimePreferenceDialogFragmentCompat newInstance(String key){  final TimePreferenceDialogFragmentCompat fragment=new TimePreferenceDialogFragmentCompat();  final Bundle b=new Bundle(1);  b.putString(ARG_KEY,key);  fragment.setArguments(b);  return fragment;}  }
class C{  public int jdkver(){  return soot.PhaseOptions.getInt(options,"jdkver");}  }
class C{  public static boolean isItemRestrictedFrom(Player player,Item item,byte storage){  StorageType type=StorageType.getStorageTypeById(storage);switch (type) {case LEGION_WAREHOUSE:    if (!LegionService.getInstance().getLegionMember(player.getObjectId()).hasRights(LegionPermissionsMask.WH_WITHDRAWAL) || !LegionConfig.LEGION_WAREHOUSE || !player.isLegionMember()) {      PacketSendUtility.sendPacket(player,new SM_SYSTEM_MESSAGE(1300322));      return true;    }  break;default :break;}return false;}  }
class C{  public static GenericParser createParser(CarbonColumn carbonColumn,String[] complexDelimiters){  return createParser(carbonColumn,complexDelimiters,0);}  }
class C{  private static boolean isUsableField(IField<?,?> field){  if ((field.getModifiers() & IGNORE_MODES) != 0)   return false;  if (field.getType().isPrimitive()) {    throw new IllegalArgumentException("Primitive fields not allowed in an Entry. Cause primitive field: [ " + field + "]");  }  return true;}  }
class C{  public AudioEditQuery text(String value){  return unsafeParam("text",value);}  }
class C{  public static Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  addInBitmapOptions(options);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filename,options);}  }
class C{  public void plus(long animationDurationMS){  if (state == FLAG_STATE_PLUS) {    return;  }  toggle(animationDurationMS);}  }
class C{  private static String extractContentType(String line) throws IOException {  line=line.toLowerCase();  int end=line.indexOf(";");  if (end == -1) {    end=line.length();  }  return line.substring(13,end).trim();}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  public static void updateAllForFacade(DataStore dataStore,Iterable<Update> updates){  updateAllForFacade(dataStore,updates.iterator());}  }
class C{  public void discovered(DiscoveryEvent e){  ServiceRegistrar[] proxys=e.getRegistrars();  Map groupsMap=e.getGroups();  HashMap discoveredGroupsMap=new HashMap(proxys.length);  HashMap changedGroupsMap=new HashMap(proxys.length);  for (int i=0; i < proxys.length; i++) {synchronized (discoveredSet) {      ProxyReg reg=findReg(proxys[i]);      if (reg == null) {        reg=new ProxyReg(proxys[i],(String[])(groupsMap.get(proxys[i])),FROM_GROUP);        addDiscoveredSet(reg);        discoveredGroupsMap.put(proxys[i],groupsMap.get(proxys[i]));      } else {        String[] oldGroups=reg.getMemberGroups();        String[] newGroups=(String[])groupsMap.get(reg.proxy);        if (groupSetsEqual(oldGroups,newGroups)) {          reg.addFrom(FROM_GROUP);        } else {          reg.setMemberGroups(newGroups);          changedGroupsMap.put(reg.proxy,newGroups);        }      }    }  }  notifyListener(discoveredGroupsMap,DISCOVERED);  notifyListener(changedGroupsMap,CHANGED);}  }
class C{  public Observable<Bitmap> captureRx(){  return captureRx(null);}  }
class C{  protected Type(String name){  super(name);}  }
class C{  private void winningBidActions(Player player,int npcId,long highestValue){  DropNpc dropNpc=DropRegistrationService.getInstance().getDropRegistrationMap().get(npcId);  if (highestValue > 0) {    if (!player.getInventory().tryDecreaseKinah(highestValue)) {      return;    }    PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_MSG_PAY_ACCOUNT_ME(highestValue));  }  if (player.isInGroup2() || player.isInAlliance2()) {    for (    Player member : dropNpc.getInRangePlayers()) {      if (member != null && !player.equals(member) && member.isOnline()) {        PacketSendUtility.sendPacket(member,SM_SYSTEM_MESSAGE.STR_MSG_PAY_ACCOUNT_OTHER(player.getName(),highestValue));        long distributeKinah=highestValue / (dropNpc.getGroupSize() - 1);        member.getInventory().increaseKinah(distributeKinah);        PacketSendUtility.sendPacket(member,SM_SYSTEM_MESSAGE.STR_MSG_PAY_DISTRIBUTE(highestValue,dropNpc.getGroupSize() - 1,distributeKinah));      }    }  }}  }
class C{  public static InvocationConstraints combine(InvocationConstraints constraints1,InvocationConstraints constraints2){  if (constraints1 == null || constraints1.isEmpty()) {    return constraints2 == null ? EMPTY : constraints2;  } else   if (constraints2 == null || constraints2.isEmpty()) {    return constraints1;  } else   if (constraints2.reqs.length > constraints1.reqs.length) {    InvocationConstraints tmp=constraints1;    constraints1=constraints2;    constraints2=tmp;  }  int prefidx;  InvocationConstraint[] reqs;  if (constraints2.reqs.length > 0) {    reqs=concat(constraints1.reqs,constraints2.reqs);    prefidx=0;  } else {    reqs=constraints1.reqs;    prefidx=constraints1.prefs.length;  }  InvocationConstraint[] prefs;  if (constraints1.prefs.length > 0 || constraints2.prefs.length > 0) {    prefs=concat(constraints1.prefs,constraints2.prefs);  } else {    prefs=empty;  }  return new InvocationConstraints(reqs,constraints1.reqs.length,prefs,prefidx,constraints1.rel | constraints2.rel);}  }
class C{  protected void validateNamespaceNotDisabled(String property,String cluster,String namespace){  NamespaceName namespaceName=new NamespaceName(property,cluster,namespace);  NamespaceService nsService=pulsar().getNamespaceService();  try {    URL webUrl=nsService.getWebServiceUrl(namespaceName,false,true);    if (webUrl != null && !nsService.isServiceUnitOwned(namespaceName)) {      URI redirect=UriBuilder.fromUri(uri.getRequestUri()).host(webUrl.getHost()).port(webUrl.getPort()).build();      log.debug("Redirect admin rest call to {}",redirect);      throw new WebApplicationException(Response.temporaryRedirect(redirect).build());    }    if (nsService.isServiceUnitDisabled(namespaceName)) {      log.warn("Namespace {} is currently disabled",namespaceName);      throw new RestException(Status.PRECONDITION_FAILED,"Namespace:" + namespace + " is currently disabled.");    }  } catch (  IllegalArgumentException iae) {    log.debug(String.format("Failed to find owner for namespace %s",namespaceName),iae);    throw new RestException(Status.PRECONDITION_FAILED,"Namespace format is not expected. namespace " + namespaceName);  }catch (  IllegalStateException ise) {    log.debug(String.format("Failed to find owner for namespace %s",namespaceName),ise);    throw new RestException(Status.PRECONDITION_FAILED,"Namespace bundle is actived. namespace " + namespaceName);  }catch (  WebApplicationException wae) {    throw wae;  }catch (  Exception oe) {    log.debug(String.format("Failed to find owner for namespace %s",namespaceName),oe);    throw new RestException(oe);  }}  }
class C{  public int compareTo(Object other){  Buffer right=((Buffer)other);  byte[] lb=this.get();  byte[] rb=right.get();  for (int i=0; i < count && i < right.count; i++) {    int a=(lb[i] & 0xff);    int b=(rb[i] & 0xff);    if (a != b) {      return a - b;    }  }  return count - right.count;}  }
class C{  public User toEntity(UserDTO dto){  return toEntity(dto,1);}  }
class C{  public void reset(){  mGestureDetector.reset();  mPreviousTransform.reset();  mActiveTransform.reset();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("delete attribute=");  Set<String> attributes=new HashSet<>();  while (!np.peekMatchIgnoreCase(";")) {    String attribute=np.getWordRespectCase();    attributes.add(attribute);  }  np.matchIgnoreCase(";");  if (attributes.size() > 0) {    final SamplesViewer viewer=((SamplesViewer)getViewer());    viewer.getSamplesTable().deleteColumns(attributes.toArray(new String[attributes.size()]));  }}  }
class C{  @Override public boolean accept(File directory,String fileName){  if (!super.accept(directory,fileName))   return false;  String[] firstLines=Basic.getFirstLinesFromFile(new File(fileName),2);  return firstLines != null && firstLines.length == 2 && firstLines[0].startsWith(">") && Basic.contains(firstLines[1],';',2) && firstLines[1].toLowerCase().contains("root");}  }
class C{  @Override protected void doPostDbLoading(final Process process){  Long processId=process.getId();  Long aliveTagId=process.getAliveTagId();  if (aliveTagId != null) {    ControlTag aliveTagCopy=controlCache.getCopy(aliveTagId);    if (aliveTagCopy != null) {      setProcessId((ControlTagCacheObject)aliveTagCopy,processId);    } else {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No Alive tag (%d) found for Process %s (#%d).",aliveTagId,process.getName(),process.getId()));    }  } else {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No Alive tag for Process %s (#%d) defined.",process.getName(),process.getId()));  }  Long statusTagId=process.getStateTagId();  if (statusTagId != null) {    ControlTag statusTagCopy=controlCache.getCopy(statusTagId);    if (statusTagCopy != null) {      setProcessId((ControlTagCacheObject)statusTagCopy,processId);    } else {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No Status tag (%d) found for Process %s (#%d).",statusTagId,process.getName(),process.getId()));    }  } else {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,String.format("No Status tag for Process %s (#%d) defined.",process.getName(),process.getId()));  }}  }
class C{  public void onRestoreInstanceState(Bundle savedInstanceState){  selectedItems=savedInstanceState.getIntegerArrayList(TAG);}  }
class C{  public static List<ScaleSLDData> containsScales(SLDDataInterface sldData){  List<ScaleSLDData> dataList=null;  StyledLayerDescriptor sld=SLDUtils.createSLDFromString(sldData);  if (sld != null) {    List<StyledLayer> styledLayerList=sld.layers();    if (sld != null) {      for (      StyledLayer styledLayer : styledLayerList) {        if (styledLayer instanceof NamedLayerImpl) {          NamedLayerImpl namedLayerImpl=(NamedLayerImpl)styledLayer;          for (          Style style : namedLayerImpl.styles()) {            for (            FeatureTypeStyle fts : style.featureTypeStyles()) {              for (              Rule rule : fts.rules()) {                double minScale=rule.getMinScaleDenominator();                double maxScale=rule.getMaxScaleDenominator();                if ((minScale > 0.0) || (maxScale > 0.0)) {                  if (dataList == null) {                    dataList=new ArrayList<ScaleSLDData>();                  }                  ScaleSLDData scaleSLDData=new ScaleSLDData(sld,sldData);                  scaleSLDData.setNamedLayer(namedLayerImpl.getName());                  scaleSLDData.setFeatureTypeStyle(fts.getName());                  scaleSLDData.setStyle(style.getName());                  scaleSLDData.setRule(rule);                  if (minScale > 0.0) {                    scaleSLDData.setMinScale(minScale);                  }                  if (maxScale > 0.0) {                    scaleSLDData.setMaxScale(maxScale);                  }                  dataList.add(scaleSLDData);                }              }            }          }        }      }    }  }  return dataList;}  }
class C{  @Override public void selectedStyle(StyleWrapper styleWrapper){  int[] selectedRows=table.getSelectedRows();  dataModel.updateStyle(selectedRows,styleWrapper);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REJECT_MAIL_FROM_LOW_LEVEL(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400369,value0,value1);}  }
class C{  public void addRenderer(EsriRendererInterface rendererObj){  rendererMap.put(rendererObj.getRendererClass(),rendererObj);}  }
class C{  public void start(long timeInMillisecond){  stop();  fullTime=timeInMillisecond;  startValueAnimator(0f,(float)timeInMillisecond / 1000f,fullTime);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoFly_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200778,skilltarget);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Recall_Instant_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201244,skillcaster,skilltarget,skillname);}  }
class C{  private boolean resolveEverything(){  if (Options.v().on_the_fly())   return false;  return (Options.v().whole_program() || Options.v().whole_shimple() || Options.v().full_resolver()|| Options.v().output_format() == Options.output_format_dava);}  }
class C{  public static String toString(String[] array,String separator){  StringBuilder builder=new StringBuilder();  if (array != null && array.length > 0) {    for (    String string : array) {      builder.append(string).append(separator);    }    builder.deleteCharAt(builder.length() - 1);  }  return builder.toString();}  }
class C{  public void toggleEvolvedVariant(View v){  fillTokenList(clipboardMaxEvolutionVariant.isChecked());}  }
class C{  @Nullable public DragHandler createDragHandler(@NotNull ViewEditor editor,@NotNull NlComponent layout,@NotNull List<NlComponent> components,@NotNull DragType type){  return null;}  }
class C{  public void abruptlyCloseCommunication(){  if (communication != null) {    communication.close();    communication=null;  }  connected=false;  stopAutoNoopTimer();}  }
class C{  public XmlParser(Context context){  super(context);}  }
class C{  public void checkCallGraph(){  int[] limits=new int[]{1,2,4,8};  evalRes.total_call_edges=new Histogram(limits);  CallGraph cg=Scene.v().getCallGraph();  for (  Stmt callsite : ptsProvider.multiCallsites) {    Iterator<Edge> edges=cg.edgesOutOf(callsite);    if (!edges.hasNext())     continue;    evalRes.n_callsites++;    Edge anyEdge=edges.next();    SootMethod src=anyEdge.src();    if (!ptsProvider.isReachableMethod(src) || !ptsProvider.isValidMethod(src))     continue;    CgEdge p=ptsProvider.getInternalEdgeFromSootEdge(anyEdge);    LocalVarNode vn=(LocalVarNode)p.base_var;    int edge_cnt=1;    while (edges.hasNext()) {      ++edge_cnt;      edges.next();    }    evalRes.n_geom_call_edges+=edge_cnt;    if (edge_cnt == 1)     ++evalRes.n_geom_solved_all;    if (!src.isJavaLibraryMethod()) {      InvokeExpr ie=callsite.getInvokeExpr();      if (edge_cnt == 1) {        ++evalRes.n_geom_solved_app;        if (ptsProvider.getOpts().verbose()) {          outputer.println();          outputer.println("<<<<<<<<<   Additional Solved Call   >>>>>>>>>>");          outputer.println(src.toString());          outputer.println(ie.toString());        }      } else {        Histogram call_edges=new Histogram(limits);        test_1cfa_call_graph(vn,src,ie.getMethod(),call_edges);        evalRes.total_call_edges.merge(call_edges);        call_edges=null;      }      evalRes.n_geom_user_edges+=edge_cnt;      evalRes.n_user_callsites++;    }  }  ptsProvider.ps.println();  ptsProvider.ps.println("--------> Virtual Callsites Evaluation <---------");  ptsProvider.ps.printf("Total virtual callsites (app code): %d (%d)\n",evalRes.n_callsites,evalRes.n_user_callsites);  ptsProvider.ps.printf("Total virtual call edges (app code): %d (%d)\n",evalRes.n_geom_call_edges,evalRes.n_geom_user_edges);  ptsProvider.ps.printf("Virtual callsites additionally solved by geomPTA compared to SPARK (app code) = %d (%d)\n",evalRes.n_geom_solved_all,evalRes.n_geom_solved_app);  evalRes.total_call_edges.printResult(ptsProvider.ps,"Testing of unsolved callsites on 1-CFA call graph: ");  if (ptsProvider.getOpts().verbose())   ptsProvider.outputNotEvaluatedMethods();}  }
class C{  public void invalidateHeaders(){  mHeaderProvider.invalidate();  mHeaderRects.clear();}  }
class C{  public void updateNifClasses(List<CommandClass> nif){  nodeInformationFrame=nif;}  }
class C{  public void close(){  if (_postponedAsyncOperationsQueue != null)   _postponedAsyncOperationsQueue.close();  if (_asyncHandlerProvider != null)   _asyncHandlerProvider.close();  _router.close();}  }
class C{  public boolean isDragEnabled(){  return mDragEnabled;}  }
class C{  private void updateTreeDataItemsIdAndParentReference(String id){  int idCount=sameIdDataItemsMap.get(id);  for (  JsTreeDataItem item : this) {    if (item.getOriginalId().equals(id) && idCount >= 0) {      item.setId(item.getOriginalId() + JSTREE_FIELD_ID_SEPARATOR + idCount);      idCount--;    }    if (item.getParent().equals(id)) {      item.setParent(item.getParent() + JSTREE_FIELD_ID_SEPARATOR + idCount);    }  }}  }
class C{  private void init(){  updateCount=-1;  resultSet=null;}  }
class C{  @Provides @Singleton @PartitionAwareClient DedupQueueServiceAuthenticator provideDedupQueueClient(MultiThreadedServiceFactory<AuthDedupQueueService> serviceFactory,@DedupQueueHostDiscovery HostDiscovery hostDiscovery,DedupQueueService databus,@SelfHostAndPort HostAndPort self,HealthCheckRegistry healthCheckRegistry){  AuthDedupQueueService client=ServicePoolBuilder.create(AuthDedupQueueService.class).withHostDiscovery(hostDiscovery).withServiceFactory(new PartitionAwareServiceFactory<>(serviceFactory,new TrustedDedupQueueService(databus),self,healthCheckRegistry)).withMetricRegistry(_environment.metrics()).withCachingPolicy(ServiceCachingPolicyBuilder.getMultiThreadedClientPolicy()).buildProxy(new ExponentialBackoffRetry(5,50,1000,TimeUnit.MILLISECONDS));  _environment.lifecycle().manage(new ManagedServicePoolProxy(client));  return DedupQueueServiceAuthenticator.proxied(client);}  }
class C{  public synchronized void startCollecting(){  paused=false;  if (thread != null)   return;  packages=new CountMap<String>(MAX_PACKAGES);  selfMethods=new CountMap<String>(MAX_METHODS);  stackMethods=new CountMap<String>(MAX_METHODS);  lines=new CountMap<String>(MAX_LINES);  total=0;  started=true;  thread=new Thread(this);  thread.setName("Profiler");  thread.setDaemon(true);  thread.start();}  }
class C{  public CatchOptions noMasterBall(boolean skipMasterBall){  this.skipMasterBall=skipMasterBall;  return this;}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof FlexibleServletAccessor<?>) {    FlexibleServletAccessor<?> flexibleServletAccessor=(FlexibleServletAccessor<?>)obj;    if (this.name == null) {      return flexibleServletAccessor.name == null;    }    return this.name.equals(flexibleServletAccessor.name);  } else {    String str=(String)obj;    if (this.name == null) {      return str == null;    }    return this.name.equals(str);  }}  }
class C{  public RecordComparator(List<String> sortFlds,List<Integer> sortDirs){  this.sortFlds=sortFlds;  this.sortDirs=sortDirs;}  }
class C{  public boolean isWordWrapEnabled(){  return mWordWrapEnabled;}  }
class C{  protected void drawLinear(Canvas c,ILineDataSet dataSet){  int entryCount=dataSet.getEntryCount();  final boolean isDrawSteppedEnabled=dataSet.isDrawSteppedEnabled();  final int pointsPerEntryPair=isDrawSteppedEnabled ? 4 : 2;  Transformer trans=mChart.getTransformer(dataSet.getAxisDependency());  float phaseX=Math.max(0.f,Math.min(1.f,mAnimator.getPhaseX()));  float phaseY=mAnimator.getPhaseY();  mRenderPaint.setStyle(Paint.Style.STROKE);  Canvas canvas;  if (dataSet.isDashedLineEnabled()) {    canvas=mBitmapCanvas;  } else {    canvas=c;  }  Entry entryFrom=dataSet.getEntryForXIndex((mMinX < 0) ? 0 : mMinX,DataSet.Rounding.DOWN);  Entry entryTo=dataSet.getEntryForXIndex(mMaxX,DataSet.Rounding.UP);  int diff=(entryFrom == entryTo) ? 1 : 0;  int minx=Math.max(dataSet.getEntryIndex(entryFrom) - diff,0);  int maxx=Math.min(Math.max(minx + 2,dataSet.getEntryIndex(entryTo) + 1),entryCount);  final int count=(int)(Math.ceil((float)(maxx - minx) * phaseX + (float)(minx)));  if (dataSet.getColors().size() > 1) {    if (mLineBuffer.length != pointsPerEntryPair * 2)     mLineBuffer=new float[pointsPerEntryPair * 2];    for (int j=minx; j < count; j++) {      if (count > 1 && j == count - 1) {        break;      }      Entry e=dataSet.getEntryForIndex(j);      if (e == null)       continue;      mLineBuffer[0]=e.getXIndex();      mLineBuffer[1]=e.getVal() * phaseY;      if (j + 1 < count) {        e=dataSet.getEntryForIndex(j + 1);        if (e == null)         break;        if (isDrawSteppedEnabled) {          mLineBuffer[2]=e.getXIndex();          mLineBuffer[3]=mLineBuffer[1];          mLineBuffer[4]=mLineBuffer[2];          mLineBuffer[5]=mLineBuffer[3];          mLineBuffer[6]=e.getXIndex();          mLineBuffer[7]=e.getVal() * phaseY;        } else {          mLineBuffer[2]=e.getXIndex();          mLineBuffer[3]=e.getVal() * phaseY;        }      } else {        mLineBuffer[2]=mLineBuffer[0];        mLineBuffer[3]=mLineBuffer[1];      }      trans.pointValuesToPixel(mLineBuffer);      if (!mViewPortHandler.isInBoundsRight(mLineBuffer[0]))       break;      if (!mViewPortHandler.isInBoundsLeft(mLineBuffer[2]) || (!mViewPortHandler.isInBoundsTop(mLineBuffer[1]) && !mViewPortHandler.isInBoundsBottom(mLineBuffer[3])) || (!mViewPortHandler.isInBoundsTop(mLineBuffer[1]) && !mViewPortHandler.isInBoundsBottom(mLineBuffer[3])))       continue;      mRenderPaint.setColor(dataSet.getColor(j));      canvas.drawLines(mLineBuffer,0,pointsPerEntryPair * 2,mRenderPaint);    }  } else {    if (mLineBuffer.length != Math.max((entryCount - 1) * pointsPerEntryPair,pointsPerEntryPair) * 2)     mLineBuffer=new float[Math.max((entryCount - 1) * pointsPerEntryPair,pointsPerEntryPair) * 2];    Entry e1, e2;    e1=dataSet.getEntryForIndex(minx);    if (e1 != null) {      int j=0;      for (int x=count > 1 ? minx + 1 : minx; x < count; x++) {        e1=dataSet.getEntryForIndex(x == 0 ? 0 : (x - 1));        e2=dataSet.getEntryForIndex(x);        if (e1 == null || e2 == null)         continue;        mLineBuffer[j++]=e1.getXIndex();        mLineBuffer[j++]=e1.getVal() * phaseY;        if (isDrawSteppedEnabled) {          mLineBuffer[j++]=e2.getXIndex();          mLineBuffer[j++]=e1.getVal() * phaseY;          mLineBuffer[j++]=e2.getXIndex();          mLineBuffer[j++]=e1.getVal() * phaseY;        }        mLineBuffer[j++]=e2.getXIndex();        mLineBuffer[j++]=e2.getVal() * phaseY;      }      if (j > 0) {        trans.pointValuesToPixel(mLineBuffer);        final int size=Math.max((count - minx - 1) * pointsPerEntryPair,pointsPerEntryPair) * 2;        mRenderPaint.setColor(dataSet.getColor());        canvas.drawLines(mLineBuffer,0,size,mRenderPaint);      }    }  }  mRenderPaint.setPathEffect(null);  if (dataSet.isDrawFilledEnabled() && entryCount > 0) {    drawLinearFill(c,dataSet,minx,maxx,trans);  }}  }
class C{  private void traverseAndResolveTree(FilterResolverIntf filterResolverTree,AbsoluteTableIdentifier tableIdentifier) throws FilterUnsupportedException {  if (null == filterResolverTree) {    return;  }  traverseAndResolveTree(filterResolverTree.getLeft(),tableIdentifier);  filterResolverTree.resolve(tableIdentifier);  traverseAndResolveTree(filterResolverTree.getRight(),tableIdentifier);}  }
class C{  public static String printCpuInfo(){  String info=FileUtil.getFileOutputString(CPU_INFO_PATH);  LogUtils.i("_______  CPU :   \n" + info);  return info;}  }
class C{  @Override public long skip(long numberOfChars) throws IOException {  if (eof) {    throw new IOException("Skip after end of file");  }  if (position == size) {    return doEndOfFile();  }  position+=numberOfChars;  long returnLength=numberOfChars;  if (position > size) {    returnLength=numberOfChars - (position - size);    position=size;  }  return returnLength;}  }
class C{  public boolean isObsolete(){  if (future.isDone() || future.isCancelled())   return true;  if (expiration > SystemTime.timeMillis())   return false;  future.cancel(true);  return true;}  }
class C{  private void BrowseModelDirBtnActionPerformed(java.awt.event.ActionEvent evt){  JFileChooser fc=new JFileChooser();  fc.setCurrentDirectory((ModelsRootDirEdt.getText().length() == 0) ? new java.io.File(".") : new java.io.File(ModelsRootDirEdt.getText()));  fc.setSelectedFile(fc.getCurrentDirectory());  fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);  int iRet=fc.showOpenDialog(this);  if (iRet == JFileChooser.APPROVE_OPTION) {    ModelsRootDirEdt.setText(fc.getSelectedFile().getAbsolutePath());  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  @Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {}  }
class C{  public static IOFileFilter and(IOFileFilter... filters){  return new AndFileFilter(toList(filters));}  }
class C{  private void printClusterData(){  assert clusterList != null;  System.out.println("Total No of Clusters: " + clusterList.size());  Iterator<Cluster> it=clusterList.iterator();  for (int noCluster=1; it.hasNext(); noCluster++) {    Cluster aCluster=it.next();    ArrayList<String> listPoints=aCluster.getAllDataPoints();    System.out.println("Cluster Number : " + noCluster);    for (int i=0; i < listPoints.size(); i++) {      System.out.print(listPoints.get(i) + " ");    }    System.out.println();  }}  }
class C{  @Nullable public static ModelWizardDialog createDialogForPackages(@Nullable Component parent,@NotNull Collection<UpdatablePackage> requestedPackages,@NotNull Collection<LocalPackage> uninstallPackages,boolean backgroundable){  return createDialog(null,parent,null,requestedPackages,uninstallPackages,getSdkHandler(),backgroundable);}  }
class C{  public void changeAlpha(int value){  this.alpha+=value;  if (alpha > 255) {    alpha=255;  } else   if (alpha < 0) {    alpha=0;  }}  }
class C{  protected void startJobAcquisitionThread(){  if (asyncJobAcquisitionThread == null) {    asyncJobAcquisitionThread=new Thread(asyncJobsDueRunnable);  }  asyncJobAcquisitionThread.start();}  }
class C{  public FriendsGetRequestsQuery extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public boolean isAckPending(){  return this.ackPending;}  }
class C{  private void rollbackOnException(TransactionStatus status,Throwable ex){  logger.trace(message("Initiating transaction rollback on application exception"),ex);  try {    this.getTransactionManager().rollback(status);  } catch (  RuntimeException ex2) {    logger.error(message("Application exception overridden by rollback exception"),ex);    throw ex2;  }catch (  Error err) {    logger.error(message("Application exception overridden by rollback error"),ex);    throw err;  }}  }
class C{  protected Class resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {  if (desc.getName().equals("java.rmi.MarshalledObject")) {    return net.jini.io.MarshalledObject.class;  }  return super.resolveClass(desc);}  }
class C{  public PhotosGetNewTagsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public void resourceMoved(ISVNRemoteResource resource,ISVNRemoteFolder destinationFolder,String destinationResourceName){  Iterator it=listeners.iterator();  while (it.hasNext()) {    IRepositoryListener listener=(IRepositoryListener)it.next();    listener.remoteResourceMoved(resource,destinationFolder,destinationResourceName);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARTY_ENEMY_CRITICAL(String value1,int num2,String value0){  return new SM_SYSTEM_MESSAGE(1230001,value1,num2,value0);}  }
class C{  public Builder stringRemoveWhitespaceTransform(String columnName){  return transform(new RemoveWhiteSpaceTransform(columnName));}  }
class C{  private void tryScrollBackToTop(){  if (!mPtrIndicator.isUnderTouch()) {    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);  }}  }
class C{  @Override public void nodeJoined(final ClusterNode clusterNode){  LOGGER.info("Detected Terracotta node joined cluster: " + clusterNode.getId());}  }
class C{  private void shiftWorldAction(){  Vector2 shift=ShiftWorldDialog.show(ControlUtilities.getParentWindow(this));  if (shift != null) {synchronized (Simulation.LOCK) {      this.simulation.getWorld().shift(shift);    }  }}  }
class C{  @Override public Throwable fillInStackTrace(){  return null;}  }
class C{  protected void processAssociationReport(SerialMessage serialMessage,int offset) throws ZWaveSerialMessageException {  int group=serialMessage.getMessagePayloadByte(offset + 1);  int maxAssociations=serialMessage.getMessagePayloadByte(offset + 2);  int following=serialMessage.getMessagePayloadByte(offset + 3);  if (maxAssociations == 0) {    if (updateAssociationsNode == group) {      logger.debug("NODE {}: All association groups acquired.",getNode().getNodeId());      updateAssociationsNode=0;      getController().notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssociationUpdate,getNode().getNodeId(),ZWaveNetworkEvent.State.Success));    }    return;  }  logger.debug("NODE {}: association group {} has max associations {}",getNode().getNodeId(),group,maxAssociations);  if (pendingAssociation == null) {    pendingAssociation=new ZWaveAssociationGroup(group);  }  if (serialMessage.getMessagePayload().length > (offset + 4)) {    logger.debug("NODE {}: Association group {} includes the following nodes:",getNode().getNodeId(),group);    int dataLength=serialMessage.getMessagePayload().length - (offset + 4);    int dataPointer=0;    for (; dataPointer < dataLength; dataPointer++) {      int node=serialMessage.getMessagePayloadByte(offset + 4 + dataPointer);      if (node == MULTI_INSTANCE_MARKER) {        break;      }      logger.debug("NODE {}: Associated with Node {} in group {}",getNode().getNodeId(),node,group);      pendingAssociation.addAssociation(node);    }    if (dataPointer < dataLength) {      logger.trace("NODE {}: Includes multi_instance associations",getNode().getNodeId());      dataPointer++;      for (; dataPointer < dataLength; dataPointer+=2) {        int node=serialMessage.getMessagePayloadByte(offset + 4 + dataPointer);        int endpoint=serialMessage.getMessagePayloadByte(offset + 5 + dataPointer);        if (node == MULTI_INSTANCE_MARKER) {          break;        }        logger.debug("NODE {}: Associated with Node {} endpoint {} in group",getNode().getNodeId(),node,endpoint,group);        pendingAssociation.addAssociation(node,endpoint);      }    }  }  if (following == 0) {    ZWaveAssociationGroup associationGroup=getNode().getAssociationGroup(group);    if (associationGroup != null) {      getNode().getAssociationGroup(pendingAssociation.getIndex()).setAssociations(pendingAssociation.getAssociations());    }    ZWaveAssociationEvent zEvent=new ZWaveAssociationEvent(getNode().getNodeId(),pendingAssociation);    pendingAssociation=null;    getController().notifyEventListeners(zEvent);  }  if (following == 0 && group == updateAssociationsNode) {    if (updateAssociationsNode < maxGroups) {      updateAssociationsNode++;      SerialMessage outputMessage=getAssociationMessage(updateAssociationsNode);      if (outputMessage != null) {        getController().sendData(outputMessage);      }    } else {      logger.debug("NODE {}: All association groups acquired.",getNode().getNodeId());      updateAssociationsNode=0;      getController().notifyEventListeners(new ZWaveNetworkEvent(ZWaveNetworkEvent.Type.AssociationUpdate,getNode().getNodeId(),ZWaveNetworkEvent.State.Success));    }  }}  }
class C{  public void deactivate(boolean clearSelection){  if (!mActive)   return;  if (mObserver != null)   mObserver.onFindToolbarHidden();  setResultsBarVisibility(false);  mTabModelSelector.removeObserver(mTabModelSelectorObserver);  for (  TabModel model : mTabModelSelector.getModels()) {    model.removeObserver(mTabModelObserver);  }  mCurrentTab.getTabWebContentsDelegateAndroid().setFindResultListener(null);  mCurrentTab.getTabWebContentsDelegateAndroid().setFindMatchRectsListener(null);  mCurrentTab.removeObserver(mTabObserver);  UiUtils.hideKeyboard(mFindQuery);  if (mFindQuery.getText().length() > 0) {    clearResults();    mFindInPageBridge.stopFinding(clearSelection);  }  mFindInPageBridge.destroy();  mActive=false;}  }
class C{  private boolean compareLumaPanes(){  int d, e, f=0;  for (int j=0; j < NB_DECODED; j++) {    for (int i=0; i < mSize; i+=10) {      d=(mInitialImage[i] & 0xFF) - (mDecodedVideo[j][i] & 0xFF);      e=(mInitialImage[i + 1] & 0xFF) - (mDecodedVideo[j][i + 1] & 0xFF);      d=d < 0 ? -d : d;      e=e < 0 ? -e : e;      if (d > 50 && e > 50) {        mDecodedVideo[j]=null;        f++;        break;      }    }  }  return f <= NB_DECODED / 2;}  }
class C{  public static byte[] decode(byte[] source) throws java.io.IOException {  byte[] decoded=null;  decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  return decoded;}  }
class C{  public Object[] buildParameters(Object[] firstParameters,Method method,Class<? extends Annotation> annotationType){  int parametersLength=method.getParameterTypes().length;  if (firstParameters.length > 0 && parametersLength < 1) {    throw new RepositoryMethodException(String.format("Method with %s annotation should have at least one parameter.",annotationType));  }  int parametersToResolve=parametersLength - firstParameters.length;  Object[] additionalParameters=new Object[parametersToResolve];  for (int i=firstParameters.length; i < parametersLength; i++) {    additionalParameters[i - firstParameters.length]=parameterProvider.provide(method,i);  }  return concatenate(firstParameters,additionalParameters);}  }
class C{  public static void write(CharSequence data,Writer output) throws IOException {  if (data != null) {    write(data.toString(),output);  }}  }
class C{  public static Intent finishOtherTasksWithTabID(int tabId,int canonicalTaskId){  if (tabId == Tab.INVALID_TAB_ID || Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {    return null;  }  Context context=ApplicationStatus.getApplicationContext();  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<ActivityManager.AppTask> tasksToFinish=new ArrayList<ActivityManager.AppTask>();  for (  ActivityManager.AppTask task : manager.getAppTasks()) {    RecentTaskInfo taskInfo=getTaskInfoFromTask(task);    if (taskInfo == null)     continue;    int taskId=taskInfo.id;    Intent baseIntent=taskInfo.baseIntent;    int otherTabId=ActivityDelegate.getTabIdFromIntent(baseIntent);    if (otherTabId == tabId && (taskId == -1 || taskId != canonicalTaskId)) {      tasksToFinish.add(task);    }  }  return finishAndRemoveTasks(tasksToFinish);}  }
class C{  public TranslatorObject(String avatarUrl,String title,int flagId,String subtitle){  this.avatarUrl=avatarUrl;  this.title=title;  this.flagId=flagId;  this.subtitle=subtitle;}  }
class C{  protected IResource[] checkOverwriteOfDirtyResources(IResource[] resources) throws SVNException, InterruptedException {  IResource[] dirtyResources=getModifiedResources(resources,null);  if (dirtyResources == null || dirtyResources.length == 0) {    return resources;  }  PromptingDialog dialog=new PromptingDialog(getShell(),dirtyResources,getPromptCondition(dirtyResources),Policy.bind("ReplaceWithAction.confirmOverwrite"));  return dialog.promptForMultiple();}  }
class C{  public KatharsisInvokerException(final int statusCode,String message){  super(message);  this.statusCode=statusCode;}  }
class C{  private int calcJoinWeightShift(int[] joinWeights){  int first=joinWeights[0];  for (int i=1; i < joinWeights.length; i++) {    if (joinWeights[i] != first) {      return 0;    }  }  int divisor=65536 / first;  if (divisor == 2) {    return 1;  } else   if (divisor == 4) {    return 2;  }  return 0;}  }
class C{  @Override public boolean hasNext(){  return hasNextLine();}  }
class C{  private void dismissProgressDialog(){  if (isProgressDialogShowing()) {    mProgressDialog.dismiss();    mProgressDialog=null;  }}  }
class C{  public boolean intersects(BitVector other){  long[] otherBits=other.bits;  int numToCheck=otherBits.length;  if (bits.length < numToCheck)   numToCheck=bits.length;  int i;  for (i=0; i < numToCheck; i++) {    if ((bits[i] & otherBits[i]) != 0)     return true;  }  return false;}  }
class C{  private T errorEstimation(final T[] previousState,final T[] predictedState,final T[] predictedScaled,final FieldMatrix<T> predictedNordsieck){  T error=getField().getZero();  for (int i=0; i < mainSetDimension; ++i) {    final T yScale=predictedState[i].abs();    final T tol=(vecAbsoluteTolerance == null) ? yScale.multiply(scalRelativeTolerance).add(scalAbsoluteTolerance) : yScale.multiply(vecRelativeTolerance[i]).add(vecAbsoluteTolerance[i]);    T variation=getField().getZero();    int sign=predictedNordsieck.getRowDimension() % 2 == 0 ? -1 : 1;    for (int k=predictedNordsieck.getRowDimension() - 1; k >= 0; --k) {      variation=variation.add(predictedNordsieck.getEntry(k,i).multiply(sign));      sign=-sign;    }    variation=variation.subtract(predictedScaled[i]);    final T ratio=predictedState[i].subtract(previousState[i]).add(variation).divide(tol);    error=error.add(ratio.multiply(ratio));  }  return error.divide(mainSetDimension).sqrt();}  }
class C{  public Bundler putSparseParcelableArray(String key,SparseArray<? extends Parcelable> value){  bundle.putSparseParcelableArray(key,value);  return this;}  }
class C{  public boolean isApplicable(){  AlignmentViewer viewer=(AlignmentViewer)getViewer();  return viewer.getSelectedReference() != null;}  }
class C{  public static boolean isReturnPrevOnUpdate(int mod){  return Modifiers.contains(mod,UpdateModifiers.RETURN_PREV_ON_UPDATE);}  }
class C{  public void populateUserLayer(FieldIdEnum fieldId,UserLayer value){  if (fieldConfigManager == null) {    return;  }  FieldConfigBase fieldConfig=fieldConfigManager.get(fieldId);  if (fieldConfig != null) {    ((FieldConfigValuePopulateInterface)fieldConfig).populateField(value);  } else {    ConsoleManager.getInstance().error(this,String.format("populateUserLayer - %s : %s",Localisation.getString(StandardPanel.class,"StandardPanel.unknownField"),fieldId));  }}  }
class C{  public static boolean clipRange(double[] x,double minVal,double maxVal){  boolean modified=false;  if (x == null) {    return modified;  }  for (int i=0; i < x.length; i++) {    if (x[i] < minVal) {      x[i]=minVal;      modified=true;    } else     if (x[i] > maxVal) {      x[i]=maxVal;      modified=true;    }  }  return modified;}  }
class C{  public static double fro(Zdiagmat D){  int i;  double fac, nrm, scale;  int n=D.order;  scale=0.0;  for (i=0; i < n; i++) {    scale=Math.max(scale,Math.abs(D.re[i]) + Math.abs(D.im[i]));  }  if (scale == 0) {    return 0.0;  }  if (scale < 1) {    scale=scale * 1.0e20;  }  scale=1 / scale;  nrm=0;  for (i=0; i < n; i++) {    fac=scale * D.re[i];    nrm=nrm + fac * fac;    fac=scale * D.im[i];    nrm=nrm + fac * fac;  }  return Math.sqrt(nrm) / scale;}  }
class C{  @Override public boolean treeExpanded(Object selectedItem){  return false;}  }
class C{  @Override public List<Class<? extends ConfigAspect>> mergeDependencies(){  return ImmutableList.of();}  }
class C{  public static boolean isAddToHomeIntentSupported(Context context){  PackageManager pm=context.getPackageManager();  Intent i=new Intent(INSTALL_SHORTCUT);  List<ResolveInfo> receivers=pm.queryBroadcastReceivers(i,PackageManager.GET_INTENT_FILTERS);  return !receivers.isEmpty();}  }
class C{  private static int determineConsecutiveBinaryCount(String msg,int startpos,Charset encoding) throws WriterException {  CharsetEncoder encoder=encoding.newEncoder();  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch)) {      numericCount++;      int i=idx + numericCount;      if (i >= len) {        break;      }      ch=msg.charAt(i);    }    if (numericCount >= 13) {      return idx - startpos;    }    ch=msg.charAt(idx);    if (!encoder.canEncode(ch)) {      throw new WriterException("Non-encodable character detected: " + ch + " (Unicode: "+ (int)ch+ ')');    }    idx++;  }  return idx - startpos;}  }
class C{  public static void main(String[] args){  final BuildDTO buildEvent=createTestBuildEvent();  send(buildEvent,"build");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_PCBANG_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1400026,value0);}  }
class C{  public void ReInit(SimpleCharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  @Override public void removeRaster(Symbolizer symbolizer){}  }
class C{  @Override public void useAntiAliasUpdated(boolean value){  internalRenderStyle();}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public void waitForAnimationFinish(final WebElement element,int timeout){  final Deque<Point> locations=new ArrayDeque<>();  isConditionMet(null,timeout);}  }
class C{  public TupleComparator(int col,Class type,boolean ascend,Comparator c){  m_field=null;  m_col=col;  m_type=type;  m_rev=ascend ? 1 : -1;  m_cmp=c;}  }
class C{  public static final String replaceUnsafeSvgText(String svg){  if (svg == null) {    return null;  }  svg=replaceText(svg);  svg=replaceInvalidPatterns(svg);  return svg;}  }
class C{  private void initData(){  revision=SVNRevision.SVN_INVALID_REVNUM;  SyncInfoTree syncInfoTree=getSyncInfoSet();  SyncInfo[] syncInfos=syncInfoTree.getSyncInfos();  if (syncInfos.length > 0) {    SyncInfo syncInfo=syncInfos[0];    if (syncInfo instanceof SVNStatusSyncInfo) {      SVNStatusSyncInfo svnSyncInfo=(SVNStatusSyncInfo)syncInfo;      RemoteResourceStatus remoteResourceStatus=svnSyncInfo.getRemoteResourceStatus();      if (remoteResourceStatus != null) {        SVNRevision.Number revnum=remoteResourceStatus.getLastChangedRevision();        if (revnum != null)         revision=revnum.getNumber(); else         revision=SVNRevision.INVALID_REVISION.getNumber();        author=remoteResourceStatus.getLastCommitAuthor();        if ((author == null) || (author.length() == 0)) {          author=Policy.bind("SynchronizeView.noAuthor");        }        date=remoteResourceStatus.getLastChangedDate();        comment=fetchComment(svnSyncInfo);      } else {        revision=SVNRevision.INVALID_REVISION.getNumber();        author=Policy.bind("SynchronizeView.noAuthor");        comment="";        date=null;      }    }  }}  }
class C{  public List<T> nearestHamming(final double[] key,final double dist) throws KeySizeException {  return nearestDistance(key,dist,new HammingDistance());}  }
class C{  @Override public void controlEvent(int event){  if ((event == WrapperManager.WRAPPER_CTRL_LOGOFF_EVENT) && WrapperManager.isLaunchedAsService()) {    if (logger.isInfoEnabled()) {      logger.info("ServiceWrapper: controlEvent(" + event + ") Ignored");    }  } else {    if (logger.isInfoEnabled()) {      logger.info("ServiceWrapper: controlEvent(" + event + ") Stopping");    }    WrapperManager.stop(0);  }}  }
class C{  public LessEqualsSpacePredicate(Comparable<?> expectedValue){  super(expectedValue);}  }
class C{  public static void restartActivity(@NotNull Project project,@NotNull InstantRunContext instantRunContext){  for (  IDevice device : findDevices(project)) {    InstantRunClient instantRunClient=InstantRunManager.getInstantRunClient(instantRunContext);    if (instantRunClient == null) {      Logger.getInstance(RestartActivityAction.class).warn("Unable to connect to to app running on device, not restarting.");      return;    }    try {      if (instantRunClient.getAppState(device) == AppState.FOREGROUND) {        instantRunClient.restartActivity(device);        if (InstantRunSettings.isShowToastEnabled()) {          showToast(device,instantRunContext,"Activity Restarted");        }      }    } catch (    IOException e) {      Messages.showErrorDialog(project,"Unable to restart activity: " + e,"Instant Run");      InstantRunManager.LOG.warn("Unable to restart activity",e);    }  }}  }
class C{  public DragControl(){}  }
class C{  protected AdsGetStatisticsQuery dateFrom(String value){  return unsafeParam("date_from",value);}  }
class C{  @Override public String toString(){  String condition=acceptLarger ? ">=" : "<";  return super.toString() + "(" + condition+ size+ ")";}  }
class C{  public void plus(){  plus(ANIMATION_DURATION_MS);}  }
class C{  public ReplicationPolicy.ReplicationPolicyDescription createReplDescPolicy(String sourceMemberName,Element groupMemberNode,List<String> groupMemList) throws CreateException {  Element replPolicyElem=null;  ReplicationPolicy.ReplicationPolicyDescription replDescPolicy=new ReplicationPolicy.ReplicationPolicyDescription();  Element groupElem=(Element)groupMemberNode.getParentNode().getParentNode();  NodeList replPolicyNL=groupElem.getElementsByTagName(REPL_POLICY_TAG);  if (replPolicyNL.getLength() == 0)   return replDescPolicy;  replPolicyElem=(Element)replPolicyNL.item(0);  NodeList replFilterNL=groupMemberNode.getElementsByTagName(REPL_FILTERS_TAG);  if (replFilterNL.getLength() > 0) {    Element replFilterElem=(Element)replFilterNL.item(0);    replDescPolicy.inputReplicationFilterClassName=getNodeValueIfExists(replFilterElem,REPL_INPUT_FILTER_CLASSNAME_TAG);    replDescPolicy.inputReplicationFilterParamUrl=getNodeValueIfExists(replFilterElem,REPL_INPUT_FILTER_PARAM_URL_TAG);    replDescPolicy.outputReplicationFilterClassName=getNodeValueIfExists(replFilterElem,REPL_OUTPUT_FILTER_CLASSNAME_TAG);    replDescPolicy.outputReplicationFilterParamUrl=getNodeValueIfExists(replFilterElem,REPL_OUTPUT_FILTER_PARAM_URL_TAG);    String tmp=getNodeValueIfExists(replFilterElem,REPL_ACTIVE_WHEN_BACKUP_TAG);    if (tmp == null || tmp.length() == 0)     tmp=REPL_ACTIVE_WHEN_BACKUP_DEFAULT;    replDescPolicy.activeWhenBackup=JSpaceUtilities.parseBooleanTag(REPL_ACTIVE_WHEN_BACKUP_TAG,tmp);    tmp=getNodeValueIfExists(replFilterElem,REPL_SHUTDOWN_SPACE_ON_INIT_FAILURE_TAG);    if (tmp == null || tmp.length() == 0)     tmp=REPL_SHUTDOWN_SPACE_ON_INIT_FAILURE_DEFAULT;    replDescPolicy.shutdownSpaceOnInitFailure=JSpaceUtilities.parseBooleanTag(REPL_SHUTDOWN_SPACE_ON_INIT_FAILURE_TAG,tmp);  }  NodeList replRecoveryNL=groupMemberNode.getElementsByTagName(REPL_MEMBER_RECOVERY_TAG);  if (replRecoveryNL.getLength() > 0) {    if (replPolicyElem == null)     throw new CreateException("IllegalReplicationDefinitionError: Wrong memory recovery " + sourceMemberName + " definition. <"+ REPL_POLICY_TAG+ "> tag not found. Check "+ clusterConfigFile+ " cluster config file.");    Element replRecoveryElem=(Element)replRecoveryNL.item(0);    String recovery=getNodeValueIfExists(replRecoveryElem,ENABLED_TAG);    replDescPolicy.memberRecovery=JSpaceUtilities.parseBooleanTag(ENABLED_TAG,recovery);    String sourceMember=getNodeValueIfExists(replRecoveryElem,REPL_SOURCE_MEMBER_URL_TAG);    if (sourceMember != null && !sourceMember.equals(FIRST_AVAILABLE_MEMBER))     replDescPolicy.sourceMemberRecovery=sourceMember;    if (replDescPolicy.sourceMemberRecovery != null) {      if (replDescPolicy.sourceMemberRecovery.equalsIgnoreCase(sourceMemberName))       throw new CreateException("IllegalReplicationDefinitionError: " + sourceMemberName + " member: Wrong recovery source member: "+ replDescPolicy.sourceMemberRecovery+ ". The member: "+ sourceMemberName+ " can not recovery from it self. Check "+ clusterConfigFile+ " cluster config file.");      if (!groupMemList.contains(replDescPolicy.sourceMemberRecovery) && !replDescPolicy.sourceMemberRecovery.equalsIgnoreCase(FIRST_AVAILABLE_MEMBER))       throw new CreateException("IllegalReplicationDefinitionError: " + sourceMemberName + " member: Unknown recovery source member: "+ replDescPolicy.sourceMemberRecovery+ ". The source member is not in replication group. Check "+ clusterConfigFile+ " cluster config file.");    }  } else {    String recovery=getNodeValueIfExists(replPolicyElem,REPL_MEMORY_RECOVERY_TAG);    replDescPolicy.memberRecovery=JSpaceUtilities.parseBooleanTag(REPL_MEMORY_RECOVERY_TAG,recovery);  }  return replDescPolicy;}  }
class C{  public Vector(float x,float y,float z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  static int rootDistanceY(ConstraintWidget widget){  int rootHeight=widget.getParent().getHeight();  int aY=widget.getY();  int aHeight=widget.getHeight();  return Math.min(aY,rootHeight - (aY + aHeight));}  }
class C{  private static X509Certificate convertToJcaCertificate(X509CertificateHolder bouncyCastleCertificate){  try {    return new JcaX509CertificateConverter().getCertificate(bouncyCastleCertificate);  } catch (  CertificateException e) {    throw new CertificateCreationException("Unable to convert X590CertificateHolder to JCA X590Certificate",e);  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public boolean replaceNext(String regularExpression,String replaceText){  System.err.println("not implemented");  return false;}  }
class C{  public static void main(String[] args) throws IOException, URISyntaxException {  if (!new Convert().convertTTML(args)) {    System.exit(1);  }}  }
class C{  @Nullable("null if no device is close enough to snap to") private Device snapToDevice(@AndroidCoordinate int x,@AndroidCoordinate int y,int threshold){  for (  Point p : myAndroidCoordinatesToDeviceMap.keySet()) {    if ((Math.abs(x - p.x) < threshold && Math.abs(y - p.y) < threshold) || (Math.abs(y - p.x) < threshold && Math.abs(x - p.y) < threshold)) {      return myAndroidCoordinatesToDeviceMap.get(p);    }  }  return null;}  }
class C{  private static void unknownPacket(State state,int id){  log.warn(String.format("Unknown packet recived from Game Server: 0x%02X state=%s",id,state.toString()));}  }
class C{  private void fillNonDictionaryArrayFromRow(CarbonRow row,Object[] outputArray){  if (nonDictionaryFieldIndexes.length > 0) {    byte[][] nonDictByteArray=new byte[nonDictionaryFieldIndexes.length][];    for (int i=0; i < nonDictByteArray.length; i++) {      nonDictByteArray[i]=row.getBinary(nonDictionaryFieldIndexes[i]);    }    byte[] nonDictionaryCols=RemoveDictionaryUtil.packByteBufferIntoSingleByteArray(nonDictByteArray);    outputArray[byteArrayIndexInRow]=nonDictionaryCols;  }}  }
class C{  public static double uniform(Random rng,double min,double max){  return rng.nextDouble() * (max - min) + min;}  }
class C{  @Override public ListenableFuture<MemberListResponse> listMember(){  return clusterStub.memberList(MemberListRequest.getDefaultInstance());}  }
class C{  private boolean comparingFilename(FieldIdEnum field){  return filenameList.contains(field);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Silence_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201132,value0);}  }
class C{  @BeforeClass public void retrieveOAuthToken(){  RestAssured.baseURI="http://localhost:9876";  given().when().then();}  }
class C{  public void registerEvent(Object object,Method method){  noParamMap.put(object,method);}  }
class C{  public boolean write(byte[] bytes,int offset,int size){  if (firstSample) {    firstSample=false;    timer.stop("firstAudio");    if (audioMetrics) {      timer.getTimer("firstAudio").showTimesShortTitle("");      timer.getTimer("firstAudio").showTimesShort(0);    }  }  System.arraycopy(bytes,offset,outputData,curIndex,size);  curIndex+=size;  return true;}  }
class C{  @SuppressWarnings("unchecked") public static String[] split(String original,String separator){  nodes.removeAllElements();  int index=original.indexOf(separator);  while (index >= 0) {    nodes.addElement(original.substring(0,index));    original=original.substring(index + separator.length());    index=original.indexOf(separator);  }  nodes.addElement(original);  String[] result=new String[nodes.size()];  if (nodes.size() > 0) {    for (int loop=0; loop < nodes.size(); loop++) {      result[loop]=(String)nodes.elementAt(loop);    }  }  return result;}  }
class C{  public Builder transparent(Boolean transparent){  this.transparent=transparent;  return this;}  }
class C{  public INDArray asMatrix(InputStream inputStream) throws IOException {  if (channels == 3)   return toBgr(inputStream);  try {    BufferedImage image=ImageIO.read(inputStream);    return asMatrix(image);  } catch (  IOException e) {    throw new IOException("Unable to load image",e);  }}  }
class C{  public static int javaNew(int luaState,Class clazz) throws LuaException {  LuaState L=LuaStateFactory.getExistingState(luaState);synchronized (L) {    Object ret=getObjInstance(L,clazz);    L.pushJavaObject(ret);    return 1;  }}  }
class C{  public static ExpectedCondition<Boolean> scopedElementLocatedByNotPresent(final WebElement scope,final By locator){  return null;}  }
class C{  public Builder cacheOnDisk(boolean cacheOnDisk){  this.cacheOnDisk=cacheOnDisk;  return this;}  }
class C{  public OverScroller(Context context,Interpolator interpolator){  this(context,interpolator,true);}  }
class C{  public boolean toggleNeverTranslateLanguageState(boolean value){  if (mOptions[ALWAYS_LANGUAGE] && value) {    return false;  }  return toggleState(NEVER_LANGUAGE,value);}  }
class C{  public GsonBuilder registerTypeAdapterFactory(TypeAdapterFactory factory){  factories.add(factory);  return this;}  }
class C{  T cycle(){  if (_prioritize != null) {    return _prioritize;  }  if (!_queue.isEmpty()) {    T first=_queue.keySet().iterator().next();    _queue.get(first);    return first;  }  return null;}  }
class C{  public void sync() throws CanceledException {  if (!inSync) {    inSync=true;    IChartData chartData=(IChartData)getChartData();    chartData.clear();    Document doc=((Director)dir).getDocument();    setChartTitle(cName + " profile for " + doc.getTitle());    int numberOfDatasets=doc.getNumberOfSamples();    if (numberOfDatasets > 0) {      chartData.setAllSeries(doc.getSampleNames());      String[] sampleNames=doc.getSampleNames().toArray(new String[doc.getSampleNames().size()]);      java.util.Collection<Integer> ids=parentViewer.getSelectedIds();      LinkedList<String> classNames=new LinkedList<>();      for (      Integer id : ids) {        String className=parentViewer.getClassification().getName2IdMap().get(id);        classNames.add(className);        int[] summarized=parentViewer.getSummarized(id);        for (int i=0; i < sampleNames.length; i++) {          chartData.putValue(sampleNames[i],className,summarized[i]);        }      }      chartData.setClassNames(classNames);    }    chartData.setTree(parentViewer.getInducedTree(((Name2IdMap)parentViewer.getClassification().getName2IdMap()).getId2Name(),parentViewer.getSelectedNodes()));    super.sync();    inSync=false;  }}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  @Override public boolean isDeprecated(){  return proto.getOptions().getDeprecated();}  }
class C{  public void clearCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    if (BuildConfig.DEBUG) {      Log.d(TAG,"Memory cache cleared");    }  }}  }
class C{  protected void addChildListeners(){}  }
class C{  public static java.sql.Date toSqlDate(String date){  java.util.Date newDate=toDate(date,"00:00:00");  if (newDate != null) {    return new java.sql.Date(newDate.getTime());  } else {    return null;  }}  }
class C{  public void addTypeArgument(Access node){  List<Access> list=(parent == null || state == null) ? getTypeArgumentListNoTransform() : getTypeArgumentList();  list.addChild(node);}  }
class C{  public static int readSignedInt(ByteInput in,int zwidth){  int result=0;  for (int i=zwidth; i >= 0; i--) {    result=(result >>> 8) | ((in.readByte() & 0xff) << 24);  }  result>>=(3 - zwidth) * 8;  return result;}  }
class C{  public static final void drawMouseJoint(GL2 gl,PinJoint joint,double invdt){  gl.glColor4f(0.0f,0.0f,0.0f,0.8f);  Vector2 anchor=joint.getAnchor2();  RenderUtilities.fillRectangleFromCenter(gl,anchor.x,anchor.y,0.05,0.05);  Vector2 target=joint.getTarget();  RenderUtilities.fillRectangleFromCenter(gl,target.x,target.y,0.05,0.05);  double maxForce=joint.getMaximumForce();  double force=joint.getReactionForce(invdt).getMagnitude();  double red=force / maxForce;  red*=1.10;  red=Interval.clamp(red,0.0,1.0);  gl.glColor4f((float)red,0.0f,0.0f,0.8f);  gl.glBegin(GL.GL_LINES);  gl.glVertex2d(anchor.x,anchor.y);  gl.glVertex2d(target.x,target.y);  gl.glEnd();}  }
class C{  @Override protected void fillUtterance(Utterance utterance,Element sentence){  fillUtterance(utterance,sentence,true,false,false);}  }
class C{  public static Beans<Data> load(String table,W q,int s,int n){  return Helper.load(table,q,s,n,Data.class);}  }
class C{  public static String applyPrefixSuffix(String uriSource,Configuration conf){  if (uriSource == null)   return null;  String prefix=conf.get(OUTPUT_URI_PREFIX);  String suffix=conf.get(OUTPUT_URI_SUFFIX);  if (prefix == null && suffix == null) {    return uriSource;  }  int len=uriSource.length() + (prefix != null ? prefix.length() : 0) + (suffix != null ? suffix.length() : 0);  StringBuilder uriBuf=new StringBuilder(len);  if (prefix != null) {    uriBuf.append(prefix);  }  uriBuf.append(uriSource);  if (suffix != null) {    uriBuf.append(suffix);  }  return uriBuf.toString();}  }
class C{  public static void main(String[] args) throws Throwable {  if (args.length != 1) {    if (_logger.isLoggable(Level.INFO)) {      _logger.info("Usage: QueryProcessor <property file>");    }    System.exit(-1);  }  Properties config=new Properties();  FileInputStream fileIn=new FileInputStream(args[0]);  config.load(fileIn);  fileIn.close();  QueryProcessorConfiguration qpConfig=new QueryProcessorConfiguration(null,config);  IJSpace space=(IJSpace)SpaceFinder.find(qpConfig.getSpaceURL());  IRemoteSpace remoteSpace=((IDirectSpaceProxy)space).getRemoteJSpace();  QueryProcessor qp=(QueryProcessor)QueryProcessorFactory.newInstance(space,remoteSpace,config);  try {    int listenPort=qpConfig.getListenPort();    Registry registry=LocateRegistry.createRegistry(listenPort);    qp.initStub();    registry.bind(IQueryProcessor.QP_LOOKUP_NAME,qp._stub);    _logger.info("QueryProcessor started on port:" + listenPort);  } catch (  Throwable e) {    qp.close();    throw e;  }  Object keepAlive=new Object();synchronized (keepAlive) {    try {      keepAlive.wait();    } catch (    InterruptedException e) {    }  }}  }
class C{  public static void showSnackShort(View view,String text){  Snackbar.make(view,text,Snackbar.LENGTH_SHORT).show();}  }
class C{  public static double cosh(double x){  if (Double.isNaN(x)) {    return x;  }  if (x > 20) {    if (x >= LOG_MAX_VALUE) {      final double t=exp(0.5 * x);      return (0.5 * t) * t;    } else {      return 0.5 * exp(x);    }  } else   if (x < -20) {    if (x <= -LOG_MAX_VALUE) {      final double t=exp(-0.5 * x);      return (0.5 * t) * t;    } else {      return 0.5 * exp(-x);    }  }  final double hiPrec[]=new double[2];  if (x < 0.0) {    x=-x;  }  exp(x,0.0,hiPrec);  double ya=hiPrec[0] + hiPrec[1];  double yb=-(ya - hiPrec[0] - hiPrec[1]);  double temp=ya * HEX_40000000;  double yaa=ya + temp - temp;  double yab=ya - yaa;  double recip=1.0 / ya;  temp=recip * HEX_40000000;  double recipa=recip + temp - temp;  double recipb=recip - recipa;  recipb+=(1.0 - yaa * recipa - yaa * recipb - yab * recipa - yab * recipb) * recip;  recipb+=-yb * recip * recip;  temp=ya + recipa;  yb+=-(temp - ya - recipa);  ya=temp;  temp=ya + recipb;  yb+=-(temp - ya - recipb);  ya=temp;  double result=ya + yb;  result*=0.5;  return result;}  }
class C{  @Override public String resolveSystem(String systemId) throws IOException {  String resolved=super.resolveSystem(systemId);  if (resolved != null) {    return resolved;  }  Enumeration en=catalogEntries.elements();  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == RESOLVER) {      resolved=resolveExternalSystem(systemId,e.getEntryArg(0));      if (resolved != null) {        return resolved;      }    } else     if (e.getEntryType() == SYSTEMSUFFIX) {      String suffix=e.getEntryArg(0);      String result=e.getEntryArg(1);      if (suffix.length() <= systemId.length() && systemId.substring(systemId.length() - suffix.length()).equals(suffix)) {        return result;      }    }  }  return resolveSubordinateCatalogs(Catalog.SYSTEM,null,null,systemId);}  }
class C{  @Override public int hashCode(){  return Arrays.hashCode(data);}  }
class C{  public void append(CharSequence s){  text.append(s);}  }
class C{  private void rotate(){  final int fullCircle=360;  mAngle+=ROTATION_DEGREES;  mAngle%=fullCircle;  mCropView.rotateImage(ROTATION_DEGREES);}  }
class C{  protected void execWithInput(CommandInput commandInput,String command,CompletionHandler completionHandler){  execWithInput(commandInput,command,completionHandler,null,SSH_OPERATION_TIMEOUT_SHORT,TimeUnit.SECONDS);}  }
class C{  public String process(Item item) throws ProcessException {  return getPhoneFeature(item,"cplace");}  }
class C{  public boolean isReadOnly(){  return m_readOnly;}  }
class C{  public GroupsGetQuery(VkApiClient client,UserActor actor){  super(client,"groups.get",GetResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  protected AdsDeleteAdsQuery ids(String value){  return unsafeParam("ids",value);}  }
class C{  public void print(PrintWriter output,int w,int d){  DecimalFormat format=new DecimalFormat();  format.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));  format.setMinimumIntegerDigits(1);  format.setMaximumFractionDigits(d);  format.setMinimumFractionDigits(d);  format.setGroupingUsed(false);  print(output,format,w + 2);}  }
class C{  public static void disband(League league){  Preconditions.checkState(league.onlineMembers() <= 1,"Can't disband league with more than one online member");  leagues.remove(league.getTeamId());  league.onEvent(new LeagueDisbandEvent(league));}  }
class C{  public SourceDataTagValueResponse onSourceDataTagValueUpdateRequest(final SourceDataTagValueRequest sourceDataTagValueRequest){  LOGGER.debug("entering handleSdtValueUpdateRequest()..");  final SourceDataTagValueResponse dataTagValueResponse;  SourceDataTagValueRequest.DataTagRequestType type=sourceDataTagValueRequest.getType();  Long processId=configurationController.getProcessConfiguration().getProcessID();  String processName=configurationController.getProcessConfiguration().getProcessName();  List<DataTagValueUpdate> updates=new ArrayList<>();  Map<Long,EquipmentConfiguration> equipmentMap=configurationController.getProcessConfiguration().getEquipmentConfigurations();switch (type) {case PROCESS:    LOGGER.debug("request type: PROCESS");  if (processId.equals(sourceDataTagValueRequest.getId())) {    for (    EquipmentConfiguration equipmentConfiguration : equipmentMap.values()) {      updates.addAll(getDataTagUpdates(equipmentConfiguration));    }    dataTagValueResponse=new SourceDataTagValueResponse(updates);  } else {    String error="process " + processName + " does not have id: "+ sourceDataTagValueRequest.getId();    LOGGER.error(error);    dataTagValueResponse=new SourceDataTagValueResponse(error);  }break;case EQUIPMENT:LOGGER.debug("request type: EQUIPMENT");Long equipmentId=sourceDataTagValueRequest.getId();EquipmentConfiguration configuration=equipmentMap.get(equipmentId);if (configuration != null) {updates.addAll(getDataTagUpdates(configuration));dataTagValueResponse=new SourceDataTagValueResponse(updates);} else {String error="process " + processName + " does not have equipment with id: "+ equipmentId;LOGGER.error(error);dataTagValueResponse=new SourceDataTagValueResponse(error);}break;case DATATAG:LOGGER.debug("request type: DATATAG");Long dataTagId=sourceDataTagValueRequest.getId();ISourceDataTag sourceDataTag=configurationController.findDataTag(dataTagId);if (sourceDataTag != null) {updates.add(getDataTagUpdate(sourceDataTag));dataTagValueResponse=new SourceDataTagValueResponse(updates);} else {String error="process " + processName + " does not have a data tag with id: "+ dataTagId;LOGGER.error(error);dataTagValueResponse=new SourceDataTagValueResponse(error);}break;default :String error="Unknown SourceDataTagValueRequest type: " + type;LOGGER.error(error);dataTagValueResponse=new SourceDataTagValueResponse(error);}return dataTagValueResponse;}  }
class C{  public FocusControl(String focusGroup){  this(1);  group=focusGroup;}  }
class C{  protected boolean canTriggerWalking(){  return false;}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=crossCheckStateCount;  stateCount[0]=0;  stateCount[1]=0;  stateCount[2]=0;  int i=startI;  while (i >= 0 && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i++;  }  if (i == maxI || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[2] <= maxCount) {    stateCount[2]++;    i++;  }  if (stateCount[2] > maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  void usePullParse(){  try {    LitePalAttr litePalAttr=LitePalAttr.getInstance();    XmlPullParserFactory factory=XmlPullParserFactory.newInstance();    XmlPullParser xmlPullParser=factory.newPullParser();    xmlPullParser.setInput(getConfigInputStream(),"UTF-8");    int eventType=xmlPullParser.getEventType();    while (eventType != XmlPullParser.END_DOCUMENT) {      String nodeName=xmlPullParser.getName();switch (eventType) {case XmlPullParser.START_TAG:{          if (NODE_DB_NAME.equals(nodeName)) {            String dbName=xmlPullParser.getAttributeValue("",ATTR_VALUE);            litePalAttr.setDbName(dbName);          } else           if (NODE_VERSION.equals(nodeName)) {            String version=xmlPullParser.getAttributeValue("",ATTR_VALUE);            litePalAttr.setVersion(Integer.parseInt(version));          } else           if (NODE_MAPPING.equals(nodeName)) {            String className=xmlPullParser.getAttributeValue("",ATTR_CLASS);            litePalAttr.addClassName(className);          } else           if (NODE_CASES.equals(nodeName)) {            String cases=xmlPullParser.getAttributeValue("",ATTR_VALUE);            litePalAttr.setCases(cases);          }          break;        }default :      break;  }  eventType=xmlPullParser.next();}} catch (XmlPullParserException e) {throw new ParseConfigurationFileException(ParseConfigurationFileException.FILE_FORMAT_IS_NOT_CORRECT);}catch (IOException e) {throw new ParseConfigurationFileException(ParseConfigurationFileException.IO_EXCEPTION);}}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(DEFAULT_IMAGE_TIMEOUT_MS,DEFAULT_IMAGE_MAX_RETRIES,DEFAULT_IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  public boolean canZoomInMoreX(){  return (mScaleX < mMaxScaleX);}  }
class C{  public void alignIteration(){  Map<String,Integer> symMapCount=new HashMap<String,Integer>();  Map<StringPair,Integer> sym2symCount=new HashMap<StringPair,Integer>();  int symCount=0;  int symDels=0;  for (int i=0; i < this.outSplit.size(); i++) {    String[] in=this.inSplit.get(i);    String[] out=this.outSplit.get(i);    int[] alignment=this.align(in,out);    symCount+=in.length;    int pre=0;    for (int inNr=0; inNr < in.length; inNr++) {      if (alignment[inNr] == pre) {        symDels++;      } else {        Integer c=symMapCount.get(in[inNr]);        if (null == c) {          symMapCount.put(in[inNr],alignment[inNr] - pre);        } else {          symMapCount.put(in[inNr],c + alignment[inNr] - pre);        }        for (int outNr=pre; outNr < alignment[inNr]; outNr++) {          StringPair key=new StringPair(in[inNr],out[outNr]);          Integer mapC=sym2symCount.get(key);          if (null == mapC) {            sym2symCount.put(key,1);          } else {            sym2symCount.put(key,1 + mapC);          }        }      }      pre=alignment[inNr];    }  }  double delFraction=(double)symDels / symCount;  this.skipcost=(int)-this.log2(delFraction);  this.aligncost.clear();  for (  StringPair mapping : sym2symCount.keySet()) {    String firstSym=mapping.getString1();    double fraction=(double)sym2symCount.get(mapping) / symMapCount.get(firstSym);    int cost=(int)-this.log2(fraction);    if (cost < this.defaultcost) {      this.aligncost.put(mapping,cost);    }  }}  }
class C{  public static FileDescriptorSet generate(Service normalizedService){  DescriptorGenerator generator=new DescriptorGenerator();  generator.analyzeService(normalizedService);  return generator.generate();}  }
class C{  private void initModel(int categoryId){  this.categoryManageModel=new CategoryManageObject(categoryId);}  }
class C{  public TransactionStyle(int timeoutInSeconds){  this.timeout=timeoutInSeconds;}  }
class C{  @Deprecated public Builder cacheInMemory(){  cacheInMemory=true;  return this;}  }
class C{  private CommonClassLoader(ClassLoader parent){  super("CommonClassLoader",new URL[0],parent);}  }
class C{  public static void validateCmdLineArguments(ITunesInputParameters inputParameters) throws ArgumentValidationException {switch (inputParameters.getCmdLineArgs().getMode()) {case convert:    validateConvertMode(inputParameters);  break;case metadata:validateMetadataMode(inputParameters);break;case audiomap:validateAudiomapMode(inputParameters);break;case chapters:validateChaptersMode(inputParameters);break;default :}}  }
class C{  public CompareWithRemoteAction(SVNRevision revision){  this.revision=revision;}  }
class C{  public ActivityMap(){  this(null);}  }
class C{  public static boolean deleteFile(String path){  if (StringUtil.isEmpty(path)) {    return true;  }  File file=new File(path);  if (!file.exists()) {    return true;  }  if (file.isFile()) {    return file.delete();  }  if (!file.isDirectory()) {    return false;  }  for (  File f : file.listFiles()) {    if (f.isFile()) {      f.delete();    } else     if (f.isDirectory()) {      deleteFile(f.getAbsolutePath());    }  }  return file.delete();}  }
class C{  public static long calculateDuration(int dayCount){  if (dayCount == 0) {    return Integer.MAX_VALUE;  }  Calendar cal=Calendar.getInstance();  cal.add(Calendar.DATE,+dayCount);  return ((cal.getTimeInMillis() - System.currentTimeMillis()) / 1000);}  }
class C{  static ActivationGroupID restoreGroupID(final String dir) throws IOException, ClassNotFoundException {  File log=new File(dir);  String absDir=log.getAbsolutePath();  if (!log.exists() || !log.isDirectory()) {    throw new IOException("Log directory [" + absDir + "] does not exist.");  }  File cookieFile=new File(log,GROUP_COOKIE_FILE);  ObjectInputStream ois=null;  ActivationGroupID obj=null;  try {    ois=new ObjectInputStream(new BufferedInputStream(new FileInputStream(cookieFile)));    MarshalledObject mo=(MarshalledObject)ois.readObject();    obj=(ActivationGroupID)mo.get();  }  finally {    if (ois != null)     ois.close();  }  return obj;}  }
class C{  public boolean hasSelectedMatchLevelNode(){  TreePath[] paths=dataTree.getSelectionPaths();  if (paths != null) {    for (    TreePath path : paths) {      if (getMatchLevelNodeFromPath(path) != null)       return true;    }  }  return false;}  }
class C{  private boolean isFreeName(String name){  return !DAOManager.getDAO(LegionDAO.class).isNameUsed(name);}  }
class C{  public static boolean isOnlyOpening(String tagName){  return isElement(tagName,ONLY_OPENING);}  }
class C{  private static boolean itemStackIngredientsMatch(ItemStack A,ItemStack B){  if (A == null && B == null)   return true;  if (A == null || B == null)   return false;  if (A.getMetadata() == OreDictionary.WILDCARD_VALUE || B.getMetadata() == OreDictionary.WILDCARD_VALUE)   return A.getItem() == B.getItem();  return ItemStack.areItemsEqual(A,B);}  }
class C{  public static final void fillCircleFromTopLeft(GL2 gl,double sx,double sy,double w,double h){  double r=Math.min(w,h) * 0.5;  RenderUtilities.fillCircleFromCenter(gl,r,sx + r,sy - r);}  }
class C{  public boolean bottomAllowed(){  return (myFlags & BOTTOM_EDGE) != 0;}  }
class C{  public void onUpdateFromCloseToPeek(float percentage){  if (!isVisible())   return;  mHeightPx=Math.round(mDefaultHeightPx);}  }
class C{  @Override public void processingInstruction(String target,XMLString data,Augmentations augs) throws XNIException {  if (fPerformValidation && fElementDepth >= 0 && fDTDGrammar != null) {    fDTDGrammar.getElementDecl(fCurrentElementIndex,fTempElementDecl);    if (fTempElementDecl.type == XMLElementDecl.TYPE_EMPTY) {      fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_CONTENT_INVALID_SPECIFIED",new Object[]{fCurrentElement.rawname,"EMPTY","processing instruction"},XMLErrorReporter.SEVERITY_ERROR);    }  }  if (fDocumentHandler != null) {    fDocumentHandler.processingInstruction(target,data,augs);  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public Collection unimplementedMethods(){  if (unimplementedMethods_computed) {    return unimplementedMethods_value;  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  unimplementedMethods_value=unimplementedMethods_compute();  if (isFinal && num == state().boundariesCrossed)   unimplementedMethods_computed=true;  return unimplementedMethods_value;}  }
class C{  public AdsGetSuggestionsQueryWithSchools lang(AdsGetSuggestionsLang value){  return unsafeParam("lang",value);}  }
class C{  protected ContextualSearchSceneLayer createNewContextualSearchSceneLayer(){  return new ContextualSearchSceneLayer(mContext.getResources().getDisplayMetrics().density);}  }
class C{  public GSMessageImpl(GSSessionImpl session,String type) throws JMSException {  this();  setSession(session);  setJMSType(type);  Properties=new HashMap<String,Object>(0);}  }
class C{  @POST @Path("applications/{applicationName}/experiments/{experimentLabel}/ruletest") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value="Test the segmentation rule of an experiment") @Timed public Response postAssignmentRuleTest(@PathParam("applicationName") @ApiParam(value="Application Name") final Application.Name applicationName,@PathParam("experimentLabel") @ApiParam(value="Experiment Label") final Experiment.Label experimentLabel,@QueryParam("context") @DefaultValue("PROD") @ApiParam(value="context for the experiment, eg QA, PROD") final Context context,@ApiParam(name="segmentationProfile",value="Segmentation Profile") final SegmentationProfile segmentationProfile,@javax.ws.rs.core.Context final HttpHeaders headers){  boolean ruleResult=assignments.doSegmentTest(applicationName,experimentLabel,context,segmentationProfile,headers);  return httpHeader.headers().entity(ImmutableMap.<String,Object>builder().put("result",ruleResult).build()).build();}  }
class C{  @Override public Histogram histogram(){  return hist;}  }
class C{  public JValueSlider(String title,long min,long max,long value){  this(title,new Long(min),new Long(max),new Long(value));}  }
class C{  private void modifySpeechRate(NodeList nl,double percentage,boolean increaseSpeechRate){  assert nl != null;  for (int i=0; i < nl.getLength(); i++) {    Element e=(Element)nl.item(i);    assert "ph".equals(e.getNodeName()) : "NodeList should contain 'ph' elements only";    if (!e.hasAttribute("d")) {      continue;    }    double durAttribute=new Double(e.getAttribute("d")).doubleValue();    double newDurAttribute;    if (increaseSpeechRate) {      newDurAttribute=durAttribute - (percentage * durAttribute / 100);    } else {      newDurAttribute=durAttribute + (percentage * durAttribute / 100);    }    e.setAttribute("d",newDurAttribute + "");  }  Element e=(Element)nl.item(0);  Element rootElement=e.getOwnerDocument().getDocumentElement();  NodeIterator nit=DomUtils.createNodeIterator(rootElement,MaryXML.PHONE,MaryXML.BOUNDARY);  Element nd;  double duration=0.0;  for (int i=0; (nd=(Element)nit.nextNode()) != null; i++) {    if ("boundary".equals(nd.getNodeName())) {      if (nd.hasAttribute("duration")) {        duration+=new Double(nd.getAttribute("duration")).doubleValue();      }    } else {      if (nd.hasAttribute("d")) {        duration+=new Double(nd.getAttribute("d")).doubleValue();      }    }    double endTime=0.001 * duration;    if (!nd.getNodeName().equals(MaryXML.BOUNDARY)) {      nd.setAttribute("end",String.valueOf(endTime));    }  }}  }
class C{  @Override protected void componentShowing(){  if (!initialized) {    initialized=true;    doInitialize();  }  if (null != content && getComponentCount() == 0) {    add(content,BorderLayout.CENTER);  }  super.componentShowing();}  }
class C{  protected void playMedia(){  mState=State.STOPPED;  releaseResources(false);  try {    if (mFile == null) {      Toast.makeText(this,R.string.media_err_nothing_to_play,Toast.LENGTH_LONG).show();      processStopRequest(true);      return;    } else     if (mAccount == null) {      Toast.makeText(this,R.string.media_err_not_in_owncloud,Toast.LENGTH_LONG).show();      processStopRequest(true);      return;    }    createMediaPlayerIfNeeded();    mPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);    String url=mFile.getStoragePath();    mIsStreaming=false;    mPlayer.setDataSource(url);    mState=State.PREPARING;    setUpAsForeground(String.format(getString(R.string.media_state_loading),mFile.getFileName()));    mPlayer.prepareAsync();    if (mIsStreaming) {      mWifiLock.acquire();    } else     if (mWifiLock.isHeld()) {      mWifiLock.release();    }  } catch (  SecurityException e) {    Log_OC.e(TAG,"SecurityException playing " + mAccount.name + mFile.getRemotePath(),e);    Toast.makeText(this,String.format(getString(R.string.media_err_security_ex),mFile.getFileName()),Toast.LENGTH_LONG).show();    processStopRequest(true);  }catch (  IOException e) {    Log_OC.e(TAG,"IOException playing " + mAccount.name + mFile.getRemotePath(),e);    Toast.makeText(this,String.format(getString(R.string.media_err_io_ex),mFile.getFileName()),Toast.LENGTH_LONG).show();    processStopRequest(true);  }catch (  IllegalStateException e) {    Log_OC.e(TAG,"IllegalStateException " + mAccount.name + mFile.getRemotePath(),e);    Toast.makeText(this,String.format(getString(R.string.media_err_unexpected),mFile.getFileName()),Toast.LENGTH_LONG).show();    processStopRequest(true);  }catch (  IllegalArgumentException e) {    Log_OC.e(TAG,"IllegalArgumentException " + mAccount.name + mFile.getRemotePath(),e);    Toast.makeText(this,String.format(getString(R.string.media_err_unexpected),mFile.getFileName()),Toast.LENGTH_LONG).show();    processStopRequest(true);  }}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public List<String> names(){  return Collections.unmodifiableList(names);}  }
class C{  public void add(String expr,BasicStroke stroke){  Predicate p=(Predicate)ExpressionParser.parse(expr);  add(p,stroke);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelDeBuffMental_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200357,skillname);}  }
class C{  public CatchOptions(PokemonGo api){  this.api=api;  this.useRazzBerry=false;  this.maxRazzBerries=0;  this.useBestPokeball=false;  this.skipMasterBall=false;  this.pokeBall=POKEBALL;  this.strictBallType=false;  this.smartSelect=false;  this.maxPokeballs=1;  this.probability=0.50;  this.normalizedHitPosition=1.0;  this.normalizedReticleSize=1.95 + Math.random() * 0.05;  this.spinModifier=0.85 + Math.random() * 0.15;}  }
class C{  public void repaintImmediate(){  Graphics g=this.getGraphics();  if (g != null && m_offscreen != null) {    paintBufferToScreen(g);  }}  }
class C{  public int next(){  if (!hasNextLine())   return -1;  matchesTextLength=0;  String line=nextLine();  final String queryName=Basic.getReadName(line);  pushBackLine(line);  int matchId=0;  matches.clear();  try {    while (hasNextLine()) {      line=nextLine();      if (line == null)       break;      if (line.startsWith("# "))       continue;      if (line.startsWith("@") || line.startsWith((">")))       line=line.substring(1);      if (!(line.startsWith(queryName) && Character.isWhitespace(line.charAt(queryName.length())))) {        pushBackLine(line);        break;      }      String[] tokens=Basic.split(line,'\t');      if (tokens.length == 1)       continue;      final String refName=tokens[1];      if (!Basic.isFloat(tokens[2]))       throw new IOException("Expected float (percent identity), got: " + tokens[2]);      float identity=(Float.parseFloat(tokens[2]));      if (!Basic.isInteger(tokens[3]))       throw new IOException("Expected integer (length), got: " + tokens[3]);      int alignmentLength=(Integer.parseInt(tokens[3]));      if (!Basic.isInteger(tokens[4]))       throw new IOException("Expected integer (mismatches), got: " + tokens[4]);      int mismatches=(Integer.parseInt(tokens[4]));      if (!Basic.isInteger(tokens[5]))       throw new IOException("Expected integer (gap openings), got: " + tokens[5]);      int gapOpenings=(Integer.parseInt(tokens[5]));      if (!Basic.isInteger(tokens[6]))       throw new IOException("Expected integer (query start), got: " + tokens[6]);      int queryStart=(Integer.parseInt(tokens[6]));      if (!Basic.isInteger(tokens[7]))       throw new IOException("Expected integer (query end), got: " + tokens[7]);      int queryEnd=(Integer.parseInt(tokens[7]));      if (!Basic.isInteger(tokens[8]))       throw new IOException("Expected integer (subject start), got: " + tokens[8]);      int subjStart=(Integer.parseInt(tokens[8]));      if (!Basic.isInteger(tokens[9]))       throw new IOException("Expected integer (subject end), got: " + tokens[9]);      int subjEnd=(Integer.parseInt(tokens[9]));      if (!Basic.isFloat(tokens[10]))       throw new IOException("Expected float (expected), got: " + tokens[10]);      float expect=(Float.parseFloat(tokens[10]));      if (!Basic.isFloat(tokens[11]))       throw new IOException("Expected float (bit score), got: " + tokens[11]);      float bitScore=(Float.parseFloat(tokens[11]));      if (matches.size() < getMaxNumberOfMatchesPerRead() || bitScore > matches.last().bitScore) {        Match match=new Match();        match.bitScore=bitScore;        match.id=matchId++;        match.samLine=makeSAM(queryName,refName,bitScore,expect,identity,queryStart,subjStart,subjEnd,line);        matches.add(match);        if (matches.size() > getMaxNumberOfMatchesPerRead())         matches.remove(matches.last());      }    }  } catch (  Exception ex) {    System.err.println("Error parsing file near line: " + getLineNumber() + ": "+ ex.getMessage());    if (incrementNumberOfErrors() >= getMaxNumberOfErrors())     throw new RuntimeException("Too many errors");  }  if (matches.size() == 0) {    if (queryName.length() > matchesText.length) {      matchesText=new byte[2 * queryName.length()];    }    for (int i=0; i < queryName.length(); i++)     matchesText[matchesTextLength++]=(byte)queryName.charAt(i);    matchesText[matchesTextLength++]='\n';    return 0;  } else {    for (    Match match : matches) {      byte[] bytes=match.samLine.getBytes();      if (matchesTextLength + bytes.length + 1 >= matchesText.length) {        byte[] tmp=new byte[2 * (matchesTextLength + bytes.length + 1)];        System.arraycopy(matchesText,0,tmp,0,matchesTextLength);        matchesText=tmp;      }      System.arraycopy(bytes,0,matchesText,matchesTextLength,bytes.length);      matchesTextLength+=bytes.length;      matchesText[matchesTextLength++]='\n';    }    return matches.size();  }}  }
class C{  public LUDecomposition(Matrix A){  LU=A.getArrayCopy();  m=A.getRowDimension();  n=A.getColumnDimension();  piv=new int[m];  for (int i=0; i < m; i++) {    piv[i]=i;  }  pivsign=1;  double[] LUrowi;  double[] LUcolj=new double[m];  for (int j=0; j < n; j++) {    for (int i=0; i < m; i++) {      LUcolj[i]=LU[i][j];    }    for (int i=0; i < m; i++) {      LUrowi=LU[i];      int kmax=Math.min(i,j);      double s=0.0;      for (int k=0; k < kmax; k++) {        s+=LUrowi[k] * LUcolj[k];      }      LUrowi[j]=LUcolj[i]-=s;    }    int p=j;    for (int i=j + 1; i < m; i++) {      if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {        p=i;      }    }    if (p != j) {      for (int k=0; k < n; k++) {        double t=LU[p][k];        LU[p][k]=LU[j][k];        LU[j][k]=t;      }      int k=piv[p];      piv[p]=piv[j];      piv[j]=k;      pivsign=-pivsign;    }    if (j < m & LU[j][j] != 0.0) {      for (int i=j + 1; i < m; i++) {        LU[i][j]/=LU[j][j];      }    }  }}  }
class C{  public VideoSearchQueryWithExtended filters(List<VideoSearchFilter> value){  return unsafeParam("filters",value);}  }
class C{  public ResourcesPoet addDrawable(String name,String value){  Element bool=document.createElement("drawable");  bool.setAttribute("name",name);  bool.appendChild(document.createTextNode(value));  resourceElement.appendChild(bool);  return this;}  }
class C{  private View fillUp(int pos,int bottom){  int end=mListPadding.top;  int childBottom=getFillChildTop();  while (childBottom > end && pos >= 0) {    makeAndAddView(pos,getItemBottom(pos),false,false);    pos--;    childBottom=getItemBottom(pos);  }  mFirstPosition=pos + 1;  return null;}  }
class C{  public Decider(INSECTDB dbRepository){  Repository=dbRepository;  CategoryEvidenceCount=new Distribution<String>();}  }
class C{  private static void deleteRecursiveSilent(CarbonFile f){  if (f.isDirectory()) {    if (f.listFiles() != null) {      for (      CarbonFile c : f.listFiles()) {        deleteRecursiveSilent(c);      }    }  }  if (f.exists() && !f.delete()) {    return;  }}  }
class C{  Observable<Reply<List<Task>>> tasks(boolean refresh){  return refresh ? api.tasks().compose(cacheProvider.replaceAsReply()) : api.tasks().compose(cacheProvider.readWithLoaderAsReply());}  }
class C{  private String readTag(XmlPullParser parser,int tagType) throws IOException, XmlPullParserException {switch (tagType) {case TAG_ID:    return readBasicTag(parser,"id");case TAG_TITLE:  return readBasicTag(parser,"title");case TAG_PUBLISHED:return readBasicTag(parser,"published");case TAG_LINK:return readAlternateLink(parser);default :throw new IllegalArgumentException("Unknown tag type: " + tagType);}}  }
class C{  public Matrix3f mult(Matrix3f mat,Matrix3f product){  float temp00, temp01, temp02;  float temp10, temp11, temp12;  float temp20, temp21, temp22;  if (product == null) {    product=new Matrix3f();  }  temp00=m00 * mat.m00 + m01 * mat.m10 + m02 * mat.m20;  temp01=m00 * mat.m01 + m01 * mat.m11 + m02 * mat.m21;  temp02=m00 * mat.m02 + m01 * mat.m12 + m02 * mat.m22;  temp10=m10 * mat.m00 + m11 * mat.m10 + m12 * mat.m20;  temp11=m10 * mat.m01 + m11 * mat.m11 + m12 * mat.m21;  temp12=m10 * mat.m02 + m11 * mat.m12 + m12 * mat.m22;  temp20=m20 * mat.m00 + m21 * mat.m10 + m22 * mat.m20;  temp21=m20 * mat.m01 + m21 * mat.m11 + m22 * mat.m21;  temp22=m20 * mat.m02 + m21 * mat.m12 + m22 * mat.m22;  product.m00=temp00;  product.m01=temp01;  product.m02=temp02;  product.m10=temp10;  product.m11=temp11;  product.m12=temp12;  product.m20=temp20;  product.m21=temp21;  product.m22=temp22;  return product;}  }
class C{  public static final Color convertColor(float[] color){  if (color.length == 3) {    return new Color(color[0],color[1],color[2]);  } else   if (color.length == 4) {    return new Color(color[0],color[1],color[2],color[3]);  } else {    throw new IllegalArgumentException(Messages.getString("exception.color.notEnoughComponents"));  }}  }
class C{  public static String routeOrderEntry(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  if (session.getAttribute("orderMode") == null) {    return "init";  }  if (request.getParameter("orderMode") != null) {    return "agreements";  }  return "cart";}  }
class C{  public Model createModel(List<String> configFileNames){  try {    Model model=Model.create(getDescriptor(),protoFiles,ImmutableList.<String>of(),ExtensionPool.EMPTY);    model.setConfigSources(getApiYamlConfigSources(model.getDiagCollector(),configFileNames));    return model;  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean addIfDoesNotOverlap(Pair<Rectangle2D,T> pair){  if (previousHit != null && pair.get1().intersects(previousHit))   return false;  if (data.size() == data.capacity())   data.ensureCapacity(data.size() + 1);  int which=data.size();  data.add(pair);  currentComparison=which;  BitSet startingX=getAll(sortedByMinX.headSet(which));  andAll(sortedByMaxX.tailSet(which),startingX);  boolean ok=(startingX.cardinality() == 0);  if (!ok) {    andAll(sortedByMinY.headSet(which),startingX);    ok=(startingX.cardinality() == 0);    if (!ok) {      andAll(sortedByMaxY.tailSet(which),startingX);      ok=(startingX.cardinality() == 0);    }  }  currentComparison=-1;  if (!ok) {    int id=startingX.nextSetBit(0);    previousHit=data.get(id).get1();    data.remove(which);    return false;  } else {    sortedByMaxX.add(which);    sortedByMinX.add(which);    sortedByMaxY.add(which);    sortedByMinY.add(which);    if (data.size() == 0)     bbox.setRect(pair.get1()); else     bbox.add(pair.get1());    return true;  }}  }
class C{  protected MemorySection(ConfigurationSection parent,String path){  Validate.notNull(parent,"Parent cannot be null");  Validate.notNull(path,"Path cannot be null");  this.path=path;  this.parent=parent;  this.root=parent.getRoot();  Validate.notNull(root,"Path cannot be orphaned");  this.fullPath=createPath(parent,path);}  }
class C{  public void measureWidthRequiredForView(){  mMinimumWidth=0;  final int spec=View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED);  FrameLayout layout=new FrameLayout(getContext());  TextView estimator=(TextView)LayoutInflater.from(getContext()).inflate(R.layout.infobar_text,null);  layout.addView(estimator);  for (int i=0; i < getCount(); ++i) {    estimator.setText(getStringForLanguage(i));    estimator.measure(spec,spec);    mMinimumWidth=Math.max(mMinimumWidth,estimator.getMeasuredWidth());  }}  }
class C{  public void startIntent(String title,String... filters){  if (filters == null || filters.length == 0) {    startIntent(title);    return;  }  List<Intent> filteredIntents=getFilteredIntents(filters);  if (filteredIntents.size() == 0) {    startIntent(title);    return;  }  Intent tIntent=filteredIntents.remove(0);  Intent chooser=Intent.createChooser(tIntent,title);  chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,filteredIntents.toArray(new Parcelable[filteredIntents.size()]));  mContext.startActivity(chooser);}  }
class C{  public SingularValueDecomposition(Matrix Arg){  double[][] A=Arg.getArrayCopy();  m=Arg.getRowDimension();  n=Arg.getColumnDimension();  int nu=Math.min(m,n);  s=new double[Math.min(m + 1,n)];  U=new double[m][nu];  V=new double[n][n];  double[] e=new double[n];  double[] work=new double[m];  boolean wantu=true;  boolean wantv=true;  int nct=Math.min(m - 1,n);  int nrt=Math.max(0,Math.min(n - 2,m));  for (int k=0; k < Math.max(nct,nrt); k++) {    if (k < nct) {      s[k]=0;      for (int i=k; i < m; i++) {        s[k]=Maths.hypot(s[k],A[i][k]);      }      if (s[k] != 0.0) {        if (A[k][k] < 0.0) {          s[k]=-s[k];        }        for (int i=k; i < m; i++) {          A[i][k]/=s[k];        }        A[k][k]+=1.0;      }      s[k]=-s[k];    }    for (int j=k + 1; j < n; j++) {      if ((k < nct) & (s[k] != 0.0)) {        double t=0;        for (int i=k; i < m; i++) {          t+=A[i][k] * A[i][j];        }        t=-t / A[k][k];        for (int i=k; i < m; i++) {          A[i][j]+=t * A[i][k];        }      }      e[j]=A[k][j];    }    if (wantu & (k < nct)) {      for (int i=k; i < m; i++) {        U[i][k]=A[i][k];      }    }    if (k < nrt) {      e[k]=0;      for (int i=k + 1; i < n; i++) {        e[k]=Maths.hypot(e[k],e[i]);      }      if (e[k] != 0.0) {        if (e[k + 1] < 0.0) {          e[k]=-e[k];        }        for (int i=k + 1; i < n; i++) {          e[i]/=e[k];        }        e[k + 1]+=1.0;      }      e[k]=-e[k];      if ((k + 1 < m) & (e[k] != 0.0)) {        for (int i=k + 1; i < m; i++) {          work[i]=0.0;        }        for (int j=k + 1; j < n; j++) {          for (int i=k + 1; i < m; i++) {            work[i]+=e[j] * A[i][j];          }        }        for (int j=k + 1; j < n; j++) {          double t=-e[j] / e[k + 1];          for (int i=k + 1; i < m; i++) {            A[i][j]+=t * work[i];          }        }      }      if (wantv) {        for (int i=k + 1; i < n; i++) {          V[i][k]=e[i];        }      }    }  }  int p=Math.min(n,m + 1);  if (nct < n) {    s[nct]=A[nct][nct];  }  if (m < p) {    s[p - 1]=0.0;  }  if (nrt + 1 < p) {    e[nrt]=A[nrt][p - 1];  }  e[p - 1]=0.0;  if (wantu) {    for (int j=nct; j < nu; j++) {      for (int i=0; i < m; i++) {        U[i][j]=0.0;      }      U[j][j]=1.0;    }    for (int k=nct - 1; k >= 0; k--) {      if (s[k] != 0.0) {        for (int j=k + 1; j < nu; j++) {          double t=0;          for (int i=k; i < m; i++) {            t+=U[i][k] * U[i][j];          }          t=-t / U[k][k];          for (int i=k; i < m; i++) {            U[i][j]+=t * U[i][k];          }        }        for (int i=k; i < m; i++) {          U[i][k]=-U[i][k];        }        U[k][k]=1.0 + U[k][k];        for (int i=0; i < k - 1; i++) {          U[i][k]=0.0;        }      } else {        for (int i=0; i < m; i++) {          U[i][k]=0.0;        }        U[k][k]=1.0;      }    }  }  if (wantv) {    for (int k=n - 1; k >= 0; k--) {      if ((k < nrt) & (e[k] != 0.0)) {        for (int j=k + 1; j < nu; j++) {          double t=0;          for (int i=k + 1; i < n; i++) {            t+=V[i][k] * V[i][j];          }          t=-t / V[k + 1][k];          for (int i=k + 1; i < n; i++) {            V[i][j]+=t * V[i][k];          }        }      }      for (int i=0; i < n; i++) {        V[i][k]=0.0;      }      V[k][k]=1.0;    }  }  int pp=p - 1;  int iter=0;  double eps=Math.pow(2.0,-52.0);  double tiny=Math.pow(2.0,-966.0);  while (p > 0) {    int k, kase;    for (k=p - 2; k >= -1; k--) {      if (k == -1) {        break;      }      if (Math.abs(e[k]) <= tiny + eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {        e[k]=0.0;        break;      }    }    if (k == p - 2) {      kase=4;    } else {      int ks;      for (ks=p - 1; ks >= k; ks--) {        if (ks == k) {          break;        }        double t=(ks != p ? Math.abs(e[ks]) : 0.) + (ks != k + 1 ? Math.abs(e[ks - 1]) : 0.);        if (Math.abs(s[ks]) <= tiny + eps * t) {          s[ks]=0.0;          break;        }      }      if (ks == k) {        kase=3;      } else       if (ks == p - 1) {        kase=1;      } else {        kase=2;        k=ks;      }    }    k++;switch (kase) {case 1:{        double f=e[p - 2];        e[p - 2]=0.0;        for (int j=p - 2; j >= k; j--) {          double t=Maths.hypot(s[j],f);          double cs=s[j] / t;          double sn=f / t;          s[j]=t;          if (j != k) {            f=-sn * e[j - 1];            e[j - 1]=cs * e[j - 1];          }          if (wantv) {            for (int i=0; i < n; i++) {              t=cs * V[i][j] + sn * V[i][p - 1];              V[i][p - 1]=-sn * V[i][j] + cs * V[i][p - 1];              V[i][j]=t;            }          }        }      }    break;case 2:{    double f=e[k - 1];    e[k - 1]=0.0;    for (int j=k; j < p; j++) {      double t=Maths.hypot(s[j],f);      double cs=s[j] / t;      double sn=f / t;      s[j]=t;      f=-sn * e[j];      e[j]=cs * e[j];      if (wantu) {        for (int i=0; i < m; i++) {          t=cs * U[i][j] + sn * U[i][k - 1];          U[i][k - 1]=-sn * U[i][j] + cs * U[i][k - 1];          U[i][j]=t;        }      }    }  }break;case 3:{double scale=Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]),Math.abs(s[p - 2])),Math.abs(e[p - 2])),Math.abs(s[k])),Math.abs(e[k]));double sp=s[p - 1] / scale;double spm1=s[p - 2] / scale;double epm1=e[p - 2] / scale;double sk=s[k] / scale;double ek=e[k] / scale;double b=((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2.0;double c=(sp * epm1) * (sp * epm1);double shift=0.0;if ((b != 0.0) | (c != 0.0)) {  shift=Math.sqrt(b * b + c);  if (b < 0.0) {    shift=-shift;  }  shift=c / (b + shift);}double f=(sk + sp) * (sk - sp) + shift;double g=sk * ek;for (int j=k; j < p - 1; j++) {  double t=Maths.hypot(f,g);  double cs=f / t;  double sn=g / t;  if (j != k) {    e[j - 1]=t;  }  f=cs * s[j] + sn * e[j];  e[j]=cs * e[j] - sn * s[j];  g=sn * s[j + 1];  s[j + 1]=cs * s[j + 1];  if (wantv) {    for (int i=0; i < n; i++) {      t=cs * V[i][j] + sn * V[i][j + 1];      V[i][j + 1]=-sn * V[i][j] + cs * V[i][j + 1];      V[i][j]=t;    }  }  t=Maths.hypot(f,g);  cs=f / t;  sn=g / t;  s[j]=t;  f=cs * e[j] + sn * s[j + 1];  s[j + 1]=-sn * e[j] + cs * s[j + 1];  g=sn * e[j + 1];  e[j + 1]=cs * e[j + 1];  if (wantu && (j < m - 1)) {    for (int i=0; i < m; i++) {      t=cs * U[i][j] + sn * U[i][j + 1];      U[i][j + 1]=-sn * U[i][j] + cs * U[i][j + 1];      U[i][j]=t;    }  }}e[p - 2]=f;iter=iter + 1;}break;case 4:{if (s[k] <= 0.0) {s[k]=(s[k] < 0.0 ? -s[k] : 0.0);if (wantv) {for (int i=0; i <= pp; i++) {  V[i][k]=-V[i][k];}}}while (k < pp) {if (s[k] >= s[k + 1]) {break;}double t=s[k];s[k]=s[k + 1];s[k + 1]=t;if (wantv && (k < n - 1)) {for (int i=0; i < n; i++) {  t=V[i][k + 1];  V[i][k + 1]=V[i][k];  V[i][k]=t;}}if (wantu && (k < m - 1)) {for (int i=0; i < m; i++) {  t=U[i][k + 1];  U[i][k + 1]=U[i][k];  U[i][k]=t;}}k++;}iter=0;p--;}break;}}}  }
class C{  Set<FlagField<?>> unusedFlags(Map<String,String> nameToValue){  return nameToValue.keySet().stream().map(null).filter(null).collect(Collectors.toSet());}  }
class C{  public static Column max(DataFrame dataFrame,String columnName){  return dataFrame.groupBy(columnName).agg(functions.max(columnName)).col(columnName);}  }
class C{  public static <K,T,V>MultiDimensionalMap<K,T,V> newThreadSafeHashBackedMap(){  return new MultiDimensionalMap<>(new ConcurrentHashMap<Pair<K,T>,V>());}  }
class C{  public ElasticListView enableLoadFooter(boolean enable){  if (enable) {    if (!mEnableLoader) {      super.addFooterView(mLoadFooter,null,true);    }  } else {    if (mEnableLoader) {      removeFooterView(mLoadFooter);    }  }  mEnableLoader=enable;  return this;}  }
class C{  private boolean stopNotify1(){  return bleManager.stopNotify(UUID_SERVICE,UUID_NOTIFY_1);}  }
class C{  public static void close(){  out.close();}  }
class C{  private Stream<TermQuery> filterToTermQueries(String luceneFieldName,ApiFilter filter){  return filter.getValues().stream().map(null).map(null);}  }
class C{  private static final String toXml(BodyFixture fixture){  StringBuilder sb=new StringBuilder();  sb.append("<Fixture Id=\"").append(fixture.getId()).append("\" Name=\"").append(fixture.getUserData()).append("\">").append(XmlGenerator.toXml(fixture.getShape())).append(XmlGenerator.toXml(fixture.getFilter())).append("<Sensor>").append(fixture.isSensor()).append("</Sensor>").append("<Density>").append(fixture.getDensity()).append("</Density>").append("<Friction>").append(fixture.getFriction()).append("</Friction>").append("<Restitution>").append(fixture.getRestitution()).append("</Restitution>").append("</Fixture>");  return sb.toString();}  }
class C{  public int currentlyInBuffer(){  assert writePos >= readPos;  return writePos - readPos;}  }
class C{  public static boolean isWide(TypeReference typeReference){  String t=typeReference.getType();  return isWide(t);}  }
class C{  @Override public boolean isAvailable(){  return files.size() > 0;}  }
class C{  private void createTestMenuItems(JMenu menu){  JMenu dTests=new JMenu(Messages.getString("menu.tests.declarative"));  JMenu cTests=new JMenu(Messages.getString("menu.tests.compiled"));  menu.add(dTests);  menu.add(cTests);  ResourceBundle bundle=ResourceBundle.getBundle("org.dyn4j.sandbox.tests.list");  List<String> keys=Collections.list(bundle.getKeys());  Collections.sort(keys);  for (  String key : keys) {    String value=bundle.getString(key);    JMenuItem mnuTest=new JMenuItem(key);    mnuTest.setActionCommand("test+" + value);    mnuTest.addActionListener(this);    if (value.contains(".xml")) {      dTests.add(mnuTest);    } else {      cTests.add(mnuTest);    }  }}  }
class C{  @JsonCreator public NumberedShardSpec(@JsonProperty("type") String type,@JsonProperty("partitionNum") int partitionNum,@JsonProperty("partitions") int partitions){  this.type=type;  this.partitionNum=partitionNum;  this.partitions=partitions;}  }
class C{  public static boolean copyFile(File source,File dest){  File parentDest=dest.getParentFile();  if (!parentDest.exists()) {    if (!createDirectory(parentDest.getAbsolutePath())) {      return false;    }  }  try {    Files.copy(source.toPath(),dest.toPath());    return true;  } catch (  IOException e) {    e.printStackTrace();    return false;  }}  }
class C{  public static JsonElement createGeometry(IGeometry geometry){  JSONObject esriJsonObject=null;  try {switch (geometry.getGeometryType()) {case esriGeometryType.esriGeometryPoint:      esriJsonObject=getJSONFromPoint((Point)geometry);    break;case esriGeometryType.esriGeometryMultipoint:  esriJsonObject=ServerUtilities.getJSONFromMultipoint((Multipoint)geometry);break;case esriGeometryType.esriGeometryPolyline:esriJsonObject=ServerUtilities.getJSONFromPolyline((Polyline)geometry);break;case esriGeometryType.esriGeometryPolygon:esriJsonObject=getJSONFromPolygon((Polygon)geometry);break;case esriGeometryType.esriGeometryEnvelope:esriJsonObject=ServerUtilities.getJSONFromEnvelope((Envelope)geometry);break;case esriGeometryType.esriGeometryLine:esriJsonObject=getJSONFromLine((Line)geometry);break;default :System.err.println("Only geometries of type Point, Multipoint, Polyline, Polygon and Envelope are supported by this conversion utility. " + geometry.getGeometryType());break;}} catch (Exception e) {e.printStackTrace();}JsonObject jobj=new Gson().fromJson(esriJsonObject.toString(),JsonObject.class);return jobj;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() instanceof JButton) {    JButton button=(JButton)e.getSource();    if (button == refreshButton) {      refreshAttributes();      return;    }    if (button == clearButton) {      clearCurrentNotifications();      return;    }    if (button == subscribeButton) {      registerListener();      return;    }    if (button == unsubscribeButton) {      unregisterListener();      return;    }  }}  }
class C{  public void mergeWith(DistributionDocument tpData,double fLearningRate){}  }
class C{  public static Collection<ValidationResult> validate(ValidationRunContext context,ApplicationContext applicationContext){  long startTime=System.nanoTime();  DataElementCategoryService categoryService=(DataElementCategoryService)applicationContext.getBean(DataElementCategoryService.class);  int threadPoolSize=getThreadPoolSize(context);  ExecutorService executor=Executors.newFixedThreadPool(threadPoolSize);  for (  OrganisationUnitExtended sourceX : context.getSourceXs()) {    if (sourceX.getToBeValidated()) {      ValidationTask task=(ValidationTask)applicationContext.getBean(DataValidationTask.NAME);      task.init(sourceX,context);      executor.execute(task);    }  }  executor.shutdown();  try {    executor.awaitTermination(6,TimeUnit.HOURS);  } catch (  InterruptedException e) {    executor.shutdownNow();  }  reloadAttributeOptionCombos(context.getValidationResults(),categoryService);  System.out.println("Handled all " + context.getRuleXMap().size() + " rules "+ "to get "+ context.getValidationResults().size()+ " violations "+ "in "+ ((System.nanoTime() - startTime) / 1000000.0)+ " milliseconds.");  return context.getValidationResults();}  }
class C{  static <T>ForNext forComp(AnyVal<T> any,LongStream stream){  return new ForImpl(any,null);}  }
class C{  public TrustSource add(String trustedPemEncodedCAs){  if (trustedPemEncodedCAs == null) {    throw new IllegalArgumentException("PEM-encoded trusted CA String cannot be null");  }  X509Certificate[] trustedCertificates=TrustUtil.readX509CertificatesFromPem(trustedPemEncodedCAs);  return add(trustedCertificates);}  }
class C{  static public String bb2hex(byte[] bb){  StringBuilder result=new StringBuilder();  for (int i=0; i < bb.length; i++) {    result.append(String.format("%02X ",bb[i]));  }  return result.toString();}  }
class C{  public static Matrix identity(int m,int n,double value){  Matrix A=new Matrix(m,n);  double[][] X=A.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      X[i][j]=(i == j ? value : 0.0);    }  }  return A;}  }
class C{  @Override public boolean isInterrupted(){  return interrupted;}  }
class C{  public void selectionChanged(IWorkbenchPart part,ISelection sel){  selectionChanged(sel);}  }
class C{  public double likelihood(String[] doc,String tag){  double likelihood=0;  if (ntw.rowSum(tag) == 0) {    return likelihood;  }  Counter<String> nwd=new Counter<String>();  for (  String w : doc) {    nwd.inc(w,1);  }  double norm=0;  Map<String,Double> prwd=new Hashtable<String,Double>();  for (  Entry<String,Long> e : nwd) {    double prw=prw(e.getKey());    norm+=prw;    prwd.put(e.getKey(),prw);  }  for (  Entry<String,Double> e : prwd.entrySet()) {    double prw=e.getValue() / norm;    likelihood+=ptr(tag,e.getKey()) * prw * (1.0 - pcm());  }  likelihood+=ptr(tag,NOISE) * pcm();  return likelihood;}  }
class C{  public AudioEditAlbumQuery editAlbum(UserActor actor,int albumId,String title){  return new AudioEditAlbumQuery(getClient(),actor,albumId,title);}  }
class C{  @Scheduled(fixedDelay=1000) public void updateStatisticsForAllReposiotries(){  for (  Long repositoryId : statisticsScheduleRepository.findRepositoryIds()) {    updateRepositoryStatistics(repositoryId);  }}  }
class C{  protected void drawCenterText(Canvas c){  CharSequence centerText=mChart.getCenterText();  if (mChart.isDrawCenterTextEnabled() && centerText != null) {    MPPointF center=mChart.getCenterCircleBox();    MPPointF offset=mChart.getCenterTextOffset();    float x=center.x + offset.x;    float y=center.y + offset.y;    float innerRadius=mChart.isDrawHoleEnabled() && !mChart.isDrawSlicesUnderHoleEnabled() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius();    RectF holeRect=mRectBuffer[0];    holeRect.left=x - innerRadius;    holeRect.top=y - innerRadius;    holeRect.right=x + innerRadius;    holeRect.bottom=y + innerRadius;    RectF boundingRect=mRectBuffer[1];    boundingRect.set(holeRect);    float radiusPercent=mChart.getCenterTextRadiusPercent() / 100f;    if (radiusPercent > 0.0) {      boundingRect.inset((boundingRect.width() - boundingRect.width() * radiusPercent) / 2.f,(boundingRect.height() - boundingRect.height() * radiusPercent) / 2.f);    }    if (!centerText.equals(mCenterTextLastValue) || !boundingRect.equals(mCenterTextLastBounds)) {      mCenterTextLastBounds.set(boundingRect);      mCenterTextLastValue=centerText;      float width=mCenterTextLastBounds.width();      mCenterTextLayout=new StaticLayout(centerText,0,centerText.length(),mCenterTextPaint,(int)Math.max(Math.ceil(width),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false);    }    float layoutHeight=mCenterTextLayout.getHeight();    c.save();    if (Build.VERSION.SDK_INT >= 18) {      Path path=mDrawCenterTextPathBuffer;      path.reset();      path.addOval(holeRect,Path.Direction.CW);      c.clipPath(path);    }    c.translate(boundingRect.left,boundingRect.top + (boundingRect.height() - layoutHeight) / 2.f);    mCenterTextLayout.draw(c);    c.restore();    MPPointF.recycleInstance(center);    MPPointF.recycleInstance(offset);  }}  }
class C{  public static void e(String msg,Exception e){  if (LOG_ENABLE) {    Log.e(TAG,buildMsg(msg),e);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIND_POS_TOO_FAR_FROM_NPC(String value0){  return new SM_SYSTEM_MESSAGE(1300751,value0);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  @ColorInt public int extractAccentColorFrom(Context context){  return extractIntAttribute(context,ACCENT);}  }
class C{  protected int capacity(){  return _states.length;}  }
class C{  public Assignment(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_COMPLETE_STAGE_IDARENA(String value0){  return new SM_SYSTEM_MESSAGE(1400930,value0);}  }
class C{  @Override public void sendSupervisionAlive(){  Long supAliveTagId=Long.valueOf(this.equipmentConfiguration.getAliveTagId());  if (supAliveTagId == null) {    equipmentLogger.debug("sendSupervisionAlive() - No alive tag specified. Ignoring request.");    return;  }  SourceDataTag supAliveTag=null;  if (this.equipmentConfiguration.isSourceDataTagConfigured(supAliveTagId)) {    supAliveTag=getTag(supAliveTagId);  }  this.equipmentAliveSender.sendEquipmentAlive(supAliveTag);}  }
class C{  private void _writeVersion(byte[] buffer){  buffer[INDEX_VERSION]=NTP_MODE | (NTP_VERSION << 3);}  }
class C{  public void paintSelection(Graphics g0){  Graphics2D g=(Graphics2D)g0;  SelectedBlock selectedBlock=getSelectedBlock();  if (selectedBlock.isSelected()) {    Rectangle2D rect=new Rectangle2D.Double(0,getY(selectedBlock.getFirstRow() - 1),0,0);    rect.add(getSize().getWidth(),Math.min(getSize().height,getY(selectedBlock.getLastRow())));    g.setColor(highlightColorSemiTransparent);    g.fill(rect);  }}  }
class C{  public int elementAt(int index){  return data[index];}  }
class C{  private void inflateEmptyText(){  if (mEmptyText != R.string.text_empty) {    if (mEmptyLayout != R.layout.layout_empty) {      throw new RuntimeException("Cannot assign the EmptyText attribute. " + "You already overridden the entire emptyLayout, no need to specify " + "custom color or custom text message");    } else {      textEmpty.setText(getResources().getString(R.string.text_empty));    }  }}  }
class C{  public void populateFilterResolvedInfo(DimColumnResolvedFilterInfo visitableObj,FilterResolverMetadata metadata) throws FilterUnsupportedException {  DimColumnFilterInfo resolvedFilterObject=null;  List<String> evaluateResultListFinal;  try {    evaluateResultListFinal=metadata.getExpression().evaluate(null).getListAsString();  } catch (  FilterIllegalMemberException e) {    throw new FilterUnsupportedException(e);  }  try {    resolvedFilterObject=FilterUtil.getFilterValues(metadata.getTableIdentifier(),metadata.getColumnExpression(),evaluateResultListFinal,metadata.isIncludeFilter());    if (!metadata.isIncludeFilter() && null != resolvedFilterObject) {      resolvedFilterObject.getFilterList().add(CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY);      Collections.sort(resolvedFilterObject.getFilterList());    }  } catch (  QueryExecutionException e) {    throw new FilterUnsupportedException(e);  }  visitableObj.setFilterValues(resolvedFilterObject);}  }
class C{  public static void registerStandardProcessors(Model model){  model.registerProcessor(new Resolver());  model.registerProcessor(new Merger());  model.registerProcessor(new Normalizer());  model.registerProcessor(new Linter());}  }
class C{  public boolean isCompactionFlow(){  return isCompactionFlow;}  }
class C{  public void initialize(){  mTabModelSelector.getModel(false).addObserver(mTabModelObserver);}  }
class C{  private synchronized void loadRuleProperties(){  try {    if (regex != null || urlRegexp != null || invalidRule) {      return;    }    String urlRuleText=getRuleText();    if (StringUtils.startsWith(urlRuleText,MASK_WHITE_LIST)) {      urlRuleText=urlRuleText.substring(MASK_WHITE_LIST.length());    }    int optionsIndex=StringUtils.lastIndexOf(urlRuleText,OPTIONS_DELIMITER);    if (optionsIndex > -1) {      String optionsBase=urlRuleText;      urlRuleText=urlRuleText.substring(0,optionsIndex);      String options=optionsBase.substring(optionsIndex + 1);      loadOptions(options);    }    urlRuleText=toPunycode(urlRuleText);    boolean regexRule=urlRuleText.startsWith(MASK_REGEX_RULE) && urlRuleText.endsWith(MASK_REGEX_RULE);    if (regexRule) {      regex=urlRuleText.substring(MASK_REGEX_RULE.length(),urlRuleText.length() - MASK_REGEX_RULE.length());      Pattern pattern=getUrlRegexp();      if (pattern == null) {        throw new IllegalArgumentException("ruleText");      }    } else {      regex=createRegexFromRule(urlRuleText);    }  } catch (  Exception ex) {    LoggerFactory.getLogger(this.getClass()).warn("Invalid filter rule: {}\r\n",getRuleText(),ex);    invalidRule=true;  }}  }
class C{  public static final boolean raycast(Ray ray,double maxLength,Circle circle,Transform transform,Raycast raycast){  Vector2 s=ray.getStart();  Vector2 d=ray.getDirectionVector();  Vector2 ce=transform.getTransformed(circle.getCenter());  double r=circle.getRadius();  if (circle.contains(s,transform))   return false;  Vector2 sMinusC=s.difference(ce);  double a=d.dot(d);  double b=2 * d.dot(sMinusC);  double c=sMinusC.dot(sMinusC) - r * r;  double inv2a=1.0 / (2.0 * a);  double b24ac=b * b - 4 * a * c;  if (b24ac < 0.0) {    return false;  }  double sqrt=Math.sqrt(b24ac);  double t0=(-b + sqrt) * inv2a;  double t1=(-b - sqrt) * inv2a;  double t=0.0;  if (t0 < 0.0) {    if (t1 < 0.0) {      return false;    } else {      t=t1;    }  } else {    if (t1 < 0.0) {      t=t0;    } else     if (t0 < t1) {      t=t0;    } else {      t=t1;    }  }  if (maxLength > 0.0 && t > maxLength) {    return false;  }  Vector2 p=d.product(t).add(s);  Vector2 n=ce.to(p);  n.normalize();  raycast.point=p;  raycast.normal=n;  raycast.distance=t;  return true;}  }
class C{  @Override public synchronized void reset() throws IOException {  try {    in.reset();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  @Override public void startParameterEntity(String name,XMLResourceIdentifier identifier,String encoding,Augmentations augs) throws XNIException {}  }
class C{  public SimpleEventComponent(@NotNull RangedSimpleSeries<EventAction<Action,E>> data,@NotNull BufferedImage[] icons){  mData=data;  mIcons=icons;  mPaths=new ArrayList<Shape>();  mIconsToDraw=new ArrayList<EventRenderData>();  mImageWidth=mIcons[0].getWidth();  mImageHeight=mIcons[0].getHeight();}  }
class C{  public S2LatLng sub(final S2LatLng o){  return new S2LatLng(latRadians - o.latRadians,lngRadians - o.lngRadians);}  }
class C{  public static float sqr(float fValue){  return fValue * fValue;}  }
class C{  public double percentage(Constant v){  if (pcts.containsKey(v))   return pcts.get(v);  SortedSet<Constant> sorted=values();  if (v.compareTo(sorted.first()) < 0)   return 0.0;  Constant prev=null;  for (  Constant pct : sorted) {    if (prev != null && v.compareTo(prev) >= 0 && v.compareTo(pct) < 0)     return pcts.get(prev);    prev=pct;  }  return pcts.get(sorted.last());}  }
class C{  public void remove(Object key){  m_map.remove(key);}  }
class C{  protected boolean isUsedAsObject(DexBody body,int register,boolean isStatic){  MethodReference item=(MethodReference)((ReferenceInstruction)instruction).getReference();  List<? extends CharSequence> paramTypes=item.getParameterTypes();  List<Integer> regs=getUsedRegistersNums();  if (paramTypes == null)   return false;  if (!isStatic && regs.get(0) == register)   return true;  for (int i=0, j=0; i < regs.size(); i++, j++) {    if (!isStatic && i == 0) {      j--;      continue;    }    if (regs.get(i) == register && (DexType.toSoot(paramTypes.get(j).toString()) instanceof RefType))     return true;    if (DexType.isWide(paramTypes.get(j).toString()))     i++;  }  return false;}  }
class C{  public boolean more() throws JSONException {  this.next();  if (this.end()) {    return false;  }  this.back();  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200655,skillcaster,skillname);}  }
class C{  public void fromAngleAxis(float angle,Vector3f axis){  Vector3f normAxis=axis.normalize();  fromAngleNormalAxis(angle,normAxis);}  }
class C{  public InternalKey(String description,int keyCode,String category){  super(description,keyCode,category);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARTY_ENEMY_DODGE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1230220,value0,value1);}  }
class C{  public static PageFragment newInstance(@NonNull final String pageText){  PageFragment fragment=new PageFragment();  Bundle args=new Bundle();  args.putString(ARG_TEXT,pageText);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case R.id.container_nav_header:    meManagePresenter.touchMeAvatar(this);  break;case R.id.container_nav_header_button:meManagePresenter.touchMeButton(this);break;}}  }
class C{  public void append(int key,int value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=Math.max(pos + 1,mKeys.length * 2);    int[] nkeys=new int[n];    int[] nvalues=new int[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  boolean isReflex(DoubleEdgeListVertex v0,DoubleEdgeListVertex v1,DoubleEdgeListVertex v2){  Vector2 p0=v0.point;  Vector2 p1=v1.point;  Vector2 p2=v2.point;  Vector2 e1=p0.to(p1);  Vector2 e2=p1.to(p2);  double cross=e1.cross(e2);  if (cross < 0)   return true;  return false;}  }
class C{  public WaitForAllListener(int numberOfResults,AsyncFutureListener<T> listener){  this.listener=listener;  this.numberOfResults=numberOfResults;  this.results=new Future[numberOfResults];}  }
class C{  public static boolean isNullEmptyOrWhitespace(String test){  if (test == null) {    return true;  }  if (test.trim().length() == 0) {    return true;  }  return false;}  }
class C{  public GroupsEditQuery eventStartDate(Integer value){  return unsafeParam("event_start_date",value);}  }
class C{  private void clearDictionaryFromQueryModel(){  if (null != queryModel) {    Map<String,Dictionary> columnToDictionaryMapping=queryModel.getColumnToDictionaryMapping();    if (null != columnToDictionaryMapping) {      for (      Map.Entry<String,Dictionary> entry : columnToDictionaryMapping.entrySet()) {        CarbonUtil.clearDictionaryCache(entry.getValue());      }    }  }}  }
class C{  public Code39Reader(boolean usingCheckDigit,boolean extendedMode){  this.usingCheckDigit=usingCheckDigit;  this.extendedMode=extendedMode;  decodeRowResult=new StringBuilder(20);  counters=new int[9];}  }
class C{  RemoteConnectionImpl() throws RemoteException {  super();}  }
class C{  public void revertToDefaultValue(){  List<FieldConfigBase> fieldList=fieldConfigManager.getFields(null);  for (  FieldConfigBase field : fieldList) {    if (field != null) {      field.revertToDefaultValue();    }  }}  }
class C{  private void notJustAlphasToWords(WordRelation wordRelation,Item tokenItem,String tokenVal){  int index=0;  int tokenLength=tokenVal.length();  for (; index < tokenLength; index++) {    if (isTextSplitable(tokenVal,index)) {      break;    }  }  String aaa=tokenVal.substring(0,index + 1);  String bbb=tokenVal.substring(index + 1,tokenLength);  if (matches(drStPattern,aaa)) {    drStToWords(wordRelation,tokenItem,tokenVal);  } else {    if (aaa.equals("Mr")) {      tokenItem.getFeatures().setString("punc","");      wordRelation.addWord(tokenItem,"mister");    } else {      if (aaa.equals("Mrs")) {        tokenItem.getFeatures().setString("punc","");        wordRelation.addWord(tokenItem,"missus");      } else {        if (aaa.equals("Ms")) {          tokenItem.getFeatures().setString("punc","");          wordRelation.addWord(tokenItem,"miss");        } else {          FeatureSet featureSet=tokenItem.getFeatures();          featureSet.setString("nsw","nide");          tokenToWords(wordRelation,tokenItem,aaa);          tokenToWords(wordRelation,tokenItem,bbb);        }      }    }  }}  }
class C{  public static void write(RMA2Formatter rma2Formatter,IMatchBlockWithLocation matchBlock,IOutputWriter dumpWriter,IOutputWriter indexWriter) throws IOException {  matchBlock.setUId(indexWriter.getPosition());  Location location=matchBlock.getTextLocation();  if (dumpWriter != null) {    if (location == null) {      location=new Location();      matchBlock.setTextLocation(location);    }    location.setFileId(0);    location.setPosition(dumpWriter.getPosition());    dumpWriter.writeString(matchBlock.getText());    location.setSize((int)(dumpWriter.getPosition() - location.getPosition()));  }  MatchBlockRMA2Formatter matchBlockFormatter=rma2Formatter.getMatchBlockRMA2Formatter();  if (matchBlockFormatter.hasBitScore())   matchBlockFormatter.setBitScore(matchBlock.getBitScore());  if (matchBlockFormatter.hasExpected())   matchBlockFormatter.setExpected(matchBlock.getExpected());  if (matchBlockFormatter.hasPercentIdentity())   matchBlockFormatter.setPercentIdentity(matchBlock.getPercentIdentity());  if (matchBlockFormatter.hasTaxonId())   matchBlockFormatter.setTaxonId(matchBlock.getTaxonId());  if (matchBlockFormatter.hasSeedId())   matchBlockFormatter.setSeedId(matchBlock.getId(SEED));  if (matchBlockFormatter.hasCogId())   matchBlockFormatter.setCogId(matchBlock.getId(COG));  if (matchBlockFormatter.hasKeggId())   matchBlockFormatter.setKeggId(matchBlock.getId(KEGG));  if (matchBlockFormatter.hasRefSeqId())   matchBlockFormatter.setRefSeqId(new ByteByteInt(matchBlock.getRefSeqId()));  matchBlockFormatter.write(indexWriter);  if (location != null) {    indexWriter.writeChar((char)location.getFileId());    indexWriter.writeLong(location.getPosition());    indexWriter.writeInt(location.getSize());  } else {    indexWriter.writeChar((char)-1);    indexWriter.writeLong(-1);    indexWriter.writeInt(-1);  }}  }
class C{  public static InputStream toInputStream(String input,Charset encoding){  return new ByteArrayInputStream(input.getBytes(Charsets.toCharset(encoding)));}  }
class C{  public S2LatLngRect(R1Interval lat,S1Interval lng){  this.lat=lat;  this.lng=lng;}  }
class C{  private Fraction addSub(Fraction fraction,boolean isAdd){  MathUtils.checkNotNull(fraction,LocalizedCoreFormats.FRACTION);  if (numerator == 0) {    return isAdd ? fraction : fraction.negate();  }  if (fraction.numerator == 0) {    return this;  }  int d1=ArithmeticUtils.gcd(denominator,fraction.denominator);  if (d1 == 1) {    int uvp=ArithmeticUtils.mulAndCheck(numerator,fraction.denominator);    int upv=ArithmeticUtils.mulAndCheck(fraction.numerator,denominator);    return new Fraction(isAdd ? ArithmeticUtils.addAndCheck(uvp,upv) : ArithmeticUtils.subAndCheck(uvp,upv),ArithmeticUtils.mulAndCheck(denominator,fraction.denominator));  }  BigInteger uvp=BigInteger.valueOf(numerator).multiply(BigInteger.valueOf(fraction.denominator / d1));  BigInteger upv=BigInteger.valueOf(fraction.numerator).multiply(BigInteger.valueOf(denominator / d1));  BigInteger t=isAdd ? uvp.add(upv) : uvp.subtract(upv);  int tmodd1=t.mod(BigInteger.valueOf(d1)).intValue();  int d2=(tmodd1 == 0) ? d1 : ArithmeticUtils.gcd(tmodd1,d1);  BigInteger w=t.divide(BigInteger.valueOf(d2));  if (w.bitLength() > 31) {    throw new MathRuntimeException(LocalizedCoreFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY,w);  }  return new Fraction(w.intValue(),ArithmeticUtils.mulAndCheck(denominator / d1,fraction.denominator / d2));}  }
class C{  @Override public void update(String jsonState,long timeout) throws AWSIotException, AWSIotTimeoutException {  super.update(jsonState,timeout);}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  String newValue=(String)undoRedoObject.getNewValue();  fieldConfigVisitor.populateTextField(FieldIdEnum.TTF_SYMBOL,(String)newValue);}  }
class C{  @Override public void close() throws IOException {  reader.close();}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{0.1998,0.198,0.195,0.19,0.18,0.000200000000000,0.00200000000002,0.00499999999997,0.00999999999994,0.0199999999999};}  }
class C{  public DataFileFooter readDataFileFooter(String filePath,long blockOffset,long blockLength) throws IOException {  DataFileFooter dataFileFooter=new DataFileFooter();  FileHolder fileReader=null;  try {    long completeBlockLength=blockOffset + blockLength;    long footerPointer=completeBlockLength - 8;    fileReader=FileFactory.getFileHolder(FileFactory.getFileType(filePath));    long actualFooterOffset=fileReader.readLong(filePath,footerPointer);    CarbonFooterReader reader=new CarbonFooterReader(filePath,actualFooterOffset);    FileFooter footer=reader.readFooter();    dataFileFooter.setVersionId(footer.getVersion());    dataFileFooter.setNumberOfRows(footer.getNum_rows());    dataFileFooter.setSegmentInfo(getSegmentInfo(footer.getSegment_info()));    List<ColumnSchema> columnSchemaList=new ArrayList<ColumnSchema>();    List<org.apache.carbondata.format.ColumnSchema> table_columns=footer.getTable_columns();    for (int i=0; i < table_columns.size(); i++) {      columnSchemaList.add(thriftColumnSchmeaToWrapperColumnSchema(table_columns.get(i)));    }    dataFileFooter.setColumnInTable(columnSchemaList);    List<org.apache.carbondata.format.BlockletIndex> leaf_node_indices_Thrift=footer.getBlocklet_index_list();    List<BlockletIndex> blockletIndexList=new ArrayList<BlockletIndex>();    for (int i=0; i < leaf_node_indices_Thrift.size(); i++) {      BlockletIndex blockletIndex=getBlockletIndex(leaf_node_indices_Thrift.get(i));      blockletIndexList.add(blockletIndex);    }    List<org.apache.carbondata.format.BlockletInfo> leaf_node_infos_Thrift=footer.getBlocklet_info_list();    List<BlockletInfo> blockletInfoList=new ArrayList<BlockletInfo>();    for (int i=0; i < leaf_node_infos_Thrift.size(); i++) {      BlockletInfo blockletInfo=getBlockletInfo(leaf_node_infos_Thrift.get(i));      blockletInfo.setBlockletIndex(blockletIndexList.get(i));      blockletInfoList.add(blockletInfo);    }    dataFileFooter.setBlockletList(blockletInfoList);    dataFileFooter.setBlockletIndex(getBlockletIndexForDataFileFooter(blockletIndexList));  }  finally {    if (null != fileReader) {      fileReader.finish();    }  }  return dataFileFooter;}  }
class C{  @Override public void populateField(Font value){  if (setFont(value)) {    valueUpdated();  }}  }
class C{  public Ray(Vector2 start,double direction){  this(start,new Vector2(direction));}  }
class C{  public GroupsEditQuery eventFinishDate(Integer value){  return unsafeParam("event_finish_date",value);}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public UserNotFoundException(){  super();}  }
class C{  protected void prepareGraphics(Graphics2D g){  if (m_transform != null)   g.transform(m_transform);  setRenderingHints(g);}  }
class C{  private void populateStandardData(StandardData standardData){  Description description=standardData.description;  String titleString="";  String descriptionString="";  if (description != null) {    InternationalString title=description.getTitle();    if (title != null) {      titleString=title.toString();    }    InternationalString abstractDesc=description.getAbstract();    if (abstractDesc != null) {      descriptionString=abstractDesc.toString();    }  }  fieldConfigVisitor.populateTextField(FieldIdEnum.NAME,standardData.name);  fieldConfigVisitor.populateTextField(FieldIdEnum.TITLE,titleString);  fieldConfigVisitor.populateTextField(FieldIdEnum.DESCRIPTION,descriptionString);  FieldConfigBase uomFieldConfig=fieldConfigManager.get(FieldIdEnum.UOM);  if (uomFieldConfig != null) {    uomFieldConfig.updateAttributeSelection(SelectedSymbol.getInstance().isRasterSymbol());    String uomString=UnitsOfMeasure.getInstance().convert(standardData.unit);    fieldConfigVisitor.populateField(FieldIdEnum.UOM,getFilterFactory().literal(uomString));  }}  }
class C{  public void trim(int leftTrimNumberOfSample,int rightTrimNumberOfSample){  long chunkSize=waveHeader.getChunkSize();  long subChunk2Size=waveHeader.getSubChunk2Size();  long totalTrimmed=leftTrimNumberOfSample + rightTrimNumberOfSample;  if (totalTrimmed > subChunk2Size) {    leftTrimNumberOfSample=(int)subChunk2Size;  }  chunkSize-=totalTrimmed;  subChunk2Size-=totalTrimmed;  if (chunkSize >= 0 && subChunk2Size >= 0) {    waveHeader.setChunkSize(chunkSize);    waveHeader.setSubChunk2Size(subChunk2Size);    byte[] trimmedData=new byte[(int)subChunk2Size];    System.arraycopy(data,(int)leftTrimNumberOfSample,trimmedData,0,(int)subChunk2Size);    data=trimmedData;  } else {    System.err.println("Trim error: Negative length");  }}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  protected long skipNextDatagram(ByteBuffer bb) throws IOException {  long datagramDuration=bb.getLong();  int datagramSize=bb.getInt();  if (bb.position() + datagramSize > bb.limit()) {    throw new IOException("cannot skip datagram: it is not fully contained in byte buffer");  }  bb.position(bb.position() + datagramSize);  return datagramDuration;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("select series=all;");}  }
class C{  public static Quantum seconds(int interval){  return new Quantum(TimeUnit.SECONDS,interval);}  }
class C{  protected long addCompletedDownload(DownloadInfo downloadInfo){  String mimeType=downloadInfo.getMimeType();  if (TextUtils.isEmpty(mimeType))   mimeType=UNKNOWN_MIME_TYPE;  String description=downloadInfo.getDescription();  if (TextUtils.isEmpty(description))   description=downloadInfo.getFileName();  DownloadManager manager=(DownloadManager)mContext.getSystemService(Context.DOWNLOAD_SERVICE);  long downloadId=INVALID_DOWNLOAD_ID;  try {    downloadId=manager.addCompletedDownload(downloadInfo.getFileName(),description,true,mimeType,downloadInfo.getFilePath(),downloadInfo.getContentLength(),false);  } catch (  IllegalArgumentException e) {    Log.w(TAG,"Failed to add the download item to DownloadManager: ",e);    if (downloadInfo.getFilePath() != null) {      File file=new File(downloadInfo.getFilePath());      if (!file.delete()) {        Log.w(TAG,"Failed to remove the unsucessful download");      }    }    return INVALID_DOWNLOAD_ID;  }  return downloadId;}  }
class C{  public SingleFileAudioPlayer(String baseName,AudioFileFormat.Type type){  this.baseName=baseName + "." + type.getExtension();  this.outputType=type;  debug=Utilities.getBoolean("com.sun.speech.freetts.audio.AudioPlayer.debug");  outputList=new Vector();}  }
class C{  public DataSourceMetadataLoader(PhysicalTableDictionary physicalTableDictionary,DataSourceMetadataService metadataService,DruidWebService druidWebService,ObjectMapper mapper){  super(DataSourceMetadataLoader.class.getSimpleName(),SYSTEM_CONFIG.getLongProperty(DRUID_SEG_LOADER_TIMER_DELAY_KEY,0),SYSTEM_CONFIG.getLongProperty(DRUID_SEG_LOADER_TIMER_DURATION_KEY,TimeUnit.MILLISECONDS.toMillis(60000)));  this.physicalTableDictionary=physicalTableDictionary;  this.metadataService=metadataService;  this.druidWebService=druidWebService;  this.mapper=mapper;  this.failureCallback=getFailureCallback();  lastRunTimestamp=new AtomicReference<>();}  }
class C{  public static String loadFileSetToString(Set<String> ssFiles){  StringBuffer sbRes=new StringBuffer();  for (  String sCurFile : ssFiles) {    sbRes.append(loadFileToString(sCurFile)).append((char)0);  }  return sbRes.toString();}  }
class C{  public static int dip2px(Context context,float dpValue){  return (int)(dpValue * getDensity(context) + 0.5f);}  }
class C{  public boolean forEachDescending(TShortProcedure procedure){  for (int i=_pos; i-- > 0; ) {    if (!procedure.execute(_data[i])) {      return false;    }  }  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_EXCHANGE_TIME_OVER(int value0){  return new SM_SYSTEM_MESSAGE(1400555,new DescriptionId(value0));}  }
class C{  public static boolean isBookSearchUrl(String url){  return url.startsWith("http://google.com/books") || url.startsWith("http://books.google.");}  }
class C{  public void removeScrollingListener(OnWheelScrollListener listener){  scrollingListeners.remove(listener);}  }
class C{  public Timer(String name){  this.name=name;  reset();}  }
class C{  @Override public void elementDecl(String name,String contentModel,Augmentations augmentations) throws XNIException {}  }
class C{  public int skipBytes(int bytes) throws IOException {  return in.skipBytes(bytes);}  }
class C{  public AudioSetBroadcastQuery(VkApiClient client,UserActor actor){  super(client,"audio.setBroadcast",Utils.buildParametrizedType(List.class,Integer.class));  accessToken(actor.getAccessToken());}  }
class C{  public boolean equals(Object o){  if (!(o instanceof IntWritable))   return false;  IntWritable other=(IntWritable)o;  return this.value == other.value;}  }
class C{  private void checkApproximateTable(int n,int m,double criticalValue,double alpha,double epsilon){  final KolmogorovSmirnovTest test=new KolmogorovSmirnovTest();  Assert.assertEquals(alpha,test.approximateP(criticalValue,n,m),epsilon);}  }
class C{  @Override public void close() throws IOException {  super.close();  closed=true;}  }
class C{  static public byte[] decode(char[] data){  int tempLen=data.length;  for (  char element : data) {    if ((element > 255) || codes[element] < 0)     --tempLen;  }  int len=(tempLen / 4) * 3;  if ((tempLen % 4) == 3)   len+=2;  if ((tempLen % 4) == 2)   len+=1;  byte[] out=new byte[len];  int shift=0;  int accum=0;  int index=0;  for (  char element : data) {    int value=(element > 255) ? -1 : codes[element];    if (value >= 0) {      accum<<=6;      shift+=6;      accum|=value;      if (shift >= 8) {        shift-=8;        out[index++]=(byte)((accum >> shift) & 0xff);      }    }  }  if (index != out.length) {    throw new Error("Miscalculated data length (wrote " + index + " instead of "+ out.length+ ")");  }  return out;}  }
class C{  public static InvocationConstraint create(Collection c){  try {    return reduce((InvocationConstraint[])c.toArray(new InvocationConstraint[c.size()]),false);  } catch (  ArrayStoreException e) {    throw new IllegalArgumentException("element of collection is not an InvocationConstraint");  }}  }
class C{  public void requestUpdate(){  mRecomputePosition=true;  mLayout.requestUpdate();}  }
class C{  public static StateListDrawable toStateListDrawable(int normalColor,int pressedColor,int focusedColor,int unableColor){  StateListDrawable drawable=new StateListDrawable();  Drawable normal=new ColorDrawable(normalColor);  Drawable pressed=new ColorDrawable(pressedColor);  Drawable focused=new ColorDrawable(focusedColor);  Drawable unable=new ColorDrawable(unableColor);  drawable.addState(new int[]{android.R.attr.state_pressed,android.R.attr.state_enabled},pressed);  drawable.addState(new int[]{android.R.attr.state_enabled,android.R.attr.state_focused},focused);  drawable.addState(new int[]{android.R.attr.state_enabled},normal);  drawable.addState(new int[]{android.R.attr.state_focused},focused);  drawable.addState(new int[]{android.R.attr.state_window_focused},unable);  drawable.addState(new int[]{},normal);  return drawable;}  }
class C{  public int available() throws IOException {  int temp=stream.available();  if ((frameLength != AudioSystem.NOT_SPECIFIED) && ((temp / frameSize) > (frameLength - framePos))) {    return (int)(frameLength - framePos) * frameSize;  } else {    return temp;  }}  }
class C{  public Vector2(double direction){  this.x=Math.cos(direction);  this.y=Math.sin(direction);}  }
class C{  public static void displayMessages(NodeInterface destinationTreeNode,TransferredData transferredData,int action){  if ((destinationTreeNode == null) || (transferredData == null)) {    return;  }  String actionString="???";  if (action == TransferHandler.MOVE) {    actionString="Moved";  } else   if (action == TransferHandler.COPY) {    actionString="Copied";  }  String destinationString=destinationTreeNode.getHandler().getDestinationText(destinationTreeNode);  for (int index=0; index < transferredData.getDataListSize(); index++) {    NodeInterface nodeToTransfer=(NodeInterface)transferredData.getTreePath(index).getLastPathComponent();    SelectedFiles selectedFiles=nodeToTransfer.getHandler().getSLDContents(nodeToTransfer);    for (    SLDDataInterface sldData : selectedFiles.getSldData()) {      ConsoleManager.getInstance().information(DataFlavourManager.class,String.format("%s %s -> %s",actionString,sldData.getLayerName(),destinationString));    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ACCUSE_INFO_4_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1400074,value0);}  }
class C{  public void action(){  SimilarityArray saRes=null;  try {    ndDoc1=new SimpleTextDocument(WordNGramSize_Min,WordNGramSize_Max,Word_Dmax);    ndNDoc1=new NGramGaussNormDocument(CharacterNGramSize_Min,CharacterNGramSize_Max,Character_Dmax,CharacterNGramSize_Min,CharacterNGramSize_Max);    if (DoWordNGrams)     ndDoc1.setDataString(Doc1);    if (DoCharNGrams)     ndNDoc1.setDataString(Doc1);    StandardDocumentComparator sdcComparator=new StandardDocumentComparator();    CachedDocumentComparator sdcNComparator=new CachedDocumentComparator();    SimpleTextDocument ndDoc2=null;    NGramDocument ndNDoc2=null;    if (DoWordNGrams) {      ndDoc2=new SimpleTextDocument(WordNGramSize_Min,WordNGramSize_Max,Word_Dmax);      ndDoc2.setDataString(Doc2);    }    if (DoCharNGrams) {      ndNDoc2=new NGramGaussNormDocument(CharacterNGramSize_Min,CharacterNGramSize_Max,Character_Dmax,CharacterNGramSize_Min,CharacterNGramSize_Max);      ndNDoc2.setDataString(Doc2);    }    saRes=new SimilarityArray();    GraphSimilarity sSimil=null;    if (DoWordNGrams) {      try {        sSimil=sdcComparator.getSimilarityBetween(ndDoc1,ndDoc2);      } catch (      InvalidClassException ex) {synchronized (System.err) {          ex.printStackTrace(System.err);          return;        }      }      saRes.SimpleTextOverallSimil=sSimil;      saRes.SimpleTextGraphSimil=sdcComparator.getGraphSimilarity();      saRes.SimpleTextHistoSimil=sdcComparator.getHistogramSimilarity();    }    GraphSimilarity sSimil2=null;    if (DoCharNGrams) {      try {        sSimil2=sdcNComparator.getSimilarityBetween(ndNDoc1,ndNDoc2);      } catch (      InvalidClassException ex) {synchronized (System.err) {          ex.printStackTrace(System.err);          return;        }      }      saRes.NGramOverallSimil=sSimil2;      saRes.NGramGraphSimil=sdcNComparator.getGraphSimilarity();      saRes.NGramHistoSimil=sdcNComparator.getHistogramSimilarity();    }synchronized (myAgent) {      ((NGramDocumentComparatorAgent)myAgent).setResult(saRes,ID);    }    if (!Silent) synchronized (System.err) {      System.err.println(myAgent.getName() + ":" + "Calculation complete.");    }  }  finally {synchronized (myAgent) {      ((NGramDocumentComparatorAgent)myAgent).setResult(saRes,ID);    }  }}  }
class C{  private static void generateGraph(IDataProcessStatus dataProcessTaskStatus,SchemaInfo info,String tableName,String partitionID,CarbonDataLoadSchema schema,String factStoreLocation,List<LoadMetadataDetails> loadMetadataDetails) throws GraphGeneratorException {  DataLoadModel model=new DataLoadModel();  model.setCsvLoad(null != dataProcessTaskStatus.getCsvFilePath() || null != dataProcessTaskStatus.getFilesToProcess());  model.setSchemaInfo(info);  model.setTableName(dataProcessTaskStatus.getTableName());  model.setTaskNo("1");  model.setBlocksID(dataProcessTaskStatus.getBlocksID());  model.setFactTimeStamp(readCurrentTime());  model.setEscapeCharacter(dataProcessTaskStatus.getEscapeCharacter());  model.setQuoteCharacter(dataProcessTaskStatus.getQuoteCharacter());  model.setCommentCharacter(dataProcessTaskStatus.getCommentCharacter());  if (null != loadMetadataDetails && !loadMetadataDetails.isEmpty()) {    model.setLoadNames(CarbonDataProcessorUtil.getLoadNameFromLoadMetaDataDetails(loadMetadataDetails));    model.setModificationOrDeletionTime(CarbonDataProcessorUtil.getModificationOrDeletionTimesFromLoadMetadataDetails(loadMetadataDetails));  }  boolean hdfsReadMode=dataProcessTaskStatus.getCsvFilePath() != null && dataProcessTaskStatus.getCsvFilePath().startsWith("hdfs:");  int allocate=null != dataProcessTaskStatus.getCsvFilePath() ? 1 : dataProcessTaskStatus.getFilesToProcess().size();  String outputLocation=CarbonProperties.getInstance().getProperty("store_output_location","../carbon-store/system/carbon/etl");  GraphGenerator generator=new GraphGenerator(model,hdfsReadMode,partitionID,factStoreLocation,allocate,schema,"0",outputLocation);  generator.generateGraph();}  }
class C{  public void convert(FileData fileData){  if (fileData == null) {    return;  }  RegisterClasses.initialise(data);  System.out.println("Reading MXD : " + fileData.getInputFile().getAbsolutePath());  SystemWin sWin=new SystemWin();  Pointer obj=sWin.getDesktopWindow();  int hWnd=obj.getInt(0);  try {    System.out.println("Opening mxd...");    IMapDocument mapDocument=new MapDocument();    String password=null;    mapDocument.open(fileData.getInputFile().getAbsolutePath(),password);    IPageLayout iPageLayout=mapDocument.getPageLayout();    IActiveView activeView=(IActiveView)iPageLayout;    IMap iMap=activeView.getFocusMap();    activeView.activate(hWnd);    JsonArray jsonLayerlist=new JsonArray();    int count=1;    int total=0;    IEnumLayer layerEnum=iMap.getLayers(null,true);    ILayer layer=layerEnum.next();    while (layer != null) {      layer=layerEnum.next();      total++;    }    layerEnum=iMap.getLayers(null,true);    layer=layerEnum.next();    ParseLayer parseLayer=new ParseLayer(data);    while (layer != null) {      parseLayer.convertLayer(count,total,jsonLayerlist,layer,(Map)iMap);      layer=layerEnum.next();      count++;    }    JsonObject jsonMXDObject=new JsonObject();    jsonMXDObject.addProperty("mxd",mapDocument.getDocumentFilename());    jsonMXDObject.add("layers",jsonLayerlist);    outputJSON(jsonMXDObject,fileData.getOutputFile());    System.out.println("Written JSON file : " + fileData.getOutputFile().getAbsolutePath());  } catch (  UnknownHostException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public PointsToSet reachingObjects(Local l){  VarNode n=findLocalVarNode(l);  if (n == null) {    return EmptyPointsToSet.v();  }  return n.getP2Set();}  }
class C{  public boolean evalPermissions(DispatchContext dctx,Map<String,? extends Object> context){  if (this.containsPermissions()) {    for (    ModelPermGroup group : this.permissionGroups) {      if (!group.evalPermissions(dctx,context)) {        return false;      }    }    return true;  } else {    return true;  }}  }
class C{  public static final Object cast(final Object value,final String className){  Object result=null;  if (value != null && className != null && !className.isEmpty()) {    try {      Class<?> type=getType(className);      if (type != null) {        if (type.equals(String.class)) {          result=value.toString();        } else {          result=castToType(value,type);        }      }      if (result == null) {        LOG.error("Conversion error: Could not cast input value [" + value + "] of type "+ value.getClass().getName()+ " to resulting type "+ className);      }    } catch (    ClassCastException cce) {      LOG.error("Conversion error: {}",cce.getMessage());      result=null;    }  }  return result;}  }
class C{  public MatchQuery resolveToQuery(MatchQuery inputQuery,boolean materialise){  Query query=new Query(inputQuery,graph);  if (!query.isRuleResolvable())   return inputQuery;  QueryAnswers answers=resolveQuery(query,materialise);  return new ReasonerMatchQuery(inputQuery,graph,answers);}  }
class C{  private boolean isDirect(Proxy proxy){  return Proxy.NO_PROXY.equals(proxy);}  }
class C{  public void populateExpression(String wellKnownName){  if (wellKnownName != null) {    fieldConfigVisitor.populateTextField(FieldIdEnum.TTF_SYMBOL,wellKnownName);  }}  }
class C{  public boolean isPerLogicalSubjectLockObject(boolean isEvictable){  if (isEvictable)   throw new RuntimeException("AllInCacheLockManager::no evictable object");  return true;}  }
class C{  @Override public void warning(String domain,String key,XMLParseException exception) throws XNIException {  fDOMError.fSeverity=DOMError.SEVERITY_WARNING;  fDOMError.fException=exception;  fDOMError.fType=key;  fDOMError.fRelatedData=fDOMError.fMessage=exception.getMessage();  DOMLocatorImpl locator=fDOMError.fLocator;  if (locator != null) {    locator.fColumnNumber=exception.getColumnNumber();    locator.fLineNumber=exception.getLineNumber();    locator.fUtf16Offset=exception.getCharacterOffset();    locator.fUri=exception.getExpandedSystemId();    locator.fRelatedNode=fCurrentNode;  }  if (fDomErrorHandler != null) {    fDomErrorHandler.handleError(fDOMError);  }}  }
class C{  private void closeDialog(boolean okButton){  okButtonPressed=okButton;  DataSourceInterface dataSource=DataSourceFactory.getDataSource();  if (dataSource != null) {    dataSource.removeListener(this);  }  setVisible(false);}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  return newInstance(className,cl,doFallback,false);}  }
class C{  public static <T>Iterable<T> Iterable(T object){  return null;}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  public PhotosSaveMessagesPhotoQuery(VkApiClient client,Actor actor,String photo){  super(client,"photos.saveMessagesPhoto",Utils.buildParametrizedType(List.class,Photo.class));  accessToken(actor.getAccessToken());  photo(photo);}  }
class C{  private static void applyHolmBonferroniCorrection(PhyloTree tree){  List<Pair<Double,Integer>> upPairs=new LinkedList<>();  List<Pair<Double,Integer>> downPairs=new LinkedList<>();  int countUp=0;  int countDown=0;  for (Node v=tree.getFirstNode(); v != null; v=v.getNext()) {    NodeData vd=(NodeData)v.getData();    if (vd.getDownPValue() != Double.NaN && vd.getDownPValue() != -1 && v.getOutDegree() > 1) {      downPairs.add(new Pair<>(vd.getDownPValue(),countDown++));    }    if (vd.getUpPValue() != Double.NaN && vd.getUpPValue() != -1 && v.getInDegree() > 0) {      upPairs.add(new Pair<>(vd.getUpPValue(),countUp++));    }  }  Pair[] upArray=upPairs.toArray(new Pair[upPairs.size()]);  Pair[] downArray=downPairs.toArray(new Pair[downPairs.size()]);  Arrays.sort(upArray,new CompareFirst());  for (int i=0; i < upArray.length; i++) {    Pair pair=upArray[i];    double uncorrected=pair.getFirstDouble();    double bonferroni=Math.min(1,uncorrected * countUp);    double bholm=Math.min(1,pair.getFirstDouble() * (i + 1));    if (false) {      System.err.println("UPv: uncorr=" + uncorrected + " BHolm="+ bholm+ " Bonferroni="+ bonferroni);    }    pair.setFirst(bholm);  }  Arrays.sort(upArray,new CompareSecond());  Arrays.sort(downArray,new CompareFirst());  for (int i=0; i < downArray.length; i++) {    Pair pair=downArray[i];    double uncorrected=pair.getFirstDouble();    double bonferroni=Math.min(1,uncorrected * countUp);    double bholm=Math.min(1,pair.getFirstDouble() * (i + 1));    if (false) {      System.err.println("DPv: uncorr=" + uncorrected + " BHolm="+ bholm+ " Bonferroni="+ bonferroni);    }    pair.setFirst(bholm);  }  Arrays.sort(downArray,new CompareSecond());  countUp=0;  countDown=0;  for (Node v=tree.getFirstNode(); v != null; v=v.getNext()) {    NodeData vd=(NodeData)v.getData();    if (vd.getDownPValue() != Double.NaN && vd.getDownPValue() != -1 && v.getOutDegree() > 1) {      if (downArray[countDown].getSecondInt() != countDown)       System.err.println("Holm-Bonferroni failed, illegal ordering");      vd.setDownPValue(downArray[countDown].getFirstDouble());      countDown++;    }    if (vd.getUpPValue() != Double.NaN && vd.getUpPValue() != -1 && v.getInDegree() > 0) {      if (upArray[countUp].getSecondInt() != countUp)       System.err.println("Holm-Bonferroni failed, illegal ordering");      vd.setUpPValue(upArray[countUp].getFirstDouble());      countUp++;    }  }}  }
class C{  private boolean loadGsExtLoggingPropertiesFileFromClasspath(){  return loadLoggingFileFromClasspath(CommonSystemProperties.GS_EXT_LOGGING_CONFIG_FILE_PATH);}  }
class C{  public boolean hasForm(){  return htmlCode != null && !htmlCode.trim().isEmpty();}  }
class C{  public AuthSignupQuery sex(AppsSignupSex value){  return unsafeParam("sex",value);}  }
class C{  public static String fromInternalForm(String internalForm){  if (internalForm.charAt(0) == '[')   return internalForm;  return 'L' + internalForm + ';';}  }
class C{  public static PrettyPrint singleLine(){  return new PrettyPrint(null);}  }
class C{  public void reset(){  ((SchemaParsingConfig)config).reset();}  }
class C{  public static TrustSource defaultTrustSource(){  return DEFAULT_TRUST_SOURCE;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_protect_PROTECT_SKILL_A_to_B(int num0,String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201176,num0,skilltarget,skillcaster,skillname);}  }
class C{  @SuppressLint("WrongViewCast") @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  Utils.setActionBarSubtitleEllipsizeMiddle(this);  mSpectaculumView=(SpectaculumView)findViewById(R.id.spectaculum);  mProgressIndicator=(ProgressBar)findViewById(R.id.progress);  mEffectManager=new EffectManager(this,R.id.parameterlist,mSpectaculumView);  mEffectManager.addEffects();  showProgressIndicator();}  }
class C{  @Override public int hashCode(){  int len=dictionaryKey.length;  int result=1;  for (int j=0; j < len; j++) {    result=31 * result + dictionaryKey[j];  }  for (  byte[] directSurrogateValue : noDictionaryKeys) {    for (int i=0; i < directSurrogateValue.length; i++) {      result=31 * result + directSurrogateValue[i];    }  }  for (  byte[] complexTypeKey : complexTypesKeys) {    for (int i=0; i < complexTypeKey.length; i++) {      result=31 * result + complexTypeKey[i];    }  }  return result;}  }
class C{  private boolean clipPathSupported(){  return Utils.getSDKInt() >= 18;}  }
class C{  void insertingNode(NodeImpl node,boolean replace){}  }
class C{  public static Spawn handle(EntityLivingBase living){  Spawn event=new Spawn(living);  OpenModLoader.getEventBus().post(event);  return event;}  }
class C{  public boolean isCurrentSelected(){  return isCurrentSet() && toSelectIds.contains(currentId);}  }
class C{  public ExceptionWithContext(Throwable cause,String message,Object... formatArgs){  super((message != null) ? formatMessage(message,formatArgs) : (cause != null) ? cause.getMessage() : null,cause);  if (cause instanceof ExceptionWithContext) {    String ctx=((ExceptionWithContext)cause).context.toString();    context=new StringBuffer(ctx.length() + 200);    context.append(ctx);  } else {    context=new StringBuffer(200);  }}  }
class C{  public HornMelodiesCursor queryMelodiesFromNotes(String notes){  QueryHelper qh=new QueryHelper();  qh.Distinct=false;  qh.Table=S.TABLE_HORN_MELODIES;  qh.Columns=null;  qh.Selection=S.COLUMN_HORN_MELODIES_NOTES + " = ?";  qh.SelectionArgs=new String[]{notes};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new HornMelodiesCursor(wrapHelper(qh));}  }
class C{  public void reportNoop(Console console,String message) throws VoidOperationException {  if (ignoreNoop) {    console.warn(message);  } else {    throw new VoidOperationException(message);  }}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  private void justify(){  if (adapter == null) {    return;  }  lastScrollY=0;  int offset=scrollingOffset;  int itemHeight=getItemHeight();  boolean needToIncrease=offset > 0 ? currentItem < adapter.getItemsCount() : currentItem > 0;  if ((isCyclic || needToIncrease) && Math.abs((float)offset) > (float)itemHeight / 2) {    if (offset < 0)     offset+=itemHeight + MIN_DELTA_FOR_SCROLLING; else     offset-=itemHeight + MIN_DELTA_FOR_SCROLLING;  }  if (Math.abs(offset) > MIN_DELTA_FOR_SCROLLING) {    scroller.startScroll(0,0,0,offset,SCROLLING_DURATION);    setNextMessage(MESSAGE_JUSTIFY);  } else {    finishScrolling();  }}  }
class C{  public static LatLng translatePoint(LatLng point,double distance,double bearing){  distance=distance / 1000d;  double lat=Math.toRadians(point.latitude);  double lng=Math.toRadians(point.longitude);  bearing=Math.toRadians(bearing);  double Lat2=Math.asin((Math.sin(lat) * Math.cos(distance / EARTH)) + (Math.cos(lat) * Math.sin(distance / EARTH) * Math.cos(bearing)));  double Long2=lng + Math.atan2(Math.sin(bearing) * Math.sin(distance / EARTH) * Math.cos(lat),Math.cos(distance / EARTH) - (Math.sin(lat) * Math.sin(Lat2)));  Lat2=Math.toDegrees(Lat2);  Long2=Math.toDegrees(Long2);  return new LatLng(Lat2,Long2);}  }
class C{  public void add(RequestFilter filter){  filters.add(filter);}  }
class C{  @Override public boolean equals(Object o){  return this == o || o != null && o instanceof Row && Objects.equals(getMap(),((Row)o).getMap());}  }
class C{  public int print(Graphics gc0,PageFormat format,int pagenumber) throws PrinterException {  if (pagenumber == 0) {    Graphics2D gc=((Graphics2D)gc0);    Dimension dim=frame.getContentPane().getSize();    int image_w=dim.width;    int image_h=dim.height;    double paper_x=format.getImageableX() + 1;    double paper_y=format.getImageableY() + 1;    double paper_w=format.getImageableWidth() - 2;    double paper_h=format.getImageableHeight() - 2;    double scale_x=paper_w / image_w;    double scale_y=paper_h / image_h;    double scale=(scale_x <= scale_y) ? scale_x : scale_y;    double shift_x=paper_x + (paper_w - scale * image_w) / 2.0;    double shift_y=paper_y + (paper_h - scale * image_h) / 2.0;    gc.translate(shift_x,shift_y);    gc.scale(scale,scale);    gc.setStroke(new BasicStroke(1.0f));    gc.setColor(Color.BLACK);    frame.getContentPane().paint(gc);    return Printable.PAGE_EXISTS;  } else   return Printable.NO_SUCH_PAGE;}  }
class C{  public int length(){  return Histogram.length() + Graph.length();}  }
class C{  @Override public double[] makeCumulativeTestPoints(){  return new double[]{0.00664355180993,0.0454328283309,0.0981162737374,0.176713524579,0.321946865392,10.5115496887,7.4976304671,6.23205600701,5.23968436955,4.2079028257};}  }
class C{  public int equivHashCode(){  return hashCode();}  }
class C{  private void checkDuplicateBindings(Collection<NewDependencyInfo> deps){  SetMultimap<NewBindingKey,NewDependencyInfo> map=NewDependencyCollector.collectionToMultimap(deps);  for (  NewBindingKey key : map.keySet()) {    Set<NewDependencyInfo> dependencies=map.get(key);    if (dependencies.size() == 1) {      continue;    }    for (    NewDependencyInfo info : dependencies) {      if (info.isUnique()) {        messager.printMessage(Kind.ERROR,String.format("Key %s has multiple bindings including unique type one(s). Bindings found: %s",key,dependencies));        break;      }    }  }}  }
class C{  public void checkBinderAllowed(){  int uid=Binder.getCallingUid();  String bindingPackage=getPackageManager().getNameForUid(uid);  String thisPackage=getPackageName();  int check=getPackageManager().checkSignatures(thisPackage,bindingPackage);  if (check < 0) {    throw new IllegalStateException("Cannot bind to service from package, wrong signatures: " + bindingPackage + ", returned: "+ check);  }}  }
class C{  private void internal_updateSymbolEnumField(Map<String,String> options,FieldIdEnum field,String key){  ValueComboBoxData value=fieldConfigVisitor.getComboBox(field);  Object object=getDefaultFieldValue(field);  String defaultValue=null;  if (object instanceof TextSymbolizer.PolygonAlignOptions) {    TextSymbolizer.PolygonAlignOptions option=(PolygonAlignOptions)object;    defaultValue=option.toString();  } else {    defaultValue=(String)object;  }  if (defaultValue == null) {    ConsoleManager.getInstance().error(this,"Failed to find default for field : " + field);  } else   if (value.getKey().compareToIgnoreCase(defaultValue) != 0) {    options.put(key,value.getKey());  }}  }
class C{  static public void syncFormattingFromViewer2Summary(MainViewer viewer,DataTable table){  Document doc=viewer.getDir().getDocument();  if (viewer.getDirtyNodeIds().size() > 0) {    StringBuilder buf=new StringBuilder();    for (    Integer taxId : viewer.getDirtyNodeIds()) {      Node v=viewer.getTaxId2Node(taxId);      if (v != null) {        String format=viewer.getNV(v).toString(false);        buf.append(taxId).append(":").append(format);      }    }    table.setNodeFormats(ClassificationType.Taxonomy.toString(),buf.toString());  } else   table.setNodeFormats(ClassificationType.Taxonomy.toString(),null);  if (viewer.getDirtyEdgeIds().size() > 0) {    StringBuilder buf=new StringBuilder();    for (    Pair<Integer,Integer> pair : viewer.getDirtyEdgeIds()) {      Node v=viewer.getTaxId2Node(pair.getFirst());      Node w=viewer.getTaxId2Node(pair.getSecond());      if (v != null && w != null) {        Edge e=v.getCommonEdge(w);        if (e != null) {          String format=viewer.getEV(e).toString(false);          buf.append(pair.getFirst()).append(",").append(pair.getSecond()).append(":").append(format);        }      }    }    table.setEdgeFormats(ClassificationType.Taxonomy.toString(),buf.toString());  } else   table.setEdgeFormats(ClassificationType.Taxonomy.toString(),null);  table.setNodeStyle(ClassificationType.Taxonomy.toString(),viewer.getNodeDrawer().getStyle().toString());  Set<Integer> collapsed=new HashSet<>();  collapsed.addAll(viewer.getCollapsedIds());  table.setCollapsed(ClassificationType.Taxonomy.toString(),collapsed);}  }
class C{  public InstanceKey(Local local,Stmt stmt,SootMethod owner,LocalMustAliasAnalysis lmaa,LocalMustNotAliasAnalysis lmna){  this.assignedLocal=local;  this.owner=owner;  this.stmtAfterAssignStmt=stmt;  this.lmaa=lmaa;  this.lnma=lmna;  PointsToAnalysis pta=Scene.v().getPointsToAnalysis();  this.pts=new PointsToSetEqualsWrapper((EqualsSupportingPointsToSet)pta.reachingObjects(local));  this.hashCode=computeHashCode();}  }
class C{  private void addInitialPeer(){  try {    addPeer(null,new InetSocketAddress(InetAddress.getByName(CONNECTABLE_ADDRESS),DEFAULT_PORT),Peer.OUTGOING);  } catch (  UnknownHostException e) {    e.printStackTrace();  }}  }
class C{  public static boolean isExtension(String filename,String[] extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.length == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  public void success(){  sendPluginResult(new PluginResult(PluginResult.Status.OK));}  }
class C{  public DocumentQuery addCondition(DocumentCondition condition){  this.conditions.add(Objects.requireNonNull(condition,"condition is required"));  return this;}  }
class C{  public void put(int childRow,int parentRow){  if (childRow >= m_childToParent.getRowCount())   m_childToParent.setMaximumRow(childRow + 1);  m_childToParent.setInt(parentRow,childRow);  m_parentToChild.put(parentRow,childRow);}  }
class C{  @CancelResult public int cancelAll(){  if (!mDriver.isAvailable()) {    return CANCEL_RESULT_NO_DRIVER_AVAILABLE;  }  return mDriver.cancelAll();}  }
class C{  protected boolean nodeCheck(Node n,boolean throwException){  if (!n.isValid()) {    if (throwException) {      throw new IllegalArgumentException("Node must be valid.");    }    return false;  }  Graph ng=n.getGraph();  if (ng != this && ng.m_spanning != this) {    if (throwException) {      throw new IllegalArgumentException("Node must be part of this Graph.");    }    return false;  }  return true;}  }
class C{  public SAXParser(){  this(null,null);}  }
class C{  private AuthTicket internalSendServerRequests(AuthTicket authTicket,ServerRequest... serverRequests) throws RemoteServerException, LoginFailedException {  AuthTicket newAuthTicket=authTicket;  if (serverRequests.length == 0) {    return authTicket;  }  RequestEnvelope.Builder builder=RequestEnvelope.newBuilder();  resetBuilder(builder,authTicket);  for (  ServerRequest serverRequest : serverRequests) {    builder.addRequests(serverRequest.getRequest());  }  Signature.setSignature(api,builder);  ByteArrayOutputStream stream=new ByteArrayOutputStream();  RequestEnvelope request=builder.build();  try {    request.writeTo(stream);  } catch (  IOException e) {    Log.wtf(TAG,"Failed to write request to bytearray ouput stream. This should never happen",e);  }  RequestBody body=RequestBody.create(null,stream.toByteArray());  okhttp3.Request httpRequest=new okhttp3.Request.Builder().url(apiEndpoint).post(body).build();  try (Response response=client.newCall(httpRequest).execute()){    if (response.code() != 200) {      throw new RemoteServerException("Got a unexpected http code : " + response.code());    }    ResponseEnvelope responseEnvelop;    try (InputStream content=response.body().byteStream()){      responseEnvelop=ResponseEnvelope.parseFrom(content);    } catch (    IOException e) {      throw new RemoteServerException("Received malformed response : " + e);    }    if (responseEnvelop.getApiUrl() != null && responseEnvelop.getApiUrl().length() > 0) {      apiEndpoint="https://" + responseEnvelop.getApiUrl() + "/rpc";    }    if (responseEnvelop.hasAuthTicket()) {      newAuthTicket=responseEnvelop.getAuthTicket();    }    if (responseEnvelop.getStatusCode() == 102) {      throw new LoginFailedException(String.format("Invalid Auth status code recieved, token not refreshed? %s %s",responseEnvelop.getApiUrl(),responseEnvelop.getError()));    } else     if (responseEnvelop.getStatusCode() == 53) {      return internalSendServerRequests(newAuthTicket,serverRequests);    } else     if (responseEnvelop.getStatusCode() == 3) {      throw new RemoteServerException("Your account may be banned! please try from the official client.");    }    int count=0;    for (    ByteString payload : responseEnvelop.getReturnsList()) {      ServerRequest serverReq=serverRequests[count];      if (payload != null) {        serverReq.handleData(payload);      }      count++;    }  } catch (  IOException e) {    throw new RemoteServerException(e);  }catch (  RemoteServerException e) {    throw e;  }  return newAuthTicket;}  }
class C{  public WildcardFileFilter(String[] wildcards,IOCase caseSensitivity){  if (wildcards == null) {    throw new IllegalArgumentException("The wildcard array must not be null");  }  this.wildcards=new String[wildcards.length];  System.arraycopy(wildcards,0,this.wildcards,0,wildcards.length);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public InfoSection loadInfoSection() throws IOException {  try (InputReader reader=new InputReader(getFile(),null,null,true)){    readHeader(reader);    infoSection.read(reader);  }   return infoSection;}  }
class C{  public static Map<String,Object> returnErrorService(DispatchContext dctx,Map<String,?> context){  Locale locale=(Locale)context.get("locale");  return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonServiceReturnError",locale));}  }
class C{  private void beforeSave(DataSupport baseObj,List<Field> supportedFields,ContentValues values) throws SecurityException, IllegalArgumentException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {  putFieldsValue(baseObj,supportedFields,values);  if (!ignoreAssociations) {    putForeignKeyValue(values,baseObj);  }}  }
class C{  protected void drawEntryLabel(Canvas c,String label,float x,float y){}  }
class C{  public static VectorTile.Tile.GeomType toGeomType(Geometry geometry){  VectorTile.Tile.GeomType result=VectorTile.Tile.GeomType.UNKNOWN;  if (geometry instanceof Point || geometry instanceof MultiPoint) {    result=VectorTile.Tile.GeomType.POINT;  } else   if (geometry instanceof LineString || geometry instanceof MultiLineString) {    result=VectorTile.Tile.GeomType.LINESTRING;  } else   if (geometry instanceof Polygon || geometry instanceof MultiPolygon) {    result=VectorTile.Tile.GeomType.POLYGON;  }  return result;}  }
class C{  public List<String> concernPackages(){  return null;}  }
class C{  @Override public long blocksAccessed(){  return p.blocksAccessed();}  }
class C{  public MailPreviewForm(){  initComponents();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set showAminoAcids=");  boolean value=np.getBoolean();  np.matchIgnoreCase(";");  AlignmentViewer viewer=(AlignmentViewer)getViewer();  viewer.setShowAminoAcids(value);}  }
class C{  public static InstructionFragment newInstance(Recipe recipe,int sectionNumber){  InstructionFragment fragment=new InstructionFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public boolean update(final TagValueUpdate tagValueUpdate){  Tag clone=null;  boolean valid=false;  updateTagLock.writeLock().lock();  try {    valid=isValidUpdate(tagValueUpdate);    if (valid) {      doUpdateValues(tagValueUpdate);      clone=this.clone();    }  }  finally {    updateTagLock.writeLock().unlock();  }  if (clone != null) {    notifyListeners(clone);  }  return valid;}  }
class C{  private void createClassDecl(polyglot.ast.ClassDecl cDecl){  if (!cDecl.type().isTopLevel()) {    SootClass outerClass=((soot.RefType)Util.getSootType(cDecl.type().outer())).getSootClass();    if (InitialResolver.v().getInnerClassInfoMap() == null) {      InitialResolver.v().setInnerClassInfoMap(new HashMap<SootClass,InnerClassInfo>());    }    InitialResolver.v().getInnerClassInfoMap().put(sootClass,new InnerClassInfo(outerClass,cDecl.name(),InnerClassInfo.NESTED));    sootClass.setOuterClass(outerClass);  }  polyglot.types.Flags flags=cDecl.flags();  addModifiers(flags,cDecl);  if (cDecl.superClass() == null) {    soot.SootClass superClass=soot.Scene.v().getSootClass("java.lang.Object");    sootClass.setSuperclass(superClass);  } else {    sootClass.setSuperclass(((soot.RefType)Util.getSootType(cDecl.superClass().type())).getSootClass());    if (((polyglot.types.ClassType)cDecl.superClass().type()).isNested()) {      polyglot.types.ClassType superType=(polyglot.types.ClassType)cDecl.superClass().type();      Util.addInnerClassTag(sootClass,sootClass.getName(),((soot.RefType)Util.getSootType(superType.outer())).toString(),superType.name(),Util.getModifier(superType.flags()));    }  }  Iterator interfacesIt=cDecl.interfaces().iterator();  while (interfacesIt.hasNext()) {    polyglot.ast.TypeNode next=(polyglot.ast.TypeNode)interfacesIt.next();    sootClass.addInterface(((soot.RefType)Util.getSootType(next.type())).getSootClass());  }  findReferences(cDecl);  createClassBody(cDecl.body());  handleFieldInits();  if ((staticFieldInits != null) || (staticInitializerBlocks != null)) {    soot.SootMethod clinitMethod;    if (!sootClass.declaresMethod("<clinit>",new ArrayList(),soot.VoidType.v())) {      clinitMethod=new soot.SootMethod("<clinit>",new ArrayList(),soot.VoidType.v(),soot.Modifier.STATIC,new ArrayList<SootClass>());      sootClass.addMethod(clinitMethod);      PolyglotMethodSource mSource=new PolyglotMethodSource();      mSource.setJBB(InitialResolver.v().getJBBFactory().createJimpleBodyBuilder());      clinitMethod.setSource(mSource);    } else {      clinitMethod=sootClass.getMethod("<clinit>",new ArrayList(),soot.VoidType.v());    }    ((PolyglotMethodSource)clinitMethod.getSource()).setStaticFieldInits(staticFieldInits);    ((PolyglotMethodSource)clinitMethod.getSource()).setStaticInitializerBlocks(staticInitializerBlocks);  }  if (cDecl.type().isLocal()) {    AnonLocalClassInfo info=InitialResolver.v().finalLocalInfo().get(new polyglot.util.IdentityKey(cDecl.type()));    ArrayList<SootField> finalsList=addFinalLocals(cDecl.body(),info.finalLocalsAvail(),cDecl.type(),info);    Iterator it=sootClass.getMethods().iterator();    while (it.hasNext()) {      soot.SootMethod meth=(soot.SootMethod)it.next();      if (meth.getName().equals("<init>")) {        ((PolyglotMethodSource)meth.getSource()).setFinalsList(finalsList);      }    }    if (!info.inStaticMethod()) {      polyglot.types.ClassType outerType=cDecl.type().outer();      addOuterClassThisRefToInit(outerType);      addOuterClassThisRefField(outerType);    }  } else   if (cDecl.type().isNested() && !cDecl.flags().isStatic()) {    polyglot.types.ClassType outerType=cDecl.type().outer();    addOuterClassThisRefToInit(outerType);    addOuterClassThisRefField(outerType);  }  Util.addLnPosTags(sootClass,cDecl.position());}  }
class C{  public InvalidDescriptionException(){  super("Invalid plugin.yml");}  }
class C{  private boolean matchStrings(String pattern,String str){  char[] patArr=pattern.toCharArray();  char[] strArr=str.toCharArray();  int patIdxStart=0;  int patIdxEnd=patArr.length - 1;  int strIdxStart=0;  int strIdxEnd=strArr.length - 1;  char ch;  boolean containsStar=false;  for (  char aPatArr : patArr) {    if (aPatArr == '*') {      containsStar=true;      break;    }  }  if (!containsStar) {    if (patIdxEnd != strIdxEnd) {      return false;    }    for (int i=0; i <= patIdxEnd; i++) {      ch=patArr[i];      if (ch != '?') {        if (ch != strArr[i]) {          return false;        }      }    }    return true;  }  if (patIdxEnd == 0) {    return true;  }  while ((ch=patArr[patIdxStart]) != '*' && strIdxStart <= strIdxEnd) {    if (ch != '?') {      if (ch != strArr[strIdxStart]) {        return false;      }    }    patIdxStart++;    strIdxStart++;  }  if (strIdxStart > strIdxEnd) {    for (int i=patIdxStart; i <= patIdxEnd; i++) {      if (patArr[i] != '*') {        return false;      }    }    return true;  }  while ((ch=patArr[patIdxEnd]) != '*' && strIdxStart <= strIdxEnd) {    if (ch != '?') {      if (ch != strArr[strIdxEnd]) {        return false;      }    }    patIdxEnd--;    strIdxEnd--;  }  if (strIdxStart > strIdxEnd) {    for (int i=patIdxStart; i <= patIdxEnd; i++) {      if (patArr[i] != '*') {        return false;      }    }    return true;  }  while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {    int patIdxTmp=-1;    for (int i=patIdxStart + 1; i <= patIdxEnd; i++) {      if (patArr[i] == '*') {        patIdxTmp=i;        break;      }    }    if (patIdxTmp == patIdxStart + 1) {      patIdxStart++;      continue;    }    int patLength=(patIdxTmp - patIdxStart - 1);    int strLength=(strIdxEnd - strIdxStart + 1);    int foundIdx=-1;    strLoop:     for (int i=0; i <= strLength - patLength; i++) {      for (int j=0; j < patLength; j++) {        ch=patArr[patIdxStart + j + 1];        if (ch != '?') {          if (ch != strArr[strIdxStart + i + j]) {            continue strLoop;          }        }      }      foundIdx=strIdxStart + i;      break;    }    if (foundIdx == -1) {      return false;    }    patIdxStart=patIdxTmp;    strIdxStart=foundIdx + patLength;  }  for (int i=patIdxStart; i <= patIdxEnd; i++) {    if (patArr[i] != '*') {      return false;    }  }  return true;}  }
class C{  private static String[] toSuffixes(String[] extensions){  String[] suffixes=new String[extensions.length];  for (int i=0; i < extensions.length; i++) {    suffixes[i]="." + extensions[i];  }  return suffixes;}  }
class C{  public Variance(boolean isBiasCorrected,SecondMoment m2){  this(m2,false,isBiasCorrected);}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public void addToList(final Object key){  keyList.offer(key);}  }
class C{  public NavigationBarView(Context context){  super(context);}  }
class C{  protected void succeeded(Description description){}  }
class C{  public boolean isVirtual(){  return this == VIRTUAL;}  }
class C{  public RevealBuilder withTranslateDuration(final int translateDuration){  this.mTranslateDuration=translateDuration;  return this;}  }
class C{  public MqttMessageLogger(final String connectionId,final Queue<FormattedMqttMessage> queue,final MessageLog messageLogSettings,final boolean useAsTemplate,final int sleepWhenNoMessages){  this.queue=queue;  this.messageLogSettings=messageLogSettings;  this.sleepWhenNoMessages=sleepWhenNoMessages;  final String file=messageLogSettings.getLogFile();  if (file != null) {    RollingFileAppender appender;    if (useAsTemplate) {      final RollingFileAppender templateAppender=(RollingFileAppender)logger.getAppender("messagelog");      appender=new RollingFileAppender();      appender.setThreshold(templateAppender.getThreshold());      appender.setMaximumFileSize(templateAppender.getMaximumFileSize());      appender.setMaxBackupIndex(templateAppender.getMaxBackupIndex());      appender.setLayout(templateAppender.getLayout());      appender.setFile(file);      appender.activateOptions();      localLogger=Logger.getLogger("pl.baczkowicz.mqttspy.logger.ConnectionSpecificLogger" + connectionId);      localLogger.addAppender(appender);      localLogger.setAdditivity(false);    } else {      appender=(RollingFileAppender)logger.getAppender("messagelog");      appender.setFile(file);    }  }}  }
class C{  public static boolean updateGradleExperimentalPluginVersionAndNotifyFailure(@NotNull Project project,@NotNull GradleVersion pluginVersion,@Nullable String gradleVersion,boolean invalidateSyncOnFailure){  return updateGradlePluginVersionAndNotifyFailure(project,pluginVersion,gradleVersion,true,invalidateSyncOnFailure);}  }
class C{  public boolean removeEntryFromCache(IEntryHolder entryHolder){  return removeEntryFromCache(entryHolder,false,true,null,RecentDeleteCodes.NONE);}  }
class C{  @Override public double value(double x) throws MathIllegalArgumentException, MathIllegalStateException {  return BesselJ.value(order,x);}  }
class C{  public static Builder newInstance(VerticalStepperFormLayout stepperLayout,String[] stepTitles,VerticalStepperForm stepperImplementation,Activity activity){  return new Builder(stepperLayout,stepTitles,stepperImplementation,activity);}  }
class C{  public void performanceTestSeveralParameters() throws SecurityException, NoSuchMethodException {  mockProcessor.processUpdate("test",Long.valueOf(0),1,Short.valueOf("23"));  expectLastCall().times(1000000);  replay(mockProcessor);  for (int i=0; i < 1000000; i++) {    threadHandler.put(parameterArray);  }  try {    Thread.sleep(1000);  } catch (  InterruptedException e) {    e.printStackTrace();  }  verify(mockProcessor);  threadHandler.shutdown();}  }
class C{  public static boolean isAccountPenaltyActive(Account account){  AccountTime accountTime=account.getAccountTime();  return accountTime != null && accountTime.getPenaltyEnd() != null && (accountTime.getPenaltyEnd().getTime() == 1000 || accountTime.getPenaltyEnd().getTime() >= System.currentTimeMillis());}  }
class C{  public static String commentIsValid(String comment){  if (comment == null || comment.trim().isEmpty()) {    return null;  }  if (comment.length() > VALUE_MAX_LENGTH) {    return "comment_length_greater_than_max_length";  }  return null;}  }
class C{  public RRQRDecomposition(RealMatrix matrix,double threshold){  super(matrix,threshold);}  }
class C{  public void unindex(Tuple t,String attrName){  throw new UnsupportedOperationException();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Override public void sldDataUpdated(SLDDataInterface sldData,boolean dataEditedFlag){  sldDataUpdated_methodReached=true;  sldDataUpdated_sldData=sldData;  sldDataUpdated_dataEditedFlag=dataEditedFlag;}  }
class C{  public ScrollObject(){  this.toTop=true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Recall_Instant_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201243,skillcaster,skillname);}  }
class C{  public Builder delayBeforeLoading(int delayInMillis){  this.delayBeforeLoading=delayInMillis;  return this;}  }
class C{  public AWSIotTimeoutException(Throwable cause){  super(cause);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately("set summarized=" + (!isSelected()) + ";");}  }
class C{  public void unbind(Object obj){  Set<IBinding> bindings=getBindings(obj.getClass());  for (  IBinding binding : bindings) {    binding.unbind();  }  mBindings.remove(obj.getClass());}  }
class C{  public int hashCode(){  return main.hashCode() + boot.hashCode();}  }
class C{  @Override public Optional<Object> provideValue(Object pageObject,Field field,PageObjectContext context){  By selector=PageObjectProviderHelper.getSelectorFromPageObject(field);  ElementLocatorFactory elementLocatorFactory=new NestedSelectorScopedLocatorFactory(webDriver,selector,context.getElementLocatorFactory(),AnnotationsHelper.isGlobal(field));  final FramePath framePath=frameMap.get(pageObject);  contextStack.push(new PageObjectContext(elementLocatorFactory,framePath));  Object scopedPageObject=null;  try {    scopedPageObject=injector.getInstance(field.getType());  } catch (  Exception e) {    if (e instanceof ConfigurationException) {      ConfigurationException ce=(ConfigurationException)e;      throw new BobcatRuntimeException("Configuration exception: " + ce.getErrorMessages().toString(),e);    }    throw new BobcatRuntimeException(e.getMessage(),e);  } finally {    contextStack.pop();  }  return Optional.ofNullable(scopedPageObject);}  }
class C{  public void clearBasicAuth(){  this.httpClient.getCredentialsProvider().clear();}  }
class C{  public PhotosReorderPhotosQuery(VkApiClient client,UserActor actor,int photoId){  super(client,"photos.reorderPhotos",OkResponse.class);  accessToken(actor.getAccessToken());  photoId(photoId);}  }
class C{  public DataFrame toDataFrame(JavaSparkContext jsc,DependencyGraph graph,FeatureFrame featureFrame){  List<ParsingContext> list=TransitionDecoder.decode(graph,featureFrame);  JavaRDD<ParsingContext> javaRDD=jsc.parallelize(list);  return sqlContext.createDataFrame(javaRDD,ParsingContext.class);}  }
class C{  public void endFadeAnimation(){  if (mFadeAnimation != null) {    mFadeAnimation.end();    mFadeAnimation=null;  }}  }
class C{  public synchronized void update(Vector2 mousePosition){  this.beginPosition=mousePosition;}  }
class C{  public LogSeqNum checkpoint(List<Long> txNums){  return new CheckpointRecord(txNums).writeToLog();}  }
class C{  private UIHelper(){}  }
class C{  public PropertiesUI(Application application){  initComponents();  setValues(application);}  }
class C{  public boolean isSpringForce(){  return true;}  }
class C{  @Override public void onBindViewHolder(final RecyclerView.ViewHolder holder,int positions){  super.onBindViewHolder(holder,positions);  int viewType=holder.getItemViewType();  if (mItemTouchHelper != null && itemDragEnabled && viewType != LOADING_VIEW && viewType != HEADER_VIEW && viewType != EMPTY_VIEW && viewType != FOOTER_VIEW) {    if (mToggleViewId != NO_TOGGLE_VIEW) {      View toggleView=((BaseViewHolder)holder).getView(mToggleViewId);      if (toggleView != null) {        toggleView.setTag(R.id.BaseQuickAdapter_viewholder_support,holder);        if (mDragOnLongPress) {          toggleView.setOnLongClickListener(mOnToggleViewLongClickListener);        } else {          toggleView.setOnTouchListener(mOnToggleViewTouchListener);        }      }    } else {      holder.itemView.setTag(R.id.BaseQuickAdapter_viewholder_support,holder);      holder.itemView.setOnLongClickListener(mOnToggleViewLongClickListener);    }  }}  }
class C{  public ZonedTimeGrain withZone(DateTimeZone dateTimeZone){  return new ZonedTimeGrain(this.getBaseTimeGrain(),dateTimeZone);}  }
class C{  public String scanPseudoAttribute(boolean scanningTextDecl,XMLString value) throws IOException, XNIException {  String name=fEntityScanner.scanName();  XMLEntityManager.print(fEntityManager.getCurrentEntity());  if (name == null) {    reportFatalError("PseudoAttrNameExpected",null);  }  fEntityScanner.skipDeclSpaces();  if (!fEntityScanner.skipChar('=')) {    reportFatalError(scanningTextDecl ? "EqRequiredInTextDecl" : "EqRequiredInXMLDecl",new Object[]{name});  }  fEntityScanner.skipDeclSpaces();  int quote=fEntityScanner.peekChar();  if (quote != '\'' && quote != '"') {    reportFatalError(scanningTextDecl ? "QuoteRequiredInTextDecl" : "QuoteRequiredInXMLDecl",new Object[]{name});  }  fEntityScanner.scanChar();  int c=fEntityScanner.scanLiteral(quote,value);  if (c != quote) {    fStringBuffer2.clear();    do {      fStringBuffer2.append(value);      if (c != -1) {        if (c == '&' || c == '%' || c == '<' || c == ']') {          fStringBuffer2.append((char)fEntityScanner.scanChar());        } else         if (XMLChar.isHighSurrogate(c)) {          scanSurrogates(fStringBuffer2);        } else         if (isInvalidLiteral(c)) {          String key=scanningTextDecl ? "InvalidCharInTextDecl" : "InvalidCharInXMLDecl";          reportFatalError(key,new Object[]{Integer.toString(c,16)});          fEntityScanner.scanChar();        }      }      c=fEntityScanner.scanLiteral(quote,value);    } while (c != quote);    fStringBuffer2.append(value);    value.setValues(fStringBuffer2);  }  if (!fEntityScanner.skipChar(quote)) {    reportFatalError(scanningTextDecl ? "CloseQuoteMissingInTextDecl" : "CloseQuoteMissingInXMLDecl",new Object[]{name});  }  return name;}  }
class C{  public PhotosGetByIdQueryWithExtended(VkApiClient client,UserActor actor,List<String> photos){  super(client,"photos.getById",Utils.buildParametrizedType(List.class,PhotoFull.class));  accessToken(actor.getAccessToken());  photos(photos);  extended(true);}  }
class C{  public VendorOptionFillFactory(Class<?> panelId,FunctionNameInterface functionManager){  vendorOptionGeoServerRandomFill=new VOGeoServerRandomFill(panelId,functionManager);  vendorOptionList.add(vendorOptionGeoServerRandomFill);  PrefManager.getInstance().addVendorOptionListener(this);}  }
class C{  public void handleDecode(Result result,Bitmap barcode){  inactivityTimer.onActivity();  playBeepSoundAndVibrate();  if (result == null || TextUtils.isEmpty(result.getText())) {    if (analyzeCallback != null) {      analyzeCallback.onAnalyzeFailed();    }  } else {    if (analyzeCallback != null) {      analyzeCallback.onAnalyzeSuccess(barcode,result.getText());    }  }}  }
class C{  public static void showProgressDialog(final Context context){  showProgressDialog(context,DEFAULT_TAG,null);}  }
class C{  public boolean hasLabels(){  return sample2label.size() > 0;}  }
class C{  @TargetApi(11) public void centerViewToAnimated(float xIndex,float yValue,AxisDependency axis,long duration){  if (android.os.Build.VERSION.SDK_INT >= 11) {    PointD bounds=getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentTop(),axis);    float valsInView=getDeltaY(axis) / mViewPortHandler.getScaleY();    float xsInView=getXAxis().getValues().size() / mViewPortHandler.getScaleX();    Runnable job=new AnimatedMoveViewJob(mViewPortHandler,xIndex - xsInView / 2f,yValue + valsInView / 2f,getTransformer(axis),this,(float)bounds.x,(float)bounds.y,duration);    addViewportJob(job);  } else {    Log.e(LOG_TAG,"Unable to execute centerViewToAnimated(...) on API level < 11");  }}  }
class C{  @Override public void skippedEntity(String name) throws SAXException {  return;}  }
class C{  public StatsGetPostReachQuery(VkApiClient client,UserActor actor,int ownerId,int postId){  super(client,"stats.getPostReach",Utils.buildParametrizedType(List.class,WallpostStat.class));  accessToken(actor.getAccessToken());  ownerId(ownerId);  postId(postId);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  private static Bitmap drawableToBitmap(Drawable d){  return d == null ? null : ((BitmapDrawable)d).getBitmap();}  }
class C{  public Matrix(int m,int n,double s){  this.m=m;  this.n=n;  A=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=s;    }  }}  }
class C{  public boolean isValidMethod(SootMethod sm){  if (validMethods != null) {    String sig=sm.toString();    if (!validMethods.containsKey(sig))     return false;    validMethods.put(sig,Boolean.TRUE);  }  return true;}  }
class C{  public IterativeLegendreGaussIntegrator(final int n,final double relativeAccuracy,final double absoluteAccuracy) throws MathIllegalArgumentException {  this(n,relativeAccuracy,absoluteAccuracy,DEFAULT_MIN_ITERATIONS_COUNT,DEFAULT_MAX_ITERATIONS_COUNT);}  }
class C{  private void updateAnimationTime(){  long now=android.os.SystemClock.uptimeMillis();  if (mMovieStart == 0) {    mMovieStart=now;  }  int dur=mMovie.duration();  if (dur == 0) {    dur=DEFAULT_MOVIEW_DURATION;  }  mCurrentAnimationTime=(int)((now - mMovieStart) % dur);}  }
class C{  public void append(byte[] utf8,int start,int len){  setCapacity(length + len,true);  System.arraycopy(utf8,start,bytes,length,len);  length+=len;}  }
class C{  protected MultivaluedHashMap<String,Serializable> buildHeaderList(){  return new MultivaluedHashMap<>();}  }
class C{  protected void handleColumnChanged(Column c,int start,int end){  for (; !isValidRow(start) && start <= end; ++start)   ;  if (start > end)   return;  int idx;  if (m_lastCol != -1 && c == getColumn(m_lastCol)) {    idx=m_lastCol;  } else {    idx=getColumnNumber(c);  }  if (idx >= 0) {    fireTableEvent(start,end,idx,TableModelEvent.UPDATE);  }}  }
class C{  public GSXAConnectionImpl(GSXAConnectionFactoryImpl factory) throws JMSException {  super(factory);}  }
class C{  public boolean IsOptSet(int inOptNum){  if (this.optionsList == null) {    initialize();  }  return this.optionsList.contains((byte)inOptNum);}  }
class C{  private static final void cleanupSingleNamespaceNode(ZooKeeper zkc,String path,String selfBrokerUrl) throws Exception {  String brokerUrl=null;  try {    byte[] data=zkc.getData(path,false,null);    if (data.length == 0) {      return;    }    NamespaceEphemeralData zdata=jsonMapper.readValue(data,NamespaceEphemeralData.class);    brokerUrl=zdata.getNativeUrl();    if (selfBrokerUrl.equals(brokerUrl)) {      zkc.delete(path,-1);    }  } catch (  NoNodeException nne) {  }}  }
class C{  public static boolean isColorDark(int color){  return ((30 * Color.red(color) + 59 * Color.green(color) + 11 * Color.blue(color)) / 100) <= BRIGHTNESS_THRESHOLD;}  }
class C{  @SuppressFBWarnings("LI_LAZY_INIT_UPDATE_STATIC") static void refreshLastKnownLocation(Context context,long maxAge){  ThreadUtils.assertOnUiThread();  if (sListener != null)   return;  LocationManager locationManager=(LocationManager)context.getSystemService(Context.LOCATION_SERVICE);  Location location=locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);  if (location == null || getLocationAge(location) > maxAge) {    String provider=LocationManager.NETWORK_PROVIDER;    if (locationManager.isProviderEnabled(provider)) {      sListener=new SelfCancelingListener(locationManager);      locationManager.requestSingleUpdate(provider,sListener,null);    }  }}  }
class C{  public void putListBoolean(String key,ArrayList<Boolean> boolList){  checkForNullKey(key);  ArrayList<String> newList=new ArrayList<String>();  for (  Boolean item : boolList) {    if (item) {      newList.add("true");    } else {      newList.add("false");    }  }  putListString(key,newList);}  }
class C{  public void attribute(String elemName,String attrName,String type,String value){  ElementType e=getElementType(elemName);  if (e == null) {    throw new Error("Attribute " + attrName + " specified for unknown element type "+ elemName);  }  e.setAttribute(attrName,type,value);}  }
class C{  static public LookupLocator[] toLookupLocators(String lookupLocatorURLs){  String locatorURL=null;  ArrayList<LookupLocator> locatorList=new ArrayList<LookupLocator>();  if (lookupLocatorURLs != null && lookupLocatorURLs.length() > 0) {    StringTokenizer st=new StringTokenizer(lookupLocatorURLs,",");    while (st.hasMoreTokens()) {      try {        locatorURL=st.nextToken().trim();        if (locatorURL.length() == 0 || locatorURL.equals("\"\"")) {          continue;        }        if (!locatorURL.startsWith("jini://")) {          locatorURL="jini://" + locatorURL;        }        LookupLocator lookupLocator=new LookupLocator(locatorURL);        locatorList.add(lookupLocator);      } catch (      MalformedURLException ex) {        if (LOGGER.isLoggable(Level.WARNING)) {          LOGGER.log(Level.WARNING,"Failed to parse list of LookupLocator URLs: " + locatorURL + " - "+ ex.toString(),ex);        }      }    }  }  if (LOGGER.isLoggable(Level.FINE)) {    LOGGER.log(Level.FINE,locatorList.toString());  }  return locatorList.toArray(new LookupLocator[0]);}  }
class C{  public boolean isCanReport(){  if (canReport == null) {    return false;  } else {    return canReport;  }}  }
class C{  private void hideView(String type){switch (type) {case HEADERVIEW:    if (mHeaderView.getLayoutParams().height < mHeaderViewHeight) {      startAnimator(mHeaderView,mHeaderView.getLayoutParams().height,0);    } else {      startAnimator(mHeaderView,mHeaderView.getLayoutParams().height,mHeaderViewHeight);    }  isLoadingMoreData=false;break;case FOOTERVIEW:if (mFooterView.getLayoutParams().height < mFooterViewHeight) {startAnimator(mFooterView,mFooterView.getLayoutParams().height,0);} else {startAnimator(mFooterView,mFooterView.getLayoutParams().height,mFooterViewHeight);}isLoadingData=false;break;}}  }
class C{  @RequestMapping(value="/data-counters",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<DataCounter> updateDataCounter(@RequestBody DataCounter dataCounter) throws URISyntaxException {  log.debug("REST request to update DataCounter : {}",dataCounter);  DataCounter result=dataCounterRepository.save(dataCounter);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("dataCounter",dataCounter.getVtype())).body(result);}  }
class C{  private void initModel(){  this.categoryModel=new CategoryObject(getContext());  this.loadModel=new LoadObject(LoadObject.LOADING_STATE);  this.scrollModel=new ScrollObject();}  }
class C{  @RequestMapping(value="/account",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<String> saveAccount(@Valid @RequestBody UserDTO userDTO){  Optional<User> existingUser=userRepository.findOneByEmail(userDTO.getEmail());  if (existingUser.isPresent() && (!existingUser.get().getLogin().equalsIgnoreCase(userDTO.getLogin()))) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("user-management","emailexists","Email already in use")).body(null);  }  return userRepository.findOneByLogin(SecurityUtils.getCurrentUserLogin()).map(null).orElseGet(null);}  }
class C{  public <T4>Pattern4<T1,T2,T3,T4> and(Observable<T4> other){  if (other == null) {    throw new NullPointerException();  }  return new Pattern4<T1,T2,T3,T4>(o1,o2,o3,other);}  }
class C{  protected void persistProcessDefinitionsAndAuthorizations(ParsedDeployment parsedDeployment){  CommandContext commandContext=Context.getCommandContext();  ProcessDefinitionEntityManager processDefinitionManager=commandContext.getProcessDefinitionEntityManager();  for (  ProcessDefinitionEntity processDefinition : parsedDeployment.getAllProcessDefinitions()) {    processDefinitionManager.insert(processDefinition,false);    bpmnDeploymentHelper.addAuthorizationsForNewProcessDefinition(parsedDeployment.getProcessModelForProcessDefinition(processDefinition),processDefinition);  }}  }
class C{  private static void log(String log,Object... args){  if (verbose)   if (args.length > 0)   Log.d(TAG,log + " " + Arrays.asList(args)); else   Log.d(TAG,log);}  }
class C{  public List<SootMethod> application(){  List<SootMethod> ret=new ArrayList<SootMethod>();  if (Scene.v().hasMainClass()) {    addMethod(ret,Scene.v().getMainClass(),sigMain);    for (    SootMethod clinit : clinitsOf(Scene.v().getMainClass())) {      ret.add(clinit);    }  }  return ret;}  }
class C{  public static GeneralPath cardinalSpline(GeneralPath p,float pts[],float slack,boolean closed,float tx,float ty){  int npoints=0;  for (; npoints < pts.length; ++npoints)   if (Float.isNaN(pts[npoints]))   break;  return cardinalSpline(p,pts,0,npoints / 2,slack,closed,tx,ty);}  }
class C{  public static String pad(int padding){  if (padding > 0) {    StringBuffer sb=new StringBuffer(padding);    for (int i=0; i < padding; i++) {      sb.append(' ');    }    return sb.toString();  } else {    return "";  }}  }
class C{  protected void onBindDialogView(View view){  View dialogMessageView=view.findViewById(R.id.message);  if (dialogMessageView != null) {    final CharSequence message=getDialogMessage();    int newVisibility=View.GONE;    if (!TextUtils.isEmpty(message)) {      if (dialogMessageView instanceof TextView) {        ((TextView)dialogMessageView).setText(message);      }      newVisibility=View.VISIBLE;    }    if (dialogMessageView.getVisibility() != newVisibility) {      dialogMessageView.setVisibility(newVisibility);    }  }}  }
class C{  public boolean scanData(String delimiter,XMLStringBuffer buffer) throws IOException {  boolean found=false;  int delimLen=delimiter.length();  char charAt0=delimiter.charAt(0);  boolean external=fCurrentEntity.isExternal();  if (DEBUG_BUFFER) {    System.out.print("(scanData: ");    XMLEntityManager.print(fCurrentEntity);    System.out.println();  }  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  boolean bNextEntity=false;  while ((fCurrentEntity.position > fCurrentEntity.count - delimLen) && (!bNextEntity)) {    System.arraycopy(fCurrentEntity.ch,fCurrentEntity.position,fCurrentEntity.ch,0,fCurrentEntity.count - fCurrentEntity.position);    bNextEntity=load(fCurrentEntity.count - fCurrentEntity.position,false);    fCurrentEntity.position=0;    fCurrentEntity.startPosition=0;  }  if (fCurrentEntity.position > fCurrentEntity.count - delimLen) {    int length=fCurrentEntity.count - fCurrentEntity.position;    buffer.append(fCurrentEntity.ch,fCurrentEntity.position,length);    fCurrentEntity.columnNumber+=fCurrentEntity.count;    fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);    fCurrentEntity.position=fCurrentEntity.count;    fCurrentEntity.startPosition=fCurrentEntity.count;    load(0,true);    return false;  }  int offset=fCurrentEntity.position;  int c=fCurrentEntity.ch[offset];  int newlines=0;  if (c == '\n' || (c == '\r' && external)) {    if (DEBUG_BUFFER) {      System.out.print("[newline, " + offset + ", "+ fCurrentEntity.position+ ": ");      XMLEntityManager.print(fCurrentEntity);      System.out.println();    }    do {      c=fCurrentEntity.ch[fCurrentEntity.position++];      if (c == '\r' && external) {        newlines++;        fCurrentEntity.lineNumber++;        fCurrentEntity.columnNumber=1;        if (fCurrentEntity.position == fCurrentEntity.count) {          offset=0;          fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);          fCurrentEntity.position=newlines;          fCurrentEntity.startPosition=newlines;          if (load(newlines,false)) {            break;          }        }        if (fCurrentEntity.ch[fCurrentEntity.position] == '\n') {          fCurrentEntity.position++;          offset++;        } else {          newlines++;        }      } else       if (c == '\n') {        newlines++;        fCurrentEntity.lineNumber++;        fCurrentEntity.columnNumber=1;        if (fCurrentEntity.position == fCurrentEntity.count) {          offset=0;          fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);          fCurrentEntity.position=newlines;          fCurrentEntity.startPosition=newlines;          fCurrentEntity.count=newlines;          if (load(newlines,false)) {            break;          }        }      } else {        fCurrentEntity.position--;        break;      }    } while (fCurrentEntity.position < fCurrentEntity.count - 1);    for (int i=offset; i < fCurrentEntity.position; i++) {      fCurrentEntity.ch[i]='\n';    }    int length=fCurrentEntity.position - offset;    if (fCurrentEntity.position == fCurrentEntity.count - 1) {      buffer.append(fCurrentEntity.ch,offset,length);      if (DEBUG_BUFFER) {        System.out.print("]newline, " + offset + ", "+ fCurrentEntity.position+ ": ");        XMLEntityManager.print(fCurrentEntity);        System.out.println();      }      return true;    }    if (DEBUG_BUFFER) {      System.out.print("]newline, " + offset + ", "+ fCurrentEntity.position+ ": ");      XMLEntityManager.print(fCurrentEntity);      System.out.println();    }  }  OUTER:   while (fCurrentEntity.position < fCurrentEntity.count) {    c=fCurrentEntity.ch[fCurrentEntity.position++];    if (c == charAt0) {      int delimOffset=fCurrentEntity.position - 1;      for (int i=1; i < delimLen; i++) {        if (fCurrentEntity.position == fCurrentEntity.count) {          fCurrentEntity.position-=i;          break OUTER;        }        c=fCurrentEntity.ch[fCurrentEntity.position++];        if (delimiter.charAt(i) != c) {          fCurrentEntity.position--;          break;        }      }      if (fCurrentEntity.position == delimOffset + delimLen) {        found=true;        break;      }    } else     if (c == '\n' || (external && c == '\r')) {      fCurrentEntity.position--;      break;    } else     if (XMLChar.isInvalid(c)) {      fCurrentEntity.position--;      int length=fCurrentEntity.position - offset;      fCurrentEntity.columnNumber+=length - newlines;      buffer.append(fCurrentEntity.ch,offset,length);      return true;    }  }  int length=fCurrentEntity.position - offset;  fCurrentEntity.columnNumber+=length - newlines;  if (found) {    length-=delimLen;  }  buffer.append(fCurrentEntity.ch,offset,length);  if (DEBUG_BUFFER) {    System.out.print(")scanData: ");    XMLEntityManager.print(fCurrentEntity);    System.out.println(" -> " + !found);  }  return !found;}  }
class C{  public synchronized void begin(int size){  timer.start("utteranceOutput");  cancelled=false;  curIndex=0;  outputData=new byte[size];}  }
class C{  public static boolean isPrecaching(){  return sIsPrecaching;}  }
class C{  public NGramDocument(){  Graph=new DocumentNGramGraph();  Histogram=new DocumentNGramHistogram();}  }
class C{  public long putIfAbsent(K key,long value){  int index=insertionIndex(key);  if (index < 0)   return _values[-index - 1];  return doPut(key,value,index);}  }
class C{  private Utils(){}  }
class C{  public void updateIntent(Intent intent){  mIsMainIntent=intent != null && Intent.ACTION_MAIN.equals(intent.getAction());  mFirstActionTaken=NO_ACTIVITY;  mSessionStartTimestamp=System.nanoTime();  mRecordedHistogram=false;}  }
class C{  protected PhotosSaveMarketAlbumPhotoQuery photo(String value){  return unsafeParam("photo",value);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public boolean validate() throws IOException, XmlParsingException {  executeValidationCommand();  return analyzeResult();}  }
class C{  public static boolean isswitch(String cc){  String first4digs=cc.substring(0,4);  String first6digs=cc.substring(0,6);  if (((cc.length() == 16) || (cc.length() == 18) || (cc.length() == 19)) && (first4digs.equals("4903") || first4digs.equals("4905") || first4digs.equals("4911")|| first4digs.equals("4936")|| first6digs.equals("564182")|| first6digs.equals("633110")|| first4digs.equals("6333")|| first4digs.equals("6759")))   return isCreditCard(cc);  return false;}  }
class C{  public static byte[] toByteArray(Reader input,String encoding) throws IOException {  return toByteArray(input,Charsets.toCharset(encoding));}  }
class C{  protected void saveLanguage(String language){  fLanguageScope.push(fDepth);  fLanguageStack.push(language);}  }
class C{  public static String removeExtraSpaces(String text){  text=text.replace(ChineseLanguageConstants.SPACE[0],ChineseLanguageConstants.SPACE[1]);  text=text.replaceAll("[ \t\u000B\u000C\u00A0\uE5F1]+"," ");  text=text.replaceAll("(^ +)|( +$)","");  return text;}  }
class C{  public DefaultMovieInfoProvider(MediaLocator mediaLocator){  this.mediaLocator=mediaLocator;}  }
class C{  public boolean union(RWSet other){  if (other == null)   return false;  if (isFull)   return false;  boolean ret=false;  if (other instanceof MethodRWSet) {    MethodRWSet o=(MethodRWSet)other;    if (o.getCallsNative()) {      ret=!getCallsNative() | ret;      setCallsNative();    }    if (o.isFull) {      ret=!isFull | ret;      isFull=true;      if (true)       throw new RuntimeException("attempt to add full set " + o + " into "+ this);      globals=null;      fields=null;      return ret;    }    if (o.globals != null) {      if (globals == null)       globals=new HashSet();      ret=globals.addAll(o.globals) | ret;      if (globals.size() > MAX_SIZE) {        globals=null;        isFull=true;        throw new RuntimeException("attempt to add full set " + o + " into "+ this);      }    }    if (o.fields != null) {      for (      Object element : o.fields.keySet()) {        final Object field=element;        PointsToSet os=o.getBaseForField(field);        ret=addFieldRef(os,field) | ret;      }    }  } else {    StmtRWSet oth=(StmtRWSet)other;    if (oth.base != null) {      ret=addFieldRef(oth.base,oth.field) | ret;    } else     if (oth.field != null) {      ret=addGlobal((SootField)oth.field) | ret;    }  }  if (!getCallsNative() && other.getCallsNative()) {    setCallsNative();    return true;  }  return ret;}  }
class C{  @Override public boolean equals(Object o){  return o instanceof AirMapAircraftModel && ((AirMapAircraftModel)o).getModelId().equals(getModelId());}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  @ObjectiveCName("removeEntry:") public List removeEntry(String entry){  Collection entries=this.getEntries();  while (entries.contains(entry))   entries.remove(entry);  this.updateList(entries);  return this;}  }
class C{  @Override public String toString(){  return getMessage();}  }
class C{  public static synchronized void deleteByReponame(String repoName) throws IOException {  Directory dir=FSDirectory.open(Paths.get(Properties.getProperties().getProperty(Values.INDEXLOCATION,Values.DEFAULTINDEXLOCATION)));  Analyzer analyzer=new CodeAnalyzer();  IndexWriterConfig iwc=new IndexWriterConfig(analyzer);  iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);  IndexWriter writer=new IndexWriter(dir,iwc);  writer.deleteDocuments(new Term(Values.REPONAME,repoName));  writer.close();}  }
class C{  private void unknownPacket(State state,int id){  log.warn(String.format("Unknown packet recived from Login Server: 0x%02X state=%s",id,state.toString()));}  }
class C{  public Durator(CART cart,float meanRate,PhoneDurations durations){  this.cart=cart;  this.meanRate=meanRate;  this.durations=durations;}  }
class C{  public KeyRef(String namespace,String identityConstraintName,String elemName,UniqueOrKey key){  super(namespace,identityConstraintName,elemName);  fKey=key;  type=IC_KEYREF;}  }
class C{  private static boolean parse(XMLTokener x,JSONObject context,String name) throws JSONException {  char c;  int i;  String n;  JSONObject o=null;  String s;  Object t;  t=x.nextToken();  if (t == BANG) {    c=x.next();    if (c == '-') {      if (x.next() == '-') {        x.skipPast("-->");        return false;      }      x.back();    } else     if (c == '[') {      t=x.nextToken();      if (t.equals("CDATA")) {        if (x.next() == '[') {          s=x.nextCDATA();          if (s.length() > 0) {            context.accumulate("content",s);          }          return false;        }      }      throw x.syntaxError("Expected 'CDATA['");    }    i=1;    do {      t=x.nextMeta();      if (t == null) {        throw x.syntaxError("Missing '>' after '<!'.");      } else       if (t == LT) {        i+=1;      } else       if (t == GT) {        i-=1;      }    } while (i > 0);    return false;  } else   if (t == QUEST) {    x.skipPast("?>");    return false;  } else   if (t == SLASH) {    t=x.nextToken();    if (name == null) {      throw x.syntaxError("Mismatched close tag" + t);    }    if (!t.equals(name)) {      throw x.syntaxError("Mismatched " + name + " and "+ t);    }    if (x.nextToken() != GT) {      throw x.syntaxError("Misshaped close tag");    }    return true;  } else   if (t instanceof Character) {    throw x.syntaxError("Misshaped tag");  } else {    n=(String)t;    t=null;    o=new JSONObject();    for (; ; ) {      if (t == null) {        t=x.nextToken();      }      if (t instanceof String) {        s=(String)t;        t=x.nextToken();        if (t == EQ) {          t=x.nextToken();          if (!(t instanceof String)) {            throw x.syntaxError("Missing value");          }          o.accumulate(s,JSONObject.stringToValue((String)t));          t=null;        } else {          o.accumulate(s,"");        }      } else       if (t == SLASH) {        if (x.nextToken() != GT) {          throw x.syntaxError("Misshaped tag");        }        context.accumulate(n,"");        return false;      } else       if (t == GT) {        for (; ; ) {          t=x.nextContent();          if (t == null) {            if (n != null) {              throw x.syntaxError("Unclosed tag " + n);            }            return false;          } else           if (t instanceof String) {            s=(String)t;            if (s.length() > 0) {              o.accumulate("content",JSONObject.stringToValue(s));            }          } else           if (t == LT) {            if (parse(x,o,n)) {              if (o.length() == 0) {                context.accumulate(n,"");              } else               if (o.length() == 1 && o.opt("content") != null) {                context.accumulate(n,o.opt("content"));              } else {                context.accumulate(n,o);              }              return false;            }          }        }      } else {        throw x.syntaxError("Misshaped tag");      }    }  }}  }
class C{  public PhotosSaveWallPhotoQuery latitude(Float value){  return unsafeParam("latitude",value);}  }
class C{  private static void findAndReplace(byte[] text,byte[] pattern,byte[] replacement) throws IllegalArgumentException {  int patternLength=pattern.length;  if (patternLength != replacement.length) {    throw new IllegalArgumentException("findAndReplace(): The lengths of the pattern and replacement must match.");  }  int match=0;  while ((match=findMatch(text,pattern,match)) >= 0) {    replace(text,replacement,match);    match+=patternLength;  }}  }
class C{  @Override public void createRaster(Symbolizer symbolizer){}  }
class C{  public DateColumn(int nrows){  this(Date.class,nrows,nrows,0L);}  }
class C{  public SingleProducerSequencer(int bufferSize,final WaitStrategy waitStrategy){  super(bufferSize,waitStrategy);}  }
class C{  public static void startComm(AirMapFlight flight,@Nullable AirMapCallback<AirMapComm> callback){  FlightService.getCommKey(flight,callback);}  }
class C{  public RequestHandle post(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPost(url),entity),contentType,responseHandler,context);}  }
class C{  public Builder withModuleRoot(@NotNull File moduleRoot){  myModuleRoot=moduleRoot;  return this;}  }
class C{  Iterator(){  counter[last]=-1;}  }
class C{  @Override public Vector whatCanGoHere(int[] state){  return EMPTY;}  }
class C{  protected int match_bitap(String text,String pattern,int loc){  assert (Match_MaxBits == 0 || pattern.length() <= Match_MaxBits) : "Pattern too long for this application.";  Map<Character,Integer> s=match_alphabet(pattern);  double score_threshold=Match_Threshold;  int best_loc=text.indexOf(pattern,loc);  if (best_loc != -1) {    score_threshold=Math.min(match_bitapScore(0,best_loc,loc,pattern),score_threshold);    best_loc=text.lastIndexOf(pattern,loc + pattern.length());    if (best_loc != -1) {      score_threshold=Math.min(match_bitapScore(0,best_loc,loc,pattern),score_threshold);    }  }  int matchmask=1 << (pattern.length() - 1);  best_loc=-1;  int bin_min, bin_mid;  int bin_max=pattern.length() + text.length();  int[] last_rd=new int[0];  for (int d=0; d < pattern.length(); d++) {    bin_min=0;    bin_mid=bin_max;    while (bin_min < bin_mid) {      if (match_bitapScore(d,loc + bin_mid,loc,pattern) <= score_threshold) {        bin_min=bin_mid;      } else {        bin_max=bin_mid;      }      bin_mid=(bin_max - bin_min) / 2 + bin_min;    }    bin_max=bin_mid;    int start=Math.max(1,loc - bin_mid + 1);    int finish=Math.min(loc + bin_mid,text.length()) + pattern.length();    int[] rd=new int[finish + 2];    rd[finish + 1]=(1 << d) - 1;    for (int j=finish; j >= start; j--) {      int charMatch;      if (text.length() <= j - 1 || !s.containsKey(text.charAt(j - 1))) {        charMatch=0;      } else {        charMatch=s.get(text.charAt(j - 1));      }      if (d == 0) {        rd[j]=((rd[j + 1] << 1) | 1) & charMatch;      } else {        rd[j]=(((rd[j + 1] << 1) | 1) & charMatch) | (((last_rd[j + 1] | last_rd[j]) << 1) | 1) | last_rd[j + 1];      }      if ((rd[j] & matchmask) != 0) {        double score=match_bitapScore(d,j - 1,loc,pattern);        if (score <= score_threshold) {          score_threshold=score;          best_loc=j - 1;          if (best_loc > loc) {            start=Math.max(1,2 * loc - best_loc);          } else {            break;          }        }      }    }    if (match_bitapScore(d + 1,loc,loc,pattern) > score_threshold) {      break;    }    last_rd=rd;  }  return best_loc;}  }
class C{  public void popTemplateFolder(){  myLastTemplateFolders.pop();}  }
class C{  ClusterQuery(){}  }
class C{  public MarketSearchQuery sort(MarketSearchSort value){  return unsafeParam("sort",value);}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public static double regularizedGammaP(double a,double x){  return regularizedGammaP(a,x,DEFAULT_EPSILON,Integer.MAX_VALUE);}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public static boolean isInAnnulus(final VisibleObject obj,Point3D Center,float Radius1,float Radius2){  if (!isInSphere(obj,Center.getX(),Center.getY(),Center.getZ(),Radius2)) {    if (isInSphere(obj,Center.getX(),Center.getY(),Center.getZ(),Radius1)) {      return true;    }  }  return false;}  }
class C{  void removeConnection(GSConnectionImpl connection){  connectionsHash.remove(connection.connFacParent.getSpaceURL().getURL());}  }
class C{  private void commitDiscard(long time,boolean allowDiscard){  if (mDiscardingTab == null)   return;  assert mStackTabs != null;  StackTab discarded=mDiscardingTab;  if (Math.abs(discarded.getDiscardAmount()) / getDiscardRange() > DISCARD_COMMIT_THRESHOLD && allowDiscard) {    mLayout.uiRequestingCloseTab(time,discarded.getId());    RecordUserAction.record("MobileStackViewSwipeCloseTab");    RecordUserAction.record("MobileTabClosed");  } else {    startAnimation(time,OverviewAnimationType.UNDISCARD);  }  mDiscardingTab=null;  requestUpdate();}  }
class C{  private static void drawRect(Graphics2D g,int x,int y,int w1,int h1){  g.setColor(linecolor);  g.setStroke(stroke1f);  if (x == 0) {    g.drawLine(x,y,x,y + h1);  }  if (y == 0) {    g.drawLine(x,y,x + w1,y);  }  g.drawLine(x + w1,y,x + w1,y + h1);  g.drawLine(x,y + h1,x + w1,y + h1);}  }
class C{  private List<InputSplit> parseManifest(FileSystem fs,Path manifestPath,JobConf job) throws IOException {  List<InputSplit> splits=null;  FSDataInputStream fp=fs.open(manifestPath);  JsonReader reader=new JsonReader(new InputStreamReader(fp,Charsets.UTF_8));  reader.beginObject();  while (reader.hasNext()) {    String name=reader.nextName();switch (name) {case VERSION_JSON_KEY:      job.set(DynamoDBConstants.EXPORT_FORMAT_VERSION,String.valueOf(reader.nextInt()));    break;case ENTRIES_JSON_KEY:  splits=readEntries(reader,job);break;default :log.info("Skipping a JSON key in the manifest file: " + name);reader.skipValue();break;}}reader.endObject();if (splits == null) {return Collections.emptyList();}return splits;}  }
class C{  public IEntryHolder updateEntry(Context context,IEntryHolder entry,ITemplateHolder template,boolean shouldReplicate,boolean origin) throws SAException {  IEntryCacheInfo pEntry=null;  IEntryHolder new_eh=null;  IEntryData originalData=entry.getEntryData();  try {    if (entry.isOffHeapEntry()) {      pEntry=((IOffHeapEntryHolder)entry).getOffHeapResidentPart();      context.setOffHeapOriginalEntryInfo(originalData,((IOffHeapEntryHolder)entry).getOffHeapVersion());    } else     if (isAllInCachePolicy())     pEntry=getPEntryByUid(entry.getUID());    IEntryData newEntryData=template.getUpdatedEntry().getEntryData();    pEntry=updateEntryInCache(context,pEntry,pEntry != null ? pEntry.getEntryHolder(this) : entry,newEntryData,newEntryData.getExpirationTime(),template.getOperationModifiers());    new_eh=pEntry.getEntryHolder(this);    if (entry.isOffHeapEntry() && isDirectPersistencyEmbeddedtHandlerUsed() && context.isActiveBlobStoreBulk())     context.setForBulkUpdate(new_eh,originalData,template.getMutators());    _storageAdapter.updateEntry(context,new_eh,shouldReplicate,origin,context.getPartialUpdatedValuesIndicators());    if (shouldReplicate && !context.isDelayedReplicationForbulkOpUsed())     handleUpdateEntryReplication(context,new_eh,originalData,template.getMutators());  } catch (  Exception ex) {    if (ex instanceof DuplicateIndexValueException)     throw (RuntimeException)ex;    try {      if (entry.getEntryData().getVersion() == template.getUpdatedEntry().getEntryData().getVersion()) {        if (isEvictableCachePolicy()) {          removeEntryFromCache(entry);        } else {          updateEntryInCache(context,null,entry,originalData,template.getUpdatedEntry().getEntryData().getExpirationTime(),template.getOperationModifiers());        }      }    } catch (    Exception ex_) {      if (ex instanceof SAException)       ex=new SAException("Original exception=" + ex + " while trying to revert caught: "+ ex_,ex); else       ex=new RuntimeException("Original exception=" + ex + " while trying to revert caught: "+ ex_,ex);    }    if (ex instanceof SAException)     throw (SAException)ex;    if (ex instanceof RuntimeException)     throw (RuntimeException)ex;    throw new RuntimeException(ex);  }  return new_eh;}  }
class C{  private static void generateGraphFile(TransMeta transMeta,String graphFile) throws GraphGeneratorException {  DataOutputStream dos=null;  try {    String xml=transMeta.getXML();    dos=new DataOutputStream(new FileOutputStream(new File(graphFile)));    dos.write(xml.getBytes(CarbonCommonConstants.DEFAULT_CHARSET));  } catch (  KettleException kettelException) {    throw new GraphGeneratorException("Error while getting the graph XML",kettelException);  }catch (  FileNotFoundException e) {    throw new GraphGeneratorException("Unable to find the graph fileL",e);  }catch (  UnsupportedEncodingException ue) {    throw new GraphGeneratorException("Error while Converting the graph xml string to bytes",ue);  }catch (  IOException ioe) {    throw new GraphGeneratorException("Error while writing the graph file",ioe);  } finally {    if (dos != null) {      try {        dos.close();      } catch (      IOException e) {        e.getMessage();      }    }  }}  }
class C{  public Builder(){}  }
class C{  public StartupException(String msg,Throwable nested){  super(msg);  this.nested=nested;}  }
class C{  private boolean shouldGrowTable(){  return size > (mask + 1) * LOAD_FACTOR;}  }
class C{  public static void takeScreenshot(Activity activity,File toFile){  if (activity == null) {    throw new IllegalArgumentException("Parameter activity cannot be null.");  }  if (toFile == null) {    throw new IllegalArgumentException("Parameter toFile cannot be null.");  }  Bitmap bitmap=null;  try {    if (!toFile.exists()) {      toFile.createNewFile();    }    bitmap=takeBitmapUnchecked(activity);    writeBitmap(bitmap,toFile);  } catch (  Exception e) {    String message="Unable to take screenshot to file " + toFile.getAbsolutePath() + " of activity "+ activity.getClass().getName();    Log.e(TAG,message,e);    throw new UnableToTakeScreenshotException(message,e);  } finally {    if (bitmap != null) {      bitmap.recycle();    }  }  Log.d(TAG,"Screenshot captured to " + toFile.getAbsolutePath());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_MPHeal_TO_ME(int num0){  return new SM_SYSTEM_MESSAGE(1201196,num0);}  }
class C{  public void spawn(VisibleObject object){  if (object.getPosition().isSpawned()) {    throw new AlreadySpawnedException();  }  object.getController().onBeforeSpawn();  object.getPosition().setIsSpawned(true);  object.getActiveRegion().getParent().addObject(object);  object.getActiveRegion().add(object);  object.getController().onAfterSpawn();  object.updateKnownlist();}  }
class C{  private void handleNodeQueue(SerialMessage incomingMessage){  if (currentStage == ZWaveNodeInitStage.DONE) {    return;  }  logger.debug("NODE {}: Node advancer - checking initialisation queue. Queue size {}.",node.getNodeId(),msgQueue.size());  if (msgQueue.contains(incomingMessage)) {    msgQueue.remove(incomingMessage);    logger.debug("NODE {}: Node advancer - message removed from queue. Queue size {}.",node.getNodeId(),msgQueue.size());    freeToSend=true;    advanceNodeStage(incomingMessage.getMessageClass());  } else   if (msgQueue.isEmpty() && currentStage == ZWaveNodeInitStage.SECURITY_REPORT) {    logger.debug("NODE {}: Node advancer - In Security stage, going to advanceNodeStage to get next request.",node.getNodeId());    advanceNodeStage(incomingMessage.getMessageClass());  }}  }
class C{  public static Item registerItem(Item item){  item.setUnlocalizedName("bwm" + item.getRegistryName().toString().substring(BWMod.MODID.length()));  return GameRegistry.register(item);}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case -1:    if (browsablePresenter.isBrowsable()) {      browsablePresenter.visitParentView();    }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    finishAfterTransition();  } else {    finish();  }break;}}  }
class C{  public void testDeployIntermediateVersionWithoutMessageStartEvent(){  String deploymentId1=deployStartMessageTestProcess();  assertEquals(1,getAllEventSubscriptions().size());  assertEquals(0,runtimeService.createProcessInstanceQuery().count());  runtimeService.startProcessInstanceByMessage("myStartMessage");  assertEquals(1,runtimeService.createProcessInstanceQuery().count());  assertEventSubscriptionsCount(1);  String deploymentId2=deployProcessWithoutEvents();  assertEquals(0,getAllEventSubscriptions().size());  assertEquals(1,runtimeService.createProcessInstanceQuery().count());  try {    runtimeService.startProcessInstanceByMessage("myStartMessage");    fail();  } catch (  Exception e) {  }  assertEquals(1,runtimeService.createProcessInstanceQuery().count());  assertEventSubscriptionsCount(0);  String deploymentId3=deployStartMessageTestProcess();  assertEquals(1,getAllEventSubscriptions().size());  assertEquals(1,runtimeService.createProcessInstanceQuery().count());  runtimeService.startProcessInstanceByMessage("myStartMessage");  assertEquals(2,runtimeService.createProcessInstanceQuery().count());  assertEventSubscriptionsCount(1);  List<EventSubscriptionEntity> eventSubscriptions=getAllEventSubscriptions();  assertEquals(repositoryService.createProcessDefinitionQuery().deploymentId(deploymentId3).singleResult().getId(),eventSubscriptions.get(0).getProcessDefinitionId());  cleanup(deploymentId1,deploymentId2,deploymentId3);}  }
class C{  public String saveXML(Node node) throws DOMException {  if (errorChecking && node != null && this != node.getOwnerDocument()) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"WRONG_DOCUMENT_ERR",null);    throw new DOMException(DOMException.WRONG_DOCUMENT_ERR,msg);  }  DOMImplementationLS domImplLS=(DOMImplementationLS)DOMImplementationImpl.getDOMImplementation();  LSSerializer xmlWriter=domImplLS.createLSSerializer();  if (node == null) {    node=this;  }  return xmlWriter.writeToString(node);}  }
class C{  public AbstractEquipmentCacheObject(final Long pId,final String pName,final String pDescription,final String pHandlerClassName,final Long pStateTagId,final Long pAliveTagId,final int pAliveInterval,final Long pCommfaultTagId){  super(pId,pName,pStateTagId,pAliveTagId,pAliveInterval);  this.description=pDescription;  this.handlerClassName=pHandlerClassName;  this.commFaultTagId=pCommfaultTagId;}  }
class C{  public void updateInventories() throws LoginFailedException, RemoteServerException {  updateInventories(false);}  }
class C{  public Expression or(Expression exp1,Expression exp2){  return new LogicalExpression(exp1,exp2,ExpressionType.OR);}  }
class C{  public WallGetQueryWithExtended fields(EnumParam... value){  return unsafeParam("fields",value);}  }
class C{  private static Object compressNonDecimalMaxMin(DataType changedDataType,double[] value,int decimal,double maxValue){  int i=0;  BigDecimal max=BigDecimal.valueOf(maxValue);switch (changedDataType) {case DATA_BYTE:    byte[] result=new byte[value.length];  for (  double a : value) {    BigDecimal val=BigDecimal.valueOf(a);    double diff=max.subtract(val).doubleValue();    result[i]=(byte)(Math.round(diff * Math.pow(10,decimal)));    i++;  }return result;case DATA_SHORT:short[] shortResult=new short[value.length];for (double a : value) {BigDecimal val=BigDecimal.valueOf(a);double diff=max.subtract(val).doubleValue();shortResult[i]=(short)(Math.round(diff * Math.pow(10,decimal)));i++;}return shortResult;case DATA_INT:int[] intResult=new int[value.length];for (double a : value) {BigDecimal val=BigDecimal.valueOf(a);double diff=max.subtract(val).doubleValue();intResult[i]=(int)(Math.round(diff * Math.pow(10,decimal)));i++;}return intResult;case DATA_LONG:long[] longResult=new long[value.length];for (double a : value) {BigDecimal val=BigDecimal.valueOf(a);double diff=max.subtract(val).doubleValue();longResult[i]=(long)(Math.round(diff * Math.pow(10,decimal)));i++;}return longResult;case DATA_FLOAT:float[] floatResult=new float[value.length];for (double a : value) {BigDecimal val=BigDecimal.valueOf(a);double diff=max.subtract(val).doubleValue();floatResult[i]=(float)(Math.round(diff * Math.pow(10,decimal)));i++;}return floatResult;default :double[] defaultResult=new double[value.length];for (double a : value) {BigDecimal val=BigDecimal.valueOf(a);double diff=max.subtract(val).doubleValue();defaultResult[i]=(Math.round(diff * Math.pow(10,decimal)));i++;}return defaultResult;}}  }
class C{  public Matrix zoomOut(float x,float y){  Matrix save=new Matrix();  zoomOut(x,y,save);  return save;}  }
class C{  @Override public Node cloneNode(boolean deep){  DocumentTypeImpl newnode=(DocumentTypeImpl)super.cloneNode(deep);  newnode.entities=entities.cloneMap(newnode);  newnode.notations=notations.cloneMap(newnode);  newnode.elements=elements.cloneMap(newnode);  return newnode;}  }
class C{  public static double sumSquareDev(double[] values,double target){  double sumsq=0d;  for (int i=0; i < values.length; i++) {    final double dev=values[i] - target;    sumsq+=(dev * dev);  }  return sumsq;}  }
class C{  public static void showNodeInTree(URL url,boolean allowFiles){  getTreePath(url,allowFiles,true);}  }
class C{  public void clear(){  int max=bits.length;  for (int i=0; i < max; i++) {    bits[i]=0;  }}  }
class C{  public static String timeToString(int hour,int min){  String theTime="The time is now, " + timeApprox(hour,min) + " "+ timeMin(hour,min)+ " "+ timeHour(hour,min)+ ", "+ timeOfDay(hour,min)+ ".";  return theTime;}  }
class C{  public int writeClassData(ClassData classData){  int off=data.position();  writeUleb128(classData.staticFields.length);  writeUleb128(classData.instanceFields.length);  writeUleb128(classData.directMethods.length);  writeUleb128(classData.virtualMethods.length);  writeFields(classData.staticFields);  writeFields(classData.instanceFields);  writeMethods(classData.directMethods);  writeMethods(classData.virtualMethods);  return off;}  }
class C{  public int addOrIncreaseItem(String productId,BigDecimal selectedAmount,BigDecimal quantity,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> features,Map<String,Object> attributes,Map<String,String> orderItemAttributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,String itemGroupNumber,String parentProductId,LocalDispatcher dispatcher) throws CartItemModifyException, ItemNotFoundException {  if (isReadOnlyCart()) {    throw new CartItemModifyException("Cart items cannot be changed");  }  selectedAmount=selectedAmount == null ? BigDecimal.ZERO : selectedAmount;  reservLength=reservLength == null ? BigDecimal.ZERO : reservLength;  reservPersons=reservPersons == null ? BigDecimal.ZERO : reservPersons;  ShoppingCart.ShoppingCartItemGroup itemGroup=this.getItemGroupByNumber(itemGroupNumber);  GenericValue supplierProduct=null;  for (int i=0; i < this.cartLines.size(); i++) {    ShoppingCartItem sci=cartLines.get(i);    if (sci.equals(productId,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,features,attributes,orderItemAttributes,prodCatalogId,selectedAmount,configWrapper,itemType,itemGroup,false)) {      BigDecimal newQuantity=sci.getQuantity().add(quantity);      try {        BigDecimal minQuantity=getMinimumOrderQuantity(getDelegator(),sci.getBasePrice(),productId);        if (newQuantity.compareTo(minQuantity) < 0) {          newQuantity=minQuantity;        }      } catch (      GenericEntityException e) {        Debug.logError(e,module);      }      if (sci.getItemType().equals("RENTAL_ORDER_ITEM")) {        String isAvailable=ShoppingCartItem.checkAvailability(productId,newQuantity,reservStart,reservLength,this);        if (isAvailable.compareTo("OK") != 0) {          Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productId",productId,"availableMessage",isAvailable);          String excMsg=UtilProperties.getMessage(ShoppingCartItem.resource,"item.product_not_available",messageMap,this.getLocale());          Debug.logInfo(excMsg,module);          throw new CartItemModifyException(isAvailable);        }      }      if (Debug.verboseOn())       Debug.logVerbose("Found a match for id " + productId + " on line "+ i+ ", updating quantity to "+ newQuantity,module);      sci.setQuantity(newQuantity,dispatcher,this);      if (getOrderType().equals("PURCHASE_ORDER")) {        supplierProduct=getSupplierProduct(productId,newQuantity,dispatcher);        if (supplierProduct != null && supplierProduct.getBigDecimal("lastPrice") != null) {          sci.setSupplierProductId(supplierProduct.getString("supplierProductId"));          sci.setBasePrice(supplierProduct.getBigDecimal("lastPrice"));          sci.setName(ShoppingCartItem.getPurchaseOrderItemDescription(sci.getProduct(),supplierProduct,this.getLocale()));        } else {          throw new CartItemModifyException("SupplierProduct not found");        }      }      return i;    }  }  ShoppingCartItem item=null;  if (getOrderType().equals("PURCHASE_ORDER")) {    supplierProduct=getSupplierProduct(productId,quantity,dispatcher);    if (supplierProduct != null || "_NA_".equals(this.getPartyId())) {      item=ShoppingCartItem.makePurchaseOrderItem(Integer.valueOf(0),productId,selectedAmount,quantity,features,attributes,prodCatalogId,configWrapper,itemType,itemGroup,dispatcher,this,supplierProduct,shipBeforeDate,shipAfterDate,cancelBackOrderDate);    } else {      throw new CartItemModifyException("SupplierProduct not found");    }  } else {    try {      BigDecimal minQuantity=getMinimumOrderQuantity(getDelegator(),null,productId);      if (quantity.compareTo(minQuantity) < 0) {        quantity=minQuantity;      }    } catch (    GenericEntityException e) {      Debug.logError(e,module);    }    item=ShoppingCartItem.makeItem(Integer.valueOf(0),productId,selectedAmount,quantity,null,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,shipBeforeDate,shipAfterDate,features,attributes,prodCatalogId,configWrapper,itemType,itemGroup,dispatcher,this,Boolean.TRUE,Boolean.TRUE,parentProductId,Boolean.FALSE,Boolean.FALSE);  }  if (UtilValidate.isNotEmpty(orderItemAttributes)) {    for (    Entry<String,String> entry : orderItemAttributes.entrySet()) {      item.setOrderItemAttribute(entry.getKey(),entry.getValue());    }  }  return this.addItem(0,item);}  }
class C{  public StartupException(){  super();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_LIMIT_SALE_TEST_DESC02(String value0){  return new SM_SYSTEM_MESSAGE(1400389,value0);}  }
class C{  public WeakKeyReference(Object key){  super(key);  hashCode=key.hashCode();}  }
class C{  public final boolean addAlarmValue(@Valid final AlarmValueImpl alarmValue){  if (alarmValue.getTagId().equals(tagId)) {    return alarmValues.add(alarmValue);  }  return false;}  }
class C{  public float[] mapVector(float x,float y){  float[] result=new float[]{x,y};  result[0]=MATRIX[MSCALE_X] * x + MATRIX[MSKEW_X] * y;  result[1]=MATRIX[MSKEW_Y] * x + MATRIX[MSCALE_Y] * y;  return result;}  }
class C{  public synchronized void allowThreadDecoding(ThreadSet threads){  for (  Thread t : threads) {    allowThreadDecoding(t);  }}  }
class C{  public ObjectFactory(){}  }
class C{  public boolean remove(Object o){  throw new UnsupportedOperationException();}  }
class C{  public static boolean isOrSubOf(Class<?> objectClass,Class<?> parentClass){  while (objectClass != null) {    if (objectClass == parentClass)     return true;    objectClass=objectClass.getSuperclass();  }  return false;}  }
class C{  private void initModel(){  this.userModel=new UserObject();  this.loadModel=new LoadObject(LoadObject.LOADING_STATE);}  }
class C{  public boolean hasAttribute(final WebElement element,final String attribute,int timeout){  return isConditionMet(null,timeout);}  }
class C{  @Override public void close() throws IOException {  throw exception;}  }
class C{  public VideoReorderAlbumsQuery before(Integer value){  return unsafeParam("before",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_HOUSING_FLOWERPOT_GOAL(int nameId){  return new SM_SYSTEM_MESSAGE(1401333,calculateNameId(nameId));}  }
class C{  public void disableDashedLine(){  mDashPathEffect=null;}  }
class C{  public void onMenuDismissed(){  mReloadMenuItem=null;}  }
class C{  protected void wrapContent(){  mWidget.setMinWidth(100);  mWidget.setMinHeight(30);  int tw=mWidget.getMinWidth();  int th=mWidget.getMinHeight();  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {    mWidget.setWidth(tw);  }  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {    mWidget.setHeight(th);  }  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {    if (mWidget.getWidth() <= mWidget.getMinWidth()) {      mWidget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);    }  }  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {    if (mWidget.getHeight() <= mWidget.getMinHeight()) {      mWidget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);    }  }  mWidget.setBaselineDistance(0);}  }
class C{  public static ConfigAspectBase create(Model model){  return new UsageConfigAspect(model);}  }
class C{  @Override protected final boolean writeData(ByteBuffer data){synchronized (guard) {    LsServerPacket packet=sendMsgQueue.pollFirst();    if (packet == null) {      return false;    }    packet.write(this,data);    return true;  }}  }
class C{  public SerialMessage checkVersion(ZWaveCommandClass commandClass){  ZWaveVersionCommandClass versionCommandClass=(ZWaveVersionCommandClass)this.getNode().getCommandClass(CommandClass.VERSION);  if (versionCommandClass == null) {    logger.debug(String.format("NODE %d: Version command class not supported," + "reverting to version 1 for command class %s (0x%02x)",getNode().getNodeId(),commandClass.getCommandClass().getLabel(),commandClass.getCommandClass().getKey()));    return null;  }  return versionCommandClass.getCommandClassVersionMessage(commandClass.getCommandClass());}  }
class C{  public static final String roll(String isoString,String fmt,int field,boolean up) throws ParseException {  Calendar cal=GregorianCalendar.getInstance(TimeZone.getTimeZone("GMT"));  cal.setTime(stringToDate(isoString,fmt));  cal.roll(field,up);  return dateToString(cal.getTime(),fmt);}  }
class C{  public void save(File directory){  File f=getFile();  if (f != null && f.isFile()) {    File saveFile=Utils.getUniqueFile(directory,f.getName());    Utils.copyFile(f,saveFile);    getStorage().saveCustomPropertiesTo(new File(saveFile.getAbsolutePath() + Storage.DEFAULT_PROPERTIES_EXT));  }}  }
class C{  public GroupsJoinQuery notSure(Boolean value){  return unsafeParam("not_sure",value);}  }
class C{  public boolean profiling(){  return soot.PhaseOptions.getBoolean(options,"profiling");}  }
class C{  public boolean isValidInet4Address(String inet4Address){  String[] groups=ipv4Validator.match(inet4Address);  if (groups.length == 0) {    return false;  }  for (int i=0; i <= 3; i++) {    String ipSegment=groups[i];    if (ipSegment == null || ipSegment.length() == 0) {      return false;    }    int iIpSegment;    try {      iIpSegment=Integer.parseInt(ipSegment);    } catch (    NumberFormatException e) {      return false;    }    if (iIpSegment > 255) {      return false;    }    if (ipSegment.length() > 1 && ipSegment.startsWith("0")) {      return false;    }  }  return true;}  }
class C{  public short min(){  if (size() == 0) {    throw new IllegalStateException("cannot find minimum of an empty list");  }  short min=Short.MAX_VALUE;  for (int i=0; i < _pos; i++) {    if (_data[i] < min) {      min=_data[i];    }  }  return min;}  }
class C{  @Override public boolean equals(Object desc){  if (!(desc instanceof XMLGrammarDescription))   return false;  if (!getGrammarType().equals(((XMLGrammarDescription)desc).getGrammarType())) {    return false;  }  XMLDTDDescription dtdDesc=(XMLDTDDescription)desc;  if (fRootName != null) {    if ((dtdDesc.fRootName) != null && !dtdDesc.fRootName.equals(fRootName)) {      return false;    } else     if (dtdDesc.fPossibleRoots != null && !dtdDesc.fPossibleRoots.contains(fRootName)) {      return false;    }  } else   if (fPossibleRoots != null) {    if (dtdDesc.fRootName != null) {      if (!fPossibleRoots.contains(dtdDesc.fRootName)) {        return false;      }    } else     if (dtdDesc.fPossibleRoots == null) {      return false;    } else {      boolean found=false;      final int size=fPossibleRoots.size();      for (int i=0; i < size; ++i) {        String root=(String)fPossibleRoots.get(i);        found=dtdDesc.fPossibleRoots.contains(root);        if (found)         break;      }      if (!found)       return false;    }  }  if (fExpandedSystemId != null) {    if (!fExpandedSystemId.equals(dtdDesc.fExpandedSystemId)) {      return false;    }  } else   if (dtdDesc.fExpandedSystemId != null) {    return false;  }  if (fPublicId != null) {    if (!fPublicId.equals(dtdDesc.fPublicId)) {      return false;    }  } else   if (dtdDesc.fPublicId != null) {    return false;  }  return true;}  }
class C{  public Vector normalize(){  double length=length();  x/=length;  y/=length;  z/=length;  return this;}  }
class C{  public static boolean hasJellyBeanMr2(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2;}  }
class C{  public TObjectIntHashMap(){  super();}  }
class C{  protected void skipped(AssumptionViolatedException e,Description description){}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  private boolean hasProxySettings(Properties settings){  String proxyHost=settings.getProperty("/system/http_proxy/host",null);  return proxyHost != null && proxyHost.length() > 0;}  }
class C{  private void layout(int width,int height){  int itemsWidth=width - 2 * PADDING;  itemsLayout.layout(0,0,itemsWidth,height);}  }
class C{  public ResolutionForwarder(LSResourceResolver entityResolver){  setEntityResolver(entityResolver);}  }
class C{  private void processCall(PathEdge<N,D> edge){  final D d1=edge.factAtSource();  final N n=edge.getTarget();  logger.trace("Processing call to {}",n);  final D d2=edge.factAtTarget();  EdgeFunction<V> f=jumpFunction(edge);  Collection<N> returnSiteNs=icfg.getReturnSitesOfCallAt(n);  Collection<M> callees=icfg.getCalleesOfCallAt(n);  for (  M sCalledProcN : callees) {    FlowFunction<D> function=flowFunctions.getCallFlowFunction(n,sCalledProcN);    flowFunctionConstructionCount++;    Set<D> res=computeCallFlowFunction(function,d1,d2);    Collection<N> startPointsOf=icfg.getStartPointsOf(sCalledProcN);    for (    N sP : startPointsOf) {      for (      D d3 : res) {        propagate(d3,sP,d3,EdgeIdentity.<V>v(),n,false);        Set<Cell<N,D,EdgeFunction<V>>> endSumm;synchronized (incoming) {          addIncoming(sP,d3,n,d2);          endSumm=new HashSet<Table.Cell<N,D,EdgeFunction<V>>>(endSummary(sP,d3));        }        for (        Cell<N,D,EdgeFunction<V>> entry : endSumm) {          N eP=entry.getRowKey();          D d4=entry.getColumnKey();          EdgeFunction<V> fCalleeSummary=entry.getValue();          for (          N retSiteN : returnSiteNs) {            FlowFunction<D> retFunction=flowFunctions.getReturnFlowFunction(n,sCalledProcN,eP,retSiteN);            flowFunctionConstructionCount++;            for (            D d5 : computeReturnFlowFunction(retFunction,d3,d4,n,Collections.singleton(d2))) {              EdgeFunction<V> f4=edgeFunctions.getCallEdgeFunction(n,d2,sCalledProcN,d3);              EdgeFunction<V> f5=edgeFunctions.getReturnEdgeFunction(n,sCalledProcN,eP,d4,retSiteN,d5);              EdgeFunction<V> fPrime=f4.composeWith(fCalleeSummary).composeWith(f5);              D d5_restoredCtx=restoreContextOnReturnedFact(d2,d5);              propagate(d1,retSiteN,d5_restoredCtx,f.composeWith(fPrime),n,false);            }          }        }      }    }  }  for (  N returnSiteN : returnSiteNs) {    FlowFunction<D> callToReturnFlowFunction=flowFunctions.getCallToReturnFlowFunction(n,returnSiteN);    flowFunctionConstructionCount++;    for (    D d3 : computeCallToReturnFlowFunction(callToReturnFlowFunction,d1,d2)) {      EdgeFunction<V> edgeFnE=edgeFunctions.getCallToReturnEdgeFunction(n,d2,returnSiteN,d3);      propagate(d1,returnSiteN,d3,f.composeWith(edgeFnE),n,false);    }  }}  }
class C{  public TupleManagerIterator(TupleManager tuples,IntIterator rows){  m_tuples=tuples;  m_rows=rows;}  }
class C{  public void testBoundaryEventSubscrptionsDeletedOnProcessInstanceDelete(){  String deploymentId1=deployBoundaryMessageTestProcess();  runtimeService.startProcessInstanceByKey("messageTest");  assertEquals("My Task",taskService.createTaskQuery().singleResult().getName());  String deploymentId2=deployBoundaryMessageTestProcess();  ProcessInstance processInstance2=runtimeService.startProcessInstanceByKey("messageTest");  assertEquals(2,taskService.createTaskQuery().count());  assertEquals(2,getAllEventSubscriptions().size());  runtimeService.deleteProcessInstance(processInstance2.getId(),"testing");  assertEquals("My Task",taskService.createTaskQuery().singleResult().getName());  assertEquals(1,getAllEventSubscriptions().size());  runtimeService.messageEventReceived("myMessage",getExecutionIdsForMessageEventSubscription("myMessage").get(0));  assertEquals(0,getAllEventSubscriptions().size());  assertEquals("Task after message",taskService.createTaskQuery().singleResult().getName());  cleanup(deploymentId1,deploymentId2);}  }
class C{  public static DateFormat toTimeFormat(String timeFormat,TimeZone tz,Locale locale){  DateFormat df=null;  if (UtilValidate.isEmpty(timeFormat)) {    df=DateFormat.getTimeInstance(DateFormat.MEDIUM,locale);  } else {    df=new SimpleDateFormat(timeFormat,locale == null ? Locale.getDefault() : locale);  }  df.setTimeZone(tz);  return df;}  }
class C{  protected void synchronizeChildren(){  needsSyncChildren(false);}  }
class C{  @Override public DocumentFragment createDocumentFragment(){  return new DocumentFragmentImpl(this);}  }
class C{  public static List<Window> windows(String words,TokenizerFactory tokenizerFactory,int windowSize){  Tokenizer tokenizer=tokenizerFactory.create(words);  List<String> list=new ArrayList<>();  while (tokenizer.hasMoreTokens())   list.add(tokenizer.nextToken());  if (list.isEmpty())   throw new IllegalStateException("No tokens found for windows");  return windows(list,windowSize);}  }
class C{  public static Map<String,Object> sendProcessNotification(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  String adminEmailList=(String)context.get("adminEmailList");  String assignedToUser=(String)context.get("assignedPartyId");  String workEffortId=(String)context.get("workEffortId");  Locale locale=(Locale)context.get("locale");  GenericValue workEffort=null;  GenericValue orderHeader=null;  try {    workEffort=EntityQuery.use(delegator).from("WorkEffort").where("workEffortId",workEffortId).queryOne();    String sourceReferenceId=workEffort.getString("sourceReferenceId");    if (sourceReferenceId != null)     orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",sourceReferenceId).queryOne();  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemWithEntityLookup",locale));  }  GenericValue party=null;  Collection<GenericValue> assignedToEmails=null;  try {    party=EntityQuery.use(delegator).from("Party").where("partyId",assignedToUser).queryOne();  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemWithEntityLookup",locale));  }  if (party != null) {    assignedToEmails=ContactHelper.getContactMechByPurpose(party,"PRIMARY_EMAIL",false);  }  Map<String,Object> templateData=new HashMap<String,Object>(context);  templateData.putAll(orderHeader);  templateData.putAll(workEffort);  templateData.put("omgStatusId",workEffort.getString("currentStatusId"));  List<GenericValue> assignments=null;  if (workEffort != null) {    try {      assignments=workEffort.getRelated("WorkEffortPartyAssignment",null,null,false);    } catch (    GenericEntityException e1) {      Debug.logError(e1,"Problems getting assignements",module);    }  }  templateData.put("assignments",assignments);  StringBuilder emailList=new StringBuilder();  if (assignedToEmails != null) {    for (    GenericValue ct : assignedToEmails) {      if (ct != null && ct.get("infoString") != null) {        if (emailList.length() > 1)         emailList.append(",");        emailList.append(ct.getString("infoString"));      }    }  }  if (adminEmailList != null) {    if (emailList.length() > 1)     emailList.append(",");    emailList.append(adminEmailList);  }  String ofbizHome=System.getProperty("ofbiz.home");  String templateName=ofbizHome + "/applications/order/email/default/emailprocessnotify.ftl";  Map<String,Object> sendMailContext=new HashMap<String,Object>();  sendMailContext.put("sendTo",emailList.toString());  sendMailContext.put("sendFrom","workflow@ofbiz.org");  sendMailContext.put("subject","Workflow Notification");  sendMailContext.put("templateName",templateName);  sendMailContext.put("templateData",templateData);  try {    dispatcher.runAsync("sendGenericNotificationEmail",sendMailContext);  } catch (  GenericServiceException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderSendMailServiceFailed",locale) + e.getMessage());  }  return ServiceUtil.returnSuccess();}  }
class C{  private void loadMore(){  isLoadingData=true;  isLoadingMoreData=true;  mOnLoadMoreListener.onLoadMore();}  }
class C{  static public Document convertToClusterConfiguration(Document clusterXMLDomElement,InputStream clusterXSLPolicy) throws IOException, TransformerConfigurationException, TransformerException, ParserConfigurationException, SAXException {  Document rootDoc=(Document)XSLTConverter.transformDOM2DOM(clusterXMLDomElement,clusterXSLPolicy);  return rootDoc;}  }
class C{  @Override protected RemoteOperationResult run(OwnCloudClient client){  RemoteOperationResult result=null;  mFile=getStorageManager().getFileByPath(mRemotePath);  try {    if (!isValidNewName()) {      return new RemoteOperationResult(ResultCode.INVALID_LOCAL_FILE_NAME);    }    String parent=(new File(mFile.getRemotePath())).getParent();    parent=(parent.endsWith(OCFile.PATH_SEPARATOR)) ? parent : parent + OCFile.PATH_SEPARATOR;    mNewRemotePath=parent + mNewName;    if (mFile.isFolder()) {      mNewRemotePath+=OCFile.PATH_SEPARATOR;    }    if (getStorageManager().getFileByPath(mNewRemotePath) != null) {      return new RemoteOperationResult(ResultCode.INVALID_OVERWRITE);    }    RenameRemoteFileOperation operation=new RenameRemoteFileOperation(mFile.getFileName(),mFile.getRemotePath(),mNewName,mFile.isFolder());    result=operation.execute(client);    if (result.isSuccess()) {      if (mFile.isFolder()) {        getStorageManager().moveLocalFile(mFile,mNewRemotePath,parent);      } else {        saveLocalFile();      }    }  } catch (  IOException e) {    Log_OC.e(TAG,"Rename " + mFile.getRemotePath() + " to "+ ((mNewRemotePath == null) ? mNewName : mNewRemotePath)+ ": "+ ((result != null) ? result.getLogMessage() : ""),e);  }  return result;}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public NewsfeedGetSuggestedSourcesQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Search_ME_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200558,skilltarget,skillcaster,skillname);}  }
class C{  public GroupsEditQuery rss(String value){  return unsafeParam("rss",value);}  }
class C{  public static List<String> readLines(InputStream input,Charset encoding) throws IOException {  InputStreamReader reader=new InputStreamReader(input,Charsets.toCharset(encoding));  return readLines(reader);}  }
class C{  private void addCallbackMethod(String layoutClass,AndroidMethod callbackMethod){  Set<SootMethodAndClass> methods=this.callbackMethods.get(layoutClass);  if (methods == null) {    methods=new HashSet<SootMethodAndClass>();    this.callbackMethods.put(layoutClass,methods);  }  methods.add(new AndroidMethod(callbackMethod));}  }
class C{  public boolean isTiltEnabled(){  return mTiltEnabled;}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml"}) public void testTaskIdentityLinks() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  taskService.addCandidateUser(task.getId(),"kermit");  taskService.addCandidateGroup(task.getId(),"sales");  assertEquals(6,listener.getEventsReceived().size());  ActivitiEntityEvent event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  assertTrue(event.getEntity() instanceof IdentityLink);  IdentityLink link=(IdentityLink)event.getEntity();  assertEquals("kermit",link.getUserId());  assertEquals("candidate",link.getType());  assertEquals(task.getId(),link.getTaskId());  assertEquals(task.getExecutionId(),event.getExecutionId());  assertEquals(task.getProcessDefinitionId(),event.getProcessDefinitionId());  assertEquals(task.getProcessInstanceId(),event.getProcessInstanceId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  assertEquals("kermit",link.getUserId());  assertEquals("candidate",link.getType());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(4);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  assertTrue(event.getEntity() instanceof IdentityLink);  link=(IdentityLink)event.getEntity();  assertEquals("sales",link.getGroupId());  assertEquals("candidate",link.getType());  assertEquals(task.getId(),link.getTaskId());  assertEquals(task.getExecutionId(),event.getExecutionId());  assertEquals(task.getProcessDefinitionId(),event.getProcessDefinitionId());  assertEquals(task.getProcessInstanceId(),event.getProcessInstanceId());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(5);  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  assertEquals("sales",link.getGroupId());  assertEquals("candidate",link.getType());  listener.clearEventsReceived();  runtimeService.deleteProcessInstance(processInstance.getId(),"test");  assertEquals(3,listener.getEventsReceived().size());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());}  }
class C{  public DatatypeConfigurationException(){  super();}  }
class C{  private static String mangleName(String origName) throws IllegalArgumentException {  final char dot='.';  final char dotReplacement='_';  StringBuffer mangledName=new StringBuffer(origName);  int replacements=0;  int lastDot=origName.lastIndexOf(dot);  for (int nextDot=lastDot; (nextDot=origName.lastIndexOf(dot,nextDot - 1)) >= 0; ) {    mangledName.setCharAt(nextDot,dotReplacement);    replacements++;  }  if (replacements <= 0) {    throw new IllegalArgumentException("AltClassLoader.mangleName()'s crude classname mangling cannot deal with " + origName);  }  return mangledName.toString();}  }
class C{  public String toString(){  StringBuffer sbuf=new StringBuffer();  sbuf.append("Schema[");  for (int i=0; i < m_size; ++i) {    if (i > 0)     sbuf.append(' ');    sbuf.append('(').append(m_names[i]).append(", ");    sbuf.append(m_types[i].getName()).append(", ");    sbuf.append(m_dflts[i]).append(')');  }  sbuf.append(']');  return sbuf.toString();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Blind_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200442,skilltarget);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  protected LocalResource(IResource resource){  Assert.isNotNull(resource);  this.resource=resource;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public static void show(final Activity activity){  show(activity,Placement.getDefaultPlacement());}  }
class C{  private void printLocalsInBody(Body body,UnitPrinter up){{    Map<Type,List<Local>> typeToLocals=new DeterministicHashMap<Type,List<Local>>(body.getLocalCount() * 2 + 1,0.7f);{      Iterator<Local> localIt=body.getLocals().iterator();      while (localIt.hasNext()) {        Local local=localIt.next();        List<Local> localList;        Type t=local.getType();        if (typeToLocals.containsKey(t))         localList=typeToLocals.get(t); else {          localList=new ArrayList<Local>();          typeToLocals.put(t,localList);        }        localList.add(local);      }    }{      Iterator<Type> typeIt=typeToLocals.keySet().iterator();      while (typeIt.hasNext()) {        Type type=typeIt.next();        List<Local> localList=typeToLocals.get(type);        Object[] locals=localList.toArray();        up.type(type);        up.literal(" ");        for (int k=0; k < locals.length; k++) {          if (k != 0)           up.literal(", ");          up.local((Local)locals[k]);        }        up.literal(";");        up.newline();      }    }    if (!typeToLocals.isEmpty()) {      up.newline();    }  }}  }
class C{  public static <X,Y>boolean containsSuperclass(Set<? extends Class<? extends Y>> classes,X subclassInstance){  Class subclass=subclassInstance.getClass();  for (  Class<? extends Y> classs : classes)   if (classs.isAssignableFrom(subclass))   return true;  return false;}  }
class C{  public static float sign(float fValue){  return Math.signum(fValue);}  }
class C{  public ZWaveMultiLevelSwitchCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);  versionMax=MAX_SUPPORTED_VERSION;}  }
class C{  public boolean containsRow(R rowKey){  return dataMap.containsKey(rowKey);}  }
class C{  public static long count(String collection,Bson q){  TimeStamp t1=TimeStamp.create();  try {    MongoCollection<Document> c=MongoHelper.getCollection(collection);    if (c != null) {      return c.count(q);    }  }  finally {    if (log.isDebugEnabled())     log.debug("count, cost=" + t1.past() + "ms,  collection="+ collection+ ", query="+ q);  }  return 0;}  }
class C{  @Path(path="create",log=Model.METHOD_POST | Model.METHOD_GET) public void create(){  if (method.isPost()) {    JSON jo=new JSON();    try {      String file=createmodule();      jo.put(X.STATE,200);      jo.put("file",file);    } catch (    Exception e) {      log.error(e.getMessage(),e);      OpLog.error(module.class,"create",e.getMessage(),e,login,this.getRemoteHost());      jo.put(X.MESSAGE,e.getMessage());      jo.put(X.STATE,201);    }    this.response(jo);  } else {    this.set("id",Global.getInt("module.id.next",100));    this.show("/admin/module.create.html");  }}  }
class C{  public static byte[] packByteBufferIntoSingleByteArray(ByteBuffer[] byteBufferArr){  if (null == byteBufferArr || byteBufferArr.length == 0) {    return null;  }  int noOfCol=byteBufferArr.length;  short toDetermineLengthOfByteArr=2;  short offsetLen=(short)(noOfCol * 2 + toDetermineLengthOfByteArr);  int totalBytes=calculateTotalBytes(byteBufferArr) + offsetLen;  ByteBuffer buffer=ByteBuffer.allocate(totalBytes);  buffer.putShort((short)(totalBytes - toDetermineLengthOfByteArr));  buffer.putShort(offsetLen);  for (int index=0; index < byteBufferArr.length - 1; index++) {    ByteBuffer individualCol=byteBufferArr[index];    int noOfBytes=individualCol.capacity();    buffer.putShort((short)(offsetLen + noOfBytes));    offsetLen+=noOfBytes;    individualCol.rewind();  }  for (int index=0; index < byteBufferArr.length; index++) {    ByteBuffer individualCol=byteBufferArr[index];    buffer.put(individualCol.array());  }  buffer.rewind();  return buffer.array();}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  private void animateOffset(final V child,final int offset,boolean forceAnimation,boolean withAnimation){  if (!behaviorTranslationEnabled && !forceAnimation) {    return;  }  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {    ensureOrCancelObjectAnimation(child,offset,withAnimation);    translationObjectAnimator.start();  } else {    ensureOrCancelAnimator(child,withAnimation);    translationAnimator.translationY(offset).start();  }}  }
class C{  private BinomialProportion(){}  }
class C{  public void fromAngleNormalAxis(float angle,Vector3f axis){  float fCos=FastMath.cos(angle);  float fSin=FastMath.sin(angle);  float fOneMinusCos=((float)1.0) - fCos;  float fX2=axis.x * axis.x;  float fY2=axis.y * axis.y;  float fZ2=axis.z * axis.z;  float fXYM=axis.x * axis.y * fOneMinusCos;  float fXZM=axis.x * axis.z * fOneMinusCos;  float fYZM=axis.y * axis.z * fOneMinusCos;  float fXSin=axis.x * fSin;  float fYSin=axis.y * fSin;  float fZSin=axis.z * fSin;  m00=fX2 * fOneMinusCos + fCos;  m01=fXYM - fZSin;  m02=fXZM + fYSin;  m10=fXYM + fZSin;  m11=fY2 * fOneMinusCos + fCos;  m12=fYZM - fXSin;  m20=fXZM - fYSin;  m21=fYZM + fXSin;  m22=fZ2 * fOneMinusCos + fCos;}  }
class C{  public OrFileFilter(IOFileFilter filter1,IOFileFilter filter2){  if (filter1 == null || filter2 == null) {    throw new IllegalArgumentException("The filters must not be null");  }  this.fileFilters=new ArrayList<IOFileFilter>(2);  addFileFilter(filter1);  addFileFilter(filter2);}  }
class C{  @Nullable public byte[] loadWindowData(long timeout,TimeUnit unit){  CaptureByteArrayHandler handler=new CaptureByteArrayHandler(HandleViewDebug.CHUNK_VURT);  try {    HandleViewDebug.dumpViewHierarchy(client,title,false,true,handler);  } catch (  IOException e) {    return null;  }  return handler.getData(timeout,unit);}  }
class C{  public Bundler putSparseParcelableArray(String key,SparseArray<? extends Parcelable> value){  bundle.putSparseParcelableArray(key,value);  return this;}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public static String toString(InputStream input,Charset encoding) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw,encoding);  return sw.toString();}  }
class C{  public boolean isUnitQuaternion(double eps){  return Precision.equals(getNorm(),1d,eps);}  }
class C{  private void checkGraphMLSchema(Schema s) throws DataIOException {  for (int i=0; i < s.getColumnCount(); ++i) {    Class type=s.getColumnType(i);    if (TYPES.get(type) == null) {      throw new DataIOException("Data type unsupported by the " + "GraphML format: " + type.getName());    }  }}  }
class C{  public static List<String> splitSignature(String sig){  List<String> split=new ArrayList<String>();  int len=sig.length();  int i=0;  int j=0;  while (i < len) {    char c=sig.charAt(i);    if (c == 'L') {      j=i + 1;      while (j < len) {        c=sig.charAt(j);        if (c == ';') {          j++;          break;        } else         if (c == '<') {          break;        }        j++;      }    } else {      for (j=i + 1; j < len && sig.charAt(j) != 'L'; j++) {      }    }    split.add(sig.substring(i,j));    i=j;  }  return split;}  }
class C{  public void takeDown(){synchronized (System.out) {    System.out.println("Finished..." + (new SimpleDateFormat("yyyy.MM.dd HH:mm:ss")).format(new Date()));  }}  }
class C{  public TransformerConfigurationException(String message,SourceLocator locator,Throwable e){  super(message,locator,e);}  }
class C{  public SaveHttpEntity(){  super();  this.length=-1;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATK_Instant_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200716,skillcaster,num0,skillname);}  }
class C{  protected boolean isAlwaysNonNull(Value v){  return false;}  }
class C{  private void executeEvent(){  if (!noParamMap.isEmpty()) {    for (    Object object : noParamMap.keySet()) {      try {        noParamMap.get(object).invoke(object,(Object[])null);      } catch (      IllegalAccessException e) {        e.printStackTrace();      }catch (      InvocationTargetException e) {        e.printStackTrace();      }    }  }  if (!hasParamMap.isEmpty()) {    for (    Object object : hasParamMap.keySet()) {      try {        for (        Method m : hasParamMap.get(object).keySet()) {          m.invoke(object,hasParamMap.get(object).get(m));        }      } catch (      IllegalAccessException e) {        e.printStackTrace();      }catch (      InvocationTargetException e) {        e.printStackTrace();      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_Instant_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200976,skilltarget,num0,skillcaster,skillname);}  }
class C{  public static Object[] ordinalArray(TupleSet tuples,String field,Comparator cmp){  if (tuples instanceof Table) {    ColumnMetadata md=((Table)tuples).getMetadata(field);    return md.getOrdinalArray();  } else {    return ordinalArray(tuples.tuples(),field,cmp);  }}  }
class C{  @RequestMapping(value="/{namespace}",method=RequestMethod.DELETE) public void deleteNamespace(@PathVariable String namespace,HttpServletResponse response) throws WebMessageException {  if (!hasAccess(namespace)) {    throw new WebMessageException(WebMessageUtils.forbidden("The namespace '" + namespace + "' is protected, and you don't have the right authority to access it."));  }  if (!keyJsonValueService.getNamespaces().contains(namespace)) {    throw new WebMessageException(WebMessageUtils.notFound("The namespace '" + namespace + "' was not found."));  }  keyJsonValueService.deleteNamespace(namespace);  messageService.sendJson(WebMessageUtils.ok("Namespace '" + namespace + "' deleted."),response);}  }
class C{  public void close(){  if (this.zip != null) {    try {      this.zip.close();    } catch (    IOException e) {      System.err.println("Could not close apk file: " + e.getMessage());      e.printStackTrace();    }    this.zip=null;  }}  }
class C{  public static String toString(InputStream input) throws IOException {  return toString(input,Charset.defaultCharset());}  }
class C{  public static void stopMentoring(Player player){  PlayerGroup group=player.getPlayerGroup2();  if (group != null) {    group.onEvent(new PlayerGroupStopMentoringEvent(group,player));  }}  }
class C{  private static Bitmap scaleBitmapDown(Bitmap bitmap){  final int CALCULATE_BITMAP_MIN_DIMENSION=100;  final int minDimension=Math.min(bitmap.getWidth(),bitmap.getHeight());  if (minDimension <= CALCULATE_BITMAP_MIN_DIMENSION) {    return bitmap;  }  final float scaleRatio=CALCULATE_BITMAP_MIN_DIMENSION / (float)minDimension;  return Bitmap.createScaledBitmap(bitmap,Math.round(bitmap.getWidth() * scaleRatio),Math.round(bitmap.getHeight() * scaleRatio),false);}  }
class C{  private WriteEntriesResult writeEntryPackets(IEntryPacket[] entryPackets,WriteEntriesResult values,Context context,ServerTransaction transaction,long lease,long[] leases,int modifiers,SpaceContext sc,boolean reInsertedEntry,boolean fromWriteMultiple) throws RemoteException, TransactionException {  for (int i=0; i < entryPackets.length; ++i) {    if (values.isError(i))     continue;    try {      final long entryLease=leases != null ? leases[i] : lease;      WriteEntryResult writeResult=write(context,entryPackets[i],transaction,entryLease,modifiers,false,true,sc,false,true);      values.setResult(i,writeResult);    } catch (    UnusableEntryException e) {      values.setError(i,e);    }catch (    UnknownTypeException e) {      values.setError(i,e);    }catch (    EntryAlreadyInSpaceException e) {      values.setError(i,e);    }catch (    ProtectiveModeException e) {      values.setError(i,e);    }catch (    DuplicateIndexValueException e) {      values.setError(i,e);    }  }  return values;}  }
class C{  @Override public boolean isSingleton(){  return true;}  }
class C{  public ParametricTextualExtensionRecognizer(){  ;}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public static DOMException createDOMException(short code,Throwable cause){  DOMException de=new DOMException(code,cause != null ? cause.getMessage() : null);  if (cause != null && ThrowableMethods.fgThrowableMethodsAvailable) {    try {      ThrowableMethods.fgThrowableInitCauseMethod.invoke(de,cause);    } catch (    Exception e) {    }  }  return de;}  }
class C{  public static double distance(LatLng pointA,LatLng pointB){  double lat=Math.toRadians(pointA.latitude);  double lat2=Math.toRadians(pointB.latitude);  double difLat=Math.toRadians(pointB.latitude - pointA.latitude);  double difLong=Math.toRadians(pointB.longitude - pointA.longitude);  double a=(Math.pow(Math.sin(difLat / 2),2)) + (Math.cos(lat) * Math.cos(lat2) * Math.pow(Math.sin(difLong / 2),2));  double c=2 * Math.atan2(Math.sqrt(a),Math.sqrt(1 - a));  return EARTH * c;}  }
class C{  public synchronized void priorityWriteLock(){  while (activeWriter || activeReaders != 0) {    try {      waitingWriters++;      waitingPriorityWriters++;      try {        wait();      }  finally {        waitingWriters--;        waitingPriorityWriters--;      }    } catch (    InterruptedException e) {      throw new ConcurrentLockException("write lock interrupted in thread");    }  }  activeWriter=true;}  }
class C{  public static GsClientPacket handle(ByteBuffer data,GsConnection client){  GsClientPacket msg=null;  State state=client.getState();  int id=data.get() & 0xff;switch (state) {case CONNECTED:{switch (id) {case 0x00:        msg=new CM_CS_AUTH(data,client);      break;default :    unknownPacket(state,id);}break;}case AUTHED:{switch (id) {case 0x01:msg=new CM_PLAYER_AUTH(data,client);break;case 0x02:msg=new CM_PLAYER_LOGOUT(data,client);break;case 0x03:msg=new CM_PLAYER_GAG(data,client);break;default :unknownPacket(state,id);}break;}}if (msg != null) {msg.setConnection(client);msg.setBuffer(data);}return msg;}  }
class C{  public boolean isClosable(){  return isClosable;}  }
class C{  @Override public void endCDATA(Augmentations augs) throws XNIException {  if (fDocumentHandler != null && !fOnlyPassPrefixMappingEvents) {    fDocumentHandler.endCDATA(augs);  }}  }
class C{  private static boolean isInVerticalTargetZone(float x,float y,float handleX,float handleYStart,float handleYEnd,float targetRadius){  return Math.abs(x - handleX) <= targetRadius && y > handleYStart && y < handleYEnd;}  }
class C{  public HTTPTunnelConnector(String proxyHost,int proxyPort){  this(proxyHost,proxyPort,null,null);}  }
class C{  protected int insertionIndex(int val){  int hash, probe, index, length;  final byte[] states=_states;  final int[] set=_set;  length=states.length;  hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  index=hash % length;  if (states[index] == FREE) {    return index;  } else   if (states[index] == FULL && set[index] == val) {    return -index - 1;  } else {    probe=1 + (hash % (length - 2));    if (states[index] != REMOVED) {      do {        index-=probe;        if (index < 0) {          index+=length;        }      } while (states[index] == FULL && set[index] != val);    }    if (states[index] == REMOVED) {      int firstRemoved=index;      while (states[index] != FREE && (states[index] == REMOVED || set[index] != val)) {        index-=probe;        if (index < 0) {          index+=length;        }      }      return states[index] == FULL ? -index - 1 : firstRemoved;    }    return states[index] == FULL ? -index - 1 : index;  }}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  @Override public String toString(){  return toString(keySet().size());}  }
class C{  public static long hash(String s){  if (s == null) {    return 0;  }  int h=0;  int l=0;  int len=s.length();  char[] val=s.toCharArray();  for (int i=0; i < len; i++) {    h=31 * h + val[i];    l=29 * l + val[i];  }  return ((long)h << 32) | ((long)l & 0x0ffffffffL);}  }
class C{  protected void createSource(polyglot.ast.SourceFile source){  if (sootClass.hasTag("SourceFileTag")) {    soot.tagkit.SourceFileTag t=(soot.tagkit.SourceFileTag)sootClass.getTag("SourceFileTag");    t.setAbsolutePath(source.source().path());  } else {    soot.tagkit.SourceFileTag t=new soot.tagkit.SourceFileTag();    t.setAbsolutePath(source.source().path());    sootClass.addTag(t);  }  String simpleName=sootClass.getName();  Iterator declsIt=source.decls().iterator();  boolean found=false;  while (declsIt.hasNext()) {    Object next=declsIt.next();    if (next instanceof polyglot.ast.ClassDecl) {      polyglot.types.ClassType nextType=((polyglot.ast.ClassDecl)next).type();      if (Util.getSootType(nextType).equals(sootClass.getType())) {        createClassDecl((polyglot.ast.ClassDecl)next);        found=true;      }    }  }  if (!found) {    NestedClassListBuilder nestedClassBuilder=new NestedClassListBuilder();    source.visit(nestedClassBuilder);    Iterator<Node> nestedDeclsIt=nestedClassBuilder.getClassDeclsList().iterator();    while (nestedDeclsIt.hasNext() && !found) {      polyglot.ast.ClassDecl nextDecl=(polyglot.ast.ClassDecl)nestedDeclsIt.next();      polyglot.types.ClassType type=nextDecl.type();      if (type.isLocal() && !type.isAnonymous()) {        if (InitialResolver.v().getLocalClassMap().containsVal(simpleName)) {          createClassDecl(((polyglot.ast.LocalClassDecl)InitialResolver.v().getLocalClassMap().getKey(simpleName)).decl());          found=true;        }      } else {        if (Util.getSootType(type).equals(sootClass.getType())) {          createClassDecl(nextDecl);          found=true;        }      }    }    if (!found) {      if ((InitialResolver.v().getAnonClassMap() != null) && InitialResolver.v().getAnonClassMap().containsVal(simpleName)) {        polyglot.ast.New aNew=(polyglot.ast.New)InitialResolver.v().getAnonClassMap().getKey(simpleName);        if (aNew == null)         throw new RuntimeException("Could resolve class: " + simpleName);        createAnonClassDecl(aNew);        findReferences(aNew.body());        createClassBody(aNew.body());        handleFieldInits();      } else {      }    }  }}  }
class C{  public void closeDriver(){  if (mCamera != null) {    mCamera.release();    mInitialized=false;    mPreviewing=false;    mCamera=null;  }}  }
class C{  private void saveSettings(){  Properties pOut=new Properties();  pOut.setProperty("ModelDir",ModelsRootDirEdt.getText());  pOut.setProperty("SummaryDir",SummariesRootDirEdt.getText());  pOut.setProperty("OutputFile",OutputFileEdt.getText());  pOut.setProperty("Threads",ThreadCntEdt.getValue().toString());  pOut.setProperty("Silent",String.valueOf(SilentChk.isSelected()));  pOut.setProperty("ShowProgress",String.valueOf(ProgressChk.isSelected()));  pOut.setProperty("DoWord",String.valueOf(DoWordChk.isSelected()));  pOut.setProperty("DoChar",String.valueOf(DoCharChk.isSelected()));  pOut.setProperty("Use",OccurencesChk.isSelected() ? "Occurences" : "Distros");  pOut.setProperty("CharMin",String.valueOf(CharMinEdt.getValue()));  pOut.setProperty("CharMax",String.valueOf(CharMaxEdt.getValue()));  pOut.setProperty("CharDist",String.valueOf(CharDistEdt.getValue()));  pOut.setProperty("WordMin",String.valueOf(WordMinEdt.getValue()));  pOut.setProperty("WordMax",String.valueOf(WordMaxEdt.getValue()));  pOut.setProperty("WordDist",String.valueOf(WordDistEdt.getValue()));  try {    FileOutputStream fsOut=new FileOutputStream("AutoSummENGGUI.properties");    pOut.storeToXML(fsOut,"");    fsOut.flush();    fsOut.close();  } catch (  IOException ioe) {    ioe.printStackTrace(System.err);  }}  }
class C{  public static int computeEditDistance(String alignedQuery,String alignedReference){  int distance=0;  for (int i=0; i < alignedQuery.length(); i++) {    if (alignedQuery.charAt(i) == '-' || alignedReference.charAt(i) == '-' || alignedQuery.charAt(i) != alignedReference.charAt(i))     distance++;  }  return distance;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USE_AREA\"";  db.execSQL(sql);}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap();}  }
class C{  public AppsSendRequestQuery requestName(String value){  return unsafeParam("request_name",value);}  }
class C{  public T[][] derivatives(T x,int order) throws MathIllegalArgumentException, NullArgumentException {  MathUtils.checkNotNull(x);  if (abscissae.isEmpty()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.EMPTY_INTERPOLATION_SAMPLE);  }  final T zero=x.getField().getZero();  final T one=x.getField().getOne();  final T[] tj=MathArrays.buildArray(x.getField(),order + 1);  tj[0]=zero;  for (int i=0; i < order; ++i) {    tj[i + 1]=tj[i].add(one);  }  final T[][] derivatives=MathArrays.buildArray(x.getField(),order + 1,topDiagonal.get(0).length);  final T[] valueCoeff=MathArrays.buildArray(x.getField(),order + 1);  valueCoeff[0]=x.getField().getOne();  for (int i=0; i < topDiagonal.size(); ++i) {    T[] dividedDifference=topDiagonal.get(i);    final T deltaX=x.subtract(abscissae.get(i));    for (int j=order; j >= 0; --j) {      for (int k=0; k < derivatives[j].length; ++k) {        derivatives[j][k]=derivatives[j][k].add(dividedDifference[k].multiply(valueCoeff[j]));      }      valueCoeff[j]=valueCoeff[j].multiply(deltaX);      if (j > 0) {        valueCoeff[j]=valueCoeff[j].add(tj[j].multiply(valueCoeff[j - 1]));      }    }  }  return derivatives;}  }
class C{  public AndPredicate(Predicate p1,Predicate p2){  super(p1,p2);}  }
class C{  public boolean isContinuousFeature(int index){  return byteValuedDiscreteFeatures.length + shortValuedDiscreteFeatures.length <= index && index < byteValuedDiscreteFeatures.length + shortValuedDiscreteFeatures.length + continuousFeatures.length;}  }
class C{  public Builder styles(String styles){  this.styles=styles;  return this;}  }
class C{  protected Object receiveEvent(Object template) throws DataAccessException {  try {    return receiveOperationHandler.receive(template,getGigaSpace(),getReceiveTimeout());  } catch (  SpaceInterruptedException e) {    return null;  }}  }
class C{  @SuppressWarnings("unchecked") public void merge(SourceSinkDefinition other){  if (other.baseObjects != null && !other.baseObjects.isEmpty()) {    if (this.baseObjects == null)     this.baseObjects=new HashSet<>();    for (    AccessPathTuple apt : other.baseObjects)     this.baseObjects.add(apt);  }  if (other.parameters != null && other.parameters.length > 0) {    if (this.parameters == null)     this.parameters=new Set[this.method.getParameters().size()];    for (int i=0; i < other.parameters.length; i++) {      this.parameters[i].addAll(other.parameters[i]);    }  }  if (other.returnValues != null && !other.returnValues.isEmpty()) {    if (this.returnValues == null)     this.returnValues=new HashSet<>();    for (    AccessPathTuple apt : other.returnValues)     this.returnValues.add(apt);  }}  }
class C{  public static Function createFunction(String name){  Class type=(Class)s_functionTable.get(name);  if (type == null) {    throw new IllegalArgumentException("Unrecognized function name");  }  try {    return (Function)type.newInstance();  } catch (  InstantiationException e) {    throw new RuntimeException(e);  }catch (  IllegalAccessException e) {    throw new RuntimeException(e);  }}  }
class C{  public static boolean storageDirectoryExists(){  return new File(getStorageDirectoryString()).isDirectory();}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set layout=" + AlignmentViewer.AlignmentLayout.Mapping.toString() + ";zoom axis=both what=fit;");}  }
class C{  public String[] help() throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    if (!authenticated) {      throw new IllegalStateException("Client not authenticated");    }    communication.sendFTPCommand("HELP");    FTPReply r=communication.readFTPReply();    touchAutoNoopTimer();    if (!r.isSuccessCode()) {      throw new FTPException(r);    }    return r.getMessages();  }}  }
class C{  public static final double poundsToNewtons(double pound){  return pound * POUND_TO_NEWTON;}  }
class C{  public static Date stringToDate(String date,String... datePatterns){  for (  String datePattern : datePatterns) {    DateFormat format=new SimpleDateFormat(datePattern,Locale.ENGLISH);    try {      return format.parse(date);    } catch (    ParseException e) {      if (datePatterns.length > 1)       Log.e("Trying to parse ","Failed, trying next pattern"); else       Log.e("Trying to parse ","Failed to parse");    }  }  return null;}  }
class C{  public static Style brown(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_BROWN);  return style;}  }
class C{  public static String format(String refAllele,String altAllele,boolean noFormat){  String text="";  if (refAllele.length() == 1 && altAllele.length() == 1) {    text=altAllele;  } else   if (refAllele.length() == 1 && altAllele.length() > 1) {    text="I";  } else   if (refAllele.length() > 1 && altAllele.length() == 1) {    text="D";  }  if (noFormat) {    return text;  }  String formattedText="";  for (int i=0; i < text.length(); i++) {    char base=text.charAt(i);    if (base == 'A' || base == 'a') {      formattedText+="\033[107;34m" + base + "\033[0m";    } else     if (base == 'C' || base == 'c') {      formattedText+="\033[107;31m" + base + "\033[0m";    } else     if (base == 'G' || base == 'g') {      formattedText+="\033[107;32m" + base + "\033[0m";    } else     if (base == 'T' || base == 't') {      formattedText+="\033[107;33m" + base + "\033[0m";    } else {      formattedText+=base;    }  }  return formattedText;}  }
class C{  public static boolean modelSupportsInstantRun(@NotNull AndroidGradleModel model){  GradleVersion modelVersion=model.getModelVersion();  return modelVersion == null || modelVersion.compareTo(InstantRunManager.MINIMUM_GRADLE_PLUGIN_VERSION) >= 0;}  }
class C{  public static String toString(InputStream input,String encoding) throws IOException {  return toString(input,Charsets.toCharset(encoding));}  }
class C{  public Well512a(long seed){  super(K,seed);}  }
class C{  public GroupsInviteQuery(VkApiClient client,UserActor actor,int groupId,int userId){  super(client,"groups.invite",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  userId(userId);}  }
class C{  @Override public void onTransferProgress(long progressRate,long totalTransferredSoFar,long totalToTransfer,String filePath){  int percent=(int)(100.0 * ((double)totalTransferredSoFar) / ((double)totalToTransfer));  if (percent != mLastPercent) {    mNotificationBuilder.setProgress(100,percent,false);    String fileName=filePath.substring(filePath.lastIndexOf(FileUtils.PATH_SEPARATOR) + 1);    String text=String.format(getString(R.string.uploader_upload_in_progress_content),percent,fileName);    mNotificationBuilder.setContentText(text);    mNotificationManager.notify(R.string.uploader_upload_in_progress_ticker,mNotificationBuilder.build());  }  mLastPercent=percent;}  }
class C{  public JSONObject optJSONObject(String key){  Object object=this.opt(key);  return object instanceof JSONObject ? (JSONObject)object : null;}  }
class C{  public static void adjustBaseIndex(Zmat A){  BaseIndexNotChangeable=true;  A.basex=BaseIndex;  A.getProperties();}  }
class C{  public void testPojoCommonSetters(){  final Class<?> type=PojoCommonSetters.class;  PojoTypeInfo typeInfo=PojoTypeInfoRepository.getPojoTypeInfo(type);  assertPojoTypeInfo(typeInfo,type);  Assert.assertEquals("numOfProperties",5,typeInfo.getNumOfProperties());  assertPojoPropertyInfo(typeInfo,"class",Class.class,true,false);  assertPojoPropertyInfo(typeInfo,"propertySimple",String.class,true,true);  assertPojoPropertyInfo(typeInfo,"propertyOriginal",String.class,true,true);  assertPojoPropertyInfo(typeInfo,"propertyFluent",String.class,true,true);  assertPojoPropertyInfo(typeInfo,"propertyOverload",String.class,true,true);}  }
class C{  @Override @Test public <T>void testAggregate(){}  }
class C{  public static String stringToBase64(final String data){  return Base64.encodeBase64String(ConversionUtils.stringToArray(data));}  }
class C{  public static void write(File file,CharSequence data,boolean append) throws IOException {  write(file,data,Charset.defaultCharset(),append);}  }
class C{  public void reset(Matrix newCenter){  this.center=newCenter;  this.N=0;  this.sum=new Matrix(center.getRowDimension(),center.getColumnDimension());  this.squaredSum=new Matrix(center.getRowDimension(),center.getColumnDimension());}  }
class C{  protected Builder(@Nonnull final Builder builder){  Check.notNull(builder,"builder");  family=builder.family;  familyName=builder.familyName;  icon=builder.icon;  id=builder.id;  infoUrl=builder.infoUrl;  operatingSystem=builder.operatingSystem;  patterns=builder.patterns;  producer=builder.producer;  producerUrl=builder.producerUrl;  type=builder.type;  typeId=builder.typeId;  url=builder.url;}  }
class C{  public AemParsys removeComponent(int index){  try {    WebElement webElement=currentScope.findElements(By.cssSelector(SELECTOR_FOR_COMPONENT_IN_PARSYS)).get(index);    clickDeleteInContextMenu(webElement);    wait.withTimeout(Timeouts.SMALL).until(ExpectedConditions.stalenessOf(webElement));  } catch (  ArrayIndexOutOfBoundsException e) {    throw new NoSuchComponentException(e);  }  return this;}  }
class C{  private boolean taskInProgress(){  return tCur != null;}  }
class C{  public BOMHelper(){}  }
class C{  private boolean spaceOnPage(Page p){  byte[] header=this.readPageHeader(p);  for (  byte b : header) {    if (b != (byte)0xFF) {      return true;    }  }  return false;}  }
class C{  @Override public boolean skipString(String s) throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  final int length=s.length();  for (int i=0; i < length; i++) {    char c=fCurrentEntity.ch[fCurrentEntity.position++];    if (c != s.charAt(i)) {      fCurrentEntity.position-=i + 1;      return false;    }    if (i < length - 1 && fCurrentEntity.position == fCurrentEntity.count) {      System.arraycopy(fCurrentEntity.ch,fCurrentEntity.count - i - 1,fCurrentEntity.ch,0,i + 1);      if (load(i + 1,false)) {        fCurrentEntity.startPosition-=i + 1;        fCurrentEntity.position-=i + 1;        return false;      }    }  }  fCurrentEntity.columnNumber+=length;  return true;}  }
class C{  public static void writeByteArrayToFile(File file,byte[] data) throws IOException {  writeByteArrayToFile(file,data,false);}  }
class C{  public final static TypeDecl mostSpecificSuperClass(final ArrayList types){  ArrayList csList=new ArrayList();  for (Iterator iter=types.iterator(); iter.hasNext(); ) {    csList.add(mostSpecificSuperClass((TypeDecl)iter.next()));  }  greatestLowerBounds(csList);  if (csList.size() == 1) {    return (TypeDecl)csList.get(0);  } else {    return null;  }}  }
class C{  public static UByte valueOf(short value) throws NumberFormatException {  return valueOfUnchecked(rangeCheck(value));}  }
class C{  protected ShoppingCartItem(GenericValue product,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,Locale locale,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup){  this(product,additionalProductFeatureAndAppls,attributes,prodCatalogId,null,locale,itemType,itemGroup,null);  if (product != null) {    String productName=ProductContentWrapper.getProductContentAsText(product,"PRODUCT_NAME",this.locale,null,"raw");    if (UtilValidate.isEmpty(productName)) {      GenericValue parentProduct=this.getParentProduct();      if (parentProduct != null) {        productName=ProductContentWrapper.getProductContentAsText(parentProduct,"PRODUCT_NAME",this.locale,null,"raw");      }    }    if (productName == null) {      this.itemDescription="";    } else {      this.itemDescription=productName;    }  }}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public StyleWrapper(String workspace,String style){  super();  this.workspace=workspace;  this.style=style;}  }
class C{  public FieldMapper(InputStream jConfStream) throws IOException, ParseException {  try (InputStreamReader reader=new InputStreamReader(jConfStream)){    Yaml yaml=new Yaml();    Map jConf=(Map)yaml.load(reader);    if (jConf.containsKey(KEY_OVERRIDES)) {      ((Map)jConf.get(KEY_OVERRIDES)).forEach(null);    }    if (jConf.containsKey(KEY_MULTI_VAL_SUFFIX)) {      this.multiValSuffix=jConf.getOrDefault(KEY_MULTI_VAL_SUFFIX,DEFAULT_MULTI_VAL_SUFFIX).toString();    }    if (jConf.containsKey(KEY_TYPE_SUFFIX)) {      ((Map)jConf.get(KEY_TYPE_SUFFIX)).forEach(null);    }  } }  }
class C{  public static List<String> moduleInitInfo(){  return getList("modules.classes.list");}  }
class C{  public synchronized void clearHistory(){  history_=Optional.empty();}  }
class C{  private static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Could not decode from Base64.");    throw new IllegalArgumentException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }}  }
class C{  @Override public Schema schema(){  return schema;}  }
class C{  IEntryCacheInfo internalInsertEntryToCache(Context context,IEntryHolder entryHolder,boolean newEntry,TypeData typeData,IEntryCacheInfo pEntry,boolean pin){  IEntryCacheInfo res=null;  boolean recheckedTypeData=false;  boolean alreadyIn=false;  boolean insertedToEvictionStrategy=false;  boolean applySequenceNumber=newEntry && typeData.hasSequenceNumber() && !context.isFromReplication()&& !_engine.isLocalCache();  if (newEntry && typeData.isFifoSupport()) {    long xtnNum=getLatestTTransactionTerminationNum();    setFifoCreationXtnInfoForEntry(entryHolder,xtnNum);    if (context.getRecentFifoObject() != null)     context.getRecentFifoObject().setFifoXtnNumber(xtnNum);  }  try {    while (true) {      insertedToEvictionStrategy=false;      alreadyIn=false;      IEntryCacheInfo oldEntry=_entries.putIfAbsent(pEntry.getUID(),pEntry);      if (oldEntry == null)       break;      alreadyIn=true;      if (useRecentDeletes() && newEntry && oldEntry.isRecentDelete()) {        if (_entries.replace(pEntry.getUID(),oldEntry,pEntry)) {          removeFromRecentDeletes(pEntry.getEntryHolder(this));          alreadyIn=false;          break;        }        throw new RuntimeException("internalInsertEntryToCache: recent deletes cannot be replaced uid=" + pEntry.getUID());      }      if (isEvictableCachePolicy() && oldEntry.isRemoving()) {        if (_evictionStrategy.requiresConcurrencyProtection())         ((EvictableEntryCacheInfo)oldEntry).verifyEntryRemovedFromStrategy();        _entries.remove(pEntry.getUID(),oldEntry);        continue;      }      if (useRecentDeletes() && !newEntry && oldEntry.isRecentDelete()) {        return null;      }      if (newEntry)       return (res=_entryAlreadyInSpaceIndication);      if (pin && !oldEntry.setPinned(true,!isMemorySpace())) {        continue;      }      return (res=oldEntry);    }    insertEntryReferences(context,pEntry,typeData,applySequenceNumber);    if (!recheckedTypeData && typeData.supportsDynamicIndexing() && typeData.isTypeDataReplaced()) {      recheckedTypeData=true;      typeData=_typeDataMap.get(entryHolder.getServerTypeDesc());      TypeDataIndex.reindexEntry(this,pEntry,typeData);    }    long expiration=pEntry.getEntryHolder(this).getEntryData().getExpirationTime();    int version=pEntry.getEntryHolder(this).getEntryData().getVersion();    _leaseManager.registerEntryLease(pEntry,expiration);    context.setWriteResult(new WriteEntryResult(pEntry.getUID(),version,expiration));    if (isEvictableCachePolicy())     addToEvictionStrategy(pEntry,newEntry);    insertedToEvictionStrategy=true;    if (newEntry && pEntry.getEntryHolder(this).getXidOriginated() != null) {      XtnData pXtn=pEntry.getEntryHolder(this).getXidOriginated().getXtnData();      pXtn.getNewEntries(true).add(pEntry);      lockEntry(pXtn,pEntry,context.getOperationID());      pEntry.getEntryHolder(this).getXidOriginated().setOperatedUpon();    }    if (isEvictableCachePolicy())     _cacheSize.incrementAndGet();    if (newEntry && pEntry.isOffHeapEntry() && isDirectPersistencyEmbeddedtHandlerUsed())     _engine.getReplicationNode().getDirectPesistencySyncHandler().getEmbeddedSyncHandler().onSpaceOpRemovePhantomIfExists(pEntry.getUID());    return (res=pEntry);  } catch (  Exception ex) {    pEntry.setRemoved();    pEntry.getEntryHolder(this).setDeleted(true);    try {      removeEntryReferences(pEntry,typeData,context.getNumOfIndexesInserted());    } catch (    Exception ex1) {    }    _entries.remove(pEntry.getUID(),pEntry);    if (isEvictableCachePolicy())     ((EvictableEntryCacheInfo)pEntry).notifyWaitersOnFailure();    if (newEntry && pEntry.getEntryHolder(this).getXidOriginated() != null) {      try {        disconnectEntryFromXtn(context,entryHolder,pEntry.getEntryHolder(this).getXidOriginated(),false);      } catch (      Exception ex1) {      }    }    if (_logger.isLoggable(Level.SEVERE))     _logger.log(Level.SEVERE," insertion entry problem uid=" + entryHolder.getUID() + " new="+ newEntry+ " pin="+ pin,ex);    if (ex instanceof RuntimeException)     throw (RuntimeException)ex; else     throw new RuntimeException(ex);  } finally {    if (res != pEntry && insertedToEvictionStrategy)     removeFromEvictionStrategy(pEntry);    if (newEntry && res == _entryAlreadyInSpaceIndication && typeData.isFifoSupport())     removeFifoXtnInfoForEntry(entryHolder);    if (res != null && res != _entryAlreadyInSpaceIndication && !alreadyIn && !pin && !pEntry.isRemoved()) {      if (isEvictableCachePolicy())       res.setInCache(!isMemorySpace());    }  }}  }
class C{  public String toString(){  return "CMUDiphoneVoice";}  }
class C{  private ULong(BigInteger value) throws NumberFormatException {  if (value.compareTo(MIN_VALUE) < 0 || value.compareTo(MAX_VALUE) > 0) {    throw new NumberFormatException();  } else {    this.value=value.longValue();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Disease_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200585,skillcaster,skillname);}  }
class C{  public final boolean isAccountOnGameServer(int accountId){  return accountsOnGameServer.containsKey(accountId);}  }
class C{  static public Node transformDOM2DOM(Document _DOMDoc,InputStream _XSLInputStream) throws TransformerException, TransformerConfigurationException, FileNotFoundException, IOException, ParserConfigurationException, SAXException {  Document convertedDoc=XmlUtils.getDocumentBuilder().newDocument();  if (tFactory == null) {    tFactory=TransformerFactory.newInstance();  }  if (!tFactory.getFeature(DOMSource.FEATURE) || !tFactory.getFeature(StreamResult.FEATURE)) {    throw new TransformerConfigurationException("The currently used XSL TransformerFactory does not support required features: " + System.getProperty("javax.xml.transform.TransformerFactory" + " Canceled the cluster XSL configuration transformation."));  }  Transformer transformer=tFactory.newTransformer(new StreamSource(_XSLInputStream));  DOMResult sr=new DOMResult(convertedDoc);  DOMSource domSource=new DOMSource(_DOMDoc);  transformer.transform(domSource,sr);  Node retDOMnode=sr.getNode();  validateClusterDocument(retDOMnode);  return retDOMnode;}  }
class C{  public UnknownDependencyException(final Throwable throwable){  super(throwable);}  }
class C{  public Value divide(Value num1,Value num2){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public String updateByExampleSelective(Map<String,Object> parameter){  User record=(User)parameter.get("record");  UserCriteria example=(UserCriteria)parameter.get("example");  SQL sql=new SQL();  sql.UPDATE("user");  if (record.getId() != null) {    sql.SET("id = #{record.id,jdbcType=INTEGER}");  }  if (record.getUsername() != null) {    sql.SET("username = #{record.username,jdbcType=VARCHAR}");  }  if (record.getPsw() != null) {    sql.SET("psw = #{record.psw,jdbcType=VARCHAR}");  }  applyWhere(sql,example,true);  return sql.toString();}  }
class C{  private boolean removeFilter(){  if (isFiltering()) {    currentEntries=entries;    filteredEntries=null;    return true;  }  return false;}  }
class C{  @Override public void onPause(){  super.onPause();  mapView.onPause();  stopLocationUpdates();}  }
class C{  public static float calculateHeight(float left,float right,float targetAspectRatio){  final float width=right - left;  final float height=width / targetAspectRatio;  return height;}  }
class C{  public Max(){  n=0;  value=Double.NaN;}  }
class C{  public Builder inertiaDeceleration(Number inertiaDeceleration){  this.inertiaDeceleration=inertiaDeceleration;  return this;}  }
class C{  @Deprecated public static void putJava2IANAMapping(String javaEncoding,String ianaEncoding){  fJava2IANAMap.put(javaEncoding,ianaEncoding);}  }
class C{  private void drawResultPoints(Bitmap barcode,float scaleFactor,Result rawResult){  ResultPoint[] points=rawResult.getResultPoints();  if (points != null && points.length > 0) {    Canvas canvas=new Canvas(barcode);    Paint paint=new Paint();    paint.setColor(getResources().getColor(R.color.result_points));    if (points.length == 2) {      paint.setStrokeWidth(4.0f);      drawLine(canvas,paint,points[0],points[1],scaleFactor);    } else     if (points.length == 4 && (rawResult.getBarcodeFormat() == BarcodeFormat.UPC_A || rawResult.getBarcodeFormat() == BarcodeFormat.EAN_13)) {      drawLine(canvas,paint,points[0],points[1],scaleFactor);      drawLine(canvas,paint,points[2],points[3],scaleFactor);    } else {      paint.setStrokeWidth(10.0f);      for (      ResultPoint point : points) {        if (point != null) {          canvas.drawPoint(scaleFactor * point.getX(),scaleFactor * point.getY(),paint);        }      }    }  }}  }
class C{  public static boolean create(String sid,long expired,int w,int h,File outputFile,int len) throws IOException {  if (outputFile == null) {    return false;  }  File dir=outputFile.getParentFile();  if (!dir.exists()) {    dir.mkdirs();  }  try {    String code=UID.random(len,VERIFY_CODES).toLowerCase();    outputFile.createNewFile();    FileOutputStream fos=new FileOutputStream(outputFile);    outputImage(w,h,fos,code.toUpperCase());    fos.close();    Cache.set("//captcha/" + sid,Code.create(code,expired));    return true;  } catch (  IOException e) {    throw e;  }}  }
class C{  @Override public void dataSourceLoaded(GeometryTypeEnum geometryType,boolean isConnectedToDataSourceFlag){  this.geometryType=geometryType;  featureList=DataSourceFactory.getDataSource().getFeatureSource();  userLayerFeatureListMap=DataSourceFactory.getDataSource().getUserLayerFeatureSource();  gridCoverage=DataSourceFactory.getDataSource().getGridCoverageReader();  calculateMapBounds();  CardLayout cardLayout=(CardLayout)mapPanel.getLayout();  if ((geometryType == GeometryTypeEnum.UNKNOWN) || !isConnectedToDataSourceFlag) {    cardLayout.show(mapPanel,NOMAP_PANEL);  } else {    cardLayout.show(mapPanel,MAP_PANEL);    internalRenderStyle();  }}  }
class C{  public static String rawDatabus(){  return format("%s|%s",SYSTEM,RAW_DATABUS);}  }
class C{  private void checkTheTicTacTocGameWin(int x,int y,int tag){  int _x=0;  int _y=0;  for (int i=x, j=y; ; i--, j--) {    _x=i;    _y=j;    if (i <= 0)     break;    if (j <= 0)     break;  }  for (int i=_y, j=_x; ; i++, j++) {    subCheckTheTicTacTocWin(tag,i,j);    if (i >= 8)     break;    if (j >= 11)     break;  }  _counter=0;  _x=x;  _y=0;  for (int i=_y, j=_x; i < 9; i++)   subCheckTheTicTacTocWin(tag,i,j);  _counter=0;  _x=0;  _y=y;  for (int i=_y, j=_x; j < 12; j++)   subCheckTheTicTacTocWin(tag,i,j);  _counter=0;  for (int i=x, j=y; ; i--, j++) {    _x=i;    _y=j;    if (i <= 0)     break;    if (j >= 8)     break;  }  for (int i=_y, j=_x; ; i--, j++) {    subCheckTheTicTacTocWin(tag,i,j);    if (i <= 0)     break;    if (j >= 11)     break;  }}  }
class C{  public Builder withSerializable(boolean serializable){  this.serializable=serializable;  return this;}  }
class C{  @Override public int read(byte[] bts,int off,int len) throws IOException {  try {    beforeRead(len);    int n=in.read(bts,off,len);    afterRead(n);    return n;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  public void clear(){  this.normal=null;  this.distance=0;  this.point1=null;  this.point2=null;}  }
class C{  public Builder integerColumnsMathOp(String newColumnName,MathOp mathOp,String... columnNames){  return transform(new IntegerColumnsMathOpTransform(newColumnName,mathOp,columnNames));}  }
class C{  public MessagesGetChatQuery chatId(Integer value){  return unsafeParam("chat_id",value);}  }
class C{  public static void debugLongInfo(String str){  debugLongInfo(DEFAULT_TAG,str);}  }
class C{  public PokemonGo(OkHttpClient client,long seed){  this(client,new SystemTimeImpl(),seed);}  }
class C{  private void unsetBoundsAction(){  NullBounds bounds=new NullBounds();synchronized (Simulation.LOCK) {    this.simulation.getWorld().setBounds(bounds);  }  this.bounds.setUserObject(bounds);  this.model.reload(this.bounds);}  }
class C{  public VideoReorderVideosQuery albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  protected void drawFilledPath(Canvas c,Path filledPath,int fillColor,int fillAlpha){  int color=(fillAlpha << 24) | (fillColor & 0xffffff);  if (clipPathSupported()) {    c.save();    c.clipPath(filledPath);    c.drawColor(color);    c.restore();  } else {    Paint.Style previous=mRenderPaint.getStyle();    int previousColor=mRenderPaint.getColor();    mRenderPaint.setStyle(Paint.Style.FILL);    mRenderPaint.setColor(color);    c.drawPath(filledPath,mRenderPaint);    mRenderPaint.setColor(previousColor);    mRenderPaint.setStyle(previous);  }}  }
class C{  public void checkConstraints() throws IOException {}  }
class C{  public boolean hasItemsOrItemFilters(){  return !items.isEmpty() || !itemFilters.isEmpty();}  }
class C{  public Tree(TreeSpecies species){  this(DEFAULT_TYPE,species,DEFAULT_DIRECTION);}  }
class C{  public void close() throws IOException {  stream.close();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_GIVEUP_QUEST(String value0){  return new SM_SYSTEM_MESSAGE(1300614,value0);}  }
class C{  @Override public void createEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,HashMap hAppearenceHistogram){  if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {    VertexImpl v=new VertexImpl();    v.setLabel(sStartNode);    try {      gGraph.add(v);    } catch (    Exception e) {      e.printStackTrace();    }    return;  }  Vertex vOldA=utils.locateVertexInGraph(gGraph,sStartNode);  Vertex vA;  if (vOldA != null)   vA=vOldA; else {    vA=new VertexImpl();    vA.setLabel(sStartNode);    try {      gGraph.add(vA);    } catch (    Exception e) {    }  }  java.util.Iterator iIter=lOtherNodes.iterator();  Double dDist=0.0;  while (iIter.hasNext()) {    dDist++;    VertexImpl vB=new VertexImpl();    vB.setLabel((String)iIter.next());    WeightedEdge weCorrectEdge=(WeightedEdge)gr.demokritos.iit.jinsect.utils.locateDirectedEdgeInGraph(gGraph,vA,vB);    try {      Distribution dTemp=null;      if (weCorrectEdge == null) {        dTemp=new Distribution();        dTemp.increaseValue(dDist,1.0);        weCorrectEdge=gGraph.addEdge(vA,vB,0.0);      } else {        dTemp=(Distribution)EdgeDistros.get(weCorrectEdge);        if (dTemp == null)         dTemp=new Distribution();        dTemp.increaseValue(dDist,1.0);      }      EdgeDistros.put(weCorrectEdge,dTemp);      if (EdgeDistros.get(weCorrectEdge) == null)       throw new NullPointerException("Added null edge distro...");      Distribution dProb=dTemp.getProbabilityDistribution();    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public MarketAddQuery(VkApiClient client,UserActor actor,int ownerId,String name,String description,int categoryId,float price,int mainPhotoId){  super(client,"market.add",AddResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  name(name);  description(description);  categoryId(categoryId);  price(price);  mainPhotoId(mainPhotoId);}  }
class C{  public static TableColumnInfo createTableMetadata(Connection connection,String schema,String tableName,String fullyQualifiedTableName) throws SQLException {  DatabaseMetaData metaData=connection.getMetaData();  ResultSet resultSet=null;  String catalog=null;  String dbSchema=null;  String dbName=null;  boolean tableExists=false;  try {    resultSet=metaData.getTables(null,schema,tableName,null);    if (resultSet.next()) {      catalog=resultSet.getString("TABLE_CAT");      dbSchema=resultSet.getString("TABLE_SCHEM");      dbName=resultSet.getString("TABLE_NAME");      if (dbSchema == null) {        dbSchema=schema;      }      if (resultSet.next()) {        throw new SQLException("Too many tables matching tablename '" + tableName + "' and schema '"+ schema+ "'.");      }      tableExists=true;    }  }  finally {    close(resultSet);  }  if (!tableExists) {    return null;  }  List columns=new ArrayList();  try {    resultSet=metaData.getColumns(null,schema,tableName,null);    while (resultSet.next()) {      String columnName=resultSet.getString("COLUMN_NAME");      int dataType=resultSet.getInt("DATA_TYPE");      int columnSize=resultSet.getInt("COLUMN_SIZE");      int scale=resultSet.getInt("DECIMAL_DIGITS");      int ordinalPosition=resultSet.getInt("ORDINAL_POSITION");      int nullable=resultSet.getInt("NULLABLE");      ColumnInfo columnInfo=new ColumnInfo(columnName,dataType,columnSize,columnSize,scale,ordinalPosition,nullable == DatabaseMetaData.columnNullable);      columns.add(columnInfo);    }  }  finally {    close(resultSet);  }  return new TableColumnInfo(catalog,dbSchema,dbName,(ColumnInfo[])columns.toArray(new ColumnInfo[columns.size()]));}  }
class C{  public WallGetCommentsQuery(VkApiClient client,int postId){  super(client,"wall.getComments",GetCommentsResponse.class);  postId(postId);}  }
class C{  @Override public void decl(char[] buff,int offset,int length) throws SAXException {  String s=new String(buff,offset,length);  String name=null;  String systemid=null;  String publicid=null;  String[] v=split(s);  if (v.length > 0 && "DOCTYPE".equalsIgnoreCase(v[0])) {    if (theDoctypeIsPresent)     return;    theDoctypeIsPresent=true;    if (v.length > 1) {      name=v[1];      if (v.length > 3 && "SYSTEM".equals(v[2])) {        systemid=v[3];      } else       if (v.length > 3 && "PUBLIC".equals(v[2])) {        publicid=v[3];        if (v.length > 4) {          systemid=v[4];        } else {          systemid="";        }      }    }  }  publicid=trimquotes(publicid);  systemid=trimquotes(systemid);  if (name != null) {    publicid=cleanPublicid(publicid);    theLexicalHandler.startDTD(name,publicid,systemid);    theLexicalHandler.endDTD();    theDoctypeName=name;    theDoctypePublicId=publicid;    if (theScanner instanceof Locator) {      theDoctypeSystemId=((Locator)theScanner).getSystemId();      try {        theDoctypeSystemId=new URL(new URL(theDoctypeSystemId),systemid).toString();      } catch (      Exception ignore) {      }    }  }}  }
class C{  public static Object fromXml(String str){  return xstream.fromXML(str);}  }
class C{  public void nextTable() throws SQLException {  if (tables.hasNext()) {    currentTable=tables.next();    openRows();  }}  }
class C{  public boolean isDrawTopYLabelEntryEnabled(){  return mDrawTopYLabelEntry;}  }
class C{  protected void animateToProjectedState(float velocity){  final float kickY=calculateAnimationDisplacement(velocity,BASE_ANIMATION_DURATION_MS);  final float projectedHeight=getHeight() - kickY;  PanelState projectedState=findNearestPanelStateFromHeight(projectedHeight);  if (projectedState == PanelState.MAXIMIZED && getPanelState() == PanelState.PEEKED && isPromoVisible() && supportsExpandedState()) {    projectedState=PanelState.EXPANDED;  }  final float displacement=getPanelHeightFromState(projectedState) - getHeight();  final long duration=calculateAnimationDuration(velocity,displacement);  animatePanelToState(projectedState,StateChangeReason.FLING,duration);}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  public JobRow(@NotNull JobField jobIdFieldName,@NotNull Map<JobField,String> fieldValueMap){  this(fieldValueMap.get(jobIdFieldName),fieldValueMap);}  }
class C{  public static List<ReadData> apply(final IReadBlockIterator iterator,final ProgressListener progress) throws IOException, CanceledException {  progress.setSubtask("Collecting reads:");  final List<ReadData> list=new LinkedList<>();  int countReads=0;{    progress.setMaximum(iterator.getMaximumProgress());    progress.setProgress(0);    while (iterator.hasNext()) {      final IReadBlock readBlock=iterator.next();      list.add(createReadData(countReads++,readBlock));      progress.setProgress(iterator.getProgress());    }  }  if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();  return list;}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set index=" + CalculateEcologicalIndices.EUCLIDEAN_NORMALIZED + ";");}  }
class C{  private void createThrow(polyglot.ast.Throw throwStmt){  soot.Value toThrow=base().createAggressiveExpr(throwStmt.expr(),false,false);  soot.jimple.ThrowStmt throwSt=soot.jimple.Jimple.v().newThrowStmt(toThrow);  body.getUnits().add(throwSt);  Util.addLnPosTags(throwSt,throwStmt.position());  Util.addLnPosTags(throwSt.getOpBox(),throwStmt.expr().position());}  }
class C{  protected IViewFinder createViewFinderView(Context context){  return new ViewFinderView(context);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public DartRandom(int seed){  super((EmptyConstructorMarker)null,thisType);  rnd=new java.util.Random(seed);}  }
class C{  public static <E>boolean addAllJson(Collection<JsonNode> nodes,Function<JsonNode,E> parser,Collection<E> output){  boolean success=true;  for (  JsonNode node : nodes) {    E parsed=parser.apply(node);    success&=(parsed != null);    if (success) {      output.add(parsed);    }  }  return success;}  }
class C{  public NewThreadAction(Runnable runnable,String name,boolean daemon){  this(systemThreadGroup,runnable,name,daemon);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DAY_CANNOT_OWN_TRADE(String value0){  return new SM_SYSTEM_MESSAGE(1400944,value0);}  }
class C{  public static float calculateRight(float left,float top,float bottom,float targetAspectRatio){  final float height=bottom - top;  return (targetAspectRatio * height) + left;}  }
class C{  protected void open() throws IOException {  assert cmd != null;  process=Runtime.getRuntime().exec(cmd);  if (System.getProperty("java.vendor").startsWith("Sun") && System.getProperty("java.version").startsWith("1.4.1")) {    try {      Thread.sleep(1);    } catch (    InterruptedException e) {    }  }  to=process.getOutputStream();  from=process.getInputStream();  errorLogger=new StreamLogger(process.getErrorStream(),name() + " err",ignorePattern);  errorLogger.start();}  }
class C{  private boolean isAlwaysNullBefore(Stmt s,Local base,LocalDefs defs){  List<Unit> baseDefs=defs.getDefsOfAt(base,s);  if (baseDefs.isEmpty())   return true;  for (  Unit u : baseDefs) {    if (!(u instanceof DefinitionStmt))     return false;    DefinitionStmt defStmt=(DefinitionStmt)u;    if (defStmt.getRightOp() != NullConstant.v())     return false;  }  return true;}  }
class C{  private Entry<V> cacheMiss(K key){  return resolver.createEntry(key);}  }
class C{  public DefaultErrorDTO(DefaultErrorDTO copy){  this(copy.code,copy.message,copy.metadata);}  }
class C{  public GroupsEditQuery edit(UserActor actor,int groupId){  return new GroupsEditQuery(getClient(),actor,groupId);}  }
class C{  public void add(FeatureFlag featureFlag){  NAMES_TO_VALUES.put(featureFlag.name() + "_ENABLED",featureFlag);}  }
class C{  public void markFooterViewHeight(View view){  this.mFooterView=view;  mFooterViewHeight=mFooterView.getHeight();  if (mFooterViewHeight <= 0) {    mFooterViewHeight=mFooterView.getLayoutParams().height;  } else {    this.mFooterView.getLayoutParams().height=mFooterViewHeight;  }}  }
class C{  public Object unmarshal(final String xml,final Class rootClass) throws XMLException {  Object readObject=null;  try {    if (xml == null || xml.isEmpty()) {      throw new XMLException("Cannot parse empty XML");    }    final DocumentBuilder db=DocumentBuilderFactory.newInstance().newDocumentBuilder();    final InputSource is=new InputSource();    is.setCharacterStream(new StringReader(xml));    readObject=unmarshaller.unmarshal(db.parse(is).getFirstChild(),rootClass);    if (readObject instanceof JAXBElement) {      readObject=((JAXBElement)readObject).getValue();    }  } catch (  JAXBException e) {    throw new XMLException("Cannot read the XML ",e);  }catch (  IllegalArgumentException e) {    throw new XMLException("Cannot read the XML ",e);  }catch (  SAXException e) {    throw new XMLException("Cannot read the XML ",e);  }catch (  IOException e) {    throw new XMLException("Cannot read the XML ",e);  }catch (  ParserConfigurationException e) {    throw new XMLException("Cannot read the XML ",e);  }  return readObject;}  }
class C{  private static void populate(){  String className=FileSystemExtension.class.getName();  try {    ExtensionInterface extension=(ExtensionInterface)Class.forName(className).newInstance();    extensionList.add(extension);  } catch (  InstantiationException|IllegalAccessException|ClassNotFoundException e) {    ConsoleManager.getInstance().exception(ExtensionFactory.class,e);  }}  }
class C{  public static void e(String tag,String msg){  e(tag,msg,null);}  }
class C{  public synchronized void addFunction(D sourceVal,N target,D targetVal,EdgeFunction<L> function){  assert sourceVal != null;  assert target != null;  assert targetVal != null;  assert function != null;  if (function.equalTo(allTop))   return;  Map<D,EdgeFunction<L>> sourceValToFunc=nonEmptyReverseLookup.get(target,targetVal);  if (sourceValToFunc == null) {    sourceValToFunc=new LinkedHashMap<D,EdgeFunction<L>>();    nonEmptyReverseLookup.put(target,targetVal,sourceValToFunc);  }  sourceValToFunc.put(sourceVal,function);  Map<D,EdgeFunction<L>> targetValToFunc=nonEmptyForwardLookup.get(sourceVal,target);  if (targetValToFunc == null) {    targetValToFunc=new LinkedHashMap<D,EdgeFunction<L>>();    nonEmptyForwardLookup.put(sourceVal,target,targetValToFunc);  }  targetValToFunc.put(targetVal,function);  Table<D,D,EdgeFunction<L>> table=nonEmptyLookupByTargetNode.get(target);  if (table == null) {    table=HashBasedTable.create();    nonEmptyLookupByTargetNode.put(target,table);  }  table.put(sourceVal,targetVal,function);}  }
class C{  public void stopBroker() throws Exception {  broker.stop();  broker.waitUntilStopped();}  }
class C{  public Ray(Vector2 start,Vector2 direction){  if (start == null)   throw new NullPointerException(Messages.getString("geometry.ray.nullStart"));  if (direction == null)   throw new NullPointerException(Messages.getString("geometry.ray.nullDirection"));  if (direction.isZero())   throw new IllegalArgumentException(Messages.getString("geometry.ray.zeroDirection"));  this.start=start;  this.direction=direction;}  }
class C{  private BitMatrix sampleGrid(BitMatrix image,ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomRight,ResultPoint bottomLeft) throws NotFoundException {  GridSampler sampler=GridSampler.getInstance();  int dimension=getDimension();  float low=dimension / 2.0f - nbCenterLayers;  float high=dimension / 2.0f + nbCenterLayers;  return sampler.sampleGrid(image,dimension,dimension,low,low,high,low,high,high,low,high,topLeft.getX(),topLeft.getY(),topRight.getX(),topRight.getY(),bottomRight.getX(),bottomRight.getY(),bottomLeft.getX(),bottomLeft.getY());}  }
class C{  private static void checkPolicyPermission(String policy,URL[] urls){  logger.entering(ActivateWrapper.class.getName(),"checkPolicyPermission",new Object[]{policy,urlsToPath(urls)});  Permission perm=new SharedActivationPolicyPermission(policy);  Certificate[] certs=null;  CodeSource cs=null;  ProtectionDomain pd=null;  for (int i=0; i < urls.length; i++) {    cs=new CodeSource(urls[i],certs);    pd=new ProtectionDomain(cs,null,null,null);    logger.log(Level.FINEST,"Checking protection domain: {0}",pd);    if (!pd.implies(perm)) {      SecurityException se=new SecurityException("ProtectionDomain " + pd + " does not have required permission: "+ perm);      logger.throwing(ActivateWrapper.class.getName(),"checkPolicyPermission",se);      throw se;    }  }  logger.exiting(ActivateWrapper.class.getName(),"checkPolicyPermission");}  }
class C{  private void addChatMatchSpecToRewardStructure(ChatMatchSpec c){  Float reward=c.getReward().floatValue();  Pattern pattern=Pattern.compile(c.getRegex(),Pattern.CASE_INSENSITIVE);  patternMap.put(pattern,reward);}  }
class C{  public Boolean deleteCustomer(EntityManager em,String id){  Boolean status=true;  Customer bupa=null;  try {    if (!em.getTransaction().isActive()) {      em.getTransaction().begin();    }    bupa=em.find(Customer.class,id);    em.remove(bupa);    em.getTransaction().commit();  } catch (  Exception e) {    status=false;    logger.error("Error occured during delete of Business Partner. Detailed info: " + e);  }  return status;}  }
class C{  @Override public synchronized void removeAll(){  DefaultTreeModel model=(DefaultTreeModel)getModel();  DefaultMutableTreeNode root=(DefaultMutableTreeNode)model.getRoot();  root.removeAllChildren();  model.nodeStructureChanged(root);  nodes.clear();}  }
class C{  public void onPrepared(MediaPlayer player){  this.player.setOnCompletionListener(this);  this.seekToPlaying(this.seekOnPrepared);  if (!this.prepareOnly) {    this.player.start();    this.setState(STATE.MEDIA_RUNNING);    this.seekOnPrepared=0;  } else {    this.setState(STATE.MEDIA_STARTING);  }  this.duration=getDurationInSeconds();  this.prepareOnly=true;  sendStatusChange(MEDIA_DURATION,null,this.duration);}  }
class C{  public static <R>Observable<R> when(Plan<R>... plans){  if (plans == null) {    throw new NullPointerException("plans");  }  return when(Arrays.asList(plans));}  }
class C{  public static void i(String tag,String msg,Throwable tr){  println(INFO,tag,msg,tr);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Paralyze_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200740,skillcaster,skillname);}  }
class C{  private String redisKey(@NotNull String storeName,@NotNull String key){  return redisNamespace + "-" + storeName+ "-"+ key;}  }
class C{  public PollsAddVoteQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static int readVInt(byte[] bytes,int start) throws IOException {  return (int)readVLong(bytes,start);}  }
class C{  private void needNewBuffer(int newcount){  if (currentBufferIndex < buffers.size() - 1) {    filledBufferSum+=currentBuffer.length;    currentBufferIndex++;    currentBuffer=buffers.get(currentBufferIndex);  } else {    int newBufferSize;    if (currentBuffer == null) {      newBufferSize=newcount;      filledBufferSum=0;    } else {      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);      filledBufferSum+=currentBuffer.length;    }    currentBufferIndex++;    currentBuffer=new byte[newBufferSize];    buffers.add(currentBuffer);  }}  }
class C{  public boolean want(Edge e){  String tgtSubSignature=e.tgt().getSubSignature();  if (tgtSubSignature.equals("void run()"))   return true;  return false;}  }
class C{  @Override public void endElement(String name) throws SAXException {  if (documentHandler != null) {    documentHandler.endElement(name);  }}  }
class C{  public void drawScreen(int par1,int par2,float par3){  if (reinit) {    initGui();    reinit=false;  }  super.drawScreen(par1,par2,par3);}  }
class C{  public TextColumn(){  super(new TextCell());}  }
class C{  @Nullable public GrLiteral findModuleReference(@NotNull Module module){  checkInitialized();  String moduleGradlePath=getModuleGradlePath(module);  if (moduleGradlePath != null) {    commitDocumentChanges();    for (    GrMethodCall includeStatement : getMethodCalls(myGroovyFile,INCLUDE_METHOD)) {      for (      GrLiteral lit : getLiteralArguments(includeStatement)) {        if (moduleGradlePath.equals(lit.getValue())) {          return lit;        }      }    }  }  return null;}  }
class C{  public PhotosSaveWallPhotoQuery hash(String value){  return unsafeParam("hash",value);}  }
class C{  public PhotosSaveMarketAlbumPhotoQuery saveMarketAlbumPhoto(UserActor actor,int groupId,String photo,int server,String hash){  return new PhotosSaveMarketAlbumPhotoQuery(getClient(),actor,groupId,photo,server,hash);}  }
class C{  public static Builder create(){  return new Builder();}  }
class C{  public static int[] deleteDuplicatedPages(int[] pages){  List<Integer> result=new ArrayList<>();  int lastInt=-1;  for (  Integer currentInt : pages) {    if (lastInt != currentInt) {      result.add(currentInt);    }    lastInt=currentInt;  }  int[] arrayResult=new int[result.size()];  for (int i=0; i < result.size(); i++) {    arrayResult[i]=result.get(i);  }  return arrayResult;}  }
class C{  private static void print(double[] x,int w,int d){  System.out.print("\n");  new Matrix(x,1).print(w,d);  print("\n");}  }
class C{  private void writeEntry(int slot,BEntry ent){  int byteOffset=slot / 8;  int bitOffset=7 - (slot % 8);  byte mask=(byte)(1 << bitOffset);  byte[] bitMap=getBitMap();  bitMap[byteOffset]=(byte)(bitMap[byteOffset] | mask);  setBitMap(bitMap);  int entryOffset=getOffset(slot);  getPage().writeBytes(entryOffset,entrySize,ent.toBytes());}  }
class C{  @TargetApi(8) public Bundler putCharSequenceArray(String key,CharSequence[] value){  bundle.putCharSequenceArray(key,value);  return this;}  }
class C{  public boolean isTextSms(){  return text != null;}  }
class C{  private void calcBitePoint(int centerX,int centerY,float circleEdgeX,float circleEdgeY,double biteLine,boolean isFirstBite,boolean isRandomBite){  double bitePercent;  if (isFirstBite) {    biteX=(int)circleEdgeX;    biteY=(int)circleEdgeY;  } else {    bitePercent=biteRadius / biteLine;    if (isRandomBite) {      bitePercent*=bitesTakenMap.get(biteDirection);    } else {      bitePercent*=(numBitesForOneDirection - numBitesForOneDirectionLeft);    }    biteX=DrawUtils.getPointBetweenTwoPoints(circleEdgeX,centerX,bitePercent);    biteY=DrawUtils.getPointBetweenTwoPoints(circleEdgeY,centerY,bitePercent);  }}  }
class C{  private DateTime boundaryAt(int n){  long instant=intervalStart.getChronology().add(period,intervalStart.getMillis(),n);  return new DateTime(instant);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_HE_IS_ALREADY_MEMBER_OF_OTHER_ALLIANCE(String value0){  return new SM_SYSTEM_MESSAGE(1300192,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Resurrect_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200403,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Snare_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201146,value0);}  }
class C{  public TapTarget targetCircleColor(@ColorRes int color){  this.targetCircleColor=color;  return this;}  }
class C{  public PhotosSaveQuery server(Integer value){  return unsafeParam("server",value);}  }
class C{  @Nonnull public DataBuilder appendOperatingSystemPattern(@Nonnull final OperatingSystemPattern pattern){  Check.notNull(pattern,"pattern");  if (!operatingSystemPatterns.containsKey(pattern.getId())) {    operatingSystemPatterns.put(pattern.getId(),new TreeSet<OperatingSystemPattern>(OS_PATTERN_COMPARATOR));  }  operatingSystemPatterns.get(pattern.getId()).add(pattern);  return this;}  }
class C{  @Override public int hashCode(){  return 743 + 809 * MathUtils.hash(value) + 167 * derivatives.hashCode();}  }
class C{  public void close(){  channel.close();}  }
class C{  public static int checkMethod(int luaState,Object obj,String methodName){  LuaState L=LuaStateFactory.getExistingState(luaState);synchronized (L) {    Class clazz;    if (obj instanceof Class) {      clazz=(Class)obj;    } else {      clazz=obj.getClass();    }    Method[] methods=clazz.getMethods();    for (int i=0; i < methods.length; i++) {      if (methods[i].getName().equals(methodName))       return 1;    }    return 0;  }}  }
class C{  private void parseTranscript(PackedTranscript transcript){  translatedQueryLen=0;  subjectLen=0;  len=0;  identities=0;  mismatches=0;  gapOpenings=0;  int d=0;  for (  CombinedOperation op : transcript.gather()) {    int count=op.getCount();    len+=count;switch (op.getEditOperation()) {case op_match:      identities+=count;    translatedQueryLen+=count;  subjectLen+=count;d=0;break;case op_substitution:mismatches+=count;translatedQueryLen+=count;subjectLen+=count;d=0;break;case op_insertion:translatedQueryLen+=count;++gapOpenings;d=0;break;case op_deletion:subjectLen+=count;if (d == 0) ++gapOpenings;d+=count;}}}  }
class C{  public DefaultItemTouchHelper(){  this(new DefaultItemTouchHelperCallback());}  }
class C{  @Override public void onClick(View view){switch (view.getId()) {case -1:    if (browsablePresenter.isBrowsable()) {      browsablePresenter.visitParentView();    }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    finishAfterTransition();  } else {    finish();  }break;case R.id.activity_photo_topToolbar:backToTop();break;case R.id.activity_photo_touchView:Mysplash.getInstance().setPhoto(photoInfoPresenter.getPhoto());Intent p=new Intent(this,PreviewPhotoActivity.class);startActivity(p);overridePendingTransition(R.anim.activity_in,0);break;case R.id.activity_photo_avatar:photoInfoPresenter.touchAuthorAvatar();break;case R.id.activity_photo_downloadBtn:if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {downloadPresenter.download();} else {requestPermission(Mysplash.WRITE_EXTERNAL_STORAGE,DownloadHelper.DOWNLOAD_TYPE);}break;case R.id.activity_photo_shareBtn:if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {downloadPresenter.share();} else {requestPermission(Mysplash.WRITE_EXTERNAL_STORAGE,DownloadHelper.SHARE_TYPE);}break;case R.id.activity_photo_wallBtn:if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {downloadPresenter.setWallpaper();} else {requestPermission(Mysplash.WRITE_EXTERNAL_STORAGE,DownloadHelper.WALLPAPER_TYPE);}break;}}  }
class C{  @Override public boolean equals(Object o){  return this == o || (o instanceof Storage && _uuid.equals(((Storage)o)._uuid));}  }
class C{  public int print(Graphics gc0,PageFormat format,int pagenumber) throws PrinterException {  JPanel panel=getPanel();  if (panel != null && pagenumber == 0) {    if (panel instanceof GraphView) {      return ((GraphView)panel).print(gc0,format,pagenumber);    } else {      Graphics2D gc=((Graphics2D)gc0);      Dimension dim=panel.getSize();      int image_w=dim.width;      int image_h=dim.height;      double paper_x=format.getImageableX() + 1;      double paper_y=format.getImageableY() + 1;      double paper_w=format.getImageableWidth() - 2;      double paper_h=format.getImageableHeight() - 2;      double scale_x=paper_w / image_w;      double scale_y=paper_h / image_h;      double scale=(scale_x <= scale_y) ? scale_x : scale_y;      double shift_x=paper_x + (paper_w - scale * image_w) / 2.0;      double shift_y=paper_y + (paper_h - scale * image_h) / 2.0;      gc.translate(shift_x,shift_y);      gc.scale(scale,scale);      panel.print(gc0);      return Printable.PAGE_EXISTS;    }  }  return Printable.NO_SUCH_PAGE;}  }
class C{  @Override public double[] makeInverseCumulativeTestPoints(){  return new double[]{0,0.001,0.010,0.025,0.050,0.100,0.200,0.5,0.999,0.990,0.975,0.950,0.900,1};}  }
class C{  public boolean start(String file){  boolean ok=true;  try {    out=new BufferedOutputStream(new FileOutputStream(file));    ok=start(out);    closeStream=true;  } catch (  IOException e) {    ok=false;  }  return started=ok;}  }
class C{  public static Map<String,Object> findContentParents(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> results=FastMap.newInstance();  List<Object> parentList=FastList.newInstance();  results.put("parentList",parentList);  LocalDispatcher dispatcher=dctx.getDispatcher();  String contentId=(String)context.get("contentId");  String contentAssocTypeId=(String)context.get("contentAssocTypeId");  String direction=(String)context.get("direction");  if (UtilValidate.isEmpty(direction)) {    direction="To";  }  Map<String,Object> traversMap=FastMap.newInstance();  traversMap.put("contentId",contentId);  traversMap.put("direction",direction);  traversMap.put("contentAssocTypeId",contentAssocTypeId);  try {    Map<String,Object> thisResults=dispatcher.runSync("traverseContent",traversMap);    String errorMsg=ServiceUtil.getErrorMessage(thisResults);    if (UtilValidate.isNotEmpty(errorMsg)) {      Debug.logError("Problem in traverseContent. " + errorMsg,module);      return ServiceUtil.returnError(errorMsg);    }    Map<String,Object> nodeMap=UtilGenerics.checkMap(thisResults.get("nodeMap"));    walkParentTree(nodeMap,parentList);  } catch (  GenericServiceException e) {    return ServiceUtil.returnFailure(e.getMessage());  }  return results;}  }
class C{  private void removeAllTraffic(){  List<AirMapTraffic> removed=new ArrayList<>(allTraffic);  allTraffic.clear();  notifyRemoved(removed);}  }
class C{  public static void f(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg,throwable);}  }
class C{  public CreatePageWindow typeName(String name){  nameField.setValue(name);  return this;}  }
class C{  public boolean contains(T dataSet){  for (int i=0; i < mDataSets.size(); i++) {    T set=mDataSets.get(i);    if (set.equals(dataSet)) {      return true;    }  }  return false;}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  } else   if (!(obj instanceof MethodDesc)) {    return false;  }  MethodDesc od=(MethodDesc)obj;  return ((name == null ? od.name == null : name.equals(od.name)) && Arrays.equals(types,od.types) && (constraints == null ? od.constraints == null : constraints.equals(od.constraints)));}  }
class C{  private static int decodeIntElement(Document document,Node child){  return Integer.valueOf(child.getTextContent()).intValue();}  }
class C{  public PhotosGetByIdQuery(VkApiClient client,UserActor actor,String... photos){  super(client,"photos.getById",Utils.buildParametrizedType(List.class,Photo.class));  accessToken(actor.getAccessToken());  photos(photos);}  }
class C{  public boolean onBackPressed(){  if (drawer.isDrawerOpen(GravityCompat.START)) {    drawer.closeDrawer(GravityCompat.START);    return true;  } else {    drawer.removeDrawerListener(toggle);    return false;  }}  }
class C{  public boolean isValidInet6Address(String inet6Address){  boolean containsCompressedZeroes=inet6Address.indexOf("::") > -1;  if (containsCompressedZeroes && (inet6Address.indexOf("::") != inet6Address.lastIndexOf("::"))) {    return false;  }  if ((inet6Address.startsWith(":") && !inet6Address.startsWith("::")) || (inet6Address.endsWith(":") && !inet6Address.endsWith("::"))) {    return false;  }  Object[] octets=inet6Address.split(":");  if (containsCompressedZeroes) {    List octetList=new ArrayList(Arrays.asList(octets));    if (inet6Address.endsWith("::")) {      octetList.add("");    } else     if (inet6Address.startsWith("::") && !octetList.isEmpty()) {      octetList.remove(0);    }    octets=octetList.toArray();  }  if (octets.length > 8) {    return false;  }  int validOctets=0;  int emptyOctets=0;  for (int index=0; index < octets.length; index++) {    String octet=(String)octets[index];    if (octet.length() == 0) {      emptyOctets++;      if (emptyOctets > 1) {        return false;      }    } else {      emptyOctets=0;      if (octet.indexOf(".") > -1) {        if (!inet6Address.endsWith(octet)) {          return false;        }        if (index > octets.length - 1 || index > 6) {          return false;        }        if (!isValidInet4Address(octet)) {          return false;        }        validOctets+=2;        continue;      }      if (octet.length() > 4) {        return false;      }      int octetInt=0;      try {        octetInt=Integer.valueOf(octet,16).intValue();      } catch (      NumberFormatException e) {        return false;      }      if (octetInt < 0 || octetInt > 0xffff) {        return false;      }    }    validOctets++;  }  if (validOctets < 8 && !containsCompressedZeroes) {    return false;  }  return true;}  }
class C{  synchronized public int writeBulk(List<LogRecord> records) throws IOException {  int numRecords=0;  for (  LogRecord r : records) {    write(r);    numRecords++;  }  return numRecords;}  }
class C{  public static void checkNotNull(@Nullable Object o){  if (o == null) {    throw new NullPointerException("Object must not be null");  }}  }
class C{  void addPath(ViterbiPoint point,ViterbiPath newPath){  if (point.statePaths[newPath.state] == null) {    point.statePaths[newPath.state]=newPath;  } else   if (isBetterThan(newPath.score,point.statePaths[newPath.state].score)) {    point.statePaths[newPath.state]=newPath;  } else {  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_OPTION_SUCCEED(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1300462,descriptionId);}  }
class C{  @ObjectiveCName("addRecordEventsListener:") public List addRecordEventsListener(RecordEventsListener recordEventsListener){  this.record.addRecordEventsListener(recordEventsListener);  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANT_USE_WORN_ITEM_OUT_OF_USABLE_COUNT(String value0){  return new SM_SYSTEM_MESSAGE(1300395,value0);}  }
class C{  public boolean entails(AccessPath a2){  if (this.isEmpty() || a2.isEmpty())   return false;  if ((this.value != null && a2.value == null) || (this.value == null && a2.value != null))   return false;  if (this.value != null && !this.value.equals(a2.value))   return false;  if (this.fields != null && a2.fields != null) {    if (this.fields.length > a2.fields.length)     return false;    for (int i=0; i < this.fields.length; i++)     if (!this.fields[i].equals(a2.fields[i]))     return false;  }  return true;}  }
class C{  public void renderHyperlinkTitle(Appendable writer,Map<String,Object> context,ModelFormField modelFormField,String titleText) throws IOException {  if (UtilValidate.isNotEmpty(modelFormField.getHeaderLink())) {    StringBuilder targetBuffer=new StringBuilder();    FlexibleStringExpander target=FlexibleStringExpander.getInstance(modelFormField.getHeaderLink());    String fullTarget=target.expandString(context);    targetBuffer.append(fullTarget);    String targetType=CommonWidgetModels.Link.DEFAULT_URL_MODE;    if (UtilValidate.isNotEmpty(targetBuffer.toString()) && targetBuffer.toString().toLowerCase().startsWith("javascript:")) {      targetType="plain";    }    WidgetWorker.makeHyperlinkString(writer,modelFormField.getHeaderLinkStyle(),targetType,targetBuffer.toString(),null,titleText,null,modelFormField,this.request,this.response,null,null);  } else   if (modelFormField.isSortField()) {    renderSortField(writer,context,modelFormField,titleText);  } else   if (modelFormField.isRowSubmit()) {    if (UtilValidate.isNotEmpty(titleText))     writer.append(titleText).append("<br/>");    writer.append("<input type=\"checkbox\" name=\"selectAll\" value=\"Y\" onclick=\"javascript:toggleAll(this, '");    writer.append(modelFormField.getModelForm().getName());    writer.append("');\"/>");  } else {    writer.append(titleText);  }}  }
class C{  public static final void outlineShapes(GL2 gl,SandboxBody body,float w,float[] color,double scale){  float lw=RenderUtilities.setLineWidth(gl,w);  if (color != null)   gl.glColor4fv(color,0);  double we=w * 0.5 / scale;  int fSize=body.getFixtureCount();  for (int i=0; i < fSize; i++) {    BodyFixture bf=body.getFixture(i);    Shape s=bf.getShape();    if (s instanceof Circle) {      Circle c=(Circle)s;      Vector2 ct=c.getCenter();      RenderUtilities.fillCircleFromCenter(gl,c.getRadius() + we,ct.x,ct.y);    } else {      Wound wo=(Wound)s;      Vector2[] vs=wo.getVertices();      gl.glBegin(GL.GL_LINE_LOOP);      for (int j=0; j < vs.length; j++) {        Vector2 v=vs[j];        gl.glVertex2d(v.x,v.y);      }      gl.glEnd();      for (int j=0; j < vs.length; j++) {        Vector2 v=vs[j];        RenderUtilities.fillCircleFromCenter(gl,we,v.x,v.y);      }    }  }  RenderUtilities.setLineWidth(gl,lw);}  }
class C{  public void callback(final String instanceId,final String callback,final Map<String,Object> data){  callback(instanceId,callback,data,false);}  }
class C{  public static UByte valueOf(byte value){  return valueOfUnchecked((short)(value & MAX_VALUE));}  }
class C{  public void testMissingRequiredProjects() throws IOException {  VirtualFile project2=createGradleProjectToImport(dir,module(2),module(1));  assert project2 != null : "Something wrong with the setup";  configureTopLevelProject(dir,Arrays.asList(module(1),module(2)),Collections.<String>emptySet());  Map<String,VirtualFile> projects=moduleListToMap(GradleModuleImporter.getRelatedProjects(project2,getProject()));  assertEquals(2,projects.size());  assertModuleRequiredButNotFound(module(1),projects);  assertEquals(project2,projects.get(pathToGradleName(module(2))));}  }
class C{  public boolean gotoNext(){  if (isCurrentSet()) {    current.set1(current.get1() + 1);    if (current.get1() >= table.getGrid().getRowCount()) {      current.set1(0);      current.set2(current.get2() + 1);    }  } else   gotoFirst();  return isCurrentSet();}  }
class C{  public <T extends Event>void register(Class<T> clazz,Consumer<T> handler){  ConcurrentLinkedQueue<Consumer<?>> handlers=map.get(clazz);  if (handlers == null) {    handlers=new ConcurrentLinkedQueue<>();    map.put(clazz,handlers);  }  handlers.add(handler);}  }
class C{  public Author toEntity(AuthorDTO dto,int depth){  if (dto == null) {    return null;  }  Author author=new Author();  author.setId(dto.id);  author.setCivility(dto.civility);  author.setFirstName(dto.firstName);  author.setLastName(dto.lastName);  author.setEmail(dto.email);  author.setBirthDate(dto.birthDate);  author.setBirthDateTime(dto.birthDateTime);  if (depth-- > 0) {    author.setFavoriteAuthor(toEntity(dto.favoriteAuthor,depth));  }  return author;}  }
class C{  public CreateRouteRequest(MediaSource source,MediaSink sink,String routeId,String origin,int tabId,int requestId,RouteDelegate delegate){  assert source != null;  assert sink != null;  mSource=source;  mSink=sink;  mRouteId=routeId;  mOrigin=origin;  mTabId=tabId;  mRequestId=requestId;  mDelegate=delegate;}  }
class C{  public int annotationDirectoryOffsetFromClassDefIndex(int classDefIndex){  checkBounds(classDefIndex,tableOfContents.classDefs.size);  int position=tableOfContents.classDefs.off + (SizeOf.CLASS_DEF_ITEM * classDefIndex);  position+=SizeOf.UINT;  position+=SizeOf.UINT;  position+=SizeOf.UINT;  position+=SizeOf.UINT;  position+=SizeOf.UINT;  return data.getInt(position);}  }
class C{  public Vector3f scaleAdd(float scalar,Vector3f mult,Vector3f add){  this.x=mult.x * scalar + add.x;  this.y=mult.y * scalar + add.y;  this.z=mult.z * scalar + add.z;  return this;}  }
class C{  public boolean hasVisited(SimpleMethod method){  return simpleMethodNameSet.contains(method.getLocationAndName());}  }
class C{  public void conjunctWith(Term t){  terms.add(t);}  }
class C{  static public ResolveType resolveThrownExceptions(@NotNull final Method method,@NotNull HashSet<PhpClass> declaredExceptions){  PhpPsiElement previous=method.getPrevPsiSibling();  if (!(previous instanceof PhpDocCommentImpl)) {    return ResolveType.NOT_RESOLVED;  }  Collection<PhpDocReturnTag> returns=PsiTreeUtil.findChildrenOfType(previous,PhpDocReturnTag.class);  if (returns.size() > 0) {    for (    PhpDocReturnTag returnOrThrow : returns) {      if (returnOrThrow.getName().equals("@throws")) {        Collection<PhpDocTypeImpl> exceptions=PsiTreeUtil.findChildrenOfType(returnOrThrow,PhpDocTypeImpl.class);        if (exceptions.size() > 0) {          for (          PhpDocTypeImpl type : exceptions) {            PsiElement typeResolved=type.resolve();            if (typeResolved instanceof PhpClass) {              declaredExceptions.add((PhpClass)typeResolved);            }          }          exceptions.clear();        }      }    }    returns.clear();  }  Collection<PhpDocTagImpl> tags=PsiTreeUtil.findChildrenOfType(previous,PhpDocTagImpl.class);  if (tags.size() > 0) {    for (    PhpDocTagImpl tag : tags) {      if (tag.getName().toLowerCase().equals("@inheritdoc")) {        resolveInheritDoc(method,declaredExceptions);        return ResolveType.RESOLVED_INHERIT_DOC;      }    }    tags.clear();  }  return ResolveType.RESOLVED;}  }
class C{  public Observable<FirebaseChildEvent> observeChildAdded(final Query firebaseRef){  return observeChildEvent(firebaseRef).filter(filterChildEvent(EventType.ADDED));}  }
class C{  protected void paintComponent(Graphics context){  Graphics2D gr2d;  int i, k;  FontRenderContext render;  gr2d=(Graphics2D)context;  render=gr2d.getFontRenderContext();  gr2d.setColor(PANEL_COLOUR);  gr2d.fillRect(0,0,this.getWidth(),this.getHeight());  boolean redoHeight=false;  boolean redoWidth=false;  if (charMap4.getDisplayFont() == null) {    return;  } else   if (charMap4.getDisplayFont().equals(panelFont) == false) {    clickIndex=hoverIndex=NO_MOUSE;    cornerIndex=0;    panelFont=charMap4.getDisplayFont();    redoHeight=redoWidth=true;    fontData=gr2d.getFontMetrics(panelFont);    lineAscent=fontData.getAscent();    lineHeight=fontData.getHeight();    maxWidth=Math.max(10,fontData.getMaxAdvance());    horizStep=maxWidth + (2 * TEXT_MARGIN) + GRID_WIDTH;    vertiStep=lineHeight + (2 * TEXT_MARGIN) + GRID_WIDTH;    charCount=0;    int[] charTemp=new int[CharMap4.getMaxUnicode() + 1];    for (i=0; i < charTemp.length; i++) {      charTemp[i]=-1;    }    glyphCount=Math.max(0,panelFont.getNumGlyphs());    int glymissing=panelFont.getMissingGlyphCode();    glyphChar=new int[glyphCount];    glyphGlyph=new int[glyphCount];    for (i=0; i < glyphCount; i++) {      glyphChar[i]=-1;      glyphGlyph[i]=i;    }    for (i=CharMap4.getMinUnicode(); i <= CharMap4.getMaxUnicode(); i++) {      if (panelFont.canDisplay(i) == false)       continue;      String charToString=CharMap4.charToString(i);      GlyphVector glyvector=panelFont.createGlyphVector(render,charToString);      int glycount=glyvector.getNumGlyphs();      for (k=0; k < glycount; k++) {        int glyph=glyvector.getGlyphCode(k);        if ((glyph >= 0) && (glyph < glyphCount) && (glyph != glymissing)) {          if (charTemp[i] < 0) {            charTemp[i]=glyph;          }          if (glyphChar[glyph] < 0) {            glyphChar[glyph]=i;          }        }      }      if (charTemp[i] >= 0) {        charCount++;      }    }    charChar=new int[charCount];    charGlyph=new int[charCount];    k=0;    for (i=CharMap4.getMinUnicode(); i <= CharMap4.getMaxUnicode(); i++) {      int glyph=charTemp[i];      if (glyph >= 0) {        charChar[k]=i;        charGlyph[k]=glyph;        k++;      }    }    charTemp=null;    charMap4.setStatusText(CharMap4.getFormatComma().format(charCount) + " characters with " + CharMap4.getFormatComma().format(glyphCount)+ " glyphs");    if ((charCount <= 0) || (glyphCount <= 0)) {      panelFont=null;      return;    }  }  if (CharMap4.isGlyphFlag()) {    cellChar=glyphChar;    cellCount=glyphCount;    cellGlyph=glyphGlyph;  } else {    cellChar=charChar;    cellCount=charCount;    cellGlyph=charGlyph;  }  if (redoWidth || (this.getWidth() != panelWidth)) {    panelWidth=this.getWidth();    redoWidth=true;    panelColumns=Math.max(1,((panelWidth - (2 * PANEL_MARGIN) - GRID_WIDTH) / horizStep));  }  if (redoHeight || (this.getHeight() != panelHeight)) {    panelHeight=this.getHeight();    redoHeight=true;    panelRows=Math.max(1,((panelHeight - (2 * PANEL_MARGIN) - GRID_WIDTH) / vertiStep));  }  if ((cellCount != panelCount) || redoHeight || redoWidth) {    panelCount=cellCount;    int row=cornerIndex / panelColumns;    row=Math.max(0,Math.min(row,((cellCount / panelColumns) - panelRows + 1)));    charMap4.getGridScroll().setValues(row,panelRows,0,((cellCount + panelColumns - 1) / panelColumns));    cornerIndex=charMap4.getGridScroll().getValue() * panelColumns;    charMap4.getGridScroll().setBlockIncrement(Math.max(1,(panelRows - 1)));    charMap4.getGridScroll().setUnitIncrement(1);  }  if (pendingUpdates) {    pendingUpdates=false;    for (int index=0; index < cellChar.length; index++) {      if (cellChar[index] == pendingCharacter) {        selectedChar=index;        break;      }    }  }  int end=cornerIndex + (panelColumns * (panelRows + 1)) - 1;  for (i=cornerIndex; i <= end; i++) {    paintGridCell(gr2d,render,i);  }}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  ConstrainableProxyUtil.verifyConsistentConstraints(constraints,server,methodMappings);}  }
class C{  private void internalOpenFile(File f,List<SLDDataInterface> list){  if (f.isFile() && FileSystemUtils.isFileExtensionSupported(f,getFileExtensionList())) {    try {      String contents=readFile(f,Charset.defaultCharset());      StyledLayerDescriptor sld=Ysld.parse(contents);      if (sldWriter == null) {        sldWriter=SLDWriterFactory.createWriter(SLDOutputFormatEnum.SLD);      }      String sldContents=sldWriter.encodeSLD(null,sld);      SLDDataInterface sldData=new SLDData(new StyleWrapper(f.getName()),sldContents);      sldData.setSLDFile(f);      sldData.setReadOnly(false);      sldData.setOriginalFormat(SLDOutputFormatEnum.YSLD);      list.add(sldData);    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  private void photoGalleryIntent(){  Intent intent=new Intent();  intent.setType("image/*");  intent.setAction(Intent.ACTION_GET_CONTENT);  startActivityForResult(Intent.createChooser(intent,getString(R.string.select_picture_title)),IMAGE_GALLERY_REQUEST);}  }
class C{  private boolean filterout(DataTag dataTag,SourceDataTagValue sourceDataTagValue){  Timestamp dataTagTimestamp, sourceTagTimestamp;  if (dataTag.getDaqTimestamp() != null && sourceDataTagValue.getDaqTimestamp() != null) {    dataTagTimestamp=dataTag.getDaqTimestamp();    sourceTagTimestamp=sourceDataTagValue.getDaqTimestamp();  } else   if (dataTag.getSourceTimestamp() != null && sourceDataTagValue.getTimestamp() != null) {    dataTagTimestamp=dataTag.getSourceTimestamp();    sourceTagTimestamp=sourceDataTagValue.getTimestamp();  } else {    return false;  }  if (sourceTagTimestamp.before(dataTagTimestamp)) {    if (dataTag.getDataTagQuality() == null || dataTag.getDataTagQuality().isAccessible()) {      LOGGER.debug("update() : older timestamp and not inaccessible -> reject update");      return true;    } else {      LOGGER.debug("update() : older timestamp but tag currently inaccessible -> update with older timestamp");    }  }  if (sourceTagTimestamp.equals(dataTagTimestamp) && dataTag.getValue() != null && sourceDataTagValue.getValue().equals(dataTag.getValue()) && dataTag.getDataTagQuality().isValid() && sourceDataTagValue.getQuality() != null && sourceDataTagValue.getQuality().isValid()) {    LOGGER.debug("update() : values and timestamps are equal, so nothing to update -> reject update");    return true;  }  return false;}  }
class C{  protected double tTest(final double m1,final double m2,final double v1,final double v2,final double n1,final double n2) throws MathIllegalArgumentException, MathIllegalStateException {  final double t=FastMath.abs(t(m1,m2,v1,v2,n1,n2));  final double degreesOfFreedom=df(v1,v2,n1,n2);  final TDistribution distribution=new TDistribution(degreesOfFreedom);  return 2.0 * distribution.cumulativeProbability(-t);}  }
class C{  private DeepstreamFactory(){  this.clients=new HashMap();}  }
class C{  public SwitchPreference(Context context,AttributeSet attrs,int defStyleAttr,int defStyleRes){  super(context,attrs,defStyleAttr,defStyleRes);  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.SwitchPreference,defStyleAttr,defStyleRes);  setSummaryOn(TypedArrayUtils.getString(a,R.styleable.SwitchPreference_summaryOn,R.styleable.SwitchPreference_android_summaryOn));  setSummaryOff(TypedArrayUtils.getString(a,R.styleable.SwitchPreference_summaryOff,R.styleable.SwitchPreference_android_summaryOff));  setSwitchTextOn(TypedArrayUtils.getString(a,R.styleable.SwitchPreference_switchTextOn,R.styleable.SwitchPreference_android_switchTextOn));  setSwitchTextOff(TypedArrayUtils.getString(a,R.styleable.SwitchPreference_switchTextOff,R.styleable.SwitchPreference_android_switchTextOff));  setDisableDependentsState(TypedArrayUtils.getBoolean(a,R.styleable.SwitchPreference_disableDependentsState,R.styleable.SwitchPreference_android_disableDependentsState,false));  a.recycle();}  }
class C{  static Class[] reduce(Class[] classes,boolean keepSupers){  return reduce0(classes.clone(),keepSupers);}  }
class C{  protected MarketDeleteCommentQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  private void walk(File directory,int depth,Collection<T> results) throws IOException {  checkIfCancelled(directory,depth,results);  if (handleDirectory(directory,depth,results)) {    handleDirectoryStart(directory,depth,results);    int childDepth=depth + 1;    if (depthLimit < 0 || childDepth <= depthLimit) {      checkIfCancelled(directory,depth,results);      File[] childFiles=filter == null ? directory.listFiles() : directory.listFiles(filter);      childFiles=filterDirectoryContents(directory,depth,childFiles);      if (childFiles == null) {        handleRestricted(directory,childDepth,results);      } else {        for (        File childFile : childFiles) {          if (childFile.isDirectory()) {            walk(childFile,childDepth,results);          } else {            checkIfCancelled(childFile,childDepth,results);            handleFile(childFile,childDepth,results);            checkIfCancelled(childFile,childDepth,results);          }        }      }    }    handleDirectoryEnd(directory,depth,results);  }  checkIfCancelled(directory,depth,results);}  }
class C{  public final boolean canSet(String field,Class type){  return m_table.canSet(field,type);}  }
class C{  private void moveSizeWithFreeAspectRatio(RectF rect,float x,float y,RectF bounds,int viewWidth,int viewHeight,float snapMargin){switch (mType) {case TOP_LEFT:    adjustTop(rect,y,bounds,snapMargin,0,false,false);  adjustLeft(rect,x,bounds,snapMargin,0,false,false);break;case TOP_RIGHT:adjustTop(rect,y,bounds,snapMargin,0,false,false);adjustRight(rect,x,bounds,viewWidth,snapMargin,0,false,false);break;case BOTTOM_LEFT:adjustBottom(rect,y,bounds,viewHeight,snapMargin,0,false,false);adjustLeft(rect,x,bounds,snapMargin,0,false,false);break;case BOTTOM_RIGHT:adjustBottom(rect,y,bounds,viewHeight,snapMargin,0,false,false);adjustRight(rect,x,bounds,viewWidth,snapMargin,0,false,false);break;case LEFT:adjustLeft(rect,x,bounds,snapMargin,0,false,false);break;case TOP:adjustTop(rect,y,bounds,snapMargin,0,false,false);break;case RIGHT:adjustRight(rect,x,bounds,viewWidth,snapMargin,0,false,false);break;case BOTTOM:adjustBottom(rect,y,bounds,viewHeight,snapMargin,0,false,false);break;default :break;}}  }
class C{  public static boolean hasRole(String roleName){  for (  String role : getRoles()) {    if (role.equalsIgnoreCase(roleName)) {      return true;    }  }  return false;}  }
class C{  public static void startLocalZkServer(final int port){  startLocalZkServer(port,org.apache.commons.io.FileUtils.getTempDirectoryPath() + File.separator + "test-"+ System.currentTimeMillis());}  }
class C{  public DefaultHibernateSpaceDataSourceConfigurer augmentInitialLoadEntries(boolean augmentInitialLoadEntries){  this.augmentInitialLoadEntries=augmentInitialLoadEntries;  return this;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set fontSize=");  String input=np.getWordRespectCase();  np.matchIgnoreCase(";");  int newSize=0;  boolean increase=false;  boolean decrease=false;  if (Basic.isInteger(input) && Integer.parseInt(input) >= 0)   newSize=Integer.parseInt(input); else   if (input.equalsIgnoreCase("increase"))   increase=true; else   if (input.equalsIgnoreCase("decrease"))   decrease=true; else   throw new IOException("Illegal font size: " + input);  boolean changed=false;  GraphView viewer;  if (getViewer() instanceof ClusterViewer)   viewer=((ClusterViewer)getViewer()).getGraphView(); else   if (getViewer() instanceof GraphView)   viewer=(GraphView)getViewer(); else   return;  Set<Node> nodes=new HashSet<>();  if (viewer.getSelectedNodes().size() == 0 && viewer.getSelectedEdges().size() == 0) {    for (Node v=viewer.getGraph().getFirstNode(); v != null; v=v.getNext())     nodes.add(v);  } else   nodes.addAll(viewer.getSelectedNodes());  for (  Node v : nodes) {    if (viewer.getLabel(v) != null) {      Font font=viewer.getFont(v);      int size=font.getSize();      if (increase) {        size=Math.max(size + 1,(int)(size * 1.1));      } else       if (decrease) {        if (size >= 2)         size=Math.max(1,Math.min(size - 1,(int)(size / 1.1)));      } else {        size=newSize;      }      if (size != font.getSize()) {        font=new Font(font.getFamily(),font.getStyle(),size);        viewer.setFont(v,font);        ProgramProperties.put(ProgramProperties.DEFAULT_FONT,font.getFamily(),font.getStyle(),size > 0 ? size : 6);        changed=true;      }    }  }  for (  Edge e : viewer.getSelectedEdges()) {    if (viewer.getLabel(e) != null) {      Font font=viewer.getFont(e);      int size=font.getSize();      if (increase) {        size=Math.max(size + 1,(int)(size * 1.2));      } else       if (decrease) {        if (size >= 2)         size=Math.max(1,Math.min(size - 1,(int)(size / 1.1)));      } else {        size=newSize;      }      if (size != font.getSize()) {        font=new Font(font.getFamily(),font.getStyle(),size);        viewer.setFont(e,font);        ProgramProperties.put(ProgramProperties.DEFAULT_FONT,font.getFamily(),font.getStyle(),size > 0 ? size : 6);        changed=true;      }    }  }  if (changed)   viewer.repaint();}  }
class C{  public void close(){  if (this.masterPage == null) {    return;  }  if (this.durable) {    this.masterPage.flush();  }  List<Long> toRemove=new ArrayList<Long>();  Set<Long> vPageNums=null;  List<Page> toFlush=new ArrayList<Page>();synchronized (PageAllocator.class) {    vPageNums=pageLRU.keySet();  }  for (  Long l : vPageNums) {    if (translateAllocator(l) == this.allocID) {      toRemove.add(l);    }  }synchronized (PageAllocator.class) {    for (    Long vPageNum : toRemove) {      if (pageLRU.containsKey(vPageNum)) {        toFlush.add(pageLRU.get(vPageNum));        pageLRU.remove(vPageNum);      }    }  }  if (this.durable) {    for (    Page p : toFlush) {      p.flush();    }  }  this.masterPage=null;  try {    this.fc.close();  } catch (  IOException e) {    throw new PageException("Could not close Page Alloc " + e.getMessage());  }}  }
class C{  public static String toString(final byte byteValue){  final int tmp=byteValue << 8;  char[] retstr=new char[]{HEX[(tmp >> 12) & 0x0F],HEX[(tmp >> 8) & 0x0F]};  return String.valueOf(retstr);}  }
class C{  @Override public int nodeSize(){  return this.numberOfKeys;}  }
class C{  public DataInputBuffer(){  this(new Buffer());}  }
class C{  void registerAsIdle(){  if (timeToIdlePolicy.isPresent()) {    timeToIdlePolicy.get().add(resourceKey);    if (resourceKey.getStatus() != Status.IDLE) {      timeToIdlePolicy.get().invalidate(resourceKey);    }  }}  }
class C{  @Override protected ModelAndView doResolveException(final HttpServletRequest request,final HttpServletResponse response,final Object handler,final Exception exception){  LOGGER.debug("In DASTExceptionHandler");  response.setStatus(HttpStatus.SC_INTERNAL_SERVER_ERROR);  AppScanUtils.sendErrorMail(exception);  if (exception instanceof DASTProxyException) {    if (AppScanUtils.isNotNull(((DASTProxyException)exception).getErrorCode())) {      return new ModelAndView(view,AppScanConstants.JSON_RESPONSE_ERROR_IDENTIFIER,((DASTProxyException)exception).getErrorCode());    } else {      LOGGER.error(exception);      return new ModelAndView(view,AppScanConstants.JSON_RESPONSE_ERROR_IDENTIFIER,((DASTProxyException)exception).getErrorMessage());    }  }  return new ModelAndView(view,"error","Exception has occured. Please contact the site administrator");}  }
class C{  public JCustomTooltip(JComponent src,JComponent content){  this(src,content,false);}  }
class C{  public void incrementSelectedRuleIndex(){  this.selectedRuleIndex++;}  }
class C{  @Override public void modelChanged(@NotNull NlModel model){  if (myDesignSurface != null) {    updateDeviceConfiguration(myDesignSurface.getConfiguration());    updateComponents(model.getComponents());    updateScreenNumber(myDesignSurface);    myMiniMap.repaint();  }}  }
class C{  public static final List bubbleSortVerticesByStringLength(List l){  boolean bChanged=true;  while (bChanged) {    bChanged=false;    for (int iCnt=0; iCnt < l.size() - 1; iCnt++) {      if ((l.get(iCnt + 1).toString()).length() > (l.get(iCnt).toString()).length()) {        VertexImpl vTmp=(VertexImpl)(l.get(iCnt + 1));        l.set(iCnt + 1,l.get(iCnt));        l.set(iCnt,vTmp);        bChanged=true;      }    }  }  return l;}  }
class C{  public static String editUnitToTimecode(BigInteger eu,BigFraction unitsInSec){  BigFraction editUnits=new BigFraction(eu);  BigFraction unitsInMin=unitsInSec.multiply(new BigFraction(60));  BigFraction unitsInHour=unitsInSec.multiply(new BigFraction(60 * 60));  int hours=editUnits.divide(unitsInHour).intValue();  int minutes=editUnits.subtract(unitsInHour.multiply(hours)).divide(unitsInMin).intValue();  int seconds=editUnits.subtract(unitsInHour.multiply(hours)).subtract(unitsInMin.multiply(minutes)).divide(unitsInSec).intValue();  BigFraction units=editUnits.subtract(unitsInHour.multiply(hours)).subtract(unitsInMin.multiply(minutes)).subtract(unitsInSec.multiply(seconds));  int milliseconds=new BigFraction(1000).divide(unitsInSec).multiply(units).intValue();  return String.format("%02d:%02d:%02d.%03d",hours,minutes,seconds,milliseconds);}  }
