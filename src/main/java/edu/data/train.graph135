class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static String slurp(InputStream is) throws IOException {  StringBuilder buf=new StringBuilder();  final byte[] b=new byte[4096];  for (int n; (n=is.read(b)) != -1; ) {    buf.append(new String(b,0,n));  }  is.close();  return buf.toString();}  }
class C{  public LexerCore(String lexerName,String buffer){  super(buffer);  this.currentLexerName=lexerName;}  }
class C{  public static int ELIBBAD(){  return 80;}  }
class C{  public Vector3 lerp(Vector3 target,float alpha){  Vector3 r=this.mul(1.0f - alpha);  r.add(target.tmp().mul(alpha));  return r;}  }
class C{  public XNetReply(XNetMessage message){  super();  setBinary(true);  for (int i=0; i < message.getNumDataElements(); i++) {    setElement(i,message.getElement(i));  }}  }
class C{  void addToSubroutine(final long id,final int nbSubroutines){  if ((status & VISITED) == 0) {    status|=VISITED;    srcAndRefPositions=new int[nbSubroutines / 32 + 1];  }  srcAndRefPositions[(int)(id >>> 32)]|=(int)id;}  }
class C{  public void doSave(){  if (simulationFile == null) {    doSaveAs();  } else   try {    simulation.state.writeToCheckpoint(simulationFile);  } catch (  Exception e) {    Utilities.informOfError(e,"An error occurred while saving the simulation to the file " + simulationFile.getName(),null);  }}  }
class C{  @Override public void destroy(){}  }
class C{  public Optional<Response> simplePut(String resourcePath,Object resource){  Optional<Response> returnValue=Optional.empty();  try {    returnValue=Optional.of(getServiceRoot().path(resourcePath).request().put(Entity.entity(resource,APPLICATION_JSON)));  } catch (  SnoopServiceUnavailableException e) {    LOGGER.warning(null);  }  return returnValue;}  }
class C{  @Override public boolean performOperation(int generation){  return true;}  }
class C{  public List<NamedRelatedResourceRep> listByFileSystem(URI fileSystemId){  QuotaDirectoryList response=client.get(QuotaDirectoryList.class,getByFileSystemUrl(),fileSystemId);  return defaultList(response.getQuotaDirs());}  }
class C{  public ResourceList<Flavor> listAll(Map<String,String> queryParams) throws IOException {  ResourceList<Flavor> flavorResourceList=new ResourceList<>();  ResourceList<Flavor> resourceList=getFlavorResourceList(getBasePath() + generateQueryString(queryParams));  flavorResourceList.setItems(resourceList.getItems());  while (resourceList.getNextPageLink() != null && !resourceList.getNextPageLink().isEmpty()) {    resourceList=getFlavorResourceList(resourceList.getNextPageLink());    flavorResourceList.getItems().addAll(resourceList.getItems());  }  return flavorResourceList;}  }
class C{  public static EndpointDescription selectEndpoint(EndpointDescription[] endpoints){  if (endpoints == null)   throw new IllegalArgumentException("null arg");  endpoints=EndpointUtil.selectByProtocol(endpoints,"opc.tcp");  endpoints=EndpointUtil.selectByMessageSecurityMode(endpoints,MessageSecurityMode.SignAndEncrypt);  if (endpoints.length == 0)   return null;  endpoints=EndpointUtil.sortBySecurityLevel(endpoints);  EndpointUtil.reverse(endpoints);  return endpoints[0];}  }
class C{  public synchronized <T extends Aspect>T persist(T transientInstance) throws Exception {  return persist(transientInstance,false);}  }
class C{  protected HashAttributeSet(AttributeSet attributes,Class<?> interfaceName){  myInterface=interfaceName;  if (attributes != null) {    Attribute[] attribArray=attributes.toArray();    int n=attribArray == null ? 0 : attribArray.length;    for (int i=0; i < n; ++i) {      add(attribArray[i]);    }  }}  }
class C{  public BusinessObjectDataEntity createBusinessObjectDataEntity(String namespaceCode,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,Integer businessObjectFormatVersion,String businessObjectDataPartitionValue,Integer businessObjectDataVersion,Boolean businessObjectDataLatestVersion,String businessObjectDataStatusCode){  return createBusinessObjectDataEntity(namespaceCode,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,businessObjectDataPartitionValue,AbstractDaoTest.NO_SUBPARTITION_VALUES,businessObjectDataVersion,businessObjectDataLatestVersion,businessObjectDataStatusCode);}  }
class C{  public void register(UUID transactionId,RepositoryConnection conn) throws RepositoryException {synchronized (primaryCache) {    if (primaryCache.getIfPresent(transactionId) == null) {      final CacheEntry cacheEntry=new CacheEntry(conn);      primaryCache.put(transactionId,cacheEntry);      secondaryCache.put(transactionId,cacheEntry);      logger.debug("registered transaction {} ",transactionId);    } else {      logger.error("transaction already registered: {}",transactionId);      throw new RepositoryException("transaction with id " + transactionId.toString() + " already registered.");    }  }}  }
class C{  public Map<String,String> headers(){  return headers;}  }
class C{  @Deprecated public MoreLikeThisQueryBuilder likeText(String likeText){  return like(likeText);}  }
class C{  public static float[] toFloatArray(Double[] array){  float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].floatValue();  }  return result;}  }
class C{  public static AngleAnimator createPitchAnimator(View view,Angle begin,Angle end){  if (begin == null || end == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  final long MIN_LENGTH_MILLIS=500;  final long MAX_LENGTH_MILLIS=3000;  long lengthMillis=AnimationSupport.getScaledTimeMillisecs(begin,end,Angle.POS180,MIN_LENGTH_MILLIS,MAX_LENGTH_MILLIS);  return new AngleAnimator(new ScheduledInterpolator(lengthMillis),begin,end,new ViewPropertyAccessor.PitchAccessor(view));}  }
class C{  void write(Environment env,DataOutputStream out,ConstantPool tab) throws IOException {  out.writeByte(CONSTANT_STRING);  out.writeShort(tab.index(str.getValue()));}  }
class C{  public static void makeFieldsVisible(SootClass ancestor){  for (  SootField ancestorField : ancestor.getFields()) {    if (ancestorField.isPrivate()) {      ancestorField.setModifiers(ancestorField.getModifiers() | Modifier.PROTECTED);      ancestorField.setModifiers(ancestorField.getModifiers() ^ Modifier.PRIVATE);    }    if (ancestorField.isFinal())     ancestorField.setModifiers(ancestorField.getModifiers() ^ Modifier.FINAL);  }}  }
class C{  public void click(long time,float x,float y,boolean fromMouse,int buttons){  if (mModelSelectorButton.click(x,y) && mTabModelSelector != null) {    getActiveStripLayoutHelper().finishAnimation();    if (!mModelSelectorButton.isVisible())     return;    mTabModelSelector.selectModel(!mTabModelSelector.isIncognitoSelected());    return;  }  getActiveStripLayoutHelper().click(time,x,y,fromMouse,buttons);}  }
class C{  public AddressedProgrammer reserveAddressedProgrammer(boolean pLongAddress,int pAddress){  return null;}  }
class C{  public FaultSource createFaultSource(){  FaultSourceImpl faultSource=new FaultSourceImpl();  return faultSource;}  }
class C{  @Override public double calculateLikelihood(List<BranchOperation> branchOperations,List<NodeOperation> nodeOperations,int rootNodeNumber) throws LikelihoodUnderflowException {  if (RESCALING_OFF) {    useScaleFactors=false;    recomputeScaleFactors=false;  }  int branchUpdateCount=0;  for (  BranchOperation op : branchOperations) {    branchUpdateIndices[branchUpdateCount]=op.getBranchNumber();    branchLengths[branchUpdateCount]=op.getBranchLength();    branchUpdateCount++;  }  if (updateSubstitutionModel) {    evolutionaryProcessDelegate.updateSubstitutionModels(beagle,flip);  }  if (updateSiteModel) {    double[] categoryRates=this.siteRateModel.getCategoryRates();    beagle.setCategoryRates(categoryRates);  }  if (branchUpdateCount > 0) {    evolutionaryProcessDelegate.updateTransitionMatrices(beagle,branchUpdateIndices,branchLengths,branchUpdateCount,flip);  }  if (flip) {    for (    NodeOperation op : nodeOperations) {      partialBufferHelper.flipOffset(op.getNodeNumber());    }  }  int operationCount=nodeOperations.size();  int k=0;  for (  NodeOperation op : nodeOperations) {    int nodeNum=op.getNodeNumber();    operations[k]=partialBufferHelper.getOffsetIndex(nodeNum);    if (useScaleFactors) {      int n=nodeNum - tipCount;      if (recomputeScaleFactors) {        scaleBufferHelper.flipOffset(n);        scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);        operations[k + 1]=scaleBufferIndices[n];        operations[k + 2]=Beagle.NONE;      } else {        operations[k + 1]=Beagle.NONE;        operations[k + 2]=scaleBufferIndices[n];      }    } else {      if (useAutoScaling) {        scaleBufferIndices[nodeNum - tipCount]=partialBufferHelper.getOffsetIndex(nodeNum);      }      operations[k + 1]=Beagle.NONE;      operations[k + 2]=Beagle.NONE;    }    operations[k + 3]=partialBufferHelper.getOffsetIndex(op.getLeftChild());    operations[k + 4]=evolutionaryProcessDelegate.getMatrixIndex(op.getLeftChild());    operations[k + 5]=partialBufferHelper.getOffsetIndex(op.getRightChild());    operations[k + 6]=evolutionaryProcessDelegate.getMatrixIndex(op.getRightChild());    k+=Beagle.OPERATION_TUPLE_SIZE;  }  beagle.updatePartials(operations,operationCount,Beagle.NONE);  int rootIndex=partialBufferHelper.getOffsetIndex(rootNodeNumber);  double[] categoryWeights=this.siteRateModel.getCategoryProportions();  double[] frequencies=evolutionaryProcessDelegate.getRootStateFrequencies();  int cumulateScaleBufferIndex=Beagle.NONE;  if (useScaleFactors) {    if (recomputeScaleFactors) {      scaleBufferHelper.flipOffset(internalNodeCount);      cumulateScaleBufferIndex=scaleBufferHelper.getOffsetIndex(internalNodeCount);      beagle.resetScaleFactors(cumulateScaleBufferIndex);      beagle.accumulateScaleFactors(scaleBufferIndices,internalNodeCount,cumulateScaleBufferIndex);    } else {      cumulateScaleBufferIndex=scaleBufferHelper.getOffsetIndex(internalNodeCount);    }  } else   if (useAutoScaling) {    beagle.accumulateScaleFactors(scaleBufferIndices,internalNodeCount,Beagle.NONE);  }  beagle.setCategoryWeights(0,categoryWeights);  beagle.setStateFrequencies(0,frequencies);  double[] sumLogLikelihoods=new double[1];  beagle.calculateRootLogLikelihoods(new int[]{rootIndex},new int[]{0},new int[]{0},new int[]{cumulateScaleBufferIndex},1,sumLogLikelihoods);  double logL=sumLogLikelihoods[0];  if (Double.isNaN(logL) || Double.isInfinite(logL)) {    everUnderflowed=true;    flip=false;    throw new LikelihoodUnderflowException();  }  updateSubstitutionModel=false;  updateSiteModel=false;  return logL;}  }
class C{  public DragSortController buildController(DragSortListView dslv){  DragSortController controller=new DragSortController(dslv);  controller.setDragHandleId(R.id.ivDragHandle);  controller.setRemoveEnabled(true);  controller.setSortEnabled(true);  controller.setDragInitMode(DragSortController.ON_DOWN);  controller.setRemoveMode(DragSortController.FLING_REMOVE);  return controller;}  }
class C{  @Override public boolean isCellEditable(int row,int col){  if (col == 1) {    return true;  }  return false;}  }
class C{  public static boolean ask(int windowNo,Component comp,String adMessage){  ask(windowNo,comp,adMessage,null);  return true;}  }
class C{  private void backupFiles(){  try {    fileManager.backupFile("config.yml");  } catch (  IOException e) {    this.getLogger().log(Level.SEVERE,"Error while backing up configuration file: ",e);    successfulLoad=false;  }  try {    fileManager.backupFile(config.getString("LanguageFileName","lang.yml"));  } catch (  IOException e) {    this.getLogger().log(Level.SEVERE,"Error while backing up language file: ",e);    successfulLoad=false;  }}  }
class C{  public boolean deleteImage(String path){  return new File(path).delete();}  }
class C{  public static EvolutionState possiblyRestoreFromCheckpoint(String[] args){  for (int x=0; x < args.length - 1; x++)   if (args[x].equals(A_CHECKPOINT)) {    System.err.println("Restoring from Checkpoint " + args[x + 1]);    try {      return Checkpoint.restoreFromCheckpoint(args[x + 1]);    } catch (    Exception e) {      Output.initialError("An exception was generated upon starting up from a checkpoint.\nHere it is:\n" + e);    }  }  return null;}  }
class C{  public void removeNotify(){synchronized (getTreeLock()) {    TextComponentPeer peer=(TextComponentPeer)this.peer;    if (peer != null) {      text=peer.getText();      selectionStart=peer.getSelectionStart();      selectionEnd=peer.getSelectionEnd();    }    super.removeNotify();  }}  }
class C{  private boolean enabled(){  return true;}  }
class C{  @BeforeClass public static void init() throws Exception {  Path tempDir=createTempDir();  Path coresDir=tempDir.resolve("cores");  System.setProperty("coreRootDirectory",coresDir.toString());  System.setProperty("configSetBaseDir",TEST_HOME());  final SortedMap<ServletHolder,String> extraServlets=new TreeMap<>();  final ServletHolder solrSchemaRestApi=new ServletHolder("SolrSchemaRestApi",ServerServlet.class);  solrSchemaRestApi.setInitParameter("org.restlet.application","org.apache.solr.rest.SolrSchemaRestApi");  extraServlets.put(solrSchemaRestApi,"/schema/*");  Properties props=new Properties();  props.setProperty("name",DEFAULT_TEST_CORENAME);  props.setProperty("config","solrconfig.xml");  props.setProperty("schema","schema-rest.xml");  props.setProperty("configSet","collection1");  writeCoreProperties(coresDir.resolve("core"),props,"SolrRestletTestBase");  createJettyAndHarness(TEST_HOME(),"solrconfig.xml","schema-rest.xml","/solr",true,extraServlets);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.SPLITTER__NAME:    return getName();case EipPackage.SPLITTER__TO_CHANNELS:  return getToChannels();case EipPackage.SPLITTER__FROM_CHANNELS:return getFromChannels();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.NEGATIVE_CONSTRAINT___CONSTRAINT_1:    getConstraint_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public SchemaRegistrySingle(Schema schema){  setSchema(schema);}  }
class C{  public static String toSQLNameDefault(String camelCased){  if (camelCased.equalsIgnoreCase("_id")) {    return "_id";  }  StringBuilder sb=new StringBuilder();  char[] buf=camelCased.toCharArray();  for (int i=0; i < buf.length; i++) {    char prevChar=(i > 0) ? buf[i - 1] : 0;    char c=buf[i];    char nextChar=(i < buf.length - 1) ? buf[i + 1] : 0;    boolean isFirstChar=(i == 0);    if (isFirstChar || Character.isLowerCase(c) || Character.isDigit(c)) {      sb.append(Character.toUpperCase(c));    } else     if (Character.isUpperCase(c)) {      if (Character.isLetterOrDigit(prevChar)) {        if (Character.isLowerCase(prevChar)) {          sb.append('_').append(c);        } else         if (nextChar > 0 && Character.isLowerCase(nextChar)) {          sb.append('_').append(c);        } else {          sb.append(c);        }      } else {        sb.append(c);      }    }  }  return sb.toString();}  }
class C{  @Override public void write(ArrayDataOutput str) throws FitsException {  allocate();  try {    str.write(this.heap,0,this.heapSize);  } catch (  IOException e) {    throw new FitsException("Error writing heap:" + e.getMessage(),e);  }}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder("\nBoolean Function:");  for (int i=0; i < lookupTable.length; i++) {    buf.append("\n").append(i).append("\t");    buf.append(lookupTable[i]);  }  buf.append("\n\n");  return buf.toString();}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return FetchHostResponse.create(dm,this.getSender());}  }
class C{  private void substractFromCurrentSize(long size){  currentSize.addAndGet(-(size));  dataRemovedInBytes.addAndGet(size);}  }
class C{  @After public void teardown(){  if (pipeline != null) {    logger.info("Shutting down pipeline...");    pipeline.shutdown(false);  }  if (runtime != null) {    logger.info("Releasing runtime...");    runtime.release();  }}  }
class C{  private void cipherBlock(byte[] in,int inOffset,byte[] out,int outOffset){  temp[0]=((in[inOffset]) << 24) | ((in[inOffset + 1] & 0xff) << 16) | ((in[inOffset + 2] & 0xff) << 8)| ((in[inOffset + 3] & 0xff));  temp[1]=((in[inOffset + 4]) << 24) | ((in[inOffset + 5] & 0xff) << 16) | ((in[inOffset + 6] & 0xff) << 8)| ((in[inOffset + 7] & 0xff));  if (decrypting) {    decryptBlock(temp);  } else {    encryptBlock(temp);  }  int t=temp[0];  out[outOffset]=(byte)(t >> 24);  out[outOffset + 1]=(byte)(t >> 16);  out[outOffset + 2]=(byte)(t >> 8);  out[outOffset + 3]=(byte)(t);  t=temp[1];  out[outOffset + 4]=(byte)(t >> 24);  out[outOffset + 5]=(byte)(t >> 16);  out[outOffset + 6]=(byte)(t >> 8);  out[outOffset + 7]=(byte)(t);}  }
class C{  private static int med3(int x[],int a,int b,int c){  return (x[a] < x[b] ? (x[b] < x[c] ? b : x[a] < x[c] ? c : a) : (x[b] > x[c] ? b : x[a] > x[c] ? c : a));}  }
class C{  @Deprecated public static <T>PeekingIterator<T> peekingIterator(PeekingIterator<T> iterator){  return checkNotNull(iterator);}  }
class C{  protected void drawGeometry(DrawContext dc,int mode,int count,int type,Buffer elementBuffer,ShapeData shapeData,int face){  if (elementBuffer == null) {    String message="nullValue.ElementBufferIsNull";    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Geometry mesh=shapeData.getMesh(face);  if (mesh.getBuffer(Geometry.VERTEX) == null) {    String message="nullValue.VertexBufferIsNull";    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  GL2 gl=dc.getGL().getGL2();  int size, glType, stride;  Buffer vertexBuffer, normalBuffer;  size=mesh.getSize(Geometry.VERTEX);  glType=mesh.getGLType(Geometry.VERTEX);  stride=mesh.getStride(Geometry.VERTEX);  vertexBuffer=mesh.getBuffer(Geometry.VERTEX);  normalBuffer=null;  if (!dc.isPickingMode()) {    if (mustApplyLighting(dc,null)) {      normalBuffer=mesh.getBuffer(Geometry.NORMAL);      if (normalBuffer == null) {        gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);      } else {        glType=mesh.getGLType(Geometry.NORMAL);        stride=mesh.getStride(Geometry.NORMAL);        gl.glNormalPointer(glType,stride,normalBuffer);      }    }  }  boolean vboState=dc.getGLRuntimeCapabilities().isVertexBufferObjectEnabled();  dc.getGLRuntimeCapabilities().setVertexBufferObjectEnabled(false);  if (this.shouldUseVBOs(dc) && (this.getVboIds(getSubdivisions(),dc)) != null) {    gl.glBindBuffer(GL.GL_ARRAY_BUFFER,getVboIds(getSubdivisions(),dc)[2 * face]);    gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,this.getVboIds(getSubdivisions(),dc)[2 * face + 1]);    gl.glVertexPointer(size,glType,stride,0);    gl.glDrawElements(mode,count,type,0);    gl.glBindBuffer(GL.GL_ARRAY_BUFFER,0);    gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,0);  } else {    gl.glVertexPointer(size,glType,stride,vertexBuffer.rewind());    gl.glDrawElements(mode,count,type,elementBuffer);  }  gl.glDisable(GL2.GL_RESCALE_NORMAL);  dc.getGLRuntimeCapabilities().setVertexBufferObjectEnabled(vboState);  if (!dc.isPickingMode()) {    if (mustApplyLighting(dc,null)) {      if (normalBuffer == null)       gl.glEnableClientState(GL2.GL_NORMAL_ARRAY);    }  }}  }
class C{  public static void main(String[] args){  final MqttSpyDaemon daemon=new MqttSpyDaemon();  try {    daemon.initialise();    if (args.length == 0) {      logger.warn("!!! Using sample configuration for localhost - to use your own configuration file, specify its location as a parameter !!!");      daemon.loadAndRun("/sample-configuration.xml");    } else     if (args.length != 1) {      logger.error("Expecting only 1 parameter with the configuration file location");      return;    } else {      daemon.loadAndRun(args[0]);    }  } catch (  XMLException e) {    logger.error("Cannot load the daemon's configuration",e);  }catch (  SpyException e) {    logger.error("Error occurred while connecting to broker",e);  }}  }
class C{  @Override protected TemplateModel invokeGenericGet(Map keyMap,Class clazz,String key) throws TemplateModelException {  Map map=(Map)object;  Object val=map.get(key);  if (val == null) {    if (key.length() == 1) {      Character charKey=Character.valueOf(key.charAt(0));      val=map.get(charKey);      if (val == null && !(map.containsKey(key) || map.containsKey(charKey))) {        return UNKNOWN;      }    } else     if (!map.containsKey(key)) {      return UNKNOWN;    }  }  return wrap(val);}  }
class C{  private void updatePurchasedItem(String productId,int quantity){  if (quantity == 0) {    mDb.delete(PURCHASED_ITEMS_TABLE_NAME,PURCHASED_PRODUCT_ID_COL + "=?",new String[]{productId});    return;  }  ContentValues values=new ContentValues();  values.put(PURCHASED_PRODUCT_ID_COL,productId);  values.put(PURCHASED_QUANTITY_COL,quantity);  mDb.replace(PURCHASED_ITEMS_TABLE_NAME,null,values);}  }
class C{  public void run(){  stdout="";  stderr="";  exitValue=-1;  error=null;  timedout=false;  succeeded=false;  try {    ProcessBuilder pb=new ProcessBuilder(commands);    Map<String,String> localEnv=pb.environment();    for (    String key : env.keySet()) {      localEnv.put(key,env.get(key));    }    pb.directory(workDirectory);    pb.redirectErrorStream(redirectStdErr);    process=pb.start();    exitValue=handleProcessIO(process);  } catch (  InterruptedException e) {    logger.warn("Command timed out: command=" + commandsToString(commands) + " timeout="+ timeout);    timedout=true;  }catch (  IOException e) {    logger.warn("Command failed with I/O error: command=" + commandsToString(commands));    logger.debug("Command I/O exception: " + e);    error=e;  }catch (  Throwable e) {    logger.warn("Command failed with unexpected exception: command=" + commandsToString(commands),e);    error=e;  }  if (this.error != null)   succeeded=false; else   if (this.exitValue != 0)   succeeded=false; else   if (this.timedout == true)   succeeded=false; else   succeeded=true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  try {    TransformerFactory tFactory=TransformerFactory.newInstance();    Transformer transformer=tFactory.newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    DOMSource source=new DOMSource(this.node);    Path tempPath=Files.createTempDirectory(Paths.get(System.getProperty("java.io.tmpdir")),"IMFDocuments");    File tempDir=tempPath.toFile();    File outputFile=new File(tempDir + "/XMLDom.xml");    StreamResult result=new StreamResult(outputFile);    transformer.transform(source,result);    sb.append(readFile(outputFile));    outputFile.deleteOnExit();  } catch (  TransformerException|IOException e) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CPL_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.WARNING,e.getMessage());  }  return sb.toString();}  }
class C{  public boolean verify(PublicKey key,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  return verify(key,CMSUtils.getProvider(sigProvider));}  }
class C{  public Long zrevrank(final byte[] key,final byte[] member){  checkIsInMulti();  client.zrevrank(key,member);  return client.getIntegerReply();}  }
class C{  @Override public void write(TextWriterStream out,String label,DoubleDoublePair object){  if (object != null) {    String res;    if (label != null) {      res=label + "=" + object.first+ ","+ object.second;    } else {      res=object.first + " " + object.second;    }    out.inlinePrintNoQuotes(res);  }}  }
class C{  public DataModelEvent(DataModel model,int index,Object data){  super(model);  this.index=index;  this.data=data;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public float area(){  final float abx=b.x - a.x;  final float aby=b.y - a.y;  final float abz=b.z - a.z;  final float acx=c.x - a.x;  final float acy=c.y - a.y;  final float acz=c.z - a.z;  final float r=aby * acz - abz * acy;  final float s=abz * acx - abx * acz;  final float t=abx * acy - aby * acx;  return 0.5f * (float)Math.sqrt(r * r + s * s + t * t);}  }
class C{  private ArrayList<ChartSet> prepareAnimation(ChartView chartView){  final ArrayList<ChartSet> sets=chartView.getData();  float x;  if (mStartXFactor != -1)   x=chartView.getInnerChartLeft() + (chartView.getInnerChartRight() - chartView.getInnerChartLeft()) * mStartXFactor; else   x=chartView.getZeroPosition();  float y;  if (mStartYFactor != -1)   y=chartView.getInnerChartBottom() - (chartView.getInnerChartBottom() - chartView.getInnerChartTop()) * mStartYFactor; else   y=chartView.getZeroPosition();  final int nSets=sets.size();  final int nEntries=sets.get(0).size();  mSetsAlpha=new float[nSets];  ArrayList<float[][]> startValues=new ArrayList<>(nSets);  ArrayList<float[][]> endValues=new ArrayList<>(nSets);  float[][] startSet;  float[][] endSet;  for (int i=0; i < nSets; i++) {    mSetsAlpha[i]=sets.get(i).getAlpha();    startSet=new float[nEntries][2];    endSet=new float[nEntries][2];    for (int j=0; j < nEntries; j++) {      if (mStartXFactor == -1 && chartView.getOrientation() == ChartView.Orientation.VERTICAL)       startSet[j][0]=sets.get(i).getEntry(j).getX(); else       startSet[j][0]=x;      if (mStartYFactor == -1 && chartView.getOrientation() == ChartView.Orientation.HORIZONTAL)       startSet[j][1]=sets.get(i).getEntry(j).getY(); else       startSet[j][1]=y;      endSet[j][0]=sets.get(i).getEntry(j).getX();      endSet[j][1]=sets.get(i).getEntry(j).getY();    }    startValues.add(startSet);    endValues.add(endSet);  }  if (mEasing.getState() == BaseEasingMethod.ENTER)   return prepareAnimation(chartView,startValues,endValues); else   return prepareAnimation(chartView,endValues,startValues);}  }
class C{  public static IndicesShardStoresRequest indicesShardStoresRequest(String... indices){  return new IndicesShardStoresRequest(indices);}  }
class C{  public void deleteGeolocSharings(ContactId contact) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteGeolocSharings2(contact);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z, min, max;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          min=z;          max=z;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              n+=1 * filterShape[a];              sum+=z * filterShape[a];              if (z < min) {                min=z;              }              if (z > max) {                max=z;              }            }          }          if ((n - 2) > 0) {            outputFile.setValue(row,col,(sum - min - max) / (n - 2));          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void pauseJob(JobKey jobKey) throws SchedulerException {  try {    getRemoteScheduler().pauseJob(jobKey);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  public ListResponse list(final ListRequest request) throws IOException, SubversionException {  final File projectPath=new File(request.getProjectPath());  final List<String> args=defaultArgs();  args.add("list");  List<String> paths=new ArrayList<>();  paths.add(request.getTarget());  final CommandLineResult result=runCommand(null,args,projectPath,paths);  return DtoFactory.getInstance().createDto(ListResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrorOutput(result.getStderr());}  }
class C{  public ScannerException(ErrorMessages message,int line){  this(null,ErrorMessages.get(message),message,line,-1);}  }
class C{  public static String generateUserAgent(Context context){  if (context == null)   return generateUserAgent();  String appVersion=Util.getAppVersion(context);  String androidVersion=Util.getAndroidVersion();  String userAgent="MuninForAndroid/" + appVersion + " ("+ androidVersion+ ")";  log("User agent : " + userAgent);  return userAgent;}  }
class C{  public void release(){  sweepConsumedBlocks(true);}  }
class C{  private void initDictionaryDirPaths() throws IOException {  CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(this.carbonStorePath,carbonTableIdentifier);  String dictionaryLocation=carbonTablePath.getMetadataDirectoryPath();  FileFactory.FileType fileType=FileFactory.getFileType(dictionaryLocation);  if (!FileFactory.isFileExist(dictionaryLocation,fileType)) {    FileFactory.mkdirs(dictionaryLocation,fileType);  }  this.dictionaryFilePath=carbonTablePath.getDictionaryFilePath(columnIdentifier.getColumnId());  this.dictionaryMetaFilePath=carbonTablePath.getDictionaryMetaFilePath(columnIdentifier.getColumnId());}  }
class C{  boolean isSeparator(){  return false;}  }
class C{  public static boolean hasDefinedVariantGt(VcfRecord rec,int sampleId){  if (sampleId >= rec.getNumberOfSamples()) {    throw new VcfFormatException("Record did not contain enough samples: " + rec.toString());  }  if (!rec.hasFormat(FORMAT_GENOTYPE)) {    return false;  }  final int[] gtArr=getValidGt(rec,sampleId);  final VariantType type=VariantType.getType(rec,gtArr);  return !type.isNonVariant() && !type.isSvType();}  }
class C{  public void postCheckpoint(){  AsynchronousSteppable[] b=asynchronousRegistry();  final int len=b.length;  for (int x=0; x < len; x++)   b[x].resume(false);}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case SexecPackage.MAPPED_ELEMENT:{      MappedElement mappedElement=(MappedElement)theEObject;      T result=caseMappedElement(mappedElement);      if (result == null)       result=defaultCase(theEObject);      return result;    }case SexecPackage.EXECUTION_FLOW:{    ExecutionFlow executionFlow=(ExecutionFlow)theEObject;    T result=caseExecutionFlow(executionFlow);    if (result == null)     result=caseScopedElement(executionFlow);    if (result == null)     result=caseExecutionScope(executionFlow);    if (result == null)     result=caseExecutionNode(executionFlow);    if (result == null)     result=caseMappedElement(executionFlow);    if (result == null)     result=caseNamedElement(executionFlow);    if (result == null)     result=defaultCase(theEObject);    return result;  }case SexecPackage.EXECUTION_NODE:{  ExecutionNode executionNode=(ExecutionNode)theEObject;  T result=caseExecutionNode(executionNode);  if (result == null)   result=caseMappedElement(executionNode);  if (result == null)   result=caseNamedElement(executionNode);  if (result == null)   result=defaultCase(theEObject);  return result;}case SexecPackage.EXECUTION_STATE:{ExecutionState executionState=(ExecutionState)theEObject;T result=caseExecutionState(executionState);if (result == null) result=caseExecutionNode(executionState);if (result == null) result=caseExecutionScope(executionState);if (result == null) result=caseMappedElement(executionState);if (result == null) result=caseNamedElement(executionState);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.EXECUTION_SCOPE:{ExecutionScope executionScope=(ExecutionScope)theEObject;T result=caseExecutionScope(executionScope);if (result == null) result=caseMappedElement(executionScope);if (result == null) result=caseNamedElement(executionScope);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.EXECUTION_REGION:{ExecutionRegion executionRegion=(ExecutionRegion)theEObject;T result=caseExecutionRegion(executionRegion);if (result == null) result=caseExecutionScope(executionRegion);if (result == null) result=caseMappedElement(executionRegion);if (result == null) result=caseNamedElement(executionRegion);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.EXECUTION_ENTRY:{ExecutionEntry executionEntry=(ExecutionEntry)theEObject;T result=caseExecutionEntry(executionEntry);if (result == null) result=caseExecutionNode(executionEntry);if (result == null) result=caseMappedElement(executionEntry);if (result == null) result=caseNamedElement(executionEntry);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.EXECUTION_EXIT:{ExecutionExit executionExit=(ExecutionExit)theEObject;T result=caseExecutionExit(executionExit);if (result == null) result=caseExecutionNode(executionExit);if (result == null) result=caseMappedElement(executionExit);if (result == null) result=caseNamedElement(executionExit);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.EXECUTION_CHOICE:{ExecutionChoice executionChoice=(ExecutionChoice)theEObject;T result=caseExecutionChoice(executionChoice);if (result == null) result=caseExecutionNode(executionChoice);if (result == null) result=caseMappedElement(executionChoice);if (result == null) result=caseNamedElement(executionChoice);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.EXECUTION_SYNCHRONIZATION:{ExecutionSynchronization executionSynchronization=(ExecutionSynchronization)theEObject;T result=caseExecutionSynchronization(executionSynchronization);if (result == null) result=caseExecutionNode(executionSynchronization);if (result == null) result=caseMappedElement(executionSynchronization);if (result == null) result=caseNamedElement(executionSynchronization);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.REACTION:{Reaction reaction=(Reaction)theEObject;T result=caseReaction(reaction);if (result == null) result=caseMappedElement(reaction);if (result == null) result=caseNamedElement(reaction);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.STATE_VECTOR:{StateVector stateVector=(StateVector)theEObject;T result=caseStateVector(stateVector);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.TIME_EVENT:{TimeEvent timeEvent=(TimeEvent)theEObject;T result=caseTimeEvent(timeEvent);if (result == null) result=caseEvent(timeEvent);if (result == null) result=caseDeclaration(timeEvent);if (result == null) result=caseTypedElement(timeEvent);if (result == null) result=casePackageMember(timeEvent);if (result == null) result=caseNamedElement(timeEvent);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.STEP:{Step step=(Step)theEObject;T result=caseStep(step);if (result == null) result=caseNamedElement(step);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.SEQUENCE:{Sequence sequence=(Sequence)theEObject;T result=caseSequence(sequence);if (result == null) result=caseStep(sequence);if (result == null) result=caseNamedElement(sequence);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.CHECK:{Check check=(Check)theEObject;T result=caseCheck(check);if (result == null) result=caseStep(check);if (result == null) result=caseNamedElement(check);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.CHECK_REF:{CheckRef checkRef=(CheckRef)theEObject;T result=caseCheckRef(checkRef);if (result == null) result=caseCheck(checkRef);if (result == null) result=caseStep(checkRef);if (result == null) result=caseNamedElement(checkRef);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.IF:{If if_=(If)theEObject;T result=caseIf(if_);if (result == null) result=caseStep(if_);if (result == null) result=caseNamedElement(if_);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.EXECUTION:{Execution execution=(Execution)theEObject;T result=caseExecution(execution);if (result == null) result=caseStep(execution);if (result == null) result=caseNamedElement(execution);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.ENTER_STATE:{EnterState enterState=(EnterState)theEObject;T result=caseEnterState(enterState);if (result == null) result=caseStep(enterState);if (result == null) result=caseNamedElement(enterState);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.EXIT_STATE:{ExitState exitState=(ExitState)theEObject;T result=caseExitState(exitState);if (result == null) result=caseStep(exitState);if (result == null) result=caseNamedElement(exitState);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.CALL:{Call call=(Call)theEObject;T result=caseCall(call);if (result == null) result=caseStep(call);if (result == null) result=caseNamedElement(call);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.SCHEDULE_TIME_EVENT:{ScheduleTimeEvent scheduleTimeEvent=(ScheduleTimeEvent)theEObject;T result=caseScheduleTimeEvent(scheduleTimeEvent);if (result == null) result=caseStep(scheduleTimeEvent);if (result == null) result=caseNamedElement(scheduleTimeEvent);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.UNSCHEDULE_TIME_EVENT:{UnscheduleTimeEvent unscheduleTimeEvent=(UnscheduleTimeEvent)theEObject;T result=caseUnscheduleTimeEvent(unscheduleTimeEvent);if (result == null) result=caseStep(unscheduleTimeEvent);if (result == null) result=caseNamedElement(unscheduleTimeEvent);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.STATE_SWITCH:{StateSwitch stateSwitch=(StateSwitch)theEObject;T result=caseStateSwitch(stateSwitch);if (result == null) result=caseStep(stateSwitch);if (result == null) result=caseNamedElement(stateSwitch);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.STATE_CASE:{StateCase stateCase=(StateCase)theEObject;T result=caseStateCase(stateCase);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.SAVE_HISTORY:{SaveHistory saveHistory=(SaveHistory)theEObject;T result=caseSaveHistory(saveHistory);if (result == null) result=caseStep(saveHistory);if (result == null) result=caseNamedElement(saveHistory);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.HISTORY_ENTRY:{HistoryEntry historyEntry=(HistoryEntry)theEObject;T result=caseHistoryEntry(historyEntry);if (result == null) result=caseStep(historyEntry);if (result == null) result=caseNamedElement(historyEntry);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.TRACE:{Trace trace=(Trace)theEObject;T result=caseTrace(trace);if (result == null) result=caseStep(trace);if (result == null) result=caseNamedElement(trace);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.TRACE_NODE_EXECUTED:{TraceNodeExecuted traceNodeExecuted=(TraceNodeExecuted)theEObject;T result=caseTraceNodeExecuted(traceNodeExecuted);if (result == null) result=caseTrace(traceNodeExecuted);if (result == null) result=caseStep(traceNodeExecuted);if (result == null) result=caseNamedElement(traceNodeExecuted);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.REACTION_FIRED:{ReactionFired reactionFired=(ReactionFired)theEObject;T result=caseReactionFired(reactionFired);if (result == null) result=caseTrace(reactionFired);if (result == null) result=caseStep(reactionFired);if (result == null) result=caseNamedElement(reactionFired);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.TRACE_REACTION_WILL_FIRE:{TraceReactionWillFire traceReactionWillFire=(TraceReactionWillFire)theEObject;T result=caseTraceReactionWillFire(traceReactionWillFire);if (result == null) result=caseTrace(traceReactionWillFire);if (result == null) result=caseStep(traceReactionWillFire);if (result == null) result=caseNamedElement(traceReactionWillFire);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.TRACE_STATE_ENTERED:{TraceStateEntered traceStateEntered=(TraceStateEntered)theEObject;T result=caseTraceStateEntered(traceStateEntered);if (result == null) result=caseTrace(traceStateEntered);if (result == null) result=caseStep(traceStateEntered);if (result == null) result=caseNamedElement(traceStateEntered);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.TRACE_STATE_EXITED:{TraceStateExited traceStateExited=(TraceStateExited)theEObject;T result=caseTraceStateExited(traceStateExited);if (result == null) result=caseTrace(traceStateExited);if (result == null) result=caseStep(traceStateExited);if (result == null) result=caseNamedElement(traceStateExited);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.TRACE_BEGIN_RUN_CYCLE:{TraceBeginRunCycle traceBeginRunCycle=(TraceBeginRunCycle)theEObject;T result=caseTraceBeginRunCycle(traceBeginRunCycle);if (result == null) result=caseTrace(traceBeginRunCycle);if (result == null) result=caseStep(traceBeginRunCycle);if (result == null) result=caseNamedElement(traceBeginRunCycle);if (result == null) result=defaultCase(theEObject);return result;}case SexecPackage.TRACE_END_RUN_CYCLE:{TraceEndRunCycle traceEndRunCycle=(TraceEndRunCycle)theEObject;T result=caseTraceEndRunCycle(traceEndRunCycle);if (result == null) result=caseTrace(traceEndRunCycle);if (result == null) result=caseStep(traceEndRunCycle);if (result == null) result=caseNamedElement(traceEndRunCycle);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  @Override public int hashCode(){  return points.hashCode();}  }
class C{  public static <T extends DataObjectRestRep>T find(Collection<T> values,URI id){  if ((values != null) && (id != null)) {    for (    T value : values) {      if (id.equals(id(value))) {        return value;      }    }  }  return null;}  }
class C{  private void findMatchingLeftParen(int parenIdx) throws ParenErrorException {  int savedCurrLoc=currLoc;  int lastParenSearched=parenIdx;  boolean justWentToPrevRegion=false;  while (true) {    if (!justWentToPrevRegion) {      currLoc=currLoc - PARENS[lastParenSearched].length();    }    int pidx=-1;    while (currLoc > beginCurrRegion && ((pidx=getParenToLeftOf(currLoc)) == -1)) {      currLoc--;    }    if (pidx == -1) {      getPrevRegion();      currLoc=endCurrRegion;      justWentToPrevRegion=true;    } else {      if (pidx >= PCOUNT) {        findMatchingLeftParen(pidx);        lastParenSearched=pidx;        justWentToPrevRegion=false;      } else {        if ((pidx - parenIdx) % PCOUNT == 0) {          return;        } else {          throw new ParenErrorException(PARENS[pidx] + " matches " + PARENS[parenIdx],new Region(currLoc - PARENS[pidx].length(),PARENS[pidx].length()),new Region(savedCurrLoc - PARENS[parenIdx].length(),PARENS[parenIdx].length()));        }      }    }  }}  }
class C{  public boolean isProjectPhaseDim(){  Object oo=get_Value(COLUMNNAME_IsProjectPhaseDim);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Timestamp now(){  long millis=System.currentTimeMillis();  return new Timestamp(millis,UNKNOWN_OFFSET);}  }
class C{  public Variable[] findIterablesInCurrentScope(){  List<Variable> iterables=new ArrayList<Variable>();  for (ListIterator<Variable> iterator=fLocalVariables.listIterator(fLocalVariables.size()); iterator.hasPrevious(); ) {    Variable localVariable=iterator.previous();    if (localVariable.isArray() || localVariable.isIterable())     iterables.add(localVariable);  }  for (ListIterator<Variable> iterator=fFields.listIterator(fFields.size()); iterator.hasPrevious(); ) {    Variable field=iterator.previous();    if (field.isArray() || field.isIterable())     iterables.add(field);  }  return iterables.toArray(new Variable[iterables.size()]);}  }
class C{  public DataPoint add(DataPoint point){  if (logger.isDebugEnabled()) {    logger.debug("adding point " + point);  }  Branch parent=null;  Node current=root;  boolean onLeft=true;  while (current.type == Type.branch) {    Branch branch=(Branch)current;    parent=branch;    if (point.get(branch.splitDimension) < branch.midPoint) {      if (logger.isDebugEnabled())       logger.debug("at branch : " + branch + " - going left");      current=branch.left;      onLeft=true;    } else {      if (logger.isDebugEnabled())       logger.debug("at branch : " + branch + " - going right");      current=branch.right;      onLeft=false;    }  }  Leaf leaf=(Leaf)current;  if (logger.isDebugEnabled())   logger.debug("adding point to leaf : " + leaf);  leaf.points.add(point);  list.add(point);  all.put(point,leaf);  int size=leaf.points.size();  if (logger.isDebugEnabled())   logger.debug("leaf size : " + size);  if (size > MAX) {    int splitOn=parent == null ? 0 : (parent.splitDimension + 1) % dimensions;    if (logger.isDebugEnabled())     logger.debug("splitting leaf on dimension: " + splitOn);    int middle=size / 2;    if (logger.isTraceEnabled())     logger.trace("middle: " + middle);    Collections.sort(leaf.points,new PointComparator(splitOn));    DataPoint leftPoint=leaf.points.get(middle);    if (logger.isTraceEnabled())     logger.trace("leftPoint: " + leftPoint);    DataPoint rightPoint=leaf.points.get(middle + 1);    if (logger.isTraceEnabled())     logger.trace("rightPoint: " + rightPoint);    double midPoint=(leftPoint.get(splitOn) + rightPoint.get(splitOn)) / 2;    if (logger.isTraceEnabled())     logger.trace("midPoint: " + midPoint);    Branch newBranch=new Branch(midPoint,splitOn);    Leaf left=new Leaf();    Leaf right=new Leaf();    for (int i=0; i < size; i++) {      DataPoint p=leaf.points.get(i);      if (p.get(splitOn) < midPoint) {        if (logger.isTraceEnabled())         logger.trace("adding to left: " + p);        left.points.add(p);        all.put(p,left);      } else {        if (logger.isTraceEnabled())         logger.trace("adding to right: " + p);        right.points.add(p);        all.put(p,right);      }    }    newBranch.left=left;    newBranch.right=right;    if (parent == null) {      if (logger.isTraceEnabled())       logger.debug("setting new branch as root");      root=newBranch;    } else     if (onLeft) {      if (logger.isTraceEnabled())       logger.debug("setting new branch as left");      parent.left=newBranch;    } else {      if (logger.isTraceEnabled())       logger.debug("setting new branch as right");      parent.right=newBranch;    }  }  return null;}  }
class C{  public BuilderForGossipSeedDiscoverer gossipTimeout(Duration gossipTimeout){  super.gossipTimeout=gossipTimeout;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:35.441 -0500",hash_original_method="EEE63DC836F5AA81B1ECC566DDEA88C5",hash_generated_method="E82CEC69A1F5D37810182A3E91AD9916") protected void prepareSocket(Socket sock,HttpContext context,HttpParams params) throws IOException {  sock.setTcpNoDelay(HttpConnectionParams.getTcpNoDelay(params));  sock.setSoTimeout(HttpConnectionParams.getSoTimeout(params));  int linger=HttpConnectionParams.getLinger(params);  if (linger >= 0) {    sock.setSoLinger(linger > 0,linger);  }}  }
class C{  public static ExceptionBuilder internalServerError(){  return new ExceptionBuilder(Status.INTERNAL_SERVER_ERROR);}  }
class C{  public static String serialize(Object value){  if (value instanceof String) {    return (String)value;  } else   if (value instanceof byte[]) {    return new String((byte[])value);  } else {    log.severe("Unable to convert value '" + value + "' to string");  }  return null;}  }
class C{  public URI(String p_scheme,String p_host,String p_path,String p_queryString,String p_fragment) throws MalformedURIException {  this(p_scheme,null,p_host,-1,p_path,p_queryString,p_fragment);}  }
class C{  @Inline @Entrypoint public static void booleanArrayWrite(boolean[] ref,int index,boolean value){  if (NEEDS_BOOLEAN_GC_WRITE_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index << LOG_BYTES_IN_BOOLEAN);    Selected.Mutator.get().booleanWrite(array,array.toAddress().plus(offset),value,offset.toWord(),Word.zero(),ARRAY_ELEMENT);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public void testLocalsAverageCorrectly(ConditionalMutualInfoCalculatorMultiVariate condMiCalc,int dimensions,int timeSteps) throws Exception {  condMiCalc.initialise(dimensions,dimensions,dimensions);  RandomGenerator rg=new RandomGenerator();  double[][] sourceData=rg.generateNormalData(timeSteps,dimensions,0,1);  double[][] destData=rg.generateNormalData(timeSteps,dimensions,0,1);  double[][] condData=rg.generateNormalData(timeSteps,dimensions,0,1);  condMiCalc.setObservations(sourceData,destData,condData);  double condmi=condMiCalc.computeAverageLocalOfObservations();  double[] condMiLocal=condMiCalc.computeLocalOfPreviousObservations();  System.out.printf("Average was %.5f\n",condmi);  assertEquals(condmi,MatrixUtils.mean(condMiLocal),0.00001);}  }
class C{  public void updateAfterAnswer(long challengeId,long userId,int stageUp){  if (stageUp != ANSWER_WRONG && stageUp != ANSWER_RIGHT) {    return;  }  Completion completed=mCompletionDataSource.findByChallengeAndUser(challengeId,userId);  if (completed == null) {    completed=new Completion(null,2,new Date(),userId,challengeId);    if (stageUp == ANSWER_WRONG) {      completed.setStage(1);    }    mCompletionDataSource.create(completed);  } else {    completed.setStage(completed.getStage() + stageUp);    if (completed.getStage() < 1) {      completed.setStage(1);    } else     if (completed.getStage() > 6) {      completed.setStage(6);    }    completed.setLastCompleted(new Date());    mCompletionDataSource.update(completed);  }}  }
class C{  final public int indexOf(final MutableString pattern){  return indexOf(pattern,0);}  }
class C{  @Override public void destroyItem(View collection,int position,Object view){  ((ViewPager)collection).removeView((View)view);  views.remove(position);}  }
class C{  public static boolean deleteContents(File directory){  File[] files=directory.listFiles();  boolean success=true;  if (files != null) {    for (    File file : files) {      success&=deleteRecursively(file);    }  }  return success;}  }
class C{  public GlassFishExistingLocalConfiguration(String home){  super(home);  this.setProperty(RemotePropertySet.USERNAME,"admin");  this.setProperty(RemotePropertySet.PASSWORD,"adminadmin");  this.setProperty(GlassFishPropertySet.ADMIN_PORT,"4848");  this.setProperty(GlassFishPropertySet.DOMAIN_NAME,"cargo-domain");  this.setProperty(GlassFishPropertySet.DEBUG_MODE,"false");}  }
class C{  @XmlElement(name="expired_ind") public boolean isExpired(){  return expired;}  }
class C{  public void callVisitors(ExpressionOwner owner,XPathVisitor visitor){  if (visitor.visitStep(owner,this)) {    callPredicateVisitors(visitor);    if (null != m_nextWalker) {      m_nextWalker.callVisitors(this,visitor);    }  }}  }
class C{  public BufferedFile(File file) throws IOException {  this(file,"r",BufferedFile.DEFAULT_BUFFER_SIZE);}  }
class C{  private LongLinkSplitter(){}  }
class C{  public ECPrivateKeySpec(BigInteger s,ECParameterSpec params){  if (s == null) {    throw new NullPointerException("s is null");  }  if (params == null) {    throw new NullPointerException("params is null");  }  this.s=s;  this.params=params;}  }
class C{  public PropertiesImportException(Reason reason){  super(String.valueOf(reason));  setMessageKey(getMessageKey() + "." + reason);}  }
class C{  public static Spannable filterFromFile(Spannable spannable,int fontSize,String filePath,EmojiDisplayListener emojiDisplayListener){  if (spannable == null) {    return null;  }  Matcher m=getMatcher(spannable.toString());  if (m != null) {    while (m.find()) {      String emojiHex=Integer.toHexString(Character.codePointAt(m.group(),0));      if (emojiDisplayListener == null) {        Drawable drawable=Drawable.createFromPath(filePath + emojiHex + ".png");        if (drawable != null) {          drawable.setBounds(0,0,fontSize,fontSize);          EmojiSpan imageSpan=new EmojiSpan(drawable);          spannable.setSpan(imageSpan,m.start(),m.end(),Spannable.SPAN_INCLUSIVE_EXCLUSIVE);        }      } else {        emojiDisplayListener.onEmojiDisplay(null,spannable,emojiHex,fontSize,m.start(),m.end());      }    }  }  return spannable;}  }
class C{  @Modifying @Transactional public Cheque synchronizeCheque(@RequestBody Cheque cheque){  Long ID=cheque.getId();  if (cheque.getBalance().getCheque() == null)   cheque.getBalance().setCheque(cheque);  chequeRepository.save(cheque);  if (ID == null)   return chequeRepository.findFirstByOrderByIdDesc(); else   return chequeRepository.findOne(ID);}  }
class C{  public static void main(String[] args){  TestBreakIterator tester=new TestBreakIterator();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public static void handleIOException(IOException exception){  System.err.println("Source file analysis failed. Reason: " + exception.getMessage());  System.exit(ExitCode.failure());}  }
class C{  public String[] array(){  return array(null);}  }
class C{  void putFile(SourceFile s,int isolateId){  int i=s.getId();  if (isolateId == Isolate.DEFAULT_ID)   m_byInt.put(i,s); else   getIsolateState(isolateId).put(i,s);}  }
class C{  protected void error(String message,int position,String context){  throw new IllegalArgumentException("Parse error at position (" + position + "): "+ message+ "\n"+ context.substring(0,position)+ " -here- "+ context.substring(position));}  }
class C{  public ParcelFileDescriptor openAccessory(UsbAccessory accessory){  try {    return mService.openAccessory(new android.hardware.usb.UsbAccessory(accessory.getManufacturer(),accessory.getModel(),accessory.getDescription(),accessory.getVersion(),accessory.getUri(),accessory.getSerial()));  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException in openAccessory",e);    return null;  }}  }
class C{  void merge(Range r){  first=Math.min(first,r.first);  last=Math.max(last,r.last);}  }
class C{  public DoubleBag(double[] other){  this();  if (other != null)   addAll(other);}  }
class C{  private boolean noEvents(){  for (int i=0; i < NUM_PRIORITIES; i++) {    if (queues[i].head != null) {      return false;    }  }  return true;}  }
class C{  public void addEntry(int startPc,int length,int nameIndex,int descriptorIndex,int index){  int size=info.length;  byte[] newInfo=new byte[size + 10];  ByteArray.write16bit(tableLength() + 1,newInfo,0);  for (int i=2; i < size; ++i)   newInfo[i]=info[i];  ByteArray.write16bit(startPc,newInfo,size);  ByteArray.write16bit(length,newInfo,size + 2);  ByteArray.write16bit(nameIndex,newInfo,size + 4);  ByteArray.write16bit(descriptorIndex,newInfo,size + 6);  ByteArray.write16bit(index,newInfo,size + 8);  info=newInfo;}  }
class C{  public static Boolean isTopActivity(Context context,String packageName){  if (context == null || TextUtils.isEmpty(packageName)) {    return null;  }  ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<ActivityManager.RunningTaskInfo> tasksInfo=activityManager.getRunningTasks(1);  if (ListUtils.isEmpty(tasksInfo)) {    return null;  }  try {    return packageName.equals(tasksInfo.get(0).topActivity.getPackageName());  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  private static boolean match(CharSequence string,CharSequence pattern,int sNdx,int pNdx){  int pLen=pattern.length();  if (pLen == 1) {    if (pattern.charAt(0) == '*') {      return true;    }  }  int sLen=string.length();  boolean nextIsNotWildcard=false;  while (true) {    if ((sNdx >= sLen) == true) {      while ((pNdx < pLen) && (pattern.charAt(pNdx) == '*')) {        pNdx++;      }      return pNdx >= pLen;    }    if (pNdx >= pLen) {      return false;    }    char p=pattern.charAt(pNdx);    if (nextIsNotWildcard == false) {      if (p == '\\') {        pNdx++;        nextIsNotWildcard=true;        continue;      }      if (p == '?') {        sNdx++;        pNdx++;        continue;      }      if (p == '*') {        char pNext=0;        if (pNdx + 1 < pLen) {          pNext=pattern.charAt(pNdx + 1);        }        if (pNext == '*') {          pNdx++;          continue;        }        int i;        pNdx++;        for (i=string.length(); i >= sNdx; i--) {          if (match(string,pattern,i,pNdx) == true) {            return true;          }        }        return false;      }    } else {      nextIsNotWildcard=false;    }    if (p != string.charAt(sNdx)) {      return false;    }    sNdx++;    pNdx++;  }}  }
class C{  public ManageReferralControl(){  super(OID,true,null);}  }
class C{  public synchronized void reopen(int[] _logs) throws IOException {  for (int x=0; x < _logs.length; x++) {    Log oldlog=(Log)logs.elementAt(_logs[x]);    logs.setElementAt(oldlog.reopen(),_logs[x]);  }}  }
class C{  protected void installListListeners(){  if ((listMouseListener=createListMouseListener()) != null) {    list.addMouseListener(listMouseListener);  }  if ((listMouseMotionListener=createListMouseMotionListener()) != null) {    list.addMouseMotionListener(listMouseMotionListener);  }  if ((listSelectionListener=createListSelectionListener()) != null) {    list.addListSelectionListener(listSelectionListener);  }}  }
class C{  public void evaluateClusterer(Instances test,String testFileName) throws Exception {  evaluateClusterer(test,testFileName,true);}  }
class C{  public ArrayDrawable(Drawable[] layers){  Preconditions.checkNotNull(layers);  mLayers=layers;  for (int i=0; i < mLayers.length; i++) {    DrawableUtils.setCallbacks(mLayers[i],this,this);  }  mDrawableParents=new DrawableParent[mLayers.length];}  }
class C{  public URITask(ConfigurationResourceProvider provider,ServletContext sc){  this.provider=provider;  this.sc=sc;}  }
class C{  public int enumerate(Thread[] threads,boolean recurse){  return enumerateGeneric(threads,recurse,0,true);}  }
class C{  public JCriteriumTreeNode(final CCriteriumTree ctree,final ICriterium criterium,final List<ICriteriumCreator> criteria){  m_criterium=criterium;  m_menuBuilder=new CNodeMenuBuilder(this,ctree,criteria);}  }
class C{  public static String defaultIndexName(QueryIndex idx){  StringBuilder idxName=new StringBuilder();  for (  Map.Entry<String,Boolean> field : idx.getFields().entrySet()) {    idxName.append(field.getKey());    idxName.append('_');    idxName.append(field.getValue() ? "asc_" : "desc_");  }  for (int i=0; i < idxName.length(); i++) {    char ch=idxName.charAt(i);    if (Character.isWhitespace(ch))     idxName.setCharAt(i,'_'); else     idxName.setCharAt(i,Character.toLowerCase(ch));  }  idxName.append("idx");  return idxName.toString();}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 20:{        yybegin(ATTR_LIST);        return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;      }case 44:    break;case 19:{    return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;  }case 45:break;case 41:{return XmlTokenType.XML_DOCTYPE_SYSTEM;}case 46:break;case 18:{return XmlTokenType.XML_EQ;}case 47:break;case 9:{return XmlTokenType.XML_TAG_CHARACTERS;}case 48:break;case 42:{yybegin(CDATA);return XmlTokenType.XML_CDATA_START;}case 49:break;case 5:{yybegin(ATTR_LIST);pushState(TAG);return XmlTokenType.XML_NAME;}case 50:break;case 25:{yybegin(END_TAG);return XmlTokenType.XML_END_TAG_START;}case 51:break;case 34:{if (myConditionalCommentsSupport) {yybegin(C_COMMENT_END);return XmlTokenType.XML_CONDITIONAL_COMMENT_END_START;} else return XmlTokenType.XML_COMMENT_CHARACTERS;}case 52:break;case 30:{return elTokenType;}case 53:break;case 10:{return XmlTokenType.XML_NAME;}case 54:break;case 40:{return XmlTokenType.XML_DOCTYPE_PUBLIC;}case 55:break;case 39:{yybegin(COMMENT);return XmlTokenType.XML_COMMENT_START;}case 56:break;case 36:{return javaEmbeddedTokenType;}case 57:break;case 32:{yybegin(ATTR_LIST);pushState(PROCESSING_INSTRUCTION);return XmlTokenType.XML_NAME;}case 58:break;case 2:{return XmlTokenType.XML_REAL_WHITE_SPACE;}case 59:break;case 1:{return XmlTokenType.XML_DATA_CHARACTERS;}case 60:break;case 23:{yybegin(COMMENT);return XmlTokenType.XML_CONDITIONAL_COMMENT_END;}case 61:break;case 12:{return XmlTokenType.XML_BAD_CHARACTER;}case 62:break;case 7:{yybegin(YYINITIAL);return XmlTokenType.XML_TAG_END;}case 63:break;case 29:{yybegin(COMMENT);return XmlTokenType.XML_CONDITIONAL_COMMENT_START_END;}case 64:break;case 33:{yybegin(YYINITIAL);return XmlTokenType.XML_COMMENT_END;}case 65:break;case 4:{yybegin(TAG);return XmlTokenType.XML_START_TAG_START;}case 66:break;case 26:{yybegin(YYINITIAL);return XmlTokenType.XML_EMPTY_ELEMENT_END;}case 67:break;case 24:{yybegin(PROCESSING_INSTRUCTION);return XmlTokenType.XML_PI_START;}case 68:break;case 8:{yybegin(PI_ANY);return XmlTokenType.XML_NAME;}case 69:break;case 13:{if (myConditionalCommentsSupport) {yybegin(C_COMMENT_START);return XmlTokenType.XML_CONDITIONAL_COMMENT_START;} else return XmlTokenType.XML_COMMENT_CHARACTERS;}case 70:break;case 14:{yybegin(ATTR);return XmlTokenType.XML_NAME;}case 71:break;case 15:{yybegin(ATTR_LIST);yypushback(yylength());}case 72:break;case 21:{yybegin(YYINITIAL);return XmlTokenType.XML_DOCTYPE_END;}case 73:break;case 38:{return XmlTokenType.XML_CHAR_ENTITY_REF;}case 74:break;case 6:{return XmlTokenType.XML_WHITE_SPACE;}case 75:break;case 28:{return XmlElementType.XML_MARKUP_DECL;}case 76:break;case 31:{return XmlTokenType.XML_ENTITY_REF_TOKEN;}case 77:break;case 16:{yybegin(ATTR_VALUE_DQ);return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;}case 78:break;case 17:{yybegin(ATTR_VALUE_SQ);return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;}case 79:break;case 22:{yybegin(COMMENT);return XmlTokenType.XML_COMMENT_CHARACTERS;}case 80:break;case 37:{yybegin(YYINITIAL);return XmlTokenType.XML_CDATA_END;}case 81:break;case 3:{if (yystate() == YYINITIAL) {return XmlTokenType.XML_BAD_CHARACTER;} else yybegin(popState());yypushback(yylength());}case 82:break;case 35:{return elTokenType2;}case 83:break;case 27:{yybegin(YYINITIAL);return XmlTokenType.XML_PI_END;}case 84:break;case 43:{yybegin(DOCTYPE);return XmlTokenType.XML_DOCTYPE_START;}case 85:break;case 11:{return XmlTokenType.XML_COMMENT_CHARACTERS;}case 86:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  private static void writeWorkspaceVersion(){  if (WORKSPACE_CHECK_REFERENCE_BUNDLE_VERSION == null) {    return;  }  final Location instanceLoc=Platform.getInstanceLocation();  if (instanceLoc == null || instanceLoc.isReadOnly()) {    return;  }  final File versionFile=getVersionFile(instanceLoc.getURL(),true);  if (versionFile == null) {    return;  }  OutputStream output=null;  try {    output=new FileOutputStream(versionFile);    final Properties props=new Properties();    props.setProperty(WORKSPACE_CHECK_REFERENCE_BUNDLE_NAME,WORKSPACE_CHECK_REFERENCE_BUNDLE_VERSION.toString());    props.setProperty(WORKSPACE_CHECK_REFERENCE_BUNDLE_NAME_LEGACY,WORKSPACE_CHECK_LEGACY_VERSION_INCREMENTED);    props.store(output,null);  } catch (  final IOException e) {    IDEWorkbenchPlugin.log("Could not write version file",StatusUtil.newStatus(IStatus.ERROR,e.getMessage(),e));  } finally {    try {      if (output != null) {        output.close();      }    } catch (    final IOException e) {    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void stateNoData(){  Log.d(TAG,"Santa is offline.");  updateNavigation();  scheduleUIUpdate();  final long time=SantaPreferences.getCurrentTime();  AbstractLaunch launchSanta=mCardAdapter.getLauncher(CardAdapter.SANTA);  if (time < OFFLINE_SANTA_DEPARTURE) {    launchSanta.setState(AbstractLaunch.STATE_LOCKED);    startCountdown(OFFLINE_SANTA_DEPARTURE);  } else   if (time >= OFFLINE_SANTA_DEPARTURE && time < OFFLINE_SANTA_FINALARRIVAL) {    stopCountdown();    enableTrackerMode(false);    launchSanta.setState(AbstractLaunch.STATE_DISABLED);  } else {    stopCountdown();    enableTrackerMode(false);    launchSanta.setState(AbstractLaunch.STATE_FINISHED);  }}  }
class C{  public boolean isCopyEnabled(){  if (text == null || text.isDisposed()) {    return false;  }  return text.getSelectionCount() > 0;}  }
class C{  public static String exportConfiguration(RulesProfile activeProfile){  Ruleset tree=buildRulesetFromActiveProfile(activeProfile.getActiveRulesByRepository(DelphiPmdConstants.REPOSITORY_KEY));  return DelphiRulesUtils.buildXmlFromRuleset(tree);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.358 -0500",hash_original_method="354B8979A292DF58D8ACD150BF598C2B",hash_generated_method="6345B801E86CF78FF3EC60753CECB078") void unlink(Node<E> p,Node<E> trail){}  }
class C{  @Override public boolean othersUpdatesAreVisible(int type){  debugCodeCall("othersUpdatesAreVisible",type);  return false;}  }
class C{  public Element addElementToRegistry(Element element,boolean filter){  if (element == null)   return (this);  setFilterState(filter);  addElementToRegistry(Integer.toString(element.hashCode()),element);  return (this);}  }
class C{  public T caseActionRef(ActionRef object){  return null;}  }
class C{  public boolean startWork(){  if (!m_state.isValidAction(StateEngine.ACTION_Start)) {    log.warning("State=" + getWFState() + " - cannot start");    return false;  }  int AD_WF_Node_ID=getWorkflow().getAD_WF_Node_ID();  log.fine("AD_WF_Node_ID=" + AD_WF_Node_ID);  setWFState(WFSTATE_Running);  try {    MWFActivity activity=new MWFActivity(this,AD_WF_Node_ID);    activity.run();  } catch (  Throwable e) {    log.log(Level.SEVERE,"AD_WF_Node_ID=" + AD_WF_Node_ID,e);    setTextMsg(e.toString());    addTextMsg(e);    setWFState(StateEngine.STATE_Terminated);    return false;  }  return true;}  }
class C{  public void addMethod(CtMethod m) throws CannotCompileException {  checkModify();}  }
class C{  public static void openShareTextIntent(Context context,String stringTitle,String stringContent,String shareDialogTitle){  try {    context.startActivity(Intent.createChooser(getShareTextIntent(stringTitle,stringContent),shareDialogTitle));  } catch (  Exception e) {    logThis(TAG,"openShareTextIntent Exception",e);  }}  }
class C{  private MWFActivity resetDisplay(int selIndex){  fAnswerText.setVisible(false);  fAnswerList.setVisible(false);  fAnswerButton.setVisible(false);  fAnswerButton.setImage("/images/mWindow.png");  fTextMsg.setReadonly(!(selIndex >= 0));  bZoom.setEnabled(selIndex >= 0);  bOK.setEnabled(selIndex >= 0);  fForward.setValue(null);  fForward.setReadWrite(selIndex >= 0);  statusBar.setStatusDB(String.valueOf(selIndex + 1) + "/" + m_activities.length);  m_activity=null;  m_column=null;  if (m_activities.length > 0) {    if (selIndex >= 0 && selIndex < m_activities.length)     m_activity=m_activities[selIndex];  }  if (m_activity == null) {    fNode.setText("");    fDescription.setText("");    fHelp.setText("");    fHistory.setContent(HISTORY_DIV_START_TAG + "&nbsp;</div>");    statusBar.setStatusDB("0/0");    statusBar.setStatusLine(Msg.getMsg(Env.getCtx(),"WFNoActivities"));  }  return m_activity;}  }
class C{  public PlacesAutocompleteTextView(@NonNull final Context context,@NonNull final String googleApiKey,@NonNull final String historyFileName){  super(context);  init(context,null,R.attr.pacv_placesAutoCompleteTextViewStyle,R.style.PACV_Widget_PlacesAutoCompleteTextView,googleApiKey,historyFileName);}  }
class C{  public String self(TypeDeclaration decl){  if (decl instanceof Constructor) {    decl=(TypeDeclaration)decl.getContainer();  }  String name=JsUtils.escapeStringLiteral(decl.getName());  if (decl.isShared() || decl.isToplevel()) {    name+=nestingSuffix(decl,true);  } else {    name="$" + Long.toString(getUID(decl),36);  }  return String.format("%c%s$",Character.toLowerCase(name.charAt(0)),name.substring(1));}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.583 -0500",hash_original_method="E488733BAF7BF3463DC8581AFFE97D88",hash_generated_method="AAD3A6B5BCB22726BABE1F817C39C043") public TransformerConfigurationException(Throwable e){  super(e);}  }
class C{  @Override public void clear(){  modCount++;  LongEntry<VALUE> tab[]=table;  for (int i=0; i < tab.length; i++)   tab[i]=null;  size=0;}  }
class C{  public JIPEngine(){  if (defaultEngine == null) {    defaultEngine=this;    s_globalDB=new GlobalDB(this);  }  m_bTrace=false;  m_prologTable=new Hashtable<Integer,AsyncWAMManager>(10);  m_builtInFactory=new BuiltInFactory(this);  m_globalDB=s_globalDB.newInstance(this);  m_eventNotifier=new EventNotifier(this);  m_envVarTbl=new Hashtable<String,Object>(10);  m_opManager=new OperatorManager();  m_termParser=new JIPTermParser(m_opManager,this,Charset.defaultCharset().toString());  m_eventNotifier.setEnabled(true);  m_strSearchPath="LOC://";  try {    File file=new File(".");    setSearchPath(file.getCanonicalPath());  } catch (  SecurityException ex) {    m_strSearchPath=null;  }catch (  IOException ex) {    m_strSearchPath=null;  }  setUserOutputStream(System.out);  setUserInputStream(System.in);  setEncoding(Charset.defaultCharset().name());  setEnvVariable("char_conversion","off");  setEnvVariable("double_quotes","codes");  setEnvVariable("back_quotes","atom");  setEnvVariable("unknown","warning");  setEnvVariable("syntax_error","error");  setEnvVariable("os_error","error");  setEnvVariable("debug",JIPDebugger.debug ? "on" : "off");  setEnvVariable("update_semantics","logical");  setEnvVariable("enable_clause_check","false");  try {    consultFile("INTERNAL://com/ugos/jiprolog/resources/x.pl");  } catch (  JIPSyntaxErrorException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  setEnvVariable("enable_clause_check","true");}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  private static void write(Collection<String> src,File out) throws IOException {  try (Writer writer=new BufferedWriter(new FileWriter(out))){    for (    String line : src)     writer.write(line + '\n');  } }  }
class C{  private void validateProviderAllowedAuthnTypes(int requestedAuthnType,String requestedProvider,TenantInformation tenantInfo) throws IDMLoginException {  boolean authenticationAllowed=false;  Collection<IIdentityStoreData> idsStores=tenantInfo.getIdsStores();  AuthnPolicy tenantAuthnPolicy=tenantInfo.getAuthnPolicy();  IIdentityStoreData identitySource=null;  for (  IIdentityStoreData identityStore : idsStores) {    if (identityStore.getName().equalsIgnoreCase(requestedProvider)) {      identitySource=identityStore;      if (identitySource != null) {        IIdentityStoreDataEx extendedData=identitySource.getExtendedIdentityStoreData();        if (extendedData.getAuthnTypes() != null) {          int[] providerAuthnTypes=extendedData.getAuthnTypes();          if (ArrayUtils.contains(providerAuthnTypes,requestedAuthnType)) {            authenticationAllowed=true;          }          if (!authenticationAllowed) {            String errMessage=String.format("Authentication type : '%s' is not allowed for requested identity provider : '%s'",requestedAuthnType,requestedProvider);            throw new IDMLoginException(errMessage);          }        }      }      break;    }  }}  }
class C{  @Override public double conf(double totalExampleWeight,double totalPositiveWeight,Hypothesis hypo,double delta){  double g=hypo.getCoveredWeight() / totalExampleWeight;  double p=hypo.getPositiveWeight() / hypo.getCoveredWeight();  double sg=variance(g,totalExampleWeight);  double sp=variance(p,hypo.getCoveredWeight());  double inverseNormal=inverseNormal(1 - delta / 4);  return inverseNormal * (sg + sp + inverseNormal * sg * sp);}  }
class C{  public void revokeExistingPolicy(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  if (applicationManager.isPackageInstalled(Constants.SERVICE_PACKAGE_NAME)) {switch (operation.getCode()) {case Constants.Operation.CAMERA:      revokeCameraPolicy(operation);    break;case Constants.Operation.INSTALL_APPLICATION:  revokeInstallAppPolicy(operation);break;case Constants.Operation.ENCRYPT_STORAGE:revokeEncryptPolicy(operation);break;case Constants.Operation.PASSCODE_POLICY:revokePasswordPolicy();break;case Constants.Operation.WIFI:revokeWifiPolicy(operation);break;case Constants.Operation.DISALLOW_ADJUST_VOLUME:case Constants.Operation.DISALLOW_CONFIG_BLUETOOTH:case Constants.Operation.DISALLOW_CONFIG_CELL_BROADCASTS:case Constants.Operation.DISALLOW_CONFIG_CREDENTIALS:case Constants.Operation.DISALLOW_CONFIG_MOBILE_NETWORKS:case Constants.Operation.DISALLOW_CONFIG_TETHERING:case Constants.Operation.DISALLOW_CONFIG_VPN:case Constants.Operation.DISALLOW_CONFIG_WIFI:case Constants.Operation.DISALLOW_APPS_CONTROL:case Constants.Operation.DISALLOW_CREATE_WINDOWS:case Constants.Operation.DISALLOW_CROSS_PROFILE_COPY_PASTE:case Constants.Operation.DISALLOW_DEBUGGING_FEATURES:;case Constants.Operation.DISALLOW_FACTORY_RESET:case Constants.Operation.DISALLOW_ADD_USER:case Constants.Operation.DISALLOW_INSTALL_APPS:case Constants.Operation.DISALLOW_INSTALL_UNKNOWN_SOURCES:case Constants.Operation.DISALLOW_MODIFY_ACCOUNTS:case Constants.Operation.DISALLOW_MOUNT_PHYSICAL_MEDIA:case Constants.Operation.DISALLOW_NETWORK_RESET:case Constants.Operation.DISALLOW_OUTGOING_BEAM:case Constants.Operation.DISALLOW_OUTGOING_CALLS:case Constants.Operation.DISALLOW_REMOVE_USER:case Constants.Operation.DISALLOW_SAFE_BOOT:case Constants.Operation.DISALLOW_SHARE_LOCATION:case Constants.Operation.DISALLOW_SMS:case Constants.Operation.DISALLOW_UNINSTALL_APPS:case Constants.Operation.DISALLOW_UNMUTE_MICROPHONE:case Constants.Operation.DISALLOW_USB_FILE_TRANSFER:case Constants.Operation.ALLOW_PARENT_PROFILE_APP_LINKING:case Constants.Operation.ENSURE_VERIFY_APPS:case Constants.Operation.AUTO_TIME:case Constants.Operation.ENABLE_ADMIN:case Constants.Operation.SET_SCREEN_CAPTURE_DISABLED:case Constants.Operation.SET_STATUS_BAR_DISABLED:CommonUtils.callSystemApp(context,operation.getCode(),Boolean.toString(false),null);break;case Constants.Operation.APP_RESTRICTION:revokeAppRestrictionPolicy(operation);break;default :throw new AndroidAgentException("Invalid operation code received");}} else {switch (operation.getCode()) {case Constants.Operation.CAMERA:revokeCameraPolicy(operation);break;case Constants.Operation.INSTALL_APPLICATION:revokeInstallAppPolicy(operation);break;case Constants.Operation.ENCRYPT_STORAGE:revokeEncryptPolicy(operation);break;case Constants.Operation.PASSCODE_POLICY:revokePasswordPolicy();break;case Constants.Operation.WIFI:revokeWifiPolicy(operation);break;case Constants.Operation.APP_RESTRICTION:revokeAppRestrictionPolicy(operation);break;}}}  }
class C{  private void createPlatformSpecificFullCopyImpls(CoordinatorClient coordinator,TenantsService tenantsService){  Scheduler blockScheduler=_placementManager.getStorageScheduler("block");  Scheduler vplexScheduler=_placementManager.getStorageScheduler("vplex");  Scheduler rpScheduler=_placementManager.getStorageScheduler("rp");  _fullCopyImpls.put(FullCopyImpl.dflt.name(),new DefaultBlockFullCopyApiImpl(_dbClient,coordinator,blockScheduler,this));  _fullCopyImpls.put(FullCopyImpl.vmax.name(),new VMAXBlockFullCopyApiImpl(_dbClient,coordinator,blockScheduler,this));  _fullCopyImpls.put(FullCopyImpl.vmax3.name(),new VMAX3BlockFullCopyApiImpl(_dbClient,coordinator,blockScheduler,this));  _fullCopyImpls.put(FullCopyImpl.vnx.name(),new VNXBlockFullCopyApiImpl(_dbClient,coordinator,blockScheduler,this));  _fullCopyImpls.put(FullCopyImpl.vnxe.name(),new VNXEBlockFullCopyApiImpl(_dbClient,coordinator,blockScheduler,this));  _fullCopyImpls.put(FullCopyImpl.hds.name(),new HDSBlockFullCopyApiImpl(_dbClient,coordinator,blockScheduler,this));  _fullCopyImpls.put(FullCopyImpl.openstack.name(),new OpenstackBlockFullCopyApiImpl(_dbClient,coordinator,blockScheduler,this));  _fullCopyImpls.put(FullCopyImpl.scaleio.name(),new ScaleIOBlockFullCopyApiImpl(_dbClient,coordinator,blockScheduler,this));  _fullCopyImpls.put(FullCopyImpl.xtremio.name(),new XtremIOBlockFullCopyApiImpl(_dbClient,coordinator,blockScheduler,this));  _fullCopyImpls.put(FullCopyImpl.xiv.name(),new XIVBlockFullCopyApiImpl(_dbClient,coordinator,blockScheduler,this));  _fullCopyImpls.put(FullCopyImpl.ceph.name(),new CephBlockFullCopyApiImpl(_dbClient,coordinator,blockScheduler,this));  _fullCopyImpls.put(FullCopyImpl.vplex.name(),new VPlexBlockFullCopyApiImpl(_dbClient,coordinator,vplexScheduler,tenantsService,this));  _fullCopyImpls.put(FullCopyImpl.rp.name(),new RPBlockFullCopyApiImpl(_dbClient,coordinator,rpScheduler,this));}  }
class C{  @LargeTest public void testMediaImageItemEffect() throws Exception {  final String imageItemFileName=INPUT_FILE_PATH + "IMG_1600x1200.jpg";  final int imageItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaImageItem mediaImageItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaImageItem1",imageItemFileName,5000,imageItemRenderingMode);  mVideoEditor.addMediaItem(mediaImageItem1);  assertTrue("Effect List Size",(mediaImageItem1.getAllEffects().size() == 0) ? true : false);  assertNull("Effect Item by ID",mediaImageItem1.getEffect("xyx"));  final EffectColor effectColor=mVideoEditorHelper.createEffectItem(mediaImageItem1,"Effecton MVi1",0,4000,EffectColor.TYPE_GRADIENT,EffectColor.GRAY);  mediaImageItem1.addEffect(effectColor);  assertTrue("Effect List Size",(mediaImageItem1.getAllEffects().size() == 1) ? true : false);  assertEquals("Effect Item by Valid ID",effectColor,mediaImageItem1.getEffect(effectColor.getId()));  assertNull("Effect Item by Invalid ID",mediaImageItem1.getEffect("xyz"));  assertNull("Effect Item by Invalid ID",mediaImageItem1.removeEffect("effectId"));  assertTrue("Effect List Size",(mediaImageItem1.getAllEffects().size() == 1) ? true : false);  assertEquals("Effect Removed",effectColor,mediaImageItem1.removeEffect(effectColor.getId()));  assertTrue("Effect List Size",(mediaImageItem1.getAllEffects().size() == 0) ? true : false);  assertNull("Effect Item by ID",mediaImageItem1.getEffect("effectId"));}  }
class C{  public final void removeForbidden(String var1,String var2){  if (var1.equals(var2)) {    throw new IllegalArgumentException();  }  if (isForbiddenByTiers(var1,var2)) {    throw new IllegalStateException("The edge " + var1 + "-->"+ var2+ " is forbidden by tiers. Please adjust tiers first.");  }  explicitlyForbiddenEdges.remove(new KnowledgeEdge(var1,var2));  generateForbiddenEdgeList();}  }
class C{  public boolean isExpressCheckoutEnabled(){  return expressCheckoutEnabled;}  }
class C{  public static boolean isPrimitive(Type type){  return PRIMITIVE_TO_WRAPPER_TYPE.containsKey(type);}  }
class C{  AttributeMetadataRegistry(Schema schema,AttributeMetadataRegistryBuilder builder){  this.schema=schema;  this.transforms=getTransforms(builder.getCreators());}  }
class C{  private Network buildNetwork(){  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  Network nw=NetworkUtils.createNetwork();  NetworkFactory nf=sc.getNetwork().getFactory();  Node a=nf.createNode(Id.createNodeId("A"),new Coord(0.0,0.0));  nw.addNode(a);  Node b=nf.createNode(Id.createNodeId("B"),new Coord(100.0,100.0));  nw.addNode(b);  Node c=nf.createNode(Id.createNodeId("C"),new Coord(300.0,0.0));  nw.addNode(c);  Node d=nf.createNode(Id.createNodeId("D"),new Coord(100.0,-100.0));  nw.addNode(d);  double lengthShort=Math.sqrt(Math.pow(100.0,2.0) + Math.pow(100.0,2.0));  double lengthLong=Math.sqrt(Math.pow(200.0,2.0) + Math.pow(100.0,2.0));  Link ab=nf.createLink(Id.createLinkId("AB"),a,b);  ab.setLength(lengthShort);  nw.addLink(ab);  Link bc=nf.createLink(Id.createLinkId("BC"),b,c);  bc.setLength(lengthLong);  nw.addLink(bc);  Link cd=nf.createLink(Id.createLinkId("CD"),c,d);  cd.setLength(lengthLong);  nw.addLink(cd);  Link da=nf.createLink(Id.createLinkId("DA"),d,a);  da.setLength(lengthShort);  nw.addLink(da);  return nw;}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,StextPackage.GUARD__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected void parsem() throws ParseException, IOException {  current=reader.read();  skipSpaces();  float x=parseFloat();  skipCommaSpaces();  float y=parseFloat();  pathHandler.movetoRel(x,y);  boolean expectNumber=skipCommaSpaces2();  _parsel(expectNumber);}  }
class C{  SegmentReader(SegmentCommitInfo si,SegmentReader sr,Bits liveDocs,int numDocs,boolean isNRT) throws IOException {  if (numDocs > si.info.maxDoc()) {    throw new IllegalArgumentException("numDocs=" + numDocs + " but maxDoc="+ si.info.maxDoc());  }  if (liveDocs != null && liveDocs.length() != si.info.maxDoc()) {    throw new IllegalArgumentException("maxDoc=" + si.info.maxDoc() + " but liveDocs.size()="+ liveDocs.length());  }  this.si=si;  this.liveDocs=liveDocs;  this.isNRT=isNRT;  this.numDocs=numDocs;  this.core=sr.core;  core.incRef();  this.segDocValues=sr.segDocValues;  boolean success=false;  try {    fieldInfos=initFieldInfos();    docValuesProducer=initDocValuesProducer();    success=true;  }  finally {    if (!success) {      doClose();    }  }}  }
class C{  protected final int transitiveAnyBoundaryFusion(int mode){  QueueSubscription<R> qs=this.qs;  if (qs != null) {    if ((mode & Fuseable.THREAD_BARRIER) == 0) {      int m=qs.requestFusion(mode);      if (m != Fuseable.NONE) {        fusionMode=m;      }      return m;    }  }  return Fuseable.NONE;}  }
class C{  private void updateTargetLunIdInExportMask(Map<URI,Integer> volumeToTargetLunMap,ExportMask exportMask){  for (  URI volumeURI : volumeToTargetLunMap.keySet()) {    Integer targetLunId=volumeToTargetLunMap.get(volumeURI);    exportMask.getVolumes().put(volumeURI.toString(),targetLunId.toString());  }}  }
class C{  public static <F extends BaseFeed>F readFeed(ParseSource source,Class<F> feedClass,ExtensionProfile extProfile) throws IOException, ParseException, ServiceException {  return ParseUtil.readFeed(source,feedClass,extProfile,null);}  }
class C{  public void removeDefaultUser(String id) throws Exception {  removeEntry("uid",id);}  }
class C{  public PreferenceStore(){  defaultProperties=new Properties();  properties=new Properties(defaultProperties);}  }
class C{  public GenArray2D(Class<? extends Layout> clazz){  this(clazz,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:53.676 -0500",hash_original_method="EECFB5B736A479D5AC464F374A1DB439",hash_generated_method="B7F78D9D6D58D321E732A0E021694A65") public void removeTag(){  if (parameters != null)   parameters.delete(ParameterNames.TAG);}  }
class C{  private void sendNotification(Bundle extras){  String title=extras.getString(EndPoints.NOTIFICATION_TITLE,getString(R.string.app_name));  String message=extras.getString(EndPoints.NOTIFICATION_MESSAGE);  if (BuildConfig.DEBUG)   Log.d(TAG,"Title: " + title);  if (BuildConfig.DEBUG)   Log.d(TAG,"Message: " + message);  NotificationCompat.Builder mBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.ic_notification_small).setLargeIcon(BitmapFactory.decodeResource(getResources(),R.drawable.ic_notification_big)).setContentTitle(title).setStyle(new NotificationCompat.BigTextStyle().bigText(message)).setContentText(message).setAutoCancel(true).setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));  String imageUrl=extras.getString(EndPoints.NOTIFICATION_IMAGE_URL);  if (imageUrl != null && !imageUrl.isEmpty()) {    Bitmap bitmap=getBitmapFromURL(imageUrl);    if (bitmap != null) {      if (BuildConfig.DEBUG)       Log.d(TAG,"Set big icon");      mBuilder.setStyle(new NotificationCompat.BigPictureStyle().bigPicture(bitmap).setBigContentTitle(title).setSummaryText(message));    } else {      if (BuildConfig.DEBUG)       Log.e(TAG,"Cannot download image");    }  }  String link=extras.getString(EndPoints.NOTIFICATION_LINK);  if (BuildConfig.DEBUG)   Log.d(TAG,"Gcm linkType: " + link);  Intent notificationIntent;  if (link != null && link.contains("http")) {    Uri url;    try {      url=Uri.parse(link);    } catch (    Exception e) {      if (BuildConfig.DEBUG)       Log.e(TAG,"Parsing notification url failed.");      return;    }    notificationIntent=new Intent(Intent.ACTION_VIEW,url);  } else {    notificationIntent=new Intent(this,SplashActivity.class);    notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);    notificationIntent.putExtra(EndPoints.NOTIFICATION_LINK,link);    notificationIntent.putExtra(EndPoints.NOTIFICATION_TITLE,title);  }  String utmSource="utm_source=API";  String utmMedium="utm_medium=notification";  String utmCampaign="utm_campaign=" + title;  String utm=utmSource + "&" + utmMedium+ "&"+ utmCampaign;  notificationIntent.putExtra(EndPoints.NOTIFICATION_UTM,utm);  PendingIntent contentIntent=PendingIntent.getActivity(this,0,notificationIntent,PendingIntent.FLAG_UPDATE_CURRENT);  mBuilder.setContentIntent(contentIntent);  ((NotificationManager)this.getSystemService(Context.NOTIFICATION_SERVICE)).notify(NOTIFICATION_ID,mBuilder.build());}  }
class C{  private QueryTask buildTombstoneQuery(final State current){  QueryTask.Query kindClause=new QueryTask.Query().setTermPropertyName(ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(Utils.buildKind(TombstoneService.State.class));  QueryTask.NumericRange range=QueryTask.NumericRange.createLessThanRange(System.currentTimeMillis() - current.tombstoneExpirationAgeMillis);  range.precisionStep=Integer.MAX_VALUE;  QueryTask.Query ageClause=new QueryTask.Query().setTermPropertyName(TombstoneService.State.FIELD_NAME_TOMBSTONE_TIME).setNumericRange(range);  QueryTask.QuerySpecification spec=new QueryTask.QuerySpecification();  spec.options=EnumSet.of(QueryTask.QuerySpecification.QueryOption.EXPAND_CONTENT);  spec.query.addBooleanClause(kindClause).addBooleanClause(ageClause);  QueryTask task=QueryTask.create(spec).setDirect(true);  return task;}  }
class C{  public void testAddServletRunAsRole() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  WebXmlUtils.addServletRunAsRoleName(webXml,"s1","r1");  String roleName=WebXmlUtils.getServletRunAsRoleName(webXml,"s1");  assertEquals("r1",roleName);}  }
class C{  public String delQ(String q,String... args){  return TestHarness.deleteByQuery(q,args);}  }
class C{  public ClientRequestHelper(CoordinatorClient coordinatorClient){  this(coordinatorClient,DEFAULT_READ_TIMEOUT,DEFAULT_CONNECT_TIMEOUT);}  }
class C{  public static void unzipFile(File file){  logger.info("will Extracting file: " + file.getName());  Enumeration<? extends ZipEntry> entries;  ZipFile zipFile;  try {    zipFile=new ZipFile(file);    entries=zipFile.entries();    while (entries.hasMoreElements()) {      ZipEntry entry=(ZipEntry)entries.nextElement();      if (entry.isDirectory()) {        (new File(entry.getName())).mkdir();        continue;      }      logger.info("Extracting file: " + entry.getName() + " to "+ file.getParent()+ File.separator+ entry.getName());      copyInputStream(zipFile.getInputStream(entry),new BufferedOutputStream(new FileOutputStream(file.getParent() + File.separator + entry.getName())));    }    zipFile.close();  } catch (  IOException e) {    logger.error("can not unzip " + file.getName() + " : "+ e.getMessage(),e);    throw new ImporterException(e);  }}  }
class C{  public ODGApplicationModel(){  setViewClass(ODGView.class);}  }
class C{  public ClassPool registerClassLoader(ClassLoader ucl){synchronized (registeredCLs) {    if (registeredCLs.containsKey(ucl)) {      return (ClassPool)registeredCLs.get(ucl);    }    ScopedClassPool pool=createScopedClassPool(ucl,classpool);    registeredCLs.put(ucl,pool);    return pool;  }}  }
class C{  public static void undoLastSelection(final CSelectionHistory history){  if (history.canUndo()) {    history.undo();  }}  }
class C{  @Override public void GETSTATIC(String owner,String fieldName,String desc){  Class<?> claz=env.ensurePrepared(owner);  Field concrete_field=resolveField(claz,fieldName);  Class<?> declaringClass=concrete_field.getDeclaringClass();  if (declaringClass.isInterface()) {    logger.debug("Do we have to prepare the static fields of an interface?");    env.ensurePrepared(declaringClass);  }  boolean isAccessible=concrete_field.isAccessible();  if (!isAccessible) {    concrete_field.setAccessible(true);  }  Type type=Type.getType(desc);  try {    if (type.equals(Type.INT_TYPE)) {      int value=concrete_field.getInt(null);      IntegerValue intExpr=(IntegerValue)env.heap.getStaticField(owner,fieldName,(long)value);      env.topFrame().operandStack.pushBv32(intExpr);    } else     if (type.equals(Type.CHAR_TYPE)) {      char value=concrete_field.getChar(null);      IntegerValue intExpr=(IntegerValue)env.heap.getStaticField(owner,fieldName,(long)value);      env.topFrame().operandStack.pushBv32(intExpr);    } else     if (type.equals(Type.SHORT_TYPE)) {      short value=concrete_field.getShort(null);      IntegerValue intExpr=(IntegerValue)env.heap.getStaticField(owner,fieldName,(long)value);      env.topFrame().operandStack.pushBv32(intExpr);    } else     if (type.equals(Type.BOOLEAN_TYPE)) {      boolean booleanValue=concrete_field.getBoolean(null);      int value=booleanValue ? 1 : 0;      IntegerValue intExpr=(IntegerValue)env.heap.getStaticField(owner,fieldName,(long)value);      env.topFrame().operandStack.pushBv32(intExpr);    } else     if (type.equals(Type.BYTE_TYPE)) {      byte value=concrete_field.getByte(null);      IntegerValue intExpr=(IntegerValue)env.heap.getStaticField(owner,fieldName,(long)value);      env.topFrame().operandStack.pushBv32(intExpr);    } else     if (type.equals(Type.LONG_TYPE)) {      long value=concrete_field.getLong(null);      IntegerValue intExpr=(IntegerValue)env.heap.getStaticField(owner,fieldName,value);      env.topFrame().operandStack.pushBv64(intExpr);    } else     if (type.equals(Type.FLOAT_TYPE)) {      float value=concrete_field.getFloat(null);      RealValue fp32=(RealValue)env.heap.getStaticField(owner,fieldName,(double)value);      env.topFrame().operandStack.pushFp32(fp32);    } else     if (type.equals(Type.DOUBLE_TYPE)) {      double value=concrete_field.getDouble(null);      RealValue fp64=(RealValue)env.heap.getStaticField(owner,fieldName,value);      env.topFrame().operandStack.pushFp64(fp64);    } else {      Object value=concrete_field.get(null);      ReferenceExpression ref=env.heap.getReference(value);      env.topFrame().operandStack.pushRef(ref);    }    if (!isAccessible) {      concrete_field.setAccessible(false);    }  } catch (  IllegalArgumentException e) {    throw new RuntimeException(e);  }catch (  IllegalAccessException e) {    throw new RuntimeException(e);  }}  }
class C{  public TrackerOperation createTrackerOperation(String source,String description){  Preconditions.checkArgument(!Strings.isNullOrEmpty(source),SOURCE_IS_EMPTY_MSG);  Preconditions.checkNotNull(!Strings.isNullOrEmpty(description),"Description is null or empty");  TrackerOperationImpl po=new TrackerOperationImpl(source.toUpperCase(),description,this);  if (saveTrackerOperation(source,po)) {    return po;  }  return null;}  }
class C{  @Override public void close(){  return;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  if (transformer.isRecursiveAttrSet(this)) {    throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_XSLATTRSET_USED_ITSELF,new Object[]{m_qname.getLocalPart()}));  }  transformer.pushElemAttributeSet(this);  super.execute(transformer);  ElemAttribute attr=(ElemAttribute)getFirstChildElem();  while (null != attr) {    attr.execute(transformer);    attr=(ElemAttribute)attr.getNextSiblingElem();  }  transformer.popElemAttributeSet();}  }
class C{  public boolean applyOptions() throws IOException {  final String username=PROXY_USERNAME_FIELD.getText();  final String password=PROXY_PASSWORD_FIELD.getText();  final boolean authenticate=CHECK_BOX.isSelected();  ConnectionSettings.PROXY_USERNAME.setValue(username);  ConnectionSettings.PROXY_PASS.setValue(password);  ConnectionSettings.PROXY_AUTHENTICATE.setValue(authenticate);  SettingsPack settings=new SettingsPack();  if (authenticate) {    int connectionMethod=ConnectionSettings.CONNECTION_METHOD.getValue();    settings.setInteger(settings_pack.int_types.proxy_type.swigValue(),settings_pack.proxy_type_t.http_pw.swigValue());    if (connectionMethod == ConnectionSettings.C_HTTP_PROXY) {      settings.setInteger(settings_pack.int_types.proxy_type.swigValue(),settings_pack.proxy_type_t.http_pw.swigValue());    } else     if (connectionMethod == ConnectionSettings.C_SOCKS5_PROXY) {      settings.setInteger(settings_pack.int_types.proxy_type.swigValue(),settings_pack.proxy_type_t.socks5_pw.swigValue());    }  }  settings.setString(settings_pack.string_types.proxy_username.swigValue(),username);  settings.setString(settings_pack.string_types.proxy_password.swigValue(),password);  BTEngine.getInstance().applySettings(settings);  return false;}  }
class C{  public static byte[] tauAdicNaf(byte mu,ZTauElement lambda){  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger norm=norm(mu,lambda);  int log2Norm=norm.bitLength();  int maxLength=log2Norm > 30 ? log2Norm + 4 : 34;  byte[] u=new byte[maxLength];  int i=0;  int length=0;  BigInteger r0=lambda.u;  BigInteger r1=lambda.v;  while (!((r0.equals(ECConstants.ZERO)) && (r1.equals(ECConstants.ZERO)))) {    if (r0.testBit(0)) {      u[i]=(byte)ECConstants.TWO.subtract((r0.subtract(r1.shiftLeft(1))).mod(ECConstants.FOUR)).intValue();      if (u[i] == 1) {        r0=r0.clearBit(0);      } else {        r0=r0.add(ECConstants.ONE);      }      length=i;    } else {      u[i]=0;    }    BigInteger t=r0;    BigInteger s=r0.shiftRight(1);    if (mu == 1) {      r0=r1.add(s);    } else {      r0=r1.subtract(s);    }    r1=t.shiftRight(1).negate();    i++;  }  length++;  byte[] tnaf=new byte[length];  System.arraycopy(u,0,tnaf,0,length);  return tnaf;}  }
class C{  public void startPlotThread(){  if (m_plotThread == null) {    m_plotThread=new PlotThread();    m_plotThread.setPriority(Thread.MIN_PRIORITY);    m_plotThread.start();  }}  }
class C{  public Builder withOffsetGap(int offsetGap){  if (offsetGap < 0) {    throw new IllegalArgumentException("offsetGap must be >= 0");  }  this.offsetGap.set(offsetGap);  return this;}  }
class C{  public DuplicateEventException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private long generateRandomDelay(){  long delay;  int numFailedAttempts=getNumFailedAttempts();  if (numFailedAttempts == 0) {    delay=Math.min(mBaseMilliseconds,mMaxMilliseconds);  } else {    int backoffCoefficient=computeConstrainedBackoffCoefficient(numFailedAttempts);    delay=Math.min(backoffCoefficient * mBaseMilliseconds,mMaxMilliseconds);  }  SharedPreferences preferences=getSharedPreferences();  preferences.edit().putLong(PREFERENCE_DELAY,delay).apply();  return delay;}  }
class C{  public XNull(){  super();}  }
class C{  public static int dragViewTo(InstrumentationTestCase test,View v,int gravity,int toX,int toY){  int[] xy=new int[2];  getStartLocation(v,gravity,xy);  final int fromX=xy[0];  final int fromY=xy[1];  int deltaX=fromX - toX;  int deltaY=fromY - toY;  int distance=(int)Math.sqrt(deltaX * deltaX + deltaY * deltaY);  drag(test,fromX,toX,fromY,toY,distance);  return distance;}  }
class C{  public void validateMapGenParameters(){  if (hilliness < 0) {    hilliness=0;  }  if (hilliness > 99) {    hilliness=99;  }  if (cliffs < 0) {    cliffs=0;  }  if (cliffs > 100) {    cliffs=100;  }  if (range < 0) {    range=0;  }  if (minWaterSpots < 0) {    minWaterSpots=0;  }  if (maxWaterSpots < minWaterSpots) {    maxWaterSpots=minWaterSpots;  }  if (minWaterSize < 0) {    minWaterSize=0;  }  if (maxWaterSize < minWaterSize) {    maxWaterSize=minWaterSize;  }  if (probDeep < 0) {    probDeep=0;  }  if (probDeep > 100) {    probDeep=100;  }  if (minForestSpots < 0) {    minForestSpots=0;  }  if (maxForestSpots < minForestSpots) {    maxForestSpots=minForestSpots;  }  if (minForestSize < 0) {    minForestSize=0;  }  if (maxForestSize < minForestSize) {    maxForestSize=minForestSize;  }  if (probHeavy < 0) {    probHeavy=0;  }  if (probHeavy > 100) {    probHeavy=100;  }  if (minRoughSpots < 0) {    minRoughSpots=0;  }  if (maxRoughSpots < minRoughSpots) {    maxRoughSpots=minRoughSpots;  }  if (minRoughSize < 0) {    minRoughSize=0;  }  if (maxRoughSize < minRoughSize) {    maxRoughSize=minRoughSize;  }  if (minSandSpots < 0) {    minSandSpots=0;  }  if (maxSandSpots < minSandSpots) {    maxSandSpots=minSandSpots;  }  if (minSandSize < 0) {    minSandSize=0;  }  if (maxSandSize < minSandSize) {    maxSandSize=minSandSize;  }  if (minPlantedFieldSpots < 0) {    minPlantedFieldSpots=0;  }  if (maxPlantedFieldSpots < minPlantedFieldSpots) {    maxPlantedFieldSpots=minPlantedFieldSpots;  }  if (minPlantedFieldSize < 0) {    minPlantedFieldSize=0;  }  if (maxPlantedFieldSize < minPlantedFieldSize) {    maxPlantedFieldSize=minPlantedFieldSize;  }  if (minSwampSpots < 0) {    minSwampSpots=0;  }  if (maxSwampSpots < minSwampSpots) {    maxSwampSpots=minSwampSpots;  }  if (minSwampSize < 0) {    minSwampSize=0;  }  if (maxSwampSize < minSwampSize) {    maxSwampSize=minSwampSize;  }  if (minPavementSpots < 0) {    minPavementSpots=0;  }  if (maxPavementSpots < minPavementSpots) {    maxPavementSpots=minPavementSpots;  }  if (minPavementSize < 0) {    minPavementSize=0;  }  if (maxPavementSize < minPavementSize) {    maxPavementSize=minPavementSize;  }  if (minRubbleSpots < 0) {    minRubbleSpots=0;  }  if (maxRubbleSpots < minRubbleSpots) {    maxRubbleSpots=minRubbleSpots;  }  if (minRubbleSize < 0) {    minRubbleSize=0;  }  if (maxRubbleSize < minRubbleSize) {    maxRubbleSize=minRubbleSize;  }  if (minFortifiedSpots < 0) {    minFortifiedSpots=0;  }  if (maxFortifiedSpots < minFortifiedSpots) {    maxFortifiedSpots=minFortifiedSpots;  }  if (minFortifiedSize < 0) {    minFortifiedSize=0;  }  if (maxFortifiedSize < minFortifiedSize) {    maxFortifiedSize=minFortifiedSize;  }  if (minIceSpots < 0) {    minIceSpots=0;  }  if (maxIceSpots < minIceSpots) {    maxIceSpots=minIceSpots;  }  if (minIceSize < 0) {    minIceSize=0;  }  if (maxIceSize < minIceSize) {    maxIceSize=minIceSize;  }  if (probRoad < 0) {    probRoad=0;  }  if (probRoad > 100) {    probRoad=100;  }  if (probInvert < 0) {    probInvert=0;  }  if (probInvert > 100) {    probInvert=100;  }  if (probRiver < 0) {    probRiver=0;  }  if (probRiver > 100) {    probRiver=100;  }  if (probCrater < 0) {    probCrater=0;  }  if (probCrater > 100) {    probCrater=100;  }  if (minRadius < 0) {    minRadius=0;  }  if (maxRadius < minRadius) {    maxRadius=minRadius;  }  if (minCraters < 0) {    minCraters=0;  }  if (maxCraters < minCraters) {    maxCraters=minCraters;  }  if (algorithmToUse < 0) {    algorithmToUse=0;  }  if (algorithmToUse > 2) {    algorithmToUse=2;  }}  }
class C{  public boolean hasEnoughSpaceOnSdCard(long updateSize){  RootTools.log("Checking SDcard size and that it is mounted as RW");  String status=Environment.getExternalStorageState();  if (!status.equals(Environment.MEDIA_MOUNTED)) {    return false;  }  File path=Environment.getExternalStorageDirectory();  StatFs stat=new StatFs(path.getPath());  long blockSize=stat.getBlockSize();  long availableBlocks=stat.getAvailableBlocks();  return (updateSize < availableBlocks * blockSize);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.330 -0500",hash_original_method="8DDD4F1B3EBA46E6AD9B7725CB8B68AA",hash_generated_method="0046DE65F5CD007858ACDC75E81673B2") public static boolean isISODigit(char c){  return c >= '0' && c <= '9';}  }
class C{  public boolean isSsh(){  return this.ssh;}  }
class C{  public boolean saveError(String AD_Message,String message,boolean issueError){  ValueNamePair lastError=new ValueNamePair(AD_Message,message);  Env.getCtx().put(LAST_ERROR,lastError);  if (issueError)   severe(AD_Message + " - " + message);  return true;}  }
class C{  public NodeIterator nodeset() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NODELIST,new Object[]{getTypeString()});  return null;}  }
class C{  protected void assertNoPaymentEntries(final String orderNum){  List<CustomerOrderPayment> rezList=customerOrderPaymentService.findBy(orderNum,null,(String)null,(String)null);  assertEquals(0,rezList.size());}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:44.435 -0500",hash_original_method="2175D562A2B588CC53D616403013683C",hash_generated_method="6E9FD4316F59D7CE7196381057C46B1A") public File(String path){  this.path=path;  this.name="";}  }
class C{  public int score(){  return score;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (proposition == null) {    throw new NullPointerException();  }}  }
class C{  public StandardCategoryItemLabelGenerator(String labelFormat,DateFormat formatter){  super(labelFormat,formatter);}  }
class C{  public Referenceable createDBInstance(Database hiveDB) throws HiveException {  return createOrUpdateDBInstance(hiveDB,null);}  }
class C{  private int hash(Object obj){  return System.identityHashCode(obj) & 0x7FFFFFFF;}  }
class C{  public Matrix4d shadow(double lightX,double lightY,double lightZ,double lightW,Matrix4dc planeTransform){  return shadow(lightX,lightY,lightZ,lightW,planeTransform,this);}  }
class C{  public static void reverse(int[] a){  int temp;  for (int i=0, j=a.length - 1; i < j; i++, j--) {    temp=a[i];    a[i]=a[j];    a[j]=temp;  }}  }
class C{  public String encode(String pString) throws EncoderException {  if (pString == null) {    return null;  }  return encode(pString,getDefaultCharset());}  }
class C{  public SeaGlassArrowButton(int direction){  super();  super.setFocusable(false);  setDirection(direction);  setDefaultCapable(false);}  }
class C{  protected static boolean commandLineTalkback(String[] args){  try {    final File logFile;    if (args.length > 0 && !"".equals(args[0])) {      logFile=new File(args[0]);    } else {      logFile=null;    }    final String filename=(logFile != null && logFile.exists()) ? args[0] : "";    final boolean crashReport=!"".equals(filename);    final int argStart=crashReport ? 1 : 0;    final String subject=crashReport ? "JVM Crash" : "Talkback";    final String commandLine=args.length > argStart ? Arrays.toString(Arrays.copyOfRange(args,argStart,args.length)) : null;    final String logContents;    if (crashReport) {      logContents=getEnvironment() + FileUtils.fileToString(logFile);    } else {      logContents=getEnvironment();    }    return postTalkback(subject,sModuleName,commandLine,null,logContents,filename,crashReport);  } catch (  final IOException e) {    System.err.println("An error occurred sending the talkback.");    return false;  }}  }
class C{  public boolean adjustValue(K key,long amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  @Override public boolean reset(){  return this.reset(true);}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  synchronized public static void register(final Class<? extends Event> event,final EventBusListener listener){  getListForEvent(event).add(listener);}  }
class C{  public void dump(){  String hdr="----- " + getName() + " -----";  System.out.println(hdr);  if (m_data == null) {    System.out.println("----- no data -----");    return;  }  for (int i=0; i < m_data.length; i++) {    char data=(char)m_data[i];    System.out.print(data);  }  System.out.println();  System.out.println(hdr);  int ii=m_data.length - 1;  int nullCount=0;  while (m_data[ii--] == 0)   nullCount++;  System.out.println("----- Length=" + m_data.length + ", EndNulls="+ nullCount+ ", RealLength="+ (m_data.length - nullCount));}  }
class C{  public final synchronized int evictionCount(){  return evictionCount;}  }
class C{  public DateEnd(ICalDate dateEnd){  super(dateEnd);}  }
class C{  public GlyphButton(Component parent,Type type){  this.type=type;  setBorder(null);  setContentAreaFilled(false);  setMinimumSize(new Dimension(5,5));  setPreferredSize(new Dimension(16,16));  setMaximumSize(new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE));}  }
class C{  public boolean isOuterHole(){  if (!isHole)   return false;  return !hasShell();}  }
class C{  private static void writeMarshalArgument(IndentingWriter p,String streamName,Type type,String name) throws IOException {  int typeCode=type.getTypeCode();switch (typeCode) {case TC_BOOLEAN:    p.p(streamName + ".writeBoolean(" + name+ ")");  break;case TC_BYTE:p.p(streamName + ".writeByte(" + name+ ")");break;case TC_CHAR:p.p(streamName + ".writeChar(" + name+ ")");break;case TC_SHORT:p.p(streamName + ".writeShort(" + name+ ")");break;case TC_INT:p.p(streamName + ".writeInt(" + name+ ")");break;case TC_LONG:p.p(streamName + ".writeLong(" + name+ ")");break;case TC_FLOAT:p.p(streamName + ".writeFloat(" + name+ ")");break;case TC_DOUBLE:p.p(streamName + ".writeDouble(" + name+ ")");break;case TC_ARRAY:case TC_CLASS:p.p(streamName + ".writeObject(" + name+ ")");break;default :throw new Error("unexpected type code: " + typeCode);}}  }
class C{  public PreAuthTokenSourceTrustAuthenticationProvider(){  authorizedSourceIps=null;}  }
class C{  private void runScan(){  spiderDone=0;  Date start=new Date();  log.info("Starting spidering scan on " + site + " at "+ start);  startSpider();  this.isAlive=true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(systemId01.class,args);}  }
class C{  public DoubleLinkedList<IMove> validMoves(){  DoubleLinkedList<IMove> list=new DoubleLinkedList<IMove>();  int br=-1, bc=-1;  outer:   for (int r=0; r <= MaxR; r++) {    for (int c=0; c <= MaxC; c++) {      if (board[r][c] == EmptyMark) {        br=r;        bc=c;        break outer;      }    }  }  int deltas[][]={{+1,0},{0,-1},{-1,0},{0,1}};  for (int i=0; i < deltas.length; i++) {    int dr=deltas[i][0];    int dc=deltas[i][1];    if (0 <= br + dr && br + dr <= MaxR) {      if (0 <= bc + dc && bc + dc <= MaxC) {        list.insert(new SlideMove(board[br + dr][bc + dc],br + dr,bc + dc,br,bc));      }    }  }  return list;}  }
class C{  private void doScrollX(int delta){  if (delta != 0) {    if (mSmoothScrollingEnabled) {      smoothScrollBy(delta,0);    } else {      scrollBy(delta,0);    }  }}  }
class C{  void jbInit() throws Exception {  lFrom.setValue(Msg.getMsg(Env.getCtx(),"From") + ":");  lTo.setValue(Msg.getMsg(Env.getCtx(),"To") + ":");  lCc.setValue(Msg.getMsg(Env.getCtx(),"Cc") + ":");  lSubject.setValue(Msg.getMsg(Env.getCtx(),"Subject") + ":");  lAttachment.setValue(Msg.getMsg(Env.getCtx(),"Attachment") + ":");  fFrom.setReadonly(true);  statusBar.setStatusDB(null);  Grid grid=new Grid();  grid.setWidth("480px");  grid.setStyle("margin:0; padding:0; position: absolute; align: center; valign: center;");  grid.makeNoStrip();  grid.setOddRowSclass("even");  Rows rows=new Rows();  grid.appendChild(rows);  Row row=new Row();  rows.appendChild(row);  Div div=new Div();  div.setAlign("right");  div.appendChild(lFrom);  row.appendChild(div);  row.appendChild(fFrom);  fFrom.setWidth("100%");  row=new Row();  rows.appendChild(row);  div=new Div();  div.setAlign("right");  div.appendChild(lTo);  row.appendChild(div);  row.appendChild(fUser.getComponent());  fUser.getComponent().setWidth("100%");  row=new Row();  rows.appendChild(row);  row.appendChild(new Label(""));  row.appendChild(fTo);  fTo.setWidth("100%");  row=new Row();  rows.appendChild(row);  div=new Div();  div.setAlign("right");  div.appendChild(lCc);  row.appendChild(div);  row.appendChild(fCcUser.getComponent());  fCcUser.getComponent().setWidth("100%");  row=new Row();  rows.appendChild(row);  row.appendChild(new Label(""));  row.appendChild(fCc);  fCc.setWidth("100%");  row=new Row();  rows.appendChild(row);  row.setSpans("2");  row.appendChild(new Separator());  row=new Row();  rows.appendChild(row);  div=new Div();  div.setAlign("right");  div.appendChild(lSubject);  row.appendChild(div);  row.appendChild(fSubject);  fSubject.setWidth("100%");  row=new Row();  rows.appendChild(row);  row.setSpans("2");  row.appendChild(new Separator());  row=new Row();  rows.appendChild(row);  div=new Div();  div.setAlign("right");  div.appendChild(lAttachment);  row.appendChild(div);  row.appendChild(fAttachment);  fAttachment.setWidth("100%");  row=new Row();  rows.appendChild(row);  row.setSpans("2");  row.appendChild(fMessage);  fMessage.setWidth("100%");  fMessage.setRows(10);  row=new Row();  rows.appendChild(row);  row.setSpans("2");  row.appendChild(confirmPanel);  confirmPanel.addActionListener(this);  Borderlayout layout=new Borderlayout();  layout.setWidth("490px");  layout.setHeight("470px");  layout.setStyle("background-color: white; position: absolute;");  Center center=new Center();  center.appendChild(grid);  layout.appendChild(center);  center.setStyle("background-color: white");  South south=new South();  south.appendChild(statusBar);  layout.appendChild(south);  south.setStyle("background-color: white");  this.appendChild(layout);}  }
class C{  @Inject public ClasspathPackageManager(ClassLoader classLoader){  this.classLoader=classLoader;}  }
class C{  @SuppressWarnings("unchecked") public final void testIsSatisfiedWhenNotAllConstraintsAreSatisfied(){  Constraint<Object> constraint1=new ConstraintImplementation(true);  Constraint<Object> constraint2=new ConstraintImplementation(false);  Constraint<Object>[] constraints=new Constraint[2];  constraints[0]=constraint1;  constraints[1]=constraint2;  DisjunctiveConstraint<Object> disjunctiveConstraint=new DisjunctiveConstraint<>(constraints);  assertTrue(disjunctiveConstraint.isSatisfied(new Object()));}  }
class C{  public Boolean isPoweredOnMonitorTypeChangeSupported(){  return poweredOnMonitorTypeChangeSupported;}  }
class C{  @Override protected boolean isHostOverUtilized(PowerContainerHost host){  addHistoryEntry(host,getUtilizationThreshold());  double totalRequestedMips=0;  for (  ContainerVm vm : host.getVmList()) {    totalRequestedMips+=vm.getCurrentRequestedTotalMips();  }  double utilization=totalRequestedMips / host.getTotalMips();  return utilization > getUtilizationThreshold();}  }
class C{  public void findAndInit(Object obj){  if (obj instanceof OMDrawingTool) {    Debug.message("graphicloader","LOSGraphicLoader: found OMDrawingTool");    setDrawingTool((OMDrawingTool)obj);  }}  }
class C{  public ExifTag buildTag(int tagId,Object val){  int ifdId=getTrueIfd(tagId);  return buildTag(tagId,ifdId,val);}  }
class C{  public void invalidate(){  close();  clearAttributes();}  }
class C{  private void determineGestureOrientation(MotionEvent e1,MotionEvent e2){  float deltaX=Math.abs(e2.getX() - e1.getX());  float deltaY=Math.abs(e2.getY() - e1.getY());  mGestureOrientation=deltaY * VERTICAL_DETERMINATION_BOOST > deltaX ? GestureOrientation.VERTICAL : GestureOrientation.HORIZONTAL;  mHasDeterminedGestureOrientation=true;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  protected void removeIconFor(JInternalFrame f){  JInternalFrame.JDesktopIcon di=f.getDesktopIcon();  Container c=di.getParent();  if (c != null) {    c.remove(di);    c.repaint(di.getX(),di.getY(),di.getWidth(),di.getHeight());  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.450 -0400",hash_original_method="0D7E6F981525F2AA16F60F5ED0631F0E",hash_generated_method="0EFF912A30B012B49096373770DFC277") @Override public boolean accept(File dir,String name){  for (  String wildcard : wildcards) {    if (FilenameUtils.wildcardMatch(name,wildcard,caseSensitivity)) {      return true;    }  }  return false;}  }
class C{  @Override public void filter(int kind,float param){  PImage temp=get();  temp.filter(kind,param);  set(0,0,temp);}  }
class C{  public IntrinsicMethod(String name,String className,String methodName,Class<?>[] signature){  this(name,getJavaMethod(className,methodName,signature),signature);}  }
class C{  public QueryFirstResponse QueryFirst(QueryFirstRequest req) throws ServiceFaultException, ServiceResultException {  return (QueryFirstResponse)channel.serviceRequest(req);}  }
class C{  private void runBidiSplitter(BidiSplitter splitter,LayoutContext c){  byte defaultDirection=BidiSplitter.LTR;  String para=builder.toString();  if (cssDirection == IdentValue.RTL) {    defaultDirection=BidiSplitter.RTL;  } else   if (cssDirection == IdentValue.AUTO) {    defaultDirection=splitter.getBaseDirection(para);  }  this.actualDirection=defaultDirection == BidiSplitter.NEUTRAL ? BidiSplitter.LTR : defaultDirection;  splitter.setParagraph(para,actualDirection);  copySplitPointsFromBidiSplitter(splitter);}  }
class C{  public ScrollingAWTTerminalTest(){  initComponents();  scrollingAwtTerminal=new ScrollingAWTTerminal(TerminalEmulatorDeviceConfiguration.getDefault().withLineBufferScrollbackSize(150),SwingTerminalFontConfiguration.getDefault(),TerminalEmulatorColorConfiguration.getDefault());  panelTerminalContainer.add(scrollingAwtTerminal,BorderLayout.CENTER);  pack();}  }
class C{  public static void groupReturnItemsByOrder(List<GenericValue> returnItems,Map<String,List<GenericValue>> returnItemsByOrderId,Map<String,BigDecimal> totalByOrder,Delegator delegator,String returnId,String returnTypeId){  for (  GenericValue returnItem : returnItems) {    String orderId=returnItem.getString("orderId");    if (orderId != null) {      if (returnItemsByOrderId != null) {        BigDecimal totalForOrder=null;        if (totalByOrder != null) {          totalForOrder=totalByOrder.get(orderId);        }        List<GenericValue> returnItemList=returnItemsByOrderId.get(orderId);        if (returnItemList == null) {          returnItemList=FastList.newInstance();        }        if (totalForOrder == null) {          totalForOrder=BigDecimal.ZERO;        }        returnItemList.add(returnItem);        returnItemsByOrderId.put(orderId,returnItemList);        if (totalByOrder != null) {          BigDecimal quantity=returnItem.getBigDecimal("returnQuantity");          BigDecimal amount=returnItem.getBigDecimal("returnPrice");          if (quantity == null) {            quantity=BigDecimal.ZERO;          }          if (amount == null) {            amount=BigDecimal.ZERO;          }          BigDecimal thisTotal=amount.multiply(quantity);          BigDecimal existingTotal=totalForOrder;          Map<String,Object> condition=UtilMisc.toMap("returnId",returnItem.get("returnId"),"returnItemSeqId",returnItem.get("returnItemSeqId"));          BigDecimal newTotal=existingTotal.add(thisTotal).add(getReturnAdjustmentTotal(delegator,condition));          totalByOrder.put(orderId,newTotal);        }      }    }  }  if ((totalByOrder != null) && (totalByOrder.keySet() != null)) {    for (    String orderId : totalByOrder.keySet()) {      Map<String,Object> condition=UtilMisc.<String,Object>toMap("returnId",returnId,"returnItemSeqId",org.ofbiz.common.DataModelConstants.SEQ_ID_NA,"returnTypeId",returnTypeId);      BigDecimal existingTotal=(totalByOrder.get(orderId)).add(getReturnAdjustmentTotal(delegator,condition));      totalByOrder.put(orderId,existingTotal);    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public java.util.Iterator<E> preorderIterator(){  return new PreorderIterator();}  }
class C{  @Override public ProcessingSummary processBytes(final byte[] in,final int off,final int len,final byte[] out,final int outOff) throws BadCiphertextException, AwsCryptoException {  final long totalBytesToParse=unparsedBytes_.length + (long)len;  if (totalBytesToParse > Integer.MAX_VALUE) {    throw new AwsCryptoException("Integer overflow of the total bytes to parse and decrypt occured.");  }  final byte[] bytesToParse=new byte[(int)totalBytesToParse];  System.arraycopy(unparsedBytes_,0,bytesToParse,0,unparsedBytes_.length);  System.arraycopy(in,off,bytesToParse,unparsedBytes_.length,len);  int actualOutLen=0;  int totalParsedBytes=0;  while (!complete_ && totalParsedBytes < bytesToParse.length) {    if (currentFrameHeaders_ == null) {      currentFrameHeaders_=new CipherFrameHeaders();      currentFrameHeaders_.setNonceLength(nonceLen_);      if (frameSize_ == 0) {        currentFrameHeaders_.includeFrameSize(true);      }    }    totalParsedBytes+=currentFrameHeaders_.deserialize(bytesToParse,totalParsedBytes);    if (currentFrameHeaders_.isComplete() == true) {      int protectedContentLen=-1;      if (currentFrameHeaders_.isFinalFrame()) {        protectedContentLen=currentFrameHeaders_.getFrameContentLength();      } else {        protectedContentLen=frameSize_;      }      protectedContentLen+=cryptoAlgo_.getTagLen();      if ((bytesToParse.length - totalParsedBytes) < protectedContentLen) {        break;      }      final byte[] bytesToDecrypt_=Arrays.copyOfRange(bytesToParse,totalParsedBytes,totalParsedBytes + protectedContentLen);      totalParsedBytes+=protectedContentLen;      if (frameNumber_ == Constants.MAX_FRAME_NUMBER) {        throw new BadCiphertextException("Frame number exceeds the maximum allowed value.");      }      final byte[] decryptedBytes=decryptContent(bytesToDecrypt_,0,bytesToDecrypt_.length);      System.arraycopy(decryptedBytes,0,out,(outOff + actualOutLen),decryptedBytes.length);      actualOutLen+=decryptedBytes.length;      frameNumber_++;      complete_=currentFrameHeaders_.isFinalFrame();      currentFrameHeaders_=null;    } else {      break;    }  }  if (!complete_) {    unparsedBytes_=Arrays.copyOfRange(bytesToParse,totalParsedBytes,bytesToParse.length);    return new ProcessingSummary(actualOutLen,len);  } else {    final ProcessingSummary result=new ProcessingSummary(actualOutLen,totalParsedBytes - unparsedBytes_.length);    unparsedBytes_=new byte[0];    return result;  }}  }
class C{  public void loadPropertyFile(String file,Properties target){  try {    SecuritySupport ss=SecuritySupport.getInstance();    InputStream is=ss.getResourceAsStream(ObjectFactory.findClassLoader(),file);    BufferedInputStream bis=new BufferedInputStream(is);    target.load(bis);    bis.close();  } catch (  Exception ex) {    throw new org.apache.xml.utils.WrappedRuntimeException(ex);  }}  }
class C{  public static Map<String,Object> traverseContent(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Map<String,Object> results=FastMap.newInstance();  Locale locale=(Locale)context.get("locale");  String contentId=(String)context.get("contentId");  String direction=(String)context.get("direction");  if (direction != null && direction.equalsIgnoreCase("From")) {    direction="From";  } else {    direction="To";  }  if (contentId == null) {    contentId="PUBLISH_ROOT";  }  GenericValue content=null;  try {    content=EntityQuery.use(delegator).from("Content").where("contentId",contentId).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Entity Error:" + e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentNoContentFound",UtilMisc.toMap("contentId",contentId),locale));  }  String fromDateStr=(String)context.get("fromDateStr");  String thruDateStr=(String)context.get("thruDateStr");  Timestamp fromDate=null;  if (UtilValidate.isNotEmpty(fromDateStr)) {    fromDate=UtilDateTime.toTimestamp(fromDateStr);  }  Timestamp thruDate=null;  if (UtilValidate.isNotEmpty(thruDateStr)) {    thruDate=UtilDateTime.toTimestamp(thruDateStr);  }  Map<String,Object> whenMap=FastMap.newInstance();  whenMap.put("followWhen",context.get("followWhen"));  whenMap.put("pickWhen",context.get("pickWhen"));  whenMap.put("returnBeforePickWhen",context.get("returnBeforePickWhen"));  whenMap.put("returnAfterPickWhen",context.get("returnAfterPickWhen"));  String startContentAssocTypeId=(String)context.get("contentAssocTypeId");  if (startContentAssocTypeId != null) {    startContentAssocTypeId="PUBLISH";  }  Map<String,Object> nodeMap=FastMap.newInstance();  List<GenericValue> pickList=FastList.newInstance();  ContentWorker.traverse(delegator,content,fromDate,thruDate,whenMap,0,nodeMap,startContentAssocTypeId,pickList,direction);  results.put("nodeMap",nodeMap);  results.put("pickList",pickList);  return results;}  }
class C{  protected void copyCurrentEntryToTempDir() throws IOException {  if (this.currentEntry == null)   return;  if (this.currentEntry.isDirectory()) {    this.moveToNextEntry();    return;  }  if (this.tempDir == null)   this.tempDir=WWIO.makeTempDir();  if (this.tempDir == null) {    String message=Logging.getMessage("generic.UnableToCreateTempDir",this.tempDir);    Logging.logger().warning(message);    return;  }  String tempFileName=this.tempDir + File.separator + this.currentEntry.getName();  WWIO.makeParentDirs(tempFileName);  File outFile=new File(tempFileName);  outFile.deleteOnExit();  WWIO.saveBuffer(WWIO.readStreamToBuffer(this.zipStream),outFile);  this.files.put(this.currentEntry.getName(),outFile);  this.moveToNextEntry();}  }
class C{  public final static QueryNode logicalAnd(QueryNode q1,QueryNode q2){  if (q1 == null)   return q2;  if (q2 == null)   return q1;  ANDOperation op=null;  if (q1 instanceof AndQueryNode && q2 instanceof AndQueryNode)   op=ANDOperation.BOTH; else   if (q1 instanceof AndQueryNode)   op=ANDOperation.Q1; else   if (q1 instanceof AndQueryNode)   op=ANDOperation.Q2; else   op=ANDOperation.NONE;  try {    QueryNode result=null;switch (op) {case NONE:      List<QueryNode> children=new ArrayList<>();    children.add(q1.cloneTree());  children.add(q2.cloneTree());result=new AndQueryNode(children);return result;case Q1:result=q1.cloneTree();result.add(q2.cloneTree());return result;case Q2:result=q2.cloneTree();result.add(q1.cloneTree());return result;case BOTH:result=q1.cloneTree();result.add(q2.cloneTree().getChildren());return result;}} catch (CloneNotSupportedException e) {throw new QueryNodeError(e);}return null;}  }
class C{  public static double[][] deleteRows(double[][] x,int... I){  double[][] array=new double[x.length - I.length][x[0].length];  int i2=0;  for (int i=0; i < x.length; i++) {    if (!into(i,I)) {      System.arraycopy(x[i],0,array[i2],0,x[i].length);      i2++;    }  }  return array;}  }
class C{  private void initializePSIObjects() throws NoSuchAlgorithmException, IllegalArgumentException {  log.debug("initializing PSIObject");  ArrayList<byte[]> friends=friendStore.getAllFriendsBytes();  try {    mClientPSI=new PrivateSetIntersection(friends);    mServerPSI=new PrivateSetIntersection(friends);  } catch (  NoSuchAlgorithmException e) {    setExchangeStatus(Status.ERROR);    setErrorMessage("No such algorithm when creating PrivateSetIntersection." + e);    throw e;  }}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public SymbolTableEntryInternal steFor_$makeClass(){  return getSymbolTableEntryInternal("$makeClass",true);}  }
class C{  public boolean bool(){  return (Double.isNaN(m_val) || (m_val == 0.0)) ? false : true;}  }
class C{  public void unlockAndClose() throws AdeUsageException {  try {    if (m_lock != null) {      m_lock.release();      m_lock=null;    }    if (m_raf != null) {      m_raf.close();      m_raf=null;    }  } catch (  IOException e) {    throw new AdeUsageException("Failed unlocking " + m_filename,e);  }}  }
class C{  public AxMessage(ParameterList params){  _parameters=params;  if (DEBUG)   _log.debug("Created AXMessage from parameter list:\n" + params);}  }
class C{  private static byte positionToByte(int position){  return (byte)(position % 0xff);}  }
class C{  public boolean isShownOrQueued(){  return snackbar.isShownOrQueued();}  }
class C{  public int openServer(){  boolean started=MasterServices.getInstance().startRegistry();  if (!started) {    logger.error("Not possible to start RMI registry");    return -1;  }  try {    MasterServices.getInstance().registerServices();  } catch (  RemoteException e) {    logger.error("Failed to start RMI services",e);    return -1;  }  return MasterServices.getInstance().getRegistryPort();}  }
class C{  public void flap(float speed,float degree,boolean invert,float offset,float weight,float flap,float flapAmount){  this.rotateAngleZ+=this.calculateRotation(speed,degree,invert,offset,weight,flap,flapAmount);}  }
class C{  public boolean isScreenPermitted(String windowAlias){  return isPermitted(PermissionType.SCREEN,windowAlias);}  }
class C{  public JsonWriter(ODataUri oDataUri,EntityDataModel entityDataModel){  this.odataUri=checkNotNull(oDataUri);  this.entityDataModel=checkNotNull(entityDataModel);  expandedProperties.addAll(asJavaList(getSimpleExpandPropertyNames(oDataUri)));}  }
class C{  public ExpressionAST eval(ExpressionAST transformed){  if (transformed instanceof Operator) {    Operator op=(Operator)transformed;    return eval_operator(op);  } else   if (transformed instanceof ExpressionLeaf) {    return eval_leaf((ExpressionLeaf)transformed);  } else {    return transformed;  }}  }
class C{  @Override public boolean isEmpty(){  return elementCount == 0;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.ENUM_ATTRIBUTE_SOURCE__ATTRIBUTE:    setAttribute((ModelAttribute)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private void pad(){  final int newOffset=((off + 3) / 4) * 4;  while (off < newOffset) {    off++;  }}  }
class C{  public Builder withIndex(long index){  request.index=Assert.argNot(index,index < 0,"index must be positive");  return this;}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public Long hincrBy(final byte[] key,final byte[] field,final long value){  checkIsInMulti();  client.hincrBy(key,field,value);  return client.getIntegerReply();}  }
class C{  @Transactional public void updateCheque_DD_Card_Deposit_Receipt(Map<String,Object> instrumentMap){  contraService.updateCheque_DD_Card_Deposit_Receipt(instrumentMap);}  }
class C{  public V put(K key,V value){synchronized (this) {    Map<K,V> newMap=new HashMap<K,V>(internalMap);    V val=newMap.put(key,value);    internalMap=newMap;    return val;  }}  }
class C{  public static int countGsmSeptets(char c){  try {    return countGsmSeptets(c,false);  } catch (  EncodeException ex) {    return 0;  }}  }
class C{  public Person(ElementKey<?,?> key,String name,URI uri,String email){  super(key);  setName(name);  setUri(uri);  setEmail(email);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord && success)   insert_Accounting("C_Tax_Acct","C_AcctSchema_Default",null);  return success;}  }
class C{  private static <T extends AbstractBlockBase<T>>T addPathToLinearScanOrder(T block,List<T> order,PriorityQueue<T> worklist,BitSet visitedBlocks){  block.setLinearScanNumber(order.size());  order.add(block);  T mostLikelySuccessor=findAndMarkMostLikelySuccessor(block,visitedBlocks);  enqueueSuccessors(block,worklist,visitedBlocks);  if (mostLikelySuccessor != null) {    if (!mostLikelySuccessor.isLoopHeader() && mostLikelySuccessor.getPredecessorCount() > 1) {      double unscheduledSum=0.0;      for (      T pred : mostLikelySuccessor.getPredecessors()) {        if (pred.getLinearScanNumber() == -1) {          unscheduledSum+=pred.probability();        }      }      if (unscheduledSum > block.probability() / PENALTY_VERSUS_UNSCHEDULED) {        visitedBlocks.clear(mostLikelySuccessor.getId());        return null;      }    }    return mostLikelySuccessor;  }  return null;}  }
class C{  public boolean hasGain(){  return hasExtension(Gain.class);}  }
class C{  private int calculate(int t1,int t2,String operator){  int res=0;  if (operator.equalsIgnoreCase("+"))   res=t1 + t2; else   if (operator.equalsIgnoreCase("-"))   res=t1 - t2; else   if (operator.equalsIgnoreCase("*"))   res=t1 * t2; else   if (operator.equalsIgnoreCase("/"))   res=t1 / t2;  return res;}  }
class C{  @Entrypoint public static void yieldpointFromOsrOpt(){  Address fp=Magic.getFramePointer();  RVMThread.getCurrentThread().yieldToOSRRequested=true;  RVMThread.getCurrentThread().takeYieldpoint=1;  RVMThread.yieldpoint(RVMThread.OSROPT,fp);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case BasePackage.DOMAIN_ELEMENT__DOMAIN_ID:    return DOMAIN_ID_EDEFAULT == null ? domainID != null : !DOMAIN_ID_EDEFAULT.equals(domainID);}return super.eIsSet(featureID);}  }
class C{  private void cardCheck(IFitsHeader key) throws FitsException {  cardCheck(key.key());}  }
class C{  public static JPopupButton createDrawingColorButton(DrawingEditor editor,AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches,int columnCount,String labelKey,ResourceBundleUtil labels,@Nullable Map<AttributeKey,Object> defaultAttributes,Shape colorShape){  return createDrawingColorButton(editor,attributeKey,swatches,columnCount,labelKey,labels,defaultAttributes,colorShape,new LinkedList<Disposable>());}  }
class C{  public static Date toDate(String string){  if (string == null)   return null; else   try {    return getDate(string);  } catch (  Throwable t) {    return null;  }}  }
class C{  public static PaymentDataException convertToApi(org.oscm.internal.types.exception.PaymentDataException oldEx){  return convertExceptionToApi(oldEx,PaymentDataException.class);}  }
class C{  public GF2Polynomial(int length){  int l=length;  if (l < 1) {    l=1;  }  blocks=((l - 1) >> 5) + 1;  value=new int[blocks];  len=l;}  }
class C{  ITypeBinding resolveType(AnonymousClassDeclaration type){  return null;}  }
class C{  public void paint(Graphics g){  getAppropriateLayer().paint(g);  fireStatusUpdate(LayerStatusEvent.FINISH_WORKING);}  }
class C{  public void Gen_populate(android.database.Cursor cursor,int[] columnIndices){  if (columnIndices[GEN_ID__ID] >= 0 && !cursor.isNull(columnIndices[GEN_ID__ID])) {    gen__Id=cursor.getLong(columnIndices[GEN_ID__ID]);  }  if (columnIndices[GEN_ID_NICKNAME] >= 0 && !cursor.isNull(columnIndices[GEN_ID_NICKNAME])) {    gen_nickname=cursor.getString(columnIndices[GEN_ID_NICKNAME]);  }  if (columnIndices[GEN_ID_ADDRESS] >= 0 && !cursor.isNull(columnIndices[GEN_ID_ADDRESS])) {    gen_address=cursor.getString(columnIndices[GEN_ID_ADDRESS]);  }  if (columnIndices[GEN_ID_PORT] >= 0 && !cursor.isNull(columnIndices[GEN_ID_PORT])) {    gen_port=(int)cursor.getInt(columnIndices[GEN_ID_PORT]);  }  if (columnIndices[GEN_ID_PASSWORD] >= 0 && !cursor.isNull(columnIndices[GEN_ID_PASSWORD])) {    gen_password=cursor.getString(columnIndices[GEN_ID_PASSWORD]);  }  if (columnIndices[GEN_ID_COLORMODEL] >= 0 && !cursor.isNull(columnIndices[GEN_ID_COLORMODEL])) {    gen_colorModel=cursor.getString(columnIndices[GEN_ID_COLORMODEL]);  }  if (columnIndices[GEN_ID_FORCEFULL] >= 0 && !cursor.isNull(columnIndices[GEN_ID_FORCEFULL])) {    gen_forceFull=cursor.getLong(columnIndices[GEN_ID_FORCEFULL]);  }  if (columnIndices[GEN_ID_REPEATERID] >= 0 && !cursor.isNull(columnIndices[GEN_ID_REPEATERID])) {    gen_repeaterId=cursor.getString(columnIndices[GEN_ID_REPEATERID]);  }  if (columnIndices[GEN_ID_INPUTMODE] >= 0 && !cursor.isNull(columnIndices[GEN_ID_INPUTMODE])) {    gen_inputMode=cursor.getString(columnIndices[GEN_ID_INPUTMODE]);  }  if (columnIndices[GEN_ID_SCALEMODE] >= 0 && !cursor.isNull(columnIndices[GEN_ID_SCALEMODE])) {    gen_SCALEMODE=cursor.getString(columnIndices[GEN_ID_SCALEMODE]);  }  if (columnIndices[GEN_ID_USELOCALCURSOR] >= 0 && !cursor.isNull(columnIndices[GEN_ID_USELOCALCURSOR])) {    gen_useLocalCursor=(cursor.getInt(columnIndices[GEN_ID_USELOCALCURSOR]) != 0);  }  if (columnIndices[GEN_ID_KEEPPASSWORD] >= 0 && !cursor.isNull(columnIndices[GEN_ID_KEEPPASSWORD])) {    gen_keepPassword=(cursor.getInt(columnIndices[GEN_ID_KEEPPASSWORD]) != 0);  }  if (columnIndices[GEN_ID_FOLLOWMOUSE] >= 0 && !cursor.isNull(columnIndices[GEN_ID_FOLLOWMOUSE])) {    gen_followMouse=(cursor.getInt(columnIndices[GEN_ID_FOLLOWMOUSE]) != 0);  }  if (columnIndices[GEN_ID_USEREPEATER] >= 0 && !cursor.isNull(columnIndices[GEN_ID_USEREPEATER])) {    gen_useRepeater=(cursor.getInt(columnIndices[GEN_ID_USEREPEATER]) != 0);  }  if (columnIndices[GEN_ID_METALISTID] >= 0 && !cursor.isNull(columnIndices[GEN_ID_METALISTID])) {    gen_metaListId=cursor.getLong(columnIndices[GEN_ID_METALISTID]);  }  if (columnIndices[GEN_ID_LAST_META_KEY_ID] >= 0 && !cursor.isNull(columnIndices[GEN_ID_LAST_META_KEY_ID])) {    gen_LAST_META_KEY_ID=cursor.getLong(columnIndices[GEN_ID_LAST_META_KEY_ID]);  }  if (columnIndices[GEN_ID_FOLLOWPAN] >= 0 && !cursor.isNull(columnIndices[GEN_ID_FOLLOWPAN])) {    gen_followPan=(cursor.getInt(columnIndices[GEN_ID_FOLLOWPAN]) != 0);  }  if (columnIndices[GEN_ID_USERNAME] >= 0 && !cursor.isNull(columnIndices[GEN_ID_USERNAME])) {    gen_userName=cursor.getString(columnIndices[GEN_ID_USERNAME]);  }  if (columnIndices[GEN_ID_SECURECONNECTIONTYPE] >= 0 && !cursor.isNull(columnIndices[GEN_ID_SECURECONNECTIONTYPE])) {    gen_secureConnectionType=cursor.getString(columnIndices[GEN_ID_SECURECONNECTIONTYPE]);  }  if (columnIndices[GEN_ID_SHOWZOOMBUTTONS] >= 0 && !cursor.isNull(columnIndices[GEN_ID_SHOWZOOMBUTTONS])) {    gen_showZoomButtons=(cursor.getInt(columnIndices[GEN_ID_SHOWZOOMBUTTONS]) != 0);  }  if (columnIndices[GEN_ID_DOUBLE_TAP_ACTION] >= 0 && !cursor.isNull(columnIndices[GEN_ID_DOUBLE_TAP_ACTION])) {    gen_DOUBLE_TAP_ACTION=cursor.getString(columnIndices[GEN_ID_DOUBLE_TAP_ACTION]);  }}  }
class C{  @Override public void close() throws IOException {  if (this.client != null)   this.client.close();  indexCache.clear();  indexCache=null;  updatePolicy=null;  insertPolicy=null;  infoPolicy=null;  moduleCache.clear();  moduleCache=null;}  }
class C{  public void zoom(Point2D zoomPt,double zoomScale){  double originOffsetX=zoomPt.getX() - originInModel.getX();  double originOffsetY=zoomPt.getY() - originInModel.getY();  double scalePrev=getScale();  setScale(zoomScale);  double actualZoomFactor=getScale() / scalePrev;  double zoomOriginX=zoomPt.getX() - originOffsetX / actualZoomFactor;  double zoomOriginY=zoomPt.getY() - originOffsetY / actualZoomFactor;  setOrigin(zoomOriginX,zoomOriginY);}  }
class C{  protected void closing(Object info) throws JavaModelException {}  }
class C{  protected void checkParams(XCreateWindowParams params){  if (params == null) {    throw new IllegalArgumentException("Window creation parameters are null");  }  params.putIfNull(PARENT_WINDOW,Long.valueOf(XToolkit.getDefaultRootWindow()));  params.putIfNull(BOUNDS,new Rectangle(DEF_LOCATION,DEF_LOCATION,MIN_SIZE,MIN_SIZE));  params.putIfNull(DEPTH,Integer.valueOf((int)XConstants.CopyFromParent));  params.putIfNull(VISUAL,Long.valueOf(XConstants.CopyFromParent));  params.putIfNull(VISUAL_CLASS,Integer.valueOf((int)XConstants.InputOnly));  params.putIfNull(VALUE_MASK,Long.valueOf(XConstants.CWEventMask));  Rectangle bounds=(Rectangle)params.get(BOUNDS);  bounds.width=Math.max(MIN_SIZE,bounds.width);  bounds.height=Math.max(MIN_SIZE,bounds.height);  Long eventMaskObj=(Long)params.get(EVENT_MASK);  long eventMask=eventMaskObj != null ? eventMaskObj.longValue() : 0;  eventMask|=XConstants.PropertyChangeMask | XConstants.OwnerGrabButtonMask;  params.put(EVENT_MASK,Long.valueOf(eventMask));}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void importKey(ECKey key){  lock.lock();  try {    checkKeyEncryptionStateMatches(key);    if (hasKey(key))     return;    importKeyLocked(key);    queueOnKeysAdded(ImmutableList.of(key));  }  finally {    lock.unlock();  }}  }
class C{  public void readFromNode(Node d){  super.readFromNode(d);  assert (d.getNodeName().equals("ModelDesign"));  for (  Node n : DOMUtils.getChildrenByName(d,"DataType")) {    DataType e=new DataType();    e.readFromNode(n);    dataTypes.add(e);  }}  }
class C{  public static String stripControlCharacters(String rawValue){  if (rawValue == null) {    return null;  }  String value=replaceEntities(rawValue);  boolean hasControlChars=false;  for (int i=value.length() - 1; i >= 0; i--) {    if (Character.isISOControl(value.charAt(i))) {      hasControlChars=true;      break;    }  }  if (!hasControlChars) {    return value;  }  StringBuilder buf=new StringBuilder(value.length());  int i=0;  for (; i < value.length(); i++) {    if (!Character.isISOControl(value.charAt(i))) {      break;    }  }  boolean suppressingControlChars=false;  for (; i < value.length(); i++) {    if (Character.isISOControl(value.charAt(i))) {      suppressingControlChars=true;      continue;    } else {      if (suppressingControlChars) {        suppressingControlChars=false;        buf.append(' ');      }      buf.append(value.charAt(i));    }  }  return buf.toString();}  }
class C{  public QueryBuilder<T,ID> having(String having){  this.having=having;  return this;}  }
class C{  public void testSingleMultiLineStringManyPointRoundTrip() throws IOException, SAXException, ParserConfigurationException {  LineStringGenerator pgc=new LineStringGenerator();  pgc.setGeometryFactory(geometryFactory);  pgc.setNumberPoints(1000);  pgc.setGenerationAlgorithm(LineStringGenerator.HORZ);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  MultiLineString pt=(MultiLineString)pg.create();  checkRoundTrip(pt);}  }
class C{  public void push(final boolean value){  push(value ? 1 : 0);}  }
class C{  public MySqlIfStatement parseIf(){  accept(Token.IF);  MySqlIfStatement stmt=new MySqlIfStatement();  stmt.setCondition(this.exprParser.expr());  accept(Token.THEN);  this.parseProcedureStatementList(stmt.getStatements());  while (lexer.token() == Token.ELSE) {    lexer.nextToken();    if (lexer.token() == Token.IF) {      lexer.nextToken();      MySqlElseIfStatement elseIf=new MySqlElseIfStatement();      elseIf.setCondition(this.exprParser.expr());      accept(Token.THEN);      this.parseProcedureStatementList(elseIf.getStatements());      stmt.getElseIfList().add(elseIf);    } else {      MySqlElseStatement elseItem=new MySqlElseStatement();      this.parseProcedureStatementList(elseItem.getStatements());      stmt.setElseItem(elseItem);      break;    }  }  accept(Token.END);  accept(Token.IF);  accept(Token.SEMI);  return stmt;}  }
class C{  private String nextAT() throws IOException {  hasQE=false;  for (; pos < chars.length && chars[pos] == ' '; pos++) {  }  if (pos == chars.length) {    return null;  }  beg=pos;  pos++;  for (; pos < chars.length && chars[pos] != '=' && chars[pos] != ' '; pos++) {  }  if (pos >= chars.length) {    throw new IOException("Invalid distinguished name string");  }  end=pos;  if (chars[pos] == ' ') {    for (; pos < chars.length && chars[pos] != '=' && chars[pos] == ' '; pos++) {    }    if (chars[pos] != '=' || pos == chars.length) {      throw new IOException("Invalid distinguished name string");    }  }  pos++;  for (; pos < chars.length && chars[pos] == ' '; pos++) {  }  if ((end - beg > 4) && (chars[beg + 3] == '.') && (chars[beg] == 'O' || chars[beg] == 'o')&& (chars[beg + 1] == 'I' || chars[beg + 1] == 'i')&& (chars[beg + 2] == 'D' || chars[beg + 2] == 'd')) {    beg+=4;  }  return new String(chars,beg,end - beg);}  }
class C{  private void writeObject(ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeObject(toString());}  }
class C{  protected void onUpdate(Uri contentUri,long[] ids,Status status){}  }
class C{  public boolean isAnonymous(){  if (keyExchange == KEY_EXCHANGE_DH_anon || keyExchange == KEY_EXCHANGE_DH_anon_EXPORT || keyExchange == KEY_EXCHANGE_ECDH_anon) {    return true;  }  return false;}  }
class C{  public String toString(){  return (rb.getString("SolarisPrincipal.") + name);}  }
class C{  public static boolean checkIfDataTypeNotTimeStamp(Expression expression){  if (expression.getFilterExpressionType() == ExpressionType.LITERAL) {    if (!(((LiteralExpression)expression).getLiteralExpDataType() == org.carbondata.query.expression.DataType.TimestampType)) {      return true;    }  }  for (  Expression child : expression.getChildren()) {    if (checkIfDataTypeNotTimeStamp(child)) {      return true;    }  }  return false;}  }
class C{  private void loadMockData(){  List<Track> tracks=new ArrayList<>();  tracks.add(new Track(1,"Voodoo Mon Amor","Diablo Swing Orchestra",81));  tracks.add(new Track(2,"Guerilla Laments","Diablo Swing Orchestra",295));  tracks.add(new Track(3,"Kewlar Sweethearts","Diablo Swing Orchestra",264));  tracks.add(new Track(4,"How To Organize a Lynch Mob","Diablo Swing Orchestra",23));  tracks.add(new Track(5,"Black Box Messiah","Diablo Swing Orchestra",297));  tracks.add(new Track(6,"Exit Strategy of a Wrecking Ball","Diablo Swing Orchestra",361));  tracks.add(new Track(7,"Aurora","Diablo Swing Orchestra",305));  tracks.add(new Track(8,"Mass Rapture","Diablo Swing Orchestra",303));  tracks.add(new Track(9,"Black Box Messiah","Diablo Swing Orchestra",297));  tracks.add(new Track(10,"Exit Strategy of a Wrecking Ball","Diablo Swing Orchestra",361));  tracks.add(new Track(11,"Aurora","Diablo Swing Orchestra",305));  tracks.add(new Track(12,"Mass Rapture","Diablo Swing Orchestra",303));  recylerListAdapter.setTrackList(tracks);}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,@RequestParam(value="pid",defaultValue="0") Integer pid,Principal principal){  RestWrapper restWrapper=null;  Integer processId=pid;  try {    if (pid == 0) {      processId=null;    }    if (pid != 0)     processDAO.securityCheck(pid,principal.getName(),"read");    List<com.wipro.ats.bdre.md.dao.jpa.Process> processList=processDAO.list(processId,startPage,pageSize,principal.getName());    Integer counter=processDAO.totalRecordCount(processId);    List<Process> processes=new ArrayList<Process>();    for (    com.wipro.ats.bdre.md.dao.jpa.Process daoProcess : processList) {      Process tableProcess=new Process();      tableProcess.setProcessId(daoProcess.getProcessId());      tableProcess.setBusDomainId(daoProcess.getBusDomain().getBusDomainId());      if (daoProcess.getWorkflowType() != null) {        tableProcess.setWorkflowId(daoProcess.getWorkflowType().getWorkflowId());      }      tableProcess.setDescription(daoProcess.getDescription());      tableProcess.setProcessName(daoProcess.getProcessName());      tableProcess.setProcessTypeId(daoProcess.getProcessType().getProcessTypeId());      if (daoProcess.getProcess() != null) {        tableProcess.setParentProcessId(daoProcess.getProcess().getProcessId());      }      tableProcess.setCanRecover(daoProcess.getCanRecover());      if (daoProcess.getProcessTemplate() != null) {        tableProcess.setProcessTemplateId(daoProcess.getProcessTemplate().getProcessTemplateId());      }      tableProcess.setEnqProcessId(daoProcess.getEnqueuingProcessId());      tableProcess.setNextProcessIds(daoProcess.getNextProcessId());      if (daoProcess.getBatchCutPattern() != null) {        tableProcess.setBatchPattern(daoProcess.getBatchCutPattern());      }      tableProcess.setTableAddTS(DateConverter.dateToString(daoProcess.getAddTs()));      tableProcess.setTableEditTS(DateConverter.dateToString(daoProcess.getEditTs()));      tableProcess.setDeleteFlag(daoProcess.getDeleteFlag());      if (daoProcess.getUserRoles() != null)       tableProcess.setOwnerRoleId(daoProcess.getUserRoles().getUserRoleId());      LOGGER.info("user role id of processid " + daoProcess.getProcessId() + " is "+ daoProcess.getUserRoles().getUserRoleId());      if (daoProcess.getPermissionTypeByGroupAccessId() != null)       tableProcess.setPermissionTypeByGroupAccessId(daoProcess.getPermissionTypeByGroupAccessId().getPermissionTypeId());      if (daoProcess.getPermissionTypeByUserAccessId() != null)       tableProcess.setPermissionTypeByUserAccessId(daoProcess.getPermissionTypeByUserAccessId().getPermissionTypeId());      if (daoProcess.getPermissionTypeByOthersAccessId() != null)       tableProcess.setPermissionTypeByOthersAccessId(daoProcess.getPermissionTypeByOthersAccessId().getPermissionTypeId());      tableProcess.setUserName(daoProcess.getUsers().getUsername());      tableProcess.setCounter(counter);      processes.add(tableProcess);    }    restWrapper=new RestWrapper(processes,RestWrapper.OK);    LOGGER.info("All records listed from Process by User:" + principal.getName());  } catch (  SecurityException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  @SuppressWarnings("serial") public void testAssignmentNode(){  final AssignmentNode an1=(AssignmentNode)new Helper(){{      tmp=bind(constantNode(a),varNode(x));    }  }.getTmp();  final AssignmentNode an2=(AssignmentNode)new Helper(){{      tmp=bind(varNode(y),varNode(x));    }  }.getTmp();  final AssignmentNode an3=(AssignmentNode)new Helper(){{      tmp=bind(FunctionNode.AND(FunctionNode.OR(FunctionNode.EQ(varNode(x),varNode(y)),constantNode(z)),varNode(z)),varNode(w));    }  }.getTmp();  final Set<IVariable<?>> requiredBoundAn1=new HashSet<IVariable<?>>();  final Set<IVariable<?>> requiredBoundAn2=new HashSet<IVariable<?>>(){{      add(Var.var("y"));    }  };  final Set<IVariable<?>> requiredBoundAn3=new HashSet<IVariable<?>>(){{      add(Var.var("x"));      add(Var.var("y"));      add(Var.var("z"));    }  };  final Set<IVariable<?>> desiredBoundAn1=new HashSet<IVariable<?>>();  final Set<IVariable<?>> desiredBoundAn2=new HashSet<IVariable<?>>();  final Set<IVariable<?>> desiredBoundAn3=new HashSet<IVariable<?>>();  final StaticAnalysis sa=new StaticAnalysis(new QueryRoot(QueryType.SELECT),null);  assertEquals(requiredBoundAn1,an1.getRequiredBound(sa));  assertEquals(desiredBoundAn1,an1.getDesiredBound(sa));  assertEquals(requiredBoundAn2,an2.getRequiredBound(sa));  assertEquals(desiredBoundAn2,an2.getDesiredBound(sa));  assertEquals(requiredBoundAn3,an3.getRequiredBound(sa));  assertEquals(desiredBoundAn3,an3.getDesiredBound(sa));}  }
class C{  private String recodeEnding(String word){  int lastPos=word.length() - 1;  if (word.endsWith("bb") || word.endsWith("dd") || word.endsWith("gg")|| word.endsWith("ll")|| word.endsWith("mm")|| word.endsWith("nn")|| word.endsWith("pp")|| word.endsWith("rr")|| word.endsWith("ss")|| word.endsWith("tt")) {    word=word.substring(0,lastPos);    lastPos--;  }  if (word.endsWith("iev")) {    word=word.substring(0,lastPos - 2).concat("ief");  }  if (word.endsWith("uct")) {    word=word.substring(0,lastPos - 2).concat("uc");    lastPos--;  }  if (word.endsWith("umpt")) {    word=word.substring(0,lastPos - 3).concat("um");    lastPos-=2;  }  if (word.endsWith("rpt")) {    word=word.substring(0,lastPos - 2).concat("rb");    lastPos--;  }  if (word.endsWith("urs")) {    word=word.substring(0,lastPos - 2).concat("ur");    lastPos--;  }  if (word.endsWith("istr")) {    word=word.substring(0,lastPos - 3).concat("ister");    lastPos++;  }  if (word.endsWith("metr")) {    word=word.substring(0,lastPos - 3).concat("meter");    lastPos++;  }  if (word.endsWith("olv")) {    word=word.substring(0,lastPos - 2).concat("olut");    lastPos++;  }  if (word.endsWith("ul")) {    if ((lastPos - 2 < 0) || ((word.charAt(lastPos - 2) != 'a') && (word.charAt(lastPos - 2) != 'i') && (word.charAt(lastPos - 2) != 'o'))) {      word=word.substring(0,lastPos - 1).concat("l");      lastPos--;    }  }  if (word.endsWith("bex")) {    word=word.substring(0,lastPos - 2).concat("bic");  }  if (word.endsWith("dex")) {    word=word.substring(0,lastPos - 2).concat("dic");  }  if (word.endsWith("pex")) {    word=word.substring(0,lastPos - 2).concat("pic");  }  if (word.endsWith("tex")) {    word=word.substring(0,lastPos - 2).concat("tic");  }  if (word.endsWith("ax")) {    word=word.substring(0,lastPos - 1).concat("ac");  }  if (word.endsWith("ex")) {    word=word.substring(0,lastPos - 1).concat("ec");  }  if (word.endsWith("ix")) {    word=word.substring(0,lastPos - 1).concat("ic");  }  if (word.endsWith("lux")) {    word=word.substring(0,lastPos - 2).concat("luc");  }  if (word.endsWith("uad")) {    word=word.substring(0,lastPos - 2).concat("uas");  }  if (word.endsWith("vad")) {    word=word.substring(0,lastPos - 2).concat("vas");  }  if (word.endsWith("cid")) {    word=word.substring(0,lastPos - 2).concat("cis");  }  if (word.endsWith("lid")) {    word=word.substring(0,lastPos - 2).concat("lis");  }  if (word.endsWith("erid")) {    word=word.substring(0,lastPos - 3).concat("eris");  }  if (word.endsWith("pand")) {    word=word.substring(0,lastPos - 3).concat("pans");  }  if (word.endsWith("end")) {    if ((lastPos - 3 < 0) || (word.charAt(lastPos - 3) != 's')) {      word=word.substring(0,lastPos - 2).concat("ens");    }  }  if (word.endsWith("ond")) {    word=word.substring(0,lastPos - 2).concat("ons");  }  if (word.endsWith("lud")) {    word=word.substring(0,lastPos - 2).concat("lus");  }  if (word.endsWith("rud")) {    word=word.substring(0,lastPos - 2).concat("rus");  }  if (word.endsWith("her")) {    if ((lastPos - 3 < 0) || ((word.charAt(lastPos - 3) != 'p') && (word.charAt(lastPos - 3) != 't'))) {      word=word.substring(0,lastPos - 2).concat("hes");    }  }  if (word.endsWith("mit")) {    word=word.substring(0,lastPos - 2).concat("mis");  }  if (word.endsWith("end")) {    if ((lastPos - 3 < 0) || (word.charAt(lastPos - 3) != 'm')) {      word=word.substring(0,lastPos - 2).concat("ens");    }  }  if (word.endsWith("ert")) {    word=word.substring(0,lastPos - 2).concat("ers");  }  if (word.endsWith("et")) {    if ((lastPos - 2 < 0) || (word.charAt(lastPos - 2) != 'n')) {      word=word.substring(0,lastPos - 1).concat("es");    }  }  if (word.endsWith("yt")) {    word=word.substring(0,lastPos - 1).concat("ys");  }  if (word.endsWith("yz")) {    word=word.substring(0,lastPos - 1).concat("ys");  }  return word;}  }
class C{  public BerInputStream(InputStream in,int initialSize) throws IOException {  this.in=in;  buffer=new byte[initialSize];  next();  if (length != INDEFINIT_LENGTH) {    if (buffer.length < (length + offset)) {      byte[] newBuffer=new byte[length + offset];      System.arraycopy(buffer,0,newBuffer,0,offset);      buffer=newBuffer;    }  } else {    isIndefinedLength=true;    throw new ASN1Exception("Decoding indefinite length encoding is not supported");  }}  }
class C{  static Object coerceTypeImpl(Class<?> type,Object value){  if (value != null && value.getClass() == type) {    return value;  }switch (getJSTypeCode(value)) {case JSTYPE_NULL:    if (type.isPrimitive()) {      reportConversionError(value,type);    }  return null;case JSTYPE_UNDEFINED:if (type == ScriptRuntime.StringClass || type == ScriptRuntime.ObjectClass) {  return "undefined";} else {  reportConversionError("undefined",type);}break;case JSTYPE_BOOLEAN:if (type == Boolean.TYPE || type == ScriptRuntime.BooleanClass || type == ScriptRuntime.ObjectClass) {return value;} else if (type == ScriptRuntime.StringClass) {return value.toString();} else {reportConversionError(value,type);}break;case JSTYPE_NUMBER:if (type == ScriptRuntime.StringClass) {return ScriptRuntime.toString(value);} else if (type == ScriptRuntime.ObjectClass) {return coerceToNumber(Double.TYPE,value);} else if ((type.isPrimitive() && type != Boolean.TYPE) || ScriptRuntime.NumberClass.isAssignableFrom(type)) {return coerceToNumber(type,value);} else {reportConversionError(value,type);}break;case JSTYPE_STRING:if (type == ScriptRuntime.StringClass || type.isInstance(value)) {return value;} else if (type == Character.TYPE || type == ScriptRuntime.CharacterClass) {if (((String)value).length() == 1) {return Character.valueOf(((String)value).charAt(0));} else {return coerceToNumber(type,value);}} else if ((type.isPrimitive() && type != Boolean.TYPE) || ScriptRuntime.NumberClass.isAssignableFrom(type)) {return coerceToNumber(type,value);} else {reportConversionError(value,type);}break;case JSTYPE_JAVA_CLASS:if (value instanceof Wrapper) {value=((Wrapper)value).unwrap();}if (type == ScriptRuntime.ClassClass || type == ScriptRuntime.ObjectClass) {return value;} else if (type == ScriptRuntime.StringClass) {return value.toString();} else {reportConversionError(value,type);}break;case JSTYPE_JAVA_OBJECT:case JSTYPE_JAVA_ARRAY:if (value instanceof Wrapper) {value=((Wrapper)value).unwrap();}if (type.isPrimitive()) {if (type == Boolean.TYPE) {reportConversionError(value,type);}return coerceToNumber(type,value);} else {if (type == ScriptRuntime.StringClass) {return value.toString();} else {if (type.isInstance(value)) {return value;} else {reportConversionError(value,type);}}}break;case JSTYPE_OBJECT:if (type == ScriptRuntime.StringClass) {return ScriptRuntime.toString(value);} else if (type.isPrimitive()) {if (type == Boolean.TYPE) {reportConversionError(value,type);}return coerceToNumber(type,value);} else if (type.isInstance(value)) {return value;} else if (type == ScriptRuntime.DateClass && value instanceof NativeDate) {double time=((NativeDate)value).getJSTimeValue();return new Date((long)time);} else if (type.isArray() && value instanceof NativeArray) {NativeArray array=(NativeArray)value;long length=array.getLength();Class<?> arrayType=type.getComponentType();Object Result=Array.newInstance(arrayType,(int)length);for (int i=0; i < length; ++i) {try {Array.set(Result,i,coerceType(arrayType,array.get(i,array)));} catch (EvaluatorException ee) {reportConversionError(value,type);}}return Result;} else if (value instanceof Wrapper) {value=((Wrapper)value).unwrap();if (type.isInstance(value)) return value;reportConversionError(value,type);} else if (type.isInterface() && value instanceof Callable) {if (value instanceof ScriptableObject) {ScriptableObject so=(ScriptableObject)value;Object key=Kit.makeHashKeyFromPair(COERCED_INTERFACE_KEY,type);Object old=so.getAssociatedValue(key);if (old != null) {return old;}Context cx=Context.getContext();Object glue=InterfaceAdapter.create(cx,type,(Callable)value);glue=so.associateValue(key,glue);return glue;}reportConversionError(value,type);} else {reportConversionError(value,type);}break;}return value;}  }
class C{  static MoveStepType turnForLateralShift(final MoveStepType shift){switch (shift) {case LATERAL_LEFT:    return MoveStepType.TURN_LEFT;case LATERAL_RIGHT:  return MoveStepType.TURN_RIGHT;case LATERAL_LEFT_BACKWARDS:return MoveStepType.TURN_LEFT;case LATERAL_RIGHT_BACKWARDS:return MoveStepType.TURN_RIGHT;default :return shift;}}  }
class C{  public final boolean isClosed(){  return closed;}  }
class C{  @SuppressWarnings("unused") protected static void runRScript(boolean newWay){  String executionFile="./src/test/scripts/installDependencies.R";  String cmd;  if (!newWay) {    executionFile=executionFile + "t";    cmd="R -f " + executionFile;  } else {    cmd="Rscript" + " " + executionFile;  }  if (System.getProperty("os.name").contains("Windows")) {    cmd=cmd.replace('/','\\');    executionFile=executionFile.replace('/','\\');  }  if (!newWay)   printRScript(executionFile);  try {    long t0=System.nanoTime();    System.out.println("Installing packages required for running integration tests ...");    Process child=Runtime.getRuntime().exec(cmd);    String outputR="";    int c=0;    while ((c=child.getInputStream().read()) != -1) {      System.out.print((char)c);      outputR+=String.valueOf((char)c);    }    while ((c=child.getErrorStream().read()) != -1) {      System.err.print((char)c);    }    child.waitFor();    try {      if (child.exitValue() != 0) {        throw new Exception("ERROR: R has ended irregularly\n" + outputR + "\nscript file: "+ executionFile);      }    } catch (    IllegalThreadStateException ie) {      child.destroy();    }    System.out.println("Done installing packages required for running integration tests.");  } catch (  Exception e) {    e.printStackTrace();    StringBuilder errorMessage=new StringBuilder();    errorMessage.append("failed to run script " + executionFile);    errorMessage.append("\nexception: " + e.toString());    errorMessage.append("\nmessage: " + e.getMessage());    errorMessage.append("\nstack trace:");    for (    StackTraceElement ste : e.getStackTrace()) {      errorMessage.append("\n>" + ste);    }    fail(errorMessage.toString());  }}  }
class C{  public void test_EnabledProtocols() throws IOException {  SSLSocket ssl=getSSLSocket();  try {    ssl.setEnabledProtocols(null);    fail();  } catch (  IllegalArgumentException expected) {  }  ssl.setEnabledProtocols(new String[]{});  try {    ssl.setEnabledProtocols(new String[]{"blubb"});    fail();  } catch (  IllegalArgumentException expected) {  }  ssl.setEnabledProtocols(ssl.getEnabledProtocols());  String[] res=ssl.getEnabledProtocols();  assertEquals("no enabled protocols set",ssl.getEnabledProtocols().length,res.length);  ssl.close();}  }
class C{  @Override public void byteWrite(ObjectReference src,Address slot,byte value,Word metaDataA,Word metaDataB,int mode){  VM.barriers.byteWrite(src,value,metaDataA,metaDataB,mode);}  }
class C{  public Object childrenAccept(ParserVisitor visitor,Object data){  if (children != null) {    for (int i=0; i < children.length; ++i) {      children[i].jjtAccept(visitor,data);    }  }  return data;}  }
class C{  private static List<String> filterEmptyStrings(String[] strings){  List<String> list=new ArrayList<>(strings.length);  for (  String str : strings) {    if (!isNullOrEmpty(str)) {      list.add(str);    }  }  return list;}  }
class C{  protected CoverTreeNode batch_insert(Integer p,int max_scale,int top_scale,Stack<DistanceNode> point_set,Stack<DistanceNode> consumed_set){  if (point_set.length == 0) {    CoverTreeNode leaf=new_leaf(p);    m_NumNodes++;    m_NumLeaves++;    return leaf;  } else {    double max_dist=max_set(point_set);    int next_scale=Math.min(max_scale - 1,get_scale(max_dist));    if (next_scale == Integer.MIN_VALUE) {      Stack<CoverTreeNode> children=new Stack<CoverTreeNode>();      CoverTreeNode leaf=new_leaf(p);      children.push(leaf);      m_NumLeaves++;      m_NumNodes++;      while (point_set.length > 0) {        DistanceNode tmpnode=point_set.pop();        leaf=new_leaf(tmpnode.idx);        children.push(leaf);        m_NumLeaves++;        m_NumNodes++;        consumed_set.push(tmpnode);      }      CoverTreeNode n=new_node(p);      m_NumNodes++;      n.scale=100;      n.max_dist=0;      n.num_children=children.length;      n.children=children;      return n;    } else {      Stack<DistanceNode> far=new Stack<DistanceNode>();      split(point_set,far,max_scale);      CoverTreeNode child=batch_insert(p,next_scale,top_scale,point_set,consumed_set);      if (point_set.length == 0) {        point_set.replaceAllBy(far);        return child;      } else {        CoverTreeNode n=new_node(p);        m_NumNodes++;        Stack<CoverTreeNode> children=new Stack<CoverTreeNode>();        children.push(child);        while (point_set.length != 0) {          Stack<DistanceNode> new_point_set=new Stack<DistanceNode>();          Stack<DistanceNode> new_consumed_set=new Stack<DistanceNode>();          DistanceNode tmpnode=point_set.pop();          double new_dist=tmpnode.dist.last();          consumed_set.push(tmpnode);          dist_split(point_set,new_point_set,tmpnode,max_scale);          dist_split(far,new_point_set,tmpnode,max_scale);          CoverTreeNode new_child=batch_insert(tmpnode.idx,next_scale,top_scale,new_point_set,new_consumed_set);          new_child.parent_dist=new_dist;          children.push(new_child);          double fmax=dist_of_scale(max_scale);          tmpnode=null;          for (int i=0; i < new_point_set.length; i++) {            tmpnode=new_point_set.element(i);            tmpnode.dist.pop();            if (tmpnode.dist.last() <= fmax) {              point_set.push(tmpnode);            } else {              far.push(tmpnode);            }          }          tmpnode=null;          for (int i=0; i < new_consumed_set.length; i++) {            tmpnode=new_consumed_set.element(i);            tmpnode.dist.pop();            consumed_set.push(tmpnode);          }        }        point_set.replaceAllBy(far);        n.scale=top_scale - max_scale;        n.max_dist=max_set(consumed_set);        n.num_children=children.length;        n.children=children;        return n;      }    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:40.919 -0500",hash_original_method="0859014C9C2A58304C2260E63DE25724",hash_generated_method="B26144A06FDD5921E083B96E0109D1EF") static String calculateResponse(String algorithm,String hashUserNameRealmPasswd,String nonce_value,String nc_value,String cnonce_value,String method,String digest_uri_value,String entity_body,String qop_value,StackLogger stackLogger){  if (stackLogger.isLoggingEnabled()) {    stackLogger.logDebug("trying to authenticate using : " + algorithm + ", "+ hashUserNameRealmPasswd+ ", "+ nonce_value+ ", "+ nc_value+ ", "+ cnonce_value+ ", "+ method+ ", "+ digest_uri_value+ ", "+ entity_body+ ", "+ qop_value);  }  if (hashUserNameRealmPasswd == null || method == null || digest_uri_value == null || nonce_value == null)   throw new NullPointerException("Null parameter to MessageDigestAlgorithm.calculateResponse()");  if (cnonce_value == null || cnonce_value.length() == 0)   throw new NullPointerException("cnonce_value may not be absent for MD5-Sess algorithm.");  String A2=null;  if (qop_value == null || qop_value.trim().length() == 0 || qop_value.trim().equalsIgnoreCase("auth")) {    A2=method + ":" + digest_uri_value;  } else {    if (entity_body == null)     entity_body="";    A2=method + ":" + digest_uri_value+ ":"+ H(entity_body);  }  String request_digest=null;  if (cnonce_value != null && qop_value != null && nc_value != null && (qop_value.equalsIgnoreCase("auth") || qop_value.equalsIgnoreCase("auth-int"))) {    request_digest=KD(hashUserNameRealmPasswd,nonce_value + ":" + nc_value+ ":"+ cnonce_value+ ":"+ qop_value+ ":"+ H(A2));  } else {    request_digest=KD(hashUserNameRealmPasswd,nonce_value + ":" + H(A2));  }  return request_digest;}  }
class C{  public void animate(){  if (mView == null)   return;  if (mFromAlpha == mToAlpha)   return;  if (mDuration == 0)   return;  if (mFromAlpha > mToAlpha)   this.setAnimationListener(fadeOutListener); else   this.setAnimationListener(fadeInListener);  this.setDuration(mDuration);  if (mInterpolator != null)   this.setInterpolator(mInterpolator);  mView.startAnimation(this);}  }
class C{  public List<Axis> H(){  if (dimension != null && dimension.getId().getDimensionId() != null) {    ArrayList<Axis> axes=new ArrayList<Axis>();    for (    Dimension dimension : getParent().getUniverse().getSubDimensions(this.dimension)) {      Axis a=new Axis(parent,dimension);      axes.add(a);    }    return axes;  } else {    return Collections.emptyList();  }}  }
class C{  public Vector2d lerp(Vector2dc other,double t){  return lerp(other,t,this);}  }
class C{  public boolean isReverseOrder(){  return mIsReversed;}  }
class C{  public void runGenerateCreateMethodActions(String expectedFile,String... filesToLoad){  configureSourceFiles(filesToLoad);  runIntention(new AddCreateMethodIntention(),expectedFile);  runAction(new GenerateAutoValueCreateAction(),expectedFile);}  }
class C{  private void notifyUser(){  if (mNotificationCountdown > 0) {    --mNotificationCountdown;  } else   if (mAudioManager != null) {    try {      mAudioManager.playSoundEffect(AudioManager.FX_KEYPRESS_STANDARD,100);    } catch (    Exception e) {      Log.w(TAG,"notifyUser: Exception while playing sound: " + e);    }  }  mHandler.removeMessages(MESSAGE_NOTIFY);  mHandler.sendEmptyMessageDelayed(MESSAGE_NOTIFY,5 * 1000);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void add(EventType eventType){  if (!(eventType instanceof EventTypeSPI)) {    return;  }  statementEventTypeRef.addReferences(statementName,new String[]{((EventTypeSPI)eventType).getMetadata().getPrimaryName()});}  }
class C{  private final void removeUser(String nick){synchronized (_channels) {    Enumeration<String> enumeration=_channels.keys();    while (enumeration.hasMoreElements()) {      String channel=enumeration.nextElement();      this.removeUser(channel,nick);    }  }}  }
class C{  private void verifyPO(POServiceReview target){  assertEquals(poReview.getComment(),target.getComment());  assertEquals(poReview.getKey(),target.getKey());  assertEquals(poReview.getModificationDate(),target.getModificationDate());  assertEquals(poReview.getProductKey(),target.getProductKey());  assertEquals(poReview.getRating(),target.getRating());  assertEquals(poReview.getTitle(),target.getTitle());  assertEquals(poReview.getUserId(),target.getUserId());  assertEquals(poReview.getUserName(),target.getUserName());  assertEquals(poReview.getVersion(),target.getVersion());}  }
class C{  public void reset(){  index=0;}  }
class C{  public static IEntry readEntry(ParseSource source) throws IOException, ParseException, ServiceException {  return readEntry(source,null,null,null);}  }
class C{  public static boolean isDefaultFollowRedirects(){  return defaultFollowRedirects;}  }
class C{  public void init(boolean caseSensitive){  this.caseSensitive=caseSensitive;}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  public ConnectionModel(Connection connection){  clientHandle=connection.handle();  clientId=connection.getId();  serverHostName=connection.getHostName();  serverPort=connection.getPort();  cleanSession=connection.getConnectionOptions().isCleanSession();  if (connection.getConnectionOptions().getUserName() == null) {    username=new String();  } else {    username=connection.getConnectionOptions().getUserName();  }  if (connection.getConnectionOptions().getPassword() != null) {    password=new String(connection.getConnectionOptions().getPassword());  } else {    password=new String();  }  tlsServerKey="--- TODO ---";  tlsClientKey="--- TODO ---";  timeout=connection.getConnectionOptions().getConnectionTimeout();  keepAlive=connection.getConnectionOptions().getKeepAliveInterval();  if (connection.getConnectionOptions().getWillDestination() == null) {    lwtTopic=new String();  } else {    lwtTopic=connection.getConnectionOptions().getWillDestination();  }  if (connection.getConnectionOptions().getWillMessage() != null) {    lwtMessage=new String(connection.getConnectionOptions().getWillMessage().getPayload());    lwtQos=connection.getConnectionOptions().getWillMessage().getQos();    lwtRetain=connection.getConnectionOptions().getWillMessage().isRetained();  } else {    lwtMessage=new String();    lwtQos=0;    lwtRetain=false;  }}  }
class C{  public static void main(String[] args) throws Exception {  final int frameworkFailoverTimeout=0;  Protos.FrameworkInfo.Builder frameworkBuilder=Protos.FrameworkInfo.newBuilder().setName(IGNITE_FRAMEWORK_NAME).setUser("").setFailoverTimeout(frameworkFailoverTimeout);  if (System.getenv("MESOS_CHECKPOINT") != null) {    log.info("Enabling checkpoint for the framework");    frameworkBuilder.setCheckpoint(true);  }  ClusterProperties clusterProps=ClusterProperties.from(args.length >= 1 ? args[0] : null);  String baseUrl=String.format("http://%s:%d",clusterProps.httpServerHost(),clusterProps.httpServerPort());  JettyServer httpSrv=new JettyServer();  httpSrv.start(new ResourceHandler(clusterProps.userLibs(),clusterProps.igniteCfg(),clusterProps.igniteWorkDir()),clusterProps);  ResourceProvider provider=new ResourceProvider();  IgniteProvider igniteProvider=new IgniteProvider(clusterProps.igniteWorkDir());  provider.init(clusterProps,igniteProvider,baseUrl);  Scheduler scheduler=new IgniteScheduler(clusterProps,provider);  MesosSchedulerDriver driver;  if (System.getenv("MESOS_AUTHENTICATE") != null) {    log.info("Enabling authentication for the framework");    if (System.getenv("DEFAULT_PRINCIPAL") == null) {      log.log(Level.SEVERE,"Expecting authentication principal in the environment");      System.exit(1);    }    if (System.getenv("DEFAULT_SECRET") == null) {      log.log(Level.SEVERE,"Expecting authentication secret in the environment");      System.exit(1);    }    Protos.Credential cred=Protos.Credential.newBuilder().setPrincipal(System.getenv("DEFAULT_PRINCIPAL")).setSecret(ByteString.copyFrom(System.getenv("DEFAULT_SECRET").getBytes())).build();    frameworkBuilder.setPrincipal(System.getenv("DEFAULT_PRINCIPAL"));    driver=new MesosSchedulerDriver(scheduler,frameworkBuilder.build(),clusterProps.masterUrl(),cred);  } else {    frameworkBuilder.setPrincipal("ignite-framework-java");    driver=new MesosSchedulerDriver(scheduler,frameworkBuilder.build(),clusterProps.masterUrl());  }  int status=driver.run() == Protos.Status.DRIVER_STOPPED ? 0 : 1;  httpSrv.stop();  driver.stop();  System.exit(status);}  }
class C{  boolean isVisible(){  return isVisible;}  }
class C{  public void componentMoved(ComponentEvent e){}  }
class C{  public long delayacct_blkio_ticks(){  return Long.parseLong(fields[41]);}  }
class C{  protected void searchFor(String search){  int rows=getRowCount();  for (int row=0; row < rows; row++) {    String name=(String)getValueAt(row,searchColumn);    if (name.toLowerCase().startsWith(search)) {      changeSelection(row,0,false,false);      break;    }  }}  }
class C{  @Action(value="/voucher/common-ajaxLoadBanksWithAssignedCheques") public String ajaxLoadBanksWithAssignedCheques(){  if (LOGGER.isDebugEnabled())   LOGGER.debug("Starting ajaxLoadBanksWithAssignedCheques...");  try {    final String vouchersWithNewInstrumentsQuery="select voucherheaderid from egf_instrumentvoucher eiv,egf_instrumentheader ih," + " egw_status egws where eiv.instrumentheaderid=ih.id and egws.id=ih.id_status and egws.moduletype='Instrument' and egws.description='New'  ";    StringBuffer queryString=new StringBuffer();    queryString=queryString.append("select DISTINCT concat(concat(bank.id,'-'),bankBranch.id) as bankbranchid,concat(concat(bank.name,' ')," + "bankBranch.branchname) as bankbranchname from  voucherheader vh,Bank bank,Bankbranch bankBranch,Bankaccount bankaccount, ").append(" paymentheader ph where  ").append(" ph.voucherheaderid=vh.id and vh.id  in (" + vouchersWithNewInstrumentsQuery.toString() + ") and bank.isactive=true  and bankBranch.isactive=true ").append(" and  bank.id = bankBranch.bankid and bankBranch.id = bankaccount.BRANCHID and bankaccount.type in ('RECEIPTS_PAYMENTS','PAYMENTS') and vh.voucherdate <= :date").append(" and ph.bankaccountnumberid=bankaccount.id  and bankaccount.isactive=true order by 2");    final List<Object[]> bankBranch=persistenceService.getSession().createSQLQuery(queryString.toString()).setParameter("date",getAsOnDate()).list();    if (LOGGER.isDebugEnabled())     LOGGER.debug("Bank list size is " + bankBranch.size());    bankBranchList=new ArrayList<Map<String,Object>>();    Map<String,Object> bankBrmap;    for (    final Object[] element : bankBranch) {      bankBrmap=new HashMap<String,Object>();      bankBrmap.put("bankBranchId",element[0].toString());      bankBrmap.put("bankBranchName",element[1].toString());      bankBranchList.add(bankBrmap);    }  } catch (  final HibernateException e) {    LOGGER.error("Exception occured while getting the data for bank dropdown " + e.getMessage(),new HibernateException(e.getMessage()));  }catch (  final Exception e) {    LOGGER.error("Exception occured while getting the data for bank dropdown " + e.getMessage(),new Exception(e.getMessage()));  }  if (LOGGER.isDebugEnabled())   LOGGER.debug("Completed ajaxLoadBanksWithAssignedCheques.");  return "bank";}  }
class C{  static public String stripToNull(String value){  if (value == null) {    return null;  }  String result=null;  boolean whiteSpaceFound=false;  int len=value.length();  if (len > 0) {    int beg=0;    for (int i=0; i < len; i++) {      if (!Character.isWhitespace(value.charAt(i))) {        beg=i;        break;      } else {        whiteSpaceFound=true;      }    }    int end=len;    for (int i=len; i > 0; i--) {      if (!Character.isWhitespace(value.charAt(i - 1))) {        end=i;        break;      } else {        whiteSpaceFound=true;      }    }    if (whiteSpaceFound) {      if ((end != 0) && ((beg != 0) || (end != len))) {        result=value.substring(beg,end);      }    } else {      result=value;    }  }  return result;}  }
class C{  public static String block(String row,String... rows){  requireNonNull(row);  requireNonNullElements(rows);  return block(Arrays.stream(rows).collect(joining(nl(),row + nl(),"")));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.134 -0500",hash_original_method="C10D4A1492D25EED638CC1439313FEB4",hash_generated_method="1EB1701C520BB6CD6B5B055C3516E7D2") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.IO}) public synchronized void write(int ch) throws IOException {switch (ch) {case '\r':    __lastWasCR=true;  out.write('\r');return;case '\n':if (!__lastWasCR) out.write('\r');default :__lastWasCR=false;out.write(ch);return;}}  }
class C{  public static int[] readInts(String filename){  return new In(filename).readAllInts();}  }
class C{  public void bajarUDocsExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  OrganizacionUDocsForm formulario=(OrganizacionUDocsForm)form;  List listaUDocs=getListaUDocs(request);  ActionErrors errors=comprobacionesBasicas(formulario,listaUDocs,BAJAR,request);  if (errors != null && !errors.isEmpty()) {    obtenerErrores(request,true).add(errors);    formulario.setUdocsSeleccionadas(null);  } else {    int[] posiciones=formulario.getNuevasPosUdocsSeleccionadas();    int posSelInicial=posiciones[0];    int posSelFinal=posiciones[posiciones.length - 1];    int posElementoPosterior=posSelFinal + 1;    UDocEnUiDepositoVO elementoPosterior=(UDocEnUiDepositoVO)listaUDocs.get(posElementoPosterior);    listaUDocs.remove(posElementoPosterior);    listaUDocs.add(posSelInicial,elementoPosterior);    for (int i=0; i < posiciones.length; i++) {      posiciones[i]++;    }    String[] udocsSeleccionadas=formulario.getUdocsSelect(formulario.getIdsUdocsSeleccionadas(),formulario.getPosUdocsSeleccionadas(),formulario.getSignaturasUdocSeleccionadas(),posiciones);    formulario.setUdocsSeleccionadas(udocsSeleccionadas);    setInTemporalSession(request,DepositoConstants.HAY_CAMBIOS_SIN_GUARDAR,Boolean.TRUE);  }  setReturnActionFordward(request,mappings.findForward("organizacion_udocs"));}  }
class C{  public T findNext(final long timestamp){  if (timestamp < 0L)   throw new IllegalArgumentException();  final Lock lock=readLock();  lock.lock();  try {    final long index=findIndexOf(timestamp) + 1;    if (index == rangeCount()) {      return null;    }    return valueAtIndex(index);  }  finally {    lock.unlock();  }}  }
class C{  @Override public String toString(){  return nodes.keySet().toString();}  }
class C{  public JavaElementDelta(IJavaElement element){  this.changedElement=element;}  }
class C{  public SortedStructSet(Comparator c,StructTypeImpl structType){  this(c);  if (structType == null) {    throw new IllegalArgumentException(LocalizedStrings.SortedStructSet_STRUCTTYPE_MUST_NOT_BE_NULL.toLocalizedString());  }  this.structType=structType;}  }
class C{  protected void endGLEffect(){  mEffectContext.restoreGLState();}  }
class C{  @Override public void onActivityReenter(int resultCode,Intent data){  if (resultCode == RESULT_OK) {    if (data != null) {      if (data != null) {        updateAvatar(data.getStringExtra(Extra.AVATAR_URL));      }    }  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  protected void say(Json msg){  msg.set(Messages.CONVERSATION_ID,getId());  task.getPeerInterface().send(peer,msg);}  }
class C{  public LookupDisplayColumn(String columnName,boolean isTranslated,int ad_Reference_ID,int ad_Reference_Value_ID){  this(columnName,null,isTranslated,ad_Reference_ID,ad_Reference_Value_ID);}  }
class C{  @Override public void onUpdateScrollbar(int dy){  List<AlphabeticalAppsList.AdapterItem> items=mApps.getAdapterItems();  if (items.isEmpty() || mNumAppsPerRow == 0) {    mScrollbar.setThumbOffset(-1,-1);    return;  }  int rowCount=mApps.getNumAppRows();  getCurScrollState(mScrollPosState,-1);  if (mScrollPosState.rowIndex < 0) {    mScrollbar.setThumbOffset(-1,-1);    return;  }  int availableScrollBarHeight=getAvailableScrollBarHeight();  int availableScrollHeight=getAvailableScrollHeight(mApps.getNumAppRows());  if (availableScrollHeight <= 0) {    mScrollbar.setThumbOffset(-1,-1);    return;  }  int scrollY=getScrollTop(mScrollPosState);  int scrollBarY=mBackgroundPadding.top + (int)(((float)scrollY / availableScrollHeight) * availableScrollBarHeight);  if (mScrollbar.isThumbDetached()) {    int scrollBarX;    if (Utilities.isRtl(getResources())) {      scrollBarX=mBackgroundPadding.left;    } else {      scrollBarX=getWidth() - mBackgroundPadding.right - mScrollbar.getThumbWidth();    }    if (mScrollbar.isDraggingThumb()) {      mScrollbar.setThumbOffset(scrollBarX,(int)mScrollbar.getLastTouchY());    } else {      int thumbScrollY=mScrollbar.getThumbOffset().y;      int diffScrollY=scrollBarY - thumbScrollY;      if (diffScrollY * dy > 0f) {        if (dy < 0) {          int offset=(int)((dy * thumbScrollY) / (float)scrollBarY);          thumbScrollY+=Math.max(offset,diffScrollY);        } else {          int offset=(int)((dy * (availableScrollBarHeight - thumbScrollY)) / (float)(availableScrollBarHeight - scrollBarY));          thumbScrollY+=Math.min(offset,diffScrollY);        }        thumbScrollY=Math.max(0,Math.min(availableScrollBarHeight,thumbScrollY));        mScrollbar.setThumbOffset(scrollBarX,thumbScrollY);        if (scrollBarY == thumbScrollY) {          mScrollbar.reattachThumbToScroll();        }      } else {        mScrollbar.setThumbOffset(scrollBarX,thumbScrollY);      }    }  } else {    synchronizeScrollBarThumbOffsetToViewScroll(mScrollPosState,rowCount);  }}  }
class C{  static int countInPeriod(DayOfWeek dow,DayOfWeek dow0,int nDays){  if (dow.getCalendarConstant() >= dow0.getCalendarConstant()) {    return 1 + ((nDays - (dow.getCalendarConstant() - dow0.getCalendarConstant()) - 1) / 7);  } else {    return 1 + ((nDays - (7 - (dow0.getCalendarConstant() - dow.getCalendarConstant())) - 1) / 7);  }}  }
class C{  public void loadScripts(){  org.apache.flex.forks.batik.script.Window window=null;  NodeList scripts=document.getElementsByTagNameNS(SVGConstants.SVG_NAMESPACE_URI,SVGConstants.SVG_SCRIPT_TAG);  int len=scripts.getLength();  if (len == 0) {    return;  }  for (int i=0; i < len; i++) {    AbstractElement script=(AbstractElement)scripts.item(i);    String type=script.getAttributeNS(null,SVGConstants.SVG_TYPE_ATTRIBUTE);    if (type.length() == 0) {      type=SVGConstants.SVG_SCRIPT_TYPE_DEFAULT_VALUE;    }    if (type.equals(SVGConstants.SVG_SCRIPT_TYPE_JAVA)) {      try {        String href=XLinkSupport.getXLinkHref(script);        ParsedURL purl=new ParsedURL(script.getBaseURI(),href);        checkCompatibleScriptURL(type,purl);        DocumentJarClassLoader cll;        URL docURL=null;        try {          docURL=new URL(docPURL.toString());        } catch (        MalformedURLException mue) {        }        cll=new DocumentJarClassLoader(new URL(purl.toString()),docURL);        URL url=cll.findResource("META-INF/MANIFEST.MF");        if (url == null) {          continue;        }        Manifest man=new Manifest(url.openStream());        String sh;        sh=man.getMainAttributes().getValue("Script-Handler");        if (sh != null) {          ScriptHandler h;          h=(ScriptHandler)cll.loadClass(sh).newInstance();          if (window == null) {            window=createWindow();          }          h.run(document,window);        }        sh=man.getMainAttributes().getValue("SVG-Handler-Class");        if (sh != null) {          EventListenerInitializer initializer;          initializer=(EventListenerInitializer)cll.loadClass(sh).newInstance();          if (window == null) {            window=createWindow();          }          initializer.initializeEventListeners((SVGDocument)document);        }      } catch (      Exception e) {        if (userAgent != null) {          userAgent.displayError(e);        }      }      continue;    }    Interpreter interpreter=getInterpreter(type);    if (interpreter == null)     continue;    try {      String href=XLinkSupport.getXLinkHref(script);      String desc=null;      Reader reader=null;      if (href.length() > 0) {        desc=href;        ParsedURL purl=new ParsedURL(script.getBaseURI(),href);        checkCompatibleScriptURL(type,purl);        InputStream is=purl.openStream();        String mediaType=purl.getContentTypeMediaType();        String enc=purl.getContentTypeCharset();        if (enc != null) {          try {            reader=new InputStreamReader(is,enc);          } catch (          UnsupportedEncodingException uee) {            enc=null;          }        }        if (reader == null) {          if (APPLICATION_ECMASCRIPT.equals(mediaType)) {            if (purl.hasContentTypeParameter("version")) {              continue;            }            PushbackInputStream pbis=new PushbackInputStream(is,8);            byte[] buf=new byte[4];            int read=pbis.read(buf);            if (read > 0) {              pbis.unread(buf,0,read);              if (read >= 2) {                if (buf[0] == (byte)0xff && buf[1] == (byte)0xfe) {                  if (read >= 4 && buf[2] == 0 && buf[3] == 0) {                    enc="UTF32-LE";                    pbis.skip(4);                  } else {                    enc="UTF-16LE";                    pbis.skip(2);                  }                } else                 if (buf[0] == (byte)0xfe && buf[1] == (byte)0xff) {                  enc="UTF-16BE";                  pbis.skip(2);                } else                 if (read >= 3 && buf[0] == (byte)0xef && buf[1] == (byte)0xbb && buf[2] == (byte)0xbf) {                  enc="UTF-8";                  pbis.skip(3);                } else                 if (read >= 4 && buf[0] == 0 && buf[1] == 0 && buf[2] == (byte)0xfe && buf[3] == (byte)0xff) {                  enc="UTF-32BE";                  pbis.skip(4);                }              }              if (enc == null) {                enc="UTF-8";              }            }            reader=new InputStreamReader(pbis,enc);          } else {            reader=new InputStreamReader(is);          }        }      } else {        checkCompatibleScriptURL(type,docPURL);        DocumentLoader dl=bridgeContext.getDocumentLoader();        Element e=script;        SVGDocument d=(SVGDocument)e.getOwnerDocument();        int line=dl.getLineNumber(script);        desc=Messages.formatMessage(INLINE_SCRIPT_DESCRIPTION,new Object[]{d.getURL(),"<" + script.getNodeName() + ">",new Integer(line)});        Node n=script.getFirstChild();        if (n != null) {          StringBuffer sb=new StringBuffer();          while (n != null) {            if (n.getNodeType() == Node.CDATA_SECTION_NODE || n.getNodeType() == Node.TEXT_NODE)             sb.append(n.getNodeValue());            n=n.getNextSibling();          }          reader=new StringReader(sb.toString());        } else {          continue;        }      }      interpreter.evaluate(reader,desc);    } catch (    IOException e) {      if (userAgent != null) {        userAgent.displayError(e);      }      return;    }catch (    InterpreterException e) {      System.err.println("InterpExcept: " + e);      handleInterpreterException(e);      return;    }catch (    SecurityException e) {      if (userAgent != null) {        userAgent.displayError(e);      }    }  }}  }
class C{  public static final Vector2 show(Window owner){  ShiftWorldDialog swd=new ShiftWorldDialog(owner);  swd.setLocationRelativeTo(owner);  swd.setVisible(true);  if (!swd.canceled) {    return swd.shiftPanel.getShift();  }  return null;}  }
class C{  public void testSimpleOffsets() throws IOException {  byte[] data=_smileDoc("[ true, null, false, 511 ]",true);  JsonParser p=_smileParser(data);  assertNull(p.getCurrentToken());  JsonLocation loc=p.getCurrentLocation();  assertNotNull(loc);  assertEquals(-1,loc.getCharOffset());  assertEquals(4,loc.getColumnNr());  assertEquals(-1,loc.getLineNr());  assertEquals(4,loc.getByteOffset());  assertToken(JsonToken.START_ARRAY,p.nextToken());  assertEquals(5,p.getCurrentLocation().getByteOffset());  assertEquals(4,p.getTokenLocation().getByteOffset());  assertToken(JsonToken.VALUE_TRUE,p.nextToken());  assertEquals(6,p.getCurrentLocation().getByteOffset());  assertEquals(5,p.getTokenLocation().getByteOffset());  assertToken(JsonToken.VALUE_NULL,p.nextToken());  assertEquals(7,p.getCurrentLocation().getByteOffset());  assertEquals(6,p.getTokenLocation().getByteOffset());  assertToken(JsonToken.VALUE_FALSE,p.nextToken());  assertEquals(8,p.getCurrentLocation().getByteOffset());  assertEquals(7,p.getTokenLocation().getByteOffset());  assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());  assertEquals(511,p.getIntValue());  assertEquals(11,p.getCurrentLocation().getByteOffset());  assertEquals(8,p.getTokenLocation().getByteOffset());  assertToken(JsonToken.END_ARRAY,p.nextToken());  assertEquals(12,p.getCurrentLocation().getByteOffset());  assertEquals(11,p.getTokenLocation().getByteOffset());  assertNull(p.nextToken());  p.close();}  }
class C{  public UniformInOut(Graph<V,E> graph){  this.graph=graph;}  }
class C{  public SparseVector(int length){  this(length,10);}  }
class C{  private V doPut(K key,V value,boolean onlyIfAbsent){  Node<K,V> z;  if (key == null)   throw new NullPointerException();  Comparator<? super K> cmp=comparator;  outer:   for (; ; ) {    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {      if (n != null) {        Object v;        int c;        Node<K,V> f=n.next;        if (n != b.next)         break;        if ((v=n.value) == null) {          n.helpDelete(b,f);          break;        }        if (b.value == null || v == n)         break;        if ((c=cpr(cmp,key,n.key)) > 0) {          b=n;          n=f;          continue;        }        if (c == 0) {          if (onlyIfAbsent || n.casValue(v,value)) {            @SuppressWarnings("unchecked") V vv=(V)v;            return vv;          }          break;        }      }      z=new Node<K,V>(key,value,n);      if (!b.casNext(n,z))       break;      break outer;    }  }  int rnd=ThreadLocalRandom.nextSecondarySeed();  if ((rnd & 0x80000001) == 0) {    int level=1, max;    while (((rnd>>>=1) & 1) != 0)     ++level;    Index<K,V> idx=null;    HeadIndex<K,V> h=head;    if (level <= (max=h.level)) {      for (int i=1; i <= level; ++i)       idx=new Index<K,V>(z,idx,null);    } else {      level=max + 1;      @SuppressWarnings("unchecked") Index<K,V>[] idxs=(Index<K,V>[])new Index<?,?>[level + 1];      for (int i=1; i <= level; ++i)       idxs[i]=idx=new Index<K,V>(z,idx,null);      for (; ; ) {        h=head;        int oldLevel=h.level;        if (level <= oldLevel)         break;        HeadIndex<K,V> newh=h;        Node<K,V> oldbase=h.node;        for (int j=oldLevel + 1; j <= level; ++j)         newh=new HeadIndex<K,V>(oldbase,newh,idxs[j],j);        if (casHead(h,newh)) {          h=newh;          idx=idxs[level=oldLevel];          break;        }      }    }    splice:     for (int insertionLevel=level; ; ) {      int j=h.level;      for (Index<K,V> q=h, r=q.right, t=idx; ; ) {        if (q == null || t == null)         break splice;        if (r != null) {          Node<K,V> n=r.node;          int c=cpr(cmp,key,n.key);          if (n.value == null) {            if (!q.unlink(r))             break;            r=q.right;            continue;          }          if (c > 0) {            q=r;            r=r.right;            continue;          }        }        if (j == insertionLevel) {          if (!q.link(r,t))           break;          if (t.node.value == null) {            findNode(key);            break splice;          }          if (--insertionLevel == 0)           break splice;        }        if (--j >= insertionLevel && j < level)         t=t.down;        q=q.down;        r=q.right;      }    }  }  return null;}  }
class C{  public void initializeIterations(){  if (df == null)   df=new FunctionDerivative(f);  if (Double.isNaN(result))   result=0;  int n=0;  while (DrMath.equal(df.value(result),0)) {    if (++n > getMaximumIterations())     break;    result+=Math.random();  }}  }
class C{  @NotNull @ObjectiveCName("requestCompleteOAuthCommandWithCode:") public Command<AuthState> requestCompleteOAuth(String code){  return modules.getAuthModule().requestCompleteOauth(code);}  }
class C{  public TreeMap<K,V> deleteMin(){  return new TreeMap<>(ord,root.deleteMin());}  }
class C{  public GamaShape(final IShape source,final Geometry geom,final Double rotation,final ILocation newLocation){  this(source,geom,rotation,null,newLocation);}  }
class C{  private JMXConnectorFactory(){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  static void send(String serviceName,InternalDistributedMember oldGrantor,InternalDistributedMember newGrantor,long newGrantorVersion,int newGrantorSerialNumber,DM dm){  final InternalDistributedMember elder=dm.getId();  if (elder.equals(oldGrantor)) {    doOldGrantorWork(serviceName,elder,newGrantor,newGrantorVersion,newGrantorSerialNumber,dm,null);  } else {    DeposeGrantorProcessor processor=new DeposeGrantorProcessor(dm,oldGrantor);    DeposeGrantorMessage.send(serviceName,oldGrantor,newGrantor,newGrantorVersion,newGrantorSerialNumber,dm,processor);    try {      processor.waitForRepliesUninterruptibly();    } catch (    ReplyException e) {      e.handleAsUnexpected();    }  }}  }
class C{  public void notifyRtcpListeners(RtcpEvent event){  for (int i=0; i < listeners.size(); i++) {    RtcpEventListener listener=(RtcpEventListener)listeners.elementAt(i);    listener.receiveRtcpEvent(event);  }}  }
class C{  public static boolean isAnonymous(String className){  int i=className.lastIndexOf('$');  if (i >= 0 && ++i < className.length()) {    while (i < className.length()) {      if (!Character.isDigit(className.charAt(i))) {        return false;      }      i++;    }    return true;  }  return false;}  }
class C{  public ScheduleTimeEventItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void testPeriodic(){}  }
class C{  public static void callTo(Context context,String number){  Uri uri=Uri.parse("tel:" + number);  Intent it=new Intent(Intent.ACTION_DIAL,uri);  context.startActivity(it);}  }
class C{  public boolean raycast(RayCastOutput output,RayCastInput input,int childIndex){  return m_shape.raycast(output,input,m_body.m_xf,childIndex);}  }
class C{  private void previousWindow(Calendar startTime){  if (isDaily()) {    startTime.add(Calendar.DAY_OF_MONTH,-1);  } else   if (isWeekly()) {    startTime.add(Calendar.WEEK_OF_MONTH,-1);  } else   if (isMonthly()) {    int month=startTime.get(Calendar.MONTH);    adjustDayOfMonth(startTime,month + -1);  }}  }
class C{  @Override public boolean isUseIdentityHashCode(){  return super.isUseIdentityHashCode();}  }
class C{  private int xiSteepClusterExtract(final int n,List<Integer> orderedFile,int[] designations){  int clustersFound=0;  Set<Integer> sdaSet=new IntSet();  int orderIndex=0;  double mib=0;  double[] mibVals=new double[n];  List<OPTICSCluster> clusters=new ArrayList<OPTICSCluster>();  List<Integer> allSteepUp=new IntList();  List<Integer> allSDA=new IntList();  while (orderIndex < orderedFile.size() - 1) {    int curIndex=orderedFile.get(orderIndex);    mib=Math.max(mib,reach_d[curIndex]);    if (orderIndex + 1 < orderedFile.size()) {      int nextIndex=orderedFile.get(orderIndex + 1);      if (!downPoint(curIndex,nextIndex)) {        filterSDASet(sdaSet,mib,mibVals,orderedFile);        sdaSet.add(orderIndex);        allSDA.add(orderIndex);        while (orderIndex + 1 < orderedFile.size()) {          orderIndex++;          curIndex=nextIndex;          if (orderIndex + 1 >= orderedFile.size())           break;          nextIndex=orderedFile.get(orderIndex + 1);          if (downPoint(curIndex,nextIndex))           break;        }        mib=reach_d[curIndex];      } else       if (!upPoint(curIndex,nextIndex)) {        filterSDASet(sdaSet,mib,mibVals,orderedFile);        if (!sdaSet.isEmpty())         allSteepUp.add(orderIndex);        while (orderIndex + 1 < orderedFile.size()) {          orderIndex++;          curIndex=nextIndex;          if (orderIndex + 1 >= orderedFile.size())           break;          nextIndex=orderedFile.get(orderIndex + 1);          if (upPoint(curIndex,nextIndex))           break;        }        mib=reach_d[curIndex];        for (Iterator<Integer> iter=sdaSet.iterator(); iter.hasNext(); ) {          int sdaOrdered=iter.next();          int sdaIndx=orderedFile.get(sdaOrdered);          if (!(orderIndex - sdaOrdered >= minPts))           continue; else           if (mib * one_min_xi < mibVals[sdaIndx]) {            continue;          }          if (sdaOrdered > orderIndex)           continue;          OPTICSCluster newClust=new OPTICSCluster(sdaOrdered,orderIndex + 1);          OPTICSCluster tmp;          for (Iterator<OPTICSCluster> clustIter=clusters.iterator(); clustIter.hasNext(); ) {            if (newClust.contains((tmp=clustIter.next()))) {              clustIter.remove();              newClust.subClusters.add(tmp);            }          }          clusters.add(newClust);        }      } else       orderIndex++;    } else     orderIndex++;  }  for (  OPTICSCluster oc : clusters) {    for (    int i : orderedFile.subList(oc.start,oc.end))     if (designations[i] < 0)     designations[i]=clustersFound;    clustersFound++;  }  return clustersFound;}  }
class C{  public AbstractAddress asDoubleConstRef(JavaConstant value){  return asDoubleConstRef(value,8);}  }
class C{  public static Builder createBuilder(Header header,ReadableFontData data){  return new Builder(header,data);}  }
class C{  private void showOverlayTimeout(int timeout){  if (mMediaPlayer == null)   return;  if (timeout != 0)   mOverlayTimeout=timeout;  if (mOverlayTimeout == 0)   mOverlayTimeout=mMediaPlayer.isPlaying() ? OVERLAY_TIMEOUT : OVERLAY_INFINITE;  if (mIsNavMenu) {    mShowing=true;    return;  }  mHandler.sendEmptyMessage(SHOW_PROGRESS);  if (!mShowing) {    mShowing=true;    if (!mIsLocked) {      mPlayPause.setVisibility(View.VISIBLE);      mSize.setVisibility(View.VISIBLE);      dimStatusBar(false);    }    mOverlayProgress.setVisibility(View.VISIBLE);    mEdit.setVisibility(View.VISIBLE);    mLock.setVisibility(View.VISIBLE);  }  mHandler.removeMessages(FADE_OUT);  if (mOverlayTimeout != OVERLAY_INFINITE)   mHandler.sendMessageDelayed(mHandler.obtainMessage(FADE_OUT),mOverlayTimeout);  updateOverlayPausePlay();}  }
class C{  @LogMessageDoc(level="ERROR",message="Error reading link discovery update.",explanation="Unable to process link discovery update",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) public List<LDUpdate> applyUpdates(){  List<LDUpdate> appliedUpdates=new ArrayList<LDUpdate>();  LDUpdate update=null;  while (ldUpdates.peek() != null) {    try {      update=ldUpdates.take();    } catch (    Exception e) {      log.error("Error reading link discovery update.",e);    }    if (log.isTraceEnabled()) {      log.trace("Applying update: {}",update);    }switch (update.getOperation()) {case LINK_UPDATED:      addOrUpdateLink(update.getSrc(),update.getSrcPort(),update.getDst(),update.getDstPort(),update.getType());    break;case LINK_REMOVED:  removeLink(update.getSrc(),update.getSrcPort(),update.getDst(),update.getDstPort());break;case SWITCH_UPDATED:addOrUpdateSwitch(update.getSrc());break;case SWITCH_REMOVED:removeSwitch(update.getSrc());break;case TUNNEL_PORT_ADDED:addTunnelPort(update.getSrc(),update.getSrcPort());break;case TUNNEL_PORT_REMOVED:removeTunnelPort(update.getSrc(),update.getSrcPort());break;case PORT_UP:case PORT_DOWN:break;}appliedUpdates.add(update);}return (Collections.unmodifiableList(appliedUpdates));}  }
class C{  private String checkAllDependencies(HashMap<String,ModuleDescriptor> modlist){  for (  ModuleDescriptor md : modlist.values()) {    String res=checkDependencies(md,modlist);    if (!res.isEmpty()) {      return res;    }  }  return "";}  }
class C{  public boolean isAfterLast() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public ICalDate(Date date){  this(date,true);}  }
class C{  public MockRequestDispatcher(String url){  this.url=url;}  }
class C{  public void addService(String service,String className){  PluginEntry entry=new PluginEntry(service,className,false);  this.addService(entry);}  }
class C{  public String mapFieldName(String owner,String name,String desc){  Map<String,String> map=mapField.get(map(owner));  if (map != null) {    String data=map.get(name + mapDesc(desc));    if (data != null) {      return data;    }  }  return name;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.FOR_STATEMENT___IS_FOR_PLAIN:    return isForPlain();case N4JSPackage.FOR_STATEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:  return appliesOnlyToBlockScopedElements();}return super.eInvoke(operationID,arguments);}  }
class C{  public _Fields fieldForId(int fieldId){  return _Fields.findByThriftId(fieldId);}  }
class C{  @POST @Path("qualifiedName") @Consumes({Servlets.JSON_MEDIA_TYPE,MediaType.APPLICATION_JSON}) @Produces(Servlets.JSON_MEDIA_TYPE) public Response updateByUniqueAttribute(@QueryParam("type") String entityType,@QueryParam("property") String attribute,@QueryParam("value") String value,@Context HttpServletRequest request){  String entityJson=null;  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"EntityResource.updateByUniqueAttribute()");    }    entityJson=Servlets.getRequestPayload(request);    LOG.info("Partially updating entity by unique attribute {} {} {} {} ",entityType,attribute,value,entityJson);    Referenceable updatedEntity=InstanceSerialization.fromJsonReferenceable(entityJson,true);    AtlasClient.EntityResult entityResult=metadataService.updateEntityByUniqueAttribute(entityType,attribute,value,updatedEntity);    LOG.info("Updated entities: {}",entityResult);    JSONObject response=getResponse(entityResult);    return Response.ok(response).build();  } catch (  ValueConversionException ve) {    LOG.error("Unable to persist entity instance due to a deserialization error {} ",entityJson,ve);    throw new WebApplicationException(Servlets.getErrorResponse(ve.getCause(),Response.Status.BAD_REQUEST));  }catch (  EntityExistsException e) {    LOG.error("Unique constraint violation for entity {} ",entityJson,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.CONFLICT));  }catch (  EntityNotFoundException e) {    LOG.error("An entity with type={} and qualifiedName={} does not exist {} ",entityType,value,entityJson,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.NOT_FOUND));  }catch (  AtlasException|IllegalArgumentException e) {    LOG.error("Unable to partially update entity {} {} " + entityType + ":"+ attribute+ "."+ value,entityJson,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to partially update entity {} {} " + entityType + ":"+ attribute+ "."+ value,entityJson,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  } finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  public static String findOffsets(final RandomAccessBuffer pdf_datafile,final Offsets offset) throws PdfSecurityException {  LogWriter.writeLog("Corrupt xref table - trying to find objects manually");  String root_id="", line=null;  int pointer, i=0;  try {    pdf_datafile.seek(0);  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " reading line");  }  while (true) {    try {      i=(int)pdf_datafile.getFilePointer();      line=pdf_datafile.readLine();    } catch (    final Exception e) {      LogWriter.writeLog("Exception " + e + " reading line");    }    if (line == null) {      break;    }    if (line.contains(" obj")) {      pointer=line.indexOf(' ');      if (pointer > 0) {        offset.storeObjectOffset(Integer.parseInt(line.substring(0,pointer)),i,1,false,true);      }    } else     if (line.contains("/Root")) {      final int start=line.indexOf("/Root") + 5;      pointer=line.indexOf('R',start);      if (pointer > -1) {        root_id=line.substring(start,pointer + 1).trim();      }    } else     if (line.contains("/Encrypt")) {      throw new PdfSecurityException("Corrupted, encrypted file");    }  }  return root_id;}  }
class C{  public MbfsRunner(DataWrapper dataWrapper,Parameters params){  super(dataWrapper,params,null);}  }
class C{  public void insert(int elem){  heap=Arrays.copyOf(heap,size + 1);  int i=size;  int parentIndex=(int)Math.floor((i - 1) / 2);  while (i > 0 && elem > heap[parentIndex]) {    heap[i]=heap[parentIndex];    i=parentIndex;    parentIndex=(int)Math.floor((i - 1) / 2);  }  heap[i]=elem;  size++;}  }
class C{  public static final long transfer(Reader in,Writer out) throws IOException {  long totalChars=0;  int charsInBuf=0;  char[] buf=new char[4096];  while ((charsInBuf=in.read(buf)) != -1) {    out.write(buf,0,charsInBuf);    totalChars+=charsInBuf;  }  return totalChars;}  }
class C{  public static double max(double x,double y){  return (x >= y) ? x : y;}  }
class C{  public String next(int n) throws JSONException {  if (n == 0) {    return "";  }  char[] chars=new char[n];  int pos=0;  while (pos < n) {    chars[pos]=this.next();    if (this.end()) {      throw this.syntaxError("Substring bounds error");    }    pos+=1;  }  return new String(chars);}  }
class C{  public Boolean isTargetDataDigestSettable(){  return targetDataDigestSettable;}  }
class C{  public NetAppStatsRecorder(ZeroRecordGenerator zeroRecordGenerator,CassandraInsertion statsColumnInjector){  this.zeroRecordGenerator=zeroRecordGenerator;  this.statsColumnInjector=statsColumnInjector;}  }
class C{  @Override public boolean absolute(int rowNumber) throws SQLException {  try {    debugCodeCall("absolute",rowNumber);    checkClosed();    if (rowNumber < 0) {      rowNumber=result.getRowCount() + rowNumber + 1;    } else     if (rowNumber > result.getRowCount() + 1) {      rowNumber=result.getRowCount() + 1;    }    if (rowNumber <= result.getRowId()) {      resetResult();    }    while (result.getRowId() + 1 < rowNumber) {      nextRow();    }    int row=result.getRowId();    return row >= 0 && row < result.getRowCount();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  static void terminateBits(int numDataBytes,BitArray bits) throws WriterException {  int capacity=numDataBytes << 3;  if (bits.getSize() > capacity) {    throw new WriterException("data bits cannot fit in the QR Code" + bits.getSize() + " > "+ capacity);  }  for (int i=0; i < 4 && bits.getSize() < capacity; ++i) {    bits.appendBit(false);  }  int numBitsInLastByte=bits.getSize() & 0x07;  if (numBitsInLastByte > 0) {    for (int i=numBitsInLastByte; i < 8; i++) {      bits.appendBit(false);    }  }  int numPaddingBytes=numDataBytes - bits.getSizeInBytes();  for (int i=0; i < numPaddingBytes; ++i) {    bits.appendBits((i & 0x01) == 0 ? 0xEC : 0x11,8);  }  if (bits.getSize() != capacity) {    throw new WriterException("Bits size does not equal capacity");  }}  }
class C{  private void recalculateTableIndices(){  List<Integer> indices=new LinkedList<Integer>();  for (int i=0; i < elements.length; i++) {    if (mask[elements[i]]) {      indices.add(i);    }  }  tableIndexMap=new int[indices.size()];  Iterator<Integer> i=indices.iterator();  int counter=0;  while (i.hasNext()) {    tableIndexMap[counter++]=i.next();  }}  }
class C{  private void updatePreview(){  preview.setText(null);  preview.setIcon(null);  if (currentIcon == null) {    preview.setText("No image.");  } else   if (currentIcon.removeBadge) {    preview.setText("No image.");  } else   if (currentIcon.fileName.startsWith("$")) {    preview.setText("Ref image.");  } else   if (currentIcon.image == null) {    preview.setText(ERROR_LOADING_IMAGE);  } else {    ImageIcon image=currentIcon.image;    preview.setIcon(image);    preview.setText(image.getIconWidth() + "x" + image.getIconHeight());  }  updateSize();}  }
class C{  private Start start(Node node){  Start event=new Start(node);  if (event.isEmpty()) {    return build(event);  }  return event;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.154 -0500",hash_original_method="E74C4677EAF9B6C97A4A9A93D88FC71E",hash_generated_method="651B21860BCD5A03563D55E4C417A0FE") private void doAcquireInterruptibly(int arg) throws InterruptedException {  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return;      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public boolean isAddConnected(){  return addConnected;}  }
class C{  @Override protected void update(){  super.update();  if (stateChanged) {    stateChanged=false;    setSprite(getStateSprite());  }}  }
class C{  public AttachAPINotFoundException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public JPopupMenu buildPopupMenu(final OdorWorldEntity theEntity){  final JPopupMenu ret=new JPopupMenu();  if (theEntity == null) {    ret.add(new JMenuItem(new AddEntityAction(this)));    ret.add(new JMenuItem(new AddAgentAction(this)));    ret.addSeparator();    ret.add(new JMenuItem(new ShowWorldPrefsAction(this)));    return ret;  }  ret.add(new JMenuItem(new ShowEntityDialogAction(theEntity)));  if (theEntity.getSmellSource() == null) {    ret.addSeparator();    ret.add(new JMenuItem(new AddSmellSourceAction(this,theEntity)));  }  ret.addSeparator();  ret.add(new JMenuItem(new DeleteEntityAction(this,theEntity)));  return ret;}  }
class C{  @Override public void close(){  for (Iterator<Closeable> iterator=requestResources.iterator(); iterator.hasNext(); ) {    Closeable closeable=iterator.next();    closeQuietly(closeable);    iterator.remove();  }}  }
class C{  public void error(String format,Object... argArray){  formatAndLog(Log.ERROR,format,argArray);}  }
class C{  private void cancelNotification(){  final NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  nm.cancel(NOTIFICATION_ID);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case DELETED:  return isSetDeleted();}throw new IllegalStateException();}  }
class C{  public JavaScriptClassElement(String className){  this.className=className;}  }
class C{  protected String fetchToken() throws IOException {  if (activity == null)   return null;  try {    logger.debug("Fetching google oauth2 token ...");    return GoogleAuthUtil.getToken(activity,mEmail,mScope);  } catch (  UserRecoverableAuthException userRecoverableException) {    logger.debug("User recoverable error occurred");    logger.error(userRecoverableException);    activity.startActivityForResult(userRecoverableException.getIntent(),REQUEST_AUTHORIZATION);  }catch (  GoogleAuthException fatalException) {    logger.warn("google auth error occurred");    logger.error(fatalException);  }  return null;}  }
class C{  public void testAssignServiceCommentToBinary() throws Exception {  filterHelper.setContext(generateDefaultRuntime(true));  filterHelper.setFilter(new EventMetadataFilter());  String japaneseInsert="insert into foo values('\u306B\u307B\u3093')";  byte[] japaneseInsertUtf8=japaneseInsert.getBytes("utf8");  ReplDBMSEvent e=this.eventHelper.eventFromBinaryStatement(1,"test",japaneseInsertUtf8,0,true,"utf8");  checkServiceAddition(e,true);  String euroInsert="insert into foo values('\u00A1Hola Se\u00F1or!')";  byte[] euroInsertIso_1=euroInsert.getBytes("ISO8859_1");  ReplDBMSEvent e2=this.eventHelper.eventFromBinaryStatement(1,"test",euroInsertIso_1,0,true,"ISO8859_1");  checkServiceAddition(e2,true);  byte[] euroInsertIso_1_null=Arrays.copyOf(euroInsertIso_1,euroInsertIso_1.length + 2);  ReplDBMSEvent e3=this.eventHelper.eventFromBinaryStatement(1,"test",euroInsertIso_1_null,0,true,"ISO8859_1");  checkServiceAddition(e3,true);  String nullTerminatedInsert="insert into foo values('nihon')\u0000";  byte[] nullTerminatedInsertUtf8=nullTerminatedInsert.getBytes("utf8");  ReplDBMSEvent e5=this.eventHelper.eventFromBinaryStatement(1,"test",nullTerminatedInsertUtf8,0,true,"utf8");  checkServiceAddition(e5,true);}  }
class C{  public Garden(){  super();}  }
class C{  public String numExecutionSlotsTipText(){  return "The number of execution slots (threads) to use for " + "constructing the ensemble.";}  }
class C{  private void displayPopupMenu(final MouseEvent event){  final int selectedIndex=getSelectionIndex(event);  if (selectedIndex != -1) {    final MemoryModule memoryModule=m_table.getTreeTableModel().getModules().get(selectedIndex);    final CModulesTableMenu popupMenu=new CModulesTableMenu(SwingUtilities.getWindowAncestor(CModulesPanel.this),m_debugPerspectiveModel,memoryModule);    popupMenu.show(m_table,event.getX(),event.getY());  }}  }
class C{  public Boolean isConstantBitRate(){  return constantBitRate;}  }
class C{  public boolean isMandatory(){  return m_button.isMandatory();}  }
class C{  protected void invalidate(){  String s=element.getAttributeNS(null,SVGConstants.SVG_PRESERVE_ASPECT_RATIO_ATTRIBUTE);  setValueAsString(s);}  }
class C{  public int length(List<String> ls){  return ls.size();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public TestConfiguration(String testDirectory,String testScript){  this.testDirectory=testDirectory;  this.testScript=testScript;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.ENUM_PROPERTY_SOURCE__PROPERTY:    setProperty((EnumLiteral)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @PreAuthorize("hasRole('ROLE_USER_MANAGER')") @Transactional(readOnly=false,propagation=Propagation.REQUIRED) @CacheEvict(value="user",allEntries=true) public void deleteUser(Long id) throws RootNotModifiableException, EmailNotSentException {  User u=userDao.read(id);  checkRoot(u);  userDao.removeUser(u);}  }
class C{  public Selection isBeforeNoon(){  return select(null);}  }
class C{  @Override public Example next(){  if (!hasNext()) {    return null;  }  DataRow data=dataRowReader.next();  if (data == null) {    return null;  }  return new Example(data,exampleSet);}  }
class C{  public void testVersion_3_1_0() throws Exception {  verifyLog("tungsten-replicator-3.1.0");}  }
class C{  public static boolean allElementsAreZero(byte[] array){  for (  byte b : array) {    if (b != 0)     return false;  }  return true;}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.185 -0400",hash_original_method="00D81E8E10F2D946A5DDFFF7E3A69119",hash_generated_method="A78AED6B3BF2923F24872E48708F87FB") public static String toString(URI uri,String encoding) throws IOException {  return toString(uri,Charsets.toCharset(encoding));}  }
class C{  public void put(K key,V value,int idleTime,int cacheTime,TimeUnit timeUnit){  putToMap(key,value,timeUnit.toMillis(idleTime),timeUnit.toMillis(cacheTime),false,false);}  }
class C{  public static void close(URLConnection conn){  if (conn instanceof HttpURLConnection) {    ((HttpURLConnection)conn).disconnect();  }}  }
class C{  public DataBufferGrabber(){  setPreferredSize(new Dimension(2 * SWATCH_SIZE,SWATCH_SIZE));}  }
class C{  public static CompoundTag writeItem(ItemStack stack,int slot){  CompoundTag tag=new CompoundTag();  if (stack == null || stack.getType() == Material.AIR) {    return tag;  }  tag.putString("id",ItemIds.getName(stack.getType()));  tag.putShort("Damage",stack.getDurability());  tag.putByte("Count",stack.getAmount());  if (slot >= 0) {    tag.putByte("Slot",slot);  }  CompoundTag meta=GlowItemFactory.instance().writeNbt(stack.getItemMeta());  if (meta != null) {    tag.putCompound("tag",meta);  }  return tag;}  }
class C{  public boolean canRequestReview(TaskData taskData){  String reviewRef=taskData.getRoot().getAttribute(AppraiseReviewTaskSchema.getDefault().REVIEW_REF.getKey()).getValue();  String targetRef=taskData.getRoot().getAttribute(AppraiseReviewTaskSchema.getDefault().TARGET_REF.getKey()).getValue();  return gitClient.canRequestReviewOnReviewRef(reviewRef,targetRef);}  }
class C{  @Override public boolean onPreferenceChange(Preference preference,Object newValue){  preference.setSummary((CharSequence)newValue);  return true;}  }
class C{  public synchronized void removePanListener(PanListener listener){  mPanListeners.add(listener);}  }
class C{  public static boolean isSameDay(final Date date1,final Date date2){  if (date1 == null || date2 == null) {    throw new IllegalArgumentException("The date must not be null");  }  final Calendar cal1=Calendar.getInstance();  cal1.setTime(date1);  final Calendar cal2=Calendar.getInstance();  cal2.setTime(date2);  return isSameDay(cal1,cal2);}  }
class C{  public EllipticalOrbitAnimation3D(Vector3 focalPoint,Vector3 periapsis,Vector3 normal,double eccentricity,double angle){  super();  mFocalPoint=focalPoint;  mPeriapsis=periapsis;  mNormal=normal.clone();  mEccentricity=eccentricity;  mAngle=angle;  mDirection=(mAngle < 0) ? OrbitDirection.CLOCKWISE : OrbitDirection.COUNTERCLOCKWISE;  mAngle=Math.abs(mAngle);}  }
class C{  public synchronized AnimatedLabel addFrame(String text){  String[] lines=splitIntoMultipleLines(text);  frames.add(lines);  ensurePreferredSize(lines);  return this;}  }
class C{  private boolean isEditingLatentVariablesAllowed(){  return editingLatentVariablesAllowed;}  }
class C{  public MalformedCookieException(){  super();}  }
class C{  public synchronized ZooKeeperClientBuilder sessionTimeoutMs(int sessionTimeoutMs){  this.sessionTimeoutMs=sessionTimeoutMs;  if (this.conectionTimeoutMs <= 0) {    this.conectionTimeoutMs=2 * sessionTimeoutMs;  }  return this;}  }
class C{  public int next(){  final int result=_currentNode;  int nodeType=_nodeType;  _currentNode=END;  if (nodeType >= DTM.NTYPES) {    if (getExpandedTypeID(result) == nodeType) {      return returnNode(result);    }  } else {    if (getNodeType(result) == nodeType) {      return returnNode(result);    }  }  return NULL;}  }
class C{  public String globalInfo(){  return "Loads the external test set and calls the appropriate " + "SplitEvaluator to generate some results.\n" + "The filename of the test set is constructed as follows:\n"+ "   <dir> + / + <prefix> + <relation-name> + <suffix>\n"+ "The relation-name can be modified by using the regular expression "+ "to replace the matching sub-string with a specified replacement "+ "string. In order to get rid of the string that the Weka filters "+ "add to the end of the relation name, just use '.*-weka' as the "+ "regular expression to find.\n"+ "The suffix determines the type of file to load, i.e., one is "+ "not restricted to ARFF files. As long as Weka recognizes the "+ "extension specified in the suffix, the data will be loaded with "+ "one of Weka's converters.";}  }
class C{  public static boolean isInRange(float min,float max,float a){  return (min <= a) && (a <= max);}  }
class C{  public static void addTransmutation(ItemStack input,ItemStack output,float xp){  TransmutatorRecipes.instance().transmute(input,output,xp);}  }
class C{  public boolean isUnknown(){  return true;}  }
class C{  public void configureDomainAxes(){  for (  CategoryAxis xAxis : this.domainAxes.values()) {    if (xAxis != null) {      xAxis.configure();    }  }}  }
class C{  public void paintSliderTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.724 -0500",hash_original_method="A530968907DBDDA36B89C5946F7EC59D",hash_generated_method="2C5E21017E9807E723B62EC2F20F70E5") public void toggleSoftInputFromWindow(IBinder windowToken,int showFlags,int hideFlags){synchronized (mH) {    if (mServedView == null || mServedView.getWindowToken() != windowToken) {      return;    }    if (mCurMethod != null) {      try {        mCurMethod.toggleSoftInput(showFlags,hideFlags);      } catch (      RemoteException e) {      }    }  }}  }
class C{  public _BuildUpdate(){  super();}  }
class C{  public GridConcurrentLinkedHashSet(){  super(new ConcurrentLinkedHashMap<E,E>());}  }
class C{  @Override public int insertCalendar(Connection conn,String calendarName,Calendar calendar) throws IOException, SQLException {  ByteArrayOutputStream baos=serializeObject(calendar);  byte buf[]=baos.toByteArray();  ByteArrayInputStream bais=new ByteArrayInputStream(buf);  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(INSERT_CALENDAR));    ps.setString(1,calendarName);    ps.setBinaryStream(2,bais,buf.length);    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  if (!e.isShutdown()) {    e.getQueue().poll();    e.execute(r);  }}  }
class C{  public void foo(){}  }
class C{  @Override public CloseableReference<Bitmap> createBitmap(int width,int height,Bitmap.Config bitmapConfig){  Bitmap bitmap=Bitmap.createBitmap(width,height,bitmapConfig);  return CloseableReference.of(bitmap,SimpleBitmapReleaser.getInstance());}  }
class C{  public static String toVectorPath(TraceVectorComponent component,String category,int target){  return String.format("%s/%s/%d",component.toString(),category,target);}  }
class C{  public static boolean isKnown(File f){  String name=f.getName().replace(".jar","");  for (  Pattern p : knownFiles) {    Matcher matcher=p.matcher(name);    if (matcher.matches())     return true;  }  return false;}  }
class C{  public Boolean isDirectDictionary(){  return isDirectDictionary;}  }
class C{  public Object opt(String key){  return key == null ? null : this.map.get(key);}  }
class C{  public final boolean areSpacesAllowed(){  return allowSpaces;}  }
class C{  public BeanContextMembershipEvent(BeanContext bc,Object[] changes){  super(bc);  if (changes == null)   throw new NullPointerException("BeanContextMembershipEvent:  changes is null.");  children=Arrays.asList(changes);}  }
class C{  public void stem(){  k=i - 1;  if (k > 1) {    step1();    step2();    step3();    step4();    step5();    step6();  }  i_end=k + 1;  i=0;}  }
class C{  private void goToMaster(){  if (logger.isDebugEnabled()) {    logger.debug("Transitioning to MASTER role");  }  cntTransitionToMaster.increment();  IClosableIterator<Map.Entry<String,Versioned<DeviceSyncRepresentation>>> iter=null;  try {    iter=storeClient.entries();  } catch (  SyncException e) {    cntSyncException.increment();    logger.error("Failed to read devices from sync store",e);    return;  }  try {    while (iter.hasNext()) {      Versioned<DeviceSyncRepresentation> versionedDevice=iter.next().getValue();      DeviceSyncRepresentation storedDevice=versionedDevice.getValue();      if (storedDevice == null)       continue;      cntDevicesFromStore.increment();      for (      SyncEntity se : storedDevice.getEntities()) {        learnDeviceByEntity(se.asEntity());      }    }  }  finally {    if (iter != null)     iter.close();  }  storeConsolidateTask.reschedule(initialSyncStoreConsolidateMs,TimeUnit.MILLISECONDS);}  }
class C{  public RefImage(int width,int height,Config config){  bi=Bitmap.createBitmap(width,height,config);}  }
class C{  public ObjectGraph plus(List<Object> modules){  return applicationObjectGraph.plus(modules.toArray());}  }
class C{  public synchronized void waitForUnpause(){  final String METHOD_NAME="wait_for_unpause()";  getOwner().methodBegin(getClass(),METHOD_NAME);  try {    while (!getDone().get() && (getWaitWhenDone().get() || (getEventsToProcess().isEmpty() && getDirtyUnits().isEmpty()))) {      getOwner().log(getClass(),METHOD_NAME,"waitWhenDone = " + getWaitWhenDone() + " :: eventsToProcess = "+ getEventsToProcess().size()+ " :: dirtyUnits = "+ getDirtyUnits().size());      getWaiting().set(true);      try {        wait();      } catch (      InterruptedException ignored) {      }    }    getWaiting().set(false);  }  finally {    getOwner().methodEnd(getClass(),METHOD_NAME);  }}  }
class C{  public static void error(int windowNo,String adMessage,String msg){  error(windowNo,null,adMessage,msg);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public NGramTokenizerFactory(Map<String,String> args){  super(args);  minGramSize=getInt(args,"minGramSize",NGramTokenizer.DEFAULT_MIN_NGRAM_SIZE);  maxGramSize=getInt(args,"maxGramSize",NGramTokenizer.DEFAULT_MAX_NGRAM_SIZE);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void addObservations(int var1[],int var2[],int cond[]){  int rows=var1.length;  observations+=rows;  for (int r=0; r < rows; r++) {    firstSecondCondCount[var1[r]][var2[r]][cond[r]]++;    firstCondCount[var1[r]][cond[r]]++;    secondCondCount[var2[r]][cond[r]]++;    condCount[cond[r]]++;  }}  }
class C{  public int clockSequence(){  if (version != 1) {    throw new UnsupportedOperationException();  }  return clockSequence;}  }
class C{  public List<ShardRouting> shardsWithState(ShardRoutingState... states){  List<ShardRouting> shards=new ArrayList<>();  for (  ShardRouting shardEntry : this) {    for (    ShardRoutingState state : states) {      if (shardEntry.state() == state) {        shards.add(shardEntry);      }    }  }  return shards;}  }
class C{  public void reset(){  engineReset();  state=INITIAL;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public static void addWatch(Address watchAddress,int bytes){  while (bytes > 0) {    addWatch(watchAddress);    bytes-=BYTES_IN_INT;    watchAddress=watchAddress.plus(BYTES_IN_INT);  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (bayesPm == null) {    throw new NullPointerException();  }  if (nodes == null) {    throw new NullPointerException();  }  if (parents == null) {    throw new NullPointerException();  }  if (parentDims == null) {    throw new NullPointerException();  }  if (probs == null) {    throw new NullPointerException();  }}  }
class C{  void move(int touchX,int touchY){  setTranslationX(touchX - mRegistrationX + (int)mOffsetX);  setTranslationY(touchY - mRegistrationY + (int)mOffsetY);}  }
class C{  public BoxAndWhiskersChart(final String title,final String xAxisLabel,final String yAxisLabel,double binWidth){  this(title,xAxisLabel,yAxisLabel,binWidth,false);}  }
class C{  private void validateEmptyEntry(ResultFileReader reader) throws IOException {  Assert.assertTrue(reader.hasNext());  TestUtils.assertEquals(population,reader.next().getPopulation());  Assert.assertTrue(reader.hasNext());  Assert.assertEquals(0,reader.next().getPopulation().size());  Assert.assertTrue(reader.hasNext());  TestUtils.assertEquals(population,reader.next().getPopulation());  Assert.assertFalse(reader.hasNext());  Assert.assertFalse(reader.hasNext());}  }
class C{  public String dumpAll(Iterator<? extends Object> data){  StringWriter buffer=new StringWriter();  dumpAll(data,buffer,null);  return buffer.toString();}  }
class C{  private static void GetStringRegion(JNIEnvironment env,int strJREF,int start,int len,Address buf){  if (traceJNI)   VM.sysWrite("JNI called: GetStringRegion \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    String str=(String)env.getJNIRef(strJREF);    char[] strChars=java.lang.JikesRVMSupport.getBackingCharArray(str);    int strOffset=java.lang.JikesRVMSupport.getStringOffset(str);    int strLen=java.lang.JikesRVMSupport.getStringLength(str);    if (strLen < start + len) {      env.recordException(new StringIndexOutOfBoundsException());      return;    }    Address strBase=Magic.objectAsAddress(strChars);    Address srcBase=strBase.plus(strOffset * 2).plus(start * 2);    Memory.memcopy(buf,srcBase,len * 2);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public img(String src){  setSrc(src);}  }
class C{  private static void createNode(final INaviView view,final INaviFunction function,final IBlockNode blockNode,final Map<IBlockNode,CCodeNode> map,final INaviGroupNode parentGroup){  final List<INaviInstruction> instructions=new ArrayList<INaviInstruction>();  final List<CCodeNode> createNodes=new ArrayList<CCodeNode>();  final INaviBasicBlock block=blockNode.getBlock();  for (  final INaviInstruction instruction : block) {    instructions.add(instruction.cloneInstruction());  }  if (!instructions.isEmpty()) {    final CCodeNode node=view.getContent().createCodeNode(function,instructions);    node.setColor(new Color(221,234,244));    if (node.getAddress().equals(function.getAddress()) && (blockNode.getChildren().size() == 0)) {      node.setBorderColor(new Color(-6250496));    } else     if (node.getAddress().equals(function.getAddress())) {      node.setBorderColor(new Color(-16736256));    } else     if (blockNode.getChildren().size() == 0) {      node.setBorderColor(new Color(-6291456));    }    if (parentGroup != null) {      parentGroup.addElement(node);    }    createNodes.add(node);    map.put(blockNode,node);  }}  }
class C{  public String name() throws IOException {  final Identity identity=new RqAuth(this).identity();  final String urn=identity.urn();  final Matcher mtr=RqUser.PTN.matcher(urn);  if (!mtr.matches()) {    throw new IllegalArgumentException(String.format("URN \"%s\" is not from GitHub",urn));  }  return identity.properties().get("login");}  }
class C{  public double unnormalizedKernel(char[] s,char[] t){  if (t.length > s.length) {    char[] buf=s;    s=t;    t=buf;  }  if (m_PruningMethod == PRUNING_NONE) {    m_multX=(s.length + 1) * (t.length + 1);    m_multY=(t.length + 1);    m_multZ=1;    maxCache=m_internalCacheSize;    if (maxCache == 0) {      maxCache=(m_subsequenceLength + 1) * m_multX;    } else     if ((m_subsequenceLength + 1) * m_multX < maxCache) {      maxCache=(m_subsequenceLength + 1) * m_multX;    }    m_useRecursionCache=true;    cachekhK=new int[maxCache];    cachekh2K=new int[maxCache];    cachekh=new double[maxCache];    cachekh2=new double[maxCache];  } else   if (m_PruningMethod == PRUNING_LAMBDA) {    maxCache=0;    m_useRecursionCache=false;  }  double res;  if (m_PruningMethod == PRUNING_LAMBDA) {    res=kernelLP(m_subsequenceLength,s,s.length - 1,t,t.length - 1,m_maxSubsequenceLength);  } else {    res=kernel(m_subsequenceLength,s,s.length - 1,t,t.length - 1);  }  cachekh=null;  cachekhK=null;  cachekh2=null;  cachekh2K=null;  return res;}  }
class C{  public static byte[] generateMac(byte[] byteCipherText,SecretKey integrityKey) throws NoSuchAlgorithmException, InvalidKeyException {  Mac sha256_HMAC=Mac.getInstance(HMAC_ALGORITHM);  sha256_HMAC.init(integrityKey);  return sha256_HMAC.doFinal(byteCipherText);}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  public boolean shouldCreateVPDCalls(AbstractSession session){  if (createVPDCalls) {    if (!session.getPlatform().supportsVPD()) {      throw ValidationException.vpdNotSupported(session.getPlatform().getClass().getName());    }  }  return createVPDCalls;}  }
class C{  protected void assertEquals(FieldInfos expected,FieldInfos actual){  assertEquals(expected.size(),actual.size());  for (  FieldInfo expectedField : expected) {    FieldInfo actualField=actual.fieldInfo(expectedField.number);    assertNotNull(actualField);    assertEquals(expectedField,actualField);  }}  }
class C{  @Override void populateRecompilationChoices(){  int maxOptLevel=Controller.options.DERIVED_MAX_OPT_LEVEL;  int maxCompiler=CompilerDNA.getCompilerConstant(maxOptLevel);  allOptLevelChoices=new RecompileOptChoice[maxOptLevel + 1];  for (int optLevel=0; optLevel <= maxOptLevel; optLevel++) {    allOptLevelChoices[optLevel]=new RecompileOptChoice(optLevel);  }  createViableOptionLookupTable(maxCompiler);}  }
class C{  public File loggingFile(String path){  return dataFile(LOGGING_DIR + "/" + path);}  }
class C{  private boolean matchLocation(CodeSource that){  if (location == null)   return true;  if ((that == null) || (that.location == null))   return false;  if (location.equals(that.location))   return true;  if (!location.getProtocol().equalsIgnoreCase(that.location.getProtocol()))   return false;  int thisPort=location.getPort();  if (thisPort != -1) {    int thatPort=that.location.getPort();    int port=thatPort != -1 ? thatPort : that.location.getDefaultPort();    if (thisPort != port)     return false;  }  if (location.getFile().endsWith("/-")) {    String thisPath=location.getFile().substring(0,location.getFile().length() - 1);    if (!that.location.getFile().startsWith(thisPath))     return false;  } else   if (location.getFile().endsWith("/*")) {    int last=that.location.getFile().lastIndexOf('/');    if (last == -1)     return false;    String thisPath=location.getFile().substring(0,location.getFile().length() - 1);    String thatPath=that.location.getFile().substring(0,last + 1);    if (!thatPath.equals(thisPath))     return false;  } else {    if ((!that.location.getFile().equals(location.getFile())) && (!that.location.getFile().equals(location.getFile() + "/"))) {      return false;    }  }  if (location.getRef() != null && !location.getRef().equals(that.location.getRef())) {    return false;  }  String thisHost=location.getHost();  String thatHost=that.location.getHost();  if (thisHost != null) {    if (("".equals(thisHost) || "localhost".equals(thisHost)) && ("".equals(thatHost) || "localhost".equals(thatHost))) {    } else     if (!thisHost.equals(thatHost)) {      if (thatHost == null) {        return false;      }      if (this.sp == null) {        this.sp=new SocketPermission(thisHost,"resolve");      }      if (that.sp == null) {        that.sp=new SocketPermission(thatHost,"resolve");      }      if (!this.sp.implies(that.sp)) {        return false;      }    }  }  return true;}  }
class C{  private static void computeF(BitSet[] constraints,int[] f){  for (int i=0; i < f.length; i++) {    BitSet set=new BitSet();    set.or(constraints[i]);    int subCladeCount=0;    for (int j=i + 1; j < f.length; j++) {      int parent=parent(constraints,j);      if (parent == i) {        subCladeCount+=1;        set.andNot(constraints[j]);      }    }    f[i]=set.cardinality() + subCladeCount - 2;  }}  }
class C{  private boolean isPrimitiveKey(Class[] dependents){  if (dependents != null && dependents.length > 0) {    Class parent=dependents[0].getSuperclass();    Class type=dependents[0];    if (parent != null) {      if (parent.isEnum()) {        return true;      }      if (type.isEnum()) {        return true;      }    }    return isPrimitive(type);  }  return false;}  }
class C{  public void ancestorMoved(HierarchyEvent e){  ((HierarchyBoundsListener)a).ancestorMoved(e);  ((HierarchyBoundsListener)b).ancestorMoved(e);}  }
class C{  public void check(){}  }
class C{  private static int resolveGravity(int gravity,int width,int height,int intrinsicWidth,int intrinsicHeight){  if (!Gravity.isHorizontal(gravity)) {    if (width < 0) {      gravity|=Gravity.FILL_HORIZONTAL;    } else {      gravity|=Gravity.START;    }  }  if (!Gravity.isVertical(gravity)) {    if (height < 0) {      gravity|=Gravity.FILL_VERTICAL;    } else {      gravity|=Gravity.TOP;    }  }  if (width < 0 && intrinsicWidth < 0) {    gravity|=Gravity.FILL_HORIZONTAL;  }  if (height < 0 && intrinsicHeight < 0) {    gravity|=Gravity.FILL_VERTICAL;  }  return gravity;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:09.416 -0500",hash_original_method="28ECC4752D5D2759E8F75423B7F304E1",hash_generated_method="BBB3090F62ED648158D9F2807E79B389") private void init(SSLParametersImpl sslParameters,String[] enabledProtocols,String[] enabledCipherSuites,String[] enabledCompressionMethods) throws IOException {  this.sslParameters=sslParameters;  this.enabledProtocols=enabledProtocols;  this.enabledCipherSuites=enabledCipherSuites;  this.enabledCompressionMethods=enabledCompressionMethods;}  }
class C{  public boolean isError(){  return fSeverity == RefactoringStatus.ERROR;}  }
class C{  public void printRuleSet(final EvolutionState state,final PrintWriter writer){  writer.println(N_RULES + Code.encode(numRules));  for (int i=0; i < numRules; i++)   rules[i].printRule(state,writer);}  }
class C{  public static boolean checkDir(final String dirName){  return checkDir(new File(dirName));}  }
class C{  public DefaultModalGraphMouse(float in,float out){  super(in,out);  loadPlugins();  setModeKeyListener(new ModeKeyAdapter(this));}  }
class C{  public void pln(String s) throws IOException {  p(s);  pln();}  }
class C{  private static int hash(int h){  h+=(h << 15) ^ 0xffffcd7d;  h^=(h >>> 10);  h+=(h << 3);  h^=(h >>> 6);  h+=(h << 2) + (h << 14);  return h ^ (h >>> 16);}  }
class C{  public Builder withGravity(int gravity){  this.gravity=gravity;  return this;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.path_animations);  mCanvasView=(CanvasView)findViewById(R.id.canvas);  mCanvasView.addOnLayoutChangeListener(this);  ((RadioGroup)findViewById(R.id.path_animation_type)).setOnCheckedChangeListener(this);}  }
class C{  public double nextDouble(){  double rand=randomGenerator.raw();  if (this.cdf == null)   return rand;  int nBins=cdf.length - 1;  int nbelow=0;  int nabove=nBins;  while (nabove > nbelow + 1) {    int middle=(nabove + nbelow + 1) >> 1;    if (rand >= cdf[middle])     nbelow=middle; else     nabove=middle;  }  if (this.interpolationType == NO_INTERPOLATION) {    return ((double)nbelow) / nBins;  } else   if (this.interpolationType == LINEAR_INTERPOLATION) {    double binMeasure=cdf[nabove] - cdf[nbelow];    if (binMeasure == 0.0) {      return (nbelow + 0.5) / nBins;    }    double binFraction=(rand - cdf[nbelow]) / binMeasure;    return (nbelow + binFraction) / nBins;  } else   throw new InternalError();}  }
class C{  void materialize(){  if (cachefill < 0) {    return;  }  double min=Double.MAX_VALUE, max=Double.MIN_VALUE;  for (int i=0; i < cachefill; i++) {    min=Math.min(min,cachec[i]);    max=Math.max(max,cachec[i]);  }  LinearScale scale=new LinearScale(min,max);  min=scale.getMin();  max=scale.getMax();  this.base=min;  this.max=max;  this.binsize=(max - min) / this.destsize;  this.data=new short[this.destsize << 1];  size=destsize;  final int end=cachefill;  cachefill=-1;  for (int i=0; i < end; i++) {    increment(cachec[i],cachev[i]);  }  cachec=null;  cachev=null;}  }
class C{  static void checkTypeRefAndPath(int typeRef,TypePath typePath){  int mask=0;switch (typeRef >>> 24) {case TypeReference.CLASS_TYPE_PARAMETER:case TypeReference.METHOD_TYPE_PARAMETER:case TypeReference.METHOD_FORMAL_PARAMETER:    mask=0xFFFF0000;  break;case TypeReference.FIELD:case TypeReference.METHOD_RETURN:case TypeReference.METHOD_RECEIVER:case TypeReference.LOCAL_VARIABLE:case TypeReference.RESOURCE_VARIABLE:case TypeReference.INSTANCEOF:case TypeReference.NEW:case TypeReference.CONSTRUCTOR_REFERENCE:case TypeReference.METHOD_REFERENCE:mask=0xFF000000;break;case TypeReference.CLASS_EXTENDS:case TypeReference.CLASS_TYPE_PARAMETER_BOUND:case TypeReference.METHOD_TYPE_PARAMETER_BOUND:case TypeReference.THROWS:case TypeReference.EXCEPTION_PARAMETER:mask=0xFFFFFF00;break;case TypeReference.CAST:case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:mask=0xFF0000FF;break;default :throw new IllegalArgumentException("Invalid type reference sort 0x" + Integer.toHexString(typeRef >>> 24));}if ((typeRef & ~mask) != 0) {throw new IllegalArgumentException("Invalid type reference 0x" + Integer.toHexString(typeRef));}if (typePath != null) {for (int i=0; i < typePath.getLength(); ++i) {int step=typePath.getStep(i);if (step != TypePath.ARRAY_ELEMENT && step != TypePath.INNER_TYPE && step != TypePath.TYPE_ARGUMENT && step != TypePath.WILDCARD_BOUND) {throw new IllegalArgumentException("Invalid type path step " + i + " in "+ typePath);}if (step != TypePath.TYPE_ARGUMENT && typePath.getStepArgument(i) != 0) {throw new IllegalArgumentException("Invalid type path step argument for step " + i + " in "+ typePath);}}}}  }
class C{  private String extractDeclaringTypeFQN(CompletionProposal methodProposal){  char[] declaringTypeSignature=methodProposal.getDeclarationSignature();  if (declaringTypeSignature == null)   return "java.lang.Object";  return SignatureUtil.stripSignatureToFQN(String.valueOf(declaringTypeSignature));}  }
class C{  protected void toggleSelectionList(Context ctx){  if (mDrawer != null) {    if (mDrawer.switchedDrawerContent()) {      resetDrawerContent(ctx);      mSelectionListShown=false;    } else {      buildDrawerSelectionList();      mAccountSwitcherArrow.clearAnimation();      ViewCompat.animate(mAccountSwitcherArrow).rotation(180).start();      mSelectionListShown=true;    }  }}  }
class C{  final long internalNextLong(long origin,long bound){  long r=mix64(nextSeed());  if (origin < bound) {    long n=bound - origin, m=n - 1;    if ((n & m) == 0L)     r=(r & m) + origin; else     if (n > 0L) {      for (long u=r >>> 1; u + m - (r=u % n) < 0L; u=mix64(nextSeed()) >>> 1)       ;      r+=origin;    } else {      while (r < origin || r >= bound)       r=mix64(nextSeed());    }  }  return r;}  }
class C{  protected void reset(){  super.reset();  String[] titleString=grep.parse("(?s).*#!\\[([^\n\r]*?)\\].*",text());  if (titleString == null) {    title=null;  } else {    title=titleString[0];  }  String[] descString=grep.parse("(?s).*#!>>(.*)#!<<.*",text());  if (descString == null) {    description=null;  } else {    description=descString[0].trim().split("\n");  }  for (int i=0; description != null && i < description.length; i++) {    description[i]=description[i].trim();    if (!description[i].startsWith("#!")) {      description=null;    } else {      description[i]=description[i].replaceFirst("#!","");    }  }  section=-1;  annotations.clear();}  }
class C{  public void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs) {    if (null != m_countMatchPattern)     m_countMatchPattern.getExpression().callVisitors(m_countMatchPattern,visitor);    if (null != m_fromMatchPattern)     m_fromMatchPattern.getExpression().callVisitors(m_fromMatchPattern,visitor);    if (null != m_valueExpr)     m_valueExpr.getExpression().callVisitors(m_valueExpr,visitor);    if (null != m_format_avt)     m_format_avt.callVisitors(visitor);    if (null != m_groupingSeparator_avt)     m_groupingSeparator_avt.callVisitors(visitor);    if (null != m_groupingSize_avt)     m_groupingSize_avt.callVisitors(visitor);    if (null != m_lang_avt)     m_lang_avt.callVisitors(visitor);    if (null != m_lettervalue_avt)     m_lettervalue_avt.callVisitors(visitor);  }  super.callChildVisitors(visitor,callAttrs);}  }
class C{  @Override protected void doAction(){  kseFrame.setKeyStoreTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);}  }
class C{  public boolean useHeloEhloEnforcement(){  return false;}  }
class C{  public void shrink(int maximumCapacity){  if (maximumCapacity < 0)   throw new IllegalArgumentException("maximumCapacity must be >= 0: " + maximumCapacity);  if (size > maximumCapacity)   maximumCapacity=size;  if (capacity <= maximumCapacity)   return;  maximumCapacity=nextPowerOfTwo(maximumCapacity);  resize(maximumCapacity);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public boolean supportsBLOB(){  return true;}  }
class C{  @Override public SpatialSampledGraphProjection<G,V,E> createGraph(G delegate){  return new SpatialSampledGraphProjection<G,V,E>(delegate);}  }
class C{  public RegisterSpecSet withOffset(int delta){  int len=specs.length;  RegisterSpecSet result=new RegisterSpecSet(len + delta);  for (int i=0; i < len; i++) {    RegisterSpec spec=specs[i];    if (spec != null) {      result.put(spec.withOffset(delta));    }  }  result.size=size;  if (isImmutable()) {    result.setImmutable();  }  return result;}  }
class C{  protected void sendSticker(Sticker sticker){  Message message=new Message();  message.fillMessageForSend(activeUser,sticker.fullPic,Const.MessageType.TYPE_STICKER,null,null);  if (SocketManager.getInstance().isSocketConnect()) {    JSONObject emitMessage=EmitJsonCreator.createEmitSendMessage(message);    SocketManager.getInstance().emitMessage(Const.EmitKeyWord.SEND_MESSAGE,emitMessage);  } else {    unSentMessageList.add(message);  }  onMessageSent(message);}  }
class C{  @Override public void initVertex(final IGASContext<BFS.VS,BFS.ES,Void> ctx,final IGASState<BFS.VS,BFS.ES,Void> state,final Value u){  state.getState(u).visit(0,null);}  }
class C{  private void insert(float sample){  mBuffer[mBufferPointer]=sample;  mBufferPointer++;  mBufferPointer=mBufferPointer % mBufferSize;}  }
class C{  public Bitmap put(String key,Bitmap value){  return cache.put(key,value);}  }
class C{  private BasicBlockLE _createBBLE(int bcIndex,Operand[] simLocals,BasicBlockLE parent,boolean left){  BasicBlockLE newBBLE=null;  if (handlerPCs != null) {    for (int i=0; i < handlerPCs.length; i++) {      if (handlerPCs[i] == bcIndex) {        if (newBBLE == null) {          newBBLE=new HandlerBlockLE(bcIndex,gc.getInlineSequence(),exceptionTypes[i],gc.getTemps(),gc.getMethod().getOperandWords(),gc.getCfg());          ((HandlerBlockLE)newBBLE).entryBlock.firstRealInstruction().setPosition(gc.getInlineSequence());        } else {          ((HandlerBlockLE)newBBLE).addCaughtException(exceptionTypes[i]);        }      }    }  }  if (newBBLE == null) {    newBBLE=new BasicBlockLE(bcIndex,gc.getInlineSequence(),gc.getCfg());  }  newBBLE.max=exceptionEndRange(bcIndex);  if (DBG_BBSET)   db("Created " + newBBLE);  treeInsert(parent,newBBLE,left);  initializeExceptionHandlers(newBBLE,simLocals);  return newBBLE;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.INTERFACE_BODY___INTERFACE_MEMBER_DECLARATION_1:    return interfaceMemberDeclaration_1 != null && !interfaceMemberDeclaration_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private void scope(Annotation label){  if (label != null) {    declaration=(NamespaceList)label;  }}  }
class C{  <I>String toJson(I type) throws IOException {  return MAPPER.writeValueAsString(type);}  }
class C{  private LogPolicy(){  addPolicy(LOG_POLICY_SHOW_CLASS,Boolean.TRUE);  addPolicy(LOG_POLICY_SHOW_LEVEL,Boolean.TRUE);  addPolicy(LOG_POLICY_SHOW_CLASS,Boolean.TRUE);  addPolicy(LOG_POLICY_SHOW_MESSAGE,Boolean.TRUE);  addPolicy(LOG_POLICY_SHOW_METHOD,Boolean.TRUE);  addPolicy(LOG_POLICY_SHOW_SOURCE,Boolean.TRUE);  addPolicy(LOG_POLICY_SHOW_THREAD,Boolean.TRUE);  addPolicy(LOG_POLICY_SHOW_THREAD_ID,Boolean.TRUE);  String df=LogManager.getLogManager().getProperty(LOG_POLICY_DATE_FORMAT);  if (df != null) {    if (!df.equals("")) {      dateFormat=new SimpleDateFormat(df);    }  } else {    dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  }}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  private RhinoScriptBuilder initScriptBuilder(){  try {    return RhinoScriptBuilder.newChain().evaluateChain(getStreamForBase2(),"base2.min.js").evaluateChain(getStreamForPacker(),"packer.min.js");  } catch (  final IOException ex) {    throw new IllegalStateException("Failed reading init script",ex);  }}  }
class C{  @Deprecated public static int dragViewToX(ActivityInstrumentationTestCase test,View v,int gravity,int toX){  return dragViewToX((InstrumentationTestCase)test,v,gravity,toX);}  }
class C{  public static void main(String args[]){  long start=System.currentTimeMillis();  String[] arguments=null;  String cleFile=null;  if (args.length == 1) {    arguments=args;  } else   if (args.length == 2) {    arguments=new String[1];    arguments[0]=args[0];    cleFile=args[1];  } else {    log.error("only one or two arguments are allowed.");    System.exit(-1);  }  MATSim4UrbanSimZone m4u=new MATSim4UrbanSimZone(arguments,cleFile);  m4u.run();  m4u.matsim4UrbanSimShutdown();  MATSim4UrbanSimZone.isSuccessfulMATSimRun=Boolean.TRUE;  log.info("Computation took " + ((System.currentTimeMillis() - start) / 60000) + " minutes. Computation done!");}  }
class C{  public final void insertElementAt(Object value,int at){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    Object newMap[]=new Object[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  if (at <= (m_firstFree - 1)) {    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);  }  m_map[at]=value;  m_firstFree++;}  }
class C{  private RuntimeException launderThrowable(final Throwable t) throws Exception {  try {  }  finally {  }  if (t instanceof RuntimeException) {    return (RuntimeException)t;  } else   if (t instanceof Error) {    throw (Error)t;  } else   if (t instanceof Exception) {    throw (Exception)t;  } else   throw new RuntimeException(t);}  }
class C{  public static Statement rowCount(){  return produce(Function.count());}  }
class C{  @Override public void onRefresh(){  Calendar cal=Calendar.getInstance(TimeZone.getDefault());  Date currentLocalTime=cal.getTime();  DateFormat date=new SimpleDateFormat("hh:mm:ss a");  date.setTimeZone(TimeZone.getDefault());  textView.setText(date.format(currentLocalTime));  swipeRefreshLayout.setRefreshing(false);}  }
class C{  public void emitDirect(int taskId,List<Object> tuple,Object messageId){  emitDirect(taskId,Utils.DEFAULT_STREAM_ID,tuple,messageId);}  }
class C{  public double pointToLineDistance(Entry startEntry,Entry endEntry,Entry entryPoint){  double normalLength=Math.sqrt((endEntry.getXIndex() - startEntry.getXIndex()) * (endEntry.getXIndex() - startEntry.getXIndex()) + (endEntry.getVal() - startEntry.getVal()) * (endEntry.getVal() - startEntry.getVal()));  return Math.abs((entryPoint.getXIndex() - startEntry.getXIndex()) * (endEntry.getVal() - startEntry.getVal()) - (entryPoint.getVal() - startEntry.getVal()) * (endEntry.getXIndex() - startEntry.getXIndex())) / normalLength;}  }
class C{  @Override public Point drawingToView(Point2D.Double p){  return new Point((int)(p.x * scaleFactor) - translation.x,(int)(p.y * scaleFactor) - translation.y);}  }
class C{  public static void main(String... args) throws Exception {  Class.forName("org.h2.Driver");  Connection conn=DriverManager.getConnection("jdbc:h2:mem:");  Statement stat;  stat=conn.createStatement();  stat.execute("create table test(id int primary key, name varchar)");  stat.execute("create view test_view as select * from test");  stat.execute("create trigger t_test_view instead of " + "insert, update, delete on test_view for each row " + "call \"" + UpdatableView.class.getName() + "\"");  stat.execute("insert into test_view values(1, 'Hello'), (2, 'World')");  stat.execute("update test_view set name = 'Hallo' where id = 1");  stat.execute("delete from test_view where id = 2");  System.out.println("table test:");  ResultSet rs;  rs=stat.executeQuery("select * from test");  while (rs.next()) {    System.out.println(rs.getInt(1) + " " + rs.getString(2));  }  System.out.println();  System.out.println("test_view:");  rs=stat.executeQuery("select * from test_view");  while (rs.next()) {    System.out.println(rs.getInt(1) + " " + rs.getString(2));  }  conn.close();}  }
class C{  protected void fillNotificationParameters(final OrderEvent orderEvent,final String emailTempateName,final String... emailsAddresses){  fillNotificationParameters(orderEvent,emailTempateName,null,emailsAddresses);}  }
class C{  public void addStateHistoryEntry(double time,double allocatedMips,double requestedMips,boolean isInMigration){  VmStateHistoryEntry newState=new VmStateHistoryEntry(time,allocatedMips,requestedMips,isInMigration);  if (!getStateHistory().isEmpty()) {    VmStateHistoryEntry previousState=getStateHistory().get(getStateHistory().size() - 1);    if (previousState.getTime() == time) {      getStateHistory().set(getStateHistory().size() - 1,newState);      return;    }  }  getStateHistory().add(newState);}  }
class C{  public NonUniqueBusinessKeyException(String message){  super(message);}  }
class C{  public long failureDetectionTimeout(){  return failureDetectionTimeout;}  }
class C{  public static Object transformPreserveNull(JsonNode node){  if (node instanceof NullNode) {    return null;  }  if (node instanceof MissingNode) {    return null;  }  if (node instanceof IntNode) {    return ((IntNode)node).intValue();  }  if (node instanceof BigIntegerNode) {    return ((BigIntegerNode)node).bigIntegerValue();  }  if (node instanceof BinaryNode) {    return ((BinaryNode)node).binaryValue();  }  if (node instanceof BooleanNode) {    return ((BooleanNode)node).booleanValue();  }  if (node instanceof DecimalNode) {    return ((DecimalNode)node).decimalValue();  }  if (node instanceof DoubleNode) {    return ((DoubleNode)node).doubleValue();  }  if (node instanceof LongNode) {    return ((LongNode)node).longValue();  }  if (node instanceof NumericNode) {    return ((NumericNode)node).numberValue();  }  if (node instanceof POJONode) {    return ((POJONode)node).getPojo();  }  if (node instanceof TextNode) {    return ((TextNode)node).textValue();  }  if (node instanceof ArrayNode) {    List<Object> resultList=new ArrayList<>();    for (    JsonNode subnode : node) {      Object result=transformPreserveNull(subnode);      if (result != null) {        resultList.add(result);      }    }    return resultList;  }  if (node instanceof ObjectNode) {    Map<String,Object> resultMap=new HashMap<String,Object>();    Iterator<Map.Entry<String,JsonNode>> iterator=node.fields();    while (iterator.hasNext()) {      Map.Entry<String,JsonNode> subnodeEntry=iterator.next();      Object result=transformPreserveNull(subnodeEntry.getValue());      resultMap.put(subnodeEntry.getKey(),result);    }    return resultMap;  }  return null;}  }
class C{  public static void runOnUIThread(final boolean asynch,final Runnable runnable){  runOnUIThread(getDisplay(),asynch,runnable);}  }
class C{  @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.741 -0500",hash_original_method="8DFB6DF41A3F3D055DAE389A113EB960",hash_generated_method="64C121B97B5278B1BF2017E99C88A8EB") protected static int toDigit(char ch,int index) throws DecoderException {  int digit=Character.digit(ch,16);  if (digit == -1) {    throw new DecoderException("Illegal hexadecimal charcter " + ch + " at index "+ index);  }  return digit;}  }
class C{  void initView(View contentView){  superImageView=(SuperImageView)contentView.findViewById(R.id.iv_pic);  rootView=(FrameLayout)contentView.findViewById(R.id.container);  RelativeLayout.LayoutParams rlLayoutParams=new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);  mRectView=new AvatarRectView(mContext,screenWidth - margin * 2);  rootView.addView(mRectView,1,rlLayoutParams);}  }
class C{  public static Impp sip(String handle){  return new Impp(SIP,handle);}  }
class C{  @Override public String toString(){  java.lang.StringBuffer sb=new java.lang.StringBuffer();  sb.append("(");  sb.append(this.minLatitude.toString());  sb.append(", ");  sb.append(this.minLongitude.toString());  sb.append(")");  sb.append(", ");  sb.append("(");  sb.append(this.maxLatitude.toString());  sb.append(", ");  sb.append(this.maxLongitude.toString());  sb.append(")");  return sb.toString();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 98) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public TableView(Element elem){  super(elem,View.Y_AXIS);  rows=new Vector<RowView>();  gridValid=false;  captionIndex=-1;  totalColumnRequirements=new SizeRequirements();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_METHOD_BODY_1__PRECONDITION_1:    return getPrecondition_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public DefaultHeatMapDataset(int xSamples,int ySamples,double minX,double maxX,double minY,double maxY){  if (xSamples < 1) {    throw new IllegalArgumentException("Requires 'xSamples' > 0");  }  if (ySamples < 1) {    throw new IllegalArgumentException("Requires 'ySamples' > 0");  }  if (Double.isInfinite(minX) || Double.isNaN(minX)) {    throw new IllegalArgumentException("'minX' cannot be INF or NaN.");  }  if (Double.isInfinite(maxX) || Double.isNaN(maxX)) {    throw new IllegalArgumentException("'maxX' cannot be INF or NaN.");  }  if (Double.isInfinite(minY) || Double.isNaN(minY)) {    throw new IllegalArgumentException("'minY' cannot be INF or NaN.");  }  if (Double.isInfinite(maxY) || Double.isNaN(maxY)) {    throw new IllegalArgumentException("'maxY' cannot be INF or NaN.");  }  this.xSamples=xSamples;  this.ySamples=ySamples;  this.minX=minX;  this.maxX=maxX;  this.minY=minY;  this.maxY=maxY;  this.zValues=new double[xSamples][];  for (int x=0; x < xSamples; x++) {    this.zValues[x]=new double[ySamples];  }}  }
class C{  @Override public boolean removeAll(Collection<?> that){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public void testAbnormalInvokeAllCollection(){  testAbnormalInvokeAllCollection(mainPool());}  }
class C{  public Builder convertDurationsTo(TimeUnit durationUnit){  this.durationUnit=durationUnit;  return this;}  }
class C{  public Boolean isRTPMulticast(){  return rtpMulticast;}  }
class C{  public static String stripFunctionTags(String label){  if (label.indexOf("-") > 0)   return label.substring(0,label.indexOf("-")); else   return label;}  }
class C{  private void selectObjects(ISelection savedSelections){  List<Object> selectedElements=new ArrayList<Object>();  if (savedSelections != null && savedSelections instanceof IStructuredSelection) {    IStructuredSelection structuredSelection=((IStructuredSelection)savedSelections);    for (    Object selection : structuredSelection.toList()) {      if (selection instanceof TreeElement<?,?>) {        TreeElement<?,?> element=(TreeElement<?,?>)selection;        TreeElement<?,?> newTreeElement=((IndicatorTreeElementContentProvider)fContentProvider).findTreeElement(element.getData());        if (newTreeElement != null) {          selectedElements.add(newTreeElement);        }      }    }  }  if (!selectedElements.isEmpty()) {    getViewer().setSelection(new StructuredSelection(selectedElements),true);  }}  }
class C{  public static int EXDEV(){  return Errno.EXDEV.intValue();}  }
class C{  public static <T,D>Mono<T> using(Callable<? extends D> resourceSupplier,Function<? super D,? extends Mono<? extends T>> sourceSupplier,Consumer<? super D> resourceCleanup,boolean eager){  return onAssembly(new MonoUsing<>(resourceSupplier,sourceSupplier,resourceCleanup,eager));}  }
class C{  public BigDecimal calculateMutationFee(BigDecimal partyValue,BigDecimal departmentValue){  BigDecimal documentValue=BigDecimal.ZERO;  BigDecimal mutationFee=BigDecimal.ZERO;  documentValue=(partyValue.compareTo(departmentValue) > 0 ? partyValue : departmentValue);  if (documentValue.compareTo(BigDecimal.ZERO) > 0) {    BigDecimal excessDocValue=BigDecimal.ZERO;    BigDecimal multiplicationFactor=BigDecimal.ZERO;    MutationFeeDetails mutationFeeDetails=(MutationFeeDetails)basicPropertyService.find("from MutationFeeDetails where lowLimit <= ? and (highLimit is null OR highLimit >= ?)",documentValue,documentValue);    if (mutationFeeDetails != null) {      if (mutationFeeDetails.getFlatAmount() != null && mutationFeeDetails.getFlatAmount().compareTo(BigDecimal.ZERO) > 0) {        if (mutationFeeDetails.getIsRecursive().toString().equalsIgnoreCase("N")) {          mutationFee=mutationFeeDetails.getFlatAmount();        } else {          excessDocValue=documentValue.subtract(mutationFeeDetails.getLowLimit()).add(BigDecimal.ONE);          multiplicationFactor=excessDocValue.divide(mutationFeeDetails.getRecursiveFactor(),BigDecimal.ROUND_CEILING);          mutationFee=mutationFeeDetails.getFlatAmount().add(multiplicationFactor.multiply(mutationFeeDetails.getRecursiveAmount()));        }      }      if (mutationFeeDetails.getPercentage() != null && mutationFeeDetails.getPercentage().compareTo(BigDecimal.ZERO) > 0) {        if (mutationFeeDetails.getIsRecursive().toString().equalsIgnoreCase("N")) {          mutationFee=(documentValue.multiply(mutationFeeDetails.getPercentage())).divide(PropertyTaxConstants.BIGDECIMAL_100);        }      }    }  }  return mutationFee.setScale(0,BigDecimal.ROUND_HALF_UP);}  }
class C{  public static int computeLazyFieldSizeNoTag(final LazyField value){  final int size=value.getSerializedSize();  return computeRawVarint32Size(size) + size;}  }
class C{  void generateBarcodeLogic(String msg,int errorCorrectionLevel) throws WriterException {  int errorCorrectionCodeWords=PDF417ErrorCorrection.getErrorCorrectionCodewordCount(errorCorrectionLevel);  String highLevel=PDF417HighLevelEncoder.encodeHighLevel(msg,compaction);  int sourceCodeWords=highLevel.length();  int[] dimension=determineDimensions(sourceCodeWords,errorCorrectionCodeWords);  int cols=dimension[0];  int rows=dimension[1];  int pad=getNumberOfPadCodewords(sourceCodeWords,errorCorrectionCodeWords,cols,rows);  if (sourceCodeWords + errorCorrectionCodeWords + 1 > 929) {    throw new WriterException("Encoded message contains to many code words, message to big (" + msg.length() + " bytes)");  }  int n=sourceCodeWords + pad + 1;  StringBuilder sb=new StringBuilder(n);  sb.append((char)n);  sb.append(highLevel);  for (int i=0; i < pad; i++) {    sb.append((char)900);  }  String dataCodewords=sb.toString();  String ec=PDF417ErrorCorrection.generateErrorCorrection(dataCodewords,errorCorrectionLevel);  String fullCodewords=dataCodewords + ec;  barcodeMatrix=new BarcodeMatrix(rows,cols);  encodeLowLevel(fullCodewords,cols,rows,errorCorrectionLevel,barcodeMatrix);}  }
class C{  public void addTableModelListener(TableModelListener l){  listener.add(l);}  }
class C{  @Override public int size(){  return this._set.size();}  }
class C{  public static boolean slowStringComparison(String givenSignature,String computedSignature){  if (null == givenSignature || null == computedSignature || givenSignature.length() != computedSignature.length())   return false;  int n=computedSignature.length();  boolean signaturesMatch=true;  for (int i=0; i < n; i++) {    signaturesMatch&=(computedSignature.charAt(i) == givenSignature.charAt(i));  }  return signaturesMatch;}  }
class C{  protected NettyConnection removeConnection(Channel channel){  return connections.remove(channel);}  }
class C{  public static void main(String[] ops){  double[] firstRow={10,5,20};  double[] secondRow={2,10,6};  double[] thirdRow={5,10,10};  double[][] matrix=new double[3][0];  matrix[0]=firstRow;  matrix[1]=secondRow;  matrix[2]=thirdRow;  for (int i=0; i < matrix.length; i++) {    for (int j=0; j < matrix[i].length; j++) {      System.out.print(matrix[i][j] + " ");    }    System.out.println();  }  System.out.println("Chi-squared probability: " + ContingencyTables.chiSquared(matrix,false));  System.out.println("Chi-squared value: " + ContingencyTables.chiVal(matrix,false));  System.out.println("Cochran's criterion fullfilled: " + ContingencyTables.cochransCriterion(matrix));  System.out.println("Cramer's V: " + ContingencyTables.CramersV(matrix));  System.out.println("Entropy of first row: " + ContingencyTables.entropy(firstRow));  System.out.println("Entropy conditioned on columns: " + ContingencyTables.entropyConditionedOnColumns(matrix));  System.out.println("Entropy conditioned on rows: " + ContingencyTables.entropyConditionedOnRows(matrix));  System.out.println("Entropy conditioned on rows (with Laplace): " + ContingencyTables.entropyConditionedOnRows(matrix,matrix,3));  System.out.println("Entropy of rows: " + ContingencyTables.entropyOverRows(matrix));  System.out.println("Entropy of columns: " + ContingencyTables.entropyOverColumns(matrix));  System.out.println("Gain ratio: " + ContingencyTables.gainRatio(matrix));  System.out.println("Negative log2 of multiple hypergeometric probability: " + ContingencyTables.log2MultipleHypergeometric(matrix));  System.out.println("Symmetrical uncertainty: " + ContingencyTables.symmetricalUncertainty(matrix));  System.out.println("Tau value: " + ContingencyTables.tauVal(matrix));  double[][] newMatrix=new double[3][3];  newMatrix[0][0]=1;  newMatrix[0][1]=0;  newMatrix[0][2]=1;  newMatrix[1][0]=0;  newMatrix[1][1]=0;  newMatrix[1][2]=0;  newMatrix[2][0]=1;  newMatrix[2][1]=0;  newMatrix[2][2]=1;  System.out.println("Matrix with empty row and column: ");  for (int i=0; i < newMatrix.length; i++) {    for (int j=0; j < newMatrix[i].length; j++) {      System.out.print(newMatrix[i][j] + " ");    }    System.out.println();  }  System.out.println("Reduced matrix: ");  newMatrix=ContingencyTables.reduceMatrix(newMatrix);  for (int i=0; i < newMatrix.length; i++) {    for (int j=0; j < newMatrix[i].length; j++) {      System.out.print(newMatrix[i][j] + " ");    }    System.out.println();  }}  }
class C{  public ParallelAnimator add(Combinable combinable){  combinableList.add(combinable);  return this;}  }
class C{  public void exitAnimation(final Runnable endAction){  TimeInterpolator sInterpolator=new AccelerateInterpolator();  imageView.animate().setDuration(ANIM_DURATION).scaleX(mWidthScale).scaleY(mHeightScale).translationX(mLeftDelta).translationY(mTopDelta).setInterpolator(sInterpolator).withEndAction(endAction);  ObjectAnimator bgAnim=ObjectAnimator.ofInt(colorDrawable,"alpha",0);  bgAnim.setDuration(ANIM_DURATION);  bgAnim.start();}  }
class C{  public int compareByFragmentType(final SourceFragment other){  if ((null == other)) {    return (-1);  }  SourceFragmentType _sourceFragmentType=this.getSourceFragmentType();  boolean _tripleEquals=(null == _sourceFragmentType);  if (_tripleEquals) {    int _xifexpression=(int)0;    SourceFragmentType _sourceFragmentType_1=other.getSourceFragmentType();    boolean _tripleEquals_1=(null == _sourceFragmentType_1);    if (_tripleEquals_1) {      _xifexpression=0;    } else {      _xifexpression=1;    }    return _xifexpression;  }  SourceFragmentType _sourceFragmentType_2=this.getSourceFragmentType();  SourceFragmentType _sourceFragmentType_3=other.getSourceFragmentType();  return _sourceFragmentType_2.compareTo(_sourceFragmentType_3);}  }
class C{  public static NonUniqueBusinessKeyException convertToApi(org.oscm.internal.types.exception.NonUniqueBusinessKeyException oldEx){  org.oscm.internal.types.exception.beans.DomainObjectExceptionBean bean=(org.oscm.internal.types.exception.beans.DomainObjectExceptionBean)getFaultInfo(oldEx);  DomainObjectExceptionBean v13Bean=convertBeanToApi(bean,DomainObjectExceptionBean.class);  if (bean != null) {    DomainObjectException.ClassEnum v13ClassEnum=EnumConverter.convert(bean.getClassEnum(),DomainObjectException.ClassEnum.class);    v13Bean.setClassEnum(v13ClassEnum);  }  return newApiException(NonUniqueBusinessKeyException.class,getExceptionMessage(oldEx),v13Bean,oldEx.getStackTrace());}  }
class C{  public static UIAddress fromSatoshiStyle(String address) throws HyperLedgerException {  try {    Network network=Network.PRODUCTION;    Address.Type type=Address.Type.COMMON;    byte[] raw=ByteUtils.fromBase58(address);    if ((raw[0] & 0xff) == 0x0) {      network=Network.PRODUCTION;      type=Address.Type.COMMON;    }    if ((raw[0] & 0xff) == 5) {      network=Network.PRODUCTION;      type=Address.Type.P2SH;    }    if ((raw[0] & 0xff) == 0x6f) {      network=Network.TEST;      type=Address.Type.COMMON;    }    if ((raw[0] & 0xff) == 196) {      network=Network.TEST;      type=Address.Type.P2SH;    }    byte[] check=Hash.hash(raw,0,raw.length - 4);    for (int i=0; i < 4; ++i) {      if (check[i] != raw[raw.length - 4 + i]) {        throw new HyperLedgerException("Address checksum mismatch");      }    }    byte[] keyDigest=new byte[raw.length - 5];    System.arraycopy(raw,1,keyDigest,0,raw.length - 5);    return new UIAddress(network,type,keyDigest);  } catch (  Exception e) {    throw new HyperLedgerException(e);  }}  }
class C{  protected void generatePseudoKnightMoves(PriorityMoveList moves){  long fromBB=getPieceBB(colorToMove,KNIGHT);  while (fromBB != 0) {    int fromSquare=bitscanForward(fromBB);    long toBB=knightMove(fromSquare) & getNotColorToMoveBB();    while (toBB != 0) {      int toSquare=bitscanForward(toBB);      int contents=getPieceWithPromoteMask(toSquare);      addMove(new Move(fromSquare,toSquare,getPieceWithPromoteMask(fromSquare),colorToMove,contents),moves);      toBB=bitscanClear(toBB);      toSquare=bitscanForward(toBB);    }    fromBB=bitscanClear(fromBB);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private String createResponseUrl(final String inResponseTo,final String idpUrl,final SubjectData subject,String relayState) throws MarshallingException, IOException, WebssoClientException, NoSuchAlgorithmException {  String retval=null;  LogoutResponse samlResponse=this.createResponse(inResponseTo,idpUrl);  if (samlResponse != null) {    logger.info("SAML Response is created ");    retval=this.createResponseUrlFromLogoutResponse(samlResponse,idpUrl,relayState);  }  return retval;}  }
class C{  public void memberValuePair(int memberNameIndex) throws IOException {  write16bit(memberNameIndex);}  }
class C{  public MultiMapImpl(int maxCapacity){  _maxCapacity=maxCapacity;  int size=8;  _keys=(K[])new Object[size];  _values=(List<V>[])new List[size];  _size=0;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.INTERSECTION_TYPE_EXPRESSION___GET_TYPE_REF_AS_STRING:    return getTypeRefAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  private boolean isSubscribed(){  final SharedPreferences settings=getSharedPreferencesForCurrentUser();  return settings.getBoolean(HAS_SUBSCRIPTION,false);}  }
class C{  public static List<org.oscm.internal.vo.VOLocalizedText> convertToUpVOLocalizedText(List<org.oscm.vo.VOLocalizedText> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.internal.vo.VOLocalizedText> newVO=new ArrayList<org.oscm.internal.vo.VOLocalizedText>();  for (  org.oscm.vo.VOLocalizedText tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  protected int determineDumpNumber(){  String dumpNr=System.getProperty("MAT_HPROF_DUMP_NR");  return dumpNr == null ? 0 : Integer.parseInt(dumpNr);}  }
class C{  private void recalculateBounds(){  this.minStartIndex=-1;  this.minMiddleIndex=-1;  this.minEndIndex=-1;  this.maxStartIndex=-1;  this.maxMiddleIndex=-1;  this.maxEndIndex=-1;  for (int i=0; i < this.data.size(); i++) {    TimePeriodValue tpv=(TimePeriodValue)this.data.get(i);    updateBounds(tpv.getPeriod(),i);  }}  }
class C{  public ClusterState(Integer zkClusterStateVersion,Set<String> liveNodes,Map<String,DocCollection> collectionStates){  this.zkClusterStateVersion=zkClusterStateVersion;  this.liveNodes=new HashSet<>(liveNodes.size());  this.liveNodes.addAll(liveNodes);  this.collectionStates=new LinkedHashMap<>(collectionStates.size());  this.collectionStates.putAll(collectionStates);}  }
class C{  @Override protected ValueNode prim(ValueNode b){  assert isDuplicate();  LoopBeginNode loopBegin=original().loop().loopBegin();  if (loopBegin.isPhiAtMerge(b)) {    PhiNode phi=(PhiNode)b;    return phi.valueAt(loopBegin.forwardEnd());  } else   if (nodesReady) {    ValueNode v=getDuplicatedNode(b);    if (v == null) {      return b;    }    return v;  } else {    return b;  }}  }
class C{  public static void addProvider(final ModuleProvider provider){  if (API.moduleAPI != null)   API.moduleAPI.addProvider(provider);}  }
class C{  Attribute(AttributeKey<?> key,Object value){  this.key=Preconditions.checkNotNull(key,"key");  setValue(value);}  }
class C{  public static int singleNumNoSpace(int[] A){  int res=0;  for (int i=0; i < A.length; i++)   res^=A[i];  return res;}  }
class C{  public DateRange(double lower,double upper){  super(lower,upper);  this.lowerDate=(long)lower;  this.upperDate=(long)upper;}  }
class C{  public static String toStringUTF8(byte[] bytes){  if (bytes == null) {    return null;  }  return toStringUTF8(bytes,0,bytes.length);}  }
class C{  public static void sendPushMessageAsync(String token,String body,String deviceKey,boolean production,String googleAuthKey,String iosCertificateURL,String iosCertificatePassword,String bbUrl,String bbApp,String bbPass,String bbPort){  NetworkManager.getInstance().addToQueue(createPushMessage(token,body,production,googleAuthKey,iosCertificateURL,iosCertificatePassword,bbUrl,bbApp,bbPass,bbPort,1,deviceKey));}  }
class C{  public boolean expire(int amount){  long now=U.currentTimeMillis();  GridCacheVersion obsoleteVer=null;  int limit=(-1 != amount) ? amount : pendingEntries.sizex();  for (int cnt=limit; cnt > 0; cnt--) {    EntryWrapper e=pendingEntries.firstx();    if (e == null || e.expireTime > now)     return false;    if (pendingEntries.remove(e)) {      if (obsoleteVer == null)       obsoleteVer=cctx.versions().next();      if (log.isTraceEnabled())       log.trace("Trying to remove expired entry from cache: " + e);      boolean touch=e.ctx.isSwapOrOffheapEnabled();      GridCacheEntryEx entry=touch ? e.ctx.cache().entryEx(e.key) : e.ctx.cache().peekEx(e.key);      if (entry != null) {        while (true) {          try {            if (entry.onTtlExpired(obsoleteVer))             touch=false;            break;          } catch (          GridCacheEntryRemovedException e0) {            entry=entry.context().cache().entryEx(entry.key());            touch=true;          }        }        if (touch)         entry.context().evicts().touch(entry,null);      }    }  }  if (amount != -1) {    EntryWrapper e=pendingEntries.firstx();    return e != null && e.expireTime <= now;  }  return false;}  }
class C{  private static long CallNonvirtualLongMethod(JNIEnvironment env,int objJREF,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualLongMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Long,true);    return Reflection.unwrapLong(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public void computeKey(Interval itemInterval){  level=computeLevel(itemInterval);  interval=new Interval();  computeInterval(level,itemInterval);  while (!interval.contains(itemInterval)) {    level+=1;    computeInterval(level,itemInterval);  }}  }
class C{  @Override public void cleanUp(){  super.cleanUp();  m_Clusterer=null;  m_Evaluation=null;  m_PlotShapes=null;}  }
class C{  @Override protected void onResume(){  super.onResume();  startCameraSource();}  }
class C{  public static Condition evaluate(final String condition) throws InvalidFormulaException {  try {    return new BreakpointCondition(condition,parse(condition));  } catch (  final MaybeNullException e) {    return new BreakpointCondition(condition,null);  }catch (  final RecognitionException e) {    throw new InvalidFormulaException();  }}  }
class C{  protected ExitAction(SwingSet2 swingset){  super("ExitAction");  this.swingset=swingset;}  }
class C{  public void updateStyleElement(){  Element newstyle=cssman.makeStyleElement(document);  style.getParentNode().replaceChild(newstyle,style);  style=newstyle;}  }
class C{  protected boolean appliesPrevTransitionOnRestart(){  return false;}  }
class C{  void resetChannel(){  reset(channel);  expect(channel.getPipeline()).andReturn(pipeline).anyTimes();  expect(channel.getRemoteAddress()).andReturn(InetSocketAddress.createUnresolved("1.1.1.1",80)).anyTimes();}  }
class C{  public boolean invalidateIt(){  log.info("invalidateIt - " + toString());  return true;}  }
class C{  public static boolean isFieldDup(String variable_name){  return Variable.allVariableName.contains(" " + variable_name + " ");}  }
class C{  @Override public boolean isUndoEnabled(){  return m_UndoEnabled;}  }
class C{  public static void main(final String[] args) throws Exception {  int i=0;  int flags=ClassReader.SKIP_DEBUG;  boolean ok=true;  if (args.length < 1 || args.length > 2) {    ok=false;  }  if (ok && "-debug".equals(args[0])) {    i=1;    flags=0;    if (args.length != 2) {      ok=false;    }  }  if (!ok) {    System.err.println("Prints the ASM code to generate the given class.");    System.err.println("Usage: ASMifier [-debug] " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[i].endsWith(".class") || args[i].indexOf('\\') > -1 || args[i].indexOf('/') > -1) {    cr=new ClassReader(new FileInputStream(args[i]));  } else {    cr=new ClassReader(args[i]);  }  cr.accept(new TraceClassVisitor(null,new ASMifier(),new PrintWriter(System.out)),flags);}  }
class C{  @SuppressWarnings("deprecation") @Override public void stop(){  if (m_listenee instanceof BeanCommon) {    ((BeanCommon)m_listenee).stop();  }  if (m_ioThread != null) {    m_ioThread.interrupt();    m_ioThread.stop();    m_ioThread=null;  }  m_count=0;  m_visual.setStatic();}  }
class C{  public boolean match(TryStatement node,Object other){  if (!(other instanceof TryStatement)) {    return false;  }  TryStatement o=(TryStatement)other;switch (node.getAST().apiLevel) {case AST.JLS2_INTERNAL:case AST.JLS3:    return (safeSubtreeMatch(node.getBody(),o.getBody()) && safeSubtreeListMatch(node.catchClauses(),o.catchClauses()) && safeSubtreeMatch(node.getFinally(),o.getFinally()));}return (safeSubtreeListMatch(node.resources(),o.resources()) && safeSubtreeMatch(node.getBody(),o.getBody()) && safeSubtreeListMatch(node.catchClauses(),o.catchClauses())&& safeSubtreeMatch(node.getFinally(),o.getFinally()));}  }
class C{  public static String removeLastDelimiter(String topic){  if (topic.endsWith(TOPIC_DELIMITER)) {    topic=topic.substring(0,topic.length() - TOPIC_DELIMITER.length());  }  return topic;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case INT_SET_LIST:    return isSetInt_set_list();case MAP_INT_STRSET:  return isSetMap_int_strset();case MAP_INT_STRSET_LIST:return isSetMap_int_strset_list();}throw new IllegalStateException();}  }
class C{  protected boolean isDocumentModified(){  if (fAcquireCount > 0) {    ContentStamp currentStamp=ContentStamps.get(fFile,fBuffer.getDocument());    return !currentStamp.equals(fContentStamp);  }  return false;}  }
class C{  public Plot line(String label,double[] x,double[] y){  return line(label,toList(x),toList(y));}  }
class C{  @Override public void visitEnd(){  if (!clinitFound && !isInterface && !isAnonymous&& !resetMethodAdded) {    if (!definesUid) {    }    createEmptyStaticReset();  } else   if (clinitFound) {    if (!definesUid) {    }  }  if (!modifiedStaticFields.isEmpty()) {    ModifiedTargetStaticFields.getInstance().addFinalFields(modifiedStaticFields);  }  super.visitEnd();}  }
class C{  private synchronized void seekToCurrentValue() throws IOException {  valBuffer.reset();}  }
class C{  public void addMessageListener(Listener<Message> listener){  mMessageBroadcaster.addListener(listener);}  }
class C{  public ASN1InputStream(InputStream input,int limit,boolean lazyEvaluate){  super(input);  this.limit=limit;  this.lazyEvaluate=lazyEvaluate;  this.tmpBuffers=new byte[11][];}  }
class C{  public ClientMessage receiveMessage(String queueName,long timeout){  return receiveMessage(SimpleString.toSimpleString(queueName),timeout);}  }
class C{  public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException {}  }
class C{  public boolean visit(CopyTargetEdit edit){  return visitNode(edit);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.tickLabelPaintMap=readPaintMap(stream);}  }
class C{  private static AC parseAxisConstraint(String s,boolean isCols){  s=s.trim();  if (s.length() == 0)   return new AC();  s=s.toLowerCase();  ArrayList<String> parts=getRowColAndGapsTrimmed(s);  BoundSize[] gaps=new BoundSize[(parts.size() >> 1) + 1];  for (int i=0, iSz=parts.size(), gIx=0; i < iSz; i+=2, gIx++)   gaps[gIx]=parseBoundSize(parts.get(i),true,isCols);  DimConstraint[] colSpecs=new DimConstraint[parts.size() >> 1];  for (int i=0, gIx=0; i < colSpecs.length; i++, gIx++) {    if (gIx >= gaps.length - 1)     gIx=gaps.length - 2;    colSpecs[i]=parseDimConstraint(parts.get((i << 1) + 1),gaps[gIx],gaps[gIx + 1],isCols);  }  AC ac=new AC();  ac.setConstaints(colSpecs);  return ac;}  }
class C{  public HopImpl(String hostName,int portNumber,String trans){  host=hostName;  if (host.indexOf(":") >= 0)   if (host.indexOf("[") < 0)   host="[" + host + "]";  port=portNumber;  transport=trans;}  }
class C{  public final void reset(int[] dims){  if (dims == null) {    cells=null;  } else {    if (dims.length < 1) {      throw new IllegalArgumentException("Table must have at " + "least one dimension.");    }    for (int i=0; i < dims.length; i++) {      if (dims[i] < 1) {        throw new IllegalArgumentException("Dimension " + i + " has fewer than "+ "one values: "+ dims[i]);      }    }    this.numCells=1;    for (    int dim : dims) {      this.numCells*=dim;    }    cells=new HashMap<>();    this.dims=new int[dims.length];    System.arraycopy(dims,0,this.dims,0,dims.length);  }}  }
class C{  @Override public void transform(AffineTransform tx){  if (get(TRANSFORM) != null || (tx.getType() & (AffineTransform.TYPE_TRANSLATION)) != tx.getType()) {    if (get(TRANSFORM) == null) {      set(TRANSFORM,(AffineTransform)tx.clone());    } else {      AffineTransform t=TRANSFORM.getClone(this);      t.preConcatenate(tx);      set(TRANSFORM,t);    }  } else {    Point2D.Double anchor=getStartPoint();    Point2D.Double lead=getEndPoint();    setBounds((Point2D.Double)tx.transform(anchor,anchor),(Point2D.Double)tx.transform(lead,lead));    if (get(FILL_GRADIENT) != null && !get(FILL_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=FILL_GRADIENT.getClone(this);      g.transform(tx);      set(FILL_GRADIENT,g);    }    if (get(STROKE_GRADIENT) != null && !get(STROKE_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=STROKE_GRADIENT.getClone(this);      g.transform(tx);      set(STROKE_GRADIENT,g);    }  }  invalidate();}  }
class C{  public RectF(float left,float top,float right,float bottom){  this.left=left;  this.top=top;  this.right=right;  this.bottom=bottom;}  }
class C{  public void error(Rules rule,String errorMsg,Location location){  print(rule,Severity.min(Severity.ERROR,maxSeverity),errorMsg,location);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.187 -0400",hash_original_method="598A080C11FF68E733FEC8702F091B2A",hash_generated_method="9B274B45B50C031E497E39349038391A") String calculateRawEncoding(String bomEnc,String xmlGuessEnc,String xmlEnc) throws IOException {  if (bomEnc == null) {    if (xmlGuessEnc == null || xmlEnc == null) {      return defaultEncoding == null ? UTF_8 : defaultEncoding;    }    if (xmlEnc.equals(UTF_16) && (xmlGuessEnc.equals(UTF_16BE) || xmlGuessEnc.equals(UTF_16LE))) {      return xmlGuessEnc;    }    return xmlEnc;  }  if (bomEnc.equals(UTF_8)) {    if (xmlGuessEnc != null && !xmlGuessEnc.equals(UTF_8)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    if (xmlEnc != null && !xmlEnc.equals(UTF_8)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    return bomEnc;  }  if (bomEnc.equals(UTF_16BE) || bomEnc.equals(UTF_16LE)) {    if (xmlGuessEnc != null && !xmlGuessEnc.equals(bomEnc)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    if (xmlEnc != null && !xmlEnc.equals(UTF_16) && !xmlEnc.equals(bomEnc)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    return bomEnc;  }  if (bomEnc.equals(UTF_32BE) || bomEnc.equals(UTF_32LE)) {    if (xmlGuessEnc != null && !xmlGuessEnc.equals(bomEnc)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    if (xmlEnc != null && !xmlEnc.equals(UTF_32) && !xmlEnc.equals(bomEnc)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    return bomEnc;  }  String msg=MessageFormat.format(RAW_EX_2,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});  throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);}  }
class C{  public static double logBinomial(final double p,final int nn,final int n){  assert p >= 0.0 && p <= 1.0;  assert n >= 0;  assert nn >= 0;  final int m=nn - n;  if (p == 0.0) {    if (n == 0) {      return 0.0;    }    throw new IllegalArgumentException("if probability is 0.0 then count must be 0. p:" + p + " N:"+ nn+ " n:"+ n);  }  if (p == 1.0) {    if (m == 0) {      return 0.0;    }    throw new IllegalArgumentException("if probability is 1.0 then count must be 0. p:" + p + " N:"+ nn+ " n:"+ n);  }  final double res=n * Math.log(p) + m * Math.log(1.0f - p) + logBinomial(nn,n);  assert res <= 0;  return -res;}  }
class C{  static double svd_dmin(double a,double b){  return Math.min(a,b);}  }
class C{  public int push(int i){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=i;  m_firstFree++;  return i;}  }
class C{  protected boolean isQuiet(){  return false;}  }
class C{  public static synchronized ComponentUI createUI(JComponent checkBox){  if (instance == null) {    instance=new StyledCheckBoxUI(StyleUtil.getStyle());  }  return instance;}  }
class C{  public DropTarget(Component c,int ops,DropTargetListener dtl,boolean act,FlavorMap fm) throws HeadlessException {  if (GraphicsEnvironment.isHeadless()) {    throw new HeadlessException();  }  component=c;  setDefaultActions(ops);  if (dtl != null)   try {    addDropTargetListener(dtl);  } catch (  TooManyListenersException tmle) {  }  if (c != null) {    c.setDropTarget(this);    setActive(act);  }  if (fm != null) {    flavorMap=fm;  } else {    flavorMap=SystemFlavorMap.getDefaultFlavorMap();  }}  }
class C{  public static String changePassword(Connection conn,String userName,String password) throws Exception {  PreparedStatement prep=conn.prepareStatement("UPDATE USERS SET PASSWORD=? WHERE NAME=?");  prep.setString(1,password);  prep.setString(2,userName);  prep.executeUpdate();  return password;}  }
class C{  public void updateResizable(){  List constraints=dockPanel.getConstraints(getChildren());  boolean canResize=DockConstraint.canResize(constraints);  if (resizable && !canResize) {    makeNotResizable();  }  if (!resizable && canResize) {    makeResizable();  }}  }
class C{  public static int indexOf(boolean[] array,boolean[] sub,int startIndex,int endIndex){  int sublen=sub.length;  if (sublen == 0) {    return startIndex;  }  int total=endIndex - sublen + 1;  boolean c=sub[0];  mainloop:   for (int i=startIndex; i < total; i++) {    if (array[i] != c) {      continue;    }    int j=1;    int k=i + 1;    while (j < sublen) {      if (sub[j] != array[k]) {        continue mainloop;      }      j++;      k++;    }    return i;  }  return -1;}  }
class C{  private int inOrderAnalyse(StructuralNode node){  int subtreeNodes=0;  if (isStop) {    return 0;  }  if (node == null) {    return 0;  }  try {    if (!node.isRoot()) {      if (!node.isLeaf() || node.isLeaf() && node.getParent().isRoot()) {        analyse(node);      } else {        return 1;      }    }  } catch (  Exception e) {  }  Iterator<StructuralNode> iter=node.getChildIterator();  while (iter.hasNext()) {    subtreeNodes+=inOrderAnalyse(iter.next());  }  return subtreeNodes + 1;}  }
class C{  private void startRecoveryLeaderSelector(){  while (!coordinator.getCoordinatorClient().isConnected()) {    log.info("Waiting for connecting to zookeeper");    try {      Thread.sleep(RecoveryConstants.RECOVERY_CONNECT_INTERVAL);    } catch (    InterruptedException e) {      log.warn("Exception while sleeping, ignore",e);    }  }  LeaderSelector leaderSelector=coordinator.getCoordinatorClient().getLeaderSelector(RecoveryConstants.RECOVERY_LEADER_PATH,new RecoveryLeaderSelectorListener());  leaderSelector.autoRequeue();  leaderSelector.start();}  }
class C{  private void createSceneSSBO(){  this.ssbo=glGenBuffers();  glBindBuffer(GL_SHADER_STORAGE_BUFFER,ssbo);  ByteBuffer ssboData=BufferUtils.createByteBuffer(4 * (4 + 4) * boxes.length / 2);  FloatBuffer fv=ssboData.asFloatBuffer();  for (int i=0; i < boxes.length; i+=2) {    Vector3f min=boxes[i];    Vector3f max=boxes[i + 1];    fv.put(min.x).put(min.y).put(min.z).put(0.0f);    fv.put(max.x).put(max.y).put(max.z).put(0.0f);  }  glBufferData(GL_SHADER_STORAGE_BUFFER,ssboData,GL_STATIC_DRAW);  glBindBuffer(GL_SHADER_STORAGE_BUFFER,0);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  ElemParam v=(ElemParam)handler.getElemTemplateElement();  handler.getStylesheet().appendChild(v);  handler.getStylesheet().setParam(v);  super.endElement(handler,uri,localName,rawName);}  }
class C{  public THashSet(Collection<? extends E> collection){  this(collection.size());  addAll(collection);}  }
class C{  public void insert(int offset,byte value){  if (offset == _pos) {    add(value);    return;  }  ensureCapacity(_pos + 1);  System.arraycopy(_data,offset,_data,offset + 1,_pos - offset);  _data[offset]=value;  _pos++;}  }
class C{  public static boolean isIsatapAddress(Inet6Address ip){  if (isTeredoAddress(ip)) {    return false;  }  byte[] bytes=ip.getAddress();  if ((bytes[8] | (byte)0x03) != (byte)0x03) {    return false;  }  return (bytes[9] == (byte)0x00) && (bytes[10] == (byte)0x5e) && (bytes[11] == (byte)0xfe);}  }
class C{  public long interleave(int... values){  int dimensions=values.length;  long max=getMaxValue(dimensions);  int bitsPerValue=getBitsPerValue(dimensions);  long x=0;  for (int i=0; i < dimensions; i++) {    long k=values[i];    if (k < 0 || k > max) {      throw new IllegalArgumentException(0 + "<" + k+ "<"+ max);    }    for (int b=0; b < bitsPerValue; b++) {      x|=(k & (1L << b)) << (i + (dimensions - 1) * b);    }  }  return x;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public long simpleQueryForLong(){  acquireReference();  try {    return getSession().executeForLong(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public PaymentDataException(String message,Reason reason){  super(message);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  private void incCSSCount(){  if (cssCount == -1) {    cssCount++;  }  cssCount++;}  }
class C{  public void stopParsing(){  timer.stop();  running=false;}  }
class C{  public final boolean isChild(){  return mParent != null;}  }
class C{  public int numFeatures(){  if (features == null) {    return 0;  } else {    return features.size();  }}  }
class C{  public void addDocument(String name,int parentDivId,String fileExt,InputStream inputStreamDocumentFile,Reader readerAnnFile) throws Exception {  int sortOrder=m_documents.getNextSortOrder();  addDocument(name,parentDivId,fileExt,sortOrder,inputStreamDocumentFile,readerAnnFile);}  }
class C{  public static boolean isExternalStorageRemovable(){  return Environment.isExternalStorageRemovable();}  }
class C{  public static Arguments createArgs(String server,int port,String prefix,Map<String,String> otherArgs){  String args=String.format("server=%s,port=%d,prefix=%s",server,port,prefix);  if (otherArgs != null) {    for (    Map.Entry<String,String> entry : otherArgs.entrySet()) {      args+=String.format(",%s=%s",entry.getKey(),entry.getValue());    }  }  return Arguments.parseArgs(args);}  }
class C{  public static boolean drawTextAntialiased(boolean aaText){  return (Boolean)invokeSwingUtilities2StaticMethod("drawTextAntialiased",new Class[]{boolean.class},new Object[]{aaText});}  }
class C{  private void log(String msg){  XRLog.exception("Unhandled exception. " + msg);}  }
class C{  public ReaderParams genome(){  return mGenome;}  }
class C{  @Provides @PerActivity Activity provideActivity(){  return activity;}  }
class C{  public TimingHit dnsTime(Integer value){  setInteger(DNS_TIME,value);  return this;}  }
class C{  public static GTSWrapper fromGTSToGTSWrapper(GeoTimeSerie gts,boolean compress){  return fromGTSToGTSWrapper(gts,compress,DEFAULT_COMP_RATIO_THRESHOLD);}  }
class C{  synchronized public long transferTo(final RandomAccessFile out) throws IOException {  final long count=nextOffset.get();  final FileChannel outChannel=out.getChannel();  final long toPosition=outChannel.position();  buffer.limit((int)count);  buffer.position(0);  FileChannelUtility.writeAll(outChannel,buffer,toPosition);  outChannel.position(toPosition + count);  return count;}  }
class C{  public final Texture subTexture(Rectangle2D area){  int minX=(int)area.getMinX();  int minY=(int)area.getMinY();  int maxX=(int)area.getMaxX();  int maxY=(int)area.getMaxY();  if (minX < 0)   throw new IllegalArgumentException("minX value of sub-texture cannot be negative");  if (minY < 0)   throw new IllegalArgumentException("minY value of sub-texture cannot be negative");  if (maxX > getImage().getWidth())   throw new IllegalArgumentException("maxX value of sub-texture cannot be greater than image width");  if (maxY > getImage().getHeight())   throw new IllegalArgumentException("maxY value of sub-texture cannot be greater than image height");  PixelReader pixelReader=getImage().getPixelReader();  WritableImage image=new WritableImage(maxX - minX,maxY - minY);  PixelWriter pixelWriter=image.getPixelWriter();  for (int y=minY; y < maxY; y++) {    for (int x=minX; x < maxX; x++) {      Color color=pixelReader.getColor(x,y);      pixelWriter.setColor(x - minX,y - minY,color);    }  }  return new Texture(image);}  }
class C{  void addToSubroutine(final long id,final int nbSubroutines){  if ((status & VISITED) == 0) {    status|=VISITED;    srcAndRefPositions=new int[(nbSubroutines - 1) / 32 + 1];  }  srcAndRefPositions[(int)(id >>> 32)]|=(int)id;}  }
class C{  @Override public void widgetSelected(SelectionEvent event){  Button thisButton=(Button)event.widget;  if (thisButton.getSelection()) {    viewer.addFilter(ownControlFilter);    refresh();  } else {    viewer.removeFilter(ownControlFilter);    refresh();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.732 -0500",hash_original_method="D981F7025F52BA8E1CEDC583E21B710C",hash_generated_method="73D70348B5426E6EBABB75233918596A") public AlertInfoParser(String alertInfo){  super(alertInfo);}  }
class C{  public UpdateDataDetails clone(){  UpdateDataDetails result=new UpdateDataDetails();  result.NodeId=NodeId;  result.PerformInsertReplace=PerformInsertReplace;  result.UpdateValues=UpdateValues == null ? null : UpdateValues.clone();  return result;}  }
class C{  public static Rect loadBitmapBounds(Context context,Uri uri){  BitmapFactory.Options o=new BitmapFactory.Options();  loadBitmap(context,uri,o);  return new Rect(0,0,o.outWidth,o.outHeight);}  }
class C{  @Override public boolean keyParamsNeeded(){  return keyParamsNeededFlag;}  }
class C{  public ImportedConsulService register(ServicePublisher publisher,Future<ImportedConsulService> completion){  publisher.publish(record,null);  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader="";  int row, col;  double rowYCoord, value, z;  int progress=0;  double cellSizeX, cellSizeY;  int rows, topRow, bottomRow;  int cols;  int inputRow, inputCol;  double inputX, inputY;  double east;  double west;  double north;  double south;  BoundingBox box;  double[][] geometry;  int numPoints, numParts, i, part, numEdges;  int stCol, endCol;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime;  boolean foundIntersection;  ArrayList<Integer> edgeList=new ArrayList<>();  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  String[] inputFiles=inputFilesString.split(";");  int numFiles=inputFiles.length;  String clipFile=args[1];  if (inputFilesString.isEmpty() || numFiles < 1) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    long heapSize=Runtime.getRuntime().totalMemory();    int flushSize=(int)(heapSize / 32);    int j, numCellsToWrite;    PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<>(flushSize);    ShapeFile clip=new ShapeFile(clipFile);    BoundingBox clipBox=new BoundingBox();    clipBox.setMaxX(clip.getxMax());    clipBox.setMaxY(clip.getyMax());    clipBox.setMinX(clip.getxMin());    clipBox.setMinY(clip.getyMin());    if (clip.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("The input shapefile must be of a 'polygon' data type.");      return;    }    ArrayList<RecordInfo> myList=new ArrayList<>();    for (    ShapeFileRecord record : clip.records) {      i=record.getRecordNumber();      box=getBoundingBoxFromShapefileRecord(record);      myList.add(new RecordInfo(box.getMaxY(),i));    }    Collections.sort(myList);    for (int k=0; k < numFiles; k++) {      WhiteboxRaster input=new WhiteboxRaster(inputFiles[k],"r");      outputHeader=inputFiles[k].replace(".dep","_erased.dep");      double noData=input.getNoDataValue();      DataType dataType=input.getDataType();      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputFiles[k],dataType,noData);      rows=input.getNumberRows();      cols=input.getNumberColumns();      double[] data;      for (row=0; row < rows; row++) {        data=input.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(row,col,data[col]);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      pq.clear();      RowPriorityGridCell cell;      int numRecords=clip.getNumberOfRecords();      int count=0;      int progressCount=(int)(numRecords / 100.0);      if (progressCount <= 0) {        progressCount=1;      }      ShapeFileRecord record;      for (      RecordInfo ri : myList) {        record=clip.getRecord(ri.recNumber - 1);        geometry=getXYFromShapefileRecord(record);        numPoints=geometry.length;        numParts=partData.length;        for (part=0; part < numParts; part++) {          if (!partHoleData[part]) {            box=new BoundingBox();            startingPointInPart=partData[part];            if (part < numParts - 1) {              endingPointInPart=partData[part + 1];            } else {              endingPointInPart=numPoints;            }            for (i=startingPointInPart; i < endingPointInPart; i++) {              if (geometry[i][1] < box.getMinY()) {                box.setMinY(geometry[i][1]);              }              if (geometry[i][1] > box.getMaxY()) {                box.setMaxY(geometry[i][1]);              }            }            topRow=output.getRowFromYCoordinate(box.getMaxY());            bottomRow=output.getRowFromYCoordinate(box.getMinY());            for (row=topRow; row <= bottomRow; row++) {              edgeList.clear();              foundIntersection=false;              rowYCoord=output.getYCoordinateFromRow(row);              for (i=startingPointInPart; i < endingPointInPart - 1; i++) {                if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  if (y2 != y1) {                    x1=geometry[i][0];                    x2=geometry[i + 1][0];                    xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                    edgeList.add(output.getColumnFromXCoordinate(xPrime));                    foundIntersection=true;                  }                }              }              if (foundIntersection) {                numEdges=edgeList.size();                if (numEdges == 2) {                  stCol=Math.min(edgeList.get(0),edgeList.get(1));                  endCol=Math.max(edgeList.get(0),edgeList.get(1));                  for (col=stCol; col <= endCol; col++) {                    pq.add(new RowPriorityGridCell(row,col,noData));                  }                } else {                  Integer[] edgeArray=new Integer[numEdges];                  edgeList.toArray(edgeArray);                  Arrays.sort(edgeArray);                  boolean fillFlag=true;                  for (i=0; i < numEdges - 1; i++) {                    stCol=edgeArray[i];                    endCol=edgeArray[i + 1];                    if (fillFlag) {                      for (col=stCol; col <= endCol; col++) {                        pq.add(new RowPriorityGridCell(row,col,noData));                      }                    }                    fillFlag=!fillFlag;                  }                }              }            }          }        }        for (part=0; part < numParts; part++) {          if (partHoleData[part]) {            box=new BoundingBox();            startingPointInPart=partData[part];            if (part < numParts - 1) {              endingPointInPart=partData[part + 1];            } else {              endingPointInPart=numPoints;            }            for (i=startingPointInPart; i < endingPointInPart; i++) {              if (geometry[i][1] < box.getMinY()) {                box.setMinY(geometry[i][1]);              }              if (geometry[i][1] > box.getMaxY()) {                box.setMaxY(geometry[i][1]);              }            }            topRow=output.getRowFromYCoordinate(box.getMaxY());            bottomRow=output.getRowFromYCoordinate(box.getMinY());            for (row=topRow; row <= bottomRow; row++) {              edgeList.clear();              foundIntersection=false;              rowYCoord=output.getYCoordinateFromRow(row);              for (i=startingPointInPart; i < endingPointInPart - 1; i++) {                if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  if (y2 != y1) {                    x1=geometry[i][0];                    x2=geometry[i + 1][0];                    xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                    edgeList.add(output.getColumnFromXCoordinate(xPrime));                    foundIntersection=true;                  }                }              }              if (foundIntersection) {                numEdges=edgeList.size();                if (numEdges == 2) {                  stCol=Math.min(edgeList.get(0),edgeList.get(1));                  endCol=Math.max(edgeList.get(0),edgeList.get(1));                  for (col=stCol; col <= endCol; col++) {                    pq.add(new RowPriorityGridCell(row,col,input.getValue(row,col)));                  }                } else {                  Integer[] edgeArray=new Integer[numEdges];                  edgeList.toArray(edgeArray);                  Arrays.sort(edgeArray);                  boolean fillFlag=true;                  for (i=0; i < numEdges - 1; i++) {                    stCol=edgeArray[i];                    endCol=edgeArray[i + 1];                    if (fillFlag) {                      for (col=stCol; col <= endCol; col++) {                        pq.add(new RowPriorityGridCell(row,col,input.getValue(row,col)));                      }                    }                    fillFlag=!fillFlag;                  }                }              }            }          }        }        if (pq.size() >= flushSize) {          j=0;          numCellsToWrite=pq.size();          do {            cell=pq.poll();            output.setValue(cell.row,cell.col,cell.z);            j++;            if (j % 1000 == 0) {              if (cancelOp) {                cancelOperation();                return;              }              updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));            }          } while (pq.size() > 0);        }        if (cancelOp) {          cancelOperation();          return;        }        count++;        if (count % progressCount == 0) {          progress++;          updateProgress(progress);        }      }      j=0;      numCellsToWrite=pq.size();      if (numCellsToWrite > 0) {        do {          cell=pq.poll();          output.setValue(cell.row,cell.col,cell.z);          j++;          if (j % 1000 == 0) {            if (cancelOp) {              cancelOperation();              return;            }            updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));          }        } while (pq.size() > 0);      }      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.flush();      output.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void requestRedraw(){  messageService.postMessage(REQUEST_REDRAW,null,null);}  }
class C{  public boolean isAccessibleChildSelected(int i){  int childCount=getAccessibleChildrenCount();  if (i < 0 || i >= childCount) {    return false;  } else {    TreePath childPath=getChildTreePath(i);    return tree.isPathSelected(childPath);  }}  }
class C{  protected JButton createArrowButton(){  JButton button=new BasicArrowButton(BasicArrowButton.SOUTH,UIManager.getColor("ComboBox.buttonBackground"),UIManager.getColor("ComboBox.buttonShadow"),UIManager.getColor("ComboBox.buttonDarkShadow"),UIManager.getColor("ComboBox.buttonHighlight"));  button.setName("ComboBox.arrowButton");  return button;}  }
class C{  protected void addDefaultCaseInstrumentation(BytecodeInstruction v,InsnList instrumentation,AbstractInsnNode mySwitch,LabelNode defaultLabel,LabelNode caseLabel,LabelNode endLabel){  int defaultCaseBranchId=BranchPool.getInstance(classLoader).getDefaultBranchForSwitch(v).getActualBranchId();  instrumentation.add(new InsnNode(Opcodes.DUP));  instrumentation.add(mySwitch);  instrumentation.add(caseLabel);  addDefaultCaseNotCoveredCall(v,instrumentation,defaultCaseBranchId);  instrumentation.add(new JumpInsnNode(Opcodes.GOTO,endLabel));  instrumentation.add(defaultLabel);  addDefaultCaseCoveredCall(v,instrumentation,defaultCaseBranchId);  instrumentation.add(endLabel);}  }
class C{  public static String toString(GeneralName generalName) throws IOException {  if (generalName == null) {    return "";  }switch (generalName.getTagNo()) {case GeneralName.ediPartyName:{      ASN1Sequence ediPartyName=(ASN1Sequence)generalName.getName();      DirectoryString nameAssigner=DirectoryString.getInstance(ediPartyName.getObjectAt(0));      DirectoryString partyName=DirectoryString.getInstance(ediPartyName.getObjectAt(1));      String nameAssignerStr=null;      if (nameAssigner != null) {        nameAssignerStr=nameAssigner.getString();      }      String partyNameStr=partyName.getString();      if (nameAssignerStr != null) {        return MessageFormat.format(res.getString("GeneralNameUtil.EdiPartyGeneralName"),nameAssignerStr,partyNameStr);      } else {        return MessageFormat.format(res.getString("GeneralNameUtil.EdiPartyGeneralNameNoAssigner"),partyNameStr);      }    }case GeneralName.otherName:{    return parseUPN(generalName);  }case GeneralName.x400Address:{  ASN1Encodable x400Address=generalName.getName();  return MessageFormat.format(res.getString("GeneralNameUtil.X400AddressGeneralName"),HexUtil.getHexString(x400Address.toASN1Primitive().getEncoded(ASN1Encoding.DER)));}default :{return safeToString(generalName,true);}}}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean canGetLocation(){  return this.canGetLocation;}  }
class C{  public static int randInt(int min,int max){  Random rand=new Random();  try {    int randomNum=rand.nextInt((max - min) + 1) + min;    return randomNum;  } catch (  Exception e) {    return min;  }}  }
class C{  protected ContainerTypeImpl(){  super();}  }
class C{  public PreparedPolygonCovers(PreparedPolygon prepPoly){  super(prepPoly);  requireSomePointInInterior=false;}  }
class C{  private void addStringProperty(String key,String token){  Object o=this.get(key);  if (o instanceof String) {    Vector v=new Vector(2);    v.addElement(o);    v.addElement(token);    put(key,v);  } else   if (o instanceof Vector) {    ((Vector)o).addElement(token);  } else {    if (!containsKey(key)) {      keysAsListed.add(key);    }    put(key,token);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.111 -0400",hash_original_method="3A039CFB5FB23C6800009AA566E66D3F",hash_generated_method="8FB4B8DD255661E30270BCB2495840AD") public void shape(char[] text,int start,int count,int context){  if (isContextual()) {    contextualShape(text,start,count,getIndexFromRange(context));  } else {    nonContextualShape(text,start,count);  }}  }
class C{  public boolean match(SingleVariableDeclaration node,Object other){  if (!(other instanceof SingleVariableDeclaration)) {    return false;  }  SingleVariableDeclaration o=(SingleVariableDeclaration)other;  int level=node.getAST().apiLevel;  if (level == AST.JLS2_INTERNAL) {    if (node.getModifiers() != o.getModifiers()) {      return false;    }  }  if (level >= AST.JLS3) {    if (!safeSubtreeListMatch(node.modifiers(),o.modifiers())) {      return false;    }    if (node.isVarargs() != o.isVarargs()) {      return false;    }  }  return safeSubtreeMatch(node.getType(),o.getType()) && safeSubtreeMatch(node.getName(),o.getName()) && node.getExtraDimensions() == o.getExtraDimensions() && safeSubtreeMatch(node.getInitializer(),o.getInitializer());}  }
class C{  public boolean isPassive(){  Object oo=get_Value(COLUMNNAME_IsPassive);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static Reflect on(Method method,Object object,Object... args) throws ReflectException {  try {    accessible(method);    if (method.getReturnType() == void.class) {      method.invoke(object,args);      return on(object);    } else {      return on(method.invoke(object,args));    }  } catch (  Exception e) {    throw new ReflectException(e);  }}  }
class C{  @PUT @Path("/wardenpolicyforuser") @Produces(MediaType.APPLICATION_JSON) @Description("Updates a warden policy for a user.") public Response updateWardenPolicyForUser(@Context HttpServletRequest req,@FormParam("username") String userName,@FormParam("policycounter") PolicyCounter policycounter,@FormParam("value") double value){  if (userName == null || userName.isEmpty()) {    throw new IllegalArgumentException("User name cannot be null or empty.");  }  if (policycounter == null) {    throw new IllegalArgumentException("Policy counter cannot be null.");  }  validatePrivilegedUser(req);  PrincipalUser user=userService.findUserByUsername(userName);  if (user == null) {    throw new WebApplicationException("User does not exist.",Status.NOT_FOUND);  }  managementService.updateWardenPolicyForUser(user,policycounter,value);  return Response.status(Status.OK).build();}  }
class C{  @Override public void respond(String response){  respondWith(response);}  }
class C{  private void resize(){  Entry[] oldTab=table;  int oldLen=oldTab.length;  int newLen=oldLen * 2;  Entry[] newTab=new Entry[newLen];  int count=0;  for (int j=0; j < oldLen; ++j) {    Entry e=oldTab[j];    if (e != null) {      ThreadLocal<?> k=e.get();      if (k == null) {        e.value=null;      } else {        int h=k.threadLocalHashCode & (newLen - 1);        while (newTab[h] != null)         h=nextIndex(h,newLen);        newTab[h]=e;        count++;      }    }  }  setThreshold(newLen);  size=count;  table=newTab;}  }
class C{  void writeHeader(){  int startPos;  startPos=bytePos=writeInt4(13,bytePos);  bytePos=writeString("IHDR",bytePos);  width=image.getWidth(null);  height=image.getHeight(null);  bytePos=writeInt4(width,bytePos);  bytePos=writeInt4(height,bytePos);  bytePos=writeByte(8,bytePos);  bytePos=writeByte((encodeAlpha) ? 6 : 2,bytePos);  bytePos=writeByte(0,bytePos);  bytePos=writeByte(0,bytePos);  bytePos=writeByte(0,bytePos);  crc.reset();  crc.update(pngBytes,startPos,bytePos - startPos);  crcValue=crc.getValue();  bytePos=writeInt4((int)crcValue,bytePos);}  }
class C{  public static VqlParser parse(String columnPath,boolean ignoreParseExceptions){  VqlLexer lexer=new VqlLexer(new StringReader(columnPath));  VqlParser parser=new VqlParser(lexer);  try {    parser.expr();  } catch (  RecognitionException|TokenStreamException e) {    handleParseError(e,columnPath,ignoreParseExceptions);  }  return parser;}  }
class C{  private void addTtsApis(){  if (mTextToSpeech == null) {    mTextToSpeech=new TextToSpeechWrapper(mContext);  }  mWebView.addJavascriptInterface(mTextToSpeech,ALIAS_TTS_JS_INTERFACE);}  }
class C{  public FaultyHeader2(){  requestFileName="faulty-header2.query";}  }
class C{  @SuppressWarnings("unchecked") private void loadCustomizationLevel(Class objectClass){  DBObject dbObject=new DBObject(this,objectClass);  String objectsToLoad=s_logger.localizeMessage("objects");  HashMap<String,DBObject> map=null;  if (dbObject != null) {    objectsToLoad=dbObject.getObjectTypes();    if (objectClass.getSimpleName().equals("DBObject_Table")) {      map=getTables();    } else     if (objectClass.getSimpleName().equals("DBObject_View")) {      map=getViews();    } else     if (objectClass.getSimpleName().equals("DBObject_Operator")) {      map=getOperators();    } else     if (objectClass.getSimpleName().equals("DBObject_Function")) {      map=getFunctions();    } else     if (objectClass.getSimpleName().equals("DBObject_Trigger")) {      map=getTriggers();    } else     if (objectClass.getSimpleName().equals("DBObject_Sequence")) {      map=getSequences();    } else     if (objectClass.getSimpleName().equals("DBObject_PrimaryKey")) {      map=getPrimaryKeys();    } else     if (objectClass.getSimpleName().equals("DBObject_ForeignKey")) {      map=getForeignKeys();    } else     if (objectClass.getSimpleName().equals("DBObject_Check")) {      map=getChecks();    } else     if (objectClass.getSimpleName().equals("DBObject_Unique")) {      map=getUniques();    } else     if (objectClass.getSimpleName().equals("DBObject_Index")) {      map=getIndexes();    }  }  if (map != null) {    s_logger.log(Level.FINE,"loadCustomizationLevel",new Object[]{objectsToLoad,getDirection()});    int counter=0;    for (Iterator<String> it=map.keySet().iterator(); it.hasNext(); ) {      String key=it.next();      map.get(key).getCustomizationLevel();      counter++;    }    String logObject=s_logger.localizeMessage("customization levels");    if (counter == 1)     logObject=s_logger.localizeMessage("customization level");    s_logger.log(Level.FINE,"customizationLevelLoaded",new Object[]{Integer.toString(counter),logObject});  }  s_logger.flush();  return;}  }
class C{  protected void exportArcs(){  if (arcs == null)   return;  Vector V=new Vector();  int n=arcs.size();  double ll[];  int llsize;  double lnmax=Double.MIN_VALUE;  double lnmin=Double.MAX_VALUE;  double ltmin=lnmin;  double ltmax=lnmax;  double lt;  double ln;  for (int i=0; i < n; i++) {    OMPoly oj=(OMPoly)arcs.getOMGraphicAt(i);    if (oj == null)     continue;    E00Data data=(E00Data)oj.getAttribute(OMGraphic.APP_OBJECT);    if (data == null)     continue;    ll=oj.getLatLonArray();    llsize=ll.length;    if ((ll[0] != ll[llsize - 2]) || (ll[1] != ll[llsize - 1])) {      double[] coords=new double[]{ll[0],ll[1],ll[llsize - 2],ll[llsize - 1]};      ArcData dn=new ArcData(data);      dn.coords=coords;      oj.putAttribute(OMGraphic.APP_OBJECT,dn);      V.add(dn);    }    int k=0;    while (k < llsize) {      lt=ll[k++];      ln=ll[k++];      if (lt > ltmax)       ltmax=lt; else       if (lt < ltmin)       ltmin=lt;      if (ln > lnmax)       lnmax=ln; else       if (ln < lnmin)       lnmin=ln;    }  }  System.out.println("#minmax " + lnmin + " "+ lnmax+ " "+ ltmin+ " "+ ltmax);  int unClosedCount=V.size();  ArcData[] unClosed=(ArcData[])V.toArray(new ArcData[unClosedCount]);  V.clear();  V=null;  ArcData d0;  ArcData d1;  ArcData d2;  ArcData dx;  double lt1;  double lg1;  double lt2;  double lg2;  for (int i=0; i < unClosedCount; i++) {    d0=unClosed[i];    d0.deja=0;    if (d0.type > 1)     continue;    lt1=d0.coords[0];    lg1=d0.coords[1];    lt2=d0.coords[2];    lg2=d0.coords[3];    for (int j=i + 1; j < unClosedCount; j++) {      d1=unClosed[j];      if (d1.type > 1)       continue;      if ((lt1 == d1.coords[0]) && (lg1 == d1.coords[1])) {        d1.setC(d0);        d0.setC(d1);      } else       if ((lt1 == d1.coords[2]) && (lg1 == d1.coords[3])) {        d1.setF(d0);        d0.setC(d1);      }      if ((lt2 == d1.coords[0]) && (lg2 == d1.coords[1])) {        d1.setC(d0);        d0.setF(d1);      } else       if ((lt2 == d1.coords[2]) && (lg2 == d1.coords[3])) {        d1.setF(d0);        d0.setF(d1);      }    }  }  for (int k=0; k < unClosedCount; k++) {    d0=unClosed[k];    if ((d0.type != 0) || (d0.deja != 0))     continue;    if ((d0.c0 == null) && (d0.f0 == null))     continue;    d1=d0;    d2=(d1.c0 == null) ? d1.f0 : d1.c0;    System.out.print("#contour ");    System.out.print(d0.id);    System.out.print(' ');    int decount=unClosedCount * 3 / 2;    do {      System.out.print(d2.id);      if (d2.deja != 0)       System.out.print('*');      System.out.print(' ');      dx=d2.visit(d1);      d1=d2;      d2=dx;      if (decount-- < 0) {        System.out.print(" BOUCLE ");        break;      }    } while ((d2 != null) && (d2 != d0));    if (d2 == null)     System.out.print(" unclosed");    System.out.println();    System.out.println();  }  for (int i=0; i < n; i++) {    OMPoly oj=(OMPoly)arcs.getOMGraphicAt(i);    if (oj == null)     continue;    E00Data data=(E00Data)oj.getAttribute(OMGraphic.APP_OBJECT);    if (data == null)     continue;    ll=oj.getLatLonArray();    llsize=ll.length;    double z=data.valeur * 0.304;    boolean closed=true;    if (data instanceof ArcData) {      ArcData dn=(ArcData)data;      dn.coords=null;      closed=false;    }    int k=0;    System.out.println("#type " + data.type);    while (k < llsize) {      lt=ll[k++];      ln=ll[k++];      System.out.println("c " + ln + " "+ lt+ " "+ z);    }    System.out.println((closed) ? "#LC" : "#LX");    System.out.println();  }}  }
class C{  public EventEntry(BaseEntry<?> sourceEntry){  super(sourceEntry);}  }
class C{  public void continues(Map<String,List<ContinueStmt>> contsReaching){  for (  ParseTreeNode child : children()) {    if (child instanceof Statement) {      ((Statement)child).continues(contsReaching);    }  }}  }
class C{  public static <K,V>int occurrencesOf(Map<K,V> map,V object){  return Iterate.count(map.values(),Predicates.equal(object));}  }
class C{  public void captureAudio(ActionListener response){  impl.captureAudio(response);}  }
class C{  private double doAcquire(double permitsToAcquire,double currentTime){  while (true) {    readRate.lock();    try {      double permitReleaseRate=this.permitsPerSecond;      double clockDelta=permitsToAcquire / permitReleaseRate;      double lowestAllowedClock=currentTime - backlogSize;      double currentClock=clock.get();      double nextClock=currentClock + clockDelta;      if (nextClock < lowestAllowedClock)       nextClock=lowestAllowedClock;      if (clock.compareAndSet(currentClock,nextClock)) {        if (nextClock > currentTime)         return permitReleaseRate * (nextClock - currentTime); else         return 0;      }    }  finally {      readRate.unlock();    }  }}  }
class C{  public boolean isValid(INode state){  return true;}  }
class C{  public static String normalizeFieldNameOrPath(final String nameOrPath){  assertNotNull(nameOrPath,"Name of path must not be null");  return nameOrPath.trim().toLowerCase(Locale.ENGLISH);}  }
class C{  public boolean addNode(ServiceNode node){  try {    return nodes.add(node);  } catch (  Exception e) {    return false;  }}  }
class C{  public static void rollback(Configuration conf) throws RetryException, UnrecoverableException {  Schema outputSchema=SchemaFactory.getSchema(conf);  String tmpOutputTable=getTablePrefix(outputSchema) + outputSchema.getTable();  int outputNumberOfPartitions=outputSchema.getNumberOfPartitions();  Connection connection=null;  try {    connection=outputSchema.getConnection();    JdbcQueryUtils.dropTemporaryOutputTables(tmpOutputTable,outputNumberOfPartitions,connection);  } catch (  SQLException ex1) {    LOG.error(ex1.getMessage());    throw new RetryException(ex1.getMessage());  }catch (  ClassNotFoundException ex2) {    LOG.error(ex2.getMessage());    throw new UnrecoverableException(ex2.getMessage());  } finally {    DbUtils.closeQuietly(connection);  }}  }
class C{  protected Search createSearch(HeuristicFunction hf,int waySelection){  return new AStarSearch(new GraphSearch(),hf);}  }
class C{  public synchronized void addZoomListener(ZoomListener listener){  zoomDelegate.add(listener);}  }
class C{  private boolean resizeData(final IAddress address){  if (address == null) {    return true;  }  final IDebugger debugger=m_debugPerspectiveModel.getCurrentSelectedDebugger();  if (debugger != null) {    final MemorySection section=ProcessHelpers.getSectionWith(debugger.getProcessManager().getMemoryMap(),address);    if (section == null) {      m_debugPerspectiveModel.setActiveMemoryAddress(null,false);      return false;    } else {      m_hexView.setBaseAddress(section.getStart().toLong());      m_provider.setMemorySize(section.getSize());      m_hexView.gotoOffset(address.toLong());      updateGui();      return true;    }  }  return true;}  }
class C{  public void tagImport(String movieName,String[] names,int[] ids) throws IOException {  startTag(TAG_IMPORT,true);  int count=ids.length;  out.writeString(movieName);  out.writeUI16(count);  for (int i=0; i < count; i++) {    out.writeUI16(ids[i]);    out.writeString(names[i]);  }  completeTag();}  }
class C{  @Override protected void launch(){  BrowserHelper.openURL("http://meka.sourceforge.net/");}  }
class C{  public static double alongTrackDistanceRad(double lat1,double lon1,double lat2,double lon2,double latQ,double lonQ,double dist1Q,double ctd){  int sign=Math.abs(bearingRad(lat1,lon1,lat2,lon2) - bearingRad(lat1,lon1,latQ,lonQ)) < MathUtil.HALFPI ? +1 : -1;  return sign * Math.acos(Math.cos(dist1Q) / Math.cos(ctd));}  }
class C{  public static MinProjectionExpression minDistinct(String propertyName){  return new MinProjectionExpression(getPropExpr(propertyName),true);}  }
class C{  public int write(byte[] b,int off){  int nBytes=super.write(b,off);  nBytes+=writeLEInt(b,off + nBytes,SHAPE_TYPE_POINT);  nBytes+=writeLEDouble(b,off + nBytes,x);  nBytes+=writeLEDouble(b,off + nBytes,y);  return nBytes;}  }
class C{  public int uniformCmd(boolean eqSkip){  Iterator<Cell> i=cells.values().iterator();  int ret=-1;  uniformCnt=1;  uniformSkip=0;  for (; i.hasNext(); ) {    Cell c=i.next();    if (c.ref >= 0) {      return -1;    }    if (c.cmd >= 0) {      if (ret < 0) {        ret=c.cmd;        uniformSkip=c.skip;      } else       if (ret == c.cmd) {        if (eqSkip) {          if (uniformSkip == c.skip) {            uniformCnt++;          } else {            return -1;          }        } else {          uniformCnt++;        }      } else {        return -1;      }    }  }  return ret;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:20.014 -0500",hash_original_method="6CF66D622F9C9313C400A181CC9C1077",hash_generated_method="C0929D6422F5D3C11AC276F36853FA1D") void connectionDisconnected(GsmConnection conn){  if (state != State.DISCONNECTED) {    boolean hasOnlyDisconnectedConnections=true;    for (int i=0, s=connections.size(); i < s; i++) {      if (connections.get(i).getState() != State.DISCONNECTED) {        hasOnlyDisconnectedConnections=false;        break;      }    }    if (hasOnlyDisconnectedConnections) {      state=State.DISCONNECTED;    }  }}  }
class C{  private static long perm3264(int c,long[][] p){  long out=0L;  for (int i=4; --i >= 0; ) {    int t=(0x00ff & c);    c>>=8;    long tp=p[i << 1][t & 0x0f];    out|=tp;    tp=p[(i << 1) + 1][t >> 4];    out|=tp;  }  return out;}  }
class C{  public JFileImageChooser(final Shell parent,final int style,final File workingDir){  fileDialog=new FileDialog(parent,style);  if (workingDir != null)   fileDialog.setFilterPath(workingDir.getAbsolutePath());}  }
class C{  public static Stat forName(String paramKey){  try {    return Stat.valueOf(paramKey);  } catch (  IllegalArgumentException e) {    return null;  }}  }
class C{  public long skip(long n) throws IOException {  if (n < 0)   throw new IllegalArgumentException("skip() value is negative");  int nn=(int)Math.min(n,maxSkipBufferSize);synchronized (lock) {    if ((skipBuffer == null) || (skipBuffer.length < nn))     skipBuffer=new char[nn];    long r=n;    while (r > 0) {      int nc=read(skipBuffer,0,(int)Math.min(r,nn));      if (nc == -1)       break;      r-=nc;    }    return n - r;  }}  }
class C{  public CommandNotExpectedException(String unexpectedCommand){  super(String.format("Unexpected command: %s.",unexpectedCommand));}  }
class C{  public static <T>ObjectAnimator ofFloat(T target,Property<T,Float> property,float... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setFloatValues(values);  return anim;}  }
class C{  @Override public void findOne(String sql,Result<Cursor> result,Object... args){  _kraken.query(sql).findOne(result,args);}  }
class C{  public int writeBytesPad(int index,byte[] b,int offset,int length,byte pad){  int written=this.array.put(this.boundOffset(index),b,offset,this.boundLength(index,Math.min(length,b.length - offset)));  written+=this.writePadding(written + index,length - written,pad);  return written;}  }
class C{  public void onScannerClosed(){  mServiceConnection.stopRangingBeaconsInRegion(mScannerFragment);  mScannerFragment=null;  startScanning();}  }
class C{  public static byte[] toIPv4AddressBytes(int ipAddress){  return new byte[]{(byte)(ipAddress >>> 24),(byte)(ipAddress >>> 16),(byte)(ipAddress >>> 8),(byte)ipAddress};}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public TColor darken(float step){  return setBrightness(hsv[2] - step);}  }
class C{  protected AlertProtocol(){}  }
class C{  public synchronized void writeTo(final OutputStream out) throws IOException {  int remaining=this.count;  for (  byte[] buf : this.buffers) {    int c=Math.min(buf.length,remaining);    out.write(buf,0,c);    remaining-=c;    if (remaining == 0) {      break;    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void updateTarget(){  final String newName=HawkbitCommonUtil.trimAndNullIfEmpty(nameTextField.getValue());  final String newDesc=HawkbitCommonUtil.trimAndNullIfEmpty(descTextArea.getValue());  final Target latestTarget=targetManagement.findTargetByControllerIDWithDetails(controllerId);  setTargetValues(latestTarget,newName,newDesc);  targetManagement.updateTarget(latestTarget);  uINotification.displaySuccess(i18n.get("message.update.success",new Object[]{latestTarget.getName()}));  eventBus.publish(this,new TargetTableEvent(BaseEntityEventType.UPDATED_ENTITY,latestTarget));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.099 -0400",hash_original_method="8035859A70E80A27BD21848BB8758889",hash_generated_method="8F87544B56833E094EFCB2047EE6D657") synchronized void cleanupAfterFinishDisable(){  mAdapterProperties.clear();  for (  Integer srHandle : mServiceRecordToPid.keySet()) {    removeServiceRecordNative(srHandle);  }  mServiceRecordToPid.clear();  mProfilesConnected=0;  mProfilesConnecting=0;  mProfilesDisconnecting=0;  mAdapterConnectionState=BluetoothAdapter.STATE_DISCONNECTED;  mAdapterUuids=null;  mAdapterSdpHandles=null;  long ident=Binder.clearCallingIdentity();  try {    mBatteryStats.noteBluetoothOff();  } catch (  RemoteException e) {  } finally {    Binder.restoreCallingIdentity(ident);  }}  }
class C{  public void decompress(String path) throws IOException {  File bzip2=new File(path);  File unarchived=new File(bzip2.getName().replace(".bz2",""));  unarchived.createNewFile();  FileInputStream inputStr=new FileInputStream(bzip2);  inputStr.read();  inputStr.read();  BufferedInputStream buffStr=new BufferedInputStream(inputStr);  CBZip2InputStream input=new CBZip2InputStream(buffStr);  FileOutputStream outStr=new FileOutputStream(unarchived);  while (true) {    byte[] compressedBytes=new byte[DECOMPRESSION_CACHE];    int byteRead=input.read(compressedBytes);    outStr.write(compressedBytes,0,byteRead);    if (byteRead != DECOMPRESSION_CACHE) {      break;    }  }  input.close();  buffStr.close();  inputStr.close();  outStr.close();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-26 10:48:13.747 -0500",hash_original_method="0BAB10E65225F630421413950BF4C9CC",hash_generated_method="BAE002184E2A8D309FC4F2F19FD2FCDA") private void throwIfCurrentPageNotFinished(){  if (mCurrentPage != null) {    throw new IllegalStateException("Current page not finished!");  }}  }
class C{  public void assertion(boolean b,String msg){  if (!b) {    String fMsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{msg});    throw new RuntimeException(fMsg);  }}  }
class C{  OfRef(AbstractPipeline<?,T,?> upstream,Comparator<? super T> comparator){  super(upstream,StreamShape.REFERENCE,StreamOpFlag.IS_ORDERED | StreamOpFlag.NOT_SORTED);  this.isNaturalSort=false;  this.comparator=Objects.requireNonNull(comparator);}  }
class C{  public boolean handlePopBox(String deviceBrand){  pushHandleGps2Device();  CommandLine exeCommand=null;  if (deviceBrand.contains("HTC")) {    exeCommand=adbCommand("shell","uiautomator","runtest","/data/local/tmp/handlePopBox.jar","-c","com.test.device.gps.HTCGPSTest");  } else   if (deviceBrand.contains("Meizu")) {    exeCommand=adbCommand("shell","uiautomator","runtest","/data/local/tmp/handlePopBox.jar","-c","com.test.device.gps.MeizuGPSTest");  }  String output=executeCommandQuietly(exeCommand);  log.debug("run test {}",output);  try {    Thread.sleep(1000);  } catch (  InterruptedException ie) {    throw new RuntimeException(ie);  }  return output.contains("OK");}  }
class C{  public VcfEvalParams create(){  return new VcfEvalParams(this);}  }
class C{  public Set<UnaryRule> keySet(){  return entries.keySet();}  }
class C{  public void dispose(){  super.dispose();}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  @Override public String generateFinished() throws Exception {  return "";}  }
class C{  static int correctOrientation(final Context context,final CameraCharacteristics characteristics){  final Integer lensFacing=characteristics.get(CameraCharacteristics.LENS_FACING);  final boolean isFrontFacing=lensFacing != null && lensFacing == CameraCharacteristics.LENS_FACING_FRONT;  TermuxApiLogger.info((isFrontFacing ? "Using" : "Not using") + " a front facing camera.");  Integer sensorOrientation=characteristics.get(CameraCharacteristics.SENSOR_ORIENTATION);  if (sensorOrientation != null) {    TermuxApiLogger.info(String.format("Sensor orientation: %s degrees",sensorOrientation));  } else {    TermuxApiLogger.info("CameraCharacteristics didn't contain SENSOR_ORIENTATION. Assuming 0 degrees.");    sensorOrientation=0;  }  int deviceOrientation;  final int deviceRotation=((WindowManager)context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getRotation();switch (deviceRotation) {case Surface.ROTATION_0:    deviceOrientation=0;  break;case Surface.ROTATION_90:deviceOrientation=90;break;case Surface.ROTATION_180:deviceOrientation=180;break;case Surface.ROTATION_270:deviceOrientation=270;break;default :TermuxApiLogger.info(String.format("Default display has unknown rotation %d. Assuming 0 degrees.",deviceRotation));deviceOrientation=0;}TermuxApiLogger.info(String.format("Device orientation: %d degrees",deviceOrientation));int jpegOrientation;if (isFrontFacing) {jpegOrientation=sensorOrientation + deviceOrientation;} else {jpegOrientation=sensorOrientation - deviceOrientation;}jpegOrientation=(jpegOrientation + 360) % 360;TermuxApiLogger.info(String.format("Returning JPEG orientation of %d degrees",jpegOrientation));return jpegOrientation;}  }
class C{  @Override public boolean isInitialized(){  return client != null;}  }
class C{  public void onSuccess(int statusCode,Header[] headers,JSONObject response){  Log.w(LOG_TAG,"onSuccess(int, Header[], JSONObject) was not overriden, but callback was received");}  }
class C{  public T caseCharacterClassElement(CharacterClassElement object){  return null;}  }
class C{  @Reference(title="Fast and accurate computation of binomial probabilities",authors="C. Loader",booktitle="",url="http://projects.scipy.org/scipy/raw-attachment/ticket/620/loader2000Fast.pdf") private static double stirlingError(int n){  if (n < 16) {    return STIRLING_EXACT_ERROR[n << 1];  }  final double nn=n * n;  if (n > 500) {    return (S0 - S1 / nn) / n;  }  if (n > 80) {    return ((S0 - (S1 - S2 / nn)) / nn) / n;  }  if (n > 35) {    return ((S0 - (S1 - (S2 - S3 / nn) / nn) / nn) / n);  }  return ((S0 - (S1 - (S2 - (S3 - S4 / nn) / nn) / nn) / nn) / n);}  }
class C{  public Object clone(){  try {    IdentityHashMap<?,?> m=(IdentityHashMap<?,?>)super.clone();    m.entrySet=null;    m.table=table.clone();    return m;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  private void decodeTonesAmplitude(int chNum,boolean bandHasTones[]){  WavesData dst[]=ctx.channels[chNum].tonesInfo;  WavesData ref[]=ctx.channels[0].tonesInfo;  final int refwaves[]=new int[48];  if (chNum > 0) {    for (int sb=0; sb < ctx.wavesInfo.numToneBands; sb++) {      if (!bandHasTones[sb] || dst[sb].numWavs == 0) {        continue;      }      int wsrc=dst[sb].startIndex;      int wref=ref[sb].startIndex;      for (int j=0; j < dst[sb].numWavs; j++) {        int fi=0;        int maxdiff=1024;        for (int i=0; i < ref[sb].numWavs; i++) {          int diff=abs(ctx.wavesInfo.waves[wsrc + j].freqIndex - ctx.wavesInfo.waves[wref + i].freqIndex);          if (diff < maxdiff) {            maxdiff=diff;            fi=i;          }        }        if (maxdiff < 8) {          refwaves[dst[sb].startIndex + j]=fi + ref[sb].startIndex;        } else         if (j < ref[sb].numWavs) {          refwaves[dst[sb].startIndex + j]=j + ref[sb].startIndex;        } else {          refwaves[dst[sb].startIndex + j]=-1;        }      }    }  }  int mode=br.read(chNum + 1);switch (mode) {case 0:    for (int sb=0; sb < ctx.wavesInfo.numToneBands; sb++) {      if (!bandHasTones[sb] || dst[sb].numWavs == 0) {        continue;      }      if (ctx.wavesInfo.amplitudeMode != 0) {        for (int i=0; i < dst[sb].numWavs; i++) {          ctx.wavesInfo.waves[dst[sb].startIndex + i].ampSf=br.read(6);        }      } else {        ctx.wavesInfo.waves[dst[sb].startIndex].ampSf=br.read(6);      }    }  break;case 1:for (int sb=0; sb < ctx.wavesInfo.numToneBands; sb++) {  if (!bandHasTones[sb] || dst[sb].numWavs == 0) {    continue;  }  if (ctx.wavesInfo.amplitudeMode != 0) {    for (int i=0; i < dst[sb].numWavs; i++) {      ctx.wavesInfo.waves[dst[sb].startIndex + i].ampSf=tone_vlc_tabs[3].getVLC2(br) + 20;    }  } else {    ctx.wavesInfo.waves[dst[sb].startIndex].ampSf=tone_vlc_tabs[4].getVLC2(br) + 24;  }}break;case 2:for (int sb=0; sb < ctx.wavesInfo.numToneBands; sb++) {if (!bandHasTones[sb] || dst[sb].numWavs == 0) {continue;}for (int i=0; i < dst[sb].numWavs; i++) {int delta=tone_vlc_tabs[5].getVLC2(br);delta=signExtend(delta,5);int pred=refwaves[dst[sb].startIndex + i] >= 0 ? ctx.wavesInfo.waves[refwaves[dst[sb].startIndex + i]].ampSf : 34;ctx.wavesInfo.waves[dst[sb].startIndex + i].ampSf=(pred + delta) & 0x3F;}}break;case 3:for (int sb=0; sb < ctx.wavesInfo.numToneBands; sb++) {if (!bandHasTones[sb]) {continue;}for (int i=0; i < dst[sb].numWavs; i++) {ctx.wavesInfo.waves[dst[sb].startIndex + i].ampSf=refwaves[dst[sb].startIndex + i] >= 0 ? ctx.wavesInfo.waves[refwaves[dst[sb].startIndex + i]].ampSf : 32;}}break;}}  }
class C{  protected void unsuccessfulAuthentication(HttpServletRequest servletRequest,AuthenticationException authenticationException){  LOGGER.debug("Authentication failure: ",authenticationException);  invalidateUser(servletRequest,false);  servletRequest.getSession().setAttribute(WebAttributes.AUTHENTICATION_EXCEPTION,authenticationException);}  }
class C{  public Queue(){}  }
class C{  public ADALAccountInfo(final ADALAuthenticator authenticator,final AuthenticationResult authenticationResult,final ServiceInfo oneDriveServiceInfo,final ILogger logger){  mAuthenticator=authenticator;  mAuthenticationResult=authenticationResult;  mOneDriveServiceInfo=oneDriveServiceInfo;  mLogger=logger;}  }
class C{  @Override public void replaceMissingValues(double[] array){  if ((array == null) || (array.length != m_NumAttributes)) {    throw new IllegalArgumentException("Unequal number of attributes!");  }  double[] tempValues=new double[m_AttValues.length];  int[] tempIndices=new int[m_AttValues.length];  int vals=0;  for (int i=0; i < m_AttValues.length; i++) {    if (isMissingSparse(i)) {      if (array[m_Indices[i]] != 0) {        tempValues[vals]=array[m_Indices[i]];        tempIndices[vals]=m_Indices[i];        vals++;      }    } else {      tempValues[vals]=m_AttValues[i];      tempIndices[vals]=m_Indices[i];      vals++;    }  }  m_AttValues=new double[vals];  m_Indices=new int[vals];  System.arraycopy(tempValues,0,m_AttValues,0,vals);  System.arraycopy(tempIndices,0,m_Indices,0,vals);}  }
class C{  public ModbusSerialTransaction(AbstractSerialConnection con){  setSerialConnection(con);}  }
class C{  public void attributeDecl(String arg0,String arg1,String arg2,String arg3,String arg4) throws SAXException {  m_handler.attributeDecl(arg0,arg1,arg2,arg3,arg4);}  }
class C{  static double checkDouble(double d) throws JSONException {  if (Double.isInfinite(d) || Double.isNaN(d)) {    throw new JSONException("Forbidden numeric value: " + d);  }  return d;}  }
class C{  public String toString(){  return this.getName();}  }
class C{  protected boolean validatePendingAdd(Object child){  return true;}  }
class C{  public void log(LogRecord record){  throw new RuntimeException();}  }
class C{  private boolean doAcquireSharedNanos(int arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return true;        }      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public int[][] crossTab(int child,int parent,int lag){  int[][] ns=new int[2][2];  ns[0][0]=0;  ns[0][1]=0;  ns[1][0]=0;  ns[1][1]=0;  int j;  for (int i=lag; i < ntimes; i++) {    j=i - lag;    ns[cases[i][child]][cases[j][parent]]++;  }  return ns;}  }
class C{  public boolean isReadable(long arc){switch ((int)arc) {case 2:    return true;default :  break;}return false;}  }
class C{  public static Ethernet DhcpDiscoveryRequestEthernet(MacAddress hostMac){  List<DHCPOption> optionList=new ArrayList<DHCPOption>();  byte[] requestValue=new byte[4];  requestValue[0]=requestValue[1]=requestValue[2]=requestValue[3]=0;  DHCPOption requestOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_RequestedIP.getValue()).setLength((byte)4).setData(requestValue);  byte[] msgTypeValue=new byte[1];  msgTypeValue[0]=1;  DHCPOption msgTypeOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_MessageType.getValue()).setLength((byte)1).setData(msgTypeValue);  byte[] reqParamValue=new byte[4];  reqParamValue[0]=1;  reqParamValue[1]=3;  reqParamValue[2]=6;  reqParamValue[3]=42;  DHCPOption reqParamOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_RequestedParameters.getValue()).setLength((byte)4).setData(reqParamValue);  byte[] clientIdValue=new byte[7];  clientIdValue[0]=1;  System.arraycopy(hostMac.getBytes(),0,clientIdValue,1,6);  DHCPOption clientIdOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_ClientID.getValue()).setLength((byte)7).setData(clientIdValue);  DHCPOption endOption=new DHCPOption().setCode(DHCP.DHCPOptionCode.OptionCode_END.getValue()).setLength((byte)0).setData(null);  optionList.add(requestOption);  optionList.add(msgTypeOption);  optionList.add(reqParamOption);  optionList.add(clientIdOption);  optionList.add(endOption);  Ethernet requestPacket=new Ethernet();  requestPacket.setSourceMACAddress(hostMac.getBytes()).setDestinationMACAddress(broadcastMac).setEtherType(Ethernet.TYPE_IPv4).setPayload(new IPv4().setVersion((byte)4).setDiffServ((byte)0).setIdentification((short)100).setFlags((byte)0).setFragmentOffset((short)0).setTtl((byte)250).setProtocol(IpProtocol.UDP).setChecksum((short)0).setSourceAddress(0).setDestinationAddress(broadcastIp).setPayload(new UDP().setSourcePort(UDP.DHCP_CLIENT_PORT).setDestinationPort(UDP.DHCP_SERVER_PORT).setChecksum((short)0).setPayload(new DHCP().setOpCode(DHCP.OPCODE_REQUEST).setHardwareType(DHCP.HWTYPE_ETHERNET).setHardwareAddressLength((byte)6).setHops((byte)0).setTransactionId(0x00003d1d).setSeconds((short)0).setFlags((short)0).setClientIPAddress(0).setYourIPAddress(0).setServerIPAddress(0).setGatewayIPAddress(0).setClientHardwareAddress(hostMac.getBytes()).setOptions(optionList))));  return requestPacket;}  }
class C{  private Drawable createElevatedBackgroundShape(Drawable foreground){  Drawable backgroundDrawable=null;  if (foreground == null) {    RectShape foregroundRect=new RectShape();    ShapeDrawable foregroundShape=new ShapeDrawable(foregroundRect);    foregroundShape.getPaint().setColor(Color.TRANSPARENT);    foreground=foregroundShape;  }  RectShape rect1=new RectShape();  ShapeDrawable shape1=new ShapeDrawable(rect1);  shape1.getPaint().setColor(Color.parseColor(SHAPE_1_COLOR));  shape1.invalidateSelf();  RectShape rect2=new RectShape();  ShapeDrawable shape2=new ShapeDrawable(rect2);  shape2.getPaint().setColor(Color.parseColor(SHAPE_2_COLOR));  shape2.invalidateSelf();  RectShape rect3=new RectShape();  ShapeDrawable shape3=new ShapeDrawable(rect3);  shape3.getPaint().setColor(Color.parseColor(SHAPE_3_COLOR));  shape3.invalidateSelf();  RectShape rect4=new RectShape();  ShapeDrawable shape4=new ShapeDrawable(rect4);  shape4.getPaint().setColor(Color.parseColor(SHAPE_2_COLOR));  shape4.invalidateSelf();  Drawable[] layerArray={shape1,shape2,shape3,shape4,foreground};  LayerDrawable drawable=new LayerDrawable(layerArray);  drawable.setLayerInset(0,0,0,0,0);  drawable.setLayerInset(1,0,0,0,(int)d2x(1));  drawable.setLayerInset(2,0,0,0,(int)d2x(2));  drawable.setLayerInset(3,0,0,0,(int)d2x(3));  drawable.setLayerInset(4,0,0,0,(int)d2x(4));  backgroundDrawable=drawable;  return backgroundDrawable;}  }
class C{  private void handleInterruption(){}  }
class C{  public boolean isMandatory(){  return m_button.isMandatory();}  }
class C{  public IMouseState createEdgePressedRightState(final Edge e,final MouseEvent event){  final CEdgePressedRightState state=new CEdgePressedRightState(this,m_graph,e,event);  m_factory.createEdgePressedRightAction().execute(state,event);  return state;}  }
class C{  public ZipfianGenerator(long _items){  this(0,_items - 1);}  }
class C{  @SuppressWarnings("ConstantConditions") IgfsImpl(IgfsContext igfsCtx) throws IgniteCheckedException {  assert igfsCtx != null;  this.igfsCtx=igfsCtx;  cfg=igfsCtx.configuration();  log=igfsCtx.kernalContext().log(IgfsImpl.class);  evts=igfsCtx.kernalContext().event();  meta=igfsCtx.meta();  data=igfsCtx.data();  secondaryFs=cfg.getSecondaryFileSystem();  if (secondaryFs instanceof IgfsKernalContextAware)   ((IgfsKernalContextAware)secondaryFs).setKernalContext(igfsCtx.kernalContext());  if (secondaryFs instanceof LifecycleAware)   ((LifecycleAware)secondaryFs).start();  IgfsMode dfltMode;  if (secondaryFs == null) {    if (cfg.getDefaultMode() == PROXY)     throw new IgniteCheckedException("Mode cannot be PROXY if secondary file system hasn't been defined.");    dfltMode=PRIMARY;  } else   dfltMode=cfg.getDefaultMode();  Map<String,IgfsMode> cfgModes=new LinkedHashMap<>();  Map<String,IgfsMode> dfltModes=new LinkedHashMap<>(4,1.0f);  if (cfg.isInitializeDefaultPathModes() && IgfsUtils.isDualMode(dfltMode)) {    dfltModes.put("/ignite/primary",PRIMARY);    if (secondaryFs != null) {      dfltModes.put("/ignite/proxy",PROXY);      dfltModes.put("/ignite/sync",DUAL_SYNC);      dfltModes.put("/ignite/async",DUAL_ASYNC);    }  }  cfgModes.putAll(dfltModes);  if (cfg.getPathModes() != null) {    for (    Map.Entry<String,IgfsMode> e : cfg.getPathModes().entrySet()) {      if (!dfltModes.containsKey(e.getKey()))       cfgModes.put(e.getKey(),e.getValue()); else       U.warn(log,"Ignoring path mode because it conflicts with Ignite reserved path " + "(use another path) [mode=" + e.getValue() + ", path="+ e.getKey()+ ']');    }  }  ArrayList<T2<IgfsPath,IgfsMode>> modes=null;  if (!cfgModes.isEmpty()) {    modes=new ArrayList<>(cfgModes.size());    for (    Map.Entry<String,IgfsMode> mode : cfgModes.entrySet()) {      IgfsMode mode0;      if (mode.getValue() == PROXY) {        if (secondaryFs == null)         throw new IgniteCheckedException("Mode cannot be PROXY if secondary file system hasn't" + " been defined: " + mode.getKey());        mode0=PROXY;      } else       mode0=secondaryFs == null ? PRIMARY : mode.getValue();      try {        modes.add(new T2<>(new IgfsPath(mode.getKey()),mode0));      } catch (      IllegalArgumentException e) {        throw new IgniteCheckedException("Invalid path found in mode pattern: " + mode.getKey(),e);      }    }  }  modeRslvr=new IgfsModeResolver(dfltMode,modes);  Object secondaryFsPayload=null;  if (secondaryFs instanceof HadoopPayloadAware)   secondaryFsPayload=((HadoopPayloadAware)secondaryFs).getPayload();  secondaryPaths=new IgfsPaths(secondaryFsPayload,dfltMode,modeRslvr.modesOrdered());  String dataCacheName=igfsCtx.configuration().getDataCacheName();  for (  CacheConfiguration cacheCfg : igfsCtx.kernalContext().config().getCacheConfiguration()) {    if (F.eq(dataCacheName,cacheCfg.getName())) {      EvictionPolicy evictPlc=cacheCfg.getEvictionPolicy();      if (evictPlc != null & evictPlc instanceof IgfsPerBlockLruEvictionPolicy)       this.evictPlc=(IgfsPerBlockLruEvictionPolicy)evictPlc;      break;    }  }  dualPool=secondaryFs != null ? new IgniteThreadPoolExecutor(4,Integer.MAX_VALUE,5000L,new SynchronousQueue<Runnable>(),new IgfsThreadFactory(cfg.getName()),null) : null;}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public boolean isNumeral(){  return typeString.startsWith(NUMERAL);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:58.581 -0500",hash_original_method="DB6E28AB316658FAB51CA26FDC440ADD",hash_generated_method="404060AB0856B228DA7A79EF4FA4AA51") public long clearMetaKeyState(long state,int which){  if ((which & META_SHIFT_ON) != 0 && (state & META_CAP_LOCKED) != 0) {    state&=~META_SHIFT_MASK;  }  if ((which & META_ALT_ON) != 0 && (state & META_ALT_LOCKED) != 0) {    state&=~META_ALT_MASK;  }  if ((which & META_SYM_ON) != 0 && (state & META_SYM_LOCKED) != 0) {    state&=~META_SYM_MASK;  }  return state;}  }
class C{  @Override public Object[] toArray(){  Object[] result;  Object[] internal;  int i;  internal=super.toArray();  result=new Object[internal.length];  for (i=0; i < internal.length; i++) {    result[i]=((CheckBoxListItem)internal[i]).getContent();  }  return result;}  }
class C{  public static String[] initPathsFromProperties(Properties p,String propName,String[] defaultPaths){  String[] ret=stringArrayFromProperties(p,propName,";");  if (ret == null) {    ret=defaultPaths;  }  return ret;}  }
class C{  public boolean provides(Class<?> type){  if (getDisabled()) {    return false;  }  if (type.equals(jmri.ThrottleManager.class)) {    return true;  }  if (type.equals(jmri.PowerManager.class)) {    return true;  }  if (type.equals(jmri.SensorManager.class)) {    return true;  }  if (type.equals(jmri.TurnoutManager.class)) {    return true;  }  if (type.equals(jmri.ReporterManager.class)) {    return true;  }  if (type.equals(jmri.ProgrammerManager.class)) {    return true;  }  if (type.equals(jmri.GlobalProgrammerManager.class)) {    return true;  }  return false;}  }
class C{  public FullFrameRect(IFilter program){  mFilter=program;  Matrix.setIdentityM(IDENTITY_MATRIX,0);}  }
class C{  public static void copyData(BufferedImage src,Rectangle srcRect,BufferedImage dst,Point destP){  boolean srcAlpha=src.getColorModel().hasAlpha();  boolean dstAlpha=dst.getColorModel().hasAlpha();  if (srcAlpha == dstAlpha)   if ((!srcAlpha) || (src.isAlphaPremultiplied() == dst.isAlphaPremultiplied())) {    copyData(src.getRaster(),dst.getRaster());    return;  }  int[] pixel=null;  Raster srcR=src.getRaster();  WritableRaster dstR=dst.getRaster();  int bands=dstR.getNumBands();  int dx=destP.x - srcRect.x;  int dy=destP.y - srcRect.y;  int w=srcRect.width;  int x0=srcRect.x;  int y0=srcRect.y;  int y1=y0 + srcRect.height - 1;  if (!srcAlpha) {    int[] oPix=new int[bands * w];    int out=(w * bands) - 1;    while (out >= 0) {      oPix[out]=255;      out-=bands;    }    int b, in;    for (int y=y0; y <= y1; y++) {      pixel=srcR.getPixels(x0,y,w,1,pixel);      in=w * (bands - 1) - 1;      out=(w * bands) - 2;switch (bands) {case 4:        while (in >= 0) {          oPix[out--]=pixel[in--];          oPix[out--]=pixel[in--];          oPix[out--]=pixel[in--];          out--;        }      break;default :    while (in >= 0) {      for (b=0; b < bands - 1; b++)       oPix[out--]=pixel[in--];      out--;    }}dstR.setPixels(x0 + dx,y + dy,w,1,oPix);}} else if (dstAlpha && dst.isAlphaPremultiplied()) {int a, b, alpha, in, fpNorm=(1 << 24) / 255, pt5=1 << 23;for (int y=y0; y <= y1; y++) {pixel=srcR.getPixels(x0,y,w,1,pixel);in=bands * w - 1;switch (bands) {case 4:  while (in >= 0) {    a=pixel[in];    if (a == 255)     in-=4; else {      in--;      alpha=fpNorm * a;      pixel[in]=(pixel[in] * alpha + pt5) >>> 24;      in--;      pixel[in]=(pixel[in] * alpha + pt5) >>> 24;      in--;      pixel[in]=(pixel[in] * alpha + pt5) >>> 24;      in--;    }  }break;default :while (in >= 0) {a=pixel[in];if (a == 255) in-=bands; else {  in--;  alpha=fpNorm * a;  for (b=0; b < bands - 1; b++) {    pixel[in]=(pixel[in] * alpha + pt5) >>> 24;    in--;  }}}}dstR.setPixels(x0 + dx,y + dy,w,1,pixel);}} else if (dstAlpha && !dst.isAlphaPremultiplied()) {int a, b, ialpha, in, fpNorm=0x00FF0000, pt5=1 << 15;for (int y=y0; y <= y1; y++) {pixel=srcR.getPixels(x0,y,w,1,pixel);in=(bands * w) - 1;switch (bands) {case 4:while (in >= 0) {a=pixel[in];if ((a <= 0) || (a >= 255)) in-=4; else {in--;ialpha=fpNorm / a;pixel[in]=(pixel[in] * ialpha + pt5) >>> 16;in--;pixel[in]=(pixel[in] * ialpha + pt5) >>> 16;in--;pixel[in]=(pixel[in] * ialpha + pt5) >>> 16;in--;}}break;default :while (in >= 0) {a=pixel[in];if ((a <= 0) || (a >= 255)) in-=bands; else {in--;ialpha=fpNorm / a;for (b=0; b < bands - 1; b++) {pixel[in]=(pixel[in] * ialpha + pt5) >>> 16;in--;}}}}dstR.setPixels(x0 + dx,y + dy,w,1,pixel);}} else if (src.isAlphaPremultiplied()) {int[] oPix=new int[bands * w];int a, b, ialpha, in, out, fpNorm=0x00FF0000, pt5=1 << 15;for (int y=y0; y <= y1; y++) {pixel=srcR.getPixels(x0,y,w,1,pixel);in=(bands + 1) * w - 1;out=(bands * w) - 1;while (in >= 0) {a=pixel[in];in--;if (a > 0) {if (a < 255) {ialpha=fpNorm / a;for (b=0; b < bands; b++) oPix[out--]=(pixel[in--] * ialpha + pt5) >>> 16;} else for (b=0; b < bands; b++) oPix[out--]=pixel[in--];} else {in-=bands;for (b=0; b < bands; b++) oPix[out--]=255;}}dstR.setPixels(x0 + dx,y + dy,w,1,oPix);}} else {Rectangle dstRect=new Rectangle(destP.x,destP.y,srcRect.width,srcRect.height);for (int b=0; b < bands; b++) copyBand(srcR,srcRect,b,dstR,dstRect,b);}}  }
class C{  private void unregisterFromContext(){  assert !isRunning.get();  context.unregisterThread(this);  int signalId=signal.getNumber();synchronized (registeredSignals) {    if (registeredSignals.get(signalId) == this) {      registeredSignals.remove(signalId);    }  }  lock.lock();  try {    if (!stack.isFreed()) {      stack.free();    }  }  finally {    lock.unlock();  }}  }
class C{  public T done(){  return root;}  }
class C{  @Override public int compare(Map.Entry<List<String>,List<Double>> e1,Map.Entry<List<String>,List<Double>> e2){  int r=0;  List<String> keyList1=e1.getKey();  List<Double> valueList1=e1.getValue();  List<String> keyList2=e2.getKey();  List<Double> valueList2=e2.getValue();  for (  SortOption so : sortOptions) {    int index=so.getIndex();    if (index == -1) {      continue;    }    if (!so.isInGroupby()) {      Double value1=valueList1.get(index);      Double value2=valueList2.get(index);      r=value1.compareTo(value2);    } else {      String key1=keyList1.get(index);      String key2=keyList2.get(index);      r=key1.compareTo(key2);    }    if (r == 0)     continue;    if (!so.isAscendant()) {      r=-r;    }    return r;  }  if (r == 0) {    return new GroupbyFieldsComparator().compare(keyList1,keyList2);  }  return r;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public EmailIntentBuilder subject(@NonNull String subject){  checkNotNull(subject);  checkNoLineBreaks(subject);  this.subject=subject;  return this;}  }
class C{  public HttpAuthenticationException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override protected void showPopUp(Positionable p,MouseEvent event){  if (!((JComponent)p).isVisible()) {    return;  }  JPopupMenu popup=new JPopupMenu();  PositionablePopupUtil util=p.getPopupUtility();  if (p.isEditable()) {    if (p.doViemMenu()) {      popup.add(p.getNameString());      setPositionableMenu(p,popup);      if (p.isPositionable()) {        setShowCoordinatesMenu(p,popup);        setShowAlignmentMenu(p,popup);      }      setDisplayLevelMenu(p,popup);      setHiddenMenu(p,popup);      popup.addSeparator();    }    boolean popupSet=false;    popupSet=p.setRotateOrthogonalMenu(popup);    popupSet=p.setRotateMenu(popup);    popupSet=p.setScaleMenu(popup);    if (popupSet) {      popup.addSeparator();      popupSet=false;    }    popupSet=p.setEditIconMenu(popup);    if (popupSet) {      popup.addSeparator();      popupSet=false;    }    popupSet=p.setTextEditMenu(popup);    if (util != null) {      util.setFixedTextMenu(popup);      util.setTextMarginMenu(popup);      util.setTextBorderMenu(popup);      util.setTextFontMenu(popup);      util.setBackgroundMenu(popup);      util.setTextJustificationMenu(popup);      util.setTextOrientationMenu(popup);      util.copyItem(popup);      popup.addSeparator();      util.propertyUtil(popup);      util.setAdditionalEditPopUpMenu(popup);      popupSet=true;    }    if (popupSet) {      popup.addSeparator();      popupSet=false;    }    p.setDisableControlMenu(popup);    p.showPopUp(popup);    setRemoveMenu(p,popup);  } else {    p.showPopUp(popup);    if (util != null) {      util.setAdditionalViewPopUpMenu(popup);    }  }  popup.show((Component)p,p.getWidth() / 2,p.getHeight() / 2);}  }
class C{  public TranslationHandler(int AD_Client_ID){  m_AD_Client_ID=AD_Client_ID;}  }
class C{  public static boolean containsAnyUuid(ParcelUuid[] uuidA,ParcelUuid[] uuidB){  if (uuidA == null && uuidB == null)   return true;  if (uuidA == null) {    return uuidB.length == 0 ? true : false;  }  if (uuidB == null) {    return uuidA.length == 0 ? true : false;  }  HashSet<ParcelUuid> uuidSet=new HashSet<ParcelUuid>(Arrays.asList(uuidA));  for (  ParcelUuid uuid : uuidB) {    if (uuidSet.contains(uuid))     return true;  }  return false;}  }
class C{  public ExifTag buildTag(int tagId,Object val){  int ifdId=getTrueIfd(tagId);  return buildTag(tagId,ifdId,val);}  }
class C{  @Override public V waitForValue() throws ExecutionException {  if (computedReference == UNSET) {    boolean interrupted=false;    try {synchronized (this) {        while (computedReference == UNSET) {          try {            wait();          } catch (          InterruptedException ie) {            interrupted=true;          }        }      }    }  finally {      if (interrupted) {        Thread.currentThread().interrupt();      }    }  }  return computedReference.waitForValue();}  }
class C{  public void removeTransactionsSentFromDepartedProxy(InternalDistributedMember proxyServer){  final Set<TXId> txIds=getTransactionsSentFromDepartedProxy(proxyServer);  if (txIds.isEmpty()) {    return;  }  if (logger.isDebugEnabled()) {    logger.debug("expiring the following transactions: {}",txIds);  }synchronized (this.hostedTXStates) {    Iterator<Map.Entry<TXId,TXStateProxy>> iterator=this.hostedTXStates.entrySet().iterator();    while (iterator.hasNext()) {      Map.Entry<TXId,TXStateProxy> entry=iterator.next();      if (txIds.contains(entry.getKey())) {        entry.getValue().close();        iterator.remove();      }    }  }}  }
class C{  public DOpenPkcs11KeyStore(JFrame parent){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  setTitle(res.getString("DOpenPkcs11KeyStore.Title"));  initComponents();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:29.068 -0500",hash_original_method="0F9A3950A7A9E5BB31D919F8BB19673E",hash_generated_method="2066042C4E4301B8E406A51F0CB2700B") public long seekTo(long pos){  addTaint(pos);  return getTaintLong();}  }
class C{  protected void onSetInviteOnly(String channel,String sourceNick,String sourceLogin,String sourceHostname){}  }
class C{  @Override public Range findRangeBounds(CategoryDataset dataset){  return findRangeBounds(dataset,true);}  }
class C{  public void benchHasParentMatchAll(){  TermsByQueryRequestBuilder stringFilter=this.newTermsByQueryRequestBuilder();  stringFilter.setIndices(PARENT_INDEX).setTypes(PARENT_TYPE).setField("id").setTermsEncoding(TermsByQueryRequest.TermsEncoding.LONG);  TermsByQueryRequestBuilder longFilter=this.newTermsByQueryRequestBuilder();  longFilter.setIndices(PARENT_INDEX).setTypes(PARENT_TYPE).setField("num").setTermsEncoding(TermsByQueryRequest.TermsEncoding.LONG);  long tookString=0;  long tookLong=0;  long expected=NUM_PARENTS;  warmFieldData("id","pid");  warmFieldData("num","num");  log("==== HAS PARENT MATCH-ALL ====");  for (int i=0; i < NUM_QUERIES; i++) {    tookString+=runQuery("string",i,expected,stringFilter);    tookLong+=runQuery("long",i,expected,longFilter);  }  log("string: " + (tookString / NUM_QUERIES) + "ms avg");  log("long  : " + (tookLong / NUM_QUERIES) + "ms avg");  log("");}  }
class C{  public void updatePoiTags(PoiType poiType){  bus.post(new InternalUpdatePoiTagsEvent(poiType));}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage){  String eol=System.getProperty("line.separator","\n");  StringBuilder expected=new StringBuilder();  int maxSize=0;  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');    }    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {      expected.append("...");    }    expected.append(eol).append("    ");  }  String retval="Encountered \"";  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    if (i != 0)     retval+=" ";    if (tok.kind == 0) {      retval+=tokenImage[0];      break;    }    retval+=" " + tokenImage[tok.kind];    retval+=" \"";    retval+=add_escapes(tok.image);    retval+=" \"";    tok=tok.next;  }  retval+="\" at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn;  retval+="." + eol;  if (expectedTokenSequences.length == 1) {    retval+="Was expecting:" + eol + "    ";  } else {    retval+="Was expecting one of:" + eol + "    ";  }  retval+=expected.toString();  return retval;}  }
class C{  public boolean isGradient(){  return (gradient);}  }
class C{  public String serialize(Object object) throws ConverterException {  deep=0;  StringBuilder sb=new StringBuilder();  _serialize(object,sb,new HashSet<Object>());  return sb.toString();}  }
class C{  private void handleMediaUnmounted(Intent intent){  String path=intent.getDataString().replace("file://","");  if (!SystemUtils.isPrimaryExternalPath(new File(path)) && SystemUtils.isPrimaryExternalStorageMounted()) {    File primaryExternal=Environment.getExternalStorageDirectory();    ConfigurationManager.instance().setStoragePath(primaryExternal.getAbsolutePath());  }}  }
class C{  public void testProperties() throws Throwable {  SerializerOptions options=new SerializerOptions(PropertiesReader.loadFromClasspath("serializer-test.properties").properties());  assertTrue(options.whitelist());  assertTrue(options.allocator() instanceof PooledHeapAllocator);  assertEquals(options.types().get(1),ArrayList.class);  assertEquals(options.serializers().get(1),ArrayListSerializer.class);  assertEquals(options.types().get(2),Buffer.class);  assertEquals(options.abstractSerializers().get(2),BufferSerializer.class);  assertEquals(options.types().get(3),CatalystSerializable.class);  assertEquals(options.defaultSerializers().get(3),CatalystSerializableSerializer.class);}  }
class C{  public WampClientBuilder withCloseOnErrors(boolean closeOnErrors){  this.closeOnErrors=closeOnErrors;  return this;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static List convertClassNamesToClasses(List classNames){  if (classNames == null) {    return null;  }  List classes=new ArrayList(classNames.size());  for (Iterator it=classNames.iterator(); it.hasNext(); ) {    String className=(String)it.next();    try {      classes.add(Class.forName(className));    } catch (    Exception ex) {      classes.add(null);    }  }  return classes;}  }
class C{  @VisibleForTesting static int chooseTableSize(int setSize){  if (setSize == 1) {    return 2;  }  int tableSize=Integer.highestOneBit(setSize - 1) << 1;  while (tableSize * DESIRED_LOAD_FACTOR < setSize) {    tableSize<<=1;  }  return tableSize;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return stack.getUIMgrSafe().getVideoFrame().getMediaTitle();}  }
class C{  protected ByteVector write(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals){  ByteVector v=new ByteVector();  v.data=value;  v.length=value.length;  return v;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void deserializeExtension(WalletExtension extension,byte[] data) throws Exception {  lock.lock();  keyChainGroupLock.lock();  try {    extension.deserializeWalletExtension(this,data);    extensions.put(extension.getWalletExtensionID(),extension);  } catch (  Throwable throwable) {    log.error("Error during extension deserialization",throwable);    extensions.remove(extension.getWalletExtensionID());    Throwables.propagate(throwable);  } finally {    keyChainGroupLock.unlock();    lock.unlock();  }}  }
class C{  private void tryCorrectPhotoFileCaptured(){  if (mPhotoFileCapture == null || mFilesCreatedWhileCapturePhoto == null || mFilesCreatedWhileCapturePhoto.size() <= 0)   return;  long captureSize=mPhotoFileCapture.length();  for (  File file : mFilesCreatedWhileCapturePhoto) {    if (MediaUtils.isImageExtension(MediaUtils.getFileExtension(file)) && file.length() >= captureSize && !file.equals(mPhotoFileCapture)) {      boolean value=mPhotoFileCapture.delete();      mPhotoFileCapture=file;      Log.i(TAG,String.format("Try correct photo file: Delete duplicate photos in [%s] [%s]",mPhotoFileCapture,value));      return;    }  }}  }
class C{  public boolean intersects(Rectangle2D rect){  return intersects(rect.getX(),rect.getY(),rect.getSize().getWidth(),rect.getSize().getHeight());}  }
class C{  public ArithmaticExpression add(Object object){  this.getChildren().add(new ConstantExpression(object));  return this;}  }
class C{  public void writeNamedTag(String name,Tag tag) throws IOException {  checkNotNull(name);  checkNotNull(tag);  int type=NBTUtils.getTypeCode(tag.getClass());  byte[] nameBytes=name.getBytes(NBTConstants.CHARSET);  os.writeByte(type);  os.writeShort(nameBytes.length);  os.write(nameBytes);  if (type == NBTConstants.TYPE_END) {    throw new IOException("Named TAG_End not permitted.");  }  writeTagPayload(tag);}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit){  return offer(e);}  }
class C{  @Override public boolean add(E e){  ConcurrentMap<E,Object> m=(ConcurrentMap<E,Object>)map;  return m.putIfAbsent(e,e) == null;}  }
class C{  public String draw(IGraphEntity n){  return "[fillcolor=\".8 .8 .8\" label=\"" + n.nodeLabel() + "\"]";}  }
class C{  public Histogram2D(DataSource data,Orientation orientation,int breakCount){  this(data,orientation);  int count=getData().getColumnCount();  if (orientation == Orientation.HORIZONTAL) {    count=getData().getRowCount();  }  for (int index=0; index < count; index++) {    double min, max;    if (orientation == Orientation.HORIZONTAL) {      min=((Number)getData().getRowStatistics(Statistics.MIN).get(0,index)).doubleValue();      max=((Number)getData().getRowStatistics(Statistics.MAX).get(0,index)).doubleValue();    } else {      min=((Number)getData().getColumnStatistics(Statistics.MIN).get(index,0)).doubleValue();      max=((Number)getData().getColumnStatistics(Statistics.MAX).get(index,0)).doubleValue();    }    double delta=(max - min + Double.MIN_VALUE) / breakCount;    Number[] breaks=new Double[breakCount + 1];    for (int i=0; i < breaks.length; i++) {      breaks[i]=min + i * delta;    }    this.breaks.add(breaks);  }  dataUpdated(getData());}  }
class C{  public Paginate build(){  if (absListView.getAdapter() == null) {    throw new IllegalStateException("Adapter needs to be set!");  }  if (loadingListItemCreator == null) {    loadingListItemCreator=LoadingListItemCreator.DEFAULT;  }  return new AbsListViewPaginate(absListView,callbacks,loadingTriggerThreshold,onScrollListener,addLoadingListItem,loadingListItemCreator);}  }
class C{  public String alienOrder(String[] words){  String result="";  if (words == null || words.length == 0) {    return result;  }  Map<Character,Set<Character>> map=new HashMap<>();  Map<Character,Integer> degree=new HashMap<>();  for (  String s : words) {    for (    char c : s.toCharArray()) {      degree.put(c,0);    }  }  for (int i=0; i < words.length - 1; i++) {    String cur=words[i];    String next=words[i + 1];    if (cur.length() > next.length() && cur.startsWith(next)) {      return "";    }    for (int j=0; j < Math.min(cur.length(),next.length()); j++) {      char c1=cur.charAt(j);      char c2=next.charAt(j);      if (c1 != c2) {        Set<Character> set=map.containsKey(c1) ? map.get(c1) : new HashSet<>();        if (!set.contains(c2)) {          set.add(c2);          map.put(c1,set);          degree.put(c2,degree.get(c2) + 1);        }        break;      }    }  }  Queue<Character> q=new LinkedList<>();  for (  char c : degree.keySet()) {    if (degree.get(c) == 0) {      q.add(c);    }  }  while (!q.isEmpty()) {    char c=q.poll();    result+=c;    if (map.containsKey(c)) {      for (      char c2 : map.get(c)) {        degree.put(c2,degree.get(c2) - 1);        if (degree.get(c2) == 0) {          q.add(c2);        }      }    }  }  if (result.length() != degree.size()) {    return "";  }  return result;}  }
class C{  protected PostgresServerFilesITBase(String caseName,String sql,String expected,String error,String[] params){  this.caseName=caseName;  this.sql=sql.trim();  this.expected=expected;  this.error=error;  this.params=params;}  }
class C{  public void deleteTipoDocVitByIdTipoDocVit(String idTipoDocVit){  tipoDocVitProcedimientoDBEntity.deleteByIdTipoDocVit(idTipoDocVit);}  }
class C{  public void testExtraFile() throws Exception {  Path dir=wrap(createTempDir(),true,false);  Files.createDirectory(dir.resolve("foobar"));  List<String> seen=new ArrayList<>();  try (DirectoryStream<Path> stream=Files.newDirectoryStream(dir.resolve("foobar"))){    for (    Path path : stream) {      seen.add(path.getFileName().toString());    }  }   assertEquals(Arrays.asList("extra0"),seen);  assertTrue(Files.isRegularFile(dir.resolve("foobar").resolve("extra0")));}  }
class C{  void putVar(LocalVar var){  if (!varDebugInfo && (!var.sym.isExceptionParameter() || var.sym.hasTypeAnnotations()))   return;  if ((var.sym.flags() & Flags.SYNTHETIC) != 0)   return;  if (varBuffer == null)   varBuffer=new LocalVar[20]; else   varBuffer=ArrayUtils.ensureCapacity(varBuffer,varBufferSize);  varBuffer[varBufferSize++]=var;}  }
class C{  public SpinnerDateModel(Date value,Comparable start,Comparable end,int calendarField){  if (value == null) {    throw new IllegalArgumentException("value is null");  }  if (!calendarFieldOK(calendarField)) {    throw new IllegalArgumentException("invalid calendarField");  }  if (!(((start == null) || (start.compareTo(value) <= 0)) && ((end == null) || (end.compareTo(value) >= 0)))) {    throw new IllegalArgumentException("(start <= value <= end) is false");  }  this.value=Calendar.getInstance();  this.start=start;  this.end=end;  this.calendarField=calendarField;  this.value.setTime(value);}  }
class C{  public void reset(){  if (m_languages == null)   return;  Iterator<CCache<String,String>> iterator=m_languages.values().iterator();  while (iterator.hasNext()) {    CCache<String,String> hm=iterator.next();    hm.reset();  }  m_languages.clear();}  }
class C{  protected void extendConstraints(ConstraintSet constraints){  this.constraints.addExtraConstraint(constraints);}  }
class C{  public void testDoCheckWithoutDoctype(){  System.out.println("doCheck withoutDoctype");  testChecker("",TestSolution.NEED_MORE_INFO,RemarkMessageStore.DOCTYPE_ABSENT_CHECK_HTML5);  testChecker("         ",TestSolution.NEED_MORE_INFO,RemarkMessageStore.DOCTYPE_ABSENT_CHECK_HTML5);  testChecker(null,TestSolution.NEED_MORE_INFO,RemarkMessageStore.DOCTYPE_ABSENT_CHECK_HTML5);}  }
class C{  protected Writer createWriter(OutputStream outStream,String encoding) throws UnsupportedEncodingException {  return new BufferedWriter(new OutputStreamWriter(outStream,encoding));}  }
class C{  public void modifyQuota(String id,IsilonSmartQuota q) throws IsilonException {  modify(_baseUrl.resolve(URI_QUOTAS),id,"quota",q);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void updateDate(String columnName,java.sql.Date x) throws SQLException {  updateDate(findColumn(columnName),x);}  }
class C{  @Override public void close(){  if (ENABLED) {    assert current.get() == this;    current.set(null);  }}  }
class C{  public static <T>T loadSection(Config cfg,String section,String sub,T s,T defaults,T i) throws ConfigInvalidException {  try {    for (    Field f : s.getClass().getDeclaredFields()) {      if (skipField(f)) {        continue;      }      Class<?> t=f.getType();      String n=f.getName();      f.setAccessible(true);      Object d=f.get(defaults);      if (!isString(t) && !isCollectionOrMap(t)) {        Preconditions.checkNotNull(d,"Default cannot be null for: " + n);      }      if (isString(t)) {        String v=cfg.getString(section,sub,n);        if (v == null) {          v=(String)d;        }        f.set(s,v);      } else       if (isInteger(t)) {        f.set(s,cfg.getInt(section,sub,n,(Integer)d));      } else       if (isLong(t)) {        f.set(s,cfg.getLong(section,sub,n,(Long)d));      } else       if (isBoolean(t)) {        boolean b=cfg.getBoolean(section,sub,n,(Boolean)d);        if (b || i != null) {          f.set(s,b);        }      } else       if (t.isEnum()) {        f.set(s,cfg.getEnum(section,sub,n,(Enum<?>)d));      } else       if (isCollectionOrMap(t)) {        continue;      } else {        throw new ConfigInvalidException("type is unknown: " + t.getName());      }      if (i != null) {        Object o=f.get(i);        if (o != null) {          f.set(s,o);        }      }    }  } catch (  SecurityException|IllegalArgumentException|IllegalAccessException e) {    throw new ConfigInvalidException("cannot load values",e);  }  return s;}  }
class C{  public static String replacePlaceholders(String source,String[] replacements){  String result=source;  int index=0;  Pattern pattern=Pattern.compile("\\{\\}");  while (true) {    Matcher matcher=pattern.matcher(result);    if (matcher.find()) {      try {        if (replacements.length > index) {          result=result.replaceFirst(pattern.pattern(),StringEscapeUtils.escapeJava(replacements[index]));        } else {          result=result.replaceFirst(pattern.pattern(),"");        }      } catch (      Exception e) {        result=result.replaceFirst(pattern.pattern(),"");      }      index++;    } else {      break;    }  }  return StrgUtils.removeDuplicateWhitespace(result);}  }
class C{  public Timeout clearDeadline(){  this.hasDeadline=false;  return this;}  }
class C{  public Vector multiply(Permutation p){  int[] pVec=p.getVector();  if (length != pVec.length) {    throw new ArithmeticException("length mismatch");  }  GF2Vector result=new GF2Vector(length);  for (int i=0; i < pVec.length; i++) {    int e=v[pVec[i] >> 5] & (1 << (pVec[i] & 0x1f));    if (e != 0) {      result.v[i >> 5]|=1 << (i & 0x1f);    }  }  return result;}  }
class C{  @Override public boolean next() throws SQLException {  try {    debugCodeCall("next");    checkClosed();    return nextRow();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void main(String[] args){  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Cache atomic countdown latch example started.");    final String latchName=UUID.randomUUID().toString();    IgniteCountDownLatch latch=ignite.countDownLatch(latchName,INITIAL_COUNT,false,true);    System.out.println("Latch initial value: " + latch.count());    for (int i=0; i < INITIAL_COUNT; i++)     ignite.compute().run(new LatchClosure(latchName));    latch.await();    System.out.println("All latch closures have completed.");  }   System.out.println();  System.out.println("Finished count down latch example...");  System.out.println("Check all nodes for output (this node is also part of the cluster).");}  }
class C{  public static ExtensionObject encode(Structure encodeable,QualifiedName encodingType,IEncodeableSerializer serializer,EncoderContext ctx) throws EncodingException {  if (encodeable == null)   return null;  if (encodingType.equals(QualifiedName.DEFAULT_BINARY_ENCODING))   return ExtensionObject.binaryEncode(encodeable,serializer,ctx);  if (encodingType.equals(QualifiedName.DEFAULT_XML_ENCODING))   return ExtensionObject.xmlEncode(encodeable,serializer);  throw new EncodingException(StatusCodes.Bad_DataEncodingUnsupported);}  }
class C{  public static void main(String argv[]){  OutputStream out=System.err;  if (Boolean.getBoolean("javac.pipe.output")) {    out=System.out;  }  Main compiler=new Main(out,"javac");  System.exit(compiler.compile(argv) ? 0 : compiler.exitStatus);}  }
class C{  @Override public void process() throws MigrationCallbackException {  DbClient dbClient=getDbClient();  try {    List<URI> storageSystemURIList=dbClient.queryByType(StorageSystem.class,true);    List<StorageSystem> storageSystemsList=dbClient.queryObject(StorageSystem.class,storageSystemURIList);    Iterator<StorageSystem> systemItr=storageSystemsList.iterator();    List<StorageSystem> systemsToUpdate=new ArrayList<StorageSystem>();    List<StorageProvider> storageProvidersToCreate=new ArrayList<StorageProvider>();    while (systemItr.hasNext()) {      StorageSystem storageSystem=systemItr.next();      if (DiscoveredDataObject.Type.xtremio.name().equalsIgnoreCase(storageSystem.getSystemType())) {        storageProvidersToCreate.add(createNewStorageProviderInstance(storageSystem));      }    }    dbClient.createObject(storageProvidersToCreate);    dbClient.persistObject(systemsToUpdate);  } catch (  Exception e) {    log.error("Exception occured while updating xtremio storagesystem to storage provider model");    log.error(e.getMessage(),e);  }}  }
class C{  public CostMatrixEditor(){  m_matrix=new CostMatrix(2);  m_propSupport=new PropertyChangeSupport(this);  m_customEditor=new CustomEditor();}  }
class C{  public void test_readLine_IgnoresEbcdic85Characters() throws IOException {  assertLines("A\u0085B","A\u0085B");}  }
class C{  private void executeGenerateTaint(Stmt stmt,InvokeExpr invokeExpr,State state){  Block block=this.superControlFlowGraph.unitToBlock.get(stmt);  Body body=block.getBody();  SootMethod method=body.getMethod();  if (stmt instanceof AssignStmt) {    Local lLocal=(Local)((AssignStmt)stmt).getLeftOp();    Immediate argImmediate=(Immediate)invokeExpr.getArg(0);    if (argImmediate instanceof StringConstant) {      StringConstant argStringConstant=(StringConstant)argImmediate;      Set<MethodOrMethodContext> methodContexts=PTABridge.v().getMethodContexts(method);      for (      MethodOrMethodContext methodContext : methodContexts) {        Context context=methodContext.context();        if (ignoreContext(context)) {          continue;        }        ImmutableSet<InfoValue> values=ImmutableSet.<InfoValue>of(InfoKind.getInfoKind(argStringConstant.value,true));        state.locals.putW(context,lLocal,values);      }    }  }}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testImageObjectLink(){  LOGGER.debug("buildTextFromElement of Image object link");  Document document=Jsoup.parse("<a href=\"fake-link.htm\"> <object type=\"image\" " + "data=\"fake-data.png\">" + "        cliquez ici"+ "    </object>"+ "</a>");  Element el=document.select("a").first();  LinkTextElementBuilder instance=new LinkTextElementBuilder();  String expResult="cliquez ici";  String result=instance.buildTextFromElement(el);  assertEquals(expResult,result);}  }
class C{  public static ChangeRequestAttribute createChangeRequestAttribute(){  return createChangeRequestAttribute(false,false);}  }
class C{  public boolean isSessionAffinityEnabled(){  return sessionAffinityEnabled;}  }
class C{  @Override public void run(){  while (true) {    for (    String user : users) {      ProducerRecord<String,String> record=new ProducerRecord<>("ticks",user,message);      producer.send(record);    }    try {      Thread.sleep(1000L);    } catch (    InterruptedException e) {      ;    }  }}  }
class C{  public void move(RepositoryLocation source,Folder destination,String newName,ProgressListener listener) throws RepositoryException {  move(source,destination,newName,true,listener);}  }
class C{  @Override public int compare(EvaluationStatistics o1,EvaluationStatistics o2){  int result;  Number n1;  Number n2;  result=0;  for (  String key : m_Keys) {    if (key.equals(EvaluationStatistics.KEY_CLASSIFIER)) {      result=o1.getCommandLine().compareTo(o2.getCommandLine());    } else     if (key.equals(EvaluationStatistics.KEY_RELATION)) {      result=o1.getRelation().compareTo(o2.getRelation());    } else {      n1=o1.get(key);      n2=o2.get(key);      if ((n1 == null) && (n2 == null))       result=0; else       if (n1 == null)       result=-1; else       if (n2 == null)       result=+1; else       result=new Double(n1.doubleValue()).compareTo(n2.doubleValue());    }    if (result != 0)     break;  }  return result;}  }
class C{  public Object next(){  Token result=(Token)super.next();  while (result != null && baseline.observedCount(result.form) > threshold)   result=(Token)super.next();  return result;}  }
class C{  public script addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public static String saveStoryType(Context context){  return PreferenceManager.getDefaultSharedPreferences(context).getString(context.getString(R.string.pref_key_collect_type),context.getString(R.string.store_local));}  }
class C{  public static IgniteConfiguration configuration() throws IgniteException {  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setLocalHost("127.0.0.1");  cfg.setDeploymentMode(SHARED);  cfg.setPeerClassLoadingEnabled(true);  cfg.setConnectorConfiguration(new ConnectorConfiguration());  OptimizedMarshaller marsh=new OptimizedMarshaller();  marsh.setRequireSerializable(false);  cfg.setMarshaller(marsh);  CacheConfiguration cacheCfg=new CacheConfiguration();  cacheCfg.setAtomicityMode(TRANSACTIONAL);  cacheCfg.setWriteSynchronizationMode(FULL_SYNC);  cacheCfg.setRebalanceMode(SYNC);  cacheCfg.setAtomicityMode(TRANSACTIONAL);  cfg.setCacheConfiguration(cacheCfg);  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  TcpDiscoveryVmIpFinder ipFinder=new TcpDiscoveryVmIpFinder();  ipFinder.setAddresses(Collections.singletonList("127.0.0.1:47500..47509"));  discoSpi.setIpFinder(ipFinder);  cfg.setDiscoverySpi(discoSpi);  return cfg;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ImPackage.SNIPPET__CODE:    return getCode();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static Constraint<CharSequence> containsLetter(){  return new ContainsLetterConstraint();}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  if (timeSeries.size() <= 0) {    functionValueMap.add(this,Double.NaN);    return;  }  timeSeries.sort();  double firstValue=timeSeries.getValue(0);  double lastValue=timeSeries.getValue(timeSeries.size() - 1);  functionValueMap.add(this,Math.abs(firstValue - lastValue));}  }
class C{  public Properties load(){  IOException lastException=null;  for (int i=0; i < 5; i++) {    try {      Properties p2=SortedProperties.loadProperties(fileName);      if (trace.isDebugEnabled()) {        trace.debug("load " + p2);      }      return p2;    } catch (    IOException e) {      lastException=e;    }  }  throw getExceptionFatal("Could not load properties " + fileName,lastException);}  }
class C{  public static void sendBroadcastEvent(Context context,String action){  Intent intent=new Intent(action);  IntentUtils.tryToSetReceiverForegroundFlag(intent);  context.sendBroadcast(intent);}  }
class C{  public void assertTitle(String title){  TestUtils.assertTitle(title);}  }
class C{  public static String timeIncMillisToTimeControl(long startTimeMillis,long startIncMillis){  String minutes=String.valueOf(startTimeMillis / 1000);  String inc=String.valueOf(startIncMillis / 1000);  return minutes + "+" + inc;}  }
class C{  public void testInitString(){  OlimexRfidProtocol instance=new OlimexRfidProtocol();  assertEquals("mc00",instance.initString());}  }
class C{  public void addApps(List<AppInfo> apps){  mApps.addApps(apps);}  }
class C{  public static double[][] identity(int n){  double[][] res=newMatrix(n,n,0.0);  for (int i=0; i < n; ++i) {    res[i][i]=1.0;  }  return (res);}  }
class C{  public void test_Ctor() throws Exception {  try {    new testCipher(null,null,"s");    fail();  } catch (  NullPointerException expected) {  }  try {    new testCipher(new MyCipher(),null,"s");    fail("NullPointerException expected for 'null' provider");  } catch (  NullPointerException expected) {  }  try {    new testCipher(null,new Provider("qwerty",1.0,"qwerty"){    },"s");    fail("NullPointerException expected for 'null' cipherSpi");  } catch (  NullPointerException expected) {  }}  }
class C{  public boolean hasCommentsEnabledExt(){  return hasExtension(GphotoCommentsEnabled.class);}  }
class C{  public void removeListener(final ICriteriumCacheListener listener){  m_listeners.removeListener(listener);}  }
class C{  public DateMidnight roundCeilingCopy(){  return iInstant.withMillis(iField.roundCeiling(iInstant.getMillis()));}  }
class C{  @Override public void saveSettings(){  ((Window)frame).saveSettings();}  }
class C{  public static byte[] splitUint8To2bytes(char uint8){  if (uint8 < 0 || uint8 > 0xff) {    throw new RuntimeException("Out of Boundary");  }  String hexString=Integer.toHexString(uint8);  byte low;  byte high;  if (hexString.length() > 1) {    high=(byte)Integer.parseInt(hexString.substring(0,1),16);    low=(byte)Integer.parseInt(hexString.substring(1,2),16);  } else {    high=0;    low=(byte)Integer.parseInt(hexString.substring(0,1),16);  }  byte[] result=new byte[]{high,low};  return result;}  }
class C{  public MbfsRunner(GraphWrapper dagWrapper,Parameters params){  super(dagWrapper.getGraph(),params);}  }
class C{  @Override public void close(){  CloseableReference.closeSafely(mPooledByteBufferRef);}  }
class C{  public void clearDirectory(File directory){  if (directory.exists()) {    for (    File file : directory.listFiles()) {      file.delete();    }  }}  }
class C{  private void writeNamespaces(OutputNode node) throws Exception {  NamespaceMap map=node.getNamespaces();  for (  String name : map) {    String prefix=map.getPrefix(name);    writer.writeNamespace(name,prefix);  }}  }
class C{  private JList<Configurable> createNewConfigurableJList(String source){  final JList<Configurable> createdConfigList=new JList<>();  createdConfigList.setModel(source == null ? localConfigListModel : remoteConfigListModels.get(source));  createdConfigList.setCellRenderer(new ConfigurableRenderer());  createdConfigList.setFixedCellHeight(40);  createdConfigList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  createdConfigList.setBackground(LIGHTER_GRAY);  return createdConfigList;}  }
class C{  public CharBuffer(int capacity){  if (capacity < 0)   throw new IllegalArgumentException();  capacity=Math.max(capacity,MIN_CAPACITY);  init(new char[capacity],0,0);}  }
class C{  public static boolean hasHoneycomb(){  return Build.VERSION.SDK_INT >= 11;}  }
class C{  public boolean isLocalAction(){  return isLocalAction;}  }
class C{  public void throwing(String sourceClass,String sourceMethod,Throwable thrown){  if (!isLoggable(Level.FINER)) {    return;  }  LogRecord lr=new LogRecord(Level.FINER,"THROW");  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  lr.setThrown(thrown);  doLog(lr);}  }
class C{  public void printStackTrace(PrintStream output){synchronized (output) {    super.printStackTrace(output);    Throwable throwable=getException();    if (throwable != null) {      output.print("Caused by: ");      throwable.printStackTrace(output);    }  }}  }
class C{  public String nextTo(char delimiter) throws JSONException {  StringBuilder sb=new StringBuilder();  for (; ; ) {    char c=this.next();    if (c == delimiter || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public boolean retainAll(ObjectArrayList other,boolean testForEquality){  if (other.size == 0) {    if (size == 0)     return false;    setSize(0);    return true;  }  int limit=other.size - 1;  int j=0;  Object[] theElements=elements;  for (int i=0; i < size; i++) {    if (other.indexOfFromTo(theElements[i],0,limit,testForEquality) >= 0)     theElements[j++]=theElements[i];  }  boolean modified=(j != size);  setSize(j);  return modified;}  }
class C{  public String lset(final String key,final long index,final String value){  checkIsInMulti();  client.lset(key,index,value);  return client.getStatusCodeReply();}  }
class C{  @Override public void validate(Password password){  if (expireTime == 0) {    return;  }  String username=password.getUsername();  if (username == null || username.trim().length() == 0) {    return;  }  PasswordHistory ph=password.getPasswordHistory();  if (ph == null) {    return;  }  Calendar expireDate=ph.getExpireDate();  Calendar now=Calendar.getInstance();  if (expireDate == null) {    Long lastChangedTime=password.getLatestChangedTime();    expireDate=Calendar.getInstance();    expireDate.setTimeInMillis(lastChangedTime);    expireDate.add(Calendar.DATE,expireTime);  }  _log.info("now: " + now + ", "+ username+ " expire date: "+ expireDate);  if (expireDate.before(now)) {    _log.info("fail");    throw BadRequestException.badRequests.passwordExpired(expireTime);  } else {    _log.info("pass");  }}  }
class C{  public static LegacyNumericRangeQuery<Integer> newIntRange(final String field,final int precisionStep,Integer min,Integer max,final boolean minInclusive,final boolean maxInclusive){  return new LegacyNumericRangeQuery<>(field,precisionStep,LegacyNumericType.INT,min,max,minInclusive,maxInclusive);}  }
class C{  public static void e(String tag,String msg,Object... args){  if (sLevel > LEVEL_ERROR) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.e(tag,msg);}  }
class C{  @Override public void close() throws IOException {  xmlInput.close();}  }
class C{  public void addChild(String child){  if (child == null) {    return;  }  String childPath=path.endsWith("/") ? path + child : path + "/" + child;  children.add(new ZkNode(childPath));}  }
class C{  public RunConfiguration createXpectOutputTestConfiguration(String runnerId,String userSelectionNodePathResolvableTargetFileName,SystemLoaderInfo systemLoader){  final IRunnerDescriptor runnerDesc=runnerRegistry.getDescriptor(runnerId);  final IRunner runner=runnerDesc.getRunner();  final RunConfiguration config=runner.createConfiguration();  config.setName(runnerId + "__" + userSelectionNodePathResolvableTargetFileName);  config.setRuntimeEnvironment(runnerDesc.getEnvironment());  config.setImplementationId(null);  config.setRunnerId(runnerId);  config.setSystemLoader(systemLoader.getId());  config.setUseDefaultBootstrap(true);  config.setCoreProjectPaths(Lists.newArrayList(getTempFolder().toString()));  config.setExecutionData(RunConfiguration.EXEC_DATA_KEY__USER_SELECTION,userSelectionNodePathResolvableTargetFileName);  config.setExecutionData(RunConfiguration.EXEC_DATA_KEY__INIT_MODULES,config.getInitModules());  IRunner preparedRunner=runnerRegistry.getRunner(config);  preparedRunner.prepareConfiguration(config);  return config;}  }
class C{  public InitModules createInitModules(){  InitModulesImpl initModules=new InitModulesImpl();  return initModules;}  }
class C{  public String amounts(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value,Object oldValue){  if (isCalloutActive())   return "";  int C_Invoice_ID=Env.getContextAsInt(ctx,WindowNo,"C_Invoice_ID");  if (Env.getContextAsInt(ctx,WindowNo,"C_Payment_ID") == 0 && Env.getContextAsInt(ctx,WindowNo,"C_BPartner_ID") == 0 && C_Invoice_ID == 0)   return "";  String colName=mField.getColumnName();  if (colName.equals("IsOverUnderPayment") || !"Y".equals(Env.getContext(ctx,WindowNo,"IsOverUnderPayment")))   mTab.setValue("OverUnderAmt",Env.ZERO);  int C_InvoicePaySchedule_ID=0;  if (Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"C_Invoice_ID") == C_Invoice_ID && Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"C_InvoicePaySchedule_ID") != 0) {    C_InvoicePaySchedule_ID=Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"C_InvoicePaySchedule_ID");  }  BigDecimal InvoiceOpenAmt=Env.ZERO;  int C_Currency_Invoice_ID=0;  if (C_Invoice_ID != 0) {    Timestamp ts=(Timestamp)mTab.getValue("DateTrx");    if (ts == null)     ts=new Timestamp(System.currentTimeMillis());    String sql="SELECT C_BPartner_ID,C_Currency_ID," + " invoiceOpen(C_Invoice_ID,?)," + " invoiceDiscount(C_Invoice_ID,?,?), IsSOTrx "+ "FROM C_Invoice WHERE C_Invoice_ID=?";    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(sql,null);      pstmt.setInt(1,C_InvoicePaySchedule_ID);      pstmt.setTimestamp(2,ts);      pstmt.setInt(3,C_InvoicePaySchedule_ID);      pstmt.setInt(4,C_Invoice_ID);      rs=pstmt.executeQuery();      if (rs.next()) {        C_Currency_Invoice_ID=rs.getInt(2);        InvoiceOpenAmt=rs.getBigDecimal(3);        if (InvoiceOpenAmt == null)         InvoiceOpenAmt=Env.ZERO;      }    } catch (    SQLException e) {      log.log(Level.SEVERE,sql,e);      return e.getLocalizedMessage();    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }  }  log.fine("Open=" + InvoiceOpenAmt + ", C_Invoice_ID="+ C_Invoice_ID+ ", C_Currency_ID="+ C_Currency_Invoice_ID);  BigDecimal PayAmt=(BigDecimal)mTab.getValue("PayAmt");  BigDecimal DiscountAmt=(BigDecimal)mTab.getValue("DiscountAmt");  BigDecimal WriteOffAmt=(BigDecimal)mTab.getValue("WriteOffAmt");  BigDecimal OverUnderAmt=(BigDecimal)mTab.getValue("OverUnderAmt");  log.fine("Pay=" + PayAmt + ", Discount="+ DiscountAmt+ ", WriteOff="+ WriteOffAmt+ ", OverUnderAmt="+ OverUnderAmt);  int C_Currency_ID=((Integer)mTab.getValue("C_Currency_ID")) == null ? Env.getContextAsInt(ctx,"$C_Currency_ID") : ((Integer)mTab.getValue("C_Currency_ID"));  MCurrency currency=MCurrency.get(ctx,C_Currency_ID);  Timestamp ConvDate=(Timestamp)mTab.getValue("DateTrx");  int C_ConversionType_ID=0;  Integer ii=(Integer)mTab.getValue("C_ConversionType_ID");  if (ii != null)   C_ConversionType_ID=ii.intValue();  int AD_Client_ID=Env.getContextAsInt(ctx,WindowNo,"AD_Client_ID");  int AD_Org_ID=Env.getContextAsInt(ctx,WindowNo,"AD_Org_ID");  BigDecimal CurrencyRate=Env.ONE;  if ((C_Currency_ID > 0 && C_Currency_Invoice_ID > 0 && C_Currency_ID != C_Currency_Invoice_ID) || colName.equals("C_Currency_ID") || colName.equals("C_ConversionType_ID")) {    log.fine("InvCurrency=" + C_Currency_Invoice_ID + ", PayCurrency="+ C_Currency_ID+ ", Date="+ ConvDate+ ", Type="+ C_ConversionType_ID);    CurrencyRate=MConversionRate.getRate(C_Currency_Invoice_ID,C_Currency_ID,ConvDate,C_ConversionType_ID,AD_Client_ID,AD_Org_ID);    if (CurrencyRate == null || CurrencyRate.compareTo(Env.ZERO) == 0) {      if (C_Currency_Invoice_ID == 0)       return "";      return "NoCurrencyConversion";    }    InvoiceOpenAmt=InvoiceOpenAmt.multiply(CurrencyRate).setScale(currency.getStdPrecision(),BigDecimal.ROUND_HALF_UP);    log.fine("Rate=" + CurrencyRate + ", InvoiceOpenAmt="+ InvoiceOpenAmt);  }  if (colName.equals("C_Currency_ID") || colName.equals("C_ConversionType_ID")) {    PayAmt=PayAmt.multiply(CurrencyRate).setScale(currency.getStdPrecision(),BigDecimal.ROUND_HALF_UP);    mTab.setValue("PayAmt",PayAmt);    DiscountAmt=DiscountAmt.multiply(CurrencyRate).setScale(currency.getStdPrecision(),BigDecimal.ROUND_HALF_UP);    mTab.setValue("DiscountAmt",DiscountAmt);    WriteOffAmt=WriteOffAmt.multiply(CurrencyRate).setScale(currency.getStdPrecision(),BigDecimal.ROUND_HALF_UP);    mTab.setValue("WriteOffAmt",WriteOffAmt);    OverUnderAmt=OverUnderAmt.multiply(CurrencyRate).setScale(currency.getStdPrecision(),BigDecimal.ROUND_HALF_UP);    mTab.setValue("OverUnderAmt",OverUnderAmt);  } else   if (C_Invoice_ID == 0) {    if (Env.ZERO.compareTo(DiscountAmt) != 0)     mTab.setValue("DiscountAmt",Env.ZERO);    if (Env.ZERO.compareTo(WriteOffAmt) != 0)     mTab.setValue("WriteOffAmt",Env.ZERO);    if (Env.ZERO.compareTo(OverUnderAmt) != 0)     mTab.setValue("OverUnderAmt",Env.ZERO);  } else {    boolean processed=mTab.getValueAsBoolean(MPayment.COLUMNNAME_Processed);    if (colName.equals("PayAmt") && (!processed) && "Y".equals(Env.getContext(ctx,WindowNo,"IsOverUnderPayment"))) {      OverUnderAmt=InvoiceOpenAmt.subtract(PayAmt).subtract(DiscountAmt).subtract(WriteOffAmt);      mTab.setValue("OverUnderAmt",OverUnderAmt);    } else     if (colName.equals("PayAmt") && (!processed)) {      WriteOffAmt=InvoiceOpenAmt.subtract(PayAmt).subtract(DiscountAmt).subtract(OverUnderAmt);      mTab.setValue("WriteOffAmt",WriteOffAmt);    } else     if (colName.equals("IsOverUnderPayment") && (!processed)) {      boolean overUnderPaymentActive="Y".equals(Env.getContext(ctx,WindowNo,"IsOverUnderPayment"));      if (overUnderPaymentActive) {        OverUnderAmt=InvoiceOpenAmt.subtract(PayAmt).subtract(DiscountAmt);        mTab.setValue("WriteOffAmt",Env.ZERO);        mTab.setValue("OverUnderAmt",OverUnderAmt);      } else {        WriteOffAmt=InvoiceOpenAmt.subtract(PayAmt).subtract(DiscountAmt);        mTab.setValue("WriteOffAmt",WriteOffAmt);        mTab.setValue("OverUnderAmt",Env.ZERO);      }    } else     if ((!processed)) {      PayAmt=InvoiceOpenAmt.subtract(DiscountAmt).subtract(WriteOffAmt).subtract(OverUnderAmt);      mTab.setValue("PayAmt",PayAmt);    }  }  return "";}  }
class C{  public void showBranches(Project project){  this.project=project;  getBranches();}  }
class C{  public final Mono<T> or(Mono<? extends T> other){  if (this instanceof MonoFirst) {    MonoFirst<T> a=(MonoFirst<T>)this;    return a.orAdditionalSource(other);  }  return first(this,other);}  }
class C{  public Object executeScript(final String scriptName,final ScriptContext context){  return executeScript(getScript(scriptName,DateUtils.today()),context);}  }
class C{  public static void addFile(File file){  files.offer(Pair.of(file,0));}  }
class C{  public String consumeCssIdentifier(){  int start=pos;  while (!isEmpty() && (matchesWord() || matchesAny('-','_')))   pos++;  return queue.substring(start,pos);}  }
class C{  public void flush(){  if (_handler != null)   _handler.flush();}  }
class C{  public AttributeType(WorkspaceComponent parent,String typeName,String methodName,Class<?> dataType,boolean visible){  this.parentComponent=parent;  this.typeName=typeName;  this.methodName=methodName;  this.dataType=dataType;  this.visible=visible;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:12.213 -0500",hash_original_method="E3B2640B549BA587BAC4EC77E8C4280A",hash_generated_method="574B053F9775BC88563ABB29BAC6D05A") public UnknownServiceException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  private IgfsFileAffinityRange initialStreamRange(IgfsEntryInfo fileInfo){  if (!igfsCtx.configuration().isFragmentizerEnabled())   return null;  if (!Boolean.parseBoolean(fileInfo.properties().get(IgfsUtils.PROP_PREFER_LOCAL_WRITES)))   return null;  int blockSize=fileInfo.blockSize();  long off=((fileInfo.length() + blockSize - 1) / blockSize) * blockSize;  long lastBlockOff=off - fileInfo.blockSize();  if (lastBlockOff < 0)   lastBlockOff=0;  IgfsFileMap map=fileInfo.fileMap();  IgniteUuid prevAffKey=map == null ? null : map.affinityKey(lastBlockOff,false);  IgniteUuid affKey=igfsCtx.data().nextAffinityKey(prevAffKey);  return affKey == null ? null : new IgfsFileAffinityRange(off,off,affKey);}  }
class C{  public FactoryEnabled(){  initialize();}  }
class C{  public double distanceSquaredTo(Point2D that){  double dx=this.x - that.x;  double dy=this.y - that.y;  return dx * dx + dy * dy;}  }
class C{  public SubstringReplacer(){  useDefaultVisual();  setLayout(new BorderLayout());  add(m_visual,BorderLayout.CENTER);  m_env=Environment.getSystemWide();}  }
class C{  public void addStepBetween(Step stepToAdd,@Nullable Step lower,@Nullable Step higher){  checkNotNull(stepToAdd,"The step to add cannot be null");  final int index=indexBetween(lower,higher);  addStep(index,stepToAdd);}  }
class C{  protected boolean isConnectionOk(IoSession session){  SocketAddress remoteAddress=session.getRemoteAddress();  if (remoteAddress instanceof InetSocketAddress) {    InetSocketAddress addr=(InetSocketAddress)remoteAddress;    long now=System.currentTimeMillis();    lock.lock();    try {      if (clients.containsKey(addr.getAddress().getHostAddress())) {        LOGGER.debug("This is not a new client");        Long lastConnTime=clients.get(addr.getAddress().getHostAddress());        clients.put(addr.getAddress().getHostAddress(),now);        if (now - lastConnTime < allowedInterval) {          LOGGER.warn("Session connection interval too short");          return false;        }        return true;      }      clients.put(addr.getAddress().getHostAddress(),now);    }  finally {      lock.unlock();    }    return true;  }  return false;}  }
class C{  public static void checkFieldValueFromArrayIgnoreCase(final String value,final String fieldName,final String... expected){  for (  String entry : expected) {    if (entry.equalsIgnoreCase(value)) {      return;    }  }  throw APIException.badRequests.invalidParameterValueWithExpected(fieldName,value,expected);}  }
class C{  public boolean equals(Annotation left,Annotation right) throws Exception {  Class type=left.annotationType();  Class expect=right.annotationType();  Method[] list=type.getDeclaredMethods();  if (type.equals(expect)) {    for (    Method method : list) {      if (!isIgnore(method)) {        Object value=method.invoke(left);        Object other=method.invoke(right);        if (!value.equals(other)) {          return false;        }      }    }    return true;  }  return false;}  }
class C{  @Timed @POST @Path("/shutdown/framework") @Produces(MediaType.APPLICATION_JSON) public Response shutdownFramework(){  logger.info("shutdown....terminating framework... ");  myriadOperations.shutdownFramework();  return Response.ok().build();}  }
class C{  public static AetherResult preparePlain(final Path tmpDir,final ImportConfiguration cfg) throws ArtifactResolutionException {  Objects.requireNonNull(tmpDir);  Objects.requireNonNull(cfg);  final RepositoryContext ctx=new RepositoryContext(tmpDir,cfg.getRepositoryUrl(),cfg.isAllOptional());  final List<ArtifactRequest> requests=extendRequests(cfg.getCoordinates().stream().map(null),ctx,cfg);  return asResult(resolve(ctx,requests),cfg,empty());}  }
class C{  public String typeString(String id){  return typeString(id,false,true);}  }
class C{  public NotificationChain basicSetTarget(Target newTarget,NotificationChain msgs){  Target oldTarget=target;  target=newTarget;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,MappingPackage.MAPPING_RULE__TARGET,oldTarget,newTarget);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public void onActivityCreated(@Nullable Bundle savedInstanceState){  super.onActivityCreated(savedInstanceState);  if (savedInstanceState != null) {    SaveInstance saveInstance=(SaveInstance)savedInstanceState.getSerializable(TAG);    commentIdList.addAll(saveInstance != null ? saveInstance.getCommentIdList() : new ArrayList<>());    mPage=saveInstance != null ? saveInstance.getPage() : 1;    data=saveInstance != null ? saveInstance.getData() : new SparseArrayCompatSerializable<>();  }}  }
class C{  public CouldntInitializeDatabaseException(final String message){  super(message);  m_stacktrace=super.getStackTrace();}  }
class C{  public static byte[] decode(byte[] source) throws java.io.IOException {  byte[] decoded=null;  decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  return decoded;}  }
class C{  @Override protected void reloadSummaries(){  super.reloadSummaries();  int local, global;  local=mDPM.getPasswordHistoryLength(mDeviceAdminSample);  global=mDPM.getPasswordHistoryLength(null);  mHistory.setSummary(localGlobalSummary(local,global));  long localLong, globalLong;  localLong=mDPM.getPasswordExpirationTimeout(mDeviceAdminSample);  globalLong=mDPM.getPasswordExpirationTimeout(null);  mExpirationTimeout.setSummary(localGlobalSummary(localLong / MS_PER_MINUTE,globalLong / MS_PER_MINUTE));  String expirationStatus=getExpirationStatus();  mExpirationStatus.setSummary(expirationStatus);}  }
class C{  public double[] computeLocal(int var1[],int var2[],int cond[]){  initialise();  addObservations(var1,var2,cond);  return computeLocalFromPreviousObservations(var1,var2,cond);}  }
class C{  Uri uri(){  return uri;}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) protected void endRendering(KMLTraversalContext tc,DrawContext dc){  if (this.getRegion() != null)   tc.popRegion();}  }
class C{  public Constraint horizontalAlign(int align){  this.align=align;  return this;}  }
class C{  public void testCapacity(){  final int personsPerWave=10;  final double capacityFactor=0.5;  Config config=loadConfig(null);  config.network().setTimeVariantNetwork(true);  MutableScenario scenario=(MutableScenario)ScenarioUtils.createScenario(config);  Network network=createNetwork(scenario);  Link link1=network.getLinks().get(Id.create("1",Link.class));  Link link2=network.getLinks().get(Id.create("2",Link.class));  Link link3=network.getLinks().get(Id.create("3",Link.class));  NetworkChangeEvent change1=new NetworkChangeEvent(0);  change1.addLink(link2);  change1.setFlowCapacityChange(new ChangeValue(ChangeType.FACTOR,capacityFactor));  final NetworkChangeEvent event=change1;  NetworkUtils.addNetworkChangeEvent(((Network)network),event);  NetworkChangeEvent change2=new NetworkChangeEvent(3600);  change2.addLink(link2);  change2.setFlowCapacityChange(new ChangeValue(ChangeType.FACTOR,1 / capacityFactor));  final NetworkChangeEvent event1=change2;  NetworkUtils.addNetworkChangeEvent(((Network)network),event1);  Population plans=scenario.getPopulation();  List<Person> persons1=createPersons(0,link1,link3,network,personsPerWave);  for (  Person p : persons1) {    plans.addPerson(p);  }  Person person1=persons1.get(personsPerWave - 1);  List<Person> persons2=createPersons(3600,link1,link3,network,personsPerWave);  for (  Person p : persons2) {    plans.addPerson(p);  }  Person person2=persons2.get(personsPerWave - 1);  EventsManager events=EventsUtils.createEventsManager();  TestTravelTimeCalculator ttcalc=new TestTravelTimeCalculator(person1.getId(),person2.getId(),link2.getId());  events.addHandler(ttcalc);  Mobsim qsim=QSimUtils.createDefaultQSim(scenario,events);  qsim.run();  assertEquals("Person 1 should travel for 20 seconds.",20.0,ttcalc.person1leaveTime - ttcalc.person1enterTime,EPSILON);  assertEquals("Person 2 should travel for 11 seconds.",10.0 + 1.0,ttcalc.person2leaveTime - ttcalc.person2enterTime,EPSILON);}  }
class C{  private boolean notifyListenerRequestSend(HttpMessage httpMessage){  if (parentServer.excludeUrl(httpMessage.getRequestHeader().getURI())) {    return true;  }  ProxyListener listener=null;  List<ProxyListener> listenerList=parentServer.getListenerList();  for (int i=0; i < listenerList.size(); i++) {    listener=listenerList.get(i);    try {      if (!listener.onHttpRequestSend(httpMessage)) {        return false;      }    } catch (    Exception e) {      log.error("An error occurred while notifying listener:",e);    }  }  return true;}  }
class C{  public GravatarResource(final String email){  super("https://www.gravatar.com/avatar/" + DigestUtils.md5DigestAsHex(email.getBytes()) + ".jpg?s=56&r=g&d=mm");}  }
class C{  protected Map drawAxes(Graphics2D g2,Rectangle2D plotArea,Rectangle2D dataArea,PlotRenderingInfo plotState){  AxisCollection axisCollection=new AxisCollection();  for (  CategoryAxis xAxis : this.domainAxes.values()) {    if (xAxis != null) {      int index=getDomainAxisIndex(xAxis);      axisCollection.add(xAxis,getDomainAxisEdge(index));    }  }  for (  ValueAxis yAxis : this.rangeAxes.values()) {    if (yAxis != null) {      int index=findRangeAxisIndex(yAxis);      axisCollection.add(yAxis,getRangeAxisEdge(index));    }  }  Map axisStateMap=new HashMap();  double cursor=dataArea.getMinY() - this.axisOffset.calculateTopOutset(dataArea.getHeight());  Iterator iterator=axisCollection.getAxesAtTop().iterator();  while (iterator.hasNext()) {    Axis axis=(Axis)iterator.next();    if (axis != null) {      AxisState axisState=axis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.TOP,plotState);      cursor=axisState.getCursor();      axisStateMap.put(axis,axisState);    }  }  cursor=dataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight());  iterator=axisCollection.getAxesAtBottom().iterator();  while (iterator.hasNext()) {    Axis axis=(Axis)iterator.next();    if (axis != null) {      AxisState axisState=axis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.BOTTOM,plotState);      cursor=axisState.getCursor();      axisStateMap.put(axis,axisState);    }  }  cursor=dataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth());  iterator=axisCollection.getAxesAtLeft().iterator();  while (iterator.hasNext()) {    Axis axis=(Axis)iterator.next();    if (axis != null) {      AxisState axisState=axis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.LEFT,plotState);      cursor=axisState.getCursor();      axisStateMap.put(axis,axisState);    }  }  cursor=dataArea.getMaxX() + this.axisOffset.calculateRightOutset(dataArea.getWidth());  iterator=axisCollection.getAxesAtRight().iterator();  while (iterator.hasNext()) {    Axis axis=(Axis)iterator.next();    if (axis != null) {      AxisState axisState=axis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.RIGHT,plotState);      cursor=axisState.getCursor();      axisStateMap.put(axis,axisState);    }  }  return axisStateMap;}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  private void calculateError(){  int totalErrorCount=0;  int totalRedundancy=0;  int trueCoverage=0;  int totalCoverage=0;  int numNoise=0;  double errorNoise=0;  double errorNoiseMax=0;  double errorMissed=0;  double errorMissedMax=0;  double errorMisplaced=0;  double errorMisplacedMax=0;  double totalError=0.0;  double totalErrorMax=0.0;  for (int p=0; p < numPoints; p++) {    CMMPoint cmdp=gtAnalysis.getPoint(p);    double weight=cmdp.weight();    if (cmdp.isNoise()) {      numNoise++;      errorNoiseMax+=cmdp.connectivity * weight;    } else {      errorMissedMax+=cmdp.connectivity * weight;      errorMisplacedMax+=cmdp.connectivity * weight;    }    totalErrorMax+=cmdp.connectivity * weight;    double err=0;    int coverage=0;    for (int c=0; c < numFClusters; c++) {      if (pointInclusionProbFC[p][c] >= pointInclusionProbThreshold) {        coverage++;        if (!cmdp.isNoise()) {          if (matchMap[c] == cmdp.workclass()) {          } else {            double errvalue=misplacedError(cmdp,c);            if (errvalue > err)             err=errvalue;          }        } else {          double errvalue=noiseError(cmdp,c);          if (errvalue > err)           err=errvalue;        }      }    }    if (coverage == 0) {      if (!cmdp.isNoise()) {        err=missedError(cmdp,true);        errorMissed+=weight * err;      } else {      }    } else {      if (!cmdp.isNoise()) {        errorMisplaced+=err * weight;      } else {        errorNoise+=err * weight;      }    }    totalError+=err * weight;    if (err != 0)     totalErrorCount++;    if (coverage > 0)     totalCoverage++;    if (coverage > 0 && !cmdp.isNoise())     trueCoverage++;    if (coverage > 1)     totalRedundancy++;    cmdp.p.setMeasureValue("CMM",err);    cmdp.p.setMeasureValue("Redundancy",coverage);  }  addValue("CMM",(totalErrorMax != 0) ? 1 - totalError / totalErrorMax : 1);  addValue("CMM Missed",(errorMissedMax != 0) ? 1 - errorMissed / errorMissedMax : 1);  addValue("CMM Misplaced",(errorMisplacedMax != 0) ? 1 - errorMisplaced / errorMisplacedMax : 1);  addValue("CMM Noise",(errorNoiseMax != 0) ? 1 - errorNoise / errorNoiseMax : 1);  addValue("CMM Basic",1 - ((double)totalErrorCount / (double)numPoints));  if (debug) {    System.out.println("-------------");  }}  }
class C{  public static Network createTestNetwork(){  double freespeed=2.7;  double capacity=500.;  double numLanes=1.;  MutableScenario scenario=(MutableScenario)ScenarioUtils.createScenario(ConfigUtils.createConfig());  Network network=(Network)scenario.getNetwork();  Node node1=NetworkUtils.createAndAddNode(network,Id.create(1,Node.class),new Coord((double)0,(double)100));  Node node2=NetworkUtils.createAndAddNode(network,Id.create(2,Node.class),new Coord((double)0,(double)200));  Node node3=NetworkUtils.createAndAddNode(network,Id.create(3,Node.class),new Coord((double)0,(double)0));  Node node4=NetworkUtils.createAndAddNode(network,Id.create(4,Node.class),new Coord((double)100,(double)100));  Node node5=NetworkUtils.createAndAddNode(network,Id.create(5,Node.class),new Coord((double)100,(double)200));  Node node6=NetworkUtils.createAndAddNode(network,Id.create(6,Node.class),new Coord((double)100,(double)0));  Node node7=NetworkUtils.createAndAddNode(network,Id.create(7,Node.class),new Coord((double)200,(double)100));  Node node8=NetworkUtils.createAndAddNode(network,Id.create(8,Node.class),new Coord((double)200,(double)200));  Node node9=NetworkUtils.createAndAddNode(network,Id.create(9,Node.class),new Coord((double)200,(double)0));  final Node fromNode=node1;  final Node toNode=node2;  final double freespeed1=freespeed;  final double capacity1=capacity;  final double numLanes1=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(1,Link.class),fromNode,toNode,(double)100,freespeed1,capacity1,numLanes1);  final Node fromNode1=node2;  final Node toNode1=node1;  final double freespeed2=freespeed;  final double capacity2=capacity;  final double numLanes2=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(2,Link.class),fromNode1,toNode1,(double)100,freespeed2,capacity2,numLanes2);  final Node fromNode2=node1;  final Node toNode2=node3;  final double freespeed3=freespeed;  final double capacity3=capacity;  final double numLanes3=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(3,Link.class),fromNode2,toNode2,(double)100,freespeed3,capacity3,numLanes3);  final Node fromNode3=node3;  final Node toNode3=node1;  final double freespeed4=freespeed;  final double capacity4=capacity;  final double numLanes4=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(4,Link.class),fromNode3,toNode3,(double)100,freespeed4,capacity4,numLanes4);  final Node fromNode4=node1;  final Node toNode4=node4;  final double freespeed5=freespeed;  final double capacity5=capacity;  final double numLanes5=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(5,Link.class),fromNode4,toNode4,(double)100,freespeed5,capacity5,numLanes5);  final Node fromNode5=node4;  final Node toNode5=node1;  final double freespeed6=freespeed;  final double capacity6=capacity;  final double numLanes6=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(6,Link.class),fromNode5,toNode5,(double)100,freespeed6,capacity6,numLanes6);  final Node fromNode6=node4;  final Node toNode6=node5;  final double freespeed7=freespeed;  final double capacity7=capacity;  final double numLanes7=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(7,Link.class),fromNode6,toNode6,(double)100,freespeed7,capacity7,numLanes7);  final Node fromNode7=node5;  final Node toNode7=node4;  final double freespeed8=freespeed;  final double capacity8=capacity;  final double numLanes8=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(8,Link.class),fromNode7,toNode7,(double)100,freespeed8,capacity8,numLanes8);  final Node fromNode8=node4;  final Node toNode8=node6;  final double freespeed9=freespeed;  final double capacity9=capacity;  final double numLanes9=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(9,Link.class),fromNode8,toNode8,(double)100,freespeed9,capacity9,numLanes9);  final Node fromNode9=node6;  final Node toNode9=node4;  final double freespeed10=freespeed;  final double capacity10=capacity;  final double numLanes10=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(10,Link.class),fromNode9,toNode9,(double)100,freespeed10,capacity10,numLanes10);  final Node fromNode10=node4;  final Node toNode10=node7;  final double freespeed11=freespeed;  final double capacity11=capacity;  final double numLanes11=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(11,Link.class),fromNode10,toNode10,(double)100,freespeed11,capacity11,numLanes11);  final Node fromNode11=node7;  final Node toNode11=node4;  final double freespeed12=freespeed;  final double capacity12=capacity;  final double numLanes12=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(12,Link.class),fromNode11,toNode11,(double)100,freespeed12,capacity12,numLanes12);  final Node fromNode12=node5;  final Node toNode12=node8;  final double freespeed13=freespeed;  final double capacity13=capacity;  final double numLanes13=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(13,Link.class),fromNode12,toNode12,(double)100,freespeed13,capacity13,numLanes13);  final Node fromNode13=node8;  final Node toNode13=node5;  final double freespeed14=freespeed;  final double capacity14=capacity;  final double numLanes14=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(14,Link.class),fromNode13,toNode13,(double)100,freespeed14,capacity14,numLanes14);  final Node fromNode14=node6;  final Node toNode14=node9;  final double freespeed15=freespeed;  final double capacity15=capacity;  final double numLanes15=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(15,Link.class),fromNode14,toNode14,(double)100,freespeed15,capacity15,numLanes15);  final Node fromNode15=node9;  final Node toNode15=node6;  final double freespeed16=freespeed;  final double capacity16=capacity;  final double numLanes16=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(16,Link.class),fromNode15,toNode15,(double)100,freespeed16,capacity16,numLanes16);  return network;}  }
class C{  private void initializeIdealPoint(){  idealPoint=new double[problem.getNumberOfObjectives()];  Arrays.fill(idealPoint,Double.POSITIVE_INFINITY);}  }
class C{  private static String randomNegativeMonetary(int length){  return "-" + MonetaryFunctions.randomPositiveMonetary(length);}  }
class C{  public JSONArray(JSONTokener x) throws JSONException {  this();  if (x.nextClean() != '[') {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() != ']') {    x.back();    for (; ; ) {      if (x.nextClean() == ',') {        x.back();        this.myArrayList.add(JSONObject.NULL);      } else {        x.back();        this.myArrayList.add(x.nextValue());      }switch (x.nextClean()) {case ',':        if (x.nextClean() == ']') {          return;        }      x.back();    break;case ']':  return;default :throw x.syntaxError("Expected a ',' or ']'");}}}}  }
class C{  public boolean isSubscribed(){  if (m_AD_User_ID <= 0 || m_ci == null)   return false;  return m_ci.isSubscribed();}  }
class C{  public synchronized void performEraseMultipleObjects(ArrayList<OsmElement> selection){  createCheckpoint(R.string.undo_action_delete_objects);  for (  OsmElement e : selection) {    if (e instanceof Relation && e.getState() != OsmElement.STATE_DELETED) {      performEraseRelation((Relation)e,false);    }  }  for (  OsmElement e : selection) {    if (e instanceof Way && e.getState() != OsmElement.STATE_DELETED) {      if (isInDownload((Way)e)) {        performEraseWay((Way)e,true,false);      } else {      }    }  }  for (  OsmElement e : selection) {    if (e instanceof Node && e.getState() != OsmElement.STATE_DELETED) {      performEraseNode((Node)e,false);    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTraceLevel_();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"LDM");  translateAll(environment,instruction,"LDM",instructions);}  }
class C{  @Override public void run(){  this.run=true;}  }
class C{  public static void assertTrue(String message,boolean condition){  Assert.assertTrue(message,condition);}  }
class C{  public static boolean equals(Object[] array1,Object[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    Object e1=array1[i], e2=array2[i];    if (!(e1 == null ? e2 == null : e1.equals(e2))) {      return false;    }  }  return true;}  }
class C{  @Override public JettySolrRunner createJetty(File solrHome,String dataDir,String shardList,String solrConfigOverride,String schemaOverride) throws Exception {  return createProxiedJetty(solrHome,dataDir,shardList,solrConfigOverride,schemaOverride);}  }
class C{  private void initComponents(){  editorTable=new JTable(new EditorTableModel());  int rowHeight=editorTable.getRowHeight();  int rowMargin=editorTable.getRowMargin();  editorTable.setPreferredScrollableViewportSize(new Dimension(0,2 * (rowHeight + (2 * rowMargin))));  editorTable.setDefaultRenderer(Paint.class,new PaintCellRenderer());  editorTable.setDefaultRenderer(Color.class,new ColorCellRenderer());  editorTable.setDefaultRenderer(Stroke.class,new StrokeCellRenderer());}  }
class C{  public static void main(String[] args){  FancyLoader loader;  loader=new FancyLoader(ClassLoader.getSystemClassLoader());  System.out.println("base: " + DoubledImplement.class);  System.out.println("base2: " + DoubledImplement2.class);  testAccess1(loader);  testAccess2(loader);  testAccess3(loader);  testExtend(loader);  testExtendOkay(loader);  testInterface(loader);  testAbstract(loader);  testImplement(loader);  testIfaceImplement(loader);}  }
class C{  public String name(){  return this.name;}  }
class C{  public GetRequest parent(String parent){  if (routing == null) {    routing=parent;  }  return this;}  }
class C{  private void resume(){  lock.lock();  try {    if (paused.get() == 0) {      throw new IllegalStateException("Not paused");    }    if (paused.decrementAndGet() == 0) {      if (log.isDebugEnabled())       log.debug("Resuming write service");      unpaused.signalAll();    }  }  finally {    lock.unlock();  }}  }
class C{  public BatchInterrupted(Throwable cause,int totalCount,int successCount,int errorCount){  this(getReasonFromException(cause),totalCount,successCount,errorCount);  if (cause instanceof ServiceException) {    ServiceException se=(ServiceException)cause;    setContent(se.getResponseBody());    setContentType(se.getResponseContentType());  }}  }
class C{  protected String paramString(){  String rootVisibleString=(rootVisible ? "true" : "false");  String showsRootHandlesString=(showsRootHandles ? "true" : "false");  String editableString=(editable ? "true" : "false");  String largeModelString=(largeModel ? "true" : "false");  String invokesStopCellEditingString=(invokesStopCellEditing ? "true" : "false");  String scrollsOnExpandString=(scrollsOnExpand ? "true" : "false");  return super.paramString() + ",editable=" + editableString+ ",invokesStopCellEditing="+ invokesStopCellEditingString+ ",largeModel="+ largeModelString+ ",rootVisible="+ rootVisibleString+ ",rowHeight="+ rowHeight+ ",scrollsOnExpand="+ scrollsOnExpandString+ ",showsRootHandles="+ showsRootHandlesString+ ",toggleClickCount="+ toggleClickCount+ ",visibleRowCount="+ visibleRowCount;}  }
class C{  public void addSourceInfoKind(SootMethod sootMethod,String kind,boolean sensitive){  if (!srcsMapping.containsKey(sootMethod)) {    srcsMapping.put(sootMethod,new HashSet<InfoKind>());  }  srcsMapping.get(sootMethod).add(InfoKind.getInfoKind(kind,sensitive));}  }
class C{  @Override protected boolean isArgument(){  return false;}  }
class C{  private void skipDelimiters(){  while (!retTokens && (currentPosition < maxPosition) && (delimiters.indexOf(str.charAt(currentPosition)) >= 0)) {    currentPosition++;  }}  }
class C{  public BulletConstructor(final Model model,final float width,final float height,final float depth){  this(model,-1f,width,height,depth);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:20.681 -0500",hash_original_method="9E5375D03017C5CE595A523DBE298043",hash_generated_method="AE4507B3B94EE68FC57DD5F106438CE1") public boolean onRemoteAdapterConnected(){  if (mRemoteViewsAdapter != mAdapter) {    setAdapter(mRemoteViewsAdapter);    if (mDeferNotifyDataSetChanged) {      mRemoteViewsAdapter.notifyDataSetChanged();      mDeferNotifyDataSetChanged=false;    }    if (mRestoreWhichChild > -1) {      setDisplayedChild(mRestoreWhichChild,false);      mRestoreWhichChild=-1;    }    return false;  } else   if (mRemoteViewsAdapter != null) {    mRemoteViewsAdapter.superNotifyDataSetChanged();    return true;  }  return false;}  }
class C{  public void playHorn(){  VSDSound snd=sound_list.get("HORN");  snd.loop();}  }
class C{  public void close() throws IgniteCheckedException {  it.close();}  }
class C{  public final void testGetModulus(){  RSAPrivateKeySpec rpks=new RSAPrivateKeySpec(BigInteger.valueOf(1234567890L),BigInteger.valueOf(3L));  assertEquals(1234567890L,rpks.getModulus().longValue());}  }
class C{  public boolean isMatch(Geometry geom,String opName,Object[] args,Result actualResult,Result expectedResult,double tolerance){  return true;}  }
class C{  protected Key engineTranslateKey(Key key) throws InvalidKeyException {  if (key != null) {    if (key instanceof DSAPrivateKey) {      DSAPrivateKey privateKey=(DSAPrivateKey)key;      DSAParams params=privateKey.getParams();      try {        return engineGeneratePrivate(new DSAPrivateKeySpec(privateKey.getX(),params.getP(),params.getQ(),params.getG()));      } catch (      InvalidKeySpecException e) {        throw new InvalidKeyException("ATTENTION: InvalidKeySpecException: " + e);      }    }    if (key instanceof DSAPublicKey) {      DSAPublicKey publicKey=(DSAPublicKey)key;      DSAParams params=publicKey.getParams();      try {        return engineGeneratePublic(new DSAPublicKeySpec(publicKey.getY(),params.getP(),params.getQ(),params.getG()));      } catch (      InvalidKeySpecException e) {        throw new InvalidKeyException("ATTENTION: InvalidKeySpecException: " + e);      }    }  }  throw new InvalidKeyException("'key' is neither DSAPublicKey nor DSAPrivateKey");}  }
class C{  private static int writeSize(CstString value){  int utf16Size=value.getUtf16Size();  return Leb128Utils.unsignedLeb128Size(utf16Size) + value.getUtf8Size() + 1;}  }
class C{  public List<IMessage> deleteAfter(int index,int amount) throws RateLimitException, DiscordException, MissingPermissionsException {  return deleteFromRange(index,index + amount);}  }
class C{  public static YamlConfiguration readFromResource(Class<?> clazz,String resourcePath) throws IOException {  URL url=clazz.getResource(resourcePath);  return readFromFile(new File(url.getFile()));}  }
class C{  public static void requestStreamMedia(FragmentActivity activity,IDialogCallback consentCallback){  if (canStreamMedia(activity)) {    consentCallback.onPositiveClicked();  } else {    consentCallback.onNegativeClicked();  }}  }
class C{  public static void drawAlignedSprite(Graphics2D g2d,Sprite sprite,HorizontalAlignment horizontalAlign,VerticalAlignment verticalAlign,int x,int y,int width,int height){  int qx=alignHorizontal(sprite,horizontalAlign,x,width);  int qy=alignVertical(sprite,verticalAlign,y,height);  sprite.draw(g2d,qx,qy);}  }
class C{  public static String objectAsString(IObject stringObject,int limit) throws SnapshotException {  Integer count=(Integer)stringObject.resolveValue("count");  if (count == null)   return null;  if (count.intValue() == 0)   return "";  IPrimitiveArray charArray=(IPrimitiveArray)stringObject.resolveValue("value");  if (charArray == null)   return null;  Integer offset=(Integer)stringObject.resolveValue("offset");  if (offset == null)   return null;  return arrayAsString(charArray,offset,count,limit);}  }
class C{  public FullHeapSystemGC(){  super(Options.set,"Full Heap System GC","Should a major GC be performed when a system GC is triggered?",false);}  }
class C{  private boolean endsWithDelimiter(IDocument d,String txt){  String[] delimiters=d.getLegalLineDelimiters();  if (delimiters != null) {    return TextUtilities.endsWith(delimiters,txt) > -1;  }  return false;}  }
class C{  public static CronScheduleBuilder weeklyOnDayAndHourAndMinute(int dayOfWeek,int hour,int minute){  DateBuilder.validateDayOfWeek(dayOfWeek);  DateBuilder.validateHour(hour);  DateBuilder.validateMinute(minute);  String cronExpression=String.format("0 %d %d ? * %d",minute,hour,dayOfWeek);  return cronScheduleNoParseException(cronExpression);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:09.965 -0400",hash_original_method="98E24A6845BBF25040BEC171675E83AB",hash_generated_method="1FE2BBDF8C727F155D7F6FB9C0D304DF") public void remove(){  checkState();  checkPermission(permission);  iterator.remove();}  }
class C{  void implCompress(byte[] buf,int ofs){  b2iLittle64(buf,ofs,x);  int a=state[0];  int b=state[1];  int c=state[2];  int d=state[3];  a=FF(a,b,c,d,x[0],S11,0xd76aa478);  d=FF(d,a,b,c,x[1],S12,0xe8c7b756);  c=FF(c,d,a,b,x[2],S13,0x242070db);  b=FF(b,c,d,a,x[3],S14,0xc1bdceee);  a=FF(a,b,c,d,x[4],S11,0xf57c0faf);  d=FF(d,a,b,c,x[5],S12,0x4787c62a);  c=FF(c,d,a,b,x[6],S13,0xa8304613);  b=FF(b,c,d,a,x[7],S14,0xfd469501);  a=FF(a,b,c,d,x[8],S11,0x698098d8);  d=FF(d,a,b,c,x[9],S12,0x8b44f7af);  c=FF(c,d,a,b,x[10],S13,0xffff5bb1);  b=FF(b,c,d,a,x[11],S14,0x895cd7be);  a=FF(a,b,c,d,x[12],S11,0x6b901122);  d=FF(d,a,b,c,x[13],S12,0xfd987193);  c=FF(c,d,a,b,x[14],S13,0xa679438e);  b=FF(b,c,d,a,x[15],S14,0x49b40821);  a=GG(a,b,c,d,x[1],S21,0xf61e2562);  d=GG(d,a,b,c,x[6],S22,0xc040b340);  c=GG(c,d,a,b,x[11],S23,0x265e5a51);  b=GG(b,c,d,a,x[0],S24,0xe9b6c7aa);  a=GG(a,b,c,d,x[5],S21,0xd62f105d);  d=GG(d,a,b,c,x[10],S22,0x2441453);  c=GG(c,d,a,b,x[15],S23,0xd8a1e681);  b=GG(b,c,d,a,x[4],S24,0xe7d3fbc8);  a=GG(a,b,c,d,x[9],S21,0x21e1cde6);  d=GG(d,a,b,c,x[14],S22,0xc33707d6);  c=GG(c,d,a,b,x[3],S23,0xf4d50d87);  b=GG(b,c,d,a,x[8],S24,0x455a14ed);  a=GG(a,b,c,d,x[13],S21,0xa9e3e905);  d=GG(d,a,b,c,x[2],S22,0xfcefa3f8);  c=GG(c,d,a,b,x[7],S23,0x676f02d9);  b=GG(b,c,d,a,x[12],S24,0x8d2a4c8a);  a=HH(a,b,c,d,x[5],S31,0xfffa3942);  d=HH(d,a,b,c,x[8],S32,0x8771f681);  c=HH(c,d,a,b,x[11],S33,0x6d9d6122);  b=HH(b,c,d,a,x[14],S34,0xfde5380c);  a=HH(a,b,c,d,x[1],S31,0xa4beea44);  d=HH(d,a,b,c,x[4],S32,0x4bdecfa9);  c=HH(c,d,a,b,x[7],S33,0xf6bb4b60);  b=HH(b,c,d,a,x[10],S34,0xbebfbc70);  a=HH(a,b,c,d,x[13],S31,0x289b7ec6);  d=HH(d,a,b,c,x[0],S32,0xeaa127fa);  c=HH(c,d,a,b,x[3],S33,0xd4ef3085);  b=HH(b,c,d,a,x[6],S34,0x4881d05);  a=HH(a,b,c,d,x[9],S31,0xd9d4d039);  d=HH(d,a,b,c,x[12],S32,0xe6db99e5);  c=HH(c,d,a,b,x[15],S33,0x1fa27cf8);  b=HH(b,c,d,a,x[2],S34,0xc4ac5665);  a=II(a,b,c,d,x[0],S41,0xf4292244);  d=II(d,a,b,c,x[7],S42,0x432aff97);  c=II(c,d,a,b,x[14],S43,0xab9423a7);  b=II(b,c,d,a,x[5],S44,0xfc93a039);  a=II(a,b,c,d,x[12],S41,0x655b59c3);  d=II(d,a,b,c,x[3],S42,0x8f0ccc92);  c=II(c,d,a,b,x[10],S43,0xffeff47d);  b=II(b,c,d,a,x[1],S44,0x85845dd1);  a=II(a,b,c,d,x[8],S41,0x6fa87e4f);  d=II(d,a,b,c,x[15],S42,0xfe2ce6e0);  c=II(c,d,a,b,x[6],S43,0xa3014314);  b=II(b,c,d,a,x[13],S44,0x4e0811a1);  a=II(a,b,c,d,x[4],S41,0xf7537e82);  d=II(d,a,b,c,x[11],S42,0xbd3af235);  c=II(c,d,a,b,x[2],S43,0x2ad7d2bb);  b=II(b,c,d,a,x[9],S44,0xeb86d391);  state[0]+=a;  state[1]+=b;  state[2]+=c;  state[3]+=d;}  }
class C{  @Override public void onPageModeCleared(){  ArrayList<PageSubscription> subscriptions=cloneSubscriptions();  Transaction tx=new TransactionImpl(storageManager);  for (  PageSubscription sub : subscriptions) {    try {      sub.onPageModeCleared(tx);    } catch (    Exception e) {      ActiveMQServerLogger.LOGGER.warn("Error while cleaning paging on queue " + sub.getQueue().getName(),e);    }  }  try {    tx.commit();  } catch (  Exception e) {    ActiveMQServerLogger.LOGGER.warn("Error while cleaning page, during the commit",e);  }}  }
class C{  public DefaultContourDataset(){  super();}  }
class C{  public boolean removeLastOccurrence(Object o){  for (Entry<E> e=header.previous; e != header; e=e.previous) {    if (o == e.element) {      remove(e);      return true;    }  }  return false;}  }
class C{  public boolean intersects(Coordinate p0,Coordinate p1){  if (scaleFactor == 1.0)   return intersectsScaled(p0,p1);  copyScaled(p0,p0Scaled);  copyScaled(p1,p1Scaled);  return intersectsScaled(p0Scaled,p1Scaled);}  }
class C{  public static boolean putMapNotEmptyKey(Map<String,String> map,String key,String value){  if (map == null || StringUtils.isEmpty(key)) {    return false;  }  map.put(key,value);  return true;}  }
class C{  @Transactional public void refreshStepExecution(StepExecution freshStepExecution){  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Refreshing StepExecution with ID " + freshStepExecution.getId());  }  StepExecution dirtyStepExec=null;  while (dirtyStepExec == null) {synchronized (lockObject) {      dirtyStepExec=entityManager.find(StepExecution.class,freshStepExecution.getId());    }    if (dirtyStepExec == null) {      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("Waiting for StepExecution ID " + freshStepExecution.getId() + " to be committed prior to refreshing it.");      }      try {        Thread.sleep(100);      } catch (      InterruptedException e) {        throw new IllegalStateException("InterruptedException thrown when waiting for StepExecution to be refreshed.");      }    }  }  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Retrieved Dirty StepExecution.");  }  dirtyStepExec.refresh(freshStepExecution);  entityManager.merge(dirtyStepExec);  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Updated Dirty StepExection.");  }}  }
class C{  public synchronized void close(){  try {    writer.close();  } catch (  IOException ioe) {    ioe.printStackTrace();  }}  }
class C{  public static Codec[] generateDecodingCodecChain(String encoding){  if (encoding.equalsIgnoreCase(H264VideoFormat.ENCODING)) {    Codec[] chain={new com.orangelabs.rcs.core.ims.protocol.rtp.codec.video.h264.JavaDepacketizer()};    return chain;  } else {    return new Codec[0];  }}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9,E e10){  return construct(e1,e2,e3,e4,e5,e6,e7,e8,e9,e10);}  }
class C{  public boolean isOnline(){  return mState == DeviceState.ONLINE;}  }
class C{  private void scheduleInvalidTapNotification(){  mRunnableHandler.postDelayed(mHandleInvalidTapRunnable,INVALID_IF_NO_SELECTION_CHANGE_AFTER_TAP_MS);}  }
class C{  private void initFromCollection(Collection<? extends E> c){  initElementsFromCollection(c);  heapify();}  }
class C{  public static int[] jsonArrayToIntArray(String json){  try {    JSONArray jsonArray=new JSONArray(json);    int[] intArray=new int[jsonArray.length()];    for (int i=0; i < jsonArray.length(); i++) {      intArray[i]=jsonArray.getInt(i);    }    return intArray;  } catch (  JSONException e) {    Log.e(TAG,"Error during Json processing: ",e);  }  return new int[0];}  }
class C{  protected void addEvent(Event event){  if (event != null) {    events.put(event.getId(),event);  }}  }
class C{  public static ExportMask updateZoningMap(DbClient dbClient,ExportMask exportMask,Map<URI,List<URI>> assignments,Map<URI,List<URI>> exportMasksToUpdateOnDeviceWithStoragePorts){  StringSetMap existingZoningMap=exportMask.getZoningMap();  for (  URI initiatorURI : assignments.keySet()) {    boolean initiatorMatchFound=false;    if (existingZoningMap != null && !existingZoningMap.isEmpty()) {      for (      String initiatorId : existingZoningMap.keySet()) {        if (initiatorURI.toString().equals(initiatorId)) {          StringSet ports=existingZoningMap.get(initiatorId);          if (ports != null && !ports.isEmpty()) {            initiatorMatchFound=true;            StringSet newTargets=StringSetUtil.uriListToStringSet(assignments.get(initiatorURI));            if (!ports.containsAll(newTargets)) {              ports.addAll(newTargets);              exportMask.addZoningMapEntry(initiatorId,ports);              updateExportMaskStoragePortsMap(exportMask,exportMasksToUpdateOnDeviceWithStoragePorts,assignments,initiatorURI);            }          }        }      }    }    if (!initiatorMatchFound) {      exportMask.addZoningMapEntry(initiatorURI.toString(),StringSetUtil.uriListToStringSet(assignments.get(initiatorURI)));      updateExportMaskStoragePortsMap(exportMask,exportMasksToUpdateOnDeviceWithStoragePorts,assignments,initiatorURI);    }  }  dbClient.persistObject(exportMask);  return exportMask;}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (!(o instanceof AuthTimeWithHash))   return false;  AuthTimeWithHash that=(AuthTimeWithHash)o;  return Objects.equals(hash,that.hash) && Objects.equals(client,that.client) && Objects.equals(server,that.server)&& ctime == that.ctime && cusec == that.cusec;}  }
class C{  public void writeJAASConf() throws IOException {  System.setProperty("java.security.auth.login.config",JAAS_CONF);  File f=new File(JAAS_CONF);  FileOutputStream fos=new FileOutputStream(f);  fos.write(("com.sun.security.jgss.krb5.initiate {\n" + "    com.sun.security.auth.module.Krb5LoginModule required;\n};\n" + "com.sun.security.jgss.krb5.accept {\n"+ "    com.sun.security.auth.module.Krb5LoginModule required\n"+ "    principal=\"*\"\n"+ "    useKeyTab=true\n"+ "    isInitiator=false\n"+ "    storeKey=true;\n};\n"+ "client {\n"+ "    com.sun.security.auth.module.Krb5LoginModule required;\n};\n"+ "server {\n"+ "    com.sun.security.auth.module.Krb5LoginModule required\n"+ "    principal=\"" + SERVER + "\"\n"+ "    useKeyTab=true\n"+ "    storeKey=true;\n};\n"+ "backend {\n"+ "    com.sun.security.auth.module.Krb5LoginModule required\n"+ "    principal=\""+ BACKEND+ "\"\n"+ "    useKeyTab=true\n"+ "    storeKey=true\n"+ "    isInitiator=false;\n};\n").getBytes());  fos.close();}  }
class C{  protected StringBuffer parseString(StringBuffer sbuf) throws IOException {  int ch=read();  for (; ch >= 0 && ch != '<'; ch=read()) {    if (ch == '&') {      ch=read();      if (ch == '#') {        ch=read();        if (ch >= '0' && ch <= '9') {          int v=0;          for (; ch >= '0' && ch <= '9'; ch=read()) {            v=10 * v + ch - '0';          }          sbuf.append((char)v);        }      } else {        StringBuffer entityBuffer=new StringBuffer();        for (; ch >= 'a' && ch <= 'z'; ch=read())         entityBuffer.append((char)ch);        String entity=entityBuffer.toString();        if (entity.equals("amp"))         sbuf.append('&'); else         if (entity.equals("apos"))         sbuf.append('\''); else         if (entity.equals("quot"))         sbuf.append('"'); else         if (entity.equals("lt"))         sbuf.append('<'); else         if (entity.equals("gt"))         sbuf.append('>'); else         throw new BurlapProtocolException("unknown XML entity &" + entity + "; at `"+ (char)ch+ "'");      }      if (ch != ';')       throw expectedChar("';'",ch);    } else     if (ch < 0x80)     sbuf.append((char)ch); else     if ((ch & 0xe0) == 0xc0) {      int ch1=read();      int v=((ch & 0x1f) << 6) + (ch1 & 0x3f);      sbuf.append((char)v);    } else     if ((ch & 0xf0) == 0xe0) {      int ch1=read();      int ch2=read();      int v=((ch & 0x0f) << 12) + ((ch1 & 0x3f) << 6) + (ch2 & 0x3f);      sbuf.append((char)v);    } else     throw new BurlapProtocolException("bad utf-8 encoding");  }  peek=ch;  return sbuf;}  }
class C{  public static void fail(String message){  Assert.fail(message);}  }
class C{  public boolean canReopenSource(){  return false;}  }
class C{  @GET @Path("/login") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public LoginData landingPage(){  LoginData data=new LoginData();  return data;}  }
class C{  private PrintElement includeFormat(MPrintFormatItem item,PrintData data){  newLine();  PrintElement element=null;  MPrintFormat format=MPrintFormat.get(getCtx(),item.getAD_PrintFormatChild_ID(),false);  format.setLanguage(m_format.getLanguage());  if (m_format.isTranslationView())   format.setTranslationLanguage(m_format.getLanguage());  int AD_Column_ID=item.getAD_Column_ID();  log.info(format + " - Item=" + item.getName()+ " ("+ AD_Column_ID+ ")");  Object obj=data.getNode(new Integer(AD_Column_ID));  if (obj == null) {    data.dumpHeader();    data.dumpCurrentRow();    log.log(Level.SEVERE,"No Node - AD_Column_ID=" + AD_Column_ID + " - "+ item+ " - "+ data);    return null;  }  PrintDataElement dataElement=(PrintDataElement)obj;  String recordString=dataElement.getValueKey();  if (recordString == null || recordString.length() == 0) {    data.dumpHeader();    data.dumpCurrentRow();    log.log(Level.SEVERE,"No Record Key - " + dataElement + " - AD_Column_ID="+ AD_Column_ID+ " - "+ item);    return null;  }  int Record_ID=0;  try {    Record_ID=Integer.parseInt(recordString);  } catch (  Exception e) {    data.dumpCurrentRow();    log.log(Level.SEVERE,"Invalid Record Key - " + recordString + " ("+ e.getMessage()+ ") - AD_Column_ID="+ AD_Column_ID+ " - "+ item);    return null;  }  MQuery query=new MQuery(format.getAD_Table_ID());  query.addRestriction(item.getColumnName(),MQuery.EQUAL,new Integer(Record_ID));  format.setTranslationViewQuery(query);  log.fine(query.toString());  DataEngine de=new DataEngine(format.getLanguage(),m_TrxName);  PrintData includedData=de.getPrintData(data.getCtx(),format,query);  if (includedData == null)   return null;  data.addNode(includedData);  log.fine(includedData.toString());  element=layoutTable(format,includedData,item.getXSpace());  if (element.getPageCount() > 1) {    Point2D.Double loc=m_position[m_area];    element.setLocation(loc);    for (int p=1; p < element.getPageCount(); p++) {      m_currPage.addElement(element);      newPage(true,false);    }    m_position[m_area]=loc;    ((TableElement)element).setHeightToLastPage();  }  m_lastWidth[m_area]=element.getWidth();  m_lastHeight[m_area]=element.getHeight();  if (!isXspaceFor(m_lastWidth[m_area])) {    log.finest("Not enough X space for " + m_lastWidth[m_area] + " - remaining "+ getXspace()+ " - Area="+ m_area);    newLine();  }  if (m_area == AREA_CONTENT && !isYspaceFor(m_lastHeight[m_area])) {    log.finest("Not enough Y space " + m_lastHeight[m_area] + " - remaining "+ getYspace()+ " - Area="+ m_area);    newPage(true,false);  }  return element;}  }
class C{  private static void reply_Login2_Org(body body,WebSessionCtx wsc,WWindowStatus ws,String formName,String fieldValue,String locationValue){  String form=null;  log.info("Location-Org: " + locationValue);  form=locationValue + WebEnv.TARGET_WINDOW + ".document."+ formName+ ".";  StringBuffer script=new StringBuffer();  script.append("var C=").append(form).append(WLogin.P_WAREHOUSE).append(".options; ");  script.append("C.length=0; ");  KeyNamePair org=new KeyNamePair(Integer.parseInt(fieldValue),fieldValue);  Login login=new Login(wsc.ctx);  String error=login.validateLogin(org);  if (error != null && error.length() > 0) {    log.severe(error);    ws.mWindow=null;    wsc.ctx=new Properties();    return;  }  KeyNamePair[] whs=login.getWarehouses(org);  if (whs != null) {    for (int i=0; i < whs.length; i++) {      KeyNamePair p=whs[i];      script.append("C[").append(i).append("]=new Option('");      script.append(p.getName());      script.append("','");      script.append(p.getKey());      script.append("'); ");    }  }  body.addElement(new p().addElement(WLogin.P_WAREHOUSE + "="));  body.addElement(new script(script.toString()));}  }
class C{  public void testAbsoluteDirectoryReplacement() throws Exception {  this.mojo.setContainerElement(new Container());  this.mojo.getContainerElement().setHome("home");  this.mojo.getContainerElement().setContainerId("dummy-container");  this.mojo.setConfigurationElement(new Configuration());  this.mojo.getConfigurationElement().setHome("configuration-home");  this.mojo.getContainerElement().setZipUrlInstaller(new ZipUrlInstaller());  this.mojo.getContainerElement().getZipUrlInstaller().setDownloadDir("downlad-dir");  this.mojo.getContainerElement().getZipUrlInstaller().setExtractDir("extract-dir");  this.mojo.getContainerElement().setArtifactInstaller(new ArtifactInstaller());  this.mojo.getContainerElement().getArtifactInstaller().setExtractDir("artifact-dir");  assertFalse("Container home is already absolute",new File(this.mojo.getContainerElement().getHome()).isAbsolute());  assertFalse("Container configuration home is already absolute",new File(this.mojo.getConfigurationElement().getHome()).isAbsolute());  assertFalse("Zip URL installer download directory is already absolute",new File(this.mojo.getContainerElement().getZipUrlInstaller().getDownloadDir()).isAbsolute());  assertFalse("Zip URL installer extract directory is already absolute",new File(this.mojo.getContainerElement().getZipUrlInstaller().getExtractDir()).isAbsolute());  assertFalse("Artifact installer extract directory is already absolute",new File(this.mojo.getContainerElement().getArtifactInstaller().getExtractDir()).isAbsolute());  try {    this.mojo.doExecute();  } catch (  ContainerException e) {    assertTrue("Exception message [" + e.getMessage() + "] doesn't contain dummy-container",e.getMessage().contains("dummy-container"));  }  assertTrue("Container home is not absolute",new File(this.mojo.getContainerElement().getHome()).isAbsolute());  assertTrue("Container configuration home is not absolute",new File(this.mojo.getConfigurationElement().getHome()).isAbsolute());  assertTrue("Zip URL installer download directory is not absolute",new File(this.mojo.getContainerElement().getZipUrlInstaller().getDownloadDir()).isAbsolute());  assertTrue("Zip URL installer extract directory is not absolute",new File(this.mojo.getContainerElement().getZipUrlInstaller().getExtractDir()).isAbsolute());  assertTrue("Artifact installer extract directory is not absolute",new File(this.mojo.getContainerElement().getArtifactInstaller().getExtractDir()).isAbsolute());}  }
class C{  protected ChainedListBase<TPayload> add(TPayload another){  if (myPayload == null)   myPayload=another; else {    ChainedListBase<TPayload> farthest=this;    while (farthest.myNext != null)     farthest=farthest.myNext;    farthest.myNext=new ChainedListBase<TPayload>(another);  }  return this;}  }
class C{  public static File unpackLibraryAndDependencies(String shortName) throws UnsatisfiedLinkError {  assertInitialized();  try {    return unpackLibraryBySoName(System.mapLibraryName(shortName));  } catch (  IOException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public static void print(boolean x){  out.print(x);  out.flush();}  }
class C{  private void removeDelimiterKeepNode(Delimiter delim){  removeDelimiter(delim);}  }
