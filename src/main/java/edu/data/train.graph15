class C{  public Headers readHeaders() throws IOException {  Headers.Builder headers=new Headers.Builder();  for (String line; (line=source.readUtf8LineStrict()).length() != 0; ) {    Internal.instance.addLenient(headers,line);  }  return headers.build();}  }
class C{  public AllocationRequest initializeFirstAllocation(){  if (mAllocatedSections.size() > 0) {    log.error("ERROR - Request to initialize first allocation, when allocations already present");    return null;  }  if ((mStartBlockSectionSequenceNumber > 0) && (mStartBlock != null)) {    mNextSectionToAllocate=mTransit.getSectionFromBlockAndSeq(mStartBlock,mStartBlockSectionSequenceNumber);    if (mNextSectionToAllocate == null) {      mNextSectionToAllocate=mTransit.getSectionFromConnectedBlockAndSeq(mStartBlock,mStartBlockSectionSequenceNumber);      if (mNextSectionToAllocate == null) {        log.error("ERROR - Cannot find Section for first allocation of ActiveTrain" + getActiveTrainName());        return null;      }    }    mNextSectionSeqNumber=mStartBlockSectionSequenceNumber;    mNextSectionDirection=getAllocationDirectionFromSectionAndSeq(mNextSectionToAllocate,mNextSectionSeqNumber);  } else {    log.error("ERROR - Insufficient information to initialize first allocation");    return null;  }  if (!DispatcherFrame.instance().requestAllocation(this,mNextSectionToAllocate,mNextSectionDirection,mNextSectionSeqNumber,true,null)) {    log.error("Allocation request failed for first allocation of " + getActiveTrainName());  }  if (DispatcherFrame.instance().getRosterEntryInBlock() && getRosterEntry() != null) {    mStartBlock.setValue(getRosterEntry());  } else   if (DispatcherFrame.instance().getShortNameInBlock()) {    mStartBlock.setValue(mTrainName);  }  AllocationRequest ar=DispatcherFrame.instance().findAllocationRequestInQueue(mNextSectionToAllocate,mNextSectionSeqNumber,mNextSectionDirection,this);  return ar;}  }
class C{  public static ComponentUI createUI(JComponent x){  return new BasicSplitPaneUI();}  }
class C{  @GET public SampleResponse sampleRequestHandler(){  SampleResponse sampleResponse=new SampleResponse(1,"Hello, World!");  return sampleResponse;}  }
class C{  public void squareThisMatrix(){  GF2Polynomial result=new GF2Polynomial(mDegree);  for (int i=0; i < mDegree; i++) {    if (polynomial.vectorMult(((GF2nPolynomialField)mField).squaringMatrix[mDegree - i - 1])) {      result.setBit(i);    }  }  polynomial=result;}  }
class C{  @Override public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {  Console cons=System.console();  if (cons == null && password == null) {    throw new UnsupportedCallbackException(callbacks[0],"Console is not available");  }  for (int i=0; i < callbacks.length; i++) {    if (callbacks[i] instanceof PasswordCallback) {      if (password == null) {        ((PasswordCallback)callbacks[i]).setPassword(cons.readPassword("%s",((PasswordCallback)callbacks[i]).getPrompt()));      } else {        ((PasswordCallback)callbacks[i]).setPassword(password);      }    } else {      throw new UnsupportedCallbackException(callbacks[i]);    }  }}  }
class C{  public ShardRestoreStatus(String nodeId,State state,String reason){  this.nodeId=nodeId;  this.state=state;  this.reason=reason;}  }
class C{  public static void checkAndSetSectorParam(Element context,AVList params,String paramKey,String paramName,XPath xpath){  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramName == null) {    String message=Logging.getMessage("nullValue.ParameterNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o == null) {    Sector sector=getSector(context,paramName,xpath);    if (sector != null)     params.setValue(paramKey,sector);  }}  }
class C{  public String convertToString(Class<?> targetClass,Object value){  UIComponent component=getComponent();  Converter converter=app.createConverter(targetClass);  if (null == converter) {    throw new FacesException("Cannot create Converter to convert " + targetClass.getName() + " value "+ value+ " to string.");  }  FacesContext currentInstance=FacesContext.getCurrentInstance();  try {    return converter.getAsString(currentInstance,component,value);  } catch (  ConverterException ce) {    addConversionErrorMessage(currentInstance,component,ce);    return null;  }}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public void abortUpload() throws RcsGenericException {  try {    mUploadInf.abortUpload();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public void add(final T o){}  }
class C{  public SharedPreferences putString(String key,String value){  editor.putString(key,value);  return this;}  }
class C{  public JsonBuilder(JsonGenerator generator){  this.generator=generator;}  }
class C{  public Path createClasspath(){  if (this.classpath == null) {    this.classpath=new Path(getProject());  }  return this.classpath.createPath();}  }
class C{  @Override public boolean printingEnabled(OptOptions options,boolean before){  return false;}  }
class C{  public static String requestPath(HttpUrl url){  String path=url.encodedPath();  String query=url.encodedQuery();  return query != null ? (path + '?' + query) : path;}  }
class C{  public boolean isTransferred(){  Object oo=get_Value(COLUMNNAME_IsTransferred);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isSymmetricalSet(){  return symmetry;}  }
class C{  public static ImageSource asset(String assetName){  if (assetName == null) {    throw new NullPointerException("Asset name must not be null");  }  return uri(ASSET_SCHEME + assetName);}  }
class C{  public void pauseWork(){  mExitTasksEarly=false;  setPause(true);  if (DEBUG) {    CLog.d(LOG_TAG,"work_status: pauseWork %s",this);  }}  }
class C{  public List<Object> eval(ExpressionAST e) throws ScopeException {  List<Object> results=new ArrayList<Object>();  if (e instanceof Operator && ((Operator)e).getOperatorDefinition().equals(OperatorScope.getDefault().lookupByExtendedID(VectorOperatorDefinition.ID))) {    Operator op=(Operator)e;    for (    ExpressionAST param : op.getArguments()) {      results.add(eval_single(param));    }  } else {    results.add(eval_single(e));  }  return results;}  }
class C{  private int lastIndexOf(int elem){  int boffset=m_firstFree & m_MASK;  for (int index=m_firstFree >>> m_SHIFT; index >= 0; --index) {    int[] block=m_map[index];    if (block != null)     for (int offset=boffset; offset >= 0; --offset)     if (block[offset] == elem)     return offset + index * m_blocksize;    boffset=0;  }  return -1;}  }
class C{  private String uploadBase64FileToBucket(String base64Image) throws Exception {  Base64 base64=new Base64();  byte[] bytes=base64.decode(base64Image.getBytes());  File tempFile=File.createTempFile("taxReceipt",".jpg");  FileOutputStream fileOutputStream=new FileOutputStream(tempFile);  fileOutputStream.write(bytes);  fileOutputStream.flush();  fileOutputStream.close();  String s3OutputFileName=uploadFileToBucket(tempFile);  tempFile.deleteOnExit();  return s3OutputFileName;}  }
class C{  public HighlightController(WorldWindow wwd,Object highlightEventType){  this.wwd=wwd;  this.highlightEventType=highlightEventType;  this.wwd.addSelectListener(this);}  }
class C{  public Trie(){  m_Root=new Node();  m_lowerCaseOnly=false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 08:48:10.279 -0400",hash_original_method="DA4C09BDA6B054227417A77E4BD22C5C",hash_generated_method="59B33FBE6FEB2F39476D20162A46CCAF") public MediaSize asPortrait(){  if (isPortrait()) {    return this;  }  return new MediaSize(mId,mLabel,mPackageName,Math.min(mWidthMils,mHeightMils),Math.max(mWidthMils,mHeightMils),mLabelResId);}  }
class C{  public static void signedMul(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final OperandSize firstOperandSize,final String firstOperand,final OperandSize secondOperandSize,final String secondOperand,final OperandSize resultOperandSize,final String resultOperand){  final String xoredResult=environment.getNextVariableString();  final String multResult=environment.getNextVariableString();  final String toggleMask=environment.getNextVariableString();  final String xoredSigns=environment.getNextVariableString();  long baseOffset=offset - instructions.size();  final Pair<String,String> abs1=generateAbs(environment,baseOffset + instructions.size(),firstOperand,firstOperandSize,instructions);  final Pair<String,String> abs2=generateAbs(environment,baseOffset + instructions.size(),secondOperand,secondOperandSize,instructions);  final String firstAbs=abs1.second();  final String secondAbs=abs2.second();  baseOffset=offset + instructions.size();  instructions.add(ReilHelpers.createMul(baseOffset++,firstOperandSize,firstAbs,secondOperandSize,secondAbs,resultOperandSize,multResult));  instructions.add(ReilHelpers.createXor(baseOffset++,firstOperandSize,abs1.first(),secondOperandSize,abs2.first(),firstOperandSize,xoredSigns));  instructions.add(ReilHelpers.createSub(baseOffset++,firstOperandSize,"0",firstOperandSize,xoredSigns,resultOperandSize,toggleMask));  instructions.add(ReilHelpers.createXor(baseOffset++,resultOperandSize,toggleMask,resultOperandSize,multResult,resultOperandSize,xoredResult));  instructions.add(ReilHelpers.createAdd(baseOffset,resultOperandSize,xoredResult,firstOperandSize,xoredSigns,resultOperandSize,resultOperand));}  }
class C{  public RecordAccessDialog(JFrame owner,int AD_Table_ID,int Record_ID){  super(owner,Msg.translate(Env.getCtx(),"RecordAccessDialog"));  log.info("AD_Table_ID=" + AD_Table_ID + ", Record_ID="+ Record_ID);  m_AD_Table_ID=AD_Table_ID;  m_Record_ID=Record_ID;  try {    dynInit();    jbInit();  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  AEnv.showCenterWindow(owner,this);}  }
class C{  public static Kind location(){  return new Kind(LOCATION);}  }
class C{  public boolean strip(String infile,String outfile){  if (infile == null)   throw new NullPointerException("Strip: infile cannot be null");  File in=new File(infile);  File out=null;  if (outfile != null)   out=new File(outfile);  return strip(in,out);}  }
class C{  @POST @Path("import") @ZeppelinApi public Response importNote(String req) throws IOException {  AuthenticationInfo subject=new AuthenticationInfo(SecurityUtils.getPrincipal());  Note newNote=notebook.importNote(req,null,subject);  return new JsonResponse<>(Status.CREATED,"",newNote.getId()).build();}  }
class C{  public static UUIDPersistentHandle makeHandle(final byte[] value){  return new UUIDPersistentHandle(value,0);}  }
class C{  public Builder<VType> putAll(Map<Integer,VType> map){  for (  Map.Entry<Integer,VType> entry : map.entrySet()) {    this.map.put(entry.getKey(),entry.getValue());  }  return this;}  }
class C{  private void combineBlocks(int alphaLabel,IntList betaLabels){  int szBetas=betaLabels.size();  for (int i=0; i < szBetas; i++) {    int betaLabel=betaLabels.get(i);    BasicBlock bb=blocks.labelToBlock(betaLabel);    IntList preds=ropMethod.labelToPredecessors(bb.getLabel());    int szPreds=preds.size();    for (int j=0; j < szPreds; j++) {      BasicBlock predBlock=newBlocks.labelToBlock(preds.get(j));      replaceSucc(predBlock,betaLabel,alphaLabel);    }  }}  }
class C{  LibraryInfo(String name,VersionInfo version,String localePrefix,String contract,ResourceHelper helper){  this.name=name;  this.version=version;  this.localePrefix=localePrefix;  this.contract=contract;  this.helper=helper;  initPath();}  }
class C{  public double distanceSq(final MutableInt2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return (dx * dx + dy * dy);}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,ASN1Encodable value) throws IOException {  this.addExtension(oid,critical,value.toASN1Primitive().getEncoded(ASN1Encoding.DER));}  }
class C{  public void update(Graphics g){  paint(g);}  }
class C{  public static Builder builder(){  return new Builder(new LeaveResponse());}  }
class C{  public void testCloning() throws CloneNotSupportedException {  DefaultPieDataset d1=new DefaultPieDataset();  d1.setValue("V1",new Integer(1));  d1.setValue("V2",null);  d1.setValue("V3",new Integer(3));  DefaultPieDataset d2=(DefaultPieDataset)d1.clone();  assertTrue(d1 != d2);  assertTrue(d1.getClass() == d2.getClass());  assertTrue(d1.equals(d2));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.N4_TYPE_DECLARATION__ANNOTATION_LIST:    return getAnnotationList();case N4JSPackage.N4_TYPE_DECLARATION__DECLARED_MODIFIERS:  return getDeclaredModifiers();case N4JSPackage.N4_TYPE_DECLARATION__NAME:return getName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public SQLTransientConnectionException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final short value){  buffer.append(value);}  }
class C{  public boolean hasLTProfile(){  final boolean certValues=DSSXMLUtils.isNotEmpty(signatureElement,xPathQueryHolder.XPATH_CERTIFICATE_VALUES);  final boolean revocationValues=DSSXMLUtils.isNotEmpty(signatureElement,xPathQueryHolder.XPATH_REVOCATION_VALUES);  boolean notEmptyCRL=DSSXMLUtils.isNotEmpty(signatureElement,xPathQueryHolder.XPATH_ENCAPSULATED_CRL_VALUES);  boolean notEmptyOCSP=DSSXMLUtils.isNotEmpty(signatureElement,xPathQueryHolder.XPATH_OCSP_VALUES_ENCAPSULATED_OCSP);  boolean isLTProfile=revocationValues && (notEmptyCRL || notEmptyOCSP);  if (!isLTProfile && certValues) {    isLTProfile=hasTProfile();  }  return isLTProfile;}  }
class C{  public void startScanning(final BeaconServiceConnection serviceConnection){  final Cursor cursor=mDatabaseHelper.getAllRegions();  while (cursor.moveToNext()) {    final UUID uuid=UUID.fromString(cursor.getString(2));    final int major=cursor.getInt(3);    final int minor=cursor.getInt(4);    final int event=cursor.getInt(6);    serviceConnection.startRangingBeaconsInRegion(BeaconsFragment.BEACON_COMPANY_ID,uuid,major,minor,this);    if (event == BeaconContract.EVENT_IN_RANGE || event == BeaconContract.EVENT_OUT_OF_RANGE)     serviceConnection.startMonitoringForRegion(BeaconsFragment.BEACON_COMPANY_ID,uuid,major,minor,this);  }}  }
class C{  @Override public void onDirectoryPick(String selectedAbsolutePath,int queryTypeId){  DirInfo dirInfo=getOrCreateDirInfo(queryTypeId);  dirInfo.currentPath=selectedAbsolutePath;  FotoSql.set(mFilter,selectedAbsolutePath,queryTypeId);  toGui(mFilter);}  }
class C{  public ICUFoldingFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static void checkVersion(){  final TfVersionCommand command=new TfVersionCommand();  cachedVersion=command.runSynchronously();  if (cachedVersion.compare(TF_MIN_VERSION) < 0) {    throw new ToolVersionException(cachedVersion,TF_MIN_VERSION);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public String maxDepthTipText(){  return "The maximum depth of the trees, 0 for unlimited.";}  }
class C{  @SuppressWarnings("unchecked") void bucketSort(IPoint[] points){  double min=Integer.MAX_VALUE;  double max=Integer.MIN_VALUE;  for (  IPoint p : points) {    double x=p.getX();    if (x < min) {      min=x;    }    if (x > max) {      max=x;    }  }  int n=points.length;  double delta=(max - min) / n;  LinkedList<IPoint>[] buckets=new LinkedList[n + 1];  for (  IPoint p : points) {    double d=(p.getX() - min) / delta;    int h=(int)d;    if (buckets[h] == null) {      buckets[h]=new LinkedList<IPoint>();    }    buckets[h].add(p);  }  int idx=0;  for (  LinkedList<IPoint> entries : buckets) {    if (entries == null)     continue;    int sz=entries.size();    if (sz == 0) {      continue;    }    if (sz == 1) {      points[idx++]=entries.get(0);      continue;    }    Iterator<IPoint> it=entries.iterator();    int low=idx;    points[idx++]=it.next();    while (it.hasNext()) {      int i=idx - 1;      IPoint entry=it.next();      while (i >= low && IPoint.xy_sorter.compare(points[i],entry) > 0) {        points[i + 1]=points[i];        i--;      }      points[i + 1]=entry;      idx++;    }  }}  }
class C{  private Integer insertAllContacts(Iterator<String> contactsIter){  final ArrayList<ContentProviderOperation> batchOperation=new ArrayList<ContentProviderOperation>();  while (contactsIter.hasNext())   addContact(contactsIter.next(),batchOperation);  try {    ContentProviderResult[] results=mContentResolver.applyBatch(ContactsContract.AUTHORITY,batchOperation);    return results.length / 2;  } catch (  RemoteException e) {    e.printStackTrace();  }catch (  OperationApplicationException e) {    e.printStackTrace();  }  return 0;}  }
class C{  public String convertPropertyNameKindToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public final void testIsStatePreserved02(){  int[] a=new int[]{981,2,1};  int[] aCopy=a.clone();  ECFieldF2m f=new ECFieldF2m(2000,aCopy);  f.getMidTermsOfReductionPolynomial()[0]=1532;  assertTrue(Arrays.equals(a,f.getMidTermsOfReductionPolynomial()));}  }
class C{  public GravitationalForce(float forceConstant,float direction){  params=new float[]{forceConstant,direction};  minValues=new float[]{DEFAULT_MIN_FORCE_CONSTANT,DEFAULT_MIN_DIRECTION};  maxValues=new float[]{DEFAULT_MAX_FORCE_CONSTANT,DEFAULT_MAX_DIRECTION};}  }
class C{  protected String normalizeNativeGuidForVIPR(String nativeGuid,Map<String,Object> keyMap){  if (keyMap.containsKey(Constants.IS_NEW_SMIS_PROVIDER) && Boolean.valueOf(keyMap.get(Constants.IS_NEW_SMIS_PROVIDER).toString())) {    nativeGuid=nativeGuid.replaceAll(Constants.SMIS_80_STYLE,Constants.SMIS_PLUS_REGEX);  }  return nativeGuid;}  }
class C{  public static String stringFor(int k){switch (k) {case cudaResourceTypeArray:    return "cudaResourceTypeArray";case cudaResourceTypeMipmappedArray:  return "cudaResourceTypeMipmappedArray";case cudaResourceTypeLinear:return "cudaResourceTypeLinear";case cudaResourceTypePitch2D:return "cudaResourceTypePitch2D";}return "INVALID cudaResourceType: " + k;}  }
class C{  @Override public void deliveryComplete(IMqttDeliveryToken messageToken){  service.traceDebug(TAG,"deliveryComplete(" + messageToken + ")");  MqttMessage message=savedSentMessages.remove(messageToken);  if (message != null) {    String topic=savedTopics.remove(messageToken);    String activityToken=savedActivityTokens.remove(messageToken);    String invocationContext=savedInvocationContexts.remove(messageToken);    Bundle resultBundle=messageToBundle(null,topic,message);    if (activityToken != null) {      resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.SEND_ACTION);      resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);      resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);      service.callbackToActivity(clientHandle,Status.OK,resultBundle);    }    resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.MESSAGE_DELIVERED_ACTION);    service.callbackToActivity(clientHandle,Status.OK,resultBundle);  }}  }
class C{  private void fciOrientbk(IKnowledge knowledge,Graph graph,List<Node> variables){  logger.log("info","Starting BK Orientation.");  for (Iterator<KnowledgeEdge> it=knowledge.forbiddenEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.ARROW);    graph.setEndpoint(from,to,Endpoint.CIRCLE);    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  for (Iterator<KnowledgeEdge> it=knowledge.requiredEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.TAIL);    graph.setEndpoint(from,to,Endpoint.ARROW);    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  logger.log("info","Finishing BK Orientation.");}  }
class C{  public void fitScreen(){  Matrix save=mViewPortHandler.fitScreen();  mViewPortHandler.refresh(save,this,true);}  }
class C{  public X509CertImpl(byte[] encoding) throws IOException {  this((Certificate)Certificate.ASN1.decode(encoding));}  }
class C{  public static List<Map<Object,Object>> sortMaps(List<Map<Object,Object>> listOfMaps,List<? extends String> sortKeys){  if (listOfMaps == null || sortKeys == null)   return null;  List<Map<Object,Object>> toSort=new ArrayList<Map<Object,Object>>(listOfMaps.size());  toSort.addAll(listOfMaps);  try {    MapComparator mc=new MapComparator(sortKeys);    Collections.sort(toSort,mc);  } catch (  Exception e) {    Debug.logError(e,"Problems sorting list of maps; returning null.",module);    return null;  }  return toSort;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double total;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          total=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              total+=z;            }          }          outputFile.setValue(row,col,total);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  Key unwrap(byte[] wrappedKey,String wrappedKeyAlgorithm,int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException {  byte[] encodedKey;  try {    encodedKey=doFinal(wrappedKey,0,wrappedKey.length);  } catch (  BadPaddingException ePadding) {    throw new InvalidKeyException("The wrapped key is not padded " + "correctly");  }catch (  IllegalBlockSizeException eBlockSize) {    throw new InvalidKeyException("The wrapped key does not have " + "the correct length");  }  return ConstructKeys.constructKey(encodedKey,wrappedKeyAlgorithm,wrappedKeyType);}  }
class C{  @Get public DebugCounterInfoOutput handleCounterInfoQuery(){  DebugCounterInfoOutput output;  Option choice=Option.ERROR_BAD_PARAM;  String param1=(String)getRequestAttributes().get("param1");  String param2=(String)getRequestAttributes().get("param2");  String param3=(String)getRequestAttributes().get("param3");  String param4=(String)getRequestAttributes().get("param4");  if (param1 == null) {    output=new DebugCounterInfoOutput(true);    return listCounters(output);  } else   if (param1.equals("all")) {    output=new DebugCounterInfoOutput(false);    populateCounters(debugCounter.getAllCounterValues(),output);    return output;  }  output=new DebugCounterInfoOutput(false);  String counterHierarchy="";  if (param2 == null) {    boolean isRegistered=debugCounter.containsModuleName(param1);    output=new DebugCounterInfoOutput(true);    if (isRegistered) {      return listCounters(param1,output);    } else {      choice=Option.ERROR_BAD_MODULE_NAME;    }  } else   if (param2.equals("all")) {    boolean isRegistered=debugCounter.containsModuleName(param1);    if (isRegistered) {      choice=Option.ONE_MODULE;    } else {      choice=Option.ERROR_BAD_MODULE_NAME;    }  } else {    counterHierarchy+=param2;    if (param3 != null) {      counterHierarchy+="/" + param3;      if (param4 != null) {        counterHierarchy+="/" + param4;      }    }    boolean isRegistered=debugCounter.containsModuleCounterHierarchy(param1,counterHierarchy);    if (isRegistered) {      choice=Option.MODULE_COUNTER_HIERARCHY;    } else {      choice=Option.ERROR_BAD_MODULE_COUNTER_NAME;    }  }switch (choice) {case ONE_MODULE:    populateCounters(debugCounter.getModuleCounterValues(param1),output);  break;case MODULE_COUNTER_HIERARCHY:populateCounters(debugCounter.getCounterHierarchy(param1,counterHierarchy),output);break;case ERROR_BAD_MODULE_NAME:output.error="Module name is not registered for debug-counters";break;case ERROR_BAD_MODULE_COUNTER_NAME:output.error="Counter not registered";break;case ERROR_BAD_PARAM:default :output.error="Bad param";}return output;}  }
class C{  public OMEllipse(LatLonPoint centerPoint,int w,int h,double rotateAngle){  super(centerPoint.getY(),centerPoint.getX(),0,0,w,h);  setRotationAngle(rotateAngle);}  }
class C{  private V remove(){  boolean wasHot=(status == Status.HOT);  V result=value;  evict();  if (wasHot) {    LirsEntry end=queueEnd();    if (end != null) {      end.migrateToStack();    }  }  return result;}  }
class C{  @SuppressWarnings("unchecked") public void start() throws IgniteException {  A.notNull(igniteConfigFile,"Ignite config file");  A.notNull(cacheName,"Cache name");  A.notNull(igniteTupleField,"Ignite tuple field");  setIgnite(StreamerContext.getIgnite());  final IgniteDataStreamer<K,V> dataStreamer=StreamerContext.getStreamer();  dataStreamer.autoFlushFrequency(autoFlushFrequency);  dataStreamer.allowOverwrite(allowOverwrite);  setStreamer(dataStreamer);  log=getIgnite().log();  stopped=false;}  }
class C{  private void writeLinkData(final List<CountSimComparison> countSimComparisonList,final FolderType folder){  PlacemarkType placemark;  double relativeError;  PointType point;  for (  CountSimComparison csc : countSimComparisonList) {    Id itemId=csc.getId();    Coord coord=null;    if (counts == null) {      Link link=this.network.getLinks().get(itemId);      coord=this.coordTransform.transform(calculatePlacemarkPosition(link));    } else {      coord=this.coordTransform.transform(counts.getCount(itemId).getCoord());    }    relativeError=csc.calculateRelativeError();    placemark=createPlacemark(itemId.toString(),csc,relativeError,csc.getHour());    point=kmlObjectFactory.createPointType();    point.getCoordinates().add(Double.toString(coord.getX()) + "," + Double.toString(coord.getY())+ ",0.0");    placemark.setAbstractGeometryGroup(kmlObjectFactory.createPoint(point));    if (csc.getSimulationValue() > csc.getCountValue()) {      if (csc.getSimulationValue() < csc.getCountValue() * 1.5) {        placemark.setStyleUrl(this.greenCrossStyle.getId());      } else       if (csc.getSimulationValue() < csc.getCountValue() * 2) {        placemark.setStyleUrl(this.yellowCrossStyle.getId());      } else {        placemark.setStyleUrl(this.redCrossStyle.getId());      }    } else {      if (csc.getSimulationValue() > csc.getCountValue() * 0.75) {        placemark.setStyleUrl("#greenMinusStyle");      } else       if (csc.getSimulationValue() > csc.getCountValue() * 0.5) {        placemark.setStyleUrl("#yellowMinusStyle");      } else {        placemark.setStyleUrl("#redMinusStyle");      }    }    folder.getAbstractFeatureGroup().add(kmlObjectFactory.createPlacemark(placemark));  }}  }
class C{  public Srinivas(){  super(2,2,2);}  }
class C{  public void dequeue(){  if (queue != null) {    SetQueue.IMP.dequeue(queue);  }}  }
class C{  private String maskSensitiveInformation(Throwable exception,Map<String,Object> variables){  String message=String.valueOf(exception).trim();  if (variables != null) {    for (    Object sensitiveData : variables.values()) {      String sensitiveDataString=String.valueOf(sensitiveData);      message=message.replace(sensitiveDataString,"****");    }  }  return message;}  }
class C{  public Query geoCode(final GeoLocation location,final double radius,final String unit){  setGeoCode(location,radius,unit);  return this;}  }
class C{  public CertPathTrustManagerParameters(CertPathParameters parameters){  this.parameters=(CertPathParameters)parameters.clone();}  }
class C{  protected void storeObject(@NonNull OddObject object,long maxAge){  long expiration=maxAge + new Date().getTime();  objectStore.put(object.getId(),new StoredObject(object,expiration));  List<OddObject> included=object.getIncluded();  if (!included.isEmpty()) {    storeObjects(included,maxAge);  }}  }
class C{  public Course(String courseName){  this.courseName=courseName;  students=new ArrayList<String>();}  }
class C{  public static TrapCodeOperand Regenerate(){  return new TrapCodeOperand((byte)RuntimeEntrypoints.TRAP_REGENERATE);}  }
class C{  public static ExecutionTargetException convertToApi(org.oscm.internal.types.exception.ExecutionTargetException oldEx){  return convertExceptionToApi(oldEx,ExecutionTargetException.class);}  }
class C{  @Override public int hashCode(){  int result;  result=minLatitude.hashCode();  result=29 * result + maxLatitude.hashCode();  result=29 * result + minLongitude.hashCode();  result=29 * result + maxLongitude.hashCode();  return result;}  }
class C{  public void addShape3D(float x,float y,float z,ArrayList<Coord2D> coordinates,float depth,int shapeTextureWidth,int shapeTextureHeight,int sideTextureWidth,int sideTextureHeight,int direction){  addShape3D(x,y,z,coordinates,depth,shapeTextureWidth,shapeTextureHeight,sideTextureWidth,sideTextureHeight,direction,null);}  }
class C{  private void onTargetSaved(RecipeDescriptor recipe){  selectedTarget.setRecipe(recipe);  selectedTarget.setDirty(false);  this.updateTargets(recipe.getName());  notificationManager.notify(machineLocale.targetsViewSaveSuccess(),SUCCESS,FLOAT_MODE);}  }
class C{  static InputValidator inRange(final int min,final int max){  return new InputValidator(null,"not in range: " + min + " - "+ max);}  }
class C{  public void testPutGetRemove() throws Exception {  initStore(2);  Set<Integer> exp;  try {    exp=runPutGetRemoveMultithreaded(10,10);  }  finally {    shutdownStore();  }  Map<Integer,String> map=delegate.getMap();  Collection<Integer> extra=new HashSet<>(map.keySet());  extra.removeAll(exp);  assertTrue("The underlying store contains extra keys: " + extra,extra.isEmpty());  Collection<Integer> missing=new HashSet<>(exp);  missing.removeAll(map.keySet());  assertTrue("Missing keys in the underlying store: " + missing,missing.isEmpty());  for (  Integer key : exp)   assertEquals("Invalid value for key " + key,"val" + key,map.get(key));}  }
class C{  protected void removeThumbnailData(){  clearThumbnailAndStrips();  mIfdDatas[IfdId.TYPE_IFD_1]=null;}  }
class C{  private synchronized void runNodeRecovery() throws Exception {  InterProcessLock lock=null;  try {    log.info("Node recovery begins");    lock=getRecoveryLock();    setRecoveryStatus(RecoveryStatus.Status.PREPARING);    startMulticastService();    setRecoveryStatus(RecoveryStatus.Status.REPAIRING);    runDbRepair();    setRecoveryStatus(RecoveryStatus.Status.SYNCING);    waitDbsvcStarted();    markRecoverySuccessful();    log.info("Node recovery is done successful");  } catch (  Exception ex) {    markRecoveryFailed(RecoveryStatus.ErrorCode.INTERNAL_ERROR);    log.error("Node recovery failed:",ex);    throw ex;  } finally {    releaseLock(lock);  }}  }
class C{  public final CC gapRight(String boundsSize){  hor.setGapAfter(ConstraintParser.parseBoundSize(boundsSize,true,true));  return this;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.CATCH_BLOCK__CATCH_VARIABLE:    return getCatchVariable();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void enableSharedPreferenceListener(boolean aIsListenerEnabled){  Log.d(LOG_TAG,"## enableSharedPreferenceListener(): aIsListenerEnabled=" + aIsListenerEnabled);  mIsUiUpdateSkipped=!aIsListenerEnabled;  try {    SharedPreferences prefMgr=getDefaultSharedPreferences(getActivity());    if (aIsListenerEnabled) {      prefMgr.registerOnSharedPreferenceChangeListener(this);    } else {      prefMgr.unregisterOnSharedPreferenceChangeListener(this);    }  } catch (  Exception ex) {    Log.e(LOG_TAG,"## enableSharedPreferenceListener(): Exception Msg=" + ex.getMessage());  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MRfQLine[");  sb.append(get_ID()).append(",").append(getLine()).append("]");  return sb.toString();}  }
class C{  protected CacheConfiguration[] cacheConfiguration(){  CacheConfiguration cacheCfg=defaultCacheConfiguration();  cacheCfg.setName("partitioned");  cacheCfg.setCacheMode(PARTITIONED);  cacheCfg.setNearConfiguration(null);  cacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  cacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(GRP_SIZE));  cacheCfg.setBackups(0);  cacheCfg.setAtomicityMode(TRANSACTIONAL);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("replicated");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  return new CacheConfiguration[]{metaCacheCfg,cacheCfg};}  }
class C{  public Object[] toArray(){  return al.toArray();}  }
class C{  public void acceptType(char[] packageName,char[] simpleTypeName,char[][] enclosingTypeNames,int modifiers,AccessRestriction accessRestriction){  if (this.options.checkDeprecation && (modifiers & ClassFileConstants.AccDeprecated) != 0)   return;  if (this.assistNodeIsExtendedType && (modifiers & ClassFileConstants.AccFinal) != 0)   return;  if (this.options.checkVisibility) {    if ((modifiers & ClassFileConstants.AccPublic) == 0) {      if ((modifiers & ClassFileConstants.AccPrivate) != 0)       return;      char[] currentPackage=CharOperation.concatWith(this.unitScope.fPackage.compoundName,'.');      if (!CharOperation.equals(packageName,currentPackage))       return;    }  }  if (isForbiddenType(packageName,simpleTypeName,enclosingTypeNames)) {    return;  }  if (this.acceptedTypes == null) {    this.acceptedTypes=new ObjectVector();  }  this.acceptedTypes.add(new AcceptedType(packageName,simpleTypeName,enclosingTypeNames,modifiers));}  }
class C{  public void testGenerateCertPath2() throws Exception {  try {    CertificateFactory.getInstance("X.509").generateCertPath((List<Certificate>)null);    fail("NullPointerException was not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  private Annotation createConstituentAnnotationFromTree(JCas aJCas,Parse aNode,Annotation aParentFS,List<Token> aTokens){  if (aNode.isPosTag()) {    Token token=getToken(aTokens,aNode.getSpan().getStart(),aNode.getSpan().getEnd());    if (aParentFS != null) {      token.setParent(aParentFS);    }    if (createPosTags) {      Type posTag=posMappingProvider.getTagType(aNode.getType());      POS posAnno=(POS)aJCas.getCas().createAnnotation(posTag,token.getBegin(),token.getEnd());      posAnno.setPosValue(internTags ? aNode.getType().intern() : aNode.getType());      posAnno.setCoarseValue(posAnno.getClass().equals(POS.class) ? null : posAnno.getType().getShortName().intern());      posAnno.addToIndexes();      token.setPos(posAnno);    }    return token;  } else {    String typeName=aNode.getType();    if (AbstractBottomUpParser.TOP_NODE.equals(typeName)) {      typeName="ROOT";    }    Type constType=constituentMappingProvider.getTagType(typeName);    Constituent constAnno=(Constituent)aJCas.getCas().createAnnotation(constType,aNode.getSpan().getStart(),aNode.getSpan().getEnd());    constAnno.setConstituentType(typeName);    if (aParentFS != null) {      constAnno.setParent(aParentFS);    }    List<Annotation> childAnnotations=new ArrayList<Annotation>();    for (    Parse child : aNode.getChildren()) {      Annotation childAnnotation=createConstituentAnnotationFromTree(aJCas,child,constAnno,aTokens);      if (childAnnotation != null) {        childAnnotations.add(childAnnotation);      }    }    FSArray childArray=FSCollectionFactory.createFSArray(aJCas,childAnnotations);    constAnno.setChildren(childArray);    aJCas.addFsToIndexes(constAnno);    return constAnno;  }}  }
class C{  @Benchmark public long test3_UsingForEachAndJava8() throws IOException {  final long[] i={0};  map.forEach(null);  return i[0];}  }
class C{  public void appendEnd(final StringBuffer buffer,final Object object){  if (this.fieldSeparatorAtEnd == false) {    removeLastFieldSeparator(buffer);  }  appendContentEnd(buffer);  unregister(object);}  }
class C{  void executeNSDecls(TransformerImpl transformer) throws TransformerException {  executeNSDecls(transformer,null);}  }
class C{  public MySeriesChangeListener(){  this.lastEvent=null;}  }
class C{  public synchronized static String formatLocal(long gmtTime){  _localDate.setGMTTime(gmtTime);  return _localDate.printDate();}  }
class C{  private List<com.google.security.zynamics.binnavi.API.reil.mono.IInfluencingState<ApiLatticeElement,ObjectType>> wrap(final List<IInfluencingState<ApiLatticeElement,ObjectType>> states){  final List<com.google.security.zynamics.binnavi.API.reil.mono.IInfluencingState<ApiLatticeElement,ObjectType>> wrapped=new ArrayList<com.google.security.zynamics.binnavi.API.reil.mono.IInfluencingState<ApiLatticeElement,ObjectType>>();  for (  final IInfluencingState<ApiLatticeElement,ObjectType> influencingState : states) {    wrapped.add(new StateWrapper<ApiLatticeElement,ObjectType>(influencingState));  }  return wrapped;}  }
class C{  @SuppressWarnings("unchecked") private static int find(Object[] arr,Object val,int bnd,int l,int r,Comparator c){  int m=l;  int d=1;  while (m <= r) {    if (c.compare(val,arr[m]) > bnd) {      l=m + 1;    } else {      r=m - 1;      break;    }    m+=d;    d<<=1;  }  while (l <= r) {    m=(l + r) >>> 1;    if (c.compare(val,arr[m]) > bnd) {      l=m + 1;    } else {      r=m - 1;    }  }  return l - 1;}  }
class C{  public static UUID byteArrayToUuid(final byte[] src,final int srcPos){  if (src.length - srcPos < 16) {    throw new IllegalArgumentException("Need at least 16 bytes for UUID");  }  return new UUID(byteArrayToLong(src,srcPos,0,0,8),byteArrayToLong(src,srcPos + 8,0,0,8));}  }
class C{  public long startTime(){  return this.startTime;}  }
class C{  public LinearSpaceDriver(ServerInterpreter server,String spaceName,Space mmtkSpace,int blockSize,boolean mainSpace){  super(server,spaceName,mmtkSpace,blockSize,mainSpace);  if (DEBUG) {    Log.write("LinearSpaceDriver for ");    Log.write(spaceName);    Log.write(", blocksize=");    Log.write(blockSize);    Log.write(", start=");    Log.write(mmtkSpace.getStart());    Log.write(", extent=");    Log.write(mmtkSpace.getExtent());    Log.write(", maxTileNum=");    Log.writeln(maxTileNum);  }  subspace=createSubspace(mmtkSpace);  allTileNum=0;  scalarUsedSpaceStream=createScalarUsedSpaceStream();  arrayUsedSpaceStream=createArrayUsedSpaceStream();  scalarObjectsStream=createScalarObjectsStream();  arrayPrimitiveStream=createArrayPrimitiveStream();  arrayObjectsStream=createArrayObjectsStream();  rootsStream=createRootsStream();  refFromImmortalStream=createRefFromImmortalStream();  serverSpace.resize(0);  resetData();  scanner=new LinearScan(this);}  }
class C{  public ModbusTCPTransport(Socket socket){  try {    setSocket(socket);    socket.setSoTimeout(timeout);  } catch (  IOException ex) {    logger.debug("ModbusTCPTransport::Socket invalid");    throw new IllegalStateException("Socket invalid",ex);  }}  }
class C{  public static void readFully(FileChannel channel,ByteBuffer dst) throws IOException {  do {    int r=channel.read(dst);    if (r < 0) {      throw new EOFException();    }  } while (dst.remaining() > 0);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.PROPERTY_NAME_VALUE_PAIR;}  }
class C{  public CCSprite(CCSpriteFrame spriteFrame){  init(spriteFrame);}  }
class C{  @Override public int hashCode(){  return key == null ? 0 : key.hashCode();}  }
class C{  public void cancel(){  mCanceled=true;  cancelSoftwareAnimations();  mCanceled=false;}  }
class C{  private String fetchDeviceType(String deviceType){  if (Constants._Block.equalsIgnoreCase(deviceType) || DiscoveredDataObject.Type.vnxblock.toString().equalsIgnoreCase(deviceType) || DiscoveredDataObject.Type.vmax.toString().equalsIgnoreCase(deviceType)) {    return Constants._Block;  } else   if (Constants.COMPUTE.equalsIgnoreCase(deviceType)) {    return Constants.COMPUTE;  }  return deviceType;}  }
class C{  public void entering(String sourceClass,String sourceMethod,Object params[]){  throw new RuntimeException();}  }
class C{  public void testIntervalOps(R1Interval x,R1Interval y,String expectedRelation){  assertEquals(x.contains(y),expectedRelation.charAt(0) == 'T');  assertEquals(x.interiorContains(y),expectedRelation.charAt(1) == 'T');  assertEquals(x.intersects(y),expectedRelation.charAt(2) == 'T');  assertEquals(x.interiorIntersects(y),expectedRelation.charAt(3) == 'T');  assertEquals(x.contains(y),x.union(y).equals(x));  assertEquals(x.intersects(y),!x.intersection(y).isEmpty());}  }
class C{  public SPINARQFunction(Function spinFunction){  this.spinFunction=spinFunction;  this.cachable=spinFunction.hasProperty(SPIN.cachable,JenaDatatypes.TRUE);  try {    Query spinQuery=(Query)spinFunction.getBody();    queryString=ARQFactory.get().createCommandString(spinQuery);    arqQuery=ARQFactory.get().createQuery(queryString);    JenaUtil.setGraphReadOptimization(true);    try {      for (      Argument arg : spinFunction.getArguments(true)) {        String varName=arg.getVarName();        if (varName == null) {          throw new IllegalStateException("Argument " + arg + " of "+ spinFunction+ " does not have a valid predicate");        }        argNames.add(varName);        argNodes.add(arg.getPredicate().asNode());      }    }  finally {      JenaUtil.setGraphReadOptimization(false);    }  } catch (  Exception ex) {    throw new IllegalArgumentException("Function " + spinFunction.getURI() + " does not define a valid body",ex);  }}  }
class C{  public void sortPalettes(Comparator<Integer> comparator){  for (  String key : mColorPaletteMap.keySet()) {    ArrayList<Integer> palette=mColorPaletteMap.get(key);    Integer[] sortedColors=new Integer[palette.size()];    Arrays.sort(palette.toArray(sortedColors),comparator);    palette.clear();    for (    Integer color : sortedColors) {      palette.add(color);    }    mColorPaletteMap.put(key,palette);  }}  }
class C{  public static void checkState(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public boolean match(ParenthesizedExpression node,Object other){  if (!(other instanceof ParenthesizedExpression)) {    return false;  }  ParenthesizedExpression o=(ParenthesizedExpression)other;  return safeSubtreeMatch(node.getExpression(),o.getExpression());}  }
class C{  public static void showFab(FloatingActionButton fab){  fab.show();  fab.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();}  }
class C{  @Override public synchronized int hashCode(){  int result=1;  for (int i=0; i < elementCount; i++) {    result=(31 * result) + (elementData[i] == null ? 0 : elementData[i].hashCode());  }  return result;}  }
class C{  public GenericSipMsrpSession createMsrpSession(ContactId contact,String featureTag,String[] acceptTypes,String[] acceptWrappedTypes){  if (sLogger.isActivated()) {    sLogger.info("Initiate a MSRP session with contact " + contact);  }  return new OriginatingSipMsrpSession(this,contact,featureTag,mRcsSettings,System.currentTimeMillis(),mContactManager,acceptTypes,acceptWrappedTypes);}  }
class C{  protected void init(int treeStyle,PatternFilter filter){  this.patternFilter=filter;  setShowFilterControls(true);  createControl(getParent(),treeStyle);  createRefreshJob();  setInitialText(ViewerMessages.FilteredTree_FilterMessage);  setFont(getParent().getFont());}  }
class C{  public static String cdmaCheckAndProcessPlusCodeByNumberFormat(String dialStr,int currFormat,int defaultFormat){  String retStr=dialStr;  if (dialStr != null && dialStr.lastIndexOf(PLUS_SIGN_STRING) != -1) {    if ((currFormat == defaultFormat) && (currFormat == FORMAT_NANP)) {      String postDialStr=null;      String tempDialStr=dialStr;      retStr=null;      if (DBG)       log("checkAndProcessPlusCode,dialStr=" + dialStr);      do {        String networkDialStr;        networkDialStr=extractNetworkPortion(tempDialStr);        networkDialStr=processPlusCodeWithinNanp(networkDialStr);        if (!TextUtils.isEmpty(networkDialStr)) {          if (retStr == null) {            retStr=networkDialStr;          } else {            retStr=retStr.concat(networkDialStr);          }        } else {          Rlog.e("checkAndProcessPlusCode: null newDialStr",networkDialStr);          return dialStr;        }        postDialStr=extractPostDialPortion(tempDialStr);        if (!TextUtils.isEmpty(postDialStr)) {          int dialableIndex=findDialableIndexFromPostDialStr(postDialStr);          if (dialableIndex >= 1) {            retStr=appendPwCharBackToOrigDialStr(dialableIndex,retStr,postDialStr);            tempDialStr=postDialStr.substring(dialableIndex);          } else {            if (dialableIndex < 0) {              postDialStr="";            }            Rlog.e("wrong postDialStr=",postDialStr);          }        }        if (DBG)         log("checkAndProcessPlusCode,postDialStr=" + postDialStr);      } while (!TextUtils.isEmpty(postDialStr) && !TextUtils.isEmpty(tempDialStr));    } else {      Rlog.e("checkAndProcessPlusCode:non-NANP not supported",dialStr);    }  }  return retStr;}  }
class C{  private static boolean isExternalStorageWritable(){  return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String remoteName=getString(stack);  int portNum=getInt(stack);  SFIRTuner tun=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tun != null)   return tun.getRemoteInfo(remoteName).prefixCmd; else   return null;}  }
class C{  private static int dpToPx(Context context,int dp){  float density=context.getResources().getDisplayMetrics().density;  return Math.round((float)dp * density);}  }
class C{  public void cdata(char ch[],int start,int length) throws org.xml.sax.SAXException {  try {    writeNormalizedChars(ch,start,length,m_lineSepUse);    if (m_tracer != null)     super.fireCDATAEvent(ch,start,length);  } catch (  IOException ioe) {    throw new SAXException(ioe);  }}  }
class C{  public static Command show(String title,Component body,Command[] cmds,int type,Image icon){  return show(title,body,cmds,type,icon,0);}  }
class C{  public int findItem(final String slotName,final String itemName){  RPSlot slot=getSlot(slotName);  if (slot == null) {    return -1;  }  for (  final RPObject item : slot) {    if (item.get("name").equals(itemName)) {      final int itemID=item.getID().getObjectID();      return itemID;    }  }  return -1;}  }
class C{  public void handleInactivityEvent(){}  }
class C{  public void deleteQueue(String name) throws Exception {}  }
class C{  public static void reverse(byte[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  byte tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  public AsyncLogWriter(ClientId provider){  this.provider=provider;}  }
class C{  private ParserUtils(){}  }
class C{  private int partition(T pivot,int from,int to){  if (to - from < temp.length) {    return partitionSmall(pivot,from,to);  }  int m=(from + to + 1) / 2;  int m1=partition(pivot,from,m - 1);  int m2=partition(pivot,m,to);  swapBlocks(m1,m,m2 - 1);  return m1 + m2 - m;}  }
class C{  public SerialMessage(byte[] a,int l){  super(String.valueOf(a));  setResponseLength(l);  setBinary(true);}  }
class C{  public CConnection(final CDatabaseConfiguration databaseConfiguration) throws CouldntLoadDriverException, SQLException {  m_databaseConfiguration=Preconditions.checkNotNull(databaseConfiguration,"IE02409: m_databaseConfiguration argument can not be null");  final String url=Preconditions.checkNotNull(databaseConfiguration.getUrl(),"IE03409: m_databaseConfiguration.getUrl() argument can not be null");  Preconditions.checkNotNull(databaseConfiguration.getName(),"IE03410: m_databaseConfiguration.getName() argument can not be null");  final String user=Preconditions.checkNotNull(databaseConfiguration.getUser(),"IE03411: databaseConfiguration.getUser() argument can not be null");  final String password=Preconditions.checkNotNull(databaseConfiguration.getPassword(),"IE03412: databaseConfiguration.getPassword() argument can not be null");  m_properties=new Properties();  m_properties.put("user",user);  m_properties.put("password",password);  m_properties.put("application_name",Constants.PROJECT_NAME);  testDriver();  connect(url,m_properties);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.216 -0500",hash_original_method="1B5471D21BEA46C8ED1B36EA429F046B",hash_generated_method="277779C1CB18A60DD012AA41528BB1DB") public boolean quickReject(Path path,EdgeType type){  return native_quickReject(mNativeCanvas,path.ni(),type.nativeInt);}  }
class C{  public MicroPipelineInstantiationResponse instantiatePipeline(final MicroPipelineConfiguration pipelineConfiguration) throws IOException, RemoteClientConnectionFailedException {  MicroPipelineValidationResult cfgValidationResult=this.pipelineConfigurationValidator.validate(pipelineConfiguration);  if (cfgValidationResult != MicroPipelineValidationResult.OK)   return new MicroPipelineInstantiationResponse("",cfgValidationResult,"Failed to validate pipeline configuration");  if (StringUtils.isBlank(pipelineConfiguration.getId()))   return new MicroPipelineInstantiationResponse("",MicroPipelineValidationResult.MISSING_PIPELINE_ID,"Failed to generated unique pipeline identifier");  StringBuffer url=new StringBuffer(this.processingNodeServiceBaseUrl).append("/pipelines");  if (logger.isDebugEnabled())   logger.debug("Instantiating pipeline [id=" + pipelineConfiguration.getId() + "] on processing node "+ url.toString());  try {    final WebTarget webTarget=this.restClient.target(url.toString());    return webTarget.request(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON).post(Entity.entity(pipelineConfiguration,MediaType.APPLICATION_JSON),MicroPipelineInstantiationResponse.class);  } catch (  Exception e) {    throw new RemoteClientConnectionFailedException("Failed to establish a connection with the remote resource manager [url=" + url.toString() + "]. Error: "+ e.getMessage());  }}  }
class C{  public void scrollToCurrentRow(){  onPostSelectedRowChanged();}  }
class C{  public void dateCallback(Date date){  m_dateFrom=new Timestamp(date.getTime());  fieldDate.setValue(m_dateFrom);}  }
class C{  public ResourceNotFoundException(String message,Throwable cause){  super(message,cause);}  }
class C{  private String[] combineResultsFromMultipleReads(String[] buffer,String[] lastRead){  String[] t=new String[buffer.length + lastRead.length];  System.arraycopy(buffer,0,t,0,buffer.length);  System.arraycopy(lastRead,0,t,buffer.length,lastRead.length);  return t;}  }
class C{  public static void sort(Comparable[] a){  Comparable[] aux=a.clone();  sort(aux,a,0,a.length - 1);  assert isSorted(a);}  }
class C{  public KMLTraversalContext(){}  }
class C{  private boolean isTypeValid(char type){  return (type == MAPPED_ADDRESS || type == RESPONSE_ADDRESS || type == SOURCE_ADDRESS || type == CHANGED_ADDRESS || type == REFLECTED_FROM || type == XOR_MAPPED_ADDRESS || type == ALTERNATE_SERVER || type == XOR_PEER_ADDRESS || type == XOR_RELAYED_ADDRESS || type == DESTINATION_ADDRESS);}  }
class C{  public JSONArray(Collection<?> collection){  this.myArrayList=new ArrayList<Object>();  if (collection != null) {    for (    Object o : collection) {      this.myArrayList.add(JSONObject.wrap(o));    }  }}  }
class C{  public static <T>String joinAnd(final String delimiter,final String lastDelimiter,final Collection<T> objs){  if (objs == null || objs.isEmpty())   return "";  final Iterator<T> iter=objs.iterator();  final StringBuilder buffer=new StringBuilder(Strings.toString(iter.next()));  int i=1;  while (iter.hasNext()) {    final T obj=iter.next();    if (notEmpty(obj))     buffer.append(++i == objs.size() ? lastDelimiter : delimiter).append(Strings.toString(obj));  }  return buffer.toString();}  }
class C{  public static void main(String[] args) throws Exception {  Ignite ignite=Ignition.start("examples/config/filesystem/example-igfs.xml");  System.out.println();  System.out.println(">>> IGFS example started.");  try {    IgniteFileSystem fs=ignite.fileSystem("igfs");    IgfsPath workDir=new IgfsPath("/examples/fs");    delete(fs,workDir);    mkdirs(fs,workDir);    printInfo(fs,workDir);    IgfsPath filePath=new IgfsPath(workDir,"file.txt");    create(fs,filePath,new byte[]{1,2,3});    printInfo(fs,filePath);    append(fs,filePath,new byte[]{4,5});    printInfo(fs,filePath);    read(fs,filePath);    delete(fs,filePath);    printInfo(fs,filePath);    for (int i=0; i < 5; i++)     create(fs,new IgfsPath(workDir,"file-" + i + ".txt"),null);    list(fs,workDir);  }  finally {    Ignition.stop(false);  }}  }
class C{  private void runTests(Problem problem,CommandLine commandLine){  int trials=5;  if (commandLine.getOptionValue("test") != null) {    trials=Integer.parseInt(commandLine.getOptionValue("test"));  }  try {    int count=0;    RandomInitialization initialization=new RandomInitialization(problem,trials);    Solution[] solutions=initialization.initialize();    for (    Solution solution : solutions) {      System.out.println("Running test " + (++count) + ":");      for (int j=0; j < solution.getNumberOfVariables(); j++) {        System.out.print("  Variable ");        System.out.print(j + 1);        System.out.print(" = ");        System.out.println(solution.getVariable(j));      }      System.out.println("  * Evaluating solution *");      problem.evaluate(solution);      System.out.println("  * Evaluation complete *");      for (int j=0; j < solution.getNumberOfObjectives(); j++) {        System.out.print("  Objective ");        System.out.print(j + 1);        System.out.print(" = ");        System.out.println(solution.getObjective(j));      }      for (int j=0; j < solution.getNumberOfConstraints(); j++) {        System.out.print("  Constraint ");        System.out.print(j + 1);        System.out.print(" = ");        System.out.println(solution.getConstraint(j));      }      if ((solution.getNumberOfConstraints() > 0) && solution.violatesConstraints()) {        System.out.println("  Solution is infeasible (non-zero " + "constraint value)!");      }    }    System.out.println("Test succeeded!");  } catch (  Exception e) {    e.printStackTrace();    System.out.println("Test failed!  Please see the error message " + "above for details.");  }}  }
class C{  public boolean isDrafted(){  return STATUS_Drafted.equals(m_status);}  }
class C{  public static BufferedImage createWorkingCopy(BufferedImage bimg){  BufferedImage image;  if (bimg.getType() == BufferedImage.TYPE_3BYTE_BGR) {    image=bimg;  } else {    image=new BufferedImage(bimg.getWidth(),bimg.getHeight(),BufferedImage.TYPE_3BYTE_BGR);    Graphics2D g2d=image.createGraphics();    g2d.drawImage(bimg,null,0,0);  }  return image;}  }
class C{  public void emitSYNC(){  final int LWSYNCtemplate=31 << 26 | 1 << 21 | 598 << 1;  int mi=LWSYNCtemplate;  appendInstruction(mi);}  }
class C{  protected IIOMetadata updateMetadata(IIOMetadata meta,ImageWriterParams params){  final String stdmeta="javax_imageio_1.0";  if (meta.isStandardMetadataFormatSupported()) {    IIOMetadataNode root=(IIOMetadataNode)meta.getAsTree(stdmeta);    IIOMetadataNode dim=getChildNode(root,"Dimension");    IIOMetadataNode child;    if (params.getResolution() != null) {      child=getChildNode(dim,"HorizontalPixelSize");      if (child == null) {        child=new IIOMetadataNode("HorizontalPixelSize");        dim.appendChild(child);      }      child.setAttribute("value",Double.toString(params.getResolution().doubleValue() / 25.4));      child=getChildNode(dim,"VerticalPixelSize");      if (child == null) {        child=new IIOMetadataNode("VerticalPixelSize");        dim.appendChild(child);      }      child.setAttribute("value",Double.toString(params.getResolution().doubleValue() / 25.4));    }    try {      meta.mergeTree(stdmeta,root);    } catch (    IIOInvalidTreeException e) {      throw new RuntimeException("Cannot update image metadata: " + e.getMessage());    }  }  return meta;}  }
class C{  public static int secureRandomInt(int lowerThan){  SecureRandom sr=getSecureRandom();synchronized (sr) {    return sr.nextInt(lowerThan);  }}  }
class C{  @Override public void writeMessageBegin(TMessage message) throws TException {  try {    getCurrentWriter().writeStartObject();    getCurrentWriter().writeFieldName("method");    getCurrentWriter().writeString(message.name);    getCurrentWriter().writeFieldName("type");    TypedParser.TMESSAGE_TYPE.writeValue(getCurrentWriter(),message.type);    getCurrentWriter().writeFieldName("seqid");    getCurrentWriter().writeNumber(message.seqid);    getCurrentWriter().writeFieldName("args");  } catch (  IOException e) {    throw new TTransportException(e);  }}  }
class C{  @Override public void handlePeriodicMaintenance(Operation post){  post.complete();  if (isBackgroundPaused()) {    return;  }  Operation.CompletionHandler handler=null;  Operation selectOwnerOp=Operation.createPost(null).setExpiration(ServiceUtils.computeExpirationTime(OWNER_SELECTION_TIMEOUT_MILLIS)).setCompletion(handler);  getHost().selectOwner(null,getSelfLink(),selectOwnerOp);}  }
class C{  public static <E>TopicProcessor<E> share(String name,int bufferSize,Supplier<E> signalSupplier){  return share(name,bufferSize,null,signalSupplier);}  }
class C{  public static boolean isParityAdjusted(byte[] key,int offset) throws InvalidKeyException {  if (key.length - offset < DES_EDE_KEY_LEN) {    throw new InvalidKeyException();  }  for (int i=offset; i < DES_EDE_KEY_LEN + offset; i++) {    int b=key[i];    if ((((b & 1) + ((b & 2) >> 1) + ((b & 4) >> 2)+ ((b & 8) >> 3)+ ((b & 16) >> 4)+ ((b & 32) >> 5)+ ((b & 64) >> 6)) & 1) == ((b & 128) >> 7)) {      return false;    }  }  return true;}  }
class C{  public List<RawComponent> removeExperimentalComponents(String name){  List<RawComponent> all=getExperimentalComponents();  List<RawComponent> toRemove=new ArrayList<RawComponent>();  for (  RawComponent property : all) {    if (property.getName().equalsIgnoreCase(name)) {      toRemove.add(property);    }  }  all.removeAll(toRemove);  return Collections.unmodifiableList(toRemove);}  }
class C{  @Override public int hashCode(){  String h=this.get(Schema.hash);  return (int)(Base64Order.enhancedCoder.cardinal(h) >> 32);}  }
class C{  private boolean recentlyExchangedWithPeer(Peer peer){  long now=(new Date()).getTime();  long then=getLastExchangeTime(peer).getTime();  return (now - then) < MS_BETWEEN_EXCHANGES;}  }
class C{  @Override public void unregisterAdapterDataObserver(RecyclerView.AdapterDataObserver observer){  super.unregisterAdapterDataObserver(observer);  if (mFastAdapter != null) {    mFastAdapter.unregisterAdapterDataObserver(observer);  }}  }
class C{  public void testGetInputBooksDistribuidor2(){  ISWebServiceBooksSoap client=(ISWebServiceBooksSoap)this.applicationContext.getBean("clientWebServiceBooks");  Security security=new Security();  UsernameTokenClass value=new UsernameTokenClass();  value.setUsername("distribuidor2");  value.setPassword("distribuidor2");  value.setOfficeCode("003");  security.setUsernameToken(value);  ArrayOfWSBook result=client.wsGetInputBooks(security);  assertNotNull(result);  assertEquals(1,result.getWSBook().size());  WSBook wsBook=(WSBook)CollectionUtils.find(result.getWSBook(),new BeanPropertyValueEqualsPredicate("id",5));  assertEquals(5,wsBook.getId());  assertEquals("Libro de entrada auxiliar",wsBook.getName());  assertEquals(1,wsBook.getType());  assertTrue(wsBook.isCanCreate());  assertTrue(wsBook.isCanModify());  assertFalse(wsBook.isReadOnly());}  }
class C{  public void paintScrollPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void openFrame(JInternalFrame f){  if (f.getDesktopIcon().getParent() != null) {    f.getDesktopIcon().getParent().add(f);    removeIconFor(f);  }}  }
class C{  public boolean removeShutdownHook(Runnable shutdownHook){  return hooks.remove(shutdownHook);}  }
class C{  public String[] parseLineMulti(String nextLine) throws IOException {  return parseLine(nextLine,true);}  }
class C{  public static void main(String[] args) throws Exception {  try {    int exitCode=ToolRunner.run(new JdbcExportJob(),args);    System.exit(exitCode);  } catch (  Exception e) {    LOG.error(e.getMessage());    System.exit(1);  }}  }
class C{  public ChunkedHashStore(final TransformationStrategy<? super T> transform,final File tempDir,final ProgressLogger pl) throws IOException {  this(transform,tempDir,0,pl);}  }
class C{  public String attributeIndexTipText(){  return "Choose attribute to be used for selection (default last).";}  }
class C{  public Builder addDefaultValues(Iterable<? extends CharSequence> defaultValues){  for (  CharSequence defaultValue : defaultValues) {    this.defaultValues.add(defaultValue);  }  return this;}  }
class C{  public void flush(Session session){  if (isTemporary()) {    return;  }  if (session == null || !database.isSysTableLockedBy(session)) {    Session sysSession=database.getSystemSession();synchronized (sysSession) {synchronized (flushSync) {        flushInternal(sysSession);      }      sysSession.commit(false);    }  } else {synchronized (session) {synchronized (flushSync) {        flushInternal(session);      }    }  }}  }
class C{  public boolean contains(Entry e){  for (  T set : mDataSets) {    if (set.contains(e))     return true;  }  return false;}  }
class C{  public final void disconnect(){  if (mNext != null) {    mNext.mPrev=null;    mNext=null;  }  if (mPrev != null) {    mPrev.mNext=null;    mPrev=null;  }}  }
class C{  @Override public void attributeAdded(HttpSessionBindingEvent event){  log("attributeAdded('" + event.getSession().getId() + "', '"+ event.getName()+ "', '"+ event.getValue()+ "')");}  }
class C{  public boolean unregister(Context context){  if (isRegistered) {    context.unregisterReceiver(this);    isRegistered=false;    return true;  }  return false;}  }
class C{  public void forward(){  Display.impl.browserForward(internal);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:29.125 -0500",hash_original_method="F4DF6B4551FDBC23EEE87B7E4E870504",hash_generated_method="F4DF6B4551FDBC23EEE87B7E4E870504") TimerImpl(String name,boolean isDaemon){  this.setName(name);  this.setDaemon(isDaemon);  this.start();}  }
class C{  void disconnect(){synchronized (lock) {    disconnected=true;    lock.notifyAll();  }}  }
class C{  public StringBuffer prepare(UCharacterIterator src,int options) throws ParseException {  StringBuffer mapOut=map(src,options);  StringBuffer normOut=mapOut;  if (doNFKC) {    normOut=normalize(mapOut);  }  int ch;  char result;  UCharacterIterator iter=UCharacterIterator.getInstance(normOut);  Values val=new Values();  int direction=UCharacterDirection.CHAR_DIRECTION_COUNT, firstCharDir=UCharacterDirection.CHAR_DIRECTION_COUNT;  int rtlPos=-1, ltrPos=-1;  boolean rightToLeft=false, leftToRight=false;  while ((ch=iter.nextCodePoint()) != UCharacterIterator.DONE) {    result=getCodePointValue(ch);    getValues(result,val);    if (val.type == PROHIBITED) {      throw new ParseException("A prohibited code point was found in the input" + iter.getText(),val.value);    }    direction=UCharacter.getDirection(ch);    if (firstCharDir == UCharacterDirection.CHAR_DIRECTION_COUNT) {      firstCharDir=direction;    }    if (direction == UCharacterDirection.LEFT_TO_RIGHT) {      leftToRight=true;      ltrPos=iter.getIndex() - 1;    }    if (direction == UCharacterDirection.RIGHT_TO_LEFT || direction == UCharacterDirection.RIGHT_TO_LEFT_ARABIC) {      rightToLeft=true;      rtlPos=iter.getIndex() - 1;    }  }  if (checkBiDi == true) {    if (leftToRight == true && rightToLeft == true) {      throw new ParseException("The input does not conform to the rules for BiDi code points." + iter.getText(),(rtlPos > ltrPos) ? rtlPos : ltrPos);    }    if (rightToLeft == true && !((firstCharDir == UCharacterDirection.RIGHT_TO_LEFT || firstCharDir == UCharacterDirection.RIGHT_TO_LEFT_ARABIC) && (direction == UCharacterDirection.RIGHT_TO_LEFT || direction == UCharacterDirection.RIGHT_TO_LEFT_ARABIC))) {      throw new ParseException("The input does not conform to the rules for BiDi code points." + iter.getText(),(rtlPos > ltrPos) ? rtlPos : ltrPos);    }  }  return normOut;}  }
class C{  public static boolean checkTextInputLayoutValueRequirement(TextInputLayout textInputLayout,String errorValue){  if (textInputLayout != null && textInputLayout.getEditText() != null) {    String text=Utils.getTextFromInputLayout(textInputLayout);    if (text == null || text.isEmpty()) {      textInputLayout.setErrorEnabled(true);      textInputLayout.setError(errorValue);      Timber.d("Input field %s missing text.",textInputLayout.getHint());      return false;    } else {      textInputLayout.setErrorEnabled(false);      Timber.d("Input field: %s OK.",textInputLayout.getHint());      return true;    }  } else {    Timber.e(new RuntimeException(),"Checking null input field during order send.");    return false;  }}  }
class C{  public void postVisit(ASTNode node){}  }
class C{  @LargeTest public void testMountUnsignedObb(){  mFile=createObbFile(OBB_FILE_2_UNSIGNED,R.raw.obb_file2_nosign);  String filePath=mFile.getAbsolutePath();  mountObb(filePath,OBB_FILE_2_UNSIGNED,OnObbStateChangeListener.ERROR_INTERNAL);}  }
class C{  @Override public Instances generateExamples() throws Exception {  Instances format=getDatasetFormat();  Instance example=null;  if (format == null) {    throw new Exception("Dataset format not defined.");  }  for (int cNum=0; cNum < getClusters().length; cNum++) {    SubspaceClusterDefinition cl=(SubspaceClusterDefinition)getClusters()[cNum];    int instNum=cl.getNumInstances();    String cName="c" + cNum;switch (cl.getClusterType().getSelectedTag().getID()) {case (UNIFORM_RANDOM):      for (int i=0; i < instNum; i++) {        example=generateExample(format,getRandom(),cl,cName);        if (example != null) {          format.add(example);        }      }    break;case (TOTAL_UNIFORM):  if (!cl.isInteger()) {    generateUniformExamples(format,instNum,cl,cName);  } else {    generateUniformIntegerExamples(format,instNum,cl,cName);  }break;case (GAUSSIAN):generateGaussianExamples(format,instNum,getRandom(),cl,cName);break;}}return format;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode01.class,args);}  }
class C{  public Class<? extends IHighlightingConfiguration> bindIHighlightingConfiguration(){  return HighlightingConfiguration.class;}  }
class C{  public boolean handles(Capability c){  if (doNotCheckCapabilities()) {    return true;  }  return m_Capabilities.contains(c);}  }
class C{  public String toString(){  return "(unresolved " + type + " "+ name+ " "+ actions+ ")";}  }
class C{  public IXMLElement createElement(String fullName){  return new XMLElement(fullName);}  }
class C{  private void emitInvoke(){  if (parameterTypes.length > 65535) {    throw new InternalError("Can't handle more than 65535 parameters");  }  ClassFileAssembler cb=new ClassFileAssembler();  if (isConstructor) {    cb.setMaxLocals(2);  } else {    cb.setMaxLocals(3);  }  short illegalArgStartPC=0;  if (isConstructor) {    cb.opc_new(targetClass);    cb.opc_dup();  } else {    if (isPrimitive(returnType)) {      cb.opc_new(indexForPrimitiveType(returnType));      cb.opc_dup();    }    if (!isStatic()) {      cb.opc_aload_1();      Label l=new Label();      cb.opc_ifnonnull(l);      cb.opc_new(nullPointerClass);      cb.opc_dup();      cb.opc_invokespecial(nullPointerCtorIdx,0,0);      cb.opc_athrow();      l.bind();      illegalArgStartPC=cb.getLength();      cb.opc_aload_1();      cb.opc_checkcast(targetClass);    }  }  Label successLabel=new Label();  if (parameterTypes.length == 0) {    if (isConstructor) {      cb.opc_aload_1();    } else {      cb.opc_aload_2();    }    cb.opc_ifnull(successLabel);  }  if (isConstructor) {    cb.opc_aload_1();  } else {    cb.opc_aload_2();  }  cb.opc_arraylength();  cb.opc_sipush((short)parameterTypes.length);  cb.opc_if_icmpeq(successLabel);  cb.opc_new(illegalArgumentClass);  cb.opc_dup();  cb.opc_invokespecial(illegalArgumentCtorIdx,0,0);  cb.opc_athrow();  successLabel.bind();  short paramTypeCPIdx=nonPrimitiveParametersBaseIdx;  Label nextParamLabel=null;  byte count=1;  for (int i=0; i < parameterTypes.length; i++) {    Class<?> paramType=parameterTypes[i];    count+=(byte)typeSizeInStackSlots(paramType);    if (nextParamLabel != null) {      nextParamLabel.bind();      nextParamLabel=null;    }    if (isConstructor) {      cb.opc_aload_1();    } else {      cb.opc_aload_2();    }    cb.opc_sipush((short)i);    cb.opc_aaload();    if (isPrimitive(paramType)) {      if (isConstructor) {        cb.opc_astore_2();      } else {        cb.opc_astore_3();      }      Label l=null;      nextParamLabel=new Label();      for (int j=0; j < primitiveTypes.length; j++) {        Class<?> c=primitiveTypes[j];        if (canWidenTo(c,paramType)) {          if (l != null) {            l.bind();          }          if (isConstructor) {            cb.opc_aload_2();          } else {            cb.opc_aload_3();          }          cb.opc_instanceof(indexForPrimitiveType(c));          l=new Label();          cb.opc_ifeq(l);          if (isConstructor) {            cb.opc_aload_2();          } else {            cb.opc_aload_3();          }          cb.opc_checkcast(indexForPrimitiveType(c));          cb.opc_invokevirtual(unboxingMethodForPrimitiveType(c),0,typeSizeInStackSlots(c));          emitWideningBytecodeForPrimitiveConversion(cb,c,paramType);          cb.opc_goto(nextParamLabel);        }      }      if (l == null) {        throw new InternalError("Must have found at least identity conversion");      }      l.bind();      cb.opc_new(illegalArgumentClass);      cb.opc_dup();      cb.opc_invokespecial(illegalArgumentCtorIdx,0,0);      cb.opc_athrow();    } else {      cb.opc_checkcast(paramTypeCPIdx);      paramTypeCPIdx=add(paramTypeCPIdx,S2);    }  }  if (nextParamLabel != null) {    nextParamLabel.bind();  }  short invokeStartPC=cb.getLength();  if (isConstructor) {    cb.opc_invokespecial(targetMethodRef,count,0);  } else {    if (isStatic()) {      cb.opc_invokestatic(targetMethodRef,count,typeSizeInStackSlots(returnType));    } else {      if (isInterface()) {        if (isPrivate()) {          cb.opc_invokespecial(targetMethodRef,count,0);        } else {          cb.opc_invokeinterface(targetMethodRef,count,count,typeSizeInStackSlots(returnType));        }      } else {        cb.opc_invokevirtual(targetMethodRef,count,typeSizeInStackSlots(returnType));      }    }  }  short invokeEndPC=cb.getLength();  if (!isConstructor) {    if (isPrimitive(returnType)) {      cb.opc_invokespecial(ctorIndexForPrimitiveType(returnType),typeSizeInStackSlots(returnType),0);    } else     if (returnType == Void.TYPE) {      cb.opc_aconst_null();    }  }  cb.opc_areturn();  short classCastHandler=cb.getLength();  cb.setStack(1);  cb.opc_invokespecial(toStringIdx,0,1);  cb.opc_new(illegalArgumentClass);  cb.opc_dup_x1();  cb.opc_swap();  cb.opc_invokespecial(illegalArgumentStringCtorIdx,1,0);  cb.opc_athrow();  short invocationTargetHandler=cb.getLength();  cb.setStack(1);  cb.opc_new(invocationTargetClass);  cb.opc_dup_x1();  cb.opc_swap();  cb.opc_invokespecial(invocationTargetCtorIdx,1,0);  cb.opc_athrow();  ClassFileAssembler exc=new ClassFileAssembler();  exc.emitShort(illegalArgStartPC);  exc.emitShort(invokeStartPC);  exc.emitShort(classCastHandler);  exc.emitShort(classCastClass);  exc.emitShort(illegalArgStartPC);  exc.emitShort(invokeStartPC);  exc.emitShort(classCastHandler);  exc.emitShort(nullPointerClass);  exc.emitShort(invokeStartPC);  exc.emitShort(invokeEndPC);  exc.emitShort(invocationTargetHandler);  exc.emitShort(throwableClass);  emitMethod(invokeIdx,cb.getMaxLocals(),cb,exc,new short[]{invocationTargetClass});}  }
class C{  public void prepend(CharSequence s){  text.insert(0,s);}  }
class C{  public void declareExtensions(ExtensionProfile extProfile){  super.declareExtensions(extProfile);}  }
class C{  public static Drawable decideIcon(ImageHolder imageHolder,Context ctx,int iconColor,boolean tint,int paddingDp){  if (imageHolder == null) {    return null;  } else {    return imageHolder.decideIcon(ctx,iconColor,tint,paddingDp);  }}  }
class C{  public Object deserialize(String json,String containerType,Class cls) throws ApiException {  if (null != containerType) {    containerType=containerType.toLowerCase();  }  try {    if ("list".equals(containerType) || "array".equals(containerType)) {      JavaType typeInfo=JsonUtil.getJsonMapper().getTypeFactory().constructCollectionType(List.class,cls);      List response=(List<?>)JsonUtil.getJsonMapper().readValue(json,typeInfo);      return response;    } else     if (String.class.equals(cls)) {      if (json != null && json.startsWith("\"") && json.endsWith("\"") && json.length() > 1)       return json.substring(1,json.length() - 2); else       return json;    } else {      return JsonUtil.getJsonMapper().readValue(json,cls);    }  } catch (  IOException e) {    throw new ApiException(500,e.getMessage(),null,json);  }}  }
class C{  public void dragDropEnd(DragSourceDropEvent dsde){  Debug.message("dndlistener","dragDropEnd(source)");  startDrag=true;}  }
class C{  public final void doFilter(final ServletRequest sRequest,final ServletResponse sResponse,final FilterChain chain) throws IOException, ServletException {  HttpServletRequest request=(HttpServletRequest)sRequest;  HttpServletResponse response=(HttpServletResponse)sResponse;  if (!isIncluded(request) && headerContainsAcceptEncodingGzip(request) && !response.isCommitted()) {    if (LOG.isDebugEnabled()) {      LOG.debug(request.getRequestURL() + ". Writing with gzip compression");    }    final ByteArrayOutputStream compressed=new ByteArrayOutputStream();    final GZIPOutputStream gzout=new GZIPOutputStream(compressed);    final GenericResponseWrapper wrapper=new GenericResponseWrapper(response,gzout);    wrapper.setDisableFlushBuffer();    chain.doFilter(request,wrapper);    wrapper.flush();    gzout.close();    if (response.isCommitted()) {      return;    }switch (wrapper.getStatus()) {case HttpServletResponse.SC_NO_CONTENT:case HttpServletResponse.SC_RESET_CONTENT:case HttpServletResponse.SC_NOT_MODIFIED:      return;default :  }  byte[] compressedBytes=compressed.toByteArray();  boolean shouldGzippedBodyBeZero=ResponseUtil.shouldGzippedBodyBeZero(compressedBytes,request);  boolean shouldBodyBeZero=ResponseUtil.shouldBodyBeZero(request,wrapper.getStatus());  if (shouldGzippedBodyBeZero || shouldBodyBeZero) {    response.setContentLength(0);    return;  }  ResponseUtil.addGzipHeader(response);  response.setContentLength(compressedBytes.length);  response.getOutputStream().write(compressedBytes);} else {  if (LOG.isDebugEnabled()) {    LOG.debug(request.getRequestURL() + ". Writing without gzip compression because the request does not accept gzip.");  }  chain.doFilter(request,response);}}  }
class C{  public NoUniqueResultException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void incorporateDequeues(){  final int cycles=itrs.cycles;  final int takeIndex=ArrayBlockingQueue.this.takeIndex;  final int prevCycles=this.prevCycles;  final int prevTakeIndex=this.prevTakeIndex;  if (cycles != prevCycles || takeIndex != prevTakeIndex) {    final int len=items.length;    long dequeues=(cycles - prevCycles) * len + (takeIndex - prevTakeIndex);    if (invalidated(lastRet,prevTakeIndex,dequeues,len))     lastRet=REMOVED;    if (invalidated(nextIndex,prevTakeIndex,dequeues,len))     nextIndex=REMOVED;    if (invalidated(cursor,prevTakeIndex,dequeues,len))     cursor=takeIndex;    if (cursor < 0 && nextIndex < 0 && lastRet < 0)     detach(); else {      this.prevCycles=cycles;      this.prevTakeIndex=takeIndex;    }  }}  }
class C{  protected CCMoveTo(float t,CGPoint pos){  super(t);  startPosition=CGPoint.zero();  endPosition=CGPoint.make(pos.x,pos.y);  delta=CGPoint.zero();}  }
class C{  public void updateAsciiStream(String columnLabel,java.io.InputStream x,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public void addField(String name,Object value,float boost){  SolrInputField field=_fields.get(name);  if (field == null || field.value == null) {    setField(name,value,boost);  } else {    field.addValue(value,boost);  }}  }
class C{  public void read(org.apache.thrift.protocol.TProtocol iprot,Task struct) throws org.apache.thrift.TException {  org.apache.thrift.protocol.TField schemeField;  iprot.readStructBegin();  while (true) {    schemeField=iprot.readFieldBegin();    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {      break;    }switch (schemeField.id) {case 1:      if (schemeField.type == org.apache.thrift.protocol.TType.I32) {        struct.taskId=iprot.readI32();        struct.setTaskIdIsSet(true);      } else {        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);      }    break;case 2:  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {    struct.taskName=iprot.readString();    struct.setTaskNameIsSet(true);  } else {    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);  }break;case 3:if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {struct.className=iprot.readString();struct.setClassNameIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 4:if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {struct.method=iprot.readString();struct.setMethodIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 5:if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {struct.moduleCode=iprot.readString();struct.setModuleCodeIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 6:if (schemeField.type == org.apache.thrift.protocol.TType.I32) {struct.priority=iprot.readI32();struct.setPriorityIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 7:if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {struct.isConcurrent=iprot.readString();struct.setIsConcurrentIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 8:if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {struct.taskState=iprot.readString();struct.setTaskStateIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 9:if (schemeField.type == org.apache.thrift.protocol.TType.I64) {struct.lastExecuteTime=iprot.readI64();struct.setLastExecuteTimeIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 10:if (schemeField.type == org.apache.thrift.protocol.TType.I64) {struct.nextExcuteDate=iprot.readI64();struct.setNextExcuteDateIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 11:if (schemeField.type == org.apache.thrift.protocol.TType.I32) {struct.operatorId=iprot.readI32();struct.setOperatorIdIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 12:if (schemeField.type == org.apache.thrift.protocol.TType.I64) {struct.createTime=iprot.readI64();struct.setCreateTimeIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default :org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}  }
class C{  private StoragePort findExistingPort(String portGuid,DbClient dbClient){  URIQueryResultList results=new URIQueryResultList();  StoragePort port=null;  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortByNativeGuidConstraint(portGuid),results);  Iterator<URI> iter=results.iterator();  while (iter.hasNext()) {    StoragePort tmpPort=dbClient.queryObject(StoragePort.class,iter.next());    if (tmpPort != null && !tmpPort.getInactive()) {      port=tmpPort;      _logger.info("found port {}",tmpPort.getNativeGuid() + ":" + tmpPort.getPortName());      break;    }  }  return port;}  }
class C{  @Override public void run(int connId,String[] args){  int countbad=0;  for (  Entity entity : server.getGame().getEntitiesVector()) {    if (entity.fixElevation()) {      Building bldg=server.getGame().getBoard().getBuildingAt(entity.getPosition());      if (bldg != null) {        server.checkForCollapse(bldg,server.getGame().getPositionMap(),entity.getPosition(),true,server.getvPhaseReport());      }      server.sendServerChat(entity.getDisplayName() + " elevation fixed, see megameklog.txt for details & report a bug if you know how this happened");      countbad++;    }  }  server.sendServerChat(connId,"" + countbad + " unit(s) had elevation problems");}  }
class C{  public static Mapping<String> text(Constraint... constraints){  return new FieldMapping(InputMode.SINGLE,mkSimpleConverter(Function.identity()),new MappingMeta("string",String.class)).constraint(constraints);}  }
class C{  public void testBitLengthNegative1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertEquals(108,aNumber.bitLength());}  }
class C{  ServerSessionContext resendEvents(long index){  clearEvents(index);  for (  EventHolder event : events) {    sendEvent(event);  }  return this;}  }
class C{  public boolean isTaxIncluded(){  Object oo=get_Value(COLUMNNAME_IsTaxIncluded);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static int tileXToX(int tx,int tileGridXOffset,int tileWidth){  return tx * tileWidth + tileGridXOffset;}  }
class C{  @Deprecated public static GridAbsClosure noop(){  return NOOP;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public IntStream filterNot(final IntPredicate predicate){  return filter(IntPredicate.Util.negate(predicate));}  }
class C{  public Map<String,String> removeZonesStrategy(WBEMClient client,List<Zone> zones,String fabricId,String fabricWwn,boolean activateZones) throws NetworkDeviceControllerException {  long start=System.currentTimeMillis();  Map<String,String> removedZoneResults=new HashMap<String,String>();  CIMInstance zoneServiceIns=null;  boolean wasDeactivated=false;  CIMObjectPath shadowZonsetPath=null;  boolean empty=false;  try {    _log.info("Remove zones started.");    zoneServiceIns=_smisHelper.getZoneServiceInstance(client,fabricId,fabricWwn);    if (zoneServiceIns == null) {      _log.info("Failed to get zoning service.");      throw NetworkDeviceControllerException.exceptions.removeZonesStrategyFailedSvc();    }    CIMInstance activeZonesetIns=_smisHelper.getActiveZonesetInstance(client,fabricId,fabricWwn);    if (activeZonesetIns == null) {      String defaultZonesetName=getDefaultZonesetName(fabricId);      activeZonesetIns=_smisHelper.getZoneset(client,fabricId,fabricWwn,defaultZonesetName);      if (activeZonesetIns == null) {        _log.warn("No active/default zoneset found: " + defaultZonesetName);        throw NetworkDeviceControllerException.exceptions.noActiveZonesetForFabric(fabricId);      }    }    shadowZonsetPath=_smisHelper.getShadowZonesetPath(client,fabricId,fabricWwn,activeZonesetIns);    Map<String,Zone> zonesInFabric=_smisHelper.getZones(client,getZoneNames(zones),fabricWwn,false,true,true);    List<Zone> zonesToBeDeleted=getZonesToBeDeleted(zones,zonesInFabric.values(),new Integer[1],removedZoneResults);    if (!zonesToBeDeleted.isEmpty()) {      empty=!_smisHelper.zonesetHasMore(client,shadowZonsetPath,zonesToBeDeleted.size());      if (empty) {        _log.info("All zones will be removed so deactivate the zoneset");        _log.info("Attempting to deactivate the zoneset.");        wasDeactivated=_smisHelper.activateZoneSet(client,zoneServiceIns,activeZonesetIns.getObjectPath(),false);      }      _log.info("Attempting to start a zoning session");      zoneServiceIns=_smisHelper.startSession(client,fabricId,fabricWwn);      for (      Zone curZone : zonesToBeDeleted) {        try {          _log.info("Removing zone: " + curZone.getName() + " fabric: "+ fabricId);          _smisHelper.removeZone(client,curZone);          removedZoneResults.put(curZone.getName(),SUCCESS);        } catch (        Exception ex) {          removedZoneResults.put(curZone.getName(),ERROR + " : " + ex.getMessage());          handleZonesStrategyException(ex,activateZones);        }      }      empty=_smisHelper.isEmptyZoneset(client,shadowZonsetPath);      if (empty) {        client.deleteInstance(shadowZonsetPath);      }    }    _log.info("Attempting to close zoning session.");    if (_smisHelper.endSession(client,zoneServiceIns,hasResult(removedZoneResults,SUCCESS))) {      boolean shouldActivate=((activateZones && hasResult(removedZoneResults,SUCCESS)) || wasDeactivated) && !empty;      if (shouldActivate) {        _log.info("Attempting to activate the zoneset.");        _smisHelper.activateZoneSet(client,zoneServiceIns,shadowZonsetPath,true);      }    } else {      if (hasResult(removedZoneResults,SUCCESS)) {        throw NetworkDeviceControllerException.exceptions.removeZonesStrategyFailedCommit();      } else {        _log.info("Failed to terminate zoning session. Ignoring as the session may have expired.");      }    }    _log.info("Remove zone completed successfully and took " + (System.currentTimeMillis() - start));    return removedZoneResults;  } catch (  Exception e1) {    try {      if (zoneServiceIns != null) {        _log.info("Attempting to terminate zoning session.");        _smisHelper.endSession(client,zoneServiceIns,false);        if (shadowZonsetPath != null && wasDeactivated) {          _log.info("Attempting to re-activate the zoneset because it was deactivated earlier.");          _smisHelper.activateZoneSet(client,zoneServiceIns,shadowZonsetPath,true);        }      }    } catch (    Exception ex) {      _log.error("Failed terminate the zoning session and to reactivate the zoneset.");    }    _log.error("Failed to remove zones " + e1.getMessage());    throw NetworkDeviceControllerException.exceptions.removeZonesStrategyFailed(e1);  }}  }
class C{  @Override public boolean isCellEditable(int rowIndex,int columnIndex){  if (!isInitialized())   return false; else   return getUnsortedModel().isCellEditable(getActualRow(rowIndex),columnIndex);}  }
class C{  public boolean isDuplex(){  return duplex;}  }
class C{  public void attributeAsClass(){  ArffSortedTableModel model;  if (m_CurrentCol == -1) {    return;  }  model=(ArffSortedTableModel)m_TableArff.getModel();  if (model.getAttributeAt(m_CurrentCol) == null) {    return;  }  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  model.attributeAsClassAt(m_CurrentCol);  setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));}  }
class C{  public void loadAndInit(String configStr){  config=loadDataConfig(new InputSource(new StringReader(configStr)));}  }
class C{  public final Message obtainMessage(int what,Object obj){  return Message.obtain(mSmHandler,what,obj);}  }
class C{  public TerminalPosition withRow(int row){  if (row == 0 && this.column == 0) {    return TOP_LEFT_CORNER;  }  return new TerminalPosition(this.column,row);}  }
class C{  public void clean(){  if (getEntityType().equals("D") && getStatusCode().equals(MMigration.STATUSCODE_Applied)) {    log.log(Level.CONFIG,"Cleaning migration: " + this.toString());    this.setProcessed(true);    for (    MMigrationStep step : getSteps(false)) {      log.log(Level.CONFIG,"   Deleting step: " + step.toString());      step.deleteEx(true);    }    this.saveEx();  }}  }
class C{  @SuppressWarnings("WeakerAccess") public static AWTTerminalFontConfiguration newInstance(Font... fontsInOrderOfPriority){  return new AWTTerminalFontConfiguration(true,BoldMode.EVERYTHING_BUT_SYMBOLS,fontsInOrderOfPriority);}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.467 -0400",hash_original_method="FE5F2D56D7E3E4B2BC0C9F62A9CCE451",hash_generated_method="002098531688D57D20DFE7C9587694C6") private boolean conditionCH1(String value,int index){  return ((contains(value,0,4,"VAN ","VON ") || contains(value,0,3,"SCH")) || contains(value,index - 2,6,"ORCHES","ARCHIT","ORCHID") || contains(value,index + 2,1,"T","S")|| ((contains(value,index - 1,1,"A","O","U","E") || index == 0) && (contains(value,index + 2,1,L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1)));}  }
class C{  private void localizeTimestamp(HttpServerRequest request,String header){  String timestamp=request.headers().get(header);  if (timestamp != null && timestamp.toUpperCase().endsWith("Z")) {    try {      DateTime dt=isoDateTimeParser.parseDateTime(timestamp);      request.headers().set(header,dfISO8601.print(dt));    } catch (    IllegalArgumentException e) {      log.warn("Could not parse " + header + " : "+ timestamp);    }  }}  }
class C{  public AnchorHandlerFX(String id){  super(id,false,false,false,false);}  }
class C{  static private String INT_Max_Plus(){  long tempValue=Integer.MAX_VALUE + 1;  return String.valueOf(tempValue);}  }
class C{  protected ColumnPreferenceHandler createDefaultColumnPreferencesHandler(){  return new SearchColumnPreferenceHandler(TABLE);}  }
class C{  protected final int returnNode(final int node){  _position++;  return node;}  }
class C{  public UnsolicitedNotificationEvent(Object src,UnsolicitedNotification notice){  super(src);  this.notice=notice;}  }
class C{  public static File findFileUnderCommunityHome(String relativePath){  File file=new File(getCommunityHomePath(),toSystemDependentName(relativePath));  if (!file.exists()) {    throw new IllegalArgumentException("Cannot find file '" + relativePath + "' under '"+ getCommunityHomePath()+ "' directory");  }  return file;}  }
class C{  private boolean isAutoCommitNonDefaultOnServer() throws SQLException {  boolean overrideDefaultAutocommit=false;  String initConnectValue=this.serverVariables.get("init_connect");  if (versionMeetsMinimum(4,1,2) && initConnectValue != null && initConnectValue.length() > 0) {    if (!getElideSetAutoCommits()) {      java.sql.ResultSet rs=null;      java.sql.Statement stmt=null;      try {        stmt=getMetadataSafeStatement();        rs=stmt.executeQuery("SELECT @@session.autocommit");        if (rs.next()) {          this.autoCommit=rs.getBoolean(1);          if (this.autoCommit != true) {            overrideDefaultAutocommit=true;          }        }      }  finally {        if (rs != null) {          try {            rs.close();          } catch (          SQLException sqlEx) {          }        }        if (stmt != null) {          try {            stmt.close();          } catch (          SQLException sqlEx) {          }        }      }    } else {      if (this.getIO().isSetNeededForAutoCommitMode(true)) {        this.autoCommit=false;        overrideDefaultAutocommit=true;      }    }  }  return overrideDefaultAutocommit;}  }
class C{  private boolean checkInterface(@Nonnull ClassProto other){  boolean isResolved=true;  boolean isInterface=true;  try {    isInterface=isInterface();  } catch (  UnresolvedClassException ex) {    isResolved=false;  }  if (isInterface) {    try {      if (other.implementsInterface(getType())) {        return true;      }    } catch (    UnresolvedClassException ex) {      if (isResolved) {        throw ex;      }    }  }  return false;}  }
class C{  public void displayApng(String uri,ImageView imageView,DisplayImageOptions options,ApngConfig config){  super.displayImage(uri,imageView,options,new ApngImageLoadingListener(context,Uri.parse(uri),getAutoPlayHandler(config,null)));}  }
class C{  @SuppressWarnings("unused") public static void bindToRegister(int value){}  }
class C{  public static float smooth(float prevValue,float newValue,float a){  return a * newValue + (1 - a) * prevValue;}  }
class C{  public static String lineDelimiter(IXtextDocument doc,int offset) throws BadLocationException {  String nl=doc.getLineDelimiter(doc.getLineOfOffset(offset));  if (nl == null) {    if (doc instanceof AbstractDocument) {      nl=((AbstractDocument)doc).getDefaultLineDelimiter();    }  }  return nl;}  }
class C{  public boolean isSetData(){  return this.data != null;}  }
class C{  public void paste(){  invokeAction(TransferHandler.getPasteAction());}  }
class C{  public void update(){  if (!guild.isAvailable()) {    throw new GuildUnavailableException();  }  if (name != null || region != null || timeout != null || icon != null || !StringUtils.equals(afkChannelId,guild.getAfkChannelId()) || verificationLevel != null) {    checkPermission(Permission.MANAGE_SERVER);    JSONObject frame=getFrame();    if (name != null)     frame.put("name",name);    if (region != null)     frame.put("region",region.getKey());    if (timeout != null)     frame.put("afk_timeout",timeout.getSeconds());    if (icon != null)     frame.put("icon",icon == AvatarUtil.DELETE_AVATAR ? JSONObject.NULL : icon.getEncoded());    if (!StringUtils.equals(afkChannelId,guild.getAfkChannelId()))     frame.put("afk_channel_id",afkChannelId == null ? JSONObject.NULL : afkChannelId);    if (verificationLevel != null)     frame.put("verification_level",verificationLevel.getKey());    update(frame);  }  if (addedRoles.size() > 0) {    checkPermission(Permission.MANAGE_ROLES);    for (    User user : addedRoles.keySet()) {      List<Role> roles=guild.getRolesForUser(user);      List<String> roleIds=new LinkedList<>();      roles.forEach(null);      addedRoles.get(user).stream().filter(null).forEach(null);      removedRoles.get(user).stream().filter(null).forEach(null);      ((JDAImpl)guild.getJDA()).getRequester().patch(Requester.DISCORD_API_PREFIX + "guilds/" + guild.getId()+ "/members/"+ user.getId(),new JSONObject().put("roles",roleIds));    }    addedRoles.clear();    removedRoles.clear();  }}  }
class C{  public void suppressNameUpdate(boolean set){  for (int i=0; i < mBlockEntries.size(); i++) {    Block b=mBlockEntries.get(i);    LayoutBlock lb=jmri.InstanceManager.getDefault(jmri.jmrit.display.layoutEditor.LayoutBlockManager.class).getByUserName(b.getUserName());    if (lb != null) {      lb.setSuppressNameUpdate(set);    }  }}  }
class C{  void start(){  ResourcesPlugin.getWorkspace().addResourceChangeListener(this,IResourceChangeEvent.POST_CHANGE);}  }
class C{  public void saveFingerprintAsFile(byte[] fingerprint,String filename){  FileOutputStream fileOutputStream;  try {    fileOutputStream=new FileOutputStream(filename);    fileOutputStream.write(fingerprint);    fileOutputStream.close();  } catch (  FileNotFoundException e1) {    e1.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public Intent(String action){  setAction(action);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void notNullOrEmpty(String value,String name){  notNull(value,name);  if (value.trim().length() == 0)   throw new IllegalArgumentException(INVALID_ARG_MSG_PREFIX + name + NOT_NULL_OR_EMPTY_SUFFIX);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:18.111 -0500",hash_original_method="05CFFFBF5E08267473584C7C9C8831C7",hash_generated_method="58824DA46BB8DAB7F26513A055B540C8") private void sendResponse(SIPResponse transactionResponse) throws IOException {  try {    if (isReliable()) {      getMessageChannel().sendMessage(transactionResponse);    } else {      Via via=transactionResponse.getTopmostVia();      String transport=via.getTransport();      if (transport == null)       throw new IOException("missing transport!");      int port=via.getRPort();      if (port == -1)       port=via.getPort();      if (port == -1) {        if (transport.equalsIgnoreCase("TLS"))         port=5061; else         port=5060;      }      String host=null;      if (via.getMAddr() != null) {        host=via.getMAddr();      } else {        host=via.getParameter(Via.RECEIVED);        if (host == null) {          host=via.getHost();        }      }      Hop hop=sipStack.addressResolver.resolveAddress(new HopImpl(host,port,transport));      MessageChannel messageChannel=((SIPTransactionStack)getSIPStack()).createRawMessageChannel(this.getSipProvider().getListeningPoint(hop.getTransport()).getIPAddress(),this.getPort(),hop);      if (messageChannel != null)       messageChannel.sendMessage(transactionResponse); else       throw new IOException("Could not create a message channel for " + hop);    }  }  finally {    this.startTransactionTimer();  }}  }
class C{  private final void inferCallerELKI(){  needToInferCaller=false;  StackTraceElement[] stack=(new Throwable()).getStackTrace();  int ix=0;  while (ix < stack.length) {    StackTraceElement frame=stack[ix];    final String cls=frame.getClassName();    if (cls.equals(START_TRACE_AT)) {      break;    }    ix++;  }  while (ix < stack.length) {    StackTraceElement frame=stack[ix];    final String cls=frame.getClassName();    boolean ignore=false;    for (int i=0; i < IGNORE_CLASSES.length; i++) {      if (cls.equals(IGNORE_CLASSES[i])) {        ignore=true;        break;      }    }    if (!ignore) {      super.setSourceClassName(frame.getClassName());      super.setSourceMethodName(frame.getMethodName());      break;    }    ix++;  }}  }
class C{  public void insert(String s){  char[] arr=s.toCharArray();  TrieNode node=root;  for (int i=0; i < arr.length; i++) {    char c=arr[i];    if (!node.children.containsKey(c)) {      node.children.put(c,new TrieNode());    }    node=node.children.get(c);    if (i == arr.length - 1) {      node.isEnd=true;      node.str=s;    }  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE;case 3:return KEYS;default :return null;}}  }
class C{  protected final long startTime(){  return startTime;}  }
class C{  @Override public boolean hasOverlappingRendering(){  return false;}  }
class C{  public static void saveCommanders(Context context,List<CommanderItem> items){  SharedPreferences.Editor editor=getSharedPreferences(context).edit();  for (int i=0; i < items.size(); i++) {    CommanderItem item=items.get(i);    String data=item.getGpioName() + "," + item.getDesc()+ ","+ item.getHighDesc()+ ","+ item.getLowDesc()+ ","+ item.getCommandType()+ ","+ item.isHighNotify()+ ","+ item.isLowNotify();    if (item instanceof ExpanderCommanderItem) {      ExpanderCommanderItem eci=(ExpanderCommanderItem)item;      data+=("," + eci.getAddress() + ","+ eci.getType());    }    editor.putString(KEY_COMMANDER + item.getCommandType() + String.format("%02d",i),data);  }  editor.commit();}  }
class C{  public InputLexerSource(InputStream input) throws IOException {  super(new BufferedReader(new InputStreamReader(input)),true);}  }
class C{  public boolean equals(Object obj){  if (obj instanceof Primitive)   return ((Primitive)obj).value.equals(this.value); else   return false;}  }
class C{  public boolean hasExtendedProperties(){  return hasRepeatingExtension(ExtendedProperty.class);}  }
class C{  public int hashCode(){  return this.credentialClass.hashCode();}  }
class C{  public GautengUtilityOfMoney(Scenario scenario,double baseValueOfTime_h,double valueOfTimeMultiplier){  this.sc=scenario;  log.warn("Value of Time (VoT) used as base: " + baseValueOfTime_h);  log.warn("Value of Time multiplier: " + valueOfTimeMultiplier);  this.baseValueOfTime_h=baseValueOfTime_h;  this.commercialMultiplier=valueOfTimeMultiplier;  Map<String,Id> map=new TreeMap<String,Id>();  for (  Id id : sc.getPopulation().getPersons().keySet()) {    String subpopulation=(String)sc.getPopulation().getPersonAttributes().getAttribute(id.toString(),sc.getConfig().plans().getSubpopulationAttributeName());    if (subpopulation != null && !map.containsKey(subpopulation)) {      map.put(subpopulation,id);    }  }  log.info("-----  Using subpopulation  -----");  for (  String sp : map.keySet()) {    log.info(String.format("%30s: mUTTS: %5.2f/hr; mVTTS: %5.0f ZAR/hr; mUoM: %5.3f/ZAR",sp,getUtilityOfTravelTime_hr(),getValueOfTime_hr(map.get(sp)),getUtilityOfMoneyFromValueOfTime(getValueOfTime_hr(map.get(sp)))));  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public AvailableExpression find(Instruction inst){  Operator opr=inst.operator();  Operand[] ops=null;  LocationOperand location=null;switch (inst.operator().format) {case InstructionFormat.GetField_format:    if (VM.VerifyAssertions)     VM._assert(doMemory);  ops=new Operand[]{GetField.getRef(inst)};location=GetField.getLocation(inst);break;case InstructionFormat.GetStatic_format:if (VM.VerifyAssertions) VM._assert(doMemory);location=GetStatic.getLocation(inst);break;case InstructionFormat.PutField_format:if (VM.VerifyAssertions) VM._assert(doMemory);ops=new Operand[]{PutField.getRef(inst)};location=PutField.getLocation(inst);break;case InstructionFormat.PutStatic_format:if (VM.VerifyAssertions) VM._assert(doMemory);location=PutStatic.getLocation(inst);break;case InstructionFormat.Unary_format:ops=new Operand[]{Unary.getVal(inst)};break;case InstructionFormat.GuardedUnary_format:ops=new Operand[]{GuardedUnary.getVal(inst)};break;case InstructionFormat.Binary_format:ops=new Operand[]{Binary.getVal1(inst),Binary.getVal2(inst)};break;case InstructionFormat.GuardedBinary_format:ops=new Operand[]{GuardedBinary.getVal1(inst),GuardedBinary.getVal2(inst)};break;case InstructionFormat.Move_format:ops=new Operand[]{Move.getVal(inst)};break;case InstructionFormat.NullCheck_format:ops=new Operand[]{NullCheck.getRef(inst)};break;case InstructionFormat.ZeroCheck_format:ops=new Operand[]{ZeroCheck.getValue(inst)};break;case InstructionFormat.BoundsCheck_format:ops=new Operand[]{BoundsCheck.getRef(inst),BoundsCheck.getIndex(inst)};break;case InstructionFormat.TrapIf_format:ops=new Operand[]{TrapIf.getVal1(inst),TrapIf.getVal2(inst),TrapIf.getTCode(inst)};break;case InstructionFormat.TypeCheck_format:ops=new Operand[]{TypeCheck.getRef(inst),TypeCheck.getType(inst)};break;case InstructionFormat.InstanceOf_format:ops=new Operand[]{InstanceOf.getRef(inst),InstanceOf.getType(inst)};break;case InstructionFormat.Call_format:int numParams=Call.getNumberOfParams(inst);ops=new Operand[numParams + 2];ops[0]=Call.getAddress(inst);ops[1]=Call.getMethod(inst);for (int i=0; i < numParams; i++) {ops[i + 2]=Call.getParam(inst,i);}break;default :throw new OptimizingCompilerException("Unsupported type " + inst);}AvailableExpression ae=new AvailableExpression(inst,opr,ops,location,null);int index=cache.indexOf(ae);if (index == -1) {return null;}return cache.get(index);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static boolean isHasSdcard(){  String status=Environment.getExternalStorageState();  if (status.equals(Environment.MEDIA_MOUNTED)) {    return true;  } else {    return false;  }}  }
class C{  public final CC minHeight(String size){  ver.setSize(LayoutUtil.derive(ver.getSize(),ConstraintParser.parseUnitValue(size,false),null,null));  return this;}  }
class C{  public SignCsrAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("SignCsrAction.statusbar"));  putValue(NAME,res.getString("SignCsrAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("SignCsrAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("SignCsrAction.image")))));}  }
class C{  public RestoreSnapshotRequest indexSettings(String source){  this.indexSettings=Settings.settingsBuilder().loadFromSource(source).build();  return this;}  }
class C{  private static String urlEncode(final String text) throws UnsupportedEncodingException {  return URLEncoder.encode(text,"UTF-8");}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_PROGRAM_1__COMMENT_1:    getComment_1().clear();  getComment_1().addAll((Collection<? extends Comment_>)newValue);return;case UmplePackage.ANONYMOUS_PROGRAM_1__DIRECTIVE_1:getDirective_1().clear();getDirective_1().addAll((Collection<? extends Directive_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public GridClientException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  private void resizeVertical(Event e,FormData sashData){  Rectangle sashRect=sash.getBounds();  Rectangle shellRect=Sasher.this.getBounds();  int right=shellRect.width - sashRect.width - limit;  e.x=Math.max(Math.min(e.x,right),limit);  if (e.x != sashRect.x) {    sashData.top=new FormAttachment(0,e.x);    Sasher.this.layout();  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new ScrollBarUI();}  }
class C{  private Map<String,Type> findTypesIn(Object model){  final Map<String,Type> map=new HashMap<>();  findTypesIn(requireNonNull(model),map);  return map;}  }
class C{  private static List<Territory> findFontier(final Territory start,final Match<Territory> endCondition,final Match<Territory> routeCondition,final int distance,final GameData data){  final Match<Territory> canGo=new CompositeMatchOr<>(endCondition,routeCondition);  final IntegerMap<Territory> visited=new IntegerMap<>();  final Queue<Territory> q=new LinkedList<>();  final List<Territory> frontier=new ArrayList<>();  q.addAll(data.getMap().getNeighbors(start,canGo));  Territory current=null;  visited.put(start,0);  for (  final Territory t : q) {    visited.put(t,1);    if (1 == distance && endCondition.match(t)) {      frontier.add(t);    }  }  while (!q.isEmpty()) {    current=q.remove();    if (visited.getInt(current) == distance) {      break;    } else {      for (      final Territory neighbor : data.getMap().getNeighbors(current,canGo)) {        if (!visited.keySet().contains(neighbor)) {          q.add(neighbor);          final int dist=visited.getInt(current) + 1;          visited.put(neighbor,dist);          if (dist == distance && endCondition.match(neighbor)) {            frontier.add(neighbor);          }        }      }    }  }  return frontier;}  }
class C{  private void checkPeriod(ReadablePeriod period){  if (period == null) {    throw new IllegalArgumentException("Period must not be null");  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name_1: ");  result.append(name_1);  result.append(')');  return result.toString();}  }
class C{  public static Validator<CharSequence> minLength(@NonNull final CharSequence errorMessage,final int minLength){  return new MinLengthValidator(errorMessage,minLength);}  }
class C{  public void addConsistencyGroupTypes(String... cgTypes){  if (types == null) {    setTypes(new StringSet());  }  for (  String type : cgTypes) {    types.add(type);  }}  }
class C{  public static void signalShutdown(){  shutdown=true;  signalAllControllers();}  }
class C{  public void loadSelfFile(File file,String encoding,boolean debug){  try {    loadSelfFile(new FileInputStream(file),encoding,MAX_FILE_SIZE,debug,true);  } catch (  IOException exception) {    throw new SelfParseException("Parsing error occurred",exception);  }}  }
class C{  private void processTSBKChannelGrant(TSBKMessage message){  String channel=null;  String from=null;  String to=null;switch (message.getOpcode()) {case GROUP_DATA_CHANNEL_GRANT:    GroupDataChannelGrant gdcg=(GroupDataChannelGrant)message;  channel=gdcg.getChannel();from=gdcg.getSourceAddress();to=gdcg.getGroupAddress();if (hasCallEvent(channel,from,to)) {updateCallEvent(channel,from,to);} else {P25CallEvent event=new P25CallEvent.Builder(CallEventType.DATA_CALL).aliasList(getAliasList()).channel(channel).details((gdcg.isEncrypted() ? "ENCRYPTED" : "") + (gdcg.isEmergency() ? " EMERGENCY" : "")).frequency(gdcg.getDownlinkFrequency()).from(from).to(to).build();registerCallEvent(event);broadcast(event);}if (!mIgnoreDataCalls) {broadcast(new TrafficChannelAllocationEvent(this,mChannelCallMap.get(channel)));}break;case GROUP_VOICE_CHANNEL_GRANT:GroupVoiceChannelGrant gvcg=(GroupVoiceChannelGrant)message;channel=gvcg.getChannel();from=gvcg.getSourceAddress();to=gvcg.getGroupAddress();if (hasCallEvent(channel,from,to)) {updateCallEvent(channel,from,to);} else {P25CallEvent event=new P25CallEvent.Builder(CallEventType.GROUP_CALL).aliasList(getAliasList()).channel(channel).details((gvcg.isEncrypted() ? "ENCRYPTED" : "") + (gvcg.isEmergency() ? " EMERGENCY" : "")).frequency(gvcg.getDownlinkFrequency()).from(from).to(to).build();registerCallEvent(event);broadcast(event);}broadcast(new TrafficChannelAllocationEvent(this,mChannelCallMap.get(channel)));break;case GROUP_VOICE_CHANNEL_GRANT_UPDATE:GroupVoiceChannelGrantUpdate gvcgu=(GroupVoiceChannelGrantUpdate)message;channel=gvcgu.getChannel1();from=null;to=gvcgu.getGroupAddress1();if (hasCallEvent(channel,from,to)) {updateCallEvent(channel,from,to);} else {P25CallEvent event=new P25CallEvent.Builder(CallEventType.GROUP_CALL).aliasList(getAliasList()).channel(channel).channel(gvcgu.getChannel1()).details((gvcgu.isEncrypted() ? "ENCRYPTED" : "") + (gvcgu.isEmergency() ? " EMERGENCY" : "")).frequency(gvcgu.getDownlinkFrequency1()).from(from).to(to).build();registerCallEvent(event);broadcast(event);}broadcast(new TrafficChannelAllocationEvent(this,mChannelCallMap.get(channel)));if (gvcgu.hasChannelNumber2()) {channel=gvcgu.getChannel2();to=gvcgu.getGroupAddress2();if (hasCallEvent(channel,from,to)) {updateCallEvent(channel,from,to);} else {P25CallEvent event2=new P25CallEvent.Builder(CallEventType.GROUP_CALL).aliasList(getAliasList()).channel(gvcgu.getChannel2()).details((gvcgu.isEncrypted() ? "ENCRYPTED" : "") + (gvcgu.isEmergency() ? " EMERGENCY" : "")).frequency(gvcgu.getDownlinkFrequency2()).to(gvcgu.getGroupAddress2()).build();registerCallEvent(event2);broadcast(event2);}broadcast(new TrafficChannelAllocationEvent(this,mChannelCallMap.get(channel)));}break;case GROUP_VOICE_CHANNEL_GRANT_UPDATE_EXPLICIT:GroupVoiceChannelGrantUpdateExplicit gvcgue=(GroupVoiceChannelGrantUpdateExplicit)message;channel=gvcgue.getTransmitChannelIdentifier() + "-" + gvcgue.getTransmitChannelNumber();from=null;to=gvcgue.getGroupAddress();if (hasCallEvent(channel,from,to)) {updateCallEvent(channel,from,to);} else {P25CallEvent event=new P25CallEvent.Builder(CallEventType.GROUP_CALL).aliasList(getAliasList()).channel(channel).details((gvcgue.isEncrypted() ? "ENCRYPTED" : "") + (gvcgue.isEmergency() ? " EMERGENCY" : "")).frequency(gvcgue.getDownlinkFrequency()).from(from).to(to).build();registerCallEvent(event);broadcast(event);}broadcast(new TrafficChannelAllocationEvent(this,mChannelCallMap.get(channel)));break;case INDIVIDUAL_DATA_CHANNEL_GRANT:IndividualDataChannelGrant idcg=(IndividualDataChannelGrant)message;channel=idcg.getChannel();from=idcg.getSourceAddress();to=idcg.getTargetAddress();if (hasCallEvent(channel,from,to)) {updateCallEvent(channel,from,to);} else {P25CallEvent event=new P25CallEvent.Builder(CallEventType.DATA_CALL).aliasList(getAliasList()).channel(channel).details((idcg.isEncrypted() ? "ENCRYPTED" : "") + (idcg.isEmergency() ? " EMERGENCY" : "")).frequency(idcg.getDownlinkFrequency()).from(from).to(to).build();registerCallEvent(event);broadcast(event);}if (!mIgnoreDataCalls) {broadcast(new TrafficChannelAllocationEvent(this,mChannelCallMap.get(channel)));}break;case SNDCP_DATA_CHANNEL_GRANT:SNDCPDataChannelGrant sdcg=(SNDCPDataChannelGrant)message;channel=sdcg.getTransmitChannel();from=null;to=sdcg.getTargetAddress();if (hasCallEvent(channel,from,to)) {updateCallEvent(channel,from,to);} else {P25CallEvent event=new P25CallEvent.Builder(CallEventType.DATA_CALL).aliasList(getAliasList()).channel(channel).details((sdcg.isEncrypted() ? "ENCRYPTED" : "") + (sdcg.isEmergency() ? " EMERGENCY" : "")).frequency(sdcg.getDownlinkFrequency()).from(from).to(to).build();registerCallEvent(event);broadcast(event);}if (!mIgnoreDataCalls) {broadcast(new TrafficChannelAllocationEvent(this,mChannelCallMap.get(channel)));}break;case TELEPHONE_INTERCONNECT_VOICE_CHANNEL_GRANT:TelephoneInterconnectVoiceChannelGrant tivcg=(TelephoneInterconnectVoiceChannelGrant)message;channel=tivcg.getChannel();from=null;to=tivcg.getAddress();if (hasCallEvent(channel,from,to)) {updateCallEvent(channel,from,to);} else {P25CallEvent event=new P25CallEvent.Builder(CallEventType.TELEPHONE_INTERCONNECT).aliasList(getAliasList()).channel(channel).details((tivcg.isEncrypted() ? "ENCRYPTED " : "") + (tivcg.isEmergency() ? "EMERGENCY " : "") + "CALL TIMER:"+ tivcg.getCallTimer()).frequency(tivcg.getDownlinkFrequency()).from(from).to(to).build();registerCallEvent(event);broadcast(event);}broadcast(new TrafficChannelAllocationEvent(this,mChannelCallMap.get(channel)));break;case TELEPHONE_INTERCONNECT_VOICE_CHANNEL_GRANT_UPDATE:TelephoneInterconnectVoiceChannelGrantUpdate tivcgu=(TelephoneInterconnectVoiceChannelGrantUpdate)message;channel=tivcgu.getChannelIdentifier() + "-" + tivcgu.getChannelNumber();from=null;to=tivcgu.getAddress();if (hasCallEvent(channel,from,to)) {updateCallEvent(channel,from,to);} else {P25CallEvent event=new P25CallEvent.Builder(CallEventType.TELEPHONE_INTERCONNECT).aliasList(getAliasList()).channel(channel).details((tivcgu.isEncrypted() ? "ENCRYPTED " : "") + (tivcgu.isEmergency() ? "EMERGENCY " : "") + "CALL TIMER:"+ tivcgu.getCallTimer()).frequency(tivcgu.getDownlinkFrequency()).from(from).to(to).build();registerCallEvent(event);broadcast(event);}broadcast(new TrafficChannelAllocationEvent(this,mChannelCallMap.get(channel)));break;case UNIT_TO_UNIT_VOICE_CHANNEL_GRANT:UnitToUnitVoiceChannelGrant uuvcg=(UnitToUnitVoiceChannelGrant)message;channel=uuvcg.getChannelIdentifier() + "-" + uuvcg.getChannelNumber();from=uuvcg.getSourceAddress();to=uuvcg.getTargetAddress();if (hasCallEvent(channel,from,to)) {updateCallEvent(channel,from,to);} else {P25CallEvent event=new P25CallEvent.Builder(CallEventType.UNIT_TO_UNIT_CALL).aliasList(getAliasList()).channel(channel).details((uuvcg.isEncrypted() ? "ENCRYPTED " : "") + (uuvcg.isEmergency() ? "EMERGENCY " : "")).frequency(uuvcg.getDownlinkFrequency()).from(from).to(to).build();registerCallEvent(event);broadcast(event);}broadcast(new TrafficChannelAllocationEvent(this,mChannelCallMap.get(channel)));break;case UNIT_TO_UNIT_VOICE_CHANNEL_GRANT_UPDATE:UnitToUnitVoiceChannelGrantUpdate uuvcgu=(UnitToUnitVoiceChannelGrantUpdate)message;channel=uuvcgu.getChannelIdentifier() + "-" + uuvcgu.getChannelNumber();from=uuvcgu.getSourceAddress();to=uuvcgu.getTargetAddress();if (hasCallEvent(channel,from,to)) {updateCallEvent(channel,from,to);} else {P25CallEvent event=new P25CallEvent.Builder(CallEventType.UNIT_TO_UNIT_CALL).aliasList(getAliasList()).channel(channel).details((uuvcgu.isEncrypted() ? "ENCRYPTED " : "") + (uuvcgu.isEmergency() ? "EMERGENCY " : "")).frequency(uuvcgu.getDownlinkFrequency()).from(from).to(to).build();registerCallEvent(event);broadcast(event);}broadcast(new TrafficChannelAllocationEvent(this,mChannelCallMap.get(channel)));break;default :break;}}  }
class C{  public static boolean cs_updown(Dcs L,int sigma,Dcs C,int[] parent){  int n, p, f, j, Lp[], Li[], Cp[], Ci[];  double Lx[], Cx[], alpha, beta=1, delta, gamma, w1, w2, w[], beta2=1;  if (!Dcs_util.CS_CSC(L) || !Dcs_util.CS_CSC(C) || parent == null)   return (false);  Lp=L.p;  Li=L.i;  Lx=L.x;  n=L.n;  Cp=C.p;  Ci=C.i;  Cx=C.x;  if ((p=Cp[0]) >= Cp[1])   return (true);  w=new double[n];  f=Ci[p];  for (; p < Cp[1]; p++)   f=Math.min(f,Ci[p]);  for (j=f; j != -1; j=parent[j])   w[j]=0;  for (p=Cp[0]; p < Cp[1]; p++)   w[Ci[p]]=Cx[p];  for (j=f; j != -1; j=parent[j]) {    p=Lp[j];    alpha=w[j] / Lx[p];    beta2=beta * beta + sigma * alpha * alpha;    if (beta2 <= 0)     break;    beta2=Math.sqrt(beta2);    delta=(sigma > 0) ? (beta / beta2) : (beta2 / beta);    gamma=sigma * alpha / (beta2 * beta);    Lx[p]=delta * Lx[p] + ((sigma > 0) ? (gamma * w[j]) : 0);    beta=beta2;    for (p++; p < Lp[j + 1]; p++) {      w1=w[Li[p]];      w[Li[p]]=w2=w1 - alpha * Lx[p];      Lx[p]=delta * Lx[p] + gamma * ((sigma > 0) ? w1 : w2);    }  }  return (beta2 > 0);}  }
class C{  public boolean isValidName(){  return true;}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  private double squaredError(int k){  double squaredError=0.0;  for (int i=0; i < data.rows(); i++) {    if (clusters.get(i) == k) {      TetradVector datum=data.getRow(i);      TetradVector center=centers.getRow(k);      squaredError+=metric.dissimilarity(datum,center);    }  }  return squaredError;}  }
class C{  protected void chooseDataSourceFileTypeFromComboBox(){  this.showFileDataSourceComboBox=false;  String oldFileType=fileDataSourceFactory != null ? fileDataSourceFactory.getI18NKey() : "unknown";  this.fileDataSourceFactory=(FileDataSourceFactory<?>)factoryDropDownComboBox.getSelectedItem();  String newFileType=fileDataSourceFactory.getI18NKey();  DataImportWizardUtils.logStats(DataWizardEventType.FILE_TYPE_CHANGED,oldFileType + "->" + newFileType);  fireChangeEvent();  updateFileTypePanel();}  }
class C{  public static ColumnFamily removeDeletedCF(ColumnFamily cf,int gcBefore){  cf.purgeTombstones(gcBefore);  return !cf.hasColumns() && !cf.isMarkedForDelete() ? null : cf;}  }
class C{  Class<?> javaxToolsJavac(String packageName,String className,String source){  String fullClassName=packageName + "." + className;  StringWriter writer=new StringWriter();  JavaFileManager fileManager=new ClassFileManager(JAVA_COMPILER.getStandardFileManager(null,null,null));  ArrayList<JavaFileObject> compilationUnits=new ArrayList<JavaFileObject>();  compilationUnits.add(new StringJavaFileObject(fullClassName,source));  JAVA_COMPILER.getTask(writer,fileManager,null,null,null,compilationUnits).call();  String err=writer.toString();  throwSyntaxError(err);  try {    return fileManager.getClassLoader(null).loadClass(fullClassName);  } catch (  ClassNotFoundException e) {    throw DbException.convert(e);  }}  }
class C{  public static void forceDump(Object object,String format,Object... args){  DebugConfig config=getConfig();  if (config != null) {    String message=String.format(format,args);    for (    DebugDumpHandler dumpHandler : config.dumpHandlers()) {      dumpHandler.dump(object,message);    }  } else {    TTY.println("Forced dump ignored because debugging is disabled - use -Dgraal.Dump=xxx");  }}  }
class C{  @GET @Controller @Produces("text/html") @Path("view1/{id}") public String view1(@PathParam("id") String id){  models.put("book",catalog.getBook(id));  return "book.xhtml";}  }
class C{  public boolean execute(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  return true;}  }
class C{  public SortedListModel(){  super();  set=new TreeSet<T>();}  }
class C{  protected DiscreteCalcAndArguments assignCalcObjectDiscrete() throws Exception {  String kPropValueStr, basePropValueStr;  try {    kPropValueStr=propertyValues.get(DISCRETE_PROPNAME_K);  } catch (  Exception ex) {    JOptionPane.showMessageDialog(this,ex.getMessage());    resultsLabel.setText("Cannot find a value for property " + DISCRETE_PROPNAME_K);    return null;  }  try {    basePropValueStr=propertyValues.get(DISCRETE_PROPNAME_BASE);  } catch (  Exception ex) {    JOptionPane.showMessageDialog(this,ex.getMessage());    resultsLabel.setText("Cannot find a value for property " + DISCRETE_PROPNAME_BASE);    return null;  }  int k=Integer.parseInt(kPropValueStr);  int base=Integer.parseInt(basePropValueStr);  return new DiscreteCalcAndArguments(new TransferEntropyCalculatorDiscrete(base,k),base,base + ", " + k);}  }
class C{  protected DistributedSystemHealthConfig createDistributedSystemHealthConfig(){  return new DistributedSystemHealthConfigImpl();}  }
class C{  public ClusterInfo configureConnectEmcEmailParams(ConnectEmcEmail emailParams){  return client.post(ClusterInfo.class,emailParams,CONFIG_CONNECT_EMC_EMAIL_URL);}  }
class C{  private String _serializeArray(Array array,Map<Object,String> done,String id) throws ConverterException {  return _serializeList(array.toList(),done,id);}  }
class C{  synchronized void thaw(ThreadReference resumingThread){  if (cache != null) {    if ((vm.traceFlags & VirtualMachine.TRACE_OBJREFS) != 0) {      vm.printTrace("Clearing VM suspended cache");    }    disableCache();  }  processVMAction(new VMAction(vm,resumingThread,VMAction.VM_NOT_SUSPENDED));}  }
class C{  public static GeneralizedSemImWrapper serializableInstance(){  return new GeneralizedSemImWrapper(GeneralizedSemPmWrapper.serializableInstance());}  }
class C{  protected DelegatingMemberImpl(){  super();}  }
class C{  public Duration toStandardDuration(){  checkYearsAndMonths("Duration");  long millis=getMillis();  millis+=(((long)getSeconds()) * ((long)DateTimeConstants.MILLIS_PER_SECOND));  millis+=(((long)getMinutes()) * ((long)DateTimeConstants.MILLIS_PER_MINUTE));  millis+=(((long)getHours()) * ((long)DateTimeConstants.MILLIS_PER_HOUR));  millis+=(((long)getDays()) * ((long)DateTimeConstants.MILLIS_PER_DAY));  millis+=(((long)getWeeks()) * ((long)DateTimeConstants.MILLIS_PER_WEEK));  return new Duration(millis);}  }
class C{  public void addArguments(String key,String... value){  if (value.length == 1) {    addArgument(key,value[0]);  } else {    addArgument(key,(String[])value);  }}  }
class C{  public SortControl(String sortBy,boolean criticality) throws IOException {  super(OID,criticality,null);  super.value=setEncodedValue(new SortKey[]{new SortKey(sortBy)});}  }
class C{  public ArtifactStoreException(final String message){  super(message);}  }
class C{  @SuppressWarnings("unchecked") public E valueAt(int index){  if (mGarbage) {    gc();  }  return (E)mValues[index];}  }
class C{  public static final byte[] unzip(byte[] in) throws IOException {  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);  GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(in));  byte[] buf=new byte[BUF_SIZE];  while (true) {    int size=inStream.read(buf);    if (size <= 0)     break;    outStream.write(buf,0,size);  }  outStream.close();  return outStream.toByteArray();}  }
class C{  public String toString(){  final StringBuffer buf=new StringBuffer();  if (directory) {    buf.append(DIRECTORY_PREFIX);  } else {    buf.append('/');  }  if (fileName != null) {    buf.append(fileName);    buf.append('/');    if (revision != null) {      buf.append(revision);    }    buf.append('/');    if (conflictString != null) {      buf.append(conflictString);    }    buf.append('/');    if (options != null) {      buf.append(options);    }    buf.append('/');    buf.append(getStickyData());  }  return buf.toString();}  }
class C{  public void registerParameterDataType(String parameterName,ICalDataType dataType){  parameterName=parameterName.toLowerCase();  if (dataType == null) {    parameterDataTypes.remove(parameterName);  } else {    parameterDataTypes.put(parameterName,dataType);  }}  }
class C{  private TreePath findTreePathByObject(TreeModel model,TreeNode base,TreePath parent,Object tofind){  int childCount=model.getChildCount(base);  for (int i=0; i < childCount; i++) {    DefaultMutableTreeNode child=(DefaultMutableTreeNode)model.getChild(base,i);    if (child.getUserObject().equals(tofind)) {      return parent.pathByAddingChild(child);    }    if (!model.isLeaf(child)) {      TreePath foundTreePath=findTreePathByObject(model,child,parent.pathByAddingChild(child),tofind);      if (null != foundTreePath)       return foundTreePath;    }  }  return null;}  }
class C{  public static VulnerabilityGroup transformToGroup(IItem item){  VulnerabilityGroup vulnGroup=new VulnerabilityGroup();  if (item.getName() != null) {    vulnGroup.setTitel(item.getName().replaceAll("\\s"," "));  }  return vulnGroup;}  }
class C{  public boolean isNodeAfter(int nodeHandle1,int nodeHandle2){  return false;}  }
class C{  @Field(26) public __VARIANT_NAME_3_union pbstrVal(Pointer<Pointer<Byte>> pbstrVal){  this.io.setPointerField(this,26,pbstrVal);  return this;}  }
class C{  public static boolean isElementsPositive(double[][] m){  for (int i=0; i < m.length; i++) {    for (int j=0; j < m[i].length; j++) {      if (m[i][j] < 0)       return false;    }  }  return true;}  }
class C{  private static void findOraHomes(){  String path=System.getenv(OracleConstants.VAR_PATH);  if (path != null) {    for (    String token : path.split(System.getProperty("path.separator"))) {      if (token.toLowerCase().contains("oracle")) {        token=CommonUtils.removeTrailingSlash(token);        if (token.toLowerCase().endsWith("bin")) {          String oraHome=token.substring(0,token.length() - 3);          try {            addOraHome(oraHome);          } catch (          DBException ex) {            log.warn("Wrong Oracle client home " + oraHome,ex);          }        }      }    }  }  String oraHome=System.getenv(OracleConstants.VAR_ORA_HOME);  if (oraHome == null) {    oraHome=System.getenv(OracleConstants.VAR_ORACLE_HOME);  }  if (oraHome != null) {    try {      addOraHome(oraHome);    } catch (    DBException ex) {      log.warn("Wrong Oracle client home " + oraHome,ex);    }  }  if (DBeaverCore.getInstance().getLocalSystem().isWindows()) {    try {      List<String> oracleKeys=WinRegistry.readStringSubKeys(WinRegistry.HKEY_LOCAL_MACHINE,WIN_REG_ORACLE);      if (oracleKeys != null) {        for (        String oracleKey : oracleKeys) {          Map<String,String> valuesMap=WinRegistry.readStringValues(WinRegistry.HKEY_LOCAL_MACHINE,WIN_REG_ORACLE + "\\" + oracleKey);          if (valuesMap != null) {            for (            String key : valuesMap.keySet()) {              if (WIN_REG_ORA_HOME.equals(key)) {                try {                  oraHome=valuesMap.get(key);                  addOraHome(oraHome);                } catch (                DBException ex) {                  log.warn("Wrong Oracle client home " + oraHome,ex);                }                break;              }            }          }        }      }    } catch (    Exception e) {      log.warn("Error reading Windows registry",e);    }  }}  }
class C{  protected Object processInStreamOutObject(int type,BinaryRawReaderEx reader) throws IgniteCheckedException {  return throwUnsupported(type);}  }
class C{  private void propagate(AugmentedNode<K> t){  AugmentedNode<K> lf;  AugmentedNode<K> rt;  while (t != null) {    lf=t.left();    rt=t.right();    boolean updated=false;    if (!t.min.equals(lf.min)) {      t.min=lf.min;      updated=true;    }    if (!t.max.equals(rt.max)) {      t.max=rt.max;      updated=true;    }    if (!updated)     break;    t=t.parent();  }}  }
class C{  public SlideOutAnimation(View view){  this.view=view;  direction=DIRECTION_LEFT;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public Sensors(){  mSensorManager=(SensorManager)Util.getContext().getSystemService(Context.SENSOR_SERVICE);  mAccelerometer=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  mMagneticField=mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  resume();}  }
class C{  public String toString(){  return name;}  }
class C{  public static String formatTime(int hour,int minute){  String s="";  String t=Integer.toString(hour);  if (t.length() == 2) {    s=t + ":";  } else   if (t.length() == 1) {    s="0" + t + ":";  }  t=Integer.toString(minute);  if (t.length() == 2) {    s=s + t;  } else   if (t.length() == 1) {    s=s + "0" + t;  }  if (s.length() != 5) {    s="00:00";  }  return s;}  }
class C{  public void registerOutParameter(int parameterIndex,SQLType sqlType) throws SQLException {  super.registerOutParameter(parameterIndex,translateAndCheckSqlType(sqlType));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.565 -0500",hash_original_method="043D89A921444ACFFC25D3711EECF0CA",hash_generated_method="1EC3AF62B1106EC64D8195D6B4E8C3D2") public TimeoutException(){}  }
class C{  private Object invokeGetter(Object target,String getter){  try {    Method getAddress=target.getClass().getMethod(getter);    return getAddress.invoke(target);  } catch (  NoSuchMethodException nsme) {  }catch (  IllegalAccessException iae) {  }catch (  IllegalArgumentException iae) {  }catch (  InvocationTargetException ite) {  }  return new IllegalStateException("Exception invoking " + getter + " on a "+ target.getClass()+ " object");}  }
class C{  public CharSequenceReader(CharSequence seq){  this.seq=checkNotNull(seq);}  }
class C{  void initialize(){  mProvisioningOperationHandler=allocateBgHandler(PROVISIONING_OPERATIONS_THREAD_NAME);  mRcsAccountManager=new RcsAccountManager(mCtx,mContactManager);  mNetworkCnx=new HttpsProvisioningConnection(this,mCtx);  mSmsManager=new HttpsProvisioningSMS(this,mCtx);}  }
class C{  public static ProgressDialog showProgressDialog(Context context,String title,String message,OnCancelListener cancelListener){  ProgressDialog progressDialog=ProgressDialog.show(context,title,message,true);  progressDialog.setCancelable(true);  progressDialog.setOnCancelListener(cancelListener);  return progressDialog;}  }
class C{  public LargeValueFormatter(String appendix){  this();  mText=appendix;}  }
class C{  protected void onIdle(){  final int turn=SingletonRepository.getRuleProcessor().getTurn() + timingAdjust;  if (owner == null) {    if (((turn % 15) == 0) && isEnemyNear(getPerceptionRange())) {      logger.debug("Sheep (ownerless) moves randomly");      setIdea("walk");      maybeMakeSound(20);      moveRandomly();    } else {      logger.debug("Sheep sleeping");      setIdea(null);    }  } else   if (((turn % 10) == 0) && (hunger >= HUNGER_EXTREMELY_HUNGRY)) {    setIdea("food");    maybeMakeSound(20);    setRandomPathFrom(owner.getX(),owner.getY(),getMovementRange());    setSpeed(getBaseSpeed());  } else   if (!nextTo(owner)) {    moveToOwner();    maybeMakeSound(20);  } else {    if ((turn % 100) == 0) {      logger.debug("Sheep is bored");      setRandomPathFrom(owner.getX(),owner.getY(),getMovementRange() / 2);      setSpeed(getBaseSpeed());    } else {      logger.debug("Sheep has nothing to do");      setIdea(null);    }  }}  }
class C{  private Object[] inliningContext(){  if (!Debug.isDumpEnabled(Debug.INFO_LOG_LEVEL)) {    return NO_CONTEXT;  }  Object[] result=new Object[graphQueue.size()];  int i=0;  for (  CallsiteHolder g : graphQueue) {    result[i++]=g.method();  }  return result;}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  this.knnDistance=in.readDouble();}  }
class C{  public void fireAnnotationMiscChanged(WorkflowAnnotation anno){  List<WorkflowAnnotation> list=new LinkedList<>();  list.add(anno);  fireAnnotationsChanged(AnnotationEvent.MISC_CHANGED,list);}  }
class C{  public void save(OutputStream output) throws IOException {  DataOutputStream os=new DataOutputStream(output);  os.writeInt(glyphCount);  if ((name == null) || (psname == null)) {    name="";    psname="";  }  os.writeInt(11);  os.writeInt(size);  os.writeInt(0);  os.writeInt(ascent);  os.writeInt(descent);  for (int i=0; i < glyphCount; i++) {    glyphs[i].writeHeader(os);  }  for (int i=0; i < glyphCount; i++) {    glyphs[i].writeBitmap(os);  }  os.writeUTF(name);  os.writeUTF(psname);  os.writeBoolean(smooth);  os.flush();}  }
class C{  public SQLClientInfoException(Map<String,ClientInfoStatus> failedProperties){  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  String normalizePath(String segment,boolean generateRelative){  if (_userPrefix == null) {    PathImpl userPath=VfsOld.lookup(CauchoUtil.getUserDir());    char sep=CauchoUtil.getFileSeparatorChar();    _userPrefix=userPath.getNativePath();    if (_userPrefix.length() == 0 || _userPrefix.charAt(_userPrefix.length() - 1) != sep) {      _userPrefix=_userPrefix + sep;    }  }  PathImpl path=VfsOld.lookup(segment);  String nativePath=path.getNativePath();  if (!generateRelative)   return nativePath;  if (nativePath.startsWith(_userPrefix))   nativePath=nativePath.substring(_userPrefix.length());  if (nativePath.equals(""))   return "."; else   return nativePath;}  }
class C{  @SuppressWarnings("unchecked") public Object[] toArray(Object[] array){synchronized (children) {    return children.keySet().toArray(array);  }}  }
class C{  public void testSpanOrVersusBooleanNear() throws Exception {  Term t1=randomTerm();  Term t2=randomTerm();  Term t3=randomTerm();  Term t4=randomTerm();  SpanQuery near1=spanQuery(new SpanNearQuery(new SpanQuery[]{spanQuery(new SpanTermQuery(t1)),spanQuery(new SpanTermQuery(t2))},10,random().nextBoolean()));  SpanQuery near2=spanQuery(new SpanNearQuery(new SpanQuery[]{spanQuery(new SpanTermQuery(t3)),spanQuery(new SpanTermQuery(t4))},10,random().nextBoolean()));  BooleanQuery.Builder q1=new BooleanQuery.Builder();  q1.add(near1,Occur.SHOULD);  q1.add(near2,Occur.SHOULD);  SpanQuery q2=spanQuery(new SpanOrQuery(near1,near2));  assertSameSet(q1.build(),q2);}  }
class C{  @Override public ImmutableSet<Entry<K,V>> entrySet(){  return super.entrySet();}  }
class C{  protected E buildValue(final IScope scope,final Object object){  final IType ct=type.getContentType();  return (E)ct.cast(scope,object,null,false);}  }
class C{  protected void parseRotate() throws ParseException, IOException {  current=reader.read();  if (current != 'o') {    reportCharacterExpectedError('o',current);    skipTransform();    return;  }  current=reader.read();  if (current != 't') {    reportCharacterExpectedError('t',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'a') {    reportCharacterExpectedError('a',current);    skipTransform();    return;  }  current=reader.read();  if (current != 't') {    reportCharacterExpectedError('t',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'e') {    reportCharacterExpectedError('e',current);    skipTransform();    return;  }  current=reader.read();  skipSpaces();  if (current != '(') {    reportCharacterExpectedError('(',current);    skipTransform();    return;  }  current=reader.read();  skipSpaces();  float theta=parseFloat();  skipSpaces();switch (current) {case ')':    transformListHandler.rotate(theta);  return;case ',':current=reader.read();skipSpaces();}float cx=parseFloat();skipCommaSpaces();float cy=parseFloat();skipSpaces();if (current != ')') {reportCharacterExpectedError(')',current);skipTransform();return;}transformListHandler.rotate(theta,cx,cy);}  }
class C{  public static Function<Integer> jsonValid(Object arg){  return new JSONArgumentFunction<>("json_valid",arg);}  }
class C{  public static int hash32(final byte[] data,int length){  return hash32(data,length,0x9747b28c);}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  public ProtocolEncoderException(Throwable cause){  super(cause);}  }
class C{  protected synchronized AbstractMRMessage pollMessage(){  if (getNumNodes() <= 0) {    return null;  }  curSerialNodeIndex++;  if (curSerialNodeIndex >= getNumNodes()) {    curSerialNodeIndex=0;  }  if (getMustInit(curSerialNodeIndex)) {    setMustInit(curSerialNodeIndex,false);    SerialMessage m=(SerialMessage)(getNode(curSerialNodeIndex).createInitPacket());    if (m != null) {      log.debug("send init message: " + m);      m.setTimeout(50);      return m;    }  }  return null;}  }
class C{  public boolean start(GPSLocationListener listener){  try {synchronized (this) {      if (locator == null) {        if (Cfg.DEBUG) {          Check.log(TAG + " (start): new GPSLocatorPeriod");        }        locator=new GPSLocatorPeriod(this,0);        if (!locator.isGPSEnabled()) {          if (locator.canToggleGPS()) {            locator.turnGPSOn();            turnedOn=true;          } else {            if (Cfg.DEBUG) {              Check.log(TAG + " (start): cannot start GPS");            }            return false;          }        }        locator.start();      }      Handler handler=Status.self().getDefaultHandler();      handler.removeCallbacks(this);      handler.postDelayed(this,stopDelay);    }synchronized (listeners) {      if (gotValidPosition) {        if (Cfg.DEBUG) {          Check.log(TAG + " (start): got Valid position, return it");        }        listener.onLocationChanged(locator.getLastKnownPosition());        gotValidPosition=false;      } else {        if (!listeners.contains(listener)) {          if (Cfg.DEBUG) {            Check.log(TAG + " (start): adding to listeners");          }          listeners.add(listener);        }      }    }  } catch (  Exception ex) {    listener.onLocationChanged(null);    return false;  }  return true;}  }
class C{  private void cleanMapping(){  ArrayList<Integer> toRemove=new ArrayList<Integer>();  int size=mListMapping.size();  for (int i=0; i < size; ++i) {    if (mListMapping.keyAt(i) == mListMapping.valueAt(i)) {      toRemove.add(mListMapping.keyAt(i));    }  }  size=toRemove.size();  for (int i=0; i < size; ++i) {    mListMapping.delete(toRemove.get(i));  }}  }
class C{  public UDViewGroup addView(UDView subView){  final ViewGroup viewGroup=getContainer();  if (viewGroup != null && subView != null && subView.getView() != null) {    final View view=subView.getView();    if (viewGroup instanceof ILVViewGroup) {      ((ILVViewGroup)viewGroup).addLVView(view,null);    } else {      final ViewGroup.LayoutParams layoutParams=LuaViewUtil.getOrCreateLayoutParams(view);      viewGroup.addView(view,layoutParams);    }  }  return this;}  }
class C{  public MessageListAdapter(Conversation conversation,Context context){  LinkedList<TextView> messages=new LinkedList<TextView>();  if (conversation.getType() != Conversation.TYPE_SERVER) {    Message header=new Message(conversation.getName());    header.setColor(Message.COLOR_RED);    messages.add(header.renderTextView(context));  }  LinkedList<Message> mHistory=conversation.getHistory();  int mSize=mHistory.size();  for (int i=0; i < mSize; i++) {    messages.add(mHistory.get(i).renderTextView(context));  }  conversation.clearBuffer();  this.messages=messages;  this.context=context;  historySize=conversation.getHistorySize();}  }
class C{  private HttpURLConnection invokeRequest(URL url) throws RemoteRepositoryException {  if (url.getProtocol().equalsIgnoreCase(EMC_SSO_AUTH_SERVICE_PROTOCOL) && url.getHost().equalsIgnoreCase(EMC_SSO_DOWNLOAD_SERVICE_TESTHOST)) {    _ssohost=EMC_SSO_AUTH_SERVICE_TESTHOST;  } else   if (url.getProtocol().equalsIgnoreCase(EMC_SSO_AUTH_SERVICE_PROTOCOL) && url.getHost().equalsIgnoreCase(EMC_SSO_DOWNLOAD_SERVICE_HOST)) {    _ssohost=EMC_SSO_AUTH_SERVICE_HOST;  } else {    _ssohost=null;  }  if (_ssohost != null) {    login();  }  return connectImage(url);}  }
class C{  public static void sort(int[] a){  doSort(a,0,a.length - 1);}  }
class C{  public String name(){  return name;}  }
class C{  public void addItem(OnInsertSplitStreamItem item){  items.add(item);}  }
class C{  public boolean isRefreshing(){  return mStatus == PTR_STATUS_LOADING;}  }
class C{  protected void reportMatching(Annotation[] annotations,IJavaElement enclosingElement,IJavaElement[] otherElements,Binding elementBinding,MatchingNodeSet nodeSet,boolean matchedContainer,boolean enclosesElement) throws CoreException {  if (annotations == null)   return;  for (int i=0, al=annotations.length; i < al; i++) {    Annotation annotationType=annotations[i];    IJavaElement localAnnotation=null;    IJavaElement[] otherAnnotations=null;    int length=otherElements == null ? 0 : otherElements.length;    boolean handlesCreated=false;    TypeReference typeRef=annotationType.type;    Integer level=(Integer)nodeSet.matchingNodes.removeKey(typeRef);    if (level != null && enclosesElement && matchedContainer) {      localAnnotation=createHandle(annotationType,(IAnnotatable)enclosingElement);      if (length > 0) {        otherAnnotations=new IJavaElement[length];        for (int o=0; o < length; o++) {          otherAnnotations[o]=createHandle(annotationType,(IAnnotatable)otherElements[o]);        }      }      handlesCreated=true;      this.patternLocator.matchReportReference(typeRef,enclosingElement,localAnnotation,otherAnnotations,elementBinding,level.intValue(),this);    }    MemberValuePair[] pairs=annotationType.memberValuePairs();    for (int j=0, pl=pairs.length; j < pl; j++) {      MemberValuePair pair=pairs[j];      level=(Integer)nodeSet.matchingNodes.removeKey(pair);      if (level != null && enclosesElement) {        ASTNode reference=(annotationType instanceof SingleMemberAnnotation) ? (ASTNode)annotationType : pair;        if (!handlesCreated) {          localAnnotation=createHandle(annotationType,(IAnnotatable)enclosingElement);          if (length > 0) {            otherAnnotations=new IJavaElement[length];            for (int o=0; o < length; o++) {              otherAnnotations[o]=createHandle(annotationType,(IAnnotatable)otherElements[o]);            }          }          handlesCreated=true;        }        this.patternLocator.matchReportReference(reference,enclosingElement,localAnnotation,otherAnnotations,pair.binding,level.intValue(),this);      }    }    ASTNode[] nodes=nodeSet.matchingNodes(annotationType.sourceStart,annotationType.declarationSourceEnd);    if (nodes != null) {      if (!matchedContainer) {        for (int j=0, nl=nodes.length; j < nl; j++) {          nodeSet.matchingNodes.removeKey(nodes[j]);        }      } else {        for (int j=0, nl=nodes.length; j < nl; j++) {          ASTNode node=nodes[j];          level=(Integer)nodeSet.matchingNodes.removeKey(node);          if (enclosesElement) {            if (!handlesCreated) {              localAnnotation=createHandle(annotationType,(IAnnotatable)enclosingElement);              if (length > 0) {                otherAnnotations=new IJavaElement[length];                for (int o=0; o < length; o++) {                  otherAnnotations[o]=createHandle(annotationType,(IAnnotatable)otherElements[o]);                }              }              handlesCreated=true;            }            this.patternLocator.matchReportReference(node,enclosingElement,localAnnotation,otherAnnotations,elementBinding,level.intValue(),this);          }        }      }    }  }}  }
class C{  public static List<Extent> createExtentList(){  List<Extent> l=new ArrayList<Extent>();  String filterFeatureFilename=DgPaths.REPOS + "shared-svn/studies/countries/de/brandenburg_gemeinde_kreisgrenzen/kreise/dlm_kreis.shp";  Tuple<CoordinateReferenceSystem,SimpleFeature> featureTuple=CottbusUtils.loadCottbusFeature(filterFeatureFilename);  Envelope env=getTransformedEnvelope(featureTuple);  Extent e=null;  filterFeatureFilename=DgPaths.REPOS + "shared-svn/projects/cottbus/data/optimization/cb2ks2010/2013-07-31_minflow_10_evening_peak/shapes/bounding_box.shp";  String signalsBBNet=DgPaths.REPOS + "shared-svn/projects/cottbus/data/optimization/cb2ks2010/2013-07-31_minflow_10_evening_peak/network_small.xml.gz";  Scenario scSignalsBoundingBox=ScenarioUtils.createScenario(ConfigUtils.createConfig());  MatsimNetworkReader netReader=new MatsimNetworkReader(scSignalsBoundingBox.getNetwork());  netReader.readFile(signalsBBNet);  String signalSystemsFile=DgPaths.REPOS + "shared-svn/projects/cottbus/data/scenarios/cottbus_scenario/signal_systems_no_13.xml";  SignalSystemsData signalSystems=new SignalSystemsDataImpl();  SignalSystemsReader20 signalsReader=new SignalSystemsReader20(signalSystems);  signalsReader.readFile(signalSystemsFile);  e=new Extent();  e.name="signalized_links";  e.network=new DgSignalizedLinksNetwork().createSmallNetwork(scSignalsBoundingBox.getNetwork(),signalSystems);  e=new Extent();  e.name="signals_bb";  e.network=scSignalsBoundingBox.getNetwork();  String cityNetwork=DgPaths.REPOS + "shared-svn/projects/cottbus/data/scenarios/cottbus_scenario/cottbus_city_network/network_city_wgs84_utm33n.xml.gz";  Scenario sc2=ScenarioUtils.createScenario(ConfigUtils.createConfig());  MatsimNetworkReader netReader2=new MatsimNetworkReader(sc2.getNetwork());  netReader2.readFile(cityNetwork);  e=new Extent();  e.name="city";  e.network=sc2.getNetwork();  e=new Extent();  e.name="city_w_hole";  for (  Link link : scSignalsBoundingBox.getNetwork().getLinks().values()) {    sc2.getNetwork().removeLink(link.getId());  }  e.network=sc2.getNetwork();  e=new Extent();  e.name="all";  e.createPersonDiff=false;  l.add(e);  return l;}  }
class C{  public OutputEvent(Edge edge,RCFGNode p,SourceLocationTag ln){  this.invokeEdge=edge;  this.parent=p;  this.receiverNodes=new HashSet<IAllocNode>();  this.receiverNodeTypes=new HashSet<Type>();  this.linesTag=ln;  setInvoke();}  }
class C{  public void testFilterSubscriber_closesExistingPatientCursor(){  mController.loadSearchResults();  TypedCursorFetchedEvent event=TypedCursorFetchedEventFactory.createEvent(Patient.class,getFakeAppPatientCursor());  mFakeCrudEventBus.post(event);  mController.loadSearchResults();  TypedCursorFetchedEvent reloadEvent=TypedCursorFetchedEventFactory.createEvent(Patient.class,getFakeAppPatientCursor());  mFakeCrudEventBus.post(reloadEvent);  assertTrue(((FakeTypedCursor<Patient>)event.cursor).isClosed());}  }
class C{  @FromString public static Months parseMonths(String periodStr){  if (periodStr == null) {    return Months.ZERO;  }  Period p=PARSER.parsePeriod(periodStr);  return Months.months(p.getMonths());}  }
class C{  private Base64(){}  }
class C{  int trivial(InlineAllocation x){  return x.a;}  }
class C{  public T caseEqualityOp_(EqualityOp_ object){  return null;}  }
class C{  public static void unregisterInterest(){  int totalKeys=5;  Region region1=cache.getRegion(Region.SEPARATOR + REGION_NAME);  List keylist=new ArrayList();  for (int i=0; i < totalKeys; i++) {    keylist.add("key-" + i);  }  boolean exceptionOccured=false;  try {    region1.unregisterInterest("DummyKey1");  } catch (  UnsupportedOperationException expected) {    exceptionOccured=true;  } finally {    if (!exceptionOccured)     fail("UnsupportedOperationException was not thrown as expected for unregisterInterest(key)");  }  exceptionOccured=false;  try {    region1.unregisterInterest(keylist);  } catch (  UnsupportedOperationException expected) {    exceptionOccured=true;  } finally {    if (!exceptionOccured)     fail("UnsupportedOperationException was not thrown as expected for unregisterInterest(keylist)");  }  exceptionOccured=false;  try {    region1.unregisterInterestRegex("kp?");  } catch (  UnsupportedOperationException expected) {    exceptionOccured=true;  } finally {    if (!exceptionOccured)     fail("UnsupportedOperationException was not thrown as expected for unregisterInterestRegex(expr)");  }}  }
class C{  public void testThreeOfFiveNodeSubmitCommand() throws Throwable {  testSubmitCommand(3,5);}  }
class C{  public StrBuilder append(boolean value){  if (value) {    ensureCapacity(size + 4);    buffer[size++]='t';    buffer[size++]='r';    buffer[size++]='u';    buffer[size++]='e';  } else {    ensureCapacity(size + 5);    buffer[size++]='f';    buffer[size++]='a';    buffer[size++]='l';    buffer[size++]='s';    buffer[size++]='e';  }  return this;}  }
class C{  protected void markUsed(Entry entry){  entry.lastUsed=System.nanoTime();}  }
class C{  public static int findAbiScore(String[] supportedAbis,String abi){  for (int i=0; i < supportedAbis.length; ++i) {    if (supportedAbis[i] != null && abi.equals(supportedAbis[i])) {      return i;    }  }  return -1;}  }
class C{  private static int skipCommentsAndQuotes(char[] statement,int position){  for (int i=0; i < START_SKIP.length; i++) {    if (statement[position] == START_SKIP[i].charAt(0)) {      boolean match=true;      for (int j=1; j < START_SKIP[i].length(); j++) {        if (!(statement[position + j] == START_SKIP[i].charAt(j))) {          match=false;          break;        }      }      if (match) {        int offset=START_SKIP[i].length();        for (int m=position + offset; m < statement.length; m++) {          if (statement[m] == STOP_SKIP[i].charAt(0)) {            boolean endMatch=true;            int endPos=m;            for (int n=1; n < STOP_SKIP[i].length(); n++) {              if (m + n >= statement.length) {                return statement.length;              }              if (!(statement[m + n] == STOP_SKIP[i].charAt(n))) {                endMatch=false;                break;              }              endPos=m + n;            }            if (endMatch) {              return endPos + 1;            }          }        }        return statement.length;      }    }  }  return position;}  }
class C{  public static ComponentUI createUI(JComponent table){  return new StyledTableUI(StyleUtil.getStyle());}  }
class C{  public void stop(){  stopped=true;  if (consumer != null)   consumer.shutdown();  if (executor != null) {    executor.shutdown();    try {      if (!executor.awaitTermination(5000,TimeUnit.MILLISECONDS))       if (log.isDebugEnabled())       log.debug("Timed out waiting for consumer threads to shut down, exiting uncleanly.");    } catch (    InterruptedException e) {      if (log.isDebugEnabled())       log.debug("Interrupted during shutdown, exiting uncleanly.");    }  }}  }
class C{  @Deprecated public void testTwoLinesWindowsLineBreaks() throws ResourceInitializationException {  String text="This is a tokenized text .\r\nAnother line with tokens .";  String[] expectedTokens=new String[]{"This","is","a","tokenized","text",".","Another","line","with","tokens","."};  String[] expectedSentences=new String[]{"This is a tokenized text .","Another line with tokens ."};  CollectionReaderDescription reader=createReaderDescription(StringReader.class,StringReader.PARAM_DOCUMENT_TEXT,text,StringReader.PARAM_LANGUAGE,"en");  AnalysisEngineDescription segmenter=createEngineDescription(WhitespaceSegmenter.class);  for (  JCas jcas : SimplePipeline.iteratePipeline(reader,segmenter)) {    assertSentence(expectedSentences,select(jcas,Sentence.class));    assertToken(expectedTokens,select(jcas,Token.class));  }}  }
class C{  public boolean isMenuPayments(){  Object oo=get_Value(COLUMNNAME_IsMenuPayments);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void restartNeo4j(Neo4jSettings neo4jSettings) throws IOException {  if (updateServerSettings(neo4jSettings)) {    forceToRestart();  }}  }
class C{  public WritableRaster createCompatibleWritableRaster(int w,int h){  if (w <= 0 || h <= 0) {    throw new RasterFormatException("negative " + ((w <= 0) ? "width" : "height"));  }  SampleModel sm=sampleModel.createCompatibleSampleModel(w,h);  return new ByteBandedRaster(sm,new Point(0,0));}  }
class C{  public int canDisplayUpTo(CharacterIterator iter,int start,int limit){  return awtFont.canDisplayUpTo(iter,start,limit);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.415 -0400",hash_original_method="70816BBE88934E80A9FA9B28D3E71A31",hash_generated_method="434A6A3A5B1D27FDF9235E0D88DA2EF7") public static short readSwappedShort(InputStream input) throws IOException {  return (short)(((read(input) & 0xff) << 0) + ((read(input) & 0xff) << 8));}  }
class C{  public int size(){  return n;}  }
class C{  public Matrix toTransformMatrix(Size previewViewSize,Size previewStreamSize){  RectF previewViewRect=new RectF(0.0f,0.0f,previewViewSize.width(),previewViewSize.height());  PointF previewViewCenter=new PointF(previewViewRect.centerX(),previewViewRect.centerY());  Size previewBufferSize=previewStreamSize;  if (mOrientationManager.getDeviceNaturalOrientation() == OrientationManager.DeviceNaturalOrientation.PORTRAIT) {    previewBufferSize=new Size(previewStreamSize.height(),previewStreamSize.width());  }  Matrix transformMatrix=new Matrix();  final RectF PreviewBufferRect=new RectF(0.0f,0.0f,previewBufferSize.width(),previewBufferSize.height());  final PointF previewBufferCenter=new PointF(PreviewBufferRect.centerX(),PreviewBufferRect.centerY());  final RectF centeredEffectivePreviewRect=new RectF(PreviewBufferRect);  centeredEffectivePreviewRect.offset(previewViewCenter.x - previewBufferCenter.x,previewViewCenter.y - previewBufferCenter.y);  transformMatrix.setRectToRect(previewViewRect,centeredEffectivePreviewRect,Matrix.ScaleToFit.FILL);  int rotateDegree=mOrientationManager.getDisplayRotation().getDegrees();  transformMatrix.postRotate(rotateDegree,previewViewCenter.x,previewViewCenter.y);  Size rotatedPreviewSize=previewStreamSize;  if (mOrientationManager.isInPortrait()) {    rotatedPreviewSize=new Size(previewStreamSize.height(),previewStreamSize.width());  }  float scale=Math.min((float)previewViewSize.width() / (float)rotatedPreviewSize.width(),(float)previewViewSize.height() / (float)rotatedPreviewSize.height());  transformMatrix.postScale(scale,scale,previewViewCenter.x,previewViewCenter.y);  RectF scaledPreviewStreamRect=new RectF(0.0f,0.0f,previewStreamSize.width() * scale,previewStreamSize.height() * scale);  PointF scaledPreviewStreamCenter=new PointF(scaledPreviewStreamRect.centerX(),scaledPreviewStreamRect.centerY());  transformMatrix.postTranslate(scaledPreviewStreamCenter.x - previewViewCenter.x,scaledPreviewStreamCenter.y - previewViewCenter.y);  return transformMatrix;}  }
class C{  private static byte[] computeDigest(File file) throws IOException {  InputStream is=null;  try {    is=new FileInputStream(file);    return DigestUtils.md5(is);  }  finally {    if (is != null) {      is.close();    }  }}  }
class C{  public OutputAnalyzer(String stdout,String stderr){  this.stdout=stdout;  this.stderr=stderr;  exitValue=-1;}  }
class C{  public boolean deactivateIfEmpty(){  return deactivateIfEmpty;}  }
class C{  @Override public int portLocal(){  SocketChannel s=_channel;  if (s != null) {    try {      InetSocketAddress addr=(InetSocketAddress)s.getLocalAddress();      return addr.getPort();    } catch (    IOException e) {      throw new RuntimeException(e);    }  } else {    return -1;  }}  }
class C{  public final static int[] lineSegments(int x1,int y1,int x2,int y2,int n,boolean include_last,int[] ret_val){  if (n <= 0) {    ret_val=new int[2];    ret_val[0]=x1;    ret_val[1]=y1;    return ret_val;  }  float dx=x2 - x1;  float dy=y2 - y1;  int end=include_last ? n + 1 : n;  end<<=1;  float inc=1f / (float)n;  float t=inc;  ret_val[0]=x1;  ret_val[1]=y1;  for (int i=2; i < end; i+=2, t+=inc) {    ret_val[i]=x1 + (int)(dx * t);    ret_val[i + 1]=y1 + (int)(dy * t);  }  return ret_val;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  boolean state;  NodeList elementList;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:employee");  element=(Element)elementList.item(0);  assertNotNull("empEmployeeNotNull",element);  state=element.hasAttribute("defaultAttr");  assertTrue("elementhasattribute02",state);}  }
class C{  public LabelledPortrayal2D(SimplePortrayal2D child,double scaley,String label,Paint paint,boolean onlyLabelWhenSelected){  this(child,DEFAULT_OFFSET_X,DEFAULT_OFFSET_Y,DEFAULT_SCALE_X,scaley,new Font("SansSerif",Font.PLAIN,10),ALIGN_LEFT,label,paint,onlyLabelWhenSelected);}  }
class C{  public BigdataGraphClient(final BigdataSailRemoteRepository repo,final BlueprintsValueFactory factory){  super(factory,props);  if (repo == null)   throw new IllegalArgumentException();  this.repo=repo;}  }
class C{  protected synchronized static void installShutdownMethods(){  installShutdownHook();  installShutdownSocketHandler();}  }
class C{  public void testMapIsEmpty(){  resetEmpty();  assertEquals("Map.isEmpty() should return true with an empty map",true,map.isEmpty());  verify();  resetFull();  assertEquals("Map.isEmpty() should return false with a non-empty map",false,map.isEmpty());  verify();}  }
class C{  private static int CallStaticObjectMethodA(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticObjectMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,0,methodID,argAddress,null,true);  return env.pushJNIRef(returnObj);}  }
class C{  private void endFormals(){  if (hasFormals) {    hasFormals=false;    buf.append('>');  }}  }
class C{  void openForReading(int newLogKey,int newFirstTrunkPage,int newFirstDataPage){  this.logKey=newLogKey;  this.firstTrunkPage=newFirstTrunkPage;  this.firstDataPage=newFirstDataPage;}  }
class C{  public static <Type>Type newInstanceOrNull(final Class<Type> ofClass){  return newInstance(ofClass,null);}  }
class C{  public void elementDeactivated(TimedElement e,float t){}  }
class C{  static ParameterDefinitionBuilder explicitParameter(AbstractTransformer gen,Parameter parameter){  ParameterDefinitionBuilder pdb=new ParameterDefinitionBuilder(gen,parameter.getName());  if (isBoxedVariableParameter(parameter)) {    pdb.boxedVariable=parameter.getModel();  }  if (parameter.getModel() instanceof Function) {    pdb.functionalParameterName=functionalName((Function)parameter.getModel());  }  return pdb;}  }
class C{  boolean inHorizontalScrollbar(int x,int y){  int w=getListWidth();  int h=height - SCROLLBAR_WIDTH;  return (hsbVis && (x >= 0) && (x <= w)&& (y > h));}  }
class C{  public static void importBaseTypes(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException {  final String query="INSERT INTO " + CTableNames.BASE_TYPES_TABLE + " SELECT "+ moduleId+ ", id, name, size, pointer, signed "+ "FROM "+ String.format(CTableNames.RAW_BASE_TYPES,rawModuleId);  connection.executeUpdate(query,true);  final String updateSequence=String.format("SELECT setval('bn_base_types_id_seq', " + "COALESCE((SELECT MAX(id) + 1 FROM %s), 1), false) from %s",CTableNames.BASE_TYPES_TABLE,CTableNames.BASE_TYPES_TABLE);  connection.executeQuery(updateSequence,true);}  }
class C{  public boolean isGemFireHealth(){  return this.equals(GEMFIRE_HEALTH);}  }
class C{  private void handleEventBindingsReceived(JSONArray eventBindings){  final SharedPreferences preferences=getSharedPreferences();  final SharedPreferences.Editor editor=preferences.edit();  editor.putString(SHARED_PREF_BINDINGS_KEY,eventBindings.toString());  editor.apply();  initializeBindings();}  }
class C{  public void postCompileStep(Compiler compiler){  m_isTopLevel=compiler.getLocationPathDepth() == -1;}  }
class C{  private void checkProximitySupport(){  final SensorManager manager=(SensorManager)getSystemService(SENSOR_SERVICE);  final Sensor proximity=manager.getDefaultSensor(Sensor.TYPE_PROXIMITY);  if (proximity != null) {    return;  }  final PreferenceGroup category=(PreferenceGroup)findPreferenceByResId(R.string.pref_category_when_to_speak_key);  final CheckBoxPreference prefProximity=(CheckBoxPreference)findPreferenceByResId(R.string.pref_proximity_key);  if (prefProximity != null) {    prefProximity.setChecked(false);    category.removePreference(prefProximity);  }}  }
class C{  public byte readByte() throws SQLException {  Byte attrib=(Byte)getNextAttribute();  return (attrib == null) ? 0 : attrib.byteValue();}  }
class C{  public static Sector warpImageWithControlPoints3(BufferedImage sourceImage,java.awt.geom.Point2D[] imagePoints,LatLon[] geoPoints,BufferedImage destImage){  if (sourceImage == null) {    String message=Logging.getMessage("nullValue.SourceImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (destImage == null) {    String message=Logging.getMessage("nullValue.DestinationImageIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  String message=validateControlPoints(3,imagePoints,geoPoints);  if (message != null) {    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Matrix gridToGeographic=Matrix.fromImageToGeographic(imagePoints,geoPoints);  List<LatLon> corners=computeImageCorners(sourceImage.getWidth(),sourceImage.getHeight(),gridToGeographic);  Sector destSector=Sector.boundingSector(corners);  if (Sector.isSector(corners) && destSector.isSameSector(corners)) {    getScaledCopy(sourceImage,destImage);  } else {    Matrix transform=Matrix.IDENTITY;    transform=transform.multiply(Matrix.fromGeographicToImage(imagePoints,geoPoints));    transform=transform.multiply(Matrix.fromImageToGeographic(destImage.getWidth(),destImage.getHeight(),destSector));    warpImageWithTransform(sourceImage,destImage,transform);  }  return destSector;}  }
class C{  @Override public Request<RunnerStatus> stop(ProjectReference projectReference,long processId){  checkNotNull(projectReference);  final Invocation request=getWebTarget().path(projectReference.workspaceId()).path("stop").path(String.valueOf(processId)).request().accept(APPLICATION_JSON).buildPost(null);  return new SimpleRequest<RunnerStatus>(request,DefaultRunnerStatus.class,getAuthenticationManager());}  }
class C{  public static String toString(Object value){  if (value == null) {    return null;  }  return value.toString();}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testGetF19(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF19();  assertEquals(expResult,result);}  }
class C{  @Override public void windowLostFocus(WindowEvent e){  timer.restart();}  }
class C{  public static void writeSingleByte(OutputStream out,int b) throws IOException {  byte[] buffer=new byte[1];  buffer[0]=(byte)(b & 0xff);  out.write(buffer);}  }
class C{  public final boolean hasDataSchemeSpecificPart(String data){  if (mDataSchemeSpecificParts == null) {    return false;  }  final int numDataSchemeSpecificParts=mDataSchemeSpecificParts.size();  for (int i=0; i < numDataSchemeSpecificParts; i++) {    final PluginPatternMatcher pe=mDataSchemeSpecificParts.get(i);    if (pe.match(data)) {      return true;    }  }  return false;}  }
class C{  protected boolean dontEscape(Element element){  return props.isUseCdataFor(element.getNodeName()) && (!element.hasChildNodes() || element.getTextContent() == null || element.getTextContent().trim().length() == 0);}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;switch (zzLexicalState) {case SCRIPT:case COMMENT:case SCRIPT_COMMENT:case STYLE:case STYLE_COMMENT:case SINGLE_QUOTED_STRING:case DOUBLE_QUOTED_STRING:case END_TAG_TAIL_EXCLUDE:case END_TAG_TAIL_SUBSTITUTE:case START_TAG_TAIL_EXCLUDE:case SERVER_SIDE_INCLUDE:case START_TAG_TAIL_SUBSTITUTE:{        cumulativeDiff+=yychar - inputStart;        addOffCorrectMap(outputCharCount,cumulativeDiff);        outputSegment.clear();        eofReturnValue=-1;        break;      }case CHARACTER_REFERENCE_TAIL:{      cumulativeDiff+=inputSegment.length() - outputSegment.length();      addOffCorrectMap(outputCharCount + outputSegment.length(),cumulativeDiff);      eofReturnValue=(!outputSegment.isRead()) ? outputSegment.nextChar() : -1;      break;    }case BANG:case CDATA:case AMPERSAND:case NUMERIC_CHARACTER:case END_TAG_TAIL_INCLUDE:case START_TAG_TAIL_INCLUDE:case LEFT_ANGLE_BRACKET:case LEFT_ANGLE_BRACKET_SLASH:case LEFT_ANGLE_BRACKET_SPACE:{    outputSegment=inputSegment;    eofReturnValue=(!outputSegment.isRead()) ? outputSegment.nextChar() : -1;    break;  }default :{  eofReturnValue=-1;}}}}  }
class C{  public static void main(String[] args){  if (args.length != 1) {    System.out.println("Usage = java com.aceva.devtool.ClassName <full class name>");    System.exit(1);  } else {    try {      Class<?> aClass=Class.forName(args[0]);      ClassName className=new ClassName(aClass);      System.out.println("Entire Package Name = " + className.getEntirePackageName());      System.out.println("PackageName = " + className.getPackageName());      System.out.println("Entire Class Name = " + className.getEntireClassName());      System.out.println("Class Name = " + className.getClassName());    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public ClassCastException(){  super();}  }
class C{  public static Thread scheduleCollectorContext(CollectorContext item){  return model.scheduleCollectorContext(item);}  }
class C{  public void notify(int id,Notification notification){  notify(null,id,notification);}  }
class C{  public static String replaceEscapedRightAngle(String s){  StringBuilder buf=new StringBuilder();  int i=0;  while (i < s.length()) {    char c=s.charAt(i);    if (c == '<' && s.substring(i).startsWith("<\\\\>")) {      buf.append("<\\\\>");      i+="<\\\\>".length();      continue;    }    if (c == '>' && s.substring(i).startsWith(">\\>")) {      buf.append(">>");      i+=">\\>".length();      continue;    }    if (c == '\\' && s.substring(i).startsWith("\\>>") && !s.substring(i).startsWith("\\>>>")) {      buf.append(">>");      i+="\\>>".length();      continue;    }    buf.append(c);    i++;  }  return buf.toString();}  }
class C{  public MatsimEventsReader(final EventsManager events){  this.events=events;}  }
class C{  public DefaultVirtualTerminal(){  this(new TerminalSize(80,24));}  }
class C{  @Override public void layerChanged(final MapLayerListEvent event){  if (layerTable != null) {    layerTable.repaint(event.getElement());  }  redrawBaseImage=true;  final int reason=event.getMapLayerEvent().getReason();  if (reason == MapLayerEvent.DATA_CHANGED) {    setFullExtent();  }  if (reason != MapLayerEvent.SELECTION_CHANGED) {    if (!isDisposed())     redraw();  }}  }
class C{  public void testTableAccept() throws ReplicatorException, InterruptedException {  ReplicateFilter rf=new ReplicateFilter();  rf.setTungstenSchema("tungsten_foo");  rf.setDo("foo.*,bar.test1,bar.wild*,bar.w?");  filterHelper.setFilter(rf);  verifyStmtAccept(filterHelper,0,"bar","insert into foo.test values(1)");  verifyStmtAccept(filterHelper,1,"foo","delete from test1 where id=1");  verifyStmtAccept(filterHelper,2,"bar","insert into wild1 values(1)");  verifyStmtAccept(filterHelper,3,"bar","update w2 set age=29");  verifyStmtIgnore(filterHelper,4,null,"create database foo");  verifyStmtIgnore(filterHelper,5,"bar","insert into test2 values(1)");  verifyStmtIgnore(filterHelper,6,"bar","create table will1 (id int)");  verifyStmtIgnore(filterHelper,7,"bar","delete from w22");  filterHelper.done();}  }
class C{  public SqeNotification(String type,Object source,long sequenceNumber,long timeStamp){  super(type,source,sequenceNumber,timeStamp);}  }
class C{  void enableButtons(){  boolean enable=true;  confirmPanel.getOKButton().setEnabled(true);  if (hasHistory())   confirmPanel.getHistoryButton().setEnabled(enable);  if (hasZoom())   confirmPanel.getZoomButton().setEnabled(enable);}  }
class C{  public static LogMessage read(final DataInputStream inputStream) throws IOException {  LogMessage entry=new LogMessage();  int svclen=inputStream.read();  if (svclen > 0) {    byte[] svcArr=new byte[svclen];    inputStream.readFully(svcArr);    entry.setService(svcArr);  }  int fnameOffset=inputStream.readShort();  int fnameLen=inputStream.readShort();  entry.setFileName(fnameOffset,fnameLen);  int tnameOffset=inputStream.readShort();  int tnameLen=inputStream.readShort();  entry.setThreadName(tnameOffset,tnameLen);  entry.setLevel(inputStream.read());  int lineNoOffset=inputStream.readShort();  int lineNoLen=inputStream.read();  entry.setLineNumber(lineNoOffset,lineNoLen);  entry.setTime(inputStream.readLong());  int timeOffset=inputStream.readShort();  int timeLen=inputStream.read();  entry.setTimeBytes(timeOffset,timeLen);  entry.setLogOffset(inputStream.readShort());  int msglen=inputStream.readInt();  if (msglen > 0) {    byte[] msgArr=new byte[msglen];    inputStream.readFully(msgArr);    entry.setFirstLine(msgArr);  }  return entry;}  }
class C{  public void focusGained(FocusEvent e){  if (m_combo == null || m_combo.getEditor() == null)   return;  if ((e.getSource() != m_combo && e.getSource() != m_combo.getEditor().getEditorComponent()) || e.isTemporary() || m_haveFocus|| m_lookup == null)   return;  if (m_lookup.isValidated() && m_lookup.isLoaded()) {    m_haveFocus=true;    return;  }  m_haveFocus=true;  m_settingFocus=true;  Object obj=m_lookup.getSelectedItem();  log.config(m_columnName + " - Start    Count=" + m_combo.getItemCount()+ ", Selected="+ obj);  boolean popupVisible=m_combo.isPopupVisible();  m_lookup.fillComboBox(isMandatory(),true,true,false);  if (popupVisible) {    m_combo.hidePopup();    m_combo.showPopup();  }  log.config(m_columnName + " - Update   Count=" + m_combo.getItemCount()+ ", Selected="+ m_lookup.getSelectedItem());  m_lookup.setSelectedItem(obj);  log.config(m_columnName + " - Selected Count=" + m_combo.getItemCount()+ ", Selected="+ m_lookup.getSelectedItem());  m_settingFocus=false;}  }
class C{  public void forgetRenderedImage(){  plotnum=-1;  plot=null;}  }
class C{  public Request send(){  validateBeforeSending();  if (CoAP.COAP_SECURE_URI_SCHEME.equals(getScheme())) {    EndpointManager.getEndpointManager().getDefaultSecureEndpoint().sendRequest(this);  } else {    EndpointManager.getEndpointManager().getDefaultEndpoint().sendRequest(this);  }  return this;}  }
class C{  private static void log(int logLevel,String tag,String msg){switch (logLevel) {case Log.DEBUG:    if (debugLoggingEnabled) {      Log.d(tag,msg);    }  break;case Log.ERROR:Log.e(tag,msg);break;default :break;}}  }
class C{  public void connect(String eventSourceUrl) throws IOException {  LOG.entering(CLASS_NAME,"connect",eventSourceUrl);  _getDelegate().connect(eventSourceUrl);}  }
class C{  public byte[] toRecordBytes(){  if (getNumUserRecords() == 0) {    return new byte[0];  }  byte[] messageBody=this.aggregatedRecordBuilder.build().toByteArray();  this.md5.reset();  byte[] messageDigest=this.md5.digest(messageBody);  ByteArrayOutputStream baos=new ByteArrayOutputStream(getSizeBytes());  baos.write(AGGREGATED_RECORD_MAGIC,0,AGGREGATED_RECORD_MAGIC.length);  baos.write(messageBody,0,messageBody.length);  baos.write(messageDigest,0,messageDigest.length);  return baos.toByteArray();}  }
class C{  @Override public Result decode(BinaryBitmap image,Map<DecodeHintType,?> hints) throws NotFoundException {  setHints(hints);  return decodeInternal(image);}  }
class C{  public static boolean exists(String test){  if (test == null)   return false;  return test.length() > 0;}  }
class C{  public static void fill(long[] a,int fromIndex,int toIndex,long val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  private static Method findOverloadedMethod(Class baseClass,String methodName,Class[] types,boolean publicOnly){  if (Interpreter.DEBUG)   Interpreter.debug("Searching for method: " + StringUtil.methodString(methodName,types) + " in '"+ baseClass.getName()+ "'");  Method[] methods=getCandidateMethods(baseClass,methodName,types.length,publicOnly);  if (Interpreter.DEBUG)   Interpreter.debug("Looking for most specific method: " + methodName);  Method method=findMostSpecificMethod(types,methods);  return method;}  }
class C{  static final LinkedVertexHull mergeHulls(LinkedVertexHull left,LinkedVertexHull right){  LinkedVertexHull hull=new LinkedVertexHull();  hull.leftMost=left.leftMost;  hull.rightMost=right.rightMost;  LinkedVertex lu=left.rightMost;  LinkedVertex ru=right.leftMost;  Vector2 upper=lu.point.to(ru.point);  for (int i=0; i < left.size * right.size; i++) {    Vector2 lv=lu.point.to(lu.next.point);    Vector2 rv=ru.point.to(ru.prev.point);    double crossR=rv.cross(upper);    double crossL=upper.getNegative().cross(lv);    if (crossR > 0.0 && crossL > 0.0) {      break;    }    if (crossR <= 0.0) {      ru=ru.prev;    }    if (crossL <= 0.0) {      lu=lu.next;    }    upper=lu.point.to(ru.point);  }  LinkedVertex ll=left.rightMost;  LinkedVertex rl=right.leftMost;  Vector2 lower=ll.point.to(rl.point);  for (int i=0; i < left.size * right.size; i++) {    Vector2 lv=ll.point.to(ll.prev.point);    Vector2 rv=rl.point.to(rl.next.point);    double crossR=lower.cross(rv);    double crossL=lv.cross(lower.getNegative());    if (crossR > 0.0 && crossL > 0.0) {      break;    }    if (crossR <= 0.0) {      rl=rl.next;    }    if (crossL <= 0.0) {      ll=ll.prev;    }    lower=ll.point.to(rl.point);  }  lu.prev=ru;  ru.next=lu;  ll.next=rl;  rl.prev=ll;  hull.root=lu;  LinkedVertex v0=hull.root;  LinkedVertex v=v0;  int size=0;  do {    size++;    v=v.next;  } while (v != v0);  hull.size=size;  return hull;}  }
class C{  public CloudObjectConsole(){  initComponents();}  }
class C{  public MessageDialog(Fragment fragment){  super(fragment,DEFAULT_REQUEST_CODE);  ShareInternalUtility.registerStaticShareCallback(DEFAULT_REQUEST_CODE);}  }
class C{  public VmPipeConnector(){  this(null);}  }
class C{  public synchronized CloseableReference<Bitmap> convertToBitmapReference(){  Preconditions.checkNotNull(mBitmapReference,"Cannot convert a closed static bitmap");  return detachBitmapReference();}  }
class C{  public DTN2Reporter(){  super.init();  DTN2Manager.setReporter(this);}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public LDAPCertStore(CertStoreParameters params) throws InvalidAlgorithmParameterException {  super(params);  if (!(params instanceof LDAPCertStoreParameters))   throw new InvalidAlgorithmParameterException("parameters must be LDAPCertStoreParameters");  LDAPCertStoreParameters lparams=(LDAPCertStoreParameters)params;  createInitialDirContext(lparams.getServerName(),lparams.getPort());  try {    cf=CertificateFactory.getInstance("X.509");  } catch (  CertificateException e) {    throw new InvalidAlgorithmParameterException("unable to create CertificateFactory for X.509");  }  if (LIFETIME == 0) {    valueCache=Cache.newNullCache();  } else   if (LIFETIME < 0) {    valueCache=Cache.newSoftMemoryCache(DEFAULT_CACHE_SIZE);  } else {    valueCache=Cache.newSoftMemoryCache(DEFAULT_CACHE_SIZE,LIFETIME);  }}  }
class C{  public PlatformUserHistory(PlatformUser c){  super(c);  setOrganizationObjKey(c.getOrganization().getKey());}  }
class C{  public static JdbcConnectionPool create(ConnectionPoolDataSource dataSource){  return new JdbcConnectionPool(dataSource);}  }
class C{  public synchronized void logAddOrRemoveRow(Session session,int tableId,Row row,boolean add){  if (logMode != LOG_MODE_OFF) {    if (!recoveryRunning) {      log.logAddOrRemoveRow(session,tableId,row,add);    }  }}  }
class C{  public void printString(String v,int offset,int length) throws IOException {  for (int i=0; i < length; i++) {    char ch=v.charAt(i + offset);    if (ch == '<') {      os.write('&');      os.write('#');      os.write('6');      os.write('0');      os.write(';');    } else     if (ch == '&') {      os.write('&');      os.write('#');      os.write('3');      os.write('8');      os.write(';');    } else     if (ch < 0x80)     os.write(ch); else     if (ch < 0x800) {      os.write(0xc0 + ((ch >> 6) & 0x1f));      os.write(0x80 + (ch & 0x3f));    } else {      os.write(0xe0 + ((ch >> 12) & 0xf));      os.write(0x80 + ((ch >> 6) & 0x3f));      os.write(0x80 + (ch & 0x3f));    }  }}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  static void removeChannelIfDisconnected(org.jboss.netty.channel.Channel ch){  if (ch != null && !ch.isConnected()) {    CHANNEL_MAP.remove(ch);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:00.252 -0500",hash_original_method="501AA426592E66DB320F694568AF73E3",hash_generated_method="8C779D41B6773A6B4924C7A9509A8B3E") public AuthenticationInfo(){  super(NAME);  parameters.setSeparator(COMMA);}  }
class C{  private void scoreTrackResults(Collection<Track> tracks,SearchQuery query,Collection<ScoredResult> output){  for (  Track track : tracks) {    double score=scoreTrackResult(query,track);    output.add(new ScoredResult(track,score));  }}  }
class C{  private void labelIsolatedNode(Node n,int targetIndex){  int loc=ptLocator.locate(n.getCoordinate(),arg[targetIndex].getGeometry());  n.getLabel().setAllLocations(targetIndex,loc);}  }
class C{  public void add_apps(@NonNull List<InstalledApp> to_add){  add_apps(to_add,true);}  }
class C{  public DateTimeValueImpl(int year,int month,int day,int hour,int minute,int second){  super(year,month,day);  this.hour=hour;  this.minute=minute;  this.second=second;}  }
class C{  public synchronized void rollback() throws ReplicatorException {  assertWritable();}  }
class C{  public StrBuilder deleteCharAt(int index){  if (index < 0 || index >= size) {    throw new StringIndexOutOfBoundsException(index);  }  deleteImpl(index,index + 1,1);  return this;}  }
class C{  public PullParams withImage(@NotNull String image){  requireNonNull(image);  this.image=image;  return this;}  }
class C{  public SignatureVisitor visitInterfaceBound(){  return this;}  }
class C{  public DrawerBuilder withStickyHeader(@NonNull View stickyHeader){  this.mStickyHeaderView=stickyHeader;  return this;}  }
class C{  private ClientSession newSession(){  ClientSession session=new ClientSession(transport.client(),selector,ioContext,connectionStrategy);  if (changeListener != null)   changeListener.close();  changeListener=session.onStateChange(null);  eventListeners.forEach(null);  return session;}  }
class C{  Item newFloat(final float value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(FLOAT).putInt(key.intVal);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  private boolean isJsFileIsInScope(IFile file,ITsconfigBuildPath tsContainer) throws CoreException {  if (TypeScriptResourceUtil.isEmittedFile(file)) {    return false;  }  IFile jsconfigFile=JsonConfigResourcesManager.getInstance().findJsconfigFile(file);  if (jsconfigFile != null) {    return true;  }  IDETsconfigJson tsconfig=tsContainer.getTsconfig();  if (tsconfig != null && tsconfig.getCompilerOptions() != null && tsconfig.getCompilerOptions().isAllowJs() != null && tsconfig.getCompilerOptions().isAllowJs()) {    return true;  }  return false;}  }
class C{  public static void installProblemMarkers(Vector<TLAMarkerInformationHolder> detectedErrors,IProgressMonitor monitor){  if (detectedErrors == null || detectedErrors.isEmpty()) {    return;  }  for (int i=0; i < detectedErrors.size(); i++) {    TLAMarkerInformationHolder holder=(TLAMarkerInformationHolder)detectedErrors.get(i);    installProblemMarker(holder.resource,holder.moduleName,holder.severityError,holder.coordinates,holder.message,monitor,holder.type);  }}  }
class C{  protected void update(){  Attr attr=element.getAttributeNodeNS(namespaceURI,localName);  if (attr == null) {    baseVal=defaultValue;  } else {    baseVal=attr.getValue().equals("true");  }  valid=true;}  }
class C{  public static String renderProgram(Block program){  StringBuilder sb=new StringBuilder();  TokenConsumer tc=program.makeRenderer(sb,null);  program.renderBody(new RenderContext(tc));  tc.noMoreTokens();  return sb.toString();}  }
class C{  protected int computeRelevance(CompletionProposal proposal){  final int baseRelevance=proposal.getRelevance() * 16;switch (proposal.getKind()) {case CompletionProposal.PACKAGE_REF:    return baseRelevance + 0;case CompletionProposal.LABEL_REF:  return baseRelevance + 1;case CompletionProposal.KEYWORD:return baseRelevance + 2;case CompletionProposal.TYPE_REF:case CompletionProposal.ANONYMOUS_CLASS_DECLARATION:case CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION:return baseRelevance + 3;case CompletionProposal.METHOD_REF:case CompletionProposal.CONSTRUCTOR_INVOCATION:case CompletionProposal.METHOD_NAME_REFERENCE:case CompletionProposal.METHOD_DECLARATION:case CompletionProposal.ANNOTATION_ATTRIBUTE_REF:return baseRelevance + 4;case CompletionProposal.POTENTIAL_METHOD_DECLARATION:return baseRelevance + 4;case CompletionProposal.FIELD_REF:return baseRelevance + 5;case CompletionProposal.LOCAL_VARIABLE_REF:case CompletionProposal.VARIABLE_DECLARATION:return baseRelevance + 6;default :return baseRelevance;}}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:10.261 -0500",hash_original_method="7AFE6EE6D4C15EE2C452A64798BB4D96",hash_generated_method="F882DF3E0B42A2F33ACCDD3DBBCA5BAB") public void onSensorChanged(SensorEvent event){  assert (event.values.length == 3);  assert WebViewCore.THREAD_NAME.equals(Thread.currentThread().getName());  assert (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER);  if (!mIsRunning) {    return;  }  boolean firstData=mLastAcceleration == null;  mLastAcceleration=event.values;  if (firstData) {    startSendingUpdates();  }}  }
class C{  static Class lookUpFactoryClass(String factoryId) throws ConfigurationError {  return lookUpFactoryClass(factoryId,null,null);}  }
class C{  public void persist(SequenceLoadListener sequenceLoadListener,Map<String,SignatureLibraryRelease> analysisJobMap){  lookupProteins(analysisJobMap);  persistBatch();  final Long bottomNewProteinId=bottomProteinId;  final Long topNewProteinId=topProteinId;  resetBounds();  for (  Protein precalculatedProtein : precalculatedProteins) {    addProteinToBatch(precalculatedProtein);  }  persistBatch();  final Long bottomPrecalcProteinId=bottomProteinId;  final Long topPrecalcProteinId=topProteinId;  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Protein ID ranges:");    LOGGER.debug("Bottom new protein: " + bottomNewProteinId);    LOGGER.debug("Top new protein:" + topNewProteinId);    LOGGER.debug("Bottom precalc protein: " + bottomPrecalcProteinId);    LOGGER.debug("Top precalc protein: " + topPrecalcProteinId);  }  sequenceLoadListener.sequencesLoaded(bottomNewProteinId,topNewProteinId,bottomPrecalcProteinId,topPrecalcProteinId);  resetBounds();}  }
class C{  public boolean isItemEscaped(){  return (Boolean)getStateHelper().eval(PropertyKeys.itemEscaped,true);}  }
class C{  public static void readStream(InputStream is) throws IOException {  byte[] inputBuffer=new byte[256];  while (is.read(inputBuffer) != -1) {  }  is.close();}  }
class C{  private static Parameter buildParameter(final Map<String,GenericsType> genericFromReceiver,final Map<String,GenericsType> placeholdersFromContext,final Parameter methodParameter,final ClassNode paramType){  if (genericFromReceiver.isEmpty() && (placeholdersFromContext == null || placeholdersFromContext.isEmpty())) {    return methodParameter;  }  if (paramType.isArray()) {    ClassNode componentType=paramType.getComponentType();    Parameter subMethodParameter=new Parameter(componentType,methodParameter.getName());    Parameter component=buildParameter(genericFromReceiver,placeholdersFromContext,subMethodParameter,componentType);    return new Parameter(component.getType().makeArray(),component.getName());  }  ClassNode resolved=resolveClassNodeGenerics(genericFromReceiver,placeholdersFromContext,paramType);  return new Parameter(resolved,methodParameter.getName());}  }
class C{  public static void writeByteArrayToFile(File file,byte[] data) throws IOException {  writeByteArrayToFile(file,data,false);}  }
class C{  public static int cs_droptol(Scs A,float tol){  return (Scs_fkeep.cs_fkeep(A,new Cs_tol(),tol));}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public void clearFontChecksum(){  this.fontChecksumSet=false;}  }
class C{  public void list(){  System.out.println(toString());  if (m_columnSet != null)   m_columnSet.list();  System.out.println();  if (m_lineSet != null)   m_lineSet.list();}  }
class C{  @Override public boolean execute(int edMode,byte[] inputText,int offset,int len){  int needBytesForResult=-1;  String KEY_ALGORITHM="AES";  try {    if (Cipher.ENCRYPT_MODE == edMode) {      ci.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(key.getEncoded(),KEY_ALGORITHM));      iv=ci.getParameters().getParameterSpec(IvParameterSpec.class).getIV();    } else {      ci.init(Cipher.DECRYPT_MODE,new SecretKeySpec(key.getEncoded(),KEY_ALGORITHM),new IvParameterSpec(iv));    }    byte[] outputText=ci.doFinal(inputText,offset,len);    int myoff=offset / 2;    int off=ci.update(inputText,offset,len,inputText,myoff);    ci.doFinal(inputText,myoff + off);    return equalsBlock(inputText,myoff,outputText,0,outputText.length);  } catch (  Exception ex) {    out.println("Catch unexpected exception within " + algo + " "+ edMode+ ": "+ ex.getMessage()+ ". getOutputSize()"+ "returned "+ needBytesForResult);    ex.printStackTrace(out);    return false;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String badString;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      badString=child.substringData(40,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  public void addSslPort(String newSslPort){  String newSslPorts=StringUtils.addToList(newSslPort,getSslPorts(),10);  setSslPorts(newSslPorts);}  }
class C{  public void primitivePaint(Graphics2D g2d){  if (count == 0) {    return;  }  Thread currentThread=Thread.currentThread();  for (int i=0; i < count; ++i) {    if (HaltingThread.hasBeenHalted(currentThread))     return;    GraphicsNode node=children[i];    if (node == null) {      continue;    }    node.paint(g2d);  }}  }
class C{  public void openPopupMenu(MenuLockLayer menuLockLayer){  int x=element.getAbsoluteLeft();  int y=0;  popupMenu=new PopupMenu(group,actionManager,place,presentationFactory,menuLockLayer,this,keyBindingAgent,"topmenu/" + title);  menuLockLayer.add(popupMenu,x,y);}  }
class C{  void cancelDisplayTaskFor(ImageAware imageAware){  cacheKeysForImageAwares.remove(imageAware.getId());}  }
class C{  public Builder addFileComment(String fileComment){  this.fileComment=fileComment;  return this;}  }
class C{  public void endDocument() throws org.xml.sax.SAXException {}  }
class C{  protected void addShingledPhraseQueries(final BooleanQuery.Builder mainQuery,final List<Clause> clauses,final Collection<FieldParams> fields,int shingleSize,final float tiebreaker,final int slop) throws SyntaxError {  if (null == fields || fields.isEmpty() || null == clauses || clauses.size() < shingleSize)   return;  if (0 == shingleSize)   shingleSize=clauses.size();  final int lastClauseIndex=shingleSize - 1;  StringBuilder userPhraseQuery=new StringBuilder();  for (int i=0; i < clauses.size() - lastClauseIndex; i++) {    userPhraseQuery.append('"');    for (int j=0; j <= lastClauseIndex; j++) {      userPhraseQuery.append(clauses.get(i + j).val);      userPhraseQuery.append(' ');    }    userPhraseQuery.append('"');    userPhraseQuery.append(' ');  }  ExtendedSolrQueryParser pp=createEdismaxQueryParser(this,IMPOSSIBLE_FIELD_NAME);  pp.addAlias(IMPOSSIBLE_FIELD_NAME,tiebreaker,getFieldBoosts(fields));  pp.setPhraseSlop(slop);  pp.setRemoveStopFilter(true);  pp.makeDismax=true;  pp.minClauseSize=2;  Query phrase=pp.parse(userPhraseQuery.toString());  if (phrase != null) {    mainQuery.add(phrase,BooleanClause.Occur.SHOULD);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechildinvalidnodetype.class,args);}  }
class C{  public void deleteArc(String sParent,String sChild) throws Exception {  int nParent=getNode(sParent);  int nChild=getNode(sChild);  deleteArc(nParent,nChild);}  }
class C{  private boolean doBasicMirrorValidation(FileShare fs,VirtualPool currentVpool,StringBuffer notSuppReasonBuff){  if (!VirtualPool.vPoolSpecifiesFileReplication(currentVpool)) {    notSuppReasonBuff.append(String.format("File replication is not enabled in virtual pool - %s" + " of the requested file system -%s ",currentVpool.getLabel(),fs.getLabel()));    _log.info(notSuppReasonBuff.toString());    return false;  }  if (fs.getPersonality() != null && fs.getPersonality().equalsIgnoreCase(PersonalityTypes.TARGET.name())) {    notSuppReasonBuff.append(String.format("File system - %s given in request is an active Target file system.",fs.getLabel()));    _log.info(notSuppReasonBuff.toString());    return false;  }  return true;}  }
class C{  public ReplDBMSHeader lastCommitSeqno() throws ReplicatorException {  String fname=commitSeqno.getPrefix() + "." + taskId;  return commitSeqno.retrieve(fname);}  }
class C{  private void prepareTechnicalProduct(TechnicalProduct tProd) throws NonUniqueBusinessKeyException {  ParameterDefinition pd=TechnicalProducts.addParameterDefinition(ParameterValueType.INTEGER,"intParam",ParameterType.SERVICE_PARAMETER,tProd,mgr,null,null,true);  ParameterOption option=new ParameterOption();  option.setOptionId("OPT");  option.setParameterDefinition(pd);  List<ParameterOption> list=new ArrayList<>();  list.add(option);  pd.setOptionList(list);  mgr.persist(option);  Event event=TechnicalProducts.addEvent("eventId",EventType.SERVICE_EVENT,tProd,mgr);  mgr.persist(event);  LocalizedResource lr=new LocalizedResource();  lr.setLocale("en");  lr.setObjectKey(event.getKey());  lr.setObjectType(LocalizedObjectTypes.EVENT_DESC);  lr.setValue("en_event");  mgr.persist(lr);  LocalizedResource lr2=new LocalizedResource();  lr2.setLocale("de");  lr2.setObjectKey(event.getKey());  lr2.setObjectType(LocalizedObjectTypes.EVENT_DESC);  lr2.setValue("de_event");  mgr.persist(lr2);}  }
class C{  private boolean isValidPath(String path){  if (path == null) {    return false;  }  if (!PATH_PATTERN.matcher(path).matches()) {    return false;  }  int slash2Count=countToken("//",path);  int slashCount=countToken("/",path);  int dot2Count=countToken("..",path);  return (dot2Count <= 0) || ((slashCount - slash2Count - 1) > dot2Count);}  }
class C{  public Partial addToCopy(int valueToAdd){  int[] newValues=iPartial.getValues();  newValues=getField().add(iPartial,iFieldIndex,newValues,valueToAdd);  return new Partial(iPartial,newValues);}  }
class C{  public static void appendZeroPadded(StringBuilder buff,int length,long positiveValue){  if (length == 2) {    if (positiveValue < 10) {      buff.append('0');    }    buff.append(positiveValue);  } else {    String s=Long.toString(positiveValue);    length-=s.length();    while (length > 0) {      buff.append('0');      length--;    }    buff.append(s);  }}  }
class C{  public static void document(ClassDoc c,PrintWriter pw) throws IOException {  pw.println(c.qualifiedName());{    String comment=c.commentText();    if (comment != null && !comment.equals("")) {      pw.println("");      indent(comment,4,pw);      pw.println("");    }  }  MethodDoc[] methods=getTestMethods(c);  for (int i=0; i < methods.length; i++) {    MethodDoc method=methods[i];    pw.print("  ");    pw.println(method.name());    String comment=method.commentText();    if (comment != null && !comment.equals("")) {      pw.println("");      indent(comment,6,pw);      pw.println("");    }  }  pw.println("");}  }
class C{  public DocFlavor(String mimeType,String className){  if (className == null) {    throw new NullPointerException();  }  myMimeType=new MimeType(mimeType);  myClassName=className;}  }
class C{  public void updateSpatialIndex(){  if (needToRebuildIndex) {    spatialIndex=new Quadtree();    for (int i=0; i < geometries.size(); i++) {      spatialIndex.insert(((MasonGeometry)geometries.get(i)).geometry.getEnvelopeInternal(),geometries.get(i));    }    needToRebuildIndex=false;  }}  }
class C{  public static Intent buildLaunchIntent(Context context,String title,ArrayList<VideoType.Cast> castArrayList){  return new Intent(context,AllCastActivity.class).putExtra(EXTRA_TITLE,title).putParcelableArrayListExtra(EXTRA_CAST_LIST,castArrayList);}  }
class C{  public MalformedChunkCodingException(final String message){  super(message);}  }
class C{  public int read() throws IOException {  int c=in.read();  if (c == -1)   return -1;  if ((c & ~0xff) != 0) {    System.out.println("MD5InputStream.read() got character with (c & ~0xff) != 0)!");  } else {    md5.Update(c);  }  return c;}  }
class C{  @SuppressWarnings("unchecked") @Test public void removeLabelTypeAction() throws BusinessException {  AbstractStorageLabelType<Object> labelType=mock(AbstractStorageLabelType.class);  when(storageService.getLabelSuggestions(labelType)).thenReturn(Collections.<AbstractStorageLabel<Object>>emptyList());  removeLabelManagementAction=new RemoveLabelManagementAction(labelType,false);  removeLabelManagementAction.execute(storageService);  verify(storageService,times(1)).getLabelSuggestions(labelType);  verify(storageService,times(1)).removeLabelType(labelType);  verify(storageService,times(1)).removeLabelsFromCmr(Collections.<AbstractStorageLabel<?>>emptyList(),false);  verifyNoMoreInteractions(storageService);  removeLabelManagementAction.setRemoveFromStorageAlso(true);  removeLabelManagementAction.execute(storageService);  verify(storageService,times(1)).removeLabelsFromCmr(Collections.<AbstractStorageLabel<?>>emptyList(),true);}  }
class C{  public void hyperlinkUpdate(HyperlinkEvent e){  if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {    linkActivated(e.getURL());  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String q=(String)stack.pop();  Agent a=(Agent)stack.pop();  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Carny.getInstance().setRecordingQuality(a,q);    Scheduler.getInstance().kick(false);  }  return null;}  }
class C{  public Mapping next(){  if (iterator > top) {    return null;  } else {    return stack[iterator++];  }}  }
class C{  public static boolean extractSystem(File outputFolder,LoggerPan logger){  AdbUtils.killServer();  AdbUtils.startServer();  String[] remoteFiles={"/app","/priv-app","/framework","/build.prop","/vendor","/odex.app.sqsh","/odex.priv-app.sqsh","/odex.framework.sqsh","/vendor","/plugin","/data-app"};  int[] exitStatus=new int[remoteFiles.length];  Runtime rt=Runtime.getRuntime();  for (int i=0; i < remoteFiles.length; i++) {    String remoteFile=remoteFiles[i];    String localPath=outputFolder.getAbsolutePath().replace('\\','/');    String[] cmd={S.getAdbBin(),"pull","/system" + remoteFile,localPath + remoteFile};    exitStatus[i]=-999;    try {      Process p=rt.exec(cmd);      AdbStreamReader stdReader=new AdbStreamReader(p.getInputStream(),logger,R.getString(S.LOG_INFO));      AdbStreamReader errReader=new AdbStreamReader(p.getErrorStream(),logger,R.getString(S.LOG_INFO));      stdReader.start();      errReader.start();      exitStatus[i]=p.waitFor();    } catch (    Exception e) {      e.printStackTrace();    }  }  boolean success=exitStatus[2] == 0 && exitStatus[3] == 0;  return success;}  }
class C{  public JaasConfiguration(String clientPrincipal,File clientKeytab,String serverPrincipal,File serverKeytab){  Map<String,String> clientOptions=new HashMap();  clientOptions.put("principal",clientPrincipal);  clientOptions.put("keyTab",clientKeytab.getAbsolutePath());  clientOptions.put("useKeyTab","true");  clientOptions.put("storeKey","true");  clientOptions.put("useTicketCache","false");  clientOptions.put("refreshKrb5Config","true");  String jaasProp=System.getProperty("solr.jaas.debug");  if (jaasProp != null && "true".equalsIgnoreCase(jaasProp)) {    clientOptions.put("debug","true");  }  clientEntry=new AppConfigurationEntry[]{new AppConfigurationEntry(getKrb5LoginModuleName(),AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,clientOptions)};  if (serverPrincipal != null && serverKeytab != null) {    Map<String,String> serverOptions=new HashMap(clientOptions);    serverOptions.put("principal",serverPrincipal);    serverOptions.put("keytab",serverKeytab.getAbsolutePath());    serverEntry=new AppConfigurationEntry[]{new AppConfigurationEntry(getKrb5LoginModuleName(),AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,serverOptions)};  }}  }
class C{  public void testNextInt(){  int f=ThreadLocalRandom.current().nextInt();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextInt() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public static void validatePositiveNumber(long fieldValue,String fieldName){  if (fieldValue <= 0) {    logAndThrow(String.format("%s should be a positive number: %d",fieldName,fieldValue));  }}  }
class C{  public boolean isFileLevelAnnotation(){  return myIsFileLevelAnnotation;}  }
class C{  public BillReceiptInfoImpl(final ReceiptHeader receiptHeader,final String additionalInfo,final ChartOfAccountsHibernateDAO chartOfAccountsHibernateDAO,final PersistenceService persistenceService){  this.receiptHeader=receiptHeader;  receiptURL=CollectionConstants.RECEIPT_VIEW_SOURCEPATH + receiptHeader.getId();  this.additionalInfo=additionalInfo;  for (  final ReceiptDetail receiptDetail : receiptHeader.getReceiptDetails())   accountDetails.add(new ReceiptAccountInfoImpl(receiptDetail,chartOfAccountsHibernateDAO,persistenceService));  for (  final InstrumentHeader instrumentHeader : receiptHeader.getReceiptInstrument())   instrumentDetails.add(new ReceiptInstrumentInfoImpl(instrumentHeader));  final String receiptStatus=receiptHeader.getStatus().getCode();  if (CollectionConstants.RECEIPT_STATUS_CODE_INSTRUMENT_BOUNCED.equals(receiptStatus)) {    event=BillingIntegrationService.EVENT_INSTRUMENT_BOUNCED;    findBouncedInstrument();  } else   if (CollectionConstants.RECEIPT_STATUS_CODE_TO_BE_SUBMITTED.equals(receiptStatus) || CollectionConstants.RECEIPT_STATUS_CODE_APPROVED.equals(receiptStatus) || CollectionConstants.RECEIPT_STATUS_CODE_SUBMITTED.equals(receiptStatus))   event=BillingIntegrationService.EVENT_RECEIPT_CREATED; else   if (CollectionConstants.RECEIPT_STATUS_CODE_CANCELLED.equals(receiptStatus))   event=BillingIntegrationService.EVENT_RECEIPT_CANCELLED;}  }
class C{  void visitSubroutine(final Label JSR,final long id,final int nbSubroutines){  Label stack=this;  while (stack != null) {    Label l=stack;    stack=l.next;    l.next=null;    if (JSR != null) {      if ((l.status & VISITED2) != 0) {        continue;      }      l.status|=VISITED2;      if ((l.status & RET) != 0) {        if (!l.inSameSubroutine(JSR)) {          Edge e=new Edge();          e.info=l.inputStackTop;          e.successor=JSR.successors.successor;          e.next=l.successors;          l.successors=e;        }      }    } else {      if (l.inSubroutine(id)) {        continue;      }      l.addToSubroutine(id,nbSubroutines);    }    Edge e=l.successors;    while (e != null) {      if ((l.status & Label.JSR) == 0 || e != l.successors.next) {        if (e.successor.next == null) {          e.successor.next=stack;          stack=e.successor;        }      }      e=e.next;    }  }}  }
class C{  public static boolean varResolveTreeWalkUp(@NotNull final PsiScopeProcessor processor,@NotNull final BashVar entrance,@Nullable final PsiElement maxScope,@NotNull final ResolveState state){  PsiElement prevParent=entrance;  PsiElement scope=entrance;  boolean hasResult=false;  while (scope != null) {    hasResult|=!scope.processDeclarations(processor,state,prevParent,entrance);    if (scope == maxScope) {      break;    }    prevParent=scope;    scope=PsiTreeUtil.getStubOrPsiParent(prevParent);  }  return !hasResult;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static boolean overlaps(TextEdit edit1,TextEdit edit2){  if (edit1 instanceof MultiTextEdit && edit2 instanceof MultiTextEdit) {    MultiTextEdit multiTextEdit1=(MultiTextEdit)edit1;    if (!multiTextEdit1.hasChildren())     return false;    MultiTextEdit multiTextEdit2=(MultiTextEdit)edit2;    if (!multiTextEdit2.hasChildren())     return false;    TextEdit[] children1=multiTextEdit1.getChildren();    TextEdit[] children2=multiTextEdit2.getChildren();    int i1=0;    int i2=0;    while (i1 < children1.length && i2 < children2.length) {      while (children1[i1].getExclusiveEnd() < children2[i2].getOffset()) {        i1++;        if (i1 >= children1.length)         return false;      }      while (children2[i2].getExclusiveEnd() < children1[i1].getOffset()) {        i2++;        if (i2 >= children2.length)         return false;      }      if (children1[i1].getExclusiveEnd() < children2[i2].getOffset())       continue;      if (overlaps(children1[i1],children2[i2]))       return true;      int mergeEnd=Math.max(children1[i1].getExclusiveEnd(),children2[i2].getExclusiveEnd());      i1++;      i2++;      if (i1 < children1.length && children1[i1].getOffset() < mergeEnd) {        return true;      }      if (i2 < children2.length && children2[i2].getOffset() < mergeEnd) {        return true;      }    }    return false;  } else   if (edit1 instanceof MultiTextEdit) {    MultiTextEdit multiTextEdit1=(MultiTextEdit)edit1;    if (!multiTextEdit1.hasChildren())     return false;    TextEdit[] children=multiTextEdit1.getChildren();    int i=0;    while (children[i].getExclusiveEnd() < edit2.getOffset()) {      i++;      if (i >= children.length)       return false;    }    if (overlaps(children[i],edit2))     return true;    return false;  } else   if (edit2 instanceof MultiTextEdit) {    MultiTextEdit multiTextEdit2=(MultiTextEdit)edit2;    if (!multiTextEdit2.hasChildren())     return false;    TextEdit[] children=multiTextEdit2.getChildren();    int i=0;    while (children[i].getExclusiveEnd() < edit1.getOffset()) {      i++;      if (i >= children.length)       return false;    }    if (overlaps(children[i],edit1))     return true;    return false;  } else {    int start1=edit1.getOffset();    int end1=start1 + edit1.getLength();    int start2=edit2.getOffset();    int end2=start2 + edit2.getLength();    if (start1 > end2)     return false;    if (start2 > end1)     return false;    return true;  }}  }
class C{  public static void runJavadoc(String[] javadocArgs){  if (com.sun.tools.javadoc.Main.execute(javadocArgs) != 0) {    throw new Error("Javadoc failed to execute");  }}  }
class C{  public Color average(Color color){  return rgbac((red() + color.red()) / 2,(green() + color.green()) / 2,(blue() + color.blue()) / 2,(alpha() + color.alpha()) / 2);}  }
class C{  void updateCellRangeByTableSelection(JTable contentTable){  int columnIndexStart=contentTable.getSelectedColumn();  int rowIndexStart=contentTable.getSelectedRow();  int columnIndexEnd=columnIndexStart + contentTable.getSelectedColumnCount() - 1;  int rowIndexEnd=rowIndexStart + contentTable.getSelectedRowCount() - 1;  setCellRangeSelection(new CellRangeSelection(columnIndexStart,rowIndexStart,columnIndexEnd,rowIndexEnd));}  }
class C{  public void mAssignmentCallback(MResourceAssignment assignment){  m_mAssignment=assignment;  if (m_createNew)   dispose(); else   displayCalendar();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:53.468 -0500",hash_original_method="A3047134DA2BBFDCD9EABEAC496A6A0D",hash_generated_method="F536D3834BA3A1966C0D2AEDA6B38E1F") public X500Principal(byte[] name){  if (name == null) {    throw new IllegalArgumentException("Name cannot be null");  }  try {    dn=(Name)Name.ASN1.decode(name);  } catch (  IOException e) {    throw incorrectInputEncoding(e);  }}  }
class C{  public void normalizeOutdir(){  if (outputDir != null)   return;  File destDir;  if (destinationDir != null) {    if (packageName == null) {      destDir=destinationDir;    } else {      String path=packageName.replace('.',File.separatorChar);      destDir=new File(destinationDir,path);    }  } else {    destDir=new File(inputFile.getParent());  }  setOutdir(destDir);}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  public BannerPattern(DyeColor color,BannerPatternType pattern){  this.color=color;  this.pattern=pattern;}  }
class C{  public void start() throws IOException {  Thread thread=new Thread(this);  thread.setName("TLSMessageProcessorThread");  thread.setPriority(Thread.MAX_PRIORITY);  thread.setDaemon(true);  this.sock=sipStack.getNetworkLayer().createSSLServerSocket(this.getPort(),0,this.getIpAddress());  ((SSLServerSocket)this.sock).setNeedClientAuth(false);  ((SSLServerSocket)this.sock).setUseClientMode(false);  ((SSLServerSocket)this.sock).setWantClientAuth(true);  String[] enabledCiphers=((SipStackImpl)sipStack).getEnabledCipherSuites();  ((SSLServerSocket)this.sock).setEnabledCipherSuites(enabledCiphers);  ((SSLServerSocket)this.sock).setWantClientAuth(true);  this.isRunning=true;  thread.start();}  }
class C{  private void stopStorageSystem(StorageSystem storageSystem) throws ControllerException {  if (!DiscoveredDataObject.Type.vplex.name().equals(storageSystem.getSystemType())) {    StorageController controller=getStorageController(storageSystem.getSystemType());    controller.disconnectStorage(storageSystem.getId());  }}  }
class C{  public void testCrazyPrefixes2() throws Exception {  Query expected=new PrefixQuery(new Term("field","st*ar\\*"));  assertEquals(expected,parse("st*ar\\\\**"));}  }
class C{  public static ActionBarBackground fadeOut(AppCompatActivity activity){  ActionBarBackground abColor=new ActionBarBackground(activity);  abColor.fadeOut();  return abColor;}  }
class C{  public void testCommonPrefix(){  String returned=m_Trie.getCommonPrefix();  assertEquals("Common prefixes differ",0,returned.length());  String expected="this is a";  Trie t=buildTrie(new String[]{m_Data[0],m_Data[1]});  returned=t.getCommonPrefix();  assertEquals("Common prefixes differ",expected.length(),returned.length());}  }
class C{  public static boolean equals(short[] array1,short[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public static void authenticateWithoutRestart(AuthenticationListener listener){  ReprintInternal.INSTANCE.authenticate(listener,false,0);}  }
class C{  public boolean execute(String action,String rawArgs,CallbackContext callbackContext) throws JSONException {  JSONArray args=new JSONArray(rawArgs);  return execute(action,args,callbackContext);}  }
class C{  @Bean public ExecutorService defaultExecutor(){  return executor;}  }
class C{  public LOTZ(int numberOfBits){  super(1,2);  this.numberOfBits=numberOfBits;}  }
class C{  public static GridPeerDeployAware detectPeerDeployAware(GridPeerDeployAware obj){  GridPeerDeployAware p=nestedPeerDeployAware(obj,true,new GridLeanIdentitySet<>());  return p != null ? p : peerDeployAware(obj.getClass());}  }
class C{  public static <F,S,T>Triple<F,S,T> of(final F first,final S second,final T third){  return new Triple<>(first,second,third);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return ((Agent)stack.pop()).getAutoConvertFormat();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Show s=getShow(stack);  return (s == null) ? "" : s.getParentalRating();}  }
class C{  public ScrolledComposite createScrolledComposite(Composite parent,int style){  ScrolledComposite scrolledComposite=new ScrolledComposite(parent,style);  adapt(scrolledComposite);  scrolledComposite.getHorizontalBar().setIncrement(10);  scrolledComposite.getVerticalBar().setIncrement(10);  return scrolledComposite;}  }
class C{  private void readObject(final java.io.ObjectInputStream in) throws IOException {  populateLevels();  int levelInt=in.readInt();  if (Level.INFO.intValue() == levelInt) {    level=Level.INFO;  } else   if (Level.CONFIG.intValue() == levelInt) {    level=Level.CONFIG;  } else   if (Level.FINE.intValue() == levelInt) {    level=Level.FINE;  } else   if (Level.FINER.intValue() == levelInt) {    level=Level.FINER;  } else   if (Level.FINEST.intValue() == levelInt) {    level=Level.FINEST;  } else   if (Level.SEVERE.intValue() == levelInt) {    level=Level.SEVERE;  } else   if (Level.WARNING.intValue() == levelInt) {    level=Level.WARNING;  } else {    level=Level.FINEST;  }}  }
class C{  public synchronized Entry firstValue(){  if (array.isEmpty())   return null; else {    return array.get(0);  }}  }
class C{  public WeakAlarm(AlarmListener listener){  super(listener);}  }
class C{  public void saveMedia(Context context,File folder){  mFileName=null;  Uri mediaUri=getUri();  if (null != mediaUri) {    try {      ResourceUtils.Resource resource=ResourceUtils.openResource(context,mediaUri,getMimeType(context));      if (null == resource) {        Log.e(LOG_TAG,"## saveMedia : Fail to retrieve the resource " + mediaUri);      } else {        mUri=saveFile(folder,resource.mContentStream,getFileName(context),resource.mMimeType);        resource.mContentStream.close();      }    } catch (    Exception e) {      Log.e(LOG_TAG,"## saveMedia : failed " + e.getMessage());    }  }}  }
class C{  public ProfileManagerDialog(java.awt.Frame parent,boolean modal){  super(parent,modal);  initComponents();  initGuiFields();  translateTexts();}  }
class C{  public static void swap4Bytes(byte[] bytes,int offset){  swapBytesAt(bytes,offset + 0,offset + 3);  swapBytesAt(bytes,offset + 1,offset + 2);}  }
class C{  public static boolean isValid(int c){  return (c < 0x10000 && (CHARS[c] & MASK_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  @Override public boolean equals(Object o){  return m_Root.equals(((Trie)o).getRoot());}  }
class C{  public int numParameters(){  return 2;}  }
class C{  protected void addScheduledTasks(){  if (!lock.isHeldByCurrentThread())   throw new IllegalMonitorStateException();  final AbstractFederation fed=(AbstractFederation)getFederation();  notifyFuture=fed.addScheduledTask(new NotifyReleaseTimeTask(),60,60,TimeUnit.SECONDS);  if (snapshotInterval != 0L) {    writeFuture=fed.addScheduledTask(new SnapshotTask(),snapshotInterval,snapshotInterval,TimeUnit.MILLISECONDS);  }}  }
class C{  public void transform(double[] srcPts,int srcOff,float[] dstPts,int dstOff,int numPts){  double M00, M01, M02, M10, M11, M12;switch (state) {default :    stateError();  return;case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M01=m01;M02=m02;M10=m10;M11=m11;M12=m12;while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=(float)(M00 * x + M01 * y + M02);dstPts[dstOff++]=(float)(M10 * x + M11 * y + M12);}return;case (APPLY_SHEAR | APPLY_SCALE):M00=m00;M01=m01;M10=m10;M11=m11;while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=(float)(M00 * x + M01 * y);dstPts[dstOff++]=(float)(M10 * x + M11 * y);}return;case (APPLY_SHEAR | APPLY_TRANSLATE):M01=m01;M02=m02;M10=m10;M12=m12;while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=(float)(M01 * srcPts[srcOff++] + M02);dstPts[dstOff++]=(float)(M10 * x + M12);}return;case (APPLY_SHEAR):M01=m01;M10=m10;while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=(float)(M01 * srcPts[srcOff++]);dstPts[dstOff++]=(float)(M10 * x);}return;case (APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M02=m02;M11=m11;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=(float)(M00 * srcPts[srcOff++] + M02);dstPts[dstOff++]=(float)(M11 * srcPts[srcOff++] + M12);}return;case (APPLY_SCALE):M00=m00;M11=m11;while (--numPts >= 0) {dstPts[dstOff++]=(float)(M00 * srcPts[srcOff++]);dstPts[dstOff++]=(float)(M11 * srcPts[srcOff++]);}return;case (APPLY_TRANSLATE):M02=m02;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=(float)(srcPts[srcOff++] + M02);dstPts[dstOff++]=(float)(srcPts[srcOff++] + M12);}return;case (APPLY_IDENTITY):while (--numPts >= 0) {dstPts[dstOff++]=(float)(srcPts[srcOff++]);dstPts[dstOff++]=(float)(srcPts[srcOff++]);}return;}}  }
class C{  public static synchronized Object readAsXML(ObjectInput in) throws IOException {  if (readBuf == null)   readBuf=new byte[16384];  Thread cThread=Thread.currentThread();  ClassLoader oldCL=null;  try {    oldCL=cThread.getContextClassLoader();    cThread.setContextClassLoader(LayoutUtil.class.getClassLoader());  } catch (  SecurityException ignored) {  }  Object o=null;  try {    int length=in.readInt();    if (length > readBuf.length)     readBuf=new byte[length];    in.readFully(readBuf,0,length);    o=new XMLDecoder(new ByteArrayInputStream(readBuf,0,length)).readObject();  } catch (  EOFException ignored) {  }  if (oldCL != null)   cThread.setContextClassLoader(oldCL);  return o;}  }
class C{  @Override public void deletedProject(final IDatabase database,final INaviProject project){  for (int i=0; i < getChildCount(); i++) {    final CProjectNode node=(CProjectNode)getChildAt(i);    if (node.getObject() == project) {      node.dispose();      remove(node);      break;    }  }  getTreeModel().nodeStructureChanged(CProjectContainerNode.this);}  }
class C{  public static ChainingJsonWriter writeJson(ICalendar... icals){  return writeJson(Arrays.asList(icals));}  }
class C{  public static int signOfDet2x2(DD x1,DD y1,DD x2,DD y2){  DD det=x1.multiply(y2).selfSubtract(y1.multiply(x2));  return det.signum();}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public TransferHandlerAnnotationPlaintext(final JEditorPane editor){  if (editor == null) {    throw new IllegalArgumentException("editor must not be null!");  }  this.editor=editor;  this.original=editor.getTransferHandler();}  }
class C{  private void fireTableChange(WTableModelEvent event){  for (  WTableModelListener listener : m_listeners) {    listener.tableChanged(event);  }  return;}  }
class C{  public static String date2Str(Date d,String format){  if (d == null)   return "";  SimpleDateFormat sdf=new SimpleDateFormat(format);  return sdf.format(d);}  }
class C{  public static void test6(){  final String nat="STRING";  fm.getFlavorsForNative(nat);  fm.setFlavorsForNative(nat,new DataFlavor[0]);  List<DataFlavor> flavors=fm.getFlavorsForNative(nat);  if (!flavors.isEmpty()) {    System.err.println("flavors=" + flavors);    throw new RuntimeException("Test failed");  }}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  private void forceInternalError(){  throw new InternalError("gotcha");}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  private void validateTableMetaData_allViews(String tableNamePattern) throws Exception {  Set<String> expectedViews=new HashSet<>(Arrays.asList("TEST_NORMAL_VIEW","test_quoted_normal_view"));  Set<String> retrievedTables=new HashSet<>();  Map<TableMetaData,Object> rules=getDefaultValueValidationRules();  rules.put(TableMetaData.TABLE_TYPE,VIEW);  try (ResultSet tables=dbmd.getTables(null,null,tableNamePattern,new String[]{VIEW})){    while (tables.next()) {      String tableName=tables.getString(TableMetaData.TABLE_NAME.name());      assertTrue("TABLE_NAME is not allowed to be null or empty",tableName != null && tableName.length() > 0);      retrievedTables.add(tableName);      if ((tableName.startsWith("RDB$") || tableName.startsWith("MON$"))) {        fail("Only expect views, not starting with RDB$ or MON$, retrieved " + tableName);      }      validateRowValues(tables,rules);    }    assertEquals("getTables() did not return expected tables: ",expectedViews,retrievedTables);  } }  }
class C{  public void clear(){  root=null;  size=0;}  }
class C{  public long queryCount() throws GenericEntityException {  if (dynamicViewEntity != null) {    EntityListIterator iterator=null;    try {      iterator=queryIterator();      return iterator.getResultsSizeAfterPartialList();    }  finally {      if (iterator != null) {        iterator.close();      }    }  }  return delegator.findCountByCondition(entityName,makeWhereCondition(false),havingEntityCondition,makeEntityFindOptions());}  }
class C{  public void testForkQuietlyJoin(){  testForkQuietlyJoin(mainPool());}  }
class C{  public final void testGetCount(){  CharSequence[] entries=new CharSequence[]{"entry1","entry2"};  ProxySpinnerAdapter adapter1=createAdapter(new CharSequence[0]);  ProxySpinnerAdapter adapter2=createAdapter(entries);  assertEquals(0,adapter1.getCount());  assertEquals(3,adapter2.getCount());}  }
class C{  private boolean parseIntent(){  Intent intent=getIntent();  if (intent != null && intent.getAction().equals(ACTION_INTERNAL_REQUEST_BT_ON)) {    mEnableOnly=true;  } else   if (intent != null && intent.getAction().equals(ACTION_INTERNAL_REQUEST_BT_ON_AND_DISCOVERABLE)) {    mEnableOnly=false;    mTimeout=intent.getIntExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION,BluetoothDiscoverableEnabler.DEFAULT_DISCOVERABLE_TIMEOUT);  } else {    setResult(RESULT_CANCELED);    return true;  }  LocalBluetoothManager manager=LocalBluetoothManager.getInstance(this);  if (manager == null) {    Log.e(TAG,"Error: there's a problem starting Bluetooth");    setResult(RESULT_CANCELED);    return true;  }  mLocalAdapter=manager.getBluetoothAdapter();  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.083 -0500",hash_original_method="9A759A0D04375324D8F6D99375FF174F",hash_generated_method="0FF4C408441CDF51A299C96865D3C743") public boolean isOpaque(){  return getTaintBoolean();}  }
class C{  public String createResultsTable(ResultProducer rp,String tableName) throws Exception {  if (m_Debug) {    System.err.println("Creating results table " + tableName + "...");  }  String query="CREATE TABLE " + tableName + " ( ";  String[] names=rp.getKeyNames();  Object[] types=rp.getKeyTypes();  if (names.length != types.length) {    throw new Exception("key names types differ in length");  }  for (int i=0; i < names.length; i++) {    query+="Key_" + names[i] + " ";    if (types[i] instanceof Double) {      query+=m_doubleType;    } else     if (types[i] instanceof String) {      query+=m_stringType + " ";    } else {      throw new Exception("Unknown/unsupported field type in key");    }    query+=", ";  }  names=rp.getResultNames();  types=rp.getResultTypes();  if (names.length != types.length) {    throw new Exception("result names and types differ in length");  }  for (int i=0; i < names.length; i++) {    query+=names[i] + " ";    if (types[i] instanceof Double) {      query+=m_doubleType;    } else     if (types[i] instanceof String) {      query+=m_stringType + " ";    } else {      throw new Exception("Unknown/unsupported field type in key");    }    if (i < names.length - 1) {      query+=", ";    }  }  query+=" )";  update(query);  if (m_Debug) {    System.err.println("table created");  }  close();  if (m_createIndex) {    query="CREATE UNIQUE INDEX Key_IDX ON " + tableName + " (";    String[] keyNames=rp.getKeyNames();    boolean first=true;    for (    String keyName : keyNames) {      if (keyName != null) {        if (first) {          first=false;          query+="Key_" + keyName;        } else {          query+=",Key_" + keyName;        }      }    }    query+=")";    update(query);  }  return tableName;}  }
class C{  public char current(){  return reorderedACI.current();}  }
class C{  public static boolean lookingAt(String str,String regex){  return Pattern.compile(regex).matcher(str).lookingAt();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void writeToFile(File filename) throws IOException {  FileUtils.stringToFile(mText.toString(),filename);}  }
class C{  public GraphicsNodeMouseEvent(GraphicsNode source,MouseEvent evt,int button,int lockState){  super(source,evt,lockState);  this.button=button;  this.x=evt.getX();  this.y=evt.getY();  this.clickCount=evt.getClickCount();}  }
class C{  @Uninterruptible public void activate(){  rvmThread.monitor().lockNoHandshake();  osr_flag=true;  rvmThread.monitor().broadcast();  rvmThread.monitor().unlock();}  }
class C{  protected boolean isURL(){  final boolean debug=false;  char nc=peek(1);switch (nc) {case ' ':case '\t':case '\r':case '\n':case '"':case '\'':    return false;}State cs=this.getCurrent();UrlValidation syntaxvalid=new UrlValidation();int where;if ((where=syntaxvalid.isValid(text,cs.start)) != -1) {  String ss=new String(text,cs.start,where - cs.start);  try {    if (new URI(ss) != null) {      this.current=cs.start + (ss.length() - 1);      this.pop(this.current + 1);      if (debug)       System.out.println("Good : " + ss);      return true;    }  } catch (  URISyntaxException e) {    if (debug)     System.out.println("Invalid : " + ss);    return false;  }} else {  if (debug) {    int len=Math.min(100,text.length - cs.start);    String ss=new String(text,cs.start,len);    System.out.println("Not even close : " + ss);  }}return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node lastChild;  doc=(Document)load("hc_staff",true);  titleAttr=doc.createAttribute("title");  textNode=doc.createTextNode("Yesterday");  retval=titleAttr.appendChild(textNode);  value=titleAttr.getValue();  assertEquals("attrValue","Yesterday",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","Yesterday",value);  value=retval.getNodeValue();  assertEquals("retvalValue","Yesterday",value);  lastChild=titleAttr.getLastChild();  value=lastChild.getNodeValue();  assertEquals("lastChildValue","Yesterday",value);}  }
class C{  public InlineQueryResultDocument.InlineQueryResultDocumentBuilder thumbUrl(URL thumbUrl){  this.thumb_url=thumbUrl;  return this;}  }
class C{  @DSComment("OS Bundle data structure") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.518 -0500",hash_original_method="8FC0D5E8787A84A268AF6F8743FC18A2",hash_generated_method="6F7D480D452EFF0784927D78F4534B62") public void putBundle(String key,Bundle value){  unparcel();  mMap.put(key,value);}  }
class C{  void deleteConsistencyGroup(String cgName) throws VPlexApiException {  s_logger.info("Request to delete consistency group {}",cgName);  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexClusterInfo> clusterInfoList=discoveryMgr.getClusterInfoLite();  VPlexConsistencyGroupInfo cgInfo=discoveryMgr.findConsistencyGroup(cgName,clusterInfoList,false);  discoveryMgr.updateConsistencyGroupInfo(cgInfo);  if (cgInfo.getVirtualVolumes().isEmpty()) {    deleteConsistencyGroup(cgInfo);  } else {    s_logger.info("The consistency group {} still has virtual volumes in VPLEX, not deleting it in the VPLEX",cgName);  }}  }
class C{  protected void update(int length){  tickLabelValues.clear();  tickLabels.clear();  tickLabelPositions.clear();  if (scale.isLogScaleEnabled()) {    updateTickLabelForLogScale(length);  } else {    updateTickLabelForLinearScale(length);  }  updateTickVisibility();  updateTickLabelMaxLengthAndHeight();}  }
class C{  public static Object[] clone(Object[] array){  if (array == null) {    return null;  }  return (Object[])array.clone();}  }
class C{  @Override protected char[] escape(int cp){  if (cp < safeOctets.length && safeOctets[cp]) {    return null;  } else   if (cp == ' ' && plusForSpace) {    return URI_ESCAPED_SPACE;  } else   if (cp <= 0x7F) {    char[] dest=new char[3];    dest[0]='%';    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    dest[1]=UPPER_HEX_DIGITS[cp >>> 4];    return dest;  } else   if (cp <= 0x7ff) {    char[] dest=new char[6];    dest[0]='%';    dest[3]='%';    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[1]=UPPER_HEX_DIGITS[0xC | cp];    return dest;  } else   if (cp <= 0xffff) {    char[] dest=new char[9];    dest[0]='%';    dest[1]='E';    dest[3]='%';    dest[6]='%';    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp];    return dest;  } else   if (cp <= 0x10ffff) {    char[] dest=new char[12];    dest[0]='%';    dest[1]='F';    dest[3]='%';    dest[6]='%';    dest[9]='%';    dest[11]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0x7];    return dest;  } else {    throw new IllegalArgumentException("Invalid unicode character value " + cp);  }}  }
class C{  public static void disableConnectionReuseIfNecessary(){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.FROYO) {    System.setProperty("http.keepAlive","false");  }}  }
class C{  public void clear(){  initialize();}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  private void updateUnsuccessfulDownloadedFile(){  OCFile file=mStorageManager.getFileById(mCurrentDownload.getFile().getFileId());  file.setDownloading(false);  mStorageManager.saveFile(file);}  }
class C{  private DebugAttributedStringBuilder format(String s){  DebugAttributedStringBuilder dest=new DebugAttributedStringBuilder();  f.format(s,normal,dest);  return dest;}  }
class C{  public void visitSource(String source,String debug){  if (cv != null) {    cv.visitSource(source,debug);  }}  }
class C{  public void scanMainJarFile(){  Dimension screenSiz=Toolkit.getDefaultToolkit().getScreenSize();  watchXSize=(int)(0.4 * (double)screenSiz.width);  watchYSize=(int)(0.4 * (double)screenSiz.height);  String JarName=GlobalValues.jarFilePath;  examplesFound.clear();  try {    JarInputStream zin=new JarInputStream(new FileInputStream(JarName));    JarEntry entry;    while ((entry=zin.getNextJarEntry()) != null) {      String nameOfEntry=entry.getName();      if (nameOfEntry.endsWith(".gsci") || nameOfEntry.endsWith(".plots-gsci"))       examplesFound.add(nameOfEntry);      zin.closeEntry();    }    zin.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public Map<String,Object> runSync(String localName,ModelService modelService,Map<String,? extends Object> params,boolean validateOut) throws ServiceAuthException, ServiceValidationException, GenericServiceException {  long serviceStartTime=System.currentTimeMillis();  Map<String,Object> result=new HashMap<String,Object>();  ServiceSemaphore lock=null;  Map<String,List<ServiceEcaRule>> eventMap=null;  Map<String,Object> ecaContext=null;  RunningService rs=null;  DispatchContext ctx=localContext.get(localName);  GenericEngine engine=null;  Transaction parentTransaction=null;  boolean isFailure=false;  boolean isError=false;  boolean beganTrans=false;  try {    if ("wait".equals(modelService.semaphore) || "fail".equals(modelService.semaphore)) {      lock=new ServiceSemaphore(delegator,modelService);      lock.acquire();    }    if (Debug.verboseOn() || modelService.debug) {      Debug.logVerbose("[ServiceDispatcher.runSync] : invoking service " + modelService.name + " ["+ modelService.location+ "/"+ modelService.invoke+ "] ("+ modelService.engineName+ ")",module);    }    Map<String,Object> context=new HashMap<String,Object>();    if (params != null) {      context.putAll(params);    }    Locale locale=this.checkLocale(context);    rs=this.logService(localName,modelService,GenericEngine.SYNC_MODE);    eventMap=ServiceEcaUtil.getServiceEventMap(modelService.name);    engine=this.getGenericEngine(modelService.engineName);    modelService.updateDefaultValues(context,ModelService.IN_PARAM);    if (modelService.useTransaction) {      if (TransactionUtil.isTransactionInPlace()) {        if (modelService.requireNewTransaction) {          parentTransaction=TransactionUtil.suspend();          if (TransactionUtil.isTransactionInPlace()) {            throw new GenericTransactionException("In service " + modelService.name + " transaction is still in place after suspend, status is "+ TransactionUtil.getStatusString());          }          beganTrans=TransactionUtil.begin(modelService.transactionTimeout);        }      } else {        beganTrans=TransactionUtil.begin(modelService.transactionTimeout);      }      if (beganTrans && TransactionUtil.debugResources()) {        DebugXaResource dxa=new DebugXaResource(modelService.name);        try {          dxa.enlist();        } catch (        Exception e) {          Debug.logError(e,module);        }      }    }    try {      int lockRetriesRemaining=LOCK_RETRIES;      boolean needsLockRetry=false;      do {        needsLockRetry=false;        lockRetriesRemaining--;        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"global-rollback",ctx,context,result,isError,isFailure);        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"global-commit",ctx,context,result,isError,isFailure);        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"auth",ctx,context,result,isError,isFailure);        isFailure=ServiceUtil.isFailure(result);        isError=ServiceUtil.isError(result);        context=checkAuth(localName,context,modelService);        GenericValue userLogin=(GenericValue)context.get("userLogin");        if (modelService.auth && userLogin == null) {          throw new ServiceAuthException("User authorization is required for this service: " + modelService.name + modelService.debugInfo());        }        if (userLogin != null && userLogin.getString("userLoginId") != null) {          GenericDelegator.pushUserIdentifier(userLogin.getString("userLoginId"));        }        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"in-validate",ctx,context,result,isError,isFailure);        isFailure=ServiceUtil.isFailure(result);        isError=ServiceUtil.isError(result);        if (modelService.validate && !isError && !isFailure) {          try {            modelService.validate(context,ModelService.IN_PARAM,locale);          } catch (          ServiceValidationException e) {            Debug.logError(e,"Incoming context (in runSync : " + modelService.name + ") does not match expected requirements",module);            throw e;          }        }        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"invoke",ctx,context,result,isError,isFailure);        isFailure=ServiceUtil.isFailure(result);        isError=ServiceUtil.isError(result);        if (!isError && !isFailure) {          Map<String,Object> invokeResult=null;          invokeResult=engine.runSync(localName,modelService,context);          engine.sendCallbacks(modelService,context,invokeResult,GenericEngine.SYNC_MODE);          if (invokeResult != null) {            result.putAll(invokeResult);          } else {            Debug.logWarning("Service (in runSync : " + modelService.name + ") returns null result",module);          }        }        isFailure=ServiceUtil.isFailure(result);        isError=ServiceUtil.isError(result);        if (beganTrans) {          String errMsg=ServiceUtil.getErrorMessage(result);          if (errMsg != null && errMsg.toUpperCase().indexOf("DEADLOCK") >= 0) {            String retryMsg="RETRYING SERVICE [" + modelService.name + "]: Deadlock error found in message ["+ errMsg+ "]; retry ["+ (LOCK_RETRIES - lockRetriesRemaining)+ "] of ["+ LOCK_RETRIES+ "]";            TransactionUtil.rollback(beganTrans,retryMsg,null);            beganTrans=TransactionUtil.begin(modelService.transactionTimeout);            if (beganTrans && TransactionUtil.debugResources()) {              DebugXaResource dxa=new DebugXaResource(modelService.name);              try {                dxa.enlist();              } catch (              Exception e) {                Debug.logError(e,module);              }            }            if (!beganTrans) {              Debug.logError("After rollback attempt for lock retry did not begin a new transaction!",module);            } else {              needsLockRetry=true;              result=new HashMap<String,Object>();              isFailure=false;              isError=false;              Debug.logWarning(retryMsg,module);            }            if (errMsg != null && (errMsg.indexOf("A lock could not be obtained within the time requested") >= 0 || errMsg.indexOf("Lock wait timeout exceeded") >= 0)) {            }          }        }      } while (needsLockRetry && lockRetriesRemaining > 0);      ecaContext=new HashMap<String,Object>();      ecaContext.putAll(context);      ecaContext.putAll(result);      modelService.updateDefaultValues(context,ModelService.OUT_PARAM);      if (modelService.validate && validateOut) {        if (eventMap != null)         ServiceEcaUtil.evalRules(modelService.name,eventMap,"out-validate",ctx,ecaContext,result,isError,isFailure);        try {          modelService.validate(result,ModelService.OUT_PARAM,locale);        } catch (        ServiceValidationException e) {          throw new GenericServiceException("Outgoing result (in runSync : " + modelService.name + ") does not match expected requirements",e);        }      }      if (eventMap != null)       ServiceEcaUtil.evalRules(modelService.name,eventMap,"commit",ctx,ecaContext,result,isError,isFailure);      isFailure=ServiceUtil.isFailure(result);      isError=ServiceUtil.isError(result);      if (eventMap != null)       ServiceEcaUtil.evalRules(modelService.name,eventMap,"global-commit-post-run",ctx,ecaContext,result,isError,isFailure);      if (isFailure) {        Debug.logWarning("Service Failure [" + modelService.name + "]: "+ ServiceUtil.getErrorMessage(result),module);      }    } catch (    Throwable t) {      if (Debug.timingOn()) {        UtilTimer.closeTimer(localName + " / " + modelService.name,"Sync service failed...",module);      }      String errMsg="Service [" + modelService.name + "] threw an unexpected exception/error";      engine.sendCallbacks(modelService,context,t,GenericEngine.SYNC_MODE);      try {        TransactionUtil.rollback(beganTrans,errMsg,t);      } catch (      GenericTransactionException te) {        Debug.logError(te,"Cannot rollback transaction",module);      }      rs.setEndStamp();      if (t instanceof ServiceAuthException) {        throw (ServiceAuthException)t;      } else       if (t instanceof ServiceValidationException) {        throw (ServiceValidationException)t;      } else       if (t instanceof GenericServiceException) {        throw (GenericServiceException)t;      } else {        throw new GenericServiceException("Service [" + modelService.name + "] Failed"+ modelService.debugInfo(),t);      }    } finally {      if (isError) {        String errMsg="Error in Service [" + modelService.name + "]: "+ ServiceUtil.getErrorMessage(result);        Debug.logError(errMsg,module);        try {          TransactionUtil.rollback(beganTrans,errMsg,null);        } catch (        GenericTransactionException e) {          Debug.logError(e,"Could not rollback transaction: " + e.toString(),module);        }      } else {        try {          TransactionUtil.commit(beganTrans);        } catch (        GenericTransactionException e) {          GenericDelegator.popUserIdentifier();          String errMsg="Could not commit transaction for service [" + modelService.name + "] call";          Debug.logError(e,errMsg,module);          if (e.getMessage() != null) {            errMsg=errMsg + ": " + e.getMessage();          }          throw new GenericServiceException(errMsg);        }      }      modelService.evalNotifications(this.getLocalContext(localName),context,result);      GenericDelegator.popUserIdentifier();    }  } catch (  GenericTransactionException te) {    Debug.logError(te,"Problems with the transaction",module);    throw new GenericServiceException("Problems with the transaction.",te.getNested());  } finally {    if (lock != null) {      try {        lock.release();      } catch (      GenericServiceException e) {        Debug.logWarning(e,"Exception thrown while unlocking semaphore: ",module);      }    }    if (parentTransaction != null) {      try {        TransactionUtil.resume(parentTransaction);      } catch (      GenericTransactionException ite) {        Debug.logWarning(ite,"Transaction error, not resumed",module);        throw new GenericServiceException("Resume transaction exception, see logs");      }    }  }  if (eventMap != null)   ServiceEcaUtil.evalRules(modelService.name,eventMap,"return",ctx,ecaContext,result,isError,isFailure);  rs.setEndStamp();  long timeToRun=System.currentTimeMillis() - serviceStartTime;  long showServiceDurationThreshold=UtilProperties.getPropertyAsLong("service","showServiceDurationThreshold",0);  long showSlowServiceThreshold=UtilProperties.getPropertyAsLong("service","showSlowServiceThreshold",1000);  if (Debug.timingOn() && timeToRun > showServiceDurationThreshold) {    Debug.logTiming("Sync service [" + localName + "/"+ modelService.name+ "] finished in ["+ timeToRun+ "] milliseconds",module);  } else   if (Debug.infoOn() && timeToRun > showSlowServiceThreshold) {    Debug.logTiming("Slow sync service execution detected: service [" + localName + "/"+ modelService.name+ "] finished in ["+ timeToRun+ "] milliseconds",module);  }  if ((Debug.verboseOn() || modelService.debug) && timeToRun > 50 && !modelService.hideResultInLog) {    String resultStr=result.toString();    if (resultStr.length() > 10240) {      resultStr=resultStr.substring(0,10226) + "...[truncated]";    }    Debug.logVerbose("Sync service [" + localName + "/"+ modelService.name+ "] finished with response ["+ resultStr+ "]",module);  }  if (modelService.metrics != null) {    modelService.metrics.recordServiceRate(1,timeToRun);  }  return result;}  }
class C{  protected void sequence_AnnotatedScriptElement_InterfaceImplementsList_Members_TypeVariables(ISerializationContext context,N4InterfaceDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void onRetry(){}  }
class C{  public void deleteAllItems() throws XMPPException {  PubSub request=createPubsubPacket(Type.SET,new NodeExtension(PubSubElementType.PURGE_OWNER,getId()),PubSubElementType.PURGE_OWNER.getNamespace());  SyncPacketSend.getReply(con,request);}  }
class C{  public static String arpabetToIPA(String s) throws IllegalArgumentException {  String[] arpaPhonemes=s.trim().split("[ \\t]+");  StringBuffer ipaPhonemes=new StringBuffer(s.length());  for (  String arpaPhoneme : arpaPhonemes) {    char stressChar=arpaPhoneme.charAt(arpaPhoneme.length() - 1);    if (stressChar == '0' || stressChar == '1' || stressChar == '2') {      arpaPhoneme=arpaPhoneme.substring(0,arpaPhoneme.length() - 1);      ipaPhonemes.append(arpabetMap.get(Character.toString(stressChar)));    }    String ipaPhoneme=arpabetMap.get(arpaPhoneme);    if (ipaPhoneme == null) {      throw new IllegalArgumentException();    }    ipaPhonemes.append(ipaPhoneme);  }  return ipaPhonemes.toString();}  }
class C{  private void updateTransitivePreds(DTNHost host){  MessageRouter otherRouter=host.getRouter();  assert otherRouter instanceof ProphetRouter : "PRoPHET only works " + " with other routers of same type";  double pForHost=getPredFor(host);  Map<DTNHost,Double> othersPreds=((ProphetRouter)otherRouter).getDeliveryPreds();  for (  Map.Entry<DTNHost,Double> e : othersPreds.entrySet()) {    if (e.getKey() == getHost()) {      continue;    }    double pOld=getPredFor(e.getKey());    double pNew=pOld + (1 - pOld) * pForHost * e.getValue()* beta;    preds.put(e.getKey(),pNew);  }}  }
class C{  private void generate(Region.Entry entry) throws SAXException {  if ((entry == null)) {    return;  }  handler.startElement("",ENTRY,ENTRY,EMPTY);  handler.startElement("",KEY,KEY,EMPTY);  generate(entry.getKey());  handler.endElement("",KEY,KEY);  handler.startElement("",VALUE,VALUE,EMPTY);  generate(entry.getValue());  handler.endElement("",VALUE,VALUE);  handler.endElement("",ENTRY,ENTRY);}  }
class C{  public boolean threadPool(){  return this.threadPool;}  }
class C{  protected void goingInactive(OBlock block){  if (_runMode == MODE_NONE) {    return;  }  if (!ThreadingUtil.isLayoutThread())   log.error("invoked on wrong thread",new Exception("traceback"));  int idx=getIndexOfBlock(block,_idxLastOrder);  if (log.isDebugEnabled()) {    log.debug("Block \"" + block.getDisplayName() + "\" goingInactive. idx= "+ idx+ ", _idxCurrentOrder= "+ _idxCurrentOrder+ " - warrant= "+ getDisplayName());  }  if (idx < _idxCurrentOrder) {    releaseBlock(block,idx);  } else   if (idx == _idxCurrentOrder) {    if (_idxCurrentOrder + 1 < _orders.size()) {      OBlock nextBlock=getBlockAt(_idxCurrentOrder + 1);      if ((nextBlock.getState() & OBlock.DARK) != 0) {        if (_engineer != null) {          goingActive(nextBlock);          releaseBlock(block,idx);        } else {          if (_runMode == MODE_LEARN) {            _idxCurrentOrder++;            firePropertyChange("blockChange",block,nextBlock);          } else           if (_runMode == MODE_RUN) {            controlRunTrain(ABORT);          }        }      } else {        if (log.isDebugEnabled()) {          log.debug("firePropertyChange(\"blockChange\", " + block.getDisplayName() + ", null) - warrant= "+ getDisplayName());        }        firePropertyChange("blockChange",block,null);        if (_engineer != null) {          _engineer.setHalt(true);        } else {          controlRunTrain(ABORT);        }        return;      }    } else {      abortWarrant("Warrant " + getDisplayName() + " at last block "+ block.getDisplayName()+ " and going inactive!");    }  } else   if (idx == _idxCurrentOrder + 1) {    restart();    moveIntoNextBlock(END);  } else {    block.allocate(this);  }}  }
class C{  public static boolean isContactImpulseEnabled(){  return contactImpulseEnabled;}  }
class C{  public static OracleRequest[] generatePkcs1Vectors(RSAPublicKey publicKey,CryptoConstants.Algorithm algorithm,boolean setEncryptedData) throws CryptoAttackException {  Random random=new Random();  byte[] keyBytes=new byte[algorithm.KEY_SIZE];  random.nextBytes(keyBytes);  LOG.debug("Generated a random symmetric key" + Utility.bytesToHex(keyBytes));  int rsaKeyLength=publicKey.getModulus().bitLength() / 8;  int vectorSize=STATIC_VECTOR_SIZE + rsaKeyLength - 2;  byte[][] plainPaddedKeys=new byte[vectorSize][];  plainPaddedKeys[0]=getEK_NoNullByte(rsaKeyLength,keyBytes);  plainPaddedKeys[1]=getEK_NullByteInPadding(rsaKeyLength,keyBytes);  plainPaddedKeys[2]=getEK_NullByteInPkcsPadding(rsaKeyLength,keyBytes);  plainPaddedKeys[3]=getEK_SymmetricKeyOfSize16(rsaKeyLength,keyBytes);  plainPaddedKeys[4]=getEK_SymmetricKeyOfSize24(rsaKeyLength,keyBytes);  plainPaddedKeys[5]=getEK_SymmetricKeyOfSize32(rsaKeyLength,keyBytes);  plainPaddedKeys[6]=getEK_SymmetricKeyOfSize40(rsaKeyLength,keyBytes);  plainPaddedKeys[7]=getEK_SymmetricKeyOfSize8(rsaKeyLength,keyBytes);  plainPaddedKeys[8]=getEK_WrongFirstByte(rsaKeyLength,keyBytes);  plainPaddedKeys[9]=getEK_WrongSecondByte(rsaKeyLength,keyBytes);  plainPaddedKeys[10]=getPaddedKey(rsaKeyLength,keyBytes);  byte[][] additionalPaddedKeys=getEK_DifferentPositionsOf0x00(rsaKeyLength,keyBytes);  System.arraycopy(additionalPaddedKeys,0,plainPaddedKeys,STATIC_VECTOR_SIZE,additionalPaddedKeys.length);  try {    Security.addProvider(new BouncyCastleProvider());    Cipher rsa=Cipher.getInstance("RSA/NONE/NoPadding");    rsa.init(Cipher.ENCRYPT_MODE,publicKey);    byte[][] encryptedKeys=new byte[vectorSize][];    for (int i=0; i < encryptedKeys.length; i++) {      encryptedKeys[i]=rsa.doFinal(plainPaddedKeys[i]);    }    OracleRequest[] requests=null;    if (setEncryptedData) {      byte[][] encryptedData=getEncryptedSymmetricData(keyBytes,algorithm);      requests=new OracleRequest[encryptedKeys.length * encryptedData.length];      for (int i=0; i < encryptedKeys.length; i++) {        for (int j=0; j < encryptedData.length; j++) {          requests[i * (encryptedData.length) + j]=new PKCS1OracleRequest(encryptedKeys[i],encryptedData[j]);        }      }    } else {      requests=new OracleRequest[encryptedKeys.length];      for (int i=0; i < requests.length; i++) {        requests[i]=new PKCS1OracleRequest(encryptedKeys[i]);      }    }    return requests;  } catch (  BadPaddingException|IllegalBlockSizeException|InvalidKeyException|NoSuchAlgorithmException|NoSuchPaddingException ex) {    throw new CryptoAttackException(ex);  }}  }
class C{  public CredentialNotFoundException(String msg){  super(msg);}  }
class C{  private ElementCreatorImpl whitelistAttributes(Collection<AttributeKey<?>> attributeKeys){synchronized (registry) {    if (attributeWhitelist == null) {      attributeWhitelist=Sets.newHashSet();    }    attributeWhitelist.addAll(attributeKeys);    registry.dirty();  }  return this;}  }
class C{  public void initContext(Object context){  initComponents();}  }
class C{  public void configure(){  SerialTrafficController.instance().connectPort(this);  jmri.InstanceManager.setTurnoutManager(jmri.jmrix.tmcc.SerialTurnoutManager.instance());  jmri.InstanceManager.setThrottleManager(new jmri.jmrix.tmcc.SerialThrottleManager());  jmri.jmrix.tmcc.ActiveFlag.setActive();}  }
class C{  private static void checkSyntax(String functionCall) throws FBSQLParseException {  int parenthesisStart=functionCall.indexOf('(');  if (parenthesisStart != -1 && functionCall.charAt(functionCall.length() - 1) != ')')   throw new FBSQLParseException("No closing parenthesis found, not a function call.");}  }
class C{  public String top(){  int x=param.lastIndexOf(delimiter);  if (x == -1)   return param; else   return param.substring(x + 1);}  }
class C{  public static <T extends Object & java.lang.Comparable<? super T>>T min(Collection<? extends T> collection){  Iterator<? extends T> it=collection.iterator();  T min=it.next();  if (NumberComparator.isNumber(min)) {    return (T)max(collection,NumberComparator.createComparator(min.getClass()));  }  while (it.hasNext()) {    T next=it.next();    if (min.compareTo(next) > 0) {      min=next;    }  }  return min;}  }
class C{  public ColumnFormat(String file){  super(file);}  }
class C{  public Image rotate(int degrees){  throw new RuntimeException("The rotate method is not supported by RGB images at the moment");}  }
class C{  public static TextArea create(int columns){  return create("",columns);}  }
class C{  public XMLSignatureInput performTransforms(XMLSignatureInput xmlSignatureInput,OutputStream os) throws TransformationException {  try {    int last=this.getLength() - 1;    for (int i=0; i < last; i++) {      Transform t=this.item(i);      String uri=t.getURI();      if (log.isLoggable(java.util.logging.Level.FINE)) {        log.log(java.util.logging.Level.FINE,"Perform the (" + i + ")th "+ uri+ " transform");      }      checkSecureValidation(t);      xmlSignatureInput=t.performTransform(xmlSignatureInput);    }    if (last >= 0) {      Transform t=this.item(last);      checkSecureValidation(t);      xmlSignatureInput=t.performTransform(xmlSignatureInput,os);    }    return xmlSignatureInput;  } catch (  IOException ex) {    throw new TransformationException("empty",ex);  }catch (  CanonicalizationException ex) {    throw new TransformationException("empty",ex);  }catch (  InvalidCanonicalizerException ex) {    throw new TransformationException("empty",ex);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ValidationPackage.VALIDATION_MARKER__DELEGATE_RESOURCE:    setDelegateResource((Resource)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public boolean hasTransmitter(InfraRedDetector.DetectorParams detectorParams){  try {    boolean hasPackage=hasPackage("com.htc.cirmodule",detectorParams.context);    detectorParams.logger.log("Check HTC IR interface: " + hasPackage);    return hasPackage;  } catch (  Exception e) {    detectorParams.logger.error("On HTC ir error",e);    return false;  }}  }
class C{  @Override public int hashCode(){  return getValue().hashCode();}  }
class C{  public void flush() throws IOException {  if (writePending)   flushForced(); else   if (readLength > 0)   clearReadBuffer();  sageFileSource.flush();}  }
class C{  public InvocationEvent(Object source,Runnable runnable,Runnable listener,boolean catchThrowables){  this(source,INVOCATION_DEFAULT,runnable,null,listener,catchThrowables);}  }
class C{  private void step1(){  int size=cfg.numberOfNodes() + 1;  vertex=new BasicBlock[size];  DFSCounter=0;  if (DEBUG) {    System.out.println("Initializing blocks:");  }  int noRehashCapacity=(int)(size * 1.4f);  ltDominators=new HashMap<BasicBlock,LTDominatorInfo>(noRehashCapacity);  for (Enumeration<BasicBlock> bbEnum=cfg.basicBlocks(); bbEnum.hasMoreElements(); ) {    BasicBlock block=bbEnum.nextElement();    if (!forward || !block.isExit()) {      ltDominators.put(block,new LTDominatorInfo(block));      if (DEBUG) {        printNextNodes(block);      }    }  }  DFS();  if (DEBUG) {    System.out.println("DFSCounter: " + DFSCounter + ", CFG Nodes: "+ cfg.numberOfNodes());    printDFSNumbers();  }}  }
class C{  public SmsPortAddressedTextMessage(SmsPort destPort,SmsPort origPort,String msg,SmsDcs dcs){  super(destPort,origPort);  smsTextMessage_=new SmsTextMessage(msg,dcs);}  }
class C{  static CallerInfo doSecondaryLookupIfNecessary(Context context,String number,CallerInfo previousResult){  if (!previousResult.contactExists && PhoneNumberUtils.isUriNumber(number)) {    String username=PhoneNumberUtils.getUsernameFromUriNumber(number);    if (PhoneNumberUtils.isGlobalPhoneNumber(username)) {      previousResult=getCallerInfo(context,Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,Uri.encode(username)));    }  }  return previousResult;}  }
class C{  public void testWrongNotStatic() throws Exception {  Map<String,Method> functions=new HashMap<>();  functions.put("foo",getClass().getMethod("nonStaticMethod"));  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("is not static"));}  }
class C{  public Rastrigin(int numberOfVariables){  super(numberOfVariables);}  }
class C{  @Override public void stop(){  if (m_listenee != null) {    if (m_listenee instanceof BeanCommon) {      ((BeanCommon)m_listenee).stop();    }  }  if (m_log != null) {    m_log.statusMessage(statusMessagePrefix() + "Stopped");  }  m_busy=false;}  }
class C{  public static java.util.Date parseDateTime(String date,String format,String locale,String timeZone){  SimpleDateFormat dateFormat=getDateFormat(format,locale,timeZone);  try {synchronized (dateFormat) {      return dateFormat.parse(date);    }  } catch (  Exception e) {    throw DbException.get(ErrorCode.PARSE_ERROR_1,e,date);  }}  }
class C{  public MutableTriple(final L left,final M middle,final R right){  super();  this.left=left;  this.middle=middle;  this.right=right;}  }
class C{  private Hop processBinaryExpression(BinaryExpression source,DataIdentifier target,HashMap<String,Hop> hops) throws ParseException {  Hop left=processExpression(source.getLeft(),null,hops);  Hop right=processExpression(source.getRight(),null,hops);  if (left == null || right == null) {    left=processExpression(source.getLeft(),null,hops);    right=processExpression(source.getRight(),null,hops);  }  Hop currBop=null;  if (target == null) {    target=createTarget(source);  }  target.setValueType(source.getOutput().getValueType());  if (source.getOpCode() == Expression.BinaryOp.PLUS) {    currBop=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp2.PLUS,left,right);  } else   if (source.getOpCode() == Expression.BinaryOp.MINUS) {    currBop=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp2.MINUS,left,right);  } else   if (source.getOpCode() == Expression.BinaryOp.MULT) {    currBop=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp2.MULT,left,right);  } else   if (source.getOpCode() == Expression.BinaryOp.DIV) {    currBop=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp2.DIV,left,right);  } else   if (source.getOpCode() == Expression.BinaryOp.MODULUS) {    currBop=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp2.MODULUS,left,right);  } else   if (source.getOpCode() == Expression.BinaryOp.INTDIV) {    currBop=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp2.INTDIV,left,right);  } else   if (source.getOpCode() == Expression.BinaryOp.MATMULT) {    currBop=new AggBinaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp2.MULT,AggOp.SUM,left,right);  } else   if (source.getOpCode() == Expression.BinaryOp.POW) {    currBop=new BinaryOp(target.getName(),target.getDataType(),target.getValueType(),OpOp2.POW,left,right);  } else {    throw new ParseException("Unsupported parsing of binary expression: " + source.getOpCode());  }  setIdentifierParams(currBop,source.getOutput());  currBop.setAllPositions(source.getBeginLine(),source.getBeginColumn(),source.getEndLine(),source.getEndColumn());  return currBop;}  }
class C{  public void reset() throws IOException {  throw new IOException("mark/reset not supported");}  }
class C{  public boolean retainEntries(TIntLongProcedure procedure){  boolean modified=false;  byte[] states=_states;  int[] keys=_set;  long[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      removeAt(i);      modified=true;    }  }  return modified;}  }
class C{  public boolean hasMyomerBooster(){  for (  Mounted mEquip : getMisc()) {    MiscType mtype=(MiscType)mEquip.getType();    if (mtype.hasFlag(MiscType.F_MASC) && !mEquip.isInoperable()) {      return true;    }  }  return false;}  }
class C{  public CreateWindowClause insertWhereClause(Expression insertWhereClause){  this.insertWhereClause=insertWhereClause;  return this;}  }
class C{  @Override public String graph() throws Exception {  StringBuffer text=new StringBuffer();  assignIDs(-1);  text.append("digraph J48Tree {\n");  if (m_isLeaf) {    text.append("N" + m_id + " [label=\""+ Utils.backQuoteChars(m_localModel.dumpLabel(0,m_train))+ "\" "+ "shape=box style=filled ");    if (m_train != null && m_train.numInstances() > 0) {      text.append("data =\n" + m_train + "\n");      text.append(",\n");    }    text.append("]\n");  } else {    text.append("N" + m_id + " [label=\""+ Utils.backQuoteChars(m_localModel.leftSide(m_train))+ "\" ");    if (m_train != null && m_train.numInstances() > 0) {      text.append("data =\n" + m_train + "\n");      text.append(",\n");    }    text.append("]\n");    graphTree(text);  }  return text.toString() + "}\n";}  }
class C{  public static String createMinGWPath(String path){  String mingwPath=path.replace('\\','/');  int driveLetterIndex=1;  if (mingwPath.matches("^[a-zA-Z]:\\/.*")) {    driveLetterIndex=0;  }  mingwPath="//" + Character.toLowerCase(mingwPath.charAt(driveLetterIndex)) + mingwPath.substring(driveLetterIndex + 1);  mingwPath=mingwPath.replace(":","");  return mingwPath;}  }
class C{  @Override public Fragment provideMapFragment(){  return new MapsFragment();}  }
class C{  public boolean hasQuest(final String name){  return (player.getKeyedSlot("!quests",evaluateSlotName(name)) != null);}  }
class C{  public DefaultMetaDataFactory(final Map<String,Object> metadata){  notNull(metadata);  this.metadata=metadata;}  }
class C{  @Deprecated public NetworkRestRep updateEndpoints(URI id,NetworkEndpointParam input){  return client.put(NetworkRestRep.class,input,getIdUrl() + "/endpoints",id);}  }
class C{  public static Transaction createFakeTxWithoutChange(final NetworkParameters params,final TransactionOutput output){  Transaction prevTx=FakeTxBuilder.createFakeTx(params,Coin.COIN,new ECKey().toAddress(params));  Transaction tx=new Transaction(params);  tx.addOutput(output);  tx.addInput(prevTx.getOutput(0));  return tx;}  }
class C{  public float distanceTo1(AnimatableValue other){  AnimatableTransformListValue o=(AnimatableTransformListValue)other;  if (transforms.isEmpty() || o.transforms.isEmpty()) {    return 0f;  }  AbstractSVGTransform t1=(AbstractSVGTransform)transforms.lastElement();  AbstractSVGTransform t2=(AbstractSVGTransform)o.transforms.lastElement();  short type1=t1.getType();  if (type1 != t2.getType()) {    return 0f;  }  SVGMatrix m1=t1.getMatrix();  SVGMatrix m2=t2.getMatrix();switch (type1) {case SVGTransform.SVG_TRANSFORM_TRANSLATE:    return Math.abs(m1.getE() - m2.getE());case SVGTransform.SVG_TRANSFORM_SCALE:  return Math.abs(m1.getA() - m2.getA());case SVGTransform.SVG_TRANSFORM_ROTATE:case SVGTransform.SVG_TRANSFORM_SKEWX:case SVGTransform.SVG_TRANSFORM_SKEWY:return Math.abs(t1.getAngle() - t2.getAngle());}return 0f;}  }
class C{  public boolean hasWorksheet(){  return hasExtension(Worksheet.class);}  }
class C{  protected DnDListener(DragSource ds){  this(ds,null);}  }
class C{  public static TrueTypeFont parseFont(byte[] orig){  ByteBuffer inBuf=ByteBuffer.wrap(orig);  return parseFont(inBuf);}  }
class C{  private UnicodeBlock(String idName){  super(idName);  map.put(idName,this);}  }
class C{  private void postPlugin(final boolean isPing) throws IOException {  String pluginName=modName;  boolean onlineMode=MinecraftServer.getServer().isServerInOnlineMode();  String pluginVersion=modVersion;  String serverVersion;  if (MinecraftServer.getServer().isDedicatedServer()) {    serverVersion="MinecraftForge (MC: " + MinecraftServer.getServer().getMinecraftVersion() + ")";  } else {    serverVersion="MinecraftForgeSSP (MC: " + MinecraftServer.getServer().getMinecraftVersion() + ")";  }  int playersOnline=MinecraftServer.getServer().getCurrentPlayerCount();  StringBuilder json=new StringBuilder(1024);  json.append('{');  appendJSONPair(json,"guid",guid);  appendJSONPair(json,"plugin_version",pluginVersion);  appendJSONPair(json,"server_version",serverVersion);  appendJSONPair(json,"players_online",Integer.toString(playersOnline));  String osname=System.getProperty("os.name");  String osarch=System.getProperty("os.arch");  String osversion=System.getProperty("os.version");  String java_version=System.getProperty("java.version");  int coreCount=Runtime.getRuntime().availableProcessors();  if (osarch.equals("amd64")) {    osarch="x86_64";  }  appendJSONPair(json,"osname",osname);  appendJSONPair(json,"osarch",osarch);  appendJSONPair(json,"osversion",osversion);  appendJSONPair(json,"cores",Integer.toString(coreCount));  appendJSONPair(json,"auth_mode",onlineMode ? "1" : "0");  appendJSONPair(json,"java_version",java_version);  if (isPing) {    appendJSONPair(json,"ping","1");  }  json.append('}');  URL url=new URL(BASE_URL + String.format(REPORT_URL,urlEncode(pluginName)));  URLConnection connection;  if (isMineshafterPresent()) {    connection=url.openConnection(Proxy.NO_PROXY);  } else {    connection=url.openConnection();  }  byte[] uncompressed=json.toString().getBytes();  byte[] compressed=gzip(json.toString());  connection.addRequestProperty("User-Agent","MCStats/" + REVISION);  connection.addRequestProperty("Content-Type","application/json");  connection.addRequestProperty("Content-Encoding","gzip");  connection.addRequestProperty("Content-Length",Integer.toString(compressed.length));  connection.addRequestProperty("Accept","application/json");  connection.addRequestProperty("Connection","close");  connection.setDoOutput(true);  OutputStream os=connection.getOutputStream();  os.write(compressed);  os.flush();  final BufferedReader reader=new BufferedReader(new InputStreamReader(connection.getInputStream()));  String response=reader.readLine();  os.close();  reader.close();  if (response == null || response.startsWith("ERR") || response.startsWith("7")) {    if (response == null) {      response="null";    } else     if (response.startsWith("7")) {      response=response.substring(response.startsWith("7,") ? 2 : 1);    }    throw new IOException(response);  }}  }
class C{  public PMX(double probability){  super();  this.probability=probability;}  }
class C{  private void hideInfo(){  hideInfo(0);}  }
class C{  public <T>byte[] toByteArray(Class<T> clazz,T obj) throws DatabaseException {  PropertiesMap propertiesMap=getProperties(clazz);  ByteArrayOutputStream out=new ByteArrayOutputStream();  try {    for (    int index : propertiesMap.getIndices()) {      PropertyDescriptor pd=propertiesMap.get(index);      if (pd == null) {        throw DatabaseException.fatals.serializationFailedInconsistentPropertyMap(clazz);      }      Class<?> type=pd.getPropertyType();      byte[] value;      if (type == String.class) {        String str=(String)pd.getReadMethod().invoke(obj);        if (str == null) {          continue;        }        value=str.getBytes(ENCODING);      } else       if (type == URI.class) {        URI uri=(URI)pd.getReadMethod().invoke(obj);        if (uri == null) {          continue;        }        value=uri.toString().getBytes(ENCODING);      } else       if (type == long.class) {        long lvalue=(Long)pd.getReadMethod().invoke(obj);        value=encodeVariantLong(lvalue);      } else       if (type == boolean.class) {        boolean lvalue=(Boolean)pd.getReadMethod().invoke(obj);        value=new byte[1];        value[0]=lvalue ? (byte)1 : (byte)0;      } else       if (type == byte[].class) {        byte[] lvalue=(byte[])pd.getReadMethod().invoke(obj);        value=lvalue;      } else {        throw DatabaseException.fatals.serializationFailedNotImplementedForType(clazz,pd.getName(),type);      }      if ((value.length & 0x0000) > 0) {        throw DatabaseException.fatals.serializationFailedFieldLengthTooLong(clazz,pd.getName(),value.length);      }      out.write(index);      int len=value.length;      out.write((len >> 8));      out.write((len & 0xff));      out.write(value);    }  } catch (  final IOException ex) {    throw DatabaseException.fatals.serializationFailedClass(clazz,ex);  }catch (  final IllegalAccessException ex) {    throw DatabaseException.fatals.serializationFailedClass(clazz,ex);  }catch (  final InvocationTargetException ex) {    throw DatabaseException.fatals.serializationFailedClass(clazz,ex);  }  return out.toByteArray();}  }
class C{  private String printXFormat(String sx){  int nLeadingZeros=0;  int nBlanks=0;  if (sx.equals("0") && precisionSet && precision == 0)   sx="";  if (precisionSet)   nLeadingZeros=precision - sx.length();  if (nLeadingZeros < 0)   nLeadingZeros=0;  if (fieldWidthSet) {    nBlanks=fieldWidth - nLeadingZeros - sx.length();    if (alternateForm)     nBlanks=nBlanks - 2;  }  if (nBlanks < 0)   nBlanks=0;  int n=0;  if (alternateForm)   n+=2;  n+=nLeadingZeros;  n+=sx.length();  n+=nBlanks;  char[] ca=new char[n];  int i=0;  if (leftJustify) {    if (alternateForm) {      ca[i++]='0';      ca[i++]='x';    }    for (int j=0; j < nLeadingZeros; j++, i++)     ca[i]='0';    char[] csx=sx.toCharArray();    for (int j=0; j < csx.length; j++, i++)     ca[i]=csx[j];    for (int j=0; j < nBlanks; j++, i++)     ca[i]=' ';  } else {    if (!leadingZeros)     for (int j=0; j < nBlanks; j++, i++)     ca[i]=' ';    if (alternateForm) {      ca[i++]='0';      ca[i++]='x';    }    if (leadingZeros)     for (int j=0; j < nBlanks; j++, i++)     ca[i]='0';    for (int j=0; j < nLeadingZeros; j++, i++)     ca[i]='0';    char[] csx=sx.toCharArray();    for (int j=0; j < csx.length; j++, i++)     ca[i]=csx[j];  }  String caReturn=new String(ca);  if (conversionCharacter == 'X')   caReturn=caReturn.toUpperCase();  return caReturn;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  DisplayMetrics metrics=new DisplayMetrics();  display.getMetrics(metrics);  screenResolution=new Point();  int width=metrics.widthPixels;  int height=metrics.heightPixels;  TypedValue typedValue=new TypedValue();  DisplayMetrics displayMetrics=this.context.getResources().getDisplayMetrics();  if (this.context.getTheme().resolveAttribute(android.R.attr.actionBarSize,typedValue,true)) {    height-=TypedValue.complexToDimensionPixelSize(typedValue.data,displayMetrics);  } else {    int rotation=context.getApplicationContext().getResources().getConfiguration().orientation;    if (rotation == Configuration.ORIENTATION_PORTRAIT) {      height-=40 * displayMetrics.density;    } else {      height-=48 * displayMetrics.density;    }  }  height-=50;  screenResolution.set(width,height);  Log.i(TAG,"Screen resolution: " + screenResolution);  cameraResolution=findBestPreviewSizeValue(parameters,screenResolution);  Log.i(TAG,"Camera resolution: " + cameraResolution);}  }
class C{  public void toDotFile(SootMethod method,File destDir,String suffix,Block branchBlock,Set<DominatorNode> taintedBlocks) throws IOException {  if (!destDir.exists()) {    if (!destDir.mkdirs())     throw new IOException("could not create directory " + destDir);  } else   if (!destDir.isDirectory()) {    throw new IOException(destDir + " exists, but is a file");  }  StringBuilder nodes=new StringBuilder();  StringBuilder edges=new StringBuilder();  Stack<DominatorNode> stack=new Stack<DominatorNode>();  for (  DominatorNode head : getHeads()) {    stack.push(head);  }  int instOffset=0;  Map<Block,Integer> blockNumbers=new HashMap<Block,Integer>();  while (!stack.isEmpty()) {    DominatorNode node=stack.pop();    Block nodeBlock=(Block)node.getGode();    int bFrom=blockNumbers.containsKey(nodeBlock) ? blockNumbers.get(nodeBlock) : blockNumbers.size();    blockNumbers.put(nodeBlock,bFrom);    nodes.append("  bb");    nodes.append(bFrom);    nodes.append(" [shape=none, margin=0, label=<\n");    if (node.getGode() == branchBlock) {      nodes.append("    <table bgcolor=\"#FF6666\" border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"4\">\n");    } else     if (taintedBlocks.contains(node)) {      nodes.append("    <table bgcolor=\"#66FFFF\" border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"4\">\n");    } else {      nodes.append("    <table border=\"0\" cellborder=\"1\" cellspacing=\"0\" cellpadding=\"4\">\n");    }    int idx=nodeBlock.getIndexInMethod();    if (idx == Integer.MIN_VALUE) {      nodes.append("      <tr><td align=\"center\">START</td></tr>");    } else     if (idx == Integer.MAX_VALUE) {      nodes.append("      <tr><td align=\"center\">END</td></tr>");    } else {      for (      Unit unit : nodeBlock) {        nodes.append("      <tr><td align=\"left\">");        nodes.append(idx + instOffset);        nodes.append("</td><td align=\"left\">");        nodes.append(StringEscapeUtils.escapeHtml4(unit.toString()));        nodes.append("</td></tr>\n");        instOffset++;      }      instOffset--;    }    nodes.append("    </table>>];\n");    for (    DominatorNode child : node.getChildren()) {      Block childBlock=(Block)child.getGode();      int bTo=blockNumbers.containsKey(childBlock) ? blockNumbers.get(childBlock) : blockNumbers.size();      blockNumbers.put(childBlock,bTo);      edges.append("  bb");      edges.append(bFrom);      edges.append(" -> bb");      edges.append(bTo);      edges.append(";\n");      stack.push(child);    }  }  String className=method.getDeclaringClass().getName();  try (PrintWriter fileOut=new PrintWriter(new File(destDir,className + "." + method.getName()+ "."+ branchBlock.getIndexInMethod()+ suffix+ ".dot"))){    fileOut.println("digraph " + method.getName() + "CFG {\n");    fileOut.println(nodes);    fileOut.println();    fileOut.println(edges);    fileOut.println("}");  } }  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private PostgreSQLAddressSpaceLoader(){}  }
class C{  public ActivityTransporter addExtra(String key,String value){  if (extras == null)   extras=new ArrayList<>();  extras.add(new ActivityExtra(key,value));  return this;}  }
class C{  public TilesetAnimationMap(){  animations=new HashMap<Integer,Mapping>();}  }
class C{  public void putIcon(String extension,Icon icon){  icons.put(extension,icon);}  }
class C{  public static final Long extractIplIdentityHostSerialNumber(LocoNetMessage m){  Long sn;  Integer di_f1;  di_f1=m.getElement(9);  sn=(long)(m.getElement(11) + ((di_f1 & 0x2) << 6));  sn+=(((long)m.getElement(12)) << 8) + (((long)di_f1 & 0x4) << 13);  sn+=(((long)m.getElement(13)) << 16) + (((long)di_f1 & 0x8) << 20);  return sn;}  }
class C{  public static BigDecimal convert(int C_UOM_From_ID,int C_UOM_To_ID,BigDecimal qty,boolean StdPrecision){  if (qty == null || qty.compareTo(Env.ZERO) == 0 || C_UOM_From_ID == C_UOM_To_ID)   return qty;  BigDecimal retValue=null;  int precision=2;  String sql="SELECT c.MultiplyRate, uomTo.StdPrecision, uomTo.CostingPrecision " + "FROM	C_UOM_Conversion c" + " INNER JOIN C_UOM uomTo ON (c.C_UOM_TO_ID=uomTo.C_UOM_ID) "+ "WHERE c.IsActive='Y' AND c.C_UOM_ID=? AND c.C_UOM_TO_ID=? "+ " AND c.M_Product_ID IS NULL"+ " ORDER BY c.AD_Client_ID DESC, c.AD_Org_ID DESC";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_UOM_From_ID);    pstmt.setInt(2,C_UOM_To_ID);    rs=pstmt.executeQuery();    if (rs.next()) {      retValue=rs.getBigDecimal(1);      precision=rs.getInt(StdPrecision ? 2 : 3);    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (retValue == null) {    s_log.info("NOT found - FromUOM=" + C_UOM_From_ID + ", ToUOM="+ C_UOM_To_ID);    return null;  }  if (GETRATE.equals(qty))   return retValue;  retValue=retValue.multiply(qty);  if (retValue.scale() > precision)   retValue=retValue.setScale(precision,BigDecimal.ROUND_HALF_UP);  return retValue;}  }
class C{  private void removeLocalHolder(String owner) throws Exception {  String holderPath=ZKPaths.makePath(_localvdcHolderRoot,owner);  _log.info("removing global lock holder {}",holderPath);  try {    _zkClient.delete().guaranteed().forPath(holderPath);  } catch (  KeeperException.NoNodeException e) {    _log.warn("The global lock holder {} has already been removed. e={}",holderPath,e);  }catch (  KeeperException e) {    _log.error("failed to remove global lock holder {}. e={}",holderPath,e);    throw e;  }catch (  Exception e) {    _log.error("failed to remove global lock holder {} due to unexpected exception {}",holderPath,e);    throw e;  }  _log.info("removed global lock holder {}",holderPath);}  }
class C{  protected void loadAndRun(final MqttSpyDaemonConfiguration configuration) throws SpyException {  final DaemonMqttConnectionDetails connectionSettings=configuration.getConnection();  configureMqtt(connectionSettings);  runScripts(connectionSettings.getBackgroundScript(),connectionSettings.getTestCases(),connectionSettings.getRunningMode());}  }
class C{  public static boolean isOrSubOf(Object obj,Class<?> parentClass){  Class<?> objectClass=obj.getClass();  return isOrSubOf(objectClass,parentClass);}  }
class C{  protected void checkResult(Instances result){  assertEquals(((RandomProjection)m_Filter).getNumberOfAttributes() + 1,result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());}  }
class C{  public synchronized boolean resetIndex(IPath containerPath){  String containerPathString=containerPath.getDevice() == null ? containerPath.toString() : containerPath.toOSString();  try {    IndexLocation indexLocation=computeIndexLocation(containerPath);    Index index=getIndex(indexLocation);    if (VERBOSE) {      Util.verbose("-> reseting index: " + indexLocation + " for path: "+ containerPathString);    }    if (index == null) {      return recreateIndex(containerPath) != null;    }    index.reset();    return true;  } catch (  IOException e) {    if (VERBOSE) {      Util.verbose("-> failed to reset index for path: " + containerPathString);      e.printStackTrace();    }    return false;  }}  }
class C{  public static byte POSTFIX_INCREMENT(Byte a){  return a;}  }
class C{  public Object resolveReference(String link,boolean cacheRemoteFile){  if (link == null) {    String message=Logging.getMessage("nullValue.DocumentSourceIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    String[] linkParts=link.split("#");    String linkBase=linkParts[0];    String linkRef=linkParts.length > 1 ? linkParts[1] : null;    if (WWUtil.isEmpty(linkBase) && !WWUtil.isEmpty(linkRef))     return this.getItemByID(linkRef);    String path=this.getSupportFilePath(linkBase);    if (path == null)     path=linkBase;    Object o=WorldWind.getSessionCache().get(path);    if (o != null && o instanceof KMLRoot)     return linkRef != null ? ((KMLRoot)o).getItemByID(linkRef) : o;    URL url=WWIO.makeURL(path);    if (url == null) {      o=this.resolveLocalReference(path,linkRef);    }    if (o == null)     o=this.resolveRemoteReference(path,linkRef,cacheRemoteFile);    if (o != null)     return o;    return this.getItemByID(link);  } catch (  Exception e) {    String message=Logging.getMessage("generic.UnableToResolveReference",link);    Logging.logger().warning(message);  }  return null;}  }
class C{  public static Object invoke(Object obj,String methodName,int newValue) throws NoSuchMethodException {  try {    Method method=obj.getClass().getMethod(methodName,new Class[]{Integer.TYPE});    return method.invoke(obj,new Object[]{newValue});  } catch (  IllegalAccessException e) {    throw new NoSuchMethodException(methodName + " is not accessible");  }catch (  InvocationTargetException e) {    throw new InternalError(e.getMessage());  }}  }
class C{  public CSVWriter(String path){  log.info("Initializing  ...");  try {    writer=IOUtils.getBufferedWriter(path);  } catch (  Exception ee) {    ee.printStackTrace();    throw new RuntimeException("writer could not be instantiated");  }  if (writer == null) {    throw new RuntimeException("writer is null");  }  log.info("... done!");}  }
class C{  private void mergeAt(int i){  assert stackSize >= 2;  assert i >= 0;  assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  assert len1 > 0 && len2 > 0;  assert base1 + len1 == base2;  runLen[i]=len1 + len2;{    if (i == stackSize - 3) {      runBase[i + 1]=runBase[i + 2];      runLen[i + 1]=runLen[i + 2];    }  }  stackSize--;  int k=gallopRight(a[base2],a,base1,len1,0,c);  assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft(a[base1 + len1 - 1],a,base2,len2,len2 - 1,c);  assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  public boolean contains(final MediaTypes types){  boolean contains=false;  for (  final MediaType type : types.list) {    if (this.contains(type)) {      contains=true;      break;    }  }  return contains;}  }
class C{  public void replaceFromWith(int from,java.util.Collection other){  checkRange(from,size);  java.util.Iterator e=other.iterator();  int index=from;  int limit=Math.min(size - from,other.size());  for (int i=0; i < limit; i++)   elements[index++]=e.next();}  }
class C{  public Seconds plus(Seconds seconds){  if (seconds == null) {    return this;  }  return plus(seconds.getValue());}  }
class C{  public long cmajflt(){  return Long.parseLong(fields[12]);}  }
class C{  public void addVendorDescriptor(VendorWebAppDescriptor descr){  this.vendorDescriptors.add(descr);}  }
class C{  public T caseExportedVariableDeclaration(ExportedVariableDeclaration object){  return null;}  }
class C{  public void init(Compiler compiler,int opPos,int stepType) throws javax.xml.transform.TransformerException {  super.init(compiler,opPos,stepType);switch (stepType) {case OpCodes.OP_FUNCTION:case OpCodes.OP_EXTFUNCTION:    m_mustHardReset=true;case OpCodes.OP_GROUP:case OpCodes.OP_VARIABLE:  m_expr=compiler.compile(opPos);m_expr.exprSetParent(this);if (m_expr instanceof org.apache.xpath.operations.Variable) {m_canDetachNodeset=false;}break;default :m_expr=compiler.compile(opPos + 2);m_expr.exprSetParent(this);}}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void addProperties(String propFile) throws MalformedURLException {  addProperties(fetchProperties(PropUtils.getResourceOrFileOrURL(propFile)));}  }
class C{  public void printTo(StringBuffer buf,ReadableInstant instant){  long millis=DateTimeUtils.getInstantMillis(instant);  Chronology chrono=DateTimeUtils.getInstantChronology(instant);  printTo(buf,millis,chrono);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"mov");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a mov instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  Helpers.generateMov(environment,baseOffset,instruction,instructions);}  }
class C{  public Builder clear(){  reinitialize();  return this;}  }
class C{  public void spaceHorizontal(ArrayList<Integer> nodes){  if (m_bNeedsUndoAction) {    addUndoAction(new spaceHorizontalAction(nodes));  }  int nMinX=-1;  int nMaxX=-1;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nX=getPositionX(nodes.get(iNode));    if (nX < nMinX || iNode == 0) {      nMinX=nX;    }    if (nX > nMaxX || iNode == 0) {      nMaxX=nX;    }  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    m_nPositionX.set(nNode,(int)(nMinX + iNode * (nMaxX - nMinX) / (nodes.size() - 1.0)));  }}  }
class C{  public static PrivateKey loadPrivateKeyFromBinaryFile(final String keyFile) throws IOException, InvalidKeySpecException, NoSuchAlgorithmException {  final PKCS8EncodedKeySpec privateKeySpec=new PKCS8EncodedKeySpec(loadBinaryFileAsBytes(keyFile));  final PrivateKey privateKey=KeyFactory.getInstance(ALGORITHM).generatePrivate(privateKeySpec);  return privateKey;}  }
class C{  public Pool find(String name){  return this.pools.get(name);}  }
class C{  public final java_cup.runtime.symbol CUP$do_action(int CUP$act_num,java_cup.runtime.lr_parser CUP$parser,java.util.Stack CUP$stack,int CUP$top) throws java.lang.Exception {  java_cup.runtime.symbol CUP$result;switch (CUP$act_num) {case 222:{      CUP$result=new symbol(46);      classFile.endTableswitch(((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val);    }  return CUP$result;case 221:{  CUP$result=new symbol(46);  classFile.endTableswitch(((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);}return CUP$result;case 220:{CUP$result=new symbol(47);classFile.addTableswitch(((int_token)CUP$stack.elementAt(CUP$top - 1)).int_val);}return CUP$result;case 219:{CUP$result=new symbol(47);classFile.addTableswitch(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);}return CUP$result;case 218:{CUP$result=new symbol(48);}return CUP$result;case 217:{CUP$result=new symbol(48);}return CUP$result;case 216:{CUP$result=new symbol(44);classFile.newTableswitch(((int_token)CUP$stack.elementAt(CUP$top - 2)).int_val,((int_token)CUP$stack.elementAt(CUP$top - 1)).int_val);}return CUP$result;case 215:{CUP$result=new symbol(44);classFile.newTableswitch(((int_token)CUP$stack.elementAt(CUP$top - 1)).int_val);}return CUP$result;case 214:{CUP$result=new symbol(43);}return CUP$result;case 213:{CUP$result=new symbol(30);classFile.endLookupswitch(((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val);}return CUP$result;case 212:{CUP$result=new symbol(30);classFile.endLookupswitch(((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);}return CUP$result;case 211:{CUP$result=new symbol(31);classFile.addLookupswitch(((int_token)CUP$stack.elementAt(CUP$top - 3)).int_val,((int_token)CUP$stack.elementAt(CUP$top - 1)).int_val);}return CUP$result;case 210:{CUP$result=new symbol(31);classFile.addLookupswitch(((int_token)CUP$stack.elementAt(CUP$top - 3)).int_val,((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);}return CUP$result;case 209:{CUP$result=new symbol(32);}return CUP$result;case 208:{CUP$result=new symbol(32);}return CUP$result;case 207:{CUP$result=new symbol(29);classFile.newLookupswitch();}return CUP$result;case 206:{CUP$result=new symbol(28);}return CUP$result;case 205:{CUP$result=new symbol(14);}return CUP$result;case 204:{CUP$result=new symbol(14);}return CUP$result;case 203:{CUP$result=new symbol(37);classFile.plantRelativeGoto(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,((relative_num_token)CUP$stack.elementAt(CUP$top - 0)).int_val);}return CUP$result;case 202:{CUP$result=new symbol(37);classFile.plantString(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);}return CUP$result;case 201:{CUP$result=new symbol(37);classFile.plant(((str_token)CUP$stack.elementAt(CUP$top - 2)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);}return CUP$result;case 200:{CUP$result=new symbol(37);classFile.plant(((str_token)CUP$stack.elementAt(CUP$top - 2)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val);}return CUP$result;case 199:{CUP$result=new symbol(37);classFile.plant(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);}return CUP$result;case 198:{CUP$result=new symbol(37);classFile.plant(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,((num_token)CUP$stack.elementAt(CUP$top - 0)).num_val);}return CUP$result;case 197:{CUP$result=new symbol(37);classFile.plant(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val);}return CUP$result;case 196:{CUP$result=new symbol(37);classFile.plant(((str_token)CUP$stack.elementAt(CUP$top - 2)).str_val,((int_token)CUP$stack.elementAt(CUP$top - 1)).int_val,((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val);}return CUP$result;case 195:{CUP$result=new symbol(37);classFile.plant(((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);}return CUP$result;case 194:{CUP$result=new symbol(21);}return CUP$result;case 193:{CUP$result=new symbol(21);}return CUP$result;case 192:{CUP$result=new symbol(36);scanner.dict.put(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,((var_token)CUP$stack.elementAt(CUP$top - 0)));}return CUP$result;case 191:{CUP$result=new symbol(12);classFile.addCatch(((str_token)CUP$stack.elementAt(CUP$top - 6)).str_val,((int_token)CUP$stack.elementAt(CUP$top - 4)).int_val,((int_token)CUP$stack.elementAt(CUP$top - 2)).int_val,((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val);}return CUP$result;case 190:{CUP$result=new symbol(12);classFile.addCatch(((str_token)CUP$stack.elementAt(CUP$top - 6)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 4)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 2)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);}return CUP$result;case 189:{CUP$result=new symbol(49);classFile.addThrow(((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);}return CUP$result;case 188:{CUP$result=new symbol(45);classFile.addLine(((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val);}return CUP$result;case 187:{CUP$result=new symbol(27);classFile.report_error(".limit expected \"stack\" or \"locals\", but got " + ((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);}return CUP$result;case 186:{CUP$result=new symbol(27);classFile.setStackSize(((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val);}return CUP$result;case 185:{CUP$result=new symbol(27);classFile.setVarSize(((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val);}return CUP$result;case 184:{CUP$result=new str_token(5);((str_token)CUP$result).str_val=null;}return CUP$result;case 183:{CUP$result=new str_token(5);((str_token)CUP$result).str_val=((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val;}return CUP$result;case 182:{CUP$result=new symbol(50);classFile.addVar(((int_token)CUP$stack.elementAt(CUP$top - 2)).int_val,((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val,((str_token)CUP$stack.elementAt(CUP$top - 6)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 5)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 4)).str_val,((int_token)CUP$stack.elementAt(CUP$top - 8)).int_val);}return CUP$result;case 181:{CUP$result=new symbol(50);classFile.addVar(null,null,((str_token)CUP$stack.elementAt(CUP$top - 2)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val,((int_token)CUP$stack.elementAt(CUP$top - 4)).int_val);}return CUP$result;case 180:{CUP$result=new symbol(50);classFile.addVar(((str_token)CUP$stack.elementAt(CUP$top - 2)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 6)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 5)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 4)).str_val,((int_token)CUP$stack.elementAt(CUP$top - 8)).int_val);}return CUP$result;case 179:{CUP$result=new symbol(96);classFile.endStack();}return CUP$result;case 178:{CUP$result=new symbol(100);classFile.plantStackStack(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,String.valueOf(((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val));}return CUP$result;case 177:{CUP$result=new symbol(100);classFile.plantStackStack(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);}return CUP$result;case 176:{CUP$result=new symbol(100);classFile.plantStackStack(((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val,null);}return CUP$result;case 175:{CUP$result=new symbol(100);classFile.plantStackLocals(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,String.valueOf(((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val));}return CUP$result;case 174:{CUP$result=new symbol(100);classFile.plantStackLocals(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);}return CUP$result;case 173:{CUP$result=new symbol(100);classFile.plantStackLocals(((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val,null);}return CUP$result;case 172:{CUP$result=new symbol(99);}return CUP$result;case 171:{CUP$result=new symbol(98);}return CUP$result;case 170:{CUP$result=new symbol(98);}return CUP$result;case 169:{CUP$result=new symbol(97);}return CUP$result;case 168:{CUP$result=new symbol(97);classFile.plantStackOffset(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);}return CUP$result;case 167:{CUP$result=new symbol(97);classFile.plantStackOffset(((int_token)CUP$stack.elementAt(CUP$top - 1)).int_val);}return CUP$result;case 166:{CUP$result=new symbol(95);}return CUP$result;case 165:{CUP$result=new symbol(94);classFile.beginStack(false);}return CUP$result;case 164:{CUP$result=new symbol(103);classFile.beginStack(true);}return CUP$result;case 163:{CUP$result=new symbol(103);classFile.beginStack(((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val);}return CUP$result;case 162:{CUP$result=new symbol(102);}return CUP$result;case 161:{CUP$result=new symbol(101);}return CUP$result;case 160:{CUP$result=new symbol(101);}return CUP$result;case 159:{CUP$result=new symbol(16);}return CUP$result;case 158:{CUP$result=new symbol(16);}return CUP$result;case 157:{CUP$result=new symbol(16);}return CUP$result;case 156:{CUP$result=new symbol(16);}return CUP$result;case 155:{CUP$result=new symbol(16);}return CUP$result;case 154:{CUP$result=new symbol(16);}return CUP$result;case 153:{CUP$result=new symbol(16);}return CUP$result;case 152:{CUP$result=new symbol(16);}return CUP$result;case 151:{CUP$result=new symbol(16);}return CUP$result;case 150:{CUP$result=new symbol(16);}return CUP$result;case 149:{CUP$result=new symbol(16);}return CUP$result;case 148:{CUP$result=new symbol(16);}return CUP$result;case 147:{CUP$result=new symbol(26);classFile.plantLabel(String.valueOf(((int_token)CUP$stack.elementAt(CUP$top - 2)).int_val));}return CUP$result;case 146:{CUP$result=new symbol(26);classFile.plantLabel(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);}return CUP$result;case 145:{CUP$result=new symbol(41);}return CUP$result;case 144:{CUP$result=new symbol(41);}return CUP$result;case 143:{CUP$result=new symbol(41);}return CUP$result;case 142:{CUP$result=new symbol(41);}return CUP$result;case 141:{CUP$result=new symbol(41);}return CUP$result;case 140:{CUP$result=new symbol(39);}return CUP$result;case 139:{CUP$result=new java_cup.runtime.token(106);classFile.setLine(scanner.token_line_num);}return CUP$result;case 138:{CUP$result=new symbol(40);}return CUP$result;case 137:{CUP$result=new symbol(40);}return CUP$result;case 136:{CUP$result=new symbol(17);classFile.endMethod();}return CUP$result;case 135:{CUP$result=new symbol(15);String split[]=ScannerUtils.splitMethodSignature(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);classFile.newMethod(split[0],split[1],((int_token)CUP$stack.elementAt(CUP$top - 2)).int_val);}return CUP$result;case 134:{CUP$result=new symbol(34);}return CUP$result;case 133:{CUP$result=new symbol(34);}return CUP$result;case 132:{CUP$result=new symbol(33);}return CUP$result;case 131:{CUP$result=new symbol(33);}return CUP$result;case 130:{CUP$result=new symbol(35);}return CUP$result;case 129:{CUP$result=new symbol(35);}return CUP$result;case 128:{CUP$result=new str_token(4);((str_token)CUP$result).str_val=null;}return CUP$result;case 127:{CUP$result=new str_token(4);((str_token)CUP$result).str_val=((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val;}return CUP$result;case 126:{CUP$result=new str_token(3);((str_token)CUP$result).str_val=null;}return CUP$result;case 125:{CUP$result=new str_token(3);((str_token)CUP$result).str_val=((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val;}return CUP$result;case 124:{CUP$result=new str_token(2);((str_token)CUP$result).str_val=null;}return CUP$result;case 123:{CUP$result=new str_token(2);((str_token)CUP$result).str_val=((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val;}return CUP$result;case 122:{CUP$result=new symbol(72);classFile.addInner((short)(((int_token)CUP$stack.elementAt(CUP$top - 4)).int_val | RuntimeConstants.ACC_INTERFACE),((str_token)CUP$stack.elementAt(CUP$top - 3)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 2)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);}return CUP$result;case 121:{CUP$result=new symbol(72);classFile.addInner((short)((int_token)CUP$stack.elementAt(CUP$top - 4)).int_val,((str_token)CUP$stack.elementAt(CUP$top - 3)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 2)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);}return CUP$result;case 120:{CUP$result=new symbol(71);}return CUP$result;case 119:{CUP$result=new symbol(71);}return CUP$result;case 118:{CUP$result=new symbol(70);}return CUP$result;case 117:{CUP$result=new symbol(70);}return CUP$result;case 116:{CUP$result=new var_token(8);((var_token)CUP$result).var_val=((var_token)CUP$stack.elementAt(CUP$top - 0)).var_val;}return CUP$result;case 115:{CUP$result=new var_token(8);((var_token)CUP$result).var_val=((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val;}return CUP$result;case 114:{CUP$result=new var_token(7);((var_token)CUP$result).var_val=((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val;}return CUP$result;case 113:{CUP$result=new var_token(7);((var_token)CUP$result).var_val=((num_token)CUP$stack.elementAt(CUP$top - 0)).num_val;}return CUP$result;case 112:{CUP$result=new var_token(7);((var_token)CUP$result).var_val=new Integer(((int_token)CUP$stack.elementAt(CUP$top - 0)).int_val);}return CUP$result;case 111:{CUP$result=new symbol(69);}return CUP$result;case 110:{CUP$result=new symbol(69);}return CUP$result;case 109:{CUP$result=new symbol(69);}return CUP$result;case 108:{CUP$result=new symbol(69);}return CUP$result;case 107:{CUP$result=new symbol(68);}return CUP$result;case 106:{CUP$result=new symbol(68);}return CUP$result;case 105:{CUP$result=new symbol(67);}return CUP$result;case 104:{CUP$result=new symbol(67);}return CUP$result;case 103:{CUP$result=new symbol(66);classFile.endField();}return CUP$result;case 102:{CUP$result=new symbol(65);classFile.beginField((short)((int_token)CUP$stack.elementAt(CUP$top - 4)).int_val,((str_token)CUP$stack.elementAt(CUP$top - 3)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 2)).str_val,((var_token)CUP$stack.elementAt(CUP$top - 1)).var_val);}return CUP$result;case 101:{CUP$result=new var_token(6);((var_token)CUP$result).var_val=null;}return CUP$result;case 100:{CUP$result=new var_token(6);((var_token)CUP$result).var_val=((var_token)CUP$stack.elementAt(CUP$top - 0)).var_val;}return CUP$result;case 99:{CUP$result=new symbol(19);}return CUP$result;case 98:{CUP$result=new symbol(19);classFile.addField((short)((int_token)CUP$stack.elementAt(CUP$top - 4)).int_val,((str_token)CUP$stack.elementAt(CUP$top - 3)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 2)).str_val,null,((var_token)CUP$stack.elementAt(CUP$top - 1)).var_val);}return CUP$result;case 97:{CUP$result=new symbol(19);classFile.addField((short)((int_token)CUP$stack.elementAt(CUP$top - 6)).int_val,((str_token)CUP$stack.elementAt(CUP$top - 5)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 4)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 2)).str_val,((var_token)CUP$stack.elementAt(CUP$top - 1)).var_val);}return CUP$result;case 96:{CUP$result=new symbol(18);}return CUP$result;case 95:{CUP$result=new symbol(18);}return CUP$result;case 94:{CUP$result=new symbol(20);}return CUP$result;case 93:{CUP$result=new symbol(20);}return CUP$result;case 92:{CUP$result=new symbol(64);classFile.addGenericAttr(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);}return CUP$result;case 91:{CUP$result=new symbol(63);}return CUP$result;case 90:{CUP$result=new symbol(62);}return CUP$result;case 89:{CUP$result=new symbol(62);}return CUP$result;case 88:{CUP$result=new symbol(61);}return CUP$result;case 87:{CUP$result=new symbol(61);}return CUP$result;case 86:{CUP$result=new symbol(53);}return CUP$result;case 85:{CUP$result=new symbol(53);classFile.setEnclosingMethod(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);}return CUP$result;case 84:{CUP$result=new symbol(58);classFile.setSourceDebugExtension(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);}return CUP$result;case 83:{CUP$result=new symbol(57);}return CUP$result;case 82:{CUP$result=new symbol(57);}return CUP$result;case 81:{CUP$result=new symbol(52);}return CUP$result;case 80:{CUP$result=new symbol(52);}return CUP$result;case 79:{CUP$result=new symbol(87);classFile.addAnnotationField(null,((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);}return CUP$result;case 78:{CUP$result=new symbol(87);classFile.addAnnotationField(null,((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val,null);}return CUP$result;case 77:{CUP$result=new symbol(84);}return CUP$result;case 76:{CUP$result=new symbol(89);classFile.nestAnnotation();}return CUP$result;case 75:{CUP$result=new symbol(91);}return CUP$result;case 74:{CUP$result=new symbol(92);}return CUP$result;case 73:{CUP$result=new symbol(92);}return CUP$result;case 72:{CUP$result=new symbol(86);classFile.addAnnotationValue(((var_token)CUP$stack.elementAt(CUP$top - 0)).var_val);}return CUP$result;case 71:{CUP$result=new symbol(85);}return CUP$result;case 70:{CUP$result=new symbol(85);}return CUP$result;case 69:{CUP$result=new symbol(93);}return CUP$result;case 68:{CUP$result=new symbol(93);}return CUP$result;case 67:{CUP$result=new symbol(83);classFile.addAnnotation();}return CUP$result;case 66:{CUP$result=new symbol(88);classFile.addAnnotationField(((str_token)CUP$stack.elementAt(CUP$top - 2)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);}return CUP$result;case 65:{CUP$result=new symbol(88);classFile.addAnnotationField(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val,null);}return CUP$result;case 64:{CUP$result=new symbol(82);}return CUP$result;case 63:{CUP$result=new symbol(81);}return CUP$result;case 62:{CUP$result=new symbol(81);}return CUP$result;case 61:{CUP$result=new symbol(80);}return CUP$result;case 60:{CUP$result=new symbol(80);}return CUP$result;case 59:{CUP$result=new symbol(79);classFile.addAnnotation(false,((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,((int_token)CUP$stack.elementAt(CUP$top - 2)).int_val);}return CUP$result;case 58:{CUP$result=new symbol(79);classFile.addAnnotation(true,((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,((int_token)CUP$stack.elementAt(CUP$top - 2)).int_val);}return CUP$result;case 57:{CUP$result=new symbol(79);classFile.addAnnotation(false,((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);}return CUP$result;case 56:{CUP$result=new symbol(79);classFile.addAnnotation(true,((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);}return CUP$result;case 55:{CUP$result=new symbol(78);classFile.addAnnotation(false,((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);}return CUP$result;case 54:{CUP$result=new symbol(78);classFile.addAnnotation(true,((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);}return CUP$result;case 53:{CUP$result=new symbol(77);}return CUP$result;case 52:{CUP$result=new symbol(76);classFile.endAnnotation();}return CUP$result;case 51:{CUP$result=new symbol(90);}return CUP$result;case 50:{CUP$result=new symbol(75);}return CUP$result;case 49:{CUP$result=new symbol(74);}return CUP$result;case 48:{CUP$result=new symbol(74);}return CUP$result;case 47:{CUP$result=new symbol(73);}return CUP$result;case 46:{CUP$result=new symbol(73);}return CUP$result;case 45:{CUP$result=new symbol(24);classFile.addInterface(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);}return CUP$result;case 44:{CUP$result=new symbol(23);}return CUP$result;case 43:{CUP$result=new symbol(23);}return CUP$result;case 42:{CUP$result=new symbol(22);}return CUP$result;case 41:{CUP$result=new symbol(22);}return CUP$result;case 40:{CUP$result=new symbol(42);classFile.setSuperClass(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);}return CUP$result;case 39:{CUP$result=new symbol(9);access_val|=RuntimeConstants.ACC_SYNTHETIC;}return CUP$result;case 38:{CUP$result=new symbol(9);access_val|=RuntimeConstants.ACC_STRICT;}return CUP$result;case 37:{CUP$result=new symbol(9);access_val|=RuntimeConstants.ACC_VARARGS;}return CUP$result;case 36:{CUP$result=new symbol(9);access_val|=RuntimeConstants.ACC_BRIDGE;}return CUP$result;case 35:{CUP$result=new symbol(9);access_val|=RuntimeConstants.ACC_ENUM;}return CUP$result;case 34:{CUP$result=new symbol(9);access_val|=RuntimeConstants.ACC_ANNOTATION;}return CUP$result;case 33:{CUP$result=new symbol(9);access_val|=RuntimeConstants.ACC_ABSTRACT;}return CUP$result;case 32:{CUP$result=new symbol(9);access_val|=RuntimeConstants.ACC_INTERFACE;}return CUP$result;case 31:{CUP$result=new symbol(9);access_val|=RuntimeConstants.ACC_NATIVE;}return CUP$result;case 30:{CUP$result=new symbol(9);access_val|=RuntimeConstants.ACC_TRANSIENT;}return CUP$result;case 29:{CUP$result=new symbol(9);access_val|=RuntimeConstants.ACC_VOLATILE;}return CUP$result;case 28:{CUP$result=new symbol(9);access_val|=RuntimeConstants.ACC_SYNCHRONIZED;}return CUP$result;case 27:{CUP$result=new symbol(9);access_val|=RuntimeConstants.ACC_FINAL;}return CUP$result;case 26:{CUP$result=new symbol(9);access_val|=RuntimeConstants.ACC_STATIC;}return CUP$result;case 25:{CUP$result=new symbol(9);access_val|=RuntimeConstants.ACC_PROTECTED;}return CUP$result;case 24:{CUP$result=new symbol(9);access_val|=RuntimeConstants.ACC_PRIVATE;}return CUP$result;case 23:{CUP$result=new symbol(9);access_val|=RuntimeConstants.ACC_PUBLIC;}return CUP$result;case 22:{CUP$result=new symbol(10);}return CUP$result;case 21:{CUP$result=new symbol(10);}return CUP$result;case 20:{CUP$result=new symbol(11);}return CUP$result;case 19:{CUP$result=new symbol(11);}return CUP$result;case 18:{CUP$result=new int_token(104);((int_token)CUP$result).int_val=access_val;}return CUP$result;case 17:{CUP$result=new java_cup.runtime.token(105);access_val=0;}return CUP$result;case 16:{CUP$result=new str_token(1);((str_token)CUP$result).str_val=ScannerUtils.convertDots(((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);}return CUP$result;case 15:{CUP$result=new symbol(13);classFile.setClass(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,(short)(((int_token)CUP$stack.elementAt(CUP$top - 2)).int_val | RuntimeConstants.ACC_SUPER | RuntimeConstants.ACC_INTERFACE));}return CUP$result;case 14:{CUP$result=new symbol(13);classFile.setClass(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val,(short)(((int_token)CUP$stack.elementAt(CUP$top - 2)).int_val | RuntimeConstants.ACC_SUPER));}return CUP$result;case 13:{CUP$result=new symbol(38);}return CUP$result;case 12:{CUP$result=new symbol(38);classFile.setSource(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);}return CUP$result;case 11:{CUP$result=new symbol(38);classFile.setSource(((str_token)CUP$stack.elementAt(CUP$top - 1)).str_val);}return CUP$result;case 10:{CUP$result=new symbol(51);}return CUP$result;case 9:{CUP$result=new symbol(51);classFile.setVersion(((num_token)CUP$stack.elementAt(CUP$top - 1)).num_val);}return CUP$result;case 8:{CUP$result=new symbol(60);classFile.setDeprecated();}return CUP$result;case 7:{CUP$result=new symbol(59);}return CUP$result;case 6:{CUP$result=new symbol(59);}return CUP$result;case 5:{CUP$result=new symbol(55);classFile.setSignature(((str_token)CUP$stack.elementAt(CUP$top - 0)).str_val);}return CUP$result;case 4:{CUP$result=new symbol(54);}return CUP$result;case 3:{CUP$result=new symbol(54);}return CUP$result;case 2:{CUP$result=new symbol(56);classFile.endHeader();}return CUP$result;case 1:{CUP$result=new java_cup.runtime.token(0);}CUP$parser.done_parsing();return CUP$result;case 0:{CUP$result=new symbol(25);}return CUP$result;default :throw new Exception("Invalid action number found in internal parse table");}}  }
class C{  public BrowsePathResult clone(){  BrowsePathResult result=new BrowsePathResult();  result.StatusCode=StatusCode;  if (Targets != null) {    result.Targets=new BrowsePathTarget[Targets.length];    for (int i=0; i < Targets.length; i++)     result.Targets[i]=Targets[i].clone();  }  return result;}  }
class C{  public N random(){  return node(RAND.nextLong());}  }
class C{  public static boolean sourceAndTargetNeuronGroupsSelected(NetworkPanel networkPanel){  if ((networkPanel.getSourceModelGroups().size() > 0) && (networkPanel.getSelectedModelNeuronGroups().size() > 0)) {    return true;  }  return false;}  }
class C{  public Face bindTexture(Texture texture){  this.texture=Optional.of(texture);  return this;}  }
class C{  private void flattenComments(T1Listing listing){  if (listing != null) {    if (this.fetchMoreComments) {      for (      More mor : listing.getData().getMoreChildren()) {        Integer MAX_ITEMS_PER_QUERY=20;        List<List<String>> listOfIdLists=new ArrayList<>();        for (int i=0; i <= mor.getData().getChildren().size(); i+=MAX_ITEMS_PER_QUERY) {          listOfIdLists.add(mor.getData().getChildren().subList(i,Math.min(i + MAX_ITEMS_PER_QUERY,mor.getData().getChildren().size())));        }        for (        List<String> idLst : listOfIdLists) {          this.flattenComments(rApi.getMoreChildren(idLst,super.getSubmissionPost().getData().getName(),Sorting.NEW).getMoreChildrenComments());        }      }    }    for (    T1 comm : listing.getData().getChildren()) {      flatComments.add(comm.getData());      if (comm.getData().getReplies() != null) {        this.flattenComments(comm.getData().getReplies());      }    }  }}  }
class C{  public void unregisterMediaButtonIntent(PendingIntent mediaIntent){  Log.i(TAG,"  Remote Control   unregisterMediaButtonIntent() for " + mediaIntent);synchronized (mAudioFocusLock) {synchronized (mRCStack) {      boolean topOfStackWillChange=isCurrentRcController(mediaIntent);      removeMediaButtonReceiver_syncAfRcs(mediaIntent);      if (topOfStackWillChange) {        checkUpdateRemoteControlDisplay_syncAfRcs(RC_INFO_ALL);      }    }  }}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  public MultiDataPathUpgrader(NodeEnvironment nodeEnvironment){  this.nodeEnvironment=nodeEnvironment;}  }
class C{  public static double cuCabs(cuDoubleComplex x){  double p=cuCreal(x);  double q=cuCimag(x);  double r;  if (p == 0)   return q;  if (q == 0)   return p;  p=Math.sqrt(p);  q=Math.sqrt(q);  if (p < q) {    r=p;    p=q;    q=r;  }  r=q / p;  return p * Math.sqrt(1.0f + r * r);}  }
class C{  public PageBlobInputStream(RowCursor cursor,ColumnBlob column,PageBlob blobPage){  _pageReader=new BlobReaderPageImpl(cursor,column,blobPage);  _length=_pageReader.getLength();}  }
class C{  private Cache createCache() throws CacheException {  return new CacheFactory().set(MCAST_PORT,"0").create();}  }
class C{  public void addAdditionalFacilityData(ActivityFacilities facilities){  log.warn("changed this data flow (by adding the _cnt_ column) but did not test.  If it works, please remove this warning. kai, mar'14");  if (this.lockedForAdditionalFacilityData) {    throw new RuntimeException("too late for adding additional facility data; spatial grids have already been generated.  Needs" + " to be called before generating the spatial grids.  (This design should be improved ..)");  }  if (facilities.getName() == null || facilities.getName().equals("")) {    throw new RuntimeException("cannot add unnamed facility containers here since we need a key to find them again");  }  for (  ActivityFacilities existingFacilities : this.additionalFacilityData) {    if (existingFacilities.getName().equals(facilities.getName())) {      throw new RuntimeException("additional facilities under the name of + " + facilities.getName() + " already exist; cannot add additional facilities under the same name twice.");    }  }  this.additionalFacilityData.add(facilities);}  }
class C{  public static String encodePrivateKey(byte[] keyBytes){  byte[] b64Key=Base64Util.encodeWithNewLine(keyBytes);  ByteArrayOutputStream out=new ByteArrayOutputStream();  out.write(PRIVSTE_KEY_HEADER.getBytes(),0,PRIVSTE_KEY_HEADER.length());  out.write(b64Key,0,b64Key.length);  String footer=(b64Key[b64Key.length - 1] == '\n') ? PRIVATE_KEY_FOOTER : PRIVATE_KEY_FOOTER_WITH_NEWLINE;  out.write(footer.getBytes(),0,footer.length());  return out.toString().replace("\0","").replace("\r","");}  }
class C{  ReachingDefinitionAnalyser(Function<Vertex,Set<Definition>> gen,Function<Vertex,Set<Definition>> kill){  this.gen=gen;  this.kill=kill;}  }
class C{  public void addLandingPad(int x,int z){  BlockPosition pos=new BlockPosition(x,0,z);  if (!spawnLocations.contains(pos)) {    spawnLocations.add(pos);    occupiedLandingPads.put(pos,false);  }}  }
class C{  public void decorateAtTimeCaptureRequest(final int mode,final String filename,final boolean frontFacing,final boolean isHDR,final float zoom,final String flashSetting,final boolean gridLinesOn,final float timerSeconds,final TouchCoordinate touchCoordinate,final Boolean volumeButtonShutter,final Rect activeSensorSize){  mMode=mode;  mFilename=filename;  mIsFrontFacing=frontFacing;  mIsHdr=isHDR;  mZoom=zoom;  mFlashSetting=flashSetting;  mGridLinesOn=gridLinesOn;  mTimerSeconds=timerSeconds;  mTouchCoordinate=touchCoordinate;  mVolumeButtonShutter=volumeButtonShutter;  mActiveSensorSize=activeSensorSize;}  }
class C{  int size(){  OneRowChange oneRowChange=changeSet.getOneRowChange();  if (isDelete())   return oneRowChange.getKeyValues().size(); else   return oneRowChange.getColumnValues().size();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:10.254 -0500",hash_original_method="10AA1BA0464BE4692583736E1FB9D6CA",hash_generated_method="A3387316C83FBF149BB8EE16153566EB") public static void clearDnsCache(){  addressCache.clear();}  }
class C{  public int compareTo(Relationship another){  if (this == another) {    return 0;  }  int index=((Relationship)another).getIndex();  if (getIndex() > index) {    return 1;  } else   if (index == getIndex()) {    return 0;  } else {    return -1;  }}  }
class C{  private Map<String,String> readSSLConfiguration(boolean useSsl,String keystoreToUse,String keystorePasswordToUse,String truststoreToUse,String truststorePasswordToUse,String sslCiphersToUse,String sslProtocolsToUse,String gfSecurityPropertiesPath) throws IOException {  Gfsh gfshInstance=getGfsh();  final Map<String,String> sslConfigProps=new LinkedHashMap<String,String>();  if (useSsl || gfSecurityPropertiesPath != null) {    String gfSecurityPropertiesPathToUse=CliUtil.resolvePathname(gfSecurityPropertiesPath);    URL gfSecurityPropertiesUrl=null;    if (!StringUtils.isBlank(gfSecurityPropertiesPathToUse)) {      if (!IOUtils.isExistingPathname(gfSecurityPropertiesPathToUse)) {        gfshInstance.printAsSevere(CliStrings.format(CliStrings.GEODE_0_PROPERTIES_1_NOT_FOUND_MESSAGE,"Security ",gfSecurityPropertiesPathToUse));      } else {        gfSecurityPropertiesUrl=new File(gfSecurityPropertiesPathToUse).toURI().toURL();      }    } else     if (useSsl && gfSecurityPropertiesPath == null) {      gfSecurityPropertiesUrl=getFileUrl("gfsecurity.properties");    }    if (gfSecurityPropertiesUrl != null) {      gfshInstance.logToFile("Using security properties file : " + CliUtil.decodeWithDefaultCharSet(gfSecurityPropertiesUrl.getPath()),null);      Map<String,String> gfsecurityProps=loadPropertiesFromURL(gfSecurityPropertiesUrl);      sslConfigProps.putAll(gfsecurityProps);    }  }  int numTimesPrompted=0;  do {    if (numTimesPrompted > 0) {      Gfsh.println("Please specify these SSL Configuration properties: ");    }    if (numTimesPrompted > 0) {      keystoreToUse=gfshInstance.readText(CliStrings.CONNECT__KEY_STORE + ": ");    }    if (keystoreToUse != null && keystoreToUse.length() > 0) {      if (keystorePasswordToUse == null || keystorePasswordToUse.length() == 0) {        keystorePasswordToUse=sslConfigProps.get(Gfsh.SSL_KEYSTORE_PASSWORD);        if (keystorePasswordToUse == null || keystorePasswordToUse.length() == 0) {          keystorePasswordToUse=gfshInstance.readPassword(CliStrings.CONNECT__KEY_STORE_PASSWORD + ": ");          sslConfigProps.put(Gfsh.SSL_KEYSTORE_PASSWORD,keystorePasswordToUse);        }      } else {        sslConfigProps.put(Gfsh.SSL_KEYSTORE_PASSWORD,keystorePasswordToUse);      }      sslConfigProps.put(Gfsh.SSL_KEYSTORE,keystoreToUse);    }    if (numTimesPrompted > 0) {      truststoreToUse=gfshInstance.readText(CliStrings.CONNECT__TRUST_STORE + ": ");    }    if (truststoreToUse != null && truststoreToUse.length() > 0) {      if (truststorePasswordToUse == null || truststorePasswordToUse.length() == 0) {        truststorePasswordToUse=sslConfigProps.get(Gfsh.SSL_TRUSTSTORE_PASSWORD);        if (truststorePasswordToUse == null || truststorePasswordToUse.length() == 0) {          truststorePasswordToUse=gfshInstance.readPassword(CliStrings.CONNECT__TRUST_STORE_PASSWORD + ": ");          sslConfigProps.put(Gfsh.SSL_TRUSTSTORE_PASSWORD,truststorePasswordToUse);        }      } else {        sslConfigProps.put(Gfsh.SSL_TRUSTSTORE_PASSWORD,truststorePasswordToUse);      }      sslConfigProps.put(Gfsh.SSL_TRUSTSTORE,truststoreToUse);    }    if (numTimesPrompted > 0) {      sslCiphersToUse=gfshInstance.readText(CliStrings.CONNECT__SSL_CIPHERS + ": ");    }    if (sslCiphersToUse != null && sslCiphersToUse.length() > 0) {      sslConfigProps.put(Gfsh.SSL_ENABLED_CIPHERS,sslCiphersToUse);    }    if (numTimesPrompted > 0) {      sslProtocolsToUse=gfshInstance.readText(CliStrings.CONNECT__SSL_PROTOCOLS + ": ");    }    if (sslProtocolsToUse != null && sslProtocolsToUse.length() > 0) {      sslConfigProps.put(Gfsh.SSL_ENABLED_PROTOCOLS,sslProtocolsToUse);    }  } while (useSsl && sslConfigProps.isEmpty() && (0 == numTimesPrompted++)&& !gfshInstance.isQuietMode());  return sslConfigProps;}  }
class C{  public static <E>Set<E> constrainedSet(Set<E> set,Constraint<? super E> constraint){  return new ConstrainedSet<E>(set,constraint);}  }
class C{  public TargetInformationReplyParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_INFO);}  }
class C{  public static String replaceSubstring(String inString,String subString,String replaceString){  StringBuffer result=new StringBuffer();  int oldLoc=0, loc=0;  while ((loc=inString.indexOf(subString,oldLoc)) != -1) {    result.append(inString.substring(oldLoc,loc));    result.append(replaceString);    oldLoc=loc + subString.length();  }  result.append(inString.substring(oldLoc));  return result.toString();}  }
class C{  public static XContentBuilder yamlBuilder(OutputStream os) throws IOException {  return new XContentBuilder(YamlXContent.yamlXContent,os);}  }
class C{  public boolean isAttribute(String s){  if (name.length == s.length()) {    for (int i=0; i < name.length; i++) {      if (name[i] != s.charAt(i)) {        return false;      }    }    return true;  }  return false;}  }
class C{  void selectTab(Tab t){  Component[] components=getComponents();  JPanel buttonContainer=(JPanel)components[1];  Component[] buttons=buttonContainer.getComponents();  for (  Component c : buttons) {    if (c instanceof AbstractButton) {      AbstractButton b=(AbstractButton)c;      if (b.getClientProperty("tab").equals(t)) {        b.setSelected(true);        return;      }    }  }}  }
class C{  public tbody addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static void showGraphSettingsDialog(final JFrame parent,final ZyGraph graph){  final CGraphSettingsDialog dlg=new CGraphSettingsDialog(parent,"Graph Settings",graph.getSettings(),false,false);  dlg.setVisible(true);  if (!dlg.wasCanceled()) {    if (graph.getSettings().getLayoutSettings().getCurrentLayouter() instanceof CircularLayouter) {      graph.getSettings().getLayoutSettings().setDefaultGraphLayout(LayoutStyle.CIRCULAR);    } else     if (graph.getSettings().getLayoutSettings().getCurrentLayouter() instanceof IncrementalHierarchicLayouter) {      graph.getSettings().getLayoutSettings().setDefaultGraphLayout(LayoutStyle.HIERARCHIC);    } else     if (graph.getSettings().getLayoutSettings().getCurrentLayouter() instanceof OrthogonalLayouter) {      graph.getSettings().getLayoutSettings().setDefaultGraphLayout(LayoutStyle.ORTHOGONAL);    }    if (dlg.needsLayouting()) {      CGraphLayouter.refreshLayout(parent,graph);    }  }}  }
class C{  public void remove(){  if (this.lastReturned == null) {    throw new IllegalStateException();  }  if (this.lastReturned == SimpleList.this.root) {    SimpleList.this.removeFirst();  } else {    SimpleList.this.remove(this.lastReturned);  }}  }
class C{  public static void logError(final Logger logger,final Error e){  logger.logError(Level.SEVERE,"Unexpected Error",e);}  }
class C{  public DenseDoubleMatrix2D(double[][] values){  this(values.length,values.length == 0 ? 0 : values[0].length);  assign(values);}  }
class C{  public DoubleMatrix2D like2D(int rows,int columns){  return content.like2D(rows,columns);}  }
class C{  public void removeAllListeners(){  clientgui.getClient().getGame().removeGameListener(this);  clientgui.getBoardView().removeBoardViewListener(this);  clientgui.mechD.wPan.weaponList.removeListSelectionListener(this);}  }
class C{  public static String rawToAsciiString(byte[] quality,int length){  return rawToAsciiString(quality,0,length);}  }
class C{  public void testNoHotBackupAvailable() throws Exception {  TungstenProperties props=createProperties("testConfig",false);  BackupManager bmgr=new BackupManager(new MockEventDispatcher());  bmgr.initialize(props);  try {    bmgr.spawnBackup("foo","file",true);    throw new Exception("Backup spawned when online");  } catch (  BackupException e) {  }  bmgr.release();}  }
class C{  static void addTimestampReturningFormat(StringBuilder sb){  OracleDatabaseImpl.addTimestampFormat(sb,JDBC_WORKAROUND);}  }
class C{  public Attendee addAttendee(String email){  Attendee prop=new Attendee(null,email,null);  addAttendee(prop);  return prop;}  }
class C{  public static Font showDialog(Dialog owner,String title,Font initFont){  Font retValue=initFont;  FontChooser fc=new FontChooser(owner,title,initFont);  retValue=fc.getFont();  fc=null;  return retValue;}  }
class C{  private void createNotification(final int messageResId,final int defaults){  final Intent parentIntent=new Intent(this,FeaturesActivity.class);  parentIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  final Intent targetIntent=new Intent(this,HTSActivity.class);  final Intent disconnect=new Intent(ACTION_DISCONNECT);  final PendingIntent disconnectAction=PendingIntent.getBroadcast(this,DISCONNECT_REQ,disconnect,PendingIntent.FLAG_UPDATE_CURRENT);  final PendingIntent pendingIntent=PendingIntent.getActivities(this,OPEN_ACTIVITY_REQ,new Intent[]{parentIntent,targetIntent},PendingIntent.FLAG_UPDATE_CURRENT);  final NotificationCompat.Builder builder=new NotificationCompat.Builder(this);  builder.setContentIntent(pendingIntent);  builder.setContentTitle(getString(R.string.app_name)).setContentText(getString(messageResId,getDeviceName()));  builder.setSmallIcon(R.drawable.ic_stat_notify_hts);  builder.setShowWhen(defaults != 0).setDefaults(defaults).setAutoCancel(true).setOngoing(true);  builder.addAction(new NotificationCompat.Action(R.drawable.ic_action_bluetooth,getString(R.string.hts_notification_action_disconnect),disconnectAction));  final Notification notification=builder.build();  final NotificationManager nm=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  nm.notify(NOTIFICATION_ID,notification);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  protected production_part add_lab(production_part part,String lab) throws internal_error {  if (lab == null || part.is_action())   return part;  return new symbol_part(((symbol_part)part).the_symbol(),lab);}  }
class C{  public OMGraphicList init(){  OMGraphicList omList=new OMGraphicList();  OMLine line=new OMLine(40f,-75f,42f,-70f,OMGraphic.LINETYPE_GREATCIRCLE);  line.setStroke(new BasicStroke(2));  line.putAttribute(OMGraphicConstants.LABEL,new OMTextLabeler("Line Label"));  line.setLinePaint(Color.red);  line.setSelectPaint(Color.blue);  line.putAttribute(OMGraphicConstants.TOOLTIP,"This is an OMLine.");  omList.add(line);  OMGraphicList pointList=new OMGraphicList();  for (int i=0; i < 100; i++) {    OMPoint point=new OMPoint((float)(Math.random() * 89f),(float)(Math.random() * -179f),3);    point.putAttribute(OMGraphicConstants.TOOLTIP,"This is OMPoint #" + i);    point.setLinePaint(Color.green);    point.setSelectPaint(Color.yellow);    pointList.add(point);  }  omList.add(pointList);  return omList;}  }
class C{  Cursor find(Session session,ValueLong first,ValueLong last){  TransactionMap<Value,Value> map=getMap(session);  return new MVStoreCursor(session,map.entryIterator(first),last);}  }
class C{  private InputStream openStream() throws IOException, MalformedURLException {  InputStream inputStream=null;  if (DataUri.isDataUri(mUrl)) {    DataUri dataUri=new DataUri(mUrl);    inputStream=new ByteArrayInputStream(dataUri.getData());  } else {    URL url=new URL(mUrl);    inputStream=url.openStream();  }  return inputStream;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SXTH");  translateAll(environment,instruction,"SXTH",instructions);}  }
class C{  public boolean writeComment(String taskId,ReviewComment comment){  if (!displayWriteWarning(WRITE_COMMENTS_WARNING)) {    return false;  }  try {    gitClient.writeComment(taskId,comment);  } catch (  GitClientException e) {    AppraiseConnectorPlugin.logError("Error writing comment for " + taskId,e);    return false;  }  return true;}  }
class C{  public boolean hasBlueLine(){  return this.hasExtraFeatures();}  }
class C{  public SVGPath drawTo(double x,double y){  return !isStarted() ? moveTo(x,y) : lineTo(x,y);}  }
class C{  public CorsServiceBuilder disablePreflightResponseHeaders(){  preflightResponseHeadersDisabled=true;  return this;}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  this.put(index,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public BootstrapService(){  this.username=null;  this.password=null;  this.apiKey=null;}  }
class C{  private void displayAllStringDefinedInStringXml(){  SimpleIconFontTextView textView=(SimpleIconFontTextView)findViewById(R.id.text_view_2);  List<String> list=new ArrayList<>();  list.add(getString(R.string.cubeicon_gems_logo));  list.add(getString(R.string.cubeicon_android));  list.add(getString(R.string.cubeicon_heart));  String text=TextUtils.join(" ",list);  textView.setText(text);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  if (transformer.getStylesheet().isSecureProcessing())   throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_EXTENSION_ELEMENT_NOT_ALLOWED_IN_SECURE_PROCESSING,new Object[]{getRawName()}));  try {    transformer.getResultTreeHandler().flushPending();    ExtensionsTable etable=transformer.getExtensionsTable();    ExtensionHandler nsh=etable.get(m_extns);    if (null == nsh) {      if (hasFallbackChildren()) {        executeFallbacks(transformer);      } else {        TransformerException te=new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_CALL_TO_EXT_FAILED,new Object[]{getNodeName()}));        transformer.getErrorListener().fatalError(te);      }      return;    }    try {      nsh.processElement(this.getLocalName(),this,transformer,getStylesheet(),this);    } catch (    Exception e) {      if (hasFallbackChildren())       executeFallbacks(transformer); else {        if (e instanceof TransformerException) {          TransformerException te=(TransformerException)e;          if (null == te.getLocator())           te.setLocator(this);          transformer.getErrorListener().fatalError(te);        } else         if (e instanceof RuntimeException) {          transformer.getErrorListener().fatalError(new TransformerException(e));        } else {          transformer.getErrorListener().warning(new TransformerException(e));        }      }    }  } catch (  TransformerException e) {    transformer.getErrorListener().fatalError(e);  }catch (  SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public void importPackage(String packageName){  importedPackages.add(packageName);}  }
class C{  public static boolean isLocalAddress(Socket socket) throws UnknownHostException {  InetAddress test=socket.getInetAddress();  if (test.isLoopbackAddress()) {    return true;  }  InetAddress localhost=InetAddress.getLocalHost();  String host=localhost.getHostAddress();  for (  InetAddress addr : InetAddress.getAllByName(host)) {    if (test.equals(addr)) {      return true;    }  }  return false;}  }
class C{  @Override public boolean execute(String sql,int autoGeneratedKeys) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("execute(" + quote(sql) + ", "+ autoGeneratedKeys+ ");");    }    return executeInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public String toString(){  if (m_bagger == null) {    return "Random forest not built yet";  } else {    StringBuffer temp=new StringBuffer();    temp.append("Random forest of " + m_numTrees + " trees, each constructed while considering "+ m_KValue+ " random feature"+ (m_KValue == 1 ? "" : "s")+ ".\n"+ (!getDontCalculateOutOfBagError() ? "Out of bag error: " + Utils.doubleToString(m_bagger.measureOutOfBagError(),4) : "")+ "\n"+ (getMaxDepth() > 0 ? ("Max. depth of trees: " + getMaxDepth() + "\n") : (""))+ "\n");    if (m_printTrees) {      temp.append(m_bagger.toString());    }    return temp.toString();  }}  }
class C{  private static int capAtMaximumSize(int queueSize,int maximumSize){  return Math.min(queueSize - 1,maximumSize) + 1;}  }
class C{  public boolean removeDataChannel(){  if (TextUtils.isEmpty(mDataNamespace)) {    return false;  }  try {    if (null != Cast.CastApi && null != mApiClient) {      Cast.CastApi.removeMessageReceivedCallbacks(mApiClient,mDataNamespace);    }    mDataChannel=null;    Utils.saveStringToPreference(mContext,PREFS_KEY_CAST_CUSTOM_DATA_NAMESPACE,null);    return true;  } catch (  Exception e) {    LOGE(TAG,"Failed to remove namespace: " + mDataNamespace,e);  }  return false;}  }
class C{  protected OpenReplicatorPlugin loadAndConfigurePlugin(String prefix,String name) throws ReplicatorException {  String pluginPrefix=prefix + "." + name.trim();  String rawClassName=properties.getString(pluginPrefix);  if (rawClassName == null)   throw new ReplicatorException("Plugin class name property is missing or null:  key=" + pluginPrefix);  String pluginClassName=rawClassName.trim();  logger.info("Loading plugin: key=" + pluginPrefix + " class name="+ pluginClassName);  TungstenProperties pluginProperties=properties.subset(pluginPrefix + ".",true);  if (logger.isDebugEnabled())   logger.debug("Plugin properties: " + pluginProperties.toString());  OpenReplicatorPlugin plugin;  try {    plugin=(OpenReplicatorPlugin)Class.forName(pluginClassName).newInstance();    if (plugin instanceof FilterManualProperties)     ((FilterManualProperties)plugin).setConfigPrefix(pluginPrefix); else     pluginProperties.applyProperties(plugin);  } catch (  PropertyException e) {    throw new ReplicatorException("Unable to configure plugin properties: key=" + pluginPrefix + " class name="+ pluginClassName+ " : "+ e.getMessage(),e);  }catch (  InstantiationException e) {    throw new ReplicatorException("Unable to load plugin class: key=" + pluginPrefix + " class name="+ pluginClassName,e);  }catch (  IllegalAccessException e) {    throw new ReplicatorException("Unable to load plugin class: key=" + pluginPrefix + " class name="+ pluginClassName,e);  }catch (  ClassNotFoundException e) {    throw new ReplicatorException("Unable to load plugin class: key=" + pluginPrefix + " class name="+ pluginClassName,e);  }  try {    plugin.prepare(this);  } catch (  ReplicatorException e) {    throw new ReplicatorException("Unable to configure plugin: key=" + pluginPrefix + " class name="+ pluginClassName,e);  }catch (  Throwable t) {    String message="Unable to configure plugin: key=" + pluginPrefix + " class name="+ pluginClassName;    logger.error(message,t);    throw new ReplicatorException(message,t);  }  logger.info("Plug-in configured successfully: key=" + pluginPrefix + " class name="+ pluginClassName);  return plugin;}  }
class C{  public void synchronizeWith(UpdateSynchronizer sync){  runner.synchronizeWith(sync);}  }
class C{  static boolean equals(Object o1,Object o2){  return o1 == o2 || (o1 != null && o2 != null && o1.equals(o2));}  }
class C{  public static void main(String[] args) throws ParseException, IOException, InterruptedException {  CommandLineParser parser=new PosixParser();  CommandLine commandLine=parser.parse(getOptions(),args);  if (commandLine.hasOption(CFG_HELP)) {    new HelpFormatter().printHelp("spqr-websocket-server",getOptions());    return;  }  if (!commandLine.hasOption(CFG_CONFIGURATION_FILE)) {    new HelpFormatter().printHelp("spqr-websocket-server","",getOptions(),"Missing required configuration file");    return;  }  new SPQRWebSocketServer().run(commandLine.getOptionValue(CFG_CONFIGURATION_FILE));}  }
class C{  public void testFailedNodes3() throws Exception {  try {    nodeSpi.set(new TestFailedNodesSpi(-1));    Ignite ignite0=startGrid(0);    nodeSpi.set(new TestFailedNodesSpi(2));    Ignite ignite1=startGrid(1);    assertEquals(1,ignite1.cluster().nodes().size());    waitNodeStop(ignite0.name());    ignite1.getOrCreateCache(new CacheConfiguration<>()).put(1,1);    startGrid(2);    assertEquals(2,ignite1.cluster().nodes().size());    tryCreateCache(2);  }  finally {    stopAllGrids();  }}  }
class C{  public static String ask(final Shell shell,final String title,final String text,final String defaultValue){  final Dialog dialog=new Dialog(shell);  dialog.setTitle(ResourceManager.getLabel(ResourceManager.INPUT));  dialog.getMessageArea().setTitle(title).setText(text).setIcon(Display.getCurrent().getSystemImage(SWT.ICON_QUESTION)).addTextBox(defaultValue);  dialog.setButtonType(OpalDialogType.OK_CANCEL);  if (dialog.show() == 0) {    return dialog.getMessageArea().getTextBoxValue();  } else {    return null;  }}  }
class C{  private void processDelete(){  T deletedObject=(T)this.comboBox.getSelectedItem();  if (deletedObject != null) {    this.comboBox.removeItem(deletedObject);    this.listener.itemDeleted(this,deletedObject);  }}  }
class C{  public void push(final double value){  long bits=Double.doubleToLongBits(value);  if (bits == 0L || bits == 0x3ff0000000000000L) {    mv.visitInsn(Opcodes.DCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public static boolean isConnectedFast(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected() && Connectivity.isConnectionFast(info.getType(),info.getSubtype()));}  }
class C{  private static final String toXml(Joint joint){  StringBuilder sb=new StringBuilder();  sb.append("<Joint Id=\"").append(joint.getId()).append("\" Name=\"").append(joint.getUserData()).append("\" xsi:type=\"").append(joint.getClass().getSimpleName()).append("\">");  sb.append("<BodyId1>").append(joint.getBody1().getId()).append("</BodyId1>");  sb.append("<BodyId2>").append(joint.getBody2().getId()).append("</BodyId2>");  sb.append("<CollisionAllowed>").append(joint.isCollisionAllowed()).append("</CollisionAllowed>");  if (joint instanceof AngleJoint) {    AngleJoint aj=(AngleJoint)joint;    sb.append("<LowerLimit>").append(Math.toDegrees(aj.getLowerLimit())).append("</LowerLimit>");    sb.append("<UpperLimit>").append(Math.toDegrees(aj.getUpperLimit())).append("</UpperLimit>");    sb.append("<LimitEnabled>").append(aj.isLimitEnabled()).append("</LimitEnabled>");    sb.append("<Ratio>").append(aj.getRatio()).append("</Ratio>");    sb.append("<ReferenceAngle>").append(Math.toDegrees(aj.getReferenceAngle())).append("</ReferenceAngle>");  } else   if (joint instanceof DistanceJoint) {    DistanceJoint dj=(DistanceJoint)joint;    sb.append(XmlGenerator.toXml(dj.getAnchor1(),"Anchor1"));    sb.append(XmlGenerator.toXml(dj.getAnchor2(),"Anchor2"));    sb.append("<Frequency>").append(dj.getFrequency()).append("</Frequency>");    sb.append("<DampingRatio>").append(dj.getDampingRatio()).append("</DampingRatio>");    sb.append("<Distance>").append(dj.getDistance()).append("</Distance>");  } else   if (joint instanceof FrictionJoint) {    FrictionJoint fj=(FrictionJoint)joint;    sb.append(XmlGenerator.toXml(fj.getAnchor1(),"Anchor"));    sb.append("<MaximumForce>").append(fj.getMaximumForce()).append("</MaximumForce>");    sb.append("<MaximumTorque>").append(fj.getMaximumTorque()).append("</MaximumTorque>");  } else   if (joint instanceof PinJoint) {    PinJoint mj=(PinJoint)joint;    sb.append(XmlGenerator.toXml(mj.getAnchor2(),"Anchor"));    sb.append(XmlGenerator.toXml(mj.getAnchor1(),"Target"));    sb.append("<Frequency>").append(mj.getFrequency()).append("</Frequency>");    sb.append("<DampingRatio>").append(mj.getDampingRatio()).append("</DampingRatio>");    sb.append("<MaximumForce>").append(mj.getMaximumForce()).append("</MaximumForce>");  } else   if (joint instanceof PrismaticJoint) {    PrismaticJoint pj=(PrismaticJoint)joint;    sb.append(XmlGenerator.toXml(pj.getAnchor1(),"Anchor"));    sb.append(XmlGenerator.toXml(pj.getAxis(),"Axis"));    sb.append("<LowerLimit>").append(pj.getLowerLimit()).append("</LowerLimit>");    sb.append("<UpperLimit>").append(pj.getUpperLimit()).append("</UpperLimit>");    sb.append("<LimitEnabled>").append(pj.isLimitEnabled()).append("</LimitEnabled>");    sb.append("<MotorSpeed>").append(pj.getMotorSpeed()).append("</MotorSpeed>");    sb.append("<MaximumMotorForce>").append(pj.getMaximumMotorForce()).append("</MaximumMotorForce>");    sb.append("<MotorEnabled>").append(pj.isMotorEnabled()).append("</MotorEnabled>");    sb.append("<ReferenceAngle>").append(Math.toDegrees(pj.getReferenceAngle())).append("</ReferenceAngle>");  } else   if (joint instanceof PulleyJoint) {    PulleyJoint pj=(PulleyJoint)joint;    sb.append(XmlGenerator.toXml(pj.getPulleyAnchor1(),"PulleyAnchor1"));    sb.append(XmlGenerator.toXml(pj.getPulleyAnchor2(),"PulleyAnchor2"));    sb.append(XmlGenerator.toXml(pj.getAnchor1(),"BodyAnchor1"));    sb.append(XmlGenerator.toXml(pj.getAnchor2(),"BodyAnchor2"));    sb.append("<Ratio>").append(pj.getRatio()).append("</Ratio>");  } else   if (joint instanceof RevoluteJoint) {    RevoluteJoint rj=(RevoluteJoint)joint;    sb.append(XmlGenerator.toXml(rj.getAnchor1(),"Anchor"));    sb.append("<LowerLimit>").append(Math.toDegrees(rj.getLowerLimit())).append("</LowerLimit>");    sb.append("<UpperLimit>").append(Math.toDegrees(rj.getUpperLimit())).append("</UpperLimit>");    sb.append("<LimitEnabled>").append(rj.isLimitEnabled()).append("</LimitEnabled>");    sb.append("<MotorSpeed>").append(Math.toDegrees(rj.getMotorSpeed())).append("</MotorSpeed>");    sb.append("<MaximumMotorTorque>").append(rj.getMaximumMotorTorque()).append("</MaximumMotorTorque>");    sb.append("<MotorEnabled>").append(rj.isMotorEnabled()).append("</MotorEnabled>");    sb.append("<ReferenceAngle>").append(Math.toDegrees(rj.getReferenceAngle())).append("</ReferenceAngle>");  } else   if (joint instanceof RopeJoint) {    RopeJoint rj=(RopeJoint)joint;    sb.append(XmlGenerator.toXml(rj.getAnchor1(),"Anchor1"));    sb.append(XmlGenerator.toXml(rj.getAnchor2(),"Anchor2"));    sb.append("<LowerLimit>").append(rj.getLowerLimit()).append("</LowerLimit>");    sb.append("<UpperLimit>").append(rj.getUpperLimit()).append("</UpperLimit>");    sb.append("<LowerLimitEnabled>").append(rj.isLowerLimitEnabled()).append("</LowerLimitEnabled>");    sb.append("<UpperLimitEnabled>").append(rj.isUpperLimitEnabled()).append("</UpperLimitEnabled>");  } else   if (joint instanceof WeldJoint) {    WeldJoint wj=(WeldJoint)joint;    sb.append(XmlGenerator.toXml(wj.getAnchor1(),"Anchor"));    sb.append("<ReferenceAngle>").append(Math.toDegrees(wj.getReferenceAngle())).append("</ReferenceAngle>");    sb.append("<Frequency>").append(wj.getFrequency()).append("</Frequency>");    sb.append("<DampingRatio>").append(wj.getDampingRatio()).append("</DampingRatio>");  } else   if (joint instanceof WheelJoint) {    WheelJoint wj=(WheelJoint)joint;    sb.append(XmlGenerator.toXml(wj.getAnchor1(),"Anchor"));    sb.append(XmlGenerator.toXml(wj.getAxis(),"Axis"));    sb.append("<MotorSpeed>").append(Math.toDegrees(wj.getMotorSpeed())).append("</MotorSpeed>");    sb.append("<MaximumMotorTorque>").append(wj.getMaximumMotorTorque()).append("</MaximumMotorTorque>");    sb.append("<MotorEnabled>").append(wj.isMotorEnabled()).append("</MotorEnabled>");    sb.append("<Frequency>").append(wj.getFrequency()).append("</Frequency>");    sb.append("<DampingRatio>").append(wj.getDampingRatio()).append("</DampingRatio>");  } else {    throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),joint.getClass().getName()));  }  sb.append("</Joint>");  return sb.toString();}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public final DD selfAdd(DD y){  return selfAdd(y.hi,y.lo);}  }
class C{  public void onReceivedCapabilities(ContactId contact,Capabilities capabilities){  if (sLogger.isActivated()) {    sLogger.debug("Handle capabilities update notification for " + contact + " ("+ capabilities.toString()+ ")");  }  mCapabilityService.receiveCapabilities(contact,capabilities);}  }
class C{  public void createPerUnitWeekSteppedScenario() throws Exception {  setDateFactory("2013-04-01 00:00:00");  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"PER_UNIT_WEEK_STEPPED_SERVICE",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_EVENTS_PARS_STEPPED,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(basicSetup.getCustomerAdminKey(),"PER_UNIT_WEEK_STEPPED",serviceDetails,basicSetup.getSecondCustomerUser1(),VOServiceFactory.getRole(serviceDetails,"ADMIN"));  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-04-15 00:00:00"),"FILE_DOWNLOAD",100);  setDateFactory("2013-04-29 00:00:00");  subscrSetup.unsubscribeToService(basicSetup.getCustomerAdminKey(),subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PER_UNIT_WEEK_STEPPED",subDetails);}  }
class C{  @Override public void addFitnessFunction(FitnessFunction<? extends Chromosome> fitness){  throw new NotImplementedException("This should not be called");}  }
class C{  public synchronized boolean repeatRequest(){  return repeatRequest(false);}  }
class C{  public boolean createRedundantBucketForRegion(InternalDistributedMember target,int bucketId){  return getLeaderRegion().getRedundancyProvider().createBackupBucketOnMember(bucketId,target,isRebalance,replaceOfflineData,null,true);}  }
class C{  public ArraySpliterator(Object[] array,int additionalCharacteristics){  this(array,0,array.length,additionalCharacteristics);}  }
class C{  public static int calcTextWidth(Paint paint,String demoText){  return (int)paint.measureText(demoText);}  }
class C{  public SessionEvent(Object source,SessionEvent event){  super(source);  this.node=event.getNode();  this.parent=event.getParent();  this.child=event.getChild();  this.type=event.getType();}  }
class C{  private void yy_ScanError(int errorCode){  String message;  try {    message=YY_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=YY_ERROR_MSG[YY_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private static String makeWatchLink(String id){  return "http://mover.uz/watch/{id}".replace("{id}",id);}  }
class C{  public void valueChanged(TreeSelectionEvent e){  if (!updatingSelection && tree.getSelectionCount() == 1) {    TreePath selPath=tree.getSelectionPath();    Object lastPathComponent=selPath.getLastPathComponent();    if (!(lastPathComponent instanceof DefaultMutableTreeNode)) {      Element selElement=(Element)lastPathComponent;      updatingSelection=true;      try {        getEditor().select(selElement.getStartOffset(),selElement.getEndOffset());      }  finally {        updatingSelection=false;      }    }  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  int numBuckets=s.readInt();  table=new Entry[numBuckets];  init();  int size=s.readInt();  for (int i=0; i < size; i++) {    K key=(K)s.readObject();    V value=(V)s.readObject();    putForCreate(key,value);  }}  }
class C{  public JavaContext(TemplateContextType type,IDocument document,int completionOffset,int completionLength,ICompilationUnit compilationUnit){  super(type,document,completionOffset,completionLength,compilationUnit);}  }
class C{  protected void add(int idx,FolderTokenDocTreeNode node){  m_nodes.add(idx,node);}  }
class C{  public Contact(String contact){  super(contact);}  }
class C{  public int size(){  return this.stream.size();}  }
class C{  public static final List toSubIndicesSet(Instance x,int sub_indices[]){  List<Integer> y_list=new ArrayList<Integer>();  for (  int j : sub_indices) {    if (x.value(j) > 0.) {      y_list.add(j);    }  }  return y_list;}  }
class C{  public boolean isWriteLockedByCurrentThread(){  return locks[locks.length - 1].isWriteLockedByCurrentThread();}  }
class C{  public AudioCapabilities(int[] supportedEncodings,int maxChannelCount){  this.supportedEncodings=new HashSet<Integer>();  if (supportedEncodings != null) {    for (    int i : supportedEncodings) {      this.supportedEncodings.add(i);    }  }  this.maxChannelCount=maxChannelCount;}  }
class C{  public double norm(){  if (m_Elements != null) {    int n=m_Elements.length;    double sum=0.0;    for (int i=0; i < n; i++) {      sum+=m_Elements[i] * m_Elements[i];    }    return Math.pow(sum,0.5);  } else   return 0.0;}  }
class C{  public DictionaryPropertyType createDictionaryPropertyType(){  DictionaryPropertyTypeImpl dictionaryPropertyType=new DictionaryPropertyTypeImpl();  return dictionaryPropertyType;}  }
class C{  public void notationDecl(StylesheetHandler handler,String name,String publicId,String systemId){}  }
class C{  public void closeSearchBar(){  routeTo(backup);  if (listener != null) {    listener.onCloseSearchActionBar(ab);  }}  }
class C{  public default void onStall(RPCCall c){}  }
class C{  public OnClickWrapper(String tag,SuperToast.OnClickListener onClickListener){  this.mTag=tag;  this.mOnClickListener=onClickListener;}  }
class C{  public IconFactory(Resources resources,Drawable background){  this(resources,((BitmapDrawable)background).getBitmap());}  }
class C{  public void declineDefaultList() throws XMPPException {  Privacy request=new Privacy();  request.setDeclineDefaultList(true);  setRequest(request);}  }
class C{  public boolean canUserSeeEntry(User user,Entry entry,boolean isAdmin){  if (isAdmin) {    return true;  }  if (user == null) {    return false;  }  return entry.getUserId() != null && entry.getUserId().equals(user.getId());}  }
class C{  public CFilterByMemoryAction(final JTextField filterField){  super("Filter by memory content");  m_filterField=filterField;}  }
class C{  public static List<File> annotatedFiles() throws FileNotFoundException, LoadingFileException, IOException {  List<File> annotatedFiles=new ArrayList<File>();  for (  File javaFile : getJavaFiles())   if (isFileAnnotated(javaFile))   annotatedFiles.add(javaFile);  return annotatedFiles;}  }
class C{  public DiscreteAABB copy(){  return getBoundingBox(this.minX,this.minY,this.minZ,this.maxX,this.maxY,this.maxZ);}  }
class C{  private boolean updateHeader(){  String sql="UPDATE C_BankStatement bs" + " SET StatementDifference=(SELECT COALESCE(SUM(StmtAmt),0) FROM C_BankStatementLine bsl " + "WHERE bsl.C_BankStatement_ID=bs.C_BankStatement_ID AND bsl.IsActive='Y') "+ "WHERE C_BankStatement_ID="+ getC_BankStatement_ID();  int no=DB.executeUpdate(sql,get_TrxName());  if (no != 1) {    log.warning("StatementDifference #" + no);    return false;  }  sql="UPDATE C_BankStatement bs" + " SET EndingBalance=BeginningBalance+StatementDifference " + "WHERE C_BankStatement_ID="+ getC_BankStatement_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 1) {    log.warning("Balance #" + no);    return false;  }  return true;}  }
class C{  public String paramString(){  String typeStr;switch (id) {case ANCESTOR_MOVED:    typeStr="ANCESTOR_MOVED (" + changed + ","+ changedParent+ ")";  break;case ANCESTOR_RESIZED:typeStr="ANCESTOR_RESIZED (" + changed + ","+ changedParent+ ")";break;case HIERARCHY_CHANGED:{typeStr="HIERARCHY_CHANGED (";boolean first=true;if ((changeFlags & PARENT_CHANGED) != 0) {first=false;typeStr+="PARENT_CHANGED";}if ((changeFlags & DISPLAYABILITY_CHANGED) != 0) {if (first) {  first=false;} else {  typeStr+=",";}typeStr+="DISPLAYABILITY_CHANGED";}if ((changeFlags & SHOWING_CHANGED) != 0) {if (first) {  first=false;} else {  typeStr+=",";}typeStr+="SHOWING_CHANGED";}if (!first) {typeStr+=",";}typeStr+=changed + "," + changedParent+ ")";break;}default :typeStr="unknown type";}return typeStr;}  }
class C{  private void generate(String kind,PartitionResolver rr) throws SAXException {  if (rr == null)   return;  handler.startElement("",kind,kind,EMPTY);  String className=rr.getClass().getName();  handler.startElement("",CLASS_NAME,CLASS_NAME,EMPTY);  handler.characters(className.toCharArray(),0,className.length());  handler.endElement("",CLASS_NAME,CLASS_NAME);  Properties props=null;  if (rr instanceof Declarable2) {    props=((Declarable2)rr).getConfig();    generate(props,null);  }  handler.endElement("",kind,kind);}  }
class C{  private void findAfterLocal(Result<Cursor> result,RowCursor cursor,Object[] args,Cursor cursorLocal){  long version=0;  if (cursorLocal != null) {    version=cursorLocal.getVersion();    long time=cursorLocal.getUpdateTime();    long timeout=cursorLocal.getTimeout();    long now=CurrentTime.currentTime();    if (now <= time + timeout) {      result.ok(cursorLocal);      return;    }  }  TablePod tablePod=_table.getTablePod();  tablePod.getIfUpdate(cursor.getKey(),version,result.then(null));}  }
class C{  private Solution select(Population population){  Solution winner=population.get(PRNG.nextInt(population.size()));  for (int i=1; i < size; i++) {    Solution candidate=population.get(PRNG.nextInt(population.size()));    int flag=comparator.compare(winner,candidate);    if (flag > 0) {      winner=candidate;    }  }  return winner;}  }
class C{  public static Number sin(Number a){  return Math.sin(a.doubleValue());}  }
class C{  private static int computePointerSize(){  String bits=System.getProperty("sun.arch.data.model");  if (bits.equals("32")) {    return 4;  } else   if (bits.equals("64")) {    return 8;  } else {    System.err.println("Unknown value for sun.arch.data.model - assuming 32 bits");    return 4;  }}  }
class C{  public void testDynamicMergeFrom() throws Exception {  DynamicMessage result=DynamicMessage.newBuilder(MERGE_DEST).mergeFrom(DynamicMessage.newBuilder(MERGE_SOURCE).build()).build();  assertEquals(MERGE_RESULT_TEXT,result.toString());}  }
class C{  private long makeMGRSString(long Zone,long[] Letters,double Easting,double Northing,long Precision){  int j;  double divisor;  long east;  long north;  long error_code=MGRS_NO_ERROR;  if (Zone != 0)   MGRSString=String.format("%02d",Zone); else   MGRSString="  ";  for (j=0; j < 3; j++) {    if (Letters[j] < 0 || Letters[j] > 26)     return MGRS_ZONE_ERROR;    MGRSString=MGRSString + alphabet.charAt((int)Letters[j]);  }  divisor=Math.pow(10.0,(5 - Precision));  Easting=Easting % 100000.0;  if (Easting >= 99999.5)   Easting=99999.0;  east=(long)(Easting / divisor);  Integer iEast=(int)east;  String sEast=iEast.toString();  if (sEast.length() > Precision)   sEast=sEast.substring(0,(int)Precision - 1); else {    int i;    int length=sEast.length();    for (i=0; i < Precision - length; i++) {      sEast="0" + sEast;    }  }  MGRSString=MGRSString + " " + sEast;  Northing=Northing % 100000.0;  if (Northing >= 99999.5)   Northing=99999.0;  north=(long)(Northing / divisor);  Integer iNorth=(int)north;  String sNorth=iNorth.toString();  if (sNorth.length() > Precision)   sNorth=sNorth.substring(0,(int)Precision - 1); else {    int i;    int length=sNorth.length();    for (i=0; i < Precision - length; i++) {      sNorth="0" + sNorth;    }  }  MGRSString=MGRSString + " " + sNorth;  return (error_code);}  }
class C{  private void initResourcesIfNecessary(){  if (centerDrawable == null) {    centerDrawable=getContext().getResources().getDrawable(wheelForeground);  }  if (topShadow == null) {    topShadow=new GradientDrawable(Orientation.TOP_BOTTOM,SHADOWS_COLORS);  }  if (bottomShadow == null) {    bottomShadow=new GradientDrawable(Orientation.BOTTOM_TOP,SHADOWS_COLORS);  }  setBackgroundResource(wheelBackground);}  }
class C{  public boolean undo(){  return model.undo();}  }
class C{  public SparseSensorMatrixEditor(){  super();  initComponents();  layoutComponents();}  }
class C{  public Iterator<E> iterator(){  return new Itr();}  }
class C{  public void addObservations(double[] observations,int startTime,int numTimeSteps) throws Exception {  if (vectorOfObservations == null) {    throw new RuntimeException("User did not call startAddObservations before addObservations");  }  if (numTimeSteps <= k) {    return;  }  double[] obsToAdd=new double[numTimeSteps];  System.arraycopy(observations,startTime,obsToAdd,0,numTimeSteps);  vectorOfObservations.add(obsToAdd);}  }
class C{  public void prepare(boolean gcWholeMS){  if (HEADER_MARK_BITS && Options.eagerCompleteSweep.getValue()) {    consumeBlocks();  } else {    flushAvailableBlocks();  }  if (HEADER_MARK_BITS) {    if (gcWholeMS) {      allocState=markState;      if (usingStickyMarkBits && !isAgeSegregated)       allocState|=HeaderByte.UNLOGGED_BIT;      markState=deltaMarkState(true);      if (EAGER_MARK_CLEAR)       clearAllBlockMarks();    }  } else {    zeroLiveBits();  }  inMSCollection=true;}  }
class C{  public Matrix4x3f m20(float m20){  this.m20=m20;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public SDKConnection(Credentials credentials){  this.credentials=credentials;  this.url=credentials.url;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) private boolean isRestartNeeded(boolean optOut){  if (optOut)   return true;  boolean isFromFre=getActivity().getIntent() != null && getActivity().getIntent().getBooleanExtra(IntentHandler.EXTRA_INVOKED_FROM_FRE,false);  if (!isFromFre)   return true;  ActivityManager am=(ActivityManager)getActivity().getSystemService(Context.ACTIVITY_SERVICE);  PackageManager pm=getActivity().getPackageManager();  List<AppTask> taskList=am.getAppTasks();  for (int i=0; i < taskList.size(); i++) {    String className=DocumentUtils.getTaskClassName(taskList.get(i),pm);    if (className == null)     continue;    if (DocumentActivity.isDocumentActivity(className))     return true;  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node secondChildNode;  Node textNode;  Node noChildNode;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(0);  employeeList=employeeNode.getChildNodes();  secondChildNode=employeeList.item(1);  textNode=secondChildNode.getFirstChild();  noChildNode=textNode.getLastChild();  assertNull("nodeGetLastChildNullAssert1",noChildNode);}  }
class C{  @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application){  return application.sources(Application.class);}  }
class C{  private VOUser createUser(){  String organizationId=accountServiceClient.getOrganization().getOrganizationId();  VOUserDetails userDetails=identityServiceClient.createUser(organizationId);  VOUser voUser=identityServiceClient.getVOUser(userDetails.getUserId());  System.out.println("Created user ID is: \"" + voUser.getUserId() + "\"");  printAllUsersForOrganization();  return voUser;}  }
class C{  public static void upto(Number self,Number to,@ClosureParams(FirstParam.class) Closure closure){  int self1=self.intValue();  int to1=to.intValue();  if (self1 <= to1) {    for (int i=self1; i <= to1; i++) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to upto() cannot be less than the value ("+ self+ ") it's called on.");}  }
class C{  public String toString(){  if (root instanceof Map) {    if (((Map)root).containsKey("ROOT")) {      return PrettyPrinter.print((Map)((Map)root).get("ROOT"));    } else {      return PrettyPrinter.print((Map)root);    }  } else   if (root instanceof List) {    return PrettyPrinter.print((List)root);  } else {    return root.toString();  }}  }
class C{  public static void main(String[] args){  String matrixFilename=null;  String coordinateFilename=null;  String externalZonesFilename=null;  String networkFilename=null;  String plansFilename=null;  Double populationFraction=null;  if (args.length != 6) {    throw new IllegalArgumentException("Wrong number of arguments");  } else {    matrixFilename=args[0];    coordinateFilename=args[1];    externalZonesFilename=args[2];    networkFilename=args[3];    plansFilename=args[4];    populationFraction=Double.parseDouble(args[5]);  }  List<String> list=new ArrayList<>();  try {    BufferedReader br=IOUtils.getBufferedReader(externalZonesFilename);    try {      String line=null;      while ((line=br.readLine()) != null) {        list.add(line);      }    }  finally {      br.close();    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  MyDemandMatrix mdm=new MyDemandMatrix();  mdm.readLocationCoordinates(coordinateFilename,2,0,1);  mdm.parseMatrix(matrixFilename,"Saturn","Saturn model received for Sanral project");  Scenario sc=mdm.generateDemand(list,new Random(5463),populationFraction,"car");  NetworkReaderMatsimV1 nr=new NetworkReaderMatsimV1(sc.getNetwork());  nr.readFile(networkFilename);  XY2Links xy=new XY2Links(sc.getNetwork(),null);  xy.run(sc.getPopulation());  PopulationWriter pw=new PopulationWriter(sc.getPopulation(),sc.getNetwork());  pw.write(plansFilename);}  }
class C{  private long doCreate(String roleID) throws Exception {  TechnicalProduct technicalProduct=createTechnicalProduct();  final long key=createRoleDefinition(technicalProduct,roleID);  return key;}  }
class C{  public Rule(final String name,final boolean water,final GameData data){  super(name,data);  m_water=water;  m_units=new UnitCollection(this,getData());}  }
class C{  public static void createShortcutIntent(final String displayName,final String artistName,final Long id,final String mimeType,final Activity context){  try {    final ImageFetcher fetcher=getImageFetcher(context);    Bitmap bitmap=null;    if (mimeType.equals(MediaStore.Audio.Albums.CONTENT_TYPE)) {      bitmap=fetcher.getCachedBitmap(ImageFetcher.generateAlbumCacheKey(displayName,artistName));    } else {      bitmap=fetcher.getCachedBitmap(displayName);    }    if (bitmap == null) {      bitmap=BitmapFactory.decodeResource(context.getResources(),R.drawable.default_artwork);    }    final Intent shortcutIntent=new Intent(context,ShortcutActivity.class);    shortcutIntent.setAction(Intent.ACTION_VIEW);    shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);    shortcutIntent.putExtra(Config.ID,id);    shortcutIntent.putExtra(Config.NAME,displayName);    shortcutIntent.putExtra(Config.MIME_TYPE,mimeType);    final Intent intent=new Intent();    intent.putExtra(Intent.EXTRA_SHORTCUT_ICON,BitmapUtils.resizeAndCropCenter(bitmap,96));    intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,shortcutIntent);    intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,displayName);    intent.setAction("com.android.launcher.action.INSTALL_SHORTCUT");    context.sendBroadcast(intent);    AppMsg.makeText(context,context.getString(R.string.pinned_to_home_screen,displayName),AppMsg.STYLE_CONFIRM).show();  } catch (  final Exception e) {    Log.e("ApolloUtils","createShortcutIntent",e);    AppMsg.makeText(context,context.getString(R.string.could_not_be_pinned_to_home_screen,displayName),AppMsg.STYLE_ALERT).show();  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static String unescapeXml(String str){  if (str == null) {    return null;  }  return EntitiesUtils.XML.unescape(str);}  }
class C{  public String encodeAttribute(final String name){  return nameCoder.encodeAttribute(name);}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public Statistics(){  dataMap=new HashMap<String,Data>(50);}  }
class C{  public Matrix(int m,int n){  this.m=m;  this.n=n;  A=new double[m][n];}  }
class C{  public Node replaceChild(Node newChild,Node oldChild) throws DOMException {  if (oldChild == null || oldChild.getParentNode() != this)   return null;  ElemTemplateElement newChildElem=((ElemTemplateElement)newChild);  ElemTemplateElement oldChildElem=((ElemTemplateElement)oldChild);  ElemTemplateElement prev=(ElemTemplateElement)oldChildElem.getPreviousSibling();  if (null != prev)   prev.m_nextSibling=newChildElem;  if (m_firstChild == oldChildElem)   m_firstChild=newChildElem;  newChildElem.m_parentNode=this;  oldChildElem.m_parentNode=null;  newChildElem.m_nextSibling=oldChildElem.m_nextSibling;  oldChildElem.m_nextSibling=null;  return newChildElem;}  }
class C{  public static int negHalfWidth(int min,int max){  if (min > max) {    throw new IllegalArgumentException("min [" + min + "] must be <= max ["+ max+ "]");  }  int mean=meanLow(min,max);  return min - mean - ((min ^ max) & 1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.559 -0500",hash_original_method="5451311C0FC76A3AF05558D3E031ACC9",hash_generated_method="FE186EAE434EB3A5D7066811DBEC7D9B") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("MimeVersionParser.parse");  MimeVersion mimeVersion=new MimeVersion();  try {    headerName(TokenTypes.MIME_VERSION);    mimeVersion.setHeaderName(SIPHeaderNames.MIME_VERSION);    try {      String majorVersion=this.lexer.number();      mimeVersion.setMajorVersion(Integer.parseInt(majorVersion));      this.lexer.match('.');      String minorVersion=this.lexer.number();      mimeVersion.setMinorVersion(Integer.parseInt(minorVersion));    } catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    this.lexer.match('\n');    return mimeVersion;  }  finally {    if (debug)     dbg_leave("MimeVersionParser.parse");  }}  }
class C{  public static IgfsLogger disabledLogger(){  return disabledLogger;}  }
class C{  protected ReactionFiredImpl(){  super();}  }
class C{  public Iterator<Entry<String,String>> httpHeaders(){  return headers.iterator();}  }
class C{  public RRLoadBalanceStrategy(FailStrategy failStrategy){  this.failStrategy=failStrategy;}  }
class C{  public synchronized void add(K obj){  head=Entry.append(head,obj);}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  public List<CarrierService> parseDemand(String demandFile,Network network,Carrier carrier){  List<CarrierService> services=new ArrayList<CarrierService>();  BufferedReader br=IOUtils.getBufferedReader(demandFile);  try {    br.readLine();    String input;    int i=1;    while ((input=br.readLine()) != null) {      String[] array=input.split(",");      String customer=array[0];      double longi=Double.parseDouble(array[1]);      double lati=Double.parseDouble(array[2]);      String product=array[3];      double mass=Double.parseDouble(array[4]);      double sale=Double.parseDouble(array[5]);      double duration=Double.parseDouble(array[6]);      double start=Double.parseDouble(array[7]);      double end=Double.parseDouble(array[8]);      Coord coord=new Coord(longi,lati);      Id<Link> linkId=NetworkUtils.getNearestLink(((Network)network),coord).getId();      CarrierService serv=CarrierService.Builder.newInstance(Id.create(i,CarrierService.class),linkId).setCapacityDemand((int)mass).setServiceDuration(duration).setName(customer).setServiceStartTimeWindow(TimeWindow.newInstance(start,end)).build();      carrier.getServices().add(serv);      i++;    }  } catch (  IOException e) {    log.error("Could not read shipments file");  } finally {    try {      br.close();    } catch (    IOException e) {      log.error("Could not close shipment file");    }  }  return services;}  }
class C{  public void windowDeiconified(WindowEvent e){  if (AWTEventMonitor.windowListener_private != null) {    AWTEventMonitor.windowListener_private.windowDeiconified(e);  }}  }
class C{  public Volcano(){  super();}  }
class C{  public String[] validBaudRates(){  return null;}  }
class C{  public Enumeration<BasicBlock> reverseBlockEnumerator(){  return IREnumeration.reverseBE(this);}  }
class C{  private static IAbstractNode convert(final CommonTree ast) throws RecognitionException {  if (ast.getType() == FilterParser.PREDICATE) {    return new CPredicateExpression(ast.getText());  } else   if (ast.getType() == FilterParser.AND) {    return convertAnd(ast);  } else   if (ast.getType() == FilterParser.OR) {    return convertOr(ast);  } else   if (ast.getType() == 0) {    throw new RecognitionException();  } else   if (ast.getType() == FilterParser.SUB_EXPRESSION) {    return convert((CommonTree)ast.getChild(0));  }  throw new IllegalStateException("IE00960: Not yet implemented (" + ast.getType() + ")");}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.279 -0400",hash_original_method="C9A6323D3BA7CB7A5EE47D73A9DDDABE",hash_generated_method="A0963F5476A8C96D4BE368C106BF9C8F") public V put(K key,V value){  if (value == null)   throw new NullPointerException();  return doPut(key,value,false);}  }
class C{  public GeoPoint[] interpolate(final GeoPoint start,final GeoPoint end,final double[] proportions){  double A=x;  double B=y;  double C=z;  final double transX=-D * A;  final double transY=-D * B;  final double transZ=-D * C;  double cosRA;  double sinRA;  double cosHA;  double sinHA;  double magnitude=magnitude();  if (magnitude >= MINIMUM_RESOLUTION) {    final double denom=1.0 / magnitude;    A*=denom;    B*=denom;    C*=denom;    final double xyMagnitude=Math.sqrt(A * A + B * B);    if (xyMagnitude >= MINIMUM_RESOLUTION) {      final double xyDenom=1.0 / xyMagnitude;      cosRA=A * xyDenom;      sinRA=-B * xyDenom;    } else {      cosRA=1.0;      sinRA=0.0;    }    sinHA=xyMagnitude;    cosHA=C;  } else {    cosRA=1.0;    sinRA=0.0;    cosHA=1.0;    sinHA=0.0;  }  final Vector modifiedStart=modify(start,transX,transY,transZ,sinRA,cosRA,sinHA,cosHA);  final Vector modifiedEnd=modify(end,transX,transY,transZ,sinRA,cosRA,sinHA,cosHA);  if (Math.abs(modifiedStart.z) >= MINIMUM_RESOLUTION)   throw new IllegalArgumentException("Start point was not on plane: " + modifiedStart.z);  if (Math.abs(modifiedEnd.z) >= MINIMUM_RESOLUTION)   throw new IllegalArgumentException("End point was not on plane: " + modifiedEnd.z);  final double startAngle=Math.atan2(modifiedStart.y,modifiedStart.x);  final double endAngle=Math.atan2(modifiedEnd.y,modifiedEnd.x);  final double startMagnitude=Math.sqrt(modifiedStart.x * modifiedStart.x + modifiedStart.y * modifiedStart.y);  double delta;  double newEndAngle=endAngle;  while (newEndAngle < startAngle) {    newEndAngle+=Math.PI * 2.0;  }  if (newEndAngle - startAngle <= Math.PI) {    delta=newEndAngle - startAngle;  } else {    double newStartAngle=startAngle;    while (newStartAngle < endAngle) {      newStartAngle+=Math.PI * 2.0;    }    delta=newStartAngle - endAngle;  }  final GeoPoint[] returnValues=new GeoPoint[proportions.length];  for (int i=0; i < returnValues.length; i++) {    final double newAngle=startAngle + proportions[i] * delta;    final double sinNewAngle=Math.sin(newAngle);    final double cosNewAngle=Math.cos(newAngle);    final Vector newVector=new Vector(cosNewAngle * startMagnitude,sinNewAngle * startMagnitude,0.0);    returnValues[i]=reverseModify(newVector,transX,transY,transZ,sinRA,cosRA,sinHA,cosHA);  }  return returnValues;}  }
class C{  public TimingSpecifierListProducer(TimedElement owner,boolean isBegin){  this.owner=owner;  this.isBegin=isBegin;}  }
class C{  public boolean isItemLootingRewardable(){  return !get("class").equals("player");}  }
class C{  public void notifyEvent(MessageEvent e,Vector<Object> parm){  Object[] listenerList=this.listeners.getListenerList();  for (int i=listenerList.length - 2; i >= 0; i-=2) {    if (listenerList[i] == MessageListener.class) {      ((MessageListener)listenerList[i + 1]).handleEvent(e,parm);    }  }}  }
class C{  @Nullable public static PsiMethod findPublicStaticVoidMainMethod(PsiClass clazz){  PsiMethod[] methods=clazz.findMethodsByName("main",false);  for (  PsiMethod method : methods) {    if (!method.hasModifierProperty(PsiModifier.PUBLIC)) {      continue;    }    if (!method.hasModifierProperty(PsiModifier.STATIC)) {      continue;    }    PsiType returnType=method.getReturnType();    if (!PsiType.VOID.equals(returnType)) {      continue;    }    PsiParameter[] parameters=method.getParameterList().getParameters();    if (parameters.length != 1) {      continue;    }    if (!isStringArrayType(parameters[0].getType())) {      continue;    }    return method;  }  return null;}  }
class C{  public boolean hasIncomingBatchInstances(){  if (m_listenees.size() == 0) {    return false;  }  if (m_listenees.containsKey("trainingSet") || m_listenees.containsKey("testSet")) {    return true;  }  return false;}  }
class C{  @Override public IBinder onBind(Intent intent){  return mUpstreamMessenger.getBinder();}  }
class C{  public ModifiableBOpBase clearProperty(final String name){  if (name == null)   throw new IllegalArgumentException();  if (annotations.remove(name) != null) {    mutation();  }  return this;}  }
class C{  public void paintEditorPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static MGRSCoord fromLatLon(Angle latitude,Angle longitude,int precision){  if (latitude == null || longitude == null) {    throw new IllegalArgumentException("Latitude Or Longitude Is Null");  }  final MGRSCoordConverter converter=new MGRSCoordConverter();  long err=converter.convertGeodeticToMGRS(latitude.radians,longitude.radians,precision);  if (err != MGRSCoordConverter.MGRS_NO_ERROR) {    throw new IllegalArgumentException("MGRS Conversion Error");  }  return new MGRSCoord(latitude,longitude,converter.getMGRSString());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  static void offerLastTemporaryDirectBuffer(ByteBuffer buf){  if (isBufferTooLarge(buf)) {    free(buf);    return;  }  assert buf != null;  BufferCache cache=bufferCache.get();  if (!cache.offerLast(buf)) {    free(buf);  }}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  Map<String,String> statesAndCapitals=getData();  System.out.print("Enter a state: ");  String state=input.nextLine();  if (statesAndCapitals.get(state) != null) {    System.out.println("The capital of " + state + " is "+ statesAndCapitals.get(state));  }}  }
class C{  public void dupX1(){  mv.visitInsn(Opcodes.DUP_X1);}  }
class C{  protected void _collectAndResolve(AnnotatedClass annotatedType,NamedType namedType,MapperConfig<?> config,AnnotationIntrospector ai,HashMap<NamedType,NamedType> collectedSubtypes){  if (!namedType.hasName()) {    String name=ai.findTypeName(annotatedType);    if (name != null) {      namedType=new NamedType(namedType.getType(),name);    }  }  if (collectedSubtypes.containsKey(namedType)) {    if (namedType.hasName()) {      NamedType prev=collectedSubtypes.get(namedType);      if (!prev.hasName()) {        collectedSubtypes.put(namedType,namedType);      }    }    return;  }  collectedSubtypes.put(namedType,namedType);  Collection<NamedType> st=ai.findSubtypes(annotatedType);  if (st != null && !st.isEmpty()) {    for (    NamedType subtype : st) {      AnnotatedClass subtypeClass=AnnotatedClass.constructWithoutSuperTypes(subtype.getType(),ai,config);      if (!subtype.hasName()) {        subtype=new NamedType(subtype.getType(),ai.findTypeName(subtypeClass));      }      _collectAndResolve(subtypeClass,subtype,config,ai,collectedSubtypes);    }  }}  }
class C{  void registerContentObserver(Cursor cursor,ContentObserver observer){  cursor.registerContentObserver(this.observer);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.652 -0500",hash_original_method="451E311949AEF6CA521A34CAA7EB210C",hash_generated_method="71F12EF3151EC3E6B6E3F6468216C725") public LogConfigurationException(String message,Throwable cause){  super(message + " (Caused by " + cause+ ")");  this.cause=cause;}  }
class C{  public byte[] readStringBytes() throws IOException {  synchBits();  List<Byte> chars=new ArrayList();  byte[] aChar=new byte[1];  int num=0;  while ((num=in.read(aChar)) == 1) {    bytesRead++;    if (aChar[0] == 0) {      byte[] string=new byte[chars.size()];      int i=0;      for (      Object b : chars) {        string[i++]=((Byte)b).byteValue();      }      return string;    }    chars.add(new Byte(aChar[0]));  }  throw new IOException("Unterminated string - reached end of input before null char");}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public SVGRectRadiusHandle(Figure owner){  super(owner);}  }
class C{  private void cmd_print(){  ValueNamePair pp=(ValueNamePair)fPaymentRule.getSelectedItem();  if (pp == null)   return;  String PaymentRule=pp.getValue();  log.info(PaymentRule);  if (!getChecks(PaymentRule))   return;  panel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  boolean somethingPrinted=false;  boolean directPrint=!Ini.isPropertyBool(Ini.P_PRINTPREVIEW);  for (int i=0; i < m_checks.length; i++) {    MPaySelectionCheck check=m_checks[i];    boolean ok=ReportCtl.startDocumentPrint(ReportEngine.CHECK,check.get_ID(),null,Env.getWindowNo(panel),directPrint);    if (!somethingPrinted && ok)     somethingPrinted=true;  }  if (somethingPrinted && ADialog.ask(m_WindowNo,panel,"VPayPrintSuccess?")) {    int lastDocumentNo=MPaySelectionCheck.confirmPrint(m_checks,m_batch);    if (lastDocumentNo != 0) {      StringBuffer sb=new StringBuffer();      sb.append("UPDATE C_BankAccountDoc SET CurrentNext=").append(++lastDocumentNo).append(" WHERE C_BankAccount_ID=").append(m_C_BankAccount_ID).append(" AND PaymentRule='").append(PaymentRule).append("'");      DB.executeUpdate(sb.toString(),null);    }  }  if (ADialog.ask(m_WindowNo,panel,"VPayPrintPrintRemittance")) {    for (int i=0; i < m_checks.length; i++) {      MPaySelectionCheck check=m_checks[i];      ReportCtl.startDocumentPrint(ReportEngine.REMITTANCE,check.get_ID(),null,Env.getWindowNo(panel),directPrint);    }  }  panel.setCursor(Cursor.getDefaultCursor());  dispose();}  }
class C{  public static <V>int distinctList(List<V> sourceList){  if (isEmpty(sourceList)) {    return 0;  }  int sourceCount=sourceList.size();  int sourceListSize=sourceList.size();  for (int i=0; i < sourceListSize; i++) {    for (int j=(i + 1); j < sourceListSize; j++) {      if (sourceList.get(i).equals(sourceList.get(j))) {        sourceList.remove(j);        sourceListSize=sourceList.size();        j--;      }    }  }  return sourceCount - sourceList.size();}  }
class C{  public int addPodcast(Podcast podcast) throws IOException, FeedException {  LOG.debug("invoked" + getClass().getSimpleName() + "."+ Thread.currentThread().getStackTrace()[1].getMethodName()+ "to add new podcast to database ");  podcast.setAvailability(HttpStatus.SC_OK);  try {    this.setHeaderFieldAttributes(podcast);    podcastAndEpisodeAttributesService.setPodcastFeedAttributes(podcast,false);    insertPodcast(podcast);    int podcastId=podcast.getPodcastId();    insertPodcastCategories(podcast);    insertTags(podcast);    insertEpisodesForPodcast(podcast);    return podcastId;  } catch (  IOException e) {    LOG.error(" IOException has been thrown for podcast " + podcast.getUrl(),e);    throw e;  }catch (  FeedException e) {    LOG.error(" FeedException has been thrown when setting attributes for podcast " + podcast.getUrl(),e);    throw e;  }catch (  Exception e) {    LOG.error("Unknown exception has occured for podcast " + podcast.getUrl(),e);    throw e;  }}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());}  }
class C{  public static String escapeFilterParameter(String parameter){  return parameter.replace("\\","\\\\").replace(",","\\,");}  }
class C{  public Polyline2D(float[] xpoints,float[] ypoints,int npoints){  if (npoints > xpoints.length || npoints > ypoints.length) {    throw new IndexOutOfBoundsException("npoints > xpoints.length || npoints > ypoints.length");  }  this.npoints=npoints;  this.xpoints=new float[npoints + 1];  this.ypoints=new float[npoints + 1];  System.arraycopy(xpoints,0,this.xpoints,0,npoints);  System.arraycopy(ypoints,0,this.ypoints,0,npoints);  calculatePath();}  }
class C{  public boolean isClosed(){  return lifecycle.closed();}  }
class C{  protected boolean checkDrawerItem(int position,boolean includeOffset){  return getAdapter().getItem(position) != null;}  }
class C{  public Request(SecurityHeaderType header,RequestSecurityTokenType rst,Signature signature,ServerValidatableSamlToken token,ServerValidatableSamlToken actAsToken){  assert header != null;  assert rst != null;  assert (rst.getActAs() != null) == (actAsToken != null) : "Failed ActAs token precondition!";  this.header=header;  this.rst=rst;  this.signature=signature;  this.token=token;  this.actAsToken=actAsToken;}  }
class C{  public void reset(){  setCenter(centerOriginal);  setZoom(1.0);}  }
class C{  public static Set<String> varyFields(Headers responseHeaders){  Set<String> result=Collections.emptySet();  for (int i=0, size=responseHeaders.size(); i < size; i++) {    if (!"Vary".equalsIgnoreCase(responseHeaders.name(i)))     continue;    String value=responseHeaders.value(i);    if (result.isEmpty()) {      result=new TreeSet<>(String.CASE_INSENSITIVE_ORDER);    }    for (    String varyField : value.split(",")) {      result.add(varyField.trim());    }  }  return result;}  }
class C{  public NeuronGroup(final Network net,Point2D initialPosition,final int numNeurons){  super(net);  neuronList=new ArrayList<Neuron>(numNeurons);  for (int i=0; i < numNeurons; i++) {    addNeuron(new Neuron(net),false);  }  neuronList=new CopyOnWriteArrayList<Neuron>(neuronList);  layout.setInitialLocation(initialPosition);  layout.layoutNeurons(this.getNeuronList());  updateRule=getNeuronType();  resetSubsamplingIndices();}  }
class C{  @Override public boolean shouldNotBeLogged(){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:00.532 -0500",hash_original_method="C604A793DAEAE92DAC99FA0862A74B19",hash_generated_method="20ACC0777E5DF4C5A88542C7A7DB4716") public String encodeBody(){  return Integer.toString(majorVersion) + DOT + Integer.toString(minorVersion);}  }
class C{  public MatchConditionBuilder docValues(Boolean docValues){  this.docValues=docValues;  return this;}  }
class C{  public static void saveDescription(final Window parent,final INaviAddressSpace addressSpace,final String description){  try {    addressSpace.getConfiguration().setDescription(description);  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00154: " + "Could not save address space description";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The new description of the address space '%s' could not be saved.",addressSpace.getConfiguration().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The address space keeps its old description."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);  }}  }
class C{  @Override public void deleteBCVHelperVolume(StorageSystem storageSystem,Volume volume) throws Exception {  _log.info(String.format("Start executing BCV helper volume from array: %s, for volume: %s",storageSystem.getId(),volume.getId()));  try {    String deviceName=volume.getNativeId();    String deviceNameWithoutLeadingZeros=deviceName.replaceAll("^0*","");    String query=String.format("SELECT CIM_StorageVolume.%s, CIM_StorageVolume.%s  FROM CIM_StorageVolume where CIM_StorageVolume.%s ='SMI_BCV_META_%s'",SmisConstants.CP_ELEMENT_NAME,SmisConstants.CP_DEVICE_ID,SmisConstants.CP_ELEMENT_NAME,deviceNameWithoutLeadingZeros);    String queryLanguage="CQL";    List<CIMInstance> bcvVolumeInstanceList=_helper.executeQuery(storageSystem,query,queryLanguage);    if (bcvVolumeInstanceList == null || bcvVolumeInstanceList.isEmpty()) {      query=String.format("SELECT CIM_StorageVolume.%s, CIM_StorageVolume.%s FROM CIM_StorageVolume where CIM_StorageVolume.%s ='SMI_BCV_META_%s'",SmisConstants.CP_ELEMENT_NAME,SmisConstants.CP_DEVICE_ID,SmisConstants.CP_ELEMENT_NAME,deviceName);      bcvVolumeInstanceList=_helper.executeQuery(storageSystem,query,queryLanguage);    }    String elementName=null;    String nativeId=null;    CIMInstance bcvVolumeInstance=null;    if (bcvVolumeInstanceList != null && !bcvVolumeInstanceList.isEmpty()) {      bcvVolumeInstance=bcvVolumeInstanceList.get(0);      elementName=CIMPropertyFactory.getPropertyValue(bcvVolumeInstance,SmisConstants.CP_ELEMENT_NAME);      nativeId=CIMPropertyFactory.getPropertyValue(bcvVolumeInstance,SmisConstants.CP_DEVICE_ID);      _log.info(String.format("Found BCV helper volume: %s, nativeId: %s",elementName,nativeId));    } else {      _log.warn(String.format("Could not find BCV helper volume for volume: %s, nativeId: %s",volume.getId(),volume.getNativeId()));      return;    }    _log.info(String.format("Executing delete of BCV helper volume: " + nativeId));    String[] nativeIds=new String[]{nativeId};    CIMObjectPath configSvcPath=_cimPath.getConfigSvcPath(storageSystem);    CIMArgument[] inArgs=_helper.getDeleteVolumesInputArguments(storageSystem,nativeIds);    CIMArgument[] outArgs=new CIMArgument[5];    String returnElementsMethod;    if (storageSystem.getUsingSmis80()) {      returnElementsMethod=SmisConstants.RETURN_ELEMENTS_TO_STORAGE_POOL;    } else {      returnElementsMethod=SmisConstants.EMC_RETURN_TO_STORAGE_POOL;    }    _helper.invokeMethodSynchronously(storageSystem,configSvcPath,returnElementsMethod,inArgs,outArgs,null);    _log.info(String.format("Deleted BCV helper volume: " + nativeId));  } catch (  Exception ex) {    _log.error(String.format("Failed to delete BCV helper volume from array: %s, for volume: %s",storageSystem.getId(),volume.getId()));  }}  }
class C{  private Finalizer(Class<?> finalizableReferenceClass,ReferenceQueue<Object> queue,PhantomReference<Object> frqReference){  this.queue=queue;  this.finalizableReferenceClassReference=new WeakReference<Class<?>>(finalizableReferenceClass);  this.frqReference=frqReference;}  }
class C{  public static GraphRequest newUpdateOpenGraphObjectRequest(AccessToken accessToken,String id,String title,String imageUrl,String url,String description,JSONObject objectProperties,Callback callback){  JSONObject openGraphObject=GraphUtil.createOpenGraphObjectForPost(null,title,imageUrl,url,description,objectProperties,id);  return newUpdateOpenGraphObjectRequest(accessToken,openGraphObject,callback);}  }
class C{  public boolean abort() throws LoginException {  if (!isAuthSucceeded()) {    return false;  } else {    if (isAuthSucceeded() && !isCommitSucceeded()) {      reset();    } else {      logout();    }  }  return true;}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  try {    ElemTemplateElement p=handler.getElemTemplateElement();    boolean excludeXSLDecl=false;    boolean isLREAsStyleSheet=false;    if (null == p) {      XSLTElementProcessor lreProcessor=handler.popProcessor();      XSLTElementProcessor stylesheetProcessor=handler.getProcessorFor(Constants.S_XSLNAMESPACEURL,"stylesheet","xsl:stylesheet");      handler.pushProcessor(lreProcessor);      Stylesheet stylesheet;      try {        stylesheet=getStylesheetRoot(handler);      } catch (      TransformerConfigurationException tfe) {        throw new TransformerException(tfe);      }      SAXSourceLocator slocator=new SAXSourceLocator();      Locator locator=handler.getLocator();      if (null != locator) {        slocator.setLineNumber(locator.getLineNumber());        slocator.setColumnNumber(locator.getColumnNumber());        slocator.setPublicId(locator.getPublicId());        slocator.setSystemId(locator.getSystemId());      }      stylesheet.setLocaterInfo(slocator);      stylesheet.setPrefixes(handler.getNamespaceSupport());      handler.pushStylesheet(stylesheet);      isLREAsStyleSheet=true;      AttributesImpl stylesheetAttrs=new AttributesImpl();      AttributesImpl lreAttrs=new AttributesImpl();      int n=attributes.getLength();      for (int i=0; i < n; i++) {        String attrLocalName=attributes.getLocalName(i);        String attrUri=attributes.getURI(i);        String value=attributes.getValue(i);        if ((null != attrUri) && attrUri.equals(Constants.S_XSLNAMESPACEURL)) {          stylesheetAttrs.addAttribute(null,attrLocalName,attrLocalName,attributes.getType(i),attributes.getValue(i));        } else         if ((attrLocalName.startsWith("xmlns:") || attrLocalName.equals("xmlns")) && value.equals(Constants.S_XSLNAMESPACEURL)) {        } else {          lreAttrs.addAttribute(attrUri,attrLocalName,attributes.getQName(i),attributes.getType(i),attributes.getValue(i));        }      }      attributes=lreAttrs;      try {        stylesheetProcessor.setPropertiesFromAttributes(handler,"stylesheet",stylesheetAttrs,stylesheet);      } catch (      Exception e) {        if (stylesheet.getDeclaredPrefixes() == null || !declaredXSLNS(stylesheet)) {          throw new org.xml.sax.SAXException(XSLMessages.createWarning(XSLTErrorResources.WG_OLD_XSLT_NS,null));        } else {          throw new org.xml.sax.SAXException(e);        }      }      handler.pushElemTemplateElement(stylesheet);      ElemTemplate template=new ElemTemplate();      if (slocator != null)       template.setLocaterInfo(slocator);      appendAndPush(handler,template);      XPath rootMatch=new XPath("/",stylesheet,stylesheet,XPath.MATCH,handler.getStylesheetProcessor().getErrorListener());      template.setMatch(rootMatch);      stylesheet.setTemplate(template);      p=handler.getElemTemplateElement();      excludeXSLDecl=true;    }    XSLTElementDef def=getElemDef();    Class classObject=def.getClassObject();    boolean isExtension=false;    boolean isComponentDecl=false;    boolean isUnknownTopLevel=false;    while (null != p) {      if (p instanceof ElemLiteralResult) {        ElemLiteralResult parentElem=(ElemLiteralResult)p;        isExtension=parentElem.containsExtensionElementURI(uri);      } else       if (p instanceof Stylesheet) {        Stylesheet parentElem=(Stylesheet)p;        isExtension=parentElem.containsExtensionElementURI(uri);        if ((false == isExtension) && (null != uri) && (uri.equals(Constants.S_BUILTIN_EXTENSIONS_URL) || uri.equals(Constants.S_BUILTIN_OLD_EXTENSIONS_URL))) {          isComponentDecl=true;        } else {          isUnknownTopLevel=true;        }      }      if (isExtension)       break;      p=p.getParentElem();    }    ElemTemplateElement elem=null;    try {      if (isExtension) {        elem=new ElemExtensionCall();      } else       if (isComponentDecl) {        elem=(ElemTemplateElement)classObject.newInstance();      } else       if (isUnknownTopLevel) {        elem=(ElemTemplateElement)classObject.newInstance();      } else {        elem=(ElemTemplateElement)classObject.newInstance();      }      elem.setDOMBackPointer(handler.getOriginatingNode());      elem.setLocaterInfo(handler.getLocator());      elem.setPrefixes(handler.getNamespaceSupport(),excludeXSLDecl);      if (elem instanceof ElemLiteralResult) {        ((ElemLiteralResult)elem).setNamespace(uri);        ((ElemLiteralResult)elem).setLocalName(localName);        ((ElemLiteralResult)elem).setRawName(rawName);        ((ElemLiteralResult)elem).setIsLiteralResultAsStylesheet(isLREAsStyleSheet);      }    } catch (    InstantiationException ie) {      handler.error(XSLTErrorResources.ER_FAILED_CREATING_ELEMLITRSLT,null,ie);    }catch (    IllegalAccessException iae) {      handler.error(XSLTErrorResources.ER_FAILED_CREATING_ELEMLITRSLT,null,iae);    }    setPropertiesFromAttributes(handler,rawName,attributes,elem);    if (!isExtension && (elem instanceof ElemLiteralResult)) {      isExtension=((ElemLiteralResult)elem).containsExtensionElementURI(uri);      if (isExtension) {        elem=new ElemExtensionCall();        elem.setLocaterInfo(handler.getLocator());        elem.setPrefixes(handler.getNamespaceSupport());        ((ElemLiteralResult)elem).setNamespace(uri);        ((ElemLiteralResult)elem).setLocalName(localName);        ((ElemLiteralResult)elem).setRawName(rawName);        setPropertiesFromAttributes(handler,rawName,attributes,elem);      }    }    appendAndPush(handler,elem);  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  @Override protected void computeExtremesFromLocations(Dimension dim,float[] xs,float[] ys){  if (!this.longitudesCrossDateline(dim,xs)) {    super.computeExtremesFromLocations(dim,xs,ys);    return;  }  this.minx=180f;  this.maxx=-180f;  this.miny=Float.MAX_VALUE;  this.maxy=-Float.MAX_VALUE;  this.crossesDateline=true;  for (int j=this.n0; j <= this.n1; j++) {    for (int i=this.m0; i <= this.m1; i++) {      int k=j * dim.width + i;      float x=xs[k];      float y=ys[k];      if (this.minx > x && x > 0f)       this.minx=x;      if (this.maxx < x && x < 0f)       this.maxx=x;      if (this.miny > y)       this.miny=y;      if (this.maxy < y)       this.maxy=y;    }  }}  }
class C{  public boolean remove(final URI uri){  return this.uris.remove(uri);}  }
class C{  public void update(float delta){  CGPoint location=convertToWorldSpace(0,0);  ribbon_.setPosition(CGPoint.make(-1 * location.x,-1 * location.y));  float len=(float)Math.sqrt((float)Math.pow(lastLocation_.x - location.x,2) + (float)Math.pow(lastLocation_.y - location.y,2));  if (len > segThreshold_) {    ribbon_.addPoint(location,width_);    lastLocation_=location;  }  ribbon_.update(delta);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.VARIABLE_DECLARATION__DECLARED_TYPE_REF:    return getDeclaredTypeRef();case N4JSPackage.VARIABLE_DECLARATION__BOGUS_TYPE_REF:  return getBogusTypeRef();case N4JSPackage.VARIABLE_DECLARATION__NAME:return getName();case N4JSPackage.VARIABLE_DECLARATION__ANNOTATIONS:return getAnnotations();case N4JSPackage.VARIABLE_DECLARATION__EXPRESSION:return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void addViews(T parent,List<View> views){  for (int i=0, size=views.size(); i < size; i++) {    addView(parent,views.get(i),i);  }}  }
class C{  public void writeClusters(OutputStreamWriter outStream,MultipleObjectsBundle data) throws IOException {  int modelcol=-1;{    for (int i=0; i < data.metaLength(); i++) {      if (TypeUtil.MODEL.isAssignableFromType(data.meta(i))) {        modelcol=i;        break;      }    }  }  if (modelcol < 0) {    throw new AbortException("No model column found in bundle.");  }  ArrayList<Model> models=new ArrayList<>();  Map<Model,TIntList> modelMap=new HashMap<>();{    for (int i=0; i < data.dataLength(); i++) {      Model model=(Model)data.data(i,modelcol);      TIntList modelids=modelMap.get(model);      if (modelids == null) {        models.add(model);        modelids=new TIntArrayList();        modelMap.put(model,modelids);      }      modelids.add(i);    }  }  int totalsize=0, totaldisc=0;  for (  Entry<Model,TIntList> ent : modelMap.entrySet()) {    totalsize+=ent.getValue().size();    if (ent.getKey() instanceof GeneratorSingleCluster) {      totaldisc+=((GeneratorSingleCluster)ent.getKey()).getDiscarded();    }  }  double globdens=(double)(totalsize + totaldisc) / totalsize;  outStream.append("########################################################").append(LINE_SEPARATOR);  outStream.append("## Number of clusters: " + models.size()).append(LINE_SEPARATOR);  for (  Model model : models) {    TIntList ids=modelMap.get(model);    outStream.append("########################################################").append(LINE_SEPARATOR);    outStream.append("## Size: " + ids.size()).append(LINE_SEPARATOR);    if (model instanceof GeneratorSingleCluster) {      GeneratorSingleCluster cursclus=(GeneratorSingleCluster)model;      outStream.append("########################################################").append(LINE_SEPARATOR);      outStream.append("## Cluster: ").append(cursclus.getName()).append(LINE_SEPARATOR);      double[] cmin=cursclus.getClipmin();      double[] cmax=cursclus.getClipmax();      if (cmin != null && cmax != null) {        outStream.append("## Clipping: ").append(FormatUtil.format(cmin)).append(" - ").append(FormatUtil.format(cmax)).append(LINE_SEPARATOR);      }      outStream.append("## Density correction factor: " + cursclus.getDensityCorrection()).append(LINE_SEPARATOR);      outStream.append("## Generators:").append(LINE_SEPARATOR);      for (int i=0; i < cursclus.getDim(); i++) {        Distribution gen=cursclus.getDistribution(i);        outStream.append("##   ").append(gen.toString()).append(LINE_SEPARATOR);      }      if (cursclus.getTransformation() != null && cursclus.getTransformation().getTransformation() != null) {        outStream.append("## Affine transformation matrix:").append(LINE_SEPARATOR);        outStream.append(FormatUtil.format(cursclus.getTransformation().getTransformation(),"## ")).append(LINE_SEPARATOR);      }      outStream.append("## Discards: " + cursclus.getDiscarded() + " Retries left: "+ cursclus.getRetries()).append(LINE_SEPARATOR);      double corf=(double)(cursclus.getSize() + cursclus.getDiscarded()) / cursclus.getSize() / globdens;      outStream.append("## Density correction factor estimation: " + corf).append(LINE_SEPARATOR);    }    outStream.append("########################################################").append(LINE_SEPARATOR);    for (TIntIterator iter=ids.iterator(); iter.hasNext(); ) {      int num=iter.next();      for (int c=0; c < data.metaLength(); c++) {        if (c != modelcol) {          if (c > 0) {            outStream.append(' ');          }          outStream.append(data.data(num,c).toString());        }      }      outStream.append(LINE_SEPARATOR);    }  }}  }
class C{  public final CC endGroupY(String s){  ver.setEndGroup(s);  return this;}  }
class C{  private DiffPart decodeCut(final int blockSize_S,final int blockSize_E,final int blockSize_B) throws DecodingException {  if (blockSize_S < 1 || blockSize_E < 1 || blockSize_B < 1) {    throw new DecodingException("Invalid value for blockSize_S: " + blockSize_S + ", blockSize_E: "+ blockSize_E+ " or blockSize_B: "+ blockSize_B);  }  int s=r.read(blockSize_S);  int e=r.read(blockSize_E);  int b=r.read(blockSize_B);  DiffPart part=new DiffPart(DiffAction.CUT);  part.setStart(s);  part.setLength(e);  part.setText(Integer.toString(b));  r.skip();  return part;}  }
class C{  public BuildingTarget(Coords coords,IBoard board,int nType){  init(coords,board,nType);}  }
class C{  public List<String> findCreatorPropertyNames(){  List<String> names=null;  for (int i=0; i < 2; ++i) {    List<? extends AnnotatedWithParams> l=(i == 0) ? getConstructors() : getFactoryMethods();    for (    AnnotatedWithParams creator : l) {      int argCount=creator.getParameterCount();      if (argCount < 1)       continue;      String name=_annotationIntrospector.findPropertyNameForParam(creator.getParameter(0));      if (name == null)       continue;      if (names == null) {        names=new ArrayList<String>();      }      names.add(name);      for (int p=1; p < argCount; ++p) {        names.add(_annotationIntrospector.findPropertyNameForParam(creator.getParameter(p)));      }    }  }  if (names == null) {    return Collections.emptyList();  }  return names;}  }
class C{  public IdsQueryBuilder ids(Collection<String> ids){  return addIds(ids);}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof Domain) {    File src1=((Domain)o).getSourceFile();    if (src1 == xmlFile) {      return true;    }    return (src1 != null && xmlFile != null && src1.equals(xmlFile));  }  return false;}  }
class C{  public synchronized void restart() throws IOException {  s_logger.info("listener restart initiated");  stop();  startup();}  }
class C{  public void testRegisterCustomConfigurationOnExistingContainer() throws Exception {  this.factory.registerConfiguration("testableContainerId",ContainerType.INSTALLED,ConfigurationType.STANDALONE,StandaloneLocalConfigurationStub.class);  Configuration configuration=this.factory.createConfiguration("testableContainerId",ContainerType.INSTALLED,ConfigurationType.STANDALONE,"/some/path");  assertEquals(StandaloneLocalConfigurationStub.class.getName(),configuration.getClass().getName());}  }
class C{  private void popContentSource(){  buffer=nextContentSource.buffer;  position=nextContentSource.position;  limit=nextContentSource.limit;  nextContentSource=nextContentSource.next;}  }
class C{  public Boolean isVmfsDatastoreMountCapable(){  return vmfsDatastoreMountCapable;}  }
class C{  public NonScanDynamicClassLoader(ClassLoader parent){  super(parent);}  }
class C{  public HadoopLocalFileSystemV2(Configuration cfg) throws IOException, URISyntaxException {  super(new DelegateFS(cfg));}  }
class C{  public static void main(String[] args){  GridlockWithUI simple=new GridlockWithUI(new Gridlock(System.currentTimeMillis()));  Console c=new Console(simple);  c.setVisible(true);}  }
class C{  private void processResponseHeaders(State state,InnerState innerState,HttpResponse response) throws StopRequest {  if (innerState.mContinuingDownload) {    return;  }  readResponseHeaders(state,innerState,response);  try {    state.mFilename=mService.generateSaveFile(mInfo.mFileName,mInfo.mTotalBytes);  } catch (  DownloaderService.GenerateSaveFileError exc) {    throw new StopRequest(exc.mStatus,exc.mMessage);  }  try {    state.mStream=new FileOutputStream(state.mFilename);  } catch (  FileNotFoundException exc) {    File pathFile=new File(Helpers.getSaveFilePath(mService));    try {      if (pathFile.mkdirs()) {        state.mStream=new FileOutputStream(state.mFilename);      }    } catch (    Exception ex) {      throw new StopRequest(DownloaderService.STATUS_FILE_ERROR,"while opening destination file: " + exc.toString(),exc);    }  }  if (Constants.LOGV) {    Log.v(Constants.TAG,"writing " + mInfo.mUri + " to "+ state.mFilename);  }  updateDatabaseFromHeaders(state,innerState);  checkConnectivity(state);}  }
class C{  public static boolean isLastUnManagedVolumeToIngest(UnManagedConsistencyGroup unManagedCG,UnManagedVolume unManagedVolume){  return unManagedCG.getUnManagedVolumesMap().containsKey(unManagedVolume.getNativeGuid()) && unManagedCG.getUnManagedVolumesMap().size() == 1;}  }
class C{  public AppVersion(int major,int minor,int patch){  this(major,minor,patch,-1,null);}  }
class C{  protected void processChunkContent(ChunkRaw chunkRaw,int offsetinchunk,byte[] buf,int off,int len){}  }
class C{  public static void main(String[] args){  runClassifier(new SerializedClassifier(),args);}  }
class C{  @Override public String toString(){  return "CUevent[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public static Server createJetty(Handler handler) throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {  final Server server=new Server();  server.setHandler(handler);  HttpConfiguration httpConfig=new HttpConfiguration();  httpConfig.addCustomizer(new ForwardedRequestCustomizer());  final ServerConnector connector=new ServerConnector(server,new HttpConnectionFactory(httpConfig));  server.addConnector(connector);  connector.setPort(HTTP_PORT);  KeyStore keyStore=KeyStore.getInstance(KeyStore.getDefaultType());  InputStream keyStream=Main.class.getResourceAsStream("debug_keystore.jks");  keyStore.load(keyStream,null);  keyStream.close();  SslContextFactory ssl=new SslContextFactory();  ssl.setKeyStore(keyStore);  ssl.setKeyStorePassword("password");  SslConnectionFactory sslFactory=new SslConnectionFactory(ssl,"http/1.1");  HttpConfiguration httpsConfig=new HttpConfiguration();  httpsConfig.addCustomizer(new SecureRequestCustomizer());  httpsConfig.addCustomizer(new ForwardedRequestCustomizer());  ConnectionFactory httpsFactory=new HttpConnectionFactory(httpsConfig);  ServerConnector sslConnector=new ServerConnector(server,sslFactory,httpsFactory);  sslConnector.setPort(HTTPS_PORT);  server.addConnector(sslConnector);  registerShutdownHook(server);  return server;}  }
class C{  public static boolean isChildPath(String path,String parentPath){  if (parentPath == null || path == null) {    return false;  }  if (!path.startsWith(parentPath)) {    return false;  }  if (!parentPath.endsWith(URI_PATH_CHAR) && !path.startsWith(URI_PATH_CHAR,parentPath.length())) {    return false;  }  return true;}  }
class C{  public boolean remove(Attribute attribute){  return attribute != null && attrMap.remove(attribute.getCategory()) != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.360 -0500",hash_original_method="A7CA2EB6DD40139D85B6778D2C783F9F",hash_generated_method="EC2C494CA659AFA06CA752F5FEFC3E49") public ServiceRouteHeader createServiceRouteHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  ServiceRoute serviceRoute=new ServiceRoute();  serviceRoute.setAddress(address);  return serviceRoute;}  }
class C{  public final boolean isFinished(){  return mFinished;}  }
class C{  final void forgetContents(){  UNSAFE.putObject(this,itemOffset,this);  UNSAFE.putObject(this,waiterOffset,null);}  }
class C{  public FBNBackupManager(){}  }
class C{  public void error(Throwable t,String s){  if (isEnabled(TraceSystem.ERROR)) {    traceWriter.write(TraceSystem.ERROR,module,s,t);  }}  }
class C{  public String toString(final String name,final String header){  final Map<String,Integer> items=contents.get(name);  final StringBuilder sb=new StringBuilder(header + "\n");  for (  final Entry<String,Integer> entry : items.entrySet()) {    sb.append(entry.getKey() + " \t" + entry.getValue()+ "\n");  }  return sb.toString();}  }
class C{  public static final long fileTimeToWinTime(FileTime ftime){  return (ftime.to(TimeUnit.MICROSECONDS) - WINDOWS_EPOCH_IN_MICROSECONDS) * 10;}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    target.visit(v);    if (initializer != null) {      initializer.visit(v);    }  }}  }
class C{  protected void sendMomentaryFunctionGroup5(){  if (log.isDebugEnabled()) {    log.debug("Momentary function request not supported by Elite.");  }  return;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  double[] numbers=new double[10];  System.out.print("Enter ten numbers: ");  for (int i=0; i < numbers.length; i++)   numbers[i]=input.nextDouble();  bubbleSort(numbers);  for (  double e : numbers) {    System.out.print(e + " ");  }  System.out.println();}  }
class C{  public static void registerInterest(){  try {    Region region1=cache.getRegion(Region.SEPARATOR + REGION_NAME1);    Region region2=cache.getRegion(Region.SEPARATOR + REGION_NAME2);    assertTrue(region1 != null);    assertTrue(region2 != null);    region1.registerInterest("ALL_KEYS");    region2.registerInterest("ALL_KEYS");  } catch (  CacheWriterException e) {    fail("test failed due to " + e);  }}  }
class C{  public Intent putExtra(String name,Serializable value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putSerializable(name,value);  return this;}  }
class C{  private QueryWrapper processIn(InPredicate node,QueryState state){  String field=getVariableName(node.getValue());  FieldAndType fat=getFieldAndType(field,state);  field=fat.getFieldName();  if (node.getValueList() instanceof InListExpression) {    InListExpression list=(InListExpression)(node).getValueList();    List<Object> values=new ArrayList<Object>();    for (    Expression listItem : list.getValues()) {      Object value=this.getLiteralValue(listItem,state);      if (state.hasException())       return null;      values.add(value);    }    if (field.equals(Heading.ID)) {      String[] types=new String[state.getSources().size()];      for (int i=0; i < types.length; i++)       types[i]=state.getSources().get(i).getSource();      String[] ids=new String[values.size()];      return new QueryWrapper(QueryBuilders.idsQuery(types).addIds(values.toArray(ids)));    }    if (fat.getFieldType() == Types.REF)     return new QueryWrapper(QueryBuilders.termsQuery(field,values),field.split("\\.")[0]);    return new QueryWrapper(QueryBuilders.termsQuery(field,values));  } else {    state.addException("SELECT ... IN can only be used with a list of values!");    return null;  }}  }
class C{  public static void testSplit(String regexp,String text,String[] expected){  testSplit(regexp,text,0,expected);}  }
class C{  public NotificationEffect effect(){  return CENTER.effect();}  }
class C{  public void ruleR6R7(Graph graph){  List<Node> nodes=graph.getNodes();  for (  Node b : nodes) {    List<Node> adjacents=graph.getAdjacentNodes(b);    if (adjacents.size() < 2)     continue;    ChoiceGenerator cg=new ChoiceGenerator(adjacents.size(),2);    for (int[] choice=cg.next(); choice != null; choice=cg.next()) {      Node a=adjacents.get(choice[0]);      Node c=adjacents.get(choice[1]);      if (graph.isAdjacentTo(a,c))       continue;      if (!(graph.getEndpoint(b,a) == Endpoint.TAIL))       continue;      if (!(graph.getEndpoint(c,b) == Endpoint.CIRCLE))       continue;      if (graph.getEndpoint(a,b) == Endpoint.TAIL) {        graph.setEndpoint(c,b,Endpoint.TAIL);        this.orientSimilarPairs(graph,this.getKnowledge(),c,b,Endpoint.TAIL);        logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Single tails (tail)",graph.getEdge(c,b)));        changeFlag=true;      }      if (graph.getEndpoint(a,b) == Endpoint.CIRCLE) {        logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Single tails (tail)",graph.getEdge(c,b)));        graph.setEndpoint(c,b,Endpoint.TAIL);        this.orientSimilarPairs(graph,this.getKnowledge(),c,b,Endpoint.TAIL);        changeFlag=true;      }    }  }}  }
class C{  public Blade routes(List<Route> routes){  Assert.notEmpty(routes,"Routes not is empty!");  routers.addRoutes(routes);  return this;}  }
class C{  public OutputUser send(){  try {    return output.get();  } catch (  ConcurrentException ex) {    throw new RuntimeException("Could not generate OutputChannel for " + getNick(),ex);  }}  }
class C{  public static void notEmpty(Collection<?> str,String message,Object... params) throws AssertException {  if (CommonUtil.isEmpty(str)) {    throw new AssertException(ErrorCodeDef.IS_NULL_20006,message,params);  }}  }
class C{  public LayoutParams(int width,int height,float weight){  super(width,height);  this.weight=weight;}  }
class C{  public String foldsTipText(){  return "Number of xval folds to use when estimating subset accuracy.";}  }
class C{  public static Map<String,Object> sendMailHiddenInLogFromScreen(DispatchContext dctx,Map<String,? extends Object> rServiceContext){  Map<String,Object> serviceContext=UtilMisc.makeMapWritable(rServiceContext);  serviceContext.put("hideInLog",true);  return sendMailFromScreen(dctx,serviceContext);}  }
class C{  int generate(){  int movement=0;  nonAccelMovement=0;  do {    final int dir=position >= 0 ? 1 : -1;switch (step) {case 0:      if (Math.abs(position) < FIRST_MOVEMENT_THRESHOLD) {        return movement;      }    movement+=dir;  nonAccelMovement+=dir;step=1;break;case 1:if (Math.abs(position) < SECOND_CUMULATIVE_MOVEMENT_THRESHOLD) {return movement;}movement+=dir;nonAccelMovement+=dir;position-=SECOND_CUMULATIVE_MOVEMENT_THRESHOLD * dir;step=2;break;default :if (Math.abs(position) < SUBSEQUENT_INCREMENTAL_MOVEMENT_THRESHOLD) {return movement;}movement+=dir;position-=dir * SUBSEQUENT_INCREMENTAL_MOVEMENT_THRESHOLD;float acc=acceleration;acc*=1.1f;acceleration=acc < MAX_ACCELERATION ? acc : acceleration;break;}} while (true);}  }
class C{  private int doLaunch(Container container,Path containerWorkDir) throws Exception {  Map<String,String> environment=container.getLaunchContext().getEnvironment();  EnvironmentUtils.putAll(environment);  Set<URL> additionalClassPathUrls=this.filterAndBuildUserClasspath(container);  ExecJavaCliParser javaCliParser=this.createExecCommandParser(containerWorkDir.toString());  UserGroupInformation.setLoginUser(null);  try {    URLClassLoader containerCl=new URLClassLoader(additionalClassPathUrls.toArray(additionalClassPathUrls.toArray(new URL[]{})),null);    Thread.currentThread().setContextClassLoader(containerCl);    String containerLauncher=javaCliParser.getMain();    Class<?> containerClass=Class.forName(containerLauncher,true,containerCl);    Method mainMethod=containerClass.getMethod("main",new Class[]{String[].class});    mainMethod.setAccessible(true);    String[] arguments=javaCliParser.getMainArguments();    this.doLaunchContainer(containerClass,mainMethod,arguments);  } catch (  Exception e) {    logger.error("Failed to launch container " + container,e);    container.handle(new ContainerDiagnosticsUpdateEvent(container.getContainerId(),e.getMessage()));    return -1;  } finally {    logger.info("Removing symlinks");    this.cleanUp();  }  return 0;}  }
class C{  public static MemberDialog createBuildNewMemberDialog(final JFrame owner,final TypeManager typeManager){  return new MemberDialog(owner,typeManager);}  }
class C{  Class evalReturnType(CallStack callstack,Interpreter interpreter) throws EvalError {  insureNodesParsed();  if (returnTypeNode != null)   return returnTypeNode.evalReturnType(callstack,interpreter); else   return null;}  }
class C{  void onAddToDatabase(Context context,ContentValues values){  values.put(LauncherSettings.BaseLauncherColumns.ITEM_TYPE,itemType);  values.put(LauncherSettings.Favorites.CONTAINER,container);  values.put(LauncherSettings.Favorites.SCREEN,screenId);  values.put(LauncherSettings.Favorites.CELLX,cellX);  values.put(LauncherSettings.Favorites.CELLY,cellY);  values.put(LauncherSettings.Favorites.SPANX,spanX);  values.put(LauncherSettings.Favorites.SPANY,spanY);  values.put(LauncherSettings.Favorites.RANK,rank);  long serialNumber=UserManagerCompat.getInstance(context).getSerialNumberForUser(user);  values.put(LauncherSettings.Favorites.PROFILE_ID,serialNumber);  if (screenId == Workspace.EXTRA_EMPTY_SCREEN_ID) {    throw new RuntimeException("Screen id should not be EXTRA_EMPTY_SCREEN_ID");  }}  }
class C{  private void changeStimulusDimension(final int num){  double[] newStim=new double[num];  for (int i=0; i < num; i++) {    if (i < valArray.length) {      newStim[i]=valArray[i];    } else {      newStim[i]=0;    }  }  valArray=newStim;}  }
class C{  @Override public void run(){  amIActive=true;  String destHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster destination=null;  WhiteboxRasterInfo imageInfo=null;  int nCols=0;  int nRows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double x, y, z;  int progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  String resampleMethod="nearest neighbour";  double north, south, east, west;  double gridResX, gridResY;  int currentFile=-1;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  destHeader=args[1];  resampleMethod=args[2].toLowerCase().trim();  if (!resampleMethod.equals("nearest neighbour") && !resampleMethod.equals("bilinear") && !resampleMethod.equals("cubic convolution")) {    showFeedback("Resample method not recognized");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified.");    return;  }  try {    boolean eastGreaterThanWest=true;    boolean northGreaterThanSouth=true;    double[][] imageData=new double[numImages][11];    north=Double.NEGATIVE_INFINITY;    south=Double.POSITIVE_INFINITY;    east=Double.NEGATIVE_INFINITY;    west=Double.POSITIVE_INFINITY;    double cellSizeX=Double.POSITIVE_INFINITY;    double cellSizeY=Double.POSITIVE_INFINITY;    for (a=0; a < numImages; a++) {      imageInfo=new WhiteboxRasterInfo(imageFiles[a]);      imageData[a][0]=imageInfo.getNorth();      imageData[a][1]=imageInfo.getSouth();      imageData[a][2]=imageInfo.getEast();      imageData[a][3]=imageInfo.getWest();      imageData[a][4]=imageInfo.getNumberRows();      imageData[a][5]=imageInfo.getNumberColumns();      imageData[a][6]=imageInfo.getCellSizeX();      imageData[a][7]=imageInfo.getCellSizeY();      imageData[a][8]=imageInfo.getNoDataValue();      imageData[a][9]=imageInfo.getEast() - imageInfo.getWest();      imageData[a][10]=imageInfo.getNorth() - imageInfo.getSouth();      if (a == 0) {        if (imageData[a][0] < imageData[a][1]) {          northGreaterThanSouth=false;          north=Double.POSITIVE_INFINITY;          south=Double.NEGATIVE_INFINITY;        }        if (imageData[a][2] < imageData[a][3]) {          eastGreaterThanWest=false;          east=Double.POSITIVE_INFINITY;          west=Double.NEGATIVE_INFINITY;        }      }      if (northGreaterThanSouth) {        if (imageData[a][0] > north) {          north=imageData[a][0];        }        if (imageData[a][1] < south) {          south=imageData[a][1];        }      } else {        if (imageData[a][0] < north) {          north=imageData[a][0];        }        if (imageData[a][1] > south) {          south=imageData[a][1];        }      }      if (eastGreaterThanWest) {        if (imageData[a][2] > east) {          east=imageData[a][2];        }        if (imageData[a][3] < west) {          west=imageData[a][3];        }      } else {        if (imageData[a][2] < east) {          east=imageData[a][2];        }        if (imageData[a][3] > west) {          west=imageData[a][3];        }      }      if (imageData[a][6] < cellSizeX) {        cellSizeX=imageData[a][6];      }      if (imageData[a][7] < cellSizeY) {        cellSizeY=imageData[a][7];      }    }    nRows=(int)Math.round(Math.abs(north - south) / cellSizeY);    nCols=(int)Math.round(Math.abs(east - west) / cellSizeX);    destination=new WhiteboxRaster(destHeader,north,south,east,west,nRows,nCols,WhiteboxRasterBase.DataScale.CONTINUOUS,WhiteboxRasterBase.DataType.FLOAT,outputNoData,outputNoData);    int nColsLessOne=nCols - 1;    int nRowsLessOne=nRows - 1;    gridResX=destination.getCellSizeX();    gridResY=destination.getCellSizeY();    double northernEdge=north - gridResY;    double westernEdge=west + gridResX;    if (north < south) {      northernEdge=north + gridResY;    }    if (east < west) {      westernEdge=west - gridResX;    }    double yRange=north - south - gridResY;    double xRange=east - west - gridResX;    int sourceCol, sourceRow;    if (resampleMethod.equals("nearest neighbour")) {      for (a=0; a < numImages; a++) {        image=new WhiteboxRaster(imageFiles[a],"r");        int startRow=destination.getRowFromYCoordinate(image.getNorth()) - 1;        int endRow=destination.getRowFromYCoordinate(image.getSouth()) + 1;        int startCol=destination.getColumnFromXCoordinate(image.getWest()) - 1;        int endCol=destination.getColumnFromXCoordinate(image.getEast()) + 1;        if (startRow < 0) {          startRow=0;        }        if (startCol < 0) {          startCol=0;        }        if (endRow > nRows - 1) {          endRow=nRows - 1;        }        if (endCol > nCols - 1) {          endCol=nCols - 1;        }        for (row=startRow; row <= endRow; row++) {          y=northernEdge - (yRange * row) / nRowsLessOne;          for (col=startCol; col <= endCol; col++) {            x=westernEdge + (xRange * col) / nColsLessOne;            if (isBetween(y,imageData[a][0],imageData[a][1]) && isBetween(x,imageData[a][2],imageData[a][3])) {              sourceRow=(int)Math.round((imageData[a][0] - y) / imageData[a][10] * (imageData[a][4] - 0.5));              sourceCol=(int)Math.round((x - imageData[a][3]) / imageData[a][9] * (imageData[a][5] - 0.5));              z=image.getValue(sourceRow,sourceCol);              if (z != imageData[a][8]) {                destination.setValue(row,col,z);              } else {                destination.setValue(row,col,outputNoData);              }            }          }        }        image.close();        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * (a + 1) / numImages);        updateProgress(progress);      }    } else {      if (destination.getDataType() != WhiteboxRaster.DataType.DOUBLE && destination.getDataType() != WhiteboxRaster.DataType.FLOAT) {        showFeedback("The destination image is not of an appropriate data" + " type (i.e. double or float) to perform this operation.");        return;      }      double dX, dY;      double srcRow, srcCol;      double originRow, originCol;      double rowN, colN;      double sumOfDist;      double[] shiftX;      double[] shiftY;      int numNeighbours=0;      double[][] neighbour;      if (resampleMethod.equals("cubic convolution")) {        shiftX=new double[]{-1,0,1,2,-1,0,1,2,-1,0,1,2,-1,0,1,2};        shiftY=new double[]{-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2};        numNeighbours=16;        neighbour=new double[16][2];      } else {        shiftX=new double[]{0,1,0,1};        shiftY=new double[]{0,0,1,1};        numNeighbours=4;        neighbour=new double[4][2];      }      for (a=0; a < numImages; a++) {        image=new WhiteboxRaster(imageFiles[a],"r");        int startRow=destination.getRowFromYCoordinate(image.getNorth()) - 1;        int endRow=destination.getRowFromYCoordinate(image.getSouth()) + 1;        int startCol=destination.getColumnFromXCoordinate(image.getWest()) - 1;        int endCol=destination.getColumnFromXCoordinate(image.getEast()) + 1;        if (startRow < 0) {          startRow=0;        }        if (startCol < 0) {          startCol=0;        }        if (endRow > nRows - 1) {          endRow=nRows - 1;        }        if (endCol > nCols - 1) {          endCol=nCols - 1;        }        for (row=startRow; row <= endRow; row++) {          y=northernEdge - (yRange * row) / nRowsLessOne;          for (col=startCol; col <= endCol; col++) {            x=westernEdge + (xRange * col) / nColsLessOne;            if (isBetween(y,imageData[a][0],imageData[a][1]) && isBetween(x,imageData[a][2],imageData[a][3])) {              imageNoData=imageData[a][8];              srcRow=(imageData[a][0] - y) / imageData[a][10] * (imageData[a][4] - 0.5);              srcCol=(x - imageData[a][3]) / imageData[a][9] * (imageData[a][5] - 0.5);              originRow=Math.floor(srcRow);              originCol=Math.floor(srcCol);              sumOfDist=0;              for (i=0; i < numNeighbours; i++) {                rowN=originRow + shiftY[i];                colN=originCol + shiftX[i];                neighbour[i][0]=image.getValue((int)rowN,(int)colN);                dY=rowN - srcRow;                dX=colN - srcCol;                if ((dX + dY) != 0 && neighbour[i][0] != imageNoData) {                  neighbour[i][1]=1 / (dX * dX + dY * dY);                  sumOfDist+=neighbour[i][1];                } else                 if (neighbour[i][0] == imageNoData) {                  neighbour[i][1]=0;                } else {                  destination.setValue(row,col,neighbour[0][3]);                  break;                }              }              if (sumOfDist > 0) {                z=0;                for (i=0; i < numNeighbours; i++) {                  z+=(neighbour[i][0] * neighbour[i][1]) / sumOfDist;                }                destination.setValue(row,col,z);              } else {                destination.setValue(row,col,outputNoData);              }            }          }        }        image.close();        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * (a + 1) / numImages);        updateProgress(progress);      }    }    destination.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    destination.addMetadataEntry("Created on " + new Date());    destination.close();    returnData(destHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void storePtsResult(String deviceSerial,String classMethodName,String result){  mMap.put(generateTestKey(deviceSerial,classMethodName),result);}  }
class C{  public Builder withErrorCode(String errorCode){  message.setErrorCode(errorCode);  return this;}  }
class C{  public void waitForPrimaryPersistentRecovery(){  boolean interupted=false;  while (true) {    try {      someMemberRecoveredLatch.await();      break;    } catch (    InterruptedException e) {      interupted=true;    }  }  if (interupted) {    Thread.currentThread().interrupt();  }  if (recoveryException != null) {    StackTraceElement[] oldStack=recoveryException.getStackTrace();    recoveryException.fillInStackTrace();    ArrayList<StackTraceElement> newStack=new ArrayList<StackTraceElement>();    newStack.addAll(Arrays.asList(oldStack));    newStack.addAll(Arrays.asList(recoveryException.getStackTrace()));    recoveryException.setStackTrace(newStack.toArray(new StackTraceElement[0]));    throw recoveryException;  }}  }
class C{  protected KeyAgreement(KeyAgreementSpi keyAgreeSpi,Provider provider,String algorithm){  this.spi=keyAgreeSpi;  this.provider=provider;  this.algorithm=algorithm;  lock=null;}  }
class C{  public static LatLon interpolate(double amount,LatLon value1,LatLon value2){  if (value1 == null || value2 == null) {    String message=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (LatLon.equals(value1,value2))   return value1;  Line line;  try {    line=Line.fromSegment(new Vec4(value1.getLongitude().radians,value1.getLatitude().radians,0),new Vec4(value2.getLongitude().radians,value2.getLatitude().radians,0));  } catch (  IllegalArgumentException e) {    return value1;  }  Vec4 p=line.getPointAt(amount);  return LatLon.fromRadians(p.y(),p.x);}  }
class C{  @Override public synchronized boolean retainAll(Collection<?> collection){  return super.retainAll(collection);}  }
class C{  private void addAnswer(String riddle,String answer){  Collection<String> answers=riddles.get(riddle);  if (answers == null) {    answers=new LinkedList<String>();    riddles.put(riddle,answers);  }  answers.add(answer);}  }
class C{  public XlsxSheetMetaData parseMetaData(Operator callingOperator,ExcelResultSetConfiguration configuration,XlsxReadMode readMode) throws XMLStreamException, IOException, UserError {  int firstRowIndex=Math.max(configuration.getRowOffset(),0);  int firstColumnIndex=configuration.getColumnOffset();  int userSpecifiedLastRow=configuration.getRowLast();  int userSpecifiedLastColumn=configuration.getColumnLast();  if (firstColumnIndex > userSpecifiedLastColumn || firstRowIndex > userSpecifiedLastRow || firstColumnIndex < 0 || firstRowIndex < 0) {    throw new UserError(callingOperator,223,convertOffsetToHumanReadableFormat(firstColumnIndex,firstRowIndex,userSpecifiedLastRow,userSpecifiedLastColumn));  }  if (readMode != XlsxReadMode.WIZARD_WORKPANE) {    if (userSpecifiedLastColumn != Integer.MAX_VALUE) {      return new XlsxSheetMetaData(firstColumnIndex,firstRowIndex,userSpecifiedLastColumn,Math.min(userSpecifiedLastRow,MAXIMUM_XLSX_ROW_INDEX));    }  } else {    firstRowIndex=0;    firstColumnIndex=0;  }  boolean isRowWithoutSpan=false;  int maximumColumn=-1;  XMLStreamReader reader=null;  try (ZipFile xlsxZipFile=new ZipFile(xlsxFile)){    ZipEntry workbookZipEntry=xlsxZipFile.getEntry(workbookZipEntryPath);    if (workbookZipEntry == null) {      throw new FileNotFoundException("Selected workbook is missing in XLSX file. Path: " + workbookZipEntryPath);    }    reader=xmlInputFactory.createXMLStreamReader(xlsxZipFile.getInputStream(workbookZipEntry));    while (reader.hasNext()) {      int eventCode=reader.next();      if (eventCode == XMLStreamReader.START_ELEMENT) {        Attributes attributes=XlsxUtilities.getAttributes(reader);switch (reader.getLocalName()) {case TAG_DIMENSION:          String dimension=attributes.getValue(ATT_DIMENSION_REF);        if (dimension == null || dimension.isEmpty()) {          continue;        }      int dimColonIndex=dimension.indexOf(':');    if (dimColonIndex != -1) {      String maxCellRange=dimension.substring(dimColonIndex + 1);      try {        XlsxCellCoordinates cellRange=XlsxUtilities.convertCellRefToCoordinates(maxCellRange);        return new XlsxSheetMetaData(firstColumnIndex,firstRowIndex,cellRange.columnNumber,Integer.MAX_VALUE);      } catch (      IllegalArgumentException e) {      }    }  break;case XlsxUtilities.TAG_ROW:String spans=attributes.getValue(ATT_SPANS);if (spans != null) {int rowColonIndex=spans.indexOf(':');if (rowColonIndex != -1) {  int maxColumn=Integer.parseInt(spans.substring(rowColonIndex + 1,spans.length())) - 1;  if (maxColumn > maximumColumn) {    maximumColumn=maxColumn;  }}} else {isRowWithoutSpan=true;}break;case XlsxUtilities.TAG_CELL:if (isRowWithoutSpan) {XlsxCellCoordinates columnAndRowIndices=XlsxUtilities.convertCellRefToCoordinates(attributes.getValue(XlsxUtilities.TAG_CELL_REFERENCE));if (columnAndRowIndices.columnNumber > maximumColumn) {maximumColumn=columnAndRowIndices.columnNumber;}}break;default :break;}} else if (eventCode == XMLStreamReader.END_ELEMENT) {if (reader.getLocalName().equals(XlsxUtilities.TAG_ROW)) {isRowWithoutSpan=false;}}}}  finally {if (reader != null) {reader.close();}}return new XlsxSheetMetaData(firstColumnIndex,firstRowIndex,maximumColumn,Integer.MAX_VALUE);}  }
class C{  public AlgVector(int n){  m_Elements=new double[n];  initialize();}  }
class C{  public static String[] split(String s,char c){  int i, b, e;  int cnt;  String res[];  int ln=s.length();  i=0;  cnt=1;  while ((i=s.indexOf(c,i)) != -1) {    cnt++;    i++;  }  res=new String[cnt];  i=0;  b=0;  while (b <= ln) {    e=s.indexOf(c,b);    if (e == -1)     e=ln;    res[i++]=s.substring(b,e);    b=e + 1;  }  return res;}  }
class C{  public static void main(String args[]){  if (args.length != 1) {    throw new RuntimeException("Usage: java HttpUtils <serviceResetUrl>");  }  performHttpGet(args[0]);}  }
class C{  @Override public void update(){  if (condition.applies()) {    dispatchUpdate();  }}  }
class C{  public boolean isBroadcast(){  try {    return channel.socket().getBroadcast();  } catch (  SocketException e) {    throw new RuntimeIoException(e);  }}  }
class C{  public static void launchDataReductionPromo(Activity parentActivity){  if (!DataReductionProxySettings.getInstance().isDataReductionProxyPromoAllowed()) {    return;  }  if (DataReductionProxySettings.getInstance().isDataReductionProxyManaged())   return;  if (DataReductionProxySettings.getInstance().isDataReductionProxyEnabled())   return;  if (getDisplayedDataReductionPromo(parentActivity))   return;  if (MultiWindowUtils.getInstance().isMultiWindow(parentActivity))   return;  DataReductionPromoScreen promoScreen=new DataReductionPromoScreen(parentActivity);  promoScreen.setOnDismissListener(promoScreen);  promoScreen.show();}  }
class C{  private static void omitirFicherosSubidosAnt(Integer bookId,Integer folderId,Map documents,String entidad,String sessionID) throws BookException, SessionException, ValidationException {  List docsFolder=FolderFileSession.getBookFolderDocsWithPages(sessionID,bookId,folderId.intValue(),entidad);  for (Iterator it=docsFolder.iterator(); it.hasNext(); ) {    AxDoch axdoch=(AxDoch)it.next();    FlushFdrDocument documento=(FlushFdrDocument)documents.get(axdoch.getName());    if (documento != null) {      for (Iterator pages=axdoch.getPages().iterator(); pages.hasNext(); ) {        AxPageh page=(AxPageh)pages.next();        for (Iterator pagesDoc=documento.getPages().iterator(); pagesDoc.hasNext(); ) {          FlushFdrPage paginaDocumento=(FlushFdrPage)pagesDoc.next();          if (page.getName().equals(paginaDocumento.getPageName())) {            _logger.warn("El fichero [" + paginaDocumento.getPageName() + "] en el documento ["+ documento.getDocumentName()+ "] para el registro con ID["+ folderId+ "] y bookID ["+ bookId+ "] ya ha sido adjuntado con anterioridad");            pagesDoc.remove();          }        }      }    }  }}  }
class C{  @SafeVarargs public final AssertSubscriber<T> assertValuesWith(Consumer<T>... expectations){  if (!valuesStorage) {    throw new IllegalStateException("Using assertNoValues() requires enabling values storage");  }  final int expectedValueCount=expectations.length;  if (expectedValueCount != values.size()) {    throw new AssertionError("Different value count: expected = " + expectedValueCount + ", actual = "+ valueCount,null);  }  for (int i=0; i < expectedValueCount; i++) {    Consumer<T> consumer=expectations[i];    T actualValue=values.get(i);    consumer.accept(actualValue);  }  return this;}  }
class C{  public void testAddUser(){  final long n=new Date().getTime() % 100000;  final String given="Testgiven" + n;  final String family="Testfamily" + n;  click(viewWithId(R.id.action_new_user));  type(given,viewWithId(R.id.add_user_given_name_tv));  type(family,viewWithId(R.id.add_user_family_name_tv));  click(viewWithText("OK"));  waitForProgressFragment();  expectVisible(dataThat(new UserMatchers.HasFullName(given + " " + family)));  click(dataThat(new UserMatchers.HasFullName(given + " " + family)));  click(viewWithText("TT"));  expectVisible(viewWithText(given + " " + family));}  }
class C{  private void separateAnnotationsKinds(JCTree typetree,Type type,Symbol sym,TypeAnnotationPosition pos){  List<Attribute.Compound> annotations=sym.getRawAttributes();  ListBuffer<Attribute.Compound> declAnnos=new ListBuffer<Attribute.Compound>();  ListBuffer<Attribute.TypeCompound> typeAnnos=new ListBuffer<Attribute.TypeCompound>();  ListBuffer<Attribute.TypeCompound> onlyTypeAnnos=new ListBuffer<Attribute.TypeCompound>();  for (  Attribute.Compound a : annotations) {switch (annotationType(a,sym)) {case DECLARATION:      declAnnos.append(a);    break;case BOTH:{    declAnnos.append(a);    Attribute.TypeCompound ta=toTypeCompound(a,pos);    typeAnnos.append(ta);    break;  }case TYPE:{  Attribute.TypeCompound ta=toTypeCompound(a,pos);  typeAnnos.append(ta);  onlyTypeAnnos.append(ta);  break;}}}sym.resetAnnotations();sym.setDeclarationAttributes(declAnnos.toList());if (typeAnnos.isEmpty()) {return;}List<Attribute.TypeCompound> typeAnnotations=typeAnnos.toList();if (type == null) {type=sym.getEnclosingElement().asType();type=typeWithAnnotations(typetree,type,typeAnnotations,typeAnnotations);sym.appendUniqueTypeAttributes(typeAnnotations);return;}type=typeWithAnnotations(typetree,type,typeAnnotations,onlyTypeAnnos.toList());if (sym.getKind() == ElementKind.METHOD) {sym.type.asMethodType().restype=type;} else if (sym.getKind() == ElementKind.PARAMETER) {sym.type=type;if (sym.getQualifiedName().equals(names._this)) {sym.owner.type.asMethodType().recvtype=type;} else {MethodType methType=sym.owner.type.asMethodType();List<VarSymbol> params=((MethodSymbol)sym.owner).params;List<Type> oldArgs=methType.argtypes;ListBuffer<Type> newArgs=new ListBuffer<Type>();while (params.nonEmpty()) {if (params.head == sym) {  newArgs.add(type);} else {  newArgs.add(oldArgs.head);}oldArgs=oldArgs.tail;params=params.tail;}methType.argtypes=newArgs.toList();}} else {sym.type=type;}sym.appendUniqueTypeAttributes(typeAnnotations);if (sym.getKind() == ElementKind.PARAMETER || sym.getKind() == ElementKind.LOCAL_VARIABLE || sym.getKind() == ElementKind.RESOURCE_VARIABLE || sym.getKind() == ElementKind.EXCEPTION_PARAMETER) {sym.owner.appendUniqueTypeAttributes(sym.getRawTypeAttributes());}}  }
class C{  static void referenced(ObjID id,long sequenceNum,VMID vmid){synchronized (tableLock) {    ObjectEndpoint oe=new ObjectEndpoint(id,Transport.currentTransport());    Target target=objTable.get(oe);    if (target != null) {      target.referenced(sequenceNum,vmid);    }  }}  }
class C{  private static double b0(double u){  double tmp=1.0 - u;  return (tmp * tmp * tmp);}  }
class C{  private static String generateNameFromType(Type type){  String name=type.typeName().replace('.','$');  int dimensions=type.dimension().length() / 2;  for (int i=0; i < dimensions; i++) {    name="arrayOf_" + name;  }  return name;}  }
class C{  @Override protected void determineCoverageGoals(){  List<MethodNoExceptionCoverageTestFitness> goals=new MethodNoExceptionCoverageFactory().getCoverageGoals();  for (  MethodNoExceptionCoverageTestFitness goal : goals) {    methodCoverageMap.put(goal.getClassName() + "." + goal.getMethod(),goal);    if (Properties.TEST_ARCHIVE)     TestsArchive.instance.addGoalToCover(this,goal);  }}  }
class C{  public int hashCode(){  return url.hashCode();}  }
class C{  Field readField(){  ReferenceTypeImpl refType=readReferenceType();  long fieldRef=readFieldRef();  return refType.getFieldMirror(fieldRef);}  }
class C{  public void deltaXTriangleWeigths(PixelState pixel){  pixel.triangleWeight1+=diff23y * denomInverted;  pixel.triangleWeight2-=diff13y * denomInverted;  pixel.triangleWeight3=1.f - (pixel.triangleWeight1 + pixel.triangleWeight2);}  }
class C{  public static Button createPushButton(Composite parent,String label,String tooltip,Image image){  Button button=createPushButton(parent,label,image);  button.setToolTipText(tooltip);  return button;}  }
class C{  public MutableLong(final long value){  super();  this.value=value;}  }
class C{  public void add(byte[] vals){  add(vals,0,vals.length);}  }
class C{  public void switchToLeftCamera(final Renderer r){  ContextManager.getCurrentContext().enforceState(redColorMask);  _leftCamera.update();  _leftCamera.apply(r);}  }
class C{  public double incrementAndReturn(){  if (enabled) {    return ++count;  } else   return 0;}  }
class C{  public static void rotate(File file,int max,String extension) throws IOException {  FileUtilSupport.getDefault().rotate(file,max,extension);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isMessageTransferred(){  if (msgsent >= msgsize) {    return true;  } else {    return false;  }}  }
class C{  private static void assertBufferMatchesResponseBody(byte[] buffer,int count){  assertArrayEquals(Arrays.copyOf(TEST_RESPONSE_BODY,count),buffer);}  }
class C{  public TimeSeriesLagSearch(IndependenceTest independenceTest){  if (independenceTest == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;}  }
class C{  protected boolean accept(Component aComponent){  if (!(aComponent.isVisible() && aComponent.isDisplayable() && aComponent.isEnabled())) {    return false;  }  if (!(aComponent instanceof Window)) {    for (Container enableTest=aComponent.getParent(); enableTest != null; enableTest=enableTest.getParent()) {      if (!(enableTest.isEnabled() || enableTest.isLightweight())) {        return false;      }      if (enableTest instanceof Window) {        break;      }    }  }  boolean focusable=aComponent.isFocusable();  if (aComponent.isFocusTraversableOverridden()) {    return focusable;  }  ComponentPeer peer=aComponent.getPeer();  return (peer != null && peer.isFocusable());}  }
class C{  public static void main(String... args) throws SQLException {  CsvSample.write();  CsvSample.read();  FileUtils.delete("data/test.csv");}  }
class C{  private void showPopupMenu(final MouseEvent event){  final JPopupMenu menu=new CNativeFunctionViewFilterFieldMenu(getFilterField());  menu.show(event.getComponent(),event.getX(),event.getY());}  }
class C{  public boolean shouldLogOnNullSet(String lhs,String rhs){  if (nseh == null) {    return true;  }  return nseh.shouldLogOnNullSet(lhs,rhs);}  }
class C{  public RemoteCarrierSlaServiceImpl(final GenericDTOService<CarrierSlaDTO> carrierSlaDTOGenericDTOService,final FederationFacade federationFacade){  super(carrierSlaDTOGenericDTOService);  this.federationFacade=federationFacade;}  }
class C{  public ServiceCall<String> convertDocumentToText(File document,String mediaType,JsonObject customConfig){  Request request=createConversionRequest(document,null,ConversionTarget.NORMALIZED_TEXT,customConfig);  return createServiceCall(request,ResponseConverterUtils.getString());}  }
class C{  public Process start() throws IOException {  if (this.serverProcess != null) {    throw new IllegalArgumentException("Server already started");  }  this.serverProcess=Runtime.getRuntime().exec(getCommandLine());  return this.serverProcess;}  }
class C{  static void initResource(){  try {    messageRB=ResourceBundle.getBundle("sun.tools.javac.resources.javac");  } catch (  MissingResourceException e) {    throw new Error("Fatal: Resource for javac is missing");  }}  }
class C{  private void hangUp(){  send("Hanging up");  getTelephonyService().endCall();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String[] recentStationIDs=Sage.getRawProperties().getMRUList("recent_channels",10);  java.util.ArrayList rv=new java.util.ArrayList();  for (int i=0; recentStationIDs != null && i < recentStationIDs.length; i++) {    try {      int id=Integer.parseInt(recentStationIDs[i]);      if (id != 0) {        Channel c=Wizard.getInstance().getChannelForStationID(id);        if (c != null && c.isViewable() && Wizard.getInstance().getAirings(id,Sage.time(),Sage.time() + 1,false).length > 0)         rv.add(c);      }    } catch (    NumberFormatException nfe) {    }  }  return (Channel[])rv.toArray(new Channel[0]);}  }
class C{  public Currency read(String symbol){  return Currency.getInstance(symbol);}  }
class C{  @Override public void transform(AffineTransform tx){  invalidateTransformedShape();  if (get(TRANSFORM) != null || (tx.getType() & (AffineTransform.TYPE_TRANSLATION)) != tx.getType()) {    if (get(TRANSFORM) == null) {      set(TRANSFORM,(AffineTransform)tx.clone());    } else {      AffineTransform t=TRANSFORM.getClone(this);      t.preConcatenate(tx);      set(TRANSFORM,t);    }  } else {    Point2D.Double anchor=getStartPoint();    Point2D.Double lead=getEndPoint();    setBounds((Point2D.Double)tx.transform(anchor,anchor),(Point2D.Double)tx.transform(lead,lead));    if (get(FILL_GRADIENT) != null && !get(FILL_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=FILL_GRADIENT.getClone(this);      g.transform(tx);      set(FILL_GRADIENT,g);    }    if (get(STROKE_GRADIENT) != null && !get(STROKE_GRADIENT).isRelativeToFigureBounds()) {      Gradient g=STROKE_GRADIENT.getClone(this);      g.transform(tx);      set(STROKE_GRADIENT,g);    }  }}  }
class C{  protected void customize(@NotNull V value){  setText(myStaticText != null ? myStaticText : value.toString());}  }
class C{  public static Map<String,Object> updateAffiliate(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  Locale locale=(Locale)context.get("locale");  String partyId=getPartyId(context);  if (UtilValidate.isEmpty(partyId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(ServiceUtil.resource,"serviceUtil.party_id_missing",locale));  }  GenericValue affiliate=null;  try {    affiliate=EntityQuery.use(delegator).from("Affiliate").where("partyId",partyId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_update_affiliate_information_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  if (affiliate == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_update_affiliate_information_not_found",locale));  }  affiliate.setNonPKFields(context);  try {    affiliate.store();  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_update_affiliate_information_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  return ServiceUtil.returnSuccess();}  }
class C{  public ShieldFrame(byte shieldId,byte functionId){  this.shieldId=shieldId;  this.verificationByte=getNewVerificationByte();  this.functionId=functionId;  arguments=new ArrayList<>();}  }
class C{  public boolean hasExperimentNotes(){  return hasExtension(GwoExperimentNotes.class);}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public boolean saveChunks(boolean bln,net.minecraft.util.IProgressUpdate ipu){  return provider.saveChunks(bln,ipu);}  }
class C{  public TestCertificate(String diff,String type){  super(type);  this.diff=diff;}  }
class C{  public GenerateCodeException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public CtClass[] mayThrow(){  return super.mayThrow();}  }
class C{  public HessianRemote(String type,String url){  this.type=type;  this.url=url;}  }
class C{  @GuardedBy("lock") private int readSize(){  int count=writePosition - readPosition;  return (count < 0) ? count + buffer.length : count;}  }
class C{  private static boolean isFirstTime(){  Path acceptedLicenseFile=Paths.get(Constant.getInstance().ACCEPTED_LICENSE);  return Files.notExists(acceptedLicenseFile);}  }
class C{  public static boolean isParityAdjusted(byte[] key,int offset) throws InvalidKeyException {  if (key == null) {    throw new InvalidKeyException("null key");  }  if (key.length - offset < DES_KEY_LEN) {    throw new InvalidKeyException("Wrong key size");  }  for (int i=0; i < DES_KEY_LEN; i++) {    int k=Integer.bitCount(key[offset++] & 0xff);    if ((k & 1) == 0) {      return false;    }  }  return true;}  }
class C{  public void writeTo(OutputStream os) throws IOException {  DataOutputStream dos=new DataOutputStream(os);  dos.writeInt(N);  dos.writeInt(q);  dos.writeInt(df);  dos.writeInt(df1);  dos.writeInt(df2);  dos.writeInt(df3);  dos.writeInt(db);  dos.writeInt(dm0);  dos.writeInt(c);  dos.writeInt(minCallsR);  dos.writeInt(minCallsMask);  dos.writeBoolean(hashSeed);  dos.write(oid);  dos.writeBoolean(sparse);  dos.writeBoolean(fastFp);  dos.write(polyType);  dos.writeUTF(hashAlg.getAlgorithmName());}  }
class C{  public int hashCode(){  return (int)value;}  }
class C{  public static Vector<?> create(Vector<String> markerNames,String prefix,Properties properties){  return getInstance()._create(markerNames,prefix,properties,null,false);}  }
class C{  public OMRaster(){  super(RENDERTYPE_UNKNOWN,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);}  }
class C{  public static <T>ListWithDefault<T> withDefault(List<T> self,@ClosureParams(value=SimpleType.class,options="int") Closure<T> init){  return withLazyDefault(self,init);}  }
class C{  protected String selectedDecoderType(){  if (!isDecoderSelected()) {    return null;  } else {    return ((DecoderTreeNode)dTree.getLastSelectedPathComponent()).getTitle();  }}  }
class C{  public UnitsFormat(){  this(UnitsFormat.KILOMETERS,UnitsFormat.SQUARE_KILOMETERS,false);}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    in.close();  }}  }
class C{  public void testAtomicOffheap() throws Exception {  testAtomic0(cachesAtomicOffheap);}  }
class C{  protected void removeTag(short tagId,int ifdId){  IfdData ifdData=mIfdDatas[ifdId];  if (ifdData == null) {    return;  }  ifdData.removeTag(tagId);}  }
class C{  public UWidget widget(){  UWidget uw=new UWidget();  uw.bb(this);  return uw;}  }
class C{  void resetMasterPassword(String password,boolean encrypt){  myKey.get().set(EncryptionUtil.genPasswordKey(password));  myDatabase.clear();  try {    storePassword(null,MasterKeyPasswordSafe.class,testKey(password),TEST_PASSWORD_VALUE);    if (encrypt) {      myDatabase.setPasswordInfo(encryptPassword(password));    } else {      myDatabase.setPasswordInfo(ArrayUtil.EMPTY_BYTE_ARRAY);    }  } catch (  PasswordSafeException e) {    throw new IllegalStateException("There should be no problem with password at this point",e);  }}  }
