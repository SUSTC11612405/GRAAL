class C{  public static SM_SYSTEM_MESSAGE STR_MSG_QUEST_LIMIT_START_DAILY(String value0){  return new SM_SYSTEM_MESSAGE(1400855,value0);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  static String base64encode(byte[] bytes){  StringBuilder builder=new StringBuilder(((bytes.length + 2) / 3) * 4);  for (int i=0; i < bytes.length; i+=3) {    byte b0=bytes[i];    byte b1=i < bytes.length - 1 ? bytes[i + 1] : 0;    byte b2=i < bytes.length - 2 ? bytes[i + 2] : 0;    builder.append(BASE64_CHARS[(b0 & 0xFF) >> 2]);    builder.append(BASE64_CHARS[((b0 & 0x03) << 4) | ((b1 & 0xF0) >> 4)]);    builder.append(i < bytes.length - 1 ? BASE64_CHARS[((b1 & 0x0F) << 2) | ((b2 & 0xC0) >> 6)] : "=");    builder.append(i < bytes.length - 2 ? BASE64_CHARS[b2 & 0x3F] : "=");  }  return builder.toString();}  }
class C{  public static boolean isReachable(String processDefinitionId,String sourceElementId,String targetElementId){  Process process=ProcessDefinitionUtil.getProcess(processDefinitionId);  FlowElement sourceFlowElement=process.getFlowElement(sourceElementId,true);  FlowNode sourceElement=null;  if (sourceFlowElement instanceof FlowNode) {    sourceElement=(FlowNode)sourceFlowElement;  } else   if (sourceFlowElement instanceof SequenceFlow) {    sourceElement=(FlowNode)((SequenceFlow)sourceFlowElement).getTargetFlowElement();  }  FlowElement targetFlowElement=process.getFlowElement(targetElementId,true);  FlowNode targetElement=null;  if (targetFlowElement instanceof FlowNode) {    targetElement=(FlowNode)targetFlowElement;  } else   if (targetFlowElement instanceof SequenceFlow) {    targetElement=(FlowNode)((SequenceFlow)targetFlowElement).getTargetFlowElement();  }  if (sourceElement == null) {    throw new ActivitiException("Invalid sourceElementId '" + sourceElementId + "': no element found for this id n process definition '"+ processDefinitionId+ "'");  }  if (targetElement == null) {    throw new ActivitiException("Invalid targetElementId '" + targetElementId + "': no element found for this id n process definition '"+ processDefinitionId+ "'");  }  Set<String> visitedElements=new HashSet<String>();  return isReachable(process,sourceElement,targetElement,visitedElements);}  }
class C{  @Override public String toString(){  String string="";  if (leftTarget != null) {    string+=" " + leftTarget.getName();  }  if (rightTarget != null) {    string+=" " + rightTarget.getName();  }  return string;}  }
class C{  public OpenFileHyperlink(@NotNull String filePath,int lineNumber){  this(filePath,"Open File",lineNumber,-1);}  }
class C{  private void broadcastNewFile(Uri nativeUri){  Intent intent=new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,nativeUri);  context.sendBroadcast(intent);}  }
class C{  public CountingInputStream(InputStream in){  super(in);}  }
class C{  public ComplexFormat(NumberFormat realFormat,NumberFormat imaginaryFormat) throws NullArgumentException {  MathUtils.checkNotNull(imaginaryFormat,LocalizedCoreFormats.IMAGINARY_FORMAT);  MathUtils.checkNotNull(realFormat,LocalizedCoreFormats.REAL_FORMAT);  this.imaginaryCharacter=DEFAULT_IMAGINARY_CHARACTER;  this.imaginaryFormat=imaginaryFormat;  this.realFormat=realFormat;}  }
class C{  public DragControl(String action){  this.repaint=false;  this.action=action;}  }
class C{  public void clearNeighbors(){  nodeNeighbors.clear();}  }
class C{  static boolean turnHuman(){  int x, y;  do {    System.out.print("Your turn X Y (1.." + field_size + ")\n>");    x=sc.nextInt();    y=sc.nextInt();    if (x < 0 || y < 0) {      return false;    }  } while (!isCellBusy(x - 1,y - 1,dotEmpty));  field[x - 1][y - 1]=dotHuman;  return true;}  }
class C{  boolean checkAnchorChanged(){  return mAnchorView == null && mAnchorId != View.NO_ID;}  }
class C{  public TransformPanel(JComponent header){  this(new Vector2(),0.0,true,header);}  }
class C{  private V doPut(K kkey,V value,boolean onlyIfAbsent){  Comparable<? super K> key=comparable(kkey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n != null) {        Node<K,V> f=n.next;        if (n != b.next)         break;        Object v=n.value;        if (v == null) {          n.helpDelete(b,f);          break;        }        if (v == n || b.value == null)         break;        int c=key.compareTo(n.key);        if (c > 0) {          b=n;          n=f;          continue;        }        if (c == 0) {          if (onlyIfAbsent || n.casValue(v,value))           return (V)v; else           break;        }      }      Node<K,V> z=new Node<K,V>(kkey,value,n);      if (!b.casNext(n,z))       break;      int level=randomLevel();      if (level > 0)       insertIndex(z,level);      return null;    }  }}  }
class C{  private ChannelSelection createChannelSelectionError(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){  ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());  FilterFactory ff=CommonFactoryFinder.getFilterFactory();  Map<String,Expression> options=contrastEnhancement.getOptions();  options.put("algorithm",ff.literal("TestStretchToMinimumMaximum"));  options.put("minValue",ff.literal("1.0"));  options.put("maxValue",ff.literal("5.0"));  SelectedChannelType channelType=styleFactory.createSelectedChannelType("channel name",contrastEnhancement);  SelectedChannelType[] channels=new SelectedChannelType[3];  channels[0]=channelType;  channels[1]=channelType;  channels[2]=channelType;  ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);  return channelSelection;}  }
class C{  private void attachTransaction(QuerySession session,Query query) throws TransactionException, RemoteException, LeaseDeniedException {  if ((!session.isAutoCommit() && session.getTransaction() == null) || query.isForceUnderTransaction())   session.setTransaction(createTransaction());  session.setQueryHandler(this);}  }
class C{  @Override public void onUpdate(EntityPlayer player){  EnumDifficulty enumdifficulty=player.worldObj.getDifficulty();  setPrevFoodLevel(getFoodLevel());  if (enumdifficulty != EnumDifficulty.PEACEFUL) {    updateExhaustionWithTime(player);    while (this.getFoodLevel() > 0 && getExhaustion() >= 1.33F && !this.shouldBurnFat()) {      setExhaustion(getExhaustion() - 1);      setFoodLevel(Math.max(this.getFoodLevel() - 1,0));    }    while (getExhaustion() >= 0.5F && this.shouldBurnFat()) {      setExhaustion(getExhaustion() - 0.5F);      setSaturation(Math.max(this.getSaturationLevel() - 0.125F,0.0F));    }  } else   setExhaustion(0.0F);  if (player.worldObj.getGameRules().getBoolean("naturalRegeneration") && this.getFoodLevel() >= 24 && player.shouldHeal()) {    setFoodTimer(getFoodTimer() + 1);    if (this.getFoodTimer() >= 600) {      player.heal(1.0F);      setFoodTimer(0);    }  } else   if (this.getFoodLevel() <= 0 && this.getSaturationLevel() <= 0.01F) {    setFoodTimer(getFoodTimer() + 1);    if (this.getFoodTimer() >= 80) {      if (enumdifficulty != EnumDifficulty.PEACEFUL) {        player.attackEntityFrom(DamageSource.starve,1.0F);      }      setFoodTimer(0);    }  } else {    setFoodTimer(0);  }}  }
class C{  public UnitValidationException(Unit concerned,Body body,String strMessage){  super(concerned,strMessage,formatMsg(strMessage,concerned,body),false);}  }
class C{  public Builder errorMessageTextColor(int errorMessageTextColor){  this.errorMessageTextColor=errorMessageTextColor;  return this;}  }
class C{  public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(getQueryName()).append("\t");  buffer.append(getFlag()).append("\t");  buffer.append(getRefName()).append("\t");  buffer.append(getPos()).append("\t");  buffer.append(getMapQuality()).append("\t");  buffer.append(getCigarString()).append("\t");  buffer.append(getRNext()).append("\t");  buffer.append(getPNext()).append("\t");  buffer.append(getTLength()).append("\t");  buffer.append(getSequence()).append("\t");  buffer.append(getQuality());  for (  String a : getOptionalFields().keySet()) {    Object value=getOptionalFields().get(a);    buffer.append("\t").append(a).append(":").append(getType(value)).append(":").append(value);  }  return buffer.toString();}  }
class C{  public DistributionWordDocument(int iNeighbourhoodWindow,int iSourceNGramSize){  super(iNeighbourhoodWindow,iSourceNGramSize);}  }
class C{  public LocalVarEntry(Label startLabel,Label endLabel,String name,String sig,int slot){  start=startLabel;  end=endLabel;  this.name=new AsciiCP(name);  this.sig=new AsciiCP(sig);  this.slot=slot;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bleed_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200776,skilltarget);}  }
class C{  static void deregister(IDimensionSlice idc,IDCController constraint){  IDCController controller=idc.getController();  if (!(controller instanceof MechanicsController)) {    Core.logWarning("Tried to deregister constraint for IDC that isn't a MechanicsController! IDC: " + idc + "; controller: "+ controller+ "; constraint: ",constraint);    return;  }  MechanicsController sys=(MechanicsController)controller;  sys.removeConstraint(constraint);  if (changeCount(idc,-1) <= 0) {    dropIDC(idc);  }}  }
class C{  private int F(int x){  int a, b, c, d;  d=x & 0xFF;  x>>=8;  c=x & 0xFF;  x>>=8;  b=x & 0xFF;  x>>=8;  a=x & 0xFF;  int y=sBoxes[0][a] + sBoxes[1][b];  y^=sBoxes[2][c];  y+=sBoxes[3][d];  return y;}  }
class C{  public final void skip(final int num){  seek(getPosition() + num);}  }
class C{  private static boolean isUnreservedCharacter(char p_char){  return (p_char <= '~' && (fgLookupTable[p_char] & MASK_UNRESERVED_MASK) != 0);}  }
class C{  public void hideOverlappingView(int targetViewId){  View targetView=mOverlappingViewsMap.get(targetViewId);  if (targetView != null) {    targetView.clearAnimation();    targetView.setVisibility(GONE);  }}  }
class C{  public boolean isDrawCenterTextEnabled(){  return mDrawCenterText;}  }
class C{  public LookupDiscoveryManager(String[] groups,LookupLocator[] locators,DiscoveryListener listener) throws IOException {  try {    beginDiscovery(groups,locators,listener,EmptyConfiguration.INSTANCE);  } catch (  ConfigurationException e) {  }  dynamicLocatorDisc=null;}  }
class C{  public static double rint(double x){  double y=floor(x);  double d=x - y;  if (d > 0.5) {    if (y == -1.0) {      return -0.0;    }    return y + 1.0;  }  if (d < 0.5) {    return y;  }  long z=(long)y;  return (z & 1) == 0 ? y : y + 1.0;}  }
class C{  public RequestHandle post(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return post(null,url,params,responseHandler);}  }
class C{  public int run() throws PulsarClientException, IOException {  if (mainOptions.size() != 1)   throw (new ParameterException("Please provide one and only one topic name."));  if (this.serviceURL == null || this.serviceURL.isEmpty())   throw (new ParameterException("Broker URL is not provided."));  if (this.subscriptionName == null || this.subscriptionName.isEmpty())   throw (new ParameterException("Subscription name is not provided."));  if (this.numMessagesToConsume < 0)   throw (new ParameterException("Number of messages should be zero or positive."));  String topic=this.mainOptions.get(0);  int numMessagesConsumed=0;  int returnCode=0;  try {    ConsumerConfiguration consumerConf=new ConsumerConfiguration();    consumerConf.setSubscriptionType(this.subscriptionType);    PulsarClient client=PulsarClient.create(this.serviceURL,this.clientConfig);    Consumer consumer=client.subscribe(topic,this.subscriptionName,consumerConf);    RateLimiter limiter=(this.consumeRate > 0) ? RateLimiter.create(this.consumeRate) : null;    while (this.numMessagesToConsume == 0 || numMessagesConsumed < this.numMessagesToConsume) {      if (limiter != null) {        limiter.acquire();      }      Message msg=consumer.receive(5,TimeUnit.SECONDS);      if (msg == null) {        LOG.warn("No message to consume after waiting for 20 seconds.");      } else {        numMessagesConsumed+=1;        System.out.println(MESSAGE_BOUNDARY);        String output=this.interpretMessage(msg,displayHex);        System.out.println(output);        consumer.acknowledge(msg);      }    }    client.close();  } catch (  Exception e) {    LOG.error("Error while consuming messages");    LOG.error(e.getMessage(),e);    returnCode=-1;  } finally {    LOG.info("{} messages successfully consumed",numMessagesConsumed);  }  return returnCode;}  }
class C{  @deprecated protected int write(int b){  int newLength=this.bytesLength + 1;  ensureCapacity(newLength);  this.bytesLength=newLength;  this.bytes[(this.bytes.length - this.bytesLength)]=((byte)b);  return this.bytesLength;}  }
class C{  public Bundler putBoolean(String key,boolean value){  bundle.putBoolean(key,value);  return this;}  }
class C{  public String upload_file1(String group_name,String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  String parts[]=this.upload_file(group_name,local_filename,file_ext_name,meta_list);  if (parts != null) {    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];  } else {    return null;  }}  }
class C{  public NewsfeedUnignoreItemQuery unignoreItem(UserActor actor,NewsfeedItemType type,int ownerId,int itemId){  return new NewsfeedUnignoreItemQuery(getClient(),actor,type,ownerId,itemId);}  }
class C{  public WakeupManager(ThreadDesc desc,Configuration config) throws ConfigurationException {  if (desc == null)   throw new NullPointerException("desc must be non-null");  kickerDesc=desc;  queueThreadTimeout=Config.getLongEntry(config,COMPONENT_NAME,"queueThreadTimeout",DEFAULT_QUEUE_THREAD_TIMEOUT,0,Long.MAX_VALUE);}  }
class C{  public PhotosGetQueryWithExtended offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public AemImage clear(){  waitForToolbarEnabled();  clearButton.click();  bobcatWait.withTimeout(Timeouts.MEDIUM).until(ExpectedConditions.visibilityOfElementLocated(By.xpath(DROP_AN_IMAGE_XPATH)));  return this;}  }
class C{  public static void broadcastPacket(Player player,AionServerPacket packet,boolean toSelf){  if (toSelf) {    sendPacket(player,packet);  }  broadcastPacket(player,packet);}  }
class C{  public static float density(Context context){  return displayMetrics(context).density;}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  JimpleBody(SootMethod m){  super(m);}  }
class C{  public static Rule createSubPropertyRule(String ruleId,RelationType parent,RelationType child,Map<String,String> roleMappings,MindmapsGraph graph){  final int parentArity=parent.hasRoles().size();  final int childArity=child.hasRoles().size();  if (parentArity != childArity || parentArity != roleMappings.size())   throw new IllegalArgumentException(ErrorMessage.RULE_CREATION_ARITY_ERROR.getMessage());  Var parentVar=Graql.var().isa(parent.getId());  Var childVar=Graql.var().isa(child.getId());  Set<String> vars=new HashSet<>();  roleMappings.forEach(null);  String body=childVar.toString() + ";";  String head=parentVar.toString() + ";";  return graph.putRule(ruleId,body,head,graph.getMetaRuleInference());}  }
class C{  public boolean isApplyGlobalWorldGroups(){  return this.applyGlobalWorldGroups;}  }
class C{  public void dump(){  StringBuilder sb=new StringBuilder("DUMP : m_ClassName ");  sb.append("ClassName: ").append(m_ClassName);  sb.append("\nCodeBase: ").append(m_CodeBase);  sb.append("\nm_FieldsNames: ").append(arrayToString("m_FieldsNames",m_FieldsNames));  sb.append("\nm_SuperClasses: ").append(arrayToString("m_SuperClasses",m_SuperClasses));  sb.append("\nm_FieldsTypes: ").append(arrayToString("m_FieldsTypes",m_FieldsTypes));  sb.append("\nm_IsFifo: ").append(m_IsFifo);  sb.append("\nm_IsReplicatable: ").append(m_IsReplicatable);  sb.append("\nm_IndexedFields: ").append(booleanToString("m_IndexedFields",m_IndexedFields));  System.out.println(sb);}  }
class C{  public AccountSetSilenceModeQuery(VkApiClient client,UserActor actor){  super(client,"account.setSilenceMode",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  protected OpenMapEntry(Iterator iter){  this.iter=iter;}  }
class C{  public void addNewStyledLayer(NamedLayer namedLayer){  if (this.sld == null) {    ConsoleManager.getInstance().error(this,"sld == null");  } else {    this.sld.addStyledLayer(namedLayer);  }}  }
class C{  public NGramGaussNormSymWinDocument(int iMinGraphSize,int iMaxGraphSize,int iGraphCorrelationWindow,int iMinHistogramSize,int iMaxHistogramSize){  Graph=new DocumentNGramGaussNormSymWinGraph(iMinGraphSize,iMaxGraphSize,iGraphCorrelationWindow);  Histogram=new DocumentNGramHistogram(iMinHistogramSize,iMaxHistogramSize);}  }
class C{  private void invalidByte(int position,int count,int c) throws MalformedByteSequenceException {  throw new MalformedByteSequenceException(fFormatter,fLocale,XMLMessageFormatter.XML_DOMAIN,"InvalidByte",new Object[]{Integer.toString(position),Integer.toString(count)});}  }
class C{  private void updateFields(){  updateClipboardDescription();  updateClipPreview();  updateEditField();}  }
class C{  protected AdsGetClientsQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getEcologicalIndex().equalsIgnoreCase(UniFrac.TOPOLOGICAL_UNIFRAC);}  }
class C{  public void drawChart(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  int y0=getHeight() - bottomMargin;  int y1=topMargin;  int x0=leftMargin;  int x1=getWidth() - rightMargin;  if (x0 >= x1)   return;  int numberOfSeries=getChartData().getNumberOfSeries();  int numberOfClasses=getChartData().getNumberOfClasses();  double xStep=(x1 - x0) / numberOfSeries;  double yStep=(y0 - y1) / (0.5 + numberOfClasses);  double maxValue=getChartData().getRange().get2().doubleValue();  if (scalingType == ChartViewer.ScalingType.LOG && maxValue > 0)   maxValue=Math.log(maxValue); else   if (scalingType == ChartViewer.ScalingType.SQRT && maxValue > 0)   maxValue=Math.sqrt(maxValue); else   if (scalingType == ChartViewer.ScalingType.PERCENT)   maxValue=100;  double factor=(maxValue > 0 ? getMaxRadius() / maxValue : 1);  int d=0;  for (  String series : getChartData().getSeriesNames()) {    if (isShowXAxis()) {      double xLabel=x0 + (d + 0.5) * xStep;      Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);      String label=seriesLabelGetter.getLabel(series);      Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      if (classLabelAngle == 0) {        apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());      } else       if (classLabelAngle > Math.PI / 2) {        apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);      }      if (getChartData().getChartSelection().isSelected(series,null)) {        gc.setColor(ProgramProperties.SELECTION_COLOR);        fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);      }      gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));      if (sgc != null)       sgc.setCurrentItem(new String[]{series,null});      drawString(gc,label,apt.getX(),apt.getY(),classLabelAngle);      if (sgc != null)       sgc.clearCurrentItem();    }    int c=0;    for (    String className : getChartData().getClassNames()) {      double value;      if (scalingType == ChartViewer.ScalingType.PERCENT) {        double total=getChartData().getTotalForSeriesIncludingDisabledAttributes(series);        if (total == 0)         value=0; else         value=100 * getChartData().getValueAsDouble(series,className) / total;      } else       if (scalingType == ChartViewer.ScalingType.LOG) {        value=getChartData().getValueAsDouble(series,className);        if (value > 1)         value=Math.log(value);      } else       if (scalingType == ChartViewer.ScalingType.SQRT) {        value=getChartData().getValueAsDouble(series,className);        if (value > 0)         value=Math.sqrt(value);      } else       value=getChartData().getValueAsDouble(series,className);      value*=factor;      int[] oval=new int[]{(int)((x0 + (d + 0.5) * xStep) - value),(int)((y0 - (c + 1) * yStep) - value),(int)(2 * value),(int)(2 * value)};      Color color=getChartColors().getClassColor(class2HigherClassMapper.get(className),150);      gc.setColor(color);      if (sgc != null)       sgc.setCurrentItem(new String[]{series,className});      gc.fillOval(oval[0],oval[1],oval[2],oval[3]);      if (sgc != null)       sgc.clearCurrentItem();      boolean isSelected=getChartData().getChartSelection().isSelected(series,className);      if (isSelected) {        gc.setColor(ProgramProperties.SELECTION_COLOR);        if (oval[2] <= 1) {          oval[0]-=1;          oval[1]-=1;          oval[2]+=2;          oval[3]+=2;        }        gc.setStroke(HEAVY_STROKE);        gc.drawOval(oval[0],oval[1],oval[2],oval[3]);        gc.setStroke(NORMAL_STROKE);      } else {        gc.setColor(color.darker());        gc.drawOval(oval[0],oval[1],oval[2],oval[3]);      }      c++;      if (showValues || isSelected) {        String label="" + (int)getChartData().getValueAsDouble(series,className);        valuesList.add(new DrawableValue(label,oval[0] + oval[2] + 2,oval[1] + oval[3] / 2,isSelected));      }    }    d++;  }  if (valuesList.size() > 0) {    gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));    DrawableValue.drawValues(gc,valuesList,false,true);    valuesList.clear();  }}  }
class C{  private Challenge prepareDnsChallenge(Authorization authorization){  final Dns01Challenge dns01Challenge=authorization.findChallenge(Dns01Challenge.TYPE);  if (dns01Challenge == null) {    log.error("Received no challenge from authorization for {}",authorization.getDomain());    throw new LetsencryptException("Received no challenge");  }  final String challengeRecord="_acme-challenge." + authorization.getDomain();  final String rootZone=dnsResponder.addChallengeRecord(challengeRecord,dns01Challenge.getDigest());  final DnsRecordObserver observer=new DnsRecordObserver(challengeRecord,rootZone,dns01Challenge.getDigest());  observer.observeDns();  return dns01Challenge;}  }
class C{  public ThreadHandler(Object processingObject,Method processingMethod){  super();  this.methodToCall=processingMethod;  this.objectToCall=processingObject;  this.handlerEnabled=true;  incomingQueue=new LinkedBlockingQueue<Object[]>();  copyList=new LinkedList<Object[]>();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  Constraint.verify(classes);}  }
class C{  public Quaternion normalize(){  final double norm=getNorm();  if (norm < Precision.SAFE_MIN) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NORM,norm);  }  return new Quaternion(q0 / norm,q1 / norm,q2 / norm,q3 / norm);}  }
class C{  private boolean isProxyShared(Properties settings){  return Boolean.TRUE.toString().equals(settings.getProperty("network.proxy.share_proxy_settings","false").toLowerCase());}  }
class C{  public static EventBuilder on(String event){  return new EventBuilder(event,instance);}  }
class C{  @Override public ProcessingInstruction createProcessingInstruction(String target,String data) throws DOMException {  if (errorChecking && !isXMLName(target,xml11Version)) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_CHARACTER_ERR",null);    throw new DOMException(DOMException.INVALID_CHARACTER_ERR,msg);  }  return new ProcessingInstructionImpl(this,target,data);}  }
class C{  private void resetNextDiscSpaceCheck(){  nextCheckFallbackData=0;}  }
class C{  public static byte[] extractBinaryHttpEntityBody(HttpContent httpContent){  return BrowserMobHttpUtil.extractReadableBytes(httpContent.content());}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  @Override public Dfp rint(){  return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);}  }
class C{  public Shadows(Entity entity,double x,double y,double z,float yaw,float partialTicks){  this.entity=entity;  this.x=x;  this.y=y;  this.z=z;  this.yaw=yaw;  this.partialTicks=partialTicks;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public void onContentLoadFinished(){}  }
class C{  public static String serializeToString(Document doc){  ByteArrayOutputStream baos=new ByteArrayOutputStream();  try {    MaryNormalisedWriter mnw=new MaryNormalisedWriter();    mnw.output(doc,baos);  } catch (  Exception e1) {    return "";  }  return baos.toString();}  }
class C{  public static String slurpURL(URL u) throws IOException {  String lineSeparator=System.getProperty("line.separator");  URLConnection uc=u.openConnection();  InputStream is=uc.getInputStream();  BufferedReader br=new BufferedReader(new InputStreamReader(is));  String temp;  StringBuilder buff=new StringBuilder(16000);  while ((temp=br.readLine()) != null) {    buff.append(temp);    buff.append(lineSeparator);  }  br.close();  return buff.toString();}  }
class C{  public static long copyLarge(Reader input,Writer output,final long inputOffset,final long length,char[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  int bytesToRead=buffer.length;  if (length > 0 && length < buffer.length) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,buffer.length);    }  }  return totalRead;}  }
class C{  public DiphoneUnitDatabase(URL url,boolean isBinary) throws IOException {  if (!useIndexing || useCache) {    diphoneMap=new LinkedHashMap();  }  InputStream is=Utilities.getInputStream(url);  indexName=getIndexName(url.toString());  if (isBinary) {    loadBinary(is);  } else {    loadText(is);  }  is.close();  sampleInfo=new SampleInfo(sampleRate,numChannels,residualFold,lpcMin,lpcRange,0.0f);}  }
class C{  public void configureUI(){  if (myDesignSurface == null) {    return;  }  computeScale(myDesignSurface.getCurrentScreenView(),myDesignSurface.getSize(),myDesignSurface.getContentSize(null));  computeOffsets(myDesignSurface.getCurrentScreenView());}  }
class C{  private ByteBuffer read(FileChannel channel,int size){  ByteBuffer byteBffer=ByteBuffer.allocate(size);  try {    channel.read(byteBffer);  } catch (  Exception e) {    LOGGER.error(e,e.getMessage());  }  byteBffer.rewind();  return byteBffer;}  }
class C{  @Override public double cost(Target t1,Unit u1,Target t2,Unit u2){  if (u1.duration == 0 || u2.duration == 0)   return Double.POSITIVE_INFINITY;  if (u1 instanceof DiphoneUnit) {    u1=((DiphoneUnit)u1).right;  }  if (u2 instanceof DiphoneUnit) {    u2=((DiphoneUnit)u2).left;  }  if (u1.index + 1 == u2.index)   return 0;  double cost=1;  float[] v1=jcf.getRightJCF(u1.index);  float[] v2=jcf.getLeftJCF(u2.index);  double[] diff=new double[v1.length];  for (int i=0; i < v1.length; i++) {    diff[i]=(double)v1[i] - v2[i];  }  assert featureDef != null : "Feature Definition was not set";  FeatureVector fv1=null;  if (t1 instanceof DiphoneTarget) {    HalfPhoneTarget hpt1=((DiphoneTarget)t1).right;    assert hpt1 != null;    fv1=hpt1.getFeatureVector();  } else {    fv1=t1.getFeatureVector();  }  assert fv1 != null : "Target has no feature vector";  int state=0;  double[] mean;  double[] variance;  Node node=joinTree[state].interpretToNode(fv1,1);  assert node instanceof PdfLeafNode : "The node must be a PdfLeafNode.";  mean=((PdfLeafNode)node).getMean();  variance=((PdfLeafNode)node).getVariance();  double distance=DistanceComputer.getNormalizedEuclideanDistance(diff,mean,variance);  cost+=distance;  return cost;}  }
class C{  public Object clone(){  try {    EntryRep entry=(EntryRep)super.clone();    entry.fields=entry.fields.clone();    return entry;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public static List<Integer> createColors(Resources r,int[] colors){  List<Integer> result=new ArrayList<>();  for (  int i : colors) {    result.add(r.getColor(i));  }  return result;}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  public void addPanel(@NotNull JComponent panel){  addLineComponent(panel,myRow++);}  }
class C{  private void mark(){  theLastColumn=theCurrentColumn;  theLastLine=theCurrentLine;}  }
class C{  public boolean isHighQuality(){  return m_highQuality;}  }
class C{  private void refreshStatus(IResource[] resources){  Set<IContainer> foldersToRefresh=new HashSet<IContainer>(resources.length);  for (  IResource resource : resources) {    if (resources.length == 1 && resources[0].getType() == IResource.FILE) {      try {        SVNProviderPlugin.getPlugin().getStatusCacheManager().refreshStatus(resource,false);      } catch (      SVNException e) {        SVNProviderPlugin.log(IStatus.ERROR,e.getMessage(),e);      }    } else {      if (resource.getType() == IResource.FILE) {        foldersToRefresh.add(resource.getParent());      } else {        foldersToRefresh.add((IContainer)resource);      }    }  }  refreshStatusInfinite(foldersToRefresh);}  }
class C{  protected void validateConfig(Equipment equipment){  EquipmentCacheObject equipmentCacheObject=(EquipmentCacheObject)equipment;  super.validateConfig(equipmentCacheObject);  if (equipmentCacheObject.getHandlerClassName() == null) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"handlerClassName\" cannot be null");  }  if (equipmentCacheObject.getProcessId() == null) {    throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"Parameter \"processId\" cannot be null. An equipment MUST be attached to a process.");  }}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public String importXiff(String xliffContent,Long repositoryId,boolean isTranslationKit,ImportDropConfig.Status importStatus){  String importXliffPath=UriComponentsBuilder.fromPath(getBasePathForEntity()).pathSegment("importXliff").toUriString();  ImportXliffBody importXliffBody=new ImportXliffBody();  importXliffBody.setRepositoryId(Preconditions.checkNotNull(repositoryId));  importXliffBody.setTranslationKit(isTranslationKit);  importXliffBody.setImportStatus(importStatus);  importXliffBody.setXliffContent(xliffContent);  return authenticatedRestTemplate.postForObject(importXliffPath,importXliffBody,ImportXliffBody.class).getXliffContent();}  }
class C{  public static BigInteger publicKeyFromPrivate(BigInteger privKey){  ECPoint point=publicPointFromPrivate(privKey);  byte[] encoded=point.getEncoded(false);  return new BigInteger(1,Arrays.copyOfRange(encoded,1,encoded.length));}  }
class C{  private void notifyStart(){  if (eventHandler instanceof LifecycleAware) {    try {      ((LifecycleAware)eventHandler).onStart();    } catch (    final Throwable ex) {      exceptionHandler.handleOnStartException(ex);    }  }}  }
class C{  public void addMethod(SootMethod m){  checkLevel(SIGNATURES);  if (m.isDeclared())   throw new RuntimeException("already declared: " + m.getName());  if (subSigToMethods.get(m.getNumberedSubSignature()) != null) {    throw new RuntimeException("Attempting to add method " + m.getSubSignature() + " to class "+ this+ ", but the class already has a method with that signature.");  }  subSigToMethods.put(m.getNumberedSubSignature(),m);  methodList.add(m);  m.setDeclared(true);  m.setDeclaringClass(this);}  }
class C{  public XInclude11TextReader(XMLInputSource source,XIncludeHandler handler,int bufferSize) throws IOException {  super(source,handler,bufferSize);}  }
class C{  public XIncludeAwareParserConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){  super(symbolTable,grammarPool,parentSettings);  final String[] recognizedFeatures={ALLOW_UE_AND_NOTATION_EVENTS,XINCLUDE_FIXUP_BASE_URIS,XINCLUDE_FIXUP_LANGUAGE};  addRecognizedFeatures(recognizedFeatures);  final String[] recognizedProperties={XINCLUDE_HANDLER,NAMESPACE_CONTEXT};  addRecognizedProperties(recognizedProperties);  setFeature(ALLOW_UE_AND_NOTATION_EVENTS,true);  setFeature(XINCLUDE_FIXUP_BASE_URIS,true);  setFeature(XINCLUDE_FIXUP_LANGUAGE,true);  fNonXIncludeNSContext=new NamespaceSupport();  fCurrentNSContext=fNonXIncludeNSContext;  setProperty(NAMESPACE_CONTEXT,fNonXIncludeNSContext);}  }
class C{  protected final void fallAsleep(boolean skippedReapingInQuiesceMode){synchronized (this) {    try {      if (!_shouldDie) {        _nextExpirationTimeInterval=skippedReapingInQuiesceMode ? (_nextExpirationTimeInterval + (_expirationTimeInterval / 10)) : (_nextExpirationTimeInterval + _expirationTimeInterval);        long fixedRateDelay=_nextExpirationTimeInterval - SystemTime.timeMillis();        if (fixedRateDelay <= 0) {          if (_logger.isLoggable(Level.FINEST))           _logger.finest("Skipped fallAsleep since fixedRateDelay=" + fixedRateDelay);          _nextExpirationTimeInterval=SystemTime.timeMillis();          return;        }        if (_logger.isLoggable(Level.FINEST))         _logger.finest("fallAsleep - going to wait fixedRateDelay=" + fixedRateDelay);        wait(fixedRateDelay);        if (_force) {          if (_logger.isLoggable(Level.FINEST))           _logger.finest("lease reaper was forcibly waken up");          _nextExpirationTimeInterval=SystemTime.timeMillis();        }      }    } catch (    InterruptedException ie) {      if (_logger.isLoggable(Level.FINEST)) {        _logger.log(Level.FINEST,this.getName() + " interrupted.",ie);      }      _shouldDie=true;      signalEndCycle();      interrupt();    }  }}  }
class C{  BinarySearchTreeNode<E> balance(BinarySearchTreeNode<E> node){  if (node == null)   return null;  if (this.getHeight(node) < 2)   return node;  BinarySearchTreeNode<E> p=node.parent;  BinarySearchTreeNode<E> a=node.left;  BinarySearchTreeNode<E> b=node.right;  int ah=this.getHeight(a);  int bh=this.getHeight(b);  int balance=ah - bh;  if (balance > 1) {    int ach=this.getHeight(a.right);    if (ach > 1) {      BinarySearchTreeNode<E> c=a.right;      a.right=c.left;      if (c.left != null)       c.left.parent=a;      c.left=a;      a.parent=c;      node.left=c;      c.parent=node;    }    BinarySearchTreeNode<E> c=node.left;    node.left=c.right;    if (c.right != null)     c.right.parent=node;    c.right=node;    c.parent=node.parent;    node.parent=c;    if (p != null) {      if (p.left == node) {        p.left=c;      } else {        p.right=c;      }    } else {      this.root=c;    }    return c;  }  if (balance < -1) {    int bch=this.getHeight(b.left);    if (bch > 1) {      BinarySearchTreeNode<E> d=b.left;      b.left=d.right;      if (d.right != null)       d.right.parent=b;      d.right=b;      b.parent=d;      node.right=d;      d.parent=node;    }    BinarySearchTreeNode<E> d=node.right;    node.right=d.left;    if (d.left != null)     d.left.parent=node;    d.left=node;    d.parent=node.parent;    node.parent=d;    if (p != null) {      if (p.left == node) {        p.left=d;      } else {        p.right=d;      }    } else {      this.root=d;    }    return d;  }  return node;}  }
class C{  public static void callMethod(MethodOperation operation,MethodContext methodContext,List<MethodObject<?>> parameters,Class<?> methodClass,Object methodObject,String methodName,FlexibleMapAccessor<Object> retFieldFma) throws MiniLangRuntimeException {  Object[] args=null;  Class<?>[] parameterTypes=null;  if (parameters != null) {    args=new Object[parameters.size()];    parameterTypes=new Class<?>[parameters.size()];    int i=0;    for (    MethodObject<?> methodObjectDef : parameters) {      args[i]=methodObjectDef.getObject(methodContext);      Class<?> typeClass=null;      try {        typeClass=methodObjectDef.getTypeClass(methodContext);      } catch (      ClassNotFoundException e) {        throw new MiniLangRuntimeException(e,operation);      }      parameterTypes[i]=typeClass;      i++;    }  }  try {    Method method=methodClass.getMethod(methodName,parameterTypes);    Object retValue=method.invoke(methodObject,args);    if (!retFieldFma.isEmpty()) {      retFieldFma.put(methodContext.getEnvMap(),retValue);    }  } catch (  Exception e) {    throw new MiniLangRuntimeException(e,operation);  }}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  @Override public void removeRelations(Task task,Iterable<ObjectId> projectIds,String fieldName){  try {    if (PropertyUtils.getProperty(task,fieldName) != null) {      Iterable<Project> projects=(Iterable<Project>)PropertyUtils.getProperty(task,fieldName);      Iterator<Project> iterator=projects.iterator();      while (iterator.hasNext()) {        for (        ObjectId projectIdToRemove : projectIds) {          if (iterator.next().getId().equals(projectIdToRemove)) {            iterator.remove();            break;          }        }      }      List<Project> newProjectList=new ArrayList<>();      for (      Project project : projects) {        newProjectList.add(project);      }      PropertyUtils.setProperty(task,fieldName,newProjectList);      taskRepository.save(task);    }  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  @VisibleForTesting String postRequest(long timestamp,String xml) throws RequestFailureException {  String response=null;  HttpURLConnection urlConnection=null;  try {    urlConnection=createConnection();    setUpPostRequest(timestamp,urlConnection,xml);    sendRequestToServer(urlConnection,xml);    response=readResponseFromServer(urlConnection);  }  finally {    if (urlConnection != null) {      urlConnection.disconnect();    }  }  return response;}  }
class C{  public Builder translationX(float translationX){  this.translationX=translationX;  return this;}  }
class C{  public void parametrize(double spark_run_time){  int solver_encoding=opts.geom_encoding();  if (solver_encoding == SparkOptions.geom_encoding_Geom)   nodeGenerator=new FullSensitiveNodeGenerator(); else   if (solver_encoding == SparkOptions.geom_encoding_HeapIns)   nodeGenerator=new HeapInsNodeGenerator(); else   if (solver_encoding == SparkOptions.geom_encoding_PtIns)   nodeGenerator=new PtInsNodeGenerator();  String encoding_name=nodeGenerator.getSignature();  if (encoding_name == null)   throw new RuntimeException("No encoding given for geometric points-to analysis.");  if (nodeGenerator == null)   throw new RuntimeException("The encoding " + encoding_name + " is unavailable for geometric points-to analysis.");switch (opts.geom_worklist()) {case SparkOptions.geom_worklist_FIFO:    worklist=new FIFO_Worklist();  break;case SparkOptions.geom_worklist_PQ:worklist=new PQ_Worklist();break;}dump_dir=opts.geom_dump_verbose();File dir=null;if (!dump_dir.isEmpty()) {dir=new File(dump_dir);if (!dir.exists()) dir.mkdirs();File log_file=new File(dump_dir,encoding_name + (opts.geom_blocking() == true ? "_blocked" : "_unblocked") + "_frac"+ opts.geom_frac_base()+ "_runs"+ opts.geom_runs()+ "_log.txt");try {ps=new PrintStream(log_file);G.v().out.println("[Geom] Analysis log can be found in: " + log_file.toString());} catch (FileNotFoundException e) {String msg="[Geom] The dump file: " + log_file.toString() + " cannot be created. Abort.";G.v().out.println(msg);throw new RuntimeException(msg,e);}} else ps=G.v().out;String method_verify_file=opts.geom_verify_name();if (method_verify_file != null) {try {FileReader fr=new FileReader(method_verify_file);java.util.Scanner fin=new java.util.Scanner(fr);validMethods=new HashMap<String,Boolean>();while (fin.hasNextLine()) {validMethods.put(fin.nextLine(),Boolean.FALSE);}fin.close();fr.close();G.v().out.println("[Geom] Read in verification file successfully.\n");} catch (FileNotFoundException e) {validMethods=null;}catch (IOException e) {}}Parameters.seedPts=opts.geom_app_only() ? Constants.seedPts_allUser : Constants.seedPts_all;double mem=Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();ps.println();ps.printf("[Spark] Time: %.3f s\n",(double)spark_run_time / 1000);ps.printf("[Spark] Memory: %.1f MB\n",mem / 1024 / 1024);typeManager=getTypeManager();Parameters.max_cons_budget=opts.geom_frac_base();Parameters.max_pts_budget=Parameters.max_cons_budget * 2;Parameters.cg_refine_times=opts.geom_runs();if (Parameters.cg_refine_times < 1) Parameters.cg_refine_times=1;prepareContainers();ps.println("[Geom]" + " Start working on <" + (dir == null ? "NoName" : dir.getName()) + "> with <"+ encoding_name+ "> encoding.");}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> propertyAny(String propertyName,ISpacePredicate... predicates){  return property(propertyName,any(predicates));}  }
class C{  private void loadJar(JarFileInfo jarFileInfo) throws IOException {  lstJarFile.add(jarFileInfo);  try {    Enumeration<JarEntry> en=jarFileInfo.jarFile.entries();    final String EXT_JAR=".jar";    while (en.hasMoreElements()) {      JarEntry je=en.nextElement();      if (je.isDirectory()) {        continue;      }      String s=je.getName().toLowerCase();      if (s.lastIndexOf(EXT_JAR) == s.length() - EXT_JAR.length()) {        JarEntryInfo inf=new JarEntryInfo(jarFileInfo,je);        File fileTemp=createTempFile(inf);        logInfo(LogArea.JAR,"Loading inner JAR %s from temp file %s",inf.jarEntry,getFilename4Log(fileTemp));        URL url=fileTemp.toURI().toURL();        ProtectionDomain pdParent=jarFileInfo.pd;        CodeSource csParent=pdParent.getCodeSource();        Certificate[] certParent=csParent.getCertificates();        CodeSource csChild=(certParent == null ? new CodeSource(url,csParent.getCodeSigners()) : new CodeSource(url,certParent));        ProtectionDomain pdChild=new ProtectionDomain(csChild,pdParent.getPermissions(),pdParent.getClassLoader(),pdParent.getPrincipals());        loadJar(new JarFileInfo(new JarFile(fileTemp),inf.getName(),jarFileInfo,pdChild,fileTemp));      }    }  } catch (  JarClassLoaderException e) {    throw new RuntimeException("ERROR on loading inner JAR: " + e.getMessageAll());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200861,skillcaster,num0,skillname);}  }
class C{  @Override public void processingInstruction(String target,String pidata) throws SAXException {  if (target.equals("oasis-xml-catalog")) {    URL catalog=null;    String data=pidata;    int pos=data.indexOf("catalog=");    if (pos >= 0) {      data=data.substring(pos + 8);      if (data.length() > 1) {        String quote=data.substring(0,1);        data=data.substring(1);        pos=data.indexOf(quote);        if (pos >= 0) {          data=data.substring(0,pos);          try {            if (baseURL != null) {              catalog=new URL(baseURL,data);            } else {              catalog=new URL(data);            }          } catch (          MalformedURLException mue) {          }        }      }    }    if (allowXMLCatalogPI) {      if (catalogManager.getAllowOasisXMLCatalogPI()) {        catalogManager.debug.message(4,"oasis-xml-catalog PI",pidata);        if (catalog != null) {          try {            catalogManager.debug.message(4,"oasis-xml-catalog",catalog.toString());            oasisXMLCatalogPI=true;            if (piCatalogResolver == null) {              piCatalogResolver=new CatalogResolver(true);            }            piCatalogResolver.getCatalog().parseCatalog(catalog.toString());          } catch (          Exception e) {            catalogManager.debug.message(3,"Exception parsing oasis-xml-catalog: " + catalog.toString());          }        } else {          catalogManager.debug.message(3,"PI oasis-xml-catalog unparseable: " + pidata);        }      } else {        catalogManager.debug.message(4,"PI oasis-xml-catalog ignored: " + pidata);      }    } else {      catalogManager.debug.message(3,"PI oasis-xml-catalog occurred in an invalid place: " + pidata);    }  } else {    super.processingInstruction(target,pidata);  }}  }
class C{  @NotNull public static String tableToString(@NotNull JTableFixture table,int startRow,int endRow,int startColumn,int endColumn,int cellWidth){  String[][] contents=table.contents();  StringBuilder sb=new StringBuilder();  String formatString="%-" + Integer.toString(cellWidth) + "s";  for (int row=Math.max(0,startRow); row < Math.min(endRow,contents.length); row++) {    for (int column=Math.max(0,startColumn); column < Math.min(contents[0].length,endColumn); column++) {      String cell=contents[row][column];      if (cell.length() > cellWidth) {        cell=cell.substring(0,cellWidth - 3) + "...";      }      sb.append(String.format(formatString,cell));    }    sb.append('\n');  }  return sb.toString();}  }
class C{  @Override public boolean markSupported(){  return fInputStream.markSupported();}  }
class C{  protected void handleIdenticalMatch(T oldObject,T newObject){}  }
class C{  public java.lang.Boolean isEscaped(){  return escaped;}  }
class C{  public boolean isEmpty(){  return oldSet.isEmpty() && newSet.isEmpty();}  }
class C{  public Matrix4f zero(){  m00=m01=m02=m03=0.0f;  m10=m11=m12=m13=0.0f;  m20=m21=m22=m23=0.0f;  m30=m31=m32=m33=0.0f;  return this;}  }
class C{  public boolean deleteFile(){  if (filterInfo == null)   return false;  String fileName=getRootDir() + getUrlPath(filterInfo.paramURL);  File f=new File(fileName);  return f.delete();}  }
class C{  @Override public int available(){  int available=currentlyInBuffer();  for (  Datagram d : datagrams) {    available+=d.getDuration();  }  return available;}  }
class C{  public List<JsonValue> values(){  return Collections.unmodifiableList(values);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public boolean isUncheckedException(){  if (isUncheckedException_computed) {    return isUncheckedException_value;  }  ASTNode$State state=state();  int num=state.boundariesCrossed;  boolean isFinal=this.is$Final();  isUncheckedException_value=isUncheckedException_compute();  if (isFinal && num == state().boundariesCrossed)   isUncheckedException_computed=true;  return isUncheckedException_value;}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  final ScalarReading that=(ScalarReading)o;  if (mTimestampMillis != that.mTimestampMillis) {    return false;  }  return Double.compare(that.mValue,mValue) == 0;}  }
class C{  public TObjectHash(TObjectHashingStrategy<T> strategy){  super();  this._hashingStrategy=strategy;}  }
class C{  private void writeItemStones(ByteBuffer buf){  Item item=ownerItem;  int count=0;  if (item.hasManaStones()) {    Set<ManaStone> itemStones=item.getItemStones();    ArrayList<ManaStone> basicStones=new ArrayList<ManaStone>();    ArrayList<ManaStone> ancientStones=new ArrayList<ManaStone>();    for (    ManaStone itemStone : itemStones) {      if (itemStone.isBasic()) {        basicStones.add(itemStone);      } else {        ancientStones.add(itemStone);      }    }    if (item.getItemTemplate().getSpecialSlots() > 0) {      if (ancientStones.size() > 0) {        for (        ManaStone ancientStone : ancientStones) {          if (count == 6) {            break;          }          writeD(buf,ancientStone.getItemId());          count++;        }      }      for (int i=count; i < item.getItemTemplate().getSpecialSlots(); i++) {        writeD(buf,0);        count++;      }    }    for (    ManaStone basicStone : basicStones) {      if (count == 6) {        break;      }      writeD(buf,basicStone.getItemId());      count++;    }    skip(buf,(6 - count) * 4);  } else {    skip(buf,24);  }}  }
class C{  public KatharsisInvokerException(final int statusCode,String msg,Throwable nested){  super(msg,nested);  this.statusCode=statusCode;}  }
class C{  public static SnippetObject root(Dynamic obj,KindredSnippets[] snippets){  return new SnippetObject(obj,null,snippets);}  }
class C{  private void isaac(){  isaacI=0;  isaacJ=H_SIZE;  isaacB+=++isaacC;  while (isaacI < H_SIZE) {    isaac2();  }  isaacJ=0;  while (isaacJ < H_SIZE) {    isaac2();  }}  }
class C{  @Override public BlockVector clone(){  return (BlockVector)super.clone();}  }
class C{  public static <T>List<T> toList(T obj1,T obj2,T obj3,T obj4,T obj5){  List<T> list=new LinkedList<T>();  list.add(obj1);  list.add(obj2);  list.add(obj3);  list.add(obj4);  list.add(obj5);  return list;}  }
class C{  public void animateXY(int durationMillisX,int durationMillisY,EasingFunction easingX,EasingFunction easingY){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setInterpolator(easingY);  animatorY.setDuration(durationMillisY);  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(easingX);  animatorX.setDuration(durationMillisX);  if (durationMillisX > durationMillisY) {    animatorX.addUpdateListener(mListener);  } else {    animatorY.addUpdateListener(mListener);  }  animatorX.start();  animatorY.start();}  }
class C{  public static Document load(String collection,Bson query){  try {    MongoCollection<Document> c=MongoHelper.getCollection(collection);    if (c != null) {      return c.find(query).first();    }  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(query,e);  }  return null;}  }
class C{  public double calculateCloneUsableCapacity(int vmfullclonesize,int vmdeltasize,int vmdisposabledisksize,int vmlogsize,int vmswapsize,int vmvideoswapsize,int vmcount,int storageoverhead,int blockdeduplicationratio,String clonetype){  Double d=(double)((vmfullclonesize + vmdeltasize + vmdisposabledisksize+ vmlogsize+ vmswapsize+ vmvideoswapsize) * vmcount) / 1048576;  d+=disposableusablecapacity;  d+=localswapsizetotal;  d*=(1.0 + (storageoverhead / 100.0));  if (clonetype.equalsIgnoreCase("full") || clonetype.equalsIgnoreCase("assigned")) {    d*=(1.0 - (blockdeduplicationratio / 100.0));  }  d=(double)Math.round(d * 100) / 100;  return d;}  }
class C{  public static ControlTagCacheObject createTestControlTag(){  ControlTagCacheObject cacheObject=new ControlTagCacheObject(new Long(1001),"Junit_test_tag","Float",DataTagConstants.MODE_TEST);  cacheObject.setId(new Long(1001));  cacheObject.setName("Junit_test_tag");  cacheObject.setDescription("test description");  cacheObject.setMode(DataTagConstants.MODE_TEST);  cacheObject.setDataType("Float");  cacheObject.setTopic("controltag-publication-topic");  cacheObject.setLogged(false);  cacheObject.setUnit("test unit m/sec");  cacheObject.setDipAddress("testDIPaddress");  cacheObject.setJapcAddress("testJAPCaddress");  cacheObject.setValue(new Float(1000));  cacheObject.setValueDescription("test value description");  cacheObject.setSimulated(false);  cacheObject.setEquipmentId(new Long(150));  cacheObject.setMinValue(new Float(100));  cacheObject.setMaxValue(new Float(2000));  cacheObject.setValueDictionary(new DataTagValueDictionary());  cacheObject.setAddress(new DataTagAddress());  cacheObject.setDataTagQuality(createValidQuality());  cacheObject.setCacheTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setDaqTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setSourceTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setRuleIdsString("");  return cacheObject;}  }
class C{  void onShow(TabSelectionType selectionType,long previousTimestampMillis){  long now=SystemClock.elapsedRealtime();  if (mLastShowMillis != -1 && selectionType == TabSelectionType.FROM_USER) {    long age=now - mLastShowMillis;    int rank=computeMRURank(mTab,mTabModel);    RecordHistogram.recordCountHistogram("Tab.SwitchedToForegroundAge",(int)age);    RecordHistogram.recordCountHistogram("Tab.SwitchedToForegroundMRURank",rank);  }  increaseTabShowCount();  boolean isOnBrowserStartup=sAllTabsShowCount == 1;  boolean performsLazyLoad=mTabCreationState == TabCreationState.FROZEN_FOR_LAZY_LOAD && mLastShowMillis == -1;  int status;  if (mRestoreStartedAtMillis == -1 && !performsLazyLoad) {    status=TAB_STATUS_MEMORY_RESIDENT;  } else   if (mLastShowMillis == -1) {    if (isOnBrowserStartup) {      status=TAB_STATUS_RELOAD_COLD_START_FG;    } else     if (mTabCreationState == TabCreationState.FROZEN_ON_RESTORE) {      status=TAB_STATUS_RELOAD_COLD_START_BG;    } else     if (mTabCreationState == TabCreationState.FROZEN_FOR_LAZY_LOAD) {      status=TAB_STATUS_LAZY_LOAD_FOR_BG_TAB;    } else {      assert mTabCreationState == TabCreationState.LIVE_IN_FOREGROUND || mTabCreationState == TabCreationState.LIVE_IN_BACKGROUND;      status=TAB_STATUS_RELOAD_EVICTED;    }  } else {    status=TAB_STATUS_RELOAD_EVICTED;  }  if (selectionType == TabSelectionType.FROM_USER) {    RecordHistogram.recordEnumeratedHistogram("Tab.StatusWhenSwitchedBackToForeground",status,TAB_STATUS_LIM);  }  if (mLastShowMillis == -1) {    if (mTabCreationState == TabCreationState.LIVE_IN_BACKGROUND) {      if (mRestoreStartedAtMillis == -1) {        RecordHistogram.recordEnumeratedHistogram("Tab.BackgroundLoadStatus",TAB_BACKGROUND_LOAD_SHOWN,TAB_BACKGROUND_LOAD_LIM);      } else {        RecordHistogram.recordEnumeratedHistogram("Tab.BackgroundLoadStatus",TAB_BACKGROUND_LOAD_LOST,TAB_BACKGROUND_LOAD_LIM);      }    } else     if (mTabCreationState == TabCreationState.FROZEN_FOR_LAZY_LOAD) {      assert mRestoreStartedAtMillis == -1;      RecordHistogram.recordEnumeratedHistogram("Tab.BackgroundLoadStatus",TAB_BACKGROUND_LOAD_SKIPPED,TAB_BACKGROUND_LOAD_LIM);    }  }  if (mLastShowMillis == -1 && previousTimestampMillis > 0) {    if (isOnBrowserStartup) {      RecordHistogram.recordCountHistogram("Tabs.ForegroundTabAgeAtStartup",(int)millisecondsToMinutes(System.currentTimeMillis() - previousTimestampMillis));    } else     if (selectionType == TabSelectionType.FROM_USER) {      RecordHistogram.recordCountHistogram("Tab.AgeUponRestoreFromColdStart",(int)millisecondsToMinutes(System.currentTimeMillis() - previousTimestampMillis));    }  }  mLastShowMillis=now;  updateTabState(TAB_STATE_ACTIVE);}  }
class C{  @Override public void separator(short separator,Augmentations augs) throws XNIException {}  }
class C{  public static void mruAddByEntityName(String entityName,GenericEntity pk,Map<String,LifoSet<Object>> lookupCaches){  String cacheEntityName=entityName;  LifoSet<Object> lkupCache=lookupCaches.get(cacheEntityName);  if (lkupCache == null) {    lkupCache=new LifoSet<Object>();    lookupCaches.put(cacheEntityName,lkupCache);  }  lkupCache.add(pk.getPrimaryKey());  if (Debug.infoOn())   Debug.logInfo("in mruAddByEntityName, entityName:" + entityName + " lifoSet.size()"+ lkupCache.size(),module);}  }
class C{  public void notify(RemoteEvent event) throws UnknownEventException, RemoteException {  RemoteEventListener l=get();  if (l != null) {    l.notify(event);  }}  }
class C{  private boolean validateCreateUser(User user,HttpServletResponse response) throws WebMessageException {  if (!aclService.canCreate(currentUserService.getCurrentUser(),getEntityClass())) {    throw new CreateAccessDeniedException("You don't have the proper permissions to create this object.");  }  if (!userService.canAddOrUpdateUser(IdentifiableObjectUtils.getUids(user.getGroups()))) {    throw new WebMessageException(WebMessageUtils.conflict("You must have permissions to create user, or ability to manage at least one user group for the user."));  }  List<String> uids=IdentifiableObjectUtils.getUids(user.getGroups());  for (  String uid : uids) {    if (!userGroupService.canAddOrRemoveMember(uid)) {      throw new WebMessageException(WebMessageUtils.conflict("You don't have permissions to add user to user group: " + uid));    }  }  return true;}  }
class C{  static Object ensureNotNull(Location location,Object value){  if (value == null) {    throw new EvalException(location,"Snippet runtime does not support null values.");  }  return value;}  }
class C{  @Override public RemoteStatement createStatement() throws RemoteException {  return new RemoteStatementImpl(this);}  }
class C{  public void actionPerformed(ActionEvent ev){  PCoATab tab=getViewer().getPcoaTab();  PCoA PCoA=tab.getPCoA();  int numberOfPCs=PCoA.getNumberOfPositiveEigenValues();  String value=(tab.getFirstPC() + 1) + " x " + (tab.getSecondPC() + 1);  value=JOptionPane.showInputDialog(getViewer().getFrame(),"Enter PCs (range 1-" + numberOfPCs + "):",value);  if (value != null) {    try {      String[] tokens=value.split("x");      int pc1=Integer.parseInt(tokens[0].trim());      int pc2=Integer.parseInt(tokens[1].trim());      execute("set pc1=" + pc1 + " pc2="+ pc2+ ";");    } catch (    Exception ex) {      NotificationsInSwing.showError(getViewer().getFrame(),"Expected 'pc1 x pc2', got: " + value);    }  }}  }
class C{  @Override public void characters(XMLString text,Augmentations augs) throws XNIException {}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_ITEM_PARTYNOTICE_DICE_OFFLINE_WINNER(String value1,String value2){  return new SM_SYSTEM_MESSAGE(1390270,value1,value2);}  }
class C{  private void startLocal(final Process process,final String pHostName,final Timestamp pStartupTime){  ProcessCacheObject processCacheObject=(ProcessCacheObject)process;  final Long newPIK=createProcessPIK();  processCacheObject.setCurrentHost(pHostName);  processCacheObject.setStartupTime(pStartupTime);  processCacheObject.setRequiresReboot(Boolean.FALSE);  processCacheObject.setProcessPIK(newPIK);  processCacheObject.setLocalConfig(LocalConfig.Y);  processCacheObject.setJmsDaqCommandQueue(jmsDaqQueueTrunk + ".command." + processCacheObject.getCurrentHost()+ "."+ processCacheObject.getName()+ "."+ newPIK.toString());  super.start(processCacheObject,pStartupTime);}  }
class C{  public boolean isRightHalf(){  return !isLeftHalf;}  }
class C{  public PhotosMakeCoverQuery makeCover(UserActor actor,int photoId){  return new PhotosMakeCoverQuery(getClient(),actor,photoId);}  }
class C{  public <T>com.twitter.util.Future<T> apply(Function0<T> function){  return chooseFuturePool().apply(function);}  }
class C{  @Override public boolean isEmpty(){  return false;}  }
class C{  public boolean cancelTask(SingleAsyncTask singleAsyncTask,boolean mayInterruptIfRunning){  return singleAsyncTask.cancel(mayInterruptIfRunning);}  }
class C{  public void remove(int childRow){  int parentRow=m_childToParent.getInt(childRow);  m_childToParent.setInt(-1,childRow);  m_parentToChild.remove(parentRow);}  }
class C{  private boolean isSuccessCode(String responseCode){  return responseCode.equalsIgnoreCase("default") || responseCode.startsWith("2");}  }
class C{  private Text createCopiableLabel(Composite parent,String text,int span,int horizontalIndent){  Text textControl=new Text(parent,SWT.READ_ONLY);  textControl.setText(text);  GridData data=new GridData();  data.horizontalAlignment=GridData.FILL;  data.horizontalSpan=span;  data.horizontalAlignment=GridData.FILL;  data.horizontalIndent=horizontalIndent;  textControl.setLayoutData(data);  return textControl;}  }
class C{  private Iterator<Record> decodeRows(Iterator<Iterable<Row>> rowGroups,final AstyanaxTable table){  return Iterators.transform(rowGroups,null);}  }
class C{  public int download_file(String group_name,String remote_filename,long file_offset,long download_bytes,String local_filename) throws IOException, MyException {  boolean bNewConnection=this.newReadableStorageConnection(group_name,remote_filename);  Socket storageSocket=this.storageServer.getSocket();  try {    ProtoCommon.RecvHeaderInfo header;    FileOutputStream out=new FileOutputStream(local_filename);    try {      this.errno=0;      this.send_download_package(group_name,remote_filename,file_offset,download_bytes);      InputStream in=storageSocket.getInputStream();      header=ProtoCommon.recvHeader(in,ProtoCommon.STORAGE_PROTO_CMD_RESP,-1);      this.errno=header.errno;      if (header.errno != 0) {        return header.errno;      }      byte[] buff=new byte[256 * 1024];      long remainBytes=header.body_len;      int bytes;      while (remainBytes > 0) {        if ((bytes=in.read(buff,0,remainBytes > buff.length ? buff.length : (int)remainBytes)) < 0) {          throw new IOException("recv package size " + (header.body_len - remainBytes) + " != "+ header.body_len);        }        out.write(buff,0,bytes);        remainBytes-=bytes;      }      return 0;    } catch (    IOException ex) {      if (this.errno == 0) {        this.errno=ProtoCommon.ERR_NO_EIO;      }      throw ex;    } finally {      out.close();      if (this.errno != 0) {        (new File(local_filename)).delete();      }    }  } catch (  IOException ex) {    if (!bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }    throw ex;  } finally {    if (bNewConnection) {      try {        this.storageServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      } finally {        this.storageServer=null;      }    }  }}  }
class C{  public void addModule(@NotNull Module module){  checkInitialized();  String moduleGradlePath=getModuleGradlePath(module);  if (moduleGradlePath != null) {    VirtualFile moduleFile=module.getModuleFile();    assert moduleFile != null;    addModule(moduleGradlePath,VfsUtilCore.virtualToIoFile(moduleFile.getParent()));  }}  }
class C{  public synchronized long fileCount(){  return fileCount;}  }
class C{  private static BlastMode[] modify(Integer[] order,BlastMode[] array){  BlastMode[] tmp=new BlastMode[order.length];  int pos=0;  for (  Integer id : order) {    if (id < array.length)     tmp[pos++]=array[id];  }  return tmp;}  }
class C{  @Override public void draw(Canvas canvas){  Barcode barcode=mBarcode;  if (barcode == null) {    return;  }  RectF rect=getViewBoundingBox(barcode);  canvas.drawRect(rect,mOverlayPaint);  canvas.drawLine(rect.left,rect.top,rect.left + CORNER_WIDTH,rect.top,mRectPaint);  canvas.drawLine(rect.left,rect.top,rect.left,rect.top + CORNER_WIDTH,mRectPaint);  canvas.drawLine(rect.left,rect.bottom,rect.left,rect.bottom - CORNER_WIDTH,mRectPaint);  canvas.drawLine(rect.left,rect.bottom,rect.left + CORNER_WIDTH,rect.bottom,mRectPaint);  canvas.drawLine(rect.right,rect.top,rect.right - CORNER_WIDTH,rect.top,mRectPaint);  canvas.drawLine(rect.right,rect.top,rect.right,rect.top + CORNER_WIDTH,mRectPaint);  canvas.drawLine(rect.right,rect.bottom,rect.right - CORNER_WIDTH,rect.bottom,mRectPaint);  canvas.drawLine(rect.right,rect.bottom,rect.right,rect.bottom - CORNER_WIDTH,mRectPaint);}  }
class C{  public static final SM_SYSTEM_MESSAGE STR_MSG_HOUSING_CANT_OWN_NOT_COMPLETE_QUEST(int questId){  return new SM_SYSTEM_MESSAGE(1401277,questId);}  }
class C{  private static QuerySchema deserializeSchema(JsonObject querySchemaJson) throws JsonParseException {  long schemaVersion=querySchemaJson.get("querySchemaVersion").getAsLong();  if (schemaVersion != QuerySchema.querySchemaSerialVersionUID) {    throw new JsonParseException("Attempt to deserialize unsupported query info version. Supported: " + QueryInfo.queryInfoSerialVersionUID + "; Received: "+ schemaVersion);  }  String dataFilterName=querySchemaJson.get("filterTypeName").getAsString();  Set<String> filteredElementNames;  try {    filteredElementNames=gson.fromJson(querySchemaJson.get("filteredElementNames"),new TypeToken<Set<String>>(){    }.getType());  } catch (  Exception e) {    logger.warn("No filtered element names for Query Schema deserialization.");    filteredElementNames=null;  }  DataFilter dataFilter;  try {    dataFilter=FilterFactory.getFilter(dataFilterName,filteredElementNames);  } catch (  IOException|PIRException e) {    logger.error("Error trying to create data filter from JSON.",e);    throw new JsonParseException(e);  }  QuerySchema querySchema=new QuerySchema(querySchemaJson.get("schemaName").getAsString(),querySchemaJson.get("dataSchemaName").getAsString(),querySchemaJson.get("selectorName").getAsString(),dataFilterName,dataFilter,querySchemaJson.get("dataElementSize").getAsInt());  List<String> elementNames=gson.fromJson(querySchemaJson.get("elementNames"),new TypeToken<List<String>>(){  }.getType());  querySchema.getElementNames().addAll(elementNames);  HashMap<String,String> additionalFields=gson.fromJson(querySchemaJson.get("additionalFields"),new TypeToken<HashMap<String,String>>(){  }.getType());  querySchema.getAdditionalFields().putAll(additionalFields);  return querySchema;}  }
class C{  @Override public void close() throws CannotCloseContainerException {  for (  FreePortGenerator.PortHandle portHandle : portHandels) {    portHandle.release();  }  portHandels.clear();  if (webAppContext.isRunning()) {    try {      webAppContext.stop();      webAppContext.destroy();    } catch (    Exception e) {      logger.warn("Failed to stop/destroy web context",e);    } finally {      webAppContext.setClassLoader(null);    }    if (contextHandlerCollection != null) {      contextHandlerCollection.removeHandler(webAppContext);    }  }  ConfigurableApplicationContext confAppContext=(ConfigurableApplicationContext)applicationContext;  confAppContext.close();  try {    jettyHolder.stop();  } catch (  Exception e) {    logger.warn("Failed to stop jetty server",e);  }  super.close();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  String[] guessPairedSuffixes(String readsFile){  String pattern1=ProgramProperties.get(MeganProperties.PAIRED_READ_SUFFIX1,"?");  String pattern2=ProgramProperties.get(MeganProperties.PAIRED_READ_SUFFIX2,"?");  if (readsFile != null && readsFile.length() > 0) {    BufferedReader r=null;    try {      r=new BufferedReader(new InputStreamReader(ResourceManager.getFileAsStream(readsFile)));      if (r.ready()) {        String[] words=r.readLine().split(" ");        String name;        if (words.length >= 2) {          if (words[0].equals(">"))           name=words[1]; else           name=words[0];        } else         name=null;        if (name != null) {          if (name.endsWith("_1") || name.endsWith("_2")) {            pattern1="_1";            pattern2="_2";          } else           if (name.endsWith(".1") || name.endsWith(".2")) {            pattern1=".1";            pattern2=".2";          } else           if (name.endsWith("_F3") || name.endsWith("_R3")) {            pattern1="_F3";            pattern2="_R3";          } else           if (name.endsWith("_1,") || name.endsWith("_2,")) {            pattern1="_1,";            pattern2="_2,";          } else           if (name.endsWith(".1,") || name.endsWith(".2,")) {            pattern1=".1,";            pattern2=".2,";          } else           if (name.endsWith("_F3,") || name.endsWith("_R3,")) {            pattern1="_F3,";            pattern2="_R3,";          } else           if (name.endsWith("/1") || name.endsWith("/2")) {            pattern1="/1";            pattern2="/2";          } else           if (name.endsWith(".x") || name.endsWith(".y")) {            pattern1=".x";            pattern2=".y";          } else           if (name.endsWith(".a") || name.endsWith(".b")) {            pattern1=".a";            pattern2=".b";          }        }      }    } catch (    Exception ex) {    } finally {      if (r != null)       try {        r.close();      } catch (      IOException e) {      }    }  }  return new String[]{pattern1,pattern2};}  }
class C{  public static Boolean valueOf(String value){  return value != null ? Boolean.valueOf(value) : null;}  }
class C{  protected AdsCreateTargetGroupQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  private void deleteConcept(String id){  try {    getGraph().getConcept(id).delete();  } catch (  ConceptException e) {    throw new RuntimeException(e);  }}  }
class C{  boolean sendMessages(LinkedList<GSMessageImpl> messages,Transaction tx) throws RemoteException, TransactionException, JMSException {  if (_logger.isLoggable(Level.FINEST)) {    _logger.finest("GSSession.sendProducedMessages()");  }  boolean messagesSent=false;  int size=messages.size();  GSMessageImpl[] copy=new GSMessageImpl[size];  Iterator<GSMessageImpl> iter=messages.iterator();  for (int j=0; j < size; j++) {    copy[j]=iter.next();  }  for (int i=0; i < copy.length; i++) {    messagesSent=messagesSent | doSend(copy[i],tx);  }  return messagesSent;}  }
class C{  @Override public Dfp floor(){  return trunc(DfpField.RoundingMode.ROUND_FLOOR);}  }
class C{  public RangeQueryBinding(TupleSet ts,String field,boolean forceOrdinal){  super(ts,field);  m_type=DataLib.inferType(ts,field);  m_ordinal=forceOrdinal;  m_lstnr=new Listener();  initPredicate();  initModel();}  }
class C{  public static void showLogin(android.support.v4.app.Fragment fragment,int requestCode){  Intent intent=new Intent(fragment.getContext(),LoginActivity.class);  fragment.startActivityForResult(intent,requestCode);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CRAFT_RECIPE_CANT_LEARN_SKILL(int i){  return new SM_SYSTEM_MESSAGE(1330062,new DescriptionId(i));}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AnnotatedCompilationUnit fullCopy(){  AnnotatedCompilationUnit tree=(AnnotatedCompilationUnit)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public AudioGetPopularQuery(VkApiClient client,UserActor actor){  super(client,"audio.getPopular",Utils.buildParametrizedType(List.class,AudioFull.class));  accessToken(actor.getAccessToken());}  }
class C{  public static List<Window> windows(String words,TokenizerFactory tokenizerFactory){  Tokenizer tokenizer=tokenizerFactory.create(words);  List<String> list=new ArrayList<>();  while (tokenizer.hasMoreTokens())   list.add(tokenizer.nextToken());  return windows(list,5);}  }
class C{  public CompletableFuture<Tuple2<UInteger[],UInteger[]>> invoke(UInteger subscriptionId){  Variant[] inputArguments=new Variant[]{new Variant(subscriptionId)};  return invoke(inputArguments).thenCompose(null);}  }
class C{  public TShortArrayList inverseGrep(TShortProcedure condition){  TShortArrayList list=new TShortArrayList();  for (int i=0; i < _pos; i++) {    if (!condition.execute(_data[i])) {      list.add(_data[i]);    }  }  return list;}  }
class C{  public SecurityManagerBuilder withAnonymousAccessAs(@Nullable String id){  _anonymousId=id;  return this;}  }
class C{  protected void flowThrough(Object inValue,Object unit,Object outValue){  FlowSet in=(FlowSet)inValue, out=(FlowSet)outValue;  RWSet stmtRead=sea.readSet(body.getMethod(),(Stmt)unit);  RWSet stmtWrite=sea.writeSet(body.getMethod(),(Stmt)unit);  Boolean addSelf=Boolean.FALSE;  Iterator tnIt=tns.iterator();  while (tnIt.hasNext()) {    CriticalSection tn=(CriticalSection)tnIt.next();    if (stmtRead.hasNonEmptyIntersection(tn.write) || stmtWrite.hasNonEmptyIntersection(tn.read) || stmtWrite.hasNonEmptyIntersection(tn.write))     addSelf=Boolean.TRUE;  }  in.copy(out);  if (addSelf.booleanValue()) {    CriticalSection tn=new CriticalSection(false,body.getMethod(),0);    tn.entermonitor=(Stmt)unit;    tn.units.add((Unit)unit);    tn.read.union(stmtRead);    tn.write.union(stmtWrite);    out.add(tn);  }}  }
class C{  private void removeSpotlightView(){  if (listener != null)   listener.onUserClicked(usageId);  if (getParent() != null)   ((ViewGroup)getParent()).removeView(this);}  }
class C{  static Properties parseParameters(Element element){  Properties props=new Properties();  String name=null;  String value=null;  NodeList nList=element.getElementsByTagName("Parameter");  if (nList.getLength() == 0)   nList=element.getElementsByTagName("parameter");  for (int i=0; i < nList.getLength(); i++) {    Element parameterElement=(Element)nList.item(i);    NamedNodeMap nm=parameterElement.getAttributes();    Node node=nm.getNamedItem("Name");    if (node == null)     node=nm.getNamedItem("name");    name=node.getNodeValue();    String elementValue=getTextValue(parameterElement);    node=nm.getNamedItem("Value");    if (node == null)     node=nm.getNamedItem("value");    if (elementValue.length() > 0 && node != null)     throw new IllegalArgumentException("Declare either a Value " + "attribute or a <Parameter> " + "value, not both");    if (node == null) {      if (elementValue.length() > 0) {        value=elementValue;      } else {        throw new IllegalArgumentException("You must declare a Value " + "attribute or a " + "<Parameter> value");      }    } else {      value=node.getNodeValue();    }    props.put(name,value);  }  if (logger.isLoggable(Level.FINEST)) {    String tagName=element.getTagName();    if (element.getParentNode() != null && element.getParentNode() instanceof Element)     tagName=((Element)element.getParentNode()).getTagName() + "." + tagName;    logger.finest("Element [" + tagName + "], "+ "Parameters: "+ props.toString());  }  return (props);}  }
class C{  public static boolean isXML11Valid(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  private static void doCopyFile(File srcFile,File destFile,boolean preserveFileDate) throws IOException {  if (destFile.exists() && destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' exists but is a directory");  }  FileInputStream fis=null;  FileOutputStream fos=null;  FileChannel input=null;  FileChannel output=null;  try {    fis=new FileInputStream(srcFile);    fos=new FileOutputStream(destFile);    input=fis.getChannel();    output=fos.getChannel();    long size=input.size();    long pos=0;    long count=0;    while (pos < size) {      count=size - pos > FILE_COPY_BUFFER_SIZE ? FILE_COPY_BUFFER_SIZE : size - pos;      pos+=output.transferFrom(input,pos,count);    }  }  finally {    IOUtils.closeQuietly(output);    IOUtils.closeQuietly(fos);    IOUtils.closeQuietly(input);    IOUtils.closeQuietly(fis);  }  if (srcFile.length() != destFile.length()) {    throw new IOException("Failed to copy full contents from '" + srcFile + "' to '"+ destFile+ "'");  }  if (preserveFileDate) {    destFile.setLastModified(srcFile.lastModified());  }}  }
class C{  public LinkedList<Diff> diff_main(String text1,String text2){  return diff_main(text1,text2,true);}  }
class C{  public S2Cap addPoint(S2Point p){  if (isEmpty()) {    return new S2Cap(p,0);  } else {    double dist2=S2Point.sub(axis,p).norm2();    double newHeight=Math.max(height,ROUND_UP * 0.5 * dist2);    return new S2Cap(axis,newHeight);  }}  }
class C{  @deprecated public boolean isAlias(int index){  return ICUResourceBundleReader.RES_GET_TYPE(getTableResource(index)) == 3;}  }
class C{  @PostConstruct public void init(){  highPriorityBuffer=new SynchroBuffer(100,200,100,SynchroBuffer.DUPLICATE_OK,10000);  highPriorityBuffer.setSynchroBufferListener(new HighPriorityListener());  highPriorityBuffer.enable();  lowPriorityBuffer=new SynchroBuffer(100,500,100,SynchroBuffer.DUPLICATE_OK,10000);  lowPriorityBuffer.setSynchroBufferListener(new LowPriorityListener());  lowPriorityBuffer.enable();}  }
class C{  public UserNotFoundException(Throwable cause){  super(cause);}  }
class C{  public static JSON from(Object object) throws IOException {  Assert.notNull("object",object);  try {    return from(mapper.writeValueAsString(object));  } catch (  Exception e) {    throw new IOException(e);  }}  }
class C{  public LoginDataTest(final LoginData loginData,final LoginType expectedLoginType,final boolean expectedPtcIsValid,final boolean expectedGoogleIsValid){  this.loginData=loginData;  this.expectedLoginType=expectedLoginType;  this.expectedPtcIsValid=expectedPtcIsValid;  this.expectedGoogleIsValid=expectedGoogleIsValid;}  }
class C{  public void addAssetListener(@NotNull ActionListener listener){  myAssetListeners.add(listener);}  }
class C{  protected void insertTextContent(StringBuffer buf) throws DOMException {  String content=getNodeValue();  if (content != null) {    buf.insert(0,content);  }}  }
class C{  public PhotosSaveWallPhotoQuery caption(String value){  return unsafeParam("caption",value);}  }
class C{  public LineIterator(final Reader reader) throws IllegalArgumentException {  if (reader == null) {    throw new IllegalArgumentException("Reader must not be null");  }  if (reader instanceof BufferedReader) {    bufferedReader=(BufferedReader)reader;  } else {    bufferedReader=new BufferedReader(reader);  }}  }
class C{  public boolean isEnabled(){  return mEnabled;}  }
class C{  public void populate(PolygonSymbolizer polygonSymbolizer){  for (  VendorOptionInterface extension : vendorOptionList) {    extension.populate(polygonSymbolizer);  }}  }
class C{  public void testParentStylesEmptyCompletion() throws Throwable {  doTestCompletionVariants("styles_parent_empty.xml","android:","Parent","AppTheme","style1");}  }
class C{  public void nameCheck(){  SimpleSet decls=outerScope().lookupVariable(name());  for (Iterator iter=decls.iterator(); iter.hasNext(); ) {    Variable var=(Variable)iter.next();    if (var instanceof VariableDeclaration) {      VariableDeclaration decl=(VariableDeclaration)var;      if (decl.enclosingBodyDecl() == enclosingBodyDecl())       error("duplicate declaration of " + "catch parameter " + name());    } else     if (var instanceof ParameterDeclaration) {      ParameterDeclaration decl=(ParameterDeclaration)var;      if (decl.enclosingBodyDecl() == enclosingBodyDecl())       error("duplicate declaration of " + "catch parameter " + name());    } else     if (var instanceof CatchParameterDeclaration) {      CatchParameterDeclaration decl=(CatchParameterDeclaration)var;      if (decl.enclosingBodyDecl() == enclosingBodyDecl())       error("duplicate declaration of " + "catch parameter " + name());    }  }  if (!lookupVariable(name()).contains(this))   error("duplicate declaration of catch parameter " + name());}  }
class C{  public RequestFailedException bad(String param,String reason,Throwable cause){  StringBuilder sb=new StringBuilder();  buildPath(sb);  if (param != null) {    Param p=type.params.get(param);    if (p == null && param.indexOf('[') == -1) {      assert false : "name \"" + param + "\" is not a known parameter";    }    if (sb.length() > 0) {      sb.append(" > ");    }    sb.append(param);  }  RequestFailedException e=new RequestFailedException(this,param,sb.toString(),reason);  if (cause != null) {    e.initCause(cause);  }  return e;}  }
class C{  public void destroyView() throws CanceledException {  dir.removeViewer(this);  setVisible(false);}  }
class C{  public static void displayToast(Context context,String msg,int durationInSeconds){  int toastDurationInMilliSeconds=durationInSeconds * 1000;  int toastRefreshRateInMilliSeconds=2 * 1000;  SpannableString s=new SpannableString(msg);  s.setSpan(new TypefaceSpan(context,RELATIVE_PATH_TO_TYPEFACE),0,s.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  final Toast toast=Toast.makeText(context,s,Toast.LENGTH_LONG);  runCustomToast(toast,toastDurationInMilliSeconds,toastRefreshRateInMilliSeconds);}  }
class C{  private void dashToWords(WordRelation wordRelation,Item tokenItem,String tokenVal){  int index=tokenVal.indexOf('-');  String aaa=tokenVal.substring(0,index);  String bbb=tokenVal.substring(index + 1,tokenVal.length());  if (matches(digitsPattern,aaa) && matches(digitsPattern,bbb)) {    FeatureSet featureSet=tokenItem.getFeatures();    featureSet.setString("name",aaa);    tokenToWords(wordRelation,tokenItem,aaa);    wordRelation.addWord(tokenItem,"to");    featureSet.setString("name",bbb);    tokenToWords(wordRelation,tokenItem,bbb);    featureSet.setString("name","");  } else {    tokenToWords(wordRelation,tokenItem,aaa);    tokenToWords(wordRelation,tokenItem,bbb);  }}  }
class C{  @Override public boolean hasFeature(String feature,String version){  boolean result=super.hasFeature(feature,version);  if (!result) {    boolean anyVersion=version == null || version.length() == 0;    if (feature.startsWith("+")) {      feature=feature.substring(1);    }    return ((feature.equalsIgnoreCase("Events") && (anyVersion || version.equals("2.0"))) || (feature.equalsIgnoreCase("MutationEvents") && (anyVersion || version.equals("2.0"))) || (feature.equalsIgnoreCase("Traversal") && (anyVersion || version.equals("2.0")))|| (feature.equalsIgnoreCase("Range") && (anyVersion || version.equals("2.0")))|| (feature.equalsIgnoreCase("MutationEvents") && (anyVersion || version.equals("2.0"))));  }  return result;}  }
class C{  public AudioSearchQuery q(String value){  return unsafeParam("q",value);}  }
class C{  public static float invSqrt(float fValue){  return (float)(1.0f / Math.sqrt(fValue));}  }
class C{  public static float[] pointOnLine(float x0,float y0,float x1,float y1,float ratio){  float[] result=new float[2];  pointOnLine(x0,y0,x1,y1,ratio,result);  return result;}  }
class C{  public GetThreadPoolAction(boolean user){  this.user=user;}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public static Settings init(){  return init(DEFAULT_TAG);}  }
class C{  private synchronized Object addAndGetSegmentLock(String segmentId){  Object segmentLoderLockObject=segmentLockMap.get(segmentId);  if (null == segmentLoderLockObject) {    segmentLoderLockObject=new Object();    segmentLockMap.put(segmentId,segmentLoderLockObject);  }  return segmentLoderLockObject;}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0.001,0.01,0.025,0.05,0.1,0.999,0.990,0.975,0.950,0.900};}  }
class C{  @Override public void run(){  try {    NetConnector.getInstance().shutdown();  } catch (  Throwable t) {    log.error("Can't shutdown NetConnector",t);  }  try {    DatabaseFactory.shutdown();  } catch (  Throwable t) {    log.error("Can't shutdown DatabaseFactory",t);  }  CronService.getInstance().shutdown();  try {    ThreadPoolManager.getInstance().shutdown();  } catch (  Throwable t) {    log.error("Can't shutdown ThreadPoolManager",t);  }  if (restartOnly) {    Runtime.getRuntime().halt(ExitCode.CODE_RESTART);    if (SvStatsConfig.SVSTATS_ENABLE)     DAOManager.getDAO(SvStatsDAO.class).update_SvStats_All_Offline(0,0);  } else {    Runtime.getRuntime().halt(ExitCode.CODE_NORMAL);    if (SvStatsConfig.SVSTATS_ENABLE)     DAOManager.getDAO(SvStatsDAO.class).update_SvStats_All_Offline(0,0);  }}  }
class C{  public JSpaceState(){  state=STOPPED;}  }
class C{  private void addToQueue(Collection<SerialMessage> msgs){  if (msgs == null) {    return;  }  for (  SerialMessage serialMessage : msgs) {    addToQueue(serialMessage);  }}  }
class C{  protected void shuffleTestAndTrainingSetTogether(){  ArrayList lOverall=new ArrayList(TestFiles.size() + TrainingFiles.size());  lOverall.addAll(TrainingFiles);  lOverall.addAll(TestFiles);  utils.shuffleList(lOverall);  TestFiles.clear();  TrainingFiles.clear();  TestFiles.addAll(lOverall.subList(0,TestFiles.size()));  TrainingFiles.addAll(lOverall.subList(TestFiles.size(),lOverall.size()));}  }
class C{  public Bigrams(String bigramARPAFileName){  ugrams=new HashMap<String,Tuple2<Double,Double>>();  bgrams=new HashMap<Tuple2<String,String>,Double>();  BufferedReader br=null;  try {    br=new BufferedReader(new InputStreamReader(new FileInputStream(bigramARPAFileName),"UTF-8"));    String line=null;    boolean u=false;    boolean b=false;    while ((line=br.readLine()) != null) {      line=line.trim();      if (line.contains("1-grams:")) {        u=true;      }      if (!line.isEmpty() && u) {        String[] parts=line.split("\\s+");        if (parts.length == 3) {          ugrams.put(parts[1],new Tuple2<Double,Double>(Double.parseDouble(parts[0]),Double.parseDouble(parts[2])));        } else         if (parts.length == 2) {          ugrams.put(parts[1],new Tuple2<Double,Double>(Double.parseDouble(parts[0]),0d));        }      }      if (line.contains("2-grams:")) {        u=false;        b=true;      }      if (!line.isEmpty() && b) {        String[] parts=line.split("\\s+");        if (parts.length == 3) {          bgrams.put(new Tuple2<String,String>(parts[1],parts[2]),Double.parseDouble(parts[0]));        }      }    }    br.close();  } catch (  IOException e) {    e.printStackTrace();  } finally {    try {      br.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  if (security != null) {    final int lastDot=className.lastIndexOf(".");    String packageName=className;    if (lastDot != -1)     packageName=className.substring(0,lastDot);    security.checkPackageAccess(packageName);  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  protected void onDestroy(){  if (mCalled) {    throw new IllegalAccessError("don't call #onDestroy() directly, call #destroy()");  }  mCalled=true;}  }
class C{  @Override public LSInput resolveResource(String type,String namespaceURI,String publicId,String systemId,String baseURI){  String resolvedId=null;  try {    if (namespaceURI != null) {      resolvedId=resolveURI(namespaceURI);    }    if (!getUseLiteralSystemId() && baseURI != null) {      try {        URI uri=new URI(new URI(baseURI),systemId);        systemId=uri.toString();      } catch (      URI.MalformedURIException ex) {      }    }    if (resolvedId == null) {      if (publicId != null && systemId != null) {        resolvedId=resolvePublic(publicId,systemId);      } else       if (systemId != null) {        resolvedId=resolveSystem(systemId);      }    }  } catch (  IOException ex) {  }  if (resolvedId != null) {    return new DOMInputImpl(publicId,resolvedId,baseURI);  }  return null;}  }
class C{  @NotNull public CreatePersonAction createPerson(@NotNull String personGroupId,@NotNull String name,@Nullable String userData){  Validation.validate(personGroupId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("personGroupId","Person group ID is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters."));  Validation.validate(name,"^.{1,128}$",new ParameterValidationException("name","The maximum length is 128"));  Validation.validate(userData,16,new ParameterValidationException("userData","The size limit is 16KB"));  return new CreatePersonAction(cognitiveContext,personGroupId,name,userData);}  }
class C{  protected void internalTransform(Body b,String phaseName,Map<String,String> options){  if (Options.v().verbose())   G.v().out.println("[" + b.getMethod().getName() + "]     Removing Critical Edges...");  removeCriticalEdges(b);  if (Options.v().verbose())   G.v().out.println("[" + b.getMethod().getName() + "]     Removing Critical Edges done.");}  }
class C{  public MessagesSearchDialogsQuery searchDialogs(UserActor actor){  return new MessagesSearchDialogsQuery(getClient(),actor);}  }
class C{  protected GroupsUnbanUserQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  private static boolean focusCenter(){  return (!CropOverlayView.showGuidelines());}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public void addInstance(int instanceId,WorldMapInstance instance){  if (instanceId == 0) {    instanceId=1;  }  instances.put(instanceId,instance);}  }
class C{  private HttpUrl urlBodyFromMap(String base,Map<String,String> map){  HttpUrl.Builder builder=HttpUrl.parse(base).newBuilder(base);  for (  Entry<String,String> entry : map.entrySet()) {    if (entry.getValue() != null) {      builder.addEncodedQueryParameter(entry.getKey(),entry.getValue());    }  }  return builder.build();}  }
class C{  public DataSourcePropertiesInterface convert(Map<String,String> propertyMap){  String type=propertyMap.get(DatasourceKeys.TYPE);  if (type != null) {    Integer dsType=0;    try {      dsType=Integer.valueOf(type);    } catch (    NumberFormatException e) {      ConsoleManager.getInstance().exception(this,e);      return null;    }    EsriDataSourceInterface ds=dataSourceMap.get(dsType);    if (ds != null) {      return ds.convert(propertyMap);    }  }  return null;}  }
class C{  @Nullable public ResizeHandler createResizeHandler(@NotNull ViewEditor editor,@NotNull NlComponent component,@Nullable SegmentType horizontalEdgeType,@Nullable SegmentType verticalEdgeType){  return null;}  }
class C{  public StatusConsole(int iWidth){  Width=iWidth;}  }
class C{  public CatchablePokemon(PokemonGo api,WildPokemon proto){  this.api=api;  this.encounterKind=EncounterKind.NORMAL;  this.spawnPointId=proto.getSpawnPointId();  this.encounterId=proto.getEncounterId();  this.pokemonId=proto.getPokemonData().getPokemonId();  this.pokemonIdValue=proto.getPokemonData().getPokemonIdValue();  this.expirationTimestampMs=proto.getTimeTillHiddenMs();  this.latitude=proto.getLatitude();  this.longitude=proto.getLongitude();}  }
class C{  private void extractProtoSources(Set<String> extracted,String protoFile){  if (!extracted.add(protoFile)) {    return;  }  String content=copyTestData(protoFile);  Matcher matcher=PROTO_IMPORT_PATTERN.matcher(content);  while (matcher.find()) {    extractProtoSources(extracted,matcher.group(1));  }}  }
class C{  public void run(){  _setRunning(true);  while (_keepRunning()) {    if (_activityCount() > 0) {      long currentTime=System.currentTimeMillis();      long t=-1;synchronized (this) {        for (int i=0; i < m_activities.size(); i++) {          Activity a=(Activity)m_activities.get(i);          m_tmp.add(a);          if (currentTime >= a.getStopTime()) {            m_activities.remove(i--);            a.setScheduled(false);          }        }        if (m_activities.size() == 0) {          m_nextTime=Long.MAX_VALUE;        }      }      for (int i=0; i < m_tmp.size(); i++) {        Activity a=(Activity)m_tmp.get(i);        long s=a.runActivity(currentTime);        t=(s < 0 ? t : t < 0 ? s : Math.min(t,s));      }      m_tmp.clear();      if (t == -1)       continue;      try {synchronized (this) {          wait(t);        }      } catch (      InterruptedException e) {      }    } else {      try {synchronized (this) {          wait();        }      } catch (      InterruptedException e) {      }    }  }}  }
class C{  public boolean updateLibrariesToVersion(@NotNull Module module,@NotNull List<GradleCoordinate> dependencies,@Nullable Runnable callback){  GradleBuildModel buildModel=GradleBuildModel.get(module);  if (buildModel == null) {    return false;  }  updateDependenciesInTransaction(buildModel,module,dependencies,callback);  return true;}  }
class C{  public FlipAnimator(View fromView,View toView,int centerX,int centerY){  this.fromView=fromView;  this.toView=toView;  this.centerX=centerX;  this.centerY=centerY;  setDuration(500);  setFillAfter(true);  setInterpolator(new AccelerateDecelerateInterpolator());}  }
class C{  public boolean isApplicable(){  ImportBlastDialog importBlastDialog=(ImportBlastDialog)getParent();  return !importBlastDialog.getFormatCBox().getSelectedItem().toString().equalsIgnoreCase("daa");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_CRITICAL(int num1,String value0){  return new SM_SYSTEM_MESSAGE(1200001,num1,value0);}  }
class C{  public JobRow withFieldValue(JobField field,String value){  JobRow newRow=new JobRow(jobId,new LinkedHashMap<>(this));  newRow.put(field,value);  return newRow;}  }
class C{  public int readPacked(int kind){switch (kind) {case 0:    return read();case 1:  return readCharLittleEndian();case 2:return readIntLittleEndian();default :throw new RuntimeException("unknown kind");}}  }
class C{  private void editJointAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof Joint) {      Joint joint=(Joint)node.getUserObject();synchronized (Simulation.LOCK) {        EditJointDialog.show(ControlUtilities.getParentWindow(this),joint);      }    }  }}  }
class C{  int distinctAdds(){  return (int)Math.min(_adds,_distinctAdds.cardinality());}  }
class C{  protected void startZKCluster() throws Exception {  zkUtil.startServer();  zkc=zkUtil.getZooKeeperClient();}  }
class C{  private void computeUnbound(MessageType message,Set<FieldSelector> bound,FieldSelector parent,Set<FieldSelector> unbound){  for (  Field field : message.getFields()) {    FieldSelector selector=parent.add(field);    if (bound.contains(selector)) {      continue;    }    boolean boundSubFields=false;    if (selector.getType().isMessage()) {      for (      FieldSelector boundSelector : bound) {        if (selector.isPrefixOf(boundSelector)) {          boundSubFields=true;          computeUnbound(selector.getType().getMessageType(),bound,selector,unbound);          break;        }      }    }    if (!boundSubFields) {      unbound.add(selector);    }  }}  }
class C{  protected int compareStatusAndRevisions(Object left,Object right){  ISVNLocalResource localResource=null;  if (left instanceof SVNLocalResourceNode) {    localResource=((SVNLocalResourceNode)left).getLocalResource();  }  ISVNRemoteResource edition=null;  if (right instanceof ResourceEditionNode)   edition=((ResourceEditionNode)right).getRemoteResource();  if (localResource == null || edition == null) {    return NODE_UNKNOWN;  }  if (localResource.isFolder() && edition.isContainer()) {    return NODE_EQUAL;  }  if (localResource.isFolder() != edition.isContainer()) {    return NODE_NOT_EQUAL;  }  String leftLocation=localResource.getRepository().getLocation();  String rightLocation=edition.getRepository().getLocation();  if (!leftLocation.equals(rightLocation)) {    return NODE_UNKNOWN;  }  LocalResourceStatus localStatus=null;  try {    localStatus=localResource.getStatus();    if (localStatus == null) {      return NODE_UNKNOWN;    }    if (!localResource.isDirty() && localResource.getResource().getProjectRelativePath().toString().equals(edition.getProjectRelativePath()) && localStatus.getLastChangedRevision().equals(edition.getLastChangedRevision())) {      return NODE_EQUAL;    }    if (!localResource.isDirty() && !localResource.isFolder()) {      if (changedResources == null && diffFiles != null) {        parseDiffs();      }      if (changedResources == null) {        for (int i=0; i < diffSummary.length; i++) {          if (localResource.getResource().getProjectRelativePath().toString().equals(projectRelativePath) || localResource.getResource().getProjectRelativePath().toString().equals(projectRelativePath + diffSummary[i].getPath())) {            return NODE_NOT_EQUAL;          }        }        return NODE_EQUAL;      }      if (changedResources.contains(localResource.getResource().getLocation().toString())) {        return NODE_NOT_EQUAL;      }      return NODE_EQUAL;    }  } catch (  SVNException e) {    return NODE_UNKNOWN;  }  return NODE_UNKNOWN;}  }
class C{  protected void importServicesAndOperations(Definition definition){  for (  Object serviceObject : definition.getServices().values()) {    Service service=(Service)serviceObject;    WSService wsService=this.importService(service);    this.wsServices.put(this.namespace + wsService.getName(),wsService);    Port port=(Port)service.getPorts().values().iterator().next();    for (    Object bindOperationObject : port.getBinding().getBindingOperations()) {      BindingOperation bindOperation=(BindingOperation)bindOperationObject;      WSOperation operation=this.processOperation(bindOperation.getOperation(),wsService);      wsService.addOperation(operation);      this.wsOperations.put(this.namespace + operation.getName(),operation);    }  }}  }
class C{  protected LeadsGetStatsQuery leadId(int value){  return unsafeParam("lead_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSpellAttackEffect_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200641,skillcaster,skillname);}  }
class C{  public XMLStreamException(Throwable th){  super(th);  nested=th;}  }
class C{  protected void removeAt(int index){  _states[index]=REMOVED;  super.removeAt(index);}  }
class C{  public boolean isSmoothScrollbarEnabled(){  return mSmoothScrollbarEnabled;}  }
class C{  public Application createJmxApplicationInteractive(String connectionString,String displayName,String username,String password){  return createJmxApplicationInteractive(connectionString,displayName,username,password,false,false);}  }
class C{  @Override public Set<K> keySet(){  return keys;}  }
class C{  public SectionSeparator(String text){  this(text,null);}  }
class C{  public void processKeepAliveRespond(LeaseKeepAliveResponse leaseKeepAliveResponse){  long id=leaseKeepAliveResponse.getID();  Lease lease=this.keepAlives.get(id);  if (lease != null) {synchronized (lease) {      if (leaseKeepAliveResponse.getTTL() <= 0) {        if (lease != null && lease.isContainHandler()) {          lease.getEtcdLeaseHandler().onLeaseExpired(id);        }        removeLease(id);      } else {        long nextKeepAlive=System.currentTimeMillis() + 1000 + leaseKeepAliveResponse.getTTL() * 1000 / 3;        lease.setNextKeepAlive(nextKeepAlive);        lease.setDeadLine(System.currentTimeMillis() + leaseKeepAliveResponse.getTTL() * 1000);      }    }  }}  }
class C{  public UserDataAccessException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static String asItemKey(List<DimensionItem> items){  StringBuilder builder=new StringBuilder();  if (items != null && !items.isEmpty()) {    for (    DimensionItem item : items) {      builder.append(item.getItem().getDimensionItem()).append(DIMENSION_SEP);    }    builder.deleteCharAt(builder.length() - 1);  }  return builder.toString();}  }
class C{  public Trap newTrap(SootClass exception,Unit beginStmt,Unit endStmt,Unit handlerStmt){  return new GTrap(exception,beginStmt,endStmt,handlerStmt);}  }
class C{  public void runNeighborNet(ProgressListener progressListener,int ntax,double[][] D,int ordering[]) throws CanceledException {  NetNode netNodes=new NetNode();  for (int i=ntax; i >= 1; i--) {    NetNode taxNode=new NetNode();    taxNode.id=i;    taxNode.next=netNodes.next;    netNodes.next=taxNode;  }  for (NetNode taxNode=netNodes; taxNode.next != null; taxNode=taxNode.next)   taxNode.next.prev=taxNode;  Stack amalgs=new Stack();  int num_nodes=ntax;  num_nodes=agglomNodes(progressListener,amalgs,D,netNodes,num_nodes);  expandNodes(progressListener,num_nodes,ntax,amalgs,netNodes,ordering);}  }
class C{  public MessagesEditChatQuery(VkApiClient client,UserActor actor,int chatId,String title){  super(client,"messages.editChat",OkResponse.class);  accessToken(actor.getAccessToken());  chatId(chatId);  title(title);}  }
class C{  public static final Vector2 show(Window owner){  ApplyForceDialog afd=new ApplyForceDialog(owner);  afd.setLocationRelativeTo(owner);  afd.setVisible(true);  if (!afd.canceled) {    return afd.forcePanel.getForce();  }  return null;}  }
class C{  public static void onHelp(NpcAI2 npcAI,Creature creature){  Npc npc=npcAI.getOwner();  if (npc.getAttackedCount() == 0) {    if (DataManager.NPC_SHOUT_DATA.hasAnyShout(npc.getPosition().getMapId(),npc.getNpcId(),ShoutEventType.ATTACKED)) {      List<NpcShout> shouts=DataManager.NPC_SHOUT_DATA.getNpcShouts(npc.getPosition().getMapId(),npc.getNpcId(),ShoutEventType.ATTACKED,null,0);      NpcShoutsService.getInstance().shout(npc,creature,shouts,0,false);      shouts.clear();      return;    }    if (DataManager.NPC_SHOUT_DATA.hasAnyShout(npc.getPosition().getMapId(),npc.getNpcId(),ShoutEventType.HELPCALL)) {      List<NpcShout> shouts=DataManager.NPC_SHOUT_DATA.getNpcShouts(npc.getPosition().getMapId(),npc.getNpcId(),ShoutEventType.HELPCALL,null,0);      NpcShoutsService.getInstance().shout(npc,creature,shouts,0,false);      shouts.clear();    }  }}  }
class C{  public void log1p(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  double[] function=new double[1 + order];  function[0]=FastMath.log1p(operand[operandOffset]);  if (order > 0) {    double inv=1.0 / (1.0 + operand[operandOffset]);    double xk=inv;    for (int i=1; i <= order; ++i) {      function[i]=xk;      xk*=-i * inv;    }  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  public XorSpacePredicate(ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){  super(leftPredicate,rightPredicate);}  }
class C{  public void tabCreated(long time,int id){  if (!createTabHelper(id))   return;  mIsDying=false;  finishAnimation(time);  startAnimation(time,OverviewAnimationType.NEW_TAB_OPENED,TabModelUtils.getTabIndexById(mTabModel,id),TabModel.INVALID_TAB_INDEX,false);}  }
class C{  public static double sign(double dNum){  return dNum == 0.0 ? dNum : dNum / Math.abs(dNum);}  }
class C{  public static boolean isLetterOrModifier(int codePoint){  int type=Character.getType(codePoint);  return type == Character.UPPERCASE_LETTER || type == Character.LOWERCASE_LETTER || type == Character.TITLECASE_LETTER || type == Character.MODIFIER_LETTER || type == Character.OTHER_LETTER || type == Character.NON_SPACING_MARK || type == Character.COMBINING_SPACING_MARK || type == Character.ENCLOSING_MARK;}  }
class C{  public Sample(short[] frameData,byte[] residualData){  this.frameData=frameData;  this.residualData=residualData;}  }
class C{  @Override public void close(){  if (leaf != null) {    leaf.close();    leaf=null;  }  ccMgr.releaseIndexLocks();  dirsMayBeUpdated=null;}  }
class C{  public NestedViewActionMenu(int rank,@NotNull String menuName,@Nullable Icon icon,@NotNull List<List<ViewAction>> actions){  super(rank,icon,menuName);  myActions=actions;}  }
class C{  public void sendRoomListPacket(int protocol,List<GameRoom> gameRooms){  String packet=new String();  int partitionPacketNumber=0;  for (int i=0; i < gameRooms.size(); i++)   if (gameRooms.get(i).isGameRunning() == false)   partitionPacketNumber++;  packet=packet.concat(Settings.sSenderSplitProtocolToken);  packet=packet.concat(protocol + Settings.sSenderSplitProtocolToken);  packet=packet.concat(partitionPacketNumber + Settings.sSenderSplitProtocolToken);  for (int i=0; i < gameRooms.size(); i++) {    if (gameRooms.get(i).isGameRunning() == false)     packet=packet.concat(gameRooms.get(i).getsRoomName() + Settings.sSenderSplitProtocolToken);  }  packet=packet.concat(Settings.sSenderSplitMultipleToken);  send(packet);}  }
class C{  @Override protected void flowThrough(FlowSet in,Unit node,FlowSet out){  kill(in,node,out);  gen(out,node);}  }
class C{  public byte[] readBytes(int position,int num){  if (Page.pageSize < position + num) {    throw new PageException("readBytes is out of bounds");  }  byte[] data=new byte[num];  readBytes(position,num,data);  return data;}  }
class C{  public VideoGetCatalogSectionQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public boolean loggedIn(){  return this.loggedIn;}  }
class C{  public static byte[] pairHashcodeToBytes(int pairHashcode){  return new byte[]{(byte)(pairHashcode >> 8),(byte)pairHashcode};}  }
class C{  private static boolean isDebugEnabled(){  try {    String val=SecuritySupport.getSystemProperty("xerces.debug");    return (val != null && (!"false".equals(val)));  } catch (  SecurityException se) {  }  return false;}  }
class C{  protected GenericEntity(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Protect_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200395,skillname);}  }
class C{  public void updateConfig(String serviceURL,ClientConfiguration newConfig){  this.serviceURL=serviceURL;  this.clientConfig=newConfig;}  }
class C{  protected Set<D> computeCallToReturnFlowFunction(FlowFunction<D> callToReturnFlowFunction,D d1,D d2){  return callToReturnFlowFunction.computeTargets(d2);}  }
class C{  protected void propagateResults(Map<Local,Constant> localToConstant){  Chain<Unit> units=sb.getUnits();  Collection<Local> locals=sb.getLocals();  ShimpleLocalDefs localDefs=new ShimpleLocalDefs(sb);  ShimpleLocalUses localUses=new ShimpleLocalUses(sb);  Iterator<Local> localsIt=locals.iterator();  while (localsIt.hasNext()) {    Local local=localsIt.next();    Constant constant=localToConstant.get(local);    if (constant instanceof MetaConstant)     continue;{      DefinitionStmt stmt=(DefinitionStmt)localDefs.getDefsOf(local).get(0);      ValueBox defSrcBox=stmt.getRightOpBox();      Value defSrc=defSrcBox.getValue();      if (defSrcBox.canContainValue(constant)) {        defSrcBox.setValue(constant);        if (defSrc instanceof UnitBoxOwner)         ((UnitBoxOwner)defSrc).clearUnitBoxes();      } else       if (debug)       G.v().out.println("Warning: Couldn't propagate constant " + constant + " to box "+ defSrcBox.getValue()+ " in unit "+ stmt);    }{      Iterator usesIt=localUses.getUsesOf(local).iterator();      while (usesIt.hasNext()) {        UnitValueBoxPair pair=(UnitValueBoxPair)usesIt.next();        ValueBox useBox=pair.getValueBox();        if (useBox.canContainValue(constant))         useBox.setValue(constant); else         if (debug)         G.v().out.println("Warning: Couldn't propagate constant " + constant + " to box "+ useBox.getValue()+ " in unit "+ pair.getUnit());      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stun_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200912,skilltarget);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set show-unaligned=");  boolean value=np.getBoolean();  np.matchIgnoreCase(";");  AlignmentViewer viewer=(AlignmentViewer)getViewer();  viewer.getAlignmentViewerPanel().getAlignmentPanel().setShowUnalignedChars(value);}  }
class C{  public WallGetQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  public void sort(){  for (  VarNode v : pag.getVarNodeNumberer()) {    dfsVisit(v);  }  visited=null;}  }
class C{  @Override public String put(K key,String value){  final String existing=super.get(key);  value=existing != null ? existing + value : value;  super.put(key,value);  return existing;}  }
class C{  public BackgroundScriptProperties(final String script,final boolean autoStart,final boolean repeat){  this.script=new SimpleStringProperty(script);  this.autoStart=new SimpleBooleanProperty(autoStart);  this.repeat=new SimpleBooleanProperty(repeat);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public boolean geom_pta(){  return soot.PhaseOptions.getBoolean(options,"geom-pta");}  }
class C{  public static boolean isFullScreen(){  return isFullScreen;}  }
class C{  public Well19937a(int seed){  super(K,seed);}  }
class C{  public static StringBuilder makeWhereStringFromFields(StringBuilder sb,List<ModelField> modelFields,Map<String,Object> fields,String operator,List<EntityConditionParam> entityConditionParams){  if (modelFields.size() < 1) {    return sb;  }  Iterator<ModelField> iter=modelFields.iterator();  while (iter.hasNext()) {    Object item=iter.next();    Object name=null;    ModelField modelField=null;    if (item instanceof ModelField) {      modelField=(ModelField)item;      sb.append(modelField.getColValue());      name=modelField.getName();    } else {      sb.append(item);      name=item;    }    Object fieldValue=fields.get(name);    if (fieldValue != null && fieldValue != GenericEntity.NULL_FIELD) {      sb.append('=');      addValue(sb,modelField,fieldValue,entityConditionParams);    } else {      sb.append(" IS NULL");    }    if (iter.hasNext()) {      sb.append(' ');      sb.append(operator);      sb.append(' ');    }  }  return sb;}  }
class C{  protected static double kernelLength2bandwidth(int kernelLength){  return (double)4 / kernelLength;}  }
class C{  public static void writeObjectToFile(String path,Object toWrite,SparkContext sc) throws IOException {  FileSystem fileSystem=FileSystem.get(sc.hadoopConfiguration());  try (BufferedOutputStream bos=new BufferedOutputStream(fileSystem.create(new Path(path)))){    ObjectOutputStream oos=new ObjectOutputStream(bos);    oos.writeObject(toWrite);  } }  }
class C{  public static void refreshAllWidgets(Context context){  context.sendBroadcast(new Intent(getBookmarkAppWidgetUpdateAction(context),null,context,BookmarkThumbnailWidgetProvider.class));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SwitchHPMP_Instant_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200887,skillcaster,skillname);}  }
class C{  public String toString(){  String sRes="[";  Iterator iIter=iterator();  while (iIter.hasNext()) {    Object oNext=iIter.next();    sRes+=oNext.toString();    if (iIter.hasNext())     sRes+=",";  }  sRes+="]";  return sRes;}  }
class C{  public AbstractColumn(Class columnType,Object defaultValue){  m_columnType=columnType;  DataParser p=ParserFactory.getDefaultFactory().getParser(columnType);  m_parser=(p == null ? new ObjectParser() : p);  setDefaultValue(defaultValue);  m_readOnly=false;  m_listeners=new CopyOnWriteArrayList();}  }
class C{  @Override public void write(String str) throws IOException {  try {    int len=0;    if (str != null) {      len=str.length();    }    beforeWrite(len);    out.write(str);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public ActionList(long duration,long stepTime){  super(duration,stepTime);}  }
class C{  private boolean addViewFromPreviousActivity(){  if (mCurrentContentView.getChildCount() == 0) {    mPreviousActivity=null;    mPreviousContentView=null;    return false;  }  SwipeBackApplication application=(SwipeBackApplication)mCurrentWindow.getContext().getApplicationContext();  mPreviousActivity=application.getActivityLifecycleHelper().getPreActivity();  if (mPreviousActivity == null) {    mPreviousActivity=null;    mPreviousContentView=null;    return false;  }  ViewGroup previousActivityContainer=getContentView(mPreviousActivity.getWindow());  if (previousActivityContainer == null || previousActivityContainer.getChildCount() == 0) {    mPreviousActivity=null;    mPreviousContentView=null;    return false;  }  mPreviousContentView=(ViewGroup)previousActivityContainer.getChildAt(0);  previousActivityContainer.removeView(mPreviousContentView);  mCurrentContentView.addView(mPreviousContentView,0);  return true;}  }
class C{  private void updateSymbol(){  if (!Controller.getInstance().isPopulating()) {    if (parentObj != null) {      parentObj.ttfValueUpdated();    }  }}  }
class C{  public static Map<String,Object> updatePassword(DispatchContext ctx,Map<String,?> context){  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue loggedInUserLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"loginevents.password_was_changed_with_success",locale));  if (!AuthHelper.authenticatorsLoaded()) {    AuthHelper.loadAuthenticators(ctx.getDispatcher());  }  boolean useEncryption="true".equals(EntityUtilProperties.getPropertyValue("security.properties","password.encrypt",delegator));  boolean adminUser=false;  String userLoginId=(String)context.get("userLoginId");  String errMsg=null;  if (UtilValidate.isEmpty(userLoginId)) {    userLoginId=loggedInUserLogin.getString("userLoginId");  }  if (!security.hasEntityPermission("PARTYMGR","_UPDATE",loggedInUserLogin)) {    if (!userLoginId.equals(loggedInUserLogin.getString("userLoginId"))) {      errMsg=UtilProperties.getMessage(resource,"loginservices.not_have_permission_update_password_for_user_login",locale);      return ServiceUtil.returnError(errMsg);    }  } else {    adminUser=true;  }  String currentPassword=(String)context.get("currentPassword");  String newPassword=(String)context.get("newPassword");  String newPasswordVerify=(String)context.get("newPasswordVerify");  String passwordHint=(String)context.get("passwordHint");  GenericValue userLoginToUpdate=null;  try {    userLoginToUpdate=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userLoginId).queryOne();  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_change_password_read_failure",messageMap,locale);    return ServiceUtil.returnError(errMsg);  }  if (userLoginToUpdate == null) {    boolean authenticated=false;    try {      authenticated=AuthHelper.authenticate(userLoginId,currentPassword,true);    } catch (    AuthenticatorException e) {      Debug.logWarning(e,e.getMessage(),module);    }    if (authenticated) {      try {        AuthHelper.updatePassword(userLoginId,currentPassword,newPassword);      } catch (      AuthenticatorException e) {        Debug.logError(e,e.getMessage(),module);        Map<String,String> messageMap=UtilMisc.toMap("userLoginId",userLoginId);        errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_change_password_userlogin_with_id_not_exist",messageMap,locale);        return ServiceUtil.returnError(errMsg);      }      result.put("updatedUserLogin",userLoginToUpdate);      return result;    } else {      Map<String,String> messageMap=UtilMisc.toMap("userLoginId",userLoginId);      errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_change_password_userlogin_with_id_not_exist",messageMap,locale);      return ServiceUtil.returnError(errMsg);    }  }  if ("true".equals(EntityUtilProperties.getPropertyValue("security.properties","password.lowercase",delegator))) {    currentPassword=currentPassword.toLowerCase();    newPassword=newPassword.toLowerCase();    newPasswordVerify=newPasswordVerify.toLowerCase();  }  List<String> errorMessageList=new LinkedList<String>();  if (newPassword != null) {    checkNewPassword(userLoginToUpdate,currentPassword,newPassword,newPasswordVerify,passwordHint,errorMessageList,adminUser,locale);  }  if (errorMessageList.size() > 0) {    return ServiceUtil.returnError(errorMessageList);  }  String externalAuthId=userLoginToUpdate.getString("externalAuthId");  if (UtilValidate.isNotEmpty(externalAuthId)) {    try {      AuthHelper.updatePassword(externalAuthId,currentPassword,newPassword);    } catch (    AuthenticatorException e) {      Debug.logError(e,e.getMessage(),module);      Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());      errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_change_password_write_failure",messageMap,locale);      return ServiceUtil.returnError(errMsg);    }  } else {    userLoginToUpdate.set("currentPassword",useEncryption ? HashCrypt.cryptUTF8(getHashType(),null,newPassword) : newPassword,false);    userLoginToUpdate.set("passwordHint",passwordHint,false);    userLoginToUpdate.set("requirePasswordChange","N");    try {      userLoginToUpdate.store();      createUserLoginPasswordHistory(delegator,userLoginId,newPassword);    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());      errMsg=UtilProperties.getMessage(resource,"loginservices.could_not_change_password_write_failure",messageMap,locale);      return ServiceUtil.returnError(errMsg);    }  }  result.put("updatedUserLogin",userLoginToUpdate);  return result;}  }
class C{  public void stopAnimation(){  if (ps != null) {    ps.stopEmitting();    isPlaying=false;  }}  }
class C{  public static boolean isJavaScriptEnabled(HttpServletRequest request){  HttpSession session=request.getSession();  Boolean javaScriptEnabled=(Boolean)session.getAttribute("javaScriptEnabled");  if (javaScriptEnabled != null) {    return javaScriptEnabled.booleanValue();  }  return false;}  }
class C{  public Allophone(Element a,String[] featureNames){  name=a.getAttribute("ph");  String vc;  String isTone;  if (name.equals(""))   throw new IllegalArgumentException("Element must have a 'ph' attribute");  if (a.getTagName().equals("consonant")) {    vc="-";    isTone="-";  } else   if (a.getTagName().equals("vowel")) {    vc="+";    isTone="-";  } else   if (a.getTagName().equals("silence")) {    vc="0";    isTone="-";  } else   if (a.getTagName().equals("tone")) {    vc="0";    isTone="+";  } else {    throw new IllegalArgumentException("Element must be one of <vowel>, <consonant> and <silence>, but is <" + a.getTagName() + ">");  }  Map<String,String> feats=new HashMap<String,String>();  feats.put("vc",vc);  feats.put("isTone",isTone);  for (  String f : featureNames) {    feats.put(f,getAttribute(a,f));  }  this.features=Collections.unmodifiableMap(feats);}  }
class C{  Rectangle embedPhylogramRec(Node v,Edge e,int level){  Rectangle bbox=null;  for (Edge f=v.getFirstAdjacentEdge(); f != null; f=v.getNextAdjacentEdge(f)) {    if (f != e) {      Rectangle subBox=embedPhylogramRec(f.getOpposite(v),f,level + 1);      if (bbox == null)       bbox=subBox; else       bbox.add(subBox);    }  }  Point location;  if (bbox == null) {    location=new Point(XSTEP * level,YSTEP * taxonLevel++);    bbox=new Rectangle(location.x,location.y,HLEAFBOX,YSTEP);    setLocation(v,location);  } else {    location=new Point(XSTEP * level,bbox.y + (bbox.height - YSTEP) / 2);    bbox.add(location);    setLocation(v,location);  }  int num;  if (nodeDrawer.getScaleBy() == NodeDrawer.ScaleBy.Summarized || (nodeDrawer.getScaleBy() == NodeDrawer.ScaleBy.Assigned && v.getOutDegree() == 0))   num=(super.getNodeData(v)).getCountSummarized(); else   if (nodeDrawer.getScaleBy() == NodeDrawer.ScaleBy.Assigned)   num=(super.getNodeData(v)).getCountAssigned(); else   num=0;  if (num > 0) {    int radius=(int)Math.max(1.0,nodeDrawer.getScaledSize(num));    this.setHeight(v,2 * radius);    this.setWidth(v,2 * radius);  } else {    this.setWidth(v,1);    this.setHeight(v,1);  }  for (Edge f=v.getFirstAdjacentEdge(); f != null; f=v.getNextAdjacentEdge(f)) {    if (f != e) {      Node w=f.getOpposite(v);      if (getLocation(w) != null && getLocation(v).getY() != getLocation(w).getY()) {        List<Point2D> list=new LinkedList<>();        list.add(new Point2D.Double(getLocation(v).getX(),getLocation(w).getY()));        setInternalPoints(f,list);      }    }  }  node2BoundingBox.set(v,(Rectangle)bbox.clone());  return bbox;}  }
class C{  @Override public void onUpdateDataTag(final ISourceDataTag sourceDataTag,final ISourceDataTag oldSourceDataTag,final ChangeReport changeReport){  if (hasDataTypeChanged(sourceDataTag,oldSourceDataTag)) {    changeReport.appendError("Data type changes might affect " + "the equipment. But there is no implementation. That " + "means you have to restart the DAQ.");    changeReport.setState(CHANGE_STATE.REBOOT);  }  if (hasTimeDeadbandChanged(sourceDataTag,oldSourceDataTag)) {    changeReport.appendError("Timedeadband changes might affect " + "the equipment. But there is no implementation. That " + "means you have to restart the DAQ.");    changeReport.setState(CHANGE_STATE.REBOOT);  }  if (hasEquipmentValueDeadbandChanged(sourceDataTag,oldSourceDataTag)) {    changeReport.appendError("Value deadband changes might affect " + "the equipment. But there is no implementation. That " + "means you have to restart the DAQ.");    changeReport.setState(CHANGE_STATE.REBOOT);  }  if (hasValueDeadbandTypeChanged(sourceDataTag,oldSourceDataTag)) {    changeReport.appendError("Value deadband type changes might affect " + "the equipment. But there is no implementation. That " + "means you have to restart the DAQ.");    changeReport.setState(CHANGE_STATE.REBOOT);  }  if (hasHardwareAddressChanged(sourceDataTag.getHardwareAddress(),oldSourceDataTag.getHardwareAddress())) {    changeReport.appendError("Changes to the hardware address might affect " + "the equipment. But there is no implementation. That " + "means you have to restart the DAQ.");    changeReport.setState(CHANGE_STATE.REBOOT);  }  if (!changeReport.getState().equals(CHANGE_STATE.REBOOT)) {    changeReport.setState(CHANGE_STATE.SUCCESS);  }}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  @Override public RemoteConnection connect() throws RemoteException {  return new RemoteConnectionImpl();}  }
class C{  public static InputStream toInputStream(CharSequence input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  protected PhotosPutTagQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  public static final void drawBounds(GL2 gl,Bounds b){  if (b instanceof AxisAlignedBounds) {    AxisAlignedBounds aab=(AxisAlignedBounds)b;    double w=aab.getWidth();    double h=aab.getHeight();    Vector2 c=aab.getTranslation();    RenderUtilities.drawRectangleFromCenter(gl,c.x,c.y,w,h,false);  } else {  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Protect_INTERVAL_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200549,skilltarget,num0,skillname);}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  private void startAnimation(long time,OverviewAnimationType type){  startAnimation(time,type,TabModel.INVALID_TAB_INDEX,false);}  }
class C{  public void dataSourceLoaded(DataSourceInterface dataSource){  dataSourceAttributePanel.dataSourceLoaded(dataSource);}  }
class C{  public static <K,V>LinkedHashMap<K,V> linkedHashMap(int initialCapacity,float loadFactor){  return new LinkedHashMap<K,V>(initialCapacity);}  }
class C{  static boolean lessThanUnsigned(long x1,long x2){  return (x1 + Long.MIN_VALUE) < (x2 + Long.MIN_VALUE);}  }
class C{  private void resetSearchBarTermOpacity(){  mSearchBarContextOpacity=0.f;  mSearchBarTermOpacity=1.f;}  }
class C{  public static IRemoteService createService(String remoteURL,String user,String password) throws IOException {  final IRemoteService clientNode;  if (remoteURL.startsWith(LOCAL)) {    clientNode=new LocalService(remoteURL.replaceAll(LOCAL,""));  } else   clientNode=new RemoteService(remoteURL,user,password);  if (url2node.containsKey(clientNode.getShortName()))   System.err.println("Warning: node already exists: " + clientNode.getShortName());  url2node.put(clientNode.getShortName(),clientNode);  if (ProgramProperties.get("SaveRemoteCrendentials",true))   saveCredentials(clientNode.getShortName(),user,password);  return clientNode;}  }
class C{  private boolean mouseFurtherThan(final double delta){  if (getMousePositionOnShown() == null) {    return false;  }  return (Math.abs(getMousePositionOnShown().getSceneX() - getCurrentMousePosition().getSceneX()) > delta || Math.abs(getMousePositionOnShown().getSceneY() - getCurrentMousePosition().getSceneY()) > delta);}  }
class C{  protected static Map.Entry<String,String> parseMapping(String mapping,String name){  String[] keyValue=mapping.split("=");  if (keyValue.length != 2) {    throw new ConfigException("Invalid mapping for " + name + " property: '"+ mapping+ "' (must follow format '<key>=<value>')");  }  String key=keyValue[0].trim();  if (key.isEmpty()) {    throw new ConfigException("Empty key found in mapping '" + mapping + "' for "+ name+ " property");  }  String value=keyValue[1].trim();  if (value.isEmpty()) {    throw new ConfigException("Empty value found in mapping '" + mapping + "' for "+ name+ " property");  }  return new AbstractMap.SimpleEntry<>(key,value);}  }
class C{  public String rawString(){  return rawString;}  }
class C{  @RequiresPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) public static boolean makeDirs(File file){  return file.mkdirs();}  }
class C{  public boolean hasEventEndDate(){  return eventEndDate != null;}  }
class C{  private void formWindowClosed(java.awt.event.WindowEvent evt){  saveSettings();  System.exit(0);}  }
class C{  public void addEntityName(String name){  if (name != null) {    this.entityNameSet.add(name);  }}  }
class C{  @Override public int readByte(){  bytesRead++;  return ((int)arr[pos++]) & 0xFF;}  }
class C{  public Matrix plusEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] + B.A[i][j];    }  }  return this;}  }
class C{  private static void removeNullFields(Object object) throws JSONException {  if (object instanceof JSONArray) {    JSONArray array=(JSONArray)object;    for (int i=0; i < array.length(); ++i)     removeNullFields(array.get(i));  } else   if (object instanceof JSONObject) {    JSONObject json=(JSONObject)object;    JSONArray names=json.names();    if (names == null)     return;    for (int i=0; i < names.length(); ++i) {      String key=names.getString(i);      if (json.isNull(key)) {        json.remove(key);      } else {        removeNullFields(json.get(key));      }    }  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public PreIncExpr fullCopy(){  PreIncExpr tree=(PreIncExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public KeywordSearchTupleSet(LuceneSearcher searcher){  m_lucene=searcher;}  }
class C{  public static void scriptAttributes(SimpleMethod method,Element element,String... attributeNames) throws ValidationException {  for (  String name : attributeNames) {    String attributeValue=element.getAttribute(name).trim();    if (attributeValue.length() > 0) {      if (attributeValue.startsWith("${") && attributeValue.endsWith("}")) {        handleError("Script attribute \"" + name + "\" enclosed in \"${}\" (remove enclosing ${}).",method,element);      }      boolean scriptFound=false;      for (      String scriptName : ScriptUtil.SCRIPT_NAMES) {        String scriptPrefix=scriptName.concat(":");        if (attributeValue.contains(scriptPrefix)) {          scriptFound=true;          break;        }      }      if (!scriptFound) {        handleError("Script attribute \"" + name + "\" does not contain a script.",method,element);      }    }  }}  }
class C{  @Override public void onStart(){  super.onStart();  setData();}  }
class C{  public ComponentAnnotationMissingException(String message){  super(message);}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  protected GroupsGetInvitesQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (!(server instanceof RemoteMethodControl)) {    throw new InvalidObjectException("TxnMgrAdminProxy.readObject failure - server " + "does not implement RemoteMethodControl");  }}  }
class C{  public Dependencies resolve(SootClass sc){  if (Options.v().verbose())   G.v().out.println("resolving " + className + " from file "+ path.getPath());  return DexResolver.v().resolveFromFile(path,className,sc);}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    if (get(i) == MISSING_VALUE) {      count++;    }  }  return count;}  }
class C{  private void rescale(final double[] y1,final double[] y2,final double[] scale){  if (vecAbsoluteTolerance == null) {    for (int i=0; i < scale.length; ++i) {      final double yi=FastMath.max(FastMath.abs(y1[i]),FastMath.abs(y2[i]));      scale[i]=scalAbsoluteTolerance + scalRelativeTolerance * yi;    }  } else {    for (int i=0; i < scale.length; ++i) {      final double yi=FastMath.max(FastMath.abs(y1[i]),FastMath.abs(y2[i]));      scale[i]=vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * yi;    }  }}  }
class C{  public void Done(){  buffer=null;  bufline=null;  bufcolumn=null;}  }
class C{  protected void updateDegrees(int e,int s,int t,int incr){  int od=m_links.getInt(s,OUTDEGREE);  int id=m_links.getInt(t,INDEGREE);  if (incr > 0) {    addLink(OUTLINKS,od,s,e);    addLink(INLINKS,id,t,e);  } else   if (incr < 0) {    remLink(OUTLINKS,od,s,e);    remLink(INLINKS,id,t,e);  }  m_links.setInt(s,OUTDEGREE,od + incr);  m_links.setInt(t,INDEGREE,id + incr);  m_spanning=null;}  }
class C{  private static String massageURI(String uri){  uri=uri.trim();  int protocolEnd=uri.indexOf(':');  if (protocolEnd < 0 || isColonFollowedByPortNumber(uri,protocolEnd)) {    uri="http://" + uri;  }  return uri;}  }
class C{  @Override public synchronized void mark(int idx) throws IOException {  try {    in.mark(idx);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public final void updateNumberOfProcessedLines() throws DataFallbackException {  openCounterDataOutputStream();  try {    this.getDOutput().write(new Integer(getReadBackLines()).toString());    getDOutput().newLine();    if (LOG.isDebugEnabled())     LOG.debug("removeLines() - The counter file has been updated with the value " + getReadBackLines());  } catch (  IOException e) {    throw new DataFallbackException(e.getMessage());  }  closeCounterDataOutputStream();}  }
class C{  private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {  ois.defaultReadObject();  MatrixUtils.deserializeRealMatrix(this,"tableau",ois);}  }
class C{  public boolean isRuleTypeAllowed(RuleDefinition rule){  return allowedRuleClasses == null || allowedRuleClasses.contains(rule.name);}  }
class C{  public ExpandingItem createNewItem(int layoutId){  LayoutInflater inflater=LayoutInflater.from(getContext());  ViewGroup item=(ViewGroup)inflater.inflate(layoutId,this,false);  if (item instanceof ExpandingItem) {    ExpandingItem expandingItem=(ExpandingItem)item;    expandingItem.setParent(this);    addItem(expandingItem);    return expandingItem;  }  throw new RuntimeException("The layout id not an instance of com.diegodobelo.expandinganimlib.ExpandingItem");}  }
class C{  @NotNull public ImageOverlayBuilder toDisk(@NotNull File file){  try {    ImageIO.write(copy(bufferedImage,BufferedImage.TYPE_INT_ARGB),"png",file);  } catch (  IOException e) {    throw new CognitiveException("Could not write to disk",e);  }  return this;}  }
class C{  public void screenshot(String message){  currentTest.get().screenshot(message);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public int readBigUleb128(){  if (this.dexBuf.getReader() == null) {    int end=offset;    int currentByteValue;    int result;    byte[] buf=dexBuf.buf;    result=buf[end++] & 0xff;    if (result > 0x7f) {      currentByteValue=buf[end++] & 0xff;      result=(result & 0x7f) | ((currentByteValue & 0x7f) << 7);      if (currentByteValue > 0x7f) {        currentByteValue=buf[end++] & 0xff;        result|=(currentByteValue & 0x7f) << 14;        if (currentByteValue > 0x7f) {          currentByteValue=buf[end++] & 0xff;          result|=(currentByteValue & 0x7f) << 21;          if (currentByteValue > 0x7f) {            currentByteValue=buf[end++];            if (currentByteValue < 0) {              throw new ExceptionWithContext("Invalid uleb128 integer encountered at offset 0x%x",offset);            }            result|=currentByteValue << 28;          }        }      }    }    offset=end;    return result;  } else {    int end=offset;    int currentByteValue;    int result;    result=dexBuf.getReader().readBytes(dexBuf.getBaseAddr() + end,1)[0] & 0xff;    end++;    if (result > 0x7f) {      currentByteValue=dexBuf.getReader().readBytes(dexBuf.getBaseAddr() + end,1)[0] & 0xff;      end++;      result=(result & 0x7f) | ((currentByteValue & 0x7f) << 7);      if (currentByteValue > 0x7f) {        currentByteValue=dexBuf.getReader().readBytes(dexBuf.getBaseAddr() + end,1)[0] & 0xff;        end++;        result|=(currentByteValue & 0x7f) << 14;        if (currentByteValue > 0x7f) {          currentByteValue=dexBuf.getReader().readBytes(dexBuf.getBaseAddr() + end,1)[0] & 0xff;          end++;          result|=(currentByteValue & 0x7f) << 21;          if (currentByteValue > 0x7f) {            currentByteValue=dexBuf.getReader().readBytes(dexBuf.getBaseAddr() + end,1)[0];            end++;            if (currentByteValue < 0) {              throw new ExceptionWithContext("Invalid uleb128 integer encountered at offset 0x%x",offset);            }            result|=currentByteValue << 28;          }        }      }    }    offset=end;    return result;  }}  }
class C{  @Override public double[] makeLogDensityTestValues(){  return new double[]{Double.NEGATIVE_INFINITY,-5.52942908751142,-2.31055326264322,-0.924258901523332,-0.924258901523332,-2.31055326264322,-5.52942908751142,Double.NEGATIVE_INFINITY};}  }
class C{  public static byte[] decode(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  public double stdDev(FloatColumn values){  float stdDev=Float.NaN;  int N=values.size();  if (N > 0) {    if (N > 1) {      stdDev=(float)FastMath.sqrt(variance.reduce(values));    } else {      stdDev=0.0f;    }  }  return stdDev;}  }
class C{  public int addEdge(int s,int t){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  public static StringBuilder durationConfigString(Duration duration){  Duration remainder=duration;  long days=remainder.getStandardDays();  remainder=remainder.minus(Duration.standardDays(days));  long hours=remainder.getStandardHours();  remainder=remainder.minus(Duration.standardHours(hours));  long minutes=remainder.getStandardMinutes();  remainder=remainder.minus(Duration.standardMinutes(minutes));  long seconds=remainder.getStandardSeconds();  remainder=remainder.minus(Duration.standardSeconds(seconds));  if (!remainder.isEqual(Duration.ZERO))   Logger.getLogger(ConfigSupport.class.getName()).log(Level.WARNING,"Duration is more precise than configuration will handle: {0}, dropping remainder: {1}",new Object[]{duration,remainder});  StringBuilder result=new StringBuilder();  if (days != 0) {    if (result.length() != 0)     result.append(' ');    result.append(days).append('d');  }  if (hours != 0) {    if (result.length() != 0)     result.append(' ');    result.append(hours).append('h');  }  if (minutes != 0) {    if (result.length() != 0)     result.append(' ');    result.append(minutes).append('m');  }  if (result.length() == 0 || seconds != 0) {    if (result.length() != 0)     result.append(' ');    result.append(seconds).append('s');  }  return result;}  }
class C{  public static HttpResponse execute(HttpMethod method,String targetUrl,String body,Map<String,String> headers,SSLSocketFactory sslSocketFactory) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException, KeyManagementException {  URL url=new URL(targetUrl);  HttpURLConnection conn=(HttpURLConnection)url.openConnection();  setRequestMethodUsingWorkaroundForJREBug(conn,method.name());  conn.addRequestProperty("Content-type",Operation.MEDIA_TYPE_APPLICATION_JSON);  conn.addRequestProperty("Accept",Operation.MEDIA_TYPE_APPLICATION_JSON);  Operation op=new Operation().addPragmaDirective(Operation.PRAGMA_DIRECTIVE_FORCE_INDEX_UPDATE);  conn.addRequestProperty(Operation.PRAGMA_HEADER,op.getRequestHeader(Operation.PRAGMA_HEADER));  for (  Entry<String,String> entry : headers.entrySet()) {    conn.addRequestProperty(entry.getKey(),entry.getValue());  }  if (sslSocketFactory != null && UriUtils.HTTPS_SCHEME.equals(url.getProtocol())) {    HttpsURLConnection httpsConn=(HttpsURLConnection)conn;    httpsConn.setHostnameVerifier(ALLOW_ALL_HOSTNAME_VERIFIER);    httpsConn.setSSLSocketFactory(sslSocketFactory);  } else   if (UriUtils.HTTPS_SCHEME.equals(url.getProtocol())) {    throw new IllegalArgumentException("Https protocol not supported without sslSocketFactory");  }  if (body != null) {    conn.setDoOutput(true);    DataOutputStream dataOut=new DataOutputStream(conn.getOutputStream());    dataOut.writeBytes(body);    dataOut.flush();    dataOut.close();  }  BufferedReader in=null;  try {    try {      in=new BufferedReader(new InputStreamReader(conn.getInputStream(),Utils.CHARSET));    } catch (    Throwable e) {      InputStream errorStream=conn.getErrorStream();      if (errorStream != null) {        in=new BufferedReader(new InputStreamReader(errorStream,Utils.CHARSET));      }    }    StringBuilder stringResponseBuilder=new StringBuilder();    HttpResponse httpResponse=new HttpResponse();    httpResponse.statusCode=conn.getResponseCode();    if (in == null) {      return validateResponse(httpResponse);    }    do {      String line=in.readLine();      if (line == null) {        break;      }      stringResponseBuilder.append(line);    } while (true);    httpResponse.responseBody=stringResponseBuilder.toString();    httpResponse.headers=conn.getHeaderFields();    return validateResponse(httpResponse);  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("select top=");  int number=np.getInt(0,Integer.MAX_VALUE);  np.matchIgnoreCase(";");  final ChartViewer viewer=(ChartViewer)getViewer();  final LabelsJList list=viewer.getActiveLabelsJList();  list.selectTop(number);  viewer.repaint();}  }
class C{  public void writeContigs(Writer w,ProgressListener progress) throws CanceledException, IOException {  progress.setSubtask("Writing contigs");  progress.setMaximum(contigs.size());  progress.setProgress(0);  for (  Pair<String,String> pair : contigs) {    w.write(pair.getFirst().trim());    w.write("\n");    w.write(pair.getSecond().trim());    w.write("\n");    progress.incrementProgress();  }  w.flush();  if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();}  }
class C{  public PhotosGetQuery feed(Integer value){  return unsafeParam("feed",value);}  }
class C{  @Override public void cancel(){  bobcatWait.withTimeout(Timeouts.BIG).until(ExpectedConditions.visibilityOf(cancelButton));  bobcatWait.withTimeout(Timeouts.BIG).until(WindowActions.clickButton(cancelButton));}  }
class C{  public static int[] toLine(IBuffer buffer,int offset){  IDocument document=toDocument(buffer);  try {    int line=document.getLineOfOffset(offset);    int column=offset - document.getLineOffset(line);    return new int[]{line,column};  } catch (  BadLocationException e) {    e.printStackTrace();  }  return null;}  }
class C{  public LabeledBorder(JComponent label){  this(null,label);}  }
class C{  public BoundingVolume clone(BoundingVolume store){  if (store != null && store.getType() == Type.Sphere) {    BoundingSphere rVal=(BoundingSphere)store;    if (null == rVal.center) {      rVal.center=new Vector3f();    }    rVal.center.set(center);    rVal.radius=radius;    rVal.checkPlane=checkPlane;    return rVal;  }  return new BoundingSphere(radius,(center != null ? (Vector3f)center.clone() : null));}  }
class C{  private void failPendingMessages(ClientCnx cnx,PulsarClientException ex){  if (cnx == null) {    final AtomicInteger releaseCount=new AtomicInteger();    pendingMessages.forEach(null);    semaphore.release(releaseCount.get());    pendingMessages.clear();    pendingCallbacks.clear();    if (isBatchMessagingEnabled()) {      failPendingBatchMessages(ex);    }  } else {    cnx.ctx().channel().eventLoop().execute(null);  }}  }
class C{  private static ValueAnimator loadAnimator(Context c,Resources res,Resources.Theme theme,AttributeSet attrs,ValueAnimator anim,float pathErrorScale) throws Resources.NotFoundException {  TypedArray arrayAnimator=null;  TypedArray arrayObjectAnimator=null;  if (theme != null) {    arrayAnimator=theme.obtainStyledAttributes(attrs,R.styleable.Animator,0,0);  } else {    arrayAnimator=res.obtainAttributes(attrs,R.styleable.Animator);  }  if (anim != null) {    if (theme != null) {      arrayObjectAnimator=theme.obtainStyledAttributes(attrs,R.styleable.PropertyAnimator,0,0);    } else {      arrayObjectAnimator=res.obtainAttributes(attrs,R.styleable.PropertyAnimator);    }  }  if (anim == null) {    anim=new ValueAnimator();  }  parseAnimatorFromTypeArray(anim,arrayAnimator,arrayObjectAnimator);  final int resId=arrayAnimator.getResourceId(R.styleable.Animator_android_interpolator,0);  if (resId > 0) {    anim.setInterpolator(AnimationUtils.loadInterpolator(c,resId));  }  arrayAnimator.recycle();  if (arrayObjectAnimator != null) {    arrayObjectAnimator.recycle();  }  return anim;}  }
class C{  public static void moveFile(String oldPath,String newPath){  File fileOld=new File(oldPath);  if (fileOld.exists()) {    File fileNew=new File(newPath);    fileOld.renameTo(fileNew);  }}  }
class C{  public void generateEvent(Long repositoryId){  processor.onNext(repositoryId);}  }
class C{  private soot.Value createCondOr(polyglot.ast.Binary binary){  soot.Local retLocal=lg.generateLocal(soot.BooleanType.v());  soot.jimple.Stmt endNoop=soot.jimple.Jimple.v().newNopStmt();  soot.jimple.Stmt noop1=soot.jimple.Jimple.v().newNopStmt();  soot.jimple.Stmt noop2=soot.jimple.Jimple.v().newNopStmt();  soot.Value lVal=base().createAggressiveExpr(binary.left(),false,false);  boolean leftNeedIf=needSootIf(lVal);  if (!(lVal instanceof soot.jimple.ConditionExpr)) {    lVal=soot.jimple.Jimple.v().newNeExpr(lVal,soot.jimple.IntConstant.v(0));  } else {    lVal=handleDFLCond((soot.jimple.ConditionExpr)lVal);  }  if (leftNeedIf) {    soot.jimple.IfStmt ifLeft;    ifLeft=soot.jimple.Jimple.v().newIfStmt(lVal,noop1);    body.getUnits().add(ifLeft);    Util.addLnPosTags(ifLeft,binary.left().position());    Util.addLnPosTags(ifLeft.getConditionBox(),binary.left().position());  }  soot.Value rVal=base().createAggressiveExpr(binary.right(),false,false);  boolean rightNeedIf=needSootIf(rVal);  if (!(rVal instanceof soot.jimple.ConditionExpr)) {    rVal=soot.jimple.Jimple.v().newEqExpr(rVal,soot.jimple.IntConstant.v(0));  } else {    if (inLeftOr == 0) {      rVal=reverseCondition((soot.jimple.ConditionExpr)rVal);    }    rVal=handleDFLCond((soot.jimple.ConditionExpr)rVal);  }  if (rightNeedIf) {    soot.jimple.IfStmt ifRight;    ifRight=soot.jimple.Jimple.v().newIfStmt(rVal,noop2);    body.getUnits().add(ifRight);    Util.addLnPosTags(ifRight,binary.right().position());    Util.addLnPosTags(ifRight.getConditionBox(),binary.right().position());  }  body.getUnits().add(noop1);  soot.jimple.Stmt assign2=soot.jimple.Jimple.v().newAssignStmt(retLocal,soot.jimple.IntConstant.v(1));  body.getUnits().add(assign2);  Util.addLnPosTags(assign2,binary.position());  soot.jimple.Stmt gotoEnd2=soot.jimple.Jimple.v().newGotoStmt(endNoop);  body.getUnits().add(gotoEnd2);  body.getUnits().add(noop2);  soot.jimple.Stmt assign3=soot.jimple.Jimple.v().newAssignStmt(retLocal,soot.jimple.IntConstant.v(0));  body.getUnits().add(assign3);  Util.addLnPosTags(assign3,binary.position());  body.getUnits().add(endNoop);  Util.addLnPosTags(assign2,binary.position());  Util.addLnPosTags(assign3,binary.position());  return retLocal;}  }
class C{  public UsersGetFollowersQuery(VkApiClient client){  super(client,"users.getFollowers",GetFollowersResponse.class);}  }
class C{  private void updateClusterCenters(){  int j=0;  final List<CentroidCluster<T>> newClusters=new ArrayList<CentroidCluster<T>>(k);  for (  final CentroidCluster<T> cluster : clusters) {    final Clusterable center=cluster.getCenter();    int i=0;    double[] arr=new double[center.getPoint().length];    double sum=0.0;    for (    final T point : points) {      final double u=FastMath.pow(membershipMatrix[i][j],fuzziness);      final double[] pointArr=point.getPoint();      for (int idx=0; idx < arr.length; idx++) {        arr[idx]+=u * pointArr[idx];      }      sum+=u;      i++;    }    MathArrays.scaleInPlace(1.0 / sum,arr);    newClusters.add(new CentroidCluster<T>(new DoublePoint(arr)));    j++;  }  clusters.clear();  clusters=newClusters;}  }
class C{  public PaginationException(ErrorCode errorCode,String detailMessage,Throwable cause){  super(errorCode,detailMessage,cause);}  }
class C{  public static boolean isWhitespace(String s){  if (isEmpty(s))   return true;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (whitespace.indexOf(c) == -1)     return false;  }  return true;}  }
class C{  public static boolean isLegal(boolean expression,String message){  if (!expression)   throw new IllegalArgumentException(message);  return expression;}  }
class C{  @Override public CompletableFuture<Void> delete(){  return delete(false);}  }
class C{  public SecureCheckTokenQuery checkToken(ServiceActor actor){  return new SecureCheckTokenQuery(getClient(),actor);}  }
class C{  public TransformerFactoryConfigurationError(){  super();  this.exception=null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_OPTION_INVALID_STANCE(String value0){  return new SM_SYSTEM_MESSAGE(1300466,value0);}  }
class C{  protected long rdbLoadMillisecondTime() throws IOException {  return in.readLong(8);}  }
class C{  public void ensureCapacity(int capacity){  if (capacity > _data.length) {    int newCap=Math.max(_data.length << 1,capacity);    int[] tmp=new int[newCap];    System.arraycopy(_data,0,tmp,0,_data.length);    _data=tmp;  }}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  PlatformLogicalVersion version=LRMIInvocationContext.getEndpointLogicalVersion();  readExternal(in,version);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_InteralSkill_A_TO_ME(String skillname,String skillcaster){  return new SM_SYSTEM_MESSAGE(1201272,skillname,skillcaster);}  }
class C{  public VideoAddQuery add(UserActor actor,int videoId,int ownerId){  return new VideoAddQuery(getClient(),actor,videoId,ownerId);}  }
class C{  public void saveModel(OutputStream out) throws IOException {  GZIPOutputStream zipout=new GZIPOutputStream(out);  DataOutputStream dataout=new DataOutputStream(zipout);  dataout.writeInt(numTopics);  dataout.writeInt(nwz.size());  dataout.writeDouble(alpha);  dataout.writeDouble(beta);  dataout.writeBoolean(locked);  for (  Entry<String,int[]> e : nwz.entrySet()) {    dataout.writeUTF(e.getKey());    int[] c=e.getValue();    for (int i=0; i < numTopics; i++) {      dataout.writeInt(c[i]);    }  }  dataout.writeInt(ntz.size());  dataout.writeDouble(eta);  for (  Entry<String,int[]> e : ntz.entrySet()) {    dataout.writeUTF(e.getKey());    int[] c=e.getValue();    for (int i=0; i < numTopics + 1; i++) {      dataout.writeInt(c[i]);    }  }  dataout.flush();  zipout.finish();}  }
class C{  @Override public void startElement(String name,AttributeList atts) throws SAXException {  allowXMLCatalogPI=false;  if (documentHandler != null) {    documentHandler.startElement(name,atts);  }}  }
class C{  public void revertToDefault(int row,String field){  int col=getColumnNumber(field);  row=getColumnRow(row,col);  getColumn(col).revertToDefault(row);}  }
class C{  public T walkInDefaultOrder(final FieldVectorPreservingVisitor<T> visitor,final int start,final int end) throws MathIllegalArgumentException {  checkIndices(start,end);  visitor.start(getDimension(),start,end);  for (int i=start; i <= end; i++) {    visitor.visit(i,getEntry(i));  }  return visitor.end();}  }
class C{  @Override public BrokerImpl newBrokerInstance(String user,String pass){  return new Broker();}  }
class C{  protected void processNameReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {  String name=getString(serialMessage,offset);  if (name == null) {    return;  }  this.name=name;  logger.debug("NODE {}: Node name: {}",getNode().getNodeId(),name);  ZWaveCommandClassValueEvent zEvent=new ZWaveCommandClassValueEvent(getNode().getNodeId(),endpoint,this.getCommandClass(),name,Type.NODENAME_NAME);  getController().notifyEventListeners(zEvent);}  }
class C{  public void startPause(){  if (mTimer.hasStarted()) {    if (mTimer.isRunning()) {      mTimer.pause();    } else {      mTimer.resume();    }  } else {    mTimer.start();  }  update();}  }
class C{  public static double gymOffense(final PokemonId pokemonId,final PokemonMove move1,final PokemonMove move2,final int attackIV){  final PokemonMeta meta=PokemonMetaRegistry.getMeta(pokemonId);  return Math.max(PokemonCalculationUtils.dpsForMove(pokemonId,move1,true) * WEAVE_LENGTH_SECONDS,PokemonCalculationUtils.weaveDps(pokemonId,move1,move2,0)) * (meta.getBaseAttack() + attackIV);}  }
class C{  @Override public void endElement(String uri,String localName,String qName) throws SAXException {}  }
class C{  public AemTags addTag(String tag) throws DeniedTagException {  input.click();  input.sendKeys(" ");  StringTokenizer tagElements=new StringTokenizer(tag,"/",true);  final int tagsCount=getTagCount();  while (tagElements.hasMoreTokens()) {    input.sendKeys(tagElements.nextToken());  }  waitUntilTagCreated(tagsCount);  AemTagItem item=getLastAddedTag();  if (item.isDenied()) {    throw new DeniedTagException();  }  return this;}  }
class C{  public View bindView(View convertView,ViewGroup parent,RecipientEntry entry,int position,AdapterType type,String constraint){  String displayName=entry.getDisplayName();  String destination=entry.getDestination();  boolean showImage=true;  CharSequence destinationType=getDestinationType(entry);  final View itemView=reuseOrInflateView(convertView,parent,type);  final ViewHolder viewHolder=new ViewHolder(itemView);switch (type) {case BASE_RECIPIENT:    if (TextUtils.isEmpty(displayName) || TextUtils.equals(displayName,destination)) {      displayName=destination;      if (entry.isFirstLevel()) {        destination=null;      }    }  if (!entry.isFirstLevel()) {    displayName=null;    showImage=false;  }break;case RECIPIENT_ALTERNATES:if (position != 0) {displayName=null;showImage=false;}break;case SINGLE_RECIPIENT:destination=Rfc822Tokenizer.tokenize(entry.getDestination())[0].getAddress();destinationType=null;}if (displayName == null && !showImage) {viewHolder.destinationView.setPadding(mContext.getResources().getDimensionPixelSize(R.dimen.padding_no_picture),0,0,0);} else {viewHolder.destinationView.setPadding(0,0,0,0);}bindTextToView(displayName,viewHolder.displayNameView);bindTextToView(destination,viewHolder.destinationView);bindTextToView("(" + destinationType + ")",viewHolder.destinationTypeView);bindIconToView(showImage,entry,viewHolder.imageView,type);return itemView;}  }
class C{  @Override public void resolve(AbsoluteTableIdentifier absoluteTableIdentifier) throws FilterUnsupportedException {  DimColumnResolvedFilterInfo dimColumnResolvedFilterInfo=new DimColumnResolvedFilterInfo();  if (!this.isExpressionResolve && exp instanceof BinaryConditionalExpression) {    BinaryConditionalExpression binaryConditionalExpression=(BinaryConditionalExpression)exp;    Expression left=binaryConditionalExpression.getLeft();    Expression right=binaryConditionalExpression.getRight();    if (left instanceof ColumnExpression) {      ColumnExpression columnExpression=(ColumnExpression)left;      if (columnExpression.getDataType().equals(DataType.TIMESTAMP)) {        isExpressionResolve=true;      } else {        if (FilterUtil.checkIfExpressionContainsColumn(right)) {          isExpressionResolve=true;        } else {          dimColumnResolvedFilterInfo.setColumnIndex(columnExpression.getCarbonColumn().getOrdinal());          dimColumnResolvedFilterInfo.setFilterValues(FilterUtil.getFilterListForRS(right,columnExpression,defaultValue,surrogate));        }      }    } else     if (right instanceof ColumnExpression) {      ColumnExpression columnExpression=(ColumnExpression)right;      if (columnExpression.getDataType().equals(DataType.TIMESTAMP)) {        isExpressionResolve=true;      } else {        if (checkIfExpressionContainsColumn(left)) {          isExpressionResolve=true;        } else {          dimColumnResolvedFilterInfo.setColumnIndex(columnExpression.getCarbonColumn().getOrdinal());          dimColumnResolvedFilterInfo.setFilterValues(FilterUtil.getFilterListForRS(left,columnExpression,defaultValue,surrogate));        }      }    }  }  if (this.isExpressionResolve && exp instanceof ConditionalExpression) {    ConditionalExpression conditionalExpression=(ConditionalExpression)exp;    List<ColumnExpression> columnList=conditionalExpression.getColumnList();    dimColumnResolvedFilterInfo.setColumnIndex(columnList.get(0).getDimension().getOrdinal());    dimColumnResolvedFilterInfo.setFilterValues(FilterUtil.getFilterListForAllMembersRS(exp,columnList.get(0),defaultValue,surrogate,isIncludeFilter));  }}  }
class C{  public XMLDocumentParser(SymbolTable symbolTable){  super((XMLParserConfiguration)ObjectFactory.createObject("mf.org.apache.xerces.xni.parser.XMLParserConfiguration","mf.org.apache.xerces.parsers.XIncludeAwareParserConfiguration"));  fConfiguration.setProperty(Constants.XERCES_PROPERTY_PREFIX + Constants.SYMBOL_TABLE_PROPERTY,symbolTable);}  }
class C{  public NewsfeedGetQuery sourceIds(String value){  return unsafeParam("source_ids",value);}  }
class C{  public static boolean isEmailRegistered(String email){  PersistenceManager pm=pmf.getPersistenceManager();  try {    UserRecord user=findUserByEmail(pm,email);    return user != null;  }  finally {    pm.close();  }}  }
class C{  GraqlShell(String historyFilename,String namespace,GraqlClient client,URI uri,Optional<List<String>> queryStrings) throws Throwable {  this.historyFilename=historyFilename;  try {    console=new ConsoleReader(System.in,System.out);    Signal signal=new Signal("INT");    GraqlSignalHandler signalHandler=new GraqlSignalHandler(this);    Signal.handle(signal,signalHandler);    try {      session=client.connect(this,uri).get();    } catch (    ExecutionException e) {      throw e.getCause();    }    sendJson(Json.object(ACTION,ACTION_NAMESPACE,NAMESPACE,namespace));    start(queryStrings);  }  finally {    client.close();    console.flush();  }}  }
class C{  public static Configuration createRuleTag(){  Configuration configuration=new Configuration();  RuleTag ruleTag=RuleTag.create("RuleTag",Integer.class,"(#1000 < 0)|(#1000 > 200)[1],true[0]").id(1500L).build();  configuration.addEntity(ruleTag);  return configuration;}  }
class C{  public void addText(String sText){  String[] sWords=gr.demokritos.iit.jinsect.utils.splitToWords(sText);  java.util.Iterator iIter=java.util.Arrays.asList(sWords).iterator();  while (iIter.hasNext())   addWord((String)iIter.next());}  }
class C{  private void bol(){  column=0;  collectingIndent=(maxIndent != 0);  indent=0;}  }
class C{  @Override public String resolveTemplateParameter(TemplateParameter templateParameter,ContextInfo contextInfo){  ResourceContextParameters resourceParameter=ResourceContextParameters.fromName(templateParameter.getName());  if (resourceParameter == null) {    throw new UnknownTemplateParameterNameException(templateParameter.toString(),String.format("Unknown Resource Template Parameter Name '%s'. Supported Resource Parameter Names: %s'",templateParameter.getName(),ResourceContextParameters.getSupportedContextParameters()));  }  return getParameterValue(templateParameter,resourceParameter,contextInfo);}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public IntegerLiteral fullCopy(){  IntegerLiteral tree=(IntegerLiteral)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public boolean isInterProcSource(){  return interProcSource;}  }
class C{  private void writePlumeStats(ByteBuffer buf){  Item item=ownerItem;  if (item.getItemTemplate().isPlume()) {    writeD(buf,0);    writeD(buf,0);    writeD(buf,0);    writeD(buf,0);    writeD(buf,42);    writeD(buf,item.getAuthorize() * 150);    if (item.getItemTemplate().getAuthorizeName() == 52 || item.getItemTemplate().getAuthorizeName() == 10063) {      writeD(buf,30);      writeD(buf,item.getAuthorize() * 4);      writeD(buf,0);      writeD(buf,0);    } else     if (item.getItemTemplate().getAuthorizeName() == 57 || item.getItemTemplate().getAuthorizeName() == 10065) {      writeD(buf,33);      writeD(buf,item.getAuthorize() * 12);      writeD(buf,0);      writeD(buf,0);    } else     if (item.getItemTemplate().getAuthorizeName() == 58 || item.getItemTemplate().getAuthorizeName() == 10066) {      writeD(buf,36);      writeD(buf,item.getAuthorize() * 8);      writeD(buf,0);      writeD(buf,0);    } else {      writeD(buf,35);      writeD(buf,item.getAuthorize() * 20);      writeD(buf,0);      writeD(buf,0);    }    writeD(buf,0);    writeD(buf,0);    writeD(buf,0);    writeD(buf,0);    writeD(buf,0);    writeD(buf,0);  } else {    writeB(buf,new byte[64]);  }}  }
class C{  private void forceNSDecls(){  Enumeration<String> prefixes=forcedDeclTable.keys();  while (prefixes.hasMoreElements()) {    String prefix=(String)prefixes.nextElement();    doPrefix(prefix,null,true);  }}  }
class C{  public java.lang.Boolean isEscaped(){  return escaped;}  }
class C{  public float nextFloat(boolean includeZero,boolean includeOne){  float d=0.0f;  do {    d=nextFloat();    if (includeOne && nextBoolean())     d+=1.0f;  } while ((d > 1.0f) || (!includeZero && d == 0.0f));  return d;}  }
class C{  public SiteAdminActionBar clickOnButton(SiteAdminButtons button){  getButton(button).click();  return this;}  }
class C{  public static void testValidSystemEvent(AbstractChangeEvent event,String expectedPropertyName,String expectedBefore,String expectedAfter){  Assert.assertEquals(expectedPropertyName,event.getPropertyName());  Assert.assertEquals(expectedBefore,event.getBefore());  Assert.assertEquals(expectedAfter,event.getAfter());  AbstractEventTest.testValidSystemEvent(event);}  }
class C{  @Override public void normalizeDocument(){  throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Method not supported");}  }
class C{  private String createAjaxParamsFromUpdateAreas(List<ModelForm.UpdateArea> updateAreas,Map<String,Object> extraParams,String anchor,Map<String,? extends Object> context){  StringBuilder sb=new StringBuilder();  Iterator<ModelForm.UpdateArea> updateAreaIter=updateAreas.iterator();  while (updateAreaIter.hasNext()) {    ModelForm.UpdateArea updateArea=updateAreaIter.next();    sb.append(updateArea.getAreaId()).append(",");    String ajaxTarget=updateArea.getAreaTarget(context);    String urlPath=UtilHttp.removeQueryStringFromTarget(ajaxTarget);    sb.append(this.rh.makeLink(this.request,this.response,urlPath)).append(",");    String queryString=UtilHttp.getQueryStringFromTarget(ajaxTarget).replace("?","");    Map<String,Object> parameters=UtilHttp.getQueryStringOnlyParameterMap(queryString);    Map<String,Object> ctx=UtilGenerics.checkMap(context);    Map<String,Object> updateParams=UtilGenerics.checkMap(updateArea.getParameterMap(ctx));    parameters.putAll(updateParams);    UtilHttp.canonicalizeParameterMap(parameters);    parameters.putAll(extraParams);    Iterator<Map.Entry<String,Object>> paramIter=parameters.entrySet().iterator();    while (paramIter.hasNext()) {      Map.Entry<String,Object> entry=paramIter.next();      sb.append(entry.getKey()).append("=").append(entry.getValue());      if (paramIter.hasNext()) {        sb.append("&");      }    }    if (anchor != null) {      sb.append("#").append(anchor);    }    if (updateAreaIter.hasNext()) {      sb.append(",");    }  }  Locale locale=UtilMisc.ensureLocale(context.get("locale"));  return FlexibleStringExpander.expandString(sb.toString(),context,locale);}  }
class C{  public ShrExpr newShrExpr(Value op1,Value op2){  return new GShrExpr(op1,op2);}  }
class C{  public boolean isVisible(){  return !isDismissed && visible;}  }
class C{  private void updateCachedData(){  int rangeStart=range.getStart();  int expectedLastIndex=Math.max(0,Math.min(range.getLength(),getRowCount() - rangeStart));  int lastIndex=getVisibleItemCount() - 1;  while (lastIndex >= expectedLastIndex) {    rows.remove(lastIndex);    lastIndex--;  }}  }
class C{  public boolean isLocked(){  return isLocked;}  }
class C{  public static <T extends RealFieldElement<T>>T angle(final FieldVector3D<T> v1,final Vector3D v2) throws MathRuntimeException {  final T normProduct=v1.getNorm().multiply(v2.getNorm());  if (normProduct.getReal() == 0) {    throw new MathRuntimeException(LocalizedCoreFormats.ZERO_NORM);  }  final T dot=dotProduct(v1,v2);  final double threshold=normProduct.getReal() * 0.9999;  if ((dot.getReal() < -threshold) || (dot.getReal() > threshold)) {    FieldVector3D<T> v3=crossProduct(v1,v2);    if (dot.getReal() >= 0) {      return v3.getNorm().divide(normProduct).asin();    }    return v3.getNorm().divide(normProduct).asin().subtract(FastMath.PI).negate();  }  return dot.divide(normProduct).acos();}  }
class C{  @Override @Test public <T>void testAggregate(){}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public SecurityException(Throwable cause){  super(cause);}  }
class C{  public void updateFile(OCFile file){  setFile(file);}  }
class C{  public MarketEditQuery edit(UserActor actor,int ownerId,int itemId,String name,String description,int categoryId,float price,int mainPhotoId){  return new MarketEditQuery(getClient(),actor,ownerId,itemId,name,description,categoryId,price,mainPhotoId);}  }
class C{  protected void writePalette() throws IOException {  out.write(colorTab,0,colorTab.length);  int n=(3 * 256) - colorTab.length;  for (int i=0; i < n; i++) {    out.write(0);  }}  }
class C{  public static String printLine(String a,int num){  StringBuilder builder=new StringBuilder();  for (int i=0; i < num; i++) {    builder.append(a);  }  return builder.toString();}  }
class C{  public MultiSourceSingleFileBacklogHandshakeRequest(){  super();}  }
class C{  private void moveOverlay(Boolean moveUp){  WindowManager.LayoutParams newParams=(WindowManager.LayoutParams)infoLayout.getLayoutParams();  if (moveUp) {    newParams.gravity=Gravity.TOP;    newParams.y=sharedPref.getInt(APPRAISAL_WINDOW_POSITION,0);  } else {    newParams.gravity=Gravity.BOTTOM;    newParams.y=0;  }  windowManager.updateViewLayout(infoLayout,newParams);}  }
class C{  public final void error(final Object o,final Throwable t){  log(Level.ERROR,o,t);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fall_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200973,skilltarget,skillcaster,skillname);}  }
class C{  public void calculateSourcesSinksEntrypoints(ISourceSinkDefinitionProvider sourcesAndSinks) throws IOException, XmlPullParserException {  this.sourceSinkProvider=sourcesAndSinks;  ProcessManifest processMan=new ProcessManifest(apkFileLocation);  this.appPackageName=processMan.getPackageName();  this.entrypoints=processMan.getEntryPointClasses();  long beforeARSC=System.nanoTime();  ARSCFileParser resParser=new ARSCFileParser();  resParser.parse(apkFileLocation);  logger.info("ARSC file parsing took " + (System.nanoTime() - beforeARSC) / 1E9 + " seconds");  this.resourcePackages=resParser.getPackages();  LayoutFileParser lfp=null;  if (enableCallbacks) {    lfp=new LayoutFileParser(this.appPackageName,resParser);    calculateCallbackMethods(resParser,lfp);    System.out.println("Found " + lfp.getUserControls() + " layout controls");  }  System.out.println("Entry point calculation done.");  soot.G.reset();{    Set<SootMethodAndClass> callbacks=new HashSet<>();    for (    Set<SootMethodAndClass> methods : this.callbackMethods.values())     callbacks.addAll(methods);    sourceSinkManager=new AccessPathBasedSourceSinkManager(this.sourceSinkProvider.getSources(),this.sourceSinkProvider.getSinks(),callbacks,layoutMatchingMode,lfp == null ? null : lfp.getUserControlsByID());    sourceSinkManager.setAppPackageName(this.appPackageName);    sourceSinkManager.setResourcePackages(this.resourcePackages);    sourceSinkManager.setEnableCallbackSources(this.enableCallbackSources);  }  entryPointCreator=createEntryPointCreator();}  }
class C{  protected boolean canStoreClass(SootClass child,SootClass parent){  parent.checkLevel(SootClass.HIERARCHY);  child.checkLevel(SootClass.HIERARCHY);  Interval parentInterval=classToInterval.get(parent);  Interval childInterval=classToInterval.get(child);  if (parentInterval != null && childInterval != null) {    return parentInterval.isSubrange(childInterval);  }  if (childInterval == null) {    if (parentInterval != null) {      return parent.equals(Scene.v().getObjectType().getSootClass());    } else {      return getAllSubinterfaces(parent).contains(child);    }  } else {    Set<SootClass> impl=getAllImplementersOfInterface(parent);    for (Iterator<SootClass> it=impl.iterator(); it.hasNext(); ) {      parentInterval=classToInterval.get(it.next());      if (parentInterval != null && parentInterval.isSubrange(childInterval)) {        return true;      }    }    return false;  }}  }
class C{  void recycle(long timeout,TimeUnit unit){  for (; ; ) {    Status status=resourceKey.getStatus();switch (status) {case IN_FLIGHT:      if (resourceKey.goFromInFlightToIdle()) {        releaseToPool(timeout,unit);        return;      }    break;case RETIRED:  if (resourceKey.goFromRetiredToDead()) {    discardResource();    return;  }break;default :throw new IllegalStateException("Unnexpected state: " + status);}}}  }
class C{  @Override public void onBreak(ChunkManager chunkManager,Chunk chunk,int chunkTileX,int chunkTileY){  super.onBreak(chunkManager,chunk,chunkTileX,chunkTileY);  int realX=chunkTileX + (chunk.getStartX() * Chunk.CHUNK_SIZE);  int realY=chunkTileY + (chunk.getStartY() * Chunk.CHUNK_SIZE);  Chunk topBlockChunk=chunkManager.getChunkFromTilePos(realX,(realY + 1));  int topChunkTileX=realX - (topBlockChunk.getStartX() * Chunk.CHUNK_SIZE);  int topChunkTileY=(realY + 1) - (topBlockChunk.getStartY() * Chunk.CHUNK_SIZE);  BlockType topBlockType=topBlockChunk.getBlock(topChunkTileX,topChunkTileY);  if (topBlockType == BlockType.WOOD) {    topBlockChunk.setBlock(BlockType.AIR,topChunkTileX,topChunkTileY,true);  }}  }
class C{  public boolean fullyEquals(Object obj){  if (equals(obj)) {    MarshalledInstance other=(MarshalledInstance)obj;    return Arrays.equals(locBytes,other.locBytes);  }  return false;}  }
class C{  public static void genr(Zmat A,int ii,int jj1,int jj2,Rot P){  A.dirty=true;  int i=ii - A.basex;  int j1=jj1 - A.basex;  int j2=jj2 - A.basex;  Rot.genr(A.re[i][j1],A.im[i][j1],A.re[i][j2],A.im[i][j2],P);  A.re[i][j1]=P.zr;  A.im[i][j1]=P.zi;  A.re[i][j2]=0;  A.im[i][j2]=0;}  }
class C{  public void init$Children(){}  }
class C{  public Spawn(EntityLivingBase living){  super(living);}  }
class C{  public static void copyJarsFromAssets(final Context cxt,final String[] names){  if (debug) {    Log.d(TAG,"copyJarsFromAssets(" + Arrays.deepToString(names) + ")");  }  final File dexDir=cxt.getDir(DIR_SUBDEX,Context.MODE_PRIVATE);  File apkFile=new File(cxt.getApplicationInfo().sourceDir);  final boolean shouldInit=shouldDexOpt(apkFile,dexDir,names);  if (shouldInit) {    try {      copyToInternal(cxt,dexDir,names);      appendOdexesToClassPath(cxt,dexDir,names);    } catch (    Exception e) {      e.printStackTrace();      throw new RuntimeException(e);    }  } else {    if (!inAppended(names)) {      appendOdexesToClassPath(cxt,dexDir,names);    }  }}  }
class C{  public static Colour attemptToGetAsColour(String part){  Colour col=null;  try {    col=Colour.valueOf(part.toUpperCase());  } catch (  Exception e) {  }  return col;}  }
class C{  public static void appendContentPrefix(HttpServletRequest request,StringBuilder urlBuffer){  try {    appendContentPrefix(request,(Appendable)urlBuffer);  } catch (  IOException e) {    throw UtilMisc.initCause(new InternalError(e.getMessage()),e);  }}  }
class C{  protected ZKLogMetadata(URI uri,String logName,String logIdentifier){  this.uri=uri;  this.logName=logName;  this.logIdentifier=logIdentifier;  this.logRootPath=getLogRootPath(uri,logName,logIdentifier);  this.logSegmentsPath=logRootPath + LOGSEGMENTS_PATH;  this.lockPath=logRootPath + LOCK_PATH;  this.maxTxIdPath=logRootPath + MAX_TXID_PATH;  this.allocationPath=logRootPath + ALLOCATION_PATH;}  }
class C{  public void init(){  sqlInsert=new BufferedReader(new InputStreamReader(this.getClass().getResourceAsStream("/sql/cache-data-insert.sql")));  sqlRemove=new BufferedReader(new InputStreamReader(this.getClass().getResourceAsStream("/sql/cache-data-remove.sql")));}  }
class C{  public int addOrderTerm(GenericValue orderTerm){  orderTerms.add(orderTerm);  return orderTerms.indexOf(orderTerm);}  }
class C{  private XMLInputSource createXMLInputSource(InputSource source,String baseURI){  String publicId=source.getPublicId();  String systemId=source.getSystemId();  String baseSystemId=baseURI;  InputStream byteStream=source.getByteStream();  Reader charStream=source.getCharacterStream();  String encoding=source.getEncoding();  XMLInputSource xmlInputSource=new XMLInputSource(publicId,systemId,baseSystemId);  xmlInputSource.setByteStream(byteStream);  xmlInputSource.setCharacterStream(charStream);  xmlInputSource.setEncoding(encoding);  return xmlInputSource;}  }
class C{  public SpaceTypeDescriptorBuilder storageType(StorageType storageType){  if (storageType == null)   throw new IllegalArgumentException("Argument cannot be null - 'storageType'.");  if (this._storageType != null && this._storageType != StorageType.DEFAULT && this._storageType != storageType)   throw new IllegalStateException("Cannot set storage type to '" + storageType + "' - it was already set to '"+ _storageType+ "'.");  this._storageType=storageType;  return this;}  }
class C{  public void close(){  scanner.close();}  }
class C{  public void putBoolean(String key,boolean value){  checkForNullKey(key);  preferences.edit().putBoolean(key,value).apply();}  }
class C{  public boolean isUnwrapping(){  return false;}  }
class C{  public AdsCreateAdsQuery(VkApiClient client,UserActor actor,int accountId,String data){  super(client,"ads.createAds",Utils.buildParametrizedType(List.class,Integer.class));  accessToken(actor.getAccessToken());  accountId(accountId);  data(data);}  }
class C{  protected NewsfeedSearchQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public void insertEquationData(final int index,double[] equationData,double[] complete) throws MathIllegalArgumentException {  checkIndex(index);  final int begin=start[index];  final int end=start[index + 1];  final int dimension=end - begin;  if (complete.length < end) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,complete.length,end);  }  if (equationData.length != dimension) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,equationData.length,dimension);  }  System.arraycopy(equationData,0,complete,begin,dimension);}  }
class C{  public int writeToMessage(byte[] byteArray,int offset,int length){  int remaining=length;  while (this.length + length > capacity) {    if (!this.messageBuffer.expandMessage(this)) {      return -1;    }  }  int bytesToCopy=Math.min(remaining,this.capacity - this.length);  System.arraycopy(byteArray,offset,this.sharedArray,this.offset + this.length,bytesToCopy);  this.length+=bytesToCopy;  return bytesToCopy;}  }
class C{  static AnyVal<Void> anyNone(){  return new AnyOptional<>(null,null);}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof ChartViewer && ((ChartViewer)getViewer()).getChartDrawer() instanceof BarChartDrawer && !(((ChartViewer)getViewer()).getChartDrawer() instanceof StackedLineChartDrawer);}  }
class C{  public void index(Tuple t,String field){  String s;  if ((s=t.getString(field)) == null)   return;  StringTokenizer st=new StringTokenizer(s,m_delim);  while (st.hasMoreTokens()) {    String tok=st.nextToken();    addString(tok,t);  }}  }
class C{  private static int compare(final Dfp a,final Dfp b){  if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 && a.nans == FINITE && b.nans == FINITE) {    return 0;  }  if (a.sign != b.sign) {    if (a.sign == -1) {      return -1;    } else {      return 1;    }  }  if (a.nans == INFINITE && b.nans == FINITE) {    return a.sign;  }  if (a.nans == FINITE && b.nans == INFINITE) {    return -b.sign;  }  if (a.nans == INFINITE && b.nans == INFINITE) {    return 0;  }  if (b.mant[b.mant.length - 1] != 0 && a.mant[b.mant.length - 1] != 0) {    if (a.exp < b.exp) {      return -a.sign;    }    if (a.exp > b.exp) {      return a.sign;    }  }  for (int i=a.mant.length - 1; i >= 0; i--) {    if (a.mant[i] > b.mant[i]) {      return a.sign;    }    if (a.mant[i] < b.mant[i]) {      return -a.sign;    }  }  return 0;}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,boolean useSystemDefault){  addEmojis(context,text,emojiSize,0,-1,useSystemDefault);}  }
class C{  private Date parseDate(String date){  try {    return DateFormat.getDateInstance(DateFormat.SHORT).parse(date);  } catch (  ParseException e) {    MessageDialog.openError(getShell(),Policy.bind("HistorySearchDialog.dateParseErrorTitle"),Policy.bind("HistorySearchDialog.dateParseErrorMessage"));    return null;  }}  }
class C{  public static ExpectedCondition<Boolean> hasNodePropertyValue(final Session session,final String nodePath,final String propertyName,final String propertyValue){  LOG.debug("Checking if node '{}' has property '{}' with value '{}'",nodePath,propertyName,propertyValue);  return null;}  }
class C{  public LoaderSplitPolicyProvider(ClassLoader loader,Policy loaderPolicy,Policy defaultPolicy){  if (loader == null || loaderPolicy == null || defaultPolicy == null) {    throw new NullPointerException();  }  this.loader=loader;  this.loaderPolicy=loaderPolicy;  this.defaultPolicy=defaultPolicy;  ensureDependenciesResolved();}  }
class C{  public void java_net_InetAddressImpl_getLocalHostName(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getStringObject());}  }
class C{  public boolean requiresReboot(){  if (processActionRequired()) {    throw new UnsupportedOperationException("The method is not available for configuration changes that need sending to the DAQ!");  } else {    return requiresReboot;  }}  }
class C{  public void performTemplateOnEntrySA(Context context,ITemplateHolder template,IEntryHolder entry,boolean makeWaitForInfo) throws TransactionConflictException, EntryDeletedException, TemplateDeletedException, TransactionNotActiveException, SAException, NoMatchException, FifoException {  if (entry.isOffHeapEntry() && template.getTemplateOperation() == SpaceOperations.UPDATE)   _cacheManager.getBlobStoreMemoryMonitor().onMemoryAllocation(((IOffHeapEntryHolder)entry).getOffHeapResidentPart().getStorageKey());  context.setDisableSyncReplication(true);  context.setOperationID(template.getOperationID());  try {    if (template.getTemplateOperation() == SpaceOperations.UPDATE && !template.isChange()) {      if (!template.getUpdatedEntry().getClassName().equals(entry.getClassName())) {        ILockObject templateLock=getTemplateLockObject(template);        try {synchronized (templateLock) {            if (!template.hasAnswer()) {              RuntimeException rtex=new RuntimeException(" Update: original entry and updated entry not from same class updated=" + template.getUpdatedEntry().getClassName() + " original="+ entry.getClassName());              context.setOperationAnswer(template,null,rtex);              if (!template.isDeleted() && template.isInCache())               _cacheManager.removeTemplate(context,template,false,true,false);            }            throw new TemplateDeletedException(template);          }        }  finally {          if (templateLock != null)           freeTemplateLockObject(templateLock);        }      }    }    ILockObject entryLock=null;    ILockObject templateLock=null;    boolean need_xtn_lock=false;    boolean upgrade_lock=false;    while (true) {      context.setNonBlockingReadOp(template.isNonBlockingRead() && !context.isUnstableEntry() && !context.isTransactionalMultipleOperation());      if (!template.isFifoSearch())       need_xtn_lock=need_xtn_lock || (!context.isNonBlockingReadOp() && template.getXidOriginated() != null); else       need_xtn_lock=need_xtn_lock || (!context.isNonBlockingReadOp() && (template.getXidOriginated() != null || entry.isMaybeUnderXtn()));      try {        if (!context.isNonBlockingReadOp()) {          if (need_xtn_lock) {            if (!context.isTransactionalMultipleOperation())             getTransactionHandler().xtnLockEntryOnTemplateOperation(context,entry,template,(context.isTransactionalMultipleOperation() ? template.getXidOriginated() : null));            if (template.isFifoSearch())             getTransactionHandler().getTxReadLock().lock();          }          try {            entryLock=_cacheManager.getLockManager().getLockObject(entry);synchronized (entryLock) {              try {                if (makeWaitForInfo || template.isInCache()) {                  templateLock=getTemplateLockObject(template);synchronized (templateLock) {                    upgrade_lock=performTemplateOnEntryXtnAwareSA(context,template,entry,need_xtn_lock,makeWaitForInfo);                  }                } else {                  upgrade_lock=performTemplateOnEntryXtnAwareSA(context,template,entry,need_xtn_lock,makeWaitForInfo);                }              }  finally {                if (getCacheManager().mayNeedEntriesUnpinning())                 _cacheManager.unpinIfNeeded(context,entry,template,null);              }            }          }  finally {            if (need_xtn_lock) {              if (!context.isTransactionalMultipleOperation())               getTransactionHandler().xtnUnlockEntryOnTemplateOperation(template,(context.isTransactionalMultipleOperation() ? template.getXidOriginated() : null));              if (template.isFifoSearch())               getTransactionHandler().getTxReadLock().unlock();            }          }          if (upgrade_lock && !need_xtn_lock)           need_xtn_lock=true;          if (!upgrade_lock)           break;        } else {          if (makeWaitForInfo || template.isInCache()) {            templateLock=getTemplateLockObject(template);synchronized (templateLock) {              upgrade_lock=performTemplateOnEntryXtnAwareSA(context,template,entry,false,makeWaitForInfo);            }          } else {            upgrade_lock=performTemplateOnEntryXtnAwareSA(context,template,entry,false,makeWaitForInfo);          }          if (upgrade_lock)           continue;          break;        }      }  finally {        if (templateLock != null) {          freeTemplateLockObject(templateLock);          templateLock=null;        }        if (entryLock != null) {          _cacheManager.getLockManager().freeLockObject(entryLock);          entryLock=null;        }      }    }  }  finally {    context.setDisableSyncReplication(false);    context.setLastRawMatchSnapshot(null);    if (template.getXidOriginatedTransaction() == null) {      if (context.isSyncReplFromMultipleOperation())       performReplIfChunkReached(context); else       performReplication(context);    }  }}  }
class C{  public static void recover(Transaction tx){  tx.recoveryMgr().doRecover(tx);  tx.bufferMgr().flushAll();  LogSeqNum lsn=new CheckpointRecord().writeToLog();  VanillaDb.logMgr().flush(lsn);}  }
class C{  public void ddSolve(Set<Node> qryNodes){  long solve_time=0, prepare_time=0;  if (hasExecuted == false)   solve();  if (ddPrepared == false || offlineProcessor == null) {    offlineProcessor=new OfflineProcessor(this);    IFigureManager.cleanCache();    ddPrepared=true;    ps.println();    ps.println("==> Entering demand-driven mode (experimental).");  }  int init_size=qryNodes.size();  if (init_size == 0) {    ps.println("Please provide at least one pointer.");    return;  }  Date prepare_begin=new Date();  offlineProcessor.init();  offlineProcessor.addUserDefPts(qryNodes);  offlineProcessor.runOptimizations();  Date prepare_end=new Date();  prepare_time+=prepare_end.getTime() - prepare_begin.getTime();  Date begin=new Date();  prepareNextRun();  nodeGenerator.initFlowGraph(this);  solveConstraints();  Date end=new Date();  solve_time+=end.getTime() - begin.getTime();  ps.println();  ps.printf("[ddGeom] Preprocessing time: %.2f seconds\n",(double)prepare_time / 1000);  ps.printf("[ddGeom] Main propagation time: %.2f seconds\n",(double)solve_time / 1000);}  }
class C{  public void dumpBinary(DataOutputStream os) throws IOException {  os.writeInt(numberOfChannels);  os.writeInt(sampleRate);  os.writeFloat(coeffMin);  os.writeFloat(coeffRange);  os.writeFloat(postEmphasis);  os.writeInt(residualFold);}  }
class C{  public static void adjustBaseIndex(Zdiagmat A){  BaseIndexNotChangeable=true;  A.basex=BaseIndex;  A.getProperties();}  }
class C{  private Experiment createExperiment(){  return ExperimentFactory.createExperiment().setDescription("Sample Description.").setStartTime(startTime).setEndTime(endTime).setLabel(PREFIX_EXPERIMENT + System.currentTimeMillis() + count++).setSamplingPercent(samplingPercent).setApplication(ApplicationFactory.defaultApplication());}  }
class C{  public PulsarAdmin(URL serviceUrl,String authPluginClassName,Map<String,String> authParams) throws PulsarClientException {  this(serviceUrl,AuthenticationFactory.create(authPluginClassName,authParams));}  }
class C{  private boolean resizeAndSaveImage(int maxWidth,int maxHeight) throws IOException {  boolean saved=false;  File targetFile=configuration.diskCache.get(uri);  if (targetFile != null && targetFile.exists()) {    ImageSize targetImageSize=new ImageSize(maxWidth,maxHeight);    DisplayImageOptions specialOptions=new DisplayImageOptions.Builder().cloneFrom(options).imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();    ImageDecodingInfo decodingInfo=new ImageDecodingInfo(memoryCacheKey,Scheme.FILE.wrap(targetFile.getAbsolutePath()),uri,targetImageSize,ViewScaleType.FIT_INSIDE,getDownloader(),specialOptions);    Bitmap bmp=decoder.decode(decodingInfo);    if (bmp != null && configuration.processorForDiskCache != null) {      L.d(LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISK,memoryCacheKey);      bmp=configuration.processorForDiskCache.process(bmp);      if (bmp == null) {        L.e(ERROR_PROCESSOR_FOR_DISK_CACHE_NULL,memoryCacheKey);      }    }    if (bmp != null) {      saved=configuration.diskCache.save(uri,bmp);      bmp.recycle();    }  }  return saved;}  }
class C{  private static void expandBelow13DigitNumber(String numberString,WordRelation wordRelation){  expandLargeNumber(numberString,"billion",9,wordRelation);}  }
class C{  private static DataValue dv(Object o){  return new DataValue(new Variant(o),StatusCode.GOOD,null,DateTime.now());}  }
class C{  @SuppressWarnings("restriction") public synchronized String encrypt(String str){  byte[] utf8;  try {    utf8=str.getBytes("UTF-8");    byte[] enc=encrypter.doFinal(utf8);    return encoder.encode(enc);  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }catch (  IllegalBlockSizeException e) {    e.printStackTrace();  }catch (  BadPaddingException e) {    e.printStackTrace();  }  return "";}  }
class C{  public static UShort ushort(String value) throws NumberFormatException {  return value == null ? null : UShort.valueOf(value);}  }
class C{  boolean inSubroutine(final long id){  if ((status & Label.VISITED) != 0) {    return (srcAndRefPositions[(int)(id >>> 32)] & (int)id) != 0;  }  return false;}  }
class C{  public final void browserInfo(){  final WebDriver webDriver=webDriverProvider.get();  if (webDriver instanceof HasCapabilities) {    currentTest.get().addBrowserInfo();  } else {    currentTest.get().error("Your WebDriver doesn't provide capabilities, so we can't log its info.");  }}  }
class C{  public void remove(){}  }
class C{  public void updateForTabCount(int tabCount,boolean incognito){  if (tabCount == mTabCount && incognito == mIncognito)   return;  mTabCount=tabCount;  mIncognito=incognito;  float textSizePx=mTabCount > 9 ? mDoubleDigitTextSize : mSingleDigitTextSize;  mTextPaint.setTextSize(textSizePx);  invalidateSelf();}  }
class C{  public boolean compare(ClusterUnitDatabase other){  System.out.println("Warning: Compare not implemented yet");  return false;}  }
class C{  @Override public Dfp multiply(final Dfp x){  if (field.getRadixDigits() != x.field.getRadixDigits()) {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    final Dfp result=newInstance(getZero());    result.nans=QNAN;    return dotrap(DfpField.FLAG_INVALID,MULTIPLY_TRAP,x,result);  }  Dfp result=newInstance(getZero());  if (nans != FINITE || x.nans != FINITE) {    if (isNaN()) {      return this;    }    if (x.isNaN()) {      return x;    }    if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length - 1] != 0) {      result=newInstance(this);      result.sign=(byte)(sign * x.sign);      return result;    }    if (x.nans == INFINITE && nans == FINITE && mant[mant.length - 1] != 0) {      result=newInstance(x);      result.sign=(byte)(sign * x.sign);      return result;    }    if (x.nans == INFINITE && nans == INFINITE) {      result=newInstance(this);      result.sign=(byte)(sign * x.sign);      return result;    }    if ((x.nans == INFINITE && nans == FINITE && mant[mant.length - 1] == 0) || (nans == INFINITE && x.nans == FINITE && x.mant[mant.length - 1] == 0)) {      field.setIEEEFlagsBits(DfpField.FLAG_INVALID);      result=newInstance(getZero());      result.nans=QNAN;      result=dotrap(DfpField.FLAG_INVALID,MULTIPLY_TRAP,x,result);      return result;    }  }  int[] product=new int[mant.length * 2];  for (int i=0; i < mant.length; i++) {    int rh=0;    for (int j=0; j < mant.length; j++) {      int r=mant[i] * x.mant[j];      r+=product[i + j] + rh;      rh=r / RADIX;      product[i + j]=r - rh * RADIX;    }    product[i + mant.length]=rh;  }  int md=mant.length * 2 - 1;  for (int i=mant.length * 2 - 1; i >= 0; i--) {    if (product[i] != 0) {      md=i;      break;    }  }  for (int i=0; i < mant.length; i++) {    result.mant[mant.length - i - 1]=product[md - i];  }  result.exp=exp + x.exp + md - 2 * mant.length + 1;  result.sign=(byte)((sign == x.sign) ? 1 : -1);  if (result.mant[mant.length - 1] == 0) {    result.exp=0;  }  final int excp;  if (md > (mant.length - 1)) {    excp=result.round(product[md - mant.length]);  } else {    excp=result.round(0);  }  if (excp != 0) {    result=dotrap(excp,MULTIPLY_TRAP,x,result);  }  return result;}  }
class C{  public View createView(ViewGroup parent){  return LayoutInflater.from(parent.getContext()).inflate(R.layout.enls_item_default,parent,false);}  }
class C{  public boolean unitCanWriteTo(Unit u,Value v){  return valueTouchesRWSet(writeSet(u),v,u.getDefBoxes());}  }
class C{  private boolean isBeforeParent(final BSPTree<Euclidean1D> node){  final BSPTree<Euclidean1D> parent=node.getParent();  if (parent == null) {    return false;  } else {    return node == childBefore(parent);  }}  }
class C{  public static long readVLong(byte[] bytes,int start) throws IOException {  int len=bytes[start];  if (len >= -112) {    return len;  }  boolean isNegative=(len < -120);  len=isNegative ? -(len + 120) : -(len + 112);  if (start + 1 + len > bytes.length)   throw new IOException("Not enough number of bytes for a zero-compressed integer");  long i=0;  for (int idx=0; idx < len; idx++) {    i=i << 8;    i=i | (bytes[start + 1 + idx] & 0xFF);  }  return (isNegative ? (~i) : i);}  }
class C{  public boolean isSetMessage(){  return this.message != null;}  }
class C{  public JSONWriter value(Object object) throws JSONException {  return this.append(JSONObject.valueToString(object));}  }
class C{  @Override public boolean isFieldName(){  return true;}  }
class C{  public static Map<String,Object> calculateProductPrice(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> result=FastMap.newInstance();  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  GenericValue product=(GenericValue)context.get("product");  String productId=product.getString("productId");  String prodCatalogId=(String)context.get("prodCatalogId");  String webSiteId=(String)context.get("webSiteId");  String checkIncludeVat=(String)context.get("checkIncludeVat");  String surveyResponseId=(String)context.get("surveyResponseId");  Map<String,Object> customAttributes=UtilGenerics.checkMap(context.get("customAttributes"));  String findAllQuantityPricesStr=(String)context.get("findAllQuantityPrices");  boolean findAllQuantityPrices="Y".equals(findAllQuantityPricesStr);  boolean optimizeForLargeRuleSet="Y".equals(context.get("optimizeForLargeRuleSet"));  String agreementId=(String)context.get("agreementId");  String productStoreId=(String)context.get("productStoreId");  String productStoreGroupId=(String)context.get("productStoreGroupId");  Locale locale=(Locale)context.get("locale");  GenericValue productStore=null;  try {    productStore=EntityQuery.use(delegator).from("ProductStore").where("productStoreId",productStoreId).cache().queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Error getting product store info from the database while calculating price" + e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveProductStore",UtilMisc.toMap("errorString",e.toString()),locale));  }  if (UtilValidate.isEmpty(productStoreGroupId)) {    if (productStore != null) {      try {        if (UtilValidate.isNotEmpty(productStore.getString("primaryStoreGroupId"))) {          productStoreGroupId=productStore.getString("primaryStoreGroupId");        } else {          List<GenericValue> productStoreGroupMemberList=EntityQuery.use(delegator).from("ProductStoreGroupMember").where("productStoreId",productStoreId).orderBy("sequenceNum","-fromDate").cache(true).queryList();          productStoreGroupMemberList=EntityUtil.filterByDate(productStoreGroupMemberList,true);          if (productStoreGroupMemberList.size() > 0) {            GenericValue productStoreGroupMember=EntityUtil.getFirst(productStoreGroupMemberList);            productStoreGroupId=productStoreGroupMember.getString("productStoreGroupId");          }        }      } catch (      GenericEntityException e) {        Debug.logError(e,"Error getting product store info from the database while calculating price" + e.toString(),module);        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveProductStore",UtilMisc.toMap("errorString",e.toString()),locale));      }    }    if (UtilValidate.isEmpty(productStoreGroupId)) {      productStoreGroupId="_NA_";    }  }  String currencyDefaultUomId=(String)context.get("currencyUomId");  String currencyUomIdTo=(String)context.get("currencyUomIdTo");  if (UtilValidate.isEmpty(currencyDefaultUomId)) {    if (UtilValidate.isNotEmpty(productStore) && UtilValidate.isNotEmpty(productStore.getString("defaultCurrencyUomId"))) {      currencyDefaultUomId=productStore.getString("defaultCurrencyUomId");    } else {      currencyDefaultUomId=EntityUtilProperties.getPropertyValue("general","currency.uom.id.default","USD",delegator);    }  }  String productPricePurposeId=(String)context.get("productPricePurposeId");  if (UtilValidate.isEmpty(productPricePurposeId)) {    productPricePurposeId="PURCHASE";  }  String termUomId=(String)context.get("termUomId");  String virtualProductId=null;  if ("Y".equals(product.getString("isVariant"))) {    try {      virtualProductId=ProductWorker.getVariantVirtualId(product);    } catch (    GenericEntityException e) {      Debug.logError(e,"Error getting virtual product id from the database while calculating price" + e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveVirtualProductId",UtilMisc.toMap("errorString",e.toString()),locale));    }  }  List<GenericValue> virtualProductPrices=null;  if (virtualProductId != null) {    try {      virtualProductPrices=EntityQuery.use(delegator).from("ProductPrice").where("productId",virtualProductId,"currencyUomId",currencyDefaultUomId,"productStoreGroupId",productStoreGroupId).orderBy("-fromDate").cache(true).queryList();    } catch (    GenericEntityException e) {      Debug.logError(e,"An error occurred while getting the product prices",module);    }    virtualProductPrices=EntityUtil.filterByDate(virtualProductPrices,true);  }  String partyId=(String)context.get("partyId");  if (UtilValidate.isEmpty(partyId) && context.get("userLogin") != null) {    GenericValue userLogin=(GenericValue)context.get("userLogin");    partyId=userLogin.getString("partyId");  }  if (UtilValidate.isEmpty(partyId) && context.get("autoUserLogin") != null) {    GenericValue userLogin=(GenericValue)context.get("autoUserLogin");    partyId=userLogin.getString("partyId");  }  BigDecimal quantity=(BigDecimal)context.get("quantity");  if (quantity == null)   quantity=BigDecimal.ONE;  BigDecimal amount=(BigDecimal)context.get("amount");  List<EntityCondition> productPriceEcList=FastList.newInstance();  productPriceEcList.add(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId));  if ("PURCHASE".equals(productPricePurposeId)) {    productPriceEcList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("productPricePurposeId",EntityOperator.EQUALS,productPricePurposeId),EntityOperator.OR,EntityCondition.makeCondition("productPricePurposeId",EntityOperator.EQUALS,null)));  } else {    productPriceEcList.add(EntityCondition.makeCondition("productPricePurposeId",EntityOperator.EQUALS,productPricePurposeId));  }  productPriceEcList.add(EntityCondition.makeCondition("currencyUomId",EntityOperator.EQUALS,currencyDefaultUomId));  productPriceEcList.add(EntityCondition.makeCondition("productStoreGroupId",EntityOperator.EQUALS,productStoreGroupId));  if (UtilValidate.isNotEmpty(termUomId)) {    productPriceEcList.add(EntityCondition.makeCondition("termUomId",EntityOperator.EQUALS,termUomId));  }  EntityCondition productPriceEc=EntityCondition.makeCondition(productPriceEcList,EntityOperator.AND);  List<GenericValue> productPrices=null;  try {    productPrices=EntityQuery.use(delegator).from("ProductPrice").where(productPriceEc).orderBy("-fromDate").cache(true).queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,"An error occurred while getting the product prices",module);  }  productPrices=EntityUtil.filterByDate(productPrices,true);  GenericValue listPriceValue=getPriceValueForType("LIST_PRICE",productPrices,virtualProductPrices);  GenericValue defaultPriceValue=getPriceValueForType("DEFAULT_PRICE",productPrices,virtualProductPrices);  if (UtilValidate.isNotEmpty(agreementId)) {    try {      GenericValue agreementPriceValue=EntityQuery.use(delegator).from("AgreementItemAndProductAppl").where("agreementId",agreementId,"productId",productId,"currencyUomId",currencyDefaultUomId).queryFirst();      if (agreementPriceValue != null && agreementPriceValue.get("price") != null) {        defaultPriceValue=agreementPriceValue;      }    } catch (    GenericEntityException e) {      Debug.logError(e,"Error getting agreement info from the database while calculating price" + e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveAgreementInfo",UtilMisc.toMap("errorString",e.toString()),locale));    }  }  GenericValue competitivePriceValue=getPriceValueForType("COMPETITIVE_PRICE",productPrices,virtualProductPrices);  GenericValue averageCostValue=getPriceValueForType("AVERAGE_COST",productPrices,virtualProductPrices);  GenericValue promoPriceValue=getPriceValueForType("PROMO_PRICE",productPrices,virtualProductPrices);  GenericValue minimumPriceValue=getPriceValueForType("MINIMUM_PRICE",productPrices,virtualProductPrices);  GenericValue maximumPriceValue=getPriceValueForType("MAXIMUM_PRICE",productPrices,virtualProductPrices);  GenericValue wholesalePriceValue=getPriceValueForType("WHOLESALE_PRICE",productPrices,virtualProductPrices);  GenericValue specialPromoPriceValue=getPriceValueForType("SPECIAL_PROMO_PRICE",productPrices,virtualProductPrices);  if ("Y".equals(product.getString("isVirtual"))) {    if (defaultPriceValue == null) {      try {        List<GenericValue> variantAssocList=EntityQuery.use(delegator).from("ProductAssoc").where("productId",product.get("productId"),"productAssocTypeId","PRODUCT_VARIANT").orderBy("-fromDate").cache(true).filterByDate().queryList();        BigDecimal minDefaultPrice=null;        List<GenericValue> variantProductPrices=null;        for (        GenericValue variantAssoc : variantAssocList) {          String curVariantProductId=variantAssoc.getString("productIdTo");          List<GenericValue> curVariantPriceList=EntityQuery.use(delegator).from("ProductPrice").where("productId",curVariantProductId).orderBy("-fromDate").cache(true).filterByDate(nowTimestamp).queryList();          List<GenericValue> tempDefaultPriceList=EntityUtil.filterByAnd(curVariantPriceList,UtilMisc.toMap("productPriceTypeId","DEFAULT_PRICE"));          GenericValue curDefaultPriceValue=EntityUtil.getFirst(tempDefaultPriceList);          if (curDefaultPriceValue != null) {            BigDecimal curDefaultPrice=curDefaultPriceValue.getBigDecimal("price");            if (minDefaultPrice == null || curDefaultPrice.compareTo(minDefaultPrice) < 0) {              GenericValue curVariantProduct=EntityQuery.use(delegator).from("Product").where("productId",curVariantProductId).cache().queryOne();              if (curVariantProduct != null) {                Timestamp salesDiscontinuationDate=curVariantProduct.getTimestamp("salesDiscontinuationDate");                if (salesDiscontinuationDate == null || salesDiscontinuationDate.after(nowTimestamp)) {                  minDefaultPrice=curDefaultPrice;                  variantProductPrices=curVariantPriceList;                }              }            }          }        }        if (variantProductPrices != null) {          if (listPriceValue == null) {            listPriceValue=getPriceValueForType("LIST_PRICE",variantProductPrices,null);          }          if (defaultPriceValue == null) {            defaultPriceValue=getPriceValueForType("DEFAULT_PRICE",variantProductPrices,null);          }          if (competitivePriceValue == null) {            competitivePriceValue=getPriceValueForType("COMPETITIVE_PRICE",variantProductPrices,null);          }          if (averageCostValue == null) {            averageCostValue=getPriceValueForType("AVERAGE_COST",variantProductPrices,null);          }          if (promoPriceValue == null) {            promoPriceValue=getPriceValueForType("PROMO_PRICE",variantProductPrices,null);          }          if (minimumPriceValue == null) {            minimumPriceValue=getPriceValueForType("MINIMUM_PRICE",variantProductPrices,null);          }          if (maximumPriceValue == null) {            maximumPriceValue=getPriceValueForType("MAXIMUM_PRICE",variantProductPrices,null);          }          if (wholesalePriceValue == null) {            wholesalePriceValue=getPriceValueForType("WHOLESALE_PRICE",variantProductPrices,null);          }          if (specialPromoPriceValue == null) {            specialPromoPriceValue=getPriceValueForType("SPECIAL_PROMO_PRICE",variantProductPrices,null);          }        }      } catch (      GenericEntityException e) {        Debug.logError(e,"An error occurred while getting the product prices",module);      }    }  }  BigDecimal promoPrice=BigDecimal.ZERO;  if (promoPriceValue != null && promoPriceValue.get("price") != null) {    promoPrice=promoPriceValue.getBigDecimal("price");  }  BigDecimal wholesalePrice=BigDecimal.ZERO;  if (wholesalePriceValue != null && wholesalePriceValue.get("price") != null) {    wholesalePrice=wholesalePriceValue.getBigDecimal("price");  }  boolean validPriceFound=false;  BigDecimal defaultPrice=BigDecimal.ZERO;  List<GenericValue> orderItemPriceInfos=FastList.newInstance();  if (defaultPriceValue != null) {    if ("ProductPrice".equals(defaultPriceValue.getEntityName()) && UtilValidate.isNotEmpty(defaultPriceValue.getString("customPriceCalcService"))) {      GenericValue customMethod=null;      try {        customMethod=defaultPriceValue.getRelatedOne("CustomMethod",false);      } catch (      GenericEntityException gee) {        Debug.logError(gee,"An error occurred while getting the customPriceCalcService",module);      }      if (UtilValidate.isNotEmpty(customMethod) && UtilValidate.isNotEmpty(customMethod.getString("customMethodName"))) {        Map<String,Object> inMap=UtilMisc.toMap("userLogin",context.get("userLogin"),"product",product);        inMap.put("initialPrice",defaultPriceValue.getBigDecimal("price"));        inMap.put("currencyUomId",currencyDefaultUomId);        inMap.put("quantity",quantity);        inMap.put("amount",amount);        if (UtilValidate.isNotEmpty(surveyResponseId)) {          inMap.put("surveyResponseId",surveyResponseId);        }        if (UtilValidate.isNotEmpty(customAttributes)) {          inMap.put("customAttributes",customAttributes);        }        try {          Map<String,Object> outMap=dispatcher.runSync(customMethod.getString("customMethodName"),inMap);          if (!ServiceUtil.isError(outMap)) {            BigDecimal calculatedDefaultPrice=(BigDecimal)outMap.get("price");            orderItemPriceInfos=UtilGenerics.checkList(outMap.get("orderItemPriceInfos"));            if (UtilValidate.isNotEmpty(calculatedDefaultPrice)) {              defaultPrice=calculatedDefaultPrice;              validPriceFound=true;            }          }        } catch (        GenericServiceException gse) {          Debug.logError(gse,"An error occurred while running the customPriceCalcService [" + customMethod.getString("customMethodName") + "]",module);        }      }    }    if (!validPriceFound && defaultPriceValue.get("price") != null) {      defaultPrice=defaultPriceValue.getBigDecimal("price");      validPriceFound=true;    }  }  BigDecimal listPrice=listPriceValue != null ? listPriceValue.getBigDecimal("price") : null;  if (listPrice == null) {    BigDecimal maxSellPrice=maximumPriceValue != null ? maximumPriceValue.getBigDecimal("price") : null;    if (maxSellPrice != null && defaultPrice.compareTo(maxSellPrice) > 0) {      defaultPrice=maxSellPrice;    }    BigDecimal minSellPrice=minimumPriceValue != null ? minimumPriceValue.getBigDecimal("price") : null;    if (minSellPrice != null && defaultPrice.compareTo(minSellPrice) < 0) {      defaultPrice=minSellPrice;      validPriceFound=true;    }    result.put("basePrice",defaultPrice);    result.put("price",defaultPrice);    result.put("defaultPrice",defaultPrice);    result.put("competitivePrice",competitivePriceValue != null ? competitivePriceValue.getBigDecimal("price") : null);    result.put("averageCost",averageCostValue != null ? averageCostValue.getBigDecimal("price") : null);    result.put("promoPrice",promoPriceValue != null ? promoPriceValue.getBigDecimal("price") : null);    result.put("specialPromoPrice",specialPromoPriceValue != null ? specialPromoPriceValue.getBigDecimal("price") : null);    result.put("validPriceFound",Boolean.valueOf(validPriceFound));    result.put("isSale",Boolean.FALSE);    result.put("orderItemPriceInfos",orderItemPriceInfos);    Map<String,Object> errorResult=addGeneralResults(result,competitivePriceValue,specialPromoPriceValue,productStore,checkIncludeVat,currencyDefaultUomId,productId,quantity,partyId,dispatcher,locale);    if (errorResult != null)     return errorResult;  } else {    try {      List<GenericValue> allProductPriceRules=makeProducePriceRuleList(delegator,optimizeForLargeRuleSet,productId,virtualProductId,prodCatalogId,productStoreGroupId,webSiteId,partyId,currencyDefaultUomId);      allProductPriceRules=EntityUtil.filterByDate(allProductPriceRules,true);      List<GenericValue> quantityProductPriceRules=null;      List<GenericValue> nonQuantityProductPriceRules=null;      if (findAllQuantityPrices) {        quantityProductPriceRules=FastList.newInstance();        nonQuantityProductPriceRules=FastList.newInstance();        for (        GenericValue productPriceRule : allProductPriceRules) {          List<GenericValue> productPriceCondList=EntityQuery.use(delegator).from("ProductPriceCond").where("productPriceRuleId",productPriceRule.get("productPriceRuleId")).cache(true).queryList();          boolean foundQuantityInputParam=false;          boolean allExceptQuantTrue=true;          for (          GenericValue productPriceCond : productPriceCondList) {            if ("PRIP_QUANTITY".equals(productPriceCond.getString("inputParamEnumId"))) {              foundQuantityInputParam=true;            } else {              if (!checkPriceCondition(productPriceCond,productId,virtualProductId,prodCatalogId,productStoreGroupId,webSiteId,partyId,quantity,listPrice,currencyDefaultUomId,delegator,nowTimestamp)) {                allExceptQuantTrue=false;              }            }          }          if (foundQuantityInputParam && allExceptQuantTrue) {            quantityProductPriceRules.add(productPriceRule);          } else {            nonQuantityProductPriceRules.add(productPriceRule);          }        }      }      if (findAllQuantityPrices) {        List<Map<String,Object>> allQuantityPrices=FastList.newInstance();        for (        GenericValue quantityProductPriceRule : quantityProductPriceRules) {          List<GenericValue> ruleListToUse=FastList.newInstance();          ruleListToUse.add(quantityProductPriceRule);          ruleListToUse.addAll(nonQuantityProductPriceRules);          Map<String,Object> quantCalcResults=calcPriceResultFromRules(ruleListToUse,listPrice,defaultPrice,promoPrice,wholesalePrice,maximumPriceValue,minimumPriceValue,validPriceFound,averageCostValue,productId,virtualProductId,prodCatalogId,productStoreGroupId,webSiteId,partyId,null,currencyDefaultUomId,delegator,nowTimestamp,locale);          Map<String,Object> quantErrorResult=addGeneralResults(quantCalcResults,competitivePriceValue,specialPromoPriceValue,productStore,checkIncludeVat,currencyDefaultUomId,productId,quantity,partyId,dispatcher,locale);          if (quantErrorResult != null)           return quantErrorResult;          quantCalcResults.put("quantityProductPriceRule",quantityProductPriceRule);          allQuantityPrices.add(quantCalcResults);        }        result.put("allQuantityPrices",allQuantityPrices);        Map<String,Object> calcResults=calcPriceResultFromRules(allProductPriceRules,listPrice,defaultPrice,promoPrice,wholesalePrice,maximumPriceValue,minimumPriceValue,validPriceFound,averageCostValue,productId,virtualProductId,prodCatalogId,productStoreGroupId,webSiteId,partyId,BigDecimal.ONE,currencyDefaultUomId,delegator,nowTimestamp,locale);        result.putAll(calcResults);        List<GenericValue> orderItemPriceInfosFromRule=UtilGenerics.checkList(calcResults.get("orderItemPriceInfos"));        if (UtilValidate.isNotEmpty(orderItemPriceInfosFromRule)) {          orderItemPriceInfos.addAll(orderItemPriceInfosFromRule);        }        result.put("orderItemPriceInfos",orderItemPriceInfos);        Map<String,Object> errorResult=addGeneralResults(result,competitivePriceValue,specialPromoPriceValue,productStore,checkIncludeVat,currencyDefaultUomId,productId,quantity,partyId,dispatcher,locale);        if (errorResult != null)         return errorResult;      } else {        Map<String,Object> calcResults=calcPriceResultFromRules(allProductPriceRules,listPrice,defaultPrice,promoPrice,wholesalePrice,maximumPriceValue,minimumPriceValue,validPriceFound,averageCostValue,productId,virtualProductId,prodCatalogId,productStoreGroupId,webSiteId,partyId,quantity,currencyDefaultUomId,delegator,nowTimestamp,locale);        result.putAll(calcResults);        List<GenericValue> orderItemPriceInfosFromRule=UtilGenerics.checkList(calcResults.get("orderItemPriceInfos"));        if (UtilValidate.isNotEmpty(orderItemPriceInfosFromRule)) {          orderItemPriceInfos.addAll(orderItemPriceInfosFromRule);        }        result.put("orderItemPriceInfos",orderItemPriceInfos);        Map<String,Object> errorResult=addGeneralResults(result,competitivePriceValue,specialPromoPriceValue,productStore,checkIncludeVat,currencyDefaultUomId,productId,quantity,partyId,dispatcher,locale);        if (errorResult != null)         return errorResult;      }    } catch (    GenericEntityException e) {      Debug.logError(e,"Error getting rules from the database while calculating price",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrievePriceRules",UtilMisc.toMap("errorString",e.toString()),locale));    }  }  if ("true".equals(EntityUtilProperties.getPropertyValue("catalog.properties","convertProductPriceCurrency",delegator))) {    if (UtilValidate.isNotEmpty(currencyDefaultUomId) && UtilValidate.isNotEmpty(currencyUomIdTo) && !currencyDefaultUomId.equals(currencyUomIdTo)) {      if (UtilValidate.isNotEmpty(result)) {        Map<String,Object> convertPriceMap=FastMap.newInstance();        for (        Map.Entry<String,Object> entry : result.entrySet()) {          BigDecimal tempPrice=BigDecimal.ZERO;          if (entry.getKey() == "basePrice")           tempPrice=(BigDecimal)entry.getValue(); else           if (entry.getKey() == "price")           tempPrice=(BigDecimal)entry.getValue(); else           if (entry.getKey() == "defaultPrice")           tempPrice=(BigDecimal)entry.getValue(); else           if (entry.getKey() == "competitivePrice")           tempPrice=(BigDecimal)entry.getValue(); else           if (entry.getKey() == "averageCost")           tempPrice=(BigDecimal)entry.getValue(); else           if (entry.getKey() == "promoPrice")           tempPrice=(BigDecimal)entry.getValue(); else           if (entry.getKey() == "specialPromoPrice")           tempPrice=(BigDecimal)entry.getValue(); else           if (entry.getKey() == "listPrice")           tempPrice=(BigDecimal)entry.getValue();          if (tempPrice != null && tempPrice != BigDecimal.ZERO) {            Map<String,Object> priceResults=FastMap.newInstance();            try {              priceResults=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",currencyDefaultUomId,"uomIdTo",currencyUomIdTo,"originalValue",tempPrice,"defaultDecimalScale",Long.valueOf(2),"defaultRoundingMode","HalfUp"));              if (ServiceUtil.isError(priceResults) || (priceResults.get("convertedValue") == null)) {                Debug.logWarning("Unable to convert " + entry.getKey() + " for product  "+ productId,module);              }            } catch (            GenericServiceException e) {              Debug.logError(e,module);            }            convertPriceMap.put(entry.getKey(),priceResults.get("convertedValue"));          } else {            convertPriceMap.put(entry.getKey(),entry.getValue());          }        }        if (UtilValidate.isNotEmpty(convertPriceMap)) {          convertPriceMap.put("currencyUsed",currencyUomIdTo);          result=convertPriceMap;        }      }    }  }  return result;}  }
class C{  public PhotosSaveQuery caption(String value){  return unsafeParam("caption",value);}  }
class C{  public static <T>Set<T> toSet(T obj1,T obj2){  Set<T> theSet=new LinkedHashSet<T>();  theSet.add(obj1);  theSet.add(obj2);  return theSet;}  }
class C{  public boolean isStepCompleted(int stepNumber){  return completedSteps[stepNumber];}  }
class C{  public JsonNodeELResolver(boolean readOnly){  this.readOnly=readOnly;}  }
class C{  public ConfigurationException(int errCode,Exception exception){  this(errCode,null,exception);}  }
class C{  public SparseArray(int initialCapacity){  mKeys=new int[initialCapacity];  mValues=new Object[initialCapacity];  mSize=0;}  }
class C{  public synchronized void writeTo(OutputStream out) throws IOException {  int remaining=count;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    out.write(buf,0,c);    remaining-=c;    if (remaining == 0) {      break;    }  }}  }
class C{  public static void ensureCredentialsHaveBeenLoadedFromProperties(){  if (!loaded) {    final String[] credentials=ProgramProperties.get("MeganServerCredentials",new String[0]);    for (    String line : credentials) {      String[] tokens=line.split("::");      if (tokens.length > 0) {        server2Credentials.put(tokens[0],new Pair<>(tokens.length > 1 ? tokens[1] : "",Basic.toString(Base64.decodeBase64((tokens.length > 2 ? tokens[2] : "")))));      }    }    loaded=true;  }}  }
class C{  public MasterView(String name,String description,JComponent view){  this.name=name;  this.description=description;  this.view=view;}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  private static int findInsertionIndex(final int[] keys,final byte[] states,final int key,final int mask){  final int hash=hashOf(key);  int index=hash & mask;  if (states[index] == FREE) {    return index;  } else   if (states[index] == FULL && keys[index] == key) {    return changeIndexSign(index);  }  int perturb=perturb(hash);  int j=index;  if (states[index] == FULL) {    while (true) {      j=probe(perturb,j);      index=j & mask;      perturb>>=PERTURB_SHIFT;      if (states[index] != FULL || keys[index] == key) {        break;      }    }  }  if (states[index] == FREE) {    return index;  } else   if (states[index] == FULL) {    return changeIndexSign(index);  }  final int firstRemoved=index;  while (true) {    j=probe(perturb,j);    index=j & mask;    if (states[index] == FREE) {      return firstRemoved;    } else     if (states[index] == FULL && keys[index] == key) {      return changeIndexSign(index);    }    perturb>>=PERTURB_SHIFT;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_INTERVAL_A_TO_ME(int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200672,num0,skillcaster,skillname);}  }
class C{  public static List<? extends Node> childNodeList(Node node){  if (node == null)   return null;  List<Node> nodes=new LinkedList<Node>();  do {    if (node.getNodeType() == Node.ELEMENT_NODE || node.getNodeType() == Node.COMMENT_NODE) {      nodes.add(node);    }  } while ((node=node.getNextSibling()) != null);  return nodes;}  }
class C{  public SnapshotCategory(String name,Class<X> type,String prefix,String suffix,int preferredPosition){  super();  this.name=name;  this.type=type;  this.prefix=prefix;  this.suffix=suffix;  this.preferredPosition=preferredPosition;}  }
class C{  public void addRecord(Record record){  this.numRecords++;  int count=0;  for (  DataType value : record.getValues()) {switch (value.type()) {case INT:      this.histograms.get(count).addValue(value.getInt());    break;case STRING:  this.histograms.get(count).addValue(value.getString());break;case BOOL:this.histograms.get(count).addValue(value.getBool());break;case FLOAT:this.histograms.get(count).addValue(value.getFloat());break;default :break;}count++;}}  }
class C{  private static void convertXMLtoProperty(Node n,Map prop,boolean isConvertToSystemProperty){  NodeList nl=n.getChildNodes();  for (int i=0; i < nl.getLength(); i++) {    Node node=nl.item(i);    if (node.getNodeType() == Node.TEXT_NODE && node.getNodeValue().trim().length() > 0)     buildProperty(node,prop,isConvertToSystemProperty); else     convertXMLtoProperty(node,prop,isConvertToSystemProperty);  }}  }
class C{  private void updateArrow(){  path1.reset();  path2.reset();  path3.reset();  path1.moveTo(mRealLeft + radius,mArrowStart);  path1.lineTo(mRealLeft + radius,mArrowStart + radius);  path2.moveTo(mRealLeft + radius,mArrowStart + radius);  path2.lineTo((float)(mRealLeft + radius - Math.tan(Math.toRadians(40)) * radius * 0.46f),mArrowStart + radius - radius * .46f);  path3.moveTo(mRealLeft + radius,mArrowStart + radius);  path3.lineTo((float)(mRealLeft + radius + Math.tan(Math.toRadians(40)) * radius * 0.46f),mArrowStart + radius - radius * .46f);  pathMeasure1.setPath(path1,false);  pathMeasure2.setPath(path2,false);  pathMeasure3.setPath(path3,false);  mArrow_center_length=pathMeasure1.getLength();  mArrow_left_length=pathMeasure2.getLength();  mArrow_right_length=pathMeasure3.getLength();}  }
class C{  public boolean initialiseNative(String resourcesDirectoryPath){  if (!loadedNative)   return false;  if (!NativeInterface.arwInitialiseAR()) {    Log.e(TAG,"Error initialising native library!");    return false;  }  Log.i(TAG,"ARToolKit version: " + NativeInterface.arwGetARToolKitVersion());  if (!NativeInterface.arwChangeToResourcesDir(resourcesDirectoryPath)) {    Log.i(TAG,"Error while attempting to change working directory to resources directory.");  }  initedNative=true;  return true;}  }
class C{  public static boolean isCurrent(){  return currentThread() == thread;}  }
class C{  public boolean hasRenderSymbolBeenCalled(){  boolean tmp=renderSymbolCalled;  renderSymbolCalled=false;  return tmp;}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);  getSupportActionBar().setTitle(getString(R.string.app_name));}  }
class C{  public ShapelessRecipe removeIngredient(int count,MaterialData ingredient){  return removeIngredient(count,ingredient.getItemType(),ingredient.getData());}  }
class C{  public void register(String key,Block... values){  for (  Block value : values) {    register(key,value);  }}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];        fileCount++;      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public static <T>void addService(ProviderConfig<T> providerConfig) throws RpcException {  if (StringUtils.isBlank(providerConfig.getUrl())) {    providerConfig.setUrl(getServiceUrl(providerConfig));  } else   if (providerConfig.isSupported() && !getServiceUrl(providerConfig).equals(providerConfig.getUrl())) {    logger.warn("customized [serviceName] cannot provide service to OCTO invoker " + "unless set the [serviceName] to canonical name of the interface class " + "or just keep [serviceName] config to blank. more help refer to: "+ ConfigManagerLoader.getConfigManager().getStringValue("pigeon.help.provider.octo.url","http://wiki.sankuai.com/pages/viewpage.action?pageId=606809899"));  }  try {    ServicePublisher.addService(providerConfig);    ServerConfig serverConfig=ProviderBootStrap.startup(providerConfig);    providerConfig.setServerConfig(serverConfig);    ServicePublisher.publishService(providerConfig,false);  } catch (  RegistryException t) {    throw new RpcException("error while adding service:" + providerConfig,t);  }catch (  Throwable t) {    throw new RpcException("error while adding service:" + providerConfig,t);  }}  }
class C{  public ConfigurationChangeEventReport(){  this(DEFAULT_INITIAL_CAPACITY);}  }
class C{  public GroupsEditQuery eventGroupId(Integer value){  return unsafeParam("event_group_id",value);}  }
class C{  protected PhotosCreateAlbumQuery title(String value){  return unsafeParam("title",value);}  }
class C{  private Node traverseCharacterDataNode(Node n,boolean isLeft,int how){  String txtValue=n.getNodeValue();  String newNodeValue;  String oldNodeValue;  if (isLeft) {    int offset=getStartOffset();    newNodeValue=txtValue.substring(offset);    oldNodeValue=txtValue.substring(0,offset);  } else {    int offset=getEndOffset();    newNodeValue=txtValue.substring(0,offset);    oldNodeValue=txtValue.substring(offset);  }  if (how != CLONE_CONTENTS)   n.setNodeValue(oldNodeValue);  if (how == DELETE_CONTENTS)   return null;  Node newNode=n.cloneNode(false);  newNode.setNodeValue(newNodeValue);  return newNode;}  }
class C{  public static HashSet Inv(TypeDecl G,ArrayList Us){  HashSet result=new HashSet();  for (Iterator iter=Us.iterator(); iter.hasNext(); ) {    TypeDecl U=(TypeDecl)iter.next();    for (Iterator i2=LUBType.ST(U).iterator(); i2.hasNext(); ) {      TypeDecl V=(TypeDecl)i2.next();      if (V instanceof ParTypeDecl && !V.isRawType() && ((ParTypeDecl)V).genericDecl() == G)       result.add(V);    }  }  return result;}  }
class C{  public SimpleBroadcastChannel(Subject<T,T> notifications){  this.notifications=notifications;  this.isClosedLock=new ReentrantReadWriteLock();  this.isClosed=false;}  }
class C{  @Override public SpaceCopyStatus spaceCopy(String remoteUrl,Object template,boolean includeNotifyTemplates,int chunkSize){  throw new UnsupportedOperationException("shouldn't of come here ...");}  }
class C{  public UsersExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  @SuppressWarnings("deprecation") public NotExtended(){  super();}  }
class C{  public GroupsIsMemberQueryWithUserIdsExtended(VkApiClient client,String groupId,Integer... userIds){  super(client,"groups.isMember",Utils.buildParametrizedType(List.class,MemberStatusFull.class));  groupId(groupId);  extended(true);  userIds(userIds);}  }
class C{  public double cond(){  return s[0] / s[Math.min(m,n) - 1];}  }
class C{  public static void print(double x){  out.print(x);  out.flush();}  }
class C{  public static void addSubscriber(Workflow workflow,Consumer<Object> onNext,Consumer<Throwable> onError){  addSubscriber(workflow,onNext,null,onError);}  }
class C{  public void addViewProvider(DataSourceViewProvider provider,Class<? extends DataSource> scope){  providers.put(provider,scope);}  }
class C{  public ZWaveMultiLevelSensorCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);  versionMax=MAX_SUPPORTED_VERSION;}  }
class C{  public AsyncTabCreationParams(LoadUrlParams loadUrlParams){  this(loadUrlParams,null,null,null);}  }
class C{  public void addActionItem(ActionItem action){  actionList.add(action);}  }
class C{  public static void translucentStatusBar(Activity activity,boolean hideStatusBarBackground){  Window window=activity.getWindow();  ViewGroup mContentView=(ViewGroup)activity.findViewById(Window.ID_ANDROID_CONTENT);  View mChildView=mContentView.getChildAt(0);  if (mChildView != null) {    ViewCompat.setFitsSystemWindows(mChildView,false);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    int statusBarHeight=getStatusBarHeight(activity);    window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {      window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);      if (hideStatusBarBackground) {        window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);        window.setStatusBarColor(COLOR_TRANSLUCENT);      } else {        window.setStatusBarColor(calculateStatusBarColor(COLOR_TRANSLUCENT,DEFAULT_COLOR_ALPHA));      }      if (mChildView != null) {        ViewCompat.requestApplyInsets(mChildView);      }    } else {      ViewGroup mDecorView=(ViewGroup)window.getDecorView();      if (mDecorView.getTag() != null && mDecorView.getTag() instanceof Boolean && (Boolean)mDecorView.getTag()) {        mChildView=mDecorView.getChildAt(0);        mContentView.removeView(mChildView);        mChildView=mContentView.getChildAt(0);        if (mChildView != null) {          FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mChildView.getLayoutParams();          if (lp != null && lp.topMargin >= statusBarHeight) {            lp.topMargin-=statusBarHeight;            mChildView.setLayoutParams(lp);          }        }        mDecorView.setTag(false);      }    }  }}  }
class C{  @Override public void xmlDecl(String version,String encoding,String standalone,Augmentations augs) throws XNIException {}  }
class C{  private UndoManager(){  reset();}  }
class C{  private RealDistribution findKernel(double lower,double upper){  if (lower < 1) {    return new NormalDistribution(5d,3.3166247903554);  } else {    return new NormalDistribution((upper + lower + 1) / 2d,3.0276503540974917);  }}  }
class C{  public SchedulingContextFactory schedulingContextFactory(){  return schedulingContextFactory;}  }
class C{  public BoardGetCommentsQuery(VkApiClient client,int groupId,int topicId){  super(client,"board.getComments",GetCommentsResponse.class);  groupId(groupId);  topicId(topicId);}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  public GSTextMessageImpl(GSSessionImpl session) throws JMSException {  this(session,null);}  }
class C{  private static void midPoint(PointF point,MotionEvent event){  float x=event.getX(0) + event.getX(1);  float y=event.getY(0) + event.getY(1);  point.set(x / 2f,y / 2f);}  }
class C{  @Override public final void writeBoolean(boolean v) throws IOException {  dis.writeBoolean(v);}  }
class C{  public void move(RectF rect,float x,float y,RectF bounds,int viewWidth,int viewHeight,float snapMargin,boolean fixedAspectRatio,float aspectRatio){  float adjX=x + mTouchOffset.x;  float adjY=y + mTouchOffset.y;  if (mType == Type.CENTER) {    moveCenter(rect,adjX,adjY,bounds,viewWidth,viewHeight,snapMargin);  } else {    if (fixedAspectRatio) {      moveSizeWithFixedAspectRatio(rect,adjX,adjY,bounds,viewWidth,viewHeight,snapMargin,aspectRatio);    } else {      moveSizeWithFreeAspectRatio(rect,adjX,adjY,bounds,viewWidth,viewHeight,snapMargin);    }  }}  }
class C{  public static String toHex(byte[] data){  return new String(Hex.encodeHex(data));}  }
class C{  @Override public byte item(int index) throws XSException {  if (index < 0 || index > data.length - 1) {    throw new XSException(XSException.INDEX_SIZE_ERR,null);  }  return data[index];}  }
class C{  <T>T onMin(String tableName,String column,String[] conditions,Class<T> type){  return mathQuery(tableName,new String[]{"min(" + column + ")"},conditions,type);}  }
class C{  public void addScrollingListener(OnWheelScrollListener listener){  scrollingListeners.add(listener);}  }
class C{  public synchronized void updateObjectPose(float[] planeFitTransform){  objectTransform=new Matrix4(planeFitTransform);  objectPoseUpdated=true;}  }
class C{  @Override public String toString(){  return toString(false);}  }
class C{  private static int encodeText(CharSequence msg,int startpos,int count,StringBuilder sb,int initialSubmode){  StringBuilder tmp=new StringBuilder(count);  int submode=initialSubmode;  int idx=0;  while (true) {    char ch=msg.charAt(startpos + idx);switch (submode) {case SUBMODE_ALPHA:      if (isAlphaUpper(ch)) {        if (ch == ' ') {          tmp.append((char)26);        } else {          tmp.append((char)(ch - 65));        }      } else {        if (isAlphaLower(ch)) {          submode=SUBMODE_LOWER;          tmp.append((char)27);          continue;        } else         if (isMixed(ch)) {          submode=SUBMODE_MIXED;          tmp.append((char)28);          continue;        } else {          tmp.append((char)29);          tmp.append((char)PUNCTUATION[ch]);          break;        }      }    break;case SUBMODE_LOWER:  if (isAlphaLower(ch)) {    if (ch == ' ') {      tmp.append((char)26);    } else {      tmp.append((char)(ch - 97));    }  } else {    if (isAlphaUpper(ch)) {      tmp.append((char)27);      tmp.append((char)(ch - 65));      break;    } else     if (isMixed(ch)) {      submode=SUBMODE_MIXED;      tmp.append((char)28);      continue;    } else {      tmp.append((char)29);      tmp.append((char)PUNCTUATION[ch]);      break;    }  }break;case SUBMODE_MIXED:if (isMixed(ch)) {tmp.append((char)MIXED[ch]);} else {if (isAlphaUpper(ch)) {  submode=SUBMODE_ALPHA;  tmp.append((char)28);  continue;} else if (isAlphaLower(ch)) {  submode=SUBMODE_LOWER;  tmp.append((char)27);  continue;} else {  if (startpos + idx + 1 < count) {    char next=msg.charAt(startpos + idx + 1);    if (isPunctuation(next)) {      submode=SUBMODE_PUNCTUATION;      tmp.append((char)25);      continue;    }  }  tmp.append((char)29);  tmp.append((char)PUNCTUATION[ch]);}}break;default :if (isPunctuation(ch)) {tmp.append((char)PUNCTUATION[ch]);} else {submode=SUBMODE_ALPHA;tmp.append((char)29);continue;}}idx++;if (idx >= count) {break;}}char h=0;int len=tmp.length();for (int i=0; i < len; i++) {boolean odd=(i % 2) != 0;if (odd) {h=(char)((h * 30) + tmp.charAt(i));sb.append(h);} else {h=tmp.charAt(i);}}if ((len % 2) != 0) {sb.append((char)((h * 30) + 29));}return submode;}  }
class C{  protected String millisecondsToYearWeek(long millis){  return getSimpleDateFormatForMilliseconds("yyyy-'W'ww",millis);}  }
class C{  public static boolean hasHoneycomb(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB;}  }
class C{  private Optional<Class<?>> unwrap(Object pageObject){  Class<?> wrappedClass=pageObject.getClass();  while (wrappedClass != null && !wrappedClass.isAnnotationPresent(PageObject.class)) {    wrappedClass=wrappedClass.getSuperclass();  }  return Optional.ofNullable(wrappedClass);}  }
class C{  public void stop(){  eventLogThread.interrupt();  LOGGER.info("Interrupted " + eventLogThread.getName() + " with ID "+ eventLogThread.getId()+ ".");  try {    eventLogThread.join(5000);    LOGGER.info(eventLogThread.getName() + " with ID " + eventLogThread.getId()+ " joined.");  } catch (  InterruptedException e) {    LOGGER.warn("Was interrupted while joining " + eventLogThread.getName() + ".",e);  }}  }
class C{  public void run(){  ThreadingUtils.logThreadStarting("Reconnection Manager");  running=true;  while (running) {synchronized (connections) {      oneCycle();    }    if (ThreadingUtils.sleep(SLEEP)) {      break;    }  }  ThreadingUtils.logThreadEnding();}  }
class C{  protected Ticket newTicket(long when,Runnable task,ThreadDesc threadDesc){synchronized (contents) {    return new Ticket(when,task,threadDesc,nextBreaker++);  }}  }
class C{  public static void print(char x){  out.print(x);  out.flush();}  }
class C{  @Nullable private static String retrieveRemoteVersion(@Nonnull final URL url,@Nonnull final Charset charset) throws IOException {  final InputStream stream=url.openStream();  final InputStreamReader reader=new InputStreamReader(stream,charset);  final LineNumberReader lnr=new LineNumberReader(reader);  final String line=lnr.readLine();  lnr.close();  reader.close();  stream.close();  return line;}  }
class C{  public GroupsSetCallbackSettingsQuery groupLeave(Boolean value){  return unsafeParam("group_leave",value);}  }
class C{  public static short sign(final short x){  return (x == ZS) ? ZS : (x > ZS) ? PS : NS;}  }
class C{  private static String doNormalize(String filename,char separator,boolean keepSeparator){  if (filename == null) {    return null;  }  int size=filename.length();  if (size == 0) {    return filename;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  char[] array=new char[size + 2];  filename.getChars(0,filename.length(),array,0);  char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;  for (int i=0; i < array.length; i++) {    if (array[i] == otherSeparator) {      array[i]=separator;    }  }  boolean lastIsDirectory=true;  if (array[size - 1] != separator) {    array[size++]=separator;    lastIsDirectory=false;  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == separator) {      System.arraycopy(array,i,array,i - 1,size - i);      size--;      i--;    }  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {      if (i == size - 1) {        lastIsDirectory=true;      }      System.arraycopy(array,i + 1,array,i - 1,size - i);      size-=2;      i--;    }  }  outer:   for (int i=prefix + 2; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {      if (i == prefix + 2) {        return null;      }      if (i == size - 1) {        lastIsDirectory=true;      }      int j;      for (j=i - 4; j >= prefix; j--) {        if (array[j] == separator) {          System.arraycopy(array,i + 1,array,j + 1,size - i);          size-=i - j;          i=j + 1;          continue outer;        }      }      System.arraycopy(array,i + 1,array,prefix,size - i);      size-=i + 1 - prefix;      i=prefix + 1;    }  }  if (size <= 0) {    return "";  }  if (size <= prefix) {    return new String(array,0,size);  }  if (lastIsDirectory && keepSeparator) {    return new String(array,0,size);  }  return new String(array,0,size - 1);}  }
class C{  @Nullable public static Sdk createNewAndroidPlatform(@Nullable String sdkPath,boolean promptUser){  Sdk jdk=chooseOrCreateJavaSdk();  if (sdkPath != null && jdk != null) {    sdkPath=toSystemIndependentName(sdkPath);    IAndroidTarget target=findBestTarget(sdkPath);    if (target != null) {      Sdk sdk=createNewAndroidPlatform(target,sdkPath,chooseNameForNewLibrary(target),jdk,true);      if (sdk != null) {        return sdk;      }    }  }  String jdkPath=jdk == null ? null : jdk.getHomePath();  return promptUser ? promptUserForSdkCreation(null,sdkPath,jdkPath) : null;}  }
class C{  public BinarySearchTree(boolean selfBalancing){  this.root=null;  this.size=0;  this.selfBalancing=selfBalancing;}  }
class C{  protected FaveRemoveGroupQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public GSTopicSubscriberImpl(GSSessionImpl sess,GSTopicImpl topic,String consumerKey,String subName,String selector,boolean noLocal) throws JMSException {  super(sess,topic,consumerKey,subName,selector,noLocal);}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public void show(){  mContentView.setVisibility(View.VISIBLE);}  }
class C{  public final int cursor(){  return cursor;}  }
class C{  @RequestMapping(value=ClientUris.UN_REGISTER,method=RequestMethod.GET) public void unRegister(){  ClientSession clientSession=ClientContext.get();  assert clientSession != null;  clientService.unRegisterClient(clientSession.getId());}  }
class C{  public void release(){  if (_entries != null)   _entries.freeSLHolder(_pos);  _pos=null;  _entries=null;}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  private soot.Local createCatchFormal(polyglot.ast.Formal formal){  soot.Type sootType=Util.getSootType(formal.type().type());  soot.Local formalLocal=createLocal(formal.localInstance());  soot.jimple.CaughtExceptionRef exceptRef=soot.jimple.Jimple.v().newCaughtExceptionRef();  soot.jimple.Stmt stmt=soot.jimple.Jimple.v().newIdentityStmt(formalLocal,exceptRef);  body.getUnits().add(stmt);  Util.addLnPosTags(stmt,formal.position());  Util.addLnPosTags(((soot.jimple.IdentityStmt)stmt).getRightOpBox(),formal.position());  ArrayList<String> names=new ArrayList<String>();  names.add(formal.name());  stmt.addTag(new soot.tagkit.ParamNamesTag(names));  return formalLocal;}  }
class C{  public void fireIterationPerformedEvent(final IterationEvent e){  for (  IterationListener l : listeners) {    l.iterationPerformed(e);  }}  }
class C{  public static SettingsFragment newInstance(String param1,String param2){  SettingsFragment fragment=new SettingsFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  private List<Command> parseXmlCommands(String xmlString) throws Exception {  List<Command> commands=new ArrayList<>();  Serializer serializer=new Persister();  CommandList commandList=serializer.read(CommandList.class,xmlString);  for (  Command command : commandList.getCommands()) {    commands.add(command);  }  return commands;}  }
class C{  int[] decodeEnd(BitArray row) throws NotFoundException {  row.reverse();  try {    int endStart=skipWhiteSpace(row);    int[] endPattern=findGuardPattern(row,endStart,END_PATTERN_REVERSED);    validateQuietZone(row,endPattern[0]);    int temp=endPattern[0];    endPattern[0]=row.getSize() - endPattern[1];    endPattern[1]=row.getSize() - temp;    return endPattern;  }  finally {    row.reverse();  }}  }
class C{  private JsonObject internal_createSymbol(ISymbol symbol){  JsonObject jsonSymbol=null;  if (symbol != null) {    EsriSymbolInterface symbolConverter=data.getSymbol(symbol.getClass());    if (symbolConverter != null) {      jsonSymbol=symbolConverter.convert(symbol);    } else {      System.err.println("Unsupported symbol : " + symbol.getClass().getName());    }  }  return jsonSymbol;}  }
class C{  public static String readInputStream(InputStream is,String encoding) throws IOException {  ByteArrayOutputStream bos=null;  try {    bos=new ByteArrayOutputStream();    readInputStream(bos,is);  }  finally {    if (null != bos) {      bos.close();    }  }  if (null != bos) {    return bos.toString(encoding);  }  return null;}  }
class C{  public DelimitedTextTableWriter(String delimiter){  this(delimiter,true);}  }
class C{  public DataParseException(Throwable cause){  super(cause);}  }
class C{  public SegmentTemplateParameterContext initSegment(SegmentUUID uuid){  if (!segments.containsKey(uuid)) {    int segmNum=segments.size();    doAddParameter(uuid,SegmentContextParameters.UUID,uuid.getUuid());    doAddParameter(uuid,SegmentContextParameters.NUM,String.valueOf(segmNum));  }  return this;}  }
class C{  protected GroupByQuery buildGroupByQuery(TemplateDruidQuery template,PhysicalTable table,Granularity granularity,DateTimeZone timeZone,Set<Dimension> groupByDimensions,Filter filter,Having having,Set<Interval> intervals,LimitSpec druidOrderBy){  LOG.trace("Building druid groupBy query with following parameters \n" + "TemplateDruidQuery: {} \n" + "TimeGrain: {} \n"+ "TimeZone: {} \n"+ "Table: {} \n"+ "Group by dimensions: {} \n"+ "Filter: {} \n"+ "Intervals: {} \n",template,granularity,timeZone,table,groupByDimensions,filter,intervals);  if (template.getTimeGrain() != null) {    granularity=template.getTimeGrain().buildZonedTimeGrain(timeZone);  }  if (!template.isNested()) {    LOG.trace("Building a single pass druid groupBy query");    DataSource dataSource=new TableDataSource(table);    return new GroupByQuery(dataSource,granularity,groupByDimensions,filter,having,template.getAggregations(),template.getPostAggregations(),intervals,druidOrderBy);  }  LOG.trace("Building a multi pass druid groupBy query");  TemplateDruidQuery nestedQuery=template.getInnerQuery();  GroupByQuery query=buildGroupByQuery(nestedQuery,table,granularity,timeZone,groupByDimensions,filter,having,intervals,(LimitSpec)null);  DataSource dataSource=new QueryDataSource(query);  return new GroupByQuery(dataSource,granularity,groupByDimensions,(Filter)null,having,template.getAggregations(),template.getPostAggregations(),intervals,druidOrderBy);}  }
class C{  protected void removeAt(int index){  _values[index]=null;  super.removeAt(index);}  }
class C{  private BezierView buildBezierView(){  BezierView bezierView=new BezierView(context,spaceBackgroundColor);  bezierView.build(centreContentWight,spaceNavigationHeight - mainContentHeight);  return bezierView;}  }
class C{  static Bitmap resampleIconBitmap(Bitmap bitmap,Context context){synchronized (sCanvas) {    if (sIconWidth == -1) {      initStatics(context);    }    if (bitmap.getWidth() == sIconWidth && bitmap.getHeight() == sIconHeight) {      return bitmap;    } else {      final Resources resources=context.getResources();      return createIconBitmap(new BitmapDrawable(resources,bitmap),context);    }  }}  }
class C{  void cancelDisplayTaskFor(ImageAware imageAware){  cacheKeysForImageAwares.remove(imageAware.getId());}  }
class C{  @Override public void populateExpression(Object objValue){  if (externalGraphicPanel != null) {    if (objValue instanceof String) {      externalGraphicPanel.populateExpression((String)objValue);    }  }}  }
class C{  public LookbackQuery withInnerQueryPostAggregations(Collection<PostAggregation> postAggregations){  return new LookbackQuery(new QueryDataSource(getInnerQuery().withPostAggregations(postAggregations)),granularity,filter,aggregations,getLookbackPostAggregations(),intervals,context,false,lookbackOffsets,lookbackPrefixes,having,limitSpec);}  }
class C{  public AdamsMoultonFieldIntegrator(final Field<T> field,final int nSteps,final double minStep,final double maxStep,final double[] vecAbsoluteTolerance,final double[] vecRelativeTolerance) throws IllegalArgumentException {  super(field,METHOD_NAME,nSteps,nSteps + 1,minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);}  }
class C{  public TObjectShortHashMap(){  super();}  }
class C{  private static int[] computeDetectionThreshold(int numberOfSamples,Map<Integer,Integer[]> srcClass2counts,float detectionThresholdPercent){  final int[] array=new int[numberOfSamples];  if (detectionThresholdPercent > 0) {    for (    Integer id : srcClass2counts.keySet()) {      if (id > 0) {        final Integer[] counts=srcClass2counts.get(id);        if (counts != null) {          for (int i=0; i < counts.length; i++) {            array[i]+=counts[i];          }        }      }    }    for (int i=0; i < array.length; i++) {      array[i]*=detectionThresholdPercent / 100.0;    }    System.err.println("Read detection thresholds: " + Basic.toString(array,", "));  }  for (int i=0; i < array.length; i++) {    array[i]=Math.max(1,array[i]);  }  return array;}  }
class C{  private static String segCodaCtype(Item seg,String ctype){  Item daughter=seg.getItemAs(Relation.SYLLABLE_STRUCTURE).getParent().getLastDaughter();  while (daughter != null) {    if ("+".equals(getPhoneFeature(daughter,"vc"))) {      return "0";    }    if (ctype.equals(getPhoneFeature(daughter,"ctype"))) {      return "1";    }    daughter=daughter.getPrevious();  }  return "0";}  }
class C{  public void dumpBinary(DataOutputStream os) throws IOException {  os.writeInt(frameData.length);  for (int i=0; i < frameData.length; i++) {    os.writeShort(frameData[i]);  }  os.writeInt(residualData.length);  for (int i=0; i < residualData.length; i++) {    os.writeByte(residualData[i]);  }}  }
class C{  public TAC2008UpdateSummarizationFileSet(String sCorpusDir){  CorpusDir=sCorpusDir;  Categories=null;  TrainingFiles=new ArrayList<CategorizedFileEntry>();  TestFiles=new ArrayList<CategorizedFileEntry>();}  }
class C{  public static void destroyInstance(){  instance=null;}  }
class C{  public static boolean isPrimitiveWrapper(Class<?> type){  return PRIMITIVE_WRAPPER_TYPES.contains(type);}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startId){  Log_OC.d(TAG,"Starting command with id " + startId);  boolean retry=intent.getBooleanExtra(KEY_RETRY,false);  AbstractList<String> requestedUploads=new Vector<String>();  if (!intent.hasExtra(KEY_ACCOUNT)) {    Log_OC.e(TAG,"Not enough information provided in intent");    return Service.START_NOT_STICKY;  }  Account account=intent.getParcelableExtra(KEY_ACCOUNT);  if (!AccountUtils.exists(account,getApplicationContext())) {    return Service.START_NOT_STICKY;  }  OwnCloudVersion ocv=AccountUtils.getServerVersion(account);  boolean chunked=ocv.isChunkedUploadSupported();  if (!retry) {    if (!(intent.hasExtra(KEY_LOCAL_FILE) || intent.hasExtra(KEY_FILE))) {      Log_OC.e(TAG,"Not enough information provided in intent");      return Service.START_NOT_STICKY;    }    String[] localPaths=null, remotePaths=null, mimeTypes=null;    OCFile[] files=null;    if (intent.hasExtra(KEY_FILE)) {      Parcelable[] files_temp=intent.getParcelableArrayExtra(KEY_FILE);      files=new OCFile[files_temp.length];      System.arraycopy(files_temp,0,files,0,files_temp.length);    } else {      localPaths=intent.getStringArrayExtra(KEY_LOCAL_FILE);      remotePaths=intent.getStringArrayExtra(KEY_REMOTE_FILE);      mimeTypes=intent.getStringArrayExtra(KEY_MIME_TYPE);    }    boolean forceOverwrite=intent.getBooleanExtra(KEY_FORCE_OVERWRITE,false);    int localAction=intent.getIntExtra(KEY_LOCAL_BEHAVIOUR,LOCAL_BEHAVIOUR_FORGET);    boolean isCreateRemoteFolder=intent.getBooleanExtra(KEY_CREATE_REMOTE_FOLDER,false);    int createdBy=intent.getIntExtra(KEY_CREATED_BY,UploadFileOperation.CREATED_BY_USER);    if (intent.hasExtra(KEY_FILE) && files == null) {      Log_OC.e(TAG,"Incorrect array for OCFiles provided in upload intent");      return Service.START_NOT_STICKY;    } else     if (!intent.hasExtra(KEY_FILE)) {      if (localPaths == null) {        Log_OC.e(TAG,"Incorrect array for local paths provided in upload intent");        return Service.START_NOT_STICKY;      }      if (remotePaths == null) {        Log_OC.e(TAG,"Incorrect array for remote paths provided in upload intent");        return Service.START_NOT_STICKY;      }      if (localPaths.length != remotePaths.length) {        Log_OC.e(TAG,"Different number of remote paths and local paths!");        return Service.START_NOT_STICKY;      }      files=new OCFile[localPaths.length];      for (int i=0; i < localPaths.length; i++) {        files[i]=UploadFileOperation.obtainNewOCFileToUpload(remotePaths[i],localPaths[i],((mimeTypes != null) ? mimeTypes[i] : null));        if (files[i] == null) {          Log_OC.e(TAG,"obtainNewOCFileToUpload() returned null for remotePaths[i]:" + remotePaths[i] + " and localPaths[i]:"+ localPaths[i]);          return Service.START_NOT_STICKY;        }      }    }    String uploadKey=null;    UploadFileOperation newUpload=null;    try {      for (int i=0; i < files.length; i++) {        OCUpload ocUpload=new OCUpload(files[i],account);        ocUpload.setFileSize(files[i].getFileLength());        ocUpload.setForceOverwrite(forceOverwrite);        ocUpload.setCreateRemoteFolder(isCreateRemoteFolder);        ocUpload.setCreatedBy(createdBy);        ocUpload.setLocalAction(localAction);        ocUpload.setUploadStatus(UploadStatus.UPLOAD_IN_PROGRESS);        newUpload=new UploadFileOperation(account,files[i],ocUpload,chunked,forceOverwrite,localAction,this);        newUpload.setCreatedBy(createdBy);        if (isCreateRemoteFolder) {          newUpload.setRemoteFolderToBeCreated();        }        newUpload.addDatatransferProgressListener(this);        newUpload.addDatatransferProgressListener((FileUploaderBinder)mBinder);        newUpload.addRenameUploadListener(this);        Pair<String,String> putResult=mPendingUploads.putIfAbsent(account.name,files[i].getRemotePath(),newUpload);        if (putResult != null) {          uploadKey=putResult.first;          requestedUploads.add(uploadKey);          long id=mUploadsStorageManager.storeUpload(ocUpload);          newUpload.setOCUploadId(id);        }      }    } catch (    IllegalArgumentException e) {      Log_OC.e(TAG,"Not enough information provided in intent: " + e.getMessage());      return START_NOT_STICKY;    }catch (    IllegalStateException e) {      Log_OC.e(TAG,"Bad information provided in intent: " + e.getMessage());      return START_NOT_STICKY;    }catch (    Exception e) {      Log_OC.e(TAG,"Unexpected exception while processing upload intent",e);      return START_NOT_STICKY;    }  } else {    if (!intent.hasExtra(KEY_ACCOUNT) || !intent.hasExtra(KEY_RETRY_UPLOAD)) {      Log_OC.e(TAG,"Not enough information provided in intent: no KEY_RETRY_UPLOAD_KEY");      return START_NOT_STICKY;    }    OCUpload upload=intent.getParcelableExtra(KEY_RETRY_UPLOAD);    UploadFileOperation newUpload=new UploadFileOperation(account,null,upload,chunked,upload.isForceOverwrite(),upload.getLocalAction(),this);    newUpload.addDatatransferProgressListener(this);    newUpload.addDatatransferProgressListener((FileUploaderBinder)mBinder);    newUpload.addRenameUploadListener(this);    Pair<String,String> putResult=mPendingUploads.putIfAbsent(account.name,upload.getRemotePath(),newUpload);    if (putResult != null) {      String uploadKey=putResult.first;      requestedUploads.add(uploadKey);      upload.setUploadStatus(UploadStatus.UPLOAD_IN_PROGRESS);      mUploadsStorageManager.updateUpload(upload);    }  }  if (requestedUploads.size() > 0) {    Message msg=mServiceHandler.obtainMessage();    msg.arg1=startId;    msg.obj=requestedUploads;    mServiceHandler.sendMessage(msg);    sendBroadcastUploadsAdded();  }  return Service.START_NOT_STICKY;}  }
class C{  protected void startManagementServices() throws Throwable {  this.log(Level.INFO,"Management service starting ...");  registerForServiceAvailability(AuthBootstrapService.startTask(this),true,AuthBootstrapService.FACTORY_LINK);  HostInitCommonServiceConfig.startServices(this);  HostInitComputeServicesConfig.startServices(this);  HostInitRequestServicesConfig.startServices(this);  HostInitImageServicesConfig.startServices(this);  HostInitUiServicesConfig.startServices(this);  HostInitAdapterServiceConfig.startServices(this,startMockHostAdapterInstance);  HostInitRegistryAdapterServiceConfig.startServices(this);  HostInitEtcdAdapterServiceConfig.startServices(this,startEtcdEmulator);  HostInitContinuousDeliveryServicesConfig.startServices(this);  this.log(Level.INFO,"Management services started.");}  }
class C{  public PhotosGetAllQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public Filter withField(Filter field){  return new NotFilter(field);}  }
class C{  public static float convertDpToPixel(float dp){  if (mMetrics == null) {    Log.e("MPChartLib-Utils","Utils NOT INITIALIZED. You need to call Utils.init(...) at least once before" + " calling Utils.convertDpToPixel(...). Otherwise conversion does not " + "take place.");    return dp;  }  DisplayMetrics metrics=mMetrics;  return dp * (metrics.densityDpi / 160f);}  }
class C{  public static float convertDpToPixel(float dp,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float px=dp * (metrics.densityDpi / 160f);  return px;}  }
class C{  public boolean hasLogicalMapping(String logicalName){  return logicalToPhysicalColumnNames.containsKey(logicalName);}  }
class C{  public ModelMenuItem cloneModelMenuItem(ModelMenu modelMenu,ModelSubMenu parentSubMenu,BuildArgs buildArgs){  return new ModelMenuItem(this,modelMenu,parentSubMenu,buildArgs);}  }
class C{  public static int findLogSegmentNotLessThanTxnId(List<LogSegmentMetadata> segments,long transactionId){  int found=-1;  for (int i=segments.size() - 1; i >= 0; i--) {    LogSegmentMetadata segment=segments.get(i);    if (segment.getFirstTxId() <= transactionId) {      found=i;      break;    }  }  if (found <= -1) {    return -1;  }  if (found == 0 && segments.get(0).getFirstTxId() == transactionId) {    return 0;  }  LogSegmentMetadata foundSegment=segments.get(found);  if (foundSegment.getFirstTxId() == transactionId) {    for (int i=found - 1; i >= 0; i--) {      LogSegmentMetadata segment=segments.get(i);      if (segment.isInProgress()) {        break;      }      if (segment.getLastTxId() < transactionId) {        break;      }      found=i;    }    return found;  } else {    if (foundSegment.isInProgress() || found == segments.size() - 1) {      return found;    }    if (foundSegment.getLastTxId() >= transactionId) {      return found;    }    return found + 1;  }}  }
class C{  public boolean increment(K key){  return adjustValue(key,(int)1);}  }
class C{  public static AuditLevel toLevel(String sArg,Level defaultLevel){  return AUDIT;}  }
class C{  @Override public void flush() throws IOException {  out.flush();}  }
class C{  public BuildLexerBase(CharSequence input,int initialStackDepth,LexerMode mode){  this.buffer=input.toString().toCharArray();  this.tokens=Lists.newArrayListWithExpectedSize(buffer.length / 8);  this.pos=0;  this.openParenStackDepth=initialStackDepth;  this.mode=mode;  indentStack.push(0);  tokenize();}  }
class C{  @Path("authenticate") @POST @Produces(MediaType.APPLICATION_JSON) public TokenTransfer authenticate(@FormParam("username") String username,@FormParam("password") String password){  UsernamePasswordAuthenticationToken authenticationToken=new UsernamePasswordAuthenticationToken(username,password);  Authentication authentication=this.authManager.authenticate(authenticationToken);  SecurityContextHolder.getContext().setAuthentication(authentication);  UserDetails userDetails=this.userService.loadUserByUsername(username);  return new TokenTransfer(TokenUtils.createToken(userDetails));}  }
class C{  public Builder keyColumns(String... keyColumns){  this.keyColumns=keyColumns;  return this;}  }
class C{  ReplaceStringQuickFix(@Nullable String name,@Nullable String regexp,@NotNull String newValue){  myName=name;  myNewValue=newValue;  if (regexp != null && regexp.indexOf('(') == -1) {    regexp="(" + Pattern.quote(regexp) + ")";  }  myRegexp=regexp;}  }
class C{  public AuditLogException(ErrorCode errorCode,String message,Throwable cause){  super(errorCode,message,cause);}  }
class C{  public void outputNextPrompt(){  if (currentPrompt == null) {    abandon(new ConversationAbandonedEvent(this));  } else {    context.getForWhom().sendRawMessage(prefix.getPrefix(context) + currentPrompt.getPromptText(context));    if (!currentPrompt.blocksForInput(context)) {      currentPrompt=currentPrompt.acceptInput(context,null);      outputNextPrompt();    }  }}  }
class C{  Collection<? extends ClientRequestResult> handleDaqXmlRequest(final ClientRequest daqXmlRequest){  Collection<ProcessXmlResponse> singleXML=new ArrayList<ProcessXmlResponse>(1);  ProcessXmlResponseImpl processXmlResponse;  try {    String xmlString=processXMLProvider.getProcessConfigXML(daqXmlRequest.getRequestParameter());    processXmlResponse=new ProcessXmlResponseImpl();    processXmlResponse.setProcessXML(xmlString);  } catch (  CacheElementNotFoundException cacheEx) {    String errorMessage="Error while getting Process configruation:" + cacheEx.getMessage();    LOG.warn(errorMessage,cacheEx);    processXmlResponse=new ProcessXmlResponseImpl(false,errorMessage);  }  singleXML.add(processXmlResponse);  return singleXML;}  }
class C{  public void clear(){  BasicBlock b;  for (  BasicBlock basicBlock : q) {    b=(basicBlock);    b.inq=false;  }  q.clear();}  }
class C{  public byte[] compress(double[] unCompInput){  try {    return Snappy.compress(unCompInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());    return null;  }}  }
class C{  public static void main(String argv[]){  System.out.println(getVersion());}  }
class C{  public synchronized boolean hasTimedOut(){  return timedOut;}  }
class C{  public static String rowToString(JSONArray ja){  StringBuilder sb=new StringBuilder();  for (int i=0; i < ja.length(); i+=1) {    if (i > 0) {      sb.append(',');    }    Object o=ja.opt(i);    if (o != null) {      String s=o.toString();      if (s.length() > 0 && (s.indexOf(',') >= 0 || s.indexOf('\n') >= 0 || s.indexOf('\r') >= 0 || s.indexOf(0) >= 0 || s.charAt(0) == '"')) {        sb.append('"');        int length=s.length();        for (int j=0; j < length; j+=1) {          char c=s.charAt(j);          if (c >= ' ' && c != '"') {            sb.append(c);          }        }        sb.append('"');      } else {        sb.append(s);      }    }  }  sb.append('\n');  return sb.toString();}  }
class C{  public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout,V child,View directTargetChild,View target,int nestedScrollAxes){  return false;}  }
class C{  public Sum(){  n=0;  value=0;}  }
class C{  private boolean useForAllProtocols(Properties settings){  return Boolean.parseBoolean(settings.getProperty("org.gnome.system.proxy use-same-proxy","false"));}  }
class C{  public static void trackEvent(@NotNull String eventAction,@Nullable String eventLabel,@Nullable Integer eventValue){  UsageTracker.getInstance().trackEvent(UsageTracker.CATEGORY_GFX_TRACE,eventAction,eventLabel,eventValue);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  ServicePanel servicePanel=((RemoteServiceBrowser)getViewer()).getServicePanel();  if (servicePanel != null) {    TreePath[] paths=servicePanel.getFileTree().getSelectionPaths();    if (paths != null)     servicePanel.collapse(paths); else     servicePanel.collapse((DefaultMutableTreeNode)servicePanel.getFileTree().getModel().getRoot());  }}  }
class C{  public boolean isEmptyTemplate(){  return getServerTypeDesc().isRootType();}  }
class C{  public static double normalize(double val,double min,double max){  if (max < min)   throw new IllegalArgumentException("Max must be greather than min");  return (val - min) / (max - min);}  }
class C{  public int addMarker(String cfg){  if (!initedNative)   return -1;  return NativeInterface.arwAddMarker(cfg);}  }
class C{  @Override public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {  if (fDocumentHandler != null) {    fDocumentHandler.doctypeDecl(rootElement,publicId,systemId,augs);  }}  }
class C{  public int createDeferredElementDefinition(String elementName){  int nodeIndex=createNode(NodeImpl.ELEMENT_DEFINITION_NODE);  int chunk=nodeIndex >> CHUNK_SHIFT;  int index=nodeIndex & CHUNK_MASK;  setChunkValue(fNodeName,elementName,chunk,index);  return nodeIndex;}  }
class C{  public int hashCode(XMLGrammarDescription desc){  return desc.hashCode();}  }
class C{  public int size(){  return data.length;}  }
class C{  PorterDuffColorFilter updateTintFilter(PorterDuffColorFilter tintFilter,ColorStateList tint,PorterDuff.Mode tintMode){  if (tint == null || tintMode == null) {    return null;  }  final int color=tint.getColorForState(getState(),Color.TRANSPARENT);  tintFilter=new PorterDuffColorFilter(color,tintMode);  return tintFilter;}  }
class C{  static Schema schema(Type fldType){  Schema sch=new Schema();  sch.addField(SCH_KEY,fldType);  sch.addField(SCH_CHILD,BIGINT);  return sch;}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    if (getLong(i) == MISSING_VALUE) {      count++;    }  }  return count;}  }
class C{  public static void cleanInternalCache(Context context){  File directory=context.getCacheDir();  deleteFilesByDirectory(directory);}  }
class C{  public static String DoubletoEstring(double num,int w,int d){  boolean minusf=false;  boolean minuse=false;  String snum;  if (Double.isNaN(num)) {    snum="NaN";  } else   if (Double.isInfinite(num)) {    snum="Infty";  } else   if (num == 0.0) {    snum="e+00";    for (int i=0; i < d; i++)     snum="0" + snum;    snum="0." + snum;  } else {    if (num < 0) {      minusf=true;      num=-num;    }    int exp=(int)(Math.log(num) / Math.log(10.0));    if (num < 1) {      exp=exp - 1;    }    double frac=num / Math.pow(10,exp);    if (frac > 10. - Math.pow(10.,-d)) {      frac=frac / 10;      exp=exp + 1;    }    fmt.setMaximumFractionDigits(d);    fmt.setMinimumFractionDigits(d);    fmt.setGroupingUsed(false);    String sfrac=fmt.format(frac);    if (exp < 0) {      minuse=true;      exp=-exp;    }    String sexp=Integer.toString(exp);    snum=sexp;    if (snum.length() < 2)     snum="0" + snum;    if (minuse)     snum="e-" + snum; else     snum="e+" + snum;    snum=sfrac + snum;    if (minusf)     snum="-" + snum;  }  while (snum.length() < w)   snum=" " + snum;  return snum;}  }
class C{  public boolean isGrouped(){  return mDataSets.size() > 1 ? true : false;}  }
class C{  private void badIndex(int index) throws ArrayIndexOutOfBoundsException {  String msg="Attempt to modify attribute at illegal index: " + index;  throw new ArrayIndexOutOfBoundsException(msg);}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml"}) public void testProcessInstanceIdentityLinkEvents() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");  runtimeService.addUserIdentityLink(processInstance.getId(),"kermit","test");  assertEquals(2,listener.getEventsReceived().size());  ActivitiEntityEvent event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  assertTrue(event.getEntity() instanceof IdentityLink);  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(processInstance.getId(),event.getExecutionId());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  IdentityLink link=(IdentityLink)event.getEntity();  assertEquals("kermit",link.getUserId());  assertEquals("test",link.getType());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  listener.clearEventsReceived();  runtimeService.deleteProcessInstance(processInstance.getId(),"test");  assertEquals(1,listener.getEventsReceived().size());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());  assertTrue(event.getEntity() instanceof IdentityLink);  link=(IdentityLink)event.getEntity();  assertEquals("kermit",link.getUserId());  assertEquals("test",link.getType());}  }
class C{  protected boolean canChildScrollDown(){  if (android.os.Build.VERSION.SDK_INT < 14) {    if (mTargetView instanceof AbsListView) {      final AbsListView absListView=(AbsListView)mTargetView;      return absListView.getChildCount() > 0 && (absListView.getLastVisiblePosition() < absListView.getChildCount() - 1 || absListView.getChildAt(absListView.getChildCount() - 1).getBottom() > absListView.getPaddingBottom());    } else {      return ViewCompat.canScrollVertically(mTargetView,1) || mTargetView.getScrollY() < 0;    }  } else {    return ViewCompat.canScrollVertically(mTargetView,1);  }}  }
class C{  public Matrix zoom(float scaleX,float scaleY,float x,float y){  Matrix save=new Matrix();  zoom(scaleX,scaleY,x,y,save);  return save;}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public static float convertDpToPixel(float dp,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float px=dp * (metrics.densityDpi / 160f);  return px;}  }
class C{  public void makeTransient(){  this.isTransient=true;}  }
class C{  public MessagesSendQuery notification(Boolean value){  return unsafeParam("notification",value);}  }
class C{  private List<T> merge(final List<T> one,final List<T> two){  final Set<T> oneSet=new HashSet<T>(one);  for (  T item : two) {    if (!oneSet.contains(item)) {      one.add(item);    }  }  return one;}  }
class C{  private void writeInt(DataOutput out,int val) throws IOException {  intBuf[0]=(byte)(val >> 24);  intBuf[1]=(byte)(val >> 16);  intBuf[2]=(byte)(val >> 8);  intBuf[3]=(byte)val;  out.write(intBuf);}  }
class C{  public static AllophoneSet needAllophoneSet(String propertyName) throws MaryConfigurationException {  String propertyValue=MaryProperties.getProperty(propertyName);  if (propertyValue == null) {    Log.d(Mary.LOG,"No such property: " + propertyName);    throw new MaryConfigurationException("No such property: " + propertyName);  }  if (AllophoneSet.hasAllophoneSet(propertyValue)) {    return AllophoneSet.getAllophoneSetById(propertyValue);  }  InputStream alloStream;  try {    alloStream=MaryProperties.needStream(propertyName);  } catch (  FileNotFoundException e) {    Log.d(Mary.LOG,"1 Cannot open allophone stream for property " + propertyName);    throw new MaryConfigurationException("Cannot open allophone stream for property " + propertyName,e);  }  assert alloStream != null;  return AllophoneSet.getAllophoneSet(alloStream,propertyValue);}  }
class C{  public int diff_xIndex(List<Diff> diffs,int loc){  int chars1=0;  int chars2=0;  int last_chars1=0;  int last_chars2=0;  Diff lastDiff=null;  for (  Diff aDiff : diffs) {    if (aDiff.operation != Operation.INSERT) {      chars1+=aDiff.text.length();    }    if (aDiff.operation != Operation.DELETE) {      chars2+=aDiff.text.length();    }    if (chars1 > loc) {      lastDiff=aDiff;      break;    }    last_chars1=chars1;    last_chars2=chars2;  }  if (lastDiff != null && lastDiff.operation == Operation.DELETE) {    return last_chars2;  }  return last_chars2 + (loc - last_chars1);}  }
class C{  public static void updateAll(DataStore dataStore,Iterator<Update> updateIter,Set<String> tags){  Iterator<List<Update>> batchIter=new TimePartitioningIterator<>(updateIter,50,1,2500,Duration.millis(500L));  while (batchIter.hasNext()) {    dataStore.updateAll(batchIter.next(),tags);  }}  }
class C{  synchronized void modifyParticipant(ParticipantHandle handle,int state){  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(TxnManagerTransaction.class.getName(),"modifyParticipant",new Object[]{handle,new Integer(state)});  }  ParticipantHandle ph=null;  if (handle == null)   throw new NullPointerException("ParticipantHolder: " + "modifyParticipant: cannot modify null handle");  if (handle.equals(_singleHandle))   ph=_singleHandle; else   ph=_parts.get(_parts.get(handle));  if (ph == null) {    if (operationsLogger.isLoggable(Level.FINER)) {      operationsLogger.exiting(TxnManagerTransaction.class.getName(),"modifyParticipant");    }    return;  }  ph.setPrepState(state);  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(TxnManagerTransaction.class.getName(),"modifyParticipant");  }}  }
class C{  public Message(int type,String peerId,InetSocketAddress destination){  put(TYPE,type);  put(PEER_ID,peerId);  put(DESTINATION,createAddressMap(destination));}  }
class C{  @RequestMapping(value="/slash-command",method=RequestMethod.POST,consumes=MediaType.APPLICATION_FORM_URLENCODED_VALUE) public RichMessage onReceiveSlashCommand(@RequestParam("token") String token,@RequestParam("team_id") String teamId,@RequestParam("team_domain") String teamDomain,@RequestParam("channel_id") String channelId,@RequestParam("channel_name") String channelName,@RequestParam("user_id") String userId,@RequestParam("user_name") String userName,@RequestParam("command") String command,@RequestParam("text") String text,@RequestParam("response_url") String responseUrl){  if (!token.equals(slackToken)) {    return new RichMessage("Sorry! You're not lucky enough to use our slack command.");  }  RichMessage richMessage=new RichMessage("The is Slash Commander!");  richMessage.setResponseType("in_channel");  Attachment[] attachments=new Attachment[1];  attachments[0]=new Attachment();  attachments[0].setText("I will perform all tasks for you.");  richMessage.setAttachments(attachments);  if (logger.isDebugEnabled()) {    try {      logger.debug("Reply (RichMessage): {}",new ObjectMapper().writeValueAsString(richMessage));    } catch (    JsonProcessingException e) {      logger.debug("Error parsing RichMessage: ",e);    }  }  return richMessage.encodedMessage();}  }
class C{  private void refreshCardinality(){  int numDocs;  initializeIndexSearcher();  lock.readLock().lock();  try {    numDocs=luceneIndexSearcher.getIndexReader().numDocs();  }  finally {    lock.readLock().unlock();  }  keyValueStore.put(DimensionStoreKeyUtils.getCardinalityKey(),Integer.toString(numDocs));}  }
class C{  public static Map<String,Object> returnSuccess(List<String> successMessageList){  Map<String,Object> result=returnMessage(ModelService.RESPOND_SUCCESS,null);  result.put(ModelService.SUCCESS_MESSAGE_LIST,successMessageList);  return result;}  }
class C{  public void authReconnectionResponse(int accountId,int reconnectKey){  AionConnection client=loginRequests.remove(accountId);  if (client == null) {    return;  }  log.info("Account reconnecting: " + accountId + " = "+ client.getAccount().getName());  client.close(new SM_RECONNECT_KEY(reconnectKey),false);}  }
class C{  public SM_MAIL_SERVICE(Player player,Letter letter,long time){  super(player);  this.serviceId=3;  this.letter=letter;  this.time=time;}  }
class C{  @Override protected void createStartDocumentSkeleton(StartDocument startDoc){  skel=new GenericSkeleton();  if (!params.omitXMLDeclaration) {    skel.add("<?xml version=\"" + doc.getXmlVersion() + "\"");    skel.add(" encoding=\"" + doc.getXmlEncoding() + "\"");    if (doc.getXmlStandalone()) {      skel.add(" standalone=\"yes\"");    }    skel.add("?>" + lineBreak);  }}  }
class C{  @deprecated protected void loadRange(int aRange){  this.nextElement=this.set.getRangeStart(aRange);  this.endElement=this.set.getRangeEnd(aRange);}  }
class C{  private static byte[] computeSAM(BlastMode blastMode,int maxNumberOfReads,String matchesText) throws IOException {  final ISAMIterator iterator;switch (blastMode) {case BlastN:    iterator=new BlastN2SAMIterator(matchesText,maxNumberOfReads);  break;case BlastP:iterator=new BlastP2SAMIterator(matchesText,maxNumberOfReads);break;case BlastX:iterator=new BlastX2SAMIterator(matchesText,maxNumberOfReads);break;default :throw new IOException("Unknown BLAST mode: " + blastMode.toString());}try {iterator.next();return iterator.getMatchesText();}  finally {iterator.close();}}  }
class C{  public static boolean hasCapability(@Nullable Entity targetEntity){  if (targetEntity == null)   return false;  return targetEntity.hasCapability(CYBERWARE_CAPABILITY,EnumFacing.EAST);}  }
class C{  @Override public int[] makeInverseCumulativeTestValues(){  return new int[]{0,2,3,4,5,5,10,10,10,9,9,10};}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonServant_ME_TO_B(String value0,String skillname,String skilltarget){  return new SM_SYSTEM_MESSAGE(1200578,value0,skillname,skilltarget);}  }
class C{  public BoardFixTopicQuery(VkApiClient client,UserActor actor,int groupId,int topicId){  super(client,"board.fixTopic",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  topicId(topicId);}  }
class C{  public static Tags mismatchingKeys(Tags in,Set<String> keys){  return Tags.valueOf(in.asMap().entrySet().stream().filter(null));}  }
class C{  public static Map<String,Object> createPerson(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Timestamp now=UtilDateTime.nowTimestamp();  List<GenericValue> toBeStored=FastList.newInstance();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String partyId=(String)context.get("partyId");  String description=(String)context.get("description");  if (UtilValidate.isNotEmpty(partyId) && partyId.matches("\\d+")) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"party.id_is_digit",locale));  }  if (UtilValidate.isEmpty(partyId)) {    try {      partyId=delegator.getNextSeqId("Party");    } catch (    IllegalArgumentException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"party.id_generation_failure",locale));    }  }  GenericValue party=null;  try {    party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);  }  if (party != null) {    if (!"PERSON".equals(party.getString("partyTypeId"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"person.create.party_exists_not_person_type",locale));    }  } else {    String statusId=(String)context.get("statusId");    if (statusId == null) {      statusId="PARTY_ENABLED";    }    Map<String,Object> newPartyMap=UtilMisc.toMap("partyId",partyId,"partyTypeId","PERSON","description",description,"createdDate",now,"lastModifiedDate",now,"statusId",statusId);    String preferredCurrencyUomId=(String)context.get("preferredCurrencyUomId");    if (!UtilValidate.isEmpty(preferredCurrencyUomId)) {      newPartyMap.put("preferredCurrencyUomId",preferredCurrencyUomId);    }    String externalId=(String)context.get("externalId");    if (!UtilValidate.isEmpty(externalId)) {      newPartyMap.put("externalId",externalId);    }    if (userLogin != null) {      newPartyMap.put("createdByUserLogin",userLogin.get("userLoginId"));      newPartyMap.put("lastModifiedByUserLogin",userLogin.get("userLoginId"));    }    party=delegator.makeValue("Party",newPartyMap);    toBeStored.add(party);    GenericValue statusRec=delegator.makeValue("PartyStatus",UtilMisc.toMap("partyId",partyId,"statusId",statusId,"statusDate",now));    toBeStored.add(statusRec);  }  GenericValue person=null;  try {    person=EntityQuery.use(delegator).from("Person").where("partyId",partyId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);  }  if (person != null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"person.create.person_exists",locale));  }  person=delegator.makeValue("Person",UtilMisc.toMap("partyId",partyId));  person.setNonPKFields(context);  toBeStored.add(person);  try {    delegator.storeAll(toBeStored);  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"person.create.db_error",new Object[]{e.getMessage()},locale));  }  result.put("partyId",partyId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public static boolean isSuppressed(@NonNull PsiElement element,@NonNull PsiFile file,@NonNull Issue issue){  while (element != null && element != file) {    if (element instanceof PsiModifierListOwner) {      PsiModifierListOwner owner=(PsiModifierListOwner)element;      PsiModifierList modifierList=owner.getModifierList();      if (modifierList != null) {        for (        PsiAnnotation annotation : modifierList.getAnnotations()) {          String fqcn=annotation.getQualifiedName();          if (fqcn != null && (fqcn.equals(SUPPRESS_LINT_FQCN) || fqcn.equals(SUPPRESS_WARNINGS_FQCN))) {            PsiAnnotationParameterList parameterList=annotation.getParameterList();            for (            PsiNameValuePair pair : parameterList.getAttributes()) {              PsiAnnotationMemberValue v=pair.getValue();              if (v instanceof PsiLiteral) {                PsiLiteral literal=(PsiLiteral)v;                Object value=literal.getValue();                if (value instanceof String) {                  if (isSuppressed(issue,(String)value)) {                    return true;                  }                }              } else               if (v instanceof PsiArrayInitializerMemberValue) {                PsiArrayInitializerMemberValue mv=(PsiArrayInitializerMemberValue)v;                for (                PsiAnnotationMemberValue mmv : mv.getInitializers()) {                  if (mmv instanceof PsiLiteral) {                    PsiLiteral literal=(PsiLiteral)mmv;                    Object value=literal.getValue();                    if (value instanceof String) {                      if (isSuppressed(issue,(String)value)) {                        return true;                      }                    }                  }                }              } else               if (v != null) {                String text=v.getText().trim();                if (!text.isEmpty() && isSuppressed(issue,text)) {                  return true;                }              }            }          }        }      }    }    element=element.getParent();  }  return false;}  }
class C{  protected int index(int val){  int hash, probe, index, length;  final byte[] states=_states;  final int[] set=_set;  length=states.length;  hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  index=hash % length;  if (states[index] != FREE && (states[index] == REMOVED || set[index] != val)) {    probe=1 + (hash % (length - 2));    do {      index-=probe;      if (index < 0) {        index+=length;      }    } while (states[index] != FREE && (states[index] == REMOVED || set[index] != val));  }  return states[index] == FREE ? -1 : index;}  }
class C{  public static String decode(String s,Type t){  if (s == null) {    throw new IllegalArgumentException();  }  final int n=s.length();  if (n == 0) {    return s;  }  if (s.indexOf('%') < 0) {    if (t == Type.QUERY_PARAM) {      if (s.indexOf('+') < 0) {        return s;      }    } else {      return s;    }  } else {    if (n < 2) {      throw new IllegalArgumentException("Malformed percent-encoded octet at index 1");    }    if (s.charAt(n - 2) == '%') {      throw new IllegalArgumentException("Malformed percent-encoded octet at index " + (n - 2));    }  }  if (t == null) {    return decode(s,n);  }switch (t) {case HOST:    return decodeHost(s,n);case QUERY_PARAM:  return decodeQueryParam(s,n);default :return decode(s,n);}}  }
class C{  public static String byteCountToDisplaySize(long size){  return byteCountToDisplaySize(BigInteger.valueOf(size));}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public boolean hasBlock(){  return this.blockClicked != null;}  }
class C{  public static Router create(Uri uri){  return new Router(uri);}  }
class C{  private void invalidShellCommand(){  Platform.runLater(null);}  }
class C{  @Override protected Expression generateExpression(){  Expression expression=null;  if (spinner != null) {    expression=getFilterFactory().literal(getIntValue());  }  return expression;}  }
class C{  public BlowFishCrypt(byte[] key){  try {    secretKeySpec=new SecretKeySpec(key,"Blowfish");  } catch (  Exception e) {  }}  }
class C{  private void runAction(MouseEvent e){  if (m_action != null) {    Display d=(Display)e.getSource();    d.getVisualization().run(m_action);  }}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  public String deployProcess(String resourceName){  logger.debug("Start deploying single process.");  DeploymentBuilder deploymentBuilder=processEngine.getRepositoryService().createDeployment();  deploymentBuilder.addClasspathResource(resourceName);  Deployment deployment=deploymentBuilder.deploy();  logger.debug("Process deployed");  return processEngine.getRepositoryService().createProcessDefinitionQuery().deploymentId(deployment.getId()).singleResult().getId();}  }
class C{  @Override public int hashCode(){  int hashCode=getClass().hashCode();  for (  int b : bytes) {    hashCode+=b;  }  return hashCode;}  }
class C{  @Override public final Object createInstance(Reader reader){  throw new UnsupportedOperationException("createInstance");}  }
class C{  public final static String formatRequestLine(final RequestLine reqline,LineFormatter formatter){  if (formatter == null)   formatter=SaveLineFormatter.DEFAULT;  return formatter.formatRequestLine(null,reqline).toString();}  }
class C{  @Override public Node item(int index){  if (hasStringValue()) {    if (index != 0 || value == null) {      return null;    } else {      makeChildNode();      return (Node)value;    }  }  if (index < 0) {    return null;  }  ChildNode node=(ChildNode)value;  for (int i=0; i < index && node != null; i++) {    node=node.nextSibling;  }  return node;}  }
class C{  private void handleEventBusRegistration(IJAssignmentTarget fieldRef,HasLifecycleMethods holderWithLifecycleMethods){  JBlock onStartBlock;  JBlock onStopBlock;  if (holderWithLifecycleMethods instanceof EServiceHolder) {    onStartBlock=holderWithLifecycleMethods.getOnCreateAfterSuperBlock();    onStopBlock=holderWithLifecycleMethods.getOnDestroyBeforeSuperBlock();  } else {    onStartBlock=holderWithLifecycleMethods.getOnStartAfterSuperBlock();    onStopBlock=holderWithLifecycleMethods.getOnStopBeforeSuperBlock();  }  onStartBlock.invoke(fieldRef,"register").arg(JExpr._this());  onStopBlock.invoke(fieldRef,"unregister").arg(JExpr._this());}  }
class C{  public TObjectIntHashMap(int initialCapacity,float loadFactor,TObjectHashingStrategy<K> strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  @Override public int toInt(){  return 0;}  }
class C{  private void resize(int newCapacity){  Entry[] oldTable=getTable();  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    threshold=Integer.MAX_VALUE;    return;  }  Entry[] newTable=new Entry[newCapacity];  transfer(oldTable,newTable);  table=newTable;  if (size >= threshold / 2) {    threshold=(int)(newCapacity * loadFactor);  } else {    expungeStaleEntries();    transfer(newTable,oldTable);    table=oldTable;  }}  }
class C{  public boolean forEach(TObjectProcedure<T> procedure){  Object[] set=_set;  for (int i=set.length; i-- > 0; ) {    if (set[i] != FREE && set[i] != REMOVED && !procedure.execute((T)set[i])) {      return false;    }  }  return true;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public String end_subgraph(){  return "}";}  }
class C{  public static List<DiffElement> decode(final String diff){  final List<DiffElement> differences=new LinkedList<>();  int pos=0;  while (pos < diff.length()) {    int ch=diff.charAt(pos);    if (Character.isDigit(ch)) {      int a=pos;      while (pos < diff.length() && Character.isDigit(diff.charAt(pos)))       pos++;      Integer i=Basic.parseInt(diff.substring(a,pos));      DiffElement element=new DiffElement();      element.type=Type.MATCH;      element.count=i;      differences.add(element);    } else     if (Character.isLetter(ch) || ch == '.') {      DiffElement element=new DiffElement();      element.type=Type.REPLACE;      element.what="" + (char)ch;      differences.add(element);      pos++;    } else     if (ch == '^') {      pos++;      int a=pos;      while (pos < diff.length() && (Character.isLetter(diff.charAt(pos)) || diff.charAt(pos) == '.'))       pos++;      DiffElement element=new DiffElement();      element.type=Type.INSERT;      element.what=diff.substring(a,pos);      differences.add(element);      if (pos < diff.length() && diff.charAt(pos) == '0')       pos++;    } else {      if (!Character.isWhitespace(diff.charAt(pos)))       System.err.println("Warning: illegal char in diff string: '" + diff.charAt(pos) + "' (code: "+ (int)diff.charAt(pos)+ ")");      pos++;    }  }  return differences;}  }
class C{  public static Ingredient fromCursor(Cursor cursor){  Ingredient ingredient=new Ingredient();  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeIngredientTable.AMOUNT_COLUMN)) {      ingredient.setAmount(cursor.getString(c));    } else     if (columnName.equals(RecipeIngredientTable.DESCRIPTION_COLUMN)) {      ingredient.setDescription(cursor.getString(c));    }  }  return ingredient;}  }
class C{  public static boolean isInitialized(Context ctx){  vitamioPackage=ctx.getPackageName();  vitamioLibraryPath=ContextUtils.getDataDir(ctx) + "lib/";  return true;}  }
class C{  private void handlIntroductionRequest(Peer peer,IntroductionRequest message) throws IOException {  peer.setNetworkOperator(message.getNetworkOperator());  peer.setConnectionType((int)message.getConnectionType());  if (peerList.size() > 1) {    Peer invitee=getEligiblePeer(peer);    if (invitee != null) {      sendIntroductionResponse(peer,invitee);      sendPunctureRequest(invitee,peer);      System.out.println("Introducing " + invitee.getAddress() + " to "+ peer.getAddress());    }  } else {    System.out.println("Peerlist too small, can't handle introduction request");    sendIntroductionResponse(peer,null);  }}  }
class C{  @VisibleForTesting void recordFailureReasons(Context context){  int reasons=FailureReason.bitValue(failureReasons(context));  mFailureReasonsToRecord.add(reasons);  if (LibraryLoader.isInitialized()) {    Integer reasonsToRecord;    while ((reasonsToRecord=mFailureReasonsToRecord.poll()) != null) {      RecordHistogram.recordSparseSlowlyHistogram("Precache.Fetch.FailureReasons",reasonsToRecord);      RecordUserAction.record("Precache.Fetch.IntentReceived");    }  }}  }
class C{  public QueryModel prepareQueryModel(List<TableBlockInfo> blockList){  QueryModel model=new QueryModel();  model.setTableBlockInfos(blockList);  model.setCountStarQuery(false);  model.setDetailQuery(true);  model.setForcedDetailRawQuery(true);  model.setFilterExpressionResolverTree(null);  List<QueryDimension> dims=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  for (  CarbonDimension dim : destinationSegProperties.getDimensions()) {    QueryDimension queryDimension=new QueryDimension(dim.getColName());    dims.add(queryDimension);  }  model.setQueryDimension(dims);  List<QueryMeasure> msrs=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  for (  CarbonMeasure carbonMeasure : destinationSegProperties.getMeasures()) {    QueryMeasure queryMeasure=new QueryMeasure(carbonMeasure.getColName());    msrs.add(queryMeasure);  }  model.setQueryMeasures(msrs);  model.setQueryId(System.nanoTime() + "");  model.setAbsoluteTableIdentifier(carbonTable.getAbsoluteTableIdentifier());  model.setAggTable(false);  model.setLimit(-1);  model.setTable(carbonTable);  model.setInMemoryRecordSize(CarbonCommonConstants.COMPACTION_INMEMORY_RECORD_SIZE);  return model;}  }
class C{  public void putDefaultFramePathOnStack(){  if (!switchRequestComingFromFrameSwitcher) {    localDeque.push(new FramePath());  }}  }
class C{  public static void copy(Reader reader,boolean closeIn,Writer writer,boolean closeOut) throws IOException {  try {    try {      IOUtils.copy(reader,writer);    }  finally {      if (closeIn)       IOUtils.closeQuietly(reader);    }  }  finally {    if (closeOut)     IOUtils.closeQuietly(writer);  }}  }
class C{  public CTTree(CTNode root){  n_root=root;  initTerminals();  linkEmtpyCategories();}  }
class C{  public static void print(byte x){  out.print(x);  out.flush();}  }
class C{  @Override public String toString(){  String s=super.toString();  int index1=s.lastIndexOf('$');  if (index1 != -1) {    return s.substring(index1 + 1);  }  int index2=s.lastIndexOf('.');  if (index2 != -1) {    return s.substring(index2 + 1);  }  return s;}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap();}  }
class C{  public static void copy(Reader reader,boolean closeIn,Appendable out) throws IOException {  try {    CharBuffer buffer=CharBuffer.allocate(4096);    while (reader.read(buffer) > 0) {      buffer.flip();      buffer.rewind();      out.append(buffer);    }  }  finally {    if (closeIn)     IOUtils.closeQuietly(reader);  }}  }
class C{  public boolean hasFixedPropertiesArray(){  return false;}  }
class C{  public static void saveLocalHistory(IResource resource) throws CoreException {  if (resource instanceof IFile && resource.exists()) {    if (!resource.isSynchronized(IResource.DEPTH_ZERO))     resource.refreshLocal(IResource.DEPTH_ZERO,null);    ((IFile)resource).appendContents(new ByteArrayInputStream(new byte[0]),IResource.KEEP_HISTORY,null);  }}  }
class C{  public boolean isTimer(){  if (timer == null) {    return false;  } else {    return timer;  }}  }
class C{  protected void validateInput(){  String errorMessage=null;  if (validator != null) {    errorMessage=validator.isValid(text.getText());  }  setErrorMessage(errorMessage);}  }
class C{  private void registerFabListeners(){  registerFabUploadListeners();  registerFabMkDirListeners();  registerFabUploadFromAppListeners();}  }
class C{  private void trimToSize(int maxSize){  while (true) {    String key;    Bitmap value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();      if (toEvict == null) {        break;      }      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=sizeOf(key,value);    }  }}  }
class C{  @Pollable(async=true,message="Start Adding Box SDK Service Config",expectedSubTaskNumber=1) public PollableFuture<BoxSDKServiceConfigEntity> addConfig(String clientId,String clientSecret,String publicKeyId,String privateKey,String privateKeyPassword,String enterpriseId,@InjectCurrentTask PollableTask currentTask) throws ExecutionException, InterruptedException, BoxSDKServiceException {  BoxSDKServiceConfigEntity boxSDKServiceConfig=boxSDKServiceConfigEntityRepository.findFirstByOrderByIdAsc();  if (boxSDKServiceConfig != null) {    throw new BoxSDKServiceException("Config must be deleted first before adding a new one");  }  boxSDKServiceConfig=new BoxSDKServiceConfigEntity(clientId,clientSecret,publicKeyId,privateKey,privateKeyPassword,enterpriseId,null,null,null,false);  logger.debug("Initial saving of the config so that it can be used immediately");  boxSDKServiceConfigEntityRepository.save(boxSDKServiceConfig);  BoxUser.Info appUser=boxSDKAppUserService.createAppUser(boxSDKServiceConfig.getClientId(),boxSDKServiceConfig.getClientSecret(),boxSDKServiceConfig.getPublicKeyId(),boxSDKServiceConfig.getPrivateKey(),boxSDKServiceConfig.getPrivateKeyPassword(),boxSDKServiceConfig.getEnterpriseId());  boxSDKServiceConfig.setAppUserId(appUser.getID());  logger.debug("Saving of the config with updated app user id: {}",appUser.getID());  boxSDKServiceConfigEntityRepository.save(boxSDKServiceConfig);  MojitoAppUserInfo mojitoFolderStructure=createMojitoFolderStructure();  boxSDKServiceConfig.setRootFolderId(mojitoFolderStructure.getRootFolderId());  boxSDKServiceConfig.setDropsFolderId(mojitoFolderStructure.getDropsFolderId());  boxSDKServiceConfig.setBootstrap(true);  validateConfig(boxSDKServiceConfig,currentTask);  logger.debug("Saving of the config with updated IDs");  boxSDKServiceConfigEntityRepository.save(boxSDKServiceConfig);  return new PollableFutureTaskResult<>(boxSDKServiceConfig);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public String scanNmtoken() throws IOException {  if (DEBUG_BUFFER) {    System.out.print("(scanNmtoken: ");    XMLEntityManager.print(fCurrentEntity);    System.out.println();  }  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int offset=fCurrentEntity.position;  while (XMLChar.isName(fCurrentEntity.ch[fCurrentEntity.position])) {    if (++fCurrentEntity.position == fCurrentEntity.count) {      int length=fCurrentEntity.position - offset;      if (length == fCurrentEntity.ch.length) {        char[] tmp=new char[fCurrentEntity.ch.length << 1];        System.arraycopy(fCurrentEntity.ch,offset,tmp,0,length);        fCurrentEntity.ch=tmp;      } else {        System.arraycopy(fCurrentEntity.ch,offset,fCurrentEntity.ch,0,length);      }      offset=0;      if (load(length,false)) {        break;      }    }  }  int length=fCurrentEntity.position - offset;  fCurrentEntity.columnNumber+=length;  String symbol=null;  if (length > 0) {    symbol=fSymbolTable.addSymbol(fCurrentEntity.ch,offset,length);  }  if (DEBUG_BUFFER) {    System.out.print(")scanNmtoken: ");    XMLEntityManager.print(fCurrentEntity);    System.out.println(" -> " + String.valueOf(symbol));  }  return symbol;}  }
class C{  public void removeScrollingListener(OnWheelScrollListener listener){  scrollingListeners.remove(listener);}  }
class C{  public NumericEntityEscaper(){  this(0,Integer.MAX_VALUE,true);}  }
class C{  public void removePackage(String packageName){  final List<ItemApplication> data=this.data;  for (int i=data.size() - 1; i >= 0; i--) {    ItemApplication info=data.get(i);    final ComponentName component=info.mIntent.getComponent();    if (packageName.equals(component.getPackageName())) {      removed.add(info);      data.remove(i);    }  }  mIconCache.flush();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_UPDATE_QUEST(String value0){  return new SM_SYSTEM_MESSAGE(1300615,value0);}  }
class C{  public Vector3f add(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  return new Vector3f(x + vec.x,y + vec.y,z + vec.z);}  }
class C{  public Forever forever(Task task){  return new Forever(this.executor_,task);}  }
class C{  protected void validateBrokerName(String broker) throws MalformedURLException {  String brokerUrl=String.format("http://%s",broker);  if (!pulsar().getWebServiceAddress().equals(brokerUrl)) {    String[] parts=broker.split(":");    checkArgument(parts.length == 2);    String host=parts[0];    int port=Integer.parseInt(parts[1]);    URI redirect=UriBuilder.fromUri(uri.getRequestUri()).host(host).port(port).build();    log.debug("[{}] Redirecting the rest call to {}: broker={}",clientAppId(),redirect,broker);    throw new WebApplicationException(Response.temporaryRedirect(redirect).build());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnTargetDead_INTERVAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200374,num0,skillname);}  }
class C{  public static <T extends Bean>Beans<T> load(String table,String where,Object[] args,String orderby,int offset,int limit,Class<T> clazz,Connection c){  TimeStamp t=TimeStamp.create();  StringBuilder sql=new StringBuilder();  sql.append("select * from ").append(table);  if (where != null) {    sql.append(" where ").append(where);  }  if (orderby != null) {    sql.append(" ").append(orderby);  }  if (limit > 0) {    sql.append(" limit ").append(limit);  }  if (offset > 0) {    sql.append(" offset ").append(offset);  }  PreparedStatement p=null;  ResultSet r=null;  try {    if (c == null)     return null;    Beans<T> rs=new Beans<T>();    p=c.prepareStatement(sql.toString());    int order=1;    if (args != null) {      for (int i=0; i < args.length; i++) {        Object o=args[i];        setParameter(p,order++,o);      }    }    r=p.executeQuery();    rs.list=new ArrayList<T>();    while (r.next()) {      T b=clazz.newInstance();      b.load(r);      rs.list.add(b);    }    if (log.isDebugEnabled())     log.debug("load - cost=" + t.past() + "ms, collection="+ table+ ", sql="+ sql+ ", result="+ rs);    if (t.past() > 10000) {      log.warn("load - cost=" + t.past() + "ms, collection="+ table+ ", sql="+ sql+ ", result="+ rs);    }    return rs;  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(sql.toString() + toString(args),e);  } finally {    close(r,p);  }  return null;}  }
class C{  public JsonObject remove(String name){  if (name == null) {    throw new NullPointerException("name is null");  }  int index=indexOf(name);  if (index != -1) {    table.remove(index);    names.remove(index);    values.remove(index);  }  return this;}  }
class C{  public SwipeBackImplementor(SwipeBackView view){  this.view=view;}  }
class C{  public static MapWrapperFragment newInstance(){  MapWrapperFragment fragment=new MapWrapperFragment();  Bundle args=new Bundle();  fragment.setArguments(args);  return fragment;}  }
class C{  private static ResizeHandle findResizeHandleInWidget(ConstraintWidget widget,float x,float y,ViewTransform transform){  WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();  WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);  if (!decorator.isVisible()) {    return null;  }  WidgetInteractionTargets widgetInteraction=companion.getWidgetInteractionTargets();  widgetInteraction.updatePosition(transform);  ResizeHandle handle=widgetInteraction.findResizeHandle(x,y);  if (handle != null) {    return handle;  }  return null;}  }
class C{  public FieldConfigTransformation(FieldConfigCommonData commonData,String editButtonText,String clearButtonText){  super(commonData);  this.editButtonText=editButtonText;  this.clearButtonText=clearButtonText;}  }
class C{  @Override public void installUpdates(@NotNull Collection<UpdatableExternalComponent> request){  final List<RemotePackage> packages=Lists.newArrayList();  for (  UpdatableExternalComponent p : request) {    packages.add((RemotePackage)p.getKey());  }  new UpdateInfoDialog(true,packages).show();}  }
class C{  public static boolean isConnected(){  NetworkInfo info=getNetworkInfos();  if (info == null || !info.isConnected()) {    return false;  }  return true;}  }
class C{  private int measureHeightSize(int measureSpec){  int defSize=dp2px(DEFAULT_HEIGHT);  int specSize=MeasureSpec.getSize(measureSpec);  int specMode=MeasureSpec.getMode(measureSpec);  int result=0;switch (specMode) {case MeasureSpec.UNSPECIFIED:case MeasureSpec.AT_MOST:    result=Math.min(defSize,specSize);  break;case MeasureSpec.EXACTLY:result=specSize;break;}return result;}  }
class C{  public static QueueClientFactory forClusterAndHttpClient(String clusterName,Client client){  return new QueueClientFactory(clusterName,client);}  }
class C{  public ParametricTextualExtensionRecognizer(String[] exts){  for (int i=0; i < exts.length; i++) {    addExtension(exts[i]);  }}  }
class C{  public void updateLastLogin(){  this.lastLogin=new Date();}  }
class C{  private void maybeAddNewRegistrar(UnicastResponse resp){synchronized (registrars) {    if (!groupsOverlap(resp.getGroups()))     return;  }  try {    final ServiceRegistrar srcReg=resp.getRegistrar();    ServiceRegistrar prepReg=(ServiceRegistrar)registrarPreparer.prepareProxy(srcReg);    if (logger.isLoggable(Level.FINEST)) {      logger.log(Level.FINEST,"LookupDiscovery - " + "prepared lookup service proxy: {0}",prepReg);    }    if (prepReg != srcReg) {      resp=new UnicastResponse(resp.getHost(),resp.getPort(),resp.getGroups(),prepReg);    }  } catch (  Exception e) {    Exception e1=((e instanceof PrivilegedActionException) ? ((PrivilegedActionException)e).getException() : e);    logger.log(Level.INFO,"exception while preparing lookup service proxy",e1);    return;  }synchronized (registrars) {    if (groupsOverlap(resp.getGroups()) && !registrarsEqual(resp,(UnicastResponse)registrars.put(resp.getRegistrar().getServiceID(),resp))) {      regInfo.put(resp.getRegistrar().getServiceID(),new AnnouncementInfo(SystemTime.timeMillis(),-1));      if (!listeners.isEmpty()) {        addNotify((ArrayList)listeners.clone(),mapRegToGroups(resp.getRegistrar(),resp.getGroups()),DISCOVERED);      }    }  }}  }
class C{  public Latin1Reader(InputStream inputStream,int size){  this(inputStream,new byte[size]);}  }
class C{  public MemcachedCommandHandler(SpaceCache cache,String memcachedVersion,boolean verbosity,int idle,DefaultChannelGroup channelGroup){  this.cache=cache;  version=memcachedVersion;  verbose=verbosity;  idle_limit=idle;  this.channelGroup=channelGroup;}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  public static final void pushTransform(GL2 gl){  gl.glPushMatrix();}  }
class C{  public void waitUntilDone(IProgressMonitor monitor){  monitor.worked(1);  while (handler.getEventHandlerJob().getState() != Job.NONE) {    monitor.worked(1);    try {      Thread.sleep(10);    } catch (    InterruptedException e) {    }    Policy.checkCanceled(monitor);  }  monitor.worked(1);}  }
class C{  @Override public String toString(){  String condition=acceptOlder ? "<=" : ">";  return super.toString() + "(" + condition+ cutoff+ ")";}  }
class C{  private AbstractResource findResource(String resName,String resID,String packageName){  for (  ARSCFileParser.ResPackage pkg : this.resourcePackages) {    boolean matches=(packageName == null || packageName.isEmpty()) && pkg.getPackageName().equals(this.appPackageName);    matches|=pkg.getPackageName().equals(packageName);    if (!matches)     continue;    for (    ARSCFileParser.ResType type : pkg.getDeclaredTypes())     if (type.getTypeName().equals(resID)) {      AbstractResource res=type.getFirstResource(resName);      return res;    }  }  return null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_HE_ENTERED_ALLIANCE(String value0){  return new SM_SYSTEM_MESSAGE(1400017,value0);}  }
class C{  private Double readNextNumber(Stack<CalculationToken> calculationStack){  CalculationToken calculationToken=calculationStack.pop();  DoubleToken doubleToken;  Double nextNumber;  if (calculationToken instanceof OperationToken) {    calculationToken=calculationStack.pop();    doubleToken=(DoubleToken)calculationToken;    nextNumber=-doubleToken.getNumber();  } else {    doubleToken=(DoubleToken)calculationToken;    nextNumber=doubleToken.getNumber();  }  return nextNumber;}  }
class C{  public boolean isFifo(){  return isFifo;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BLACK_LIST'";  db.execSQL(sql);}  }
class C{  public void onDestroy(){}  }
class C{  static String access_string(int af,String separator){  boolean hasone=false;  String s="";  if ((af & ACC_PUBLIC) != 0) {    s="public";    hasone=true;  }  if ((af & ACC_PRIVATE) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "private";  }  if ((af & ACC_PROTECTED) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "protected";  }  if ((af & ACC_STATIC) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "static";  }  if ((af & ACC_FINAL) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "final";  }  if ((af & ACC_SUPER) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "super";  }  if ((af & ACC_VOLATILE) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "volatile";  }  if ((af & ACC_TRANSIENT) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "transient";  }  if ((af & ACC_INTERFACE) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "interface";  }  if ((af & ACC_ABSTRACT) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "abstract";  }  if ((af & ACC_STRICT) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "strict";  }  if ((af & ACC_ANNOTATION) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "annotation";  }  if ((af & ACC_ENUM) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "enum";  }  if ((af & ACC_UNKNOWN) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "unknown";  }  return s;}  }
class C{  public void delete(RecordId dataRecordId){  try {    if (!searchRange.isConstant())     throw new IllegalStateException();    while (next())     if (getDataRecordId().equals(dataRecordId)) {      delete(currentSlot);      break;    }    if (!overflowing) {      if (getOverflowFlag(currentPage) != -1) {        BlockId blk=new BlockId(currentPage.currentBlk().fileName(),getOverflowFlag(currentPage));        ccMgr.modifyLeafBlock(blk);        BTreePage overflowPage=new BTreePage(blk,NUM_FLAGS,schema,tx);        Constant firstKey=getKey(currentPage,0);        if ((currentPage.getNumRecords() == 0 || (overflowPage.getNumRecords() != 0 && getKey(overflowPage,0) != firstKey))) {          overflowPage.transferRecords(overflowPage.getNumRecords() - 1,currentPage,0,1);          if (overflowPage.getNumRecords() == 0) {            long overflowFlag=(getOverflowFlag(overflowPage) == currentPage.currentBlk().number()) ? -1 : getOverflowFlag(overflowPage);            setOverflowFlag(currentPage,overflowFlag);          }          overflowPage.close();        }      }    } else {      if (currentPage.getNumRecords() == 0) {        BlockId blk=new BlockId(currentPage.currentBlk().fileName(),moveFrom);        BTreePage prePage=new BTreePage(blk,NUM_FLAGS,schema,tx);        long overflowFlag=(getOverflowFlag(currentPage) == prePage.currentBlk().number()) ? -1 : getOverflowFlag(currentPage);        setOverflowFlag(prePage,overflowFlag);        prePage.close();      }    }  } catch (  LockAbortException e) {    tx.rollback();    throw e;  }}  }
class C{  public JsonHttpResponseHandler(String encoding){  super(encoding);}  }
class C{  @Override public boolean include(String identifier){  return !blacklist.contains(identifier);}  }
class C{  public boolean isIncludeGlobal(){  return this.includeGlobal;}  }
class C{  public static double[] mergeCoords(double[] x,double[] y){  if (x.length != y.length)   throw new IllegalArgumentException("Sample sizes must be the same for each data applyTransformToDestination.");  double[] ret=new double[x.length + y.length];  for (int i=0; i < x.length; i++) {    ret[i]=x[i];    ret[i + 1]=y[i];  }  return ret;}  }
class C{  private synchronized void sendMesssage(Message message,Peer peer) throws IOException {  System.out.println("Sending " + message);  outBuffer.clear();  message.writeToByteBuffer(outBuffer);  outBuffer.flip();  channel.send(outBuffer,peer.getAddress());  peer.sentData();  updatePeerLists();}  }
class C{  public T reserve(final Txn<T> txn,final T key,final int size){  if (SHOULD_CHECK) {    requireNonNull(txn);    requireNonNull(key);    txn.checkReady();    txn.checkWritesAllowed();  }  txn.keyIn(key);  txn.valIn(size);  final int mask=mask(MDB_RESERVE);  checkRc(LIB.mdb_put(txn.pointer(),ptr,txn.pointerKey(),txn.pointerVal(),mask));  txn.valOut();  return txn.val();}  }
class C{  public Lex(Reader in){  this(new PushbackReader(in,2),false);}  }
class C{  void traverseLocalElements(){  fElementTraverser.fDeferTraversingLocalElements=false;  for (int i=0; i < fLocalElemStackPos; i++) {    Element currElem=fLocalElementDecl[i];    XSDocumentInfo currSchema=fLocalElementDecl_schema[i];    SchemaGrammar currGrammar=fGrammarBucket.getGrammar(currSchema.fTargetNamespace);    fElementTraverser.traverseLocal(fParticle[i],currElem,currSchema,currGrammar,fAllContext[i],fParent[i],fLocalElemNamespaceContext[i]);    if (fParticle[i].fType == XSParticleDecl.PARTICLE_EMPTY) {      XSModelGroupImpl group=null;      if (fParent[i] instanceof XSComplexTypeDecl) {        XSParticle p=((XSComplexTypeDecl)fParent[i]).getParticle();        if (p != null)         group=(XSModelGroupImpl)p.getTerm();      } else {        group=((XSGroupDecl)fParent[i]).fModelGroup;      }      if (group != null)       removeParticle(group,fParticle[i]);    }  }}  }
class C{  private void _scheduleAfter(Activity before,Activity after){  before.addActivityListener(new ScheduleAfterActivity(after,true));}  }
class C{  public RabbitMqCommand listenToEvents(ProcessListener listener){  this.eventsListener=listener;  return this;}  }
class C{  protected boolean emptyDatabaseAfterTest(){  return false;}  }
class C{  public boolean isApplicationExpired(){  final Calendar expireDate=Calendar.getInstance();  expireDate.set(Integer.valueOf(SETTINGS.getString("expirydateyy.setting")),Integer.valueOf(SETTINGS.getString("expirydatemm.setting")),Integer.valueOf(SETTINGS.getString("expirydatedd.setting")));  if (Calendar.getInstance().after(expireDate)) {    return true;  }  return false;}  }
class C{  private void unsubscribeFromAlarmTopic() throws JMSException {  alarmSession.close();  alarmSession=null;  alarmConsumer.close();  alarmConsumer=null;  LOGGER.debug("Successfully unsubscribed from alarm topic");}  }
class C{  public MixedContentModel(QName[] children,int[] type,int offset,int length,boolean ordered){  fCount=length;  fChildren=new QName[fCount];  fChildrenType=new int[fCount];  for (int i=0; i < fCount; i++) {    fChildren[i]=new QName(children[offset + i]);    fChildrenType[i]=type[offset + i];  }  fOrdered=ordered;}  }
class C{  public AirMapStatusRequirementNotice(JSONObject noticeJson){  constructFromJson(noticeJson);}  }
class C{  public static String nullToBlank(final String string){  return string == null ? BLANK : string;}  }
class C{  void updateTabState(int newState){  long now=System.currentTimeMillis();  recordTabStateTransition(mLastTabState,newState,now - mLastTabStateChangeMillis);  mLastTabStateChangeMillis=now;  mLastTabState=newState;}  }
class C{  public static long round(double x){  final long bits=Double.doubleToRawLongBits(x);  final int biasedExp=((int)(bits >> 52)) & 0x7ff;  final int shift=(52 - 1 + Double.MAX_EXPONENT) - biasedExp;  if ((shift & -64) == 0) {    long extendedMantissa=0x0010000000000000L | (bits & 0x000fffffffffffffL);    if (bits < 0) {      extendedMantissa=-extendedMantissa;    }    return ((extendedMantissa >> shift) + 1L) >> 1;  } else {    return (long)x;  }}  }
class C{  private void adjustTopBottomByAspectRatio(RectF rect,RectF bounds,float aspectRatio){  rect.inset(0,(rect.height() - rect.width() / aspectRatio) / 2);  if (rect.top < bounds.top) {    rect.offset(0,bounds.top - rect.top);  }  if (rect.bottom > bounds.bottom) {    rect.offset(0,bounds.bottom - rect.bottom);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SUBMIT_PETITION_WAITING_COUNT(int num0){  return new SM_SYSTEM_MESSAGE(1300541,num0);}  }
class C{  public BigFractionFormat(final NumberFormat numeratorFormat,final NumberFormat denominatorFormat){  super(numeratorFormat,denominatorFormat);}  }
class C{  public BigDecimal bigDecimalValue(final int roundingMode){  return new BigDecimal(numerator).divide(new BigDecimal(denominator),roundingMode);}  }
class C{  public CollectionPhotosView(Context context){  super(context);  this.initialize();}  }
class C{  public <X extends DataSource>void unregisterPropertiesProvider(PropertiesProvider<X> provider){  providers.remove(provider);}  }
class C{  BarcodeRow(int width){  this.row=new byte[width];  currentLocation=0;}  }
class C{  public void loadF0contour(String lf0File,int totalDurationFrames,HTSParameterGeneration pdf2par) throws Exception {  HTSPStream lf0Pst=null;  boolean[] voiced=null;  LEDataInputStream lf0Data;  int lf0Vsize=3;  int totalFrame=0;  int lf0VoicedFrame=0;  float fval;  lf0Data=new LEDataInputStream(new BufferedInputStream(new FileInputStream(lf0File)));  try {    while (true) {      fval=lf0Data.readFloat();      totalFrame++;      if (fval > 0)       lf0VoicedFrame++;    }  } catch (  EOFException e) {  }  lf0Data.close();  if (totalDurationFrames != totalFrame) {    System.out.println("The total duration in frames " + totalDurationFrames + " is not the same as the number of frames "+ totalFrame+ " in the lf0 file: "+ lf0File);  } else   System.out.println("totalDurationFrames = " + totalDurationFrames + "  totalF0Frames = "+ totalFrame);  voiced=new boolean[totalFrame];  lf0Pst=new HTSPStream(lf0Vsize,totalFrame,HMMData.FeatureType.LF0,0);  lf0VoicedFrame=0;  lf0Data=new LEDataInputStream(new BufferedInputStream(new FileInputStream(lf0File)));  for (int i=0; i < totalFrame; i++) {    fval=lf0Data.readFloat();    if (fval < 0) {      voiced[i]=false;      System.out.println("frame: " + i + " = 0.0");    } else {      voiced[i]=true;      lf0Pst.setPar(lf0VoicedFrame,0,fval);      lf0VoicedFrame++;      System.out.format("frame: %d = %.2f\n",i,fval);    }  }  lf0Data.close();  pdf2par.setlf0Pst(lf0Pst);  pdf2par.setVoicedArray(voiced);}  }
class C{  public static String addChild(String parent,String child){  if (parent.endsWith(String.valueOf(FILE_SEPARATOR))) {    return parent + child;  } else {    return parent + FILE_SEPARATOR + child;  }}  }
class C{  @Override public void postPages(Application.Name applicationName,Experiment.ID experimentID,ExperimentPageList experimentPageList) throws RepositoryException {  ExperimentPageList oldPageList=getExperimentPages(experimentID);  StringBuilder cqlQuery=new StringBuilder("begin batch ");  MutationBatch m=driver.getKeyspace().prepareMutationBatch();  for (  ExperimentPage experimentPage : experimentPageList.getPages()) {    cqlQuery.append("insert into page_experiment_index(app_name, page, exp_id, assign) " + "values(?,?,?,?);");    m.withRow(keyspace.experiment_page_CF(),experimentID).putColumn(experimentPage.getName(),experimentPage.getAllowNewAssignment());    m.withRow(keyspace.app_page_index_CF(),applicationName).putColumn(experimentPage.getName().toString(),experimentPage.getAllowNewAssignment());  }  cqlQuery.append("apply batch;");  PreparedCqlQuery<ExperimentsKeyspace.AppNamePageComposite,String> preparedQuery=driver.getKeyspace().prepareQuery(keyspace.page_experiment_index_CF()).withCql(cqlQuery.toString()).asPreparedStatement();  for (  ExperimentPage experimentPage : experimentPageList.getPages()) {    preparedQuery.withByteBufferValue(applicationName,ApplicationNameSerializer.get());    preparedQuery.withByteBufferValue(experimentPage.getName(),PageNameSerializer.get());    preparedQuery.withByteBufferValue(experimentID,ExperimentIDSerializer.get());    preparedQuery.withBooleanValue(experimentPage.getAllowNewAssignment());  }  try {    preparedQuery.execute();    m.execute();  } catch (  ConnectionException e) {    throw new RepositoryException("Could not add the page(s) to the experiment:\"" + experimentID + "\"",e);  }  ExperimentPageList newPageList=getExperimentPages(experimentID);  saveExperimentPageState(experimentID,oldPageList,newPageList);}  }
class C{  public Disk(String name,int used,int free){  this.name=name;  this.free=free;  this.used=used;}  }
class C{  private void eglSetup(){  mEGLDisplay=EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);  if (mEGLDisplay == EGL14.EGL_NO_DISPLAY) {    throw new RuntimeException("unable to get EGL14 display");  }  int[] version=new int[2];  if (!EGL14.eglInitialize(mEGLDisplay,version,0,version,1)) {    throw new RuntimeException("unable to initialize EGL14");  }  int[] attribList;  if (mEGLSharedContext == null) {    attribList=new int[]{EGL14.EGL_RED_SIZE,8,EGL14.EGL_GREEN_SIZE,8,EGL14.EGL_BLUE_SIZE,8,EGL14.EGL_RENDERABLE_TYPE,EGL14.EGL_OPENGL_ES2_BIT,EGL14.EGL_NONE};  } else {    attribList=new int[]{EGL14.EGL_RED_SIZE,8,EGL14.EGL_GREEN_SIZE,8,EGL14.EGL_BLUE_SIZE,8,EGL14.EGL_RENDERABLE_TYPE,EGL14.EGL_OPENGL_ES2_BIT,EGL_RECORDABLE_ANDROID,1,EGL14.EGL_NONE};  }  EGLConfig[] configs=new EGLConfig[1];  int[] numConfigs=new int[1];  EGL14.eglChooseConfig(mEGLDisplay,attribList,0,configs,0,configs.length,numConfigs,0);  checkEglError("eglCreateContext RGB888+recordable ES2");  int[] attrib_list={EGL14.EGL_CONTEXT_CLIENT_VERSION,2,EGL14.EGL_NONE};  if (mEGLSharedContext == null) {    mEGLContext=EGL14.eglCreateContext(mEGLDisplay,configs[0],EGL14.EGL_NO_CONTEXT,attrib_list,0);  } else {    mEGLContext=EGL14.eglCreateContext(mEGLDisplay,configs[0],mEGLSharedContext,attrib_list,0);  }  checkEglError("eglCreateContext");  int[] surfaceAttribs={EGL14.EGL_NONE};  mEGLSurface=EGL14.eglCreateWindowSurface(mEGLDisplay,configs[0],mSurface,surfaceAttribs,0);  checkEglError("eglCreateWindowSurface");  GLES20.glDisable(GLES20.GL_DEPTH_TEST);  GLES20.glDisable(GLES20.GL_CULL_FACE);}  }
class C{  public DirectSpaceProxyFactoryImpl(){}  }
class C{  @Nullable public Interface resolveInterface(String inPackage,String name){  for (  String cand : nameCandidates(inPackage,name)) {    Interface endpointInterface=lookupInterface(cand);    if (endpointInterface != null) {      return endpointInterface;    }  }  return null;}  }
class C{  public void onReturnHome(){}  }
class C{  public boolean areFieldsConfigured(){  return ((datePicker != null) && (timePicker != null) && (timeEditor != null)&& (yearSpinner != null)&& (monthSpinner != null)&& (daySpinner != null)&& (dateCheckbox != null)&& (timeCheckbox != null)&& (hourSpinner != null)&& (minuteSpinner != null)&& (secondSpinner != null)&& (durationRadioButton != null)&& (dateRadioButton != null)&& (panel != null));}  }
class C{  public String isMajorCompacted(){  return majorCompacted;}  }
class C{  public void onTouchSearchContentViewAck(){  mHasContentBeenTouched=true;}  }
class C{  private Utilities(){}  }
class C{  public CM_MACRO_DELETE(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public T walkInDefaultOrder(final FieldVectorPreservingVisitor<T> visitor){  final int dim=getDimension();  visitor.start(dim,0,dim - 1);  for (int i=0; i < dim; i++) {    visitor.visit(i,getEntry(i));  }  return visitor.end();}  }
class C{  public void move(Point p){  move(p.x,p.y);}  }
class C{  public void scrollToFinishActivity(){  final int childWidth=mContentView.getWidth();  int left=0, top=0;  left=childWidth + mShadowLeft.getIntrinsicWidth() + OVERSCROLL_DISTANCE;  mDragHelper.smoothSlideViewTo(mContentView,left,top);  invalidate();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMPLETE_EXCHANGE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400556,value0,value1);}  }
class C{  public static AnnotateView openInActivePerspective() throws PartInitException {  return (AnnotateView)SVNUIPlugin.getActivePage().showView(VIEW_ID);}  }
class C{  public static byte[] sha1(byte[] input){  MessageDigest messageDigest=sha1Digest.get();  if (messageDigest == null) {    try {      messageDigest=MessageDigest.getInstance("SHA1");      sha1Digest.set(messageDigest);    } catch (    NoSuchAlgorithmException e) {      throw new UaRuntimeException(StatusCodes.Bad_InternalError,e);    }  }  return messageDigest.digest(input);}  }
class C{  public void writeSortTempFile(Object[][] records) throws CarbonSortKeyAndGroupByException {  int recordCount=0;  Object[][] tempRecords;  while (recordCount < records.length) {    if (records.length - recordCount < recordPerLeaf) {      recordPerLeaf=records.length - recordCount;    }    tempRecords=new Object[recordPerLeaf][];    System.arraycopy(records,recordCount,tempRecords,0,recordPerLeaf);    recordCount+=recordPerLeaf;    this.writer.writeSortTempFile(tempRecords);  }}  }
class C{  public SQLSchemaMigrator configure(Connection connection){  this.connection=connection;  this.metadata=new SQLModel(connection);  return this;}  }
class C{  public static void createCarbonStore(){  try {    String factFilePath=new File("src/test/resources/data.csv").getCanonicalPath();    File storeDir=new File(absoluteTableIdentifier.getStorePath());    CarbonUtil.deleteFoldersAndFiles(storeDir);    CarbonProperties.getInstance().addProperty(CarbonCommonConstants.STORE_LOCATION_HDFS,absoluteTableIdentifier.getStorePath());    String kettleHomePath="../processing/carbonplugins";    CarbonTable table=createTable();    writeDictionary(factFilePath,table);    CarbonDataLoadSchema schema=new CarbonDataLoadSchema(table);    LoadModel loadModel=new LoadModel();    String partitionId="0";    loadModel.setSchema(schema);    loadModel.setDatabaseName(absoluteTableIdentifier.getCarbonTableIdentifier().getDatabaseName());    loadModel.setTableName(absoluteTableIdentifier.getCarbonTableIdentifier().getTableName());    loadModel.setTableName(absoluteTableIdentifier.getCarbonTableIdentifier().getTableName());    loadModel.setFactFilePath(factFilePath);    loadModel.setLoadMetadataDetails(new ArrayList<LoadMetadataDetails>());    executeGraph(loadModel,absoluteTableIdentifier.getStorePath(),kettleHomePath);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public SM_PET(Pet pet,int subType,int shuggleEmotion){  this(0,PetAction.MOOD.getActionId(),0,0,pet);  this.shuggleEmotion=shuggleEmotion;  this.subType=subType;}  }
class C{  public static ResponseData parse(String responseData){  int index=responseData.indexOf(':');  String mainData, extraData;  if (-1 == index) {    mainData=responseData;    extraData="";  } else {    mainData=responseData.substring(0,index);    extraData=index >= responseData.length() ? "" : responseData.substring(index + 1);  }  String[] fields=TextUtils.split(mainData,Pattern.quote("|"));  if (fields.length < 6) {    throw new IllegalArgumentException("Wrong number of fields.");  }  ResponseData data=new ResponseData();  data.extra=extraData;  data.responseCode=Integer.parseInt(fields[0]);  data.nonce=Integer.parseInt(fields[1]);  data.packageName=fields[2];  data.versionCode=fields[3];  data.userId=fields[4];  data.timestamp=Long.parseLong(fields[5]);  return data;}  }
class C{  private static final String toXml(Vector2 v,String name){  StringBuilder sb=new StringBuilder();  sb.append("<").append(name).append(" x=\"").append(v.x).append("\" y=\"").append(v.y).append("\" />");  return sb.toString();}  }
class C{  private Vector3D convexCellBarycenter(final Vertex start){  int n=0;  Vector3D sumB=Vector3D.ZERO;  for (Edge e=start.getOutgoing(); n == 0 || e.getStart() != start; e=e.getEnd().getOutgoing()) {    sumB=new Vector3D(1,sumB,e.getLength(),e.getCircle().getPole());    n++;  }  return sumB.normalize();}  }
class C{  public SendResultBehaviour(CalcResults rResult){  super();  Result=rResult;}  }
class C{  public static final String formatSize(int size){  if (size < MB_CONSTANT) {    float kSize=(float)size / KB_CONSTANT;    kSize=((float)((int)(kSize * 10))) / 10;    return kSize + "K";  } else   if (size < GB_CONSTANT) {    float kSize=(float)size / MB_CONSTANT;    kSize=((float)((int)(kSize * 10))) / 10;    return kSize + "M";  } else {    float kSize=(float)size / GB_CONSTANT;    kSize=((float)((int)(kSize * 100))) / 100;    return kSize + "G";  }}  }
class C{  @Deprecated public SpaceTypeDescriptorBuilder addCompoundIndex(String[] paths,SpaceIndexType indexType){  if (indexType != SpaceIndexType.BASIC)   throw new UnsupportedOperationException("only BASIC index type is supported for compoundindex");  return addCompoundIndex(paths,indexType,false);}  }
class C{  public void renderEndingBoundaryComment(Appendable writer,String widgetType,ModelWidget modelWidget) throws IOException {  StringWriter sr=new StringWriter();  sr.append("<@formatBoundaryComment ");  sr.append(" boundaryType=");  sr.append(ftlFmt.makeStringLiteral("End"));  sr.append(" widgetType=");  sr.append(ftlFmt.makeStringLiteral(widgetType));  sr.append(" widgetName=");  sr.append(ftlFmt.makeStringLiteral(modelWidget.getBoundaryCommentName()));  sr.append(" />");  executeMacro(writer,sr.toString());}  }
class C{  public static void writePbsEntryPacket(PbsOutputStream output,PbsEntryPacket pbsEntry){  byte[] array=pbsEntry.getStreamBytes();  output.write(array,0,array.length);  writeDynamicProperties(output,pbsEntry.getDynamicProperties());}  }
class C{  public static void dump(PrintWriter pw,int padding,String string){  pw.print(pad(padding));  pw.println(string);}  }
class C{  public static boolean enterSafeRegion(@Nullable Object credential){  boolean token=sEnabled;  if (credential == sCredential) {    sEnabled=false;  }  return token;}  }
class C{  @VisibleForTesting synchronized ScanStatus startScheduledScan(ScheduledDailyScanUpload scheduledScan,DateTime scheduledTime) throws RepeatScanException, ScanExecutionTimeException {  String scanId=scheduledScan.getScanIdFormat().print(scheduledTime);  String directory=scheduledScan.getDirectoryFormat().print(scheduledTime);  ScanDestination destination=scheduledScan.getRootDestination().getDestinationWithSubpath(directory);  if (_scanUploader.getStatus(scanId) != null) {    throw new RepeatScanException("Scan has already been started: " + scanId);  }  DateTime now=now();  Interval acceptableInterval=new Interval(scheduledTime.minusSeconds(30),scheduledTime.plusMinutes(10));  if (!acceptableInterval.contains(now)) {    throw new ScanExecutionTimeException(format("Scheduled scan to %s is not running at the expected time: expected = %s, actual = %s",destination,scheduledTime,now));  }  ScanOptions scanOptions=new ScanOptions(scheduledScan.getPlacements()).addDestination(destination).setMaxConcurrentSubRangeScans(scheduledScan.getMaxRangeConcurrency()).setScanByAZ(scheduledScan.isScanByAZ());  _log.info("Starting scheduled scan and upload to {} for time {}",destination,scheduledTime);  return _scanUploader.scanAndUpload(scanId,scanOptions);}  }
class C{  public SootFieldRef makeFieldRef(SootClass declaringClass,String name,Type type,boolean isStatic){  return new AbstractSootFieldRef(declaringClass,name,type,isStatic);}  }
class C{  public JSONObject put(String key,int value) throws JSONException {  this.put(key,new Integer(value));  return this;}  }
class C{  public static boolean instanceOf(Object obj,String typeName,ClassLoader loader){  Class<?> infoClass=loadInfoClass(typeName,loader);  if (infoClass == null) {    throw new IllegalArgumentException("Illegal type found in info map (could not load class for specified type)");  }  return instanceOf(obj,infoClass);}  }
class C{  public static boolean isLabeledAsFailed(Protos.TaskInfo taskInfo){  for (  Protos.Label label : taskInfo.getLabels().getLabelsList()) {    if (label.getKey().equals(PERMANENTLY_FAILED_KEY) && Boolean.valueOf(label.getValue())) {      return true;    }  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_CHANGE_MEMBER_RANK_DONE_3_GUILD_MEMBER(String value0){  return new SM_SYSTEM_MESSAGE(1300268,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ITEM_CANNOT_BE_DROPPED(String value0){  return new SM_SYSTEM_MESSAGE(1300389,value0);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static TrustSource empty(){  return new TrustSource();}  }
class C{  public boolean apply(){  setup();  setVisible(true);  return ok;}  }
class C{  public static void write(String data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public Object[] toArray(){  return elementVector.toArray();}  }
class C{  public static void fileUnlock(ICarbonLock carbonLock,String locktype){  if (carbonLock.unlock()) {    if (locktype.equals(LockUsage.METADATA_LOCK)) {      LOGGER.info("Metadata lock has been successfully released");    } else     if (locktype.equals(LockUsage.TABLE_STATUS_LOCK)) {      LOGGER.info("Table status lock has been successfully released");    } else     if (locktype.equals(LockUsage.CLEAN_FILES_LOCK)) {      LOGGER.info("Clean files lock has been successfully released");    } else     if (locktype.equals(LockUsage.DELETE_SEGMENT_LOCK)) {      LOGGER.info("Delete segments lock has been successfully released");    }  } else {    if (locktype.equals(LockUsage.METADATA_LOCK)) {      LOGGER.error("Not able to release the metadata lock");    } else     if (locktype.equals(LockUsage.TABLE_STATUS_LOCK)) {      LOGGER.error("Not able to release the table status lock");    } else     if (locktype.equals(LockUsage.CLEAN_FILES_LOCK)) {      LOGGER.info("Not able to release the clean files lock");    } else     if (locktype.equals(LockUsage.DELETE_SEGMENT_LOCK)) {      LOGGER.info("Not able to release the delete segments lock");    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_INGAME_BLOCK_ENABLE_NO_MOVE(String value0){  return new SM_SYSTEM_MESSAGE(1300807,value0);}  }
class C{  public void discardRecording(){  if (recorder != null) {    try {      recorder.stop();      recorder.release();      recorder=null;      if (file != null && file.exists() && !file.isDirectory()) {        file.delete();      }    } catch (    IllegalStateException e) {    }catch (    RuntimeException e) {    }    isRecording=false;  }}  }
class C{  public CM_DUEL_REQUEST(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public void removeShape(int shapeIndex){  if ((shapeIndex >= 0) && (shapeIndex < segmentList.size())) {    segmentList.remove(shapeIndex);  }}  }
class C{  public List login() throws Exception {  Map<String,String> map=new HashMap<String,String>();  map.put("formhash","1d41a5ce");  map.put("referer","http,//www.hi-pda.com/forum/index.php");  map.put("loginfield","username");  map.put("username","");  map.put("password","");  map.put("questionid","0");  map.put("answer","");  map.put("loginsubmit","true");  map.put("cookietime","2592000");  StringBuffer params=new StringBuffer();  Iterator it=map.entrySet().iterator();  while (it.hasNext()) {    Map.Entry element=(Map.Entry)it.next();    params.append(element.getKey());    params.append("=");    params.append(element.getValue());    params.append("&");  }  if (params.length() > 0) {    params.deleteCharAt(params.length() - 1);  }  URL hipdaURL=new URL("http://www.hi-pda.com/forum/logging.php?action=login&loginsubmit=yes&inajax=1");  HttpURLConnection hipdaURLConnection=(HttpURLConnection)hipdaURL.openConnection();  hipdaURLConnection.setDoOutput(true);  hipdaURLConnection.setDoInput(true);  PrintWriter printWriter=new PrintWriter(hipdaURLConnection.getOutputStream());  printWriter.write(params.toString());  printWriter.flush();  List<String> cookielist=hipdaURLConnection.getHeaderFields().get("Set-Cookie");  return cookielist;}  }
class C{  public PollsGetVotersQuery isBoard(Boolean value){  return unsafeParam("is_board",value);}  }
class C{  public static String baseTypeName(String s){  int index=s.indexOf("[");  if (index < 0) {    return s;  } else {    return s.substring(0,index);  }}  }
class C{  private void populateContrastMethod(ContrastEnhancement contrastEnhancement,GroupIdEnum contrastMethodGroup){  GroupConfigInterface group=getGroup(contrastMethodGroup);  if (group != null) {    GroupIdEnum selectedNormalizeMethod=GroupIdEnum.UNKNOWN;    MultiOptionGroup contrastNormalizeMethodGroup=(MultiOptionGroup)group;    if (contrastEnhancement != null) {      ContrastMethod contrastMethod=contrastEnhancement.getMethod();      if (contrastMethod != null) {        String contrastMethodString=contrastMethod.name();        for (        OptionGroup option : contrastNormalizeMethodGroup.getGroupList()) {          if (option.getLabel().compareToIgnoreCase(contrastMethodString) == 0) {            selectedNormalizeMethod=option.getId();          }        }      }    }    contrastNormalizeMethodGroup.setOption(selectedNormalizeMethod);  }}  }
class C{  public final void ensureValid(JobTrigger trigger){  ensureNoErrors(validate(trigger));}  }
class C{  public boolean isSame(ModelMenuItem menuItem){  return this == menuItem;}  }
class C{  @Override public void retrieveData(){  GeoServerRESTManager manager=GeoServerRESTManagerFactory.getManager(connection);  if (manager != null) {    GeoServerRESTReader reader=manager.getReader();    if (reader != null) {      if (parentObj != null) {        parentObj.startPopulating(connection);      }      List<String> workspaceList=getWorkspaceList();      parseStyleList(reader,workspaceList);      parseLayerList(reader,workspaceList,null);    }  }}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/event/SignalThrowingEventListenerTest.testThrowSignalInNewTransaction.bpmn20.xml"}) public void testThrowSignalInRolledbackTransaction() throws Exception {  SignalThrowingEventListener listener=null;  try {    listener=new SignalThrowingEventListener();    listener.setSignalName("Signal");    listener.setProcessInstanceScope(true);    processEngineConfiguration.getEventDispatcher().addEventListener(listener,ActivitiEventType.JOB_EXECUTION_FAILURE);    ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("testSignal");    assertNotNull(processInstance);    Job signalJob=managementService.createJobQuery().processInstanceId(processInstance.getId()).singleResult();    try {      managementService.executeJob(signalJob.getId());      fail("Exception expected");    } catch (    ActivitiException ae) {    }    Job failedJob=managementService.createTimerJobQuery().withException().processInstanceId(processInstance.getId()).singleResult();    assertNotNull("Expected job with exception, found no such job",failedJob);    assertEquals(2,failedJob.getRetries());    assertEquals(0,taskService.createTaskQuery().processInstanceId(processInstance.getId()).count());    try {      managementService.moveTimerToExecutableJob(failedJob.getId());      managementService.executeJob(failedJob.getId());      fail("Exception expected");    } catch (    ActivitiException ae) {      assertEquals(0,taskService.createTaskQuery().processInstanceId(processInstance.getId()).count());    }  }  finally {    processEngineConfiguration.getEventDispatcher().removeEventListener(listener);  }}  }
class C{  public MarketSearchQuery rev(Boolean value){  return unsafeParam("rev",value);}  }
class C{  AnswerPacket updateOrWrite(UpdateOrWriteContext ctx,boolean newRouter) throws RemoteException, UnusableEntryException, UnknownTypeException, TransactionException, InterruptedException {  _engine.getTypeManager().loadServerTypeDesc(ctx.packet);  if (isPurePojo(ctx.packet)) {    ctx.isUpdateOperation=false;  } else {    ctx.isUpdateOperation=(ctx.packet.getVersion() > 0) || _engine.getCacheManager().isEntryInPureCache(ctx.packet.getUID());  }  IResponseContext responseContext=ResponseContext.getResponseContext();  if (responseContext != null && !ctx.hasConcentratingTemplate())   responseContext.setResponseHandler(new UpdateOrWriteResponseHandler(_engine,ctx));  if (ctx.fromUpdateMultiple)   ctx.operationModifiers|=Modifiers.NO_WRITE_LEASE;  ExtendedAnswerHolder holder=_engine.updateOrWrite(ctx,newRouter);  return holder != null ? holder.m_AnswerPacket : null;}  }
class C{  public BoardDeleteTopicQuery(VkApiClient client,UserActor actor,int groupId,int topicId){  super(client,"board.deleteTopic",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  topicId(topicId);}  }
class C{  public void remove(String name){  featureMap.remove(name);}  }
class C{  void signalSplitData(Node node,Node newNode,int offset){  fSplitNode=node;  fDocument.splitData(node,newNode,offset);  fSplitNode=null;}  }
class C{  public void addUpdateListener(final BaseListener<Tag> listener,final Tag initialValue){  if (LOG.isTraceEnabled()) {    LOG.trace("addUpdateListener() called.");  }  listeners.add(listener);  Tag clone=null;  updateTagLock.readLock().lock();  try {    boolean sendInitialUpdate=!TagComparator.compare(this,initialValue);    if (sendInitialUpdate) {      clone=this.clone();    }  }  finally {    updateTagLock.readLock().unlock();  }  if (clone != null) {    try {      listener.onUpdate(clone);    } catch (    Exception e) {      LOG.error("addUpdateListener() : error notifying listener",e);    }  }}  }
class C{  public static int catchRandomPokemon(){  return new Random().nextInt(NUM_OF_POKEMON) + 1;}  }
class C{  @Override public void commit(){  alerts_=unmodifiableMap(alerts);  try {    getHistory().ifPresent(null);  } catch (  Exception ex) {    logger.log(Level.WARNING,"unable to add collection data to history (dropped)",ex);  }}  }
class C{  public static int hash(Object object){  return object == null ? 0 : object.hashCode();}  }
class C{  public static Polygon polygon(Point first,Point second,Point third,Point... morePoints){  Point[] points=new Point[3 + morePoints.length];  points[0]=Assert.argumentNotNull(first,"first");  points[1]=Assert.argumentNotNull(second,"second");  points[2]=Assert.argumentNotNull(third,"third");  for (int i=0; i < morePoints.length; i++)   points[i + 3]=morePoints[i];  return polygon(points);}  }
class C{  public void stopRecording(){  m_line.stop();  m_line.close();}  }
class C{  public TreeSearch(Timer timer,double depthPenaltyFactor,IScoreConverter converter){  this.timer=timer;  this.depthPenaltyFactor=depthPenaltyFactor;  this.sorter=new TreeNodeSorter<>(converter);  this.toBeExpanded=createToBeExpanded();}  }
class C{  public PendingIntent detailsIntent(){  return mDetailsIntent;}  }
class C{  private void requestRemoveNodesStop(){  enqueue(new RemoveNodeMessageClass().doRequestStop());  logger.debug("ZWave controller end exclusion");}  }
class C{  public DynamicTemplateParameterContext addParameter(String paramName,String paramValue,boolean deleteOnExit){  return addParameter(paramName,paramValue,deleteOnExit,ContextInfo.EMPTY);}  }
class C{  public void put(final Long key){  keyList.add(key);}  }
class C{  public static int round(float value){  long lx=(long)(value * (65536 * 256f));  return (int)((lx + 0x800000) >> 24);}  }
class C{  public void translateToPoint(final Vector2D p){  originOffset=MathArrays.linearCombination(cos,p.getY(),-sin,p.getX());}  }
class C{  public static boolean isMswinFlag(){  return mswinFlag;}  }
class C{  public BigReal(double val){  d=new BigDecimal(val);}  }
class C{  public Date parseDate(String text) throws DataParseException {  m_pos.setErrorIndex(0);  m_pos.setIndex(0);  Date d=null;  try {    d=Date.valueOf(text);    m_pos.setIndex(text.length());  } catch (  IllegalArgumentException e) {    d=null;  }  if (d == null) {    java.util.Date d1=m_dfmt.parse(text,m_pos);    if (d1 != null) {      d=new Date(d1.getTime());    }  }  if (d == null || m_pos.getIndex() < text.length()) {    throw new DataParseException("Could not parse Date: " + text);  } else {    return d;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ReturnHome_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200763,skillcaster,skillname);}  }
class C{  private StringBuilder appendTypeParameterList(StringBuilder buffer,CompletionProposal typeProposal){  char[] signature=SignatureUtil.fix83600(typeProposal.getSignature());  char[][] typeParameters=Signature.getTypeArguments(signature);  for (int i=0; i < typeParameters.length; i++) {    char[] param=typeParameters[i];    typeParameters[i]=Signature.toCharArray(param);  }  return appendParameterSignature(buffer,typeParameters,null);}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  public void cancelCallWithTag(String tag){  for (  Call call : client.dispatcher().queuedCalls()) {    if (call.request().tag().equals(tag)) {      call.cancel();    }  }  for (  Call call : client.dispatcher().runningCalls()) {    if (call.request().tag().equals(tag)) {      call.cancel();    }  }}  }
class C{  public static List<Protos.Offer> filterOutAcceptedOffers(List<Protos.Offer> offers,Collection<Protos.OfferID> acceptedOfferIds){  return offers.stream().filter(null).collect(Collectors.toList());}  }
class C{  private synchronized void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();}  }
class C{  private Filter addFilter(FilterNode node){  Filter filter=node.getFilter();  FilterConfigInterface filterConfig=node.getFilterConfig();  if (filter instanceof LogicFilterImpl) {    List<Filter> filterList=new ArrayList<Filter>();    createFilterList(node,filterList);    return filterConfig.createLogicFilter(filterList);  }  List<Expression> parameterFilter=new ArrayList<Expression>();  if (filter instanceof FidFilterImpl) {    createExpressionParameterList(node,1,parameterFilter);  } else   if (filter instanceof BinaryTemporalOperator) {    createExpressionParameterList(node,2,parameterFilter);  } else   if (filter instanceof PropertyIsBetween) {    createExpressionParameterList(node,3,parameterFilter);  } else   if (filter instanceof PropertyIsNull) {    createExpressionParameterList(node,1,parameterFilter);  } else   if (filter instanceof PropertyIsLike) {    createExpressionParameterList(node,6,parameterFilter);  } else   if (filter instanceof BinarySpatialOperator) {    createExpressionParameterList(node,2,parameterFilter);  } else   if (filter instanceof BinaryComparisonAbstract) {    if (filter instanceof Not) {      createExpressionParameterList(node,1,parameterFilter);    } else     if (filter instanceof PropertyIsGreaterThan) {      createExpressionParameterList(node,2,parameterFilter);    } else {      createExpressionParameterList(node,3,parameterFilter);    }  } else {    return filter;  }  return filterConfig.createFilter(parameterFilter);}  }
class C{  public synchronized void startPreview(){  OpenCamera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.getCamera().startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,theCamera.getCamera());  }}  }
class C{  public MarketAddAlbumQuery mainAlbum(Boolean value){  return unsafeParam("main_album",value);}  }
class C{  public static boolean isScreenLocked(Context context){  KeyguardManager km=(KeyguardManager)context.getSystemService(Context.KEYGUARD_SERVICE);  return km.inKeyguardRestrictedInputMode();}  }
class C{  public Header nextHeader() throws NoSuchElementException {  final int current=this.currentIndex;  if (current < 0) {    throw new NoSuchElementException("Iteration already finished.");  }  this.lastIndex=current;  this.currentIndex=findNext(current);  return (Header)this.allHeaders.get(current);}  }
class C{  public void print(PrintWriter output,int w,int d){  DecimalFormat format=new DecimalFormat();  format.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));  format.setMinimumIntegerDigits(1);  format.setMaximumFractionDigits(d);  format.setMinimumFractionDigits(d);  format.setGroupingUsed(false);  print(output,format,w + 2);}  }
class C{  public static String arrayToCommaDelimitedString(Object[] arr){  return arrayToDelimitedString(arr,",");}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public static boolean isGoUp(KeyEvent event){  return isActionDown(event) && (event.getKeyCode() == KeyEvent.KEYCODE_DPAD_UP || (!event.isNumLockOn() && event.getKeyCode() == KeyEvent.KEYCODE_NUMPAD_8));}  }
class C{  public GroupsEditQuery marketCountry(Integer... value){  return unsafeParam("market_country",value);}  }
class C{  public String toShortString(){  return exited() ? ("Exit " + getExitCode()) : (getSignalString(getTerminatingSignal()));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MagicCounterATK_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200530,skilltarget,skillname);}  }
class C{  public Builder(){}  }
class C{  @Override public void configure(String title,Class<?> fieldType,boolean isRasterSymbol){  this.fieldType=fieldType;  setTitle(String.format("%s : %s",title,((fieldType == null) ? "???" : fieldType.getSimpleName())));  expressionPanel.setDataType(fieldType,isRasterSymbol);  propertyPanel.setDataType(fieldType);  envVarPanel.setDataType(fieldType);  textArea.setText("");}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public void installAemPackage(String packageName) throws IOException {  String packagePath=String.format("/etc/packages/%s.zip",packageName);  HttpPost request=builder.createInstallRequest(packagePath);  sender.sendCrxRequest(request);}  }
class C{  void addPreDrawListener(){  if (mIsAttachedToWindow) {    if (mOnPreDrawListener == null) {      mOnPreDrawListener=new OnPreDrawListener();    }    final ViewTreeObserver vto=getViewTreeObserver();    vto.addOnPreDrawListener(mOnPreDrawListener);  }  mNeedsPreDrawListener=true;}  }
class C{  private void procAppear(View scrollView,int x,int y,int oldx,int oldy){  String direction="";  if (mOrientation == VERTICAL) {    direction=y - oldy > 0 ? "up" : "down";  } else   if (mOrientation == HORIZONTAL) {    direction=x - oldx > 0 ? "right" : "left";  }  ConcurrentHashMap<String,AppearData> appearMap=mAppearMap.get(mDomObj.ref);  if (appearMap == null) {    return;  }  Iterator<Entry<String,AppearData>> iterator=appearMap.entrySet().iterator();  Entry<String,AppearData> entry=null;  AppearData appearData;  if (mScrollRect == null) {    mScrollRect=new Rect();    getInnerView().getHitRect(mScrollRect);  }  while (iterator.hasNext()) {    entry=iterator.next();    appearData=entry.getValue();    if (!appearData.mAppear && appearData.mAppearComponent.getHostView().getLocalVisibleRect(mScrollRect)) {      appearData.mAppear=true;      if (appearData.hasAppear) {        Map<String,Object> params=new HashMap<>();        params.put("direction",direction);        WXSDKManager.getInstance().fireEvent(mInstanceId,appearData.mAppearComponent.getRef(),WXEventType.APPEAR,params);      }    } else     if (appearData.mAppear && !appearData.mAppearComponent.getHostView().getLocalVisibleRect(mScrollRect)) {      appearData.mAppear=false;      if (appearData.hasDisappear) {        Map<String,Object> params=new HashMap<>();        params.put("direction",direction);        WXSDKManager.getInstance().fireEvent(mInstanceId,appearData.mAppearComponent.getRef(),WXEventType.DISAPPEAR,params);      }    }  }}  }
class C{  private void resetData(){  mRemotePath="";  mLocalPath="";  mAccountName="";  mFileSize=-1;  mId=-1;  mLocalAction=FileUploader.LOCAL_BEHAVIOUR_COPY;  mForceOverwrite=false;  mIsCreateRemoteFolder=false;  mUploadStatus=UploadStatus.UPLOAD_IN_PROGRESS;  mLastResult=UploadResult.UNKNOWN;  mCreatedBy=UploadFileOperation.CREATED_BY_USER;}  }
class C{  @Override public Cursor query(@NonNull Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  SQLiteDatabase db=mDatabaseHelper.getReadableDatabase();  SelectionBuilder builder=new SelectionBuilder();  int uriMatch=sUriMatcher.match(uri);switch (uriMatch) {case ROUTE_ENTRIES_ID:    String id=uri.getLastPathSegment();  builder.where(FeedContract.Entry._ID + "=?",id);case ROUTE_ENTRIES:builder.table(FeedContract.Entry.TABLE_NAME).where(selection,selectionArgs);Cursor c=builder.query(db,projection,sortOrder);Context ctx=getContext();assert ctx != null;c.setNotificationUri(ctx.getContentResolver(),uri);return c;default :throw new UnsupportedOperationException("Unknown uri: " + uri);}}  }
class C{  @Timed(name="bv.emodb.sor.AstyanaxDataWriterDAO.compact",absolute=true) @Override public void compact(Table tbl,String key,UUID compactionKey,Compaction compaction,UUID changeId,Delta delta,Collection<UUID> changesToDelete,List<History> historyList,WriteConsistency consistency){  checkNotNull(tbl,"table");  checkNotNull(key,"key");  checkNotNull(compactionKey,"compactionKey");  checkNotNull(compaction,"compaction");  checkNotNull(changeId,"changeId");  checkNotNull(delta,"delta");  checkNotNull(changesToDelete,"changesToDelete");  checkNotNull(consistency,"consistency");  AstyanaxTable table=(AstyanaxTable)tbl;  for (  AstyanaxStorage storage : table.getWriteStorage()) {    DeltaPlacement placement=(DeltaPlacement)storage.getPlacement();    CassandraKeyspace keyspace=placement.getKeyspace();    ByteBuffer rowKey=storage.getRowKey(key);    writeCompaction(rowKey,compactionKey,compaction,consistency,placement,keyspace,tbl,key);    deleteCompactedDeltas(rowKey,consistency,placement,keyspace,changesToDelete,historyList,tbl,key);  }}  }
class C{  @Override public boolean isReadOnly(){  return readOnly;}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  if (b == null) {    throw new NullPointerException("Byte array must not be null");  }  if (len < 0 || off < 0 || (off + len) > b.length) {    throw new IndexOutOfBoundsException("Array Size=" + b.length + ", offset="+ off+ ", length="+ len);  }  int read=0;  if (len == 0) {    return 0;  }  while (len > 0) {    if (encoderOut.hasRemaining()) {      int c=Math.min(encoderOut.remaining(),len);      encoderOut.get(b,off,c);      off+=c;      len-=c;      read+=c;    } else {      fillBuffer();      if (endOfInput && !encoderOut.hasRemaining()) {        break;      }    }  }  return read == 0 && endOfInput ? -1 : read;}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/event/ProcessInstanceEventsTest.noneTaskProcess.bpmn20.xml"}) public void testProcessCompleted_StartEnd() throws Exception {  this.runtimeService.startProcessInstanceByKey("noneTaskProcess");  assertEquals("ActivitiEventType.PROCESS_COMPLETED was expected 1 time.",1,listener.filterEvents(ActivitiEventType.PROCESS_COMPLETED).size());}  }
class C{  public void start(Context context,android.support.v4.app.Fragment fragment){  start(context,fragment,REQUEST_CROP);}  }
class C{  protected void processThermostatOperatingStateReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {  int value=serialMessage.getMessagePayloadByte(offset + 1);  logger.debug("NODE {}: Thermostat Operating State report value = {}",this.getNode().getNodeId(),value);  OperatingStateType operatingStateType=OperatingStateType.getOperatingStateType(value);  if (operatingStateType == null) {    logger.error("NODE {}: Unknown Operating State Type = {}, ignoring report.",this.getNode().getNodeId(),value);    return;  }  dynamicDone=true;  logger.debug("NODE {}: Operating State Type = {} ({})",this.getNode().getNodeId(),operatingStateType.getLabel(),value);  logger.debug("NODE {}: Thermostat Operating State Report value = {}",this.getNode().getNodeId(),operatingStateType.getLabel());  ZWaveCommandClassValueEvent zEvent=new ZWaveCommandClassValueEvent(this.getNode().getNodeId(),endpoint,this.getCommandClass(),new BigDecimal(value));  this.getController().notifyEventListeners(zEvent);}  }
class C{  private void notifyProcessTags(final Long processId){  Process process=processCache.getCopy(processId);  for (  Long equipmentId : process.getEquipmentIds()) {    notifyEquipmentTags(equipmentId);  }}  }
class C{  public static DedupQueueClientFactory forClusterAndHttpClient(String clusterName,Client client){  return new DedupQueueClientFactory(clusterName,client);}  }
class C{  public void onContentLoadStarted(String url){}  }
class C{  public <R>Plan<R> then(Function5<T1,T2,T3,T4,T5,R> selector){  if (selector == null) {    throw new NullPointerException();  }  return new Plan5<T1,T2,T3,T4,T5,R>(this,selector);}  }
class C{  public static void showValues(String[] titles,String[] values){  if (titles.length == 0 || (titles.length != values.length)) {    return;  }  JTable table=new JTable();  table.setModel(new DefaultTableModel(new Object[][]{},new String[]{" "," "}));  SwingUtil.TableUtil.ensureRowNumber(table,titles.length);  for (int i=0; i < titles.length; i++) {    table.setValueAt(titles[i],i,0);    table.setValueAt(values[i],i,1);  }  JScrollPane mainPanel=new JScrollPane(table);  JOptionPane.showMessageDialog(null,mainPanel,"Enter values",JOptionPane.OK_OPTION);}  }
class C{  public String[] upload_appender_file(String group_name,long file_size,UploadCallback callback,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  final String master_filename=null;  final String prefix_name=null;  return this.do_upload_file(ProtoCommon.STORAGE_PROTO_CMD_UPLOAD_APPENDER_FILE,group_name,master_filename,prefix_name,file_ext_name,file_size,callback,meta_list);}  }
class C{  public void addResource(String name){  addResourceObject(name);}  }
class C{  public FDistribution(double numeratorDegreesOfFreedom,double denominatorDegreesOfFreedom,double inverseCumAccuracy) throws MathIllegalArgumentException {  super(inverseCumAccuracy);  if (numeratorDegreesOfFreedom <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DEGREES_OF_FREEDOM,numeratorDegreesOfFreedom);  }  if (denominatorDegreesOfFreedom <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DEGREES_OF_FREEDOM,denominatorDegreesOfFreedom);  }  this.numeratorDegreesOfFreedom=numeratorDegreesOfFreedom;  this.denominatorDegreesOfFreedom=denominatorDegreesOfFreedom;  this.numericalVariance=calculateNumericalVariance();}  }
class C{  private SelectedChannelType extractContrastEnhancementGroup(GroupIdEnum channelGroup,FieldIdEnum nameField,GroupIdEnum contrastGroup,FieldIdEnum gammaField,GroupIdEnum contrastMethod){  SelectedChannelType channelType=null;  GroupConfigInterface group=getGroup(channelGroup);  if (group.isPanelEnabled()) {    String channelName=fieldConfigVisitor.getText(nameField);    GroupConfigInterface contrastGrp=getGroup(contrastGroup);    ContrastEnhancement contrastEnhancement=null;    if (contrastGrp.isPanelEnabled()) {      Expression gammaExpression=fieldConfigVisitor.getExpression(gammaField);      GroupConfigInterface constrastMethodGroup=getGroup(contrastMethod);      if (constrastMethodGroup != null) {        String method=null;        MultiOptionGroup constrastMethodGroup2=(MultiOptionGroup)constrastMethodGroup;        OptionGroup selectedOption=constrastMethodGroup2.getSelectedOptionGroup();        if (selectedOption != null) {          method=selectedOption.getLabel();        }        contrastEnhancement=(ContrastEnhancement)getStyleFactory().contrastEnhancement(gammaExpression,method);      }    }    channelType=getStyleFactory().createSelectedChannelType(channelName,contrastEnhancement);  }  return channelType;}  }
class C{  void canLoadMore(String loadMoreMsg){  state=FooterState.STATE_LOAD_MORE;  loadMoreView(loadMoreMsg);}  }
class C{  public boolean isIdColumn(){  return "_id".equalsIgnoreCase(columnName) || "id".equalsIgnoreCase(columnName);}  }
class C{  @Override public void confirm(){  bobcatWait.withTimeout(Timeouts.BIG).until(ExpectedConditions.visibilityOf(copyButton));  bobcatWait.withTimeout(Timeouts.BIG).until(WindowActions.clickButton(copyButton));}  }
class C{  FormatInformation readFormatInformation() throws FormatException {  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  int formatInfoBits1=0;  for (int i=0; i < 6; i++) {    formatInfoBits1=copyBit(i,8,formatInfoBits1);  }  formatInfoBits1=copyBit(7,8,formatInfoBits1);  formatInfoBits1=copyBit(8,8,formatInfoBits1);  formatInfoBits1=copyBit(8,7,formatInfoBits1);  for (int j=5; j >= 0; j--) {    formatInfoBits1=copyBit(8,j,formatInfoBits1);  }  int dimension=bitMatrix.getHeight();  int formatInfoBits2=0;  int jMin=dimension - 7;  for (int j=dimension - 1; j >= jMin; j--) {    formatInfoBits2=copyBit(8,j,formatInfoBits2);  }  for (int i=dimension - 8; i < dimension; i++) {    formatInfoBits2=copyBit(i,8,formatInfoBits2);  }  parsedFormatInfo=FormatInformation.decodeFormatInformation(formatInfoBits1,formatInfoBits2);  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  throw FormatException.getFormatInstance();}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  final AlignmentViewer viewer=(AlignmentViewer)getViewer();  final Alignment alignment=viewer.getAlignment();  final SelectedBlock block=viewer.getSelectedBlock();  final ArrayList<String> names=new ArrayList<>();  for (int row=0; row < alignment.getRowCompressor().getNumberRows(); row++) {    if (block.isSelectedRow(row)) {      for (      Integer read : alignment.getRowCompressor().getCompressedRow2Reads(row)) {        Lane lane=alignment.getLane(read);        int firstJump=alignment.getGapColumnContractor().getTotalJumpBeforeLayoutColumn(block.getFirstCol());        if ((block.isSelectedCol(lane.getFirstNonGapPosition() - firstJump + 1))) {          names.add(Basic.getFirstWord(lane.getName()));        }      }    }  }  if (names.size() > 0) {    executeImmediately("show window=Inspector;");    final InspectorWindow inspectorWindow=(InspectorWindow)getDir().getViewerByClass(InspectorWindow.class);    if (inspectorWindow != null) {      final String command="show read='\\Q" + Basic.toString(names,"\\E|\\Q") + "\\E';";      System.err.println(command);      getDir().execute(command,inspectorWindow.getCommandManager());    }  }}  }
class C{  public boolean isAccepted(Question q){  if (excludeQuestions != null && excludeQuestions.contains(";" + q.getQuestionId() + ";")) {    return false;  }  if (filterDupes) {    if (!q.isPossibleDuplicate()) {      return false;    }  }  if (closeVotes != null && closeVotes.isFilterActive()) {    if (!closeVotes.inRange(q.getCloseVoteCount())) {      return false;    }  }  if (scores != null && scores.isFilterActive()) {    if (!scores.inRange(q.getScore())) {      return false;    }  }  if (answerType != null) {switch (answerType) {case CLICK_FROM_ROOMBA:      return q.isAlmostRoomba();case HAS_ANSWER:    return q.getAnswerCount() > 0;case HAS_ACCEPTED_ANSWER:  return q.isAnswerAccepted();case HAS_NO_ACCEPTED_ANSWER:return !q.isAnswerAccepted();case HAS_NO_ANSWER:return q.getAnswerCount() <= 0;case NO_ROOMBA:return !q.isRoomba();case NO_FILTER:return true;}}return true;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public SynchronizedStmt fullCopy(){  SynchronizedStmt tree=(SynchronizedStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static void destroy(File file,boolean proceed) throws IOException {  if (!file.exists() || file.delete())   return;  ArrayList errors=(proceed ? new ArrayList() : null);  destroyDir(file,errors);  if (errors != null && errors.size() != 0) {    StringBuffer buf=new StringBuffer("couldn't delete:");    for (int i=0; i < errors.size(); i++)     buf.append('\n').append(errors.get(i));    throw new IOException(buf.toString());  }}  }
class C{  public void writeTo(OutputStream out) throws IOException {  buffer.writeTo(out);}  }
class C{  public TupleComparator(String field,Class type,boolean ascend){  this(field,type,ascend,DefaultLiteralComparator.getInstance());}  }
class C{  public int modify_file(String group_name,String appender_filename,long file_offset,byte[] file_buff) throws IOException, MyException {  return this.do_modify_file(group_name,appender_filename,file_offset,file_buff.length,new UploadBuff(file_buff,0,file_buff.length));}  }
class C{  public static Map<String,Object> testXmlRpcClientAdd(DispatchContext dctx,Map<String,?> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=null;  Integer num1=125;  Integer num2=365;  try {    Map<String,Object> localMap=dctx.makeValidContext("testXmlRpcLocalEngine","IN",context);    localMap.put("num1",num1);    localMap.put("num2",num2);    result=dctx.getDispatcher().runSync("testXmlRpcLocalEngine",localMap);  } catch (  GenericServiceException e) {    return ServiceUtil.returnError(e.getLocalizedMessage());  }  if (ServiceUtil.isError(result))   return result;  Integer res=(Integer)result.get("resulting");  if (res == (num1 + num2)) {    result=ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"ServiceTestXmlRpcCalculationOK",locale) + res);  } else {    result=ServiceUtil.returnError(UtilProperties.getMessage(resource,"ServiceTestXmlRpcCalculationKO",locale));  }  return result;}  }
class C{  private static int countCoordRepeatReverse(Coordinate[] coords){  int repeatCoords=0;  final Coordinate firstCoord=coords[0];  Coordinate nextCoord;  for (int i=coords.length - 1; i > 0; --i) {    nextCoord=coords[i];    if (equalAsInts2d(firstCoord,nextCoord)) {      ++repeatCoords;    } else {      break;    }  }  return repeatCoords;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  servID=new ServiceID(in);  if (item instanceof Item)   item=((Item)item).get();}  }
class C{  private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){  int i;  if (av == null) {switch (b[v] & 0xFF) {case 'e':      return v + 5;case '@':    return readAnnotationValues(v + 3,buf,true,null);case '[':  return readAnnotationValues(v + 1,buf,false,null);default :return v + 3;}}switch (b[v++] & 0xFF) {case 'I':case 'J':case 'F':case 'D':av.visit(name,readConst(readUnsignedShort(v),buf));v+=2;break;case 'B':av.visit(name,new Byte((byte)readInt(items[readUnsignedShort(v)])));v+=2;break;case 'Z':av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);v+=2;break;case 'S':av.visit(name,new Short((short)readInt(items[readUnsignedShort(v)])));v+=2;break;case 'C':av.visit(name,new Character((char)readInt(items[readUnsignedShort(v)])));v+=2;break;case 's':av.visit(name,readUTF8(v,buf));v+=2;break;case 'e':av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));v+=4;break;case 'c':av.visit(name,Type.getType(readUTF8(v,buf)));v+=2;break;case '@':v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));break;case '[':int size=readUnsignedShort(v);v+=2;if (size == 0) {return readAnnotationValues(v - 2,buf,false,av.visitArray(name));}switch (this.b[v++] & 0xFF) {case 'B':byte[] bv=new byte[size];for (i=0; i < size; i++) {bv[i]=(byte)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,bv);--v;break;case 'Z':boolean[] zv=new boolean[size];for (i=0; i < size; i++) {zv[i]=readInt(items[readUnsignedShort(v)]) != 0;v+=3;}av.visit(name,zv);--v;break;case 'S':short[] sv=new short[size];for (i=0; i < size; i++) {sv[i]=(short)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,sv);--v;break;case 'C':char[] cv=new char[size];for (i=0; i < size; i++) {cv[i]=(char)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,cv);--v;break;case 'I':int[] iv=new int[size];for (i=0; i < size; i++) {iv[i]=readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,iv);--v;break;case 'J':long[] lv=new long[size];for (i=0; i < size; i++) {lv[i]=readLong(items[readUnsignedShort(v)]);v+=3;}av.visit(name,lv);--v;break;case 'F':float[] fv=new float[size];for (i=0; i < size; i++) {fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));v+=3;}av.visit(name,fv);--v;break;case 'D':double[] dv=new double[size];for (i=0; i < size; i++) {dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));v+=3;}av.visit(name,dv);--v;break;default :v=readAnnotationValues(v - 3,buf,false,av.visitArray(name));}}return v;}  }
class C{  public void changeCharset(String charsetName) throws IOException {  this.charsetName=charsetName;  reader.changeCharset(charsetName);  writer.changeCharset(charsetName);}  }
class C{  @Override public int compareTo(@SuppressWarnings("NullableProblems") Fragment other){  if (this == other)   return 0;  return priority.compareTo(other.getPriority());}  }
class C{  public static double toDegrees(double x){  if (Double.isInfinite(x) || x == 0.0) {    return x;  }  final double facta=57.2957763671875;  final double factb=3.145894820876798E-6;  double xa=doubleHighPart(x);  double xb=x - xa;  return xb * factb + xb * facta + xa * factb + xa * facta;}  }
class C{  public static Map<String,Object> convertDocumentStreamToStream(DispatchContext dctx,Map<String,? extends Object> context){  XMultiComponentFactory xmulticomponentfactory=null;  String stringUrl="file:///" + context.get("filenameFrom");  String stringConvertedFile="file:///" + context.get("filenameTo");  String inputMimeType=(String)context.get("inputMimeType");  String outputMimeType=(String)context.get("outputMimeType");  String oooHost=(String)context.get("oooHost");  String oooPort=(String)context.get("oooPort");  try {    xmulticomponentfactory=OpenOfficeWorker.getRemoteServer(oooHost,oooPort);    File inputFile=new File(stringUrl);    long fileSize=inputFile.length();    FileInputStream fis=new FileInputStream(inputFile);    ByteArrayOutputStream baos=new ByteArrayOutputStream((int)fileSize);    int c;    while ((c=fis.read()) != -1) {      baos.write(c);    }    OpenOfficeByteArrayInputStream oobais=new OpenOfficeByteArrayInputStream(baos.toByteArray());    OpenOfficeByteArrayOutputStream oobaos=OpenOfficeWorker.convertOODocByteStreamToByteStream(xmulticomponentfactory,oobais,inputMimeType,outputMimeType);    FileOutputStream fos=new FileOutputStream(stringConvertedFile);    fos.write(oobaos.toByteArray());    fos.close();    fis.close();    oobais.close();    oobaos.close();    Map results=ServiceUtil.returnSuccess();    return results;  } catch (  IOException e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }catch (  Exception e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }}  }
class C{  public static String currentPlatformName(){  String os=System.getProperty("os.name");  if (os.startsWith("Mac OS")) {    return "Mac OS X";  } else   if (os.startsWith("Windows")) {    return "Windows";  } else   if (os.startsWith("Linux")) {    return "Linux";  }  return "Other";}  }
class C{  public void save(@NotNull ProgressIndicator progress){  if (isSourcesModified()) {    RepositorySourceProvider userSourceProvider=getUserSourceProvider();    assert userSourceProvider != null;    userSourceProvider.save(new RepoProgressIndicatorAdapter(progress));    reset();  }}  }
class C{  @Override public void onReceive(Context context,Intent intent){switch (intent.getAction()) {case DownloadManager.ACTION_DOWNLOAD_COMPLETE:    long missionId=intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID,-1);  if (!downloadCollectionSuccess(context,missionId)) {    downloadPhotoSuccess(context,missionId);    DownloadHelper.getInstance(context).refreshEntityList();  }break;case DownloadManager.ACTION_NOTIFICATION_CLICKED:Intent manageActivity=new Intent(context,DownloadManageActivity.class);manageActivity.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);manageActivity.putExtra(DownloadManageActivity.EXTRA_NOTIFICATION,true);context.startActivity(manageActivity);break;}}  }
class C{  public static long addItem(Player player,int itemId,long count,Item sourceItem,ItemUpdatePredicate predicate){  ItemTemplate itemTemplate=DataManager.ITEM_DATA.getItemTemplate(itemId);  if (count <= 0 || itemTemplate == null) {    return 0;  }  Preconditions.checkNotNull(itemTemplate,"No item with id " + itemId);  Preconditions.checkNotNull(predicate,"Predicate is not supplied");  if (LoggingConfig.LOG_ITEM) {    log.info("[ITEM] ID/Count" + (LoggingConfig.ENABLE_ADVANCED_LOGGING ? "/Item Name - " + itemTemplate.getTemplateId() + "/"+ count+ "/"+ itemTemplate.getName() : " - " + itemTemplate.getTemplateId() + "/"+ count) + " to player "+ player.getName());  }  Storage inventory=player.getInventory();  if (itemTemplate.isKinah()) {    inventory.increaseKinah(count);    return 0;  }  if (itemTemplate.isStackable()) {    count=addStackableItem(player,itemTemplate,count,predicate);  } else {    count=addNonStackableItem(player,itemTemplate,count,sourceItem,predicate);  }  if (inventory.isFull(itemTemplate.getExtraInventoryId()) && count > 0) {    PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_MSG_DICE_INVEN_ERROR);  }  return count;}  }
class C{  public int geom_worklist(){  String s=soot.PhaseOptions.getString(options,"geom-worklist");  if (s.equalsIgnoreCase("PQ"))   return geom_worklist_PQ;  if (s.equalsIgnoreCase("FIFO"))   return geom_worklist_FIFO;  throw new RuntimeException("Invalid value " + s + " of phase option geom-worklist");}  }
class C{  public DefaultTaskConfigRouter(){  this(System.getenv());}  }
class C{  public CommFaultTagCacheObject clone() throws CloneNotSupportedException {  return (CommFaultTagCacheObject)super.clone();}  }
class C{  DatabaseClusterUnit(DataInputStream is) throws IOException {  this.type=is.readInt();  this.phone=is.readInt();  this.start=is.readInt();  this.end=is.readInt();  this.prev=is.readInt();  this.next=is.readInt();}  }
class C{  public void addEntry(Label l,int line){  pc.addElement(l);  this.line.addElement(new Integer(line));}  }
class C{  public void updateFileDetails(OCFile file,Account ocAccount){  setFile(file);  mAccount=ocAccount;  updateFileDetails(false,false);}  }
class C{  public boolean filterOut(final SAMRecord first,final SAMRecord second){  throw new UnsupportedOperationException("Paired *Filter not implemented!");}  }
class C{  public void addWord(Item tokenItem,String word){  assert (tokenItem != null);  Item wordItem=tokenItem.createDaughter();  FeatureSet featureSet=wordItem.getFeatures();  featureSet.setString("name",word);  relation.appendItem(wordItem);}  }
class C{  private void createElement(Document doc,Element parentElement,String elementName,boolean value){  Element element=doc.createElement(elementName);  element.appendChild(doc.createTextNode(Boolean.toString(value)));  parentElement.appendChild(element);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(" [");  sb.append("Hash = ").append(hashCode());  sb.append(", groupName=").append(groupName);  sb.append(", taskName=").append(taskName);  sb.append(", startTime=").append(startTime);  sb.append(", endTime=").append(endTime);  sb.append(", status=").append(status);  sb.append(", serverHost=").append(serverHost);  sb.append(", serverDuid=").append(serverDuid);  sb.append(", fireInfo=").append(fireInfo);  sb.append("]");  return sb.toString();}  }
class C{  public void addTaintPropagationHandler(TaintPropagationHandler handler){  this.taintPropagationHandlers.add(handler);}  }
class C{  public ContextVarNode findContextVarNode(Object baseValue,Context context){  LocalVarNode base=findLocalVarNode(baseValue);  if (base == null)   return null;  return base.context(context);}  }
class C{  private void createAllIvLayout(){  LinearLayoutManager layoutManager=new LinearLayoutManager(this);  rvResults.hasFixedSize();  rvResults.setLayoutManager(layoutManager);  rvResults.setItemAnimator(new DefaultItemAnimator());}  }
class C{  public void checkWarnings(){}  }
class C{  public long renew(String entryUid,String className,int objectType,long duration,boolean fromReplication,boolean origin,boolean isFromGateway) throws UnknownLeaseException, InternalSpaceException {  try {    extendLeasePeriod(entryUid,className,objectType,duration,fromReplication,origin,false,null,isFromGateway);  } catch (  UnknownLeaseException unknownLeaseException) {    if (_cacheManager.isCacheExternalDB() && objectType != ObjectTypes.NOTIFY_NULL_TEMPLATE && objectType != ObjectTypes.NOTIFY_TEMPLATE) {      if (_logger.isLoggable(Level.FINE)) {        _logger.log(Level.FINE,"Failed to renew lease of an entry belonging to external-data-source.",unknownLeaseException);      }    } else     throw unknownLeaseException;  }  return duration;}  }
class C{  public void lerp(Vector2 dp,double da,double alpha,Transform result){  result.set(this);  result.translate(dp.x * alpha,dp.y * alpha);  result.rotate(da * alpha,result.getTranslationX(),result.getTranslationY());}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set color=");  Color color=null;  if (np.peekMatchIgnoreCase("null"))   np.matchIgnoreCase("null"); else   color=np.getColor();  np.matchIgnoreCase(";");  if (getViewer() instanceof GraphView) {    boolean changed=false;    GraphView viewer=(GraphView)getViewer();    for (    Node v : viewer.getSelectedNodes()) {      viewer.setColor(v,color);      changed=true;    }    for (    Edge edge : viewer.getSelectedEdges()) {      viewer.setColor(edge,color);      changed=true;    }    if (changed) {      viewer.repaint();    }  }}  }
class C{  public void saveValues(OutputStream os) throws IOException {  storage.saveValues(os);}  }
class C{  private static void readSemanticProtocolVersion(IonReader reader,IapMessageFields iapMessageFields){  if (reader.fieldType == IonFieldTypes.KEY_SHORT) {    if (isSemanticProtoocolVersionKey(reader)) {      reader.nextParse();      if (reader.fieldType == IonFieldTypes.BYTES) {        iapMessageFields.semanticProtocolVersionOffset=reader.index;        iapMessageFields.semanticProtocolVersionLength=reader.fieldLength;      }      reader.nextParse();    }  }}  }
class C{  public static boolean addOrUpdateBan(BannedIP ipBan){  if (ipBan.getId() == null) {    if (getDAO().insert(ipBan)) {      banList.add(ipBan);      return true;    }    return false;  }  return getDAO().update(ipBan);}  }
class C{  public static boolean matches(IIngredient ingredient,IItemStack itemStack){  if (ingredient == null) {    return false;  }  if (!ingredient.matches(itemStack)) {    return false;  }  return true;}  }
class C{  GitReference(GitRepository repository,String reference){  Preconditions.checkArgument(COMPLETE_SHA1_PATTERN.matcher(reference).matches(),"Reference '%s' is not a 40 characters SHA-1",reference);  this.repository=repository;  this.reference=reference;}  }
class C{  public void updateDescription(CompletionProposal proposal,CompletionItem item){switch (proposal.getKind()) {case CompletionProposal.METHOD_NAME_REFERENCE:case CompletionProposal.METHOD_REF:case CompletionProposal.CONSTRUCTOR_INVOCATION:case CompletionProposal.METHOD_REF_WITH_CASTED_RECEIVER:case CompletionProposal.POTENTIAL_METHOD_DECLARATION:    if (fContext != null && fContext.isInJavadoc()) {      createJavadocMethodProposalLabel(proposal,item);      break;    }  createMethodProposalLabel(proposal,item);break;case CompletionProposal.METHOD_DECLARATION:createOverrideMethodProposalLabel(proposal,item);break;case CompletionProposal.ANONYMOUS_CLASS_DECLARATION:case CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION:createAnonymousTypeLabel(proposal,item);break;case CompletionProposal.TYPE_REF:createTypeProposalLabel(proposal,item);break;case CompletionProposal.JAVADOC_TYPE_REF:createJavadocTypeProposalLabel(proposal,item);break;case CompletionProposal.JAVADOC_FIELD_REF:case CompletionProposal.JAVADOC_VALUE_REF:case CompletionProposal.JAVADOC_BLOCK_TAG:case CompletionProposal.JAVADOC_INLINE_TAG:case CompletionProposal.JAVADOC_PARAM_REF:createJavadocSimpleProposalLabel(proposal,item);break;case CompletionProposal.JAVADOC_METHOD_REF:createJavadocMethodProposalLabel(proposal,item);break;case CompletionProposal.PACKAGE_REF:createPackageProposalLabel(proposal,item);break;case CompletionProposal.ANNOTATION_ATTRIBUTE_REF:case CompletionProposal.FIELD_REF:case CompletionProposal.FIELD_REF_WITH_CASTED_RECEIVER:createLabelWithTypeAndDeclaration(proposal,item);break;case CompletionProposal.LOCAL_VARIABLE_REF:case CompletionProposal.VARIABLE_DECLARATION:createSimpleLabelWithType(proposal,item);break;case CompletionProposal.KEYWORD:case CompletionProposal.LABEL_REF:item.setLabel(createSimpleLabel(proposal).toString());break;default :Assert.isTrue(false);}}  }
class C{  public static DoubleBuffer clone(DoubleBuffer buf){  if (buf == null) {    return null;  }  buf.rewind();  DoubleBuffer copy;  if (buf.isDirect()) {    copy=createDoubleBuffer(buf.limit());  } else {    copy=DoubleBuffer.allocate(buf.limit());  }  copy.put(buf);  return copy;}  }
class C{  static void drawVerticalZigZagLine(Graphics2D g,int x,int y1,int y2,int dX1,int dX2){  if (y2 < y1) {    int temp=y1;    y1=y2;    y2=temp;  }  int distance=y2 - y1;  int step=ZIGZAG * 2 + (dX2 > 0 ? ZIGZAG : 0);  int count=(distance / step) - 2;  int remainings=distance - (count * step);  int y=y1 + remainings / 2;  g.drawLine(x,y1,x,y);  for (int i=0; i < count; i++) {    g.drawLine(x,y,x + dX1,y + ZIGZAG);    g.drawLine(x + dX1,y + ZIGZAG,x - dX2,y + 2 * ZIGZAG);    if (dX2 != 0) {      g.drawLine(x - dX2,y + 2 * ZIGZAG,x,y + 3 * ZIGZAG);    }    y+=step;  }  g.drawLine(x,y,x,y2);}  }
class C{  public final boolean isDiskSpaceCheckDone(final int minimumFreeSpace) throws SystemDiskSpaceException {  final FallbackProperties fProperties=FallbackProperties.getInstance();  boolean checkDone=false;  if (fFileController.getNumberOfLines() > nextCheckFallbackData) {    checkDone=true;    if (LOG.isDebugEnabled())     LOG.debug("isDiskSpaceCheckDone() : Doing the check since the number of lines are " + fFileController.getNumberOfLines() + " and the current value for nextcheck is "+ nextCheckFallbackData);    long freeSpace=SystemResourcesParameters.getFreeSpace();    if (freeSpace < minimumFreeSpace && freeSpace != FallbackProperties.CMD_FREE_SPACE_ERROR) {      throw new SystemDiskSpaceException("Reached the limit of free space of " + minimumFreeSpace + ", current free space is "+ freeSpace);    } else {      nextCheckFallbackData=fFileController.getNumberOfLines() + fProperties.getFreeSpaceCheckFrequency();      if (LOG.isDebugEnabled())       LOG.debug("isDiskSpaceCheckDone() : New value of nextCheckDataTags is " + nextCheckFallbackData);    }  }  return checkDone;}  }
class C{  public static int positiveModulo(int a,int b){  int mod=a % b;  return mod >= 0 ? mod : mod + b;}  }
class C{  public boolean contains(int level){  for (  Expand expand : warehouseExpands) {    if (expand.getLevel() == level) {      return true;    }  }  return false;}  }
class C{  public static int skipTabs(byte[] text,int offset,int n){  while (n > 0) {    if (text[offset] == '\t')     n--;    offset++;  }  return offset - 1;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysResist_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200942,skilltarget,skillcaster,skillname);}  }
class C{  public soot.Local generateLocal(soot.Type type){  initLocalNames();  String name="v";  if (type instanceof soot.IntType) {    while (true) {      name=nextIntName();      if (!bodyContainsLocal(name))       break;    }  } else   if (type instanceof soot.ByteType) {    while (true) {      name=nextByteName();      if (!bodyContainsLocal(name))       break;    }  } else   if (type instanceof soot.ShortType) {    while (true) {      name=nextShortName();      if (!bodyContainsLocal(name))       break;    }  } else   if (type instanceof soot.BooleanType) {    while (true) {      name=nextBooleanName();      if (!bodyContainsLocal(name))       break;    }  } else   if (type instanceof soot.VoidType) {    while (true) {      name=nextVoidName();      if (!bodyContainsLocal(name))       break;    }  } else   if (type instanceof soot.CharType) {    while (true) {      name=nextCharName();      if (!bodyContainsLocal(name))       break;    }    type=soot.CharType.v();  } else   if (type instanceof soot.DoubleType) {    while (true) {      name=nextDoubleName();      if (!bodyContainsLocal(name))       break;    }  } else   if (type instanceof soot.FloatType) {    while (true) {      name=nextFloatName();      if (!bodyContainsLocal(name))       break;    }  } else   if (type instanceof soot.LongType) {    while (true) {      name=nextLongName();      if (!bodyContainsLocal(name))       break;    }  } else   if (type instanceof soot.RefLikeType) {    while (true) {      name=nextRefLikeTypeName();      if (!bodyContainsLocal(name))       break;    }  } else   if (type instanceof soot.UnknownType) {    while (true) {      name=nextUnknownTypeName();      if (!bodyContainsLocal(name))       break;    }  } else {    localNames=null;    throw new RuntimeException("Unhandled Type of Local variable to Generate - Not Implemented");  }  localNames=null;  return createLocal(name,type);}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  private static Object newInstanceNoServiceLoader(Class<?> providerClass){  if (System.getSecurityManager() == null) {    return null;  }  try {    Method creationMethod=providerClass.getDeclaredMethod("newTransformerFactoryNoServiceLoader");    return creationMethod.invoke(null,(Object[])null);  } catch (  NoSuchMethodException exc) {    return null;  }catch (  Exception exc) {    return null;  }}  }
class C{  private RemoteOperationResult refreshSharesForFolder(OwnCloudClient client){  RemoteOperationResult result=null;  GetRemoteSharesForFileOperation operation=new GetRemoteSharesForFileOperation(mLocalFolder.getRemotePath(),true,true);  result=operation.execute(client);  if (result.isSuccess()) {    ArrayList<OCShare> shares=new ArrayList<OCShare>();    for (    Object obj : result.getData()) {      shares.add((OCShare)obj);    }    mStorageManager.saveSharesInFolder(shares,mLocalFolder);  }  return result;}  }
class C{  public void add(final Vector2D[] bLoop) throws MathIllegalArgumentException {  add(new NestedLoops(bLoop,tolerance));}  }
class C{  protected String skipEmptyLines(){  while (true) {    if (hasNextLine()) {      String next=nextLine().trim();      if (next.length() > 0)       return next;    } else     return null;  }}  }
class C{  @Override public final double readDouble() throws IOException {  return Double.longBitsToDouble(readLong());}  }
class C{  public boolean isValidLegionMemberEx(){  if (getObjectId() < 1) {    log.error("[LegionMemberEx] Player Object ID is empty.");  } else   if (getName() == null) {    log.error("[LegionMemberEx] Player Name is empty." + getObjectId());  } else   if (getPlayerClass() == null) {    log.error("[LegionMemberEx] Player Class is empty." + getObjectId());  } else   if (getLevel() < 1) {    log.error("[LegionMemberEx] Player Level is empty." + getObjectId());  } else   if (getLastOnline() == 0) {    log.error("[LegionMemberEx] Last Online is empty." + getObjectId());  } else   if (getWorldId() < 1) {    log.error("[LegionMemberEx] World Id is empty." + getObjectId());  } else   if (getLegion() == null) {    log.error("[LegionMemberEx] Legion is empty." + getObjectId());  } else   if (getRank() == null) {    log.error("[LegionMemberEx] Rank is empty." + getObjectId());  } else   if (getNickname() == null) {    log.error("[LegionMemberEx] Nickname is empty." + getObjectId());  } else   if (getSelfIntro() == null) {    log.error("[LegionMemberEx] Self Intro is empty." + getObjectId());  } else {    return true;  }  return false;}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  private static Map<String,Class<?>> loadPrimitiveTypes(){  Map<String,Class<?>> types=new HashMap<String,Class<?>>();  types.put(byte.class.getName(),byte.class);  types.put(short.class.getName(),short.class);  types.put(int.class.getName(),int.class);  types.put(long.class.getName(),long.class);  types.put(float.class.getName(),float.class);  types.put(double.class.getName(),double.class);  types.put(boolean.class.getName(),boolean.class);  types.put(char.class.getName(),char.class);  return types;}  }
class C{  public Builder conditionalReduction(String column,String outputName,ReduceOp reduction,Condition condition){  this.conditionalReductions.put(column,new ConditionalReduction(column,outputName,reduction,condition));  return this;}  }
class C{  public static String[] toStringArray(Object value){  if (value instanceof String[]) {    return (String[])value;  } else {    Object[] valueArray=(Object[])value;    return Arrays.stream(valueArray).map(null).toArray(null);  }}  }
class C{  public double readDouble() throws JMSException {  initializeReading();  try {    this.dataIn.mark(Integer.MAX_VALUE);    return this.dataIn.readDouble();  } catch (  EOFException eof) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageEOFException(eof.toString());    jmsEx.setLinkedException(eof);    throw jmsEx;  }catch (  IOException ioe) {    try {      this.dataIn.reset();    } catch (    IOException e) {      JMSException jmsEx=new JMSException(e.toString());      jmsEx.setLinkedException(e);      throw jmsEx;    }    JMSException jmsEx=new MessageFormatException("Format error occurred" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  private static void decodeEdifactSegment(BitSource bits,StringBuilder result){  do {    if (bits.available() <= 16) {      return;    }    for (int i=0; i < 4; i++) {      int edifactValue=bits.readBits(6);      if (edifactValue == 0x1F) {        int bitsLeft=8 - bits.getBitOffset();        if (bitsLeft != 8) {          bits.readBits(bitsLeft);        }        return;      }      if ((edifactValue & 0x20) == 0) {        edifactValue|=0x40;      }      result.append((char)edifactValue);    }  } while (bits.available() > 0);}  }
class C{  public void clear(){  consumed=0;  next=0;  computeBlockSize();}  }
class C{  private <T>int findTreeNodeDepth(Map<T,T> tree,T node){  int result=0;  T parent=tree.get(node);  while (parent != null) {    result++;    node=parent;    parent=tree.get(node);  }  return result;}  }
class C{  public static Map<String,Object> findOrders(DispatchContext dctx,Map<String,? extends Object> context){  return findOrders(dctx,context,false);}  }
class C{  public Field(Field.XPath xpath,IdentityConstraint identityConstraint){  fXPath=xpath;  fIdentityConstraint=identityConstraint;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_INTERVAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200978,skilltarget,num0,skillcaster,skillname);}  }
class C{  public String pushToRestApi() throws IOException {  RESTApiHandler restApi=new RESTApiHandler();  this.batchUrl=restApi.getRemoteURL(this);  return this.batchUrl;}  }
class C{  public void testWriteReadEmpty() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(empty);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  ReplicationPolicyDescription copy=(ReplicationPolicyDescription)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(empty,copy));}  }
class C{  public FieldVector3D<T> subtract(final Vector3D v){  return new FieldVector3D<T>(x.subtract(v.getX()),y.subtract(v.getY()),z.subtract(v.getZ()));}  }
class C{  public HLDATextGenerator(HierLDAGibbs hlgModel,IGrammaticallityEvaluator igeEval,Map<Integer,String> mWordMap){  Model=hlgModel;  Evaluator=igeEval;  WordMap=mWordMap;}  }
class C{  public static float convertPixelsToDp(float px,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float dp=px / ((float)metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);  return dp;}  }
class C{  private static void visitSelectedLeavesRec(MainViewer viewer,Node v,NodeSet selected,Vector<String> path,LinkedList<Map> rowList,LinkedList<int[]> dataList,boolean officialRanksOnly,ProgressListener progressListener) throws CanceledException {  if (v.getOutDegree() > 0 || selected.contains(v)) {    final Integer taxId=(Integer)v.getInfo();    String taxName=v == viewer.getTree().getRoot() ? "Root" : TaxonomyData.getName2IdMap().get(taxId);{      int a=taxName.indexOf("<");      int b=taxName.lastIndexOf(">");      if (0 < a && a < b && b == taxName.length() - 1)       taxName=taxName.substring(0,a).trim();    }    final int rank=TaxonomyData.getTaxonomicRank(taxId);    boolean addedPathElement=false;    if (!officialRanksOnly || TaxonomicLevels.isMajorRank(rank)) {      if (officialRanksOnly) {        char letter=Character.toLowerCase(TaxonomicLevels.getName(rank).charAt(0));        path.addElement(String.format("%c__%s",letter,taxName));      } else       path.addElement(taxName);      addedPathElement=true;      if (selected.contains(v)) {        NodeData nodeData=viewer.getNodeData(v);        if (nodeData != null) {          int[] values;          if (v.getOutDegree() == 0)           values=nodeData.getSummarized(); else           values=nodeData.getAssigned();          final Map<String,Object> rowItem=new StringMap<>();          rowItem.put("id","" + taxId);          final Map<String,Object> metadata=new StringMap<>();          final ArrayList<String> classification=new ArrayList<>(path.size());          classification.addAll(path);          metadata.put("taxonomy",classification);          rowItem.put("metadata",metadata);          rowList.add(rowItem);          dataList.add(values);        }      }    }    progressListener.incrementProgress();    for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {      visitSelectedLeavesRec(viewer,e.getTarget(),selected,path,rowList,dataList,officialRanksOnly,progressListener);    }    if (addedPathElement)     path.setSize(path.size() - 1);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_protect_PROTECT_A_to_B(int num0,String skilltarget,String skillcaster){  return new SM_SYSTEM_MESSAGE(1201177,num0,skilltarget,skillcaster);}  }
class C{  public boolean hasWhereClause(){  if (_expression == null)   return false;  String trimmed=_expression.trim();  return !(trimmed.length() == 0 || ORDER.matcher(trimmed).matches() || GROUP.matcher(trimmed).matches());}  }
class C{  private int measureWidth(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    int count=3;    if (viewFlow != null) {      count=viewFlow.getAdapter().getCount();    }    float temp=circleSeparation - 2 * radius;    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * radius)+ (count - 1) * temp + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static void d(String msg){  if (LOG_ENABLE) {    Log.d(TAG,buildMsg(msg));  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SUBMIT_GM_PETITION_OK_TO_USER(String value0){  return new SM_SYSTEM_MESSAGE(1300542,value0);}  }
class C{  public void push(PageObjectContext element){  deque.push(element);}  }
class C{  public byte[] deflateString2ByteArray(String inputString){  int length=deflateString2ByteArray(inputString,buffer);  byte[] result=new byte[Math.abs(length)];  System.arraycopy(buffer,0,result,0,Math.abs(length));  return result;}  }
class C{  public RunnableTaskAdapter(){}  }
class C{  private Map<RoleType,Pair<String,Type>> computeRoleVarTypeMap(){  Map<RoleType,Pair<String,Type>> roleVarTypeMap=new HashMap<>();  if (getParentQuery() == null)   return roleVarTypeMap;  MindmapsGraph graph=getParentQuery().getGraph().orElse(null);  Map<String,Type> varTypeMap=getParentQuery().getVarTypeMap();  Set<String> allocatedVars=new HashSet<>();  Set<RoleType> allocatedRoles=new HashSet<>();  castings.forEach(null);  RelationType relType=(RelationType)getType();  Set<String> varsToAllocate=getVarNames();  varsToAllocate.removeAll(allocatedVars);  for (  String var : varsToAllocate) {    Type type=varTypeMap.get(var);    if (type != null && relType != null) {      Set<RoleType> cRoles=getCompatibleRoleTypes(type,relType);      if (cRoles.size() == 1) {        RoleType role=cRoles.iterator().next();        roleVarTypeMap.put(role,new Pair<>(var,type));        allocatedVars.add(var);        allocatedRoles.add(role);      }    }  }  Collection<RoleType> rolesToAllocate=relType.hasRoles();  rolesToAllocate.removeAll(allocatedRoles);  varsToAllocate.removeAll(allocatedVars);  if (rolesToAllocate.size() == 1 && varsToAllocate.size() == 1) {    RoleType role=rolesToAllocate.iterator().next();    String var=varsToAllocate.iterator().next();    Type type=varTypeMap.get(var);    roleVarTypeMap.put(role,new Pair<>(var,type));  }  return roleVarTypeMap;}  }
class C{  boolean maySendBasePageUrl(){  return !isUserUndecided();}  }
class C{  public XIncludeAwareParserConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){  this(symbolTable,grammarPool,null);}  }
class C{  private void notifyUIRefreshComplete(boolean ignoreHook){  if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {    if (DEBUG) {      PtrCLog.d(LOG_TAG,"notifyUIRefreshComplete mRefreshCompleteHook run.");    }    mRefreshCompleteHook.takeOver();    return;  }  if (mPtrUIHandlerHolder.hasHandler()) {    if (DEBUG) {      PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIRefreshComplete");    }    mPtrUIHandlerHolder.onUIRefreshComplete(this);  }  mPtrIndicator.onUIRefreshComplete();  tryScrollBackToTopAfterComplete();  tryToNotifyReset();}  }
class C{  protected MapleQuestRequirement(MapleQuest quest,ReadBin data) throws IOException {  this.quest=quest;  this.dayByDay=data.readByte() > 0;  this.normalAutoStart=data.readByte() > 0;  this.lvmin=data.readShort();  this.lvmax=data.readShort();  this.mbmin=data.readShort();  this.charismaMin=data.readShort();  this.charmMin=data.readShort();  this.craftMin=data.readShort();  this.insightMin=data.readShort();  this.senseMin=data.readShort();  this.willMin=data.readShort();  this.pop=data.readShort();  this.pettamenessmin=data.readShort();  this.subJobFlag=data.readShort();  this.npc=data.readInt();  this.interval=data.readInt();  this.end=data.readString();  this.startscript=data.readString();  this.endscript=data.readString();  short size=data.readShort();  for (int i=0; i < size; i++) {    int field=data.readInt();    fieldEnter.add(field);  }  size=data.readShort();  for (int i=0; i < size; i++) {    short job=data.readShort();    jobs.add(job);  }  size=data.readShort();  for (int i=0; i < size; i++) {    int id=data.readInt();    boolean acquire=data.readByte() > 0;    skills.put(id,acquire);  }  size=data.readShort();  for (int i=0; i < size; i++) {    int id=data.readInt();    byte state=data.readByte();    byte order=data.readByte();    quests.put(id,state);  }  size=data.readShort();  for (int i=0; i < size; i++) {    int id=data.readInt();    int count=data.readInt();    byte order=data.readByte();    items.put(id,count);  }  size=data.readShort();  for (int i=0; i < size; i++) {    int id=data.readInt();    int count=data.readInt();    mobs.put(id,count);  }  size=data.readShort();  for (int i=0; i < size; i++) {    int id=data.readInt();    pets.add(id);  }}  }
class C{  public NotesCreateCommentQuery(VkApiClient client,UserActor actor,int noteId,String message){  super(client,"notes.createComment",Integer.class);  accessToken(actor.getAccessToken());  noteId(noteId);  message(message);}  }
class C{  @Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {  if (abandonHope) {    return;  }  if (saxParser == null) {    String saxParserClass=getCatalogParser(namespaceURI,localName);    if (saxParserClass == null) {      abandonHope=true;      if (namespaceURI == null) {        debug.message(2,"No Catalog parser for " + localName);      } else {        debug.message(2,"No Catalog parser for " + "{" + namespaceURI + "}"+ localName);      }      return;    }    try {      saxParser=(SAXCatalogParser)Class.forName(saxParserClass,true,loader != null ? loader : this.getClass().getClassLoader()).newInstance();      saxParser.setCatalog(catalog);      saxParser.startDocument();      saxParser.startElement(namespaceURI,localName,qName,atts);    } catch (    ClassNotFoundException cnfe) {      saxParser=null;      abandonHope=true;      debug.message(2,cnfe.toString());    }catch (    InstantiationException ie) {      saxParser=null;      abandonHope=true;      debug.message(2,ie.toString());    }catch (    IllegalAccessException iae) {      saxParser=null;      abandonHope=true;      debug.message(2,iae.toString());    }catch (    ClassCastException cce) {      saxParser=null;      abandonHope=true;      debug.message(2,cce.toString());    }  } else {    saxParser.startElement(namespaceURI,localName,qName,atts);  }}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  String oldValueObj=(String)undoRedoObject.getOldValue();  envVarComboBox.setSelectedItem(oldValueObj);}  }
class C{  public AppsSendRequestQuery text(String value){  return unsafeParam("text",value);}  }
class C{  public XML11Serializer(OutputStream output,OutputFormat format){  super(output,format != null ? format : new OutputFormat(Method.XML,null,false));  _format.setVersion("1.1");}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  private void expectedTwoBytes() throws MalformedByteSequenceException {  throw new MalformedByteSequenceException(fFormatter,fLocale,XMLMessageFormatter.XML_DOMAIN,"ExpectedByte",new Object[]{"2","2"});}  }
class C{  @WorkerThread public static void saveContentToFile(@NonNull final Context pContext,@NonNull final Uri pUri,@NonNull final File pFile) throws IOException {  FileOutputStream fos=null;  InputStream is=null;  try {    is=pContext.getContentResolver().openInputStream(pUri);    if (is != null) {      fos=new FileOutputStream(pFile);      final byte[] buffer=new byte[1024];      int len;      while ((len=is.read(buffer)) != -1) {        fos.write(buffer,0,len);      }    } else {      throw new IOException("ContentResolver returned null InputStream for the File");    }  }  finally {    if (is != null) {      try {        is.close();      } catch (      final IOException e) {      }    }    if (fos != null) {      try {        fos.close();      } catch (      final IOException e) {      }    }  }}  }
class C{  public ProjectScan(Scan s,Collection<String> fieldList){  this.s=s;  this.fieldList=fieldList;}  }
class C{  public void readExifData(){  this.aperture=inFile.getAttribute(ExifInterface.TAG_APERTURE);  this.datetime=inFile.getAttribute(ExifInterface.TAG_DATETIME);  this.exposureTime=inFile.getAttribute(ExifInterface.TAG_EXPOSURE_TIME);  this.flash=inFile.getAttribute(ExifInterface.TAG_FLASH);  this.focalLength=inFile.getAttribute(ExifInterface.TAG_FOCAL_LENGTH);  this.gpsAltitude=inFile.getAttribute(ExifInterface.TAG_GPS_ALTITUDE);  this.gpsAltitudeRef=inFile.getAttribute(ExifInterface.TAG_GPS_ALTITUDE_REF);  this.gpsDateStamp=inFile.getAttribute(ExifInterface.TAG_GPS_DATESTAMP);  this.gpsLatitude=inFile.getAttribute(ExifInterface.TAG_GPS_LATITUDE);  this.gpsLatitudeRef=inFile.getAttribute(ExifInterface.TAG_GPS_LATITUDE_REF);  this.gpsLongitude=inFile.getAttribute(ExifInterface.TAG_GPS_LONGITUDE);  this.gpsLongitudeRef=inFile.getAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF);  this.gpsProcessingMethod=inFile.getAttribute(ExifInterface.TAG_GPS_PROCESSING_METHOD);  this.gpsTimestamp=inFile.getAttribute(ExifInterface.TAG_GPS_TIMESTAMP);  this.iso=inFile.getAttribute(ExifInterface.TAG_ISO);  this.make=inFile.getAttribute(ExifInterface.TAG_MAKE);  this.model=inFile.getAttribute(ExifInterface.TAG_MODEL);  this.orientation=inFile.getAttribute(ExifInterface.TAG_ORIENTATION);  this.whiteBalance=inFile.getAttribute(ExifInterface.TAG_WHITE_BALANCE);}  }
class C{  public InvalidJobException(){  super();}  }
class C{  @Override public void addListener(DataSourceUpdatedInterface listener){  listenerList.add(listener);}  }
class C{  public static String clearGuestShoppingListCookies(HttpServletRequest request,HttpServletResponse response){  Properties systemProps=System.getProperties();  String guestShoppingUserName="GuestShoppingListId_" + systemProps.getProperty("user.name").replace(" ","_");  Cookie guestShoppingListCookie=new Cookie(guestShoppingUserName,null);  guestShoppingListCookie.setMaxAge(0);  guestShoppingListCookie.setPath("/");  response.addCookie(guestShoppingListCookie);  return "success";}  }
class C{  public boolean only_regular_locals(){  return soot.PhaseOptions.getBoolean(options,"only-regular-locals");}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public InterfaceDeclSubstituted fullCopy(){  InterfaceDeclSubstituted tree=(InterfaceDeclSubstituted)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {switch (i) {case 4:        tree.children[i]=new List();      continue;  }  ASTNode child=(ASTNode)children[i];  if (child != null) {    child=child.fullCopy();    tree.setChild(child,i);  }}}return tree;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_ITEM_DICE(String value0,int num1){  return new SM_SYSTEM_MESSAGE(1301026,value0,num1);}  }
class C{  protected void reset() throws XNIException {  int count=fComponents.size();  for (int i=0; i < count; i++) {    XMLComponent c=(XMLComponent)fComponents.get(i);    c.reset(this);  }}  }
class C{  public static void w(String tag,String s,Throwable e){  if (LOG.WARN >= LOGLEVEL)   Log.w(tag,s,e);}  }
