class C{  private int startFrame(final int offset,final int nLocal,final int nStack){  int n=3 + nLocal + nStack;  if (frame == null || frame.length < n) {    frame=new int[n];  }  frame[0]=offset;  frame[1]=nLocal;  frame[2]=nStack;  return 3;}  }
class C{  public final void addRawTextElement(final float character_spacing,final int writingMode,final String font_as_string,final float current_space,final int fontSize,final float x1,final float y1,final float x2,final float y2,final StringBuffer processed_line,final int current_text_length,final String currentColorTag,final boolean isXMLExtraction){  if (processed_line.length() > 0) {    if (isXMLExtraction) {      processed_line.insert(0,font_as_string);      processed_line.append(Fonts.fe);    }    if (isColorExtracted) {      processed_line.insert(0,currentColorTag);      processed_line.append(GenericColorSpace.ce);    }    f_writingMode[pointer]=writingMode;    text_length[pointer]=current_text_length;    f_character_spacing[pointer]=character_spacing;    f_x1[pointer]=x1;    colorTag[pointer]=currentColorTag;    f_x2[pointer]=x2;    f_y1[pointer]=y1;    f_y2[pointer]=y2;    contents[pointer]=processed_line.toString();    f_end_font_size[pointer]=fontSize;    space_width[pointer]=current_space * 1000;    pointer++;    if (pointer == max) {      resizeArrays();    }  }}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public boolean isComplete(Variable[] vars){  for (  Variable var : vars) {    if (!hasAssignmentFor(var))     return false;  }  return true;}  }
class C{  public boolean hasSVUID(){  return hasSVUID;}  }
class C{  @Override public boolean isObject(){  return true;}  }
class C{  public static void insertView(final INaviView source,final INaviView target){  Preconditions.checkNotNull(source,"IE00007: Source argument can not be null");  Preconditions.checkNotNull(target,"IE00020: Target argument can not be null");  Preconditions.checkArgument(source.isLoaded(),"IE00974: Source view must be loaded");  Preconditions.checkArgument(target.isLoaded(),"IE00978: Target view must be loaded");  final IDirectedGraph<INaviViewNode,INaviEdge> graph=source.getGraph();  final Map<INaviViewNode,INaviViewNode> map=createNodes(target,graph.getNodes());  createEdges(target,graph.getEdges(),map);  createGroupNodes(target,graph.getNodes(),map);}  }
class C{  public static boolean isQuoted(@Nullable String text){  return text != null && getQuotes(text) != null;}  }
class C{  public void drawArrays(DrawContext dc,int drawMode){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.buffer.drawArrays(dc,drawMode);}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (params.length == 1) {    if (conversation.getType() != Conversation.TYPE_CHANNEL) {      throw new CommandException(service.getString(R.string.only_usable_from_channel));    }    service.getConnection(server.getId()).partChannel(conversation.getName());  } else   if (params.length == 2) {    service.getConnection(server.getId()).partChannel(params[1]);  } else {    throw new CommandException(service.getString(R.string.invalid_number_of_params));  }}  }
class C{  private boolean hasChar(){  return pos < len;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="UUF_UNUSED_FIELD",justification="param c is required in the listedtableframe") protected void addToBottomBox(Component comp,String c){  bottomBox.add(Box.createHorizontalStrut(bottomStrutWidth),bottomBoxIndex);  ++bottomBoxIndex;  bottomBox.add(comp,bottomBoxIndex);  ++bottomBoxIndex;}  }
class C{  private Properties loadPropertiesFromExternalFile(String filePath,Properties fallback){  Properties properties=new Properties(fallback);  try {    FileInputStream propertyFileStream=new FileInputStream(filePath);    properties.load(propertyFileStream);    return properties;  } catch (  NullPointerException e) {    return fallback;  }catch (  FileNotFoundException e) {    return fallback;  }catch (  IOException e) {    return fallback;  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(6);  newVector.addElement(new Option("\tFull class name of search method, followed\n" + "\tby its options.\n" + "\teg: \"weka.attributeSelection.BestFirst -D 1\"\n"+ "\t(default weka.attributeSelection.BestFirst)","S",1,"-S <search method specification>"));  newVector.addElement(new Option("\tUse cross validation to evaluate features.\n" + "\tUse number of folds = 1 for leave one out CV.\n" + "\t(Default = leave one out CV)","X",1,"-X <number of folds>"));  newVector.addElement(new Option("\tPerformance evaluation measure to use for selecting attributes.\n" + "\t(Default = accuracy for discrete class and rmse for numeric class)","E",1,"-E <acc | rmse | mae | auc>"));  newVector.addElement(new Option("\tUse nearest neighbour instead of global table majority.","I",0,"-I"));  newVector.addElement(new Option("\tDisplay decision table rules.\n","R",0,"-R"));  newVector.addAll(Collections.list(super.listOptions()));  newVector.addElement(new Option("","",0,"\nOptions specific to search method " + m_search.getClass().getName() + ":"));  newVector.addAll(Collections.list(((OptionHandler)m_search).listOptions()));  return newVector.elements();}  }
class C{  public static Object deserialize(byte[] input) throws IOException, ClassNotFoundException {  Object st=null;  ByteArrayInputStream bin=new ByteArrayInputStream(input);  ObjectInputStream oin=new ObjectInputStream(bin);  try {    st=oin.readObject();  }  finally {    oin.close();  }  return st;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element docElem;  Element element;  NodeList childList;  Node appendedChild;  doc=(Document)load("staffNS",true);  docElem=doc.getDocumentElement();  element=doc.createElementNS("test","employeeId");  appendedChild=docElem.appendChild(element);  childList=doc.getElementsByTagNameNS("*","employeeId");  assertSize("documentgetelementsbytagnameNS02",6,childList);}  }
class C{  public void writeVarLong(long x){  while ((x & ~0x7f) != 0) {    data[pos++]=(byte)((x & 0x7f) | 0x80);    x>>>=7;  }  data[pos++]=(byte)x;}  }
class C{  private int handleZ(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (charAt(value,index + 1) == 'H') {    result.append('J');    index+=2;  } else {    if (contains(value,index + 1,2,"ZO","ZI","ZA") || (slavoGermanic && (index > 0 && charAt(value,index - 1) != 'T'))) {      result.append("S","TS");    } else {      result.append('S');    }    index=charAt(value,index + 1) == 'Z' ? index + 2 : index + 1;  }  return index;}  }
class C{  public E[] array(int index){  return buffers[index];}  }
class C{  public TermSuggestionBuilder maxTermFreq(float maxTermFreq){  this.maxTermFreq=maxTermFreq;  return this;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  if (null != m_parts) {    int n=m_parts.size();    for (int i=0; i < n; i++) {      AVTPart part=(AVTPart)m_parts.elementAt(i);      part.fixupVariables(vars,globalsSize);    }  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tSkips the determination of sizes (train/test/clusterer)\n" + "\t(default: sizes are determined)","no-size",0,"-no-size"));  newVector.addElement(new Option("\tThe full class name of the density based clusterer.\n" + "\teg: weka.clusterers.EM","W",1,"-W <class name>"));  if ((m_clusterer != null) && (m_clusterer instanceof OptionHandler)) {    newVector.addElement(new Option("","",0,"\nOptions specific to clusterer " + m_clusterer.getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)m_clusterer).listOptions()));  }  return newVector.elements();}  }
class C{  protected double calculateLogLikelihood(){  NodeRef root=treeModel.getRoot();  if (rootPartials == null) {    rootPartials=new double[patternCount * stateCount];  }  if (patternLogLikelihoods == null) {    patternLogLikelihoods=new double[patternCount];  }  if (!commonAncestorsKnown) {    for (int i=0, n=cladeSiteModels.size(); i < n; i++) {      (cladeSiteModels.get(i)).findMRCA();    }    commonAncestorsKnown=true;  }  traverse(treeModel,root,siteModel);  for (int i=0; i < nodeCount; i++) {    updateNode[i]=false;  }  double logL=0.0;  for (int i=0; i < patternCount; i++) {    logL+=patternLogLikelihoods[i] * patternWeights[i];  }  return logL;}  }
class C{  private static void usage(String s){  err.println("\n** " + s + "\n");  err.println(LocalizedStrings.SortLogFile_USAGE.toLocalizedString() + ": java SortLogFile logFile");  err.println("-sortedFile file " + LocalizedStrings.SortLogFile_FILE_IN_WHICH_TO_PUT_SORTED_LOG.toLocalizedString());  err.println("");  err.println(LocalizedStrings.SortLogFile_SORTS_A_GEMFIRE_LOG_FILE_BY_TIMESTAMP_THE_MERGED_LOG_FILE_IS_WRITTEN_TO_SYSTEM_OUT_OR_A_FILE.toLocalizedString());  err.println("");  System.exit(1);}  }
class C{  public static void addPath(GoogleMap googleMap,ArrayList<Polyline> paths,ArrayList<LatLng> points,int color,boolean append){  if (points.size() == 0) {    return;  }  if (append && paths.size() != 0) {    Polyline lastPolyline=paths.get(paths.size() - 1);    ArrayList<LatLng> pathPoints=new ArrayList<LatLng>();    pathPoints.addAll(lastPolyline.getPoints());    pathPoints.addAll(points);    lastPolyline.setPoints(pathPoints);  } else {    PolylineOptions polylineOptions=new PolylineOptions().addAll(points).width(5).color(color);    Polyline polyline=googleMap.addPolyline(polylineOptions);    paths.add(polyline);  }  points.clear();}  }
class C{  public static CompositeType forAlphaComposite(AlphaComposite ac){switch (ac.getRule()) {case AlphaComposite.CLEAR:    return Clear;case AlphaComposite.SRC:  if (ac.getAlpha() >= 1.0f) {    return SrcNoEa;  } else {    return Src;  }case AlphaComposite.DST:return Dst;case AlphaComposite.SRC_OVER:if (ac.getAlpha() >= 1.0f) {return SrcOverNoEa;} else {return SrcOver;}case AlphaComposite.DST_OVER:return DstOver;case AlphaComposite.SRC_IN:return SrcIn;case AlphaComposite.DST_IN:return DstIn;case AlphaComposite.SRC_OUT:return SrcOut;case AlphaComposite.DST_OUT:return DstOut;case AlphaComposite.SRC_ATOP:return SrcAtop;case AlphaComposite.DST_ATOP:return DstAtop;case AlphaComposite.XOR:return AlphaXor;default :throw new InternalError("Unrecognized alpha rule");}}  }
class C{  public Builder cacheInMemory(boolean cacheInMemory){  this.cacheInMemory=cacheInMemory;  return this;}  }
class C{  public void operateOnLocalCache(GemFireCacheImpl cache){  int oldLevel=LocalRegion.setThreadInitLevelRequirement(LocalRegion.BEFORE_INITIAL_IMAGE);  try {    for (    LocalRegion r : this.getAllRegions(cache)) {      FilterProfile fp=r.getFilterProfile();      if (fp != null) {        fp.getLocalProfile().hasCacheServer=true;      }    }    for (    PartitionedRegion r : this.getPartitionedRegions(cache)) {      FilterProfile fp=r.getFilterProfile();      if (fp != null) {        fp.getLocalProfile().hasCacheServer=true;      }    }  }  finally {    LocalRegion.setThreadInitLevelRequirement(oldLevel);  }}  }
class C{  public CharStreamConsumer(Reader stream){  in=new BufferedReader(stream);  thread.start();}  }
class C{  void checkStartCode(){  if (!startCode) {    throw new IllegalStateException("Cannot visit instructions before visitCode has been called.");  }}  }
class C{  private PaletteEntry createEntityEntry(String itemName,Class<?> clazz,String icon){  ImageDescriptor image=null;  if (icon != null) {    image=DBPlugin.getImageDescriptor(icon);  }  CreationToolEntry entry=new CreationToolEntry(itemName,itemName,new SimpleFactory(clazz),image,image);  return entry;}  }
class C{  public static void nioCopy(File source,File target,FilenameFilter filter) throws IOException {  copy(source,target,filter,true,true);}  }
class C{  public void unmarshal(GridCacheSharedContext<?,?> ctx,boolean near,ClassLoader clsLdr) throws IgniteCheckedException {  if (this.ctx == null) {    GridCacheContext<?,?> cacheCtx=ctx.cacheContext(cacheId);    assert cacheCtx != null : "Failed to find cache context [cacheId=" + cacheId + ", readyTopVer="+ ctx.exchange().readyAffinityVersion()+ ']';    if (cacheCtx.isNear() && !near)     cacheCtx=cacheCtx.near().dht().context(); else     if (!cacheCtx.isNear() && near)     cacheCtx=cacheCtx.dht().near().context();    this.ctx=cacheCtx;  }  if (transformClosBytes != null && entryProcessorsCol == null)   entryProcessorsCol=ctx.marshaller().unmarshal(transformClosBytes,U.resolveClassLoader(clsLdr,ctx.gridConfig()));  if (filters == null)   filters=CU.empty0(); else {    for (    CacheEntryPredicate p : filters) {      if (p != null)       p.finishUnmarshal(ctx.cacheContext(cacheId),clsLdr);    }  }  key.finishUnmarshal(context().cacheObjectContext(),clsLdr);  key.partition(partId);  val.unmarshal(this.ctx,clsLdr);  if (expiryPlcBytes != null && expiryPlc == null)   expiryPlc=ctx.marshaller().unmarshal(expiryPlcBytes,U.resolveClassLoader(clsLdr,ctx.gridConfig()));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.177 -0500",hash_original_method="F86874BC4C4C4E18BB69ECCAB73A2619",hash_generated_method="15902C2D6696C200DB0695A80696F696") public synchronized Enumeration errors(){  return fErrors.elements();}  }
class C{  public void testDraw50() throws ChessParseError {  Game game=new Game(null,new TimeControlData());  assertEquals(false,game.haveDrawOffer());  boolean res=game.processString("draw 50");  assertEquals(true,res);  assertEquals(Game.GameState.ALIVE,game.getGameState());  res=game.processString("e4");  assertEquals(true,game.haveDrawOffer());  String fen="8/4k3/8/P7/8/8/8/1N2K2R w K - 99 83";  game.setPos(TextIO.readFEN(fen));  res=game.processString("draw 50");  assertEquals(Game.GameState.ALIVE,game.getGameState());  game.setPos(TextIO.readFEN(fen));  game.processString("draw 50 Nc3");  assertEquals(Game.GameState.DRAW_50,game.getGameState());  assertEquals("Nc3",game.getDrawInfo(false));  game.setPos(TextIO.readFEN(fen));  game.processString("draw 50 a6");  assertEquals(Game.GameState.ALIVE,game.getGameState());  assertEquals(Piece.WPAWN,game.currPos().getPiece(Position.getSquare(0,5)));  game.setPos(TextIO.readFEN(fen));  game.processString("draw 50 O-O");  assertEquals(Game.GameState.DRAW_50,game.getGameState());  game.setPos(TextIO.readFEN(fen));  game.processString("draw 50 Kf2");  assertEquals(Game.GameState.DRAW_50,game.getGameState());  game.setPos(TextIO.readFEN(fen));  game.processString("draw 50 Ke3");  assertEquals(Game.GameState.ALIVE,game.getGameState());  assertEquals(true,game.currPos().whiteMove);  game.processString("a6");  assertEquals(true,game.haveDrawOffer());  game.processString("draw 50");  assertEquals(Game.GameState.ALIVE,game.getGameState());  res=game.processString("draw accept");  assertEquals(true,res);  assertEquals(Game.GameState.DRAW_AGREE,game.getGameState());  fen="3k4/R7/3K4/8/8/8/8/8 w - - 99 78";  game.setPos(TextIO.readFEN(fen));  game.processString("Ra8");  assertEquals(Game.GameState.WHITE_MATE,game.getGameState());  game.processString("draw 50");  assertEquals(Game.GameState.WHITE_MATE,game.getGameState());}  }
class C{  public void reloadAllNotes(AuthenticationInfo subject) throws IOException {synchronized (notes) {    notes.clear();  }  if (notebookRepo instanceof NotebookRepoSync) {    NotebookRepoSync mainRepo=(NotebookRepoSync)notebookRepo;    if (mainRepo.getRepoCount() > 1) {      mainRepo.sync(subject);    }  }  List<NoteInfo> noteInfos=notebookRepo.list(subject);  for (  NoteInfo info : noteInfos) {    loadNoteFromRepo(info.getId(),subject);  }}  }
class C{  private void cutIndent(Document document,int line,int toDelete,int tabLength) throws BadLocationException {  IRegion region=document.getLineInformation(line);  int from=region.getOffset();  int endOffset=region.getOffset() + region.getLength();  while (from < endOffset - 2 && document.get(from,2).equals(LINE_COMMENT))   from+=2;  int to=from;  while (toDelete > 0 && to < endOffset) {    char ch=document.getChar(to);    if (!Character.isWhitespace(ch))     break;    toDelete-=computeVisualLength(ch,tabLength);    if (toDelete >= 0)     to++; else     break;  }  document.replace(from,to - from,"");}  }
class C{  private void processXtXvOperations(MatrixIndexes inIx,MatrixValue inVal,MatrixIndexes outIx,MatrixValue outVal) throws DMLRuntimeException {  DistributedCacheInput dcInput2=MRBaseForCommonInstructions.dcValues.get(_input2);  MatrixBlock Xi=(MatrixBlock)inVal;  MatrixBlock v=(MatrixBlock)dcInput2.getDataBlock(1,1).getValue();  Xi.chainMatrixMultOperations(v,null,(MatrixBlock)outVal,ChainType.XtXv);  outIx.setIndexes(1,1);}  }
class C{  public void restartParsing(){  timer.restart();  running=true;}  }
class C{  public void clearWrite(){  if (_source != null) {    _source.clearWrite();  }}  }
class C{  public static String randomCase(String input){  if (input != null) {    StringBuilder output=new StringBuilder();    for (int i=0; i < input.length(); ++i) {      char c=input.charAt(i);      if (Character.isAlphabetic(c) && ThreadLocalRandom.current().nextDouble() < 0.5) {        if (Character.isLowerCase(c))         output.append(Character.toUpperCase(c)); else         if (Character.isUpperCase(c))         output.append(Character.toLowerCase(c));      } else       output.append(c);    }    return output.toString();  } else   return null;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] parameters=getParameter();  for (  ProcessInfoParameter parameter : parameters) {    String name=parameter.getParameterName();    if (parameter.getParameter() == null)     ; else     if (name.equals("DateValue")) {      p_DateValue=(Timestamp)parameter.getParameter();      if (p_DateValue == null)       throw new FillMandatoryException("@DateValue@");    } else     if (name.equals(MWarehouse.COLUMNNAME_M_Warehouse_ID))     p_M_Warehouse_ID=parameter.getParameterAsInt(); else     if (name.equals(MCostDetail.COLUMNNAME_M_Product_ID))     p_M_Product_ID=parameter.getParameterAsInt(); else     if (name.equals(MProduct.COLUMNNAME_M_Product_Category_ID))     p_M_Product_Category_ID=parameter.getParameterAsInt(); else     if (name.equals(MCostDetail.COLUMNNAME_M_CostType_ID))     p_M_CostType_ID=parameter.getParameterAsInt(); else     if (name.equals(MCostDetail.COLUMNNAME_M_CostElement_ID))     p_M_CostElement_ID=parameter.getParameterAsInt();  }}  }
class C{  private static DelaunayTriangle nextFlipTriangle(DTSweepContext tcx,Orientation o,DelaunayTriangle t,DelaunayTriangle ot,TriangulationPoint p,TriangulationPoint op){  int edgeIndex;  if (o == Orientation.CCW) {    edgeIndex=ot.edgeIndex(p,op);    ot.dEdge[edgeIndex]=true;    legalize(tcx,ot);    ot.clearDelunayEdges();    return t;  }  edgeIndex=t.edgeIndex(p,op);  t.dEdge[edgeIndex]=true;  legalize(tcx,t);  t.clearDelunayEdges();  return ot;}  }
class C{  public static <K,V>Map<K,V> requireKeys(Map<K,V> map,K requiredKey){  requireNonNull(map);  requireNonNull(requiredKey);  if (!map.containsKey(requiredKey)) {    throw new NoSuchElementException("The Map does not contain the key " + requiredKey);  }  return map;}  }
class C{  @Override public void onBackPressed(){  if (!first_run) {    super.onBackPressed();  }}  }
class C{  public void storeRef(Object ref){  while (isEnqueued())   try {synchronized (this) {      wait(100);    }  } catch (  InterruptedException ex) {  }  try {    refField.set(this,ref);  } catch (  Exception t) {    throw new HGException(t);  }}  }
class C{  public final AlertDialog initiateScan(int cameraId){  return initiateScan(ALL_CODE_TYPES,cameraId);}  }
class C{  public void reload(){  if (!connection.isAuthenticated()) {    throw new IllegalStateException("Not logged in to server.");  }  if (connection.isAnonymous()) {    throw new IllegalStateException("Anonymous users can't have a roster.");  }  RosterPacket packet=new RosterPacket();  if (persistentStorage != null) {    packet.setVersion(persistentStorage.getRosterVersion());  }  requestPacketId=packet.getPacketID();  PacketFilter idFilter=new PacketIDFilter(requestPacketId);  connection.addPacketListener(new RosterResultListener(),idFilter);  connection.sendPacket(packet);}  }
class C{  @Override public boolean isConnected(){  return channel.isConnected();}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder("[Header: OFFSET=0x00, SIZE=0x");  sb.append(Long.toHexString(size));  sb.append(", version=");  sb.append(version);  sb.append(", dsCount=");  sb.append(dsCount);  sb.append(", rraCount=");  sb.append(rraCount);  sb.append(", pdpStep=");  sb.append(pdpStep);  sb.append("]");  return sb.toString();}  }
class C{  @Override public boolean isPoolable(){  debugCodeCall("isPoolable");  return false;}  }
class C{  public static <U>Stream<U> read(InputStream in,Parser<U> up) throws IOException {  return Utils.readElemens(in,up);}  }
class C{  public final void removeAllHelperTextColorIds(@NonNull final Collection<Integer> resourceIds){  ensureNotNull(resourceIds,"The collection may not be null");  for (  int resourceId : resourceIds) {    removeHelperTextColorId(resourceId);  }}  }
class C{  public static void expandCallingConventionsForInstrumentation(IR ir,Instruction from,Instruction to){  for (Instruction inst=from; inst != to; inst=inst.nextInstructionInCodeOrder()) {    if (inst.isCall()) {      callExpand(inst,ir);    } else     if (inst.isReturn()) {      returnExpand(inst,ir);    }  }}  }
class C{  public int numDocs(Query a,Query b) throws IOException {  Query absA=QueryUtils.getAbs(a);  Query absB=QueryUtils.getAbs(b);  DocSet positiveA=getPositiveDocSet(absA);  DocSet positiveB=getPositiveDocSet(absB);  if (a == absA) {    if (b == absB)     return positiveA.intersectionSize(positiveB);    return positiveA.andNotSize(positiveB);  }  if (b == absB)   return positiveB.andNotSize(positiveA);  DocSet all=getPositiveDocSet(matchAllDocsQuery);  return all.andNotSize(positiveA.union(positiveB));}  }
class C{  public static String convertSystemNameToAlternate(String systemName){  if (!validSystemNameFormat(systemName,systemName.charAt(1))) {    return "";  }  String altName="";  String s="";  int k=0;  boolean noB=true;  for (int i=2; (i < systemName.length()) && noB; i++) {    if (systemName.charAt(i) == 'B') {      s=systemName.substring(2,i);      k=i + 1;      noB=false;    }  }  if (noB) {    int num=Integer.valueOf(systemName.substring(2)).intValue();    int nAddress=num / 1000;    int bitNum=num - (nAddress * 1000);    altName=systemName.substring(0,2) + Integer.toString(nAddress) + "B"+ Integer.toString(bitNum);  } else {    int nAddress=Integer.valueOf(s).intValue();    int bitNum=Integer.parseInt(systemName.substring(k,systemName.length()));    if (bitNum > 999) {      return "";    }    altName=systemName.substring(0,2) + Integer.toString((nAddress * 1000) + bitNum);  }  return altName;}  }
class C{  public FlipRoutePolicy(String name1,String name2){  this.name1=name1;  this.name2=name2;}  }
class C{  public void addInEdgeSample(final Resource v){  VertexSample s=samples.get(v);  if (s == null) {    samples.put(v,s=new VertexSample(v,1,0));    indexOf.put(samples.size() - 1,s);  }}  }
class C{  public static byte[] decode(byte[] source) throws java.io.IOException {  byte[] decoded=null;  decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  return decoded;}  }
class C{  public static boolean computeBooleanFromString(String stringBoolean,boolean defaultValue){  if (stringBoolean == null)   return defaultValue; else   if (stringBoolean.equalsIgnoreCase("true"))   return true; else   if (stringBoolean.equalsIgnoreCase("false"))   return false; else   throw new IllegalArgumentException("Property value must be \"true\" or \"false\" instead of \"" + stringBoolean + "\"");}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypeRefsPackage.COMPOSED_TYPE_REF__CACHED_COMPOSED_MEMBERS:    return cachedComposedMembers != null && !cachedComposedMembers.isEmpty();case TypeRefsPackage.COMPOSED_TYPE_REF__ORIGINAL_COMPOSED_TYPE_REF:  return originalComposedTypeRef != null;case TypeRefsPackage.COMPOSED_TYPE_REF__TYPE_REFS:return typeRefs != null && !typeRefs.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void stop() throws IllegalStateTransitionException {  assertStateTransitionsAllowed();  if (state != AdapterState.STARTED && state != AdapterState.PAUSED) {    throw new IllegalStateTransitionException("Cannot stop from the " + state + " state");  }  state=AdapterState.OPENED;}  }
class C{  public static void assertNullability(ResultSet rs,boolean[] nullability) throws SQLException {  ResultSetMetaData rsmd=rs.getMetaData();  int actualCols=rsmd.getColumnCount();  assertEquals("Unexpected column count:",nullability.length,rsmd.getColumnCount());  for (int i=0; i < actualCols; i++) {    int expected=nullability[i] ? ResultSetMetaData.columnNullable : ResultSetMetaData.columnNoNulls;    assertEquals("Column nullability do not match for column " + (i + 1),expected,rsmd.isNullable(i + 1));  }}  }
class C{  public boolean validSystemNameConfig(String systemName){  int i=matchTentative(systemName);  if (i >= 0) {    return ((LightManager)getMgr(i)).validSystemNameConfig(systemName);  }  return false;}  }
class C{  public void addPolylineRecord3(EsriLayer layer){  OMGraphicList shapeData=new EsriPolylineList();  double[] part0=new double[]{-25.0f,-140.0f,-50.0f,-95.0f,65.0f,51.0f};  double[] part1=new double[]{-10.0f,-130.0f,-47.0f,-101.0f,71.0f,59.0f};  double[] part2=new double[]{-15.0f,-151.0f,-49.0f,-100.0f,76.0f,41.0f};  EsriPolyline poly0=new EsriPolyline(part0,OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB);  EsriPolyline poly1=new EsriPolyline(part1,OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB);  EsriPolyline poly2=new EsriPolyline(part2,OMGraphic.DECIMAL_DEGREES,OMGraphic.LINETYPE_RHUMB);  shapeData.add(poly0);  shapeData.add(poly1);  shapeData.add(poly2);  ArrayList tabularData=new ArrayList();  tabularData.add(0,"third value");  tabularData.add(1,new Double(20.1578));  layer.addRecord(shapeData,tabularData);}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public boolean contains(final Entity entity){  if (entity == null) {    return false;  }  final IRPZone entityZone=entity.getZone();  return zone.equals(entityZone) && zone.has(entity.getID()) && shape.contains(entity.getX(),entity.getY());}  }
class C{  public StoredField(String name,byte[] value,int offset,int length){  super(name,value,offset,length,TYPE);}  }
class C{  @Override public long length(byte[] key) throws IOException {  key=normalizeKey(key);synchronized (this) {    if (this.buffer != null) {      byte[] blob=this.buffer.get(key);      if (blob != null)       return blob.length;    }    return super.length(key);  }}  }
class C{  private void parseAttach(Attributes attributes){  if (md.attributeActions != null)   md.attributeActions.setAttach(true);  if (md.actions != null) {    md.modeUsage=getModeUsage(attributes);    md.actions.setResultAction(new AttachAction(md.modeUsage));  } else   md.modeUsage=null;}  }
class C{  public static void main(String[] args){  processArgs(args);  generateNewData();  if (!oldDatafile.equals("")) {    generateOldData();    generateOldDatafile();  }  showSummary();  generateTestProgram();}  }
class C{  public boolean isFloatable(){  return floatable;}  }
class C{  public static boolean isDeclarationBinding(IBinding binding){switch (binding.getKind()) {case IBinding.TYPE:    return ((ITypeBinding)binding).getTypeDeclaration() == binding;case IBinding.VARIABLE:  return ((IVariableBinding)binding).getVariableDeclaration() == binding;case IBinding.METHOD:return ((IMethodBinding)binding).getMethodDeclaration() == binding;}return true;}  }
class C{  public boolean hasBasicBlockSet(){  return basicBlock != null;}  }
class C{  public SVGSwitchElementBridge(){}  }
class C{  public int signum(){  if (hi > 0)   return 1;  if (hi < 0)   return -1;  if (lo > 0)   return 1;  if (lo < 0)   return -1;  return 0;}  }
class C{  protected void storeImplementationEventListenerNS(EventTarget t,String ns,String s,EventListener l,boolean b){synchronized (eventListenerSet) {    ImplementationEventListenerMememto m=new ImplementationEventListenerMememto(t,ns,s,l,b,this);    eventListenerSet.add(m);  }}  }
class C{  public static List<ObjectModel> loadDefault(){  List<ObjectModel> models=new ArrayList<>();  LOG.debug("Loading OMA standard object models");  InputStream input=ObjectLoader.class.getResourceAsStream("/oma-objects-spec.json");  if (input != null) {    try (Reader reader=new InputStreamReader(input)){      models.addAll(loadJsonStream(input));    } catch (    IOException e) {      LOG.error("Unable to load object models",e);    }  }  String modelsFolderEnvVar=System.getenv("MODELS_FOLDER");  if (modelsFolderEnvVar != null) {    models.addAll(loadObjectsFromDir(new File(modelsFolderEnvVar)));  }  return models;}  }
class C{  public static CreateInstanceResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  CreateInstanceResponseE object=new CreateInstanceResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","createInstanceResponse").equals(reader.getName())) {          object.setCreateInstanceResponse(org.oscm.xsd.CreateInstanceResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public JSONObject put(String key,int value) throws JSONException {  this.put(key,new Integer(value));  return this;}  }
class C{  public String loadAsString(String encoding){  try {    InputStream inputStream=new FileInputStream(location);    Reader reader=new InputStreamReader(inputStream,Charset.forName(encoding));    return FileCopyUtils.copyToString(reader);  } catch (  IOException e) {    throw new CassandraMigrationException("Unable to load filesystem resource: " + location.getPath() + " (encoding: "+ encoding+ ")",e);  }}  }
class C{  public static RuntimeException throwInternalError(){  return throwInternalError("Unexpected code path");}  }
class C{  public final GVector scaleSelf(GVector v){  if (length != v.length) {    throw new MatrixSizeException();  }  for (int i=0; i < length; i++) {    this.values[i]*=v.values[i];  }  return this;}  }
class C{  public Light createNewLight(String systemName,String userName){  Light lgt=null;  int bitNum=getBitFromSystemName(systemName);  if (bitNum == 0) {    return (null);  }  String sName=getSystemPrefix() + "L" + bitNum;  lgt=new LnLight(sName,userName,_trafficController,this);  return lgt;}  }
class C{  public boolean createDatabase(Connection sysConn){  log.info(m_databaseName + "(" + m_databaseDevice+ ")");  return executeCommands(m_dbTarget.getCommands(AdempiereDatabase.CMD_CREATE_DATABASE),sysConn,true,false);}  }
class C{  private static Transaction deserialize(final VerifiableEntity.DeserializationOptions options,final Deserializer deserializer){  final int type=deserializer.readInt("type");  final BiFunction<VerifiableEntity.DeserializationOptions,Deserializer,Transaction> constructor=TYPE_TO_CONSTRUCTOR_MAP.getOrDefault(type,null);  if (null == constructor) {    throw new IllegalArgumentException("Unknown transaction type: " + type);  }  return constructor.apply(options,deserializer);}  }
class C{  private void graphTree(StringBuffer text) throws Exception {  for (int i=0; i < m_sons.length; i++) {    text.append("N" + m_id + "->"+ "N"+ m_sons[i].m_id+ " [label=\""+ Utils.backQuoteChars(m_localModel.rightSide(i,m_train).trim())+ "\"]\n");    if (m_sons[i].m_isLeaf) {      text.append("N" + m_sons[i].m_id + " [label=\""+ Utils.backQuoteChars(m_localModel.dumpLabel(i,m_train))+ "\" "+ "shape=box style=filled ");      if (m_train != null && m_train.numInstances() > 0) {        text.append("data =\n" + m_sons[i].m_train + "\n");        text.append(",\n");      }      text.append("]\n");    } else {      text.append("N" + m_sons[i].m_id + " [label=\""+ Utils.backQuoteChars(m_sons[i].m_localModel.leftSide(m_train))+ "\" ");      if (m_train != null && m_train.numInstances() > 0) {        text.append("data =\n" + m_sons[i].m_train + "\n");        text.append(",\n");      }      text.append("]\n");      m_sons[i].graphTree(text);    }  }}  }
class C{  private void gotoWelcomeActivity(){  Intent intent=new Intent();  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.setClass(this,WelcomeActivity.class);  startActivity(intent);  finish();}  }
class C{  protected void createViableOptionLookupTable(int maxCompiler){  viableChoices=new RecompilationChoice[maxCompiler][];  RecompilationChoice[] temp=new RecompilationChoice[maxCompiler];  for (int prevCompiler=CompilerDNA.BASELINE; prevCompiler < maxCompiler; prevCompiler++) {    int curSlot=0;    for (    RecompileOptChoice choice : allOptLevelChoices) {      if (choice.getCompiler() > prevCompiler) {        temp[curSlot++]=choice;      }    }    viableChoices[prevCompiler]=new RecompilationChoice[curSlot];    for (int i=0; i < curSlot; i++) {      viableChoices[prevCompiler][i]=temp[i];      temp[i]=null;    }  }}  }
class C{  @Override public void onUpdate(FaceDetector.Detections<Face> detectionResults,Face face){  mOverlay.add(mFaceGraphic);  mFaceGraphic.updateFace(face);}  }
class C{  protected void openAnimate(int position){  final View child=swipeListView.getChildAt(position - mLayoutManager.findFirstVisibleItemPosition()).findViewById(swipeFrontView);  if (child != null) {    openAnimate(child,position);  }}  }
class C{  public void addVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.addVetoableChangeListener(propertyName,in_vcl);}  }
class C{  public OptionHandlerTest(String name,String classname){  super(name);  m_Classname=classname;}  }
class C{  public boolean maybeWasSeen(Sha256Hash hash){  lock.lock();  try {    Entry entry=memoryPool.get(hash);    return entry != null;  }  finally {    lock.unlock();  }}  }
class C{  public boolean isEnabled(){  return isEnabled_;}  }
class C{  public static String join(Object[] array,char separator){  if (array == null) {    return null;  }  if (array.length == 0) {    return StringPool.EMPTY;  }  if (array.length == 1) {    return String.valueOf(array[0]);  }  final StringBuilder sb=new StringBuilder(array.length * 16);  for (int i=0; i < array.length; i++) {    if (i > 0) {      sb.append(separator);    }    sb.append(array[i]);  }  return sb.toString();}  }
class C{  public synchronized long appendLine(final byte[] b) throws IOException {  long seekpos=this.length();  this.seekPrivate(seekpos);  this.write(b);  this.writeByte((byte)'\n');  this.invalidate();  return seekpos;}  }
class C{  public void forEachXor(Allocation ain,Allocation aout){  blend(11,ain,aout);}  }
class C{  private void outputLogPageHeader(ServletOutputStream outputStream) throws Exception {  outputStream.print("<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n" + "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"" + "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n"+ "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en-US\""+ "lang=\"en-US\">\n"+ "  <head profile=\"http://www.w3.org/2000/08/w3c-synd/#\">\n"+ "     <style>\n"+ "       pre {\n"+ "         margin: 0px;\n"+ "       }\n"+ "     </style>\n"+ "    <title>Cargo Live Log Viewer</title>"+ "  </head>\n"+ "  <body>\n"+ "  <div id=\"logText\"><pre>");}  }
class C{  public SCW(double eta,Mode mode,boolean diagonalOnly){  setEta(eta);  setMode(mode);  setDiagonalOnly(diagonalOnly);}  }
class C{  public static int blue(int color){  return color & 0xFF;}  }
class C{  protected void add(UndoableRichTextChange change){  fChanges.add(change);}  }
class C{  @Deprecated public void removeAssociatedStorageSystem(final String storageSystemId){  if (_associatedStorageSystems != null) {    _associatedStorageSystems.remove(storageSystemId);  }}  }
class C{  private boolean isFirstAppLaunch(){  SharedPreferences preferences=this.getPreferences(Context.MODE_PRIVATE);  return preferences.getBoolean(FIRST_APP_LAUNCH,true);}  }
class C{  public int size(){  return count;}  }
class C{  public Tree<StateSet> extractBestStateSetTree(short gState,short gp,short start,short end,List<String> sentence){  double bestScore=iScore[start][end][gState][gp];  if (end - start == 1) {    if (!grammar.isGrammarTag(gState)) {      List<Tree<StateSet>> child=new ArrayList<Tree<StateSet>>();      StateSet node=new StateSet(zero,zero,sentence.get(start),start,end);      child.add(new Tree<StateSet>(node));      StateSet root=new StateSet(gState,one,null,start,end);      root.allocate();      root.setIScore(0,gp);      return new Tree<StateSet>(root,child);    } else {      double veryBestScore=Double.NEGATIVE_INFINITY;      short newIndex=-1;      short newSubstate=-1;      UnaryRule[] unaries=grammar.getClosedViterbiUnaryRulesByParent(gState);      for (int r=0; r < unaries.length; r++) {        UnaryRule ur=unaries[r];        short cState=ur.childState;        double[][] scores=ur.getScores2();        for (short cp=0; cp < scores.length; cp++) {          if (scores[cp] == null)           continue;          if (iScore[start][end][cState] == null)           continue;          double ruleScore=iScore[start][end][cState][cp] + scores[cp][gp];          if ((ruleScore >= veryBestScore) && (gState != cState || gp != cp) && !grammar.isGrammarTag(cState)) {            veryBestScore=ruleScore;            newIndex=cState;            newSubstate=cp;          }        }      }      List<Tree<StateSet>> child1=new ArrayList<Tree<StateSet>>();      StateSet node1=new StateSet(zero,zero,sentence.get(start),start,end);      child1.add(new Tree<StateSet>(node1));      if (newIndex == -1)       System.out.println("goalStr1==null with newIndex==" + newIndex + " goalState=="+ gState);      List<Tree<StateSet>> child=new ArrayList<Tree<StateSet>>();      StateSet node=new StateSet(newIndex,one,null,start,end);      node.allocate();      node.setIScore(0,newSubstate);      child.add(new Tree<StateSet>(node,child1));      StateSet root=new StateSet(gState,one,null,start,end);      root.allocate();      root.setIScore(0,gp);      return new Tree<StateSet>(root,child);    }  }  double bestBScore=Double.NEGATIVE_INFINITY;  for (int split=start + 1; split < end; split++) {    BinaryRule[] parentRules=grammar.splitRulesWithP(gState);    for (short i=0; i < parentRules.length; i++) {      BinaryRule br=parentRules[i];      short lState=br.leftChildState;      if (iScore[start][split][lState] == null)       continue;      short rState=br.rightChildState;      if (iScore[split][end][rState] == null)       continue;      double[][][] scores=br.getScores2();      for (short lp=0; lp < scores.length; lp++) {        for (short rp=0; rp < scores[lp].length; rp++) {          if (scores[lp][rp] == null)           continue;          double score=scores[lp][rp][gp] + iScore[start][split][lState][lp] + iScore[split][end][rState][rp];          if (score > bestBScore)           bestBScore=score;          if (matches(score,bestScore)) {            Tree<StateSet> leftChildTree=extractBestStateSetTree(lState,lp,start,(short)split,sentence);            Tree<StateSet> rightChildTree=extractBestStateSetTree(rState,rp,(short)split,end,sentence);            List<Tree<StateSet>> children=new ArrayList<Tree<StateSet>>();            children.add(leftChildTree);            children.add(rightChildTree);            StateSet root=new StateSet(gState,one,null,start,end);            root.allocate();            root.setIScore(0,gp);            Tree<StateSet> result=new Tree<StateSet>(root,children);            return result;          }        }      }    }  }  double bestUScore=Double.NEGATIVE_INFINITY;  UnaryRule[] unaries=grammar.getClosedViterbiUnaryRulesByParent(gState);  for (short r=0; r < unaries.length; r++) {    UnaryRule ur=unaries[r];    short cState=ur.childState;    if (iScore[start][end][cState] == null)     continue;    double[][] scores=ur.getScores2();    for (short cp=0; cp < scores.length; cp++) {      if (scores[cp] == null)       continue;      double rScore=scores[cp][gp];      double score=rScore + iScore[start][end][cState][cp];      if (score > bestUScore)       bestUScore=score;      if ((cState != ur.parentState || cp != gp) && matches(score,bestScore)) {        Tree<StateSet> childTree=extractBestStateSetTree(cState,cp,start,end,sentence);        List<Tree<StateSet>> children=new ArrayList<Tree<StateSet>>();        children.add(childTree);        StateSet root=new StateSet(gState,one,null,start,end);        root.allocate();        root.setIScore(0,gp);        Tree<StateSet> result=new Tree<StateSet>(root,children);        totalUsedUnaries++;        return result;      }    }  }  System.err.println("Warning: could not find the optimal way to build state " + gState + " spanning from "+ start+ " to "+ end+ ".");  System.err.println("The goal score was " + bestScore + ", but the best we found was a binary rule giving "+ bestBScore+ " and a unary rule giving "+ bestUScore);  showScores(iScore,"iScores");  return null;}  }
class C{  public static String parseCharset(Map<String,String> headers){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return HTTP.DEFAULT_CONTENT_CHARSET;}  }
class C{  public static int encode(byte[] data,OutputStream out) throws IOException {  return encoder.encode(data,0,data.length,out);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:03.483 -0500",hash_original_method="1E0A08AF35615E9E10187C3143DD41F0",hash_generated_method="D2B3F704F60127F3A4CB27DBBEB3DB0F") @Override protected void onConnect(ConnectionParams cp){  if (DBG)   log("CdmaDataConnection Connecting...");  mApn=cp.apn;  createTime=-1;  lastFailTime=-1;  lastFailCause=FailCause.NONE;  int dataProfile;  if ((cp.apn != null) && (cp.apn.types.length > 0) && (cp.apn.types[0] != null)&& (cp.apn.types[0].equals(Phone.APN_TYPE_DUN))) {    if (DBG)     log("CdmaDataConnection using DUN");    dataProfile=RILConstants.DATA_PROFILE_TETHERED;  } else {    dataProfile=RILConstants.DATA_PROFILE_DEFAULT;  }  Message msg=obtainMessage(EVENT_SETUP_DATA_CONNECTION_DONE,cp);  msg.obj=cp;  phone.mCM.setupDataCall(Integer.toString(getRadioTechnology(RILConstants.SETUP_DATA_TECH_CDMA)),Integer.toString(dataProfile),null,null,null,Integer.toString(RILConstants.SETUP_DATA_AUTH_PAP_CHAP),RILConstants.SETUP_DATA_PROTOCOL_IP,msg);}  }
class C{  public void removeObject(CSG previousCsg){  MeshView previous=getCsgMap().get(previousCsg);  if (previous != null) {    lookGroup.getChildren().remove(previous);    lookGroup.getChildren().remove(axisMap.get(previous));    axisMap.remove(previous);  }  getCsgMap().remove(previousCsg);  csgSourceFile.remove(previousCsg);}  }
class C{  private void addGeofencesInternal(){  Log.v(TAG,ACTION_ADD_GEOFENCES);  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(LocationServices.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  if (connectionResult.isSuccess() && googleApiClient.isConnected()) {    PendingIntent pendingIntent=PendingIntent.getBroadcast(this,0,new Intent(this,UtilityReceiver.class),0);    GeofencingApi.addGeofences(googleApiClient,TouristAttractions.getGeofenceList(),pendingIntent);    googleApiClient.disconnect();  } else {    Log.e(TAG,String.format(Constants.GOOGLE_API_CLIENT_ERROR_MSG,connectionResult.getErrorCode()));  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.285 -0500",hash_original_method="8098E0901B1513A38FF0251B40A20DA9",hash_generated_method="24338BAE20FEB9E05BE3A946C2F5EAB7") public final void signalAll(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignalAll(first);}  }
class C{  WpsResult startWpsWithPinFromDevice(WpsInfo config){  WpsResult result=new WpsResult();  result.pin=mWifiNative.startWpsPinDisplay(config.BSSID);  if (!TextUtils.isEmpty(result.pin)) {    markAllNetworksDisabled();    result.status=WpsResult.Status.SUCCESS;  } else {    loge("Failed to start WPS pin method configuration");    result.status=WpsResult.Status.FAILURE;  }  return result;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.EXTENDED_RUNTIME_ENVIRONMENT__EXTENDED_RUNTIME_ENVIRONMENT:    return extendedRuntimeEnvironment != null;}return super.eIsSet(featureID);}  }
class C{  public DataException(String message){  super(message);}  }
class C{  public static boolean isBaseTranslation(String tableName){  if (tableName.startsWith("AD") || tableName.equals("C_Country_Trl"))   return true;  return false;}  }
class C{  public void addTodoPattern(TodoPattern pattern){  LOG.assertTrue(!myTodoPatterns.contains(pattern));  myTodoPatterns.add(pattern);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public PolicePost(){  super();}  }
class C{  private static Font lookupDefaultDialogFont(){  Font buttonFont=UIManager.getFont("Button.font");  return buttonFont != null ? buttonFont : new JButton().getFont();}  }
class C{  public StandardPieToolTipGenerator(Locale locale){  this(DEFAULT_TOOLTIP_FORMAT,locale);}  }
class C{  public static void resetCalendar(){  CACHED_CALENDAR.remove();}  }
class C{  public static RuntimeException wrapChecked(Throwable t){  if (t instanceof RuntimeException) {    return (RuntimeException)t;  }  return new UncheckedException(t);}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area){  area=trimMargin(area);  drawBorder(g2,area);  area=trimBorder(area);  area=trimPadding(area);  if (this.lineVisible) {    Point2D location=RectangleAnchor.coordinates(area,this.shapeLocation);    Shape aLine=ShapeUtilities.createTranslatedShape(getLine(),this.shapeAnchor,location.getX(),location.getY());    g2.setPaint(this.linePaint);    g2.setStroke(this.lineStroke);    g2.draw(aLine);  }  if (this.shapeVisible) {    Point2D location=RectangleAnchor.coordinates(area,this.shapeLocation);    Shape s=ShapeUtilities.createTranslatedShape(this.shape,this.shapeAnchor,location.getX(),location.getY());    if (this.shapeFilled) {      Paint p=this.fillPaint;      if (p instanceof GradientPaint) {        GradientPaint gp=(GradientPaint)this.fillPaint;        p=this.fillPaintTransformer.transform(gp,s);      }      g2.setPaint(p);      g2.fill(s);    }    if (this.shapeOutlineVisible) {      g2.setPaint(this.outlinePaint);      g2.setStroke(this.outlineStroke);      g2.draw(s);    }  }}  }
class C{  public static Intent createTakePictureIntent(Activity ctx,Uri savingUri){  if (savingUri == null) {    throw new NullPointerException("Uri cannot be null");  }  final List<Intent> cameraIntents=new ArrayList<Intent>();  final Intent captureIntent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);  final PackageManager packageManager=ctx.getPackageManager();  final List<ResolveInfo> listCam=packageManager.queryIntentActivities(captureIntent,0);  for (  ResolveInfo res : listCam) {    final String packageName=res.activityInfo.packageName;    final Intent intent=new Intent(captureIntent);    intent.setComponent(new ComponentName(res.activityInfo.packageName,res.activityInfo.name));    intent.setPackage(packageName);    intent.putExtra(MediaStore.EXTRA_OUTPUT,savingUri);    cameraIntents.add(intent);  }  final Intent galleryIntent=new Intent();  galleryIntent.setType("image/*");  galleryIntent.setAction(Intent.ACTION_GET_CONTENT);  final Intent chooserIntent=Intent.createChooser(galleryIntent,"Select Source");  chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS,cameraIntents.toArray(new Parcelable[]{}));  return chooserIntent;}  }
class C{  public Collection<String> supportedAnnotationTypes(){  Set<String> set=new HashSet<String>();  set.add(HttpUrl.class.getName());  set.add(HttpExceptionHandler.class.getName());  set.add(HttpParam.class.getName());  return set;}  }
class C{  public boolean isValid(){  return _valid;}  }
class C{  public boolean isFillPoints(){  return mFillPoints;}  }
class C{  public String toSciNotation(){  if (isZero())   return SCI_NOT_ZERO;  String specialStr=getSpecialNumberString();  if (specialStr != null)   return specialStr;  int[] magnitude=new int[1];  String digits=extractSignificantDigits(false,magnitude);  String expStr=SCI_NOT_EXPONENT_CHAR + magnitude[0];  if (digits.charAt(0) == '0') {    throw new IllegalStateException("Found leading zero: " + digits);  }  String trailingDigits="";  if (digits.length() > 1)   trailingDigits=digits.substring(1);  String digitsWithDecimal=digits.charAt(0) + "." + trailingDigits;  if (this.isNegative())   return "-" + digitsWithDecimal + expStr;  return digitsWithDecimal + expStr;}  }
class C{  public JToolbarButton(){  initialize();}  }
class C{  private ParameterDefinition initParameterDefinition(){  ParameterDefinition pd=new ParameterDefinition();  pd.setConfigurable(true);  pd.setDefaultValue("bla");  pd.setKey(123);  pd.setMandatory(true);  pd.setMaximumValue(L2000);  pd.setMinimumValue(null);  pd.setParameterId("diskSpace");  pd.setParameterType(ParameterType.SERVICE_PARAMETER);  pd.setModificationType(ParameterModificationType.STANDARD);  pd.setValueType(ParameterValueType.INTEGER);  List<ParameterOption> optionList=Collections.emptyList();  pd.setOptionList(optionList);  return pd;}  }
class C{  public static void update(SynthContext state,Graphics g){  paintRegion(state,g,null);}  }
class C{  public void filter(CoordinateSequence seq,int i){  seq.setOrdinate(i,0,precModel.makePrecise(seq.getOrdinate(i,0)));  seq.setOrdinate(i,1,precModel.makePrecise(seq.getOrdinate(i,1)));}  }
class C{  public int remainingKills(Player player,String creature){  final List<String> tokens=Arrays.asList(questState.split(","));  if ((tokens.size() % 5) != 0) {    LOGGER.error("Wrong record in quest slot of player " + player.getName() + ": ["+ questState+ "]");    return -1;  }  for (int i=0; i < tokens.size() / 5; i++) {    final String creatureName=tokens.get(i * 5);    if (creature.equals(creatureName)) {      List<String> tokensForCreature=tokens.subList(i * 5,i * 5 + 5);      return remainingKills(player,tokensForCreature);    }  }  LOGGER.warn("Player " + player.getName() + " was not requested to kill any "+ creature);  return -1;}  }
class C{  private static DOMNodeObjectModel createDOMNodeObjectModelWOFullyQualifiedFields(DOMNodeObjectModel domNodeObjectModel){  Set<Map.Entry<DOMNodeElementTuple,Map<String,Integer>>> entries=domNodeObjectModel.getFields().entrySet();  Iterator<Map.Entry<DOMNodeElementTuple,Map<String,Integer>>> iterator=entries.iterator();  Map<DOMNodeElementTuple,Map<String,Integer>> thisFields=new HashMap<>();  while (iterator.hasNext()) {    Map.Entry<DOMNodeElementTuple,Map<String,Integer>> entry=iterator.next();    DOMNodeElementTuple newKey=new DOMNodeElementTuple("",entry.getKey().getLocalName());    thisFields.put(newKey,entry.getValue());  }  Map<DOMNodeObjectModel,Integer> childrenDOMNodes=new HashMap<>();  Iterator<Map.Entry<DOMNodeObjectModel,Integer>> childEntriesIterator=domNodeObjectModel.getChildrenDOMNodes().entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<DOMNodeObjectModel,Integer> entry=childEntriesIterator.next();    DOMNodeObjectModel child=DOMNodeObjectModel.createDOMNodeObjectModelWOFullyQualifiedFields(entry.getKey());    childrenDOMNodes.put(child,entry.getValue());  }  return new DOMNodeObjectModel(domNodeObjectModel.getNode(),domNodeObjectModel.getLocalName(),domNodeObjectModel.getNodeType(),Collections.unmodifiableMap(childrenDOMNodes),Collections.unmodifiableMap(thisFields),Collections.unmodifiableMap(domNodeObjectModel.getFieldsLocalNameMap()));}  }
class C{  public boolean isShouldAutoplay(){  return shouldAutoplay;}  }
class C{  public void test_Of_EEArray(){  EnumWithInnerClass[] enumArray=new EnumWithInnerClass[]{EnumWithInnerClass.b,EnumWithInnerClass.c};  EnumSet<EnumWithInnerClass> enumSet=EnumSet.of(EnumWithInnerClass.a,enumArray);  assertEquals("Should be equal",3,enumSet.size());  assertTrue("Should return true",enumSet.contains(EnumWithInnerClass.a));  assertTrue("Should return true",enumSet.contains(EnumWithInnerClass.c));  try {    EnumSet.of(EnumWithInnerClass.a,(EnumWithInnerClass[])null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  EnumFoo[] foos={EnumFoo.a,EnumFoo.c,EnumFoo.d};  EnumSet<EnumFoo> set=EnumSet.of(EnumFoo.c,foos);  assertEquals("size of set should be 1",3,set.size());  assertTrue("Should contain EnumFoo.a",set.contains(EnumFoo.a));  assertTrue("Should contain EnumFoo.c",set.contains(EnumFoo.c));  assertTrue("Should contain EnumFoo.d",set.contains(EnumFoo.d));  HugeEnumWithInnerClass[] hugeEnumArray=new HugeEnumWithInnerClass[]{HugeEnumWithInnerClass.b,HugeEnumWithInnerClass.c};  EnumSet<HugeEnumWithInnerClass> hugeEnumSet=EnumSet.of(HugeEnumWithInnerClass.a,hugeEnumArray);  assertEquals(3,hugeEnumSet.size());  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.a));  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.c));  try {    EnumSet.of(HugeEnumWithInnerClass.a,(HugeEnumWithInnerClass[])null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  HugeEnumWithInnerClass[] huges={HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.c,HugeEnumWithInnerClass.d};  EnumSet<HugeEnumWithInnerClass> hugeSet=EnumSet.of(HugeEnumWithInnerClass.c,huges);  assertEquals(3,hugeSet.size());  assertTrue(hugeSet.contains(HugeEnumWithInnerClass.a));  assertTrue(hugeSet.contains(HugeEnumWithInnerClass.c));  assertTrue(hugeSet.contains(HugeEnumWithInnerClass.d));}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject bestScore=null;  int n=m_patterns.length;  for (int i=0; i < n; i++) {    XObject score=m_patterns[i].execute(xctxt);    if (score != NodeTest.SCORE_NONE) {      if (null == bestScore)       bestScore=score; else       if (score.num() > bestScore.num())       bestScore=score;    }  }  if (null == bestScore) {    bestScore=NodeTest.SCORE_NONE;  }  return bestScore;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AP_DB'";  db.execSQL(sql);}  }
class C{  protected Type(String name){  super(name);}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.326 -0400",hash_original_method="543B22C2EC07CA4C1AEB003D5BB6B718",hash_generated_method="F952677652B1D1C01B115CD23A0864CB") public void track(String path,Object marker,FileDeleteStrategy deleteStrategy){  if (path == null) {    throw new NullPointerException("The path must not be null");  }  addTracker(path,marker,deleteStrategy);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildXinBlanca(zone);}  }
class C{  public boolean isBlank(final CharSequence cs){  int strLen;  if (cs == null || (strLen=cs.length()) == 0) {    return true;  }  for (int i=0; i < strLen; i++) {    if (!Character.isWhitespace(cs.charAt(i))) {      return false;    }  }  return true;}  }
class C{  public int size(){  int size=0;  for (  Dictionary dict : this.dictionaries.values()) {    size+=dict.size();  }  return size;}  }
class C{  public static void swapCols(Matrix matrix,long col1,long col2){  double temp=0;  long rows=matrix.getRowCount();  for (long row=0; row < rows; row++) {    temp=matrix.getAsDouble(row,col1);    matrix.setAsDouble(matrix.getAsDouble(row,col2),row,col1);    matrix.setAsDouble(temp,row,col2);  }}  }
class C{  public static Type collectionElementType(Type context,Class<?> contextRawType){  Type collectionType=getSupertype(context,contextRawType,Collection.class);  if (collectionType instanceof WildcardType) {    collectionType=((WildcardType)collectionType).getUpperBounds()[0];  }  if (collectionType instanceof ParameterizedType) {    return ((ParameterizedType)collectionType).getActualTypeArguments()[0];  }  return Object.class;}  }
class C{  public boolean isService(){  if (m_product != null)   return m_product.isService();  return false;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.STRING_EXPR___EQUALITY_OP_1:    return ((InternalEList<?>)getEqualityOp_1()).basicRemove(otherEnd,msgs);case UmplePackage.STRING_EXPR___STRING_LIT_1:  return ((InternalEList<?>)getStringLit_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public UnescapedCharSequence(CharSequence text){  this.chars=new char[text.length()];  this.wasEscaped=new boolean[text.length()];  for (int i=0; i < text.length(); i++) {    this.chars[i]=text.charAt(i);    this.wasEscaped[i]=false;  }}  }
class C{  public static final LocoNetMessage createIplDcs51QueryPacket(){  return createIplSpecificHostQueryPacket(LnConstants.RE_IPL_MFR_DIGITRAX,LnConstants.RE_IPL_DIGITRAX_HOST_DCS51);}  }
class C{  private double determineAlphaMin(int n,double[] alpha_min,HyperBoundingBox interval){  double alpha_n=extremum_alpha_n(n,alpha_min);  double lower=interval.getMin(n);  double upper=interval.getMax(n);  double[] alpha_extreme=new double[alpha_min.length];  System.arraycopy(alpha_min,n,alpha_extreme,n,alpha_extreme.length - n);  alpha_extreme[n]=alpha_n;  ExtremumType type=extremumType(n,alpha_extreme,interval);  if (type.equals(ExtremumType.MINIMUM) || type.equals(ExtremumType.CONSTANT)) {    if (lower <= alpha_n && alpha_n <= upper) {      return alpha_n;    } else     if (alpha_n < lower) {      return lower;    } else {      if (alpha_n <= upper) {        throw new IllegalStateException("Should never happen!");      }      return upper;    }  } else {    if (lower <= alpha_n && alpha_n <= upper) {      if (alpha_n - lower <= upper - alpha_n) {        return upper;      } else {        return lower;      }    } else     if (alpha_n < lower) {      return upper;    } else {      if (alpha_n <= upper) {        throw new IllegalStateException("Should never happen!");      }      return lower;    }  }}  }
class C{  public static boolean isUuid(String str){  try {    uuidFromString(str);  } catch (  IllegalArgumentException e) {    return false;  }  return true;}  }
class C{  private void chargeLocale(){  Locale lc=this.getLocale();  InputStream str=getClass().getClassLoader().getResourceAsStream("resources/message_" + lc.getCountry() + ".properties");  if (str == null) {    str=getClass().getClassLoader().getResourceAsStream("resources/message_ES.properties");  }  messages=new Properties();  try {    messages.load(str);  } catch (  FileNotFoundException e) {  }catch (  IOException e) {  }}  }
class C{  public void newLine() throws IOException {  out.newLine();}  }
class C{  public XObject elementAt(final int i){  return _stackFrames[i];}  }
class C{  public void enable(Feature f){  _featureFlags|=f.getMask();}  }
class C{  private List<AuditRecord> auditCreate(OperationGroup createGroup) throws IllegalPersistStateException {  List<AuditRecord> records=new LinkedList<>();  for (  Entity entity : createGroup.getEntities()) {    AuditRecord auditRecord=null;    for (    Node node : entity.getChildren()) {      if (node instanceof ValueNode) {        if (((ValueNode)node).getValue() != null) {          if (auditRecord == null) {            auditRecord=new AuditRecord(entity.getEntityType(),entity.getKey().getValue());          }          auditRecord.addChange(node,null,((ValueNode)node).getValue());        }      } else       if (node instanceof RefNode) {        if (auditRecord == null) {          auditRecord=new AuditRecord(entity.getEntityType(),entity.getKey().getValue());        }        if (((RefNode)node).getEntityKey() != null) {          auditRecord.addChange(node,null,((RefNode)node).getEntityKey());        }      }    }    if (auditRecord != null) {      LOG.debug("Changes found for " + entity);      records.add(auditRecord);    }  }  return records;}  }
class C{  public String toString(){  return "move " + num + " cards based at "+ FreeCellNode.out(card)+ " from column "+ fromCol+ " to column "+ toCol;}  }
class C{  @Override public double doubleValue(){  return value;}  }
class C{  public boolean visitUnionPath(ExpressionOwner owner,UnionPathIterator path){  return true;}  }
class C{  public final Enumeration<JIPTerm> parseStream(final PushbackLineNumberInputStream ins,final String streamName){  return new TermEnumerator(ins,m_opManager,streamName);}  }
class C{  public static Class[] types(){  return new Class[0];}  }
class C{  public void addPermission(Permission permission){  if (_permissions == null)   _permissions=new ArrayList<Permission>();  _permissions.add(permission);}  }
class C{  public ChartLayout(){  this(0,0);}  }
class C{  public static int compareTo(Vector3 a,Vector3 b){  return (int)a.lengthSquared() - (int)b.lengthSquared();}  }
class C{  public MoreLikeThisQueryBuilder(String... fields){  this.fields=fields;}  }
class C{  public void printBody(final OutputStream output) throws IOException {  final InputStream input=new RqChunk(new RqLengthAware(this)).body();  final byte[] buf=new byte[4096];  while (true) {    final int bytes=input.read(buf);    if (bytes < 0) {      break;    }    output.write(buf,0,bytes);  }}  }
class C{  public static String toJson(Map<String,String> map){  if (map == null || map.size() == 0) {    return null;  }  StringBuilder paras=new StringBuilder();  paras.append("{");  Iterator<Map.Entry<String,String>> ite=map.entrySet().iterator();  while (ite.hasNext()) {    Map.Entry<String,String> entry=(Map.Entry<String,String>)ite.next();    paras.append("\"").append(entry.getKey()).append("\":\"").append(entry.getValue()).append("\"");    if (ite.hasNext()) {      paras.append(",");    }  }  paras.append("}");  return paras.toString();}  }
class C{  public ModelImporterVisualPanel1(ModelImporterWizardPanel1 panel){  initComponents();  this.panel=panel;  ps=new PropertySheet();  ps.setNodes(new Node[]{});  ps.setDescriptionAreaVisible(false);  jPanel2.add(ps);}  }
class C{  public void testSetPhoneSensorValues_phoneStandingUpFacingNorthOnEquatorAtMeridian(){  LatLong location=new LatLong(0,0);  Vector3 acceleration=new Vector3(0,-10,0);  Vector3 magneticField=new Vector3(0,10,1);  Vector3 expectedZenith=new Vector3(1,0,0);  Vector3 expectedNadir=new Vector3(-1,0,0);  Vector3 expectedNorth=new Vector3(0,0,1);  Vector3 expectedEast=new Vector3(0,1,0);  Vector3 expectedSouth=new Vector3(0,0,-1);  Vector3 expectedWest=new Vector3(0,-1,0);  Vector3 expectedPointing=expectedNorth;  Vector3 expectedUpAlongPhone=expectedZenith;  checkModelOrientation(location,acceleration,magneticField,expectedZenith,expectedNadir,expectedNorth,expectedEast,expectedSouth,expectedWest,expectedPointing,expectedUpAlongPhone);}  }
class C{  private Object[] asRow(Map<String,?> rowMap,Object defaultValue,boolean returnRowId){  int len=_columns.size();  if (returnRowId) {    ++len;  }  Object[] row=new Object[len];  if (defaultValue != null) {    Arrays.fill(row,defaultValue);  }  if (returnRowId) {    row[len - 1]=ColumnImpl.RETURN_ROW_ID;  }  if (rowMap == null) {    return row;  }  for (  ColumnImpl col : _columns) {    if (rowMap.containsKey(col.getName())) {      col.setRowValue(row,col.getRowValue(rowMap));    }  }  return row;}  }
class C{  public void prependProperty(String property,String value){  String curVal=getProperties().getProperty(property,"");  getProperties().setProperty(property,value + " " + curVal);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public SslAuthCertNotMatchesOrg(){  requestFileName="getstate.query";  responseFile="getstate.answer";}  }
class C{  public static EspProxyTask createProxyTask(EspSocket srcSock){  try {    byte[] buffer=new byte[2048];    int headerLength=EspSocketUtil.readHttpHeader(srcSock.getInputStream(),buffer,0);    String bssid=EspSocketUtil.findHttpHeader(buffer,0,headerLength,MeshCommunicationUtils.HEADER_MESH_BSSID);    String host=EspSocketUtil.findHttpHeader(buffer,0,headerLength,MeshCommunicationUtils.HEADER_MESH_HOST);    String timeout=EspSocketUtil.findHttpHeader(buffer,0,headerLength,MeshCommunicationUtils.HEADER_PROXY_TIMEOUT);    String readResponse=EspSocketUtil.findHttpHeader(buffer,0,headerLength,MeshCommunicationUtils.HEADER_READ_ONLY);    String needResponse=EspSocketUtil.findHttpHeader(buffer,0,headerLength,MeshCommunicationUtils.HEADER_NON_RESPONSE);    String protoTypeStr=EspSocketUtil.findHttpHeader(buffer,0,headerLength,MeshCommunicationUtils.HEADER_PROTO_TYPE);    String taskSerialStr=EspSocketUtil.findHttpHeader(buffer,0,headerLength,MeshCommunicationUtils.HEADER_TASK_SERIAL);    String timeoutStr=EspSocketUtil.findHttpHeader(buffer,0,headerLength,MeshCommunicationUtils.HEADER_TASK_TIMEOUT);    String contentLengthStr=EspSocketUtil.findHttpHeader(buffer,0,headerLength,HTTP.CONTENT_LEN);    int contentLength=0;    if (!TextUtils.isEmpty(contentLengthStr)) {      contentLength=Integer.parseInt(contentLengthStr);      EspSocketUtil.readBytes(srcSock.getInputStream(),buffer,headerLength,contentLength);    }    String meshGroupStr=EspSocketUtil.findHttpHeader(buffer,0,headerLength,MeshCommunicationUtils.HEADER_MESH_MULTICAST_GROUP);    List<String> bssidList=null;    if (!TextUtils.isEmpty(meshGroupStr)) {      bssidList=BSSIDUtil.getBssidList(meshGroupStr);    }    int protoType=TextUtils.isEmpty(protoTypeStr) ? EspProxyTask.M_PROTO_HTTP : Integer.parseInt(protoTypeStr);    int[] newHeaderLength=new int[]{-1};    buffer=EspSocketUtil.removeUnnecessaryHttpHeader(buffer,headerLength,contentLength,UNNECESSARY_HEADER_LIST,newHeaderLength);    headerLength=newHeaderLength[0];    byte[] requestBytes=getRequestBytes(protoType,buffer,headerLength,contentLength);    MeshLog.i(DEBUG,USE_LOG4J,CLASS,"createProxyTask() bssid is: " + bssid);    EspProxyTaskImpl task=new EspProxyTaskImpl(host,bssid,requestBytes,Integer.parseInt(timeout));    task.setSourceSocket(srcSock);    boolean readOnly=!TextUtils.isEmpty(readResponse) && (Integer.parseInt(readResponse) != 0);    task.setReadOnlyTask(readOnly);    boolean replyResponse=TextUtils.isEmpty(needResponse) || (Integer.parseInt(needResponse) == 0);    task.setNeedReplyResponse(replyResponse);    task.setProtoType(protoType);    int taskSerial=TextUtils.isEmpty(taskSerialStr) ? MeshCommunicationUtils.SERIAL_NORMAL_TASK : Integer.parseInt(taskSerialStr);    task.setLongSocketSerial(taskSerial);    int taskTimeout=TextUtils.isEmpty(timeoutStr) ? 0 : Integer.parseInt(timeoutStr);    task.setTaskTimeout(taskTimeout);    if (bssidList != null) {      task.setGroupBssidList(bssidList);    }    return task;  } catch (  IOException e) {    e.printStackTrace();    try {      srcSock.close();    } catch (    IOException e1) {      e1.printStackTrace();    }  }  return null;}  }
class C{  public boolean forEachEntry(TFloatLongProcedure procedure){  byte[] states=_states;  float[] keys=_set;  long[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.cosh(z * multiplier));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ImageTransformer(final GraphicsState current_graphics_state,final BufferedImage new_image){  this.current_image=new_image;  final int w=current_image.getWidth();  final int h=current_image.getHeight();  CTM=current_graphics_state.CTM;  Trm=new float[3][3];  Trm[0][0]=(CTM[0][0] / w);  Trm[0][1]=-(CTM[0][1] / w);  Trm[0][2]=0;  Trm[1][0]=-(CTM[1][0] / h);  Trm[1][1]=(CTM[1][1] / h);  Trm[1][2]=0;  Trm[2][0]=CTM[2][0];  Trm[2][1]=CTM[2][1];  Trm[2][2]=1;  for (int y=0; y < 3; y++) {    for (int x=0; x < 3; x++) {      if ((Trm[x][y] > .99) & (Trm[x][y] < 1)) {        Trm[x][y]=1;      }    }  }  scale(w,h);  calcCoordinates();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:27.550 -0500",hash_original_method="9BFCBEDD9F75493AAF00467F3D68B8DC",hash_generated_method="AC1E71F298BF5447E8007D0AC71DCE1D") public LogWriter(String tag){  mTag=tag;}  }
class C{  public void updateClob(int columnIndex,Reader reader,long length) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  InverseDistanceWeighting(SpatialGrid sg){  this.sg=sg;}  }
class C{  public AttributeSummarizer(){  useDefaultVisual();  m_visual.setText("AttributeSummarizer");  if (!GraphicsEnvironment.isHeadless()) {    appearanceFinal();  }}  }
class C{  public ArrayList<Value> keys(){  ArrayList<Value> list=New.arrayList(size);  for (  Value k : keys) {    if (k != null && k != ValueNull.DELETED) {      list.add(k);    }  }  return list;}  }
class C{  public static <I>Stream<I> read(InputStream in,Parser<I> ip) throws IOException {  return Utils.readElemens(in,ip);}  }
class C{  public Builder attributes(Map<String,Object> attrs){  impl.attrs=U.sealMap(attrs);  return this;}  }
class C{  public static final long crc64Long(String in){  if (in == null || in.length() == 0) {    return 0;  }  return crc64Long(getBytes(in));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public S1Angle angle(){  if (isEmpty()) {    return S1Angle.radians(-1);  }  return S1Angle.radians(2 * Math.asin(Math.sqrt(0.5 * height)));}  }
class C{  public static String limitQuery(String query,int maxRows,List<Object> varbinds,DBType dbType){  return limitQuery(query,maxRows,0,varbinds,dbType);}  }
class C{  private void adjustActivation(List<VOServiceActivation> activations,int index,boolean active,boolean visible){  VOServiceActivation activation=activations.get(index);  activation.setActive(active);  activation.getCatalogEntries().get(0).setVisibleInCatalog(visible);}  }
class C{  public void moveColumn(int oldIndex,int newIndex){  if ((oldIndex < 0) || (oldIndex >= getColumnCount()) || (newIndex < 0)|| (newIndex >= getColumnCount())) {    throw new IllegalArgumentException("moveColumn() - Index out of range");  }  TableColumn fromColumn=tableColumns.get(oldIndex);  TableColumn toColumn=tableColumns.get(newIndex);  int allColumnsOldIndex=allTableColumns.indexOf(fromColumn);  int allColumnsNewIndex=allTableColumns.indexOf(toColumn);  if (oldIndex != newIndex) {    allTableColumns.removeElementAt(allColumnsOldIndex);    allTableColumns.insertElementAt(fromColumn,allColumnsNewIndex);  }  super.moveColumn(oldIndex,newIndex);}  }
class C{  public void loadGCTraces(String[] fileNames){  mainPanel.loadGCTraces(fileNames);}  }
class C{  public Vector3f cross(Vector2f v){  return new Vector3f(0,0,determinant(v));}  }
class C{  protected void drawGridlines(Graphics2D g2,Rectangle2D dataArea,List angularTicks,List radialTicks){  PolarItemRenderer renderer=getRenderer();  if (renderer == null) {    return;  }  if (isAngleGridlinesVisible()) {    Stroke gridStroke=getAngleGridlineStroke();    Paint gridPaint=getAngleGridlinePaint();    if ((gridStroke != null) && (gridPaint != null)) {      renderer.drawAngularGridLines(g2,this,angularTicks,dataArea);    }  }  if (isRadiusGridlinesVisible()) {    Stroke gridStroke=getRadiusGridlineStroke();    Paint gridPaint=getRadiusGridlinePaint();    if ((gridStroke != null) && (gridPaint != null)) {      List ticks=buildRadialTicks(radialTicks);      renderer.drawRadialGridLines(g2,this,getAxis(),ticks,dataArea);    }  }}  }
class C{  public boolean checkPosConstraint(Sentence s,String posConstraint,MatchResult m,JCas jcas){  Pattern paConstraint=Pattern.compile("group\\(([0-9]+)\\):(.*?):");  for (  MatchResult mr : Toolbox.findMatches(paConstraint,posConstraint)) {    int groupNumber=Integer.parseInt(mr.group(1));    int tokenBegin=s.getBegin() + m.start(groupNumber);    int tokenEnd=s.getBegin() + m.end(groupNumber);    String pos=mr.group(2);    String pos_as_is=getPosFromMatchResult(tokenBegin,tokenEnd,s,jcas);    if (pos_as_is.matches(pos)) {      Logger.printDetail("POS CONSTRAINT IS VALID: pos should be " + pos + " and is "+ pos_as_is);    } else {      return false;    }  }  return true;}  }
class C{  public void stateChanged(ChangeEvent e){  if (tabbedPane.getSelectedIndex() == 0)   this.getRootPane().setDefaultButton(confirmPanelS.getOKButton()); else {    initFindAdvanced();    this.getRootPane().setDefaultButton(confirmPanelA.getOKButton());    advancedTable.requestFocusInWindow();  }}  }
class C{  public void downloadArtwork(MediaFileType type){  MovieArtworkHelper.downloadArtwork(this,type);}  }
class C{  protected int read(byte[] buffer) throws IOException {  return mTiffStream.read(buffer);}  }
class C{  @Override public String toString(){  return new StringBuilder(this.getClass().getName()).append(": ").append(value).append("->").append(WbXmlLiterals.formatUInt8(token)).append(System.getProperty("line.separator")).toString();}  }
class C{  Frame loadFirstFrame(Frame frame) throws IOException {  frame.arc=fst.getFirstArc(frame.arc);  frame.state=0;  return frame;}  }
class C{  protected void addNeuronList(final ArrayList<Neuron> neurons){  for (  Neuron n : neurons) {    addNeuron(n);  }}  }
class C{  public static String toStringAsV30ParamValue(String value){  return toStringAsParamValue(value,sEscapeIndicatorsV30);}  }
class C{  void pushBaseIndentifier(String baseID){  if (null != baseID) {    int posOfHash=baseID.indexOf('#');    if (posOfHash > -1) {      m_fragmentIDString=baseID.substring(posOfHash + 1);      m_shouldProcess=false;    } else     m_shouldProcess=true;  } else   m_shouldProcess=true;  m_baseIdentifiers.push(baseID);}  }
class C{  @Override void incrementTakeSidePutPermitsWithoutNotify(){synchronized (this.permitMon) {    ++this.takeSidePutPermits;  }}  }
class C{  @Override protected void adjustPremoveLabelHighlightsAndArrows(){  String labelText="Premoves: ";synchronized (premoves) {    boolean hasAddedPremove=false;    for (    PremoveInfo info : premoves) {      String premove=(info.isPremoveDrop ? "{" : "") + getPseudoSan(info.fromPiece,info.toPiece,info.fromSquare,info.toSquare) + (info.isPremoveDrop ? "}" : "");      if (!hasAddedPremove) {        labelText+=premove;      } else {        labelText+=" , " + premove;      }      hasAddedPremove=true;      if (getPreferences().getBoolean(HIGHLIGHT_SHOW_ON_MY_PREMOVES)) {        Highlight highlight=new Highlight(info.fromSquare,info.toSquare,getPreferences().getColor(HIGHLIGHT_PREMOVE_COLOR),false);        if (!board.getSquareHighlighter().containsHighlight(highlight)) {          board.getSquareHighlighter().addHighlight(highlight);        }      }      if (getPreferences().getBoolean(ARROW_SHOW_ON_MY_PREMOVES)) {        Arrow arrow=new Arrow(info.fromSquare,info.toSquare,getPreferences().getColor(ARROW_PREMOVE_COLOR),false);        if (!board.getArrowDecorator().containsArrow(arrow)) {          board.getArrowDecorator().addArrow(arrow);        }      }    }    board.getCurrentPremovesLabel().setImage(hasAddedPremove ? Raptor.getInstance().getIcon("redx") : null);    setToolItemEnabled(ToolBarItemKey.CLEAR_PREMOVES,hasAddedPremove);    board.getCurrentPremovesLabel().setText(labelText);  }}  }
class C{  protected static void createTrigger(Connection conn,String schema,String table) throws SQLException {  createOrDropTrigger(conn,schema,table,true);}  }
class C{  public static void main(String[] args){  String[] data;  if (args.length == 0) {    data=new String[3];    data[0]="this is a test";    data[1]="this is another test";    data[2]="and something else";  } else {    data=args.clone();  }  Trie t=new Trie();  for (  String element : data) {    t.add(element);  }  System.out.println(t);}  }
class C{  public DateTime toDateTimeISO(){  if (getChronology() == ISOChronology.getInstance()) {    return this;  }  return super.toDateTimeISO();}  }
class C{  public UUID(long mostSigBits,long leastSigBits){  this.mostSigBits=mostSigBits;  this.leastSigBits=leastSigBits;  init();}  }
class C{  @DSComment("not sensitive/not an action") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:06.201 -0500",hash_original_method="F9A2694D9D8F1C73F4893642416A48B8",hash_generated_method="F30432BF67CDBC71F94AD1152C117E44") public TableRow(Context context){  super(context);  initTableRow();}  }
class C{  public Where<T,ID> ne(String columnName,Object value) throws SQLException {  addClause(new SimpleComparison(columnName,findColumnFieldType(columnName),value,SimpleComparison.NOT_EQUAL_TO_OPERATION));  return this;}  }
class C{  public void quantize8x8(double[][] transform){  for (int i=0; i < NJPEG; i++) {    for (int j=0; j < NJPEG; j++) {      transform[i][j]=round(transform[i][j] / this.Quantum[i][j]);    }  }}  }
class C{  public boolean visitVariableRef(ExpressionOwner owner,Variable var){  m_isAbs=false;  return true;}  }
class C{  public CertificateExpiredException(String message){  super(message);}  }
class C{  public void cmp(int size,Register x,int y){  if (y < 0) {    super.adds(size,zr,x,-y);  } else {    super.subs(size,zr,x,y);  }}  }
class C{  private ChartDatasetFactory(){}  }
class C{  void initDialogBgPainter(Painter p,Form previousForm){  if (p instanceof BGPainter && ((BGPainter)p).getPreviousForm() != null) {    ((BGPainter)p).setPreviousForm(previousForm);  } else {    BGPainter b=new BGPainter(this,p);    getStyle().setBgPainter(b);    b.setPreviousForm(previousForm);  }}  }
class C{  public Builder intermediateBatchSize(final int batchSize){  configuration.setProperty(INTERMEDIATE_BATCH_SIZE_CFG_KEY,batchSize);  return this;}  }
class C{  public boolean isMinXSet(){  return isMinXSet(0);}  }
class C{  protected void processWindowEvent(final WindowEvent e){  super.processWindowEvent(e);  if (e.getID() == WindowEvent.WINDOW_CLOSING) {switch (defaultCloseOperation) {case HIDE_ON_CLOSE:      setVisible(false);    break;case DISPOSE_ON_CLOSE:  dispose();break;case EXIT_ON_CLOSE:System.exit(0);break;case DO_NOTHING_ON_CLOSE:default :}}}  }
class C{  public InfoRegister[] findFolder(User user,Integer bookId,List atts,String entidad) throws ValidationException, SecurityException, BookException, SessionException, AttributesException {  InfoRegister[] result=null;  try {    result=RegisterServices.findFolder(user,bookId,atts,entidad);  } catch (  TecDocException e) {    _logger.error("Impossible to find folder on book: " + bookId,e);    throw new BookException(BookException.ERROR_CANNOT_CREATE_NEW_FOLDER);  }catch (  ParseException e) {    _logger.error("Impossible to find folder on book: " + bookId,e);    throw new BookException(BookException.ERROR_CANNOT_CREATE_NEW_FOLDER);  }catch (  Exception e) {    _logger.error("Impossible to find folder on book: " + bookId,e);    throw new BookException(BookException.ERROR_CANNOT_CREATE_NEW_FOLDER);  }  return result;}  }
class C{  public void receipt(Map headers){  transmit(Command.RECEIPT,headers,null);}  }
class C{  public CSVParser(char separator){  this(separator,DEFAULT_QUOTE_CHARACTER,DEFAULT_ESCAPE_CHARACTER);}  }
class C{  public MBeanServerFileAccessController(String accessFileName,MBeanServer mbs) throws IOException {  this(accessFileName);  setMBeanServer(mbs);}  }
class C{  @LogMessageDoc(level="WARN",message="Module {module} not found or loaded. " + "Not adding configuration option {key} = {value}",explanation="Ignoring a configuration parameter for a " + "module that is not loaded.") protected void parseConfigParameters(Properties prop){  if (prop == null)   return;  Enumeration<?> e=prop.propertyNames();  while (e.hasMoreElements()) {    String key=(String)e.nextElement();    String configValue=null;    int lastPeriod=key.lastIndexOf(".");    String moduleName=key.substring(0,lastPeriod);    String configKey=key.substring(lastPeriod + 1);    String systemKey=System.getProperty(key);    if (systemKey != null) {      configValue=systemKey;    } else {      configValue=prop.getProperty(key);    }    IFloodlightModule mod=moduleNameMap.get(moduleName);    if (mod == null) {      logger.debug("Module {} not found or loaded. " + "Not adding configuration option {} = {}",new Object[]{moduleName,configKey,configValue});    } else {      logger.debug("Adding configuration option {} = {} for module {}",new Object[]{configKey,configValue,moduleName});      floodlightModuleContext.addConfigParam(mod,configKey,configValue);    }  }}  }
class C{  protected Date compute(String dateString,String patternString,String localeString){  if (dateString == null || patternString == null || localeString == null) {    return null;  }  Locale locale=new Locale(localeString);  SimpleDateFormat simpleDateFormatter=null;  Date parsedDate=null;  try {    simpleDateFormatter=new SimpleDateFormat(patternString,locale);    parsedDate=simpleDateFormatter.parse(dateString);  } catch (  IllegalArgumentException e) {    throw new FunctionInputException("invalid_argument.custom_format",getFunctionName());  }catch (  java.text.ParseException e) {    throw new FunctionInputException("invalid_argument.date",getFunctionName());  }  Calendar cal=Calendar.getInstance(locale);  cal.setTime(parsedDate);  return cal.getTime();}  }
class C{  public void pointerPressed(int x,int y){  dragActivated=false;  if (pointerPressedListeners != null && pointerPressedListeners.hasListeners()) {    pointerPressedListeners.fireActionEvent(new ActionEvent(this,ActionEvent.Type.PointerPressed,x,y));  }  clearDrag();  if (isDragAndDropOperation(x,y)) {    int restore=Display.getInstance().getDragStartPercentage();    if (restore > 1) {      restoreDragPercentage=restore;    }    Display.getInstance().setDragStartPercentage(1);  }}  }
class C{  public EntityBomb addTime(int time){  fuseTime=Math.max(fuseTime + time,fuseTime);  return this;}  }
class C{  public void clearValues(){  values.clear();}  }
class C{  @Override public Request pop(boolean delay,CrawlSwitchboard cs,RobotsTxt robots) throws IOException {  tryagain:   while (true)   try {    HostQueue rhq=null;    String rhh=null;synchronized (this) {      if (this.roundRobinHostHashes.size() == 0) {        this.roundRobinHostHashes.addAll(this.queues.keySet());        boolean smallStacksExist=false;        boolean singletonStacksExist=false;        smallsearch:         for (        String s : this.roundRobinHostHashes) {          HostQueue hq=this.queues.get(s);          if (hq != null) {            int size=hq.size();            if (size == 1) {              singletonStacksExist=true;              break smallsearch;            }            if (size <= 10) {              smallStacksExist=true;              break smallsearch;            }          }        }        if (singletonStacksExist || smallStacksExist) {          Iterator<String> i=this.roundRobinHostHashes.iterator();          smallstacks:           while (i.hasNext()) {            if (this.roundRobinHostHashes.size() <= 10)             break smallstacks;            String s=i.next();            HostQueue hq=this.queues.get(s);            if (hq == null) {              i.remove();              continue smallstacks;            }            int delta=Latency.waitingRemainingGuessed(hq.getHost(),hq.getPort(),s,robots,ClientIdentification.yacyInternetCrawlerAgent);            if (delta < 0)             continue;            if (delta >= 1000) {              i.remove();              continue smallstacks;            }            int size=hq.size();            if (singletonStacksExist) {              if (size != 1) {                i.remove();                continue smallstacks;              }            } else {              if (size > 10) {                i.remove();                continue smallstacks;              }            }          }        }        if (this.roundRobinHostHashes.size() == 1) {          if (log.isFine())           log.fine("(re-)initialized the round-robin queue with one host");        } else {          log.info("(re-)initialized the round-robin queue; " + this.roundRobinHostHashes.size() + " hosts.");        }      }      if (this.roundRobinHostHashes.size() == 0)       return null;      if (this.roundRobinHostHashes.size() == 1) {        rhh=this.roundRobinHostHashes.iterator().next();        rhq=this.queues.get(rhh);      }      if (rhq == null) {        TreeMap<Integer,List<String>> fastTree=new TreeMap<>();        mixedstrategy:         for (        String h : this.roundRobinHostHashes) {          HostQueue hq=this.queues.get(h);          if (hq != null) {            int delta=Latency.waitingRemainingGuessed(hq.getHost(),hq.getPort(),h,robots,ClientIdentification.yacyInternetCrawlerAgent) / 200;            if (delta < 0)             delta=0;            List<String> queueHashes=fastTree.get(delta);            if (queueHashes == null) {              queueHashes=new ArrayList<>(2);              fastTree.put(delta,queueHashes);            }            queueHashes.add(h);            List<String> firstEntries=fastTree.firstEntry().getValue();            if (firstEntries.size() > 1) {              int largest=Integer.MIN_VALUE;              for (              String hh : firstEntries) {                HostQueue hhq=this.queues.get(hh);                if (hhq != null) {                  int s=hhq.size();                  if (s > largest) {                    largest=s;                    rhh=hh;                  }                }              }              rhq=this.queues.get(rhh);              break mixedstrategy;            }          }        }        if (rhq == null && fastTree.size() > 0) {          List<String> firstEntries=fastTree.firstEntry().getValue();          assert firstEntries.size() == 1;          rhh=firstEntries.get(0);          rhq=this.queues.get(rhh);        }        List<String> lastEntries=fastTree.size() > 0 ? fastTree.lastEntry().getValue() : null;        if (lastEntries != null) {          for (          String h : lastEntries)           this.roundRobinHostHashes.remove(h);        }      }    }    if (rhq == null) {      this.roundRobinHostHashes.clear();      continue tryagain;    }    this.roundRobinHostHashes.remove(rhh);    long timestamp=System.currentTimeMillis();    Request request=rhq.pop(delay,cs,robots);    long actualwaiting=System.currentTimeMillis() - timestamp;    if (actualwaiting > 1000) {synchronized (this) {        Iterator<String> i=this.roundRobinHostHashes.iterator();        protectcheck:         while (i.hasNext()) {          if (this.roundRobinHostHashes.size() <= 3)           break protectcheck;          String s=i.next();          HostQueue hq=this.queues.get(s);          if (hq == null) {            i.remove();            continue protectcheck;          }          int delta=Latency.waitingRemainingGuessed(hq.getHost(),hq.getPort(),s,robots,ClientIdentification.yacyInternetCrawlerAgent);          if (delta >= 0) {            i.remove();          }        }      }    }    if (rhq.isEmpty()) {synchronized (this) {        this.queues.remove(rhh);      }      rhq.close();    }    if (request == null)     continue tryagain;    return request;  } catch (  ConcurrentModificationException e) {    continue tryagain;  }catch (  IOException e) {    throw e;  }catch (  Throwable e) {    ConcurrentLog.logException(e);    throw new IOException(e.getMessage());  }}  }
class C{  public Builder defaultBackgroundColor(@ColorRes int resId){  this.defaultBackgroundColor=new BackgroundColor(ColorHelper.getColor(context,resId));  return this;}  }
class C{  public boolean isAdaptive(){  return isAdaptive;}  }
class C{  public Select.SelectForExample SELECT(){  return TestTable2.SELECT().selectForExample(this.example);}  }
class C{  private List<TaskActivity> splitOnViewportBounds(List<TaskActivity> activities){  return TaskRendererImpl2.splitOnBounds(activities,getChartModel().getStartDate(),myChartApi.getEndDate());}  }
class C{  public static String utf8Encode(String str,String defultReturn){  if (!isEmpty(str) && str.getBytes().length != str.length()) {    try {      return URLEncoder.encode(str,"UTF-8");    } catch (    UnsupportedEncodingException e) {      return defultReturn;    }  }  return str;}  }
class C{  @Override protected void onChannelInfo(String channel,int userCount,String topic){}  }
class C{  public String next() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  int zzPushbackPosL=zzPushbackPos=-1;  boolean zzWasPushback;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzWasPushback=false;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          zzPushbackPos=zzPushbackPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          zzPushbackPosL=zzPushbackPos;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 2) == 2)         zzPushbackPosL=zzCurrentPosL;        if ((zzAttributes & 1) == 1) {          zzWasPushback=(zzAttributes & 4) == 4;          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;    if (zzWasPushback)     zzMarkedPos=zzPushbackPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 172:{        return (stem(3,"te","ed"));      }case 353:    break;case 284:{    return (stem(1,"a","s"));  }case 354:break;case 89:{return (stem(3,"ide","ed"));}case 355:break;case 121:{return (stem(2,"al","s"));}case 356:break;case 10:{return (null_stem());}case 357:break;case 279:{return (stem(2,"la","s"));}case 358:break;case 33:{return (stem(3,"will",""));}case 359:break;case 67:{return (stem(3,"eel","ed"));}case 360:break;case 165:{return (stem(3,"eal","ed"));}case 361:break;case 169:{return (stem(4,"ake","en"));}case 362:break;case 127:{return (stem(2,"I",""));}case 363:break;case 84:{return (stem(3,"ay","ed"));}case 364:break;case 259:{return (stem(3,"se","ed"));}case 365:break;case 90:{return (stem(3,"ise","ed"));}case 366:break;case 225:{return (stem(3,"ike","ed"));}case 367:break;case 24:{return (ynull_stem());}case 368:break;case 106:{return (stem(3,"ell","ed"));}case 369:break;case 7:{return (stem(1,"us","s"));}case 370:break;case 6:{if (Option(tag_output)) return (get_tag());}case 371:break;case 1:{return (common_noun_stem());}case 372:break;case 65:{return (stem(3,"ly","ed"));}case 373:break;case 62:{return (stem(3,"ive","ed"));}case 374:break;case 336:{return (stem(3,"is","s"));}case 375:break;case 228:{return (stem(5,"eek","ed"));}case 376:break;case 152:{return (stem(3,"ar","ed"));}case 377:break;case 254:{return (stem(4,"ame","ed"));}case 378:break;case 28:{return (stem(3,"see","ed"));}case 379:break;case 143:{return (stem(3,"epe","ed"));}case 380:break;case 16:{return (stem(3,"get","ed"));}case 381:break;case 332:{return (stem(8,"-de-sac","s"));}case 382:break;case 350:{return (stem(12,"-in-the-box","s"));}case 383:break;case 253:{return (stem(5,"ing","ed"));}case 384:break;case 174:{return (stem(2,"i","s"));}case 385:break;case 154:{return (stem(3,"an","ed"));}case 386:break;case 25:{return (stem(3,"red","ed"));}case 387:break;case 46:{return (stem(3,"e","ing"));}case 388:break;case 203:{return (stem(3,"ass","ed"));}case 389:break;case 238:{return (stem(2,"re","s"));}case 390:break;case 60:{return (stem(2,"e","s"));}case 391:break;case 73:{return (stem(3,"o","en"));}case 392:break;case 147:{return (stem(5,"do","ed"));}case 393:break;case 66:{return (stem(3,"all","ed"));}case 394:break;case 120:{return (stem(2,"ra","s"));}case 395:break;case 201:{return (stem(6,"clepe","ed"));}case 396:break;case 55:{return (stem(3,"ear","ed"));}case 397:break;case 58:{return (stem(3,"ome","ed"));}case 398:break;case 47:{return (stem(1,"","ed"));}case 399:break;case 149:{return (stem(3,"eeze","ed"));}case 400:break;case 22:{return (stem(3,"light","ed"));}case 401:break;case 131:{return (stem(3,"y","s"));}case 402:break;case 282:{return (stem(2,"zo","s"));}case 403:break;case 26:{return (stem(3,"run","ed"));}case 404:break;case 40:{return (stem(2,"an","s"));}case 405:break;case 315:{return (stem(3,"ix","ed"));}case 406:break;case 287:{return (stem(4,"g","ing"));}case 407:break;case 52:{return (stem(3,"end","ed"));}case 408:break;case 45:{return (proper_name_stem());}case 409:break;case 50:{return (stem(3,"low","ed"));}case 410:break;case 185:{return (stem(2,"ny","s"));}case 411:break;case 130:{return (stem(3,"y","ed"));}case 412:break;case 99:{return (stem(3,"mite","ed"));}case 413:break;case 288:{return (stem(3,"d","en"));}case 414:break;case 9:{return (stem(2,"e","ed"));}case 415:break;case 95:{return (stem(3,"hoot","ed"));}case 416:break;case 177:{return (stem(2,"so","s"));}case 417:break;case 322:{return (stem(2,"r","s"));}case 418:break;case 220:{return (stem(5,"elt","en"));}case 419:break;case 214:{return (stem(4,"eeze","en"));}case 420:break;case 314:{return (stem(4,"y","ing"));}case 421:break;case 125:{yybegin(noun);yypushback(yylength());return (next());}case 422:break;case 76:{return (stem(3,"ew","en"));}case 423:break;case 108:{return (stem(3,"aw","en"));}case 424:break;case 44:{yybegin(verb);yypushback(yylength());return (next());}case 425:break;case 297:{return (stem(3,"ship","ed"));}case 426:break;case 316:{return (stem(1,"de","s"));}case 427:break;case 345:{return (stem(9,"-mutuel","s"));}case 428:break;case 351:{return (stem(14,"y-in-waiting","s"));}case 429:break;case 5:{return (stem(2,"be",""));}case 430:break;case 64:{return (stem(3,"lee","ed"));}case 431:break;case 35:{return (stem(1,"um","s"));}case 432:break;case 51:{return (stem(3,"reed","ed"));}case 433:break;case 155:{return (stem(3,"ap","ed"));}case 434:break;case 324:{return (stem(2,"te","s"));}case 435:break;case 189:{return (stem(3,"f","s"));}case 436:break;case 192:{return (stem(2,"can",""));}case 437:break;case 286:{return (stem(2,"lio","s"));}case 438:break;case 103:{return (stem(3,"wim","en"));}case 439:break;case 86:{return (stem(3,"ow","en"));}case 440:break;case 304:{return (stem(2,"g","s"));}case 441:break;case 217:{return (semi_reg_stem(1,""));}case 442:break;case 261:{return (stem(2,"gue","s"));}case 443:break;case 135:{return (stem(3,"ei","ed"));}case 444:break;case 32:{return (stem(3,"eat","ed"));}case 445:break;case 12:{return (stem(3,"bid","ed"));}case 446:break;case 206:{return (stem(3,"","en"));}case 447:break;case 335:{return (stem(10,"an-at-arms","s"));}case 448:break;case 126:{return (stem(2,"we",""));}case 449:break;case 233:{return (stem(2,"ron","s"));}case 450:break;case 319:{return (stem(2,"non","s"));}case 451:break;case 188:{return (stem(2,"uum","s"));}case 452:break;case 19:{return (stem(3,"have","ed"));}case 453:break;case 325:{return (stem(3,"ff","s"));}case 454:break;case 240:{return (stem(2,"mum","s"));}case 455:break;case 231:{return (stem(2,"ie","ed"));}case 456:break;case 250:{return (stem(2,"do","s"));}case 457:break;case 341:{return (stem(6,"-doux","s"));}case 458:break;case 285:{return (stem(3,"ly","s"));}case 459:break;case 213:{return (stem(4,"w","ed"));}case 460:break;case 226:{return (stem(4,"eal","en"));}case 461:break;case 242:{return (stem(6,"m.p.","s"));}case 462:break;case 43:{return (stem(2,"","s"));}case 463:break;case 327:{return (stem(9,"an-of-war","s"));}case 464:break;case 85:{return (stem(3,"ie","en"));}case 465:break;case 116:{return (stem(2,"tum","s"));}case 466:break;case 191:{return (stem(5,"eyrir","s"));}case 467:break;case 105:{return (stem(3,"ee","en"));}case 468:break;case 195:{return (stem(2,"will",""));}case 469:break;case 239:{return (stem(2,"ia","s"));}case 470:break;case 244:{return (stem(3,"s","s"));}case 471:break;case 39:{return (stem(2,"uo","s"));}case 472:break;case 215:{return (stem(5,"ight","ed"));}case 473:break;case 119:{return (stem(3,"ouse","s"));}case 474:break;case 339:{return (stem(2,"t","s"));}case 475:break;case 4:{return (stem(2,"be","s"));}case 476:break;case 48:{return (semi_reg_stem(0,"e"));}case 477:break;case 337:{return (stem(8,"-in-law","s"));}case 478:break;case 173:{return (stem(4,".","s"));}case 479:break;case 161:{return (stem(3,"ay","en"));}case 480:break;case 157:{return (stem(3,"se","en"));}case 481:break;case 34:{return (stem(3,"have",""));}case 482:break;case 158:{return (stem(3,"ine","ed"));}case 483:break;case 264:{return (stem(5,"ink","ed"));}case 484:break;case 111:{return (stem(4,"be","ed"));}case 485:break;case 340:{return (stem(9,"-down","ing"));}case 486:break;case 283:{return (stem(3,"en","s"));}case 487:break;case 140:{return (stem(4,"ear","en"));}case 488:break;case 247:{return (stem(4,"they",""));}case 489:break;case 342:{return (stem(8,"-de-lys","s"));}case 490:break;case 110:{return (stem(4,"go","ed"));}case 491:break;case 292:{return (stem(4,"y","ed"));}case 492:break;case 37:{return (stem(2,"a","s"));}case 493:break;case 181:{return (stem(3,"x","s"));}case 494:break;case 56:{return (stem(3,"id","ed"));}case 495:break;case 78:{return (stem(4,"have","s"));}case 496:break;case 54:{return (stem(3,"ear","en"));}case 497:break;case 91:{return (stem(3,"eeve","ed"));}case 498:break;case 71:{return (stem(3,"ild","ed"));}case 499:break;case 334:{return (stem(10,"anservant","s"));}case 500:break;case 194:{return (stem(3,"he",""));}case 501:break;case 243:{return (stem(4,"ex","s"));}case 502:break;case 142:{return (stem(3,"oose","ed"));}case 503:break;case 317:{return (stem(4,"-in","s"));}case 504:break;case 271:{return (stem(6,"ork","ed"));}case 505:break;case 136:{return (stem(3,"eak","ed"));}case 506:break;case 107:{return (stem(3,"ink","ed"));}case 507:break;case 230:{return (stem(3,"a","ed"));}case 508:break;case 133:{return (stem(3,"rn","ed"));}case 509:break;case 312:{return (stem(6,"-up","ed"));}case 510:break;case 148:{return (stem(3,"y","en"));}case 511:break;case 114:{return (stem(2,"um","s"));}case 512:break;case 211:{return (stem(4,"tch","ed"));}case 513:break;case 83:{return (stem(3,"ose","ed"));}case 514:break;case 20:{return (stem(3,"have","s"));}case 515:break;case 96:{return (stem(3,"hit","ed"));}case 516:break;case 117:{return (stem(3,"oot","s"));}case 517:break;case 63:{return (stem(4,"do","s"));}case 518:break;case 92:{return (stem(3,"ing","ed"));}case 519:break;case 235:{return (stem(3,"denum","s"));}case 520:break;case 333:{return (stem(6,"-over","s"));}case 521:break;case 183:{return (stem(1,"s","s"));}case 522:break;case 29:{return (stem(3,"win","ed"));}case 523:break;case 77:{return (stem(3,"eave","ed"));}case 524:break;case 323:{return (stem(7,"-up","ing"));}case 525:break;case 69:{return (stem(3,"eld","ed"));}case 526:break;case 275:{return (stem(4,"yatid","s"));}case 527:break;case 277:{return (stem(1,"o","s"));}case 528:break;case 122:{return (stem(2,"lo","s"));}case 529:break;case 98:{return (stem(3,"lide","ed"));}case 530:break;case 36:{return (stem(2,".","s"));}case 531:break;case 167:{return (stem(3,"and","ed"));}case 532:break;case 212:{return (stem(3,"am","ed"));}case 533:break;case 109:{return (stem(3,"read","ed"));}case 534:break;case 249:{return (stem(2,"have","s"));}case 535:break;case 330:{return (stem(8,"-down","ed"));}case 536:break;case 198:{return (stem(2,"have","ed"));}case 537:break;case 129:{return (stem(3,"","ing"));}case 538:break;case 138:{return (stem(5,"be","ing"));}case 539:break;case 208:{return (stem(4,"te","ing"));}case 540:break;case 305:{return (stem(4,"isee","s"));}case 541:break;case 113:{return (stem(1,"on","s"));}case 542:break;case 112:{return (stem(2,"","ed"));}case 543:break;case 290:{return (stem(4,"y","s"));}case 544:break;case 326:{return (stem(4,"-on","s"));}case 545:break;case 318:{return (stem(8,"onsieur","s"));}case 546:break;case 170:{return (stem(4,"eave","en"));}case 547:break;case 237:{return (stem(3,"us","s"));}case 548:break;case 346:{return (stem(9,"-de-camp","s"));}case 549:break;case 193:{return (stem(3,"she",""));}case 550:break;case 59:{return (stem(3,"raw","ed"));}case 551:break;case 300:{return (stem(2,"cio","s"));}case 552:break;case 352:{return (stem(11,"y-general","s"));}case 553:break;case 303:{return (stem(2,"eum","s"));}case 554:break;case 349:{return (stem(9,"-at-arms","s"));}case 555:break;case 298:{return (stem(2,"ion","s"));}case 556:break;case 348:{return (stem(11,"erfamilias","s"));}case 557:break;case 310:{return (stem(6,"-down","s"));}case 558:break;case 274:{return (stem(1,"x","s"));}case 559:break;case 306:{return (stem(2,"oan","s"));}case 560:break;case 289:{return (stem(5,"eech","ed"));}case 561:break;case 68:{return (stem(3,"row","ed"));}case 562:break;case 278:{return (stem(2,"ro","s"));}case 563:break;case 241:{return (stem(3,"ey","s"));}case 564:break;case 307:{return (stem(2,"ton","s"));}case 565:break;case 2:{return (stem(1,"","s"));}case 566:break;case 31:{return (stem(3,"be",""));}case 567:break;case 218:{return (stem(5,"et","en"));}case 568:break;case 94:{return (stem(3,"hoe","ed"));}case 569:break;case 156:{return (stem(3,"de","en"));}case 570:break;case 38:{return (xnull_stem());}case 571:break;case 343:{return (stem(8,"-de-lis","s"));}case 572:break;case 196:{return (stem(2,"have",""));}case 573:break;case 258:{return (stem(5,"ivy","s"));}case 574:break;case 227:{return (stem(3,"ge","ed"));}case 575:break;case 222:{return (stem(3,"ce","ed"));}case 576:break;case 168:{return (stem(3,"ke","en"));}case 577:break;case 100:{return (stem(3,"pin","ed"));}case 578:break;case 273:{return (stem(2,"no","s"));}case 579:break;case 295:{return (semi_reg_stem(0,"ue"));}case 580:break;case 224:{return (stem(3,"il","ed"));}case 581:break;case 331:{return (stem(2,"l","s"));}case 582:break;case 159:{return (semi_reg_stem(0,""));}case 583:break;case 151:{return (stem(3,"ve","en"));}case 584:break;case 223:{return (stem(5,"ink","en"));}case 585:break;case 137:{return (stem(3,"gin","ed"));}case 586:break;case 272:{return (stem(5,"y","ed"));}case 587:break;case 163:{return (stem(3,"ill","ed"));}case 588:break;case 221:{return (stem(3,"ue","ed"));}case 589:break;case 234:{return (stem(1,"i","s"));}case 590:break;case 175:{return (stem(2,"d","s"));}case 591:break;case 14:{return (stem(3,"do","ed"));}case 592:break;case 53:{return (stem(4,"be","en"));}case 593:break;case 257:{return (stem(5,"ivy","ed"));}case 594:break;case 160:{return (stem(3,"i","ed"));}case 595:break;case 179:{return (stem(1,"e","s"));}case 596:break;case 321:{return (stem(2,"le","s"));}case 597:break;case 266:{return (stem(5,"ead","en"));}case 598:break;case 141:{return (stem(3,"rse","ed"));}case 599:break;case 61:{return (stem(4,"do","en"));}case 600:break;case 162:{return (stem(3,"ite","ed"));}case 601:break;case 216:{return (stem(3,"l","en"));}case 602:break;case 123:{return (stem(4,"ABC","s"));}case 603:break;case 101:{return (stem(3,"peed","ed"));}case 604:break;case 204:{return (stem(4,"eak","en"));}case 605:break;case 23:{return (stem(3,"meet","ed"));}case 606:break;case 328:{return (stem(4,"-by","s"));}case 607:break;case 308:{return (stem(4,"s","s"));}case 608:break;case 301:{return (stem(3,"esis","s"));}case 609:break;case 219:{return (stem(3,"ey","ed"));}case 610:break;case 134:{return (stem(3,"ess","ed"));}case 611:break;case 207:{return (stem(3,"e","en"));}case 612:break;case 329:{return (stem(4,"o","s"));}case 613:break;case 144:{return (stem(4,"are","ed"));}case 614:break;case 139:{return (stem(4,"ind","ed"));}case 615:break;case 164:{return (stem(3,"ick","ed"));}case 616:break;case 145:{return (stem(4,"ie","ing"));}case 617:break;case 102:{return (stem(3,"pit","ed"));}case 618:break;case 176:{return (stem(2,"u","s"));}case 619:break;case 124:{return (stem(2,"to","s"));}case 620:break;case 255:{return (stem(3,"ride","ed"));}case 621:break;case 178:{return (stem(2,"denum","s"));}case 622:break;case 276:{return (stem(4,"sbok","s"));}case 623:break;case 291:{return (stem(6,"ivy","ing"));}case 624:break;case 347:{return (stem(13,"ademoiselle","s"));}case 625:break;case 187:{return (stem(4,"ooth","s"));}case 626:break;case 15:{return (stem(3,"feed","ed"));}case 627:break;case 93:{return (stem(3,"ink","en"));}case 628:break;case 87:{return (stem(3,"ake","ed"));}case 629:break;case 57:{return (stem(3,"lothe","ed"));}case 630:break;case 13:{return (stem(3,"dig","ed"));}case 631:break;case 265:{return (stem(4,"k","ed"));}case 632:break;case 186:{return (stem(2,"po","s"));}case 633:break;case 210:{return (stem(3,"ose","en"));}case 634:break;case 166:{return (stem(3,"ave","ed"));}case 635:break;case 72:{return (stem(3,"ird","ed"));}case 636:break;case 153:{return (stem(3,"in","ed"));}case 637:break;case 199:{return (stem(4,"","ing"));}case 638:break;case 80:{return (stem(3,"en","ed"));}case 639:break;case 82:{return (stem(3,"o","ed"));}case 640:break;case 267:{return (stem(3,"mel","s"));}case 641:break;case 260:{return (stem(4,"-up","s"));}case 642:break;case 8:{return (stem(2,"is","s"));}case 643:break;case 18:{return (stem(3,"hide","ed"));}case 644:break;case 88:{return (stem(3,"ing","en"));}case 645:break;case 245:{return (stem(3,"not",""));}case 646:break;case 269:{return (stem(4,"i","ing"));}case 647:break;case 232:{return (stem(4,"e","ing"));}case 648:break;case 270:{return (stem(4,"a","ing"));}case 649:break;case 128:{return (stem(2,"'s",""));}case 650:break;case 251:{return (condub_stem(3,"","ing"));}case 651:break;case 115:{return (stem(3,"a","s"));}case 652:break;case 309:{return (stem(4,"l","ing"));}case 653:break;case 299:{return (stem(2,"ne","s"));}case 654:break;case 236:{return (stem(3,"ur","s"));}case 655:break;case 190:{return (stem(2,"b","s"));}case 656:break;case 209:{return (stem(5,"uy","ed"));}case 657:break;case 246:{return (stem(3,"shall",""));}case 658:break;case 182:{return (stem(3,"fe","s"));}case 659:break;case 205:{return (stem(2,"","en"));}case 660:break;case 294:{return (stem(5,"ify","s"));}case 661:break;case 296:{return (stem(5,"k","ing"));}case 662:break;case 3:{return (cnull_stem());}case 663:break;case 75:{return (stem(3,"old","ed"));}case 664:break;case 320:{return (stem(4,"ese","s"));}case 665:break;case 280:{return (stem(2,"dum","s"));}case 666:break;case 41:{return (stem(2,"s","s"));}case 667:break;case 311:{return (stem(5,"y","ing"));}case 668:break;case 338:{return (stem(6,"-lit","s"));}case 669:break;case 150:{return (stem(3,"ip","ed"));}case 670:break;case 74:{return (stem(3,"ang","ed"));}case 671:break;case 313:{return (stem(6,"ify","ing"));}case 672:break;case 180:{return (stem(4,"oose","s"));}case 673:break;case 281:{return (stem(4,"belly","s"));}case 674:break;case 268:{return (stem(4,"ge","ing"));}case 675:break;case 104:{return (stem(3,"wim","ed"));}case 676:break;case 171:{return (stem(3,"t","en"));}case 677:break;case 262:{return (stem(4,"ue","ing"));}case 678:break;case 42:{return (stem(2,"vum","s"));}case 679:break;case 118:{return (stem(2,"rum","s"));}case 680:break;case 184:{return (stem(2,"num","s"));}case 681:break;case 97:{return (stem(3,"lay","ed"));}case 682:break;case 263:{return (stem(5,"ell","en"));}case 683:break;case 132:{return (stem(3,"","ed"));}case 684:break;case 248:{return (stem(2,"as",""));}case 685:break;case 11:{return (stem(3,"bite","ed"));}case 686:break;case 146:{return (stem(3,"al","ed"));}case 687:break;case 202:{return (stem(3,"","s"));}case 688:break;case 30:{return (stem(3,"be","ed"));}case 689:break;case 27:{return (stem(3,"sit","ed"));}case 690:break;case 229:{return (stem(5,"each","ed"));}case 691:break;case 344:{return (stem(9,"-a-terre","s"));}case 692:break;case 79:{return (stem(3,"now","ed"));}case 693:break;case 17:{return (stem(3,"gin","en"));}case 694:break;case 256:{return (stem(3,"ie","ed"));}case 695:break;case 70:{return (stem(3,"ee","ed"));}case 696:break;case 81:{return (stem(3,"eep","ed"));}case 697:break;case 197:{return (stem(2,"would",""));}case 698:break;case 49:{return (stem(3,"leed","ed"));}case 699:break;case 21:{return (stem(3,"lead","ed"));}case 700:break;case 252:{return (stem(7,"clepe","ed"));}case 701:break;case 302:{return (stem(4,"eps","s"));}case 702:break;case 293:{return (stem(5,"ify","ed"));}case 703:break;case 200:{return (condub_stem(2,"","ed"));}case 704:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;{return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static void TODO(String module) throws OptimizingCompilerException {  throw new OptimizingCompilerException(module,"Unsupported function in IA32 port");}  }
class C{  static public URI pickHAVarray(Map<URI,Set<URI>> haVarrayToVolumesMap){  if (haVarrayToVolumesMap.size() > 1) {    _log.error("More than one HA Varray in export: " + haVarrayToVolumesMap.keySet().toString());    throw VPlexApiException.exceptions.moreThanOneHAVarrayInExport(haVarrayToVolumesMap.keySet().toString());  }  if (!haVarrayToVolumesMap.keySet().isEmpty()) {    return haVarrayToVolumesMap.keySet().iterator().next();  }  return null;}  }
class C{  private boolean isSilentStart(String value){  boolean result=false;  for (int i=0; i < SILENT_START.length; i++) {    if (value.startsWith(SILENT_START[i])) {      result=true;      break;    }  }  return result;}  }
class C{  public final MutableDouble3D negate(){  x=-x;  y=-y;  z=-z;  return this;}  }
class C{  @Override public boolean canOpenWarm(){  State state=_state;  if (state == State.ACTIVE) {    return true;  } else   if (state.isEnabled()) {    long now=CurrentTime.currentTime();    if (isFailed(now)) {      return false;    }    long firstSuccessTime=_firstSuccessTime;    int warmupState=0;    if (firstSuccessTime > 0) {      warmupState=(int)((now - firstSuccessTime) / _warmupChunkTime);    }    warmupState-=_currentFailCount;    if (warmupState < 0) {      return (_failTime - warmupState * _failChunkTime < now);    } else     if (WARMUP_MAX <= warmupState) {      return true;    }    int connectionMax=WARMUP_CONNECTION_MAX[warmupState];    int idleCount=getIdleCount();    int activeCount=_activeCount.get() + _startingCount.get();    int totalCount=activeCount + idleCount;    return totalCount < connectionMax;  } else {    return false;  }}  }
class C{  public static UndertowFraction createDefaultFraction(){  UndertowFraction fraction=new UndertowFraction();  fraction.server(new Server("default-server").httpListener(new HTTPListener("default").socketBinding("http")).host(new Host("default-host"))).bufferCache(new BufferCache("default")).servletContainer(new ServletContainer("default").websocketsSetting(new WebsocketsSetting()).jspSetting(new JSPSetting())).handlerConfiguration(new HandlerConfiguration());  return fraction;}  }
class C{  public void add(final Array datum){  add(datum,1.0);}  }
class C{  private void loadBPartner(){  checkBPartner();  Vector<Vector<Object>> data=getPaymentData(multiCurrency.isSelected(),dateField.getValue(),paymentTable);  Vector<String> columnNames=getPaymentColumnNames(multiCurrency.isSelected());  paymentTable.clear();  paymentTable.getModel().removeTableModelListener(this);  ListModelTable modelP=new ListModelTable(data);  modelP.addTableModelListener(this);  paymentTable.setData(modelP,columnNames);  setPaymentColumnClass(paymentTable,multiCurrency.isSelected());  data=getInvoiceData(multiCurrency.isSelected(),dateField.getValue(),invoiceTable);  columnNames=getInvoiceColumnNames(multiCurrency.isSelected());  invoiceTable.clear();  invoiceTable.getModel().removeTableModelListener(this);  ListModelTable modelI=new ListModelTable(data);  modelI.addTableModelListener(this);  invoiceTable.setData(modelI,columnNames);  setInvoiceColumnClass(invoiceTable,multiCurrency.isSelected());  calculate(multiCurrency.isSelected());  calculate();}  }
class C{  private static void downloadFile(boolean useDirectDownload,File uploadedFile) throws IOException {  java.io.File parentDir=new java.io.File(DIR_FOR_DOWNLOADS);  if (!parentDir.exists() && !parentDir.mkdirs()) {    throw new IOException("Unable to create parent directory");  }  OutputStream out=new FileOutputStream(new java.io.File(parentDir,uploadedFile.getTitle()));  MediaHttpDownloader downloader=new MediaHttpDownloader(httpTransport,drive.getRequestFactory().getInitializer());  downloader.setDirectDownloadEnabled(useDirectDownload);  downloader.setProgressListener(new FileDownloadProgressListener());  downloader.download(new GenericUrl(uploadedFile.getDownloadUrl()),out);}  }
class C{  @Override public void onTurnReached(int currentTurn){  StoreMessageCommand checkcommand=DBCommandQueue.get().getOneResult(StoreMessageCommand.class,handle);  if (checkcommand == null) {    TurnNotifier.get().notifyInTurns(0,new TurnListenerDecorator(this));    return;  }  boolean characterExists=checkcommand.targetCharacterExists();  String source=checkcommand.getSource();  String target=checkcommand.getTarget();  final Player sourceplayer=SingletonRepository.getRuleProcessor().getPlayer(source);  if (sourceplayer == null) {    return;  }  if (!characterExists) {    sourceplayer.sendPrivateText(NotificationType.ERROR,"postman tells you: Sorry, " + target + " could not be found, so your message cannot be stored.");    return;  }  if (checkcommand.isIgnored()) {    sourceplayer.sendPrivateText("postman tells you: I cannot reach " + target + " on your behalf.");    return;  }  sourceplayer.sendPrivateText("postman tells you: Message accepted for delivery");  return;}  }
class C{  public DrawerBuilder withStatusBarColorRes(@ColorRes int statusBarColorRes){  this.mStatusBarColorRes=statusBarColorRes;  return this;}  }
class C{  private void validateNamespaceCreateRequest(NamespaceCreateRequest request){  request.setNamespaceCode(alternateKeyHelper.validateStringParameter("namespace",request.getNamespaceCode()));}  }
class C{  public static DynamicMessage parseFrom(Descriptor type,CodedInputStream input,ExtensionRegistry extensionRegistry) throws IOException {  return newBuilder(type).mergeFrom(input,extensionRegistry).buildParsed();}  }
class C{  void bindCustomTabsService(Activity activity){  if (mClient != null) {    return;  }  if (TextUtils.isEmpty(getPackageNameToUse(activity))) {    return;  }  mConnection=new ServiceConnection(this);  CustomTabsClient.bindCustomTabsService(activity,sPackageNameToUse,mConnection);}  }
class C{  public <T extends PO>Iterator<T> iterate() throws DBException {  String[] keys=table.getKeyColumns();  StringBuffer sqlBuffer=new StringBuffer(" SELECT ");  for (int i=0; i < keys.length; i++) {    if (i > 0)     sqlBuffer.append(", ");    sqlBuffer.append(keys[i]);  }  sqlBuffer.append(" FROM ").append(table.getTableName());  String sql=buildSQL(sqlBuffer,true);  PreparedStatement pstmt=null;  ResultSet rs=null;  List<Object[]> idList=new ArrayList<Object[]>();  try {    pstmt=DB.prepareStatement(sql,trxName);    rs=createResultSet(pstmt);    while (rs.next()) {      Object[] ids=new Object[keys.length];      for (int i=0; i < ids.length; i++) {        ids[i]=rs.getObject(i + 1);      }      idList.add(ids);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return new POIterator<T>(table,idList,trxName);}  }
class C{  @Override public int hashCode(){  int hashX=((Double)x).hashCode();  int hashY=((Double)y).hashCode();  return 31 * hashX + hashY;}  }
class C{  public void addBookmarkedConference(String name,String jid,boolean isAutoJoin,String nickname,String password) throws XMPPException {  retrieveBookmarks();  BookmarkedConference bookmark=new BookmarkedConference(name,jid,isAutoJoin,nickname,password);  List<BookmarkedConference> conferences=bookmarks.getBookmarkedConferences();  if (conferences.contains(bookmark)) {    BookmarkedConference oldConference=conferences.get(conferences.indexOf(bookmark));    if (oldConference.isShared()) {      throw new IllegalArgumentException("Cannot modify shared bookmark");    }    oldConference.setAutoJoin(isAutoJoin);    oldConference.setName(name);    oldConference.setNickname(nickname);    oldConference.setPassword(password);  } else {    bookmarks.addBookmarkedConference(bookmark);  }  privateDataManager.setPrivateData(bookmarks);}  }
class C{  public void unlockUI(ProcessInfo pi){  ProcessInfoUtil.setLogFromDB(pi);  m_messageText.append("<p><font color=\"").append(pi.isError() ? "#FF0000" : "#0000FF").append("\">** ").append(pi.getSummary()).append("</font></p>");  m_messageText.append(pi.getLogInfo(true));  message.setText(m_messageText.toString());  message.setCaretPosition(message.getDocument().getLength());  m_ids=pi.getIDs();  bOK.setEnabled(true);  this.setEnabled(true);  m_isLocked=false;  dialog.remove(centerPanel);  messagePane.setMaximumSize(null);  dialog.remove(messagePane);  dialog.add(messagePane,BorderLayout.CENTER);  this.validate();  AEnv.showCenterScreen(this);  afterProcessTask();  if (m_IsReport && !pi.isError())   bOK.doClick();  if (m_ShowHelp != null && m_ShowHelp.equals("S"))   bOK.doClick();}  }
class C{  protected void save() throws BackingStoreException {  save(filePath);}  }
class C{  public void putStatic(final Type owner,final String name,final Type type){  fieldInsn(Opcodes.PUTSTATIC,owner,name,type);}  }
class C{  public boolean isShared(){  return shared;}  }
class C{  public void EndExecution(JoinPoint.StaticPart jp){  if (--reentry_count == 0) {    XTraceReport.entering(jp);    baggage=Baggage.swap(baggage);    XTraceReport.left(jp);  }}  }
class C{  public int rowSum(int classindex){  int s=0;  for (int i=0; i < confusion[classindex].length; i++) {    s+=confusion[classindex][i];  }  return s;}  }
class C{  public static ExceptionlessInputStream openCompressedStream(URL url){  if (url.getProtocol().equals("file"))   return openCompressedStream(url.getFile());  ExceptionlessInputStream eis=null;  try {    ZipInputStream zip=new ZipInputStream(url.openStream());    zip.getNextEntry();    eis=new ExceptionlessInputStream(new BufferedInputStream(zip));  } catch (  Exception e) {    System.err.println("Can't open '" + url + "' for input:");    e.printStackTrace();    System.exit(1);  }  return eis;}  }
class C{  public Vertex parseOperatorByteCode(DataInputStream dataStream,Vertex pop,Network network) throws IOException {  Vertex expression=network.createTemporyVertex();  expression.addRelationship(Primitive.INSTANTIATION,Primitive.EXPRESSION);  long id=dataStream.readLong();  Vertex operator=network.findById(id);  if (operator == null) {    return expression;  }  expression.setName(operator.getDataValue());  expression.addRelationship(Primitive.OPERATOR,operator);  id=dataStream.readLong();  if (id == 0) {    return expression;  }  while (id > 0) {    Vertex next=network.findById(id);    if (next == null) {      return expression;    }    parseArgumentsByteCode(expression,dataStream,next,pop,network);    id=dataStream.readLong();  }  return expression;}  }
class C{  public boolean isAuthoritativeAnswer(){  return (_flags & DNSConstants.FLAGS_AA) != 0;}  }
class C{  private static boolean isDirectory(URL url){  String file=url.getFile();  return (file.length() > 0 && file.charAt(file.length() - 1) == '/');}  }
class C{  @Override public void stop(){  CloseableUtils.closeQuietly(cache);  shutdownFunctions.forEach(null);  quietDelete(confFile);  quietDelete(tmpFile);}  }
class C{  public String toString(){  return "KeyDecoder{" + (SparseRowStore.schemaNameUnicodeClean ? "schema=" + getSchemaName() + "," : "") + "primaryKeyType="+ primaryKeyType+ (SparseRowStore.primaryKeyUnicodeClean ? ",primaryKey=" + getPrimaryKey() : "")+ ",col="+ col+ ",timestamp="+ timestamp+ ",key="+ BytesUtil.toString(key)+ "}";}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION__LEFT_OPERAND:    return leftOperand != null;case ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION__OPERATOR:  return operator != OPERATOR_EDEFAULT;case ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION__RIGHT_OPERAND:return rightOperand != null;}return super.eIsSet(featureID);}  }
class C{  public boolean isSslStarted(IoSession session){  SslHandler sslHandler=(SslHandler)session.getAttribute(SSL_HANDLER);  if (sslHandler == null) {    return false;  }synchronized (sslHandler) {    return !sslHandler.isOutboundDone();  }}  }
class C{  public Checksum(byte[] data,int new_cksumType){  cksumType=new_cksumType;  checksum=data;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.987 -0500",hash_original_method="5197A5F113F85D854415B2B6533E1F8C",hash_generated_method="AE455A2594CA87F4AA1FE2262F4153C1") public CrossProcessCursorWrapper(Cursor cursor){  super(cursor);}  }
class C{  @Override public DoubleVal copy(){  return new DoubleVal(d);}  }
class C{  public boolean isVisible(){  return true;}  }
class C{  public void addBookmark(final Address address,final String description){  Preconditions.checkNotNull(address,"Error: Bookmark addresses can't be null");  m_bookmarkManager.addBookmark(new CBookmark(new CAddress(address.toLong()),description));}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof PaintMap)) {    return false;  }  PaintMap that=(PaintMap)obj;  if (this.store.size() != that.store.size()) {    return false;  }  Set keys=this.store.keySet();  Iterator iterator=keys.iterator();  while (iterator.hasNext()) {    Comparable key=(Comparable)iterator.next();    Paint p1=getPaint(key);    Paint p2=that.getPaint(key);    if (!PaintUtilities.equal(p1,p2)) {      return false;    }  }  return true;}  }
class C{  void requestRepaint(){  repaintRequested.set(true);}  }
class C{  private static boolean sonyBadgeContentProviderExists(Context context){  boolean exists=false;  ProviderInfo info=context.getPackageManager().resolveContentProvider(SONY_HOME_PROVIDER_NAME,0);  if (info != null) {    exists=true;  }  return exists;}  }
class C{  public static boolean isAnnotationClassNoModel(Tree.Declaration decl){  return decl instanceof Tree.AnyClass && TreeUtil.hasAnnotation(decl.getAnnotationList(),"annotation",decl.getUnit());}  }
class C{  public static LuaNumber valueOf(long l){  int i=(int)l;  return l == i ? (i <= 255 && i >= -256 ? intValues[i + 256] : (LuaNumber)new LuaInteger(i)) : (LuaNumber)LuaDouble.valueOf(l);}  }
class C{  public String globalInfo(){  return "Reorders attributes for MEKA. Attribute range defines the " + "attributes to use as class attributes.";}  }
class C{  @Override public <T>ServiceBuilderAmp newService(Class<T> type){  Objects.requireNonNull(type);  return new ServiceBuilderImpl<>(this,type);}  }
class C{  @Override public void handleGET(CoapExchange exchange){  String tree=discoverTree(root,exchange.getRequestOptions().getUriQuery());  exchange.respond(ResponseCode.CONTENT,tree,MediaTypeRegistry.APPLICATION_LINK_FORMAT);}  }
class C{  public ContextStatementCollector(Collection<Statement> statements,ValueFactory vf,Resource... contexts){  OpenRDFUtil.verifyContextNotNull(contexts);  if (statements instanceof Model) {    this.namespaces=Namespaces.wrap(((Model)statements).getNamespaces());  } else {    this.namespaces=new LinkedHashMap<String,String>();  }  this.statements=statements;  this.vf=vf;  this.contexts=contexts;}  }
class C{  @RequestMapping(value="/_search/preferences/{query}",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public List<Preferences> search(@PathVariable String query){  return StreamSupport.stream(preferencesSearchRepository.search(queryString(query)).spliterator(),false).collect(Collectors.toList());}  }
class C{  protected EnumLiteralImpl(){  super();}  }
class C{  public CompetitiveNetwork(Network net,int numCompetitiveNeurons,int numInputNeurons,Point2D initialPosition){  super(net);  this.setLabel("Competitive Network");  competitive=new CompetitiveGroup(net,numCompetitiveNeurons);  inputLayer=new NeuronGroup(net,initialPosition,numInputNeurons);  inputLayer.setLayoutBasedOnSize();  if (net == null) {    return;  }  this.addNeuronGroup(competitive);  this.addNeuronGroup(inputLayer);  for (  Neuron neuron : inputLayer.getNeuronList()) {    neuron.setLowerBound(0);  }  inputLayer.setLabel("Input layer");  inputLayer.setClamped(true);  this.connectNeuronGroups(inputLayer,competitive);  for (  Synapse synapse : getSynapseGroup().getAllSynapses()) {    synapse.setLowerBound(0);  }  layoutNetwork();}  }
class C{  private static void douglasPeuckerReduction(ArrayList<GeoPoint> shape,boolean[] marked,double tolerance,int firstIdx,int lastIdx){  if (lastIdx <= firstIdx + 1) {    return;  }  double maxDistance=0.0;  int indexFarthest=0;  GeoPoint firstPoint=shape.get(firstIdx);  GeoPoint lastPoint=shape.get(lastIdx);  for (int idx=firstIdx + 1; idx < lastIdx; idx++) {    GeoPoint point=shape.get(idx);    double distance=orthogonalDistance(point,firstPoint,lastPoint);    if (distance > maxDistance) {      maxDistance=distance;      indexFarthest=idx;    }  }  if (maxDistance > tolerance) {    marked[indexFarthest]=true;    douglasPeuckerReduction(shape,marked,tolerance,firstIdx,indexFarthest);    douglasPeuckerReduction(shape,marked,tolerance,indexFarthest,lastIdx);  }}  }
class C{  public boolean forward(){  if (browser == null || browser.isDisposed())   return false;  boolean forward=browser.forward();  if (!forward) {  }  return forward;}  }
class C{  public void checkFoVHexImageCacheClear(){  boolean darken=GUIPreferences.getInstance().getBoolean(GUIPreferences.FOV_DARKEN);  boolean highlight=GUIPreferences.getInstance().getBoolean(GUIPreferences.FOV_HIGHLIGHT);  if ((game.getPhase() == Phase.PHASE_MOVEMENT) && (darken || highlight)) {    clearHexImageCache();  }}  }
class C{  public LockableViewPager(final Context context,final AttributeSet attrs){  super(context,attrs);}  }
class C{  public void testTwoStages() throws Exception {  TungstenProperties config=helper.createRuntimeWithStore(0);  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  Pipeline pipeline=runtime.getPipeline();  pipeline.start(new MockEventDispatcher());  Future<ReplDBMSHeader> future=pipeline.watchForCommittedSequenceNumber(9,false);  ReplDBMSHeader matchingEvent=future.get(2,TimeUnit.SECONDS);  assertEquals("Applied sequence number matches",9,matchingEvent.getSeqno());  pipeline.shutdown(false);  pipeline.release(runtime);}  }
class C{  public void deleteTipoDocumentoVital(String id){  String qual=new StringBuffer().append(" WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,id)).toString();  deleteVO(qual,TABLE_NAME);}  }
class C{  static public IString[] toIStringArray(String[] strings){  IString[] istrs=new IString[strings.length];  for (int i=0; i < istrs.length; i++) {    istrs[i]=new IString(strings[i]);  }  return istrs;}  }
class C{  @Override public int compare(DiskStorage.Entry lhs,DiskStorage.Entry rhs){  float score1=calculateScore(lhs,now);  float score2=calculateScore(rhs,now);  return score1 < score2 ? 1 : ((score2 == score1) ? 0 : -1);}  }
class C{  public IgfsPath(String path){  A.ensure(!F.isEmpty(path),"'path' is null or empty");  this.path=normalizePath(path);}  }
class C{  public void loadRegistrationProcedure(){switch (mImsAuthentMode) {case GIBA:    if (sLogger.isActivated()) {      sLogger.debug("Load GIBA authentication procedure");    }  mRegistrationProcedure=new GibaRegistrationProcedure();break;case DIGEST:default :if (sLogger.isActivated()) {sLogger.debug("Load HTTP Digest authentication procedure");}mRegistrationProcedure=new HttpDigestRegistrationProcedure();break;}}  }
class C{  public boolean exists(Serializable key){  return getDataStore().hasKey(key);}  }
class C{  public void shuffleFromTo(int from,int to){  if (size == 0) {    return;  }  checkRangeFromTo(from,to,size);  cern.jet.random.Uniform gen=new cern.jet.random.Uniform(new cern.jet.random.engine.DRand(new java.util.Date()));  short tmpElement;  short[] theElements=elements;  int random;  for (int i=from; i < to; i++) {    random=gen.nextIntFromTo(i,to);    tmpElement=theElements[random];    theElements[random]=theElements[i];    theElements[i]=tmpElement;  }}  }
class C{  public boolean complete(){  return getPrincipalId() != null;}  }
class C{  public Comparator<Point2D> distanceToOrder(){  return new DistanceToOrder();}  }
class C{  public void onClick(View v){  if (v.getId() == R.id.btn_speak) {    startVoiceRecognitionActivity();  }}  }
class C{  public void mergeSymLabels(){  for (Iterator it=iterator(); it.hasNext(); ) {    DirectedEdge de=(DirectedEdge)it.next();    Label label=de.getLabel();    label.merge(de.getSym().getLabel());  }}  }
class C{  protected void finalize(){  this.stopStack();}  }
class C{  static String isDotSuper(ASTree target){  if (target instanceof Expr) {    Expr e=(Expr)target;    if (e.getOperator() == '.') {      ASTree right=e.oprand2();      if (right instanceof Keyword && ((Keyword)right).get() == SUPER)       return ((Symbol)e.oprand1()).get();    }  }  return null;}  }
class C{  public int numHorizontalFrames(){  return (int)Math.ceil(x_pix_constant / (1536.0));}  }
class C{  static boolean createMethod(Parameter parameter){  FunctionOrValue model=parameter.getModel();  return JvmBackendUtil.createMethod(model);}  }
class C{  public Path findPath(String name){  ArrayList<Loader> loaders=getLoaders();  for (int i=0; i < loaders.size(); i++) {    Loader loader=loaders.get(i);    Path path=loader.getPath(name);    if (path != null && path.canRead()) {      return path;    }  }  return null;}  }
class C{  @OnSave void disallowUnshardedSaves(){  if (!isShard) {    throw new UnshardedSaveException();  }}  }
class C{  public static byte[] decode(byte[] source) throws java.io.IOException {  byte[] decoded=null;  decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  return decoded;}  }
class C{  @Override public BitcoinPacketHeader deserializeHeader(ByteBuffer in) throws ProtocolException, IOException {  return new BitcoinPacketHeader(in);}  }
class C{  public static RawTypeSubstitution loadRawTypeSubstitution(final SQLProvider provider,final INaviModule module,final BigInteger address,final Integer position,final Integer expressionId) throws CouldntLoadDataException {  Preconditions.checkNotNull(provider,"Error: provider argument can not be null");  Preconditions.checkNotNull(module,"Error: module argument can not be null");  Preconditions.checkNotNull(address,"Error: address argument can not be null");  Preconditions.checkNotNull(position,"Error: position argument can not be null");  Preconditions.checkNotNull(expressionId,"Error: expressionId argument can not be null");  final String query=" SELECT * FROM load_type_substitution(?, ?, ?, ?) ";  try {    final PreparedStatement statement=provider.getConnection().getConnection().prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);    statement.setInt(1,module.getConfiguration().getId());    statement.setObject(2,address,Types.BIGINT);    statement.setInt(3,position);    statement.setInt(4,expressionId);    final ResultSet resultSet=statement.executeQuery();    try {      while (resultSet.next()) {        if (resultSet.first()) {          final int baseTypeId=resultSet.getInt("base_type_id");          final Array arr=resultSet.getArray("path");          final Integer[] path=resultSet.wasNull() ? new Integer[0] : (Integer[])arr.getArray();          Integer offset=resultSet.getInt("offset");          if (resultSet.wasNull()) {            offset=null;          }          return new RawTypeSubstitution(new CAddress(address),position,expressionId,baseTypeId,path,offset);        }      }    }  finally {      resultSet.close();      statement.close();    }  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }  throw new CouldntLoadDataException("Error: could not load single type substitution from the database.");}  }
class C{  public ExecutionEntry createExecutionEntry(){  ExecutionEntryImpl executionEntry=new ExecutionEntryImpl();  return executionEntry;}  }
class C{  public Point2D.Double[] toPolygonArray(){  Point2D.Double[] points=new Point2D.Double[size()];  for (int i=0, n=size(); i < n; i++) {    points[i]=new Point2D.Double(get(i).x[0],get(i).y[0]);  }  return points;}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){  return execCommand(new String[]{command},isRoot,isNeedResultMsg);}  }
class C{  protected static Vec4 interpolate(Vec4 bL,Vec4 bR,Vec4 tR,Vec4 tL,double xDec,double yDec){  double pos=xDec + yDec;  if (pos == 1) {    return new Vec4(tL.x * yDec + bR.x * xDec,tL.y * yDec + bR.y * xDec,tL.z * yDec + bR.z * xDec);  } else   if (pos > 1) {    Vec4 horizontalVector=(tL.subtract3(tR)).multiply3(1 - xDec);    Vec4 verticalVector=(bR.subtract3(tR)).multiply3(1 - yDec);    return tR.add3(horizontalVector).add3(verticalVector);  } else {    Vec4 horizontalVector=(bR.subtract3(bL)).multiply3(xDec);    Vec4 verticalVector=(tL.subtract3(bL)).multiply3(yDec);    return bL.add3(horizontalVector).add3(verticalVector);  }}  }
class C{  public static Ignite start(InputStream springCfgStream) throws IgniteException {  try {    return IgnitionEx.start(springCfgStream);  } catch (  IgniteCheckedException e) {    throw U.convertException(e);  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public CLIOutputWithRevisionResponse commit(final CommitRequest request) throws IOException, SubversionException {  final File projectPath=new File(request.getProjectPath());  final List<String> cliArgs=defaultArgs();  addFlag(cliArgs,"--keep-changelists",request.isKeepChangeLists());  addFlag(cliArgs,"--no-unlock",request.isKeepLocks());  cliArgs.add("commit");  cliArgs.add("-m");  cliArgs.add(request.getMessage());  final CommandLineResult result=runCommand(null,cliArgs,projectPath,addWorkingCopyPathIfNecessary(request.getPaths()));  return DtoFactory.getInstance().createDto(CLIOutputWithRevisionResponse.class).withCommand(result.getCommandLine().toString()).withRevision(SubversionUtils.getCommitRevision(result.getStdout())).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  public CipherTextIvMac(String base64IvAndCiphertext){  String[] civArray=base64IvAndCiphertext.split(":");  if (civArray.length != 3) {    throw new IllegalArgumentException("Cannot parse iv:ciphertext:mac");  } else {    iv=Base64.decode(civArray[0],BASE64_FLAGS);    mac=Base64.decode(civArray[1],BASE64_FLAGS);    cipherText=Base64.decode(civArray[2],BASE64_FLAGS);  }}  }
class C{  private static int bitCount(long val){  val-=(val & 0xaaaaaaaaaaaaaaaaL) >>> 1;  val=(val & 0x3333333333333333L) + ((val >>> 2) & 0x3333333333333333L);  val=(val + (val >>> 4)) & 0x0f0f0f0f0f0f0f0fL;  val+=val >>> 8;  val+=val >>> 16;  return ((int)(val) + (int)(val >>> 32)) & 0xff;}  }
class C{  public AccessibleRelationSet(AccessibleRelation[] relations){  if (relations.length != 0) {    this.relations=new Vector(relations.length);    for (int i=0; i < relations.length; i++) {      add(relations[i]);    }  }}  }
class C{  public final WritableRaster filter(Raster src,WritableRaster dst){  int numBands=src.getNumBands();  int width=src.getWidth();  int height=src.getHeight();  int[] srcPix=null;  int step=0;  int tidx=0;  if (dst == null) {    dst=createCompatibleDestRaster(src);  } else   if (height != dst.getHeight() || width != dst.getWidth()) {    throw new IllegalArgumentException("Width or height of Rasters do not " + "match");  } else   if (numBands != dst.getNumBands()) {    throw new IllegalArgumentException("Number of bands in src " + numBands + " does not equal number of bands in dest "+ dst.getNumBands());  }  if (length != 1 && length != src.getNumBands()) {    throw new IllegalArgumentException("Number of scaling constants " + "does not equal the number of" + " of bands in the src raster");  }  if (ImagingLib.filter(this,src,dst) != null) {    return dst;  }  if (canUseLookup(src,dst)) {    int srcNgray=(1 << srcNbits);    int dstNgray=(1 << dstNbits);    if (dstNgray == 256) {      ByteLookupTable lut=createByteLut(scaleFactors,offsets,numBands,srcNgray);      LookupOp op=new LookupOp(lut,hints);      op.filter(src,dst);    } else {      ShortLookupTable lut=createShortLut(scaleFactors,offsets,numBands,srcNgray);      LookupOp op=new LookupOp(lut,hints);      op.filter(src,dst);    }  } else {    if (length > 1) {      step=1;    }    int sminX=src.getMinX();    int sY=src.getMinY();    int dminX=dst.getMinX();    int dY=dst.getMinY();    int sX;    int dX;    int nbits;    int dstMax[]=new int[numBands];    int dstMask[]=new int[numBands];    SampleModel dstSM=dst.getSampleModel();    for (int z=0; z < numBands; z++) {      nbits=dstSM.getSampleSize(z);      dstMax[z]=(1 << nbits) - 1;      dstMask[z]=~(dstMax[z]);    }    int val;    for (int y=0; y < height; y++, sY++, dY++) {      dX=dminX;      sX=sminX;      for (int x=0; x < width; x++, sX++, dX++) {        srcPix=src.getPixel(sX,sY,srcPix);        tidx=0;        for (int z=0; z < numBands; z++, tidx+=step) {          val=(int)(srcPix[z] * scaleFactors[tidx] + offsets[tidx]);          if ((val & dstMask[z]) != 0) {            if (val < 0) {              val=0;            } else {              val=dstMax[z];            }          }          srcPix[z]=val;        }        dst.setPixel(dX,dY,srcPix);      }    }  }  return dst;}  }
class C{  public void init(NameLocationPair origin){  myTfUrl.setText(origin.myName);  myTfPath.setText(origin.myLocation);  myTfShared=origin.myShared;}  }
class C{  public PcSearchParamEditor(){}  }
class C{  public static void writeDataColumn(List<? extends Number> data,String outputPath){  File file=new File(outputPath);  try {    file.createNewFile();  } catch (  IOException e1) {    e1.printStackTrace();    System.exit(0);  }  try {    BufferedWriter writer=new BufferedWriter(new FileWriter(file));    for (    Number value : data) {      writer.write(value.toString() + "\n");    }    writer.close();  } catch (  IOException e) {    e.printStackTrace();    System.exit(0);  }}  }
class C{  public static int computeMessageSetExtensionSize(final int fieldNumber,final MessageLite value){  return computeTagSize(WireFormat.MESSAGE_SET_ITEM) * 2 + computeUInt32Size(WireFormat.MESSAGE_SET_TYPE_ID,fieldNumber) + computeMessageSize(WireFormat.MESSAGE_SET_MESSAGE,value);}  }
class C{  public TrieNode(char c){  this(new Character(c));}  }
class C{  public static YearMonth fromCalendarFields(Calendar calendar){  if (calendar == null) {    throw new IllegalArgumentException("The calendar must not be null");  }  return new YearMonth(calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH) + 1);}  }
class C{  public static String gerundForm(final String word){  if (word.length() > 2) {    char last=word.charAt(word.length() - 1);    if (last == 'y' || last == 'w') {      return word + "ing";    } else     if (isVowel(last)) {      return word.substring(0,word.length() - 1) + "ing";    } else     if (isVowel(word.charAt(word.length() - 2))) {      return word + word.charAt(word.length() - 1) + "ing";    }  }  return word + "ing";}  }
class C{  public boolean containsKey(Object key){  return internalMap.containsKey(key);}  }
class C{  public void writeExif(InputStream jpegStream,OutputStream exifOutStream) throws IOException {  if (jpegStream == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  doExifStreamIO(jpegStream,s);  s.flush();}  }
class C{  public static long[] hash(byte[] key,long seed){  HashState hashState=new HashState(seed,seed);  final int bytes=key.length;  final int nblocks=bytes >> 4;  for (int i=0; i < nblocks; i++) {    long k1=getLong(key,16 * i,8);    long k2=getLong(key,(16 * i) + 8,8);    hashState.blockMix128(k1,k2);  }  int tail=nblocks * 16;  int rem=bytes - tail;  long k1;  long k2;  if (rem > 8) {    k1=getLong(key,tail,8);    k2=getLong(key,tail + 8,rem - 8);  } else {    k1=(rem == 0) ? 0 : getLong(key,tail,rem);    k2=0;  }  return hashState.finalMix128(k1,k2,bytes);}  }
class C{  public Document read(InputStream stream) throws Exception {  m_Document=getBuilder().parse(stream);  return getDocument();}  }
class C{  public ArrayList<DataPoint> asArrayList(){  return new ArrayList<DataPoint>(list);}  }
class C{  public Keyboard(Context context,int layoutTemplateResId,CharSequence characters,int columns,int horizontalPadding){  this(context,layoutTemplateResId);  int x=0;  int y=0;  int column=0;  mTotalWidth=0;  Row row=new Row(this);  row.defaultHeight=mDefaultHeight;  row.defaultWidth=mDefaultWidth;  row.defaultHorizontalGap=mDefaultHorizontalGap;  row.verticalGap=mDefaultVerticalGap;  row.rowEdgeFlags=EDGE_TOP | EDGE_BOTTOM;  final int maxColumns=columns == -1 ? Integer.MAX_VALUE : columns;  for (int i=0; i < characters.length(); i++) {    char c=characters.charAt(i);    if (column >= maxColumns || x + mDefaultWidth + horizontalPadding > mDisplayWidth) {      x=0;      y+=mDefaultVerticalGap + mDefaultHeight;      column=0;    }    final Key key=new Key(row);    key.x=x;    key.y=y;    key.label=String.valueOf(c);    key.codes=new int[]{c};    column++;    x+=key.width + key.gap;    mKeys.add(key);    row.mKeys.add(key);    if (x > mTotalWidth) {      mTotalWidth=x;    }  }  mTotalHeight=y + mDefaultHeight;  rows.add(row);}  }
class C{  private static void create1Supplier() throws Exception {  supplierList=new LinkedList<VOOrganization>();  spService_SupplierList=new LinkedList<ServiceProvisioningService>();  mpService_SupplierList=new LinkedList<MarketplaceService>();  accService_SupplierList=new LinkedList<AccountService>();  VOOrganization supplier=setup.createSupplier("supplier1");  supplierList.add(supplier);  mpService_SupplierList.add(ServiceFactory.getDefault().getMarketPlaceService(setup.getSupplierUserKey(),WebserviceTestBase.DEFAULT_PASSWORD));  accService_SupplierList.add(ServiceFactory.getDefault().getAccountService(setup.getSupplierUserKey(),WebserviceTestBase.DEFAULT_PASSWORD));  supplier.setLocale("de");  VOUserDetails userDetails=setup.getIdentitySrvAsSupplier().getCurrentUserDetails();  userDetails.setLocale("de");  setup.getAccountServiceAsSupplier().updateAccountInformation(supplier,userDetails,null,null);  spService_SupplierList.add(ServiceFactory.getDefault().getServiceProvisioningService(setup.getSupplierUserKey(),WebserviceTestBase.DEFAULT_PASSWORD));  searchService_Supplier=ServiceFactory.getDefault().getSearchService(Long.toString(userDetails.getKey()),WebserviceTestBase.DEFAULT_PASSWORD);}  }
class C{  protected queryData queryLastApp(SQLiteDatabase db,String app_id,String content_type){  String sql="select install_order, package_name, class_name, " + " app_type, need_signature, further_processing" + " from " + APPID_TABLE_NAME + " where x_wap_application=\'"+ app_id+ "\'"+ " and content_type=\'"+ content_type+ "\'"+ " order by install_order desc";  if (DEBUG_SQL)   Log.v(LOG_TAG,"sql: " + sql);  Cursor cur=db.rawQuery(sql,null);  queryData ret=null;  if (cur.moveToNext()) {    ret=new queryData();    ret.installOrder=cur.getInt(cur.getColumnIndex("install_order"));    ret.packageName=cur.getString(cur.getColumnIndex("package_name"));    ret.className=cur.getString(cur.getColumnIndex("class_name"));    ret.appType=cur.getInt(cur.getColumnIndex("app_type"));    ret.needSignature=cur.getInt(cur.getColumnIndex("need_signature"));    ret.furtherProcessing=cur.getInt(cur.getColumnIndex("further_processing"));  }  cur.close();  return ret;}  }
class C{  protected boolean skipTile(DrawContext dc,Sector sector){  Sector limits=((Globe2D)dc.getGlobe()).getProjection().getProjectionLimits();  if (limits == null || limits.equals(Sector.FULL_SPHERE))   return false;  return !sector.intersectsInterior(limits);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:03.178 -0500",hash_original_method="3191286FB0D548047357A5725F784799",hash_generated_method="04B816B88698BF566D662C4705F90071") public ProgramFragmentFixedFunction create(){  InternalBuilder sb=new InternalBuilder(mRS);  mNumTextures=0;  for (int i=0; i < MAX_TEXTURE; i++) {    if (mSlots[i] != null) {      mNumTextures++;    }  }  buildShaderString();  sb.setShader(mShader);  Type constType=null;  if (!mVaryingColorEnable) {    Element.Builder b=new Element.Builder(mRS);    b.add(Element.F32_4(mRS),"Color");    Type.Builder typeBuilder=new Type.Builder(mRS,b.create());    typeBuilder.setX(1);    constType=typeBuilder.create();    sb.addConstant(constType);  }  for (int i=0; i < mNumTextures; i++) {    sb.addTexture(TextureType.TEXTURE_2D);  }  ProgramFragmentFixedFunction pf=sb.create();  pf.mTextureCount=MAX_TEXTURE;  if (!mVaryingColorEnable) {    Allocation constantData=Allocation.createTyped(mRS,constType);    FieldPacker fp=new FieldPacker(16);    Float4 f4=new Float4(1.f,1.f,1.f,1.f);    fp.addF32(f4);    constantData.setFromFieldPacker(0,fp);    pf.bindConstants(constantData,0);  }  return pf;}  }
class C{  public static void v(String tag,String msg){  v(tag,msg,null);}  }
class C{  private void init(){  eatTheRest=false;  tokens.clear();}  }
class C{  static void verifyClaimsNoticeIfAndOnlyIfNeeded(InternetDomainName domainName,boolean hasSignedMarks,boolean hasClaimsNotice) throws EppException {  boolean isInClaimsList=ClaimsListShard.get().getClaimKey(domainName.parts().get(0)) != null;  if (hasClaimsNotice && !isInClaimsList) {    throw new UnexpectedClaimsNoticeException(domainName.toString());  }  if (!hasClaimsNotice && isInClaimsList && !hasSignedMarks) {    throw new MissingClaimsNoticeException(domainName.toString());  }}  }
class C{  @SuppressWarnings("rawtypes") protected void notifyTelegram(char[] buffer){  Iterator it=TelegramListeners.iterator();  Object currListener;  while (it.hasNext()) {    currListener=it.next();    if (currListener != null && currListener instanceof TelegramListener) {      ((TelegramListener)currListener).handleTelegram(buffer);    }  }}  }
class C{  void prepareDisplayTaskFor(ImageAware imageAware,String memoryCacheKey){  cacheKeysForImageAwares.put(imageAware.getId(),memoryCacheKey);}  }
class C{  public static void onFooterDrawerItemClick(DrawerBuilder drawer,IDrawerItem drawerItem,View v,Boolean fireOnClick){  boolean checkable=!(drawerItem != null && drawerItem instanceof Selectable && !drawerItem.isSelectable());  if (checkable) {    drawer.resetStickyFooterSelection();    v.setActivated(true);    v.setSelected(true);    drawer.getAdapter().deselect();    if (drawer.mStickyFooterView != null && drawer.mStickyFooterView instanceof LinearLayout) {      LinearLayout footer=(LinearLayout)drawer.mStickyFooterView;      for (int i=0; i < footer.getChildCount(); i++) {        if (footer.getChildAt(i) == v) {          drawer.mCurrentStickyFooterSelection=i;          break;        }      }    }  }  if (fireOnClick != null) {    boolean consumed=false;    if (fireOnClick) {      if (drawerItem instanceof AbstractDrawerItem && ((AbstractDrawerItem)drawerItem).getOnDrawerItemClickListener() != null) {        consumed=((AbstractDrawerItem)drawerItem).getOnDrawerItemClickListener().onItemClick(null,-1,drawerItem);      }      if (drawer.mOnDrawerItemClickListener != null) {        consumed=drawer.mOnDrawerItemClickListener.onItemClick(v,-1,drawerItem);      }    }    if (!consumed) {      drawer.closeDrawerDelayed();    }  }}  }
class C{  public void speakButtonClicked(View v){  startVoiceRecognitionActivity();}  }
class C{  public static void cycleRepeat(){  try {    if (musicPlaybackService != null) {switch (musicPlaybackService.getRepeatMode()) {case MusicPlaybackService.REPEAT_NONE:        musicPlaybackService.setRepeatMode(MusicPlaybackService.REPEAT_ALL);      break;case MusicPlaybackService.REPEAT_ALL:    musicPlaybackService.setRepeatMode(MusicPlaybackService.REPEAT_CURRENT);  if (musicPlaybackService.getShuffleMode() != MusicPlaybackService.SHUFFLE_NONE) {    musicPlaybackService.setShuffleMode(MusicPlaybackService.SHUFFLE_NONE);  }break;default :musicPlaybackService.setRepeatMode(MusicPlaybackService.REPEAT_NONE);break;}}} catch (final RemoteException ignored) {}}  }
class C{  protected boolean isNextCharacterEscapable(String nextLine,boolean inQuotes,int i){  return inQuotes && nextLine.length() > (i + 1) && isCharacterEscapable(nextLine.charAt(i + 1));}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 168) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  private int _writeGenericEscape(int charToEscape,int outputPtr) throws IOException {  final byte[] bbuf=_outputBuffer;  bbuf[outputPtr++]=BYTE_BACKSLASH;  bbuf[outputPtr++]=BYTE_u;  if (charToEscape > 0xFF) {    int hi=(charToEscape >> 8) & 0xFF;    bbuf[outputPtr++]=HEX_CHARS[hi >> 4];    bbuf[outputPtr++]=HEX_CHARS[hi & 0xF];    charToEscape&=0xFF;  } else {    bbuf[outputPtr++]=BYTE_0;    bbuf[outputPtr++]=BYTE_0;  }  bbuf[outputPtr++]=HEX_CHARS[charToEscape >> 4];  bbuf[outputPtr++]=HEX_CHARS[charToEscape & 0xF];  return outputPtr;}  }
class C{  private void userFlag(final boolean userFlag){  flags=Bits.set(flags,USERFLAG_BIT,userFlag);}  }
class C{  private synchronized void endMyTurn(){  final Entity ce=ce();  disableButtons();  Entity next=clientgui.getClient().getGame().getNextEntity(clientgui.getClient().getGame().getTurnIndex());  if ((IGame.Phase.PHASE_MOVEMENT == clientgui.getClient().getGame().getPhase()) && (null != next) && (null != ce)&& (next.getOwnerId() != ce.getOwnerId())) {    clientgui.setDisplayVisible(false);  }  cen=Entity.NONE;  clientgui.getBoardView().select(null);  clientgui.getBoardView().highlight(null);  clientgui.getBoardView().setHighlightColor(Color.white);  clientgui.getBoardView().cursor(null);  clientgui.getBoardView().selectEntity(null);  clientgui.setSelectedEntityNum(Entity.NONE);  clientgui.bv.clearMovementData();}  }
class C{  public boolean containsKey(int key){  return indexOfKey(key) >= 0;}  }
class C{  public void stopListening(){  if (current != null) {    ReceiverThread t=current;    current=null;    t.closeJmsResources(true);  }  tm.close();  active=false;}  }
class C{  public long end_data(){  return Long.parseLong(fields[45]);}  }
class C{  public LoginException(String msg){  super(msg);}  }
class C{  public <E extends T>E max(E a,E b,E c,E... rest){  E maxSoFar=max(max(a,b),c);  for (  E r : rest) {    maxSoFar=max(maxSoFar,r);  }  return maxSoFar;}  }
class C{  void clearParserHighlights(){  for (int i=0; i < parserHighlights.size(); i++) {    Object tag=parserHighlights.get(i);    if (tag instanceof LayeredHighlightInfo) {      LayeredHighlightInfo lhi=(LayeredHighlightInfo)tag;      if (lhi.width > 0 && lhi.height > 0) {        textArea.repaint(lhi.x,lhi.y,lhi.width,lhi.height);      }    } else {      HighlightInfo info=(HighlightInfo)tag;      TextUI ui=textArea.getUI();      ui.damageRange(textArea,info.getStartOffset(),info.getEndOffset());    }  }  parserHighlights.clear();}  }
class C{  protected Anonymous_inlineStateMachine_1_Impl(){  super();}  }
class C{  private void socksConnect(InetAddress applicationServerAddress,int applicationServerPort,int timeout) throws IOException {  try {    IoBridge.connect(fd,socksGetServerAddress(),socksGetServerPort(),timeout);  } catch (  Exception e) {    throw new SocketException("SOCKS connection failed",e);  }  socksRequestConnection(applicationServerAddress,applicationServerPort);  lastConnectedAddress=applicationServerAddress;  lastConnectedPort=applicationServerPort;}  }
class C{  public static boolean checkVolumeForVolumeGroupPartialRequest(DbClient dbClient,Volume volume){  boolean partial=false;  if (volume.checkInternalFlags(Flag.VOLUME_GROUP_PARTIAL_REQUEST)) {    partial=true;  } else {    List<Volume> volumes=new ArrayList<Volume>();    String rgName=volume.getReplicationGroupInstance();    if (volume.isVPlexVolume(dbClient)) {      Volume backedVol=VPlexUtil.getVPLEXBackendVolume(volume,true,dbClient);      if (backedVol != null) {        rgName=backedVol.getReplicationGroupInstance();        if (rgName != null) {          List<Volume> backendVolumes=getVolumesPartOfRG(backedVol.getStorageController(),rgName,dbClient);          for (          Volume backendVolume : backendVolumes) {            Volume vplexVolume=Volume.fetchVplexVolume(dbClient,backendVolume);            volumes.add(vplexVolume);          }        }      }    } else     if (NullColumnValueGetter.isNotNullValue(rgName)) {      volumes=getVolumesPartOfRG(volume.getStorageController(),rgName,dbClient);    }    for (    Volume vol : volumes) {      if (vol.checkInternalFlags(Flag.VOLUME_GROUP_PARTIAL_REQUEST)) {        partial=true;        break;      }    }  }  return partial;}  }
class C{  public LinkedHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  accessOrder=false;}  }
class C{  public void encodeStringArray(String strs[],boolean encodeUTF8) throws EncodeException {  if (strs == null)   return;  for (int i=0; i < strs.length; i++) {    encodeString(strs[i],encodeUTF8);  }}  }
class C{  public void show(Map<String,Status> changedFiles,String revision,Project project){  this.changedFiles=changedFiles;  this.project=project;  this.revision=revision;  view.setEnableCompareButton(false);  view.setEnableExpandCollapseButtons(treeViewEnabled);  view.showDialog();  viewChangedFiles();}  }
class C{  @Override public int hashCode(){  return HashUtilities.hashCode(super.hashCode(),this.stepPoint);}  }
class C{  public Property yearOfEra(){  return new Property(this,getChronology().yearOfEra());}  }
class C{  public TestSetEvent(Object source,Instances testSet,int runNum,int maxRunNum,int setNum,int maxSetNum){  this(source,testSet,setNum,maxSetNum);  m_runNumber=runNum;  m_maxRunNumber=maxRunNum;}  }
class C{  private void searchForCompletedPortal(GlowPlayer player,GlowBlock changed){  for (int i=0; i < 4; i++) {    for (int j=-1; j <= 1; j++) {      GlowBlock center=changed.getRelative(DIRECTION[i],2).getRelative(DIRECTION[(i + 1) % 4],j);      if (isCompletedPortal(center)) {        createPortal(player,center);        return;      }    }  }}  }
class C{  private static boolean doesChangeSetHaveChanges(final List<ChangeSet> changeSets,final int index){  if (changeSets == null || index >= changeSets.size() || changeSets.get(index).getChanges() == null || changeSets.get(index).getChanges().isEmpty()) {    return false;  }  return true;}  }
class C{  private void handleExistingInitiators(StorageSystem storage,ExportMask mask,List<Initiator> initiatorList,TaskCompleter taskCompleter) throws Exception {  CIMObjectPath maskingViewPath=_cimPath.getMaskingViewPath(storage,mask.getMaskName());  CIMInstance maskingViewInstance=_helper.checkExists(storage,maskingViewPath,false,false);  if (maskingViewInstance == null) {    return;  }  CloseableIterator<CIMInstance> assocInits=_helper.getAssociatorInstances(storage,maskingViewPath,null,SmisConstants.CP_SE_STORAGE_HARDWARE_ID,null,null,SmisConstants.PS_STORAGE_ID);  Set<String> existingPortNames=new HashSet<>();  while (assocInits != null && assocInits.hasNext()) {    CIMInstance next=assocInits.next();    String sid=CIMPropertyFactory.getPropertyValue(next,SmisConstants.CP_STORAGE_ID);    existingPortNames.add(sid);  }  Map<String,Initiator> idToInit=new HashMap<>();  for (  Initiator initiator : initiatorList) {    idToInit.put(Initiator.normalizePort(initiator.getInitiatorPort()),initiator);  }  Set<String> preExistingInits=intersection(existingPortNames,idToInit.keySet());  for (  String preExistingInit : preExistingInits) {    Initiator initiator=idToInit.get(preExistingInit);    ((ExportMaskInitiatorCompleter)taskCompleter).addInitiator(initiator.getId());    ExportOperationContext.insertContextOperation(taskCompleter,VmaxExportOperationContext.OPERATION_ADD_EXISTING_INITIATOR_TO_EXPORT_GROUP,initiator.getId());  }}  }
class C{  public static String readOutput(BufferedReader in) throws IOException {  StringBuffer output=new StringBuffer();  String line=null;  while ((line=in.readLine()) != null) {    output.append(line);    output.append(Tools.getLineSeparator());  }  return output.toString();}  }
class C{  public void removeByName(String name){  this.extentTree.removeByName(name);}  }
class C{  @Override public void saveValuesAndFlags(){  try {    if (StringUtils.isBlank(pcTextField.getText())) {      cpuStateValidityFlags.pc=0;    } else {      cpuState.pc=Format.parseIntHexField(pcTextField);      cpuStateValidityFlags.pc=1;    }    if (StringUtils.isBlank(ilmTextField.getText())) {      ((FrCPUState)cpuStateValidityFlags).setILM(0,false);    } else {      ((FrCPUState)cpuState).setILM(Format.parseIntBinaryField(ilmTextField,true),false);      ((FrCPUState)cpuStateValidityFlags).setILM(Integer.parseInt(ilmTextField.getText().replace('0','1').replace('?','0'),2),false);    }    if (StringUtils.isBlank(scrTextField.getText())) {      ((FrCPUState)cpuStateValidityFlags).setSCR(0);    } else {      ((FrCPUState)cpuState).setSCR(Format.parseIntBinaryField(scrTextField,true));      ((FrCPUState)cpuStateValidityFlags).setSCR(Integer.parseInt(scrTextField.getText().replace('0','1').replace('?','0'),2));    }    if (StringUtils.isBlank(ccrTextField.getText())) {      ((FrCPUState)cpuStateValidityFlags).setCCR(0);    } else {      ((FrCPUState)cpuState).setCCR(Format.parseIntBinaryField(ccrTextField,true));      ((FrCPUState)cpuStateValidityFlags).setCCR(Integer.parseInt(ccrTextField.getText().replace('0','1').replace('?','0'),2));    }    for (int i=0; i < regTextFields.length; i++) {      dumpFieldToRegister(regTextFields[i],i);    }  } catch (  NumberFormatException e) {    System.err.println(e.getClass().getName() + " " + e.getMessage());  }}  }
class C{  public PollingWait timeoutAfter(long timeAmount,@Nonnull TimeUnit timeUnit){  if (timeAmount <= 0) {    throw new IllegalArgumentException("Invalid timeAmount: " + timeAmount + " -- must be greater than 0");  }  timeoutMillis=timeUnit.toMillis(timeAmount);  return this;}  }
class C{  public void moveTipTo(CodeReviewCommit newTip,ObjectId mergedFrom){  checkArgument(newTip != null);  branchTip=newTip;  mergeResults.put(mergedFrom,newTip.copy());}  }
class C{  public static @CheckForNull ClassDescriptor createClassDescriptorFromFieldSignature(String signature){  int start=signature.indexOf('L');  if (start < 0) {    return null;  }  int end=signature.indexOf(';',start);  if (end < 0) {    return null;  }  return createClassDescriptor(signature.substring(start + 1,end));}  }
class C{  public void sync() throws StorageFault {  final String methodName="sync(): ";  log.debug(methodName + "Entry");  try {    log.trace(methodName + "calling syncmanger syncAll()");    _syncManager.syncAll();  } catch (  SOSFailure e) {    log.error(methodName + "StorageOSFailure occured",e);    throw FaultUtil.StorageFault(e);  }  log.debug(methodName + "Exit");}  }
class C{  private javax.naming.Context callBindNewContext(NameComponent[] path) throws NamingException {  if (_nc == null)   throw new ConfigurationException("Context does not have a corresponding NamingContext");  try {    NamingContext nctx=_nc.bind_new_context(path);    return new CNCtx(_orb,orbTracker,nctx,_env,makeFullName(path));  } catch (  Exception e) {    throw ExceptionMapper.mapException(e,this,path);  }}  }
class C{  public static void readAndImportCSV(ChronixClient<MetricTimeSeries,SolrClient,SolrQuery> chronix,HttpSolrClient solr) throws URISyntaxException, IOException {  URL url=CSVImporter.class.getResource("/timeSeries");  File tsDir=new File(url.toURI());  File[] files=tsDir.listFiles();  if (files == null) {    LOGGER.warn("No files found. Returning");    return;  }  SimpleDateFormat sdf=new SimpleDateFormat("dd.MM.yyyy HH:mm:ss.SSS",Locale.GERMAN);  for (  File file : files) {    LOGGER.info("Processing file {}",file);    HashMap<Integer,MetricTimeSeries> documents=new HashMap<>();    String[] attributes=file.getName().split("_");    NumberFormat nf=DecimalFormat.getInstance(Locale.ENGLISH);    AtomicInteger filePoints=new AtomicInteger(0);    final AtomicBoolean onlyOnce=new AtomicBoolean(true);    Files.lines(file.toPath()).forEach(null);    chronix.add(documents.values(),solr);  }}  }
class C{  public static boolean validateFilterFlags(final CFlags flags,boolean allowUnmappedOnly){  if (flags.isSet(MAX_HITS_FLAG)) {    final int maxHits=(Integer)flags.getValue(MAX_HITS_FLAG);    if (maxHits < 1) {      Diagnostic.error(ErrorType.INVALID_MIN_INTEGER_FLAG_VALUE,"--" + MAX_HITS_FLAG,"" + maxHits,"1");      return false;    }  }  if (flags.isSet(MIN_MAPQ_FLAG)) {    final int minMapQ=(Integer)flags.getValue(MIN_MAPQ_FLAG);    if (minMapQ < 1) {      Diagnostic.error(ErrorType.INVALID_MIN_INTEGER_FLAG_VALUE,"--" + MIN_MAPQ_FLAG,"" + minMapQ,"1");      return false;    }  }  if (flags.isSet(MAX_AS_MATED_FLAG)) {    final IntegerOrPercentage maxMated=(IntegerOrPercentage)flags.getValue(MAX_AS_MATED_FLAG);    if (maxMated.getValue(100) < 0) {      Diagnostic.error(ErrorType.INVALID_MIN_INTEGER_FLAG_VALUE,"--" + MAX_AS_MATED_FLAG,"" + maxMated,"0");      return false;    }  }  if (flags.isSet(MAX_AS_UNMATED_FLAG)) {    final IntegerOrPercentage maxUnmated=(IntegerOrPercentage)flags.getValue(MAX_AS_UNMATED_FLAG);    if (maxUnmated.getValue(100) < 0) {      Diagnostic.error(ErrorType.INVALID_MIN_INTEGER_FLAG_VALUE,"--" + MAX_AS_UNMATED_FLAG,"" + maxUnmated,"0");      return false;    }  }  if (!(allowUnmappedOnly || flags.checkNand(EXCLUDE_MATED_FLAG,EXCLUDE_UNMATED_FLAG))) {    return false;  }  if (flags.isSet(FILTER_FLAGS) && flags.isSet(REQUIRE_FLAGS)) {    final int unset=(Integer)flags.getValue(FILTER_FLAGS);    final int set=(Integer)flags.getValue(REQUIRE_FLAGS);    final int badFlags=unset & set;    if (badFlags != 0) {      flags.setParseMessage("--" + FILTER_FLAGS + " and --"+ REQUIRE_FLAGS+ " have conflicting values. Flags in common: "+ badFlags);    }  }  if (!CommonFlags.validateRegions(flags)) {    return false;  }  if (flags.getFlag(KEEP_DUPLICATES_DESC) != null && flags.getFlag(EXCLUDE_DUPLICATES_FLAG) != null) {    throw new RuntimeException("Cannot have registered flags for both include and exclude duplicates");  }  return true;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  protected void verifyString(Cursor cursor,String columnName,String expected){  int index=cursor.getColumnIndex(columnName);  String actual=cursor.getString(index);  Log.i(LOG_TAG,": " + actual);  assertEquals(expected,actual);}  }
class C{  private void updateNotification(int id,Notification notification){  mNotificationManager.notify(NOTIFICATION_NAMESPACE,id,notification);}  }
class C{  public void testMikeSkells() throws Exception {  Document top=DocumentFactory.getInstance().createDocument();  Element root=top.addElement("root");  root.addElement("child1").addElement("child11");  root.addElement("child2").addElement("child21");  System.out.println(top.asXML());  XPath test1=top.createXPath("/root/child1/child11");  XPath test2=top.createXPath("/root/child2/child21");  Node position1=test1.selectSingleNode(root);  Node position2=test2.selectSingleNode(root);  System.out.println("test1= " + test1);  System.out.println("test2= " + test2);  System.out.println("Position1 Xpath = " + position1.getUniquePath());  System.out.println("Position2 Xpath = " + position2.getUniquePath());  System.out.println("test2.matches(position1) : " + test2.matches(position1));  assertTrue("test1.matches(position1)",test1.matches(position1));  assertTrue("test2.matches(position2)",test2.matches(position2));  assertTrue("test2.matches(position1) should be false",!test2.matches(position1));}  }
class C{  public double nextDouble(){  return nextDouble(alpha,beta);}  }
class C{  public void interpolatePathDataNode(PathDataNode nodeFrom,PathDataNode nodeTo,float fraction){  for (int i=0; i < nodeFrom.mParams.length; i++) {    mParams[i]=nodeFrom.mParams[i] * (1 - fraction) + nodeTo.mParams[i] * fraction;  }}  }
class C{  public void scheduleJob(final Job job){synchronized (jobs) {    if (job.sent)     state.output.fatal("Tried to schedule a job which had already been scheduled.");    jobs.addLast(job);    slaveMonitor.notifyMonitor(jobs);  }}  }
class C{  public void toggleAutoRange(){  this.autoRange=this.autoRangeCheckBox.isSelected();  if (this.autoRange) {    this.minimumRangeValue.setText(Double.toString(this.minimumValue));    this.minimumRangeValue.setEnabled(false);    this.maximumRangeValue.setText(Double.toString(this.maximumValue));    this.maximumRangeValue.setEnabled(false);  } else {    this.minimumRangeValue.setEnabled(true);    this.maximumRangeValue.setEnabled(true);  }}  }
class C{  protected void clearChildContexts(){  childContexts.clear();}  }
class C{  public void defaultInit(){  addDataSources(DEFAULT_DATA_SOURCES);}  }
class C{  public BinaryWriterExImpl writer(BinaryOutputStream out){  return new BinaryWriterExImpl(ctx,out,BinaryThreadLocalContext.get().schemaHolder(),null);}  }
class C{  public static void usage(){  String message="ClusterVectorStore class for clustering an entire (text) vector store.";  message+="\nUsage: java.pitt.search.semanticvectors.ClusterVectorStore VECTORFILE";  message+="\nUse --numclusters to change the number of clusters.";  message+="\nDo not try this for large vector stores, it will not scale well!";  System.out.println(message);  return;}  }
class C{  public void write(int addr,byte type,byte[] data){  byte record[]=new byte[data.length + 1 + 2+ 1];  if (addr / 0x10000 != address / 0x10000) {    byte[] extAddr={2,0,0,EXT_ADDR,0,(byte)(addr / 0x10000)};    writeLine(extAddr);  }  address=addr;  record[LEN]=(byte)(data.length);  record[ADDRH]=(byte)(address / 0x100);  record[ADDRL]=(byte)(address & 0xff);  record[TYPE]=type;  for (int i=0; i < data.length; i++) {    record[TYPE + 1 + i]=data[i];  }  writeLine(record);}  }
class C{  public PacketExtension parseExtension(XmlPullParser parser) throws Exception {  MessageEvent messageEvent=new MessageEvent();  boolean done=false;  while (!done) {    int eventType=parser.next();    if (eventType == XmlPullParser.START_TAG) {      if (parser.getName().equals("id"))       messageEvent.setPacketID(parser.nextText());      if (parser.getName().equals(MessageEvent.COMPOSING))       messageEvent.setComposing(true);      if (parser.getName().equals(MessageEvent.DELIVERED))       messageEvent.setDelivered(true);      if (parser.getName().equals(MessageEvent.DISPLAYED))       messageEvent.setDisplayed(true);      if (parser.getName().equals(MessageEvent.OFFLINE))       messageEvent.setOffline(true);    } else     if (eventType == XmlPullParser.END_TAG) {      if (parser.getName().equals("x")) {        done=true;      }    }  }  return messageEvent;}  }
class C{  public TIntLongHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public boolean isStoreForwardWarningActivated(){  return readBoolean(RcsSettingsData.WARN_SF_SERVICE);}  }
class C{  public long endWrite(long start){  this.stats.incInt(writesInProgressId,-1);  long end=DistributionStats.getStatTime();  this.stats.incLong(writesId,1);  this.stats.incLong(writeTimeId,end - start);  return end;}  }
class C{  private table createTabs(String selTab){  td tabbar=new td("windowCenter",AlignType.LEFT,AlignType.MIDDLE,false);  a tab=new a("#",new span("Find"));  if (selTab.equals("Find")) {    tab.setID("tabSelected");  } else {    tab.setID("tab");    tab.setHref(MobileEnv.getBaseDirectory("/WFindAdv?PTab=Find"));  }  tab.setOnMouseOver("status='Find';return true;");  tabbar.addElement(tab);  tab=new a("#",new span("FindAdv"));  if (selTab.equals("FindAdv")) {    tab.setID("tabSelected");  } else {    tab.setID("tab");    tab.setHref(MobileEnv.getBaseDirectory("/WFindAdv?PTab=FindAdv"));  }  tab.setOnMouseOver("status='FindAdv';return true;");  tabbar.addElement(tab);  table topTable=new table("0","0","0","100%",null);  topTable.setID("WFindAdv.topTable");  topTable.addElement(new tr(tabbar));  return topTable;}  }
class C{  public String toString(){  int count, i;  String str;  StringBuffer sb=new StringBuffer();  sb.append(isAllow() ? "Allow " : "Deny  ");  appendCol(sb,sid.toDisplayString(),25);  sb.append(" 0x").append(Hexdump.toHexString(access,8)).append(' ');  sb.append(isInherited() ? "Inherited " : "Direct    ");  appendCol(sb,getApplyToText(),34);  return sb.toString();}  }
class C{  public FeedFilter basic(){  FeedFilter copy=new FeedFilter(this);  copy.tags=Optional.absent();  copy.likes=Optional.absent();  copy.username=Optional.absent();  return copy;}  }
class C{  private Image createCharacterImage(EntityView<?> view){  Image image=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration().createCompatibleImage(IMAGE_WIDTH,IMAGE_HEIGHT,TransparencyMode.TRANSPARENCY);  Graphics2D g2d=(Graphics2D)image.getGraphics();  g2d.translate(0,IMAGE_HEIGHT % 32);  view.draw(g2d);  g2d.dispose();  return image;}  }
class C{  private boolean isRight(View view,int totalSpanCount){  return getSpanIndex(view) > 0 && (getSpanIndex(view) + getSpanSize(view) == totalSpanCount);}  }
class C{  public void addAll(List<String> stringValues){  for (  String stringValue : stringValues) {    add(stringValue);  }}  }
class C{  public TemplateVariable(String type,String name,String defaultValue,int[] offsets){  this(type,name,new String[]{defaultValue},offsets);}  }
class C{  public HashMap<String,Object> saveAsHashMap(){  HashMap<String,Object> map=new HashMap<String,Object>();  map.put("ShadingFromSurface",new Boolean(shadingFromSurface));  map.put("AutoAdjustOpacity",new Boolean(autoAdjustOpacity));  map.put("LayersEnabled",new Boolean(layersEnabled));  StateUtil.putColorRGBA(map,"GridColor",gridColor);  map.put("GridCellSize",new Double(gridCellSize));  map.put("GridEnabled",new Boolean(gridEnabled));  map.put("LayerInfoCount",new Integer(visibleLayers.size() + availableLayers.size()));  for (int i=0; i < visibleLayers.size(); ++i)   map.put("LayerInfo" + i,visibleLayers.get(i).getAsHashMap());  for (int i=0; i < availableLayers.size(); ++i)   map.put("LayerInfo" + (i + NUM_LAYERS),availableLayers.get(i).getAsHashMap());  return (map);}  }
class C{  @HLEFunction(nid=0x8BEA2B3E,version=150) public int sceNetAdhocPtpRecv(@CheckArgument("checkPtpId") int id,TPointer data,TPointer32 dataSizeAddr,int timeout,int nonblock){  return ptpObjects.get(id).recv(data,dataSizeAddr,timeout,nonblock);}  }
class C{  public MutableKeyBuffer(final MutableKeyBuffer src){  if (src == null)   throw new IllegalArgumentException();  checkCapacity(src.capacity());  this.nkeys=src.nkeys;  this.keys=new byte[src.keys.length][];  for (int i=0; i < keys.length; i++) {    this.keys[i]=src.keys[i];  }}  }
class C{  final boolean isOwnedBy(AbstractQueuedSynchronizer sync){  return sync == AbstractQueuedSynchronizer.this;}  }
class C{  public XMLExperiment() throws Exception {  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:15.378 -0500",hash_original_method="B39FD616EE504B12CB9E5F46F7A6A390",hash_generated_method="42E2C04CD5150C1C72712478B68A54F2") protected int unwrap() throws IOException {  if (logger != null) {    logger.println("SSLRecordProtocol.unwrap: BEGIN [");  }  int type=in.readUint8();  if ((type < ContentType.CHANGE_CIPHER_SPEC) || (type > ContentType.APPLICATION_DATA)) {    if (logger != null) {      logger.println("Non v3.1 message type:" + type);    }    if (type >= 0x80) {      int length=(type & 0x7f) << 8 | in.read();      byte[] fragment=in.read(length);      handshakeProtocol.unwrapSSLv2(fragment);      if (logger != null) {        logger.println("SSLRecordProtocol:unwrap ] END, SSLv2 type");      }      return ContentType.HANDSHAKE;    }    throw new AlertException(AlertProtocol.UNEXPECTED_MESSAGE,new SSLProtocolException("Unexpected message type has been received: " + type));  }  if (logger != null) {    logger.println("Got the message of type: " + type);  }  if (version != null) {    if ((in.read() != version[0]) || (in.read() != version[1])) {      throw new AlertException(AlertProtocol.UNEXPECTED_MESSAGE,new SSLProtocolException("Unexpected message type has been received: " + type));    }  } else {    in.skip(2);  }  int length=in.readUint16();  if (logger != null) {    logger.println("TLSCiphertext.fragment[" + length + "]: ...");  }  if (length > MAX_CIPHERED_DATA_LENGTH) {    throw new AlertException(AlertProtocol.RECORD_OVERFLOW,new SSLProtocolException("Received message is too big."));  }  byte[] fragment=in.read(length);  if (logger != null) {    logger.print(fragment);  }  if (activeReadState != null) {    fragment=activeReadState.decrypt((byte)type,fragment);    if (logger != null) {      logger.println("TLSPlaintext.fragment:");      logger.print(fragment);    }  }  if (fragment.length > MAX_DATA_LENGTH) {    throw new AlertException(AlertProtocol.DECOMPRESSION_FAILURE,new SSLProtocolException("Decompressed plain data is too big."));  }switch (type) {case ContentType.CHANGE_CIPHER_SPEC:    handshakeProtocol.receiveChangeCipherSpec();  setSession(handshakeProtocol.getSession());if (logger != null) {  logger.println("activeReadState = pendingConnectionState");}activeReadState=pendingConnectionState;break;case ContentType.ALERT:alert(fragment[0],fragment[1]);break;case ContentType.HANDSHAKE:handshakeProtocol.unwrap(fragment);break;case ContentType.APPLICATION_DATA:if (logger != null) {logger.println("TLSCiphertext.unwrap: APP DATA[" + length + "]:");logger.println(new String(fragment));}appData.append(fragment);break;default :throw new AlertException(AlertProtocol.UNEXPECTED_MESSAGE,new SSLProtocolException("Unexpected message type has been received: " + type));}if (logger != null) {logger.println("SSLRecordProtocol:unwrap ] END, type: " + type);}return type;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("DaoRelFld[");  buffer.append("m_id = ").append(m_id);  buffer.append(", m_name = ").append(m_name);  buffer.append(", m_colName = ").append(m_colName);  buffer.append("]");  return buffer.toString();}  }
class C{  protected Set<BytesRef> decodeContexts(BytesRef scratch,ByteArrayDataInput tmpInput){  tmpInput.reset(scratch.bytes,scratch.offset,scratch.length);  tmpInput.skipBytes(scratch.length - 2);  short ctxSetSize=tmpInput.readShort();  scratch.length-=2;  final Set<BytesRef> contextSet=new HashSet<>();  for (short i=0; i < ctxSetSize; i++) {    tmpInput.setPosition(scratch.offset + scratch.length - 2);    short curContextLength=tmpInput.readShort();    scratch.length-=2;    tmpInput.setPosition(scratch.offset + scratch.length - curContextLength);    BytesRef contextSpare=new BytesRef(curContextLength);    tmpInput.readBytes(contextSpare.bytes,0,curContextLength);    contextSpare.length=curContextLength;    contextSet.add(contextSpare);    scratch.length-=curContextLength;  }  return contextSet;}  }
class C{  public static String formatSqlValues(String... values){  StringBuilder builder=new StringBuilder("(");  for (int i=0; i < values.length; i++) {    if (i > 0) {      builder.append(',');    }    builder.append('\'');    builder.append(escapeSqlString(values[i]));    builder.append('\'');  }  builder.append(")");  return builder.toString();}  }
class C{  boolean inSameSubroutine(final Label block){  if ((status & VISITED) == 0 || (block.status & VISITED) == 0) {    return false;  }  for (int i=0; i < srcAndRefPositions.length; ++i) {    if ((srcAndRefPositions[i] & block.srcAndRefPositions[i]) != 0) {      return true;    }  }  return false;}  }
class C{  @Override public void onClick(View passwordView){  if (mPublicShare != null && mPublicShare.isPasswordProtected()) {    ((FileActivity)getActivity()).getFileOperationsHelper().requestPasswordForShareViaLink(mFile,false);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:15.482 -0500",hash_original_method="3F01B3F60F79E6CB5C3DF3B66FDD88DE",hash_generated_method="943E61EA1E8D9909869C845CB85685D1") public boolean equals(Object other){  if (other == null)   return false;  boolean retval;  if (!this.getClass().equals(other.getClass())) {    retval=false;  } else {    UDPMessageChannel that=(UDPMessageChannel)other;    retval=this.getKey().equals(that.getKey());  }  return retval;}  }
class C{  @Benchmark public long test7_UsingJava8StreamApi() throws IOException {  final long[] i={0};  map.entrySet().stream().forEach(null);  return i[0];}  }
class C{  public void removeChangeListener(OverlayChangeListener listener){  ParamChecks.nullNotPermitted(listener,"listener");  this.changeListeners.remove(OverlayChangeListener.class,listener);}  }
class C{  private void assertRegionOneStats(final VM vm,final CompressionStats stats){  doPutsOnVm(vm,REGION_NAME,100);  stats.vmTotalCompressionTime=getTotalCompressionTimeOnVm(vm,null);  assertTrue(stats.vmTotalCompressionTime > 0);  stats.region1TotalCompressionTime=getTotalCompressionTimeOnVm(vm,REGION_NAME);  assertTrue(stats.region1TotalCompressionTime > 0);  stats.region2TotalCompressionTime=getTotalCompressionTimeOnVm(vm,REGION_NAME_2);  assertEquals(0,stats.region2TotalCompressionTime);  stats.vmTotalDecompressionTime=getTotalDecompressionTimeOnVm(vm,null);  assertEquals(0,stats.vmTotalDecompressionTime);  stats.region1TotalDecompressionTime=getTotalDecompressionTimeOnVm(vm,REGION_NAME);  assertEquals(0,stats.region1TotalDecompressionTime);  stats.region2TotalDecompressionTime=getTotalDecompressionTimeOnVm(vm,REGION_NAME_2);  assertEquals(0,stats.region2TotalDecompressionTime);  stats.vmTotalCompressions=getTotalCompressionsOnVm(vm,null);  assertEquals(100,stats.vmTotalCompressions);  stats.region1TotalCompressions=getTotalCompressionsOnVm(vm,REGION_NAME);  assertEquals(100,stats.region1TotalCompressions);  stats.region2TotalCompressions=getTotalCompressionsOnVm(vm,REGION_NAME_2);  assertEquals(0,stats.region2TotalCompressions);  stats.vmTotalDecompressions=getTotalDecompressionsOnVm(vm,null);  assertEquals(0,stats.vmTotalDecompressions);  stats.region1TotalDecompressions=getTotalDecompressionsOnVm(vm,REGION_NAME);  assertEquals(0,stats.region1TotalDecompressions);  stats.region2TotalDecompressions=getTotalDecompressionsOnVm(vm,REGION_NAME_2);  assertEquals(0,stats.region2TotalDecompressions);  stats.vmTotalPreCompressedBytes=getTotalPreCompressedBytesOnVm(vm,null);  assertEquals(10200,stats.vmTotalPreCompressedBytes);  stats.region1TotalPreCompressedBytes=getTotalPreCompressedBytesOnVm(vm,REGION_NAME);  assertEquals(10200,stats.region1TotalPreCompressedBytes);  stats.region2TotalPreCompressedBytes=getTotalPreCompressedBytesOnVm(vm,REGION_NAME_2);  assertEquals(0,stats.region2TotalPreCompressedBytes);  stats.vmTotalPostCompressedBytes=getTotalPostCompressedBytesOnVm(vm,null);  assertEquals(5000,stats.vmTotalPostCompressedBytes);  stats.region1TotalPostCompressedBytes=getTotalPostCompressedBytesOnVm(vm,REGION_NAME);  assertEquals(5000,stats.region1TotalPostCompressedBytes);  stats.region2TotalPostCompressedBytes=getTotalPostCompressedBytesOnVm(vm,REGION_NAME_2);  assertEquals(0,stats.region2TotalPostCompressedBytes);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.ARRAY_LIKE__DECLARED_ELEMENT_TYPE:    setDeclaredElementType((TypeRef)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.config.traceTest=true;  test.config.big=true;  test.test();}  }
class C{  public int size(){  return names.size();}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  private static void printQueryInfo(McfData mcfData){  Query query=mcfData.getQuery();  System.out.println("Query Info:");  System.out.println("Ids: " + query.getIds());  System.out.println("Start Date: " + query.getStartDate());  System.out.println("End Date: " + query.getEndDate());  System.out.println("Metrics: " + query.getMetrics());  System.out.println("Dimensions: " + query.getDimensions());  System.out.println("Sort: " + query.getSort());  System.out.println("Segment: " + query.getSegment());  System.out.println("Filters: " + query.getFilters());  System.out.println("Start Index: " + query.getStartIndex());  System.out.println("Max Results: " + query.getMaxResults());  System.out.println();}  }
class C{  protected void doBloomFilterTest(String label,IBloomFilter bloomFilter,byte[][] keys){  if (log.isInfoEnabled())   log.info("\ncondition: " + label);  final int[] order=getRandomOrder(keys.length);  for (int i=0; i < order.length; i++) {    final byte[] key=keys[order[i]];    final boolean found=bloomFilter.contains(key);    assertTrue("false negative: i=" + i + ", key="+ BytesUtil.toString(key),found);  }}  }
class C{  public List<String> deleteNFSShare(String mountPath,boolean deleteAll){  FlexFileShare share=new FlexFileShare(server.getNaServer(),mountPath);  return share.deleteNFSShare(deleteAll);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Observation(){}  }
class C{  @Override public void onRestore(BackupDataInput data,int appVersionCode,ParcelFileDescriptor newState) throws IOException {  mDispatcher.performRestore(data,appVersionCode,newState);}  }
class C{  public static int readVarInt(ByteBuffer buff){  int b=buff.get();  if (b >= 0) {    return b;  }  return readVarIntRest(buff,b);}  }
class C{  public boolean isAllow_Info_Payment(){  Object oo=get_Value(COLUMNNAME_Allow_Info_Payment);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void moveToInsertRow() throws SQLException {  crsInternal.moveToInsertRow();}  }
class C{  public static int binarySearchFromTo(byte[] list,byte key,int from,int to){  byte midVal;  while (from <= to) {    int mid=(from + to) / 2;    midVal=list[mid];    if (midVal < key)     from=mid + 1; else     if (midVal > key)     to=mid - 1; else     return mid;  }  return -(from + 1);}  }
class C{  public void paintTextPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public final String elementAt(final int id){  String value=null;  if (id < max_size) {    value=items[id];  }  if (value == null) {    value="";  }  return value;}  }
class C{  public static <T,U extends Closeable>T withCloseable(U self,@ClosureParams(value=FirstParam.class) Closure<T> action) throws IOException {  try {    T result=action.call(self);    Closeable temp=self;    self=null;    temp.close();    return result;  }  finally {    DefaultGroovyMethodsSupport.closeWithWarning(self);  }}  }
class C{  public void tabLoadStarted(int id){  StripLayoutTab tab=findTabById(id);  if (tab != null)   tab.loadingStarted();}  }
class C{  public void reset(){  Cell[] as=cells;  base=0L;  if (as != null) {    for (    Cell a : as) {      if (a != null) {        a.reset();      }    }  }}  }
class C{  public void clearTaglibs(){  taglibs.clear();}  }
class C{  public boolean removePermission(Permission permission){  return permissionSet.removeElement(permission);}  }
class C{  @Override public void offset(Point offset){  Point[] points=this.getPoints();  for (int i=0; i < points.length; i++)   points[i]=new Point(points[i].x + offset.x,points[i].y + offset.y);  mat.fromArray(points);}  }
class C{  public JMapper(final Class<D> destination,final Class<S> source,final String xml){  this(destination,source,null,xml);}  }
class C{  public GF2nPolynomialElement squareBitwise(){  GF2nPolynomialElement result=new GF2nPolynomialElement(this);  result.squareThisBitwise();  result.reduceThis();  return result;}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.ENTRY_POINT_SPEC;}  }
class C{  @Override public int hashCode(){  return (month << 6) + day;}  }
class C{  public static String formatNumber(String phoneNumber,String phoneNumberE164,String defaultCountryIso){  int len=phoneNumber.length();  for (int i=0; i < len; i++) {    if (!isDialable(phoneNumber.charAt(i))) {      return phoneNumber;    }  }  PhoneNumberUtil util=PhoneNumberUtil.getInstance();  if (phoneNumberE164 != null && phoneNumberE164.length() >= 2 && phoneNumberE164.charAt(0) == '+') {    try {      PhoneNumber pn=util.parse(phoneNumberE164,"ZZ");      String regionCode=util.getRegionCodeForNumber(pn);      if (!TextUtils.isEmpty(regionCode) && normalizeNumber(phoneNumber).indexOf(phoneNumberE164.substring(1)) <= 0) {        defaultCountryIso=regionCode;      }    } catch (    NumberParseException e) {    }  }  String result=formatNumber(phoneNumber,defaultCountryIso);  return result != null ? result : phoneNumber;}  }
class C{  public void testFlipBitLeftmostPositive(){  byte aBytes[]={1,-128,56,100,-15,35,26};  int aSign=1;  int number=48;  byte rBytes[]={0,-128,56,100,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static Integer createServerCache() throws Exception {  ClientInterestNotifyDUnitTest test=new ClientInterestNotifyDUnitTest();  Properties props=new Properties();  props.setProperty(DELTA_PROPAGATION,"false");  cacheServer=test.createCache(props);  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setDataPolicy(DataPolicy.REPLICATE);  factory.setConcurrencyChecksEnabled(false);  RegionAttributes attrs=factory.create();  cacheServer.createRegion(REGION_NAME1,attrs);  cacheServer.createRegion(REGION_NAME2,attrs);  cacheServer.createRegion(REGION_NAME3,attrs);  CacheServer server=cacheServer.addCacheServer();  int port=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  server.setPort(port);  server.setNotifyBySubscription(true);  server.setSocketBufferSize(32768);  server.start();  return new Integer(server.getPort());}  }
class C{  public boolean isScanInverted(){  return scanInverted;}  }
class C{  public void removeMessage(Message message){synchronized (messages) {    messages.remove(message);  }synchronized (messageHistories) {    for (    MessageHistory history : messageHistories) {      ((ImplMessageHistory)history).removeMessage(message.getId());    }  }}  }
class C{  public void paint(Graphics g){}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  TimeManagerInfoDao.dropTable(db,ifExists);}  }
class C{  public boolean innerClassExists(Identifier nm){  for (MemberDefinition field=getFirstMatch(nm.getHead()); field != null; field=field.getNextMatch()) {    if (field.isInnerClass()) {      if (field.getInnerClass().isLocal()) {        continue;      }      return !nm.isQualified() || field.getInnerClass().innerClassExists(nm.getTail());    }  }  return false;}  }
class C{  static boolean charEqualsIgnoreCase(char c1,char c2){  return c1 == c2 || Character.toUpperCase(c1) == Character.toUpperCase(c2) || Character.toLowerCase(c1) == Character.toLowerCase(c2);}  }
class C{  final public MutableString substring(final int start){  return substring(start,length());}  }
class C{  public static void main(String[] args) throws Throwable {  if (!AwsCandidateHarvester.smellsLikeAnEC2()) {    logger.info("This does not appear to be an EC2 machine");    return;  } else {    logger.info("Oh nice! Looks like we are on an EC2 machine");  }  AwsCandidateHarvester mch=new AwsCandidateHarvester();  List<CandidateHarvester> harvesters=new ArrayList<>();  harvesters.add(mch);  Agent localAgent=createAgent(2020,false,harvesters);  localAgent.setNominationStrategy(NominationStrategy.NOMINATE_HIGHEST_PRIO);  String localSDP=SdpUtils.createSDPDescription(localAgent);  Thread.sleep(500);  logger.info("=================== feed the following" + " to the remote agent ===================");  logger.info("\n" + localSDP);  logger.info("======================================" + "========================================\n");}  }
class C{  @UiThreadTest public void testOnFocusChangeCallbackOrderWhenClearingFocusOfNotFirstFocusable() throws Exception {  Button clearingFocusButton=mTopRightButton;  Button gainingFocusButton=mTopLeftButton;  View focusCandidate=clearingFocusButton.getRootView().getParent().focusSearch(null,View.FOCUS_FORWARD);  assertNotSame("The clearing focus button is not the first focusable.",clearingFocusButton,focusCandidate);  assertSame("The gaining focus button is the first focusable.",gainingFocusButton,focusCandidate);  clearingFocusButton.requestFocus();  assertTrue(clearingFocusButton.hasFocus());  CombinedListeners mock=mock(CombinedListeners.class);  clearingFocusButton.setOnFocusChangeListener(mock);  gainingFocusButton.setOnFocusChangeListener(mock);  clearingFocusButton.getViewTreeObserver().addOnGlobalFocusChangeListener(mock);  clearingFocusButton.clearFocus();  InOrder inOrder=inOrder(mock);  inOrder.verify(mock).onFocusChange(clearingFocusButton,false);  inOrder.verify(mock).onGlobalFocusChanged(clearingFocusButton,gainingFocusButton);  inOrder.verify(mock).onFocusChange(gainingFocusButton,true);}  }
class C{  public T clear(){  if (view != null) {    if (view instanceof ImageView) {      ImageView iv=((ImageView)view);      iv.setImageBitmap(null);      iv.setTag(AQuery.TAG_URL,null);    } else     if (view instanceof WebView) {      WebView wv=((WebView)view);      wv.stopLoading();      wv.clearView();      wv.setTag(AQuery.TAG_URL,null);    } else     if (view instanceof TextView) {      TextView tv=((TextView)view);      tv.setText("");    }  }  return self();}  }
class C{  public OutputNode writeRoot() throws Exception {  OutputDocument root=new OutputDocument(this,stack);  if (stack.isEmpty()) {    writer.writeProlog();  }  return root;}  }
class C{  private void commonPrecheck(List<String> excludedSiteIds){  if (drUtil.isStandby()) {    throw APIException.badRequests.operationOnlyAllowedOnActiveSite();  }  if (!isClusterStable()) {    throw APIException.serviceUnavailable.clusterStateNotStable();  }  for (  Site site : drUtil.listStandbySites()) {    if (excludedSiteIds.contains(site.getUuid())) {      continue;    }    if (site.getState().equals(SiteState.STANDBY_PAUSED) || site.getState().equals(SiteState.ACTIVE_DEGRADED)) {      continue;    }    int nodeCount=site.getNodeCount();    ClusterInfo.ClusterState state=coordinator.getControlNodesState(site.getUuid());    if (!ClusterInfo.ClusterState.STABLE.equals(state)) {      log.error("Site {} is not stable {}",site.getUuid(),Objects.toString(state));      throw APIException.serviceUnavailable.siteClusterStateNotStable(site.getName(),Objects.toString(state));    }  }}  }
class C{  public Immutable_ createImmutable_(){  Immutable_Impl immutable_=new Immutable_Impl();  return immutable_;}  }
class C{  @Override public void dispose(){  m_bookmarkTable.dispose();}  }
class C{  private static void releaseLatch(final CountDownLatch latch){  if (latch == null) {    return;  }  while (latch.getCount() > 0) {    latch.countDown();  }}  }
class C{  private Location findFarthestLocation(Location location,Direction direction){  Location farthest;  do {    farthest=location;    location=farthest.offset(direction);  } while (gridOperator.isValidLocation(location) && gameGrid.get(location) == null);  return farthest;}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  isLeaf=in.readBoolean();  numEntries=in.readInt();}  }
class C{  public static TimeOffset readFrom(final Deserializer deserializer,final String label){  return new TimeOffset(deserializer.readLong(label));}  }
class C{  public synchronized void loadMessage() throws MessagingException {  if (messageParsed) {  } else   if (source != null) {    sourceIn=null;    try {      sourceIn=source.getInputStream();      parse(sourceIn);      saved=true;    } catch (    IOException ioe) {      IOUtils.closeQuietly(sourceIn);      sourceIn=null;      throw new MessagingException("Unable to parse stream: " + ioe.getMessage(),ioe);    }  } else {    throw new MessagingException("loadHeaders called for an unparsed message with no source");  }}  }
class C{  public SyncHttpClient(SchemeRegistry schemeRegistry){  super(schemeRegistry);}  }
class C{  private void processPorts(Draft3Job parentJob,Draft3Job job,List<? extends ApplicationPort> ports) throws Draft3Exception {  for (  ApplicationPort port : ports) {    String prefix=job.getId().substring(job.getId().lastIndexOf(DOT_SEPARATOR) + 1) + SLASH_SEPARATOR;    setScatter(job,prefix,port);    if (parentJob != null) {      setScatter(parentJob,prefix,port);    }    if (parentJob != null && parentJob.getApp().isWorkflow()) {      Draft3Workflow workflowApp=(Draft3Workflow)parentJob.getApp();      processDataLinks(workflowApp.getDataLinks(),port,job,true);    }    if (job != null && job.getApp().isWorkflow()) {      Draft3Workflow workflowApp=(Draft3Workflow)job.getApp();      processDataLinks(workflowApp.getDataLinks(),port,job,false);    }  }}  }
class C{  private void loadPaySelectInfo(){  log.info("VPayPrint.loadPaySelectInfo");  if (m_C_PaySelection_ID <= 0)   return;  loadPaySelectInfo(m_C_PaySelection_ID);  fBank.setText(bank);  fCurrency.setText(currency);  fBalance.setValue(balance);  loadPaymentRule();}  }
class C{  @Override public Invocation.Builder request(String... acceptedResponseTypes){  return new MSF4JInvocation.Builder(new MSF4JClientRequestContext(client,uri).setAcceptResponseTypesStr(Arrays.asList(acceptedResponseTypes)),providerComponents);}  }
class C{  public static Typeface funRaiser(Context context){  return FontSourceProcessor.process(R.raw.fun_raiser,context);}  }
class C{  private void createConfigurationElement(Map<String,String> properties,Directives directives){  if (properties == null) {    return;  }  directives.add("configuration");  for (  Map.Entry<String,String> entry : properties.entrySet()) {    directives.add("property").add("name").set(entry.getKey()).up().add("value").set(entry.getValue()).up().up();  }  directives.up();}  }
class C{  public TimelineCursor(Long minPosition,Long maxPosition){  this.minPosition=minPosition;  this.maxPosition=maxPosition;}  }
class C{  public static ProcessCtl process(ASyncProcess parent,int WindowNo,IProcessParameter parameter,ProcessInfo pi,Trx trx){  log.fine("WindowNo=" + WindowNo + " - "+ pi);  MPInstance instance=null;  try {    instance=new MPInstance(Env.getCtx(),pi.getAD_Process_ID(),pi.getRecord_ID());  } catch (  Exception e) {    pi.setSummary(e.getLocalizedMessage());    pi.setError(true);    log.warning(pi.toString());    return null;  }catch (  Error e) {    pi.setSummary(e.getLocalizedMessage());    pi.setError(true);    log.warning(pi.toString());    return null;  }  if (!instance.save()) {    pi.setSummary(Msg.getMsg(Env.getCtx(),"ProcessNoInstance"));    pi.setError(true);    return null;  }  pi.setAD_PInstance_ID(instance.getAD_PInstance_ID());  if (parameter != null) {    if (!parameter.saveParameters()) {      pi.setSummary(Msg.getMsg(Env.getCtx(),"ProcessCancelled"));      pi.setError(true);      return null;    }  }  ProcessCtl worker=new ProcessCtl(parent,WindowNo,pi,trx);  if (parent != null) {    worker.start();  } else {    worker.run();  }  return worker;}  }
class C{  public void chopFrame(int pos,int offsetDelta,int k) throws BadBytecode {}  }
class C{  public DataParseException(){  super();}  }
class C{  @Override synchronized public void recover(){  bcastAdapter.recover();  commAdapter.recover();}  }
class C{  @Override public boolean sendHead(SendPacket entity){  int length=entity.getLength();  if (length <= 0)   return false;  try {    byte[] lenBytes=convertToBytes(length);    mOut.write(entity.getType());    mOut.write(lenBytes,0,4);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  private void buildButtons(){  buildOkButton();  buildCancelButton();}  }
class C{  public static DDSHeader readFrom(ByteBuffer buffer) throws IllegalArgumentException, IOException {  if (null == buffer) {    String message=Logging.getMessage("nullValue.BufferNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (buffer.order() != ByteOrder.LITTLE_ENDIAN) {    buffer.order(ByteOrder.LITTLE_ENDIAN);  }  int ddsHeaderSize=DDSConstants.DDS_SIGNATURE_SIZE + DDSConstants.DDS_HEADER_SIZE;  if (buffer.remaining() < ddsHeaderSize) {    String reason=buffer.remaining() + " < " + ddsHeaderSize;    String message=Logging.getMessage("generic.LengthIsInvalid",reason);    Logging.logger().severe(message);    throw new IOException(message);  }  int signature=buffer.getInt();  if (DDSConstants.MAGIC != signature) {    String message=Logging.getMessage("generic.UnknownFileFormat",signature);    Logging.logger().fine(message);    throw new IOException(message);  }  int dwSize=buffer.getInt();  if (dwSize != DDSConstants.DDS_HEADER_SIZE) {    String message=Logging.getMessage("generic.UnknownContentType",dwSize);    Logging.logger().fine(message);    throw new IOException(message);  }  DDSHeader ddsHeader=new DDSHeader();  ddsHeader.setFlags(buffer.getInt());  ddsHeader.setHeight(buffer.getInt());  ddsHeader.setWidth(buffer.getInt());  ddsHeader.setLinearSize(buffer.getInt());  ddsHeader.setDepth(buffer.getInt());  ddsHeader.setMipMapCount(buffer.getInt());  buffer.position(DDSConstants.DDS_PIXEL_FORMAT_OFFSET);  DDSPixelFormat pixelFormat=new DDSPixelFormat();  dwSize=buffer.getInt();  if (dwSize != DDSConstants.DDS_PIXEL_FORMAT_SIZE) {    String message=Logging.getMessage("generic.UnknownContentType",dwSize);    Logging.logger().fine(message);    throw new IOException(message);  }  pixelFormat.setFlags(buffer.getInt());  pixelFormat.setFourCC(buffer.getInt());  pixelFormat.setRGBBitCount(buffer.getInt());  pixelFormat.setRBitMask(buffer.getInt());  pixelFormat.setGBitMask(buffer.getInt());  pixelFormat.setBBitMask(buffer.getInt());  pixelFormat.setABitMask(buffer.getInt());  ddsHeader.setPixelFormat(pixelFormat);  ddsHeader.setCaps(buffer.getInt());  ddsHeader.setCaps2(buffer.getInt());  ddsHeader.setCaps3(buffer.getInt());  ddsHeader.setCaps4(buffer.getInt());  buffer.getInt();  return ddsHeader;}  }
class C{  public final boolean h8Castle(){  return (castleMask & (1 << H8_CASTLE)) != 0;}  }
class C{  public void testShellSelfTouchHoleOverlappingHole(){  String wkt="POLYGON ((0 0, 220 0, 220 200, 120 200, 140 100, 80 100, 120 200, 0 200, 0 0),   (200 80, 20 80, 120 200, 200 80))";  checkIsValidSTR(wkt,false);  checkIsValidDefault(wkt,false);}  }
class C{  public void stop(){}  }
class C{  public final Double2D subtract(Double2D other){  return new Double2D(x - other.x,y - other.y);}  }
class C{  public final void removeElementAt(int i){  if (i > m_firstFree)   System.arraycopy(m_map,i + 1,m_map,i,m_firstFree); else   m_map[i]=java.lang.Integer.MIN_VALUE;  m_firstFree--;}  }
class C{  private String readString(byte stringTag,String stringName,String enc) throws IOException {  if (buffer.read() != stringTag)   throw new IOException("DER input not a " + stringName + " string");  int length=getLength(buffer);  byte[] retval=new byte[length];  if ((length != 0) && (buffer.read(retval) != length))   throw new IOException("short read of DER " + stringName + " string");  return new String(retval,enc);}  }
class C{  @DSComment("data structure class") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.427 -0500",hash_original_method="C7AE6CE1280D5E080A32F66907E851BD",hash_generated_method="630AC021B3D713F59B111AFE3453A52E") public int size(){  return mValues.size();}  }
class C{  public Week(int week,int year){  if ((week < FIRST_WEEK_IN_YEAR) && (week > LAST_WEEK_IN_YEAR)) {    throw new IllegalArgumentException("The 'week' argument must be in the range 1 - 53.");  }  this.week=(byte)week;  this.year=(short)year;  peg(Calendar.getInstance());}  }
class C{  public Vector3d fma(Vector3dc a,Vector3dc b){  x+=a.x() * b.x();  y+=a.y() * b.y();  z+=a.z() * b.z();  return this;}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  public boolean holdCall(BluetoothDevice device){  if (DBG)   log("holdCall()");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.holdCall(device);    } catch (    RemoteException e) {      Log.e(TAG,Log.getStackTraceString(new Throwable()));    }  }  if (mService == null)   Log.w(TAG,"Proxy not attached to service");  return false;}  }
class C{  @Override public boolean hasOverlappingRendering(){  return false;}  }
class C{  public void accept(boolean settle) throws Exception {  if (receiver == null) {    throw new IllegalStateException("Can't accept non-received message.");  }  receiver.accept(delivery,settle);}  }
class C{  private MonitorProvider(){}  }
class C{  private void rebuildTable(){  table.saveSelection(beanColIdx);  final XTableModel model=table.getXTableModel();  model.getDataVector().clear();  model.fireTableDataChanged();  for (  final IRepFilterBean filterBean : repFiltersBean.getRepFilterBeanList()) {    final Vector<Object> row=Utils.<Object>asNewVector(filterBean,filterBean.getEnabled(),filterBean.getConnection(),filterBean.getFilterByGroup(),filterBean.getFilterBy(),filterBean.getOperator(),filterBean.getValue(),filterBean.getComment());    model.addRow(row);  }  table.packColumns(table.convertColumnIndexToView(enabledColIdx));  table.restoreSelection(beanColIdx);  rebuildPreview();}  }
class C{  public boolean isFocusTraversable(){  Component comp=getTextComponent();  if (comp instanceof JTextComponent) {    if (((JTextComponent)comp).isEditable()) {      return true;    }  }  return false;}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  }  if (object instanceof Set) {    Set<?> s=(Set<?>)object;    try {      return size() == s.size() && containsAll(s);    } catch (    NullPointerException ignored) {      return false;    }catch (    ClassCastException ignored) {      return false;    }  }  return false;}  }
class C{  public static void e(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg,throwable);}  }
class C{  private void initializeListeners(){  m_node.getFunction().addListener(m_functionListener);}  }
class C{  @Override public boolean contains(Point2D.Double p){  return getHitShape().contains(p);}  }
class C{  @Override public boolean isStartDocument(){  return eventType == XMLStreamConstants.START_DOCUMENT;}  }
class C{  public void stop(){  this.fadeOut=true;}  }
class C{  @RequestMapping(method=RequestMethod.GET,value="/hello",produces="text/plain") public String hello(){  return "Hello from Spring Boot";}  }
class C{  public void endCDATA() throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endCDATA");  if (null != m_lexicalHandler) {    m_lexicalHandler.endCDATA();  }}  }
class C{  public ColorSliderUI(JSlider b){  super(b);}  }
class C{  @CloudUnitSecurable @ResponseBody @RequestMapping(value="/restart",method=RequestMethod.POST) public JsonResponse restartApplication(@RequestBody JsonInput input) throws ServiceException, CheckException, InterruptedException {  input.validateStartApp();  String applicationName=input.getApplicationName();  User user=authentificationUtils.getAuthentificatedUser();  Application application=applicationService.findByNameAndUser(user,applicationName);  if (application != null && application.getStatus().equals(Status.PENDING)) {    return new HttpErrorServer("application is pending. No action allowed.");  }  authentificationUtils.canStartNewAction(user,application,Locale.ENGLISH);  if (application.getStatus().equals(Status.START)) {    applicationService.stop(application);    applicationService.start(application);  } else   if (application.getStatus().equals(Status.STOP)) {    applicationService.start(application);  }  return new HttpOk();}  }
class C{  public Complex conjugate(){  return new Complex(mLeft,-mRight);}  }
class C{  public static S2Point robustCrossProd(S2Point a,S2Point b){  S2Point x=S2Point.crossProd(S2Point.add(b,a),S2Point.sub(b,a));  if (!x.equals(new S2Point(0,0,0))) {    return x;  }  return ortho(a);}  }
class C{  @Override public int compare(IType o1,IType o2){  IType m1=o1;  IType m2=o2;  int idx1, idx2;  try {    ISourceRange sr1=m1.getSourceRange();    ISourceRange sr2=m2.getSourceRange();    if (sr1 == null || sr2 == null) {      return 0;    }    idx1=sr1.getOffset();    idx2=sr2.getOffset();  } catch (  JavaModelException e) {    FindbugsPlugin.getDefault().logException(e,"SourceOffsetComparator failed");    return 0;  }  return idx1 - idx2;}  }
class C{  public K peekFirst(){  K[] a=array;  return a.length == 0 ? null : a[0];}  }
class C{  public CacheNode(String key,T value){  this.key=key;  this.value=value;  this.lastAccessMillis=System.currentTimeMillis();}  }
class C{  public java.lang.StringBuilder insert(int offset,boolean b){  return null;}  }
class C{  public double[] distributionForInstance(Instance inst) throws Exception {  m_ReplaceMissingValues.input(inst);  inst=m_ReplaceMissingValues.output();  m_NominalToBinary.input(inst);  inst=m_NominalToBinary.output();  return m_boostedModel.distributionForInstance(inst);}  }
class C{  public void testReceive_NonBlockNoServerReadonly() throws Exception {  this.channel1.configureBlocking(false);  receiveNoServerReadonly();}  }
class C{  protected String loadDocumentDetails(){  setC_Currency_ID(NO_CURRENCY);  m_issue=(MProjectIssue)getPO();  setDateDoc(m_issue.getMovementDate());  setDateAcct(m_issue.getMovementDate());  m_line=new DocLine(m_issue,this);  m_line.setQty(m_issue.getMovementQty(),true);  if (m_line.getM_Product_ID() == 0)   log.warning(m_line.toString() + " - No Product");  log.fine(m_line.toString());  return null;}  }
class C{  private static void usage(){  System.out.println("Syntax: SidewikiEntryFeedDemo <username> <password> <web page url>");  System.out.println("\nPrints entries written for given web page. " + "The username and password are used for authentication.");}  }
class C{  public boolean hasMediaGroup(){  return hasExtension(MediaGroup.class);}  }
class C{  public DRand(int seed){  setSeed(seed);}  }
class C{  @Override public synchronized T read(T dto) throws Exception {  Cursor cursor=db.query(transformer.getTableName(),transformer.getFields(),transformer.getWhereClause(dto),null,null,null,null);  T object=null;  if (cursor.moveToFirst()) {    object=transformer.transform(cursor);  }  return object;}  }
class C{  @ApiOperation(value="Logout",notes="Logout from a Codenvy account",position=1) @ApiResponses(value={@ApiResponse(code=200,message="OK"),@ApiResponse(code=400,message="Authentication error")}) @POST @Path("/logout") public Response logout(@ApiParam(value="Auth token",required=true) @QueryParam("token") String token,@ApiParam(value="Existing auth cookie. It is used to get deleted to a obtain new cookie") @CookieParam("session-access-key") Cookie tokenAccessCookie,@Context UriInfo uriInfo){  return dao.logout(token,tokenAccessCookie,uriInfo);}  }
class C{  public IntPriorityQueue(int initialSize,Mode fastValueRemove){  this(initialSize,naturalComparator,fastValueRemove);}  }
class C{  private void readObject(final java.io.ObjectInputStream in) throws IOException {  populateLevels();  int levelInt=in.readInt();  if (Level.INFO.intValue() == levelInt) {    level=Level.INFO;  } else   if (Level.CONFIG.intValue() == levelInt) {    level=Level.CONFIG;  } else   if (Level.FINE.intValue() == levelInt) {    level=Level.FINE;  } else   if (Level.FINER.intValue() == levelInt) {    level=Level.FINER;  } else   if (Level.FINEST.intValue() == levelInt) {    level=Level.FINEST;  } else   if (Level.SEVERE.intValue() == levelInt) {    level=Level.SEVERE;  } else   if (Level.WARNING.intValue() == levelInt) {    level=Level.WARNING;  } else {    level=Level.FINEST;  }}  }
class C{  public static Map<VirtualFile,List<FilePath>> sortFilePathsByGitRoot(final Collection<FilePath> files) throws VcsException {  return sortFilePathsByGitRoot(files,false);}  }
class C{  public void end(String namespace,String name) throws Exception {  DisplayNameBean top=null;  try {    top=(DisplayNameBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[DisplayNameRule]{" + digester.getMatch() + "} Pop ("+ top.getLang()+ ")");  }}  }
class C{  public XMLDumpTableInputStreamThread(InputStream iStream,OutputStream oStream,DumpTableEnum table) throws IOException {  super("xml2sql");switch (table) {case PAGE:    xmlReader=new PageReader(iStream,new NamespaceFilter(new PageWriter(oStream),ENABLED_NAMESPACES));  break;case REVISION:xmlReader=new RevisionReader(iStream,new NamespaceFilter(new RevisionWriter(oStream),ENABLED_NAMESPACES));break;case TEXT:xmlReader=new TextReader(iStream,new NamespaceFilter(new TextWriter(oStream),ENABLED_NAMESPACES));break;}}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (val instanceof Float) {          V k=unwrapKey(key);          float v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  private static char asciiToLowerCase(final char c){  return c >= 'A' && c <= 'Z' ? (char)(c + 32) : c;}  }
class C{  public static String pad(String source,String padChar,int length,boolean leftPad){  StringBuffer temp=new StringBuffer();  if (leftPad) {    for (int i=0; i < length; i++) {      temp.append(padChar);    }    temp.append(source);  } else {    temp.append(source);    for (int i=0; i < length; i++) {      temp.append(padChar);    }  }  return temp.toString();}  }
class C{  public void transmitted(int n){  total+=n;}  }
class C{  public void validate(FacesContext facesContext,UIComponent component,Object value) throws ValidatorException {  if (value == null) {    return;  }  String color=value.toString();  String orig_value=color;  if (color.length() == 0) {    return;  }  color=color.replaceAll("\\s","");  if (color.matches("#[a-fA-F0-9]*") && (color.length() == 4 || color.length() == 7)) {    return;  }  if (color.matches("[rR][gG][bB]\\([\\d,%]*\\)")) {    color=color.substring(4,color.length() - 1);    String a[]=null;    int max;    if (color.indexOf("%") >= 0) {      color=color.replaceAll("%","");      max=100;    } else {      max=255;    }    a=color.split(",");    if (containsNumbersInRange(a,10,0,max)) {      return;    }  }  if (colorSet.contains(color.toLowerCase())) {    return;  }  Object[] args=new Object[]{orig_value};  String label=JSFUtils.getLabel(component);  ValidationException e=new ValidationException(ValidationException.ReasonEnum.CSS_COLOR,label,null);  String text=JSFUtils.getText(e.getMessageKey(),args,facesContext);  throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,text,null));}  }
class C{  protected final Object clone(){  return this;}  }
class C{  public Pair<ByteBuffer,CLEvent> mapLater(CLQueue queue,MapFlags flags,long offsetX,long offsetY,long lengthX,long lengthY,long rowPitch,boolean blocking,CLEvent... eventsToWaitFor){  return map(queue,flags,pointerToSizeTs(offsetX,offsetY),pointerToSizeTs(lengthX,lengthY),rowPitch,null,blocking,eventsToWaitFor);}  }
class C{  public ContentTypeAdapter(IContentType contentType){  Assert.isNotNull(contentType);  fContentType=contentType;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.CONTENT_NODE__OWNER:    if (resolve)     return getOwner();  return basicGetOwner();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public UserModificationConstraintException(String message,UserModificationConstraintExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  public void replaceLoad(String type,String oldLoadName,String newLoadName){  List<RollingStock> cars=getList();  for (  RollingStock rs : cars) {    Car car=(Car)rs;    if (car.getTypeName().equals(type) && car.getLoadName().equals(oldLoadName)) {      if (newLoadName != null) {        car.setLoadName(newLoadName);      } else {        car.setLoadName(CarLoads.instance().getDefaultEmptyName());      }    }  }}  }
class C{  @Override protected void onSizeChanged(int w,int h,int oldw,int oldh){  super.onSizeChanged(w,h,oldw,oldh);  width=w;  height=h;}  }
class C{  String checkString(String s,int base){  if (s == null) {    throw new NullPointerException("s == null");  }  int charCount=s.length();  int i=0;  if (charCount > 0) {    char ch=s.charAt(0);    if (ch == '+') {      s=s.substring(1);      --charCount;    } else     if (ch == '-') {      ++i;    }  }  if (charCount - i == 0) {    throw invalidBigInteger(s);  }  boolean nonAscii=false;  for (; i < charCount; ++i) {    char ch=s.charAt(i);    if (Character.digit(ch,base) == -1) {      throw invalidBigInteger(s);    }    if (ch > 128) {      nonAscii=true;    }  }  return nonAscii ? toAscii(s,base) : s;}  }
class C{  public BollingerBandsSeries(Strategy strategy,String name,String type,String description,Boolean displayOnChart,Integer chartRGBColor,Boolean subChart){  super(strategy,name,type,description,displayOnChart,chartRGBColor,subChart);}  }
class C{  public boolean isSortingProperties(){  return model.isSortingProperties();}  }
class C{  public boolean isRealtimeBarsRunning(Contract contract){  if (m_client.isConnected()) {    if (m_realTimeBarsRequests.containsKey(contract.getId())) {      return true;    }  }  return false;}  }
class C{  @Override public void executeAction(Agent a,Action agentAction){  if (ACTION_MOVE_RIGHT == agentAction) {    envState.setAgentLocation(a,LOCATION_B);    updatePerformanceMeasure(a,-1);  } else   if (ACTION_MOVE_LEFT == agentAction) {    envState.setAgentLocation(a,LOCATION_A);    updatePerformanceMeasure(a,-1);  } else   if (ACTION_SUCK == agentAction) {    if (VacuumEnvironment.LocationState.Dirty == envState.getLocationState(envState.getAgentLocation(a))) {      String current_location=envState.getAgentLocation(a);      String adjacent_location=(current_location.equals("A")) ? "B" : "A";      envState.setLocationState(current_location,VacuumEnvironment.LocationState.Clean);      if (Math.random() > 0.5) {        envState.setLocationState(adjacent_location,VacuumEnvironment.LocationState.Clean);      }    } else     if (VacuumEnvironment.LocationState.Clean == envState.getLocationState(envState.getAgentLocation(a))) {      if (Math.random() > 0.5) {        envState.setLocationState(envState.getAgentLocation(a),VacuumEnvironment.LocationState.Dirty);      }    }  } else   if (agentAction.isNoOp()) {    isDone=true;  }}  }
class C{  public GetRequest(String index,String type,String id){  super(index);  this.type=type;  this.id=id;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_ELEMENT___GET_ANNOTATIONS:      return N4JSPackage.N4_MEMBER_ANNOTATION_LIST___GET_ANNOTATIONS;default :    return -1;}}if (baseClass == ModifiableElement.class) {switch (baseOperationID) {default :  return -1;}}if (baseClass == TypeProvidingElement.class) {switch (baseOperationID) {case N4JSPackage.TYPE_PROVIDING_ELEMENT___GET_DECLARED_TYPE_REF:return N4JSPackage.N4_MEMBER_ANNOTATION_LIST___GET_DECLARED_TYPE_REF;default :return -1;}}if (baseClass == TypableElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:return N4JSPackage.N4_MEMBER_ANNOTATION_LIST___GET_NAME;default :return -1;}}if (baseClass == N4MemberDeclaration.class) {switch (baseOperationID) {case N4JSPackage.N4_MEMBER_DECLARATION___GET_DEFINED_TYPE_ELEMENT:return N4JSPackage.N4_MEMBER_ANNOTATION_LIST___GET_DEFINED_TYPE_ELEMENT;case N4JSPackage.N4_MEMBER_DECLARATION___IS_DECLARED_STATIC:return N4JSPackage.N4_MEMBER_ANNOTATION_LIST___IS_DECLARED_STATIC;case N4JSPackage.N4_MEMBER_DECLARATION___IS_STATIC:return N4JSPackage.N4_MEMBER_ANNOTATION_LIST___IS_STATIC;case N4JSPackage.N4_MEMBER_DECLARATION___IS_DECLARED_FINAL:return N4JSPackage.N4_MEMBER_ANNOTATION_LIST___IS_DECLARED_FINAL;case N4JSPackage.N4_MEMBER_DECLARATION___IS_FINAL:return N4JSPackage.N4_MEMBER_ANNOTATION_LIST___IS_FINAL;case N4JSPackage.N4_MEMBER_DECLARATION___IS_CONSTRUCTOR:return N4JSPackage.N4_MEMBER_ANNOTATION_LIST___IS_CONSTRUCTOR;case N4JSPackage.N4_MEMBER_DECLARATION___IS_CALLABLE_CONSTRUCTOR:return N4JSPackage.N4_MEMBER_ANNOTATION_LIST___IS_CALLABLE_CONSTRUCTOR;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public Object internalPut(String key,Object value){  return context.put(key,value);}  }
class C{  protected long writeOnIndex(final int n,final byte[][] keys,final byte[][] vals){  final LongAggregator resultHandler=new LongAggregator();  textIndexer.getIndex().submit(0,n,keys,vals,(textIndexer.isOverwrite() ? TextIndexWriteProc.IndexWriteProcConstructor.OVERWRITE : TextIndexWriteProc.IndexWriteProcConstructor.NO_OVERWRITE),resultHandler);  return resultHandler.getResult();}  }
class C{  @Override public void analyse(Project project,SensorContext context){  File reportFile;  ClassLoader initialClassLoader=Thread.currentThread().getContextClassLoader();  try {    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());    reportFile=createPmdReport(project);  }  finally {    Thread.currentThread().setContextClassLoader(initialClassLoader);  }  DelphiPmdXmlReportParser parser=new DelphiPmdXmlReportParser(delphiProjectHelper,perspectives);  parser.parse(reportFile);}  }
class C{  public table addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public static ChartDays newInstance(Integer value){  final ChartDays returnInstance=new ChartDays();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.859 -0500",hash_original_method="12134C3215A59528551E59AC16868712",hash_generated_method="93EE9BCAF5076F45C58A977C9F074FBD") private void parseArgs(String args[]) throws IllegalArgumentException {  int curArg=0;  for (; curArg < args.length; curArg++) {    String arg=args[curArg];    if (arg.equals("--")) {      curArg++;      break;    } else     if (arg.startsWith("--setuid=")) {      if (uidSpecified) {        throw new IllegalArgumentException("Duplicate arg specified");      }      uidSpecified=true;      uid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));    } else     if (arg.startsWith("--setgid=")) {      if (gidSpecified) {        throw new IllegalArgumentException("Duplicate arg specified");      }      gidSpecified=true;      gid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));    } else     if (arg.startsWith("--target-sdk-version=")) {      if (targetSdkVersionSpecified) {        throw new IllegalArgumentException("Duplicate target-sdk-version specified");      }      targetSdkVersionSpecified=true;      targetSdkVersion=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));    } else     if (arg.equals("--enable-debugger")) {      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;    } else     if (arg.equals("--enable-safemode")) {      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;    } else     if (arg.equals("--enable-checkjni")) {      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;    } else     if (arg.equals("--enable-jni-logging")) {      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;    } else     if (arg.equals("--enable-assert")) {      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;    } else     if (arg.equals("--peer-wait")) {      peerWait=true;    } else     if (arg.equals("--runtime-init")) {      runtimeInit=true;    } else     if (arg.startsWith("--capabilities=")) {      if (capabilitiesSpecified) {        throw new IllegalArgumentException("Duplicate arg specified");      }      capabilitiesSpecified=true;      String capString=arg.substring(arg.indexOf('=') + 1);      String[] capStrings=capString.split(",",2);      if (capStrings.length == 1) {        effectiveCapabilities=Long.decode(capStrings[0]);        permittedCapabilities=effectiveCapabilities;      } else {        permittedCapabilities=Long.decode(capStrings[0]);        effectiveCapabilities=Long.decode(capStrings[1]);      }    } else     if (arg.startsWith("--rlimit=")) {      String[] limitStrings=arg.substring(arg.indexOf('=') + 1).split(",");      if (limitStrings.length != 3) {        throw new IllegalArgumentException("--rlimit= should have 3 comma-delimited ints");      }      int[] rlimitTuple=new int[limitStrings.length];      for (int i=0; i < limitStrings.length; i++) {        rlimitTuple[i]=Integer.parseInt(limitStrings[i]);      }      if (rlimits == null) {        rlimits=new ArrayList();      }      rlimits.add(rlimitTuple);    } else     if (arg.equals("-classpath")) {      if (classpath != null) {        throw new IllegalArgumentException("Duplicate arg specified");      }      try {        classpath=args[++curArg];      } catch (      IndexOutOfBoundsException ex) {        throw new IllegalArgumentException("-classpath requires argument");      }    } else     if (arg.startsWith("--setgroups=")) {      if (gids != null) {        throw new IllegalArgumentException("Duplicate arg specified");      }      String[] params=arg.substring(arg.indexOf('=') + 1).split(",");      gids=new int[params.length];      for (int i=params.length - 1; i >= 0; i--) {        gids[i]=Integer.parseInt(params[i]);      }    } else     if (arg.equals("--invoke-with")) {      if (invokeWith != null) {        throw new IllegalArgumentException("Duplicate arg specified");      }      try {        invokeWith=args[++curArg];      } catch (      IndexOutOfBoundsException ex) {        throw new IllegalArgumentException("--invoke-with requires argument");      }    } else     if (arg.startsWith("--nice-name=")) {      if (niceName != null) {        throw new IllegalArgumentException("Duplicate arg specified");      }      niceName=arg.substring(arg.indexOf('=') + 1);    } else {      break;    }  }  if (runtimeInit && classpath != null) {    throw new IllegalArgumentException("--runtime-init and -classpath are incompatible");  }  remainingArgs=new String[args.length - curArg];  System.arraycopy(args,curArg,remainingArgs,0,remainingArgs.length);}  }
class C{  public void copyState(Lifecycle source){  _state=source._state;}  }
class C{  public SimpleQueryParser(Analyzer analyzer,String field){  this(analyzer,Collections.singletonMap(field,1.0F));}  }
class C{  public InvocationManagerBuilder<I> cacheSize(int size){  _cacheSize=Math.max(size,16);  return this;}  }
class C{  public void subscribe(String clientHandle,String[] topic,int[] qos,String invocationContext,String activityToken){  MqttConnection client=getConnection(clientHandle);  client.subscribe(topic,qos,invocationContext,activityToken);}  }
class C{  public StateSetEnumerator(){}  }
class C{  public void beginInternalAtomicEdit(){  if (++internalAtomicEditDepth == 1) {    if (compoundEdit != null)     compoundEdit.end();    compoundEdit=new RCompoundEdit();  }}  }
class C{  public boolean copyImage(Image img,int dx,int dy,int sx,int sy,int width,int height,Color bgcolor,ImageObserver observer){  try {    return imagepipe.copyImage(this,img,dx,dy,sx,sy,width,height,bgcolor,observer);  } catch (  InvalidPipeException e) {    try {      revalidateAll();      return imagepipe.copyImage(this,img,dx,dy,sx,sy,width,height,bgcolor,observer);    } catch (    InvalidPipeException e2) {      return false;    }  } finally {    surfaceData.markDirty();  }}  }
class C{  @Override protected boolean isArgument(){  return false;}  }
class C{  static void calculate(){  final Map<String,Collection<Point>> m_placements=new HashMap<>();  final String mapDir=s_mapFolderLocation == null ? getMapDirectory() : s_mapFolderLocation.getName();  if (mapDir == null) {    System.out.println("You need to specify a map name for this to work");    System.out.println("Shutting down");    System.exit(0);  }  File file=new File(ClientFileSystemHelper.getUserMapsFolder() + File.separator + mapDir+ File.separator+ "map.properties");  if (!file.exists()) {    file=new File(ClientFileSystemHelper.getRootFolder() + File.separator + "maps"+ File.separator+ mapDir+ File.separator+ "map.properties");  }  if (file.exists() && s_mapFolderLocation == null) {    s_mapFolderLocation=file.getParentFile();  }  if (!placeDimensionsSet) {    try {      if (file.exists()) {        double scale=unit_zoom_percent;        int width=unit_width;        int height=unit_height;        boolean found=false;        final String scaleProperty=MapData.PROPERTY_UNITS_SCALE + "=";        final String widthProperty=MapData.PROPERTY_UNITS_WIDTH + "=";        final String heightProperty=MapData.PROPERTY_UNITS_HEIGHT + "=";        final FileReader reader=new FileReader(file);        final LineNumberReader reader2=new LineNumberReader(reader);        int i=0;        while (true) {          reader2.setLineNumber(i);          final String line=reader2.readLine();          if (line == null) {            break;          }          if (line.contains(scaleProperty)) {            try {              scale=Double.parseDouble(line.substring(line.indexOf(scaleProperty) + scaleProperty.length()).trim());              found=true;            } catch (            final NumberFormatException ex) {            }          }          if (line.contains(widthProperty)) {            try {              width=Integer.parseInt(line.substring(line.indexOf(widthProperty) + widthProperty.length()).trim());              found=true;            } catch (            final NumberFormatException ex) {            }          }          if (line.contains(heightProperty)) {            try {              height=Integer.parseInt(line.substring(line.indexOf(heightProperty) + heightProperty.length()).trim());              found=true;            } catch (            final NumberFormatException ex) {            }          }        }        reader2.close();        i++;        if (found) {          final int result=JOptionPane.showConfirmDialog(new JPanel(),"A map.properties file was found in the map's folder, " + "\r\n do you want to use the file to supply the info for the placement box size? " + "\r\n Zoom = " + scale + ",  Width = "+ width+ ",  Height = "+ height+ ",    Result = ("+ ((int)(scale * width))+ "x"+ ((int)(scale * height))+ ")","File Suggestion",1);          if (result == 0) {            unit_zoom_percent=scale;            PLACEWIDTH=(int)(unit_zoom_percent * width);            PLACEHEIGHT=(int)(unit_zoom_percent * height);            placeDimensionsSet=true;          }        }      }    } catch (    final Exception ex) {    }  }  if (!placeDimensionsSet || JOptionPane.showConfirmDialog(new JPanel(),"Placement Box Size already set (" + PLACEWIDTH + "x"+ PLACEHEIGHT+ "), "+ "do you wish to continue with this?\r\nSelect Yes to continue, Select No to override and change the size.","Placement Box Size",JOptionPane.YES_NO_OPTION) == 1) {    try {      final String result=getUnitsScale();      try {        unit_zoom_percent=Double.parseDouble(result.toLowerCase());      } catch (      final NumberFormatException ex) {      }      final String width=JOptionPane.showInputDialog(null,"Enter the unit's image width in pixels (unscaled / without zoom).\r\n(e.g. 48)");      if (width != null) {        try {          PLACEWIDTH=(int)(unit_zoom_percent * Integer.parseInt(width));        } catch (        final NumberFormatException ex) {        }      }      final String height=JOptionPane.showInputDialog(null,"Enter the unit's image height in pixels (unscaled / without zoom).\r\n(e.g. 48)");      if (height != null) {        try {          PLACEHEIGHT=(int)(unit_zoom_percent * Integer.parseInt(height));        } catch (        final NumberFormatException ex) {        }      }      placeDimensionsSet=true;    } catch (    final Exception ex) {    }  }  try {    s_mapData=new MapData(mapDir);  } catch (  final Exception ex) {    JOptionPane.showMessageDialog(null,new JLabel("Could not find map. Make sure it is in finalized location and contains centers.txt and polygons.txt"));    System.out.println("Caught Exception.");    System.out.println("Could be due to some missing text files.");    System.out.println("Or due to the map folder not being in the right location.");    ex.printStackTrace();    System.exit(0);  }  textOptionPane.show();  textOptionPane.appendNewLine("Place Dimensions in pixels, being used: " + PLACEWIDTH + "x"+ PLACEHEIGHT+ "\r\n");  textOptionPane.appendNewLine("Calculating, this may take a while...\r\n");  final Iterator<String> terrIter=s_mapData.getTerritories().iterator();  while (terrIter.hasNext()) {    final String name=terrIter.next();    List<Point> points;    if (s_mapData.hasContainedTerritory(name)) {      final Set<Polygon> containedPolygons=new HashSet<>();      for (      final String containedName : s_mapData.getContainedTerritory(name)) {        containedPolygons.addAll(s_mapData.getPolygons(containedName));      }      points=getPlacementsStartingAtTopLeft(s_mapData.getPolygons(name),s_mapData.getBoundingRect(name),s_mapData.getCenter(name),containedPolygons);      m_placements.put(name,points);    } else {      points=getPlacementsStartingAtMiddle(s_mapData.getPolygons(name),s_mapData.getBoundingRect(name),s_mapData.getCenter(name));      m_placements.put(name,points);    }    textOptionPane.appendNewLine(name + ": " + points.size());  }  textOptionPane.appendNewLine("\r\nAll Finished!");  textOptionPane.countDown();  try {    final String fileName=new FileSave("Where To Save place.txt ?","place.txt",s_mapFolderLocation).getPathString();    if (fileName == null) {      textOptionPane.appendNewLine("You chose not to save, Shutting down");      textOptionPane.dispose();      System.exit(0);    }    PointFileReaderWriter.writeOneToMany(new FileOutputStream(fileName),m_placements);    textOptionPane.appendNewLine("Data written to :" + new File(fileName).getCanonicalPath());  } catch (  final Exception ex) {    ex.printStackTrace();    textOptionPane.dispose();    System.exit(0);  }  textOptionPane.dispose();  System.exit(0);}  }
class C{  public AxSfQueryResults clone(Collection r){  AxSfQueryResults newResults=new AxSfQueryResults();  newResults.setResults(r);  newResults.setTotalQuerySize(this.totalQuerySize);  newResults.setCurrentResultsSize(this.currentResultsSize);  newResults.setPageSize(this.pageSize);  newResults.setCurrentFirstRow(this.currentFirstRow);  newResults.setCurrentLastRow(this.currentLastRow);  newResults.setBookId(this.bookId);  return newResults;}  }
class C{  public boolean contains(Component cmp){  if (cmp == null) {    return false;  }  cmp=cmp.getParent();  while (cmp != null) {    if (cmp == this) {      return true;    }    cmp=cmp.getParent();  }  return false;}  }
class C{  protected void initialize(){  children=new HashMap(1000);  Enumeration entries=zipFile.entries();  while (entries.hasMoreElements()) {    ZipEntry entry=(ZipEntry)entries.nextElement();    if (!entry.isDirectory()) {      IPath path=new Path(entry.getName()).addTrailingSeparator();      int pathSegmentCount=path.segmentCount();      for (int i=1; i < pathSegmentCount; i++) {        createContainer(path.uptoSegment(i));      }      createFile(entry);    }  }}  }
class C{  public static Function<String,JsonObject> fromString(){  JsonParser jp=new JsonParser();  return null;}  }
class C{  protected int nextInElementDeclaration() throws IOException, XMLException {switch (current) {case 0x9:case 0xA:case 0xD:case 0x20:    do {      nextChar();    } while (current != -1 && XMLUtilities.isXMLSpace((char)current));  return LexicalUnits.S;case '>':nextChar();context=DTD_DECLARATIONS_CONTEXT;return LexicalUnits.END_CHAR;case '%':nextChar();int t=readName(LexicalUnits.PARAMETER_ENTITY_REFERENCE);if (current != ';') {throw createXMLException("malformed.parameter.entity");}nextChar();return t;case 'E':return readIdentifier("MPTY",LexicalUnits.EMPTY_IDENTIFIER,LexicalUnits.NAME);case 'A':return readIdentifier("NY",LexicalUnits.ANY_IDENTIFIER,LexicalUnits.NAME);case '?':nextChar();return LexicalUnits.QUESTION;case '+':nextChar();return LexicalUnits.PLUS;case '*':nextChar();return LexicalUnits.STAR;case '(':nextChar();return LexicalUnits.LEFT_BRACE;case ')':nextChar();return LexicalUnits.RIGHT_BRACE;case '|':nextChar();return LexicalUnits.PIPE;case ',':nextChar();return LexicalUnits.COMMA;case '#':return readIdentifier("PCDATA",LexicalUnits.PCDATA_IDENTIFIER,-1);default :return readName(LexicalUnits.NAME);}}  }
class C{  @Override public boolean match(final String host,final int port,final String path,final boolean secure,final Cookie cookie){  LOG.trace("enter RFC2965.match(" + "String, int, String, boolean, Cookie");  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (cookie instanceof Cookie2) {    if (cookie.isPersistent() && cookie.isExpired()) {      return false;    }    final CookieOrigin origin=new CookieOrigin(getEffectiveHost(host),port,path,secure);    for (final Iterator<CookieAttributeHandler> i=getAttribHandlerIterator(); i.hasNext(); ) {      final CookieAttributeHandler handler=i.next();      if (!handler.match(cookie,origin)) {        return false;      }    }    return true;  } else {    return rfc2109.match(host,port,path,secure,cookie);  }}  }
class C{  @Override @Inline public ObjectReference traceObject(TransitiveClosure trace,ObjectReference object){  return object;}  }
class C{  private static void doLogging() throws IOException {  StringBuilder msg=new StringBuilder();  for (  NetworkInterface nic : NetworkUtils.getInterfaces()) {    msg.append(System.lineSeparator());    msg.append(nic.getName());    msg.append(System.lineSeparator());    if (!nic.getName().equals(nic.getDisplayName())) {      msg.append(INDENT);      msg.append(nic.getDisplayName());      msg.append(System.lineSeparator());    }    List<InterfaceAddress> addresses=nic.getInterfaceAddresses();    for (    InterfaceAddress address : addresses) {      if (address.getAddress() instanceof Inet6Address == false) {        msg.append(INDENT);        msg.append(formatAddress(address));        msg.append(System.lineSeparator());      }    }    for (    InterfaceAddress address : addresses) {      if (address.getAddress() instanceof Inet6Address) {        msg.append(INDENT);        msg.append(formatAddress(address));        msg.append(System.lineSeparator());      }    }    byte hardware[]=nic.getHardwareAddress();    if (hardware != null) {      msg.append(INDENT);      msg.append("hardware ");      for (int i=0; i < hardware.length; i++) {        if (i > 0) {          msg.append(":");        }        msg.append(String.format(Locale.ROOT,"%02X",hardware[i]));      }      msg.append(System.lineSeparator());    }    msg.append(INDENT);    msg.append(formatFlags(nic));    msg.append(System.lineSeparator());  }  logger.debug("configuration:" + System.lineSeparator() + "{}",msg.toString());}  }
class C{  public SerializableInstance(int arg0){  super(arg0);}  }
class C{  void loadFinished(){  updateCenterPanel();  _centerPanel.revalidate();  _centerPanel.repaint();  refresh();}  }
class C{  public static RegistrationException convertToApi(org.oscm.internal.types.exception.RegistrationException oldEx){  org.oscm.internal.types.exception.beans.RegistrationExceptionBean bean=(org.oscm.internal.types.exception.beans.RegistrationExceptionBean)getFaultInfo(oldEx);  RegistrationExceptionBean v13Bean=convertBeanToApi(bean,RegistrationExceptionBean.class);  if (bean != null) {    RegistrationException.Reason v13Reason=EnumConverter.convert(bean.getReason(),RegistrationException.Reason.class);    v13Bean.setReason(v13Reason);  }  return newApiException(RegistrationException.class,getExceptionMessage(oldEx),v13Bean,oldEx.getStackTrace());}  }
class C{  public Base64(){  this(0);}  }
class C{  public static <A>ObservableTValue<A> of(final Observable<A> obs){  return ObservableT.fromOptional(Optional.of(obs));}  }
class C{  public ProtocolVersion(String v) throws Exception {  setVersion(v);}  }
class C{  private void validateParameterDefinition(VOParameterDefinition voParameterDefinition){  Assert.assertTrue(voParameterDefinition.isConfigurable());  Assert.assertEquals("bla",voParameterDefinition.getDefaultValue());  Assert.assertEquals(123,voParameterDefinition.getKey());  Assert.assertTrue(voParameterDefinition.isMandatory());  Assert.assertEquals(L2000,voParameterDefinition.getMaxValue());  Assert.assertNull(voParameterDefinition.getMinValue());  Assert.assertEquals("diskSpace",voParameterDefinition.getParameterId());  Assert.assertEquals(ParameterType.SERVICE_PARAMETER,voParameterDefinition.getParameterType());  Assert.assertEquals(ParameterModificationType.STANDARD,voParameterDefinition.getModificationType());  Assert.assertEquals(ParameterValueType.INTEGER,voParameterDefinition.getValueType());  Assert.assertEquals(0,voParameterDefinition.getVersion());  Assert.assertNotNull(voParameterDefinition.getParameterOptions());  Assert.assertEquals(0,voParameterDefinition.getParameterOptions().size());}  }
class C{  @Override public void onAnswerChecked(boolean answer,boolean switchToNext){  User currentUser=mUserManager.getCurrentUser();  mCompletionLogic.updateAfterAnswer(mAllDueChallenges.get(mChallengeNo),currentUser.getId(),answer ? CompletionLogic.ANSWER_RIGHT : CompletionLogic.ANSWER_WRONG);  Statistics statistics=new Statistics(null,answer,new Date(),currentUser.getId(),mAllDueChallenges.get(mChallengeNo));  mStatisticsDataSource.create(statistics);  if (switchToNext) {    loadNextScreen();  }}  }
class C{  public ImmutableMultimap<State,Service> servicesByState(){  return state.servicesByState();}  }
class C{  public static void writeMetadataFromString(OFFlowMod.Builder fmb,String inst,Logger log){  if (inst == null || inst.equals("")) {    return;  }  if (fmb.getVersion().compareTo(OFVersion.OF_11) < 0) {    log.error("Write Metadata Instruction not supported in OpenFlow 1.0");    return;  }  OFInstructionWriteMetadata.Builder ib=OFFactories.getFactory(fmb.getVersion()).instructions().buildWriteMetadata();  String[] keyValue=inst.split("/");  if (keyValue.length > 2) {    throw new IllegalArgumentException("[Metadata, Mask] " + keyValue + " does not have form 'metadata/mask' or 'metadata' for parsing "+ inst);  } else   if (keyValue.length == 1) {    log.debug("No mask detected in OFInstructionWriteMetaData string.");  } else   if (keyValue.length == 2) {    log.debug("Detected mask in OFInstructionWriteMetaData string.");  }  if (keyValue[0].startsWith("0x")) {    ib.setMetadata(U64.of(Long.valueOf(keyValue[0].replaceFirst("0x",""),16)));  } else {    ib.setMetadata(U64.of(Long.valueOf(keyValue[0])));  }  if (keyValue.length == 2) {    if (keyValue[1].startsWith("0x")) {      ib.setMetadataMask(U64.of(Long.valueOf(keyValue[1].replaceFirst("0x",""),16)));    } else {      ib.setMetadataMask(U64.of(Long.valueOf(keyValue[1])));    }  } else {    ib.setMetadataMask(U64.NO_MASK);  }  log.debug("Appending WriteMetadata instruction: {}",ib.build());  appendInstruction(fmb,ib.build());  log.debug("All instructions after append: {}",fmb.getInstructions());}  }
class C{  public static String[] stripAll(String[] strs){  return stripAll(strs,null);}  }
class C{  boolean isReusable(){  return true;}  }
class C{  public void paint(Graphics g){  Graphics2D g2=(Graphics2D)g;  FontMetrics fm=getFontMetrics(DisplayNodeUtils.getFont());  int stringX=6;  int stringY=fm.getMaxAscent() + 1;  g2.setColor(isSelected() ? DisplayNodeUtils.getNodeSelectedFillColor() : DisplayNodeUtils.getNodeFillColor());  g2.fill(getShape());  g2.setColor(Color.BLACK);  g2.draw(getShape());  g2.setColor(Color.BLACK);  g2.drawString(getName(),stringX,stringY);}  }
class C{  public void sendMessage(SIPMessage sipMessage) throws IOException {  if (sipStack.isLoggingEnabled() && this.sipStack.isLogStackTraceOnMessageSend()) {    if (sipMessage instanceof SIPRequest && ((SIPRequest)sipMessage).getRequestLine() != null) {      this.sipStack.getStackLogger().logStackTrace(StackLogger.TRACE_INFO);    } else {      this.sipStack.getStackLogger().logStackTrace(StackLogger.TRACE_INFO);    }  }  long time=System.currentTimeMillis();  try {    for (    MessageProcessor messageProcessor : sipStack.getMessageProcessors()) {      if (messageProcessor.getIpAddress().equals(this.peerAddress) && messageProcessor.getPort() == this.peerPort && messageProcessor.getTransport().equals(this.peerProtocol)) {        MessageChannel messageChannel=messageProcessor.createMessageChannel(this.peerAddress,this.peerPort);        if (messageChannel instanceof RawMessageChannel) {          ((RawMessageChannel)messageChannel).processMessage(sipMessage);          if (sipStack.isLoggingEnabled())           sipStack.getStackLogger().logDebug("Self routing message");          return;        }      }    }    sendMessage(sipMessage,peerAddress,peerPort,peerProtocol,sipMessage instanceof SIPRequest);  } catch (  IOException ex) {    throw ex;  }catch (  Exception ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logError("An exception occured while sending message",ex);    throw new IOException("An exception occured while sending message");  } finally {    if (sipStack.getStackLogger().isLoggingEnabled(ServerLogger.TRACE_MESSAGES) && !sipMessage.isNullRequest())     logMessage(sipMessage,peerAddress,peerPort,time); else     if (sipStack.getStackLogger().isLoggingEnabled(ServerLogger.TRACE_DEBUG))     sipStack.getStackLogger().logDebug("Sent EMPTY Message");  }}  }
class C{  public String readURL(URL url) throws IOException {  try {    StringBuilder builder;    try (InputStreamReader in=new InputStreamReader(url.openStream(),StandardCharsets.UTF_8);BufferedReader reader=new BufferedReader(in)){      builder=new StringBuilder();      String aux;      while ((aux=reader.readLine()) != null) {        builder.append(aux);      }    }     return builder.toString();  } catch (  NullPointerException ex) {    return null;  }}  }
class C{  public static CacheValueFilter newInstance(){  return new CacheValueFilter(BOp.NOARGS,BOp.NOANNS);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public RestoreSnapshotRequest source(byte[] source,int offset,int length){  if (length > 0) {    try (XContentParser parser=XContentFactory.xContent(source,offset,length).createParser(source,offset,length)){      return source(parser.mapOrdered());    } catch (    IOException e) {      throw new IllegalArgumentException("failed to parse repository source",e);    }  }  return this;}  }
class C{  @Override public void partHidden(final IWorkbenchPartReference partRef){}  }
class C{  public boolean isConnectedOrConnecting(){  return (status == ConnectionStatus.CONNECTED) || (status == ConnectionStatus.CONNECTING);}  }
class C{  public boolean isCellEditable(int rowIndex,int columnIndex){  return false;}  }
class C{  public static int digitLength(int i){  if (i >= 0)   return (i >= 100000) ? (i >= 10000000) ? (i >= 1000000000) ? 10 : (i >= 100000000) ? 9 : 8 : (i >= 1000000) ? 7 : 6 : (i >= 100) ? (i >= 10000) ? 5 : (i >= 1000) ? 4 : 3 : (i >= 10) ? 2 : 1;  if (i == Integer.MIN_VALUE)   return 10;  return digitLength(-i);}  }
class C{  @Override public View generateView(Context ctx){  ViewHolder viewHolder=getViewHolder(LayoutInflater.from(ctx).inflate(getLayoutRes(),null,false));  bindView(viewHolder,Collections.EMPTY_LIST);  return viewHolder.itemView;}  }
class C{  public static GamlFactory init(){  try {    GamlFactory theGamlFactory=(GamlFactory)EPackage.Registry.INSTANCE.getEFactory(GamlPackage.eNS_URI);    if (theGamlFactory != null) {      return theGamlFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new GamlFactoryImpl();}  }
class C{  public double[] distribution(Instance x,double ypred[]) throws Exception {  Instance x_=transform(x,ypred);  return h.distributionForInstance(x_);}  }
class C{  public static Document toDocument(SolrInputDocument doc,IndexSchema schema){  Document out=new Document();  final float docBoost=doc.getDocumentBoost();  Set<String> usedFields=Sets.newHashSet();  for (  SolrInputField field : doc) {    String name=field.getName();    SchemaField sfield=schema.getFieldOrNull(name);    boolean used=false;    if (sfield != null && !sfield.multiValued() && field.getValueCount() > 1) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "multiple values encountered for non multiValued field "+ sfield.getName()+ ": "+ field.getValue());    }    float fieldBoost=field.getBoost();    boolean applyBoost=sfield != null && sfield.indexed() && !sfield.omitNorms();    if (applyBoost == false && fieldBoost != 1.0F) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "cannot set an index-time boost, unindexed or norms are omitted for field "+ sfield.getName()+ ": "+ field.getValue());    }    float compoundBoost=fieldBoost * docBoost;    List<CopyField> copyFields=schema.getCopyFieldsList(name);    if (copyFields.size() == 0)     copyFields=null;    boolean hasField=false;    try {      for (      Object v : field) {        if (v == null) {          continue;        }        hasField=true;        if (sfield != null) {          used=true;          addField(out,sfield,v,applyBoost ? compoundBoost : 1f);          usedFields.add(sfield.getName());        }        if (copyFields != null) {          for (          CopyField cf : copyFields) {            SchemaField destinationField=cf.getDestination();            final boolean destHasValues=usedFields.contains(destinationField.getName());            if (!destinationField.multiValued() && destHasValues) {              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "multiple values encountered for non multiValued copy field "+ destinationField.getName()+ ": "+ v);            }            used=true;            Object val=v;            if (val instanceof String && cf.getMaxChars() > 0) {              val=cf.getLimitedValue((String)val);            }            final float destBoost=(destinationField.indexed() && !destinationField.omitNorms()) ? (destHasValues ? fieldBoost : compoundBoost) : 1.0F;            addField(out,destinationField,val,destBoost);            usedFields.add(destinationField.getName());          }          fieldBoost=compoundBoost=1.0f;        }      }    } catch (    SolrException ex) {      throw ex;    }catch (    Exception ex) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "Error adding field '"+ field.getName()+ "'='"+ field.getValue()+ "' msg="+ ex.getMessage(),ex);    }    if (!used && hasField) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"ERROR: " + getID(doc,schema) + "unknown field '"+ name+ "'");    }  }  for (  SchemaField field : schema.getRequiredFields()) {    if (out.getField(field.getName()) == null) {      if (field.getDefaultValue() != null) {        addField(out,field,field.getDefaultValue(),1.0f);      } else {        String msg=getID(doc,schema) + "missing required field: " + field.getName();        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,msg);      }    }  }  return out;}  }
class C{  public static String[] namesFromPrivileges(Privilege... privileges){  if ((privileges == null) || (privileges.length == 0)) {    return new String[0];  } else {    final String[] names=new String[privileges.length];    for (int i=0; i < privileges.length; i++) {      names[i]=privileges[i].getName();    }    return names;  }}  }
class C{  @Override public boolean removeFromWorld(){  removeNPC("Kirla");  return true;}  }
class C{  public void export(String fileName,Class<? extends AExporter> aExporter,boolean compressed) throws ExporterException {  try {    final AExporter parser=(AExporter)Class.forName(aExporter.getName()).getConstructor().newInstance();    mFileName=mAppendExtension ? fileName + "." + parser.getExtension() : fileName;    final File exportFile=getExportFile();    if (!exportFile.exists()) {      exportFile.getParentFile().mkdirs();      exportFile.createNewFile();    }    if (!exportFile.canWrite())     throw new ExporterException(mFileName + " can not be written to.");    parser.setExporter(this);    parser.setExportFile(getExportFile());    parser.setExportModel(mObject);    parser.setCompressed(compressed);    configureExporter(parser);    parser.export();  } catch (  Exception e) {    throw new ExporterException(e);  }}  }
class C{  public T caseMultiplicity_(Multiplicity_ object){  return null;}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public void finishTransitionImmediately(){  mTransitionState=TRANSITION_NONE;  for (int i=0; i < mLayers.length; i++) {    mAlphas[i]=mIsLayerOn[i] ? 255 : 0;  }  invalidateSelf();}  }
class C{  private void put112(final int b1,final int b2,final int s){  pool.put11(b1,b2).putShort(s);}  }
class C{  public XPathExFuncTest(String name){  super(name);}  }
class C{  public MySqlClient(MySqlConnectionFactory connectionFactory){  this.connectionFactory=connectionFactory;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.792 -0500",hash_original_method="2890F109635B7BA47A6C3B31AD4C0C33",hash_generated_method="5E5AAE5AD4DB8799AE28E84D198E7FB9") public static Bitmap createBitmap(Bitmap source,int x,int y,int width,int height,Matrix m,boolean filter){  checkXYSign(x,y);  checkWidthHeight(width,height);  if (x + width > source.getWidth()) {    throw new IllegalArgumentException("x + width must be <= bitmap.width()");  }  if (y + height > source.getHeight()) {    throw new IllegalArgumentException("y + height must be <= bitmap.height()");  }  if (!source.isMutable() && x == 0 && y == 0 && width == source.getWidth() && height == source.getHeight() && (m == null || m.isIdentity())) {    return source;  }  int neww=width;  int newh=height;  Canvas canvas=new Canvas();  Bitmap bitmap;  Paint paint;  Rect srcR=new Rect(x,y,x + width,y + height);  RectF dstR=new RectF(0,0,width,height);  Config newConfig=Config.ARGB_8888;  final Config config=source.getConfig();  if (config != null) {switch (config) {case RGB_565:      newConfig=Config.RGB_565;    break;case ALPHA_8:  newConfig=Config.ALPHA_8;break;case ARGB_4444:case ARGB_8888:default :newConfig=Config.ARGB_8888;break;}}if (m == null || m.isIdentity()) {bitmap=createBitmap(neww,newh,newConfig,source.hasAlpha());paint=null;} else {final boolean transformed=!m.rectStaysRect();RectF deviceR=new RectF();m.mapRect(deviceR,dstR);neww=Math.round(deviceR.width());newh=Math.round(deviceR.height());bitmap=createBitmap(neww,newh,transformed ? Config.ARGB_8888 : newConfig,transformed || source.hasAlpha());canvas.translate(-deviceR.left,-deviceR.top);canvas.concat(m);paint=new Paint();paint.setFilterBitmap(filter);if (transformed) {paint.setAntiAlias(true);}}bitmap.mDensity=source.mDensity;canvas.setBitmap(bitmap);canvas.drawBitmap(source,srcR,dstR,paint);canvas.setBitmap(null);bitmap.addTaint(source.getTaint());return bitmap;}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  public OdbcRequest decode(byte[] msg){  assert msg != null;  BinaryInputStream stream=new BinaryHeapInputStream(msg);  BinaryReaderExImpl reader=new BinaryReaderExImpl(null,stream,null,true);  byte cmd=reader.readByte();  if (!verConfirmed) {    if (cmd == OdbcRequest.HANDSHAKE) {      long longVersion=reader.readLong();      OdbcHandshakeRequest res=new OdbcHandshakeRequest(longVersion);      OdbcProtocolVersion version=res.version();      if (version.isUnknown())       return res;      if (version.isDistributedJoinsSupported()) {        res.distributedJoins(reader.readBoolean());        res.enforceJoinOrder(reader.readBoolean());      }      return res;    } else     throw new IgniteException("Unexpected ODBC command " + "(first message is not a handshake request): [cmd=" + cmd + ']');  }  OdbcRequest res;switch (cmd) {case OdbcRequest.EXECUTE_SQL_QUERY:{      String cache=reader.readString();      String sql=reader.readString();      int argsNum=reader.readInt();      Object[] params=new Object[argsNum];      for (int i=0; i < argsNum; ++i)       params[i]=reader.readObjectDetached();      res=new OdbcQueryExecuteRequest(cache,sql,params);      break;    }case OdbcRequest.FETCH_SQL_QUERY:{    long queryId=reader.readLong();    int pageSize=reader.readInt();    res=new OdbcQueryFetchRequest(queryId,pageSize);    break;  }case OdbcRequest.CLOSE_SQL_QUERY:{  long queryId=reader.readLong();  res=new OdbcQueryCloseRequest(queryId);  break;}case OdbcRequest.GET_COLUMNS_META:{String cache=reader.readString();String table=reader.readString();String column=reader.readString();res=new OdbcQueryGetColumnsMetaRequest(cache,table,column);break;}case OdbcRequest.GET_TABLES_META:{String catalog=reader.readString();String schema=reader.readString();String table=reader.readString();String tableType=reader.readString();res=new OdbcQueryGetTablesMetaRequest(catalog,schema,table,tableType);break;}default :throw new IgniteException("Unknown ODBC command: [cmd=" + cmd + ']');}return res;}  }
class C{  public static long createUniqueId(Context ctx,int memberId){  AtomicLong nextId=sNextIds.get(memberId);  if (nextId != null) {    return nextId.incrementAndGet();  }synchronized (sNextIds) {    nextId=sNextIds.get(memberId);    if (nextId != null) {      return nextId.incrementAndGet();    }    String historyLogAuthority=HistoryLogData.CONTENT_URI.getAuthority();    ContentProviderClient contentProviderClient=ctx.getContentResolver().acquireContentProviderClient(historyLogAuthority);    try {      HistoryProvider provider=(HistoryProvider)contentProviderClient.getLocalContentProvider();      long maxId=provider.getMaxId(memberId);      if (maxId == 0) {        maxId=(memberId - 1) * RANGE_SIZE;      }      nextId=new AtomicLong(maxId);      sNextIds.put(memberId,nextId);      nextId.set(maxId);      return nextId.incrementAndGet();    }  finally {      if (contentProviderClient != null) {        contentProviderClient.release();      }    }  }}  }
class C{  public boolean isAgentPerformance(){  return agentPerformance;}  }
class C{  private javax.security.cert.X509Certificate[] createPeerCertificateChain() throws SSLPeerUnverifiedException {  try {    javax.security.cert.X509Certificate[] chain=new javax.security.cert.X509Certificate[peerCertificates.length];    for (int i=0; i < peerCertificates.length; i++) {      byte[] encoded=peerCertificates[i].getEncoded();      chain[i]=javax.security.cert.X509Certificate.getInstance(encoded);    }    return chain;  } catch (  CertificateEncodingException e) {    SSLPeerUnverifiedException exception=new SSLPeerUnverifiedException(e.getMessage());    exception.initCause(exception);    throw exception;  }catch (  CertificateException e) {    SSLPeerUnverifiedException exception=new SSLPeerUnverifiedException(e.getMessage());    exception.initCause(exception);    throw exception;  }}  }
class C{  public BinaryTree buildBinary(TypeMirror type,Tree.Kind op,ExpressionTree left,ExpressionTree right){  JCTree.Tag jcOp=kindToTag(op);  JCTree.JCBinary binary=maker.Binary(jcOp,(JCTree.JCExpression)left,(JCTree.JCExpression)right);  binary.setType((Type)type);  return binary;}  }
class C{  public static File streamToBgzipFile(final InputStream stream,final File file) throws IOException {  if (stream == null) {    throw new NullPointerException("null stream given");  }  if (file == null) {    throw new NullPointerException("null file given");  }  try (OutputStream out=new BlockCompressedOutputStream(file)){    final byte[] b=new byte[FileUtils.BUFFER_SIZE];    int len=stream.read(b);    while (len > 0) {      out.write(b,0,len);      len=stream.read(b);    }  }   return file;}  }
class C{  public void read(File file) throws Exception {  read(new BufferedReader(new FileReader(file)));}  }
class C{  private void findElement(final ColumnItem item,final List<ColumnItem> items){  if (item == null) {    return;  }  items.add(item);  this.findElement(item.getParentItem(),items);}  }
class C{  public ServiceStateException(ServiceStatus current,String expected){  super("Service operation tried on a service with invalid status",new Object[]{expected,current.name()});}  }
class C{  private static int filterToInteger(final certFilters filter){switch (filter) {case ACTIVE_CERTIFICATES:    return 0;case REVOKED_CERTIFICATES:  return 1;case EXPIRED_CERTIFICATES:return 2;case ALL_CERTIFICATES:return 4;}return 0;}  }
class C{  public static void verifyValueBounds(String fieldName,int value,int lowerBound,int upperBound){  if ((value < lowerBound) || (value > upperBound)) {    throw new IllegalFieldValueException(fieldName,Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static List<ShapeRecord> line(double startX,double startY,double endX,double endY){  List<ShapeRecord> shapeRecords=new ArrayList<ShapeRecord>();  shapeRecords.add(move(startX,startY));  shapeRecords.addAll(straightEdge(startX,startY,endX,endY));  return shapeRecords;}  }
class C{  protected boolean isToggleSelectionEvent(MouseEvent event){  return (SwingUtilities.isLeftMouseButton(event) && BasicGraphicsUtils.isMenuShortcutKeyDown(event));}  }
class C{  public void addTextLabel(double x,String text){  addXTextLabel(x,text);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"AND");  translateAll(environment,instruction,"AND",instructions);}  }
class C{  public FileItemAdapter initFileAdapter(ArrayList<FileItem> items){  return new FileItemAdapter(getActivity(),R.layout.pb_list_item,items);}  }
class C{  public static int parseInt(CharSequence csq,Cursor cursor){  return parseInt(csq,10,cursor);}  }
class C{  public static boolean isConnected(final Network network){  return new ConnectedComponentFactory(network).isConnected();}  }
class C{  public Builder useApplicationResources(boolean useApplicationResources){  this.useApplicationResources=useApplicationResources;  return this;}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitIntegerMemberValue(this);}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String upSlopeHeader=null;  String creekHeader=null;  String localInHeader=null;  double mdInfPower=1;  String outputType=null;  boolean logTransform=false;  int numRows;  int numCols;  int row;  int col;  int x;  int y;  double z;  int i;  int c;  double noData;  float progress=0;  if (args.length == 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  upSlopeHeader=args[1];  creekHeader=args[2];  localInHeader=args[3];  mdInfPower=Double.parseDouble(args[4]);  outputType=args[5].toLowerCase();  logTransform=Boolean.parseBoolean(args[6]);  if (!args[7].toLowerCase().equals("not specified")) {    caThreshold=Double.parseDouble(args[7]);  } else {    caThreshold=-9999;  }  if ((demHeader == null) || (upSlopeHeader == null) || (creekHeader == null)|| (localInHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    upSlope=new WhiteboxRaster(upSlopeHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    upSlope.setPreferredPalette("blueyellow.pal");    upSlope.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    upSlope.setZUnits("dimensionless");    creek=new WhiteboxRaster(creekHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    creek.setPreferredPalette("blueyellow.pal");    creek.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    creek.setZUnits("dimensionless");    localIn=new WhiteboxRaster(localInHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,1);    localIn.setPreferredPalette("blueyellow.pal");    localIn.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    localIn.setZUnits("dimensionless");    tmpArea=new WhiteboxRaster(upSlopeHeader.replace(".dep","_tmp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpArea.isTemporaryFile=true;    tmpCount=new WhiteboxRaster(upSlopeHeader.replace(".dep","_tmp2.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpCount.isTemporaryFile=true;    updateProgress("Loop 1 of 4:",0);    for (row=0; row < numRows; row++) {      for (col=0; col < numCols; col++) {        z=dem.getValue(row,col);        if (z != noData) {          i=0;          for (c=0; c < 8; c++) {            x=col + xd[c];            y=row + yd[c];            if (z < dem.getValue(y,x)) {              i++;            }          }          tmpCount.setValue(row,col,i);          tmpArea.setValue(row,col,1);          upSlope.setValue(row,col,0);          creek.setValue(row,col,0);          localIn.setValue(row,col,0);        } else {          tmpArea.setValue(row,col,noData);          upSlope.setValue(row,col,noData);          creek.setValue(row,col,noData);          localIn.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 4:",(int)progress);    }    updateProgress("Loop 2 of 4:",0);    for (row=0; row < numRows; row++) {      for (col=0; col < numCols; col++) {        if (dem.getValue(row,col) != noData) {          if (tmpCount.getValue(row,col) == 0) {            MDInfAccum(row,col,mdInfPower,noData);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 4:",(int)progress);    }    updateProgress("Loop 3 of 4:",0);switch (outputType) {case "specific catchment area (sca)":      for (row=0; row < numRows; row++) {        for (col=0; col < numCols; col++) {          if (upSlope.getValue(row,col) != noData) {            upSlope.setValue(row,col,upSlope.getValue(row,col) * gridRes);          }          if (creek.getValue(row,col) != noData) {            creek.setValue(row,col,creek.getValue(row,col) * gridRes);          }          if (localIn.getValue(row,col) != noData) {            localIn.setValue(row,col,localIn.getValue(row,col) * gridRes);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (numRows - 1));        updateProgress("Loop 3 of 4:",(int)progress);      }    break;case "total catchment area":  double gridCellArea=gridRes * gridRes;for (row=0; row < numRows; row++) {  for (col=0; col < numCols; col++) {    if (upSlope.getValue(row,col) != noData) {      upSlope.setValue(row,col,upSlope.getValue(row,col) * gridCellArea);    }    if (creek.getValue(row,col) != noData) {      creek.setValue(row,col,creek.getValue(row,col) * gridCellArea);    }    if (localIn.getValue(row,col) != noData) {      localIn.setValue(row,col,localIn.getValue(row,col) * gridCellArea);    }  }  if (cancelOp) {    cancelOperation();    return;  }  progress=(float)(100f * row / (numRows - 1));  updateProgress("Loop 3 of 4:",(int)progress);}break;}updateProgress("Loop 4 of 4:",0);if (logTransform) {for (row=0; row < numRows; row++) {for (col=0; col < numCols; col++) {if (upSlope.getValue(row,col) != noData) {  upSlope.setValue(row,col,Math.log(upSlope.getValue(row,col)));}if (creek.getValue(row,col) != noData) {  creek.setValue(row,col,Math.log(creek.getValue(row,col)));}if (localIn.getValue(row,col) != noData) {  localIn.setValue(row,col,Math.log(localIn.getValue(row,col)));}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Loop 4 of 4:",(int)progress);}} else {upSlope.setNonlinearity(0.2);}upSlope.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");upSlope.addMetadataEntry("Created on " + new Date());creek.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");creek.addMetadataEntry("Created on " + new Date());localIn.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");localIn.addMetadataEntry("Created on " + new Date());dem.close();upSlope.close();creek.close();localIn.close();tmpArea.close();tmpCount.close();returnData(upSlopeHeader);} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private int findIndex(Object key,Object[] array){  int length=array.length;  int index=getModuloHash(key,length);  int last=(index + length - 2) % length;  while (index != last) {    if (array[index] == key || (array[index] == null)) {      break;    }    index=(index + 2) % length;  }  return index;}  }
class C{  @SuppressWarnings("unchecked") @Override void processQueryRequest(UUID sndId,GridCacheQueryRequest req){  if (req.cancel()) {    cancelIds.add(new CancelMessageId(req.id(),sndId));    if (req.fields())     removeFieldsQueryResult(sndId,req.id()); else     removeQueryResult(sndId,req.id());  } else {    if (!cancelIds.contains(new CancelMessageId(req.id(),sndId))) {      if (!F.eq(req.cacheName(),cctx.name())) {        GridCacheQueryResponse res=new GridCacheQueryResponse(cctx.cacheId(),req.id(),new IgniteCheckedException("Received request for incorrect cache [expected=" + cctx.name() + ", actual="+ req.cacheName()),cctx.deploymentEnabled());        sendQueryResponse(sndId,res,0);      } else {        threads.put(req.id(),Thread.currentThread());        try {          GridCacheQueryInfo info=distributedQueryInfo(sndId,req);          if (info == null)           return;          if (req.fields())           runFieldsQuery(info); else           runQuery(info);        } catch (        Throwable e) {          U.error(log(),"Failed to run query.",e);          sendQueryResponse(sndId,new GridCacheQueryResponse(cctx.cacheId(),req.id(),e.getCause(),cctx.deploymentEnabled()),0);          if (e instanceof Error)           throw (Error)e;        } finally {          threads.remove(req.id());        }      }    }  }}  }
class C{  public void auditBlockConsistencyGroup(final OperationTypeEnum auditType,final String operationalStatus,final String operationStage,final Object... descparams){  _auditMgr.recordAuditLog(URI.create(getUserFromContext().getTenantId()),URI.create(getUserFromContext().getName()),"block",auditType,System.currentTimeMillis(),operationalStatus,operationStage,descparams);}  }
class C{  private int convertToPanelY(double yval){  double temp=(yval - m_minY) / m_rangeY;  temp=temp * m_panelHeight;  temp=m_panelHeight - temp;  return (int)temp;}  }
class C{  public static EvolutionState initialize(ParameterDatabase parameters,int randomSeedOffset){  EvolutionState state=null;  Output output;  MersenneTwisterFast[] random;  int[] seeds;  int breedthreads=1;  int evalthreads=1;  int verbosity;  boolean store;  int x;  verbosity=parameters.getInt(new Parameter(P_VERBOSITY),null,0);  if (verbosity < 0)   Output.initialError("Verbosity should be an integer >= 0.\n",new Parameter(P_VERBOSITY));  output=new Output(true,verbosity);  output.addLog(ec.util.Log.D_STDOUT,Output.V_VERBOSE,false);  output.addLog(ec.util.Log.D_STDERR,Output.V_VERBOSE,true);  output.systemMessage(Version.message());  breedthreads=Evolve.determineThreads(output,parameters,new Parameter(P_BREEDTHREADS));  evalthreads=Evolve.determineThreads(output,parameters,new Parameter(P_EVALTHREADS));  boolean auto=(V_THREADS_AUTO.equalsIgnoreCase(parameters.getString(new Parameter(P_BREEDTHREADS),null)) || V_THREADS_AUTO.equalsIgnoreCase(parameters.getString(new Parameter(P_EVALTHREADS),null)));  random=new MersenneTwisterFast[breedthreads > evalthreads ? breedthreads : evalthreads];  seeds=new int[random.length];  String seedMessage="Seed: ";  int time=(int)(System.currentTimeMillis());  for (x=0; x < random.length; x++) {    seeds[x]=determineSeed(output,parameters,new Parameter(P_SEED).push("" + x),time + x,random.length * randomSeedOffset,auto);    for (int y=0; y < x; y++)     if (seeds[x] == seeds[y])     output.fatal(P_SEED + "." + x+ " ("+ seeds[x]+ ") and "+ P_SEED+ "."+ y+ " ("+ seeds[y]+ ") ought not be the same seed.",null,null);    random[x]=new MersenneTwisterFast(seeds[x]);    seedMessage=seedMessage + seeds[x] + " ";  }  state=(EvolutionState)parameters.getInstanceForParameter(new Parameter(P_STATE),null,EvolutionState.class);  state.parameters=parameters;  state.random=random;  state.output=output;  state.evalthreads=evalthreads;  state.breedthreads=breedthreads;  state.randomSeedOffset=randomSeedOffset;  state.seeds=seeds;  output.systemMessage("Threads:  breed/" + breedthreads + " eval/"+ evalthreads);  output.systemMessage(seedMessage);  return state;}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  result.append('[');  for (int i=0; i < chars.length; i+=2) {    if (chars[i] == chars[i + 1]) {      result.append("0x");      result.append(Integer.toHexString(chars[i]));    } else {      result.append("0x");      result.append(Integer.toHexString(chars[i]));      result.append("-0x");      result.append(Integer.toHexString(chars[i + 1]));    }  }  result.append(']');  return result.toString();}  }
class C{  public static ReportMailingJob newInstance(final String name,final String description,final LocalDateTime startDateTime,final String recurrence,final String emailRecipients,final String emailSubject,final String emailMessage,final ReportMailingJobEmailAttachmentFileFormat emailAttachmentFileFormat,final Report stretchyReport,final String stretchyReportParamMap,final boolean isActive,final AppUser runAsUser){  return new ReportMailingJob(name,description,startDateTime,recurrence,emailRecipients,emailSubject,emailMessage,emailAttachmentFileFormat,stretchyReport,stretchyReportParamMap,null,null,null,null,null,isActive,false,runAsUser);}  }
class C{  protected final void checkConnected() throws SQLException {  if (!connection.isConnected()) {    throw FbExceptionBuilder.forException(JaybirdErrorCodes.jb_notConnectedToServer).toFlatSQLException();  }}  }
class C{  public Photo(File file,ImageType type) throws IOException {  super(file,type);}  }
class C{  public GrammarCrossover(double probability){  super();  this.probability=probability;}  }
class C{  public static void main(String[] args){  Card[] cards=makeDeck();  Card jack=new Card(11,0);  Card fake=new Card(15,1);  System.out.println("Sequential search");  System.out.println(search(cards,jack));  System.out.println();  System.out.println("Binary search");  System.out.println(binarySearch(cards,jack));  System.out.println();  System.out.println("Failed binary search");  System.out.println(binarySearch(cards,fake));  System.out.println();  System.out.println("Recursive binary search");  System.out.println(binarySearch(cards,jack,0,51));  System.out.println();}  }
class C{  @Override public void accept(final MethodVisitor mv){  mv.visitInsn(opcode);  acceptAnnotations(mv);}  }
class C{  public StatTrackingEventListener appendTags(Map<String,String> newTags){  if (newTags == null || newTags.isEmpty()) {    return this;  }  if (tags == null) {    tags=Maps.newLinkedHashMap();  }  tags.putAll(newTags);  return this;}  }
class C{  @Override public void restart(){  stop();  start();}  }
class C{  public SSLHandshakeException(String reason){  super(reason);}  }
class C{  public static boolean isFileNewer(File file,File reference){  if (reference == null) {    throw new IllegalArgumentException("No specified reference file");  }  if (!reference.exists()) {    throw new IllegalArgumentException("The reference file '" + reference + "' doesn't exist");  }  return isFileNewer(file,reference.lastModified());}  }
class C{  public static void removeFileExt(String fileExt,int regLevel) throws RegisterFailedException {  if (isFileExtExist(fileExt,regLevel)) {    String fileExtKey=getFileExtKey(fileExt,regLevel);    String clsID=getClassIDByFileExt(fileExt,regLevel);    if (clsID != null) {      String clsIDKey=getClsIDKey(clsID,regLevel);      if (clsIDKey != null) {        regDeleteKey(clsIDKey,regLevel);      }    }    if (fileExtKey != null) {      if (isSubKeyExist(fileExtKey,regLevel)) {        regDeleteKey(fileExtKey,regLevel);      }    }    if (isWin2kUserDefinedFileExtExist(fileExt)) {      fileExtKey=USER_FILE_EXT_KEY_PREFIX + "\\" + fileExt;      regDeleteKey(fileExtKey,USER_LEVEL);    }  }}  }
class C{  static String escapeSlug(String slug){  return SLUG_ESCAPER.escape(slug);}  }
class C{  private boolean cmd_save(){  log.config("");  Calendar date=new GregorianCalendar();  getDateAndTimeFrom(date);  Timestamp assignDateFrom=new Timestamp(date.getTimeInMillis());  BigDecimal qty=fQty.getValue();  ListItem listItem=fResource.getSelectedItem();  KeyNamePair resource=listItem != null ? new KeyNamePair((Integer)listItem.getValue(),listItem.getLabel()) : null;  KeyNamePair uom=(KeyNamePair)m_lookup.get(resource);  int minutes=MUOMConversion.convertToMinutes(Env.getCtx(),uom.getKey(),qty);  Timestamp assignDateTo=TimeUtil.addMinutess(assignDateFrom,minutes);  m_mAssignment.setAssignDateTo(assignDateTo);  return m_mAssignment.save();}  }
class C{  @Override public Enumeration<Option> listOptions(){  String string="\tThe minimum number of objects in a bucket (default: 6).";  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option(string,"B",1,"-B <minimum bucket size>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  private CacheXmlGenerator(ClientCache cache,boolean useSchema,String version,boolean includeKeysValues){  this.cache=(Cache)cache;  this.useSchema=useSchema;  this.version=CacheXmlVersion.valueForVersion(version);  this.includeKeysValues=includeKeysValues;  this.generateDefaults=true;  if (cache instanceof ClientCacheCreation) {    this.creation=(ClientCacheCreation)cache;    this.creation.startingGenerate();  } else {    this.creation=new ClientCacheCreation();    if (generateDefaults() || cache.getCopyOnRead()) {      this.creation.setCopyOnRead(cache.getCopyOnRead());    }  }}  }
class C{  public boolean onBackPressed(){  return false;}  }
class C{  private void printSchema(XMLWriter xml,String group,Schema s,String[] ignore){  String[] attr=new String[]{Tokens.ID,Tokens.FOR,Tokens.ATTRNAME,Tokens.ATTRTYPE};  String[] vals=new String[4];  OUTER:   for (int i=0; i < s.getColumnCount(); ++i) {    vals[0]=s.getColumnName(i);    for (int j=0; ignore != null && j < ignore.length; ++j) {      if (vals[0].equals(ignore[j]))       continue OUTER;    }    vals[1]=group;    vals[2]=vals[0];    vals[3]=(String)TYPES.get(s.getColumnType(i));    Object dflt=s.getDefault(i);    if (dflt == null) {      xml.tag(Tokens.KEY,attr,vals,4);    } else {      xml.start(Tokens.KEY,attr,vals,4);      xml.contentTag(Tokens.DEFAULT,dflt.toString());      xml.end();    }  }}  }
class C{  protected boolean containsElement(List<Element> haystack,Element needle){  for (  Element element : haystack) {    if (sameElement(element,needle)) {      return true;    }  }  return false;}  }
class C{  public AList(){  items=new int[100];  size=0;}  }
class C{  public FastBlurFilter(){  this(3);}  }
class C{  public List<V> removeAll(K key){  key=sanitizeKey(key);  List<V> removed=map.remove(key);  if (removed == null) {    return Collections.emptyList();  }  List<V> unmodifiableCopy=Collections.unmodifiableList(new ArrayList<V>(removed));  removed.clear();  return unmodifiableCopy;}  }
class C{  public static DeltaHandler<ResourceNode> createRootHandler(RecursiveHandlerTypes type,HttpServerRequest request,String serverRoot,Buffer data,Set<String> finalOriginalParams){switch (type) {case EXPANSION:    return new RecursiveExpansionRootHandler(request,data,finalOriginalParams);case ZIP:case STORE:  return new RecursiveZipRootHandler(request,serverRoot,data,finalOriginalParams,type);default :return null;}}  }
class C{  @Override public boolean supportsGroupByUnrelated(){  debugCodeCall("supportsGroupByUnrelated");  return true;}  }
class C{  public SayUnstartedQuestDescriptionFromNPCNameAction(String region){  this.regions=Arrays.asList(region);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public double norm(){  double sum=0;  for (int i=0; i < components.length; i++)   sum+=components[i] * components[i];  return Math.sqrt(sum);}  }
class C{  public ThaiAnalyzer(CharArraySet stopwords){  super(stopwords);}  }
class C{  public CViewTransferable(final List<INaviView> views){  Preconditions.checkNotNull(views,"IE01937: Views argument can't be null");  m_views=new ArrayList<INaviView>(views);}  }
class C{  public void stopUsingGPS(){  if (locationManager != null) {    locationManager.removeUpdates(GPSTracker.this);  }}  }
class C{  public void DeleteProperty(long window){  if (atom == 0) {    throw new IllegalStateException("Atom should be initialized");  }  checkWindow(window);  XToolkit.awtLock();  try {    XlibWrapper.XDeleteProperty(XToolkit.getDisplay(),window,atom);  }  finally {    XToolkit.awtUnlock();  }}  }
class C{  public void beforeEmitPropertyDeclaration(JavaFileWriter writer,PropertyGenerator propertyGenerator) throws IOException {}  }
class C{  public static Matrix fromCovarianceOfVertices(Iterable<? extends Vec4> points){  if (points == null) {    String msg=Logging.getMessage("nullValue.IterableIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Vec4 mean=Vec4.computeAveragePoint(points);  if (mean == null)   return null;  int count=0;  double c11=0d;  double c22=0d;  double c33=0d;  double c12=0d;  double c13=0d;  double c23=0d;  for (  Vec4 vec : points) {    if (vec == null)     continue;    count++;    c11+=(vec.x - mean.x) * (vec.x - mean.x);    c22+=(vec.y - mean.y) * (vec.y - mean.y);    c33+=(vec.z - mean.z) * (vec.z - mean.z);    c12+=(vec.x - mean.x) * (vec.y - mean.y);    c13+=(vec.x - mean.x) * (vec.z - mean.z);    c23+=(vec.y - mean.y) * (vec.z - mean.z);  }  if (count == 0)   return null;  return new Matrix(c11 / (double)count,c12 / (double)count,c13 / (double)count,0d,c12 / (double)count,c22 / (double)count,c23 / (double)count,0d,c13 / (double)count,c23 / (double)count,c33 / (double)count,0d,0d,0d,0d,0d);}  }
class C{  public void test_8_3_3() throws Exception {  if (!store.isQuads())   return;  new TestHelper("named-graphs-8-3-1","named-graphs-8-3-1.rq","named-graphs-8-3-1.trig","named-graphs-8-3-1.srx").runTest();}  }
class C{  public FastAdapterBottomSheetDialog<Item> withOnTouchListener(FastAdapter.OnTouchListener<Item> onTouchListener){  this.mFastItemAdapter.withOnTouchListener(onTouchListener);  return this;}  }
class C{  public Object[] keys(){  Object[] keys=new Object[size()];  K[] k=(K[])_set;  for (int i=k.length, j=0; i-- > 0; ) {    if (k[i] != null && k[i] != REMOVED) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public SharedObject(Input input) throws IOException {  this();  deserialize(input);}  }
class C{  public void actionPerformed(ActionEvent e){  boolean hexData=hexDisplay;  boolean pubSuccess=false;  if (e.getActionCommand().equals("Publish")) {    if (hexDisplay == true) {      toCharString();    }    String pubText=pubData.getText();    String topicName=(String)topic.getSelectedItem();    if (updateTopicList(topicName)) {      mqttMgr.updateSubscribeTopicList(topicName);    }    Exception pubExp=null;    try {      mqttMgr.publish(topicName,(fileContent == null) ? pubText.getBytes() : fileContent,qosList.getSelectedIndex(),retained.isSelected());      pubSuccess=true;    } catch (    Exception ex) {      pubSuccess=false;      pubExp=ex;    }    if (hexData) {      toHexString();    }synchronized (mqttMgr) {      if (pubSuccess) {        mqttMgr.writeLogln("  --> PUBLISH sent,     TOPIC:" + topicName + ", QoS:"+ qosList.getSelectedIndex()+ ", Retained:"+ retained.isSelected());      } else {        mqttMgr.writeLogln(" *--> PUBLISH send FAILED, TOPIC:" + topicName + ", QoS:"+ qosList.getSelectedIndex()+ ", Retained:"+ retained.isSelected());      }      mqttMgr.writeLog("                        DATA:");      if (hexData) {        mqttMgr.writeLog("0x");      }      mqttMgr.writeLogln(pubData.getText());      if (!pubSuccess) {        mqttMgr.writeLogln("                   EXCEPTION:" + pubExp.getMessage());      }    }  } else   if (e.getActionCommand().equals("File...")) {    JFileChooser selectFile=new JFileChooser(fileChooserCurrentDir);    selectFile.setMultiSelectionEnabled(false);    if (selectFile.showOpenDialog(pubPanel) == JFileChooser.APPROVE_OPTION) {      fileChooserCurrentDir=selectFile.getCurrentDirectory();      File theFile=selectFile.getSelectedFile();      fileContent=new byte[(int)theFile.length()];      try {        FileInputStream input=new FileInputStream(theFile);        input.read(fileContent);        pubData.setText(new String(fileContent));        pubData.getDocument().addDocumentListener(this);      } catch (      FileNotFoundException fnfe) {        JOptionPane.showMessageDialog(pubPanel,fnfe.getMessage(),"File Open Error",JOptionPane.ERROR_MESSAGE);      }catch (      IOException ioe) {        JOptionPane.showMessageDialog(pubPanel,ioe.getMessage(),"File Open Error",JOptionPane.ERROR_MESSAGE);      }    }  } else {    if (hexDisplay == false) {      toHexString();    } else {      toCharString();    }  }}  }
class C{  private void processValue(String value){  if (hasValueSeparator()) {    char sep=getValueSeparator();    int index=value.indexOf(sep);    while (index != -1) {      if (values.size() == (numberOfArgs - 1)) {        break;      }      add(value.substring(0,index));      value=value.substring(index + 1);      index=value.indexOf(sep);    }  }  add(value);}  }
class C{  public BufferedElementCountingOutputStream(OutputStream os){  this(os,DEFAULT_BUFFER_SIZE);}  }
class C{  public final void readResponse() throws IOException {  if (hasResponse()) {    responseHeaders.setResponseSource(responseSource);    return;  }  if (responseSource == null) {    throw new IllegalStateException("readResponse() without sendRequest()");  }  if (!responseSource.requiresConnection()) {    return;  }  if (sentRequestMillis == -1) {    if (requestBodyOut instanceof RetryableOutputStream) {      int contentLength=((RetryableOutputStream)requestBodyOut).contentLength();      requestHeaders.setContentLength(contentLength);    }    transport.writeRequestHeaders();  }  if (requestBodyOut != null) {    requestBodyOut.close();    if (requestBodyOut instanceof RetryableOutputStream) {      transport.writeRequestBody((RetryableOutputStream)requestBodyOut);    }  }  transport.flushRequest();  responseHeaders=transport.readResponseHeaders();  responseHeaders.setLocalTimestamps(sentRequestMillis,System.currentTimeMillis());  responseHeaders.setResponseSource(responseSource);  if (responseSource == ResponseSource.CONDITIONAL_CACHE) {    if (cachedResponseHeaders.validate(responseHeaders)) {      release(false);      ResponseHeaders combinedHeaders=cachedResponseHeaders.combine(responseHeaders);      setResponse(combinedHeaders,cachedResponseBody);      OkResponseCache responseCache=client.getOkResponseCache();      responseCache.trackConditionalCacheHit();      responseCache.update(cacheResponse,policy.getHttpConnectionToCache());      return;    } else {      Util.closeQuietly(cachedResponseBody);    }  }  if (hasResponseBody()) {    maybeCache();  }  initContentStream(transport.getTransferStream(cacheRequest));}  }
class C{  public void info(){}  }
class C{  @Override public void handleClick(int x,int y,PlotRenderingInfo info){  Rectangle2D dataArea=info.getDataArea();  if (dataArea.contains(x,y)) {    for (int i=0; i < this.subplots.size(); i++) {      XYPlot subplot=(XYPlot)this.subplots.get(i);      PlotRenderingInfo subplotInfo=info.getSubplotInfo(i);      subplot.handleClick(x,y,subplotInfo);    }  }}  }
class C{  public static void writeByteArray(final DataOutput out,final byte[] b,final int offset,final int length) throws IOException {  WritableUtils.writeVInt(out,length);  out.write(b,offset,length);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:38.024 -0500",hash_original_method="06F97D44B0AB130D85C55056AFD5C23B",hash_generated_method="715330B376520E3766CB28E7F6AB5E88") protected void formatParamAsVer(final CharArrayBuffer buffer,final String name,final String value,int version){  buffer.append(name);  buffer.append("=");  if (value != null) {    if (version > 0) {      buffer.append('\"');      buffer.append(value);      buffer.append('\"');    } else {      buffer.append(value);    }  }}  }
class C{  @Override public void pool(){}  }
class C{  public final boolean isFinished(){  return mFinished;}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  protected void dynamicAddSkinEnableView(View view,String attrName,int attrValueResId){  mSkinInflaterFactory.dynamicAddSkinEnableView(this,view,attrName,attrValueResId);}  }
class C{  public void saveSettingsToJson(){  aboutToSaveSettings();synchronized (LOCK) {    System.out.println("Saving settings to JSON.");    saveSettingsToJson(defaultFile);    for (    String fileName : files) {      saveSettingsToJson(fileName);    }  }}  }
class C{  @Override public byte[] nextBuffer(int offset) throws IOException {  _writeLength=0;  if (_source != null) {    _source.write(_writeBuffer,0,offset,false);    _position+=offset;    _isFlushRequired=true;  } else {    _position+=offset;  }  if (_implicitFlush) {    flush();  }  return _writeBuffer;}  }
class C{  public IconicsDrawableOld(Context context,IIcon icon){  this.context=context;  this.icon=icon;  ITypeface font=Iconics.findFont(icon.getName().substring(0,3));  paint=new TextPaint(Paint.ANTI_ALIAS_FLAG);  paint.setTypeface(font.getTypeface(context));  paint.setStyle(Paint.Style.STROKE);  paint.setTextAlign(Paint.Align.CENTER);  paint.setUnderlineText(false);  paint.setColor(Color.BLACK);  paint.setAntiAlias(true);}  }
class C{  @Nullable private static Object deepClone(Map<Integer,Integer> identityIdxs,List<Object> clones,@Nullable Object obj,boolean honorCloneable) throws Exception {  if (obj == null)   return null;  if (honorCloneable && obj instanceof Cloneable)   return shallowClone(obj);  Integer idx=identityIdxs.get(System.identityHashCode(obj));  Object clone=null;  if (idx != null)   clone=clones.get(idx);  if (clone != null)   return clone;  if (obj instanceof Class)   return obj;  Class cls=obj.getClass();  if (cls.isArray()) {    Class<?> arrType=cls.getComponentType();    int len=Array.getLength(obj);    clone=Array.newInstance(arrType,len);    for (int i=0; i < len; i++)     Array.set(clone,i,deepClone(identityIdxs,clones,Array.get(obj,i),honorCloneable));    clones.add(clone);    identityIdxs.put(System.identityHashCode(obj),clones.size() - 1);    return clone;  }  clone=U.forceNewInstance(cls);  if (clone == null)   throw new IgniteException("Failed to clone object (empty constructor could not be assigned): " + obj);  clones.add(clone);  identityIdxs.put(System.identityHashCode(obj),clones.size() - 1);  for (Class<?> c=cls; c != Object.class; c=c.getSuperclass())   for (  Field f : c.getDeclaredFields())   cloneField(identityIdxs,clones,obj,clone,f,honorCloneable);  return clone;}  }
class C{  protected void convertToARGB(int[] pixels){  int t=0;  int p=0;  if (PGL.BIG_ENDIAN) {    for (int y=0; y < height; y++) {      for (int x=0; x < width; x++) {        int pixel=pixels[p++];        pixels[t++]=(pixel >>> 8) | ((pixel << 24) & 0xFF000000);      }    }  } else {    for (int y=0; y < height; y++) {      for (int x=0; x < width; x++) {        int pixel=pixels[p++];        pixels[t++]=((pixel & 0xFF) << 16) | ((pixel & 0xFF0000) >> 16) | (pixel & 0xFF00FF00);      }    }  }}  }
class C{  public Object evaluate(float fraction,Object startValue,Object endValue){  int startInt=(Integer)startValue;  int startA=(startInt >> 24) & 0xff;  int startR=(startInt >> 16) & 0xff;  int startG=(startInt >> 8) & 0xff;  int startB=startInt & 0xff;  int endInt=(Integer)endValue;  int endA=(endInt >> 24) & 0xff;  int endR=(endInt >> 16) & 0xff;  int endG=(endInt >> 8) & 0xff;  int endB=endInt & 0xff;  return (int)((startA + (int)(fraction * (endA - startA))) << 24) | (int)((startR + (int)(fraction * (endR - startR))) << 16) | (int)((startG + (int)(fraction * (endG - startG))) << 8)| (int)((startB + (int)(fraction * (endB - startB))));}  }
class C{  public boolean appliesOnlyToBlockScopedElements(){  return false;}  }
class C{  public Element(QName qName){  this.key=ElementKey.of(qName,String.class,getClass());  this.state=new ElementState();}  }
class C{  protected Graph buildGraph(final HttpURLConnection conn) throws Exception {  final Graph g=new GraphImpl();  try {    final String baseURI="";    final RDFParser rdfParser=RDFParserRegistry.getInstance().get(RDFFormat.RDFXML).getParser();    rdfParser.setVerifyData(true);    rdfParser.setStopAtFirstError(true);    rdfParser.setDatatypeHandling(RDFParser.DatatypeHandling.IGNORE);    rdfParser.setRDFHandler(new StatementCollector(g));    rdfParser.parse(conn.getInputStream(),baseURI);    return g;  }  finally {  }}  }
class C{  public double distance(final MutableInt3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  private ThreadGroup(){  this.name="main";  this.parent=null;}  }
class C{  public void prepare(Projection projection,String chartSeries){  double ullat=90;  double ullon=-180;  double lrlat=-90;  double lrlon=180;  if (projection != null) {    ullat=projection.getUpperLeft().getY();    ullon=projection.getUpperLeft().getX();    lrlat=projection.getLowerRight().getY();    lrlon=projection.getLowerRight().getX();  }  Debug.message("basic","RpfCoverage.prepare(): doing it");  if (coverageManager == null) {    coverageManager=new RpfCoverageManager(frameProvider);  }  clearLayerAndCoverages();  coverageManager.getCatalogCoverage(ullat,ullon,lrlat,lrlon,projection,chartSeries,coverages);  resetCoveragesOnLayer();}  }
class C{  public JDBCAuthenticationProviderModule(JDBCEnvironment environment){  this.environment=environment;}  }
class C{  private static void renderTree(Tree tree,int indent,boolean parentLabelNull,boolean firstSibling,boolean leftSiblingPreTerminal,boolean topLevel,StringBuilder sb){  boolean suppressIndent=(parentLabelNull || (firstSibling && tree.isPreTerminal()) || (leftSiblingPreTerminal && tree.isPreTerminal()));  if (suppressIndent) {    sb.append(' ');  } else {    if (!topLevel) {      sb.append('\n');    }    for (int i=0; i < indent; i++) {      sb.append("  ");    }  }  if (tree.isLeaf() || tree.isPreTerminal()) {    renderFlat(tree,sb);    return;  }  sb.append('(');  sb.append(tree.getLabel());  renderChildren(tree.getChildren(),indent + 1,false,sb);  sb.append(')');}  }
class C{  public Oscillator(long frequency,int sampleRate){  mSampleRate=(double)sampleRate;  mFrequency=(double)frequency;  update();}  }
class C{  private static void unzip(File source,File target) throws IOException {  ZipFile zf=new ZipFile(source);  Enumeration<? extends ZipEntry> entries=zf.entries();  while (entries.hasMoreElements()) {    ZipEntry ze=entries.nextElement();    if (ze.isDirectory()) {      new File(target,ze.getName()).mkdirs();    } else {      File out=new File(target,ze.getName());      out.getParentFile().mkdirs();      InputStream is=zf.getInputStream(ze);      FileOutputStream fos=new FileOutputStream(out);      byte[] bytes=new byte[1024];      int length;      while ((length=is.read(bytes)) >= 0) {        fos.write(bytes,0,length);      }      is.close();      fos.close();    }  }  zf.close();}  }
class C{  public void add(BigIntPolynomial b){  if (b.coeffs.length > coeffs.length) {    int N=coeffs.length;    coeffs=Arrays.copyOf(coeffs,b.coeffs.length);    for (int i=N; i < coeffs.length; i++) {      coeffs[i]=Constants.BIGINT_ZERO;    }  }  for (int i=0; i < b.coeffs.length; i++) {    coeffs[i]=coeffs[i].add(b.coeffs[i]);  }}  }
class C{  protected boolean isValidRange(String range){  if (range == null) {    return false;  }  int hyphenIndex;  if ((hyphenIndex=range.indexOf('-')) >= 0) {    if (isValidRange(range.substring(0,hyphenIndex)) && isValidRange(range.substring(hyphenIndex + 1))) {      return true;    }    return false;  }  if (range.toLowerCase().equals("first")) {    return true;  }  if (range.toLowerCase().equals("last")) {    return true;  }  try {    int index=Integer.parseInt(range);    if ((index > 0) && (index <= m_Upper + 1)) {      return true;    }    return false;  } catch (  NumberFormatException ex) {    return false;  }}  }
class C{  private void relax(Integer node){  double nodeDist=distancesFromStart.get(node);  Collection<Integer> neighbors;  if (!this.probs.containsKey(node)) {    return;  }  neighbors=this.probs.get(node).getAllProbs().keySet();  for (  Integer n : neighbors) {    if (visited.contains(n)) {      continue;    }    double nDist=nodeDist + getDistance(node,n);    if (distancesFromStart.get(n) > nDist) {      prevNodes.put(n,node);      setDistance(n,nDist);    }  }}  }
class C{  @Override public double classifyInstance(Instance instance) throws Exception {  double[] dist=distributionForInstance(instance);  if (dist == null) {    throw new Exception("Null distribution predicted");  }switch (instance.classAttribute().type()) {case Attribute.NOMINAL:    double max=0;  int maxIndex=0;for (int i=0; i < dist.length; i++) {  if (dist[i] > max) {    maxIndex=i;    max=dist[i];  }}if (max > 0) {return maxIndex;} else {return Utils.missingValue();}case Attribute.NUMERIC:case Attribute.DATE:return dist[0];default :return Utils.missingValue();}}  }
class C{  @SuppressWarnings("ForLoopReplaceableByForEach") private void writeFields(Object obj,OptimizedClassDescriptor.ClassFields fields) throws IOException {  for (int i=0; i < fields.size(); i++) {    OptimizedClassDescriptor.FieldInfo t=fields.get(i);switch (t.type()) {case BYTE:      if (t.field() != null)       writeByte(getByte(obj,t.offset()));    break;case SHORT:  if (t.field() != null)   writeShort(getShort(obj,t.offset()));break;case INT:if (t.field() != null) writeInt(getInt(obj,t.offset()));break;case LONG:if (t.field() != null) writeLong(getLong(obj,t.offset()));break;case FLOAT:if (t.field() != null) writeFloat(getFloat(obj,t.offset()));break;case DOUBLE:if (t.field() != null) writeDouble(getDouble(obj,t.offset()));break;case CHAR:if (t.field() != null) writeChar(getChar(obj,t.offset()));break;case BOOLEAN:if (t.field() != null) writeBoolean(getBoolean(obj,t.offset()));break;case OTHER:if (t.field() != null) writeObject0(getObject(obj,t.offset()));}}}  }
class C{  public ToAttributedValueConverter(final Class<?> type,final Mapper mapper,final ReflectionProvider reflectionProvider,final ConverterLookup lookup,final String valueFieldName,final Class<?> valueDefinedIn){  this.type=type;  this.mapper=mapper;  this.reflectionProvider=reflectionProvider;  this.lookup=lookup;  if (valueFieldName == null) {    valueField=null;  } else {    Field field=null;    try {      field=(valueDefinedIn != null ? valueDefinedIn : type).getDeclaredField(valueFieldName);      if (!field.isAccessible()) {        field.setAccessible(true);      }    } catch (    final NoSuchFieldException e) {      throw new IllegalArgumentException(e.getMessage() + ": " + valueFieldName);    }    valueField=field;  }  enumMapper=UseAttributeForEnumMapper.createEnumMapper(mapper);}  }
class C{  public DelegateTree(DirectedGraph<V,E> graph){  super(graph);  this.vertex_depths=new HashMap<V,Integer>();}  }
class C{  @Override public String toString(){  return getClass().getSimpleName();}  }
class C{  @Override protected void validate(){  failIf(this.value <= 0,"Trigger must be between 1 and 100");  failIf(this.value > 100,"Trigger must be between 1 and 100");}  }
class C{  void print(cp_info constant_pool[]){  G.v().out.println(prototype(constant_pool));  ByteCode.showCode(instructions,constant_pool);}  }
class C{  public void drawTicks(Canvas canvas){  if (mNumSegments >= 60) {    for (int i=0; i < mNumSegments; i++) {      if ((i + 1) % 30 == 0 || i == 0) {        final float x=i * mTickDistance + mLeftX;        canvas.drawCircle(x,mY,mTickHeight,mTickPaint);      }    }  } else {    for (int i=0; i < mNumSegments; i++) {      final float x=i * mTickDistance + mLeftX;      canvas.drawCircle(x,mY,mTickHeight,mTickPaint);    }  }  canvas.drawCircle(mRightX,mY,mTickHeight,mTickPaint);}  }
class C{  @Override public int addCode(final String value){  functions+=preParseCode(value);  return 0;}  }
class C{  protected int paeth(int left,int up,int upLeft){  int p=left + up - upLeft;  int pa=Math.abs(p - left);  int pb=Math.abs(p - up);  int pc=Math.abs(p - upLeft);  if ((pa <= pb) && (pa <= pc)) {    return left;  } else   if (pb <= pc) {    return up;  } else {    return upLeft;  }}  }
class C{  public DoubleMatrix2D viewColumn(int column){  checkColumn(column);  int viewRows=this.slices;  int viewColumns=this.rows;  int viewRowZero=sliceZero;  int viewColumnZero=rowZero;  int viewOffset=this.offset + _columnOffset(_columnRank(column));  int viewRowStride=this.sliceStride;  int viewColumnStride=this.rowStride;  int[] viewRowOffsets=this.sliceOffsets;  int[] viewColumnOffsets=this.rowOffsets;  return new SelectedSparseDoubleMatrix2D(viewRows,viewColumns,this.elements,viewRowZero,viewColumnZero,viewRowStride,viewColumnStride,viewRowOffsets,viewColumnOffsets,viewOffset);}  }
class C{  public Matrix4f shadow(float lightX,float lightY,float lightZ,float lightW,Matrix4f planeTransform){  return shadow(lightX,lightY,lightZ,lightW,planeTransform,this);}  }
class C{  public boolean isCreateParentDirectories(){  return createParentDirectories;}  }
class C{  public ObdDataPanel(PvList pvList){  initComponents();  tblPids.setPvModel(new ObdItemTableModel());  tblPids.getSelectionModel().addListSelectionListener(this);  tblPids.setDefaultRenderer(EcuDataPv.class,new ObdItemTableRenderer());  setPidPvs(pvList);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public boolean isRegisterByteSizeObserverCheap(RawUnionValue union,Context context){  int index=getIndexForEncoding(union);  @SuppressWarnings("unchecked") Coder<Object> coder=(Coder<Object>)elementCoders.get(index);  return coder.isRegisterByteSizeObserverCheap(union.getValue(),context);}  }
class C{  public double cond(){  return s[0] / s[Math.min(m,n) - 1];}  }
class C{  public void testCrawl_Site_With_Robots(){  System.out.println("crawl_site_with_robots");  crawlerFactory.setCrawlConfigFilePath(FULL_SITE_CRAWL_CONF_FILE_PATH);  String siteUrl=bundle.getString(ROBOTS_RESTRICTED_CRAWL_URL_KEY);  List<Content> contentList=initialiseAndLaunchCrawl(siteUrl,"3","","","","");  assertEquals(3,contentList.size() + ((SSP)contentList.iterator().next()).getRelatedContentSet().size());  Set<String> urlSet=getUrlSet(contentList);  assertTrue(urlSet.contains(siteUrl));  assertTrue(urlSet.contains(siteUrl + PAGE_NAME_LEVEL1));  assertTrue(urlSet.contains(siteUrl + PAGE_NAME_LEVEL2));  assertFalse(urlSet.contains(siteUrl + FORBIDDEN_PAGE_NAME));}  }
class C{  private void drawEdge(Graphics g){  getConnectedPoints().getFrom().translate(-getLocation().x,-getLocation().y);  getConnectedPoints().getTo().translate(-getLocation().x,-getLocation().y);  setClickRegion(null);  g.drawLine(getConnectedPoints().getFrom().x,getConnectedPoints().getFrom().y,getConnectedPoints().getTo().x,getConnectedPoints().getTo().y);  if (!isShowAdjacenciesOnly()) {    drawEndpoints(getConnectedPoints(),g);  }  firePropertyChange("newPointPair",null,getConnectedPoints());}  }
class C{  public static void gameKeyRelease(int gameKey){  if (verbose) {    log("gameKeyRelease(" + gameKey + ")");  }  Display.getInstance().getCurrent().keyReleased(Display.getInstance().getKeyCode(gameKey));  waitFor(10);}  }
class C{  public Configuration configure(File configFile) throws EPException {  if (log.isDebugEnabled()) {    log.debug("configuring from file: " + configFile.getName());  }  FileInputStream inputStream=null;  try {    inputStream=new FileInputStream(configFile);    ConfigurationParser.doConfigure(this,inputStream,configFile.toString());  } catch (  FileNotFoundException fnfe) {    throw new EPException("could not find file: " + configFile,fnfe);  } finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      IOException e) {        log.debug("Error closing input stream",e);      }    }  }  return this;}  }
class C{  private boolean areClingsEnabled(){  if (DISABLE_CLINGS) {    return false;  }  if (ActivityManager.isRunningInTestHarness())   return false;  final AccessibilityManager a11yManager=(AccessibilityManager)mLauncher.getSystemService(Launcher.ACCESSIBILITY_SERVICE);  if (a11yManager.isTouchExplorationEnabled()) {    return false;  }  boolean supportsLimitedUsers=android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR2;  Account[] accounts=AccountManager.get(mLauncher).getAccounts();  if (supportsLimitedUsers && accounts.length == 0) {    UserManager um=(UserManager)mLauncher.getSystemService(Context.USER_SERVICE);    Bundle restrictions=um.getUserRestrictions();    if (restrictions.getBoolean(UserManager.DISALLOW_MODIFY_ACCOUNTS,false)) {      return false;    }  }  if (Settings.Secure.getInt(mLauncher.getContentResolver(),SKIP_FIRST_USE_HINTS,0) == 1) {    return false;  }  return true;}  }
class C{  private void enableDeviceCapabilitiesArea(boolean enabled){  mDisableCameraCheckbox.setEnabled(enabled);  mDisableKeyguardWidgetsCheckbox.setEnabled(enabled);  mDisableKeyguardSecureCameraCheckbox.setEnabled(enabled);  mDisableKeyguardNotificationCheckbox.setEnabled(enabled);  mDisableKeyguardUnredactedCheckbox.setEnabled(enabled);  mDisableKeyguardTrustAgentCheckbox.setEnabled(enabled);}  }
class C{  public boolean verify(GeneralNameInterface name) throws IOException {  if (name == null) {    throw new IOException("name is null");  }  if (excluded != null && excluded.size() > 0) {    for (int i=0; i < excluded.size(); i++) {      GeneralSubtree gs=excluded.get(i);      if (gs == null)       continue;      GeneralName gn=gs.getName();      if (gn == null)       continue;      GeneralNameInterface exName=gn.getName();      if (exName == null)       continue;switch (exName.constrains(name)) {case GeneralNameInterface.NAME_DIFF_TYPE:case GeneralNameInterface.NAME_WIDENS:case GeneralNameInterface.NAME_SAME_TYPE:        break;case GeneralNameInterface.NAME_MATCH:case GeneralNameInterface.NAME_NARROWS:      return false;  }}}if (permitted != null && permitted.size() > 0) {boolean sameType=false;for (int i=0; i < permitted.size(); i++) {  GeneralSubtree gs=permitted.get(i);  if (gs == null)   continue;  GeneralName gn=gs.getName();  if (gn == null)   continue;  GeneralNameInterface perName=gn.getName();  if (perName == null)   continue;switch (perName.constrains(name)) {case GeneralNameInterface.NAME_DIFF_TYPE:    continue;case GeneralNameInterface.NAME_WIDENS:case GeneralNameInterface.NAME_SAME_TYPE:  sameType=true;continue;case GeneralNameInterface.NAME_MATCH:case GeneralNameInterface.NAME_NARROWS:return true;}}if (sameType) {return false;}}return true;}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.STATECHART_SPECIFICATION;}  }
class C{  public FluentTriFunction<T1,T2,T3,R> log(final Consumer<String> logger,final Consumer<Throwable> error){  return FluentFunctions.of(null);}  }
class C{  private void initializeFirebase(){  if (valueUserListener == null) {    valueUserListener=createFirebaseUsersListeners();  }  mRefUsers=FirebaseDatabase.getInstance().getReference(ConstantsFirebase.FIREBASE_LOCATION_USERS);  mRefUsers.keepSynced(true);  mRefUsers.addValueEventListener(valueUserListener);  Query messagesRef=FirebaseDatabase.getInstance().getReference(ConstantsFirebase.FIREBASE_LOCATION_CHAT).child(mChildChatKey).orderByKey().limitToLast(50);  messagesRef.keepSynced(true);  attachMessagesToRecyclerView(messagesRef);}  }
class C{  public byte[] toWire(){  DNSOutput out=new DNSOutput();  toWire(out,null);  return out.toByteArray();}  }
class C{  public static EventBean doPopulateMap(BaseStatisticsBean baseStatisticsBean,EventAdapterService eventAdapterService,EventType eventType,StatViewAdditionalProps additionalProps,Object[] decoration){  Map<String,Object> result=new HashMap<String,Object>();  result.put(ViewFieldEnum.CORRELATION__CORRELATION.getName(),baseStatisticsBean.getCorrelation());  if (additionalProps != null) {    additionalProps.addProperties(result,decoration);  }  return eventAdapterService.adapterForTypedMap(result,eventType);}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (propertyName == "text") {    super.firePropertyChange(propertyName,oldValue,newValue);  }}  }
class C{  private void checkPaletteFormat(){switch (mPaletteFormat) {case PALETTE4_RGB8:    mCompressionFormat=GL_PALETTE4_RGB8_OES;  break;case PALETTE4_RGBA8:mCompressionFormat=GL_PALETTE4_RGBA8_OES;break;case PALETTE4_R5_G6_B5:mCompressionFormat=GL_PALETTE4_R5_G6_B5_OES;break;case PALETTE4_RGBA4:mCompressionFormat=GL_PALETTE4_RGBA4_OES;break;case PALETTE4_RGB5_A1:mCompressionFormat=GL_PALETTE4_RGB5_A1_OES;break;case PALETTE8_RGB8:mCompressionFormat=GL_PALETTE8_RGB8_OES;break;case PALETTE8_RGBA8:default :mCompressionFormat=GL_PALETTE8_RGBA8_OES;break;case PALETTE8_R5_G6_B5:mCompressionFormat=GL_PALETTE8_R5_G6_B5_OES;break;case PALETTE8_RGBA4:mCompressionFormat=GL_PALETTE8_RGBA4_OES;break;case PALETTE8_RGB5_A1:mCompressionFormat=GL_PALETTE8_RGB5_A1_OES;break;}}  }
class C{  protected IgfsPath[] paths(IgfsPath... paths){  return paths;}  }
class C{  private void search2(BasicBlock X,HashMap<Object,Stack<HeapOperand<Object>>> stacks){  if (DEBUG)   System.out.println("SEARCH2 " + X);  SSADictionary dictionary=ir.HIRInfo.dictionary;  for (Enumeration<Instruction> ie=dictionary.getAllInstructions(X); ie.hasMoreElements(); ) {    Instruction A=ie.nextElement();    if (!dictionary.usesHeapVariable(A) && !dictionary.defsHeapVariable(A))     continue;    if (A.operator() != PHI) {      HeapOperand<Object>[] uses=dictionary.getHeapUses(A);      if (uses != null) {        @SuppressWarnings("unchecked") HeapOperand<Object>[] newUses=new HeapOperand[uses.length];        for (int i=0; i < uses.length; i++) {          Stack<HeapOperand<Object>> S=stacks.get(uses[i].getHeapType());          newUses[i]=S.peek().copy();          if (DEBUG) {            System.out.println("NORMAL USE PEEK " + newUses[i]);          }        }        dictionary.replaceUses(A,newUses);      }    }    if (A.operator() != PHI) {      HeapOperand<Object>[] defs=dictionary.getHeapDefs(A);      if (defs != null) {        for (        HeapOperand<Object> operand : dictionary.replaceDefs(A,X)) {          Stack<HeapOperand<Object>> S=stacks.get(operand.getHeapType());          S.push(operand);          if (DEBUG)           System.out.println("PUSH " + operand + " FOR "+ operand.getHeapType());        }      }    } else {      HeapOperand<Object>[] r=dictionary.replaceDefs(A,X);      Stack<HeapOperand<Object>> S=stacks.get(r[0].getHeapType());      S.push(r[0]);      if (DEBUG)       System.out.println("PUSH " + r[0] + " FOR "+ r[0].getHeapType());    }  }  for (Enumeration<BasicBlock> y=X.getOut(); y.hasMoreElements(); ) {    BasicBlock Y=y.nextElement();    if (Y.isExit())     continue;    int j=numPredProcessed[Y.getNumber()]++;    for (Iterator<Instruction> hp=dictionary.getHeapPhiInstructions(Y); hp.hasNext(); ) {      Instruction s=hp.next();      @SuppressWarnings("unchecked") HeapOperand<Object> H1=(HeapOperand)Phi.getResult(s);      Stack<HeapOperand<Object>> S=stacks.get(H1.getHeapType());      HeapOperand<Object> H2=S.peek();      Phi.setValue(s,j,new HeapOperand<Object>(H2.getHeapVariable()));      Phi.setPred(s,j,new BasicBlockOperand(X));    }  }  for (Enumeration<TreeNode> c=ir.HIRInfo.dominatorTree.getChildren(X); c.hasMoreElements(); ) {    DominatorTreeNode v=(DominatorTreeNode)c.nextElement();    search2(v.getBlock(),stacks);  }  for (Enumeration<Instruction> a=dictionary.getAllInstructions(X); a.hasMoreElements(); ) {    Instruction A=a.nextElement();    if (!dictionary.usesHeapVariable(A) && !dictionary.defsHeapVariable(A))     continue;    if (A.operator() != PHI) {      HeapOperand<Object>[] defs=dictionary.getHeapDefs(A);      if (defs != null) {        for (        HeapOperand<Object> def : defs) {          Stack<HeapOperand<Object>> S=stacks.get(def.getHeapType());          S.pop();          if (DEBUG)           System.out.println("POP " + def.getHeapType());        }      }    } else {      @SuppressWarnings("unchecked") HeapOperand<Object> H=(HeapOperand)Phi.getResult(A);      Stack<HeapOperand<Object>> S=stacks.get(H.getHeapType());      S.pop();      if (DEBUG)       System.out.println("POP " + H.getHeapType());    }  }  if (DEBUG)   System.out.println("END SEARCH2 " + X);}  }
class C{  public void keyPressed(KeyEvent e){  if (AWTEventMonitor.keyListener_private != null) {    AWTEventMonitor.keyListener_private.keyPressed(e);  }}  }
class C{  public Root mostInteresting(Root other){  if (other.type > this.type) {    return other;  } else {    return this;  }}  }
class C{  public BoxBlurFilter(float hRadius,float vRadius,int iterations){  this.hRadius=hRadius;  this.vRadius=vRadius;  this.iterations=iterations;}  }
class C{  int errorCount(){  return compiler.errorCount();}  }
class C{  public boolean isModified(){  boolean is;  if (m_editFlag == FolderEditFlag.NONE)   is=false; else   is=true;  return is;}  }
class C{  public void actionPerformed(ActionEvent e){  if (m_task != null && m_task.isAlive())   m_task.interrupt();  dispose();}  }
class C{  public LevelCheckingPortal(final int minLevel,final int maxLevel){  this(minLevel,maxLevel,null);}  }
class C{  public double predict(double x){  return beta * x + alpha;}  }
class C{  public static void loadProfile(String profileDirectory) throws LangDetectException {  loadProfile(new File(profileDirectory));}  }
class C{  public boolean mousePressed(MouseEvent e){  Debug.message("eomc","CircleStateMachine|undefined state|mousePressed = " + graphic.getGraphic().getRenderType());  if (point1 == null) {    if (graphic.getGraphic().getRenderType() == OMGraphic.RENDERTYPE_LATLON) {      indexOfFirstPoint=EditableOMCircle.CENTER_POINT_INDEX;      indexOfSecondPoint=EditableOMCircle.RADIUS_POINT_INDEX;    } else     if (graphic.getGraphic().getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {      indexOfFirstPoint=EditableOMCircle.OFFSET_POINT_INDEX;      indexOfSecondPoint=EditableOMCircle.SE_POINT_INDEX;    } else {      indexOfFirstPoint=EditableOMCircle.CENTER_POINT_INDEX;      indexOfSecondPoint=EditableOMCircle.SE_POINT_INDEX;    }  }  return super.mousePressed(e);}  }
class C{  private IndexFileNames(){}  }
class C{  @Override protected String convertToString(final Object value) throws Throwable {  int size=0;  Iterator iterator=null;  Class type=value.getClass();  if (type.isArray()) {    size=Array.getLength(value);  } else {    Collection collection=this.convertToCollection(type,value);    size=collection.size();    iterator=collection.iterator();  }  if (size == 0) {    return (String)this.getDefault(String.class);  }  if (this.onlyFirstToString) {    size=1;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < size; i++) {    if (i > 0) {      buffer.append(this.delimiter);    }    Object element=iterator == null ? Array.get(value,i) : iterator.next();    element=this.elementConverter.convert(String.class,element);    if (element != null) {      buffer.append(element);    }  }  return buffer.toString();}  }
class C{  private void sortNodes(){  if (mNeedsSort) {    mSortedNodes.clear();    ArrayList<Node> roots=new ArrayList<Node>();    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies == null || node.dependencies.size() == 0) {        roots.add(node);      }    }    ArrayList<Node> tmpRoots=new ArrayList<Node>();    while (roots.size() > 0) {      int numRoots=roots.size();      for (int i=0; i < numRoots; ++i) {        Node root=roots.get(i);        mSortedNodes.add(root);        if (root.nodeDependents != null) {          int numDependents=root.nodeDependents.size();          for (int j=0; j < numDependents; ++j) {            Node node=root.nodeDependents.get(j);            node.nodeDependencies.remove(root);            if (node.nodeDependencies.size() == 0) {              tmpRoots.add(node);            }          }        }      }      roots.clear();      roots.addAll(tmpRoots);      tmpRoots.clear();    }    mNeedsSort=false;    if (mSortedNodes.size() != mNodes.size()) {      throw new IllegalStateException("Circular dependencies cannot exist" + " in AnimatorSet");    }  } else {    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies != null && node.dependencies.size() > 0) {        int numDependencies=node.dependencies.size();        for (int j=0; j < numDependencies; ++j) {          Dependency dependency=node.dependencies.get(j);          if (node.nodeDependencies == null) {            node.nodeDependencies=new ArrayList<Node>();          }          if (!node.nodeDependencies.contains(dependency.node)) {            node.nodeDependencies.add(dependency.node);          }        }      }      node.done=false;    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean isReadable(final File file){  if (file == null || !file.isFile()) {    Log.e(FileUtils.class,"isReadable(): Null parameter given or not a File");    return false;  }  return file.exists() && file.canRead();}  }
class C{  public String numExecutionSlotsTipText(){  return "The number of execution slots (threads) to use. " + "Set equal to the number of available cpu/cores";}  }
class C{  public void sort(Comparator<? super SubRange> comparator){  Collections.sort(data,comparator);}  }
class C{  public String subtype(){  return subtype;}  }
class C{  public final boolean hasDataPath(String data){  if (mDataPaths == null) {    return false;  }  final int numDataPaths=mDataPaths.size();  for (int i=0; i < numDataPaths; i++) {    final PluginPatternMatcher pe=mDataPaths.get(i);    if (pe.match(data)) {      return true;    }  }  return false;}  }
class C{  private RefactoringStatus checkForConflictingRename(IMethod[] methods,String newName){  RefactoringStatus status=new RefactoringStatus();  for (Iterator<IJavaElement> iter=fFinalSimilarElementToName.keySet().iterator(); iter.hasNext(); ) {    IJavaElement element=iter.next();    if (element instanceof IMethod) {      IMethod alreadyRegisteredMethod=(IMethod)element;      String alreadyRegisteredMethodName=fFinalSimilarElementToName.get(element);      for (int i=0; i < methods.length; i++) {        IMethod method2=methods[i];        if ((alreadyRegisteredMethodName.equals(newName)) && (method2.getDeclaringType().equals(alreadyRegisteredMethod.getDeclaringType())) && (sameParams(alreadyRegisteredMethod,method2))) {          String message=Messages.format(RefactoringCoreMessages.RenameTypeProcessor_cannot_rename_methods_same_new_name,new String[]{BasicElementLabels.getJavaElementName(alreadyRegisteredMethod.getElementName()),BasicElementLabels.getJavaElementName(method2.getElementName()),BasicElementLabels.getJavaElementName(alreadyRegisteredMethod.getDeclaringType().getFullyQualifiedName('.')),BasicElementLabels.getJavaElementName(newName)});          status.addFatalError(message);          return status;        }      }    }  }  return status;}  }
class C{  public int size(){  return count;}  }
class C{  public School(){  super();}  }
class C{  public Cell merge(Cell m,Cell e){  Cell n=new Cell();  if (m.skip != e.skip) {    return null;  }  if (m.cmd >= 0) {    if (e.cmd >= 0) {      if (m.cmd == e.cmd) {        n.cmd=m.cmd;      } else {        return null;      }    } else {      n.cmd=m.cmd;    }  } else {    n.cmd=e.cmd;  }  if (m.ref >= 0) {    if (e.ref >= 0) {      if (m.ref == e.ref) {        if (m.skip == e.skip) {          n.ref=m.ref;        } else {          return null;        }      } else {        return null;      }    } else {      n.ref=m.ref;    }  } else {    n.ref=e.ref;  }  n.cnt=m.cnt + e.cnt;  n.skip=m.skip;  return n;}  }
class C{  private Integer scanYamlDirectiveNumber(Mark startMark){  char ch=reader.peek();  if (!Character.isDigit(ch)) {    throw new ScannerException("while scanning a directive",startMark,"expected a digit, but found " + ch + "("+ ((int)ch)+ ")",reader.getMark());  }  int length=0;  while (Character.isDigit(reader.peek(length))) {    length++;  }  Integer value=Integer.parseInt(reader.prefixForward(length));  return value;}  }
class C{  public Element store(Object obj){  MemoryComboIcon memoryIcon=(MemoryComboIcon)obj;  Element element=new Element("memoryComboIcon");  Element elem=new Element("itemList");  DefaultComboBoxModel<String> model=memoryIcon.getComboModel();  for (int i=0; i < model.getSize(); i++) {    Element e=new Element("item");    e.setAttribute("index","" + i);    e.addContent(model.getElementAt(i));    elem.addContent(e);  }  element.addContent(elem);  element.setAttribute("memory",memoryIcon.getNamedMemory().getName());  storeCommonAttributes(memoryIcon,element);  storeTextInfo(memoryIcon,element);  element.setAttribute("class","jmri.jmrit.display.configurexml.MemoryComboIconXml");  return element;}  }
class C{  public static <A>StreamableTSeq<A> of(final AnyMSeq<Streamable<A>> monads){  return new StreamableTSeq<>(monads);}  }
class C{  public static boolean isTerminalLocked(Properties ctx,int terminalId) throws TerminalNotFoundException {  MPOSTerminal terminal=getTerminal(ctx,terminalId);  return terminal.isLocked();}  }
class C{  ConfProxy(final String instance) throws Exception {  this.conf=new ConfProxyProperties(instance);  log.debug("Starting configuration-proxy '{}'...",instance);}  }
class C{  public LinkBoundingPoly(float minX,float minY,float maxX,float maxY){  points=new float[10];  Debug.message("link","LinkBoundingPoly: Creating link bounding poly with " + minX + ", "+ minY+ ", "+ maxX+ ", "+ maxY);  points[0]=minY;  points[1]=minX;  points[2]=maxY;  points[3]=minX;  points[4]=maxY;  points[5]=maxX;  points[6]=minY;  points[7]=maxX;  points[8]=minY;  points[9]=minX;}  }
class C{  @SuppressWarnings("unchecked") public <T extends Point2D>T inverse(double x,double y,T ret_val){  if (ret_val == null) {    ret_val=(T)new LatLonPoint.Double();  }  double px=x + ul.x;  double py=-y + ul.y + oy;  if (px > ProjMath.roundAdjust(world.x / 2.0)) {    px=ProjMath.roundAdjust(world.x / 2.0);  } else   if (px < ProjMath.roundAdjust(-world.x / 2.0)) {    px=ProjMath.roundAdjust(-world.x / 2.0);  }  if (py > ProjMath.roundAdjust(world.y / 2.0)) {    py=ProjMath.roundAdjust(world.y / 2.0);  } else   if (py < ProjMath.roundAdjust(-world.y / 2.0)) {    py=ProjMath.roundAdjust(-world.y / 2.0);  }  double lat_=normalizeLatitude(py / spps_y);  double lon_=wrapLongitude((px / spps_x) + centerX);  ret_val.setLocation(Math.toDegrees(lon_),Math.toDegrees(lat_));  return ret_val;}  }
class C{  private ArrayList<SpinnerLanguageElement> createSpinnerLanguages(int avoidLanguage){  ArrayList<SpinnerLanguageElement> result=new ArrayList<SpinnerLanguageElement>();  List<String> languages=mSessionOptions.allLanguages();  for (int i=0; i < languages.size(); ++i) {    if (i != avoidLanguage) {      result.add(new SpinnerLanguageElement(languages.get(i),i));    }  }  return result;}  }
class C{  @Override public void onConnect(){  server.setStatus(Status.CONNECTED);  server.setMayReconnect(true);  ignoreMOTD=service.getSettings().isIgnoreMOTDEnabled();  service.sendBroadcast(Broadcast.createServerIntent(Broadcast.SERVER_UPDATE,server.getId()));  service.notifyConnected(server.getTitle());  Message message=new Message(service.getString(R.string.message_connected,server.getTitle()));  message.setColor(Message.COLOR_GREEN);  server.getConversation(ServerInfo.DEFAULT_NAME).addMessage(message);  Message infoMessage=new Message(service.getString(R.string.message_now_login));  infoMessage.setColor(Message.COLOR_GREY);  server.getConversation(ServerInfo.DEFAULT_NAME).addMessage(infoMessage);  Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),ServerInfo.DEFAULT_NAME);  if (server.getAuthentication().hasNickservCredentials()) {    identify(server.getAuthentication().getNickservPassword());  }  service.sendBroadcast(intent);}  }
class C{  public void removeForeignKeyRelationship(ERDAssociation table,boolean reflect){  foreignKeyRelationships.remove(table);  if (reflect) {    firePropertyChange(OUTPUT,table,null);  }}  }
class C{  public T caseS_DirectAssignment(S_DirectAssignment object){  return null;}  }
class C{  public IllegalMonitorStateException(){  super();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  static ByteBuffer acquireSenderBuffer(int size,DMStats stats){  return acquireBuffer(size,stats,true);}  }
class C{  public void testConstructorSignBytesZeroNull2(){  byte aBytes[]={};  int aSign=0;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  public void printHelp(String cmdLineSyntax,Options options){  printHelp(defaultWidth,cmdLineSyntax,null,options,null,false);}  }
class C{  private ConstantLogisticModel(String name,Parameter N0Parameter,Parameter N1Parameter,Parameter growthRateParameter,Parameter shapeParameter,double alpha,Type units){  super(name);  constLogistic=new ConstLogistic(units);  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.N1Parameter=N1Parameter;  addVariable(N1Parameter);  N1Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.growthRateParameter=growthRateParameter;  addVariable(growthRateParameter);  growthRateParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.shapeParameter=shapeParameter;  addVariable(shapeParameter);  shapeParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.alpha=alpha;  setUnits(units);}  }
class C{  @Override public void run(){  amIActive=true;  String NIRHeader=null;  String RedHeader=null;  String outputHeader=null;  int row, col, x, y;  double[] NIRVal;  double[] redVal;  float progress=0;  int a;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      NIRHeader=args[i];    } else     if (i == 1) {      RedHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((NIRHeader == null) || (RedHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster NIR=new WhiteboxRaster(NIRHeader,"r");    int rows=NIR.getNumberRows();    int cols=NIR.getNumberColumns();    double noData=NIR.getNoDataValue();    WhiteboxRaster red=new WhiteboxRaster(RedHeader,"r");    if (rows != red.getNumberRows() || cols != red.getNumberColumns()) {      showFeedback("The two input images must have the same number of rows and columns.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",NIRHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(NIR.getPreferredPalette());    for (row=0; row < rows; row++) {      NIRVal=NIR.getRowValues(row);      redVal=red.getRowValues(row);      for (col=0; col < cols; col++) {        if (NIRVal[col] != noData && redVal[col] != noData) {          if ((NIRVal[col] + redVal[col]) != 0) {            outputFile.setValue(row,col,(NIRVal[col] - redVal[col]) / (NIRVal[col] + redVal[col] + 0.16));          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    NIR.close();    red.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public List<IModelChange> compare(Database sourceModel,Database targetModel){  ArrayList<IModelChange> changes=new ArrayList<IModelChange>();  for (int tableIdx=0; tableIdx < targetModel.getTableCount(); tableIdx++) {    Table targetTable=targetModel.getTable(tableIdx);    Table sourceTable=sourceModel.findTable(targetTable.getName(),caseSensitive);    if (sourceTable == null) {      log.debug("Table {} needs to be added",targetTable.getName());      changes.add(new AddTableChange(targetTable));      if (platformInfo.isForeignKeysSupported()) {        for (int fkIdx=0; fkIdx < targetTable.getForeignKeyCount(); fkIdx++) {          changes.add(new AddForeignKeyChange(targetTable,targetTable.getForeignKey(fkIdx)));        }      }    } else {      changes.addAll(compareTables(sourceModel,sourceTable,targetModel,targetTable));    }  }  for (int tableIdx=0; tableIdx < sourceModel.getTableCount(); tableIdx++) {    Table sourceTable=sourceModel.getTable(tableIdx);    Table targetTable=targetModel.findTable(sourceTable.getName(),caseSensitive);    if ((targetTable == null) && (sourceTable.getName() != null) && (sourceTable.getName().length() > 0)) {      log.debug("Table {} needs to be removed",sourceTable.getName());      changes.add(new RemoveTableChange(sourceTable));      if (platformInfo.isForeignKeysSupported()) {        for (int fkIdx=0; fkIdx < sourceTable.getForeignKeyCount(); fkIdx++) {          changes.add(new RemoveForeignKeyChange(sourceTable,sourceTable.getForeignKey(fkIdx)));        }      }    }  }  return changes;}  }
class C{  protected void pushPoint(Point2D.Float p){  if (verticeCount == 0) {    shape.moveTo(p.x,p.y);  } else   if (verticeCount == controlPoints.length - 1) {    shape.lineTo(p.x,p.y);    shape.closePath();  } else {    shape.lineTo(p.x,p.y);  }  controlPoints[verticeCount]=p;  verticeCount+=1;}  }
class C{  public final long longValue(){  return (long)doubleValue();}  }
class C{  public ASTNode processRange(@NotNull ASTNode element,@NotNull RangeMarker rangeMarker){  return doProcessRange(element,rangeMarker.getStartOffset(),rangeMarker.getEndOffset(),rangeMarker);}  }
class C{  @Override public boolean addAll(int location,Collection<? extends E> collection){  if (location < 0 || location > size) {    throw new IndexOutOfBoundsException("" + location + " out of: "+ size);  }  Object[] dumparray=toObjectArray(collection);  int growSize=dumparray.length;  if (growSize == 0) {    return false;  }  if (location == 0) {    growAtFront(growSize);    firstIndex-=growSize;  } else   if (location == size) {    if (firstIndex + size > array.length - growSize) {      growAtEnd(growSize);    }  } else {    if (array.length - size < growSize) {      growForInsert(location,growSize);    } else     if (firstIndex + size > array.length - growSize || (firstIndex > 0 && location < size / 2)) {      int newFirst=firstIndex - growSize;      if (newFirst < 0) {        int index=location + firstIndex;        System.arraycopy(array,index,array,index - newFirst,size - location);        newFirst=0;      }      System.arraycopy(array,firstIndex,array,newFirst,location);      firstIndex=newFirst;    } else {      int index=location + firstIndex;      System.arraycopy(array,index,array,index + growSize,size - location);    }  }  System.arraycopy(dumparray,0,this.array,location + firstIndex,growSize);  size+=growSize;  modCount++;  return true;}  }
class C{  public Builder withButtonColor(final int color){  this.color=color;  return this;}  }
class C{  public RestoreAction(){  super(RESTORE_CMD);}  }
class C{  private void transferData(State state,InnerState innerState,byte[] data,InputStream entityStream) throws StopRequest {  for (; ; ) {    int bytesRead=readFromResponse(state,innerState,data,entityStream);    if (bytesRead == -1) {      handleEndOfStream(state,innerState);      return;    }    state.mGotData=true;    writeDataToDestination(state,data,bytesRead);    innerState.mBytesSoFar+=bytesRead;    innerState.mBytesThisSession+=bytesRead;    reportProgress(state,innerState);    checkPausedOrCanceled(state);  }}  }
class C{  public static LiveVideoContent createLiveVideoContentFromSdp(byte[] sdp){  SdpParser parser=new SdpParser(sdp);  Vector<MediaDescription> media=parser.getMediaDescriptions();  if (media.size() == 0) {    return null;  }  MediaDescription desc=media.elementAt(0);  if (media.size() == 1) {    if (!desc.mName.equals("video")) {      return null;    }  }  if (media.size() == 2) {    if (!desc.mName.equals("video")) {      desc=media.elementAt(1);      if (!desc.mName.equals("video")) {        return null;      }    }  }  String rtpmap=desc.getMediaAttribute("rtpmap").getValue();  String encoding=rtpmap.substring(rtpmap.indexOf(desc.mPayload) + desc.mPayload.length() + 1);  String codec=encoding.toLowerCase().trim();  int index=encoding.indexOf("/");  if (index != -1) {    codec=encoding.substring(0,index);  }  MediaAttribute frameSize=desc.getMediaAttribute("framesize");  int width=0;  int height=0;  if (frameSize != null) {    try {      String value=frameSize.getValue();      index=value.indexOf(desc.mPayload);      int separator=value.indexOf('-');      if (index != -1 && separator != -1) {        width=Integer.parseInt(value.substring(index + desc.mPayload.length() + 1,separator));        height=Integer.parseInt(value.substring(separator + 1));      }    } catch (    NumberFormatException e) {      width=H264Config.QCIF_WIDTH;      height=H264Config.QCIF_HEIGHT;    }  }  return createLiveVideoContent(codec,width,height);}  }
class C{  public static void serializeMeterConfigReply(List<OFMeterConfigStatsReply> meterConfigReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFMeterConfigStatsReply meterConfigReply=meterConfigReplies.get(0);  jGen.writeStringField("version",meterConfigReply.getVersion().toString());  jGen.writeFieldName("meterConfig");  jGen.writeStartArray();  for (  OFMeterConfig config : meterConfigReply.getEntries()) {    jGen.writeStartObject();    jGen.writeNumberField("meterId",config.getMeterId());    jGen.writeNumberField("flags",config.getFlags());    jGen.writeFieldName("meterBands");    jGen.writeStartArray();    for (    OFMeterBand band : config.getEntries()) {      jGen.writeStartObject();      short type=(short)band.getType();      jGen.writeNumberField("bandType",type);switch (type) {case OFMeterBandTypeSerializerVer13.DROP_VAL:        OFMeterBandDrop bandDrop=(OFMeterBandDrop)band;      jGen.writeNumberField("rate",bandDrop.getRate());    jGen.writeNumberField("burstSize",bandDrop.getBurstSize());  break;case OFMeterBandTypeSerializerVer13.DSCP_REMARK_VAL:OFMeterBandDscpRemark bandDscp=(OFMeterBandDscpRemark)band;jGen.writeNumberField("rate",bandDscp.getRate());jGen.writeNumberField("burstSize",bandDscp.getBurstSize());jGen.writeNumberField("precLevel",bandDscp.getPrecLevel());break;case OFMeterBandTypeSerializerVer13.EXPERIMENTER_VAL:OFMeterBandExperimenter bandExp=(OFMeterBandExperimenter)band;jGen.writeNumberField("rate",bandExp.getRate());jGen.writeNumberField("burstSize",bandExp.getBurstSize());jGen.writeNumberField("experimenter",bandExp.getExperimenter());break;default :break;}jGen.writeEndObject();}jGen.writeEndArray();jGen.writeEndObject();}jGen.writeEndArray();}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,(double)Math.floor(z1));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Around("execution(* org.yes.cart.service.domain.impl.CustomerServiceImpl.resetPassword(..))") public Object doResetPassword(final ProceedingJoinPoint pjp) throws Throwable {  return notifyInternal(pjp,false);}  }
class C{  protected final void fireServiceAdded(BeanContextServiceAvailableEvent event){  Object listeners[];synchronized (bcsListeners) {    listeners=bcsListeners.toArray();  }  for (int i=0; i < listeners.length; i++) {    BeanContextServicesListener l=(BeanContextServicesListener)listeners[i];    l.serviceAvailable(event);  }}  }
class C{  private boolean isJGTICuratorialUnitEmpty(JGTICuratorialUnit unit){  if (unit != null) {    String unitType=unit.getUnitType();    int rangeEnd=(unit.getRangeEnd() == null) ? 0 : unit.getRangeEnd();    int rangeStart=(unit.getRangeStart() == null) ? 0 : unit.getRangeStart();    int uncertainty=(unit.getUncertaintyMeasure() == null) ? 0 : unit.getUncertaintyMeasure();    int mean=(unit.getRangeMean() == null) ? 0 : unit.getRangeMean();    return (Strings.isNullOrEmpty(unitType) && rangeEnd == 0 && rangeStart == 0 && uncertainty == 0 && mean == 0);  }  return true;}  }
class C{  private void boardSave(){  if (curfile == null) {    boardSaveAs();    return;  }  try {    OutputStream os=new FileOutputStream(curfile);    board.save(os);    os.close();  } catch (  IOException ex) {    System.err.println("error opening file to save!");    System.err.println(ex);  }}  }
class C{  protected boolean isKmlUrl(String url,String contentType){  if (WWUtil.isEmpty(url))   return false;  String suffix=WWIO.getSuffix(url);  return "kml".equalsIgnoreCase(suffix) || "kmz".equalsIgnoreCase(suffix) || KMLConstants.KML_MIME_TYPE.equals(contentType)|| KMLConstants.KMZ_MIME_TYPE.equals(contentType);}  }
class C{  public void removeAttributeNS(String namespaceURI,String localName) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case MESSAGE_TYPE:    return isSetMessageType();case SW_PORT_TUPLE:  return isSetSwPortTuple();case DATA:return isSetData();}throw new IllegalStateException();}  }
class C{  public TermsByQueryRequest field(String field){  this.field=field;  return this;}  }
class C{  public static Map<String,Object> createFile(DispatchContext dctx,Map<String,? extends Object> context){  return createFileMethod(dctx,context);}  }
class C{  public static XMLEventReader openEventReaderStream(InputStream inputStream,boolean isNamespaceAware){  if (inputStream == null) {    String message=Logging.getMessage("nullValue.InputStreamIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  XMLInputFactory inputFactory=XMLInputFactory.newInstance();  inputFactory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE,isNamespaceAware);  inputFactory.setProperty(XMLInputFactory.SUPPORT_DTD,false);  try {    return inputFactory.createXMLEventReader(inputStream);  } catch (  XMLStreamException e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToParseXml",inputStream);    throw new WWRuntimeException(message,e);  }}  }
class C{  public void clear(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    q.clear();  }  finally {    lock.unlock();  }}  }
class C{  public byte[] convertYUV420ImageToPackedNV21(ImageProxy img,byte[] dataCopy){  final int w=img.getWidth();  final int h=img.getHeight();  final List<ImageProxy.Plane> planeList=img.getPlanes();  ByteBuffer y_buffer=planeList.get(0).getBuffer();  ByteBuffer u_buffer=planeList.get(1).getBuffer();  ByteBuffer v_buffer=planeList.get(2).getBuffer();  final int color_pixel_stride=planeList.get(1).getPixelStride();  final int y_size=y_buffer.capacity();  final int u_size=u_buffer.capacity();  final int data_offset=w * h;  for (int i=0; i < y_size; i++) {    dataCopy[i]=(byte)(y_buffer.get(i) & 255);  }  for (int i=0; i < u_size / color_pixel_stride; i++) {    dataCopy[data_offset + 2 * i]=v_buffer.get(i * color_pixel_stride);    dataCopy[data_offset + 2 * i + 1]=u_buffer.get(i * color_pixel_stride);  }  return dataCopy;}  }
class C{  private void changeAllGreenSignalControlTo1Z(){  SignalsData signalsData=(SignalsData)this.scenario.getScenarioElement(SignalsData.ELEMENT_NAME);  SignalControlData signalControl=signalsData.getSignalControlData();  SignalSystemControllerData signalSystem4Control=signalControl.getSignalSystemControllerDataBySystemId().get(Id.create("signalSystem4",SignalSystem.class));  for (  SignalPlanData signalPlan : signalSystem4Control.getSignalPlanData().values()) {    SignalGroupSettingsData signalGroupZSetting=signalPlan.getSignalGroupSettingsDataByGroupId().get(Id.create("signal3_4.1",SignalGroup.class));    signalGroupZSetting.setOnset(0);    signalGroupZSetting.setDropping(1);    SignalGroupSettingsData signalGroupVSetting;    if (signalPlan.getSignalGroupSettingsDataByGroupId().containsKey(Id.create("signal2_4.1",SignalGroup.class)))     signalGroupVSetting=signalPlan.getSignalGroupSettingsDataByGroupId().get(Id.create("signal2_4.1",SignalGroup.class)); else     signalGroupVSetting=signalPlan.getSignalGroupSettingsDataByGroupId().get(Id.create("signal24_4.1",SignalGroup.class));    signalGroupVSetting.setOnset(1);    signalGroupVSetting.setDropping(60);  }}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void resetFromCheckpoint() throws IOException {  output.restart();  exchanger.reinitializeContacts(this);  evaluator.reinitializeContacts(this);}  }
class C{  public void reduce(Text key,Iterator<ObjectWritable> values,OutputCollector<Text,LinkNode> output,Reporter reporter) throws IOException {  String fromUrl=key.toString();  List<LinkDatum> outlinks=new ArrayList<LinkDatum>();  Node node=null;  LoopSet loops=null;  while (values.hasNext()) {    ObjectWritable write=values.next();    Object obj=write.get();    if (obj instanceof Node) {      node=(Node)obj;    } else     if (obj instanceof LinkDatum) {      outlinks.add((LinkDatum)WritableUtils.clone((LinkDatum)obj,conf));    } else     if (obj instanceof LoopSet) {      loops=(LoopSet)obj;    }  }  int numOutlinks=node.getNumOutlinks();  if (numOutlinks > 0) {    Set<String> loopSet=(loops != null) ? loops.getLoopSet() : null;    for (int i=0; i < outlinks.size(); i++) {      LinkDatum outlink=outlinks.get(i);      String toUrl=outlink.getUrl();      if (loopSet != null && loopSet.contains(toUrl)) {        continue;      }      output.collect(new Text(toUrl),new LinkNode(fromUrl,node));    }  }}  }
class C{  private File download(URL url) throws IOException {  Preconditions.checkNotNull(url);  String filename=url.toString().replaceAll("[/:.]+","_") + ".xml";  File tmpFile=dataDir.tmpFile(filename);  StatusLine statusLine=downloader.download(url,tmpFile);  if (success(statusLine)) {    log.info("Successfully downloaded vocabulary: " + url.toString());    return tmpFile;  } else {    String msg="Failed to download vocabulary: " + url.toString() + ". Response="+ String.valueOf(statusLine.getStatusCode());    log.error(msg);    throw new IOException(msg);  }}  }
class C{  private void stopSnmpAdaptor(){  if (!this.agentConfig.isSnmpEnabled())   return;  try {    getMBeanServer().invoke(getSnmpAdaptorName(),"unbind",new Object[0],new String[0]);  } catch (  Exception e) {    logger.warn(e.getMessage(),e);  }  try {    MBeanUtil.unregisterMBean(getSnmpAdaptorName());  } catch (  MalformedObjectNameException e) {    logger.warn(e.getMessage(),e);  }}  }
class C{  public Date toDate(Element el,String attributeName,Date defaultValue){  return new DateImpl(toDateTime(el,attributeName,defaultValue));}  }
class C{  public int hashCode(){  return uri.hashCode();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.479 -0500",hash_original_method="951E23950C742ACC01168638ADC04F9A",hash_generated_method="C825A4374DC5FB4D17405C9307C62AEE") public TFTPDataPacket(InetAddress destination,int port,int blockNumber,byte[] data,int offset,int length){  super(TFTPPacket.DATA,destination,port);  _blockNumber=blockNumber;  _data=data;  _offset=offset;  if (length > MAX_DATA_LENGTH)   _length=MAX_DATA_LENGTH; else   _length=length;}  }
class C{  public void applyTemplates(Element element) throws Exception {  applyTemplates(element,this.modeName);}  }
class C{  public final double total(){  return totaL;}  }
class C{  public int indexOf(Comparable x){  if (this.autoSort) {    return Collections.binarySearch(this.data,new ComparableObjectItem(x,null));  } else {    for (int i=0; i < this.data.size(); i++) {      ComparableObjectItem item=(ComparableObjectItem)this.data.get(i);      if (item.getComparable().equals(x)) {        return i;      }    }    return -1;  }}  }
class C{  public static @NonNull PushPullAnimation create(@Direction int direction,boolean enter,long duration){switch (direction) {case UP:case DOWN:    return new VerticalPushPullAnimation(direction,enter,duration);case LEFT:case RIGHT:default :  return new HorizontalPushPullAnimation(direction,enter,duration);}}  }
class C{  protected void recordSelected(int key){  if (m_M_Product_ID != key) {    refresh();  }  p_centerSouth.setOpen(p_table.getSelectedCount() > 0);  return;}  }
class C{  public void toArray(int[] array){  System.arraycopy(data,0,array,0,size);}  }
class C{  public void showSyncSignInNotification(){  Intent prefIntent=PreferencesLauncher.createIntentForSettingsPage(mApplicationContext,mAccountManagementFragment.getCanonicalName());  String title=mApplicationContext.getResources().getString(R.string.firstrun_signed_in_title);  String syncPromo=title + " " + mApplicationContext.getResources().getString(R.string.firstrun_signed_in_description);  mNotificationController.showNotification(NotificationConstants.NOTIFICATION_ID_SIGNED_IN,title,syncPromo,prefIntent);}  }
class C{  public static List<Input> readTop50KWiki() throws Exception {  List<Input> input=new ArrayList<>();  URL resource=LookupBenchmarkTest.class.getResource("Top50KWiki.utf8");  assert resource != null : "Resource missing: Top50KWiki.utf8";  String line=null;  BufferedReader br=new BufferedReader(new InputStreamReader(resource.openStream(),UTF_8));  while ((line=br.readLine()) != null) {    int tab=line.indexOf('|');    assertTrue("No | separator?: " + line,tab >= 0);    int weight=Integer.parseInt(line.substring(tab + 1));    String key=line.substring(0,tab);    input.add(new Input(key,weight));  }  br.close();  return input;}  }
class C{  public SnmpCounter(Integer v) throws IllegalArgumentException {  super(v);}  }
class C{  public boolean isRethrowExceptions(){  return rethrowExceptions;}  }
class C{  @HLEFunction(nid=0x0C622081,version=150,checkInsideInterrupt=true) public int sceWlanGetEtherAddr(TPointer etherAddr){  pspNetMacAddress macAddress=new pspNetMacAddress();  macAddress.setMacAddress(Wlan.getMacAddress());  macAddress.write(etherAddr);  if (log.isDebugEnabled()) {    log.debug(String.format("sceWlanGetEtherAddr returning %s",macAddress));  }  return 0;}  }
class C{  public static void assertNotSame(String message,Object expected,Object actual){  Assert.assertNotSame(message,expected,actual);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private static boolean containtsAccessors(Global global,List<Attribute> attributes){  if (!isNull(global)) {    if (!isEmpty(global.getGet()) || !isEmpty(global.getSet()))     return true;    if (!isEmpty(global.getAttributes()))     for (    SimplyAttribute attribute : global.getAttributes())     if (!isEmpty(attribute.getGet()) || !isEmpty(attribute.getSet()))     return true;  }  if (!isEmpty(attributes))   for (  Attribute attribute : attributes) {    if (!isEmpty(attribute.getGet()) || !isEmpty(attribute.getSet()))     return true;    if (!isEmpty(attribute.getAttributes()))     for (    SimplyAttribute targetAttribute : attribute.getAttributes())     if (!isEmpty(targetAttribute.getGet()) || !isEmpty(targetAttribute.getSet()))     return true;  }  return false;}  }
class C{  public Subscription(String subscriptionJid,String nodeId){  this(subscriptionJid,nodeId,null,null);}  }
class C{  public boolean isNoEmitOnError(){  return noEmitOnError;}  }
class C{  public CompiledST compile(String name,String template){  CompiledST code=compile(null,name,null,template,null);  code.hasFormalArgs=false;  return code;}  }
class C{  private ArrayList<FixedBitSet> ppTermsBitSets(PhrasePositions[] rpp,HashMap<Term,Integer> tord){  ArrayList<FixedBitSet> bb=new ArrayList<>(rpp.length);  for (  PhrasePositions pp : rpp) {    FixedBitSet b=new FixedBitSet(tord.size());    Integer ord;    for (    Term t : pp.terms) {      if ((ord=tord.get(t)) != null) {        b.set(ord);      }    }    bb.add(b);  }  return bb;}  }
class C{  public UnsignedLong add(UnsignedLong increment){  long v=getValue() + increment.getValue();  if (increment.getValue() > 0 && v < getValue())   return new UnsignedLong(BigInteger.valueOf(getValue()).add(BigInteger.valueOf(increment.getValue())));  return valueOf(v);}  }
class C{  public FloatColumn logN(){  FloatColumn newColumn=FloatColumn.create(name() + "[logN]",size());  for (  float value : this) {    newColumn.add((float)Math.log(value));  }  return newColumn;}  }
class C{  private static <T>int countRunAndMakeAscending(T[] a,int lo,int hi,Comparator<? super T> c){  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (c.compare(a[runHi++],a[lo]) < 0) {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  public void stopBridgeServers(Cache cache){  CacheServer bridge=null;  for (Iterator bsI=cache.getCacheServers().iterator(); bsI.hasNext(); ) {    bridge=(CacheServer)bsI.next();    bridge.stop();    assertFalse(bridge.isRunning());  }}  }
class C{  private void computeMd5(File targetFile,String md5FileName){  Preconditions.checkArgument(targetFile != null && targetFile.exists(),"Invalid File");  Preconditions.checkArgument(md5FileName != null && !md5FileName.trim().isEmpty(),"Invalid File");  PrintWriter out=null;  try {    File md5File=new File(targetFile.getParentFile(),md5FileName);    StringBuilder digestBuilder=new StringBuilder();    digestBuilder.append(Files.hash(targetFile,Hashing.md5()).toString());    digestBuilder.append("\t");    digestBuilder.append(targetFile.length());    digestBuilder.append("\t");    digestBuilder.append(targetFile.getName());    out=new PrintWriter(new BufferedWriter(new FileWriter(md5File,false)));    out.println(digestBuilder.toString());  } catch (  IOException ex) {    throw BackupException.fatals.failedToComputeMd5(targetFile.getName(),ex);  } finally {    if (out != null) {      out.close();    }  }}  }
class C{  public boolean isDoubleMetaphoneEqual(String value1,String value2){  return isDoubleMetaphoneEqual(value1,value2,false);}  }
class C{  public boolean handleError(DOMError error){  errors.add(new DOMErrorImpl(error));  return true;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(DMLProgram.constructFunctionKey(this.namespace,this.fname));  sb.append(" instID ");  sb.append(this.instID);  sb.append(": (line ");  sb.append(this.lineNumber);  sb.append(")");  return sb.toString();}  }
class C{  public static boolean isAncestorOf(Node node,Node descendant){  if (node == null || descendant == null) {    return false;  }  for (Node currentNode=descendant.getParentNode(); currentNode != null; currentNode=currentNode.getParentNode()) {    if (currentNode == node) {      return true;    }  }  return false;}  }
class C{  public boolean equals(XMLString anObject){  return m_str.equals(anObject.toString());}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mColors[mColorIndex]);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public void show(boolean animate){  show(animate,fadeIn);}  }
class C{  public static EclipseIni parseFrom(File file) throws FileNotFoundException, IOException {  try (BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(file),StandardCharsets.ISO_8859_1))){    EclipseIni ini=new EclipseIni();    String line;    while ((line=reader.readLine()) != null) {      ini.lines.add(Line.parse(line));    }    return ini;  } }  }
class C{  public static Config buildConfig(TopologyDef topologyDef){  Config conf=new Config();  conf.putAll(topologyDef.getConfig());  return conf;}  }
class C{  public void fireVetoableChange(String name,Object oldValue,Object newValue) throws PropertyVetoException {  vcSupport.fireVetoableChange(name,oldValue,newValue);}  }
class C{  private static void storeTestMethodName(String name){  System.setProperty(getKey(),name);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static String grabClass(String signature){  Matcher matcher=sigRE.matcher(signature);  boolean b=matcher.matches();  if (!b && matcher.groupCount() != 4)   logger.error("Bad method signature: {}",signature);  return matcher.group(1);}  }
class C{  public Scanner(File source,String charsetName) throws FileNotFoundException {  this(Objects.requireNonNull(source),toDecoder(charsetName));}  }
class C{  public MockLowLevelHttpResponse addHeader(String name,String value){  headerNames.add(Preconditions.checkNotNull(name));  headerValues.add(Preconditions.checkNotNull(value));  return this;}  }
class C{  public boolean isConnectionBased(){  return false;}  }
class C{  @Override protected List<String> createCommand(StepInstance stepInstance,String temporaryFileDirectory){  List<String> command=new ArrayList<String>();  command.add(this.perlCommand);  command.add(this.fullPathToSignalPBinary);  command.add("-T");  if (LOGGER.isDebugEnabled()) {    LOGGER.debug(command.toString());  }  return command;}  }
class C{  public Builder scheduledExecutorService(final ScheduledExecutorService scheduledExecutorService){  this.scheduledExecutorService=scheduledExecutorService;  return this;}  }
class C{  public boolean isSelected(){  return getModel().isSelected();}  }
class C{  @Override protected boolean isArgument(){  return true;}  }
class C{  public static <T0,T1,T2,T3,T4,T5>void print(T0 object0,T1 object1,T2 object2,T3 object3,T4 object4,T5 object5){  System.out.println("" + (object0 == null ? "NullType" : object0) + " "+ (object1 == null ? "NullType" : object1)+ " "+ (object2 == null ? "NullType" : object2)+ " "+ (object3 == null ? "NullType" : object3)+ " "+ (object4 == null ? "NullType" : object4)+ " "+ (object5 == null ? "NullType" : object5));}  }
class C{  public void resolvePrefixTables() throws TransformerException {  setPrefixTable(null);  if (null != this.m_declaredPrefixes) {    StylesheetRoot stylesheet=this.getStylesheetRoot();    int n=m_declaredPrefixes.size();    for (int i=0; i < n; i++) {      XMLNSDecl decl=(XMLNSDecl)m_declaredPrefixes.get(i);      String prefix=decl.getPrefix();      String uri=decl.getURI();      if (null == uri)       uri="";      boolean shouldExclude=excludeResultNSDecl(prefix,uri);      if (null == m_prefixTable)       setPrefixTable(new ArrayList());      NamespaceAlias nsAlias=stylesheet.getNamespaceAliasComposed(uri);      if (null != nsAlias) {        decl=new XMLNSDecl(nsAlias.getStylesheetPrefix(),nsAlias.getResultNamespace(),shouldExclude);      } else       decl=new XMLNSDecl(prefix,uri,shouldExclude);      m_prefixTable.add(decl);    }  }  ElemTemplateElement parent=this.getParentNodeElem();  if (null != parent) {    List prefixes=parent.m_prefixTable;    if (null == m_prefixTable && !needToCheckExclude()) {      setPrefixTable(parent.m_prefixTable);    } else {      int n=prefixes.size();      for (int i=0; i < n; i++) {        XMLNSDecl decl=(XMLNSDecl)prefixes.get(i);        boolean shouldExclude=excludeResultNSDecl(decl.getPrefix(),decl.getURI());        if (shouldExclude != decl.getIsExcluded()) {          decl=new XMLNSDecl(decl.getPrefix(),decl.getURI(),shouldExclude);        }        addOrReplaceDecls(decl);      }    }  } else   if (null == m_prefixTable) {    setPrefixTable(new ArrayList());  }}  }
class C{  public void addFooterView(View footer){  if (footer == null) {    throw new IllegalArgumentException("footer is null");  }  mFooterViews.add(footer);}  }
class C{  public RAMOutputStream(RAMFile f,boolean checksum){  this("noname",f,checksum);}  }
class C{  @SuppressWarnings("deprecation") public ItemStack toItemStack(int amount){  ItemStack item=new ItemStack(Material.MONSTER_EGG,amount);  net.minecraft.server.v1_10_R1.ItemStack stack=CraftItemStack.asNMSCopy(item);  NBTTagCompound tagCompound=stack.getTag();  if (tagCompound == null) {    tagCompound=new NBTTagCompound();  }  NBTTagCompound id=new NBTTagCompound();  id.setString("id",type.getName());  tagCompound.set("EntityTag",id);  stack.setTag(tagCompound);  return CraftItemStack.asBukkitCopy(stack);}  }
class C{  @Override public void updateAfterDelete(int oldNCol,Header hdr) throws FitsException {  int offset=0;  for (int i=0; i < this.nFields; i+=1) {    this.offsets[i]=offset;    hdr.addValue(TBCOLn.n(i + 1),offset + 1);    offset+=this.lengths[i] + 1;  }  for (int i=this.nFields; i < oldNCol; i+=1) {    hdr.deleteKey(TBCOLn.n(i + 1));  }  hdr.addValue(NAXIS1,this.rowLen);}  }
class C{  public static void sendPageViews(Context context,String page){  if (tracker == null) {    tracker=GoogleAnalyticsTracker.getInstance();    tracker.startNewSession(UA,context);    tracker.setProductVersion(PRODUCT_NAME,SystemUtils.getMyTracksVersion(context));  }  tracker.trackPageView(page);}  }
class C{  private boolean removeExpiredAttachmentPoints(List<AttachmentPoint> apList){  List<AttachmentPoint> expiredAPs=new ArrayList<AttachmentPoint>();  if (apList == null)   return false;  for (  AttachmentPoint ap : apList) {    if (ap.getLastSeen().getTime() + AttachmentPoint.INACTIVITY_INTERVAL < System.currentTimeMillis()) {      expiredAPs.add(ap);    }  }  if (expiredAPs.size() > 0) {    apList.removeAll(expiredAPs);    return true;  } else   return false;}  }
class C{  private void updateButtons(){  if (parentDirectory.getText().length() == 0 || directoryName.getText().length() == 0) {    setErrorText(null);    setOKActionEnabled(false);    return;  }  File file=new File(parentDirectory.getText(),directoryName.getText());  if (file.exists()) {    setErrorText(GctBundle.message("clonefromgcp.destination.exists.error"));    setOKActionEnabled(false);    paintSelectionError();    return;  } else   if (!file.getParentFile().exists()) {    setErrorText(GctBundle.message("clonefromgcp.parent.missing.error"));    setOKActionEnabled(false);    paintSelectionError();    return;  }  paintSelectionOk();  setErrorText(null);  setOKActionEnabled(true);}  }
class C{  public boolean isDigitalGoods(){  return digitalGoods;}  }
class C{  protected LockServiceDestroyedException generateLockServiceDestroyedException(String message){  return new LockServiceDestroyedException(message);}  }
class C{  @RequestMapping(value="/authenticate",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public String isAuthenticated(HttpServletRequest request){  log.debug("REST request to check if the current user is authenticated");  return request.getRemoteUser();}  }
class C{  private void closeCurrentLabel() throws IOException {  if (mCurrentName != null) {    mCurrentName.close();    mLabelIndex.incrementSize(mCurrentName.valuesWritten());    mLabelIndex.writeEntry();  }}  }
class C{  public static int loadLogoFromManifest(Activity activity){  int logo=0;  try {    final String thisPackage=activity.getClass().getName();    if (ActionBarSherlock.DEBUG)     Log.i(TAG,"Parsing AndroidManifest.xml for " + thisPackage);    final String packageName=activity.getApplicationInfo().packageName;    final AssetManager am=activity.createPackageContext(packageName,0).getAssets();    final XmlResourceParser xml=am.openXmlResourceParser("AndroidManifest.xml");    int eventType=xml.getEventType();    while (eventType != XmlPullParser.END_DOCUMENT) {      if (eventType == XmlPullParser.START_TAG) {        String name=xml.getName();        if ("application".equals(name)) {          if (ActionBarSherlock.DEBUG)           Log.d(TAG,"Got <application>");          for (int i=xml.getAttributeCount() - 1; i >= 0; i--) {            if (ActionBarSherlock.DEBUG)             Log.d(TAG,xml.getAttributeName(i) + ": " + xml.getAttributeValue(i));            if ("logo".equals(xml.getAttributeName(i))) {              logo=xml.getAttributeResourceValue(i,0);              break;            }          }        } else         if ("activity".equals(name)) {          if (ActionBarSherlock.DEBUG)           Log.d(TAG,"Got <activity>");          Integer activityLogo=null;          String activityPackage=null;          boolean isOurActivity=false;          for (int i=xml.getAttributeCount() - 1; i >= 0; i--) {            if (ActionBarSherlock.DEBUG)             Log.d(TAG,xml.getAttributeName(i) + ": " + xml.getAttributeValue(i));            String attrName=xml.getAttributeName(i);            if ("logo".equals(attrName)) {              activityLogo=xml.getAttributeResourceValue(i,0);            } else             if ("name".equals(attrName)) {              activityPackage=ActionBarSherlockCompat.cleanActivityName(packageName,xml.getAttributeValue(i));              if (!thisPackage.equals(activityPackage)) {                break;              }              isOurActivity=true;            }            if ((activityLogo != null) && (activityPackage != null)) {              logo=activityLogo.intValue();            }          }          if (isOurActivity) {            break;          }        }      }      eventType=xml.nextToken();    }  } catch (  Exception e) {    e.printStackTrace();  }  if (ActionBarSherlock.DEBUG)   Log.i(TAG,"Returning " + Integer.toHexString(logo));  return logo;}  }
class C{  public void testUnivariateMIforRandomVariablesFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/2randomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={1,2,3,4,5,6,10,15};  double[] expectedFromMILCA={-0.05294175,-0.03944338,-0.02190217,0.00120807,-0.00924771,-0.00316402,-0.00778205,-0.00565778};  System.out.println("Kraskov comparison 1 - univariate random data 1");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{1}),kNNs,expectedFromMILCA);  afr=new ArrayFileReader("demos/data/4randomCols-1.txt");  data=afr.getDouble2DMatrix();  double[] expectedFromMILCA_2={-0.04614525,-0.00861460,-0.00164540,-0.01130354,-0.01339670,-0.00964035,-0.00237072,-0.00096891};  System.out.println("Kraskov comparison 2 - univariate random data 2");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{1}),kNNs,expectedFromMILCA_2);}  }
class C{  private static void decodeHanziSegment(BitSource bits,StringBuilder result,int count) throws FormatException {  if (count * 13 > bits.available()) {    throw FormatException.getFormatInstance();  }  byte[] buffer=new byte[2 * count];  int offset=0;  while (count > 0) {    int twoBytes=bits.readBits(13);    int assembledTwoBytes=((twoBytes / 0x060) << 8) | (twoBytes % 0x060);    if (assembledTwoBytes < 0x003BF) {      assembledTwoBytes+=0x0A1A1;    } else {      assembledTwoBytes+=0x0A6A1;    }    buffer[offset]=(byte)((assembledTwoBytes >> 8) & 0xFF);    buffer[offset + 1]=(byte)(assembledTwoBytes & 0xFF);    offset+=2;    count--;  }  try {    result.append(new String(buffer,StringUtils.GB2312));  } catch (  UnsupportedEncodingException uee) {    throw FormatException.getFormatInstance();  }}  }
class C{  @Override public SignatureLibraryRelease parse() throws IOException {  LOGGER.debug("Starting to parse hmm file.");  SignatureLibraryRelease release=new SignatureLibraryRelease(library,releaseVersion);  for (  Resource modelFile : modelFiles) {    BufferedReader reader=null;    try {      String accession=null, id=null, description=null;      reader=new BufferedReader(new InputStreamReader(modelFile.getInputStream()));      int lineNumber=0;      String line;      while ((line=reader.readLine()) != null) {        if (LOGGER.isDebugEnabled() && lineNumber++ % 10000 == 0) {          LOGGER.debug("Parsed " + lineNumber + " lines of the HMM file.");          LOGGER.debug("Parsed " + release.getSignatures().size() + " signatures.");        }        line=line.trim();        if (line.length() > 0) {switch (line.charAt(0)) {case '/':            if (END_OF_RECORD.equals(line.trim())) {              if (accession != null && id != null) {                release.addSignature(createSignature(accession,id,description,release));              }              accession=null;              id=null;              description=null;            }          break;case 'I':        if (id == null) {          id=extractValue(prositeModelType.getIdLinePattern(),line,1);        }      break;case 'A':    if (accession == null) {      accession=extractValue(ACCESSION_PATTERN,line,1);    }  break;case 'D':if (description == null) {  description=extractValue(DESC_LINE,line,1);}break;}}}}  finally {if (reader != null) {reader.close();}}}return release;}  }
class C{  private float scaleCoord(float min,float max,float val,float extent){  float fmin=Math.min(min,max);  float fmax=Math.max(min,max);  float diff=fmax - fmin;  float scale=(val - fmin) / diff;  return ((extent * 2 * scale) - extent) * 0.8f;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.467 -0400",hash_original_method="58217172C1E7559C81FB0D3DB6879CD3",hash_generated_method="4C846FE7F7827A94E7A577C93E5E67B2") static int differenceEncoded(String es1,String es2){  if (es1 == null || es2 == null) {    return 0;  }  int lengthToMatch=Math.min(es1.length(),es2.length());  int diff=0;  for (int i=0; i < lengthToMatch; i++) {    if (es1.charAt(i) == es2.charAt(i)) {      diff++;    }  }  return diff;}  }
class C{  protected void retrieveFromListExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String idFormato=request.getParameter("idFormato");  ServiceRepository services=getServiceRepository(request);  GestionDescripcionBI descripcionService=services.lookupGestionDescripcionBI();  FmtFichaVO fmtFichaVO=descripcionService.getFmtFicha(idFormato);  setInTemporalSession(request,FMT_FICHA_VO,fmtFichaVO);  setReturnActionFordward(request,mapping.findForward("retrieveFromList"));}  }
class C{  public CompilationResult compile(TestConfiguration configuration){  TestUtilities.ensureDirectoryExists(new File(configuration.getOptions().get("-d")));  final StringWriter javacOutput=new StringWriter();  DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<JavaFileObject>();  JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();  StandardJavaFileManager fileManager=compiler.getStandardFileManager(null,null,null);  Iterable<? extends JavaFileObject> javaFiles=fileManager.getJavaFileObjects(configuration.getTestSourceFiles().toArray(new File[]{}));  final List<String> options=new ArrayList<String>();  options.add("-processor");  options.add(PluginUtil.join(",",configuration.getProcessors()));  List<String> nonJvmOptions=new ArrayList<String>();  for (  String option : configuration.getFlatOptions()) {    if (!option.startsWith("-J-")) {      nonJvmOptions.add(option);    }  }  nonJvmOptions.add("-Xmaxerrs");  nonJvmOptions.add("100000");  nonJvmOptions.add("-Xmaxwarns");  nonJvmOptions.add("100000");  options.addAll(nonJvmOptions);  if (configuration.shouldEmitDebugInfo()) {    System.out.println("Running test using the following invocation:");    System.out.println("javac " + PluginUtil.join(" ",options) + " "+ PluginUtil.join(" ",configuration.getTestSourceFiles()));  }  JavaCompiler.CompilationTask task=compiler.getTask(javacOutput,fileManager,diagnostics,options,new ArrayList<String>(),javaFiles);  final Boolean compiledWithoutError=task.call();  javacOutput.flush();  return new CompilationResult(compiledWithoutError,javacOutput.toString(),javaFiles,diagnostics.getDiagnostics());}  }
class C{  @Override public void run(){  amIActive=true;  int progress;  int row, col, i;  int baseCol, baseRow, appendCol, appendRow;  double x, y, z, zN, zBase, zAppend;  double w1, w2, dist1, dist2, sumDist;  double r1, g1, b1, r2, g2, b2;  int r, g, b;  boolean performHistoMatching=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputBaseHeader=args[0];  String inputHeader=args[1];  String outputHeader=args[2];  String resampleMethod=args[3].toLowerCase().trim();  if (!resampleMethod.equals("nearest neighbour") && !resampleMethod.equals("bilinear") && !resampleMethod.contains("cubic")) {    showFeedback("Resample method not recognized");    return;  }  if (args[4].toLowerCase().contains("true")) {    performHistoMatching=true;  } else {    performHistoMatching=false;  }  double power=Double.parseDouble(args[5]);  if (power > 15.0) {    power=15.0;  }  if (power < 1.0) {    power=1.0;  }  try {    if (performHistoMatching) {      String inputHeaderAdjusted=StringUtilities.replaceLast(inputHeader,".dep","_temp1.dep");      histogramMatching(inputHeader,inputBaseHeader,inputHeaderAdjusted);      inputHeader=inputHeaderAdjusted;    }    WhiteboxRaster baseRaster=new WhiteboxRaster(inputBaseHeader,"r");    WhiteboxRaster appendRaster=new WhiteboxRaster(inputHeader,"r");    boolean rgbMode=((baseRaster.getDataScale() == WhiteboxRasterBase.DataScale.RGB) & (appendRaster.getDataScale() == WhiteboxRasterBase.DataScale.RGB));    double cellSizeX=baseRaster.getCellSizeX();    double cellSizeY=baseRaster.getCellSizeY();    double baseNoData=baseRaster.getNoDataValue();    double appendNoData=appendRaster.getNoDataValue();    double outputNoData=baseNoData;    int baseCols=baseRaster.getNumberColumns();    int baseRows=baseRaster.getNumberRows();    int appendCols=appendRaster.getNumberColumns();    int appendRows=appendRaster.getNumberRows();    double baseNorth=baseRaster.getNorth();    double baseSouth=baseRaster.getSouth();    double baseEast=baseRaster.getEast();    double baseWest=baseRaster.getWest();    double baseNSRange=baseNorth - baseSouth;    double baseEWRange=baseEast - baseWest;    double appendNorth=appendRaster.getNorth();    double appendSouth=appendRaster.getSouth();    double appendEast=appendRaster.getEast();    double appendWest=appendRaster.getWest();    double appendNSRange=appendNorth - appendSouth;    double appendEWRange=appendEast - appendWest;    double north, south, east, west;    if (baseNorth > baseSouth) {      north=Double.NEGATIVE_INFINITY;      south=Double.POSITIVE_INFINITY;      if (baseNorth > north) {        north=baseNorth;      }      if (appendNorth > north) {        north=appendNorth;      }      if (baseSouth < south) {        south=baseSouth;      }      if (appendSouth < south) {        south=appendSouth;      }    } else {      north=Double.POSITIVE_INFINITY;      south=Double.NEGATIVE_INFINITY;      if (baseNorth < north) {        north=baseNorth;      }      if (appendNorth < north) {        north=appendNorth;      }      if (baseSouth > south) {        south=baseSouth;      }      if (appendSouth > south) {        south=appendSouth;      }    }    if (baseEast > baseWest) {      east=Double.NEGATIVE_INFINITY;      west=Double.POSITIVE_INFINITY;      if (baseEast > east) {        east=baseEast;      }      if (appendEast > east) {        east=appendEast;      }      if (baseWest < west) {        west=baseWest;      }      if (appendWest < west) {        west=appendWest;      }    } else {      east=Double.POSITIVE_INFINITY;      west=Double.NEGATIVE_INFINITY;      if (baseEast < east) {        east=baseEast;      }      if (appendEast < east) {        east=appendEast;      }      if (baseWest > west) {        west=baseWest;      }      if (appendWest > west) {        west=appendWest;      }    }    int nRows=(int)Math.round(Math.abs(north - south) / cellSizeY);    int nCols=(int)Math.round(Math.abs(east - west) / cellSizeX);    WhiteboxRaster destination=new WhiteboxRaster(outputHeader,north,south,east,west,nRows,nCols,WhiteboxRasterBase.DataScale.CONTINUOUS,WhiteboxRasterBase.DataType.FLOAT,outputNoData,outputNoData);    if (rgbMode) {      destination.setDataScale(WhiteboxRasterBase.DataScale.RGB);    }    int nRowsLessOne=nRows - 1;    String distToEdgeBaseHeader=StringUtilities.replaceLast(inputBaseHeader,".dep","_temp1.dep");    WhiteboxRaster distToEdgeBase=new WhiteboxRaster(distToEdgeBaseHeader,"rw",inputBaseHeader,WhiteboxRaster.DataType.FLOAT,Float.POSITIVE_INFINITY);    distToEdgeBase.isTemporaryFile=true;    double[] data;    for (row=0; row < baseRows; row++) {      data=baseRaster.getRowValues(row);      for (col=0; col < baseCols; col++) {        if (row == 0 || row == baseRows - 1) {          distToEdgeBase.setValue(row,col,0.0);        } else         if (col == 0 || col == baseCols - 1) {          distToEdgeBase.setValue(row,col,0.0);        } else {          if (data[col] != baseNoData) {            if (data[col - 1] == baseNoData || data[col + 1] == baseNoData) {              distToEdgeBase.setValue(row,col,0.0);            }          } else {            distToEdgeBase.setValue(row,col,0.0);          }        }      }    }    calculateDistance(distToEdgeBase);    String distToEdgeAppendHeader=whitebox.utilities.StringUtilities.replaceLast(inputBaseHeader,".dep","_temp2.dep");    WhiteboxRaster distToEdgeAppend=new WhiteboxRaster(distToEdgeAppendHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,Float.POSITIVE_INFINITY);    distToEdgeAppend.isTemporaryFile=true;    for (row=0; row < appendRows; row++) {      data=appendRaster.getRowValues(row);      for (col=0; col < appendCols; col++) {        if (row == 0 || row == appendRows - 1) {          distToEdgeAppend.setValue(row,col,0.0);        } else         if (col == 0 || col == appendCols - 1) {          distToEdgeAppend.setValue(row,col,0.0);        } else {          if (data[col] != appendNoData) {            if (data[col - 1] == appendNoData || data[col + 1] == appendNoData) {              distToEdgeAppend.setValue(row,col,0.0);            }          } else {            distToEdgeAppend.setValue(row,col,0.0);          }        }      }    }    calculateDistance(distToEdgeAppend);    if (resampleMethod.contains("nearest")) {      for (row=0; row < nRows; row++) {        for (col=0; col < nCols; col++) {          x=destination.getXCoordinateFromColumn(col);          y=destination.getYCoordinateFromRow(row);          baseCol=baseRaster.getColumnFromXCoordinate(x);          baseRow=baseRaster.getRowFromYCoordinate(y);          appendCol=appendRaster.getColumnFromXCoordinate(x);          appendRow=appendRaster.getRowFromYCoordinate(y);          zBase=baseRaster.getValue(baseRow,baseCol);          zAppend=appendRaster.getValue(appendRow,appendCol);          if (zBase != baseNoData && zAppend == appendNoData) {            destination.setValue(row,col,zBase);          } else           if (zBase == baseNoData && zAppend != appendNoData) {            destination.setValue(row,col,zAppend);          } else           if (zBase == baseNoData && zAppend == appendNoData) {            destination.setValue(row,col,outputNoData);          } else {            dist1=distToEdgeBase.getValue(baseRow,baseCol);            dist2=distToEdgeAppend.getValue(appendRow,appendCol);            sumDist=Math.pow(dist1,power) + Math.pow(dist2,power);            w1=Math.pow(dist1,power) / sumDist;            w2=Math.pow(dist2,power) / sumDist;            if (!rgbMode) {              z=w1 * zBase + w2 * zAppend;            } else {              r1=(double)((int)zBase & 0xFF);              g1=(double)(((int)zBase >> 8) & 0xFF);              b1=(double)(((int)zBase >> 16) & 0xFF);              r2=(double)((int)zAppend & 0xFF);              g2=(double)(((int)zAppend >> 8) & 0xFF);              b2=(double)(((int)zAppend >> 16) & 0xFF);              r=(int)((r1 * w1) + (r2 * w2));              g=(int)((g1 * w1) + (g2 * w2));              b=(int)((b1 * w1) + (b2 * w2));              z=(double)((255 << 24) | (b << 16) | (g << 8)| r);            }            destination.setValue(row,col,z);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / nRowsLessOne);        updateProgress("Resampling images: ",progress);      }    } else {      if (destination.getDataType() != WhiteboxRaster.DataType.DOUBLE && destination.getDataType() != WhiteboxRaster.DataType.FLOAT) {        showFeedback("The destination image is not of an appropriate data" + " type (i.e. double or float) to perform this operation.");        return;      }      double dX, dY;      double srcRow, srcCol;      double originRow, originCol;      double rowN, colN;      double sumOfDist;      double[] shiftX;      double[] shiftY;      int numNeighbours=0;      double[][] neighbour;      if (resampleMethod.contains("cubic")) {        shiftX=new double[]{-1,0,1,2,-1,0,1,2,-1,0,1,2,-1,0,1,2};        shiftY=new double[]{-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2};        numNeighbours=16;        neighbour=new double[numNeighbours][2];      } else {        shiftX=new double[]{0,1,0,1};        shiftY=new double[]{0,0,1,1};        numNeighbours=4;        neighbour=new double[numNeighbours][2];      }      for (row=0; row < nRows; row++) {        for (col=0; col < nCols; col++) {          x=destination.getXCoordinateFromColumn(col);          y=destination.getYCoordinateFromRow(row);          baseCol=baseRaster.getColumnFromXCoordinate(x);          baseRow=baseRaster.getRowFromYCoordinate(y);          srcRow=(baseNorth - y) / baseNSRange * (baseRows - 0.5);          srcCol=(x - baseWest) / baseEWRange * (baseCols - 0.5);          originRow=Math.floor(srcRow);          originCol=Math.floor(srcCol);          sumOfDist=0;          for (i=0; i < numNeighbours; i++) {            rowN=originRow + shiftY[i];            colN=originCol + shiftX[i];            neighbour[i][0]=baseRaster.getValue((int)rowN,(int)colN);            dY=rowN - srcRow;            dX=colN - srcCol;            if ((dX + dY) != 0 && neighbour[i][0] != baseNoData) {              neighbour[i][1]=1 / (dX * dX + dY * dY);              sumOfDist+=neighbour[i][1];            } else             if (neighbour[i][0] == baseNoData) {              neighbour[i][1]=0;            } else {              neighbour[i][1]=99999999;              sumOfDist+=neighbour[i][1];            }          }          if (sumOfDist > 0) {            z=0;            for (i=0; i < numNeighbours; i++) {              z+=neighbour[i][0] * neighbour[i][1] / sumOfDist;            }            zBase=z;          } else {            zBase=baseNoData;          }          appendCol=appendRaster.getColumnFromXCoordinate(x);          appendRow=appendRaster.getRowFromYCoordinate(y);          srcRow=(appendNorth - y) / appendNSRange * (appendRows - 0.5);          srcCol=(x - appendWest) / appendEWRange * (appendCols - 0.5);          originRow=Math.floor(srcRow);          originCol=Math.floor(srcCol);          sumOfDist=0;          for (i=0; i < numNeighbours; i++) {            rowN=originRow + shiftY[i];            colN=originCol + shiftX[i];            neighbour[i][0]=appendRaster.getValue((int)rowN,(int)colN);            dY=rowN - srcRow;            dX=colN - srcCol;            if ((dX + dY) != 0 && neighbour[i][0] != appendNoData) {              neighbour[i][1]=1 / (dX * dX + dY * dY);              sumOfDist+=neighbour[i][1];            } else             if (neighbour[i][0] == appendNoData) {              neighbour[i][1]=0;            } else {              neighbour[i][1]=99999999;              sumOfDist+=neighbour[i][1];            }          }          if (sumOfDist > 0) {            z=0;            for (i=0; i < numNeighbours; i++) {              z+=(neighbour[i][0] * neighbour[i][1]) / sumOfDist;            }            zAppend=z;          } else {            zAppend=appendNoData;          }          if (zBase != baseNoData && zAppend == appendNoData) {            destination.setValue(row,col,zBase);          } else           if (zBase == baseNoData && zAppend != appendNoData) {            destination.setValue(row,col,zAppend);          } else           if (zBase == baseNoData && zAppend == appendNoData) {            destination.setValue(row,col,outputNoData);          } else {            dist1=distToEdgeBase.getValue(baseRow,baseCol);            dist2=distToEdgeAppend.getValue(appendRow,appendCol);            sumDist=dist1 + dist2;            w1=dist1 / sumDist;            w2=dist2 / sumDist;            z=w1 * zBase + w2 * zAppend;            destination.setValue(row,col,z);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / nRowsLessOne);        updateProgress("Resampling images: ",progress);      }    }    destination.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    destination.addMetadataEntry("Created on " + new Date());    destination.close();    distToEdgeBase.close();    distToEdgeAppend.close();    baseRaster.close();    if (performHistoMatching) {      File header=new File(inputHeader);      if (header.exists()) {        header.delete();      }      File dataFile=new File(StringUtilities.replaceLast(inputHeader,".dep",".tas"));      if (dataFile.exists()) {        dataFile.delete();      }    } else {      appendRaster.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String toString(){  String result;  result=super.toString();  result=result.substring(0,result.length() - 1);  result+=",name=" + getHistoryName() + ",history="+ getHistory()+ "]";  return result;}  }
class C{  public void register(ItemType type){  int id;  if (type instanceof BlockType) {    id=nextBlockId;  } else {    id=nextItemId;  }  while (idToType.containsKey(id)) {    ++id;  }  idToType.put(id,type);  type.setId(id);  if (type instanceof BlockType) {    nextBlockId=id + 1;  } else {    nextItemId=id + 1;  }}  }
class C{  @Override public void filter(final IScope scope,final IShape source,final Collection<? extends IShape> results){  final IAgent sourceAgent=source == null ? null : source.getAgent();  results.remove(sourceAgent);  final Iterator<? extends IShape> it=results.iterator();  while (it.hasNext()) {    if (!contains(scope,it.next().getAgent())) {      it.remove();    }  }}  }
class C{  public static void generateEventsByPutOperation() throws Exception {  Connection connection=pool.acquireConnection();  String regionName=Region.SEPARATOR + REGION_NAME;  ServerRegionProxy srp=new ServerRegionProxy(regionName,pool);  for (int i=0; i < eventIds.length; i++) {    srp.putOnForTestsOnly(connection,"KEY-" + i,"VAL-" + i,eventIds[i],null);  }  srp.putOnForTestsOnly(connection,LAST_KEY,"LAST_VAL",eventIdForLastKey,null);}  }
class C{  public boolean removeAuth(String userName,String password,String indexName){  if (userName == null || userName.equals("") || indexName == null || indexName.equals("")) {    return false;  }  userName=userName.toLowerCase();  indexName=indexName.toLowerCase();  if (userName.equals("root")) {    return false;  }  UserData user=getUser(userName);  if (user == null)   return false;  if (user.isValidPassword(password)) {    Set<String> indices=user.getIndexFilters();    if (indexName.charAt(0) != '/') {      indexName="/" + indexName;    }    if (indices.contains(indexName)) {      indices.remove(indexName);      putUser(user);      return true;    }  }  return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_1__CODE_LANG_1:    getCodeLang_1().clear();  return;case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_1__CODE_LANGS_1:getCodeLangs_1().clear();return;}super.eUnset(featureID);}  }
class C{  public Texture(int width,int height,int pixelFormat) throws Exception {  this.id=glGenTextures();  this.width=width;  this.height=height;  glBindTexture(GL_TEXTURE_2D,this.id);  glTexImage2D(GL_TEXTURE_2D,0,GL_DEPTH_COMPONENT,this.width,this.height,0,pixelFormat,GL_FLOAT,(ByteBuffer)null);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);}  }
class C{  public static List<String> readLines(File file,String encoding) throws IOException {  return readLines(file,Charsets.toCharset(encoding));}  }
class C{  private void handleImsDispatchError(SipRequest request){  final PresenceService service=mImsModule.getPresenceService();  if (request.getMethod().equals(Request.NOTIFY) && mRcsSettings.isSocialPresenceSupported() && service.isServiceStarted()) {    SubscriptionStateHeader stateHeader=(SubscriptionStateHeader)request.getHeader(SubscriptionStateHeader.NAME);    if ((stateHeader != null) && stateHeader.getState().equalsIgnoreCase("terminated")) {      if (sLogger.isActivated()) {        sLogger.info("Presence subscription has been terminated by server");      }      service.getPresenceSubscriber().terminatedByServer();    }  }}  }
class C{  static SharedFsCheckpointData read(File file,Marshaller m,IgniteLogger log) throws IOException, IgniteCheckedException {  assert file != null;  assert m != null;  assert log != null;  InputStream in=new FileInputStream(file);  try {    return (SharedFsCheckpointData)m.unmarshal(in,U.gridClassLoader());  }  finally {    U.close(in,log);  }}  }
class C{  public CheckpointedTaxiRideSource(String dataFilePath,int servingSpeedFactor){  this.dataFilePath=dataFilePath;  this.servingSpeed=servingSpeedFactor;}  }
class C{  public void removePreBuiltClassifier(Classifier c){  m_preBuiltClassifiers.remove(c);}  }
class C{  private void cmd_errorEMail(){  EMailDialog emd=new EMailDialog(this,"EMail Trace",MUser.get(Env.getCtx()),"","Adempiere Trace Info",CLogErrorBuffer.get(true).getErrorInfo(Env.getCtx(),bErrorsOnly.isSelected()),null);}  }
class C{  public static boolean hasImportStatic(String fqClassName,String memberName,PsiElement context){  final PsiFile file=context.getContainingFile();  if (!(file instanceof PsiJavaFile)) {    return false;  }  final PsiJavaFile javaFile=(PsiJavaFile)file;  final PsiImportList importList=javaFile.getImportList();  if (importList == null) {    return false;  }  final PsiImportStaticStatement[] importStaticStatements=importList.getImportStaticStatements();  for (  PsiImportStaticStatement importStaticStatement : importStaticStatements) {    if (importStaticStatement.isOnDemand()) {      PsiClass psiClass=ClassUtils.findClass(fqClassName,context);      if (psiClass != null && psiClass.equals(importStaticStatement.resolveTargetClass())) {        return true;      }      continue;    }    final String name=importStaticStatement.getReferenceName();    if (!memberName.equals(name)) {      continue;    }    final PsiJavaCodeReferenceElement importReference=importStaticStatement.getImportReference();    if (importReference == null) {      continue;    }    final PsiElement qualifier=importReference.getQualifier();    if (qualifier == null) {      continue;    }    final String qualifierText=qualifier.getText();    if (fqClassName.equals(qualifierText)) {      return true;    }  }  return false;}  }
class C{  @Override public InputSource resolveEntity(String publicId,String systemId) throws SAXException {  if (publicId == null || systemId == null) {    throw new SAXException(LocalizedStrings.GenerateMBeanHTML_PUBLIC_ID_0_SYSTEM_ID_1.toLocalizedString(new Object[]{publicId,systemId}));  }  String location=DTD_LOCATION;  InputSource result;{    InputStream stream=ClassPathLoader.getLatest().getResourceAsStream(getClass(),location);    if (stream != null) {      result=new InputSource(stream);    } else {      throw new SAXNotRecognizedException(LocalizedStrings.GenerateMBeanHTML_DTD_NOT_FOUND_0.toLocalizedString(location));    }  }  return result;}  }
class C{  public EncapsulateFieldDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.ENCAPSULATE_FIELD,project,description,comment,arguments,flags);}  }
class C{  public static double[][] makeDelayEmbeddingVector(double[][] data,int k){  try {    return makeDelayEmbeddingVector(data,k,k - 1,data.length - k + 1);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public static File relativeFile(File f){  if (f.isAbsolute()) {    f=relativeFile(new File("."),f);  }  return f;}  }
class C{  public CUsurfObject(){}  }
class C{  public QueueInfo(ClientId name,QueueState state){  this.name=name;  this.requestCount=state.getRequestCount();  this.firstRequestNo=state.getFirstRequestNo();  this.lastSentTime=state.getLastSentTime();  this.firstRequestSendCount=state.getFirstRequestSendCount();  this.lastSuccessId=state.getLastSuccessId();  this.lastSuccessTime=state.getLastSuccessTime();  this.lastSendResult=state.getLastSendResult();}  }
class C{  public TriggerBuilder<T> forJob(String jobName){  this.jobKey=new JobKey(jobName,null);  return this;}  }
class C{  public static void scale(Bitmap src,Bitmap dest,int x,int y,int sw,int sh,int dx,int dy,int dw,int dh){  scale(src,dest,CLEAR_COLOR,x,y,sw,sh,dx,dy,dw,dh);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(FileDownloader.getFileDownloader(stack.getUIMgrSafe()).getLastDownloadTimestamp());}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public boolean removeKey(ECKey key){  lock.lock();  try {    return keychain.remove(key);  }  finally {    lock.unlock();  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  ClipPath clone=(ClipPath)super.clone();  clone.xValue=(double[])this.xValue.clone();  clone.yValue=(double[])this.yValue.clone();  return clone;}  }
class C{  public boolean unlockIt(){  log.info("unlockIt - " + toString());  return true;}  }
class C{  @Override public void zoom(double percent){}  }
class C{  private static boolean isNodeList(Object context){  if (context instanceof List) {    List ls=(List)context;    int ln=ls.size();    for (int i=0; i < ln; i++) {      if (!(ls.get(i) instanceof Node)) {        return false;      }    }    return true;  } else {    return false;  }}  }
class C{  public boolean hasStep1Required(){  return getStep1Required() != null;}  }
class C{  protected Instance convertInstance(Instance currentInstance){  Instance newInstance;  double vals[]=new double[getOutputFormat().numAttributes()];  int classIndex=(m_ntob == null) ? getInputFormat().classIndex() : m_ntob.getOutputFormat().classIndex();  for (int i=0; i < m_k; i++) {    vals[i]=computeRandomProjection(i,classIndex,currentInstance);  }  if (classIndex != -1) {    vals[m_k]=currentInstance.value(classIndex);  }  newInstance=new DenseInstance(currentInstance.weight(),vals);  newInstance.setDataset(getOutputFormat());  return newInstance;}  }
class C{  public final String orJunior(){  return get(Seed.PEERTYPE,Seed.PEERTYPE_JUNIOR);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public float distanceFrom(LatLong other){  GeocentricCoordinates otherPnt=GeocentricCoordinates.getInstance(other.getLongitude(),other.getLatitude());  GeocentricCoordinates thisPnt=GeocentricCoordinates.getInstance(this.getLongitude(),this.getLatitude());  float cosTheta=Geometry.cosineSimilarity(thisPnt,otherPnt);  return MathUtil.acos(cosTheta) * 180f / MathUtil.PI;}  }
class C{  public Storage(SharedPreferences preferences,Gson gson){  super(preferences,gson);}  }
class C{  WalkingIteratorSorted(Compiler compiler,int opPos,int analysis,boolean shouldLoadWalkers) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,shouldLoadWalkers);}  }
class C{  public static <T>Iterable<T> shuffle(Iterable<T> iterable){  return XUtils.shuffle(iterable);}  }
class C{  public boolean isOutDated(){  return isOutDated(true);}  }
class C{  @Override public void rollback(Xid xid) throws XAException {  if (isDebugEnabled()) {    debugCode("rollback(" + JdbcXid.toString(xid) + ");");  }  try {    if (prepared) {      try (Statement stat=physicalConn.createStatement()){        stat.execute("ROLLBACK TRANSACTION " + JdbcXid.toString(xid));      }       prepared=false;    } else {      physicalConn.rollback();    }    physicalConn.setAutoCommit(true);  } catch (  SQLException e) {    throw convertException(e);  }  currentTransaction=null;}  }
class C{  private SampleReader(MatrixReader reader,ParameterFile parameterFile){  super();  this.reader=reader;  this.parameterFile=parameterFile;}  }
class C{  @Override public int writeTelegram(char[] buffer){  return writeTelegram(buffer,0,null);}  }
class C{  private int translateNetworkTypeToApiFlag(int networkType){switch (networkType) {case ConnectivityManager.TYPE_MOBILE:    return Request.NETWORK_MOBILE;case ConnectivityManager.TYPE_WIFI:  return Request.NETWORK_WIFI;case ConnectivityManager.TYPE_BLUETOOTH:return Request.NETWORK_BLUETOOTH;default :return 0;}}  }
class C{  public List<FileStatus> browse(String filePath) throws Exception {  FileSystem hdfsFileSystem=null;  FileStatus[] listStatus;  try {    hdfsFileSystem=getFileSystem();    Path path=new Path(filePath);    listStatus=hdfsFileSystem.listStatus(path);  } catch (  Exception ex) {    LOG.error(" Exception when browsing files for the path " + filePath,ex.getMessage());    throw new Exception(" Exception When browsing Files in HDFS .. Message :  " + ex.getMessage());  } finally {    if (hdfsFileSystem != null)     hdfsFileSystem.close();  }  return Arrays.asList(listStatus);}  }
class C{  public void saveMusicPreferences(final boolean flush){  if (Strings.isNotEmpty(musicPreferences)) {    if (Strings.isNotEmpty(musicVolumePreferenceName)) {      saveInPreferences(musicPreferences,musicVolumePreferenceName,musicVolume);    }    if (Strings.isNotEmpty(musicEnabledPreferenceName)) {      saveInPreferences(musicPreferences,musicEnabledPreferenceName,musicEnabled);    }    if (flush) {      flushPreferences();    }  }}  }
class C{  public static void putCursorAtTheEnd(EditText editText){  editText.setSelection(editText.getText().length());}  }
class C{  public int available(){  return mEnd - mPos;}  }
class C{  public X509Name(boolean reverse,String dirName,X509NameEntryConverter converter){  this(reverse,DefaultLookUp,dirName,converter);}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Fiat coinToFiat(Coin convertCoin){  final BigInteger converted=BigInteger.valueOf(convertCoin.value).multiply(BigInteger.valueOf(fiat.value)).divide(BigInteger.valueOf(coin.value));  if (converted.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0 || converted.compareTo(BigInteger.valueOf(Long.MIN_VALUE)) < 0)   throw new ArithmeticException("Overflow");  return Fiat.valueOf(fiat.currencyCode,converted.longValue());}  }
class C{  public GeoPoint(final double magnitude,final double x,final double y,final double z,double lat,double lon){  super(x * magnitude,y * magnitude,z * magnitude);  this.magnitude=magnitude;  if (lat > Math.PI * 0.5 || lat < -Math.PI * 0.5) {    throw new IllegalArgumentException("Latitude " + lat + " is out of range: must range from -Math.PI/2 to Math.PI/2");  }  if (lon < -Math.PI || lon > Math.PI) {    throw new IllegalArgumentException("Longitude " + lon + " is out of range: must range from -Math.PI to Math.PI");  }  this.latitude=lat;  this.longitude=lon;}  }
class C{  public void removeActionListener(ActionListener listener){  listenerList.remove(ActionListener.class,listener);}  }
class C{  public static String makeSystemName(String type,int bitNum){  String nName="";  if ((!type.equals("S")) && (!type.equals("L")) && (!type.equals("T"))) {    log.error("illegal type character proposed for system name - " + type);    return (nName);  }  if ((bitNum < 1) || ((type.equals("S")) && (bitNum > 1000)) || (bitNum > 8000)) {    log.error("illegal address range proposed for system name - " + bitNum);    return (nName);  }  nName="K" + type + Integer.toString(bitNum);  return (nName);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public void preStart(){}  }
class C{  private ClientSocket openRecycle(){  long now=CurrentTime.currentTime();  ClientSocket stream=null;synchronized (this) {    if (_idleHead != _idleTail) {      stream=_idle[_idleHead];      long freeTime=stream.getIdleStartTime();      _idle[_idleHead]=null;      _idleHead=(_idleHead + _idle.length - 1) % _idle.length;      if (now < freeTime + _loadBalanceIdleTime) {        _activeCount.incrementAndGet();        _keepaliveCountTotal++;        stream.clearIdleStartTime();        stream.toActive();        return stream;      }    }  }  if (stream != null) {    if (log.isLoggable(Level.FINER))     log.finer(this + " close idle " + stream+ " expire="+ QDate.formatISO8601(stream.getIdleStartTime() + _loadBalanceIdleTime));    stream.closeImpl();  }  return null;}  }
class C{  public static File absoluteFile(File file){  if (file != null) {    try {      file=file.getCanonicalFile();    } catch (    IOException e) {      file=file.getAbsoluteFile();    }  }  return file;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public CategoryGraph(Wikipedia pWiki,Iterable<Category> categories) throws WikiApiException {  Set<Integer> pageIDs=new HashSet<Integer>();  while (categories.iterator().hasNext()) {    pageIDs.add(categories.iterator().next().getPageId());  }  constructCategoryGraph(pWiki,pageIDs,null);}  }
class C{  public static boolean isNumericOrPunctuationOrSymbols(String token){  int len=token.length();  for (int i=0; i < len; ++i) {    char c=token.charAt(i);    if (!(Character.isDigit(c) || Characters.isPunctuation(c) || Characters.isSymbol(c))) {      return false;    }  }  return true;}  }
class C{  public static @Nullable Pair<Integer,Integer> decodeDimensions(byte[] bytes){  return decodeDimensions(new ByteArrayInputStream(bytes));}  }
class C{  public String[] deleteConditional(String systemName){  if (_conditionalSystemNames.size() <= 0) {    return (null);  }  Iterator<String> iter1=InstanceManager.getDefault(jmri.LogixManager.class).getSystemNameList().iterator();  while (iter1.hasNext()) {    String sNameLogix=iter1.next();    if (!sNameLogix.equals(getSystemName())) {      Logix x=InstanceManager.getDefault(jmri.LogixManager.class).getBySystemName(sNameLogix);      int numCond=x.getNumConditionals();      for (int i=0; i < numCond; i++) {        String sNameCond=x.getConditionalByNumberOrder(i);        Conditional c=InstanceManager.getDefault(jmri.ConditionalManager.class).getBySystemName(sNameCond);        ArrayList<ConditionalVariable> varList=c.getCopyOfStateVariables();        for (int k=0; k < varList.size(); k++) {          ConditionalVariable v=varList.get(k);          if ((v.getType() == Conditional.TYPE_CONDITIONAL_TRUE) || (v.getType() == Conditional.TYPE_CONDITIONAL_FALSE)) {            String name=v.getName();            Conditional c1=InstanceManager.getDefault(jmri.ConditionalManager.class).getConditional(name);            if (c1 == null) {              log.error("\"" + name + "\" is a non-existent Conditional variable in Conditional \""+ c.getUserName()+ "\" in Logix \""+ x.getUserName()+ "\" ("+ sNameLogix+ ")");            } else {              if (systemName.equals(c1.getSystemName())) {                String[] result=new String[]{name,systemName,c.getUserName(),sNameCond,x.getUserName(),sNameLogix};                return result;              }            }          }        }      }    }  }  if (!_conditionalSystemNames.remove(systemName)) {    log.error("attempt to delete Conditional not in Logix: " + systemName);    return null;  }  Conditional c=InstanceManager.getDefault(jmri.ConditionalManager.class).getBySystemName(systemName);  if (c == null) {    log.error("attempt to delete non-existant Conditional - " + systemName);    return null;  }  InstanceManager.getDefault(jmri.ConditionalManager.class).deleteConditional(c);  return (null);}  }
class C{  private String parseString(){  return readInputUntil(WHITESPACE_SPACE,WHITESPACE_TAB,WHITESPACE_NEWLINE,WHITESPACE_CARRIAGE_RETURN,ARRAY_ITEM_DELIMITER_TOKEN,DICTIONARY_ITEM_DELIMITER_TOKEN,DICTIONARY_ASSIGN_TOKEN,ARRAY_END_TOKEN);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:22.007 -0500",hash_original_method="D80087E99C638E2C1CFB51B0D1FE7131",hash_generated_method="51F3800AFAA28758CFC510E4F6E7B460") public static SmsMessage createFromPdu(byte[] pdu){  try {    SmsMessage msg=new SmsMessage();    msg.parsePdu(pdu);    return msg;  } catch (  RuntimeException ex) {    Log.e(LOG_TAG,"SMS PDU parsing failed: ",ex);    return null;  }}  }
class C{  public static ObjectAnimator ofPropertyValuesHolder(Object target,PropertyValuesHolder... values){  ObjectAnimator anim=new ObjectAnimator();  anim.mTarget=target;  anim.setValues(values);  return anim;}  }
class C{  public final boolean canSetLong(String field){  Column col=getColumn(field);  return (col == null ? false : col.canSetLong());}  }
class C{  static void unregister(final Object value){  Set<IDKey> registry=getRegistry();  if (registry != null) {    registry.remove(new IDKey(value));synchronized (HashCode.class) {      registry=getRegistry();      if (registry != null && registry.isEmpty()) {        REGISTRY.remove();      }    }  }}  }
class C{  protected void verify() throws Throwable {}  }
class C{  private static List<HtmlColumn> buildCache(UIComponent table){  if (table instanceof UIData) {    final int childCount=table.getChildCount();    if (childCount > 0) {      final List<HtmlColumn> results=new ArrayList<>(childCount);      for (      UIComponent kid : table.getChildren()) {        if ((kid instanceof UIColumn) && kid.isRendered()) {          results.add((HtmlColumn)kid);        }      }      return results;    } else {      return Collections.emptyList();    }  } else {    int count;    final Object value=table.getAttributes().get("cachedColumns");    if ((value != null) && (value instanceof Integer)) {      count=((Integer)value);    } else {      count=2;    }    if (count < 1) {      count=1;    }    final List<HtmlColumn> result=new ArrayList<>(count);    for (int i=0; i < count; i++) {      result.add(new HtmlColumn());    }    return result;  }}  }
class C{  public static void initialPayload(String s){}  }
class C{  public EmbeddedNavPanel(DrawingAttributes buttonColors,DrawingAttributes fadeColors,int buttonSize){  super();  centerDelegate=new CenterSupport(this);  panDelegate=new PanSupport(this);  zoomDelegate=new ZoomSupport(this);  setBackground(OMGraphicConstants.clear);  setOpaque(false);  initColors(buttonColors,fadeColors,buttonSize);  float lat=Environment.getFloat(Environment.Latitude,0f);  float lon=Environment.getFloat(Environment.Longitude,0f);  setRecenterPoint(new Point2D.Float(lon,lat));  layoutPanel();}  }
class C{  public int readUnsignedInt24(){  return (data[position++] & 0xFF) << 16 | (data[position++] & 0xFF) << 8 | (data[position++] & 0xFF);}  }
class C{  @Override public void onBuildHeaders(List<Header> target){  loadHeadersFromResource(R.xml.device_admin_headers,target);}  }
class C{  public String consumeElementSelector(){  int start=pos;  while (!isEmpty() && (matchesWord() || matchesAny('|','_','-')))   pos++;  return queue.substring(start,pos);}  }
class C{  @Override default CompletableFuture<OptionalDouble> averageInt(final ToIntFunction<? super T> fn){  return CompletableFuture.supplyAsync(null,getExec());}  }
class C{  private void writePreference(String name,Object value,DataOutputStream writer) throws IOException {  writer.writeUTF(name);  if (value instanceof Boolean) {    writer.writeByte(ContentTypeIds.BOOLEAN_TYPE_ID);    writer.writeBoolean((Boolean)value);  } else   if (value instanceof Integer) {    writer.writeByte(ContentTypeIds.INT_TYPE_ID);    writer.writeInt((Integer)value);  } else   if (value instanceof Long) {    writer.writeByte(ContentTypeIds.LONG_TYPE_ID);    writer.writeLong((Long)value);  } else   if (value instanceof Float) {    writer.writeByte(ContentTypeIds.FLOAT_TYPE_ID);    writer.writeFloat((Float)value);  } else   if (value instanceof String) {    writer.writeByte(ContentTypeIds.STRING_TYPE_ID);    writer.writeUTF((String)value);  } else {    throw new IllegalArgumentException("Type " + value.getClass().getName() + " not supported");  }}  }
class C{  public static boolean isPointInTriangle(Vector3 point,Vector3 t1,Vector3 t2,Vector3 t3){  v0.set(t1).sub(point);  v1.set(t2).sub(point);  v2.set(t3).sub(point);  float ab=v0.dot(v1);  float ac=v0.dot(v2);  float bc=v1.dot(v2);  float cc=v2.dot(v2);  if (bc * ac - cc * ab < 0)   return false;  float bb=v1.dot(v1);  if (ab * bc - ac * bb < 0)   return false;  return true;}  }
class C{  static void testIntFloorDivMod(int x,int y,Object divExpected,Object modExpected){  testIntFloorDiv(x,y,divExpected);  testIntFloorMod(x,y,modExpected);}  }
class C{  public void testSimpleCreate() throws RepositoryException, IOException {  final ValueFactory vf=om.getValueFactory();  final URI keyname=vf.createURI("attr:/test#name");  final Resource id=vf.createURI("gpo:test#1");  final int transCounter=om.beginNativeTransaction();  try {    final IGPO gpo=om.getGPO(id);    gpo.setValue(keyname,vf.createLiteral("Martyn"));    om.commitNativeTransaction(transCounter);  } catch (  Throwable t) {    om.rollbackNativeTransaction();    throw new RuntimeException(t);  }  ((ObjectMgrModel)om).clearCache();  final IGPO gpo=om.getGPO(vf.createURI("gpo:test#1"));  assertTrue("Martyn".equals(gpo.getValue(keyname).stringValue()));}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  errorStroke=(Stroke)SerializationUtils.unwrap((Serializable)in.readObject());}  }
class C{  private static StringBuilder appendKeyValuePair(final String key,final String value,final StringBuilder stringBuilder){  return stringBuilder.append(" ").append(key).append("=\"").append(value).append("\"");}  }
class C{  protected void updateIndexSetFor(int i,double C) throws Exception {  if (m_alpha[i] == 0 && m_alphaStar[i] == 0) {    m_iSet[i]=I1;    m_I0.delete(i);  } else   if (m_alpha[i] > 0) {    if (m_alpha[i] < C) {      if ((m_iSet[i] & I0) == 0) {        m_I0.insert(i);      }      m_iSet[i]=I0a;    } else {      m_iSet[i]=I3;      m_I0.delete(i);    }  } else {    if (m_alphaStar[i] < C) {      if ((m_iSet[i] & I0) == 0) {        m_I0.insert(i);      }      m_iSet[i]=I0b;    } else {      m_iSet[i]=I2;      m_I0.delete(i);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ByteSendPacket send(byte[] bytes){  return send(bytes,null);}  }
class C{  List<IssueResolution> collectAllResolutions(XtextResource resource,RegionWithCursor offset,Multimap<Integer,Issue> offset2issue){  EObject script=resource.getContents().get(0);  ICompositeNode scriptNode=NodeModelUtils.getNode(script);  ILeafNode offsetNode=NodeModelUtils.findLeafNodeAtOffset(scriptNode,offset.getGlobalCursorOffset());  int offStartLine=offsetNode.getTotalStartLine();  List<Issue> allIssues=QuickFixTestHelper.extractAllIssuesInLine(offStartLine,offset2issue);  List<IssueResolution> resolutions=Lists.newArrayList();  for (  Issue issue : allIssues) {    if (issue.getLineNumber() == offsetNode.getStartLine() && issue.getLineNumber() <= offsetNode.getEndLine()) {      Display.getDefault().syncExec(null);    }  }  return resolutions;}  }
class C{  @Override public void acceptDataSet(DataSetEvent e){  m_busy=true;  m_stopRequested.set(false);  if (m_log != null && e.getDataSet().numInstances() > 0) {    m_log.statusMessage(statusMessagePrefix() + "Sorting batch...");  }  if (e.isStructureOnly()) {    DataSetEvent d=new DataSetEvent(this,e.getDataSet());    notifyDataListeners(d);    m_busy=false;    return;  }  try {    init(new Instances(e.getDataSet(),0));  } catch (  IllegalArgumentException ex) {    if (m_log != null) {      String message="ERROR: There is a problem with the incoming instance structure";      stopWithErrorMessage(message,ex);      m_busy=false;      return;    }  }  List<InstanceHolder> instances=new ArrayList<InstanceHolder>();  for (int i=0; i < e.getDataSet().numInstances(); i++) {    InstanceHolder h=new InstanceHolder();    h.m_instance=e.getDataSet().instance(i);    instances.add(h);  }  Collections.sort(instances,m_sortComparator);  Instances output=new Instances(e.getDataSet(),0);  for (int i=0; i < instances.size(); i++) {    output.add(instances.get(i).m_instance);  }  DataSetEvent d=new DataSetEvent(this,output);  notifyDataListeners(d);  if (m_log != null) {    m_log.statusMessage(statusMessagePrefix() + "Finished.");  }  m_busy=false;}  }
class C{  protected void growUp(World world,BlockPos pos){  world.setBlockState(pos.up(),this.getDefaultState());}  }
class C{  public void dispose(){  mmbBuf.dispose();}  }
class C{  @VisibleForTesting synchronized void fakeSave(){  try {    wallet.commitTx(multisigContract);  } catch (  VerificationException e) {    throw new RuntimeException(e);  }  state=State.PROVIDE_MULTISIG_CONTRACT_TO_SERVER;}  }
class C{  public float startOfBin(int binIndex){  return binBoundaries[binIndex];}  }
class C{  public Object opt(String key){  return key == null ? null : this.map.get(key);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-05 00:22:07.168 -0400",hash_original_method="D6937D25AC81F70361EFC7EFF460134D",hash_generated_method="8C79D4DC8FD24AF9B584EBCBB601BCB5") public static int methodModifiers(){  return PUBLIC | PROTECTED | PRIVATE| ABSTRACT| STATIC| FINAL| SYNCHRONIZED| NATIVE| STRICT;}  }
class C{  public void postRegister(Boolean registrationDone){}  }
class C{  public final Region createRegion(final String name,final RegionAttributes attributes) throws CacheException {  return delegate.createRegion(name,attributes);}  }
class C{  public synchronized void addXTextLabel(double x,String text){  mXTextLabels.put(x,text);}  }
class C{  public static Tree enclosingOfKind(final TreePath path,final Set<Tree.Kind> kinds){  TreePath p=path;  while (p != null) {    Tree leaf=p.getLeaf();    assert leaf != null;    if (kinds.contains(leaf.getKind())) {      return leaf;    }    p=p.getParentPath();  }  return null;}  }
class C{  public ParseException(Exception e){  exception=e;  lineNumber=-1;  columnNumber=-1;}  }
class C{  public static <ST,A>XorTSeq<ST,A> fromAnyM(final AnyMSeq<A> anyM){  return of(anyM.map(null));}  }
class C{  public AssertionFailedException(String detail){  super(detail);}  }
class C{  public boolean isCompatibleSampleModel(SampleModel sm){  if (!(sm instanceof SinglePixelPackedSampleModel)) {    return false;  }  if (numComponents != sm.getNumBands()) {    return false;  }  if (sm.getTransferType() != transferType) {    return false;  }  SinglePixelPackedSampleModel sppsm=(SinglePixelPackedSampleModel)sm;  int[] bitMasks=sppsm.getBitMasks();  if (bitMasks.length != maskArray.length) {    return false;  }  int maxMask=(int)((1L << DataBuffer.getDataTypeSize(transferType)) - 1);  for (int i=0; i < bitMasks.length; i++) {    if ((maxMask & bitMasks[i]) != (maxMask & maskArray[i])) {      return false;    }  }  return true;}  }
class C{  @Override public UltimateRecyclerviewViewHolder onCreateHeaderViewHolder(ViewGroup viewGroup){  View view=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.stick_header_item,viewGroup,false);  return new UltimateRecyclerviewViewHolder(view){  };}  }
class C{  private void initializeComponents(){  if (amazonDynamoDBClient == null) {    amazonDynamoDBClient=new AmazonDynamoDBClient();    scoreKeeperManager=new ScoreKeeperManager(amazonDynamoDBClient);    skillContext=new SkillContext();  }}  }
class C{  public String globalInfo(){  return "An instance filter that adds an ID attribute to the dataset. " + "The new attribute contains a unique ID for each instance.\n" + "Note: The ID is not reset for the second batch of files (using -b "+ "and -r and -s).";}  }
class C{  public final void delete(){  m_Instances=new FastVector();}  }
class C{  protected Size2D arrangeNN(Graphics2D g2){  Rectangle2D contentSize=new Rectangle2D.Double();  if (this.line != null) {    contentSize.setRect(this.line.getBounds2D());  }  if (this.shape != null) {    contentSize=contentSize.createUnion(this.shape.getBounds2D());  }  return new Size2D(contentSize.getWidth(),contentSize.getHeight());}  }
class C{  @Override public void currentFreeBlocks(int freeBlockNum){  if (freeBlockNum < 0) {    throw new IllegalArgumentException("The number of free blocks could not less than zero.");  }  freeBlockNumQueue.add(freeBlockNum);}  }
class C{  public Matrix(double[][] A){  rows=A.length;  cols=A[0].length;  for (int i=0; i < rows; i++) {    if (A[i].length != cols) {      throw new IllegalArgumentException("All rows must have the same length.");    }  }  this.data=A;}  }
class C{  public static void sort(int[] keys,int[] values,int offset,int length){  hybridsort(keys,values,offset,offset + length - 1);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  WpsResult startWpsPbc(WpsInfo config){  WpsResult result=new WpsResult();  if (mWifiNative.startWpsPbc(config.BSSID)) {    markAllNetworksDisabled();    result.status=WpsResult.Status.SUCCESS;  } else {    loge("Failed to start WPS push button configuration");    result.status=WpsResult.Status.FAILURE;  }  return result;}  }
class C{  public boolean isRelayingAllowed(String remoteIP){  return false;}  }
class C{  public VPlexVirtualVolumeInfo expandVirtualVolume(String virtualVolumeName,int expansionStatusRetryCount,long expansionStatusSleepTime) throws VPlexApiException {  s_logger.info("Request for virtual volume expansion on VPlex at {}",_baseURI);  return _virtualVolumeMgr.expandVirtualVolume(virtualVolumeName,expansionStatusRetryCount,expansionStatusSleepTime);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void connect() throws IOException {  JMXServiceURL jmxUrl=new JMXServiceURL(String.format(fmtUrl,host,port));  Map<String,Object> env=new HashMap<String,Object>();  if (username != null) {    String[] creds={username,password};    env.put(JMXConnector.CREDENTIALS,creds);  }  env.put("com.sun.jndi.rmi.factory.socket",getRMIClientSocketFactory());  jmxc=JMXConnectorFactory.connect(jmxUrl,env);  mbeanServerConn=jmxc.getMBeanServerConnection();  try {    ObjectName name=new ObjectName(ssObjName);    ssProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageServiceMBean.class);    name=new ObjectName(MessagingService.MBEAN_NAME);    msProxy=JMX.newMBeanProxy(mbeanServerConn,name,MessagingServiceMBean.class);    name=new ObjectName(StreamManagerMBean.OBJECT_NAME);    streamProxy=JMX.newMBeanProxy(mbeanServerConn,name,StreamManagerMBean.class);    name=new ObjectName(CompactionManager.MBEAN_OBJECT_NAME);    compactionProxy=JMX.newMBeanProxy(mbeanServerConn,name,CompactionManagerMBean.class);    name=new ObjectName(FailureDetector.MBEAN_NAME);    fdProxy=JMX.newMBeanProxy(mbeanServerConn,name,FailureDetectorMBean.class);    name=new ObjectName(CacheService.MBEAN_NAME);    cacheService=JMX.newMBeanProxy(mbeanServerConn,name,CacheServiceMBean.class);    name=new ObjectName(StorageProxy.MBEAN_NAME);    spProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageProxyMBean.class);    name=new ObjectName(HintedHandOffManager.MBEAN_NAME);    hhProxy=JMX.newMBeanProxy(mbeanServerConn,name,HintedHandOffManagerMBean.class);    name=new ObjectName(GCInspector.MBEAN_NAME);    gcProxy=JMX.newMBeanProxy(mbeanServerConn,name,GCInspectorMXBean.class);    name=new ObjectName(Gossiper.MBEAN_NAME);    gossProxy=JMX.newMBeanProxy(mbeanServerConn,name,GossiperMBean.class);  } catch (  MalformedObjectNameException e) {    throw new RuntimeException("Invalid ObjectName? Please report this as a bug.",e);  }  memProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.MEMORY_MXBEAN_NAME,MemoryMXBean.class);  runtimeProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.RUNTIME_MXBEAN_NAME,RuntimeMXBean.class);}  }
class C{  private static void checkEquals(double actual,double expected,String label,double eps){  if (Math.abs(expected - actual) <= eps * Math.max(expected,actual)) {    System.out.println("PASS: " + label + ": Expected "+ expected+ " and you gave "+ actual);  } else {    System.out.println("FAIL: " + label + ": Expected "+ expected+ " and you gave "+ actual);  }}  }
class C{  public static Edge nondirectedEdge(Node nodeA,Node nodeB){  return new Edge(nodeA,nodeB,Endpoint.CIRCLE,Endpoint.CIRCLE);}  }
class C{  public static String join(String[] array,String separator){  int len=array.length;  if (len == 0)   return "";  StringBuilder out=new StringBuilder();  out.append(array[0]);  for (int i=1; i < len; i++) {    out.append(separator).append(array[i]);  }  return out.toString();}  }
class C{  private void handleFormat(Format format,Object arg,int begin,List<FieldContainer> fields){  if (fields == null) {    return;  }  AttributedCharacterIterator iterator=format.formatToCharacterIterator(arg);  while (iterator.getIndex() != iterator.getEndIndex()) {    int start=iterator.getRunStart();    int end=iterator.getRunLimit();    Iterator<?> it=iterator.getAttributes().keySet().iterator();    while (it.hasNext()) {      AttributedCharacterIterator.Attribute attribute=(AttributedCharacterIterator.Attribute)it.next();      Object value=iterator.getAttribute(attribute);      fields.add(new FieldContainer(begin + start,begin + end,attribute,value));    }    iterator.setIndex(end);  }}  }
class C{  public void handleSelection(int row){  int[] sel=TABLE.getSelectedRows();  if (sel.length == 0) {    handleNoSelection();    return;  }  File selectedFile=getFile(sel[0]);  LAUNCH_ACTION.setEnabled(true);  LAUNCH_OS_ACTION.setEnabled(true);  DELETE_ACTION.setEnabled(true);  if (selectedFile != null && !selectedFile.getName().endsWith(".torrent")) {    CREATE_TORRENT_ACTION.setEnabled(sel.length == 1);  }  if (selectedFile != null) {    SEND_TO_FRIEND_ACTION.setEnabled(sel.length == 1);    if (getMediaType().equals(MediaType.getAnyTypeMediaType())) {      boolean atLeastOneIsPlayable=false;      for (      int i : sel) {        File f=getFile(i);        if (MediaPlayer.isPlayableFile(f) || hasExtension(f.getAbsolutePath(),"mp4")) {          atLeastOneIsPlayable=true;          break;        }      }      SEND_TO_ITUNES_ACTION.setEnabled(atLeastOneIsPlayable);    } else {      SEND_TO_ITUNES_ACTION.setEnabled(getMediaType().equals(MediaType.getAudioMediaType()) || hasExtension(selectedFile.getAbsolutePath(),"mp4"));    }  }  if (sel.length == 1 && selectedFile.isFile() && selectedFile.getParentFile() != null) {    OPEN_IN_FOLDER_ACTION.setEnabled(true);  } else {    OPEN_IN_FOLDER_ACTION.setEnabled(false);  }  if (sel.length == 1) {    LibraryMediator.instance().getLibraryCoverArt().setFile(selectedFile);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:44.220 -0500",hash_original_method="EB5F19B4C0AA4D04AF76FF39EB0F0F4B",hash_generated_method="AFAE6958332FA6F822807680023D5132") public static void terminateCaches(){  nTerminateCaches();}  }
class C{  default <S>void updating(String aggregateId,S stateInstance,Consumer<ProxyingEventBus> busConsumer){  StateBuilder<S> stateBuilder=DispatchingStateBuilder.dispatchingTo(stateInstance);  notifying(null,Consumers.transform(busConsumer,null));}  }
class C{  private void gcspyGatherData(int event){  if (DEBUG) {    Log.writeln("SSGCspyCollector.gcspyGatherData, event=",event);    Log.writeln("SSGCspyCollector.gcspyGatherData, port=",GCspy.getGCspyPort());  }  if (GCspy.getGCspyPort() == 0)   return;  if (GCspy.server.isConnected(event)) {    if (DEBUG) {      if (SSGCspy.hi)       Log.write("\nCollector Examining Lowspace (event ",event); else       Log.write("\nCollector Examining Highspace (event ",event);      Log.write(")");      SSGCspy.reportSpaces();      Log.writeln();    }    if (event == SSGCspy.BEFORE_COLLECTION) {      if (DEBUG)       debugSpaces(SSGCspy.fromSpace());      if (DEBUG) {        Log.write("SSGCspyCollector.gcspyGatherData transmit driver, ");        Log.writeln(SSGCspy.fromSpace().getName());      }      fromSpaceDriver().transmit(event);    } else     if (event == SSGCspy.SEMISPACE_COPIED) {      if (DEBUG)       debugSpaces(SSGCspy.toSpace());      if (DEBUG) {        Log.write("SSGCspyCollector.gcspyGatherData reset, gather and transmit driver ");        Log.writeln(SSGCspy.toSpace().getName());      }      GCspy.server.startCompensationTimer();      toSpaceDriver().resetData();      ss.gcspyGatherData(toSpaceDriver(),SSGCspy.toSpace());      GCspy.server.stopCompensationTimer();      toSpaceDriver().transmit(event);    } else     if (event == SSGCspy.AFTER_COLLECTION) {      if (DEBUG) {        Log.write("SSGCspyCollector.gcspyGatherData transmit toSpaceDriver, ");        Log.writeln(SSGCspy.toSpace().getName());        Log.write("SSGCspyCollector.gcspyGatherData reset fromSpaceDriver, ");        Log.writeln(SSGCspy.fromSpace().getName());      }      toSpaceDriver().transmit(event);      fromSpaceDriver().resetData();      Address start=SSGCspy.fromSpace().getStart();      fromSpaceDriver().setRange(start,start);      fromSpaceDriver().transmit(event);    }  }}  }
class C{  protected void resetAttribute(){  super.resetAttribute();  missing=false;  malformed=false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public void clear(){  for (int i=0; i < this.word.length; i++) {    this.word[i]=0L;  }}  }
class C{  public final void ensureCapacity(int minCapacity){  if (minCapacity < 0) {    throw new IndexOutOfBoundsException();  }  Object[] data=this.data;  int minDataCapacity=minCapacity << 1;  int oldDataCapacity=data == null ? 0 : data.length;  if (minDataCapacity > oldDataCapacity) {    int newDataCapacity=oldDataCapacity / 2 * 3 + 1;    if (newDataCapacity % 2 != 0) {      newDataCapacity++;    }    if (newDataCapacity < minDataCapacity) {      newDataCapacity=minDataCapacity;    }    setDataCapacity(newDataCapacity);  }}  }
