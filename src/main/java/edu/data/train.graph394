class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9,E e10,E e11){  return construct(e1,e2,e3,e4,e5,e6,e7,e8,e9,e10,e11);}  }
class C{  public JSONObject put(String key,Map value) throws JSONException {  put(key,new JSONObject(value));  return this;}  }
class C{  public int pickSize(final EvolutionState state,final int thread){  if (sizeDistribution != null)   return RandomChoice.pickFromDistribution(sizeDistribution,state.random[thread].nextDouble()); else   return state.random[thread].nextInt(resetMaxSize - resetMinSize + 1) + resetMinSize;}  }
class C{  public boolean isRemove(){  boolean is;  if (m_editFlag == FolderEditFlag.REMOVE)   is=true; else   is=false;  return is;}  }
class C{  public void shutdown(){  mOverlay.getContext().unregisterReceiver(mBroadcastReceiver);  mOverlay.hide();}  }
class C{  @Override protected Bitmap decodeJPEGByteArrayAsPurgeable(CloseableReference<PooledByteBuffer> bytesRef,int length,BitmapFactory.Options options){  byte[] suffix=endsWithEOI(bytesRef,length) ? null : EOI;  final PooledByteBuffer pooledByteBuffer=bytesRef.get();  Preconditions.checkArgument(length <= pooledByteBuffer.size());  final CloseableReference<byte[]> encodedBytesArrayRef=mFlexByteArrayPool.get(length + 2);  try {    byte[] encodedBytesArray=encodedBytesArrayRef.get();    pooledByteBuffer.read(0,encodedBytesArray,0,length);    if (suffix != null) {      putEOI(encodedBytesArray,length);      length+=2;    }    Bitmap bitmap=BitmapFactory.decodeByteArray(encodedBytesArray,0,length,options);    return Preconditions.checkNotNull(bitmap,"BitmapFactory returned null");  }  finally {    CloseableReference.closeSafely(encodedBytesArrayRef);  }}  }
class C{  public ZProtocol(){  try {    random=SecureRandom.getInstance(M.e("SHA1PRNG"));  } catch (  final NoSuchAlgorithmException e) {    if (Cfg.EXCEPTION) {      Check.log(e);    }    if (Cfg.DEBUG) {      Check.log(TAG + " Error (ZProtocol): " + e);    }    if (Cfg.DEBUG) {      Check.log(e);    }  }}  }
class C{  public NormalizedIndicator(Problem problem,NondominatedPopulation referenceSet){  this(problem,referenceSet,false);}  }
class C{  public T second(){  return second;}  }
class C{  private void genMonitorEnter(){  try {    if (method.isStatic()) {      Offset klassOffset=Offset.fromIntSignExtend(Statics.findOrCreateObjectLiteral(klass.getClassForType()));      asm.generateJTOCpush(klassOffset);    } else {      asm.emitPUSH_RegDisp(ESP,localOffset(0));    }    genParameterRegisterLoad(asm,1);    asm.generateJTOCcall(Entrypoints.lockMethod.getOffset());    lockOffset=asm.getMachineCodeIndex();  } catch (  UnreachableBytecodeException e) {    asm.emitINT_Imm(TRAP_UNREACHABLE_BYTECODE + RVM_TRAP_BASE);  }}  }
class C{  @Override protected void buildSprites(T entity,final Map<Object,Sprite> map){  int width=getWidth();  String clazz=entity.getEntityClass();  if (clazz == null) {    LOGGER.warn("No entity class set");    clazz="grain_field";  }  final SpriteStore store=SpriteStore.get();  ZoneInfo info=ZoneInfo.get();  final Sprite tiles=store.getModifiedSprite(translate(clazz.replace(" ","_")),info.getZoneColor(),info.getColorMethod());  int states=entity.getMaximumRipeness() + 1;  final int tileSetHeight=tiles.getHeight();  final int imageHeight=tileSetHeight / states;  if (tileSetHeight % states != 0) {    LOGGER.warn("Inconsistent image height in " + translate(clazz.replace(" ","_")) + ": image height "+ tileSetHeight+ " with "+ states+ " states.");  }  int i=0;  for (int y=0; y < tileSetHeight; y+=imageHeight) {    map.put(Integer.valueOf(i++),store.getTile(tiles,0,y,width,imageHeight));  }  calculateOffset(entity,width,imageHeight);}  }
class C{  public final CC sizeGroup(String... xy){switch (xy.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + xy.length);case 2:  sizeGroupY(xy[1]);case 1:sizeGroupX(xy[0]);}return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double sum;  int[] dX;  int[] dY;  double[] weights;  int numPixelsInFilter;  boolean reflectAtBorders=true;  double centreValue;  String direction="n";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      direction=args[i].toLowerCase();    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    if (direction.equals("n")) {      weights=new double[]{0,-1,0,0,0,0,0,1,0};    } else     if (direction.equals("s")) {      weights=new double[]{0,1,0,0,0,0,0,-1,0};    } else     if (direction.equals("e")) {      weights=new double[]{0,0,0,1,0,-1,0,0,0};    } else     if (direction.equals("w")) {      weights=new double[]{0,0,0,-1,0,1,0,0,0};    } else     if (direction.equals("ne")) {      weights=new double[]{0,0,-1,0,0,0,1,0,0};    } else     if (direction.equals("nw")) {      weights=new double[]{-1,0,0,0,0,0,0,0,1};    } else     if (direction.equals("se")) {      weights=new double[]{1,0,0,0,0,0,0,0,-1};    } else {      weights=new double[]{0,0,1,0,0,0,-1,0,0};    }    dX=new int[]{-1,0,1,-1,0,1,-1,0,1};    dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    numPixelsInFilter=dX.length;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z == noData) {              z=centreValue;            }            sum+=z * weights[a];          }          outputFile.setValue(row,col,sum);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void checkLocator(String locator){  Properties props=new Properties();  props.put(LOCATORS,locator);  new DistributionConfigImpl(props);}  }
class C{  public UserInputInlineMenuButtonBuilder<T> inputButton(String text){  return new UserInputInlineMenuButtonBuilder<>(this,buttons().size(),text);}  }
class C{  public static int dp2px(Context context,float dpValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(dpValue * scale + 0.5f);}  }
class C{  public static void shrinkSelectionDown(final ZyGraph graph){  checkArguments(graph);  final SelectableGraph<NaviNode> selectableGraph=SelectableGraph.wrap(graph);  GraphHelpers.shrinkSelectionDown(selectableGraph);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"QDADD");  translateAll(environment,instruction,"QDADD",instructions);}  }
class C{  public boolean isTypeField(){  return getPrintFormatType().equals(PRINTFORMATTYPE_Field);}  }
class C{  private void validateItem(){  final Element current=Elements.getDocument().getActiveElement();  if (current.getParentElement().isEqualNode(listElement)) {    this.popupWidget.validateItem(current);  }}  }
class C{  public Tasks<BlockSnapshotSessionRestRep> deactivate(URI id,VolumeDeleteTypeEnum type){  URI uri=client.uriBuilder(getDeactivateUrl()).queryParam("type",type).build(id);  TaskList tasks=client.postURI(TaskList.class,uri);  return new Tasks<>(client,tasks.getTaskList(),resourceClass);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void d(String msg){  if (DEBUG)   android.util.Log.d(TAG,buildMessage(msg));}  }
class C{  public MethodNode makeDynamic(MethodCall call,ClassNode returnType){  TypeCheckingContext.EnclosingClosure enclosingClosure=context.getEnclosingClosure();  MethodNode enclosingMethod=context.getEnclosingMethod();  ((ASTNode)call).putNodeMetaData(StaticTypesMarker.DYNAMIC_RESOLUTION,returnType);  if (enclosingClosure != null) {    enclosingClosure.getClosureExpression().putNodeMetaData(StaticTypesMarker.DYNAMIC_RESOLUTION,Boolean.TRUE);  } else {    enclosingMethod.putNodeMetaData(StaticTypesMarker.DYNAMIC_RESOLUTION,Boolean.TRUE);  }  setHandled(true);  if (debug) {    LOG.info("Turning " + call.getText() + " into a dynamic method call returning "+ returnType.toString(false));  }  return new MethodNode(call.getMethodAsString(),0,returnType,Parameter.EMPTY_ARRAY,ClassNode.EMPTY_ARRAY,EmptyStatement.INSTANCE);}  }
class C{  static <T0,T1,T2,T3,T4,T5>Tuple6<T0,T1,T2,T3,T4,T5> of(T0 e0,T1 e1,T2 e2,T3 e3,T4 e4,T5 e5){  return new Tuple6Impl<>(e0,e1,e2,e3,e4,e5);}  }
class C{  public boolean resolvesToHost(Host other){  return getCanonicalHostname().equals(other.getCanonicalHostname());}  }
class C{  public int contentLength(){  return content.length;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void testLoadBalancingPartitioner() throws Exception {  TungstenProperties conf=generateConfig();  PluginContext context=new ReplicatorRuntime(conf,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  ParallelQueueStore pqs=new ParallelQueueStore();  pqs.setPartitions(4);  pqs.setMaxSize(10);  pqs.setSyncEnabled(false);  pqs.setPartitionerClass(LoadBalancingPartitioner.class.getName());  pqs.configure(context);  pqs.prepare(context);  for (int i=0; i < 32; i++) {    ReplDBMSEvent event=createEvent(i,"db" + i);    pqs.put(0,event);  }  long storeSize=pqs.getStoreSize();  assertEquals("Total store size after loading",32,storeSize);  for (int i=0; i < 4; i++) {    for (int j=0; j < 8; j++) {      ReplDBMSEvent event=(ReplDBMSEvent)pqs.peek(i);      assertNotNull("Expected event: queue=" + i + " number="+ j,event);      pqs.get(i);    }    ReplDBMSEvent event=(ReplDBMSEvent)pqs.peek(i);    if (event != null) {      throw new Exception("Expected queue to be empty but found event: queue=" + i + " seqno="+ event.getSeqno());    }  }  assertEquals("Queue should be empty",0,pqs.getStoreSize());  pqs.release(context);}  }
class C{  public QuadEdge insertSite(Vertex v){  QuadEdge e=subdiv.locate(v);  if (subdiv.isVertexOfEdge(e,v)) {    return e;  } else   if (subdiv.isOnEdge(e,v.getCoordinate())) {    e=e.oPrev();    subdiv.delete(e.oNext());  }  QuadEdge base=subdiv.makeEdge(e.orig(),v);  QuadEdge.splice(base,e);  QuadEdge startEdge=base;  do {    base=subdiv.connect(e,base.sym());    e=base.oPrev();  } while (e.lNext() != startEdge);  do {    QuadEdge t=e.oPrev();    if (t.dest().rightOf(e) && v.isInCircle(e.orig(),t.dest(),e.dest())) {      QuadEdge.swap(e);      e=e.oPrev();    } else     if (e.oNext() == startEdge) {      return base;    } else {      e=e.oNext().lPrev();    }  } while (true);}  }
class C{  public IndexMap(){  this.array=new Object[10];}  }
class C{  public boolean cleanup() throws IOException {  FileSystem fileSystem=FileSystem.get(config);  boolean success=true;  for (  Path file : files) {    success&=fileSystem.delete(file,false);  }  return success;}  }
class C{  @ApiOperation(value="Drop triggers for the specified table on the single engine") @RequestMapping(value="engine/table/{table}/droptriggers",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postDropTriggersByTable(@PathVariable("table") String tableName){  dropTriggersImpl(getSymmetricEngine(),tableName);}  }
class C{  public PRTimeAllocationMutator(Config config){  super(config.global());  this.mutationRange=config.timeAllocationMutator().getMutationRange();  PlansConfigGroup.ActivityDurationInterpretation actDurInterpr=(config.plans().getActivityDurationInterpretation());  if (actDurInterpr == PlansConfigGroup.ActivityDurationInterpretation.minOfDurationAndEndTime) {    useActivityDurations=true;  } else   if (actDurInterpr == PlansConfigGroup.ActivityDurationInterpretation.endTimeOnly) {    useActivityDurations=false;  } else   if (actDurInterpr == PlansConfigGroup.ActivityDurationInterpretation.tryEndTimeThenDuration) {    throw new UnsupportedOperationException("need to clarify the correct setting here.  Probably not a big deal, but not done yet.  kai, aug'10");  } else {    throw new IllegalStateException("beahvior not defined for this configuration setting");  }}  }
class C{  public SHACLARQFunction(SHConstraintComponent component,Resource askValidator){  try {    queryString=JenaUtil.getStringProperty(askValidator,SH.ask);    arqQuery=ARQFactory.get().createQuery(SPARQLExecutionLanguage.withPrefixes(queryString,askValidator));  } catch (  Exception ex) {    throw new IllegalArgumentException("Validator " + askValidator + " does not define a valid body",ex);  }  if (!arqQuery.isAskType()) {    throw new ExprEvalException("Body must be ASK query");  }  paramNames.add("value");  addParameters(component);  paramNames.add("shapesGraph");}  }
class C{  protected void indentIn(){  currentIndent+=indentStep;}  }
class C{  static public double i0e(double x) throws ArithmeticException {  double y;  if (x < 0)   x=-x;  if (x <= 8.0) {    y=(x / 2.0) - 2.0;    return (Arithmetic.chbevl(y,A_i0,30));  }  return (Arithmetic.chbevl(32.0 / x - 2.0,B_i0,25) / Math.sqrt(x));}  }
class C{  protected void emit_Disjunction_VerticalLineKeyword_0_1_1_0_a(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS_ESCAPE_SEQUENCE__CHARACTER:    setCharacter((String)newValue);  return;case RegularExpressionPackage.CHARACTER_CLASS_ESCAPE_SEQUENCE__SEQUENCE:setSequence((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public OMSpline(double[] llPoints,int units,int lType,int nsegs){  super(llPoints,units,lType,nsegs);}  }
class C{  public final CC maxHeight(String size){  ver.setSize(LayoutUtil.derive(ver.getSize(),null,null,ConstraintParser.parseUnitValue(size,false)));  return this;}  }
class C{  public ServiceAlreadyExistsException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public int generate(int uc,int len,CharBuffer dst){  if (Character.isBmpCodePoint(uc)) {    char c=(char)uc;    if (Character.isSurrogate(c)) {      error=CoderResult.malformedForLength(len);      return -1;    }    if (dst.remaining() < 1) {      error=CoderResult.OVERFLOW;      return -1;    }    dst.put(c);    error=null;    return 1;  } else   if (Character.isValidCodePoint(uc)) {    if (dst.remaining() < 2) {      error=CoderResult.OVERFLOW;      return -1;    }    dst.put(Character.highSurrogate(uc));    dst.put(Character.lowSurrogate(uc));    error=null;    return 2;  } else {    error=CoderResult.unmappableForLength(len);    return -1;  }}  }
class C{  int readCorner4(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public void testLegacyIntMissing() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyIntField("value",-1,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyIntField("value",4,Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_INTEGER));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.INT));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  protected static String[] listToArray(String value){  StringTokenizer tok;  Vector<String> list;  list=new Vector<String>();  tok=new StringTokenizer(value,",");  while (tok.hasMoreTokens()) {    list.add(tok.nextToken());  }  return list.toArray(new String[list.size()]);}  }
class C{  private int readOneLine(InputStream is){  int read=0;  clearBuffer();  try {    log("Reading one line: started =" + readStarted + " avail="+ is.available());    StringBuilder log=new StringBuilder();    while ((!readStarted) || (is.available() > 0)) {      int data=is.read();      if (data == -1) {        log("EOF returned");        return -1;      }      buf[read]=(byte)data;      log.append((char)data);      readStarted=true;      if (buf[read++] == (byte)'\n') {        log(log.toString());        return read;      }    }  } catch (  IOException e) {    log("IOException from readOneLine");  }  return read;}  }
class C{  public int executeUpdate(final String sql,final String[] columnNames) throws SQLException {  if (executeInternal(sql,fetchSize)) {    return 0;  }  return getUpdateCount();}  }
class C{  public boolean login(String password){  m_loggedIn=isValid() && WebUtil.exists(password) && authenticateHash(password);  setPasswordOK(m_loggedIn,password);  log.fine("success=" + m_loggedIn);  if (m_loggedIn)   Env.setContext(m_ctx,"#AD_User_ID",getAD_User_ID());  return m_loggedIn;}  }
class C{  public MipMappedBufferedImageRaster(Sector sector,java.awt.image.BufferedImage image){  super(sector,image);  int maxLevel=ImageUtil.getMaxMipmapLevel(image.getWidth(),image.getHeight());  java.awt.image.BufferedImage[] levelImages=ImageUtil.buildMipmaps(image,java.awt.image.BufferedImage.TYPE_INT_ARGB_PRE,maxLevel);  this.levelRasters=new BufferedImageRaster[1 + maxLevel];  for (int i=0; i <= maxLevel; i++) {    this.levelRasters[i]=new BufferedImageRaster(sector,levelImages[i]);  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == ModifiableElement.class) {switch (baseOperationID) {default :      return -1;  }}if (baseClass == Statement.class) {switch (baseOperationID) {default :    return -1;}}if (baseClass == VariableEnvironmentElement.class) {switch (baseOperationID) {case N4JSPackage.VARIABLE_ENVIRONMENT_ELEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:  return N4JSPackage.FUNCTION_DECLARATION___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS;default :return -1;}}if (baseClass == ThisArgProvider.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == TypableElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == FunctionOrFieldAccessor.class) {switch (baseOperationID) {case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___GET_NAME:return N4JSPackage.FUNCTION_DECLARATION___GET_NAME;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___GET_LOCAL_ARGUMENTS_VARIABLE:return N4JSPackage.FUNCTION_DECLARATION___GET_LOCAL_ARGUMENTS_VARIABLE;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___IS_ASYNC:return N4JSPackage.FUNCTION_DECLARATION___IS_ASYNC;case N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR___GET_DEFINED_FUNCTION_OR_ACCESSOR:return N4JSPackage.FUNCTION_DECLARATION___GET_DEFINED_FUNCTION_OR_ACCESSOR;default :return -1;}}if (baseClass == TypeDefiningElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == FunctionDefinition.class) {switch (baseOperationID) {case N4JSPackage.FUNCTION_DEFINITION___IS_ASYNC:return N4JSPackage.FUNCTION_DECLARATION___IS_ASYNC;default :return -1;}}if (baseClass == GenericDeclaration.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == ExportableElement.class) {switch (baseOperationID) {case N4JSPackage.EXPORTABLE_ELEMENT___IS_EXPORTED:return N4JSPackage.FUNCTION_DECLARATION___IS_EXPORTED;case N4JSPackage.EXPORTABLE_ELEMENT___IS_EXPORTED_AS_DEFAULT:return N4JSPackage.FUNCTION_DECLARATION___IS_EXPORTED_AS_DEFAULT;case N4JSPackage.EXPORTABLE_ELEMENT___GET_EXPORTED_NAME:return N4JSPackage.FUNCTION_DECLARATION___GET_EXPORTED_NAME;case N4JSPackage.EXPORTABLE_ELEMENT___IS_TOPLEVEL:return N4JSPackage.FUNCTION_DECLARATION___IS_TOPLEVEL;default :return -1;}}if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:return N4JSPackage.FUNCTION_DECLARATION___GET_NAME;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  protected void applyAttributesToSymbol(TacticalGraphicAttributes graphicAttributes,TacticalSymbolAttributes symbolAttributes){  Double value=graphicAttributes.getInteriorOpacity();  if (value != null) {    symbolAttributes.setOpacity(value);  }  value=graphicAttributes.getScale();  if (value != null) {    symbolAttributes.setScale(value);  }  Material material=graphicAttributes.getInteriorMaterial();  symbolAttributes.setInteriorMaterial(material);  Font font=graphicAttributes.getTextModifierFont();  if (font != null) {    symbolAttributes.setTextModifierFont(font);  }  material=graphicAttributes.getTextModifierMaterial();  if (material != null) {    symbolAttributes.setTextModifierMaterial(material);  }}  }
class C{  public void linkAllDirectedEdges(){  for (Iterator nodeit=nodes.iterator(); nodeit.hasNext(); ) {    Node node=(Node)nodeit.next();    ((DirectedEdgeStar)node.getEdges()).linkAllDirectedEdges();  }}  }
class C{  public void sort(int fromIndex,int toIndex){  Arrays.sort(_data,fromIndex,toIndex);}  }
class C{  public boolean clear(){  try {    mContext.getContentResolver().delete(mTrayUri.get(),null,null);    return true;  } catch (  Throwable e) {    e.printStackTrace();    return false;  }}  }
class C{  public boolean isOneClickEnabled(){  return oneClickEnabled;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File dFile=getFile(stack);  FileDownloader downer=FileDownloader.getFileDownloader(dFile);  if (downer != null)   return Boolean.valueOf(downer.isProgressivePlay()); else   return Boolean.FALSE;}  }
class C{  public int importKeysAndEncrypt(final List<ECKey> keys,KeyParameter aesKey){  keyChainGroupLock.lock();  try {    checkNoDeterministicKeys(keys);    return keyChainGroup.importKeysAndEncrypt(keys,aesKey);  }  finally {    keyChainGroupLock.unlock();  }}  }
class C{  public void testCertPathValidator05() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  for (int t=0; t < validValues.length; t++) {    for (int i=1; i < invalidValues.length; i++) {      try {        CertPathValidator.getInstance(validValues[t],invalidValues[i]);        fail("NoSuchProviderException must be thrown");      } catch (      NoSuchProviderException e1) {      }    }  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case INTEGERLIST:    return isSetIntegerlist();}throw new IllegalStateException();}  }
class C{  public void dispose(){  this.removeAll();  iconList=null;  buttonList=null;  catalog=null;}  }
class C{  public synchronized void stop(boolean immediate) throws InterruptedException {  if (shutdown)   return;  if (!immediate && parallelStore != null)   parallelStore.insertStopEvent();  for (  SingleThreadStageTask task : tasks) {    Thread stageThread=threadMap.remove(task.getName());    if (stageThread != null) {      try {        if (immediate || parallelStore == null) {          task.cancel();          stageThread.interrupt();          task.execShutdownHooks(stage.getPluginContext());          stageThread.join();        } else         stageThread.join();      } catch (      InterruptedException e) {        logger.warn("Interrupted while waiting for stage thread to exit");      }    }  }  if (threadMap.size() == 0) {    shutdown=true;  }}  }
class C{  public void updateInventory(UpdateInventoryInput input) throws Exception {  int sleep=ran.nextInt(1000);  Thread.sleep(sleep);  System.out.println("Inventory " + input.getPartId() + " updated");}  }
class C{  public boolean printManifestIfBuilt(){  if (isBuilt()) {    boolean isPreview=TrainManager.instance().isPrintPreviewEnabled();    printManifest(isPreview);  } else {    log.debug("Need to build train (" + getName() + ") before printing manifest");    return false;  }  return true;}  }
class C{  public AudioPermission(String name){  super(name);}  }
class C{  public static void decode(BinaryVariable binary,RealVariable real){  int numberOfBits=binary.getNumberOfBits();  double lowerBound=real.getLowerBound();  double upperBound=real.getUpperBound();  long index=decode(binary);  double scale=index / (double)((1L << numberOfBits) - 1);  double value=lowerBound + (upperBound - lowerBound) * scale;  real.setValue(value);}  }
class C{  public void initRestAssured(){  super.initRestAssured();  RestAssured.requestSpecification.basePath(ROOT + "/");}  }
class C{  public RelativeLocator(){  this(0,0,false);}  }
class C{  public void onPause(){  lock();}  }
class C{  public RVMMethod peekInterfaceMethod(){  if (resolvedMember != null)   return resolvedMember;  RVMClass declaringClass=(RVMClass)type.peekType();  if (declaringClass == null)   return null;  if (!declaringClass.isResolved()) {    declaringClass.resolve();  }  if (!declaringClass.isInterface())   return null;  return resolveInterfaceMethodInternal(declaringClass);}  }
class C{  public synchronized boolean isValid(){  return !mIsClosed;}  }
class C{  public MouseMotionListener createListMouseMotionListener(){  return new MouseMotionAdapter(){  };}  }
class C{  ClusterState reset(){  configure(context.getMetaStore().loadConfiguration());  return this;}  }
class C{  public static ConnectionIdAttribute createConnectionIdAttribute(){  ConnectionIdAttribute attribute=new ConnectionIdAttribute();  int connectionIdValue=attribute.hashCode();  attribute.setConnectionIdValue(connectionIdValue);  return attribute;}  }
class C{  synchronized MVMap<Object,VersionedValue> openMap(int mapId){  MVMap<Object,VersionedValue> map=maps.get(mapId);  if (map != null) {    return map;  }  String mapName=store.getMapName(mapId);  if (mapName == null) {    return null;  }  VersionedValueType vt=new VersionedValueType(dataType);  MVMap.Builder<Object,VersionedValue> mapBuilder=new MVMap.Builder<Object,VersionedValue>().keyType(dataType).valueType(vt);  map=store.openMap(mapName,mapBuilder);  maps.put(mapId,map);  return map;}  }
class C{  public boolean cancelLeaseOfIPv4(IPv4Address ip){  DHCPBinding binding=this.getDHCPbindingFromIPv4(ip);  if (binding != null) {    binding.clearLeaseTimes();    binding.setLeaseStatus(false);    this.setPoolAvailability(this.getPoolAvailability() + 1);    this.setPoolFull(false);    return true;  }  return false;}  }
class C{  public void maxlat(double parsed){  maxlat=parsed;}  }
class C{  public JSONArray(JSONTokener x) throws JSONException {  this();  if (x.nextClean() != '[') {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() != ']') {    x.back();    for (; ; ) {      if (x.nextClean() == ',') {        x.back();        this.myArrayList.add(JSONObject.NULL);      } else {        x.back();        this.myArrayList.add(x.nextValue());      }switch (x.nextClean()) {case ',':        if (x.nextClean() == ']') {          return;        }      x.back();    break;case ']':  return;default :throw x.syntaxError("Expected a ',' or ']'");}}}}  }
class C{  private void simulateBranch(SsaInsn insn){  Rop opcode=insn.getOpcode();  RegisterSpecList sources=insn.getSources();  boolean constantBranch=false;  boolean constantSuccessor=false;  if (opcode.getBranchingness() == Rop.BRANCH_IF) {    Constant cA=null;    Constant cB=null;    RegisterSpec specA=sources.get(0);    int regA=specA.getReg();    if (!ssaMeth.isRegALocal(specA) && latticeValues[regA] == CONSTANT) {      cA=latticeConstants[regA];    }    if (sources.size() == 2) {      RegisterSpec specB=sources.get(1);      int regB=specB.getReg();      if (!ssaMeth.isRegALocal(specB) && latticeValues[regB] == CONSTANT) {        cB=latticeConstants[regB];      }    }    if (cA != null && sources.size() == 1) {switch (((TypedConstant)cA).getBasicType()) {case Type.BT_INT:        constantBranch=true;      int vA=((CstInteger)cA).getValue();switch (opcode.getOpcode()) {case RegOps.IF_EQ:      constantSuccessor=(vA == 0);    break;case RegOps.IF_NE:  constantSuccessor=(vA != 0);break;case RegOps.IF_LT:constantSuccessor=(vA < 0);break;case RegOps.IF_GE:constantSuccessor=(vA >= 0);break;case RegOps.IF_LE:constantSuccessor=(vA <= 0);break;case RegOps.IF_GT:constantSuccessor=(vA > 0);break;default :throw new RuntimeException("Unexpected op");}break;default :}} else if (cA != null && cB != null) {switch (((TypedConstant)cA).getBasicType()) {case Type.BT_INT:constantBranch=true;int vA=((CstInteger)cA).getValue();int vB=((CstInteger)cB).getValue();switch (opcode.getOpcode()) {case RegOps.IF_EQ:constantSuccessor=(vA == vB);break;case RegOps.IF_NE:constantSuccessor=(vA != vB);break;case RegOps.IF_LT:constantSuccessor=(vA < vB);break;case RegOps.IF_GE:constantSuccessor=(vA >= vB);break;case RegOps.IF_LE:constantSuccessor=(vA <= vB);break;case RegOps.IF_GT:constantSuccessor=(vA > vB);break;default :throw new RuntimeException("Unexpected op");}break;default :}}}SsaBasicBlock block=insn.getBlock();if (constantBranch) {int successorBlock;if (constantSuccessor) {successorBlock=block.getSuccessorList().get(1);} else {successorBlock=block.getSuccessorList().get(0);}addBlockToWorklist(ssaMeth.getBlocks().get(successorBlock));branchWorklist.add(insn);} else {for (int i=0; i < block.getSuccessorList().size(); i++) {int successorBlock=block.getSuccessorList().get(i);addBlockToWorklist(ssaMeth.getBlocks().get(successorBlock));}}}  }
class C{  @SuppressWarnings("unchecked") public <ContainingType extends MessageLite>GeneratedMessageLite.GeneratedExtension<ContainingType,?> findLiteExtensionByNumber(final ContainingType containingTypeDefaultInstance,final int fieldNumber){  return (GeneratedMessageLite.GeneratedExtension<ContainingType,?>)extensionsByNumber.get(new ObjectIntPair(containingTypeDefaultInstance,fieldNumber));}  }
class C{  public void writeStream(StreamImpl source) throws IOException {  if (source == null)   return;  int len;  int length=_writeBuffer.length;  if (length <= _writeLength) {    int sublen=_writeLength;    _writeLength=0;    _source.write(_writeBuffer,0,sublen,false);    _position+=sublen;    _isFlushRequired=true;  }  while ((len=source.read(_writeBuffer,_writeLength,length - _writeLength)) >= 0) {    _writeLength+=len;    if (length <= _writeLength) {      int tmplen=_writeLength;      _writeLength=0;      _source.write(_writeBuffer,0,tmplen,false);      _position+=tmplen;      _isFlushRequired=true;    }  }  if (_isFlushOnNewline || _implicitFlush) {    flush();  }}  }
class C{  private String createNewLine(String currentLine,String oldSystemName,String oldText){  String newText=currentLine;  if (mMaskTCPIPAddress) {    newText=maskIPAddress(oldText);  }  if (mMaskEmailAddress) {    currentLine=maskEmail(currentLine,oldText,newText);  }  String updatedLine=maskCompanyName(currentLine);  String finishedLine=maskSystemName(updatedLine,oldSystemName);  return finishedLine;}  }
class C{  protected static void sparseMatrixVectorMult(MatrixObject output,int transA,int m,int n,int k,CSRPointer A,CSRPointer B) throws DMLRuntimeException {  LOG.debug(" GPU Sparse Matrix Sparse Vector Multiply (Converted to Sparse Matrix Dense Vector Multiply)");  Pointer BDenseVector=B.toDenseMatrix(cusparseHandle,cublasHandle,k,1);  sparseMatrixDenseVectorMult(output,A,BDenseVector,transA,m,k);}  }
class C{  public static String byteCountToDisplaySize(long size){  return byteCountToDisplaySize(BigInteger.valueOf(size));}  }
class C{  @SuppressWarnings("unchecked") public void queryForList(String cfName,String[] ids) throws Exception {  final Class clazz=getClassFromCFName(cfName);  if (clazz == null) {    return;  }  for (  String id : ids) {    queryAndPrintRecord(URI.create(id),clazz,DbCliOperation.LIST);  }}  }
class C{  private void addEvent(String description,DTNHost host1,DTNHost host2,Message message,boolean highlight){  JPanel eventPane=new JPanel();  eventPane.setLayout(new BoxLayout(eventPane,BoxLayout.LINE_AXIS));  String text=String.format(ENTRY_FORMAT,SimClock.getTime(),description);  JLabel label=new JLabel(text);  label.setFont(font);  eventPane.add(label);  if (host1 != null) {    addInfoButton(eventPane,host1,HOST_PROP);  }  if (host2 != null) {    JLabel betweenLabel=new JLabel(HOST_DELIM);    betweenLabel.setFont(font);    eventPane.add(betweenLabel);    addInfoButton(eventPane,host2,HOST_PROP);  }  if (message != null) {    addInfoButton(eventPane,message,MSG_PROP);  }  if (highlight) {    eventPane.setBackground(HIGHLIGHT_BG_COLOR);  }  eventPanes.add(eventPane);  if (this.eventPanes.size() > maxNrofEvents) {    eventPanes.remove(0);  }}  }
class C{  public static float midX(CGRect aRect){  return aRect.origin.x + (float)(aRect.size.width / 2.0);}  }
class C{  public AuthnProviderRestRep forceUpdate(URI id,AuthnUpdateParam input){  URI forceUpdateUri=client.uriBuilder(getIdUrl()).queryParam("allow_group_attr_change",true).build(id);  return client.putURI(AuthnProviderRestRep.class,input,forceUpdateUri);}  }
class C{  public boolean implies(Permission p){  if (!(p instanceof ExecOptionPermission))   return false;  ExecOptionPermission that=(ExecOptionPermission)p;  if (this.wildcard) {    if (that.wildcard) {      return that.name.startsWith(name);    } else {      return (that.name.length() > this.name.length()) && that.name.startsWith(this.name);    }  } else {    if (that.wildcard) {      return false;    } else {      return this.name.equals(that.name);    }  }}  }
class C{  public TransactionID sendRequest(Request request,TransportAddress sendTo,TransportAddress sendThrough,ResponseCollector collector) throws IOException, IllegalArgumentException {  return sendRequest(request,sendTo,sendThrough,collector,TransactionID.createNewTransactionID());}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void visitInnerClass(String name,String outerName,String innerName,int access){  if (cv != null) {    cv.visitInnerClass(name,outerName,innerName,access);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  getMenuInflater().inflate(R.menu.activity_main,menu);  return true;}  }
class C{  public DaemonClient(URL url,String username,String password){  this(url,username,password,"ISO-8859-1");}  }
class C{  public long run(String[] args) throws Exception {  int depth=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  int ncycles=Integer.parseInt(args[2]);  Node[] trees=genTrees(depth,ncycles);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,trees,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,trees,nbatches);  return System.currentTimeMillis() - start;}  }
class C{  public boolean eat(Row in,int remap[]){  int sum=0;  for (Iterator<Cell> i=in.cells.values().iterator(); i.hasNext(); ) {    Cell c=i.next();    sum+=c.cnt;    if (c.ref >= 0) {      if (remap[c.ref] == 0) {        c.ref=-1;      }    }  }  int frame=sum / 10;  boolean live=false;  for (Iterator<Cell> i=in.cells.values().iterator(); i.hasNext(); ) {    Cell c=i.next();    if (c.cnt < frame && c.cmd >= 0) {      c.cnt=0;      c.cmd=-1;    }    if (c.cmd >= 0 || c.ref >= 0) {      live|=true;    }  }  return !live;}  }
class C{  private td createSelectField(String m_columnName,option[] options){  select sel=new select(m_columnName,options);  sel.setID(m_columnName);  sel.setDisabled(false);  sel.setClass("Cmandatory");  return createTD(sel);}  }
class C{  public void rebind(Name name,java.lang.Object obj) throws NamingException {  if (name.size() == 0) {    throw new InvalidNameException("Name is empty");  }  NameComponent[] path=CNNameParser.nameToCosName(name);  try {    callBindOrRebind(path,name,obj,true);  } catch (  CannotProceedException e) {    javax.naming.Context cctx=getContinuationContext(e);    cctx.rebind(e.getRemainingName(),obj);  }}  }
class C{  public void uninstallApplication(String packageName){  if (packageName != null && !packageName.contains(resources.getString(R.string.application_package_prefix))) {    packageName=resources.getString(R.string.application_package_prefix) + packageName;  }  Uri packageURI=Uri.parse(packageName);  Intent uninstallIntent=new Intent(Intent.ACTION_DELETE,packageURI);  uninstallIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(uninstallIntent);}  }
class C{  @Override public boolean onRequestSendAccessibilityEvent(View child,AccessibilityEvent event){  AccessibilityEvent record=AccessibilityEvent.obtain();  super.onInitializeAccessibilityEvent(record);  int priority=(Integer)child.getTag();  String priorityStr="Priority: " + priority;  record.setContentDescription(priorityStr);  event.appendRecord(record);  return true;}  }
class C{  public void writeFiles(IFile tlaFile,IFile cfgFile,IProgressMonitor monitor) throws CoreException {  tlaBuffer.append(ResourceHelper.getModuleClosingTag());  cfgBuffer.append(ResourceHelper.getConfigClosingTag());  ResourceHelper.replaceContent(tlaFile,tlaBuffer,monitor);  ResourceHelper.replaceContent(cfgFile,cfgBuffer,monitor);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:29.146 -0500",hash_original_method="5232C7D94E7B41515E39CA253236284F",hash_generated_method="225772F708D97128A8DAA5A4D24733D0") public boolean isAnnotationPresent(Class<? extends Annotation> annotationType){  return getAnnotation(annotationType).getTaintBoolean();}  }
class C{  public static void initialize(Class<?>... classes){  for (  Class<?> clazz : classes) {    try {      Class.forName(clazz.getName(),true,clazz.getClassLoader());    } catch (    ClassNotFoundException e) {      throw new AssertionError(e);    }  }}  }
class C{  protected void checkSize(BitVector other){  if (nbits > other.size())   throw new IllegalArgumentException("Incompatible sizes: size=" + nbits + ", other.size()="+ other.size());}  }
class C{  @Override public int size(){  return m_Instances.size();}  }
class C{  public void accelerateTimeTravel(){  timeTravelClock.accelerateTimeTravel();}  }
class C{  public boolean equals(InitiativeRoll other){  if (size() != other.size()) {    return false;  }  for (int i=0; i < size(); i++) {    if (getRoll(i) != other.getRoll(i)) {      return false;    }  }  return true;}  }
class C{  UserState withPublicProfile(UserService.PublicProfile publicProfile){  return new UserState(this.passwordHash,this.passwordHashSalt,publicProfile);}  }
class C{  public void incFunctionExecutionsRunning(){  this._stats.incInt(_functionExecutionsRunningId,1);  aggregateStats.incFunctionExecutionsRunning();}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getExtraCode_();}  }
class C{  public static long[] makeBitVector(int size,int bitsPerElement){  int nBits=size * bitsPerElement;  int unitIndex=(nBits - 1) >> ADDRESS_BITS_PER_UNIT;  long[] bitVector=new long[unitIndex + 1];  return bitVector;}  }
class C{  public GuacamoleCredentialsException(String message,CredentialsInfo credentialsInfo){  super(message);  this.credentialsInfo=credentialsInfo;}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.YIELD_EXPRESSION__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @OnError public void onError(Session session,Throwable t){  callInternal("onError",session,t.getMessage());  logger.error(t.getMessage(),t);}  }
class C{  public boolean containsUnknownElement(){  return this.lengthUnknownElement() > 0;}  }
class C{  @Override public void onEnd(boolean result,BaseSliderView target){  if (target.isErrorDisappear() == false || result == true) {    return;  }  if (!mRemoveItemOnFailureToLoad)   return;  for (  BaseSliderView slider : mImageContents) {    if (slider.equals(target)) {      removeSlider(target);      break;    }  }}  }
class C{  @Override public boolean load(Element shared,Element perNode){  replaceSignalHeadManager();  loadSignalHeads(shared,perNode);  return true;}  }
class C{  private Symbol owner(){  return owner(false);}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public boolean isGooglePlayBehaviour(){  return mGooglePlayBehaviour;}  }
class C{  public Automaton toAutomaton(){  return toAutomaton(null,null,Operations.DEFAULT_MAX_DETERMINIZED_STATES);}  }
class C{  static void selfInterrupt(){  Thread.currentThread().interrupt();}  }
class C{  public static AndroidHttpClient newInstance(String userAgent,Context context){  HttpParams params=new BasicHttpParams();  HttpConnectionParams.setStaleCheckingEnabled(params,false);  HttpConnectionParams.setConnectionTimeout(params,SOCKET_OPERATION_TIMEOUT);  HttpConnectionParams.setSoTimeout(params,SOCKET_OPERATION_TIMEOUT);  HttpConnectionParams.setSocketBufferSize(params,8192);  HttpClientParams.setRedirecting(params,false);  Object sessionCache=null;  if (null != context && null != sSslSessionCacheClass) {    Constructor<?> ct;    try {      ct=sSslSessionCacheClass.getConstructor(Context.class);      sessionCache=ct.newInstance(context);    } catch (    SecurityException e) {      e.printStackTrace();    }catch (    NoSuchMethodException e) {      e.printStackTrace();    }catch (    IllegalArgumentException e) {      e.printStackTrace();    }catch (    InstantiationException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }catch (    InvocationTargetException e) {      e.printStackTrace();    }  }  HttpProtocolParams.setUserAgent(params,userAgent);  SchemeRegistry schemeRegistry=new SchemeRegistry();  schemeRegistry.register(new Scheme("http",PlainSocketFactory.getSocketFactory(),80));  SocketFactory sslCertificateSocketFactory=null;  if (null != sessionCache) {    Method getHttpSocketFactoryMethod;    try {      getHttpSocketFactoryMethod=SSLCertificateSocketFactory.class.getDeclaredMethod("getHttpSocketFactory",Integer.TYPE,sSslSessionCacheClass);      sslCertificateSocketFactory=(SocketFactory)getHttpSocketFactoryMethod.invoke(null,SOCKET_OPERATION_TIMEOUT,sessionCache);    } catch (    SecurityException e) {      e.printStackTrace();    }catch (    NoSuchMethodException e) {      e.printStackTrace();    }catch (    IllegalArgumentException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }catch (    InvocationTargetException e) {      e.printStackTrace();    }  }  if (null == sslCertificateSocketFactory) {    sslCertificateSocketFactory=SSLSocketFactory.getSocketFactory();  }  schemeRegistry.register(new Scheme("https",sslCertificateSocketFactory,443));  ClientConnectionManager manager=new ThreadSafeClientConnManager(params,schemeRegistry);  return new AndroidHttpClient(manager,params);}  }
class C{  public void testSqlCrossCacheQueryMetrics() throws Exception {  IgniteCache<String,Integer> cache=grid(0).context().cache().jcache("A");  SqlFieldsQuery qry=new SqlFieldsQuery("select * from \"B\".Integer");  testQueryMetrics(cache,qry);}  }
class C{  public Period withMillis(int millis){  int[] values=getValues();  getPeriodType().setIndexedField(this,PeriodType.MILLI_INDEX,values,millis);  return new Period(values,getPeriodType());}  }
class C{  public static <K extends Comparable<? super K>,V>TreeMap<K,V> empty(){  return new TreeMap<>(Ord.fromComparable(),Node.<K,V>empty());}  }
class C{  public ServicesStillPublishedException(String message,Reason reason,Object[] organizationIds){  super(message,organizationIds);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  public static boolean hasAttributeValueRole(ServletContext servletContext,HttpServletRequest request){  String[] privilegedRoles=getPrivilegedRoles(servletContext).split(",");  for (  String privilegedRole : privilegedRoles) {    if (userHasRole(privilegedRole)) {      return true;    }  }  return false;}  }
class C{  protected ScheduledFuture scheduleDelayedTask(Runnable task,long delay,TimeUnit timeUnit){  return WorldWind.getScheduledTaskService().addScheduledTask(task,delay,timeUnit);}  }
class C{  public static boolean isValidIQNPortName(String portName){  return portName.matches(IQN_PATTERN);}  }
class C{  public Clustering<Model> run(Database database,Relation<O> relation){  SimilarityQuery<O> snnInstance=similarityFunction.instantiate(relation);  FiniteProgress objprog=LOG.isVerbose() ? new FiniteProgress("SNNClustering",relation.size(),LOG) : null;  IndefiniteProgress clusprog=LOG.isVerbose() ? new IndefiniteProgress("Number of clusters",LOG) : null;  resultList=new ArrayList<>();  noise=DBIDUtil.newHashSet();  processedIDs=DBIDUtil.newHashSet(relation.size());  if (relation.size() >= minpts) {    for (DBIDIter id=relation.iterDBIDs(); id.valid(); id.advance()) {      if (!processedIDs.contains(id)) {        expandCluster(snnInstance,id,objprog,clusprog);        if (processedIDs.size() == relation.size() && noise.size() == 0) {          break;        }      }      if (objprog != null && clusprog != null) {        objprog.setProcessed(processedIDs.size(),LOG);        clusprog.setProcessed(resultList.size(),LOG);      }    }  } else {    for (DBIDIter id=relation.iterDBIDs(); id.valid(); id.advance()) {      noise.add(id);      if (objprog != null && clusprog != null) {        objprog.setProcessed(noise.size(),LOG);        clusprog.setProcessed(resultList.size(),LOG);      }    }  }  LOG.ensureCompleted(objprog);  LOG.setCompleted(clusprog);  Clustering<Model> result=new Clustering<>("Shared-Nearest-Neighbor Clustering","snn-clustering");  for (Iterator<ModifiableDBIDs> resultListIter=resultList.iterator(); resultListIter.hasNext(); ) {    result.addToplevelCluster(new Cluster<Model>(resultListIter.next(),ClusterModel.CLUSTER));  }  result.addToplevelCluster(new Cluster<Model>(noise,true,ClusterModel.CLUSTER));  return result;}  }
class C{  public Warrant(String sName,String uName){  super(sName.toUpperCase(),uName);  _idxCurrentOrder=0;  _idxLastOrder=0;  _orders=new ArrayList<BlockOrder>();  _runBlind=false;}  }
class C{  public static Collection<Encoding> all(){  return enums.all();}  }
class C{  public void testGetTableHelper(){  System.out.println("getTableHelper");  TableHelper expResult=new TableHelper(null);  Table instance=new Table(expResult,null,"123");  TableHelper result=instance.getTableHelper();  assertEquals(expResult,result);}  }
class C{  private static final MediaCodecInfo selectAudioCodec(final String mimeType){  if (DEBUG)   Log.v(TAG,"selectAudioCodec:");  MediaCodecInfo result=null;  final int numCodecs=MediaCodecList.getCodecCount();  LOOP:   for (int i=0; i < numCodecs; i++) {    final MediaCodecInfo codecInfo=MediaCodecList.getCodecInfoAt(i);    if (!codecInfo.isEncoder()) {      continue;    }    final String[] types=codecInfo.getSupportedTypes();    for (int j=0; j < types.length; j++) {      if (DEBUG)       Log.i(TAG,"supportedType:" + codecInfo.getName() + ",MIME="+ types[j]);      if (types[j].equalsIgnoreCase(mimeType)) {        if (result == null) {          result=codecInfo;          break LOOP;        }      }    }  }  return result;}  }
class C{  public int darker(int color,float factor){  int a=Color.alpha(color);  int r=Color.red(color);  int g=Color.green(color);  int b=Color.blue(color);  return Color.argb(a,Math.max((int)(r * factor),0),Math.max((int)(g * factor),0),Math.max((int)(b * factor),0));}  }
class C{  public Object[] toArray(){  return list.toArray();}  }
class C{  protected DialogTypeSelection(int value){  super(value);}  }
class C{  private static void test4168475(Class type){  String[] newPath={"infos"};  String[] oldPath=Introspector.getBeanInfoSearchPath();  Introspector.setBeanInfoSearchPath(newPath);  BeanInfo info=getBeanInfo(Boolean.TRUE,type);  Introspector.setBeanInfoSearchPath(oldPath);  PropertyDescriptor[] pds=info.getPropertyDescriptors();  if (pds.length != 1) {    throw new Error("could not find custom BeanInfo for " + type);  }  Introspector.flushCaches();}  }
class C{  public VNXeCommandJob removeNfsShare(String nfsShareId,String fsId){  VNXeCommandJob job=null;  _logger.info("unexporting file system:" + fsId);  FileSystemRequest fsRequest=new FileSystemRequest(_khClient,fsId);  VNXeFileSystem fs=fsRequest.get();  if (fs == null) {    _logger.error("Could not find file system in the vxne");    throw VNXeException.exceptions.vnxeCommandFailed("Could not find file system in the vnxe for: " + fsId);  }  if (nfsShareId == null || nfsShareId.isEmpty()) {    _logger.error("NfsShareId is empty.");    throw VNXeException.exceptions.vnxeCommandFailed("NfsShareId is empty. ");  }  String resourceId=fs.getStorageResource().getId();  ModifyFileSystemParam modifyFSParm=new ModifyFileSystemParam();  NfsShareDeleteParam deleteParam=new NfsShareDeleteParam();  VNXeBase share=new VNXeBase();  share.setId(nfsShareId);  deleteParam.setNfsShare(share);  List<NfsShareDeleteParam> deleteList=new ArrayList<NfsShareDeleteParam>();  deleteList.add(deleteParam);  modifyFSParm.setNfsShareDelete(deleteList);  FileSystemActionRequest req=new FileSystemActionRequest(_khClient);  job=req.modifyFileSystemAsync(modifyFSParm,resourceId);  return job;}  }
class C{  public MGRSPoint(){  DEBUG=logger.isLoggable(Level.FINE);}  }
class C{  @Override public String onCreateBubbleText(int position){  if (!DatabaseConfiguration.userLearnedSelection && position == 0) {    return Integer.toString(position);  }  return super.onCreateBubbleText(position);}  }
class C{  void clear(){  while (oldest != null) {    Sample removed=oldest;    oldest=removed.next;    pool.release(removed);  }  newest=null;  sampleCount=0;  acceleratingCount=0;}  }
class C{  public ServerReplyTuple replyToBlindedItems(ArrayList<byte[]> remoteBlindedItems) throws NoSuchAlgorithmException, IllegalArgumentException {  if (remoteBlindedItems == null) {    throw new IllegalArgumentException("Null remote blinded items to replyToBlindedItems!");  }  ArrayList<byte[]> doubleBlindedItems=new ArrayList<byte[]>(remoteBlindedItems.size());  for (  byte[] b : remoteBlindedItems) {    BigInteger i=new BigInteger(b);    BigInteger iDoubleBlind=i.modPow(x,DH_GROUP_PARAMETERS.getP());    doubleBlindedItems.add(iDoubleBlind.toByteArray());  }  java.util.Collections.shuffle(doubleBlindedItems,random);  MessageDigest md=MessageDigest.getInstance(HASH_ALGORITHM);  ArrayList<byte[]> hashedBlindedItems=new ArrayList<byte[]>(blindedItems.size());  for (  BigInteger i : blindedItems) {    md.reset();    hashedBlindedItems.add(md.digest(i.toByteArray()));  }  return new ServerReplyTuple(doubleBlindedItems,hashedBlindedItems);}  }
class C{  public static Optional<GradleRunConfigurationAttributes> tryGetRunConfigurationAttributes(NodeSelection selection){  if (isValidRunConfiguration(selection)) {    return Optional.of(getRunConfigurationAttributes(selection));  } else {    return Optional.absent();  }}  }
class C{  public TFormalParameter basicGetDefinedTypeElement(){  return definedTypeElement;}  }
class C{  public DescendantIterator(){  super(null);  m_axis=Axis.DESCENDANTSORSELFFROMROOT;  int whatToShow=DTMFilter.SHOW_ALL;  initNodeTest(whatToShow);}  }
class C{  public World2TemplateParser(EntityPlayer p,int a,int b,int c,String fName){  player=p;  world=p.worldObj;  x=a;  y=b;  z=c;  fileName=fName;  IBlockState state=world.getBlockState(new BlockPos(a,b,c));  templateHelperBlock=new BlockData(state.getBlock(),state.getBlock().getMetaFromState(state),null,0);  usedBlocks=new ArrayList<BlockData>();  layerData=new ArrayList<BlockData[][]>();}  }
class C{  public WikipediaTokenizerFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  private Tab createConnectionTab(final String name,final Node content,final MqttConnectionController connectionController){  final Tab tab=new Tab();  connectionController.setTab(tab);  tab.setText(name);  tab.setContent(content);  return tab;}  }
class C{  public boolean isSetMessageType(){  return this.messageType != null;}  }
class C{  @Override public CategoricalResults clone(){  CategoricalResults copy=new CategoricalResults(n);  copy.probabilities=Arrays.copyOf(probabilities,probabilities.length);  return copy;}  }
class C{  public String write(AtomicInteger value){  return value.toString();}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  private OSTenant createOrUpdateOpenstackTenantInCoprhd(KeystoneTenant tenant){  OSTenant osTenant=_keystoneUtilsService.findOpenstackTenantInCoprhd(tenant.getId());  if (osTenant != null) {    if (!osTenant.getDescription().equals(tenant.getDescription())) {      osTenant.setDescription(tenant.getDescription());    }    if (!osTenant.getName().equals(tenant.getName())) {      osTenant.setName(tenant.getName());    }    if (osTenant.getEnabled() != Boolean.parseBoolean(tenant.getEnabled())) {      osTenant.setEnabled(Boolean.parseBoolean(tenant.getEnabled()));    }    _dbClient.updateObject(osTenant);  } else {    osTenant=_keystoneUtilsService.mapToOsTenant(tenant);    osTenant.setId(URIUtil.createId(OSTenant.class));    _dbClient.createObject(osTenant);  }  return osTenant;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer(m_tableName);  if (getSynonym().length() > 0)   sb.append("=").append(m_synonym);  return sb.toString();}  }
class C{  void emitStaticInvoke(MemberName member,Name name){  assert (member.equals(name.function.member()));  Class<?> defc=member.getDeclaringClass();  String cname=getInternalName(defc);  String mname=member.getName();  String mtype;  byte refKind=member.getReferenceKind();  if (refKind == REF_invokeSpecial) {    assert (member.canBeStaticallyBound()) : member;    refKind=REF_invokeVirtual;  }  if (member.getDeclaringClass().isInterface() && refKind == REF_invokeVirtual) {    refKind=REF_invokeInterface;  }  emitPushArguments(name);  if (member.isMethod()) {    mtype=member.getMethodType().toMethodDescriptorString();    mv.visitMethodInsn(refKindOpcode(refKind),cname,mname,mtype,member.getDeclaringClass().isInterface());  } else {    mtype=MethodType.toFieldDescriptorString(member.getFieldType());    mv.visitFieldInsn(refKindOpcode(refKind),cname,mname,mtype);  }  if (name.type == L_TYPE) {    Class<?> rtype=member.getInvocationType().returnType();    assert (!rtype.isPrimitive());    if (rtype != Object.class && !rtype.isInterface()) {      assertStaticType(rtype,name);    }  }}  }
class C{  public static void doRandomSleepOnFailedLoginAttempt(AuthenticationInfo authenticationInfo){  try {    if (authenticationInfo == null) {      authenticationInfo=SecurityHelper.loadAuthenticationInformation();    }    int min=authenticationInfo.getMinWaitOnFailedLogin();    int max=authenticationInfo.getMaxWaitOnFailedLogin();    int increment=authenticationInfo.getIncrementStepWaitOnFailedLogin();    int randomNum=SecurityHelper.getRandomInt(min,max,increment);    logger.info(MessageFormat.format("Invalid credentials. Sleeping (ms): {0,number,#}",randomNum));    if (randomNum > 0)     Thread.sleep(randomNum);  } catch (  InterruptedException e) {    logger.error(MessageFormat.format("Could not sleep !: {0}",e));  }catch (  ConfigurationException e) {    logger.error(MessageFormat.format("Could not get security information. Will use default values: {0}",e));  }}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  @Override public void mapOutputTransformationMetadata(OutputCollector<IntWritable,DistinctValue> out,int taskID,TfUtils agents) throws IOException {  try {    StringBuilder sb=new StringBuilder();    DistinctValue dv=null;    if (_colList != null)     for (int i=0; i < _colList.length; i++) {      int colID=_colList[i];      IntWritable iw=new IntWritable(-colID);      dv=prepMeanOutput(taskID,i,sb,false);      outDV(iw,dv,out);      dv=prepMeanCorrectionOutput(taskID,i,sb,false);      outDV(iw,dv,out);      dv=prepMeanCountOutput(taskID,i,sb,false);      outDV(iw,dv,out);      dv=prepTotalCountOutput(taskID,i,sb,false,agents);      outDV(iw,dv,out);      dv=prepConstantOutput(i,sb);      outDV(iw,dv,out);      dv=prepVarOutput(taskID,i,sb,false);      outDV(iw,dv,out);    }    if (_scnomvList != null)     for (int i=0; i < _scnomvList.length; i++) {      int colID=_scnomvList[i];      IntWritable iw=new IntWritable(-colID);      dv=prepMeanOutput(taskID,i,sb,true);      outDV(iw,dv,out);      dv=prepMeanCorrectionOutput(taskID,i,sb,true);      outDV(iw,dv,out);      dv=prepMeanCountOutput(taskID,i,sb,true);      outDV(iw,dv,out);      dv=prepTotalCountOutput(taskID,i,sb,true,agents);      outDV(iw,dv,out);      dv=prepVarOutput(taskID,i,sb,true);      outDV(iw,dv,out);    }  } catch (  Exception e) {    throw new IOException(e);  }}  }
class C{  private static void swap(short x[],int a,int b){  short t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  public static <Type>NegateValidator<Type> create(@NonNull final Context context,@StringRes final int resourceId,@NonNull final Validator<Type> validator){  return new NegateValidator<>(context,resourceId,validator);}  }
class C{  @After public void after(){  bus.unregister(this);  LOGGER.info("\n\n\n");}  }
class C{  public jMatrix arrayLeftDivide(jMatrix B){  checkMatrixDimensions(B);  jMatrix X=new jMatrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=B.A[i][j] / A[i][j];    }  }  return X;}  }
class C{  public Enumeration<? extends Principal> members(){  Vector<Principal> v=new Vector<Principal>(1);  v.addElement(this);  return v.elements();}  }
class C{  public Instrumenter withFrequency(int frequency){  this.frequency=frequency;  return this;}  }
class C{  protected void registerFastCloners(){  fastCloners.put(GregorianCalendar.class,new FastClonerCalendar());  fastCloners.put(ArrayList.class,new FastClonerArrayList());  fastCloners.put(LinkedList.class,new FastClonerLinkedList());  fastCloners.put(HashSet.class,new FastClonerHashSet());  fastCloners.put(HashMap.class,new FastClonerHashMap());  fastCloners.put(TreeMap.class,new FastClonerTreeMap());  fastCloners.put(LinkedHashMap.class,new FastClonerLinkedHashMap());  fastCloners.put(ConcurrentHashMap.class,new FastClonerConcurrentHashMap());}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public OrganizationHistory(Organization org){  super(org);  if (org.getDomicileCountry() != null) {    setDomicileCountryObjKey(Long.valueOf(org.getDomicileCountry().getKey()));  }  if (org.getOperatorPriceModel() != null) {    setOperatorPriceModelObjKey(Long.valueOf(org.getOperatorPriceModel().getKey()));  }}  }
class C{  @Override public int compareTo(IntDoublePair other){  int fdiff=this.first - other.first;  if (fdiff != 0) {    return fdiff;  }  return Double.compare(this.second,other.second);}  }
class C{  public Property(String key,String value){  super();  this.key=key;  this.value=value;}  }
class C{  public void deactivate(URI id,boolean force){  URI deactivateUri=client.uriBuilder(getDeactivateUrl()).queryParam("force",force).build(id);  client.postURI(String.class,deactivateUri);}  }
class C{  public Array<Component> findComponentsByType(Array<Component> out,Component.Type type,boolean includeChilds){  if (includeChilds) {    for (    GameObject go : this) {      for (      Component c : go.components) {        if (c.getType() == type)         out.add(c);      }    }  } else {    for (    Component c : components) {      if (c.getType() == type)       out.add(c);    }  }  return out;}  }
class C{  @Override public boolean logModified(Logger log){  if (_dependencyList.logModified(log)) {    return true;  } else   if (isModified()) {    log.info(this + " has modified jar files");    return true;  } else {    return false;  }}  }
class C{  private void filterAlreadySynced(ContactSyncEntry syncEntry){  final String selection=String.format(Locale.US,"%s IN (%s)",DatabaseColumns.NUMBER,syncEntry.getJoinedNumbersCsv());  final Cursor cursor=DBInterface.query(false,TableUploadedContacts.NAME,null,selection,null,null,null,null,null);  if (cursor != null) {    while (cursor.moveToNext()) {      syncEntry.removeNumber(cursor.getString(cursor.getColumnIndex(DatabaseColumns.NUMBER)));    }    cursor.close();  }}  }
class C{  public GridTuple(@Nullable V val){  this.val=val;}  }
class C{  public boolean isSetStore(){  return this.store != null;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SeaGlassToolTipUI();}  }
class C{  public static void initializeSageTVForTesting() throws Throwable {  if (System.getProperty("sage.testing.started") != null) {    return;  }  System.setProperty("sage.testing.started","true");  Native.LOG_NATIVE_FAILURES=false;  System.setProperty("java.awt.headless","true");  Sage.TESTING=true;  Sage.client=false;  Sage.EMBEDDED=false;  Sage.USE_HIRES_TIME=false;  JARs=new File("JARs");  STVs=new File("STVs");  JARs.mkdirs();  STVs.mkdirs();  String mainWnd="0";  String stdoutHandle="0";  String sysArgs="-startup";  String appName="sagetv sagetv";  Sage.startup(new String[]{mainWnd,stdoutHandle,sysArgs,appName});}  }
class C{  public static double calculateTimeDecayPenalty(double base,double boost,double param,double days){  if (days <= 0.0) {    return base + boost;  }  return base + boost * Math.pow(param,days);}  }
class C{  public String toString(){  return new StringBuffer().append(getKey()).append('=').append(getValue()).toString();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("DB_PostgreSQL[");  sb.append(m_connectionURL);  try {    StringBuffer logBuffer=new StringBuffer(50);    logBuffer.append("# Connections: ").append(m_ds.getNumConnections());    logBuffer.append(" , # Busy Connections: ").append(m_ds.getNumBusyConnections());    logBuffer.append(" , # Idle Connections: ").append(m_ds.getNumIdleConnections());    logBuffer.append(" , # Orphaned Connections: ").append(m_ds.getNumUnclosedOrphanedConnections());  } catch (  Exception e) {    sb.append("=").append(e.getLocalizedMessage());  }  sb.append("]");  return sb.toString();}  }
class C{  void log(String msg,Scope s){  System.err.print(msg);  System.err.print(": ");  String sep="(";  for (Scope.Entry se=s.elems; se != null; se=se.sibling) {    for (Scope.Entry e=se; e.sym != null; e=e.next()) {      System.err.print(sep + e.sym.name + ":"+ e.sym);      sep=",";    }    System.err.print(")");    sep=", (";  }  System.err.println();}  }
class C{  public void build(Map<String,String> params) throws IOException {  String qs=join(Collections2.transform(params.entrySet(),new MapEntryToQueryStringPair()),"&");  client.post(url + "buildWithParameters?" + qs,null,null);}  }
class C{  public Rdn(String type,Object value) throws InvalidNameException {  if (value == null) {    throw new NullPointerException("Cannot set value to null");  }  if (type.equals("") || isEmptyValue(value)) {    throw new InvalidNameException("type or value cannot be empty, type:" + type + " value:"+ value);  }  entries=new ArrayList<>(DEFAULT_SIZE);  put(type,value);}  }
class C{  @Override String makeDebugTag(){  return "SnmpAdaptorServer[" + getProtocol() + ":"+ getPort()+ "]";}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xC10B6BD9,version=150) public int sceHttpAbortRequest(int requestId){  return 0;}  }
class C{  private void initializeCustomBottomSheet(){  BottomSheet.Builder builder=createBottomSheetBuilder();  builder.setView(R.layout.custom_view);  customBottomSheet=builder.create();}  }
class C{  private boolean onTap(float rawX,float rawY){  int[] location=new int[2];  mGraphicOverlay.getLocationOnScreen(location);  float x=(rawX - location[0]) / mGraphicOverlay.getWidthScaleFactor();  float y=(rawY - location[1]) / mGraphicOverlay.getHeightScaleFactor();  Barcode best=null;  float bestDistance=Float.MAX_VALUE;  for (  BarcodeGraphic graphic : mGraphicOverlay.getGraphics()) {    Barcode barcode=graphic.getBarcode();    if (barcode.getBoundingBox().contains((int)x,(int)y)) {      best=barcode;      break;    }    float dx=x - barcode.getBoundingBox().centerX();    float dy=y - barcode.getBoundingBox().centerY();    float distance=(dx * dx) + (dy * dy);    if (distance < bestDistance) {      best=barcode;      bestDistance=distance;    }  }  if (best != null) {    Intent data=new Intent();    data.putExtra(BarcodeObject,best);    setResult(CommonStatusCodes.SUCCESS,data);    finish();    return true;  }  return false;}  }
class C{  public StyledLabelUI(Style style){  this.style=style;}  }
class C{  public void update(){  for (int i=0; i < 9; i++) {    int tileNo=board.getValueAt(new XYLocation(i / 3,i % 3));    tileBtns[i].setText(tileNo == 0 ? "" : Integer.toString(tileNo));    tileBtns[i].setDisable(tileNo == 0);  }}  }
class C{  public static int bits2words(int numBits){  return ((numBits - 1) >> 6) + 1;}  }
class C{  private double read_ieee_extended(DataInputStream dis) throws IOException {  double f=0;  int expon=0;  long hiMant=0, loMant=0;  long t1, t2;  double HUGE=((double)3.40282346638528860e+38);  expon=dis.readUnsignedShort();  t1=(long)dis.readUnsignedShort();  t2=(long)dis.readUnsignedShort();  hiMant=t1 << 16 | t2;  t1=(long)dis.readUnsignedShort();  t2=(long)dis.readUnsignedShort();  loMant=t1 << 16 | t2;  if (expon == 0 && hiMant == 0 && loMant == 0) {    f=0;  } else {    if (expon == 0x7FFF)     f=HUGE; else {      expon-=16383;      expon-=31;      f=(hiMant * Math.pow(2,expon));      expon-=32;      f+=(loMant * Math.pow(2,expon));    }  }  return f;}  }
class C{  public Closure addPostInstantiateDelegate(Closure delegate){  getProxyBuilder().postInstantiateDelegates.addFirst(delegate);  return delegate;}  }
class C{  public static <A>SetTSeq<A> fromAnyM(final AnyMSeq<A> anyM){  return of(anyM.map(null));}  }
class C{  public void advanceCounters(){  if (m_AdvanceDataSetFirst) {    m_RunNumber++;    if (m_RunNumber > getRunUpper()) {      m_RunNumber=getRunLower();      m_DatasetNumber++;      m_CurrentInstances=null;      if (m_DatasetNumber >= getDatasets().size()) {        m_DatasetNumber=0;        if (m_UsePropertyIterator) {          m_PropertyNumber++;          if (m_PropertyNumber >= Array.getLength(m_PropertyArray)) {            m_Finished=true;          }        } else {          m_Finished=true;        }      }    }  } else {    m_RunNumber++;    if (m_RunNumber > getRunUpper()) {      m_RunNumber=getRunLower();      if (m_UsePropertyIterator) {        m_PropertyNumber++;        if (m_PropertyNumber >= Array.getLength(m_PropertyArray)) {          m_PropertyNumber=0;          m_DatasetNumber++;          m_CurrentInstances=null;          if (m_DatasetNumber >= getDatasets().size()) {            m_Finished=true;          }        }      } else {        m_DatasetNumber++;        m_CurrentInstances=null;        if (m_DatasetNumber >= getDatasets().size()) {          m_Finished=true;        }      }    }  }}  }
class C{  public KnotVector(float knots[],int degree) throws IllegalArgumentException {  this.knots=knots;  this.degree=degree;  n=knots.length - degree - 2;  for (int i=1; i < knots.length; i++) {    if (knots[i - 1] > knots[i]) {      throw new IllegalArgumentException("Knots not valid knot[" + (i - 1) + "] > knot["+ i+ "]: knot["+ (i - 1)+ "]="+ knots[i - 1]+ " > knot["+ i+ "]="+ knots[i]);    }  }  int m=knots.length - 1;  isOpen=true;  for (int k=0; k < degree && isOpen; k++) {    if (knots[k] != knots[k + 1]) {      isOpen=false;    }  }  for (int k=m; k > m - degree && isOpen; k--) {    if (knots[k] != knots[k - 1]) {      isOpen=false;    }  }}  }
class C{  @Override public void onDragFloatView(View floatView,Point position,Point touch){}  }
class C{  public LinearEquationSystem(double[][] a,double[] b,int[] rowPermutations,int[] columnPermutations){  if (a == null) {    throw new IllegalArgumentException("Coefficient array is null!");  }  if (b == null) {    throw new IllegalArgumentException("Right hand side is null!");  }  if (a.length != b.length) {    throw new IllegalArgumentException("Coefficient matrix and right hand side " + "differ in row dimensionality!");  }  if (rowPermutations.length != a.length) {    throw new IllegalArgumentException("Coefficient matrix and row permutation array " + "differ in row dimensionality!");  }  if (columnPermutations.length != a[0].length) {    throw new IllegalArgumentException("Coefficient matrix and column permutation array " + "differ in column dimensionality!");  }  coeff=a;  rhs=b;  this.row=rowPermutations;  this.col=columnPermutations;  rank=0;  x_0=null;  solved=false;  solvable=false;  reducedRowEchelonForm=false;}  }
class C{  public IdentityHashMap(int maxSize){  if (maxSize >= 0) {    this.size=0;    threshold=getThreshold(maxSize);    elementData=newElementArray(computeElementArraySize());  } else {    throw new IllegalArgumentException();  }}  }
class C{  public X509Extensions generate(){  return new X509Extensions(extOrdering,extensions);}  }
class C{  public ImageSize scaleDown(int sampleSize){  return new ImageSize(width / sampleSize,height / sampleSize);}  }
class C{  private int readField(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  int access=readUnsignedShort(u);  String name=readUTF8(u + 2,c);  String desc=readUTF8(u + 4,c);  u+=6;  String signature=null;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  Object value=null;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("ConstantValue".equals(attrName)) {      int item=readUnsignedShort(u + 8);      value=item == 0 ? null : readConst(item,c);    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      access|=Opcodes.ACC_DEPRECATED;    } else     if ("Synthetic".equals(attrName)) {      access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  FieldVisitor fv=classVisitor.visitField(access,name,desc,signature,value);  if (fv == null) {    return u;  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    fv.visitAttribute(attributes);    attributes=attr;  }  fv.visitEnd();  return u;}  }
class C{  public Intent register(Context context,IntentFilter filter){  isRegistered=true;  return context.registerReceiver(this,filter);}  }
class C{  public static boolean unexportObject(Remote obj,boolean force) throws java.rmi.NoSuchObjectException {  return sun.rmi.transport.ObjectTable.unexportObject(obj,force);}  }
class C{  @Override public String toString(){  if (TextUtils.isEmpty(jsonString)) {    jsonString=generateJson();  }  return jsonString;}  }
class C{  private boolean checkClassType(String className){  boolean include=true;  try {    Class<?> clazz=(Class<?>)Class.forName(className);    if (Application.class.isAssignableFrom(clazz)) {      Log.i(TAG,"Class " + className + " is a jME Application");    } else {      include=false;      Log.i(TAG,"Skipping Class " + className + ". Not a jME Application");    }  } catch (  ClassNotFoundException cnfe) {    include=false;    Log.i(TAG,"Skipping Class " + className + ". Class not found.");  }  return include;}  }
class C{  public ApplicationComponent component(){  return applicationComponent;}  }
class C{  public void deleteRow(final int rowIndex){  model.remove(rowIndex);  fireTableRowsDeleted(rowIndex,rowIndex);}  }
class C{  public BluetoothLEController build(Context context){  mContext=context;  mHandler=new Handler();  final BluetoothManager bluetoothManager=(BluetoothManager)context.getSystemService(Context.BLUETOOTH_SERVICE);  mBluetoothAdapter=bluetoothManager.getAdapter();  mBluetoothLEService=new BluetoothLEService();  return this;}  }
class C{  public boolean isAll(){  return all;}  }
class C{  void loadProperties() throws BillingException {  ClassLoader classLoader=this.getClass().getClassLoader();  try (InputStream in=classLoader.getResourceAsStream(PROPERTY_FILE)){    if (in != null) {      Properties props=new Properties();      props.load(in);      setConfigProperties(props);    }  } catch (  IOException e) {    setConfigProperties(null);    throw new BillingException("Configsettings are missing");  }}  }
class C{  private void processJars(){  log("Starting scan.",verboseLevel);  long start=System.currentTimeMillis();  @SuppressWarnings("unchecked") Iterator<Resource> iter=(Iterator<Resource>)jarResources.iterator();  int checked=0;  int errors=0;  while (iter.hasNext()) {    final Resource r=iter.next();    if (!r.isExists()) {      throw new BuildException("JAR resource does not exist: " + r.getName());    }    if (!(r instanceof FileResource)) {      throw new BuildException("Only filesystem resource are supported: " + r.getName() + ", was: "+ r.getClass().getName());    }    File jarFile=((FileResource)r).getFile();    if (!checkJarFile(jarFile)) {      errors++;    }    checked++;  }  log(String.format(Locale.ROOT,"Scanned %d JAR file(s) for licenses (in %.2fs.), %d error(s).",checked,(System.currentTimeMillis() - start) / 1000.0,errors),errors > 0 ? Project.MSG_ERR : Project.MSG_INFO);}  }
class C{  public static void main(String[] args) throws Exception {  String projectPath=new File("").getAbsolutePath();  String wsdlBasePath=projectPath;  if (args != null && args.length > 0 && args[0] != null) {    wsdlBasePath=args[0];  }  System.out.println(projectPath);  System.out.println(wsdlBasePath);  String[] serverArgs=new String[8];  serverArgs[0]="-uri";  serverArgs[1]=wsdlBasePath + File.separator + "ProvisioningService.wsdl";  serverArgs[2]="-o";  serverArgs[3]=projectPath;  serverArgs[4]="-p";  serverArgs[5]="org.oscm.example.server";  serverArgs[6]="-ss";  serverArgs[7]="-sd";  WSDL2Java.main(serverArgs);  String[] clientArgs=new String[6];  clientArgs[0]="-uri";  clientArgs[1]=wsdlBasePath + File.separator + "SessionService.wsdl";  clientArgs[2]="-o";  clientArgs[3]=projectPath;  clientArgs[4]="-p";  clientArgs[5]="org.oscm.example.client";  WSDL2Java.main(clientArgs);  clientArgs[1]=wsdlBasePath + File.separator + "EventService.wsdl";  WSDL2Java.main(clientArgs);}  }
class C{  private MJournalBatch createGlBatch(){  MJournalBatch journalBatch=new MJournalBatch(getCtx(),0,get_TrxName());  journalBatch.setDocumentNo(glDocNo);  journalBatch.setDescription(batchDesc);  journalBatch.setPostingType(X_GL_JournalBatch.POSTINGTYPE_Budget);  journalBatch.setDateAcct(acctDate);  journalBatch.setDateDoc(acctDate);  journalBatch.setGL_Category_ID(gl_Category_ID);  journalBatch.setC_Currency_ID(c_Currency_ID);  journalBatch.setC_DocType_ID(c_DocType_ID);  journalBatch.setAD_Org_ID(m_AD_Org_ID);  int c_Period_ID=MPeriod.getC_Period_ID(getCtx(),acctDate,Env.getAD_Org_ID(getCtx()));  journalBatch.setC_Period_ID(c_Period_ID);  journalBatch.saveEx();  if (journalBatch.getGL_JournalBatch_ID() > 0) {    StringBuffer sql=new StringBuffer("UPDATE I_Budget  " + "SET GL_JournalBatch_ID= ").append(journalBatch.getGL_JournalBatch_ID() + " WHERE I_IsImported='N' ").append(clientCheck).append(docCheck);    DB.executeUpdate(sql.toString(),get_TrxName());    return journalBatch;  }  return null;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BERootPaneUI();}  }
class C{  public synchronized Boolean overwritePublicSID(String newPublicSID){  try {    IConnection current=Red5.getConnectionLocal();    RoomClient currentClient=this.clientListManager.getClientByStreamId(current.getClient().getId());    if (currentClient == null) {      return false;    }    currentClient.setPublicSID(newPublicSID);    this.clientListManager.updateClientByStreamId(current.getClient().getId(),currentClient);    return true;  } catch (  Exception err) {    log.error("[overwritePublicSID]",err);  }  return null;}  }
class C{  public InfluxDbTcpSender(final String hostname,final int port,final int socketTimeout,final String database,final TimeUnit timePrecision,final String measurementPrefix){  super(database,timePrecision,measurementPrefix);  this.hostname=hostname;  this.port=port;  this.socketTimeout=socketTimeout;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  @Override public void uninstallChooserPanel(JColorChooser enclosingChooser){  Component[] components=slidersHolder.getComponents();  for (int i=0; i < components.length; i++) {    AbstractColorChooserPanel ccp=(AbstractColorChooserPanel)components[i];    ccp.uninstallChooserPanel(enclosingChooser);  }  super.uninstallChooserPanel(enclosingChooser);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void testWithObjectMapper() throws Exception {  ObjectMapper m=new ObjectMapper();  m.setNodeFactory(new MyNodeFactory());  JsonNode n=m.readTree("{ \"a\":3 }");  assertNotNull(n);  assertSame(MyObjectNode.class,n.getClass());}  }
class C{  public void onNotificationsResumed(){  isNotificationsPaused=false;  if (notificationsDuringPause.size() > 0) {    if (isAppVisible) {      if (visiblePeer != null && notificationsDuringPause.containsKey(visiblePeer)) {        if (isMobilePlatform) {          playEffectIfEnabled();        } else {        }      } else {        if (isMobilePlatform) {        } else {          for (          Peer p : notificationsDuringPause.keySet()) {            if (isNotificationsEnabled(p,notificationsDuringPause.get(p))) {              playEffectIfEnabled();              break;            }          }        }      }    } else {      for (      Peer p : notificationsDuringPause.keySet()) {        if (isNotificationsEnabled(p,notificationsDuringPause.get(p))) {          showNotification();          break;        }      }    }    notificationsDuringPause.clear();  }}  }
class C{  public LayerVisitor(final FlatRegion flatRegion,final int minY,final int maxY,final LayerFunction function){  checkNotNull(flatRegion);  checkArgument(minY <= maxY,"minY <= maxY required");  checkNotNull(function);  this.minY=minY;  this.maxY=maxY;  this.function=function;  this.iterator=flatRegion.asFlatRegion();}  }
class C{  public void testConstrDoubleMathContext(){  double a=732546982374982347892379283571094797.287346782359284756;  int precision=21;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="732546982374982285074";  int resScale=-15;  BigDecimal result=new BigDecimal(a,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public InstructionCommentNotificationContainer(final INaviInstruction instruction,final INaviCodeNode node,final CommentOperation operation,final CommentScope scope,final Integer commentId){  super(operation,commentId,scope);  this.instruction=Preconditions.checkNotNull(instruction,"Error: Instruction argument can not be null.");  this.node=node;}  }
class C{  public static void disableCarbons(Message msg){  msg.addExtension(new Carbon.Private());}  }
class C{  public static void clearAuthzCacheForUserGroup(Service s,Operation op,UserGroupState userGroupState){  op.nestCompletion(null);}  }
class C{  private BufferedImage step1(final JMenuBar menubar){  final BufferedImage bi1=new BufferedImage(W,H,TYPE_INT_ARGB_PRE);  final Graphics2D g2d=bi1.createGraphics();  g2d.scale(2,2);  g2d.setColor(Color.RED);  g2d.fillRect(0,0,W,H);  menubar.paintAll(g2d);  g2d.dispose();  return bi1;}  }
class C{  @Override protected void testInputFormat(Instances instanceInfo) throws Exception {  getCapabilities(instanceInfo).testWithFail(removeIgnored(instanceInfo));}  }
class C{  public static ParameterType makeFileParameterType(ParameterHandler parameterHandler,String parameterName,PortProvider portProvider,String... fileExtension){  final ParameterTypeFile fileParam=new ParameterTypeFile(parameterName,"Name of the file to write the data in.",true,fileExtension);  fileParam.setExpert(false);  fileParam.registerDependencyCondition(new PortConnectedCondition(parameterHandler,portProvider,true,false));  return fileParam;}  }
class C{  protected void drawChartValuesText(Canvas canvas,XYSeries series,XYSeriesRenderer renderer,Paint paint,List<Float> points,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  float halfDiffX=getHalfDiffX(points,points.size(),seriesNr);  int start=0;  if (startIndex > 0) {    start=2;  }  for (int i=start; i < points.size(); i+=4) {    int index=startIndex + i / 2;    float x=points.get(i);    if (mType == Type.DEFAULT) {      x+=seriesIndex * 2 * halfDiffX - (seriesNr - 1.5f) * halfDiffX;    }    if (!isNullValue(series.getY(index + 1)) && points.size() > i + 3) {      drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(index + 1)),x,points.get(i + 3) - renderer.getChartValuesSpacing(),paint,0);    }    if (!isNullValue(series.getY(index)) && points.size() > i + 1) {      drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(index)),x,points.get(i + 1) + renderer.getChartValuesTextSize() + renderer.getChartValuesSpacing() - 3,paint,0);    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:36.582 -0500",hash_original_method="8179D62366D10A1706B482955DEA9790",hash_generated_method="E6D56011159932796927CAADB5E5BE06") public boolean equals(Object other){  if (!this.getClass().equals(other.getClass()))   return false;  SIPResponse that=(SIPResponse)other;  return statusLine.equals(that.statusLine) && super.equals(other);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Automaton convert(Automaton utf32){  if (utf32.getNumStates() == 0) {    return utf32;  }  int[] map=new int[utf32.getNumStates()];  Arrays.fill(map,-1);  List<Integer> pending=new ArrayList<>();  int utf32State=0;  pending.add(utf32State);  utf8=new Automaton.Builder();  int utf8State=utf8.createState();  utf8.setAccept(utf8State,utf32.isAccept(utf32State));  map[utf32State]=utf8State;  Transition scratch=new Transition();  while (pending.size() != 0) {    utf32State=pending.remove(pending.size() - 1);    utf8State=map[utf32State];    assert utf8State != -1;    int numTransitions=utf32.getNumTransitions(utf32State);    utf32.initTransition(utf32State,scratch);    for (int i=0; i < numTransitions; i++) {      utf32.getNextTransition(scratch);      int destUTF32=scratch.dest;      int destUTF8=map[destUTF32];      if (destUTF8 == -1) {        destUTF8=utf8.createState();        utf8.setAccept(destUTF8,utf32.isAccept(destUTF32));        map[destUTF32]=destUTF8;        pending.add(destUTF32);      }      convertOneEdge(utf8State,destUTF8,scratch.min,scratch.max);    }  }  return utf8.finish();}  }
class C{  protected boolean isReply(Mail originalMail) throws MessagingException {  return (isStatic()) ? this.isReply : isReply();}  }
class C{  protected boolean isPseudoElement(String s){switch (s.charAt(0)) {case 'a':case 'A':    return s.equalsIgnoreCase("after");case 'b':case 'B':  return s.equalsIgnoreCase("before");case 'f':case 'F':return s.equalsIgnoreCase("first-letter") || s.equalsIgnoreCase("first-line");}return false;}  }
class C{  public IconicsDrawable paddingPx(int iconPadding){  if (mIconPadding != iconPadding) {    mIconPadding=iconPadding;    if (mDrawContour) {      mIconPadding+=mContourWidth;    }    invalidateSelf();  }  return this;}  }
class C{  public final boolean isEmpty(){  return !iterable.iterator().hasNext();}  }
class C{  public void testConstructor(){  DoubleAdder ai=new DoubleAdder();  assertEquals(0.0,ai.sum());}  }
class C{  public void execute(String sql,Object[] bindArgs,int connectionFlags,CancellationSignal cancellationSignal){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags,cancellationSignal)) {    return;  }  acquireConnection(sql,connectionFlags,cancellationSignal);  try {    mConnection.execute(sql,bindArgs,cancellationSignal);  }  finally {    releaseConnection();  }}  }
class C{  private static Scheduler createPoint(String schedulerName){  Config config=ConfigFactory.load();  String schedulerType=config.getString(DEFAULT_SCHEDULER_KEY);  String customConfigPath=ConfigUtil.joinPath(schedulerName);  if (config.getConfig(CUSTOM_SCHEDULERS_KEY).hasPath(customConfigPath)) {    schedulerType=config.getConfig(CUSTOM_SCHEDULERS_KEY).getString(customConfigPath);  }  Scheduler instance=getSchedulerInstance(schedulerType,schedulerName);  if (instance == null) {    throw new IllegalArgumentException("Invalid throttling point type for " + schedulerName + ": "+ schedulerType);  }  return instance;}  }
class C{  @Override public String toString(){  return destination.toString();}  }
class C{  @Override public boolean onUsed(RPEntity user){  board.usedSwitch(user,this);  return true;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public final void removeModule(final String name){  if (this.modules.containsKey(name)) {    this.modules.remove(name);    log.warn("Module \"" + name + "\" is removed manually from config");  }}  }
class C{  public static byte[] copyFrom(byte[] array,int newLength){  byte[] copy=(byte[])Array.newInstance(Byte.TYPE,newLength);  System.arraycopy(array,0,copy,0,Math.min(array.length,newLength));  return copy;}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public static Parameters createParameters(Bitmap hMapBitmap){  return new Parameters(hMapBitmap);}  }
class C{  public T casePrimitiveType(PrimitiveType object){  return null;}  }
class C{  public boolean isEnd(){switch (compareType) {case Comparison.EQUAL:case Comparison.EQUAL_NULL_SAFE:case Comparison.SMALLER_EQUAL:case Comparison.SMALLER:    return true;default :  return false;}}  }
class C{  public static Geometry readWKTString(String wkt,GeometryFactory geomFact) throws ParseException, IOException {  WKTReader reader=new WKTReader(geomFact);  WKTFileReader fileReader=new WKTFileReader(new StringReader(wkt),reader);  List geomList=fileReader.read();  if (geomList.size() == 1)   return (Geometry)geomList.get(0);  return geomFact.createGeometryCollection(GeometryFactory.toGeometryArray(geomList));}  }
class C{  public T hitType(String value){  setString(HIT_TYPE,value);  return (T)this;}  }
class C{  public static void beep(final int type){switch (type) {default :    Toolkit.getDefaultToolkit().beep();}}  }
class C{  public static final boolean sqAttacked(Position pos,int sq){  int x=Position.getX(sq);  int y=Position.getY(sq);  boolean isWhiteMove=pos.whiteMove;  final int oQueen=isWhiteMove ? Piece.BQUEEN : Piece.WQUEEN;  final int oRook=isWhiteMove ? Piece.BROOK : Piece.WROOK;  final int oBish=isWhiteMove ? Piece.BBISHOP : Piece.WBISHOP;  final int oKnight=isWhiteMove ? Piece.BKNIGHT : Piece.WKNIGHT;  int p;  if (y > 0) {    p=checkDirection(pos,sq,y,-8);    if ((p == oQueen) || (p == oRook))     return true;    p=checkDirection(pos,sq,Math.min(x,y),-9);    if ((p == oQueen) || (p == oBish))     return true;    p=checkDirection(pos,sq,Math.min(7 - x,y),-7);    if ((p == oQueen) || (p == oBish))     return true;    if (x > 1) {      p=checkDirection(pos,sq,1,-10);      if (p == oKnight)       return true;    }    if (x > 0 && y > 1) {      p=checkDirection(pos,sq,1,-17);      if (p == oKnight)       return true;    }    if (x < 7 && y > 1) {      p=checkDirection(pos,sq,1,-15);      if (p == oKnight)       return true;    }    if (x < 6) {      p=checkDirection(pos,sq,1,-6);      if (p == oKnight)       return true;    }    if (!isWhiteMove) {      if (x < 7 && y > 1) {        p=checkDirection(pos,sq,1,-7);        if (p == Piece.WPAWN)         return true;      }      if (x > 0 && y > 1) {        p=checkDirection(pos,sq,1,-9);        if (p == Piece.WPAWN)         return true;      }    }  }  if (y < 7) {    p=checkDirection(pos,sq,7 - y,8);    if ((p == oQueen) || (p == oRook))     return true;    p=checkDirection(pos,sq,Math.min(7 - x,7 - y),9);    if ((p == oQueen) || (p == oBish))     return true;    p=checkDirection(pos,sq,Math.min(x,7 - y),7);    if ((p == oQueen) || (p == oBish))     return true;    if (x < 6) {      p=checkDirection(pos,sq,1,10);      if (p == oKnight)       return true;    }    if (x < 7 && y < 6) {      p=checkDirection(pos,sq,1,17);      if (p == oKnight)       return true;    }    if (x > 0 && y < 6) {      p=checkDirection(pos,sq,1,15);      if (p == oKnight)       return true;    }    if (x > 1) {      p=checkDirection(pos,sq,1,6);      if (p == oKnight)       return true;    }    if (isWhiteMove) {      if (x < 7 && y < 6) {        p=checkDirection(pos,sq,1,9);        if (p == Piece.BPAWN)         return true;      }      if (x > 0 && y < 6) {        p=checkDirection(pos,sq,1,7);        if (p == Piece.BPAWN)         return true;      }    }  }  p=checkDirection(pos,sq,7 - x,1);  if ((p == oQueen) || (p == oRook))   return true;  p=checkDirection(pos,sq,x,-1);  if ((p == oQueen) || (p == oRook))   return true;  int oKingSq=pos.getKingSq(!isWhiteMove);  if (oKingSq >= 0) {    int ox=Position.getX(oKingSq);    int oy=Position.getY(oKingSq);    if ((Math.abs(x - ox) <= 1) && (Math.abs(y - oy) <= 1))     return true;  }  return false;}  }
class C{  public void paintButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void testContainsClassEmpty() throws Exception {  JarArchive jar=new DefaultJarArchive(getResourcePath(PACKAGE_PATH + "empty.jar"));  assertTrue(!jar.containsClass("test.Test"));}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void actionPerformed(ActionEvent ae){  Object obj=ae.getSource();  if (obj == this) {    TimerRateHolder trh=(TimerRateHolder)getSelectedItem();    trh.modifyTimer(getTimeHandler());  }}  }
class C{  @Override public synchronized void removeHandshakeCompletedListener(HandshakeCompletedListener listener){  if (handshakeListeners == null) {    throw new IllegalArgumentException("no listeners");  }  if (handshakeListeners.remove(listener) == null) {    throw new IllegalArgumentException("listener not registered");  }  if (handshakeListeners.isEmpty()) {    handshakeListeners=null;  }}  }
class C{  @Deprecated public void consumeResponse(@PathVariable(value="tenant") final String tenant,HttpServletRequest request,HttpServletResponse httpResponse){  consumeResponse(null,tenant,request,httpResponse);}  }
class C{  public CIdbFileList(){  setModel(m_listModel);}  }
class C{  public boolean visitBinaryOperation(ExpressionOwner owner,Operation op){  return true;}  }
class C{  @Override public final void insertAll(DBIDs ids){  if (ids.isEmpty() || (ids.size() == 1)) {    return;  }  if (canBulkLoad()) {    List<RdKNNEntry> leafs=new ArrayList<>(ids.size());    for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {      leafs.add(createNewLeafEntry(DBIDUtil.deref(iter)));    }    bulkLoad(leafs);  } else {    for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {      insert(iter);    }  }  doExtraIntegrityChecks();}  }
class C{  public form removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static void premain(String agentArgs,Instrumentation inst){  instrumentation=inst;  LOGGER.info("inspectIT Agent: Starting initialization...");  checkForCorrectSetup();  try {    @SuppressWarnings("resource") InspectItClassLoader classLoader=new InspectItClassLoader(new URL[0]);    Class<?> agentClazz=classLoader.loadClass(INSPECTIT_AGENT);    Constructor<?> constructor=agentClazz.getConstructor(File.class);    Object realAgent=constructor.newInstance(getInspectItAgentJarFileLocation());    Agent.agent=(IAgent)realAgent;    preloadClasses();    LOGGER.info("inspectIT Agent: Initialization complete...");    analyzeAlreadyLoadedClasses();    inst.addTransformer(new JavaAgent());  } catch (  Exception e) {    LOGGER.severe("Something unexpected happened while trying to initialize the Agent, aborting!");    e.printStackTrace();  }}  }
class C{  public Initiator initiator(){  return initiator;}  }
class C{  public void requestUpdate(){synchronized (updateLock) {    updateOnce=true;  }}  }
class C{  private boolean writeJarBytesToFile(final File file,final byte[] jarBytes){  final boolean isDebugEnabled=logger.isDebugEnabled();  try {    if (file.createNewFile()) {      if (isDebugEnabled) {        logger.debug("Successfully created new JAR file: {}",file.getAbsolutePath());      }      final OutputStream outStream=new FileOutputStream(file);      outStream.write(jarBytes);      outStream.close();      return true;    }    return doesFileMatchBytes(file,jarBytes);  } catch (  IOException ioex) {    if (isDebugEnabled) {      logger.debug("IOException while trying to write JAR content to file: {}",ioex);    }    return false;  }}  }
class C{  public void endGame(){  if (!isGameRunning()) {    Bukkit.getConsoleSender().sendMessage(Utils.color("&6Fired end game (not running)"));    return;  }  Bukkit.getConsoleSender().sendMessage(Utils.color("&6Fired end game"));  Bukkit.getPluginManager().callEvent(new GameOverEvent());  for (  Door door : doors) {    door.cleanup();  }  if (checkPointTask != null) {    checkPointTask.cancel();    checkPointTask=null;  }  if (nukeRoomTask != null) {    nukeRoomTask.cancel();    nukeRoomTask=null;  }  boolean humansWon=getHumansSize() != 0;  for (  Player player : Bukkit.getOnlinePlayers()) {    Profile profile=PLUGIN.getProfile(player);    if (profile != null) {      profile.setGamesPlayed(profile.getGamesPlayed() + 1);      if (profile.getGamesPlayed() == 100) {        profile.awardAchievement(Achievements.LONG_TIME_PLAYER);      }      if (humansWon && isHuman(player)) {        profile.setWins(profile.getWins() + 1);      }    }  }  if (humansWon) {    Messages.WIN_HUMANS.broadcast();  } else {    Messages.WIN_ZOMBIES.broadcast();  }  new GameResetTask(PLUGIN,this).runTaskLater(PLUGIN,20 * 5);}  }
class C{  public static boolean initAsync(String Version,Context AppContext,LoaderCallbackInterface Callback){  return AsyncServiceHelper.initOpenCV(Version,AppContext,Callback);}  }
class C{  public void executeASync(ProcessInfo pi){  log.config("-");}  }
class C{  private JPanel constructJComponent(){  BoxLayout selectionPanelLayout=new BoxLayout(selectionPanel,BoxLayout.Y_AXIS);  selectionPanel.setLayout(selectionPanelLayout);  ButtonGroup radioButtons=new ButtonGroup();  if (optionsToSelect != null) {    for (int i=0; i < optionsToSelect.size(); i++) {      JRadioButton radioButton=new JRadioButton(getI18n(optionsToSelect.get(i)));      radioButton.setHorizontalAlignment(JRadioButton.LEFT);      if (i == 0) {        radioButton.setSelected(true);      }      radioButtons.add(radioButton);      selectionPanel.add(radioButton);    }  }  BoxLayout checkboxPanelLayout=new BoxLayout(checkboxPanel,BoxLayout.Y_AXIS);  checkboxPanel.setLayout(checkboxPanelLayout);  if (optionsToCheck != null) {    for (int i=0; i < optionsToCheck.size(); i++) {      JCheckBox jCheckBox=new JCheckBox(getI18n(optionsToCheck.get(i)));      jCheckBox.setHorizontalAlignment(JCheckBox.LEFT);      checkboxPanel.add(jCheckBox);    }  }  JPanel panel=new JPanel();  BoxLayout panelLayout=new BoxLayout(panel,BoxLayout.Y_AXIS);  panel.setLayout(panelLayout);  panel.add(selectionPanel);  if (optionsToSelect != null && !optionsToSelect.isEmpty() && optionsToCheck != null && !optionsToCheck.isEmpty()) {    panel.add(Box.createRigidArea(new Dimension(0,GAP_BETWEEN_SELECTIONS)));  }  panel.add(checkboxPanel);  JPanel leftMarginPanel=new JPanel();  BoxLayout leftMarginPanelLayout=new BoxLayout(leftMarginPanel,BoxLayout.X_AXIS);  leftMarginPanel.setLayout(leftMarginPanelLayout);  leftMarginPanel.add(Box.createRigidArea(new Dimension(getInfoIcon().getIconWidth() + BUTTON_DIALOG_LEFT_GAP,0)));  leftMarginPanel.add(panel);  return leftMarginPanel;}  }
class C{  @Override protected void onPostResume(){  super.onPostResume();  mHandler.removeMessages(MSG_RESUME_PENDING);  onResumeFragments();  mFragments.execPendingActions();}  }
class C{  public void valueChanged(ListSelectionEvent event){  if (!event.getValueIsAdjusting()) {    ListSelectionModel model=(ListSelectionModel)event.getSource();    if (model.getLeadSelectionIndex() > -1) {      Tradestrategy transferObject=m_tradestrategyModel.getData().getTradestrategies().get(m_tradestrategyTable.convertRowIndexToModel(model.getLeadSelectionIndex()));      enableTradestrategyButtons(transferObject);    } else {      enableTradestrategyButtons(null);    }  }}  }
class C{  public NotLinkException(String file){  super(file);}  }
class C{  protected BannerMetaBuilder(){  this.meta=Diorite.getCore().getItemFactory().construct(BannerMeta.class);}  }
class C{  public Manager(String name,int age,int empId,String title,int salary,Set addresses,int mgrId){  super(name,age,empId,title,salary,addresses);  this.manager_id=mgrId;}  }
class C{  protected static String _escapeQuotesAndBackslashes(String s){  final StringBuilder buf=new StringBuilder(s);  for (int i=s.length() - 1; i >= 0; i--) {    char c=s.charAt(i);    if ((c == '\\') || (c == '"')) {      buf.insert(i,'\\');    } else     if (c == '\n') {      buf.deleteCharAt(i);      buf.insert(i,"\\n");    } else     if (c == '\t') {      buf.deleteCharAt(i);      buf.insert(i,"\\t");    } else     if (c == '\r') {      buf.deleteCharAt(i);      buf.insert(i,"\\r");    } else     if (c == '\b') {      buf.deleteCharAt(i);      buf.insert(i,"\\b");    } else     if (c == '\f') {      buf.deleteCharAt(i);      buf.insert(i,"\\f");    }  }  return buf.toString();}  }
class C{  public void testSetF7(){  boolean f7=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF7(f7);  jmri.util.JUnitAppender.assertErrorMessage("sendFunctionGroup2 needs to be implemented if invoked");}  }
class C{  public String scanIdentifier(Reader in) throws IOException {  StringBuilder buf=new StringBuilder();  while (true) {    if (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')) || ((c >= '0') && (c <= '9'))|| (c == '_')) {      buf.append((char)c);      c=in.read();    } else {      return buf.toString();    }  }}  }
class C{  public Distribution(Instances source,ClassifierSplitModel modelToUse) throws Exception {  int index;  Instance instance;  double[] weights;  m_perClassPerBag=new double[modelToUse.numSubsets()][0];  m_perBag=new double[modelToUse.numSubsets()];  totaL=0;  m_perClass=new double[source.numClasses()];  for (int i=0; i < modelToUse.numSubsets(); i++) {    m_perClassPerBag[i]=new double[source.numClasses()];  }  Enumeration<Instance> enu=source.enumerateInstances();  while (enu.hasMoreElements()) {    instance=enu.nextElement();    index=modelToUse.whichSubset(instance);    if (index != -1) {      add(index,instance);    } else {      weights=modelToUse.weights(instance);      addWeights(instance,weights);    }  }}  }
class C{  private static void prepTest(){  outputLocale("he");  outputLocale("yi");  outputLocale("id");}  }
class C{  public final <C extends Component>C remove(C component){  remove(component.getClass());  component.setProvider(null);  events.publish(new ComponentRemoved(component));  return component;}  }
class C{  public static String unEnclose(String s){  if (s.startsWith("(") && s.endsWith(")")) {    return s.substring(1,s.length() - 1);  }  return s;}  }
class C{  public boolean hasMnemonic(){  return mnemonic != null;}  }
class C{  public boolean waitForSchedulerJobResponse() throws InterruptedException {  result=false;  jobStatusWatcher.await();  return result;}  }
class C{  public static int combineHashCodes(int hashCode1,int hashCode2){  return HashcodeUtil.combineHashCodes(hashCode1,hashCode2);}  }
class C{  public void writeTotalsAndResetCounters(){  arrivals.put(currentTime,currentSecondArrivalCount);  departures.put(currentTime,currentSecondDepartureCount);  activityCountIncrement.put(currentTime,currentSecondArrivalCount - currentSecondDepartureCount);  activityCountinProgress.put(currentTime,(activityCountinProgress.size() > 0 ? activityCountinProgress.lastEntry().getValue() : 0) + currentSecondArrivalCount - currentSecondDepartureCount);  currentSecondDepartureCount=0;  currentSecondArrivalCount=0;  currentTime=0;}  }
class C{  private synchronized void sendListens(final Set<NotificationChannel> channelNames){  for (  final NotificationChannel channel : channelNames) {    try {      m_connection.executeUpdate("LISTEN " + channel.name(),true);    } catch (    final SQLException exception) {      NaviLogger.severe("Error: Could not send LISTEN command to database server: %s",exception);    }  }  for (  final PostgreSQLNotificationListener listener : m_listeners) {    try {      listener.listenedChannelsAdded(m_provider,channelNames);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public void handleDELETE(CoapExchange exchange){  exchange.respond(ResponseCode.METHOD_NOT_ALLOWED);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader;  String outputHeader;  int row, col;  int progress=0;  double z, w, wN;  int i, n;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  double largeValue=Float.MAX_VALUE;  double smallValue=0.0001;  boolean somethingDone;  int loopNum=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  smallValue=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    double noDataOutput=-32768.0;    WhiteboxRaster output;    if (smallValue < 0.01 && smallValue > 0) {      output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.DOUBLE,largeValue);    } else {      output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,largeValue);    }    output.setNoDataValue(noDataOutput);    double[] data=null;    for (row=0; row < rows; row++) {      data=DEM.getRowValues(row);      if (row == 0 || row == (rows - 1)) {        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(row,col,data[col]);          } else {            output.setValue(row,col,noDataOutput);          }        }      } else {        for (col=0; col < cols; col++) {          z=data[col];          if (z == noData) {            output.setValue(row,col,noDataOutput);          } else {            output.setValue(row,col,z);            break;          }        }        for (col=cols - 1; col >= 0; col--) {          z=data[col];          if (z == noData) {            output.setValue(row,col,noDataOutput);          } else {            output.setValue(row,col,z);            break;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress("Loop 1:",progress);    }    i=0;    do {      loopNum++;      somethingDone=false;switch (i) {case 0:        for (row=1; row < (rows - 1); row++) {          for (col=1; col < (cols - 1); col++) {            z=DEM.getValue(row,col);            w=output.getValue(row,col);            if (w > z) {              for (n=0; n < 8; n++) {                wN=output.getValue(row + dY[n],col + dX[n]) + smallValue;                if (z == noData && wN == noDataOutput) {                  w=noDataOutput;                  output.setValue(row,col,w);                }                if (wN < w) {                  if (wN > z) {                    output.setValue(row,col,wN);                    w=wN;                  } else {                    output.setValue(row,col,z);                    break;                  }                  somethingDone=true;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress("Loop " + loopNum + ":",progress);        }      break;case 1:    for (row=(rows - 2); row >= 1; row--) {      for (col=(cols - 2); col >= 1; col--) {        z=DEM.getValue(row,col);        w=output.getValue(row,col);        if (w > z) {          for (n=0; n < 8; n++) {            wN=output.getValue(row + dY[n],col + dX[n]) + smallValue;            if (z == noData && wN == noDataOutput) {              w=noDataOutput;              output.setValue(row,col,w);            }            if (wN < w) {              if (wN > z) {                output.setValue(row,col,wN);                w=wN;              } else {                output.setValue(row,col,z);                break;              }              somethingDone=true;            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * (rows - row) / (rows - 1));      updateProgress("Loop " + loopNum + ":",progress);    }  break;case 2:for (row=1; row < (rows - 1); row++) {  for (col=(cols - 2); col >= 1; col--) {    z=DEM.getValue(row,col);    w=output.getValue(row,col);    if (w > z) {      for (n=0; n < 8; n++) {        wN=output.getValue(row + dY[n],col + dX[n]) + smallValue;        if (z == noData && wN == noDataOutput) {          w=noDataOutput;          output.setValue(row,col,w);        }        if (wN < w) {          if (wN > z) {            output.setValue(row,col,wN);            w=wN;          } else {            output.setValue(row,col,z);            break;          }          somethingDone=true;        }      }    }  }  if (cancelOp) {    cancelOperation();    return;  }  progress=(int)(100f * row / (rows - 1));  updateProgress("Loop " + loopNum + ":",progress);}break;case 3:for (row=(rows - 2); row >= 1; row--) {for (col=1; col < (cols - 1); col++) {z=DEM.getValue(row,col);w=output.getValue(row,col);if (w > z) {  for (n=0; n < 8; n++) {    wN=output.getValue(row + dY[n],col + dX[n]) + smallValue;    if (z == noData && wN == noDataOutput) {      w=noDataOutput;      output.setValue(row,col,w);    }    if (wN < w) {      if (wN > z) {        output.setValue(row,col,wN);        w=wN;      } else {        output.setValue(row,col,z);        break;      }      somethingDone=true;    }  }}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * (rows - row) / (rows - 1));updateProgress("Loop " + loopNum + ":",progress);}break;}i++;if (i > 3) {i=0;}} while (somethingDone);loopNum++;double zN;dX=new int[]{-1,0,1,1,-1};dY=new int[]{-1,-1,-1,0,0};for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=DEM.getValue(row,col);if (z == noData && output.getValue(row,col) != noDataOutput) {for (i=0; i < 5; i++) {zN=output.getValue(row + dY[i],col + dX[i]);if (zN == noDataOutput) {output.setValue(row,col,noDataOutput);break;}}}}for (col=cols - 1; col >= 0; col--) {z=DEM.getValue(row,col);if (z == noData && output.getValue(row,col) != noDataOutput) {for (i=0; i < 5; i++) {zN=output.getValue(row + dY[i],col + dX[i]);if (zN == noDataOutput) {output.setValue(row,col,noDataOutput);break;}}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop " + loopNum + ":",progress);}loopNum++;dX=new int[]{-1,0,1,1,-1};dY=new int[]{1,1,1,0,0};for (row=rows - 1; row >= 0; row--) {for (col=0; col < cols; col++) {z=DEM.getValue(row,col);if (z == noData && output.getValue(row,col) != noDataOutput) {for (i=0; i < 5; i++) {zN=output.getValue(row + dY[i],col + dX[i]);if (zN == noDataOutput) {output.setValue(row,col,noDataOutput);break;}}}}for (col=cols - 1; col >= 0; col--) {z=DEM.getValue(row,col);if (z == noData && output.getValue(row,col) != noDataOutput) {for (i=0; i < 5; i++) {zN=output.getValue(row + dY[i],col + dX[i]);if (zN == noDataOutput) {output.setValue(row,col,noDataOutput);break;}}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * (rows - row) / (rows - 1));updateProgress("Loop " + loopNum + ":",progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());DEM.close();output.flush();output.findMinAndMaxVals();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  @Override protected char[] escape(int cp){  if (cp < safeOctets.length && safeOctets[cp]) {    return null;  } else   if (cp == ' ' && plusForSpace) {    return PLUS_SIGN;  } else   if (cp <= 0x7F) {    char[] dest=new char[3];    dest[0]='%';    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    dest[1]=UPPER_HEX_DIGITS[cp >>> 4];    return dest;  } else   if (cp <= 0x7ff) {    char[] dest=new char[6];    dest[0]='%';    dest[3]='%';    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[1]=UPPER_HEX_DIGITS[0xC | cp];    return dest;  } else   if (cp <= 0xffff) {    char[] dest=new char[9];    dest[0]='%';    dest[1]='E';    dest[3]='%';    dest[6]='%';    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp];    return dest;  } else   if (cp <= 0x10ffff) {    char[] dest=new char[12];    dest[0]='%';    dest[1]='F';    dest[3]='%';    dest[6]='%';    dest[9]='%';    dest[11]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0x7];    return dest;  } else {    throw new IllegalArgumentException("Invalid unicode character value " + cp);  }}  }
class C{  public List<ScaleIOScsiInitiator> queryAllSCSIInitiators() throws JSONException {  log.info("Discovery all SCSI Initiators");  List<ScaleIOScsiInitiator> scsiInits=Collections.emptyList();  try {    ClientResponse response=get(URI.create(ScaleIOConstants.GET_SCSI_INITIATOR_URI));    scsiInits=getResponseObjects(ScaleIOScsiInitiator.class,response);  } catch (  Exception e) {    log.debug("This exception is expected for ScaleIO 1.32 and later, since iSCSI supported is removed. Exception:",e);  }  return scsiInits;}  }
class C{  private void checkModCount(){  if (modCount != expectedModCount) {    throw new ConcurrentModificationException();  }}  }
class C{  public static int randomInt(int a,int b,boolean excludeZero){  double randVal=rand.nextDouble() * (b - a);  int randNum=a + (int)Math.round(randVal);  if (a < 0 && b > 0 && excludeZero) {    while (randNum == 0) {      randNum=((int)(a + rand.nextDouble() * (b - a)));    }  }  return randNum;}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public static Pool find(Region<?,?> region){  return PoolManagerImpl.getPMI().find(region);}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  private String escapeBinaryPath(String path){  return "\"" + path + "\"";}  }
class C{  public static void init(AppCompatActivity activity){  LayoutInflaterCompat.setFactory(activity.getLayoutInflater(),new MdLayoutInflaterFactory(activity.getDelegate()));}  }
class C{  public void deleteGlobalComment(final IComment comment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException {  try {    m_node.getComments().deleteGlobalCodeNodeComment(comment);  } catch (  final CouldntDeleteException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException(exception);  }}  }
class C{  public boolean equalArrayValue(Object otherValue){  if (value instanceof Object[] && otherValue instanceof Object[]) {    return Arrays.equals((Object[])value,(Object[])otherValue);  }  Class type=value.getClass();  if (type != otherValue.getClass()) {    return false;  }  if (type == int[].class) {    return Arrays.equals((int[])value,(int[])otherValue);  } else   if (type == byte[].class) {    return Arrays.equals((byte[])value,(byte[])otherValue);  } else   if (type == short[].class) {    return Arrays.equals((short[])value,(short[])otherValue);  } else   if (type == long[].class) {    return Arrays.equals((long[])value,(long[])otherValue);  } else   if (type == char[].class) {    return Arrays.equals((char[])value,(char[])otherValue);  } else   if (type == boolean[].class) {    return Arrays.equals((boolean[])value,(boolean[])otherValue);  } else   if (type == float[].class) {    return Arrays.equals((float[])value,(float[])otherValue);  } else   if (type == double[].class) {    return Arrays.equals((double[])value,(double[])otherValue);  }  return false;}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public boolean stem(char[] word,int wordLen){  return stem(word,0,wordLen);}  }
class C{  @Transactional(readOnly=true) public T readDeep(PK id,String... deepFields){  StringBuffer queryString=new StringBuffer("select o from ");  queryString.append(unqualifiedModelClassName).append(" o ");  for (  String field : deepFields) {    queryString.append(" left outer join fetch o.").append(field);  }  queryString.append(" where o.id = :id");  Query query=this.entityManager.createQuery(queryString.toString());  query.setParameter("id",id);  @SuppressWarnings("unchecked") List<T> results=query.getResultList();  if (results.size() == 0) {    return null;  } else   return results.get(0);}  }
class C{  public void testStateFormatUpdateWithExplicitRefreshLazy() throws Exception {  testStateFormatUpdate(true,false);}  }
class C{  public final boolean peekOrFalse(){  return (m_index > -1) ? m_values[m_index] : false;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MIssue[");  sb.append(get_ID()).append("-").append(getIssueSummary()).append(",Record=").append(getRecord_ID()).append("]");  return sb.toString();}  }
class C{  public Message messageAt(ConversationPrompt prompt,Conversation conversation){  return messageAt(conversation.getPrompts().indexOf(prompt));}  }
class C{  public void validateUserNamespaceAuthorizationKey(UserNamespaceAuthorizationKey key) throws IllegalArgumentException {  Assert.notNull(key,"A user namespace authorization key must be specified.");  key.setNamespace(alternateKeyHelper.validateStringParameter("namespace",key.getNamespace()));  key.setUserId(alternateKeyHelper.validateStringParameter("user id",key.getUserId()));}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public String globalInfo(){  return "M5Base. Implements base routines for generating M5 Model trees and " + "rules\n" + "The original algorithm M5 was invented by R. Quinlan and Yong Wang "+ "made improvements.\n\n"+ "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public void addObservations(int states[][],int destCol,int[] sourcesAbsolute){  addObservations(states,destCol,sourcesAbsolute,false);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof TimeSeriesURLGenerator)) {    return false;  }  TimeSeriesURLGenerator that=(TimeSeriesURLGenerator)obj;  if (!this.dateFormat.equals(that.dateFormat)) {    return false;  }  if (!this.itemParameterName.equals(that.itemParameterName)) {    return false;  }  if (!this.prefix.equals(that.prefix)) {    return false;  }  if (!this.seriesParameterName.equals(that.seriesParameterName)) {    return false;  }  return true;}  }
class C{  @Override public synchronized boolean isEmpty(){  return elementCount == 0;}  }
class C{  public T clickable(boolean clickable){  if (view != null) {    view.setClickable(clickable);  }  return self();}  }
class C{  protected void handleException(Exception e){  e.printStackTrace();  JOptionPane.showMessageDialog(frame,e.getMessage() == null ? e.toString() : e.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);}  }
class C{  public void toggle(){  mSlidingMenu.toggle();}  }
class C{  public void testInstanceMemberDependencies() throws Exception {  checkMembers("self.depends_on_class_field_foo");  Assert.assertThat("Instance member dependencies failed",getErrorMemberNames(),Matchers.containsInAnyOrder("CLASS_FIELD_FOO"));}  }
class C{  public WrapLayout(int align,int hgap,int vgap){  super(align,hgap,vgap);}  }
class C{  protected Object[] disableLighting(Chunk chunk){  try {    if (chunkGetHandle == null) {      chunkGetHandle=chunk.getClass().getDeclaredMethod("getHandle");      chunkGetHandle.setAccessible(true);    }    Object nmsChunk=chunkGetHandle.invoke(chunk);    if (fieldNeighbors == null) {      fieldNeighbors=nmsChunk.getClass().getDeclaredField("neighbors");      fieldNeighbors.setAccessible(true);    }    Object value=fieldNeighbors.get(nmsChunk);    fieldNeighbors.set(nmsChunk,0);    return new Object[]{nmsChunk,value};  } catch (  Throwable ignore) {  }  return null;}  }
class C{  public static String T2S(String text){  char[] chars=text.toCharArray();  for (int i=0; i < chars.length; i++) {    Character replacement=t2s.get(chars[i]);    if (replacement != null) {      chars[i]=replacement;    }  }  return new String(chars);}  }
class C{  public void addItem(String s,int value){  _valueArray[_nstored]=value;  TreeLeafNode node=new TreeLeafNode(s,_nstored);  treeNodes.getLast().add(node);  _pathArray[_nstored]=new TreePath(node.getPath());  _itemArray[_nstored++]=s;}  }
class C{  @Bean @ConditionalOnMissingBean public ConfigurationChangeDetector propertyChangeWatcher(ConfigReloadProperties properties,ConfigurationUpdateStrategy strategy){switch (properties.getMode()) {case POLLING:    return new PollingConfigurationChangeDetector(environment,properties,kubernetesClient,strategy,configMapPropertySourceLocator,secretsPropertySourceLocator);case EVENT:  return new EventBasedConfigurationChangeDetector(environment,properties,kubernetesClient,strategy,configMapPropertySourceLocator,secretsPropertySourceLocator);}throw new IllegalStateException("Unsupported configuration reload mode: " + properties.getMode());}  }
class C{  public MultivariateTable build(){  double totalProb=table.values().stream().mapToDouble(null).sum();  if (totalProb < 0.99) {    Assignment def=Assignment.createDefault(headVars);    incrementRow(def,(1 - totalProb));  } else {    table=InferenceUtils.normalise(table);  }  return new MultivariateTable(headVars,table);}  }
class C{  public static boolean isAuthorized(String ipAddress){  return ipMap.containsKey(ipAddress);}  }
class C{  private void updateLocalUser(StorageOSUser user){  StorageOSUser local=_localUsers.get(user.getName());  if (local != null) {    for (    String role : local.getRoles()) {      if (!VdcUtil.isLocalVdcSingleSite()) {        if (role.equals(Role.SECURITY_ADMIN.toString())) {          role=Role.RESTRICTED_SECURITY_ADMIN.toString();        }        if (role.equals(Role.SYSTEM_ADMIN.toString())) {          role=Role.RESTRICTED_SYSTEM_ADMIN.toString();        }      }      _logger.debug("Adding role {} for user {} from local map",role,user.getName());      user.addRole(role);    }  }}  }
class C{  public static SailRepository createRepository(final Properties props,final Option... args){  return createRepository(props,null,args);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.337 -0400",hash_original_method="182A6C4ED1D1E19AB9569E928EB756A5",hash_generated_method="271C1670CF8BC6153F082F32F6322B9F") public CharSequenceReader(CharSequence charSequence){  this.charSequence=charSequence != null ? charSequence : "";}  }
class C{  public boolean isApplyBackgroundColor(){  return mApplyBackgroundColor;}  }
class C{  public TileEntityEnergyCube(){  super("EnergyCube",0);  inventory=new ItemStack[2];  controlType=RedstoneControl.DISABLED;}  }
class C{  public DefaultJavaMethod(JavaClass returns,String name){  this.returns=returns;  setName(name);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.IF__IF_FALSE:    setIfFalse((Expression)null);  return;}super.eUnset(featureID);}  }
class C{  public void test1() throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00");  setDateFactory("2013-07-10 20:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  CustomerData customerData=registerCustomer(supplierData);  VOServiceDetails srv1=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"srv1");  VOServiceDetails srv2=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"srv2");  updateOperatorRevenueShare(10.0D,srv1.getKey());  updateOperatorRevenueShare(20.0D,srv2.getKey());  VOSubscriptionDetails subscr=subscribe(customerData.getAdminUser(),"subscr1",srv1,"2013-08-01 12:00:00","ADMIN");  subscribe(customerData.getAdminUser(),"subscr2",srv2,"2013-08-06 16:00:00","ADMIN");  VOServiceDetails upgrService=createAndRegisterCompatibleService(supplierData,TestPriceModel.EXAMPLE_PRORATA_MONTH_ROLES,srv1,"srv1_upgr");  updateOperatorRevenueShare(15.0D,upgrService.getKey());  upgrade(customerData.getAdminUser(),subscr,upgrService,"2013-08-08 15:00:00");  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("test1",new TestData(supplierData));}  }
class C{  private void parseEntityDeclaration() throws IOException {  int type=GENERAL;  skipSpace();  if (ch == '%') {    ch=in.read();    type=PARAMETER;    skipSpace();  }  if (ch == '#') {    addString('#');    ch=in.read();  }  if (!parseIdentifier(false)) {    error("expected","identifier");    return;  }  String nm=getString(0);  skipParameterSpace();  if (parseIdentifier(false)) {    String tnm=getString(0);    int t=Entity.name2type(tnm);    if (t == 0) {      error("invalid.arg","entity type",tnm);    } else {      type|=t;    }    skipParameterSpace();  }  if ((ch != '"') && (ch != '\'')) {    error("expected","entity value");    skipParameterSpace();    if (ch == '>') {      ch=in.read();    }    return;  }  int term=ch;  ch=in.read();  while ((ch != -1) && (ch != term)) {    if (ch == '&') {      parseEntityReference();    } else {      addString(ch & 0xFF);      ch=in.read();    }  }  if (ch == term) {    ch=in.read();  }  if (in.replace == 0) {    char data[]=getChars(0);    dtd.defineEntity(nm,type,data);  } else {    strpos=0;  }  skipParameterSpace();  expect('>');}  }
class C{  public void run(AdjacencyMatrix<?> y,int[] sources,int[] targets){  int n=y.getVertexCount();  vertexCloseness=new double[n];  Arrays.fill(vertexCloseness,Double.POSITIVE_INFINITY);  vertexBetweenness=new double[n];  edgeBetweenness=new TIntDoubleHashMap[n];  diameter=0;  radius=Integer.MAX_VALUE;  if (dijkstraFactory == null)   dijkstraFactory=new DijkstraFactory();  List<CentralityThread> threads=new ArrayList<CentralityThread>();  int size=(int)Math.floor(sources.length / (double)numThreads);  int i_start=0;  int i_stop=size;  for (int i=0; i < numThreads - 1; i++) {    int[] subSources=Arrays.copyOfRange(sources,i_start,i_stop);    threads.add(new CentralityThread(y,subSources,targets,dijkstraFactory,calcBetweenness));    i_start=i_stop;    i_stop+=size;  }  int[] subSources=Arrays.copyOfRange(sources,i_start,sources.length);  threads.add(new CentralityThread(y,subSources,targets,dijkstraFactory,calcBetweenness));  for (  CentralityThread thread : threads) {    thread.start();  }  for (  CentralityThread thread : threads) {    try {      thread.join();    } catch (    InterruptedException e) {      e.printStackTrace();    }  }  apl=new DescriptiveStatistics();  double aplSum=0;  double cnt=0;  for (  CentralityThread thread : threads) {    if (calcAPLDistribution) {      for (int i=0; i < thread.pathLengths.size(); i++) {        apl.addValue(thread.pathLengths.get(i));      }    } else {      for (int i=0; i < thread.pathLengths.size(); i++) {        aplSum+=thread.pathLengths.get(i);      }    }    cnt++;    for (int i=0; i < n; i++) {      vertexCloseness[i]=Math.min(vertexCloseness[i],thread.vertexCloseness[i]);      vertexBetweenness[i]+=thread.vertexBetweenness[i];      if (thread.edgeBetweenness[i] != null) {        TIntDoubleIterator it=thread.edgeBetweenness[i].iterator();        for (int j=0; j < thread.edgeBetweenness[i].size(); j++) {          it.advance();          if (edgeBetweenness[i] == null)           edgeBetweenness[i]=new TIntDoubleHashMap();          edgeBetweenness[i].adjustOrPutValue(it.key(),it.value(),it.value());          if (edgeBetweenness[it.key()] == null)           edgeBetweenness[it.key()]=new TIntDoubleHashMap();          edgeBetweenness[it.key()].adjustOrPutValue(i,it.value(),it.value());        }      }      diameter=Math.max(diameter,thread.diameter);      radius=Math.min(radius,thread.radius);    }  }  meanVertexCloseness=StatUtils.mean(vertexCloseness);  if (!calcAPLDistribution)   apl.addValue(aplSum / cnt);  double sum=0;  for (int i=0; i < y.getVertexCount(); i++)   sum+=vertexBetweenness[i];  meanVertexBetweenness=sum / (double)y.getVertexCount();  sum=0;  double count=0;  for (int i=0; i < n; i++) {    if (edgeBetweenness[i] != null) {      TIntDoubleIterator it=edgeBetweenness[i].iterator();      for (int k=0; k < edgeBetweenness[i].size(); k++) {        it.advance();        sum+=it.value();        count++;      }    }  }  meanEdgeBetweenness=sum / count;}  }
class C{  public int next(){  int node=_currentNode;  if (DTM.NULL != node)   _currentNode=getNextNamespaceNode(_startNode,node,true);  return returnNode(node);}  }
class C{  public void selectItem(T entry){  selectableControlList.clearSelections();  List<C> items=selectableControlList.getItems();  int i=0;  for (; i < displayElements.size(); i++) {    if (displayElements.get(i).equals(entry)) {      items.get(i).setSelected(true);      break;    }  }  if (i < displayElements.size()) {    Rectangle bounds=((Control)items.get(i)).getBounds();    Point origin=selectableControlList.getOrigin();    origin.y=Math.max(0,bounds.y);    selectableControlList.setOrigin(origin);    fireSelectionChangeEvent();  }}  }
class C{  @Override public boolean isClosed(){  return closed;}  }
class C{  public static final Integer extractIplIdentitySlaveDevice(LocoNetMessage m){  return m.getElement(6);}  }
class C{  @Override public PathImpl schemeWalk(String userPath,Map<String,Object> attributes,String filePath,int offset){  String canonicalPath=filePath;  if (offset < filePath.length() && filePath.charAt(offset) == '/') {  } else {    canonicalPath=normalizePath(_pathname,filePath,offset,_separatorChar);  }  return fsWalk(userPath,attributes,canonicalPath);}  }
class C{  public void reset() throws IOException, InterruptedException {  try {    bufferedInput.reset();    offset=markOffset;  } catch (  IOException e) {    this.seek(markOffset);  }  markOffset=-1;}  }
class C{  private void saveReview(){  EditReviewHolder review=getReview();  String comments=review.mComments.getText().toString().trim();  ContentValues vals=new ContentValues(4);  vals.put(Reviews.COMMENTS,comments);  vals.put(Reviews.RATING,review.mRatings.getSelectedItemPosition() + 1);  String restaurantId=String.valueOf(mRestaurantId);  if (mReviewId == 0) {    vals.put(Reviews.RESTAURANT_ID,mRestaurantId);    vals.put(Reviews.TYPE_ID,mTypeId);    cr().insert(Reviews.CONTENT_URI,vals);    cr().call(AUTHORITY_URI,CALL_UPDATE_RESTAURANT_LAST_VISIT,restaurantId,null);    event("review","add","length",comments.length());  } else {    vals.put(Reviews.DIRTY,1);    cr().update(ContentUris.withAppendedId(Reviews.CONTENT_URI,mReviewId),vals,null,null);    event("review","update","length",comments.length());  }  cr().call(AUTHORITY_URI,CALL_UPDATE_RESTAURANT_RATING,restaurantId,null);}  }
class C{  void old(){  mYoung=false;}  }
class C{  protected LongTermCredential createLongTermCredential(StunCandidateHarvest harvest,byte[] realm){  return null;}  }
class C{  private <T>T wrapExceptions(Callable<T> callable) throws TransientKinesisException {  try {    return callable.call();  } catch (  ExpiredIteratorException e) {    throw e;  }catch (  LimitExceededException|ProvisionedThroughputExceededException e) {    throw new TransientKinesisException("Too many requests to Kinesis. Wait some time and retry.",e);  }catch (  AmazonServiceException e) {    if (e.getErrorType() == AmazonServiceException.ErrorType.Service) {      throw new TransientKinesisException("Kinesis backend failed. Wait some time and retry.",e);    }    throw new RuntimeException("Kinesis client side failure",e);  }catch (  Exception e) {    throw new RuntimeException("Unknown kinesis failure, when trying to reach kinesis",e);  }}  }
class C{  public static void showErrorMsg(final Object... messages){  Sound.beepOnError();  JOptionPane.showMessageDialog(Env.CURRENT_GUI_FRAME.get(),new Object[]{messages," ",linkForAction("View Logs...",Actions.ABOUT_LOGS)},"Error!",JOptionPane.ERROR_MESSAGE);}  }
class C{  public Mall(){  super();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case StextPackage.STATE_SPECIFICATION__SCOPE:    return basicSetScope(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static int runClasses(int verbosity,Class<?>... classes){  Result r=JUnitCore.runClasses(classes);  int count=r.getRunCount();  int numFailed=r.getFailureCount();  if (verbosity <= Silent)   return numFailed;  System.err.printf("Time: %.3f%n",r.getRunTime() * 0.001);  if (numFailed > 0 && verbosity > Summary) {    System.err.printf("There were %d failures:%n%n",numFailed);    int n;    n=1;    for (    Failure f : r.getFailures()) {      System.err.printf("%d) %s%n",n,f.getTestHeader());      n+=1;      if (verbosity <= TestNames)       continue;      Throwable e;      e=f.getException();      if (e instanceof AssertionError) {        if (e.getMessage() == null)         System.err.println("    Assertion failed"); else {          System.err.printf("    %s%n",e.getMessage());          if (e.getMessage().startsWith("Expected exception:"))           break;        }      } else {        if (e.getCause() != null)         e=e.getCause();        System.err.printf("    %s%n",e);      }      for (      StackTraceElement frame : e.getStackTrace()) {        if (frame.getClassName().startsWith("org.junit."))         continue;        printPosition(frame);        if (isStoppingFrame(frame))         break;      }      System.err.println();    }  }  System.err.printf("Ran %d tests.",count);  if (numFailed == 0)   System.err.println(" All passed."); else   System.err.printf(" %d failed.%n",numFailed);  return numFailed;}  }
class C{  protected boolean isValidFragment(String fragment){  if (fragment == null) {    return true;  }  return isOff(NO_FRAGMENTS);}  }
class C{  public List<JCAnnotation> Annotations(List<Attribute.Compound> attributes){  if (attributes == null)   return List.nil();  ListBuffer<JCAnnotation> result=new ListBuffer<JCAnnotation>();  for (List<Attribute.Compound> i=attributes; i.nonEmpty(); i=i.tail) {    Attribute a=i.head;    result.append(Annotation(a));  }  return result.toList();}  }
class C{  public void clear(){  mItems.clear();  notifyDataSetChanged();}  }
class C{  public DenseObjectMatrix2D(Object[][] values){  this(values.length,values.length == 0 ? 0 : values[0].length);  assign(values);}  }
class C{  private static void add(int[] n1,int[] n2,int[] sum){  int b=n1.length - 1;  int carry=0;  while (b >= 0) {    int s=n1[b] + n2[b] + carry;    sum[b + 1]=s % 10;    if (s > 9) {      carry=1;    } else {      carry=0;    }    b--;  }  sum[0]=carry;}  }
class C{  public void scale(double sx,double sy,double sz){  Transform3D other=new Transform3D();  other.setScale(new Vector3d(sx,sy,sz));  transform(other);}  }
class C{  public NamespaceSupport2(){  reset();}  }
class C{  public StatusNotification(String title,Status status,DisplayMode displayMode,NotificationListener listener){  super(title);  this.status=status;  this.displayMode=displayMode;  this.listener=listener;}  }
class C{  public void considerNames(String[] classNames){  if (classNames != null) {    for (    String className : classNames) {      considerName(className);    }  }}  }
class C{  public static final long parseLongDecSubstring(String s) throws NumberFormatException {  if (s == null)   throw new NumberFormatException(s);  return parseLongDecSubstring(s,0,s.length());}  }
class C{  public static long prefixCodedToLong(final BytesRef val){  long sortableBits=0L;  for (int i=val.offset + 1, limit=val.offset + val.length; i < limit; i++) {    sortableBits<<=7;    final byte b=val.bytes[i];    if (b < 0) {      throw new NumberFormatException("Invalid prefixCoded numerical value representation (byte " + Integer.toHexString(b & 0xff) + " at position "+ (i - val.offset)+ " is invalid)");    }    sortableBits|=b;  }  return (sortableBits << getPrefixCodedLongShift(val)) ^ 0x8000000000000000L;}  }
class C{  public CCachedTagCriterium(final boolean any,final CTag tag){  m_any=any;  m_tag=tag;}  }
class C{  public static boolean isCorrectGuess(char[] word,char[] blanks,char guess){  boolean correct=false;  int message=2;  for (int i=0; i < word.length; i++) {    if (word[i] == guess) {      correct=true;      if (blanks[i] == guess)       message=1; else {        blanks[i]=guess;        message=0;      }    }  }  if (message > 0)   print(message,guess);  return correct;}  }
class C{  public static void putPostAuthorizationAttributesIntoScope(final Map attributes,final MutableAttributeMap context){  context.put("postAuthorizationAttributes",attributes);}  }
class C{  public MimAdjacencySearch(Graph graph,IndependenceTest ind,IKnowledge knowledge,List<Node> latents){  this.graph=graph;  this.ind=ind;  this.knowledge=knowledge;  this.latents=latents;}  }
class C{  private Long[] findPrimesInArray0(Long[] input){  System.out.println(">>>");  System.out.println("Find primes in array: " + Arrays.asList(input));  System.out.println(">>>");  Collection<Long> res=new ArrayList<>();  for (  Long val : input) {    Long divisor=checkPrime(val,2,val);    if (divisor == null)     res.add(val);  }  return res.toArray(new Long[res.size()]);}  }
class C{  private void goToInfo(Offer selectedOffer,Context offerContext){  String offerTitle=selectedOffer.getTitle();  String termsCond=selectedOffer.getTermsConditions();  Intent intent=new Intent(offerContext,TermsConditionsActivity.class);  intent.putExtra(TermsConditionsActivity.OFFER_TITLE,offerTitle);  intent.putExtra(TermsConditionsActivity.OFFER_TERMS_CONDITIONS,termsCond);  offerContext.startActivity(intent);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_DocType_ID")) {      p_C_DocType_ID=((BigDecimal)para[i].getParameter()).intValue();      m_docType=new MDocType(getCtx(),p_C_DocType_ID,get_TrxName());    } else     if (name.equals("DatePromised")) {      p_DatePromised=(Timestamp)para[i].getParameter();    } else     if (name.equals("IsTest"))     p_IsTest="Y".equals(para[i].getParameter()); else     if (m_docType.getDocBaseType().equals(MDocType.DOCBASETYPE_DistributionOrder) & name.equals("M_Warehouse_ID"))     p_M_Warehouse_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (m_docType.getDocBaseType().equals(MDocType.DOCBASETYPE_DistributionOrder) & name.equals("ConsolidateDocument"))     p_ConsolidateDocument="Y".equals((String)para[i].getParameter()); else     if (m_docType.getDocBaseType().equals(MDocType.DOCBASETYPE_DistributionOrder) & name.equals("M_DistributionList_ID"))     p_M_DistributionList_ID=para[i].getParameterAsInt(); else     if (m_docType.getDocBaseType().equals(MDocType.DOCBASETYPE_DistributionOrder) & name.equals("IsRequiredDRP"))     p_BasedInDamnd="Y".equals((String)para[i].getParameter()); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }  p_M_DistributionRun_ID=getRecord_ID();}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public int indexOfAnyOf(final char[] c){  return indexOfAnyOf(c,0);}  }
class C{  @VisibleForTesting boolean atMaxWatermark(DataflowPipelineJob job,JobMetrics metrics){  boolean hasMaxWatermark=false;  for (  MetricUpdate metric : metrics.getMetrics()) {    if (metric.getName() == null || metric.getName().getName() == null || !metric.getName().getName().endsWith(WATERMARK_METRIC_SUFFIX) || metric.getScalar() == null) {      continue;    }    BigDecimal watermark=(BigDecimal)metric.getScalar();    hasMaxWatermark=watermark.longValue() == MAX_WATERMARK_VALUE;    if (!hasMaxWatermark) {      LOG.info("Found a non-max watermark metric {} in job {}",metric.getName().getName(),job.getJobId());      return false;    }  }  if (hasMaxWatermark) {    LOG.info("All watermarks are at max. JobID: {}",job.getJobId());  }  return hasMaxWatermark;}  }
class C{  public MilStd2525ModifierRetriever(String retrieverPath){  super(retrieverPath);}  }
class C{  private TransitStopFacility createStopFacilityFromOsmNode(OsmParser.OsmNode node,String stopPostAreaId){  Id<TransitStopFacility> id=Id.create(node.id,TransitStopFacility.class);  Coord coord=transformation.transform(node.coord);  TransitStopFacility newStopFacility=factory.createTransitStopFacility(id,coord,false);  newStopFacility.setName(node.tags.get(OsmTag.NAME));  if (stopPostAreaId != null) {    newStopFacility.setStopPostAreaId(stopPostAreaId);  }  return newStopFacility;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:22.057 -0500",hash_original_method="409408EC0859D4060DA7CEF5328B7220",hash_generated_method="E546AB87BEEBEDF71AF41D13671F26D0") public AudioStream(InetAddress address) throws SocketException {  super(address);}  }
class C{  public boolean isVisible(){  return mIsVisible;}  }
class C{  public void stop(){  System.out.flush();  System.setOut(out.print);  System.err.flush();  System.setErr(err.print);  output=new String(buff.toByteArray());}  }
class C{  public static String encodedMessage(String message){  return Base64.encodeToString(message.getBytes(),Base64.DEFAULT);}  }
class C{  public static long[] recompressPng(InputStream is,OutputStream os,int clevel,int deflaterStrategy,boolean checkCrc){  try {    IDatChunkWriter idatSt=new IDatChunkWriter(os);    Deflater def=new Deflater(clevel);    def.setStrategy(deflaterStrategy);    CompressorStream cs=new CompressorStreamDeflater(idatSt,8000,Long.MAX_VALUE,def);    ChunkSeqReaderIdatRaw reader=new ChunkSeqReaderIdatRaw(os,cs);    reader.checkCrc=checkCrc;    reader.feedFromInputStream(is);    is.close();    cs.close();    idatSt.close();    os.close();    long inputbytes=reader.getCurReaderDeflatedSet().getBytesIn();    long rawbytes=reader.getCurReaderDeflatedSet().getBytesOut();    long outputbytes=cs.getBytesCompressed();    return new long[]{inputbytes,rawbytes,outputbytes};  } catch (  Exception ex) {    throw new PngjException(ex);  }}  }
class C{  public static void assertNull(String message,Object object){  assertTrue(message,object == null);}  }
class C{  public Session(JVnTextPro textpro){  this.textpro=textpro;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.242 -0400",hash_original_method="7F7D78C5226303C119BFA9695D906BC1",hash_generated_method="7F7D78C5226303C119BFA9695D906BC1") boolean casNext(Node<K,V> cmp,Node<K,V> val){  return UNSAFE.compareAndSwapObject(this,nextOffset,cmp,val);}  }
class C{  public static Object[] convertToStringArray(Object[] params){  Object[] stringParams=new String[params.length];  for (int i=0; i < params.length; i++) {    if (params[i] != null) {      stringParams[i]=params[i].toString();    }  }  return stringParams;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.789 -0500",hash_original_method="013647E32C485C8E11074DEB96ED8B2D",hash_generated_method="7E29A0B3CD01F381409D46FE78A1FB1B") public String localName(){  return theType.localName();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int length(){  return this.map.size();}  }
class C{  public void push(final V value) throws IndexOutOfBoundsException {  if (top + locals >= values.length) {    throw new IndexOutOfBoundsException("Insufficient maximum stack size.");  }  values[top++ + locals]=value;}  }
class C{  public String toString(){  return getName();}  }
class C{  public long startRead(){  return DistributionStats.getStatTime();}  }
class C{  public static void load(final AbstractSQLProvider provider,final INaviView view,final List<INaviViewNode> nodes) throws CPartialLoadException, CouldntLoadDataException {  Preconditions.checkNotNull(provider,"IE02510: provider argument can not be null");  Preconditions.checkNotNull(view,"IE02511: view argument can not be null");  Preconditions.checkNotNull(nodes,"IE02512: nodes argument can not be null");  final String query="SELECT nodes.view_id, nodes.id, functions.module_id, " + " function, fnodes.comment_id as local_comment, x, y, width, height, " + " color, selected, visible FROM " + CTableNames.NODES_TABLE + " AS nodes JOIN "+ CTableNames.FUNCTION_NODES_TABLE+ " AS fnodes "+ " ON nodes.id = fnodes.node_id JOIN "+ CTableNames.FUNCTIONS_TABLE+ " AS functions ON functions.address = fnodes.function "+ " AND functions.module_id = fnodes.module_id  WHERE view_id = ?";  final Map<Integer,INaviFunctionNode> commentIdToFunctionNode=new HashMap<Integer,INaviFunctionNode>();  try {    final PreparedStatement statement=provider.getConnection().getConnection().prepareStatement(query);    statement.setInt(1,view.getConfiguration().getId());    final ResultSet resultSet=statement.executeQuery();    try {      while (resultSet.next()) {        final int moduleId=resultSet.getInt("module_id");        final INaviModule module=provider.findModule(moduleId);        if (!module.isLoaded()) {          try {            module.load();          } catch (          final CouldntLoadDataException e) {            throw new CPartialLoadException("E00064: The view could not be loaded because not all modules that form the view are loaded",module);          }catch (          final LoadCancelledException e) {            throw new CPartialLoadException("E00065: The view could not be loaded because not all modules that form the view are loaded",module);          }        }        final IAddress address=PostgreSQLHelpers.loadAddress(resultSet,"function");        final INaviFunction function=module.getContent().getFunctionContainer().getFunction(address);        final int nodeId=resultSet.getInt("id");        Integer commentId=resultSet.getInt("local_comment");        if (resultSet.wasNull()) {          commentId=null;        }        final double posX=resultSet.getDouble("x");        final double posY=resultSet.getDouble("y");        final double width=resultSet.getDouble("width");        final double height=resultSet.getDouble("height");        final Color color=new Color(resultSet.getInt("color"));        final boolean selected=resultSet.getBoolean("selected");        final boolean visible=resultSet.getBoolean("visible");        final INaviFunctionNode functionNode=new CFunctionNode(nodeId,function,posX,posY,width,height,color,selected,visible,null,new HashSet<CTag>(),provider);        nodes.add(functionNode);        if (commentId != null) {          commentIdToFunctionNode.put(commentId,functionNode);        }      }    }  finally {      resultSet.close();    }    if (!commentIdToFunctionNode.isEmpty()) {      final HashMap<Integer,ArrayList<IComment>> commentIdsToComments=PostgreSQLCommentFunctions.loadMultipleCommentsById(provider,commentIdToFunctionNode.keySet());      for (      final Entry<Integer,ArrayList<IComment>> commentIdToComment : commentIdsToComments.entrySet()) {        commentIdToFunctionNode.get(commentIdToComment.getKey()).initializeLocalFunctionComment(commentIdToComment.getValue());      }    }  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }}  }
class C{  @NonNull public Builder fromResponseJsonString(@NonNull String jsonStr) throws JSONException {  checkNotEmpty(jsonStr,"json cannot be null or empty");  return fromResponseJson(new JSONObject(jsonStr));}  }
class C{  public short toImaginary(){  return _imag;}  }
class C{  @Override public SpeechData copy(){  return this;}  }
class C{  public int alloc(final int size,final IAllocationContext context){  if (size > m_maxFixedAlloc) {    throw new IllegalArgumentException("Allocation size to big: " + size + " > "+ m_maxFixedAlloc);  }  m_allocationWriteLock.lock();  try {    checkContext(context);    try {      final FixedAllocator allocator;      final int i=fixedAllocatorIndex(size);      if (context != null && context.isIsolated()) {        allocator=getContextAllocation(context).getFreeFixed(i);        if (allocator.checkBlock0()) {          if (log.isInfoEnabled())           log.info("Adding new shadowed allocator, index: " + allocator.getIndex() + ", diskAddr: "+ allocator.getDiskAddr());          addToCommit(allocator);        }      } else {        final int block=64 * m_allocSizes[i];        m_spareAllocation+=(block - size);        final ArrayList<FixedAllocator> list=m_freeFixed[i];        if (list.size() == 0) {          final FixedAllocator candidate;          if (size < this.cSmallSlot) {            candidate=findAllocator(block);          } else {            candidate=null;          }          if (candidate != null) {            candidate.addToFreeList();            allocator=candidate;          } else {            allocator=new FixedAllocator(this,block);            allocator.setFreeList(list);            allocator.setIndex(m_allocs.size());            if (log.isTraceEnabled())             log.trace("New FixedAllocator for " + block);            m_allocs.add(allocator);            if (m_storageStats != null) {              m_storageStats.register(allocator,true);            }          }          if (allocator.checkBlock0()) {            addToCommit(allocator);          }        } else {          if (log.isDebugEnabled()) {            int tsti=0;            final Iterator<FixedAllocator> allocs=list.iterator();            while (allocs.hasNext()) {              final Allocator tstAlloc=allocs.next();              if (!tstAlloc.hasFree()) {                throw new IllegalStateException("Free list contains full allocator, " + tsti + " of "+ list.size());              }              tsti++;            }          }          allocator=list.get(0);        }      }      final int addr=allocator.alloc(this,size,context);      if (addr == 0) {        throw new IllegalStateException("Free Allocator unable to allocate address: " + allocator.getSummaryStats());      }      if (allocator.isUnlocked()) {        addToCommit(allocator);      }      m_recentAlloc=true;      final long pa=physicalAddress(addr);      if (pa == 0L) {        throw new IllegalStateException("No physical address found for " + addr);      }      m_allocations++;      m_nativeAllocBytes+=size;      return addr;    } catch (    Throwable t) {      log.error(t,t);      throw new RuntimeException(t);    }  }  finally {    m_allocationWriteLock.unlock();  }}  }
class C{  public static void deleteTagSubTree(final JFrame parent,final ITagManager tagManager,final ITreeNode<CTag> tag){  if (CMessageBox.showYesNoQuestion(parent,String.format("Do you really want to convert delete the node tag '%s' and all of its children?",tag.getObject().getName())) == JOptionPane.YES_OPTION) {    try {      tagManager.deleteTagSubTree(tag);    } catch (    final CouldntDeleteException e) {      CUtilityFunctions.logException(e);      final String innerMessage="E00125: " + "Could not delete tags";      final String innerDescription=CUtilityFunctions.createDescription(String.format("The tag '%s' and its children could not be deleted.",tag.getObject().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The tag and its children still exist."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,e);    }  }}  }
class C{  public void testDelete4() throws SQLException {  DatabaseCreator.fillFKCascadeTable(conn);  statement.execute("DELETE FROM " + DatabaseCreator.PARENT_TABLE + " WHERE id = 3;");}  }
class C{  public void throwException(){  mv.visitInsn(Opcodes.ATHROW);}  }
class C{  public String suffixStdDevTipText(){  return "The suffix for the 'stddev' statistic.";}  }
class C{  protected void appendTextString(String str){  appendTextString(str.getBytes());}  }
class C{  @Override public synchronized void flush(){  if (writer != null) {    try {      writer.flush();    } catch (    Exception ex) {      reportError(null,ex,ErrorManager.FLUSH_FAILURE);    }  }}  }
class C{  public int count(){  return m_divs.count();}  }
class C{  public void testRedeployPrivateMode() throws Exception {  depMode=DeploymentMode.PRIVATE;  processTest(true,false);}  }
class C{  public static void validateSupportingDeviceStructure(String deviceName,URI vplexUri,DbClient dbClient) throws VPlexApiException {  VPlexApiClient client=null;  try {    VPlexApiFactory vplexApiFactory=VPlexApiFactory.getInstance();    client=VPlexControllerUtils.getVPlexAPIClient(vplexApiFactory,vplexUri,dbClient);  } catch (  URISyntaxException e) {    log.error("cannot load vplex api client",e);  }  if (null != client) {    String drillDownResponse=client.getDrillDownInfoForDevice(deviceName);    if (!VPlexUtil.isDeviceStructureValid(deviceName,drillDownResponse)) {      throw VPlexApiException.exceptions.deviceStructureIsIncompatibleForIngestion(drillDownResponse);    }  } else {    throw VPlexApiException.exceptions.failedToExecuteDrillDownCommand(deviceName,"cannot load vplex api client");  }}  }
class C{  public static boolean isInstanceOf(Object bean,Class<?> targetType){  if (bean == null) {    throw new NullPointerException(Messages.getString("beans.1D"));  }  return targetType == null ? false : targetType.isInstance(bean);}  }
class C{  public boolean isLast(){  return false;}  }
class C{  public boolean validate() throws CoreException {  GradleProjectMarker.INSTANCE.removeMarkerFromResourceRecursively(this.project);  if (!this.settingsFolder.exists()) {    String message=String.format("Missing Gradle project configuration folder: %s",this.settingsFolder.getProjectRelativePath());    GradleProjectMarker.INSTANCE.addMarkerToResource(this.project,message);    return false;  } else   if (!this.preferencesFile.exists()) {    String message=String.format("Missing Gradle project configuration file: %s",this.preferencesFile.getProjectRelativePath());    GradleProjectMarker.INSTANCE.addMarkerToResource(this.project,message);    return false;  } else {    try {      CorePlugin.projectConfigurationManager().readProjectConfiguration(this.project);    } catch (    Exception e) {      String message=String.format("Invalid Gradle project configuration file: %s",this.preferencesFile.getProjectRelativePath());      GradleProjectMarker.INSTANCE.addMarkerToResource(this.preferencesFile,message);      return false;    }  }  return true;}  }
class C{  public static EPType fromMethod(Method method){  Class returnType=method.getReturnType();  if (JavaClassHelper.isImplementsInterface(returnType,Collection.class)) {    Class componentType=JavaClassHelper.getGenericReturnType(method,true);    return EPTypeHelper.collectionOfSingleValue(componentType);  }  if (method.getReturnType().isArray()) {    Class componentType=method.getReturnType().getComponentType();    return EPTypeHelper.array(componentType);  }  return EPTypeHelper.singleValue(method.getReturnType());}  }
class C{  private void updateDocumentsAndTriggerCopy(final State current,boolean isEagerCopy){  ImageToImageDatastoreMappingService.State postState=buildImageToImageDatastoreMappingServiceState(current.image,current.destinationDatastore);  Operation createimageToImageDatastoreMappingServicePatch=((CloudStoreHelperProvider)getHost()).getCloudStoreHelper().createPost(ImageToImageDatastoreMappingServiceFactory.SELF_LINK).setBody(postState);  ImageReplicatorService.State replicatorServiceState=buildImageReplicatorServiceState(current.image,current.destinationDatastore);  Operation createImageReplicatorServicePatch=Operation.createPost(UriUtils.buildUri(getHost(),ImageReplicatorServiceFactory.SELF_LINK)).setBody(replicatorServiceState);  Operation adjustReplicationCountPatch=((CloudStoreHelperProvider)getHost()).getCloudStoreHelper().createPatch(ImageServiceFactory.SELF_LINK + "/" + current.image);  ImageService.DatastoreCountRequest adjustSeedingAndReplicationCountRequest=buildAdjustSeedingAndReplicationCountRequest(current,1);  ImageService.DatastoreCountRequest adjustSeedingCountRequest=buildAdjustSeedingCountRequest(current,1);  try {    createimageToImageDatastoreMappingServicePatch.setCompletion(null);    sendRequest(createimageToImageDatastoreMappingServicePatch);    OperationSequence operationSequence=null;    State s=this.buildPatch(TaskState.TaskStage.FINISHED,null,null);    Operation progress=Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(s);    if (isEagerCopy) {      operationSequence=operationSequence.create(createImageReplicatorServicePatch).setCompletion(null);      if (!current.isSelfProgressionDisabled) {        operationSequence.next(progress);      }    } else     if (!current.isSelfProgressionDisabled) {      operationSequence=operationSequence.create(progress);    }    if (operationSequence != null) {      operationSequence.sendWith(this);    }  } catch (  Exception e) {    failTask(e);  }}  }
class C{  public <U extends T,A,B,C>OngoingMatchingC3<T,U,A,B,C> when(DecomposableMatchBuilder3<U,A,B,C> decomposableMatchBuilder){  return new OngoingMatchingC3<>(this,decomposableMatchBuilder.build());}  }
class C{  @Override public QualifiedNameResolver withRelative(int relativeLevel){  myRelativeLevel=relativeLevel;  return this;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 20:{        addToken(Token.PREPROCESSOR);      }case 23:    break;case 2:{    addNullToken();    return firstToken;  }case 24:break;case 21:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 25:break;case 18:{start=zzMarkedPos - 2;yybegin(MLC);}case 26:break;case 4:{addToken(Token.WHITESPACE);}case 27:break;case 14:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 28:break;case 9:{start=zzMarkedPos - 1;yybegin(CHAR);}case 29:break;case 7:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 30:break;case 19:{addToken(Token.RESERVED_WORD);}case 31:break;case 6:{addToken(Token.SEPARATOR);}case 32:break;case 15:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 33:break;case 1:{addToken(Token.IDENTIFIER);}case 34:break;case 22:{addToken(Token.FUNCTION);}case 35:break;case 12:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 36:break;case 17:{addToken(Token.COMMENT_EOL);}case 37:break;case 8:{start=zzMarkedPos - 1;yybegin(STRING);}case 38:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 39:break;case 5:{addToken(Token.OPERATOR);}case 40:break;case 13:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 41:break;case 10:{addToken(Token.ERROR_IDENTIFIER);addNullToken();return firstToken;}case 42:break;case 11:{}case 43:break;case 16:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 44:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case STRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 355:break;case YYINITIAL:{addNullToken();return firstToken;}case 356:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 357:break;case CHAR:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 358:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static void main(String[] args) throws Exception {  System.out.println("SensorsAggregates: Output will be randomly intermittent, be patient!");  DirectProvider tp=new DevelopmentProvider();  Topology topology=tp.newTopology("SensorsReadingAggregates");  TStream<JsonObject> sensors=sensorsAB(topology);  sensors.print();  tp.submit(topology);}  }
class C{  private void saveNestedVariables(){  if (nestedVars != null) {    Iterator<String> iter=nestedVars.iterator();    while (iter.hasNext()) {      String varName=iter.next();      varName=findAlias(varName);      Object obj=invokingJspCtxt.getAttribute(varName);      if (obj != null) {        originalNestedVars.put(varName,obj);      }    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:49.276 -0400",hash_original_method="9EE7DD01E1AB6B0D269DB58A7544C17D",hash_generated_method="BFBDCEA5D01AFD36373F651333FF5A41") private Drawable tileifyIndeterminate(Drawable drawable){  if (drawable instanceof AnimationDrawable) {    AnimationDrawable background=(AnimationDrawable)drawable;    final int N=background.getNumberOfFrames();    AnimationDrawable newBg=new AnimationDrawable();    newBg.setOneShot(background.isOneShot());    for (int i=0; i < N; i++) {      Drawable frame=tileify(background.getFrame(i),true);      frame.setLevel(10000);      newBg.addFrame(frame,background.getDuration(i));    }    newBg.setLevel(10000);    drawable=newBg;  }  return drawable;}  }
class C{  public static void $unzip(String zipFilePath,String destPath) throws IOException {  File destFile=new File(destPath);  if (!destFile.exists()) {    destFile.mkdirs();  }  ZipInputStream zipInputStream=new ZipInputStream(new FileInputStream(zipFilePath));  ZipEntry zipEntry;  String zipEntryName;  while ((zipEntry=zipInputStream.getNextEntry()) != null) {    zipEntryName=zipEntry.getName();    if (zipEntry.isDirectory()) {      File folder=new File(destPath + File.separator + zipEntryName);      folder.mkdirs();    } else {      File file=new File(destPath + File.separator + zipEntryName);      if (file != null && !file.getParentFile().exists()) {        file.getParentFile().mkdirs();      }      file.createNewFile();      FileOutputStream out=new FileOutputStream(file);      int len;      byte[] buffer=new byte[1024];      while ((len=zipInputStream.read(buffer)) > 0) {        out.write(buffer,0,len);        out.flush();      }      out.close();    }  }  zipInputStream.close();}  }
class C{  protected N4SetterDeclarationImpl(){  super();}  }
class C{  public static void log(String msg){  if (DEBUG)   System.out.println("XMLUtil:" + msg);}  }
class C{  private void nextPacket() throws IOException {  int off=0;  int remaining=7;  do {    int count=baseStream.read(header,off,remaining);    if (count <= 0) {      throw new EOFException("unexpected end of stream, read " + (7 - remaining) + " bytes from "+ 7);    }    remaining-=count;    off+=count;  } while (remaining > 0);  int compressedLength=(header[0] & 0xff) + ((header[1] & 0xff) << 8) + ((header[2] & 0xff) << 16);  lastPacketSeq=header[3] & 0xff;  int decompressedLength=(header[4] & 0xff) + ((header[5] & 0xff) << 8) + ((header[6] & 0xff) << 16);  if (decompressedLength != 0) {    doDecompress=true;    remainingBytes+=decompressedLength;    byte[] compressedBuffer=new byte[compressedLength];    byte[] decompressedBuffer=new byte[decompressedLength];    off=0;    remaining=compressedBuffer.length;    do {      int count=baseStream.read(compressedBuffer,off,remaining);      if (count <= 0) {        throw new EOFException("unexpected end of stream, read " + (7 - remaining) + " bytes from "+ 7);      }      remaining-=count;      off+=count;    } while (remaining > 0);    Inflater inflater=new Inflater();    inflater.setInput(compressedBuffer);    try {      int actualUncompressBytes=inflater.inflate(decompressedBuffer);      if (actualUncompressBytes != decompressedLength) {        throw new IOException("Invalid stream length after decompression " + actualUncompressBytes + ",expected "+ decompressedLength);      }    } catch (    DataFormatException dfe) {      throw new IOException(dfe);    }    inflater.end();    decompressedByteStream=new ByteArrayInputStream(decompressedBuffer);  } else {    doDecompress=false;    remainingBytes+=compressedLength;    decompressedByteStream=null;  }  logger.trace("read compress packet seq:" + lastPacketSeq + " length:"+ remainingBytes);}  }
class C{  public boolean hasObserve(){  return observe != null;}  }
class C{  public void paintComponent(Graphics g){  super.paintComponent(g);  paint((Graphics2D)g);}  }
class C{  @Override public boolean hasFocus(){  return this.isEnabled();}  }
class C{  public List<BNode> removeNodes(Collection<String> valueNodeIds){  List<BNode> removed=new ArrayList<BNode>();  for (  String id : new ArrayList<String>(valueNodeIds)) {    BNode n=removeNode(id);    removed.add(n);  }  return removed;}  }
class C{  public static void share(final ShareContent shareContent,final FacebookCallback<Sharer.Result> callback){  new ShareApi(shareContent).share(callback);}  }
class C{  public boolean hasNumberOfRows(){  return getNumberOfRows() != null;}  }
class C{  private static boolean usePipelinedHashJoin(AST2BOpContext ctx,QueryNodeBase node){  final String queryHint=node.getQueryHint(QueryHints.PIPELINED_HASH_JOIN);  if (queryHint != null && !queryHint.isEmpty()) {    return Boolean.valueOf(queryHint);  }  if (ctx.pipelinedHashJoins) {    return true;  }  final ASTContainer container=ctx.astContainer;  final QueryRoot queryRoot=container.getOptimizedAST();  final SliceNode slice=queryRoot.getSlice();  if (slice == null || slice.getLimit() == SliceNode.Annotations.DEFAULT_LIMIT) {    return false;  }  final OrderByNode orderBy=queryRoot.getOrderBy();  boolean noOrderBy=orderBy == null || orderBy.isEmpty();  return noOrderBy;}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void validateState(State current){  ValidationUtils.validateState(current);}  }
class C{  public static String loggerNameToTag(String loggerName){  if (loggerName == null) {    return "null";  }  int length=loggerName.length();  if (length <= 23) {    return loggerName;  }  int lastPeriod=loggerName.lastIndexOf(".");  return length - (lastPeriod + 1) <= 23 ? loggerName.substring(lastPeriod + 1) : loggerName.substring(loggerName.length() - 23);}  }
class C{  public void requestHideToolTip(){  initToolTip();}  }
class C{  public void addParameter(String name,Distribution dist){  Parameter param=getParameterByName(name);  if (param instanceof DoubleParameter)   addParameter((DoubleParameter)param,dist); else   if (param instanceof IntParameter)   addParameter((IntParameter)param,dist); else   throw new IllegalArgumentException("Parameter " + name + " is not for double or int values");}  }
class C{  private void sendPong(final String id){  final Map<String,Object> data=new HashMap<String,Object>();  data.put(Protocol.Field.MESSAGE,Protocol.Message.PONG);  if (id != null) {    data.put(Protocol.Field.ID,id);  }  send("",data);}  }
class C{  public DnsName(){}  }
class C{  public void cancelSelection(){  returnValue=CANCEL_OPTION;  if (dialog != null) {    dialog.setVisible(false);  }  fireActionPerformed(CANCEL_SELECTION);}  }
class C{  @Override public boolean containsKey(Object key){  return getEntry(key) != null;}  }
class C{  protected boolean isDescendant(int identity){  return (_parent(identity) >= _startNode) || (_startNode == identity);}  }
class C{  public void logTradeEvent(final DBTransaction transaction,String charname,String itemname,int itemid,int quantity,int price,String stats) throws SQLException {  String sql="INSERT INTO trade(charname, itemname, itemid, quantity, price, stats) " + " VALUES ('[charname]', '[itemname]', [itemid], [quantity], [price], '[stats]')";  Map<String,Object> params=new HashMap<String,Object>();  params.put("charname",charname);  params.put("itemname",itemname);  params.put("itemid",itemid);  params.put("quantity",quantity);  params.put("price",price);  params.put("stats",stats);  transaction.execute(sql,params);}  }
class C{  public static void generate(File dir) throws IOException {  System.out.println("Generating " + FILENAME + " for "+ dir.getAbsolutePath());  for (  File f : dir.listFiles()) {    if (f.isDirectory()) {      generate(f);    }  }  write(read(dir),new FileOutputStream(new File(dir,FILENAME)));}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void update(@Nullable Entry<? extends K,? extends V> val,StoreOperation storeOperation,ValueStatus valStatus){  this.val=val;  this.storeOperation=storeOperation;  this.valStatus=valStatus;}  }
class C{  @SuppressWarnings("WeakerAccess") public static SwingTerminalFontConfiguration newInstance(Font... fontsInOrderOfPriority){  return new SwingTerminalFontConfiguration(true,BoldMode.EVERYTHING_BUT_SYMBOLS,fontsInOrderOfPriority);}  }
class C{  @Override public void draw(Canvas canvas,int x,int y,int width,int height,Paint paint){  paint.setAntiAlias(mRenderer.isAntialiasing());  paint.setStyle(Style.FILL);  paint.setTextSize(mRenderer.getLabelsTextSize());  int legendSize=getLegendSize(mRenderer,height / 5,0);  int left=x;  int top=y;  int right=x + width;  int cLength=mDataset.getCategoriesCount();  String[] categories=new String[cLength];  for (int category=0; category < cLength; category++) {    categories[category]=mDataset.getCategory(category);  }  if (mRenderer.isFitLegend()) {    legendSize=drawLegend(canvas,mRenderer,categories,left,right,y,width,height,legendSize,paint,true);  }  int bottom=y + height - legendSize;  drawBackground(mRenderer,canvas,x,y,width,height,paint,false,DefaultRenderer.NO_COLOR);  mStep=SHAPE_WIDTH * 3 / 4;  int mRadius=Math.min(Math.abs(right - left),Math.abs(bottom - top));  double rCoef=0.35 * mRenderer.getScale();  double decCoef=0.2 / cLength;  int radius=(int)(mRadius * rCoef);  if (mCenterX == NO_VALUE) {    mCenterX=(left + right) / 2;  }  if (mCenterY == NO_VALUE) {    mCenterY=(bottom + top) / 2;  }  float shortRadius=radius * 0.9f;  float longRadius=radius * 1.1f;  List<RectF> prevLabelsBounds=new ArrayList<RectF>();  for (int category=0; category < cLength; category++) {    int sLength=mDataset.getItemCount(category);    double total=0;    String[] titles=new String[sLength];    for (int i=0; i < sLength; i++) {      total+=mDataset.getValues(category)[i];      titles[i]=mDataset.getTitles(category)[i];    }    float currentAngle=mRenderer.getStartAngle();    RectF oval=new RectF(mCenterX - radius,mCenterY - radius,mCenterX + radius,mCenterY + radius);    for (int i=0; i < sLength; i++) {      paint.setColor(mRenderer.getSeriesRendererAt(i).getColor());      float value=(float)mDataset.getValues(category)[i];      float angle=(float)(value / total * 360);      canvas.drawArc(oval,currentAngle,angle,true,paint);      drawLabel(canvas,mDataset.getTitles(category)[i],mRenderer,prevLabelsBounds,mCenterX,mCenterY,shortRadius,longRadius,currentAngle,angle,left,right,mRenderer.getLabelsColor(),paint,true,false);      currentAngle+=angle;    }    radius-=(int)mRadius * decCoef;    shortRadius-=mRadius * decCoef - 2;    if (mRenderer.getBackgroundColor() != 0) {      paint.setColor(mRenderer.getBackgroundColor());    } else {      paint.setColor(Color.WHITE);    }    paint.setStyle(Style.FILL);    oval=new RectF(mCenterX - radius,mCenterY - radius,mCenterX + radius,mCenterY + radius);    canvas.drawArc(oval,0,360,true,paint);    radius-=1;  }  prevLabelsBounds.clear();  drawLegend(canvas,mRenderer,categories,left,right,y,width,height,legendSize,paint,false);  drawTitle(canvas,x,y,width,paint);}  }
class C{  public void sendData(byte[][] data,String targetHostName,int targetPort,long interval){  sendData(data,0,data.length,targetHostName,targetPort,interval);}  }
class C{  public void clearValues(){  cWalk.setSelectedIndex(0);  tWalk.setText("");  cJump.setSelectedIndex(0);  tJump.setText("");  cArmor.setSelectedIndex(0);  tblWeapons.clearSelection();  tblEquipment.clearSelection();  txtEqExp.setText("");  cbxEnableArmorSearch.setSelected(false);  cbxEnableCockpitSearch.setSelected(false);  cbxEnableInternalsSearch.setSelected(false);  cboArmorType.setSelectedIndex(0);  cboCockpitType.setSelectedIndex(0);  cboInternalsType.setSelectedIndex(0);  mechFilter=null;  filterToks.clear();  btnBack.setEnabled(false);  disableOperationButtons();  enableSelectionButtons();}  }
class C{  public void addLineNumber(char startPc,char lineNumber){  if (lineDebugInfo) {    if (lineInfo.nonEmpty() && lineInfo.head[0] == startPc)     lineInfo=lineInfo.tail;    if (lineInfo.isEmpty() || lineInfo.head[1] != lineNumber)     lineInfo=lineInfo.prepend(new char[]{startPc,lineNumber});  }}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  private static PolicyNodeImpl processPolicyMappings(X509CertImpl currCert,int certIndex,int policyMapping,PolicyNodeImpl rootNode,boolean policiesCritical,Set<PolicyQualifierInfo> anyQuals) throws CertPathValidatorException {  PolicyMappingsExtension polMappingsExt=currCert.getPolicyMappingsExtension();  if (polMappingsExt == null)   return rootNode;  if (debug != null)   debug.println("PolicyChecker.processPolicyMappings() " + "inside policyMapping check");  List<CertificatePolicyMap> maps=null;  try {    maps=polMappingsExt.get(PolicyMappingsExtension.MAP);  } catch (  IOException e) {    if (debug != null) {      debug.println("PolicyChecker.processPolicyMappings() " + "mapping exception");      e.printStackTrace();    }    throw new CertPathValidatorException("Exception while checking " + "mapping",e);  }  boolean childDeleted=false;  for (  CertificatePolicyMap polMap : maps) {    String issuerDomain=polMap.getIssuerIdentifier().getIdentifier().toString();    String subjectDomain=polMap.getSubjectIdentifier().getIdentifier().toString();    if (debug != null) {      debug.println("PolicyChecker.processPolicyMappings() " + "issuerDomain = " + issuerDomain);      debug.println("PolicyChecker.processPolicyMappings() " + "subjectDomain = " + subjectDomain);    }    if (issuerDomain.equals(ANY_POLICY)) {      throw new CertPathValidatorException("encountered an issuerDomainPolicy of ANY_POLICY",null,null,-1,PKIXReason.INVALID_POLICY);    }    if (subjectDomain.equals(ANY_POLICY)) {      throw new CertPathValidatorException("encountered a subjectDomainPolicy of ANY_POLICY",null,null,-1,PKIXReason.INVALID_POLICY);    }    Set<PolicyNodeImpl> validNodes=rootNode.getPolicyNodesValid(certIndex,issuerDomain);    if (!validNodes.isEmpty()) {      for (      PolicyNodeImpl curNode : validNodes) {        if ((policyMapping > 0) || (policyMapping == -1)) {          curNode.addExpectedPolicy(subjectDomain);        } else         if (policyMapping == 0) {          PolicyNodeImpl parentNode=(PolicyNodeImpl)curNode.getParent();          if (debug != null)           debug.println("PolicyChecker.processPolicyMappings" + "() before deleting: policy tree = " + rootNode);          parentNode.deleteChild(curNode);          childDeleted=true;          if (debug != null)           debug.println("PolicyChecker.processPolicyMappings" + "() after deleting: policy tree = " + rootNode);        }      }    } else {      if ((policyMapping > 0) || (policyMapping == -1)) {        Set<PolicyNodeImpl> validAnyNodes=rootNode.getPolicyNodesValid(certIndex,ANY_POLICY);        for (        PolicyNodeImpl curAnyNode : validAnyNodes) {          PolicyNodeImpl curAnyNodeParent=(PolicyNodeImpl)curAnyNode.getParent();          Set<String> expPols=new HashSet<>();          expPols.add(subjectDomain);          PolicyNodeImpl curNode=new PolicyNodeImpl(curAnyNodeParent,issuerDomain,anyQuals,policiesCritical,expPols,true);        }      }    }  }  if (childDeleted) {    rootNode.prune(certIndex);    if (!rootNode.getChildren().hasNext()) {      if (debug != null)       debug.println("setting rootNode to null");      rootNode=null;    }  }  return rootNode;}  }
class C{  protected void syncSelectedCategories(){  ProjectFilterSettings filterSettings=getCurrentProps().getFilterSettings();  for (  Button checkBox : chkEnableBugCategoryList) {    String category=(String)checkBox.getData();    if (checkBox.getSelection()) {      filterSettings.addCategory(category);    } else {      filterSettings.removeCategory(category);    }  }  propertyPage.getVisibleDetectors().clear();}  }
class C{  public boolean equals(Object other){  if (other == this) {    return true;  } else   if (other instanceof TIntArrayList) {    TIntArrayList that=(TIntArrayList)other;    if (that.size() != this.size()) {      return false;    } else {      for (int i=_pos; i-- > 0; ) {        if (this._data[i] != that._data[i]) {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  static boolean pidAlive(String pid){  AutoFile file=new AutoFile(M.e("/proc/"),pid);  if (file != null && file.exists()) {    return true;  }  return false;}  }
class C{  public static ServerLocator createServerLocatorWithHA(final DiscoveryGroupConfiguration groupConfiguration){  return new ServerLocatorImpl(true,groupConfiguration);}  }
class C{  private boolean isUserMappingEmpty(TenantUpdateParam param){  if (param == null || param.getUserMappingChanges() == null) {    return true;  }  List<UserMappingParam> list=param.getUserMappingChanges().getAdd();  if (list != null && !list.isEmpty()) {    return false;  }  list=param.getUserMappingChanges().getRemove();  if (list != null && !list.isEmpty()) {    return false;  }  return true;}  }
class C{  public boolean isAmbiguousTriple(Node x,Node y,Node z){  return getGraph().isAmbiguousTriple(x,y,z);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE;default :return null;}}  }
class C{  public static void registerDynamicTypeConverter(JavaDynamicTypeConverter theConverter){  if (!m_dynConverters.contains(theConverter)) {    m_dynConverters.addElement(theConverter);  }}  }
class C{  public POSFromParse(String parseViewName){  super(ViewNames.POS,new String[]{parseViewName});  this.parseViewName=parseViewName;}  }
class C{  public JMenu(String s){  super(s);}  }
class C{  @Override public double disc(int k){  return Math.pow(base,k);}  }
class C{  public TearDownHql(TestHiveServer testingHiveServer,HqlScript tearDownHql){  this.testingHiveServer=testingHiveServer;  this.tearDownHql=tearDownHql;}  }
class C{  public void union(int x,int y){  if (x < left) {    left=x;  } else   if (x > right) {    right=x;  }  if (y < top) {    top=y;  } else   if (y > bottom) {    bottom=y;  }}  }
class C{  public static String toLanguageString(Locale value){  StringBuffer buf=new StringBuffer(value.getLanguage().toLowerCase());  if (value.getCountry() != null && !value.getCountry().equals(""))   buf.append("-").append(value.getCountry().toLowerCase());  return buf.toString();}  }
class C{  public void toEPLElement(StringWriter writer){  writer.write("*");}  }
class C{  public void renameAttributeAt(int columnIndex,String newName){  ((ArffTableModel)getModel()).renameAttributeAt(columnIndex,newName);}  }
class C{  @Nullable DebugCounterImpl addCounter(@Nonnull DebugCounterImpl counter){  verifyIsRoot();  ArrayList<String> path=new ArrayList<>();  path.add(counter.getModuleName());  for (  String element : counter.getCounterHierarchy().split(QUOTED_SEP)) {    path.add(element);  }  String newCounterName=path.get(path.size() - 1);  CounterNode parent=lookup(path.subList(0,path.size() - 1));  if (parent == null) {    throw new IllegalArgumentException("Missing hierarchy level for " + "counter: " + counter.getModuleName() + " "+ counter.getCounterHierarchy());  }  if (parent.children.containsKey(newCounterName)) {    CounterNode old=parent.children.get(newCounterName);    old.resetHierarchy();    return old.counter;  } else {    CounterNode newNode=new CounterNode(path,counter);    parent.children.put(newCounterName,newNode);    return null;  }}  }
class C{  public void connectionEvent(boolean connected) throws PayloadException, NetworkException, ContactManagerException {  if (sContact == null) {    return;  }  if (connected) {    if (sLogger.isActivated()) {      sLogger.info("Connectivity changed: update content sharing capabilities");    }    requestCapabilities(sContact);  } else {    if (sLogger.isActivated()) {      sLogger.info("Connectivity changed: disable content sharing capabilities");    }    mImsModule.getCapabilityService().resetContactCapabilitiesForContentSharing(sContact);  }}  }
class C{  public SingularValueDecomposition(DoubleMatrix2D Arg){  Property.DEFAULT.checkRectangular(Arg);  double[][] A=Arg.toArray();  m=Arg.rows();  n=Arg.columns();  int nu=Math.min(m,n);  s=new double[Math.min(m + 1,n)];  U=new double[m][nu];  V=new double[n][n];  double[] e=new double[n];  double[] work=new double[m];  boolean wantu=true;  boolean wantv=true;  int nct=Math.min(m - 1,n);  int nrt=Math.max(0,Math.min(n - 2,m));  for (int k=0; k < Math.max(nct,nrt); k++) {    if (k < nct) {      s[k]=0;      for (int i=k; i < m; i++) {        s[k]=Algebra.hypot(s[k],A[i][k]);      }      if (s[k] != 0.0) {        if (A[k][k] < 0.0) {          s[k]=-s[k];        }        for (int i=k; i < m; i++) {          A[i][k]/=s[k];        }        A[k][k]+=1.0;      }      s[k]=-s[k];    }    for (int j=k + 1; j < n; j++) {      if ((k < nct) & (s[k] != 0.0)) {        double t=0;        for (int i=k; i < m; i++) {          t+=A[i][k] * A[i][j];        }        t=-t / A[k][k];        for (int i=k; i < m; i++) {          A[i][j]+=t * A[i][k];        }      }      e[j]=A[k][j];    }    if (wantu & (k < nct)) {      for (int i=k; i < m; i++) {        U[i][k]=A[i][k];      }    }    if (k < nrt) {      e[k]=0;      for (int i=k + 1; i < n; i++) {        e[k]=Algebra.hypot(e[k],e[i]);      }      if (e[k] != 0.0) {        if (e[k + 1] < 0.0) {          e[k]=-e[k];        }        for (int i=k + 1; i < n; i++) {          e[i]/=e[k];        }        e[k + 1]+=1.0;      }      e[k]=-e[k];      if ((k + 1 < m) & (e[k] != 0.0)) {        for (int i=k + 1; i < m; i++) {          work[i]=0.0;        }        for (int j=k + 1; j < n; j++) {          for (int i=k + 1; i < m; i++) {            work[i]+=e[j] * A[i][j];          }        }        for (int j=k + 1; j < n; j++) {          double t=-e[j] / e[k + 1];          for (int i=k + 1; i < m; i++) {            A[i][j]+=t * work[i];          }        }      }      if (wantv) {        for (int i=k + 1; i < n; i++) {          V[i][k]=e[i];        }      }    }  }  int p=Math.min(n,m + 1);  if (nct < n) {    s[nct]=A[nct][nct];  }  if (m < p) {    s[p - 1]=0.0;  }  if (nrt + 1 < p) {    e[nrt]=A[nrt][p - 1];  }  e[p - 1]=0.0;  if (wantu) {    for (int j=nct; j < nu; j++) {      for (int i=0; i < m; i++) {        U[i][j]=0.0;      }      U[j][j]=1.0;    }    for (int k=nct - 1; k >= 0; k--) {      if (s[k] != 0.0) {        for (int j=k + 1; j < nu; j++) {          double t=0;          for (int i=k; i < m; i++) {            t+=U[i][k] * U[i][j];          }          t=-t / U[k][k];          for (int i=k; i < m; i++) {            U[i][j]+=t * U[i][k];          }        }        for (int i=k; i < m; i++) {          U[i][k]=-U[i][k];        }        U[k][k]=1.0 + U[k][k];        for (int i=0; i < k - 1; i++) {          U[i][k]=0.0;        }      } else {        for (int i=0; i < m; i++) {          U[i][k]=0.0;        }        U[k][k]=1.0;      }    }  }  if (wantv) {    for (int k=n - 1; k >= 0; k--) {      if ((k < nrt) & (e[k] != 0.0)) {        for (int j=k + 1; j < nu; j++) {          double t=0;          for (int i=k + 1; i < n; i++) {            t+=V[i][k] * V[i][j];          }          t=-t / V[k + 1][k];          for (int i=k + 1; i < n; i++) {            V[i][j]+=t * V[i][k];          }        }      }      for (int i=0; i < n; i++) {        V[i][k]=0.0;      }      V[k][k]=1.0;    }  }  int pp=p - 1;  int iter=0;  double eps=Math.pow(2.0,-52.0);  while (p > 0) {    int k, kase;    for (k=p - 2; k >= -1; k--) {      if (k == -1) {        break;      }      if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {        e[k]=0.0;        break;      }    }    if (k == p - 2) {      kase=4;    } else {      int ks;      for (ks=p - 1; ks >= k; ks--) {        if (ks == k) {          break;        }        double t=(ks != p ? Math.abs(e[ks]) : 0.) + (ks != k + 1 ? Math.abs(e[ks - 1]) : 0.);        if (Math.abs(s[ks]) <= eps * t) {          s[ks]=0.0;          break;        }      }      if (ks == k) {        kase=3;      } else       if (ks == p - 1) {        kase=1;      } else {        kase=2;        k=ks;      }    }    k++;switch (kase) {case 1:{        double f=e[p - 2];        e[p - 2]=0.0;        for (int j=p - 2; j >= k; j--) {          double t=Algebra.hypot(s[j],f);          double cs=s[j] / t;          double sn=f / t;          s[j]=t;          if (j != k) {            f=-sn * e[j - 1];            e[j - 1]=cs * e[j - 1];          }          if (wantv) {            for (int i=0; i < n; i++) {              t=cs * V[i][j] + sn * V[i][p - 1];              V[i][p - 1]=-sn * V[i][j] + cs * V[i][p - 1];              V[i][j]=t;            }          }        }      }    break;case 2:{    double f=e[k - 1];    e[k - 1]=0.0;    for (int j=k; j < p; j++) {      double t=Algebra.hypot(s[j],f);      double cs=s[j] / t;      double sn=f / t;      s[j]=t;      f=-sn * e[j];      e[j]=cs * e[j];      if (wantu) {        for (int i=0; i < m; i++) {          t=cs * U[i][j] + sn * U[i][k - 1];          U[i][k - 1]=-sn * U[i][j] + cs * U[i][k - 1];          U[i][j]=t;        }      }    }  }break;case 3:{double scale=Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]),Math.abs(s[p - 2])),Math.abs(e[p - 2])),Math.abs(s[k])),Math.abs(e[k]));double sp=s[p - 1] / scale;double spm1=s[p - 2] / scale;double epm1=e[p - 2] / scale;double sk=s[k] / scale;double ek=e[k] / scale;double b=((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2.0;double c=(sp * epm1) * (sp * epm1);double shift=0.0;if ((b != 0.0) | (c != 0.0)) {  shift=Math.sqrt(b * b + c);  if (b < 0.0) {    shift=-shift;  }  shift=c / (b + shift);}double f=(sk + sp) * (sk - sp) + shift;double g=sk * ek;for (int j=k; j < p - 1; j++) {  double t=Algebra.hypot(f,g);  double cs=f / t;  double sn=g / t;  if (j != k) {    e[j - 1]=t;  }  f=cs * s[j] + sn * e[j];  e[j]=cs * e[j] - sn * s[j];  g=sn * s[j + 1];  s[j + 1]=cs * s[j + 1];  if (wantv) {    for (int i=0; i < n; i++) {      t=cs * V[i][j] + sn * V[i][j + 1];      V[i][j + 1]=-sn * V[i][j] + cs * V[i][j + 1];      V[i][j]=t;    }  }  t=Algebra.hypot(f,g);  cs=f / t;  sn=g / t;  s[j]=t;  f=cs * e[j] + sn * s[j + 1];  s[j + 1]=-sn * e[j] + cs * s[j + 1];  g=sn * e[j + 1];  e[j + 1]=cs * e[j + 1];  if (wantu && (j < m - 1)) {    for (int i=0; i < m; i++) {      t=cs * U[i][j] + sn * U[i][j + 1];      U[i][j + 1]=-sn * U[i][j] + cs * U[i][j + 1];      U[i][j]=t;    }  }}e[p - 2]=f;iter=iter + 1;}break;case 4:{if (s[k] <= 0.0) {s[k]=(s[k] < 0.0 ? -s[k] : 0.0);if (wantv) {for (int i=0; i <= pp; i++) {  V[i][k]=-V[i][k];}}}while (k < pp) {if (s[k] >= s[k + 1]) {break;}double t=s[k];s[k]=s[k + 1];s[k + 1]=t;if (wantv && (k < n - 1)) {for (int i=0; i < n; i++) {  t=V[i][k + 1];  V[i][k + 1]=V[i][k];  V[i][k]=t;}}if (wantu && (k < m - 1)) {for (int i=0; i < m; i++) {  t=U[i][k + 1];  U[i][k + 1]=U[i][k];  U[i][k]=t;}}k++;}iter=0;p--;}break;}}}  }
class C{  public static boolean isRedundantSetValue(SettingsCache cache,String name,String value){  if (cache == null)   return false;synchronized (cache) {    Bundle bundle=cache.get(name);    if (bundle == null || bundle == TOO_LARGE_TO_CACHE_MARKER)     return false;    String oldValue=bundle.getPairValue();    if (oldValue == null && value == null)     return true;    if ((oldValue == null) != (value == null))     return false;    return oldValue.equals(value);  }}  }
class C{  public boolean hasYomi(){  return getYomi() != null;}  }
class C{  public static long copyLarge(final Reader input,final Writer output,final char[] buffer) throws IOException {  long count=0;  int n=0;  while (IOUtils.EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public DoubleArraySpliterator(double[] array,int origin,int fence,int additionalCharacteristics){  this.array=array;  this.index=origin;  this.fence=fence;  this.characteristics=additionalCharacteristics | Spliterator.SIZED | Spliterator.SUBSIZED;}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(alg);  sb.append(" ");  if (Options.check("multiline"))   sb.append("(\n\t");  sb.append(timeSigned.getTime() / 1000);  sb.append(" ");  sb.append(fudge);  sb.append(" ");  sb.append(signature.length);  if (Options.check("multiline")) {    sb.append("\n");    sb.append(base64.formatString(signature,64,"\t",false));  } else {    sb.append(" ");    sb.append(base64.toString(signature));  }  sb.append(" ");  sb.append(Rcode.TSIGstring(error));  sb.append(" ");  if (other == null)   sb.append(0); else {    sb.append(other.length);    if (Options.check("multiline"))     sb.append("\n\n\n\t"); else     sb.append(" ");    if (error == Rcode.BADTIME) {      if (other.length != 6) {        sb.append("<invalid BADTIME other data>");      } else {        long time=((long)(other[0] & 0xFF) << 40) + ((long)(other[1] & 0xFF) << 32) + ((other[2] & 0xFF) << 24)+ ((other[3] & 0xFF) << 16)+ ((other[4] & 0xFF) << 8)+ ((other[5] & 0xFF));        sb.append("<server time: ");        sb.append(new Date(time * 1000));        sb.append(">");      }    } else {      sb.append("<");      sb.append(base64.toString(other));      sb.append(">");    }  }  if (Options.check("multiline"))   sb.append(" )");  return sb.toString();}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  out.writeInt(id);}  }
class C{  @TruffleBoundary private static MatchPermutation permuteArguments(ArgumentsSignature signature,ArgumentsSignature formalSignature,RBaseNode callingNode,boolean forNextMethod,IntPredicate isVarSuppliedVarargs,IntFunction<String> errorString,RBuiltinDescriptor builtin){  int varArgIndex=formalSignature.getVarArgIndex();  boolean hasVarArgs=varArgIndex != ArgumentsSignature.NO_VARARG;  int[] resultPermutation=new int[formalSignature.getLength()];  String[] resultSignature=new String[formalSignature.getLength()];  Arrays.fill(resultPermutation,MatchPermutation.UNMATCHED);  Arrays.fill(resultSignature,ArgumentsSignature.UNMATCHED);  boolean[] matchedSuppliedArgs=new boolean[signature.getLength()];  for (int suppliedIndex=0; suppliedIndex < signature.getLength(); suppliedIndex++) {    if (signature.getName(suppliedIndex) == null || signature.getName(suppliedIndex).isEmpty()) {      continue;    }    int formalIndex=findParameterPosition(formalSignature,signature.getName(suppliedIndex),resultPermutation,suppliedIndex,hasVarArgs,callingNode,varArgIndex,forNextMethod,errorString,builtin);    if (formalIndex != MatchPermutation.UNMATCHED) {      resultPermutation[formalIndex]=suppliedIndex;      resultSignature[formalIndex]=signature.getName(suppliedIndex);      matchedSuppliedArgs[suppliedIndex]=true;    }  }  int suppliedIndex=-1;  int regularArgumentCount=hasVarArgs ? varArgIndex : formalSignature.getLength();  outer:   for (int formalIndex=0; formalIndex < regularArgumentCount; formalIndex++) {    if (resultPermutation[formalIndex] == MatchPermutation.UNMATCHED) {      while (true) {        suppliedIndex++;        if (suppliedIndex == signature.getLength()) {          break outer;        }        if (!matchedSuppliedArgs[suppliedIndex]) {          if (forNextMethod) {            break;          }          if (signature.getName(suppliedIndex) == null || signature.getName(suppliedIndex).isEmpty()) {            break;          }        }      }      resultPermutation[formalIndex]=suppliedIndex;      resultSignature[formalIndex]=signature.getName(suppliedIndex);      matchedSuppliedArgs[suppliedIndex]=true;    }  }  if (hasVarArgs) {    int varArgCount=signature.getLength() - cardinality(matchedSuppliedArgs);    int[] varArgsPermutation=new int[varArgCount];    String[] namesArray=new String[varArgCount];    int pos=0;    for (suppliedIndex=0; suppliedIndex < signature.getLength(); suppliedIndex++) {      if (!matchedSuppliedArgs[suppliedIndex]) {        matchedSuppliedArgs[suppliedIndex]=true;        varArgsPermutation[pos]=suppliedIndex;        namesArray[pos]=signature.getName(suppliedIndex);        pos++;      }    }    varArgsPermutation=Arrays.copyOf(varArgsPermutation,pos);    namesArray=Arrays.copyOf(namesArray,pos);    resultPermutation[varArgIndex]=MatchPermutation.VARARGS;    return new MatchPermutation(resultPermutation,ArgumentsSignature.get(resultSignature),varArgsPermutation,ArgumentsSignature.get(namesArray));  } else {    suppliedIndex=0;    while (suppliedIndex < signature.getLength() && matchedSuppliedArgs[suppliedIndex]) {      suppliedIndex++;    }    if (suppliedIndex < signature.getLength()) {      int leftoverCount=signature.getLength() - cardinality(matchedSuppliedArgs);      if (leftoverCount == 1) {        if (isVarSuppliedVarargs.test(suppliedIndex)) {          return new MatchPermutation(resultPermutation,ArgumentsSignature.get(resultSignature),null,null);        }        CompilerDirectives.transferToInterpreter();        throw RError.error(callingNode,RError.Message.UNUSED_ARGUMENT,errorString.apply(suppliedIndex));      }      CompilerDirectives.transferToInterpreter();      StringBuilder str=new StringBuilder();      int cnt=0;      for (; suppliedIndex < signature.getLength(); suppliedIndex++) {        if (!matchedSuppliedArgs[suppliedIndex]) {          if (cnt++ > 0) {            str.append(", ");          }          str.append(errorString.apply(suppliedIndex));        }      }      throw RError.error(callingNode,RError.Message.UNUSED_ARGUMENTS,str);    }    return new MatchPermutation(resultPermutation,ArgumentsSignature.get(resultSignature),null,null);  }}  }
class C{  private void beginningOfDay(Calendar c){  c.set(Calendar.HOUR_OF_DAY,0);  c.set(Calendar.MINUTE,0);  c.set(Calendar.SECOND,0);  c.set(Calendar.MILLISECOND,0);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case NAME:    return isSetName();case VALUE:  return isSetValue();}throw new IllegalStateException();}  }
class C{  private boolean downloadFiles(final List<String> files,final int size){  updateProgressBar=new UpdateProgressBar(size,updateProp.getProperty("greetingUrl"),fromVersion,toVersion);  updateProgressBar.setVisible(true);  for (  final String file : files) {    boolean res=downloadFile(file);    if (!res) {      return false;    }  }  updateProgressBar.dispose();  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Person rv=((Agent)stack.pop()).getPersonObj();  return (rv != null) ? rv.toString() : "";}  }
class C{  private int dimensionality(Relation<O> rel){  if (idim >= 0) {    return idim;  }  @SuppressWarnings("unchecked") final Relation<NumberVector> frel=(Relation<NumberVector>)rel;  int dim=RelationUtil.dimensionality(frel);  if (dim < 1) {    throw new AbortException("When using KDEOS with non-vectorspace data, the intrinsic dimensionality parameter must be set!");  }  return dim;}  }
class C{  public AggConverter(Blackboard bb,SqlSelect select){  this.bb=bb;  this.aggregatingSelectScope=(AggregatingSelectScope)bb.getValidator().getSelectScope(select);  final SqlNodeList selectList=select.getSelectList();  for (int i=0; i < selectList.size(); i++) {    SqlNode selectItem=selectList.get(i);    String name=null;    if (SqlUtil.isCallTo(selectItem,SqlStdOperatorTable.AS)) {      final SqlCall call=(SqlCall)selectItem;      selectItem=call.operand(0);      name=call.operand(1).toString();    }    if (name == null) {      name=validator.deriveAlias(selectItem,i);    }    nameMap.put(selectItem.toString(),name);  }}  }
class C{  public static HelpNode fromXml(InputStream stream) throws ParserConfigurationException, SAXException, IOException {  return HelpReader.fromXml(new InputSource(stream));}  }
class C{  public double trace(){  double t=0;  for (int i=0; i < Math.min(m,n); i++) {    t+=A[i][i];  }  return t;}  }
class C{  public boolean matches(ItemStack stack){  return HFApi.crops.getCropFromStack(stack) == this;}  }
class C{  private static Object remove(final Object array,final int index){  int length=ArrayUtils.getLength(array);  if (index < 0 || index >= length) {    throw new IndexOutOfBoundsException("Index: " + index + ", Length: "+ length);  }  Object result=Array.newInstance(array.getClass().getComponentType(),length - 1);  System.arraycopy(array,0,result,0,index);  if (index < length - 1) {    System.arraycopy(array,index + 1,result,index,length - index - 1);  }  return result;}  }
class C{  public DataIOException(String message){  super(message);}  }
class C{  public boolean hasResult(){  return hasResult;}  }
class C{  public boolean hasWorkspaces(){  return super.hasElement(Workspace.KEY);}  }
class C{  @Override public void draw(Graphics2D g){  drawDiamond(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_FILL_COLOR),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_STROKE_COLOR));}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep deactivateFileSystem(@PathParam("id") URI id,FileSystemDeleteParam param) throws InternalException {  String task=UUID.randomUUID().toString();  _log.info(String.format("FileSystemDelete --- FileSystem id: %1$s, Task: %2$s, ForceDelete: %3$s ,DeleteType: %4$s",id,task,param.getForceDelete(),param.getDeleteType()));  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare fs=queryResource(id);  if (!param.getForceDelete()) {    ArgValidator.checkReference(FileShare.class,id,checkForDelete(fs));    if (!fs.getFilePolicies().isEmpty()) {      throw APIException.badRequests.resourceCannotBeDeleted("Please unassign the policy from file system. " + fs.getLabel());    }  }  StringBuffer notSuppReasonBuff=new StringBuffer();  if (FileSystemReplicationUtils.filesystemHasActiveReplication(fs,notSuppReasonBuff,param.getDeleteType(),param.getForceDelete())) {    throw APIException.badRequests.resourceCannotBeDeleted(notSuppReasonBuff.toString());  }  List<URI> fileShareURIs=new ArrayList<URI>();  fileShareURIs.add(id);  FileServiceApi fileServiceApi=getFileShareServiceImpl(fs,_dbClient);  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  Operation op=_dbClient.createTaskOpStatus(FileShare.class,fs.getId(),task,ResourceOperationTypeEnum.DELETE_FILE_SYSTEM);  op.setDescription("Filesystem deactivate");  auditOp(OperationTypeEnum.DELETE_FILE_SYSTEM,true,AuditLogManager.AUDITOP_BEGIN,fs.getId().toString(),device.getId().toString());  try {    fileServiceApi.deleteFileSystems(device.getId(),fileShareURIs,param.getDeleteType(),param.getForceDelete(),false,task);  } catch (  InternalException e) {    if (_log.isErrorEnabled()) {      _log.error("Delete error",e);    }    FileShare fileShare=_dbClient.queryObject(FileShare.class,fs.getId());    op=fs.getOpStatus().get(task);    op.error(e);    fileShare.getOpStatus().updateTaskStatus(task,op);    _dbClient.persistObject(fs);    throw e;  }  return toTask(fs,task,op);}  }
class C{  public void startRun(int size) throws Exception {}  }
class C{  protected boolean drawLeftBorder(Component c,Graphics g,int x,int y,int width,int height){  if (super.drawLeftBorder(c,g,x,y,width,height) && frame.isResizable()) {    g.setColor(getFrameHighlight());    int topY=y + CORNER_SIZE;    g.drawLine(x,topY,x + 4,topY);    int bottomY=height - CORNER_SIZE;    g.drawLine(x + 1,bottomY,x + 5,bottomY);    g.setColor(getFrameShadow());    g.drawLine(x + 1,topY - 1,x + 5,topY - 1);    g.drawLine(x + 1,bottomY - 1,x + 5,bottomY - 1);    return true;  }  return false;}  }
class C{  public boolean isAmbiguousTriple(Node x,Node y,Node z){  return getGraph().isAmbiguousTriple(x,y,z);}  }
class C{  private void loadSettingsFragment(){  final FragmentManager fragmentManager=getFragmentManager();  final SettingsFragment settingsFragment=(SettingsFragment)Fragment.instantiate(this,SettingsFragment.class.getName());  final android.app.FragmentTransaction transaction=fragmentManager.beginTransaction();  transaction.replace(R.id.frame_content,settingsFragment,AppConstants.FragmentTags.SETTINGS);  transaction.commit();}  }
class C{  public PoissonSlow(double mean,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setMean(mean);}  }
class C{  private void sendResponse(PrintWriter writer,int status,String message){  try {    writer.write(new JSONObject().put("status",status).put("message",message).toString());  } catch (  JSONException e) {    LOGGER.error("Could not write JSON",e);  }}  }
class C{  protected boolean isReferenceType(byte type){  return type == T_OBJECT || type == T_ARRAY || type == T_NULL || type == T_EXCEPTION;}  }
class C{  public static byte[] decode(String s){  return decode(s.toCharArray());}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public LogFile(File file){  this.file=file;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.472 -0400",hash_original_method="9E9ED07632B5920E5CCFE88A121F094F",hash_generated_method="96A5A62E45DDD676388703727EBD56B1") protected char charAt(String value,int index){  if (index < 0 || index >= value.length()) {    return Character.MIN_VALUE;  }  return value.charAt(index);}  }
class C{  private static boolean mustBeResolvedInContext(final AssignmentNode ass,final AST2BOpContext ctx){  final IValueExpression<?> vexp=ass.getValueExpression();  if (vexp instanceof MathBOp || vexp instanceof XSDBooleanIVValueExpression) {    return !ctx.getAbstractTripleStore().isInlineLiterals();  }  if (vexp instanceof IConstant) {    final IConstant<?> vexpAsConst=(IConstant<?>)vexp;    final Object val=vexpAsConst.get();    if (val instanceof TermId) {      final TermId<?> valAsTermId=(TermId<?>)val;      if (!valAsTermId.isNullIV()) {        return false;      }    } else     if (val instanceof NumericIV) {      return false;    }  }  final IVariable<?> assVar=ass.getVar();  final QueryRoot root=ctx.sa.getQueryRoot();  if (BOpUtility.countVarOccurrencesOutsideProjections(root,assVar) <= 1) {    return false;  }  return true;}  }
class C{  public void snmpV2Trap(InetAddress addr,String cs,SnmpOid trapOid,SnmpVarBindList varBindList,SnmpTimeticks time) throws IOException, SnmpStatusException {  snmpV2Trap(addr,trapPort,cs,trapOid,varBindList,time);}  }
class C{  public static boolean compareElement(Element oldElement,Element newElement){  if (!oldElement.getName().equals(newElement.getName())) {    return false;  }  if (!compareAttributes(oldElement.getAttributes(),newElement.getAttributes())) {    return false;  }  if (oldElement.getChildren().isEmpty() && newElement.getChildren().isEmpty()) {    return true;  }  Iterator<Element> oldIter=oldElement.getChildren().iterator();  while (oldIter.hasNext()) {    Element oldChild=oldIter.next();    boolean found=false;    Iterator<Element> newIter=newElement.getChildren().iterator();    while (newIter.hasNext()) {      Element newChild=newIter.next();      if (newChild.getName().equals(oldChild.getName())) {        found=compareElement(oldChild,newChild);        if (found) {          break;        }      }    }    if (found) {      oldIter.remove();      newIter.remove();    }  }  if (oldElement.getChildren().isEmpty() && newElement.getChildren().isEmpty()) {    return true;  } else   if (oldElement.getChildren().size() != newElement.getChildren().size()) {    if (!(oldElement.getContent(0) instanceof Comment) && !(newElement.getContent(0) instanceof Comment)) {      oldElement.addContent(0,new Comment("..."));      newElement.addContent(0,new Comment("..."));    }  }  return false;}  }
class C{  public PriceModel copy(ParameterSet copiedParameterSet){  PriceModel copy=new PriceModel(this);  List<PricedEvent> copiedEvents=new ArrayList<PricedEvent>();  for (  PricedEvent event : getConsideredEvents()) {    copiedEvents.add(event.copy(copy));  }  copy.setConsideredEvents(copiedEvents);  List<PricedParameter> copiedParameters=new ArrayList<PricedParameter>();  for (  PricedParameter parameter : getSelectedParameters()) {    PricedParameter pricedParameterCopy=parameter.copy(copy,copiedParameterSet);    copiedParameters.add(pricedParameterCopy);  }  copy.setSelectedParameters(copiedParameters);  List<PricedProductRole> copiedPricedProductRoles=new ArrayList<PricedProductRole>();  for (  PricedProductRole pricedProdRole : getRoleSpecificUserPrices()) {    PricedProductRole copiedPricedProductRole=pricedProdRole.copy(copy);    copiedPricedProductRoles.add(copiedPricedProductRole);  }  copy.setRoleSpecificUserPrices(copiedPricedProductRoles);  List<SteppedPrice> copiedSteppedPrices=new ArrayList<SteppedPrice>();  for (  SteppedPrice sp : getSteppedPrices()) {    SteppedPrice spCopy=sp.copy();    spCopy.setPriceModel(copy);    copiedSteppedPrices.add(spCopy);  }  copy.setSteppedPrices(copiedSteppedPrices);  return copy;}  }
class C{  public boolean isUILocked(){  return m_isLocked;}  }
class C{  public BitVector bitVector(){  final LongArrayBitVector result=LongArrayBitVector.getInstance().length(n);  long prev=0, rank;  for (long i=1; i <= n; i++) {    if ((rank=rank(i)) != prev)     result.set(i - 1);    prev=rank;  }  return result;}  }
class C{  public void test_PreparedPropertiesNotContainOldValues() throws Exception {  String namespace="newNamespace";  Properties properties=new Properties();  properties.put(RemoteRepository.OPTION_CREATE_KB_NAMESPACE,namespace);  properties.put("com.bigdata.namespace." + RemoteRepository.DEFAULT_NAMESPACE + ".spo.com.bigdata.btree.BTree.branchingFactor","1024");  properties.put("com.bigdata.namespace." + RemoteRepository.DEFAULT_NAMESPACE + ".lex.com.bigdata.btree.BTree.branchingFactor","400");  final Properties p=m_mgr.getPreparedProperties(namespace,properties);  assertFalse(p.containsKey("com.bigdata.namespace." + RemoteRepository.DEFAULT_NAMESPACE + ".spo.com.bigdata.btree.BTree.branchingFactor"));  assertFalse(p.containsKey("com.bigdata.namespace." + RemoteRepository.DEFAULT_NAMESPACE + ".lex.com.bigdata.btree.BTree.branchingFactor"));}  }
class C{  private ViewAnimationUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  @Parameters(name="{0}") public static Collection<Object[]> data(){  String pathToSearch=System.getenv("DROIDSAFE_SRC_HOME") + "/" + Config.ANDROID_APP_DIR_REL+ "/";  String dirToSearch=System.getProperty("dir-to-search");  if (dirToSearch != null)   pathToSearch+=dirToSearch;  File appSearchDir=new File(pathToSearch);  if (!appSearchDir.exists()) {    logger.error("Could not open app search directory",appSearchDir);    System.exit(1);  }  findApps(appSearchDir);  Collections.sort(appDirPaths);  for (  String appDirPath : appDirPaths) {    listOfParameterLists.add(new Object[]{appDirPath});  }  return listOfParameterLists;}  }
class C{  private static void addTagKeyValuePairToListAsString(List list,Directory dir,int tag,String tagName){  if (dir != null && dir.containsTag(tag)) {    try {      String val=dir.getDescription(tag);      if (val != null && val.length() > 0) {        if (tagName == null)         tagName=dir.getTagName(tag);        list.add(new Object[]{tagName,val});      }    } catch (    MetadataException e) {      System.out.println("Error getting tag value for " + dir.getClass().getName() + " tag "+ tag+ " -- "+ e.toString());    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:28.357 -0500",hash_original_method="E049D119A7B4A553F02CF8223BDECCF5",hash_generated_method="69F031F83675ABF5D78C26020D90F3C7") boolean holdsLock(Object object){  addTaint(object.getTaint());  return getTaintBoolean();}  }
class C{  private boolean deleteShallowConcavities(){  int index=1;  int maxIndex=inputLine.length - 1;  int midIndex=findNextNonDeletedIndex(index);  int lastIndex=findNextNonDeletedIndex(midIndex);  boolean isChanged=false;  while (lastIndex < inputLine.length) {    boolean isMiddleVertexDeleted=false;    if (isDeletable(index,midIndex,lastIndex,distanceTol)) {      isDeleted[midIndex]=DELETE;      isMiddleVertexDeleted=true;      isChanged=true;    }    if (isMiddleVertexDeleted)     index=lastIndex; else     index=midIndex;    midIndex=findNextNonDeletedIndex(index);    lastIndex=findNextNonDeletedIndex(midIndex);  }  return isChanged;}  }
class C{  public void dismiss(){  for (int i=0; i < restartables.size(); i++)   dismiss(restartables.keyAt(i));}  }
class C{  public void updateBounds(DrawContext dc){  if (dc.getFrameTimeStamp() == this.frameNumber)   return;  this.determineSize();  Rectangle viewport=dc.getView().getViewport();  Dimension contentSize=null;  Dimension previousFrameSize=this.frameSize;  Size size=this.getActiveSize();  if (this.isRelativeSize(size)) {    contentSize=this.contents.getSize(dc,null);    Dimension frameSizeForContentSize=this.computeFrameRectForContentRect(contentSize);    this.frameSize=size.compute(frameSizeForContentSize.width,frameSizeForContentSize.height,viewport.width,viewport.height);  } else {    this.frameSize=size.compute(0,0,viewport.width,viewport.height);  }  if (this.getMaxSize() != null) {    Dimension max=this.getMaxSize().compute(this.frameSize.width,this.frameSize.height,viewport.width,viewport.height);    this.frameSize.width=Math.min(this.frameSize.width,max.width);    this.frameSize.height=Math.min(this.frameSize.height,max.height);  }  if (!this.frameSize.equals(previousFrameSize))   this.mustRecomputeFrameGeometry=true;  Point2D upperLeft=this.screenLocation.computeOffset(viewport.width,viewport.height,1.0,1.0);  this.awtScreenPoint=new Point((int)upperLeft.getX(),(int)(viewport.height - upperLeft.getY()));  this.frameBounds=new Rectangle((int)upperLeft.getX(),(int)upperLeft.getY() - this.frameSize.height,this.frameSize.width,this.frameSize.height);  this.pickBounds=new Rectangle(this.frameBounds.x - this.borderPickWidth / 2,this.frameBounds.y - this.borderPickWidth / 2,this.frameBounds.width + this.borderPickWidth,this.frameBounds.height + this.borderPickWidth);  this.innerBounds=new Rectangle((int)upperLeft.getX() + this.frameBorder,(int)upperLeft.getY() - frameSize.height + this.frameBorder,frameSize.width - this.frameBorder * 2,frameSize.height - this.frameBorder * 2);  if (contentSize == null) {    contentSize=this.contents.getSize(dc,this.computeBounds(true,true).getSize());  }  this.contentBounds=this.computeBounds(false,false);  boolean showVerticalScrollbar=this.mustShowVerticalScrollbar(contentSize);  if (showVerticalScrollbar) {    this.contentBounds=this.computeBounds(true,false);  }  boolean showHorizontalScrollbar=this.mustShowHorizontalScrollbar(contentSize);  if (showHorizontalScrollbar && !showVerticalScrollbar) {    this.contentBounds=this.computeBounds(showVerticalScrollbar,showHorizontalScrollbar);    showVerticalScrollbar=this.mustShowVerticalScrollbar(contentSize);  }  this.contentBounds=this.computeBounds(showVerticalScrollbar,showHorizontalScrollbar);  if (this.showVerticalScrollbar && !showVerticalScrollbar)   this.verticalScrollBar.setValue(0);  if (this.showHorizontalScrollbar && !showHorizontalScrollbar)   this.horizontalScrollBar.setValue(0);  this.showVerticalScrollbar=showVerticalScrollbar;  this.showHorizontalScrollbar=showHorizontalScrollbar;  this.verticalScrollBar.setMaxValue(contentSize.height);  this.verticalScrollBar.setExtent(this.contentBounds.height);  this.horizontalScrollBar.setMaxValue(contentSize.width);  this.horizontalScrollBar.setExtent(this.contentBounds.width);  this.scrollContentBounds=new Rectangle(this.contentBounds);  this.scrollContentBounds.x-=this.horizontalScrollBar.getValue();  this.scrollContentBounds.y+=this.verticalScrollBar.getValue();  this.scrollContentBounds.y=this.scrollContentBounds.y - (contentSize.height - this.contentBounds.height);  this.contentSize=contentSize;  this.frameNumber=dc.getFrameTimeStamp();}  }
class C{  public String list(){  if (synchronise) {    try {      synchronise();      addActionMessage(getText("admin.extensions.synchronise.success"));    } catch (    Exception e) {      String errorMsg=e.getMessage();      if (e instanceof RegistryException) {        errorMsg=RegistryException.logRegistryException(((RegistryException)e).getType(),this);      }      addActionWarning(getText("admin.extensions.synchronise.error",new String[]{errorMsg}));      LOG.error(e);    }  }  extensions=extensionManager.list();  updateIsLatest(extensions);  newExtensions=getLatestExtensionVersions();  for (  Extension e : extensions) {    newExtensions.remove(e);  }  for (  Extension ex : extensions) {    if (lastSynchronised == null || lastSynchronised.before(ex.getModified())) {      lastSynchronised=ex.getModified();    }  }  return SUCCESS;}  }
class C{  public HGReplaceRefusedException(HGHandle atom,Object reason){  super("Replace of hypergraph atom failed");  this.atom=atom;  this.reason=reason;}  }
class C{  private void addObjectIfNotFound(Object obj,Vector v){  int n=v.size();  boolean addIt=true;  for (int i=0; i < n; i++) {    if (v.elementAt(i) == obj) {      addIt=false;      break;    }  }  if (addIt) {    v.addElement(obj);  }}  }
class C{  public HighlightBuilder highlightFilter(boolean highlightFilter){  this.highlightFilter=highlightFilter;  return this;}  }
class C{  public DoubleLinkedList<IMove> validMoves(FreeCellNode node){  DoubleLinkedList<IMove> list=new DoubleLinkedList<IMove>();  IMove move=null;  for (int i=3; i >= 0; i--) {    if (node.freeEncoding[i] > 0) {      move=new FreeToFoundationMove(node.freeEncoding[i]);      move=new AutoMove(move);      if (move.isValid(node)) {        list.insert(move);      }    }  }  for (int i=0; i < 8; i++) {    if (node.cols[i].num == 0)     continue;    move=new ColumnToFoundationMove(i);    move=new AutoMove(move);    if (move.isValid(node)) {      list.insert(move);    }  }  for (short c=0; c < 8; c++) {    for (short i=0; i < 4; i++) {      move=new FreeToColumnMove(c,node.freeEncoding[i]);      move=new AutoMove(move);      if (move.isValid(node)) {        list.insert(move);      }    }  }  for (short c=0; c < 8; c++) {    if (node.cols[c].num == 0)     continue;    int card=node.cols[c].cards[node.cols[c].num - 1];    int suit=((card - 1) % 4);    int rank=1 + ((card - 1) >> 2);    boolean isBlackCard=(suit == FreeCellNode.CLUBS || suit == FreeCellNode.SPADES);    for (int nc=1; nc <= node.cols[c].num; nc++) {      if (nc > 1) {        int nextCard=node.cols[c].cards[node.cols[c].num - nc];        int nextSuit=((nextCard - 1) % 4);        int nextRank=1 + ((nextCard - 1) >> 2);        boolean isNextBlackCard=(nextSuit == FreeCellNode.CLUBS || nextSuit == FreeCellNode.SPADES);        if (isNextBlackCard == isBlackCard) {          break;        }        if (nextRank != rank + 1) {          break;        }        isBlackCard=isNextBlackCard;        rank=nextRank;      }      boolean alreadyMovedToBlank=false;      for (int t=0; t < 8; t++) {        if (c == t)         continue;        if (node.cols[c].num == nc && node.cols[t].num == 0) {          continue;        }        move=new ColumnToColumnMove(c,t,nc);        move=new AutoMove(move);        if (move.isValid(node)) {          if (node.cols[t].num == 0 && alreadyMovedToBlank) {          } else {            list.insert(move);          }          if (node.cols[t].num == 0) {            alreadyMovedToBlank=true;          }        }      }    }  }  for (int i=0; i < 8; i++) {    if (node.cols[i].num == 0)     continue;    move=new ColumnToFreeMove(i);    move=new AutoMove(move);    if (move.isValid(node)) {      list.insert(move);    }  }  return list;}  }
class C{  public MvcResult authenticate(String login,String password,int status) throws Exception {  LoginDTO loginDTO=new LoginDTO();  loginDTO.setLogin(login);  loginDTO.setPassword(password);  MvcResult result=mockMVC.perform(post("/api/authenticate",false).contentType(MediaType.APPLICATION_JSON).content(toJSON(loginDTO))).andExpect(status().is(status)).andReturn();  Assert.assertNotNull(result);  if (result.getResponse().getStatus() == 200) {    Assert.assertTrue(!result.getResponse().getHeader(HmacUtils.X_SECRET).isEmpty());    Assert.assertTrue(!result.getResponse().getHeader(HmacUtils.X_TOKEN_ACCESS).isEmpty());  }  return result;}  }
class C{  @Ignore @Test public void test_DR_PGS_2Nodes_Put_ValidateQueue_No_Receiver() throws Exception {  try {    Integer lnPort=(Integer)vm0.invoke(null);    Integer nyPort=(Integer)vm1.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    startSenderInVMs("ln1",vm4,vm5);    vm4.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm4.invoke(null);    vm5.invoke(null);  } catch (  Exception e) {    Assert.fail("Unexpected exception",e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode09.class,args);}  }
class C{  private static List<Comment> orderComments(List<Comment> comments){  Map<String,List<Comment>> parentMap=new HashMap<>();  List<Comment> rootComments=new ArrayList<>();  for (  Comment c : comments) {    String parentUuid=c.parentUuid;    List<Comment> l=parentMap.get(parentUuid);    if (l == null) {      l=new ArrayList<>();      parentMap.put(parentUuid,l);    }    l.add(c);    if (parentUuid == null) {      rootComments.add(c);    }  }  List<Comment> result=new ArrayList<>();  addChildren(parentMap,rootComments,result);  return result;}  }
class C{  protected void loadGoldAndPredictedLabels() throws IOException {  String predictionFileName=new SVMHMMAdapter().getFrameworkFilename(TCMachineLearningAdapter.AdapterNameEntries.predictionsFile);  File predictionsFile=getContext().getFile(predictionFileName,AccessMode.READONLY);  File testFile=locateTestFile();  File mappingFile=getContext().getFile(SVMHMMUtils.LABELS_TO_INTEGERS_MAPPING_FILE_NAME,AccessMode.READONLY);  BidiMap labelsToIntegersMapping=SVMHMMUtils.loadMapping(mappingFile);  goldLabels=SVMHMMUtils.extractOutcomeLabels(testFile);  predictedLabels=SVMHMMUtils.extractOutcomeLabelsFromPredictions(predictionsFile,labelsToIntegersMapping);  if (goldLabels.size() != predictedLabels.size()) {    throw new IllegalStateException("Gold labels and predicted labels differ in size!");  }}  }
class C{  public static String pluralize(String word){  if (word == null) {    throw new IllegalArgumentException();  }  final String lowerCaseWord=word.toLowerCase();  if (endsWithAny(lowerCaseWord,"s","sh","o")) {    return word + "es";  }  if (lowerCaseWord.endsWith("y") && !lowerCaseWord.endsWith("ay") || endsWithAny(lowerCaseWord,"ey","oy","uy")) {    return word.substring(0,word.length() - 1) + "ies";  } else {    return word + "s";  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.TIME_EVENT__PERIODIC:    return isPeriodic();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Inline static void compilePutfieldBarrierOffset(Assembler asm,GPR offset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,offset,locationMetadata,Entrypoints.offsetFieldWriteBarrierMethod);}  }
class C{  public LineDelimiter(String value){  if (value == null) {    throw new IllegalArgumentException("delimiter");  }  this.value=value;}  }
class C{  public void closeFrame(JInternalFrame f){  JDesktopPane d=f.getDesktopPane();  if (d == null) {    return;  }  boolean findNext=f.isSelected();  Container c=f.getParent();  JInternalFrame nextFrame=null;  if (findNext) {    nextFrame=d.getNextFrame(f);    try {      f.setSelected(false);    } catch (    PropertyVetoException e2) {    }  }  if (c != null) {    c.remove(f);    c.repaint(f.getX(),f.getY(),f.getWidth(),f.getHeight());  }  removeIconFor(f);  if (f.getNormalBounds() != null)   f.setNormalBounds(null);  if (wasIcon(f))   setWasIcon(f,null);  if (nextFrame != null) {    try {      nextFrame.setSelected(true);    } catch (    PropertyVetoException e2) {    }  } else   if (findNext && d.getComponentCount() == 0) {    d.requestFocus();  }}  }
class C{  FormatToken parseFormatToken(int offset){  this.startIndex=offset;  this.i=offset;  return parseArgumentIndexAndFlags(new FormatToken());}  }
class C{  public Object remove(String key){  return this.myHashMap.remove(key);}  }
class C{  public SnowballStemmer(){  this("porter");  initStemmers();}  }
class C{  public void flushRequestOutputStream() throws IOException {  LOG.trace("enter HttpConnection.flushRequestOutputStream()");  assertOpen();  outputStream.flush();}  }
class C{  public boolean useOriginalImageType(){  return imageType == ORIGINAL_IMAGE_TYPE;}  }
class C{  private static void exit(String msg,Exception e){  X.println("    ");  X.println("  # " + msg);  X.println("  # Setup failed, exiting... ");  if (e != null && !F.isEmpty(System.getenv("IGNITE_HADOOP_SETUP_DEBUG")))   e.printStackTrace();  System.exit(1);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(Seeker.getInstance().getRuleSizeForDirectory(getFile(stack)));}  }
class C{  public void actionPerformed(java.awt.event.ActionEvent e){  log.debug("Selected mode: {}",modeBox.getSelectedItem());  if (modeBox.getSelectedItem() != null) {    getProgrammer().setMode((ProgrammingMode)modeBox.getSelectedItem());  }}  }
class C{  public ResourceFilter files(){  return addKind(Kind.FILES);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:27.162 -0500",hash_original_method="852197A14CD77BDEC27A8A7AFA07662E",hash_generated_method="7FFC0A51857E059433B560391A26606F") public SparseArrayCompat(){  this(10);}  }
class C{  public void flag(ForumPostConfig config){  config.addCredentials(this);  POST(this.url + "/flag-forum-post",config.toXML());}  }
class C{  public void recycle(){synchronized (mResources.mAccessLock) {    TypedArray cached=mResources.mCachedStyledAttributes;    if (cached == null || cached.mData.length < mData.length) {      mXml=null;      mResources.mCachedStyledAttributes=this;    }  }}  }
class C{  public static boolean equalsIgnoreCase(char ch1,char ch2){  if (ch1 == ch2)   return true;  ch1=Character.toUpperCase(ch1);  ch2=Character.toUpperCase(ch2);  if (ch1 == ch2)   return true;  return Character.toLowerCase(ch1) == Character.toLowerCase(ch2);}  }
class C{  public void test_addPathToNameLintLjava_lang_String2() throws Exception {  setupEnvironment();  byte[] bytes, bytesName;  bytes=new byte[]{-127,8,56,50,50,46,78,97,109,101};  bytesName=new byte[]{22,8,56,50,50,46,78,97,109,101};  assertNotNull(bytes);  byte[] b=new byte[bytes.length];  b=bytes;  b[bytes.length - 3]=(byte)200;  try {    theCertSelector.addPathToName(1,new String(b));  } catch (  IOException e) {  }  theCertSelector.setPathToNames(null);  theCertSelector.addPathToName(1,new String(bytesName));  assertNotNull(theCertSelector.getPathToNames());  CertPath p=buildCertPath();  assertNull(p);  theCertSelector.setPathToNames(null);  theCertSelector.addPathToName(1,rootCertificate.getIssuerX500Principal().getName());  assertNotNull(theCertSelector.getPathToNames());}  }
class C{  public void updateLevelProgress(){  return;}  }
class C{  private WeakReference<Object> newWeakReference(ReferenceQueue<Object> queue){  Object o=new Object();  WeakReference<Object> ref=new WeakReference<Object>(o,queue);  assertSame(o,ref.get());  return ref;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Literal.class) {switch (baseOperationID) {case N4JSPackage.LITERAL___GET_VALUE_AS_STRING:      return N4JSPackage.STRING_LITERAL___GET_VALUE_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void enableDashedLine(float lineLength,float spaceLength,float phase){  mDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  public void savePaymentChannelToFundSourceMappings(final JsonCommand command,final JsonElement element,final Long productId,final Map<String,Object> changes){  savePaymentChannelToFundSourceMappings(command,element,productId,changes,PortfolioProductType.SHARES);}  }
class C{  public static String prettyPrintXHTML(String html) throws java.io.IOException, java.io.UnsupportedEncodingException, org.dom4j.DocumentException {  return prettyPrintHTML(html,true,true,true,false);}  }
class C{  public final boolean hasMessages(int what,Object object){  return mExec.hasMessages(what,object);}  }
class C{  public static void generateRPClass(){  final RPClass rpclass=new RPClass(RPCLASS_NAME);  rpclass.add(DefinitionClass.ATTRIBUTE,NAME,Type.STRING);}  }
class C{  private void measureAndAdjustDown(View child,int childIndex,int numChildren){  int oldHeight=child.getHeight();  measureItem(child);  if (child.getMeasuredHeight() != oldHeight) {    relayoutMeasuredItem(child);    final int heightDelta=child.getMeasuredHeight() - oldHeight;    for (int i=childIndex + 1; i < numChildren; i++) {      getChildAt(i).offsetTopAndBottom(heightDelta);    }  }}  }
class C{  public static Type newReturnType(LambdaExpression lambdaExpression,AST ast,ImportRewrite importRewrite,ImportRewriteContext context){  IMethodBinding method=lambdaExpression.resolveMethodBinding();  if (method != null) {    ITypeBinding returnTypeBinding=method.getReturnType();    if (importRewrite != null) {      return importRewrite.addImport(returnTypeBinding,ast);    } else {      String qualifiedName=returnTypeBinding.getQualifiedName();      if (qualifiedName.length() > 0) {        return newType(ast,qualifiedName);      }    }  }  return ast.newSimpleType(ast.newSimpleName("Object"));}  }
class C{  public static Transformer createOutputTransformer(String encoding,boolean omitXmlDeclaration,boolean indent,int indentAmount) throws TransformerConfigurationException {  StringBuilder sb=new StringBuilder();  sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");  sb.append("<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:xalan=\"http://xml.apache.org/xslt\" version=\"1.0\">\n");  sb.append("<xsl:output method=\"xml\" encoding=\"");  sb.append(encoding == null ? "UTF-8" : encoding);  sb.append("\"");  if (omitXmlDeclaration) {    sb.append(" omit-xml-declaration=\"yes\"");  }  sb.append(" indent=\"");  sb.append(indent ? "yes" : "no");  sb.append("\"");  if (indent) {    sb.append(" xalan:indent-amount=\"");    sb.append(indentAmount <= 0 ? 4 : indentAmount);    sb.append("\"");  }  sb.append("/>\n<xsl:strip-space elements=\"*\"/>\n");  sb.append("<xsl:template match=\"@*|node()\">\n");  sb.append("<xsl:copy><xsl:apply-templates select=\"@*|node()\"/></xsl:copy>\n");  sb.append("</xsl:template>\n</xsl:stylesheet>\n");  ByteArrayInputStream bis=new ByteArrayInputStream(sb.toString().getBytes());  TransformerFactory transformerFactory=TransformerFactory.newInstance();  return transformerFactory.newTransformer(new StreamSource(bis));}  }
class C{  private void jbInit() throws Exception {  bAddAll.setSrc("images/FastBack24.png");  bAdd.setSrc("images/StepBack24.png");  bDelete.setSrc("images/StepForward24.png");  bDeleteAll.setSrc("images/FastForward24.png");  form.setWidth("99%");  form.setHeight("100%");  form.setStyle("position: absolute; padding: 0; margin: 0");  form.appendChild(mainLayout);  mainLayout.setWidth("100%");  mainLayout.setHeight("100%");  mainLayout.setStyle("position: absolute");  treeLabel.setText(Msg.translate(Env.getCtx(),"AD_Tree_ID"));  cbAllNodes.setEnabled(false);  cbAllNodes.setText(Msg.translate(Env.getCtx(),"IsAllNodes"));  treeInfo.setText(" ");  bAdd.setTooltiptext("Add to Tree");  bAddAll.setTooltiptext("Add ALL to Tree");  bDelete.setTooltiptext("Delete from Tree");  bDeleteAll.setTooltiptext("Delete ALL from Tree");  bAdd.addActionListener(this);  bAddAll.addActionListener(this);  bDelete.addActionListener(this);  bDeleteAll.addActionListener(this);  North north=new North();  mainLayout.appendChild(north);  north.appendChild(northPanel);  north.setHeight("28px");  northPanel.appendChild(treeLabel);  northPanel.appendChild(new Space());  northPanel.appendChild(treeField);  northPanel.appendChild(new Space());  northPanel.appendChild(cbAllNodes);  northPanel.appendChild(new Space());  northPanel.appendChild(treeInfo);  northPanel.appendChild(new Space());  northPanel.appendChild(bAddAll);  northPanel.appendChild(new Space());  northPanel.appendChild(bAdd);  northPanel.appendChild(new Space());  northPanel.appendChild(bDelete);  northPanel.appendChild(new Space());  northPanel.appendChild(bDeleteAll);  Center center=new Center();  mainLayout.appendChild(center);  center.appendChild(centerTree);  center.setFlex(true);  center.setAutoscroll(true);  East east=new East();  mainLayout.appendChild(east);  east.appendChild(centerList);  east.setCollapsible(false);  east.setSplittable(true);  east.setWidth("45%");  centerList.setVflex(true);  centerList.setFixedLayout(true);  centerList.addEventListener(Events.ON_SELECT,this);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__AST_STRUCTURAL_MEMBERS:    getAstStructuralMembers().clear();  getAstStructuralMembers().addAll((Collection<? extends TStructMember>)newValue);return;case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__STRUCTURAL_TYPE:setStructuralType((TStructuralType)newValue);return;case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__GEN_STRUCTURAL_MEMBERS:getGenStructuralMembers().clear();getGenStructuralMembers().addAll((Collection<? extends TStructMember>)newValue);return;case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__POSTPONED_SUBSTITUTIONS:getPostponedSubstitutions().clear();getPostponedSubstitutions().addAll((Collection<? extends TypeVariableMapping>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public FinderPatternFinder(BitMatrix image){  this(image,null);}  }
class C{  public void mousePressed(java.awt.event.MouseEvent e){  itemReleaseOK=false;  generalReleaseOK=true;  if (shouldTakeEvents() && (e.getModifiers() & java.awt.event.MouseEvent.BUTTON1_MASK) != 0) {    if (e.getSource() instanceof ZComp) {      ZComp src=(ZComp)e.getSource();      ZPseudoComp picky=null;      while (src != null && picky == null) {        if (src instanceof ZPseudoComp && ((ZPseudoComp)src).widgType == Widget.ITEM && src.isFocusable()) {          picky=(ZPseudoComp)src;          if (picky.getUEListenWidget(UE_INDEX_MOUSE_CLICK) != null) {            picky=null;            break;          }        }        src=src.parent;      }      int evtEmuType=0;      boolean pickyAlreadyFocused=picky != null && picky.isFocused();      if (picky != null && !picky.isFocused()) {        ZPseudoComp tempParent=picky.getTopPseudoParent();        ZComp oldFocus=tempParent.getLastFocusedChild();        if (oldFocus != null) {          if (oldFocus.getTrueXf() < picky.getTrueXf() || oldFocus.getTrueYf() < picky.getTrueYf())           evtEmuType=UserEvent.DOWN; else           evtEmuType=UserEvent.UP;        }        selectNode(picky);        tempParent.updateFocusTargetRect(0);      } else       if (widgType == Widget.TEXTINPUT && !disableFocus) {        ((ZLabel)kids[0]).setCursorLocation(e.getX(),e.getY());      }      itemReleaseOK=picky != null;      if (itemReleaseOK) {        e.consume();      }      if (itemReleaseOK && !pickyAlreadyFocused && !uiMgr.getBoolean("ui/focus_follows_mouse",true)&& uiMgr.getBoolean("ui/require_focus_for_mouse_selection",false)) {        itemReleaseOK=false;        if (picky != null && evtEmuType != 0) {          ZDataTable tabParent=picky.getTableParent();          if (tabParent != null) {            tabParent.updateFocusTargetRect(0);            tabParent.notifyOfTransition(evtEmuType);          }        }      }    }  }}  }
class C{  public void addOption(T option){  addOption(option,1.0);}  }
class C{  public static int nullSafeHashCode(short[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + array[i];  }  return hash;}  }
class C{  void processDropActionChanged(DragSourceDragEvent dsde){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dropActionChanged(dsde);  }}  }
class C{  IMethodBinding resolveMember(AnnotationTypeMemberDeclaration member){  return null;}  }
class C{  public void addInputListener(final IInputPanelListener listener){  m_listeners.addListener(listener);}  }
class C{  private static Source stylesheet(final TransformerFactory factory,final Source xml) throws TransformerConfigurationException {  final Source stylesheet=factory.getAssociatedStylesheet(xml,null,null,null);  if (stylesheet == null) {    throw new IllegalArgumentException("no associated stylesheet found in XML");  }  return stylesheet;}  }
class C{  public T caseS_Do(S_Do object){  return null;}  }
class C{  public synchronized void addValue(long value){  if (values == null && value != 0)   values=new long[nbElements];  if (values != null) {    long timeFactor=getEffectiveTime() / refreshRate;    update(timeFactor);    values[(int)(timeFactor % nbElements)]+=value;  }}  }
class C{  public static TechnicalProduct createTechnicalService(DataService dm,String tProdId) throws NonUniqueBusinessKeyException {  tProd=TechnicalProducts.createTechnicalProduct(dm,supplier,tProdId,false,ServiceAccessType.LOGIN);  roleDef1=TechnicalProducts.addRoleDefinition("Role1",tProd,dm);  LocalizedResources.localizeRoleDefinition(dm,roleDef1.getKey());  roleDef2=TechnicalProducts.addRoleDefinition("Role2",tProd,dm);  LocalizedResources.localizeRoleDefinition(dm,roleDef2.getKey());  event1=TechnicalProducts.addEvent("Event1",EventType.SERVICE_EVENT,tProd,dm);  LocalizedResources.localizeEvent(dm,event1.getKey());  event2=TechnicalProducts.addEvent("Event2",EventType.SERVICE_EVENT,tProd,dm);  LocalizedResources.localizeEvent(dm,event2.getKey());  paramDefLong=TechnicalProducts.addParameterDefinition(ParameterValueType.LONG,"ParamLong",ParameterType.SERVICE_PARAMETER,tProd,dm,Long.valueOf(500),Long.valueOf(0),true);  LocalizedResources.localizeParameterDef(dm,paramDefLong.getKey());  paramDefBool=TechnicalProducts.addParameterDefinition(ParameterValueType.BOOLEAN,"ParamBool",ParameterType.SERVICE_PARAMETER,tProd,dm,null,null,true);  LocalizedResources.localizeParameterDef(dm,paramDefBool.getKey());  paramDefString=TechnicalProducts.addParameterDefinition(ParameterValueType.STRING,"ParamString",ParameterType.SERVICE_PARAMETER,tProd,dm,null,null,true);  LocalizedResources.localizeParameterDef(dm,paramDefString.getKey());  paramDefEnum=TechnicalProducts.addParameterDefinition(ParameterValueType.ENUMERATION,"ParamEnum",ParameterType.SERVICE_PARAMETER,tProd,dm,null,null,true);  LocalizedResources.localizeParameterDef(dm,paramDefEnum.getKey());  ParameterOption opt1=TechnicalProducts.addParameterOption(paramDefEnum,"ParamOption1",dm);  LocalizedResources.localizeParameterDefOption(dm,opt1.getKey());  ParameterOption opt2=TechnicalProducts.addParameterOption(paramDefEnum,"ParamOption2",dm);  LocalizedResources.localizeParameterDefOption(dm,opt2.getKey());  paramDefInt=TechnicalProducts.addParameterDefinition(ParameterValueType.INTEGER,"ParamInt",ParameterType.SERVICE_PARAMETER,tProd,dm,null,null,true);  LocalizedResources.localizeParameterDef(dm,paramDefInt.getKey());  TechnicalProducts.addTechnicalProductOperation(dm,tProd,"operation1","http://actionhost.actionDomain/action");  return tProd;}  }
class C{  public final static int nextPowerOfTwo(int x){  x|=x >> 1;  x|=x >> 2;  x|=x >> 4;  x|=x >> 8;  x|=x >> 16;  return x + 1;}  }
class C{  @SuppressWarnings("unchecked") private static void addDateFields(ClassNode classNode,String fieldName,String fieldNameForMethods,String type){  FieldNode fieldNodeSec=new FieldNode(Opcodes.ACC_PRIVATE,fieldName + "Sec",getJavaType("java.lang.Integer"),null,null);  classNode.fields.add(fieldNodeSec);  FieldNode fieldNodeMs=new FieldNode(Opcodes.ACC_PRIVATE,fieldName + "Ms",getJavaType("java.lang.Long"),null,null);  classNode.fields.add(fieldNodeMs);  MethodNode getterNodeDate=new MethodNode(Opcodes.ACC_PUBLIC,"get" + fieldNameForMethods,"()L" + type + ";",null,null);  getterNodeDate.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));  getterNodeDate.instructions.add(new FieldInsnNode(Opcodes.GETFIELD,classNode.name,fieldName,"L" + type + ";"));  getterNodeDate.instructions.add(new InsnNode(Opcodes.ARETURN));  classNode.methods.add(getterNodeDate);  MethodNode getterNodeSec=new MethodNode(Opcodes.ACC_PUBLIC,"get" + fieldNameForMethods + "Sec","()Ljava/lang/Integer;",null,null);  getterNodeSec.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));  getterNodeSec.instructions.add(new FieldInsnNode(Opcodes.GETFIELD,classNode.name,fieldName + "Sec","Ljava/lang/Integer;"));  getterNodeSec.instructions.add(new InsnNode(Opcodes.ARETURN));  classNode.methods.add(getterNodeSec);  MethodNode getterNodeMs=new MethodNode(Opcodes.ACC_PUBLIC,"get" + fieldNameForMethods + "Ms","()Ljava/lang/Long;",null,null);  getterNodeMs.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));  getterNodeMs.instructions.add(new FieldInsnNode(Opcodes.GETFIELD,classNode.name,fieldName + "Ms","Ljava/lang/Long;"));  getterNodeMs.instructions.add(new InsnNode(Opcodes.ARETURN));  classNode.methods.add(getterNodeMs);  MethodNode setterNodeDate=new MethodNode(Opcodes.ACC_PUBLIC,"set" + fieldNameForMethods,"(L" + type + ";)V",null,null);  setterNodeDate.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));  setterNodeDate.instructions.add(new VarInsnNode(Opcodes.ALOAD,1));  setterNodeDate.instructions.add(new FieldInsnNode(Opcodes.PUTFIELD,classNode.name,fieldName,"L" + type + ";"));  setterNodeDate.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));  setterNodeDate.instructions.add(new VarInsnNode(Opcodes.ALOAD,1));  setterNodeDate.instructions.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,type,"getTime","()J",false));  setterNodeDate.instructions.add(new LdcInsnNode(new Long(1000)));  setterNodeDate.instructions.add(new InsnNode(Opcodes.LDIV));  setterNodeDate.instructions.add(new InsnNode(Opcodes.L2I));  setterNodeDate.instructions.add(new MethodInsnNode(Opcodes.INVOKESTATIC,"java/lang/Integer","valueOf","(I)Ljava/lang/Integer;",false));  setterNodeDate.instructions.add(new FieldInsnNode(Opcodes.PUTFIELD,classNode.name,fieldName + "Sec","Ljava/lang/Integer;"));  setterNodeDate.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));  setterNodeDate.instructions.add(new VarInsnNode(Opcodes.ALOAD,1));  setterNodeDate.instructions.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,type,"getTime","()J",false));  setterNodeDate.instructions.add(new MethodInsnNode(Opcodes.INVOKESTATIC,"java/lang/Long","valueOf","(J)Ljava/lang/Long;",false));  setterNodeDate.instructions.add(new FieldInsnNode(Opcodes.PUTFIELD,classNode.name,fieldName + "Ms","Ljava/lang/Long;"));  setterNodeDate.instructions.add(new InsnNode(Opcodes.RETURN));  classNode.methods.add(setterNodeDate);  MethodNode setterNodeSec=new MethodNode(Opcodes.ACC_PUBLIC,"set" + fieldNameForMethods + "Sec","(Ljava/lang/Integer;)V",null,null);  setterNodeSec.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));  setterNodeSec.instructions.add(new TypeInsnNode(Opcodes.NEW,type));  setterNodeSec.instructions.add(new InsnNode(Opcodes.DUP));  setterNodeSec.instructions.add(new VarInsnNode(Opcodes.ALOAD,1));  setterNodeSec.instructions.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,"java/lang/Integer","intValue","()I",false));  setterNodeSec.instructions.add(new InsnNode(Opcodes.I2L));  setterNodeSec.instructions.add(new LdcInsnNode(new Long(1000)));  setterNodeSec.instructions.add(new InsnNode(Opcodes.LMUL));  setterNodeSec.instructions.add(new MethodInsnNode(Opcodes.INVOKESPECIAL,"java/util/Date","<init>","(J)V",false));  setterNodeSec.instructions.add(new FieldInsnNode(Opcodes.PUTFIELD,classNode.name,fieldName,"L" + type + ";"));  setterNodeSec.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));  setterNodeSec.instructions.add(new VarInsnNode(Opcodes.ALOAD,1));  setterNodeSec.instructions.add(new FieldInsnNode(Opcodes.PUTFIELD,classNode.name,fieldName + "Sec","Ljava/lang/Integer;"));  setterNodeSec.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));  setterNodeSec.instructions.add(new TypeInsnNode(Opcodes.NEW,"java/lang/Long"));  setterNodeSec.instructions.add(new InsnNode(Opcodes.DUP));  setterNodeSec.instructions.add(new VarInsnNode(Opcodes.ALOAD,1));  setterNodeSec.instructions.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,"java/lang/Integer","intValue","()I",false));  setterNodeSec.instructions.add(new InsnNode(Opcodes.I2L));  setterNodeSec.instructions.add(new LdcInsnNode(new Long(1000)));  setterNodeSec.instructions.add(new InsnNode(Opcodes.LMUL));  setterNodeSec.instructions.add(new MethodInsnNode(Opcodes.INVOKESPECIAL,"java/lang/Long","<init>","(J)V",false));  setterNodeSec.instructions.add(new FieldInsnNode(Opcodes.PUTFIELD,classNode.name,fieldName + "Ms","Ljava/lang/Long;"));  setterNodeSec.instructions.add(new InsnNode(Opcodes.RETURN));  classNode.methods.add(setterNodeSec);  MethodNode setterNodeMs=new MethodNode(Opcodes.ACC_PUBLIC,"set" + fieldNameForMethods + "Ms","(Ljava/lang/Long;)V",null,null);  setterNodeMs.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));  setterNodeMs.instructions.add(new TypeInsnNode(Opcodes.NEW,type));  setterNodeMs.instructions.add(new InsnNode(Opcodes.DUP));  setterNodeMs.instructions.add(new VarInsnNode(Opcodes.ALOAD,1));  setterNodeMs.instructions.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,"java/lang/Long","longValue","()J",false));  setterNodeMs.instructions.add(new MethodInsnNode(Opcodes.INVOKESPECIAL,"java/util/Date","<init>","(J)V",false));  setterNodeMs.instructions.add(new FieldInsnNode(Opcodes.PUTFIELD,classNode.name,fieldName,"L" + type + ";"));  setterNodeMs.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));  setterNodeMs.instructions.add(new TypeInsnNode(Opcodes.NEW,"java/lang/Integer"));  setterNodeMs.instructions.add(new InsnNode(Opcodes.DUP));  setterNodeMs.instructions.add(new VarInsnNode(Opcodes.ALOAD,1));  setterNodeMs.instructions.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,"java/lang/Long","longValue","()J",false));  setterNodeMs.instructions.add(new LdcInsnNode(new Long(1000)));  setterNodeMs.instructions.add(new InsnNode(Opcodes.LDIV));  setterNodeMs.instructions.add(new InsnNode(Opcodes.L2I));  setterNodeMs.instructions.add(new MethodInsnNode(Opcodes.INVOKESPECIAL,"java/lang/Integer","<init>","(I)V",false));  setterNodeMs.instructions.add(new FieldInsnNode(Opcodes.PUTFIELD,classNode.name,fieldName + "Sec","Ljava/lang/Integer;"));  setterNodeMs.instructions.add(new VarInsnNode(Opcodes.ALOAD,0));  setterNodeMs.instructions.add(new VarInsnNode(Opcodes.ALOAD,1));  setterNodeMs.instructions.add(new FieldInsnNode(Opcodes.PUTFIELD,classNode.name,fieldName + "Ms","Ljava/lang/Long;"));  setterNodeMs.instructions.add(new InsnNode(Opcodes.RETURN));  classNode.methods.add(setterNodeMs);}  }
class C{  public static void uninstallNodePackage(String nodePackageName,boolean global){  logger.debug("uninstalling " + nodePackageName + " with npm");  initNode();  if (global) {    runCommand(NPM_COMMAND,USER_HOME_DIR,false,null,null,null,"uninstall","--prefix",NPM_DIR.getPath(),nodePackageName,"-g");  } else {    runCommand(NPM_COMMAND,USER_HOME_DIR,false,null,null,null,"uninstall",nodePackageName);  }}  }
class C{  public OperableTrigger selectTrigger(Connection conn,TriggerKey triggerKey) throws SQLException, ClassNotFoundException, IOException, JobPersistenceException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    OperableTrigger trigger=null;    ps=conn.prepareStatement(rtp(SELECT_TRIGGER));    ps.setString(1,triggerKey.getName());    ps.setString(2,triggerKey.getGroup());    rs=ps.executeQuery();    if (rs.next()) {      String jobName=rs.getString(COL_JOB_NAME);      String jobGroup=rs.getString(COL_JOB_GROUP);      String description=rs.getString(COL_DESCRIPTION);      long nextFireTime=rs.getLong(COL_NEXT_FIRE_TIME);      long prevFireTime=rs.getLong(COL_PREV_FIRE_TIME);      String triggerType=rs.getString(COL_TRIGGER_TYPE);      long startTime=rs.getLong(COL_START_TIME);      long endTime=rs.getLong(COL_END_TIME);      String calendarName=rs.getString(COL_CALENDAR_NAME);      int misFireInstr=rs.getInt(COL_MISFIRE_INSTRUCTION);      int priority=rs.getInt(COL_PRIORITY);      Map<?,?> map=null;      if (canUseProperties()) {        map=getMapFromProperties(rs);      } else {        map=(Map<?,?>)getObjectFromBlob(rs,COL_JOB_DATAMAP);      }      Date nft=null;      if (nextFireTime > 0) {        nft=new Date(nextFireTime);      }      Date pft=null;      if (prevFireTime > 0) {        pft=new Date(prevFireTime);      }      Date startTimeD=new Date(startTime);      Date endTimeD=null;      if (endTime > 0) {        endTimeD=new Date(endTime);      }      if (triggerType.equals(TTYPE_BLOB)) {        rs.close();        rs=null;        ps.close();        ps=null;        ps=conn.prepareStatement(rtp(SELECT_BLOB_TRIGGER));        ps.setString(1,triggerKey.getName());        ps.setString(2,triggerKey.getGroup());        rs=ps.executeQuery();        if (rs.next()) {          trigger=(OperableTrigger)getObjectFromBlob(rs,COL_BLOB);        }      } else {        TriggerPersistenceDelegate tDel=findTriggerPersistenceDelegate(triggerType);        if (tDel == null)         throw new JobPersistenceException("No TriggerPersistenceDelegate for trigger discriminator type: " + triggerType);        TriggerPropertyBundle triggerProps=null;        try {          triggerProps=tDel.loadExtendedTriggerProperties(conn,triggerKey);        } catch (        IllegalStateException isex) {          if (isTriggerStillPresent(ps)) {            throw isex;          } else {            return null;          }        }        TriggerBuilder<?> tb=newTrigger().withDescription(description).withPriority(priority).startAt(startTimeD).endAt(endTimeD).withIdentity(triggerKey).modifiedByCalendar(calendarName).withSchedule(triggerProps.getScheduleBuilder()).forJob(jobKey(jobName,jobGroup));        if (null != map) {          tb.usingJobData(new JobDataMap(map));        }        trigger=(OperableTrigger)tb.build();        trigger.setMisfireInstruction(misFireInstr);        trigger.setNextFireTime(nft);        trigger.setPreviousFireTime(pft);        setTriggerStateProperties(trigger,triggerProps);      }    }    return trigger;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  public static double expm1(final double value){  if (USE_JDK_MATH) {    return Math.expm1(value);  }  if (Math.abs(value) < EXP_LO_DISTANCE_TO_ZERO) {    final int i=(int)(value * EXP_LO_INDEXING);    final double delta=value - i * (1.0 / EXP_LO_INDEXING);    return MyTExp.expLoPosTab[i + EXP_LO_TAB_MID_INDEX] * (MyTExp.expLoNegTab[i + EXP_LO_TAB_MID_INDEX] + delta * (1 + delta * (1.0 / 2 + delta * (1.0 / 6 + delta * (1.0 / 24 + delta * (1.0 / 120))))));  } else {    return exp(value) - 1;  }}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof UnknownAttributesAttribute))   return false;  if (obj == this)   return true;  UnknownAttributesAttribute att=(UnknownAttributesAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || !unknownAttributes.equals(att.unknownAttributes))   return false;  return true;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MTask[");  sb.append(get_ID()).append("-").append(getName()).append(";Server=").append(isServerProcess()).append(";").append(getOS_Command()).append("]");  return sb.toString();}  }
class C{  public void zoneMemberAlias(String alias) throws NetworkDeviceControllerException {  zoneAddRemoveMember(alias,true,false);}  }
class C{  public JCMethodDecl MethodDef(MethodSymbol m,JCBlock body){  return MethodDef(m,m.type,body);}  }
class C{  @Override public void executePreparedQuery(boolean mustExecuteOnMaster,ServerPrepareResult serverPrepareResult,ExecutionResult executionResult,ParameterHolder[] parameters,int resultSetScrollType) throws QueryException {  cmdPrologue();  try {    int parameterCount=serverPrepareResult.getParameters().length;    for (int i=0; i < parameterCount; i++) {      if (parameters[i].isLongData()) {        new ComStmtLongData().send(writer,serverPrepareResult.getStatementId(),(short)i,parameters[i]);      }    }    new ComStmtExecute(serverPrepareResult.getStatementId(),parameters,parameterCount,serverPrepareResult.getParameterTypeHeader()).send(writer);    getResult(executionResult,resultSetScrollType,true,true);  } catch (  QueryException qex) {    throw throwErrorWithQuery(parameters,qex,serverPrepareResult);  }catch (  MaxAllowedPacketException e) {    if (e.isMustReconnect())     connect();    throw new QueryException("Could not send query: " + e.getMessage(),-1,INTERRUPTED_EXCEPTION.getSqlState(),e);  }catch (  IOException e) {    throw new QueryException("Could not send query: " + e.getMessage(),-1,CONNECTION_EXCEPTION.getSqlState(),e);  } finally {    writer.releaseBufferIfNotLogging();  }}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public int score(){  return score;}  }
class C{  Item(final int index,final Item i){  this.index=index;  type=i.type;  intVal=i.intVal;  longVal=i.longVal;  strVal1=i.strVal1;  strVal2=i.strVal2;  strVal3=i.strVal3;  hashCode=i.hashCode;}  }
class C{  static double slowSin(final double x,final double result[]){  final double xs[]=new double[2];  final double ys[]=new double[2];  final double facts[]=new double[2];  final double as[]=new double[2];  split(x,xs);  ys[0]=ys[1]=0.0;  for (int i=FACT.length - 1; i >= 0; i--) {    splitMult(xs,ys,as);    ys[0]=as[0];    ys[1]=as[1];    if ((i & 1) == 0) {      continue;    }    split(FACT[i],as);    splitReciprocal(as,facts);    if ((i & 2) != 0) {      facts[0]=-facts[0];      facts[1]=-facts[1];    }    splitAdd(ys,facts,as);    ys[0]=as[0];    ys[1]=as[1];  }  if (result != null) {    result[0]=ys[0];    result[1]=ys[1];  }  return ys[0] + ys[1];}  }
class C{  public Boolean isInDasCluster(){  return inDasCluster;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static void d_uam(double[] a,double[] c,int m,int n,int rl,int ru){  int len=Math.min((ru - rl) * n,a.length);  c[0]=product(a,rl * n,len);}  }
class C{  public boolean isAssignableFrom(java.lang.Class cls){  return false;}  }
class C{  public boolean isEffectToggled(){  return isEffectToggled;}  }
class C{  private void findFirst(List<Trade> trades){  Optional<Trade> firstBigTrade=trades.stream().filter(null).findFirst();  System.out.println("First trade (using findFirst function): " + firstBigTrade.get());}  }
class C{  public fieldset addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public ImmutablePair(final L left,final R right){  super();  this.left=left;  this.right=right;}  }
class C{  public Tree simulate(Tree tree,double value,boolean clone){  Tree binaryTree=null;  if (clone) {    binaryTree=new FlexibleTree(tree);    ((FlexibleTree)binaryTree).resolveTree();  } else {    binaryTree=tree;  }  simulate((MutableTree)binaryTree,binaryTree.getRoot(),value);  return binaryTree;}  }
class C{  public SubscriptionStateException(String message,SubscriptionStateExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  public void init(PageContext pageContext,ComponentPageImpl componentPage,boolean executeConstr) throws PageException {  this.pageSource=componentPage.getPageSource();  if (!StringUtil.isEmpty(properties.extend)) {    base=ComponentLoader.searchComponent(pageContext,componentPage.getPageSource(),properties.extend,Boolean.TRUE,null,true,executeConstr);  } else {    CIPage p=((ConfigWebImpl)pageContext.getConfig()).getBaseComponentPage(pageSource.getDialect(),pageContext);    if (!componentPage.getPageSource().equals(p.getPageSource())) {      base=ComponentLoader.loadComponent(pageContext,p,"Component",false,false,true,executeConstr);    }  }  if (base != null) {    this.dataMemberDefaultAccess=base.dataMemberDefaultAccess;    this._static=new StaticScope(base._static,this,componentPage,dataMemberDefaultAccess);    this.absFin=base.absFin;    _data=base._data;    _udfs=new HashMapPro<Key,UDF>(base._udfs);    setTop(this,base);  } else {    this.dataMemberDefaultAccess=pageContext.getCurrentTemplateDialect() == CFMLEngine.DIALECT_CFML ? pageContext.getConfig().getComponentDataMemberDefaultAccess() : Component.ACCESS_PRIVATE;    this._static=new StaticScope(null,this,componentPage,dataMemberDefaultAccess);    _udfs=new HashMapPro<Key,UDF>();    _data=MapFactory.getConcurrentMap();  }  if (!StringUtil.isEmpty(properties.implement)) {    if (absFin == null)     absFin=new AbstractFinal();    absFin.add(InterfaceImpl.loadInterfaces(pageContext,getPageSource(),properties.implement));  }  useShadow=base == null ? (pageSource.getDialect() == CFMLEngine.DIALECT_CFML ? pageContext.getConfig().useComponentShadow() : false) : base.useShadow;  if (useShadow) {    if (base == null)     scope=new ComponentScopeShadow(this,MapFactory.getConcurrentMap()); else     scope=new ComponentScopeShadow(this,(ComponentScopeShadow)base.scope,false);  } else {    scope=new ComponentScopeThis(this);  }  initProperties();  if (!componentPage._static.isInit()) {    componentPage._static.setInit(true);    try {      componentPage.staticConstructor(pageContext,this);    } catch (    Throwable t) {      componentPage._static.setInit(false);      throw Caster.toPageException(t);    }  }}  }
class C{  public void send(PacketOutputStream writer) throws IOException, QueryException {  writer.send(this.sql,Packet.COM_STMT_PREPARE);}  }
class C{  public void assignSubToCenters(KDTreeNode node,Instances centers,int[] centList,int[] assignments) throws Exception {  if (assignments == null) {    assignments=new int[m_Instances.numInstances()];    for (int i=0; i < assignments.length; i++) {      assignments[i]=-1;    }  }  for (int i=node.m_Start; i <= node.m_End; i++) {    int instIndex=m_InstList[i];    Instance inst=m_Instances.instance(instIndex);    int newC=m_EuclideanDistance.closestPoint(inst,centers,centList);    assignments[instIndex]=newC;  }}  }
class C{  public SpacingBuilder(@NotNull CommonCodeStyleSettings languageCodeStyleSettings){  assert languageCodeStyleSettings.getLanguage() != null : "Only language code style settings are accepted (getLanguage() != null)";  myCodeStyleSettings=languageCodeStyleSettings;}  }
class C{  public boolean equals(Object o){  return source.equals(o);}  }
class C{  public static String translateProductEdition(License license){  return I18N.getMessage(I18N.getGUIBundle(),"gui.license." + license.getProductId() + "."+ license.getProductEdition()+ ".label");}  }
class C{  public void testClientAcknowledge() throws Exception {  Destination destination=createDestination(getClass().getName());  Connection connection=createConnection();  connection.setClientID(idGen.generateId());  connection.start();  Session consumerSession=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  MessageConsumer consumer=consumerSession.createConsumer(destination);  Session producerSession=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);  MessageProducer producer=producerSession.createProducer(destination);  producer.setDeliveryMode(deliveryMode);  TextMessage sent1=producerSession.createTextMessage();  sent1.setText("msg1");  sent1.setStringProperty("str","1");  producer.send(sent1);  TextMessage sent2=producerSession.createTextMessage();  sent2.setText("msg2");  sent2.setStringProperty("str","2");  producer.send(sent2);  TextMessage sent3=producerSession.createTextMessage();  sent2.setText("msg3");  sent2.setStringProperty("str","3");  producer.send(sent3);  TextMessage msgTest=(TextMessage)consumer.receive(RECEIVE_TIMEOUT);  System.out.println("msgTest::" + msgTest + " // "+ msgTest.getText());  TextMessage rec2=(TextMessage)consumer.receive(RECEIVE_TIMEOUT);  System.out.println("msgTest::" + rec2 + " // "+ rec2.getText());  assertNull(consumer.receiveNoWait());  rec2.acknowledge();  TextMessage sent4=producerSession.createTextMessage();  sent4.setText("msg4");  producer.send(sent4);  TextMessage rec4=(TextMessage)consumer.receive(RECEIVE_TIMEOUT);  assertTrue(rec4.equals(sent4));  consumerSession.recover();  rec4=(TextMessage)consumer.receive(RECEIVE_TIMEOUT);  assertTrue(rec4.equals(sent4));  assertTrue(rec4.getJMSRedelivered());  rec4.acknowledge();  connection.close();}  }
class C{  protected void onPostExecute(Uri imagePath){  Intent intent=MainActivity.makeDownloadCompleteIntent(imagePath);  LocalBroadcastManager.getInstance(DownloadImageActivity.this).sendBroadcast(intent);  Log.d(TAG,"onPostExecute() finishing activity");  DownloadImageActivity.this.finish();}  }
class C{  public void update(int bval){  int c=~crc;  c=crc_table[(c ^ bval) & 0xff] ^ (c >>> 8);  crc=~c;}  }
class C{  public void eleminateRedundentGlobals(StylesheetRoot stylesheet){  eleminateRedundent(stylesheet,m_absPaths);}  }
class C{  public void delete(String id){}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=(operation == null) ? 0 : operation.hashCode();  result+=prime * ((text == null) ? 0 : text.hashCode());  return result;}  }
class C{  public void createSceneGraph(){  dirty=false;  if (universe == null) {    canvas=new CapturingCanvas3D(SimpleUniverse.getPreferredConfiguration());    add(canvas,BorderLayout.CENTER);    universe=new SimpleUniverse(canvas);    universe.getViewingPlatform().setNominalViewingTransform();    lightSwitch=new Switch(Switch.CHILD_MASK);    lightSwitch.setCapability(Switch.ALLOW_SWITCH_WRITE);    lightSwitch.setCapability(Switch.ALLOW_CHILDREN_READ);    lightSwitch.setCapability(Switch.ALLOW_CHILDREN_EXTEND);    lightSwitchMask.set(SPOTLIGHT_INDEX);    lightSwitchMask.clear(AMBIENT_LIGHT_INDEX);    lightSwitch.setChildMask(lightSwitchMask);    PointLight pl=new PointLight(new Color3f(1f,1f,1f),new Point3f(0f,0f,0f),new Point3f(1f,0f,0f));    pl.setInfluencingBounds(new BoundingSphere(new Point3d(0,0,0),Double.POSITIVE_INFINITY));    lightSwitch.addChild(pl);    AmbientLight al=new AmbientLight(new Color3f(1f,1f,1f));    al.setInfluencingBounds(new BoundingSphere(new Point3d(0,0,0),Double.POSITIVE_INFINITY));    lightSwitch.addChild(al);    viewRoot=new BranchGroup();    viewRoot.addChild(lightSwitch);    universe.getViewingPlatform().getViewPlatformTransform().addChild(viewRoot);  } else {    destroySceneGraph();  }  BranchGroup oldRoot=root;  root=new BranchGroup();  root.setCapability(BranchGroup.ALLOW_CHILDREN_EXTEND);  root.setCapability(BranchGroup.ALLOW_CHILDREN_WRITE);  root.setCapability(BranchGroup.ALLOW_BOUNDS_READ);  root.setCapability(BranchGroup.ALLOW_DETACH);  autoSpinTransformGroup=new TransformGroup();  autoSpinTransformGroup.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);  portrayalSwitch=new Switch(Switch.CHILD_MASK);  portrayalSwitch.setCapability(Switch.ALLOW_SWITCH_WRITE);  portrayalSwitch.setCapability(Switch.ALLOW_CHILDREN_READ);  portrayalSwitch.setCapability(Switch.ALLOW_CHILDREN_EXTEND);  autoSpinBackgroundTransformGroup=new TransformGroup();  autoSpinBackgroundTransformGroup.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);  portrayalSwitchMask=new BitSet(subgraphCount);  int count=0;  Iterator iter=portrayals.iterator();  while (iter.hasNext()) {    Portrayal3DHolder p3h=(Portrayal3DHolder)(iter.next());    Portrayal3D p=p3h.portrayal;    Object obj=(p instanceof FieldPortrayal3D) ? ((FieldPortrayal3D)p).getField() : null;    p.setCurrentDisplay(this);    portrayalSwitch.addChild(p.getModel(obj,null));    if (p3h.visible)     portrayalSwitchMask.set(count); else     portrayalSwitchMask.clear(count);    count++;  }  portrayalSwitch.setChildMask(portrayalSwitchMask);  BoundingSphere bounds=new BoundingSphere(new Point3d(0.0,0.0,0.0),Double.POSITIVE_INFINITY);  mSelectBehavior=new SelectionBehavior(canvas,root,bounds,simulation);  mSelectBehavior.setSelectsAll(selectionAll,inspectionAll);  mSelectBehavior.setEnable(selectBehCheckBox.isSelected());  toolTipBehavior=new ToolTipBehavior(canvas,root,bounds);  toolTipBehavior.setEnable(true);  toolTipBehavior.setCanShowToolTips(usingToolTips);  if (autoSpin == null) {    autoSpin=new RotationInterpolator(new Alpha(),autoSpinTransformGroup);    autoSpin.getAlpha().setLoopCount(0);    autoSpin.setSchedulingBounds(bounds);    autoSpinBackground=new RotationInterpolator(new Alpha(),autoSpinBackgroundTransformGroup);    autoSpinBackground.getAlpha().setLoopCount(0);    autoSpinBackground.setSchedulingBounds(bounds);    setSpinningEnabled(false);  } else {    oldRoot.removeChild(autoSpin);    oldRoot.removeChild(autoSpinBackground);  }  rebuildGlobalModelTransformGroup();  rebuildAuxillarySwitch();  mOrbitBehavior=new OrbitBehavior(canvas,OrbitBehavior.REVERSE_ALL);  mOrbitBehavior.setRotateEnable(true);  mOrbitBehavior.setRotXFactor(orbitRotateXCheckBox.isSelected() ? 1.0 : 0.0);  mOrbitBehavior.setRotYFactor(orbitRotateYCheckBox.isSelected() ? 1.0 : 0.0);  mOrbitBehavior.setTranslateEnable(true);  mOrbitBehavior.setTransXFactor(orbitTranslateXCheckBox.isSelected() ? 1.0 : 0.0);  mOrbitBehavior.setTransYFactor(orbitTranslateYCheckBox.isSelected() ? 1.0 : 0.0);  mOrbitBehavior.setZoomEnable(orbitZoomCheckBox.isSelected());  mOrbitBehavior.setSchedulingBounds(bounds);  universe.getViewingPlatform().setViewPlatformBehavior(mOrbitBehavior);  globalModelTransformGroup.addChild(portrayalSwitch);  autoSpinTransformGroup.addChild(globalModelTransformGroup);  autoSpinTransformGroup.addChild(auxillarySwitch);  root.addChild(autoSpin);  root.addChild(autoSpinBackground);  autoSpin.setTarget(autoSpinTransformGroup);  autoSpinBackground.setTarget(autoSpinBackgroundTransformGroup);  root.addChild(autoSpinTransformGroup);  setCullingMode(cullingMode);  setRasterizationMode(rasterizationMode);  sceneGraphCreated();  universe.addBranchGraph(root);  canvas.startRenderer();}  }
class C{  protected int toJulian(java.util.Date date){  YMD ymd=null;synchronized (gc) {    gc.setTime(date);    ymd=new YMD(gc.get(GregorianCalendar.YEAR),gc.get(GregorianCalendar.MONTH) + 1,gc.get(GregorianCalendar.DAY_OF_MONTH));  }  return ymd.julian();}  }
class C{  public WTableColumn(){  this(75);}  }
class C{  public static IntSet from(int... ints){  return new IntSet(IntList.view(ints,ints.length));}  }
class C{  public boolean isCheckThreshold(){  return null == checkThreshold ? _checkThreshold : checkThreshold.get();}  }
class C{  public static void untrackedFileOverwrittenBy(GitRepository repository,String branch,Collection<String> fileNames){  GitExecutor.cd(repository);  GitExecutor.git("checkout " + branch);  for (  String it : fileNames) {    Executor.touch(it,"branch content");    GitExecutor.git("add " + it);  }  GitExecutor.git("commit -m untracked_files");  GitExecutor.git("checkout master");  for (  String it : fileNames) {    Executor.touch(it,"master content");  }}  }
class C{  public static String serializeDocument(Document document) throws CoreException {  try {    return serializeDocumentInt(document);  } catch (  TransformerException e) {    abort("Unable to serialize XML document.",e);  }catch (  IOException e) {    abort("Unable to serialize XML document.",e);  }  return null;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_INTERFACE_DECLARATION__SUPER_INTERFACE_REFS:    return ((InternalEList<?>)getSuperInterfaceRefs()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected void engineInit(int opmode,Key key,SecureRandom random) throws InvalidKeyException {  core.init(opmode,key,random);}  }
class C{  public void clear(){  cache.evictAll();}  }
class C{  public void handleHREF(RenderableImage image,Element imageElement,SVGGeneratorContext generatorContext) throws SVGGraphics2DIOException {  if (image == null) {    throw new SVGGraphics2DRuntimeException(ERR_IMAGE_NULL);  }  RenderedImage r=image.createDefaultRendering();  if (r == null) {    handleEmptyImage(imageElement);  } else {    handleHREF(r,imageElement,generatorContext);  }}  }
class C{  public FancyButton(){  this(null,null);}  }
class C{  public boolean isIfMatch(byte[] check){  if (if_match_list == null)   return true;  for (  byte[] etag : if_match_list) {    if (etag.length == 0)     return true;    if (Arrays.equals(etag,check))     return true;  }  return false;}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public void testToStringZeroScale(){  String a="-123809648392384754573567356745735635678902957849027687876782870";  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  String result="-123809648392384754573567356745735635678902957849027687876782870";  assertTrue("incorrect value",aNumber.toString().equals(result));}  }
class C{  final public void write(final DataInput in,final int len) throws IOException {  ensureCapacity(len);  int c=0;  byte b;  while (c < len) {    b=in.readByte();    buf[this.pos++]=(byte)(b & 0xff);    c++;  }  limit=pos;}  }
class C{  public boolean isEditable(){  return editable;}  }
class C{  private <T>CIMArgument<T> build(String name,T value,CIMDataType dataType){  CIMArgument<T> arg;  try {    arg=new CIMArgument<>(name,dataType,value);  } catch (  Exception e) {    throw new IllegalStateException("Problem getting input arguments: ",e);  }  return arg;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  private void openAddressbook(String name){  if (!addressbookDialog.isVisible()) {    windowStateManager.setWindowPosition(addressbookDialog);  }  addressbookDialog.showDialog(name);}  }
class C{  public int addSorted(T dl){  return add(dl,getSortedPosition(dl));}  }
class C{  public boolean isOneToOne(){  return false;}  }
class C{  private static void addToAdapt(Class<? extends Annotation> ann,String className,String methodName,String signature){  if (ann == null)   throw new Error("Can't annotate with null");  ElementTriple triple=new ElementTriple(className,methodName,signature);  Set<Class<? extends Annotation>> set=thingsToAnnotate2.get(triple);  if (set == null) {    set=new HashSet<Class<? extends Annotation>>();  }  set.add(ann);  thingsToAnnotate2.put(triple,set);}  }
class C{  public boolean isArtwork(){  return artwork;}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public static CdcSession createCdcSessionViaIPC(){  return new CdcSession(null,null,null);}  }
class C{  protected void onReleaseResources(List<AppEntry> apps){}  }
class C{  public void addHole(Polygon poly){  if (_holes == null) {    _holes=new ArrayList<Polygon>();  }  _holes.add(poly);}  }
class C{  public boolean snipe(Action action,Material itemInHand,Block clickedBlock,BlockFace clickedFace){  try {    Player player=getPlayer();    FawePlayer<Player> fp=FawePlayer.wrap(player);    resetMask();    if (clickedBlock != null) {      clickedBlock=getWorld().getBlockAt(clickedBlock.getX(),clickedBlock.getY(),clickedBlock.getZ());    }    return snipe(action,itemInHand,getWorld(),clickedBlock,clickedFace);  } catch (  Throwable e) {    e.printStackTrace();  }  return false;}  }
class C{  public static int compareModifierVisibility(Element a,Element b){  if (a.getModifiers().contains(Modifier.PUBLIC) && !b.getModifiers().contains(Modifier.PUBLIC)) {    return -1;  }  if (isDefaultModifier(a.getModifiers()) && !isDefaultModifier(b.getModifiers())) {    return -1;  }  if (a.getModifiers().contains(Modifier.PROTECTED) && !b.getModifiers().contains(Modifier.PROTECTED)) {    return -1;  }  if (b.getModifiers().contains(Modifier.PUBLIC) && !a.getModifiers().contains(Modifier.PUBLIC)) {    return 1;  }  if (isDefaultModifier(b.getModifiers()) && !isDefaultModifier(a.getModifiers())) {    return 1;  }  if (b.getModifiers().contains(Modifier.PROTECTED) && !a.getModifiers().contains(Modifier.PROTECTED)) {    return 1;  }  return 0;}  }
class C{  public static <T>ArrayList<T> read(InputStream fileStream,String charsetName,ITransformer<String,T> transformer) throws FileNotFoundException {  Scanner scanner=new Scanner(fileStream,charsetName);  ArrayList<T> list=new ArrayList<>();  while (scanner.hasNextLine()) {    String line=scanner.nextLine();    list.add(transformer.transform(line));  }  scanner.close();  return list;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + String.valueOf(progress) + "%");  }  previousProgress=progress;}  }
class C{  public IntIterator rows(boolean reverse){  return m_rows.rows(reverse);}  }
class C{  private final void notifyConnectionOpened(OFConnection connection){  this.connection=connection;  this.newConnectionListener.connectionOpened(connection,featuresReply);}  }
class C{  public boolean hasFeatureName(){  return hasExtension(FeatureName.class);}  }
class C{  public static Image loadImage(String filename){  return new ImageIcon(Tutorial6.class.getResource(filename)).getImage();}  }
class C{  public String paramString(){  String typeStr;switch (id) {case COMPONENT_ADDED:    typeStr="COMPONENT_ADDED";  break;case COMPONENT_REMOVED:typeStr="COMPONENT_REMOVED";break;default :typeStr="unknown type";}return typeStr + ",child=" + child.getName();}  }
class C{  public BufferedGroupingRDFHandler(int bufferSize,RDFHandler... handlers){  super(handlers);  this.bufferSize=bufferSize;  this.bufferedStatements=new GraphImpl();  this.contexts=new HashSet<Resource>();}  }
class C{  public String toASCIIString(){  StringBuilder result=new StringBuilder();  ASCII_ONLY.appendEncoded(result,toString());  return result.toString();}  }
class C{  public static final double[] dsigma(double v[]){  double u[]=new double[v.length];  for (int j=0; j < v.length; j++) {    u[j]=dsigma(v[j]);  }  return u;}  }
class C{  private static String sanitizeDotsAndSlashes(String path){  StringBuilder stringBuilder=new StringBuilder(path);  Stack<Integer> slashIndexStack=new Stack<Integer>();  int index=0;  while (index < stringBuilder.length() - 1) {    if (stringBuilder.charAt(index) == '/') {      slashIndexStack.add(index);      if (stringBuilder.charAt(index + 1) == '.') {        if (index < stringBuilder.length() - 2 && stringBuilder.charAt(index + 2) == '.') {          if (index < stringBuilder.length() - 3 && stringBuilder.charAt(index + 3) == '/' || index == stringBuilder.length() - 3) {            boolean endOfPath=index == stringBuilder.length() - 3;            slashIndexStack.pop();            int endIndex=index + 3;            index=slashIndexStack.empty() ? -1 : slashIndexStack.pop() - 1;            int startIndex=endOfPath ? index + 1 : index;            stringBuilder.delete(startIndex + 1,endIndex);          }        } else         if (index < stringBuilder.length() - 2 && stringBuilder.charAt(index + 2) == '/' || index == stringBuilder.length() - 2) {          boolean endOfPath=index == stringBuilder.length() - 2;          slashIndexStack.pop();          int startIndex=endOfPath ? index + 1 : index;          stringBuilder.delete(startIndex,index + 2);          index--;        }      } else       if (stringBuilder.charAt(index + 1) == '/') {        slashIndexStack.pop();        stringBuilder.deleteCharAt(index);        index--;      }    }    index++;  }  if (stringBuilder.length() == 0) {    stringBuilder.append("/");  }  return stringBuilder.toString();}  }
class C{  public SFS(int minFeatures,int maxFeatures,Regressor regressor,double maxIncrease){  this(minFeatures,maxFeatures,regressor.clone(),3,maxIncrease);}  }
class C{  @Override public byte[] toByteArray() throws IOException {  ByteBuffer bb=ByteBuffer.wrap(new byte[8 + 4 + 4 * this.bounds.length + 4 + 4 + this.rangekeys.length]).order(ByteOrder.BIG_ENDIAN);  bb.putLong(this.count);  bb.putInt(this.slicesLength);  bb.putInt(this.bounds.length);  for (int i=0; i < this.bounds.length; i++) {    bb.putInt(this.bounds[i]);  }  bb.putInt(this.rangekeys.length);  bb.put(this.rangekeys);  return bb.array();}  }
class C{  public byte[] toByteArray(){  int len=data.length + 11;  byte b[]=new byte[len];  b[0]=(byte)((len >>> 24) & 0xff);  b[1]=(byte)((len >>> 16) & 0xff);  b[2]=(byte)((len >>> 8) & 0xff);  b[3]=(byte)((len >>> 0) & 0xff);  b[4]=(byte)((id >>> 24) & 0xff);  b[5]=(byte)((id >>> 16) & 0xff);  b[6]=(byte)((id >>> 8) & 0xff);  b[7]=(byte)((id >>> 0) & 0xff);  b[8]=(byte)flags;  if ((flags & Packet.Reply) == 0) {    b[9]=(byte)cmdSet;    b[10]=(byte)cmd;  } else {    b[9]=(byte)((errorCode >>> 8) & 0xff);    b[10]=(byte)((errorCode >>> 0) & 0xff);  }  if (data.length > 0) {    System.arraycopy(data,0,b,11,data.length);  }  return b;}  }
class C{  public static String gensalt(int log_rounds,SecureRandom random){  if (log_rounds < 4 || log_rounds > 31) {    throw new IllegalArgumentException("Bad number of rounds");  }  StringBuilder rs=new StringBuilder();  byte rnd[]=new byte[BCRYPT_SALT_LEN];  random.nextBytes(rnd);  rs.append("$2a$");  if (log_rounds < 10) {    rs.append("0");  }  rs.append(log_rounds);  rs.append("$");  encode_base64(rnd,rnd.length,rs);  return rs.toString();}  }
class C{  public static GenericKeyczar createKey(DefaultKeyType type,KeyPurpose purpose) throws KeyczarException {  return createKey(type,purpose,type.defaultSize());}  }
class C{  public PCalledPartyIDHeader createPCalledPartyIDHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  PCalledPartyID calledPartyID=new PCalledPartyID();  calledPartyID.setAddress(address);  return calledPartyID;}  }
class C{  public LayersBuilder add(Layer... layers){  this.layers.addAll(Arrays.asList(layers));  return this;}  }
class C{  public void onDone(Throwable err){  assert err != null;  onDone(null,err);}  }
class C{  @Override final public boolean isKeys(){  return false;}  }
class C{  private void fireMenuKeyPressed(MenuKeyEvent event){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuKeyListener.class) {      ((MenuKeyListener)listeners[i + 1]).menuKeyPressed(event);    }  }}  }
class C{  public ObjectMatrix1D like(int size){  return new DenseObjectMatrix1D(size);}  }
class C{  public LRS(int L,int R,Regressor evaluater,int folds){  setFeaturesToAdd(L);  setFeaturesToRemove(R);  setFolds(folds);  setEvaluator(evaluater);}  }
class C{  public static String requestPath(HttpUrl url){  String path=url.encodedPath();  String query=url.encodedQuery();  return query != null ? (path + '?' + query) : path;}  }
class C{  public static InputStream openDataFile(){  InputStream stream=LosAltosExample.class.getResourceAsStream("losaltos.trail");  if (stream == null) {    System.err.println("Unable to find the file losaltos.trail.");    System.exit(-1);  }  return stream;}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return CONFIGURATION.createCompatibleImage(width,height,image.getTransparency());}  }
class C{  @Override public int hashCode(){  return objectID.hashCode();}  }
class C{  private void smoothSnapToPosition(int scrollY,int availableScrollHeight,AlphabeticalAppsList.FastScrollSectionInfo info){  mRv.removeCallbacks(mSmoothSnapNextFrameRunnable);  mRv.removeCallbacks(mFastScrollToTargetSectionRunnable);  trackAllChildViews();  if (mHasFastScrollTouchSettled) {    mCurrentFastScrollSection=info.sectionName;    mTargetFastScrollSection=null;    updateTrackedViewsFastScrollFocusState();  } else {    mCurrentFastScrollSection=null;    mTargetFastScrollSection=info.sectionName;    mHasFastScrollTouchSettled=false;    updateTrackedViewsFastScrollFocusState();    mRv.postDelayed(mFastScrollToTargetSectionRunnable,mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION);  }  int newScrollY=Math.min(availableScrollHeight,mRv.getPaddingTop() + mRv.getTop(info.fastScrollToItem.rowIndex));  int numFrames=mFastScrollFrames.length;  for (int i=0; i < numFrames; i++) {    mFastScrollFrames[i]=(newScrollY - scrollY) / numFrames;  }  mFastScrollFrameIndex=0;  mRv.postOnAnimation(mSmoothSnapNextFrameRunnable);}  }
class C{  @PostPersist protected void postPersist(){  this.creationDate=new Date();}  }
class C{  @Override protected void fireRemoveUpdate(DocumentEvent evt){  if (tokenMarker != null) {    DocumentEvent.ElementChange ch=evt.getChange(getDefaultRootElement());    if (ch != null) {      tokenMarker.deleteLines(ch.getIndex() + 1,ch.getChildrenRemoved().length - ch.getChildrenAdded().length);    }  }  super.fireRemoveUpdate(evt);}  }
class C{  public String seriesToString(double[] series,NumberFormat df){  StringBuffer sb=new StringBuffer();  sb.append('[');  for (  double d : series) {    sb.append(df.format(d)).append(',');  }  sb.delete(sb.length() - 2,sb.length() - 1).append("]");  return sb.toString();}  }
class C{  public int size(){  if (backingStore.isEmpty())   return 0;  if (reapOnRead)   reap();  return backingStore.size();}  }
class C{  public AccountsAdapter(Context context,int layoutResourceId,MXMediasCache mediasCache){  super(context,layoutResourceId);  mContext=context;  mLayoutResourceId=layoutResourceId;  mLayoutInflater=LayoutInflater.from(mContext);  mMediasCache=mediasCache;}  }
class C{  @Override public void run(){  String inputImageFile=args[0];  String imageGCPFile=args[1];  String mapGCPFile=args[2];  String outputFile=args[3];  ImageRectificationPanel ird=new ImageRectificationPanel(inputImageFile,imageGCPFile,mapGCPFile,outputFile,myHost);  returnData(ird);}  }
class C{  public Command showStetched(String position,boolean modal){  return showPackedImpl(position,modal,true);}  }
class C{  public Matrix computeDerivatives(Matrix loghyper,Matrix X,int index){  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  if (index > numParameters() - 1)   throw new IllegalArgumentException("Wrong hyperparameters index " + index + " it should be smaller or equal to "+ (numParameters() - 1));  double ell=Math.exp(loghyper.get(0,0));  double sf2=Math.exp(2 * loghyper.get(1,0));  Matrix tmp=squareDist(X.transpose().times(1 / ell));  Matrix A=null;  if (index == 0) {    A=exp(tmp.times(-0.5)).arrayTimes(tmp).times(sf2);  } else {    A=exp(tmp.times(-0.5)).times(2 * sf2);  }  return A;}  }
class C{  public boolean visitFunction(ExpressionOwner owner,Function func){  if (func instanceof FuncExtFunction) {    String namespace=((FuncExtFunction)func).getNamespace();    m_sroot.getExtensionNamespacesManager().registerExtension(namespace);  } else   if (func instanceof FuncExtFunctionAvailable) {    String arg=((FuncExtFunctionAvailable)func).getArg0().toString();    if (arg.indexOf(":") > 0) {      String prefix=arg.substring(0,arg.indexOf(":"));      String namespace=this.m_sroot.getNamespaceForPrefix(prefix);      m_sroot.getExtensionNamespacesManager().registerExtension(namespace);    }  }  return true;}  }
class C{  public static void cleanupCG(FunctionalAPIImpl impl,ConsistencyGroupUID cgUID) throws RecoverPointException {  if (impl != null && cgUID != null) {    try {      impl.removeConsistencyGroup(cgUID);    } catch (    FunctionalAPIActionFailedException_Exception e1) {      throw RecoverPointException.exceptions.cannotCleanupCG(e1);    }catch (    FunctionalAPIInternalError_Exception e1) {      throw RecoverPointException.exceptions.cannotCleanupCG(e1);    }  }}  }
class C{  protected void initFileHolder(){  files=new File[numLevels][180][360];}  }
class C{  public static long compute8(long x){  x^=x << 13;  x^=x >>> 7;  x^=(x << 17);  return x;}  }
class C{  public static int next(int crc,int ch){  return (crc << 8) ^ CRC_TABLE[((crc >> 24) ^ ch) & 0xff];}  }
class C{  public void addMutedIp(final String ip){  addMutedIp(ip,null);}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,encoding,lines,lineEnding,false);}  }
class C{  @RequestMapping(value="/SAML2/SSO/{tenant:.*}") public void ssoBindingError(Locale locale,@PathVariable(value="tenant") String tenant,HttpServletResponse response) throws IOException {  logger.info("SSO binding error! The client locale is " + locale.toString() + ", tenant is "+ tenant);  ssoDefaultTenantBindingError(locale,response);}  }
class C{  public Context(NetworkParameters params){  log.info("Creating bitcoinj {} context.",VersionMessage.BITCOINJ_VERSION);  this.confidenceTable=new TxConfidenceTable();  this.params=params;  lastConstructed=this;  slot.set(this);}  }
class C{  @Override protected Sensor createNewSensor(String systemName,String userName){  if (log.isDebugEnabled()) {    log.debug("createNewSensor " + systemName + " "+ userName);  }  Sensor s;  String sName=SerialAddress.normalizeSystemName(systemName);  if (sName.equals("")) {    log.error("Invalid Sensor system name - " + systemName);    return null;  }  s=getBySystemName(sName);  if (s != null) {    log.error("Sensor with this name already exists - " + systemName);    return null;  }  String altName=SerialAddress.convertSystemNameToAlternate(sName);  s=getBySystemName(altName);  if (s != null) {    log.error("Sensor with name '" + systemName + "' already exists as '"+ altName+ "'");    return null;  }  int bit=SerialAddress.getBitFromSystemName(sName);  if ((bit <= 0) || (bit >= SENSORSPERNODE)) {    log.error("Sensor bit number, " + Integer.toString(bit) + ", is outside the supported range, 1-"+ Integer.toString(SENSORSPERNODE - 1));    return null;  }  if (userName == null) {    s=new SerialSensor(sName);  } else {    s=new SerialSensor(sName,userName);  }  SerialNode node=SerialAddress.getNodeFromSystemName(sName);  if (node == null) {    log.warn("Sensor " + sName + " refers to an undefined Serial Node.");    return s;  }  node.registerSensor(s,bit);  if (log.isDebugEnabled()) {    log.debug("register " + s.getSystemName() + " in node "+ node);  }  return s;}  }
class C{  private Set<String> readQueries(String resource) throws IOException {  Set<String> queries=new HashSet<>();  InputStream stream=getClass().getResourceAsStream(resource);  BufferedReader reader=new BufferedReader(new InputStreamReader(stream,StandardCharsets.UTF_8));  String line=null;  while ((line=reader.readLine()) != null) {    line=line.trim();    if (line.length() > 0 && !line.startsWith("#") && !line.startsWith("//")) {      queries.add(line);    }  }  return queries;}  }
class C{  public void removeSuffix(String s){  suffix.removeElement(s);  update();}  }
class C{  @RequestMapping(value="/contacts",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> create(@RequestBody @Valid Contact contact) throws URISyntaxException {  log.debug("REST request to save Contact : {}",contact);  if (contact.getId() != null) {    return ResponseEntity.badRequest().header("Failure","A new contact cannot already have an ID").build();  }  contact=contactRepository.save(contact);  return ResponseEntity.created(new URI("/api/contacts/" + contact.getId())).build();}  }
class C{  private int handleAggregationPacket(Buffer input,Buffer output){  byte[] bufferData=(byte[])input.getData();  if (aggregationPositon + 1 >= bufferData.length) {    aggregationPositon=1;    output.setDiscard(true);    return BUFFER_PROCESSED_OK;  }  int nalu_size=(((bufferData[aggregationPositon] & 0xff) << 8) | (bufferData[aggregationPositon + 1] & 0xff));  aggregationPositon+=2;  if (aggregationPositon + nalu_size > bufferData.length) {    aggregationPositon=1;    return BUFFER_PROCESSED_FAILED;  }  extractNalUnitHeader(aggregationPositon,input);  if (mNalUnitHeader.isSingleNalUnitPacket()) {    byte[] data=new byte[nalu_size];    System.arraycopy(bufferData,aggregationPositon,data,0,nalu_size);    aggregationPositon+=nalu_size;    output.setData(data);    output.setLength(data.length);    output.setOffset(0);    output.setTimestamp(input.getTimestamp());    output.setSequenceNumber(input.getSequenceNumber());    output.setVideoOrientation(input.getVideoOrientation());    output.setFormat(input.getFormat());    output.setFlags(input.getFlags());    return INPUT_BUFFER_NOT_CONSUMED;  }  aggregationPositon=1;  return BUFFER_PROCESSED_FAILED;}  }
class C{  public synchronized void add(int index,Object element){  Object[] elements=getArray();  int len=elements.length;  if (index > len || index < 0)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ len);  Object[] newElements;  int numMoved=len - index;  if (numMoved == 0)   newElements=copyOf(elements,len + 1); else {    newElements=new Object[len + 1];    System.arraycopy(elements,0,newElements,0,index);    System.arraycopy(elements,index,newElements,index + 1,numMoved);  }  newElements[index]=element;  setArray(newElements);}  }
class C{  public XBeeLight(String systemName,String userName,XBeeTrafficController controller){  super(systemName,userName);  tc=controller;  init(systemName);}  }
class C{  public List read() throws IOException, ParseException {  if (file != null)   reader=new FileReader(file);  count=0;  try {    BufferedReader bufferedReader=new BufferedReader(reader);    try {      return read(bufferedReader);    }  finally {      bufferedReader.close();    }  }  finally {    reader.close();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.537 -0500",hash_original_method="A2826FA19E4353225E0757D076E8282A",hash_generated_method="AB2508B38E8C1608EABB345765468735") public ArrayDeque<E> clone(){  try {    ArrayDeque<E> result=(ArrayDeque<E>)super.clone();    result.elements=Arrays.copyOf(elements,elements.length);    return result;  } catch (  CloneNotSupportedException e) {    throw new AssertionError();  }}  }
class C{  public void testBug11976() throws Exception {  if (!versionMeetsMinimum(6,0)) {    return;  }  Properties props=new Properties();  props.setProperty("useConfigs","maxPerformance");  Connection maxPerfConn=getConnectionWithProps(props);  assertEquals(true,((com.mysql.jdbc.Connection)maxPerfConn).getElideSetAutoCommits());}  }
class C{  public void testAddHousehold_NoStreaming(){  HouseholdsImpl hhs=new HouseholdsImpl();  Household hh1=new HouseholdImpl(Id.create("1",Household.class));  Household hh2=new HouseholdImpl(Id.create("2",Household.class));  hhs.addHousehold(hh1);  assertEquals("Should have the first household added.",1,hhs.getHouseholds().size());  assertTrue("First household not present.",hhs.getHouseholds().containsValue(hh1));  hhs.addHousehold(hh2);  assertEquals("Should have the first AND second household added.",2,hhs.getHouseholds().size());  assertTrue("First household not present.",hhs.getHouseholds().containsValue(hh1));  assertTrue("Second household not present.",hhs.getHouseholds().containsValue(hh2));}  }
class C{  protected void validateSpIdentifier(java.lang.String[] param){}  }
class C{  static Comparator<File> typeAndRelativeFileName(File relativeTo){  return new CompositeComparator<File>(dotDotdotRest(relativeTo),FILE_TYPE,relativeFileName(relativeTo));}  }
class C{  public DNSName(String name) throws IOException {  if (name == null || name.length() == 0)   throw new IOException("DNS name must not be null");  if (name.indexOf(' ') != -1)   throw new IOException("DNS names or NameConstraints with blank components are not permitted");  if (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.')   throw new IOException("DNS names or NameConstraints may not begin or end with a .");  for (int endIndex, startIndex=0; startIndex < name.length(); startIndex=endIndex + 1) {    endIndex=name.indexOf('.',startIndex);    if (endIndex < 0) {      endIndex=name.length();    }    if ((endIndex - startIndex) < 1)     throw new IOException("DNSName SubjectAltNames with empty components are not permitted");    if (alpha.indexOf(name.charAt(startIndex)) < 0)     throw new IOException("DNSName components must begin with a letter");    for (int nonStartIndex=startIndex + 1; nonStartIndex < endIndex; nonStartIndex++) {      char x=name.charAt(nonStartIndex);      if ((alphaDigitsAndHyphen).indexOf(x) < 0)       throw new IOException("DNSName components must consist of letters, digits, and hyphens");    }  }  this.name=name;}  }
class C{  private void rotate(float degrees,boolean animate){  if (animate) {    mRotateRunnable.start(degrees);  } else {    mRotation+=degrees;    mMatrix.postRotate(degrees,getWidth() / 2,getHeight() / 2);    invalidate();  }}  }
class C{  public String summarizeComment(){  if (comment == null)   return null;  String[] lines=comment.split("\\r?\\n");  return lines[0];}  }
class C{  private boolean handleParentProc(int pid,FileDescriptor[] descriptors,FileDescriptor pipeFd,Arguments parsedArgs){  if (pid > 0) {    setChildPgid(pid);  }  if (descriptors != null) {    for (    FileDescriptor fd : descriptors) {      IoUtils.closeQuietly(fd);    }  }  boolean usingWrapper=false;  if (pipeFd != null && pid > 0) {    DataInputStream is=new DataInputStream(new FileInputStream(pipeFd));    int innerPid=-1;    try {      innerPid=is.readInt();    } catch (    IOException ex) {      Log.w(TAG,"Error reading pid from wrapped process, child may have died",ex);    } finally {      try {        is.close();      } catch (      IOException ex) {      }    }    if (innerPid > 0) {      int parentPid=innerPid;      while (parentPid > 0 && parentPid != pid) {        parentPid=Process.getParentPid(parentPid);      }      if (parentPid > 0) {        Log.i(TAG,"Wrapped process has pid " + innerPid);        pid=innerPid;        usingWrapper=true;      } else {        Log.w(TAG,"Wrapped process reported a pid that is not a child of " + "the process that we forked: childPid=" + pid + " innerPid="+ innerPid);      }    }  }  try {    mSocketOutStream.writeInt(pid);    mSocketOutStream.writeBoolean(usingWrapper);  } catch (  IOException ex) {    Log.e(TAG,"Error reading from command socket",ex);    return true;  }  return false;}  }
class C{  public static boolean isLocal(Command command){  checkNotNull(command,"command must be non-null");  return command.getExecutionSystem().equals(ExecutionSystems.getDefault());}  }
class C{  public void recordControllerEstimateCostOpt(RVMMethod method,String choiceDesc,double compilationTime,double futureTime){  if (Controller.options.LOGGING_LEVEL >= 3) {    printlnToLogWithTimePrefix("Estimated cost of OPT compiling " + method + " at "+ choiceDesc+ " is "+ compilationTime+ ", total future time is "+ futureTime);  }}  }
class C{  public void flush() throws IOException {  dataOutput.flush();}  }
class C{  public static Coordinate[] nearestPoints(Geometry g0,Geometry g1){  DistanceOp distOp=new DistanceOp(g0,g1);  return distOp.nearestPoints();}  }
class C{  private PlacementTask sendPlaceRequest(Resource resource) throws RpcException {  PhotonControllerXenonRestClient photonControllerXenonRestClient=taskCommand.getPhotonControllerXenonRestClient();  logger.info("place request resource: {}",resource);  PlacementTask placementTask=new PlacementTask();  placementTask.resource=resource;  placementTask.taskState=new TaskState();  placementTask.taskState.isDirect=true;  Operation placementResponse=photonControllerXenonRestClient.post(PlacementTaskService.FACTORY_LINK,placementTask,PLACE_REQUEST_TIMEOUT_IN_MICROS);  PlacementTask taskResponse=placementResponse.getBody(PlacementTask.class);  SchedulerErrorCodeToExceptionMapper.mapErrorCodeToException(taskResponse.resultCode,taskResponse.error);  return taskResponse;}  }
class C{  public String sqlObjectDetail_dropTemporaryColumn(String vendorName,String catalogName,String schemaName,String tableName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlObjectDetail_dropTemporaryColumn(catalogName,schemaName,tableName,getTemporaryColumnName());}  }
class C{  public static void putString(Context context,String key,String value){  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putString(key,value);  editor.commit();}  }
class C{  public void show(){  JFrame f=new JFrame();  f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  f.setVisible(true);  JLabel label=null;  while (true) {    for (int i=0; i < this.frames.size(); i++) {      Frame frame=this.frames.get(i);      if (label == null) {        label=new JLabel(new ImageIcon(frame.image));        f.getContentPane().add(label);        f.pack();      } else {        label.getGraphics().drawImage(frame.image,0,0,label);      }      try {        Thread.sleep(frame.delayMillis);      } catch (      InterruptedException e) {      }    }  }}  }
class C{  @ResponseBody @RequestMapping(value="/signin",method=RequestMethod.POST) public JsonResponse signin(@RequestBody JsonInputForAdmin input){  try {    User user=new User();    user.setLogin(input.getLogin());    user.setEmail(input.getEmail());    user.setLastName(input.getLastName());    user.setFirstName(input.getFirstName());    user.setPassword(input.getPassword());    user.setOrganization(input.getOrganization());    logger.debug("UserController - User : " + user);    userService.create(user);  } catch (  ServiceException|CheckException e) {    return new HttpErrorServer(e.getMessage());  }  logger.info("Signin successfull");  JsonResponse response=new HttpOk();  return response;}  }
class C{  public int[][] generateNRandomSets(int n,int p,int N){  int[][] distinctSets=generateDistinctRandomSets(n,p,N);  if (distinctSets.length == N) {    return distinctSets;  } else   if (distinctSets.length > N) {    throw new RuntimeException("generateDistinctRandomSets generated more than " + N + " distinct sets when asked for "+ N+ "; note n="+ n+ " p="+ p);  }  int[][] randomSets=new int[N][];  for (int i=0; i < N; i++) {    randomSets[i]=distinctSets[random.nextInt(distinctSets.length)];  }  return randomSets;}  }
class C{  public ArtifactFile(final String name,final byte[] content){  this(name,"",null,content);}  }
class C{  public IntroduceParameterObjectDescriptor(){  super(IJavaRefactorings.INTRODUCE_PARAMETER_OBJECT);}  }
class C{  public RecyclerViewMaterialAdapter(RecyclerView.Adapter adapter){  this.mAdapter=adapter;  registerAdapterObserver();}  }
class C{  public static long convertStringToMemorySizeLong(String memSize){  long result=0;  if (memSize.endsWith("K")) {    result=Long.valueOf(StringUtils.remove(memSize,'K')) * 1000;  } else   if (memSize.endsWith("M")) {    result=Long.valueOf(StringUtils.remove(memSize,'M')) * 1000 * 1000;  } else   if (memSize.endsWith("G")) {    result=Long.valueOf(StringUtils.remove(memSize,'G')) * 1000 * 1000* 1000;  }  return result;}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.212 -0400",hash_original_method="74FDB871002DCF784A8E7581BFA34847",hash_generated_method="9BD449AC9D3F5F732F975FC1CA0D3CE4") public static void moveFileToDirectory(File srcFile,File destDir,boolean createDestDir) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  }  if (!destDir.exists() && createDestDir) {    destDir.mkdirs();  }  if (!destDir.exists()) {    throw new FileNotFoundException("Destination directory '" + destDir + "' does not exist [createDestDir="+ createDestDir+ "]");  }  if (!destDir.isDirectory()) {    throw new IOException("Destination '" + destDir + "' is not a directory");  }  moveFile(srcFile,new File(destDir,srcFile.getName()));}  }
class C{  public void writeBranchRatesModel(PartitionClockModel model,XMLWriter writer){  setModelPrefix(model.getPrefix());  Attribute[] attributes;  String treePrefix;  List<PartitionTreeModel> activeTrees=options.getPartitionTreeModels(options.getDataPartitions(model));switch (model.getClockType()) {case STRICT_CLOCK:    writer.writeComment("The strict clock (Uniform rates across branches)");  writer.writeOpenTag(StrictClockBranchRatesParser.STRICT_CLOCK_BRANCH_RATES,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + BranchRateModel.BRANCH_RATES)});writeParameter("rate","clock.rate",model,writer);writer.writeCloseTag(StrictClockBranchRatesParser.STRICT_CLOCK_BRANCH_RATES);for (PartitionTreeModel tree : activeTrees) {treePrefix=tree.getPrefix();PartitionClockModelTreeModelLink clockTree=options.getPartitionClockTreeLink(model,tree);if (clockTree == null) {throw new IllegalArgumentException("Cannot find PartitionClockTreeLink, given clock model = " + model.getName() + ", tree model = "+ tree.getName());}writer.writeText("");writer.writeOpenTag(RateStatisticParser.RATE_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,options.noDuplicatedPrefix(modelPrefix,treePrefix) + "meanRate"),new Attribute.Default<String>("name",options.noDuplicatedPrefix(modelPrefix,treePrefix) + "meanRate"),new Attribute.Default<String>("mode","mean"),new Attribute.Default<String>("internal","true"),new Attribute.Default<String>("external","true")});writer.writeIDref(TreeModel.TREE_MODEL,treePrefix + TreeModel.TREE_MODEL);writer.writeIDref(StrictClockBranchRatesParser.STRICT_CLOCK_BRANCH_RATES,options.noDuplicatedPrefix(modelPrefix,treePrefix) + BranchRateModel.BRANCH_RATES);writer.writeCloseTag(RateStatisticParser.RATE_STATISTIC);}break;case UNCORRELATED:writer.writeComment("The uncorrelated relaxed clock (Drummond, Ho, Phillips & Rambaut (2006) PLoS Biology 4, e88 )");String branchRateElementName=DiscretizedBranchRatesParser.DISCRETIZED_BRANCH_RATES;if (model.isContinuousQuantile()) {writer.writeComment("  Continuous quantile implementation (Li & Drummond (2012) Mol Biol Evol 29:751-61)");branchRateElementName=ContinuousBranchRatesParser.CONTINUOUS_BRANCH_RATES;}for (PartitionTreeModel tree : activeTrees) {treePrefix=tree.getPrefix();PartitionClockModelTreeModelLink clockTree=options.getPartitionClockTreeLink(model,tree);if (clockTree == null) {throw new IllegalArgumentException("Cannot find PartitionClockTreeLink, given clock model = " + model.getName() + ", tree model = "+ tree.getName());}attributes=new Attribute[]{new Attribute.Default<String>(XMLParser.ID,options.noDuplicatedPrefix(modelPrefix,treePrefix) + BranchRateModel.BRANCH_RATES)};writer.writeOpenTag(branchRateElementName,attributes);writer.writeIDref(TreeModel.TREE_MODEL,treePrefix + TreeModel.TREE_MODEL);writer.writeOpenTag("distribution");switch (model.getClockDistributionType()) {case LOGNORMAL:writer.writeOpenTag(LogNormalDistributionModelParser.LOGNORMAL_DISTRIBUTION_MODEL,new Attribute.Default<String>(LogNormalDistributionModelParser.MEAN_IN_REAL_SPACE,"true"));if (activeTrees.indexOf(tree) < 1) {writeParameter("mean",ClockType.UCLD_MEAN,model,writer);writeParameter("stdev",ClockType.UCLD_STDEV,model,writer);} else {writeParameterRef("mean",modelPrefix + ClockType.UCLD_MEAN,writer);writeParameterRef("stdev",modelPrefix + ClockType.UCLD_STDEV,writer);}writer.writeCloseTag(LogNormalDistributionModelParser.LOGNORMAL_DISTRIBUTION_MODEL);break;case GAMMA:writer.writeOpenTag(GammaDistributionModel.GAMMA_DISTRIBUTION_MODEL);if (activeTrees.indexOf(tree) < 1) {writeParameter("mean",ClockType.UCGD_MEAN,model,writer);writeParameter("shape",ClockType.UCGD_SHAPE,model,writer);} else {writeParameterRef("mean",modelPrefix + ClockType.UCGD_MEAN,writer);writeParameterRef("shape",modelPrefix + ClockType.UCGD_SHAPE,writer);}writer.writeCloseTag(GammaDistributionModel.GAMMA_DISTRIBUTION_MODEL);break;case CAUCHY:throw new UnsupportedOperationException("Uncorrelated Cauchy model not implemented yet");case EXPONENTIAL:writer.writeOpenTag(ExponentialDistributionModel.EXPONENTIAL_DISTRIBUTION_MODEL);if (activeTrees.indexOf(tree) < 1) {writeParameter("mean",ClockType.UCED_MEAN,model,writer);} else {writeParameterRef("mean",modelPrefix + ClockType.UCED_MEAN,writer);}writer.writeCloseTag(ExponentialDistributionModel.EXPONENTIAL_DISTRIBUTION_MODEL);break;}writer.writeCloseTag("distribution");if (model.isContinuousQuantile()) {writer.writeOpenTag(ContinuousBranchRatesParser.RATE_QUANTILES);writeParameter(clockTree.getParameter("branchRates.quantiles"),-1,writer);writer.writeCloseTag(ContinuousBranchRatesParser.RATE_QUANTILES);writer.writeCloseTag(branchRateElementName);} else {writer.writeOpenTag(DiscretizedBranchRatesParser.RATE_CATEGORIES);writeParameter(clockTree.getParameter("branchRates.categories"),-1,writer);writer.writeCloseTag(DiscretizedBranchRatesParser.RATE_CATEGORIES);writer.writeCloseTag(branchRateElementName);}writer.writeText("");writer.writeOpenTag(RateStatisticParser.RATE_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,options.noDuplicatedPrefix(modelPrefix,treePrefix) + "meanRate"),new Attribute.Default<String>("name",options.noDuplicatedPrefix(modelPrefix,treePrefix) + "meanRate"),new Attribute.Default<String>("mode","mean"),new Attribute.Default<String>("internal","true"),new Attribute.Default<String>("external","true")});writer.writeIDref(TreeModel.TREE_MODEL,treePrefix + TreeModel.TREE_MODEL);writer.writeIDref(branchRateElementName,options.noDuplicatedPrefix(modelPrefix,treePrefix) + BranchRateModel.BRANCH_RATES);writer.writeCloseTag(RateStatisticParser.RATE_STATISTIC);writer.writeText("");writer.writeOpenTag(RateStatisticParser.RATE_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,options.noDuplicatedPrefix(modelPrefix,treePrefix) + RateStatisticParser.COEFFICIENT_OF_VARIATION),new Attribute.Default<String>("name",options.noDuplicatedPrefix(modelPrefix,treePrefix) + RateStatisticParser.COEFFICIENT_OF_VARIATION),new Attribute.Default<String>("mode",RateStatisticParser.COEFFICIENT_OF_VARIATION),new Attribute.Default<String>("internal","true"),new Attribute.Default<String>("external","true")});writer.writeIDref(TreeModel.TREE_MODEL,treePrefix + TreeModel.TREE_MODEL);writer.writeIDref(branchRateElementName,options.noDuplicatedPrefix(modelPrefix,treePrefix) + BranchRateModel.BRANCH_RATES);writer.writeCloseTag(RateStatisticParser.RATE_STATISTIC);writer.writeText("");writer.writeOpenTag(RateCovarianceStatisticParser.RATE_COVARIANCE_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,options.noDuplicatedPrefix(modelPrefix,treePrefix) + "covariance"),new Attribute.Default<String>("name",options.noDuplicatedPrefix(modelPrefix,treePrefix) + "covariance")});writer.writeIDref(TreeModel.TREE_MODEL,treePrefix + TreeModel.TREE_MODEL);writer.writeIDref(branchRateElementName,options.noDuplicatedPrefix(modelPrefix,treePrefix) + BranchRateModel.BRANCH_RATES);writer.writeCloseTag(RateCovarianceStatisticParser.RATE_COVARIANCE_STATISTIC);}break;case AUTOCORRELATED:writer.writeComment("The autocorrelated relaxed clock (Rannala & Yang, 2007)");for (PartitionTreeModel tree : activeTrees) {treePrefix=tree.getPrefix();PartitionClockModelTreeModelLink clockTree=options.getPartitionClockTreeLink(model,tree);if (clockTree == null) {throw new IllegalArgumentException("Cannot find PartitionClockTreeLink, given clock model = " + model.getName() + ", tree model = "+ tree.getName());}attributes=new Attribute[]{new Attribute.Default<String>(XMLParser.ID,options.noDuplicatedPrefix(modelPrefix,treePrefix) + BranchRateModel.BRANCH_RATES),new Attribute.Default<String>("episodic","false"),new Attribute.Default<String>("logspace","true")};writer.writeOpenTag(ACLikelihoodParser.AC_LIKELIHOOD,attributes);writer.writeIDref(TreeModel.TREE_MODEL,treePrefix + TreeModel.TREE_MODEL);writer.writeOpenTag(RateEvolutionLikelihood.RATES,new Attribute[]{new Attribute.Default<String>(TreeModelParser.ROOT_NODE,"false"),new Attribute.Default<String>(TreeModelParser.INTERNAL_NODES,"true"),new Attribute.Default<String>(TreeModelParser.LEAF_NODES,"true")});writer.writeTag(ParameterParser.PARAMETER,new Attribute.Default<String>(XMLParser.ID,options.noDuplicatedPrefix(modelPrefix,treePrefix) + TreeModel.TREE_MODEL + "."+ TreeModelParser.NODE_RATES),true);writer.writeCloseTag(RateEvolutionLikelihood.RATES);writer.writeOpenTag(RateEvolutionLikelihood.ROOTRATE,new Attribute[]{new Attribute.Default<String>(TreeModelParser.ROOT_NODE,"true"),new Attribute.Default<String>(TreeModelParser.INTERNAL_NODES,"false"),new Attribute.Default<String>(TreeModelParser.LEAF_NODES,"false")});writer.writeTag(ParameterParser.PARAMETER,new Attribute.Default<String>(XMLParser.ID,options.noDuplicatedPrefix(modelPrefix,treePrefix) + TreeModel.TREE_MODEL + "."+ RateEvolutionLikelihood.ROOTRATE),true);writer.writeCloseTag(RateEvolutionLikelihood.ROOTRATE);writeParameter("variance","branchRates.var",clockTree,writer);writer.writeCloseTag(ACLikelihoodParser.AC_LIKELIHOOD);writer.writeText("");writer.writeOpenTag(CompoundParameterParser.COMPOUND_PARAMETER,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,options.noDuplicatedPrefix(modelPrefix,treePrefix) + TreeModel.TREE_MODEL + "."+ "allRates")});writer.writeIDref(ParameterParser.PARAMETER,options.noDuplicatedPrefix(modelPrefix,treePrefix) + TreeModel.TREE_MODEL + "."+ TreeModelParser.NODE_RATES);writer.writeIDref(ParameterParser.PARAMETER,options.noDuplicatedPrefix(modelPrefix,treePrefix) + TreeModel.TREE_MODEL + "."+ RateEvolutionLikelihood.ROOTRATE);writer.writeCloseTag(CompoundParameterParser.COMPOUND_PARAMETER);writer.writeText("");writer.writeOpenTag(RateStatisticParser.RATE_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,options.noDuplicatedPrefix(modelPrefix,treePrefix) + "meanRate"),new Attribute.Default<String>("name",options.noDuplicatedPrefix(modelPrefix,treePrefix) + "meanRate"),new Attribute.Default<String>("mode","mean"),new Attribute.Default<String>("internal","true"),new Attribute.Default<String>("external","true")});writer.writeIDref(TreeModel.TREE_MODEL,treePrefix + TreeModel.TREE_MODEL);writer.writeIDref(ACLikelihoodParser.AC_LIKELIHOOD,modelPrefix + BranchRateModel.BRANCH_RATES);writer.writeCloseTag(RateStatisticParser.RATE_STATISTIC);writer.writeText("");writer.writeOpenTag(RateStatisticParser.RATE_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + RateStatisticParser.COEFFICIENT_OF_VARIATION),new Attribute.Default<String>("name",options.noDuplicatedPrefix(modelPrefix,treePrefix) + RateStatisticParser.COEFFICIENT_OF_VARIATION),new Attribute.Default<String>("mode",RateStatisticParser.COEFFICIENT_OF_VARIATION),new Attribute.Default<String>("internal","true"),new Attribute.Default<String>("external","true")});writer.writeIDref(TreeModel.TREE_MODEL,treePrefix + TreeModel.TREE_MODEL);writer.writeIDref(ACLikelihoodParser.AC_LIKELIHOOD,modelPrefix + BranchRateModel.BRANCH_RATES);writer.writeCloseTag(RateStatisticParser.RATE_STATISTIC);writer.writeText("");writer.writeOpenTag(RateCovarianceStatisticParser.RATE_COVARIANCE_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,options.noDuplicatedPrefix(modelPrefix,treePrefix) + "covariance"),new Attribute.Default<String>("name",options.noDuplicatedPrefix(modelPrefix,treePrefix) + "covariance")});writer.writeIDref(TreeModel.TREE_MODEL,treePrefix + TreeModel.TREE_MODEL);writer.writeIDref(ACLikelihoodParser.AC_LIKELIHOOD,modelPrefix + BranchRateModel.BRANCH_RATES);writer.writeCloseTag(RateCovarianceStatisticParser.RATE_COVARIANCE_STATISTIC);}break;case RANDOM_LOCAL_CLOCK:writer.writeComment("The random local clock model (Drummond & Suchard, 2010)");if (activeTrees == null || activeTrees.size() != 1) {throw new IllegalArgumentException("A single random local clock cannot be applied to multiple trees.");}treePrefix=activeTrees.get(0).getPrefix();writer.writeOpenTag(RandomLocalClockModelParser.LOCAL_BRANCH_RATES,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + BranchRateModel.BRANCH_RATES),new Attribute.Default<String>("ratesAreMultipliers","false")});writer.writeIDref(TreeModel.TREE_MODEL,treePrefix + TreeModel.TREE_MODEL);writer.writeOpenTag("rates");writer.writeTag(ParameterParser.PARAMETER,new Attribute.Default<String>(XMLParser.ID,modelPrefix + ClockType.LOCAL_CLOCK + ".relativeRates"),true);writer.writeCloseTag("rates");writer.writeOpenTag("rateIndicator");writer.writeTag(ParameterParser.PARAMETER,new Attribute.Default<String>(XMLParser.ID,modelPrefix + ClockType.LOCAL_CLOCK + ".changes"),true);writer.writeCloseTag("rateIndicator");writeParameter("clockRate","clock.rate",model,writer);writer.writeCloseTag(RandomLocalClockModelParser.LOCAL_BRANCH_RATES);writer.writeText("");writer.writeOpenTag(SumStatisticParser.SUM_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + "rateChanges"),new Attribute.Default<String>("name",modelPrefix + "rateChangeCount"),new Attribute.Default<String>("elementwise","true")});writer.writeIDref(ParameterParser.PARAMETER,modelPrefix + ClockType.LOCAL_CLOCK + ".changes");writer.writeCloseTag(SumStatisticParser.SUM_STATISTIC);writer.writeText("");writer.writeOpenTag(RateStatisticParser.RATE_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,options.noDuplicatedPrefix(modelPrefix,treePrefix) + "meanRate"),new Attribute.Default<String>("name",options.noDuplicatedPrefix(modelPrefix,treePrefix) + "meanRate"),new Attribute.Default<String>("mode","mean"),new Attribute.Default<String>("internal","true"),new Attribute.Default<String>("external","true")});writer.writeIDref(TreeModel.TREE_MODEL,treePrefix + TreeModel.TREE_MODEL);writer.writeIDref(RandomLocalClockModelParser.LOCAL_BRANCH_RATES,modelPrefix + BranchRateModel.BRANCH_RATES);writer.writeCloseTag(RateStatisticParser.RATE_STATISTIC);writer.writeText("");writer.writeOpenTag(RateStatisticParser.RATE_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,options.noDuplicatedPrefix(modelPrefix,treePrefix) + RateStatisticParser.COEFFICIENT_OF_VARIATION),new Attribute.Default<String>("name",options.noDuplicatedPrefix(modelPrefix,treePrefix) + RateStatisticParser.COEFFICIENT_OF_VARIATION),new Attribute.Default<String>("mode",RateStatisticParser.COEFFICIENT_OF_VARIATION),new Attribute.Default<String>("internal","true"),new Attribute.Default<String>("external","true")});writer.writeIDref(TreeModel.TREE_MODEL,treePrefix + TreeModel.TREE_MODEL);writer.writeIDref(RandomLocalClockModelParser.LOCAL_BRANCH_RATES,modelPrefix + BranchRateModel.BRANCH_RATES);writer.writeCloseTag(RateStatisticParser.RATE_STATISTIC);writer.writeText("");writer.writeOpenTag(RateCovarianceStatisticParser.RATE_COVARIANCE_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,options.noDuplicatedPrefix(modelPrefix,treePrefix) + "covariance"),new Attribute.Default<String>("name",options.noDuplicatedPrefix(modelPrefix,treePrefix) + "covariance")});writer.writeIDref(TreeModel.TREE_MODEL,treePrefix + TreeModel.TREE_MODEL);writer.writeIDref(RandomLocalClockModelParser.LOCAL_BRANCH_RATES,modelPrefix + BranchRateModel.BRANCH_RATES);writer.writeCloseTag(RateCovarianceStatisticParser.RATE_COVARIANCE_STATISTIC);break;case FIXED_LOCAL_CLOCK:writer.writeComment("The a priori local clock model (Yoder & Yang, 2000)");for (PartitionTreeModel tree : activeTrees) {treePrefix=tree.getPrefix();PartitionClockModelTreeModelLink clockTree=options.getPartitionClockTreeLink(model,tree);if (clockTree == null) {throw new IllegalArgumentException("Cannot find PartitionClockTreeLink, given clock model = " + model.getName() + ", tree model = "+ tree.getName());}writer.writeOpenTag(LocalClockModelParser.LOCAL_CLOCK_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,modelPrefix + BranchRateModel.BRANCH_RATES)});writer.writeIDref(TreeModel.TREE_MODEL,treePrefix + TreeModel.TREE_MODEL);writeParameter(LocalClockModelParser.RATE,"clock.rate",model,writer);for (Taxa taxonSet : options.taxonSets) {if (options.taxonSetsMono.get(taxonSet)) {String parameterName=taxonSet.getId() + ".rate";writer.writeOpenTag(LocalClockModelParser.CLADE,new Attribute[]{new Attribute.Default<String>("includeStem",options.taxonSetsIncludeStem.get(taxonSet).toString())});writeParameter(parameterName,model,writer);writer.writeIDref(TaxaParser.TAXA,taxonSet.getId());writer.writeCloseTag(LocalClockModelParser.CLADE);}}writer.writeCloseTag(LocalClockModelParser.LOCAL_CLOCK_MODEL);writer.writeText("");writer.writeOpenTag(RateStatisticParser.RATE_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,options.noDuplicatedPrefix(modelPrefix,treePrefix) + "meanRate"),new Attribute.Default<String>("name",options.noDuplicatedPrefix(modelPrefix,treePrefix) + "meanRate"),new Attribute.Default<String>("mode","mean"),new Attribute.Default<String>("internal","true"),new Attribute.Default<String>("external","true")});writer.writeIDref(TreeModel.TREE_MODEL,treePrefix + TreeModel.TREE_MODEL);writer.writeIDref(LocalClockModelParser.LOCAL_CLOCK_MODEL,modelPrefix + BranchRateModel.BRANCH_RATES);writer.writeCloseTag(RateStatisticParser.RATE_STATISTIC);writer.writeText("");writer.writeOpenTag(RateStatisticParser.RATE_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,options.noDuplicatedPrefix(modelPrefix,treePrefix) + RateStatisticParser.COEFFICIENT_OF_VARIATION),new Attribute.Default<String>("name",options.noDuplicatedPrefix(modelPrefix,treePrefix) + RateStatisticParser.COEFFICIENT_OF_VARIATION),new Attribute.Default<String>("mode",RateStatisticParser.COEFFICIENT_OF_VARIATION),new Attribute.Default<String>("internal","true"),new Attribute.Default<String>("external","true")});writer.writeIDref(TreeModel.TREE_MODEL,treePrefix + TreeModel.TREE_MODEL);writer.writeIDref(LocalClockModelParser.LOCAL_CLOCK_MODEL,modelPrefix + BranchRateModel.BRANCH_RATES);writer.writeCloseTag(RateStatisticParser.RATE_STATISTIC);writer.writeText("");writer.writeOpenTag(RateCovarianceStatisticParser.RATE_COVARIANCE_STATISTIC,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,options.noDuplicatedPrefix(modelPrefix,treePrefix) + "covariance"),new Attribute.Default<String>("name",options.noDuplicatedPrefix(modelPrefix,treePrefix) + "covariance")});writer.writeIDref(TreeModel.TREE_MODEL,treePrefix + TreeModel.TREE_MODEL);writer.writeIDref(LocalClockModelParser.LOCAL_CLOCK_MODEL,modelPrefix + BranchRateModel.BRANCH_RATES);writer.writeCloseTag(RateCovarianceStatisticParser.RATE_COVARIANCE_STATISTIC);}break;default :throw new IllegalArgumentException("Unknown clock model");}}  }
class C{  public static void dumpStack(final Host host){  for (int v=0; v < host.getVMCount(); v++) {    host.getVM(v).invoke(org.apache.geode.test.dunit.ThreadUtils.class,"dumpStack");  }}  }
class C{  public static float min(float x,float y){  return (x < y) ? x : y;}  }
class C{  public MLOutput execute(String dmlScriptFilePath,String[] args,boolean parsePyDML,String configFilePath) throws IOException, DMLException, ParseException {  return compileAndExecuteScript(dmlScriptFilePath,args,false,parsePyDML,configFilePath);}  }
class C{  public void cancelEditing(){  TreeUI tree=getUI();  if (tree != null)   tree.cancelEditing(this);}  }
class C{  public List<Event> decodeTrackerEvents(final byte[] data,final Replay replay){  final VersionedDecoder decoder=new VersionedDecoder(data,typeInfos,true);  return decodeEventStream(decoder,trackerEventIdTypeid,trackerEventTypeMap,false,new TrackerEventFactory(replay),replay.getPlayerIdUserIdMap());}  }
class C{  public static String mangleNativeMethod(String owner,String name){  return mangleNativeMethod(owner,name,null);}  }
class C{  public void zipStorageData(StorageData storageData,CmrRepositoryDefinition cmrRepositoryDefinition,String zipFileName,boolean compressBefore,SubMonitor subMonitor) throws BusinessException, IOException, SerializationException {  Path zipPath=Paths.get(zipFileName);  if (Files.exists(zipPath)) {    Files.delete(zipPath);  }  try (final ZipOutputStream zos=new ZipOutputStream(Files.newOutputStream(zipPath,StandardOpenOption.CREATE,StandardOpenOption.WRITE))){    subMonitor.setTaskName("Downloading and packing storage files..");    dataRetriever.downloadAndZipStorageFiles(cmrRepositoryDefinition,storageData,zos,compressBefore,false,subMonitor,StorageFileType.values());    LocalStorageData localStorageData=new LocalStorageData(storageData);    localStorageData.setFullyDownloaded(true);    String fileName=localStorageData.getId() + StorageFileType.LOCAL_STORAGE_FILE.getExtension();    ZipEntry zipEntry=new ZipEntry(fileName);    zos.putNextEntry(zipEntry);    serializeDataToOutputStream(localStorageData,zos,false);    zos.closeEntry();  } catch (  IOException|BusinessException|SerializationException e) {    Files.deleteIfExists(zipPath);    throw e;  }}  }
class C{  public LinearEquations(double[][] m,double[][] c) throws IllegalDimension {  int n=m.length;  if (m[0].length != n)   throw new IllegalDimension("Illegal system: a" + n + " by "+ m[0].length+ " matrix is not a square matrix");  if (c[0].length != n)   throw new IllegalDimension("Illegal system: a " + n + " by "+ n+ " matrix cannot build a system with a "+ c[0].length+ "-dimensional vector");  rows=new double[n][n + c.length];  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++)     rows[i][j]=m[i][j];    for (int j=0; j < c.length; j++)     rows[i][n + j]=c[j][i];  }}  }
class C{  public void copyPreviousNetworkContext(PortAllocationContext previous){  _alreadyAllocatedDirectors=previous._alreadyAllocatedDirectors;  _alreadyAllocatedCpus=previous._alreadyAllocatedCpus;  _alreadyAllocatedDirectorTypes=previous._alreadyAllocatedDirectorTypes;  ;  _alreadyAllocatedEngines=previous._alreadyAllocatedEngines;  _alreadyAllocatedSwitches=previous._alreadyAllocatedSwitches;}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public FillArrayDataPayloadDecodedInstruction(InstructionCodec format,int opcode,byte[] data){  this(format,opcode,data,data.length,1);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  double z;  double noData;  int progress;  int i;  double minVal, maxVal;  int numBins=1024;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  minVal=Double.parseDouble(args[2]);  maxVal=Double.parseDouble(args[3]);  numBins=Integer.parseInt(args[4]);  int numBinsLessOne=numBins - 1;  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int nRows=image.getNumberRows();    int nCols=image.getNumberColumns();    noData=image.getNoDataValue();    double scaleFactor=numBins / (maxVal - minVal);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,noData);    output.setPreferredPalette(image.getPreferredPalette());    double[] data=null;    for (row=0; row < nRows; row++) {      data=image.getRowValues(row);      for (col=0; col < nCols; col++) {        if (data[col] != noData) {          z=(int)(data[col] - minVal) * scaleFactor;          if (z < 0) {            z=0;          }          if (z > numBinsLessOne) {            z=numBinsLessOne;          }          output.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress(progress);    }    image.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isCaseSensitive(){  return caseSensitive;}  }
class C{  public PaypalResponse(String response) throws ParserConfigurationException, SAXException, IOException {  originalResponse=response;  final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  factory.setNamespaceAware(true);  factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);  final InputStream responseStream=new ByteArrayInputStream(response.getBytes());  final DocumentBuilder builder=factory.newDocumentBuilder();  final Document responseDocument=builder.parse(responseStream);  final Node documentElement=responseDocument.getDocumentElement();  final NodeList childs=documentElement.getChildNodes();  for (int i=0; i < childs.getLength(); i++) {    final Node child=childs.item(i);    if (checkNodeName(child,"preapprovalKey")) {      preapprovalKey=child.getTextContent().trim();    } else     if (checkNodeName(child,"responseEnvelope")) {      final NodeList childs2=child.getChildNodes();      for (int i2=0; i2 < childs2.getLength(); i2++) {        final Node child2=childs2.item(i2);        if (checkNodeName(child2,"ack")) {          status=child2.getTextContent().trim();        } else         if (checkNodeName(child2,"message")) {          error=child2.getTextContent().trim();        }      }    }  }}  }
class C{  public void clear(){  for (int i=0; i < this.getSeriesCount(); i++) {    this.getSeries(i).clear();  }}  }
class C{  private void fillPluginsMenu(){  final List<IGraphMenuPlugin> plugins=new ArrayList<IGraphMenuPlugin>();  for (  @SuppressWarnings("rawtypes") final IPlugin plugin : PluginInterface.instance().getPluginRegistry()) {    if (plugin instanceof IGraphMenuPlugin) {      plugins.add((IGraphMenuPlugin)plugin);    }  }  add(CActionProxy.proxy(new CActionGraphScripting(m_model.getGraphPanel())));  add(CActionProxy.proxy(new CActionOpenLogConsole()));  addSeparator();  for (  final IGraphMenuPlugin plugin : plugins) {    extendPluginMenu(plugin);  }}  }
class C{  public LocalDateTime roundHalfCeilingCopy(){  return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));}  }
class C{  private static void usage(){  System.out.println("Usage: WebmasterToolsClient --username <username>" + " --password <password>");  System.out.println("\nA simple application that lists sites, " + "and Sitemaps using the provided username and " + "password for authentication.");}  }
class C{  @Override public boolean listenProgress(){  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static float readFloat(){  return scanner.nextFloat();}  }
class C{  public AccessibilityViewCheckException(List<AccessibilityViewCheckResult> results,AccessibilityCheckResultDescriptor resultDescriptor){  super();  if (results == null || results.isEmpty()) {    throw new IllegalArgumentException("AccessibilityViewCheckException requires at least 1 AccessibilityViewCheckResult");  }  if (resultDescriptor == null) {    throw new IllegalArgumentException("Result descriptor cannot be null");  }  this.results=results;  this.resultDescriptor=resultDescriptor;}  }
class C{  public Interval toInterval(DateTimeZone zone){  zone=DateTimeUtils.getZone(zone);  return toDateMidnight(zone).toInterval();}  }
class C{  public static String null2Str(String s,String def){  if (isNull(s))   return def; else   return s.trim();}  }
class C{  public static strictfp double minus2PI_strict(final double angRad){  if (angRad < Math.PI) {    return angRad - TWOPI_LO - TWOPI_HI;  } else {    return angRad - TWOPI_HI - TWOPI_LO;  }}  }
class C{  public Joiner join(Class<? extends DataObject> clazz,String alias,URI... ids){  return join(clazz,alias,new ArrayList<URI>(Arrays.asList(ids)));}  }
class C{  public int fieldLength() throws FormatException {  if (numberOfElements == -1) {    return -1;  }switch (fieldType) {case VPF_COLUMN_TEXT:case VPF_COLUMN_TEXTL1:case VPF_COLUMN_TEXTL3:case VPF_COLUMN_TEXTL2:    return numberOfElements;case VPF_COLUMN_FLOAT:  return 4;case VPF_COLUMN_DOUBLE:return 8;case VPF_COLUMN_SHORT:return 2;case VPF_COLUMN_INT:return 4;case VPF_COLUMN_FLOAT_2COORD:return numberOfElements * 8;case VPF_COLUMN_DOUBLE_2COORD:return numberOfElements * 16;case VPF_COLUMN_FLOAT_3COORD:return numberOfElements * 12;case VPF_COLUMN_DOUBLE_3COORD:return numberOfElements * 24;case VPF_COLUMN_DATE:return 20;case VPF_COLUMN_NULL:return 0;case VPF_COLUMN_TRIPLET:return -1;default :{throw new FormatException("Unknown field type: " + fieldType);}}}  }
class C{  protected void rebind(String namespaceURI,String localName,Element e){  AbstractDocument doc=(AbstractDocument)e.getOwnerDocument();  if (doc != document) {    XBLManager xm=doc.getXBLManager();    if (xm instanceof DefaultXBLManager) {      ((DefaultXBLManager)xm).rebind(namespaceURI,localName,e);      return;    }  }  if (e instanceof BindableElement && namespaceURI.equals(e.getNamespaceURI()) && localName.equals(e.getLocalName())) {    DefinitionRecord defRec=getActiveDefinition(e.getNamespaceURI(),e.getLocalName());    setActiveDefinition((BindableElement)e,defRec);  } else {    NodeList nl=getXblScopedChildNodes(e);    for (int i=0; i < nl.getLength(); i++) {      Node n=nl.item(i);      if (n.getNodeType() == Node.ELEMENT_NODE) {        rebind(namespaceURI,localName,(Element)n);      }    }  }}  }
class C{  public static boolean parse(String[] options,char option,boolean defValue) throws Exception {  return parse(options,"" + option,defValue);}  }
class C{  public CloudListModel(String type,int visibilityScope,int index,String queryValue,boolean ascending){  this.type=type;  this.visibilityScope=visibilityScope;  this.index=index;  this.queryValue=queryValue;  this.ascending=ascending;  init();}  }
class C{  protected int read(byte[] buffer,int offset,int length) throws IOException {  return mTiffStream.read(buffer,offset,length);}  }
class C{  private void startGps(){  wakeLock=SystemUtils.acquireWakeLock(this,wakeLock);  registerLocationListener();  showNotification(true);}  }
class C{  public static Object deserializeObject(String objectString) throws IOException, ClassNotFoundException {  byte[] data=Base64.getDecoder().decode(objectString);  ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(data));  Object o=ois.readObject();  ois.close();  return o;}  }
class C{  public Object removeAttribute(String name){  if (_attributes == null)   return null; else   return _attributes.remove(name);}  }
class C{  public void testSubmitNullCallable(){  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    try {      @SuppressWarnings("unused") Future<String> future=e.submit((Callable<String>)null);      shouldThrow();    } catch (    NullPointerException success) {    }  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public void ensureCapacity(int capacity){  if (mGarbage && mSize >= mKeys.length) {    gc();  }  if (mKeys.length < capacity) {    int[] nkeys=new int[capacity];    Object[] nvalues=new Object[capacity];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }}  }
class C{  @Override public String toString(){  return "cudaChannelFormatDesc[" + "x=" + x + ","+ "y="+ y+ ","+ "z="+ z+ ","+ "w="+ w+ ","+ "f="+ cudaChannelFormatKind.stringFor(f)+ "]";}  }
class C{  protected void tearDown(){  try {    if (s != null)     s.close();  } catch (  Exception e) {  }  try {    if (ss != null)     ss.close();  } catch (  Exception e) {  }  try {    if (t != null)     t.interrupt();  } catch (  Exception e) {  }}  }
class C{  public String addExtension(String testFileName){  return testFileName + ".svg";}  }
class C{  public void testCase18(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};  byte bBytes[]={27,-15,65,39,100};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-13,20,-74,-57,-27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.remainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  ConfProxyUtilGenerateAnchor(){  super("confproxy-generate-anchor");  getOptions().addOption(PROXY_INSTANCE).addOption("f","filename",true,"Filename of the generated anchor");}  }
class C{  public void copyInto(byte[] dst,int off,int len){  System.arraycopy(data.array(),0,dst,off,len);}  }
class C{  @SuppressWarnings("signedness") public static int compareUnsigned(@Unsigned short x,@Unsigned short y){  return compareUnsigned(toUnsignedInt(x),toUnsignedInt(y));}  }
class C{  public void logWarning(String message){  logMessage(IStatus.WARNING,message,null);}  }
class C{  public void addContext(String str){  if (str == null) {    throw new NullPointerException("str == null");  }  context.append(str);  if (!str.endsWith("\n")) {    context.append('\n');  }}  }
class C{  public static String resolveVariables(String input){  return resolveVariables(input,null,true);}  }
class C{  public boolean isLocal(){  return true;}  }
class C{  public void clear(){  this.bitmap.clear();}  }
class C{  public final CC pad(String pad){  setPadding(pad != null ? ConstraintParser.parseInsets(pad,false) : null);  return this;}  }
class C{  String findParmValue(Element e,String name){  List<Element> l=e.getChildren("parameter");  for (int i=0; i < l.size(); i++) {    Element n=l.get(i);    if (n.getAttributeValue("name").equals(name)) {      return n.getTextTrim();    }  }  return null;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public EmailListRecipientEntry(BaseEntry<?> sourceEntry){  super(sourceEntry);  getCategories().add(EMAILLIST_RECIPIENT_CATEGORY);}  }
class C{  public NodeSequence(Object nodeVector){  super(nodeVector);  if (nodeVector instanceof NodeVector) {    SetVector((NodeVector)nodeVector);  }  if (null != nodeVector) {    assertion(nodeVector instanceof NodeVector,"Must have a NodeVector as the object for NodeSequence!");    if (nodeVector instanceof DTMIterator) {      setIter((DTMIterator)nodeVector);      m_last=((DTMIterator)nodeVector).getLength();    }  }}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(getPanelName(getContextIndex()));  this.add(getPanelSession(),getPanelSession().getName());}  }
class C{  public boolean matchesSecondGlyph(int glyphCode,char glyphUnicode){  if (secondGlyphCodes != null) {    int pt=Arrays.binarySearch(secondGlyphCodes,glyphCode);    if (pt >= 0)     return true;  }  for (int i=0; i < secondUnicodeRanges.length; i++) {    if (secondUnicodeRanges[i].contains(glyphUnicode))     return true;  }  return false;}  }
class C{  public void printWorkerSummary(){  Collection<WorkerState> workerStateCollection=statsUtil.getWorkerStateMap().values();  if (workerStateCollection.size() > 0) {    for (    WorkerState worker : workerStateCollection) {      String logPath="logDirPath: " + logDir + File.separator+ projectId+ "_"+ worker.getMasterTcpUri().hashCode();      StringBuffer workerStateSummary=new StringBuffer("Workers Summary - " + statsUtil.getWorkerStateMap().size() + " workers").append("\n");      workerStateSummary.append(worker.getWorkerIdentification() + ":" + worker.getHostName()+ ":"+ worker.getTier()+ ":"+ worker.getMasterTcpUri()+ ":"+ worker.getWorkerStatus()+ ":"+ worker.getProcessors()+ ":"+ worker.getWorkersSpawned()+ ":"+ worker.getTotalStepCount()+ ":"+ worker.getUnfinishedStepCount()+ ":"+ logPath).append("\n");      System.out.print(workerStateSummary.toString());    }  }}  }
class C{  public SubscriptionStateException(){  super();}  }
class C{  public ServerWork(ServerSocket serverSocket,int responseCode,boolean needProxyAuthentication){  this.serverSocket=serverSocket;  this.responseCode=responseCode;  this.needProxyAuthentication=needProxyAuthentication;  this.actAsProxy=!(serverSocket instanceof SSLServerSocket);  if (!actAsProxy) {    ((SSLServerSocket)serverSocket).setNeedClientAuth(true);  }}  }
class C{  public MaterialFlatButton(Context context){  super(context);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addSensorSelectionListener(final SensorSelectionListener listener){  listenerList.add(SensorSelectionListener.class,listener);}  }
class C{  public static int computeChecksum(byte[] buffer,int offset,int length) throws NoSuchAlgorithmException {  AbstractChecksum checksum;  checksum=JacksumAPI.getChecksumInstance("crc:16," + Integer.toHexString(CRC_MASK) + ","+ Integer.toHexString(CRC_INIT_FILE)+ ",false,false,0");  checksum.reset();  checksum.update(buffer,offset,length);  return (int)checksum.getValue();}  }
class C{  public void oneShot(View emiter,int numParticles){  oneShot(emiter,numParticles,new LinearInterpolator());}  }
class C{  public void warn(Throwable throwable,String msg){  innerLog(Level.WARNING,throwable,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int mediaMask=getMediaMask(stack);  return new Long(Wizard.getInstance().getLastModified(mediaMask));}  }
class C{  private char[] applyFloatPadding(final char[] ca4,final boolean noDigits){  char[] ca5=ca4;  if (fieldWidthSet) {    int i;    int j;    final int nBlanks;    if (leftJustify) {      nBlanks=fieldWidth - ca4.length;      if (nBlanks > 0) {        ca5=new char[ca4.length + nBlanks];        for (i=0; i < ca4.length; i++) {          ca5[i]=ca4[i];        }        for (j=0; j < nBlanks; j++, i++) {          ca5[i]=' ';        }      }    } else     if (!leadingZeros || noDigits) {      nBlanks=fieldWidth - ca4.length;      if (nBlanks > 0) {        ca5=new char[ca4.length + nBlanks];        for (i=0; i < nBlanks; i++) {          ca5[i]=' ';        }        for (j=0; j < ca4.length; i++, j++) {          ca5[i]=ca4[j];        }      }    } else     if (leadingZeros) {      nBlanks=fieldWidth - ca4.length;      if (nBlanks > 0) {        ca5=new char[ca4.length + nBlanks];        i=0;        j=0;        if (ca4[0] == '-') {          ca5[0]='-';          i++;          j++;        }        for (int k=0; k < nBlanks; i++, k++) {          ca5[i]='0';        }        for (; j < ca4.length; i++, j++) {          ca5[i]=ca4[j];        }      }    }  }  return ca5;}  }
class C{  @Override public void tearDown() throws Exception {  final IIndexManager backend=sail == null ? null : ((BigdataSail)sail).getIndexManager();  super.tearDown();  if (backend != null)   backend.destroy();}  }
class C{  public static void markAsSucceeded(ModelClient modelClient,DataObject target){  if (target instanceof DiscoveredSystemObject) {    DiscoveredSystemObject obj=(DiscoveredSystemObject)target;    obj.setDiscoveryStatus(DataCollectionJobStatus.COMPLETE.name());    obj.setLastDiscoveryStatusMessage("");    obj.setLastDiscoveryRunTime(System.currentTimeMillis());    obj.setSuccessDiscoveryTime(System.currentTimeMillis());    modelClient.save(obj);  }}  }
class C{  public boolean isDrawValuesForWholeStackEnabled(){  return mDrawValuesForWholeStack;}  }
class C{  public static String formatPropertiesOld(String name,TungstenProperties props,String header,boolean wasModified){  String indent="  ";  StringBuilder builder=new StringBuilder();  builder.append(header);  builder.append(String.format("%s%s\n",name,modifiedSign(wasModified)));  builder.append("{\n");  Map<String,String> propMap=props.hashMap();  for (  String key : propMap.keySet()) {    builder.append(String.format("%s%s = %s\n",indent,key,propMap.get(key)));  }  builder.append(String.format("}"));  return builder.toString();}  }
class C{  public Builder convertDurationsTo(TimeUnit durationUnit){  this.durationUnit=durationUnit;  return this;}  }
class C{  public void paint(Graphics g){  Color bgColor=(splitPane.hasFocus()) ? UIManager.getColor("SplitPane.shadow") : getBackground();  Dimension size=getSize();  Graphics2D g2=((Graphics2D)g);  BEUtils.setAntiAliasing((Graphics2D)g,true);  if (bgColor != null) {    int orient=this.splitPane.getOrientation();    if (orient == JSplitPane.HORIZONTAL_SPLIT) {      int halfWidth=size.width / 2;      int halfHeight=size.height / 2;      Stroke oldStroke=((Graphics2D)g).getStroke();      Stroke sroke=new BasicStroke(1,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL,0,new float[]{2,2},0);      ((Graphics2D)g).setStroke(sroke);      g.setColor(TOUCH_DECRATED_BUTTON_COLOR);      g.drawLine(halfWidth + 0,0,halfWidth + 0,size.height);      g.setColor(TOUCH_DECRATED_BUTTON_HILIGHT_COLOR);      g.drawLine(halfWidth + 1,0,halfWidth + 1,size.height);      ((Graphics2D)g).setStroke(oldStroke);      int decratedButton_w=TOUCH_DECRATED_BUTTON_W;      int decratedButton_h=TOUCH_DECRATED_BUTTON_H;      int diverTouchStartX=halfWidth - decratedButton_w / 2;      __Icon9Factory__.getInstance().getSplitTouchBg1().draw((Graphics2D)g,diverTouchStartX,halfHeight - decratedButton_h / 2,decratedButton_w,decratedButton_h);    } else {      int halfHeight=size.height / 2;      int halfWidth=size.width / 2;      Stroke oldStroke=((Graphics2D)g).getStroke();      Stroke sroke=new BasicStroke(1,BasicStroke.CAP_BUTT,BasicStroke.JOIN_BEVEL,0,new float[]{2,2},0);      ((Graphics2D)g).setStroke(sroke);      g.setColor(TOUCH_DECRATED_BUTTON_COLOR);      g.drawLine(0,halfHeight + 0,size.width,halfHeight + 0);      g.setColor(TOUCH_DECRATED_BUTTON_HILIGHT_COLOR);      g.drawLine(0,halfHeight + 1,size.width,halfHeight + 1);      ((Graphics2D)g).setStroke(oldStroke);      int decratedButton_w=TOUCH_DECRATED_BUTTON_W;      int decratedButton_h=TOUCH_DECRATED_BUTTON_H;      int diverTouchStartY=halfHeight - decratedButton_w / 2;      __Icon9Factory__.getInstance().getSplitTouchBg1().draw((Graphics2D)g,halfWidth - decratedButton_h,diverTouchStartY,decratedButton_h,decratedButton_w);    }    BEUtils.setAntiAliasing((Graphics2D)g,false);  }  super.paint(g);}  }
class C{  public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  if (cv != null) {    cv.visit(version,access,name,signature,superName,interfaces);  }}  }
class C{  public void loadLatestEntries(){  loadCategories();  entriesForPage=(searchString != null ? retrieveSearchResults() : retrieveLatestEntries());}  }
class C{  public void addChangeListener(ChangeListener listener){  if (modelListener == null) {    modelListener=new ModelListener();    getModel().addChangeListener(modelListener);  }  listenerList.add(ChangeListener.class,listener);}  }
class C{  public T caseDelegatingGetterDeclaration(DelegatingGetterDeclaration object){  return null;}  }
class C{  XSLTAttributeDef(String namespace,String name,boolean required,boolean supportsAVT,boolean prefixedQNameValAllowed,int errorType,String k1,int v1,String k2,int v2,String k3,int v3,String k4,int v4){  this.m_namespace=namespace;  this.m_name=name;  this.m_type=prefixedQNameValAllowed ? this.T_ENUM_OR_PQNAME : this.T_ENUM;  this.m_required=required;  this.m_supportsAVT=supportsAVT;  this.m_errorType=errorType;  m_enums=new StringToIntTable(4);  m_enums.put(k1,v1);  m_enums.put(k2,v2);  m_enums.put(k3,v3);  m_enums.put(k4,v4);}  }
class C{  public boolean isContinuousLayout(){  return continuousLayout;}  }
class C{  public static DataSet difference(DataSet data,int d){  if (d == 0)   return data;  TetradMatrix _data=data.getDoubleData();  for (int k=1; k <= d; k++) {    TetradMatrix _data2=new TetradMatrix(_data.rows() - 1,_data.columns());    for (int i=1; i < _data.rows(); i++) {      for (int j=0; j < _data.columns(); j++) {        _data2.set(i - 1,j,_data.get(i,j) - _data.get(i - 1,j));      }    }    _data=_data2;  }  return ColtDataSet.makeContinuousData(data.getVariables(),_data);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  void swap(){  Operand v1=pop();  Operand v2=pop();  push(v1);  push(v2);}  }
class C{  public synchronized boolean exists(Parameter parameter){  printGotten(parameter,null,true);  return _exists(parameter);}  }
class C{  public void addLiteralResultAttribute(AVT avt){  if (null == m_avts)   m_avts=new ArrayList();  m_avts.add(avt);}  }
class C{  protected Request(){  this.initialize(null);}  }
class C{  public WebAppBaratineError(WebAppBuilder builder){  super(builder);  Objects.requireNonNull(configException());}  }
class C{  public int add(GL10 gl,String text,Paint textPaint){  return add(gl,null,text,textPaint);}  }
class C{  public boolean isDoubleMetaphoneEqual(String value1,String value2){  return isDoubleMetaphoneEqual(value1,value2,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.111 -0500",hash_original_method="6E6027F9B3B42A9863ABB214525B0A55",hash_generated_method="147D9EC4187374661DBE6E98C13EBA9A") public final boolean isBlocking(){  return mBlock;}  }
class C{  public void showProgressDialog(){  showDialog(DIALOG_PROGRESS_ID);}  }
class C{  public void testExecutionWithAuthenticatedWar() throws Exception {  setContainer(createContainer(createConfiguration(ConfigurationType.STANDALONE)));  Deployable war=new DefaultDeployableFactory().createDeployable(getContainer().getId(),getTestData().getTestDataFileFor("authentication-war"),DeployableType.WAR);  getLocalContainer().getConfiguration().addDeployable(war);  List<User> users=User.parseUsers("someone:p@ssw0rd:cargo");  getLocalContainer().getConfiguration().getUsers().addAll(users);  URL warPingURL=new URL("http://localhost:" + getTestData().port + "/authentication-war/test");  getLocalContainer().start();  Map<String,String> requestProperties=new HashMap<String,String>();  requestProperties.put("Authorization","Basic " + new String(Base64.encodeBase64("someone:p@ssw0rd".getBytes())));  PingUtils.assertPingTrue("Failed authentication","Principal name [someone], " + "Is user in \"cargo\" role [true]",warPingURL,requestProperties,getLogger());  getLocalContainer().stop();  PingUtils.assertPingFalse("Authentication war not stopped",warPingURL,getLogger());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.EVENT_DEFINITION___AFTER_EVERY_EVENT_1:    return afterEveryEvent_1 != null && !afterEveryEvent_1.isEmpty();case UmplePackage.EVENT_DEFINITION___AFTER_EVENT_1:  return afterEvent_1 != null && !afterEvent_1.isEmpty();case UmplePackage.EVENT_DEFINITION___EVENT_1:return EVENT_1_EDEFAULT == null ? event_1 != null : !EVENT_1_EDEFAULT.equals(event_1);case UmplePackage.EVENT_DEFINITION___ANONYMOUS_EVENT_DEFINITION_11:return anonymous_eventDefinition_1_1 != null && !anonymous_eventDefinition_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.334 -0400",hash_original_method="7FA7B038BD0112092FF3B5CFF2FD8ABC",hash_generated_method="B91D0758DD984328EF609D5B8A403672") private ConcurrentSkipListMap.Node<K,V> hiNode(){  if (hi == null)   return m.findLast(); else   if (hiInclusive)   return m.findNear(hi,LT | EQ); else   return m.findNear(hi,LT);}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>();  newVector.addElement("measureTreeSize");  newVector.addElement("measureNumLeaves");  newVector.addElement("measureMaxDepth");  if (m_Stats != null) {    newVector.addAll(Collections.list(m_Stats.enumerateMeasures()));  }  return newVector.elements();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.933 -0500",hash_original_method="8E23D2BEC9459FE2CC91B2DD463DCF3F",hash_generated_method="BC6CB065EB0B7AF2B43A5A8E99968917") protected boolean home(TextView widget,Spannable buffer){  return false;}  }
class C{  private boolean okToAbandon(){  if (!dirty) {    return true;  }  int result=JOptionPane.showInternalConfirmDialog(this,"Save changes ? ","Warning",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE);  if (result == JOptionPane.YES_OPTION) {    return saveAs();  } else   if (result == JOptionPane.NO_OPTION) {    return true;  } else   if (result == JOptionPane.CANCEL_OPTION) {    return false;  } else {    return false;  }}  }
class C{  public synchronized void crash() throws IOException {  openFiles=new HashMap<>();  openFilesForWrite=new HashSet<>();  openFilesDeleted=new HashSet<>();  Map<Closeable,Exception> m=new IdentityHashMap<>(openFileHandles);  for (  Closeable f : m.keySet()) {    try {      f.close();    } catch (    Exception ignored) {    }  }  corruptFiles(unSyncedFiles);  crashed=true;  unSyncedFiles=new HashSet<>();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:04.112 -0500",hash_original_method="D7241707B86764AD36DA13023C5322B5",hash_generated_method="EF0C4077378AB8F224EE2E770C8B4D87") private void appendTimeZone(StringBuffer buffer,int count,boolean generalTimeZone){  if (generalTimeZone) {    TimeZone tz=calendar.getTimeZone();    boolean daylight=(calendar.get(Calendar.DST_OFFSET) != 0);    int style=count < 4 ? TimeZone.SHORT : TimeZone.LONG;    if (!formatData.customZoneStrings) {      buffer.append(tz.getDisplayName(daylight,style,formatData.locale));      return;    }    String custom=TimeZones.getDisplayName(formatData.zoneStrings,tz.getID(),daylight,style);    if (custom != null) {      buffer.append(custom);      return;    }  }  appendNumericTimeZone(buffer,generalTimeZone);}  }
class C{  public void addRelatedTo(RelatedTo relatedTo){  addProperty(relatedTo);}  }
class C{  @DELETE @Path("/{id}/acl") @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskResourceRep deleteFileSystemACL(@PathParam("id") URI id,@QueryParam("subDir") String subDir){  _log.info("Delete ACL of fileSystem: Request received for  filesystem: {} with subDir {} ",id,subDir);  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare fs=queryResource(id);  String task=UUID.randomUUID().toString();  ArgValidator.checkEntity(fs,id,isIdEmbeddedInURL(id));  VirtualPool vpool=_dbClient.queryObject(VirtualPool.class,fs.getVirtualPool());  if (!vpool.getProtocols().contains(StorageProtocol.File.NFSv4.name())) {    throw APIException.methodNotAllowed.vPoolDoesntSupportProtocol("Vpool does not support " + StorageProtocol.File.NFSv4.name() + " protocol");  }  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  FileController controller=getController(FileController.class,device.getSystemType());  Operation op=_dbClient.createTaskOpStatus(FileShare.class,fs.getId(),task,ResourceOperationTypeEnum.DELETE_FILE_SYSTEM_NFS_ACL);  op.setDescription("Delete ACL of file system ");  try {    controller.deleteNFSAcls(device.getId(),fs.getId(),subDir,task);    auditOp(OperationTypeEnum.DELETE_FILE_SYSTEM_SHARE_ACL,true,AuditLogManager.AUDITOP_BEGIN,fs.getId().toString(),device.getId().toString(),subDir);  } catch (  BadRequestException e) {    op=_dbClient.error(FileShare.class,fs.getId(),task,e);    _log.error("Error Processing File System ACL Delete {}, {}",e.getMessage(),e);    throw e;  }catch (  Exception e) {    _log.error("Error Processing File System ACL Delete  {}, {}",e.getMessage(),e);    throw APIException.badRequests.unableToProcessRequest(e.getMessage());  }  return toTask(fs,task,op);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:23.473 -0500",hash_original_method="0B04A70E2C13FA00A3C14F0564BE387C",hash_generated_method="CD28D606709EB3935A41ED96F79479D8") public void append(long key,E value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  if (mGarbage && mSize >= mKeys.length) {    gc();  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=ArrayUtils.idealIntArraySize(pos + 1);    long[] nkeys=new long[n];    Object[] nvalues=new Object[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public void evaluate(DataStatusEvent e){  boolean process=e == null;  String columnName=null;  if (!process) {    columnName=e.getColumnName();    if (columnName != null)     process=m_dependents.contains(columnName); else     process=true;  }  if (process) {    log.config(columnName == null ? "" : columnName);    for (int i=0; i < components.size(); i++) {      Component c=components.get(i);      if (c instanceof GridController) {        GridController gc=(GridController)c;        if (!gc.isDetailGrid()) {          boolean display=isDisplay(gc);          if (display)           showTab(tabNames.get(i)); else           hideTab(tabNames.get(i));        }      }    }  }}  }
class C{  public void addProperties(String propFile) throws java.net.MalformedURLException {  getPropertyHandler().addProperties(propFile);}  }
class C{  @Override public final V put(K key,V value){  int index=getIndexOfKey(key);  if (index == -1) {    index=this.size;  }  return set(index,key,value);}  }
class C{  public boolean drawImage(Image img,AffineTransform xform,ImageObserver obs){  boolean retVal=true;  if (xform == null) {    retVal=drawImage(img,0,0,null);  } else   if (xform.getDeterminant() != 0) {    AffineTransform inverseTransform=null;    try {      inverseTransform=xform.createInverse();    } catch (    NoninvertibleTransformException e) {      throw new SVGGraphics2DRuntimeException(ERR_UNEXPECTED);    }    gc.transform(xform);    retVal=drawImage(img,0,0,null);    gc.transform(inverseTransform);  } else {    AffineTransform savTransform=new AffineTransform(gc.getTransform());    gc.transform(xform);    retVal=drawImage(img,0,0,null);    gc.setTransform(savTransform);  }  return retVal;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void removePropertyChangeListener(String propertyName,PropertyChangeListener listener){  try {    propertyChangeSupport.removePropertyChangeListener(propertyName,listener);  } catch (  AssertionError e) {  }}  }
class C{  public boolean isSendEMail(){  Object oo=get_Value(COLUMNNAME_SendEMail);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void exitSubplan(){  if (!stack.isEmpty()) {    currentVarMap=stack.pop();  }}  }
class C{  public void propertyChange(java.beans.PropertyChangeEvent e){  boolean now=clock.getRun();  if (now) {    b.setText("Pause");  } else {    b.setText("Run");  }}  }
class C{  public static String random(final int count,final char... chars){  if (chars == null) {    return random(count,0,0,false,false,null,RANDOM);  }  return random(count,0,chars.length,false,false,chars,RANDOM);}  }
class C{  public static CurrencyValue parse(String externalVal,String defaultCurrency){  if (externalVal == null) {    return null;  }  String amount=externalVal;  String code=defaultCurrency;  if (externalVal.contains(",")) {    String[] amountAndCode=externalVal.split(",");    amount=amountAndCode[0];    code=amountAndCode[1];  }  if (amount.equals("*")) {    return null;  }  Currency currency=CurrencyField.getCurrency(code);  if (currency == null) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Currency code not supported by this JVM: " + code);  }  try {    double value=Double.parseDouble(amount);    long currencyValue=Math.round(value * Math.pow(10.0,currency.getDefaultFractionDigits()));    return new CurrencyValue(currencyValue,code);  } catch (  NumberFormatException e) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);  }}  }
class C{  private static KeyStore loadKeyStoreFromFile() throws KeyStoreException, IOException {  if (sKeyStore == null) {    FileInputStream fis=null;    try {      String keyStorePath=getKeystore().getPath();      File file=new File(keyStorePath);      if (!file.exists()) {        throw new KeyStoreException(new StringBuilder("Loading of key store failed, Reason : ").append(keyStorePath).append(" does not exist!").toString());      }      fis=new FileInputStream(keyStorePath);      sKeyStore=KeyStore.getInstance(getKeystoreType());synchronized (KeyStoreManager.class) {        sKeyStore.load(fis,KEYSTORE_PASSWORD.toCharArray());      }    } catch (    NoSuchAlgorithmException e) {      throw new KeyStoreException("Loading of key store from file failed!",e);    }catch (    CertificateException e) {      throw new KeyStoreException("Loading of key store from file failed!",e);    } finally {      CloseableUtils.tryToClose(fis);    }  }  return sKeyStore;}  }
class C{  public void addRow(){  this.addRow(this.objectFactory.createNewObject(""));}  }
class C{  public KnowledgeDisplayEdge(KnowledgeDisplayNode node1,KnowledgeDisplayNode node2,int type){  if (node1 == null) {    throw new NullPointerException("Node1 must not be null.");  }  if (node2 == null) {    throw new NullPointerException("Node2 must not be null.");  }  if (!(type == FORBIDDEN_EXPLICITLY || type == FORBIDDEN_BY_TIERS || type == REQUIRED || type == REQUIRED_BY_GROUPS || type == FORBIDDEN_BY_GROUPS)) {    throw new IllegalArgumentException();  }  this.node1=node1;  this.node2=node2;  this.mode=ANCHORED_UNSELECTED;  this.type=type;  node1.addComponentListener(compHandler);  node2.addComponentListener(compHandler);  node1.addPropertyChangeListener(propertyChangeHandler);  node2.addPropertyChangeListener(propertyChangeHandler);  resetBounds();}  }
class C{  private static void sbrGainCalc(SpectralBandReplication sbr,SBRData chData,final int eA[]){  int e, k, m;  for (e=0; e < chData.bsNumEnv; e++) {    int delta=!(e == eA[1]) || (e == eA[0]) ? 1 : 0;    for (k=0; k < sbr.nLim; k++) {      float gain_boost, gain_max;      float sum[]={0.0f,0.0f};      for (m=sbr.fTablelim[k] - sbr.kx[1]; m < sbr.fTablelim[k + 1] - sbr.kx[1]; m++) {        final float temp=sbr.eOrigmapped[e][m] / (1.0f + sbr.qMapped[e][m]);        sbr.qM[e][m]=sqrtf(temp * sbr.qMapped[e][m]);        sbr.sM[e][m]=sqrtf(temp * chData.sIndexmapped[e + 1][m]);        if (sbr.sMapped[e][m] == 0) {          sbr.gain[e][m]=sqrtf(sbr.eOrigmapped[e][m] / ((1.0f + sbr.eCurr[e][m]) * (1.0f + sbr.qMapped[e][m] * delta)));        } else {          sbr.gain[e][m]=sqrtf(sbr.eOrigmapped[e][m] * sbr.qMapped[e][m] / ((1.0f + sbr.eCurr[e][m]) * (1.0f + sbr.qMapped[e][m])));        }      }      for (m=sbr.fTablelim[k] - sbr.kx[1]; m < sbr.fTablelim[k + 1] - sbr.kx[1]; m++) {        sum[0]+=sbr.eOrigmapped[e][m];        sum[1]+=sbr.eCurr[e][m];      }      gain_max=limgain[sbr.bsLimiterGains] * sqrtf((FLT_EPSILON + sum[0]) / (FLT_EPSILON + sum[1]));      gain_max=Math.min(100000.f,gain_max);      for (m=sbr.fTablelim[k] - sbr.kx[1]; m < sbr.fTablelim[k + 1] - sbr.kx[1]; m++) {        float qM_max=sbr.qM[e][m] * gain_max / sbr.gain[e][m];        sbr.qM[e][m]=Math.min(sbr.qM[e][m],qM_max);        sbr.gain[e][m]=Math.min(sbr.gain[e][m],gain_max);      }      sum[0]=sum[1]=0.0f;      for (m=sbr.fTablelim[k] - sbr.kx[1]; m < sbr.fTablelim[k + 1] - sbr.kx[1]; m++) {        sum[0]+=sbr.eOrigmapped[e][m];        sum[1]+=sbr.eCurr[e][m] * sbr.gain[e][m] * sbr.gain[e][m] + sbr.sM[e][m] * sbr.sM[e][m] + (delta != 0 && sbr.sM[e][m] == 0 ? 1 : 0) * sbr.qM[e][m] * sbr.qM[e][m];      }      gain_boost=sqrtf((FLT_EPSILON + sum[0]) / (FLT_EPSILON + sum[1]));      gain_boost=Math.min(1.584893192f,gain_boost);      for (m=sbr.fTablelim[k] - sbr.kx[1]; m < sbr.fTablelim[k + 1] - sbr.kx[1]; m++) {        sbr.gain[e][m]*=gain_boost;        sbr.qM[e][m]*=gain_boost;        sbr.sM[e][m]*=gain_boost;      }    }  }}  }
class C{  public static void createViews(List<Block> blocks,BlockViewFactory viewFactory,ConnectionManager connectionManager,WorkspaceView workspaceView){  for (int i=0; i < blocks.size(); i++) {    workspaceView.addView(viewFactory.buildBlockGroupTree(blocks.get(i),connectionManager,null));  }}  }
class C{  public InputStream fetchTranscriptResponse(String url){  if (url == null) {    return null;  }  InputStream response=null;  try {    if (has(url)) {      response=getInputStream(url);      return response;    }  } catch (  IOException e) {    logger.error(e);  }  return null;}  }
class C{  public String encode(){  StringBuffer sbuff=new StringBuffer(ATTRIBUTE_FIELD);  sbuff.append(getName()).append(Separators.COLON);  sbuff.append(getValue());  return sbuff.append(Separators.NEWLINE).toString();}  }
class C{  public static Exception convertToException(ErrorCondition errorCondition){  Exception remoteError=null;  if (errorCondition != null && errorCondition.getCondition() != null) {    Symbol error=errorCondition.getCondition();    String message=extractErrorMessage(errorCondition);    if (error.equals(AmqpError.UNAUTHORIZED_ACCESS)) {      remoteError=new JMSSecurityException(message);    } else     if (error.equals(AmqpError.RESOURCE_LIMIT_EXCEEDED)) {      remoteError=new ResourceAllocationException(message);    } else     if (error.equals(AmqpError.NOT_FOUND)) {      remoteError=new InvalidDestinationException(message);    } else     if (error.equals(TransactionErrors.TRANSACTION_ROLLBACK)) {      remoteError=new TransactionRolledBackException(message);    } else     if (error.equals(ConnectionError.REDIRECT)) {      remoteError=createRedirectException(error,message,errorCondition);    } else     if (error.equals(AmqpError.INVALID_FIELD)) {      Map<?,?> info=errorCondition.getInfo();      if (info != null && CONTAINER_ID.equals(info.get(INVALID_FIELD))) {        remoteError=new InvalidClientIDException(message);      } else {        remoteError=new JMSException(message);      }    } else {      remoteError=new JMSException(message);    }  } else {    remoteError=new JMSException("Unknown error from remote peer");  }  return remoteError;}  }
class C{  public Coords driftAddSmoke(Coords src,int windDir,int windStr,int directionChanges){  Coords nextCoords=src.translated(windDir);  IBoard board=game.getBoard();  if (windStr == PlanetaryConditions.WI_NONE) {    return src;  }  if (!board.contains(nextCoords)) {    return nextCoords;  }  if (!board.contains(src)) {    return src;  }  int hexElevation=board.getHex(src).getLevel();  int nextElevation=board.getHex(nextCoords).getLevel();  if (board.getHex(nextCoords).containsTerrain(Terrains.BUILDING)) {    nextElevation+=board.getHex(nextCoords).terrainLevel(Terrains.BLDG_ELEV);  }  if (board.getHex(src).containsTerrain(Terrains.BUILDING)) {    hexElevation+=board.getHex(src).terrainLevel(Terrains.BLDG_ELEV);  }  if ((hexElevation - nextElevation) > 4) {    return null;  }  if ((hexElevation - nextElevation) < -4) {    if (directionChanges == 0) {      return driftAddSmoke(src,(windDir + 1) % 6,windStr,++directionChanges);    } else     if (directionChanges == 1) {      return driftAddSmoke(src,(windDir - 2) % 6,windStr,++directionChanges);    } else {      return src;    }  }  if (windStr > PlanetaryConditions.WI_MOD_GALE) {    return driftAddSmoke(nextCoords,windDir,--windStr);  }  return nextCoords;}  }
class C{  protected synchronized void onSendAccepted(RecordBuffer<R> buffer){  logger.trace("{}:{} Send Scheduled",name(),buffer);  throttler.onSendAccepted();  activeSendTasks.incrementAndGet();}  }
class C{  public ExifReader(InputStream jpegInputStream) throws JpegProcessingException {  this(new JpegSegmentReader(jpegInputStream).readSegment(JpegSegmentReader.SEGMENT_APP1));}  }
class C{  public static String toHex(byte[] data){  StringBuffer buf=new StringBuffer(data.length * 2);  for (  byte b : data) {    buf.append(String.format("%02x",b & 0xFF));  }  return buf.toString();}  }
class C{  @Override public int compareTo(final MutableInt other){  return NumberUtils.compare(this.value,other.value);}  }
class C{  @Override public BigdataBNode rdfId(){  return sid;}  }
class C{  public void openViews(){  if (helpState.getViewData().isVisible()) {    helpState.open();  }  if (surfAndLayerState.getViewData().isVisible()) {    surfAndLayerState.open();  }  if (mapElementsState.getViewData().isVisible()) {    mapElementsState.open();  }  if (colorBarsState.getViewData().isVisible()) {    colorBarsState.open();  }  if (lightingState.getViewData().isVisible()) {    lightingState.open();  }  if (lightPosState.getViewData().isVisible()) {    lightPosState.open();  }  if (viewPtState.getViewData().isVisible()) {    viewPtState.open();  }  for (int i=0; i < mapElementStateList.size(); ++i) {    MapElementState state=mapElementStateList.get(i);    state.open();  }}  }
class C{  public static XMPPConnection makeConnectionAndSavePreferences(String jid,String password,String notifiedAddress,SettingsManager settings) throws Exception {  String domain=XmppStringUtils.parseDomain(jid);  XMPPTCPConnection connection=createConnection(domain);  connection.connect();  connection.login(jid,password);  savePreferences(jid,password,notifiedAddress,settings);  return connection;}  }
class C{  public static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize){  Encoder[] encoders={new ASCIIEncoder(),new C40Encoder(),new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};  EncoderContext context=new EncoderContext(msg);  context.setSymbolShape(shape);  context.setSizeConstraints(minSize,maxSize);  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {    context.writeCodeword(MACRO_05);    context.setSkipAtEnd(2);    context.pos+=MACRO_05_HEADER.length();  } else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {    context.writeCodeword(MACRO_06);    context.setSkipAtEnd(2);    context.pos+=MACRO_06_HEADER.length();  }  int encodingMode=ASCII_ENCODATION;  while (context.hasMoreCharacters()) {    encoders[encodingMode].encode(context);    if (context.getNewEncoding() >= 0) {      encodingMode=context.getNewEncoding();      context.resetEncoderSignal();    }  }  int len=context.getCodewordCount();  context.updateSymbolInfo();  int capacity=context.getSymbolInfo().getDataCapacity();  if (len < capacity) {    if (encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION) {      context.writeCodeword('\u00fe');    }  }  StringBuilder codewords=context.getCodewords();  if (codewords.length() < capacity) {    codewords.append(PAD);  }  while (codewords.length() < capacity) {    codewords.append(randomize253State(PAD,codewords.length() + 1));  }  return context.getCodewords().toString();}  }
class C{  @Override public void dragGestureRecognized(DragGestureEvent evt){  DragEntry dragEntry=kseFrame.dragSelectedEntry();  if (dragEntry == null) {    return;  }  ImageIcon icon=dragEntry.getImage();  Toolkit toolkit=Toolkit.getDefaultToolkit();  Dimension dim=toolkit.getBestCursorSize(icon.getIconWidth(),icon.getIconHeight());  BufferedImage buffImage=new BufferedImage(dim.width,dim.height,BufferedImage.TYPE_INT_ARGB_PRE);  icon.paintIcon(evt.getComponent(),buffImage.getGraphics(),0,0);  cursor=toolkit.createCustomCursor(buffImage,new Point(0,0),"keystore-entry");  evt.startDrag(cursor,new KeyStoreEntryTransferable(dragEntry),this);}  }
class C{  @Override public boolean isDone(){  return (elapsed >= duration);}  }
class C{  public static void addFormChangeListener(com.codename1.ui.events.ActionListener al){  if (formChangeListener == null) {    formChangeListener=new EventDispatcher();  }  formChangeListener.addListener(al);}  }
class C{  public File workspaceDir(String name,File ideDir){  return ownerToWorkspace.computeIfAbsent(ideDir,null);}  }
class C{  protected Factory resolveFactory(Object name,Map attributes,Object value){  getProxyBuilder().getContext().put(CHILD_BUILDER,getProxyBuilder());  return getProxyBuilder().getFactories().get(name);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public CopyOnWriteArraySet(){  al=new CopyOnWriteArrayList<E>();}  }
class C{  public static void sendMessage(SearchLoadAndWriteProcessor processor,String regionName,Object key,InternalDistributedMember recipient,int timeoutMs,int ttl,int idleTime){  NetSearchRequestMessage msg=new NetSearchRequestMessage();  msg.initialize(processor,regionName,key,timeoutMs,ttl,idleTime);  msg.setRecipient(recipient);  processor.distributionManager.putOutgoing(msg);}  }
class C{  public void testSubtractDiffScaleNegPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-15;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="1231212478987482988429808779810457634781310033452057698121208165201.2765435432";  int cScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.subtract(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public String print(ReadablePeriod period){  checkPrinter();  checkPeriod(period);  PeriodPrinter printer=getPrinter();  StringBuffer buf=new StringBuffer(printer.calculatePrintedLength(period,iLocale));  printer.printTo(buf,period,iLocale);  return buf.toString();}  }
class C{  @Override public String toString(){  return ReservationTokenAttribute.toString(this.reservationToken);}  }
class C{  public static boolean isOnGround(Entity entity){  Block block=entity.getLocation().getBlock().getRelative(BlockFace.DOWN);  return block.getType().isSolid();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGenPackage.BOOL_LITERAL__VALUE:    return isValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public String[] discoverDatabases(String selected){  if (p_discovered != null)   return p_discovered;  p_discovered=new String[]{};  return p_discovered;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public synchronized int compare(Vertex vertex){  if (this == vertex) {    return 0;  }  int matches=0;  boolean match=true;  for (Iterator<Relationship> iterator=allRelationships(); iterator.hasNext(); ) {    Relationship relationship=iterator.next();    if (relationship.isInverse()) {      if (!vertex.hasRelationship(relationship.getType(),relationship.getTarget())) {        matches++;      } else {        matches--;        match=false;      }    } else {      if (vertex.hasRelationship(relationship.getType(),relationship.getTarget())) {        matches++;      } else {        matches--;        match=false;      }    }  }  for (Iterator<Relationship> iterator=vertex.allRelationships(); iterator.hasNext(); ) {    Relationship relationship=iterator.next();    if (relationship.isInverse()) {      if (!hasRelationship(relationship.getType(),relationship.getTarget())) {        matches++;      } else {        matches--;        match=false;      }    } else {      if (hasRelationship(relationship.getType(),relationship.getTarget())) {        matches++;      } else {        matches--;        match=false;      }    }  }  if (match) {    return 0;  }  return matches;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  int progress=0;  double z, z2, lowestNeighbour;  int i;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  boolean isPit;  double aSmallValue;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    z=Math.abs(DEM.getMaximumValue());    if (z <= 9) {      aSmallValue=0.00001F;    } else     if (z <= 99) {      aSmallValue=0.0001F;    } else     if (z <= 999) {      aSmallValue=0.001F;    } else     if (z <= 9999) {      aSmallValue=0.001F;    } else     if (z <= 99999) {      aSmallValue=0.01F;    } else {      aSmallValue=1F;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          isPit=true;          lowestNeighbour=Float.POSITIVE_INFINITY;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData) {              if (z2 < lowestNeighbour) {                lowestNeighbour=z2;              }              if (z2 < z) {                isPit=false;              }            }          }          if (isPit && lowestNeighbour < Float.POSITIVE_INFINITY) {            output.setValue(row,col,lowestNeighbour + aSmallValue);          } else {            output.setValue(row,col,z);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testBug12753() throws Exception {  if (versionMeetsMinimum(4,1)) {    Properties props=new Properties();    props.setProperty("sessionVariables","sql_mode=ansi");    Connection sessionConn=null;    try {      sessionConn=getConnectionWithProps(props);      String sqlMode=getMysqlVariable(sessionConn,"sql_mode");      assertTrue(sqlMode.indexOf("ANSI") != -1);    }  finally {      if (sessionConn != null) {        sessionConn.close();        sessionConn=null;      }    }  }}  }
class C{  public void validate(final Cookie cookie,final CookieOrigin origin) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (origin == null) {    throw new IllegalArgumentException("Cookie origin may not be null");  }  String host=origin.getHost().toLowerCase(Locale.ENGLISH);  if (cookie.getDomain() == null) {    throw new MalformedCookieException("Invalid cookie state: " + "domain not specified");  }  String cookieDomain=cookie.getDomain().toLowerCase(Locale.ENGLISH);  if (cookie instanceof ClientCookie && ((ClientCookie)cookie).containsAttribute(ClientCookie.DOMAIN_ATTR)) {    if (!cookieDomain.startsWith(".")) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2109: domain must start with a dot");    }    int dotIndex=cookieDomain.indexOf('.',1);    if (((dotIndex < 0) || (dotIndex == cookieDomain.length() - 1)) && (!cookieDomain.equals(".local"))) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2965: the value contains no embedded dots "+ "and the value is not .local");    }    if (!domainMatch(host,cookieDomain)) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2965: effective host name does not "+ "domain-match domain attribute.");    }    String effectiveHostWithoutDomain=host.substring(0,host.length() - cookieDomain.length());    if (effectiveHostWithoutDomain.indexOf('.') != -1) {      throw new MalformedCookieException("Domain attribute \"" + cookie.getDomain() + "\" violates RFC 2965: "+ "effective host minus domain may not contain any dots");    }  } else {    if (!cookie.getDomain().equals(host)) {      throw new MalformedCookieException("Illegal domain attribute: \"" + cookie.getDomain() + "\"."+ "Domain of origin: \""+ host+ "\"");    }  }}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  public TreeCopier(TreeMaker M){  this.M=M;}  }
class C{  public void removeAttributes(Enumeration<?> names){  while (names.hasMoreElements())   removeAttribute(names.nextElement());}  }
class C{  protected boolean isEmpty(ByteBuffer bbuf){switch (layerType) {case none:case footprint:case viewshed:case derivative:    break;case elevation:case field:  FloatBuffer fbuf=bbuf.asFloatBuffer();int fl=fbuf.limit();for (int i=0; i < fl; ++i) {if (!Float.isNaN(fbuf.get(i))) {  return (false);}}break;case colorimage:IntBuffer ibuf=bbuf.asIntBuffer();int il=ibuf.limit();for (int i=0; i < il; ++i) {if (ibuf.get(i) != 0) {return (false);}}break;case grayimage:int bl=bbuf.limit();for (int i=0; i < bl; ++i) {if (bbuf.get(i) != 0) {return (false);}}break;}return (true);}  }
class C{  protected void initializeColumnTypes(){  int i;  Class cls;  m_ColumnIsNumeric=new boolean[getColumnCount()];  for (i=0; i < m_ColumnIsNumeric.length; i++) {    cls=getColumnClass(i);    if ((cls == Byte.class) || (cls == Short.class) || (cls == Integer.class)|| (cls == Long.class)|| (cls == Float.class)|| (cls == Double.class))     m_ColumnIsNumeric[i]=true;  }}  }
class C{  public Date build(){  Calendar cal;  if (tz != null && lc != null)   cal=Calendar.getInstance(tz,lc); else   if (tz != null)   cal=Calendar.getInstance(tz); else   if (lc != null)   cal=Calendar.getInstance(lc); else   cal=Calendar.getInstance();  cal.set(Calendar.YEAR,year);  cal.set(Calendar.MONTH,month - 1);  cal.set(Calendar.DAY_OF_MONTH,day);  cal.set(Calendar.HOUR_OF_DAY,hour);  cal.set(Calendar.MINUTE,minute);  cal.set(Calendar.SECOND,second);  cal.set(Calendar.MILLISECOND,0);  return cal.getTime();}  }
class C{  public static Result evaluateModel(MultiLabelClassifier h,Instances D_train,Instances D_test,String top,String vop) throws Exception {  Result r=evaluateModel(h,D_train,D_test);  if (h instanceof MultiTargetClassifier || isMT(D_test)) {    r.setInfo("Type","MT");  } else   if (h instanceof MultiLabelClassifier) {    r.setInfo("Type","ML");    r.setInfo("Threshold",MLEvalUtils.getThreshold(r.predictions,D_train,top));  }  r.setInfo("Verbosity",vop);  r.output=Result.getStats(r,vop);  return r;}  }
class C{  public static Builder builder(){  return new Builder(new VoteResponse());}  }
class C{  public void initMutationEvent(String typeArg,boolean canBubbleArg,boolean cancelableArg,Node relatedNodeArg,String prevValueArg,String newValueArg,String attrNameArg,short attrChangeArg){  initEvent(typeArg,canBubbleArg,cancelableArg);  this.relatedNode=relatedNodeArg;  this.prevValue=prevValueArg;  this.newValue=newValueArg;  this.attrName=attrNameArg;  this.attrChange=attrChangeArg;}  }
class C{  public static float opaque(float value){  return value;}  }
class C{  public WordsInDocumentByDirectory(String directory,String[] exceptions){  this(directory,exceptions,true);}  }
class C{  public org.smpte_ra.schemas.st2067_2_2016.ContentVersionType buildContentVersionType(String id,org.smpte_ra.schemas.st2067_2_2016.UserTextType value){  ContentVersionType contentVersionType=new ContentVersionType();  contentVersionType.setId(id);  contentVersionType.setLabelText(value);  return contentVersionType;}  }
class C{  public static String toString(InputStream input) throws IOException {  return toString(input,Charset.defaultCharset());}  }
class C{  @Override protected Category iniCustomParentHolder(View parentview){  return new Category(parentview);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  private synchronized void log(int logType,String msg,Object... args){  if (settings.getLogLevel() == LogLevel.NONE) {    return;  }  String tag=getTag();  String message=createMessage(msg,args);  int methodCount=getMethodCount();  logTopBorder(logType,tag);  logHeaderContent(logType,tag,methodCount);  byte[] bytes=message.getBytes();  int length=bytes.length;  if (length <= CHUNK_SIZE) {    if (methodCount > 0) {      logDivider(logType,tag);    }    logContent(logType,tag,message);    logBottomBorder(logType,tag);    return;  }  if (methodCount > 0) {    logDivider(logType,tag);  }  for (int i=0; i < length; i+=CHUNK_SIZE) {    int count=Math.min(length - i,CHUNK_SIZE);    logContent(logType,tag,new String(bytes,i,count));  }  logBottomBorder(logType,tag);}  }
class C{  public void loadPaySelectInfo(int HR_PaySelection_ID){  m_C_BankAccount_ID=-1;  String sql="SELECT ps.C_BankAccount_ID, b.Name || ' ' || ba.AccountNo," + " c.ISO_Code, CurrentBalance , ba.PaymentExportClass " + "FROM HR_PaySelection ps"+ " INNER JOIN C_BankAccount ba ON (ps.C_BankAccount_ID=ba.C_BankAccount_ID)"+ " INNER JOIN C_Bank b ON (ba.C_Bank_ID=b.C_Bank_ID)"+ " INNER JOIN C_Currency c ON (ba.C_Currency_ID=c.C_Currency_ID) "+ "WHERE ps.HR_PaySelection_ID=? AND ps.Processed='Y' AND ba.IsActive='Y'";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,HR_PaySelection_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      m_C_BankAccount_ID=rs.getInt(1);      bank=rs.getString(2);      currency=rs.getString(3);      balance=rs.getBigDecimal(4);      m_PaymentExportClass=rs.getString(5);    } else {      m_C_BankAccount_ID=-1;      bank="";      currency="";      balance=Env.ZERO;      m_PaymentExportClass=null;      log.log(Level.SEVERE,"No active BankAccount for HR_PaySelection_ID=" + HR_PaySelection_ID);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }}  }
class C{  public void write(File file,Map<String,String> outputProperties) throws TransformerException, IOException {  Writer writer=new Utf8Writer(file);  try {    write(writer,outputProperties);  }  finally {    writer.close();  }}  }
class C{  public Flag enableCsv(){  mRangeList=true;  return this;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.371 -0500",hash_original_method="195C1D433E8B0F15028E4D73EB2D6DE2",hash_generated_method="67E474B376AEA4F08E527A862E401D81") private void measureItem(View child){  ViewGroup.LayoutParams p=child.getLayoutParams();  if (p == null) {    p=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);  }  int childWidthSpec=ViewGroup.getChildMeasureSpec(mWidthMeasureSpec,mListPadding.left + mListPadding.right,p.width);  int lpHeight=p.height;  int childHeightSpec;  if (lpHeight > 0) {    childHeightSpec=MeasureSpec.makeMeasureSpec(lpHeight,MeasureSpec.EXACTLY);  } else {    childHeightSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);  }  child.measure(childWidthSpec,childHeightSpec);}  }
class C{  public void toggle(){  toggle(false,null,null);}  }
class C{  public static void main(String[] a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static void main(String[] args){  int numberOfPrimes=0;  for (int i=1; i < 1000; i++) {    if (PrimeNumberMethod.isPrime(i))     numberOfPrimes++;  }  System.out.println("The number of prime numbers less than 10000: " + numberOfPrimes);}  }
class C{  public boolean isDeclaredAsync(){  return declaredAsync;}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  @Override public void updateTimestamp(String columnLabel,Timestamp x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateTimestamp(" + quote(columnLabel) + ", x);");    }    update(columnLabel,x == null ? (Value)ValueNull.INSTANCE : ValueTimestamp.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private int isHeadAssignedHere(SignalHead head,LayoutTurnout lTurnout){  String sysName=head.getSystemName();  String uName=head.getUserName();  String name=lTurnout.getSignalA1Name();  if ((name != null) && (name.length() > 0) && ((name.equals(uName)) || (name.equals(sysName)))) {    return A1;  }  name=lTurnout.getSignalA2Name();  if ((name != null) && (name.length() > 0) && ((name.equals(uName)) || (name.equals(sysName)))) {    return A2;  }  name=lTurnout.getSignalA3Name();  if ((name != null) && (name.length() > 0) && ((name.equals(uName)) || (name.equals(sysName)))) {    return A3;  }  name=lTurnout.getSignalB1Name();  if ((name != null) && (name.length() > 0) && ((name.equals(uName)) || (name.equals(sysName)))) {    return B1;  }  name=lTurnout.getSignalB2Name();  if ((name != null) && (name.length() > 0) && ((name.equals(uName)) || (name.equals(sysName)))) {    return B2;  }  name=lTurnout.getSignalC1Name();  if ((name != null) && (name.length() > 0) && ((name.equals(uName)) || (name.equals(sysName)))) {    return C1;  }  name=lTurnout.getSignalC2Name();  if ((name != null) && (name.length() > 0) && ((name.equals(uName)) || (name.equals(sysName)))) {    return C2;  }  name=lTurnout.getSignalD1Name();  if ((name != null) && (name.length() > 0) && ((name.equals(uName)) || (name.equals(sysName)))) {    return D1;  }  name=lTurnout.getSignalD2Name();  if ((name != null) && (name.length() > 0) && ((name.equals(uName)) || (name.equals(sysName)))) {    return D2;  }  return NONE;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE;default :return null;}}  }
class C{  public Light createNewLight(String systemName,String userName){  Light lgt=null;  int bitNum=getBitFromSystemName(systemName);  if (bitNum == 0) {    return (null);  }  String sName=getSystemPrefix() + "L" + bitNum;  lgt=new NceLight(sName,userName,_trafficController,this);  return lgt;}  }
class C{  @Override public void onAdded(final StendhalRPZone zone){  super.onAdded(zone);  zone.addMovementListener(this);}  }
class C{  private void drawCircle(Canvas canvas,Paint paint,float x,float y,float radius){  canvas.drawCircle(x,y,radius,paint);}  }
class C{  public void flush(){}  }
class C{  public float value(){  return _map._values[_index];}  }
class C{  private void parseStatus(String status,boolean shouldBe){  for (  Status s : Status.values()) {    if (status.contains(s.id)) {      if (shouldBe) {        statusReq.add(s);      } else {        statusReqNot.add(s);      }    }  }}  }
class C{  public Socket createSocket(String host,int port,InetAddress clientHost,int clientPort) throws IOException {  return new Socket(host,port,clientHost == null ? bindAddress : clientHost,clientPort);}  }
class C{  public void put(IValidatable bean){  for (Iterator iter=_optComponents.values().iterator(); iter.hasNext(); ) {    ((Binding)iter.next()).put(bean);  }  for (Iterator iter=_bindings.values().iterator(); iter.hasNext(); ) {    Binding b=(Binding)iter.next();    if (isPropertyNull(bean,b)) {      b.clear(null);    } else {      b.put(bean);    }  }  _modified=false;}  }
class C{  protected void initDataBindings(){  BeanProperty<MovieList,Integer> movieListBeanProperty=BeanProperty.create("movieSetCount");  BeanProperty<JLabel,String> jLabelBeanProperty=BeanProperty.create("text");  AutoBinding<MovieList,Integer,JLabel,String> autoBinding=Bindings.createAutoBinding(UpdateStrategy.READ,movieList,movieListBeanProperty,lblMovieSetCount,jLabelBeanProperty);  autoBinding.bind();}  }
class C{  public boolean isEmpty(){  return _pos == 0;}  }
class C{  public T caseServiceRef(ServiceRef object){  return null;}  }
class C{  public void accept(final ClassVisitor cv){  cv.visitInnerClass(name,outerName,innerName,access);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public boolean click(Selector obj,String corner) throws UiObjectNotFoundException {  return click(device.findObject(obj.toUiSelector()),corner);}  }
class C{  private void testTransactionMixed(IgniteCache<Integer,Object> cache,TransactionConcurrency concurrency,Integer key1,byte[] val1,@Nullable Integer key2,@Nullable Object val2) throws Exception {  Transaction tx=ignite.transactions().txStart(concurrency,REPEATABLE_READ);  try {    cache.put(key1,val1);    if (key2 != null)     cache.put(key2,val2);    tx.commit();  }  finally {    tx.close();  }  tx=ignite.transactions().txStart(concurrency,REPEATABLE_READ);  try {    assert Arrays.equals(val1,(byte[])cache.get(key1));    if (key2 != null)     assert F.eq(val2,cache.get(key2));    tx.commit();  }  finally {    tx.close();  }}  }
class C{  public static String pathToNode(AccessibilityNodeInfo nodeInfo){  AccessibilityNodeInfo origin=nodeInfo;  List<AccessibilityNodeInfoSpec> list=new ArrayList<AccessibilityNodeInfoSpec>();  list.add(0,new AccessibilityNodeInfoSpec(0,nodeInfo.getClassName()));  AccessibilityNodeInfo parent=nodeInfo.getParent();  while (parent != null) {    int index=0;    for (int i=0; i < parent.getChildCount(); i++) {      AccessibilityNodeInfo child=parent.getChild(i);      if (child != null && child.equals(nodeInfo)) {        index=i;        break;      }    }    list.add(0,new AccessibilityNodeInfoSpec(index,parent.getClassName()));    nodeInfo=parent;    parent=nodeInfo.getParent();  }  list.add(0,new AccessibilityNodeInfoSpec(0,nodeInfo.getClassName()));  String string=TextUtils.join(Element.CHAR_SP_NEXT,list) + withNodeInfo(origin);  return string;}  }
class C{  public String splitCriterionTipText(){  return "The splitting criterion to use";}  }
class C{  public void restoreInstanceState(Bundle savedInstanceState){  initCallbackService=savedInstanceState.getString("callbackService");}  }
class C{  public boolean isTableBased(){  Object oo=get_Value(COLUMNNAME_IsTableBased);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void put(final Resources res,final String key,final RecyclingBitmapDrawable bmp){  put(res,key,bmp,false);}  }
class C{  public DefaultTypeMappingContext(){  this(true);}  }
class C{  public int warningCount(){  if (delegateCompiler != null && delegateCompiler != this)   return delegateCompiler.warningCount(); else   return log.nwarnings;}  }
class C{  public boolean isMandatory(){  return m_button.isMandatory();}  }
class C{  private void emitop(int op){  if (pendingJumps != null)   resolvePending();  if (alive) {    if (pendingStatPos != Position.NOPOS)     markStatBegin();    if (pendingStackMap) {      pendingStackMap=false;      emitStackMap();    }    if (debugCode)     System.err.println("emit@" + cp + " stack="+ state.stacksize+ ": "+ mnem(op));    emit1(op);  }}  }
class C{  public Intent putExtra(String name,long value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putLong(name,value);  return this;}  }
class C{  private String outOfBoundsMsg(int index){  return "Index: " + index + ", Size: "+ elementCount;}  }
class C{  public boolean supportsQuotedIdentifiers(){  return getActiveConnectionPassive().supportsQuotedIdentifiers();}  }
class C{  @Override protected void finalize() throws IOException {  try {    if (guard != null) {      guard.warnIfOpen();    }    close();  }  finally {    try {      super.finalize();    } catch (    Throwable t) {      throw new AssertionError(t);    }  }}  }
class C{  @Override public boolean prefersShortLivedTasks(){  return true;}  }
class C{  HC4(int dictSize,int beforeSizeMin,int readAheadMax,int niceLen,int matchLenMax,int depthLimit){  super(dictSize,beforeSizeMin,readAheadMax,niceLen,matchLenMax);  hash=new Hash234(dictSize);  cyclicSize=dictSize + 1;  chain=new int[cyclicSize];  lzPos=cyclicSize;  matches=new Matches(niceLen - 1);  this.depthLimit=(depthLimit > 0) ? depthLimit : 4 + niceLen / 4;}  }
class C{  public void removeUtil(Assignment input){  table.remove(input);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 90) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public static String classesString(Object[] objects,boolean simple){  String[] strings=new String[objects.length];  for (int i=0; i < objects.length; i++) {    if (objects[i] == null) {      strings[i]="null";    } else     if (simple) {      strings[i]=objects[i].getClass().getSimpleName();    } else {      strings[i]=objects[i].getClass().getName();    }  }  return "[" + join(",",strings) + "]";}  }
class C{  public static Object toGUId(Object o) throws PageException {  String str=toString(o);  if (!Decision.isGUId(str))   throw new ExpressionException("can't cast [" + str + "] to guid value");  return str;}  }
class C{  private String createIdentity(byte[] mac){  StringBuilder sb=new StringBuilder("jmri-");  try {    for (int i=0; i < mac.length; i++) {      sb.append(String.format("%02X",mac[i]));    }  } catch (  NullPointerException ex) {    return null;  }  return sb.toString();}  }
class C{  public void addAttribute(@Nonnull String key,@Nonnull String value){  this.attributes.put(key,value);}  }
class C{  public void addBinding(Binding binding){  addBinding(binding.getName(),binding.getValue());}  }
class C{  public String readNestedContents(Reader r) throws IOException {  StringBuffer contents=new StringBuffer();  int parOpen;  char c='\0';  skipUntil(r,'(');  parOpen=1;  while (c != (char)-1 && parOpen > 0) {    c=(char)r.read();    if (c == '(') {      parOpen++;    }    if (c == ')') {      parOpen--;    }    if (Character.isWhitespace(c)) {      c=' ';    }    contents.append(c);  }  contents.deleteCharAt(contents.length() - 1);  return contents.toString();}  }
class C{  private synchronized void access(Object key,int hash){  Entry<K,V> e=find(key,hash);  if (e == null || e.value == null) {    return;  }  if (e.isHot()) {    if (e != stack.stackNext) {      if (stackMoveDistance == 0 || stackMoveCounter - e.topMove > stackMoveDistance) {        boolean wasEnd=e == stack.stackPrev;        removeFromStack(e);        if (wasEnd) {          pruneStack();        }        addToStack(e);      }    }  } else {    removeFromQueue(e);    if (e.stackNext != null) {      removeFromStack(e);      convertOldestHotToCold();    } else {      addToQueue(queue,e);    }    addToStack(e);  }}  }
class C{  public TagDataImpl(ExtensionPoint extensionPoint){  super(extensionPoint);}  }
class C{  public void reset(){  startIndex=0;}  }
class C{  public boolean isSourceAndTargetSameDBName(String vendorName){  return m_interfaces.get(getDBVendorID(vendorName)).isSourceAndTargetSameDBName();}  }
class C{  private void validateProtectionSetUri(URI vid,URI id){  ArgValidator.checkUri(vid);  ArgValidator.checkUri(id);  Volume volume=_dbClient.queryObject(Volume.class,vid);  ArgValidator.checkEntity(volume,vid,isIdEmbeddedInURL(vid));  if (volume.getProtectionSet() == null || !(volume.getProtectionSet().getURI().equals(id))) {    throw APIException.badRequests.invalidVolumeForProtectionSet();  }}  }
class C{  public void removeSelectionListener(final SelectionListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  this.selectionListeners.remove(listener);}  }
class C{  @Override public void load(Entity unit,boolean checkFalse) throws IllegalArgumentException {  if (!canLoad(unit)) {    throw new IllegalArgumentException("Can not load " + unit.getShortName() + " into this squadron. ");  }  if (unit instanceof FighterSquadron) {    fighters.addAll(((FighterSquadron)unit).fighters);  } else {    fighters.addElement(unit.getId());  }  if (game.getPhase() != Phase.PHASE_LOUNGE) {    computeSquadronBombLoadout();  } else {    updateWeaponGroups();    loadAllWeapons();  }  updateSkills();}  }
class C{  public void discardEntry(IFile archiveFile){  workspace.discardEntry(URI.createPlatformResourceURI(archiveFile.getFullPath().toString(),true));}  }
class C{  public Media createMedia(){  return mAdapter.create(Media.class);}  }
class C{  public static final String createXPATHMsg(ListResourceBundle fResourceBundle,String msgKey,Object args[]){  String fmsg=null;  boolean throwex=false;  String msg=null;  if (msgKey != null)   msg=fResourceBundle.getString(msgKey);  if (msg == null) {    msg=fResourceBundle.getString(XPATHErrorResources.BAD_CODE);    throwex=true;  }  if (args != null) {    try {      int n=args.length;      for (int i=0; i < n; i++) {        if (null == args[i])         args[i]="";      }      fmsg=java.text.MessageFormat.format(msg,args);    } catch (    Exception e) {      fmsg=fResourceBundle.getString(XPATHErrorResources.FORMAT_FAILED);      fmsg+=" " + msg;    }  } else   fmsg=msg;  if (throwex) {    throw new RuntimeException(fmsg);  }  return fmsg;}  }
class C{  protected void checkConfiguration() throws IllegalStateException {  if (StringUtils.isEmpty(baseStateStoreDirectory)) {    throw new IllegalStateException("The baseStateStoreDirectory must be set, preferably in overridden setUp method");  }}  }
class C{  private GridRandomCommandLineLoader(){}  }
class C{  private void addHotkeys(JRootPane pane){  for (  Hotkey hotkey : hotkeys) {    if (doesHotkeyHaveAction(hotkey) && hotkey.type == Type.REGULAR) {      if (pane == null) {        addHotkey(hotkey,main.getRootPane());        for (        JDialog popout : popouts.keySet()) {          addHotkey(hotkey,popout.getRootPane());        }      } else {        addHotkey(hotkey,pane);      }    }  }}  }
class C{  public RandomGenerator(long seed){  super(seed);}  }
class C{  protected void addDefinitionElementListeners(XBLOMDefinitionElement def,ImportRecord ir){  XBLEventSupport es=(XBLEventSupport)def.initializeEventSupport();  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",ir.defAttrListener,false);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",ir.defNodeInsertedListener,false);  es.addImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",ir.defNodeRemovedListener,false);}  }
class C{  @Override protected void onProviderChanged(int appWidgetId,AppWidgetProviderInfo appWidget){  LauncherAppWidgetProviderInfo info=LauncherAppWidgetProviderInfo.fromProviderInfo(mLauncher,appWidget);  super.onProviderChanged(appWidgetId,info);  info.initSpans();}  }
class C{  public boolean containsOneVar(Set<String> vars){  return !Collections.disjoint(map.keySet(),vars);}  }
class C{  public boolean eq(final Period another){  return this.equals(another);}  }
class C{  public void updateForTabCount(int tabCount,boolean incognito){  if (tabCount == mTabCount && incognito == mIncognito)   return;  mTabCount=tabCount;  mIncognito=incognito;  float textSizePx=mTabCount > 9 ? mDoubleDigitTextSize : mSingleDigitTextSize;  mTextPaint.setTextSize(textSizePx);  invalidateSelf();}  }
class C{  public static List<Modifier> newModifiers(AST ast,int modifiers){  return ast.newModifiers(modifiers);}  }
class C{  public String toHTML(){  String html="<a href=\"" + link + "\">";  html+="<img src=\"" + url + "\" border=\"0\" ";  html+=(w != null) ? "width=\"" + w + " \"" : " ";  html+=(h != null) ? "height=\"" + h + " \"" : " ";  html+=(title != null) ? "alt=\"" + title + "\"" : "";  html+="/>";  html+="</a>";  return html;}  }
class C{  public final void writeDouble(double val) throws IOException {  writeLong(Double.doubleToLongBits(val));}  }
class C{  public static void copyFiles(File src,File dest) throws IOException {  if (src.getName().startsWith(".")) {    if (LOG.isDebugEnabled()) {      LOG.debug("Ignoring " + src.getAbsolutePath() + " because name started with .");    }    return;  }  if (!src.exists()) {    throw new IOException("copyFiles: Can not find source: " + src.getAbsolutePath() + ".");  } else   if (!src.canRead()) {    throw new IOException("copyFiles: No right to source: " + src.getAbsolutePath() + ".");  }  if (src.isDirectory()) {    if (!dest.exists()) {      if (!dest.mkdirs()) {        throw new IOException("copyFiles: Could not create direcotry: " + dest.getAbsolutePath() + ".");      }      if (LOG.isDebugEnabled()) {        LOG.debug("Created directory " + dest.getAbsolutePath());      }    }    String list[]=src.list();    for (    String element : list) {      File dest1=new File(dest,element);      File src1=new File(src,element);      copyFiles(src1,dest1);    }  } else {    FileInputStream fin=null;    FileOutputStream fout=null;    byte[] buffer=new byte[4096];    int bytesRead;    try {      fin=new FileInputStream(src);      fout=new FileOutputStream(dest);      while ((bytesRead=fin.read(buffer)) >= 0) {        fout.write(buffer,0,bytesRead);      }      if (LOG.isDebugEnabled()) {        LOG.debug("Copied " + src.getAbsolutePath() + " to "+ dest.getAbsolutePath());      }    } catch (    IOException e) {      IOException wrapper=new IOException("copyFiles: Unable to copy file: " + src.getAbsolutePath() + "to"+ dest.getAbsolutePath()+ ".");      wrapper.initCause(e);      wrapper.setStackTrace(e.getStackTrace());      throw wrapper;    } finally {      if (fin != null) {        try {          fin.close();        } catch (        Throwable t) {        }      }      if (fout != null) {        try {          fout.close();        } catch (        Throwable t) {        }      }    }  }}  }
class C{  public boolean contains(final AbstractInsnNode insn){  AbstractInsnNode i=first;  while (i != null && i != insn) {    i=i.next;  }  return i != null;}  }
class C{  protected void startApisvc(){  if (!started) {    started=true;    Properties sysProps=System.getProperties();    sysProps.put("buildType","emc");    sysProps.put("java.library.path","/opt/storageos/lib");    sysProps.put("entyExpansionLimit","-1");    sysProps.put("ssun.rmi.transport.connectionTimeout","5000");    sysProps.put("sun.rmi.transport.tcp.handshakeTimeout","5000");    sysProps.put("log4j.configuration","apisvc-log4j.properties");    sysProps.put("product.home","/opt/storageos");    PropertyConfigurator.configure("apisvc-log4j.properties");    log.info("Beginning logging");    Main.main(args);    try {      Thread.sleep(10000);    } catch (    InterruptedException ex) {      log.info("Interrupted");    }  }  applicationContext=AttributeMatcherFramework.getApplicationContext();  coordinator=(CoordinatorClient)applicationContext.getBean("coordinator");  dbClient=(DbClient)applicationContext.getBean("dbclient");}  }
class C{  public void readExif(InputStream inStream) throws IOException {  if (inStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  ExifData d=null;  try {    d=new ExifReader(this).read(inStream);  } catch (  ExifInvalidFormatException e) {    throw new IOException("Invalid exif format : " + e);  }  mData=d;}  }
class C{  private boolean generateLoadCarDepartingAndTerminatingIntoStaging(Car car,Track stageTrack){  if (stageTrack == null || !stageTrack.getTrackType().equals(Track.STAGING) || !stageTrack.acceptsTypeName(car.getTypeName()) || !stageTrack.acceptsRoadName(car.getRoadName())) {    log.debug("Track doesn't service car");    return false;  }  if (!_train.isAllowReturnToStagingEnabled() && !Setup.isAllowReturnToStagingEnabled() && !car.isCaboose()&& !car.hasFred()&& !car.isPassenger()&& splitString(car.getLocationName()).equals(splitString(stageTrack.getLocation().getName()))) {    log.debug("Returning car to staging not allowed");    return false;  }  List<String> loads=CarLoads.instance().getNames(car.getTypeName());  loads.remove(CarLoads.instance().getDefaultEmptyName());  loads.remove(CarLoads.instance().getDefaultLoadName());  if (loads.size() == 0) {    log.debug("No custom loads for car type ({}) ignoring staging track ({})",car.getTypeName(),stageTrack.getName());    return false;  }  addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildSearchTrackLoadStaging"),new Object[]{car.toString(),car.getTypeName(),car.getLoadName(),car.getLocationName(),car.getTrackName(),stageTrack.getLocation().getName(),stageTrack.getName()}));  for (int i=loads.size() - 1; i >= 0; i--) {    String load=loads.get(i);    if (!car.getTrack().shipsLoad(load,car.getTypeName()) || !stageTrack.acceptsLoad(load,car.getTypeName()) || !_train.acceptsLoad(load,car.getTypeName())) {      if (!car.getTrack().shipsLoad(load,car.getTypeName())) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildTrackNotNewLoad"),new Object[]{car.getTrackName(),load,stageTrack.getLocation().getName(),stageTrack.getName()}));      }      if (!stageTrack.acceptsLoad(load,car.getTypeName())) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("BuildDestTrackNoLoad"),new Object[]{stageTrack.getLocation().getName(),stageTrack.getName(),car.toString(),load}));      }      if (!_train.acceptsLoad(load,car.getTypeName())) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildTrainNotNewLoad"),new Object[]{_train.getName(),load,stageTrack.getLocation().getName(),stageTrack.getName()}));      }      loads.remove(i);    }  }  if (loads.size() > 0) {    String oldLoad=car.getLoadName();    int rnd=(int)(Math.random() * loads.size());    car.setLoadName(loads.get(rnd));    String status=car.testDestination(stageTrack.getLocation(),stageTrack);    if (status.equals(Track.OKAY) || (status.startsWith(Track.LENGTH) && stageTrack != _terminateStageTrack)) {      car.setLoadGeneratedFromStaging(true);      car.setFinalDestination(stageTrack.getLocation());      car.setFinalDestinationTrack(null);      car.updateKernel();      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildAddingScheduleLoad"),new Object[]{car.getLoadName(),car.toString()}));      return true;    }    car.setLoadName(oldLoad);    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCanNotDropCarBecause"),new Object[]{car.toString(),stageTrack.getName(),status,stageTrack.getTrackTypeName()}));  }  addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildUnableNewLoadStaging"),new Object[]{car.toString(),car.getTrackName(),stageTrack.getLocation().getName(),stageTrack.getName()}));  return false;}  }
class C{  public Element store(Object o){  IndicatorTrackIcon p=(IndicatorTrackIcon)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("indicatortrackicon");  storeCommonAttributes(p,element);  NamedBeanHandle<OBlock> b=p.getNamedOccBlock();  if (b != null) {    element.addContent(storeNamedBean("occupancyblock",b));  }  NamedBeanHandle<Sensor> s=p.getNamedOccSensor();  if (b == null && s != null) {    element.addContent(storeNamedBean("occupancysensor",s));  }  Element elem=new Element("showTrainName");  String show="no";  if (p.showTrain()) {    show="yes";  }  elem.addContent(show);  element.addContent(elem);  HashMap<String,NamedIcon> iconMap=p.getIconMap();  Iterator<Entry<String,NamedIcon>> it=iconMap.entrySet().iterator();  elem=new Element("iconmap");  String family=p.getFamily();  if (family != null) {    elem.setAttribute("family",family);  }  while (it.hasNext()) {    Entry<String,NamedIcon> entry=it.next();    elem.addContent(storeIcon(entry.getKey(),entry.getValue()));  }  element.addContent(elem);  elem=new Element("paths");  ArrayList<String> paths=p.getPaths();  if (paths != null) {    for (int i=0; i < paths.size(); i++) {      Element e=new Element("path");      e.addContent(paths.get(i));      elem.addContent(e);    }    element.addContent(elem);  }  element.setAttribute("class","jmri.jmrit.display.configurexml.IndicatorTrackIconXml");  return element;}  }
class C{  public boolean matchesStart(final Sentence other){  return matches(other,true);}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset,boolean hyperlink){  super.addToken(array,start,end,tokenType,startOffset,hyperlink);  zzStartRead=zzMarkedPos;}  }
class C{  public void update(Set<String> segmentsRemoved,Map<String,LogSegmentMetadata> segmentsAdded){synchronized (logSegments) {    for (    Map.Entry<String,LogSegmentMetadata> entry : segmentsAdded.entrySet()) {      add(entry.getKey(),entry.getValue());    }    for (    String segment : segmentsRemoved) {      remove(segment);    }  }}  }
class C{  @JsonProperty("running") public boolean isRunning(){  return engine.isProcessing() && !engine.isPaused();}  }
class C{  void drawShape(Graphics g,CSS.Value type,int ax,int ay,int aw,int ah,float align){  int gap=isLeftToRight ? -(bulletgap + 8) : (aw + bulletgap);  int x=ax + gap;  int y=Math.max(ay,ay + (int)(align * ah) - 8);  if (type == CSS.Value.SQUARE) {    g.drawRect(x,y,8,8);  } else   if (type == CSS.Value.CIRCLE) {    g.drawOval(x,y,8,8);  } else {    g.fillOval(x,y,8,8);  }}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  if (transformer.getStylesheet().isSecureProcessing())   throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_EXTENSION_ELEMENT_NOT_ALLOWED_IN_SECURE_PROCESSING,new Object[]{getRawName()}));  try {    transformer.getResultTreeHandler().flushPending();    ExtensionsTable etable=transformer.getExtensionsTable();    ExtensionHandler nsh=etable.get(m_extns);    if (null == nsh) {      if (hasFallbackChildren()) {        executeFallbacks(transformer);      } else {        TransformerException te=new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_CALL_TO_EXT_FAILED,new Object[]{getNodeName()}));        transformer.getErrorListener().fatalError(te);      }      return;    }    try {      nsh.processElement(this.getLocalName(),this,transformer,getStylesheet(),this);    } catch (    Exception e) {      if (hasFallbackChildren())       executeFallbacks(transformer); else {        if (e instanceof TransformerException) {          TransformerException te=(TransformerException)e;          if (null == te.getLocator())           te.setLocator(this);          transformer.getErrorListener().fatalError(te);        } else         if (e instanceof RuntimeException) {          transformer.getErrorListener().fatalError(new TransformerException(e));        } else {          transformer.getErrorListener().warning(new TransformerException(e));        }      }    }  } catch (  TransformerException e) {    transformer.getErrorListener().fatalError(e);  }catch (  SAXException se) {    throw new TransformerException(se);  }}  }
class C{  protected void paintTabArea(Graphics g,int tabPlacement,int selectedIndex){  int tabCount=tabPane.getTabCount();  Rectangle iconRect=new Rectangle(), textRect=new Rectangle();  Rectangle clipRect=g.getClipBounds();  for (int i=runCount - 1; i >= 0; i--) {    int start=tabRuns[i];    int next=tabRuns[(i == runCount - 1) ? 0 : i + 1];    int end=(next != 0 ? next - 1 : tabCount - 1);    for (int j=start; j <= end; j++) {      if (j != selectedIndex && rects[j].intersects(clipRect)) {        paintTab(g,tabPlacement,rects,j,iconRect,textRect);      }    }  }  if (selectedIndex >= 0 && rects[selectedIndex].intersects(clipRect)) {    paintTab(g,tabPlacement,rects,selectedIndex,iconRect,textRect);  }}  }
class C{  private final void processMode(String target,String sourceNick,String sourceLogin,String sourceHostname,String mode){  if (_channelPrefixes.indexOf(target.charAt(0)) >= 0) {    String channel=target;    StringTokenizer tok=new StringTokenizer(mode);    String[] params=new String[tok.countTokens()];    int t=0;    while (tok.hasMoreTokens()) {      params[t]=tok.nextToken();      t++;    }    char pn=' ';    int p=1;    for (int i=0; i < params[0].length(); i++) {      char atPos=params[0].charAt(i);      if (atPos == '+' || atPos == '-') {        pn=atPos;      } else       if (atPos == 'o') {        if (pn == '+') {          this.updateUser(channel,OP_ADD,params[p]);          onOp(channel,sourceNick,sourceLogin,sourceHostname,params[p]);        } else {          this.updateUser(channel,OP_REMOVE,params[p]);          onDeop(channel,sourceNick,sourceLogin,sourceHostname,params[p]);        }        p++;      } else       if (atPos == 'v') {        if (pn == '+') {          this.updateUser(channel,VOICE_ADD,params[p]);          onVoice(channel,sourceNick,sourceLogin,sourceHostname,params[p]);        } else {          this.updateUser(channel,VOICE_REMOVE,params[p]);          onDeVoice(channel,sourceNick,sourceLogin,sourceHostname,params[p]);        }        p++;      } else       if (atPos == 'k') {        if (pn == '+') {          onSetChannelKey(channel,sourceNick,sourceLogin,sourceHostname,params[p]);        } else {          onRemoveChannelKey(channel,sourceNick,sourceLogin,sourceHostname,params[p]);        }        p++;      } else       if (atPos == 'l') {        if (pn == '+') {          onSetChannelLimit(channel,sourceNick,sourceLogin,sourceHostname,Integer.parseInt(params[p]));          p++;        } else {          onRemoveChannelLimit(channel,sourceNick,sourceLogin,sourceHostname);        }      } else       if (atPos == 'b') {        if (pn == '+') {          onSetChannelBan(channel,sourceNick,sourceLogin,sourceHostname,params[p]);        } else {          onRemoveChannelBan(channel,sourceNick,sourceLogin,sourceHostname,params[p]);        }        p++;      } else       if (atPos == 't') {        if (pn == '+') {          onSetTopicProtection(channel,sourceNick,sourceLogin,sourceHostname);        } else {          onRemoveTopicProtection(channel,sourceNick,sourceLogin,sourceHostname);        }      } else       if (atPos == 'n') {        if (pn == '+') {          onSetNoExternalMessages(channel,sourceNick,sourceLogin,sourceHostname);        } else {          onRemoveNoExternalMessages(channel,sourceNick,sourceLogin,sourceHostname);        }      } else       if (atPos == 'i') {        if (pn == '+') {          onSetInviteOnly(channel,sourceNick,sourceLogin,sourceHostname);        } else {          onRemoveInviteOnly(channel,sourceNick,sourceLogin,sourceHostname);        }      } else       if (atPos == 'm') {        if (pn == '+') {          onSetModerated(channel,sourceNick,sourceLogin,sourceHostname);        } else {          onRemoveModerated(channel,sourceNick,sourceLogin,sourceHostname);        }      } else       if (atPos == 'p') {        if (pn == '+') {          onSetPrivate(channel,sourceNick,sourceLogin,sourceHostname);        } else {          onRemovePrivate(channel,sourceNick,sourceLogin,sourceHostname);        }      } else       if (atPos == 's') {        if (pn == '+') {          onSetSecret(channel,sourceNick,sourceLogin,sourceHostname);        } else {          onRemoveSecret(channel,sourceNick,sourceLogin,sourceHostname);        }      }    }    this.onMode(channel,sourceNick,sourceLogin,sourceHostname,mode);  } else {    String nick=target;    this.onUserMode(nick,sourceNick,sourceLogin,sourceHostname,mode);  }}  }
class C{  public EffectWeightedRandomList copy(){  return new EffectWeightedRandomList().concat(effects);}  }
class C{  @Override public void trigger(DialogueState state,Collection<String> updatedVars){  if (!rootNode.getNodeName().equals("interaction")) {    log.warning("root node is ill-formatted: " + rootNode.getNodeName() + " or first value is null");    return;  }  if (state.hasChanceNode(settings.userSpeech)) {    return;  }  try {    if (updatedVars.contains(settings.userInput)) {      Set<String> varsToRecord=new HashSet<String>();      varsToRecord.add(settings.userInput);      varsToRecord.addAll(settings.varsToMonitor);      Element el=state.generateXML(doc,varsToRecord);      if (el.getChildNodes().getLength() > 0) {        doc.renameNode(el,null,"userTurn");        rootNode.appendChild(el);      }    }    if (updatedVars.contains(settings.systemOutput)) {      Set<String> varsToRecord=new HashSet<String>();      varsToRecord.add(settings.systemOutput);      varsToRecord.addAll(settings.varsToMonitor);      if (state.hasChanceNode("a_m")) {        varsToRecord.add("a_m");      }      Element el=state.generateXML(doc,varsToRecord);      if (el.getChildNodes().getLength() > 0) {        doc.renameNode(el,null,"systemTurn");        rootNode.appendChild(el);      }    }  } catch (  RuntimeException e) {    log.warning("cannot record dialogue turn " + e);  }}  }
class C{  private void write(int integer,Huff huff) throws JSONException {  huff.write(integer,this.bitwriter);}  }
class C{  public void testDoTag() throws Exception {  System.out.println("doTag");  ForJavaScriptSourceTag instance=new ForJavaScriptSourceTag();  String value="\0'\"";  String expected="\\x00\\'\\\"";  instance.setJspContext(_pageContext);  instance.setValue(value);  instance.doTag();  String results=_response.getContentAsString();  assertEquals(expected,results);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void customSliderView(final HashMap<String,String> maps){  for (  String name : maps.keySet()) {    CustomNumberView textSliderView=new CustomNumberView(this);    textSliderView.description(name).image(maps.get(name)).setScaleType(BaseSliderView.ScaleType.Fit).setOnSliderClickListener(this);    textSliderView.getBundle().putString("extra",name);    mDemoSlider.addSlider(textSliderView);  }}  }
class C{  private String c(String str){  return str + count;}  }
class C{  public void endCompose(StylesheetRoot sroot) throws TransformerException {  int length=getParamElemCount();  for (int i=0; i < length; i++) {    ElemWithParam ewp=getParamElem(i);    ewp.endCompose(sroot);  }  super.endCompose(sroot);}  }
class C{  private void deploy(){  lock.writeLock().lock();  try {    if (closed)     throw new CacheEntryListenerException("Failed to deploy the filter because it has been closed.");    PlatformContext ctx=PlatformUtils.platformContext(grid);    try (PlatformMemory mem=ctx.memory().allocate()){      PlatformOutputStream out=mem.output();      BinaryRawWriterEx writer=ctx.writer(out);      writer.writeObject(filter);      out.synchronize();      ptr=ctx.gateway().continuousQueryFilterCreate(mem.pointer());    } catch (    Exception e) {      close();      throw new CacheEntryListenerException("Failed to deploy the filter.",e);    }  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public RotationMatrixBuilder rotateAll(){  for (int i=0; i < dimension - 1; i++) {    for (int j=i + 1; j < dimension; j++) {      Plane plane=new Plane(i,j);      plane.setTheta(PRNG.nextDouble(0.0,2.0 * Math.PI));      planes.add(plane);    }  }  return this;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tSpecify the random number seed (default 1)","S",1,"-S <num>"));  result.addElement(new Option("\tThe size of the output dataset, as a percentage of\n" + "\tthe input dataset (default 100)","Z",1,"-Z <num>"));  result.addElement(new Option("\tDisables replacement of instances\n" + "\t(default: with replacement)","no-replacement",0,"-no-replacement"));  result.addElement(new Option("\tInverts the selection - only available with '-no-replacement'.","V",0,"-V"));  return result.elements();}  }
class C{  public Reader create(InputStream is,String javaEncoding){  return null;}  }
class C{  public static Mailbox mailboxFromResult(Result result){  NavigableMap<byte[],byte[]> rawMailbox=result.getFamilyMap(MAILBOX_CF);  MailboxPath path=new MailboxPath(Bytes.toString(rawMailbox.get(MAILBOX_NAMESPACE)),Bytes.toString(rawMailbox.get(MAILBOX_USER)),Bytes.toString(rawMailbox.get(MAILBOX_NAME)));  HBaseMailbox mailbox=new HBaseMailbox(path,Bytes.toLong(rawMailbox.get(MAILBOX_UIDVALIDITY)));  mailbox.setMailboxId(HBaseIdFromRowKey(result.getRow()));  mailbox.setHighestModSeq(Bytes.toLong(rawMailbox.get(MAILBOX_HIGHEST_MODSEQ)));  mailbox.setLastUid(Bytes.toLong(rawMailbox.get(MAILBOX_LASTUID)));  mailbox.setMessageCount(Bytes.toLong(rawMailbox.get(MAILBOX_MESSAGE_COUNT)));  return mailbox;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected CollectionManager(){  super(NutchConfiguration.create());}  }
class C{  public static <T>T checkNotNull(T reference){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  synchronized void wasModified(PropertyChangeEvent evt){  if (evt.getSource() instanceof PropertyEditor) {    PropertyEditor editor=(PropertyEditor)evt.getSource();    for (int i=0; i < m_Editors.length; i++) {      if (m_Editors[i] == editor) {        PropertyDescriptor property=m_Properties[i];        Object value=editor.getValue();        m_Values[i]=value;        Method setter=property.getWriteMethod();        try {          Object args[]={value};          args[0]=value;          setter.invoke(m_Target,args);        } catch (        InvocationTargetException ex) {          if (ex.getTargetException() instanceof PropertyVetoException) {            String message="WARNING: Vetoed; reason is: " + ex.getTargetException().getMessage();            System.err.println(message);            Component jf;            if (evt.getSource() instanceof JPanel) {              jf=((JPanel)evt.getSource()).getParent();            } else {              jf=new JFrame();            }            JOptionPane.showMessageDialog(jf,message,"error",JOptionPane.WARNING_MESSAGE);            if (jf instanceof JFrame) {              ((JFrame)jf).dispose();            }          } else {            System.err.println(ex.getTargetException().getClass().getName() + " while updating " + property.getName()+ ": "+ ex.getTargetException().getMessage());            Component jf;            if (evt.getSource() instanceof JPanel) {              jf=((JPanel)evt.getSource()).getParent();            } else {              jf=new JFrame();            }            JOptionPane.showMessageDialog(jf,ex.getTargetException().getClass().getName() + " while updating " + property.getName()+ ":\n"+ ex.getTargetException().getMessage(),"error",JOptionPane.WARNING_MESSAGE);            if (jf instanceof JFrame) {              ((JFrame)jf).dispose();            }          }        }catch (        Exception ex) {          System.err.println("Unexpected exception while updating " + property.getName());        }        if (m_Views[i] != null && m_Views[i] instanceof PropertyPanel) {          m_Views[i].repaint();          revalidate();        }        break;      }    }  }  for (int i=0; i < m_Properties.length; i++) {    Object o;    try {      Method getter=m_Properties[i].getReadMethod();      Method setter=m_Properties[i].getWriteMethod();      if (getter == null || setter == null) {        continue;      }      Object args[]={};      o=getter.invoke(m_Target,args);    } catch (    Exception ex) {      o=null;    }    if (o == m_Values[i] || (o != null && o.equals(m_Values[i]))) {      continue;    }    m_Values[i]=o;    if (m_Editors[i] == null) {      continue;    }    m_Editors[i].removePropertyChangeListener(this);    m_Editors[i].setValue(o);    m_Editors[i].addPropertyChangeListener(this);    if (m_Views[i] != null) {      m_Views[i].repaint();    }  }  if (Beans.isInstanceOf(m_Target,Component.class)) {    ((Component)(Beans.getInstanceOf(m_Target,Component.class))).repaint();  }}  }
class C{  private void loadStaticProperties() throws ReplicatorException {  logger.debug("Reading static properties file: " + staticPropertiesFile.getAbsolutePath());  staticProperties=loadProperties(staticPropertiesFile);}  }
class C{  public int capacity(){  return _states.length;}  }
class C{  public Printable createNotificationPrintable(Printable printable){  return new NotificationPrintable(printable);}  }
class C{  public MailOperationException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public Property monthOfYear(){  return new Property(this,getChronology().monthOfYear());}  }
class C{  protected String addSlash(String string){  return String.format("%s/",string);}  }
class C{  private byte[] tryDecodeHostToIPv4(String host){  String[] parts=CharUtils.splitByDot(host);  int numParts=parts.length;  if (numParts != 4 && numParts != 1) {    return null;  }  byte[] bytes=new byte[16];  bytes[10]=(byte)0xff;  bytes[11]=(byte)0xff;  for (int i=0; i < parts.length; i++) {    String parsedNum;    int base;    if (parts[i].startsWith("0x")) {      parsedNum=parts[i].substring(2);      base=16;    } else     if (parts[i].startsWith("0")) {      parsedNum=parts[i].substring(1);      base=8;    } else {      parsedNum=parts[i];      base=10;    }    Long section;    try {      section=parsedNum.isEmpty() ? 0 : Long.parseLong(parsedNum,base);    } catch (    NumberFormatException e) {      return null;    }    if (numParts == 4 && section > MAX_IPV4_PART || numParts == 1 && section > MAX_NUMERIC_DOMAIN_VALUE || section < MIN_IP_PART) {      return null;    }    if (numParts == 4) {      bytes[IPV4_MAPPED_IPV6_START_OFFSET + i]=section.byteValue();    } else {      int index=IPV4_MAPPED_IPV6_START_OFFSET;      bytes[index++]=(byte)((section >> 24) & 0xFF);      bytes[index++]=(byte)((section >> 16) & 0xFF);      bytes[index++]=(byte)((section >> 8) & 0xFF);      bytes[index]=(byte)(section & 0xFF);      return bytes;    }  }  return bytes;}  }
class C{  private void makeRule() throws Exception {  RuleNode[] best_leaf=new RuleNode[1];  double[] best_cov=new double[1];  RuleNode temp;  m_notCovered=new Instances(m_instances,0);  m_covered=new Instances(m_instances,0);  best_cov[0]=-1;  best_leaf[0]=null;  m_topOfTree.findBestLeaf(best_cov,best_leaf);  temp=best_leaf[0];  if (temp == null) {    throw new Exception("Unable to generate rule!");  }  m_ruleModel=temp;  int count=0;  while (temp.parentNode() != null) {    count++;    temp=temp.parentNode();  }  temp=best_leaf[0];  m_relOps=new int[count];  m_splitAtts=new int[count];  m_splitVals=new double[count];  if (m_smoothPredictions) {    m_internalNodes=new RuleNode[count];  }  int i=0;  while (temp.parentNode() != null) {    m_splitAtts[i]=temp.parentNode().splitAtt();    m_splitVals[i]=temp.parentNode().splitVal();    if (temp.parentNode().leftNode() == temp) {      m_relOps[i]=LEFT;      temp.parentNode().m_right=null;    } else {      m_relOps[i]=RIGHT;      temp.parentNode().m_left=null;    }    if (m_smoothPredictions) {      m_internalNodes[i]=temp.parentNode();    }    temp=temp.parentNode();    i++;  }  boolean ok;  for (i=0; i < m_numInstances; i++) {    ok=true;    for (int j=0; j < m_relOps.length; j++) {      if (m_relOps[j] == LEFT) {        if (m_instances.instance(i).value(m_splitAtts[j]) > m_splitVals[j]) {          m_notCovered.add(m_instances.instance(i));          ok=false;          break;        }      } else {        if (m_instances.instance(i).value(m_splitAtts[j]) <= m_splitVals[j]) {          m_notCovered.add(m_instances.instance(i));          ok=false;          break;        }      }    }    if (ok) {      m_numCovered++;    }  }}  }
class C{  public UserEntity deserialize(String jsonString){  UserEntity userEntity=gson.fromJson(jsonString,UserEntity.class);  return userEntity;}  }
class C{  public boolean publishNamespaceToMapgraph(final String namespace) throws Exception {  assertMapgraphRuntimeAvailable();  if (namespacePublishedToMapgraph(namespace))   return false;  final String repositoryUrl=getSparqlEndpointUrlForNamespaceOrDefault(namespace);  final ConnectOptions opts=newConnectOptions(repositoryUrl,UUID.randomUUID(),null);  JettyResponseListener response=null;{    opts.addRequestParam(MAPGRAPH,MAPGRAPH_PUBLISH);    opts.method="POST";  }  try {    checkResponseCode(response=doConnect(opts));  }  finally {    if (response != null)     response.abort();  }  return true;}  }
class C{  public CustomTile(Parcel parcel){  ParcelInfo parcelInfo=Concierge.receiveParcel(parcel);  int parcelableVersion=parcelInfo.getParcelVersion();  if (parcelableVersion >= Build.CM_VERSION_CODES.APRICOT) {    if (parcel.readInt() != 0) {      this.onClick=PendingIntent.CREATOR.createFromParcel(parcel);    }    if (parcel.readInt() != 0) {      this.onSettingsClick=Intent.CREATOR.createFromParcel(parcel);    }    if (parcel.readInt() != 0) {      this.onClickUri=Uri.CREATOR.createFromParcel(parcel);    }    if (parcel.readInt() != 0) {      this.label=parcel.readString();    }    if (parcel.readInt() != 0) {      this.contentDescription=parcel.readString();    }    if (parcel.readInt() != 0) {      this.expandedStyle=ExpandedStyle.CREATOR.createFromParcel(parcel);    }    this.icon=parcel.readInt();  }  if (parcelableVersion >= Build.CM_VERSION_CODES.BOYSENBERRY) {    this.resourcesPackageName=parcel.readString();    this.collapsePanel=(parcel.readInt() == 1);    if (parcel.readInt() != 0) {      this.remoteIcon=Bitmap.CREATOR.createFromParcel(parcel);    }    if (parcel.readInt() != 0) {      this.deleteIntent=PendingIntent.CREATOR.createFromParcel(parcel);    }    this.sensitiveData=(parcel.readInt() == 1);  }  if (parcelableVersion >= Build.CM_VERSION_CODES.DRAGON_FRUIT) {    if (parcel.readInt() != 0) {      this.onLongClick=PendingIntent.CREATOR.createFromParcel(parcel);    }  }  parcelInfo.complete();}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public boolean canScrollVertically(int direction){  final int offset=computeVerticalScrollOffset();  final int range=computeVerticalScrollRange() - computeVerticalScrollExtent();  if (range == 0)   return false;  if (direction < 0) {    return offset > 0;  } else {    return offset < range - 1;  }}  }
class C{  public static int termCount(Node node){  if (node instanceof SimpleNode) {    int count=0;    for (    SimpleNode n : getNodeIterator((SimpleNode)node)) {      count+=termCount(n);    }    return count;  } else   if (node instanceof ASTTerm) {    return 1;  } else {    throw new IllegalArgumentException("Node is of unknown type: " + node.getClass().getName());  }}  }
class C{  @Override public boolean containsValue(final Object value){  for (int i=1; i < contents.length; i+=2) {    final String k=contents[i];    if (k.equals(value)) {      return true;    }  }  return false;}  }
class C{  public boolean exists(){  File f=new File(ClientProxy.ROOT,name);  if (!f.exists())   return false;  String hash=Util.hash(f);  if (hash == null) {    Log.warning("Couldn't hash file %s; assuming it doesn't exist.",f.getAbsolutePath());    return false;  }  return hash.equalsIgnoreCase(sum);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node child;  String name;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(1);  attributes=testAddress.getAttributes();  child=attributes.item(0);  name=child.getNodeName();  assertTrue("namednodemapReturnFirstItemAssert",(equals("domestic",name) | equals("street",name)));}  }
class C{  @Nullable public Calendar detectDate(String input){  checkNotNull(input);  Time.setTimeZone(getTimeZone());  Options opt=new com.sk89q.jchronic.Options();  opt.setNow(Calendar.getInstance(getTimeZone()));  Span date=Chronic.parse(input,opt);  if (date == null) {    return null;  } else {    return date.getBeginCalendar();  }}  }
class C{  private static Response fatal(final RqFallback req) throws IOException {  return new RsWithStatus(new RsWithType(new RsVelocity(TkAppFallback.class.getResource("error.html.vm"),new RsVelocity.Pair("err",ExceptionUtils.getStackTrace(req.throwable())),new RsVelocity.Pair("rev",TkAppFallback.REV)),"text/html"),HttpURLConnection.HTTP_INTERNAL_ERROR);}  }
class C{  public void removeChannel(String channelId){  int size=getItemCount();  for (int i=0; i < size; i++) {    if (get(i).getId().equalsIgnoreCase(channelId)) {      remove(i);      return;    }  }  Log.e(TAG,"Channel not removed from adapter:  id=" + channelId);}  }
