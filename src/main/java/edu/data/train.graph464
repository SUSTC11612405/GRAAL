class C{  @Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  if (qName.equals(VALUE_TAG)) {    Number value;    try {      value=Double.valueOf(this.currentText.toString());      if (((Double)value).isNaN()) {        value=null;      }    } catch (    NumberFormatException e1) {      value=null;    }    this.itemHandler.setValue(value);    this.rootHandler.popSubHandler();  } else {    throw new SAXException("Expecting </Value> but found " + qName);  }}  }
class C{  public EPPreparedQueryResult execute(ContextPartitionSelector[] contextPartitionSelectors){  try {    int numStreams=processors.length;    if (contextPartitionSelectors != null && contextPartitionSelectors.length != numStreams) {      throw new IllegalArgumentException("Number of context partition selectors does not match the number of named windows in the from-clause");    }    if (statementSpec.getOptionalContextName() == null) {      Collection<EventBean>[] snapshots=new Collection[numStreams];      for (int i=0; i < numStreams; i++) {        ContextPartitionSelector selector=contextPartitionSelectors == null ? null : contextPartitionSelectors[i];        snapshots[i]=getStreamFilterSnapshot(i,selector);      }      resultSetProcessor.clear();      return process(snapshots);    }    List<ContextPartitionResult> contextPartitionResults=new ArrayList<ContextPartitionResult>();    ContextPartitionSelector singleSelector=contextPartitionSelectors != null && contextPartitionSelectors.length > 0 ? contextPartitionSelectors[0] : null;    Collection<Integer> agentInstanceIds=EPPreparedExecuteMethodHelper.getAgentInstanceIds(processors[0],singleSelector,services.getContextManagementService(),statementSpec.getOptionalContextName());    for (    int agentInstanceId : agentInstanceIds) {      FireAndForgetInstance processorInstance=processors[0].getProcessorInstanceContextById(agentInstanceId);      if (processorInstance != null) {        EPPreparedExecuteTableHelper.assignTableAccessStrategies(services,statementSpec.getTableNodes(),processorInstance.getAgentInstanceContext());        Collection<EventBean> coll=processorInstance.snapshotBestEffort(this,filters[0],statementSpec.getAnnotations());        contextPartitionResults.add(new ContextPartitionResult(coll,processorInstance.getAgentInstanceContext()));      }    }    ArrayDeque<EventBean[]> events=new ArrayDeque<EventBean[]>();    for (    ContextPartitionResult contextPartitionResult : contextPartitionResults) {      Collection<EventBean> snapshot=contextPartitionResult.getEvents();      if (statementSpec.getFilterRootNode() != null) {        snapshot=getFiltered(snapshot,Collections.singletonList(statementSpec.getFilterRootNode()));      }      EventBean[] rows=snapshot.toArray(new EventBean[snapshot.size()]);      resultSetProcessor.setAgentInstanceContext(contextPartitionResult.getContext());      UniformPair<EventBean[]> results=resultSetProcessor.processViewResult(rows,null,true);      if (results != null && results.getFirst() != null && results.getFirst().length > 0) {        events.add(results.getFirst());      }    }    return new EPPreparedQueryResult(resultSetProcessor.getResultEventType(),EventBeanUtility.flatten(events));  }  finally {    if (hasTableAccess) {      services.getTableService().getTableExprEvaluatorContext().releaseAcquiredLocks();    }  }}  }
class C{  public boolean isDirectory(){  return isDirectory;}  }
class C{  public EventStoreBuilder tcpNoDelayDisabled(){  tcpSettingsBuilder.tcpNoDelay(false);  return this;}  }
class C{  public void clearListeners(){  listeners=new ArrayList<T>();}  }
class C{  protected boolean filterHeader(int index){  if (this.headerName == null)   return true;  final String name=((Header)this.allHeaders.get(index)).getName();  return this.headerName.equalsIgnoreCase(name);}  }
class C{  private BillingResult initBillingResult(BillingInput billingInput) throws ObjectNotFoundException, NonUniqueBusinessKeyException {  BillingResult result=createBillingResult(billingInput);  long chargingOrgKey=bdr.loadChargingOrgKeyForSubscription(billingInput.getSubscriptionKey());  long vendorKey=bdr.loadVendorKeyForSubscription(billingInput.getSubscriptionKey());  result.setChargingOrgKey(chargingOrgKey);  result.setVendorKey(vendorKey);  result.setCurrency(bdr.loadSupportedCurrency(billingInput.getCurrencyIsoCode()));  if (billingInput.isStoreBillingResult()) {    bdr.persistBillingResult(result);  }  return result;}  }
class C{  public void encode(DerOutputStream out) throws IOException {  out.putInteger(serialNum);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public boolean isSetName(){  return this.name != null;}  }
class C{  void cacheImage(Dimension size,Image i){  Object w=Display.getInstance().createSoftWeakRef(i);  getScaleCache().put(size,w);}  }
class C{  private void nextImage(){  n=n < Integer.parseInt(tfNumberOfImages.getText()) ? n+=1 : 1;  getImage();}  }
class C{  @Override public SlotWindow inspectMe(IEntity entity,RPSlot content,SlotWindow container,int width,int height){  if ((container != null) && container.isVisible()) {    return container;  } else {    SlotWindow window=new SlotWindow(entity.getName(),width,height);    window.setSlot(entity,content.getName());    window.setAcceptedTypes(EntityMap.getClass("item",null,null));    window.setVisible(true);    addRepaintable(window);    return window;  }}  }
class C{  @SafeVarargs public static <Type>DisjunctiveValidator<Type> create(@NonNull final Context context,@StringRes final int resourceId,@NonNull final Validator<Type>... validators){  return new DisjunctiveValidator<>(context,resourceId,validators);}  }
class C{  private void configureAuth(ClientBuilder clientBuilder){  if (conf.client.authType == AuthenticationType.OAUTH) {    authToken=JerseyClientUtil.configureOAuth1(conf.client.oauth,clientBuilder);  } else   if (conf.client.authType != AuthenticationType.NONE) {    JerseyClientUtil.configurePasswordAuth(conf.client.authType,conf.client.basicAuth,clientBuilder);  }}  }
class C{  public static Test suite(){  return (new TestSuite(SelectComponentValueITCase.class));}  }
class C{  public void testWithoutAlt() throws Exception {  expectThrows(Exception.class,null);}  }
class C{  public static ComponentUI createUI(JComponent ta){  return new SynthTextAreaUI();}  }
class C{  public int size(){  return listeners.length;}  }
class C{  public double canUse(GadgetType gadget){  Object count=gadgetCooldowns.get(gadget);  if (count == null || System.currentTimeMillis() > (long)count) {    return -1;  }  double valueMillis=(long)count - System.currentTimeMillis();  return valueMillis / 1000d;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.465 -0500",hash_original_method="C2DD503B984E96C46288CB6F7C364E09",hash_generated_method="4AC8318C015B20964426413A31217551") public void putInt(String key,int value){  unparcel();  mMap.put(key,value);}  }
class C{  private List<String> breakupString(final String str,final int maxLength){  final List<String> result=new ArrayList<String>();  int startIdx=-1;  int lastIdx;  int idx;  if (str == null) {    return result;  }  do {    idx=startIdx;    do {      lastIdx=idx;      idx=str.indexOf(' ',lastIdx + 1);      LOG.fine("startIdx=" + startIdx + "  lastIdx="+ lastIdx+ "  idx="+ idx);      if (idx < 0) {        result.add(str.substring(startIdx + 1));        return result;      }    } while ((idx - startIdx) <= maxLength);    result.add(str.substring(startIdx + 1,lastIdx));    startIdx=lastIdx;  } while (true);}  }
class C{  public AgentAppEnvironmentView createEnvironmentView(){  return new ExtendedMapAgentView();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int compareDirection(EdgeEnd e){  if (dx == e.dx && dy == e.dy)   return 0;  if (quadrant > e.quadrant)   return 1;  if (quadrant < e.quadrant)   return -1;  return CGAlgorithms.computeOrientation(e.p0,e.p1,p1);}  }
class C{  private void removeParserNotices(ParseResult res){  if (noticesToHighlights != null) {    RSyntaxTextAreaHighlighter h=(RSyntaxTextAreaHighlighter)textArea.getHighlighter();    for (Iterator i=noticesToHighlights.entrySet().iterator(); i.hasNext(); ) {      Map.Entry entry=(Map.Entry)i.next();      ParserNotice notice=(ParserNotice)entry.getKey();      if (shouldRemoveNotice(notice,res)) {        if (entry.getValue() != null) {          h.removeParserHighlight(entry.getValue());        }        i.remove();        if (DEBUG_PARSING) {          System.out.println("[DEBUG]: ... notice removed: " + notice);        }      } else {        if (DEBUG_PARSING) {          System.out.println("[DEBUG]: ... notice not removed: " + notice);        }      }    }  }}  }
class C{  protected String createLoginPayload(String login,char[] pwd){  StringBuilder sb=new StringBuilder("{\"login\":\"");  return sb.append(login).append("\", \"password\":\"").append(pwd).append("\"}").toString();}  }
class C{  public boolean isImmediateDominatorOf(DominatorNode idom,DominatorNode node){  return (node.getParent() == idom);}  }
class C{  synchronized final boolean cancel(final int id,final boolean mayInterrupt){  return cancel(id,mayInterrupt,true);}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (cv != null) {    return cv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public TransactionOptimisticException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean canContain(ElementType other){  return (theModel & other.theMemberOf) != 0;}  }
class C{  public Builder addMenuItem(@NonNull String label,@NonNull PendingIntent pendingIntent){  if (mMenuItems == null)   mMenuItems=new ArrayList<>();  Bundle bundle=new Bundle();  bundle.putString(KEY_MENU_ITEM_TITLE,label);  bundle.putParcelable(KEY_PENDING_INTENT,pendingIntent);  mMenuItems.add(bundle);  return this;}  }
class C{  public ZoomControl(int mouseButton){  button=mouseButton;}  }
class C{  public synchronized boolean isNew(Response response){  if (!response.getOptions().hasObserve()) {    return true;  }  long T1=getTimestamp();  long T2=System.currentTimeMillis();  int V1=getCurrent();  int V2=response.getOptions().getObserve();  if (V1 < V2 && V2 - V1 < 1 << 23 || V1 > V2 && V1 - V2 > 1 << 23 || T2 > T1 + 128000) {    setTimestamp(T2);    number.set(V2);    return true;  } else {    return false;  }}  }
class C{  private void moveCursor(CursorSprite cursor,Coords newPos){  final Rectangle oldBounds=new Rectangle(cursor.getBounds());  if (newPos != null) {    cursor.setHexLocation(newPos);  } else {    cursor.setOffScreen();  }  repaint(oldBounds);  repaint(cursor.getBounds());}  }
class C{  public Boolean isUserCreated(){  return userCreated;}  }
class C{  @Autowired public AccountsController(AccountRepository accountRepository){  this.accountRepository=accountRepository;  logger.info("AccountRepository says system has " + accountRepository.countAccounts() + " accounts");}  }
class C{  public static String format(float[] d,String sep,NumberFormat nf){  return (d == null) ? "null" : (d.length == 0) ? "" : formatTo(new StringBuilder(),d,sep,nf).toString();}  }
class C{  public AccessibilityManagerService(Context context){  mContext=context;  mPackageManager=mContext.getPackageManager();  mWindowManagerService=(IWindowManager)ServiceManager.getService(Context.WINDOW_SERVICE);  mSecurityPolicy=new SecurityPolicy();  mMainHandler=new MainHandler(mContext.getMainLooper());  DisplayManager displayManager=(DisplayManager)mContext.getSystemService(Context.DISPLAY_SERVICE);  mDefaultDisplay=displayManager.getDisplay(Display.DEFAULT_DISPLAY);  registerBroadcastReceivers();  new AccessibilityContentObserver(mMainHandler).register(context.getContentResolver());}  }
class C{  public static ODataRequestContext createODataRequestContext(ODataRequest.Method method,EntityDataModel entityDataModel) throws UnsupportedEncodingException {  return new ODataRequestContext(createODataRequest(method),createODataUri(),entityDataModel);}  }
class C{  private static String capitalize(String s){  if (s == null || s.length() == 0) {    return "";  }  char first=s.charAt(0);  if (Character.isUpperCase(first)) {    return s;  } else {    return Character.toUpperCase(first) + s.substring(1);  }}  }
class C{  public LocalActivityManager(Activity parent,boolean singleMode){  mActivityThread=ActivityThread.currentActivityThread();  mParent=parent;  mSingleMode=singleMode;}  }
class C{  static public void assertSameIteratorAnyOrder(final String msg,final byte[][] expected,final Iterator<byte[]> actual){  final List<byte[]> range=new LinkedList<byte[]>();  for (  byte[] b : expected)   range.add(b);  for (int j=0; j < expected.length; j++) {    if (!actual.hasNext()) {      fail(msg + ": Index exhausted while expecting more object(s)" + ": index="+ j);    }    final byte[] actualValue=actual.next();    boolean found=false;    final Iterator<byte[]> titr=range.iterator();    while (titr.hasNext()) {      final byte[] b=titr.next();      if (BytesUtil.bytesEqual(b,actualValue)) {        found=true;        titr.remove();        break;      }    }    if (!found) {      fail("Value not expected" + ": index=" + j + ", object="+ actualValue);    }  }  if (actual.hasNext()) {    final byte[] actualValue=actual.next();    fail("Iterator will deliver too many objects object=" + actualValue);  }}  }
class C{  @Override public void preProcess() throws Exception {  if (m_SplitEvaluator == null) {    throw new Exception("No SplitEvalutor set");  }  if (m_ResultListener == null) {    throw new Exception("No ResultListener set");  }  m_ResultListener.preProcess(this);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  static Interface of(String name){  return new InterfaceImpl(name);}  }
class C{  private int handleW(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index,2,"WR")) {    result.append('R');    index+=2;  } else {    if (index == 0 && (isVowel(charAt(value,index + 1)) || contains(value,index,2,"WH"))) {      if (isVowel(charAt(value,index + 1))) {        result.append('A','F');      } else {        result.append('A');      }      index++;    } else     if ((index == value.length() - 1 && isVowel(charAt(value,index - 1))) || contains(value,index - 1,5,"EWSKI","EWSKY","OWSKI","OWSKY") || contains(value,0,3,"SCH")) {      result.appendAlternate('F');      index++;    } else     if (contains(value,index,4,"WICZ","WITZ")) {      result.append("TS","FX");      index+=4;    } else {      index++;    }  }  return index;}  }
class C{  public static double quantile(double p,double k,double theta,double shift){  return Math.exp(GammaDistribution.quantile(p,k,theta)) + shift;}  }
class C{  public static void dumpCursor(ICursor cursor,int maxColumnWidth,StringBuilder builder){  if (cursor == null) {    builder.append("Cursor is null");    return;  }  String[] columnNames=cursor.getColumnNames();  for (  String col : columnNames) {    addColumnToRowBuilder(builder,col,maxColumnWidth);  }  builder.append('\n');  for (int i=0; i < (maxColumnWidth + 1) * columnNames.length; i++) {    builder.append('=');  }  builder.append('\n');  int position=cursor.getPosition();  for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {    dumpCurrentRow(cursor,maxColumnWidth,builder);    builder.append('\n');  }  cursor.moveToPosition(position);}  }
class C{  static void writeCRC(IndexOutput output) throws IOException {  long value=output.getChecksum();  if ((value & 0xFFFFFFFF00000000L) != 0) {    throw new IllegalStateException("Illegal CRC-32 checksum: " + value + " (resource="+ output+ ")");  }  output.writeLong(value);}  }
class C{  public Entry(final String clazz,final String subclazz,final boolean blocked){  this.clazz=clazz;  this.subclazz=subclazz;  this.blocked=blocked;}  }
class C{  BeginParagraphAction(String nm,boolean select){  super(nm);  this.select=select;}  }
class C{  private void transmit(RtcpCompoundPacket packet) throws NetworkException {  byte[] data=packet.mData;  if (packet.mOffset > 0) {    System.arraycopy(data,packet.mOffset,data=new byte[packet.mLength],0,packet.mLength);  }  mStats.numBytes+=packet.mLength;  mStats.numPackets++;  mRtcpSession.updateavgrtcpsize(packet.mLength);  mRtcpSession.timeOfLastRTCPSent=mRtcpSession.currentTime();  if (data == null) {    return;  }  mDatagramConnection.send(mRemoteAddress,mRemotePort,data);}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  public static boolean isEqual(byte[] digesta,byte[] digestb){  if (digesta.length != digestb.length) {    return false;  }  for (int i=0; i < digesta.length; i++) {    if (digesta[i] != digestb[i]) {      return false;    }  }  return true;}  }
class C{  private static void rewriteMaxRetries(int value) throws Exception {  BufferedReader fr=new BufferedReader(new FileReader(OneKDC.KRB5_CONF));  FileWriter fw=new FileWriter("alternative-krb5.conf");  while (true) {    String s=fr.readLine();    if (s == null) {      break;    }    if (s.startsWith("[realms]")) {      fw.write("max_retries = 2\n");      fw.write("kdc_timeout = " + BadKdc.toReal(5000) + "\n");    } else     if (s.trim().startsWith("kdc = ")) {      if (value != -1) {        fw.write("    max_retries = " + value + "\n");        fw.write("    kdc_timeout = " + BadKdc.toReal(value * 1000) + "\n");      }      fw.write("    kdc = localhost:33333\n");    }    fw.write(s + "\n");  }  fr.close();  fw.close();  sun.security.krb5.Config.refresh();}  }
class C{  public boolean addFriend(String name,String key,int via,String number){  SQLiteDatabase db=getWritableDatabase();  if (db == null)   return false;  if (getFriendWithKey(key) != null) {    log.error("Contact was already in the store, data not changed");    return false;  }  ContentValues values=new ContentValues();  values.put(COL_DISPLAY_NAME,Utils.makeTextSafeForSQL(name));  values.put(COL_PUBLIC_KEY,key);  values.put(COL_ADDED_VIA,via);  values.put(COL_NUMBER,Utils.makeTextSafeForSQL(number));  db.insert(TABLE,null,values);  log.debug("Friend Added to store");  return true;}  }
class C{  private FilePosition posFrom(Mark startMark) throws ParseException {  return posFrom(startMark.getFilePosition());}  }
class C{  private void traceOperation(String s){}  }
class C{  public Object read(InputNode node) throws Exception {  String name=node.getName();  String element=path.getElement(name);  Label label=elements.get(element);  Converter converter=label.getConverter(context);  return converter.read(node);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int x=getInt(stack);  MediaFile mf=getMediaFile(stack);  return new Long(mf == null ? 0 : mf.getStart(x));}  }
class C{  public static void print(Closure self,Object value){  Object owner=getClosureOwner(self);  InvokerHelper.invokeMethod(owner,"print",new Object[]{value});}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,Map map){  buffer.append(map);}  }
class C{  private void testContainerManager(StorageAgent agent) throws Exception {  dag.setAttribute(OperatorContext.STORAGE_AGENT,agent);  StatsListeningOperator o1=dag.addOperator("o1",StatsListeningOperator.class);  FSRecoveryHandler recoveryHandler=new FSRecoveryHandler(dag.assertAppPath(),new Configuration(false));  StreamingContainerManager scm=StreamingContainerManager.getInstance(recoveryHandler,dag,false);  File expFile=new File(recoveryHandler.getDir(),FSRecoveryHandler.FILE_SNAPSHOT);  Assert.assertTrue("snapshot file " + expFile,expFile.exists());  PhysicalPlan plan=scm.getPhysicalPlan();  assertEquals("number required containers",1,plan.getContainers().size());  PTOperator o1p1=plan.getOperators(dag.getMeta(o1)).get(0);  @SuppressWarnings("UnusedAssignment") MockContainer mc=new MockContainer(scm,o1p1.getContainer());  PTContainer originalContainer=o1p1.getContainer();  Assert.assertNotNull(o1p1.getContainer().bufferServerAddress);  assertEquals(PTContainer.State.ACTIVE,o1p1.getContainer().getState());  assertEquals("state " + o1p1,PTOperator.State.PENDING_DEPLOY,o1p1.getState());  dag=StramTestSupport.createDAG(testMeta);  scm=StreamingContainerManager.getInstance(new FSRecoveryHandler(dag.assertAppPath(),new Configuration(false)),dag,false);  dag=scm.getLogicalPlan();  plan=scm.getPhysicalPlan();  o1p1=plan.getOperators(dag.getOperatorMeta("o1")).get(0);  assertEquals("post restore state " + o1p1,PTOperator.State.PENDING_DEPLOY,o1p1.getState());  o1=(StatsListeningOperator)o1p1.getOperatorMeta().getOperator();  assertEquals("containerId",originalContainer.getExternalId(),o1p1.getContainer().getExternalId());  assertEquals("stats listener",1,o1p1.statsListeners.size());  assertEquals("number stats calls",0,o1.processStatsCnt);  assertEquals("post restore 1",PTContainer.State.ALLOCATED,o1p1.getContainer().getState());  assertEquals("post restore 1",originalContainer.bufferServerAddress,o1p1.getContainer().bufferServerAddress);  StreamingContainerAgent sca=scm.getContainerAgent(originalContainer.getExternalId());  Assert.assertNotNull("allocated container restored " + originalContainer,sca);  assertEquals("memory usage allocated container",(int)OperatorContext.MEMORY_MB.defaultValue,sca.container.getAllocatedMemoryMB());  scm.scheduleContainerRestart(originalContainer.getExternalId());  assertEquals("memory usage of failed container",0,sca.container.getAllocatedMemoryMB());  Checkpoint firstCheckpoint=new Checkpoint(3,0,0);  mc=new MockContainer(scm,o1p1.getContainer());  checkpoint(scm,o1p1,firstCheckpoint);  mc.stats(o1p1.getId()).deployState(OperatorHeartbeat.DeployState.ACTIVE).currentWindowId(3).checkpointWindowId(3);  mc.sendHeartbeat();  assertEquals("state " + o1p1,PTOperator.State.ACTIVE,o1p1.getState());  CreateOperatorRequest cor=new CreateOperatorRequest();  cor.setOperatorFQCN(GenericTestOperator.class.getName());  cor.setOperatorName("o2");  CreateStreamRequest csr=new CreateStreamRequest();  csr.setSourceOperatorName("o1");  csr.setSourceOperatorPortName("outport");  csr.setSinkOperatorName("o2");  csr.setSinkOperatorPortName("inport1");  FutureTask<?> lpmf=scm.logicalPlanModification(Lists.newArrayList(cor,csr));  while (!lpmf.isDone()) {    scm.monitorHeartbeat();  }  Assert.assertNull(lpmf.get());  Assert.assertSame("dag references",dag,scm.getLogicalPlan());  assertEquals("number operators after plan modification",2,dag.getAllOperators().size());  o1p1.setState(PTOperator.State.INACTIVE);  Checkpoint offlineCheckpoint=new Checkpoint(10,0,0);  checkpoint(scm,o1p1,offlineCheckpoint);  dag=StramTestSupport.createDAG(testMeta);  scm=StreamingContainerManager.getInstance(new FSRecoveryHandler(dag.assertAppPath(),new Configuration(false)),dag,false);  Assert.assertNotSame("dag references",dag,scm.getLogicalPlan());  assertEquals("number operators after restore",2,scm.getLogicalPlan().getAllOperators().size());  dag=scm.getLogicalPlan();  plan=scm.getPhysicalPlan();  o1p1=plan.getOperators(dag.getOperatorMeta("o1")).get(0);  assertEquals("post restore state " + o1p1,PTOperator.State.INACTIVE,o1p1.getState());  o1=(StatsListeningOperator)o1p1.getOperatorMeta().getOperator();  assertEquals("stats listener",1,o1p1.statsListeners.size());  assertEquals("number stats calls post restore",1,o1.processStatsCnt);  assertEquals("post restore 1",PTContainer.State.ACTIVE,o1p1.getContainer().getState());  assertEquals("post restore 1",originalContainer.bufferServerAddress,o1p1.getContainer().bufferServerAddress);  assertEquals("checkpoints after recovery",Lists.newArrayList(firstCheckpoint,offlineCheckpoint),o1p1.checkpoints);}  }
class C{  public static boolean substringMatch(CharSequence str,int index,CharSequence substring){  for (int j=0; j < substring.length(); j++) {    int i=index + j;    if (i >= str.length() || str.charAt(i) != substring.charAt(j)) {      return false;    }  }  return true;}  }
class C{  public void addToken(Segment segment,int start,int end,int tokenType,int startOffset){switch (tokenType) {case Token.IDENTIFIER:    int value=wordsToHighlight.get(segment,start,end);  if (value != -1)   tokenType=value;break;case Token.WHITESPACE:case Token.SEPARATOR:case Token.OPERATOR:case Token.LITERAL_NUMBER_DECIMAL_INT:case Token.LITERAL_STRING_DOUBLE_QUOTE:case Token.LITERAL_CHAR:case Token.LITERAL_BACKQUOTE:case Token.COMMENT_EOL:case Token.PREPROCESSOR:case Token.VARIABLE:break;default :new Exception("Unknown tokenType: '" + tokenType + "'").printStackTrace();tokenType=Token.IDENTIFIER;break;}super.addToken(segment,start,end,tokenType,startOffset);}  }
class C{  protected void startDocumentInternal() throws org.xml.sax.SAXException {  if (m_tracer != null)   this.fireStartDoc();}  }
class C{  public static int determineConsecutiveDigitCount(CharSequence msg,int startpos){  int count=0;  int len=msg.length();  int idx=startpos;  if (idx < len) {    char ch=msg.charAt(idx);    while (isDigit(ch) && idx < len) {      count++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }  }  return count;}  }
class C{  @Override public String toString(){  return "CUDA_ARRAY3D_DESCRIPTOR[" + "Width=" + Width + ","+ "Height="+ Height+ ","+ "CUarray_format_Format="+ Format+ ","+ "NumChannels="+ NumChannels+ "]";}  }
class C{  private QuadData doQuadsPatternClause(final Node node,final Object data,final boolean allowBlankNodes) throws VisitorException {  final GroupGraphPattern parentGP=graphPattern;  graphPattern=new GroupGraphPattern();  graphPattern.setStatementPatternScope(parentGP.getStatementPatternScope());  graphPattern.setContextVar(parentGP.getContext());  for (int i=0; i < node.jjtGetNumChildren(); i++) {    node.jjtGetChild(i).jjtAccept(this,data);  }  final QuadData quadData=graphPattern.buildGroup(new QuadData());  if (!allowBlankNodes) {    final Iterator<StatementPatternNode> itr=BOpUtility.visitAll(quadData,StatementPatternNode.class);    while (itr.hasNext()) {      final StatementPatternNode sp=itr.next();      assertNotAnonymousVariable(sp.s());      assertNotAnonymousVariable(sp.o());    }  }  graphPattern=parentGP;  return quadData;}  }
class C{  public static String localize(double amount,boolean showDecimalPlaces){  NumberFormat defaultFormat=NumberFormat.getCurrencyInstance();  int decimalPlaces=showDecimalPlaces ? 2 : 0;  defaultFormat.setMinimumFractionDigits(decimalPlaces);  defaultFormat.setMaximumFractionDigits(2);  return defaultFormat.format(amount);}  }
class C{  public boolean isError(){  return error != null;}  }
class C{  public SQLTransientException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public static LongRange resolveRange(LongRange range,long numberSequences){  final long start=range.getStart() == LongRange.MISSING ? 0 : range.getStart();  if (start < 0) {    throw new IllegalArgumentException();  }  if (start > numberSequences || (numberSequences != 0 && start == numberSequences)) {    throw new NoTalkbackSlimException("The start sequence id \"" + start + "\" must be less than than the number of available sequences \""+ numberSequences+ "\".");  }  long end=range.getEnd() == LongRange.MISSING ? numberSequences : range.getEnd();  if (end > numberSequences) {    Diagnostic.warning("The end sequence id \"" + range.getEnd() + "\" is out of range, it"+ " must be from \""+ (start + 1)+ "\" to \""+ numberSequences+ "\". Defaulting end to \""+ numberSequences+ "\"");    end=numberSequences;  }  return new LongRange(start,end);}  }
class C{  public void closeJsonStream() throws IOException {  if (generator == null) {    return;  }  while (!stack.isEmpty()) {    writeEndComponent();  }  if (wrapInArray) {    generator.writeEndArray();  }  if (closeGenerator) {    generator.close();  }}  }
class C{  public ServiceManager(Iterable<? extends Service> services){  ImmutableList<Service> copy=ImmutableList.copyOf(services);  if (copy.isEmpty()) {    logger.log(Level.WARNING,"ServiceManager configured with no services.  Is your application configured properly?",new EmptyServiceManagerWarning());    copy=ImmutableList.<Service>of(new NoOpService());  }  this.state=new ServiceManagerState(copy);  this.services=copy;  WeakReference<ServiceManagerState> stateReference=new WeakReference<ServiceManagerState>(state);  for (  Service service : copy) {    service.addListener(new ServiceListener(service,stateReference),directExecutor());    checkArgument(service.state() == NEW,"Can only manage NEW services, %s",service);  }  this.state.markReady();}  }
class C{  @Override public void delete(){  ResourceAssignmentCollectionImpl.this.deleteAssignment(getResource());  myAssignmentToResource.delete();}  }
class C{  public static double powerCurveToLinear(final double[] curve,double value){  return Math.log((value - curve[0]) / curve[1]) / curve[2];}  }
class C{  private boolean isSelected(Class<? extends DefaultData> clazz){  for (  TableItem tableItem : table.getItems()) {    if (ObjectUtils.equals(tableItem.getData(),clazz)) {      return tableItem.getChecked();    }  }  return false;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.legendLine=SerialUtilities.readShape(stream);  this.fillComposite=SerialUtilities.readComposite(stream);}  }
class C{  public ActuallyInheritedAndConsumedMembersIterator actuallyInheritedAndMixedMembers(){  return new ActuallyInheritedAndConsumedMembersIterator();}  }
class C{  public void writeRawByte(final int value) throws IOException {  writeRawByte((byte)value);}  }
class C{  public RegExpExpression(boolean isNot){  this.not=isNot;}  }
class C{  private DeviceScannerFactory(){}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(priority + " ");  sb.append(weight + " ");  sb.append(port + " ");  sb.append(target);  return sb.toString();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.676 -0500",hash_original_method="CAFFB5BC78A2E3A526CF37E51EA3E6DA",hash_generated_method="CAFFB5BC78A2E3A526CF37E51EA3E6DA") void addHeader(String name,String value){  if (name == null) {    String damage="Null http header name";    HttpLog.e(damage);    throw new NullPointerException(damage);  }  if (value == null || value.length() == 0) {    String damage="Null or empty value for header \"" + name + "\"";    HttpLog.e(damage);    throw new RuntimeException(damage);  }  mHttpRequest.addHeader(name,value);}  }
class C{  public void add(final ConversationStates state,final Collection<String> triggerStrings,final ChatCondition condition,boolean secondary,final ConversationStates nextState,final String reply,final ChatAction action){  if (triggerStrings == null) {    throw new IllegalArgumentException("trigger list must not be null");  }  Collection<Expression> triggerExpressions=createUniqueTriggerExpressions(state,triggerStrings,null,condition,reply,action);  add(triggerExpressions,state,condition,secondary,nextState,reply,action);}  }
class C{  public static boolean isDefaultUseSystemBrowser(){  return BrowserUtil.canUseSystemBrowser();}  }
class C{  public FastAdapterBottomSheetDialog<Item> withOnPreClickListener(FastAdapter.OnClickListener<Item> onPreClickListener){  this.mFastItemAdapter.withOnPreClickListener(onPreClickListener);  return this;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private void addExtraParamTofirst(Object param,boolean occasional){  final ObjectExpression expr=new ObjectExpression(param);  expr.setIsOccasional(occasional);  if (mParamAccessInfos == null) {    mParamAccessInfos=new ArrayList();    mParamAccessInfos.add(expr);  } else {    if (mParamAccessInfos.size() > 0)     mParamAccessInfos.add(0,expr); else     mParamAccessInfos.add(expr);  }}  }
class C{  public static int installSilent(Context context,String filePath,String pmParams){  if (filePath == null || filePath.length() == 0) {    return INSTALL_FAILED_INVALID_URI;  }  File file=new File(filePath);  if (file == null || file.length() <= 0 || !file.exists() || !file.isFile()) {    return INSTALL_FAILED_INVALID_URI;  }  StringBuilder command=new StringBuilder().append("LD_LIBRARY_PATH=/vendor/lib:/system/lib pm install ").append(pmParams == null ? "" : pmParams).append(" ").append(filePath.replace(" ","\\ "));  ShellUtil.CommandResult commandResult=ShellUtil.execCommand(command.toString(),!isSystemApplication(context),true);  if (commandResult.successMsg != null && (commandResult.successMsg.contains("Success") || commandResult.successMsg.contains("success"))) {    return INSTALL_SUCCEEDED;  }  Logger.e(new StringBuilder().append("installSilent successMsg:").append(commandResult.successMsg).append(", ErrorMsg:").append(commandResult.errorMsg).toString());  if (commandResult.errorMsg == null) {    return INSTALL_FAILED_OTHER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_ALREADY_EXISTS")) {    return INSTALL_FAILED_ALREADY_EXISTS;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_APK")) {    return INSTALL_FAILED_INVALID_APK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_URI")) {    return INSTALL_FAILED_INVALID_URI;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INSUFFICIENT_STORAGE")) {    return INSTALL_FAILED_INSUFFICIENT_STORAGE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_DUPLICATE_PACKAGE")) {    return INSTALL_FAILED_DUPLICATE_PACKAGE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_NO_SHARED_USER")) {    return INSTALL_FAILED_NO_SHARED_USER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_UPDATE_INCOMPATIBLE")) {    return INSTALL_FAILED_UPDATE_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_SHARED_USER_INCOMPATIBLE")) {    return INSTALL_FAILED_SHARED_USER_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MISSING_SHARED_LIBRARY")) {    return INSTALL_FAILED_MISSING_SHARED_LIBRARY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_REPLACE_COULDNT_DELETE")) {    return INSTALL_FAILED_REPLACE_COULDNT_DELETE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_DEXOPT")) {    return INSTALL_FAILED_DEXOPT;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_OLDER_SDK")) {    return INSTALL_FAILED_OLDER_SDK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CONFLICTING_PROVIDER")) {    return INSTALL_FAILED_CONFLICTING_PROVIDER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_NEWER_SDK")) {    return INSTALL_FAILED_NEWER_SDK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_TEST_ONLY")) {    return INSTALL_FAILED_TEST_ONLY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CPU_ABI_INCOMPATIBLE")) {    return INSTALL_FAILED_CPU_ABI_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MISSING_FEATURE")) {    return INSTALL_FAILED_MISSING_FEATURE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CONTAINER_ERROR")) {    return INSTALL_FAILED_CONTAINER_ERROR;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_INSTALL_LOCATION")) {    return INSTALL_FAILED_INVALID_INSTALL_LOCATION;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MEDIA_UNAVAILABLE")) {    return INSTALL_FAILED_MEDIA_UNAVAILABLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_VERIFICATION_TIMEOUT")) {    return INSTALL_FAILED_VERIFICATION_TIMEOUT;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_VERIFICATION_FAILURE")) {    return INSTALL_FAILED_VERIFICATION_FAILURE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_PACKAGE_CHANGED")) {    return INSTALL_FAILED_PACKAGE_CHANGED;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_UID_CHANGED")) {    return INSTALL_FAILED_UID_CHANGED;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_NOT_APK")) {    return INSTALL_PARSE_FAILED_NOT_APK;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_MANIFEST")) {    return INSTALL_PARSE_FAILED_BAD_MANIFEST;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION")) {    return INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_NO_CERTIFICATES")) {    return INSTALL_PARSE_FAILED_NO_CERTIFICATES;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES")) {    return INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING")) {    return INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME")) {    return INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID")) {    return INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_MANIFEST_MALFORMED")) {    return INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_MANIFEST_EMPTY")) {    return INSTALL_PARSE_FAILED_MANIFEST_EMPTY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INTERNAL_ERROR")) {    return INSTALL_FAILED_INTERNAL_ERROR;  }  return INSTALL_FAILED_OTHER;}  }
class C{  @Override public void serialize(OFMatch match,JsonGenerator jGen,SerializerProvider serializer) throws IOException, JsonProcessingException {  jGen.writeStartObject();  jGen.writeStringField("dataLayerDestination",HexString.toHexString(match.getDataLayerDestination()));  jGen.writeStringField("dataLayerSource",HexString.toHexString(match.getDataLayerSource()));  String dataType=Integer.toHexString(match.getDataLayerType());  while (dataType.length() < 4) {    dataType="0".concat(dataType);  }  jGen.writeStringField("dataLayerType","0x" + dataType);  jGen.writeNumberField("dataLayerVirtualLan",match.getDataLayerVirtualLan());  jGen.writeNumberField("dataLayerVirtualLanPriorityCodePoint",match.getDataLayerVirtualLanPriorityCodePoint());  jGen.writeNumberField("inputPort",match.getInputPort());  jGen.writeStringField("networkDestination",intToIp(match.getNetworkDestination()));  jGen.writeNumberField("networkDestinationMaskLen",match.getNetworkDestinationMaskLen());  jGen.writeNumberField("networkProtocol",match.getNetworkProtocol());  jGen.writeStringField("networkSource",intToIp(match.getNetworkSource()));  jGen.writeNumberField("networkSourceMaskLen",match.getNetworkSourceMaskLen());  jGen.writeNumberField("networkTypeOfService",match.getNetworkTypeOfService());  jGen.writeNumberField("transportDestination",match.getTransportDestination());  jGen.writeNumberField("transportSource",match.getTransportSource());  jGen.writeNumberField("wildcards",match.getWildcards());  jGen.writeEndObject();}  }
class C{  public void testSubmitAfterShutdown(){  ForkJoinPool p=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(p);    p.shutdown();    assertTrue(p.isShutdown());    try {      @SuppressWarnings("unused") ForkJoinTask<Integer> f=p.submit(new FibTask(8));      shouldThrow();    } catch (    RejectedExecutionException success) {    }  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public ServerConnectivityException(Throwable cause){  super(cause);}  }
class C{  protected LocationType(){}  }
class C{  public ClaimBuilder putResource(String resource){  return put("resource",resource);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:13.814 -0500",hash_original_method="3E78E5A9498D2FA8094C2F6169A192AD",hash_generated_method="8C83FF4C61A9DB1335C855AB0D226F3A") public DERExternal(DERObjectIdentifier directReference,DERInteger indirectReference,ASN1Object dataValueDescriptor,DERTaggedObject externalData){  this(directReference,indirectReference,dataValueDescriptor,externalData.getTagNo(),externalData.getDERObject());}  }
class C{  protected boolean parsePredicate(PsiBuilder builder){  final PsiBuilder.Marker marker=builder.mark();  if (builder.getTokenType() != XPathTokenTypes.LBRACKET) {    marker.drop();    return false;  }  builder.advanceLexer();  if (!parseExpr(builder)) {    builder.error("expression expected");  }  checkMatches(builder,XPathTokenTypes.RBRACKET,"] expected");  marker.done(XPathElementTypes.PREDICATE);  return true;}  }
class C{  public synchronized boolean unregister(Platform platform){  checkNotNull(platform);  boolean removed=platforms.remove(platform);  if (removed) {    logger.log(Level.FINE,"Unregistering " + platform.getClass().getCanonicalName() + " from WorldEdit");    boolean choosePreferred=false;    Iterator<Entry<Capability,Platform>> it=preferences.entrySet().iterator();    while (it.hasNext()) {      Entry<Capability,Platform> entry=it.next();      if (entry.getValue().equals(platform)) {        Capability key=entry.getKey();        try {          Method methodUnload=key.getClass().getDeclaredMethod("unload",PlatformManager.class,Platform.class);          methodUnload.setAccessible(true);          methodUnload.invoke(key,this,entry.getValue());        } catch (        Throwable e) {          throw new RuntimeException(e);        }        it.remove();        choosePreferred=true;      }    }    if (choosePreferred) {      choosePreferred();    }  }  return removed;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:07.050 -0500",hash_original_method="220130DBC584D5B5D45771D972950D18",hash_generated_method="9A5787370DD2B664E63383C7AA2A5BCE") @Override public boolean equals(Object object){  if (object == this) {    return true;  }  if (!(object instanceof NativeDecimalFormat)) {    return false;  }  NativeDecimalFormat obj=(NativeDecimalFormat)object;  if (obj.address == this.address) {    return true;  }  return obj.toPattern().equals(this.toPattern()) && obj.isDecimalSeparatorAlwaysShown() == this.isDecimalSeparatorAlwaysShown() && obj.getGroupingSize() == this.getGroupingSize() && obj.getMultiplier() == this.getMultiplier() && obj.getNegativePrefix().equals(this.getNegativePrefix()) && obj.getNegativeSuffix().equals(this.getNegativeSuffix()) && obj.getPositivePrefix().equals(this.getPositivePrefix()) && obj.getPositiveSuffix().equals(this.getPositiveSuffix()) && obj.getMaximumIntegerDigits() == this.getMaximumIntegerDigits() && obj.getMaximumFractionDigits() == this.getMaximumFractionDigits() && obj.getMinimumIntegerDigits() == this.getMinimumIntegerDigits() && obj.getMinimumFractionDigits() == this.getMinimumFractionDigits() && obj.isGroupingUsed() == this.isGroupingUsed();}  }
class C{  public BatchFraction threadPool(final String name,final int maxThreads,final int keepAliveTime,final TimeUnit keepAliveUnits){  final ThreadPool<?> threadPool=new ThreadPool<>(name);  threadPool.maxThreads(maxThreads).keepaliveTime("time",Integer.toBinaryString(keepAliveTime)).keepaliveTime("unit",keepAliveUnits.name().toLowerCase(Locale.ROOT));  return threadPool(threadPool);}  }
class C{  public Bundler putIntArray(String key,int[] value){  bundle.putIntArray(key,value);  return this;}  }
class C{  public final Bag clear(){  Bag bag=new Bag();  Object[][][] field=this.field;  Object[][] fieldx=null;  Object[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++) {        if (fieldxy[z] != null)         bag.add(fieldxy[z]);        fieldxy[z]=null;      }    }  }  return bag;}  }
class C{  private void removeSlingContent(BundleContext bundleContext){  ServiceReference ResourceResolverFactoryReference=bundleContext.getServiceReference(ResourceResolverFactory.class.getName());  ResourceResolverFactory resolverFactory=(ResourceResolverFactory)bundleContext.getService(ResourceResolverFactoryReference);  if (resolverFactory != null) {    ResourceResolver resolver=null;    try {      resolver=resolverFactory.getAdministrativeResourceResolver(null);      Resource resource=resolver.getResource("/index.html");      if (resource != null) {        try {          resolver.delete(resource);          resolver.commit();        } catch (        PersistenceException e) {          LOGGER.error("Could not delete resource",e);        }      }    } catch (    LoginException e) {      LOGGER.error("Could not login to repository",e);    } finally {      if (resolver != null && resolver.isLive()) {        resolver.close();        resolver=null;      }    }  }}  }
class C{  protected ColladaAbstractShader(String namespaceURI){  super(namespaceURI);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (key: ");  result.append(key);  result.append(", firstFacet: ");  result.append(firstFacet);  result.append(')');  return result.toString();}  }
class C{  public static URI createUriFromServerSet(ServerSet serverSet,String path) throws URISyntaxException {  return createUriFromServerSet(serverSet,path,"http");}  }
class C{  @Override protected AccessCheckingPortal createPortal(final ConfigurableFactoryContext ctx){  return new RandomDestinationPortal();}  }
class C{  protected void garbageCollect(VisualTable labels){  Iterator iter=labels.tuples();  while (iter.hasNext()) {    VisualItem item=(VisualItem)iter.next();    if (!item.isStartVisible() && !item.isEndVisible()) {      labels.removeTuple(item);    }  }}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(attrs.size());  Enumeration<Attribute> attrEnum=attrs.elements();  while (attrEnum.hasMoreElements()) {    s.writeObject(attrEnum.nextElement());  }}  }
class C{  protected void resetOptions(){  m_starting=null;  m_startRange=new Range();  m_attributeList=null;  m_attributeMerit=null;  m_threshold=-Double.MAX_VALUE;}  }
class C{  public static String createDigest(String sessionID,String initiatorJID,String targetJID){  StringBuilder b=new StringBuilder();  b.append(sessionID).append(initiatorJID).append(targetJID);  return StringUtils.hash(b.toString());}  }
class C{  @Override public void connectionNotification(String eventName,Object source){  if (connectionAllowed(eventName)) {    m_listenee=source;  }}  }
class C{  public static void sendBroadcast(Context mContext){  mContext.sendBroadcast(mScrobbleDroidIntent);}  }
class C{  private void prefixTree(StringBuffer text) throws Exception {  text.append("[");  text.append(m_localModel.leftSide(m_train) + ":");  for (int i=0; i < m_sons.length; i++) {    if (i > 0) {      text.append(",\n");    }    text.append(m_localModel.rightSide(i,m_train));  }  for (int i=0; i < m_sons.length; i++) {    if (m_sons[i].m_isLeaf) {      text.append("[");      text.append(m_localModel.dumpLabel(i,m_train));      text.append("]");    } else {      m_sons[i].prefixTree(text);    }  }  text.append("]");}  }
class C{  void testString(){  String a=randomString();  if (returnNew) {    String b=StringUtils.fromCacheOrNew(a);    try {      assertEquals(a,b);    } catch (    Exception e) {      TestBase.logError("error",e);    }    if (a != null && a == b && a.length() > 0) {      throw new AssertionError("a=" + System.identityHashCode(a) + " b="+ System.identityHashCode(b));    }  } else {    String b;    if (useIntern) {      b=a == null ? null : a.intern();    } else {      b=StringUtils.cache(a);    }    try {      assertEquals(a,b);    } catch (    Exception e) {      TestBase.logError("error",e);    }  }}  }
class C{  public static int parseHexInt(String x){  try {    return (int)Long.parseLong(x,16);  } catch (  NumberFormatException e) {    throw newIllegalStateException(ERROR_FILE_CORRUPT,"Error parsing the value {0}",x,e);  }}  }
class C{  public PrinterBuffer(){  m_list=new LinkedList();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:35.916 -0400",hash_original_method="F07D2B002CE8D32774BDF7E27A216F8A",hash_generated_method="142BEDC549A1782A1BD4D492BEFB1726") public boolean hideOverflowMenu(){  if (mPostedOpenRunnable != null && mMenuView != null) {    ((View)mMenuView).removeCallbacks(mPostedOpenRunnable);    mPostedOpenRunnable=null;    return true;  }  MenuPopupHelper popup=mOverflowPopup;  if (popup != null) {    popup.dismiss();    return true;  }  return false;}  }
class C{  protected void sequence_RequiredRuntimeLibraryDependency(ISerializationContext context,RequiredRuntimeLibraryDependency semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4mfPackage.Literals.PROJECT_REFERENCE__PROJECT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4mfPackage.Literals.PROJECT_REFERENCE__PROJECT));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getRequiredRuntimeLibraryDependencyAccess().getProjectSimpleProjectDescriptionParserRuleCall_0(),semanticObject.getProject());  feeder.finish();}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.setContentType("text/html");  PrintWriter out=response.getWriter();  out.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">");  out.println("<HTML>");  out.println("  <HEAD><TITLE>A Servlet</TITLE></HEAD>");  out.println("  <BODY>");  out.print("    This is ");  out.print(this.getClass());  out.println(", using the POST method");  out.println("  </BODY>");  out.println("</HTML>");  out.flush();  out.close();}  }
class C{  public void addInfo(List<String> list){  list.add(getColorForState(state) + "[ " + MOStringHelper.translateToLocal("task.state." + getState() + ".name")+ " ]");  String unlocalizedDescription="task." + getUnlocalizedName() + ".state."+ state+ ".description";  String[] infos;  if (MOStringHelper.hasTranslation(unlocalizedDescription)) {    infos=MOStringHelper.translateToLocal(unlocalizedDescription).split("\n");  } else {    infos=MOStringHelper.translateToLocal("task.state." + state + ".description").split("\n");  }  Collections.addAll(list,infos);}  }
class C{  private void makeCompactMutableString(final int length){  array=length != 0 ? new char[length] : CharArrays.EMPTY_ARRAY;  hashLength=-1;}  }
class C{  public static boolean isAnnotation(int mod){  return (mod & ANNOTATION) != 0;}  }
class C{  public Bundler putBoolean(String key,boolean value){  bundle.putBoolean(key,value);  return this;}  }
class C{  private TestSuiteLocalSearchObjective(List<TestSuiteFitnessFunction> fitness,TestSuiteChromosome suite,int index){  this.fitnessFunctions.addAll(fitness);  this.suite=suite;  this.testIndex=index;  for (  TestSuiteFitnessFunction ff : fitness) {    if (ff.isMaximizationFunction())     isMaximization=true; else     isMaximization=false;    break;  }  updateLastFitness();  updateLastCoverage();}  }
class C{  private void sendAsync(){  if (mDisposed.get())   return;  mSender.sendAsync(this);}  }
class C{  @VisibleForTesting protected Extension loadFromFile(File localFile) throws InvalidConfigException {  Preconditions.checkNotNull(localFile);  Preconditions.checkState(localFile.exists());  Closer closer=Closer.create();  try {    InputStream fileIn=closer.register(new FileInputStream(localFile));    Extension extension=factory.build(fileIn);    extension.setRowType(normalizeRowType(extension.getRowType()));    log.info("Successfully loaded extension " + extension.getRowType());    return extension;  } catch (  IOException e) {    log.error("Can't access local extension file (" + localFile.getAbsolutePath() + ")",e);    throw new InvalidConfigException(TYPE.INVALID_EXTENSION,"Can't access local extension file");  }catch (  SAXException e) {    log.error("Can't parse local extension file (" + localFile.getAbsolutePath() + ")",e);    throw new InvalidConfigException(TYPE.INVALID_EXTENSION,"Can't parse local extension file: " + e.getMessage());  }catch (  ParserConfigurationException e) {    log.error("Can't create sax parser",e);    throw new InvalidConfigException(TYPE.INVALID_EXTENSION,"Can't create sax parser");  } finally {    try {      closer.close();    } catch (    IOException e) {      log.debug("Failed to close input stream on extension file",e);    }  }}  }
class C{  public VfsStreamOld(InputStream is){  init(is,null);}  }
class C{  private void displayFullScreenAvatar(){  String avatarUrl=null;  String userId=mMemberId;  if (null != mRoomMember) {    avatarUrl=mRoomMember.avatarUrl;    if (TextUtils.isEmpty(avatarUrl)) {      userId=mRoomMember.getUserId();    }  }  if (TextUtils.isEmpty(avatarUrl) && !TextUtils.isEmpty(userId)) {    User user=mSession.getDataHandler().getStore().getUser(mMemberId);    if (null != user) {      avatarUrl=user.getAvatarUrl();    }  }  if (!TextUtils.isEmpty(avatarUrl)) {    mFullMemberAvatarLayout.setVisibility(View.VISIBLE);    mSession.getMediasCache().loadBitmap(mSession.getHomeserverConfig(),mFullMemberAvatarImageView,avatarUrl,0,ExifInterface.ORIENTATION_UNDEFINED,null);  }}  }
class C{  public int size(){  return i + 1;}  }
class C{  public DatatypeSwitch(){  if (modelPackage == null) {    modelPackage=DatatypePackage.eINSTANCE;  }}  }
class C{  public void write(final RandomAccessFile raf) throws IOException {  FileChannelUtility.writeAll(raf.getChannel(),asReadOnlyBuffer(),0L);  if (log.isInfoEnabled()) {    log.info("wrote checkpoint record: " + this);  }}  }
class C{  public void call(String method,Object[] args) throws IOException {  startCall(method);  if (args != null) {    for (int i=0; i < args.length; i++)     writeObject(args[i]);  }  completeCall();}  }
class C{  public void addSeries(final String title,final double[] values){  int cnt=1;  for (  double value : values) {    String category=(cnt > this.categories.length ? Integer.toString(cnt) : this.categories[cnt - 1]);    this.dataset.addValue(value,title,category);    cnt++;  }}  }
class C{  public BandwidthPartitioner(int partitionCount){  super(partitionCount);}  }
class C{  private void validateVPlexProtection(final BlockVirtualPoolUpdateParam updateParam,DbClient dbClient){  if (updateParam.specifiesHighAvailability()) {    if (updateParam.getProtection() != null && updateParam.getProtection().getRemoteCopies() != null && updateParam.getProtection().getRemoteCopies().getAdd() != null) {      for (      VirtualPoolRemoteProtectionVirtualArraySettingsParam remoteSettings : updateParam.getProtection().getRemoteCopies().getAdd()) {        if (Mode.ACTIVE.name().equals(remoteSettings.getRemoteCopyMode())) {          throw APIException.badRequests.vplexNotSupportedWithSRDFActive();        }        if (null != remoteSettings.getVpool()) {          URI uri=remoteSettings.getVpool();          VirtualPool vpool=dbClient.queryObject(VirtualPool.class,uri);          if (vpool != null && VirtualPool.vPoolSpecifiesHighAvailabilityDistributed(vpool)) {            throw APIException.badRequests.vplexDistributedNotSupportedOnSRDFTarget();          }        }      }    }  }}  }
class C{  public TimeLimitExceededException(String explanation){  super(explanation);}  }
class C{  public Color color(){  return color(0,0,0);}  }
class C{  public boolean match(TypeDeclarationStatement node,Object other){  if (!(other instanceof TypeDeclarationStatement)) {    return false;  }  TypeDeclarationStatement o=(TypeDeclarationStatement)other;  return safeSubtreeMatch(node.getDeclaration(),o.getDeclaration());}  }
class C{  protected ConstantNode createConstVar(final Value value) throws VisitorException {  final BigdataValue v=vocab.get(value);  if (v == null)   throw new VisitorException("Undefined vocabulary: " + value);  return new ConstantNode(v.getIV());}  }
class C{  protected void incorporateRevocationValues(final Element parentDom,final ValidationContext validationContext){  final DefaultAdvancedSignature.RevocationDataForInclusion revocationsForInclusion=xadesSignature.getRevocationDataForInclusion(validationContext);  if (!revocationsForInclusion.isEmpty()) {    final Element revocationValuesDom=DSSXMLUtils.addElement(documentDom,parentDom,XAdESNamespaces.XAdES,"xades:RevocationValues");    incorporateCrlTokens(revocationValuesDom,revocationsForInclusion.crlTokens);    incorporateOcspTokens(revocationValuesDom,revocationsForInclusion.ocspTokens);  }}  }
class C{  public SigmoidKernel(double alpha){  this(alpha,1);}  }
class C{  public boolean burnInferno(Coords coords){  boolean result=false;  InfernoTracker tracker=null;  tracker=infernos.get(coords);  if (null != tracker) {    tracker.newRound(-1);    if (tracker.isStillBurning()) {      result=true;    } else {      infernos.remove(coords);    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:42.903 -0500",hash_original_method="58145D33150957DD46A1ADD9032FDB9F",hash_generated_method="3CE421B65E2729738ED02C12C7AD40C1") public final TestSuiteBuilder includeAllPackagesUnderHere(){  StackTraceElement[] stackTraceElements=Thread.currentThread().getStackTrace();  String callingClassName=null;  String thisClassName=TestSuiteBuilder.class.getName();  for (int i=0; i < stackTraceElements.length; i++) {    StackTraceElement element=stackTraceElements[i];    if (thisClassName.equals(element.getClassName()) && "includeAllPackagesUnderHere".equals(element.getMethodName())) {      callingClassName=stackTraceElements[i + 1].getClassName();      break;    }  }  String packageName=parsePackageNameFromClassName(callingClassName);  return includePackages(packageName);}  }
class C{  AttributeMetaData registerOwner(ExampleSetMetaData owner){  if (this.owner == null) {    this.owner=owner;    return this;  } else {    AttributeMetaData clone=this.clone();    clone.owner=owner;    return clone;  }}  }
class C{  public ObjectFactory(){}  }
class C{  public static final byte[] unzipBestEffort(byte[] in,int sizeLimit){  try {    ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);    GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(in));    byte[] buf=new byte[BUF_SIZE];    int written=0;    while (true) {      try {        int size=inStream.read(buf);        if (size <= 0)         break;        if ((written + size) > sizeLimit) {          outStream.write(buf,0,sizeLimit - written);          break;        }        outStream.write(buf,0,size);        written+=size;      } catch (      Exception e) {        break;      }    }    try {      outStream.close();    } catch (    IOException e) {    }    return outStream.toByteArray();  } catch (  IOException e) {    return null;  }}  }
class C{  public SelectionTracker(@Nonnull Multiselectable<T> selectable){  this.selectable=selectable;}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  public static void print(Object x){  out.print(x);  out.flush();}  }
class C{  public boolean isFemale(){  return FEMALE.equals(gender);}  }
class C{  public StorageSpecification(TungstenProperties props){  this();  this.version=props.getString(VERSION);  this.agent=props.getString(AGENT);  this.uri=props.getString(URI);  String propFilesCount=props.getString(FILE_COUNT);  if (propFilesCount != null) {    this.filesCount=Integer.parseInt(propFilesCount);    for (int i=0; i < this.filesCount; i++) {      this.fileNames.add(props.getString(buildPropertyName(FILE_NAME,i)));      this.fileLengths.add(props.getLong(buildPropertyName(FILE_LENGTH,i)));      this.fileCrcs.add(props.getLong(buildPropertyName(FILE_CRC,i)));      String dbName=props.getString(buildPropertyName(DB_NAME,i));      if (dbName != null) {        this.databaseNames.add(dbName);      }    }  } else {    this.filesCount=1;    this.fileNames.add(props.getString(FILE_NAME));    this.fileLengths.add(props.getLong(FILE_LENGTH));    this.fileCrcs.add(props.getLong(FILE_CRC));  }  this.backupDate=props.getDate(BACKUP_DATE);}  }
class C{  protected ComplexTypeImpl(){  super();}  }
class C{  private static boolean matches(String arg,String p){  if (p.endsWith(" ")) {    return arg.equals(p.substring(0,p.length() - 1)) || arg.startsWith(p);  }  if (p.endsWith("$")) {    return arg.equals(p.substring(0,p.length() - 1));  }  return arg.startsWith(p);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static String quote(String string){  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    try {      return quote(string,sw).toString();    } catch (    IOException ignored) {      return "";    }  }}  }
class C{  @SuppressWarnings("unchecked") private T[] newArray(final int capacity){  return (T[])java.lang.reflect.Array.newInstance(elementClass,capacity);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.COMMA_EXPRESSION__EXPRS:    return getExprs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Enumeration<V> elements(){  return new ValueIterator();}  }
class C{  private boolean waitForMessageWindow(MessageType type,short nodeId,long maxWait) throws InterruptedException {  if (!windowedTypes.contains(type))   return true;  long start=System.nanoTime();  MessageWindow mw=getMW(nodeId);  if (!mw.disconnected && mw.pending.get() >= MAX_PENDING_MESSAGES) {    mw.lock.lock();    try {      while (!mw.disconnected && mw.pending.get() >= MAX_PENDING_MESSAGES) {        long now=System.nanoTime();        if (maxWait > 0 && (now - start) > maxWait * 1000)         return false;        mw.full.awaitNanos(now - start);      }    }  finally {      mw.lock.unlock();    }  }  mw=getMW(nodeId);  if (mw != null)   mw.pending.getAndIncrement();  return true;}  }
class C{  public void savePoiTag(PoiTypeTag poiTypeTag){  bus.post(new InternalSavePoiTagEvent(poiTypeTag));}  }
class C{  public ParallelTaskBuilder(){  super();  logger.info("Initialized task builder with default config");}  }
class C{  public void createInitiator(VNXeHostInitiator newInit,String hostId){  HostInitiatorCreateParam initCreateParam=new HostInitiatorCreateParam();  VNXeBase host=new VNXeBase(hostId);  initCreateParam.setHost(host);  if (newInit.getType() == HostInitiatorTypeEnum.INITIATOR_TYPE_ISCSI) {    initCreateParam.setInitiatorType(HostInitiatorTypeEnum.INITIATOR_TYPE_ISCSI.getValue());    initCreateParam.setInitiatorWWNorIqn(newInit.getChapUserName());    initCreateParam.setChapUser(newInit.getChapUserName());  } else {    initCreateParam.setInitiatorType(HostInitiatorTypeEnum.INITIATOR_TYPE_FC.getValue());    initCreateParam.setInitiatorWWNorIqn(newInit.getInitiatorId());  }  HostInitiatorRequest req=new HostInitiatorRequest(_khClient);  req.createHostInitiator(initCreateParam);}  }
class C{  @Override protected void initialize(){  super.initialize();  m_FileChooser=new EvaluationStatisticsExporterFileChooser();  m_FileChooserMeasurement=new MeasurementEvaluationStatisticsExporterFileChooser();  m_FileChooserStatistics=new EvaluationStatisticsFileChooser();  m_IgnoreChanges=false;}  }
class C{  private static void byte2hex(byte b,StringBuffer buf){  char[] hexChars={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};  int high=((b & 0xf0) >> 4);  int low=(b & 0x0f);  buf.append(hexChars[high]);  buf.append(hexChars[low]);}  }
class C{  public float distanceTo3(AnimatableValue other){  AnimatableTransformListValue o=(AnimatableTransformListValue)other;  if (transforms.isEmpty() || o.transforms.isEmpty()) {    return 0f;  }  AbstractSVGTransform t1=(AbstractSVGTransform)transforms.lastElement();  AbstractSVGTransform t2=(AbstractSVGTransform)o.transforms.lastElement();  short type1=t1.getType();  if (type1 != t2.getType()) {    return 0f;  }  if (type1 == SVGTransform.SVG_TRANSFORM_ROTATE) {    return Math.abs(t1.getY() - t2.getY());  }  return 0f;}  }
class C{  public void showInNewWindow(){  if (m_frame == null) {    m_frame=new JFrame();    m_frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);    m_frame.setContentPane(getPanel());    m_frame.pack();    m_frame.setVisible(true);  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ;    if (name.equals("MovementDate"))     p_MovementDate=(Timestamp)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (p_MovementDate == null)   p_MovementDate=Env.getContextAsDate(getCtx(),"#Date");  if (p_MovementDate == null)   p_MovementDate=new Timestamp(System.currentTimeMillis());  p_C_OrderLine_ID=getRecord_ID();}  }
class C{  public GetStreamTask(YouTubeVideo youTubeVideo,boolean reloadVideo){  this.youTubeVideo=youTubeVideo;  if (reloadVideo) {    boolean isVideoPlaying=videoView.isPlaying();    videoView.pause();    this.currentVideoPosition=isVideoPlaying ? videoView.getCurrentPosition() : 0;    videoView.stopPlayback();    loadingVideoView.setVisibility(View.VISIBLE);  }}  }
class C{  public void removeLeafListener(ActionListener l){  leafListener.removeListener(l);}  }
class C{  private boolean readReply() throws IOException {  lastReplyCode=FtpReplyCode.find(readServerResponse());  if (lastReplyCode.isPositivePreliminary()) {    replyPending=true;    return true;  }  if (lastReplyCode.isPositiveCompletion() || lastReplyCode.isPositiveIntermediate()) {    if (lastReplyCode == FtpReplyCode.CLOSING_DATA_CONNECTION) {      getTransferName();    }    return true;  }  return false;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static byte[] encodeMPI(BigInteger value,boolean includeLength){  if (value.equals(BigInteger.ZERO)) {    if (!includeLength)     return new byte[]{}; else     return new byte[]{0x00,0x00,0x00,0x00};  }  boolean isNegative=value.signum() < 0;  if (isNegative)   value=value.negate();  byte[] array=value.toByteArray();  int length=array.length;  if ((array[0] & 0x80) == 0x80)   length++;  if (includeLength) {    byte[] result=new byte[length + 4];    System.arraycopy(array,0,result,length - array.length + 3,array.length);    uint32ToByteArrayBE(length,result,0);    if (isNegative)     result[4]|=0x80;    return result;  } else {    byte[] result;    if (length != array.length) {      result=new byte[length];      System.arraycopy(array,0,result,1,array.length);    } else     result=array;    if (isNegative)     result[0]|=0x80;    return result;  }}  }
class C{  public StateData(Object parent,Object region,S state,Collection<E> deferred,Collection<? extends Action<S,E>> entryActions,Collection<? extends Action<S,E>> exitActions){  this(parent,region,state,deferred,entryActions,exitActions,false);}  }
class C{  public static char toCharValue(char c){  return c;}  }
class C{  public synchronized void needHeartBeat(){  threadsNeedingHeartBeat++;  progress.progress();  if (threadsNeedingHeartBeat == 1) {  }}  }
class C{  private IgniteNodeAttributes(){}  }
class C{  public boolean acceptsPickupTrain(Train train){  if (_pickupOption.equals(ANY)) {    return true;  }  if (getTrackType().equals(YARD)) {    return true;  }  if (_pickupOption.equals(TRAINS)) {    return containsPickupId(train.getId());  }  if (_pickupOption.equals(EXCLUDE_TRAINS)) {    return !containsPickupId(train.getId());  } else   if (train.getRoute() == null) {    return false;  }  return acceptsPickupRoute(train.getRoute());}  }
class C{  public final void addElements(int value,int numberOfElements){  if ((m_firstFree + numberOfElements) >= m_mapSize) {    m_mapSize+=(m_blocksize + numberOfElements);    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  for (int i=0; i < numberOfElements; i++) {    m_map[m_firstFree]=value;    m_firstFree++;  }}  }
class C{  public static void i(String msg){  if (DEBUG)   Log.i(TAG,buildMessage(msg));}  }
class C{  public void stop(BundleContext context) throws Exception {  CodenvyAPI.setClient(previous);}  }
class C{  public Builder id(Long collectionId){  this.collectionId=collectionId;  return this;}  }
class C{  private JsonToken readingConstant(JsonTokenType type,JsonToken token){  try {    int numCharsToRead=((String)type.getValidator()).length();    char[] chars=new char[numCharsToRead];    reader.read(chars);    String stringRead=new String(chars);    if (stringRead.equals(type.getValidator())) {      token.setEndColumn(token.getStartColumn() + numCharsToRead);      token.setText(stringRead);      return token;    } else {      throwJsonException(stringRead,type);    }  } catch (  IOException ioe) {    throw new JsonException("An IO exception occurred while reading the JSON payload",ioe);  }  return null;}  }
class C{  private Round(Round prev,Set<JavaFileObject> newSourceFiles,Map<String,JavaFileObject> newClassFiles){  this(prev.nextContext(),prev.number + 1,prev.compiler.log.nerrors,prev.compiler.log.nwarnings,null);  this.genClassFiles=prev.genClassFiles;  List<JCCompilationUnit> parsedFiles=compiler.parseFiles(newSourceFiles);  roots=cleanTrees(prev.roots).appendList(parsedFiles);  if (unrecoverableError())   return;  enterClassFiles(genClassFiles);  List<ClassSymbol> newClasses=enterClassFiles(newClassFiles);  genClassFiles.putAll(newClassFiles);  enterTrees(roots);  if (unrecoverableError())   return;  topLevelClasses=join(getTopLevelClasses(parsedFiles),getTopLevelClassesFromClasses(newClasses));  packageInfoFiles=join(getPackageInfoFiles(parsedFiles),getPackageInfoFilesFromClasses(newClasses));  findAnnotationsPresent();}  }
class C{  private ArrayList<String> buildLoreString(String achMessage,String level,List<String> rewards,String date,double statistic,boolean inelligibleSeriesItem){  ArrayList<String> lore=new ArrayList<>();  if (date != null)   lore.add(ChatColor.translateAlternateColorCodes('&',"&r" + achMessage)); else   if (obfuscateNotReceived || (obfuscateProgressiveAchievements && inelligibleSeriesItem))   lore.add(ChatColor.translateAlternateColorCodes('&',"&8&k" + achMessage.replaceAll(REGEX_PATTERN.pattern(),""))); else   lore.add(ChatColor.translateAlternateColorCodes('&',"&8&o" + achMessage.replaceAll(REGEX_PATTERN.pattern(),"")));  lore.add("");  if (date != null) {    lore.add(ChatColor.translateAlternateColorCodes('&',"&r" + date.replaceAll(REGEX_PATTERN.pattern(),"")));    lore.add("");  } else   if (!obfuscateNotReceived && Math.round(statistic) >= 0) {    StringBuilder barDisplay=new StringBuilder("&7[");    int textSize;    if (FONT.isValid(achMessage))     textSize=FONT.getWidth(achMessage.replaceAll(REGEX_PATTERN.pattern(),"")); else     textSize=(achMessage.replaceAll(REGEX_PATTERN.pattern(),"")).length() * 3;    for (int i=1; i < textSize / 2; i++) {      if (i < ((textSize / 2 - 1) * statistic) / Integer.parseInt(level)) {        barDisplay.append(plugin.getColor()).append('|');      } else {        barDisplay.append("&8|");      }    }    barDisplay.append("&7]");    lore.add(ChatColor.translateAlternateColorCodes('&',barDisplay.toString()));    lore.add("");  }  if (!rewards.isEmpty() && !hideRewardDisplay) {    if (date != null) {      lore.add(ChatColor.translateAlternateColorCodes('&',"&r" + plugin.getPluginLang().getString("list-reward","Reward: ")));      for (      String reward : rewards)       lore.add(ChatColor.translateAlternateColorCodes('&',"&r- " + reward));    } else {      lore.add(ChatColor.translateAlternateColorCodes('&',"&o&8" + plugin.getPluginLang().getString("list-reward","Reward: ")));      for (      String reward : rewards)       lore.add(ChatColor.translateAlternateColorCodes('&',"&o&8- " + reward));    }  }  return lore;}  }
class C{  private void runEnterAnimation(){  final long duration=ANIM_DURATION;  ViewHelper.setPivotX(mViewPager,0);  ViewHelper.setPivotY(mViewPager,0);  ViewHelper.setScaleX(mViewPager,(float)thumbnailWidth / mViewPager.getWidth());  ViewHelper.setScaleY(mViewPager,(float)thumbnailHeight / mViewPager.getHeight());  ViewHelper.setTranslationX(mViewPager,thumbnailLeft);  ViewHelper.setTranslationY(mViewPager,thumbnailTop);  ViewPropertyAnimator.animate(mViewPager).setDuration(duration).scaleX(1).scaleY(1).translationX(0).translationY(0).setInterpolator(new DecelerateInterpolator());  ObjectAnimator bgAnim=ObjectAnimator.ofInt(mViewPager.getBackground(),"alpha",0,255);  bgAnim.setDuration(duration);  bgAnim.start();  ObjectAnimator colorizer=ObjectAnimator.ofFloat(ImagePagerFragment.this,"saturation",0,1);  colorizer.setDuration(duration);  colorizer.start();}  }
class C{  void pluginMessage(Throwable ex){  log.printLines(PrefixKind.JAVAC,"msg.plugin.uncaught.exception");  ex.printStackTrace(log.getWriter(WriterKind.NOTICE));}  }
class C{  protected CellEditorListener createCellEditorListener(){  return getHandler();}  }
class C{  public static boolean isFileNewer(File file,Date date){  if (date == null) {    throw new IllegalArgumentException("No specified date");  }  return isFileNewer(file,date.getTime());}  }
class C{  public MonitorStatus(List inserted,List removed){  this.inserted=inserted;  this.removed=removed;}  }
class C{  public MutableInterval(long startInstant,long endInstant){  super(startInstant,endInstant,null);}  }
class C{  public SQLTransientConnectionException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  private void reset(){  mLayoutTabs=null;  mAnimatedTab=null;  mClosedTab=null;}  }
class C{  private CalculatorAction(DataWrapper wrapper){  super("Calculator ...");  if (wrapper == null) {    throw new NullPointerException("DataWrapper was null.");  }  this.wrapper=wrapper;}  }
class C{  public GuacamoleClientTooManyException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void makeDummy(){  dDat=factory2D.make(n,lsum);  for (int i=0; i < q; i++) {    for (int j=0; j < l[i]; j++) {      DoubleMatrix1D curCol=yDat.viewColumn(i).copy().assign(Functions.equals(j + 1));      if (curCol.zSum() == 0)       throw new IllegalArgumentException("Discrete data is missing a level: variable " + i + " level "+ j);      dDat.viewColumn(lcumsum[i] + j).assign(curCol);    }  }}  }
class C{  public boolean visit(ParenthesizedExpression node){  return true;}  }
class C{  public boolean unlockIt(){  log.info("unlockIt - " + toString());  setProcessing(false);  return true;}  }
class C{  protected JavaCompletionProposal createJavaCompletionProposal(CompletionProposal proposal){switch (proposal.getKind()) {case CompletionProposal.KEYWORD:    return createKeywordProposal(proposal);case CompletionProposal.PACKAGE_REF:  return createPackageProposal(proposal);case CompletionProposal.TYPE_REF:return createTypeProposal(proposal);case CompletionProposal.JAVADOC_TYPE_REF:return createJavadocLinkTypeProposal(proposal);case CompletionProposal.FIELD_REF:case CompletionProposal.JAVADOC_FIELD_REF:case CompletionProposal.JAVADOC_VALUE_REF:return createFieldProposal(proposal);case CompletionProposal.FIELD_REF_WITH_CASTED_RECEIVER:return createFieldWithCastedReceiverProposal(proposal);case CompletionProposal.METHOD_REF:case CompletionProposal.CONSTRUCTOR_INVOCATION:case CompletionProposal.METHOD_REF_WITH_CASTED_RECEIVER:case CompletionProposal.METHOD_NAME_REFERENCE:case CompletionProposal.JAVADOC_METHOD_REF:return createMethodReferenceProposal(proposal);case CompletionProposal.METHOD_DECLARATION:return createMethodDeclarationProposal(proposal);case CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION:return createAnonymousTypeProposal(proposal,getInvocationContext());case CompletionProposal.ANONYMOUS_CLASS_DECLARATION:return createAnonymousTypeProposal(proposal,getInvocationContext());case CompletionProposal.LABEL_REF:return createLabelProposal(proposal);case CompletionProposal.LOCAL_VARIABLE_REF:case CompletionProposal.VARIABLE_DECLARATION:return createLocalVariableProposal(proposal);case CompletionProposal.ANNOTATION_ATTRIBUTE_REF:return createAnnotationAttributeReferenceProposal(proposal);case CompletionProposal.JAVADOC_BLOCK_TAG:case CompletionProposal.JAVADOC_PARAM_REF:return createJavadocSimpleProposal(proposal);case CompletionProposal.JAVADOC_INLINE_TAG:return createJavadocInlineTagProposal(proposal);case CompletionProposal.POTENTIAL_METHOD_DECLARATION:default :return null;}}  }
class C{  @Override public Registrar build(){  checkNotNull(getInstance().type,"Registrar type cannot be null");  checkArgument(getInstance().type.isValidIanaId(getInstance().ianaIdentifier),String.format("Supplied IANA ID is not valid for %s registrar type: %s",getInstance().type,getInstance().ianaIdentifier));  return cloneEmptyToNull(super.build());}  }
class C{  public byte[] embedData(byte[] msg,String msgFileName,byte[] cover,String coverFileName,String stegoFileName) throws OpenStegoException {  BufferedImage image=null;  DctLSBOutputStream os=null;  int imgType=0;  try {    if (cover == null) {      image=ImageUtil.generateRandomImage((DCTDataHeader.getMaxHeaderSize() + msg.length) * 8 * DCT.NJPEG* DCT.NJPEG);    } else {      image=ImageUtil.byteArrayToImage(cover,coverFileName);    }    imgType=image.getType();    os=new DctLSBOutputStream(image,msg.length,msgFileName,this.config);    os.write(msg);    os.close();    return ImageUtil.imageToByteArray(os.getImage(imgType),stegoFileName,this);  } catch (  IOException ioEx) {    throw new OpenStegoException(ioEx);  }}  }
class C{  @Override public String validate(Player player,RPAction action,ActionData data){  String playerName=action.get(targetAttribute);  Player targetPlayer=SingletonRepository.getRuleProcessor().getPlayer(playerName);  final String grumpy=targetPlayer.getGrumpyMessage();  if (grumpy == null) {    return null;  }  if (!targetPlayer.containsKey("buddies",player.getName())) {    if (grumpy.length() == 0) {      return playerName + " has a closed mind, and is seeking solitude from all but close friends";    } else {      return playerName + " is seeking solitude from all but close friends: " + grumpy;    }  }  return null;}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public Select<Model> or(DataFilterClause filterClause){  filterCriteria.addClause(filterClause,DataFilterConjunction.OR);  return this;}  }
class C{  private String obtainGateway(String token){  String gateway=null;  try {    GatewayResponse response=DiscordUtils.GSON.fromJson(REQUESTS.GET.makeRequest(DiscordEndpoints.GATEWAY,new BasicNameValuePair("authorization",token)),GatewayResponse.class);    gateway=response.url;  } catch (  RateLimitException|DiscordException e) {    Discord4J.LOGGER.error(LogMarkers.API,"Discord4J Internal Exception",e);  }  Discord4J.LOGGER.debug(LogMarkers.API,"Obtained gateway {}.",gateway);  return gateway;}  }
class C{  public void createContainer(){  hierarchicalContainer=new HierarchicalContainer();  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_ACTIVE_HIDDEN,String.class,null);  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_FORCED,Action.class,null);  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_ACTION_ID_HIDDEN,Long.class,null);  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_ACTION_ID,String.class,null);  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_DIST,String.class,null);  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_DATETIME,String.class,null);  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_STATUS_HIDDEN,Action.Status.class,null);  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_MSGS_HIDDEN,List.class,null);  hierarchicalContainer.addContainerProperty(SPUIDefinitions.ACTION_HIS_TBL_ROLLOUT_NAME,String.class,null);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.PROGRAM___ANONYMOUS_PROGRAM_11:    return anonymous_program_1_1 != null && !anonymous_program_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public ParameterTypeProcessLocation(String key,String description,boolean allowEntries,boolean allowDirectories,boolean allowAbsoluteEntries,boolean optional){  super(key,description,allowEntries,allowDirectories,allowAbsoluteEntries,optional);}  }
class C{  @Override public String globalInfo(){  return "A Deep Back-Propagation Neural Network. " + "For more information see:\n" + getTechnicalInformation().toString();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  double sumOfTheSquares;  double average;  double stdDev;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          sumOfTheSquares=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              n+=filterShape[a];              sum+=z * filterShape[a];              sumOfTheSquares+=(z * filterShape[a]) * z;            }          }          if (n > 2) {            average=sum / n;            stdDev=(sumOfTheSquares - (sum * sum) / n) / n;            if (stdDev > 0) {              stdDev=Math.sqrt(stdDev);            }            outputFile.setValue(row,col,stdDev);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public final E firstElement(){  return get(0);}  }
class C{  public void createTables(TableCreationMode mode){  ArrayList<Type<?>> sorted=sortTypes();  try (Connection connection=getConnection();Statement statement=connection.createStatement()){    connection.setAutoCommit(false);    if (mode == TableCreationMode.DROP_CREATE) {      executeDropStatements(statement);    }    for (    Type<?> type : sorted) {      String sql=tableCreateStatement(type,mode);      statementListeners.beforeExecuteUpdate(statement,sql,null);      statement.execute(sql);      statementListeners.afterExecuteUpdate(statement);    }    for (    Type<?> type : sorted) {      createIndexes(connection,mode,type);    }    connection.commit();  } catch (  SQLException e) {    throw new TableModificationException(e);  }}  }
class C{  @Override protected void writeToXML(IAnalyzedInterval analyzedInterval,AnalyzedIntervalType jaxbAnalyzedInterval,Marshaller marshaller) throws AdeException {  File outFile=getIntervalV2FullXMLFile(analyzedInterval,m_outputInGZipFormat);  if (m_verbose) {    System.out.println("saving Ade V2 full xml in " + outFile.getAbsolutePath());  }  Writer xmlStreamWriter=null;  FileOutputStream fos=null;  GZIPOutputStream zos=null;  try {    File parentdir=outFile.getParentFile();    parentdir.mkdirs();    outFile.createNewFile();    if (m_outputInGZipFormat) {      fos=new FileOutputStream(outFile);      BufferedOutputStream bos=new BufferedOutputStream(fos);      zos=new GZIPOutputStream(bos);      xmlStreamWriter=new PrintWriter(zos);    } else {      fos=new FileOutputStream(outFile);      xmlStreamWriter=new OutputStreamWriter(fos,"UTF-8");    }    xmlStreamWriter.write("<?xml version='1.0' encoding='UTF-8' ?> \n");    xmlStreamWriter.write("<?xml-stylesheet href='" + XSL_FILENAME + "' type=\"text/xsl\" ?> \n");    ObjectFactory factory=new ObjectFactory();    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);    marshaller.marshal(factory.createAnalyzedInterval(jaxbAnalyzedInterval),xmlStreamWriter);  } catch (  IOException e) {    throw new AdeInternalException("Failed to create xml file for interval " + outFile.getName() + " of source "+ m_source.getSourceId(),e);  }catch (  JAXBException e) {    throw new AdeInternalException("Failed to write xml file for interval " + outFile.getName() + " of source "+ m_source.getSourceId(),e);  } finally {    if (zos != null) {      try {        zos.close();      } catch (      IOException e) {        logger.error("Failed to close ZIPOutputStream: " + outFile.getName(),e);      }    }    if (fos != null) {      try {        fos.close();      } catch (      IOException e) {        logger.error("Failed to close FileOutputStream: " + outFile.getName(),e);      }    }    if (xmlStreamWriter != null) {      try {        xmlStreamWriter.close();      } catch (      IOException e) {        logger.error("Failed to close file: " + outFile.getName(),e);      }    }  }}  }
class C{  public boolean isAscending(){  return m_asc;}  }
class C{  public void add(Component componentToAdd,String id,double percentX,double percentY,double percentWidth,double percentHeight){  add(componentToAdd);  mosaicPaneListeners.componentAdded(componentToAdd,id,percentX,percentY,percentWidth,percentHeight);}  }
class C{  private void preconditionTest(){  final long token=req.token();  getQuorum().assertQuorum(token);  assertHAReady(token);  final QuorumService<HAGlue> quorumService=getQuorum().getClient();  if (!quorumService.isFollower(token))   throw new QuorumException();  final long localCommitCounter=getRootBlockView().getCommitCounter();  if (req.getNewCommitCounter() != localCommitCounter + 1) {    throw new RuntimeException("leader is preparing for commitCounter=" + req.getNewCommitCounter() + ", but follower is at localCommitCounter="+ localCommitCounter);  }}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  try {    jbInit();    dynInit();    frame.getContentPane().add(mainPanel,BorderLayout.CENTER);    frame.getContentPane().add(confirmPanel,BorderLayout.SOUTH);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentcreateattribute.class,args);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double dist;  double gridRes;  double diagGridRes;  double maxSlope;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    diagGridRes=gridRes * Math.sqrt(2);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          flowDir=0;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData && z2 < z) {              flowDir+=1 << i;            }          }          output.setValue(row,col,flowDir);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int height=image.getHeight();  int width=image.getWidth();  int halfHeight=height / 2;  int halfWidth=width / 2;  int deltaY=Math.max(1,height / (MAX_MODULES * 8));  int deltaX=Math.max(1,width / (MAX_MODULES * 8));  int top=0;  int bottom=height;  int left=0;  int right=width;  ResultPoint pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth / 2);  top=(int)pointA.getY() - 1;  ResultPoint pointB=findCornerFromCenter(halfWidth,-deltaX,left,right,halfHeight,0,top,bottom,halfHeight / 2);  left=(int)pointB.getX() - 1;  ResultPoint pointC=findCornerFromCenter(halfWidth,deltaX,left,right,halfHeight,0,top,bottom,halfHeight / 2);  right=(int)pointC.getX() + 1;  ResultPoint pointD=findCornerFromCenter(halfWidth,0,left,right,halfHeight,deltaY,top,bottom,halfWidth / 2);  bottom=(int)pointD.getY() + 1;  pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth / 4);  return new ResultPoint[]{pointA,pointB,pointC,pointD};}  }
class C{  public void addResourceBundle(ResourceBundle bundle){  bundles.add(bundle);}  }
class C{  public MonitorVersionException(){  super();}  }
class C{  public static <E extends Comparable<E>>SingleLinkedNode<E> pairWiseSwap(SingleLinkedNode<E> node){  if (node == null || node.next == null)   return node;  SingleLinkedNode<E> nextNode=node.next, nextOfNextNode=nextNode.next;  nextNode.next=node;  node.next=pairWiseSwap(nextOfNextNode);  return nextNode;}  }
class C{  @Override public boolean handleMessage(Message msg){  if (msg.what == 1) {    adapter.setBills(bills);    adapter.notifyDataSetChanged();  } else {    Toast.makeText(BillListActivity.this,errMsg,Toast.LENGTH_SHORT).show();  }  return true;}  }
class C{  public static Coordinate[] removeRepeatedPoints(Coordinate[] coord){  if (!hasRepeatedPoints(coord))   return coord;  CoordinateList coordList=new CoordinateList(coord,false);  return coordList.toCoordinateArray();}  }
class C{  public static Vector<String> findPackages(){  Vector<String> result;  Enumeration<String> packages;  initCache();  result=new Vector<String>();  packages=m_ClassCache.packages();  while (packages.hasMoreElements()) {    result.add(packages.nextElement());  }  Collections.sort(result,new StringCompare());  return result;}  }
class C{  private DualPivotQuicksort(){}  }
class C{  public boolean isDefaultNamespace(String namespaceURI){  return false;}  }
class C{  public void checkIndex(ShardPath targetPath) throws IOException {  BytesStreamOutput os=new BytesStreamOutput();  PrintStream out=new PrintStream(os,false,Charsets.UTF_8.name());  try (Directory directory=new SimpleFSDirectory(targetPath.resolveIndex());final CheckIndex checkIndex=new CheckIndex(directory)){    checkIndex.setInfoStream(out);    CheckIndex.Status status=checkIndex.checkIndex();    out.flush();    if (!status.clean) {      logger.warn("check index [failure]\n{}",new String(os.bytes().toBytes(),Charsets.UTF_8));      throw new IllegalStateException("index check failure");    }  } }  }
class C{  protected int rearrangePoints(int[] indices,final int startidx,final int endidx,final int splitDim,final double splitVal){  int tmp, left=startidx - 1;  for (int i=startidx; i <= endidx; i++) {    if (m_EuclideanDistance.valueIsSmallerEqual(m_Instances.instance(indices[i]),splitDim,splitVal)) {      left++;      tmp=indices[left];      indices[left]=indices[i];      indices[i]=tmp;    }  }  return left + 1;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public JSONObject putOnce(String key,Object value) throws JSONException {  if (key != null && value != null) {    if (this.opt(key) != null) {      throw new JSONException("Duplicate key \"" + key + "\"");    }    this.put(key,value);  }  return this;}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,Collection coll){  buffer.append(coll);}  }
class C{  public DeleteIndexRequest(String... indices){  this.indices=indices;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:17.042 -0500",hash_original_method="D43EB4B47E694B53E14D637B6CBB15DA",hash_generated_method="7FE5675D2A5F80229B9CC32689C8E510") public void appendExtRecord(byte[] extRecord){  try {    if (extRecord.length != EXT_RECORD_LENGTH_BYTES) {      return;    }    if ((extRecord[0] & EXT_RECORD_TYPE_MASK) != EXT_RECORD_TYPE_ADDITIONAL_DATA) {      return;    }    if ((0xff & extRecord[1]) > MAX_EXT_CALLED_PARTY_LENGTH) {      return;    }    number+=PhoneNumberUtils.calledPartyBCDFragmentToString(extRecord,2,0xff & extRecord[1]);  } catch (  RuntimeException ex) {    Log.w(LOG_TAG,"Error parsing AdnRecord ext record",ex);  }}  }
class C{  public Joint createJoint(JointDef def){  assert (isLocked() == false);  if (isLocked()) {    return null;  }  Joint j=Joint.create(this,def);  j.m_prev=null;  j.m_next=m_jointList;  if (m_jointList != null) {    m_jointList.m_prev=j;  }  m_jointList=j;  ++m_jointCount;  j.m_edgeA.joint=j;  j.m_edgeA.other=j.getBodyB();  j.m_edgeA.prev=null;  j.m_edgeA.next=j.getBodyA().m_jointList;  if (j.getBodyA().m_jointList != null) {    j.getBodyA().m_jointList.prev=j.m_edgeA;  }  j.getBodyA().m_jointList=j.m_edgeA;  j.m_edgeB.joint=j;  j.m_edgeB.other=j.getBodyA();  j.m_edgeB.prev=null;  j.m_edgeB.next=j.getBodyB().m_jointList;  if (j.getBodyB().m_jointList != null) {    j.getBodyB().m_jointList.prev=j.m_edgeB;  }  j.getBodyB().m_jointList=j.m_edgeB;  Body bodyA=def.bodyA;  Body bodyB=def.bodyB;  if (def.collideConnected == false) {    ContactEdge edge=bodyB.getContactList();    while (edge != null) {      if (edge.other == bodyA) {        edge.contact.flagForFiltering();      }      edge=edge.next;    }  }  return j;}  }
class C{  private int handleC(String value,DoubleMetaphoneResult result,int index){  if (conditionC0(value,index)) {    result.append('K');    index+=2;  } else   if (index == 0 && contains(value,index,6,"CAESAR")) {    result.append('S');    index+=2;  } else   if (contains(value,index,2,"CH")) {    index=handleCH(value,result,index);  } else   if (contains(value,index,2,"CZ") && !contains(value,index - 2,4,"WICZ")) {    result.append('S','X');    index+=2;  } else   if (contains(value,index + 1,3,"CIA")) {    result.append('X');    index+=3;  } else   if (contains(value,index,2,"CC") && !(index == 1 && charAt(value,0) == 'M')) {    return handleCC(value,result,index);  } else   if (contains(value,index,2,"CK","CG","CQ")) {    result.append('K');    index+=2;  } else   if (contains(value,index,2,"CI","CE","CY")) {    if (contains(value,index,3,"CIO","CIE","CIA")) {      result.append('S','X');    } else {      result.append('S');    }    index+=2;  } else {    result.append('K');    if (contains(value,index + 1,2," C"," Q"," G")) {      index+=3;    } else     if (contains(value,index + 1,1,"C","K","Q") && !contains(value,index + 1,2,"CE","CI")) {      index+=2;    } else {      index++;    }  }  return index;}  }
class C{  void error(int errorId,int resourceId){  mEventHandler.error(errorId,mConnection.mContext.getText(resourceId).toString());}  }
class C{  public static void checkHitsQuery(Query query,ScoreDoc[] hits1,ScoreDoc[] hits2,int[] results){  checkDocIds("hits1",results,hits1);  checkDocIds("hits2",results,hits2);  checkEqual(query,hits1,hits2);}  }
class C{  protected static void link(final ReilBlock parent,final ReilBlock child){  parent.m_children.add(child);  child.m_parents.add(parent);}  }
class C{  public static <K,V>SynchronizedSortedBagMultimap<K,V> of(MutableSortedBagMultimap<K,V> multimap,Object lock){  if (multimap == null) {    throw new IllegalArgumentException("cannot create a SynchronizedSortedBagMultimap for null");  }  return new SynchronizedSortedBagMultimap<>(multimap,lock);}  }
class C{  public static String readStringFromReader(Reader reader) throws IOException {  return readAllCharsFromReader(reader).toString();}  }
class C{  public String number() throws ParseException {  int startIdx=ptr;  try {    if (!isDigit(lookAhead(0))) {      throw new ParseException(buffer + ": Unexpected token at " + lookAhead(0),ptr);    }    consume(1);    while (true) {      char next=lookAhead(0);      if (isDigit(next)) {        consume(1);      } else       break;    }    return buffer.substring(startIdx,ptr);  } catch (  ParseException ex) {    return buffer.substring(startIdx,ptr);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:27.373 -0500",hash_original_method="59D4C7A828654550E9A00289F418A41B",hash_generated_method="A1ADB842CDB3D89617B61CB662BF8B7B") public Entry(String tag,long millis){  if (tag == null)   throw new NullPointerException("tag == null");  mTag=tag;  mTimeMillis=millis;  mData=null;  mFileDescriptor=null;  mFlags=IS_EMPTY;}  }
class C{  public void attrAdded(Attr node,String newv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public void resizeFrame(JComponent f,int newX,int newY,int newWidth,int newHeight){  setBoundsForFrame(ghostPanel,newX,newY,newWidth,newHeight);}  }
class C{  public void test_putLjava_lang_ObjectLjava_lang_Object(){  hm.put("KEY","VALUE");  assertEquals("Failed to install key/value pair","VALUE",hm.get("KEY"));  HashMap m=new HashMap();  m.put(new Short((short)0),"short");  m.put(null,"test");  m.put(new Integer(0),"int");  assertEquals("Failed adding to bucket containing null","short",m.get(new Short((short)0)));  assertEquals("Failed adding to bucket containing null2","int",m.get(new Integer(0)));}  }
class C{  @Override public BigdataSailRepositoryConnection cxn(){  if (closed)   throw Exceptions.alreadyClosed();  tx.readWrite();  return tx.cxn();}  }
class C{  public static String toString(Integer arg){  return toString("%d",arg);}  }
class C{  private double readInheritFontSizeAttribute(IXMLElement elem,String attributeName,String defaultValue) throws IOException {  String value=null;  if (elem.hasAttribute(attributeName,SVG_NAMESPACE)) {    value=elem.getAttribute(attributeName,SVG_NAMESPACE,null);  } else   if (elem.hasAttribute(attributeName)) {    value=elem.getAttribute(attributeName,null);  } else   if (elem.getParent() != null && (elem.getParent().getNamespace() == null || elem.getParent().getNamespace().equals(SVG_NAMESPACE))) {    return readInheritFontSizeAttribute(elem.getParent(),attributeName,defaultValue);  } else {    value=defaultValue;  }  if (value.equals("inherit")) {    return readInheritFontSizeAttribute(elem.getParent(),attributeName,defaultValue);  } else   if (SVG_ABSOLUTE_FONT_SIZES.containsKey(value)) {    return SVG_ABSOLUTE_FONT_SIZES.get(value);  } else   if (SVG_RELATIVE_FONT_SIZES.containsKey(value)) {    return SVG_RELATIVE_FONT_SIZES.get(value) * readInheritFontSizeAttribute(elem.getParent(),attributeName,defaultValue);  } else   if (value.endsWith("%")) {    double factor=Double.valueOf(value.substring(0,value.length() - 1));    return factor * readInheritFontSizeAttribute(elem.getParent(),attributeName,defaultValue);  } else {    return toNumber(elem,value);  }}  }
class C{  boolean isInitializing(){  return this.state == INITIALIZING;}  }
class C{  public static void logNormalize(double[] a){  double logTotal=logSum(a);  if (logTotal == Double.NEGATIVE_INFINITY) {    double v=-Math.log(a.length);    for (int i=0; i < a.length; i++) {      a[i]=v;    }    return;  }  shift(a,-logTotal);}  }
class C{  public Word(Word w,Sentence s){  this.idx=w.idx;  this.Form=w.Form;  this.Lemma=w.Lemma;  this.POS=w.POS;  this.Feats=w.Feats;  this.Deprel=w.Deprel;  this.head=w.head;  this.headID=w.headID;  this.children=w.children;  this.corefid=w.corefid;  if (s == null) {    this.mySentence=w.mySentence;  } else {    this.mySentence=s;    if (s.size() > this.idx) {      s.remove(this.idx);      s.add(this.idx,this);    }  }  this.isBOS=w.isBOS;  this.rep=new Double[w.rep.length];  for (int i=0; i < w.rep.length; i++)   this.rep[i]=w.rep[i];  this.begin=w.begin;  this.end=w.end;  if (head != null) {    for (    Word child : children)     child.head=this;    head.children.remove(w);    head.children.add(this);  }}  }
class C{  @Override public boolean containsKey(Object key){  int hash=hash(key);  return segmentFor(hash).containsKey(key,hash);}  }
class C{  public Interval(long startInstant,long endInstant){  super(startInstant,endInstant,null);}  }
class C{  public boolean isTimeout(){  return timeout;}  }
class C{  public void updatePolygon(Mesh poly){  if (getNumberOfChildren() < 3) {    return;  }  FloatBuffer vertexBuffer=tessellator.tessellate(getPointList(),null);  FloatBuffer normalBuffer=BufferUtils.createFloatBuffer(vertexBuffer.capacity());  MathUtil.computePolygonNormal(vertexBuffer,normalBuffer,true);  poly.getMeshData().setVertexBuffer(vertexBuffer);  poly.getMeshData().setNormalBuffer(normalBuffer);  poly.getMeshData().updateVertexCount();  poly.markDirty(DirtyType.Bounding);  poly.updateModelBound();  poly.updateGeometricState(0);}  }
class C{  static int testTanh(){  int failures=0;  double[][] testCases={{0.0625,0.06241874674751251449014289119421133},{0.1250,0.12435300177159620805464727580589271},{0.1875,0.18533319990813951753211997502482787},{0.2500,0.24491866240370912927780113149101697},{0.3125,0.30270972933210848724239738970991712},{0.3750,0.35835739835078594631936023155315807},{0.4375,0.41157005567402245143207555859415687},{0.5000,0.46211715726000975850231848364367256},{0.5625,0.50982997373525658248931213507053130},{0.6250,0.55459972234938229399903909532308371},{0.6875,0.59637355547924233984437303950726939},{0.7500,0.63514895238728731921443435731249638},{0.8125,0.67096707420687367394810954721913358},{0.8750,0.70390560393662106058763026963135371},{0.9375,0.73407151960434149263991588052503660},{1.0000,0.76159415595576488811945828260479366},{1.0625,0.78661881210869761781941794647736081},{1.1250,0.80930107020178101206077047354332696},{1.1875,0.82980190998595952708572559629034476},{1.2500,0.84828363995751289761338764670750445},{1.3125,0.86490661772074179125443141102709751},{1.3750,0.87982669965198475596055310881018259},{1.4375,0.89319334040035153149249598745889365},{1.5000,0.90514825364486643824230369645649557},{1.5625,0.91582454416876231820084311814416443},{1.6250,0.92534622531174107960457166792300374},{1.6875,0.93382804322259173763570528576138652},{1.7500,0.94137553849728736226942088377163687},{1.8125,0.94808528560440629971240651310180052},{1.8750,0.95404526017994877009219222661968285},{1.9375,0.95933529331468249183399461756952555},{2.0000,0.96402758007581688394641372410092317},{2.0625,0.96818721657637057702714316097855370},{2.1250,0.97187274591350905151254495374870401},{2.1875,0.97513669829362836159665586901156483},{2.2500,0.97802611473881363992272924300618321},{2.3125,0.98058304703705186541999427134482061},{2.3750,0.98284502917257603002353801620158861},{2.4375,0.98484551746427837912703608465407824},{2.5000,0.98661429815143028888127603923734964},{2.5625,0.98817786228751240824802592958012269},{2.6250,0.98955974861288320579361709496051109},{2.6875,0.99078085564125158320311117560719312},{2.7500,0.99185972456820774534967078914285035},{2.8125,0.99281279483715982021711715899682324},{2.8750,0.99365463431502962099607366282699651},{2.9375,0.99439814606575805343721743822723671},{3.0000,0.99505475368673045133188018525548849},{3.0625,0.99563456710930963835715538507891736},{3.1250,0.99614653067334504917102591131792951},{3.1875,0.99659855517712942451966113109487039},{3.2500,0.99699763548652601693227592643957226},{3.3125,0.99734995516557367804571991063376923},{3.3750,0.99766097946988897037219469409451602},{3.4375,0.99793553792649036103161966894686844},{3.5000,0.99817789761119870928427335245061171},{3.5625,0.99839182812874152902001617480606320},{3.6250,0.99858065920179882368897879066418294},{3.6875,0.99874733168378115962760304582965538},{3.7500,0.99889444272615280096784208280487888},{3.8125,0.99902428575443546808677966295308778},{3.8750,0.99913888583735077016137617231569011},{3.9375,0.99924003097049627100651907919688313},{4.0000,0.99932929973906704379224334434172499},{4.0625,0.99940808577297384603818654530731215},{4.1250,0.99947761936180856115470576756499454},{4.1875,0.99953898655601372055527046497863955},{4.2500,0.99959314604388958696521068958989891},{4.3125,0.99964094406130644525586201091350343},{4.3750,0.99968312756179494813069349082306235},{4.4375,0.99972035584870534179601447812936151},{4.5000,0.99975321084802753654050617379050162},{4.5625,0.99978220617994689112771768489030236},{4.6250,0.99980779516900105210240981251048167},{4.6875,0.99983037791655283849546303868853396},{4.7500,0.99985030754497877753787358852000255},{4.8125,0.99986789571029070417475400133989992},{4.8750,0.99988341746867772271011794614780441},{4.9375,0.99989711557251558205051185882773206},{5.0000,0.99990920426259513121099044753447306},{5.0625,0.99991987261554158551063867262784721},{5.1250,0.99992928749851651137225712249720606},{5.1875,0.99993759617721206697530526661105307},{5.2500,0.99994492861777083305830639416802036},{5.3125,0.99995139951851344080105352145538345},{5.3750,0.99995711010315817210152906092289064},{5.4375,0.99996214970350792531554669737676253},{5.5000,0.99996659715630380963848952941756868},{5.5625,0.99997052203605101013786592945475432},{5.6250,0.99997398574306704793434088941484766},{5.6875,0.99997704246374583929961850444364696},{5.7500,0.99997974001803825215761760428815437},{5.8125,0.99998212060739040166557477723121777},{5.8750,0.99998422147482750993344503195672517},{5.9375,0.99998607548749972326220227464612338},{6.0000,0.99998771165079557056434885235523206},{6.0625,0.99998915556205996764518917496149338},{6.1250,0.99999042981101021976277974520745310},{6.1875,0.99999155433311068015449574811497719},{6.2500,0.99999254672143162687722782398104276},{6.3125,0.99999342250186907900400800240980139},{6.3750,0.99999419537602957780612639767025158},{6.4375,0.99999487743557848265406225515388994},{6.5000,0.99999547935140419285107893831698753},{6.5625,0.99999601054055694588617385671796346},{6.6250,0.99999647931357331502887600387959900},{6.6875,0.99999689300449080997594368612277442},{6.7500,0.99999725808558628431084200832778748},{6.8125,0.99999758026863294516387464046135924},{6.8750,0.99999786459425991170635407313276785},{6.9375,0.99999811551081218572759991597586905},{7.0000,0.99999833694394467173571641595066708},{7.0625,0.99999853235803894918375164252059190},{7.1250,0.99999870481040359014665019356422927},{7.1875,0.99999885699910593255108365463415411},{7.2500,0.99999899130518359709674536482047025},{7.3125,0.99999910982989611769943303422227663},{7.3750,0.99999921442759946591163427422888252},{7.4375,0.99999930673475777603853435094943258},{7.5000,0.99999938819554614875054970643513124},{7.5625,0.99999946008444508183970109263856958},{7.6250,0.99999952352618001331402589096040117},{7.6875,0.99999957951331792817413683491979752},{7.7500,0.99999962892179632633374697389145081},{7.8125,0.99999967252462750190604116210421169},{7.8750,0.99999971100399253750324718031574484},{7.9375,0.99999974496191422474977283863588658},{8.0000,0.99999977492967588981001883295636840},{8.0625,0.99999980137613348259726597081723424},{8.1250,0.99999982471505097353529823063673263},{8.1875,0.99999984531157382142423402736529911},{8.2500,0.99999986348794179107425910499030547},{8.3125,0.99999987952853049895833839645847571},{8.3750,0.99999989368430056302584289932834041},{8.4375,0.99999990617672396471542088609051728},{8.5000,0.99999991720124905211338798152800748},{8.5625,0.99999992693035839516545287745322387},{8.6250,0.99999993551626733394129009365703767},{8.6875,0.99999994309330543951799157347876934},{8.7500,0.99999994978001814614368429416607424},{8.8125,0.99999995568102143535399207289008504},{8.8750,0.99999996088863858914831986187674522},{8.9375,0.99999996548434461974481685677429908},{9.0000,0.99999996954004097447930211118358244},{9.0625,0.99999997311918045901919121395899372},{9.1250,0.99999997627775997868467948564005257},{9.1875,0.99999997906519662964368381583648379},{9.2500,0.99999998152510084671976114264303159},{9.3125,0.99999998369595870397054673668361266},{9.3750,0.99999998561173404286033236040150950},{9.4375,0.99999998730239984852716512979473289},{9.5000,0.99999998879440718770812040917618843},{9.5625,0.99999999011109904501789298212541698},{9.6250,0.99999999127307553219220251303121960},{9.6875,0.99999999229851618412119275358396363},{9.7500,0.99999999320346438410630581726217930},{9.8125,0.99999999400207836827291739324060736},{9.8750,0.99999999470685273619047001387577653},{9.9375,0.99999999532881393331131526966058758},{10.0000,0.99999999587769276361959283713827574}};  for (int i=0; i < testCases.length; i++) {    double[] testCase=testCases[i];    failures+=testTanhCaseWithUlpDiff(testCase[0],testCase[1],3.0);  }  double[][] specialTestCases={{0.0,0.0},{NaNd,NaNd},{Double.longBitsToDouble(0x7FF0000000000001L),NaNd},{Double.longBitsToDouble(0xFFF0000000000001L),NaNd},{Double.longBitsToDouble(0x7FF8555555555555L),NaNd},{Double.longBitsToDouble(0xFFF8555555555555L),NaNd},{Double.longBitsToDouble(0x7FFFFFFFFFFFFFFFL),NaNd},{Double.longBitsToDouble(0xFFFFFFFFFFFFFFFFL),NaNd},{Double.longBitsToDouble(0x7FFDeadBeef00000L),NaNd},{Double.longBitsToDouble(0xFFFDeadBeef00000L),NaNd},{Double.longBitsToDouble(0x7FFCafeBabe00000L),NaNd},{Double.longBitsToDouble(0xFFFCafeBabe00000L),NaNd},{Double.POSITIVE_INFINITY,1.0}};  for (int i=0; i < specialTestCases.length; i++) {    failures+=testTanhCaseWithUlpDiff(specialTestCases[i][0],specialTestCases[i][1],0.0);  }  for (int i=DoubleConsts.MIN_SUB_EXPONENT; i < -27; i++) {    double d=Math.scalb(2.0,i);    failures+=testTanhCaseWithUlpDiff(d,d,2.5);  }  for (int i=22; i < 32; i++) {    failures+=testTanhCaseWithUlpDiff(i,1.0,2.5);  }  for (int i=5; i <= DoubleConsts.MAX_EXPONENT; i++) {    double d=Math.scalb(2.0,i);    failures+=testTanhCaseWithUlpDiff(d,1.0,2.5);  }  return failures;}  }
class C{  public static BigdataGraph create(final BlueprintsValueFactory vf) throws Exception {  return create(vf,new Properties());}  }
class C{  public static void writeToXmlImpl(List<Block> toSerialize,@Nullable OutputStream os,@Nullable Writer writer) throws BlocklySerializerException {  try {    XmlSerializer serializer=mParserFactory.newSerializer();    if (os != null) {      serializer.setOutput(os,null);    } else {      serializer.setOutput(writer);    }    serializer.setPrefix("",XML_NAMESPACE);    serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);    serializer.startTag(XML_NAMESPACE,"xml");    for (int i=0; i < toSerialize.size(); i++) {      toSerialize.get(i).serialize(serializer,true);    }    serializer.endTag(XML_NAMESPACE,"xml");    serializer.flush();  } catch (  XmlPullParserException|IOException e) {    throw new BlocklySerializerException(e);  }}  }
class C{  public void onSuccess(){  if (_firstSuccessTime <= 0) {    _firstSuccessTime=CurrentTime.currentTime();  }  _dynamicRecoverTimeout.set(1000L);  _firstFailTime=0;}  }
class C{  public SVGPaintManager(String prop,Value v){  super(prop,v);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild=null;  Node newChild=null;  Node child;  String childName;  Node childNode;  java.util.List actual=new java.util.ArrayList();  java.util.List expected=new java.util.ArrayList();  expected.add("strong");  expected.add("code");  expected.add("sup");  expected.add("var");  expected.add("em");  Node replacedChild;  int nodeType;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=((Element)employeeNode).getElementsByTagName("*");  newChild=childList.item(0);  oldChild=childList.item(5);  replacedChild=employeeNode.replaceChild(newChild,oldChild);  assertSame("return_value_same",oldChild,replacedChild);  for (int indexN10094=0; indexN10094 < childList.getLength(); indexN10094++) {    childNode=(Node)childList.item(indexN10094);    childName=childNode.getNodeName();    nodeType=(int)childNode.getNodeType();    if (equals(1,nodeType)) {      actual.add(childName);    } else {      assertEquals("textNodeType",3,nodeType);      assertEquals("textNodeName","#text",childName);    }  }  assertEqualsAutoCase("element","childNames",expected,actual);}  }
class C{  public void runTest(){  try {    Template template1=RuntimeSingleton.getTemplate(getFileName(null,"path1",TMPL_FILE_EXT));    Template template2=RuntimeSingleton.getTemplate(getFileName(null,"path2",TMPL_FILE_EXT));    FileOutputStream fos1=new FileOutputStream(getFileName(RESULTS_DIR,"path1",RESULT_FILE_EXT));    FileOutputStream fos2=new FileOutputStream(getFileName(RESULTS_DIR,"path2",RESULT_FILE_EXT));    Writer writer1=new BufferedWriter(new OutputStreamWriter(fos1));    Writer writer2=new BufferedWriter(new OutputStreamWriter(fos2));    VelocityContext context=new VelocityContext();    template1.merge(context,writer1);    writer1.flush();    writer1.close();    template2.merge(context,writer2);    writer2.flush();    writer2.close();    if (!isMatch(RESULTS_DIR,COMPARE_DIR,"path1",RESULT_FILE_EXT,CMP_FILE_EXT) || !isMatch(RESULTS_DIR,COMPARE_DIR,"path2",RESULT_FILE_EXT,CMP_FILE_EXT)) {      fail("Output incorrect.");    }  } catch (  Exception e) {    fail(e.getMessage());  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:03.935 -0500",hash_original_method="747AFE004560A767DF481C3AA8002660",hash_generated_method="9625D3D3689DEE9B299B2E695D5C9E6A") private ComprehensionTlv searchForTag(ComprehensionTlvTag tag,List<ComprehensionTlv> ctlvs){  Iterator<ComprehensionTlv> iter=ctlvs.iterator();  return searchForNextTag(tag,iter);}  }
class C{  public Result(double gSquare,double pValue,int df,boolean isIndep){  this.gSquare=gSquare;  this.pValue=pValue;  this.df=df;  this.isIndep=isIndep;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 174) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public boolean hasStickyHeader(View itemView,int orientation,int position){  int offset, margin;  mDimensionCalculator.initMargins(mTempRect1,itemView);  if (orientation == LinearLayout.VERTICAL) {    offset=itemView.getTop();    margin=mTempRect1.top;  } else {    offset=itemView.getLeft();    margin=mTempRect1.left;  }  return offset <= margin && mAdapter.getHeaderId(position) >= 0;}  }
class C{  public DistributedLogClientBuilder streamStatsReceiver(StatsReceiver streamStatsReceiver){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._streamStatsReceiver=streamStatsReceiver;  return newBuilder;}  }
class C{  public void connect() throws IOException {  connect(null,null);}  }
class C{  public SOM(DistanceMetric dm,int somHeight,int somWeight,VectorCollectionFactory<VecPaired<Vec,Integer>> vcFactory){  this(DEFAULT_MAX_ITERS,DEFAULT_KF,DEFAULT_LEARNING_RATE,DEFAULT_LEARNING_DECAY,DEFAULT_NEIGHBOR_DECAY,dm,somHeight,somWeight,vcFactory);}  }
class C{  public String toString(int maxKeysToPrint,boolean multiline){  PriorityQueue<E> pq=clone();  StringBuilder sb=new StringBuilder(multiline ? "" : "[");  int numKeysPrinted=0;  NumberFormat f=NumberFormat.getInstance();  f.setMaximumFractionDigits(5);  while (numKeysPrinted < maxKeysToPrint && pq.hasNext()) {    double priority=pq.getPriority();    E element=pq.next();    sb.append(element == null ? "null" : element.toString());    sb.append(" : ");    sb.append(f.format(priority));    if (numKeysPrinted < size() - 1)     sb.append(multiline ? "\n" : ", ");    numKeysPrinted++;  }  if (numKeysPrinted < size())   sb.append("...");  if (!multiline)   sb.append("]");  return sb.toString();}  }
class C{  private static final void logErrors(final List<CompilerError> errors,final String label,boolean warn,final Log log){  log.info("-------------------------------------------------------------");  log.warn("CHECKER FRAMEWORK " + label.toUpperCase() + ": ");  log.info("-------------------------------------------------------------");  for (  final CompilerError error : errors) {    final String msg=error.toString().trim();    if (warn) {      log.warn(msg);    } else {      log.error(msg);    }  }  final String labelLc=label.toLowerCase() + ((errors.size() == 1) ? "" : "s");  log.info(errors.size() + " " + labelLc);  log.info("-------------------------------------------------------------");}  }
class C{  public void generateLootChest(World world,Random random,BlockPos pos,int min,int max,IBlockState state,ResourceLocation lootTable){  world.setBlockState(pos,state,3);  TileEntityChest chest=(TileEntityChest)world.getTileEntity(pos);  if (chest != null)   chest.setLootTable(lootTable,random.nextLong());}  }
class C{  public DCDs(){  this(10000,false);}  }
class C{  protected static boolean isIntendedException(Exception e,Class<?> clazz){  final String message=e.getMessage();  return (!TextUtils.isEmpty(message) && message.startsWith(clazz.getName()));}  }
class C{  public boolean hasConditions(){  return ifModifiedSince != null || ifNoneMatch != null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static char toCharValue(Object o) throws PageException {  if (o instanceof Character)   return ((Character)o).charValue(); else   if (o instanceof Boolean)   return (char)((((Boolean)o).booleanValue()) ? 1 : 0); else   if (o instanceof Double)   return (char)(((Double)o).doubleValue()); else   if (o instanceof Number)   return (char)(((Number)o).doubleValue()); else   if (o instanceof String) {    String str=o.toString();    if (str.length() > 0)     return str.charAt(0);    throw new ExpressionException("can't cast empty string to a char");  } else   if (o instanceof ObjectWrap) {    return toCharValue(((ObjectWrap)o).getEmbededObject());  } else   if (o == null)   return toCharValue("");  throw new CasterException(o,"char");}  }
class C{  public static PeriodType yearDayTime(){  PeriodType type=cYDTime;  if (type == null) {    type=new PeriodType("YearDayTime",new DurationFieldType[]{DurationFieldType.years(),DurationFieldType.days(),DurationFieldType.hours(),DurationFieldType.minutes(),DurationFieldType.seconds(),DurationFieldType.millis()},new int[]{0,-1,-1,1,2,3,4,5});    cYDTime=type;  }  return type;}  }
class C{  private static img createWorkflowImage(String name,int activeNode,String js_command,boolean pressed){  StringBuffer imgName=new StringBuffer(name);  imgName.append("WF");  imgName.append(".gif");  img img=new img(MobileEnv.getImageDirectory(imgName.toString()),name);  if (!(imgName.toString()).startsWith("Spacer") && !(imgName.toString()).startsWith("Arrow")) {    if (!pressed)     img.setID("imgButton"); else     img.setID("imgButtonPressed");  }  if (js_command != null && js_command.length() > 0 && activeNode != 0) {    String js_command_front="document." + FORM_NAME + "."+ J_Command+ ".value='"+ activeNode+ "'; ";    js_command_front=js_command_front + "document." + FORM_NAME+ ".submit();";    img.setOnClick(js_command_front + js_command);  }  return img;}  }
class C{  public static boolean isFluid(World world,int x,int y,int z){  return getFluid(world,x,y,z,false) != null;}  }
class C{  public boolean isActiveInTransaction(CompositeTransaction tx){  boolean ret=false;  if (currentContext != null && tx != null)   ret=currentContext.isInTransaction(tx);  return ret;}  }
class C{  public static <V extends Vec>void meanVector(Vec mean,List<V> dataSet){  if (dataSet.isEmpty())   throw new ArithmeticException("Can not compute the mean of zero data points"); else   if (dataSet.get(0).length() != mean.length())   throw new ArithmeticException("Vector dimensions do not agree");  for (  Vec x : dataSet)   mean.mutableAdd(x);  mean.mutableDivide(dataSet.size());}  }
class C{  @Override public final void write(byte[] source,int offset,int len){  this.size+=len;}  }
class C{  @Override public void onDragEnd(DragEndEvent event){  log("onDragEnd: " + event,RED);}  }
class C{  protected boolean beforeSave(boolean newRecord){  MPayment payment=new MPayment(getCtx(),getC_Payment_ID(),get_TrxName());  if ((newRecord || is_ValueChanged("C_Invoice_ID")) && (payment.getC_Charge_ID() != 0 || payment.getC_Invoice_ID() != 0 || payment.getC_Order_ID() != 0)) {    log.saveError("PaymentIsAllocated","");    return false;  }  BigDecimal check=getAmount().add(getDiscountAmt()).add(getWriteOffAmt()).add(getOverUnderAmt());  if (check.compareTo(getInvoiceAmt()) != 0) {    log.saveError("Error",Msg.parseTranslation(getCtx(),"@InvoiceAmt@(" + getInvoiceAmt() + ") <> @Totals@("+ check+ ")"));    return false;  }  if (newRecord || is_ValueChanged("C_Invoice_ID")) {    getInvoice();    if (m_invoice != null)     setAD_Org_ID(m_invoice.getAD_Org_ID());  }  return true;}  }
class C{  public static int moveCodePointOffset(char source[],int start,int limit,int offset16,int shift32){  int size=source.length;  int count;  char ch;  int result=offset16 + start;  if (start < 0 || limit < start) {    throw new StringIndexOutOfBoundsException(start);  }  if (limit > size) {    throw new StringIndexOutOfBoundsException(limit);  }  if (offset16 < 0 || result > limit) {    throw new StringIndexOutOfBoundsException(offset16);  }  if (shift32 > 0) {    if (shift32 + result > size) {      throw new StringIndexOutOfBoundsException(result);    }    count=shift32;    while (result < limit && count > 0) {      ch=source[result];      if (isLeadSurrogate(ch) && (result + 1 < limit) && isTrailSurrogate(source[result + 1])) {        result++;      }      count--;      result++;    }  } else {    if (result + shift32 < start) {      throw new StringIndexOutOfBoundsException(result);    }    for (count=-shift32; count > 0; count--) {      result--;      if (result < start) {        break;      }      ch=source[result];      if (isTrailSurrogate(ch) && result > start && isLeadSurrogate(source[result - 1])) {        result--;      }    }  }  if (count != 0) {    throw new StringIndexOutOfBoundsException(shift32);  }  result-=start;  return result;}  }
class C{  public void technicalServiceChanged(ValueChangeEvent event){  Long newServiceKey=(Long)event.getNewValue();  techServiceBean.setSelectedTechnicalServiceKeyWithExceptionAndRefresh(newServiceKey.longValue());  supplierIdToAdd=null;  suppliersForTechnicalService=null;}  }
class C{  protected Object readResp() throws Exception {  InputStream is=huc.getInputStream();  Value mpo=packer.read(is);  return unMsg(mpo);}  }
class C{  public Object convert(final String value,final Class<?> clazz){  Converter converter=this.lookup(clazz);  if (converter == null) {    converter=this.lookup(String.class);  }  return converter.convert(clazz,value);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:25.397 -0500",hash_original_method="0360B175C51ABE1598A686E1C95592B6",hash_generated_method="90506082E3D0459E2C81EA8FB00BD16F") void remove(ThreadLocal<?> key){  cleanUp();  for (int index=key.hash & mask; ; index=next(index)) {    Object reference=table[index];    if (reference == key.reference) {      table[index]=TOMBSTONE;      table[index + 1]=null;      tombstones++;      size--;      return;    }    if (reference == null) {      return;    }  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:36.047 -0500",hash_original_method="53A11CFB931BDAEE1F32CE61EF0BEDA2",hash_generated_method="42AD5E13A84C0A5943C2A2C723DC64B6") public UnsupportedDigestAlgorithmException(String message){  super(message);}  }
class C{  public static int interleave(int x,int y,int z){  if (((x | y | z) & 0xFFFFFC00) != 0)   throw new IllegalArgumentException("Overflow");  return part1by2(x) | (part1by2(y) << 1) | (part1by2(z) << 2);}  }
class C{  public Type3Message(byte[] material) throws IOException {  parse(material);}  }
class C{  public static String formatDecimalNumber(double number,String pattern,Locale locale){  com.ibm.icu.text.NumberFormat nf=com.ibm.icu.text.NumberFormat.getNumberInstance(locale);  String nbParsing="";  ((com.ibm.icu.text.DecimalFormat)nf).applyPattern(pattern);  ((com.ibm.icu.text.DecimalFormat)nf).toPattern();  nbParsing=nf.format(number);  return nbParsing;}  }
class C{  public cudaStream_t(){}  }
class C{  public static void main(String... args) throws Exception {  String targetDir=args.length == 0 ? "." : args[0];  Class.forName("org.h2.Driver");  Connection conn=DriverManager.getConnection("jdbc:h2:mem:","sa","");  InputStream in=Newsfeed.class.getResourceAsStream("newsfeed.sql");  ResultSet rs=RunScript.execute(conn,new InputStreamReader(in,"ISO-8859-1"));  in.close();  while (rs.next()) {    String file=rs.getString("FILE");    String content=rs.getString("CONTENT");    if (file.endsWith(".txt")) {      content=convertHtml2Text(content);    }    new File(targetDir).mkdirs();    FileOutputStream out=new FileOutputStream(targetDir + "/" + file);    Writer writer=new OutputStreamWriter(out,"UTF-8");    writer.write(content);    writer.close();    out.close();  }  conn.close();}  }
class C{  public static String convertMoRefToString(ManagedObjectReference ref){  if (ref == null) {    return null;  }  return ref.getType() + DELIMITER + ref.getValue();}  }
class C{  @ApiOperation(value="Delete user",notes="Delete a user from the system. Roles allowed: system/admin") @ApiResponses({@ApiResponse(code=204,message="Deleted"),@ApiResponse(code=404,message="Not Found"),@ApiResponse(code=409,message="Impossible to remove user"),@ApiResponse(code=500,message="Internal Server Error")}) @DELETE @Path("/{id}") @GenerateLink(rel=LINK_REL_REMOVE_USER_BY_ID) @RolesAllowed("system/admin") public void remove(@ApiParam(value="User ID") @PathParam("id") String id) throws NotFoundException, ServerException, ConflictException {  userDao.remove(id);}  }
class C{  @Override public Object primDie(final IScope scope) throws GamaRuntimeException {  GAMA.closeExperiment(getSpecies());  GAMA.getGui().closeSimulationViews(true,false);  return null;}  }
class C{  public Request createRequest(javax2.sip.address.URI requestURI,String method,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,ContentTypeHeader contentType,byte[] content) throws ParseException {  if (requestURI == null || method == null || callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new NullPointerException("missing parameters");  SIPRequest sipRequest=new SIPRequest();  sipRequest.setRequestURI(requestURI);  sipRequest.setMethod(method);  sipRequest.setCallId(callId);  sipRequest.setCSeq(cSeq);  sipRequest.setFrom(from);  sipRequest.setTo(to);  sipRequest.setVia(via);  sipRequest.setMaxForwards(maxForwards);  sipRequest.setContent(content,contentType);  if (userAgent != null) {    sipRequest.setHeader(userAgent);  }  return sipRequest;}  }
class C{  private FakeCrashLibrary(){  throw new AssertionError("No instances.");}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.SDECLARATION__NAME:    return getName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ExpressionsPackage.CONDITIONAL_EXPRESSION__CONDITION:    return getCondition();case ExpressionsPackage.CONDITIONAL_EXPRESSION__TRUE_CASE:  return getTrueCase();case ExpressionsPackage.CONDITIONAL_EXPRESSION__FALSE_CASE:return getFalseCase();}return super.eGet(featureID,resolve,coreType);}  }
class C{  final public void enable_tracing(){}  }
class C{  @Override public void endElement(String uri,String localName,String qName){  try {    this.handler.endElement();  } catch (  RuntimeException exception) {    handleException(exception);  } finally {    this.handler=this.handler.getParent();  }}  }
class C{  public void init(CredentialInfo info,APIAccessCallBack apiAccessCallBack,Context context){  IdentityProxy.clientID=info.getClientID();  IdentityProxy.clientSecret=info.getClientSecret();  this.apiAccessCallBack=apiAccessCallBack;  this.context=context;  SharedPreferences mainPref=context.getSharedPreferences(Constants.APPLICATION_PACKAGE,Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putString(Constants.CLIENT_ID,clientID);  editor.putString(Constants.CLIENT_SECRET,clientSecret);  editor.putString(Constants.TOKEN_ENDPOINT,info.getTokenEndPoint());  editor.commit();  setAccessTokenURL(info.getTokenEndPoint());  AccessTokenHandler accessTokenHandler=new AccessTokenHandler(info,this);  accessTokenHandler.obtainAccessToken();}  }
class C{  static TemplateModelException newMethodArgInvalidValueException(String methodName,int argIdx,Object... details){  return new _TemplateModelException(methodName,"(...) argument #",Integer.valueOf(argIdx + 1)," had invalid value: ",details);}  }
class C{  public static Typeface androidNation(Context context){  return FontSourceProcessor.process(R.raw.androidnation,context);}  }
class C{  public static boolean[] toBooleanArray(double[] array){  boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] > 0;  }  return result;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private static Object convertArray(Object array,Class<?> fieldType,Class<?> itemType){  int len=Array.getLength(array);  if (fieldType.equals(List.class)) {    List list=new ArrayList();    for (int i=0; i < len; i++) {      list.add(Array.get(array,i));    }    return list;  } else   if (fieldType.isArray() && fieldType.getComponentType().isAssignableFrom(itemType)) {    if (itemType.equals(fieldType.getComponentType())) {      return array;    }    Object targetArray=Array.newInstance(fieldType.getComponentType(),len);    for (int i=0; i < len; i++) {      Array.set(targetArray,i,Array.get(array,i));    }    return targetArray;  } else {    String message=String.format("Cannot convert array of %s to %s",itemType,fieldType);    throw new BindingException(message);  }}  }
class C{  private final int addStdMove(GameTree gt,String moveStr){  return gt.addMove(moveStr,"",0,"","");}  }
class C{  public BasicStroke(Cap cap,Join join,float miter,float[] intervals,float phase){  mCap=cap;  mJoin=join;  mMiter=miter;  mIntervals=intervals;}  }
class C{  public BasicArchImpl(){  _id=ISicresAdminDefsKeys.NULL_ID;  _name="";}  }
class C{  public Notification(String title){  this(title,null,null,null);}  }
class C{  synchronized void ensureValid(){  if (isClosed()) {    throw new ClosedException();  }}  }
class C{  static public Boolean isPortMetricsAllocationEnabled(StorageSystem.Type systemType){  Boolean portMetricsAllocationEnabled=true;  try {    portMetricsAllocationEnabled=Boolean.valueOf(customConfigHandler.getComputedCustomConfigValue(CustomConfigConstants.PORT_ALLOCATION_METRICS_ENABLED,getStorageSystemTypeName(systemType),null));  } catch (  Exception e) {    _log.debug(e.getMessage());  }  return portMetricsAllocationEnabled;}  }
class C{  private void syncEmlWithResource(Resource resource){  resource.getEml().setEmlVersion(resource.getEmlVersion());  if (resource.getKey() != null) {    resource.getEml().setGuid(resource.getKey().toString());  } else {    resource.getEml().setGuid(cfg.getResourceGuid(resource.getShortname()));  }  updateKeywordsWithDatasetTypeAndSubtype(resource);}  }
class C{  private double[] prepareExtendedBatch(ExampleSet extendedBatch){  int[] classCount=new int[2];  Iterator<Example> reader=extendedBatch.iterator();  while (reader.hasNext()) {    Example example=reader.next();    example.setWeight(1);    classCount[(int)example.getLabel()]++;  }  double[] classPriors=new double[2];  int sum=classCount[0] + classCount[1];  classPriors[0]=(double)classCount[0] / sum;  classPriors[1]=(double)classCount[1] / sum;  return classPriors;}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public void readFully(byte[] b,int off,int len){  if (SysProperties.CHECK && (len < 0 || len % Constants.FILE_BLOCK_SIZE != 0)) {    DbException.throwInternalError("unaligned read " + name + " len "+ len);  }  checkPowerOff();  try {    FileUtils.readFully(file,ByteBuffer.wrap(b,off,len));  } catch (  IOException e) {    throw DbException.convertIOException(e,name);  }  filePos+=len;}  }
class C{  private void findValidation(Class<?> vaultClass,Class<?> assetClass,Class<?> idClass){  for (  Method method : vaultClass.getMethods()) {    if (!method.getName().startsWith("find")) {      continue;    }    if (!Modifier.isAbstract(method.getModifiers())) {      continue;    }    TypeRef resultRef=findResult(method.getParameters());    if (resultRef == null) {      continue;    }    TypeRef typeRef=resultRef.to(Result.class).param(0);    Class<?> typeClass=typeRef.rawClass();    if (unbox(idClass).equals(unbox(typeClass))) {      continue;    }    if (Collection.class.isAssignableFrom(typeClass)) {      continue;    } else     if (Stream.class.isAssignableFrom(typeClass)) {      continue;    } else     if (Modifier.isAbstract(typeClass.getModifiers())) {      continue;    }    new ShimConverter<>(assetClass,typeClass);  }}  }
class C{  public boolean isReadable(){  return true;}  }
class C{  public void testD() throws IOException {  SimilarityBase sim=new DFRSimilarity(new BasicModelD(),new AfterEffect.NoAfterEffect(),new Normalization.NoNormalization());  double totalTermFreqNorm=TOTAL_TERM_FREQ + FREQ + 1;  double p=1.0 / (NUMBER_OF_DOCUMENTS + 1);  double phi=FREQ / totalTermFreqNorm;  double D=phi * SimilarityBase.log2(phi / p) + (1 - phi) * SimilarityBase.log2((1 - phi) / (1 - p));  float gold=(float)(totalTermFreqNorm * D + 0.5 * SimilarityBase.log2(1 + 2 * Math.PI * FREQ* (1 - phi)));  correctnessTestCore(sim,gold);}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (StringUtils.isBlank(nombre)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DescripcionConstants.DESCRIPCION_LISTADESCRIPTORAS_NOMBRE,request.getLocale())));  }  if (tipo < 0) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DescripcionConstants.DESCRIPCION_LISTADESCRIPTORAS_TIPO,request.getLocale())));  }  if (tipoDescriptor < 0) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DescripcionConstants.DESCRIPCION_LISTADESCRIPTORAS_TIPO_DESCRIPTOR,request.getLocale())));  }  if ((tipoDescriptor == TipoDescriptor.ENTIDAD) && StringUtils.isBlank(idFichaDescrPref)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DescripcionConstants.DESCRIPCION_LISTADESCRIPTORAS_TIPO_NOMBRE_FICHA_DESCR_PREF,request.getLocale())));  }  return errors;}  }
class C{  private void allocatePort(StoragePort allocatedPort,Set<String> allocatedPorts,Set<String> allocatedEngines,Set<String> allocatedDirectorTypes,Set<String> allocatedDirectors,Set<String> allocatedCpus,Set<String> allocatedSwitches,List<StoragePort> allocatedStoragePorts,PortAllocationContext context){  allocatedPorts.add(allocatedPort.getPortNetworkId());  allocatedStoragePorts.add(allocatedPort);  String engine=context._storagePortToEngine.get(allocatedPort);  if (engine != null) {    allocatedEngines.add(engine);    context._alreadyAllocatedEngines.add(engine);  }  String directorType=context._storagePortToDirectorType.get(allocatedPort);  if (directorType != null) {    allocatedDirectorTypes.add(directorType);    context._alreadyAllocatedDirectorTypes.add(directorType);  }  String director=context._storagePortToDirector.get(allocatedPort);  if (director != null) {    allocatedDirectors.add(director);    context._alreadyAllocatedDirectors.add(director);  }  String cpu=context._storagePortToCpu.get(allocatedPort);  if (cpu != null) {    allocatedCpus.add(cpu);    context._alreadyAllocatedCpus.add(cpu);  }  if (context._storagePortToSwitchName.get(allocatedPort) != null) {    allocatedSwitches.add(context._storagePortToSwitchName.get(allocatedPort));    context._alreadyAllocatedSwitches.add(context._storagePortToSwitchName.get(allocatedPort));  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void writeStatement(Statement oldStat){  if (oldStat == null) {    throw new NullPointerException();  }  Statement newStat=createNewStatement(oldStat);  try {    newStat.execute();  } catch (  Exception e) {    listener.exceptionThrown(new Exception("failed to write statement: " + oldStat,e));  }}  }
class C{  public TourGuide playInSequence(Sequence sequence){  setSequence(sequence);  next();  return this;}  }
class C{  @ReactMethod public void showPopupMenu(int reactTag,ReadableArray items,Callback error,Callback success){  assertViewExists(reactTag,"showPopupMenu");  mOperationsQueue.enqueueShowPopupMenu(reactTag,items,error,success);}  }
class C{  public static DateTime fromBigqueryTimestampString(String timestampString){  return BIGQUERY_TIMESTAMP_FORMAT.parseDateTime(timestampString);}  }
class C{  public boolean isRejectRemoteReceivedHeaderInvalid(){  return fieldRejectRemoteReceivedHeaderInvalid;}  }
class C{  public static void addFileDependencyCondition(ParameterType parameter,ParameterHandler parameterHandler,PortProvider portProvider){  parameter.registerDependencyCondition(new PortConnectedCondition(parameterHandler,portProvider,true,false));}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  String[][] statesAndCapitals=getData();  int count=0;  for (int i=0; i < statesAndCapitals.length; i++) {    System.out.print("What is the capital of " + statesAndCapitals[i][0] + "? ");    String capital=input.nextLine();    if (isEqual(statesAndCapitals[i][1],capital)) {      System.out.println("Your answer is correct");      count++;    } else {      System.out.println("The correct answer should be " + statesAndCapitals[i][1]);    }  }  System.out.println("\nThe correct count is " + count);}  }
class C{  public void compressBlockDXT3(ColorBlock4x4 colorBlock,DXTCompressionAttributes attributes,BlockDXT3 dxtBlock){  if (colorBlock == null) {    String message=Logging.getMessage("nullValue.ColorBlockIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (attributes == null) {    String message=Logging.getMessage("nullValue.AttributesIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (dxtBlock == null) {    String message=Logging.getMessage("nullValue.DXTBlockIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.dxt1Compressor.compressBlockDXT1(colorBlock,attributes,dxtBlock.colorBlock);  this.compressBlockDXT3a(colorBlock,dxtBlock.alphaBlock);}  }
class C{  public static Tree fromString(String ptbStr){  PennTreeReader reader=new PennTreeReader(new StringReader(ptbStr));  return reader.next();}  }
class C{  public void unregisterVASACertificate(String existingCertificate) throws InvalidCertificate, InvalidSession, StorageFault {  final String methodName="unregisterVASACertificate(): ";  log.info(methodName + "Entry with existingCertificate[" + (existingCertificate != null ? "****" : null)+ "]");  contextManager.unregisterVASACertificate(existingCertificate);  log.info(methodName + "Exit");}  }
class C{  public T archive(String value){  return attr("archive",value);}  }
class C{  public void enableMobileProvisioning(String url){  if (DBG)   log("enableMobileProvisioning(url=" + url + ")");  final AsyncChannel channel=mDataConnectionTrackerAc;  if (channel != null) {    Message msg=Message.obtain();    msg.what=DctConstants.CMD_ENABLE_MOBILE_PROVISIONING;    msg.setData(Bundle.forPair(DctConstants.PROVISIONING_URL_KEY,url));    channel.sendMessage(msg);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z, min, max;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          min=z;          max=z;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              if (z < min) {                min=z;              }              if (z > max) {                max=z;              }            }          }          outputFile.setValue(row,col,(max - min));        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public int size(){  return feature2Id.size();}  }
class C{  public SerialNode(){}  }
class C{  private boolean tryPublicKey(final Connection c,final String keyPath){  try {    final File file=new File(keyPath);    if (file.exists()) {      String passphrase=null;      char[] text=FileUtilRt.loadFileText(file);      if (isEncryptedKey(text)) {        int i;        for (i=0; i < myHost.getNumberOfPasswordPrompts(); i++) {          passphrase=myXmlRpcClient.askPassphrase(myHandlerNo,getUserHostString(),keyPath,i != 0,myLastError);          if (passphrase == null) {            return false;          } else {            try {              PEMDecoder.decode(text,passphrase);              myLastError="";            } catch (            IOException e) {              myLastError=SSHMainBundle.message("sshmain.invalidpassphrase",keyPath);              myErrorCause=e;              continue;            }            break;          }        }        if (i == myHost.getNumberOfPasswordPrompts()) {          myLastError=SSHMainBundle.message("sshmain.too.mush.passphrase.guesses",keyPath,myHost.getNumberOfPasswordPrompts());          return false;        }      }      if (c.authenticateWithPublicKey(myHost.getUser(),text,passphrase)) {        myLastError="";        myXmlRpcClient.setLastSuccessful(myHandlerNo,getUserHostString(),PUBLIC_KEY_METHOD,"");        return true;      } else {        if (passphrase != null) {          myLastError=SSHMainBundle.message("sshmain.pk.authenitication.failed",keyPath);        } else {          myLastError="";        }      }    }    return false;  } catch (  Exception e) {    myErrorCause=e;    return false;  }}  }
class C{  public List<String> command(){  return command;}  }
class C{  public boolean isBlocked(String permissionName){  return !doCanPerform(permissionName,false,true);}  }
class C{  protected synchronized void clearBuffers(){  while (m_firstBuffer.size() > 0 && m_secondBuffer.size() > 0) {    m_throughput.updateStart();    Instance newInst=processBuffers();    m_throughput.updateEnd(m_log);    if (newInst != null) {      m_ie.setInstance(newInst);      m_ie.setStatus(InstanceEvent.INSTANCE_AVAILABLE);      notifyInstanceListeners(m_ie);    }  }  m_ie.setInstance(null);  m_ie.setStatus(InstanceEvent.BATCH_FINISHED);  notifyInstanceListeners(m_ie);  if (m_log != null) {    m_log.statusMessage(statusMessagePrefix() + "Finished");  }  m_headerOne=null;  m_headerTwo=null;  m_mergedHeader=null;  m_firstBuffer=null;  m_secondBuffer=null;  m_firstFinished=false;  m_secondFinished=false;  m_busy=false;}  }
class C{  public static RegionSizeRequest create(){  RegionSizeRequest m=new RegionSizeRequest();  return m;}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  public TaskResourceRep restoreSnapshotSession(URI snapSessionURI){  s_logger.info("START restore snapshot session {}",snapSessionURI);  BlockSnapshotSession snapSession=BlockSnapshotSessionUtils.querySnapshotSession(snapSessionURI,_uriInfo,_dbClient,true);  BlockObject snapSessionSourceObj=null;  List<BlockObject> snapSessionSourceObjs=getAllSnapshotSessionSources(snapSession);  snapSessionSourceObj=snapSessionSourceObjs.get(0);  Project project=BlockSnapshotSessionUtils.querySnapshotSessionSourceProject(snapSessionSourceObj,_dbClient);  BlockSnapshotSessionApi snapSessionApiImpl=determinePlatformSpecificImplForSource(snapSessionSourceObj);  snapSessionApiImpl.validateRestoreSnapshotSession(snapSessionSourceObjs,project);  String taskId=UUID.randomUUID().toString();  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.RESTORE_SNAPSHOT_SESSION);  _dbClient.createTaskOpStatus(BlockSnapshotSession.class,snapSessionURI,taskId,op);  snapSession.getOpStatus().put(taskId,op);  TaskResourceRep resourceRep=toTask(snapSession,taskId);  try {    snapSessionApiImpl.restoreSnapshotSession(snapSession,snapSessionSourceObjs.get(0),taskId);  } catch (  Exception e) {    String errorMsg=format("Failed to restore snapshot session %s: %s",snapSessionURI,e.getMessage());    ServiceCoded sc=null;    if (e instanceof ServiceCoded) {      sc=(ServiceCoded)e;    } else {      sc=APIException.internalServerErrors.genericApisvcError(errorMsg,e);    }    cleanupFailure(Lists.newArrayList(resourceRep),new ArrayList<DataObject>(),errorMsg,taskId,sc);    throw e;  }  auditOp(OperationTypeEnum.RESTORE_SNAPSHOT_SESSION,true,AuditLogManager.AUDITOP_BEGIN,snapSessionURI.toString(),snapSessionSourceObjs.get(0).getId().toString(),snapSessionSourceObjs.get(0).getStorageController().toString());  s_logger.info("FINISH restore snapshot session {}",snapSessionURI);  return resourceRep;}  }
class C{  public LayersMenu(LayerHandler lHandler){  this(lHandler,"Layers",LAYERS_ON_OFF);}  }
class C{  private Individual searchBest(){  try {    return Collections.max(individuals,PERFORMANCE_COMPARATOR);  } catch (  NullPointerException e) {    return null;  }catch (  NoSuchElementException e) {    return null;  }}  }
class C{  private void emitDeserializer(List<Method> getters,StringBuilder builder){  builder.append("    public static ").append(getImplClassName()).append(" fromJsonElement(JsonElement jsonElem) {\n");  builder.append("      return fromJsonElement(jsonElem, true);\n");  builder.append("    }\n");  builder.append("    public static ").append(getImplClassName()).append(" fromJsonElement(JsonElement jsonElem, boolean ").append(COPY_JSONS_PARAM).append(") {\n");  builder.append("      if (jsonElem == null || jsonElem.isJsonNull()) {\n");  builder.append("        return null;\n");  builder.append("      }\n\n");  builder.append("      ").append(getImplClassName()).append(" dto = new ").append(getImplClassName()).append("();\n");  if (isCompactJson()) {    builder.append("      JsonArray json = jsonElem.getAsJsonArray();\n");    for (    Method method : getters) {      emitDeserializeFieldForMethodCompact(method,builder);    }  } else {    builder.append("      JsonObject json = jsonElem.getAsJsonObject();\n");    for (    Method getter : getters) {      emitDeserializeFieldForMethod(getter,builder);    }  }  builder.append("\n      return dto;\n");  builder.append("    }\n\n");}  }
class C{  public boolean isInAllowed(int x,int y){  for (  Shape r : arrivingBarriers) {    if (r.contains(x,y)) {      return false;    }  }  return true;}  }
class C{  public void write(byte[] b) throws IOException {  write(b,0,b.length);}  }
class C{  public Accumulator(){  data=new HashMap<String,List<Serializable>>();}  }
class C{  public DbManagerOps(MBeanServerConnection mbsc) throws IOException, MalformedObjectNameException {  initMbean(mbsc);}  }
class C{  public void testSharedMode() throws Exception {  processSharedModeTest(DeploymentMode.SHARED);}  }
class C{  public SystemWebViewEngine(Context context,CordovaPreferences preferences){  this(new SystemWebView(context));}  }
class C{  public Affiliation(String jid,String node,Type affiliation){  this.jid=jid;  this.node=node;  type=affiliation;}  }
class C{  public void testCreateIdForEAR() throws Exception {  EAR ear=createEAR();  String name=deployer.createIdForDeployable(ear);  assertEquals("cargo.war",name);}  }
class C{  public boolean sameAs(Cache other){  boolean sameConfig=other.getLockLease() == this.getLockLease() && other.getLockTimeout() == this.getLockTimeout() && other.getSearchTimeout() == this.getSearchTimeout() && other.getMessageSyncInterval() == this.getMessageSyncInterval() && other.getCopyOnRead() == this.getCopyOnRead() && other.isServer() == this.isServer();  if (!sameConfig) {    throw new RuntimeException(LocalizedStrings.CacheCreation_SAMECONFIG.toLocalizedString());  } else {    DynamicRegionFactory.Config drc1=this.getDynamicRegionFactoryConfig();    if (drc1 != null) {      DynamicRegionFactory.Config drc2=null;      if (other instanceof CacheCreation) {        drc2=((CacheCreation)other).getDynamicRegionFactoryConfig();      } else {        drc2=DynamicRegionFactory.get().getConfig();      }      if (drc2 == null) {        return false;      }      if (!drc1.equals(drc2)) {        return false;      }    } else {      if (other instanceof CacheCreation) {        if (((CacheCreation)other).getDynamicRegionFactoryConfig() != null) {          return false;        }      } else {        if (DynamicRegionFactory.get().isOpen()) {          return false;        }      }    }    Collection myBridges=this.getCacheServers();    Collection otherBridges=other.getCacheServers();    if (myBridges.size() != otherBridges.size()) {      throw new RuntimeException(LocalizedStrings.CacheCreation_CACHESERVERS_SIZE.toLocalizedString());    }    for (Iterator myIter=myBridges.iterator(); myIter.hasNext(); ) {      CacheServerCreation myBridge=(CacheServerCreation)myIter.next();      boolean found=false;      for (Iterator otherIter=otherBridges.iterator(); otherIter.hasNext(); ) {        CacheServer otherBridge=(CacheServer)otherIter.next();        if (myBridge.sameAs(otherBridge)) {          found=true;          break;        }      }      if (!found) {        throw new RuntimeException(LocalizedStrings.CacheCreation_CACHE_SERVER_0_NOT_FOUND.toLocalizedString(myBridge));      }    }{      Map m1=getPools();      Map m2=(other instanceof CacheCreation) ? ((CacheCreation)other).getPools() : PoolManager.getAll();      int m1Size=m1.size();{        Iterator it1=m1.values().iterator();        while (it1.hasNext()) {          Pool cp=(Pool)it1.next();          if (((PoolImpl)cp).isUsedByGateway()) {            m1Size--;          }        }      }      int m2Size=m2.size();{        Iterator it2=m2.values().iterator();        while (it2.hasNext()) {          Pool cp=(Pool)it2.next();          if (((PoolImpl)cp).isUsedByGateway()) {            m2Size--;          }        }      }      if (m2Size == 1) {        Pool p=(Pool)m2.values().iterator().next();        if (p.getName().equals("DEFAULT")) {          m2Size=0;        }      }      if (m1Size != m2Size) {        throw new RuntimeException("pool sizes differ m1Size=" + m1Size + " m2Size="+ m2Size+ " m1="+ m1.values()+ " m2="+ m2.values());      }      if (m1Size > 0) {        Iterator it1=m1.values().iterator();        while (it1.hasNext()) {          PoolImpl cp=(PoolImpl)it1.next();          if (!(cp).isUsedByGateway()) {            cp.sameAs(m2.get(cp.getName()));          }        }      }    }    for (Iterator myIter=diskStores.values().iterator(); myIter.hasNext(); ) {      DiskStoreAttributesCreation dsac=(DiskStoreAttributesCreation)myIter.next();      String name=dsac.getName();      DiskStore ds=other.findDiskStore(name);      if (ds == null) {        getLogger().fine("Disk store " + name + " not found.");        throw new RuntimeException(LocalizedStrings.CacheCreation_DISKSTORE_NOTFOUND_0.toLocalizedString(name));      } else {        if (!dsac.sameAs(ds)) {          getLogger().fine("Attributes for disk store " + name + " do not match");          throw new RuntimeException(LocalizedStrings.CacheCreation_ATTRIBUTES_FOR_DISKSTORE_0_DO_NOT_MATCH.toLocalizedString(name));        }      }    }    Map myNamedAttributes=this.listRegionAttributes();    Map otherNamedAttributes=other.listRegionAttributes();    if (myNamedAttributes.size() != otherNamedAttributes.size()) {      throw new RuntimeException(LocalizedStrings.CacheCreation_NAMEDATTRIBUTES_SIZE.toLocalizedString());    }    for (Iterator myIter=myNamedAttributes.entrySet().iterator(); myIter.hasNext(); ) {      Map.Entry myEntry=(Map.Entry)myIter.next();      String myId=(String)myEntry.getKey();      Assert.assertTrue(myEntry.getValue() instanceof RegionAttributesCreation,"Entry value is a " + myEntry.getValue().getClass().getName());      RegionAttributesCreation myAttrs=(RegionAttributesCreation)myEntry.getValue();      RegionAttributes otherAttrs=other.getRegionAttributes(myId);      if (otherAttrs == null) {        getLogger().fine("No attributes for " + myId);        throw new RuntimeException(LocalizedStrings.CacheCreation_NO_ATTRIBUTES_FOR_0.toLocalizedString(myId));      } else {        if (!myAttrs.sameAs(otherAttrs)) {          getLogger().fine("Attributes for " + myId + " do not match");          throw new RuntimeException(LocalizedStrings.CacheCreation_ATTRIBUTES_FOR_0_DO_NOT_MATCH.toLocalizedString(myId));        }      }    }    Collection myRoots=this.roots.values();    Collection otherRoots=other.rootRegions();    if (myRoots.size() != otherRoots.size()) {      throw new RuntimeException(LocalizedStrings.CacheCreation_ROOTS_SIZE.toLocalizedString());    }    Iterator it=myRoots.iterator();    while (it.hasNext()) {      RegionCreation r=(RegionCreation)it.next();      Region r2=other.getRegion(r.getName());      if (r2 == null) {        throw new RuntimeException(LocalizedStrings.CacheCreation_NO_ROOT_0.toLocalizedString(r.getName()));      } else       if (!r.sameAs(r2)) {        throw new RuntimeException(LocalizedStrings.CacheCreation_REGIONS_DIFFER.toLocalizedString());      }    }    if (getCacheTransactionManager() != null) {      List otherTxListeners=Arrays.asList(other.getCacheTransactionManager().getListeners());      List thisTxListeners=Arrays.asList(getCacheTransactionManager().getListeners());      if (!thisTxListeners.equals(otherTxListeners)) {        throw new RuntimeException(LocalizedStrings.CacheCreation_TXLISTENER.toLocalizedString());      }    }  }  if (hasResourceManager()) {    getResourceManager().sameAs(other.getResourceManager());  }  return true;}  }
class C{  protected void writeModelRetriever() throws IOException {  out("require('",JsCompiler.scriptPath(module),"-model').$CCMM$");}  }
class C{  @Override public boolean supportsSchemasInProcedureCalls(){  debugCodeCall("supportsSchemasInProcedureCalls");  return true;}  }
class C{  public void fillInNotifierBundle(Bundle bundleToFill){  bundleToFill.putInt("baseStationId",this.mBaseStationId);  bundleToFill.putInt("baseStationLatitude",this.mBaseStationLatitude);  bundleToFill.putInt("baseStationLongitude",this.mBaseStationLongitude);  bundleToFill.putInt("systemId",this.mSystemId);  bundleToFill.putInt("networkId",this.mNetworkId);}  }
class C{  public String write(Enum value) throws Exception {  return value.name();}  }
class C{  public static double[] f(double[] M,Function func){  double[] fM=new double[M.length];  for (int i=0; i < fM.length; i++)   fM[i]=func.f(M[i]);  return fM;}  }
class C{  private void deleteNode(BFINode<E> childNode,InsDelUpdateStatistics stat){  if (this.root.children.size() < 2) {    System.err.println("ERROR: nb children of root is " + this.root.children.size());    System.err.println(this.toString());    assert false;  }  BFINode<E> node=childNode.parent;  boolean ok=node.children.remove(childNode);  assert ok;  stat.nbBFNodesAccessed+=2;  if (node == this.root && node.children.size() == 1) {    if (!node.children.get(0).isLeaf()) {      this.root=node.children.get(0);      this.root.parent=null;      stat.nbBFNodesAccessed++;      return;    }  }  stat.nbBFNodesAccessed++;  if (!node.needMerge()) {    recomputeValueToTheRoot(node,stat);  } else {    int index=node.parent.children.indexOf(node);    stat.nbBFNodesAccessed+=2;    BFINode<E> sibling;    boolean isRightSibling=false;    if (index + 1 < node.parent.children.size()) {      isRightSibling=true;      sibling=(BFINode<E>)node.parent.children.get(index + 1);    } else {      if (index - 1 < 0) {        System.err.println("Error " + this.toString() + " node: "+ node.toString()+ "childNode: "+ childNode.toString());        assert false;      }      isRightSibling=false;      sibling=(BFINode<E>)node.parent.children.get(index - 1);    }    stat.nbBFNodesAccessed++;    stat.nbBFNodesAccessed++;    if (sibling.canRedistribute()) {      redistribute(node,sibling,isRightSibling,stat);    } else {      merge(node,sibling,isRightSibling,stat);      deleteNode(node,stat);    }  }  return;}  }
class C{  public void writeFormatted(Geometry geometry,Writer writer) throws IOException {  writeFormatted(geometry,true,writer);}  }
class C{  public NegativeResponseException(int commandStatus){  super("Negative response " + IntUtil.toHexString(commandStatus) + " found");  this.commandStatus=commandStatus;}  }
class C{  public void addOptionIfValueNonEmpty(String option,String value){  if (value != null && !value.isEmpty()) {    addOption(option,value);  }}  }
class C{  public void executeCallback(SceKernelThreadInfo thread,int address,IAction afterAction,boolean returnVoid,int registerA0){  if (log.isDebugEnabled()) {    log.debug(String.format("Execute callback 0x%08X($a0=0x%08X), afterAction=%s, returnVoid=%b",address,registerA0,afterAction,returnVoid));  }  callAddress(thread,address,afterAction,returnVoid,false,new int[]{registerA0});}  }
class C{  protected JavacElements(Context context){  setContext(context);}  }
class C{  public void write(BufferedImage img) throws IOException {  super.write(img);  String fileExtension=getExtension(destinationFile);  String formatName=outputFormat;  if (formatName != null && (fileExtension == null || !isMatchingFormat(formatName,fileExtension))) {    destinationFile=new File(destinationFile.getAbsolutePath() + "." + formatName);  }  if (!allowOverwrite && destinationFile.exists()) {    throw new IllegalArgumentException("The destination file exists.");  }  if (formatName == null && fileExtension != null) {    Iterator<ImageReader> rIter=ImageIO.getImageReadersBySuffix(fileExtension);    if (rIter.hasNext()) {      formatName=rIter.next().getFormatName();    }  }  if (formatName == null) {    throw new UnsupportedFormatException(formatName,"Could not determine output format.");  }  Iterator<ImageWriter> writers=ImageIO.getImageWritersByFormatName(formatName);  if (!writers.hasNext()) {    throw new UnsupportedFormatException(formatName,"No suitable ImageWriter found for " + formatName + ".");  }  ImageWriter writer=writers.next();  ImageWriteParam writeParam=writer.getDefaultWriteParam();  if (writeParam.canWriteCompressed() && param != null) {    writeParam.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);    if (param.getOutputFormatType() != ThumbnailParameter.DEFAULT_FORMAT_TYPE) {      writeParam.setCompressionType(param.getOutputFormatType());    } else {      List<String> supportedFormats=ThumbnailatorUtils.getSupportedOutputFormatTypes(formatName);      if (!supportedFormats.isEmpty()) {        writeParam.setCompressionType(supportedFormats.get(0));      }    }    if (!Float.isNaN(param.getOutputQuality())) {      writeParam.setCompressionQuality(param.getOutputQuality());    }  }  ImageOutputStream ios;  FileOutputStream fos;  fos=new FileOutputStream(destinationFile);  ios=ImageIO.createImageOutputStream(fos);  if (ios == null || fos == null) {    throw new IOException("Could not open output file.");  }  if (formatName.equalsIgnoreCase("jpg") || formatName.equalsIgnoreCase("jpeg") || formatName.equalsIgnoreCase("bmp")) {    img=BufferedImages.copy(img,BufferedImage.TYPE_INT_RGB);  }  writer.setOutput(ios);  writer.write(null,new IIOImage(img,null,null),writeParam);  writer.dispose();  ios.close();  fos.close();}  }
class C{  K lowestKey(){  Comparator<? super K> cmp=m.comparator;  ConcurrentSkipListMap.Node<K,V> n=loNode(cmp);  if (isBeforeEnd(n,cmp))   return n.key; else   throw new NoSuchElementException();}  }
class C{  private void exportFolderToText(String folderId,PrintStream ps){  Cursor notesCursor=mContext.getContentResolver().query(Notes.CONTENT_NOTE_URI,NOTE_PROJECTION,NoteColumns.PARENT_ID + "=?",new String[]{folderId},null);  if (notesCursor != null) {    if (notesCursor.moveToFirst()) {      do {        ps.println(String.format(getFormat(FORMAT_NOTE_DATE),DateFormat.format(mContext.getString(R.string.format_datetime_mdhm),notesCursor.getLong(NOTE_COLUMN_MODIFIED_DATE))));        String noteId=notesCursor.getString(NOTE_COLUMN_ID);        exportNoteToText(noteId,ps);      } while (notesCursor.moveToNext());    }    notesCursor.close();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:18.877 -0500",hash_original_method="B472369E445B34AFDD84E5B389A9601D",hash_generated_method="7E96FE508A65015DCC33416C426C9ABB") protected final RectF rect(){  return mRect;}  }
class C{  public void putAsString(String key,double value){  String strValue=Double.toString(value);  super.put(key,strValue);}  }
class C{  public ZebraJTree(javax.swing.tree.TreeModel newModel){  super(newModel);}  }
class C{  public Node nextNode(){  if (!hasNext()) {    return null;  }  currentNode=nodes.pop();  currentChildren=currentNode.getChildNodes();  int childLen=(currentChildren != null) ? currentChildren.getLength() : 0;  for (int i=childLen - 1; i >= 0; i--) {    nodes.add(currentChildren.item(i));  }  return currentNode;}  }
class C{  public DefaultPseudoStateContext(PseudoState<S,E> pseudoState,PseudoAction pseudoAction){  this.pseudoState=pseudoState;  this.pseudoAction=pseudoAction;}  }
class C{  public void initView(Context context,EditableImage editableImage){  this.editableImage=editableImage;  selectionView=new SelectionView(context,lineWidth,cornerWidth,cornerLength,lineColor,cornerColor,shadowColor,editableImage);  imageView=new ImageView(context);  imageView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));  selectionView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));  addView(imageView,0);  addView(selectionView,1);}  }
class C{  @Override public boolean doesMaxRowSizeIncludeBlobs(){  debugCodeCall("doesMaxRowSizeIncludeBlobs");  return false;}  }
class C{  public DocumentExportEntry insert(URL exportFeedUrl,List<QueryParameter> params) throws IOException, ServiceException {  DocumentExportEntry entry=new DocumentExportEntry();  for (  QueryParameter param : params) {    entry.addQuery(param);  }  return insert(exportFeedUrl,entry);}  }
class C{  public AttributeTagTestCase(String name){  super(name);}  }
class C{  public static Short toShort(CharSequence self){  return Short.valueOf(self.toString().trim());}  }
class C{  public AllCapsTransformationMethod(Context context){  mLocale=context.getResources().getConfiguration().locale;}  }
class C{  @LargeTest public void testThumbnailH264AnIFrame() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_1080x720_30fps_800kbps_1_17.mp4";  final int outWidth=1080;  final int outHeight=720;  final int atTime=3000;  int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String[] loggingInfo=new String[1];  long durationToAddObjects=0;  final MediaVideoItem mediaVideoItem=new MediaVideoItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  assertNotNull("MediaVideoItem",mediaVideoItem);  for (int i=0; i < NUM_OF_ITERATIONS; i++) {    final long duration1=SystemClock.uptimeMillis();    mediaVideoItem.getThumbnail(outWidth,outHeight,atTime + i);    final long duration2=SystemClock.uptimeMillis();    durationToAddObjects+=(duration2 - duration1);  }  final float timeTaken=(float)durationToAddObjects * 1.0f / (float)NUM_OF_ITERATIONS;  loggingInfo[0]="Time taken Thumbnail generation :" + timeTaken;  writeTimingInfo("testThumbnailH264AnIFrame",loggingInfo);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:52.757 -0500",hash_original_method="79DF1B5079137D62C29C5EAC0F3F40E2",hash_generated_method="A015978186413157B4AD18DBEEDB9864") public Socket createSocket(InetAddress address,int port,InetAddress myAddress,int myPort) throws IOException {  if (myAddress != null)   return new Socket(address,port,myAddress,myPort); else   if (port != 0) {    Socket sock=new Socket();    sock.bind(new InetSocketAddress(port));    sock.connect(new InetSocketAddress(address,port));    return sock;  } else   return new Socket(address,port);}  }
class C{  protected void initializeTerminalSize(){  slotsTall=6;  slotsAcross=9;  startX=69;  startY=0;  playerInventoryOffsetX=0;  playerInventoryOffsetY=37;  hasCraftingMatrix=true;}  }
class C{  private void logWarning(String msg,Throwable e){  EnvironmentStream.logStderr(msg,e);}  }
class C{  public static float[] cmykFromRgb(int rgbColor){  int red=(0xff0000 & rgbColor) >> 16;  int green=(0xff00 & rgbColor) >> 8;  int blue=(0xff & rgbColor);  float black=Math.min(1.0f - red / 255.0f,Math.min(1.0f - green / 255.0f,1.0f - blue / 255.0f));  float cyan=1.0f;  float magenta=1.0f;  float yellow=1.0f;  if (black != 1.0f) {    cyan=(1.0f - (red / 255.0f) - black) / (1.0f - black);    magenta=(1.0f - (green / 255.0f) - black) / (1.0f - black);    yellow=(1.0f - (blue / 255.0f) - black) / (1.0f - black);  }  return new float[]{cyan,magenta,yellow,black};}  }
class C{  public void updateCheckout(final Checkout checkout,final Callback<Checkout> callback){  buyClient.updateCheckout(checkout,wrapCheckoutCallback(callback));}  }
class C{  public static void applyDecidedIconOrSetGone(ImageHolder imageHolder,ImageView imageView,int iconColor,boolean tint,int paddingDp){  if (imageHolder != null && imageView != null) {    Drawable drawable=ImageHolder.decideIcon(imageHolder,imageView.getContext(),iconColor,tint,paddingDp);    if (drawable != null) {      imageView.setImageDrawable(drawable);      imageView.setVisibility(View.VISIBLE);    } else     if (imageHolder.getBitmap() != null) {      imageView.setImageBitmap(imageHolder.getBitmap());      imageView.setVisibility(View.VISIBLE);    } else {      imageView.setVisibility(View.GONE);    }  } else   if (imageView != null) {    imageView.setVisibility(View.GONE);  }}  }
class C{  public static String toStream(String channel){  if (channel == null) {    return null;  }  if (channel.startsWith("#")) {    return channel.substring(1);  }  return channel;}  }
class C{  @SuppressWarnings({"MagicConstant","TypeMayBeWeakened"}) public static IgniteProductVersion fromString(String verStr){  assert verStr != null;  if (verStr.endsWith("-DEV") || verStr.endsWith("-n/a"))   verStr=verStr.substring(0,verStr.length() - 4);  Matcher match=VER_PATTERN.matcher(verStr);  if (match.matches()) {    try {      byte major=Byte.parseByte(match.group(1));      byte minor=Byte.parseByte(match.group(2));      byte maintenance=Byte.parseByte(match.group(3));      String stage="";      if (match.group(4) != null)       stage=match.group(4).substring(1);      long revTs=0;      if (match.group(7) != null)       revTs=Long.parseLong(match.group(8));      byte[] revHash=null;      if (match.group(9) != null)       revHash=U.decodeHex(match.group(10).toCharArray());      return new IgniteProductVersion(major,minor,maintenance,stage,revTs,revHash);    } catch (    IllegalStateException|IndexOutOfBoundsException|NumberFormatException|IgniteCheckedException e) {      throw new IllegalStateException("Failed to parse version: " + verStr,e);    }  } else   throw new IllegalStateException("Failed to parse version: " + verStr);}  }
class C{  public static synchronized TypeReference findOrCreate(ClassLoader cl,Atom tn) throws IllegalArgumentException {  TypeDescriptorParsing.validateAsTypeDescriptor(tn);  ClassLoader bootstrapCL=BootstrapClassLoader.getBootstrapClassLoader();  if (cl == null) {    cl=bootstrapCL;  } else   if (cl != bootstrapCL) {    if (tn.isClassDescriptor()) {      if (tn.isBootstrapClassDescriptor()) {        cl=bootstrapCL;      }    } else     if (tn.isArrayDescriptor()) {      Atom innermostElementType=tn.parseForInnermostArrayElementDescriptor();      if (innermostElementType.isClassDescriptor()) {        if (innermostElementType.isBootstrapClassDescriptor()) {          cl=bootstrapCL;        }      } else {        cl=bootstrapCL;      }    } else {      cl=bootstrapCL;    }  }  return findOrCreateInternal(cl,tn);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public Response handle(final String rawRequest){  final Request req=requestParser.parse(rawRequest);  return handleRequest(req);}  }
class C{  public ReferenceQueue(){}  }
class C{  public double[] update(JunctionTreeNode node){  if (node.m_P == null) {    return null;  }  double[] fi=new double[m_nCardinality];  int[] values=new int[node.m_nNodes.length];  int[] order=new int[m_bayesNet.getNrOfNodes()];  for (int iNode=0; iNode < node.m_nNodes.length; iNode++) {    order[node.m_nNodes[iNode]]=iNode;  }  for (int iPos=0; iPos < node.m_nCardinality; iPos++) {    int iNodeCPT=getCPT(node.m_nNodes,node.m_nNodes.length,values,order,m_bayesNet);    int iSepCPT=getCPT(m_nNodes,m_nNodes.length,values,order,m_bayesNet);    fi[iSepCPT]+=node.m_P[iNodeCPT];    int i=0;    values[i]++;    while (i < node.m_nNodes.length && values[i] == m_bayesNet.getCardinality(node.m_nNodes[i])) {      values[i]=0;      i++;      if (i < node.m_nNodes.length) {        values[i]++;      }    }  }  return fi;}  }
class C{  public void process(NodeWorkList workList){  assert !(start instanceof Invoke);  workList.addAll(start.successors());  for (  Node current : workList) {    assert current.isAlive();    if (current instanceof Invoke) {      nodeRelevances.put((FixedNode)current,computeInvokeRelevance((Invoke)current));      workList.addAll(current.successors());    } else     if (current instanceof LoopBeginNode) {      ((LoopBeginNode)current).loopExits().forEach(null);    } else     if (current instanceof LoopEndNode) {    } else     if (current instanceof LoopExitNode) {    } else     if (current instanceof FixedWithNextNode) {      workList.add(((FixedWithNextNode)current).next());    } else     if (current instanceof EndNode) {      workList.add(((EndNode)current).merge());    } else     if (current instanceof ControlSinkNode) {    } else     if (current instanceof ControlSplitNode) {      workList.addAll(current.successors());    } else {      assert false : current;    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element root;  String tagname;  doc=(Document)load("staff",false);  root=doc.getDocumentElement();  tagname=root.getTagName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgTagName","svg",tagname);  } else {    assertEquals("elementGetTagNameAssert","staff",tagname);  }}  }
class C{  private void determineCoverageGoals(){  List<InputCoverageTestFitness> goals=new InputCoverageFactory().getCoverageGoals();  for (  InputCoverageTestFitness goal : goals) {    inputCoverageMap.add(goal);    if (Properties.TEST_ARCHIVE)     TestsArchive.instance.addGoalToCover(this,goal);  }}  }
class C{  public static void unregisterFieldPrefix(final String prefix){  fieldPrefixes.remove(prefix);}  }
class C{  public static String quoteJavaIntArray(int[] array){  if (array == null) {    return "null";  }  StatementBuilder buff=new StatementBuilder("new int[]{");  for (  int a : array) {    buff.appendExceptFirst(", ");    buff.append(a);  }  return buff.append('}').toString();}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static void main(String[] args){  int N=Integer.parseInt(args[0]);  Complex[] x=new Complex[N];  for (int i=0; i < N; i++) {    x[i]=new Complex(i,0);    x[i]=new Complex(-2 * Math.random() + 1,0);  }  show(x,"x");  Complex[] y=fft(x);  show(y,"y = fft(x)");  Complex[] z=ifft(y);  show(z,"z = ifft(y)");  Complex[] c=cconvolve(x,x);  show(c,"c = cconvolve(x, x)");  Complex[] d=convolve(x,x);  show(d,"d = convolve(x, x)");}  }
class C{  public static double cdf(double x,double n){  return cdf(x,n / 2.0,2.0);}  }
class C{  public CSVParser(char separator,char quotechar,char escape,boolean strictQuotes,boolean ignoreLeadingWhiteSpace,boolean ignoreQuotations){  if (anyCharactersAreTheSame(separator,quotechar,escape)) {    throw new UnsupportedOperationException("The separator, quote, and escape characters must be different!");  }  if (separator == NULL_CHARACTER) {    throw new UnsupportedOperationException("The separator character must be defined!");  }  this.separator=separator;  this.quotechar=quotechar;  this.escape=escape;  this.strictQuotes=strictQuotes;  this.ignoreLeadingWhiteSpace=ignoreLeadingWhiteSpace;  this.ignoreQuotations=ignoreQuotations;}  }
class C{  public Object clone() throws CloneNotSupportedException {  return new IntVector(this);}  }
class C{  public static void generateCallerPathDiagrams(){  MySafeDelegator.generateCallerPathDiagrams();}  }
class C{  public static Pattern compile(String regex,String flags) throws PatternSyntaxException {  return new Pattern(regex,flags);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isMatchingEtag(final List<String> headerList,final String etag){  for (  String header : headerList) {    final String[] headerEtags=header.split(",");    for (    String s : headerEtags) {      s=s.trim();      if (s.equals(etag) || "*".equals(s)) {        return true;      }    }  }  return false;}  }
class C{  public final boolean containsKey(String name){  return mMap.containsKey(name);}  }
class C{  public String next(int n) throws JSONException {  if (n == 0) {    return "";  }  char[] chars=new char[n];  int pos=0;  while (pos < n) {    chars[pos]=this.next();    if (this.end()) {      throw this.syntaxError("Substring bounds error");    }    pos+=1;  }  return new String(chars);}  }
class C{  @Override protected void onNfcStateDisabled(){  toast(getString(R.string.nfcAvailableDisabled));}  }
class C{  private void tryToGetAudioFocus(){  if (mAudioFocus != AudioFocus.FOCUS && mAudioManager != null && (AudioManager.AUDIOFOCUS_REQUEST_GRANTED == mAudioManager.requestAudioFocus(this,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN))) {    mAudioFocus=AudioFocus.FOCUS;  }}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  public MarketingPermissionNotFoundException(String message){  super(message);}  }
class C{  public int binarySearchFromTo(char key,int from,int to){  return cern.colt.Sorting.binarySearchFromTo(this.elements,key,from,to);}  }
class C{  protected boolean parseAndBuildBindings(PossibleMatch possibleMatch,boolean mustResolve) throws CoreException {  if (this.progressMonitor != null && this.progressMonitor.isCanceled())   throw new OperationCanceledException();  try {    if (BasicSearchEngine.VERBOSE)     System.out.println("Parsing " + possibleMatch.openable.toStringWithAncestors());    this.parser.nodeSet=possibleMatch.nodeSet;    CompilationResult unitResult=new CompilationResult(possibleMatch,1,1,this.options.maxProblemsPerUnit);    CompilationUnitDeclaration parsedUnit=this.parser.dietParse(possibleMatch,unitResult);    if (parsedUnit != null) {      if (!parsedUnit.isEmpty()) {        if (mustResolve) {          this.lookupEnvironment.buildTypeBindings(parsedUnit,null);        }        if (hasAlreadyDefinedType(parsedUnit))         return false;        getMethodBodies(parsedUnit,possibleMatch.nodeSet);        if (this.patternLocator.mayBeGeneric && !mustResolve && possibleMatch.nodeSet.mustResolve) {          this.lookupEnvironment.buildTypeBindings(parsedUnit,null);        }      }      possibleMatch.parsedUnit=parsedUnit;      int size=this.matchesToProcess.length;      if (this.numberOfMatches == size)       System.arraycopy(this.matchesToProcess,0,this.matchesToProcess=new PossibleMatch[size == 0 ? 1 : size * 2],0,this.numberOfMatches);      this.matchesToProcess[this.numberOfMatches++]=possibleMatch;    }  }  finally {    this.parser.nodeSet=null;  }  return true;}  }
class C{  @NonNull public static String convertDiffToPrettyMinutesLeft(@NonNull Context context,@NonNull DateTime diffTime){  int minutes=diffTime.getMinuteOfHour();  if (minutes == 0) {    return context.getString(R.string.time_left_less_than_minute);  } else {    return context.getResources().getQuantityString(R.plurals.time_left_minutes,minutes,minutes);  }}  }
class C{  public Activity alwaysRunAfter(String beforeKey,String afterKey){  Activity before=get(beforeKey);  Activity after=get(afterKey);  if (before != null && after != null)   ActivityManager.alwaysScheduleAfter(before,after);  return after;}  }
class C{  public static double sumToDouble(float[] array){  double sum=0;  for (  float x : array) {    sum+=x;  }  return sum;}  }
class C{  public static RecordEventForInstanceE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  RecordEventForInstanceE object=new RecordEventForInstanceE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","recordEventForInstance").equals(reader.getName())) {          object.setRecordEventForInstance(RecordEventForInstance.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.195 -0400",hash_original_method="3154661078E59224754D0E69E10DDFB6",hash_generated_method="37574DF2C28BFC93DF4FFF3E9C9847C8") public static void writeLines(File file,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,null,lines,lineEnding,false);}  }
class C{  public void execute(){  Mmhc search;  int depth=getParams().getInt("depth",-1);  search=new Mmhc(getIndependenceTest(),getIndependenceTest().getDataSets().get(0));  search.setDepth(depth);  search.setKnowledge((IKnowledge)getParams().get("knowledge",new Knowledge2()));  Graph graph=search.search();  setResultGraph(graph);  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else {    GraphUtils.circleLayout(graph,200,200,150);  }}  }
class C{  public FileParsingTextSource(File data,TextSource fallback){  delegate=new StringParsingTextSource(StringIterable.fromFile(data),fallback);}  }
class C{  @Override public void readSettings(){  SharedPreferences sharedPreferences=this.getSharedPreferences(getString(R.string.sp_widget_clock_day_center_setting),Context.MODE_PRIVATE);  setLocation(new Location(sharedPreferences.getString(getString(R.string.key_location),getString(R.string.local)),null));  Location location=DatabaseHelper.getInstance(this).searchLocation(getLocation());  if (location != null) {    setLocation(location);  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  @SuppressWarnings("unchecked") private BufferOutput writeByClass(Class<?> type,Object object,BufferOutput output,TypeSerializer serializer){  if (whitelistRequired.get())   throw new SerializationException("cannot serialize unregistered type: " + type);  serializer.write(object,output.writeByte(Identifier.CLASS.code()).writeUTF8(type.getName()),this);  return output;}  }
class C{  public static boolean completed(Collection<ShardSnapshotStatus> shards){  for (  ShardSnapshotStatus status : shards) {    if (status.state().completed() == false) {      return false;    }  }  return true;}  }
class C{  private List<LatticeNode> levelUpLattice(List<LatticeNode> latticeNodes,List<ContextualDatum> data){  Stopwatch sw=Stopwatch.createUnstarted();  log.debug("\tSorting lattice nodes in level {} by their dimensions ",latticeNodes.get(0).dimensions.size());  sw.start();  List<LatticeNode> latticeNodeByDimensions=new ArrayList<>(latticeNodes);  Collections.sort(latticeNodeByDimensions,new LatticeNode.DimensionComparator());  sw.stop();  long sortingTime=sw.elapsed(TimeUnit.MILLISECONDS);  sw.reset();  log.debug("\tDone Sorting lattice nodes in level {} by their dimensions (duration: {}ms)",latticeNodes.get(0).dimensions.size(),sortingTime);  List<LatticeNode> result=new ArrayList<LatticeNode>();  log.debug("\tJoining lattice nodes in level {} by their dimensions ",latticeNodes.get(0).dimensions.size());  sw.start();  int numLatticeNodeJoins=0;  int numDenseContexts=0;  for (int i=0; i < latticeNodeByDimensions.size(); i++) {    for (int j=i + 1; j < latticeNodeByDimensions.size(); j++) {      LatticeNode s1=latticeNodeByDimensions.get(i);      LatticeNode s2=latticeNodeByDimensions.get(j);      LatticeNode joined=s1.join(s2,data,denseContextTau);      if (joined != null) {        numLatticeNodeJoins++;        if (joined.getDenseContexts().size() != 0) {          result.add(joined);          numDenseContexts+=joined.getDenseContexts().size();        }      }    }  }  sw.stop();  long joiningTime=sw.elapsed(TimeUnit.MILLISECONDS);  sw.reset();  log.debug("\tDone Joining lattice nodes in level {} by their dimensions (duration: {}ms)",latticeNodes.get(0).dimensions.size(),joiningTime);  log.debug("\tDone Joining lattice nodes in level {} by their dimensions," + " there are {} joins and {} dense contexts (average duration per lattice node pair join: {}ms)",latticeNodes.get(0).dimensions.size(),numLatticeNodeJoins,numDenseContexts,(numLatticeNodeJoins == 0) ? 0 : joiningTime / numLatticeNodeJoins);  return result;}  }
class C{  public String toString(){  return name;}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  boolean retValue=mGestureDetector.onTouchEvent(event);  int action=event.getAction();  if (action == MotionEvent.ACTION_UP) {    onUp();  } else   if (action == MotionEvent.ACTION_CANCEL) {    onCancel();  }  return retValue;}  }
class C{  @Override public void editingStopped(ChangeEvent e){  getModel().setValueAt(getCellEditor().getCellEditorValue(),getEditingRow(),getEditingColumn());}  }
class C{  void relocate(String relocatingNodeId,long expectedShardSize){  ensureNotFrozen();  version++;  assert state == ShardRoutingState.STARTED : "current shard has to be started in order to be relocated " + this;  state=ShardRoutingState.RELOCATING;  this.relocatingNodeId=relocatingNodeId;  this.allocationId=AllocationId.newRelocation(allocationId);  this.expectedShardSize=1;}  }
class C{  public static void main(String[] args){  String runNumber1="749";  String runNumber2="869";  String netfile=DgPaths.RUNBASE + "run" + runNumber1.toString()+ "/"+ runNumber1.toString()+ "."+ "output_network.xml.gz";  String plans1file=DgPaths.RUNBASE + "run" + runNumber1.toString()+ "/"+ runNumber1.toString()+ "."+ "output_plans.xml.gz";  String plans2file=DgPaths.RUNBASE + "run" + runNumber2.toString()+ "/"+ runNumber2.toString()+ "."+ "output_plans.xml.gz";  args=new String[4];  args[0]=netfile;  args[1]=plans1file;  args[2]=plans2file;  args[3]=DgPaths.RUNBASE + "run" + runNumber2.toString()+ "/"+ runNumber1.toString()+ "vs"+ runNumber2.toString()+ "plansCompare.txt";  DgAnalysisPopulation pop=new DgAnalysisPopulation();  DgAnalysisPopulationReader reader=new DgAnalysisPopulationReader();  reader.readAnalysisPopulation(pop,runNumber1,netfile,args[1]);  reader.readAnalysisPopulation(pop,runNumber2,netfile,args[2]);  if (args.length == 3) {    System.out.println(new PlanComparisonStringWriter(pop,runNumber1,runNumber2).getResult());  } else   if (args.length == 4) {    new PlanComparisonFileWriter(pop).write(args[3],runNumber1,runNumber2);  } else   printHelp();}  }
class C{  public void moveChild(ActionEvent actionEvent){  UIComponent destinationContainer=actionEvent.getComponent().getParent();  UIComponent viewRoot=FacesContext.getCurrentInstance().getViewRoot();  UIComponent moveableChild=destinationContainer.findComponent("outputText2");  if (moveableChild == null) {    moveableChild=viewRoot.findComponent("form1:outputText2");  }  if (moveableChild == null) {    moveableChild=viewRoot.findComponent("form1:subview1:outputText2");  }  if (moveableChild == null) {    moveableChild=viewRoot.findComponent("form1:subview2:outputText2");  }  if (moveableChild == null) {    moveableChild=viewRoot.findComponent("form1:subview2:subview2b:outputText2");  }  if (moveableChild != null) {    moveableChild.getParent().getChildren().remove(moveableChild);    destinationContainer.getChildren().add(0,moveableChild);  }}  }
class C{  public boolean isIndexed(){  return isIndexed;}  }
class C{  @Override public void populateFrame(Audio a){  if (!(a instanceof AudioSource)) {    throw new IllegalArgumentException(a.getSystemName() + " is not an AudioSource object");  }  super.populateFrame(a);  AudioSource s=(AudioSource)a;  AudioManager am=InstanceManager.getDefault(jmri.AudioManager.class);  String ab=s.getAssignedBufferName();  Audio b=am.getAudio(ab);  if (b != null) {    assignedBuffer.setSelectedItem(b.getUserName() == null ? ab : b.getUserName());  }  loopInfinite.setSelected((s.getMinLoops() == AudioSource.LOOP_CONTINUOUS));  loopMin.setValue(loopInfinite.isSelected() ? 0 : s.getMinLoops());  loopMax.setValue(loopInfinite.isSelected() ? 0 : s.getMaxLoops());  position.setValue(s.getPosition());  positionRelative.setSelected(s.isPositionRelative());  velocity.setValue(s.getVelocity());  gain.setValue(s.getGain());  pitch.setValue(s.getPitch());  refDistance.setValue(s.getReferenceDistance());  maxDistance.setValue(s.getMaximumDistance());  rollOffFactor.setValue(s.getRollOffFactor());  fadeInTime.setValue(s.getFadeIn());  fadeOutTime.setValue(s.getFadeOut());  this.newSource=false;}  }
class C{  public JSONObject(Map<String,Object> map){  this.map=new HashMap<String,Object>();  if (map != null) {    Iterator<Entry<String,Object>> i=map.entrySet().iterator();    while (i.hasNext()) {      Entry<String,Object> entry=i.next();      Object value=entry.getValue();      if (value != null) {        this.map.put(entry.getKey(),wrap(value));      }    }  }}  }
class C{  public String graph(FPTreeRoot tree){  StringBuffer text=new StringBuffer();  text.append("digraph FPTree {\n");  text.append("N0 [label=\"ROOT\"]\n");  tree.graphFPTree(text);  text.append("}\n");  return text.toString();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y;  double z=0;  int a, i;  int progress=0;  int numPoints=0;  double maxValue;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double noData=-32768;  double northing, easting;  String whatToInterpolate="";  String returnNumberToInterpolate="all points";  String suffix="";  boolean excludeNeverClassified=false;  boolean excludeUnclassified=false;  boolean excludeBareGround=false;  boolean excludeLowVegetation=false;  boolean excludeMediumVegetation=false;  boolean excludeHighVegetation=false;  boolean excludeBuilding=false;  boolean excludeLowPoint=false;  boolean excludeModelKeyPoint=false;  boolean excludeWater=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  suffix=args[1].trim();  whatToInterpolate=args[2].toLowerCase();  returnNumberToInterpolate=args[3].toLowerCase();  resolution=Double.parseDouble(args[4]);  double circleCircumscrbingGridCell=Math.sqrt(2) * resolution / 2.0;  excludeNeverClassified=Boolean.parseBoolean(args[5]);  excludeUnclassified=Boolean.parseBoolean(args[6]);  excludeBareGround=Boolean.parseBoolean(args[7]);  excludeLowVegetation=Boolean.parseBoolean(args[8]);  excludeMediumVegetation=Boolean.parseBoolean(args[9]);  excludeHighVegetation=Boolean.parseBoolean(args[10]);  excludeBuilding=Boolean.parseBoolean(args[11]);  excludeLowPoint=Boolean.parseBoolean(args[12]);  excludeModelKeyPoint=Boolean.parseBoolean(args[13]);  excludeWater=Boolean.parseBoolean(args[14]);  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    boolean[] classValuesToExclude=new boolean[32];    if (excludeNeverClassified) {      classValuesToExclude[0]=true;    }    if (excludeUnclassified) {      classValuesToExclude[1]=true;    }    if (excludeBareGround) {      classValuesToExclude[2]=true;    }    if (excludeLowVegetation) {      classValuesToExclude[3]=true;    }    if (excludeMediumVegetation) {      classValuesToExclude[4]=true;    }    if (excludeHighVegetation) {      classValuesToExclude[5]=true;    }    if (excludeBuilding) {      classValuesToExclude[6]=true;    }    if (excludeLowPoint) {      classValuesToExclude[7]=true;    }    if (excludeModelKeyPoint) {      classValuesToExclude[8]=true;    }    if (excludeWater) {      classValuesToExclude[9]=true;    }    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    PointRecord point;    PointRecColours pointColours;    double[] entry;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ " Reading point data:",progress);      numPointsInFile=las.getNumPointRecords();      numPoints=0;      for (a=0; a < numPointsInFile; a++) {        point=las.getPointRecord(a);        if (returnNumberToInterpolate.equals("all points")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            numPoints++;          }        } else         if (returnNumberToInterpolate.equals("first return")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            numPoints++;          }        } else {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            numPoints++;          }        }      }      minX=Double.POSITIVE_INFINITY;      maxX=Double.NEGATIVE_INFINITY;      minY=Double.POSITIVE_INFINITY;      maxY=Double.NEGATIVE_INFINITY;      KdTree<Double> pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(numPoints));      if (returnNumberToInterpolate.equals("all points")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else       if (returnNumberToInterpolate.equals("first return")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      }      outputHeader=pointFiles[j].replace(".las",suffix + ".dep");      if ((new File(outputHeader)).exists()) {        (new File(outputHeader)).delete();        (new File(outputHeader.replace(".dep",".tas"))).delete();      }      west=minX - 0.5 * resolution;      north=maxY + 0.5 * resolution;      nrows=(int)(Math.ceil((north - minY) / resolution));      ncols=(int)(Math.ceil((maxX - west) / resolution));      south=north - nrows * resolution;      east=west + ncols * resolution;      fw=new FileWriter(outputHeader,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="Min:\t" + Double.toString(Integer.MAX_VALUE);      out.println(str1);      str1="Max:\t" + Double.toString(Integer.MIN_VALUE);      out.println(str1);      str1="North:\t" + Double.toString(north);      out.println(str1);      str1="South:\t" + Double.toString(south);      out.println(str1);      str1="East:\t" + Double.toString(east);      out.println(str1);      str1="West:\t" + Double.toString(west);      out.println(str1);      str1="Cols:\t" + Integer.toString(ncols);      out.println(str1);      str1="Rows:\t" + Integer.toString(nrows);      out.println(str1);      str1="Data Type:\t" + "float";      out.println(str1);      str1="Z Units:\t" + "not specified";      out.println(str1);      str1="XY Units:\t" + "not specified";      out.println(str1);      str1="Projection:\t" + "not specified";      out.println(str1);      if (!whatToInterpolate.equals("rgb data")) {        str1="Data Scale:\tcontinuous";      } else {        str1="Data Scale:\trgb";      }      out.println(str1);      if (whatToInterpolate.equals("rgb data")) {        str1="Preferred Palette:\t" + "rgb.pal";      } else       if (whatToInterpolate.equals("intensity")) {        str1="Preferred Palette:\t" + "grey.pal";      } else {        str1="Preferred Palette:\t" + "spectrum.pal";      }      out.println(str1);      str1="NoData:\t" + noData;      out.println(str1);      if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {        str1="Byte Order:\t" + "LITTLE_ENDIAN";      } else {        str1="Byte Order:\t" + "BIG_ENDIAN";      }      out.println(str1);      out.close();      WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");      double halfResolution=resolution / 2;      for (row=0; row < nrows; row++) {        for (col=0; col < ncols; col++) {          easting=(col * resolution) + (west + halfResolution);          northing=(north - halfResolution) - (row * resolution);          entry=new double[]{northing,easting};          results=pointsTree.neighborsWithinRange(entry,circleCircumscrbingGridCell);          if (!results.isEmpty()) {            maxValue=Float.NEGATIVE_INFINITY;            for (i=0; i < results.size(); i++) {              z=results.get(i).value;              if (z > maxValue) {                maxValue=z;              }              ;            }            image.setValue(row,col,maxValue);          } else {            image.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nrows - 1));        updateProgress("Interpolating point data:",progress);      }      image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      image.addMetadataEntry("Created on " + new Date());      image.close();    }    returnData(pointFiles[0].replace(".las",suffix + ".dep"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private boolean maybeDisableSync(){  if (mSyncEverything.isChecked() || !getSelectedModelTypes().isEmpty() || !canDisableSync()) {    return false;  }  SyncController.get(getActivity()).stop();  mSyncSwitchPreference.setChecked(false);  updateSyncStateFromSwitch();  return true;}  }
class C{  public boolean isAfterLast(){  return pos >= lcText.length;}  }
class C{  public StreamingTemplateEngine(){  this(StreamingTemplate.class.getClassLoader());}  }
class C{  public void writeTo(DataOutput out) throws IOException {  out.writeInt(typeId);  U.writeString(out,typeName);  if (fields == null)   out.writeInt(-1); else {    out.writeInt(fields.size());    for (    Map.Entry<String,Integer> fieldEntry : fields.entrySet()) {      U.writeString(out,fieldEntry.getKey());      out.writeInt(fieldEntry.getValue());    }  }  U.writeString(out,affKeyFieldName);  if (schemas == null)   out.writeInt(-1); else {    out.writeInt(schemas.size());    for (    BinarySchema schema : schemas)     schema.writeTo(out);  }  out.writeBoolean(isEnum);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.399 -0500",hash_original_method="76A5C02B3DC683D5BF99D1052171A66C",hash_generated_method="09185FFE4AB317576453852013B0DBCE") private void parseStale(String value){  if (value != null) {    if (value.equalsIgnoreCase("true")) {      mStale=true;    }  }}  }
class C{  public PacketExtension parseExtension(XmlPullParser parser) throws Exception {  Map<String,List<String>> metaData=MetaDataUtils.parseMetaData(parser);  return new MetaData(metaData);}  }
class C{  public boolean evaluate(InternalContextAdapter context) throws MethodInvocationException {  Object value=execute(null,context);  if (value == null) {    return false;  } else   if (value instanceof Boolean) {    if (((Boolean)value).booleanValue())     return true; else     return false;  } else   return true;}  }
class C{  public void playSequentially(Animator... items){  if (items != null) {    mNeedsSort=true;    if (items.length == 1) {      play(items[0]);    } else {      for (int i=0; i < items.length - 1; ++i) {        play(items[i]).before(items[i + 1]);      }    }  }}  }
class C{  public InlineQueryResultVideo.InlineQueryResultVideoBuilder thumbUrl(URL thumbUrl){  this.thumb_url=thumbUrl;  return this;}  }
class C{  protected void createMinimalGeometry(DrawContext dc,ShapeData shapeData){  this.computeReferencePoint(dc.getTerrain(),shapeData);  if (shapeData.getReferencePoint() == null)   return;  this.computeBoundaryVertices(dc.getTerrain(),shapeData.getOuterBoundaryInfo(),shapeData.getReferencePoint());  if (this.getExtent() == null || this.getAltitudeMode() != WorldWind.ABSOLUTE)   shapeData.setExtent(this.computeExtent(shapeData.getOuterBoundaryInfo(),shapeData.getReferencePoint()));  shapeData.setEyeDistance(this.computeEyeDistance(dc,shapeData));  shapeData.setGlobeStateKey(dc.getGlobe().getGlobeStateKey(dc));  shapeData.setVerticalExaggeration(dc.getVerticalExaggeration());}  }
class C{  private void initH2Console(ServletContext servletContext){  log.debug("Initialize H2 console");  ServletRegistration.Dynamic h2ConsoleServlet=servletContext.addServlet("H2Console",new org.h2.server.web.WebServlet());  h2ConsoleServlet.addMapping("/h2-console/*");  h2ConsoleServlet.setInitParameter("-properties","src/main/resources/");  h2ConsoleServlet.setLoadOnStartup(1);}  }
class C{  public static <A extends CommonAllocator<A>,ValueT>ValueT fromMemBufferHolder(MemBufferHolder<A> mbh) throws IOException, ClassNotFoundException {  return toObject(mbh.get());}  }
class C{  public void testSkipAndLimitPlan() throws Exception {  OracleCollection col=dbAdmin.createCollection("testSkipAndLimitPlan");  OracleDocument d;  for (int i=0; i < 50; i++) {    d=db.createDocumentFromString("{\"num\" : " + i + "}");    col.insert(d);  }  OracleOperationBuilderImpl obuilder=(OracleOperationBuilderImpl)col.find().skip(10).limit(10);  String plan=obuilder.explainPlan("basic");  checkPaginationPlan(plan);}  }
class C{  private void updatePreviewAndConflicts(){  if (myButton == -1 || myModifiers == -1) {    return;  }  myTarConflicts.setText(null);  myLblPreview.setText(KeymapUtil.getMouseShortcutText(myButton,myModifiers,getClickCount()) + " ");  final MouseShortcut mouseShortcut=new MouseShortcut(myButton,myModifiers,getClickCount());  if (myButton > 3 && getClickCount() == 2) {    myTarConflicts.setForeground(JBColor.RED);    myTarConflicts.setText(KeyMapBundle.message("mouse.shortcut.dialog.side.buttons.with.double.click",myButton));    return;  }  StringBuilder buffer=new StringBuilder();  String[] actionIds=myKeymap.getActionIds(mouseShortcut);  for (  String actionId : actionIds) {    if (actionId.equals(myActionId)) {      continue;    }    String actionPath=myMainGroup.getActionQualifiedPath(actionId);    if (actionPath == null) {      continue;    }    Shortcut[] shortcuts=myKeymap.getShortcuts(actionId);    for (    Shortcut shortcut1 : shortcuts) {      if (!(shortcut1 instanceof MouseShortcut)) {        continue;      }      MouseShortcut shortcut=(MouseShortcut)shortcut1;      if (shortcut.getButton() != mouseShortcut.getButton() || shortcut.getModifiers() != mouseShortcut.getModifiers()) {        continue;      }      if (buffer.length() > 1) {        buffer.append('\n');      }      buffer.append('[');      buffer.append(actionPath);      buffer.append(']');      break;    }  }  if (buffer.length() == 0) {    myTarConflicts.setForeground(UIUtil.getTextAreaForeground());    myTarConflicts.setText(KeyMapBundle.message("mouse.shortcut.dialog.no.conflicts.area"));  } else {    myTarConflicts.setForeground(JBColor.RED);    myTarConflicts.setText(KeyMapBundle.message("mouse.shortcut.dialog.assigned.to.area",buffer.toString()));  }}  }
class C{  @Override protected void installListeners(){  super.installListeners();  splitPane.addPropertyChangeListener(this);}  }
class C{  public void writeByte(byte b,boolean append){  writeByteArray(new byte[]{b},append);}  }
class C{  private void put122(final int b,final int s1,final int s2){  pool.put12(b,s1).putShort(s2);}  }
class C{  @Reference(title="Algorithm AS 91: The percentage points of the $\\chi^2$ distribution",authors="D.J. Best, D. E. Roberts",booktitle="Journal of the Royal Statistical Society. Series C (Applied Statistics)") public static double quantile(double p,double k,double theta){  final double EPS2=5e-7;  final int MAXIT=1000;  if (Double.isNaN(p) || Double.isNaN(k) || Double.isNaN(theta)) {    return Double.NaN;  }  if (p <= 0) {    return 0;  }  if (p >= 1) {    return Double.POSITIVE_INFINITY;  }  if (k < 0 || theta <= 0) {    return Double.NaN;  }  if (k == 0) {    return 0.;  }  int max_newton_iterations=1;  if (k < 1e-10) {    max_newton_iterations=7;  }  final double g=logGamma(k);  double ch=chisquaredProbitApproximation(p,2 * k,g);  chisq: {    if (Double.isInfinite(ch)) {      max_newton_iterations=0;      break chisq;    }    if (ch < EPS2) {      max_newton_iterations=20;      break chisq;    }    if (p > 1 - 1e-14 || p < 1e-100) {      max_newton_iterations=20;      break chisq;    }    final double c=k - 1;    final double ch0=ch;    for (int i=1; i <= MAXIT; i++) {      final double q=ch;      final double p1=0.5 * ch;      final double p2=p - regularizedGammaP(k,p1);      if (Double.isInfinite(p2) || ch <= 0) {        ch=ch0;        max_newton_iterations=27;        break chisq;      }{        final double t=p2 * Math.exp(k * MathUtil.LOG2 + g + p1 - c * Math.log(ch));        final double b=t / ch;        final double a=0.5 * t - b * c;        final double s1=(210. + a * (140. + a * (105. + a * (84. + a * (70. + 60. * a))))) / 420.;        final double s2=(420. + a * (735. + a * (966. + a * (1141. + 1278 * a)))) / 2520.;        final double s3=(210. + a * (462. + a * (707. + 932. * a))) / 2520.;        final double s4=(252. + a * (672. + 1182. * a) + c * (294. + a * (889. + 1740. * a))) / 5040.;        final double s5=(84. + 2264. * a + c * (1175. + 606. * a)) / 2520.;        final double s6=(120. + c * (346. + 127. * c)) / 5040.;        ch+=t * (1 + 0.5 * t * s1 - b * c * (s1 - b * (s2 - b * (s3 - b * (s4 - b * (s5 - b * s6))))));      }      if (Math.abs(q - ch) < EPS2 * ch) {        break chisq;      }      if (Math.abs(q - ch) > 0.1 * Math.abs(ch)) {        ch=((ch < q) ? 0.9 : 1.1) * q;      }    }    LoggingUtil.warning("No convergence in AS 91 Gamma probit.");  }  double x=0.5 * ch / theta;  if (max_newton_iterations > 0) {    x=gammaQuantileNewtonRefinement(Math.log(p),k,theta,max_newton_iterations,x);  }  return x;}  }
class C{  public double[] computeLocalActiveOfPreviousObservations() throws Exception {  return computeLocalActiveUsingPreviousObservations(null,true);}  }
class C{  boolean isTargetItemEnabled(){  if (target == null) {    return false;  }  return AWTAccessor.getMenuItemAccessor().isItemEnabled(target);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("xml","2.0");  assertTrue("throw_True",state);}  }
class C{  public String sqlTypeToString(int sqlType){  return sqlTypes.get(sqlType);}  }
class C{  private long hash(final char[] a,final int l,final int k){  final int[] w=weight[k];  long h=init[k];  int i=l;  while (i-- != 0)   h^=(h << 5) + a[i] * w[i % NUMBER_OF_WEIGHTS] + (h >>> 2);  return (h & 0x7FFFFFFFFFFFFFFFL) % m;}  }
class C{  private Span createSpan(HttpServletRequest request,boolean skip,Span spanFromRequest,String name){  if (spanFromRequest != null) {    if (log.isDebugEnabled()) {      log.debug("Span has already been created - continuing with the previous one");    }    return spanFromRequest;  }  Span parent=this.spanExtractor.joinTrace(request);  if (parent != null) {    if (log.isDebugEnabled()) {      log.debug("Found a parent span " + parent + " in the request");    }    addRequestTagsForParentSpan(request,parent);    spanFromRequest=parent;    this.tracer.continueSpan(spanFromRequest);    if (parent.isRemote()) {      parent.logEvent(Span.SERVER_RECV);    }    request.setAttribute(TRACE_REQUEST_ATTR,spanFromRequest);    if (log.isDebugEnabled()) {      log.debug("Parent span is " + parent + "");    }  } else {    if (skip) {      spanFromRequest=this.tracer.createSpan(name,NeverSampler.INSTANCE);    } else {      spanFromRequest=this.tracer.createSpan(name);    }    spanFromRequest.logEvent(Span.SERVER_RECV);    request.setAttribute(TRACE_REQUEST_ATTR,spanFromRequest);    if (log.isDebugEnabled()) {      log.debug("No parent span present - creating a new span");    }  }  return spanFromRequest;}  }
class C{  private static void appendFloatType(StringBuilder sb){  sb.append("FLOAT");}  }
class C{  Tokenizer(String data){  super(data);}  }
class C{  private void delete(IgniteUuid trashId){  IgfsEntryInfo info=null;  try {    info=meta.info(trashId);  } catch (  ClusterTopologyServerNotFoundException ignore) {  }catch (  IgniteCheckedException e) {    U.warn(log,"Cannot obtain trash directory info (is node stopping?)");    if (log.isDebugEnabled())     U.error(log,"Cannot obtain trash directory info.",e);  }  if (info != null) {    for (    Map.Entry<String,IgfsListingEntry> entry : info.listing().entrySet()) {      IgniteUuid fileId=entry.getValue().fileId();      if (log.isDebugEnabled())       log.debug("Deleting IGFS trash entry [name=" + entry.getKey() + ", fileId="+ fileId+ ']');      try {        if (!cancelled) {          if (delete(trashId,entry.getKey(),fileId)) {            if (log.isDebugEnabled())             log.debug("Sending delete confirmation message [name=" + entry.getKey() + ", fileId="+ fileId+ ']');          }        } else         break;      } catch (      IgniteInterruptedCheckedException ignored) {      }catch (      IgniteCheckedException e) {        U.error(log,"Failed to delete entry from the trash directory: " + entry.getKey(),e);      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:29.002 -0500",hash_original_method="328DA368C3B0C5FF79EC2B4ACE66A1A9",hash_generated_method="C9E59CBA897C530A6A55F5DD7BEEA99A") protected void fireRetransmissionTimer(){  try {    if (this.getState() == null || !this.isMapped)     return;    boolean inv=isInviteTransaction();    TransactionState s=this.getState();    if ((inv && TransactionState.CALLING == s) || (!inv && (TransactionState.TRYING == s || TransactionState.PROCEEDING == s))) {      if (lastRequest != null) {        if (sipStack.generateTimeStampHeader && lastRequest.getHeader(TimeStampHeader.NAME) != null) {          long milisec=System.currentTimeMillis();          TimeStamp timeStamp=new TimeStamp();          try {            timeStamp.setTimeStamp(milisec);          } catch (          InvalidArgumentException ex) {            InternalErrorHandler.handleException(ex);          }          lastRequest.setHeader(timeStamp);        }        super.sendMessage(lastRequest);        if (this.notifyOnRetransmit) {          TimeoutEvent txTimeout=new TimeoutEvent(this.getSipProvider(),this,Timeout.RETRANSMIT);          this.getSipProvider().handleEvent(txTimeout,this);        }        if (this.timeoutIfStillInCallingState && this.getState() == TransactionState.CALLING) {          this.callingStateTimeoutCount--;          if (callingStateTimeoutCount == 0) {            TimeoutEvent timeoutEvent=new TimeoutEvent(this.getSipProvider(),this,Timeout.RETRANSMIT);            this.getSipProvider().handleEvent(timeoutEvent,this);            this.timeoutIfStillInCallingState=false;          }        }      }    }  } catch (  IOException e) {    this.raiseIOExceptionEvent();    raiseErrorEvent(SIPTransactionErrorEvent.TRANSPORT_ERROR);  }}  }
class C{  public static PatternNotExpr not(PatternExpr subexpression){  return new PatternNotExpr(subexpression);}  }
class C{  private void handleMethodExitNode(CCFGNode node,CCFGMethodEntryNode investigatedMethod,Set<Map<String,VariableDefinition>> activeDefs,Set<BytecodeInstruction> freeUses){  CCFGMethodExitNode exitNode=(CCFGMethodExitNode)node;  if (exitNode.isExitOfMethodEntry(investigatedMethod)) {    rememberActiveDefs(exitNode.getMethod(),activeDefs);    rememberFreeUses(exitNode.getMethod(),freeUses);  }}  }
class C{  protected Node export(Node n,AbstractDocument d){  GenericProcessingInstruction p;  p=(GenericProcessingInstruction)super.export(n,d);  p.setTarget(getTarget());  return p;}  }
class C{  public static TransitSchedule mergeEqualRouteProfiles(TransitSchedule schedule,String outputDirectory){  return new TransitScheduleSimplifier().mergeEqualTransitRoutes(schedule,outputDirectory);}  }
class C{  protected void sendIntensity(double intensity){  if (log.isDebugEnabled()) {    log.debug("sendIntensity(" + intensity + ")"+ " lastOutputStep: "+ lastOutputStep+ " maxDimStep: "+ maxDimStep);  }  int newStep=(int)Math.round(intensity * maxDimStep);  if ((newStep < 0) || (newStep > maxDimStep)) {    log.error("newStep wrong: " + newStep + " intensity: "+ intensity);  }  if (newStep == lastOutputStep) {    if (log.isDebugEnabled()) {      log.debug("intensity " + intensity + " within current step, return");    }    return;  }  if (log.isDebugEnabled()) {    log.debug("function set Intensity " + intensity);  }  InsteonSequence out=new InsteonSequence();  out.addFunction(idhighbyte,idmiddlebyte,idlowbyte,Constants.FUNCTION_REQ_STD,(Constants.FLAG_STD | (maxHops << Constants.FLAG_SHIFT_HOPSLEFT) | maxHops),Constants.CMD_LIGHT_CHG,newStep);  tc.sendInsteonSequence(out,null);  if (log.isDebugEnabled()) {    log.debug("sendIntensity(" + intensity + ") addr "+ idhighbyte+ idmiddlebyte+ idlowbyte+ " newStep "+ newStep);  }  lastOutputStep=newStep;}  }
class C{  public static void organizeDistribution(final Object[] objs,final RandomChoiceChooserD chooser){  organizeDistribution(objs,chooser,false);}  }
class C{  @Override public void afterLoad(TermsEnum termsEnum,long actualUsed){  assert termsEnum instanceof RamAccountingTermsEnum;  long estimatedBytes=((RamAccountingTermsEnum)termsEnum).getTotalBytes();  breaker.addWithoutBreaking(-(estimatedBytes - actualUsed));}  }
class C{  @Override public String toString(){  return this.area + "/" + this.aisle+ "/"+ this.x+ "/"+ this.y+ "/"+ this.z;}  }
class C{  public void addToStackIgnoreList(String line){  addToList(stackIgnoreList,line);}  }
class C{  String isResizingRequired(PropertyHandler paramHandler) throws Exception {  String countCPU=paramHandler.getCountCPU();  try {    Integer.valueOf(countCPU);  } catch (  NumberFormatException e) {    return null;  }  String masterTemplateId=paramHandler.getMasterTemplateId();  String slaveTemplateId=paramHandler.getSlaveTemplateId();  VSystemConfiguration configuration=getVSystemConfiguration(paramHandler);  for (  VServerConfiguration server : configuration.getVServers()) {    String existingCPU=server.getNumOfCPU();    String diskImageId=server.getDiskImageId();    if (existingCPU != null && !existingCPU.equals(countCPU)) {      if (diskImageId != null && (diskImageId.equals(masterTemplateId) || diskImageId.equals(slaveTemplateId))) {        logger.debug("Server " + server.getServerId() + " to be resized to CPU# "+ countCPU);        SubPropertyHandler subPropertyHandler=paramHandler.getTemporaryVserver(server);        subPropertyHandler.setCountCPU(countCPU);        subPropertyHandler.setState(FlowState.VSERVER_MODIFICATION_REQUESTED);        subPropertyHandler.setOperation(Operation.VSERVER_MODIFICATION);        paramHandler.setState(FlowState.VSYSTEM_RESIZE_VSERVERS);        return server.getServerId();      }    }  }  return null;}  }
class C{  @Override protected void onFinishInflate(){  final int childCount=getChildCount();  if (childCount > 2) {    throw new IllegalStateException("PtrFrameLayout only can host 2 elements");  } else   if (childCount == 2) {    if (mHeaderId != 0 && mHeaderView == null) {      mHeaderView=findViewById(mHeaderId);    }    if (mContainerId != 0 && mContent == null) {      mContent=findViewById(mContainerId);    }    if (mContent == null || mHeaderView == null) {      View child1=getChildAt(0);      View child2=getChildAt(1);      if (child1 instanceof PtrUIHandler) {        mHeaderView=child1;        mContent=child2;      } else       if (child2 instanceof PtrUIHandler) {        mHeaderView=child2;        mContent=child1;      } else {        if (mContent == null && mHeaderView == null) {          mHeaderView=child1;          mContent=child2;        } else {          if (mHeaderView == null) {            mHeaderView=mContent == child1 ? child2 : child1;          } else {            mContent=mHeaderView == child1 ? child2 : child1;          }        }      }    }  } else   if (childCount == 1) {    mContent=getChildAt(0);  } else {    TextView errorView=new TextView(getContext());    errorView.setClickable(true);    errorView.setTextColor(0xffff6600);    errorView.setGravity(Gravity.CENTER);    errorView.setTextSize(20);    errorView.setText("The content view in PtrFrameLayout is empty. Do you forget to specify its id in xml layout file?");    mContent=errorView;    addView(mContent);  }  if (mHeaderView != null) {    mHeaderView.bringToFront();  }  super.onFinishInflate();}  }
class C{  public void undoUpdate() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public double calculateLogLikelihood(){  double logLikelihood;  if (!cacheBranches)   logLikelihood=traitLogLikelihood(null,treeModel.getRoot()); else   logLikelihood=traitCachedLogLikelihood(null,treeModel.getRoot());  if (logLikelihood > maxLogLikelihood) {    maxLogLikelihood=logLikelihood;  }  return logLikelihood;}  }
class C{  public void dumpUrl(Path webGraphDb,String url) throws IOException {  fs=FileSystem.get(getConf());  nodeReaders=MapFileOutputFormat.getReaders(fs,new Path(webGraphDb,WebGraph.NODE_DIR),getConf());  Text key=new Text(url);  Node node=new Node();  MapFileOutputFormat.getEntry(nodeReaders,new HashPartitioner<Text,Node>(),key,node);  System.out.println(url + ":");  System.out.println("  inlink score: " + node.getInlinkScore());  System.out.println("  outlink score: " + node.getOutlinkScore());  System.out.println("  num inlinks: " + node.getNumInlinks());  System.out.println("  num outlinks: " + node.getNumOutlinks());  FSUtils.closeReaders(nodeReaders);}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe complexity constant C.\n" + "\t(default 1)","C",1,"-C <double>"));  result.addElement(new Option("\tWhether to 0=normalize/1=standardize/2=neither.\n" + "\t(default 0=normalize)","N",1,"-N"));  result.addElement(new Option("\tOptimizer class used for solving quadratic optimization problem\n" + "\t(default " + RegSMOImproved.class.getName() + ")","I",1,"-I <classname and parameters>"));  result.addElement(new Option("\tThe Kernel to use.\n" + "\t(default: weka.classifiers.functions.supportVector.PolyKernel)","K",1,"-K <classname and parameters>"));  result.addAll(Collections.list(super.listOptions()));  result.addElement(new Option("","",0,"\nOptions specific to optimizer ('-I') " + getRegOptimizer().getClass().getName() + ":"));  result.addAll(Collections.list(((OptionHandler)getRegOptimizer()).listOptions()));  result.addElement(new Option("","",0,"\nOptions specific to kernel ('-K') " + getKernel().getClass().getName() + ":"));  result.addAll(Collections.list(((OptionHandler)getKernel()).listOptions()));  return result.elements();}  }
class C{  protected void addOneCandidateCluster(LinkedList<Set<V>> candidates,Map<V,double[]> voltage_ranks){  try {    List<Map<V,double[]>> clusters;    clusters=new ArrayList<Map<V,double[]>>(kmc.cluster(voltage_ranks,2));    if (clusters.get(0).size() < clusters.get(1).size())     candidates.add(clusters.get(0).keySet()); else     candidates.add(clusters.get(1).keySet());  } catch (  NotEnoughClustersException e) {  }}  }
class C{  public ObjectFactory(){}  }
class C{  public static Boolean checkIsReadOnly(){  String state=Environment.getExternalStorageState();  if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {    return true;  } else {    return false;  }}  }
class C{  public boolean removeNeighbours(List<Triangle> triangles){  return getNeighbours().removeAll(triangles);}  }
class C{  public DefaultPrivateData(String elementName,String namespace){  this.elementName=elementName;  this.namespace=namespace;}  }
class C{  public JsonArray add(JsonValue value){  if (value == null) {    throw new NullPointerException("value is null");  }  values.add(value);  return this;}  }
class C{  @Override public void visitJumpInsn(final int opcode,final Label lbl){  super.visitJumpInsn(opcode,lbl);  LabelNode ln=((JumpInsnNode)instructions.getLast()).label;  if (opcode == JSR && !subroutineHeads.containsKey(ln)) {    subroutineHeads.put(ln,new BitSet());  }}  }
class C{  public Coordinate transform(Coordinate src,Coordinate dest){  double xp=m00 * src.x + m01 * src.y + m02;  double yp=m10 * src.x + m11 * src.y + m12;  dest.x=xp;  dest.y=yp;  return dest;}  }
class C{  public ByteFifoBuffer(int len){  array=new byte[len];}  }
class C{  public void not(){  mv.visitInsn(Opcodes.ICONST_1);  mv.visitInsn(Opcodes.IXOR);}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  public FunctionBlockPropertySource createFunctionBlockPropertySource(){  FunctionBlockPropertySourceImpl functionBlockPropertySource=new FunctionBlockPropertySourceImpl();  return functionBlockPropertySource;}  }
class C{  public BezierScaleHandle(BezierFigure owner){  super(owner);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:30.761 -0500",hash_original_method="224D5C409E7F86CE5414891CFB70A981",hash_generated_method="178E85B2327E05C49F9EEB00F2AE391D") private int regCodeToServiceState(int code){switch (code) {case 0:case 2:case 3:case 4:case 10:case 12:case 13:case 14:    return ServiceState.STATE_OUT_OF_SERVICE;case 1:  return ServiceState.STATE_IN_SERVICE;case 5:return ServiceState.STATE_IN_SERVICE;default :loge("regCodeToServiceState: unexpected service state " + code);return ServiceState.STATE_OUT_OF_SERVICE;}}  }
class C{  public GuildCreateHandler(ImplDiscordAPI api){  super(api,true,"GUILD_CREATE");}  }
class C{  public String seedTipText(){  return "The seed to use for randomization.";}  }
class C{  public static void main(String... args) throws Exception {  new TestPerformance().test(args);}  }
class C{  public void update(Graphics g){  paint(g);}  }
class C{  public ClassDefinition makeClassDefinition(Environment toplevelEnv,long where,IdentifierToken name,String doc,int modifiers,IdentifierToken superClass,IdentifierToken interfaces[],ClassDefinition outerClass){  Identifier nm=name.getName();  long nmpos=name.getWhere();  Identifier pkgNm;  String mangledName=null;  ClassDefinition localContextClass=null;  Identifier localName=null;  if (nm.isQualified() || nm.isInner()) {    pkgNm=nm;  } else   if ((modifiers & (M_LOCAL | M_ANONYMOUS)) != 0) {    localContextClass=outerClass.getTopClass();    for (int i=1; ; i++) {      mangledName=i + (nm.equals(idNull) ? "" : SIG_INNERCLASS + nm);      if (localContextClass.getLocalClass(mangledName) == null) {        break;      }    }    Identifier outerNm=localContextClass.getName();    pkgNm=Identifier.lookupInner(outerNm,Identifier.lookup(mangledName));    if ((modifiers & M_ANONYMOUS) != 0) {      localName=idNull;    } else {      localName=nm;    }  } else   if (outerClass != null) {    pkgNm=Identifier.lookupInner(outerClass.getName(),nm);  } else {    pkgNm=nm;  }  ClassDeclaration c=toplevelEnv.getClassDeclaration(pkgNm);  if (c.isDefined()) {    toplevelEnv.error(nmpos,"class.multidef",c.getName(),c.getClassDefinition().getSource());    c=new ClassDeclaration(pkgNm);  }  if (superClass == null && !pkgNm.equals(idJavaLangObject)) {    superClass=new IdentifierToken(idJavaLangObject);  }  ClassDefinition sourceClass=new SourceClass(toplevelEnv,where,c,doc,modifiers,superClass,interfaces,(SourceClass)outerClass,localName);  if (outerClass != null) {    outerClass.addMember(toplevelEnv,new SourceMember(sourceClass));    if ((modifiers & (M_LOCAL | M_ANONYMOUS)) != 0) {      localContextClass.addLocalClass(sourceClass,mangledName);    }  }  return sourceClass;}  }
class C{  protected boolean isExpired(String url){  return getFromCache(url) == null;}  }
class C{  public ICalWriter(File file,boolean append,ICalVersion targetVersion) throws IOException {  this((targetVersion == ICalVersion.V1_0) ? new FileWriter(file,append) : new Utf8Writer(file,append),targetVersion);}  }
class C{  public IIRFilter(AnalogPrototype baseFilter,PassbandType type,double f1,double f2,double delta){  AnalogPrototype prototype;switch (type) {case LOWPASS:    prototype=baseFilter.lptolp(warp(f2,delta));  break;case BANDPASS:prototype=baseFilter.lptobp(warp(f1,delta),warp(f2,delta));break;case HIGHPASS:prototype=baseFilter.lptohp(warp(f1,delta));break;default :throw new IllegalStateException("Undefined passband type");}double[] tn=new double[2];double[] td=new double[2];tn[0]=1.0;tn[1]=-1.0;td[0]=1.0;td[1]=1.0;Rational S=new Rational(tn,td);T=new Rational(1.0);sections=new ArrayList<SecondOrderSection>();for (int i=0; i < prototype.nSections(); i++) {Rational R=prototype.getSection(i).map(S);T.timesEquals(R);double[] cn=R.numerator().coefficients();double[] cd=R.denominator().coefficients();double s=1.0;if (cd[0] != 0.0) s=cd[0];double b0=cn[0] / s;double b1=0.0;if (cn.length >= 2) b1=cn[1] / s;double b2=0.0;if (cn.length >= 3) b2=cn[2] / s;double a1=0.0;if (cd.length >= 2) a1=cd[1] / s;double a2=0.0;if (cd.length >= 3) a2=cd[2] / s;sections.add(new SecondOrderSection(b0,b1,b2,a1,a2));}}  }
class C{  @Override public boolean equals(Object o){  if (!super.equals(o))   return false;  SpatialDistanceQuery other=(SpatialDistanceQuery)o;  return this.latCenter == other.latCenter && this.lonCenter == other.lonCenter && this.latMin == other.latMin && this.latMax == other.latMax && this.lonMin == other.lonMin && this.lonMax == other.lonMax && this.lon2Min == other.lon2Min && this.lon2Max == other.lon2Max && this.dist == other.dist && this.planetRadius == other.planetRadius && this.calcDist == other.calcDist && this.lonSource.equals(other.lonSource) && this.latSource.equals(other.latSource) && this.getBoost() == other.getBoost();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.978 -0500",hash_original_method="5D4518F727B3B1C5CE98EBC039D9AF6B",hash_generated_method="5086D8F7DF5A22081C0AACC30CB43003") final long now(){  return System.nanoTime();}  }
class C{  public static byte[] readFileToByteArray(File file) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toByteArray(in,file.length());  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String pluggy=getCapDevInput(stack).getTuningPlugin();  if (pluggy != null && pluggy.length() > 0)   return SFIRTuner.getPrettyNameForFile(pluggy); else   return "";}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void UnaryExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  boolean isNeg=false;  if (m_tokenChar == '-') {    nextToken();    appendOp(2,OpCodes.OP_NEG);    isNeg=true;  }  UnionExpr();  if (isNeg)   m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public void addSubject(Subject subject){  getSubjects().add(subject);}  }
class C{  public int indexOf(Object obj){  final List<Node> l;synchronized (this) {    l=this.list;  }  return l.indexOf(obj);}  }
class C{  public static void main(String[] args){  new SuperHeroExample().run();}  }
class C{  public TIntObjectHashMapDecorator(TIntObjectHashMap<V> map){  super();  this._map=map;}  }
class C{  public static Domain extractDomain(String topDomainFile){  return extractDomain(topDomainFile,true);}  }
class C{  public static IconManager instance(){  if (INSTANCE == null) {synchronized (IconManager.class) {      if (INSTANCE == null)       INSTANCE=new IconManager();    }  }  return INSTANCE;}  }
class C{  public static File showOpenFile(String extension,Shell parent){  return showOpenFile(extension,null,parent);}  }
class C{  public boolean next() throws SQLException {  checkCursorMove();  boolean result=fbFetcher.next();  if (result)   notifyRowUpdater();  return result;}  }
class C{  public <T extends Enum<T>>Set<T> convertSet(Set<? extends Enum<?>> values,Class<T> targetClass){  Set<T> list=new HashSet<T>();  if (values == null) {    return null;  }  for (  Enum<?> e : values) {    T result=convert(e,targetClass);    if (result != null) {      list.add(result);    }  }  return list;}  }
class C{  public ServiceCompatibilityExceptionBean(ApplicationExceptionBean sup,Reason reason){  super(sup);  setReason(reason);}  }
class C{  public String findURIFromDoc(int owner){  int n=m_sourceTree.size();  for (int i=0; i < n; i++) {    SourceTree sTree=(SourceTree)m_sourceTree.elementAt(i);    if (owner == sTree.m_root)     return sTree.m_url;  }  return null;}  }
class C{  public void fillInNotifierBundle(Bundle m){  m.putInt("GsmSignalStrength",mGsmSignalStrength);  m.putInt("GsmBitErrorRate",mGsmBitErrorRate);  m.putInt("CdmaDbm",mCdmaDbm);  m.putInt("CdmaEcio",mCdmaEcio);  m.putInt("EvdoDbm",mEvdoDbm);  m.putInt("EvdoEcio",mEvdoEcio);  m.putInt("EvdoSnr",mEvdoSnr);  m.putInt("LteSignalStrength",mLteSignalStrength);  m.putInt("LteRsrp",mLteRsrp);  m.putInt("LteRsrq",mLteRsrq);  m.putInt("LteRssnr",mLteRssnr);  m.putInt("LteCqi",mLteCqi);  m.putInt("TdScdma",mTdScdmaRscp);  m.putBoolean("isGsm",Boolean.valueOf(isGsm));}  }
class C{  private double[] scaledMixture(double[] b,double scale,double[] m1,double[] m2){  double[] y=new double[b.length];  for (int i=0; i < y.length; i++) {    y[i]=b[i] + scale * (m1[i] - m2[i]);  }  return y;}  }
class C{  public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException {  int start_old=start;  if (m_inEntityRef)   return;  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  } else   if (m_needToCallStartDocument) {    startDocumentInternal();    m_needToCallStartDocument=false;  }  try {    final int limit=start + length;    boolean wasDash=false;    if (m_cdataTagOpen)     closeCDATA();    if (shouldIndent())     indent();    final java.io.Writer writer=m_writer;    writer.write(COMMENT_BEGIN);    for (int i=start; i < limit; i++) {      if (wasDash && ch[i] == '-') {        writer.write(ch,start,i - start);        writer.write(" -");        start=i + 1;      }      wasDash=(ch[i] == '-');    }    if (length > 0) {      final int remainingChars=(limit - start);      if (remainingChars > 0)       writer.write(ch,start,remainingChars);      if (ch[limit - 1] == '-')       writer.write(' ');    }    writer.write(COMMENT_END);  } catch (  IOException e) {    throw new SAXException(e);  }  m_startNewLine=true;  if (m_tracer != null)   super.fireCommentEvent(ch,start_old,length);}  }
class C{  public void debug(IDebugSearch debug){  this.debug=debug;}  }
class C{  static Object unmaskNull(Object key){  return (key == NULL_KEY) ? null : key;}  }
class C{  public void close(){  try {    conn.close();  } catch (  SQLException e) {    throw convert(e);  }}  }
class C{  public void fill(Shape shape){  defineShape(shape,false,true);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void copy(int sx,int sy,int sw,int sh,int dx,int dy,int dw,int dh){  blend(this,sx,sy,sw,sh,dx,dy,dw,dh,REPLACE);}  }
class C{  protected float reportReturn(String methodCall,float value){  reportAllReturns(methodCall,"" + value);  return value;}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endElement: " + qName);  if (m_contentHandler != null) {    m_contentHandler.endElement(uri,localName,qName);  }}  }
class C{  public Boolean isTraversable(File f){  return null;}  }
class C{  protected void addIgnoredType(Object tokenType){  ignoredTypes.add(tokenType);}  }
class C{  public static boolean isStatusServerError(int status){  return (status >= 500 && status < 600);}  }
class C{  boolean boundaryApproxEquals(S2Loop b,double maxError){  if (numVertices() != b.numVertices()) {    return false;  }  int maxVertices=numVertices();  int iThis=firstLogicalVertex;  int iOther=b.firstLogicalVertex;  for (int i=0; i < maxVertices; ++i, ++iThis, ++iOther) {    if (!S2.approxEquals(vertex(iThis),b.vertex(iOther),maxError)) {      return false;    }  }  return true;}  }
class C{  @SuppressWarnings("unchecked") private UUID nodeForSplit(HadoopInputSplit split,Collection<UUID> topIds,Map<String,Collection<UUID>> nodes,Map<UUID,Integer> nodeLoads) throws IgniteCheckedException {  if (split instanceof HadoopFileBlock) {    HadoopFileBlock split0=(HadoopFileBlock)split;    if (IGFS_SCHEME.equalsIgnoreCase(split0.file().getScheme())) {      HadoopIgfsEndpoint endpoint=new HadoopIgfsEndpoint(split0.file().getAuthority());      IgfsEx igfs=null;      if (F.eq(ignite.name(),endpoint.grid()))       igfs=(IgfsEx)((IgniteEx)ignite).igfsx(endpoint.igfs());      if (igfs != null && !igfs.isProxy(split0.file())) {        IgfsPath path=new IgfsPath(split0.file());        if (igfs.exists(path)) {          Collection<IgfsBlockLocation> blocks;          try {            blocks=igfs.affinity(path,split0.start(),split0.length());          } catch (          IgniteException e) {            throw new IgniteCheckedException(e);          }          assert blocks != null;          if (blocks.size() == 1)           return bestNode(blocks.iterator().next().nodeIds(),topIds,nodeLoads,false); else {            Map<UUID,Long> nodeMap=new HashMap<>();            List<UUID> bestNodeIds=null;            long bestLen=-1L;            for (            IgfsBlockLocation block : blocks) {              for (              UUID blockNodeId : block.nodeIds()) {                if (topIds.contains(blockNodeId)) {                  Long oldLen=nodeMap.get(blockNodeId);                  long newLen=oldLen == null ? block.length() : oldLen + block.length();                  nodeMap.put(blockNodeId,newLen);                  if (bestNodeIds == null || bestLen < newLen) {                    bestNodeIds=new ArrayList<>(1);                    bestNodeIds.add(blockNodeId);                    bestLen=newLen;                  } else                   if (bestLen == newLen) {                    assert !F.isEmpty(bestNodeIds);                    bestNodeIds.add(blockNodeId);                  }                }              }            }            if (bestNodeIds != null) {              return bestNodeIds.size() == 1 ? bestNodeIds.get(0) : bestNode(bestNodeIds,topIds,nodeLoads,true);            }          }        }      }    }  }  Collection<UUID> blockNodes=null;  for (  String host : split.hosts()) {    Collection<UUID> hostNodes=nodes.get(host);    if (!F.isEmpty(hostNodes)) {      if (blockNodes == null)       blockNodes=new ArrayList<>(hostNodes); else       blockNodes.addAll(hostNodes);    }  }  return bestNode(blockNodes,topIds,nodeLoads,false);}  }
class C{  public MaximizeWindowAction(Application app,@Nullable View view){  super(app,view);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  static void checkTypeRefAndPath(int typeRef,TypePath typePath){  int mask=0;switch (typeRef >>> 24) {case TypeReference.CLASS_TYPE_PARAMETER:case TypeReference.METHOD_TYPE_PARAMETER:case TypeReference.METHOD_FORMAL_PARAMETER:    mask=0xFFFF0000;  break;case TypeReference.FIELD:case TypeReference.METHOD_RETURN:case TypeReference.METHOD_RECEIVER:case TypeReference.LOCAL_VARIABLE:case TypeReference.RESOURCE_VARIABLE:case TypeReference.INSTANCEOF:case TypeReference.NEW:case TypeReference.CONSTRUCTOR_REFERENCE:case TypeReference.METHOD_REFERENCE:mask=0xFF000000;break;case TypeReference.CLASS_EXTENDS:case TypeReference.CLASS_TYPE_PARAMETER_BOUND:case TypeReference.METHOD_TYPE_PARAMETER_BOUND:case TypeReference.THROWS:case TypeReference.EXCEPTION_PARAMETER:mask=0xFFFFFF00;break;case TypeReference.CAST:case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:mask=0xFF0000FF;break;default :throw new IllegalArgumentException("Invalid type reference sort 0x" + Integer.toHexString(typeRef >>> 24));}if ((typeRef & ~mask) != 0) {throw new IllegalArgumentException("Invalid type reference 0x" + Integer.toHexString(typeRef));}if (typePath != null) {for (int i=0; i < typePath.getLength(); ++i) {int step=typePath.getStep(i);if (step != TypePath.ARRAY_ELEMENT && step != TypePath.INNER_TYPE && step != TypePath.TYPE_ARGUMENT && step != TypePath.WILDCARD_BOUND) {throw new IllegalArgumentException("Invalid type path step " + i + " in "+ typePath);}if (step != TypePath.TYPE_ARGUMENT && typePath.getStepArgument(i) != 0) {throw new IllegalArgumentException("Invalid type path step argument for step " + i + " in "+ typePath);}}}}  }
class C{  public MapRouteMovement(Settings settings){  super(settings);  String fileName=settings.getSetting(ROUTE_FILE_S);  int type=settings.getInt(ROUTE_TYPE_S);  allRoutes=MapRoute.readRoutes(fileName,type,getMap());  nextRouteIndex=0;  pathFinder=new DijkstraPathFinder(getOkMapNodeTypes());  this.route=this.allRoutes.get(this.nextRouteIndex).replicate();  if (this.nextRouteIndex >= this.allRoutes.size()) {    this.nextRouteIndex=0;  }  if (settings.contains(ROUTE_FIRST_STOP_S)) {    this.firstStopIndex=settings.getInt(ROUTE_FIRST_STOP_S);    if (this.firstStopIndex >= this.route.getNrofStops()) {      throw new SettingsError("Too high first stop's index (" + this.firstStopIndex + ") for route with only "+ this.route.getNrofStops()+ " stops");    }  }}  }
class C{  public Object parseXMLObject(XMLObject xo) throws XMLParseException {  XMLObject object=xo.getChild(CHAIN_PARAMETER);  Parameter chainParameter=(Parameter)object.getChild(0);  boolean jeffreys=xo.getAttribute(JEFFREYS,false);  boolean reverse=xo.getAttribute(REVERSE,false);  double shape=xo.getAttribute(SHAPE,1.0);  if (shape < 1.0) {    throw new XMLParseException("ExponentialMarkovModel: shape parameter must be >= 1.0");  }  if (shape == 1.0) {    System.out.println("Exponential markov model on parameter " + chainParameter.getParameterName() + " (jeffreys="+ jeffreys+ ", reverse="+ reverse+ ")");  } else {    System.out.println("Gamma markov model on parameter " + chainParameter.getParameterName() + " (jeffreys="+ jeffreys+ ", reverse="+ reverse+ " shape="+ shape+ ")");  }  return new ExponentialMarkovModel(chainParameter,jeffreys,reverse,shape);}  }
class C{  public ExtendedClientConfiguration withLargePayloadSupportDisabled(){  setLargePayloadSupportDisabled();  return this;}  }
class C{  public static int[] randomNumber(int n){  int[] num=new int[n];  for (int i=0; i < num.length; i++) {    num[i]=(int)(rGen.nextDouble() * 10);  }  return num;}  }
class C{  public PaymentLineImpl(final String skuCode,final String skuName,final BigDecimal quantity,final BigDecimal unitPrice,final BigDecimal taxAmount,final boolean shipment){  this.skuName=skuName;  this.skuCode=skuCode;  this.quantity=quantity;  this.unitPrice=unitPrice;  this.taxAmount=taxAmount;  this.shipment=shipment;}  }
class C{  public void send(final String text){  if (mRXCharacteristic == null)   return;  if (!TextUtils.isEmpty(text) && mOutgoingBuffer == null) {    final byte[] buffer=mOutgoingBuffer=text.getBytes();    mBufferOffset=0;    final boolean writeRequest=(mRXCharacteristic.getProperties() & BluetoothGattCharacteristic.PROPERTY_WRITE) > 0;    if (!writeRequest) {      final int length=Math.min(buffer.length,MAX_PACKET_SIZE);      mBufferOffset+=length;      getApi().enqueue(BleProfileApi.Request.newWriteRequest(mRXCharacteristic,buffer,0,length));    } else {      mBufferOffset=buffer.length;      getApi().enqueue(BleProfileApi.Request.newWriteRequest(mRXCharacteristic,buffer,0,buffer.length));    }  }}  }
class C{  private Object readResolve(){  if (list instanceof RandomAccess) {    return new UnmodifiableRandomAccessList<E>(list);  }  return this;}  }
class C{  protected void cacheIdeLocation(final File vstsDirectory,final String currentLocation){  final Map<String,String> locationEntries=new HashMap<String,String>();  final File locationsFile=new File(vstsDirectory,LOCATION_FILE);  final String ideName=ApplicationNamesInfo.getInstance().getProductName().toLowerCase();  BufferedReader bufferedReader=null;  BufferedWriter bufferedWriter=null;  String currentEntry=StringUtils.EMPTY;  try {    if (!locationsFile.exists()) {      locationsFile.createNewFile();    } else {      String line;      bufferedReader=new BufferedReader(new FileReader(locationsFile));      while ((line=bufferedReader.readLine()) != null) {        final String[] entry=line.split(CSV_COMMA);        if (entry.length == 2) {          if (ideName.equals(entry[0])) {            currentEntry=entry[1];          }          locationEntries.put(entry[0],entry[1]);        }      }      bufferedReader.close();    }    if (!currentEntry.equals(currentLocation) && !currentLocation.isEmpty()) {      if (!currentEntry.isEmpty()) {        locationEntries.remove(ideName);      }      locationEntries.put(ideName,currentLocation);      bufferedWriter=new BufferedWriter(new FileWriter(locationsFile.getPath()));      for (      String key : locationEntries.keySet()) {        bufferedWriter.write(key + CSV_COMMA + locationEntries.get(key)+ "\n");      }      bufferedWriter.close();    }  } catch (  FileNotFoundException e) {    logger.warn("A FileNotFoundException was caught while trying to cache the IDE location",e);  }catch (  IOException e) {    logger.warn("An IOException was caught while trying to cache the IDE location",e);  }catch (  Exception e) {    logger.warn("An Exception was caught while trying to cache the IDE location",e);  } finally {    try {      if (bufferedReader != null) {        bufferedReader.close();      }      if (bufferedWriter != null) {        bufferedWriter.close();      }    } catch (    IOException e) {      logger.warn("An IOException was caught while trying to close the buffered reader/writer",e);    }  }}  }
class C{  public Uri addVideoSharing(String sharingId,ContactId contact,Direction direction,VideoContent content,VideoSharing.State state,VideoSharing.ReasonCode reasonCode,long timestamp){  if (logger.isActivated()) {    logger.debug("Add new video sharing for contact " + contact + ": sharingId="+ sharingId+ ", state="+ state+ ", reasonCode="+ reasonCode);  }  ContentValues values=new ContentValues();  values.put(VideoSharingData.KEY_SHARING_ID,sharingId);  values.put(VideoSharingData.KEY_CONTACT,contact.toString());  values.put(VideoSharingData.KEY_DIRECTION,direction.toInt());  values.put(VideoSharingData.KEY_STATE,state.toInt());  values.put(VideoSharingData.KEY_REASON_CODE,reasonCode.toInt());  values.put(VideoSharingData.KEY_TIMESTAMP,timestamp);  values.put(VideoSharingData.KEY_DURATION,0);  values.put(VideoSharingData.KEY_VIDEO_ENCODING,content.getEncoding());  values.put(VideoSharingData.KEY_WIDTH,content.getWidth());  values.put(VideoSharingData.KEY_HEIGHT,content.getHeight());  return mLocalContentResolver.insert(VideoSharingData.CONTENT_URI,values);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.435 -0400",hash_original_method="23C617289A8DDF6F6B3FD3C27ABAC8B4",hash_generated_method="563DF64068815DA3B76300343AB1AD9F") public RefinedSoundex(){  this(US_ENGLISH_MAPPING);}  }
class C{  public void write(OutputStream out) throws TransformerException {  write(out,(Integer)null);}  }
class C{  public static float intersectRayTriangleFront(Vector3fc origin,Vector3fc dir,Vector3fc v0,Vector3fc v1,Vector3fc v2,float epsilon){  return intersectRayTriangleFront(origin.x(),origin.y(),origin.z(),dir.x(),dir.y(),dir.z(),v0.x(),v0.y(),v0.z(),v1.x(),v1.y(),v1.z(),v2.x(),v2.y(),v2.z(),epsilon);}  }
class C{  public void testRemoveQuotes(){  assertEquals(null,Utils.removeQuotes(null));  assertEquals("",Utils.removeQuotes(""));  assertEquals("",Utils.removeQuotes("   "));  assertEquals("a",Utils.removeQuotes("a"));  assertEquals("one",Utils.removeQuotes("    \u2018one\' "));  assertEquals("two",Utils.removeQuotes("`two\u2019 "));  assertEquals("three",Utils.removeQuotes("\u201Cthree\u00B4"));  assertEquals("four",Utils.removeQuotes("\"four\u201D\""));  assertEquals("five",Utils.removeQuotes("\"\'\u0060\u00B4five\u00B4\u0060\'\""));}  }
class C{  public static SortedSet<String> extractOutcomeLabelsFromFeatureVectorFiles(File... files) throws IOException {  SortedSet<String> result=new TreeSet<>();  for (  File file : files) {    result.addAll(extractOutcomeLabels(file));  }  return result;}  }
class C{  public ResultSetTableModel(ResultSet rs,int rows){  super();  m_Listeners=new HashSet<TableModelListener>();  m_Helper=new ResultSetHelper(rs,rows);  m_Data=m_Helper.getCells();}  }
class C{  public static Drawable decideIcon(ImageHolder imageHolder,Context ctx,int iconColor,boolean tint){  if (imageHolder == null) {    return null;  } else {    return imageHolder.decideIcon(ctx,iconColor,tint);  }}  }
class C{  static void addTemporalLevelConstraintToConstants(HashSet params,SetOfLevelConstraints constrs){  Iterator iter=params.iterator();  while (iter.hasNext()) {    LevelNode node=(LevelNode)iter.next();    if (node.getKind() == ConstantDeclKind) {      constrs.put(node,Levels[ActionLevel]);    }    ;  }}  }
class C{  public static byte[] toByteArray(Bitmap bitmap,Bitmap.CompressFormat format,int quality){  ByteArrayOutputStream out=null;  try {    out=new ByteArrayOutputStream();    bitmap.compress(format,quality,out);    return out.toByteArray();  }  finally {    CloseableUtils.close(out);  }}  }
class C{  public static Vector2 toVector2(Vector3 o){  return new Vector2(o.x,o.z);}  }
class C{  @Override public int size(){  return map.size();}  }
class C{  public boolean remove(int val){  if (!keyMap.containsKey(val)) {    return false;  } else {    int valueKey=keyMap.get(val);    keyMap.remove(val);    if (valueKey != valueMap.size() - 1) {      valueMap.put(valueKey,valueMap.get(valueMap.size() - 1));      keyMap.put(valueMap.get(valueMap.size() - 1),valueKey);      valueMap.remove(valueMap.size() - 1);    } else {      valueMap.remove(valueKey);    }    count=keyMap.size();    return true;  }}  }
class C{  public Bundler putFloatArray(String key,float[] value){  bundle.putFloatArray(key,value);  return this;}  }
class C{  public static boolean isJavaFile(IResource resource){  if (resource == null || (resource.getType() != IResource.FILE)) {    return false;  }  String ex=resource.getFileExtension();  return "java".equalsIgnoreCase(ex);}  }
class C{  public boolean isVarargs(){  if (this.modifiers == null) {    unsupportedIn2();  }  return this.variableArity;}  }
class C{  public static void run(AdSenseHost service,String callbackToken) throws Exception {  System.out.println("=================================================================");  System.out.println("Verifying association session");  System.out.println("=================================================================");  AssociationSession associationSession=service.associationsessions().verify(callbackToken).execute();  System.out.printf("Association for account \"%s\" has status \"%s\" and ID \"%s\".\n",associationSession.getAccountId(),associationSession.getStatus(),associationSession.getId());  System.out.println();}  }
class C{  public synchronized long size(){  return size;}  }
class C{  static ConstantSize valueOf(String encodedValueAndUnit,boolean horizontal){  String[] split=ConstantSize.splitValueAndUnit(encodedValueAndUnit);  String encodedValue=split[0];  String encodedUnit=split[1];  Unit unit=Unit.valueOf(encodedUnit,horizontal);  double value=Double.parseDouble(encodedValue);  if (unit.requiresIntegers) {    checkArgument(value == (int)value,"%s value %s must be an integer.",unit,encodedValue);  }  return new ConstantSize(value,unit);}  }
class C{  public static byte[] decode(String encoded) throws CoderException {  return Base64Encoder.decode(encoded);}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  @Override public void readSettings(){  SharedPreferences sharedPreferences=this.getSharedPreferences(getString(R.string.sp_widget_clock_day_setting),Context.MODE_PRIVATE);  setLocation(new Location(sharedPreferences.getString(getString(R.string.key_location),getString(R.string.local)),null));  Location location=DatabaseHelper.getInstance(this).searchLocation(getLocation());  if (location != null) {    setLocation(location);  }}  }
class C{  @Override public void process(V tuple){  nval+=tuple.doubleValue();}  }
class C{  public boolean isCanContainNotifications(){  return canContainNotifications;}  }
class C{  private boolean removePermitted(Collection removeInstances){  for (  Object removeInstance : removeInstances) {    Entity next=(Entity)removeInstance;    if (!removePermitted(next.getMetaClass()))     return false;  }  return true;}  }
class C{  public int normalize(int dimensions,double value,double min,double max){  if (value < min || value > max) {    throw new IllegalArgumentException(min + "<" + value+ "<"+ max);  }  double x=(value - min) / (max - min);  return (int)(x * getMaxValue(dimensions));}  }
class C{  void flush(VcfWriter writer) throws IOException {  if (mPrevRecord != null) {    if (!mPrevDense) {      writeCount(writer,mPrevRecord);    } else {      mVcfFilterStatistics.increment(Stat.DENSITY_WINDOW_COUNT);    }  }  mPrevRecord=null;  mPrevDense=false;}  }
class C{  public void skip() throws Exception {  reader.skipElement(this);}  }
class C{  public LongAdder(){}  }
class C{  public boolean doAccessibleAction(int i){  if (i < 0 || i >= getAccessibleActionCount()) {    return false;  }  AccessibleContext ac=getCurrentAccessibleContext();  if (i == 0) {    if (JTree.this.isExpanded(path)) {      JTree.this.collapsePath(path);    } else {      JTree.this.expandPath(path);    }    return true;  } else   if (ac != null) {    AccessibleAction aa=ac.getAccessibleAction();    if (aa != null) {      return aa.doAccessibleAction(i - 1);    }  }  return false;}  }
class C{  private static HashSet<IAddress> fillJumpTargets(final Collection<ReilInstruction> reilInstructions){  final HashSet<IAddress> jumpTargets=new HashSet<IAddress>();  for (  final ReilInstruction reilInstruction : reilInstructions) {    if (reilInstruction.getMnemonic().equals(ReilHelpers.OPCODE_JCC)) {      final String jumpTarget=reilInstruction.getThirdOperand().getValue();      if (Convert.isDecString(jumpTarget)) {        jumpTargets.add(toReilAddress(jumpTarget));      } else       if (reilInstruction.getThirdOperand().getType() == OperandType.SUB_ADDRESS) {        jumpTargets.add(toReilAddress(jumpTarget.split("\\.")));      }    }  }  return jumpTargets;}  }
class C{  @Override public void run(){  try {    sendHeartbeat(false);  } catch (  Exception e) {    log.error("Error to process heartbeat: ",e);  }}  }
class C{  @Override public DriverTask createVolumeSnapshot(List<VolumeSnapshot> snapshots,StorageCapabilities storageCapabilities){  LOG.info("Creating {} snapshots...",snapshots.size());  return snapshotHelper.createVolumeSnapshot(snapshots,storageCapabilities);}  }
class C{  public boolean hasFilterSupplier(){  return this.filterSupplier != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.183 -0500",hash_original_method="9CCB74C876B98AB8C259B415A5496084",hash_generated_method="C9DBF3B4EDCAC34471E10F51BA381E6E") public void invalidate(){  isValid=false;  sessionContext=null;}  }
class C{  static public void assertTrue(boolean condition){  assertTrue(null,condition);}  }
class C{  private void buildTree(int left,int right,int axis,SortDBIDsBySingleDimension comp){  int middle=(left + right) >>> 1;  comp.setDimension(axis);  QuickSelectDBIDs.quickSelect(sorted,comp,left,right,middle);  final int next=(axis + 1) % dims;  if (left + leafsize < middle) {    buildTree(left,middle,next,comp);  }  ++middle;  if (middle + leafsize < right) {    buildTree(middle,right,next,comp);  }}  }
class C{  public static String convertForStoring(ClassAndVariables cam){  StringBuilder sb=new StringBuilder(150);  sb.append(cam.dclass.fullyQualifiedName());  sb.append(',').append(cam.hasSerialVersionUID);  if (cam.hasSerialVersionUID) {    sb.append(',').append(cam.serialVersionUID);  }  List<CompiledField> fields=new ArrayList<CompiledField>(cam.variables.values());  Collections.sort(fields);  for (  CompiledField field : fields) {    sb.append(',').append(field.name()).append(':').append(field.descriptor());  }  return sb.toString();}  }
class C{  public PartialTrie(final Iterable<? extends T> elements,final int log2BucketSize,final TransformationStrategy<? super T> transformationStrategy,final ProgressLogger pl){  Iterator<? extends T> iterator=elements.iterator();  Node node;  LongArrayBitVector curr=LongArrayBitVector.getInstance();  int pos, prefix;  int bucketMask=(1 << log2BucketSize) - 1;  if (iterator.hasNext()) {    pl.start("Building trie...");    LongArrayBitVector prev=LongArrayBitVector.copy(transformationStrategy.toBitVector(iterator.next()));    pl.lightUpdate();    LongArrayBitVector prevDelimiter=LongArrayBitVector.getInstance();    long count=1;    Node root=null;    long maxLength=prev.length();    while (iterator.hasNext()) {      curr.replace(transformationStrategy.toBitVector(iterator.next()));      pl.lightUpdate();      prefix=(int)curr.longestCommonPrefixLength(prev);      if (prefix == prev.length() && prefix == curr.length())       throw new IllegalArgumentException("The input bit vectors are not distinct");      if (prefix == prev.length() || prefix == curr.length())       throw new IllegalArgumentException("The input bit vectors are not prefix-free");      if (prev.getBoolean(prefix))       throw new IllegalArgumentException("The input bit vectors are not lexicographically sorted");      if ((count & bucketMask) == 0) {        if (root == null) {          root=new Node(null,null,prev.copy());          prevDelimiter.replace(prev);        } else {          prefix=(int)prev.longestCommonPrefixLength(prevDelimiter);          pos=0;          node=root;          Node n=null;          while (node != null) {            final long pathLength=node.path.length();            if (prefix < pathLength) {              n=new Node(node.left,node.right,node.path.copy(prefix + 1,pathLength));              node.path.length(prefix);              node.path.trim();              node.left=n;              node.right=new Node(null,null,prev.copy(pos + prefix + 1,prev.length()));              break;            }            prefix-=pathLength + 1;            pos+=pathLength + 1;            node=node.right;            if (ASSERTS)             assert node == null || prefix >= 0 : prefix + " <= " + 0;          }          if (ASSERTS)           assert node != null;          prevDelimiter.replace(prev);        }      }      prev.replace(curr);      maxLength=Math.max(maxLength,prev.length());      count++;    }    pl.done();    this.root=root;    if (root != null) {      if (ASSERTS) {        iterator=elements.iterator();        long c=1;        while (iterator.hasNext()) {          curr.replace(transformationStrategy.toBitVector(iterator.next()));          if ((c++ & bucketMask) == 0) {            if (!iterator.hasNext())             break;            node=root;            pos=0;            while (node != null) {              prefix=(int)curr.subVector(pos).longestCommonPrefixLength(node.path);              assert prefix == node.path.length() : "Error at delimiter " + (c - 1) / (1 << log2BucketSize);              pos+=node.path.length() + 1;              if (pos <= curr.length())               node=curr.getBoolean(pos - 1) ? node.right : node.left; else {                assert node.left == null && node.right == null;                break;              }            }          }        }      }      pl.expectedUpdates=count;      pl.start("Reducing paths...");      iterator=elements.iterator();      final Node stack[]=new Node[(int)maxLength];      final int[] len=new int[(int)maxLength];      stack[0]=root;      int last=0;      boolean first=true;      while (iterator.hasNext()) {        curr.replace(transformationStrategy.toBitVector(iterator.next()));        pl.lightUpdate();        if (!first) {          prefix=(int)prev.longestCommonPrefixLength(curr);          while (last > 0 && len[last] > prefix)           last--;        } else         first=false;        node=stack[last];        pos=len[last];        for (; ; ) {          final LongArrayBitVector path=node.path;          prefix=(int)curr.subVector(pos).longestCommonPrefixLength(path);          if (prefix < path.length()) {            if (path.getBoolean(prefix))             node.prefixLeft=prefix; else             if (node.prefixRight == MAX_PREFIX)             node.prefixRight=prefix;            break;          }          pos+=path.length() + 1;          if (pos > curr.length())           break;          node=curr.getBoolean(pos - 1) ? node.right : node.left;          len[++last]=pos;          stack[last]=node;        }        prev.replace(curr);      }      pl.done();    }  } else {    this.root=null;  }}  }
class C{  protected StateType attemptSetState(Set<StateType> prerequisiteState,StateType newState){  if (prerequisiteState == null || newState == null)   throw new IllegalArgumentException("null arg");  return setState(newState,null,prerequisiteState);}  }
class C{  private final void resetTokenMark(int mark){  int qsz=m_compiler.getTokenQueueSize();  m_processor.m_queueMark=(mark > 0) ? ((mark <= qsz) ? mark - 1 : mark) : 0;  if (m_processor.m_queueMark < qsz) {    m_processor.m_token=(String)m_compiler.getTokenQueue().elementAt(m_processor.m_queueMark++);    m_processor.m_tokenChar=m_processor.m_token.charAt(0);  } else {    m_processor.m_token=null;    m_processor.m_tokenChar=0;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:56.807 -0400",hash_original_method="1DF5A4F82AD71DE648728A6F6545B094",hash_generated_method="EB053A6377C6B19C32A3194D9A8E16A3") @Override public void putNextEntry(ZipEntry ze) throws IOException {  super.putNextEntry(ze);}  }
class C{  public boolean attemptRequest(String url,String stream){synchronized (pendingRequest) {    if (!pendingRequest.containsKey(url)) {      pendingRequest.put(url,stream);      return true;    }    return false;  }}  }
class C{  @SkipValidation private void prepareDisplayInfo(){  if (LOGGER.isDebugEnabled())   LOGGER.debug("Entered into method prepareDisplayInfo");  dcbDispInfo=new DCBDisplayInfo();  dcbDispInfo.setReasonCategoryCodes(Collections.<String>emptyList());  List<String> reasonList=new ArrayList<String>();  reasonList.addAll(DEMAND_REASON_ORDER_MAP.keySet());  dcbDispInfo.setReasonMasterCodes(reasonList);  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("DCB Display Info : " + dcbDispInfo);    LOGGER.debug("Number of Demand Reasons : " + (reasonList != null ? reasonList.size() : ZERO));    LOGGER.debug("Exit from method prepareDisplayInfo");  }}  }
class C{  @Override public Map<String,Model> unmarshal(ModelsType modelsType){  Map<String,Model> map=new HashMap<String,Model>();  for (  Model m : modelsType.getModels()) {    map.put(m.getKey(),m);  }  return map;}  }
class C{  public static Intent createTagShareIntent(Context context,String tagName,String category,String appDownloadLink){  final String messageShare=context.getString(R.string.share_tag_message_format,tagName,category,appDownloadLink);  return createShareIntentForTag(context,messageShare);}  }
class C{  public void execute() throws Exception {  execute(true,true);}  }
class C{  protected static String decode(String url){  StringBuilder stringBuilder=new StringBuilder(url);  Stack<Integer> nonDecodedPercentIndices=new Stack<Integer>();  int i=0;  while (i < stringBuilder.length() - 2) {    char curr=stringBuilder.charAt(i);    if (curr == '%') {      if (CharUtils.isHex(stringBuilder.charAt(i + 1)) && CharUtils.isHex(stringBuilder.charAt(i + 2))) {        char decodedChar=String.format("%s",(char)Short.parseShort(stringBuilder.substring(i + 1,i + 3),16)).charAt(0);        stringBuilder.delete(i,i + 3);        stringBuilder.insert(i,decodedChar);        if (decodedChar == '%') {          i--;        } else         if (!nonDecodedPercentIndices.isEmpty() && CharUtils.isHex(decodedChar) && CharUtils.isHex(stringBuilder.charAt(i - 1))&& i - nonDecodedPercentIndices.peek() == 2) {          i=nonDecodedPercentIndices.pop() - 1;        } else         if (!nonDecodedPercentIndices.isEmpty() && i == stringBuilder.length() - 2) {          i=nonDecodedPercentIndices.pop() - 1;        }      } else {        nonDecodedPercentIndices.add(i);      }    }    i++;  }  return stringBuilder.toString();}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof LayerHandler) {    logger.fine("LayersPanel removing LayerHandler");    if (getLayerHandler() == (LayerHandler)someObj) {      setLayerHandler(null);    }  }  if (controls != null && someObj != this) {    controls.findAndUndo(someObj);  }  if (someObj instanceof Layer) {    paneLookUp.remove((Layer)someObj);  }}  }
class C{  private List<OozieWorkflowJob> retrieveOozieJobs(String clusterId) throws Exception {  String masterIpAddress=getEmrClusterMasterIpAddress(clusterId);  int jobsToInclude=herdStringHelper.getConfigurationValueAsInteger(ConfigurationValue.EMR_OOZIE_JOBS_TO_INCLUDE_IN_CLUSTER_STATUS);  List<WorkflowJob> jobsFound=oozieDao.getRunningEmrOozieJobsByName(masterIpAddress,OozieDaoImpl.HERD_OOZIE_WRAPPER_WORKFLOW_NAME,1,jobsToInclude);  List<OozieWorkflowJob> oozieWorkflowJobs=new ArrayList<>();  for (  WorkflowJob workflowJob : jobsFound) {    WorkflowAction clientWorkflowAction=emrHelper.getClientWorkflowAction(workflowJob);    OozieWorkflowJob resultOozieWorkflowJob=new OozieWorkflowJob();    resultOozieWorkflowJob.setId(workflowJob.getId());    if (clientWorkflowAction == null) {      resultOozieWorkflowJob.setStatus(OozieDaoImpl.OOZIE_WORKFLOW_JOB_STATUS_DM_PREP);    } else {      resultOozieWorkflowJob.setStartTime(toXmlGregorianCalendar(clientWorkflowAction.getStartTime()));      resultOozieWorkflowJob.setStatus(workflowJob.getStatus().toString());    }    oozieWorkflowJobs.add(resultOozieWorkflowJob);  }  return oozieWorkflowJobs;}  }
class C{  @NoInline private static void arraycopyPiecemeal(int[] src,int srcIdx,int[] dst,int dstIdx,int len){  if (srcIdx < dstIdx) {    srcIdx+=len;    dstIdx+=len;    while (len-- != 0) {      dst[--dstIdx]=src[--srcIdx];    }  } else {    while (len-- != 0) {      dst[dstIdx++]=src[srcIdx++];    }  }}  }
class C{  public static SynapseGroupDialog createSynapseGroupDialog(final NetworkPanel np,final SynapseGroup sg){  SynapseGroupDialog sgd=new SynapseGroupDialog(np,sg);  sgd.addListeners();  sgd.tabbedPane.setSelectedIndex(0);  return sgd;}  }
class C{  @Override public int hashCode(){  return HashUtilities.hashCodeForDoubleArray(this.coefficients);}  }
class C{  @Override public List<Product> scroll(String clauses,int skip,int n){  checkProductNumber(n);  if (n < 0)   n=ProductDao.getMaxPageSize();  return super.scroll(clauses,skip,n);}  }
class C{  public XintroActivityBuilder withCustomImageLoader(ImageLoader customImageLoader){  this.customImageLoader=customImageLoader;  return this;}  }
class C{  public MDTransformationRule makePassThroughRule(InputPort inputPort){  return new OneToManyPassThroughRule(inputPort,getManagedPorts());}  }
class C{  public DigitalSignature(String algorithm){  try {    sha=MessageDigest.getInstance("SHA-1");    if ("RSA".equals(algorithm)) {      md5=MessageDigest.getInstance("MD5");      cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding");      signature=null;    } else     if ("DSA".equals(algorithm)) {      signature=Signature.getInstance("NONEwithDSA");      cipher=null;      md5=null;    } else {      cipher=null;      signature=null;      md5=null;    }  } catch (  NoSuchAlgorithmException e) {    throw new AssertionError(e);  }catch (  NoSuchPaddingException e) {    throw new AssertionError(e);  }}  }
class C{  public boolean unlockIt(){  log.info(toString());  setProcessing(false);  return true;}  }
class C{  public <T extends ManagedEntity>T findByName(T[] entities,String name){  if (entities != null) {    for (    T entity : entities) {      if (StringUtils.equals(entity.getName(),name)) {        return entity;      }    }  }  return null;}  }
class C{  public AtomicByteArray(int length){  this.length=length;  this.array=new AtomicIntegerArray((length + 3) / 4);}  }
class C{  public static CompValidateChecker assertValidate(ICalComponent component){  return new CompValidateChecker(component);}  }
class C{  public void testParseCustomSimpleProperty(){  String toBeParsed="com.ibm.ssl.rootCertValidDays#" + "   com.ibm.websphere.security.krb.canonical_host";  List<String> parsedProperty=ComplexPropertyUtils.parseProperty(toBeParsed,"#");  assertEquals(2,parsedProperty.size());  assertEquals("com.ibm.ssl.rootCertValidDays",parsedProperty.get(0));  assertEquals("com.ibm.websphere.security.krb.canonical_host",parsedProperty.get(1));}  }
class C{  private List<Byte> toList(byte[] bytes){  List<Byte> result=new ArrayList<Byte>();  for (  byte b : bytes) {    result.add(b);  }  return result;}  }
class C{  public SimpleReact(){  this(ThreadPools.getStandard());}  }
class C{  public void testSplit1(){  SplittableRandom sr=new SplittableRandom();  for (int reps=0; reps < REPS; ++reps) {    SplittableRandom sc=sr.split();    int i=0;    while (i < NCALLS && sr.nextLong() == sc.nextLong())     ++i;    assertTrue(i < NCALLS);  }}  }
class C{  @Override public Object clone(){  return new PolynominalAttribute(this);}  }
class C{  public static boolean initDebug(boolean InitCuda){  return StaticHelper.initOpenCV(InitCuda);}  }
class C{  @SuppressWarnings("deprecation") public static String urlEncode(String s){  try {    return URLEncoder.encode(s,"UTF-8");  } catch (  UnsupportedEncodingException e) {    return URLEncoder.encode(s);  }}  }
class C{  protected StyleSheetProcessingInstruction(){}  }
class C{  protected void visitPage(String page,String referer){  if (appsMode) {    ConnectionRequest req=GetGARequest();    req.addArgument("t","appview");    req.addArgument("an",Display.getInstance().getProperty("AppName","Codename One App"));    String version=Display.getInstance().getProperty("AppVersion","1.0");    req.addArgument("av",version);    req.addArgument("cd",page);    NetworkManager.getInstance().addToQueue(req);  } else {    String url=Display.getInstance().getProperty("cloudServerURL","https://codename-one.appspot.com/") + "anal";    ConnectionRequest r=new ConnectionRequest();    r.setUrl(url);    r.setPost(false);    r.setFailSilently(failSilently);    r.addArgument("guid","ON");    r.addArgument("utmac",instance.agent);    r.addArgument("utmn",Integer.toString((int)(System.currentTimeMillis() % 0x7fffffff)));    if (page == null || page.length() == 0) {      page="-";    }    r.addArgument("utmp",page);    if (referer == null || referer.length() == 0) {      referer="-";    }    r.addArgument("utmr",referer);    r.addArgument("d",instance.domain);    r.setPriority(ConnectionRequest.PRIORITY_LOW);    NetworkManager.getInstance().addToQueue(r);  }}  }
class C{  public Message authResponse(ParameterList requestParams,String userSelId,String userSelClaimed,boolean authenticatedAndApproved){  return authResponse(requestParams,userSelId,userSelClaimed,authenticatedAndApproved,_opEndpointUrl,true);}  }
class C{  public void checkValid(FactoryDto factory,boolean isUpdate) throws ConflictException {  if (null == factory) {    throw new ConflictException(FactoryConstants.UNPARSABLE_FACTORY_MESSAGE);  }  if (factory.getV() == null) {    throw new ConflictException(FactoryConstants.INVALID_VERSION_MESSAGE);  }  Version v;  try {    v=Version.fromString(factory.getV());  } catch (  IllegalArgumentException e) {    throw new ConflictException(FactoryConstants.INVALID_VERSION_MESSAGE);  }  Class usedFactoryVersionMethodProvider;switch (v) {case V4_0:    usedFactoryVersionMethodProvider=FactoryDto.class;  break;default :throw new ConflictException(FactoryConstants.INVALID_VERSION_MESSAGE);}validateCompatibility(factory,null,FactoryDto.class,usedFactoryVersionMethodProvider,v,"",isUpdate);}  }
class C{  @Override public boolean equals(Object object){  return object == null || object == this;}  }
class C{  public void processTag(Tag tag){  String key=tag.getKey();  String value=tag.getValue();  if (key.equals("name")) {    nodeName=value;  } else {    EntityAttribute att=EntityAttributeManager.instance().intern(new EntityAttribute(key,value));    if (att != null)     nodeAttributes.add(att);  }}  }
class C{  public AbstractConnector(Figure owner){  this.owner=owner;}  }
class C{  public static final StringBuilder stripArrows(final StringBuilder text){  int pointer2=text.length() - 1;  if (pointer2 >= 0) {    while (true) {      if ((text.charAt(pointer2) == '<') || (text.charAt(pointer2) == '>')) {        text.deleteCharAt(pointer2);      }      pointer2--;      if (pointer2 < 0) {        break;      }    }  }  return text;}  }
class C{  @Inject CarrierControlerListener(Carriers carriers,CarrierPlanStrategyManagerFactory strategyManagerFactory,CarrierScoringFunctionFactory scoringFunctionFactory){  this.carriers=carriers;  this.carrierPlanStrategyManagerFactory=strategyManagerFactory;  this.carrierScoringFunctionFactory=scoringFunctionFactory;}  }
class C{  public SVGClipDescriptor(String clipPathValue,Element clipPathDef){  if (clipPathValue == null)   throw new SVGGraphics2DRuntimeException(ErrorConstants.ERR_CLIP_NULL);  this.clipPathValue=clipPathValue;  this.clipPathDef=clipPathDef;}  }
class C{  public static boolean isValidPassword(String password){  final int LENGTH_OF_VALID_PASSWORD=8;  final int MINIMUM_NUMBER_OF_DIGITS=2;  boolean validPassword=isLengthValid(password,LENGTH_OF_VALID_PASSWORD) && isOnlyLettersAndDigits(password) && hasNDigits(password,MINIMUM_NUMBER_OF_DIGITS);  return validPassword;}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  public static IsNullValue nullValue(){  return instanceByFlagsList[0][NULL];}  }
class C{  public boolean voidIt(){  log.info("voidIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_VOID);  if (m_processMsg != null)   return false;  if (!closeIt())   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_VOID);  if (m_processMsg != null)   return false;  return true;}  }
class C{  protected static Image loadFluffImageHeuristic(final Entity unit){  Image fluff=null;  String dir=DIR_NAME_MECH;  if (unit instanceof Aero) {    dir=DIR_NAME_AERO;  } else   if (unit instanceof BattleArmor) {    dir=DIR_NAME_BA;  } else   if (unit instanceof Tank) {    dir=DIR_NAME_VEHICLE;  }  File fluff_image_file=findFluffImage(new File(Configuration.fluffImagesDir(),dir),unit);  if (fluff_image_file != null) {    fluff=new ImageIcon(fluff_image_file.toString()).getImage();  }  return fluff;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object obj=stack.pop();  if (obj == null)   return null;  String s=obj.toString();  return (StringMatchUtils.convertFromNte(s));}  }
class C{  public void add(int id,String name,int parentId,int srvArchId,String srvArchName,int srvFdrId){  FolderTokenFdrLink link;  link=new FolderTokenFdrLink(id,name,parentId,srvArchId,srvArchName,srvFdrId);  super.add(link);}  }
class C{  @Mod.EventHandler public void preInit(FMLPreInitializationEvent e){  rftools=Loader.isModLoaded("rftools");  logger=e.getModLog();  mainConfigDir=e.getModConfigurationDirectory();  modConfigDir=new File(mainConfigDir.getPath() + File.separator + "deepresonance");  versionConfig=new Configuration(new File(modConfigDir,"version.cfg"));  config=new Configuration(new File(modConfigDir,"main.cfg"));  File machinesFile=new File(modConfigDir,"machines.cfg");  if (readVersionConfig()) {    try {      config.getConfigFile().delete();      machinesFile.delete();    } catch (    Exception ee) {      FMLLog.log(Level.WARN,ee,"Could not reset config file!");    }  }  worldGridRegistry=new WorldGridRegistry();  networkHandler=new NetworkHandler(MODID);  compatHandler=new CompatHandler(config,logger);  compatHandler.addHandler(new ComputerCraftCompatHandler());  configWrapper=new ConfigWrapper(new Configuration(machinesFile));  configWrapper.registerConfigWithInnerClasses(new ConfigMachines());  configWrapper.refresh();  proxy.preInit(e);  MainCompatHandler.registerWaila();  MainCompatHandler.registerTOP();  if (rftools) {    Logging.log("Detected RFTools: enabling support");    FMLInterModComms.sendFunctionMessage("rftools","getScreenModuleRegistry","mcjty.deepresonance.items.rftoolsmodule.RFToolsSupport$GetScreenModuleRegistry");  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  protected boolean isHTMLSupported(){  return htmlData != null;}  }
class C{  public WheelVerticalView(Context context,AttributeSet attrs){  this(context,attrs,R.attr.abstractWheelViewStyle);}  }
class C{  public static boolean isPrime(int number){  for (int divisor=2; divisor <= number / 2; divisor++) {    if (number % divisor == 0) {      return false;    }  }  return true;}  }
class C{  private AlarmEvent block(AlarmPoint alarm){  AlarmStatus status=alarm.currentStatus();  if (status.name(null).equals(AlarmPoint.STATUS_BLOCKED) || status.name(null).equals(AlarmPoint.STATUS_DISABLED)) {    return null;  }  AlarmStatus newStatus=createStatus(AlarmPoint.STATUS_BLOCKED);  return createEvent(alarm.identity().get(),status,newStatus,AlarmPoint.EVENT_BLOCKING);}  }
class C{  public void connectionUp(Connection con){  this.router.changedConnection(con);}  }
class C{  public synchronized void ensureUpdated(){}  }
class C{  protected void assertNumDocs(int expectedNumDocs,String collection) throws SolrServerException, IOException, InterruptedException {  CloudSolrClient client=createCloudClient(collection);  try {    int cnt=30;    AssertionError lastAssertionError=null;    while (cnt > 0) {      try {        assertEquals(expectedNumDocs,client.query(new SolrQuery("*:*")).getResults().getNumFound());        return;      } catch (      AssertionError e) {        lastAssertionError=e;        cnt--;        Thread.sleep(500);      }    }    throw new AssertionError("Timeout while trying to assert number of documents @ " + collection,lastAssertionError);  }  finally {    client.close();  }}  }
class C{  public VNXeCommandResult deleteConsistencyGroup(String cgId,boolean isForceSnapDeletion,boolean isForceVolumeDeletion){  if (isForceVolumeDeletion) {    DeleteStorageResourceRequest deleteReq=new DeleteStorageResourceRequest(_khClient);    return deleteReq.deleteLunGroup(cgId,isForceSnapDeletion);  } else {    BlockLunRequests lunReq=new BlockLunRequests(_khClient);    List<VNXeLun> luns=lunReq.getLunsInLunGroup(cgId);    if (luns != null && !luns.isEmpty()) {      List<String> lunIds=new ArrayList<String>();      for (      VNXeLun lun : luns) {        lunIds.add(lun.getId());      }      removeLunsFromConsistencyGroup(cgId,lunIds);    }    DeleteStorageResourceRequest deleteReq=new DeleteStorageResourceRequest(_khClient);    return deleteReq.deleteLunGroup(cgId,isForceSnapDeletion);  }}  }
class C{  public void test_engineInit_01(){  KeyManagerFactorySpiImpl kmf=new KeyManagerFactorySpiImpl();  KeyStore ks;  char[] psw="password".toCharArray();  try {    kmf.engineInit(null,null);    fail("NoSuchAlgorithmException wasn't thrown");  } catch (  NoSuchAlgorithmException kse) {  }catch (  Exception e) {    fail(e + " was thrown instead of NoSuchAlgorithmException");  }  try {    kmf.engineInit(null,psw);    fail("KeyStoreException wasn't thrown");  } catch (  KeyStoreException uke) {  }catch (  Exception e) {    fail(e + " was thrown instead of KeyStoreException");  }  try {    ks=KeyStore.getInstance(KeyStore.getDefaultType());    kmf.engineInit(ks,null);    fail("UnrecoverableKeyException wasn't thrown");  } catch (  UnrecoverableKeyException uke) {  }catch (  Exception e) {    fail(e + " was thrown instead of UnrecoverableKeyException");  }  try {    KeyStore kst=KeyStore.getInstance(KeyStore.getDefaultType());    kst.load(null,null);    kmf.engineInit(kst,psw);  } catch (  Exception e) {    fail("Unexpected exception " + e);  }}  }
class C{  @Override public boolean index(Resource resource){  return false;}  }
class C{  public static int findPerceptuallyNearestColor(int rgb,int[] colors){  int nearestColor=0;  double closest=Double.MAX_VALUE;  float[] original=convertRGBtoLAB(rgb);  for (int i=0; i < colors.length; i++) {    float[] cl=convertRGBtoLAB(colors[i]);    double deltaE=calculateDeltaE(original[0],original[1],original[2],cl[0],cl[1],cl[2]);    if (deltaE < closest) {      nearestColor=colors[i];      closest=deltaE;    }  }  return nearestColor;}  }
class C{  @Override public boolean supportsConvert(int fromType,int toType){  if (isDebugEnabled()) {    debugCode("supportsConvert(" + fromType + ", "+ fromType+ ");");  }  return true;}  }
class C{  public void remove(int childIndex){  MutableTreeNode child=(MutableTreeNode)getChildAt(childIndex);  children.removeElementAt(childIndex);  child.setParent(null);}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  private DisplayUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  protected int bytesPerAtom(){  return (2);}  }
class C{  protected Markup(final String agentId_){  this();  markupId=agentId_;}  }
class C{  public void removeAllTrackingIcons(){  iconArea.removeAllTrackingIcons();}  }
class C{  private void checkRoundTrip(WikibaseDate wbDate){  long seconds=wbDate.secondsSinceEpoch();  WikibaseDate roundDate=fromSecondsSinceEpoch(seconds);  assertEquals(wbDate,roundDate);  long roundSeconds=roundDate.secondsSinceEpoch();  assertEquals(seconds,roundSeconds);  String string=wbDate.toString(WIKIDATA);  roundDate=fromString(string);  assertEquals(wbDate,roundDate);  String roundString=roundDate.toString(WIKIDATA);  assertEquals(string,roundString);  string=wbDate.toString(DATE_TIME);  roundDate=fromString(string);  assertEquals(wbDate,roundDate);  roundString=roundDate.toString(DATE_TIME);  assertEquals(string,roundString);  string=wbDate.toString(DATE);  roundDate=fromString(string);  if (wbDate.hour() == 0 && wbDate.minute() == 0 && wbDate.second() == 0) {    assertEquals(wbDate,roundDate);  }  roundString=roundDate.toString(DATE);  assertEquals(string,roundString);}  }
class C{  void parseTag() throws IOException {  Element elem;  boolean net=false;  boolean warned=false;  boolean unknown=false;switch (ch=readCh()) {case '!':switch (ch=readCh()) {case '-':      while (true) {        if (ch == '-') {          if (!strict || ((ch=readCh()) == '-')) {            ch=readCh();            if (!strict && ch == '-') {              ch=readCh();            }            if (textpos != 0) {              char newtext[]=new char[textpos];              System.arraycopy(text,0,newtext,0,textpos);              handleText(newtext);              lastBlockStartPos=currentBlockStartPos;              textpos=0;            }            parseComment();            last=makeTag(dtd.getElement("comment"),true);            handleComment(getChars(0));            continue;          } else           if (!warned) {            warned=true;            error("invalid.commentchar","-");          }        }        skipSpace();switch (ch) {case '-':          continue;case '>':        ch=readCh();case -1:      return;default :    ch=readCh();  if (!warned) {    warned=true;    error("invalid.commentchar",String.valueOf((char)ch));  }break;}}default :StringBuffer strBuff=new StringBuffer();while (true) {strBuff.append((char)ch);if (parseMarkupDeclarations(strBuff)) {return;}switch (ch) {case '>':ch=readCh();case -1:error("invalid.markup");return;case '\n':ln++;ch=readCh();lfCount++;break;case '\r':ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}break;default :ch=readCh();break;}}}case '/':switch (ch=readCh()) {case '>':ch=readCh();case '<':if (recent == null) {error("invalid.shortend");return;}elem=recent;break;default :if (!parseIdentifier(true)) {error("expected.endtagname");return;}skipSpace();switch (ch) {case '>':ch=readCh();case '<':break;default :error("expected","'>'");while ((ch != -1) && (ch != '\n') && (ch != '>')) {ch=readCh();}if (ch == '>') {ch=readCh();}break;}String elemStr=getString(0);if (!dtd.elementExists(elemStr)) {error("end.unrecognized",elemStr);if ((textpos > 0) && (text[textpos - 1] == '\n')) {textpos--;}elem=dtd.getElement("unknown");elem.name=elemStr;unknown=true;} else {elem=dtd.getElement(elemStr);}break;}if (stack == null) {error("end.extra.tag",elem.getName());return;}if ((textpos > 0) && (text[textpos - 1] == '\n')) {if (stack.pre) {if ((textpos > 1) && (text[textpos - 2] != '\n')) {textpos--;}} else {textpos--;}}if (unknown) {TagElement t=makeTag(elem);handleText(t);attributes.addAttribute(HTML.Attribute.ENDTAG,"true");handleEmptyTag(makeTag(elem));unknown=false;return;}if (!strict) {String stackElem=stack.elem.getName();if (stackElem.equals("table")) {if (!elem.getName().equals(stackElem)) {error("tag.ignore",elem.getName());return;}}if (stackElem.equals("tr") || stackElem.equals("td")) {if ((!elem.getName().equals("table")) && (!elem.getName().equals(stackElem))) {error("tag.ignore",elem.getName());return;}}}TagStack sp=stack;while ((sp != null) && (elem != sp.elem)) {sp=sp.next;}if (sp == null) {error("unmatched.endtag",elem.getName());return;}String elemName=elem.getName();if (stack != sp && (elemName.equals("font") || elemName.equals("center"))) {if (elemName.equals("center")) {while (stack.elem.omitEnd() && stack != sp) {endTag(true);}if (stack.elem == elem) {endTag(false);}}return;}while (stack != sp) {endTag(true);}endTag(false);return;case -1:error("eof");return;}if (!parseIdentifier(true)) {elem=recent;if ((ch != '>') || (elem == null)) {error("expected.tagname");return;}} else {String elemStr=getString(0);if (elemStr.equals("image")) {elemStr="img";}if (!dtd.elementExists(elemStr)) {error("tag.unrecognized ",elemStr);elem=dtd.getElement("unknown");elem.name=elemStr;unknown=true;} else {elem=dtd.getElement(elemStr);}}parseAttributeSpecificationList(elem);switch (ch) {case '/':net=true;case '>':ch=readCh();if (ch == '>' && net) {ch=readCh();}case '<':break;default :error("expected","'>'");break;}if (!strict) {if (elem.getName().equals("script")) {error("javascript.unsupported");}}if (!elem.isEmpty()) {if (ch == '\n') {ln++;lfCount++;ch=readCh();} else if (ch == '\r') {ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}}}TagElement tag=makeTag(elem,false);if (!unknown) {legalTagContext(tag);if (!strict && skipTag) {skipTag=false;return;}}startTag(tag);if (!elem.isEmpty()) {switch (elem.getType()) {case CDATA:parseLiteral(false);break;case RCDATA:parseLiteral(true);break;default :if (stack != null) {stack.net=net;}break;}}}  }
class C{  public ECHO384(){  super();}  }
class C{  protected OperationSourceImpl(){  super();}  }
class C{  public void push(EventQueue newEventQueue){  if (getEventLog().isLoggable(PlatformLogger.Level.FINE)) {    getEventLog().fine("EventQueue.push(" + newEventQueue + ")");  }  pushPopLock.lock();  try {    EventQueue topQueue=this;    while (topQueue.nextQueue != null) {      topQueue=topQueue.nextQueue;    }    if (topQueue.fwDispatcher != null) {      throw new RuntimeException("push() to queue with fwDispatcher");    }    if ((topQueue.dispatchThread != null) && (topQueue.dispatchThread.getEventQueue() == this)) {      newEventQueue.dispatchThread=topQueue.dispatchThread;      topQueue.dispatchThread.setEventQueue(newEventQueue);    }    while (topQueue.peekEvent() != null) {      try {        newEventQueue.postEventPrivate(topQueue.getNextEventPrivate());      } catch (      InterruptedException ie) {        if (getEventLog().isLoggable(PlatformLogger.Level.FINE)) {          getEventLog().fine("Interrupted push",ie);        }      }    }    if (topQueue.dispatchThread != null) {      topQueue.postEventPrivate(new InvocationEvent(topQueue,dummyRunnable));    }    newEventQueue.previousQueue=topQueue;    topQueue.nextQueue=newEventQueue;    if (appContext.get(AppContext.EVENT_QUEUE_KEY) == topQueue) {      appContext.put(AppContext.EVENT_QUEUE_KEY,newEventQueue);    }    pushPopCond.signalAll();  }  finally {    pushPopLock.unlock();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:04.513 -0500",hash_original_method="EBAE74DC80F9C6BC38A9630AD570AE77",hash_generated_method="A44B995D98502C226FF53B0B869781E4") public ServiceConfigurationError(String message){  super(message);}  }
class C{  public LayerTreeNode(Layer layer){  super(layer != null ? layer.getName() : "");  if (layer == null) {    String message=Logging.getMessage("nullValue.LayerIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.layer=layer;  this.initialize();}  }
class C{  public boolean isPersist(){  return persist;}  }
class C{  public static void deleteSection(final SQLProvider provider,final Section section) throws CouldntLoadDataException {  Preconditions.checkNotNull(provider,"Error: provider argument can not be null");  Preconditions.checkNotNull(section,"Error: section argument can not be null");  final String query=" { call delete_section(?, ?) } ";  try (CallableStatement procedure=provider.getConnection().getConnection().prepareCall(query)){    procedure.setInt(1,section.getModule().getConfiguration().getId());    procedure.setInt(2,section.getId());    procedure.execute();  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }}  }
class C{  public Matrix invert(){  if (rows != columns) {    throw new IllegalArgumentException("Only square matrices can be inverted");  }  Matrix work=augment(identity(rows));  work.gaussianElimination();  return work.submatrix(0,rows,columns,columns * 2);}  }
class C{  protected boolean readRecords(DataInputStream is) throws IOException {  short functionId=1;  int recSize=0;  short recData;  numRecords=0;  while (functionId > 0) {    recSize=readInt(is);    recSize-=3;    functionId=readShort(is);    if (functionId <= 0)     break;    MetaRecord mr=new MetaRecord();switch (functionId) {case WMFConstants.META_SETMAPMODE:{        mr.numPoints=recSize;        mr.functionId=functionId;        int mapmode=readShort(is);        if (mapmode == WMFConstants.MM_ANISOTROPIC)         isotropic=false;        mr.addElement(mapmode);        records.add(mr);      }    break;case WMFConstants.META_DRAWTEXT:{    for (int i=0; i < recSize; i++)     recData=readShort(is);    numRecords--;  }break;case WMFConstants.META_EXTTEXTOUT:{int yVal=readShort(is) * ySign;int xVal=(int)(readShort(is) * xSign * scaleXY);int lenText=readShort(is);int flag=readShort(is);int read=4;boolean clipped=false;int x1=0, y1=0, x2=0, y2=0;int len;if ((flag & WMFConstants.ETO_CLIPPED) != 0) {  x1=(int)(readShort(is) * xSign * scaleXY);  y1=readShort(is) * ySign;  x2=(int)(readShort(is) * xSign * scaleXY);  y2=readShort(is) * ySign;  read+=4;  clipped=true;}byte[] bstr=new byte[lenText];int i=0;for (; i < lenText; i++) {  bstr[i]=is.readByte();}read+=(lenText + 1) / 2;if (lenText % 2 != 0) is.readByte();if (read < recSize) for (int j=read; j < recSize; j++) readShort(is);mr=new MetaRecord.ByteRecord(bstr);mr.numPoints=recSize;mr.functionId=functionId;mr.addElement(xVal);mr.addElement(yVal);mr.addElement(flag);if (clipped) {  mr.addElement(x1);  mr.addElement(y1);  mr.addElement(x2);  mr.addElement(y2);}records.add(mr);}break;case WMFConstants.META_TEXTOUT:{int len=readShort(is);int read=1;byte[] bstr=new byte[len];for (int i=0; i < len; i++) {bstr[i]=is.readByte();}if (len % 2 != 0) is.readByte();read+=(len + 1) / 2;int yVal=readShort(is) * ySign;int xVal=(int)(readShort(is) * xSign * scaleXY);read+=2;if (read < recSize) for (int j=read; j < recSize; j++) readShort(is);mr=new MetaRecord.ByteRecord(bstr);mr.numPoints=recSize;mr.functionId=functionId;mr.addElement(xVal);mr.addElement(yVal);records.add(mr);}break;case WMFConstants.META_CREATEFONTINDIRECT:{int lfHeight=readShort(is);int lfWidth=readShort(is);int lfEscapement=readShort(is);int lfOrientation=readShort(is);int lfWeight=readShort(is);int lfItalic=is.readByte();int lfUnderline=is.readByte();int lfStrikeOut=is.readByte();int lfCharSet=is.readByte() & 0x00ff;int lfOutPrecision=is.readByte();int lfClipPrecision=is.readByte();int lfQuality=is.readByte();int lfPitchAndFamily=is.readByte();int len=(2 * (recSize - 9));byte[] lfFaceName=new byte[len];byte ch;for (int i=0; i < len; i++) lfFaceName[i]=is.readByte();String str=new String(lfFaceName);mr=new MetaRecord.StringRecord(str);mr.numPoints=recSize;mr.functionId=functionId;mr.addElement(lfHeight);mr.addElement(lfItalic);mr.addElement(lfWeight);mr.addElement(lfCharSet);mr.addElement(lfUnderline);mr.addElement(lfStrikeOut);mr.addElement(lfOrientation);mr.addElement(lfEscapement);records.add(mr);}break;case WMFConstants.META_SETVIEWPORTORG:case WMFConstants.META_SETVIEWPORTEXT:case WMFConstants.META_SETWINDOWORG:case WMFConstants.META_SETWINDOWEXT:{mr.numPoints=recSize;mr.functionId=functionId;int height=readShort(is);int width=readShort(is);if (width < 0) {width=-width;xSign=-1;}if (height < 0) {height=-height;ySign=-1;}mr.addElement((int)(width * scaleXY));mr.addElement(height);records.add(mr);if (_bext && functionId == WMFConstants.META_SETWINDOWEXT) {vpW=width;vpH=height;if (!isotropic) scaleXY=(float)vpW / (float)vpH;vpW=(int)(vpW * scaleXY);_bext=false;}if (!isAldus) {this.width=vpW;this.height=vpH;}}break;case WMFConstants.META_OFFSETVIEWPORTORG:case WMFConstants.META_OFFSETWINDOWORG:{mr.numPoints=recSize;mr.functionId=functionId;int y=readShort(is) * ySign;int x=(int)(readShort(is) * xSign * scaleXY);mr.addElement(x);mr.addElement(y);records.add(mr);}break;case WMFConstants.META_SCALEVIEWPORTEXT:case WMFConstants.META_SCALEWINDOWEXT:{mr.numPoints=recSize;mr.functionId=functionId;int ydenom=readShort(is);int ynum=readShort(is);int xdenom=readShort(is);int xnum=readShort(is);mr.addElement(xdenom);mr.addElement(ydenom);mr.addElement(xnum);mr.addElement(ynum);records.add(mr);scaleX=scaleX * (float)xdenom / (float)xnum;scaleY=scaleY * (float)ydenom / (float)ynum;}break;case WMFConstants.META_CREATEBRUSHINDIRECT:{mr.numPoints=recSize;mr.functionId=functionId;mr.addElement(readShort(is));int colorref=readInt(is);int red=colorref & 0xff;int green=(colorref & 0xff00) >> 8;int blue=(colorref & 0xff0000) >> 16;int flags=(colorref & 0x3000000) >> 24;mr.addElement(red);mr.addElement(green);mr.addElement(blue);mr.addElement(readShort(is));records.add(mr);}break;case WMFConstants.META_CREATEPENINDIRECT:{mr.numPoints=recSize;mr.functionId=functionId;mr.addElement(readShort(is));int width=readInt(is);int colorref=readInt(is);if (recSize == 6) readShort(is);int red=colorref & 0xff;int green=(colorref & 0xff00) >> 8;int blue=(colorref & 0xff0000) >> 16;int flags=(colorref & 0x3000000) >> 24;mr.addElement(red);mr.addElement(green);mr.addElement(blue);mr.addElement(width);records.add(mr);}break;case WMFConstants.META_SETTEXTALIGN:{mr.numPoints=recSize;mr.functionId=functionId;int align=readShort(is);if (recSize > 1) for (int i=1; i < recSize; i++) readShort(is);mr.addElement(align);records.add(mr);}break;case WMFConstants.META_SETTEXTCOLOR:case WMFConstants.META_SETBKCOLOR:{mr.numPoints=recSize;mr.functionId=functionId;int colorref=readInt(is);int red=colorref & 0xff;int green=(colorref & 0xff00) >> 8;int blue=(colorref & 0xff0000) >> 16;int flags=(colorref & 0x3000000) >> 24;mr.addElement(red);mr.addElement(green);mr.addElement(blue);records.add(mr);}break;case WMFConstants.META_LINETO:case WMFConstants.META_MOVETO:{mr.numPoints=recSize;mr.functionId=functionId;int y=readShort(is) * ySign;int x=(int)(readShort(is) * xSign * scaleXY);mr.addElement(x);mr.addElement(y);records.add(mr);}break;case WMFConstants.META_SETPOLYFILLMODE:{mr.numPoints=recSize;mr.functionId=functionId;int mode=readShort(is);if (recSize > 1) for (int i=1; i < recSize; i++) readShort(is);mr.addElement(mode);records.add(mr);}break;case WMFConstants.META_POLYPOLYGON:{mr.numPoints=recSize;mr.functionId=functionId;int count=readShort(is);int[] pts=new int[count];int ptCount=0;for (int i=0; i < count; i++) {pts[i]=readShort(is);ptCount+=pts[i];}mr.addElement(count);for (int i=0; i < count; i++) mr.addElement(pts[i]);int offset=count + 1;for (int i=0; i < count; i++) {int nPoints=pts[i];for (int j=0; j < nPoints; j++) {mr.addElement((int)(readShort(is) * xSign * scaleXY));mr.addElement(readShort(is) * ySign);}}records.add(mr);}break;case WMFConstants.META_POLYLINE:case WMFConstants.META_POLYGON:{mr.numPoints=recSize;mr.functionId=functionId;int count=readShort(is);mr.addElement(count);for (int i=0; i < count; i++) {mr.addElement((int)(readShort(is) * xSign * scaleXY));mr.addElement(readShort(is) * ySign);}records.add(mr);}break;case WMFConstants.META_ELLIPSE:case WMFConstants.META_INTERSECTCLIPRECT:case WMFConstants.META_RECTANGLE:{mr.numPoints=recSize;mr.functionId=functionId;int bottom=readShort(is) * ySign;int right=(int)(readShort(is) * xSign * scaleXY);int top=readShort(is) * ySign;int left=(int)(readShort(is) * xSign * scaleXY);mr.addElement(left);mr.addElement(top);mr.addElement(right);mr.addElement(bottom);records.add(mr);}break;case WMFConstants.META_CREATEREGION:{mr.numPoints=recSize;mr.functionId=functionId;int left=(int)(readShort(is) * xSign * scaleXY);int top=readShort(is) * ySign;int right=(int)(readShort(is) * xSign * scaleXY);int bottom=readShort(is) * ySign;mr.addElement(left);mr.addElement(top);mr.addElement(right);mr.addElement(bottom);records.add(mr);}break;case WMFConstants.META_ROUNDRECT:{mr.numPoints=recSize;mr.functionId=functionId;int el_height=readShort(is) * ySign;int el_width=(int)(readShort(is) * xSign * scaleXY);int bottom=readShort(is) * ySign;int right=(int)(readShort(is) * xSign * scaleXY);int top=readShort(is) * ySign;int left=(int)(readShort(is) * xSign * scaleXY);mr.addElement(left);mr.addElement(top);mr.addElement(right);mr.addElement(bottom);mr.addElement(el_width);mr.addElement(el_height);records.add(mr);}break;case WMFConstants.META_ARC:case WMFConstants.META_PIE:{mr.numPoints=recSize;mr.functionId=functionId;int yend=readShort(is) * ySign;int xend=(int)(readShort(is) * xSign * scaleXY);int ystart=readShort(is) * ySign;int xstart=(int)(readShort(is) * xSign * scaleXY);int bottom=readShort(is) * ySign;int right=(int)(readShort(is) * xSign * scaleXY);int top=readShort(is) * ySign;int left=(int)(readShort(is) * xSign * scaleXY);mr.addElement(left);mr.addElement(top);mr.addElement(right);mr.addElement(bottom);mr.addElement(xstart);mr.addElement(ystart);mr.addElement(xend);mr.addElement(yend);records.add(mr);}break;case WMFConstants.META_PATBLT:{mr.numPoints=recSize;mr.functionId=functionId;int rop=readInt(is);int height=readShort(is) * ySign;int width=(int)(readShort(is) * xSign * scaleXY);int left=(int)(readShort(is) * xSign * scaleXY);int top=readShort(is) * ySign;mr.addElement(rop);mr.addElement(height);mr.addElement(width);mr.addElement(top);mr.addElement(left);records.add(mr);}break;case WMFConstants.META_SETBKMODE:{mr.numPoints=recSize;mr.functionId=functionId;int mode=readShort(is);mr.addElement(mode);if (recSize > 1) for (int i=1; i < recSize; i++) readShort(is);records.add(mr);}break;case WMFConstants.META_SETROP2:{mr.numPoints=recSize;mr.functionId=functionId;int rop;if (recSize == 1) rop=readShort(is); else rop=readInt(is);mr.addElement(rop);records.add(mr);}break;case WMFConstants.META_DIBSTRETCHBLT:{int mode=is.readInt() & 0xff;int heightSrc=readShort(is) * ySign;int widthSrc=readShort(is) * xSign;int sy=readShort(is) * ySign;int sx=readShort(is) * xSign;int heightDst=readShort(is) * ySign;int widthDst=(int)(readShort(is) * xSign * scaleXY);int dy=readShort(is) * ySign;int dx=(int)(readShort(is) * xSign * scaleXY);int len=2 * recSize - 20;byte[] bitmap=new byte[len];for (int i=0; i < len; i++) bitmap[i]=is.readByte();mr=new MetaRecord.ByteRecord(bitmap);mr.numPoints=recSize;mr.functionId=functionId;mr.addElement(mode);mr.addElement(heightSrc);mr.addElement(widthSrc);mr.addElement(sy);mr.addElement(sx);mr.addElement(heightDst);mr.addElement(widthDst);mr.addElement(dy);mr.addElement(dx);records.add(mr);}break;case WMFConstants.META_STRETCHDIB:{int mode=is.readInt() & 0xff;int usage=readShort(is);int heightSrc=readShort(is) * ySign;int widthSrc=readShort(is) * xSign;int sy=readShort(is) * ySign;int sx=readShort(is) * xSign;int heightDst=readShort(is) * ySign;int widthDst=(int)(readShort(is) * xSign * scaleXY);int dy=readShort(is) * ySign;int dx=(int)(readShort(is) * xSign * scaleXY);int len=2 * recSize - 22;byte bitmap[]=new byte[len];for (int i=0; i < len; i++) bitmap[i]=is.readByte();mr=new MetaRecord.ByteRecord(bitmap);mr.numPoints=recSize;mr.functionId=functionId;mr.addElement(mode);mr.addElement(heightSrc);mr.addElement(widthSrc);mr.addElement(sy);mr.addElement(sx);mr.addElement(heightDst);mr.addElement(widthDst);mr.addElement(dy);mr.addElement(dx);records.add(mr);}break;case WMFConstants.META_DIBBITBLT:{int mode=is.readInt() & 0xff;int sy=readShort(is);int sx=readShort(is);int hdc=readShort(is);int height=readShort(is);int width=(int)(readShort(is) * xSign * scaleXY);int dy=readShort(is);int dx=(int)(readShort(is) * xSign * scaleXY);int len=2 * recSize - 18;if (len > 0) {byte[] bitmap=new byte[len];for (int i=0; i < len; i++) bitmap[i]=is.readByte();mr=new MetaRecord.ByteRecord(bitmap);mr.numPoints=recSize;mr.functionId=functionId;} else {mr.numPoints=recSize;mr.functionId=functionId;for (int i=0; i < len; i++) is.readByte();}mr.addElement(mode);mr.addElement(height);mr.addElement(width);mr.addElement(sy);mr.addElement(sx);mr.addElement(dy);mr.addElement(dx);records.add(mr);}break;case WMFConstants.META_DIBCREATEPATTERNBRUSH:{int type=is.readInt() & 0xff;int len=2 * recSize - 4;byte[] bitmap=new byte[len];for (int i=0; i < len; i++) bitmap[i]=is.readByte();mr=new MetaRecord.ByteRecord(bitmap);mr.numPoints=recSize;mr.functionId=functionId;mr.addElement(type);records.add(mr);}break;default :mr.numPoints=recSize;mr.functionId=functionId;for (int j=0; j < recSize; j++) mr.addElement(readShort(is));records.add(mr);break;}numRecords++;}if (!isAldus) {right=(int)vpX;left=(int)(vpX + vpW);top=(int)vpY;bottom=(int)(vpY + vpH);}setReading(false);return true;}  }
class C{  public void addStreamHost(final StreamHost host){  streamHosts.add(host);}  }
class C{  public MessageBuilder appendContent(String content,Styles styles){  this.content+=(styles.getMarkdown() + content + styles.getReverseMarkdown());  return this;}  }
class C{  protected final void fireVetoableChange(String propertyName,long oldValue,long newValue) throws PropertyVetoException {  fireVetoableChange(propertyName,Long.valueOf(oldValue),Long.valueOf(newValue));}  }
class C{  public void push(final float value){  int bits=Float.floatToIntBits(value);  if (bits == 0L || bits == 0x3f800000 || bits == 0x40000000) {    mv.visitInsn(Opcodes.FCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  public DGeneralSubtreeChooser(JFrame parent,String title,GeneralSubtree generalSubtree){  super(parent,title,ModalityType.DOCUMENT_MODAL);  initComponents(generalSubtree);}  }
class C{  public static void resumeEventStream(Context context){  Log.d(LOG_TAG,"resumeEventStream");  sendEventStreamAction(context,EventStreamService.StreamAction.RESUME);}  }
class C{  public void testNewClassLoaderHotRedeploymentPrivateMode() throws Exception {  processTestClassLoaderHotRedeployment(DeploymentMode.PRIVATE);}  }
class C{  public FixedByteArrayBuffer(final byte[] buf,final int off,final int len){  super(off,len);  if (buf == null)   throw new IllegalArgumentException("buf");  if (off + len > buf.length)   throw new IllegalArgumentException("off+len>buf.length");  this.buf=buf;}  }
class C{  public ConnPoolByRoute(final ClientConnectionOperator operator,final HttpParams params){  super();  if (operator == null) {    throw new IllegalArgumentException("Connection operator may not be null");  }  this.operator=operator;  freeConnections=createFreeConnQueue();  waitingThreads=createWaitingThreadQueue();  routeToPool=createRouteToPoolMap();  maxTotalConnections=ConnManagerParams.getMaxTotalConnections(params);  connPerRoute=ConnManagerParams.getMaxConnectionsPerRoute(params);}  }
class C{  public td[] addWindowFooters(){  if (m_table == null)   return null;  td left=new td("windowFooter",AlignType.LEFT,AlignType.MIDDLE,false);  td right=new td("windowFooter",AlignType.RIGHT,AlignType.MIDDLE,false);  m_table.addElement(new tr().addElement(left).addElement(right));  return new td[]{left,right};}  }
class C{  public static void initThreadsFlag(CFlags flags){  flags.registerOptional('T',THREADS_FLAG,Integer.class,INT,"number of threads (Default is the number of available cores)").setCategory(CommonFlagCategories.UTILITY);}  }
class C{  static final public Object deserialize(final byte[] b,final int off,final int len){  final ByteArrayInputStream bais=new ByteArrayInputStream(b,off,len);  try {    final ObjectInputStream ois=new ObjectInputStream(bais);    return ois.readObject();  } catch (  Exception ex) {    throw new RuntimeException("off=" + off + ", len="+ len,ex);  }}  }
class C{  private <ElementType extends Element>Iterator<? extends ElementType> elements(BiFunction<OrientGraph,Object[],Iterator<ElementType>> getElementsByIds,TriFunction<OrientGraph,OIndex<Object>,Iterator<Object>,Stream<? extends ElementType>> getElementsByIndex,Function<OrientGraph,Iterator<ElementType>> getAllElements){  final OrientGraph graph=getGraph();  if (this.ids != null && this.ids.length > 0) {    return this.iteratorList(getElementsByIds.apply(graph,this.ids));  } else {    Set<OrientIndexQuery> indexQueryOptions=findIndex();    if (!indexQueryOptions.isEmpty()) {      List<ElementType> elements=new ArrayList<>();      indexQueryOptions.forEach(null);      return elements.iterator();    } else {      OLogManager.instance().warn(this,"scanning through all elements without using an index for Traversal " + getTraversal());      return this.iteratorList(getAllElements.apply(graph));    }  }}  }
class C{  public boolean createClient(String clientName,String orgValue,String orgName,String userClient,String userOrg,String phone,String phone2,String fax,String eMail,String taxID,String DUNS,String logoFile,int Country_ID){  log.info(clientName);  m_trx.start();  m_info=new StringBuffer();  String name=null;  String sql=null;  int no=0;  name=clientName;  if (name == null || name.length() == 0)   name="newClient";  m_clientName=name;  m_client=new MClient(m_ctx,0,true,m_trx.getTrxName());  m_client.setValue(m_clientName);  m_client.setName(m_clientName);  m_client.setIsUseBetaFunctions(false);  m_client.setIsCostImmediate(true);  m_client.setAutoArchive(MClient.AUTOARCHIVE_ExternalDocuments);  MCountry country=MCountry.get(m_ctx,Country_ID);  if (country.getAD_Language() != null)   m_client.setAD_Language(country.getAD_Language());  if (!m_client.save()) {    String err="Client NOT created";    log.log(Level.SEVERE,err);    m_info.append(err);    m_trx.rollback();    m_trx.close();    return false;  }  int AD_Client_ID=m_client.getAD_Client_ID();  Env.setContext(m_ctx,m_WindowNo,"AD_Client_ID",AD_Client_ID);  Env.setContext(m_ctx,"#AD_Client_ID",AD_Client_ID);  m_stdValues=String.valueOf(AD_Client_ID) + ",0,'Y',SysDate,0,SysDate,0";  m_info.append(Msg.translate(m_lang,"AD_Client_ID")).append("=").append(name).append("\n");  if (!MSequence.checkClientSequences(m_ctx,AD_Client_ID,m_trx.getTrxName())) {    String err="Sequences NOT created";    log.log(Level.SEVERE,err);    m_info.append(err);    m_trx.rollback();    m_trx.close();    return false;  }  if (!m_client.setupClientInfo(m_lang)) {    String err="Client Info NOT created";    log.log(Level.SEVERE,err);    m_info.append(err);    m_trx.rollback();    m_trx.close();    return false;  }  m_AD_Tree_Account_ID=m_client.getSetup_AD_Tree_Account_ID();  name=orgName;  if (name == null || name.length() == 0)   name="newOrg";  if (orgValue == null || orgValue.length() == 0)   orgValue=name;  m_org=new MOrg(m_client,orgValue,name);  if (!m_org.save()) {    String err="Organization NOT created";    log.log(Level.SEVERE,err);    m_info.append(err);    m_trx.rollback();    m_trx.close();    return false;  }  Env.setContext(m_ctx,m_WindowNo,"AD_Org_ID",getAD_Org_ID());  Env.setContext(m_ctx,"#AD_Org_ID",getAD_Org_ID());  m_stdValuesOrg=AD_Client_ID + "," + getAD_Org_ID()+ ",'Y',SysDate,0,SysDate,0";  m_info.append(Msg.translate(m_lang,"AD_Org_ID")).append("=").append(name).append("\n");  MOrgInfo orgInfo=MOrgInfo.get(m_ctx,getAD_Org_ID(),m_trx.getTrxName());  orgInfo.setPhone(phone);  orgInfo.setPhone2(phone2);  orgInfo.setFax(fax);  orgInfo.setEMail(eMail);  if (taxID != null && taxID.length() > 0) {    orgInfo.setTaxID(taxID);  }  if (!Util.isEmpty(DUNS))   orgInfo.setDUNS(DUNS);  if (!Util.isEmpty(logoFile)) {    byte[] data=null;    File file=new File(logoFile);    try {      FileInputStream fis=new FileInputStream(file);      ByteArrayOutputStream os=new ByteArrayOutputStream();      byte[] buffer=new byte[1024 * 8];      int length=-1;      while ((length=fis.read(buffer)) != -1)       os.write(buffer,0,length);      fis.close();      data=os.toByteArray();      os.close();      MImage logo=new MImage(m_ctx,0,m_trx.getTrxName());      logo.setName(file.getName());      logo.setImageURL(file.getPath());      logo.setBinaryData(data);      logo.saveEx();      MClientInfo clientInfo=m_client.getInfo();      if (clientInfo != null) {        clientInfo.setLogo_ID(logo.getAD_Image_ID());        clientInfo.saveEx(m_trx.getTrxName());      }    } catch (    Exception e) {      log.log(Level.WARNING,"Failed to load logo image",e);    }  }  if (!orgInfo.save()) {    String err="Organization Info NOT Updated";    log.log(Level.SEVERE,err);    m_info.append(err);    m_trx.rollback();    m_trx.close();    return false;  }  name=m_clientName + " Admin";  MRole admin=new MRole(m_ctx,0,m_trx.getTrxName());  admin.setClientOrg(m_client);  admin.setName(name);  admin.setUserLevel(MRole.USERLEVEL_ClientPlusOrganization);  admin.setPreferenceType(MRole.PREFERENCETYPE_Client);  admin.setIsShowAcct(true);  if (!admin.save()) {    String err="Admin Role A NOT inserted";    log.log(Level.SEVERE,err);    m_info.append(err);    m_trx.rollback();    m_trx.close();    return false;  }  MRoleOrgAccess adminClientAccess=new MRoleOrgAccess(admin,0);  if (!adminClientAccess.save())   log.log(Level.SEVERE,"Admin Role_OrgAccess 0 NOT created");  MRoleOrgAccess adminOrgAccess=new MRoleOrgAccess(admin,m_org.getAD_Org_ID());  if (!adminOrgAccess.save())   log.log(Level.SEVERE,"Admin Role_OrgAccess NOT created");  m_info.append(Msg.translate(m_lang,"AD_Role_ID")).append("=").append(name).append("\n");  name=m_clientName + " User";  MRole user=new MRole(m_ctx,0,m_trx.getTrxName());  user.setClientOrg(m_client);  user.setName(name);  if (!user.save()) {    String err="User Role A NOT inserted";    log.log(Level.SEVERE,err);    m_info.append(err);    m_trx.rollback();    m_trx.close();    return false;  }  MRoleOrgAccess userOrgAccess=new MRoleOrgAccess(user,m_org.getAD_Org_ID());  if (!userOrgAccess.save())   log.log(Level.SEVERE,"User Role_OrgAccess NOT created");  m_info.append(Msg.translate(m_lang,"AD_Role_ID")).append("=").append(name).append("\n");  name=userClient;  if (name == null || name.length() == 0)   name=m_clientName + "Client";  AD_User_ID=getNextID(AD_Client_ID,"AD_User");  AD_User_Name=name;  name=DB.TO_STRING(name);  sql="INSERT INTO AD_User(" + m_stdColumns + ",AD_User_ID,"+ "Name,Description,Password)"+ " VALUES ("+ m_stdValues+ ","+ AD_User_ID+ ","+ name+ ","+ name+ ","+ name+ ")";  no=DB.executeUpdate(sql,m_trx.getTrxName());  if (no != 1) {    String err="Admin User NOT inserted - " + AD_User_Name;    log.log(Level.SEVERE,err);    m_info.append(err);    m_trx.rollback();    m_trx.close();    return false;  }  m_info.append(Msg.translate(m_lang,"AD_User_ID")).append("=").append(AD_User_Name).append("/").append(AD_User_Name).append("\n");  name=userOrg;  if (name == null || name.length() == 0)   name=m_clientName + "Org";  AD_User_U_ID=getNextID(AD_Client_ID,"AD_User");  AD_User_U_Name=name;  name=DB.TO_STRING(name);  sql="INSERT INTO AD_User(" + m_stdColumns + ",AD_User_ID,"+ "Name,Description,Password)"+ " VALUES ("+ m_stdValues+ ","+ AD_User_U_ID+ ","+ name+ ","+ name+ ","+ name+ ")";  no=DB.executeUpdate(sql,m_trx.getTrxName());  if (no != 1) {    String err="Org User NOT inserted - " + AD_User_U_Name;    log.log(Level.SEVERE,err);    m_info.append(err);    m_trx.rollback();    m_trx.close();    return false;  }  m_info.append(Msg.translate(m_lang,"AD_User_ID")).append("=").append(AD_User_U_Name).append("/").append(AD_User_U_Name).append("\n");  sql="INSERT INTO AD_User_Roles(" + m_stdColumns + ",AD_User_ID,AD_Role_ID)"+ " VALUES ("+ m_stdValues+ ","+ AD_User_ID+ ","+ admin.getAD_Role_ID()+ ")";  no=DB.executeUpdate(sql,m_trx.getTrxName());  if (no != 1)   log.log(Level.SEVERE,"UserRole ClientUser+Admin NOT inserted");  sql="INSERT INTO AD_User_Roles(" + m_stdColumns + ",AD_User_ID,AD_Role_ID)"+ " VALUES ("+ m_stdValues+ ","+ AD_User_ID+ ","+ user.getAD_Role_ID()+ ")";  no=DB.executeUpdate(sql,m_trx.getTrxName());  if (no != 1)   log.log(Level.SEVERE,"UserRole ClientUser+User NOT inserted");  sql="INSERT INTO AD_User_Roles(" + m_stdColumns + ",AD_User_ID,AD_Role_ID)"+ " VALUES ("+ m_stdValues+ ","+ AD_User_U_ID+ ","+ user.getAD_Role_ID()+ ")";  no=DB.executeUpdate(sql,m_trx.getTrxName());  if (no != 1)   log.log(Level.SEVERE,"UserRole OrgUser+Org NOT inserted");  MAcctProcessor ap=new MAcctProcessor(m_client,AD_User_ID);  ap.saveEx();  MRequestProcessor rp=new MRequestProcessor(m_client,AD_User_ID);  rp.saveEx();  log.info("fini");  return true;}  }
class C{  @Override public void executeAction(Agent agent,Action action){  if (action instanceof QueenAction) {    QueenAction act=(QueenAction)action;    XYLocation loc=new XYLocation(act.getX(),act.getY());    if (act.getName() == QueenAction.PLACE_QUEEN)     board.addQueenAt(loc); else     if (act.getName() == QueenAction.REMOVE_QUEEN)     board.removeQueenFrom(loc); else     if (act.getName() == QueenAction.MOVE_QUEEN)     board.moveQueenTo(loc);    if (agent == null)     updateEnvironmentViewsAgentActed(agent,action);  }}  }
class C{  public SearchRequest scroll(TimeValue keepAlive){  return scroll(new Scroll(keepAlive));}  }
class C{  public TaskList activateFullCopy(URI sourceURI,URI fullCopyURI) throws InternalException {  s_logger.info("START activate full copy {}",fullCopyURI);  Map<URI,BlockObject> resourceMap=BlockFullCopyUtils.verifySourceAndFullCopy(sourceURI,fullCopyURI,_uriInfo,_dbClient);  BlockObject fcSourceObj=resourceMap.get(sourceURI);  Volume fullCopyVolume=(Volume)resourceMap.get(fullCopyURI);  if (BlockFullCopyUtils.isFullCopyDetached(fullCopyVolume,_dbClient)) {    throw APIException.badRequests.detachedFullCopyCannotBeActivated(fullCopyURI.toString());  }  boolean alreadyActive=!BlockFullCopyUtils.isFullCopyInactive(fullCopyVolume,_dbClient);  BlockFullCopyApi fullCopyApiImpl=getPlatformSpecificFullCopyImpl(fullCopyVolume);  TaskList taskList=fullCopyApiImpl.activate(fcSourceObj,fullCopyVolume);  if (!alreadyActive) {    auditOp(OperationTypeEnum.ACTIVATE_VOLUME_FULL_COPY,true,AuditLogManager.AUDITOP_BEGIN,fullCopyURI);  }  s_logger.info("FINISH activate full copy {}",fullCopyURI);  return taskList;}  }
class C{  @OnError public void onError(Session session,Throwable t){  callInternal("onError",session,t.getMessage());  logger.error(t.getMessage(),t);}  }
class C{  public boolean contains(char ch){  char[] thisBuf=buffer;  for (int i=0; i < this.size; i++) {    if (thisBuf[i] == ch) {      return true;    }  }  return false;}  }
class C{  private void initKeyboardButtons(KeyboardView view){  mButtons=new ArrayList<>();  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_0));  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_1));  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_2));  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_3));  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_4));  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_5));  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_6));  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_7));  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_8));  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_9));  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_clear));  for (  View button : mButtons) {    button.setOnClickListener(this);  }}  }
class C{  protected AssociationRequest(AssociationSessionType type,DiffieHellmanSession dhSess){  if (DEBUG)   _log.debug("Creating association request, type: " + type + "DH session: "+ dhSess);  if (type.isVersion2())   set("openid.ns",OPENID2_NS);  set("openid.mode",MODE_ASSOC);  set("openid.session_type",type.getSessionType());  set("openid.assoc_type",type.getAssociationType());  _dhSess=dhSess;  if (dhSess != null) {    set("openid.dh_consumer_public",_dhSess.getPublicKey());    if (!DiffieHellmanSession.DEFAULT_GENERATOR_BASE64.equals(_dhSess.getGenerator()) || !DiffieHellmanSession.DEFAULT_MODULUS_BASE64.equals(_dhSess.getModulus())) {      set("openid.dh_gen",_dhSess.getGenerator());      set("openid.dh_modulus",_dhSess.getModulus());    }  }}  }
class C{  public void testReceive_UnconnectedNull() throws Exception {  assertFalse(this.channel1.isConnected());  try {    this.channel1.receive(null);    fail("Should throw a NPE here.");  } catch (  NullPointerException e) {  }}  }
class C{  private void buildPieces(){  pieces=new Piece[pathArray.size()];  Paint paint=new Paint();  Matrix matrix=new Matrix();  Canvas canvas=new Canvas();  for (int i=0; i < pieces.length; i++) {    int shadow=Utils.nextInt(Utils.dp2px(2),Utils.dp2px(9));    Path path=pathArray.get(i);    RectF r=new RectF();    path.computeBounds(r,true);    Bitmap pBitmap=Utils.createBitmapSafely((int)r.width() + shadow * 2,(int)r.height() + shadow * 2,Bitmap.Config.ARGB_4444,1);    if (pBitmap == null) {      pieces[i]=new Piece(-1,-1,null,shadow);      continue;    }    pieces[i]=new Piece((int)r.left + mTouchPoint.x - shadow,(int)r.top + mTouchPoint.y - shadow,pBitmap,shadow);    canvas.setBitmap(pieces[i].bitmap);    BitmapShader mBitmapShader=new BitmapShader(mBitmap,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);    matrix.reset();    matrix.setTranslate(-r.left - offsetX + shadow,-r.top - offsetY + shadow);    mBitmapShader.setLocalMatrix(matrix);    paint.reset();    Path offsetPath=new Path();    offsetPath.addPath(path,-r.left + shadow,-r.top + shadow);    paint.setStyle(Paint.Style.FILL);    paint.setShadowLayer(shadow,0,0,0xff333333);    canvas.drawPath(offsetPath,paint);    paint.setShadowLayer(0,0,0,0);    paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.XOR));    canvas.drawPath(offsetPath,paint);    paint.setXfermode(null);    paint.setShader(mBitmapShader);    paint.setAlpha(0xcc);    canvas.drawPath(offsetPath,paint);  }  Arrays.sort(pieces);}  }
class C{  public synchronized void add(String k,String v){  grow();  keys[nkeys]=k;  values[nkeys]=v;  nkeys++;}  }
class C{  public ClusterJoinResponseMessage(ClusterJoinResponseMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.newNodeId=other.newNodeId;  if (other.isSetNodeStore()) {    List<KeyedValues> __this__nodeStore=new ArrayList<KeyedValues>();    for (    KeyedValues other_element : other.nodeStore) {      __this__nodeStore.add(new KeyedValues(other_element));    }    this.nodeStore=__this__nodeStore;  }}  }
class C{  public boolean isCanReport(){  Object oo=get_Value(COLUMNNAME_IsCanReport);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void updateBinaryStream(int columnIndex,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBinaryStream(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createBlob(x,length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public GenLOSDriver(ServerInterpreter server,String spaceName,LargeObjectSpace lospace,int blockSize,int threshold,boolean mainSpace){  super(server,spaceName,lospace,blockSize,threshold,mainSpace);  remsetStream=createRemsetStream();  resetData();}  }
class C{  public void populateUnmatchesFromMatches(){  this.unmatch.clear();  int previousMatchFinalIndex=0;  for (  DataSet.Bounds oneMatch : this.match) {    if (oneMatch.start > previousMatchFinalIndex) {      this.addUnmatchBounds(previousMatchFinalIndex,oneMatch.start);    }    previousMatchFinalIndex=oneMatch.end;  }  if (previousMatchFinalIndex < string.length()) {    this.addUnmatchBounds(previousMatchFinalIndex,string.length());  }}  }
class C{  public void timingEvent(float fraction){  alpha=fraction;  repaint();}  }
class C{  public void rebind(String name,Object obj) throws NamingException {  rebind(nameParser.parse(name),obj);}  }
class C{  public String formatCheckShareForExportCmd(String dataMover,List<VNXFileExport> exports,Map<String,String> userInfo,String netBios){  if (exports.isEmpty()) {    _log.debug("There is no entry to export");    return null;  }  String mountPoint=entryPathsDiffer(exports);  if (mountPoint == null) {    _log.debug("Single ssh API command is being applied to multiple paths.");    return null;  }  String exportName=exports.get(0).getExportName();  if (exportName == null) {    return null;  }  StringBuilder cmd=new StringBuilder();  cmd.append(dataMover);  cmd.append(" -list -name ");  cmd.append(exportName);  return cmd.toString();}  }
class C{  @Override public void handleEvent(Event evt){  Element e=(Element)evt.getTarget();  if (SVGConstants.SVG_EVENT_MOUSEOVER.equals(evt.getType())) {    if (overclass != null) {      SVGUtil.addCSSClass(e,overclass);    }    if (outclass != null) {      SVGUtil.removeCSSClass(e,outclass);    }  }  if (SVGConstants.SVG_EVENT_MOUSEOUT.equals(evt.getType())) {    if (overclass != null) {      SVGUtil.removeCSSClass(e,overclass);    }    if (outclass != null) {      SVGUtil.addCSSClass(e,outclass);    }  }  if (clickisout && SVGConstants.SVG_EVENT_CLICK.equals(evt.getType())) {    if (overclass != null) {      SVGUtil.removeCSSClass(e,overclass);    }    if (outclass != null) {      SVGUtil.addCSSClass(e,outclass);    }  }}  }
class C{  public CameraCoordinateTransformer(boolean mirrorX,int displayOrientation,RectF previewRect){  if (!hasNonZeroArea(previewRect)) {    throw new IllegalArgumentException("previewRect");  }  mCameraToPreviewTransform=cameraToPreviewTransform(mirrorX,displayOrientation,previewRect);  mPreviewToCameraTransform=inverse(mCameraToPreviewTransform);}  }
class C{  @SuppressWarnings({"HardCodedStringLiteral"}) public String toString(){  final String absolutePath=(file != null) ? file.getAbsolutePath() : "null";  return "File: " + absolutePath + "\nRepositoryFile: "+ rcsFileName+ "\nHead revision: "+ headRevision;}  }
class C{  public void initializeWith(IntArrayList list,DictionaryMap map){  for (  int key : list) {    add(map.get(key));  }}  }
class C{  public ResultEntry(NondominatedPopulation population,TypedProperties properties){  this(population,properties == null ? null : properties.getProperties());}  }
class C{  public double time(){  return getTime();}  }
class C{  public void shutDown(){  FrescoPlusCore.shutDownDraweeControllerBuilderSupplier();  FrescoPlusView.shutDown();  ImagePipelineFactory.shutDown();}  }
class C{  public void write(byte x){  writeByte(x & 0xff);}  }
class C{  public void filterUnsafeOrUnnecessaryRequest(Map<String,NodeReqResponse> nodeDataMapValidSource,Map<String,NodeReqResponse> nodeDataMapValidSafe){  for (  Entry<String,NodeReqResponse> entry : nodeDataMapValidSource.entrySet()) {    String hostName=entry.getKey();    NodeReqResponse nrr=entry.getValue();    Map<String,String> map=nrr.getRequestParameters();    if (map.containsKey(PcConstants.NODE_REQUEST_WILL_EXECUTE)) {      Boolean willExecute=Boolean.parseBoolean(map.get(PcConstants.NODE_REQUEST_WILL_EXECUTE));      if (!willExecute) {        logger.info("NOT_EXECUTE_COMMAND " + " on target: " + hostName + " at "+ PcDateUtils.getNowDateTimeStrStandard());        continue;      }    }    nodeDataMapValidSafe.put(hostName,nrr);  }}  }
class C{  public boolean contains(String key){  return sharedPreferences.contains(key);}  }
class C{  private static String massageURI(String uri){  uri=uri.trim();  int protocolEnd=uri.indexOf(':');  if (protocolEnd < 0) {    uri="http://" + uri;  } else   if (isColonFollowedByPortNumber(uri,protocolEnd)) {    uri="http://" + uri;  }  return uri;}  }
class C{  public void removeElements(final int from,final int to){  it.unimi.dsi.fastutil.Arrays.ensureFromTo(size,from,to);  System.arraycopy(a,to,a,from,size - to);  size-=(to - from);  int i=to - from;  while (i-- != 0)   a[size + i]=null;}  }
class C{  public void addAttributeNS(QName name,String type,String value){  int index=fLength;  if (fLength++ == fAttributes.length) {    Attribute[] attributes;    if (fLength < SIZE_LIMIT) {      attributes=new Attribute[fAttributes.length + 4];    } else {      attributes=new Attribute[fAttributes.length << 1];    }    System.arraycopy(fAttributes,0,attributes,0,fAttributes.length);    for (int i=fAttributes.length; i < attributes.length; i++) {      attributes[i]=new AttributeMMImpl();    }    fAttributes=attributes;  }  Attribute attribute=fAttributes[index];  attribute.name.setValues(name);  attribute.type=type;  attribute.value=value;  attribute.nonNormalizedValue=value;  attribute.specified=false;  attribute.augs.removeAllItems();}  }
class C{  private static void copySwap(Object[] src,int from,Object[] dst,int to,int len){  if (src == dst && from + len > to) {    int new_to=to + len - 1;    for (; from < to; from++, new_to--, len--) {      dst[new_to]=src[from];    }    for (; len > 1; from++, new_to--, len-=2) {      swap(from,new_to,dst);    }  } else {    to=to + len - 1;    for (; len > 0; from++, to--, len--) {      dst[to]=src[from];    }  }}  }
class C{  public double distance(Vector3 a){  return Vector3.distance(a,this);}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z;  int i, c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    WhiteboxRaster numInflowingStreamCells=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,noData);    numInflowingStreamCells.isTemporaryFile=true;    byte numNeighbouringStreamCells=0;    double currentValue=0;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            output.setValue(row,col,1);            numInflowingStreamCells.setValue(row,col,-1);          } else {            output.setValue(row,col,0);            numInflowingStreamCells.setValue(row,col,numNeighbouringStreamCells);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (numInflowingStreamCells.getValue(row,col) == -1) {          x=col;          y=row;          flag=true;          do {            z=output.getValue(y,x);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              if (c > 7) {                showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                return;              }              x+=dX[c];              y+=dY[c];              if (streams.getValue(y,x) <= 0) {                flag=false;              } else {                currentValue=numInflowingStreamCells.getValue(y,x) - 1;                numInflowingStreamCells.setValue(y,x,currentValue);                if (currentValue > 0) {                  flag=false;                }                currentValue=output.getValue(y,x);                output.setValue(y,x,z + currentValue);              }            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    numInflowingStreamCells.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ByteVector put8(final long l){  int length=this.length;  if (length + 8 > data.length) {    enlarge(8);  }  byte[] data=this.data;  int i=(int)(l >>> 32);  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  i=(int)l;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public KMLBalloonStyle(String namespaceURI){  super(namespaceURI);}  }
class C{  public ShortArrayList bottom(int n){  ShortArrayList bottom=new ShortArrayList();  short[] values=data.toShortArray();  ShortArrays.parallelQuickSort(values);  for (int i=0; i < n && i < values.length; i++) {    bottom.add(values[i]);  }  return bottom;}  }
class C{  public boolean isConstructor(){  return (Objects.equal(this.getName(),"constructor") && (!this.isStatic()));}  }
class C{  public void closeDialog(){  setVisible(false);  ModificationRegistery.unregisterEditor(getEditor());  doDefaultCloseAction();}  }
class C{  public static char toCharValue(boolean b){  return (char)(b ? 1 : 0);}  }
class C{  public synchronized void clear(){  mCategories.clear();  mValues.clear();}  }
class C{  public void addDocument(String name,int parentDivId,String fileExt,int sortOrder,String pathDocumentFile,String pathDocAnnFile) throws Exception {  checkExistsParent(parentDivId);  checkValidDocumentName(parentDivId,name);  m_documents.addNewDocument(name,parentDivId,fileExt,sortOrder,pathDocumentFile,pathDocAnnFile);}  }
class C{  public void onDown(long time){  mDragLock=DragLock.NONE;  if (mOverviewAnimationType == OverviewAnimationType.NONE) {    stopScrollingMovement(time);  }  mScrollingTab=null;  commitDiscard(time,false);}  }
class C{  protected InferredType mergeTarget(final TypeVariable target,final InferenceResult subordinate){  final InferredValue inferred=this.get(target);  if (inferred instanceof InferredTarget) {    InferredType newType=mergeTarget(((InferredTarget)inferred).target,subordinate);    if (newType == null) {      final InferredValue subValue=subordinate.get(target);      if (subValue != null && subValue instanceof InferredType) {        this.put(target,subValue);        return newType;      }    } else {      if (newType.type.getKind() == TypeKind.NULL) {        final InferredValue subValue=subordinate.get(target);        if (subValue != null && subValue instanceof InferredType) {          AnnotatedTypeMirror copy=((InferredType)subValue).type.deepCopy();          copy.replaceAnnotations(newType.type.getAnnotations());          newType=new InferredType(copy);        }      }      this.put(target,newType);      return newType;    }    return null;  }  return (InferredType)inferred;}  }
class C{  private void timeout(boolean suspectThem,boolean severeAlert){  if (!this.processTimeout())   return;  Set activeMembers=getDistributionManagerIds();  long timeout=getAckWaitThreshold();  final Object[] msgArgs=new Object[]{Long.valueOf(timeout + (severeAlert ? getSevereAlertThreshold() : 0)),this,getDistributionManager().getId(),activeMembers};  final StringId msg=LocalizedStrings.ReplyProcessor21_0_SEC_HAVE_ELAPSED_WHILE_WAITING_FOR_REPLIES_1_ON_2_WHOSE_CURRENT_MEMBERSHIP_LIST_IS_3;  if (severeAlert) {    logger.fatal(LocalizedMessage.create(msg,msgArgs));  } else {    logger.warn(LocalizedMessage.create(msg,msgArgs));  }  msgArgs[3]="(omitted)";  Breadcrumbs.setProblem(msg,msgArgs);  getDistributionManager().getStats().incReplyTimeouts();  final Set suspectMembers;  if (suspectThem || severeAlert) {    suspectMembers=new HashSet();  } else {    suspectMembers=null;  }synchronized (this.members) {    for (int i=0; i < this.members.length; i++) {      if (this.members[i] != null) {        if (!activeMembers.contains(this.members[i])) {          logger.warn(LocalizedMessage.create(LocalizedStrings.ReplyProcessor21_VIEW_NO_LONGER_HAS_0_AS_AN_ACTIVE_MEMBER_SO_WE_WILL_NO_LONGER_WAIT_FOR_IT,this.members[i]));          memberDeparted(this.members[i],false);        } else {          if (suspectMembers != null) {            suspectMembers.add(this.members[i]);          }        }      }    }  }  if (THROW_EXCEPTION_ON_TIMEOUT) {    TimeoutException cause=new TimeoutException(LocalizedStrings.TIMED_OUT_WAITING_FOR_ACKS.toLocalizedString());    throw new InternalGemFireException(LocalizedStrings.ReplyProcessor21_0_SEC_HAVE_ELAPSED_WHILE_WAITING_FOR_REPLIES_1_ON_2_WHOSE_CURRENT_MEMBERSHIP_LIST_IS_3.toLocalizedString(msgArgs),cause);  } else   if (suspectThem) {    if (suspectMembers != null && suspectMembers.size() > 0) {      getDistributionManager().getMembershipManager().suspectMembers(suspectMembers,"Failed to respond within ack-wait-threshold");    }  }}  }
class C{  @Override public void updateAsciiStream(int columnIndex,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateAsciiStream(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(IOUtils.getAsciiReader(x),length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void alert(Context context,OsmElement e){  Preferences prefs=new Preferences(context);  if (!prefs.generateAlerts()) {    return;  }  LocationManager locationManager=(LocationManager)context.getApplicationContext().getSystemService(Context.LOCATION_SERVICE);  Location location=null;  try {    location=locationManager.getLastKnownLocation("gps");  } catch (  SecurityException sex) {  }  double eLon=0D;  double eLat=0D;  if ("node".equals(e.getName())) {    eLon=((Node)e).getLon() / 1E7D;    eLat=((Node)e).getLat() / 1E7D;  } else   if ("way".equals(e.getName())) {    double[] result=Logic.centroidLonLat((Way)e);    eLon=result[0];    eLat=result[1];  } else {    return;  }  String title=context.getString(R.string.alert_data_issue);  String ticker=title;  String message="";  if (location != null) {    long distance=0;    if ("node".equals(e.getName())) {      distance=Math.round(GeoMath.haversineDistance(location.getLongitude(),location.getLatitude(),eLon,eLat));    } else     if ("way".equals(e.getName())) {      ClosestPoint cp=getClosestDistance(location.getLongitude(),location.getLatitude(),(Way)e);      distance=Math.round(cp.distance);      eLon=cp.lon;      eLat=cp.lat;    }    if (distance > prefs.getMaxAlertDistance()) {      return;    }    long bearing=GeoMath.bearing(location.getLongitude(),location.getLatitude(),eLon,eLat);    String[] bearings={"NE","E","SE","S","SW","W","NW","N"};    int index=(int)(bearing - 22.5);    if (index < 0)     index+=360;    index=index / 45;    message=context.getString(R.string.alert_distance_direction,distance,bearings[index]) + "\n";    ticker=ticker + " " + message;  }  message=message + e.describeProblem();  NotificationCompat.Builder mBuilder;  try {    mBuilder=new NotificationCompat.Builder(context).setSmallIcon(R.drawable.osm_logo).setContentTitle(title).setContentText(message).setPriority(NotificationCompat.PRIORITY_HIGH).setTicker(ticker).setAutoCancel(true).setGroup(GROUP_DATA);  } catch (  RuntimeException re) {    ACRA.getErrorReporter().putCustomData("STATUS","NOCRASH");    ACRA.getErrorReporter().handleException(re);    return;  }  Intent resultIntent=new Intent(Intent.ACTION_VIEW);  try {    BoundingBox box=GeoMath.createBoundingBoxForCoordinates(eLat,eLon,prefs.getDownloadRadius(),true);    Uri rc=Uri.parse("http://127.0.0.1:8111/load_and_zoom?left=" + box.getLeft() / 1E7D + "&right=" + box.getRight() / 1E7D + "&top=" + box.getTop() / 1E7D + "&bottom=" + box.getBottom() / 1E7D + "&select=" + e.getName() + e.getOsmId());    Log.d("IssueAlert",rc.toString());    resultIntent.setData(rc);    TaskStackBuilder stackBuilder=TaskStackBuilder.create(context);    stackBuilder.addParentStack(Main.class);    stackBuilder.addNextIntent(resultIntent);    PendingIntent resultPendingIntent=stackBuilder.getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT);    mBuilder.setContentIntent(resultPendingIntent);    NotificationManager mNotificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);    mNotificationManager.notify(id(e),mBuilder.build());    Application.getOsmDataNotifications(context).save(mNotificationManager,id(e));  } catch (  OsmException e1) {    Log.d("IssueAlert","Illegal BB created from lat " + eLat + " lon "+ eLon+ " r "+ prefs.getDownloadRadius());  }}  }
class C{  private MutableBigInteger divideLongMagnitude(long ldivisor,MutableBigInteger quotient){  MutableBigInteger rem=new MutableBigInteger(new int[intLen + 1]);  System.arraycopy(value,offset,rem.value,1,intLen);  rem.intLen=intLen;  rem.offset=1;  int nlen=rem.intLen;  int limit=nlen - 2 + 1;  if (quotient.value.length < limit) {    quotient.value=new int[limit];    quotient.offset=0;  }  quotient.intLen=limit;  int[] q=quotient.value;  int shift=Long.numberOfLeadingZeros(ldivisor);  if (shift > 0) {    ldivisor<<=shift;    rem.leftShift(shift);  }  if (rem.intLen == nlen) {    rem.offset=0;    rem.value[0]=0;    rem.intLen++;  }  int dh=(int)(ldivisor >>> 32);  long dhLong=dh & LONG_MASK;  int dl=(int)(ldivisor & LONG_MASK);  for (int j=0; j < limit; j++) {    int qhat=0;    int qrem=0;    boolean skipCorrection=false;    int nh=rem.value[j + rem.offset];    int nh2=nh + 0x80000000;    int nm=rem.value[j + 1 + rem.offset];    if (nh == dh) {      qhat=~0;      qrem=nh + nm;      skipCorrection=qrem + 0x80000000 < nh2;    } else {      long nChunk=(((long)nh) << 32) | (nm & LONG_MASK);      if (nChunk >= 0) {        qhat=(int)(nChunk / dhLong);        qrem=(int)(nChunk - (qhat * dhLong));      } else {        long tmp=divWord(nChunk,dh);        qhat=(int)(tmp & LONG_MASK);        qrem=(int)(tmp >>> 32);      }    }    if (qhat == 0)     continue;    if (!skipCorrection) {      long nl=rem.value[j + 2 + rem.offset] & LONG_MASK;      long rs=((qrem & LONG_MASK) << 32) | nl;      long estProduct=(dl & LONG_MASK) * (qhat & LONG_MASK);      if (unsignedLongCompare(estProduct,rs)) {        qhat--;        qrem=(int)((qrem & LONG_MASK) + dhLong);        if ((qrem & LONG_MASK) >= dhLong) {          estProduct-=(dl & LONG_MASK);          rs=((qrem & LONG_MASK) << 32) | nl;          if (unsignedLongCompare(estProduct,rs))           qhat--;        }      }    }    rem.value[j + rem.offset]=0;    int borrow=mulsubLong(rem.value,dh,dl,qhat,j + rem.offset);    if (borrow + 0x80000000 > nh2) {      divaddLong(dh,dl,rem.value,j + 1 + rem.offset);      qhat--;    }    q[j]=qhat;  }  if (shift > 0)   rem.rightShift(shift);  quotient.normalize();  rem.normalize();  return rem;}  }
class C{  public boolean isFatalEnabled(){  return (getLogger().isLoggable(Level.SEVERE));}  }
class C{  private void addProteinToBatch(Protein protein){  proteinsAwaitingPersistence.add(protein);  if (proteinsAwaitingPersistence.size() == proteinInsertBatchSize) {    persistBatch();  }}  }
class C{  public Account(Account other){  if (other.isSetUserid()) {    this.userid=other.userid;  }  if (other.isSetPasswd()) {    this.passwd=other.passwd;  }}  }
class C{  public final AC shrink(){  return shrink(100f,curIx);}  }
class C{  public Optional<T> filter(Predicate<? super T> predicate){  if (!isPresent())   return this;  return predicate.test(value) ? this : Optional.<T>empty();}  }
class C{  private DateUtils(){}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TENUM;}  }
class C{  public void sort(ArrayList<Value[]> rows){  Collections.sort(rows,this);}  }
class C{  private void generateMatrix(){  final int dwidth=mDrawable.getIntrinsicWidth();  final int dheight=mDrawable.getIntrinsicHeight();  final int vwidth=mAllowCrop ? sCropSize : getWidth();  final int vheight=mAllowCrop ? sCropSize : getHeight();  final boolean fits=(dwidth < 0 || vwidth == dwidth) && (dheight < 0 || vheight == dheight);  if (fits && !mAllowCrop) {    mMatrix.reset();  } else {    mTempSrc.set(0,0,dwidth,dheight);    if (mAllowCrop) {      mTempDst.set(mCropRect);    } else {      mTempDst.set(0,0,vwidth,vheight);    }    RectF scaledDestination=new RectF((vwidth / 2) - (dwidth * mMaxInitialScaleFactor / 2),(vheight / 2) - (dheight * mMaxInitialScaleFactor / 2),(vwidth / 2) + (dwidth * mMaxInitialScaleFactor / 2),(vheight / 2) + (dheight * mMaxInitialScaleFactor / 2));    if (mTempDst.contains(scaledDestination)) {      mMatrix.setRectToRect(mTempSrc,scaledDestination,Matrix.ScaleToFit.CENTER);    } else {      mMatrix.setRectToRect(mTempSrc,mTempDst,Matrix.ScaleToFit.CENTER);    }  }  mOriginalMatrix.set(mMatrix);}  }
class C{  public LingRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  protected void onServiceStarted(){}  }
class C{  private int indexOf(K key){  for (int i=0, n=entries.size(); i < n; i++)   if (keyEquality.areEqual(entries.get(i).getKey(),key))   return i;  return -1;}  }
class C{  public void addNotificationListener(NotificationListener listener,NotificationFilter filter,Object handback) throws IllegalArgumentException {  broadcaster.addNotificationListener(listener,filter,handback);}  }
class C{  public double calculateSimilarity(PatternReference pattern){  if (patterns.isEmpty()) {    return 0;  } else {    final double sum=patterns.stream().map(null).reduce(0.0,null);    return sum / size();  }}  }
class C{  protected void update(ControlDecoration decoration,IStatus status){  if (status == null || status.isOK()) {    decoration.hide();  } else {    decoration.setImage(getImage(status));    decoration.setDescriptionText(getDescriptionText(status));    decoration.showHoverText(getDescriptionText(status));    decoration.show();  }}  }
class C{  public TransferSubscriptionsResponse TransferSubscriptions(RequestHeader RequestHeader,UnsignedInteger[] SubscriptionIds,Boolean SendInitialValues) throws ServiceFaultException, ServiceResultException {  TransferSubscriptionsRequest req=new TransferSubscriptionsRequest(RequestHeader,SubscriptionIds,SendInitialValues);  return (TransferSubscriptionsResponse)channel.serviceRequest(req);}  }
class C{  protected void loadSteps(){  if (stepsHash != null) {    loadStepsSet();    return;  }  if (toReplace != null) {    steps=toReplace;    size=steps.length;    toReplace=null;  }  int toBeRemovedSize=toBeRemoved.size();  if (toBeRemovedSize > 0) {    boolean ensuresOrder=this.ensuresOrder && canEnsureOrder();    Steppable[] steps=this.steps;    Bag toBeRemoved=this.toBeRemoved;    int stepsSize=this.size;    for (int s=stepsSize - 1; s >= 0; s--) {      for (int r=0; r < toBeRemovedSize; r++) {        if (steps[s] == toBeRemoved.get(r)) {          if (s < stepsSize - 1) {            if (ensuresOrder)             System.arraycopy(steps,s + 1,steps,s,stepsSize - s - 1); else             steps[s]=steps[stepsSize - 1];          }          steps[stepsSize - 1]=null;          stepsSize--;          toBeRemoved.remove(r);          toBeRemovedSize--;          break;        }      }      if (toBeRemovedSize == 0) {        break;      }    }    toBeRemoved.clear();    this.size=stepsSize;  }  int toBeAddedSize=this.toBeAdded.size();  if (toBeAddedSize > 0) {    Bag toBeAdded=this.toBeAdded;    int stepsSize=this.size;    int newLen=stepsSize + toBeAddedSize;    if (newLen >= steps.length) {      int newSize=steps.length * 2 + 1;      if (newSize <= newLen)       newSize=newLen;      Steppable[] newSteppables=new Steppable[newSize];      System.arraycopy(steps,0,newSteppables,0,steps.length);      this.steps=newSteppables;      steps=newSteppables;    }    if (toBeAddedSize < 20)     for (int i=0; i < toBeAddedSize; i++)     steps[stepsSize + i]=(Steppable)(toBeAdded.get(i)); else     toBeAdded.copyIntoArray(0,steps,stepsSize,toBeAddedSize);    toBeAdded.clear();    this.size=newLen;  }}  }
class C{  public static void formatJapaneseNumber(Editable text){  JapanesePhoneNumberFormatter.format(text);}  }
class C{  public static int[] matrixToArray(int[][] input,int fromRow,int rows,int fromColumn,int columns){  int[] output=new int[rows * columns];  for (int c=0; c < columns; c++) {    for (int r=0; r < rows; r++) {      output[c * rows + r]=input[r + fromRow][c + fromColumn];    }  }  return output;}  }
class C{  @Override public void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException {  heartBeater.needHeartBeat();  try {    runner.map(value.toString(),context.getConfiguration(),context);  }  finally {    heartBeater.cancelHeartBeat();  }}  }
class C{  public boolean isPersistent(){  return persistent;}  }
class C{  @EventHandler public void onPlayerJoin(PlayerJoinEvent event){  Player player=event.getPlayer();  playerChannels.put(player,new PlayerChannel(player));}  }
class C{  public void undoCommand(IUndoableCommand command){  IUndoableCommand temp;  do {    temp=undoStack.pop();    temp.undo();    redoStack.push(temp);  } while (temp != command);  fireOperationsHistoryChanged();}  }
class C{  private static void checkEqualPartitionMaps(Map<Integer,ClusterNode> map1,Map<Integer,ClusterNode> map2){  assertEquals(map1.size(),map2.size());  for (  Integer i : map1.keySet()) {    assertTrue(map2.containsKey(i));    assertEquals(map1.get(i),map2.get(i));  }}  }
class C{  public TransactionDeadlockException(String msg){  super(msg);}  }
class C{  public void put(AuthTimeWithHash t,KerberosTime currentTime) throws KrbApErrException {  if (entries.isEmpty()) {    entries.addFirst(t);  } else {    AuthTimeWithHash temp=entries.getFirst();    int cmp=temp.compareTo(t);    if (cmp < 0) {      entries.addFirst(t);    } else     if (cmp == 0) {      throw new KrbApErrException(Krb5.KRB_AP_ERR_REPEAT);    } else {      ListIterator<AuthTimeWithHash> it=entries.listIterator(1);      boolean found=false;      while (it.hasNext()) {        temp=it.next();        cmp=temp.compareTo(t);        if (cmp < 0) {          entries.add(entries.indexOf(temp),t);          found=true;          break;        } else         if (cmp == 0) {          throw new KrbApErrException(Krb5.KRB_AP_ERR_REPEAT);        }      }      if (!found) {        entries.addLast(t);      }    }  }  long timeLimit=currentTime.getSeconds() - lifespan;  ListIterator<AuthTimeWithHash> it=entries.listIterator(0);  AuthTimeWithHash temp=null;  int index=-1;  while (it.hasNext()) {    temp=it.next();    if (temp.ctime < timeLimit) {      index=entries.indexOf(temp);      break;    }  }  if (index > -1) {    do {      entries.removeLast();    } while (entries.size() > index);  }}  }
class C{  public int selectedWaysCount(){  return selectedWays == null ? 0 : selectedWays.size();}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("BasketServlet.init");}  }
class C{  @SuppressWarnings("unchecked") public static final <K,V>Map<K,V> mergeMapEntry(CodedInputByteBufferNano input,Map<K,V> map,MapFactory mapFactory,int keyType,int valueType,V value,int keyTag,int valueTag) throws IOException {  map=mapFactory.forMap(map);  final int length=input.readRawVarint32();  final int oldLimit=input.pushLimit(length);  K key=null;  while (true) {    int tag=input.readTag();    if (tag == 0) {      break;    }    if (tag == keyTag) {      key=(K)input.readPrimitiveField(keyType);    } else     if (tag == valueTag) {      if (valueType == TYPE_MESSAGE) {        input.readMessage((MessageNano)value);      } else {        value=(V)input.readPrimitiveField(valueType);      }    } else {      if (!input.skipField(tag)) {        break;      }    }  }  input.checkLastTagWas(0);  input.popLimit(oldLimit);  if (key == null) {    key=(K)primitiveDefaultValue(keyType);  }  if (value == null) {    value=(V)primitiveDefaultValue(valueType);  }  map.put(key,value);  return map;}  }
class C{  public synchronized boolean hasService(Class serviceClass){  if (serviceClass == null)   throw new NullPointerException("serviceClass");synchronized (BeanContext.globalHierarchyLock) {    if (services.containsKey(serviceClass))     return true;    BeanContextServices bcs=null;    try {      bcs=(BeanContextServices)getBeanContext();    } catch (    ClassCastException cce) {      return false;    }    return bcs == null ? false : bcs.hasService(serviceClass);  }}  }
class C{  public static int readSingleByte(InputStream in) throws IOException {  byte[] buffer=new byte[1];  int result=in.read(buffer,0,1);  return (result != -1) ? buffer[0] & 0xff : -1;}  }
class C{  public static void tred2(int n,double[][] V,double[] d,double[] e){  for (int j=0; j < n; j++) {    d[j]=V[n - 1][j];  }  for (int i=n - 1; i > 0; i--) {    double scale=0.0;    double h=0.0;    for (int k=0; k < i; k++) {      scale=scale + Math.abs(d[k]);    }    if (scale == 0.0) {      e[i]=d[i - 1];      for (int j=0; j < i; j++) {        d[j]=V[i - 1][j];        V[i][j]=0.0;        V[j][i]=0.0;      }    } else {      for (int k=0; k < i; k++) {        d[k]/=scale;        h+=d[k] * d[k];      }      double f=d[i - 1];      double g=Math.sqrt(h);      if (f > 0) {        g=-g;      }      e[i]=scale * g;      h=h - f * g;      d[i - 1]=f - g;      for (int j=0; j < i; j++) {        e[j]=0.0;      }      for (int j=0; j < i; j++) {        f=d[j];        V[j][i]=f;        g=e[j] + V[j][j] * f;        for (int k=j + 1; k <= i - 1; k++) {          g+=V[k][j] * d[k];          e[k]+=V[k][j] * f;        }        e[j]=g;      }      f=0.0;      for (int j=0; j < i; j++) {        e[j]/=h;        f+=e[j] * d[j];      }      double hh=f / (h + h);      for (int j=0; j < i; j++) {        e[j]-=hh * d[j];      }      for (int j=0; j < i; j++) {        f=d[j];        g=e[j];        for (int k=j; k <= i - 1; k++) {          V[k][j]-=(f * e[k] + g * d[k]);        }        d[j]=V[i - 1][j];        V[i][j]=0.0;      }    }    d[i]=h;  }  for (int i=0; i < n - 1; i++) {    V[n - 1][i]=V[i][i];    V[i][i]=1.0;    double h=d[i + 1];    if (h != 0.0) {      for (int k=0; k <= i; k++) {        d[k]=V[k][i + 1] / h;      }      for (int j=0; j <= i; j++) {        double g=0.0;        for (int k=0; k <= i; k++) {          g+=V[k][i + 1] * V[k][j];        }        for (int k=0; k <= i; k++) {          V[k][j]-=g * d[k];        }      }    }    for (int k=0; k <= i; k++) {      V[k][i + 1]=0.0;    }  }  for (int j=0; j < n; j++) {    d[j]=V[n - 1][j];    V[n - 1][j]=0.0;  }  V[n - 1][n - 1]=1.0;  e[0]=0.0;}  }
class C{  public void addMessageListener(MessageListener listener){  m_notifier.add(listener);}  }
class C{  public static final int[] toIntArray(String s){  s=new String(s.trim());  if (s.length() <= 2)   return new int[]{};  return toIntArray((s.substring(1,s.length() - 1)).split(","));}  }
class C{  public LambdaBlock(ToplevelPane pane,int arity){  super(pane);  this.loadFXML("LambdaBlock");  this.arity=arity;  this.signature.setText("");  this.explicitSignature=Optional.empty();  this.definitionName.setText("");  this.definitionName.setVisible(false);  this.allDefinitionUsers=new ArrayList<>();  this.body=new LambdaContainer(this,arity);  this.bodySpace.getChildren().add(this.body);  this.fun=new PolyOutputAnchor(this,new Binder("lam"));  this.funSpace.getChildren().add(this.fun);  this.dragContext.setGoToForegroundOnContact(false);  Polygon triangle=new Polygon();  triangle.getPoints().addAll(new Double[]{20.0,20.0,20.0,0.0,0.0,20.0});  triangle.setFill(Color.BLUE);  this.resizer=new Pane(triangle);  triangle.setLayoutX(10);  triangle.setLayoutY(10);  this.resizer.setManaged(false);  this.getChildren().add(resizer);  this.resizer.relocate(300,300);  DragContext sizeDrag=new DragContext(this.resizer);  sizeDrag.setDragLimits(new BoundingBox(200,200,Integer.MAX_VALUE,Integer.MAX_VALUE));  ((Pane)this.signature.getParent()).widthProperty().addListener(null);}  }
class C{  void unlink(Node<E> p,Node<E> trail){  p.item=null;  trail.next=p.next;  if (last == p)   last=trail;  if (count.getAndDecrement() == capacity)   notFull.signal();}  }
class C{  public static void i(String msg,Throwable thr){  if (DEBUG)   Log.i(TAG,buildMessage(msg),thr);}  }
class C{  public SpotPrice toAwsObject(){  SpotPrice spotPrice=new SpotPrice();  spotPrice.setAvailabilityZone(availabilityZone);  spotPrice.setInstanceType(type);  spotPrice.setSpotPrice(this.spotPrice);  return spotPrice;}  }
class C{  public static SnmpEngineId createEngineId(int port) throws UnknownHostException {  int suniana=42;  InetAddress address=null;  address=InetAddress.getLocalHost();  return createEngineId(address,port,suniana);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private DoubleDBIDList refineRange(DoubleDBIDList neighc,double adjustedEps){  ModifiableDoubleDBIDList n=DBIDUtil.newDistanceDBIDList(neighc.size());  for (DoubleDBIDListIter neighbor=neighc.iter(); neighbor.valid(); neighbor.advance()) {    DoubleDBIDPair p=neighbor.getPair();    double dist=p.doubleValue();    if (dist <= adjustedEps) {      n.add(dist,p);    }  }  return n;}  }
class C{  @Override protected void tearDown() throws Exception {  terminateApplication();  mApplication=null;  scrubClass(ApplicationTestCase.class);  super.tearDown();}  }
class C{  public int skipBytes(int num) throws IOException {  return inputStream.skipBytes(num);}  }
class C{  public final int countActions(){  return mActions.size();}  }
class C{  @Override public void run(){  amIActive=true;  String NIRHeader=null;  String RedHeader=null;  String outputHeader=null;  int row, col, x, y;  double[] NIRVal;  double[] redVal;  float progress=0;  int a;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      NIRHeader=args[i];    } else     if (i == 1) {      RedHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((NIRHeader == null) || (RedHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster NIR=new WhiteboxRaster(NIRHeader,"r");    int rows=NIR.getNumberRows();    int cols=NIR.getNumberColumns();    double noData=NIR.getNoDataValue();    WhiteboxRaster red=new WhiteboxRaster(RedHeader,"r");    if (rows != red.getNumberRows() || cols != red.getNumberColumns()) {      showFeedback("The two input images must have the same number of rows and columns.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",NIRHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(NIR.getPreferredPalette());    for (row=0; row < rows; row++) {      NIRVal=NIR.getRowValues(row);      redVal=red.getRowValues(row);      for (col=0; col < cols; col++) {        if (NIRVal[col] != noData && redVal[col] != noData) {          if ((NIRVal[col] + redVal[col]) != 0) {            outputFile.setValue(row,col,(NIRVal[col] - redVal[col]) / (NIRVal[col] + redVal[col] + 0.16));          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    NIR.close();    red.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Vector3f normalize(){  float length=x * x + y * y + z * z;  if (length != 1f && length != 0f) {    length=1.0f / FastMath.sqrt(length);    return new Vector3f(x * length,y * length,z * length);  }  return clone();}  }
class C{  @Thunk int compareTitles(String titleA,String titleB){  boolean aStartsWithLetter=(titleA.length() > 0) && Character.isLetterOrDigit(titleA.codePointAt(0));  boolean bStartsWithLetter=(titleB.length() > 0) && Character.isLetterOrDigit(titleB.codePointAt(0));  if (aStartsWithLetter && !bStartsWithLetter) {    return -1;  } else   if (!aStartsWithLetter && bStartsWithLetter) {    return 1;  }  return mCollator.compare(titleA,titleB);}  }
class C{  public RE simplifyOps() throws InterruptedException {  if (Thread.interrupted())   throw new InterruptedException();  RE res;switch (this.op) {case EMPTY:case EPSILON:case RANGE:case STRING:    return this;case STAR:case PLUS:case OPTION:  res=new RE(this.op);res.meta=meta;res.unaryArg=unaryArg.simplifyOps();return res;case UNION:res=new RE(ReOp.UNION);res.meta=meta;res.alts=new HashSet<RE>();for (RE arg : alts) {res.alts.add(arg.simplifyOps());}return res;case CONCAT:res=new RE(ReOp.CONCAT);res.meta=meta;res.cats=new LinkedList<RE>();for (RE arg : cats) {res.cats.add(arg.simplifyOps());}return res;case BINOP:case UNOP:res=new RE(this);res.cats=new LinkedList<RE>();for (RE arg : cats) {res.cats.add(arg.simplifyOps());}return res.interpretOp();default :return this;}}  }
class C{  @Override public void run(){  amIActive=true;  RandomAccessFile rIn=null;  ByteBuffer buf;  String inputFilesString=null;  String[] XYZFiles;  double x, y, north, south, east, west;  double z;  float minValue, maxValue;  float featureValue;  int numVertices;  byte classValue, numReturns, returnNum;  int a, n, loc, featureNum=1;  int progress=0;  int numPoints=0;  String delimiter=" ";  ShapeType shapeType=ShapeType.POINT;  boolean firstLineHeader=false;  String fileExtension=".txt";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  firstLineHeader=Boolean.parseBoolean(args[1]);  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    XYZFiles=inputFilesString.split(";");    int numZYZFiles=XYZFiles.length;    shapeType=ShapeType.POINT;    for (int j=0; j < numZYZFiles; j++) {      String fileName=XYZFiles[j];      File file=new File(fileName);      if (!file.exists()) {        return;      }      DBFField fields[]=new DBFField[1];      fields[0]=new DBFField();      fields[0].setName("Z");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(3);      fileExtension=FileUtilities.getFileExtension(fileName);      String outputFile=fileName.replace("." + fileExtension,".shp");      File outfile=new File(outputFile);      if (outfile.exists()) {        outfile.delete();      }      ShapeFile output=new ShapeFile(outputFile,shapeType,fields);      DataInputStream in=null;      BufferedReader br=null;      try {        FileInputStream fstream=new FileInputStream(file);        in=new DataInputStream(fstream);        br=new BufferedReader(new InputStreamReader(in));        String line;        String[] str;        j=1;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if ((j > 1 || !firstLineHeader) && (str.length >= 3)) {            x=Double.parseDouble(str[0]);            y=Double.parseDouble(str[1]);            z=Double.parseDouble(str[2]);            whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(x,y);            Object[] rowData=new Object[1];            rowData[0]=new Double(z);            output.addRecord(wbGeometry,rowData);          }          j++;        }        in.close();        br.close();      } catch (      java.io.IOException e) {        myHost.showFeedback("An error has occurred during operation. See log file for details.");        myHost.logException("Error in " + getDescriptiveName(),e);      } finally {        try {          if (in != null || br != null) {            in.close();            br.close();          }        } catch (        java.io.IOException ex) {        }      }      output.write();    }    returnData(XYZFiles[0].replace("." + fileExtension,".shp"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    if (rIn != null) {      try {        rIn.close();      } catch (      Exception e) {      }    }    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void decodeAtom(PushbackInputStream inStream,OutputStream outStream,int l) throws IOException {  int i, p1, p2, np1, np2;  byte a=-1, b=-1, c=-1;  byte high_byte, low_byte;  byte tmp[]=new byte[3];  i=inStream.read(tmp);  if (i != 3) {    throw new CEStreamExhausted();  }  for (i=0; (i < 64) && ((a == -1) || (b == -1) || (c == -1)); i++) {    if (tmp[0] == map_array[i]) {      a=(byte)i;    }    if (tmp[1] == map_array[i]) {      b=(byte)i;    }    if (tmp[2] == map_array[i]) {      c=(byte)i;    }  }  high_byte=(byte)(((a & 0x38) << 2) + (b & 0x1f));  low_byte=(byte)(((a & 0x7) << 5) + (c & 0x1f));  p1=0;  p2=0;  for (i=1; i < 256; i=i * 2) {    if ((high_byte & i) != 0)     p1++;    if ((low_byte & i) != 0)     p2++;  }  np1=(b & 32) / 32;  np2=(c & 32) / 32;  if ((p1 & 1) != np1) {    throw new CEFormatException("UCDecoder: High byte parity error.");  }  if ((p2 & 1) != np2) {    throw new CEFormatException("UCDecoder: Low byte parity error.");  }  outStream.write(high_byte);  crc.update(high_byte);  if (l == 2) {    outStream.write(low_byte);    crc.update(low_byte);  }}  }
class C{  public void tagFrameLabel(String label) throws IOException {  if (tags != null) {    tags.tagFrameLabel(label);  }}  }
class C{  public synchronized void stop(){  watch=false;  notify();}  }
class C{  public void confirmByte(char lastByte){  pktStat=PacketStatus.COMPLEMENT;  writeChar((char)~lastByte,true);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  private void encodeDelete(final DiffPart part) throws EncodingException {  data.writeBit(0);  data.writeBit(1);  data.writeBit(1);  data.writeValue(codecData.getBlocksizeS(),part.getStart());  data.writeValue(codecData.getBlocksizeE(),part.getLength());  data.writeFillBits();}  }
class C{  public static Map<String,Object> testRandomAuthorize(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  String refNum=UtilDateTime.nowAsString();  Random r=new Random();  int i=r.nextInt(9);  if (i < 5 || i % 2 == 0) {    result.put("authResult",Boolean.TRUE);    result.put("authFlag","A");  } else {    result.put("authResult",Boolean.FALSE);    result.put("authFlag","D");  }  result.put("processAmount",context.get("processAmount"));  result.put("authRefNum",refNum);  result.put("authAltRefNum",refNum);  result.put("authCode","100");  result.put("authMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestCapture",locale));  return result;}  }
class C{  public void testBug19803348() throws Exception {  Connection testConn=null;  try {    testConn=getConnectionWithProps("useInformationSchema=false,getProceduresReturnsFunctions=false,nullCatalogMeansCurrent=false");    DatabaseMetaData dbmd=testConn.getMetaData();    String testDb1="testBug19803348_db1";    String testDb2="testBug19803348_db2";    if (!dbmd.supportsMixedCaseIdentifiers()) {      testDb1=testDb1.toLowerCase();      testDb2=testDb2.toLowerCase();    }    createDatabase(testDb1);    createDatabase(testDb2);    createFunction(testDb1 + ".testBug19803348_f","(d INT) RETURNS INT BEGIN RETURN d; END");    createProcedure(testDb1 + ".testBug19803348_p","(d int) BEGIN SELECT d; END");    this.rs=dbmd.getFunctions(null,null,"testBug19803348_%");    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_f",this.rs.getString(3));    assertFalse(this.rs.next());    this.rs=dbmd.getFunctionColumns(null,null,"testBug19803348_%","%");    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_f",this.rs.getString(3));    assertEquals("",this.rs.getString(4));    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_f",this.rs.getString(3));    assertEquals("d",this.rs.getString(4));    assertFalse(this.rs.next());    this.rs=dbmd.getProcedures(null,null,"testBug19803348_%");    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_p",this.rs.getString(3));    assertFalse(this.rs.next());    this.rs=dbmd.getProcedureColumns(null,null,"testBug19803348_%","%");    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_p",this.rs.getString(3));    assertEquals("d",this.rs.getString(4));    assertFalse(this.rs.next());    dropFunction(testDb1 + ".testBug19803348_f");    dropProcedure(testDb1 + ".testBug19803348_p");    createFunction(testDb1 + ".testBug19803348_B_f","(d INT) RETURNS INT BEGIN RETURN d; END");    createProcedure(testDb1 + ".testBug19803348_B_p","(d int) BEGIN SELECT d; END");    createFunction(testDb2 + ".testBug19803348_A_f","(d INT) RETURNS INT BEGIN RETURN d; END");    createProcedure(testDb2 + ".testBug19803348_A_p","(d int) BEGIN SELECT d; END");    this.rs=dbmd.getFunctions(null,null,"testBug19803348_%");    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_B_f",this.rs.getString(3));    assertTrue(this.rs.next());    assertEquals(testDb2,this.rs.getString(1));    assertEquals("testBug19803348_A_f",this.rs.getString(3));    assertFalse(this.rs.next());    this.rs=dbmd.getFunctionColumns(null,null,"testBug19803348_%","%");    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_B_f",this.rs.getString(3));    assertEquals("",this.rs.getString(4));    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_B_f",this.rs.getString(3));    assertEquals("d",this.rs.getString(4));    assertTrue(this.rs.next());    assertEquals(testDb2,this.rs.getString(1));    assertEquals("testBug19803348_A_f",this.rs.getString(3));    assertEquals("",this.rs.getString(4));    assertTrue(this.rs.next());    assertEquals(testDb2,this.rs.getString(1));    assertEquals("testBug19803348_A_f",this.rs.getString(3));    assertEquals("d",this.rs.getString(4));    assertFalse(this.rs.next());    this.rs=dbmd.getProcedures(null,null,"testBug19803348_%");    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_B_p",this.rs.getString(3));    assertTrue(this.rs.next());    assertEquals(testDb2,this.rs.getString(1));    assertEquals("testBug19803348_A_p",this.rs.getString(3));    assertFalse(this.rs.next());    this.rs=dbmd.getProcedureColumns(null,null,"testBug19803348_%","%");    assertTrue(this.rs.next());    assertEquals(testDb1,this.rs.getString(1));    assertEquals("testBug19803348_B_p",this.rs.getString(3));    assertEquals("d",this.rs.getString(4));    assertTrue(this.rs.next());    assertEquals(testDb2,this.rs.getString(1));    assertEquals("testBug19803348_A_p",this.rs.getString(3));    assertEquals("d",this.rs.getString(4));    assertFalse(this.rs.next());  }  finally {    if (testConn != null) {      testConn.close();    }  }}  }
class C{  public StringBuffer numberToString(final String strNumberToConvert){  String strNumber="", signBit="";  if (strNumberToConvert.startsWith("-")) {    strNumber="" + strNumberToConvert.substring(1,strNumberToConvert.length());    signBit="-";  } else   strNumber="" + strNumberToConvert;  final DecimalFormat dft=new DecimalFormat("##############0.00");  final String strtemp="" + dft.format(Double.parseDouble(strNumber));  StringBuffer strbNumber=new StringBuffer(strtemp);  final int intLen=strbNumber.length();  for (int i=intLen - 6; i > 0; i=i - 2)   strbNumber.insert(i,',');  if (signBit.equals("-"))   strbNumber=strbNumber.insert(0,"-");  return strbNumber;}  }
class C{  public double nextDouble(double mean,double gamma,double cut){  if (gamma == 0.0)   return mean;  if (cut == Double.NEGATIVE_INFINITY) {    double val=Math.atan(-mean / gamma);    double rval=this.uniform.nextDoubleFromTo(val,Math.PI / 2.0);    double displ=gamma * Math.tan(rval);    return Math.sqrt(mean * mean + mean * displ);  } else {    double tmp=Math.max(0.0,mean - cut);    double lower=Math.atan((tmp * tmp - mean * mean) / (mean * gamma));    double upper=Math.atan(((mean + cut) * (mean + cut) - mean * mean) / (mean * gamma));    double rval=this.uniform.nextDoubleFromTo(lower,upper);    double displ=gamma * Math.tan(rval);    return Math.sqrt(Math.max(0.0,mean * mean + mean * displ));  }}  }
class C{  public void testRealmJMXAuthenticatorRandomNumberGenerator(){  int randomNumber=SecurityHelper.getRandomInt(0,0,0);  assertTrue(randomNumber == 0);  randomNumber=SecurityHelper.getRandomInt(-1,-10,1);  assertTrue(randomNumber == 0);  randomNumber=SecurityHelper.getRandomInt(-10,2,1);  assertTrue(MessageFormat.format("randomNumber={0}",randomNumber),randomNumber >= 0 && randomNumber <= 2);  randomNumber=SecurityHelper.getRandomInt(5,2,1);  assertTrue(MessageFormat.format("randomNumber={0}",randomNumber),randomNumber <= 5 && randomNumber >= 2);  randomNumber=SecurityHelper.getRandomInt(500,3000,100);  assertTrue(MessageFormat.format("randomNumber={0}",randomNumber),(randomNumber - 500) % 100 == 0);  randomNumber=SecurityHelper.getRandomInt(500,3000,15);  assertTrue(MessageFormat.format("randomNumber={0}",randomNumber),(randomNumber - 500) % 15 == 0);  randomNumber=SecurityHelper.getRandomInt(500,3000,0);  assertTrue(MessageFormat.format("randomNumber={0}",randomNumber),randomNumber >= 500 && randomNumber <= 3000);  randomNumber=SecurityHelper.getRandomInt(0,10,11);  assertTrue(MessageFormat.format("randomNumber={0}",randomNumber),randomNumber >= 0 && randomNumber <= 10);}  }
class C{  public boolean hasRecvSequenceNumber(){  return recvSequenceNumber != null;}  }
class C{  public LicensePanel(AssetPackProject project){  this.project=project;  initComponents();  setName("License");  jTextArea1.setText(project.getLicense());}  }
class C{  public ProcessTerminatedAbnormallyException(final int exitValue,final String message,final Throwable cause){  super(message,cause);  this.exitValue=exitValue;}  }
class C{  protected void addTrailerToOutput(byte[] msg,int offset,AbstractMRMessage m){  incomingLength=((SerialMessage)m).getResponseLength();  currentAddr=((SerialMessage)m).getAddr();  return;}  }
class C{  public static void main(String... a){  print("Object",new Object());  print("Timestamp",new java.sql.Timestamp(0));  print("Date",new java.sql.Date(0));  print("Time",new java.sql.Time(0));  print("BigDecimal",new BigDecimal("0"));  print("BigInteger",new BigInteger("0"));  print("String",new String("Hello"));  print("Data",Data.create(null,10));  print("Row",new RowImpl(new Value[0],0));  System.out.println();  for (int i=1; i < 128; i+=i) {    System.out.println(getArraySize(1,i) + " bytes per p1[]");    print("boolean[" + i + "]",new boolean[i]);    System.out.println(getArraySize(2,i) + " bytes per p2[]");    print("char[" + i + "]",new char[i]);    print("short[" + i + "]",new short[i]);    System.out.println(getArraySize(4,i) + " bytes per p4[]");    print("int[" + i + "]",new int[i]);    print("float[" + i + "]",new float[i]);    System.out.println(getArraySize(8,i) + " bytes per p8[]");    print("long[" + i + "]",new long[i]);    print("double[" + i + "]",new double[i]);    System.out.println(getArraySize(Constants.MEMORY_POINTER,i) + " bytes per obj[]");    print("Object[" + i + "]",new Object[i]);    System.out.println();  }}  }
class C{  public SQLException(String theReason,Throwable theCause){  super(theReason,theCause);}  }
class C{  @Override public void write(byte[] value) throws IOException {  if (isFirstTime) {    init();    isFirstTime=false;  }  checkAndWriteDictionaryChunkToFile();  oneDictionaryChunkList.add(ByteBuffer.wrap(value));  totalRecordCount++;}  }
class C{  public boolean remove(HttpConnection connection){  TimeValues times=connectionToTimes.remove(connection);  if (times == null) {    log.warn("Removing a connection that never existed!");    return true;  } else {    return System.currentTimeMillis() <= times.timeExpires;  }}  }
class C{  @RequestProcessing(value="/about",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showAbout(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("about.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  filler.fillHeaderAndFooter(request,response,dataModel);  filler.fillRandomArticles(dataModel);  filler.fillHotArticles(dataModel);  filler.fillSideTags(dataModel);  filler.fillLatestCmts(dataModel);}  }
class C{  protected void sendMessage(boolean flush) throws IOException {  sendMessage();  if (flush)   flush();}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private static Channel configureChannel(ChannelType channel_type) throws IllegalArgumentException {  if (channel_type == null) {    throw new IllegalArgumentException("Cannot configure a network channel from a null type.");  }  ChannelQueue channel=new ChannelQueue(channel_type.getName());  channel.setWeight(channel_type.getWeight());  ClassifierType classifier_type=channel_type.getClassifier();  if (classifier_type != null) {    ChannelClassifier classifier=new ChannelClassifier();    if (classifier_type.getIncludes() != null) {      for (      ClassifierCriteriaType include_type : classifier_type.getIncludes().getInclude()) {        ChannelClassifierRules rules=new ChannelClassifierRules();        rules.setEmailPattern(include_type.getUserEmailPattern());        rules.setServiceName(include_type.getService());        classifier.addIncludeRules(rules);      }    }    if (classifier_type.getExcludes() != null) {      for (      ClassifierCriteriaType exclude_type : classifier_type.getExcludes().getExclude()) {        ChannelClassifierRules rules=new ChannelClassifierRules();        rules.setEmailPattern(exclude_type.getUserEmailPattern());        rules.setServiceName(exclude_type.getService());        classifier.addExcludeRules(rules);      }    }    channel.setClassifier(classifier);  }  UserQuotasType user_quota_type=channel_type.getDefaultUserQuotas();  if (user_quota_type != null) {    UserQuotas.Builder quota_builder=new UserQuotas.Builder();    if (user_quota_type.getMaxConcurrent() != null) {      quota_builder.maxConcurrent(user_quota_type.getMaxConcurrent().intValue());    }    if (user_quota_type.getMaxCount() != null) {      PeriodicalPositiveInt max_count=user_quota_type.getMaxCount();      quota_builder.maxCount(max_count.getValue(),max_count.getPeriod(),TimeUnit.valueOf(max_count.getPeriodUnit().value()));    }    if (user_quota_type.getMaxSize() != null) {      quota_builder.maxSize(user_quota_type.getMaxSize().longValue());    }    if (user_quota_type.getMaxCumulativeSize() != null) {      PeriodicalPositiveLong max_cumul_size=user_quota_type.getMaxCumulativeSize();      quota_builder.maxCumulativeSize(max_cumul_size.getValue(),max_cumul_size.getPeriod(),TimeUnit.valueOf(max_cumul_size.getPeriodUnit().value()));    }    if (user_quota_type.getMaxBandwidth() != null) {      quota_builder.maxBandwidth(user_quota_type.getMaxBandwidth().intValue());    }    channel.setDefaultUserQuotas(quota_builder.build());  }  for (  ChannelType sub_channel_type : channel_type.getChannel()) {    channel.addChannel(configureChannel(sub_channel_type));  }  return channel;}  }
class C{  public static String escapeHTML(String str,short version){  String[][] data;  int[] offset;  StringBuilder rtn=new StringBuilder(str.length());  char[] chars=str.toCharArray();  if (version == HTMLV20) {    data=HTML20_DATA;    offset=HTML20_OFFSET;  } else   if (version == HTMLV32) {    data=HTML32_DATA;    offset=HTML32_OFFSET;  } else {    data=HTML40_DATA;    offset=HTML40_OFFSET;  }  outer:   for (int i=0; i < chars.length; i++) {    char c=chars[i];    if (c == CR)     continue;    for (int y=0; y < offset.length; y++) {      if (c >= offset[y] && c < data[y].length + offset[y]) {        String replacement=data[y][c - offset[y]];        if (replacement != null) {          rtn.append('&');          rtn.append(replacement);          rtn.append(';');          continue outer;        }      }    }    rtn.append(c);  }  return rtn.toString();}  }
class C{  public static void removeMapping(TransitSchedule schedule){  log.info("... Removing reference links and link sequences from schedule");  for (  TransitStopFacility stopFacility : schedule.getFacilities().values()) {    stopFacility.setLinkId(null);  }  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      route.setRoute(null);    }  }}  }
class C{  public static <A,B>Pair<A,B> create(A a,B b){  return new Pair<A,B>(a,b);}  }
class C{  public IBlockState withRotation(IBlockState state,Rotation rot){switch (rot) {case CLOCKWISE_180:    return state.withProperty(NORTH,state.getValue(SOUTH)).withProperty(EAST,state.getValue(WEST)).withProperty(SOUTH,state.getValue(NORTH)).withProperty(WEST,state.getValue(EAST));case COUNTERCLOCKWISE_90:  return state.withProperty(NORTH,state.getValue(EAST)).withProperty(EAST,state.getValue(SOUTH)).withProperty(SOUTH,state.getValue(WEST)).withProperty(WEST,state.getValue(NORTH));case CLOCKWISE_90:return state.withProperty(NORTH,state.getValue(WEST)).withProperty(EAST,state.getValue(NORTH)).withProperty(SOUTH,state.getValue(EAST)).withProperty(WEST,state.getValue(SOUTH));default :return state;}}  }
class C{  public int count(){  if (root == null)   return 0;  return count(root);}  }
class C{  private String defaultPrimitiveValue(Class<?> clazz){  return clazz == byte.class || clazz == short.class || clazz == int.class ? "0" : clazz == long.class ? "0L" : clazz == float.class ? "0.0f" : clazz == double.class ? "0.0d" : clazz == char.class ? "'\u0000'" : clazz == boolean.class ? "false" : "null";}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public Camping(){  super();}  }
class C{  protected SVGDescriptiveElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public KeyPair generateKeyPair(KeyPairGenerator keyPairGen){  try {    keyPair=keyPairGen.genKeyPair();    privateKey=keyPair.getPrivate();    publicKey=keyPair.getPublic();  } catch (  Exception e) {    LOG.error("Error generating KeyPair",e);  }  return keyPair;}  }
class C{  public static void deleteDirectory(final File dir){  deleteDirectory(dir,true);}  }
class C{  public void closeParent(){  Dialog dialog;  Frame frame;  if (getParentDialog() != null) {    dialog=getParentDialog();    dialog.setVisible(false);    dialog.dispose();  } else   if (getParentFrame() != null) {    frame=getParentFrame();    frame.setVisible(false);    frame.dispose();  }}  }
class C{  private XmlHandler deleteAnnotatedClass(Class<?> aClass) throws LoadingFileException, IOException {  String path=getElement(FilesManager.classesPath(),getClassPath(aClass));  if (FilesManager.isFileAnnotated(path,aClass))   deleteClasses(aClass);  for (  Class<?> it : aClass.getClasses())   if (it.isMemberClass())   deleteAnnotatedClass(it);  return this;}  }
class C{  public boolean isUnicodeAware(){  return unicodeAware;}  }
class C{  private boolean isDeprecatedComponent(String name){  String json=catalog.componentJSonSchema(name);  List<Map<String,String>> rows=JsonSchemaHelper.parseJsonSchema("component",json,false);  for (  Map<String,String> row : rows) {    if (row.get("deprecated") != null) {      return "true".equals(row.get("deprecated"));    }  }  return false;}  }
class C{  public static LocalAttribute localAttribute(String name){  return new LocalAttribute(name);}  }
class C{  public static <T>Class<T> loadClass(String className) throws ClassNotFoundException {  Class<T> clazz=null;  try {    clazz=(Class<T>)Thread.currentThread().getContextClassLoader().loadClass(className);  } catch (  ClassNotFoundException nf) {    clazz=(Class<T>)Class.forName(className);  }  return clazz;}  }
class C{  void updateMatcher(){  int begin=getPosition();  int end=getText().length();  matcher.reset(getText());  matcher.region(begin,end);}  }
class C{  private String toIndentedString(Object o){  if (o == null) {    return "null";  }  return o.toString().replace("\n","\n    ");}  }
class C{  private Coord calculateInitLocation(LinearFormation proto){  double dx, dy;  double placementFraction;  int formationIndex=proto.lastIndex++;  Coord c=proto.startLoc.clone();  placementFraction=(1.0 * formationIndex / proto.nodeCount);  dx=placementFraction * (proto.endLoc.getX() - proto.startLoc.getX());  dy=placementFraction * (proto.endLoc.getY() - proto.startLoc.getY());  c.translate(dx,dy);  return c;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  private Set<StoragePort> andStoragePortSets(Set<StoragePort> a,Set<StoragePort> b){  Set<StoragePort> result=new HashSet<StoragePort>();  for (  StoragePort port : a) {    if (b.contains(port)) {      result.add(port);    }  }  return result;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS09.class,args);}  }
class C{  protected boolean afterDelete(boolean success){  if (!success)   return success;  StringBuffer sb=new StringBuffer("DELETE FROM AD_TreeNodeCMS ").append(" WHERE Node_ID=").append(get_IDOld()).append(" AND AD_Tree_ID=").append(getAD_Tree_ID());  int no=DB.executeUpdate(sb.toString(),get_TrxName());  if (no > 0)   log.fine("#" + no + " - TreeType=CMS"); else   log.warning("#" + no + " - TreeType=CMS");  return no > 0;}  }
class C{  public static Double calculate(CpuStats previous,CpuStats current){  if (previous == null || current == null) {    return null;  }  double userDiff=current.getUser() - previous.getUser();  double niceDiff=current.getNice() - previous.getNice();  double systemDiff=current.getSystem() - previous.getSystem();  double idleDiff=getIdleDiff(previous,current);  double iowaitDiff=current.getIowait() - previous.getIowait();  double irqDiff=current.getIrq() - previous.getIrq();  double softirqDiff=current.getSoftirq() - previous.getSoftirq();  double stealDiff=current.getSteal() - previous.getSteal();  double totalDiff=userDiff + niceDiff + systemDiff+ idleDiff+ iowaitDiff+ irqDiff+ softirqDiff+ stealDiff;  if (totalDiff < 1) {    totalDiff=1;  }  double scale=MAX_SCALE / totalDiff;  return idleDiff * scale;}  }
class C{  public InputStream fetchQuotaDirInfo(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("Creating quota tree info query");  InputStream iStream=null;  try {    Query query=new Query();    verifyPreviousResults(keyMap);    TreeQuotaQueryParams queryParam=new TreeQuotaQueryParams();    TreeQuotaQueryParams.AspectSelection selection=new TreeQuotaQueryParams.AspectSelection();    selection.setTreeQuotas(true);    queryParam.setAspectSelection(selection);    String fsId=(String)keyMap.get(VNXFileConstants.FILESYSTEM_ID);    if (!isInValid(fsId)) {      queryParam.setFileSystem(fsId);    }    query.getQueryRequestChoice().add(queryParam);    iStream=_vnxFileInputRequestBuilder.getQueryParamPacket(queryParam,false);  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while generating input xml for fileSystem info",jaxbException.getCause());  }  return iStream;}  }
class C{  public void testGetRandomColorByLevel(){  try {    for (    String level : MaterialPalettes.NON_ACCENT_COLOR_LEVELS) {      List<Integer> colorList=MaterialPalettes.getColorsByLevel(level);      Integer randomColor=MaterialPalettes.getRandomColorByLevel(level);      assertTrue(colorList.contains(randomColor));    }  } catch (  IllegalAccessException iae) {    fail();  }}  }
class C{  private VCardParameters parseParameters(Element element){  VCardParameters parameters=new VCardParameters();  List<Element> roots=XmlUtils.toElementList(element.getElementsByTagNameNS(PARAMETERS.getNamespaceURI(),PARAMETERS.getLocalPart()));  for (  Element root : roots) {    List<Element> parameterElements=XmlUtils.toElementList(root.getChildNodes());    for (    Element parameterElement : parameterElements) {      String name=parameterElement.getLocalName().toUpperCase();      List<Element> valueElements=XmlUtils.toElementList(parameterElement.getChildNodes());      for (      Element valueElement : valueElements) {        String value=valueElement.getTextContent();        parameters.put(name,value);      }    }  }  return parameters;}  }
class C{  public static void salsaCore(int rounds,int[] input,int[] x){  if (input.length != 16) {    throw new IllegalArgumentException();  }  if (x.length != 16) {    throw new IllegalArgumentException();  }  if (rounds % 2 != 0) {    throw new IllegalArgumentException("Number of rounds must be even");  }  int x00=input[0];  int x01=input[1];  int x02=input[2];  int x03=input[3];  int x04=input[4];  int x05=input[5];  int x06=input[6];  int x07=input[7];  int x08=input[8];  int x09=input[9];  int x10=input[10];  int x11=input[11];  int x12=input[12];  int x13=input[13];  int x14=input[14];  int x15=input[15];  for (int i=rounds; i > 0; i-=2) {    x04^=rotl(x00 + x12,7);    x08^=rotl(x04 + x00,9);    x12^=rotl(x08 + x04,13);    x00^=rotl(x12 + x08,18);    x09^=rotl(x05 + x01,7);    x13^=rotl(x09 + x05,9);    x01^=rotl(x13 + x09,13);    x05^=rotl(x01 + x13,18);    x14^=rotl(x10 + x06,7);    x02^=rotl(x14 + x10,9);    x06^=rotl(x02 + x14,13);    x10^=rotl(x06 + x02,18);    x03^=rotl(x15 + x11,7);    x07^=rotl(x03 + x15,9);    x11^=rotl(x07 + x03,13);    x15^=rotl(x11 + x07,18);    x01^=rotl(x00 + x03,7);    x02^=rotl(x01 + x00,9);    x03^=rotl(x02 + x01,13);    x00^=rotl(x03 + x02,18);    x06^=rotl(x05 + x04,7);    x07^=rotl(x06 + x05,9);    x04^=rotl(x07 + x06,13);    x05^=rotl(x04 + x07,18);    x11^=rotl(x10 + x09,7);    x08^=rotl(x11 + x10,9);    x09^=rotl(x08 + x11,13);    x10^=rotl(x09 + x08,18);    x12^=rotl(x15 + x14,7);    x13^=rotl(x12 + x15,9);    x14^=rotl(x13 + x12,13);    x15^=rotl(x14 + x13,18);  }  x[0]=x00 + input[0];  x[1]=x01 + input[1];  x[2]=x02 + input[2];  x[3]=x03 + input[3];  x[4]=x04 + input[4];  x[5]=x05 + input[5];  x[6]=x06 + input[6];  x[7]=x07 + input[7];  x[8]=x08 + input[8];  x[9]=x09 + input[9];  x[10]=x10 + input[10];  x[11]=x11 + input[11];  x[12]=x12 + input[12];  x[13]=x13 + input[13];  x[14]=x14 + input[14];  x[15]=x15 + input[15];}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYDifferenceRenderer)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  XYDifferenceRenderer that=(XYDifferenceRenderer)obj;  if (!PaintUtilities.equal(this.positivePaint,that.positivePaint)) {    return false;  }  if (!PaintUtilities.equal(this.negativePaint,that.negativePaint)) {    return false;  }  if (this.shapesVisible != that.shapesVisible) {    return false;  }  if (!ShapeUtilities.equal(this.legendLine,that.legendLine)) {    return false;  }  if (this.roundXCoordinates != that.roundXCoordinates) {    return false;  }  return true;}  }
class C{  public void registerNode(String oidString,SnmpMibNode node) throws IllegalAccessException {  SnmpOid oid=new SnmpOid(oidString);  registerNode(oid.longValue(),0,node);}  }
class C{  public void finishTransition(){  if (mViewToHide != null) {    removeView(mViewToHide);  }  getLayoutParams().height=ViewGroup.LayoutParams.WRAP_CONTENT;  requestLayout();  mViewToHide=null;  mViewToShow=null;  mInfoBar.setControlsEnabled(true);}  }
class C{  static StringBuilder newStringBuilderForCollection(int size){  checkNonnegative(size,"size");  return new StringBuilder((int)Math.min(size * 8L,Ints.MAX_POWER_OF_TWO));}  }
class C{  public void focusLost(FocusEvent e){  log.fine("focusLost");  try {    String text=getText();    fireVetoableChange(m_columnName,text,null);  } catch (  PropertyVetoException pve) {  }}  }
class C{  public void removeHexEditorListener(HexEditorListener l){  listenerList.remove(HexEditorListener.class,l);}  }
class C{  public void populateDAO(Object value,int row,int column){  final TradelogDetail element=getData().getTradelogDetail().get(row);switch (column) {case 1:{      element.setOpen((String)value);      break;    }case 2:{    element.setSymbol((String)value);    break;  }case 3:{  element.setLongShort(((Side)value).getCode());  break;}case 4:{element.setTier(((Tier)value).getCode());break;}case 5:{element.setMarketBias(((MarketBar)value).getCode());break;}case 6:{element.setMarketBar(((MarketBar)value).getCode());break;}case 7:{element.setName((String)value);break;}case 8:{element.setStatus(((TradestrategyStatus)value).getCode());break;}case 9:{element.setSide(((Side)value).getCode());break;}case 10:{element.setAction(((Action)value).getCode());break;}case 11:{element.setStopPrice(((Money)value).getBigDecimalValue());break;}case 12:{element.setOrderStatus(((OrderStatus)value).getCode());break;}case 13:{element.setFilledDate(((Date)value).getZonedDateTime());break;}case 14:{element.setQuantity(((Quantity)value).getIntegerValue());break;}case 15:{element.setAverageFilledPrice(((Decimal)value).getBigDecimalValue());break;}case 16:{element.setCommission(((Money)value).getBigDecimalValue());break;}case 17:{element.setProfitLoss(((Money)value).getBigDecimalValue());break;}default :{}}}  }
class C{  public void testEOF() throws Exception {  String JSON="{ \"key\": [ { \"a\" : { \"name\": \"foo\",  \"type\": 1\n" + "},  \"type\": 3, \"url\": \"http://www.google.com\" } ],\n" + "\"name\": \"xyz\", \"type\": 1, \"url\" : null }\n  ";  JsonFactory jf=new JsonFactory();  ObjectMapper mapper=new ObjectMapper();  JsonParser jp=jf.createJsonParser(new StringReader(JSON));  JsonNode result=mapper.readTree(jp);  assertTrue(result.isObject());  assertEquals(4,result.size());  assertNull(mapper.readTree(jp));}  }
class C{  public XMLString concat(String str){  return new XMLStringDefault(m_str.concat(str));}  }
class C{  public N4JSDocletParser(){  super(new TagDictionary<>(N4JS_LINE_TAGS),DESCRIPTION_DICT);}  }
class C{  public void shutdown(){  for (  Topic topic : _topics.values()) {    if (topic.getConsumerConnector() != null) {      topic.getConsumerConnector().shutdown();    }    topic.getStreamExecutorService().shutdownNow();    try {      topic.getStreamExecutorService().awaitTermination(60,TimeUnit.SECONDS);    } catch (    InterruptedException e) {      _logger.warn("Stream executor service was interrupted while awaiting termination. This should never happen.");    }  }  _logger.debug("Pushing unflushed messages back to Kafka.");  Producer producer=new Producer(_configuration);  for (  Map.Entry<String,Topic> entry : _topics.entrySet()) {    String topicName=entry.getKey();    Topic topic=entry.getValue();    List<String> unflushedMessages=new ArrayList<String>();    if (!topic.getMessages().isEmpty()) {      topic.getMessages().drainTo(unflushedMessages);      producer.enqueue(topicName,unflushedMessages);    }    _logger.debug("{} messages for topic {} enqueued on Kafka queue",unflushedMessages.size(),topicName);  }  producer.shutdown();}  }
class C{  public Unit createUnit(){  UnitImpl unit=new UnitImpl();  return unit;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.237 -0500",hash_original_method="A7026FD3DE10525F382BCFDA63577851",hash_generated_method="D83D82C75D0C85838D7CC6E60BE8AA26") public void drawPoints(float[] pts,int offset,int count,Paint paint){  addTaint(pts[0]);  addTaint(offset);  addTaint(count);  addTaint(paint.getTaint());}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public synchronized String count(String nonce){  Integer count=nonces.get(nonce);  if (count == null) {    count=Integer.valueOf(1);  } else {    count=Integer.valueOf(count.intValue() + 1);  }  nonces.put(nonce,count);  return String.format("%08x",count.intValue());}  }
class C{  void prepareEnterRecentsAnimation(){}  }
class C{  protected static String normalizeUrlEnding(String link){  if (link.indexOf("#") > -1)   link=link.substring(0,link.indexOf("#"));  if (link.endsWith("?"))   link=link.substring(0,link.length() - 1);  if (link.endsWith("/"))   link=link.substring(0,link.length() - 1);  return link;}  }
class C{  public void onResume(){  hasSavedState=false;  unlock();}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.324 -0500",hash_original_method="D0996D4DFB9F5585E3927B19545BE3E4",hash_generated_method="BA24E7C3A8B18A175AD4E4B71A2B86FC") public static void dumpCurrentRow(Cursor cursor,PrintStream stream){  String[] cols=cursor.getColumnNames();  stream.println("" + cursor.getPosition() + " {");  int length=cols.length;  for (int i=0; i < length; i++) {    String value;    try {      value=cursor.getString(i);    } catch (    SQLiteException e) {      value="<unprintable>";    }    stream.println("   " + cols[i] + '='+ value);  }  stream.println("}");}  }
class C{  public synchronized void internalRemoveAllRelationships(){  for (Iterator<Relationship> iterator=allRelationships(); iterator.hasNext(); ) {    this.network.removeRelationship(iterator.next());  }  getRelationships().clear();  if (this.allRelationships != null) {    this.allRelationships.clear();  }}  }
class C{  private ResourceCommand loadEppResourceCommand(String filename) throws Exception {  EppInput eppInput=new EppLoader(this,filename).getEpp();  return ((ResourceCommandWrapper)eppInput.getCommandWrapper().getCommand()).getResourceCommand();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.EXPORTED_VARIABLE_STATEMENT__ANNOTATION_LIST:    return getAnnotationList();case N4JSPackage.EXPORTED_VARIABLE_STATEMENT__DECLARED_MODIFIERS:  return getDeclaredModifiers();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public DecoderResult decode(boolean[][] image) throws FormatException, ChecksumException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits);}  }
class C{  public static String classNameFor(Connection connection){  return "connection-" + connection.getOutputSocket().getSocketHint().getIdentifier() + "-to-"+ connection.getInputSocket().getSocketHint().getIdentifier();}  }
class C{  public final void addAllConstraints(@NonNull final Collection<Constraint<CharSequence>> constraints){  ensureNotNull(constraints,"The collection may not be null");  for (  Constraint<CharSequence> constraint : constraints) {    addConstraint(constraint);  }}  }
class C{  public long create_time_to_sample_atom(MP4DataStream bitstream) throws IOException {  log.trace("Time to sample atom");  create_full_atom(bitstream);  timeToSamplesRecords=new Vector<TimeSampleRecord>();  entryCount=(int)bitstream.readBytes(4);  log.trace("Time to sample entries: {}",entryCount);  readed+=4;  for (int i=0; i < entryCount; i++) {    int sampleCount=(int)bitstream.readBytes(4);    int sampleDuration=(int)bitstream.readBytes(4);    timeToSamplesRecords.addElement(new TimeSampleRecord(sampleCount,sampleDuration));    readed+=8;  }  return readed;}  }
class C{  protected void createODataUri(String serviceRoot){  odataUri=TestUtils.createODataUri(serviceRoot);}  }
class C{  public static void LDC(int x){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.LDC(x);  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public AbstractGraphics2D(AbstractGraphics2D g){  this.gc=(GraphicContext)g.gc.clone();  this.gc.validateTransformStack();  this.textAsShapes=g.textAsShapes;}  }
class C{  public BufferObject unitSquareBuffer(){  if (this.unitSquareBuffer != null) {    return this.unitSquareBuffer;  }  float[] points=new float[]{0,1,0,0,1,1,1,0};  int size=points.length * 4;  FloatBuffer buffer=ByteBuffer.allocateDirect(size).order(ByteOrder.nativeOrder()).asFloatBuffer();  buffer.put(points).rewind();  BufferObject bufferObject=new BufferObject(GLES20.GL_ARRAY_BUFFER,size,buffer);  return (this.unitSquareBuffer=bufferObject);}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  private boolean isChangePwdOnLogin(){  StringBuffer contextPath=getRequest().getRequestURL();  return contextPath.indexOf("public/pwd.jsf") != -1;}  }
class C{  public List<JetstreamEvent> readEvents() throws OffsetOutOfRangeException {  List<JetstreamEvent> events=new ArrayList<JetstreamEvent>();  if (m_nextBatchSizeBytes < 0)   m_nextBatchSizeBytes=m_config.getBatchSizeBytes();  if (m_nextBatchSizeBytes == 0) {    m_nextBatchSizeBytes=m_config.getBatchSizeBytes();    return events;  }  for (int i=0; i < 2; i++) {    for (int j=0; j < m_retries; j++) {      FetchRequest req=new FetchRequestBuilder().clientId(m_clientId).addFetch(m_topic,m_partition,m_readOffset,m_nextBatchSizeBytes).build();      FetchResponse fetchResponse=null;      try {        fetchResponse=m_consumer.fetch(req);      } catch (      Exception e) {        LOGGER.error("Error occurs when fetching.",e);        continue;      }      if (fetchResponse == null)       continue;      if (fetchResponse.hasError()) {        short code=fetchResponse.errorCode(m_topic,m_partition);        if (code == ErrorMapping.OffsetOutOfRangeCode()) {          long smallest=-1L, largest=-1L;          try {            smallest=fetchResetOffset(SmallestTimeString());            largest=fetchResetOffset(LargestTimeString());          } catch (          Exception e) {          }          throw new OffsetOutOfRangeException(m_clientId + ": readOffset=" + m_readOffset+ " smallest="+ smallest+ " largest="+ largest);        } else         continue;      } else {        ByteBufferMessageSet messageSet=fetchResponse.messageSet(m_topic,m_partition);        boolean hasMessage=messageSet.iterator().hasNext();        if (!hasMessage && !readToTheEnd()) {          m_nextBatchSizeBytes=Math.min(m_nextBatchSizeBytes * 2,m_config.getMaxBatchSizeBytes());          continue;        }        for (        MessageAndOffset messageAndOffset : messageSet) {          long currentOffset=messageAndOffset.offset();          if (currentOffset < m_readOffset) {            continue;          }          m_readOffset=messageAndOffset.nextOffset();          Message message=messageAndOffset.message();          ByteBuffer k=message.key();          ByteBuffer p=message.payload();          byte[] key=null;          if (k != null) {            key=new byte[k.limit()];            k.get(key);          }          byte[] payload=new byte[p.limit()];          p.get(payload);          JetstreamEvent event=m_serializer.decode(key,payload);          EventKafkaMetadata meta=new EventKafkaMetadata(m_topic,m_partition,currentOffset);          event.put(kmKey,meta.encode());          events.add(event);        }        m_nextBatchSizeBytes=m_config.getBatchSizeBytes();        return events;      }    }    reinit();  }  throw new RuntimeException("Fail to read events from " + m_clientId + " with offset "+ m_readOffset);}  }
class C{  public Attributes(Attributes attr){  map=new HashMap<>(attr);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void remove() throws InterruptedException {  List peekedIds=(List)HARegionQueue.peekedEventsContext.get();  if (peekedIds == null) {    if (logger.isDebugEnabled()) {      logger.debug("Remove() called before peek(), nothing to remove.");    }    return;  }  if (!this.checkPrevAcks()) {    return;  }  Map groupedThreadIDs=new HashMap();  for (Iterator iter=peekedIds.iterator(); iter.hasNext(); ) {    Long counter=(Long)iter.next();    Conflatable event=(Conflatable)this.region.get(counter);    if (event != null) {      EventID eventid=event.getEventId();      long sequenceId=eventid.getSequenceID();      ThreadIdentifier threadid=getThreadIdentifier(eventid);      if (!checkEventForRemoval(counter,threadid,sequenceId)) {        continue;      }      Object key=null;      String r=null;      if (shouldBeConflated(event)) {        key=event.getKeyToConflate();        r=event.getRegionToConflate();      }      RemovedEventInfo info=new RemovedEventInfo(counter,r,key);      List countersList;      if ((countersList=(List)groupedThreadIDs.get(threadid)) != null) {        countersList.add(info);        countersList.set(0,Long.valueOf(sequenceId));      } else {        countersList=new ArrayList();        countersList.add(Long.valueOf(sequenceId));        countersList.add(info);        groupedThreadIDs.put(threadid,countersList);      }      event=null;      info=null;    } else {      HARegionQueue.this.stats.incNumVoidRemovals();    }  }  for (Iterator iter=groupedThreadIDs.entrySet().iterator(); iter.hasNext(); ) {    Map.Entry element=(Map.Entry)iter.next();    ThreadIdentifier tid=(ThreadIdentifier)element.getKey();    List removedEvents=(List)element.getValue();    long lastDispatchedId=((Long)removedEvents.remove(0)).longValue();    DispatchedAndCurrentEvents dace=(DispatchedAndCurrentEvents)this.eventsMap.get(tid);    if (dace != null && dace.lastDispatchedSequenceId < lastDispatchedId) {      try {        dace.setLastDispatchedIDAndRemoveEvents(removedEvents,lastDispatchedId);      } catch (      CacheException e) {        logger.error(LocalizedMessage.create(LocalizedStrings.HARegionQueue_EXCEPTION_OCCURED_WHILE_TRYING_TO_SET_THE_LAST_DISPATCHED_ID),e);      }    }  }  groupedThreadIDs=null;  setPeekedEvents();}  }
class C{  public BoundedHashMap(int capacity){  this(capacity,false);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private synchronized int decreaseRefCount(){  ensureValid();  Preconditions.checkArgument(mRefCount > 0);  mRefCount--;  return mRefCount;}  }
class C{  public DeregisterRequest(String registrationID){  Validate.notNull(registrationID);  this.registrationID=registrationID;}  }
class C{  public static long readQwordLittleEndian(final byte[] data,final int offset){  return ((data[offset + 7] & 0xFFL) * 0x100 * 0x100* 0x100* 0x100* 0x100* 0x100* 0x100) + ((data[offset + 6] & 0xFFL) * 0x100 * 0x100* 0x100* 0x100* 0x100* 0x100) + ((data[offset + 5] & 0xFFL) * 0x100 * 0x100* 0x100* 0x100* 0x100)+ ((data[offset + 4] & 0xFFL) * 0x100 * 0x100* 0x100* 0x100)+ ((data[offset + 3] & 0xFFL) * 0x100 * 0x100* 0x100)+ ((data[offset + 2] & 0xFFL) * 0x100 * 0x100)+ ((data[offset + 1] & 0xFFL) * 0x100)+ (data[offset + 0] & 0xFFL);}  }
class C{  public void initialize(UISearchResult sr){  super.initialize(sr);  RESULT=sr;  _mediaType=NamedMediaType.getFromExtension(getExtension());  addedOn=sr.getCreationTime() > 0 ? new Date(sr.getCreationTime()) : null;  actionsHolder=new SearchResultActionsHolder(sr);  name=new SearchResultNameHolder(sr);  seeds=RESULT.getSeeds() <= 0 || !(RESULT instanceof TorrentUISearchResult) ? "" : String.valueOf(RESULT.getSeeds());  icon=getIcon();  size=new SizeHolder(getSize());  source=new SourceHolder(RESULT);}  }
class C{  public Object nextMeta() throws JSONException {  char c;  char q;  do {    c=next();  } while (Character.isWhitespace(c));switch (c) {case 0:    throw syntaxError("Misshaped meta tag");case '<':  return XML.LT;case '>':return XML.GT;case '/':return XML.SLASH;case '=':return XML.EQ;case '!':return XML.BANG;case '?':return XML.QUEST;case '"':case '\'':q=c;for (; ; ) {c=next();if (c == 0) {throw syntaxError("Unterminated string");}if (c == q) {return Boolean.TRUE;}}default :for (; ; ) {c=next();if (Character.isWhitespace(c)) {return Boolean.TRUE;}switch (c) {case 0:case '<':case '>':case '/':case '=':case '!':case '?':case '"':case '\'':back();return Boolean.TRUE;}}}}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int write(Connection conn,String outputFileName,String sql,String charset) throws SQLException {  Statement stat=conn.createStatement();  ResultSet rs=stat.executeQuery(sql);  int rows=write(outputFileName,rs,charset);  stat.close();  return rows;}  }
class C{  private void depthInc(int index){  depths[index]++;  depthCalc();}  }
class C{  public void declareStartOfScopeVariable(Identifier id){  Scope s=getClosestDeclarationContainer();  s.addStartOfScopeStatement((Statement)substV("var @id;","id",id));}  }
class C{  public byte[] remove(QueueEvent event) throws KeeperException, InterruptedException {  TimerContext time=stats.time(dir + "_remove_event");  try {    String path=event.getId();    String responsePath=dir + "/" + response_prefix+ path.substring(path.lastIndexOf("-") + 1);    if (zookeeper.exists(responsePath,true)) {      zookeeper.setData(responsePath,event.getBytes(),true);    }    byte[] data=zookeeper.getData(path,null,null,true);    zookeeper.delete(path,-1,true);    return data;  }  finally {    time.stop();  }}  }
class C{  public void createTables(DatabaseSession session,JPAMSchemaManager schemaManager,boolean build){  createTables(session,schemaManager,build,true,true,true);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.520 -0500",hash_original_method="0DA9D5A0C7EE7D2AFD4BCC53AD3802F3",hash_generated_method="72956D90BC7B32B0D39A00538E67E3E0") @Deprecated public void putIBinder(String key,IBinder value){  unparcel();  mMap.put(key,value);}  }
class C{  @SuppressWarnings("unchecked") public SimpleIoProcessorPool(Class<? extends IoProcessor<S>> processorType,Executor executor,int size,SelectorProvider selectorProvider){  if (processorType == null) {    throw new IllegalArgumentException("processorType");  }  if (size <= 0) {    throw new IllegalArgumentException("size: " + size + " (expected: positive integer)");  }  createdExecutor=(executor == null);  if (createdExecutor) {    this.executor=Executors.newCachedThreadPool();    ((ThreadPoolExecutor)this.executor).setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());  } else {    this.executor=executor;  }  pool=new IoProcessor[size];  boolean success=false;  Constructor<? extends IoProcessor<S>> processorConstructor=null;  boolean usesExecutorArg=true;  try {    try {      try {        processorConstructor=processorType.getConstructor(ExecutorService.class);        pool[0]=processorConstructor.newInstance(this.executor);      } catch (      NoSuchMethodException e1) {        try {          if (selectorProvider == null) {            processorConstructor=processorType.getConstructor(Executor.class);            pool[0]=processorConstructor.newInstance(this.executor);          } else {            processorConstructor=processorType.getConstructor(Executor.class,SelectorProvider.class);            pool[0]=processorConstructor.newInstance(this.executor,selectorProvider);          }        } catch (        NoSuchMethodException e2) {          try {            processorConstructor=processorType.getConstructor();            usesExecutorArg=false;            pool[0]=processorConstructor.newInstance();          } catch (          NoSuchMethodException e3) {          }        }      }    } catch (    RuntimeException re) {      LOGGER.error("Cannot create an IoProcessor :{}",re.getMessage());      throw re;    }catch (    Exception e) {      String msg="Failed to create a new instance of " + processorType.getName() + ":"+ e.getMessage();      LOGGER.error(msg,e);      throw new RuntimeIoException(msg,e);    }    if (processorConstructor == null) {      String msg=String.valueOf(processorType) + " must have a public constructor with one " + ExecutorService.class.getSimpleName()+ " parameter, a public constructor with one "+ Executor.class.getSimpleName()+ " parameter or a public default constructor.";      LOGGER.error(msg);      throw new IllegalArgumentException(msg);    }    for (int i=1; i < pool.length; i++) {      try {        if (usesExecutorArg) {          if (selectorProvider == null) {            pool[i]=processorConstructor.newInstance(this.executor);          } else {            pool[i]=processorConstructor.newInstance(this.executor,selectorProvider);          }        } else {          pool[i]=processorConstructor.newInstance();        }      } catch (      Exception e) {      }    }    success=true;  }  finally {    if (!success) {      dispose();    }  }}  }
class C{  public void add(String string,Image image){  checkWidget();  if (string == null)   SWT.error(SWT.ERROR_NULL_ARGUMENT);  TableItem newItem=new TableItem(this.table,SWT.NONE);  newItem.setText(string);  if (image != null)   newItem.setImage(image);}  }
class C{  public void onDamaged(final Entity attacker,final int damage){  resolution=Resolution.HIT;  combatIconTime=System.currentTimeMillis();  boolean showAttackInfoForPlayer=(this.isUser() || attacker.isUser());  showAttackInfoForPlayer=showAttackInfoForPlayer & (!stendhal.FILTER_ATTACK_MESSAGES);  if (stendhal.SHOW_EVERYONE_ATTACK_INFO || showAttackInfoForPlayer) {    ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine(getTitle() + " suffers " + Grammar.quantityplnoun(damage,"point")+ " of damage from "+ attacker.getTitle(),NotificationType.NEGATIVE));  }}  }
class C{  public String buildQuery(String[] projectionIn,String selection,String groupBy,String having,String sortOrder,String limit){  String[] projection=computeProjection(projectionIn);  StringBuilder where=new StringBuilder();  boolean hasBaseWhereClause=mWhereClause != null && mWhereClause.length() > 0;  if (hasBaseWhereClause) {    where.append(mWhereClause.toString());    where.append(')');  }  if (selection != null && selection.length() > 0) {    if (hasBaseWhereClause) {      where.append(" AND ");    }    where.append('(');    where.append(selection);    where.append(')');  }  return buildQueryString(mDistinct,mTables,projection,where.toString(),groupBy,having,sortOrder,limit);}  }
class C{  public static final GCodeFlavor tasteFlavor(Resources res,int resId) throws IOException, NotFoundException {  BufferedInputStream buffer=new BufferedInputStream(res.openRawResource(resId));  GCodeFlavor ret=tasteFlavor(buffer);  buffer.close();  return ret;}  }
class C{  public static void devicePermissions(Context context,String accessToken,String identifier,AsyncHttpResponseHandler responseHandler){  List<Header> headerList=new ArrayList<Header>();  headerList.add(new BasicHeader(ApiKey.HeadKey.ACCESS_TOKEN,accessToken));  get(context,String.format(getApiServerUrl() + DEVICE_PERMISSION_LIST,identifier),headerList,null,responseHandler);}  }
class C{  public Object parse() throws XMLException {  try {    this.builder.startBuilding(this.reader.getSystemID(),this.reader.getLineNr());    this.scanData();    return this.builder.getResult();  } catch (  XMLException e) {    throw e;  }catch (  Exception e) {    XMLException error=new XMLException(e);    error.initCause(e);    throw error;  }}  }
class C{  public void onRetry(R result,Throwable failure,ExecutionContext context){}  }
class C{  public void pressed(){  state=STATE_PRESSED;  repaint();}  }
class C{  private static List<AclEntry> decode(long address,int n){  ArrayList<AclEntry> acl=new ArrayList<>(n);  for (int i=0; i < n; i++) {    long offset=address + i * SIZEOF_ACE_T;    int uid=unsafe.getInt(offset + OFFSETOF_UID);    int mask=unsafe.getInt(offset + OFFSETOF_MASK);    int flags=(int)unsafe.getShort(offset + OFFSETOF_FLAGS);    int type=(int)unsafe.getShort(offset + OFFSETOF_TYPE);    UnixUserPrincipals.User who=null;    if ((flags & ACE_OWNER) > 0) {      who=UnixUserPrincipals.SPECIAL_OWNER;    } else     if ((flags & ACE_GROUP) > 0) {      who=UnixUserPrincipals.SPECIAL_GROUP;    } else     if ((flags & ACE_EVERYONE) > 0) {      who=UnixUserPrincipals.SPECIAL_EVERYONE;    } else     if ((flags & ACE_IDENTIFIER_GROUP) > 0) {      who=UnixUserPrincipals.fromGid(uid);    } else {      who=UnixUserPrincipals.fromUid(uid);    }    AclEntryType aceType=null;switch (type) {case ACE_ACCESS_ALLOWED_ACE_TYPE:      aceType=AclEntryType.ALLOW;    break;case ACE_ACCESS_DENIED_ACE_TYPE:  aceType=AclEntryType.DENY;break;case ACE_SYSTEM_AUDIT_ACE_TYPE:aceType=AclEntryType.AUDIT;break;case ACE_SYSTEM_ALARM_ACE_TYPE:aceType=AclEntryType.ALARM;break;default :assert false;}Set<AclEntryPermission> aceMask=EnumSet.noneOf(AclEntryPermission.class);if ((mask & ACE_READ_DATA) > 0) aceMask.add(AclEntryPermission.READ_DATA);if ((mask & ACE_WRITE_DATA) > 0) aceMask.add(AclEntryPermission.WRITE_DATA);if ((mask & ACE_APPEND_DATA) > 0) aceMask.add(AclEntryPermission.APPEND_DATA);if ((mask & ACE_READ_NAMED_ATTRS) > 0) aceMask.add(AclEntryPermission.READ_NAMED_ATTRS);if ((mask & ACE_WRITE_NAMED_ATTRS) > 0) aceMask.add(AclEntryPermission.WRITE_NAMED_ATTRS);if ((mask & ACE_EXECUTE) > 0) aceMask.add(AclEntryPermission.EXECUTE);if ((mask & ACE_DELETE_CHILD) > 0) aceMask.add(AclEntryPermission.DELETE_CHILD);if ((mask & ACE_READ_ATTRIBUTES) > 0) aceMask.add(AclEntryPermission.READ_ATTRIBUTES);if ((mask & ACE_WRITE_ATTRIBUTES) > 0) aceMask.add(AclEntryPermission.WRITE_ATTRIBUTES);if ((mask & ACE_DELETE) > 0) aceMask.add(AclEntryPermission.DELETE);if ((mask & ACE_READ_ACL) > 0) aceMask.add(AclEntryPermission.READ_ACL);if ((mask & ACE_WRITE_ACL) > 0) aceMask.add(AclEntryPermission.WRITE_ACL);if ((mask & ACE_WRITE_OWNER) > 0) aceMask.add(AclEntryPermission.WRITE_OWNER);if ((mask & ACE_SYNCHRONIZE) > 0) aceMask.add(AclEntryPermission.SYNCHRONIZE);Set<AclEntryFlag> aceFlags=EnumSet.noneOf(AclEntryFlag.class);if ((flags & ACE_FILE_INHERIT_ACE) > 0) aceFlags.add(AclEntryFlag.FILE_INHERIT);if ((flags & ACE_DIRECTORY_INHERIT_ACE) > 0) aceFlags.add(AclEntryFlag.DIRECTORY_INHERIT);if ((flags & ACE_NO_PROPAGATE_INHERIT_ACE) > 0) aceFlags.add(AclEntryFlag.NO_PROPAGATE_INHERIT);if ((flags & ACE_INHERIT_ONLY_ACE) > 0) aceFlags.add(AclEntryFlag.INHERIT_ONLY);AclEntry ace=AclEntry.newBuilder().setType(aceType).setPrincipal(who).setPermissions(aceMask).setFlags(aceFlags).build();acl.add(ace);}return acl;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TypableElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == TypeDefiningElement.class) {switch (baseFeatureID) {case N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE:    return N4JSPackage.NAMESPACE_IMPORT_SPECIFIER__DEFINED_TYPE;default :  return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  private void putResize(long key,V value){  if (key == 0) {    zeroValue=value;    hasZeroValue=true;    return;  }  int index1=(int)(key & mask);  long key1=keyTable[index1];  if (key1 == EMPTY) {    keyTable[index1]=key;    valueTable[index1]=value;    if (size++ >= threshold)     resize(capacity << 1);    return;  }  int index2=hash2(key);  long key2=keyTable[index2];  if (key2 == EMPTY) {    keyTable[index2]=key;    valueTable[index2]=value;    if (size++ >= threshold)     resize(capacity << 1);    return;  }  int index3=hash3(key);  long key3=keyTable[index3];  if (key3 == EMPTY) {    keyTable[index3]=key;    valueTable[index3]=value;    if (size++ >= threshold)     resize(capacity << 1);    return;  }  push(key,value,index1,key1,index2,key2,index3,key3);}  }
class C{  private void updateHoveringState(final MouseEvent e){  int hoveringProcessIndex=model.getHoveringProcessIndex();  if (model.getHoveringProcessIndex() != -1) {    int relativeX=(int)model.getMousePositionRelativeToProcess().getX();    int relativeY=(int)model.getMousePositionRelativeToProcess().getY();    OutputPort connectionSourceUnderMouse=controller.getPortForConnectorNear(model.getMousePositionRelativeToProcess(),model.getProcess(hoveringProcessIndex));    if (connectionSourceUnderMouse != model.getHoveringConnectionSource()) {      model.setHoveringConnectionSource(connectionSourceUnderMouse);      model.fireMiscChanged();      e.consume();    }    if (controller.checkPortUnder(model.getProcess(hoveringProcessIndex).getInnerSinks(),relativeX,relativeY) || controller.checkPortUnder(model.getProcess(hoveringProcessIndex).getInnerSources(),relativeX,relativeY)) {      e.consume();      return;    }    List<Operator> operators=model.getProcess(hoveringProcessIndex).getOperators();    ListIterator<Operator> iterator=operators.listIterator(operators.size());    while (iterator.hasPrevious()) {      Operator op=iterator.previous();      if (controller.checkPortUnder(op.getInputPorts(),relativeX,relativeY) || controller.checkPortUnder(op.getOutputPorts(),relativeX,relativeY)) {        e.consume();        return;      }      Rectangle2D rect=model.getOperatorRect(op);      if (rect == null) {        continue;      }      if (rect.contains(new Point2D.Double(relativeX,relativeY))) {        if (model.getHoveringOperator() != op) {          model.setHoveringPort(null);          view.setHoveringOperator(op);          if (model.getHoveringOperator() instanceof OperatorChain) {            controller.showStatus(I18N.getGUILabel("processRenderer.displayChain.hover"));          } else {            controller.showStatus(I18N.getGUILabel("processRenderer.operator.hover"));          }        }        e.consume();        return;      }    }  }  if (model.getHoveringOperator() != null) {    view.setHoveringOperator(null);  }  if (model.getHoveringPort() != null) {    model.setHoveringPort(null);    view.updateCursor();    model.fireMiscChanged();  }  if (model.getHoveringConnectionSource() != null) {    controller.showStatus(I18N.getGUILabel("processRenderer.connection.hover"));  } else {    controller.clearStatus();  }}  }
class C{  public void testNegNegFirstShorter(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-1,1,75,-89,-45,-2,-3,-18,-36,-17,-10,-3,-6,-7,-21};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public final CC gapAfter(String boundsSize){  hor.setGapAfter(ConstraintParser.parseBoundSize(boundsSize,true,true));  return this;}  }
class C{  public static Lattice<String> plfStringToLattice(String plfString,boolean predictPinchPoints){  final Pattern nodePattern=Pattern.compile("(.+?)\\((\\(.+?\\),)\\)(.*)");  final Pattern arcPattern=Pattern.compile("\\('(.+?)',(-?\\d+.?\\d*),(\\d+)\\),(.*)");  Matcher nodeMatcher=nodePattern.matcher(plfString);  final Lattice<String> lattice=new Lattice<String>();  int nodeID=Lattice.ROOT_ID;  int edgeId=0;  int maxPinchPoint=-1;  while (nodeMatcher.matches()) {    String nodeData=nodeMatcher.group(2);    String remainingData=nodeMatcher.group(3);    ++nodeID;    Node<String> currentNode=lattice.getNode(nodeID,true);    if (nodeID == 1) {      currentNode.addInEdge(new Edge<String>("",lattice.identity(),edgeId++,lattice.getRoot()));      if (predictPinchPoints) {        lattice.getRoot().setPinchPoint(true);        currentNode.setPinchPoint(true);        maxPinchPoint=nodeID;      }    }    Matcher arcMatcher=arcPattern.matcher(nodeData);    while (arcMatcher.matches()) {      final String arcLabel=arcMatcher.group(1);      final double arcWeight=Math.abs(Double.valueOf(arcMatcher.group(2)));      final int destinationNodeID=nodeID + Integer.valueOf(arcMatcher.group(3));      maxPinchPoint=(destinationNodeID > maxPinchPoint) ? destinationNodeID : maxPinchPoint;      String remainingArcs=arcMatcher.group(4);      arcMatcher=arcPattern.matcher(remainingArcs);      Node<String> destinationNode=lattice.getNode(destinationNodeID,true);      Edge<String> edge=new Edge<String>(arcLabel,arcWeight,edgeId++,currentNode);      destinationNode.addInEdge(edge);    }    if (predictPinchPoints)     lattice.getNode(maxPinchPoint).setPinchPoint(true);    nodeMatcher=nodePattern.matcher(remainingData);  }  Node<String> lastNode=lattice.nodeList.get(lattice.nodeList.size() - 1);  Node<String> goalNode=lattice.getNode(lattice.nodeList.size(),true);  goalNode.addInEdge(new Edge<String>("",lattice.identity(),edgeId++,lastNode));  if (predictPinchPoints) {    lastNode.setPinchPoint(true);    goalNode.setPinchPoint(true);  }  return lattice;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (savedInstanceState != null) {    Log.d(TAG,"onCreate(): activity re-created");  } else {    Log.d(TAG,"onCreate(): activity created anew");  }}  }
class C{  public Metaphone(){  super();}  }
class C{  public ColorTintFilter(Color mixColor,float mixValue){  if (mixColor == null) {    throw new IllegalArgumentException("mixColor cannot be null");  }  this.mixColor=mixColor;  if (mixValue < 0.0f) {    mixValue=0.0f;  } else   if (mixValue > 1.0f) {    mixValue=1.0f;  }  this.mixValue=mixValue;  int mix_r=(int)(mixColor.getRed() * mixValue);  int mix_g=(int)(mixColor.getGreen() * mixValue);  int mix_b=(int)(mixColor.getBlue() * mixValue);  float factor=1.0f - mixValue;  preMultipliedRed=new int[256];  preMultipliedGreen=new int[256];  preMultipliedBlue=new int[256];  for (int i=0; i < 256; i++) {    int value=(int)(i * factor);    preMultipliedRed[i]=value + mix_r;    preMultipliedGreen[i]=value + mix_g;    preMultipliedBlue[i]=value + mix_b;  }}  }
class C{  public static ZTauElement partModReduction(BigInteger k,int m,byte a,BigInteger[] s,byte mu,byte c){  BigInteger d0;  if (mu == 1) {    d0=s[0].add(s[1]);  } else {    d0=s[0].subtract(s[1]);  }  BigInteger[] v=getLucas(mu,m,true);  BigInteger vm=v[1];  SimpleBigDecimal lambda0=approximateDivisionByN(k,s[0],vm,a,m,c);  SimpleBigDecimal lambda1=approximateDivisionByN(k,s[1],vm,a,m,c);  ZTauElement q=round(lambda0,lambda1,mu);  BigInteger r0=k.subtract(d0.multiply(q.u)).subtract(BigInteger.valueOf(2).multiply(s[1]).multiply(q.v));  BigInteger r1=s[1].multiply(q.u).subtract(s[0].multiply(q.v));  return new ZTauElement(r0,r1);}  }
class C{  private Collection<GraphNode> buildSingleSet(GraphNode inputNode){  Collection<GraphNode> input=Sets.newHashSet();  input.add(inputNode);  return input;}  }
class C{  public PunctuationTrie<T> lookup(CharSequence s){  PunctuationTrie<T> t=this;  for (int i=0, n=s.length(); i < n; ++i) {    t=t.lookup(s.charAt(i));    if (null == t) {      break;    }  }  return t;}  }
class C{  public void endConfigure(){  int newInterval=((Integer)intervalSpinner.getValue()).intValue();  myOp.setInterval(newInterval);  int newMaxTries=((Integer)maxTriesSpinner.getValue()).intValue();  myOp.setMaxTries(newMaxTries);}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public boolean isAvailableScope(@NotNull State scope){  return scopes.contains(scope);}  }
class C{  public static DuplicateEventException convertToApi(org.oscm.internal.types.exception.DuplicateEventException oldEx){  return convertExceptionToApi(oldEx,DuplicateEventException.class);}  }
class C{  public boolean isAllowDecimals(){  return this.allowDecimals;}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + toString());}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  standaloneBlockEClass.getESuperTypes().add(this.getEntry());  stringEvaluatorEClass.getESuperTypes().add(this.getEntry());  modelEClass.getESuperTypes().add(this.getEntry());  modelEClass.getESuperTypes().add(this.getVarDefinition());  importEClass.getESuperTypes().add(this.getVarDefinition());  s_GlobalEClass.getESuperTypes().add(this.getStatement());  s_SpeciesEClass.getESuperTypes().add(this.getStatement());  s_SpeciesEClass.getESuperTypes().add(this.getS_Declaration());  s_SpeciesEClass.getESuperTypes().add(this.getTypeDefinition());  s_ExperimentEClass.getESuperTypes().add(this.getStatement());  s_ExperimentEClass.getESuperTypes().add(this.getVarDefinition());  s_DoEClass.getESuperTypes().add(this.getStatement());  s_LoopEClass.getESuperTypes().add(this.getS_Declaration());  s_IfEClass.getESuperTypes().add(this.getStatement());  s_OtherEClass.getESuperTypes().add(this.getStatement());  s_ReturnEClass.getESuperTypes().add(this.getStatement());  s_DeclarationEClass.getESuperTypes().add(this.getStatement());  s_DeclarationEClass.getESuperTypes().add(this.getVarDefinition());  s_ReflexEClass.getESuperTypes().add(this.getS_Declaration());  s_DefinitionEClass.getESuperTypes().add(this.getS_Declaration());  s_DefinitionEClass.getESuperTypes().add(this.getActionDefinition());  s_AssignmentEClass.getESuperTypes().add(this.getStatement());  s_DirectAssignmentEClass.getESuperTypes().add(this.getS_Assignment());  s_SetEClass.getESuperTypes().add(this.getS_Assignment());  s_EquationsEClass.getESuperTypes().add(this.getStatement());  s_EquationsEClass.getESuperTypes().add(this.getEquationDefinition());  s_SolveEClass.getESuperTypes().add(this.getStatement());  s_DisplayEClass.getESuperTypes().add(this.getStatement());  speciesOrGridDisplayStatementEClass.getESuperTypes().add(this.getStatement());  parametersEClass.getESuperTypes().add(this.getExpression());  argumentDefinitionEClass.getESuperTypes().add(this.getVarDefinition());  facetEClass.getESuperTypes().add(this.getVarDefinition());  argumentPairEClass.getESuperTypes().add(this.getExpression());  functionEClass.getESuperTypes().add(this.getExpression());  expressionListEClass.getESuperTypes().add(this.getExpression());  variableRefEClass.getESuperTypes().add(this.getExpression());  equationDefinitionEClass.getESuperTypes().add(this.getGamlDefinition());  typeDefinitionEClass.getESuperTypes().add(this.getGamlDefinition());  typeDefinitionEClass.getESuperTypes().add(this.getActionDefinition());  varDefinitionEClass.getESuperTypes().add(this.getGamlDefinition());  actionDefinitionEClass.getESuperTypes().add(this.getGamlDefinition());  unitFakeDefinitionEClass.getESuperTypes().add(this.getGamlDefinition());  typeFakeDefinitionEClass.getESuperTypes().add(this.getTypeDefinition());  actionFakeDefinitionEClass.getESuperTypes().add(this.getActionDefinition());  skillFakeDefinitionEClass.getESuperTypes().add(this.getGamlDefinition());  varFakeDefinitionEClass.getESuperTypes().add(this.getVarDefinition());  equationFakeDefinitionEClass.getESuperTypes().add(this.getEquationDefinition());  terminalExpressionEClass.getESuperTypes().add(this.getExpression());  s_ActionEClass.getESuperTypes().add(this.getS_Definition());  s_VarEClass.getESuperTypes().add(this.getS_Definition());  pairEClass.getESuperTypes().add(this.getExpression());  ifEClass.getESuperTypes().add(this.getExpression());  castEClass.getESuperTypes().add(this.getExpression());  binaryEClass.getESuperTypes().add(this.getExpression());  unitEClass.getESuperTypes().add(this.getExpression());  unaryEClass.getESuperTypes().add(this.getExpression());  accessEClass.getESuperTypes().add(this.getExpression());  arrayEClass.getESuperTypes().add(this.getExpression());  pointEClass.getESuperTypes().add(this.getExpression());  parameterEClass.getESuperTypes().add(this.getExpression());  unitNameEClass.getESuperTypes().add(this.getExpression());  typeRefEClass.getESuperTypes().add(this.getExpression());  skillRefEClass.getESuperTypes().add(this.getExpression());  actionRefEClass.getESuperTypes().add(this.getExpression());  equationRefEClass.getESuperTypes().add(this.getExpression());  intLiteralEClass.getESuperTypes().add(this.getTerminalExpression());  doubleLiteralEClass.getESuperTypes().add(this.getTerminalExpression());  colorLiteralEClass.getESuperTypes().add(this.getTerminalExpression());  stringLiteralEClass.getESuperTypes().add(this.getTerminalExpression());  booleanLiteralEClass.getESuperTypes().add(this.getTerminalExpression());  reservedLiteralEClass.getESuperTypes().add(this.getTerminalExpression());  initEClass(entryEClass,Entry.class,"Entry",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(standaloneBlockEClass,StandaloneBlock.class,"StandaloneBlock",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getStandaloneBlock_Block(),this.getBlock(),null,"block",null,0,1,StandaloneBlock.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(stringEvaluatorEClass,StringEvaluator.class,"StringEvaluator",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getStringEvaluator_Toto(),ecorePackage.getEString(),"toto",null,0,1,StringEvaluator.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getStringEvaluator_Expr(),this.getExpression(),null,"expr",null,0,1,StringEvaluator.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(modelEClass,Model.class,"Model",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getModel_Pragmas(),this.getPragma(),null,"pragmas",null,0,-1,Model.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getModel_Imports(),this.getImport(),null,"imports",null,0,-1,Model.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getModel_Block(),this.getBlock(),null,"block",null,0,1,Model.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(blockEClass,Block.class,"Block",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getBlock_Statements(),this.getStatement(),null,"statements",null,0,-1,Block.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getBlock_Function(),this.getExpression(),null,"function",null,0,1,Block.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(importEClass,Import.class,"Import",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getImport_ImportURI(),ecorePackage.getEString(),"importURI",null,0,1,Import.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(pragmaEClass,Pragma.class,"Pragma",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getPragma_Name(),ecorePackage.getEString(),"name",null,0,1,Pragma.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(statementEClass,Statement.class,"Statement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getStatement_Key(),ecorePackage.getEString(),"key",null,0,1,Statement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getStatement_FirstFacet(),ecorePackage.getEString(),"firstFacet",null,0,1,Statement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getStatement_Expr(),this.getExpression(),null,"expr",null,0,1,Statement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getStatement_Facets(),this.getFacet(),null,"facets",null,0,-1,Statement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getStatement_Block(),this.getBlock(),null,"block",null,0,1,Statement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(s_GlobalEClass,S_Global.class,"S_Global",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(s_SpeciesEClass,S_Species.class,"S_Species",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(s_ExperimentEClass,S_Experiment.class,"S_Experiment",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(s_DoEClass,S_Do.class,"S_Do",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(s_LoopEClass,S_Loop.class,"S_Loop",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(s_IfEClass,S_If.class,"S_If",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getS_If_Else(),ecorePackage.getEObject(),null,"else",null,0,1,S_If.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(s_OtherEClass,S_Other.class,"S_Other",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(s_ReturnEClass,S_Return.class,"S_Return",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(s_DeclarationEClass,S_Declaration.class,"S_Declaration",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(s_ReflexEClass,S_Reflex.class,"S_Reflex",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(s_DefinitionEClass,S_Definition.class,"S_Definition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getS_Definition_Tkey(),this.getExpression(),null,"tkey",null,0,1,S_Definition.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getS_Definition_Args(),this.getActionArguments(),null,"args",null,0,1,S_Definition.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(s_AssignmentEClass,S_Assignment.class,"S_Assignment",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getS_Assignment_Value(),this.getExpression(),null,"value",null,0,1,S_Assignment.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(s_DirectAssignmentEClass,S_DirectAssignment.class,"S_DirectAssignment",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(s_SetEClass,S_Set.class,"S_Set",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(s_EquationsEClass,S_Equations.class,"S_Equations",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getS_Equations_Equations(),this.getS_Assignment(),null,"equations",null,0,-1,S_Equations.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(s_SolveEClass,S_Solve.class,"S_Solve",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(s_DisplayEClass,S_Display.class,"S_Display",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getS_Display_Name(),ecorePackage.getEString(),"name",null,0,1,S_Display.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(speciesOrGridDisplayStatementEClass,speciesOrGridDisplayStatement.class,"speciesOrGridDisplayStatement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(parametersEClass,Parameters.class,"Parameters",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getParameters_Params(),this.getExpressionList(),null,"params",null,0,1,Parameters.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(actionArgumentsEClass,ActionArguments.class,"ActionArguments",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getActionArguments_Args(),this.getArgumentDefinition(),null,"args",null,0,-1,ActionArguments.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(argumentDefinitionEClass,ArgumentDefinition.class,"ArgumentDefinition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getArgumentDefinition_Type(),this.getExpression(),null,"type",null,0,1,ArgumentDefinition.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getArgumentDefinition_Default(),this.getExpression(),null,"default",null,0,1,ArgumentDefinition.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(facetEClass,Facet.class,"Facet",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getFacet_Key(),ecorePackage.getEString(),"key",null,0,1,Facet.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFacet_Expr(),this.getExpression(),null,"expr",null,0,1,Facet.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFacet_Block(),this.getBlock(),null,"block",null,0,1,Facet.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(expressionEClass,Expression.class,"Expression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getExpression_Left(),this.getExpression(),null,"left",null,0,1,Expression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getExpression_Op(),ecorePackage.getEString(),"op",null,0,1,Expression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getExpression_Right(),this.getExpression(),null,"right",null,0,1,Expression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(argumentPairEClass,ArgumentPair.class,"ArgumentPair",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(functionEClass,Function.class,"Function",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getFunction_Action(),this.getExpression(),null,"action",null,0,1,Function.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunction_Parameters(),this.getParameters(),null,"parameters",null,0,1,Function.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunction_Args(),this.getExpressionList(),null,"args",null,0,1,Function.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFunction_Type(),this.getTypeInfo(),null,"type",null,0,1,Function.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(expressionListEClass,ExpressionList.class,"ExpressionList",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getExpressionList_Exprs(),this.getExpression(),null,"exprs",null,0,-1,ExpressionList.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(variableRefEClass,VariableRef.class,"VariableRef",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getVariableRef_Ref(),this.getVarDefinition(),null,"ref",null,0,1,VariableRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(typeInfoEClass,TypeInfo.class,"TypeInfo",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTypeInfo_First(),this.getExpression(),null,"first",null,0,1,TypeInfo.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTypeInfo_Second(),this.getExpression(),null,"second",null,0,1,TypeInfo.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(gamlDefinitionEClass,GamlDefinition.class,"GamlDefinition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getGamlDefinition_Name(),ecorePackage.getEString(),"name",null,0,1,GamlDefinition.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(equationDefinitionEClass,EquationDefinition.class,"EquationDefinition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(typeDefinitionEClass,TypeDefinition.class,"TypeDefinition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(varDefinitionEClass,VarDefinition.class,"VarDefinition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(actionDefinitionEClass,ActionDefinition.class,"ActionDefinition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(unitFakeDefinitionEClass,UnitFakeDefinition.class,"UnitFakeDefinition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(typeFakeDefinitionEClass,TypeFakeDefinition.class,"TypeFakeDefinition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(actionFakeDefinitionEClass,ActionFakeDefinition.class,"ActionFakeDefinition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(skillFakeDefinitionEClass,SkillFakeDefinition.class,"SkillFakeDefinition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(varFakeDefinitionEClass,VarFakeDefinition.class,"VarFakeDefinition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(equationFakeDefinitionEClass,EquationFakeDefinition.class,"EquationFakeDefinition",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(terminalExpressionEClass,TerminalExpression.class,"TerminalExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(s_ActionEClass,S_Action.class,"S_Action",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(s_VarEClass,S_Var.class,"S_Var",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(pairEClass,Pair.class,"Pair",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(ifEClass,If.class,"If",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getIf_IfFalse(),this.getExpression(),null,"ifFalse",null,0,1,If.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(castEClass,Cast.class,"Cast",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(binaryEClass,Binary.class,"Binary",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(unitEClass,Unit.class,"Unit",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(unaryEClass,Unary.class,"Unary",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(accessEClass,Access.class,"Access",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getAccess_Args(),this.getExpressionList(),null,"args",null,0,1,Access.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getAccess_Named_exp(),ecorePackage.getEString(),"named_exp",null,0,1,Access.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(arrayEClass,Array.class,"Array",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getArray_Exprs(),this.getExpressionList(),null,"exprs",null,0,1,Array.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(pointEClass,Point.class,"Point",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getPoint_Z(),this.getExpression(),null,"z",null,0,1,Point.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(parameterEClass,Parameter.class,"Parameter",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getParameter_BuiltInFacetKey(),ecorePackage.getEString(),"builtInFacetKey",null,0,1,Parameter.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(unitNameEClass,UnitName.class,"UnitName",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getUnitName_Ref(),this.getUnitFakeDefinition(),null,"ref",null,0,1,UnitName.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(typeRefEClass,TypeRef.class,"TypeRef",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTypeRef_Ref(),this.getTypeDefinition(),null,"ref",null,0,1,TypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTypeRef_Parameter(),this.getTypeInfo(),null,"parameter",null,0,1,TypeRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(skillRefEClass,SkillRef.class,"SkillRef",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getSkillRef_Ref(),this.getSkillFakeDefinition(),null,"ref",null,0,1,SkillRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(actionRefEClass,ActionRef.class,"ActionRef",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getActionRef_Ref(),this.getActionDefinition(),null,"ref",null,0,1,ActionRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(equationRefEClass,EquationRef.class,"EquationRef",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getEquationRef_Ref(),this.getEquationDefinition(),null,"ref",null,0,1,EquationRef.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(intLiteralEClass,IntLiteral.class,"IntLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(doubleLiteralEClass,DoubleLiteral.class,"DoubleLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(colorLiteralEClass,ColorLiteral.class,"ColorLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(stringLiteralEClass,StringLiteral.class,"StringLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(booleanLiteralEClass,BooleanLiteral.class,"BooleanLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(reservedLiteralEClass,ReservedLiteral.class,"ReservedLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  createResource(eNS_URI);}  }
class C{  @Override public void skippedEntity(String str) throws SAXException {}  }
class C{  @LargeTest public void testThumbnailForH264QCIF() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_176x144_15fps_144kbps_AMRNB_8kHz_12.2kbps_m_1_17.3gp";  final int atTime=0;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final int outWidth=mediaVideoItem.getWidth() * 2;  final int outHeight=mediaVideoItem.getHeight() * 2;  final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  validateThumbnail(thumbNailBmp,outWidth,outHeight);}  }
class C{  public void initialize(Supplier<DataSource<CloseableReference<CloseableImage>>> dataSourceSupplier,String id,CacheKey cacheKey,Object callerContext){  super.initialize(id,callerContext);  init(dataSourceSupplier);  mCacheKey=cacheKey;}  }
class C{  private void checkCompletion(){  for (Iterator<ComputeTaskFuture<Integer>> iter=futures.iterator(); iter.hasNext(); ) {    ComputeTaskFuture<Integer> fut=iter.next();    if (fut.isDone()) {      try {        Integer res=fut.get();        assert res == params.getJobsCount() : "Task returned wrong result [taskIs=" + fut.getTaskSession().getId() + ", result="+ res+ "]";        ignite.log().info(">>> Task completed successfully. Task id: " + fut.getTaskSession().getId());      } catch (      IgniteFutureCancelledException ignored) {        ignite.log().info(">>> Task cancelled: " + fut.getTaskSession().getId());      }catch (      IgniteException e) {        ignite.log().warning(">>> Get operation for completed task failed: " + fut.getTaskSession().getId(),e);      } finally {        iter.remove();      }    }  }}  }
class C{  @Override public Xid[] recover(int flag) throws XAException {  debugCodeCall("recover",quoteFlags(flag));  checkOpen();  try (Statement stat=physicalConn.createStatement()){    ResultSet rs=stat.executeQuery("SELECT * FROM " + "INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION");    ArrayList<Xid> list=New.arrayList();    while (rs.next()) {      String tid=rs.getString("TRANSACTION");      int id=getNextId(XID);      Xid xid=new JdbcXid(factory,id,tid);      list.add(xid);    }    rs.close();    Xid[] result=new Xid[list.size()];    list.toArray(result);    if (list.size() > 0) {      prepared=true;    }    return result;  } catch (  SQLException e) {    XAException xa=new XAException(XAException.XAER_RMERR);    xa.initCause(e);    throw xa;  }}  }
class C{  public void writeBitsLossless(int id,int format,int width,int height,Color[] colors,byte[] imageData,boolean hasAlpha) throws IOException {  startTag(hasAlpha ? TAG_DEFINEBITSLOSSLESS2 : TAG_DEFINEBITSLOSSLESS,id,true);  out.writeUI8(format);  out.writeUI16(width);  out.writeUI16(height);switch (format) {case BITMAP_FORMAT_8_BIT:    out.writeUI8(colors.length - 1);  break;case BITMAP_FORMAT_16_BIT:out.writeUI16(colors.length - 1);break;case BITMAP_FORMAT_32_BIT:break;default :throw new IOException("unknown bitmap format: " + format);}DeflaterOutputStream deflater=new DeflaterOutputStream(bytes);OutStream zipOut=new OutStream(deflater);if (format == BITMAP_FORMAT_8_BIT || format == BITMAP_FORMAT_16_BIT) {for (int i=0; i < colors.length; i++) {if (hasAlpha) {colors[i].writeWithAlpha(zipOut);} else {colors[i].writeRGB(zipOut);}}}zipOut.write(imageData);zipOut.flush();deflater.finish();completeTag();}  }
class C{  public CharArrayList(final Iterator<? extends Character> i){  this();  while (i.hasNext())   this.add(i.next());}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public static double bitand(double left,double right){  return (int)left & (int)right;}  }
class C{  public static boolean isUnixSocketUri(@NotNull URI uri){  Objects.requireNonNull(uri,"Required non-null uri");  return UNIX_SOCKET_SCHEME.equals(uri.getScheme());}  }
class C{  public Projectron(KernelTrick k){  this(k,0.1);}  }
class C{  public static void doOperations(){  try {    region.create(CREATE_KEY,CREATE_VALUE);    region.put(UPDATE_KEY,UPDATE_VALUE2);    region.invalidate(INVALIDATE_KEY);    region.destroy(DESTROY_KEY);    Map map=new HashMap();    map.put(PUTALL_KEY,PUTALL_VALUE);    map.put(PUTALL_KEY2,PUTALL_VALUE2);    region.putAll(map);  } catch (  Exception e) {    Assert.fail(" Test failed due to " + e,e);  }}  }
class C{  private void updateImage(ArtworkEntry artworkEntry){  if (artworkEntry.getArtworkLocation().equals(mArtworkEntry.getArtworkLocation())) {    return;  }  if (mIsLoading) {    mNewArtworkEntry=artworkEntry;  } else {    mArtworkEntry=artworkEntry;    loadImage();  }}  }
class C{  private void addJsonForEntryInfos(StringBuilder result,ArrayList<EntryInfo> entryInfoList,String paneId){  result.append("{\n");  boolean addedOneAlready=false;  for (  final EntryInfo entryInfo : entryInfoList) {    if (addedOneAlready) {      result.append(",\n");    }    addedOneAlready=true;    result.append(JsonBuilder.quote((paneId != null ? paneId + ":" : "") + entryInfo.id));    result.append(":");    result.append("[" + JsonBuilder.quote(entryInfo.note) + ", "+ JsonBuilder.quote(entryInfo.quotation)+ ", "+ entryInfo.isPublic+ ", "+ entryInfo.hasChildren+ ", \""+ entryInfo.type+ "\", "+ entryInfo.hasParent+ "]");  }  result.append("\n}");}  }
class C{  public void saveAsCsv(String filename){  CsvWriter csvWriter=null;  try {    int n=pointSet.getNumberOfChildren();    String[] column={"Index","Name","X","Y","Z","Annotation"};    csvWriter=new CsvWriter(filename,column);    csvWriter.open();    String[] value=new String[column.length];    Landscape landscape=Landscape.getInstance();    Vector3 coord=new Vector3();    for (int i=0; i < n; ++i) {      Waypoint wp=(Waypoint)pointSet.getChild(i);      coord.set(wp.getTranslation());      double elev=landscape.getElevationAtHighestLevel(coord.getX(),coord.getY());      landscape.localToWorldCoordinate(coord);      coord.setZ(elev);      value[0]=Integer.toString(i);      value[1]=wp.getName();      value[2]=Double.toString(coord.getX());      value[3]=Double.toString(coord.getY());      value[4]=Double.toString(coord.getZ());      value[5]=wp.getState().getAnnotation();      csvWriter.writeLine(value);    }    csvWriter.close();    Console.getInstance().println(n + " records saved to " + filename);  } catch (  Exception e) {    e.printStackTrace();    if (csvWriter != null) {      try {        csvWriter.close();      } catch (      Exception e2) {        e.printStackTrace();      }    }  }}  }
class C{  public float weight(int contentLength,int totalTermFreq){  float numDocs=1 + contentLength / pivot;  return (k1 + 1) * (float)Math.log(1 + (numDocs + 0.5D) / (totalTermFreq + 0.5D));}  }
class C{  public static final LocoNetMessage createIplUt4QueryPacket(){  return createIplSpecificHostQueryPacket(LnConstants.RE_IPL_MFR_DIGITRAX,LnConstants.RE_IPL_DIGITRAX_HOST_UT4);}  }
class C{  public boolean isAuthenticated(HttpMessage msg){  return getContext().getAuthenticationMethod().isAuthenticated(msg);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case SESSION_IDS:    return isSetSessionIDs();case PACKET:  return isSetPacket();}throw new IllegalStateException();}  }
class C{  public MessageStore(Context context,int encryptionMode) throws IllegalArgumentException {  store=new StorageBase(context,encryptionMode);  mContext=context;}  }
class C{  public static Object readDeclaredField(final Object target,final String fieldName) throws IllegalAccessException {  return FieldUtils.readDeclaredField(target,fieldName,false);}  }
class C{  public int firstByte(){  return firstByte;}  }
class C{  void verifyExceptionCaptured(Class<? extends Throwable> expectedExceptionClass){  assertTrue("Excpected exception not thrown",exceptionEventCapture.hasCaptured());  Throwable caughtEx=exceptionEventCapture.getValue();  assertEquals(expectedExceptionClass,caughtEx.getClass());  exceptionEventCapture.reset();}  }
class C{  public static double digamma(double x){  if (x > 0 && x <= S_LIMIT) {    return -GAMMA - 1 / x;  }  if (x >= C_LIMIT) {    double inv=1 / (x * x);    return FastMath.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));  }  return digamma(x + 1) - 1 / x;}  }
class C{  public static void logAllocation(RVMType type,int size){  if (demographics) {    DemographicInformation info=demographicData.get(type);    if (info != null) {      info.count++;      info.size+=size;    } else {      info=new DemographicInformation();      info.count++;      info.size+=size;      demographicData.put(type,info);    }  }}  }
class C{  protected Link createLink(final String relation,final URI href,final HttpMethod method){  return new Link(relation,href,method);}  }
class C{  public synchronized ZooKeeperClientBuilder zkAclId(String zkAclId){  this.zkAclIdSet=true;  this.zkAclId=zkAclId;  return this;}  }
class C{  private void convertEdges(final Collection<INaviEdge> edges,final Graph2D graph2D,final Map<INaviViewNode,Node> rawNodeToNodeMap,final boolean adjustColors){  for (  final INaviEdge edge : edges) {    final NaviNode sourceNode=m_ynodeToNodeMap.get(rawNodeToNodeMap.get(edge.getSource()));    final NaviNode targetNode=m_ynodeToNodeMap.get(rawNodeToNodeMap.get(edge.getTarget()));    final Pair<Edge,NaviEdge> result=ZyEdgeBuilder.convertEdge(edge,sourceNode,targetNode,graph2D,adjustColors);    m_yedgeToEdgeMap.put(result.first(),result.second());  }}  }
class C{  private static void markForRemove(MethodNode mth,BlockNode block){  for (  BlockNode p : block.getPredecessors()) {    p.getSuccessors().remove(block);    p.updateCleanSuccessors();  }  for (  BlockNode s : block.getSuccessors()) {    s.getPredecessors().remove(block);  }  block.getPredecessors().clear();  block.getSuccessors().clear();  block.add(AFlag.REMOVE);  block.remove(AFlag.SKIP);  CatchAttr catchAttr=block.get(AType.CATCH_BLOCK);  if (catchAttr != null) {    catchAttr.getTryBlock().removeBlock(mth,block);    for (    BlockNode skipBlock : mth.getBasicBlocks()) {      if (skipBlock.contains(AFlag.SKIP)) {        markForRemove(mth,skipBlock);      }    }  }}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  JokeCacheDao.dropTable(db,ifExists);  FreshNewsCacheDao.dropTable(db,ifExists);  PictureCacheDao.dropTable(db,ifExists);  SisterCacheDao.dropTable(db,ifExists);  VideoCacheDao.dropTable(db,ifExists);}  }
class C{  public void deleteResourceConfig(String clusterName,ResourceType resourceType,String dsName) throws ConfigurationException {  if (getClusterHome() == null) {    throw new ConfigurationException("No home directory found from which to configure resources.");  }  File resources=getDir(getResourceConfigDirName(getClusterHome(),clusterName,resourceType));  String delFileName=resources.getAbsolutePath() + File.separator + dsName+ ".properties";  delFile(delFileName);}  }
class C{  public void testPosZero(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={0};  int aSign=1;  int bSign=0;  byte rBytes[]={0,-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static ParsedBooleanQuery parseBooleanQuery(QueryLanguage ql,String query,String baseURI) throws MalformedQueryException, UnsupportedQueryLanguageException {  ParsedOperation q=parseQuery(ql,query,baseURI);  if (q instanceof ParsedBooleanQuery) {    return (ParsedBooleanQuery)q;  }  throw new IllegalArgumentException("query is not a boolean query: " + query);}  }
class C{  void register(Object listener){  Multimap<Class<?>,Subscriber> listenerMethods=findAllSubscribers(listener);  for (  Map.Entry<Class<?>,Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {    Class<?> eventType=entry.getKey();    Collection<Subscriber> eventMethodsInListener=entry.getValue();    CopyOnWriteArraySet<Subscriber> eventSubscribers=subscribers.get(eventType);    if (eventSubscribers == null) {      CopyOnWriteArraySet<Subscriber> newSet=new CopyOnWriteArraySet<Subscriber>();      eventSubscribers=MoreObjects.firstNonNull(subscribers.putIfAbsent(eventType,newSet),newSet);    }    eventSubscribers.addAll(eventMethodsInListener);  }}  }
class C{  public void runTest(){  Vector v=new Vector();  v.addElement(new String("vector hello 1"));  v.addElement(new String("vector hello 2"));  v.addElement(new String("vector hello 3"));  String strArray[]=new String[3];  strArray[0]="array hello 1";  strArray[1]="array hello 2";  strArray[2]="array hello 3";  VelocityContext context=new VelocityContext();  try {    assureResultsDirectoryExists(RESULT_DIR);    Template template=RuntimeSingleton.getTemplate(getFileName(null,"context_safety",TMPL_FILE_EXT));    FileOutputStream fos1=new FileOutputStream(getFileName(RESULT_DIR,"context_safety1",RESULT_FILE_EXT));    FileOutputStream fos2=new FileOutputStream(getFileName(RESULT_DIR,"context_safety2",RESULT_FILE_EXT));    Writer writer1=new BufferedWriter(new OutputStreamWriter(fos1));    Writer writer2=new BufferedWriter(new OutputStreamWriter(fos2));    context.put("vector",v);    template.merge(context,writer1);    writer1.flush();    writer1.close();    context.put("vector",strArray);    template.merge(context,writer2);    writer2.flush();    writer2.close();    if (!isMatch(RESULT_DIR,COMPARE_DIR,"context_safety1",RESULT_FILE_EXT,CMP_FILE_EXT) || !isMatch(RESULT_DIR,COMPARE_DIR,"context_safety2",RESULT_FILE_EXT,CMP_FILE_EXT)) {      fail("Output incorrect.");    }  } catch (  Exception e) {    fail(e.getMessage());  }}  }
class C{  public static Insets of(int left,int top,int right,int bottom){  if (left == 0 && top == 0 && right == 0 && bottom == 0) {    return NONE;  }  return new Insets(left,top,right,bottom);}  }
class C{  public VisorThreadInfo(String name,Long id,Thread.State state,VisorThreadLockInfo lock,String lockName,Long lockOwnerId,String lockOwnerName,Boolean inNative,Boolean suspended,Long waitedCnt,Long waitedTime,Long blockedCnt,Long blockedTime,StackTraceElement[] stackTrace,VisorThreadLockInfo[] locks,VisorThreadMonitorInfo[] lockedMonitors){  this.name=name;  this.id=id;  this.state=state;  this.lock=lock;  this.lockName=lockName;  this.lockOwnerId=lockOwnerId;  this.lockOwnerName=lockOwnerName;  this.inNative=inNative;  this.suspended=suspended;  this.waitedCnt=waitedCnt;  this.waitedTime=waitedTime;  this.blockedCnt=blockedCnt;  this.blockedTime=blockedTime;  this.stackTrace=stackTrace;  this.locks=locks;  this.lockedMonitors=lockedMonitors;}  }
class C{  public void access(){  lastAccessedTime=System.currentTimeMillis();}  }
class C{  public VNXeCommandJob modifyFileSystemAsync(ModifyFileSystemParam param,String resourceId) throws VNXeException {  StringBuilder urlBld=new StringBuilder(URL_RESOURCE);  urlBld.append(resourceId);  urlBld.append(MODIFY);  _url=urlBld.toString();  return postRequestAsync(param);}  }
class C{  public boolean timestampResolved(){  return timestampResolved;}  }
class C{  public boolean canReach(Environment env,MemberDefinition f){  return field.canReach(env,f);}  }
class C{  public boolean updatesAreDetected(int type) throws SQLException {  return false;}  }
class C{  public static MenuItem createNavigationMenuItem(){  MenuItem item=new MenuItem();  item.setStyle("padding: 0;");  item.setUpdate(":tableForm,:navForm");  item.addActionListener(actionListener);  return item;}  }
class C{  public static void removeProxy(){  System.clearProperty("http.proxyHost");}  }
class C{  public static NSObject parse(final byte[] bytes) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {  return parse(new ByteArrayInputStream(bytes));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void addParameter(MethodDeclaration method,Parameter parameter){  List<Parameter> parameters=method.getParameters();  if (parameters == null) {    parameters=new ArrayList<Parameter>();    method.setParameters(parameters);  }  parameters.add(parameter);}  }
class C{  @Override public boolean handleMessage(Message msg){  if (msg.what == 1) {    RefundOrdersAdapter adapter=new RefundOrdersAdapter(RefundOrdersActivity.this,refundOrders);    listViewRefundOrder.setAdapter(adapter);  }  return true;}  }
class C{  public GDSHelper(FbDatabase database){  this.registerResultSets=!database.getConnectionProperties().getExtraDatabaseParameters().hasArgument(DatabaseParameterBufferExtension.NO_RESULT_SET_TRACKING);  this.database=database;  syncObject=database.getSynchronizationObject();}  }
class C{  private void onPermissionsNotGranted(){  Toast.makeText(this,R.string.toast_permissions_not_granted,Toast.LENGTH_SHORT).show();  finish();}  }
class C{  public void sendToServer(AbstractPacket message){  this.channels.get(Side.CLIENT).attr(FMLOutboundHandler.FML_MESSAGETARGET).set(FMLOutboundHandler.OutboundTarget.TOSERVER);  this.channels.get(Side.CLIENT).writeAndFlush(message);}  }
class C{  public FeatureVector classify(Object example){  return new FeatureVector(featureValue(example));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:24:54.453 -0400",hash_original_method="E01A9375EF3E05D6840F4E3FB44E9B7F",hash_generated_method="1610E441C16EF19AF21A1F0C5706B95F") public static boolean stopFilteringMulticastV6Packets(){  double taintDouble=0;  return ((taintDouble) == 1);}  }
class C{  public void resetTo(int begin,int end){  this.diet=false;  this.initialPosition=this.startPosition=this.currentPosition=begin;  if (this.source != null && this.source.length < end) {    this.eofPosition=this.source.length;  } else {    this.eofPosition=end < Integer.MAX_VALUE ? end + 1 : end;  }  this.commentPtr=-1;  this.foundTaskCount=0;}  }
class C{  public List<Completion> _queryUser_Completions(long userId){synchronized (this) {    if (user_CompletionsQuery == null) {      QueryBuilder<Completion> queryBuilder=queryBuilder();      queryBuilder.where(Properties.UserId.eq(null));      user_CompletionsQuery=queryBuilder.build();    }  }  Query<Completion> query=user_CompletionsQuery.forCurrentThread();  query.setParameter(0,userId);  return query.list();}  }
class C{  public static void main(String[] args){  System.out.println("Available Fonts:");  String[] family=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();  for (int i=0; i < family.length; i++)   System.out.println(" - " + family[i]);  org.compiere.Adempiere.startup(true);  MPrintFont pf=new MPrintFont(Env.getCtx(),100,null);  dump(pf.getFont());  String[] systemLocical=new String[]{"Dialog","DialogInput","Monospaced","Serif","SansSerif"};  for (int i=0; i < systemLocical.length; i++) {  }  int[] IDs=PO.getAllIDs("AD_PrintFont",null,null);  for (int i=0; i < IDs.length; i++) {    pf=new MPrintFont(Env.getCtx(),IDs[i],null);    System.out.println(IDs[i] + " = " + pf.getFont());  }}  }
class C{  public static String obtenerURLPagoTasas() throws ConsultaExcepcion {  try {    return Configuracion.getURLPago();  } catch (  Exception e) {    logger.error("Error al obtener URL de pago de tasas  [obtenerURLPagoTasas][Excepcion]",e.fillInStackTrace());    throw new ConsultaExcepcion(ConsultaCodigosError.EC_OBTENER_URL_PAGO,e.getCause());  }}  }
class C{  public PDFXref(byte[] line){  if (line == null) {    id=-1;    generation=-1;  } else {    id=Integer.parseInt(new String(line,0,10));    generation=Integer.parseInt(new String(line,11,5));  }  compressed=false;}  }
class C{  public static GLFont fromBuffer(String name,BufferedImage image,int width,int height,GLFontMetrics metric){  if (name == null)   throw new IllegalArgumentException("name may not be null");  if (image == null)   throw new IllegalArgumentException("image may not be null");  if (metric == null)   throw new IllegalArgumentException("metric may not be null");  ColorModel glAlphaColorModel=new ComponentColorModel(ColorSpace.getInstance(ColorSpace.CS_sRGB),new int[]{8,8,8,8},true,false,Transparency.TRANSLUCENT,DataBuffer.TYPE_BYTE);  WritableRaster raster=Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,width,height,4,null);  BufferedImage texImage=new BufferedImage(glAlphaColorModel,raster,true,new Hashtable<Object,Object>());  Graphics g=texImage.getGraphics();  g.setColor(new Color(0f,0f,0f,0f));  g.fillRect(0,0,width,height);  g.drawImage(image,0,0,null);  byte[] data=((DataBufferByte)texImage.getRaster().getDataBuffer()).getData();  ByteBuffer buffer=ByteBuffer.allocateDirect(data.length);  buffer.order(ByteOrder.nativeOrder());  buffer.put(data,0,data.length);  buffer.flip();  IntBuffer tmp=BufferUtils.createIntBuffer(1);  GL11.glGenTextures(tmp);  tmp.rewind();  GL11.glBindTexture(GL11.GL_TEXTURE_2D,tmp.get(0));  GL11.glTexParameteri(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_MIN_FILTER,GL11.GL_LINEAR);  GL11.glTexParameteri(GL11.GL_TEXTURE_2D,GL11.GL_TEXTURE_MAG_FILTER,GL11.GL_LINEAR);  GL11.glTexImage2D(GL11.GL_TEXTURE_2D,0,GL11.GL_RGBA,width,height,0,GL11.GL_RGBA,GL11.GL_UNSIGNED_BYTE,buffer);  tmp.rewind();  int texIdx=tmp.get(0);  GLFont font=new GLFont(name,texIdx,0.44f,metric);  return font;}  }
class C{  @Nonnull public BugInstance addOptionalField(@CheckForNull XField xfield){  if (xfield == null) {    return this;  }  return addField(xfield.getClassName(),xfield.getName(),xfield.getSignature(),xfield.isStatic());}  }
class C{  public JSONObject(JSONObject jo,String[] sa) throws JSONException {  this();  for (int i=0; i < sa.length; i+=1) {    putOpt(sa[i],jo.opt(sa[i]));  }}  }
class C{  public static boolean isSelectingMetaTracker(CharSequence text,Object what){  return what == SELECTING;}  }
class C{  public PLHTTPFileDownloader(){  super();}  }
class C{  public static CtClass toCtClass(String desc,ClassPool cp) throws NotFoundException {  CtClass[] clazz=new CtClass[1];  int res=toCtClass(cp,desc,0,clazz,0);  if (res >= 0)   return clazz[0]; else {    return cp.get(desc.replace('/','.'));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.080 -0500",hash_original_method="23FE2246FE60A7859CD93D836CF467DE",hash_generated_method="0EF3D39AA54E6C404C253299675A50A8") public void runOnMainSync(Runnable runner){  validateNotAppThread();  SyncRunnable sr=new SyncRunnable(runner);  mThread.getHandler().post(sr);  sr.waitForComplete();}  }
class C{  protected boolean isRecipientNotFound(){  return fieldRecipientNotFound;}  }
class C{  public XBeeMessage(String m,int l){  super(m,l);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.167 -0500",hash_original_method="870E9211222A33CDF50FFEE42B5AEA84",hash_generated_method="2295C47135890B172FCC5171045CB48E") public String buildUnionQuery(String[] subQueries,String sortOrder,String limit){  StringBuilder query=new StringBuilder(128);  int subQueryCount=subQueries.length;  String unionOperator=mDistinct ? " UNION " : " UNION ALL ";  for (int i=0; i < subQueryCount; i++) {    if (i > 0) {      query.append(unionOperator);    }    query.append(subQueries[i]);  }  appendClause(query," ORDER BY ",sortOrder);  appendClause(query," LIMIT ",limit);  return query.toString();}  }
class C{  public IMouseState createNodeClickedLeftState(final Node n,final MouseEvent event){  final CNodeClickedLeftState<NodeType,EdgeType> state=new CNodeClickedLeftState<NodeType,EdgeType>(this,m_graph,n);  m_factory.createNodeClickedLeftAction().execute(state,event);  return state;}  }
class C{  private void initMetrics(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Initializing Metrics registries");  servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,metricRegistry);  servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,metricRegistry);  log.debug("Registering Metrics Filter");  FilterRegistration.Dynamic metricsFilter=servletContext.addFilter("webappMetricsFilter",new InstrumentedFilter());  metricsFilter.addMappingForUrlPatterns(disps,true,"/*");  metricsFilter.setAsyncSupported(true);  log.debug("Registering Metrics Servlet");  ServletRegistration.Dynamic metricsAdminServlet=servletContext.addServlet("metricsServlet",new MetricsServlet());  metricsAdminServlet.addMapping("/metrics/metrics/*");  metricsAdminServlet.setAsyncSupported(true);  metricsAdminServlet.setLoadOnStartup(2);}  }
class C{  @Override public void transform(SolrDocument doc,int docid,float score) throws IOException {  str.setLength(0);  for (  String s : extra) {    String v=getAsString(s,doc);    str.append(v).append('#');  }  System.out.println("HELLO: " + str);  doc.setField(name,str.toString());}  }
class C{  public double calculateLogLikelihood(){  if (getBooleanState()) {    return Double.NEGATIVE_INFINITY;  } else {    return 0.0;  }}  }
class C{  private synchronized void invalidate(){  ses=null;}  }
class C{  public static Object invoke(Object obj,String methodName,String stringParameter) throws NoSuchMethodException {  try {    Method method=obj.getClass().getMethod(methodName,new Class[]{String.class});    Object result=method.invoke(obj,new Object[]{stringParameter});    return result;  } catch (  IllegalAccessException e) {    throw new NoSuchMethodException(methodName + " is not accessible");  }catch (  InvocationTargetException e) {    throw new InternalError(e.getMessage());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:03.283 -0500",hash_original_method="6AE5D8E6865DDCD084B3272F01FD2E51",hash_generated_method="D761FF91EB130E4DE335DFAAA06834FB") public void insertAt(int row,int[] values){  if ((row < 0) || (row > size())) {    throw new IndexOutOfBoundsException("row " + row);  }  if ((values != null) && (values.length < width())) {    throw new IndexOutOfBoundsException("value count " + values.length);  }  moveRowGapTo(row);  if (mRowGapLength == 0) {    growBuffer();  }  mRowGapStart++;  mRowGapLength--;  if (values == null) {    for (int i=mColumns - 1; i >= 0; i--) {      setValueInternal(row,i,0);    }  } else {    for (int i=mColumns - 1; i >= 0; i--) {      setValueInternal(row,i,values[i]);    }  }}  }
class C{  public static Assignment createDefault(Collection<String> variables){  Assignment a=new Assignment();  variables.stream().forEach(null);  return a;}  }
class C{  public void refresh(GridTab gridTab){  if (this.gridTab != gridTab || !isInit()) {    init=false;    init(gridTab);  } else {    listbox.setModel(listModel);    updateListIndex();  }}  }
class C{  public boolean isSafeClass(SootClass clz){  return safeClasses.contains(clz.getName());}  }
class C{  public void stop(){  mRunning=false;  mStop=true;}  }
class C{  public boolean isSetPort(){  return EncodingUtils.testBit(__isset_bitfield,__PORT_ISSET_ID);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public CaseSwitchExpression(){}  }
class C{  @Override public String auth(final String password){  checkIsInMultiOrPipeline();  client.auth(password);  return client.getStatusCodeReply();}  }
class C{  public boolean pingMyServer(){  return pingMyServer(SmackConfiguration.getPacketReplyTimeout());}  }
